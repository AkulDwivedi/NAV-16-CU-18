OBJECT Codeunit 137022 SCM Planning Parameters
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      WithDemandItem@1007 : Record 27;
      WithDemandSalesLine@1005 : Record 37;
      WithDemandPurchaseLine@1009 : Record 39;
      NoDemandItem@1000 : Record 27;
      LibraryInventory@1001 : Codeunit 132201;
      LibrarySales@1006 : Codeunit 130509;
      LibraryPurchase@1010 : Codeunit 130512;
      Assert@1002 : Codeunit 130000;
      IsInitialized@1008 : Boolean;
      NoDemandIsInitialized@1003 : Boolean;
      WithDemandIsInitialized@1004 : Boolean;

    LOCAL PROCEDURE Initialize@50();
    VAR
      RequisitionLine@1000 : Record 246;
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      RequisitionLine.DELETEALL(TRUE);
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE InitializeNoDemand@29(VAR Item@1000 : Record 27;ReorderingPolicy@1005 : Option;ReorderPoint@1001 : Integer;ReorderQty@1002 : Integer;MaximumInventory@1004 : Integer;SafetyStock@1003 : Integer);
    BEGIN
      Initialize;

      IF NOT NoDemandIsInitialized THEN BEGIN
        CreateItem(NoDemandItem);
        NoDemandIsInitialized := TRUE;
      END;

      InitializeItem(NoDemandItem,ReorderingPolicy,ReorderPoint,ReorderQty,MaximumInventory,SafetyStock);
      Item.GET(NoDemandItem."No.");
    END;

    LOCAL PROCEDURE InitializeWithDemand@34(VAR Item@1000 : Record 27;ReorderingPolicy@1006 : Integer;ReorderPoint@1001 : Integer;ReorderQty@1002 : Integer;MaxInventory@1007 : Integer;SafetyStock@1003 : Integer;DemandQuantity@1004 : Integer);
    VAR
      SalesHeader@1005 : Record 36;
      PurchaseHeader@1008 : Record 38;
    BEGIN
      Initialize;

      IF NOT WithDemandIsInitialized THEN BEGIN
        CreateItem(WithDemandItem);

        // Create demand
        LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
        LibrarySales.CreateSalesLine(WithDemandSalesLine,SalesHeader,WithDemandSalesLine.Type::Item,WithDemandItem."No.",1);
        WithDemandSalesLine.VALIDATE("Planned Delivery Date",SSDemandDate);
        WithDemandSalesLine.MODIFY(TRUE);

        // Initial supply > Safety Stock
        LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
        LibraryPurchase.CreatePurchaseLine(
          WithDemandPurchaseLine,PurchaseHeader,WithDemandPurchaseLine.Type::Item,WithDemandItem."No.",1);
        WithDemandPurchaseLine.VALIDATE("Planned Receipt Date",StartingDate - 2);
        WithDemandPurchaseLine.MODIFY(TRUE);

        WithDemandIsInitialized := TRUE;
      END;

      InitializeItem(WithDemandItem,ReorderingPolicy,ReorderPoint,ReorderQty,MaxInventory,SafetyStock);

      WithDemandSalesLine.VALIDATE(Quantity,DemandQuantity);
      WithDemandSalesLine.MODIFY(TRUE);

      WithDemandPurchaseLine.VALIDATE(Quantity,SafetyStock);
      WithDemandPurchaseLine.MODIFY(TRUE);

      Item.GET(WithDemandItem."No.");
    END;

    LOCAL PROCEDURE InitializeItem@117(VAR Item@1003 : Record 27;ReorderingPolicy@1008 : Integer;ReorderPoint@1007 : Integer;ReorderQty@1006 : Integer;MaxInventory@1005 : Integer;SafetyStock@1004 : Integer);
    BEGIN
      WITH Item DO BEGIN
        GET("No.");
        VALIDATE("Reordering Policy",ReorderingPolicy);
        VALIDATE("Reorder Point",ReorderPoint);
        VALIDATE("Reorder Quantity",ReorderQty);
        VALIDATE("Maximum Inventory",MaxInventory);
        VALIDATE("Safety Stock Quantity",SafetyStock);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE InitializeFixedReorderROP@18(VAR Item@1000 : Record 27;ReorderPoint@1001 : Integer;ReorderQty@1002 : Integer;SafetyStock@1003 : Integer);
    BEGIN
      InitializeNoDemand(Item,Item."Reordering Policy"::"Fixed Reorder Qty.",ReorderPoint,ReorderQty,0,SafetyStock);
      SetOrderModifiers(Item,0,0,0);
    END;

    LOCAL PROCEDURE InitializeFixedReorderOM@6(VAR Item@1000 : Record 27;ReorderPoint@1001 : Integer;ReorderQty@1002 : Integer;SafetyStock@1003 : Integer);
    BEGIN
      InitializeNoDemand(Item,Item."Reordering Policy"::"Fixed Reorder Qty.",ReorderPoint,ReorderQty,0,SafetyStock);
      SetOrderModifiers(Item,5,10,25);
    END;

    LOCAL PROCEDURE InitializeMaxInv@36(VAR Item@1000 : Record 27;ReorderPoint@1001 : Integer;MaxInventory@1002 : Integer;SafetyStock@1003 : Integer);
    BEGIN
      InitializeNoDemand(Item,Item."Reordering Policy"::"Maximum Qty.",ReorderPoint,0,MaxInventory,SafetyStock);
      SetOrderModifiers(Item,0,0,0);
    END;

    LOCAL PROCEDURE InitializeMaxInvOM@20(VAR Item@1000 : Record 27;ReorderPoint@1001 : Integer;MaxInventory@1002 : Integer;SafetyStock@1003 : Integer);
    BEGIN
      InitializeNoDemand(Item,Item."Reordering Policy"::"Maximum Qty.",ReorderPoint,0,MaxInventory,SafetyStock);
      SetOrderModifiers(Item,5,10,25);
    END;

    LOCAL PROCEDURE InitializeLotForLotOM@39(VAR Item@1000 : Record 27;SafetyStock@1003 : Integer);
    BEGIN
      InitializeNoDemand(Item,Item."Reordering Policy"::"Lot-for-Lot",0,0,0,SafetyStock);
      SetOrderModifiers(Item,5,10,25);
    END;

    LOCAL PROCEDURE InitializeFixedReorderROPWithDemand@47(VAR Item@1003 : Record 27;ReorderPoint@1002 : Integer;ReorderQty@1001 : Integer;DemandQty@1000 : Integer);
    BEGIN
      InitializeWithDemand(Item,Item."Reordering Policy"::"Fixed Reorder Qty.",ReorderPoint,ReorderQty,0,6,DemandQty);
      SetOrderModifiers(Item,0,0,0);
    END;

    LOCAL PROCEDURE InitializeFixedReorderOMWithDemand@4(VAR Item@1000 : Record 27;ReorderPoint@1001 : Integer;ReorderQty@1002 : Integer;DemandQty@1004 : Integer);
    BEGIN
      InitializeWithDemand(Item,Item."Reordering Policy"::"Fixed Reorder Qty.",ReorderPoint,ReorderQty,0,5,DemandQty);
      SetOrderModifiers(Item,5,10,25);
    END;

    LOCAL PROCEDURE InitializeMaxInvOMWithDemand@19(VAR Item@1000 : Record 27;ReorderPoint@1001 : Integer;MaxInventory@1002 : Integer;DemandQty@1004 : Integer);
    BEGIN
      InitializeWithDemand(Item,Item."Reordering Policy"::"Maximum Qty.",ReorderPoint,0,MaxInventory,5,DemandQty);
      SetOrderModifiers(Item,5,10,25);
    END;

    LOCAL PROCEDURE InitializeMaxInvWithDemand@86(VAR Item@1000 : Record 27;ReorderPoint@1001 : Integer;MaxInventory@1002 : Integer;DemandQty@1004 : Integer);
    BEGIN
      InitializeWithDemand(Item,Item."Reordering Policy"::"Maximum Qty.",ReorderPoint,0,MaxInventory,5,DemandQty);
      SetOrderModifiers(Item,0,0,0);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_MaxInv_MaximumInventory@33();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInv(Item,14,22,7);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);
      ValidateNextPlanningLine(RequisitionLine,Item,22,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_MaxInv_MaximumInventory_Ignore@32();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInv(Item,14,22,7);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);
      ValidateNextPlanningLine(RequisitionLine,Item,15,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,7,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSDemand_MaxInv_MaximumInventory@88();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInvWithDemand(Item,14,22,18);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);
      ValidateNextPlanningLine(RequisitionLine,Item,17,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,18,AcceptAction(FALSE),SSDemandDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSDemand_MaxInv_MaximumInventory_Ignore@87();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInvWithDemand(Item,14,22,18);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,17,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,1,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,17,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSDemand_MaxInv_MaximumInventory_BelowZero@97();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInvWithDemand(Item,14,22,23);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);
      ValidateNextPlanningLine(RequisitionLine,Item,17,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,23,AcceptAction(FALSE),SSDemandDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSDemand_MaxInv_MaximumInventory_BelowZero_Ignore@96();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInvWithDemand(Item,14,22,23);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,17,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,6,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,17,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSDemand_MaxInv_OM_MaximumInventory_BelowZero@120();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInvWithDemand(Item,21,22,27);
      SetOrderModifiers(Item,5,10,20);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      // There is a by design inconsistency where, when using Maximum Order Quantity in Scenario when you,
      // get a below safety stock exception in the middle of a planning period, planning engine will only
      // order up to safety stock, and not to reorder point/maximum inventory. This test serves as
      // documentation of this decision.

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,20,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,20,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSDemand_MaxInv_OM_MaximumInventory_BelowZero_Ignore@119();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInvWithDemand(Item,14,22,23);
      SetOrderModifiers(Item,5,0,25);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,20,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,3,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,20,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_ROP_RQltSS@21();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROP(Item,14,3,7);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);
      ValidateNextPlanningLine(RequisitionLine,Item,15,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_ROP_RQltSS_Ignore@17();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROP(Item,14,3,7);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);
      ValidateNextPlanningLine(RequisitionLine,Item,9,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,7,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_ROP_RQltROP@28();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROP(Item,14,10,7);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);
      ValidateNextPlanningLine(RequisitionLine,Item,20,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_ROP_RQltROP_Ignore@27();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROP(Item,14,10,7);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,7,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_ROP_RQltROP_2@41();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROP(Item,13,7,7);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);
      ValidateNextPlanningLine(RequisitionLine,Item,14,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_ROP_RQltROP_3@26();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROP(Item,14,7,7);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);
      ValidateNextPlanningLine(RequisitionLine,Item,21,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_ROP_RQltROP_OrderMultiple@37();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROP(Item,13,7,6);
      SetOrderModifiers(Item,10,0,0);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);
      ValidateNextPlanningLine(RequisitionLine,Item,20,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_ROP_RQltROP_MinQty@40();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROP(Item,13,7,13);
      SetOrderModifiers(Item,0,15,0);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);
      ValidateNextPlanningLine(RequisitionLine,Item,15,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_ROP_RQltROP_MaxQty@31();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROP(Item,14,10,6);
      SetOrderModifiers(Item,0,0,7);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,7,AcceptAction(FALSE),StartingDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,7,AcceptAction(FALSE),StartingDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,7,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_ROP_RQeqROP@81();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROP(Item,14,14,7);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);
      ValidateNextPlanningLine(RequisitionLine,Item,28,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_ROP_RQgtROP@82();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROP(Item,14,15,7);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);
      ValidateNextPlanningLine(RequisitionLine,Item,15,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_ROP_RQltSS@46();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROPWithDemand(Item,13,3,12);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,9,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,3,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,9,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_ROP_RQltSS_Ignore@45();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROPWithDemand(Item,13,3,12);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,9,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,3,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,9,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_ROP_RQltSS_BelowZero@100();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROPWithDemand(Item,13,3,17);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,9,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,8,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,9,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_ROP_RQltSS_BelowZero_Ignore@99();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROPWithDemand(Item,13,3,17);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,9,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,8,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,9,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_ROP_RQltROP@44();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROPWithDemand(Item,13,10,12);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(FALSE),SSDemandDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_ROP_RQltROP_Ignore@30();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROPWithDemand(Item,13,10,12);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,2,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_ROP_RQltROP_2@104();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROPWithDemand(Item,13,10,13);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_ROP_RQltROP_MaxQty@109();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderROPWithDemand(Item,13,10,12);
      SetOrderModifiers(Item,0,0,4);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,7);

      ValidateNextPlanningLine(RequisitionLine,Item,4,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,4,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,2,AcceptAction(TRUE),StartingDate);

      // There is a by design inconsistency where, when using Maximum Order Quantity in Scenario when you,
      // get a below safety stock exception in the middle of a planning period, planning engine will only
      // order up to safety stock, and not to reorder point. This test serves as documentation of this decision.

      ValidateNextPlanningLine(RequisitionLine,Item,4,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,4,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
      ValidateNextPlanningLine(RequisitionLine,Item,4,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
      ValidateNextPlanningLine(RequisitionLine,Item,2,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_LFL_OrderMultiple@55();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeLotForLotOM(Item,3);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_LFL_OrderMultiple_Ignore@54();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeLotForLotOM(Item,3);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);
      ValidateNextPlanningLine(RequisitionLine,Item,3,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_LFL_MinQty@60();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeLotForLotOM(Item,18);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);
      ValidateNextPlanningLine(RequisitionLine,Item,20,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_LFL_MinQty_Ignore@59();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeLotForLotOM(Item,18);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);
      ValidateNextPlanningLine(RequisitionLine,Item,18,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_LFL_MaxQty@62();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeLotForLotOM(Item,28);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);
      ValidateNextPlanningLine(RequisitionLine,Item,25,AcceptAction(FALSE),StartingDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_LFL_MaxQty_Ignore@61();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeLotForLotOM(Item,28);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);
      ValidateNextPlanningLine(RequisitionLine,Item,28,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_MaxInv_OrderMultiple@15();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInvOM(Item,14,17,13);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);
      ValidateNextPlanningLine(RequisitionLine,Item,20,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_MaxInv_OrderMultiple_Ignore@10();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInvOM(Item,19,27,18);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,18,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_MaxInv_MinQty@51();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInvOM(Item,5,6,3);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_MaxInv_MinQty_Ignore@49();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInvOM(Item,10,17,3);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);
      ValidateNextPlanningLine(RequisitionLine,Item,15,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,3,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_MaxInv_MaxQty@65();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInvOM(Item,29,37,28);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);
      ValidateNextPlanningLine(RequisitionLine,Item,25,AcceptAction(FALSE),StartingDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,15,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_MaxInv_MaxQty_Ignore@63();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInvOM(Item,29,37,28);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,28,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSDemand_MaxInv_MinQty@71();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInvOMWithDemand(Item,10,13,11);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(FALSE),SSDemandDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSDemand_MaxInv_MinQty_Ignore@70();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInvOMWithDemand(Item,10,17,16);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,15,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,1,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,15,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSDemand_MaxInv_MaxQty@112();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInvOMWithDemand(Item,10,17,41);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,15,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,25,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,15,AcceptAction(FALSE),SSDemandDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSDemand_MaxInv_Maximum_Qty_Ignore@111();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeMaxInvOMWithDemand(Item,10,17,41);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,4);
      ValidateNextPlanningLine(RequisitionLine,Item,15,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,25,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,1,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,15,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_OrderMultiple@1009();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
      UntrackedPlanningElement@1002 : Record 99000855;
      SafetyStock@1003 : Integer;
    BEGIN
      SafetyStock := 18;
      InitializeFixedReorderOM(Item,19,1,SafetyStock);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);

      ValidateTrackingLineCount(UntrackedPlanningElement,Item,RequisitionLine."Line No.",3);
      ValidateNextTrackingLine(UntrackedPlanningElement,Item,SafetyStock,SafetyStock,'Safety Stock Quantity');
      ValidateNextTrackingLine(UntrackedPlanningElement,Item,0,0,SSExceptionText(SafetyStock,StartingDate));
      ValidateNextPlanningLine(RequisitionLine,Item,20,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_OrderMultiple_Ignore@11();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
      UntrackedPlanningElement@1002 : Record 99000855;
      SafetyStock@1003 : Integer;
    BEGIN
      SafetyStock := 18;
      InitializeFixedReorderOM(Item,19,1,SafetyStock);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);

      ValidateTrackingLineCount(UntrackedPlanningElement,Item,RequisitionLine."Line No.",3);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);

      ValidateTrackingLineCount(UntrackedPlanningElement,Item,RequisitionLine."Line No.",2);
      ValidateNextTrackingLine(UntrackedPlanningElement,Item,SafetyStock,SafetyStock,'Safety Stock Quantity');
      ValidateNextTrackingLine(UntrackedPlanningElement,Item,0,0,SSExceptionText(SafetyStock,StartingDate));
      ValidateNextPlanningLine(RequisitionLine,Item,SafetyStock,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_MinQty@3();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
      UntrackedPlanningElement@1003 : Record 99000855;
      SafetyStock@1002 : Integer;
    BEGIN
      SafetyStock := 5;
      InitializeFixedReorderOM(Item,9,1,SafetyStock);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,1);

      ValidateTrackingLineCount(UntrackedPlanningElement,Item,RequisitionLine."Line No.",3);
      ValidateNextTrackingLine(UntrackedPlanningElement,Item,SafetyStock,SafetyStock,'Safety Stock Quantity');
      ValidateNextTrackingLine(UntrackedPlanningElement,Item,0,0,SSExceptionText(SafetyStock,StartingDate));
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_MinQty_Ignore@12();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
      UntrackedPlanningElement@1003 : Record 99000855;
      SafetyStock@1002 : Integer;
    BEGIN
      SafetyStock := 5;
      InitializeFixedReorderOM(Item,9,1,SafetyStock);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);

      ValidateTrackingLineCount(UntrackedPlanningElement,Item,RequisitionLine."Line No.",3);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);

      ValidateTrackingLineCount(UntrackedPlanningElement,Item,RequisitionLine."Line No.",2);
      ValidateNextTrackingLine(UntrackedPlanningElement,Item,SafetyStock,SafetyStock,'Safety Stock Quantity');
      ValidateNextTrackingLine(UntrackedPlanningElement,Item,0,0,SSExceptionText(SafetyStock,StartingDate));
      ValidateNextPlanningLine(RequisitionLine,Item,5,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_MaxQty@1008();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
      UntrackedPlanningElement@1002 : Record 99000855;
      SafetyStock@1003 : Integer;
      ReorderQuantity@1004 : Integer;
    BEGIN
      SafetyStock := 28;
      ReorderQuantity := 7;
      InitializeFixedReorderOM(Item,29,ReorderQuantity,SafetyStock);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);

      ValidateTrackingLineCount(UntrackedPlanningElement,Item,RequisitionLine."Line No.",2);
      ValidateNextTrackingLine(UntrackedPlanningElement,Item,SafetyStock,GLB_MaxQty,'Safety Stock Quantity');
      ValidateNextTrackingLine(UntrackedPlanningElement,Item,0,0,SSExceptionText(SafetyStock,StartingDate));
      ValidateNextPlanningLine(RequisitionLine,Item,GLB_MaxQty,AcceptAction(FALSE),StartingDate - 1);

      ValidateTrackingLineCount(UntrackedPlanningElement,Item,RequisitionLine."Line No.",4);
      ValidateNextTrackingLine(UntrackedPlanningElement,Item,SafetyStock,SafetyStock - GLB_MaxQty,'Safety Stock Quantity');
      ValidateNextTrackingLine(
        UntrackedPlanningElement,Item,ReorderQuantity,ReorderQuantity - (SafetyStock - GLB_MaxQty),'Reorder Quantity');
      ValidateNextTrackingLine(UntrackedPlanningElement,Item,GLB_MinQty,GLB_MinQty - ReorderQuantity,'Minimum Order Quantity');
      ValidateNextTrackingLine(UntrackedPlanningElement,Item,0,0,SSExceptionText(SafetyStock,StartingDate));
      ValidateNextPlanningLine(RequisitionLine,Item,GLB_MinQty,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSPlanStart_FixedReorder_MaxQty_Ignore@13();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderOM(Item,29,7,28);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,28,AcceptAction(FALSE),StartingDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_OrderMultiple@8();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderOMWithDemand(Item,10,1,22);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,15,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_OrderMultiple_Ignore@7();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderOMWithDemand(Item,9,7,22);

      // When using Fixed Reorder Quantity and there is a demand that projects availability
      // to below zero, the planning parameters are still used, even if flag set to ignore.
      // Known inconsistent behaviour.

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,12,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_MinQty_BelowSS@77();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderOMWithDemand(Item,5,7,12);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(FALSE),SSDemandDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_MinQty_BelowSS_Ignore@76();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderOMWithDemand(Item,9,7,12);

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,2,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_MinQty_BelowZero@79();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderOMWithDemand(Item,9,7,26);
      // Fixed Reorder will now order up to reorder point also in the
      // middle of planning period. Change in parameters necessary here.
      SetOrderModifiers(Item,5,20,25);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);
      ValidateNextPlanningLine(RequisitionLine,Item,20,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,20,AcceptAction(FALSE),SSDemandDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_MinQty_BelowZero_2@116();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderOMWithDemand(Item,9,7,26);
      // Fixed Reorder will now order up to reorder point also in the
      // middle of planning period. Change in parameters necessary.
      SetOrderModifiers(Item,5,20,25);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,2);
      ValidateNextPlanningLine(RequisitionLine,Item,20,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,20,AcceptAction(FALSE),SSDemandDate - 1);
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_MinQty_BelowZero_Ignore@78();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderOMWithDemand(Item,9,7,17);

      // When using Fixed Reorder Quantity and there is a demand that projects availability
      // to below zero, the planning parameters are still used, even if flag set to ignore.
      // Known inconsistent behaviour.

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,3);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,7,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_MaxQty_BelowZero@16();
    VAR
      Item@1000 : Record 27;
      UntrackedPlanningElement@1003 : Record 99000855;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderOMWithDemand(Item,10,7,67);

      CalculatePlanFor(Item,RespectParameters(TRUE));

      ValidatePlanningLineCount(RequisitionLine,Item,5);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,25,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,25,AcceptAction(FALSE),SSDemandDate - 1);

      ValidateTrackingLineCount(UntrackedPlanningElement,Item,RequisitionLine."Line No.",3);
      ValidateNextTrackingLine(UntrackedPlanningElement,Item,5,5,'Safety Stock Quantity');
      ValidateNextTrackingLine(UntrackedPlanningElement,Item,10,3,'Minimum Order Quantity');
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    [Test]
    PROCEDURE Exception_SSDemand_FixedReorder_MaxQty_BelowZero_Ignore@9();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
    BEGIN
      InitializeFixedReorderOMWithDemand(Item,10,7,67);

      // When using Fixed Reorder Quantity and there is a demand that projects availability
      // to below zero, the planning parameters are still used, even if flag set to ignore.
      // Known inconsistent behaviour.

      CalculatePlanFor(Item,RespectParameters(FALSE));

      ValidatePlanningLineCount(RequisitionLine,Item,5);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),StartingDate);
      ValidateNextPlanningLine(RequisitionLine,Item,25,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,25,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,7,AcceptAction(FALSE),SSDemandDate - 1);
      ValidateNextPlanningLine(RequisitionLine,Item,10,AcceptAction(TRUE),TimeBucketEnd(Item,StartingDate));
    END;

    LOCAL PROCEDURE CreateItem@64(VAR Item@1000 : Record 27);
    VAR
      TimeBucket@1001 : DateFormula;
    BEGIN
      LibraryInventory.CreateItem(Item);
      EVALUATE(TimeBucket,'<1W>');
      Item.VALIDATE("Time Bucket",TimeBucket);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculatePlanFor@14(Item@1000 : Record 27;RespectParameters@1002 : Boolean);
    VAR
      LibraryPlanning@1001 : Codeunit 132203;
    BEGIN
      LibraryPlanning.CalcRegenPlanForPlanWkshPlanningParams(Item,StartingDate,EndingDate,RespectParameters);
    END;

    LOCAL PROCEDURE SetOrderModifiers@1(VAR Item@1000 : Record 27;OrderMultiple@1001 : Integer;MinimumQty@1002 : Integer;MaximumQty@1003 : Integer);
    BEGIN
      Item.VALIDATE("Order Multiple",OrderMultiple);
      Item.VALIDATE("Minimum Order Quantity",MinimumQty);
      Item.VALIDATE("Maximum Order Quantity",MaximumQty);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ValidateNextPlanningLine@23(VAR RequisitionLine@1006 : Record 246;Item@1000 : Record 27;Quantity@1001 : Integer;AcceptActionMessage@1003 : Boolean;StartingDate@1004 : Date);
    BEGIN
      Assert.AreEqual(Item."No.",RequisitionLine."No.",
        'Unexpected Item No. on Requisition Line.');
      Assert.AreEqual(RequisitionLine."Action Message"::New,RequisitionLine."Action Message",
        'Unexpected Action Message on Requistion Line');
      Assert.AreEqual(AcceptActionMessage,RequisitionLine."Accept Action Message",
        'Unexpected Accept Action Message on Requistion Line');
      Assert.AreEqual(Quantity,RequisitionLine.Quantity,
        'Unexpected Quantity on Requistion Line');
      Assert.AreEqual(StartingDate,RequisitionLine."Starting Date",
        'Unexpected Starting Date on Requistion Line');
      Assert.AreEqual(StartingDate + 1,RequisitionLine."Due Date",
        'Unexpected Due Date on Requistion Line');

      RequisitionLine.NEXT;
    END;

    LOCAL PROCEDURE ValidatePlanningLineCount@58(VAR RequisitionLine@1000 : Record 246;Item@1001 : Record 27;Count@1002 : Integer);
    BEGIN
      RequisitionLine.SETRANGE("No.",Item."No.");
      RequisitionLine.FINDSET;
      Assert.IsTrue(RequisitionLine.COUNT >= Count,
        STRSUBSTNO('Missing planning lines. Expected: %1. Actual: %2',Count,RequisitionLine.COUNT));
      Assert.IsTrue(RequisitionLine.COUNT <= Count,
        STRSUBSTNO('Excess planning lines. Expected: %1. Actual: %2',Count,RequisitionLine.COUNT));
    END;

    LOCAL PROCEDURE ValidateNextTrackingLine@80(VAR UntrackedPlanningElement@1006 : Record 99000855;Item@1000 : Record 27;ParameterValue@1001 : Integer;UntrackedQuantity@1003 : Integer;Source@1004 : Text[200]);
    BEGIN
      Assert.AreEqual(Item."No.",UntrackedPlanningElement."Item No.",
        'Unexpected Item No. on Tracking Line.');
      IF ParameterValue > 0 THEN
        Assert.AreEqual(ParameterValue,UntrackedPlanningElement."Parameter Value",
          'Unexpected Parameter Value on Tracking Line');
      Assert.AreEqual(UntrackedQuantity,UntrackedPlanningElement."Untracked Quantity",
        'Unexpected Untracked Quantity on Planning Line');
      Assert.AreEqual(Source,UntrackedPlanningElement.Source,
        'Unexpected Source text on Planning Line');

      UntrackedPlanningElement.NEXT;
    END;

    LOCAL PROCEDURE ValidateTrackingLineCount@75(VAR UntrackedPlanningElement@1003 : Record 99000855;Item@1001 : Record 27;RequisitionLineNo@1000 : Integer;Count@1002 : Integer);
    BEGIN
      CLEAR(UntrackedPlanningElement);
      UntrackedPlanningElement.SETRANGE("Item No.",Item."No.");
      UntrackedPlanningElement.SETRANGE("Worksheet Line No.",RequisitionLineNo);
      UntrackedPlanningElement.FINDSET;
      Assert.IsTrue(Count >= UntrackedPlanningElement.COUNT,
        STRSUBSTNO('Missing tracking lines. Expected: %1. Actual: %2',Count,UntrackedPlanningElement.COUNT));
      Assert.IsTrue(Count <= UntrackedPlanningElement.COUNT,
        STRSUBSTNO('Excess tracking lines. Expected: %1. Actual: %2',Count,UntrackedPlanningElement.COUNT));
    END;

    LOCAL PROCEDURE StartingDate@24() : Date;
    BEGIN
      EXIT(WORKDATE);
    END;

    LOCAL PROCEDURE EndingDate@25() : Date;
    BEGIN
      EXIT(WORKDATE + 10);
    END;

    LOCAL PROCEDURE SSDemandDate@5() : Date;
    BEGIN
      EXIT(WORKDATE + 6);
    END;

    LOCAL PROCEDURE AcceptAction@35(Accept@1000 : Boolean) : Boolean;
    BEGIN
      EXIT(Accept);
    END;

    LOCAL PROCEDURE RespectParameters@2(Ignore@1000 : Boolean) : Boolean;
    BEGIN
      EXIT(Ignore);
    END;

    LOCAL PROCEDURE TimeBucketEnd@106(Item@1000 : Record 27;StartingDate@1001 : Date) : Date;
    VAR
      TimeBucketEndingDate@1002 : Date;
    BEGIN
      TimeBucketEndingDate := CALCDATE(Item."Time Bucket",StartingDate);
      EXIT(TimeBucketEndingDate);
    END;

    LOCAL PROCEDURE SSExceptionText@132(SafetyStockQuantity@1000 : Integer;StartDate@1001 : Date) : Text[200];
    BEGIN
      EXIT(
        STRSUBSTNO(
          'Exception: The projected available inventory is below Safety Stock Quantity %1 on %2.',SafetyStockQuantity,StartDate));
    END;

    LOCAL PROCEDURE GLB_MinQty@156() : Integer;
    BEGIN
      EXIT(10);
    END;

    LOCAL PROCEDURE GLB_MaxQty@157() : Integer;
    BEGIN
      EXIT(25);
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [SCM]
    }
    END.
  }
}

