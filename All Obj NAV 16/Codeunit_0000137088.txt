OBJECT Codeunit 137088 SCM Order Planning - III
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LocationRed@1011 : Record 14;
      LocationBlue@1010 : Record 14;
      LocationBlue2@1009 : Record 14;
      SalesReceivablesSetup@1004 : Record 311;
      Assert@1005 : Codeunit 130000;
      LibraryUtility@1003 : Codeunit 131000;
      LibraryPlanning@1002 : Codeunit 132203;
      LibraryPurchase@1006 : Codeunit 130512;
      LibraryInventory@1017 : Codeunit 132201;
      LibraryManufacturing@1018 : Codeunit 132202;
      LibrarySales@1022 : Codeunit 130509;
      LibraryWarehouse@1019 : Codeunit 132204;
      LibraryDimension@1029 : Codeunit 131001;
      LibraryRandom@1001 : Codeunit 130440;
      VerifyOnGlobal@1012 : 'RequisitionLine,Orders';
      DemandTypeGlobal@1013 : 'Sales,Production';
      GlobalChildItemNo@1027 : Code[20];
      IsInitialized@1000 : Boolean;
      ValidationError@1014 : TextConst 'ENU=%1  must be %2 in %3.';
      NoErrorText@1021 : TextConst 'ENU="No. must be equal to ''%1''  in Requisition Line: Worksheet Template Name=, Journal Batch Name=, Line No."';
      DateErrorText@1020 : TextConst 'ENU="Demand Date must be equal to ''%1''  in Requisition Line: Worksheet Template Name=, Journal Batch Name=, Line No.="';
      QuantityErrorText@1016 : TextConst 'ENU="Demand Quantity (Base) must be equal to ''%1''  in Requisition Line: Worksheet Template Name=, Journal Batch Name=, Line No.="';
      LocationErrorText@1015 : TextConst 'ENU="Location Code must be equal to ''%1''  in Requisition Line: Worksheet Template Name=, Journal Batch Name=, Line No.="';
      ErrorText@1023 : TextConst 'ENU=Error Message Must be same.';
      ExpectedQuantity@1024 : Decimal;
      QuantityError@1026 : TextConst 'ENU=Available Quantity must match.';
      OrderTrackingMessage@1028 : TextConst 'ENU=The change will not affect existing entries.';
      UnexpectedMessageDialog@1030 : TextConst 'ENU=Unexpected Message dialog.  %1';
      LineCountError@1032 : TextConst 'ENU="There should be '' %1 '' line(s) in the planning worksheet for item. "';
      ReserveError@1031 : TextConst 'ENU=Reserve must be equal to ''%1''  in Requisition Line';
      LineExistErr@1025 : TextConst 'ENU=Requistion line in %1 worksheet should exist for item %2';

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ProductionOrderPlanningChangeItem@140();
    VAR
      ProductionOrder@1004 : Record 5405;
      ParentItem@1003 : Record 27;
      RequisitionLine@1002 : Record 246;
      ChildItem@1001 : Record 27;
      Item2@1006 : Record 27;
      ChildItem2@1007 : Record 27;
    BEGIN
      // Setup: Create Work Center, Routing, Item, Create Firm Planned Production Order and calculate Plan from Order Planning.
      Initialize;
      CreateManufacturingSetup(ParentItem,ChildItem,FALSE,ChildItem."Order Tracking Policy"::None);
      CreateProdItem(Item2,ChildItem2);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",LocationRed.Code,LibraryRandom.RandDec(10,2) +
        10);
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Change Source No in Production Order.
      ChangeDataOnProductionOrderAndRefresh(ProductionOrder,ProductionOrder.FIELDNO("Source No."),Item2."No.");

      // Exercise: Run Make Supply Order.
      ASSERTERROR MakeSupplyOrdersActiveOrder(ProductionOrder."No.");

      // Verify : Check that error message is same as accepted during make order when change Production Order Item No. after calculate plan.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(NoErrorText,ChildItem2."No.")) > 0,GETLASTERRORTEXT);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ProductionOrderPlanningChangeLocation@138();
    VAR
      ProductionOrder@1009 : Record 5405;
      ParentItem@1008 : Record 27;
      RequisitionLine@1007 : Record 246;
      ChildItem@1006 : Record 27;
    BEGIN
      // Setup: Create Work Center, Routing, Item, Create Firm Planned Production Order and calculate Plan from Order Planning.
      Initialize;
      CreateManufacturingSetup(ParentItem,ChildItem,FALSE,ChildItem."Order Tracking Policy"::None);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",LocationRed.Code,LibraryRandom.RandDec(10,2));
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);
      FindRequisitionLine(RequisitionLine,ProductionOrder."No.",ChildItem."No.",LocationRed.Code);

      // Change Location On Production Order.
      ChangeDataOnProductionOrderAndRefresh(ProductionOrder,ProductionOrder.FIELDNO("Location Code"),LocationBlue.Code);

      // Exercise: Run Make Supply Order.
      ASSERTERROR MakeSupplyOrdersActiveOrder(ProductionOrder."No.");

      // Verify : Check that error message is same as accepted during make order when change Production Order Location Code after calculate plan.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(LocationErrorText,LocationBlue.Code)) > 0,GETLASTERRORTEXT);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ProductionOrderPlanningChangeQty@137();
    VAR
      ProductionOrder@1004 : Record 5405;
      ParentItem@1003 : Record 27;
      RequisitionLine@1002 : Record 246;
      ChildItem@1001 : Record 27;
      ProdOrderComponent@1000 : Record 5407;
      Quantity@1009 : Decimal;
      Quantity2@1010 : Decimal;
    BEGIN
      // Setup: Create Work Center, Routing, Item, Create Firm Planned Production Order and calculate Plan from Order Planning.
      Initialize;
      CreateManufacturingSetup(ParentItem,ChildItem,FALSE,ChildItem."Order Tracking Policy"::None);
      Quantity := LibraryRandom.RandDec(10,2);
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",LocationRed.Code,Quantity);
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Change Source No in Production Order.
      ChangeDataOnProductionOrderAndRefresh(
        ProductionOrder,ProductionOrder.FIELDNO(Quantity),Quantity + LibraryRandom.RandDec(10,2));
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder."No.",ChildItem."No.");
      Quantity2 := ProdOrderComponent."Remaining Quantity";

      // Exercise: Run Make Supply Order.
      ASSERTERROR MakeSupplyOrdersActiveOrder(ProductionOrder."No.");

      // Verify : Check that error message is same as accepted during make order when change Production Order Quantity after calculate plan.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(QuantityErrorText,Quantity2)) > 0,GETLASTERRORTEXT);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ProductionOrderPlanningChangeDemandDate@136();
    VAR
      ProductionOrder@1004 : Record 5405;
      ParentItem@1003 : Record 27;
      RequisitionLine@1002 : Record 246;
      ChildItem@1001 : Record 27;
      FirmPlannedProdOrders@1000 : TestPage 9325;
    BEGIN
      // Setup: Create Work Center, Routing, Item, Create Firm Planned Production Order and calculate Plan from Order Planning.
      Initialize;
      CreateManufacturingSetup(ParentItem,ChildItem,FALSE,ChildItem."Order Tracking Policy"::None);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",LocationRed.Code,LibraryRandom.RandDec(10,2) +
        10);
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Change Source No in Production Order.
      FirmPlannedProdOrders.OPENEDIT;
      FirmPlannedProdOrders.FILTER.SETFILTER("No.",ProductionOrder."No.");
      FirmPlannedProdOrders."Due Date".SETVALUE(CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      FirmPlannedProdOrders.CLOSE;
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);

      // Exercise: Run Make Supply Order.
      ASSERTERROR MakeSupplyOrdersActiveOrder(ProductionOrder."No.");

      // Verify : Check that error message is same as accepted during make order when change Production Order Due Date after calculate plan.
      ProductionOrder.GET(ProductionOrder.Status,ProductionOrder."No.");
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(DateErrorText,ProductionOrder."Due Date" - 1 )) > 0,GETLASTERRORTEXT);
    END;

    [Test]
    [HandlerFunctions(OrderTrackingPageHandler,MessageHandler)]
    PROCEDURE PlanningForOrderTracking@135();
    VAR
      ProductionOrder@1004 : Record 5405;
      ParentItem@1003 : Record 27;
      RequisitionLine@1002 : Record 246;
      ChildItem@1001 : Record 27;
      ProdOrderComponent@1009 : Record 5407;
      OrderPlanning@1015 : TestPage 5522;
    BEGIN
      // Setup: Create Work Center, Routing, Item, Create Firm Planned Production Order and calculate Plan from Order Planning.
      Initialize;
      CreateManufacturingSetup(ParentItem,ChildItem,FALSE,ChildItem."Order Tracking Policy"::"Tracking Only");
      GlobalChildItemNo := ChildItem."No.";
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",LocationRed.Code,LibraryRandom.RandDec(10,2) +
        10);
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder."No.",ChildItem."No.");
      ExpectedQuantity := ProdOrderComponent."Remaining Quantity";
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);

      // Exercise And Verify : Open Order Tracking Page and Verification is done by Handler Method. Check That Order Tracking Line Create As expected.
      OpenOrderPlanningPage(OrderPlanning,ProductionOrder."No.",ChildItem."No.");
      OrderPlanning.OrderTracking.INVOKE;
      OrderPlanning.CLOSE;
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler,OrderTrackingPageHandler,MessageHandler)]
    PROCEDURE MakeOrderAndCheckOrderTrackingInPurchOrder@134();
    VAR
      ProductionOrder@1004 : Record 5405;
      ParentItem@1003 : Record 27;
      RequisitionLine@1002 : Record 246;
      ChildItem@1001 : Record 27;
      ProdOrderComponent@1009 : Record 5407;
      PurchaseOrder@1000 : TestPage 50;
      PurchaseOrderNo@1016 : Code[20];
    BEGIN
      // Setup: Create Work Center, Routing, Item, Create Firm Planned Production Order and calculate Plan from Order Planning.
      Initialize;
      CreateManufacturingSetup(ParentItem,ChildItem,FALSE,ChildItem."Order Tracking Policy"::"Tracking Only");
      GlobalChildItemNo := ChildItem."No.";
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",LocationRed.Code,LibraryRandom.RandDec(10,2) +
        10);
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder."No.",ChildItem."No.");
      ExpectedQuantity := ProdOrderComponent."Remaining Quantity";
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);
      PurchaseOrderNo := FindPurchaseOrderNo;

      // Exercise.
      MakeSupplyOrdersActiveOrder(ProductionOrder."No.");

      // Verify : Verification is done by Handler Method. Check That Order Tracking Line Create As expected when make order from Order Planning Page.
      PurchaseOrder.OPENVIEW;
      PurchaseOrder.FILTER.SETFILTER("No.",PurchaseOrderNo);
      PurchaseOrder.PurchLines.OrderTracking.INVOKE;
      PurchaseOrder.CLOSE;
    END;

    [Test]
    [HandlerFunctions(PlanningComponentPageHandler)]
    PROCEDURE PlanningForProdOrderPlanningComponent@19();
    BEGIN
      Initialize;
      PlanningForProductionOrder(FALSE)
    END;

    [Test]
    [HandlerFunctions(PlanningRoutingPageHandler)]
    PROCEDURE PlanningForProdOrderPlanningRouting@10();
    BEGIN
      Initialize;
      PlanningForProductionOrder(TRUE)
    END;

    LOCAL PROCEDURE PlanningForProductionOrder@191(PlanningRouting@1000 : Boolean);
    VAR
      ProductionOrder@1005 : Record 5405;
      ParentItem@1004 : Record 27;
      RequisitionLine@1003 : Record 246;
      ChildItem@1002 : Record 27;
      OrderPlanning@1001 : TestPage 5522;
    BEGIN
      // Setup: Create Work Center, Routing, Item, Create Firm Planned Production Order and calculate Plan from Order Planning.
      CreateManufacturingSetup(ParentItem,ChildItem,TRUE,ChildItem."Order Tracking Policy"::None);
      GlobalChildItemNo := ChildItem."No.";
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",LocationRed.Code,LibraryRandom.RandDec(10,2));
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);
      OpenOrderPlanningPage(OrderPlanning,ProductionOrder."No.",ChildItem."No.");

      // Exercise And Verify.
      IF PlanningRouting THEN
        // Exercise And Verify : Open Planning Routing and Verification is done by Handler Method. Check That Planning Routing is same as Routing on child item.
        OrderPlanning."Page Planning Routing".INVOKE
      ELSE
        // Exercise And Verify : Open Planning Component and Verification is done by Handler Method. Check That Planning Component is same as component on child item.
        OrderPlanning."Page Planning Components".INVOKE;
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ChangePlanningComponentAndMakeOrder@166();
    VAR
      ProductionOrder@1009 : Record 5405;
      ParentItem@1008 : Record 27;
      RequisitionLine@1007 : Record 246;
      ChildItem@1006 : Record 27;
      Item@1000 : Record 27;
      PlanningComponent@1001 : Record 99000829;
      QuantityPer@1003 : Decimal;
    BEGIN
      // Setup: Create Work Center, Routing, Item, Create Firm Planned Production Order and calculate Plan from Order Planning and Add Planning Component.
      Initialize;
      CreateManufacturingSetup(ParentItem,ChildItem,TRUE,ChildItem."Order Tracking Policy"::None);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",LocationRed.Code,LibraryRandom.RandDec(10,2));  // Random value is Important For test.
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);
      FindRequisitionLine(RequisitionLine,ProductionOrder."No.",ChildItem."No.",LocationRed.Code);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      QuantityPer := LibraryRandom.RandDec(10,2);
      LibraryPlanning.CreatePlanningComponent(PlanningComponent,RequisitionLine);
      UpdatePlanningComponent(PlanningComponent,Item."No.",Item."Base Unit of Measure",QuantityPer);

      // Exercise.
      MakeSupplyOrdersActiveOrder(ProductionOrder."No.");

      // Verify : Check That Production Order Component is Created with the added component in Order Planning Page.
      VerifyProdOrderComponent(Item."No.",Item."Base Unit of Measure",QuantityPer);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ChangePlanningRoutingAndMakeOrder@163();
    VAR
      ProductionOrder@1009 : Record 5405;
      ParentItem@1008 : Record 27;
      RequisitionLine@1007 : Record 246;
      ChildItem@1006 : Record 27;
      PlanningRoutingLine@1000 : Record 99000830;
      WorkCenter@1001 : Record 99000754;
      OperationNo@1002 : Code[10];
    BEGIN
      // Setup: Create Work Center, Routing, Item, Create Firm Planned Production Order and calculate Plan from Order Planning and Add Planning Routing.
      Initialize;
      CreateManufacturingSetup(ParentItem,ChildItem,TRUE,ChildItem."Order Tracking Policy"::None);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",LocationRed.Code,LibraryRandom.RandDec(10,2));
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);
      FindRequisitionLine(RequisitionLine,ProductionOrder."No.",ChildItem."No.",LocationRed.Code);
      CreateWorkCenter(WorkCenter);
      OperationNo := FindLastOperationNo(ChildItem."Routing No.") + FORMAT(LibraryRandom.RandInt(5));
      LibraryPlanning.CreatePlanningRoutingLine(PlanningRoutingLine,RequisitionLine,OperationNo);
      UpdatePlanningRoutingLine(
        PlanningRoutingLine,WorkCenter."No.",FindLastOperationNo(ChildItem."Routing No."),LibraryRandom.RandDec(10,2),
        LibraryRandom.RandDec(10,2));  // Random Value Required.

      // Exercise.
      MakeSupplyOrdersActiveOrder(ProductionOrder."No.");

      // Verify : Check That Production Order Routing Line is Created with the added Routing Line in Order Planning Page.
      VerifyProdOrderRoutingLine(PlanningRoutingLine,ChildItem."Routing No.",OperationNo);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE StatisticOnProductionOrderWithPlanning@160();
    VAR
      ProductionOrder@1009 : Record 5405;
      ParentItem@1008 : Record 27;
      RequisitionLine@1007 : Record 246;
      ChildItem@1006 : Record 27;
      ProductionOrderStatistics@1010 : TestPage 99000816;
      FirmPlannedProdOrders@1011 : TestPage 9325;
      ProductionOrderStatistics2@1021 : TestPage 99000816;
      FirmPlannedProdOrders2@1022 : TestPage 9325;
      ProductionOrderNo@1023 : Code[20];
    BEGIN
      // Setup: Create Work Center, Routing, Item, Create Firm Planned Production Order and calculate Plan from Order Planning ,Make Order and Open Production Order Statistics.
      Initialize;
      CreateManufacturingSetup(ParentItem,ChildItem,TRUE,ChildItem."Order Tracking Policy"::None);
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",LocationRed.Code,LibraryRandom.RandDec(10,2));
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);
      FindRequisitionLine(RequisitionLine,ProductionOrder."No.",ChildItem."No.",LocationRed.Code);
      MakeSupplyOrdersActiveOrder(ProductionOrder."No.");
      ProductionOrderNo := FindProductionOrderNo(ChildItem."No.");
      OpenFirmPlannedProductionOrder(FirmPlannedProdOrders,ProductionOrderStatistics,ChildItem."No.",ProductionOrderNo);

      // Exercise : Create Firm Planned Production Order and Open Production Order Statistics.
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ChildItem."No.",LocationRed.Code,RequisitionLine.Quantity);
      OpenFirmPlannedProductionOrder(FirmPlannedProdOrders2,ProductionOrderStatistics2,ChildItem."No.",ProductionOrder."No.");

      // Verify : Check Production Order Statistic on Firm Planned Prod. Order created from Make Order with Production Order Statistic on Firm Planned Production Order Created Directly.
      VerifyProductionOrderStatistics(ProductionOrderStatistics,ProductionOrderStatistics2);
    END;

    [Test]
    PROCEDURE SalesDimensionOnOrderPlanning@156();
    VAR
      TempSalesReceivablesSetup@1001 : TEMPORARY Record 311;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      DefaultDimension@1004 : Record 352;
      DimensionValue@1003 : Record 349;
      RequisitionLine@1005 : Record 246;
    BEGIN
      // Setup : Create Item with Dimension, Create Sales  Order.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      CreateDimensionWithValue(DimensionValue);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",DimensionValue."Dimension Code",DimensionValue.Code);
      CreateSalesOrder(SalesHeader,Item."No.",'',LibraryRandom.RandDec(10,2) + 10,LibraryRandom.RandDec(10,2));  // Random Value Required.

      // Exercise : Run  Calculate Order Planning.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Verify : Check That Dimension on Sales Order Item Line is same as Dimension on Item.
      FindRequisitionLine(RequisitionLine,SalesHeader."No.",Item."No.",'');
      VerifyDimensionSetEntry(DimensionValue."Dimension Code",DimensionValue.Code,RequisitionLine."Dimension Set ID");

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE MakeOrderCheckDimensionOnPurchOrder@155();
    VAR
      TempSalesReceivablesSetup@1001 : TEMPORARY Record 311;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      DefaultDimension@1004 : Record 352;
      DimensionValue@1003 : Record 349;
      RequisitionLine@1005 : Record 246;
      PurchaseLine@1007 : Record 39;
      PurchaseOrderNo@1006 : Code[20];
    BEGIN
      // Setup : Create Item with Dimension and Replenishment System Purchase, Create Sales  Order and Calculate Plan.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      CreateDimensionWithValue(DimensionValue);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",DimensionValue."Dimension Code",DimensionValue.Code);
      CreateSalesOrder(SalesHeader,Item."No.",'',LibraryRandom.RandDec(10,2) + 10,LibraryRandom.RandDec(10,2));  // Random Value Required.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);
      PurchaseOrderNo := FindPurchaseOrderNo;

      // Exercise : Make Order for Active Order.
      MakeSupplyOrdersActiveOrder(SalesHeader."No.");

      // Verify : Check That Dimension On Purchase Line Created From Make Order is same as dimension on Item.
      FindPurchaseLine(PurchaseLine,PurchaseOrderNo);
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.FINDFIRST;
      VerifyDimensionSetEntry(DimensionValue."Dimension Code",DimensionValue.Code,PurchaseLine."Dimension Set ID");

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE MakeOrderCheckDimensionOnProductionOrder@154();
    VAR
      TempSalesReceivablesSetup@1001 : TEMPORARY Record 311;
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      DefaultDimension@1004 : Record 352;
      DimensionValue@1003 : Record 349;
      RequisitionLine@1005 : Record 246;
      ChildItem@1008 : Record 27;
      ProductionOrder@1009 : Record 5405;
      ProductionOrderNo@1010 : Code[20];
    BEGIN
      // Setup : Create Item with Dimension and Replenishment System Production Order, Create Sales  Order and Calculate Plan.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateProdItem(Item,ChildItem);
      CreateDimensionWithValue(DimensionValue);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",DimensionValue."Dimension Code",DimensionValue.Code);
      CreateSalesOrder(SalesHeader,Item."No.",'',LibraryRandom.RandDec(10,2) + 10,LibraryRandom.RandDec(10,2));  // Random Value Required.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Exercise : Make Order for Active Order.
      MakeSupplyOrdersActiveOrder(SalesHeader."No.");

      // Verify : Check that Dimension On Production Order Created From Make Order is same as dimension on Item.
      ProductionOrderNo := FindProductionOrderNo(Item."No.");
      ProductionOrder.GET(ProductionOrder.Status::"Firm Planned",ProductionOrderNo);
      VerifyDimensionSetEntry(DimensionValue."Dimension Code",DimensionValue.Code,ProductionOrder."Dimension Set ID");

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE ReserveSalesPlanningNever@153();
    VAR
      Item@1002 : Record 27;
    BEGIN
      // Check that Reserve is False While we create item with Reserve Never for Sales Order.
      Initialize;
      ReserveSalesOrderPlanning(Item.Reserve::Never,TRUE);
    END;

    [Test]
    PROCEDURE ReserveSalesPlanningAlways@152();
    VAR
      Item@1002 : Record 27;
    BEGIN
      // Check that Reserve is TRUE While we create item with Reserve Always for Sales Order.
      Initialize;
      ReserveSalesOrderPlanning(Item.Reserve::Always,FALSE);
    END;

    LOCAL PROCEDURE ReserveSalesOrderPlanning@151(ReserveOnItem@1009 : Option;ReserveOnRequistition@1010 : Boolean);
    VAR
      TempSalesReceivablesSetup@1002 : TEMPORARY Record 311;
      RequisitionLine@1001 : Record 246;
      Item@1000 : Record 27;
      SalesHeader@1005 : Record 36;
    BEGIN
      // Setup: Create Item with Reserve and Create Sales Order.
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      UpdateItem(Item,ReserveOnItem,Item."Order Tracking Policy"::None);
      CreateSalesOrder(
        SalesHeader,Item."No.",LocationBlue.Code,LibraryRandom.RandDec(10,2) + 10,LibraryRandom.RandDec(10,2));  // Random Value Required.
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // Exercise.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Verify : Check that Reserve is TRUE OR False While we create child item Reserve Always and Never for Sales Order.
      FindRequisitionLine(RequisitionLine,SalesHeader."No.",Item."No.",LocationBlue.Code);
      ASSERTERROR RequisitionLine.VALIDATE(Reserve,ReserveOnRequistition);
      IF ReserveOnRequistition THEN
        Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ReserveError,FALSE)) > 0,ErrorText)
      ELSE
        Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ReserveError,TRUE)) > 0,ErrorText);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ReserveSalesOrderPlanAlwaysMakeOrder@150();
    VAR
      ChildItem@1002 : Record 27;
    BEGIN
      // Check That Reservation Entry Created after Make Supply Order for Sales Order when Child Item Reserve is Always.
      Initialize;
      ReserveSalesOrderPlanMakeOrder(ChildItem.Reserve::Always);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ReserveSalesOrderPlanNeverMakeOrder@148();
    VAR
      ChildItem@1002 : Record 27;
    BEGIN
      // Check That Reservation Entry not Created after Make Supply Order for Sales Order when Child Item Reserve is Never.
      Initialize;
      ReserveSalesOrderPlanMakeOrder(ChildItem.Reserve::Never);
    END;

    LOCAL PROCEDURE ReserveSalesOrderPlanMakeOrder@147(ReserveOnItem@1009 : Option);
    VAR
      TempSalesReceivablesSetup@1004 : TEMPORARY Record 311;
      ChildItem@1003 : Record 27;
      RequisitionLine@1002 : Record 246;
      Item@1001 : Record 27;
      SalesHeader@1000 : Record 36;
      ReservationEntry@1007 : Record 337;
      Quantity@1006 : Decimal;
    BEGIN
      // Setup : Create Item With Reservation Option and Create Sales Order.
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      UpdateItem(Item,ReserveOnItem,Item."Order Tracking Policy"::None);
      Quantity := LibraryRandom.RandDec(20,2);  // Random Value Required.
      CreateSalesOrder(SalesHeader,Item."No.",LocationBlue.Code,Quantity,Quantity);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      FindRequisitionLine(RequisitionLine,SalesHeader."No.",Item."No.",LocationBlue.Code);

      // Exercise : Run Make order from Order Planning.
      MakeSupplyOrdersActiveOrder(SalesHeader."No.");

      // Verify : Check That Reservation Entry Created after Make Supply Order.
      IF ReserveOnItem = ChildItem.Reserve::Always THEN BEGIN
        ReservationEntry.SETRANGE("Item No.",Item."No.");
        ReservationEntry.SETRANGE("Source Type",39);  // Value important as it signifies Purchase Line Table ID.
        ReservationEntry.FINDFIRST;
        Assert.AreEqual(
          Quantity,ReservationEntry.Quantity,
          STRSUBSTNO(ValidationError,ReservationEntry.FIELDCAPTION(Quantity),Quantity,ReservationEntry.TABLECAPTION));
      END ELSE BEGIN
        // Verify : Check That Reservation Entry Not Created after Make Supply Order.
        ReservationEntry.SETRANGE("Item No.",Item."No.");
        ASSERTERROR ReservationEntry.FINDFIRST;
      END;

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ReserveProdOrderPlanCopyToReqAlways@17();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
      ReqWkshTemplate@1002 : Record 244;
    BEGIN
      // Check that Reservation Entries created when creating Purchase REQ Requisition Lines from Production Order Planning
      // if Item.Reserve is Always and Item."Reordering Policy" is Order
      ReserveProdOrderPlanCopyToReq(Item.Reserve::Always,Item."Reordering Policy"::Order,
        RequisitionLine."Replenishment System"::Purchase,ReqWkshTemplate.Type::"Req.");
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ReserveProdOrderPlanCopyToReqNever@43();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
      ReqWkshTemplate@1002 : Record 244;
    BEGIN
      // Check that Reservation Entries NOT created when creating Purchase REQ Requisition Lines from Production Order Planning
      // if Item.Reserve is Never and Item."Reordering Policy" is Order
      ReserveProdOrderPlanCopyToReq(Item.Reserve::Never,Item."Reordering Policy"::Order,
        RequisitionLine."Replenishment System"::Purchase,ReqWkshTemplate.Type::"Req.");
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ReserveProdOrderPlanCopyToReqOptional1@44();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
      ReqWkshTemplate@1002 : Record 244;
    BEGIN
      // Check that Reservation Entries created when creating Prod. Order PLANNING Requisition Lines from Production Order Planning
      // if Item.Reserve is Optional, Reserve field in Order Planning requisition line is TRUE and Item."Reordering Policy" is Fixed Reorder Qty.
      ReserveProdOrderPlanCopyToReq(Item.Reserve::Optional,Item."Reordering Policy"::"Fixed Reorder Qty.",
        RequisitionLine."Replenishment System"::"Prod. Order",ReqWkshTemplate.Type::Planning);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ReserveProdOrderPlanCopyToReqOptional2@46();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
      ReqWkshTemplate@1002 : Record 244;
    BEGIN
      // Check that Reservation Entries created when creating Transfer REQ Requisition Lines from Production Order Planning
      // if Item.Reserve is Optional, Reserve field in Order Planning requisition line is TRUE and Item."Reordering Policy" is Maximum Qty.
      ReserveProdOrderPlanCopyToReq(Item.Reserve::Optional,Item."Reordering Policy"::"Maximum Qty.",
        RequisitionLine."Replenishment System"::Transfer,ReqWkshTemplate.Type::"Req.");
    END;

    LOCAL PROCEDURE ReserveProdOrderPlanCopyToReq@6(Reserve@1000 : Option;ReorderingPolicy@1003 : Option;ReplenishmentSystem@1001 : Option;ReqWkshTemplateType@1015 : Option);
    VAR
      Item@1004 : Record 27;
      ProdItem@1005 : Record 27;
      ProdBOMHeader@1006 : Record 99000771;
      ProdBOMLine@1013 : Record 99000772;
      ProdOrderComponent@1007 : Record 5407;
      RequisitionLine@1009 : Record 246;
      ProdOrder@1010 : Record 5405;
      ReservationEntry@1012 : Record 337;
      ReqWkshTemplateName@1002 : Code[10];
      ReqWkshName@1014 : Code[10];
      Qty@1011 : Decimal;
      QtyPer@1008 : Decimal;
    BEGIN
      // Setup : Create Production Order and Calculate Plan
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      UpdateItemEx(Item,Reserve,ReorderingPolicy);

      QtyPer := LibraryRandom.RandIntInRange(10,20);
      CreateItemWithProductionBOM(ProdItem,Item,'',QtyPer);
      Qty := LibraryRandom.RandIntInRange(10,20);
      CreateAndRefreshProdOrder(ProdOrder,ProdOrder.Status::Released,ProdItem."No.",'',Qty);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrder."No.");
      ProdOrderComponent.SETRANGE("Item No.",Item."No.");
      ProdOrderComponent.FINDFIRST;
      ProdOrderComponent.VALIDATE("Location Code",LocationBlue.Code);
      ProdOrderComponent.MODIFY(TRUE);
      ProdOrder.GET(ProdOrder.Status::Released,ProdOrder."No.");
      LibraryPlanning.CalculateOrderPlanProduction(RequisitionLine);
      FindRequisitionLine(RequisitionLine,ProdOrder."No.",Item."No.",LocationBlue.Code);
      IF ReplenishmentSystem <> Item."Replenishment System"::Purchase THEN
        ModifyRequisitionLine(RequisitionLine,Item.Reserve,ReplenishmentSystem);

      ReqWkshTemplateName := GetReqWkshTemplateName(ReqWkshTemplateType);
      ReqWkshName := GetReqWkshName(ReqWkshTemplateName,ReqWkshTemplateType);

      // Exercise : Run Make order from Order Planning.
      MakeSupplyOrdersCopyToWkshActiveOrder(ProdOrder."No.",ReqWkshTemplateName,ReqWkshName);

      // Verify : Check That Reservation Entry Created after Make Supply Order.
      // 246 indicates reserved from requisition line
      VerifyReservationEntry(RequisitionLine,Item."No.",ReqWkshTemplateName,ReqWkshName,246,Qty * QtyPer);
      VerifyRequisitionLine(Item."No.",ReqWkshTemplateName,ReqWkshName);

      // Tear Down
      ReservationEntry.SETRANGE("Item No.",Item."No.");
      IF ReservationEntry.FINDSET THEN
        REPEAT
          ReservationEntry.DELETE;
        UNTIL  ReservationEntry.NEXT = 0;
      ProdOrder.DELETE;
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrder."No.");
      ProdOrderComponent.FINDFIRST;
      ProdOrderComponent.DELETE;
      ProdBOMLine.SETRANGE("Production BOM No.",ProdItem."Production BOM No.");
      ProdBOMLine.FINDFIRST;
      ProdBOMLine.DELETE;

      ProdBOMHeader.SETRANGE("No.",ProdItem."Production BOM No.");
      ProdBOMHeader.FINDFIRST;
      ProdBOMHeader.DELETE;
      ProdItem.DELETE;
      Item.DELETE;
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ReserveSalesOrderPlanCopyToReqAlways@52();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
      ReqWkshTemplate@1002 : Record 244;
    BEGIN
      // Check that Reservation Entries created when creating Purchase REQ Requisition Lines from Sales Order Planning
      // if Item.Reserve is Always and Item."Reordering Policy" is Order
      ReserveSalesOrderPlanCopyToReq(Item.Reserve::Always,Item."Reordering Policy"::Order,
        RequisitionLine."Replenishment System"::Purchase,ReqWkshTemplate.Type::"Req.");
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ReserveSalesOrderPlanCopyToReqNever@53();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
      ReqWkshTemplate@1002 : Record 244;
    BEGIN
      // Check that Reservation Entries NOT created when creating Purchase REQ Requisition Lines from Sales Order Planning
      // if Item.Reserve is Never and Item."Reordering Policy" is Order
      ReserveSalesOrderPlanCopyToReq(Item.Reserve::Never,Item."Reordering Policy"::Order,
        RequisitionLine."Replenishment System"::Purchase,ReqWkshTemplate.Type::"Req.");
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ReserveSalesOrderPlanCopyToReqOptional1@54();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
      ReqWkshTemplate@1002 : Record 244;
    BEGIN
      // Check that Reservation Entries created when creating Prod. Order PLANNING Requisition Lines from Sales Order Planning
      // if Item.Reserve is Optional, Reserve field in Order Planning requisition line is TRUE and Item."Reordering Policy" is Fixed Reorder Qty.
      ReserveSalesOrderPlanCopyToReq(Item.Reserve::Optional,Item."Reordering Policy"::"Fixed Reorder Qty.",
        RequisitionLine."Replenishment System"::"Prod. Order",ReqWkshTemplate.Type::Planning);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE ReserveSalesOrderPlanCopyToReqOptional2@56();
    VAR
      Item@1000 : Record 27;
      RequisitionLine@1001 : Record 246;
      ReqWkshTemplate@1002 : Record 244;
    BEGIN
      // Check that Reservation Entries created when creating Transfer REQ Requisition Lines from Sales Order Planning
      // if Item.Reserve is Optional, Reserve field in Order Planning requisition line is TRUE and Item."Reordering Policy" is Lot-for-Lot.
      ReserveSalesOrderPlanCopyToReq(Item.Reserve::Optional,Item."Reordering Policy"::"Lot-for-Lot",
        RequisitionLine."Replenishment System"::Transfer,ReqWkshTemplate.Type::"Req.");
    END;

    LOCAL PROCEDURE ReserveSalesOrderPlanCopyToReq@12(Reserve@1000 : Option;ReorderingPolicy@1003 : Option;ReplenishmentSystem@1001 : Option;ReqWkshTemplateType@1002 : Option);
    VAR
      Item@1004 : Record 27;
      RequisitionLine@1009 : Record 246;
      ReservationEntry@1012 : Record 337;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      TempSalesReceivablesSetup@1005 : TEMPORARY Record 311;
      ReqWkshTemplateName@1013 : Code[10];
      ReqWkshName@1008 : Code[10];
      Quantity@1011 : Decimal;
    BEGIN
      // Setup : Create Sales Order and Calculate Plan
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      UpdateItemEx(Item,Reserve,ReorderingPolicy);
      Quantity := LibraryRandom.RandIntInRange(10,20);
      CreateSalesOrder(SalesHeader,Item."No.",LocationBlue.Code,Quantity,Quantity);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);
      FindRequisitionLine(RequisitionLine,SalesHeader."No.",Item."No.",LocationBlue.Code);
      IF ReplenishmentSystem <> Item."Replenishment System"::Purchase THEN
        ModifyRequisitionLine(RequisitionLine,Item.Reserve,ReplenishmentSystem);

      ReqWkshTemplateName := GetReqWkshTemplateName(ReqWkshTemplateType);
      ReqWkshName := GetReqWkshName(ReqWkshTemplateName,ReqWkshTemplateType);

      // Exercise : Run Make order from Order Planning.
      MakeSupplyOrdersCopyToWkshActiveOrder(SalesHeader."No.",ReqWkshTemplateName,ReqWkshName);

      // Verify : Check That Reservation Entry Created after Make Supply Order.
      // 246 indicates reserved from requisition line
      VerifyReservationEntry(RequisitionLine,Item."No.",ReqWkshTemplateName,ReqWkshName,246,Quantity);
      VerifyRequisitionLine(Item."No.",ReqWkshTemplateName,ReqWkshName);

      // Tear Down
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
      ReservationEntry.SETRANGE("Item No.",Item."No.");
      IF ReservationEntry.FINDSET THEN
        REPEAT
          ReservationEntry.DELETE;
        UNTIL  ReservationEntry.NEXT = 0;
      SalesHeader.DELETE;
      SalesLine.SETRANGE("No.",Item."No.");
      SalesLine.FINDFIRST;
      SalesLine.DELETE;
      Item.DELETE;
    END;

    LOCAL PROCEDURE VerifyReservationEntry@15(RequisitionLine@1000 : Record 246;ItemNo@1004 : Code[20];SourceID@1001 : Code[10];SourceBatchName@1006 : Code[10];SourceType@1002 : Integer;Qty@1003 : Decimal);
    VAR
      ReservationEntry@1005 : Record 337;
    BEGIN
      IF RequisitionLine.Reserve THEN BEGIN
        ReservationEntry.SETRANGE("Item No.",ItemNo);
        ReservationEntry.SETRANGE("Source ID",SourceID);
        ReservationEntry.SETRANGE("Source Type",SourceType);
        ReservationEntry.SETRANGE("Source Batch Name",SourceBatchName);
        ReservationEntry.FINDFIRST;

        Assert.AreEqual(
          Qty,ReservationEntry.Quantity,
          STRSUBSTNO(ValidationError,ReservationEntry.FIELDCAPTION(Quantity),Qty,ReservationEntry.TABLECAPTION));
      END ELSE BEGIN
        // Verify : Check That Reservation Entry Not Created after Make Supply Order.
        ReservationEntry.SETRANGE("Item No.",ItemNo);
        ASSERTERROR ReservationEntry.FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE VerifyRequisitionLine@16(ItemNo@1000 : Code[20];WkshTemplateName@1002 : Code[10];JournalBatchName@1003 : Code[10]);
    VAR
      RequisitionLine@1001 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Worksheet Template Name",WkshTemplateName);
      RequisitionLine.SETRANGE("Journal Batch Name",JournalBatchName);
      RequisitionLine.SETRANGE("No.",ItemNo);
      Assert.IsTrue(RequisitionLine.FINDFIRST,STRSUBSTNO(LineExistErr,WkshTemplateName,ItemNo));
    END;

    LOCAL PROCEDURE ModifyRequisitionLine@25(VAR RequisitionLine@1000 : Record 246;Reserve@1004 : Option;ReplenishmentSystem@1006 : Option);
    VAR
      Item@1005 : Record 27;
    BEGIN
      IF Reserve = Item.Reserve::Optional THEN
        RequisitionLine.Reserve := TRUE;
      RequisitionLine.VALIDATE("Replenishment System",ReplenishmentSystem);
      IF ReplenishmentSystem = RequisitionLine."Replenishment System"::Transfer THEN
        RequisitionLine.VALIDATE("Supply From",LocationRed.Code);
      RequisitionLine.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE ChangeReplenishmentToPurchAndCheckComponent@182();
    VAR
      Item@1001 : Record 27;
    BEGIN
      // Check That Planning Component and Planning Routing Line created after change replenishment to Production Order.
      Initialize;
      ChangeReplenishmentAndCheckComponent(Item."Replenishment System"::"Prod. Order");
    END;

    [Test]
    PROCEDURE ChangeReplenishmentToProdAndCheckComponent@181();
    VAR
      Item@1001 : Record 27;
    BEGIN
      // Check That Planning Component and Planning Routing Line Delete after change replenishment to Purchase Order.
      Initialize;
      ChangeReplenishmentAndCheckComponent(Item."Replenishment System"::Purchase);
    END;

    LOCAL PROCEDURE ChangeReplenishmentAndCheckComponent@180(ReplenishmentSystem@1008 : Option);
    VAR
      TempSalesReceivablesSetup@1000 : TEMPORARY Record 311;
      Item@1001 : Record 27;
      ChildItem@1002 : Record 27;
      SalesHeader@1003 : Record 36;
      RequisitionLine@1005 : Record 246;
      PlanningComponent@1006 : Record 99000829;
      PlanningRoutingLine@1007 : Record 99000830;
      ItemVendor@1010 : Record 99;
      Quantity@1004 : Decimal;
    BEGIN
      // Setup : Create Item With Reservation Option and Create Sales Order.
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateManufacturingSetup(Item,ChildItem,TRUE,ChildItem."Order Tracking Policy"::None);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.MODIFY(TRUE);

      Quantity := LibraryRandom.RandDec(10,2);  // Random Value Required.

      LibraryInventory.CreateItemVendor(ItemVendor,LibraryPurchase.CreateVendorNo,Item."No.");

      CreateSalesOrder(SalesHeader,Item."No.",LocationBlue.Code,Quantity,Quantity);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);
      FindRequisitionLine(RequisitionLine,SalesHeader."No.",Item."No.",LocationBlue.Code);

      IF ReplenishmentSystem = Item."Replenishment System"::Purchase THEN BEGIN
        ChangeReplenishmentSystem(
          RequisitionLine,ReplenishmentSystem,Item."Replenishment System"::"Prod. Order",SalesHeader."No.",ItemVendor."Vendor No.");

        // Verify : Check That Planning Component and Planning Routing Line created after change replenishment to Production Order.
        FindPlanningComponent(PlanningComponent,RequisitionLine);
        FindPlanningRoutingLine(PlanningRoutingLine,RequisitionLine);
      END ELSE BEGIN
        ChangeReplenishmentSystem(
          RequisitionLine,ReplenishmentSystem,Item."Replenishment System"::Purchase,SalesHeader."No.",ItemVendor."Vendor No.");

        // Verify : Check That Planning Component and Planning Routing Line Delete after change replenishment to Purchase Order.
        FindPlanningRoutingLine(PlanningRoutingLine,RequisitionLine);
        Assert.AreEqual(0,PlanningRoutingLine.COUNT,STRSUBSTNO(LineCountError,0));
        FindPlanningComponent(PlanningComponent,RequisitionLine);
        Assert.AreEqual(0,PlanningComponent.COUNT,STRSUBSTNO(LineCountError,0));
      END;

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE PlanningSalesOrderWithItemVariant@177();
    VAR
      TempSalesReceivablesSetup@1009 : TEMPORARY Record 311;
      Item@1008 : Record 27;
      SalesHeader@1006 : Record 36;
      SalesLine@1011 : Record 37;
      RequisitionLine@1005 : Record 246;
      ItemVariant@1010 : Record 5401;
    BEGIN
      // Setup : Create Item, Item Variant, Sale Order And Calculate Plan.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      CreateSalesOrder(
        SalesHeader,Item."No.",LocationBlue.Code,LibraryRandom.RandDec(10,2) + 10,LibraryRandom.RandDec(10,2));  // Random Value Required.
      ChangeDataOnSalesLine(SalesHeader,Item."No.",SalesLine.FIELDNO("Variant Code"),ItemVariant.Code);

      // Exercise : Calculate Plan.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Verify : Check That Item Variant code on Order Planning Line is same as on Sales Line.
      FindRequisitionLine(RequisitionLine,SalesHeader."No.",Item."No.",LocationBlue.Code);
      RequisitionLine.TESTFIELD("Variant Code",ItemVariant.Code);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE MakeOrderPurchaseItemWithVariant@176();
    VAR
      Item@1011 : Record 27;
    BEGIN
      // Check That Purchase Line Created form Make Order have same Variant Cade as on Sales Line.
      Initialize;
      MakeOrderWithItemVariant(Item."Replenishment System"::Purchase);
    END;

    [Test]
    [HandlerFunctions(MakeSupplyOrdersPageHandler)]
    PROCEDURE MakeOrderProductionItemWithVariant@175();
    VAR
      Item@1010 : Record 27;
    BEGIN
      // Check That Production Order Line Created form Make Order have same Variant Cade as on Sales Line.
      Initialize;
      MakeOrderWithItemVariant(Item."Replenishment System"::"Prod. Order");
    END;

    LOCAL PROCEDURE MakeOrderWithItemVariant@174(ReplenishmentSystem@1000 : Option);
    VAR
      TempSalesReceivablesSetup@1014 : TEMPORARY Record 311;
      Item@1013 : Record 27;
      SalesHeader@1011 : Record 36;
      SalesLine@1010 : Record 37;
      RequisitionLine@1009 : Record 246;
      ItemVariant@1005 : Record 5401;
      ProdOrderLine@1001 : Record 5406;
      PurchaseLine@1015 : Record 39;
    BEGIN
      // Setup : Create Item, Item Variant, Sale Order And Calculate Plan.
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      CreateItem(Item,ReplenishmentSystem,'','');
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      CreateSalesOrder(SalesHeader,Item."No.",'',LibraryRandom.RandDec(10,2) + 10,LibraryRandom.RandDec(10,2));  // Random Value Required.
      ChangeDataOnSalesLine(SalesHeader,Item."No.",SalesLine.FIELDNO("Variant Code"),ItemVariant.Code);
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Exercise : Make Order for Active Order.
      MakeSupplyOrdersActiveOrder(SalesHeader."No.");

      IF ReplenishmentSystem = Item."Replenishment System"::Purchase THEN BEGIN
        // Verify : Check That Purchase Line Created form Make Order have same Variant Cade as on Sales Line.
        PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
        PurchaseLine.SETRANGE("No.",Item."No.");
        PurchaseLine.FINDFIRST;
        PurchaseLine.TESTFIELD("Variant Code",ItemVariant.Code);
      END ELSE BEGIN
        // Verify : Check That Production Order Line Created form Make Order have same Variant Cade as on Sales Line.
        ProdOrderLine.SETRANGE("Item No.",Item."No.");
        ProdOrderLine.FINDFIRST;
        ProdOrderLine.TESTFIELD("Variant Code",ItemVariant.Code);
      END;

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE ChangeQuantityAndCalculatePlan@169();
    VAR
      TempSalesReceivablesSetup@1007 : TEMPORARY Record 311;
      Item@1006 : Record 27;
      SalesHeader@1005 : Record 36;
      RequisitionLine@1003 : Record 246;
      OrderPlanning@1001 : TestPage 5522;
      OrderPlanning2@1000 : TestPage 5522;
      Quantity@1008 : Decimal;
    BEGIN
      // Setup : Create Item ,Sale order and Calculate Plan and Open Order Planning Page ,Change Quantity To Order close Order Planning Page and Calculate Plan.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup);
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::Purchase,'','');
      CreateSalesOrder(SalesHeader,Item."No.",LocationBlue2.Code,Quantity,Quantity);
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);
      ChangeQuantityOnPlanning(OrderPlanning,SalesHeader."No.",Item."No.",Quantity + LibraryRandom.RandDec(10,2));  // Random Value Required.
      LibraryPlanning.CalculateOrderPlanSales(RequisitionLine);

      // Exercise : Open Order Planning Page.
      OpenOrderPlanningPage(OrderPlanning2,SalesHeader."No.",Item."No.");

      // Verify : Check the value of Quantity To Order is Change to Previous State after calculate Plan.
      OrderPlanning2.Quantity.ASSERTEQUALS(Quantity);

      // Tear Down.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    LOCAL PROCEDURE Initialize@18();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      ClearGlobals;

      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      CreateLocationSetup;
      NoSeriesSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ClearGlobals@159();
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      CLEAR(VerifyOnGlobal);
      CLEAR(DemandTypeGlobal);
      CLEAR(GlobalChildItemNo);
      CLEAR(ExpectedQuantity);
      RequisitionLine.RESET;
      RequisitionLine.DELETEALL;
      ClearManufacturingUserTemplate;
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      PurchasesPayablesSetup@1005 : Record 312;
      SalesReceivablesSetup@1004 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeReplenishmentSystem@74(VAR RequisitionLine@1004 : Record 246;OldReplenishmentSystem@1005 : Option;NewReplenishmentSystem@1002 : Option;DemandOrderNo@1000 : Code[20];VendorNo@1003 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("Replenishment System",OldReplenishmentSystem);
      RequisitionLine.FINDFIRST;
      RequisitionLine.VALIDATE("Replenishment System",NewReplenishmentSystem);
      RequisitionLine.VALIDATE("Vendor No.",VendorNo);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateManufacturingSetup@127(VAR Item@1000 : Record 27;VAR ChildItem@1008 : Record 27;ChildWithBOM@1005 : Boolean;OrderTrackingPolicy@1002 : Option);
    VAR
      ChildItem2@1007 : Record 27;
    BEGIN
      // Create Child Item with its own Production BOM hierarchy.
      IF ChildWithBOM THEN
        CreateProdItem(ChildItem,ChildItem2)
      ELSE
        CreateItem(ChildItem,ChildItem."Replenishment System"::Purchase,'','');
      UpdateItem(ChildItem,ChildItem.Reserve::Optional,OrderTrackingPolicy);
      CreateItemWithProductionBOM(Item,ChildItem,'',LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE CreateProdItem@5(VAR ParentItem@1001 : Record 27;VAR ChildItem@1008 : Record 27);
    BEGIN
      // Create Child Item.
      CreateItem(ChildItem,ChildItem."Replenishment System"::Purchase,'','');

      // Create Parent Item.
      CreateItemWithProductionBOM(ParentItem,ChildItem,'',LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE CreateItemWithProductionBOM@237(VAR Item@1002 : Record 27;ChildItem@1003 : Record 27;VariantCode@1004 : Code[10];QuantityPer@1005 : Decimal);
    VAR
      RoutingHeader@1001 : Record 99000763;
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      // Create Production BOM and Routing.
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ChildItem,VariantCode,QuantityPer);
      CreateRoutingSetup(RoutingHeader);

      // Create Parent Item.
      CreateItem(Item,Item."Replenishment System"::"Prod. Order",RoutingHeader."No.",ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateItem@4(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option;RoutingHeaderNo@1006 : Code[20];ProductionBOMNo@1007 : Code[20]);
    VAR
      GeneralLedgerSetup@1005 : Record 98;
    BEGIN
      LibraryInventory.CreateItem(Item);
      GeneralLedgerSetup.GET;
      Item.VALIDATE("Costing Method",Item."Costing Method"::Standard);
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(20,2));
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Rounding Precision",GeneralLedgerSetup."Amount Rounding Precision");
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.VALIDATE("Routing No.",RoutingHeaderNo);
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItem@236(VAR Item@1000 : Record 27;Reserve@1001 : Option;OrderTrackingPolicy@1002 : Option);
    BEGIN
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.VALIDATE(Reserve,Reserve);
      Item.VALIDATE("Order Tracking Policy",OrderTrackingPolicy);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemEx@2(VAR Item@1000 : Record 27;Reserve@1001 : Option;ReorderingPolicy@1002 : Option);
    VAR
      Qty@1003 : Integer;
    BEGIN
      Item.VALIDATE("Reordering Policy",ReorderingPolicy);
      Item.VALIDATE(Reserve,Reserve);
      Qty := LibraryRandom.RandIntInRange(10,20);
      IF ReorderingPolicy = Item."Reordering Policy"::"Fixed Reorder Qty." THEN
        Item.VALIDATE("Reorder Quantity",Qty)
      ELSE
        IF ReorderingPolicy = Item."Reordering Policy"::"Maximum Qty." THEN
          Item.VALIDATE("Maximum Inventory",Qty);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@202(VAR ProductionBOMHeader@1002 : Record 99000771;Item@1001 : Record 27;VariantCode@1000 : Code[10];QuantityPer@1005 : Decimal);
    VAR
      ProductionBOMLine@1003 : Record 99000772;
    BEGIN
      // Create component lines in the BOM
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item."No.",QuantityPer);
      ProductionBOMLine.VALIDATE("Variant Code",VariantCode);
      ProductionBOMLine.MODIFY(TRUE);

      // Certify BOM.
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::"Under Development");
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingSetup@173(VAR RoutingHeader@1001 : Record 99000763);
    VAR
      WorkCenter@1000 : Record 99000754;
      MachineCenter@1004 : Record 99000758;
      RoutingLine@1006 : Record 99000764;
    BEGIN
      CreateWorkCenter(WorkCenter);
      CreateMachineCenter(MachineCenter,WorkCenter."No.");
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");
      RoutingLine.Type := RoutingLine.Type::"Machine Center";
      CreateRoutingLine(RoutingLine,RoutingHeader,MachineCenter."No.");
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWorkCenter@141(VAR WorkCenter@1004 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenterFullWorkingWeek(WorkCenter,080000T,160000T);
      LibraryManufacturing.CalculateWorkCenterCalendar(WorkCenter,CALCDATE('<-1M>',WORKDATE),CALCDATE('<1M>',WORKDATE));
      WorkCenter.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMachineCenter@172(VAR MachineCenter@1002 : Record 99000758;WorkCenterNo@1000 : Code[20]);
    BEGIN
      // Random value important for test.
      LibraryManufacturing.CreateMachineCenterWithCalendar(MachineCenter,WorkCenterNo,LibraryRandom.RandDec(105,1));
      MachineCenter.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));
      MachineCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingLine@73(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random used such that the Next Operation No is greater than the Previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));

      // Random values not important for test.
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,CenterNo,OperationNo,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE ClearManufacturingUserTemplate@65();
    VAR
      ManufacturingUserTemplate@1000 : Record 5525;
    BEGIN
      ManufacturingUserTemplate.SETRANGE("User ID",USERID);
      IF ManufacturingUserTemplate.FINDFIRST THEN
        ManufacturingUserTemplate.DELETE(TRUE);
    END;

    LOCAL PROCEDURE CreateAndRefreshProdOrder@55(VAR ProductionOrder@1000 : Record 5405;Status@1004 : Option;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1005 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateLocationSetup@61();
    BEGIN
      CreateLocation(LocationRed);
      CreateLocation(LocationBlue);
      CreateLocation(LocationBlue2);
    END;

    LOCAL PROCEDURE CreateSalesLine@1(SalesHeader@1000 : Record 36;ItemNo@1005 : Code[20];LocationCode@1001 : Code[10];ShipmentDate@1007 : Date;Quantity@1002 : Decimal;QuantityToShip@1006 : Decimal);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Qty. to Ship",QuantityToShip);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@13(VAR SalesHeader@1001 : Record 36;ItemNo@1004 : Code[20];LocationCode@1006 : Code[10];Quantity@1003 : Decimal;QtyToShip@1002 : Decimal);
    BEGIN
      // Random values used are not important for test.
      CLEAR(SalesHeader);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.MODIFY(TRUE);
      CreateSalesLine(SalesHeader,ItemNo,LocationCode,WORKDATE,Quantity,QtyToShip);
    END;

    LOCAL PROCEDURE CreateLocation@34(VAR Location@1000 : Record 14);
    BEGIN
      CLEAR(Location);
      LibraryWarehouse.CreateLocation(Location);
    END;

    LOCAL PROCEDURE CreateDimensionWithValue@235(VAR DimensionValue@1000 : Record 349);
    VAR
      Dimension@1001 : Record 348;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
    END;

    LOCAL PROCEDURE ChangeDataOnSalesLine@92(SalesHeader@1000 : Record 36;ItemNo@1004 : Code[20];FieldNo@1001 : Integer;Value@1002 : Variant);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.ReopenSalesDocument(SalesHeader);
      FindSalesLine(SalesLine,SalesHeader,ItemNo);
      UpdateSalesLine(SalesLine,FieldNo,Value);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE ChangeDataOnProductionOrderAndRefresh@133(ProductionOrder@1000 : Record 5405;FieldNo@1001 : Integer;Value@1002 : Variant);
    BEGIN
      ProductionOrder.GET(ProductionOrder.Status,ProductionOrder."No.");
      UpdateProductionOrder(ProductionOrder,FieldNo,Value);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE UpdateProductionOrder@132(VAR ProductionOrder@1000 : Record 5405;FieldNo@1001 : Integer;Value@1004 : Variant);
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      RecRef.GETTABLE(ProductionOrder);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
      RecRef.SETTABLE(ProductionOrder);
      ProductionOrder.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeQuantityOnPlanning@185(VAR OrderPlanning@1000 : TestPage 5522;OrderNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      OpenOrderPlanningPage(OrderPlanning,OrderNo,ItemNo);
      OrderPlanning.Quantity.SETVALUE(Quantity);
      OrderPlanning.CLOSE;
    END;

    LOCAL PROCEDURE FindLastOperationNo@171(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
      EXIT('');
    END;

    LOCAL PROCEDURE FindSalesLine@42(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;No@1002 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("No.",No);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRequisitionLine@24(VAR RequisitionLine@1000 : Record 246;DemandOrderNo@1002 : Code[20];No@1001 : Code[20];LocationCode@1003 : Code[10]);
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.SETRANGE("Location Code",LocationCode);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseOrderNo@35() : Code[20];
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
      NoSeriesManagement@1001 : Codeunit 396;
    BEGIN
      PurchasesPayablesSetup.GET;
      EXIT(NoSeriesManagement.GetNextNo(PurchasesPayablesSetup."Order Nos.",WORKDATE,FALSE));
    END;

    LOCAL PROCEDURE FindProductionOrderNo@167(ItemNo@1001 : Code[20]) : Code[20];
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::"Firm Planned");
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.FINDFIRST;
      EXIT(ProdOrderLine."Prod. Order No.");
    END;

    LOCAL PROCEDURE FindPurchaseLine@109(VAR PurchaseLine@1001 : Record 39;DocumentNo@1000 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDSET;
    END;

    LOCAL PROCEDURE FindProdOrderComponent@116(VAR ProdOrderComponent@1000 : Record 5407;ProdOrderNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPlanningComponent@179(VAR PlanningComponent@1001 : Record 99000829;RequisitionLine@1002 : Record 246);
    BEGIN
      PlanningComponent.SETRANGE("Worksheet Template Name",RequisitionLine."Worksheet Template Name");
      PlanningComponent.SETRANGE("Worksheet Batch Name",RequisitionLine."Journal Batch Name");
      PlanningComponent.SETRANGE("Worksheet Line No.",RequisitionLine."Line No.");
    END;

    LOCAL PROCEDURE FindPlanningRoutingLine@178(VAR PlanningRoutingLine@1001 : Record 99000830;RequisitionLine@1000 : Record 246);
    BEGIN
      PlanningRoutingLine.SETRANGE("Worksheet Template Name",RequisitionLine."Worksheet Template Name");
      PlanningRoutingLine.SETRANGE("Worksheet Batch Name",RequisitionLine."Journal Batch Name");
      PlanningRoutingLine.SETRANGE("Worksheet Line No.",RequisitionLine."Line No.");
    END;

    LOCAL PROCEDURE GetManufacturingUserTemplate@3(VAR ManufacturingUserTemplate@1000 : Record 5525;MakeOrder@1001 : Option;CreateProductionOrder@1002 : Option);
    BEGIN
      IF NOT ManufacturingUserTemplate.GET(USERID) THEN
        LibraryPlanning.CreateManufUserTemplate(
          ManufacturingUserTemplate,USERID,MakeOrder,ManufacturingUserTemplate."Create Purchase Order"::"Make Purch. Orders",
          CreateProductionOrder,ManufacturingUserTemplate."Create Transfer Order"::"Make Trans. Orders");
    END;

    LOCAL PROCEDURE GetReqWkshTemplateName@14(TemplateType@1001 : Option) : Code[10];
    VAR
      ReqWkshTemplate@1002 : Record 244;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,TemplateType);
      ReqWkshTemplate.FINDFIRST;
      EXIT(ReqWkshTemplate.Name);
    END;

    LOCAL PROCEDURE GetReqWkshName@20(TemplateName@1000 : Code[10];TemplateType@1001 : Option) : Code[10];
    VAR
      ReqWkshName@1002 : Record 245;
    BEGIN
      ReqWkshName.SETRANGE("Worksheet Template Name",TemplateName);
      ReqWkshName.SETRANGE("Template Type",TemplateType);
      ReqWkshName.FINDFIRST;
      EXIT(ReqWkshName.Name);
    END;

    LOCAL PROCEDURE MakeSupplyOrdersActiveOrder@29(DemandOrderNo@1000 : Code[20]);
    VAR
      ManufacturingUserTemplate@1002 : Record 5525;
      RequisitionLine@1003 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.FINDFIRST;
      MakeSupplyOrders(
        RequisitionLine,ManufacturingUserTemplate."Make Orders"::"The Active Order",
        ManufacturingUserTemplate."Create Production Order"::"Firm Planned");
    END;

    LOCAL PROCEDURE MakeSupplyOrdersCopyToWkshActiveOrder@9(DemandOrderNo@1000 : Code[20];WkshTemplateName@1004 : Code[10];WkshName@1001 : Code[10]);
    VAR
      ManufacturingUserTemplate@1002 : Record 5525;
      RequisitionLine@1003 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Demand Order No.",DemandOrderNo);
      RequisitionLine.FINDFIRST;
      MakeSupplyOrdersCopyToWksh(
        RequisitionLine,ManufacturingUserTemplate."Make Orders"::"The Active Order",WkshTemplateName,WkshName);
    END;

    LOCAL PROCEDURE MakeSupplyOrders@79(VAR RequisitionLine@1000 : Record 246;MakeOrders@1001 : Option;CreateProductionOrder@1002 : Option);
    VAR
      ManufacturingUserTemplate@1003 : Record 5525;
    BEGIN
      GetManufacturingUserTemplate(ManufacturingUserTemplate,MakeOrders,CreateProductionOrder);
      LibraryPlanning.MakeSupplyOrders(ManufacturingUserTemplate,RequisitionLine);
    END;

    LOCAL PROCEDURE MakeSupplyOrdersCopyToWksh@8(VAR RequisitionLine@1000 : Record 246;MakeOrders@1001 : Option;WkshTemplateName@1002 : Code[10];WkshName@1004 : Code[10]);
    VAR
      ManufacturingUserTemplate@1003 : Record 5525;
    BEGIN
      // Set create order option to "Copy to Req. Wksh" for purchase, production, transfer orders
      GetManufacturingUserTemplate(ManufacturingUserTemplate,MakeOrders,
        ManufacturingUserTemplate."Create Production Order"::"Copy to Req. Wksh");
      ManufacturingUserTemplate.VALIDATE("Create Purchase Order",
        ManufacturingUserTemplate."Create Purchase Order"::"Copy to Req. Wksh");
      ManufacturingUserTemplate.VALIDATE("Purchase Req. Wksh. Template",WkshTemplateName);
      ManufacturingUserTemplate.VALIDATE("Purchase Wksh. Name",WkshName);

      ManufacturingUserTemplate.VALIDATE("Prod. Req. Wksh. Template",WkshTemplateName);
      ManufacturingUserTemplate.VALIDATE("Prod. Wksh. Name",WkshName);

      ManufacturingUserTemplate.VALIDATE("Create Transfer Order",
        ManufacturingUserTemplate."Create Transfer Order"::"Copy to Req. Wksh");
      ManufacturingUserTemplate.VALIDATE("Transfer Req. Wksh. Template",WkshTemplateName);
      ManufacturingUserTemplate.VALIDATE("Transfer Wksh. Name",WkshName);

      ManufacturingUserTemplate.MODIFY(TRUE);
      LibraryPlanning.MakeSupplyOrders(ManufacturingUserTemplate,RequisitionLine);
    END;

    LOCAL PROCEDURE OpenOrderPlanningPage@105(VAR OrderPlanning@1000 : TestPage 5522;DemandOrderNo@1001 : Code[20];No@1002 : Code[20]);
    BEGIN
      OrderPlanning.OPENEDIT;
      OrderPlanning.FILTER.SETFILTER("Demand Order No.",DemandOrderNo);
      OrderPlanning.EXPAND(TRUE);
      OrderPlanning.FILTER.SETFILTER("No.",No);
    END;

    LOCAL PROCEDURE UpdateSalesLine@115(VAR SalesLine@1000 : Record 37;FieldNo@1001 : Integer;Value@1004 : Variant);
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      RecRef.GETTABLE(SalesLine);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
      RecRef.SETTABLE(SalesLine);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@26(VAR SalesReceivablesSetup2@1001 : Record 311);
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup2 := SalesReceivablesSetup;
      SalesReceivablesSetup2.INSERT;

      SalesReceivablesSetup.VALIDATE("Credit Warnings",SalesReceivablesSetup."Credit Warnings"::"No Warning");
      SalesReceivablesSetup.VALIDATE("Stockout Warning",FALSE);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePlanningComponent@164(VAR PlanningComponent@1003 : Record 99000829;ItemNo@1002 : Code[20];UnitOfMeasureCode@1001 : Code[10];QuantityPer@1000 : Decimal);
    BEGIN
      PlanningComponent.VALIDATE("Item No.",ItemNo);
      PlanningComponent.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      PlanningComponent.VALIDATE("Quantity per",QuantityPer);
      PlanningComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePlanningRoutingLine@161(VAR PlanningRoutingLine@1000 : Record 99000830;WorkCenterNo@1004 : Code[20];PerviousOperationNo@1003 : Code[30];SetupTime@1002 : Decimal;Runtime@1001 : Decimal);
    BEGIN
      PlanningRoutingLine.VALIDATE("Previous Operation No.",PerviousOperationNo);
      PlanningRoutingLine.VALIDATE(Type,PlanningRoutingLine.Type::"Work Center");
      PlanningRoutingLine.VALIDATE("No.",WorkCenterNo);
      PlanningRoutingLine.VALIDATE("Setup Time",SetupTime);
      PlanningRoutingLine.VALIDATE("Run Time",Runtime);
      PlanningRoutingLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OpenFirmPlannedProductionOrder@157(VAR FirmPlannedProdOrders@1000 : TestPage 9325;VAR ProductionOrderStatistics@1004 : TestPage 99000816;SourceNo@1001 : Code[20];No@1002 : Code[20]);
    BEGIN
      FirmPlannedProdOrders.OPENEDIT;
      FirmPlannedProdOrders.FILTER.SETFILTER("Source No.",SourceNo);
      FirmPlannedProdOrders.FILTER.SETFILTER("No.",No);
      ProductionOrderStatistics.TRAP;
      FirmPlannedProdOrders."Page Production Order Statistics".INVOKE;
    END;

    LOCAL PROCEDURE VerifyDimensionSetEntry@336(DimensionCode@1000 : Code[20];DimensionValueCode@1001 : Code[20];DimensionSetID@1002 : Integer);
    VAR
      DimensionSetEntry@1003 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Code",DimensionCode);
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
      DimensionSetEntry.FINDFIRST;
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DimensionValueCode);
    END;

    LOCAL PROCEDURE VerifyOrderTrackingPage@146(OrderTracking@1000 : TestPage 99000822);
    BEGIN
      Assert.AreEqual(
        GlobalChildItemNo,OrderTracking."Item No.".VALUE,
        STRSUBSTNO(ValidationError,OrderTracking."Item No.".CAPTION,GlobalChildItemNo,OrderTracking.CAPTION));
      Assert.AreEqual(ExpectedQuantity,OrderTracking.Quantity.ASDECIMAL,QuantityError);
    END;

    LOCAL PROCEDURE VerifyProdOrderComponent@165(ItemNo@1000 : Code[20];UnitOfMeasureCode@1002 : Code[10];QuantityPer@1001 : Decimal);
    VAR
      ProdOrderComponent@1003 : Record 5407;
    BEGIN
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.FINDFIRST;
      ProdOrderComponent.TESTFIELD("Quantity per",QuantityPer);
      ProdOrderComponent.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
    END;

    LOCAL PROCEDURE VerifyProdOrderRoutingLine@162(PlanningRoutingLine@1003 : Record 99000830;RoutingNo@1000 : Code[20];OperationNo@1001 : Code[10]);
    VAR
      ProdOrderRoutingLine@1002 : Record 5409;
    BEGIN
      ProdOrderRoutingLine.SETRANGE("Operation No.",OperationNo);
      ProdOrderRoutingLine.SETRANGE("Routing No.",RoutingNo);
      ProdOrderRoutingLine.FINDFIRST;
      ProdOrderRoutingLine.TESTFIELD(Type,ProdOrderRoutingLine.Type);
      ProdOrderRoutingLine.TESTFIELD("No.",PlanningRoutingLine."No.");
      ProdOrderRoutingLine.TESTFIELD("Setup Time",PlanningRoutingLine."Setup Time");
      ProdOrderRoutingLine.TESTFIELD("Run Time",PlanningRoutingLine."Run Time");
      ProdOrderRoutingLine.TESTFIELD("Previous Operation No.",PlanningRoutingLine."Previous Operation No.");
    END;

    LOCAL PROCEDURE VerifyProductionOrderStatistics@158(ProductionOrderStatistics@1002 : TestPage 99000816;ProductionOrderStatistics2@1000 : TestPage 99000816);
    BEGIN
      ProductionOrderStatistics2.MaterialCost_StandardCost.ASSERTEQUALS(ProductionOrderStatistics.MaterialCost_StandardCost.VALUE);
      ProductionOrderStatistics2.CapacityCost_StandardCost.ASSERTEQUALS(ProductionOrderStatistics.CapacityCost_StandardCost.VALUE );
      ProductionOrderStatistics2.TotalCost_StandardCost.ASSERTEQUALS(ProductionOrderStatistics.TotalCost_StandardCost.VALUE );

      ProductionOrderStatistics2.MaterialCost_ExpectedCost.ASSERTEQUALS(ProductionOrderStatistics.MaterialCost_ExpectedCost.VALUE );
      ProductionOrderStatistics2.CapacityCost_ExpectedCost.ASSERTEQUALS(ProductionOrderStatistics.CapacityCost_ExpectedCost.VALUE );
      ProductionOrderStatistics2.TotalCost_ExpectedCost.ASSERTEQUALS(ProductionOrderStatistics.TotalCost_ExpectedCost.VALUE ) ;

      ProductionOrderStatistics2.MaterialCost_ActualCost.ASSERTEQUALS(ProductionOrderStatistics.MaterialCost_ActualCost.VALUE);
      ProductionOrderStatistics2.CapacityCost_ActualCost.ASSERTEQUALS(ProductionOrderStatistics.CapacityCost_ActualCost.VALUE );
      ProductionOrderStatistics2.TotalCost_ActualCost.ASSERTEQUALS(ProductionOrderStatistics.TotalCost_ActualCost.VALUE);
    END;

    LOCAL PROCEDURE RestoreSalesReceivableSetup@47(TempSalesReceivablesSetup@1000 : TEMPORARY Record 311);
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Credit Warnings",TempSalesReceivablesSetup."Credit Warnings");
      SalesReceivablesSetup.VALIDATE("Stockout Warning",TempSalesReceivablesSetup."Stockout Warning");
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE MakeSupplyOrdersPageHandler@7(VAR MakeSupplyOrders@1000 : Page 5526;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@145(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,OrderTrackingMessage) > 0,STRSUBSTNO(UnexpectedMessageDialog,Message));
    END;

    [ModalPageHandler]
    PROCEDURE OrderTrackingPageHandler@144(VAR OrderTracking@1000 : TestPage 99000822);
    BEGIN
      VerifyOrderTrackingPage(OrderTracking);
      OrderTracking.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE PlanningComponentPageHandler@143(VAR PlanningComponents@1000 : TestPage 99000862);
    VAR
      Item@1001 : Record 27;
      ProductionBOMLine@1002 : Record 99000772;
    BEGIN
      PlanningComponents.FIRST;
      Item.GET(GlobalChildItemNo);
      ProductionBOMLine.SETRANGE("Production BOM No.",Item."Production BOM No.");
      ProductionBOMLine.FINDFIRST;

      // Verify That Operation No. And Type Is same as on Production BOM Line.
      PlanningComponents."Item No.".ASSERTEQUALS(ProductionBOMLine."No.");
      PlanningComponents."Quantity per".ASSERTEQUALS(ProductionBOMLine.Quantity);
    END;

    [PageHandler]
    PROCEDURE PlanningRoutingPageHandler@142(VAR PlanningRouting@1000 : TestPage 99000863);
    VAR
      Item@1001 : Record 27;
      RoutingLine@1002 : Record 99000764;
    BEGIN
      PlanningRouting.FIRST;
      Item.GET(GlobalChildItemNo);
      RoutingLine.SETRANGE("Routing No.",Item."Routing No.");
      RoutingLine.FINDFIRST;

      // Verify That Operation No. And Type Is same as on Routing Line.
      PlanningRouting."Operation No.".ASSERTEQUALS(RoutingLine."Operation No.");
      PlanningRouting.Type.ASSERTEQUALS(RoutingLine.Type);
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [SCM]
      Test Order Planning:
       1. Check that error message is same as accepted during make order when change Production Order Item No. after calculate plan.
       2. Check that error message is same as accepted during make order when change Production Order Location Code after calculate plan.
       3. Check that error message is same as accepted during make order when change Production Order Quantity after calculate plan.
       4. Check that error message is same as accepted during make order when change Production Order Due Date after calculate plan.
       5. Check That Order Tracking Line Create As expected when open from Order Planning Page after calculate plan.
       6. Check That Order Tracking Line Create As expected when open from Purchase Order after Make Order from Order Planning Page.
       7. Check That Planning Component is same as component on child item after calculate plan.
       8. Check That Planning Routing is same as Routing on child item  after calculate plan.
       9. Check That Production Order Component is Created with the added component in Order Planning Page.
      10. Check That Production Order Routing Line is Created with the added Routing Line in Order Planning Page.
      11. Check Production Order Statistic on Firm Planned Prod. Order created from Make Order with Production Order Statistic on Firm Planned Production Order Created Directly.
      12. Check That Dimension on Sales Order Item Line is same as Dimension on Item.
      13. Check That Dimension On Purchase Line Created From Make Order is same as dimension on Item.
      14. Check that Dimension On Production Order Created From Make Order is same as dimension on Item.
      15. Check that Reserve is False While we create item with Reserve Never for Sales Order.
      16. Check that Reserve is TRUE While we create item with Reserve Always for Sales Order.
      17. Check That Reservation Entry Created after Make Supply Order for Sales Order when Child Item Reserve is Always.
      18. Check That Reservation Entry not Created after Make Supply Order for Sales Order when Child Item Reserve is Never.
      19. Check That Planning Component and Planning Routing Line created after change replenishment to Production Order.
      20. Check That Planning Component and Planning Routing Line Delete after change replenishment to Purchase Order.
      21. Check That Item Variant code on Order Planning Line is same as on Sales Line.
      22. Check That Purchase Line Created form Make Order have same Variant Cade as on Sales Line.
      23. Check That Production Order Line Created form Make Order have same Variant Cade as on Sales Line.
      24. Check the value of Quantity To Order is Change to Previous State after calculate Plan.
      25. Check that Reservation Entries created when creating Purchase REQ Requisition Lines from Production Order Planning if Item.Reserve is Always and Item."Reordering Policy" is Order.
      26. Check that Reservation Entries NOT created when creating Purchase REQ Requisition Lines from Production Order Planning if Item.Reserve is Never and Item."Reordering Policy" is Order.
      27. Check that Reservation Entries created when creating Prod. Order PLANNING Requisition Lines from Production Order Planning if Item.Reserve is Optional,
          Reserve field in Order Planning requisition line is TRUE and Item."Reordering Policy" is Fix
      28. Check that Reservation Entries created when creating Transfer REQ Requisition Lines from Production Order Planning if Item.Reserve is Optional,
          Reserve field in Order Planning requisition line is TRUE and Item."Reordering Policy" is Maximum Qty
      29. Check that Reservation Entries created when creating Purchase REQ Requisition Lines from Sales Order Planning if Item.Reserve is Always and Item."Reordering Policy" is Order.
      30. Check that Reservation Entries NOT created when creating Purchase REQ Requisition Lines from Sales Order Planning if Item.Reserve is Never and Item."Reordering Policy" is Order.
      31. Check that Reservation Entries created when creating Prod. Order PLANNING Requisition Lines from Sales Order Planning if Item.Reserve is Optional,
          Reserve field in Order Planning requisition line is TRUE and Item."Reordering Policy" is Fixed Re
      32. Check that Reservation Entries created when creating Transfer REQ Requisition Lines from Sales Order Planning if Item.Reserve is Optional,
          Reserve field in Order Planning requisition line is TRUE and Item."Reordering Policy" is Lot-for-Lot.

        Covers Test Cases for WI - 261788
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        ProductionOrderPlanningChangeItem                120966
        ProductionOrderPlanningChangeLocation            120966
        ProductionOrderPlanningChangeQty                 120966
        ProductionOrderPlanningChangeDemandDate          120966
        PlanningForOrderTracking                         120968
        MakeOrderAndCheckOrderTrackingInPurchOrder       120968
        PlanningForProdOrderPlanningComponent            120971
        PlanningForProdOrderPlanningRouting              120971

        Covers Test Cases for WI - 261797
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        ChangePlanningComponentAndMakeOrder               129156,141447,129158
        ChangePlanningRoutingAndMakeOrder                 129156,141447,129158
        StatisticOnProductionOrderWithPlanning            120960,129163,141447
        SalesDimensionOnOrderPlanning                     120960,129163,141447
        MakeOrderCheckDimensionOnPurchOrder               120960,129163,141447
        MakeOrderCheckDimensionOnProductionOrder          120960,129163,141447
        ReserveSalesPlanningNever                         129157,141447
        ReserveSalesPlanningAlways                        129157,141447
        ReserveSalesOrderPlanAlwaysMakeOrder              129157,141447
        ReserveSalesOrderPlanNeverMakeOrder               129157,141447
        ChangeReplenishmentToPurchAndCheckComponent       121551,138666
        ChangeReplenishmentToProdAndCheckComponent        121551,138666
        PlanningSalesOrderWithItemVariant                 129167
        MakeOrderPurchaseItemWithVariant                  129167
        MakeOrderProductionItemWithVariant                129167
        ChangeQuantityAndCalculatePlan                    138668

        Covers Test Cases for NAV7 SE Merge BUG
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        ReserveProdOrderPlanCopyToReqAlways               332175
        ReserveProdOrderPlanCopyToReqNever                332175
        ReserveProdOrderPlanCopyToReqOptional1            332175
        ReserveProdOrderPlanCopyToReqOptional2            332175
        ReserveSalesOrderPlanCopyToReqAlways              332175
        ReserveSalesOrderPlanCopyToReqNever               332175
        ReserveSalesOrderPlanCopyToReqOptional1           332175
        ReserveSalesOrderPlanCopyToReqOptional2           332175
    }
    END.
  }
}

