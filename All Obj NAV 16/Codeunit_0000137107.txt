OBJECT Codeunit 137107 SCM Kitting - Able To Make
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      BOMBuffer@1004 : Record 5870;
      MfgSetup@1025 : Record 99000765;
      LibraryInventory@1003 : Codeunit 132201;
      LibraryAssembly@1013 : Codeunit 132207;
      LibraryERMCountryData@1010 : Codeunit 131305;
      LibraryManufacturing@1030 : Codeunit 132202;
      LibraryTrees@1001 : Codeunit 132208;
      LibraryWarehouse@1020 : Codeunit 132204;
      Assert@1002 : Codeunit 130000;
      LibraryRandom@1007 : Codeunit 130440;
      isInitialized@1006 : Boolean;
      FilterType@1008 : 'None,Location,Variant,Header Location,Header Variant,Component Location,Component Variant';
      SupplyType@1005 : 'Inventory,Purchase,Prod. Order';
      ItemErr@1000 : TextConst 'ENU=%1 Item must Exist';
      ItemNotExistErr@1011 : TextConst 'ENU=%1 Item must not Exist';

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    BEGIN
      // Initialize setup.
      IF isInitialized THEN
        EXIT;

      // Setup Demonstration data.
      isInitialized := TRUE;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      MfgSetup.GET;
      UpdateMfgSetup('<1D>');
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE SetupAbleToMake@11(VAR BOMBuffer@1018 : Record 5870;TestLocation@1010 : Boolean;TestVariant@1011 : Boolean;SourceType@1006 : Option;BottleneckFactor@1008 : Decimal;ShowTotalAvailability@1009 : Boolean;DueDateDelay@1012 : Text;ChildLeaves@1013 : Integer;Depth@1017 : Integer;DirectAvailFactor@1016 : Decimal);
    VAR
      ItemVariant@1005 : Record 5401;
      Location@1004 : Record 14;
      Item@1015 : Record 27;
      CalculateBOMTree@1001 : Codeunit 5870;
      TreeType@1019 : ' ,Availability,Cost';
      GenProdPostingGroup@1002 : Code[10];
      InventoryPostingGroup@1003 : Code[10];
      AbleToMake@1000 : Decimal;
      DueDateDelayDateFormula@1007 : DateFormula;
    BEGIN
      // Setup.
      Initialize;
      AbleToMake := LibraryRandom.RandIntInRange(10,25);

      LibraryAssembly.SetupPostingToGL(GenProdPostingGroup,InventoryPostingGroup,InventoryPostingGroup,'');
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibraryAssembly.CreateItem(
        Item,Item."Costing Method"::Standard,Item."Replenishment System"::Assembly,GenProdPostingGroup,InventoryPostingGroup);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      LibraryTrees.CreateMixedTree(Item,Item."Replenishment System"::Assembly,Item."Costing Method"::Standard,Depth,ChildLeaves,2);
      LibraryTrees.AddTreeVariants(Item."No.");
      LibraryTrees.CreateNodeSupply(Item."No.",Location.Code,WORKDATE,SourceType,AbleToMake,BottleneckFactor,DirectAvailFactor);

      Item.SETRANGE("No.",Item."No.");
      EVALUATE(DueDateDelayDateFormula,DueDateDelay);
      Item.SETRANGE("Date Filter",0D,CALCDATE(DueDateDelayDateFormula,WORKDATE));

      IF TestVariant THEN
        LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      Item.SETRANGE("Variant Filter",ItemVariant.Code);

      IF TestLocation THEN
        LibraryWarehouse.CreateLocation(Location);
      Item.SETRANGE("Location Filter",Location.Code);

      IF TestLocation OR (DueDateDelay <> '<0D>') THEN
        AbleToMake := 0;

      // Exercise: Create the BOM tree.
      CalculateBOMTree.SetShowTotalAvailability(ShowTotalAvailability);
      CalculateBOMTree.GenerateTreeForItems(Item,BOMBuffer,TreeType::Availability);

      // Verify: Navigate through the tree and check the results.
      VerifyTree(BOMBuffer,Item."No.",ShowTotalAvailability,BottleneckFactor,AbleToMake,1,DirectAvailFactor,0);
      VerifyNode(BOMBuffer,Item."No.",0,AbleToMake * BottleneckFactor,1,1);
      BOMBuffer."Location Code" := Location.Code;
      BOMBuffer.MODIFY;
    END;

    [Test]
    PROCEDURE SunshineItemJnl@164();
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,FALSE,SupplyType::Inventory,1,TRUE,'<0D>',1,1,0.3);
    END;

    [Test]
    PROCEDURE SunshinePurchaseOrders@2();
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,FALSE,SupplyType::Purchase,1,TRUE,'<0D>',1,1,0.5);
    END;

    [Test]
    PROCEDURE ShowTotalAvailFalse@6();
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,FALSE,SupplyType::Purchase,1,FALSE,'<0D>',1,1,0.6)
    END;

    [Test]
    PROCEDURE NegativeAvailForSubassembly@43();
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,FALSE,SupplyType::Inventory,1,TRUE,'<0D>',1,1,0);
    END;

    [Test]
    PROCEDURE NegAvailForSubassemblyUnbalancedTree@46();
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,FALSE,SupplyType::Inventory,0.7,TRUE,'<0D>',1,1,0);
    END;

    [Test]
    PROCEDURE LocationFilter@7();
    BEGIN
      SetupAbleToMake(BOMBuffer,TRUE,FALSE,SupplyType::Purchase,1,TRUE,'<0D>',1,1,0.8);
    END;

    [Test]
    PROCEDURE VariantFilter@9();
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,TRUE,SupplyType::Purchase,1,TRUE,'<0D>',1,1,0.2);
    END;

    [Test]
    PROCEDURE DemandDateFilter@10();
    BEGIN
      SetupAbleToMake(BOMBuffer,TRUE,TRUE,SupplyType::Purchase,1,TRUE,'<-7D>',1,1,0.4);
    END;

    [Test]
    PROCEDURE BigTree@21();
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,FALSE,SupplyType::Purchase,1,TRUE,'<0D>',3,2,0.6);
    END;

    [Test]
    PROCEDURE UnbalancedTreeTotalAvailFalse@13();
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,FALSE,SupplyType::Purchase,0.8,FALSE,'<0D>',1,1,0.8);
    END;

    [Test]
    PROCEDURE UnbalancedTreeTotalAvailTrue@19();
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,FALSE,SupplyType::Purchase,0.8,TRUE,'<0D>',1,1,0.3);
    END;

    [Normal]
    LOCAL PROCEDURE GenerateTreeForAsm@12(AsmOrderFilterType@1000 : Option;DueDateDelay@1005 : Text;BottleneckFactor@1010 : Decimal;ShowTotalAvailability@1011 : Boolean;DirectAvailFactor@1007 : Decimal;AvailabilityCorrection@1013 : Decimal);
    VAR
      Location@1009 : Record 14;
      BOMBuffer@1006 : Record 5870;
      AssemblyHeader@1008 : Record 900;
      AssemblyLine@1004 : Record 901;
      ItemFilter@1016 : Record 27;
      CalculateBOMTree@1002 : Codeunit 5870;
      TreeType@1015 : ' ,Availability,Cost';
      InitialAbleToMake@1014 : Decimal;
      AbleToMake@1001 : Decimal;
      AssemblyQty@1012 : Decimal;
      DueDateDelayDateFormula@1003 : DateFormula;
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,FALSE,SupplyType::Purchase,BottleneckFactor,ShowTotalAvailability,'<0D>',1,1,DirectAvailFactor);
      EVALUATE(DueDateDelayDateFormula,DueDateDelay);

      IF DirectAvailFactor <> 0 THEN
        AssemblyQty := RANDOM(ROUND(BOMBuffer."Able to Make Top Item" * DirectAvailFactor,1,'<'))
      ELSE
        AssemblyQty := ROUND(BOMBuffer."Able to Make Top Item",1,'<') + AvailabilityCorrection;

      LibraryAssembly.CreateAssemblyHeader(
        AssemblyHeader,CALCDATE(DueDateDelayDateFormula,WORKDATE),BOMBuffer."No.",BOMBuffer."Location Code",
        AssemblyQty,BOMBuffer."Variant Code");
      FindAssemblyLine(AssemblyLine,AssemblyHeader);
      LibraryWarehouse.CreateLocation(Location);

      CASE AsmOrderFilterType OF
        FilterType::"Header Location":
          LibraryAssembly.UpdateAssemblyHeader(AssemblyHeader,AssemblyHeader.FIELDNO("Location Code"),Location.Code);
        FilterType::"Header Variant":
          LibraryAssembly.UpdateAssemblyHeader(AssemblyHeader,AssemblyHeader.FIELDNO("Variant Code"),'');
        FilterType::"Component Location":
          LibraryAssembly.UpdateAssemblyLine(AssemblyLine,AssemblyLine.FIELDNO("Location Code"),Location.Code);
        FilterType::"Component Variant":
          LibraryAssembly.UpdateAssemblyLine(AssemblyLine,AssemblyLine.FIELDNO("Variant Code"),'');
      END;

      AbleToMake := BOMBuffer."Able to Make Top Item" - AssemblyQty;
      InitialAbleToMake := BOMBuffer."Able to Make Top Item";
      IF AsmOrderFilterType = FilterType::"Component Location" THEN
        AbleToMake := 0;

      IF DueDateDelay <> '<0D>' THEN BEGIN
        InitialAbleToMake := 0;
        AbleToMake := 0;
      END;

      // Exercise.
      ItemFilter.SETFILTER("Location Filter",'%1',AssemblyHeader."Location Code");
      CalculateBOMTree.SetItemFilter(ItemFilter);
      CalculateBOMTree.SetShowTotalAvailability(ShowTotalAvailability);
      CalculateBOMTree.GenerateTreeForAsm(AssemblyHeader,BOMBuffer,TreeType::Availability);

      // Verify: Check the top item.
      VerifyTopItem(BOMBuffer,AssemblyHeader."Item No.",AssemblyQty,AbleToMake,ShowTotalAvailability);
      VerifyTreeAsmOrder(
        BOMBuffer,ShowTotalAvailability,BottleneckFactor,InitialAbleToMake / BottleneckFactor,1,DirectAvailFactor,AssemblyHeader,
        AsmOrderFilterType);
    END;

    [Test]
    PROCEDURE CheckReplenishmentSystemOnAvailabilityPageWithLocationFilter@77();
    VAR
      Item@1000 : Record 27;
      SKU@1002 : Record 5700;
      ItemAvailabilityPage@1003 : TestPage 5871;
      LocationCode@1001 : Code[10];
    BEGIN
      // [FEATURE] [Item Availability by BOM Level] [Stockkeeping Unit]
      // [SCENARIO 363686] Replenishment System on Availability by BOM level Page is taken from SKU of filtering Location

      // [GIVEN] Item with Replenishment System = "X"
      // [GIVEN] SKU for Item on Location "L" with Replenishment System = "Y"
      CreateBOMItemWithSKUonLocation(Item,SKU,LocationCode);

      // [WHEN] Set "Location Filter" on Availability by BOM level to "L"
      ItemAvailabilityPage.OPENEDIT;
      ItemAvailabilityPage.ItemFilter.SETVALUE(Item."No.");
      ItemAvailabilityPage.LocationFilter.SETVALUE(LocationCode);

      // [THEN] Replenishment System on Availability by BOM level Page is "Y"
      ItemAvailabilityPage."Replenishment System".ASSERTEQUALS(SKU."Replenishment System");
    END;

    [Test]
    PROCEDURE CheckReplenishmentSystemOnAvailabilityPageWithoutLocationFilter@76();
    VAR
      Item@1000 : Record 27;
      SKU@1002 : Record 5700;
      ItemAvailabilityPage@1003 : TestPage 5871;
      LocationCode@1001 : Code[10];
    BEGIN
      // [FEATURE] [Item Availability by BOM Level] [Stockkeeping Unit]
      // [SCENARIO 363686] Replenishment System on Availability by BOM level Page is taken from Item if not filtering by Location

      // [GIVEN] Item with Replenishment System = "X"
      // [GIVEN] SKU for Item on Location "L" with Replenishment System = "Y"
      CreateBOMItemWithSKUonLocation(Item,SKU,LocationCode);

      // [WHEN] "Location Filter" on Availability by BOM is empty
      ItemAvailabilityPage.OPENEDIT;
      ItemAvailabilityPage.ItemFilter.SETVALUE(Item."No.");

      // [THEN] Replenishment System on Availability by BOM level Page is "X"
      ItemAvailabilityPage."Replenishment System".ASSERTEQUALS(Item."Replenishment System");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SunshineAsmOrder@39();
    BEGIN
      GenerateTreeForAsm(FilterType::None,'<0D>',1,TRUE,0.4,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE UnbalancedTreeAsmOrderShowTotalAvailTrue@26();
    BEGIN
      GenerateTreeForAsm(FilterType::None,'<0D>',0.8,TRUE,0.4,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE UnbalancedTreeAsmOrderShowTotalAvailFalse@30();
    BEGIN
      GenerateTreeForAsm(FilterType::None,'<0D>',0.8,FALSE,0.6,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,AvailabilityWindowHandler)]
    PROCEDURE PosAvailForLeafAsmOrder@42();
    BEGIN
      GenerateTreeForAsm(FilterType::None,'<0D>',1,TRUE,0,-1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,AvailabilityWindowHandler)]
    PROCEDURE PosAvailForLeafAsmOrderUnbalancedTree@52();
    BEGIN
      GenerateTreeForAsm(FilterType::None,'<0D>',0.7,TRUE,0,-1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,AvailabilityWindowHandler)]
    PROCEDURE NegAvailForLeafAsmOrder@102();
    BEGIN
      GenerateTreeForAsm(FilterType::None,'<0D>',1,TRUE,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,AvailabilityWindowHandler)]
    PROCEDURE NegAvailForLeafAsmOrderUnbalancedTree@101();
    BEGIN
      GenerateTreeForAsm(FilterType::None,'<0D>',0.7,TRUE,0,1);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,AvailabilityWindowHandler)]
    PROCEDURE DateFilterAsmOrder@22();
    BEGIN
      GenerateTreeForAsm(FilterType::None,'<-7D>',1,TRUE,0.4,0);
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler,MessageHandler,BOMLevelAbleToMakeHandler)]
    PROCEDURE CyclicalAsmOrder@67();
    VAR
      AssemblyHeader@1000 : Record 900;
      AssemblyLine@1001 : Record 901;
      CalculateBOMTree@1002 : Codeunit 5870;
      AssemblyOrder@1004 : TestPage 900;
      TreeType@1003 : ' ,Availability,Cost';
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,FALSE,SupplyType::Inventory,1,TRUE,'<0D>',1,1,0.6);
      LibraryAssembly.CreateAssemblyHeader(
        AssemblyHeader,WORKDATE,BOMBuffer."No.",BOMBuffer."Location Code",BOMBuffer."Able to Make Top Item",BOMBuffer."Variant Code");
      LibraryAssembly.CreateAssemblyLine(
        AssemblyHeader,AssemblyLine,AssemblyLine.Type::Item,AssemblyHeader."Item No.",
        AssemblyHeader."Unit of Measure Code",RANDOM(5),1,'');

      // Exercise.
      CalculateBOMTree.SetShowTotalAvailability(TRUE);
      CalculateBOMTree.GenerateTreeForAsm(AssemblyHeader,BOMBuffer,TreeType::Availability);

      // Verify: BOM Level - Able to Make page.
      AssemblyOrder.OPENEDIT;
      AssemblyOrder.FILTER.SETFILTER("No.",AssemblyHeader."No.");

      AssemblyOrder.Action66.INVOKE;
      AssemblyOrder.OK.INVOKE;
    END;

    LOCAL PROCEDURE GenerateTreeForProdOrder@28(TestLocation@1006 : Boolean;DueDateDelay@1000 : Text);
    VAR
      Location@1009 : Record 14;
      Item@1010 : Record 27;
      BOMBuffer@1003 : Record 5870;
      ProductionOrder@1001 : Record 5405;
      ProdOrderLine@1004 : Record 5406;
      ProdOrderComponent@1005 : Record 5407;
      CalculateBOMTree@1002 : Codeunit 5870;
      ReleasedProductionOrder@1011 : TestPage 99000831;
      TreeType@1012 : ' ,Availability,Cost';
      AbleToMake@1007 : Decimal;
      DueDateDelayDateFormula@1008 : DateFormula;
    BEGIN
      SetupAbleToMake(BOMBuffer,FALSE,FALSE,SupplyType::Purchase,1,TRUE,'<0D>',1,1,0.4);
      EVALUATE(DueDateDelayDateFormula,DueDateDelay);
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,BOMBuffer."No.",
        BOMBuffer."Able to Make Top Item");
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,FALSE,TRUE,FALSE);

      FindProdOrderLine(ProdOrderLine,ProductionOrder);
      LibraryManufacturing.UpdateProdOrderLine(ProdOrderLine,ProdOrderLine.FIELDNO("Location Code"),BOMBuffer."Location Code");
      LibraryManufacturing.UpdateProdOrderLine(ProdOrderLine,ProdOrderLine.FIELDNO("Variant Code"),BOMBuffer."Variant Code");
      LibraryManufacturing.UpdateProdOrderLine(
        ProdOrderLine,ProdOrderLine.FIELDNO("Due Date"),CALCDATE(DueDateDelayDateFormula,WORKDATE));

      LibraryManufacturing.CreateProductionOrderComponent(
        ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",ProdOrderLine."Line No.");
      LibraryInventory.CreateItem(Item);
      ProdOrderComponent.VALIDATE("Item No.",Item."No.");
      ProdOrderComponent.VALIDATE("Quantity per",RANDOM(5));
      ProdOrderComponent.MODIFY(TRUE);
      LibraryTrees.CreateSupply(
        Item."No.",'',BOMBuffer."Location Code",WORKDATE,SupplyType::Inventory,
        ProductionOrder.Quantity * ProdOrderComponent."Quantity per");

      IF TestLocation THEN BEGIN
        LibraryWarehouse.CreateLocation(Location);
        LibraryManufacturing.UpdateProdOrderLine(ProdOrderLine,ProdOrderLine.FIELDNO("Location Code"),Location.Code);
      END;

      AbleToMake := ProductionOrder.Quantity;

      // Exercise.
      CalculateBOMTree.SetShowTotalAvailability(TRUE);
      CalculateBOMTree.GenerateTreeForProdLine(ProdOrderLine,BOMBuffer,TreeType::Availability);

      // Verify: Check top item.
      VerifyTopItem(BOMBuffer,ProdOrderLine."Item No.",AbleToMake,0,TRUE);

      // Verify: BOM Level - Able to Make page.
      ReleasedProductionOrder.OPENEDIT;
      ReleasedProductionOrder.FILTER.SETFILTER("No.",ProductionOrder."No.");

      ReleasedProductionOrder.ProdOrderLines.ItemAvailabilityByBOMLevel.INVOKE;
      ReleasedProductionOrder.OK.INVOKE;
    END;

    [Test]
    [HandlerFunctions(BOMLevelAbleToMakeHandler)]
    PROCEDURE SunshineProdOrder@44();
    BEGIN
      GenerateTreeForProdOrder(FALSE,'<0D>');
    END;

    [Test]
    [HandlerFunctions(BOMLevelAbleToMakeHandler)]
    PROCEDURE LocationFilterProdOrder@72();
    BEGIN
      GenerateTreeForProdOrder(TRUE,'<0D>');
    END;

    [Test]
    [HandlerFunctions(BOMLevelAbleToMakeHandler)]
    PROCEDURE DateFilterProdOrder@20();
    BEGIN
      GenerateTreeForProdOrder(FALSE,'<-7D>');
    END;

    [Test]
    PROCEDURE CreateBOMTreeWithLeafItemsMorePlaces@15();
    VAR
      rootItem@1005 : Record 27;
      ItemB@1004 : Record 27;
      ItemC@1003 : Record 27;
      ItemD@1002 : Record 27;
      ItemX@1001 : Record 27;
      ItemY@1000 : Record 27;
      BOMComponent@1015 : Record 90;
      CalculateBOMTree@1014 : Codeunit 5870;
      TreeType@1017 : ' ,Availability,Cost';
      p1@1012 : Decimal;
      b1@1011 : Decimal;
      p2@1010 : Decimal;
      c1@1009 : Decimal;
      c2@1008 : Decimal;
      p3@1007 : Decimal;
      d1@1006 : Decimal;
      ItemXDemand@1016 : Decimal;
      ItemYDemand@1013 : Decimal;
    BEGIN
      // BOM
      // rootItem
      // - p1 * ItemB
      // - - - b1 * ItemX
      // - p2 * ItemC
      // - - - c1 * ItemX
      // - - - c2 * ItemY
      // - p3 * ItemD
      // - - - d1 * ItemC
      // - - - - -c1 * ItemX
      // - - - - -c2 * ItemY

      // Demand of ItemX per ParentItem := p1*b1 + p2*c1 + p3*d1*c1
      // Demand of ItemY per ParentItem := 0 + p2*c2 + p3*d1*c2

      LibraryAssembly.CreateItem(rootItem,rootItem."Costing Method"::Standard,rootItem."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateItem(ItemB,ItemB."Costing Method"::Standard,ItemB."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateItem(ItemC,ItemC."Costing Method"::Standard,ItemC."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateItem(ItemD,ItemD."Costing Method"::Standard,ItemD."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateItem(ItemX,ItemX."Costing Method"::Standard,ItemX."Replenishment System"::Assembly,'','');
      LibraryAssembly.CreateItem(ItemY,ItemY."Costing Method"::Standard,ItemY."Replenishment System"::Assembly,'','');

      p1 := 2;
      b1 := 3;
      p2 := 4;
      c1 := 5;
      c2 := 6;
      p3 := 7;
      d1 := 8;
      ItemXDemand := p1 * b1 + p2 * c1 + p3 * d1 * c1;
      ItemYDemand := p2 * c2 + p3 * d1 * c2;

      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,ItemB."No.",rootItem."No.",'',BOMComponent."Resource Usage Type"::Direct,p1,TRUE);
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,ItemC."No.",rootItem."No.",'',BOMComponent."Resource Usage Type"::Direct,p2,TRUE);
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,ItemD."No.",rootItem."No.",'',BOMComponent."Resource Usage Type"::Direct,p3,TRUE);

      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,ItemX."No.",ItemB."No.",'',BOMComponent."Resource Usage Type"::Direct,b1,TRUE);
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,ItemX."No.",ItemC."No.",'',BOMComponent."Resource Usage Type"::Direct,c1,TRUE);
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,ItemY."No.",ItemC."No.",'',BOMComponent."Resource Usage Type"::Direct,c2,TRUE);
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,ItemC."No.",ItemD."No.",'',BOMComponent."Resource Usage Type"::Direct,d1,TRUE);

      // Not able to make 1 PCS of rootItem:
      LibraryTrees.CreateSupply(ItemX."No.",'','',WORKDATE,SupplyType::Inventory,ItemXDemand / 2);
      LibraryTrees.CreateSupply(ItemY."No.",'','',WORKDATE,SupplyType::Inventory,ItemYDemand / 2);

      // Exercise.
      CalculateBOMTree.SetShowTotalAvailability(TRUE);
      rootItem.SETRANGE("No.",rootItem."No.");
      rootItem.SETRANGE("Date Filter",0D,WORKDATE);
      CalculateBOMTree.GenerateTreeForItems(rootItem,BOMBuffer,TreeType::Availability);

      // Verify: Able to make is a fraction of 1.
      VerifyNode(BOMBuffer,rootItem."No.",0,0.5,1,1);

      // Able to make 1 PCS of rootItem:
      LibraryTrees.CreateSupply(ItemX."No.",'','',WORKDATE,SupplyType::Inventory,ItemXDemand / 2);
      LibraryTrees.CreateSupply(ItemY."No.",'','',WORKDATE,SupplyType::Inventory,ItemYDemand / 2);
      CalculateBOMTree.GenerateTreeForItems(rootItem,BOMBuffer,TreeType::Availability);

      // Verify: Able to make is 1.
      VerifyNode(BOMBuffer,rootItem."No.",0,1,1,1);

      // Able to make 1 PCS of rootItem, different supply for X and Y.
      LibraryTrees.CreateSupply(ItemX."No.",'','',WORKDATE,SupplyType::Inventory,ItemXDemand);
      CalculateBOMTree.GenerateTreeForItems(rootItem,BOMBuffer,TreeType::Availability);

      // Verify: Able to make is 1.
      VerifyNode(BOMBuffer,rootItem."No.",0,1,1,1);

      // Able to make more than 1 PCS of rootItem:
      LibraryTrees.CreateSupply(ItemY."No.",'','',WORKDATE,SupplyType::Inventory,ItemYDemand);
      CalculateBOMTree.GenerateTreeForItems(rootItem,BOMBuffer,TreeType::Availability);

      // Verify: Able to make is 1.
      VerifyNode(BOMBuffer,rootItem."No.",0,2,1,1);
    END;

    [Test]
    PROCEDURE CheckItemInTreeWithProdAndAssemblyBOM@1();
    VAR
      ParentItem@1000 : Record 27;
      Item@1004 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      CalculateBOMTree@1001 : Codeunit 5870;
      AssemblyItemNo@1003 : Code[20];
    BEGIN
      // Check Assembly Bom Item in BomBuffer after created AssemblyBOM and Prodtion BOM for Parent Item with Replenishment System is Assembly.

      // Setup: Create assembly and production BOM for Parent Item.
      LibraryAssembly.CreateItem(ParentItem,ParentItem."Costing Method"::FIFO,ParentItem."Replenishment System"::Assembly,'','');
      LibraryManufacturing.CreateCertifiedProductionBOM(
        ProductionBOMHeader,LibraryInventory.CreateItem(Item),LibraryRandom.RandInt(5));
      UpdateParentItemWithProdBomNo(ParentItem,ProductionBOMHeader."No.");
      AssemblyItemNo := CreateAssemblyComponent(ParentItem."No.");

      // Exercise: Fill the BOMBuffer for Parent Item.
      CalculateBOMTree.GenerateTreeForItem(ParentItem,BOMBuffer,0D,0);

      // Verify: Check Assembly BOM Item exist in BOMBuffer
      VerifyItemInBomBuffer(AssemblyItemNo);
    END;

    [Test]
    PROCEDURE CheckItemInTreeWithAssemblyBom@5();
    VAR
      ParentItem@1006 : Record 27;
      CalculateBOMTree@1001 : Codeunit 5870;
      AssemblyItemNo@1007 : Code[20];
    BEGIN
      // Check Assembly Bom Item not in BomBuffer after created AssemblyBOM for Parent Item with Replenishment System is Prod. Order.

      // Setup: Create assembly BOM for Parent Item.
      LibraryAssembly.CreateItem(ParentItem,ParentItem."Costing Method"::FIFO,ParentItem."Replenishment System"::"Prod. Order",'','');
      AssemblyItemNo := CreateAssemblyComponent(ParentItem."No.");

      // Exercise: Fill the BOMBuffer for Parent Item.
      CalculateBOMTree.GenerateTreeForItem(ParentItem,BOMBuffer,0D,0);

      // Verify: Check Assembly BOM Item does not exist in BOMBuffer
      VerifyItemNotInBomBuffer(AssemblyItemNo);
    END;

    [Test]
    PROCEDURE CheckItemInTreeWithProdBOM@24();
    VAR
      ParentItem@1000 : Record 27;
      Item@1001 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      CalculateBOMTree@1003 : Codeunit 5870;
    BEGIN
      // Check Production Bom Item not in BomBuffer after created Production BOM for Parent Item with Replenishment System is Assembly.

      // Setup:
      LibraryAssembly.CreateItem(ParentItem,ParentItem."Costing Method"::FIFO,ParentItem."Replenishment System"::Assembly,'','');
      LibraryManufacturing.CreateCertifiedProductionBOM(
        ProductionBOMHeader,LibraryInventory.CreateItem(Item),LibraryRandom.RandInt(5));
      UpdateParentItemWithProdBomNo(ParentItem,ProductionBOMHeader."No.");

      // Exercise:
      CalculateBOMTree.GenerateTreeForItem(ParentItem,BOMBuffer,0D,0);

      // Verify: Check Production BOM Item does not exist in BOMBuffer
      VerifyItemNotInBomBuffer(Item."No.");
    END;

    LOCAL PROCEDURE CreateBOMItemWithSKUonLocation@86(VAR Item@1000 : Record 27;VAR SKU@1001 : Record 5700;VAR LocationCOde@1002 : Code[10]);
    VAR
      Location@1004 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      LocationCOde := Location.Code;

      CreateBOMItem(Item);

      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(SKU,LocationCOde,Item."No.",'');
      SKU.VALIDATE("Replenishment System",SKU."Replenishment System"::Transfer);
      SKU.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBOMItem@58(VAR ParentItem@1000 : Record 27);
    VAR
      CompItem@1004 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionBOMLine@1001 : Record 99000772;
    BEGIN
      LibraryInventory.CreateItem(ParentItem);
      LibraryInventory.CreateItem(CompItem);
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,ParentItem."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,CompItem."No.",LibraryRandom.RandDec(10,2));
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
      ParentItem.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      ParentItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAssemblyComponent@35(ParentItemNo@1000 : Code[20]) : Code[20];
    VAR
      AssemblyItem@1001 : Record 27;
      BOMComponent@1002 : Record 90;
    BEGIN
      LibraryAssembly.CreateItem(AssemblyItem,AssemblyItem."Costing Method"::FIFO,AssemblyItem."Replenishment System"::Purchase,'','');
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,AssemblyItem."No.",ParentItemNo,'',
        BOMComponent."Resource Usage Type"::Direct,LibraryRandom.RandDec(2,4),TRUE);
      EXIT(AssemblyItem."No.");
    END;

    [Normal]
    LOCAL PROCEDURE FindAssemblyLine@51(VAR AssemblyLine@1000 : Record 901;AssemblyHeader@1001 : Record 900);
    BEGIN
      AssemblyLine.SETRANGE("Document Type",AssemblyHeader."Document Type");
      AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
      AssemblyLine.SETRANGE(Type,AssemblyLine.Type::Item);
      AssemblyLine.FINDFIRST;
    END;

    [Normal]
    LOCAL PROCEDURE FindProdOrderLine@59(VAR ProdOrderLine@1000 : Record 5406;ProductionOrder@1002 : Record 5405);
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyTree@14(VAR BOMBuffer@1000 : Record 5870;ParentItemNo@1001 : Code[20];ShowTotalAvailability@1006 : Boolean;BottleneckFactor@1004 : Decimal;ExpAbleToMakeParent@1003 : Decimal;ParentQtyPer@1005 : Decimal;DirectAvailabilityFactor@1007 : Decimal;LocalDemand@1008 : Decimal);
    VAR
      BOMComponent@1002 : Record 90;
    BEGIN
      BOMComponent.SETRANGE("Parent Item No.",ParentItemNo);
      BOMComponent.SETRANGE(Type,BOMComponent.Type::Item);

      IF BOMComponent.FINDSET THEN
        REPEAT
          BOMBuffer.RESET;
          BOMComponent.CALCFIELDS("Assembly BOM");

          IF BOMComponent."Assembly BOM" THEN
            VerifyNode(
              BOMBuffer,BOMComponent."No.",
              ExpAbleToMakeParent *
              BottleneckFactor * BOMComponent."Quantity per" * DirectAvailabilityFactor - LocalDemand * BOMComponent."Quantity per",
              ExpAbleToMakeParent * BottleneckFactor * BOMComponent."Quantity per" * (1 - DirectAvailabilityFactor),
              BOMComponent."Quantity per",ParentQtyPer * BOMComponent."Quantity per")
          ELSE
            IF ShowTotalAvailability THEN
              VerifyNode(
                BOMBuffer,BOMComponent."No.",
                ExpAbleToMakeParent * BOMComponent."Quantity per" - LocalDemand * BOMComponent."Quantity per",0,
                BOMComponent."Quantity per",ParentQtyPer * BOMComponent."Quantity per")
            ELSE
              VerifyNode(
                BOMBuffer,BOMComponent."No.",
                ExpAbleToMakeParent * BottleneckFactor * BOMComponent."Quantity per" - LocalDemand * BOMComponent."Quantity per",0,
                BOMComponent."Quantity per",ParentQtyPer * BOMComponent."Quantity per");

          VerifyTree(
            BOMBuffer,BOMComponent."No.",ShowTotalAvailability,1,
            ExpAbleToMakeParent * BottleneckFactor * BOMComponent."Quantity per" * (1 - DirectAvailabilityFactor),
            ParentQtyPer * BOMComponent."Quantity per",DirectAvailabilityFactor,0);
        UNTIL BOMComponent.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyTreeAsmOrder@25(VAR BOMBuffer@1000 : Record 5870;ShowTotalAvailability@1006 : Boolean;BottleneckFactor@1004 : Decimal;InitAbleToMakeParent@1003 : Decimal;ParentQtyPer@1005 : Decimal;DirectAvailabilityFactor@1007 : Decimal;AssemblyHeader@1008 : Record 900;AsmFilterType@1011 : Option);
    VAR
      AssemblyLine@1002 : Record 901;
      Item@1009 : Record 27;
      ExpAbleToMakeParent@1010 : Decimal;
    BEGIN
      AssemblyLine.SETRANGE("Document Type",AssemblyHeader."Document Type");
      AssemblyLine.SETRANGE("Document No.",AssemblyHeader."No.");
      AssemblyLine.SETRANGE(Type,AssemblyLine.Type::Item);

      IF AssemblyLine.FINDSET THEN
        REPEAT
          BOMBuffer.RESET;
          Item.GET(AssemblyLine."No.");
          Item.CALCFIELDS("Assembly BOM");

          IF (AssemblyLine."Location Code" <> AssemblyHeader."Location Code") AND
             (AsmFilterType = FilterType::"Component Location")
          THEN
            ExpAbleToMakeParent := 0
          ELSE
            ExpAbleToMakeParent := InitAbleToMakeParent;

          IF Item."Assembly BOM" THEN
            VerifyNode(
              BOMBuffer,AssemblyLine."No.",
              ExpAbleToMakeParent * BottleneckFactor * AssemblyLine."Quantity per" * DirectAvailabilityFactor - AssemblyLine.Quantity,
              ExpAbleToMakeParent * BottleneckFactor * AssemblyLine."Quantity per" * (1 - DirectAvailabilityFactor),
              AssemblyLine."Quantity per",ParentQtyPer * AssemblyLine."Quantity per")
          ELSE
            IF ShowTotalAvailability THEN
              VerifyNode(
                BOMBuffer,AssemblyLine."No.",ExpAbleToMakeParent * AssemblyLine."Quantity per" - AssemblyLine.Quantity,0,
                AssemblyLine."Quantity per",ParentQtyPer * AssemblyLine."Quantity per")
            ELSE
              VerifyNode(
                BOMBuffer,AssemblyLine."No.",
                ExpAbleToMakeParent * BottleneckFactor * AssemblyLine."Quantity per" - AssemblyLine.Quantity,0,
                AssemblyLine."Quantity per",ParentQtyPer * AssemblyLine."Quantity per");

          VerifyTree(
            BOMBuffer,AssemblyLine."No.",ShowTotalAvailability,1,
            InitAbleToMakeParent * BottleneckFactor * AssemblyLine."Quantity per" * (1 - DirectAvailabilityFactor),
            ParentQtyPer * AssemblyLine."Quantity per",DirectAvailabilityFactor,0);
        UNTIL AssemblyLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyNode@17(VAR BOMBuffer@1000 : Record 5870;ItemNo@1001 : Code[20];DirectAvailability@1005 : Decimal;IndirectAvailability@1002 : Decimal;QtyPerParent@1003 : Decimal;QtyPerTopItem@1004 : Decimal);
    VAR
      AbleToMake@1006 : Decimal;
    BEGIN
      BOMBuffer.RESET;
      BOMBuffer.SETRANGE(Type,BOMBuffer.Type::Item);
      BOMBuffer.SETRANGE("No.",ItemNo);
      BOMBuffer.FINDFIRST;

      // Validate: The BOM Tree record.
      Assert.AreNearlyEqual(QtyPerParent,BOMBuffer."Qty. per Parent",0.00001,'Wrong qty per parent for item ' + ItemNo);
      Assert.AreNearlyEqual(QtyPerTopItem,BOMBuffer."Qty. per Top Item",0.00001,'Wrong qty per top item for item ' + ItemNo);
      Assert.AreNearlyEqual(DirectAvailability,BOMBuffer."Available Quantity",0.00001,'Wrong avail. qty for item ' + ItemNo);

      IF BOMBuffer."Available Quantity" + IndirectAvailability > 0 THEN
        AbleToMake := BOMBuffer."Available Quantity" + IndirectAvailability
      ELSE
        AbleToMake := 0;

      Assert.AreNearlyEqual(
        AbleToMake / BOMBuffer."Qty. per Top Item",BOMBuffer."Able to Make Top Item",0.00001,
        'Wrong able to make top item for Item ' + ItemNo);
      Assert.AreNearlyEqual(
        AbleToMake / BOMBuffer."Qty. per Parent",BOMBuffer."Able to Make Parent",0.00001,
        'Wrong able to make parent for Item ' + ItemNo);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyTopItem@91(VAR BOMBuffer@1000 : Record 5870;ItemNo@1001 : Code[20];AvailableQty@1003 : Decimal;AbleToMake@1002 : Decimal;ShowTotalAvailability@1004 : Boolean);
    BEGIN
      BOMBuffer.RESET;
      BOMBuffer.SETRANGE(Type,BOMBuffer.Type::Item);
      BOMBuffer.SETRANGE("No.",ItemNo);
      BOMBuffer.FINDFIRST;

      // Validate: The BOM Tree record.
      IF AbleToMake < 0 THEN
        AbleToMake := 0;

      IF NOT ShowTotalAvailability THEN
        AvailableQty := 0;

      Assert.AreEqual(1,BOMBuffer."Qty. per Parent",'Wrong qty per parent for item ' + ItemNo);
      Assert.AreEqual(1,BOMBuffer."Qty. per Top Item",'Wrong qty per top item for item ' + ItemNo);
      Assert.AreEqual(AvailableQty,BOMBuffer."Available Quantity",'Wrong avail. qty for item ' + ItemNo);
      Assert.AreEqual(AbleToMake,BOMBuffer."Able to Make Top Item",'Wrong able to make top item for Item ' + ItemNo);
      Assert.AreEqual(AbleToMake,BOMBuffer."Able to Make Parent",'Wrong able to make parent for Item ' + ItemNo);
    END;

    LOCAL PROCEDURE VerifyItemInBomBuffer@34(ItemNo@1000 : Code[20]);
    BEGIN
      BOMBuffer.SETRANGE(Type,BOMBuffer.Type::Item);
      BOMBuffer.SETRANGE("No.",ItemNo);
      IF BOMBuffer.ISEMPTY THEN
        ERROR(STRSUBSTNO(ItemErr,ItemNo));
    END;

    LOCAL PROCEDURE VerifyItemNotInBomBuffer@27(ItemNo@1000 : Code[20]);
    BEGIN
      BOMBuffer.SETRANGE(Type,BOMBuffer.Type::Item);
      BOMBuffer.SETRANGE("No.",ItemNo);
      Assert.IsTrue(BOMBuffer.ISEMPTY,STRSUBSTNO(ItemNotExistErr,ItemNo))
    END;

    [Normal]
    LOCAL PROCEDURE UpdateMfgSetup@3(MfgLeadTime@1001 : Text);
    VAR
      LeadTimeFormula@1000 : DateFormula;
    BEGIN
      IF FORMAT(MfgSetup."Default Safety Lead Time") <> MfgLeadTime THEN BEGIN
        EVALUATE(LeadTimeFormula,MfgLeadTime);
        MfgSetup.VALIDATE("Default Safety Lead Time",LeadTimeFormula);
        MfgSetup.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateParentItemWithProdBomNo@36(VAR ParentItem@1002 : Record 27;ProductionBOMHeaderNo@1000 : Code[20]);
    BEGIN
      ParentItem.VALIDATE("Production BOM No.",ProductionBOMHeaderNo);
      ParentItem.MODIFY(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE AvailabilityWindowHandler@48(VAR AsmAvailability@1000 : Page 908;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::Yes; // always confirm
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@23(Message@1000 : Text);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE BOMLevelAbleToMakeHandler@33(VAR BOMLevelAbleToMake@1000 : TestPage 5871);
    BEGIN
      BOMLevelAbleToMake.FIRST;
    END;

    BEGIN
    {
      // [FEATURE] [Assembly] [Able to Make] [SCM]
      This CU contains scenarios for the Able to Make visualisation.

      1. Check Assembly Bom Item in BomBuffer after created Assembly BOM and Production BOM for Parent Item with Replenishment System is Assembly.
      2. Check Assembly Bom Item not in BomBuffer after created AssemblyBOM for Parent Item with Replenishment System is Prod. Order.
      3. Check Production Bom Item not in BomBuffer after created Production BOM for Parent Item with Replenishment System is Assembly.

      Covers Test Cases for DACH - 47811
      -----------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                   TFS ID
      -----------------------------------------------------------------------------------------------------------
      CheckItemInTreeWithProdAndAssemblyBOM
      CheckItemInTreeWithAssemblyBom
      CheckItemInTreeWithProdBOM
    }
    END.
  }
}

