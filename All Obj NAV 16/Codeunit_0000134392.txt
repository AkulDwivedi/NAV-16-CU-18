OBJECT Codeunit 134392 ERM Cost Accounting Rep - Test
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1004 : Codeunit 130000;
      LibraryCostAccounting@1003 : Codeunit 131340;
      LibraryERM@1006 : Codeunit 131300;
      LibraryVariableStorage@1001 : Codeunit 131004;
      LibraryDimension@1050 : Codeunit 131001;
      LibraryReportDataset@1034 : Codeunit 131007;
      LibraryRandom@1011 : Codeunit 130440;
      LibraryUtility@1009 : Codeunit 131000;
      ComparisonType@1015 : 'Last Year,Last Half Year,Last Quarter,Last Month,Same Period Last Year,Free comparison';
      Amount@1008 : TextConst 'ENU=Amount.';
      RowNotFoundError@1018 : TextConst '@@@="%1=Field Caption;%2=Field Value;";ENU=There is no dataset row corresponding to Element Name %1 with value %2.';
      ExpectedEndingDateError@1027 : TextConst 'ENU=Starting date and ending date in the actual period must be defined.';
      ExpectedEndDateError@1020 : TextConst 'ENU=Ending date must not be before starting date.';
      DimensionValueError@1055 : TextConst 'ENU=The dimension values for cost center and cost object cannot be same.';
      BlankPostingDateError@1033 : TextConst 'ENU=Posting date is not defined.';
      BlankDocumentNoError@1032 : TextConst 'ENU=Document no. is not defined.';
      BlankBalCostTypeError@1031 : TextConst 'ENU=Define cost type or balance cost type.';
      BlankBalanceCCAndCOError@1030 : TextConst 'ENU=Balance cost center or cost object must be defined.';
      BlankCCAndCOError@1029 : TextConst 'ENU=Cost center or cost object must be defined.';
      NotBlankCCAndCOError@1028 : TextConst 'ENU=Cost center and cost object cannot be both defined concurrently.';
      NotBlankBalanceCCAndCOError@1026 : TextConst 'ENU=Balance cost center and cost object cannot be both defined concurrently.';
      BlockedCostTypeError@1025 : TextConst 'ENU=Cost type is blocked.';
      LineTypeError@1024 : TextConst 'ENU=Cost type must not be line type %1.';
      RowMustNotExist@1012 : TextConst 'ENU=Row Must Not Exist.';

    [Test]
    [HandlerFunctions(CostAcctgBalanceBudgetReportHandler)]
    PROCEDURE CostAcctgBalanceBudgetRep@66();
    VAR
      CostBudgetEntry@1002 : Record 1109;
      CostBudgetName@1001 : Record 1110;
    BEGIN
      // Post entries for a cost type in a specific period and then Run the report for for that period. (Make sure you also set the Budget Filter.)
      // Check the values for each report column for the row containing the Cost Type used.
      Initialize;

      // Setup
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      LibraryCostAccounting.CreateCostBudgetEntry(CostBudgetEntry,CostBudgetName.Name);

      // Post-Setup
      EnqueueCostAcctgBalanceBudget(CostBudgetEntry.Date,CostBudgetEntry.Date,CostBudgetEntry."Cost Type No.");

      // Exercise
      RunCostAcctgBalanceBudgetReport(
        CostBudgetEntry."Cost Type No.",CostBudgetEntry."Budget Name",CostBudgetEntry."Cost Center Code");

      // Verify
      VerifyCostAcctgBalanceBudgetReport(CostBudgetEntry.Amount,CostBudgetEntry."Cost Type No.");
    END;

    [Test]
    [HandlerFunctions(CostAcctgBalanceBudgetReportHandler)]
    PROCEDURE CostAcctgBalanceBudgetZeroEndDate@91();
    BEGIN
      // Unit Test Case: REP1138 To check that End Date control on request page should not accept zero.

      VerifyExpectedErrorOnCostAcctBalanceBudgetRep(0D,ExpectedEndingDateError);
    END;

    [Test]
    [HandlerFunctions(CostAcctgBalanceBudgetReportHandler)]
    PROCEDURE CostAcctgBalanceBudgetStartEndDate@96();
    BEGIN
      // Unit Test Case: REP1138 To check that End Date must not be less than Start Date on request page.

      VerifyExpectedErrorOnCostAcctBalanceBudgetRep(
        CALCDATE(STRSUBSTNO('<-%1D>',LibraryRandom.RandInt(5)),WORKDATE),ExpectedEndDateError);
    END;

    [Test]
    [HandlerFunctions(CostAcctgJournalReportHandler)]
    PROCEDURE CostAcctgJournalRep@2();
    VAR
      CostJournalLine@1001 : Record 1101;
    BEGIN
      // Create a cost journal line and check that it displays correctly on the report
      Initialize;

      // Setup
      CreateCostJournalLine(CostJournalLine,WORKDATE);

      // Post-Setup
      EnqueueCostAcctgJournalReport(FALSE,CostJournalLine."Cost Type No.");

      // Exercise
      RunCostAcctgJournalReport(CostJournalLine);

      // Verify
      VerifyCostAcctgJournalReport(CostJournalLine.Amount,CostJournalLine."Cost Type No.");
    END;

    [Test]
    [HandlerFunctions(CostAcctgJournalReportHandler)]
    PROCEDURE CostAcctgJournalRepBlankPostingDate@65();
    VAR
      CostJournalLine@1000 : Record 1101;
    BEGIN
      // Unit Test Case: REP1128: to check that error is diplayed on the report when Posting Date is blank on Cost Journal Line.

      // Setup:
      Initialize;

      // Exercise: Create Cost Journal Line with Blank Posting Date.
      CreateCostJournalLine(CostJournalLine,0D);

      // Verify:
      VerifyExpectedErrorOnCostAcctgJournalRep(CostJournalLine,BlankPostingDateError);
    END;

    [Test]
    [HandlerFunctions(CostAcctgJournalReportHandler)]
    PROCEDURE CostAcctgJournalRepBlankDocumentNo@63();
    VAR
      CostJournalLine@1000 : Record 1101;
    BEGIN
      // Unit Test Case: REP1128: to check that error is diplayed on the report when document No. is blank on Cost Journal Line.

      // Setup:
      Initialize;

      // Exercise: Create Cost Journal Line with blank Document No.
      CreateCostJournalLine(CostJournalLine,WORKDATE);
      CostJournalLine."Document No." := '';
      CostJournalLine.MODIFY;

      // Verify:
      VerifyExpectedErrorOnCostAcctgJournalRep(CostJournalLine,BlankDocumentNoError);
    END;

    [Test]
    [HandlerFunctions(CostAcctgJournalReportHandler)]
    PROCEDURE CostAcctgJournalRepBlankBalCostType@110();
    VAR
      CostJournalLine@1001 : Record 1101;
    BEGIN
      // Unit Test Case: REP1128: to check that error is displayed on report when blank Cost Type No. and Bal. Cost Type No is set on Cost Journal Line.

      // Setup:
      Initialize;

      // Exercise: Create Cost Journal Line with blank Cost Type No. and Bal. Cost Type No.
      CreateCostJournalLine(CostJournalLine,WORKDATE);
      CostJournalLine."Cost Type No." := '';
      CostJournalLine."Bal. Cost Type No." := '';
      CostJournalLine.MODIFY;

      // Verify:
      VerifyExpectedErrorOnCostAcctgJournalRep(CostJournalLine,BlankBalCostTypeError);
    END;

    [Test]
    [HandlerFunctions(CostAcctgJournalReportHandler)]
    PROCEDURE CostAcctgJournalRepBlankCCAndCO@111();
    VAR
      CostJournalLine@1000 : Record 1101;
    BEGIN
      // Unit Test Case: REP1128: to check that blank Cost Center and Cost Object error is diplayed on the report.

      // Setup:
      Initialize;

      // Exercise: Create Cost Journal Line with blank cost center and cost object code.
      CreateCostJournalLine(CostJournalLine,WORKDATE);
      UpdateCCAndCOOnCostJournalLine(CostJournalLine,'','');

      // Verify:
      VerifyExpectedErrorOnCostAcctgJournalRep(CostJournalLine,BlankCCAndCOError);
    END;

    [Test]
    [HandlerFunctions(CostAcctgJournalReportHandler)]
    PROCEDURE CostAcctgJournalRepNotBlankCCAndCO@112();
    VAR
      CostJournalLine@1000 : Record 1101;
      CostCenter@1004 : Record 1112;
      CostObject@1001 : Record 1113;
    BEGIN
      // Unit Test Case: REP1128: to check that error is displayed on report when both Cost Center and Cost Object are set on Cost Journal Line.

      // Setup:
      Initialize;

      // Exercise: Create Cost Journal Line with both cost center and cost object code set.
      CreateCCAndCO(CostCenter,CostObject);
      CreateCostJournalLine(CostJournalLine,WORKDATE);
      UpdateCCAndCOOnCostJournalLine(CostJournalLine,CostCenter.Code,CostObject.Code);

      // Verify:
      VerifyExpectedErrorOnCostAcctgJournalRep(CostJournalLine,NotBlankCCAndCOError);
    END;

    [Test]
    [HandlerFunctions(CostAcctgJournalReportHandler)]
    PROCEDURE CostAcctgJournalRepBlankBalCCAndCO@114();
    VAR
      CostJournalLine@1000 : Record 1101;
    BEGIN
      // Unit Test Case: REP1128: to check that error is displayed on report when both Bal. Cost Center and Bal. Cost Object are blank on Cost Journal Line.

      // Setup:
      Initialize;

      // Exercise: Create Cost Journal Line with Bal. cost center and Bal. cost object code blank.
      CreateCostJournalLine(CostJournalLine,WORKDATE);
      UpdateBalCCAndCOOnCostJournalLine(CostJournalLine,'','');

      // Verify:
      VerifyExpectedErrorOnCostAcctgJournalRep(CostJournalLine,BlankBalanceCCAndCOError);
    END;

    [Test]
    [HandlerFunctions(CostAcctgJournalReportHandler)]
    PROCEDURE CostAcctgJournalRepNotBlankBalCCAndCO@113();
    VAR
      CostJournalLine@1000 : Record 1101;
      CostCenter@1004 : Record 1112;
      CostObject@1001 : Record 1113;
    BEGIN
      // Unit Test Case: REP1128: to check that error is displayed on report when both Bal. Cost Center and Bal. Cost Object are set on Cost Journal Line.

      // Setup:
      Initialize;

      // Exercise: Create Cost Journal Line with both Bal. cost center and Bal. cost object code set.
      CreateCCAndCO(CostCenter,CostObject);
      CreateCostJournalLine(CostJournalLine,WORKDATE);
      UpdateBalCCAndCOOnCostJournalLine(CostJournalLine,CostCenter.Code,CostObject.Code);

      // Verify:
      VerifyExpectedErrorOnCostAcctgJournalRep(CostJournalLine,NotBlankBalanceCCAndCOError);
    END;

    [Test]
    [HandlerFunctions(CostAcctgJournalReportHandler)]
    PROCEDURE CostAcctgJournalRepNotCostType@115();
    VAR
      CostType@1001 : Record 1103;
    BEGIN
      // Unit Test Case: REP1128: to check that error is displayed on report when type of Cost Type on Cost Journal line is not "Cost Type".

      VerifyErrorOnCostAcctgJournalRepForSpecificCostType(
        CostType.Type::Heading,FALSE,STRSUBSTNO(LineTypeError,CostType.Type::Heading));
    END;

    [Test]
    [HandlerFunctions(CostAcctgJournalReportHandler)]
    PROCEDURE CostAcctgJournalRepBlockedCostType@116();
    VAR
      CostType@1000 : Record 1103;
    BEGIN
      // Unit Test Case: REP1128: to check that error is displayed on report when Cost Type on Cost Journal line is Blocked.

      VerifyErrorOnCostAcctgJournalRepForSpecificCostType(CostType.Type::"Cost Type",TRUE,BlockedCostTypeError);
    END;

    [Test]
    [HandlerFunctions(CostAcctgStmtBudgetReportHandler)]
    PROCEDURE CostAcctgStmtBudgetReportBlankCC@68();
    VAR
      CostEntry@1000 : Record 1104;
    BEGIN
      Initialize;
      CostEntry.SETFILTER("Cost Object Code",'<>%1','');
      CostEntry.SETFILTER("Cost Center Code",'%1','');
      CostEntry.FINDFIRST;
      ValidateCostAcctgStmtBudgetReport(CostEntry);
    END;

    [Test]
    [HandlerFunctions(CostAcctgStmtBudgetReportHandler)]
    PROCEDURE CostAcctgStmtBudgetReportBlankCO@61();
    VAR
      CostEntry@1000 : Record 1104;
    BEGIN
      Initialize;
      CostEntry.SETFILTER("Cost Object Code",'%1','');
      CostEntry.SETFILTER("Cost Center Code",'<>%1','');
      CostEntry.FINDFIRST;
      ValidateCostAcctgStmtBudgetReport(CostEntry);
    END;

    [Test]
    [HandlerFunctions(CostAcctgStmtBudgetReportHandler)]
    PROCEDURE CostAcctgStmtBudgetReportBudgetAmtNotEqualToZero@86();
    VAR
      CostBudgetName@1002 : Record 1110;
      CostType@1000 : Record 1103;
    BEGIN
      // Test Cost Accounting Statement Budget Report.

      // Setup: Set Filters When Budget Amount on Cost Type is not equal to zero
      Initialize;
      CostBudgetName.FINDFIRST;
      CostType.SETRANGE("Budget Filter",CostBudgetName.Name);
      CostType.SETRANGE(Type,CostType.Type::"Cost Type");
      CostType.SETFILTER("Budget Amount",'>0');

      // Exercise: Run Report.
      REPORT.RUN(REPORT::"Cost Acctg. Statement/Budget",TRUE,FALSE,CostType);

      // Verify: Verify Budget Amount on Report.
      VerifyBudgetAmount(CostType);
    END;

    [Test]
    [HandlerFunctions(CostAcctgStmtPerPeriodReportHandler)]
    PROCEDURE CostAcctgStmtPerPeriodRepAddCurrency@31();
    VAR
      PeriodLength@1000 : DateFormula;
      AmountType@1001 : 'Balance,Net Change';
    BEGIN
      EVALUATE(PeriodLength,'<1Y>');
      ValidateCostAcctgStmtPerPeriodRep(ComparisonType::"Last Year",PeriodLength,FALSE,TRUE,AmountType::Balance);
    END;

    [Test]
    [HandlerFunctions(CostAcctgStmtPerPeriodReportHandler)]
    PROCEDURE CostAcctgStmtPerPeriodRepLastHalfYear@11();
    VAR
      PeriodLength@1000 : DateFormula;
      AmountType@1001 : 'Balance,Net Change';
    BEGIN
      EVALUATE(PeriodLength,'<6M>');
      ValidateCostAcctgStmtPerPeriodRep(ComparisonType::"Last Half Year",PeriodLength,FALSE,FALSE,AmountType::Balance);
    END;

    [Test]
    [HandlerFunctions(CostAcctgStmtPerPeriodReportHandler)]
    PROCEDURE CostAcctgStmtPerPeriodRepLastMonth@20();
    VAR
      PeriodLength@1000 : DateFormula;
      AmountType@1001 : 'Balance,Net Change';
    BEGIN
      EVALUATE(PeriodLength,'<1M>');
      ValidateCostAcctgStmtPerPeriodRep(ComparisonType::"Last Month",PeriodLength,FALSE,FALSE,AmountType::Balance);
    END;

    [Test]
    [HandlerFunctions(CostAcctgStmtPerPeriodReportHandler)]
    PROCEDURE CostAcctgStmtPerPeriodBalanceRepLastYear@7();
    VAR
      PeriodLength@1000 : DateFormula;
      AmountType@1001 : 'Balance,Net Change';
    BEGIN
      EVALUATE(PeriodLength,'<1Y>');
      ValidateCostAcctgStmtPerPeriodRep(ComparisonType::"Last Year",PeriodLength,FALSE,FALSE,AmountType::Balance);
    END;

    [Test]
    [HandlerFunctions(CostAcctgStmtPerPeriodReportHandler)]
    PROCEDURE CostAcctgStmtPerPeriodNetChangeRepLastYear@97();
    VAR
      PeriodLength@1000 : DateFormula;
      AmountType@1001 : 'Balance,Net Change';
    BEGIN
      EVALUATE(PeriodLength,'<1Y>');
      ValidateCostAcctgStmtPerPeriodRep(ComparisonType::"Last Year",PeriodLength,FALSE,FALSE,AmountType::"Net Change");
    END;

    [Test]
    [HandlerFunctions(CostAcctgStmtPerPeriodReportHandler)]
    PROCEDURE CostAcctgStmtPerPeriodRepLastQuarter@12();
    VAR
      PeriodLength@1000 : DateFormula;
      AmountType@1001 : 'Balance,Net Change';
    BEGIN
      EVALUATE(PeriodLength,'<3M>');
      ValidateCostAcctgStmtPerPeriodRep(ComparisonType::"Last Quarter",PeriodLength,FALSE,FALSE,AmountType::Balance);
    END;

    [Test]
    [HandlerFunctions(CostAcctgStmtReportHandler)]
    PROCEDURE CostAcctgStmtRep@21();
    VAR
      CostJournalLine@1002 : Record 1101;
    BEGIN
      // Test Cost Acctg. Statement Report.
      Initialize;

      // Setup
      CreateCostJournalLine(CostJournalLine,WORKDATE);
      LibraryCostAccounting.PostCostJournalLine(CostJournalLine);

      // Post-Setup
      EnqueueCostAcctgStmtRepNewPage(FALSE,CostJournalLine."Cost Type No.");

      // Exercise
      RunCostAcctgStmtReport(CostJournalLine."Cost Type No.");

      // Verify
      VerifyCostAcctgStmtReport(CostJournalLine.Amount,CostJournalLine."Cost Type No.",'NetChange_CostType');
    END;

    [Test]
    [HandlerFunctions(CostAcctgStmtReportHandler)]
    PROCEDURE CostAcctgStmtRepForAddRepCurrency@28();
    VAR
      CostJournalLine@1002 : Record 1101;
      Currency@1013 : Record 4;
      OldAdditionalReportingCurrency@1014 : Code[10];
    BEGIN
      // Test Cost Acctg. Statement Report with additional reporting currency.
      Initialize;

      // Pre-Setup
      OldAdditionalReportingCurrency := SetupAddRepCurr(Currency,TRUE);

      // Setup
      CreateCostJournalLine(CostJournalLine,WORKDATE);
      LibraryCostAccounting.PostCostJournalLine(CostJournalLine);

      // Post-Setup
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(CostJournalLine."Cost Type No.");

      // Exercise
      RunCostAcctgStmtReport(CostJournalLine."Cost Type No.");

      // Verify
      VerifyCostAcctgStmtReport(LibraryERM.ConvertCurrency(
          CostJournalLine.Amount,'',Currency.Code,WORKDATE),CostJournalLine."Cost Type No.",'AddCurrNetChange_CostType');

      // Tear-Down
      UpdateAddnlReportingCurrency(OldAdditionalReportingCurrency);
    END;

    [Test]
    [HandlerFunctions(CostRegisterReportHandler)]
    PROCEDURE CostRegisterReportOnPreDataItem@14();
    VAR
      CostJournalLine@1000 : Record 1101;
      CostRegister@1003 : Record 1105;
    BEGIN
      // Verify Cost Register Report.
      // Setup.
      Initialize;
      CreateCostJournalLine(CostJournalLine,WORKDATE);
      LibraryCostAccounting.PostCostJournalLine(CostJournalLine);
      CostRegister.FINDLAST;
      LibraryVariableStorage.Enqueue(CostRegister."No.");

      // Exercise: Run Cost Register Report.
      RunCostRegisterReport(CostRegister);

      // Verify.
      VerifyCostRegisterReport(CostRegister."From Cost Entry No.");
    END;

    [Test]
    [HandlerFunctions(CostTypeDetailsReportHandler)]
    PROCEDURE CostTypeDetailsRep@5();
    VAR
      CostJournalLine@1002 : Record 1101;
    BEGIN
      // Test Cost Type Details Report.
      Initialize;

      // Setup
      CreateCostJournalLine(CostJournalLine,WORKDATE);
      LibraryCostAccounting.PostCostJournalLine(CostJournalLine);

      // Post-Setup
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(CostJournalLine."Cost Type No.");

      // Exercise
      RunCostTypeDetailsReport(CostJournalLine."Cost Type No.");

      // Verify
      VerifyCostTypeDetailsReport(CostJournalLine.Amount,'DebitAmount_CostEntry','CostTypeBalance');
    END;

    [Test]
    [HandlerFunctions(CostTypeDetailsReportHandler)]
    PROCEDURE CostTypeDetailsRepForAddRepCurrency@8();
    VAR
      CostJournalLine@1002 : Record 1101;
      Currency@1013 : Record 4;
      OldAdditionalReportingCurrency@1014 : Code[10];
    BEGIN
      // Test Cost Type Details Report with additional reporting currency.
      Initialize;

      // Pre-Setup
      OldAdditionalReportingCurrency := SetupAddRepCurr(Currency,TRUE);

      // Setup
      CreateCostJournalLine(CostJournalLine,WORKDATE);
      LibraryCostAccounting.PostCostJournalLine(CostJournalLine);

      // Post-Setup
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(CostJournalLine."Cost Type No.");

      // Exercise
      RunCostTypeDetailsReport(CostJournalLine."Cost Type No.");

      // Verify
      VerifyCostTypeDetailsReport(LibraryERM.ConvertCurrency(
          CostJournalLine.Amount,'',Currency.Code,WORKDATE),'AddCurrDbtAmt_CostEntry','CostTypeAddCurrBalance');

      // Tear-Down
      UpdateAddnlReportingCurrency(OldAdditionalReportingCurrency);
    END;

    [Test]
    [HandlerFunctions(CostAllocationsReportHandler)]
    PROCEDURE CostAllocationWhenPrintOnlyIfDetailIsTrue@55();
    BEGIN
      // Verify that Cost Allocations Report shows details of "Target Cost Type" and "Target Cost Center" when PrintOnlyIfDetails is true and Cost Allocation Target is not blank.
      Initialize;
      CostAllocRepForPrintOnlyDetails(TRUE);
    END;

    [Test]
    [HandlerFunctions(CostAllocationsReportHandler)]
    PROCEDURE CostAllocationWhenPrintOnlyIfDetailIsFalse@53();
    BEGIN
      // Verify that Cost Allocations Report shows details of "Target Cost Type" and "Target Cost Center" when PrintOnlyIfDetails is false and Cost Allocation Target is not blank.
      Initialize;
      CostAllocRepForPrintOnlyDetails(FALSE);
    END;

    [Test]
    [HandlerFunctions(CostAllocationsReportHandler)]
    PROCEDURE CostAlloctionReportForBlankCostAllocationTarget@50();
    VAR
      CostAllocationSource@1001 : Record 1106;
      TypeOfID@1002 : 'Auto Generated,Custom';
    BEGIN
      // Verify that Cost Allocations Report does not shows details when PrintOnlyIfDetails is true and Cost Allocation Target is blank.
      Initialize;

      // Setup.
      LibraryCostAccounting.CreateAllocSource(CostAllocationSource,TypeOfID::"Auto Generated");
      LibraryVariableStorage.Enqueue(TRUE);  // Used in CostAllocationsReportHandler.

      // Exercise: Run report Cost Allocation with Target Cost Type.
      RunCostAllocationsReport(CostAllocationSource);

      // Verify: Verify Target Cost Type and Target Cost Center.
      LibraryReportDataset.LoadDataSetFile;
      Assert.IsFalse(LibraryReportDataset.GetNextRow,RowMustNotExist);
    END;

    [Test]
    [HandlerFunctions(CostCenterCostAcctgAnalysisReportHandler)]
    PROCEDURE CostAcctgAnalysisReportCostCenter@80();
    VAR
      CostJournalLine@1000 : ARRAY [7] OF Record 1101;
      CostJournalBatch@1003 : Record 1102;
      CostType@1004 : Record 1103;
      BalCostType@1005 : Record 1103;
      Count@1001 : Integer;
    BEGIN
      // To verify amount for all 7 Control Cost Center with respect to Cost Type No.

      // Setup : Create Multiple Cost Journal Line with New Cost Center.
      Initialize;
      CreateCostJournalBatch(CostJournalBatch);
      CreateCostTypeWithCC(BalCostType);
      FOR Count := 1 TO 7 DO BEGIN // As on Request page there is 7 Control.
        CreateCostTypeWithCC(CostType);
        LibraryCostAccounting.CreateCostJournalLineBasic(
          CostJournalLine[Count],CostJournalBatch."Journal Template Name",CostJournalBatch.Name,WORKDATE,CostType."No.",
          BalCostType."No.");
        LibraryVariableStorage.Enqueue(CostJournalLine[Count]."Cost Center Code");
      END;

      // Post-Setup : Post multiple Cost Journal Lines.
      PostCostJournalLines(CostJournalBatch."Journal Template Name",CostJournalBatch.Name);

      // Exercise : Run the Report with Filters Cost Center Code.
      RunCostAcctgAnalysisReport;

      // Verify : To check correct amount is displayed on report.
      LibraryReportDataset.LoadDataSetFile;
      FOR Count := 1 TO 7 DO
        VerifyCostAcctgAnalysisReportValue(
          CostJournalLine[Count].Amount,'Col' + FORMAT(Count),CostJournalLine[Count]."Cost Type No.");
    END;

    [Test]
    [HandlerFunctions(CostObjectCostAcctgAnalysisReportHandler)]
    PROCEDURE CostAcctgAnalysisReportCostObject@35();
    VAR
      CostJournalLine@1000 : ARRAY [7] OF Record 1101;
      CostJournalBatch@1004 : Record 1102;
      CostType@1003 : Record 1103;
      BalCostType@1001 : Record 1103;
      Count@1002 : Integer;
    BEGIN
      // To verify amount for all 7 Control Cost Object with respect to Cost Type No.

      // Setup : Create multiple Cost Journal Line with New Cost Object.
      Initialize;
      CreateCostJournalBatch(CostJournalBatch);
      CreateCostTypeWithCO(BalCostType);
      FOR Count := 1 TO 7 DO BEGIN // As on Request page there is 7 Control.
        CreateCostTypeWithCO(CostType);
        LibraryCostAccounting.CreateCostJournalLineBasic(
          CostJournalLine[Count],CostJournalBatch."Journal Template Name",CostJournalBatch.Name,WORKDATE,CostType."No.",
          BalCostType."No.");
        LibraryVariableStorage.Enqueue(CostJournalLine[Count]."Cost Object Code");
      END;

      // Post-Setup : Post multiple Cost Journal Line.
      PostCostJournalLines(CostJournalBatch."Journal Template Name",CostJournalBatch.Name);

      // Exercise : Run the Report with Filters Cost Object Code.
      RunCostAcctgAnalysisReport;

      // Verify : To check correct amount is displayed on report.
      LibraryReportDataset.LoadDataSetFile;
      FOR Count := 1 TO 7 DO
        VerifyCostAcctgAnalysisReportValue(
          CostJournalLine[Count].Amount,'Col' + FORMAT(Count),CostJournalLine[Count]."Cost Type No.");
    END;

    [Test]
    [HandlerFunctions(CostAcctgAnalysisReportHandler)]
    PROCEDURE CostAcctgAnalysisReportSuppressWithoutAmt@40();
    VAR
      CostType@1000 : Record 1103;
    BEGIN
      // To verify the working of Supress Without Amount.

      // Setup : Creating New Cost Type No. with New Cost Center.
      Initialize;
      CreateCostTypeWithCC(CostType);

      // Post-Setup
      EnqueueCostAcctgAnalysisReport(CostType."Cost Center Code",'',TRUE,CostType."No.");

      // Exercise : Run the Report with Filters Cost Center Code & Supress without Amt is True
      COMMIT;
      RunCostAcctgAnalysisReport;

      // Verify : Without Amount Cost Type No. Not Print On Report
      LibraryReportDataset.LoadDataSetFile;
      ASSERTERROR LibraryReportDataset.AssertElementWithValueExists('No_CostType',CostType."No.");
    END;

    [Test]
    [HandlerFunctions(CostAcctgAnalysisReportHandler)]
    PROCEDURE CostAcctgAnalysisReportOneCostCenter@49();
    VAR
      CostJournalLine@1000 : Record 1101;
    BEGIN
      // To verify amount for Cost Type with respect to one Cost Center.

      // Setup : Create and post Cost Journal Line with New Cost Center.
      Initialize;
      CreateCostJournalLine(CostJournalLine,WORKDATE);

      // Post-Setup
      EnqueueCostAcctgAnalysisReport(CostJournalLine."Cost Center Code",'',FALSE,CostJournalLine."Cost Type No.");
      LibraryCostAccounting.PostCostJournalLine(CostJournalLine);

      // Exercise : Run the Report with Filters Cost Center Code.
      RunCostAcctgAnalysisReport;

      // Verify : To check correct amount is displayed on report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyCostAcctgAnalysisReportValue(CostJournalLine.Amount,'Col1',CostJournalLine."Cost Type No.");
    END;

    [Test]
    [HandlerFunctions(CostAcctgAnalysisReportHandler)]
    PROCEDURE CostAcctgAnalysisReportOneCostObject@48();
    VAR
      CostJournalLine@1000 : Record 1101;
    BEGIN
      // To verify amount for Cost Type with respect to one Cost Object.

      // Setup : Create and post Cost Journal Line with New Cost Object.
      Initialize;
      CreateCostJournalLineCO(CostJournalLine,WORKDATE);

      // Post-Setup
      EnqueueCostAcctgAnalysisReport('',CostJournalLine."Cost Object Code",FALSE,CostJournalLine."Cost Type No.");
      LibraryCostAccounting.PostCostJournalLine(CostJournalLine);

      // Exercise : Run the Report with Filters Cost Object Code.
      RunCostAcctgAnalysisReport;

      // Verify : To check correct amount is displayed on report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyCostAcctgAnalysisReportValue(CostJournalLine.Amount,'Col1',CostJournalLine."Cost Type No.");
    END;

    [Test]
    [HandlerFunctions(UpdateCostAcctgDimensionsHandler)]
    PROCEDURE UpdateCostAcctgDimensionRep@99();
    VAR
      Dimension@1003 : Record 348;
    BEGIN
      // Unit Test Cases: REP1140- To verify that dimension value of cost center and cost object cannot be same.

      // Setup:
      Initialize;

      // Exercise: To create Dimension value and set it on request page using UpdateCostAcctgDimensionsHandler.
      LibraryDimension.CreateDimension(Dimension);
      LibraryVariableStorage.Enqueue(Dimension.Code);
      COMMIT; // COMMIT is required to run this report.
      ASSERTERROR REPORT.RUN(REPORT::"Update Cost Acctg. Dimensions");

      // Verify: To check that error is encountered on setting same Cost Center Dimension and Cost Object Dimension.
      Assert.ExpectedError(DimensionValueError);
    END;

    LOCAL PROCEDURE Initialize@1();
    BEGIN
      LibraryVariableStorage.Clear;
    END;

    LOCAL PROCEDURE AdjustPeriodAmounts@22(VAR AdjustedPreviousPeriodAmount@1000 : Decimal;VAR AdjustedCurrentPeriodAmount@1001 : Decimal;PreviousPeriodAmount@1002 : Decimal;CurrentPeriodAmount@1003 : Decimal;ShowAddCurr@1004 : Boolean;CostTypeNo@1006 : Code[20];PreviousPeriodPostingDate@1007 : Date;CurrentPeriodPostingDate@1008 : Date);
    VAR
      CostEntry@1005 : Record 1104;
    BEGIN
      IF NOT ShowAddCurr THEN BEGIN
        AdjustedPreviousPeriodAmount := PreviousPeriodAmount;
        AdjustedCurrentPeriodAmount := CurrentPeriodAmount;
        EXIT;
      END;

      CostEntry.SETRANGE("Cost Type No.",CostTypeNo);

      CostEntry.SETRANGE("Posting Date",PreviousPeriodPostingDate);
      CostEntry.FINDFIRST;
      AdjustedPreviousPeriodAmount := CostEntry."Additional-Currency Amount";

      CostEntry.SETRANGE("Posting Date",CurrentPeriodPostingDate);
      CostEntry.FINDFIRST;
      AdjustedCurrentPeriodAmount := CostEntry."Additional-Currency Amount";
    END;

    LOCAL PROCEDURE CalculateAmtOnCostEntry@73(CostEntry@1000 : Record 1104);
    BEGIN
      CostEntry.SETCURRENTKEY("Cost Type No.","Posting Date","Cost Center Code","Cost Object Code");
      CostEntry.SETRANGE("Cost Type No.",CostEntry."Cost Type No.");
      CostEntry.SETRANGE("Cost Center Code",CostEntry."Cost Center Code");
      CostEntry.SETRANGE("Cost Object Code",CostEntry."Cost Object Code");
      CostEntry.SETRANGE("Posting Date",CostEntry."Posting Date");
      CostEntry.CALCSUMS(Amount);
    END;

    [RequestPageHandler]
    PROCEDURE CostAcctgBalanceBudgetReportHandler@57(VAR CostAcctgBalanceBudget@1000 : TestRequestPage 1138);
    VAR
      StartDate@1002 : Variant;
      EndDate@1001 : Variant;
      CostTypeNo@1003 : Variant;
    BEGIN
      DequeueCostAcctgBalanceBudget(StartDate,EndDate,CostTypeNo);
      CostAcctgBalanceBudget.StartDate.SETVALUE(StartDate);
      CostAcctgBalanceBudget.EndDate.SETVALUE(EndDate);
      CostAcctgBalanceBudget.OnlyShowAccWithEntries.SETVALUE(FALSE);
      CostAcctgBalanceBudget.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CostAcctgJournalReportHandler@6(VAR CostAcctgJournal@1000 : TestRequestPage 1128);
    VAR
      WithErrorMessage@1002 : Variant;
      FileName@1001 : Variant;
    BEGIN
      DequeueCostAcctgJournalValues(WithErrorMessage,FileName);
      CostAcctgJournal.WithErrorMessages.SETVALUE(WithErrorMessage);
      CostAcctgJournal.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CostAcctgStmtBudgetReportHandler@78(VAR CostAcctgStatementBudget@1000 : TestRequestPage 1133);
    BEGIN
      CostAcctgStatementBudget.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CostAcctgStmtPerPeriodReportHandler@42(VAR CostAcctgStmtPerPeriod@1000 : TestRequestPage 1123);
    VAR
      ComparisonType@1001 : Variant;
      CostTypeNo@1003 : Variant;
      OnlyAccWithEntries@1004 : Variant;
      ShowAddCurr@1005 : Variant;
      StartDate@1002 : Variant;
    BEGIN
      DequeueCostAcctgStmtPerPeriodValues(ComparisonType,StartDate,OnlyAccWithEntries,ShowAddCurr,CostTypeNo);
      CostAcctgStmtPerPeriod.ComparisonType.SETVALUE(ComparisonType);
      CostAcctgStmtPerPeriod.StartDate.SETVALUE(StartDate);
      CostAcctgStmtPerPeriod.OnlyAccWithEntries.SETVALUE(OnlyAccWithEntries);
      CostAcctgStmtPerPeriod.ShowAddCurrency.SETVALUE(ShowAddCurr);
      CostAcctgStmtPerPeriod.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CostAcctgStmtReportHandler@23(VAR CostAcctgStmtReport@1000 : TestRequestPage 1126);
    VAR
      ShowAmountsInAddRepCurrency@1001 : Variant;
      CostTypeNo@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ShowAmountsInAddRepCurrency);
      LibraryVariableStorage.Dequeue(CostTypeNo);
      CostAcctgStmtReport.ShowAmountsInAddRepCurrency.SETVALUE(ShowAmountsInAddRepCurrency);
      CostAcctgStmtReport.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    LOCAL PROCEDURE CostAllocRepForPrintOnlyDetails@60(SkipalocSourceswithoutaloctgt@1000 : Boolean);
    VAR
      CostAllocationSource@1002 : Record 1106;
      CostAllocationTarget@1001 : Record 1107;
      CostCenter@1007 : Record 1112;
      AllocationType@1005 : Option;
      Base@1004 : Option;
      TypeOfID@1003 : 'Auto Generated,Custom';
    BEGIN
      // Setup.
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      LibraryCostAccounting.CreateAllocSource(CostAllocationSource,TypeOfID::"Auto Generated");
      LibraryCostAccounting.CreateAllocTarget(
        CostAllocationTarget,CostAllocationSource,LibraryRandom.RandDec(10,1),Base,AllocationType);
      CostAllocationTarget."Target Cost Center" := CostCenter.Code;
      CostAllocationTarget.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(SkipalocSourceswithoutaloctgt);

      // Exercise: Run report Cost Allocation with Target Cost Type.
      RunCostAllocationsReport(CostAllocationSource);

      // Verify: Verify Target Cost Type and "Target Cost Center".
      VerifyCostAllocationTarget(CostAllocationTarget);
    END;

    [RequestPageHandler]
    PROCEDURE CostAllocationsReportHandler@62(VAR CostAllocationsReport@1002 : TestRequestPage 1129);
    VAR
      SkipalocSourceswithoutaloctgt@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SkipalocSourceswithoutaloctgt);
      CostAllocationsReport.SkipalocSourceswithoutaloctgt.SETVALUE(SkipalocSourceswithoutaloctgt);
      CostAllocationsReport.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CostRegisterReportHandler@32(VAR CostRegistersReport@1000 : TestRequestPage 1144);
    VAR
      CostRegisterNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CostRegisterNo);
      CostRegistersReport.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CostTypeDetailsReportHandler@9(VAR CostTypeDetailsReport@1000 : TestRequestPage 1125);
    VAR
      ShowAmountsInAddRepCurrency@1001 : Variant;
      CostTypeNo@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ShowAmountsInAddRepCurrency);
      LibraryVariableStorage.Dequeue(CostTypeNo);
      CostTypeDetailsReport.ShowAmountsInAddRepCurrency.SETVALUE(ShowAmountsInAddRepCurrency);
      CostTypeDetailsReport.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CostCenterCostAcctgAnalysisReportHandler@33(VAR CostAcctgAnalysisReport@1000 : TestRequestPage 1127);
    VAR
      CostCenterCode@1002 : ARRAY [7] OF Variant;
      Count@1003 : Integer;
    BEGIN
      FOR Count := 1 TO 7 DO // As on Request page there is RequestControlValue Control
        LibraryVariableStorage.Dequeue(CostCenterCode[Count]);
      CostAcctgAnalysisReport.CostCenter1.SETVALUE(CostCenterCode[1]);
      CostAcctgAnalysisReport.CostCenter2.SETVALUE(CostCenterCode[2]);
      CostAcctgAnalysisReport.CostCenter3.SETVALUE(CostCenterCode[3]);
      CostAcctgAnalysisReport.CostCenter4.SETVALUE(CostCenterCode[4]);
      CostAcctgAnalysisReport.CostCenter5.SETVALUE(CostCenterCode[5]);
      CostAcctgAnalysisReport.CostCenter6.SETVALUE(CostCenterCode[6]);
      CostAcctgAnalysisReport.CostCenter7.SETVALUE(CostCenterCode[7]);
      CostAcctgAnalysisReport.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CostObjectCostAcctgAnalysisReportHandler@39(VAR CostAcctgAnalysisReport@1000 : TestRequestPage 1127);
    VAR
      CostObjectCode@1003 : ARRAY [7] OF Variant;
      Count@1010 : Integer;
    BEGIN
      FOR Count := 1 TO 7 DO // As On Request page there is RequestControlValue Control
        LibraryVariableStorage.Dequeue(CostObjectCode[Count]);
      CostAcctgAnalysisReport.CostObject1.SETVALUE(CostObjectCode[1]);
      CostAcctgAnalysisReport.CostObject2.SETVALUE(CostObjectCode[2]);
      CostAcctgAnalysisReport.CostObject3.SETVALUE(CostObjectCode[3]);
      CostAcctgAnalysisReport.CostObject4.SETVALUE(CostObjectCode[4]);
      CostAcctgAnalysisReport.CostObject5.SETVALUE(CostObjectCode[5]);
      CostAcctgAnalysisReport.CostObject6.SETVALUE(CostObjectCode[6]);
      CostAcctgAnalysisReport.CostObject7.SETVALUE(CostObjectCode[7]);
      CostAcctgAnalysisReport.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CostAcctgAnalysisReportHandler@47(VAR CostAcctgAnalysisReport@1000 : TestRequestPage 1127);
    VAR
      CostCenterCode@1003 : Variant;
      CostObjectCode@1002 : Variant;
      SuppressCostTypesWithoutAmount@1001 : Variant;
      CostTypeNo@1004 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CostCenterCode);
      LibraryVariableStorage.Dequeue(CostObjectCode);
      LibraryVariableStorage.Dequeue(SuppressCostTypesWithoutAmount);
      LibraryVariableStorage.Dequeue(CostTypeNo);
      CostAcctgAnalysisReport.CostCenter1.SETVALUE(CostCenterCode);
      CostAcctgAnalysisReport.CostObject1.SETVALUE(CostObjectCode);
      CostAcctgAnalysisReport.SuppressCostTypesWithoutAmount.SETVALUE(SuppressCostTypesWithoutAmount);
      CostAcctgAnalysisReport.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE UpdateCostAcctgDimensionsHandler@76(VAR UpdateCostAcctgDimensionsReqPage@1000 : TestRequestPage 1140);
    VAR
      Dimension@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Dimension);
      UpdateCostAcctgDimensionsReqPage.CostCenterDimension.SETVALUE(Dimension);
      UpdateCostAcctgDimensionsReqPage.CostObjectDimension.SETVALUE(Dimension);
    END;

    LOCAL PROCEDURE CreateCCAndCO@70(VAR CostCenter@1000 : Record 1112;VAR CostObject@1001 : Record 1113);
    BEGIN
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      LibraryCostAccounting.CreateCostObject(CostObject);
    END;

    LOCAL PROCEDURE CreateCostJournalLine@4(VAR CostJournalLine@1000 : Record 1101;PostingDate@1004 : Date);
    VAR
      BalCostType@1002 : Record 1103;
      CostJournalBatch@1001 : Record 1102;
      CostType@1003 : Record 1103;
    BEGIN
      GetCostJournalLineDetails(CostJournalBatch,CostType,BalCostType);
      LibraryCostAccounting.CreateCostJournalLineBasic(
        CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name,PostingDate,CostType."No.",BalCostType."No.");
    END;

    LOCAL PROCEDURE CreateCostTypeWithCC@13(VAR CostType@1000 : Record 1103);
    VAR
      CostCenter@1001 : Record 1112;
    BEGIN
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      CostType.VALIDATE("Cost Center Code",CostCenter.Code);
      CostType.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCostTypeWithCO@83(VAR CostType@1000 : Record 1103);
    VAR
      CostObject@1001 : Record 1113;
    BEGIN
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      LibraryCostAccounting.CreateCostObject(CostObject);
      CostType.VALIDATE("Cost Object Code",CostObject.Code);
      CostType.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCostJournalLineCO@38(VAR CostJournalLine@1000 : Record 1101;PostingDate@1004 : Date);
    VAR
      BalCostType@1002 : Record 1103;
      CostJournalBatch@1001 : Record 1102;
      CostType@1003 : Record 1103;
    BEGIN
      GetCostJournalLineDetailsCO(CostJournalBatch,CostType,BalCostType);
      LibraryCostAccounting.CreateCostJournalLineBasic(
        CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name,PostingDate,CostType."No.",BalCostType."No.");
    END;

    LOCAL PROCEDURE CreateCostJournalBatch@54(VAR CostJournalBatch@1000 : Record 1102);
    VAR
      CostJournalTemplate@1002 : Record 1100;
    BEGIN
      LibraryCostAccounting.CreateCostJournalTemplate(CostJournalTemplate);
      LibraryCostAccounting.CreateCostJournalBatch(CostJournalBatch,CostJournalTemplate.Name);
    END;

    LOCAL PROCEDURE DequeueCostAcctgJournalValues@75(VAR WithErrorMessage@1000 : Variant;VAR FileName@1001 : Variant);
    BEGIN
      LibraryVariableStorage.Dequeue(WithErrorMessage);
      LibraryVariableStorage.Dequeue(FileName);
    END;

    LOCAL PROCEDURE DequeueCostAcctgBalanceBudget@74(VAR StartDate@1004 : Variant;VAR EndDate@1001 : Variant;VAR FileName@1000 : Variant);
    BEGIN
      LibraryVariableStorage.Dequeue(StartDate);
      LibraryVariableStorage.Dequeue(EndDate);
      LibraryVariableStorage.Dequeue(FileName);
    END;

    LOCAL PROCEDURE DequeueCostAcctgStmtPerPeriodValues@10(VAR ComparisonType@1000 : Variant;VAR StartDate@1001 : Variant;VAR OnlyAccWithEntries@1003 : Variant;VAR ShowAddCurr@1004 : Variant;VAR CostTypeNo@1002 : Variant);
    BEGIN
      LibraryVariableStorage.Dequeue(ComparisonType);
      LibraryVariableStorage.Dequeue(StartDate);
      LibraryVariableStorage.Dequeue(OnlyAccWithEntries);
      LibraryVariableStorage.Dequeue(ShowAddCurr);
      LibraryVariableStorage.Dequeue(CostTypeNo);
    END;

    LOCAL PROCEDURE EnqueueCostAcctgJournalReport@71(WithErrorMessage@1001 : Boolean;FileName@1000 : Text[250]);
    BEGIN
      LibraryVariableStorage.Enqueue(WithErrorMessage);
      LibraryVariableStorage.Enqueue(FileName);
    END;

    LOCAL PROCEDURE EnqueueCostAcctgStmtPerPeriodValues@24(ComparisonType@1000 : Option;StartDate@1001 : Date;OnlyAccWithEntries@1004 : Variant;ShowAddCurr@1003 : Variant;CostTypeNo@1002 : Code[20];AmtType@1005 : Option);
    BEGIN
      LibraryVariableStorage.Enqueue(ComparisonType);
      LibraryVariableStorage.Enqueue(StartDate);
      LibraryVariableStorage.Enqueue(OnlyAccWithEntries);
      LibraryVariableStorage.Enqueue(ShowAddCurr);
      LibraryVariableStorage.Enqueue(CostTypeNo);
      LibraryVariableStorage.Enqueue(AmtType);
    END;

    LOCAL PROCEDURE EnqueueCostAcctgAnalysisReport@45(CostCenterCode@1000 : Code[20];CostObjectCode@1001 : Code[20];SuppressCostTypesWithoutAmount@1002 : Boolean;CostTypeNo@1003 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(CostCenterCode);
      LibraryVariableStorage.Enqueue(CostObjectCode);
      LibraryVariableStorage.Enqueue(SuppressCostTypesWithoutAmount);
      LibraryVariableStorage.Enqueue(CostTypeNo);
    END;

    LOCAL PROCEDURE EnqueueCostAcctgBalanceBudget@72(StartDate@1000 : Date;EndDate@1001 : Date;Code@1002 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(StartDate);
      LibraryVariableStorage.Enqueue(EndDate);
      LibraryVariableStorage.Enqueue(Code);
    END;

    LOCAL PROCEDURE EnqueueCostAcctgStmtRepNewPage@69(ShowAmountsInAddRepCurrency@1000 : Boolean;Code@1001 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(ShowAmountsInAddRepCurrency);
      LibraryVariableStorage.Enqueue(Code);
    END;

    LOCAL PROCEDURE GetCostJournalLineDetails@36(VAR CostJournalBatch@1001 : Record 1102;VAR CostType@1000 : Record 1103;VAR BalCostType@1002 : Record 1103);
    BEGIN
      CreateCostJournalBatch(CostJournalBatch);
      CreateCostTypeWithCC(CostType);
      CreateCostTypeWithCC(BalCostType);
    END;

    LOCAL PROCEDURE GetCostJournalLineDetailsCO@44(VAR CostJournalBatch@1001 : Record 1102;VAR CostType@1000 : Record 1103;VAR BalCostType@1002 : Record 1103);
    BEGIN
      CreateCostJournalBatch(CostJournalBatch);
      CreateCostTypeWithCO(CostType);
      CreateCostTypeWithCO(BalCostType);
    END;

    LOCAL PROCEDURE CreateMultipleJournalLines@3(VAR CostJournalBatch@1000 : Record 1102;VAR CostTypeNo@1004 : Code[20];VAR PreviousPeriodAmount@1007 : Decimal;VAR CurrentPeriodAmount@1008 : Decimal;PreviousPeriodPostingDate@1005 : Date;CurrentPeriodPostingDate@1006 : Date);
    VAR
      BalCostType@1010 : Record 1103;
      CostType@1009 : Record 1103;
      CurrentPeriodCostJournalLine@1003 : Record 1101;
      PreviousPeriodCostJournalLine@1002 : Record 1101;
    BEGIN
      GetCostJournalLineDetails(CostJournalBatch,CostType,BalCostType);
      LibraryCostAccounting.CreateCostJournalLineBasic(
        PreviousPeriodCostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name,PreviousPeriodPostingDate,
        CostType."No.",BalCostType."No.");
      LibraryCostAccounting.CreateCostJournalLineBasic(
        CurrentPeriodCostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name,CurrentPeriodPostingDate,
        CostType."No.",BalCostType."No.");

      CostTypeNo := CostType."No.";
      PreviousPeriodAmount := PreviousPeriodCostJournalLine.Amount;
      CurrentPeriodAmount := CurrentPeriodCostJournalLine.Amount;
    END;

    LOCAL PROCEDURE PostCostJournalLines@58(CostJournalTemplate@1000 : Code[20];CostJournalBatch@1001 : Code[20]);
    VAR
      CostJournalLine@1002 : Record 1101;
    BEGIN
      CostJournalLine.SETRANGE("Journal Template Name",CostJournalTemplate);
      CostJournalLine.SETRANGE("Journal Batch Name",CostJournalBatch);
      CostJournalLine.FINDFIRST;
      LibraryCostAccounting.PostCostJournalLine(CostJournalLine);
    END;

    LOCAL PROCEDURE RunCostAcctgBalanceBudgetReport@51(CostTypeNo@1000 : Code[20];BudgetFilter@1002 : Code[10];CostCenterFilter@1003 : Code[20]);
    VAR
      CostType@1004 : Record 1103;
    BEGIN
      COMMIT;
      CostType.SETRANGE("No.",CostTypeNo);
      CostType.SETRANGE(Type,CostType.Type::"Cost Type");
      CostType.SETRANGE("Budget Filter",BudgetFilter);
      CostType.SETRANGE("Cost Center Filter",CostCenterFilter);
      REPORT.RUN(REPORT::"Cost Acctg. Balance/Budget",TRUE,FALSE,CostType);
    END;

    LOCAL PROCEDURE RunCostAcctgJournalReport@27(CostJournalLine@1000 : Record 1101);
    BEGIN
      COMMIT;
      CostJournalLine.SETRANGE("Document No.",CostJournalLine."Document No.");
      REPORT.RUN(REPORT::"Cost Acctg. Journal",TRUE,FALSE,CostJournalLine);
    END;

    LOCAL PROCEDURE RunCostAcctgStmtBudgetReport@79(CostEntry@1001 : Record 1104);
    VAR
      CostType@1000 : Record 1103;
    BEGIN
      CostType.SETRANGE("No.",CostEntry."Cost Type No.");
      CostType.SETRANGE("Date Filter",CostEntry."Posting Date");
      CostType.SETRANGE("Cost Center Filter",CostEntry."Cost Center Code");
      CostType.SETRANGE("Cost Object Filter",CostEntry."Cost Object Code");
      REPORT.RUN(REPORT::"Cost Acctg. Statement/Budget",TRUE,FALSE,CostType);
    END;

    LOCAL PROCEDURE RunCostAcctgStmtPerPeriodReport@26(CostTypeNo@1000 : Code[20]);
    VAR
      CostType@1002 : Record 1103;
    BEGIN
      COMMIT;
      CostType.SETFILTER("No.",CostTypeNo);
      CostType.SETRANGE(Type,CostType.Type::"Cost Type");
      REPORT.RUN(REPORT::"Cost Acctg. Stmt. per Period",TRUE,FALSE,CostType);
    END;

    LOCAL PROCEDURE RunCostAcctgStmtReport@43(CostTypeNo@1001 : Code[20]);
    VAR
      CostType@1000 : Record 1103;
    BEGIN
      COMMIT; // COMMIT is required to run this report.
      CostType.SETRANGE("No.",CostTypeNo);
      CostType.SETRANGE("Date Filter",WORKDATE);
      REPORT.RUN(REPORT::"Cost Acctg. Statement",TRUE,FALSE,CostType);
    END;

    LOCAL PROCEDURE RunCostAllocationsReport@56(CostAllocationSource@1000 : Record 1106);
    BEGIN
      COMMIT;
      CostAllocationSource.SETRANGE(ID,CostAllocationSource.ID);
      REPORT.RUN(REPORT::"Cost Allocations",TRUE,FALSE,CostAllocationSource);
    END;

    LOCAL PROCEDURE RunCostRegisterReport@19(CostRegister@1001 : Record 1105);
    BEGIN
      REPORT.RUN(REPORT::"Cost Register",TRUE,FALSE,CostRegister);
    END;

    LOCAL PROCEDURE RunCostTypeDetailsReport@37(CostTypeNo@1001 : Code[20]);
    VAR
      CostType@1000 : Record 1103;
    BEGIN
      CostType.SETRANGE("No.",CostTypeNo);
      REPORT.RUN(REPORT::"Cost Types Details",TRUE,FALSE,CostType);
    END;

    LOCAL PROCEDURE RunCostAcctgAnalysisReport@81();
    VAR
      CostType@1000 : Record 1103;
    BEGIN
      REPORT.RUN(REPORT::"Cost Acctg. Analysis",TRUE,FALSE,CostType);
    END;

    LOCAL PROCEDURE SetupAddRepCurr@25(VAR Currency@1003 : Record 4;ShowAddCurr@1000 : Boolean) OldAddCurr : Code[10];
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      OldAddCurr := GeneralLedgerSetup."Additional Reporting Currency";
      IF NOT ShowAddCurr THEN
        EXIT;
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      UpdateResidualAccountCurrency(Currency);
      UpdateAddnlReportingCurrency(Currency.Code);
    END;

    LOCAL PROCEDURE UpdateAddnlReportingCurrency@29(NewAdditionalReportingCurrency@1002 : Code[10]);
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup."Additional Reporting Currency" := NewAdditionalReportingCurrency; // VALIDATE trigger includes unneeded checks.
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateResidualAccountCurrency@30(VAR Currency@1000 : Record 4);
    VAR
      GLAccount@1002 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      Currency.VALIDATE("Residual Gains Account",GLAccount."No.");
      Currency.VALIDATE("Residual Losses Account",GLAccount."No.");
      Currency.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCCAndCOOnCostJournalLine@94(VAR CostJournalLine@1001 : Record 1101;CostCenterCode@1000 : Code[20];CostObjectCode@1002 : Code[20]);
    BEGIN
      CostJournalLine."Cost Center Code" := CostCenterCode;
      CostJournalLine."Cost Object Code" := CostObjectCode;
      CostJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBalCCAndCOOnCostJournalLine@95(VAR CostJournalLine@1001 : Record 1101;BalCostCenterCode@1000 : Code[20];BalCostObjectCode@1002 : Code[20]);
    BEGIN
      CostJournalLine."Bal. Cost Center Code" := BalCostCenterCode;
      CostJournalLine."Bal. Cost Object Code" := BalCostObjectCode;
      CostJournalLine.MODIFY;
    END;

    LOCAL PROCEDURE ValidateCostAcctgStmtBudgetReport@82(CostEntry@1000 : Record 1104);
    BEGIN
      // Test Cost Accounting Statement Budget Report.

      // Setup.
      RunCostAcctgStmtBudgetReport(CostEntry);

      // Exercise.
      CalculateAmtOnCostEntry(CostEntry);

      // Verify.
      VerifyCostAcctgStmtBudgetReport(CostEntry);
    END;

    LOCAL PROCEDURE ValidateCostAcctgStmtPerPeriodRep@15(ComparisonType@1002 : Option;PeriodLength@1004 : DateFormula;OnlyAccWithEntries@1006 : Boolean;ShowAddCurr@1008 : Boolean;AmtType@1014 : Option);
    VAR
      Currency@1007 : Record 4;
      CostJournalBatch@1013 : Record 1102;
      CostTypeNo@1005 : Code[10];
      CurrentPeriodAmount@1001 : Decimal;
      CurrentPeriodPostingDate@1012 : Date;
      ExpectedCurrPeriodAmount@1009 : Decimal;
      ExpectedPrevPeriodAmount@1010 : Decimal;
      OldAddCurr@1011 : Code[10];
      PreviousPeriodAmount@1000 : Decimal;
      PreviousPeriodPostingDate@1003 : Date;
    BEGIN
      // Post an entry for a cost type in 2 consecutive years and then run the report for those periods.
      // Check the values for each report column for the row containing the Cost Type used.
      Initialize;

      // Pre-Setup
      PreviousPeriodPostingDate := CALCDATE(STRSUBSTNO('<%1Y>',LibraryRandom.RandInt(10)),WORKDATE);
      CurrentPeriodPostingDate := CALCDATE(PeriodLength,PreviousPeriodPostingDate);
      OldAddCurr := SetupAddRepCurr(Currency,ShowAddCurr);

      // Setup
      CreateMultipleJournalLines(
        CostJournalBatch,CostTypeNo,PreviousPeriodAmount,CurrentPeriodAmount,PreviousPeriodPostingDate,CurrentPeriodPostingDate);
      PostCostJournalLines(CostJournalBatch."Journal Template Name",CostJournalBatch.Name);

      // Post-Setup
      EnqueueCostAcctgStmtPerPeriodValues(ComparisonType,CurrentPeriodPostingDate,OnlyAccWithEntries,ShowAddCurr,CostTypeNo,AmtType);

      // Exercise
      RunCostAcctgStmtPerPeriodReport(CostTypeNo);

      // Post-Exercise
      AdjustPeriodAmounts(
        ExpectedPrevPeriodAmount,ExpectedCurrPeriodAmount,PreviousPeriodAmount,CurrentPeriodAmount,ShowAddCurr,CostTypeNo,
        PreviousPeriodPostingDate,CurrentPeriodPostingDate);

      // Verify
      VerifyCostAcctgStmtPerPeriodRep(ExpectedPrevPeriodAmount,ExpectedCurrPeriodAmount,CostTypeNo);

      // Tear-Down
      UpdateAddnlReportingCurrency(OldAddCurr);
    END;

    LOCAL PROCEDURE VerifyBudgetAmount@87(VAR CostType@1002 : Record 1103);
    BEGIN
      CostType.FINDFIRST;
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_CostType',CostType."No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundError,'No_CostType',CostType."No."));
      CostType.CALCFIELDS("Budget Amount");
      LibraryReportDataset.AssertCurrentRowValue('BudgetAmount_CostType',CostType."Budget Amount");
    END;

    LOCAL PROCEDURE VerifyCostAcctgBalanceBudgetReport@64(BudgetAmount@1001 : Decimal;CostTypeNo@1000 : Code[20]);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_CostType',CostTypeNo);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundError,'No_CostType',CostTypeNo));
      LibraryReportDataset.AssertCurrentRowValue('YtdBud',BudgetAmount);
    END;

    LOCAL PROCEDURE VerifyCostAcctgJournalReport@17(ExpectedAmount@1001 : Decimal;CostTypeNo@1000 : Code[20]);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('CostTypeNo_CostJourLine',CostTypeNo);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundError,'CostTypeNo_CostJourLine',CostTypeNo));
      LibraryReportDataset.AssertCurrentRowValue('Amount_CostJourLine',ExpectedAmount);
    END;

    LOCAL PROCEDURE VerifyCostAcctgStmtBudgetReport@85(CostEntry@1001 : Record 1104);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_CostType',CostEntry."Cost Type No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundError,'No_CostType',CostEntry."Cost Type No."));
      LibraryReportDataset.AssertCurrentRowValue('NetChange_CostType',CostEntry.Amount);
    END;

    LOCAL PROCEDURE VerifyCostAcctgStmtPerPeriodRep@16(PreviousYearAmount@1001 : Decimal;CurrentYearAmount@1002 : Decimal;CostTypeNo@1000 : Code[20]);
    VAR
      ExpectedPercentage@1003 : Decimal;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_CostType',CostTypeNo);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundError,'No_CostType',CostTypeNo));
      LibraryReportDataset.AssertCurrentRowValue('DiffAmount',CurrentYearAmount);
      ExpectedPercentage := 100 * ((PreviousYearAmount + CurrentYearAmount) / PreviousYearAmount);
      LibraryReportDataset.AssertCurrentRowValue('Pct',ROUND(ExpectedPercentage,0.1));
    END;

    LOCAL PROCEDURE VerifyCostAcctgStmtReport@52(ExpectedAmount@1003 : Decimal;CostTypeNo@1002 : Code[20];NetChangeAmount@1000 : Text[1024]);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_CostType',CostTypeNo);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundError,'No_CostType',CostTypeNo));
      LibraryReportDataset.AssertCurrentRowValue(NetChangeAmount,ExpectedAmount);
    END;

    LOCAL PROCEDURE VerifyCostAllocationTarget@59(CostAllocationTarget@1001 : Record 1107);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;

      // Verify Source Allocation ID.
      LibraryReportDataset.AssertElementWithValueExists('SourceID_CostAllocSource',CostAllocationTarget.ID);

      // Verify Target Cost Type and Target Cost Center.
      LibraryReportDataset.SetRange('SourceID_CostAllocSource',CostAllocationTarget.ID);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundError,'SourceID_CostAllocSource',CostAllocationTarget.ID));
      LibraryReportDataset.AssertCurrentRowValue('TargetCostType_CostAllocTarget',CostAllocationTarget."Target Cost Type");
      LibraryReportDataset.AssertCurrentRowValue('TargetCostCenter_CostAllocTarget',CostAllocationTarget."Target Cost Center");
    END;

    LOCAL PROCEDURE VerifyCostRegisterReport@18(FromCostEntryNo@1000 : Integer);
    VAR
      CostEntry@1002 : Record 1104;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      CostEntry.SETRANGE("Entry No.",FromCostEntryNo);
      CostEntry.FINDFIRST;
      LibraryReportDataset.SetRange('DocNo_CostEntry',CostEntry."Document No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundError,'DocNo_CostEntry',CostEntry."Document No."));
      LibraryReportDataset.AssertCurrentRowValue('Amount_CostEntry',CostEntry.Amount);
    END;

    LOCAL PROCEDURE VerifyCostTypeDetailsReport@46(ExpectedAmount@1002 : Decimal;DebitAmount@1000 : Text[1024];Balance@1001 : Text[1024]);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('FmtPostingDate_CostEntry',FORMAT(WORKDATE));

      // Verify Debit Amount and Balance.
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundError,'FmtPostingDate_CostEntry',FORMAT(WORKDATE)));
      LibraryReportDataset.AssertCurrentRowValue(DebitAmount,ExpectedAmount);
      LibraryReportDataset.AssertCurrentRowValue(Balance,ExpectedAmount);
    END;

    LOCAL PROCEDURE VerifyCostAcctgAnalysisReportValue@84(ExpectedAmount@1001 : Decimal;ElementName@1002 : Text[250];CostTypeNo@1000 : Code[20]);
    BEGIN
      LibraryReportDataset.SetRange('No_CostType',CostTypeNo);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundError,'No_CostType',CostTypeNo));
      LibraryReportDataset.AssertCurrentRowValue(ElementName,ExpectedAmount);
    END;

    LOCAL PROCEDURE VerifyExpectedErrorOnCostAcctBalanceBudgetRep@117(EndDate@1000 : Date;ExpectedError@1001 : Text[250]);
    BEGIN
      // Setup:
      Initialize;

      // Exercise: To set values on Request Page of Cost Acctg. Balance/Budget Report
      EnqueueCostAcctgBalanceBudget(WORKDATE,EndDate,LibraryUtility.GenerateGUID);
      COMMIT;   // COMMIT is required to run this report.
      ASSERTERROR REPORT.RUN(REPORT::"Cost Acctg. Balance/Budget");

      // Verify: To verify that error occurs.
      Assert.ExpectedError(ExpectedError);
    END;

    LOCAL PROCEDURE VerifyExpectedErrorOnCostAcctgJournalRep@67(CostJournalLine@1000 : Record 1101;ExpectedError@1001 : Text[250]);
    BEGIN
      // Post-Exercise: Set the values on request page through CostAcctgJournalReportHandler and report.
      EnqueueCostAcctgJournalReport(TRUE,LibraryUtility.GenerateGUID);
      RunCostAcctgJournalReport(CostJournalLine);

      // Verify: To check that expected error is displayed on report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ErrorlineNumber',ExpectedError);
    END;

    LOCAL PROCEDURE VerifyErrorOnCostAcctgJournalRepForSpecificCostType@77(Type@1003 : Option;Blocked@1004 : Boolean;ExpectedError@1000 : Text[250]);
    VAR
      CostType@1002 : Record 1103;
      CostJournalLine@1001 : Record 1101;
    BEGIN
      // Setup:
      Initialize;

      // Exercise: Create Cost Journal Line with specific Cost Type
      LibraryCostAccounting.CreateCostTypeNoGLRange(CostType);
      CostType.Type := Type;
      CostType.Blocked := Blocked;
      CostType.MODIFY;
      CreateCostJournalLine(CostJournalLine,WORKDATE);
      CostJournalLine."Cost Type No." := CostType."No.";
      CostJournalLine.MODIFY;

      // Verify: To verify that expected error is diplayed on the report.
      VerifyExpectedErrorOnCostAcctgJournalRep(CostJournalLine,ExpectedError);
    END;

    BEGIN
    {
      // [FEATURE] [Cost Accounting]
      Covers Test Cases for WI - 243045
      -----------------------------------------------------------
      Test Function Name                                Report    TFS ID
      -----------------------------------------------------------
      CostAcctgStmtRep                                  REP1126   258818
      CostAcctgStmtRepForAddRepCurrency                 REP1126   258818
      CostTypeDetailsRep                                REP1125   258817
      CostTypeDetailsRepForAddRepCurrency               REP1125   258817
      ___________________________________________________________

      Covers Test Cases for WI - 303110
      -----------------------------------------------------------
      Test Function Name                                Report
      -----------------------------------------------------------
      CostAcctgBalanceBudgetRep                         REP1138
      CostAcctgJournalRep                               REP1128
      CostAcctgStmtPerPeriodRepAccWithEntries           REPP123
      CostAcctgStmtPerPeriodRepAddCurrency              REP1123
      CostAcctgStmtPerPeriodRepLastHalfYear             REP1123
      CostAcctgStmtPerPeriodRepLastMonth                REP1123
      CostAcctgStmtPerPeriodRepLastYear                 REP1123
      CostAcctgStmtPerPeriodRepLastQuarter              REP1123
      ___________________________________________________________

      Covers Test Cases for WI - TFS ID-313043
      -----------------------------------------------------------
      Test Function Name                                Report
      -----------------------------------------------------------
      CostAcctgAnalysisReportCostCenter                 REP1127
      CostAcctgAnalysisReportCostObject                 REP1127
      CostAcctgAnalysisReportSuppressWithoutAmt         REP1127
      CostAcctgAnalysisReportOneCostCenter              REP1127
      CostAcctgAnalysisReportOneCostObject              REP1127

      Covers Test Cases for WI - 313044
      -----------------------------------------------------------
      Test Function Name                                Report

      -----------------------------------------------------------
      CostAllocationWhenPrintOnlyIfDetailIsTrue         REP1129
      CostAllocationWhenPrintOnlyIfDetailIsFalse        REP1129
      CostAlloctionReportForBlankCostAllocationTarget   REP1129
       Covers Test Cases for WI - 312558
      -----------------------------------------------------------
      Test Function Name                        Report
      -----------------------------------------------------------
      CostAcctgBalanceBudgetZeroEndDate          REP1138
      CostAcctgBalanceBudgetStartEndDate         REP1138
      CostAcctgStmtPerPeriodNetChangeRepLastYear REP1123
      UpdateCostAcctgDimensionRep                REP1140
      CostAcctgJournalRepBlankPostingDate        REP1128
      CostAcctgJournalRepBlankDocumentNo         REP1128
      CostAcctgJournalRepBlankBalCostType        REP1128
      CostAcctgJournalRepBlankCCAndCO            REP1128
      CostAcctgJournalRepNotBlankCCAndCO         REP1128
      CostAcctgJournalRepBlankBalCCAndCO         REP1128
      CostAcctgJournalRepNotBlankBalCCAndCO      REP1128
      CostAcctgJournalRepNotCostType             REP1128
      CostAcctgJournalRepBlockedCostType         REP1128

      Covers Test Cases for WI - 313045
      ------------------------------------------------------------------
      Test Function Name                                       Report
      ------------------------------------------------------------------
      CostAcctgStmtBudgetReportBlankCO                         REP1133
      CostAcctgStmtBudgetReportBlankCC                         REP1133
      CostAcctgStmtBudgetReportBudgetAmtNotEqualToZero         REP1133
    }
    END.
  }
}

