OBJECT Codeunit 144060 eTDS -Transactions
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyInformation@1500005 : Record 79;
      GLSetup@1500001 : Record 98;
      ServiceTaxWithTDSHelper@1500010 : Codeunit 143005;
      ServiceTaxAsExciseHelper@1500003 : Codeunit 143003;
      LibraryERM@1500012 : Codeunit 131300;
      LibraryPurchase@1500002 : Codeunit 130512;
      LibraryRandom@1500013 : Codeunit 130440;
      LibraryTDS@1500000 : Codeunit 143000;
      Assert@1500014 : Codeunit 130000;
      LibrarySetupStorage@1500016 : Codeunit 131009;
      LibraryVariableStorage@1500006 : Codeunit 131004;
      AmountErr@1500009 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=%1 is incorrect in %2.';
      LibraryUtility@1500007 : Codeunit 131000;
      LibraryTCS@1500008 : Codeunit 143008;
      LibrarySales@1500018 : Codeunit 130509;
      isInitialized@1500011 : Boolean;
      TDSValueErr@1500004 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=The TDS Amounts %1 is incorrect in %2.';
      CreditAmountErr@1500015 : TextConst '@@@="%1 and %2 = Expected Amount and Actual Amount";ENU=The expected value is %1 and the actual value is %2.';

    [Test]
    PROCEDURE VerifyGeneralJournalWithTDSDifferentEffectiveDates@1500002();
    VAR
      TdsNatureOfDeduction@1500004 : Record 13726;
      NodNocHeader@1500005 : Record 13786;
      TDSSetup@1500008 : Record 13728;
      TDSSetup2@1500007 : Record 13728;
      GenJournalLine@1500002 : Record 81;
      GenJournalLine2@1500003 : Record 81;
      ExpectedGenJnlLine@1500000 : Record 81;
      ExpectedGenJnlLine2@1500009 : Record 81;
      Amount@1500006 : Decimal;
    BEGIN
      // [SCENARIO 64542] the program is calculating related amount successfully in the General Jounrals in case of setting different rates for same NOD with different effective dates
      // [FEATURE] [General Journals]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup with Different Effective Date For General Journals
      InitializeSetupAndTDSWithDifferentEffectiveDate(TdsNatureOfDeduction,NodNocHeader,TDSSetup,TDSSetup2);
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create General Journal including TDS and calculated expected journal lines with TDS calculation
      CreateMultiGeneralJournalLines(GenJournalLine,GenJournalLine2,NodNocHeader,TdsNatureOfDeduction,Amount);
      CalcTDSAmountsforJournalLine(ExpectedGenJnlLine,TDSSetup,Amount);
      CalcTDSAmountsforJournalLine(ExpectedGenJnlLine2,TDSSetup2,Amount);

      // [THEN] General Journal Lines are calculated  using tds setup
      VerifyGeneralJournalLines(ExpectedGenJnlLine,ExpectedGenJnlLine2,GenJournalLine,GenJournalLine2);
    END;

    [Test]
    PROCEDURE VerifyPurchaseJournalWithTDSDifferentEffectiveDates@1500010();
    VAR
      TdsNatureOfDeduction@1500007 : Record 13726;
      NoDNocHeader@1500008 : Record 13786;
      TDSSetup@1500004 : Record 13728;
      TDSSetup2@1500005 : Record 13728;
      GenJournalTemplate@1500003 : Record 80;
      GenJournalLine@1500009 : Record 81;
      GenJournalLine2@1500000 : Record 81;
      ExpectedGenJnlLine@1500001 : Record 81;
      ExpectedGenJnlLine2@1500011 : Record 81;
      Amount@1500006 : Decimal;
    BEGIN
      // [SCENARIO 64542] the program is calculating TDS related amount successfully in the Purchase Jounrals in case of setting different rates for same NOD with different effective dates
      // [FEATURE] [Purchase Journals]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup with Different Effective Date For Purchase Journals
      InitializeSetupAndTDSWithDifferentEffectiveDate(TdsNatureOfDeduction,NoDNocHeader,TDSSetup,TDSSetup2);
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Created Purchase Journal including TDS and calculated the expected TDS amounts
      CreateJournalDocument(GenJournalLine,GenJournalLine2,GenJournalTemplate.Type::Purchases,
        NoDNocHeader."No.",Amount,TdsNatureOfDeduction.Code);
      CalcTDSAmountsforJournalLine(ExpectedGenJnlLine,TDSSetup,Amount);
      CalcTDSAmountsforJournalLine(ExpectedGenJnlLine2,TDSSetup2,Amount);

      // [THEN] Purchase Journal Lines are calculted  using tds setup
      VerifyGeneralJournalLines(ExpectedGenJnlLine,ExpectedGenJnlLine2,GenJournalLine,GenJournalLine2);
    END;

    [Test]
    PROCEDURE VerifyPaymentJournalWithTDSDifferentEffectiveDates@1500011();
    VAR
      TdsNatureOfDeduction@1500002 : Record 13726;
      NodNocHeader@1500005 : Record 13786;
      TDSSetup@1500004 : Record 13728;
      TDSSetup2@1500009 : Record 13728;
      GenJournalTemplate@1500003 : Record 80;
      GenJournalLine@1500000 : Record 81;
      GenJournalLine2@1500008 : Record 81;
      ExpectedGenJnlLine@1500001 : Record 81;
      ExpectedGenJnlLine2@1500011 : Record 81;
      Amount@1500006 : Decimal;
    BEGIN
      // [SCENARIO 64542] the program is calculating TDS related amount successfully in the Payment Jounrals in case of setting different rates for same NOD with different effective dates
      // [FEATURE] [Payment Journals]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup with Different Effective Date For Payment Journals
      InitializeSetupAndTDSWithDifferentEffectiveDate(TdsNatureOfDeduction,NodNocHeader,TDSSetup,TDSSetup2);
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create Payment Journal including TDS and calculated the expected tds amounts from the journal lines
      CreateJournalDocument(GenJournalLine,GenJournalLine2,GenJournalTemplate.Type::Payments,
        NodNocHeader."No.",Amount,TdsNatureOfDeduction.Code);
      CalcTDSAmountsforJournalLine(ExpectedGenJnlLine,TDSSetup,Amount);
      CalcTDSAmountsforJournalLine(ExpectedGenJnlLine2,TDSSetup2,Amount);

      // [THEN]Payment Jounral Lines are calculated  using tds setup
      VerifyGeneralJournalLines(ExpectedGenJnlLine,ExpectedGenJnlLine2,GenJournalLine,GenJournalLine2);
    END;

    [Test]
    PROCEDURE VerifyCashPaymentVoucherWithTDSDifferentEffectiveDates@1500013();
    VAR
      TdsNatureOfDeduction@1500008 : Record 13726;
      NodNocHeader@1500009 : Record 13786;
      TDSSetup@1500004 : Record 13728;
      TDSSetup2@1500005 : Record 13728;
      GenJournalLine@1500000 : Record 81;
      GenJournalLine2@1500007 : Record 81;
      ExpectedGenJnlLine@1500002 : Record 81;
      ExpectedGenJnlLine2@1500010 : Record 81;
      Amount@1500006 : Decimal;
      Subtype@1500001 : ' ,Cash Receipt Voucher,Cash Payment Voucher,Bank Receipt Voucher,Bank Payment Voucher,Contra Voucher,Journal Voucher';
    BEGIN
      // [SCENARIO 64542] the program is calculating TDS related amount successfully in the Cash Payment Jounrals in case of setting different rates for same NOD with different effective dates
      // [FEATURE] [Cash Payment Voucher]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup with Different Effective Date For Cash Payment Voucher
      InitializeSetupAndTDSWithDifferentEffectiveDate(TdsNatureOfDeduction,NodNocHeader,TDSSetup,TDSSetup2);
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create Cash Payment Voucher Including TDS and calculated the expected tds amounts in jounral lines
      CreateMultiJournalLinesInVoucher(
        GenJournalLine,GenJournalLine2,NodNocHeader,Amount,TdsNatureOfDeduction.Code,Subtype::"Cash Payment Voucher");
      CalcTDSAmountsforJournalLine(ExpectedGenJnlLine,TDSSetup,Amount);
      CalcTDSAmountsforJournalLine(ExpectedGenJnlLine2,TDSSetup2,Amount);

      // [THEN] Cash Payment Voucher is calculated  using  tds setup
      VerifyGeneralJournalLines(ExpectedGenJnlLine,ExpectedGenJnlLine2,GenJournalLine,GenJournalLine2);
    END;

    [Test]
    PROCEDURE VerifyBankPaymentVoucherWithTDSDifferentEffectiveDates@1500012();
    VAR
      TdsNatureOfDeduction@1500008 : Record 13726;
      NodNocHeader@1500007 : Record 13786;
      TDSSetup@1500004 : Record 13728;
      TDSSetup2@1500009 : Record 13728;
      GenJournalLine@1500000 : Record 81;
      GenJournalLine2@1500005 : Record 81;
      ExpectedGenJnlLine@1500002 : Record 81;
      ExpectedGenJnlLine2@1500010 : Record 81;
      Amount@1500006 : Decimal;
      Subtype@1500001 : ' ,Cash Receipt Voucher,Cash Payment Voucher,Bank Receipt Voucher,Bank Payment Voucher,Contra Voucher,Journal Voucher';
    BEGIN
      // [SCENARIO 64542] the program is calculating TDS related amount successfully in the Bank Payment Jounrals in case of setting different rates for same NOD with different effective dates
      // [FEATURE] [Bank Payment Voucher]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup with Different Effective Date For Bank Payment Voucher
      InitializeSetupAndTDSWithDifferentEffectiveDate(TdsNatureOfDeduction,NodNocHeader,TDSSetup,TDSSetup2);
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create Bank Payment Voucher and calculated the expected Journal lines with TDS Amounts
      CreateMultiJournalLinesInVoucher(
        GenJournalLine,GenJournalLine2,NodNocHeader,Amount,TdsNatureOfDeduction.Code,Subtype::"Bank Payment Voucher");
      CalcTDSAmountsforJournalLine(ExpectedGenJnlLine,TDSSetup,Amount);
      CalcTDSAmountsforJournalLine(ExpectedGenJnlLine2,TDSSetup2,Amount);

      // [THEN] Bank Payment Voucher is calculated using tds setup
      VerifyGeneralJournalLines(ExpectedGenJnlLine,ExpectedGenJnlLine2,GenJournalLine,GenJournalLine2);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseOrderItem@1500019();
    VAR
      TdsNatureOfDeduction@1500007 : Record 13726;
      NodNocHeader@1500008 : Record 13786;
      PurchaseHeader@1500000 : Record 38;
      TDSSetup@1500005 : Record 13728;
      PurchaseLine@1500001 : Record 39;
      ExpectedTDSAmountsPurchaseLine@1500002 : Record 39;
    BEGIN
      // [SCENARIO 64543] Calculating TDS related amount successfully in the following forms in case of setting different rates for same NOD with different effective dates
      // [FEATURE] [Purchase Order]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup For Purchase Order
      InitializeSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,WORKDATE,TRUE,TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE,MonthlyCertificate=TRUE

      // [WHEN] Create Purchase order With Line Item Type Including TDS and calculated expected & actual tds in purchase lines
      CreatePurchaseDocWithTDS(
        PurchaseHeader,PurchaseLine,NodNocHeader."No.",PurchaseLine.Type::Item,TdsNatureOfDeduction.Code,WORKDATE);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      LibraryTDS.CalcExpectedTDSAmounts(ExpectedTDSAmountsPurchaseLine,PurchaseLine,TDSSetup);

      // [THEN] TDS Amounts calculated in Purchase Lines  using tds setup
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSAmountsPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseOrderItemWithEffectiveDate@1500022();
    VAR
      TdsNatureOfDeduction@1500008 : Record 13726;
      NodNocHeader@1500007 : Record 13786;
      PurchaseHeader@1500000 : Record 38;
      TDSSetup@1500005 : Record 13728;
      PurchaseLine@1500001 : Record 39;
      ExpectedTDSAmountsPurchaseLine@1500002 : Record 39;
    BEGIN
      // [SCENARIO 64543] Calculating TDS related amount successfully in the following forms in case of setting different rates for same NOD with different effective dates
      // [FEATURE] [Purchase Order]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup For Purchase Order
      InitializeSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,CALCDATE('<' + FORMAT(1) + 'D>',WORKDATE),TRUE,TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE,MonthlyCertificate=TRUE

      // [WHEN]Create Purchase Order With Line Item Type Including TDS with Effective Date and calculated the expected tds amounts
      CreatePurchaseDocWithTDS(
        PurchaseHeader,PurchaseLine,NodNocHeader."No.",PurchaseLine.Type::Item,TdsNatureOfDeduction.Code,
        CALCDATE('<' + FORMAT(1) + 'D>',WORKDATE));
      PurchaseLine.CalculateTDS(PurchaseHeader);
      LibraryTDS.CalcExpectedTDSAmounts(ExpectedTDSAmountsPurchaseLine,PurchaseLine,TDSSetup);

      // [THEN] TDS Amounts calculated in Purchase Lines   using  tds setup
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSAmountsPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseOrderGLAcc@1500026();
    VAR
      TdsNatureOfDeduction@1500007 : Record 13726;
      NodNocHeader@1500006 : Record 13786;
      TDSSetup@1500005 : Record 13728;
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      ExpectedTDSAmountsPurchaseLine@1500002 : Record 39;
    BEGIN
      // [SCENARIO 64543] Calculating TDS related amount successfully in the following forms in case of setting different rates for same NOD with different effective dates
      // [FEATURE] [Purchase Order]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup For Purchase Order
      InitializeSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,WORKDATE,TRUE,TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE,MonthlyCertificate=TRUE

      // [WHEN] Create Purchase order With Line G/L Account Type Including TDS and calculated expected tds amounts
      CreatePurchaseDocWithTDS(
        PurchaseHeader,PurchaseLine,NodNocHeader."No.",PurchaseLine.Type::"G/L Account",TdsNatureOfDeduction.Code,WORKDATE);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      LibraryTDS.CalcExpectedTDSAmounts(ExpectedTDSAmountsPurchaseLine,PurchaseLine,TDSSetup);

      // [THEN] TDS Amounts are calculated in Purchase Lines  using  tds setup
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSAmountsPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseOrderGLAccWithEffectiveDate@1500001();
    VAR
      TdsNatureOfDeduction@1500008 : Record 13726;
      NodNocHeader@1500007 : Record 13786;
      TDSSetup@1500005 : Record 13728;
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      ExpectedTDSAmountsPurchaseLine@1500002 : Record 39;
    BEGIN
      // [SCENARIO 64543] Calculating TDS related amount successfully in the Purchase Order forms in case of setting different rates for same NOD with different effective dates
      // [FEATURE] [Purchase Order]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup For Purchase Order
      InitializeSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,CALCDATE('<' + FORMAT(1) + 'D>',WORKDATE),TRUE,TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE,MonthlyCertificate=TRUE

      // [WHEN] Create Purchase order With Line G/L Account Type Including TDS with different effective date and ccalculating the expected TDS amounts
      CreatePurchaseDocWithTDS(
        PurchaseHeader,PurchaseLine,NodNocHeader."No.",PurchaseLine.Type::"G/L Account",TdsNatureOfDeduction.Code,
        CALCDATE('<' + FORMAT(1) + 'D>',WORKDATE));
      PurchaseLine.CalculateTDS(PurchaseHeader);
      LibraryTDS.CalcExpectedTDSAmounts(ExpectedTDSAmountsPurchaseLine,PurchaseLine,TDSSetup);

      // [THEN] TDS Amounts are calculated in Purchase Lines using tds setup
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSAmountsPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseOrderFixedAsset@1500007();
    VAR
      TdsNatureOfDeduction@1500007 : Record 13726;
      NodNocHeader@1500006 : Record 13786;
      TDSSetup@1500005 : Record 13728;
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      ExpectedTDSAmountsPurchaseLine@1500002 : Record 39;
    BEGIN
      // [SCENARIO 64543] Calculating TDS related amount successfully in the Purchase Order forms in case of setting different rates for same NOD with different effective dates
      // [FEATURE] [Purchase Order]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup For Purchase Order
      InitializeSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,WORKDATE,TRUE,TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE,MonthlyCertificate=TRUE

      // [WHEN] Create Purchase order With Line fixedasset  Type Including TDS and calculating the expected
      CreatePurchaseDocWithTDS(
        PurchaseHeader,PurchaseLine,NodNocHeader."No.",PurchaseLine.Type::"Fixed Asset",TdsNatureOfDeduction.Code,WORKDATE);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      LibraryTDS.CalcExpectedTDSAmounts(ExpectedTDSAmountsPurchaseLine,PurchaseLine,TDSSetup);

      // [THEN] TDS Amounts are calculated in Purchase Lines  using tds setup
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSAmountsPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseOrderFixedAssetWithEffectiveDate@1500006();
    VAR
      TdsNatureOfDeduction@1500008 : Record 13726;
      NodNocHeader@1500007 : Record 13786;
      TDSSetup@1500005 : Record 13728;
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      ExpectedTDSAmountsPurchaseLine@1500002 : Record 39;
    BEGIN
      // [SCENARIO 64543] Calculating TDS related amount successfully in the Purchase Order forms in case of setting different rates for same NOD with different effective dates
      // [FEATURE] [Purchase Order]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup For Purchase Order
      InitializeSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,CALCDATE('<' + FORMAT(1) + 'D>',WORKDATE),TRUE,TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE,MonthlyCertificate=TRUE

      // [WHEN] Create Purchase order With Line fixedasset  Type Including TDS with different effective date and calculated expected tds amounts
      CreatePurchaseDocWithTDS(
        PurchaseHeader,PurchaseLine,NodNocHeader."No.",PurchaseLine.Type::"Fixed Asset",TdsNatureOfDeduction.Code,
        CALCDATE('<' + FORMAT(1) + 'D>',WORKDATE));
      PurchaseLine.CalculateTDS(PurchaseHeader);
      LibraryTDS.CalcExpectedTDSAmounts(ExpectedTDSAmountsPurchaseLine,PurchaseLine,TDSSetup);

      // [THEN] TDS Amounts are calculated in Purchase Lines  using tds setup
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSAmountsPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseOrderChargeItem@1500005();
    VAR
      TdsNatureOfDeduction@1500006 : Record 13726;
      NodNocHeader@1500005 : Record 13786;
      TDSSetup@1500008 : Record 13728;
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      ExpectedTDSAmountsPurchaseLine@1500002 : Record 39;
    BEGIN
      // [SCENARIO 64543] Calculating TDS related amount successfully in the Purchase Order forms in case of setting different rates for same NOD with different effective dates
      // [FEATURE] [Purchase Order]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup For Purchase Order
      InitializeSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,WORKDATE,TRUE,TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE,MonthlyCertificate=TRUE

      // [WHEN] Create Purchase Order With Line Charge(Item) Type Including TDS and calculated the expected tds amounts
      CreatePurchaseDocWithTDS(
        PurchaseHeader,PurchaseLine,NodNocHeader."No.",PurchaseLine.Type::"Charge (Item)",TdsNatureOfDeduction.Code,WORKDATE);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      LibraryTDS.CalcExpectedTDSAmounts(ExpectedTDSAmountsPurchaseLine,PurchaseLine,TDSSetup);

      // [THEN] TDS Amounts are calculated in Purchase Lines  using tds setup
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSAmountsPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseOrderChargeItemWithEffectiveDate@1500014();
    VAR
      TdsNatureOfDeduction@1500008 : Record 13726;
      NodNocHeader@1500007 : Record 13786;
      TDSSetup@1500005 : Record 13728;
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      ExpectedTDSAmountsPurchaseLine@1500002 : Record 39;
    BEGIN
      // [SCENARIO 64543] Calculating TDS related amount successfully in the Purchase Order forms in case of setting different rates for same NOD with different effective dates
      // [FEATURE] [Purchase Order]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup For Purchase Order
      InitializeSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,CALCDATE('<' + FORMAT(1) + 'D>',WORKDATE),TRUE,TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE,MonthlyCertificate=TRUE

      // [WHEN] Create Purchase Order With Line Charge(Item) Type Including TDS with different effective date and calculated the expected tds amounts
      CreatePurchaseDocWithTDS(
        PurchaseHeader,PurchaseLine,NodNocHeader."No.",PurchaseLine.Type::"Charge (Item)",TdsNatureOfDeduction.Code,
        CALCDATE('<' + FORMAT(1) + 'D>',WORKDATE));
      PurchaseLine.CalculateTDS(PurchaseHeader);
      LibraryTDS.CalcExpectedTDSAmounts(ExpectedTDSAmountsPurchaseLine,PurchaseLine,TDSSetup);

      // [THEN] TDS Amounts are calculated in Purchase Lines  using tds setup
      VerifyTDSAmountsPurchaseDoc(ExpectedTDSAmountsPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    [HandlerFunctions(PurchOrderStatisticsMPH)]
    PROCEDURE VerifyTDSAmountPurchaseOrderWithPANAppliedVendorTDS@1500020();
    VAR
      AssesseeCode@1500006 : Record 13727;
      TdsNatureOfDeduction@1500007 : Record 13726;
      NodNocHeader@1500008 : Record 13786;
      PurchaseHeader@1500000 : Record 38;
      TDSSetup@1500005 : Record 13728;
      PurchaseLine@1500001 : Record 39;
      ExpectedTDSEntry@1500010 : Record 13729;
      DocumentNo@1500002 : Code[20];
      Amount@1500003 : Decimal;
    BEGIN
      // [SCENARIO 164274] TDS - Verify the TDS rate for deductee where no PAN details available and Concessional rate has been defined
      // [FEATURE] [Purchase Order]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup For Purchase Order
      InitializeSetupWithPANAppliedVendor(AssesseeCode,NodNocHeader,TdsNatureOfDeduction,TDSSetup,WORKDATE,FALSE,FALSE,FALSE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE,MonthlyCertificate=TRUE
      GetThresholdAmount(TdsNatureOfDeduction."TDS Group");
      Amount := LibraryRandom.RandDec(3000,2);

      // [WHEN] Create & Post Purchase order With Line Item Type Including TDS with PAN Apllied Vendor
      CreatePurchaseOrderWithContractor(PurchaseHeader,PurchaseLine,NodNocHeader."No.",
        PurchaseLine.Type::Item,'',Amount,TdsNatureOfDeduction.Code);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmountsWithThreshold(
        ExpectedTDSEntry,Amount,PurchaseHeader,TDSSetup);
      VerifyPurchaseOrderStatistics(PurchaseLine,ExpectedTDSEntry);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] G/L Entries are created  with vendor paybale account
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryforTDS(DocumentNo,Amount);
    END;

    [Test]
    [HandlerFunctions(PurchOrderStatisticsMPH)]
    PROCEDURE VerifyPurchaseOrderForForeignCurrencyVendorPANApplied@1500032();
    VAR
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      ExpectedTDSEntry@1500002 : Record 13729;
      TdsNatureOfDeduction@1500004 : Record 13726;
      NodNocHeader@1500005 : Record 13786;
      Vendor@1500012 : Record 23;
      CountryRegion@1500014 : Record 9;
      TDSSetup@1500015 : Record 13728;
      ExpectedTDSEntry2@1500007 : Record 13729;
      DocumentNo@1500006 : Code[20];
    BEGIN
      // [SCENARIO 164273] Verify the TDS rate for no PAN details available for deductee and Threshold limit is more
      // [FEATURE] [Purchase Order]

      // [GIVEN] Create Setup for NODNOC,Assessee Setup and Vendor with Country &foreign currency For Purchase Order
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateCountryRegion(CountryRegion);
      CreatePANAppliedVendorAndUpdateCurrency(Vendor,LibraryERM.CreateCurrencyWithRandomExchRates,CountryRegion.Code);
      CreateAssesseeandNODNOCSetup(
        NodNocHeader,TdsNatureOfDeduction,CountryRegion.Code,Vendor."No.",TDSSetup);
      GetThresholdAmount(TdsNatureOfDeduction."TDS Group");

      // [WHEN] Create & Post Purchase order With Line Item Type Including TDS with PAN Apllied Vendor
      CreatePurchaseOrderWithContractor(PurchaseHeader,PurchaseLine,NodNocHeader."No.",
        PurchaseLine.Type::Item,'',LibraryRandom.RandDec(2000,2),TdsNatureOfDeduction.Code);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmountsWithThreshold(ExpectedTDSEntry,PurchaseLine.Amount,PurchaseHeader,TDSSetup);
      VerifyPurchaseOrderStatistics(PurchaseLine,ExpectedTDSEntry);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] G/l entries and TDS Entries are created,which are calculated using tds setup defined
      ExpectedTDSEntry2.SETRANGE("Document No.",DocumentNo);
      ExpectedTDSEntry2.FINDLAST;
      VerifyGLEntryCount(DocumentNo,4);
      VerifyGLEntryforTDS(DocumentNo,ExpectedTDSEntry2."TDS Base Amount");
    END;

    [Test]
    [HandlerFunctions(PurchOrderStatisticsMPH)]
    PROCEDURE VerifyPurchaseOrderForForeignCurrencyVendorPANNOTAVBL@1500038();
    VAR
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      ExpectedTDSEntry@1500002 : Record 13729;
      TdsNatureOfDeduction@1500004 : Record 13726;
      NodNocHeader@1500005 : Record 13786;
      Vendor@1500012 : Record 23;
      CountryRegion@1500014 : Record 9;
      TDSSetup@1500015 : Record 13728;
      ExpectedTDSEntry2@1500007 : Record 13729;
      DocumentNo@1500006 : Code[20];
    BEGIN
      // [SCENARIO 164275] Verify the TDS rate for Non Resident where no PAN details available
      // [FEATURE] [Purchase Order]

      // [GIVEN] Create Setup for NODNOC,Assessee Setup and Vendor with Country For Purchase Order
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateCountryRegion(CountryRegion);
      CreatePANNotAVBLVendorAndUpdateCurrency(Vendor,LibraryERM.CreateCurrencyWithRandomExchRates,CountryRegion.Code);
      CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,CountryRegion.Code,Vendor."No.",TDSSetup);
      GetThresholdAmount(TdsNatureOfDeduction."TDS Group");

      // [WHEN] Create & Post Purchase order With Line Item Type Including TDS with no PAN details available Vendor
      CreatePurchaseOrderWithContractor(PurchaseHeader,PurchaseLine,NodNocHeader."No.",
        PurchaseLine.Type::Item,'',LibraryRandom.RandDec(2000,2),TdsNatureOfDeduction.Code);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmountsWithThreshold(ExpectedTDSEntry,PurchaseLine.Amount,PurchaseHeader,TDSSetup);
      VerifyPurchaseOrderStatistics(PurchaseLine,ExpectedTDSEntry);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] G/L Entries and tds entries are created which are calculated as per tds setup defined
      ExpectedTDSEntry2.SETRANGE("Document No.",DocumentNo);
      ExpectedTDSEntry2.FINDLAST;
      VerifyGLEntryCount(DocumentNo,4);
      VerifyGLEntryforTDS(DocumentNo,ExpectedTDSEntry2."TDS Base Amount");
    END;

    [Test]
    [HandlerFunctions(PurchOrderStatisticsMPH)]
    PROCEDURE VerifPurchaseOrderWithTDSExceedingThresholdAmount@1500016();
    VAR
      TdsNatureOfDeduction@1500007 : Record 13726;
      NodNocHeader@1500008 : Record 13786;
      TDSSetup@1500005 : Record 13728;
      DocumentNo@1500010 : Code[20];
      DocumentNo2@1500017 : Code[20];
      DocumentNo3@1500021 : Code[20];
    BEGIN
      // [SCENARIO 164262] Creating TDS entries correctly when set the Per Contract Value in TDS Group window-The second one exceeds the per contract value
      // [FEATURE] [Purchase Order]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup For Purchase Order
      InitializeSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,WORKDATE,FALSE,FALSE,FALSE);// ThresholdOverlook=false,SurchargeOverlook=false,MonthlyCertificate=false
      GetThresholdAmount(TdsNatureOfDeduction."TDS Group");

      // [WHEN]  Create & post Purchase order With Line Item Type Including TDS in three different amounts
      CreateandPostPurchaseDocument(NodNocHeader,TdsNatureOfDeduction,TDSSetup,DocumentNo,LibraryRandom.RandDec(500,1));
      CreateandPostPurchaseDocument(NodNocHeader,TdsNatureOfDeduction,TDSSetup,DocumentNo2,LibraryRandom.RandDec(50,2));
      CreateandPostPurchaseDocument(NodNocHeader,TdsNatureOfDeduction,TDSSetup,DocumentNo3,LibraryRandom.RandDec(1000,2));

      // [THEN] Vendor Ledger Entries And TDS Entries created,which are calculated as per tds setup defined
      VerifyVendorLedgerAndTDSEntry(DocumentNo);
      VerifyVendorLedgerAndTDSEntry(DocumentNo2);
      VerifyVendorLedgerAndTDSEntry(DocumentNo3);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseOrderItemWithConcessionalCode@1500015();
    VAR
      TdsNatureOfDeduction@1500007 : Record 13726;
      NodNocHeader@1500008 : Record 13786;
      PurchaseHeader@1500000 : Record 38;
      TDSSetup@1500005 : Record 13728;
      PurchaseLine@1500001 : Record 39;
      ExpectedTDSEntry@1500002 : Record 13729;
      Amount@1500003 : Decimal;
      DocumentNo@1500009 : Code[20];
    BEGIN
      // [SCENARIO 164260] Check if the program is creating TDS entries correctly when set the Concessional Value in TDS setup window with purchase order
      // [FEATURE] [Purchase Order]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup For Purchase Order
      InitializeSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,WORKDATE,TRUE,TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE,MonthlyCertificate=TRUE
      Amount := LibraryRandom.RandDec(1000,2);
      // [WHEN] Create & post Purchase order With Line Item Type Including TDS and calculated expected tds amounts
      CreatePurchaseOrderWithContractor(
        PurchaseHeader,PurchaseLine,NodNocHeader."No.",PurchaseLine.Type::Item,'',
        Amount,TdsNatureOfDeduction.Code);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      LibraryTDS.CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,Amount);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN]  G/L Entry, TDS Entries are created ,which are calculated as per tds setup defined
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryforTDS(DocumentNo,Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSRegisterForDocumentAndUpdateChallanRegister@1500021();
    VAR
      CountryRegion@1500000 : Record 9;
      Vendor@1500001 : Record 23;
      NodHeader@1500002 : Record 13786;
      TdsNatureOfDeduction@1500003 : Record 13726;
      TDSSetup@1500004 : Record 13728;
      TDSGroup@1500007 : Record 13731;
      GenJournalLine@1500005 : Record 81;
      GenJournalLine2@1500008 : Record 81;
      Amount@1500006 : Decimal;
      Amount1@1500012 : Decimal;
    BEGIN
      // [SCENARIO 164301] Check if the program is updating TDS Register details for a specific TDS Document number and updating Challan Register
      // [FEATURE] [General Journals]

      // [GIVEN] Create Setup for NODNOC,Assessee Setup, TDS Nature of Deduction and Vendor with Country &foreign currency For General Journals
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateCountryRegion(CountryRegion);
      CreatePANAppliedVendorAndUpdateCurrency(Vendor,LibraryERM.CreateCurrencyWithRandomExchRates,CountryRegion.Code);
      LibraryTDS.CreateAssesseeandNODNOCSetup(
        NodHeader,TdsNatureOfDeduction,TDSSetup,CountryRegion.Code,Vendor."No.",NodHeader.Type::Vendor,WORKDATE);
      UpdateAccountNumberInTDSGroup(TdsNatureOfDeduction."TDS Group",TDSGroup);
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create General Journals Invoice  with Foreign Currency and post it,Apply the TDS Payment through Journals and update the register details,challan register
      CreateAndPostGeneralLinesWithForeignCurrency(
        GenJournalLine,TdsNatureOfDeduction,Vendor."No.",-Amount,GenJournalLine."Document Type"::Invoice);
      CreateGeneralLinesWithPayTDS(GenJournalLine2,TDSGroup,Amount1);
      UpdateChallanDetailsAfterPayment(GenJournalLine."Document No.");
      UpdateChallanRegister(GenJournalLine2."Document No.");

      // [THEN] Calcualated General Journal TDS Amounts by using TDS Setup,Updated Challan register with pay tds document no. And verifying the details
      VerifyGLEntry(GenJournalLine2."Document Type",GenJournalLine2."Document No.",Amount1);
      VerifyChallanRegister(GenJournalLine2."Document No.");
    END;

    [Test]
    [HandlerFunctions(PurchOrderStatisticsMPH,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE VerifyTDSAfterPostingAdjustmentInPurchaseOrder@1500052();
    VAR
      TdsNatureOfDeduction@1500007 : Record 13726;
      GLEntry@1500020 : Record 17;
      TDSEntry@1500021 : Record 13729;
      NodNocHeader@1500006 : Record 13786;
      TDSSetup@1500005 : Record 13728;
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      PurchaseHeader2@1500008 : Record 38;
      PurchaseLine2@1500009 : Record 39;
      PurchaseHeader3@1500017 : Record 38;
      PurchaseLine3@1500016 : Record 39;
      TDSGroup@1500014 : Record 13731;
      ExpectedTDSEntry@1500002 : Record 13729;
      ExpectedTDSEntry2@1500010 : Record 13729;
      ExpectedTDSEntry3@1500018 : Record 13729;
      Amount@1500003 : Decimal;
      Amount1@1500012 : Decimal;
      DocumentNo@1500004 : Code[20];
      DocumentNo2@1500011 : Code[20];
      GLAccountNo@1500013 : Code[20];
      TDSAdjustmentDocNo@1500019 : Code[20];
      TDSAdjAmount@1500015 : Decimal;
    BEGIN
      // [SCENARIO 164355] Program does not allow to apply partial TDS\TCS Base Amount Applied Amount on TDS Adjustment Journal.It only allow for fully reversal.
      // [FEATURE] [Purchase Order]

      // [GIVEN] Created NODNOC ,TDS Nature of deduction,Assesse Code & TDS Setup For Purchase Order
      InitializeSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,WORKDATE,FALSE,TRUE,TRUE);// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE,MonthlyCertificate=TRUE
      Amount := LibraryRandom.RandDec(300,0);
      Amount1 := LibraryRandom.RandDec(1100,0);
      GLAccountNo := LibraryERM.CreateGLAccountWithPurchSetup;
      GetThresholdAmount(TdsNatureOfDeduction."TDS Group");
      TDSGroup.SETRANGE("TDS Group",TdsNatureOfDeduction."TDS Group");
      TDSGroup.FINDFIRST;
      TDSGroup.VALIDATE("Per Contract Value",0);
      TDSGroup.MODIFY(TRUE);

      // [WHEN] Create Purchase order With Line G/L Account Type Including TDS and calculated expected tds amounts
      CreatePurchaseOrderWithContractor(
        PurchaseHeader,PurchaseLine,NodNocHeader."No.",PurchaseLine.Type::"G/L Account",
        GLAccountNo,Amount,TdsNatureOfDeduction.Code);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmountsWithThreshold(ExpectedTDSEntry,Amount,PurchaseHeader,TDSSetup);
      VerifyPurchaseOrderStatistics(PurchaseLine,ExpectedTDSEntry);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      CreatePurchaseOrderWithContractor(
        PurchaseHeader2,PurchaseLine2,NodNocHeader."No.",PurchaseLine2.Type::"G/L Account",
        GLAccountNo,Amount1,TdsNatureOfDeduction.Code);
      PurchaseLine2.CalculateTDS(PurchaseHeader2);
      CalcExpectedTDSAmountsWithThreshold(ExpectedTDSEntry2,Amount1,PurchaseHeader2,TDSSetup);
      VerifyPurchaseOrderStatistics(PurchaseLine2,ExpectedTDSEntry2);
      DocumentNo2 := LibraryPurchase.PostPurchaseDocument(PurchaseHeader2,TRUE,TRUE);

      // [THEN] TDS Amounts are calculated in Purchase Lines  using  tds setup
      VerifyGLEntryforTDS(DocumentNo,Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice,FALSE);
      VerifyGLEntryforTDS(DocumentNo2,Amount1);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry2,DocumentNo2,ExpectedTDSEntry2."Document Type"::Invoice,FALSE);
      CreateAndPostTDSAdjustmentJournal(DocumentNo2,NodNocHeader."No.",TDSEntry,TDSAdjustmentDocNo,TDSAdjAmount);

      // [WHEN] Create Purchase Order with less than the threshold limit ,Apply the same TDS Nature of dedcution and calculate the Expected TDS Entry with threshold
      CreatePurchaseOrderWithContractor(
        PurchaseHeader3,PurchaseLine3,NodNocHeader."No.",PurchaseLine3.Type::"G/L Account",
        GLAccountNo,Amount1,TdsNatureOfDeduction.Code);
      PurchaseLine3.CalculateTDS(PurchaseHeader3);
      CalcExpectedTDSAmountsWithThreshold(ExpectedTDSEntry3,Amount1,PurchaseHeader3,TDSSetup);

      // [THEN] Calculated TDS Amounts by using TDS Setup and verified the expected and Actual values in
      VerifyGLEntry(GLEntry."Document Type"::" ",TDSAdjustmentDocNo,-TDSAdjAmount);
      VerifyPurchaseOrderStatistics(PurchaseLine3,ExpectedTDSEntry3);
    END;

    [Test]
    PROCEDURE VerifySalesCreditMemoAfterDebitCorrespondingPartialReturn@1500055();
    VAR
      NocHeader@1500000 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      SalesHeader@1500003 : Record 36;
      SalesCrMemoLine@1500004 : Record 115;
      GLEntry@1500008 : Record 17;
      RoundingType@1500007 : 'Nearest,Up,Down';
      Amount@1500005 : Decimal;
      DocumentNo@1500006 : Code[20];
      DocumentNo2@1500009 : Code[20];
    BEGIN
      // [SCENARIO 163785] Check if the program debits the corresponding TCS Payable Account after posting the Sales Credit Memo (Partial Return)
      // [FEATURE] [Sales Order,Sales return Order]

      // [GIVEN] Created NODNOC ,TCS Nature of Collection,Assesse Code & TCS Setup For Sales Order & Sales Return order
      InitializeSalesSetup(NocHeader,TcsNatureOfCollection,TCSSetup,RoundingType::Nearest);
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create Sales Order & Sales Return Order With TCS Nature of collection and post the sales order after that apply it to the sales return document with same amount
      DocumentNo := CreateAndPostSalesOrderWithTCS(NocHeader,TcsNatureOfCollection,Amount);
      DocumentNo2 := CreateAndPostSalesReturnDocumentWithTCS(NocHeader,TcsNatureOfCollection,SalesHeader,DocumentNo,Amount);
      SalesCrMemoLine.SETRANGE("Document No.",DocumentNo2);
      SalesCrMemoLine.FINDFIRST;

      // [THEN] Calculated TCS Amounts by using TCS Setup and Verified the G/L Entries impact on the Sales Return order with applied Sales Order
      VerifyGLEntry(GLEntry."Document Type"::"Credit Memo",DocumentNo2,SalesCrMemoLine."Amount To Customer");
    END;

    [Test]
    PROCEDURE VerifySalesCreditMemoWithTCSUpperRoundOff@1500068();
    VAR
      NocHeader@1500000 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      ExpectedTCSEntry@1500004 : Record 16514;
      RoundingType@1500006 : 'Nearest,Up,Down';
      Amount@1500003 : Decimal;
      DocumentNo@1500005 : Code[20];
    BEGIN
      // [SCENARIO 163787] TCS - Tax Collection at Source - Check if the system is calculating TCS rounded off(with rounding type set as up) on each component (TCS amount, surcharge amount, eCess amount) while preparing Credit Memo.
      // [FEATURE] [Sales Credit Memo]

      // [GIVEN] Created NODNOC ,TCS Nature of Collection,Assesse Code & TCS Setup For Sales Credit Memo
      InitializeSalesSetup(NocHeader,TcsNatureOfCollection,TCSSetup,RoundingType::Up);
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create and post Sales Credit Memo With TCS
      DocumentNo := CreateAndPostSalesCreditMemoWithTCS(NocHeader,TcsNatureOfCollection,Amount);
      CalcExpectedTCSAmounts(ExpectedTCSEntry,TCSSetup,Amount);

      // [THEN] Calculated TCS Amounts by using TCS Setup and created TCSEntry and verifying the TCS Entry
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,ExpectedTCSEntry."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE VerifySalesCreditMemoWithTCSLowerRoundOff@1500071();
    VAR
      NodNocHeader@1500000 : Record 13786;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      ExpectedTCSEntry@1500004 : Record 16514;
      RoundingType@1500006 : 'Nearest,Up,Down';
      Amount@1500003 : Decimal;
      DocumentNo@1500005 : Code[20];
    BEGIN
      // [SCENARIO 163788] TCS - Tax Collection at Source - Check if the system is calculating TCS rounded off(with rounding type set as down) on each component (TCS amount, surcharge amount, eCess amount) while preparing Credit Memo.
      // [FEATURE] [Sales Credit Memo]

      // [GIVEN] Created NODNOC ,TCS Nature of Collection,Assesse Code & TCS Setup For Sales Credit Memo
      InitializeSalesSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,RoundingType::Down);
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create and post Sales Credit Memo With TCS
      DocumentNo := CreateAndPostSalesCreditMemoWithTCS(NodNocHeader,TcsNatureOfCollection,Amount);
      CalcExpectedTCSAmounts(ExpectedTCSEntry,TCSSetup,Amount);

      // [THEN] Calculated TCS Amounts by using TCS Setup and created TCSEntry and verifying the TCS Entry
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,ExpectedTCSEntry."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE Initialize@1500039();
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      isInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
      GLSetup.GET;
    END;

    LOCAL PROCEDURE InitializeSetup@1500009(VAR NodNocHeader@1500005 : Record 13786;VAR TdsNatureOfDeduction@1500004 : Record 13726;VAR TDSSetup@1500009 : Record 13728;EffectiveDate@1500008 : Date;ThresholdOverlook@1500002 : Boolean;SurchargeOverlook@1500001 : Boolean;MonthlyCert@1500000 : Boolean);
    VAR
      AssesseeCode@1500006 : Record 13727;
      ConcessionalCode@1500007 : Record 13718;
    BEGIN
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTDS.CreateConcessionalCode(ConcessionalCode);
      CreateTDSNatureDeductionAndTDSSetup(
        TdsNatureOfDeduction,TdsNatureOfDeduction."TDS Group"::Contractor,AssesseeCode.Code,TDSSetup,EffectiveDate,'',
        ConcessionalCode.Code);
      CreateNODNOCSetup(NodNocHeader,NodNocHeader.Type::Vendor,LibraryTDS.CreateVendorWithPostingSetup,AssesseeCode.Code,
        TdsNatureOfDeduction.Code,ThresholdOverlook,SurchargeOverlook,MonthlyCert,ConcessionalCode.Code);
    END;

    LOCAL PROCEDURE InitializeSalesSetup@1500074(VAR NocHeader@1170000002 : Record 13786;VAR TcsNatureOfCollection@1500003 : Record 16507;VAR TCSSetup@1500002 : Record 16508;RoundingType@1500001 : Option);
    VAR
      AssesseeCode@1500000 : Record 13727;
    BEGIN
      Initialize;
      GLSetup.VALIDATE("TCS Rounding Precision",1);
      GLSetup.VALIDATE("TCS Rounding Type",RoundingType);
      GLSetup.MODIFY(TRUE);
      LibraryTCS.CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTCS.CreateTCSNatureCollectionAndTCSSetup(TcsNatureOfCollection,TCSSetup,TCSSetup."TCS Type"::E,AssesseeCode.Code);
      LibraryTCS.CreateNODNOCSetup(NocHeader,NocHeader.Type::Customer,LibraryTCS.CreateCustomer,AssesseeCode.Code,
        TcsNatureOfCollection.Code,TRUE,TRUE,TRUE);
    END;

    LOCAL PROCEDURE InitializeSetupAndTDSWithDifferentEffectiveDate@1500030(VAR TdsNatureOfDeduction@1500004 : Record 13726;VAR NodNocHeader@1500003 : Record 13786;VAR TDSSetup@1500002 : Record 13728;VAR TDSSetup2@1500001 : Record 13728);
    VAR
      AssesseeCode@1500000 : Record 13727;
    BEGIN
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryERM.CreateTDSNatureDeduction(TdsNatureOfDeduction);
      TdsNatureOfDeduction.VALIDATE("TDS Group",TdsNatureOfDeduction."TDS Group"::Contractor);
      TdsNatureOfDeduction.MODIFY(TRUE);
      CreateTDSSetUp(TDSSetup,TdsNatureOfDeduction.Code,AssesseeCode.Code,WORKDATE,'');
      CreateTDSSetUp(TDSSetup2,TdsNatureOfDeduction.Code,AssesseeCode.Code,CALCDATE('<' + FORMAT(1) + 'D>',WORKDATE),'');
      CreateNODNOCSetup(NodNocHeader,NodNocHeader.Type::Vendor,LibraryTDS.CreateVendorWithPostingSetup,AssesseeCode.Code,
        TdsNatureOfDeduction.Code,TRUE,TRUE,TRUE,'');// ThresholdOverlook=TRUE,SurchargeOverlook=TRUE,MonthlyCertificate=TRUE
    END;

    LOCAL PROCEDURE InitializeSetupWithPANAppliedVendor@1500035(VAR AssesseeCode@1500006 : Record 13727;VAR NodNocHeader@1500005 : Record 13786;VAR TdsNatureOfDeduction@1500004 : Record 13726;VAR TDSSetup@1500009 : Record 13728;EffectiveDate@1500008 : Date;ThresholdOverlook@1500002 : Boolean;SurchargeOverlook@1500001 : Boolean;MonthlyCert@1500000 : Boolean);
    BEGIN
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TdsNatureOfDeduction,TdsNatureOfDeduction."TDS Group"::Contractor,AssesseeCode.Code,
        TDSSetup,EffectiveDate,'','');
      CreateNODNOCSetup(NodNocHeader,NodNocHeader.Type::Vendor,CreateNonPANVendor,AssesseeCode.Code,TdsNatureOfDeduction.Code,
        ThresholdOverlook,SurchargeOverlook,MonthlyCert,'');
    END;

    LOCAL PROCEDURE CreateMultiGeneralJournalLines@1500003(VAR GenJournalLine@1500002 : Record 81;VAR GenJournalLine2@1500003 : Record 81;NodNocHeader@1500004 : Record 13786;TdsNatureOfDeduction@1500006 : Record 13726;Amount@1500005 : Decimal);
    VAR
      GenJournalTemplate@1500001 : Record 80;
      GenJournalBatch@1500000 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,NodNocHeader."No.",
        Amount,TdsNatureOfDeduction.Code,WORKDATE);
      CreateGeneralJournalLine(GenJournalLine2,GenJournalBatch,NodNocHeader."No.",
        Amount,TdsNatureOfDeduction.Code,CALCDATE('<' + FORMAT(1) + 'D>',WORKDATE));
    END;

    LOCAL PROCEDURE CreateMultiJournalLinesInVoucher@1500004(VAR GenJournalLine@1500002 : Record 81;VAR GenJournalLine2@1500008 : Record 81;NodNocHeader@1500004 : Record 13786;Amount@1500005 : Decimal;CodeContractor@1500006 : Code[10];Subtype@1500001 : ' ,Cash Receipt Voucher,Cash Payment Voucher,Bank Receipt Voucher,Bank Payment Voucher,Contra Voucher,Journal Voucher');
    VAR
      GenJournalBatch@1500007 : Record 232;
      GenJournalTemplate@1500000 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      CASE Subtype OF
        Subtype::"Bank Payment Voucher":
          GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
        Subtype::"Cash Payment Voucher":
          GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Cash Payment Voucher");
      END;
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,NodNocHeader."No.",
        Amount,CodeContractor,WORKDATE);
      CreateGeneralJournalLine(
        GenJournalLine2,GenJournalBatch,NodNocHeader."No.",
        Amount,CodeContractor,CALCDATE('<' + FORMAT(1) + 'D>',WORKDATE));
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@1500043(VAR GenJournalLine@1500007 : Record 81;GenJournalBatch@1500006 : Record 232;VendorNo@1500003 : Code[20];Amount@1500002 : Decimal;CodeContractor@1500001 : Code[10];EffectiveDate@1500000 : Date);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.VALIDATE("Posting Date",EffectiveDate);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJournalDocument@1500046(VAR GenJournalLine@1500009 : Record 81;VAR GenJournalLine2@1500008 : Record 81;Type@1500004 : Option;VendorNo@1500003 : Code[20];Amount@1500002 : Decimal;CodeContractor@1500001 : Code[10]);
    VAR
      GenJournalBatch@1500007 : Record 232;
      GenJournalTemplate@1500006 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,Type);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,VendorNo,Amount,CodeContractor,WORKDATE);
      CreateGeneralJournalLine(
        GenJournalLine2,GenJournalBatch,VendorNo,Amount,CodeContractor,CALCDATE('<' + FORMAT(1) + 'D>',WORKDATE));
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithContractor@1500029(VAR PurchaseHeader@1500009 : Record 38;VAR PurchaseLine@1500006 : Record 39;VendorNo@1500004 : Code[20];LineType@1500003 : Option;No@1500011 : Code[20];Amount@1500002 : Decimal;CodeContractor@1500001 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,LineType,No,1);
      PurchaseHeader.MODIFY(TRUE);
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateNODNOCSetup@1500056(VAR NodNocHeader@1500009 : Record 13786;Type@1500006 : Option;No@1500005 : Code[20];AssesseeCode@1500004 : Code[10];CodeContractor@1500003 : Code[10];ThresholdOverlook@1500002 : Boolean;SurchargeOverlook@1500001 : Boolean;MonthlyCert@1500000 : Boolean;ConcessionalCode@1500007 : Code[10]);
    VAR
      NodNocLines@1500008 : Record 13785;
    BEGIN
      LibraryERM.CreateNODNOCHeader(NodNocHeader,Type,No);
      NodNocHeader.VALIDATE("Assesse Code",AssesseeCode);
      NodNocHeader.MODIFY(TRUE);
      LibraryERM.CreateNODNOCLines(NodNocLines,NodNocHeader,CodeContractor);
      UpdateNODNOCLines(NodNocLines,NodNocHeader.Type,ThresholdOverlook,SurchargeOverlook,MonthlyCert,ConcessionalCode);
    END;

    LOCAL PROCEDURE CreateIncomeTaxAccountingPeriod@1500059();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
    BEGIN
      LibraryERM.CreateIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      IncomeTaxAccountingPeriod.VALIDATE("Starting Date",WORKDATE);
      IncomeTaxAccountingPeriod.VALIDATE("Ending Date",LibraryRandom.RandDate(5));
      IncomeTaxAccountingPeriod.MODIFY(TRUE);
      CreateIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."No.");
    END;

    LOCAL PROCEDURE CreateIncomeTaxPeriodSetup@1500061(IncomeTaxAccountingPeriodNo@1500000 : Integer);
    VAR
      IncomeTaxPeriodSetup@1500001 : Record 16501;
    BEGIN
      LibraryERM.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,IncomeTaxPeriodSetup.Quarter::Q1);
      IncomeTaxPeriodSetup."Starting Date" := WORKDATE;
      IncomeTaxPeriodSetup."Ending Date" := LibraryRandom.RandDate(2);
      IncomeTaxPeriodSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTDSNatureDeductionAndTDSSetup@1500064(VAR TdsNatureOfDeduction@1500005 : Record 13726;TDSGroup@1500004 : Option;AssesseeCode@1500003 : Code[10];VAR TDSSetup@1500002 : Record 13728;EffectiveDate@1500001 : Date;CountryCode@1500000 : Code[10];ConcessionalCode@1500006 : Code[10]);
    BEGIN
      LibraryERM.CreateTDSNatureDeduction(TdsNatureOfDeduction);
      TdsNatureOfDeduction.VALIDATE("TDS Group",TDSGroup);
      TdsNatureOfDeduction.MODIFY(TRUE);
      IF CountryCode = '' THEN
        CreateTDSSetUp(TDSSetup,TdsNatureOfDeduction.Code,AssesseeCode,EffectiveDate,ConcessionalCode)
      ELSE
        LibraryTDS.CreateTDSSetupWithCountry(TDSSetup,TdsNatureOfDeduction.Code,AssesseeCode,CountryCode,EffectiveDate);
    END;

    LOCAL PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@1500053();
    VAR
      DeductorCategory@1500001 : Record 16498;
    BEGIN
      CompanyInformation.GET;
      LibraryERM.CreateDeductorCategory(DeductorCategory);
      CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      CompanyInformation.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTDSSetUp@1500065(VAR TDSSetup@1500003 : Record 13728;TdsNatureDeductionCode@1500002 : Code[10];AssesseeCode@1500001 : Code[10];EffectiveDate@1500000 : Date;ConcessionalCode@1500004 : Code[10]);
    BEGIN
      LibraryERM.CreateTDSSetup(TDSSetup,TdsNatureDeductionCode,AssesseeCode,EffectiveDate,ConcessionalCode);
      TDSSetup.VALIDATE("TDS %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("Non PAN TDS %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("eCESS %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("SHE Cess %",LibraryRandom.RandInt(5));
      TDSSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateNonPANVendor@1500025() : Code[20];
    VAR
      Vendor@1500003 : Record 23;
      GeneralPostingSetup@1500002 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      Vendor.VALIDATE("P.A.N. Status",Vendor."P.A.N. Status"::PANAPPLIED);
      Vendor.VALIDATE("P.A.N. Reference No.",
        LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. Reference No."),DATABASE::Vendor));
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreatePANAppliedVendorAndUpdateCurrency@1500036(VAR Vendor@1500000 : Record 23;CurrencyCode@1500001 : Code[10];CountryCode@1500002 : Code[10]);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.VALIDATE("Country/Region Code",CountryCode);
      Vendor.VALIDATE("P.A.N. Status",Vendor."P.A.N. Status"::PANAPPLIED);
      Vendor.VALIDATE("P.A.N. Reference No.",
        LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. Reference No."),DATABASE::Vendor));
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePANNotAVBLVendorAndUpdateCurrency@1500041(VAR Vendor@1500000 : Record 23;CurrencyCode@1500001 : Code[10];CountryCode@1500002 : Code[10]);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.VALIDATE("Country/Region Code",CountryCode);
      Vendor.VALIDATE("P.A.N. Status",Vendor."P.A.N. Status"::PANNOTAVBL);
      Vendor.VALIDATE("P.A.N. Reference No.",
        LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. Reference No."),DATABASE::Vendor));
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithTCS@1500062(NocHeader@1500002 : Record 13786;TcsNatureOfCollection@1500003 : Record 16507;Amount@1500004 : Decimal) : Code[20];
    VAR
      SalesHeader@1500001 : Record 36;
      SalesLine@1500000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,NocHeader."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,'',1);
      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      SalesLine.MODIFY(TRUE);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostSalesReturnDocumentWithTCS@1500067(NocHeader@1500002 : Record 13786;TcsNatureOfCollection@1500003 : Record 16507;VAR SalesHeader@1500001 : Record 36;DocumentNo@1500004 : Code[20];Amount@1500005 : Decimal) : Code[20];
    VAR
      SalesLine@1500000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",NocHeader."No.");
      SalesHeader.VALIDATE("Applies-to Doc. Type",SalesHeader."Applies-to Doc. Type"::Invoice);
      SalesHeader.VALIDATE("Applies-to Doc. No.",DocumentNo);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,'',1);
      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      SalesLine.MODIFY(TRUE);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostSalesCreditMemoWithTCS@1500077(NocHeader@1500002 : Record 13786;TcsNatureOfCollection@1500003 : Record 16507;Amount@1500005 : Decimal) : Code[20];
    VAR
      SalesHeader@1500001 : Record 36;
      SalesLine@1500000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",NocHeader."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,'',1);
      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      SalesLine.MODIFY(TRUE);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAssesseeandNODNOCSetup@1500037(VAR NodNocHeader@1500000 : Record 13786;VAR TdsNatureOfDeduction@1500001 : Record 13726;CountryCode@1500004 : Code[10];VendorNo@1500005 : Code[20];VAR TDSSetup@1500007 : Record 13728);
    VAR
      AssesseeCode@1500003 : Record 13727;
    BEGIN
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(TdsNatureOfDeduction,TdsNatureOfDeduction."TDS Group"::"Payable to Non Residents",
        AssesseeCode.Code,TDSSetup,WORKDATE,CountryCode,'');
      CreateNODNOCSetup(
        NodNocHeader,NodNocHeader.Type::Vendor,VendorNo,AssesseeCode.Code,TdsNatureOfDeduction.Code,FALSE,FALSE,FALSE,'');// ThresholdOverlook=FALSE,SurchargeOverlook=FALSE,MonthlyCertificate=FALSE
    END;

    LOCAL PROCEDURE CreateandPostPurchaseDocument@1500040(NodNocHeader@1500002 : Record 13786;TdsNatureOfDeduction@1500003 : Record 13726;TDSSetup@1500005 : Record 13728;VAR DocumentNo@1500006 : Code[20];Amount@1500007 : Decimal);
    VAR
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      TDSEntry@1500004 : Record 13729;
    BEGIN
      CreatePurchaseOrderWithContractor(
        PurchaseHeader,PurchaseLine,NodNocHeader."No.",PurchaseLine.Type::Item,'',
        Amount,TdsNatureOfDeduction.Code);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmountsWithThreshold(TDSEntry,Amount,PurchaseHeader,TDSSetup);
      VerifyPurchaseOrderStatistics(PurchaseLine,TDSEntry);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostTDSAdjustmentJournal@1500060(PONo@1500002 : Code[20];PartyCode@1500302 : Code[20];VAR TDSEntry@1500006 : Record 13729;VAR TDSAdjustmentDocNo@1500001 : Code[20];VAR TDSAdjAmount@1500000 : Decimal);
    VAR
      TaxJournalTemplate@1500003 : Record 16585;
      TaxJournalBatch@1500004 : Record 16586;
      TDSAdjustmentJournal@1500005 : TestPage 13791;
    BEGIN
      LibraryTDS.CreateTaxJournalTemplateTDSAdj(TaxJournalTemplate);
      LibraryTDS.CreateTaxJournalBatchTDSAdj(TaxJournalBatch,TaxJournalTemplate.Name);
      TDSEntry.SETRANGE("Party Code",PartyCode);
      TDSEntry.SETRANGE("Document No.",PONo);
      TDSEntry.FINDFIRST;
      COMMIT;
      WITH TDSAdjustmentJournal DO BEGIN
        OPENEDIT;
        CurrentJnlBatchName.SETVALUE(TaxJournalBatch.Name);
        "Transaction No".SETVALUE(TDSEntry."Entry No.");
        "TDS/TCS Base Amount Applied".SETVALUE(0);
        TDSAdjustmentDocNo := "Document No.".VALUE;
        TDSAdjAmount := Amount.ASDECIMAL;
        Post.INVOKE;
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE CreateAndPostGeneralLinesWithForeignCurrency@1500024(VAR GenJournalLine@1500002 : Record 81;TdsNatureOfDeduction@1500006 : Record 13726;VendorNo@1500003 : Code[20];Amount@1500004 : Decimal;DocumentType@1500005 : Option);
    VAR
      GenJournalTemplate@1500000 : Record 80;
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(
        GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Vendor,VendorNo,GenJournalLine."Bal. Account Type"::"G/L Account",
        LibraryERM.CreateGLAccountNo,Amount);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",TdsNatureOfDeduction.Code);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateGeneralLinesWithPayTDS@1500049(VAR GenJournalLine@1500002 : Record 81;TDSGroup@1500003 : Record 13731;VAR Amount1@1500005 : Decimal);
    VAR
      GenJournalTemplate@1500000 : Record 80;
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::Payments);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(
        GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"G/L Account",TDSGroup."TDS Account",GenJournalLine."Bal. Account Type"::"Bank Account",
        LibraryERM.CreateBankAccountNo,0);
      GenJournalLine.VALIDATE("T.A.N. No.",CompanyInformation."T.A.N. No.");
      GenJournalLine.MODIFY(TRUE);
      LibraryTDS.PayTDS(GenJournalLine);
      COMMIT;
      GetTaxEntry(GenJournalLine."Document No.",TDSGroup."TDS Account",Amount1);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreatePurchaseDocWithTDS@1500069(VAR PurchaseHeader@1500002 : Record 38;VAR PurchaseLine@1500006 : Record 39;VendorNo@1500004 : Code[20];LineType@1500003 : Option;CodeContractor@1500001 : Code[10];EffectiveDate@1500000 : Date);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,LineType,'',1);
      PurchaseHeader.VALIDATE("Posting Date",EffectiveDate);
      PurchaseHeader.MODIFY(TRUE);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(1000,2));
      PurchaseLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcExpectedTDSAmountsWithThreshold@1500023(VAR ExpectedTDSEntry@1500000 : Record 13729;TaxBaseAmount@1500002 : Decimal;PurchaseHeader@1500005 : Record 38;TDSsetup@1500004 : Record 13728);
    VAR
      TDSGroup@1500006 : Record 13731;
      TDSEntry@1500007 : Record 13729;
      Vendor@1500003 : Record 23;
      UnappliedAmt@1500008 : Decimal;
    BEGIN
      WITH ExpectedTDSEntry DO BEGIN
        PurchaseHeader.CALCFIELDS("Amount to Vendor");
        TDSGroup.RESET;
        TDSGroup.SETRANGE("TDS Group",TDSsetup."TDS Group");
        TDSGroup.SETFILTER("Effective Date",'<=%1',PurchaseHeader."Posting Date");
        TDSGroup.FINDLAST;
        TDSEntry.SETRANGE("Party Type",TDSEntry."Party Type"::Vendor);
        TDSEntry.SETRANGE("Party Code",PurchaseHeader."Buy-from Vendor No.");
        TDSEntry.SETRANGE(Applied,FALSE);
        TDSEntry.SETRANGE("TDS Amount",0);
        IF TDSEntry.FINDSET THEN
          REPEAT
            UnappliedAmt += TDSEntry."TDS Base Amount";
          UNTIL  TDSEntry.NEXT = 0;
        IF ((PurchaseHeader."Amount to Vendor" + UnappliedAmt) >= TDSGroup."TDS Threshold Amount") OR
           ((PurchaseHeader."Amount to Vendor" >= TDSGroup."Per Contract Value") AND (TDSGroup."Per Contract Value" <> 0 ))
        THEN BEGIN
          "TDS Base Amount" := TaxBaseAmount + UnappliedAmt;
          Vendor.GET(PurchaseHeader."Buy-from Vendor No.");
          IF Vendor."P.A.N. Status" = Vendor."P.A.N. Status"::" " THEN
            "TDS Amount" := LibraryTDS.RoundTDS(TDSsetup."TDS %" / 100 * "TDS Base Amount")
          ELSE
            IF ((Vendor."P.A.N. Status" = Vendor."P.A.N. Status"::PANAPPLIED) OR
                (Vendor."P.A.N. Status" = Vendor."P.A.N. Status"::PANNOTAVBL))
            THEN
              "TDS Amount" := LibraryTDS.RoundTDS(TDSsetup."Non PAN TDS %" / 100 * "TDS Base Amount");
          "Surcharge Amount" := LibraryTDS.RoundTDS(TDSsetup."Surcharge %" / 100 * "TDS Amount");
          "eCESS Amount" := LibraryTDS.RoundTDS(TDSsetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount"));
          "SHE Cess Amount" := LibraryTDS.RoundTDS(TDSsetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount"));
          "Total TDS Including SHE CESS" := "TDS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
        END ELSE BEGIN
          "TDS Base Amount" := TaxBaseAmount;
          "TDS Amount" := 0;
          "Surcharge Amount" := 0;
          "eCESS Amount" := 0;
          "SHE Cess Amount" := 0;
          "Total TDS Including SHE CESS" := 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CalcTDSAmountsforJournalLine@1500042(VAR GenJournalLine@1500003 : Record 81;TDSSetup@1500005 : Record 13728;TaxBaseAmount@1500004 : Decimal);
    BEGIN
      WITH GenJournalLine DO BEGIN
        "TDS/TCS Base Amount" := TaxBaseAmount;
        "TDS/TCS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS/TCS Base Amount");
        "Surcharge Amount" := LibraryTDS.RoundTDS(TDSSetup."Surcharge %" / 100 * "TDS/TCS Amount");
        "eCESS on TDS/TCS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * ("TDS/TCS Amount" + "Surcharge Amount"));
        "SHE Cess on TDS/TCS Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * ("TDS/TCS Amount" + "Surcharge Amount"));
        "Total TDS/TCS Incl. SHE CESS" :=
          "TDS/TCS Amount" + "eCESS on TDS/TCS Amount" + "SHE Cess on TDS/TCS Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE CalcExpectedTCSAmounts@1500063(VAR ExpectedTCSEntry@1500009 : Record 16514;TCSSetup@1500001 : Record 16508;TaxBaseAmount@1500007 : Decimal);
    BEGIN
      WITH ExpectedTCSEntry DO BEGIN
        "TCS Base Amount" := TaxBaseAmount;
        "TCS %" := TCSSetup."TCS %";
        "TCS Amount" := LibraryTDS.RoundTCSAmount(TCSSetup."TCS %" / 100 * "TCS Base Amount");
        "Surcharge %" := TCSSetup."Surcharge %";
        "Surcharge Amount" := LibraryTDS.RoundTCSAmount(TCSSetup."Surcharge %" / 100 * "TCS Amount");
        "eCESS %" := TCSSetup."eCESS %";
        "eCESS Amount" := LibraryTDS.RoundTCSAmount(TCSSetup."eCESS %" / 100 * ("TCS Amount" + "Surcharge Amount"));
        "SHE Cess %" := TCSSetup."SHE Cess %";
        "SHE Cess Amount" := LibraryTDS.RoundTCSAmount(TCSSetup."SHE Cess %" / 100 * ("TCS Amount" + "Surcharge Amount"));
        "Total TCS Including SHE CESS" := "TCS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE GetThresholdAmount@1500031(TDSGroupCode@1500198 : Option);
    VAR
      TDSGroup@1500199 : Record 13731;
    BEGIN
      WITH TDSGroup DO BEGIN
        SETRANGE("TDS Group",TDSGroupCode);
        FINDLAST;
        VALIDATE("Per Contract Value",LibraryRandom.RandDec(100,2));
        VALIDATE("TDS Threshold Amount",LibraryRandom.RandDec(1000,2));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE GetTaxEntry@1500033(DocumentNo@1500001 : Code[20];GLAccNo@1500003 : Code[20];VAR Amount@1500000 : Decimal);
    VAR
      TDSEntry@1500002 : Record 13729;
    BEGIN
      TDSEntry.SETRANGE("Pay TDS Document No.",DocumentNo);
      TDSEntry.SETRANGE("Account No.",GLAccNo);
      TDSEntry.SETRANGE("TDS Paid",FALSE);
      IF TDSEntry.FINDSET THEN
        REPEAT
          Amount := Amount + TDSEntry."Bal. TDS Including SHE CESS";
        UNTIL TDSEntry.NEXT = 0;
    END;

    PROCEDURE UpdateNODNOCLines@1500017(VAR NodNocLines@1500004 : Record 13785;Type@1500003 : Option;ThresholdOverlook@1500002 : Boolean;SurchargeOverlook@1500001 : Boolean;MonthlyCertificate@1500000 : Boolean;ConcessionalCode@1500005 : Code[10]);
    BEGIN
      NodNocLines.SETRANGE("No.",NodNocLines."No.");
      NodNocLines.SETRANGE(Type,Type);
      NodNocLines.FINDSET;
      NodNocLines.MODIFYALL("Concessional Code",ConcessionalCode);
      NodNocLines.MODIFYALL("Monthly Certificate",MonthlyCertificate);
      NodNocLines.MODIFYALL("Threshold Overlook",ThresholdOverlook);
      NodNocLines.MODIFYALL("Surcharge Overlook",SurchargeOverlook);
    END;

    LOCAL PROCEDURE UpdateAccountNumberInTDSGroup@1500075(TDSGroupCode@1500001 : Option;VAR TDSGroup@1500000 : Record 13731);
    BEGIN
      TDSGroup.SETRANGE("TDS Group",TDSGroupCode);
      TDSGroup.FINDFIRST;
      TDSGroup.VALIDATE("TDS Account",LibraryERM.CreateGLAccountNo);
      TDSGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateChallanDetailsAfterPayment@1500044(DocumentNo@1500001 : Code[20]);
    VAR
      TDSEntry@1500002 : Record 13729;
      UpdateChallanDetails@1500003 : Report 13721;
    BEGIN
      WITH TDSEntry DO BEGIN
        SETFILTER("Document No.",DocumentNo);
        FINDFIRST;
        UpdateChallanDetails.InitializeRequest("Pay TDS Document No.",FORMAT(LibraryRandom.RandInt(1000)),WORKDATE,
          LibraryUtility.GenerateGUID,COPYSTR(LibraryUtility.GenerateGUID,1,7),LibraryUtility.GenerateGUID,WORKDATE,1);
        UpdateChallanDetails.USEREQUESTPAGE(FALSE);
        UpdateChallanDetails.RUN;
      END;
    END;

    LOCAL PROCEDURE UpdateChallanRegister@1500047(DocumentNo@1500002 : Code[20]);
    VAR
      ChallanRegister@1500000 : Record 16504;
      GenJournalLine@1500001 : Record 81;
      Form26Q27QEntry@1500003 : Record 16505;
    BEGIN
      WITH ChallanRegister DO BEGIN
        SETRANGE("Pay TDS Document No.",DocumentNo);
        FINDFIRST;
        "TDS Interest Amount" := GenJournalLine.RoundTDSAmount(LibraryRandom.RandDec(200,1));
        "TDS Others" := GenJournalLine.RoundTDSAmount(LibraryRandom.RandDec(200,1));
        "Oltas Interest" := GenJournalLine.RoundTDSAmount(LibraryRandom.RandDec(200,1));
        "Oltas Others" := GenJournalLine.RoundTDSAmount(LibraryRandom.RandDec(200,1));
        "TDS Fee" := GenJournalLine.RoundTDSAmount(LibraryRandom.RandDec(200,1));
        "Paid By Book Entry" := TRUE;
        "Transfer Voucher No." := '';
        Form26Q27QEntry.RESET;
        Form26Q27QEntry.SETRANGE("Challan Register Entry No.","Entry No.");
        IF Form26Q27QEntry.FINDFIRST THEN
          Form26Q27QEntry.MODIFYALL("Book Entry / Cash Indicator",TRUE);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE VerifyTDSAmountsPurchaseDoc@1500078(VAR ExpectedPurchaseLineTDSValue@1500005 : Record 39;PurchaseLine@1500007 : Record 39;DoubleRoundingPrecision@1500004 : Boolean);
    VAR
      PurchLine@1500002 : Record 39;
      RoundingPrecision@1500000 : Decimal;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchaseLine."Document Type");
      PurchLine.SETRANGE("Document No.",PurchaseLine."Document No.");
      PurchLine.FINDFIRST;
      RoundingPrecision := GLSetup."TDS Rounding Precision";
      IF DoubleRoundingPrecision THEN
        RoundingPrecision := RoundingPrecision * 2;
      Assert.AreEqual(
        ExpectedPurchaseLineTDSValue."TDS %",PurchLine."TDS %",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("TDS %"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."TDS Amount",PurchLine."TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("TDS Amount"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."TDS Base Amount",PurchLine."TDS Base Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("TDS Base Amount"),PurchLine.TABLECAPTION));
      Assert.AreEqual(
        ExpectedPurchaseLineTDSValue."eCESS % on TDS",PurchLine."eCESS % on TDS",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("eCESS % on TDS"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."eCESS on TDS Amount",PurchLine."eCESS on TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("eCESS on TDS Amount"),PurchLine.TABLECAPTION));
      Assert.AreEqual(
        ExpectedPurchaseLineTDSValue."SHE Cess % On TDS",PurchLine."SHE Cess % On TDS",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("SHE Cess % On TDS"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."SHE Cess on TDS Amount",PurchLine."SHE Cess on TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("SHE Cess on TDS Amount"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."Total TDS Including SHE CESS",PurchLine."Total TDS Including SHE CESS",
        GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("Total TDS Including SHE CESS"),PurchLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntryWithRemainingAmount@1500072(DocumentNo@1500001 : Code[20];Amount@1500000 : Decimal);
    VAR
      VendorLedgerEntry@1500002 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,DocumentNo);
      VendorLedgerEntry.CALCFIELDS("Amount (LCY)","Remaining Amount","Original Amount");
      VendorLedgerEntry.TESTFIELD(Open,TRUE);
      Assert.AreNearlyEqual(
        Amount,ABS(VendorLedgerEntry."Remaining Amount"),LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErr,VendorLedgerEntry.FIELDCAPTION("Remaining Amount"),Amount));
      Assert.AreNearlyEqual(
        Amount,ABS(VendorLedgerEntry."Original Amount"),LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErr,VendorLedgerEntry.FIELDCAPTION("Original Amount"),Amount));
      Assert.AreNearlyEqual(
        Amount,ABS(VendorLedgerEntry."Amount (LCY)"),LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(AmountErr,VendorLedgerEntry.FIELDCAPTION("Amount (LCY)"),Amount));
    END;

    LOCAL PROCEDURE VerifyGLEntryCount@1500051(DocumentNo@1500001 : Code[20];ExpectedCount@1500000 : Integer);
    VAR
      DummyGLEntry@1500002 : Record 17;
    BEGIN
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      Assert.RecordCount(DummyGLEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyGLEntryforTDS@1500028(DocumentNo@1500001 : Code[20];Amount@1500000 : Decimal);
    VAR
      GLEntry@1500003 : Record 17;
      CreditAmount@1500002 : Decimal;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
      REPEAT
        CreditAmount += GLEntry."Credit Amount"
      UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(CreditAmount,Amount,1,STRSUBSTNO(AmountErr,CreditAmount,Amount));
    END;

    LOCAL PROCEDURE VerifyPurchaseOrderStatistics@1500018(PurchaseLine@1500000 : Record 39;TDSEntry@1500001 : Record 13729);
    BEGIN
      WITH TDSEntry DO
        LibraryVariableStorage.Enqueue("Total TDS Including SHE CESS");
      ServiceTaxAsExciseHelper.OpenPurchaseOrderStatistics(PurchaseLine);
    END;

    LOCAL PROCEDURE VerifyGeneralJournalLines@1500058(ExpectedGenJnlLine@1500000 : Record 81;ExpectedGenJnlLine2@1500001 : Record 81;GenJournalLine@1500002 : Record 81;GenJournalLine2@1500003 : Record 81);
    BEGIN
      Assert.AreNearlyEqual(
        ExpectedGenJnlLine."Total TDS/TCS Incl. SHE CESS",
        GenJournalLine."Total TDS/TCS Incl. SHE CESS",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(
          TDSValueErr,GenJournalLine.FIELDNAME("Total TDS/TCS Incl. SHE CESS"),ExpectedGenJnlLine."Total TDS/TCS Incl. SHE CESS"));
      Assert.AreNearlyEqual(
        ExpectedGenJnlLine2."Total TDS/TCS Incl. SHE CESS",
        GenJournalLine2."Total TDS/TCS Incl. SHE CESS",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(
          TDSValueErr,GenJournalLine2.FIELDNAME("Total TDS/TCS Incl. SHE CESS"),ExpectedGenJnlLine2."Total TDS/TCS Incl. SHE CESS"));
    END;

    LOCAL PROCEDURE VerifyVendorLedgerAndTDSEntry@1500050(DocumentNo@1500001 : Code[20]);
    VAR
      PurchInvLine@1500000 : Record 123;
      ExpectedTDSEntry@1500002 : Record 13729;
    BEGIN
      PurchInvLine.SETRANGE("Document No.",DocumentNo);
      PurchInvLine.FINDLAST;
      ExpectedTDSEntry.SETRANGE("Document No.",DocumentNo);
      ExpectedTDSEntry.FINDLAST;
      VerifyVendorLedgerEntryWithRemainingAmount(DocumentNo,PurchInvLine."Amount To Vendor");
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice,FALSE);
    END;

    LOCAL PROCEDURE VerifyGLEntry@1500048(DocumentType@1500002 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';DocumentNo@1500001 : Code[20];Amount@1500000 : Decimal);
    VAR
      GLEntry@1500004 : Record 17;
      CreditAmount@1500003 : Decimal;
    BEGIN
      FindGLEntry(GLEntry,DocumentType,DocumentNo);
      REPEAT
        CreditAmount += GLEntry."Credit Amount"
      UNTIL GLEntry.NEXT = 0;
      Assert.AreEqual(CreditAmount,Amount,STRSUBSTNO(CreditAmountErr,CreditAmount,Amount));
    END;

    LOCAL PROCEDURE VerifyChallanRegister@1500057(DocumentNo@1500000 : Code[20]);
    VAR
      ChallanRegister@1500001 : Record 16504;
    BEGIN
      ChallanRegister.SETRANGE("Pay TDS Document No.",DocumentNo);
      ChallanRegister.FINDFIRST;
      WITH ChallanRegister DO BEGIN
        TESTFIELD("TDS Interest Amount" );
        TESTFIELD("TDS Others" );
        TESTFIELD("Oltas Interest");
        TESTFIELD("Oltas Others");
        TESTFIELD("TDS Fee");
      END;
    END;

    LOCAL PROCEDURE VerifyTCSEntry@1500066(ExpectedTCSEntry@1500003 : Record 16514;DocumentNo@1500002 : Code[20];DocumentType@1500001 : ',Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder');
    VAR
      TCSEntry@1500005 : Record 16514;
    BEGIN
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.SETRANGE("Document Type",DocumentType);
      TCSEntry.FINDLAST;

      Assert.AreEqual(
        ExpectedTCSEntry."TCS Base Amount",TCSEntry."TCS Base Amount",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("TCS Base Amount"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."TCS %",TCSEntry."TCS %",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("TCS %"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."TCS Amount",TCSEntry."TCS Amount",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("TCS Amount"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."Surcharge %",TCSEntry."Surcharge %",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("Surcharge %"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."Surcharge Amount",TCSEntry."Surcharge Amount",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("Surcharge Amount"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."eCESS %",TCSEntry."eCESS %",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("eCESS %"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."eCESS Amount",TCSEntry."eCESS Amount",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("eCESS Amount"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."SHE Cess %",TCSEntry."SHE Cess %",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("SHE Cess %"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."SHE Cess Amount",TCSEntry."SHE Cess Amount",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("SHE Cess Amount"),TCSEntry.TABLECAPTION));
    END;

    [ModalPageHandler]
    PROCEDURE PurchOrderStatisticsMPH@1500027(VAR PurchaseOrderStatistics@1500000 : TestPage 403);
    VAR
      Value@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Value);
      PurchaseOrderStatistics.Control1500012.ASSERTEQUALS(Value);
    END;

    LOCAL PROCEDURE FindGLEntry@1500045(VAR GLEntry@1500002 : Record 17;DocumentType@1500001 : Option;DocumentNo@1500000 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@1500054(QuestionText@1000 : Text[1024];VAR Relpy@1001 : Boolean);
    BEGIN
      Relpy := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500502(Msg@1560501 : Text);
    BEGIN
    END;

    BEGIN
    END.
  }
}

