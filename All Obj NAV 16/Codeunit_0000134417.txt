OBJECT Codeunit 134417 ERM Delete Documents
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1007 : Codeunit 130000;
      ArchiveManagement@1006 : Codeunit 5063;
      LibraryInventory@1002 : Codeunit 132201;
      LibraryUtility@1009 : Codeunit 131000;
      LibraryPurchase@1004 : Codeunit 130512;
      LibrarySales@1003 : Codeunit 130509;
      LibraryERM@1005 : Codeunit 131300;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryService@1012 : Codeunit 131902;
      isInitialized@1001 : Boolean;
      ValidationError@1008 : TextConst 'ENU=The expected and actual values are equal.';
      DocumentStillExistsErr@1010 : TextConst '@@@={Locked};ENU=The document still exists';

    [Test]
    PROCEDURE ReleaseAndArchivePurchaseQuote@4();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchaseHeaderArchive@1002 : Record 5109;
      NoOfArchivedVerAfterRelease@1003 : Integer;
    BEGIN
      // [FEATURE] [Document Archive]
      // [SCENARIO] Check the functionality of Purchase Quote Archive.

      // [GIVEN] Create Purchase Quote.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Quote);

      // [WHEN] Release and Archive Purchase Quote.
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      PurchaseHeader.CALCFIELDS("No. of Archived Versions");
      NoOfArchivedVerAfterRelease := PurchaseHeader."No. of Archived Versions";
      ArchiveManagement.StorePurchDocument(PurchaseHeader,FALSE);

      // [THEN] Verify Archived Version in Purchase Header Archive.
      FindPurchaseHeaderArchive(PurchaseHeaderArchive,PurchaseHeaderArchive."Document Type"::Quote,PurchaseHeader."No.");
      Assert.AreEqual(0,NoOfArchivedVerAfterRelease,ValidationError);  // Value important for verification.
    END;

    [Test]
    PROCEDURE MakeOrderFromPurchaseQuote@3();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Document Archive]
      // [SCENARIO] Check the functionality of Purchase Quote while making it into Order.

      // [GIVEN] Create Purchase Quote.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Quote);

      // [WHEN] Release and Archive Purchase Quote and finally making an Order of it.
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      ArchiveManagement.StorePurchDocument(PurchaseHeader,FALSE);
      CODEUNIT.RUN(CODEUNIT::"Purch.-Quote to Order",PurchaseHeader);

      // [THEN] Verify Item Number,Quantity,Type and Unit of Measure Code in Purchase Quote Archive.
      VerifyPurchaseLineArchive(PurchaseLine,PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ArchiveAndDeletePurchaseQuote@10();
    VAR
      PurchaseHeaderArchive@1003 : Record 5109;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Document Archive]
      // [SCENARIO] Test deletion of Archived version for a Purchase Quote that has been archived, released and converted to a Purchase Order.

      // [GIVEN] Create Purchase Quote.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Quote);

      // [WHEN] Release and Archive Purchase Quote and finally making an Order of it and deleting Archived version of
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      ArchiveManagement.StorePurchDocument(PurchaseHeader,FALSE);
      CODEUNIT.RUN(CODEUNIT::"Purch.-Quote to Order",PurchaseHeader);
      RunDeletePurchaseQuoteVersion(PurchaseHeader."No.");

      // [THEN] Verify whether Line exist in Purchase Header Archive or not.
      ASSERTERROR FindPurchaseHeaderArchive(PurchaseHeaderArchive,PurchaseHeaderArchive."Document Type"::Quote,PurchaseHeader."No.");
    END;

    [Test]
    PROCEDURE ReleaseAndArchivePurchaseOrder@14();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseHeaderArchive@1003 : Record 5109;
      NoOfArchivedVerAfterRelease@1002 : Integer;
    BEGIN
      // [FEATURE] [Document Archive]
      // [SCENARIO] Check the functionality of Purchase Order Archive.

      // [GIVEN] Create Purchase Order.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // [WHEN] Release and Archive Purchase Order.
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      PurchaseHeader.CALCFIELDS("No. of Archived Versions");
      NoOfArchivedVerAfterRelease := PurchaseHeader."No. of Archived Versions";
      ArchiveManagement.StorePurchDocument(PurchaseHeader,FALSE);

      // [THEN] Verify Archived Version in Purchase Header Archive.
      FindPurchaseHeaderArchive(PurchaseHeaderArchive,PurchaseHeaderArchive."Document Type"::Order,PurchaseHeader."No.");
      Assert.AreEqual(0,NoOfArchivedVerAfterRelease,ValidationError);  // Value important for verification.
    END;

    [Test]
    PROCEDURE CreateAndPostPurchaseOrder@13();
    VAR
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
    BEGIN
      // [FEATURE] [Document Archive]
      // [SCENARIO] Check the functionality of Purchase Order Archive while posting an Order.

      // [GIVEN] Create Purchase Order.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // [WHEN] Release and Archive Purchase Order and finally posting it.
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      ArchiveManagement.StorePurchDocument(PurchaseHeader,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Verify Item Number,Quantity,Type and Unit of Measure Code in Purchase Order.
      VerifyPurchaseLineArchive(PurchaseLine,PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE DeleteArchivePurchaseOrder@12();
    VAR
      PurchaseHeaderArchive@1004 : Record 5109;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      // [FEATURE] [Document Archive]
      // [SCENARIO] Test deletion of Archived version for a Purchase Order that has been archived, released and Posted.

      // [GIVEN] Create Purchase Order.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);

      // [WHEN] Release and Archive Purchase Order and posting it while deleting Archived version of Purchase Order.
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      ArchiveManagement.StorePurchDocument(PurchaseHeader,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      RunDeletePurchaseOrderVersion(PurchaseHeader."No.");

      // [THEN] Verify whether Line exist in Purchase Header Archive or not.
      ASSERTERROR FindPurchaseHeaderArchive(PurchaseHeaderArchive,PurchaseHeaderArchive."Document Type"::Order,PurchaseHeader."No.");
    END;

    [Test]
    PROCEDURE ReleaseAndArchiveSalesQuote@8();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      SalesHeaderArchive@1004 : Record 5107;
      OldStockOutWarning@1000 : Boolean;
      NoOfArchivedVerAfterRelease@1005 : Integer;
    BEGIN
      // [FEATURE] [Document Archive]
      // [SCENARIO] Check the functionality of Sales Quote Archive.

      // [GIVEN] Create Sales Quote.
      Initialize;
      OldStockOutWarning := UpdateStockOutWarning(FALSE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Quote);

      // [WHEN] Release and Archive Sales Quote.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      SalesHeader.CALCFIELDS("No. of Archived Versions");
      NoOfArchivedVerAfterRelease := SalesHeader."No. of Archived Versions";
      ArchiveManagement.StoreSalesDocument(SalesHeader,FALSE);

      // [THEN] Verify Archived Version in Sales Header Archive.
      FindSalesHeaderArchive(SalesHeaderArchive,SalesHeaderArchive."Document Type"::Quote,SalesHeader."No.");
      Assert.AreEqual(0,NoOfArchivedVerAfterRelease,ValidationError);  // Value important for verification.

      // 4.Tear Down: Set Stockout Warning to original state.
      UpdateStockOutWarning(OldStockOutWarning);
    END;

    [Test]
    PROCEDURE MakeOrderFromSalesQuote@7();
    VAR
      SalesHeader@1008 : Record 36;
      SalesLine@1007 : Record 37;
      OldStockOutWarning@1002 : Boolean;
    BEGIN
      // [FEATURE] [Document Archive]
      // [SCENARIO] Check the functionality of Sales Quote Archive while making it into Order.

      // [GIVEN] Create Sales Quote.
      Initialize;
      OldStockOutWarning := UpdateStockOutWarning(FALSE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Quote);

      // [WHEN] Release and Archive Sales Quote and finally making an Order of it.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      ArchiveManagement.StoreSalesDocument(SalesHeader,FALSE);
      CODEUNIT.RUN(CODEUNIT::"Sales-Quote to Order",SalesHeader);

      // [THEN] Verify Item Number,Quantity,Type and Unit of Measure Code in Sales Quote.
      VerifySalesLineArchive(SalesLine,SalesHeader."No.");

      // 4.Tear Down: Set Stockout Warning to original state.
      UpdateStockOutWarning(OldStockOutWarning);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ArchiveAndDeleteSalesQuote@6();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1001 : Record 37;
      SalesHeaderArchive@1002 : Record 5107;
      OldStockOutWarning@1005 : Boolean;
    BEGIN
      // [FEATURE] [Document Archive]
      // [SCENARIO] Test deletion of Archived version for a Sales Quote that has been archived, released and converted to a Sales Order.

      // [GIVEN] Create Sales Quote.
      Initialize;
      OldStockOutWarning := UpdateStockOutWarning(FALSE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Quote);

      // [WHEN] Release and Archive Sales Quote and finally making an Order of it while deleting Archived Sales Quote.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      ArchiveManagement.StoreSalesDocument(SalesHeader,FALSE);
      CODEUNIT.RUN(CODEUNIT::"Sales-Quote to Order",SalesHeader);
      RunDeleteSalesQuoteVersion(SalesHeader."No.");

      // [THEN] Verify whether Line exist in Sales Header Archive or not.
      ASSERTERROR FindSalesHeaderArchive(SalesHeaderArchive,SalesHeaderArchive."Document Type"::Quote,SalesHeader."No.");

      // 4.Tear Down: Set Stockout Warning to original state.
      UpdateStockOutWarning(OldStockOutWarning);
    END;

    [Test]
    PROCEDURE ReleaseAndArchiveSalesOrder@20();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1001 : Record 37;
      SalesHeaderArchive@1002 : Record 5107;
      OldStockOutWarning@1000 : Boolean;
      NoOfArchivedVerAfterRelease@1005 : Integer;
    BEGIN
      // [FEATURE] [Document Archive]
      // [SCENARIO] Check the functionality of Sales Order Archive.

      // [GIVEN] Create Sales Order.
      Initialize;
      OldStockOutWarning := UpdateStockOutWarning(FALSE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // [WHEN] Release and Archive Sales Order.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      SalesHeader.CALCFIELDS("No. of Archived Versions");
      NoOfArchivedVerAfterRelease := SalesHeader."No. of Archived Versions";
      ArchiveManagement.StoreSalesDocument(SalesHeader,FALSE);

      // [THEN] Verify Archived Version in Sales Header Archive.
      FindSalesHeaderArchive(SalesHeaderArchive,SalesHeaderArchive."Document Type"::Order,SalesHeader."No.");
      Assert.AreEqual(0,NoOfArchivedVerAfterRelease,ValidationError);  // Value important for verification.

      // 4.Tear Down: Set Stockout Warning to original state.
      UpdateStockOutWarning(OldStockOutWarning);
    END;

    [Test]
    PROCEDURE CreateAndPostSalesOrder@19();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      OldStockOutWarning@1002 : Boolean;
    BEGIN
      // [FEATURE] [Document Archive]
      // [SCENARIO] Check the functionality of Sales Order Archive while posting an Order.

      // [GIVEN] Create Sales Order.
      Initialize;
      OldStockOutWarning := UpdateStockOutWarning(FALSE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // [WHEN] Release and Archive Sales Order and finally posting it.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      ArchiveManagement.StoreSalesDocument(SalesHeader,FALSE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Verify Item Number,Quantity,Type and Unit of Measure Code in Sales Order Archive.
      VerifySalesLineArchive(SalesLine,SalesHeader."No.");

      // 4.Tear Down: Set Stockout Warning to original state.
      UpdateStockOutWarning(OldStockOutWarning);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE DeleteArchiveSalesOrder@17();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1001 : Record 37;
      SalesHeaderArchive@1000 : Record 5107;
      OldStockOutWarning@1003 : Boolean;
    BEGIN
      // [FEATURE] [Document Archive]
      // [SCENARIO] Test deletion of Archived version for a Sales Order that has been archived, released and Posted.

      // [GIVEN] Create Sales Order.
      Initialize;
      OldStockOutWarning := UpdateStockOutWarning(FALSE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // [WHEN] Release and Archive Sales Order and posting it while deleting the Archived version of same.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      ArchiveManagement.StoreSalesDocument(SalesHeader,FALSE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      RunDeleteSalesOrderVersion(SalesHeader."No.");

      // [THEN]  Verify whether Line exist in Sales Header Archive or not.
      ASSERTERROR FindSalesHeaderArchive(SalesHeaderArchive,SalesHeaderArchive."Document Type"::Order,SalesHeader."No.");

      // 4.Tear Down: Set Stockout Warning to original state.
      UpdateStockOutWarning(OldStockOutWarning);
    END;

    [Test]
    PROCEDURE DeleteApprovedInvoicedPurchaseOrder@201();
    VAR
      PurchaseHeader@1002 : Record 38;
      DocumentType@1001 : Option;
    BEGIN
      // [FEATURE] [Purchase] [Approval Management]
      // [SCENARIO 363783] Report "Delete Invoiced Purch. Orders" deletes Approval Entries related to deleted Purchase Order
      // [GIVEN] Invoiced Purchase Order "O"
      Initialize;
      DocumentType := PurchaseHeader."Document Type"::Order;
      ApprovedPurchaseDocumentScenario(DocumentType,PurchaseHeader);
      VerifyApprovalEntriesExist(PurchaseHeader.RECORDID);

      // [WHEN] Run Report "Delete Invoiced Purch. Orders"
      RunReport(
        REPORT::"Delete Invoiced Purch. Orders",
        DATABASE::"Purchase Header",
        PurchaseHeader.FIELDNO("No."),
        PurchaseHeader."No.");

      // [THEN] "O" deleted
      VerifyPurchaseDocumentDeleted(DocumentType,PurchaseHeader."No.");
      // [THEN] Approval Entries related to "O" are  deleted
      VerifyApprovalEntriesDeleted(PurchaseHeader.RECORDID);
    END;

    [Test]
    PROCEDURE DeleteApprovedInvoicedSalesOrder@199();
    VAR
      SalesHeader@1003 : Record 36;
      DocumentType@1000 : Option;
    BEGIN
      // [FEATURE] [Sales] [Approval Management]
      // [SCENARIO 363783] Report "Delete Invoiced Sales Orders" deletes Approval Entries related to deleted Sales Order
      // [GIVEN] Invoiced Sales Order "O"
      Initialize;
      DocumentType := SalesHeader."Document Type"::Order;
      ApprovedSalesDocumentScenario(DocumentType,SalesHeader);
      VerifyApprovalEntriesExist(SalesHeader.RECORDID);

      // [WHEN] Run Report "Delete Invoiced Sales Orders"
      RunReport(
        REPORT::"Delete Invoiced Sales Orders",
        DATABASE::"Sales Header",
        SalesHeader.FIELDNO("No."),
        SalesHeader."No.");

      // [THEN] "O" deleted
      VerifySalesDocumentDeleted(DocumentType,SalesHeader."No.");
      // [THEN] Approval Entries related to "O" are deleted
      VerifyApprovalEntriesDeleted(SalesHeader.RECORDID);
    END;

    [Test]
    PROCEDURE DeleteApprovedInvoicedPurchaseBlanketOrder@22();
    VAR
      PurchaseHeader@1002 : Record 38;
      DocumentType@1001 : Option;
    BEGIN
      // [FEATURE] [Purchase] [Approval Management]
      // [SCENARIO 363783] Report "Delete Invd Blnkt Purch Orders" deletes Approval Entries related to deleted Purchase Blanket Order
      // [GIVEN] Invoiced Purchase Blanket Order "O"
      Initialize;
      DocumentType := PurchaseHeader."Document Type"::"Blanket Order";
      ApprovedPurchaseDocumentScenario(DocumentType,PurchaseHeader);
      VerifyApprovalEntriesExist(PurchaseHeader.RECORDID);

      // [WHEN] Run Report "Delete Invd Blnkt Purch Orders"
      RunReport(
        REPORT::"Delete Invd Blnkt Purch Orders",
        DATABASE::"Purchase Header",
        PurchaseHeader.FIELDNO("No."),
        PurchaseHeader."No.");

      // [THEN] "O" deleted
      VerifyPurchaseDocumentDeleted(DocumentType,PurchaseHeader."No.");
      // [THEN] Approval Entries related to "O" are  deleted
      VerifyApprovalEntriesDeleted(PurchaseHeader.RECORDID);
    END;

    [Test]
    PROCEDURE DeleteApprovedInvoicedSalesBlanketOrder@16();
    VAR
      SalesHeader@1003 : Record 36;
      DocumentType@1000 : Option;
    BEGIN
      // [FEATURE] [Sales] [Approval Management]
      // [SCENARIO 363783] Report "Delete Invd Blnkt Sales Orders" deletes Approval Entries related to deleted Sales Blanket Order
      // [GIVEN] Invoiced Sales Blanket Order "O"
      Initialize;
      DocumentType := SalesHeader."Document Type"::"Blanket Order";
      ApprovedSalesDocumentScenario(DocumentType,SalesHeader);
      VerifyApprovalEntriesExist(SalesHeader.RECORDID);

      // [WHEN] Run Report "Delete Invd Blnkt Sales Orders"
      RunReport(
        REPORT::"Delete Invd Blnkt Sales Orders",
        DATABASE::"Sales Header",
        SalesHeader.FIELDNO("No."),
        SalesHeader."No.");

      // [THEN] "O" deleted
      VerifySalesDocumentDeleted(DocumentType,SalesHeader."No.");
      // [THEN] Approval Entries related to "O" are deleted
      VerifyApprovalEntriesDeleted(SalesHeader.RECORDID);
    END;

    [Test]
    PROCEDURE DeleteApprovedInvoicedPurchaseReturnOrder@29();
    VAR
      PurchaseHeader@1002 : Record 38;
      DocumentType@1001 : Option;
    BEGIN
      // [FEATURE] [Purchase] [Approval Management]
      // [SCENARIO 363783] Report "Delete Invd Purch. Ret. Orders" deletes Approval Entries related to deleted Purchase Return Order
      // [GIVEN] Invoiced Purchase Return Order "O"
      Initialize;
      DocumentType := PurchaseHeader."Document Type"::"Return Order";
      ApprovedPurchaseDocumentScenario(DocumentType,PurchaseHeader);
      VerifyApprovalEntriesExist(PurchaseHeader.RECORDID);

      // [WHEN] Run Report "Delete Invd Purch. Ret. Orders"
      RunReport(
        REPORT::"Delete Invd Purch. Ret. Orders",
        DATABASE::"Purchase Header",
        PurchaseHeader.FIELDNO("No."),
        PurchaseHeader."No.");

      // [THEN] "O" deleted
      VerifyPurchaseDocumentDeleted(DocumentType,PurchaseHeader."No.");
      // [THEN] Approval Entries related to "O" are  deleted
      VerifyApprovalEntriesDeleted(PurchaseHeader.RECORDID);
    END;

    [Test]
    PROCEDURE DeleteApprovedInvoicedSalesReturnOrder@26();
    VAR
      SalesHeader@1003 : Record 36;
      DocumentType@1000 : Option;
    BEGIN
      // [FEATURE] [Sales] [Approval Management]
      // [SCENARIO 363783] Report "Delete Invd Sales Ret. Orders" deletes Approval Entries related to deleted Sales Return Order
      // [GIVEN] Invoiced Sales Return Order "O"
      Initialize;
      DocumentType := SalesHeader."Document Type"::"Return Order";
      ApprovedSalesDocumentScenario(DocumentType,SalesHeader);
      VerifyApprovalEntriesExist(SalesHeader.RECORDID);

      // [WHEN] Run Report "Delete Invd Sales Ret. Orders"
      RunReport(
        REPORT::"Delete Invd Sales Ret. Orders",
        DATABASE::"Sales Header",
        SalesHeader.FIELDNO("No."),
        SalesHeader."No.");

      // [THEN] "O" deleted
      VerifySalesDocumentDeleted(DocumentType,SalesHeader."No.");
      // [THEN] Approval Entries related to "O" are deleted
      VerifyApprovalEntriesDeleted(SalesHeader.RECORDID);
    END;

    [Test]
    PROCEDURE DeleteApprovedInvoicedServiceOrder@30();
    VAR
      ServiceHeader@1003 : Record 5900;
      DocumentType@1000 : Option;
    BEGIN
      // [FEATURE] [Services] [Approval Management]
      // [SCENARIO 363783] Report "Delete Invoiced Service Orders" deletes Approval Entries related to deleted Service Order
      // [GIVEN] Invoiced Service Order "O"
      Initialize;
      DocumentType := ServiceHeader."Document Type"::Order;
      ApprovedServiceDocumentScenario(DocumentType,ServiceHeader);
      VerifyApprovalEntriesExist(ServiceHeader.RECORDID);

      // [WHEN] Run Report "Delete Invoiced Service Orders"
      RunReport(
        REPORT::"Delete Invoiced Service Orders",
        DATABASE::"Service Header",
        ServiceHeader.FIELDNO("No."),
        ServiceHeader."No.");

      // [THEN] "O" deleted
      VerifyServiceDocumentDeleted(DocumentType,ServiceHeader."No.");
      // [THEN] Approval Entries related to "O" are deleted
      VerifyApprovalEntriesDeleted(ServiceHeader.RECORDID);
    END;

    [Test]
    PROCEDURE BlanketAssemblyOrderAfterDeleteInvdBlnktSalesOrders@31();
    VAR
      SalesHeader@1001 : Record 36;
      AssemblyHeader@1003 : Record 900;
      ATOLink@1002 : Record 904;
    BEGIN
      // [FEATURE] [Blanket Order] [Sales] [Assembly]
      // [SCENARIO 377504] Report "Delete Invd Blnkt Sales Orders" should delete Blanket Assembly Order related to deleted Sales Blanket Order
      Initialize;

      // [GIVEN] Blanket Sales Order "S"
      MockSalesOrder(SalesHeader."Document Type"::"Blanket Order",SalesHeader);

      // [GIVEN] Blanket Assembly Order "A" related to "S"
      MockBlanketAssemblyOrder(SalesHeader."No.",AssemblyHeader,ATOLink);

      // [WHEN] Run Report "Delete Invd Blnkt Sales Orders"
      RunReport(REPORT::"Delete Invd Blnkt Sales Orders",DATABASE::"Sales Header",SalesHeader.FIELDNO("No."),SalesHeader."No.");

      // [THEN] Assembly Order "A" is deleted
      WITH AssemblyHeader DO BEGIN
        SETRANGE("Document Type","Document Type"::"Blanket Order");
        SETRANGE("No.","No.");
        Assert.RecordIsEmpty(AssemblyHeader);
      END;
    END;

    [Test]
    PROCEDURE BatchDeleteInvoicedSalesOrderWithItemCharge@178();
    VAR
      SalesHeader@1002 : Record 36;
      DocumentNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Delete Documents] [Order] [Sales]
      // [SCENARIO 208384] Test where the "Delete Invoiced Sales Orders" batch job delete Sales Order with Charge(Item) which is shipped and Invoiced.
      Initialize;

      // [GIVEN] Sales Order with Charge(Item)
      // [GIVEN] Post Sales Order with only Ship option
      // [GIVEN] New Sales Invoice for Posted Shipment Line.
      // [GIVEN] Post Sales Invoice
      // [GIVEN] Set Quantity to zero - Charge(Item) should not be more shipped and invoiced.
      DocumentNo := InvoicedSalesOrderWithItemCharge(SalesHeader);

      // [WHEN] Run Delete Invoiced Sales Order Batch report for above Order, that is already Ship and Invoiced.
      DeleteInvoiceSalesOrder(SalesHeader,DocumentNo);

      // [THEN] Since all lines do have a quantity to ship and quantity to invoice of 0, the complete sales order should be deleted.
      Assert.RecordIsEmpty(SalesHeader);
    END;

    [Test]
    PROCEDURE ManualDeleteInvoicedSalesOrderWithItemCharge@191();
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      // [FEATURE] [Delete Documents] [Order] [Sales]
      // [SCENARIO 208384] Manually delete Sales Order with Charge(Item) which is shipped and Invoiced.
      Initialize;

      // [GIVEN] Sales Order with Charge(Item)
      // [GIVEN] Post Sales Order with only Ship option
      // [GIVEN] New Sales Invoice for Posted Shipment Line.
      // [GIVEN] Post Sales Invoice
      // [GIVEN] Set Quantity to zero - Charge(Item) should not be more shipped and invoiced.
      InvoicedSalesOrderWithItemCharge(SalesHeader);

      // [WHEN] Manually delete Invoiced Sales Order
      SalesHeader.DELETE(TRUE);

      // [THEN] Since all lines do have a quantity to ship and quantity to invoice of 0, the complete sales order should be deleted.
      Assert.IsFalse(SalesHeader.FIND,DocumentStillExistsErr);
    END;

    [Test]
    PROCEDURE BatchDeleteInvoicedPurchaseOrderWithItemCharge@184();
    VAR
      PurchaseHeader@1002 : Record 38;
      DocumentNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Delete Documents] [Order] [Purchase]
      // [SCENARIO 208384] Test where the "Delete Invoiced Purchase Orders" batch job delete Purchase Order with Charge(Item) which is received and Invoiced.
      Initialize;

      // [GIVEN] Purchase Order with Charge(Item)
      // [GIVEN] Post Purchase Order with only Receive option
      // [GIVEN] New Purcase Invoice for Posted Received Line
      // [GIVEN] Post Purchase Invoice
      // [GIVEN] Set Quantity to zero - Charge(Item) should not be more received and invoiced.
      DocumentNo := InvoicedPurchaseOrderWithItemCharger(PurchaseHeader);

      // [WHEN] Run Delete Invoiced Purchase Order Batch report for above Order
      DeleteInvoicePurchOrder(PurchaseHeader,DocumentNo);

      // [THEN] Since all lines do have a quantity to received and quantity to invoice of 0, the complete Purchase order should be deleted.
      Assert.RecordIsEmpty(PurchaseHeader);
    END;

    [Test]
    PROCEDURE ManualDeleteInvoicedPurchaseOrderWithItemCharge@188();
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      // [FEATURE] [Delete Documents] [Order] [Purchase]
      // [SCENARIO 208384] Manually delete Purchase Order with Charge(Item) which is received and Invoiced.
      Initialize;

      // [GIVEN] Purchase Order with Charge(Item)
      // [GIVEN] Post Purchase Order with only Receive option
      // [GIVEN] New Purcase Invoice for Posted Received Line
      // [GIVEN] Post Purchase Invoice
      // [GIVEN] Set Quantity to zero - Charge(Item) should not be more received and invoiced
      InvoicedPurchaseOrderWithItemCharger(PurchaseHeader);

      // [WHEN] Manually delete Invoiced Purchase Order
      PurchaseHeader.DELETE(TRUE);

      // [THEN] Since all lines do have a quantity to received and quantity to invoice of 0, the complete Purchase order should be deleted.
      Assert.IsFalse(PurchaseHeader.FIND,DocumentStillExistsErr);
    END;

    LOCAL PROCEDURE Initialize@2();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ApprovedPurchaseDocumentScenario@218(DocumentType@1005 : Option;VAR PurchaseHeader@1006 : Record 38);
    VAR
      PurchaseLine@1003 : Record 39;
    BEGIN
      // Setup
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,'',LibraryRandom.RandInt(10));

      PurchaseHeader.Status := PurchaseHeader.Status::Released;
      PurchaseHeader.MODIFY;

      PurchaseLine."Quantity Invoiced" := PurchaseLine.Quantity;
      PurchaseLine."Qty. to Invoice" := 0;
      PurchaseLine."Quantity Received" := PurchaseLine.Quantity;
      PurchaseLine."Qty. to Receive" := 0;
      PurchaseLine."Outstanding Quantity" := 0;
      PurchaseLine."Qty. Rcd. Not Invoiced" := 0;
      PurchaseLine."Qty. Assigned" := PurchaseLine.Quantity;
      PurchaseLine.MODIFY;

      // Exercise
      MockApprovalEntry(PurchaseHeader.RECORDID);
    END;

    LOCAL PROCEDURE ApprovedSalesDocumentScenario@217(DocumentType@1005 : Option;VAR SalesHeader@1001 : Record 36);
    BEGIN
      // Setup
      MockSalesOrder(DocumentType,SalesHeader);

      // Exercise
      MockApprovalEntry(SalesHeader.RECORDID);
    END;

    LOCAL PROCEDURE ApprovedServiceDocumentScenario@46(DocumentType@1005 : Option;VAR ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1003 : Record 5902;
    BEGIN
      // Setup

      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,'');
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,'');

      ServiceHeader.Status := ServiceHeader.Status::Finished;
      ServiceHeader.MODIFY;

      ServiceLine.Quantity := LibraryRandom.RandInt(10);
      ServiceLine."Quantity Invoiced" := ServiceLine.Quantity;
      ServiceLine."Qty. to Invoice" := 0;
      ServiceLine."Quantity Shipped" := ServiceLine.Quantity;
      ServiceLine."Qty. to Ship" := 0;
      ServiceLine."Outstanding Quantity" := 0;
      ServiceLine."Qty. Shipped Not Invoiced" := 0;

      ServiceLine.MODIFY;

      // Exercise
      MockApprovalEntry(ServiceHeader.RECORDID);
    END;

    LOCAL PROCEDURE CreateItem@24() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandInt(100));  // Using RANDOM value for Unit Price.
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateVendor@1() : Code[20];
    VAR
      Vendor@1001 : Record 23;
      VATPostingSetup@1000 : Record 325;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@23(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;DocumentType@1003 : Option);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      // LibraryRandom used for Random Quantity.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE CreateSalesDocument@162(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1003 : Option);
    VAR
      Customer@1002 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,Customer."No.");
      // LibraryRandom used for Random Quantity.
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE FilterPurchaseHeaders@9(VAR PurchaseHeader@1000 : Record 38;DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      PurchaseHeader.SETRANGE("Document Type",DocumentType);
      PurchaseHeader.SETRANGE("No.",DocumentNo);
    END;

    LOCAL PROCEDURE FilterPurchaseLines@15(VAR PurchaseLine@1002 : Record 39;DocumentType@1001 : Option;DocumentNo@1000 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",DocumentType);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
    END;

    LOCAL PROCEDURE FilterSalesHeaders@11(VAR SalesHeader@1002 : Record 36;DocumentType@1001 : Option;DocumentNo@1000 : Code[20]);
    BEGIN
      SalesHeader.SETRANGE("Document Type",DocumentType);
      SalesHeader.SETRANGE("No.",DocumentNo);
    END;

    LOCAL PROCEDURE FilterSalesLines@21(VAR SalesLine@1002 : Record 37;DocumentType@1001 : Option;DocumentNo@1000 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",DocumentNo);
    END;

    LOCAL PROCEDURE FilterServiceHeaders@28(VAR ServiceHeader@1002 : Record 5900;DocumentType@1001 : Option;DocumentNo@1000 : Code[20]);
    BEGIN
      ServiceHeader.SETRANGE("Document Type",DocumentType);
      ServiceHeader.SETRANGE("No.",DocumentNo);
    END;

    LOCAL PROCEDURE FilterServiceLines@27(VAR ServiceLine@1002 : Record 5902;DocumentType@1001 : Option;DocumentNo@1000 : Code[20]);
    BEGIN
      ServiceLine.SETRANGE("Document Type",DocumentType);
      ServiceLine.SETRANGE("No.",DocumentNo);
    END;

    LOCAL PROCEDURE FindPurchaseHeaderArchive@63(VAR PurchaseHeaderArchive@1001 : Record 5109;DocumentType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';No@1002 : Code[20]);
    BEGIN
      PurchaseHeaderArchive.SETRANGE("Document Type",DocumentType);
      PurchaseHeaderArchive.SETRANGE("No.",No);
      PurchaseHeaderArchive.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesHeaderArchive@75(VAR SalesHeaderArchive@1001 : Record 5107;DocumentType@1000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';No@1002 : Code[20]);
    BEGIN
      SalesHeaderArchive.SETRANGE("Document Type",DocumentType);
      SalesHeaderArchive.SETRANGE("No.",No);
      SalesHeaderArchive.FINDFIRST;
    END;

    LOCAL PROCEDURE MockApprovalEntry@208(SourceRecordID@1000 : RecordID);
    VAR
      ApprovalEntry@1004 : Record 454;
    BEGIN
      WITH ApprovalEntry DO BEGIN
        INIT;
        "Sequence No." := 1;
        "Table ID" := SourceRecordID.TABLENO;
        "Sender ID" := USERID;
        "Record ID to Approve" := SourceRecordID;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockSalesOrder@32(DocumentType@1003 : Option;VAR SalesHeader@1002 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
      Item@1000 : Record 27;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,LibrarySales.CreateCustomerNo);
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));

      SalesHeader.Status := SalesHeader.Status::Released;
      SalesHeader.MODIFY;

      WITH SalesLine DO BEGIN
        "Quantity Invoiced" := Quantity;
        "Qty. to Invoice" := 0;
        "Quantity Shipped" := Quantity;
        "Qty. to Ship" := 0;
        "Outstanding Quantity" := 0;
        "Qty. Shipped Not Invoiced" := 0;
        "Qty. Assigned" := Quantity;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE MockBlanketAssemblyOrder@38(SalesHeaderNo@1002 : Code[20];VAR AssemblyHeader@1004 : Record 900;VAR ATOLink@1003 : Record 904);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type","Document Type"::"Blanket Order");
        SETRANGE("Document No.",SalesHeaderNo);
        FINDFIRST;
        "Qty. to Assemble to Order" := LibraryRandom.RandInt(10);
        MODIFY;
      END;

      WITH AssemblyHeader DO BEGIN
        INIT;
        "Document Type" := "Document Type"::"Blanket Order";
        "No." := LibraryUtility.GenerateGUID;
        INSERT;
      END;

      WITH ATOLink DO BEGIN
        INIT;
        Type := Type::Sale;
        "Assembly Document Type" := "Assembly Document Type"::"Blanket Order";
        "Assembly Document No." := AssemblyHeader."No.";
        "Document Type" := "Document Type"::"Blanket Order";
        "Document No." := SalesHeaderNo;
        "Document Line No." := SalesLine."Line No.";
        INSERT;
      END;
    END;

    LOCAL PROCEDURE RunDeletePurchaseQuoteVersion@25(PostedDocumentNo@1000 : Code[20]);
    VAR
      PurchaseHeaderArchive@1001 : Record 5109;
      DeletePurchaseQuoteVersions@1002 : Report 5177;
    BEGIN
      FindPurchaseHeaderArchive(PurchaseHeaderArchive,PurchaseHeaderArchive."Document Type"::Quote,PostedDocumentNo);
      DeletePurchaseQuoteVersions.USEREQUESTPAGE(FALSE);
      DeletePurchaseQuoteVersions.SETTABLEVIEW(PurchaseHeaderArchive);
      DeletePurchaseQuoteVersions.RUN;
    END;

    LOCAL PROCEDURE RunDeletePurchaseOrderVersion@53(PurchaseOrderNo@1002 : Code[20]);
    VAR
      PurchaseHeaderArchive@1000 : Record 5109;
      DeletePurchaseOrderVersions@1001 : Report 5178;
    BEGIN
      FindPurchaseHeaderArchive(PurchaseHeaderArchive,PurchaseHeaderArchive."Document Type"::Order,PurchaseOrderNo);
      DeletePurchaseOrderVersions.USEREQUESTPAGE(FALSE);
      DeletePurchaseOrderVersions.SETTABLEVIEW(PurchaseHeaderArchive);
      DeletePurchaseOrderVersions.RUN;
    END;

    LOCAL PROCEDURE RunDeleteSalesQuoteVersion@70(SalesQuoteNo@1000 : Code[20]);
    VAR
      SalesHeaderArchive@1001 : Record 5107;
      DeleteSalesQuoteVersions@1002 : Report 5179;
    BEGIN
      FindSalesHeaderArchive(SalesHeaderArchive,SalesHeaderArchive."Document Type"::Quote,SalesQuoteNo);
      DeleteSalesQuoteVersions.USEREQUESTPAGE(FALSE);
      DeleteSalesQuoteVersions.SETTABLEVIEW(SalesHeaderArchive);
      DeleteSalesQuoteVersions.RUN;
    END;

    LOCAL PROCEDURE RunDeleteSalesOrderVersion@77(SalesOrderNo@1002 : Code[20]);
    VAR
      SalesHeaderArchive@1000 : Record 5107;
      DeleteSalesOrderVersions@1001 : Report 5180;
    BEGIN
      FindSalesHeaderArchive(SalesHeaderArchive,SalesHeaderArchive."Document Type"::Order,SalesOrderNo);
      DeleteSalesOrderVersions.USEREQUESTPAGE(FALSE);
      DeleteSalesOrderVersions.SETTABLEVIEW(SalesHeaderArchive);
      DeleteSalesOrderVersions.RUN;
    END;

    LOCAL PROCEDURE RunReport@40(ReportNo@1000 : Integer;TableNo@1002 : Integer;FieldNo@1003 : Integer;FieldFilter@1004 : Variant);
    VAR
      RecRef@1001 : RecordRef;
      FieldRef@1005 : FieldRef;
      RecVar@1007 : Variant;
    BEGIN
      RecRef.OPEN(TableNo);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.SETRANGE(FieldFilter);
      RecVar := RecRef;
      REPORT.RUN(ReportNo,FALSE,FALSE,RecVar);
      RecRef.CLOSE;
    END;

    LOCAL PROCEDURE UpdateStockOutWarning@58(NewStockOutWarning@1001 : Boolean) OldStockOutWarning : Boolean;
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      OldStockOutWarning := SalesReceivablesSetup."Stockout Warning";
      SalesReceivablesSetup.VALIDATE("Stockout Warning",NewStockOutWarning);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyPurchaseLineArchive@42(PurchaseLine@1000 : Record 39;PostedDocumentNo@1004 : Code[20]);
    VAR
      PurchaseLineArchive@1002 : Record 5110;
    BEGIN
      PurchaseLineArchive.SETRANGE("Document No.",PostedDocumentNo);
      PurchaseLineArchive.FINDFIRST;
      PurchaseLineArchive.TESTFIELD("No.",PurchaseLine."No.");
      PurchaseLineArchive.TESTFIELD("Unit of Measure Code",PurchaseLine."Unit of Measure Code");
      PurchaseLineArchive.TESTFIELD(Quantity,PurchaseLine.Quantity);
    END;

    LOCAL PROCEDURE VerifySalesLineArchive@5(SalesLine@1000 : Record 37;PostedDocumentNo@1004 : Code[20]);
    VAR
      SalesLineArchive@1002 : Record 5108;
    BEGIN
      SalesLineArchive.SETRANGE("Document No.",PostedDocumentNo);
      SalesLineArchive.FINDFIRST;
      SalesLineArchive.TESTFIELD("No.",SalesLine."No.");
      SalesLineArchive.TESTFIELD("Unit of Measure Code",SalesLine."Unit of Measure Code");
      SalesLineArchive.TESTFIELD(Quantity,SalesLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyApprovalEntriesExist@223(SourceRecordID@1001 : RecordID);
    VAR
      ApprovalEntry@1000 : Record 454;
    BEGIN
      ApprovalEntry.INIT;
      ApprovalEntry.SETRANGE("Record ID to Approve",SourceRecordID);
      Assert.RecordIsNotEmpty(ApprovalEntry);
    END;

    LOCAL PROCEDURE VerifyApprovalEntriesDeleted@222(SourceRecordID@1001 : RecordID);
    VAR
      ApprovalEntry@1000 : Record 454;
    BEGIN
      ApprovalEntry.INIT;
      ApprovalEntry.SETRANGE("Record ID to Approve",SourceRecordID);
      Assert.RecordIsEmpty(ApprovalEntry)
    END;

    LOCAL PROCEDURE VerifyPurchaseDocumentDeleted@232(DocumentType@1002 : Option;DocumentNo@1003 : Code[20]);
    VAR
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
    BEGIN
      FilterPurchaseHeaders(PurchaseHeader,DocumentType,DocumentNo);
      Assert.RecordIsEmpty(PurchaseHeader);
      FilterPurchaseLines(PurchaseLine,DocumentType,DocumentNo);
      Assert.RecordIsEmpty(PurchaseLine);
    END;

    LOCAL PROCEDURE VerifySalesDocumentDeleted@37(DocumentType@1002 : Option;DocumentNo@1003 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      FilterSalesHeaders(SalesHeader,DocumentType,DocumentNo);
      Assert.RecordIsEmpty(SalesHeader);
      FilterSalesLines(SalesLine,DocumentType,DocumentNo);
      Assert.RecordIsEmpty(SalesLine);
    END;

    LOCAL PROCEDURE VerifyServiceDocumentDeleted@39(DocumentType@1002 : Option;DocumentNo@1003 : Code[20]);
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1001 : Record 5902;
    BEGIN
      FilterServiceHeaders(ServiceHeader,DocumentType,DocumentNo);
      Assert.RecordIsEmpty(ServiceHeader);
      FilterServiceLines(ServiceLine,DocumentType,DocumentNo);
      Assert.RecordIsEmpty(ServiceLine);
    END;

    LOCAL PROCEDURE InvoicedSalesOrderWithItemCharge@206(VAR SalesHeader@1001 : Record 36) DocumentNo : Text[20];
    VAR
      SalesLine@1003 : Record 37;
      SalesInvoiceHeader@1006 : Record 36;
      SalesShipmentLine@1017 : Record 111;
      ReleaseSalesDocument@1000 : Codeunit 414;
      SalesGetShipment@1008 : Codeunit 64;
    BEGIN
      LibrarySales.SetStockoutWarning(FALSE);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"Charge (Item)",LibraryInventory.CreateItemChargeNo,LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(1000,2));
      SalesLine.VALIDATE("Qty. to Ship",0);
      SalesLine.MODIFY(TRUE);

      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      LibrarySales.CreateSalesHeader(
        SalesInvoiceHeader,SalesInvoiceHeader."Document Type"::Invoice,SalesHeader."Bill-to Customer No.");

      SalesGetShipment.SetSalesHeader(SalesInvoiceHeader);
      SalesShipmentLine.SETRANGE("Document No.",DocumentNo);
      SalesGetShipment.CreateInvLines(SalesShipmentLine);

      LibrarySales.PostSalesDocument(SalesInvoiceHeader,TRUE,TRUE);

      SalesHeader.FIND;
      ReleaseSalesDocument.Reopen(SalesHeader);
      SalesLine.FIND;
      SalesLine.VALIDATE(Quantity,0);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InvoicedPurchaseOrderWithItemCharger@185(VAR PurchaseHeader@1002 : Record 38) DocumentNo : Code[20];
    VAR
      PurchaseLine@1001 : Record 39;
      PurchaseInvoiceHeader@1006 : Record 38;
      PurchRcptLine@1005 : Record 121;
      ReleasePurchaseDocument@1000 : Codeunit 415;
      PurchGetReceipt@1003 : Codeunit 74;
    BEGIN
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,PurchaseLine."Document Type"::Order);
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,'','',LibraryRandom.RandDec(10,2),'',0D);

      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",LibraryInventory.CreateItemChargeNo,LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(1000,2));
      PurchaseLine.VALIDATE("Qty. to Receive",0);
      PurchaseLine.MODIFY(TRUE);

      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      LibraryPurchase.CreatePurchHeader(
        PurchaseInvoiceHeader,PurchaseInvoiceHeader."Document Type"::Invoice,PurchaseHeader."Buy-from Vendor No.");

      PurchGetReceipt.SetPurchHeader(PurchaseInvoiceHeader);
      PurchRcptLine.SETRANGE("Document No.",DocumentNo);
      PurchGetReceipt.CreateInvLines(PurchRcptLine);

      LibraryPurchase.PostPurchaseDocument(PurchaseInvoiceHeader,TRUE,TRUE);

      PurchaseHeader.FIND;
      ReleasePurchaseDocument.Reopen(PurchaseHeader);
      PurchaseLine.FIND;
      PurchaseLine.VALIDATE(Quantity,0);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DeleteInvoiceSalesOrder@33(VAR SalesHeader@1002 : Record 36;DocumentNo@1001 : Code[20]);
    VAR
      DeleteInvoicedSalesOrders@1000 : Report 299;
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("No.",DocumentNo);
      DeleteInvoicedSalesOrders.SETTABLEVIEW(SalesHeader);
      DeleteInvoicedSalesOrders.USEREQUESTPAGE(FALSE);
      DeleteInvoicedSalesOrders.RUN;
    END;

    LOCAL PROCEDURE DeleteInvoicePurchOrder@202(VAR PurchaseHeader@1002 : Record 38;DocumentNo@1001 : Code[20]);
    VAR
      DeleteInvoicedPurchOrders@1000 : Report 499;
    BEGIN
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseHeader.SETRANGE("No.",DocumentNo);
      DeleteInvoicedPurchOrders.SETTABLEVIEW(PurchaseHeader);
      DeleteInvoicedPurchOrders.USEREQUESTPAGE(FALSE);
      DeleteInvoicedPurchOrders.RUN;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@18(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      1. Check the functionality of Purchase Quote Archive.
      2. Check the functionality of Purchase Quote Archive while making it into Order.
      3. Check the functionality of Purchase Quote Archive,Release,making an Order and delete Archived version.
      4. Check the functionality of Purchase Order Archive.
      5. Check the functionality of Purchase Order Archive while posting an Order.
      6. Check the functionality of Purchase Order Archive,Release,Posting and delete Archived version.
      7. Check the functionality of Sales Quote Archive.
      8. Check the functionality of Sales Quote Archive while making it into Order.
      9. Check the functionality of Sales Quote Archive,Release,making an Order and delete Archived version.
      10. Check the functionality of Sales Order Archive.
      11. Check the functionality of Sales Order Archive while posting an Order.
      12. Check the functionality of Sales Order Archive,Release,Posting and delete Archived version.

      Cover Test cases for Workitem: 251009
      --------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                 Test TFS ID
      --------------------------------------------------------------------------------------------------------------
      ReleaseAndArchivePurchaseQuote,                                                                     129043
      MakeOrderFromPurchaseQuote,ArchiveAndDeletePurchaseQuote                                            129043
      ReleaseAndArchivePurchaseOrder,                                                                     141541
      CreateAndPostPurchaseOrder,DeleteArchivePurchaseOrder                                               141541

      Cover Test cases for Workitem: 251014
      --------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                 Test TFS ID
      --------------------------------------------------------------------------------------------------------------
      ReleaseAndArchiveSalesQuote,                                                                        129045
      MakeOrderFromSalesQuote,ArchiveAndDeleteSalesQuote,                                                 129045
      ReleaseAndArchiveSalesOrder,                                                                        129046
      CreateAndPostSalesOrder,DeleteArchiveSalesOrder                                                     129046
    }
    END.
  }
}

