OBJECT Codeunit 136202 Marketing Document Logging
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryUtility@1003 : Codeunit 131000;
      LibrarySales@1005 : Codeunit 130509;
      LibraryERMCountryData@1007 : Codeunit 131305;
      LibraryInventory@1011 : Codeunit 132201;
      LibraryMarketing@1012 : Codeunit 131900;
      LibraryERM@1013 : Codeunit 131300;
      LibraryReportDataset@1009 : Codeunit 131007;
      Assert@1001 : Codeunit 130000;
      LibraryRandom@1006 : Codeunit 130440;
      IsInitialized@1000 : Boolean;
      ArchivedSalesHeaderError@1004 : TextConst 'ENU="%1 %2=%3, %4=%5 must not exist."';

    LOCAL PROCEDURE Initialize@4();
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibrarySales.SetCreditWarningsToNoWarnings;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE ArchiveQuote@1();
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      // Covers document number TC0046 - refer to TFS ID 21739.
      // Test Sales Line Archive after Archived Sales Quote.

      ArchiveSalesDocument(SalesLine."Document Type"::Quote);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE ArchiveOrder@3();
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      // Covers document number TC0046 - refer to TFS ID 21739.
      // Test Sales Line Archive after Archived Sales Order.

      ArchiveSalesDocument(SalesLine."Document Type"::Order);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE ArchiveReturnOrder@6();
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      // Covers document number TC0046 - refer to TFS ID 21739.
      // Test Sales Line Archive after Archived Sales Return Order.

      ArchiveSalesDocument(SalesLine."Document Type"::"Return Order");
    END;

    LOCAL PROCEDURE ArchiveSalesDocument@22(DocumentType@1007 : Option);
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      ArchiveManagement@1005 : Codeunit 5063;
    BEGIN
      // 1. Setup: Create Sales Header and Sales Line with Type Item.
      CreateSalesDocumentWithItem(SalesHeader,SalesLine,DocumentType);

      // 2. Exercise: Archive the Sales Document.
      ArchiveManagement.ArchiveSalesDocument(SalesHeader);

      // 3. Verify: Verify the Created Sales Line Archive from Sales Document.
      VerifySalesLineArchive(SalesLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE ArchiveQuoteTwice@17();
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      // Covers document number TC0046 - refer to TFS ID 21739.
      // Test Sales Line Archive after Archived Sales Quote in Multiple Steps.

      ArchiveSalesDocumentTwice(SalesLine."Document Type"::Quote);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE ArchiveOrderTwice@16();
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      // Covers document number TC0046 - refer to TFS ID 21739.
      // Test Sales Line Archive after Archived Sales Order in Multiple Steps.

      ArchiveSalesDocumentTwice(SalesLine."Document Type"::Order);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE ArchiveReturnOrderTwice@15();
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      // Covers document number TC0046 - refer to TFS ID 21739.
      // Test Sales Line Archive after Archived Sales Return Order in Multiple Steps.

      ArchiveSalesDocumentTwice(SalesLine."Document Type"::"Return Order");
    END;

    LOCAL PROCEDURE ArchiveSalesDocumentTwice@2(DocumentType@1007 : Option);
    VAR
      Resource@1008 : Record 156;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      LibraryResource@1000 : Codeunit 130511;
      ArchiveManagement@1005 : Codeunit 5063;
    BEGIN
      // 1. Setup: Create Sales Header and Sales Line with Type Item.
      CreateSalesDocumentWithItem(SalesHeader,SalesLine,DocumentType);

      // 2. Exercise: Archive the Sales Document, Create new Sales Line with Type Resource and again Archive the Sales Document.
      ArchiveManagement.ArchiveSalesDocument(SalesHeader);
      LibraryResource.FindResource(Resource);

      // Use Random because value is not important.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Resource,Resource."No.",RANDOM(10));
      ArchiveManagement.ArchiveSalesDocument(SalesHeader);

      // 3. Verify: Verify the Created Sales Line Archive from Sales Document.
      VerifySalesLineArchive(SalesLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandlerFalse)]
    PROCEDURE InteractionLogEntryQuote@7();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      InteractionLogEntry@1000 : Record 5065;
      SalesQuote@1007 : Report 204;
      FilePath@1010 : Text[1024];
    BEGIN
      // Covers document number TC0047 - refer to TFS ID 21739.
      // Test Sales Quote Report and Interaction Log entry.

      // 1. Setup: Create Sales Header and Sales Line with Type Item.
      CreateSalesDocumentWithItem(SalesHeader,SalesLine,SalesHeader."Document Type"::Quote);

      // 2. Exercise: Run Sales Quote Report with Log Interaction and Archive Document True, Save it as as XML and XLSX in
      // local Temp folder.
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      SalesQuote.SETTABLEVIEW(SalesHeader);
      SalesQuote.InitializeRequest(1,FALSE,TRUE,TRUE,TRUE);
      FilePath := TEMPORARYPATH + FORMAT(SalesHeader."Document Type") + SalesHeader."No." + '.xlsx';
      SalesQuote.SAVEASEXCEL(FilePath);

      // 3. Verify: Verfiy Saved Report have some data and Interaction Log Entry.
      LibraryUtility.CheckFileNotEmpty(FilePath);
      InteractionLogEntry.SETRANGE("Contact No.",SalesHeader."Bill-to Contact No.");
      InteractionLogEntry.SETRANGE("Document No.",SalesHeader."No.");
      InteractionLogEntry.FINDFIRST;
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE RestoreQuoteFromQuote@14();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Covers document number TC0048 - refer to TFS ID 21739.
      // Test Sales Quote Successfully Restored from Archived Sales Quote.

      RestoreSalesDocument(SalesHeader."Document Type"::Quote);
    END;

    [Test]
    PROCEDURE InteractionLogEntryOrder@37();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      InteractionLogEntry@1009 : Record 5065;
      OrderConfirmation@1000 : Report 205;
      FilePath@1010 : Text[1024];
    BEGIN
      // Covers document number TC0049 - refer to TFS ID 21739.
      // Test Order Confirmation Report and Interaction Log entry.

      // 1. Setup: Create Sales Header and Sales Line with Type Item.
      CreateSalesDocumentWithItem(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);

      // 2. Exercise: Run Order Confirmation Report with Log Interaction and Archive Document True, Save it as as XML and XLSX in
      // local Temp folder.
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      OrderConfirmation.SETTABLEVIEW(SalesHeader);
      OrderConfirmation.InitializeRequest(1,FALSE,TRUE,TRUE,TRUE,FALSE);
      FilePath := TEMPORARYPATH + FORMAT(SalesHeader."Document Type") + SalesHeader."No." + '.xlsx';
      OrderConfirmation.SAVEASEXCEL(FilePath);

      // 3. Verify: Verfiy Saved Report have some data and Interaction Log Entry.
      LibraryUtility.CheckFileNotEmpty(FilePath);
      InteractionLogEntry.SETRANGE("Contact No.",SalesHeader."Bill-to Contact No.");
      InteractionLogEntry.SETRANGE("Document No.",SalesHeader."No.");
      InteractionLogEntry.FINDFIRST;
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE RestoreOrderFromOrder@18();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Covers document number TC0049 - refer to TFS ID 21739.
      // Test Sales Order Successfully Restored from Archived Sales Order.

      RestoreSalesDocument(SalesHeader."Document Type"::Order);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE RestoreReturnOrderFromOrder@19();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Covers document number TC0049 - refer to TFS ID 21739.
      // Test Sales Return Order Successfully Restored from Archived Sales Return Order.

      RestoreSalesDocument(SalesHeader."Document Type"::"Return Order");
    END;

    LOCAL PROCEDURE RestoreSalesDocument@8(DocumentType@1009 : Option);
    VAR
      Resource@1008 : Record 156;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      SalesHeaderArchive@1007 : Record 5107;
      LibraryResource@1000 : Codeunit 130511;
      ArchiveManagement@1005 : Codeunit 5063;
    BEGIN
      // 1. Setup: Create Sales Header, Sales Line with Type Item, Archive the Sales Document, Create new Sales Line for Type Resource and
      // again Archive Sales Document.
      CreateSalesDocumentWithItem(SalesHeader,SalesLine,DocumentType);
      ArchiveManagement.ArchiveSalesDocument(SalesHeader);
      LibraryResource.FindResource(Resource);

      // Use Random because value is not important.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Resource,Resource."No.",RANDOM(10));
      ArchiveManagement.ArchiveSalesDocument(SalesHeader);

      // 2. Exercise: Restore the Sales Document from first archived Sales Document.
      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeaderArchive.SETRANGE("No.",SalesHeader."No.");
      SalesHeaderArchive.FINDFIRST;
      ArchiveManagement.RestoreSalesDocument(SalesHeaderArchive);

      // 3. Verify: Verify Sales Line after Restore Sales Document.
      VerifySalesLine(SalesHeaderArchive);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE CheckCommentsQuote@40();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Covers document number TC0050 - refer to TFS ID 21739.
      // Test Comments on Sales Quote Restored from Archived Sales Quote.

      CheckCommentsSalesDocument(SalesHeader."Document Type"::Quote);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE CheckCommentsOrder@10();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Covers document number TC0050 - refer to TFS ID 21739.
      // Test Comments on Sales Order Restored from Archived Sales Order.

      CheckCommentsSalesDocument(SalesHeader."Document Type"::Order);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE CheckCommentsReturnOrder@11();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      // Covers document number TC0050 - refer to TFS ID 21739.
      // Test Comments on Sales Return Order Restored from Archived Sales Return Order.

      CheckCommentsSalesDocument(SalesHeader."Document Type"::"Return Order");
    END;

    LOCAL PROCEDURE CheckCommentsSalesDocument@9(DocumentType@1009 : Option);
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      SalesHeaderArchive@1007 : Record 5107;
      SalesCommentLine@1010 : Record 44;
      ArchiveManagement@1005 : Codeunit 5063;
      Comment@1000 : Text[80];
      Comment2@1002 : Text[80];
    BEGIN
      // 1. Setup: Create Sales Header, Sales Line with Type Item, Create Comments for Sales Header and Sales Line, Archive the Sales
      // Document.
      CreateSalesDocumentWithItem(SalesHeader,SalesLine,DocumentType);
      LibrarySales.CreateSalesCommentLine(SalesCommentLine,DocumentType,SalesHeader."No.",0);
      Comment := SalesCommentLine.Comment;
      LibrarySales.CreateSalesCommentLine(SalesCommentLine,DocumentType,SalesHeader."No.",SalesLine."Line No.");
      Comment2 := SalesCommentLine.Comment;
      ArchiveManagement.ArchiveSalesDocument(SalesHeader);

      // 2. Exercise: Delete Comments for Sales Header and Sales Line, Restore the Archived Sales Document.
      SalesCommentLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesCommentLine.SETRANGE("No.",SalesHeader."No.");
      SalesCommentLine.DELETEALL(TRUE);

      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeaderArchive.SETRANGE("No.",SalesHeader."No.");
      SalesHeaderArchive.FINDFIRST;
      ArchiveManagement.RestoreSalesDocument(SalesHeaderArchive);

      // 3. Verify: Verify Comments on Service Header and Service Line.
      VerifySalesCommentLine(SalesHeader,0,Comment);
      VerifySalesCommentLine(SalesHeader,SalesLine."Line No.",Comment2);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE CommentsArchivePurchQuote@29();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Covers document number TC0050 - refer to TFS ID 21739.
      // Test Comments on Archived Purchase Quote.

      CheckCommentsPurchaseDocument(PurchaseHeader."Document Type"::Quote);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE CommentsArchivePurchOrder@32();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Covers document number TC0050 - refer to TFS ID 21739.
      // Test Comments on Archived Purchase Order.

      CheckCommentsPurchaseDocument(PurchaseHeader."Document Type"::Order);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE CommentsArchivePurchReturn@33();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Covers document number TC0050 - refer to TFS ID 21739.
      // Test Comments on Archived Purchase Return Order.

      CheckCommentsPurchaseDocument(PurchaseHeader."Document Type"::"Return Order");
    END;

    LOCAL PROCEDURE CheckCommentsPurchaseDocument@12(DocumentType@1009 : Option);
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      PurchCommentLine@1010 : Record 43;
      PurchCommentLine2@1011 : Record 43;
      LibraryPurchase@1001 : Codeunit 130512;
      ArchiveManagement@1005 : Codeunit 5063;
    BEGIN
      // 1. Setup: Create Purchase Header, Purchase Line with Type Item.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,'');
      // Use Random because value is not important.
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",RANDOM(10));

      // 2. Exercise: Create Comments for Purchase Header and Purchase Line, Archive the Purchase Document.
      LibraryPurchase.CreatePurchCommentLine(PurchCommentLine,DocumentType,PurchaseHeader."No.",0);  // Use 0 for Purchase Header.
      LibraryPurchase.CreatePurchCommentLine(PurchCommentLine2,DocumentType,PurchaseHeader."No.",PurchaseLine."Line No.");
      ArchiveManagement.ArchivePurchDocument(PurchaseHeader);

      // 3. Verify: Verify Comments on Archived Purchase Document.
      VerifyPurchaseComments(PurchCommentLine);
      VerifyPurchaseComments(PurchCommentLine2);
    END;

    [Test]
    PROCEDURE NoArchiveDocumentOnMakeOrder@41();
    VAR
      SalesHeader@1001 : Record 36;
      SalesHeaderArchive@1004 : Record 5107;
      DefaultValue@1002 : Boolean;
    BEGIN
      // Covers document number TC0051 - refer to TFS ID 21739.
      // Test No Archive Sales Quote created after make Order from Sales Quote with Archive Quotes and Orders False.

      // 1. Create Sales Header and Sales Line with Type Item, Modify Sales & Receivable Setup for Archive Quotes And Order field False,
      // stockout warning to false and Make Order from Sales Quote.
      CreateOrderFromQuote(SalesHeader,DefaultValue,FALSE);

      // 2. Verify: Verify Sales Header Archive not Created.
      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeaderArchive.SETRANGE("No.",SalesHeader."No.");
      Assert.IsFalse(
        SalesHeaderArchive.FINDFIRST,
        STRSUBSTNO(
          ArchivedSalesHeaderError,SalesHeaderArchive.TABLECAPTION,SalesHeaderArchive.FIELDCAPTION("Document Type"),
          SalesHeaderArchive."Document Type",SalesHeaderArchive.FIELDCAPTION("No."),SalesHeaderArchive."No."));

      // 3. Teardown: Update the sales & Receivable Setup to Default value.
      UpdateSalesAndReceivableSetup(DefaultValue);
    END;

    [Test]
    PROCEDURE ArchiveDocumentOnMakeOrder@52();
    VAR
      SalesHeader@1001 : Record 36;
      SalesHeaderArchive@1004 : Record 5107;
      DefaultValue@1002 : Boolean;
    BEGIN
      // Covers document number TC0051 - refer to TFS ID 21739.
      // Test Archive Sales Quote created after make Order from Sales Quote with Archive Quotes and Orders True.

      // 1. Create Sales Header and Sales Line with Type Item, Modify Sales & Receivable Setup for Archive Quotes And Order field True,
      // stockout warning to false and Make Order from Sales Quote.
      CreateOrderFromQuote(SalesHeader,DefaultValue,TRUE);

      // 2. Verify: Verify Sales Header Archive Created.
      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeaderArchive.SETRANGE("No.",SalesHeader."No.");
      SalesHeaderArchive.FINDFIRST;

      // 3. Teardown: Update the sales & Receivable Setup to Default value.
      UpdateSalesAndReceivableSetup(DefaultValue);
    END;

    [Test]
    PROCEDURE NoArchiveDocumentOnShipOrder@23();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      SalesHeaderArchive@1004 : Record 5107;
      ArchiveQuoteOrderDefaultValue@1002 : Boolean;
    BEGIN
      // Covers document number TC0052 - refer to TFS ID 21739.
      // Test No Archive Sales Order created on Posting Service Order as Ship with Archive Quotes and Orders False.

      // 1. Setup: Create Sales Header and Sales Line with Type Item, Modify Sales & Receivable Setup for Archive Quotes And
      // Order field False.
      CreateSalesDocumentWithItem(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);
      ArchiveQuoteOrderDefaultValue := UpdateSalesAndReceivableSetup(FALSE);

      // 2. Exercise: Post Sales Order as Ship.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // 3. Verify: Verify Sales Header Archive not Created.
      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeaderArchive.SETRANGE("No.",SalesHeader."No.");
      Assert.IsFalse(
        SalesHeaderArchive.FINDFIRST,
        STRSUBSTNO(
          ArchivedSalesHeaderError,SalesHeaderArchive.TABLECAPTION,SalesHeaderArchive.FIELDCAPTION("Document Type"),
          SalesHeaderArchive."Document Type",SalesHeaderArchive.FIELDCAPTION("No."),SalesHeaderArchive."No."));

      // 4. Teardown: Update the sales & Receivable Setup to Default value.
      UpdateSalesAndReceivableSetup(ArchiveQuoteOrderDefaultValue);
    END;

    [Test]
    PROCEDURE ArchiveDocumentOnShipOrder@21();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      SalesHeaderArchive@1004 : Record 5107;
      ArchiveQuoteOrderDefaultValue@1002 : Boolean;
    BEGIN
      // Covers document number TC0052 - refer to TFS ID 21739.
      // Test Archive Sales Order created on Posting Service Order as Ship with Archive Quotes and Orders True.

      // 1. Setup: Create Sales Header and Sales Line with Type Item, Modify Sales & Receivable Setup for Archive Quotes And
      // Order field True.
      CreateSalesDocumentWithItem(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);
      ArchiveQuoteOrderDefaultValue := UpdateSalesAndReceivableSetup(TRUE);

      // 2. Exercise: Post Sales Order as Ship.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // 3. Verify: Verify Sales Header Archive Created.
      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeaderArchive.SETRANGE("No.",SalesHeader."No.");
      SalesHeaderArchive.FINDFIRST;

      // 4. Teardown: Update the sales & Receivable Setup to Default value.
      UpdateSalesAndReceivableSetup(ArchiveQuoteOrderDefaultValue);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandlerFalse)]
    PROCEDURE ArchivedSalesQuoteReport@27();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      SalesHeaderArchive@1009 : Record 5107;
      ArchivedSalesQuote@1007 : Report 215;
      ArchiveManagement@1005 : Codeunit 5063;
      FilePath@1010 : Text[1024];
    BEGIN
      // Covers document number TC0053 - refer to TFS ID 21739.
      // Test Archived Sales Quote Report successfully created.

      // 1. Setup: Create Sales Header and Sales Line with Type Item, Archive Sales Quote.
      CreateSalesDocumentWithItem(SalesHeader,SalesLine,SalesHeader."Document Type"::Quote);
      ArchiveManagement.ArchiveSalesDocument(SalesHeader);

      // 2. Exercise: Save Archived Sales Quote as as XML and XLSX in local Temp folder.
      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeaderArchive.SETRANGE("No.",SalesHeader."No.");
      ArchivedSalesQuote.SETTABLEVIEW(SalesHeaderArchive);
      FilePath := TEMPORARYPATH + FORMAT(SalesHeaderArchive."Document Type") + SalesHeaderArchive."No." + '.xlsx';
      ArchivedSalesQuote.SAVEASEXCEL(FilePath);

      // 3. Verify: Verify Saved report have some Data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandlerFalse)]
    PROCEDURE ArchivedSalesOrderReport@64();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      SalesHeaderArchive@1009 : Record 5107;
      ArchivedSalesOrder@1007 : Report 216;
      ArchiveManagement@1005 : Codeunit 5063;
      FilePath@1010 : Text[1024];
    BEGIN
      // Covers document number TC0053 - refer to TFS ID 21739.
      // Test Archived Sales Order Report successfully created.

      // 1. Setup: Create Sales Header and Sales Line with Type Item, Archive Sales Quote.
      CreateSalesDocumentWithItem(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);
      ArchiveManagement.ArchiveSalesDocument(SalesHeader);

      // 2. Exercise: Save Archived Sales Order as as XML and XLSX in local Temp folder.
      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeaderArchive.SETRANGE("No.",SalesHeader."No.");
      ArchivedSalesOrder.SETTABLEVIEW(SalesHeaderArchive);
      FilePath := TEMPORARYPATH + FORMAT(SalesHeaderArchive."Document Type") + SalesHeaderArchive."No." + '.xlsx';
      ArchivedSalesOrder.SAVEASEXCEL(FilePath);

      // 3. Verify: Verify Saved report have some Data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandlerFalse)]
    PROCEDURE ArchivedSalesReturnOrderReport@65();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      SalesHeaderArchive@1009 : Record 5107;
      ArchSalesReturnOrder@1007 : Report 418;
      ArchiveManagement@1005 : Codeunit 5063;
      FilePath@1010 : Text[1024];
    BEGIN
      // Covers document number TC0053 - refer to TFS ID 21739.
      // Test Arch. Sales Return Order Report successfully created.

      // 1. Setup: Create Sales Header and Sales Line with Type Item, Archive Sales Quote.
      CreateSalesDocumentWithItem(SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order");
      ArchiveManagement.ArchiveSalesDocument(SalesHeader);

      // 2. Exercise: Save Arch. Sales Return Order as as XML and XLSX in local Temp folder.
      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeaderArchive.SETRANGE("No.",SalesHeader."No.");
      ArchSalesReturnOrder.SETTABLEVIEW(SalesHeaderArchive);
      FilePath := TEMPORARYPATH + FORMAT(SalesHeaderArchive."Document Type") + SalesHeaderArchive."No." + '.xlsx';
      ArchSalesReturnOrder.SAVEASEXCEL(FilePath);

      // 3. Verify: Verify Saved report have some Data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    PROCEDURE SalesQuoteHeaderFromContact@31();
    VAR
      Contact@1000 : Record 5050;
      CustomerTemplate@1005 : Record 5105;
      SalesHeader@1001 : Record 36;
    BEGIN
      // Test Create a Sales Quote from Contact.

      // 1. Setup: Create Contact, Customer Template.
      LibraryMarketing.FindContact(Contact);
      LibraryMarketing.FindCustomerTemplate(CustomerTemplate);

      // 2. Exercise: Create Sales Quote Header from Contact with Customer Template.
      LibraryMarketing.CreateSalesHeaderWithContact(SalesHeader,Contact."No.",CustomerTemplate.Code);

      // 3. Verify: Verify Values on Sales Header with Document Type Quote.
      VerifySalesHeaderQuoteValues(SalesHeader,Contact."No.",CustomerTemplate.Code);
    END;

    [Test]
    PROCEDURE SalesQuoteDocumentFromContact@47();
    VAR
      Contact@1000 : Record 5050;
      CustomerTemplate@1005 : Record 5105;
      Item@1006 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      Quantity@1007 : Decimal;
    BEGIN
      // Test Create a Sales Quote Document from Contact and Verify Values on Sales Quote Document.
      Initialize;
      // 1. Setup: Create Contact, Customer Template.
      LibraryMarketing.FindContact(Contact);
      FindUpdateCustomerTemplate(CustomerTemplate);

      // 2. Exercise: Create Sales Quote Document from Contact with Customer Template and Random Quantity.
      LibraryMarketing.CreateSalesHeaderWithContact(SalesHeader,Contact."No.",CustomerTemplate.Code);
      Quantity := RANDOM(10) + LibraryUtility.GenerateRandomFraction;
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",Quantity);

      // 3. Verify: Verify Values on Sales Quote Document.
      VerifySalesHeaderQuoteValues(SalesHeader,Contact."No.",CustomerTemplate.Code);
      VerifySalesLineQuoteValues(SalesLine,Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE ArchiveSalesQuoteFromContact@50();
    VAR
      Contact@1000 : Record 5050;
      CustomerTemplate@1005 : Record 5105;
      Item@1007 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      ArchiveManagement@1004 : Codeunit 5063;
    BEGIN
      // Test Create Archive Document from Sales Quote Document with Contact.
      Initialize;
      // 1. Setup: Create Contact, Customer Template, Create Sales Quote Document from Contact with Customer Template and Random Quantity.
      LibraryMarketing.FindContact(Contact);
      FindUpdateCustomerTemplate(CustomerTemplate);
      LibraryMarketing.CreateSalesHeaderWithContact(SalesHeader,Contact."No.",CustomerTemplate.Code);
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",RANDOM(10) + LibraryUtility.GenerateRandomFraction);

      // 2. Exercise: Archive the Sales Document.
      ArchiveManagement.ArchiveSalesDocument(SalesHeader);

      // 3. Verify: Verify Values on Sales Archive Document and Number of Archive Versions on Sales Header.
      VerifySalesHeaderArchive(SalesHeader);
      VerifySalesLineArchive(SalesLine);
      VerifyArchivedVersions(SalesHeader);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE ReleasedSalesQuoteAfterArchive@53();
    VAR
      Contact@1000 : Record 5050;
      CustomerTemplate@1005 : Record 5105;
      Item@1008 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      ArchiveManagement@1004 : Codeunit 5063;
    BEGIN
      // Test Create Archive Document from Sales Quote Document with Contact and Release Sales Quote after Archiving.
      Initialize;
      // 1. Setup: Create Contact, Customer Template, Create Sales Quote Document from Contact with Customer Template and Random Quantity.
      // Archive the Sales Document.
      LibraryMarketing.FindContact(Contact);
      FindUpdateCustomerTemplate(CustomerTemplate);
      LibraryMarketing.CreateSalesHeaderWithContact(SalesHeader,Contact."No.",CustomerTemplate.Code);
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",RANDOM(10) + LibraryUtility.GenerateRandomFraction);
      ArchiveManagement.ArchiveSalesDocument(SalesHeader);

      // 2. Exercise: Release Sales Document.
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // 3. Verify: Verify Status on Sales Header.
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      SalesHeader.TESTFIELD(Status,SalesHeader.Status::Released);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE RestoreSalesOrderWithDifferentLocation@270();
    VAR
      Customer@1001 : Record 18;
      SalesHeader@1000 : Record 36;
      SalesHeaderArchive@1007 : Record 5107;
      ArchiveManagement@1006 : Codeunit 5063;
    BEGIN
      // Test and Verify that after restoring the acrhive document, Location on Sales Line do not get updated with location of Sales Header.

      // 1. Setup: Create sales order and archive the sales order.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateSalesOrderWithDifferentLocation(SalesHeader,Customer."No.");
      ArchiveCreatedSalesOrder(SalesHeaderArchive,SalesHeader);

      // 2. Exercise: Restore archived sales order.
      ArchiveManagement.RestoreSalesDocument(SalesHeaderArchive);

      // 3. Verify: Sales line location not changed with header location.
      VerifySalesLine(SalesHeaderArchive);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler,ArchivedSalesQuoteReportHandler)]
    PROCEDURE ArchivedSalesQuoteReportWithVAT@56();
    VAR
      SalesHeader@1003 : Record 36;
    BEGIN
      // Test Report Archived Sales Quote shows "VAT Amount Specification" when VAT Amount <> 0.
      ArchivedSalesReportWithVAT(SalesHeader."Document Type"::Quote);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler,ArchivedSalesReturnOrderReportHandler)]
    PROCEDURE ArchivedSalesReturnOrderReportWithVAT@55();
    VAR
      SalesHeader@1003 : Record 36;
    BEGIN
      // Test Report Archived Sales Return Order shows "VAT Amount Specification" when VAT Amount <> 0.
      ArchivedSalesReportWithVAT(SalesHeader."Document Type"::"Return Order");
    END;

    LOCAL PROCEDURE ArchivedSalesReportWithVAT@44(DocumentType@1001 : Option);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      SalesHeader@1003 : Record 36;
      SalesLine@1000 : Record 37;
      ArchiveManagement@1004 : Codeunit 5063;
      VATProdPostingGroup@1005 : Code[10];
    BEGIN
      // Setup: Create and archive Sales Return Order.
      Initialize;
      VATProdPostingGroup := CreateSalesDocumentWithVAT(SalesHeader,SalesLine,DocumentType);
      ArchiveManagement.ArchiveSalesDocument(SalesHeader);

      // Exercise: Run Report Archived Sales Quote / Report Archived Sales Return Order.
      CASE DocumentType OF
        SalesHeader."Document Type"::Quote:
          RunReportArchivedSalesQuote(SalesHeader);
        SalesHeader."Document Type"::"Return Order":
          RunReportArchivedSalesReturnOrder(SalesHeader);
      END;
    END;

    LOCAL PROCEDURE ArchiveCreatedSalesOrder@306(VAR SalesHeaderArchive@1001 : Record 5107;SalesHeader@1002 : Record 36);
    VAR
      ArchiveManagement@1000 : Codeunit 5063;
    BEGIN
      ArchiveManagement.StoreSalesDocument(SalesHeader,FALSE);
      SalesHeader.CALCFIELDS("No. of Archived Versions");
      SalesHeaderArchive.GET(
        SalesHeader."Document Type",SalesHeader."No.",SalesHeader."Doc. No. Occurrence",SalesHeader."No. of Archived Versions");
    END;

    LOCAL PROCEDURE CreateLocation@34() : Code[10];
    VAR
      Location@1000 : Record 14;
      LibraryWarehouse@1001 : Codeunit 132204;
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateItem@46(VATProdPostGroup@1000 : Code[10]) : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("VAT Prod. Posting Group",VATProdPostGroup);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateOrderFromQuote@30(VAR SalesHeader@1001 : Record 36;VAR DefaultValue@1000 : Boolean;ArchiveQuotesAndOrders@1002 : Boolean);
    VAR
      SalesLine@1006 : Record 37;
    BEGIN
      // 1. Setup: Create Sales Header and Sales Line with Type Item, Modify Sales & Receivable Setup for Archive Quotes And Order field
      // and stockout warning to false.
      CreateSalesDocumentWithItem(SalesHeader,SalesLine,SalesHeader."Document Type"::Quote);
      DefaultValue := UpdateSalesAndReceivableSetup(ArchiveQuotesAndOrders);
      LibrarySales.SetStockoutWarning(FALSE);
      COMMIT;

      // 2. Exercise: Make Order from Sales Quote.
      CODEUNIT.RUN(CODEUNIT::"Sales-Quote to Order",SalesHeader);
    END;

    LOCAL PROCEDURE CreateSalesDocumentWithItem@28(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1005 : Option);
    BEGIN
      Initialize;
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,'');
      // Use Random because value is not important.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,RANDOM(10));
    END;

    LOCAL PROCEDURE CreateSalesOrderWithDifferentLocation@293(VAR SalesHeader@1007 : Record 36;CustomerNo@1000 : Code[20]);
    VAR
      Item@1005 : Record 27;
      SalesLine@1006 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.VALIDATE("Location Code",CreateLocation);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItem(Item),LibraryRandom.RandDec(100,2));
      CreateSalesLineWithLocation(SalesHeader,SalesLine);
    END;

    LOCAL PROCEDURE CreateSalesLineWithLocation@72(VAR SalesHeader@1004 : Record 36;VAR SalesLine@1003 : Record 37);
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItem(Item),LibraryRandom.RandDec(100,2));
      SalesLine.VALIDATE("Location Code",CreateLocation);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithVAT@38(VATBusPostingGroup@1001 : Code[10]) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("VAT Bus. Posting Group",VATBusPostingGroup);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateSalesDocumentWithUnitPrice@344(VAR SalesHeader@1002 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1000 : Option;CustomerNo@1003 : Code[20];ItemNo@1004 : Code[20]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocumentWithVAT@42(VAR SalesHeader@1003 : Record 36;VAR SalesLine@1006 : Record 37;DocumentType@1005 : Option) : Code[10];
    VAR
      VATPostingSetup@1002 : Record 325;
      Item@1001 : Record 27;
      CustomerNo@1000 : Code[20];
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      CustomerNo := CreateCustomerWithVAT(VATPostingSetup."VAT Bus. Posting Group");
      Item.GET(CreateItem(VATPostingSetup."VAT Prod. Posting Group"));
      CreateSalesDocumentWithUnitPrice(SalesHeader,SalesLine,DocumentType,CustomerNo,Item."No.");
      EXIT(VATPostingSetup."VAT Prod. Posting Group");
    END;

    LOCAL PROCEDURE UpdateSalesAndReceivableSetup@26(ArchiveQuotesAndOrders@1001 : Boolean) ArchiveQuoteOrderDefaultValue : Boolean;
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      ArchiveQuoteOrderDefaultValue := SalesReceivablesSetup."Archive Quotes and Orders";
      LibrarySales.SetArchiveQuotesandOrders(ArchiveQuotesAndOrders);
    END;

    LOCAL PROCEDURE FindUpdateCustomerTemplate@170(VAR CustomerTemplate@1001 : Record 5105);
    VAR
      GeneralPostingSetup@1000 : Record 252;
      VATPostingSetup@1002 : Record 325;
    BEGIN
      LibraryMarketing.FindCustomerTemplate(CustomerTemplate);
      LibraryERM.FindGeneralPostingSetupInvtFull(GeneralPostingSetup);
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      CustomerTemplate.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      CustomerTemplate.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      CustomerTemplate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunReportArchivedSalesQuote@39(SalesHeader@1002 : Record 36);
    VAR
      SalesHeaderArchive@1001 : Record 5107;
      ArchivedSalesQuote@1000 : Report 215;
    BEGIN
      COMMIT;
      CLEAR(ArchivedSalesQuote);
      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeaderArchive.SETRANGE("No.",SalesHeader."No.");
      ArchivedSalesQuote.SETTABLEVIEW(SalesHeaderArchive);
      ArchivedSalesQuote.RUN;
    END;

    LOCAL PROCEDURE RunReportArchivedSalesReturnOrder@54(SalesHeader@1002 : Record 36);
    VAR
      SalesHeaderArchive@1001 : Record 5107;
      ArchSalesReturnOrder@1000 : Report 418;
    BEGIN
      COMMIT;
      CLEAR(ArchSalesReturnOrder);
      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeaderArchive.SETRANGE("No.",SalesHeader."No.");
      ArchSalesReturnOrder.SETTABLEVIEW(SalesHeaderArchive);
      ArchSalesReturnOrder.RUN;
    END;

    LOCAL PROCEDURE VerifyArchivedVersions@35(SalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      SalesHeader.CALCFIELDS("No. of Archived Versions");
      SalesHeader.TESTFIELD("No. of Archived Versions",1); // 1 For First Archive Versions.
    END;

    LOCAL PROCEDURE VerifyPurchaseComments@84(PurchCommentLine@1000 : Record 43);
    VAR
      PurchaseHeaderArchive@1001 : Record 5109;
      PurchCommentLineArchive@1002 : Record 5125;
    BEGIN
      PurchaseHeaderArchive.SETRANGE("Document Type",PurchCommentLine."Document Type");
      PurchaseHeaderArchive.SETRANGE("No.",PurchCommentLine."No.");
      PurchaseHeaderArchive.FINDFIRST;

      PurchCommentLineArchive.GET(
        PurchaseHeaderArchive."Document Type",PurchaseHeaderArchive."No.",PurchaseHeaderArchive."Doc. No. Occurrence",
        PurchaseHeaderArchive."Version No.",PurchCommentLine."Document Line No.",PurchCommentLine."Line No.");
      PurchCommentLineArchive.TESTFIELD(Comment,PurchCommentLine.Comment);
    END;

    LOCAL PROCEDURE VerifySalesCommentLine@25(SalesHeader@1000 : Record 36;DocumentLineNo@1003 : Integer;Comment@1002 : Text[80]);
    VAR
      SalesCommentLine@1001 : Record 44;
    BEGIN
      SalesCommentLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesCommentLine.SETRANGE("No.",SalesHeader."No.");
      SalesCommentLine.SETRANGE("Document Line No.",DocumentLineNo);
      SalesCommentLine.FINDFIRST;
      SalesCommentLine.TESTFIELD(Comment,Comment);
    END;

    LOCAL PROCEDURE VerifySalesLine@24(SalesHeaderArchive@1000 : Record 5107);
    VAR
      SalesLineArchive@1001 : Record 5108;
      SalesLine@1002 : Record 37;
    BEGIN
      SalesLineArchive.SETRANGE("Document Type",SalesHeaderArchive."Document Type");
      SalesLineArchive.SETRANGE("Document No.",SalesHeaderArchive."No.");
      SalesLineArchive.SETRANGE("Version No.",SalesHeaderArchive."Version No.");
      SalesLineArchive.FINDSET;
      REPEAT
        SalesLine.GET(SalesHeaderArchive."Document Type",SalesHeaderArchive."No.",SalesLineArchive."Line No.");
        SalesLine.TESTFIELD(Type,SalesLineArchive.Type);
        SalesLine.TESTFIELD("No.",SalesLineArchive."No.");
        SalesLine.TESTFIELD(Quantity,SalesLineArchive.Quantity);
        SalesLine.TESTFIELD("Location Code",SalesLineArchive."Location Code");
      UNTIL SalesLineArchive.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifySalesHeaderArchive@43(SalesHeader@1000 : Record 36);
    VAR
      SalesHeaderArchive@1001 : Record 5107;
    BEGIN
      SalesHeaderArchive.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeaderArchive.SETRANGE("No.",SalesHeader."No.");
      SalesHeaderArchive.FINDFIRST;
      SalesHeaderArchive.TESTFIELD("Sell-to Contact No.",SalesHeader."Sell-to Contact No.");
      SalesHeaderArchive.TESTFIELD("Sell-to Customer Template Code",SalesHeader."Sell-to Customer Template Code");
      SalesHeaderArchive.TESTFIELD("Order Date",SalesHeader."Order Date");
      SalesHeaderArchive.TESTFIELD("Document Date",SalesHeader."Document Date");
    END;

    LOCAL PROCEDURE VerifySalesHeaderQuoteValues@49(SalesHeader@1000 : Record 36;SellToContactNo@1002 : Code[20];SellToCustomerTemplateCode@1001 : Code[10]);
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      SalesHeader.TESTFIELD("Sell-to Contact No.",SellToContactNo);
      SalesHeader.TESTFIELD("Sell-to Customer Template Code",SellToCustomerTemplateCode);
      SalesHeader.TESTFIELD("Order Date",WORKDATE);
      SalesHeader.TESTFIELD("Document Date",WORKDATE);
    END;

    LOCAL PROCEDURE VerifySalesLineArchive@13(SalesLine@1000 : Record 37);
    VAR
      SalesLineArchive@1001 : Record 5108;
      SalesHeaderArchive@1002 : Record 5107;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine.SETRANGE("Document No.",SalesLine."Document No.");
      SalesLine.FINDSET;
      SalesHeaderArchive.SETRANGE("Document Type",SalesLine."Document Type");
      SalesHeaderArchive.SETRANGE("No.",SalesLine."Document No.");
      SalesHeaderArchive.FINDLAST;
      SalesLineArchive.SETRANGE("Document Type",SalesHeaderArchive."Document Type");
      SalesLineArchive.SETRANGE("Document No.",SalesHeaderArchive."No.");
      SalesLineArchive.SETRANGE("Version No.",SalesHeaderArchive."Version No.");
      REPEAT
        SalesLineArchive.SETRANGE("Line No.",SalesLine."Line No.");
        SalesLineArchive.FINDFIRST;
        SalesLineArchive.TESTFIELD(Type,SalesLine.Type);
        SalesLineArchive.TESTFIELD("No.",SalesLine."No.");
        SalesLineArchive.TESTFIELD(Quantity,SalesLine.Quantity);
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifySalesLineQuoteValues@74(SalesLine@1000 : Record 37;ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      SalesLine.TESTFIELD(Type,SalesLine.Type::Item);
      SalesLine.TESTFIELD("No.",ItemNo);
      SalesLine.TESTFIELD(Quantity,Quantity);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandler@121(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandlerFalse@20(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@5(Question@1000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE ArchivedSalesQuoteReportHandler@36(VAR ArchivedSalesQuote@1000 : TestRequestPage 215);
    BEGIN
      ArchivedSalesQuote.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ArchivedSalesReturnOrderReportHandler@48(VAR ArchivedSalesReturnOrder@1000 : TestRequestPage 418);
    BEGIN
      ArchivedSalesReturnOrder.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Archive] [Marketing]
      Unsupported version tags:
      NA: Unable to Execute
      DE: Unable to Execute

      Test for CRM Marketing Document Logging:
        1. Test Archiving a sales quote/order/return order.
        2. Test Restoring a sales quote through the Contact Card window.
        3. Test Restoring a sales quote through the Sales Quote window.
        4. Test Restoring a Sales order/Return order through Contact window.
        5. Test Saving comments for sales lines to an archived sales quote/order/return order.
        6. Test Automatic archiving of sales quotes.
        7. Test Automatic archiving of Sales Orders.
        8. Test Printing an archived sales quote/order/return order.
        9. Test Create a Sales Quote from Contact.
       10. Test Create a Sales Quote Document from Contact and Verify Values on Sales Quote Document.
       11. Test Create Archive Document from Sales Quote Document with Contact.
       12. Test Create Archive Document from Sales Quote Document with Contact and Release Sales Quote after Archiving.
       13. Test and Verify that after restoring the acrhive document, Location on Sales Line do not get updated with location of Sales Header.
       14. Test Report Archived Sales Quote shows "VAT Amount Specification" when VAT Amount <> 0.
       15. Test Report Archived Sales Return Order shows "VAT Amount Specification" when VAT Amount <> 0.

      TFS_TS_ID = 21739
      Covered Test cases:
        TFS_TC_ID=31809 and 12008
        TFS_TC_ID=31810 and 12009
        TFS_TC_ID=31811 and 12010
        TFS_TC_ID=31812 and 12011
        TFS_TC_ID=31813 and 12012
        TFS_TC_ID=31814 and 12013
        TFS_TC_ID=31815 and 12014
        TFS_TC_ID=31816 and 12015

      TFS_TS_ID = 238098
      Covers Test cases:
      --------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      --------------------------------------------------------------------------------
      SalesQuoteHeaderFromContact,SalesQuoteDocumentFromContact                 143249
      ArchiveSalesQuoteFromContact,ReleasedSalesQuoteAfterArchive               143249

      Covers Test Cases for WI - 7696
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                          TFS ID
      ----------------------------------------------------------------------------------------------------
      RestoreSalesOrderWithDifferentLocation
      Covers Test cases:
      --------------------------------------------------------------------------------
      Test Function Name                                                        TFS ID
      --------------------------------------------------------------------------------
      ArchivedSalesQuoteReportWithVAT                                           97728
      ArchivedSalesReturnOrderReportWithVAT                                     97728
    }
    END.
  }
}

