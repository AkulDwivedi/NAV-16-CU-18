OBJECT Codeunit 134400 ERM Incoming Documents
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      LibraryPurchase@1001 : Codeunit 130512;
      LibrarySales@1002 : Codeunit 130509;
      LibraryERM@1003 : Codeunit 131300;
      LibraryIncomingDocuments@1004 : Codeunit 131100;
      LibraryUtility@1005 : Codeunit 131000;
      LibraryRandom@1014 : Codeunit 130440;
      OnlyOneDefaultAttachmentErr@1006 : TextConst 'ENU=There should be one and only one default attachment.';
      MainAttachErr@1007 : TextConst 'ENU=There should be one and only one main attachment.';
      LibraryVariableStorage@1008 : Codeunit 131004;
      ReplaceMainAttachmentQst@1009 : TextConst 'ENU=Are you sure you want to replace the attached file?';
      DocPostedErr@1015 : TextConst 'ENU=The document related to this incoming document has been posted.';
      DialogTxt@1016 : TextConst 'ENU=Dialog';

    [Test]
    PROCEDURE SetGetURL@2();
    VAR
      IncomingDoc@1000 : Record 130;
      LocalURL@1001 : Text;
    BEGIN
      WITH IncomingDoc DO BEGIN
        INIT;
        Assert.AreEqual('',GetURL,'Expected empty url.');
        LocalURL := 'abcdefghijklmnopqrstuvxyz1234.txt';
        SetURL(LocalURL);
        Assert.AreEqual(LocalURL,GetURL,'Wrong URL 1');
        // verify that it works for strings > 250
        WHILE STRLEN(LocalURL) <= 250 DO
          LocalURL += 'abcdefghijklmnopqrstuvxyz1234.txt';
        SetURL(LocalURL);
        Assert.AreEqual(LocalURL,GetURL,'Wrong URL 1');
        // verify that it works for strings > 750
        WHILE STRLEN(LocalURL) <= 750 DO
          LocalURL += 'abcdefghijklmnopqrstuvxyz1234.txt';
        SetURL(LocalURL);
        Assert.AreEqual(LocalURL,GetURL,'Wrong URL 1');
        // verify that it fails for strings > 1000
        WHILE STRLEN(LocalURL) <= 1000 DO
          LocalURL += 'abcdefghijklmnopqrstuvxyz1234.txt';
        ASSERTERROR SetURL(LocalURL);
      END;
    END;

    [Test]
    [HandlerFunctions(IncomingDocumentCardHandler)]
    PROCEDURE ShowIncomingDocumentCard@56();
    VAR
      IncomingDocument@1000 : Record 130;
    BEGIN
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.TESTFIELD(Released,FALSE);
      IncomingDocument.ShowCardFromEntryNo(IncomingDocument."Entry No.");
    END;

    [Test]
    [HandlerFunctions(IncomingDocumentsLookupHandlerPrevRec)]
    PROCEDURE SelectIncomingDocument@59();
    VAR
      IncomingDocument@1000 : Record 130;
      PrevEntryNo@1001 : Integer;
      NewEntryNo@1002 : Integer;
    BEGIN
      // Init
      CreateNewIncomingDocument(IncomingDocument);
      PrevEntryNo := IncomingDocument."Entry No.";
      LibraryIncomingDocuments.CreateNewIncomingDocument(IncomingDocument);

      // Execute
      NewEntryNo := IncomingDocument.SelectIncomingDocument(IncomingDocument."Entry No."); // Opens page 190

      // Validate
      Assert.AreEqual(PrevEntryNo,NewEntryNo,'');
    END;

    [Test]
    [HandlerFunctions(IncomingDocumentsLookupHandler)]
    PROCEDURE SelectIncomingDocumentForPostedDoc@64();
    VAR
      IncomingDocument@1000 : Record 130;
    BEGIN
      // Init
      CreateNewIncomingDocument(IncomingDocument);

      // Execute
      IncomingDocument.SelectIncomingDocumentForPostedDocument('TEST',010100D); // Opens page 190

      // Validate
      IncomingDocument.FIND;
      Assert.IsTrue(IncomingDocument.Posted,'');
      Assert.AreEqual('TEST',IncomingDocument."Document No.",'');
      Assert.AreEqual(010100D,IncomingDocument."Posting Date",'');
    END;

    [Test]
    PROCEDURE Release@4();
    VAR
      IncomingDocument@1000 : Record 130;
    BEGIN
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.TESTFIELD(Released,FALSE);
      IncomingDocument.Release;
      IncomingDocument.TESTFIELD(Released,TRUE);
      IncomingDocument.TESTFIELD(Status,IncomingDocument.Status::Released);
      IncomingDocument.TESTFIELD("Released Date-Time");
      IncomingDocument.TESTFIELD("Released By User ID",USERSECURITYID);
    END;

    [Test]
    PROCEDURE Reject@5();
    VAR
      IncomingDocument@1000 : Record 130;
    BEGIN
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.TESTFIELD(Released,FALSE);
      IncomingDocument.Release;
      IncomingDocument.TESTFIELD(Released,TRUE);
      IncomingDocument.Reject;
      IncomingDocument.TESTFIELD(Released,FALSE);
      IncomingDocument.TESTFIELD(Status,IncomingDocument.Status::Rejected);
      IncomingDocument.TESTFIELD("Released Date-Time",0DT);
    END;

    [Test]
    PROCEDURE CreateGenJnlLine@13();
    VAR
      IncomingDocument@1000 : Record 130;
      GenJnlLine@1001 : Record 81;
    BEGIN
      CreateNewIncomingDocument(IncomingDocument);

      GenJnlLine.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      GenJnlLine.DELETEALL;

      IncomingDocument.Release;
      IncomingDocument.MODIFY;
      IncomingDocument.CreateGenJnlLine;
      IncomingDocument.MODIFY;
      IncomingDocument.TESTFIELD("Document Type",IncomingDocument."Document Type"::Journal);

      GenJnlLine.FINDFIRST;
      Assert.IsTrue(GenJnlLine.HASLINKS,'Gen. Jnl. Line is missing a link.');
      Assert.AreEqual(GenJnlLine.GetIncomingDocumentURL,IncomingDocument.GetURL,'Gen. Jnl. Line has a wrong URL.');
      GenJnlLine."Document No." := FORMAT(RANDOM(10000000));
      GenJnlLine."Posting Date" := WORKDATE;
      GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
      GenJnlLine.VALIDATE("Account No.",GetIncomeStatementAcc);
      GenJnlLine.VALIDATE("Bal. Account Type",GenJnlLine."Bal. Account Type"::"G/L Account");
      GenJnlLine.VALIDATE("Bal. Account No.",GetBalanceSheetAcc);
      GenJnlLine.VALIDATE(Amount,1);
      GenJnlLine.VALIDATE("Bal. Gen. Posting Type",GenJnlLine."Gen. Posting Type");
      GenJnlLine.MODIFY;
      CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post Batch",GenJnlLine);
      ValidatePostedIncomingDocument(IncomingDocument);
    END;

    [Test]
    [HandlerFunctions(PurchInvHandler)]
    PROCEDURE CreatePurchInvoice@6();
    VAR
      IncomingDocument@1000 : Record 130;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      Vendor@1004 : Record 23;
    BEGIN
      PurchaseHeader.SETFILTER("Incoming Document Entry No.",'<>0');
      PurchaseHeader.DELETEALL;

      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.Release;
      IncomingDocument.MODIFY;
      IncomingDocument.CreatePurchInvoice;  // Opens page 51 "Purchase Invoice"
      IncomingDocument.MODIFY;
      IncomingDocument.TESTFIELD("Document Type",IncomingDocument."Document Type"::"Purchase Invoice");

      PurchaseHeader.FINDFIRST;
      PurchaseHeader.TESTFIELD("Document Type",PurchaseHeader."Document Type"::Invoice);
      PurchaseHeader.TESTFIELD("Incoming Document Entry No.",IncomingDocument."Entry No.");
      Assert.IsTrue(PurchaseHeader.HASLINKS,'Purchase Invoice is missing a link.');

      LibraryPurchase.CreateVendor(Vendor);
      PurchaseHeader.VALIDATE("Buy-from Vendor No.",Vendor."No.");
      PurchaseHeader."Vendor Invoice No." := PurchaseHeader."No.";
      PurchaseHeader.MODIFY;

      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",GetIncomeStatementAcc,1);

      CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchaseHeader);
      ValidatePostedIncomingDocument(IncomingDocument);
    END;

    [Test]
    [HandlerFunctions(IncomingDocumentsLookupHandler)]
    PROCEDURE CreatePurchInvoiceAndSelectIncomingDoc@69();
    VAR
      IncomingDocument@1000 : Record 130;
      PurchaseHeader@1001 : Record 38;
      Vendor@1004 : Record 23;
      PurchaseInvoice@1002 : TestPage 51;
    BEGIN
      // Init
      PurchaseHeader.SETFILTER("Incoming Document Entry No.",'<>0');
      PurchaseHeader.DELETEALL;
      PurchaseHeader.RESET;
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.Release;
      IncomingDocument.MODIFY;

      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,Vendor."No.");
      PurchaseHeader."Vendor Invoice No." := PurchaseHeader."No.";
      PurchaseHeader.MODIFY;

      // Execute
      PurchaseInvoice.OPENEDIT;
      PurchaseInvoice.GOTORECORD(PurchaseHeader);
      Assert.IsFalse(PurchaseInvoice.IncomingDocCard.ENABLED,'');
      Assert.IsFalse(PurchaseInvoice.RemoveIncomingDoc.ENABLED,'');
      Assert.IsTrue(PurchaseInvoice.SelectIncomingDoc.ENABLED,'');
      Assert.IsTrue(PurchaseInvoice.IncomingDocAttachFile.ENABLED,'');

      PurchaseInvoice.SelectIncomingDoc.INVOKE; // Opens page 190

      // Verify
      Assert.IsTrue(PurchaseInvoice.IncomingDocCard.ENABLED,'');
      Assert.IsTrue(PurchaseInvoice.RemoveIncomingDoc.ENABLED,'');
      Assert.IsTrue(PurchaseInvoice.SelectIncomingDoc.ENABLED,'');
      Assert.IsFalse(PurchaseInvoice.IncomingDocAttachFile.ENABLED,'');

      PurchaseHeader.FIND;
      Assert.AreEqual(IncomingDocument."Entry No.",PurchaseHeader."Incoming Document Entry No.",'');

      PurchaseInvoice.RemoveIncomingDoc.INVOKE;
      PurchaseHeader.FIND;
      Assert.AreEqual(0,PurchaseHeader."Incoming Document Entry No.",'');

      PurchaseInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(IncomingDocumentsLookupHandler)]
    PROCEDURE CreateAndDeletePurchInvoiceAndSelectIncomingDoc@34();
    VAR
      IncomingDocument@1000 : Record 130;
      PurchaseHeader@1001 : Record 38;
      Vendor@1004 : Record 23;
      ErrorMessage@1003 : Record 700;
      PurchaseInvoice@1002 : TestPage 51;
    BEGIN
      // Init
      PurchaseHeader.SETFILTER("Incoming Document Entry No.",'<>0');
      PurchaseHeader.DELETEALL;
      PurchaseHeader.RESET;
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.Release;
      IncomingDocument.MODIFY;

      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,Vendor."No.");
      PurchaseHeader."Vendor Invoice No." := PurchaseHeader."No.";
      PurchaseHeader.MODIFY;

      // Execute
      PurchaseInvoice.OPENEDIT;
      PurchaseInvoice.GOTORECORD(PurchaseHeader);

      PurchaseInvoice.SelectIncomingDoc.INVOKE; // Opens page 190
      PurchaseInvoice.CLOSE;
      PurchaseHeader.FIND;
      Assert.AreEqual(IncomingDocument."Entry No.",PurchaseHeader."Incoming Document Entry No.",'');
      PurchaseHeader.DELETE(TRUE);

      // Verify
      IncomingDocument.FIND;
      Assert.AreEqual('',IncomingDocument."Document No.",'');
      Assert.AreEqual(IncomingDocument."Document Type"::" ",IncomingDocument."Document Type",'');
      Assert.AreEqual(IncomingDocument.Status::Released,IncomingDocument.Status,'');
      ErrorMessage.SetContext(IncomingDocument);
      Assert.AreEqual(0,ErrorMessage.ErrorMessageCount(
          ErrorMessage."Message Type"::Error),'No errors should have been found.');
    END;

    [Test]
    [HandlerFunctions(PurchCrMemoHandler)]
    PROCEDURE CreatePurchCreditMemo@7();
    VAR
      IncomingDocument@1002 : Record 130;
      PurchaseHeader@1001 : Record 38;
    BEGIN
      PurchaseHeader.SETFILTER("Incoming Document Entry No.",'<>0');
      PurchaseHeader.DELETEALL;

      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.Release;
      COMMIT;
      IncomingDocument.CreatePurchCreditMemo;  // Opens page 52 "Purchase Credit Memo"
      IncomingDocument.MODIFY;
      IncomingDocument.TESTFIELD("Document Type",IncomingDocument."Document Type"::"Purchase Credit Memo");

      PurchaseHeader.FINDFIRST;
      PurchaseHeader.TESTFIELD("Document Type",PurchaseHeader."Document Type"::"Credit Memo");
      PurchaseHeader.TESTFIELD("Incoming Document Entry No.",IncomingDocument."Entry No.");
      Assert.IsTrue(PurchaseHeader.HASLINKS,'Purchase Credit Memo is missing a link.');
    END;

    [Test]
    [HandlerFunctions(SalesInvHandler)]
    PROCEDURE CreateSalesInvoice@8();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      IncomingDocument@1000 : Record 130;
    BEGIN
      SalesHeader.SETFILTER("Incoming Document Entry No.",'<>0');
      SalesHeader.DELETEALL;

      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.Release;
      IncomingDocument.MODIFY;
      IncomingDocument.CreateSalesInvoice;  // Opens page 43 "Sales Invoice"
      IncomingDocument.MODIFY;
      IncomingDocument.TESTFIELD("Document Type",IncomingDocument."Document Type"::"Sales Invoice");

      SalesHeader.FINDFIRST;
      SalesHeader.TESTFIELD("Document Type",SalesHeader."Document Type"::Invoice);
      SalesHeader.TESTFIELD("Incoming Document Entry No.",IncomingDocument."Entry No.");
      Assert.IsTrue(SalesHeader.HASLINKS,'Sales Invoice is missing a link.');

      SalesHeader.VALIDATE("Sell-to Customer No.",LibrarySales.CreateCustomerNo);
      SalesHeader.MODIFY;

      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",GetIncomeStatementAcc,1);

      CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
      ValidatePostedIncomingDocument(IncomingDocument);
    END;

    [Test]
    [HandlerFunctions(IncomingDocumentsLookupHandler)]
    PROCEDURE CreateSalesInvoiceAndSelectIncomingDoc@81();
    VAR
      IncomingDocument@1000 : Record 130;
      SalesHeader@1001 : Record 36;
      Customer@1004 : Record 18;
      SalesInvoice@1002 : TestPage 43;
    BEGIN
      // Init
      SalesHeader.SETFILTER("Incoming Document Entry No.",'<>0');
      SalesHeader.DELETEALL;
      SalesHeader.RESET;
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.Release;
      IncomingDocument.MODIFY;

      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,Customer."No.");
      SalesHeader.MODIFY;

      // Execute
      SalesInvoice.OPENEDIT;
      SalesInvoice.GOTORECORD(SalesHeader);
      Assert.IsFalse(SalesInvoice.IncomingDocCard.ENABLED,'');
      Assert.IsFalse(SalesInvoice.RemoveIncomingDoc.ENABLED,'');
      Assert.IsTrue(SalesInvoice.SelectIncomingDoc.ENABLED,'');
      Assert.IsTrue(SalesInvoice.IncomingDocAttachFile.ENABLED,'');

      SalesInvoice.SelectIncomingDoc.INVOKE; // Opens page 190

      // Verify
      Assert.IsTrue(SalesInvoice.IncomingDocCard.ENABLED,'');
      Assert.IsTrue(SalesInvoice.RemoveIncomingDoc.ENABLED,'');
      Assert.IsTrue(SalesInvoice.SelectIncomingDoc.ENABLED,'');
      Assert.IsFalse(SalesInvoice.IncomingDocAttachFile.ENABLED,'');

      SalesHeader.FIND;
      Assert.AreEqual(IncomingDocument."Entry No.",SalesHeader."Incoming Document Entry No.",'');

      SalesInvoice.RemoveIncomingDoc.INVOKE;
      SalesHeader.FIND;
      Assert.AreEqual(0,SalesHeader."Incoming Document Entry No.",'');

      SalesInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(SalesCrMemoHandler)]
    PROCEDURE CreateSalesCreditMemo@9();
    VAR
      SalesHeader@1001 : Record 36;
      IncomingDocument@1000 : Record 130;
    BEGIN
      SalesHeader.SETFILTER("Incoming Document Entry No.",'<>0');
      SalesHeader.DELETEALL;

      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.Release;
      COMMIT;
      IncomingDocument.CreateSalesCreditMemo;  // Opens page 44 "Sales Credit Memo"
      IncomingDocument.MODIFY;
      IncomingDocument.TESTFIELD("Document Type",IncomingDocument."Document Type"::"Sales Credit Memo");

      SalesHeader.FINDFIRST;
      SalesHeader.TESTFIELD("Document Type",SalesHeader."Document Type"::"Credit Memo");
      SalesHeader.TESTFIELD("Incoming Document Entry No.",IncomingDocument."Entry No.");
      Assert.IsTrue(SalesHeader.HASLINKS,'Sales Credit Memo is missing a link.');
    END;

    [Test]
    PROCEDURE TestReadyForPosting@24();
    VAR
      IncomingDocument@1000 : Record 130;
    BEGIN
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.Release;
      IncomingDocument.MODIFY;
      IncomingDocument.TestReadyForProcessing;
    END;

    [Test]
    PROCEDURE TestOnDelete@32();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1002 : Record 133;
    BEGIN
      // Init
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocumentAttachment."Incoming Document Entry No." := IncomingDocument."Entry No.";
      IncomingDocumentAttachment."Line No." := 10000;
      IncomingDocumentAttachment.INSERT(TRUE);
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");

      // Execute
      IncomingDocument.DELETE(TRUE);

      // Verify;
      Assert.AreEqual(0,IncomingDocumentAttachment.COUNT,'');
    END;

    [Test]
    PROCEDURE TestChangeOfDocType1@15();
    VAR
      IncomingDocument@1000 : Record 130;
    BEGIN
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.Release;
      IncomingDocument.MODIFY;
      IncomingDocument.CreateGenJnlLine;
      ASSERTERROR IncomingDocument.CreatePurchInvoice;
    END;

    [Test]
    [HandlerFunctions(PurchInvHandler)]
    PROCEDURE TestChangeOfDocType2@30();
    VAR
      IncomingDocument@1000 : Record 130;
    BEGIN
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.Release;
      IncomingDocument.MODIFY;
      IncomingDocument.CreatePurchInvoice;
      ASSERTERROR IncomingDocument.CreateGenJnlLine;
      ASSERTERROR IncomingDocument.CreatePurchCreditMemo;
      ASSERTERROR IncomingDocument.CreateSalesInvoice;
      ASSERTERROR IncomingDocument.CreateSalesCreditMemo;
    END;

    [Test]
    PROCEDURE SetGenJournalLine@19();
    VAR
      IncomingDocument@1000 : Record 130;
      GenJnlLine@1001 : Record 81;
    BEGIN
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.Release;
      IncomingDocument.MODIFY;
      GenJnlLine.INIT;
      GenJnlLine."Incoming Document Entry No." := IncomingDocument."Entry No.";
      IncomingDocument.SetGenJournalLine(GenJnlLine);
      IncomingDocument.TESTFIELD("Document Type",IncomingDocument."Document Type"::Journal);
      Assert.IsTrue(GenJnlLine.HASLINKS,'No link was attached to Gen. Jnl. Line');
    END;

    [Test]
    PROCEDURE SetPurchDoc@25();
    VAR
      IncomingDocument@1000 : Record 130;
      PurchaseHeader@1001 : Record 38;
    BEGIN
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.Release;
      IncomingDocument.MODIFY;
      PurchaseHeader.INIT;
      PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::Invoice;
      PurchaseHeader."Incoming Document Entry No." := IncomingDocument."Entry No.";
      IncomingDocument.SetPurchDoc(PurchaseHeader);
      IncomingDocument.TESTFIELD("Document Type",IncomingDocument."Document Type"::"Purchase Invoice");
      Assert.IsTrue(PurchaseHeader.HASLINKS,'No link was attached to Purchase Header');
    END;

    [Test]
    PROCEDURE SetSalesDoc@29();
    VAR
      IncomingDocument@1000 : Record 130;
      SalesHeader@1001 : Record 36;
    BEGIN
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.Release;
      IncomingDocument.MODIFY;
      SalesHeader.INIT;
      SalesHeader."Document Type" := SalesHeader."Document Type"::Invoice;
      SalesHeader."Incoming Document Entry No." := IncomingDocument."Entry No.";
      IncomingDocument.SetSalesDoc(SalesHeader);
      IncomingDocument.TESTFIELD("Document Type",IncomingDocument."Document Type"::"Sales Invoice");
      Assert.IsTrue(SalesHeader.HASLINKS,'No link was attached to Sales Header');
    END;

    [Test]
    PROCEDURE SetPostedDocFields@10();
    VAR
      IncomingDocument@1000 : Record 130;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 376596] TAB 130 "Incoming Document".SetPostedDocFields() updates Incoming Document fields correctly in case of Status=New
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.TESTFIELD("Posted Date-Time",0DT);
      IncomingDocument.SetPostedDocFields(TODAY,'1111');
      IncomingDocument.TESTFIELD(Posted,TRUE);
      IncomingDocument.TESTFIELD("Posted Date-Time");
      IncomingDocument.TESTFIELD("Document No.");
    END;

    [Test]
    PROCEDURE SetPostedDocFieldsForcePosted_Positive@62();
    VAR
      IncomingDocument@1000 : Record 130;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 376596] TAB 130 "Incoming Document".SetPostedDocFields() updates Incoming Document fields correctly in case of Status=Posted and ForcePosted=TRUE
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.UpdateIncomingDocumentFromPosting(IncomingDocument."Entry No.",010115D,'TEST');

      IncomingDocument.FIND;
      IncomingDocument.SetPostedDocFieldsForcePosted(010115D,'TEST',TRUE);

      IncomingDocument.TESTFIELD(Posted,TRUE);
      IncomingDocument.TESTFIELD("Posted Date-Time");
      IncomingDocument.TESTFIELD("Document No.");
    END;

    [Test]
    PROCEDURE SetPostedDocFieldsForcePosted_Negative@73();
    VAR
      IncomingDocument@1000 : Record 130;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 376596] TAB 130 "Incoming Document".SetPostedDocFields() throws an error 'The document related to this incoming document has been posted.' in case of Status=Posted and ForcePosted=FALSE
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.UpdateIncomingDocumentFromPosting(IncomingDocument."Entry No.",010115D,'TEST');

      IncomingDocument.FIND;
      ASSERTERROR IncomingDocument.SetPostedDocFieldsForcePosted(010115D,'TEST',FALSE);
      Assert.ExpectedErrorCode(DialogTxt);
      Assert.ExpectedError(DocPostedErr);
    END;

    [Test]
    PROCEDURE CreatePostGenJnlLineNotApproved@23();
    VAR
      IncomingDocument@1000 : Record 130;
      GenJnlLine@1001 : Record 81;
    BEGIN
      LibraryIncomingDocuments.InitIncomingDocuments;
      UpdateIncomingDocumentsSetup;
      LibraryIncomingDocuments.CreateNewIncomingDocument(IncomingDocument);

      GenJnlLine.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      GenJnlLine.DELETEALL;

      IncomingDocument.CreateGenJnlLine;
      IncomingDocument.MODIFY;

      GenJnlLine.FINDFIRST;
      GenJnlLine."Document No." := FORMAT(RANDOM(10000000));
      GenJnlLine.MODIFY;
      CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post Batch",GenJnlLine);
      ValidatePostedIncomingDocument(IncomingDocument);
    END;

    [Test]
    PROCEDURE ClearRelatedGenJnlLine@3();
    VAR
      IncomingDocument@1000 : Record 130;
      GenJournalLine@1001 : Record 81;
    BEGIN
      // Setup.
      LibraryIncomingDocuments.InitIncomingDocuments;
      UpdateIncomingDocumentsSetup;
      LibraryIncomingDocuments.CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.CreateGenJnlLine;
      IncomingDocument.MODIFY;

      // Pre-Exercise Verify.
      GenJournalLine.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      Assert.IsTrue(GenJournalLine.FINDFIRST,'There should be a new record connected to the incoming document.');

      // Exercise.
      IncomingDocument.DELETE(TRUE);

      // Verify.
      GenJournalLine.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      Assert.IsTrue(GenJournalLine.ISEMPTY,'There should not be any records connected to the incoming document.');
    END;

    [Test]
    [HandlerFunctions(PurchInvHandler)]
    PROCEDURE ClearRelatedPurchaseInvoice@11();
    VAR
      IncomingDocument@1000 : Record 130;
      PurchaseHeader@1001 : Record 38;
    BEGIN
      // Setup.
      LibraryIncomingDocuments.InitIncomingDocuments;
      UpdateIncomingDocumentsSetup;
      LibraryIncomingDocuments.CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.CreatePurchInvoice;
      IncomingDocument.MODIFY;

      // Pre-Exercise Verify.
      PurchaseHeader.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Invoice);
      Assert.IsTrue(PurchaseHeader.FINDFIRST,'There should be a new record connected to the incoming document.');

      // Exercise.
      IncomingDocument.DELETE(TRUE);

      // Verify.
      PurchaseHeader.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Invoice);
      Assert.IsTrue(PurchaseHeader.ISEMPTY,'There should not be any records connected to the incoming document.');
    END;

    [Test]
    [HandlerFunctions(PurchCrMemoHandler)]
    PROCEDURE ClearRelatedPurchaseCrMemo@20();
    VAR
      IncomingDocument@1000 : Record 130;
      PurchaseHeader@1001 : Record 38;
    BEGIN
      // Setup.
      LibraryIncomingDocuments.InitIncomingDocuments;
      UpdateIncomingDocumentsSetup;
      LibraryIncomingDocuments.CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.CreatePurchCreditMemo;
      IncomingDocument.MODIFY;

      // Pre-Exercise Verify.
      PurchaseHeader.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::"Credit Memo");
      Assert.IsTrue(PurchaseHeader.FINDFIRST,'There should be a new record connected to the incoming document.');

      // Exercise.
      IncomingDocument.DELETE(TRUE);

      // Verify.
      PurchaseHeader.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::"Credit Memo");
      Assert.IsTrue(PurchaseHeader.ISEMPTY,'There should not be any records connected to the incoming document.');
    END;

    [Test]
    [HandlerFunctions(SalesInvHandler)]
    PROCEDURE ClearRelatedSalesInvoice@28();
    VAR
      IncomingDocument@1000 : Record 130;
      SalesHeader@1001 : Record 36;
    BEGIN
      // Setup.
      LibraryIncomingDocuments.InitIncomingDocuments;
      UpdateIncomingDocumentsSetup;
      LibraryIncomingDocuments.CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.CreateSalesInvoice;
      IncomingDocument.MODIFY;

      // Pre-Exercise Verify.
      SalesHeader.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
      Assert.IsTrue(SalesHeader.FINDFIRST,'There should be a new record connected to the incoming document.');

      // Exercise.
      IncomingDocument.DELETE(TRUE);

      // Verify.
      SalesHeader.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
      Assert.IsTrue(SalesHeader.ISEMPTY,'There should not be any records connected to the incoming document.');
    END;

    [Test]
    [HandlerFunctions(SalesCrMemoHandler)]
    PROCEDURE ClearRelatedSalesCrMemo@27();
    VAR
      IncomingDocument@1000 : Record 130;
      SalesHeader@1001 : Record 36;
    BEGIN
      // Setup.
      LibraryIncomingDocuments.InitIncomingDocuments;
      UpdateIncomingDocumentsSetup;
      LibraryIncomingDocuments.CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.CreateSalesCreditMemo;
      IncomingDocument.MODIFY;

      // Pre-Exercise Verify.
      SalesHeader.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Credit Memo");
      Assert.IsTrue(SalesHeader.FINDFIRST,'There should be a new record connected to the incoming document.');

      // Exercise.
      IncomingDocument.DELETE(TRUE);

      // Verify.
      SalesHeader.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Credit Memo");
      Assert.IsTrue(SalesHeader.ISEMPTY,'There should not be any records connected to the incoming document.');
    END;

    [Test]
    PROCEDURE TestInsertTableAttachment@22();
    VAR
      IncomingDocumentAttachment@1000 : Record 133;
    BEGIN
      WITH IncomingDocumentAttachment DO BEGIN
        // Init;
        IF GET(0,0) THEN
          DELETE;
        INIT;

        // Execute
        "Incoming Document Entry No." := 1;
        INSERT(TRUE);

        // Verify
        Assert.AreNotEqual(FORMAT(0DT),FORMAT("Created Date-Time"),'');
        Assert.AreNotEqual('',"Created By User Name",'');
      END;
    END;

    [Test]
    PROCEDURE TestImportAttachment@16();
    VAR
      IncomingDocumentAttachment@1001 : Record 133;
    BEGIN
      IncomingDocumentAttachment.INIT; // to satisfy preCAL

      ImportAndVerifyAttachment('jpg',IncomingDocumentAttachment.Type::Image);
      ImportAndVerifyAttachment('bmp',IncomingDocumentAttachment.Type::Image);
      ImportAndVerifyAttachment('png',IncomingDocumentAttachment.Type::Image);
      ImportAndVerifyAttachment('pdf',IncomingDocumentAttachment.Type::PDF);
      ImportAndVerifyAttachment('xlsx',IncomingDocumentAttachment.Type::Excel);
      ImportAndVerifyAttachment('docx',IncomingDocumentAttachment.Type::Word);
      ImportAndVerifyAttachment('pptx',IncomingDocumentAttachment.Type::PowerPoint);
      ImportAndVerifyAttachment('msg',IncomingDocumentAttachment.Type::Email);
      ImportAndVerifyAttachment('xml',IncomingDocumentAttachment.Type::XML);
    END;

    [Test]
    PROCEDURE TestExportAttachment@33();
    VAR
      IncomingDocumentAttachment@1000 : Record 133;
      FileManagement@1004 : Codeunit 419;
      OutStr@1001 : OutStream;
      FileName@1003 : Text;
    BEGIN
      // Init
      IncomingDocumentAttachment.INIT;
      FileName := IncomingDocumentAttachment.Export('',FALSE);   // Returns as entry no. is 0

      IF IncomingDocumentAttachment.FINDLAST THEN;
      IncomingDocumentAttachment."Incoming Document Entry No." += 1;
      IncomingDocumentAttachment."Line No." := 10000;
      IncomingDocumentAttachment.INIT;
      FileName := IncomingDocumentAttachment.Export('',FALSE);   // Returns as there is no content

      IF NOT IncomingDocumentAttachment.FIND THEN
        IncomingDocumentAttachment.INSERT(TRUE);
      IncomingDocumentAttachment.Content.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      OutStr.WRITETEXT('<hello world/>');
      IncomingDocumentAttachment.Type := IncomingDocumentAttachment.Type::XML;
      IncomingDocumentAttachment."File Extension" := 'xml';
      IncomingDocumentAttachment.MODIFY;

      // Execute
      FileName := FileManagement.ServerTempFileName(IncomingDocumentAttachment."File Extension");
      FileName := IncomingDocumentAttachment.Export(FileName,FALSE);

      // Verify

      // File.OPEN(FileName);
      // File.TEXTMODE(TRUE);
      // File.READ(Text);
      // File.CLOSE;
      // FileManagement.DeleteServerFile(FileName); Fails in snap
      // Assert.AreEqual('<hello world/>',Text,'');
    END;

    [Test]
    PROCEDURE TestAddAttachmentToExistingEntry@70();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1001 : Record 133;
      GLEntry@1002 : Record 17;
      FileName@1006 : Text;
    BEGIN
      // Init
      GLEntry.FINDLAST;
      GLEntry.TESTFIELD("Posting Date");
      GLEntry.TESTFIELD("Document No.");

      IncomingDocument.SETRANGE("Document No.",GLEntry."Document No.");
      IncomingDocument.SETRANGE("Posting Date",GLEntry."Posting Date");
      IncomingDocumentAttachment.SETRANGE("Document No.",GLEntry."Document No.");
      IncomingDocumentAttachment.SETRANGE("Posting Date",GLEntry."Posting Date");
      IncomingDocument.DELETEALL;
      IncomingDocumentAttachment.DELETEALL;

      // Execution
      FileName := CreateDummyFile('xml');
      ImportAttachToIncomingDoc(IncomingDocumentAttachment,FileName);

      // Verify
      IncomingDocument.FINDFIRST;
      IncomingDocument.TESTFIELD(Description);
      IncomingDocument.TESTFIELD(Released);
      IncomingDocument.TESTFIELD(Posted);
      IncomingDocument.TESTFIELD("Document No.",GLEntry."Document No.");
      IncomingDocument.TESTFIELD("Posting Date",GLEntry."Posting Date");
    END;

    [Test]
    PROCEDURE TestAddAttachmentToExistingSalesDoc@36();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1001 : Record 133;
      SalesHeader@1002 : Record 36;
      FileName@1006 : Text;
    BEGIN
      // Init
      SalesHeader.INIT;
      SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
      SalesHeader.INSERT(TRUE);

      IncomingDocumentAttachment.FILTERGROUP(4);
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",0);
      IncomingDocumentAttachment.SETRANGE("Document Table No. Filter",DATABASE::"Sales Header");
      IncomingDocumentAttachment.SETRANGE("Document Type Filter",SalesHeader."Document Type");
      IncomingDocumentAttachment.SETRANGE("Document No. Filter",SalesHeader."No.");
      IncomingDocumentAttachment.FILTERGROUP(0);

      // Execution
      FileName := CreateDummyFile('xml');
      ImportAttachToIncomingDoc(IncomingDocumentAttachment,FileName);

      // Verify
      Assert.IsTrue(IncomingDocumentAttachment."Incoming Document Entry No." > 0,'');
      SalesHeader.FIND;
      Assert.AreEqual(IncomingDocumentAttachment."Incoming Document Entry No.",SalesHeader."Incoming Document Entry No.",'');
      IncomingDocument.GET(SalesHeader."Incoming Document Entry No.");
      IncomingDocument.TESTFIELD(Description);
      IncomingDocument.TESTFIELD(Released);
      IncomingDocument.TESTFIELD(Posted,FALSE);
      IncomingDocument.TESTFIELD("Document No.",'');
      IncomingDocument.TESTFIELD("Posting Date",0D);
    END;

    [Test]
    PROCEDURE TestAddAttachmentToExistingPurchDoc@240();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1001 : Record 133;
      PurchaseHeader@1002 : Record 38;
      FileName@1006 : Text;
    BEGIN
      // Init
      PurchaseHeader.INIT;
      PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::Order;
      PurchaseHeader.INSERT(TRUE);

      IncomingDocumentAttachment.FILTERGROUP(4);
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",0);
      IncomingDocumentAttachment.SETRANGE("Document Table No. Filter",DATABASE::"Purchase Header");
      IncomingDocumentAttachment.SETRANGE("Document Type Filter",PurchaseHeader."Document Type");
      IncomingDocumentAttachment.SETRANGE("Document No. Filter",PurchaseHeader."No.");
      IncomingDocumentAttachment.FILTERGROUP(0);

      // Execution
      FileName := CreateDummyFile('xml');
      ImportAttachToIncomingDoc(IncomingDocumentAttachment,FileName);

      // Verify
      Assert.IsTrue(IncomingDocumentAttachment."Incoming Document Entry No." > 0,'');
      PurchaseHeader.FIND;
      Assert.AreEqual(IncomingDocumentAttachment."Incoming Document Entry No.",PurchaseHeader."Incoming Document Entry No.",'');
      IncomingDocument.GET(PurchaseHeader."Incoming Document Entry No.");
      IncomingDocument.TESTFIELD(Description);
      IncomingDocument.TESTFIELD(Released);
      IncomingDocument.TESTFIELD(Posted,FALSE);
      IncomingDocument.TESTFIELD("Document No.",'');
      IncomingDocument.TESTFIELD("Posting Date",0D);
    END;

    [Test]
    PROCEDURE TestAddAttachmentToExistingGenJnlLine@241();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1001 : Record 133;
      GenJournalLine@1002 : Record 81;
      GenJournalBatch@1003 : Record 232;
      GenJournalTemplate@1004 : Record 80;
      FileName@1006 : Text;
    BEGIN
      // Init
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalLine."Journal Template Name" := GenJournalTemplate.Name;
      GenJournalLine."Journal Batch Name" := GenJournalBatch.Name;
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalTemplate.Name);
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      IF GenJournalLine.FINDLAST THEN;
      GenJournalLine."Line No." += 10000;
      GenJournalLine.INSERT(TRUE);

      IncomingDocumentAttachment.FILTERGROUP(4);
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",0);
      IncomingDocumentAttachment.SETRANGE("Journal Template Name Filter",GenJournalLine."Journal Template Name");
      IncomingDocumentAttachment.SETRANGE("Journal Batch Name Filter",GenJournalLine."Journal Batch Name");
      IncomingDocumentAttachment.SETRANGE("Journal Line No. Filter",GenJournalLine."Line No.");
      IncomingDocumentAttachment.FILTERGROUP(0);

      // Execution
      FileName := CreateDummyFile('xml');
      ImportAttachToIncomingDoc(IncomingDocumentAttachment,FileName);

      // Verify
      Assert.IsTrue(IncomingDocumentAttachment."Incoming Document Entry No." > 0,'');
      GenJournalLine.FIND;
      Assert.AreEqual(IncomingDocumentAttachment."Incoming Document Entry No.",GenJournalLine."Incoming Document Entry No.",'');
      IncomingDocument.GET(GenJournalLine."Incoming Document Entry No.");
      IncomingDocument.TESTFIELD(Description);
      IncomingDocument.TESTFIELD(Released);
      IncomingDocument.TESTFIELD(Posted,FALSE);
      IncomingDocument.TESTFIELD("Document No.",'');
      IncomingDocument.TESTFIELD("Posting Date",0D);
    END;

    [Test]
    PROCEDURE TestMainAttachmentIsSetForFirstAttachment@55();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1001 : Record 133;
      FileName@1006 : Text;
    BEGIN
      // Init

      IF IncomingDocument.FINDLAST THEN;
      IncomingDocument.INIT;
      IncomingDocument."Entry No." += 1;
      IncomingDocument.INSERT;

      // Execution
      FileName := CreateDummyFile('xml');
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      ImportAttachToIncomingDoc(IncomingDocumentAttachment,FileName);
      IncomingDocumentAttachment.GET(IncomingDocumentAttachment."Incoming Document Entry No.",IncomingDocumentAttachment."Line No.");

      // Verify
      Assert.AreEqual(IncomingDocumentAttachment."Main Attachment",TRUE,'Main Attachment should be set on the main document');
    END;

    [Test]
    PROCEDURE TestMainAttachmentIsNotSetForSecondAttachment@75();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1001 : Record 133;
      IncomingDocumentAttachment2@1007 : Record 133;
      FileName@1006 : Text;
      FileName2@1005 : Text;
    BEGIN
      // Init

      IF IncomingDocument.FINDLAST THEN;
      IncomingDocument.INIT;
      IncomingDocument."Entry No." += 1;
      IncomingDocument.INSERT;

      FileName := CreateDummyFile('xml');
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      ImportAttachToIncomingDoc(IncomingDocumentAttachment,FileName);
      IncomingDocumentAttachment.GET(IncomingDocumentAttachment."Incoming Document Entry No.",IncomingDocumentAttachment."Line No.");

      // Execution
      FileName2 := CreateDummyFile('xml');
      IncomingDocumentAttachment2.SETRANGE("Incoming Document Entry No.",IncomingDocumentAttachment."Incoming Document Entry No.");
      ImportAttachToIncomingDoc(IncomingDocumentAttachment2,FileName2);
      IncomingDocumentAttachment2.GET(
        IncomingDocumentAttachment2."Incoming Document Entry No.",IncomingDocumentAttachment2."Line No.");

      // Verify
      Assert.AreEqual(IncomingDocumentAttachment."Main Attachment",TRUE,'Main Attachment should be set on the main document');
      Assert.AreEqual(IncomingDocumentAttachment2."Main Attachment",FALSE,'Main Attachment should not be set on the second document');
    END;

    [Test]
    PROCEDURE TestCannotDeleteMainAttachment@79();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1001 : Record 133;
      IncomingDocumentAttachment2@1007 : Record 133;
      FileName@1006 : Text;
      FileName2@1005 : Text;
    BEGIN
      // Init

      IF IncomingDocument.FINDLAST THEN;
      IncomingDocument.INIT;
      IncomingDocument."Entry No." += 1;
      IncomingDocument.INSERT;

      FileName := CreateDummyFile('xml');
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      ImportAttachToIncomingDoc(IncomingDocumentAttachment,FileName);
      IncomingDocumentAttachment.GET(IncomingDocumentAttachment."Incoming Document Entry No.",IncomingDocumentAttachment."Line No.");
      IncomingDocumentAttachment.Default := FALSE;
      IncomingDocumentAttachment.MODIFY;

      // Execution
      FileName2 := CreateDummyFile('xml');
      IncomingDocumentAttachment2.SETRANGE("Incoming Document Entry No.",IncomingDocumentAttachment."Incoming Document Entry No.");
      ImportAttachToIncomingDoc(IncomingDocumentAttachment2,FileName2);
      IncomingDocumentAttachment2.GET(
        IncomingDocumentAttachment2."Incoming Document Entry No.",IncomingDocumentAttachment2."Line No.");
      IncomingDocumentAttachment2.Default := TRUE;
      IncomingDocumentAttachment2.MODIFY;

      // Verify
      ASSERTERROR IncomingDocumentAttachment.DELETE(TRUE);
      Assert.ExpectedError(MainAttachErr);
    END;

    [Test]
    PROCEDURE TestUpdatingDefaultAttachmentDoesntReplaceMainAttachment@52();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1001 : Record 133;
      IncomingDocumentAttachment2@1007 : Record 133;
      MainIncomingDocumentAttachment@1008 : Record 133;
      FileName@1006 : Text;
      FileName2@1005 : Text;
    BEGIN
      // Init

      IF IncomingDocument.FINDLAST THEN;
      IncomingDocument.INIT;
      IncomingDocument."Entry No." += 1;
      IncomingDocument.INSERT;

      FileName := CreateDummyFile('xml');
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      ImportAttachToIncomingDoc(IncomingDocumentAttachment,FileName);
      IncomingDocumentAttachment.GET(IncomingDocumentAttachment."Incoming Document Entry No.",IncomingDocumentAttachment."Line No.");
      IncomingDocumentAttachment.Default := FALSE;
      IncomingDocumentAttachment.MODIFY;

      FileName2 := CreateDummyFile('xml');
      IncomingDocumentAttachment2.SETRANGE("Incoming Document Entry No.",IncomingDocumentAttachment."Incoming Document Entry No.");
      ImportAttachToIncomingDoc(IncomingDocumentAttachment2,FileName2);
      IncomingDocumentAttachment2.GET(
        IncomingDocumentAttachment2."Incoming Document Entry No.",IncomingDocumentAttachment2."Line No.");

      // Execute
      IncomingDocumentAttachment2.VALIDATE(Default,TRUE);
      IncomingDocumentAttachment2.MODIFY;

      // Verify
      IncomingDocumentAttachment.GET(IncomingDocumentAttachment."Incoming Document Entry No.",IncomingDocumentAttachment."Line No.");
      IncomingDocumentAttachment2.GET(
        IncomingDocumentAttachment2."Incoming Document Entry No.",IncomingDocumentAttachment2."Line No.");
      IncomingDocument.GetMainAttachment(MainIncomingDocumentAttachment);

      Assert.AreEqual(IncomingDocumentAttachment."Main Attachment",TRUE,'Main Attachment should be set on the main document');
      Assert.AreEqual(IncomingDocumentAttachment2."Main Attachment",FALSE,'Main Attachment should not be set on the second document');
      Assert.AreEqual(IncomingDocumentAttachment.Default,FALSE,'Main Attachment should not be default');
      Assert.AreEqual(IncomingDocumentAttachment2.Default,TRUE,'Default attachment should be set');
      Assert.AreEqual(
        IncomingDocumentAttachment."Incoming Document Entry No.",MainIncomingDocumentAttachment."Incoming Document Entry No.",
        'IncomingDocument.GetMainAttachment result does not match expected value');
      Assert.AreEqual(
        IncomingDocumentAttachment."Line No.",MainIncomingDocumentAttachment."Line No.",
        'IncomingDocument.GetMainAttachment result does not match expected value');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE TestReplaceMainAttachment@71();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1001 : Record 133;
      IncomingDocumentAttachment2@1007 : Record 133;
      MainIncomingDocumentAttachment@1008 : Record 133;
      FileManagement@1010 : Codeunit 419;
      FileName@1006 : Text;
      FileName2@1005 : Text;
      FileName3@1009 : Text;
    BEGIN
      // Init

      IF IncomingDocument.FINDLAST THEN;
      IncomingDocument.INIT;
      IncomingDocument."Entry No." += 1;
      IncomingDocument.INSERT;

      FileName := CreateDummyFile('xml');
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      ImportAttachToIncomingDoc(IncomingDocumentAttachment,FileName);
      IncomingDocumentAttachment.GET(IncomingDocumentAttachment."Incoming Document Entry No.",IncomingDocumentAttachment."Line No.");

      FileName2 := CreateDummyFile('xml');
      IncomingDocumentAttachment2.SETRANGE("Incoming Document Entry No.",IncomingDocumentAttachment."Incoming Document Entry No.");
      ImportAttachToIncomingDoc(IncomingDocumentAttachment2,FileName2);
      IncomingDocumentAttachment2.GET(
        IncomingDocumentAttachment2."Incoming Document Entry No.",IncomingDocumentAttachment2."Line No.");

      FileName3 := CreateDummyFile('xml');

      LibraryVariableStorage.Enqueue(ReplaceMainAttachmentQst);
      LibraryVariableStorage.Enqueue(TRUE);

      // Execution
      IncomingDocument.ReplaceMainAttachment(FileName3);

      // Verify
      LibraryVariableStorage.AssertEmpty;
      IncomingDocument.GetMainAttachment(MainIncomingDocumentAttachment);
      IncomingDocumentAttachment2.GET(
        IncomingDocumentAttachment2."Incoming Document Entry No.",IncomingDocumentAttachment2."Line No.");

      Assert.IsFalse(
        IncomingDocumentAttachment.GET(IncomingDocumentAttachment."Incoming Document Entry No.",IncomingDocumentAttachment."Line No."),
        'Previous Incoming Document Attachment should be removed');
      Assert.AreEqual(IncomingDocumentAttachment2."Main Attachment",FALSE,'Main Attachment should not be set on the third document');
      Assert.AreEqual(MainIncomingDocumentAttachment."Main Attachment",TRUE,'Main Attachment should be set on the new document');
      Assert.AreEqual(MainIncomingDocumentAttachment.Default,TRUE,'Default should be set on the main document');
      Assert.AreEqual(
        MainIncomingDocumentAttachment.Name,FileManagement.GetFileNameWithoutExtension(FileName3),'Wrong file name is set');
    END;

    [Test]
    PROCEDURE TestGetDocNoWithoutIncomingDoc@45();
    VAR
      PostedDocsWithNoIncDoc@1000 : TestPage 188;
    BEGIN
      // init
      CreateTestGLEntries;

      // Execution
      PostedDocsWithNoIncDoc.OPENVIEW;
      PostedDocsWithNoIncDoc.DocNoFilter.SETVALUE(FORMAT(2));
      PostedDocsWithNoIncDoc.FIRST;

      // Verification
      Assert.AreEqual('Test',PostedDocsWithNoIncDoc."First Posting Description".VALUE,'');
      Assert.AreEqual(FORMAT(2),PostedDocsWithNoIncDoc."Document No.".VALUE,'');
    END;

    [Test]
    [HandlerFunctions(IncomingDocumentsLookupHandler)]
    PROCEDURE TestUpdateIncomingDocumentFromDocNoWOIncDoc@46();
    VAR
      IncomingDocument@1000 : Record 130;
      PostedDocsWithNoIncDoc@1001 : TestPage 188;
    BEGIN
      // [SCENARIO 124640] Annie can get a list of document numbers without an incoming document from the Incoming Documents page.

      // [GIVEN] We have some G/LEntries without an incoming document and we have a new incoming document.
      CreateTestGLEntries;
      IncomingDocument.DELETEALL;
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.TESTFIELD("Entry No.");

      // [WHEN] We open the "Posted Documents without Incoming Document" and select the first and click "Select Inc..."
      PostedDocsWithNoIncDoc.OPENVIEW;
      PostedDocsWithNoIncDoc.DocNoFilter.SETVALUE(FORMAT(2));
      PostedDocsWithNoIncDoc.FIRST;
      PostedDocsWithNoIncDoc.SelectIncomingDoc.INVOKE; // Opens page 190 - see pagehandler

      // [THEN] PAge 190 opens and the user can select an IC to attach to the posted document.
      IncomingDocument.FIND;
      Assert.IsTrue(IncomingDocument.Posted,'');
      Assert.AreEqual('2',IncomingDocument."Document No.",'');
    END;

    [Test]
    PROCEDURE TestCreateIncomingDocumentFromServerFile@51();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1001 : Record 133;
      FileManagement@1002 : Codeunit 419;
      File@1004 : File;
      FileName@1003 : Text;
    BEGIN
      // Init
      FileName := FileManagement.ServerTempFileName('xml');
      File.CREATE(FileName);
      File.WRITE('<TEST>hello</TEST>');
      File.CLOSE;

      // Execute
      IncomingDocument.CreateIncomingDocumentFromServerFile('MyFile.xml',FileName);

      // Verify
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      Assert.AreEqual(1,IncomingDocumentAttachment.COUNT,'');
      IncomingDocumentAttachment.FINDFIRST;
      IncomingDocumentAttachment.CALCFIELDS(Content);
      Assert.IsTrue(IncomingDocumentAttachment.Content.HASVALUE,'');
      Assert.AreEqual(IncomingDocumentAttachment.Type::XML,IncomingDocumentAttachment.Type,'');
      Assert.AreEqual('xml',IncomingDocumentAttachment."File Extension",'');

      // Clean-up + test delete
      IncomingDocument.DELETE(TRUE);
      Assert.AreEqual(0,IncomingDocumentAttachment.COUNT,'');
    END;

    [Test]
    PROCEDURE TestDefaultAttachmentOnInsert@38();
    VAR
      IncomingDocument@1000 : Record 130;
      DefaultIncomingDocumentAttachment@1002 : Record 133;
      NonDefaultIncomingDocumentAttachment@1001 : Record 133;
      DefaultAttachmentNo@1003 : Integer;
      NonDefaultAttachmentNo@1004 : Integer;
    BEGIN
      // Init
      CreateNewIncomingDocument(IncomingDocument);
      DefaultAttachmentNo := InsertIncomingDocumentAttachment(IncomingDocument);
      DefaultIncomingDocumentAttachment.GET(IncomingDocument."Entry No.",DefaultAttachmentNo);
      NonDefaultAttachmentNo := InsertIncomingDocumentAttachment(IncomingDocument);
      NonDefaultIncomingDocumentAttachment.GET(IncomingDocument."Entry No.",NonDefaultAttachmentNo);

      // Verify;
      Assert.IsTrue(DefaultIncomingDocumentAttachment.Default,'');
      Assert.IsFalse(NonDefaultIncomingDocumentAttachment.Default,'');
    END;

    [Test]
    PROCEDURE TestDefaultAttachmentOnImport@39();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1002 : Record 133;
      FileName@1001 : Text;
    BEGIN
      // Init
      IF IncomingDocument.FINDLAST THEN;
      IncomingDocument.INIT;
      IncomingDocument."Entry No." += 1;
      IncomingDocument.INSERT;
      IncomingDocument.SETRANGE("Entry No.",IncomingDocument."Entry No.");
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");

      // Execute
      FileName := CreateDummyFile('xml');
      ImportAttachToIncomingDoc(IncomingDocumentAttachment,FileName);
      FileName := CreateDummyFile('pdf');
      ImportAttachToIncomingDoc(IncomingDocumentAttachment,FileName);
      FileName := CreateDummyFile('jpg');
      ImportAttachToIncomingDoc(IncomingDocumentAttachment,FileName);

      // Verify;
      IncomingDocumentAttachment.FINDSET;
      Assert.IsTrue(IncomingDocumentAttachment.Default,'');
      WHILE IncomingDocumentAttachment.NEXT <> 0 DO
        Assert.IsFalse(IncomingDocumentAttachment.Default,'');
    END;

    [Test]
    PROCEDURE TestDefaultAttachmentChange@47();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1002 : Record 133;
      Attachment1No@1001 : Integer;
      Attachment2No@1003 : Integer;
      Attachment3No@1004 : Integer;
    BEGIN
      // Init
      CreateNewIncomingDocument(IncomingDocument);
      Attachment1No := InsertIncomingDocumentAttachment(IncomingDocument);
      Attachment2No := InsertIncomingDocumentAttachment(IncomingDocument);
      Attachment3No := InsertIncomingDocumentAttachment(IncomingDocument);

      // Execute
      IncomingDocumentAttachment.GET(IncomingDocument."Entry No.",Attachment3No);
      IncomingDocumentAttachment.VALIDATE(Default,TRUE);
      IncomingDocumentAttachment.MODIFY(TRUE);

      // Verify
      Assert.IsTrue(IncomingDocumentAttachment.Default,'');
      IncomingDocumentAttachment.GET(IncomingDocument."Entry No.",Attachment2No);
      Assert.IsFalse(IncomingDocumentAttachment.Default,'');
      IncomingDocumentAttachment.GET(IncomingDocument."Entry No.",Attachment1No);
      Assert.IsFalse(IncomingDocumentAttachment.Default,'');
    END;

    [Test]
    PROCEDURE TestDefaultAttachmentDeleteDisallowed@49();
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1002 : Record 133;
      Attachment1No@1001 : Integer;
    BEGIN
      // Init
      CreateNewIncomingDocument(IncomingDocument);
      Attachment1No := InsertIncomingDocumentAttachment(IncomingDocument);
      InsertIncomingDocumentAttachment(IncomingDocument);
      InsertIncomingDocumentAttachment(IncomingDocument);

      // Execute
      IncomingDocumentAttachment.GET(IncomingDocument."Entry No.",Attachment1No);

      // Verify
      ASSERTERROR IncomingDocumentAttachment.DELETE(TRUE);
      Assert.ExpectedError(OnlyOneDefaultAttachmentErr);

      // Verify - 2
      ASSERTERROR IncomingDocumentAttachment.DeleteAttachment;
      Assert.ExpectedError(OnlyOneDefaultAttachmentErr);
    END;

    [Test]
    [HandlerFunctions(IncomingDocumentCardHandler)]
    PROCEDURE TestShowIncomingDocumentCard@48();
    VAR
      IncomingDocument@1000 : Record 130;
    BEGIN
      // [SCENARIO 124640] Annie can see the Incoming Document Card from a posted entry.

      // [GIVEN] We have a posted incoming document.
      IncomingDocument.DELETEALL;
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.TESTFIELD("Entry No.");
      IncomingDocument.Release;
      IncomingDocument.SetPostedDocFields(010100D,'TEST');

      // [WHEN] We call the ShowCard method
      IncomingDocument.ShowCard('TEST',010100D);

      // [THEN] Page 189 opens. Verified by page handler.
    END;

    [Test]
    PROCEDURE TestSetFiltersFromMainRecSalesHeader@41();
    VAR
      IncomingDocumentAttachment@1002 : Record 133;
      SalesHeader@1000 : Record 36;
      RecRef@1001 : RecordRef;
    BEGIN
      // [SCENARIO] User wants to create a new incoming document to an existing entity from the factbox

      // [GIVEN] We have a sales document (credit memo) with no incoming document
      SalesHeader.INIT;
      SalesHeader."Document Type" := SalesHeader."Document Type"::"Credit Memo";
      SalesHeader."No." := '1234';

      // [WHEN] The user clicks create incoming document from file,
      RecRef.GETTABLE(SalesHeader);
      IncomingDocumentAttachment.SetFiltersFromMainRecord(RecRef,IncomingDocumentAttachment);

      // [THEN] the sales header fields are set as filters on the attachment
      Assert.AreEqual(DATABASE::"Sales Header",IncomingDocumentAttachment.GETRANGEMIN("Document Table No. Filter"),'');
      Assert.AreEqual(SalesHeader."Document Type",IncomingDocumentAttachment.GETRANGEMIN("Document Type Filter"),'');
      Assert.AreEqual(SalesHeader."No.",IncomingDocumentAttachment.GETRANGEMIN("Document No. Filter"),'');
    END;

    [Test]
    PROCEDURE TestSetFiltersFromMainRecPurchHeader@65();
    VAR
      IncomingDocumentAttachment@1002 : Record 133;
      PurchaseHeader@1000 : Record 38;
      RecRef@1001 : RecordRef;
    BEGIN
      // [SCENARIO] User wants to create a new incoming document to an existing entity from the factbox

      // [GIVEN] We have a Purchase document (credit memo) with no incoming document
      PurchaseHeader.INIT;
      PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::Invoice;
      PurchaseHeader."No." := '1234';

      // [WHEN] The user clicks create incoming document from file,
      RecRef.GETTABLE(PurchaseHeader);
      IncomingDocumentAttachment.SetFiltersFromMainRecord(RecRef,IncomingDocumentAttachment);

      // [THEN] the Purchase header fields are set as filters on the attachment
      Assert.AreEqual(DATABASE::"Purchase Header",IncomingDocumentAttachment.GETRANGEMIN("Document Table No. Filter"),'');
      Assert.AreEqual(PurchaseHeader."Document Type",IncomingDocumentAttachment.GETRANGEMIN("Document Type Filter"),'');
      Assert.AreEqual(PurchaseHeader."No.",IncomingDocumentAttachment.GETRANGEMIN("Document No. Filter"),'');
    END;

    [Test]
    PROCEDURE TestSetFiltersFromMainRecGenJnlLine@68();
    VAR
      IncomingDocumentAttachment@1002 : Record 133;
      GenJournalLine@1000 : Record 81;
      RecRef@1001 : RecordRef;
    BEGIN
      // [SCENARIO] User wants to create a new incoming document to an existing entity from the factbox

      // [GIVEN] We have a GenJournalLine with no incoming document
      GenJournalLine.INIT;
      GenJournalLine."Journal Batch Name" := 'B';
      GenJournalLine."Journal Template Name" := 'T';
      GenJournalLine."Line No." := 10000;

      // [WHEN] The user clicks create incoming document from file,
      RecRef.GETTABLE(GenJournalLine);
      IncomingDocumentAttachment.SetFiltersFromMainRecord(RecRef,IncomingDocumentAttachment);

      // [THEN] the journal line fields are set as filters on the attachment
      Assert.AreEqual(DATABASE::"Gen. Journal Line",IncomingDocumentAttachment.GETRANGEMIN("Document Table No. Filter"),'');
      Assert.AreEqual(GenJournalLine."Journal Batch Name",IncomingDocumentAttachment.GETRANGEMIN("Journal Batch Name Filter"),'');
      Assert.AreEqual(
        GenJournalLine."Journal Template Name",IncomingDocumentAttachment.GETRANGEMIN("Journal Template Name Filter"),'');
      Assert.AreEqual(GenJournalLine."Line No.",IncomingDocumentAttachment.GETRANGEMIN("Journal Line No. Filter"),'');
    END;

    [Test]
    PROCEDURE TestSetFiltersFromMainRecGLEntry@74();
    VAR
      IncomingDocumentAttachment@1002 : Record 133;
      GLEntry@1000 : Record 17;
      RecRef@1001 : RecordRef;
    BEGIN
      // [SCENARIO] User wants to create a new incoming document to an existing entity from the factbox

      // [GIVEN] We have a GLEnry with no incoming document
      GLEntry.INIT;
      GLEntry."Document No." := '1234';
      GLEntry."Posting Date" := TODAY;

      // [WHEN] The user clicks create incoming document from file,
      RecRef.GETTABLE(GLEntry);
      IncomingDocumentAttachment.SetFiltersFromMainRecord(RecRef,IncomingDocumentAttachment);

      // [THEN] the GLEntry fields are set as filters on the attachment
      Assert.AreEqual(GLEntry."Document No.",IncomingDocumentAttachment.GETRANGEMIN("Document No."),'');
      Assert.AreEqual(GLEntry."Posting Date",IncomingDocumentAttachment.GETRANGEMIN("Posting Date"),'');
    END;

    [Test]
    PROCEDURE TestSetFiltersFromMainRecPostedPurchInvoice@82();
    VAR
      IncomingDocumentAttachment@1002 : Record 133;
      PurchInvHeader@1000 : Record 122;
      RecRef@1001 : RecordRef;
    BEGIN
      // [SCENARIO] User wants to create a new incoming document to an existing entity from the factbox

      // [GIVEN] We have a PurchInvHeader with no incoming document
      PurchInvHeader.INIT;
      PurchInvHeader."No." := '1234';
      PurchInvHeader."Posting Date" := TODAY;

      // [WHEN] The user clicks create incoming document from file,
      RecRef.GETTABLE(PurchInvHeader);
      IncomingDocumentAttachment.SetFiltersFromMainRecord(RecRef,IncomingDocumentAttachment);

      // [THEN] the PurchInvHeader fields are set as filters on the attachment
      Assert.AreEqual(PurchInvHeader."No.",IncomingDocumentAttachment.GETRANGEMIN("Document No."),'');
      Assert.AreEqual(PurchInvHeader."Posting Date",IncomingDocumentAttachment.GETRANGEMIN("Posting Date"),'');
    END;

    [Test]
    PROCEDURE MultipleUpdateIncomingDocumentFromPosting@40();
    VAR
      IncomingDocument@1000 : Record 130;
      PostingDate@1001 : Date;
      DocumentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 376596] TAB130 "Incoming Document".UpdateIncomingDocumentFromPosting() uses last Document No and Date in case of multiple call
      CreateNewIncomingDocument(IncomingDocument);
      IncomingDocument.UpdateIncomingDocumentFromPosting(IncomingDocument."Entry No.",010115D,'TEST');

      PostingDate := LibraryRandom.RandDate(10);
      DocumentNo := LibraryUtility.GenerateGUID;
      IncomingDocument.FIND;
      IncomingDocument.UpdateIncomingDocumentFromPosting(IncomingDocument."Entry No.",PostingDate,DocumentNo);

      IncomingDocument.FIND;
      Assert.AreEqual(DocumentNo,IncomingDocument."Document No.",IncomingDocument.FIELDCAPTION("Document No."));
      Assert.AreEqual(PostingDate,IncomingDocument."Posting Date",IncomingDocument.FIELDCAPTION("Posting Date"));
    END;

    [Test]
    PROCEDURE UT_DocDateAndDueDateNotValidatedWhenChangeSalesInvPostingDateFromIncDoc@44();
    VAR
      SalesHeader@1001 : Record 36;
      DocDate@1000 : Date;
      DueDate@1002 : Date;
    BEGIN
      // [FEATURE] [UT] [Sales]
      // [SCENARIO 378141] "Document Date" and "Due Date" should not be validated when change "Posting Date" of Sales Invoice related to Incoming Document

      // [GIVEN] Incoming Document with "Entry No." = "X", "Document Date" = "01.01", "Due Date" = "10.01"
      // [GIVEN] Sales Invoice with "Incoming Document Entry No." = "X", "Posting Date" = "05.01", "Document Date" = "01.01", "Due Date" = "10.01"
      DocDate := LibraryRandom.RandDate(100);
      DueDate := LibraryRandom.RandDate(100);
      MockSalesHeaderWithDateAndIncomingDocEntryNo(SalesHeader,DocDate,DueDate);

      // [WHEN] Change "Posting Date" of Sales Invoice to "08.01"
      SalesHeader.VALIDATE("Posting Date",DueDate + 1);

      // [THEN] "Document Date" of Sales Invoice is "01.01"
      SalesHeader.TESTFIELD("Document Date",DocDate);

      // [THEN] "Due Date" of Sales Invoice is "10.01"
      SalesHeader.TESTFIELD("Due Date",DueDate);
    END;

    [Test]
    PROCEDURE UT_DocDateAndDueDateNotValidatedWhenChangePurchInvPostingDateFromIncDoc@63();
    VAR
      PurchHeader@1000 : Record 38;
      DocDate@1002 : Date;
      DueDate@1001 : Date;
    BEGIN
      // [FEATURE] [UT] [Purchase]
      // [SCENARIO 378141] "Document Date" and "Due Date" should not be validated when change "Posting Date" of Purchase Invoice related to Incoming Document

      // [GIVEN] Incoming Document with "Entry No." = "X", "Document Date" = "01.01", "Due Date" = "10.01"
      // [GIVEN] Purchase Invoice with "Incoming Document Entry No." = "X", "Posting Date" = "05.01", "Document Date" = "01.01", "Due Date" = "10.01"
      DocDate := LibraryRandom.RandDate(100);
      DueDate := LibraryRandom.RandDate(100);
      MockPurchHeaderWithDateAndIncomingDocEntryNo(PurchHeader,DocDate,DueDate);

      // [WHEN] Change "Posting Date" of Purchase Invoice to "08.01"
      PurchHeader.VALIDATE("Posting Date",DueDate + 1);

      // [THEN] "Document Date" of Purchase Invoice is "01.01"
      PurchHeader.TESTFIELD("Document Date",DocDate);

      // [THEN] "Due Date" of Purchase Purchase is "10.01"
      PurchHeader.TESTFIELD("Due Date",DueDate);
    END;

    LOCAL PROCEDURE GetIncomeStatementAcc@17() : Code[20];
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      GLAccount.SETRANGE("Income/Balance",GLAccount."Income/Balance"::"Income Statement");
      EXIT(LibraryERM.FindDirectPostingGLAccount(GLAccount));
    END;

    LOCAL PROCEDURE GetBalanceSheetAcc@18() : Code[20];
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      GLAccount.SETRANGE("Income/Balance",GLAccount."Income/Balance"::"Balance Sheet");
      EXIT(LibraryERM.FindDirectPostingGLAccount(GLAccount));
    END;

    LOCAL PROCEDURE CreateNewIncomingDocument@67(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      LibraryIncomingDocuments.InitIncomingDocuments;
      LibraryIncomingDocuments.CreateNewIncomingDocument(IncomingDocument);
      COMMIT;
    END;

    LOCAL PROCEDURE CreateDummyFile@42(Extension@1003 : Text) : Text;
    VAR
      FileManagement@1002 : Codeunit 419;
      File@1000 : File;
      FileName@1001 : Text;
    BEGIN
      FileName := FileManagement.ServerTempFileName(Extension);
      File.CREATE(FileName);
      File.WRITE('<TEST>hello</TEST>');
      File.CLOSE;
      EXIT(FileManagement.DownloadTempFile(FileName));
    END;

    LOCAL PROCEDURE CreateTestGLEntries@54();
    VAR
      GLEntry@1001 : Record 17;
      i@1000 : Integer;
    BEGIN
      IF GLEntry.FINDLAST THEN;
      FOR i := 1 TO 10 DO BEGIN
        GLEntry."Entry No." += 1;
        GLEntry."G/L Account No." := 'TEST';
        GLEntry."Posting Date" := WORKDATE - i MOD 3;
        GLEntry."Document No." := FORMAT(i);
        GLEntry.Description := 'Test';
        GLEntry.Amount := 1;
        GLEntry."Debit Amount" := 1;
        GLEntry."Credit Amount" := 0;
        GLEntry.INSERT;
      END;
    END;

    LOCAL PROCEDURE MockSalesHeaderWithDateAndIncomingDocEntryNo@92(VAR SalesHeader@1000 : Record 36;DocDate@1001 : Date;DueDate@1003 : Date);
    VAR
      IncomingDocument@1002 : Record 130;
    BEGIN
      CreateNewIncomingDocument(IncomingDocument);
      WITH SalesHeader DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Invoice;
        INSERT(TRUE);
        "Posting Date" := WORKDATE;
        "Document Date" := DocDate;
        "Due Date" := DueDate;
        "Incoming Document Entry No." := IncomingDocument."Entry No.";
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE MockPurchHeaderWithDateAndIncomingDocEntryNo@96(VAR PurchHeader@1000 : Record 38;DocDate@1003 : Date;DueDate@1001 : Date);
    VAR
      IncomingDocument@1002 : Record 130;
    BEGIN
      CreateNewIncomingDocument(IncomingDocument);
      WITH PurchHeader DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Invoice;
        INSERT(TRUE);
        "Posting Date" := WORKDATE;
        "Document Date" := DocDate;
        "Due Date" := DueDate;
        "Incoming Document Entry No." := IncomingDocument."Entry No.";
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE ValidatePostedIncomingDocument@26(VAR IncomingDocument@1000 : Record 130);
    BEGIN
      IncomingDocument.GET(IncomingDocument."Entry No.");
      IncomingDocument.TESTFIELD(Posted);
      IncomingDocument.TESTFIELD("Posted Date-Time");
      IncomingDocument.TESTFIELD("Document No.");
      IncomingDocument.TESTFIELD("Posting Date");
      Assert.IsTrue(IncomingDocument.PostedDocExists(IncomingDocument."Document No.",IncomingDocument."Posting Date"),'');
    END;

    [PageHandler]
    PROCEDURE PurchInvHandler@37(VAR PurchaseInvoice@1000 : Page 51);
    BEGIN
    END;

    [PageHandler]
    PROCEDURE PurchCrMemoHandler@14(VAR PurchaseCreditMemo@1000 : Page 52);
    BEGIN
    END;

    [PageHandler]
    PROCEDURE SalesInvHandler@12(VAR SalesInvoice@1000 : Page 43);
    BEGIN
    END;

    [PageHandler]
    PROCEDURE SalesCrMemoHandler@1(VAR SalesCreditMemo@1000 : Page 44);
    BEGIN
    END;

    LOCAL PROCEDURE UpdateIncomingDocumentsSetup@21();
    VAR
      IncomingDocumentsSetup@1000 : Record 131;
    BEGIN
      IncomingDocumentsSetup.Fetch;
      IncomingDocumentsSetup.VALIDATE("Require Approval To Create",FALSE);
      IncomingDocumentsSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ImportAttachToIncomingDoc@53(VAR IncomingDocumentAttachment@1001 : Record 133;FilePath@1000 : Text);
    VAR
      ImportAttachmentIncDoc@1002 : Codeunit 134;
    BEGIN
      IncomingDocumentAttachment.INIT;
      ImportAttachmentIncDoc.ImportAttachment(IncomingDocumentAttachment,FilePath);
    END;

    LOCAL PROCEDURE ImportAndVerifyAttachment@31(Extension@1005 : Text;ExpectedContentType@1006 : Option);
    VAR
      IncomingDocument@1000 : Record 130;
      IncomingDocumentAttachment@1001 : Record 133;
      FileManagement@1002 : Codeunit 419;
      FileName@1003 : Text;
    BEGIN
      // Init
      FileName := CreateDummyFile(Extension);
      IF IncomingDocument.FINDLAST THEN;
      IncomingDocument.INIT;
      IncomingDocument."Entry No." += 1;
      IncomingDocument.INSERT;
      IncomingDocument.SETRANGE("Entry No.",IncomingDocument."Entry No.");

      // Execute
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      ImportAttachToIncomingDoc(IncomingDocumentAttachment,FileName);
      // FileManagement.DeleteServerFile(FileName); Fails in SNAP

      // Verify
      Assert.AreEqual(1,IncomingDocumentAttachment.COUNT,'');
      IncomingDocumentAttachment.FINDFIRST;
      IncomingDocumentAttachment.CALCFIELDS(Content);
      Assert.IsTrue(IncomingDocumentAttachment.Content.HASVALUE,'');
      Assert.AreEqual(ExpectedContentType,IncomingDocumentAttachment.Type,'');
      Assert.AreEqual(LOWERCASE(Extension),IncomingDocumentAttachment."File Extension",'');
      Assert.AreEqual(
        COPYSTR(FileManagement.GetFileNameWithoutExtension(FileName),1,MAXSTRLEN(IncomingDocumentAttachment.Name)),
        IncomingDocumentAttachment.Name,'');

      // Clean-up + test delete
      IncomingDocument.DELETE(TRUE);
      Assert.AreEqual(0,IncomingDocumentAttachment.COUNT,'');
    END;

    LOCAL PROCEDURE InsertIncomingDocumentAttachment@43(IncomingDocument@1000 : Record 130) : Integer;
    VAR
      IncomingDocumentAttachment@1001 : Record 133;
      LineNo@1002 : Integer;
    BEGIN
      LineNo := 10000;
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.",IncomingDocument."Entry No.");
      IF IncomingDocumentAttachment.FINDLAST THEN
        LineNo += IncomingDocumentAttachment."Line No.";

      IncomingDocumentAttachment.INIT;
      IncomingDocumentAttachment."Incoming Document Entry No." := IncomingDocument."Entry No.";
      IncomingDocumentAttachment."Line No." := LineNo;
      IncomingDocumentAttachment.Name := LibraryUtility.GenerateGUID;
      IncomingDocumentAttachment.INSERT(TRUE);
      EXIT(LineNo);
    END;

    [ModalPageHandler]
    PROCEDURE IncomingDocumentsLookupHandler@58(VAR IncomingDocuments@1000 : TestPage 190);
    BEGIN
      IncomingDocuments.LAST;
      IncomingDocuments.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE IncomingDocumentsLookupHandlerPrevRec@61(VAR IncomingDocuments@1000 : TestPage 190);
    BEGIN
      IncomingDocuments.PREVIOUS;
      IncomingDocuments.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE IncomingDocumentCardHandler@50(VAR IncomingDocumentCard@1000 : TestPage 189);
    BEGIN
      IncomingDocumentCard.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@35(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Assert.AreEqual(LibraryVariableStorage.DequeueText,Question,'');
      Reply := LibraryVariableStorage.DequeueBoolean;
    END;

    BEGIN
    {
      // [FEATURE] [Incoming Documents]
    }
    END.
  }
}

