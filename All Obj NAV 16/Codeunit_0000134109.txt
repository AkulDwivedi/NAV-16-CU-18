OBJECT Codeunit 134109 ERM Purch Full Prepmt Rounding
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryPurchase@1000 : Codeunit 130512;
      LibraryERM@1003 : Codeunit 131300;
      Assert@1001 : Codeunit 130000;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryRandom@1005 : Codeunit 130440;
      IsInitialized@1004 : Boolean;
      CannotBeLessThanMsg@1008 : TextConst '@@@=.;ENU=cannot be less than %1';
      CannotBeMoreThanMsg@1007 : TextConst '@@@=.;ENU=cannot be more than %1';

    [Test]
    PROCEDURE RecAllPartiallyGetRcptsToInv@1071();
    VAR
      PurchOrderHeader@1001 : Record 38;
      PurchInvoiceHeader@1003 : Record 38;
      PurchOrderLine@1004 : Record 39;
      i@1005 : Integer;
    BEGIN
      Initialize;
      PurchOrderHeader."Prices Including VAT" := FALSE;
      PreparePurchOrder(PurchOrderHeader);
      AddSpecificOrderLine100PctPrepmt(PurchOrderLine,PurchOrderHeader);
      PostPurchPrepmtInvoice(PurchOrderHeader);

      PurchInvoiceHeader."Buy-from Vendor No." := PurchOrderHeader."Buy-from Vendor No.";
      CreatePurchInvoice(PurchInvoiceHeader,PurchOrderHeader."Prices Including VAT");

      FOR i := 1 TO 3 DO BEGIN
        UpdateQtysInLine(PurchOrderLine,2,0);
        PurchOrderHeader.FIND;
        LibraryPurchase.PostPurchaseDocument(PurchOrderHeader,TRUE,FALSE);
        GetReceiptLine(PurchInvoiceHeader,PurchOrderHeader."Last Receiving No.");
      END;

      PurchOrderHeader.FIND;
      LibraryPurchase.PostPurchaseDocument(PurchOrderHeader,TRUE,FALSE);
      GetReceiptLine(PurchInvoiceHeader,PurchOrderHeader."Last Receiving No.");

      LibraryPurchase.PostPurchaseDocument(PurchInvoiceHeader,FALSE,TRUE);
      VerifyZeroVendorAccEntry;

      PurchOrderLine.FIND;
      Assert.AreEqual(
        PurchOrderLine."Prepmt. Amt. Inv.",
        PurchOrderLine."Prepmt Amt Deducted",'"Prepmt Amt Deducted" should be equal to "Prepmt. Amt. Inv.".');
    END;

    LOCAL PROCEDURE AddSpecificOrderLine100PctPrepmt@1072(VAR PurchLine@1002 : Record 39;PurchaseHeader@1000 : Record 38);
    BEGIN
      // Magic numbers from original repro steps Bug 332246
      AddPurchOrderLine(PurchLine,PurchaseHeader,19.625,1192,100,0);
      PurchLine.VALIDATE("Line Amount",16559.33);
      PurchLine.MODIFY;
    END;

    [Test]
    PROCEDURE FinalInvAfterRemoteInvPosExclVAT@1042();
    BEGIN
      FinalInvAfterRemoteInv(FALSE,TRUE);
    END;

    [Test]
    PROCEDURE FinalInvAfterRemoteInvNegExclVAT@1041();
    BEGIN
      FinalInvAfterRemoteInv(FALSE,FALSE);
    END;

    [Test]
    PROCEDURE FinalInvAfterRemoteInvPosInclVAT@1027();
    BEGIN
      FinalInvAfterRemoteInv(TRUE,TRUE);
    END;

    [Test]
    PROCEDURE FinalInvAfterRemoteInvNegInclVAT@1026();
    BEGIN
      FinalInvAfterRemoteInv(TRUE,FALSE);
    END;

    LOCAL PROCEDURE FinalInvAfterRemoteInv@1040(PricesInclVAT@1002 : Boolean;PositiveDiff@1000 : Boolean);
    VAR
      PurchOrderHeader@1001 : Record 38;
      PurchInvoiceHeader@1003 : Record 38;
      PurchOrderLine@1004 : Record 39;
    BEGIN
      Initialize;
      PurchOrderHeader."Prices Including VAT" := PricesInclVAT;
      PreparePurchOrderWithPostedPrepmtInv(PurchOrderHeader,PurchOrderLine,1,PositiveDiff);

      PurchInvoiceHeader."Buy-from Vendor No." := PurchOrderHeader."Buy-from Vendor No.";
      CreatePurchInvoice(PurchInvoiceHeader,PurchOrderHeader."Prices Including VAT");

      LibraryPurchase.PostPurchaseDocument(PurchOrderHeader,TRUE,FALSE);
      GetReceiptLine(PurchInvoiceHeader,PurchOrderHeader."Last Receiving No.");

      LibraryPurchase.PostPurchaseDocument(PurchInvoiceHeader,FALSE,TRUE);
      VerifyZeroVendorAccEntry;

      PurchOrderHeader.FIND;
      InvoicePurchaseDoc(PurchOrderHeader);
      VerifyZeroVendorAccEntry;
    END;

    [Test]
    PROCEDURE ShipTwiceGetRcptsToInvPosExclVAT@1037();
    BEGIN
      RecTwiceGetRcptsToInv(FALSE,TRUE);
    END;

    [Test]
    PROCEDURE RecTwiceGetRcptsToInvNegExclVAT@1036();
    BEGIN
      RecTwiceGetRcptsToInv(FALSE,FALSE);
    END;

    [Test]
    PROCEDURE ShipTwiceGetRcptsToInvPosInclVAT@1030();
    BEGIN
      RecTwiceGetRcptsToInv(TRUE,TRUE);
    END;

    [Test]
    PROCEDURE RecTwiceGetRcptsToInvNegInclVAT@1029();
    BEGIN
      RecTwiceGetRcptsToInv(TRUE,FALSE);
    END;

    LOCAL PROCEDURE RecTwiceGetRcptsToInv@1020(PricesInclVAT@1002 : Boolean;PositiveDiff@1000 : Boolean);
    VAR
      PurchOrderHeader@1001 : Record 38;
      PurchInvoiceHeader@1003 : Record 38;
      PurchOrderLine@1004 : Record 39;
    BEGIN
      Initialize;
      PurchOrderHeader."Prices Including VAT" := PricesInclVAT;
      PreparePurchOrderWithPostedPrepmtInv(PurchOrderHeader,PurchOrderLine,1,PositiveDiff);

      PurchInvoiceHeader."Buy-from Vendor No." := PurchOrderHeader."Buy-from Vendor No.";
      CreatePurchInvoice(PurchInvoiceHeader,PurchOrderHeader."Prices Including VAT");

      LibraryPurchase.PostPurchaseDocument(PurchOrderHeader,TRUE,FALSE);
      GetReceiptLine(PurchInvoiceHeader,PurchOrderHeader."Last Receiving No.");

      UpdateQtysInLine(PurchOrderLine,GetQtyToShipTFS332246(PositiveDiff),0);
      PurchOrderHeader.FIND;
      LibraryPurchase.PostPurchaseDocument(PurchOrderHeader,TRUE,FALSE);
      GetReceiptLine(PurchInvoiceHeader,PurchOrderHeader."Last Receiving No.");

      LibraryPurchase.PostPurchaseDocument(PurchInvoiceHeader,FALSE,TRUE);
      VerifyZeroVendorAccEntry;
    END;

    [Test]
    PROCEDURE PostPartInvFinRemInvPosExclVAT@1013();
    VAR
      PurchHeader@1000 : Record 38;
    BEGIN
      PostPartInvFinRemoteInv(PurchHeader,TRUE);
    END;

    [Test]
    PROCEDURE PostPartInvFinRemInvNegExclVAT@1012();
    VAR
      PurchHeader@1000 : Record 38;
    BEGIN
      PostPartInvFinRemoteInv(PurchHeader,FALSE);
    END;

    [Test]
    PROCEDURE PostPartInvFinRemInvPosInclVAT@1032();
    VAR
      PurchHeader@1000 : Record 38;
    BEGIN
      PurchHeader."Prices Including VAT" := TRUE;
      PostPartInvFinRemoteInv(PurchHeader,TRUE);
    END;

    [Test]
    PROCEDURE PostPartInvFinRemInvNegInclVAT@1031();
    VAR
      PurchHeader@1000 : Record 38;
    BEGIN
      PurchHeader."Prices Including VAT" := TRUE;
      PostPartInvFinRemoteInv(PurchHeader,FALSE);
    END;

    LOCAL PROCEDURE PostPartInvFinRemoteInv@1015(VAR PurchOrderHeader@1000 : Record 38;PositiveDiff@1001 : Boolean);
    BEGIN
      Initialize;
      PostPartialInvoiceWithPrepmt(PurchOrderHeader,PositiveDiff);
      PostInvoiceWithRcptFromOrder(PurchOrderHeader);
      VerifyZeroVendorAccEntry;
    END;

    LOCAL PROCEDURE PostInvoiceWithRcptFromOrder@1051(PurchOrderHeader@1001 : Record 38);
    VAR
      PurchInvoiceHeader@1000 : Record 38;
    BEGIN
      LibraryPurchase.PostPurchaseDocument(PurchOrderHeader,TRUE,FALSE);

      PurchInvoiceHeader."Buy-from Vendor No." := PurchOrderHeader."Buy-from Vendor No.";
      CreatePurchInvoice(PurchInvoiceHeader,PurchOrderHeader."Prices Including VAT");

      GetReceiptLine(PurchInvoiceHeader,PurchOrderHeader."Last Receiving No.");

      InvoicePurchaseDoc(PurchInvoiceHeader);
    END;

    [Test]
    PROCEDURE PostPartInvLineDiscFinRemInv@1052();
    VAR
      PurchHeader@1001 : Record 38;
      PurchLine@1004 : Record 39;
      PositiveDiff@1003 : Boolean;
    BEGIN
      Initialize;
      PositiveDiff := TRUE;
      PreparePOLineWithLineDisc(PurchHeader,PurchLine,PositiveDiff);
      PostPurchPrepmtInvoice(PurchHeader);

      UpdateQtysInLine(PurchLine,GetQtyToShipTFS332246(PositiveDiff),GetQtyToShipTFS332246(PositiveDiff));
      InvoicePurchaseDoc(PurchHeader);

      PostInvoiceWithRcptFromOrder(PurchHeader);
      VerifyZeroVendorAccEntry;
    END;

    LOCAL PROCEDURE PreparePOLineWithLineDisc@1053(VAR PurchHeader@1001 : Record 38;VAR PurchLine@1002 : Record 39;PositiveDiff@1003 : Boolean);
    BEGIN
      PreparePurchOrder(PurchHeader);
      AddPurchOrderLine100PctPrepmt(PurchLine,PurchHeader,PositiveDiff);
      PurchLine.VALIDATE("Line Discount %",GetSpecialLineDiscPct);
      PurchLine.MODIFY;
    END;

    [Test]
    PROCEDURE PostPartialInvoicePosExclVAT@1000();
    VAR
      PurchHeader@1000 : Record 38;
    BEGIN
      PostPartialInvoiceWithPrepmt(PurchHeader,TRUE);
    END;

    [Test]
    PROCEDURE PostPartialInvoiceNegExclVAT@1009();
    VAR
      PurchHeader@1000 : Record 38;
    BEGIN
      PostPartialInvoiceWithPrepmt(PurchHeader,FALSE);
    END;

    [Test]
    PROCEDURE PostPartialInvoicePosInclVAT@1034();
    VAR
      PurchHeader@1000 : Record 38;
    BEGIN
      PurchHeader."Prices Including VAT" := TRUE;
      PostPartialInvoiceWithPrepmt(PurchHeader,TRUE);
    END;

    [Test]
    PROCEDURE PostPartialInvoiceNegInclVAT@1033();
    VAR
      PurchHeader@1000 : Record 38;
    BEGIN
      PurchHeader."Prices Including VAT" := TRUE;
      PostPartialInvoiceWithPrepmt(PurchHeader,FALSE);
    END;

    LOCAL PROCEDURE PostPartialInvoiceWithPrepmt@1008(VAR PurchHeader@1001 : Record 38;PositiveDiff@1000 : Boolean);
    VAR
      PurchLine@1002 : Record 39;
    BEGIN
      Initialize;
      PreparePurchOrderWithPostedPrepmtInv(PurchHeader,PurchLine,2,PositiveDiff);

      LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,FALSE);
      PurchHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchHeader,FALSE,TRUE);

      PurchLine.FINDFIRST;
      PurchLine.TESTFIELD("Quantity Invoiced",GetQtyToShipTFS332246(PositiveDiff));

      VerifyZeroVendorAccEntry;
    END;

    [Test]
    PROCEDURE PartInvFinalInvPosInclVAT@1022();
    BEGIN
      PartInvFinalInvFromOrder(TRUE,TRUE);
    END;

    [Test]
    PROCEDURE PartInvFinalInvNegInclVAT@1019();
    BEGIN
      PartInvFinalInvFromOrder(TRUE,FALSE);
    END;

    [Test]
    PROCEDURE PartInvFinalInvPosExclVAT@1005();
    BEGIN
      PartInvFinalInvFromOrder(FALSE,TRUE);
    END;

    [Test]
    PROCEDURE PartInvFinalInvNegExclVAT@1010();
    BEGIN
      PartInvFinalInvFromOrder(FALSE,FALSE);
    END;

    LOCAL PROCEDURE PartInvFinalInvFromOrder@1004(PricesInclVAT@1002 : Boolean;PositiveDiff@1000 : Boolean);
    VAR
      PurchHeader@1001 : Record 38;
    BEGIN
      Initialize;
      PurchHeader."Prices Including VAT" := PricesInclVAT;
      PostPartialInvoiceWithPrepmt(PurchHeader,PositiveDiff);
      InvoicePurchaseDoc(PurchHeader);
      VerifyZeroVendorAccEntry;
    END;

    [Test]
    PROCEDURE PartInvWithLineDiscExclVAT@1038();
    BEGIN
      PartInvWithLineDisc(FALSE);
    END;

    [Test]
    PROCEDURE PartInvWithLineDiscInclVAT@1035();
    BEGIN
      PartInvWithLineDisc(TRUE);
    END;

    LOCAL PROCEDURE PartInvWithLineDisc@1003(PricesInclVAT@1003 : Boolean);
    VAR
      PurchHeader@1001 : Record 38;
      PurchLine@1000 : Record 39;
      PositiveDiff@1002 : Boolean;
    BEGIN
      Initialize;
      PositiveDiff := TRUE;
      PurchHeader."Prices Including VAT" := PricesInclVAT;
      PreparePOLineWithLineDisc(PurchHeader,PurchLine,PositiveDiff);
      PostPurchPrepmtInvoice(PurchHeader);

      UpdateQtysInLine(PurchLine,GetQtyToShipTFS332246(PositiveDiff),GetQtyToShipTFS332246(PositiveDiff));
      InvoicePurchaseDoc(PurchHeader);
      VerifyZeroVendorAccEntry;

      UpdateQtysInLine(PurchLine,GetQtyToShipTFS332246(PositiveDiff),GetQtyToShipTFS332246(PositiveDiff));
      InvoicePurchaseDoc(PurchHeader);
      VerifyZeroVendorAccEntry;

      InvoicePurchaseDoc(PurchHeader);
      VerifyZeroVendorAccEntry;
    END;

    [Test]
    PROCEDURE ErrorDecreasingInvLineQuantityWith100PctPrepmtAfterGetReceipt@3();
    VAR
      PurchaseOrderHeader@1001 : Record 38;
      PurchaseInvoiceHeader@1002 : Record 38;
      PurchaseInvoice@1000 : TestPage 51;
    BEGIN
      // [FEATURE] [Get Receipt Lines] [UI]
      // [SCENARIO 374897] Error when User tries to decrease PurchaseInvoiceLine.Quantity value with 100% Prepayment after Get Receipt Lines
      Initialize;

      // [GIVEN] Purchase Order with 100% Prepayment, Line Discount and "Line Amount" = "X". Post Prepayment. Post Receipt.
      PreparePOPostPrepmtAndReceipt(PurchaseOrderHeader);

      // [GIVEN] Create Purchase Invoice. Get Receipt Lines from posted Receipt.
      CreateInvWithGetRcptLines(PurchaseInvoiceHeader,PurchaseOrderHeader);

      // [WHEN] Try to decrease Purchase Invoice Line Quantity value from Purchase Invoice page.
      OpenPurchaseInvoicePage(PurchaseInvoice,PurchaseInvoiceHeader);
      ASSERTERROR PurchaseInvoice.PurchLines.Quantity.SETVALUE(PurchaseInvoice.PurchLines.Quantity.ASDECIMAL - 0.01);

      // [THEN] Error occurs: "Line Amount Excl. VAT cannot be less than X"
      VerifyLineAmountExpectedError(CannotBeLessThanMsg,PurchaseInvoice.PurchLines."Line Amount".ASDECIMAL);
    END;

    [Test]
    PROCEDURE ErrorDecreasingInvLineUnitCostWith100PctPrepmtAfterGetReceipt@6();
    VAR
      PurchaseOrderHeader@1001 : Record 38;
      PurchaseInvoiceHeader@1002 : Record 38;
      PurchaseInvoice@1000 : TestPage 51;
    BEGIN
      // [FEATURE] [Get Receipt Lines] [UI]
      // [SCENARIO 374897] Error when User tries to decrease PurchaseInvoiceLine."Direct Unit Cost" value with 100% Prepayment after Get Receipt Lines
      Initialize;

      // [GIVEN] Purchase Order with 100% Prepayment, Line Discount and "Line Amount" = "X". Post Prepayment. Post Receipt.
      PreparePOPostPrepmtAndReceipt(PurchaseOrderHeader);

      // [GIVEN] Create Purchase Invoice. Get Receipt Lines from posted Receipt.
      CreateInvWithGetRcptLines(PurchaseInvoiceHeader,PurchaseOrderHeader);

      // [WHEN] Try to decrease Purchase Invoice Line "Direct Unit Cost" value
      OpenPurchaseInvoicePage(PurchaseInvoice,PurchaseInvoiceHeader);
      ASSERTERROR PurchaseInvoice.PurchLines."Direct Unit Cost".SETVALUE(
          PurchaseInvoice.PurchLines."Direct Unit Cost".ASDECIMAL - 0.01);

      // [THEN] Error occurs: "Line Amount Excl. VAT cannot be less than X"
      VerifyLineAmountExpectedError(CannotBeLessThanMsg,PurchaseInvoice.PurchLines."Line Amount".ASDECIMAL);
    END;

    [Test]
    PROCEDURE ErrorIncreasingInvLineUnitCostWith100PctPrepmtAfterGetReceipt@16();
    VAR
      PurchaseOrderHeader@1001 : Record 38;
      PurchaseInvoiceHeader@1002 : Record 38;
      PurchaseInvoice@1000 : TestPage 51;
    BEGIN
      // [FEATURE] [Get Receipt Lines] [UI]
      // [SCENARIO 374897] Error when User tries to increase PurchaseInvoiceLine."Direct Unit Cost" value with 100% Prepayment after Get Receipt Lines
      Initialize;

      // [GIVEN] Purchase Order with 100% Prepayment, Line Discount and "Line Amount" = "X". Post Prepayment. Post Receipt.
      PreparePOPostPrepmtAndReceipt(PurchaseOrderHeader);

      // [GIVEN] Create Purchase Invoice. Get Receipt Lines from posted Receipt.
      CreateInvWithGetRcptLines(PurchaseInvoiceHeader,PurchaseOrderHeader);

      // [WHEN] Try to increase Purchase Invoice Line "Direct Unit Cost" value
      OpenPurchaseInvoicePage(PurchaseInvoice,PurchaseInvoiceHeader);
      ASSERTERROR PurchaseInvoice.PurchLines."Direct Unit Cost".SETVALUE(
          PurchaseInvoice.PurchLines."Direct Unit Cost".ASDECIMAL + 0.01);

      // [THEN] Error occurs: "Line Amount Excl. VAT cannot be more than X"
      VerifyLineAmountExpectedError(CannotBeMoreThanMsg,PurchaseInvoice.PurchLines."Line Amount".ASDECIMAL);
    END;

    [Test]
    PROCEDURE ErrorDecreasingInvLineDiscountWith100PctPrepmtAfterGetReceipt@8();
    VAR
      PurchaseOrderHeader@1001 : Record 38;
      PurchaseInvoiceHeader@1002 : Record 38;
      PurchaseInvoice@1000 : TestPage 51;
    BEGIN
      // [FEATURE] [Get Receipt Lines] [UI]
      // [SCENARIO 374897] Error when User tries to decrease PurchaseInvoiceLine."Line Discount %" value with 100% Prepayment after Get Receipt Lines
      Initialize;

      // [GIVEN] Purchase Order with 100% Prepayment, Line Discount and "Line Amount" = "X". Post Prepayment. Post Receipt.
      PreparePOPostPrepmtAndReceipt(PurchaseOrderHeader);

      // [GIVEN] Create Purchase Invoice. Get Receipt Lines from posted Receipt.
      CreateInvWithGetRcptLines(PurchaseInvoiceHeader,PurchaseOrderHeader);

      // [WHEN] Try to decrease Purchase Invoice Line "Line Discount %" value
      OpenPurchaseInvoicePage(PurchaseInvoice,PurchaseInvoiceHeader);
      ASSERTERROR PurchaseInvoice.PurchLines."Line Discount %".SETVALUE(PurchaseInvoice.PurchLines."Line Discount %".ASDECIMAL - 0.01);

      // [THEN] Error occurs: "Line Amount Excl. VAT cannot be more than X"
      VerifyLineAmountExpectedError(CannotBeMoreThanMsg,PurchaseInvoice.PurchLines."Line Amount".ASDECIMAL);
    END;

    [Test]
    PROCEDURE ErrorIncreasingInvLineDiscountWith100PctPrepmtAfterGetReceipt@18();
    VAR
      PurchaseOrderHeader@1001 : Record 38;
      PurchaseInvoiceHeader@1002 : Record 38;
      PurchaseInvoice@1000 : TestPage 51;
    BEGIN
      // [FEATURE] [Get Receipt Lines] [UI]
      // [SCENARIO 374897] Error when User tries to increase PurchaseInvoiceLine."Line Discount %" value with 100% Prepayment after Get Receipt Lines
      Initialize;

      // [GIVEN] Purchase Order with 100% Prepayment, Line Discount and "Line Amount" = "X". Post Prepayment. Post Receipt.
      PreparePOPostPrepmtAndReceipt(PurchaseOrderHeader);

      // [GIVEN] Create Purchase Invoice. Get Receipt Lines from posted Receipt.
      CreateInvWithGetRcptLines(PurchaseInvoiceHeader,PurchaseOrderHeader);

      // [WHEN] Try to increase Purchase Invoice Line "Line Discount %" value
      OpenPurchaseInvoicePage(PurchaseInvoice,PurchaseInvoiceHeader);
      ASSERTERROR PurchaseInvoice.PurchLines."Line Discount %".SETVALUE(PurchaseInvoice.PurchLines."Line Discount %".ASDECIMAL + 0.01);

      // [THEN] Error occurs: "Line Amount Excl. VAT cannot be less than X"
      VerifyLineAmountExpectedError(CannotBeLessThanMsg,PurchaseInvoice.PurchLines."Line Amount".ASDECIMAL);
    END;

    [Test]
    PROCEDURE TwoDocLinesWithDiffVATGroupsPrepmt100PctCompressLCY@66();
    VAR
      InvoiceNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 376958] Purchase Order with two custom amount lines post with Prepayment = 100%, Compress Prepayment = TRUE and different line's VAT groups

      // [GIVEN] Two VAT Posting Setup "X" and "Y" with VAT % = 21
      // [GIVEN] Sales Order with "Prepayment %" = 100, "Compress Prepayment" = TRUE and two lines:
      // [GIVEN] Line1: "Line Amount" = 0.055, VAT Posting Setup "X"
      // [GIVEN] Line2: "Line Amount" := 95.3, VAT Posting Setup "Y"
      // [GIVEN] Post Prepayment Invoice
      // [WHEN] Post Sales Order
      // [THEN] G/L Entry with "Payables Account" has been posted with Amount = 0
      // [THEN] G/L Entries are posted with zero Amount and "VAT Amount" balance
      // [THEN] VAT Entries are posted with zero Base and Amount balance
      InvoiceNo := TwoDocLinesPrepmt100Pct_Case376958(TRUE,TRUE,'');
      VerifyGLEntryBalance(InvoiceNo,0,0);
      VerifyVATEntryBalance(InvoiceNo,0,0);
    END;

    [Test]
    PROCEDURE TwoDocLinesWithSameVATGroupsPrepmt100PctCompressLCY@88();
    VAR
      InvoiceNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 376958] Purchase Order with two custom amount lines post with Prepayment = 100%, Compress Prepayment = TRUE

      // [GIVEN] Sales Order with "Prepayment %" = 100, "Compress Prepayment" = TRUE and two lines:
      // [GIVEN] "Line Amount" = 0.055
      // [GIVEN] "Line Amount" := 95.3
      // [GIVEN] Post Prepayment Invoice
      // [WHEN] Post Sales Order
      // [THEN] G/L Entry with "Payables Account" has been posted with Amount = 0
      // [THEN] G/L Entries are posted with zero Amount and "VAT Amount" balance
      // [THEN] VAT Entries are posted with zero Base and Amount balance
      InvoiceNo := TwoDocLinesPrepmt100Pct_Case376958(FALSE,TRUE,'');
      VerifyGLEntryBalance(InvoiceNo,0,0);
      VerifyVATEntryBalance(InvoiceNo,0,0);
    END;

    [Test]
    PROCEDURE TwoDocLinesWithDiffVATGroupsPrepmt100PctNotCompressLCY@74();
    VAR
      InvoiceNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 376958] Purchase Order with two custom amount lines post with Prepayment = 100%, Compress Prepayment = FALSE and different line's VAT groups

      // [GIVEN] Two VAT Posting Setup "X" and "Y" with VAT % = 21
      // [GIVEN] Sales Order with "Prepayment %" = 100, "Compress Prepayment" = FALSE and two lines:
      // [GIVEN] Line1: "Line Amount" = 0.055, VAT Posting Setup "X"
      // [GIVEN] Line2: "Line Amount" := 95.3, VAT Posting Setup "Y"
      // [GIVEN] Post Prepayment Invoice
      // [WHEN] Post Sales Order
      // [THEN] G/L Entry with "Payables Account" has been posted with Amount = 0
      // [THEN] G/L Entries are posted with zero Amount and "VAT Amount" balance
      // [THEN] VAT Entries are posted with zero Base and Amount balance
      InvoiceNo := TwoDocLinesPrepmt100Pct_Case376958(TRUE,FALSE,'');
      VerifyGLEntryBalance(InvoiceNo,0,0);
      VerifyVATEntryBalance(InvoiceNo,0,0);
    END;

    [Test]
    PROCEDURE TwoDocLinesWithSameVATGroupsPrepmt100PctNotCompressLCY@72();
    VAR
      InvoiceNo@1000 : Code[20];
    BEGIN
      // [SCENARIO 376958] Purchase Order with two custom amount lines post with Prepayment = 100%, Compress Prepayment = FALSE

      // [GIVEN] Sales Order with "Prepayment %" = 100, "Compress Prepayment" = FALSE and two lines:
      // [GIVEN] "Line Amount" = 0.055
      // [GIVEN] "Line Amount" := 95.3
      // [WHEN] Post Prepayment Invoice
      // [WHEN] Post Sales Order
      // [THEN] G/L Entry with "Payables Account" has been posted with Amount = 0
      // [THEN] G/L Entries are posted with zero Amount and "VAT Amount" balance
      // [THEN] VAT Entries are posted with zero Base and Amount balance
      InvoiceNo := TwoDocLinesPrepmt100Pct_Case376958(FALSE,FALSE,'');
      VerifyGLEntryBalance(InvoiceNo,0,0);
      VerifyVATEntryBalance(InvoiceNo,0,0);
    END;

    [Test]
    PROCEDURE TwoDocLinesWithDiffVATGroupsPrepmt100PctCompressFCY@30();
    BEGIN
      // [FEATURE] [FCY]
      // [SCENARIO 376958] Purchase Order with two custom amount lines post with Prepayment = 100%, Compress Prepayment = TRUE, Foreign Currency and different line's VAT groups

      // [GIVEN] Two VAT Posting Setup "X" and "Y" with VAT % = 21
      // [GIVEN] Sales Order with Currency, "Prepayment %" = 100, "Compress Prepayment" = TRUE and two lines:
      // [GIVEN] Line1: "Line Amount" = 0.055, VAT Posting Setup "X"
      // [GIVEN] Line2: "Line Amount" := 95.3, VAT Posting Setup "Y"
      // [GIVEN] Post Prepayment Invoice
      // [WHEN] Post Sales Order
      // [THEN] G/L Entry with "Payables Account" has been posted with Amount = 0
      TwoDocLinesPrepmt100Pct_Case376958(TRUE,TRUE,CreateCurrencyCodeWithRandomExchRate);
    END;

    [Test]
    PROCEDURE TwoDocLinesWithSameVATGroupsPrepmt100PctCompressFCY@28();
    BEGIN
      // [FEATURE] [FCY]
      // [SCENARIO 376958] Purchase Order with two custom amount lines post with Prepayment = 100%, Compress Prepayment = TRUE, Foreign Currency

      // [GIVEN] Sales Order with Currency,  "Prepayment %" = 100, "Compress Prepayment" = TRUE and two lines:
      // [GIVEN] "Line Amount" = 0.055
      // [GIVEN] "Line Amount" := 95.3
      // [GIVEN] Post Prepayment Invoice
      // [WHEN] Post Sales Order
      // [THEN] G/L Entry with "Payables Account" has been posted with Amount = 0
      TwoDocLinesPrepmt100Pct_Case376958(FALSE,TRUE,CreateCurrencyCodeWithRandomExchRate);
    END;

    [Test]
    PROCEDURE TwoDocLinesWithDiffVATGroupsPrepmt100PctNotCompressFCY@27();
    BEGIN
      // [FEATURE] [FCY]
      // [SCENARIO 376958] Purchase Order with two custom amount lines post with Prepayment = 100%, Compress Prepayment = FALSE, Foreign Currency and different line's VAT groups

      // [GIVEN] Two VAT Posting Setup "X" and "Y" with VAT % = 21
      // [GIVEN] Sales Order with Currency,  "Prepayment %" = 100, "Compress Prepayment" = FALSE and two lines:
      // [GIVEN] Line1: "Line Amount" = 0.055, VAT Posting Setup "X"
      // [GIVEN] Line2: "Line Amount" := 95.3, VAT Posting Setup "Y"
      // [GIVEN] Post Prepayment Invoice
      // [WHEN] Post Sales Order
      // [THEN] G/L Entry with "Payables Account" has been posted with Amount = 0
      TwoDocLinesPrepmt100Pct_Case376958(TRUE,FALSE,CreateCurrencyCodeWithRandomExchRate);
    END;

    [Test]
    PROCEDURE TwoDocLinesWithSameVATGroupsPrepmt100PctNotCompressFCY@25();
    BEGIN
      // [FEATURE] [FCY]
      // [SCENARIO 376958] Purchase Order with two custom amount lines post with Prepayment = 100%, Compress Prepayment = FALSE, Foreign Currency

      // [GIVEN] Sales Order with Currency,  "Prepayment %" = 100, "Compress Prepayment" = FALSE and two lines:
      // [GIVEN] "Line Amount" = 0.055
      // [GIVEN] "Line Amount" := 95.3
      // [GIVEN] Post Prepayment Invoice
      // [WHEN] Post Sales Order
      // [THEN] G/L Entry with "Payables Account" has been posted with Amount = 0
      TwoDocLinesPrepmt100Pct_Case376958(FALSE,FALSE,CreateCurrencyCodeWithRandomExchRate);
    END;

    [Test]
    PROCEDURE PrepmtLCYRoundingCalcEqualFinalInvoiceLCYRounding@7();
    VAR
      GeneralPostingSetup@1004 : Record 252;
      VATPostingSetup@1000 : Record 325;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      PrepmtInvNo@1005 : Code[20];
      InvoiceNo@1006 : Code[20];
    BEGIN
      // [FEATURE] [FCY]
      // [SCENARIO 379324] Prepayment LCY rounding works the same way as final invoice LCY rounding in case of currency
      Initialize;

      // [GIVEN] Purchase Order with 100% Prepayment, Currency (Exch. Rate = 1:1000), VAT% = 0, Line Amount Excl. VAT = 100.01, Total Amount = 100.01 (VAT Amount = 0)
      LibraryERM.CreateVATPostingSetupWithAccounts(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT",10);
      CreatePurchDoc(
        PurchaseHeader,PurchaseHeader."Document Type"::Order,VATPostingSetup."VAT Bus. Posting Group",
        CreateCurrencyCodeWithExchRate(0.001),FALSE,FALSE);
      AddPurchOrderLineWithPrepmtVATProdGroup(
        PurchaseLine,PurchaseHeader,VATPostingSetup."VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group",1,100.01);
      // [GIVEN] Post prepayment invoice
      PostPurchPrepmtInvoice(PurchaseHeader);
      PrepmtInvNo := FindPrepmtInvoice(PurchaseHeader."Buy-from Vendor No.",PurchaseHeader."No.");

      // [WHEN] Post final invoice
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      InvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] There are 2 Prepayment Invoice G/L Entries:
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      VerifyGLEntryCount(PrepmtInvNo,2);
      // [THEN] G/L Account 5410 <Vendor Domestic> Amount = -100010, VAT Amount = 0
      VerifyGLEntryAmount(PrepmtInvNo,GetVendorPostingGroupPayAccNo(PurchaseHeader."Buy-from Vendor No."),-100010,0);
      // [THEN] G/L Account 2430 <Vendor Prepayments VAT 10 %> Amount = 100010, VAT Amount = 0
      VerifyGLEntryAmount(PrepmtInvNo,GeneralPostingSetup."Purch. Prepayments Account",100010,0);

      // [THEN] There are 3 Invoice G/L Entries:
      VerifyGLEntryCount(InvoiceNo,3);
      // [THEN] G/L Account 5410 <Vendor Domestic> Amount = 0, VAT Amount = 0
      VerifyGLEntryAmount(InvoiceNo,GetVendorPostingGroupPayAccNo(PurchaseHeader."Buy-from Vendor No."),0,0);
      // [THEN] G/L Account 2430 <Vendor Prepayments VAT 10 %> Amount = -100010, VAT Amount = 0
      VerifyGLEntryAmount(InvoiceNo,GeneralPostingSetup."Purch. Prepayments Account",-100010,0);
      // [THEN] G/L Account 7120 <Purch., Retail - EU> Amount = 100010, VAT Amount = 0
      VerifyGLEntryAmount(InvoiceNo,PurchaseLine."No.",100010,0);
    END;

    LOCAL PROCEDURE Initialize@100();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateVATPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE TwoDocLinesPrepmt100Pct_Case376958@48(UseDiffVATGroups@1005 : Boolean;CompressPrepmt@1003 : Boolean;CurrencyCode@1002 : Code[10]) InvoiceNo : Code[20];
    VAR
      VATPostingSetup@1000 : ARRAY [2] OF Record 325;
      PurchaseHeader@1001 : Record 38;
    BEGIN
      Initialize;
      CreateTwoVATPostingSetups(VATPostingSetup,21);

      CreatePurchDoc(
        PurchaseHeader,PurchaseHeader."Document Type"::Order,
        VATPostingSetup[1]."VAT Bus. Posting Group",CurrencyCode,FALSE,CompressPrepmt);
      AddPurchOrderLinesCase376958(PurchaseHeader,VATPostingSetup,UseDiffVATGroups);

      PostPurchPrepmtInvoice(PurchaseHeader);
      InvoiceNo := InvoicePurchaseDoc(PurchaseHeader);

      VerifyGLEntryAmount(InvoiceNo,GetVendorPostingGroupPayAccNo(PurchaseHeader."Buy-from Vendor No."),0,0);
      VerifyGLEntryCount(InvoiceNo,4);
      VerifyVATEntryCount(InvoiceNo,0);
    END;

    LOCAL PROCEDURE PreparePOPostPrepmtAndReceipt@2(VAR PurchaseOrderHeader@1000 : Record 38);
    VAR
      PurchaseOrderLine@1003 : Record 39;
    BEGIN
      PreparePurchOrder(PurchaseOrderHeader);
      AddPurchOrderLine(
        PurchaseOrderLine,
        PurchaseOrderHeader,
        LibraryRandom.RandDecInRange(10,100,2),
        LibraryRandom.RandDecInRange(1000,2000,2),
        100,
        LibraryRandom.RandDecInRange(10,50,2));
      PostPurchPrepmtInvoice(PurchaseOrderHeader);
      LibraryPurchase.PostPurchaseDocument(PurchaseOrderHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateInvWithGetRcptLines@11(VAR PurchaseInvoiceHeader@1000 : Record 38;PurchaseOrderHeader@1001 : Record 38);
    BEGIN
      PurchaseInvoiceHeader."Buy-from Vendor No." := PurchaseOrderHeader."Buy-from Vendor No.";
      CreatePurchInvoice(PurchaseInvoiceHeader,PurchaseOrderHeader."Prices Including VAT");
      GetReceiptLine(PurchaseInvoiceHeader,PurchaseOrderHeader."Last Receiving No.");
    END;

    LOCAL PROCEDURE PreparePurchOrderWithPostedPrepmtInv@1017(VAR PurchHeader@1000 : Record 38;VAR PurchLine@1001 : Record 39;NoOfLines@1004 : Integer;PositiveDiff@1002 : Boolean);
    VAR
      i@1005 : Integer;
    BEGIN
      PreparePurchOrder(PurchHeader);
      FOR i := 1 TO NoOfLines DO
        AddPurchOrderLine100PctPrepmt(PurchLine,PurchHeader,PositiveDiff);

      PostPurchPrepmtInvoice(PurchHeader);

      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETFILTER(Quantity,'<>%1',0);
      IF PurchLine.FINDSET THEN
        REPEAT
          UpdateQtysInLine(PurchLine,GetQtyToShipTFS332246(PositiveDiff),0);
        UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE PreparePurchOrder@1011(VAR PurchHeader@1002 : Record 38);
    VAR
      VATPostingSetup@1000 : Record 325;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      CreatePurchOrder(PurchHeader,VATPostingSetup."VAT Bus. Posting Group",PurchHeader."Prices Including VAT");
    END;

    LOCAL PROCEDURE CreateTwoVATPostingSetups@13(VAR VATPostingSetup@1000 : ARRAY [2] OF Record 325;VATRate@1001 : Decimal);
    VAR
      DummyGLAccount@1003 : Record 15;
      i@1004 : Integer;
    BEGIN
      LibraryERM.CreateVATPostingSetupWithAccounts(
        VATPostingSetup[1],VATPostingSetup[1]."VAT Calculation Type"::"Normal VAT",VATRate);

      DummyGLAccount."VAT Bus. Posting Group" := VATPostingSetup[1]."VAT Bus. Posting Group";
      DummyGLAccount."VAT Prod. Posting Group" := VATPostingSetup[1]."VAT Prod. Posting Group";
      VATPostingSetup[2].GET(VATPostingSetup[1]."VAT Bus. Posting Group",LibraryERM.CreateRelatedVATPostingSetup(DummyGLAccount));
      VATPostingSetup[2].VALIDATE("VAT Identifier",LibraryUtility.GenerateGUID);
      VATPostingSetup[2].MODIFY(TRUE);

      FOR i := 1 TO ARRAYLEN(VATPostingSetup) DO
        UpdateVATPostingSetupAccounts(VATPostingSetup[i]);
    END;

    LOCAL PROCEDURE CreatePurchInvoice@17(VAR PurchaseHeader@1000 : Record 38;PricesInclVAT@1001 : Boolean);
    BEGIN
      CreatePurchDoc(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,'','',PricesInclVAT,TRUE);
    END;

    LOCAL PROCEDURE CreatePurchOrder@20(VAR PurchaseHeader@1000 : Record 38;VATBusPostingGroupCode@1002 : Code[10];PricesInclVAT@1001 : Boolean);
    BEGIN
      CreatePurchDoc(PurchaseHeader,PurchaseHeader."Document Type"::Order,VATBusPostingGroupCode,'',PricesInclVAT,TRUE);
    END;

    LOCAL PROCEDURE CreatePurchDoc@15(VAR PurchaseHeader@1000 : Record 38;DocumentType@1005 : Option;VATBusPostingGroupCode@1002 : Code[10];CurrencyCode@1004 : Code[10];PricesInclVAT@1001 : Boolean;CompressPrepmt@1006 : Boolean);
    VAR
      VendorNo@1003 : Code[20];
    BEGIN
      IF PurchaseHeader."Buy-from Vendor No." = '' THEN
        VendorNo := CreateVendorWithVATBusPostGr(VATBusPostingGroupCode)
      ELSE
        VendorNo := PurchaseHeader."Buy-from Vendor No.";
      WITH PurchaseHeader DO BEGIN
        LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
        VALIDATE("Currency Code",CurrencyCode);
        VALIDATE("Prices Including VAT",PricesInclVAT);
        VALIDATE("Compress Prepayment",CompressPrepmt);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateVendorWithVATBusPostGr@19(VATBusPostingGroupCode@1001 : Code[10]) : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      WITH Vendor DO BEGIN
        VALIDATE("VAT Bus. Posting Group",VATBusPostingGroupCode);
        MODIFY(TRUE);
        UpdateVendorInvoiceRoundingAccount("Vendor Posting Group","VAT Bus. Posting Group");
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateCurrencyCodeWithRandomExchRate@14() : Code[10];
    BEGIN
      EXIT(UpdateCurrencyInvRoundPrecision(LibraryERM.CreateCurrencyWithRandomExchRates));
    END;

    LOCAL PROCEDURE CreateCurrencyCodeWithExchRate@40(ExchRate@1001 : Decimal) : Code[10];
    BEGIN
      EXIT(UpdateCurrencyInvRoundPrecision(LibraryERM.CreateCurrencyWithExchangeRate(WORKDATE,ExchRate,ExchRate)));
    END;

    LOCAL PROCEDURE AddPurchOrderLine@12(VAR PurchaseLine@1001 : Record 39;PurchaseHeader@1005 : Record 38;Qty@1000 : Decimal;UnitPrice@1002 : Decimal;PrepmtPct@1003 : Decimal;DiscountPct@1004 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,Qty);
      UpdateGenPostingSetupPrepmtAccounts(PurchaseLine,PurchaseLine."VAT Prod. Posting Group");
      UpdatePurchLine(PurchaseLine,UnitPrice,DiscountPct,PrepmtPct);
    END;

    LOCAL PROCEDURE AddPurchOrderLineWithPrepmtVATProdGroup@34(VAR PurchaseLine@1001 : Record 39;PurchaseHeader@1005 : Record 38;VATProdPostingGroupCode@1006 : Code[10];PrepmtAccVATProdPostingGroup@1010 : Code[10];Qty@1000 : Decimal;DirectUnitCost@1002 : Decimal);
    VAR
      VATPostingSetup@1007 : Record 325;
      GLAccount@1008 : Record 15;
    BEGIN
      VATPostingSetup.GET(PurchaseHeader."VAT Bus. Posting Group",VATProdPostingGroupCode);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,GLAccount."Gen. Posting Type"::Purchase),Qty);
      UpdateGenPostingSetupPrepmtAccounts(PurchaseLine,PrepmtAccVATProdPostingGroup);
      UpdatePurchLine(PurchaseLine,DirectUnitCost,0,100);
    END;

    LOCAL PROCEDURE AddPurchOrderLine100PctPrepmt@29(VAR PurchLine@1002 : Record 39;PurchaseHeader@1001 : Record 38;PositiveDiff@1000 : Boolean);
    BEGIN
      AddPurchOrderLine(PurchLine,PurchaseHeader,GetLineQuantityTFS332246(PositiveDiff),3.99,100,0);
    END;

    LOCAL PROCEDURE AddPurchOrderLinesCase376958@33(PurchaseHeader@1000 : Record 38;VATPostingSetup@1001 : ARRAY [2] OF Record 325;UseDiffVATGroups@1004 : Boolean);
    VAR
      PurchaseLine@1002 : Record 39;
      VATProdPostingGroupCode2@1003 : Code[10];
    BEGIN
      IF UseDiffVATGroups THEN
        VATProdPostingGroupCode2 := VATPostingSetup[2]."VAT Prod. Posting Group"
      ELSE
        VATProdPostingGroupCode2 := VATPostingSetup[1]."VAT Prod. Posting Group";

      AddPurchOrderLineWithPrepmtVATProdGroup(
        PurchaseLine,PurchaseHeader,VATPostingSetup[1]."VAT Prod. Posting Group",VATPostingSetup[1]."VAT Prod. Posting Group",1,0.055);
      AddPurchOrderLineWithPrepmtVATProdGroup(
        PurchaseLine,PurchaseHeader,VATProdPostingGroupCode2,VATPostingSetup[1]."VAT Prod. Posting Group",1,95.3);
    END;

    LOCAL PROCEDURE FindPrepmtInvoice@44(VendorNo@1000 : Code[20];OrderNo@1002 : Code[20]) : Code[20];
    VAR
      PurchInvHeader@1001 : Record 122;
    BEGIN
      WITH PurchInvHeader DO BEGIN
        SETRANGE("Buy-from Vendor No.",VendorNo);
        SETRANGE("Prepayment Invoice",TRUE);
        SETRANGE("Prepayment Order No.",OrderNo);
        FINDFIRST;
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE GetQtyToShipTFS332246@9(PositiveDiff@1000 : Boolean) : Decimal;
    BEGIN
      IF PositiveDiff THEN
        EXIT(2.6);
      EXIT(2.5);
    END;

    LOCAL PROCEDURE GetLineQuantityTFS332246@1007(PositiveDiff@1000 : Boolean) : Decimal;
    BEGIN
      IF PositiveDiff THEN
        EXIT(7.5);
      EXIT(7.6);
    END;

    LOCAL PROCEDURE GetSpecialLineDiscPct@1023() : Decimal;
    BEGIN
      EXIT(29.72);
    END;

    LOCAL PROCEDURE GetReceiptLine@1025(PurchHeader@1000 : Record 38;ShipmentNo@1001 : Code[20]);
    VAR
      PurchRcptLine@1003 : Record 121;
      PurchGetRcpt@1002 : Codeunit 74;
    BEGIN
      PurchGetRcpt.SetPurchHeader(PurchHeader);
      PurchRcptLine.SETRANGE("Document No.",ShipmentNo);
      PurchGetRcpt.CreateInvLines(PurchRcptLine);
    END;

    LOCAL PROCEDURE GetVendorPostingGroupPayAccNo@37(VendorNo@1000 : Code[20]) : Code[20];
    VAR
      Vendor@1002 : Record 23;
      VendorPostingGroup@1001 : Record 93;
    BEGIN
      Vendor.GET(VendorNo);
      VendorPostingGroup.GET(Vendor."Vendor Posting Group");
      EXIT(VendorPostingGroup."Payables Account");
    END;

    LOCAL PROCEDURE PostPurchPrepmtInvoice@10(VAR PurchHeader@1000 : Record 38);
    VAR
      PurchPostPrepayments@1001 : Codeunit 444;
    BEGIN
      PurchPostPrepayments.Invoice(PurchHeader);
    END;

    LOCAL PROCEDURE InvoicePurchaseDoc@1(VAR PurchaseHeader@1000 : Record 38) : Code[20];
    BEGIN
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE UpdateQtysInLine@1006(VAR PurchLine@1000 : Record 39;QtyToReceive@1001 : Decimal;QtyToInvoice@1002 : Decimal);
    BEGIN
      PurchLine.FIND;
      PurchLine.VALIDATE("Qty. to Receive",QtyToReceive);
      PurchLine.VALIDATE("Qty. to Invoice",QtyToInvoice);
      PurchLine.MODIFY;
    END;

    LOCAL PROCEDURE UpdatePurchLine@35(VAR PurchaseLine@1000 : Record 39;NewDirectUnitCost@1001 : Decimal;NewDiscountPct@1002 : Decimal;NewPrepmtPct@1003 : Decimal);
    BEGIN
      WITH PurchaseLine DO BEGIN
        VALIDATE("Direct Unit Cost",NewDirectUnitCost);
        VALIDATE("Line Discount %",NewDiscountPct);
        VALIDATE("Prepayment %",NewPrepmtPct);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateVATPostingSetupAccounts@26(VAR VATPostingSetup@1000 : Record 325);
    BEGIN
      WITH VATPostingSetup DO BEGIN
        VALIDATE("Sales VAT Account",LibraryERM.CreateGLAccountWithSalesSetup);
        VALIDATE("Purchase VAT Account",LibraryERM.CreateGLAccountWithPurchSetup);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateGenPostingSetupPrepmtAccounts@24(PurchaseLine@1001 : Record 39;PrepmtAccVATProdPostingGroup@1004 : Code[10]);
    VAR
      VATPostingSetup@1003 : Record 325;
      GeneralPostingSetup@1000 : Record 252;
      GLAccount@1002 : Record 15;
    BEGIN
      VATPostingSetup.GET(PurchaseLine."VAT Bus. Posting Group",PurchaseLine."VAT Prod. Posting Group");
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      IF GeneralPostingSetup."Purch. Prepayments Account" = '' THEN BEGIN
        GeneralPostingSetup.VALIDATE("Purch. Prepayments Account",
          LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,GLAccount."Gen. Posting Type"::Purchase));
        GeneralPostingSetup.MODIFY(TRUE);
      END ELSE BEGIN
        GLAccount.GET(GeneralPostingSetup."Purch. Prepayments Account");
        GLAccount.VALIDATE("Gen. Prod. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
        GLAccount.VALIDATE("VAT Prod. Posting Group",PrepmtAccVATProdPostingGroup);
        GLAccount.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateVendorInvoiceRoundingAccount@23(CustomerPostingGroupCode@1005 : Code[10];VATBusPostingGroupCode@1006 : Code[10]);
    VAR
      VATPostingSetup@1004 : Record 325;
      VATProductPostingGroup@1003 : Record 324;
      CustomerPostingGroup@1001 : Record 92;
      GLAccount@1000 : Record 15;
    BEGIN
      CustomerPostingGroup.GET(CustomerPostingGroupCode);
      LibraryERM.CreateVATProductPostingGroup(VATProductPostingGroup);
      LibraryERM.CreateVATPostingSetup(VATPostingSetup,VATBusPostingGroupCode,VATProductPostingGroup.Code);

      CustomerPostingGroup.VALIDATE(
        "Invoice Rounding Account",
        LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,GLAccount."Gen. Posting Type"::Sale));
      CustomerPostingGroup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCurrencyInvRoundPrecision@41(CurrencyCode@1000 : Code[10]) : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      WITH Currency DO BEGIN
        GET(CurrencyCode);
        VALIDATE("Invoice Rounding Precision",0.01);
        MODIFY(TRUE);
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE OpenPurchaseInvoicePage@4(VAR PurchaseInvoice@1000 : TestPage 51;PurchaseInvoiceHeader@1001 : Record 38);
    BEGIN
      PurchaseInvoice.OPENEDIT;
      PurchaseInvoice.GOTORECORD(PurchaseInvoiceHeader);
      PurchaseInvoice.PurchLines.LAST;
    END;

    LOCAL PROCEDURE VerifyZeroVendorAccEntry@1014();
    VAR
      VendLedgEntry@1002 : Record 25;
    BEGIN
      WITH VendLedgEntry DO BEGIN
        FINDLAST;
        CALCFIELDS(Amount);
        Assert.AreEqual(0,Amount,'Expected zero Vendor Ledger Entry due to 100% prepayment.');
      END;
    END;

    LOCAL PROCEDURE VerifyLineAmountExpectedError@5(ErrorTemplate@1001 : Text;ExpectedLineAmount@1002 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      Assert.ExpectedErrorCode('Validation');
      Assert.ExpectedError(PurchaseLine.FIELDCAPTION("Line Amount"));
      Assert.ExpectedError(STRSUBSTNO(ErrorTemplate,ExpectedLineAmount));
    END;

    LOCAL PROCEDURE VerifyGLEntryAmount@31(DocumentNo@1003 : Code[20];GLAccountNo@1004 : Code[20];ExpectedAmount@1001 : Decimal;ExpectedVATAmount@1002 : Decimal);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("G/L Account No.",GLAccountNo);
        FINDFIRST;
        Assert.AreEqual(ExpectedAmount,Amount,FIELDCAPTION(Amount));
        Assert.AreEqual(ExpectedVATAmount,"VAT Amount",FIELDCAPTION("VAT Amount"));
      END;
    END;

    LOCAL PROCEDURE VerifyGLEntryCount@32(DocumentNo@1003 : Code[20];ExpectedCount@1001 : Integer);
    VAR
      DummyGLEntry@1000 : Record 17;
    BEGIN
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      Assert.RecordCount(DummyGLEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyGLEntryAccountCount@38(DocumentNo@1003 : Code[20];GLAccountNo@1002 : Code[20];ExpectedCount@1001 : Integer);
    VAR
      DummyGLEntry@1000 : Record 17;
    BEGIN
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      DummyGLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      Assert.RecordCount(DummyGLEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyGLEntryBalance@21(DocumentNo@1003 : Code[20];ExpectedAmountBalance@1001 : Decimal;ExpectedVATAmountBalance@1002 : Decimal);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        CALCSUMS(Amount,"VAT Amount");
        Assert.AreEqual(ExpectedAmountBalance,Amount,FIELDCAPTION(Amount));
        Assert.AreEqual(ExpectedVATAmountBalance,"VAT Amount",FIELDCAPTION("VAT Amount"));
      END;
    END;

    LOCAL PROCEDURE VerifyGLEntryAccountBalance@47(DocumentNo@1003 : Code[20];GLAccountNo@1004 : Code[20];ExpectedAmountBalance@1001 : Decimal;ExpectedVATAmountBalance@1002 : Decimal);
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("G/L Account No.",GLAccountNo);
        CALCSUMS(Amount,"VAT Amount");
        Assert.AreEqual(ExpectedAmountBalance,Amount,FIELDCAPTION(Amount));
        Assert.AreEqual(ExpectedVATAmountBalance,"VAT Amount",FIELDCAPTION("VAT Amount"));
      END;
    END;

    LOCAL PROCEDURE VerifyVATEntryCount@36(DocumentNo@1001 : Code[20];ExpectedCount@1002 : Integer);
    VAR
      DummyVATEntry@1000 : Record 254;
    BEGIN
      DummyVATEntry.SETRANGE("Document No.",DocumentNo);
      Assert.RecordCount(DummyVATEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyVATEntryBalance@22(DocumentNo@1001 : Code[20];ExpectedBaseBalance@1004 : Decimal;ExpectedAmountBalance@1003 : Decimal);
    VAR
      VATEntry@1000 : Record 254;
    BEGIN
      WITH VATEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        CALCSUMS(Base,Amount);
        Assert.AreEqual(ExpectedBaseBalance,Base,FIELDCAPTION(Base));
        Assert.AreEqual(ExpectedAmountBalance,Amount,FIELDCAPTION(Amount));
      END;
    END;

    BEGIN
    {
      // [FEATURE] [Prepayment] [Rounding] [Purchase]
    }
    END.
  }
}

