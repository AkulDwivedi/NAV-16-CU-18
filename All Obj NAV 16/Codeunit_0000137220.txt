OBJECT Codeunit 137220 SCM CreateWarehouseLocation
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1007 : Record 82;
      ItemJournalBatch@1008 : Record 233;
      Assert@1009 : Codeunit 130000;
      LibraryInventory@1010 : Codeunit 132201;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryWarehouse@1003 : Codeunit 132204;
      IsInitialized@1000 : Boolean;
      UnexpectedMessage@1001 : TextConst 'ENU=Unexpected : "%1". Expected: "%2"';
      ErrEnterLocationCode@1014 : TextConst 'ENU=Enter a location code.';
      ErrEnterAdjCode@1004 : TextConst 'ENU=Enter an adjustment bin code.';
      ErrNoActiveKey@1005 : TextConst 'ENU=The Item Ledger Entry table does not have an active key that starts with the following field or fields: Item No.,Location Code,Open,Variant Code,Unit of Measure Code,Lot No.,Serial No..';
      ErrNothingToConvert@1006 : TextConst 'ENU=There is nothing to convert for Location Code ''%1''';
      ErrBinDoesNotExist@9991 : TextConst 'ENU=The Bin does not exist';

    LOCAL PROCEDURE Initialize@25();
    VAR
      SalesReceivablesSetup@1001 : Record 311;
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      ItemJournalSetup(ItemJournalTemplate,ItemJournalBatch);

      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Stockout Warning",FALSE);
      SalesReceivablesSetup.MODIFY(TRUE);

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE RP5756EmptyLocEmptyBin@35();
    BEGIN
      Initialize;

      ConvertLocationWithErrorTest('','',ErrEnterLocationCode);
    END;

    [Test]
    PROCEDURE RP5756EmptyLocNotExistBin@36();
    VAR
      Bin@1001 : Record 7354;
      NotExistingBinCode@1002 : Code[20];
    BEGIN
      Initialize;
      NotExistingBinCode := COPYSTR(LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),
          1,LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code)));

      ConvertLocationWithErrorTest('',NotExistingBinCode,ErrEnterLocationCode);
    END;

    [Test]
    PROCEDURE RP5756EmptyLocExistBin@37();
    VAR
      Bin@1001 : Record 7354;
      Location@1003 : Record 14;
    BEGIN
      Initialize;
      CreateLocationAndBin(Location,Bin);

      ConvertLocationWithErrorTest('',Bin.Code,ErrEnterLocationCode);
    END;

    [Test]
    PROCEDURE RP5756ExistLocEmptyBin@38();
    VAR
      Bin@1001 : Record 7354;
      Location@1003 : Record 14;
    BEGIN
      Initialize;
      CreateLocationAndBin(Location,Bin);

      ConvertLocationWithErrorTest(Location.Code,'',ErrEnterAdjCode);
    END;

    [Test]
    PROCEDURE RP5756ExistLocNotExistBin@39();
    VAR
      Bin@1001 : Record 7354;
      Location@1003 : Record 14;
      ItemLedgEntry@9993 : Record 32;
      NotExistingBinCode@1002 : Code[20];
    BEGIN
      Initialize;
      NotExistingBinCode := COPYSTR(LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),
          1,LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code)));
      CreateLocationAndBin(Location,Bin);

      ItemLedgEntry.FINDFIRST;
      IF ItemLedgEntry.SETCURRENTKEY("Item No.","Location Code",Open,"Variant Code","Unit of Measure Code","Lot No.","Serial No.") THEN
        ConvertLocationWithErrorTest(Location.Code,NotExistingBinCode,ErrBinDoesNotExist)
      ELSE
        ConvertLocationWithErrorTest(Location.Code,NotExistingBinCode,ErrNoActiveKey);
    END;

    [Test]
    PROCEDURE RP5756ExistLocExistBin@40();
    VAR
      Bin@1001 : Record 7354;
      Location@1003 : Record 14;
      ItemLedgEntry@9994 : Record 32;
      CreateWarehouseLocation@9992 : Report 5756;
    BEGIN
      Initialize;
      CreateLocationAndBin(Location,Bin);

      ItemLedgEntry.FINDFIRST;
      IF ItemLedgEntry.SETCURRENTKEY("Item No.","Location Code",Open,"Variant Code","Unit of Measure Code","Lot No.","Serial No.") THEN BEGIN
        CLEAR(CreateWarehouseLocation);
        CreateWarehouseLocation.SetHideValidationDialog(TRUE);
        CreateWarehouseLocation.InitializeRequest(Location.Code,Bin.Code);

        CreateWarehouseLocation.USEREQUESTPAGE(FALSE);
        CreateWarehouseLocation.RUNMODAL;

        COMMIT;  // commit is required
        Location.GET(Location.Code);
        Assert.AreEqual(TRUE,Location."Require Receive",'Incorrect require receive flag');
        Assert.AreEqual(TRUE,Location."Require Shipment",'Incorrect require receive shipment flag');
        Assert.AreEqual(TRUE,Location."Require Put-away",'Incorrect require put-away flag');
        Assert.AreEqual(FALSE,Location."Use Put-away Worksheet",'Incorrect use put-away worksheet flag');
        Assert.AreEqual(TRUE,Location."Require Pick",'Incorrect require pick flag');
        Assert.AreEqual(TRUE,Location."Bin Mandatory",'Incorrect Bin Mandatory flag');
        Assert.AreEqual(TRUE,Location."Directed Put-away and Pick",'Incorrect Directed Put-away and Pick flag');
      END ELSE
        ConvertLocationWithErrorTest(Location.Code,Bin.Code,ErrNoActiveKey);
    END;

    [Test]
    PROCEDURE RP5756NonExistLocEmptyBin@41();
    VAR
      Location@1003 : Record 14;
      NotExistingLocationCode@1004 : Code[10];
    BEGIN
      Initialize;
      NotExistingLocationCode := COPYSTR(LibraryUtility.GenerateRandomCode(Location.FIELDNO(Code),DATABASE::Location),
          1,LibraryUtility.GetFieldLength(DATABASE::Location,Location.FIELDNO(Code)));

      ConvertLocationWithErrorTest(NotExistingLocationCode,'',ErrEnterAdjCode);
    END;

    [Test]
    PROCEDURE RP5756NonExistLocNonExistBin@42();
    VAR
      Bin@1001 : Record 7354;
      Location@1003 : Record 14;
      NotExistingBinCode@1002 : Code[20];
      NotExistingLocationCode@1004 : Code[10];
    BEGIN
      Initialize;
      NotExistingBinCode := COPYSTR(LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),
          1,LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code)));

      NotExistingLocationCode := COPYSTR(LibraryUtility.GenerateRandomCode(Location.FIELDNO(Code),DATABASE::Location),
          1,LibraryUtility.GetFieldLength(DATABASE::Location,Location.FIELDNO(Code)));

      ConvertLocationWithErrorTest(NotExistingLocationCode,NotExistingBinCode,STRSUBSTNO(ErrNothingToConvert,NotExistingLocationCode));
    END;

    [Test]
    PROCEDURE RP5756NonExistLocExistBin@43();
    VAR
      Bin@1001 : Record 7354;
      Location@1003 : Record 14;
      NotExistingLocationCode@1004 : Code[10];
    BEGIN
      Initialize;
      NotExistingLocationCode := COPYSTR(LibraryUtility.GenerateRandomCode(Location.FIELDNO(Code),DATABASE::Location),
          1,LibraryUtility.GetFieldLength(DATABASE::Location,Location.FIELDNO(Code)));

      CreateLocationAndBin(Location,Bin);

      ConvertLocationWithErrorTest(NotExistingLocationCode,Bin.Code,STRSUBSTNO(ErrNothingToConvert,NotExistingLocationCode));
    END;

    LOCAL PROCEDURE ConvertLocationWithErrorTest@3(LocationCode@1001 : Code[10];BinCode@1002 : Code[20];ExpectedErrorMessage@1003 : Text[1024]);
    VAR
      CreateWarehouseLocation@1000 : Report 5756;
    BEGIN
      CLEAR(CreateWarehouseLocation);
      CreateWarehouseLocation.SetHideValidationDialog(TRUE);
      CreateWarehouseLocation.InitializeRequest(LocationCode,BinCode);

      CreateWarehouseLocation.USEREQUESTPAGE(FALSE);
      COMMIT;
      ASSERTERROR CreateWarehouseLocation.RUNMODAL;
      IF STRPOS(GETLASTERRORTEXT,ExpectedErrorMessage) = 0 THEN
        Assert.Fail(STRSUBSTNO(UnexpectedMessage,GETLASTERRORTEXT,ExpectedErrorMessage));
      CLEARLASTERROR;
      CLEAR(CreateWarehouseLocation);
    END;

    LOCAL PROCEDURE CreateLocationAndBin@4(VAR Location@1005 : Record 14;VAR Bin@1004 : Record 7354);
    VAR
      Item@1001 : Record 27;
      WarehouseEmployee@1002 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
      LibraryWarehouse.CreateBin
      (Bin,
        Location.Code,
        COPYSTR
        (
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin)
          ,1,LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),
        '','');

      LibraryInventory.CreateItem(Item);
      AddInventoryNonDirectLocation(Item,Location.Code);
    END;

    [Normal]
    LOCAL PROCEDURE ItemJournalSetup@2(VAR ItemJournalTemplate@1000 : Record 82;VAR ItemJournalBatch@1001 : Record 233);
    BEGIN
      CLEAR(ItemJournalTemplate);
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      CLEAR(ItemJournalBatch);
      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AddInventoryNonDirectLocation@1(Item@1000 : Record 27;LocationCode@1001 : Code[10]);
    VAR
      ItemJournalLine@1004 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",RANDOM(10));
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [Location] [SCM]
    }
    END.
  }
}

