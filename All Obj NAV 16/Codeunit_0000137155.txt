OBJECT Codeunit 137155 SCM Warehouse - Shipping II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1008 : Record 82;
      ItemJournalBatch@1006 : Record 233;
      WarehouseJournalTemplate@1009 : Record 7309;
      WarehouseJournalBatch@1007 : Record 7310;
      LocationWhite@1002 : Record 14;
      LocationBlue@1017 : Record 14;
      LocationOrange@1018 : Record 14;
      LocationYellow@1036 : Record 14;
      LocationGreen@1035 : Record 14;
      LocationRed@1032 : Record 14;
      LocationInTransit@1016 : Record 14;
      LocationSilver@1026 : Record 14;
      LocationBlack@1043 : Record 14;
      Assert@1015 : Codeunit 130000;
      LibraryDimension@1034 : Codeunit 131001;
      LibraryInventory@1005 : Codeunit 132201;
      LibraryItemTracking@1022 : Codeunit 130502;
      LibraryManufacturing@1012 : Codeunit 132202;
      LibraryPurchase@1011 : Codeunit 130512;
      LibraryPlanning@1037 : Codeunit 132203;
      LibrarySales@1010 : Codeunit 130509;
      LibraryService@1050 : Codeunit 131902;
      LibraryUtility@1003 : Codeunit 131000;
      LibraryVariableStorage@1014 : Codeunit 131004;
      LibraryWarehouse@1004 : Codeunit 132204;
      LibraryAssembly@1044 : Codeunit 132207;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryReportDataset@1056 : Codeunit 131007;
      isInitialized@1001 : Boolean;
      ValueMustBeEqualTxt@1019 : TextConst 'ENU=Value must be equal.';
      WhseItemTrackingNotEnabledErr@1013 : TextConst '@@@="%1 = Item No.";ENU=Warehouse item tracking is not enabled for No. %1';
      WarehouseActivityLineMustBeEmptyTxt@1023 : TextConst 'ENU=Warehouse Activity Line must be empty.';
      PostJournalLinesConfirmationTxt@1024 : TextConst 'ENU=Do you want to post the journal lines';
      JournalLinesPostedTxt@1025 : TextConst 'ENU=The journal lines were successfully posted';
      InvtPickCreatedTxt@1027 : TextConst 'ENU=Number of Invt. Pick activities created';
      InvtPutAwayCreatedTxt@1033 : TextConst 'ENU=Number of Invt. Put-away activities created';
      NothingToHandleErr@1028 : TextConst 'ENU=Nothing to handle.';
      NothingToHandleNonPickableBinErr@1020 : TextConst '@@@=%1: Field("Bin Code");ENU=Nothing to handle. The quantity to be picked is in bin %1, which is not set up for picking.';
      NothingToHandleReplenishmentBinErr@1021 : TextConst '@@@=%1: Field("Bin Code");ENU=Nothing to handle. The quantity to be picked is in bin %1, which is set up for receiving or shipping.';
      TransferOrderDeletedTxt@1029 : TextConst '@@@="%1 = Transfer Order No.";ENU=The transfer order %1 has been deleted';
      DeletedAllRelatedWarehouseActivityLinesTxt@1030 : TextConst 'ENU=All related Warehouse Activity Lines are deleted.';
      PutAwayActivityTxt@1031 : TextConst 'ENU=Put-away activity';
      ReservationEntryMustBeEmptyTxt@1038 : TextConst 'ENU=Reservation Entry must be empty.';
      InvtPickActivitiesCreatedTxt@1039 : TextConst 'ENU=Number of Invt. Pick activities created';
      OrderExpectedTxt@1170 : TextConst 'ENU=Order should be created.';
      AssemblyOrderMsg@1041 : TextConst '@@@="%1 = Due Date";ENU=Due Date %1 is before work date %2 in one or more of the assembly lines.';
      PickActivityMsg@1040 : TextConst 'ENU=Pick activity';
      BeforeWorkDateMsg@1042 : TextConst '@@@="%1 = Work Date";ENU=is before work date %1 in one or more of the assembly lines';
      CannotChangePurchasingCodeErr@1053 : TextConst 'ENU=You cannot change the purchasing code for a sales line that has been completely shipped.';
      ItemTrackingMode@1045 : ' ,AssignLotNo,SelectEntries,AssignSerialNo,ApplyFromItemEntry,AssignAutoSerialNo,AssignAutoLotAndSerialNo,AssignManualLotNo,AssignManualTwoLotNo,AssignTwoLotNo,SelectEntriesForMultipleLines,UpdateQty,PartialAssignManualTwoLotNo';
      AvailabilityWarningsQst@1046 : TextConst 'ENU=There are availability warnings on one or more lines.';
      UndoShipmentConfirmMessageQst@1054 : TextConst 'ENU=Do you really want to undo the selected Shipment lines';
      ReservationMode@1055 : ' ,ReserveFromCurrentLine,AutoReserve';
      ReportName@1047 : 'SalesShipment,ItemTrackingAppendix';
      UndoShipmentConfirmQst@1048 : TextConst 'ENU=Do you want to undo the selected shipment line(s)?';
      UndoConsumptionConfirmQst@1049 : TextConst 'ENU=Do you want to undo consumption of the selected shipment line(s)?';
      UndoType@1051 : 'UndoShipment,UndoConsumption';
      BinValidationErr@1052 : TextConst 'ENU=Location code validation in the Production Order must prioritize Default Bin codes';
      NoOfPostedOrdersMsg@1057 : TextConst '@@@=%1: Count(Sales Header);ENU=%1 orders out of a total of %1 have now been posted.';

    [Test]
    PROCEDURE PickFromPickWorksheetForSalesAndTransferOrderWithVariant@2();
    VAR
      Bin@1006 : Record 7354;
      Item@1000 : Record 27;
      ItemVariant@1001 : Record 5401;
      SalesHeader@1003 : Record 36;
      TransferHeader@1004 : Record 5740;
      WarehouseActivityLine@1007 : Record 5767;
      WhseWorksheetName@1010 : Record 7327;
      WhsePickRequest@1008 : Record 7325;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Create Sales Order with Item Variant. Create Transfer Order. Get Source document for both Transfer and Sales Order on Warehouse Shipment. Get Warehouse Document on Pick Worksheet.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithVariant(Item,ItemVariant);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,ItemVariant.Code);
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,'');
      CreateAndReleaseSalesOrder(SalesHeader,'',Item."No.",Quantity,LocationWhite.Code,ItemVariant.Code,FALSE,ReservationMode::" ");
      CreateAndReleaseTransferOrder(TransferHeader,LocationWhite.Code,LocationBlue.Code,Item."No.",'',Quantity,'',WORKDATE,WORKDATE);
      CreateWarehouseShipmentWithGetSourceDocument(LocationWhite.Code,TRUE,TRUE,FALSE,Item."No.",Item."No.");  // Taking TRUE for Sales Orders.
      GetWarehouseDocumentOnWhseWorksheetLine(WhseWorksheetName,LocationWhite.Code,WhsePickRequest."Document Type"::Shipment);

      // Exercise.
      CreatePickFromPickWorksheet(WhseWorksheetName,Item."No.",Item."No.",0);  // Taking 0 for MaxNoOfLines.

      // Verify.
      VerifyWarehousePickLines(
        WarehouseActivityLine."Source Document"::"Outbound Transfer",TransferHeader."No.",Item."No.",Quantity,'',Bin.Code,
        LocationWhite."Shipment Bin Code");
      VerifyWarehousePickLines(
        WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",Quantity,ItemVariant.Code,Bin.Code,
        LocationWhite."Shipment Bin Code");
    END;

    [Test]
    PROCEDURE CreatePickFromPickWorksheetWithMaxNoOfLinesForTransferOrderWithMultipleLines@3();
    VAR
      Bin@1007 : Record 7354;
      Item@1006 : Record 27;
      Item2@1010 : Record 27;
      ItemVariant@1005 : Record 5401;
      TransferHeader@1003 : Record 5740;
      WarehouseActivityLine@1002 : Record 5767;
      WhseWorksheetName@1009 : Record 7327;
      WhsePickRequest@1004 : Record 7325;
      Quantity@1000 : Decimal;
      NoOfPicks@1001 : Integer;
    BEGIN
      // Setup: Create Transfer Order with multiple lines. Get Source document on Warehouse Shipment. Get Warehouse Document on Pick Worksheet.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      CreateItemWithVariant(Item2,ItemVariant);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,'');
      UpdateInventoryUsingWhseJournal(Bin,Item2,Quantity,ItemVariant.Code);
      CreateAndReleaseTransferOrder(
        TransferHeader,LocationWhite.Code,LocationBlue.Code,Item."No.",Item2."No.",Quantity,ItemVariant.Code,WORKDATE,WORKDATE);
      CreateWarehouseShipmentWithGetSourceDocument(LocationWhite.Code,TRUE,FALSE,FALSE,Item."No.",Item2."No.");
      GetWarehouseDocumentOnWhseWorksheetLine(WhseWorksheetName,LocationWhite.Code,WhsePickRequest."Document Type"::Shipment);
      GetNoOfPicksOnLocation(NoOfPicks,LocationWhite.Code);

      // Exercise.
      CreatePickFromPickWorksheet(WhseWorksheetName,Item."No.",Item2."No.",1);  // Taking 1 for MaxNoOfLines. Value required for the test.

      // Verify: No. Of Picks on the Location got increased by 2 as MaxNoOfLines was taken as 1.
      VerifyNoOfPicks(LocationWhite.Code,NoOfPicks + 2);  // Value required for the test.
      VerifyWarehousePickLines(
        WarehouseActivityLine."Source Document"::"Outbound Transfer",TransferHeader."No.",Item."No.",Quantity,'',Bin.Code,
        LocationWhite."Shipment Bin Code");
      VerifyWarehousePickLines(
        WarehouseActivityLine."Source Document"::"Outbound Transfer",TransferHeader."No.",Item2."No.",Quantity,ItemVariant.Code,
        Bin.Code,LocationWhite."Shipment Bin Code");
    END;

    [Test]
    PROCEDURE CreatePickFromPickWorksheetForReleasedProductionOrderWithVariant@17();
    BEGIN
      // Setup.
      Initialize;
      PickFromPickWorksheetForReleasedProductionOrderWithVariant(FALSE);
    END;

    [Test]
    PROCEDURE RegisterPickFromPickWorksheetForReleasedProductionOrderWithVariant@19();
    BEGIN
      // Setup.
      Initialize;
      PickFromPickWorksheetForReleasedProductionOrderWithVariant(TRUE);  // TRUE for Register Warehouse Pick.
    END;

    LOCAL PROCEDURE PickFromPickWorksheetForReleasedProductionOrderWithVariant@9(RegisterWarehousePick@1012 : Boolean);
    VAR
      Bin@1006 : Record 7354;
      ItemVariant@1007 : Record 5401;
      ParentItem@1000 : Record 27;
      ComponentItem@1001 : Record 27;
      ComponentItem2@1002 : Record 27;
      ProductionOrder@1003 : Record 5405;
      RegisteredWhseActivityLine@1010 : Record 5773;
      WarehouseActivityLine@1008 : Record 5767;
      WhseWorksheetName@1005 : Record 7327;
      WhsePickRequest@1011 : Record 7325;
      Quantity@1009 : Decimal;
    BEGIN
      // Create and refresh Production Order. Get Warehouse Document on Pick Worksheet.
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithProductionBOMWithMultipleLines(ParentItem,ComponentItem,ComponentItem2,ItemVariant);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      UpdateInventoryUsingWhseJournal(Bin,ComponentItem,Quantity,'');
      UpdateInventoryUsingWhseJournal(Bin,ComponentItem2,Quantity,ItemVariant.Code);
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ParentItem."No.",Quantity,LocationWhite.Code,WORKDATE);
      GetWarehouseDocumentOnWhseWorksheetLine(WhseWorksheetName,LocationWhite.Code,WhsePickRequest."Document Type"::Production);

      // Exercise.
      CreatePickFromPickWorksheet(WhseWorksheetName,ComponentItem."No.",ComponentItem2."No.",0);  // Taking 0 for MaxNoOfLines.

      // Verify.
      VerifyWarehousePickLines(
        WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",ComponentItem."No.",Quantity,'',Bin.Code,
        LocationWhite."To-Production Bin Code");
      VerifyWarehousePickLines(
        WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",ComponentItem2."No.",Quantity,
        ItemVariant.Code,Bin.Code,LocationWhite."To-Production Bin Code");

      IF RegisterWarehousePick THEN BEGIN
        // Exercise.
        AutoFillQuantityToHandleOnWhsePickLine(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.");
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
          WarehouseActivityLine."Activity Type"::Pick);

        // Verify.
        VerifyRegisteredPickLines(
          RegisteredWhseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",ComponentItem."No.",Quantity,'',
          Bin.Code,LocationWhite."To-Production Bin Code");
        VerifyRegisteredPickLines(
          RegisteredWhseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",ComponentItem2."No.",Quantity,
          ItemVariant.Code,Bin.Code,LocationWhite."To-Production Bin Code");
      END;
    END;

    [Test]
    PROCEDURE CreatePickFromPickWorksheetForWhseInternalPickAfterRegisterMovementWithVariant@27();
    BEGIN
      // Setup.
      Initialize;
      PickFromPickWorksheetForWhseInternalPickAfterRegisterMovementWithVariant(FALSE);
    END;

    [Test]
    PROCEDURE RegisterPickFromPickWorksheetForWhseInternalPickAfterRegisterMovementWithVariant@28();
    BEGIN
      // Setup.
      Initialize;
      PickFromPickWorksheetForWhseInternalPickAfterRegisterMovementWithVariant(TRUE);  // TRUE for Register Warehouse Pick.
    END;

    LOCAL PROCEDURE PickFromPickWorksheetForWhseInternalPickAfterRegisterMovementWithVariant@6(RegisterWarehousePick@1009 : Boolean);
    VAR
      Bin@1000 : Record 7354;
      Bin2@1012 : Record 7354;
      Bin3@1011 : Record 7354;
      Item@1001 : Record 27;
      Item2@1007 : Record 27;
      ItemVariant@1005 : Record 5401;
      ItemVariant2@1006 : Record 5401;
      RegisteredWhseActivityLine@1016 : Record 5773;
      WarehouseActivityLine@1013 : Record 5767;
      WhseWorksheetName@1003 : Record 7327;
      WhseWorksheetLine@1004 : Record 7326;
      WhsePickRequest@1002 : Record 7325;
      Quantity@1010 : Decimal;
    BEGIN
      // Setup: Create two Items with Variant. Update Inventory using Warehouse Journal. Create and Release Warehouse Internal Pick. Create Movement from Movement Worksheet for two Items.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithVariant(Item,ItemVariant);
      CreateItemWithVariant(Item2,ItemVariant2);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,ItemVariant.Code);
      UpdateInventoryUsingWhseJournal(Bin,Item2,Quantity,ItemVariant2.Code);
      CreateAndReleaseWarehouseInternalPickWithMultipleLines(
        LocationWhite.Code,LocationWhite."To-Production Bin Code",Item."No.",Item2."No.",Quantity,ItemVariant.Code,ItemVariant2.Code);
      LibraryWarehouse.CreateBin(Bin2,LocationWhite.Code,LibraryUtility.GenerateGUID,Bin."Zone Code",Bin."Bin Type Code");
      FindAdjustmentBin(Bin3,LocationWhite);
      LibraryWarehouse.CreateMovementWorksheetLine(WhseWorksheetLine,Bin,Bin3,Item."No.",ItemVariant.Code,Quantity);
      LibraryWarehouse.CreateMovementWorksheetLine(WhseWorksheetLine,Bin,Bin2,Item2."No.",ItemVariant2.Code,Quantity);
      WhseWorksheetName.GET(WhseWorksheetLine."Worksheet Template Name",WhseWorksheetLine.Name,WhseWorksheetLine."Location Code");
      CreateMovementFromMovementWorksheetLine(WhseWorksheetName,LocationWhite.Code,Item."No.",Item2."No.");

      // Register the Movement and Get Warehouse Document on Pick Worksheet.
      WarehouseActivityLine.SETFILTER("Item No.",Item."No." + '|' + Item2."No.");
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",'',WarehouseActivityLine."Activity Type"::Movement);
      GetWarehouseDocumentOnWhseWorksheetLine(WhseWorksheetName,LocationWhite.Code,WhsePickRequest."Document Type"::"Internal Pick");

      // Exercise.
      CreatePickFromPickWorksheet(WhseWorksheetName,Item."No.",Item2."No.",0);  // Taking 0 for MaxNoOfLines.

      // Verify: Pick is created for Item for which Movement was done on Pick Zone.
      VerifyWarehousePickLines(
        WarehouseActivityLine."Source Document"::" ",'',Item2."No.",Quantity,ItemVariant2.Code,Bin2.Code,
        LocationWhite."To-Production Bin Code");

      // Verify: Pick is not created for Item for which Movement was done on Adjustment Zone.
      WarehouseActivityLine.SETRANGE("Item No.",Item."No.");
      FilterWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",'',WarehouseActivityLine."Activity Type"::Pick);
      Assert.IsTrue(WarehouseActivityLine.ISEMPTY,WarehouseActivityLineMustBeEmptyTxt);

      IF RegisterWarehousePick THEN BEGIN
        // Exercise.
        WarehouseActivityLine.SETRANGE("Item No.",Item2."No.");
        AutoFillQuantityToHandleOnWhsePickLine(WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",'');
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::" ",'',WarehouseActivityLine."Activity Type"::Pick);

        // Verify.
        VerifyRegisteredPickLines(
          RegisteredWhseActivityLine."Source Document"::"0",'',Item2."No.",Quantity,ItemVariant2.Code,Bin2.Code,
          LocationWhite."To-Production Bin Code");  // 0 required for blank Source Document.
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostWarehouseShipmentAsInvoiceWithDifferentPurchaseUnitOfMeasureAndLotNo@24();
    VAR
      Bin@1007 : Record 7354;
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      WarehouseShipmentLine@1002 : Record 7321;
      ItemLedgerEntry@1009 : Record 32;
      SalesHeader@1005 : Record 36;
      LotNo@1008 : Code[20];
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Item with different Purchase Unit Of Measure and Lot Tracking. Create and register Put-Away from Purchase Order. Create and register Pick from Sales Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithLotItemTrackingCode(Item,TRUE,LibraryUtility.GetGlobalNoSeriesCode);  // Taking TRUE for Lot.
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      UpdatePurchaseUnitOfMeasureOnItem(Item,ItemUnitOfMeasure.Code);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);  // Enqueue for ItemTrackingLinesPageHandler.
      LotNo :=
        CreateAndRegisterPutAwayFromPurchaseOrder(
          Bin,ItemTrackingMode::AssignLotNo,Item."No.",LocationWhite.Code,Quantity,WORKDATE,TRUE,FALSE);
      CreateAndRegisterPickFromSalesOrder(
        SalesHeader,Item."No.",Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",LocationWhite.Code,TRUE,ReservationMode::" ");  // Value required for the test.

      // Exercise.
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",TRUE);

      // Verify: Posted Sales Invoice Line and Item ledger entry.
      VerifySalesInvoiceLine(Item."No.",Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",Item."Base Unit of Measure");  // Value required for the test.
      VerifyItemLedgerEntryForLotNo(
        Item."No.",ItemLedgerEntry."Entry Type"::Sale,-Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",LotNo);  // Value required for the test.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PickFromWarehouseShipmentWithSerialNoAndItemTrackingNotEnabledOnItem@34();
    VAR
      Bin@1003 : Record 7354;
      Item@1001 : Record 27;
      SalesHeader@1002 : Record 36;
      WarehouseActivityLine@1005 : Record 5767;
      Quantity@1004 : Decimal;
    BEGIN
      // Setup: Create and release Purchase Order with Serial No. Create and register Put-Away from Purchase Order. Create Pick from Sales Order.
      Initialize;
      Quantity := LibraryRandom.RandInt(5);
      CreateItemWithLotItemTrackingCode(Item,FALSE,'');  // Freeentry Code with Lot as False.
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignSerialNo);  // Enqueue for ItemTrackingLinesPageHandler.
      CreateAndRegisterPutAwayFromPurchaseOrder(
        Bin,ItemTrackingMode::AssignSerialNo,Item."No.",LocationWhite.Code,Quantity,WORKDATE,TRUE,FALSE);
      CreatePickFromSalesOrder(SalesHeader,'',Item."No.",Quantity,LocationWhite.Code,TRUE,ReservationMode::" ");
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);

      // Exercise.
      ASSERTERROR WarehouseActivityLine.VALIDATE("Serial No.",LibraryUtility.GenerateGUID);

      // Verify.
      Assert.ExpectedError(STRSUBSTNO(WhseItemTrackingNotEnabledErr,Item."No."));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandlerNo,ItemTrackingSummaryPageHandler,ReservationPageHandler)]
    PROCEDURE PostShipmentFromSalesOrderWithSerialNoReservation@37();
    VAR
      Bin@1005 : Record 7354;
      Item@1001 : Record 27;
      WarehouseShipmentLine@1000 : Record 7321;
      ItemLedgerEntry@1007 : Record 32;
      SalesHeader@1002 : Record 36;
      Quantity@1004 : Decimal;
    BEGIN
      // Setup: Create and release Purchase Order with Serial No. Create and register Put-Away from Purchase Order. Create and register Pick from Sales Order with Reservation.
      Initialize;
      Quantity := LibraryRandom.RandInt(5);
      CreateItemWithLotItemTrackingCode(Item,FALSE,'');  // Freeentry Code with Lot as False.
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignSerialNo);  // Enqueue for ItemTrackingLinesPageHandler.
      CreateAndRegisterPutAwayFromPurchaseOrder(
        Bin,ItemTrackingMode::AssignSerialNo,Item."No.",LocationWhite.Code,Quantity,WORKDATE,TRUE,FALSE);
      CreateAndRegisterPickFromSalesOrder(
        SalesHeader,Item."No.",Quantity,LocationWhite.Code,TRUE,ReservationMode::ReserveFromCurrentLine);  // Taking TRUE for Reservation.

      // Exercise.
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",TRUE);

      // Verify.
      VerifyItemLedgerEntryForSerialNo(ItemLedgerEntry."Entry Type"::Sale,Item."No.",'',-1,-Quantity);
    END;

    [Test]
    PROCEDURE RegisterPickByGetSourcePurchaseReturnOrderWithVariant@83();
    BEGIN
      // Setup.
      Initialize;
      ShipmentAfterRegisterPickByGetSourcePurchaseReturnOrderWithVariant(FALSE);
    END;

    [Test]
    PROCEDURE PostShipmentAfterRegisterPickByGetSourcePurchaseReturnOrderWithVariant@77();
    BEGIN
      // Setup.
      Initialize;
      ShipmentAfterRegisterPickByGetSourcePurchaseReturnOrderWithVariant(TRUE);  // Taking TRUE for PostWhseShipment.
    END;

    LOCAL PROCEDURE ShipmentAfterRegisterPickByGetSourcePurchaseReturnOrderWithVariant@59(PostWhseShipment@1009 : Boolean);
    VAR
      Bin@1003 : Record 7354;
      Item@1001 : Record 27;
      ItemVariant@1000 : Record 5401;
      PostedWhseShipmentLine@1008 : Record 7323;
      PurchaseHeader@1004 : Record 38;
      RegisteredWhseActivityLine@1007 : Record 5773;
      WarehouseShipmentLine@1005 : Record 7321;
      Quantity@1002 : Decimal;
    BEGIN
      // Create Item with Variant. Create and release Purchase Return Order. Create Warehouse Shipment by Get Source Document. Create Pick from Warehouse Shipment.
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithVariant(Item,ItemVariant);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,ItemVariant.Code);

      // Exercise.
      CreateAndRegisterPickFromPurchaseReturnOrder(PurchaseHeader,Item."No.",LocationWhite.Code,Quantity,ItemVariant.Code);

      // Verify.
      VerifyRegisteredPickLines(
        RegisteredWhseActivityLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",Item."No.",Quantity,
        ItemVariant.Code,Bin.Code,LocationWhite."Shipment Bin Code");

      IF PostWhseShipment THEN BEGIN
        // Exercise.
        PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",FALSE);

        // Verify.
        VerifyPostedWhseShipmentLine(
          PostedWhseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",Item."No.",Quantity,ItemVariant.Code);
      END;
    END;

    [Test]
    PROCEDURE RegisterPickByGetSourceTransferOrderWithVariant@81();
    BEGIN
      // Setup.
      Initialize;
      ShipmentAfterRegisterPickByGetSourceTransferOrderWithVariant(FALSE);
    END;

    [Test]
    PROCEDURE PostShipmentAfterRegisterPickByGetSourceTransferOrderWithVariant@73();
    BEGIN
      // Setup.
      Initialize;
      ShipmentAfterRegisterPickByGetSourceTransferOrderWithVariant(TRUE);  // Taking TRUE for PostWhseShipment.
    END;

    LOCAL PROCEDURE ShipmentAfterRegisterPickByGetSourceTransferOrderWithVariant@78(PostWhseShipment@1004 : Boolean);
    VAR
      Bin@1003 : Record 7354;
      Item@1001 : Record 27;
      Item2@1009 : Record 27;
      ItemVariant@1000 : Record 5401;
      PostedWhseShipmentLine@1008 : Record 7323;
      RegisteredWhseActivityLine@1007 : Record 5773;
      TransferHeader@1010 : Record 5740;
      WarehouseShipmentLine@1006 : Record 7321;
      Quantity@1002 : Decimal;
    BEGIN
      // Create two Items with and without Variant. Create and release Transfer Order. Create Warehouse Shipment by Get Source Document. Create Pick from Warehouse Shipment.
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      CreateItemWithVariant(Item2,ItemVariant);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,'');
      UpdateInventoryUsingWhseJournal(Bin,Item2,Quantity,ItemVariant.Code);

      // Exercise.
      CreateAndRegisterPickFromTransferOrder(
        TransferHeader,LocationWhite.Code,LocationBlue.Code,Item."No.",Item2."No.",Quantity,ItemVariant.Code);

      // Verify.
      VerifyRegisteredPickLines(
        RegisteredWhseActivityLine."Source Document"::"Outbound Transfer",TransferHeader."No.",Item."No.",Quantity,'',Bin.Code,
        LocationWhite."Shipment Bin Code");
      VerifyRegisteredPickLines(
        RegisteredWhseActivityLine."Source Document"::"Outbound Transfer",TransferHeader."No.",Item2."No.",Quantity,ItemVariant.Code,
        Bin.Code,LocationWhite."Shipment Bin Code");

      IF PostWhseShipment THEN BEGIN
        // Exercise.
        PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.",FALSE);

        // Verify.
        VerifyPostedWhseShipmentLine(
          PostedWhseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.",Item."No.",Quantity,'');
        VerifyPostedWhseShipmentLine(
          PostedWhseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.",Item2."No.",Quantity,ItemVariant.Code);
      END;
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE RegisterPickFromSalesOrderAfterAutoReserveWithBinCodeModifiedOnPutAwayLine@58();
    VAR
      Item@1000 : Record 27;
      Bin@1004 : Record 7354;
      PurchaseHeader@1003 : Record 38;
      RegisteredWhseActivityLine@1005 : Record 5773;
      WarehouseReceiptLine@1008 : Record 7317;
      Bin2@1011 : Record 7354;
      WarehouseActivityLine@1002 : Record 5767;
      SalesHeader@1009 : Record 36;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Warehouse Receipt from Purchase Order. Update Bin Code on Warehouse Receipt line and post it. Update Bin Code on Place line of Put Away and register it.
      // Create and release Sales Order with Auto Reserve. Create Pick from Sales Order with Auto Reserve.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      LibraryInventory.CreateItem(Item);
      FindBin(Bin,LocationOrange.Code);
      CreateWarehouseReceiptFromPurchaseOrder(PurchaseHeader,LocationOrange.Code,Item."No.",Quantity);
      UpdateZoneAndBinCodeOnWarehouseReceiptLine(WarehouseReceiptLine,PurchaseHeader."No.",Bin);
      PostWarehouseReceipt(WarehouseReceiptLine."No.");
      LibraryWarehouse.CreateBin(Bin2,LocationOrange.Code,LibraryUtility.GenerateGUID,'','');
      UpdateZoneAndBinCodeOnWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,PurchaseHeader."No.",Bin2);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
      CreatePickFromSalesOrder(SalesHeader,'',Item."No.",Quantity,LocationOrange.Code,FALSE,ReservationMode::AutoReserve);

      // Exercise.
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);

      // Verify.
      VerifyRegisteredPickLines(
        RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",Item."No.",Quantity,'',Bin2.Code,Bin.Code);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,ItemLedgerEntriesHandler)]
    PROCEDURE PostSalesCreditMemoAgainstSalesInvoiceUsingLotItemTracking@103();
    VAR
      Bin@1002 : Record 7354;
      Item@1000 : Record 27;
      WarehouseActivityLine@1003 : Record 5767;
      SalesHeader@1006 : Record 36;
      WarehouseShipmentHeader@1007 : Record 7320;
      WarehouseShipmentLine@1012 : Record 7321;
      Customer@1010 : Record 18;
      ItemLedgerEntry@1009 : Record 32;
      LotNo@1005 : Code[20];
      Quantity@1001 : Decimal;
      DocumentNo@1013 : Code[20];
    BEGIN
      // Setup: Create Item Tracking Code, Create Tracked Item, Create and Post Warehouse Receipt from Purchase Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithLotItemTrackingCode(Item,TRUE,LibraryUtility.GetGlobalNoSeriesCode);  // Taking TRUE for Lot.
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);  // Enqueue for ItemTrackingLinesPageHandler.
      LotNo :=
        CreateAndRegisterPutAwayFromPurchaseOrder(
          Bin,ItemTrackingMode::AssignLotNo,Item."No.",LocationWhite.Code,Quantity,WORKDATE,TRUE,FALSE);

      // Register Put Away. Create and Release Sales Order. Create Pick from Warehouse Shipment. Register Pick. Post Warehouse Shipment. Create and Release Credit Memo.
      LibrarySales.CreateCustomer(Customer);
      CreatePickFromSalesOrder(SalesHeader,Customer."No.",Item."No.",Quantity,LocationWhite.Code,TRUE,ReservationMode::" ");
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.");
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,TRUE);  // Post as Invoice.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::ApplyFromItemEntry);  // ItemTrackingMode used in ItemTrackingPageHandler.
      LibraryVariableStorage.Enqueue(LotNo);  // Enqueue LotNo for ItemTrackingPageHandler.
      CreateAndReleaseSalesCreditMemo(SalesHeader,Customer."No.",Item."No.",Quantity,LocationWhite.Code);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,FALSE,FALSE);

      // Verify: Verify Item Ledger Entries and Posted Sales Credit Memo Line.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,ItemLedgerEntry."Document Type"::"Purchase Receipt",Item."No.",LocationWhite.Code,
        LotNo,'',Quantity,0,WORKDATE);  // Value required for Test.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Sale,ItemLedgerEntry."Document Type"::"Sales Shipment",Item."No.",LocationWhite.Code,LotNo,'',
        -Quantity,0,WORKDATE);  // Value required for Test.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Sale,ItemLedgerEntry."Document Type"::"Sales Return Receipt",Item."No.",LocationWhite.Code,
        LotNo,'',Quantity,Quantity,WORKDATE);
      VerifyPostedSalesCreditMemoLine(DocumentNo,Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(ProductionJournalHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE PostWarehouseShipmentAfterPostProductionJournalFromReleasedProductionOrder@49();
    VAR
      Bin@1003 : Record 7354;
      ParentItem@1001 : Record 27;
      ComponentItem@1002 : Record 27;
      ProductionBOMLine@1007 : Record 99000772;
      WarehouseActivityLine@1004 : Record 5767;
      ProductionOrder@1005 : Record 5405;
      SalesHeader@1006 : Record 36;
      WarehouseShipmentHeader@1011 : Record 7320;
      WarehouseShipmentLine@1012 : Record 7321;
      Customer@1015 : Record 18;
      RegisteredWhseActivityLine@1008 : Record 5773;
      ItemLedgerEntry@1009 : Record 32;
      Quantity@1000 : Decimal;
      Quantity2@1010 : Decimal;
    BEGIN
      // Setup: Create Item with Production BOM, Create and Post Warehouse Receipt from Purchase Order and register Warehouse Activity.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      Quantity2 := LibraryRandom.RandInt(10);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      CreateItemWithProductionBOM(ParentItem,ComponentItem,ProductionBOMLine);
      CreateAndRegisterPutAwayFromPurchaseOrder(
        Bin,ItemTrackingMode,ComponentItem."No.",LocationWhite.Code,(ProductionBOMLine."Quantity per" * Quantity) + Quantity2,
        WORKDATE,FALSE,FALSE);

      // Create and Refresh Production Order. Create and Register Pick from Production Order.
      LibrarySales.CreateCustomer(Customer);
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ParentItem."No.",Quantity,LocationWhite.Code,WORKDATE);
      CreateAndRegisterPickFromProductionOrder(ProductionOrder,TRUE);  // Register as TRUE.
      OpenProductionJournal(ProductionOrder);  // Open and post Production Journal. Posting is done in ProductionJournalHandler function.

      // Create and Release Sales Order, Create Pick from Warehouse Shipment. Register Warehouse Activity.
      CreatePickFromSalesOrder(SalesHeader,Customer."No.",ComponentItem."No.",Quantity2,LocationWhite.Code,FALSE,ReservationMode::" ");
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);

      // Exercise: Post Warehouse Shipment.
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.");
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Registered Warehouse Activity Lines and Item Ledger Entries.
      VerifyRegisteredPickLine(
        RegisteredWhseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
        RegisteredWhseActivityLine."Action Type"::Place,ComponentItem."No.",
        Quantity * ProductionBOMLine."Quantity per",'',LocationWhite."From-Production Bin Code");
      VerifyRegisteredPickLine(
        RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        RegisteredWhseActivityLine."Action Type"::Place,ComponentItem."No.",Quantity2,'',LocationWhite."Shipment Bin Code");
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,ItemLedgerEntry."Document Type"::"Purchase Receipt",ComponentItem."No.",
        LocationWhite.Code,'','',(Quantity * ProductionBOMLine."Quantity per") + Quantity2,0,WORKDATE);
      // Value required for test.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Sale,ItemLedgerEntry."Document Type"::"Sales Shipment",ComponentItem."No.",LocationWhite.Code,
        '','',-Quantity2,0,WORKDATE);  // Value required for test.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Consumption,ItemLedgerEntry."Document Type"::" ",ComponentItem."No.",LocationWhite.Code,'','',
        -(Quantity * ProductionBOMLine."Quantity per"),0,WORKDATE);  // Value required for test.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE WarehousePickAccordingToFEFOWithSerialItemTrackingUsingDifferentExpirationDate@75();
    BEGIN
      // Setup.
      Initialize;
      WarehousePickAccordingToFEFOWithSerialItemTracking(TRUE);  // Use DifferentExpirationDate as True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE WarehousePickAccordingToFEFOWithSerialItemTrackingUsingSameExpirationDate@166();
    BEGIN
      // Setup.
      Initialize;
      WarehousePickAccordingToFEFOWithSerialItemTracking(FALSE);  // Use DifferentExpirationDate as False.
    END;

    LOCAL PROCEDURE WarehousePickAccordingToFEFOWithSerialItemTracking@156(DifferentExpirationDate@1009 : Boolean);
    VAR
      Bin@1003 : Record 7354;
      Item@1008 : Record 27;
      SalesHeader@1007 : Record 36;
      WarehouseActivityLine@1005 : Record 5767;
      Quantity@1004 : Decimal;
      OldPickAccordingToFEFO@1000 : Boolean;
    BEGIN
      // Update Pick According to FEFO on Location. Create and register Put Away from Purchase Order using Serial with Strict Expiration Item Tracking.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO,TRUE);
      CreateItemWithSerialItemTrackingCodeUsingStrictExpiration(Item,TRUE);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      Quantity := LibraryRandom.RandInt(5);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignAutoSerialNo);  // Enqueue for ItemTrackingLinesPageHandler.
      CreateAndRegisterPutAwayFromPurchaseOrder(
        Bin,ItemTrackingMode::AssignAutoSerialNo,Item."No.",LocationWhite.Code,Quantity + Quantity,WORKDATE,TRUE,
        DifferentExpirationDate);  // Value required for test and Tracking as True.

      // Exercise.
      CreatePickFromSalesOrder(SalesHeader,'',Item."No.",Quantity,LocationWhite.Code,TRUE,ReservationMode::" ");  // Use Tracking as True.

      // Verify.
      IF DifferentExpirationDate THEN BEGIN
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,Quantity);
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,Quantity);
      END ELSE BEGIN
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,0);  // Use 0 for same expiration date verification.
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,0);  // Use 0 for same expiration date verification.
      END;

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO,OldPickAccordingToFEFO);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE WarehousePickAccordingToFEFOWithLotAndSerialItemTrackingUsingDifferentExpirationDate@184();
    BEGIN
      // Setup.
      Initialize;
      WarehousePickAccordingToFEFOWithLotAndSerialItemTracking(TRUE);  // Use DifferentExpirationDate as True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE WarehousePickAccordingToFEFOWithLotAndSerialItemTrackingUsingSameExpirationDate@183();
    BEGIN
      // Setup.
      Initialize;
      WarehousePickAccordingToFEFOWithLotAndSerialItemTracking(FALSE);  // Use DifferentExpirationDate as False.
    END;

    LOCAL PROCEDURE WarehousePickAccordingToFEFOWithLotAndSerialItemTracking@182(DifferentExpirationDate@1009 : Boolean);
    VAR
      Bin@1006 : Record 7354;
      Item@1008 : Record 27;
      SalesHeader@1007 : Record 36;
      WarehouseActivityLine@1005 : Record 5767;
      Quantity@1004 : Decimal;
      OldPickAccordingToFEFO@1000 : Boolean;
      ExpirationDate@1003 : Date;
    BEGIN
      // Update Pick According to FEFO on Location. Create and register Put Away from Purchase Order using Lot and Serial with Strict Expiration Item Tracking.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO,TRUE);
      CreateItemWithLotAndSerialItemTrackingCodeUsingStrictExpiration(Item);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      Quantity := LibraryRandom.RandInt(5);
      ExpirationDate := WORKDATE;
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignAutoLotAndSerialNo);  // Enqueue for ItemTrackingLinesPageHandler.
      CreateAndRegisterPutAwayFromPurchaseOrder(
        Bin,ItemTrackingMode::AssignAutoLotAndSerialNo,Item."No.",LocationWhite.Code,Quantity,ExpirationDate,TRUE,TRUE);  // Use DifferentExpirationDate and Tracking as True.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignAutoLotAndSerialNo);  // Enqueue for ItemTrackingLinesPageHandler.
      IF DifferentExpirationDate THEN
        ExpirationDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      CreateAndRegisterPutAwayFromPurchaseOrder(
        Bin,ItemTrackingMode::AssignAutoLotAndSerialNo,Item."No.",LocationWhite.Code,Quantity,ExpirationDate,TRUE,TRUE);  // Use DifferentExpirationDate and Tracking as True.

      // Exercise.
      CreatePickFromSalesOrder(SalesHeader,'',Item."No.",Quantity,LocationWhite.Code,TRUE,ReservationMode::" ");  // Tracking as True.

      // Verify.
      IF DifferentExpirationDate THEN BEGIN
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,Quantity);
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,Quantity);
      END ELSE BEGIN
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,0);  // Use 0 for same expiration date verification.
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,0);  // Use 0 for same expiration date verification.
      END;

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO,OldPickAccordingToFEFO);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE WarehousePickAccordingToFEFODoesNotConsiderStockWithLaterExpirationDate@33();
    VAR
      Location@1000 : Record 14;
      Item@1001 : Record 27;
      Bin@1005 : Record 7354;
      SalesHeader@1003 : Record 36;
      WarehouseShipmentLine@1004 : Record 7321;
      Quantity@1002 : Decimal;
    BEGIN
      // [FEATURE] [Warehouse Pick] [FEFO]
      // [SCENARIO 380556] Picking by FEFO always takes the first expiring lot regardless of a zone where it is stored. Once a bin with this lot is not available for picking, "Nothing to handle" error with issue description and Bin No. should be
      Initialize;

      // [GIVEN] Full WMS Location with "Pick According to FEFO" enabled.
      CreateWMSLocationWithFEFOEnabled(Location);

      // [GIVEN] Lot-tracked Item.
      CreateItemWithLotItemTrackingCode(Item,TRUE,'');

      // [GIVEN] Two same sized (quantity = "Q") lots "L1" and "L2" of Item is put-away on the Location.
      // [GIVEN] "L1" is expiring earlier than "L2" and is placed into BULK zone.
      // [GIVEN] "L2" is expiring later than "L1" and is placed into PICK zone.
      Quantity := LibraryRandom.RandInt(10);
      FindBinForPickZone(Bin,Location.Code,TRUE); // PICK zone
      UpdateAndTrackInventoryUsingWhseJournal(Bin,Item,Quantity,'',WORKDATE + LibraryRandom.RandIntInRange(11,20));
      FindBinForPickZone(Bin,Location.Code,FALSE); // BULK zone
      UpdateAndTrackInventoryUsingWhseJournal(Bin,Item,Quantity,'',WORKDATE + LibraryRandom.RandInt(10));

      // [GIVEN] Warehouse Shipment created out of Sales Order with Item and quantity = "Q".
      CreateAndReleaseSalesOrder(
        SalesHeader,LibrarySales.CreateCustomerNo,Item."No.",Quantity,Location.Code,'',FALSE,ReservationMode::" ");
      CreateWarehouseShipmentFromSalesHeader(SalesHeader);

      // [WHEN] Create Pick from Sales Shipment.
      ASSERTERROR CreatePickFromWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // [THEN] Pick is not created.
      // [THEN] "Nothing to handle" error with the indication of a non-pickable bin in which a required lot is stored.
      Assert.ExpectedError(STRSUBSTNO(NothingToHandleNonPickableBinErr,Bin.Code));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,MessageHandler)]
    PROCEDURE InventoryPickAccordingToFEFOWithSerialItemTrackingUsingDifferentExpirationDate@79();
    BEGIN
      // Setup.
      Initialize;
      InventoryPickAccordingToFEFOWithSerialItemTracking(TRUE);  // Use DifferentExpirationDate as True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,MessageHandler)]
    PROCEDURE InventoryPickAccordingToFEFOWithSerialItemTrackingUsingSameExpirationDate@162();
    BEGIN
      // Setup.
      Initialize;
      InventoryPickAccordingToFEFOWithSerialItemTracking(FALSE);  // Use DifferentExpirationDate as False.
    END;

    LOCAL PROCEDURE InventoryPickAccordingToFEFOWithSerialItemTracking@153(DifferentExpirationDate@1013 : Boolean);
    VAR
      Bin@1012 : Record 7354;
      Item@1011 : Record 27;
      SalesHeader@1008 : Record 36;
      WarehouseActivityLine@1005 : Record 5767;
      OldPickAccordingToFEFO@1004 : Boolean;
      Quantity@1003 : Decimal;
    BEGIN
      // Update Pick According to FEFO on Location. Create and post Item Journal Line using Serial with Strict Expiration Item Tracking.
      UpdatePickAccordingToFEFOOnLocation(LocationSilver,OldPickAccordingToFEFO,TRUE);
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      CreateItemWithSerialItemTrackingCodeUsingStrictExpiration(Item,TRUE);
      Quantity := LibraryRandom.RandInt(5);
      CreateAndPostItemJournalLineWithItemTracking(
        Bin."Location Code",Bin.Code,Item."Base Unit of Measure",ItemTrackingMode::AssignAutoSerialNo,Item."No.",Quantity + Quantity,
        WORKDATE,DifferentExpirationDate,FALSE);  // Value required for test.

      // Exercise.
      CreateInventoryPickFromSalesOrderUsingItemTracking(SalesHeader,Item."No.",LocationSilver.Code,Quantity);

      // Verify.
      IF DifferentExpirationDate THEN
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::"Invt. Pick",WarehouseActivityLine."Source Document"::"Sales Order",
          SalesHeader."No.",WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,Quantity)
      ELSE
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::"Invt. Pick",WarehouseActivityLine."Source Document"::"Sales Order",
          SalesHeader."No.",WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,0);  // Use 0 for same expiration date verification.

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationSilver,OldPickAccordingToFEFO,OldPickAccordingToFEFO);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,MessageHandler)]
    PROCEDURE InventoryPickAccordingToFEFOWithLotAndSerialItemTrackingUsingDifferentExpirationDate@199();
    BEGIN
      // Setup.
      Initialize;
      InventoryPickAccordingToFEFOWithLotAndSerialItemTracking(TRUE);  // Use DifferentExpirationDate as True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,MessageHandler)]
    PROCEDURE InventoryPickAccordingToFEFOWithLotAndSerialItemTrackingUsingSameExpirationDate@198();
    BEGIN
      // Setup.
      Initialize;
      InventoryPickAccordingToFEFOWithLotAndSerialItemTracking(FALSE);  // Use DifferentExpirationDate as False.
    END;

    LOCAL PROCEDURE InventoryPickAccordingToFEFOWithLotAndSerialItemTracking@197(DifferentExpirationDate@1013 : Boolean);
    VAR
      Bin@1012 : Record 7354;
      Item@1011 : Record 27;
      SalesHeader@1008 : Record 36;
      WarehouseActivityLine@1005 : Record 5767;
      OldPickAccordingToFEFO@1004 : Boolean;
      Quantity@1003 : Decimal;
      ExpirationDate@1002 : Date;
    BEGIN
      // Update Pick According to FEFO on Location. Create and post Item Journal Line using Lot and Serial with Strict Expiration Item Tracking.
      UpdatePickAccordingToFEFOOnLocation(LocationSilver,OldPickAccordingToFEFO,TRUE);
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      CreateItemWithLotAndSerialItemTrackingCodeUsingStrictExpiration(Item);
      Quantity := LibraryRandom.RandInt(5);
      ExpirationDate := WORKDATE;
      CreateAndPostItemJournalLineWithItemTracking(
        Bin."Location Code",Bin.Code,Item."Base Unit of Measure",ItemTrackingMode::AssignAutoLotAndSerialNo,Item."No.",Quantity,
        ExpirationDate,TRUE,FALSE);  // Use DifferentExpirationDate as True.
      IF DifferentExpirationDate THEN
        ExpirationDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      CreateAndPostItemJournalLineWithItemTracking(
        Bin."Location Code",Bin.Code,Item."Base Unit of Measure",ItemTrackingMode::AssignAutoLotAndSerialNo,Item."No.",Quantity,
        ExpirationDate,TRUE,FALSE);  // Use DifferentExpirationDate as True.

      // Exercise.
      CreateInventoryPickFromSalesOrderUsingItemTracking(SalesHeader,Item."No.",LocationSilver.Code,Quantity);

      // Verify.
      IF DifferentExpirationDate THEN
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::"Invt. Pick",WarehouseActivityLine."Source Document"::"Sales Order",
          SalesHeader."No.",WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,Quantity)
      ELSE
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::"Invt. Pick",WarehouseActivityLine."Source Document"::"Sales Order",
          SalesHeader."No.",WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,0);  // Use 0 for same expiration date verification.

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationSilver,OldPickAccordingToFEFO,OldPickAccordingToFEFO);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,MessageHandler)]
    PROCEDURE InventoryPickAccordingToFEFOWithLotItemTrackingUsingDifferentExpirationDate@177();
    BEGIN
      // Setup.
      Initialize;
      InventoryPickAccordingToFEFOWithLotItemTracking(TRUE);  // Use DifferentExpirationDate as True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,MessageHandler)]
    PROCEDURE InventoryPickAccordingToFEFOWithLotItemTrackingUsingSameExpirationDate@175();
    BEGIN
      // Setup.
      Initialize;
      InventoryPickAccordingToFEFOWithLotItemTracking(FALSE);  // Use DifferentExpirationDate as False.
    END;

    LOCAL PROCEDURE InventoryPickAccordingToFEFOWithLotItemTracking@174(DifferentExpirationDate@1013 : Boolean);
    VAR
      Bin@1012 : Record 7354;
      Item@1011 : Record 27;
      SalesHeader@1008 : Record 36;
      WarehouseActivityLine@1005 : Record 5767;
      OldPickAccordingToFEFO@1004 : Boolean;
      Quantity@1003 : Decimal;
      ExpirationDate@1002 : Date;
    BEGIN
      // Update Pick According to FEFO on Location. Create and post Item Journal Line using Lot with Strict Expiration Item Tracking.
      UpdatePickAccordingToFEFOOnLocation(LocationSilver,OldPickAccordingToFEFO,TRUE);
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      CreateItemWithLotItemTrackingCodeUsingStrictExpiration(Item);
      Quantity := LibraryRandom.RandInt(5);
      ExpirationDate := WORKDATE;
      CreateAndPostItemJournalLineWithItemTracking(
        Bin."Location Code",Bin.Code,Item."Base Unit of Measure",ItemTrackingMode::AssignLotNo,Item."No.",Quantity,ExpirationDate,
        TRUE,FALSE);  // Use DifferentExpirationDate as True.
      IF DifferentExpirationDate THEN
        ExpirationDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      CreateAndPostItemJournalLineWithItemTracking(
        Bin."Location Code",Bin.Code,Item."Base Unit of Measure",ItemTrackingMode::AssignLotNo,Item."No.",Quantity,ExpirationDate,
        TRUE,FALSE);  // Use DifferentExpirationDate as True.

      // Exercise.
      CreateInventoryPickFromSalesOrderUsingItemTracking(SalesHeader,Item."No.",LocationSilver.Code,Quantity);

      // Verify: Use 1 and 0 for NextCount required for test.
      IF DifferentExpirationDate THEN
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::"Invt. Pick",WarehouseActivityLine."Source Document"::"Sales Order",
          SalesHeader."No.",WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,1)
      ELSE
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::"Invt. Pick",WarehouseActivityLine."Source Document"::"Sales Order",
          SalesHeader."No.",WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,0);  // Use 0 for same expiration date verification.

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationSilver,OldPickAccordingToFEFO,OldPickAccordingToFEFO);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE MovementAccordingToFEFOWithSerialItemTrackingUsingDifferentExpirationDate@25();
    BEGIN
      // Setup.
      Initialize;
      MovementAccordingToFEFOWithSerialItemTracking(TRUE);  // Use DifferentExpirationDate as True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE MovementAccordingToFEFOWithSerialItemTrackingUsingSameExpirationDate@121();
    BEGIN
      // Setup.
      Initialize;
      MovementAccordingToFEFOWithSerialItemTracking(FALSE);  // Use DifferentExpirationDate as False.
    END;

    LOCAL PROCEDURE MovementAccordingToFEFOWithSerialItemTracking@99(DifferentExpirationDate@1011 : Boolean);
    VAR
      Bin@1010 : Record 7354;
      Item@1008 : Record 27;
      WarehouseActivityLine@1007 : Record 5767;
      Quantity@1004 : Decimal;
      OldPickAccordingToFEFO@1001 : Boolean;
      ExpirationDate@1000 : Date;
    BEGIN
      // Update Pick According to FEFO on Location. Create and register Put Away from Purchase Order using Serial with Strict Expiration Item Tracking.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO,TRUE);
      CreateItemWithSerialItemTrackingCodeUsingStrictExpiration(Item,TRUE);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      Quantity := LibraryRandom.RandInt(5);
      ExpirationDate := WORKDATE;
      IF DifferentExpirationDate THEN
        ExpirationDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignAutoSerialNo);  // Enqueue for ItemTrackingLinesPageHandler.
      CreateAndRegisterPutAwayFromPurchaseOrder(
        Bin,ItemTrackingMode::AssignAutoSerialNo,Item."No.",LocationWhite.Code,Quantity,ExpirationDate,TRUE,FALSE);  // Use Tracking as True.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignAutoSerialNo);  // Enqueue for ItemTrackingLinesPageHandler.
      CreateAndRegisterPutAwayFromPurchaseOrder(
        Bin,ItemTrackingMode::AssignAutoSerialNo,Item."No.",LocationWhite.Code,Quantity,WORKDATE,TRUE,FALSE);  // Use Tracking as True.

      // Exercise.
      CreateMovementWithMovementWorksheetLine(Bin,Item."No.",Quantity);

      // Verify.
      IF DifferentExpirationDate THEN BEGIN
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Movement,WarehouseActivityLine."Source Document"::" ",'',
          WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,Quantity);
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Movement,WarehouseActivityLine."Source Document"::" ",'',
          WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,Quantity);
      END ELSE BEGIN
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Movement,WarehouseActivityLine."Source Document"::" ",'',
          WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,0);  // Use 0 for same expiration date verification.
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Movement,WarehouseActivityLine."Source Document"::" ",'',
          WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,0);  // Use 0 for same expiration date verification.
      END;

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO,OldPickAccordingToFEFO);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE MovementAccordingToFEFOWithLotAndSerialItemTrackingUsingDifferentExpirationDate@107();
    BEGIN
      // Setup.
      Initialize;
      MovementAccordingToFEFOWithLotAndSerialItemTracking(TRUE);  // Use DifferentExpirationDate as True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE MovementAccordingToFEFOWithLotAndSerialItemTrackingUsingSameExpirationDate@104();
    BEGIN
      // Setup.
      Initialize;
      MovementAccordingToFEFOWithLotAndSerialItemTracking(FALSE);  // Use DifferentExpirationDate as False.
    END;

    LOCAL PROCEDURE MovementAccordingToFEFOWithLotAndSerialItemTracking@102(DifferentExpirationDate@1011 : Boolean);
    VAR
      Bin@1010 : Record 7354;
      Item@1008 : Record 27;
      WarehouseActivityLine@1007 : Record 5767;
      Quantity@1004 : Decimal;
      OldPickAccordingToFEFO@1001 : Boolean;
      ExpirationDate@1000 : Date;
    BEGIN
      // Update Pick According to FEFO on Location. Create and register Put Away from Purchase Order using Lot and Serial with Strict Expiration Item Tracking.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO,TRUE);
      CreateItemWithLotAndSerialItemTrackingCodeUsingStrictExpiration(Item);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      Quantity := LibraryRandom.RandInt(5);
      ExpirationDate := WORKDATE;
      IF DifferentExpirationDate THEN
        ExpirationDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignAutoLotAndSerialNo);  // Enqueue for ItemTrackingLinesPageHandler.
      CreateAndRegisterPutAwayFromPurchaseOrder(
        Bin,ItemTrackingMode::AssignAutoLotAndSerialNo,Item."No.",LocationWhite.Code,Quantity,ExpirationDate,TRUE,FALSE);  // Use Tracking as True.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignAutoLotAndSerialNo);  // Enqueue for ItemTrackingLinesPageHandler.
      CreateAndRegisterPutAwayFromPurchaseOrder(
        Bin,ItemTrackingMode::AssignAutoLotAndSerialNo,Item."No.",LocationWhite.Code,Quantity,WORKDATE,TRUE,FALSE);  // Use Tracking as True.

      // Exercise.
      CreateMovementWithMovementWorksheetLine(Bin,Item."No.",Quantity);

      // Verify.
      IF DifferentExpirationDate THEN BEGIN
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Movement,WarehouseActivityLine."Source Document"::" ",'',
          WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,Quantity);
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Movement,WarehouseActivityLine."Source Document"::" ",'',
          WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,Quantity);
      END ELSE BEGIN
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Movement,WarehouseActivityLine."Source Document"::" ",'',
          WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,0);  // Use 0 for same expiration date verification.
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Movement,WarehouseActivityLine."Source Document"::" ",'',
          WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,0);  // Use 0 for same expiration date verification.
      END;

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO,OldPickAccordingToFEFO);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE MovementAccordingToFEFOWithLotItemTrackingUsingDifferentExpirationDate@122();
    BEGIN
      // Setup.
      Initialize;
      MovementAccordingToFEFOWithLotItemTracking(TRUE);  // Use DifferentExpirationDate as True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE MovementAccordingToFEFOWithLotItemTrackingUsingSameExpirationDate@120();
    BEGIN
      // Setup.
      Initialize;
      MovementAccordingToFEFOWithLotItemTracking(FALSE);  // Use DifferentExpirationDate as False.
    END;

    LOCAL PROCEDURE MovementAccordingToFEFOWithLotItemTracking@119(DifferentExpirationDate@1011 : Boolean);
    VAR
      Bin@1010 : Record 7354;
      Item@1008 : Record 27;
      WarehouseActivityLine@1007 : Record 5767;
      Quantity@1004 : Decimal;
      OldPickAccordingToFEFO@1001 : Boolean;
      ExpirationDate@1000 : Date;
    BEGIN
      // Update Pick According to FEFO on Location. Create and register Put Away from Purchase Order using Lot with Strict Expiration Item Tracking.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO,TRUE);
      CreateItemWithLotItemTrackingCodeUsingStrictExpiration(Item);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      Quantity := LibraryRandom.RandInt(5);
      ExpirationDate := WORKDATE;
      IF DifferentExpirationDate THEN
        ExpirationDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);  // Enqueue for ItemTrackingLinesPageHandler.
      CreateAndRegisterPutAwayFromPurchaseOrder(
        Bin,ItemTrackingMode::AssignLotNo,Item."No.",LocationWhite.Code,Quantity,ExpirationDate,TRUE,FALSE);  // Use Tracking as True.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);  // Enqueue for ItemTrackingLinesPageHandler.
      CreateAndRegisterPutAwayFromPurchaseOrder(
        Bin,ItemTrackingMode::AssignLotNo,Item."No.",LocationWhite.Code,Quantity,WORKDATE,TRUE,FALSE);  // Use Tracking as True.

      // Exercise.
      CreateMovementWithMovementWorksheetLine(Bin,Item."No.",Quantity);

      // Verify.
      IF DifferentExpirationDate THEN BEGIN
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Movement,WarehouseActivityLine."Source Document"::" ",'',
          WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,1);  // Use 1 for different expiration date verification.
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Movement,WarehouseActivityLine."Source Document"::" ",'',
          WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,1);  // Use 1 for different expiration date verification.
      END ELSE BEGIN
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Movement,WarehouseActivityLine."Source Document"::" ",'',
          WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,0);  // Use 0 for same expiration date verification.
        VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO(
          WarehouseActivityLine."Activity Type"::Movement,WarehouseActivityLine."Source Document"::" ",'',
          WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,0);  // Use 0 for same expiration date verification.
      END;

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO,OldPickAccordingToFEFO);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler)]
    PROCEDURE MovementAccordingToFEFOIsNotPermittedFromReplenishmentBin@40();
    VAR
      Location@1000 : Record 14;
      Item@1001 : Record 27;
      BinFrom@1005 : Record 7354;
      BinTo@1004 : Record 7354;
      WhseWorksheetLine@1003 : Record 7326;
      Quantity@1002 : Decimal;
    BEGIN
      // [FEATURE] [Warehouse Movement] [FEFO]
      // [SCENARIO 380556] Movement should not be created from a replenishment Bin (with SHIP or RECEIVE type). "Nothing to handle" error message with description of the issue and Bin no. should be thrown.
      Initialize;

      // [GIVEN] Full WMS Location with "Pick According to FEFO" enabled.
      CreateWMSLocationWithFEFOEnabled(Location);

      // [GIVEN] Lot-tracked Item.
      CreateItemWithLotItemTrackingCode(Item,TRUE,'');

      // [GIVEN] Quantity "Q" of Item is put-away in a bin in RECEIVE zone.
      Quantity := LibraryRandom.RandInt(10);
      FindReplenishmentBin(BinFrom,Location.Code);
      UpdateAndTrackInventoryUsingWhseJournal(BinFrom,Item,Quantity,'',WORKDATE + LibraryRandom.RandInt(10));

      // [GIVEN] Movement Worksheet Line from the bin in RECEIVE zone to a bin in PICK zone for Item is created.
      FindBinForPickZone(BinTo,Location.Code,TRUE);
      BinTo.VALIDATE("Bin Ranking",LibraryRandom.RandInt(100));
      BinTo.MODIFY(TRUE);
      CreateMovementWorksheetLine(WhseWorksheetLine,BinTo,Item."No.",Quantity);
      WhseWorksheetLine."Qty. to Handle" := Quantity;
      WhseWorksheetLine."Qty. to Handle (Base)" := Quantity;
      WhseWorksheetLine.MODIFY(TRUE);

      // [WHEN] Create Movement from Movement Worksheet Line.
      ASSERTERROR LibraryWarehouse.WhseSourceCreateDocument(WhseWorksheetLine,0,FALSE,FALSE,FALSE);

      // [THEN] Movement is not created.
      // [THEN] "Nothing to handle" error with the indication of a not suitable bin from which a required lot is stored.
      Assert.ExpectedError(STRSUBSTNO(NothingToHandleReplenishmentBinErr,BinFrom.Code));
    END;

    [Test]
    PROCEDURE RegisterPutAwayAfterSplitPutAwayLine@87();
    BEGIN
      // Setup.
      Initialize;
      RegisterPutAwayAndPickAfterSplitPutAwayLine(FALSE);  // Use Pick as False.
    END;

    [Test]
    PROCEDURE RegisterPickAfterSplitPutAwayLine@95();
    BEGIN
      // Setup.
      Initialize;
      RegisterPutAwayAndPickAfterSplitPutAwayLine(TRUE);  // Use Pick as True.
    END;

    LOCAL PROCEDURE RegisterPutAwayAndPickAfterSplitPutAwayLine@111(Pick@1010 : Boolean);
    VAR
      Bin@1009 : Record 7354;
      Bin2@1008 : Record 7354;
      Item@1007 : Record 27;
      ItemUnitOfMeasure@1006 : Record 5404;
      PurchaseHeader@1005 : Record 38;
      SalesHeader@1004 : Record 36;
      WarehouseActivityLine@1003 : Record 5767;
      Quantity@1001 : Decimal;
      Quantity2@1000 : Decimal;
    BEGIN
      // Create Item with Purchase UOM. Create and post Warehouse Receipt from Purchase Order. Split Put Away Line.
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      UpdatePurchaseUnitOfMeasureOnItem(Item,ItemUnitOfMeasure.Code);
      Quantity := LibraryRandom.RandDec(100,2);
      Quantity2 := LibraryRandom.RandDec(100,2);
      CreateAndReleasePurchaseOrderWithItemTracking(PurchaseHeader,Item."No.",LocationWhite.Code,Quantity + Quantity2,FALSE);  // Value required for test.
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,FALSE,ItemTrackingMode::" ");
      FindBinForPickZone(Bin,LocationWhite.Code,FALSE);  // BULK Zone.
      UpdateZoneAndBinCodeOnWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,PurchaseHeader."No.",Bin);
      UpdateBinCodeAfterSplitPutAwayLine(Bin2,PurchaseHeader."No.",Quantity2);

      // Exercise: Register Put Away.
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Verify.
      VerifyRegisteredPutAwayLine(
        WarehouseActivityLine."Action Type"::Take,PurchaseHeader."No.",Item."No.",LocationWhite."Receipt Bin Code",
        Quantity + Quantity2);  // Value required for test.
      VerifyRegisteredPutAwayLine(WarehouseActivityLine."Action Type"::Place,PurchaseHeader."No.",Item."No.",Bin.Code,Quantity2);
      VerifyRegisteredPutAwayLine(WarehouseActivityLine."Action Type"::Place,PurchaseHeader."No.",Item."No.",Bin2.Code,Quantity);

      IF Pick THEN BEGIN
        // Exercise.
        CreateAndRegisterPickFromSalesOrder(
          SalesHeader,Item."No.",(Quantity + Quantity2) * ItemUnitOfMeasure."Qty. per Unit of Measure",LocationWhite.Code,FALSE,
          ReservationMode::" ");  // Value required for test.

        // Verify.
        VerifyRegisteredPickLine(
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Action Type"::Take,
          Item."No.",Quantity,'',Bin2.Code);
        VerifyRegisteredPickLine(
          WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",WarehouseActivityLine."Action Type"::Place,
          Item."No.",Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",'',Bin2.Code);  // Value required for test.
      END;
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE PickReservedSalesOrderWithoutAlwaysCreatePickLine@96();
    BEGIN
      // Setup.
      Initialize;
      PickReservedSalesOrderAlwaysCreatePickLine(FALSE);  // Use AlwaysCreatePickLine as False.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler)]
    PROCEDURE PickReservedSalesOrderWithAlwaysCreatePickLine@135();
    BEGIN
      // Setup.
      Initialize;
      PickReservedSalesOrderAlwaysCreatePickLine(TRUE);  // Use AlwaysCreatePickLine as True.
    END;

    LOCAL PROCEDURE PickReservedSalesOrderAlwaysCreatePickLine@126(AlwaysCreatePickLine@1010 : Boolean);
    VAR
      Bin@1009 : Record 7354;
      Item@1008 : Record 27;
      RegisteredWhseActivityLine@1006 : Record 5773;
      SalesHeader@1005 : Record 36;
      SalesHeader2@1004 : Record 36;
      OldAlwaysCreatePickLine@1000 : Boolean;
      Quantity@1011 : Decimal;
    BEGIN
      // Update Always Create Pick Line on Location. Create Item with Sales and Purchase Unit Of Measure. Create and register Put Away from Purchase Order. Create and release Sales Order.
      UpdateAlwaysCreatePickLineOnLocation(LocationWhite,OldAlwaysCreatePickLine,AlwaysCreatePickLine);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateItemWithSalesAndPurchaseUnitOfMeasure(Item);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      CreateAndRegisterPutAwayFromPurchaseOrder(Bin,ItemTrackingMode,Item."No.",LocationWhite.Code,Quantity,WORKDATE,FALSE,FALSE);
      CreateAndReleaseSalesOrder(SalesHeader,'',Item."No.",Quantity,LocationWhite.Code,'',FALSE,ReservationMode::AutoReserve);

      IF LocationWhite."Always Create Pick Line" THEN BEGIN
        // Exercise.
        CreateAndRegisterPickFromSalesOrderAfterUpdateZoneAndBinOnPickLine(SalesHeader2,Bin,Item."No.",LocationWhite.Code,Quantity);

        // Verify.
        VerifyRegisteredPickLines(
          RegisteredWhseActivityLine."Source Document"::"Sales Order",SalesHeader2."No.",Item."No.",Quantity,'',Bin.Code,
          LocationWhite."Shipment Bin Code");
      END ELSE BEGIN
        // Exercise.
        ASSERTERROR CreatePickFromSalesOrder(
            SalesHeader2,'',Item."No.",Quantity,LocationWhite.Code,FALSE,ReservationMode::" ");

        // Verify.
        Assert.ExpectedError(NothingToHandleErr);
      END;

      // Tear down.
      UpdateAlwaysCreatePickLineOnLocation(LocationWhite,OldAlwaysCreatePickLine,OldAlwaysCreatePickLine);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,MessageHandler)]
    PROCEDURE PostWarehouseReceiptFromTransferOrderWithMultipleLots@124();
    BEGIN
      // Setup.
      Initialize;
      RegisterPutAwayFromTransferOrderWithMultipleLots(FALSE,FALSE);  // Use PartialPutAway and RemainingPutAway as False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,MessageHandler)]
    PROCEDURE RegisterPartialPutAwayFromTransferOrderWithMultipleLots@150();
    BEGIN
      // Setup.
      Initialize;
      RegisterPutAwayFromTransferOrderWithMultipleLots(TRUE,FALSE);  // Use PartialPutAway as True and RemainingPutAway as False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,MessageHandler,WhseSourceCreateDocumentPageHandler)]
    PROCEDURE RegisterRemainingPutAwayFromTransferOrderWithMultipleLots@151();
    BEGIN
      // Setup.
      Initialize;
      RegisterPutAwayFromTransferOrderWithMultipleLots(TRUE,TRUE);  // Use PartialPutAway and RemainingPutAway as True.
    END;

    LOCAL PROCEDURE RegisterPutAwayFromTransferOrderWithMultipleLots@138(PartialPutAway@1009 : Boolean;RemainingPutAway@1010 : Boolean);
    VAR
      Bin@1008 : Record 7354;
      Bin2@1007 : Record 7354;
      Item@1006 : Record 27;
      TransferHeader@1005 : Record 5740;
      WarehouseEntry@1004 : Record 7312;
      LotNo@1002 : Code[20];
      LotNo2@1001 : Code[20];
      Quantity@1000 : Decimal;
    BEGIN
      // Create Item with Lot Item Tracking Code. Create and post Transfer Order as Ship with Item Tracking.
      CreateItemWithLotItemTrackingCode(Item,TRUE,LibraryUtility.GetGlobalNoSeriesCode);  // Taking TRUE for Lot.
      Quantity := LibraryRandom.RandDec(100,2);
      LotNo :=
        CreateAndPostItemJournalLineWithItemTracking(
          LocationBlue.Code,'',Item."Base Unit of Measure",ItemTrackingMode::AssignLotNo,Item."No.",Quantity,WORKDATE,FALSE,FALSE);  // Different Expiration Date as FALSE.
      LotNo2 :=
        CreateAndPostItemJournalLineWithItemTracking(
          LocationBlue.Code,'',Item."Base Unit of Measure",ItemTrackingMode::AssignLotNo,Item."No.",Quantity,WORKDATE,FALSE,FALSE);  // Different Expiration Date as FALSE.
      CreateAndPostTransferOrderAsShip(
        TransferHeader,LocationBlue.Code,LocationWhite.Code,Item."No.",Quantity + Quantity,TRUE,WORKDATE,WORKDATE,TRUE);  // Value required for test. Use Tracking and Posting as True.

      // Exercise.
      CreateAndPostWarehouseReceiptFromTransferOrder(TransferHeader);

      // Verify.
      Bin.GET(LocationWhite.Code,LocationWhite."Receipt Bin Code");
      VerifyWarehouseEntry(Bin,WarehouseEntry."Entry Type"::"Positive Adjmt.",Item."No.",LotNo,Quantity);
      VerifyWarehouseEntry(Bin,WarehouseEntry."Entry Type"::"Positive Adjmt.",Item."No.",LotNo2,Quantity);

      IF PartialPutAway THEN BEGIN
        // Exercise.
        FindBinForPickZone(Bin2,LocationWhite.Code,TRUE);  // PICK Zone.
        RegisterPutAwayAfterDeletePutAwayLines(Bin2,TransferHeader."No.",LotNo2);

        // Verify.
        VerifyWarehouseEntry(Bin,WarehouseEntry."Entry Type"::Movement,Item."No.",LotNo,-Quantity);
        VerifyWarehouseEntry(Bin2,WarehouseEntry."Entry Type"::Movement,Item."No.",LotNo,Quantity);
      END;

      IF RemainingPutAway THEN BEGIN
        // Exercise.
        CreatePutAwayFromPostedWarehouseReceipt(Item."No.");
        RegisterPutAwayAfterDeletePutAwayLines(Bin2,TransferHeader."No.",LotNo);

        // Verify.
        VerifyWarehouseEntry(Bin,WarehouseEntry."Entry Type"::Movement,Item."No.",LotNo2,-Quantity);
        VerifyWarehouseEntry(Bin2,WarehouseEntry."Entry Type"::Movement,Item."No.",LotNo2,Quantity);
      END;
    END;

    [Test]
    [HandlerFunctions(PostedSalesDocumentLinesPageHandler,MessageHandler)]
    PROCEDURE InventoryPutAwayFromSalesReturnOrder@142();
    VAR
      Customer@1006 : Record 18;
      Item@1001 : Record 27;
      SalesHeader@1002 : Record 36;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item and Customer. Create and post Sales Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndPostSalesOrder(Customer,Item,LocationRed.Code,Quantity);

      // Exercise.
      CreateInventoryPutAwayFromSalesReturnOrderAfterGetPostedDocumentLinesToReverse(SalesHeader,Customer."No.");

      // Verify.
      VerifyInventoryPutAwayLine(Item,SalesHeader."No.",LocationRed.Code,Quantity);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerAsTrue)]
    PROCEDURE PostTransferOrderWithDifferentDimensionCode@152();
    VAR
      DimensionValue@1001 : Record 349;
      DefaultDimension@1003 : Record 352;
      ItemLedgerEntry@1002 : Record 32;
      TransferHeader@1008 : Record 5740;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with Default Dimension. Create and post Purchase Order as Receive. Create and post Transfer Order as Ship.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);
      CreateItemWithDefaultDimension(DefaultDimension,DimensionValue);
      CreateAndPostPurchaseOrderAsReceive(DefaultDimension."No.",LocationBlue.Code,Quantity);
      CreateAndPostTransferOrderAsShip(
        TransferHeader,LocationBlue.Code,LocationRed.Code,DefaultDimension."No.",Quantity,FALSE,WORKDATE,WORKDATE,TRUE);  // Use Tracking as FALSE and Posting as TRUE.

      // Exercise.
      PostTransferOrderAsReceiveAfterUpdateDimensionOnTransferLine(TransferHeader,DimensionValue.Code);

      // Verify: Use 0 for Remaining Quantity.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Transfer,ItemLedgerEntry."Document Type"::"Transfer Shipment",DefaultDimension."No.",
        LocationBlue.Code,'',DefaultDimension."Dimension Value Code",-Quantity,0,WORKDATE);
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Transfer,ItemLedgerEntry."Document Type"::"Transfer Shipment",DefaultDimension."No.",
        LocationInTransit.Code,'',DefaultDimension."Dimension Value Code",Quantity,0,WORKDATE);
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Transfer,ItemLedgerEntry."Document Type"::"Transfer Receipt",DefaultDimension."No.",
        LocationInTransit.Code,'',DimensionValue.Code,-Quantity,0,WORKDATE);
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Transfer,ItemLedgerEntry."Document Type"::"Transfer Receipt",DefaultDimension."No.",
        LocationRed.Code,'',DimensionValue.Code,Quantity,Quantity,WORKDATE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE PostItemJournalOnMultipleLocationWithLot@170();
    VAR
      ItemJournalLine@1010 : Record 83;
      Item@1003 : Record 27;
      ItemLedgerEntry@1011 : Record 32;
      Quantity@1000 : Decimal;
      LotNo@1012 : Code[20];
    BEGIN
      // Setup: Create Item with Lot and Replenishment System.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);
      LotNo := LibraryUtility.GenerateGUID;
      CreateLotItemWithReplenishmentSystem(Item,Item."Replenishment System"::Purchase);

      // Exercise.
      CreateAndPostItemJournalLineWithManualLotNo(
        ItemJournalLine,Item."No.",LocationYellow.Code,Quantity,WORKDATE,LotNo,TRUE,Item."Base Unit of Measure");  // TRUE for posting.
      CreateAndPostItemJournalLineWithManualLotNo(
        ItemJournalLine,Item."No.",LocationGreen.Code,Quantity + LibraryRandom.RandInt(50),
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE),LotNo,TRUE,Item."Base Unit of Measure"); // TRUE for posting.

      // Verify.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,ItemLedgerEntry."Document Type",Item."No.",LocationYellow.Code,LotNo,'',Quantity,
        Quantity,WORKDATE);
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,ItemLedgerEntry."Document Type",Item."No.",LocationGreen.Code,LotNo,'',
        ItemJournalLine.Quantity,ItemJournalLine.Quantity,ItemJournalLine."Posting Date");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSummaryPageHandler,ItemTrackingLinesPageHandler)]
    PROCEDURE TransferOrderWithFirmPlannedProductionOrderWithSKU@190();
    BEGIN
      // Setup.
      Initialize;
      TransferOrderWithFirmPlannedProductionOrder(FALSE);  // Posting as FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSummaryPageHandler,ItemTrackingLinesPageHandler)]
    PROCEDURE PostTransferOrderWithFirmPlannedProductionOrderWithSKU@187();
    BEGIN
      // Setup.
      Initialize;
      TransferOrderWithFirmPlannedProductionOrder(TRUE);  // Posting as TRUE.
    END;

    LOCAL PROCEDURE TransferOrderWithFirmPlannedProductionOrder@167(BeforePosting@1000 : Boolean);
    VAR
      ItemJournalLine@1010 : Record 83;
      TransferHeader@1007 : Record 5740;
      ReservationEntry@1006 : Record 337;
      Quantity@1003 : Decimal;
      LotNo@1002 : Code[20];
    BEGIN
      // Create and post Item Journal Line with Production BOM. Create and refresh Released and Firm Planned Production Orders.
      Quantity := LibraryRandom.RandInt(50);
      LotNo := LibraryUtility.GenerateGUID;
      CreateAndRefreshMultipleProdOrdersAfterPostItemJnl(ItemJournalLine,Quantity,LotNo,LocationYellow.Code,LocationGreen.Code);

      // Exercise.
      IF BeforePosting THEN
        CreateAndPostTransferOrderAsShip(
          TransferHeader,LocationGreen.Code,LocationYellow.Code,ItemJournalLine."Item No.",Quantity,TRUE,
          ItemJournalLine."Posting Date",
          CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',ItemJournalLine."Posting Date"),FALSE) // Use Tracking as True and Posting as False.
      ELSE
        CreateAndPostTransferOrderAsShip(
          TransferHeader,LocationGreen.Code,LocationYellow.Code,ItemJournalLine."Item No.",Quantity,TRUE,
          ItemJournalLine."Posting Date",
          CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',ItemJournalLine."Posting Date"),TRUE);  // Use Tracking and Posting as True.

      // Verify.
      VerifyReservationEntry(
        ItemJournalLine."Item No.",LocationYellow.Code,ReservationEntry."Reservation Status"::Surplus,Quantity,TransferHeader."No.");
      IF BeforePosting THEN
        VerifyReservationEntry(
          ItemJournalLine."Item No.",LocationGreen.Code,ReservationEntry."Reservation Status"::Surplus,-Quantity,TransferHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSummaryPageHandler,ItemTrackingLinesPageHandler)]
    PROCEDURE ReservationEntryBeforePostItemJournal@201();
    BEGIN
      // Setup.
      Initialize;
      PostItemJournalWithProductionBOMAndTransferOrder(FALSE);  // PostItemJournal as FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSummaryPageHandler,ItemTrackingLinesPageHandler)]
    PROCEDURE ReservationEntryAfterPostItemJournal@200();
    BEGIN
      // Setup.
      Initialize;
      PostItemJournalWithProductionBOMAndTransferOrder(TRUE);  // PostItemJournal as TRUE.
    END;

    LOCAL PROCEDURE PostItemJournalWithProductionBOMAndTransferOrder@196(PostItemJournal@1000 : Boolean);
    VAR
      Item@1001 : Record 27;
      ItemJournalLine@1009 : Record 83;
      TransferHeader@1018 : Record 5740;
      ReservationEntry@1005 : Record 337;
      Quantity@1002 : Decimal;
      LotNo@1014 : Code[20];
    BEGIN
      // Create Item with Lot and Replenishment System. Create and refresh Released and Firm Planned Production Orders. Create and post Transfer Order.
      Quantity := LibraryRandom.RandInt(50);
      LotNo := LibraryUtility.GenerateGUID;
      CreateAndRefreshMultipleProdOrdersAfterPostItemJnl(ItemJournalLine,Quantity,LotNo,LocationYellow.Code,LocationGreen.Code);
      CreateAndPostTransferOrderAsShip(
        TransferHeader,LocationGreen.Code,LocationYellow.Code,ItemJournalLine."Item No.",Quantity,TRUE,ItemJournalLine."Posting Date",
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',ItemJournalLine."Posting Date"),TRUE);  // Use Tracking and Posting as True.

      // Exercise.
      CreateAndPostItemJournalLineWithManualLotNo(
        ItemJournalLine,ItemJournalLine."Item No.",LocationYellow.Code,Quantity,WORKDATE,LotNo,PostItemJournal,
        ItemJournalLine."Unit of Measure Code");

      // Verify.
      IF PostItemJournal THEN
        VerifyEmptyReservationEntry(ItemJournalLine."Item No.",Item.TABLECAPTION)
      ELSE
        VerifyReservationEntry(
          ItemJournalLine."Item No.",LocationYellow.Code,ReservationEntry."Reservation Status"::Prospect,Quantity,'');
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSummaryPageHandler,ItemTrackingLinesPageHandler)]
    PROCEDURE CalculateRegenerativePlanAfterShipTransferOrder@171();
    BEGIN
      // Setup.
      Initialize;
      PostTransferOrderAfterCalculateRegenerativePlan(FALSE);  // Post Transfer Order as FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSummaryPageHandler,ItemTrackingLinesPageHandler)]
    PROCEDURE ReceiveTransferOrderAfterCalculateRegenerativePlan@181();
    BEGIN
      // Setup.
      Initialize;
      PostTransferOrderAfterCalculateRegenerativePlan(TRUE);  // Post Transfer Order as TRUE.
    END;

    LOCAL PROCEDURE PostTransferOrderAfterCalculateRegenerativePlan@204(PostTransferOrder@1000 : Boolean);
    VAR
      ItemJournalLine@1015 : Record 83;
      TransferHeader@1010 : Record 5740;
      ReservationEntry@1007 : Record 337;
      Quantity@1004 : Decimal;
      LotNo@1001 : Code[20];
    BEGIN
      // Create Item with Lot and Replenishment System. Create and post Item Journal Line and Transfer Order with Production BOM. Run Calculate Regenerative Plan report.
      Quantity := LibraryRandom.RandInt(50);
      LotNo := LibraryUtility.GenerateGUID;
      CreateAndRefreshMultipleProdOrdersAfterPostItemJnl(ItemJournalLine,Quantity,LotNo,LocationYellow.Code,LocationGreen.Code);
      CreateAndPostTransferOrderAsShip(
        TransferHeader,LocationGreen.Code,LocationYellow.Code,ItemJournalLine."Item No.",Quantity,TRUE,ItemJournalLine."Posting Date",
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',ItemJournalLine."Posting Date"),TRUE);  // Use Tracking and Posting as True.
      CreateAndPostItemJournalLineWithManualLotNo(
        ItemJournalLine,ItemJournalLine."Item No.",LocationYellow.Code,Quantity,WORKDATE,LotNo,TRUE,
        ItemJournalLine."Unit of Measure Code");  // Use Posting as True.
      RunCalculateRegenerativePlan(
        ItemJournalLine."Item No.",LocationYellow.Code,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',TransferHeader."Receipt Date"));

      IF PostTransferOrder THEN BEGIN
        // Exercise.
        PostTransferOrderAsReceive(TransferHeader,Quantity);

        // Verify.
        VerifyEmptyReservationEntry(ItemJournalLine."Item No.",TransferHeader."No.");
      END ELSE
        // Verify.
        VerifyReservationEntry(
          ItemJournalLine."Item No.",LocationYellow.Code,ReservationEntry."Reservation Status"::Surplus,Quantity,TransferHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE UOMConversionAfterPostItemJournal@234();
    BEGIN
      // Setup.
      Initialize;
      PostInvtPickFromRPOUsingFirmPlannedProdOrder(FALSE);  // IsProductionOrder as False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,CreateInventoryPutAwayPickHandler,MessageHandler)]
    PROCEDURE UOMConversionAfterPostInventoryPickUsingRPO@157();
    BEGIN
      // Setup.
      Initialize;
      PostInvtPickFromRPOUsingFirmPlannedProdOrder(TRUE);  // IsProductionOrder as True.
    END;

    LOCAL PROCEDURE PostInvtPickFromRPOUsingFirmPlannedProdOrder@235(IsProductionOrder@1000 : Boolean);
    VAR
      ItemUnitOfMeasure@1013 : Record 5404;
      Item@1012 : Record 27;
      ProductionOrder@1010 : Record 5405;
      Bin@1007 : Record 7354;
      ItemLedgerEntry@1006 : Record 32;
      Quantity@1003 : Decimal;
      LotNo@1002 : Code[20];
    BEGIN
      // Create Item with Lot Item Tracking Code and create Item Unit of Measure.
      Quantity := LibraryRandom.RandInt(50);
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');  // Bin Type and Zone code are blank.
      CreateItemWithLotItemTrackingCode(Item,TRUE,LibraryUtility.GetGlobalNoSeriesCode);  // Taking TRUE for Lot.
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");

      // Exercise.
      LotNo :=
        CreateAndPostItemJournalLineWithItemTracking(
          LocationSilver.Code,Bin.Code,ItemUnitOfMeasure.Code,ItemTrackingMode::AssignLotNo,Item."No.",Quantity,WORKDATE,FALSE,FALSE);  // Different Expiration Date as False.

      // Verify.
      VerifyItemLedgerEntryForLotNo(
        Item."No.",ItemLedgerEntry."Entry Type"::Purchase,ItemUnitOfMeasure."Qty. per Unit of Measure" * Quantity,LotNo);  // Value required for the test.

      IF IsProductionOrder THEN BEGIN
        // Exercise.
        CreateAndRefreshFirmPlannedProductionOrderUsingLot(
          ProductionOrder,Item."No.",Quantity,LocationBlue.Code,LocationSilver.Code,ItemUnitOfMeasure.Code);
        CreateInvtPickFromRPOUsingFirmPlannedProdOrder(ProductionOrder);
        PostWarehouseActivity(ProductionOrder."No.",Quantity);

        // Verify.
        VerifyItemLedgerEntryForLotNo(
          Item."No.",ItemLedgerEntry."Entry Type"::Consumption,-Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure",LotNo);  // Value required for the test.
      END;
    END;

    [Test]
    PROCEDURE ReleasedProductionOrderWithProductionBin@231();
    VAR
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionOrder@1010 : Record 5405;
      ProductionBOMLine@1004 : Record 99000772;
      RoutingLine@1007 : Record 99000764;
      Item@1005 : Record 27;
      WorkCenter@1000 : Record 99000754;
      ProdOrderRoutingLine@1013 : Record 5409;
      ParentItem@1011 : Record 27;
      MachineCenter@1009 : Record 99000758;
      OperationNo@1012 : Code[10];
      Quantity@1014 : Decimal;
    BEGIN
      // Setup: Create and certify BOM. Create Item with Routing and Production BOM. Update Bin on Work Center and Machine Center.
      Initialize;
      Quantity := LibraryRandom.RandInt(50);
      OperationNo := CreateRoutingSetup(RoutingLine,WorkCenter,MachineCenter);
      LibraryInventory.CreateItem(Item);
      CreateAndCertifyBOM(ProductionBOMHeader,ProductionBOMLine,Item."Base Unit of Measure",Item."No.",Quantity);
      CreateItemWithRoutingAndProductionBOM(ParentItem,ProductionBOMHeader."No.",RoutingLine."Routing No.");
      UpdateBinOnLocation(LocationSilver);
      UpdateWorkCenter(WorkCenter,LocationSilver);
      UpdateMachineCenter(MachineCenter,LocationSilver);

      // Exercise.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ParentItem."No.",Quantity,LocationSilver.Code,WORKDATE);  // Value required for the test.

      // Verify.
      VerifyProdOrderRoutingLine(LocationSilver,OperationNo,ProdOrderRoutingLine.Type::"Machine Center",MachineCenter."No.");
      VerifyProdOrderRoutingLine(LocationSilver,RoutingLine."Operation No.",ProdOrderRoutingLine.Type::"Work Center",WorkCenter."No.");
    END;

    [Test]
    PROCEDURE ReleasedProductionOrderAfterUpdateBinOnComponent@229();
    BEGIN
      // Setup.
      Initialize;
      UpdateBinOnComponentLineAfterRefreshProdOrder(FALSE) // Pick as false.
    END;

    [Test]
    PROCEDURE WhsePickOnProdOrderAfterUpdateBinOnComponentLine@218();
    BEGIN
      // Setup.
      Initialize;
      UpdateBinOnComponentLineAfterRefreshProdOrder(TRUE) // Pick as True.
    END;

    LOCAL PROCEDURE UpdateBinOnComponentLineAfterRefreshProdOrder@232(Pick@1000 : Boolean);
    VAR
      ProductionBOMHeader@1014 : Record 99000771;
      ProductionOrder@1013 : Record 5405;
      ProductionBOMLine@1012 : Record 99000772;
      ProdOrderComponent@1011 : Record 5407;
      WarehouseActivityLine@1010 : Record 5767;
      RoutingLine@1009 : Record 99000764;
      Item@1008 : Record 27;
      WorkCenter@1015 : Record 99000754;
      ParentItem@1007 : Record 27;
      MachineCenter@1006 : Record 99000758;
      Bin@1004 : Record 7354;
      Quantity@1001 : Decimal;
    BEGIN
      // Create Routing and Create And Certify BOM. Create Item with Routing and Production BOM. Update Inventory using Warehouse Journal.
      Initialize;
      Quantity := LibraryRandom.RandInt(50);
      CreateRoutingSetup(RoutingLine,WorkCenter,MachineCenter);
      LibraryInventory.CreateItem(Item);
      CreateAndCertifyBOM(ProductionBOMHeader,ProductionBOMLine,Item."Base Unit of Measure",Item."No.",Quantity);
      CreateItemWithRoutingAndProductionBOM(ParentItem,ProductionBOMHeader."No.",RoutingLine."Routing No.");
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // Pick as TRUE.
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity * Quantity,'');  // Variant Code as blank and calculated value of Quantity required.

      // Exercise.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ParentItem."No.",Quantity,LocationWhite.Code,WORKDATE);

      // Verify.
      VerifyProductionOrderComponent(ProductionOrder."No.",Item."No.",Quantity * Quantity);  // Value required for Expected Quantity.

      IF Pick THEN BEGIN
        // Exercise.
        CreateAndUpdateBinOnProductionOrderComponent(ProdOrderComponent,LocationWhite,ProductionOrder."No.");
        CreateAndRegisterPickFromProductionOrder(ProductionOrder,FALSE);  // Register as false.

        // Verify.
        VerifyWarehousePickLine(
          WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
          WarehouseActivityLine."Action Type"::Take,Item."No.",ProdOrderComponent."Expected Quantity",'',Bin.Code);
        VerifyWarehousePickLine(
          WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
          WarehouseActivityLine."Action Type"::Place,Item."No.",ProdOrderComponent."Expected Quantity",'',
          ProdOrderComponent."Bin Code");
      END;
    END;

    [Test]
    PROCEDURE RequisitionLineWithDefaultQuantityToShipAsBlank@208();
    BEGIN
      // Setup.
      Initialize;
      PurchaseOrderWithDefaultQuantityToShipAsBlank(FALSE);  // Carry Out Action Message as FALSE.
    END;

    [Test]
    PROCEDURE PostPurchaseOrderWithDefaultQuantityToShipAsBlank@246();
    BEGIN
      // Setup.
      Initialize;
      PurchaseOrderWithDefaultQuantityToShipAsBlank(TRUE);  // Carry Out Action Message as TRUE.
    END;

    LOCAL PROCEDURE PurchaseOrderWithDefaultQuantityToShipAsBlank@244(CarryOutActionMsg@1000 : Boolean);
    VAR
      SalesReceivablesSetup@1007 : Record 311;
      Item@1006 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      DefaultQuantityToShip@1008 : Option;
    BEGIN
      // Update Default Quantity to Ship on Sales and Receivables Setup. Create Sales Order with Drop Shipment.
      DefaultQuantityToShip :=
        UpdateDefaultQuantityToShipOnSalesReceivablesSetup(SalesReceivablesSetup."Default Quantity to Ship"::Blank);
      LibraryInventory.CreateItem(Item);
      CreateSalesOrderWithPurchaseCode(SalesHeader,SalesLine,Item."No.",LibraryRandom.RandDec(10,2),TRUE,FALSE);

      // Exercise.
      GetSalesOrderForDropShipmentOnRequisitionWorksheet(SalesLine);

      // Verify.
      VerifyRequisitionLine(Item."No.",SalesLine.Quantity);

      IF CarryOutActionMsg THEN BEGIN
        // Exercise.
        PostPurchOrderAfterCarryOutActionMsgOnReqWorksheet(Item."No.",SalesLine.Quantity / 2);  // Calculated Value Required.

        // Verify.
        VerifySalesLine(SalesLine."Document No.",Item."No.",SalesLine.Quantity,0);  // Value Required for test.
      END;

      // Tear down.
      UpdateDefaultQuantityToShipOnSalesReceivablesSetup(DefaultQuantityToShip);
    END;

    [Test]
    PROCEDURE SalesQuoteMakeOrderWithBlockedItem@253();
    VAR
      SalesHeader@1007 : Record 36;
      SalesReceivablesSetup@1006 : Record 311;
      Item@1005 : Record 27;
      SalesLine@1004 : Record 37;
      OldCreditWarning@1002 : Option;
      OldStockOutWarning@1001 : Boolean;
    BEGIN
      // Setup: Create Sales Quote. Update Blocked as TRUE on Item.
      Initialize;
      OldCreditWarning := UpdateCreditWarningOnSalesAndReceivablesSetup(SalesReceivablesSetup."Credit Warnings"::"No Warning");
      OldStockOutWarning := UpdateStockOutWarningOnSalesReceivablesSetup(FALSE);
      LibraryInventory.CreateItem(Item);
      CreateSalesQuote(SalesHeader,Item."No.");
      UpdateBlockedAsTrueOnItem(Item);

      // Exercise.
      LibrarySales.QuoteMakeOrder(SalesHeader);

      // Verify: Sales Line does not created.
      FilterSalesLine(SalesLine,Item."No.");
      Assert.AreEqual(1,SalesLine.COUNT,OrderExpectedTxt);

      // Tear down.
      UpdateCreditWarningOnSalesAndReceivablesSetup(OldCreditWarning);
      UpdateStockOutWarningOnSalesReceivablesSetup(OldStockOutWarning);
    END;

    [Test]
    PROCEDURE BlanketSalesOrderMakeOrderWithBlockedItem@500();
    VAR
      SalesHeader@1007 : Record 36;
      SalesReceivablesSetup@1006 : Record 311;
      Item@1005 : Record 27;
      SalesLine@1004 : Record 37;
      OldCreditWarning@1002 : Option;
      OldStockOutWarning@1001 : Boolean;
    BEGIN
      // Setup: Create Blanket Sales Order. Update Blocked as TRUE on Item.
      Initialize;
      OldCreditWarning := UpdateCreditWarningOnSalesAndReceivablesSetup(SalesReceivablesSetup."Credit Warnings"::"No Warning");
      OldStockOutWarning := UpdateStockOutWarningOnSalesReceivablesSetup(FALSE);
      LibraryInventory.CreateItem(Item);
      CreateBlanketSalesOrder(SalesHeader,Item."No.");
      UpdateBlockedAsTrueOnItem(Item);

      // Exercise.
      LibrarySales.BlanketSalesOrderMakeOrder(SalesHeader);

      // Verify: Sales Line does not created.
      FilterSalesLine(SalesLine,Item."No.");
      Assert.AreEqual(1,SalesLine.COUNT,OrderExpectedTxt);

      // Tear down.
      UpdateCreditWarningOnSalesAndReceivablesSetup(OldCreditWarning);
      UpdateStockOutWarningOnSalesReceivablesSetup(OldStockOutWarning);
    END;

    [Test]
    PROCEDURE PurchaseQuoteMakeOrderWithBlockedItem@247();
    VAR
      Item@1003 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Setup: Create Purchase Quote. Update Blocked as TRUE on Item.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreatePurchaseQuote(PurchaseHeader,Item."No.");
      UpdateBlockedAsTrueOnItem(Item);

      // Exercise.
      LibraryPurchase.QuoteMakeOrder(PurchaseHeader);

      // Verify: Purchase Line does not created.
      FilterPurchaseLine(PurchaseLine,Item."No.");
      Assert.AreEqual(1,PurchaseLine.COUNT,OrderExpectedTxt);
    END;

    [Test]
    PROCEDURE BlanketPurchaseOrderMakeOrderWithBlockedItem@249();
    VAR
      Item@1003 : Record 27;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Setup: Create Blanket Purchase Order. Update Blocked as TRUE on Item.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateBlanketPurchaseOrder(PurchaseHeader,Item."No.");
      UpdateBlockedAsTrueOnItem(Item);

      // Exercise.
      LibraryPurchase.BlanketPurchaseOrderMakeOrder(PurchaseHeader);

      // Verify: Purchase Line does not created.
      FilterPurchaseLine(PurchaseLine,Item."No.");
      Assert.AreEqual(1,PurchaseLine.COUNT,OrderExpectedTxt);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE PostItemJournalWithItemOnDifferentBins@666();
    BEGIN
      // Setup.
      Initialize;
      ItemJournalWithItemOnDifferentBins(FALSE);  // Create Pick as FALSE.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE RegisterPickWithItemOnDifferentBins@563();
    BEGIN
      // Setup.
      Initialize;
      ItemJournalWithItemOnDifferentBins(TRUE);  // Create Pick as TRUE.
    END;

    LOCAL PROCEDURE ItemJournalWithItemOnDifferentBins@243(CreatePick@1000 : Boolean);
    VAR
      SalesHeader@1006 : Record 36;
      ItemLedgerEntry@1012 : Record 32;
      ItemTrackingCode@1011 : Record 6502;
      Item@1010 : Record 27;
      WarehouseActivityLine@1009 : Record 5767;
      Bin@1008 : Record 7354;
      Bin2@1005 : Record 7354;
      LotNo@1003 : Code[20];
      LotNo2@1002 : Code[20];
      Quantity@1014 : Decimal;
    BEGIN
      // Create Item with Lot and Serial Item Tracking Code. Create Multiple Bins.
      CreateItemTrackingCode(ItemTrackingCode,TRUE,TRUE,FALSE);  // Serial and Lot as TRUE.
      LotNo := LibraryUtility.GenerateGUID;
      LotNo2 := LibraryUtility.GenerateGUID;
      Quantity := LibraryRandom.RandInt(10);
      LibraryInventory.CreateTrackedItem(
        Item,LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,ItemTrackingCode.Code);
      LibraryWarehouse.CreateBin(Bin,LocationBlack.Code,LibraryUtility.GenerateGUID,'','');
      LibraryWarehouse.CreateBin(Bin2,LocationBlack.Code,LibraryUtility.GenerateGUID,'','');

      // Exercise.
      LotNo :=
        CreateAndPostItemJournalLineWithItemTracking(
          LocationBlack.Code,Bin.Code,Item."Base Unit of Measure",ItemTrackingMode::AssignAutoSerialNo,Item."No.",Quantity,WORKDATE,
          FALSE,TRUE);  // Update Lot No. as TRUE.
      LotNo2 :=
        CreateAndPostItemJournalLineWithItemTracking(
          LocationBlack.Code,Bin2.Code,Item."Base Unit of Measure",ItemTrackingMode::AssignAutoSerialNo,Item."No.",Quantity,WORKDATE,
          FALSE,TRUE);  // Update Lot No. as TRUE.

      // Verify.
      VerifyItemLedgerEntryForSerialNo(ItemLedgerEntry."Entry Type"::Purchase,Item."No.",LotNo,1,Quantity);
      VerifyItemLedgerEntryForSerialNo(ItemLedgerEntry."Entry Type"::Purchase,Item."No.",LotNo2,1,Quantity);

      IF CreatePick THEN BEGIN
        // Exercise: Create pick and assign serial/lot on the Pick lines.
        CreatePickFromSalesOrder(SalesHeader,'',Item."No.",2 * Quantity,LocationBlack.Code,FALSE,ReservationMode::" ");

        FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Purchase,Item."No.");
        ItemLedgerEntry.SETRANGE("Lot No.",LotNo2);
        ItemLedgerEntry.FINDFIRST;

        FilterWarehouseActivityLine(WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick);
        WarehouseActivityLine.FINDSET;
        REPEAT
          WarehouseActivityLine.VALIDATE("Serial No.",ItemLedgerEntry."Serial No.");
          WarehouseActivityLine.VALIDATE("Lot No.",ItemLedgerEntry."Lot No.");
          WarehouseActivityLine.MODIFY(TRUE);
        UNTIL WarehouseActivityLine.NEXT = 0;

        // Verify.
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick);
      END;
    END;

    [Test]
    PROCEDURE VendorHistBuyFromFactBoxAsNonEditable@250();
    VAR
      VendorHistBuyFromFactBox@1170 : TestPage 9095;
    BEGIN
      // Setup.
      Initialize;

      // Exercise.
      VendorHistBuyFromFactBox.OPENVIEW;
      VendorHistBuyFromFactBox.FILTER.SETFILTER("No.",LibraryPurchase.CreateVendorNo);

      // Verify.
      VendorHistBuyFromFactBox.NoOfQuotes.SETVALUE(5);
    END;

    [Test]
    PROCEDURE PutAwayAfterRegisterWhseShipmentFromPurchaseOrder@258();
    BEGIN
      // Setup.
      Initialize;
      WarehouseAcitivityLineAfterRegisterPutAway(FALSE);  // Is Pick as FALSE.
    END;

    [Test]
    PROCEDURE PickAfterRegisterPutAwayFromPurchaseOrder@257();
    BEGIN
      // Setup.
      Initialize;
      WarehouseAcitivityLineAfterRegisterPutAway(TRUE);  // Is Pick as TRUE.
    END;

    LOCAL PROCEDURE WarehouseAcitivityLineAfterRegisterPutAway@256(IsPick@1000 : Boolean);
    VAR
      Item@1010 : Record 27;
      PurchaseHeader@1009 : Record 38;
      WarehouseActivityLine@1008 : Record 5767;
      SalesHeader@1007 : Record 36;
      ItemUnitOfMeasure@1006 : Record 5404;
      Bin@1005 : Record 7354;
      Quantity@1002 : Decimal;
    BEGIN
      // Create Item Unit Of Measure. Update Purchase Unit of Measure on Item. Find Bin for Pick Zone.
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      UpdatePurchaseUnitOfMeasureOnItem(Item,ItemUnitOfMeasure.Code);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.

      // Exercise: Create and Release Purchase Order with Item Tracking. Create and Post Warehouse Receipt from Purchase Order. Update Zone and Bin Code On Warehouse Activity Line.
      CreateAndReleasePurchaseOrderWithItemTracking(PurchaseHeader,Item."No.",LocationWhite.Code,Quantity,FALSE);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,FALSE,ItemTrackingMode::" ");
      UpdateZoneAndBinCodeOnWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,PurchaseHeader."No.",Bin);

      // Verify.
      VerifyPutAwayLine(
        PurchaseHeader."No.",WarehouseActivityLine."Action Type"::Take,Item."No.",Quantity,LocationWhite."Receipt Bin Code");
      VerifyPutAwayLine(PurchaseHeader."No.",WarehouseActivityLine."Action Type"::Place,Item."No.",Quantity,Bin.Code);

      IF IsPick THEN BEGIN
        // Exercise.
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
          WarehouseActivityLine."Activity Type"::"Put-away");
        CreatePickFromSalesOrder(SalesHeader,'',Item."No.",Quantity / 2,LocationWhite.Code,FALSE,ReservationMode::" ");

        // Verify.
        FilterWarehouseActivityLine(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
          WarehouseActivityLine."Activity Type"::Pick);
        WarehouseActivityLine.SETRANGE(Quantity,Quantity / 2);
        Assert.AreEqual(1,WarehouseActivityLine.COUNT,OrderExpectedTxt);
      END;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandlerAsTrue)]
    PROCEDURE UndoSalesShipmentLinePartialWithAsmItemLotAndItemtrackingSerial@239();
    VAR
      AssemblyItem@1001 : Record 27;
      Quantity@1000 : Decimal;
    BEGIN
      // Test PostiveAdjmt Quantity on Whse Entry after undo Sales Shipment Line with Partial Qty when Items are created with Lot and Serial specific.
      Initialize;
      Quantity := LibraryRandom.RandInt(100);
      CreateItemWithRepSysAssembly(AssemblyItem);
      ItemTrackingWithSerialSpecific(AssemblyItem,Quantity,Quantity / LibraryRandom.RandInt(3),
        ItemTrackingMode::AssignLotNo);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandlerAsTrue)]
    PROCEDURE UndoSalesShipmentLineFullWithAsmItemLotAndItemtrackingSerial@237();
    VAR
      AssemblyItem@1002 : Record 27;
      Quantity@1001 : Decimal;
    BEGIN
      // Test PostiveAdjmt Quantity on Whse Entry after undo Sales Shipment Line with Full Qty when Items are created with Lot and Serial specific.
      Initialize;
      Quantity := LibraryRandom.RandInt(100);
      CreateItemWithRepSysAssembly(AssemblyItem);
      ItemTrackingWithSerialSpecific(AssemblyItem,Quantity,Quantity,ItemTrackingMode::AssignLotNo);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandlerAsTrue)]
    PROCEDURE UndoSalesShipmentLinePartialWithAsmItemSerialAndItemtrackingSerial@285();
    VAR
      AssemblyItem@1003 : Record 27;
      Quantity@1002 : Decimal;
    BEGIN
      // Test PostiveAdjmt Quantity on Whse Entry after undo Sales Shipment Line with Partial Qty when Items are created with Serial specific.
      Initialize;
      Quantity := LibraryRandom.RandInt(100);
      CreateSerialItemWithRepSysAssembly(AssemblyItem);
      ItemTrackingWithSerialSpecific(AssemblyItem,Quantity,Quantity / LibraryRandom.RandInt(3),
        ItemTrackingMode::AssignAutoSerialNo);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ConfirmHandlerAsTrue)]
    PROCEDURE UndoSalesShipmentLineFullWithAsmItemSerialAndItemtrackingSerial@284();
    VAR
      AssemblyItem@1002 : Record 27;
      Quantity@1001 : Decimal;
    BEGIN
      // Test PostiveAdjmt Quantity on Whse Entry after undo Sales Shipment Line with Full Qty when Items are created with Serial specific.
      Initialize;
      Quantity := LibraryRandom.RandInt(100);
      CreateSerialItemWithRepSysAssembly(AssemblyItem);
      ItemTrackingWithSerialSpecific(AssemblyItem,Quantity,Quantity,ItemTrackingMode::AssignAutoSerialNo);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemTrackingLinesPageHandler,ConfirmHandlerAsTrue)]
    PROCEDURE UndoSalesShipmentLinePartialWithAsmItemSerialAndItemtrackingLot@261();
    VAR
      AssemblyItem@1002 : Record 27;
      Quantity@1001 : Decimal;
    BEGIN
      // Test PostiveAdjmt Quantity on Whse Entry after undo Sales Shipment Line with Partial Qty when Items are created with Serial and Lot specific.
      Initialize;
      Quantity := LibraryRandom.RandInt(100);
      CreateSerialItemWithRepSysAssembly(AssemblyItem);
      ItemTrackingWithLotSpecific(AssemblyItem,Quantity,Quantity / LibraryRandom.RandInt(3),
        ItemTrackingMode::AssignAutoSerialNo);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemTrackingLinesPageHandler,ConfirmHandlerAsTrue)]
    PROCEDURE UndoSalesShipmentLineFullWithAsmItemSerialAndItemtrackingLot@251();
    VAR
      AssemblyItem@1000 : Record 27;
      Quantity@1001 : Decimal;
    BEGIN
      // Test PostiveAdjmt Quantity on Whse Entry after undo Sales Shipment Line with Full Qty when Items are created with Serial and Lot specific.
      Initialize;
      Quantity := LibraryRandom.RandInt(100);
      CreateSerialItemWithRepSysAssembly(AssemblyItem);
      ItemTrackingWithLotSpecific(AssemblyItem,Quantity,Quantity,ItemTrackingMode::AssignAutoSerialNo);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemTrackingLinesPageHandler,ConfirmHandlerAsTrue)]
    PROCEDURE UndoSalesShipmentLinePartialWithAsmItemLotAndItemtrackingLot@283();
    VAR
      AssemblyItem@1002 : Record 27;
      Quantity@1001 : Decimal;
    BEGIN
      // Test PostiveAdjmt Quantity on Whse Entry after undo Sales Shipment Line with Partial Qty when Items are created with Lot specific.
      Initialize;
      Quantity := LibraryRandom.RandInt(100);
      CreateItemWithRepSysAssembly(AssemblyItem);
      ItemTrackingWithLotSpecific(AssemblyItem,Quantity,Quantity / LibraryRandom.RandInt(3),
        ItemTrackingMode::AssignLotNo)
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ItemTrackingLinesPageHandler,ConfirmHandlerAsTrue)]
    PROCEDURE UndoSalesShipmentLineFullWithAsmItemLotAndItemtrackingLot@282();
    VAR
      AssemblyItem@1002 : Record 27;
      Quantity@1001 : Decimal;
    BEGIN
      // Test PostiveAdjmt Quantity on Whse Entry after undo Sales Shipment Line with Full Qty when Items are created with Lot specific.
      Initialize;
      Quantity := LibraryRandom.RandInt(100);
      CreateItemWithRepSysAssembly(AssemblyItem);
      ItemTrackingWithLotSpecific(AssemblyItem,Quantity,Quantity,ItemTrackingMode::AssignLotNo)
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PostShipmentWithNotPickedAssembleToOrderItem@271();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      SalesHeader@1004 : Record 36;
      WarehouseShipmentLine@1003 : Record 7321;
      Quantity@1002 : Decimal;
    BEGIN
      // Test to verify posting Warehouse Shipment for other picked items should be allowed when there is a not picked Assemble-to-Order item
      Initialize;

      // Setup.
      CreateAssemblyItem(Item,Item."Assembly Policy"::"Assemble-to-Order");
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemAndUpdateInventory(Item2,Quantity); // Create a normal item and update inventory to bin in PICK zone
      CreateSalesOrderAndWareshouseShipment(SalesHeader,Item."No.",Item2."No.",Quantity); // Create sales order with 2 lines, 1st line for assembly item, 2nd line for normal item
      CreateAndRegisterPickFromWareshouseShipment(SalesHeader."No."); // Create and register pick for the normal item

      // Exercise and Verify: Post shipment successfully.
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",TRUE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE RegisterPickWithMutipleLotItemTrackingAndDifferentBins@325();
    VAR
      Item@1007 : Record 27;
      Item2@1010 : Record 27;
      SalesHeader@1004 : Record 36;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseShipmentLine@1016 : Record 7321;
      ItemLedgerEntry@1000 : Record 32;
      Quantity@1001 : Decimal;
    BEGIN
      // Test to verify Register Pick successfully with mutiple Lot Item Tracking and different Bins

      // Setup: Create a Purchase Order with 2 lines, each lines assigned 2 Lot No.
      // Post Warehouse Receipt, then split Put-Away Line and update Zone Code and Bin Code for Place line, Register Put-away
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);
      WarehousePutAwayWithTwoLotItemTracking(Item,Item2,Quantity);

      // Create a Sales Order with 4 lines and assign Lot No.
      // Post Warehourse Shipment, then Create Pick
      CreateAndReleaseSalesOrderWithSelectLotItemTracking(SalesHeader,Item,Item2,Quantity);
      CreateWarehouseShipmentFromSalesHeader(SalesHeader);
      CreatePickFromWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Exercise: Register Pick
      // Verify: No error pops up, Register Pick successfully
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);

      // Exercise: Post Warehouse Shipment
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",TRUE);

      // Verify: Lot No. and Quantity is correct in Item Ledger Entries
      // Lot No. in sales posted ILE should be same with the Lot No. in Purchase posted ILE.
      VerifyItemLedgerEntriesForLotNo(
        ItemLedgerEntry."Entry Type"::Sale,Item."No.",
        FindLotNoOnItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Purchase,Item."No."),-Quantity / 5);
      VerifyItemLedgerEntriesForLotNo(
        ItemLedgerEntry."Entry Type"::Sale,Item2."No.",
        FindLotNoOnItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Purchase,Item2."No."),-Quantity / 5);
    END;

    [Test]
    PROCEDURE UpdatePurchaseCodeWithDropShipmentAfterPostWarehouseShipment@372();
    BEGIN
      // Verify Error message should be pop up when updating Purchase Code to Drop Shipment after posting Warehouse Shipment for sales order
      UpdatePurchaseCodeAfterPostWarehouseShipment(TRUE,FALSE); // Set DropShipment as TRUE,SpecialOrder as FALSE
    END;

    [Test]
    PROCEDURE UpdatePurchaseCodeWithSpecialOrderAfterPostWarehouseShipment@364();
    BEGIN
      // Verify Error message should be pop up when updating Purchase Code to Special Order after posting Warehouse Shipment for sales order
      UpdatePurchaseCodeAfterPostWarehouseShipment(FALSE,TRUE); // Set DropShipment as FALSE,SpecialOrder as TRUE
    END;

    [Test]
    PROCEDURE UpdateQuantityAndPurchaseCodeAfterPostWarehouseShipment@379();
    VAR
      Item@1002 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1005 : Record 37;
      PurchaseHeader@1008 : Record 38;
      PurchaseLine@1007 : Record 39;
      Quantity@1000 : Decimal;
      Quantity2@1003 : Decimal;
    BEGIN
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);

      // Setup: Post Warehourse Shipment and reopen Sales Order
      PostWarehouseShipmentAndReopenSalesOrder(SalesHeader,Item,Quantity);

      // Exercise: Update Quantity and Purchasing Code to Drop Shipment
      // Verify: Update successfully
      Quantity2 := LibraryRandom.RandDec(100,2);
      FindSalesLine(SalesLine,SalesHeader."No.");
      SalesLine.VALIDATE(Quantity,Quantity + Quantity2);
      SalesLine.VALIDATE("Purchasing Code",CreatePurchasingCode(TRUE,FALSE));
      SalesLine.MODIFY(TRUE);

      // Exercise: Get Sales Order for Drop Shipment on Requisition Worksheet and Carry Out
      GetSalesOrderForDropShipmentOnRequisitionWorksheet(SalesLine);
      CarryOutActionMsgOnRequisitionWorksheet(Item."No.");

      // Verify: Verify Purchase Line.
      VerifyPurchaseLine(PurchaseLine,Item."No.",Quantity2);

      // Exercise: Post Purchase Order and Sales Order.
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE); // Receive as TRUE.
      SalesHeader.FIND; // Require for Posting.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE); // Post as Ship and Invoice.

      // Verify: Verify Posted Sales Invoice Line.
      VerifyPostedSalesInvoiceLine(Item."No.",Quantity + Quantity2);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE AvailableQtyToTakeInPickWorksheetForBreakBulk@313();
    VAR
      Item@1007 : Record 27;
      TransferHeader@1009 : Record 5740;
      WarehouseActivityLine@1005 : Record 5767;
      WhseWorksheetName@1011 : Record 7327;
      WhsePickRequest@1006 : Record 7325;
      UOM@1008 : ARRAY [3] OF Code[10];
      LotNo@1002 : ARRAY [3] OF Code[20];
      Quantity@1001 : ARRAY [3] OF Decimal;
      QtyPerUOM@1010 : Decimal;
      TransferQty@1000 : Decimal;
      TransferQty2@1003 : Decimal;
      Qty@1004 : Decimal;
    BEGIN
      // Test to verify Available Qty. to Take in Pick Worksheet is consist with Pick lines created by shipment for BreakBulk item

      // Setup: Create a Purchase Order with 2 lines, create Whse. Receipt and register Put-away
      // Line1: Quantity, UOM1
      // Line2: Quantity, UOM2 (UOM2 is "Base Unit of Measure")
      Initialize;
      WhsePickRequest.DELETEALL; // Clear dirty data.
      LotNo[1] := LibraryUtility.GenerateGUID;
      LotNo[2] := LotNo[1];
      LotNo[3] := LotNo[1]; // Lot3 can be any value due to there is no 3rd line
      Quantity[1] := LibraryRandom.RandIntInRange(10,100);
      Quantity[2] := Quantity[1];
      Quantity[3] := 0;
      ReleasePurchaseOrderAndRegisterPutAwayWithMultipleUOMAndLotTracking(Item,Quantity,UOM,LotNo,QtyPerUOM);

      // Create a Transfer Oder with 1 line and Create Pick from Shipment
      // Line1: "More than" Quantity, UOM2. - There is no enough UOM2 of Item in Inventory, so we need breakbulk several UOM1 of Item.
      TransferQty := LibraryRandom.RandIntInRange(Quantity[1],Quantity[1] * QtyPerUOM);
      ReleaseTransferOrderAndCreatePickWithUOMAndLotTracking(
        TransferHeader,LocationWhite.Code,LocationBlue.Code,Item."No.",TransferQty,LotNo[1]);

      // Create a Transfer Oder with 1 line and Create Pick from Shipment
      // Line1: "All the remains" of Quantity, UOM2. - We cannot pick "All the remains" UOM2 items, because the breakbulk item cannot be use
      TransferQty2 := Quantity[1] + Quantity[1] * QtyPerUOM - TransferQty;
      ReleaseTransferOrderAndCreatePickWithUOMAndLotTracking(
        TransferHeader,LocationWhite.Code,LocationBlue.Code,Item."No.",TransferQty2,LotNo[1]);

      // Find the Warehouse Pick and get the value of Quantity of Take, then delete the Pick
      FindWarehouseActivityLineWithActionType(
        WarehouseActivityLine,Item."Base Unit of Measure",LotNo[1],WarehouseActivityLine."Source Document"::"Outbound Transfer",
        TransferHeader."No.",WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take);
      Qty := WarehouseActivityLine.Quantity;
      DeleteWarehouseActivityHeader(WarehouseActivityLine."No.");

      // Exercise: Get the Warehouse Shipment On Pick Worksheet
      GetWarehouseDocumentOnWhseWorksheetLine(WhseWorksheetName,LocationWhite.Code,WhsePickRequest."Document Type"::Shipment);

      // Verify: Verify "Qty. to Handle" and "Available Qty. To Pick" in pick worksheet is consist with Pick lines created by shipment
      VerifyQuantityInPickWorksheetPage(Item."No.",Qty);
    END;

    [Test]
    PROCEDURE PostSalesInvoiceWithDropShipmentAndNegativeQuantity@371();
    BEGIN
      // Test to verify no error pops up when you post Sales Invoice for Drop Shipment with negative quantity
      PostSalesInvoiceWithPurchasingCodeAndNegativeQuantity(TRUE,FALSE); // Set DropShipment as TRUE,SpecialOrder as FALSE
    END;

    [Test]
    PROCEDURE PostSalesInvoiceWithSpecialOrderAndNegativeQuantity@293();
    BEGIN
      // Test to verify no error pops up when you post Sales Invoice for Special Order with negative quantity
      PostSalesInvoiceWithPurchasingCodeAndNegativeQuantity(FALSE,TRUE); // Set DropShipment as FALSE,SpecialOrder as TRUE
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,SelectLotOnItemTrackingSummaryPageHandler)]
    PROCEDURE RegisterPickWithMutipleLotItemTracking@301();
    VAR
      Item@1007 : Record 27;
      SalesHeader@1004 : Record 36;
      PurchaseHeader@1005 : Record 38;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseShipmentLine@1016 : Record 7321;
      ItemLedgerEntry@1000 : Record 32;
      LotNo@1002 : ARRAY [4] OF Code[10];
      Quantity@1001 : Decimal;
      SplitQty@1006 : Decimal;
    BEGIN
      // Test to verify Register Pick successfully with mutiple Lot Item Tracking.

      // Setup: Create a Purchase Order with 4 lines with Lot Tracking.
      // The 1st line and 2nd line with same Lot and the others different.
      // Post Warehouse Receipt, then split Put-Away Line and update Zone Code and Bin Code for Place line, Register Put-away.
      Initialize;
      Quantity := LibraryRandom.RandIntInRange(10,100);
      SplitQty := Quantity - LibraryRandom.RandInt(5);
      CreateAndReleasePurchaseOrderWithMultipleTrackingLines(PurchaseHeader,Item,Quantity,LotNo);
      CreateAndRegisterSplitedPutAwayFromReleasedPurchaseOrder(PurchaseHeader,LotNo[1],SplitQty);

      // Create a Sales Order with 3 lines and assign Lot No. Update the Quantity(Base) on the 1st tracking line of the 2nd sales line.
      // Post Warehourse Shipment, then Create Pick
      CreateAndReleaseSalesOrderWithSelectLotAndUpdateQtyOnTrackingLine(
        SalesHeader,Item."No.",LotNo,Quantity,LibraryRandom.RandDecInDecimalRange(0,SplitQty,2)); // The value updated need to less than SplitQty to repro the issue.
      CreateWarehouseShipmentFromSalesHeader(SalesHeader);
      CreatePickFromWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // Exercise: Register Pick and Post Warehouse Shipment
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",TRUE);

      // Verify: Verify Quantity and Lot No.is correct in Registed Pick.
      VerifyItemLedgerEntriesWithMultipleLotNo(ItemLedgerEntry."Entry Type"::Sale,Item."No.",LotNo,-Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandler)]
    PROCEDURE SplitLineOnWarehousePickWithMultipleUOMAndLotTracking@381();
    VAR
      Item@1007 : Record 27;
      TransferHeader@1009 : Record 5740;
      WarehouseActivityLine@1000 : Record 5767;
      RegisteredWhseActivityLine@1003 : Record 5773;
      UOM@1008 : ARRAY [3] OF Code[10];
      LotNo@1002 : ARRAY [3] OF Code[20];
      Quantity@1001 : ARRAY [3] OF Decimal;
      QtyPerUOM@1010 : Decimal;
      QtyToHandle@1004 : Decimal;
      QtyToHandle2@1005 : Decimal;
      BinCode@1006 : Code[20];
      BinCode2@1011 : Code[20];
    BEGIN
      // Test to verify there is no error when Splitting Line on Warehouse Pick with multiple UOM and Lot tracking

      // Setup: Create a Purchase Order with 3 lines with Lot Tracking, create Whse. Receipt and register Put-away
      // 1st Line: Quantity, Lot1, UOM1
      // 2nd Line: Quantity, Lot1, UOM2 (UOM2 is "Base Unit of Measure")
      // 3rd Line: Quantity, Lot2, UOM2
      Initialize;
      CreateLocationSetup;
      Quantity[1] := LibraryRandom.RandIntInRange(10,100);
      Quantity[2] := Quantity[1];
      Quantity[3] := Quantity[1];
      LotNo[1] := LibraryUtility.GenerateGUID;
      LotNo[2] := LotNo[1];
      LotNo[3] := LibraryUtility.GenerateGUID;
      ReleasePurchaseOrderAndRegisterPutAwayWithMultipleUOMAndLotTracking(Item,Quantity,UOM,LotNo,QtyPerUOM);

      // Create a Transfer Oder with 2 lines with Lot Tracking
      // 1st Line: Qty, Lot1, UOM1
      // 2nd Line: (Quantity - Qty) * QtyPerUOM + 2 * Quantity, Lot1 & Lot2, UOM2
      ReleaseTransferOrderAndCreatePick(
        TransferHeader,LocationWhite.Code,LocationBlue.Code,Item."No.",Quantity,QtyPerUOM,UOM[1],LotNo,ReservationMode::" ");

      // Exercise: Find Take and Place line with Lot No in Warehouse Pick, set the Bin Code
      // Verify: There is no error pops up when setting same Bin Code between Take & Place for breakbulk line and 2 split Take lines.
      FindAndSplitTakePlaceLines(Item,LotNo[1],TransferHeader."No.",WarehouseActivityLine."Action Type"::Place,QtyToHandle,BinCode);
      FindAndSplitTakePlaceLines(Item,LotNo[2],TransferHeader."No.",WarehouseActivityLine."Action Type"::Take,QtyToHandle2,BinCode2);

      // Exercise: Register Pick
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Outbound Transfer",TransferHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);

      // Verify: Verify the Split lines are correct.
      VerifyRegisteredPickLineForQtyAndBinCode(
        Item,TransferHeader."No.",RegisteredWhseActivityLine."Action Type"::Place,LotNo[1],QtyToHandle,BinCode);
      VerifyRegisteredPickLineForQtyAndBinCode(
        Item,TransferHeader."No.",RegisteredWhseActivityLine."Action Type"::Take,LotNo[2],QtyToHandle2,BinCode);
    END;

    [Test]
    PROCEDURE CalcRegenPlanWithWorkCenterAndLocationHaveBinCode@307();
    VAR
      WorkCenter@1000 : Record 99000754;
      ParentItemNo@1001 : Code[20];
      ItemNo@1002 : Code[20];
    BEGIN
      // Verify when we both set up Bin Code on Work Center and Location, after Calculate Regenerative Plan,
      // Bin Code on Requistion Line for BOM Item should be From-Production Bin Code on Work Center.
      // Bin Code on Planning Component for Component Item should be To-Production Bin Code on Work Center.

      // Setup: Create and certify BOM. Create Item with Routing and Production BOM. Update Bin on Work Center. Update Bin on location
      Initialize;
      InitSetupForProdBOMWithRouting(WorkCenter,ItemNo,ParentItemNo,LocationSilver.Code);
      UpdateBinOnWorkCenter(WorkCenter,LocationSilver.Code);
      UpdateBinOnLocation(LocationSilver);

      // Exercise: Create Sales Order for BOM Item and Calculate Regenerative Plan from Sales Order for BOM Item.
      // Verify: Verify the Bin Code on Requisition Line and Planning Component.
      CalcRegenPlanForSalesOrderAndVerifyBinCode(
        LocationSilver.Code,ParentItemNo,WorkCenter."From-Production Bin Code",WorkCenter."To-Production Bin Code");
    END;

    [Test]
    PROCEDURE CalcRegenPlanWithLocationHasBinCodeAndDefaultBin@297();
    VAR
      BinContent@1014 : Record 7302;
      WorkCenter@1000 : Record 99000754;
      ParentItemNo@1011 : Code[20];
      ItemNo@1001 : Code[20];
    BEGIN
      // Verify when we both set up Bin Code on Location, and set the Default Bin for Component Item.
      // After Calculate Regenerative Plan, Bin Code on Requistion Line for BOM Item should be From-Production Bin Code on Location.
      // Bin Code on Planning Component for Component Item should be To-Production Bin Code on Location.

      // Setup: Create and certify BOM. Create Item with Routing and Production BOM. Update Bin on Location. Create Default Bin for Component Item.
      Initialize;
      InitSetupForProdBOMWithRouting(WorkCenter,ItemNo,ParentItemNo,LocationSilver.Code);
      UpdateBinOnLocation(LocationSilver);
      CreateDefaultBinContent(
        BinContent,ItemNo,LocationSilver.Code,LibraryRandom.RandInt(10),LibraryRandom.RandIntInRange(50,100));

      // Exercise: Create Sales Order for BOM Item and Calculate Regenerative Plan from Sales Order for BOM Item.
      // Verify: Verify the Bin Code on Requisition Line and Planning Component.
      CalcRegenPlanForSalesOrderAndVerifyBinCode(
        LocationSilver.Code,ParentItemNo,LocationSilver."From-Production Bin Code",LocationSilver."To-Production Bin Code");
    END;

    [Test]
    PROCEDURE CalcRegenPlanAssemblyItemLocationHasFromBinCode@380();
    VAR
      Location@1000 : Record 14;
      ParentItem@1006 : Record 27;
      ComponentItem@1007 : Record 27;
    BEGIN
      // [FEATURE] [Assembly] [Bin] [Planning]
      // [SCENARIO 212823] Calc. regen. plan for assembly item at location From/To-Assembly Bin Codes specified sets "From-Assembly Bin Code" in "Requisition Line" and "To-Assembly Bin Code" in "Planning Component"
      Initialize;

      // [GIVEN] Location "L" with specified From/To-Assembly Bin Codes
      CreateLocationWithAssemblyBins(Location);

      // [GIVEN] Assembly Item "AI" and its component "CI"
      CreateAssemblyItemWithBOM(ParentItem,ComponentItem);

      // [GIVEN] SKU for "I" at "L" with specified safety stock as demand
      CreateLotForLotSKUWithSafetyStock(Location.Code,ParentItem."No.",1);

      // [WHEN] Calculate regenerative plan for "AI"
      RunCalculateRegenerativePlan(ParentItem."No.",Location.Code,WORKDATE);

      // [THEN] "Requisition Line"."Bin Code" is equal "L"."From-Assembly Bin Code", "Planning Component"."Bin Code" is equal "L"."To-Assembly Bin Code"
      VerifyBinCodeOnReqLineAndPlanningComponent(ParentItem."No.",Location."From-Assembly Bin Code",Location."To-Assembly Bin Code");
    END;

    [Test]
    PROCEDURE CalcRegenPlanAssemblyItemLocationHasFromBinCodeAndDefaultBinContent@378();
    VAR
      Location@1000 : Record 14;
      ParentItem@1006 : Record 27;
      ComponentItem@1005 : Record 27;
      BinContent@1003 : Record 7302;
    BEGIN
      // [FEATURE] [Assembly] [Bin] [Planning]
      // [SCENARIO 212823] Calc. regen. plan for assembly item at location From/To-Assembly Bin Codes specified sets "From-Assembly Bin Code" in "Requisition Line" and "To-Assembly Bin Code" in "Planning Component" when Default Bin Content exists
      Initialize;

      // [GIVEN] Location "L" with specified From/To-Assembly Bin Codes
      CreateLocationWithAssemblyBins(Location);

      // [GIVEN] Assembly Item "AI" and its component "CI"
      CreateAssemblyItemWithBOM(ParentItem,ComponentItem);

      // [GIVEN] SKU for "AI" at "L" with specified safety stock as demand
      CreateLotForLotSKUWithSafetyStock(Location.Code,ParentItem."No.",1);

      // [GIVEN] Default Bin Content for "CI" at "L"
      CreateDefaultBinContent(BinContent,ComponentItem."No.",Location.Code,0,0);

      // [WHEN] Calculate regenerative plan for "AI"
      RunCalculateRegenerativePlan(ParentItem."No.",Location.Code,WORKDATE);

      // [THEN] "Requisition Line"."Bin Code" is equal "L"."From-Assembly Bin Code", "Planning Component"."Bin Code" is equal "L"."To-Assembly Bin Code"
      VerifyBinCodeOnReqLineAndPlanningComponent(ParentItem."No.",Location."From-Assembly Bin Code",Location."To-Assembly Bin Code");
    END;

    [Test]
    PROCEDURE ProductionOrderLocationHasFromBinCodeAndDefaultBinContent@394();
    VAR
      Location@1000 : Record 14;
      ComponentItem@1005 : Record 27;
      BinContent@1003 : Record 7302;
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      // [FEATURE] [Production Order] [Bin] [Planning]
      // [SCENARIO 212823] After Update "Prod. Order Line"."Item No." "Prod. Order Line" has "Bin Code" equal to Location."From-Production Bin Code" if "From-Production Bin Code" is specified
      Initialize;

      // [GIVEN] Location "L" with specified "From-Production Bin Code"
      CreateLocationWithFromProdBinCode(Location);

      // [GIVEN] Item "I"
      LibraryInventory.CreateItem(ComponentItem);

      // [GIVEN] Default Bin Content for "I" at "L"
      CreateDefaultBinContent(BinContent,ComponentItem."No.",Location.Code,0,0);

      // [GIVEN] Realeased Production Order with line "L"
      CreateProdOrderLineAtLocation(ProdOrderLine,Location.Code);

      // [WHEN] Update "L"."Item No." by "I"
      ProdOrderLine.VALIDATE("Item No.",ComponentItem."No.");

      // [THEN] "L"."Bin Code" is equal to "L"."From-Production Bin Code"
      ProdOrderLine.TESTFIELD("Bin Code",Location."From-Production Bin Code");
    END;

    [Test]
    PROCEDURE ProductionOrderLocationHasDefaultBinContent@430();
    VAR
      Location@1000 : Record 14;
      ComponentItem@1005 : Record 27;
      BinContent@1003 : Record 7302;
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      // [FEATURE] [Production Order] [Bin] [Planning]
      // [SCENARIO 212823] After Update "Prod. Order Line"."Item No." "Prod. Order Line" has "Bin Code" equal to (default) "Bin Content"."Bin Code" if "From-Production Bin Code" isn't specified
      Initialize;

      // [GIVEN] Bin Mandatory Location "L"
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);

      // [GIVEN] Item "I"
      LibraryInventory.CreateItem(ComponentItem);

      // [GIVEN] Default Bin Content "BC" for "I" at "L"
      CreateDefaultBinContent(BinContent,ComponentItem."No.",Location.Code,0,0);

      // [GIVEN] Realeased Production Order with line "L"
      CreateProdOrderLineAtLocation(ProdOrderLine,Location.Code);

      // [WHEN] Update "L"."Item No." by "I"
      ProdOrderLine.VALIDATE("Item No.",ComponentItem."No.");

      // [THEN] "Prod. Order Line"."Bin Code" is equal to "BC"."Bin Code"
      ProdOrderLine.TESTFIELD("Bin Code",BinContent."Bin Code");
    END;

    [Test]
    PROCEDURE CheckProdOrderBinWhereBinIsSetForBothLocationAndItem@329();
    VAR
      ProductionOrder@1002 : Record 5405;
      Location@1003 : Record 14;
      BinContent@1001 : Record 7302;
    BEGIN
      Initialize;

      CreateLocationWithFromProdBinCode(Location);
      CreateProductionOrderWithItem(ProductionOrder);
      CreateDefaultBinContent(
        BinContent,ProductionOrder."Source No.",Location.Code,
        LibraryRandom.RandInt(10),LibraryRandom.RandIntInRange(50,100));

      ProductionOrder.VALIDATE("Location Code",Location.Code);

      Assert.AreEqual(ProductionOrder."Bin Code",Location."From-Production Bin Code",BinValidationErr);
    END;

    [Test]
    PROCEDURE CheckProdOrderBinWhereBinIsSetForLocationOnly@361();
    VAR
      ProductionOrder@1000 : Record 5405;
      Location@1002 : Record 14;
    BEGIN
      Initialize;

      CreateLocationWithFromProdBinCode(Location);
      CreateProductionOrderWithItem(ProductionOrder);

      ProductionOrder.VALIDATE("Location Code",Location.Code);

      Assert.AreEqual(ProductionOrder."Bin Code",Location."From-Production Bin Code",BinValidationErr);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandler,SalesShipmentReportHandler)]
    PROCEDURE CorrectionQuantityForLotInReportSalesShipment@357();
    BEGIN
      // Test to verify Correction Quantity is correct for Lot tracking line in Report 208 (Sales - Shipment)
      VerifyReportForUndoShipmentWithLotTracking(ReportName::SalesShipment,'TrackingSpecBufferLotNo','TrackingSpecBufferQty');
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandler,ItemTrackingAppendixRequestPageHandler)]
    PROCEDURE CorrectionQuantityForLotInReportItemTrackingAppendix@362();
    BEGIN
      // Test to verify Correction Quantity is correct for Lot tracking line in Report 6521 (Item Tracking Appendix)
      VerifyReportForUndoShipmentWithLotTracking(ReportName::ItemTrackingAppendix,'LotNo','TotalQuantity');
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandler,ServiceShipmentReportHandler)]
    PROCEDURE CorrectionQuantityForLotInReportServiceShipmentWithUndoShipment@332();
    BEGIN
      // Test to verify Correction Quantity is correct for Lot tracking line with Undo Shipment in Report 5913 (Service - Shipment)
      CorrectionQuantityForLotInReportServiceShipment(UndoType::UndoShipment);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandler,ServiceShipmentReportHandler)]
    PROCEDURE CorrectionQuantityForLotInReportServiceShipmentWithUndoConsumption@343();
    BEGIN
      // Test to verify Correction Quantity is correct for Lot tracking line with Undo Consumption in Report 5913 (Service - Shipment)
      CorrectionQuantityForLotInReportServiceShipment(UndoType::UndoConsumption);
    END;

    [Test]
    [HandlerFunctions(InboundOutboundHandler,ReservationPageHandler)]
    PROCEDURE RegisterPickFromMultipleBinsWithUOMConversionsAndReservations@326();
    VAR
      Item@1001 : Record 27;
      ItemUnitOfMeasure@1000 : Record 5404;
      PurchaseHeader@1002 : Record 38;
      TransferHeader@1005 : Record 5740;
      WarehouseActivityLine@1006 : Record 5767;
      LotNo@1004 : ARRAY [3] OF Code[20];
      Quantity@1003 : ARRAY [3] OF Decimal;
    BEGIN
      // Test to verify total Quantity(Base) in Shipment Bin on Registered Whse. Activity Lines is correct after register pick from multiple bins with UOM conversions and reservations.

      // Setup: Create and released Purchase Order, create and Register splited Put-away.
      Initialize;
      CreateItemWithSalesAndPurchaseUnitOfMeasure(Item);
      ItemUnitOfMeasure.GET(Item."No.",Item."Purch. Unit of Measure");
      Quantity[1] := LibraryRandom.RandIntInRange(10,100);
      Quantity[2] := ROUND(Quantity[1] / LibraryRandom.RandIntInRange(3,5),1);
      Quantity[3] := (Quantity[1] - Quantity[2]) * ItemUnitOfMeasure."Qty. per Unit of Measure";
      LotNo[1] := '';
      LotNo[2] := '';
      LotNo[3] := '';

      CreateAndReleasePurchaseOrderWithItemTracking(PurchaseHeader,Item."No.",LocationWhite.Code,Quantity[1],FALSE); // Value required for test, UsingTracking=FALSE
      CreateAndRegisterSplitedPutAwayFromReleasedPurchaseOrder(
        PurchaseHeader,'',LibraryRandom.RandInt(8)); // Value isn't important but need to less than Quantity[1].

      // Create and Reserve Transfer Oder with 2 lines, create Pick for the Transfer Order.
      // 1st Line: Quantity[2], ItemUnitOfMeasure.Code
      // 2nd Line: Quantity[3], Item."Base Unit of Measure"
      ReleaseTransferOrderAndCreatePick(
        TransferHeader,LocationWhite.Code,LocationBlue.Code,Item."No.",Quantity,
        ItemUnitOfMeasure."Qty. per Unit of Measure",ItemUnitOfMeasure.Code,LotNo,ReservationMode::AutoReserve);

      // Exercise: Register the Pick created. No error pops up.
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Outbound Transfer",
        TransferHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Verify: Verify the total Quanity(Base) in Shipment Bin is correct.
      VerifyTotalQuantityBaseOnRegisteredPickLines(
        LocationWhite."Shipment Bin Code",Item."No.",Quantity[1] * ItemUnitOfMeasure."Qty. per Unit of Measure");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ExplodeBOMHandler,ConfirmHandlerAsTrue)]
    PROCEDURE UndoShipmentWithMultipleAssembleToOrderItems@328();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      SalesHeader@1004 : Record 36;
      ItemLedgerEntry@1003 : Record 32;
      Quantity@1002 : Decimal;
      PrevAutomaticCostAdjValue@1005 : 'Never,Day,Week,Month,Quarter,Year,Always';
      SalesShipmentNo@1006 : Code[20];
    BEGIN
      // Verify that Shipment can be undone for Posted Warehouse Shipment with multiple lines with Items with 'Assemble-To-Order' Assembly Policy.

      Initialize;

      // Setup.
      PrevAutomaticCostAdjValue := UpdateAutomaticCostAdj(PrevAutomaticCostAdjValue::Always);

      CreateAssemblyItem(Item,Item."Assembly Policy"::"Assemble-to-Order");
      CreateAssemblyItem(Item2,Item2."Assembly Policy"::"Assemble-to-Order");
      LibraryInventory.UpdateInventoryPostingSetup(LocationBlue);
      PostStockForComponents(Item,LibraryRandom.RandIntInRange(10,100));
      PostStockForComponents(Item2,LibraryRandom.RandIntInRange(10,100));

      Quantity := LibraryRandom.RandDec(10,2);
      LibraryVariableStorage.Enqueue(STRSUBSTNO(BeforeWorkDateMsg,WORKDATE)); // Enqueue for message triggered by sales line for assembly item
      CreateSalesOrder(SalesHeader,Item."No.",Item2."No.",Quantity,LocationBlue.Code); // Create sales order with 2 lines.
      SalesShipmentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // Exercise and Verify.
      LibraryVariableStorage.Enqueue(STRSUBSTNO(BeforeWorkDateMsg,WORKDATE)); // Enqueue for ConfirmHandler.
      UndoSalesShipmentLine(SalesShipmentNo,STRSUBSTNO(BeforeWorkDateMsg,WORKDATE));
      VerifyItemLedgerEntryForLotNo(Item2."No.",ItemLedgerEntry."Entry Type"::Sale,-Quantity,'');

      // Teardown.
      UpdateAutomaticCostAdj(PrevAutomaticCostAdjValue);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE FEFOPickWithMultipleUOMs@349();
    VAR
      Bin@1010 : Record 7354;
      Item@1008 : Record 27;
      ItemUnitOfMeasure@1002 : Record 5404;
      WarehouseShipmentLine@1005 : Record 7321;
      SalesHeader@1003 : Record 36;
      Quantity@1004 : ARRAY [2] OF Decimal;
      QtyPerUOM@1006 : Decimal;
      OldPickAccordingToFEFO@1001 : Boolean;
    BEGIN
      // [FEATURE] [Warehouse Pick] [FEFO]
      // [SCENARIO] Check that can pick Quantity if available when "Pick According to FEFO" set, Item with multiple UOMs.

      // [GIVEN] Set "Pick According to FEFO" for Location, Lot Tracked Item with two lots of quantities "Q1" and "Q2" availavble in some bin (UOM with coeff "C" > 1).
      Initialize;
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO,TRUE);

      QtyPerUOM := 76; // QtyPerUOM = 76 needed for test
      Quantity[1] := 4; // Value needed for test.
      Quantity[2] := 10; // Value needed for test.

      CreateItemWithLotItemTrackingCode(Item,TRUE,LibraryUtility.GetGlobalNoSeriesCode);
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",QtyPerUOM);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);  // Enqueue for ItemTrackingLinesPageHandler.
      CreateAndRegisterPutAwayFromPurchaseOrderNoExpiration(
        Bin,Item."No.",LocationWhite.Code,Quantity[1],ItemUnitOfMeasure.Code,TRUE);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);  // Enqueue for ItemTrackingLinesPageHandler.
      CreateAndRegisterPutAwayFromPurchaseOrderNoExpiration(
        Bin,Item."No.",LocationWhite.Code,Quantity[2],ItemUnitOfMeasure.Code,TRUE);

      // [GIVEN] Released Sales Order with two lines of Quantities "S1" and "S2", where "S1" + "S2" < ("Q1" + "Q2") * "C".
      Quantity[1] := 700; // Value needed for test.
      Quantity[2] := 100; // Value needed for test.

      CreateAndReleaseSalesOrderWithMultipleSalesLines(
        SalesHeader,'',Item."No.",Item."No.",Quantity[1],Quantity[2],LocationWhite.Code);
      CreateWarehouseShipmentFromSalesHeader(SalesHeader);

      // [WHEN] Create Pick.
      CreatePickFromWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // [THEN] Picked Quantity equals to "S1" + "S2".
      VerifyQtyToPickEqualsTo(Item."No.",Quantity[1] + Quantity[2]);

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO,OldPickAccordingToFEFO);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ReservationPageHandler)]
    PROCEDURE FEFOPickLotsWhenNoStockAvailable@352();
    VAR
      SalesHeader@1003 : Record 36;
      Bin@1000 : Record 7354;
      Item@1008 : Record 27;
      WarehouseShipmentLine@1002 : Record 7321;
      Quantity@1004 : Decimal;
      OldPickAccordingToFEFO@1001 : Boolean;
    BEGIN
      // [FEATURE] [Warehouse Pick] [FEFO] [Lot Item Tracking]
      // [SCENARIO] Check that cannot pick Quantity greater than available when "Pick According to FEFO" set.

      // [GIVEN] Set "Pick according to FEFO" for Location where Lot Tracked Item of Quantity "X" is available.
      Initialize;
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO,TRUE);

      CreateItemWithLotItemTrackingCode(Item,TRUE,LibraryUtility.GetGlobalNoSeriesCode);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);  // Enqueue for ItemTrackingLinesPageHandler.
      Quantity := 2 * LibraryRandom.RandIntInRange(500,1000);
      CreateAndRegisterPutAwayFromPurchaseOrderNoExpiration(Bin,Item."No.",LocationWhite.Code,Quantity,'',TRUE);

      // [GIVEN] Reserve "R" quantity if Item for Sales Order.
      CreateAndReleaseSalesOrder(
        SalesHeader,'',Item."No.",(Quantity / 2) + 100,LocationWhite.Code,'',FALSE,ReservationMode::AutoReserve);
      CLEAR(SalesHeader);
      // [GIVEN] Create Sales Orer of Quantity "S", where "S" > ("X" - "R").
      CreateAndReleaseSalesOrder(
        SalesHeader,'',Item."No.",(Quantity / 2) + 100,LocationWhite.Code,'',FALSE,ReservationMode::" ");
      CreateWarehouseShipmentFromSalesHeader(SalesHeader);

      // [WHEN] Create Pick.
      CreatePickFromWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // [THEN] Quantity Picked equals to ("X" - "R")
      VerifyQtyToPickEqualsTo(Item."No.",(Quantity / 2) - 100);

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO,OldPickAccordingToFEFO);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ReservationPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE FEFOPickSerialsWhenNoStockAvailable@346();
    VAR
      SalesHeader@1003 : Record 36;
      Bin@1000 : Record 7354;
      Item@1008 : Record 27;
      WarehouseShipmentLine@1002 : Record 7321;
      Quantity@1004 : Decimal;
      OldPickAccordingToFEFO@1001 : Boolean;
    BEGIN
      // [FEATURE] [Warehouse Pick] [FEFO] [Serial Item Tracking]
      // [SCENARIO] Check that cannot pick Quantity greater than available when "Pick According to FEFO" set.

      // [GIVEN] Set "Pick according to FEFO" for Location where Serial Tracked Item of Quantity "X" is available.
      Initialize;
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO,TRUE);

      CreateItemWithSerialItemTrackingCodeUsingStrictExpiration(Item,FALSE);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignAutoSerialNo);  // Enqueue for ItemTrackingLinesPageHandler.
      Quantity := 2 * LibraryRandom.RandIntInRange(5,10);
      CreateAndRegisterPutAwayFromPurchaseOrderNoExpiration(Bin,Item."No.",LocationWhite.Code,Quantity,'',FALSE);

      // [GIVEN] Reserve "R" quantity if Item for Sales Order.
      CreateAndReleaseSalesOrder(
        SalesHeader,'',Item."No.",(Quantity / 2) + 1,LocationWhite.Code,'',FALSE,ReservationMode::AutoReserve);
      CLEAR(SalesHeader);
      // [GIVEN] Create Sales Orer of Quantity "S", where "S" > ("X" - "R").
      CreateAndReleaseSalesOrder(
        SalesHeader,'',Item."No.",(Quantity / 2) + 1,LocationWhite.Code,'',FALSE,ReservationMode::" ");
      CreateWarehouseShipmentFromSalesHeader(SalesHeader);

      // [WHEN] Create Pick.
      CreatePickFromWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");

      // [THEN] Quantity Picked equals to ("X" - "R")
      VerifyQtyToPickEqualsTo(Item."No.",(Quantity / 2) - 1);

      // Tear down.
      UpdatePickAccordingToFEFOOnLocation(LocationWhite,OldPickAccordingToFEFO,OldPickAccordingToFEFO);
    END;

    [Test]
    [HandlerFunctions(ExplodeBOMHandler,ConfirmHandlerAsTrue,MessageHandler)]
    PROCEDURE BatchSalesPostingWithATOChangesPostingDateForLinkedAssembly@360();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      ItemLedgerEntry@1003 : Record 32;
      NewPostingDate@1002 : Date;
    BEGIN
      // [FEATURE] [Sales Order] [Assemble-to-Order] [Batch Post]
      // [SCENARIO 382212] Batch sales posting with a new posting date updates the posting date of an assembly order linked to a sales document being posted.
      Initialize;

      // [GIVEN] Assembly Item "I" with ATO assembly policy. All components of "I" are in stock.
      CreateAssemblyItem(Item,Item."Assembly Policy"::"Assemble-to-Order");
      LibraryInventory.UpdateInventoryPostingSetup(LocationBlue);
      PostStockForComponents(Item,LibraryRandom.RandIntInRange(10,100));

      // [GIVEN] Sales Order "SO" of item "I" with automatically generated linked Assembly Header "AH". Posting date for both documents = "D1".
      CreateAndReleaseSalesOrderWithAssemblyItem(SalesHeader,Item."No.");

      // [WHEN] Run batch posting of "SO" with a direction to replace the posting date to "D2".
      NewPostingDate := LibraryRandom.RandDateFromInRange(WORKDATE,10,20);
      BatchPostSalesOrderWithNewPostingDate(SalesHeader,NewPostingDate);

      // [THEN] Posting date of "AH" is updated to "D2".
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::"Assembly Output",Item."No.");
      ItemLedgerEntry.TESTFIELD("Posting Date",NewPostingDate);
    END;

    [Test]
    PROCEDURE AsmHeaderPostingDateIsUpdatedWithSalesHeaderPostingDate@415();
    VAR
      SalesHeader@1000 : Record 36;
      AssemblyHeader@1001 : Record 900;
    BEGIN
      // [FEATURE] [Sales Order] [Assembly] [UT]
      // [SCENARIO 382212] SynchronizeAsmHeader function invoked for the sales document, makes the posting date of the linked assembly equal to the posting date of the sales.
      Initialize;

      // [GIVEN] Sales Order with linked Assembly Order.
      // [GIVEN] Posting date of the sales = "D1". Posting date of the assembly = "D2".
      MockSalesOrder(SalesHeader);
      MockAssemblyHeader(AssemblyHeader);
      MockATOLink(SalesHeader,AssemblyHeader);

      // [WHEN] Invoke SynchronizeAsmHeader function for the Sales Order.
      SalesHeader.SynchronizeAsmHeader;

      // [THEN] Posting date of the assembly is updated to "D1".
      AssemblyHeader.FIND;
      AssemblyHeader.TESTFIELD("Posting Date",SalesHeader."Posting Date");
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      CLEAR(ItemTrackingMode);

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      CreateLocationSetup;
      CreateTransferRoute;
      NoSeriesSetup;
      ItemJournalSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateAutomaticCostAdj@340(NewAutomaticCostAdjValue@1000 : Option) OldAutomaticCostAdjValue : Integer;
    VAR
      InventorySetup@1001 : Record 313;
    BEGIN
      WITH InventorySetup DO BEGIN
        GET;
        OldAutomaticCostAdjValue := "Automatic Cost Adjustment";
        "Automatic Cost Adjustment" := NewAutomaticCostAdjValue;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE ItemTrackingWithSerialSpecific@296(AssemblyItem@1006 : Record 27;Quantity@1005 : Decimal;ShipmentQuantity@1001 : Decimal;ItemTrackingForAssHeader@1000 : Option);
    VAR
      ChildItem@1003 : Record 27;
    BEGIN
      CreateItemWithSerialItemTrackingCodeUsingStrictExpiration(ChildItem,FALSE);
      QuantityAfterUndoSalesShipmentLine(AssemblyItem,ChildItem,Quantity,ShipmentQuantity,
        ItemTrackingMode::AssignAutoSerialNo,ItemTrackingForAssHeader);
    END;

    LOCAL PROCEDURE ItemTrackingWithLotSpecific@269(AssemblyItem@1006 : Record 27;Quantity@1000 : Decimal;ShipmentQuantity@1001 : Decimal;ItemTrackingForAssHeader@1005 : Option);
    VAR
      ChildItem@1003 : Record 27;
    BEGIN
      CreateItemWithLotItemTrackingCode(ChildItem,TRUE,'');
      UpdateLotNoOnItem(ChildItem);
      QuantityAfterUndoSalesShipmentLine(AssemblyItem,ChildItem,Quantity,ShipmentQuantity,
        ItemTrackingMode::AssignLotNo,ItemTrackingForAssHeader);
    END;

    LOCAL PROCEDURE AssignNoOnWhseActivityLines@259(VAR WarehouseActivityLine@1002 : Record 5767;ItemNo@1000 : Code[20];AssemblyHeaderNo@1003 : Code[20]);
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Purchase,ItemNo);
      WITH WarehouseActivityLine DO BEGIN
        FilterWarehouseActivityLine(
          WarehouseActivityLine,"Source Document"::"Assembly Consumption",AssemblyHeaderNo,"Activity Type"::Pick);
        FINDSET;
        REPEAT
          VALIDATE("Serial No.",ItemLedgerEntry."Serial No.");
          VALIDATE("Lot No.",ItemLedgerEntry."Lot No.");
          MODIFY(TRUE);
          NEXT;
          VALIDATE("Serial No.",ItemLedgerEntry."Serial No.");
          VALIDATE("Lot No.",ItemLedgerEntry."Lot No.");
          MODIFY(TRUE);
          ItemLedgerEntry.NEXT;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AssignNoOnAsmHeader@272(ItemNo@1000 : Code[20];ItemTrackingMode@1002 : ' ,AssignLotNo,SelectEntries,AssignSerialNo,ApplyFromItemEntry,AssignAutoSerialNo,AssignAutoLotAndSerialNo');
    VAR
      AssemblyHeader@1001 : Record 900;
      LotNo@1003 : Variant;
    BEGIN
      WITH AssemblyHeader DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        IF ItemTrackingMode = ItemTrackingMode::AssignLotNo THEN BEGIN
          LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);
          OpenItemTrackingLines;
          LibraryVariableStorage.Dequeue(LotNo);
        END ELSE BEGIN
          LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignSerialNo);
          OpenItemTrackingLines;
        END;
      END;
    END;

    LOCAL PROCEDURE QuantityAfterUndoSalesShipmentLine@220(AssemblyItem@1009 : Record 27;ChildItem@1010 : Record 27;Quantity@1027 : Decimal;ShipmentQuantity@1028 : Decimal;ItemTrackingForWhseReceipt@1006 : Option;ItemTrackingForAsmHeader@1011 : Option);
    VAR
      BOMComponent@1004 : Record 90;
      PurchaseHeader@1002 : Record 38;
      SalesHeader@1005 : Record 36;
      WarehouseActivityLine@1003 : Record 5767;
      LibraryAssembly@1000 : Codeunit 132207;
      ReservationMode@1007 : ' ,ReserveFromCurrentLine,AutoReserve';
      AssemblyHeaderNo@1001 : Code[20];
    BEGIN
      // Setup: Create an Assembly Item with Component Item having Serial Item Tracking.
      LibraryAssembly.CreateAssemblyListComponent(BOMComponent.Type::Item,
        ChildItem."No.",AssemblyItem."No.",'',BOMComponent."Resource Usage Type",1,TRUE);

      // Create and Release Purchase Order.Create and Post Warehouse Receipt from Purchase Order.
      CreateAndReleasePurchaseOrderWithItemTracking(PurchaseHeader,ChildItem."No.",LocationWhite.Code,Quantity,FALSE);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,TRUE,ItemTrackingForWhseReceipt);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Create Sales Document.Realease ant Pick created Assembly Order.
      LibraryVariableStorage.Enqueue(STRSUBSTNO(AssemblyOrderMsg,WORKDATE - 1,WORKDATE));
      LibraryVariableStorage.Enqueue(STRSUBSTNO(AssemblyOrderMsg,WORKDATE - 1,WORKDATE));
      CreateSalesDocument(
        SalesHeader,SalesHeader."Document Type"::Order,'',
        AssemblyItem."No.",ShipmentQuantity,LocationWhite.Code,'',FALSE,ReservationMode);
      AssemblyHeaderNo := ReleaseAndCreateWhsePickFromAsmHeader(AssemblyItem."No.");

      // Assign Serial No on Activity Lines and Lotno. on Assembly Header.
      AssignNoOnWhseActivityLines(WarehouseActivityLine,ChildItem."No.",AssemblyHeaderNo);
      RegisterWhseActivityAfterAutofillingQtyToHandle(WarehouseActivityLine);
      AssignNoOnAsmHeader(AssemblyItem."No.",ItemTrackingForAsmHeader);

      // Release created Sales order ,create Warehouse Shipment from Sales Header and Post Whse Shipment after updating Qty. to ship.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateWarehouseShipmentFromSalesHeader(SalesHeader);
      UpdateQtyToShipAndPostWhseShipment(SalesHeader."No.",ShipmentQuantity);

      // Exercise: Undo Posted Warehouse shipmentLines.
      UndoSaleShipmentLine(SalesHeader."No.");

      // Verify: Verifying Quantity on Bin Content and Postive Adjmt Qty on Warehouse Entry of Child Item.
      ChildItem.CALCFIELDS(Inventory);
      Assert.AreEqual(ChildItem.Inventory,CalcQuantityOnBinContent(LocationWhite.Code,ChildItem."No."),ValueMustBeEqualTxt);
      Assert.AreEqual(ShipmentQuantity,
        GetPostiveAdjmtQtyFromWarehouseEntry(ChildItem."No.",LocationWhite.Code,AssemblyHeaderNo),ValueMustBeEqualTxt);
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      WarehouseSetup@1002 : Record 5769;
      PurchasesPayablesSetup@1003 : Record 312;
      SalesSetup@1001 : Record 311;
    BEGIN
      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);

      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.VALIDATE("Posted Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.VALIDATE("Posted Shipment Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.VALIDATE("Posted Credit Memo Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@39();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      UpdateNoSeriesOnItemJournalBatch(ItemJournalBatch,LibraryUtility.GetGlobalNoSeriesCode);
    END;

    LOCAL PROCEDURE CreateLocationSetup@92();
    VAR
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      CreateFullWarehouseSetup(LocationWhite);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite.Code,TRUE);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationBlue);
      LibraryWarehouse.CreateInTransitLocation(LocationInTransit);
      LibraryWarehouse.CreateLocationWMS(LocationOrange,TRUE,TRUE,TRUE,TRUE,TRUE);  // With Require Put Away, Require Pick, Require Receive, Require Shipment and Bin Mandatory.
      LibraryWarehouse.CreateLocationWMS(LocationSilver,TRUE,FALSE,TRUE,FALSE,FALSE);  // With Require Pick and Bin Mandatory.
      LibraryWarehouse.CreateLocationWMS(LocationBlack,TRUE,FALSE,TRUE,FALSE,TRUE);  // With Require Pick, Require Shipment and Bin Mandatory.
      LibraryWarehouse.CreateLocationWMS(LocationYellow,FALSE,TRUE,TRUE,TRUE,TRUE);  // With Require Receive, Require Put Away, Require Shipment and Require Pick.
      LibraryWarehouse.CreateLocationWMS(LocationGreen,FALSE,TRUE,FALSE,TRUE,FALSE);  // With Required Receive and Require Put Away.
      LibraryWarehouse.CreateLocationWMS(LocationRed,FALSE,TRUE,FALSE,FALSE,FALSE);  // With Require Put Away.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationOrange.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationSilver.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationBlack.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationYellow.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationGreen.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationRed.Code,FALSE);
      LibraryWarehouse.CreateNumberOfBins(LocationOrange.Code,'','',2,FALSE);  // Value required for No. of Bins.
    END;

    LOCAL PROCEDURE CreateLocationWithAssemblyBins@387(VAR Location@1000 : Record 14);
    VAR
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.VALIDATE("Require Pick",TRUE);
      Location.VALIDATE("Require Shipment",TRUE);
      Location.MODIFY(TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
      UpdateAssemblyBinOnLocation(Location);
    END;

    LOCAL PROCEDURE CalcQuantityOnBinContent@280(LocationCode@1000 : Code[20];ItemNo@1002 : Code[20]) BinContentQuantity : Decimal;
    VAR
      BinContent@1001 : Record 7302;
    BEGIN
      WITH BinContent DO BEGIN
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Item No.",ItemNo);
        FINDSET;
        REPEAT
          CALCFIELDS(Quantity);
          BinContentQuantity += Quantity;
        UNTIL NEXT = 0;
      END;
      EXIT(BinContentQuantity);
    END;

    LOCAL PROCEDURE WarehouseJournalSetup@106(LocationCode@1000 : Code[10]);
    BEGIN
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      WarehouseJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalTemplate.MODIFY(TRUE);

      LibraryWarehouse.SelectWhseJournalBatchName(
        WarehouseJournalBatch,WarehouseJournalTemplate.Type,WarehouseJournalTemplate.Name,LocationCode);
      WarehouseJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AutoFillQuantityToHandleOnWhsePickLine@21(VAR WarehouseActivityLine@1000 : Record 5767;SourceDocument@1001 : Option;SourceNo@1002 : Code[20]);
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
    END;

    LOCAL PROCEDURE AssignItemTrackingOnPurchLines@391(DocumentNo@1004 : Code[20]);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDSET;

      REPEAT
        LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignTwoLotNo); // Enqueue for ItemTrackingLinesPageHandler
        PurchaseLine.OpenItemTrackingLines;
      UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CertifyProductionBOMHeader@112(VAR ProductionBOMHeader@1000 : Record 99000771);
    BEGIN
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CarryOutActionMsgOnRequisitionWorksheet@255(ItemNo@1001 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      FindRequisitionLine(RequisitionLine,ItemNo);
      RequisitionLine.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      RequisitionLine.MODIFY(TRUE);
      LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
    END;

    LOCAL PROCEDURE CalcRegenPlanForSalesOrderAndVerifyBinCode@312(LocationCode@1015 : Code[10];ParentItemNo@1016 : Code[20];RequsitionLineBinCode@1012 : Code[20];PalnningComponentBinCode@1008 : Code[20]);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      CreateAndReleaseSalesOrder(
        SalesHeader,'',ParentItemNo,LibraryRandom.RandInt(10),LocationCode,'',FALSE,ReservationMode::" ");

      RunCalculateRegenerativePlan(ParentItemNo,LocationCode,WORKDATE);
      VerifyBinCodeOnReqLineAndPlanningComponent(ParentItemNo,RequsitionLineBinCode,PalnningComponentBinCode);
    END;

    LOCAL PROCEDURE CorrectionQuantityForLotInReportServiceShipment@382(UndoOption@1004 : Option);
    VAR
      Item@1007 : Record 27;
      SalesReceivablesSetup@1003 : Record 311;
      ItemLedgerEntry@1000 : Record 32;
      LotNo@1002 : ARRAY [3] OF Code[20];
      DocumentNo@1005 : Code[20];
      Quantity@1001 : ARRAY [3] OF Decimal;
      i@1017 : Integer;
    BEGIN
      // Test to verify Correction Quantity is correct for Lot tracking line in Report 5913 (Service - Shipment)

      // Setup: Create and post a Purchase Order with 2 lines with different Lot Tracking
      // 1st Line: Quantity[2], Lot[2]
      // 2nd Line: Quantity[2], Lot[3]
      Initialize;
      SalesReceivablesSetup.GET;
      UpdateSalesReceivableSetup(SalesReceivablesSetup."Credit Warnings"::"No Warning",FALSE);
      PostPurchaseOrderWithTwoLot(Item,Quantity,LotNo,TRUE,FALSE);

      // Create and post a Service Order, Service lines with 2 Lot Tracking selected from previous Lot Nos.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::PartialAssignManualTwoLotNo); // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(LotNo[2]);
      LibraryVariableStorage.Enqueue(LotNo[3]);

      CASE UndoOption OF
        UndoType::UndoShipment:
          BEGIN
            DocumentNo := CreateAndPostServiceDocumentWithLotTracking(Item."No.",Quantity[2] * 2,TRUE,FALSE,FALSE); // Ship=TRUE,Consume=FALSE,Invoice=FALSE
            UndoShipmentForService(DocumentNo);
            VerifyItemLedgerEntryForCorrection(ItemLedgerEntry."Entry Type"::Sale,Item."No.",Quantity[2] / 2,TRUE);
          END;
        UndoType::UndoConsumption:
          BEGIN
            DocumentNo := CreateAndPostServiceDocumentWithLotTracking(Item."No.",Quantity[2] * 2,TRUE,TRUE,FALSE); // Ship=TRUE,Consume=TRUE,Invoice=FALSE
            UndoConsumptionForService(DocumentNo);
            VerifyItemLedgerEntryForCorrection(ItemLedgerEntry."Entry Type"::"Negative Adjmt.",Item."No.",Quantity[2] / 2,TRUE);
          END;
      END;

      // Exercise: Run Service Shipment Report.
      RunServiceShipmentReport(FALSE,TRUE,TRUE,DocumentNo); // ShowInternalInfo=FALSE,ShowCorrectionLine=TRUE,ShowLotSerialNoAppendix=TRUE

      // Verify: Verify Quantity and "Correction" Quantity are correct for the Lot Nos. in Report.
      LibraryReportDataset.LoadDataSetFile;
      FOR i := 2 TO 3 DO
        VerifyUndoTrackingQuantity('TrackingSpecBufLotNo',LotNo[i],'TrackingSpecBufQty',Quantity[i] / 2);

      // TearDown: Roll Back Sales & Receivables Setup
      UpdateSalesReceivableSetup(SalesReceivablesSetup."Credit Warnings",SalesReceivablesSetup."Stockout Warning");
    END;

    LOCAL PROCEDURE CreateRoutingSetupWithWorkCenter@309(VAR RoutingLine@1003 : Record 99000764;VAR WorkCenter@1000 : Record 99000754;LocationCode@1002 : Code[10]);
    VAR
      RoutingHeader@1001 : Record 99000763;
    BEGIN
      CreateWorkCenter(WorkCenter);
      UpdateLocationOnWorkCenter(WorkCenter,LocationCode);
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);

      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'',
        COPYSTR(
          LibraryUtility.GenerateRandomCode(RoutingLine.FIELDNO("Operation No."),DATABASE::"Routing Line"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Routing Line",RoutingLine.FIELDNO("Operation No."))),
        RoutingLine.Type::"Work Center",WorkCenter."No.");
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationWithFromProdBinCode@547(VAR Location@1000 : Record 14);
    VAR
      Bin@1001 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY;
      LibraryWarehouse.CreateBin(Bin,Location.Code,LibraryUtility.GenerateGUID,'','');
      Location.VALIDATE("From-Production Bin Code",Bin.Code);
      Location.MODIFY;
    END;

    LOCAL PROCEDURE CreateDefaultBinContent@308(VAR BinContent@1000 : Record 7302;ItemNo@1002 : Code[20];LocationCode@1005 : Code[10];MinQty@1004 : Decimal;MaxQty@1003 : Decimal);
    VAR
      Bin@1001 : Record 7354;
      Item@1006 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      LibraryWarehouse.CreateBin(Bin,LocationCode,LibraryUtility.GenerateGUID,'','');
      LibraryWarehouse.CreateBinContent(
        BinContent,Bin."Location Code",Bin."Zone Code",Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      WITH BinContent DO BEGIN
        VALIDATE("Bin Ranking",Bin."Bin Ranking");
        VALIDATE(Fixed,TRUE);
        VALIDATE(Default,TRUE);
        VALIDATE("Min. Qty.",MinQty);
        VALIDATE("Max. Qty.",MaxQty);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateInvtPickFromRPOUsingFirmPlannedProdOrder@223(VAR ProductionOrder@1003 : Record 5405);
    BEGIN
      LibraryManufacturing.ChangeStatusFirmPlanToReleased(
        ProductionOrder."No.",ProductionOrder.Status::"Firm Planned",ProductionOrder.Status::Released);
      ProductionOrder.SETRANGE(Status,ProductionOrder.Status::Released);
      ProductionOrder.SETRANGE("Source No.",ProductionOrder."Source No.");
      ProductionOrder.FINDFIRST;
      LibraryVariableStorage.Enqueue(InvtPickActivitiesCreatedTxt);  // Enqueue for CreateInventoryPutAwayPickHandler.
      ProductionOrder.CreateInvtPutAwayPick;
    END;

    LOCAL PROCEDURE CreateItemWithRepSysAssembly@225(VAR Item@1000 : Record 27);
    BEGIN
      CreateItemWithLotItemTrackingCode(Item,TRUE,'');
      UpdateItemWithReplenishmentSystem(Item);
    END;

    LOCAL PROCEDURE CreateItemWithStandardCost@290(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Costing Method",Item."Costing Method"::Standard);
      Item.VALIDATE("Standard Cost",LibraryRandom.RandDec(100,2));
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSerialItemWithRepSysAssembly@274(VAR Item@1000 : Record 27);
    BEGIN
      CreateItemWithSerialItemTrackingCodeUsingStrictExpiration(Item,FALSE);
      UpdateItemWithReplenishmentSystem(Item);
    END;

    LOCAL PROCEDURE CreateLotForLotSKUWithSafetyStock@412(LocationCode@1003 : Code[10];ItemNo@1000 : Code[20];Quantity@1001 : Decimal);
    VAR
      StockkeepingUnit@1002 : Record 5700;
    BEGIN
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,LocationCode,ItemNo,'');
      StockkeepingUnit.VALIDATE("Reordering Policy",StockkeepingUnit."Reordering Policy"::"Lot-for-Lot");
      StockkeepingUnit.VALIDATE("Safety Stock Quantity",Quantity);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndCertifyBOMWithMultipleLines@188(VAR ProductionBOMHeader@1000 : Record 99000771;UnitOfMeasureCode@1002 : Code[10];ComponentItemNo@1003 : Code[20];ComponentItemNo2@1007 : Code[20];VariantCode@1005 : Code[10]);
    VAR
      ProductionBOMLine@1001 : Record 99000772;
    BEGIN
      CreateProductionBOM(ProductionBOMHeader,ProductionBOMLine,UnitOfMeasureCode,ComponentItemNo,LibraryRandom.RandInt(10));
      CreateProductionBOMLine(ProductionBOMHeader,ComponentItemNo2,VariantCode);
      CertifyProductionBOMHeader(ProductionBOMHeader);
    END;

    LOCAL PROCEDURE CreateAndCertifyBOM@94(VAR ProductionBOMHeader@1001 : Record 99000771;VAR ProductionBOMLine@1002 : Record 99000772;UnitOfMeasureCode@1000 : Code[10];ComponentItemNo@1003 : Code[20];QuantityPer@1006 : Decimal);
    BEGIN
      CreateProductionBOM(ProductionBOMHeader,ProductionBOMLine,UnitOfMeasureCode,ComponentItemNo,QuantityPer);
      CertifyProductionBOMHeader(ProductionBOMHeader);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLineWithItemTracking@134(LocationCode@1001 : Code[10];BinCode@1008 : Code[20];ItemUnitOfMeasure@1009 : Code[10];ItemTrackingMode@1002 : ' ,AssignLotNo,SelectEntries,AssignSerialNo,ApplyFromItemEntry,AssignAutoSerialNo,AssignAutoLotAndSerialNo';ItemNo@1003 : Code[20];Quantity@1005 : Decimal;ExpirationDate@1004 : Date;DifferentExpirationDate@1006 : Boolean;UpdateLotNo@1010 : Boolean) LotNo : Code[20];
    VAR
      ItemJournalLine@1000 : Record 83;
      ReservationEntry@1011 : Record 337;
      DequeueVariable@1007 : Variant;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,ItemNo,LocationCode,Quantity,WORKDATE,BinCode,ItemUnitOfMeasure);
      LibraryVariableStorage.Enqueue(ItemTrackingMode);  // Enqueue for ItemTrackingLinesPageHandler.
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      UpdateExpirationDateOnReservationEntry(ItemNo,ExpirationDate,DifferentExpirationDate);
      IF UpdateLotNo THEN BEGIN
        LotNo := LibraryUtility.GenerateGUID;
        ReservationEntry.SETRANGE("Item No.",ItemNo);
        ReservationEntry.MODIFYALL("Lot No.",LotNo,TRUE);
      END;
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      IF ItemTrackingMode = ItemTrackingMode::AssignLotNo THEN BEGIN
        LibraryVariableStorage.Dequeue(DequeueVariable);
        LotNo := DequeueVariable;
      END;
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLineWithManualLotNo@180(VAR ItemJournalLine@1000 : Record 83;ItemNo@1003 : Code[20];LocationCode@1001 : Code[10];Quantity@1005 : Decimal;PostingDate@1004 : Date;LotNo@1008 : Code[20];Post@1006 : Boolean;ItemUnitOfMeasure@1007 : Code[10]);
    BEGIN
      CreateItemJournalLine(ItemJournalLine,ItemNo,LocationCode,Quantity,PostingDate,'',ItemUnitOfMeasure);  // Use Blank value for Bin Code.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignManualLotNo);  // Enqueue for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(LotNo);  // Enqueue for ItemTrackingLinesPageHandler.
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      IF Post THEN
        LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderAsReceive@163(ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      CreateAndReleasePurchaseOrderWithItemTracking(PurchaseHeader,ItemNo,LocationCode,Quantity,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post as Receive.
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrder@144(VAR Customer@1001 : Record 18;VAR Item@1002 : Record 27;LocationCode@1004 : Code[10];Quantity@1003 : Decimal);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateCustomer(Customer);
      CreateAndReleaseSalesOrder(SalesHeader,Customer."No.",Item."No.",Quantity,LocationCode,'',FALSE,ReservationMode::" ");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);  // Post as Ship and Invoice.
    END;

    LOCAL PROCEDURE CreateAndPostServiceDocumentWithLotTracking@335(ItemNo@1005 : Code[20];Quantity@1004 : Decimal;Ship@1002 : Boolean;Consume@1001 : Boolean;Invoice@1000 : Boolean) : Code[20];
    VAR
      ServiceHeader@1006 : Record 5900;
      ServiceLine@1003 : Record 5902;
    BEGIN
      CreateServiceDocumentAndUpdateServiceLine(ServiceLine,ItemNo,LibrarySales.CreateCustomerNo,Quantity,Consume);
      ServiceLine.OpenItemTrackingLines;
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,Ship,Consume,Invoice);
      EXIT(ServiceHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndPostTransferOrderAsShip@137(VAR TransferHeader@1000 : Record 5740;FromLocationCode@1001 : Code[10];ToLocationCode@1002 : Code[10];ItemNo@1003 : Code[20];Quantity@1004 : Decimal;Tracking@1005 : Boolean;PostingDate@1006 : Date;ShipmentDate@1008 : Date;Post@1007 : Boolean);
    BEGIN
      CreateAndReleaseTransferOrder(TransferHeader,FromLocationCode,ToLocationCode,ItemNo,'',Quantity,'',PostingDate,ShipmentDate);
      IF Tracking THEN
        UpdateItemTrackingOnTransferLine(TransferHeader."No.");
      IF Post THEN
        LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);  // Post as Ship.
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceiptFromPurchaseOrder@97(PurchaseHeader@1000 : Record 38;ItemTracking@1002 : Boolean;ItemTrackingMode@1003 : ' ,AssignLotNo,SelectEntries,AssignSerialNo,ApplyFromItemEntry,AssignAutoSerialNo,AssignAutoLotAndSerialNo');
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      IF ItemTracking THEN
        OpenWhseReceiptItemTrackingLines(WarehouseReceiptLine,ItemTrackingMode);
      PostWarehouseReceipt(WarehouseReceiptLine."No.");
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceiptFromTransferOrder@140(VAR TransferHeader@1000 : Record 5740);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromTO(TransferHeader);
      LibraryVariableStorage.Enqueue(STRSUBSTNO(TransferOrderDeletedTxt,TransferHeader."No."));  // Enqueue for MessageHandler.
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Inbound Transfer",TransferHeader."No.");
      PostWarehouseReceipt(WarehouseReceiptLine."No.");
    END;

    LOCAL PROCEDURE CreateAndRefreshFirmPlannedProductionOrderUsingLot@186(VAR ProductionOrder@1001 : Record 5405;ItemNo@1008 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10];LocationCode2@1004 : Code[10];UnitOfMeasureCode@1006 : Code[10]);
    VAR
      ProdOrderComponent@1005 : Record 5407;
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.",Quantity,LocationCode,WORKDATE);
      CreateProductionOrderComponent(ProdOrderComponent,ProductionOrder,ItemNo,UnitOfMeasureCode,LocationCode2);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectEntries);  // Enqueue for ItemTrackingPageHandler.
      ProdOrderComponent.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@26(VAR ProductionOrder@1002 : Record 5405;Status@1005 : Option;ItemNo@1000 : Code[20];Quantity@1001 : Decimal;LocationCode@1003 : Code[10];DueDate@1004 : Date);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Due Date",DueDate);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndRefreshMultipleProdOrdersAfterPostItemJnl@215(VAR ItemJournalLine@1001 : Record 83;Quantity@1003 : Decimal;LotNo@1008 : Code[20];LocationCode@1002 : Code[10];LocationCode2@1009 : Code[10]);
    VAR
      ParentItem@1000 : Record 27;
      ProductionOrder@1006 : Record 5405;
      ComponentItem@1005 : Record 27;
      QuantityPer@1004 : Decimal;
    BEGIN
      QuantityPer := CreateLotItemWithProductionBOMAndSKU(ParentItem,ComponentItem,LocationCode,LocationCode2);

      // Calculated value of Quantity required for test.
      CreateAndPostItemJournalLineWithManualLotNo(
        ItemJournalLine,ComponentItem."No.",LocationCode,Quantity * QuantityPer * 2,WORKDATE,LotNo,TRUE,
        ComponentItem."Base Unit of Measure");  // TRUE for posting.
      CreateAndPostItemJournalLineWithManualLotNo(
        ItemJournalLine,ComponentItem."No.",LocationCode2,ItemJournalLine.Quantity + LibraryRandom.RandInt(50),
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE),LotNo,TRUE,
        ComponentItem."Base Unit of Measure");  // TRUE for posting.
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ParentItem."No.",Quantity,LocationCode,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',ItemJournalLine."Posting Date"));
      CreateAndRefreshProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ParentItem."No.",Quantity,LocationCode,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',ProductionOrder."Due Date"));
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseReturnOrder@71(VAR PurchaseHeader@1000 : Record 38;ItemNo@1002 : Code[20];LocationCode@1006 : Code[10];Quantity@1005 : Decimal;VariantCode@1001 : Code[10]);
    BEGIN
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",ItemNo,LocationCode,Quantity,VariantCode,FALSE);  // Use Tracking as FALSE.
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithItemTracking@90(VAR PurchaseHeader@1000 : Record 38;ItemNo@1002 : Code[20];LocationCode@1006 : Code[10];Quantity@1005 : Decimal;UseTracking@1001 : Boolean);
    BEGIN
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,ItemNo,LocationCode,Quantity,'',UseTracking);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithMultipleTrackingLines@310(VAR PurchaseHeader@1002 : Record 38;VAR Item@1004 : Record 27;Quantity@1001 : Decimal;VAR LotNo@1005 : ARRAY [4] OF Code[10]);
    VAR
      i@1007 : Integer;
    BEGIN
      CreateItemWithLotItemTrackingCode(Item,TRUE,LibraryUtility.GetGlobalNoSeriesCode); // Taking TRUE for Lot.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLineWithAssignLotNo(PurchaseHeader,LotNo[1],Item."No.",LocationWhite.Code,Quantity,'',TRUE); // Create 1st line.
      LotNo[2] := LotNo[1];
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignManualLotNo); // Enqueue for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(LotNo[2]);
      CreatePurchaseLine(PurchaseHeader,Item."No.",LocationWhite.Code,Quantity,'','',TRUE); // Create 2nd Line.
      FOR i := 3 TO 4 DO
        CreatePurchaseLineWithAssignLotNo(PurchaseHeader,LotNo[i],Item."No.",LocationWhite.Code,Quantity,'',TRUE); // Create 3rd and 4th lines.
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithTwoLotItemTracking@351(VAR PurchaseHeader@1002 : Record 38;VAR Item@1004 : Record 27;VAR Item2@1003 : Record 27;Quantity@1001 : Decimal);
    BEGIN
      CreateItemWithLotItemTrackingCode(Item,TRUE,LibraryUtility.GetGlobalNoSeriesCode);  // Taking TRUE for Lot.
      CreateItemWithLotItemTrackingCode(Item2,TRUE,LibraryUtility.GetGlobalNoSeriesCode);  // Taking TRUE for Lot.

      CreatePurchaseDocument(
        PurchaseHeader,PurchaseHeader."Document Type"::Order,Item."No.",LocationWhite.Code,Quantity,'',FALSE);  // Create 1st Line
      CreatePurchaseLine(PurchaseHeader,Item2."No.",LocationWhite.Code,Quantity,'','',FALSE); // Create 2nd Line
      AssignItemTrackingOnPurchLines(PurchaseHeader."No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithMultipleUOMAndLotTracking@491(VAR PurchaseHeader@1002 : Record 38;VAR Item@1004 : Record 27;Quantity@1001 : ARRAY [3] OF Decimal;VAR UOMCode@1008 : ARRAY [3] OF Code[10];VAR LotNo@1005 : ARRAY [4] OF Code[20];VAR QtyPerUOM@1009 : Decimal;LocationCode@1003 : Code[10]);
    VAR
      ItemUnitOfMeasure@1000 : Record 5404;
      i@1007 : Integer;
    BEGIN
      CreateItemWithLotItemTrackingCode(Item,TRUE,LibraryUtility.GetGlobalNoSeriesCode); // Taking TRUE for Lot.
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      QtyPerUOM := ItemUnitOfMeasure."Qty. per Unit of Measure";
      UOMCode[1] := ItemUnitOfMeasure.Code;
      UOMCode[2] := '';
      UOMCode[3] := '';

      FOR i := 1 TO 3 DO
        IF Quantity[i] <> 0 THEN BEGIN
          LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignManualLotNo); // Enqueue for ItemTrackingLinesPageHandler.
          LibraryVariableStorage.Enqueue(LotNo[i]);
          CreatePurchaseLine(PurchaseHeader,Item."No.",LocationCode,Quantity[i],'',UOMCode[i],TRUE);
        END;
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithSelectLotItemTracking@367(VAR SalesHeader@1000 : Record 36;VAR Item@1004 : Record 27;VAR Item2@1003 : Record 27;Quantity@1002 : Decimal);
    VAR
      ItemNo@1006 : ARRAY [4] OF Code[20];
      i@1007 : Integer;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');

      // The quantity and order for lines is very important for this case
      ItemNo[1] := Item."No.";
      ItemNo[2] := Item2."No.";
      ItemNo[3] := Item2."No.";
      ItemNo[4] := Item."No.";
      FOR i := 1 TO 4 DO
        CreateSalesLineAndSelectItemTrackingCode(SalesHeader,ItemNo[i],Quantity / 5,LocationWhite.Code); // Here Quantity could be "Quantity / (4,8)" -  Denominator is greater 4 and less than 8

      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithSelectLotAndUpdateQtyOnTrackingLine@300(VAR SalesHeader@1000 : Record 36;ItemNo@1004 : Code[20];VAR LotNo@1003 : ARRAY [4] OF Code[10];Quantity@1002 : Decimal;UpdateQtyBase@1001 : Decimal);
    VAR
      SalesLine@1008 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');

      // Create three sales lines with select Lot No. and update Quantity(Base) for the 2nd sales line on Tracking Line.
      CreateSalesLineWithSelectLotOnTrackingLine(
        LotNo[1],'',SalesHeader,SalesLine,ItemNo,Quantity,LocationWhite.Code,ItemTrackingMode::SelectEntries);
      CreateSalesLineWithSelectLotOnTrackingLine(
        LotNo[2],LotNo[3],SalesHeader,SalesLine,ItemNo,2 * Quantity,
        LocationWhite.Code,ItemTrackingMode::SelectEntriesForMultipleLines); // 2 * Quantity is the sum quantity of the 2nd and 3rd purchase line.
      UpdateQtyBaseOnTrackingLines(SalesLine,UpdateQtyBase);
      UpdateQtyBaseOnTrackingLines(SalesLine,Quantity);
      CreateSalesLineWithSelectLotOnTrackingLine(LotNo[4],'',SalesHeader,
        SalesLine,ItemNo,Quantity,LocationWhite.Code,ItemTrackingMode::SelectEntries);

      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrder@139(VAR SalesHeader@1000 : Record 36;CustomerNo@1006 : Code[20];ItemNo@1004 : Code[20];Quantity@1003 : Decimal;LocationCode@1002 : Code[10];VariantCode@1001 : Code[10];ItemTracking@1005 : Boolean;ReservationMode@1007 : Option);
    BEGIN
      CreateSalesDocument(
        SalesHeader,SalesHeader."Document Type"::Order,CustomerNo,ItemNo,Quantity,LocationCode,VariantCode,ItemTracking,
        ReservationMode);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithMultipleSalesLines@273(VAR SalesHeader@1000 : Record 36;CustomerNo@1006 : Code[20];ItemNo@1004 : Code[20];ItemNo2@1001 : Code[20];Quantity@1003 : Decimal;Quantity2@1005 : Decimal;LocationCode@1002 : Code[10]);
    VAR
      SalesLine@1007 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo2,Quantity2);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrderWithAssemblyItem@406(VAR SalesHeader@1002 : Record 36;ItemNo@1003 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(STRSUBSTNO(BeforeWorkDateMsg,WORKDATE));
      LibraryVariableStorage.Enqueue(STRSUBSTNO(BeforeWorkDateMsg,WORKDATE));
      CreateAndReleaseSalesOrder(
        SalesHeader,LibrarySales.CreateCustomerNo,ItemNo,LibraryRandom.RandInt(10),LocationBlue.Code,'',FALSE,ReservationMode::" ");
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesCreditMemo@100(VAR SalesHeader@1000 : Record 36;CustomerNo@1005 : Code[20];ItemNo@1004 : Code[20];Quantity@1003 : Decimal;LocationCode@1002 : Code[10]);
    BEGIN
      CreateSalesDocument(
        SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustomerNo,ItemNo,Quantity,LocationCode,'',TRUE,ReservationMode::" ");  // Use Tracking as TRUE.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrder@66(VAR TransferHeader@1001 : Record 5740;FromLocation@1003 : Code[10];ToLocation@1002 : Code[10];ItemNo@1005 : Code[20];ItemNo2@1000 : Code[20];Quantity@1006 : Decimal;VariantCode@1004 : Code[10];PostingDate@1007 : Date;ShipmentDate@1008 : Date);
    BEGIN
      CreateTransferHeaderWithShipmentAndPostingDate(TransferHeader,FromLocation,ToLocation,PostingDate,ShipmentDate);
      CreateTransferLine(TransferHeader,ItemNo,Quantity,'');
      IF VariantCode <> '' THEN
        CreateTransferLine(TransferHeader,ItemNo2,Quantity,VariantCode);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseWarehouseInternalPickWithMultipleLines@22(LocationCode@1002 : Code[10];BinCode@1009 : Code[20];ItemNo@1003 : Code[20];ItemNo2@1004 : Code[20];Quantity@1005 : Decimal;VariantCode@1006 : Code[10];VariantCode2@1007 : Code[10]);
    VAR
      WhseInternalPickHeader@1001 : Record 7333;
      WhseInternalPickRelease@1008 : Codeunit 7315;
    BEGIN
      CreateWhseInternalPickHeader(WhseInternalPickHeader,LocationCode,BinCode);
      CreateWhseInternalPickLine(WhseInternalPickHeader,ItemNo,Quantity,VariantCode);
      CreateWhseInternalPickLine(WhseInternalPickHeader,ItemNo2,Quantity,VariantCode2);
      WhseInternalPickRelease.Release(WhseInternalPickHeader);
    END;

    LOCAL PROCEDURE CreateAndRegisterPutAwayFromPurchaseOrder@48(VAR Bin@1008 : Record 7354;ItemTrackingMode@1000 : ' ,AssignLotNo,SelectEntries,AssignSerialNo,ApplyFromItemEntry,AssignAutoSerialNo,AssignAutoLotAndSerialNo';ItemNo@1005 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal;ExpirationDate@1012 : Date;UseTracking@1007 : Boolean;DifferentExpirationDate@1011 : Boolean) LotNo : Code[20];
    VAR
      PurchaseHeader@1001 : Record 38;
      DequeueVariable@1006 : Variant;
    BEGIN
      CreateAndReleasePurchaseOrderWithItemTracking(PurchaseHeader,ItemNo,LocationCode,Quantity,UseTracking);
      IF ItemTrackingMode = ItemTrackingMode::AssignLotNo THEN BEGIN
        LibraryVariableStorage.Dequeue(DequeueVariable);
        LotNo := DequeueVariable;
      END;
      IF UseTracking THEN
        UpdateExpirationDateOnReservationEntry(ItemNo,ExpirationDate,DifferentExpirationDate);
      RegisterPutAwayFromPurchaseOrder(PurchaseHeader,Bin);
    END;

    LOCAL PROCEDURE CreateAndRegisterPutAwayFromPurchaseOrderNoExpiration@400(VAR Bin@1008 : Record 7354;ItemNo@1005 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal;UOM@1000 : Code[10];CleanQueue@1006 : Boolean);
    VAR
      PurchaseHeader@1001 : Record 38;
      DequeueVariable@1002 : Variant;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLine(PurchaseHeader,ItemNo,LocationCode,Quantity,'',UOM,TRUE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      IF CleanQueue THEN
        LibraryVariableStorage.Dequeue(DequeueVariable); // Enqueued in ItemTrackingLinesPageHandler
      RegisterPutAwayFromPurchaseOrder(PurchaseHeader,Bin);
    END;

    LOCAL PROCEDURE RegisterPutAwayFromPurchaseOrder@402(VAR PurchaseHeader@1009 : Record 38;VAR Bin@1008 : Record 7354);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,FALSE,ItemTrackingMode::" ");
      UpdateZoneAndBinCodeOnWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,PurchaseHeader."No.",Bin);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE CreateAndRegisterSplitedPutAwayFromReleasedPurchaseOrder@303(PurchaseHeader@1000 : Record 38;LotNo@1002 : Code[10];SplitQty@1003 : Decimal);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,FALSE,ItemTrackingMode::" ");

      // Find Put-away Place line
      FindWarehouseActivityLineWithActionType(WarehouseActivityLine,'',LotNo,WarehouseActivityLine."Source Document"::"Purchase Order",
        PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place);

      // Split Place lines and place item into different bins
      SplitPutAwayLineAndUpdateZoneCodeAndBinCodeForPlace(WarehouseActivityLine,SplitQty);

      // Register Put Away.
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromSalesOrder@67(VAR SalesHeader@1004 : Record 36;ItemNo@1003 : Code[20];Quantity@1002 : Decimal;LocationCode@1001 : Code[10];ItemTracking@1000 : Boolean;ReservationMode@1006 : Option);
    VAR
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      CreatePickFromSalesOrder(SalesHeader,'',ItemNo,Quantity,LocationCode,ItemTracking,ReservationMode);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromSalesOrderAfterUpdateZoneAndBinOnPickLine@165(VAR SalesHeader@1001 : Record 36;Bin@1006 : Record 7354;ItemNo@1000 : Code[20];LocationCode@1003 : Code[10];Quantity@1002 : Decimal);
    VAR
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      CreatePickFromSalesOrder(SalesHeader,'',ItemNo,Quantity,LocationCode,FALSE,ReservationMode::" ");
      UpdateZoneAndBinCodeOnWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",WarehouseActivityLine."Activity Type"::Pick,
        WarehouseActivityLine."Action Type"::Take,SalesHeader."No.",Bin);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromPurchaseReturnOrder@84(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal;VariantCode@1004 : Code[10]);
    VAR
      WarehouseActivityLine@1006 : Record 5767;
      WarehouseShipmentLine@1005 : Record 7321;
    BEGIN
      CreateAndReleasePurchaseReturnOrder(PurchaseHeader,ItemNo,LocationCode,Quantity,VariantCode);
      CreateWarehouseShipmentWithGetSourceDocument(LocationCode,FALSE,FALSE,TRUE,ItemNo,ItemNo);  // Taking TRUE for Purchase Return Orders.
      CreatePickFromWarehouseShipment(WarehouseShipmentLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.");
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Return Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromProductionOrder@68(VAR ProductionOrder@1000 : Record 5405;Register@1002 : Boolean);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      ProductionOrder.SetHideValidationDialog(TRUE);
      ProductionOrder.CreatePick(USERID,0,FALSE,FALSE,FALSE);  // SetBreakBulkFilter, DoNotFillQtyToHandle, PrintDocument as FALSE.
      IF Register THEN
        RegisterWarehouseActivity(
          WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
          WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromTransferOrder@93(VAR TransferHeader@1004 : Record 5740;FromLocation@1005 : Code[10];ToLocation@1002 : Code[10];ItemNo@1003 : Code[20];ItemNo2@1006 : Code[20];Quantity@1001 : Decimal;VariantCode@1000 : Code[10]);
    VAR
      WarehouseActivityLine@1008 : Record 5767;
      WarehouseShipmentLine@1007 : Record 7321;
    BEGIN
      CreateAndReleaseTransferOrder(TransferHeader,FromLocation,ToLocation,ItemNo,ItemNo2,Quantity,VariantCode,WORKDATE,WORKDATE);
      CreateWarehouseShipmentWithGetSourceDocument(LocationWhite.Code,TRUE,FALSE,FALSE,ItemNo,ItemNo2);  // Taking TRUE for Transfer Orders.
      CreatePickFromWarehouseShipment(WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.");
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Outbound Transfer",TransferHeader."No.",
        WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE CreateAndUpdateStockKeepingUnit@179(ItemNo@1000 : Code[20];LocationCode@1005 : Code[10];LocationCode2@1006 : Code[10]);
    VAR
      StockkeepingUnit@1004 : Record 5700;
      Item@1001 : Record 27;
      SKUCreationMethod@1002 : 'Location,Variant,Location & Variant';
    BEGIN
      Item.SETRANGE("No.",ItemNo);
      Item.SETRANGE("Location Filter",LocationCode,LocationCode2);
      LibraryInventory.CreateStockKeepingUnit(Item,SKUCreationMethod::Location,FALSE,FALSE);
      UpdateStockKeepingUnit(
        LocationCode,ItemNo,StockkeepingUnit."Replenishment System"::Transfer,LocationCode2,
        StockkeepingUnit."Reordering Policy"::"Fixed Reorder Qty.",TRUE);  // Include Inventory as True.
      UpdateStockKeepingUnit(
        LocationCode2,ItemNo,StockkeepingUnit."Replenishment System"::Purchase,'',
        StockkeepingUnit."Reordering Policy"::"Lot-for-Lot",FALSE);  // Include Inventory as False.
    END;

    LOCAL PROCEDURE CreateAndUpdateBinOnProductionOrderComponent@230(VAR ProdOrderComponent@1004 : Record 5407;Location@1000 : Record 14;ProductionOrderNo@1005 : Code[20]);
    VAR
      Bin@1002 : Record 7354;
      Bin2@1003 : Record 7354;
    BEGIN
      Bin.GET(Location.Code,Location."From-Production Bin Code");
      LibraryWarehouse.CreateBin(Bin2,Bin."Location Code",LibraryUtility.GenerateGUID,Bin."Zone Code",Bin."Bin Type Code");
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrderNo);
      ProdOrderComponent.VALIDATE("Bin Code",Bin2.Code);
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBlanketSalesOrder@226(VAR SalesHeader@1000 : Record 36;ItemNo@1004 : Code[20]);
    BEGIN
      CreateSalesDocument(
        SalesHeader,SalesHeader."Document Type"::"Blanket Order",'',ItemNo,
        LibraryRandom.RandDec(10,2),'','',FALSE,ReservationMode::" ");
    END;

    LOCAL PROCEDURE CreateFullWarehouseSetup@60(VAR Location@1000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
    END;

    LOCAL PROCEDURE CreateInventoryPickFromSalesOrderUsingItemTracking@189(VAR SalesHeader@1001 : Record 36;ItemNo@1002 : Code[20];LocationCode@1005 : Code[10];Quantity@1003 : Decimal);
    VAR
      WarehouseActivityHeader@1006 : Record 5766;
    BEGIN
      LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectEntries);  // Enqueue for ItemTrackingLinesPageHandler.
      CreateAndReleaseSalesOrder(SalesHeader,'',ItemNo,Quantity,LocationCode,'',TRUE,ReservationMode::" ");
      LibraryVariableStorage.Enqueue(InvtPickCreatedTxt);  // Enqueue for MessageHandler.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Sales Order",SalesHeader."No.",FALSE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateInventoryPutAwayFromSalesReturnOrderAfterGetPostedDocumentLinesToReverse@147(VAR SalesHeader@1000 : Record 36;CustomerNo@1002 : Code[20]);
    VAR
      WarehouseActivityHeader@1001 : Record 5766;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",CustomerNo);
      SalesHeader.GetPstdDocLinesToRevere;
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryVariableStorage.Enqueue(InvtPutAwayCreatedTxt);  // Enqueue for MessageHandler.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseActivityHeader."Source Document"::"Sales Return Order",SalesHeader."No.",TRUE,FALSE,FALSE);  // Use True for Put Away.
    END;

    LOCAL PROCEDURE CreateProductionOrderWithItem@353(VAR ProductionOrder@1002 : Record 5405);
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);

      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,
        ProductionOrder."Source Type"::Item,Item."No.",LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreateItemJournalLine@207(VAR ItemJournalLine@1001 : Record 83;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal;PostingDate@1005 : Date;BinCode@1006 : Code[20];UnitOfMeasureCode@1000 : Code[10]);
    BEGIN
      UpdateNoSeriesOnItemJournalBatch(ItemJournalBatch,'');  // Use Blank No. Series.
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Purchase,ItemNo,
        Quantity);
      ItemJournalLine.VALIDATE("Posting Date",PostingDate);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      IF BinCode <> '' THEN
        ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@86(VAR ItemTrackingCode@1001 : Record 6502;Serial@1002 : Boolean;Lot@1003 : Boolean;StrictExpirationPosting@1000 : Boolean);
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,Serial,Lot);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",Serial);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",Lot);
      ItemTrackingCode.VALIDATE("Strict Expiration Posting",StrictExpirationPosting);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemTrackingLine@36(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLines."Serial No.".SETVALUE(LibraryUtility.GenerateGUID);
      ItemTrackingLines."Quantity (Base)".SETVALUE(1);  // Value required for Quantity.
    END;

    LOCAL PROCEDURE CreateItemWithRoutingAndProductionBOM@192(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20];RoutingNo@1002 : Code[20]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      WITH Item DO BEGIN
        VALIDATE("Replenishment System","Replenishment System"::"Prod. Order");
        VALIDATE("Reordering Policy","Reordering Policy"::Order);
        VALIDATE("Production BOM No.",ProductionBOMNo);
        VALIDATE("Routing No.",RoutingNo);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateAssemblyItemWithBOM@409(VAR ParentItem@1004 : Record 27;VAR ComponentItem@1003 : Record 27);
    VAR
      BOMComponent@1000 : Record 90;
    BEGIN
      LibraryInventory.CreateItem(ParentItem);
      ParentItem.VALIDATE("Replenishment System",ParentItem."Replenishment System"::Assembly);
      ParentItem.VALIDATE("Reordering Policy",ParentItem."Reordering Policy"::Order);
      ParentItem.MODIFY(TRUE);
      LibraryInventory.CreateItem(ComponentItem);
      LibraryManufacturing.CreateBOMComponent(
        BOMComponent,ParentItem."No.",BOMComponent.Type::Item,ComponentItem."No.",1,ComponentItem."Base Unit of Measure");
    END;

    LOCAL PROCEDURE CreateItemWithDefaultDimension@155(VAR DefaultDimension@1003 : Record 352;VAR DimensionValue@1002 : Record 349);
    VAR
      Item@1000 : Record 27;
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      LibraryInventory.CreateItem(Item);
      GeneralLedgerSetup.GET;
      LibraryDimension.CreateDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 1 Code");
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",DimensionValue."Dimension Code",DimensionValue.Code);
      LibraryDimension.CreateDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 1 Code");
    END;

    LOCAL PROCEDURE CreateItemWithLotAndSerialItemTrackingCodeUsingStrictExpiration@114(VAR Item@1001 : Record 27);
    VAR
      LotAndSerialWithStrictExpirationItemTrackingCode@1000 : Record 6502;
    BEGIN
      CreateItemTrackingCode(LotAndSerialWithStrictExpirationItemTrackingCode,TRUE,TRUE,TRUE);
      LibraryInventory.CreateTrackedItem(
        Item,LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,
        LotAndSerialWithStrictExpirationItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateItemWithLotItemTrackingCode@44(VAR Item@1003 : Record 27;Lot@1000 : Boolean;LotNos@1001 : Code[10]);
    VAR
      ItemTrackingCode@1002 : Record 6502;
    BEGIN
      CreateItemTrackingCode(ItemTrackingCode,FALSE,Lot,FALSE);
      LibraryInventory.CreateTrackedItem(Item,LotNos,'',ItemTrackingCode.Code);  // Taking blank for Serial Nos.
    END;

    LOCAL PROCEDURE CreateItemWithLotItemTrackingCodeUsingStrictExpiration@191(VAR Item@1001 : Record 27);
    VAR
      LotWithStrictExpirationItemTrackingCode@1000 : Record 6502;
    BEGIN
      CreateItemTrackingCode(LotWithStrictExpirationItemTrackingCode,FALSE,TRUE,TRUE);  // Use Lot with Strict Expiration.
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',LotWithStrictExpirationItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateItemWithProductionBOMWithMultipleLines@80(VAR ParentItem@1002 : Record 27;VAR ComponentItem@1001 : Record 27;VAR ComponentItem2@1004 : Record 27;VAR ItemVariant@1003 : Record 5401);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      CreateItemWithReplenishmentSystemAsProdOrder(ParentItem);
      CreateItemWithReplenishmentSystemAsProdOrder(ComponentItem);
      CreateItemWithReplenishmentSystemAsProdOrder(ComponentItem2);
      LibraryInventory.CreateItemVariant(ItemVariant,ComponentItem2."No.");
      CreateAndCertifyBOMWithMultipleLines(
        ProductionBOMHeader,ParentItem."Base Unit of Measure",ComponentItem."No.",ComponentItem2."No.",ItemVariant.Code);
      UpdateProductionBOMOnItem(ParentItem,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateItemWithProductionBOM@52(VAR ParentItem@1000 : Record 27;VAR ComponentItem@1001 : Record 27;VAR ProductionBOMLine@1003 : Record 99000772);
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
    BEGIN
      CreateItemWithReplenishmentSystem(ParentItem,ParentItem."Replenishment System"::"Prod. Order");
      CreateItemWithReplenishmentSystem(ComponentItem,ComponentItem."Replenishment System"::Purchase);
      UpdateReserveOnItem(ComponentItem);
      CreateAndCertifyBOM(
        ProductionBOMHeader,ProductionBOMLine,ParentItem."Base Unit of Measure",ComponentItem."No.",LibraryRandom.RandInt(10));
      UpdateProductionBOMOnItem(ParentItem,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateItemWithReplenishmentSystemAsProdOrder@206(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithSalesAndPurchaseUnitOfMeasure@143(VAR Item@1000 : Record 27);
    VAR
      ItemUnitOfMeasure@1001 : Record 5404;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      UpdatePurchaseUnitOfMeasureOnItem(Item,ItemUnitOfMeasure.Code);
      UpdateSalesUnitOfMeasureOnItem(Item,ItemUnitOfMeasure.Code);
    END;

    LOCAL PROCEDURE CreateItemWithSerialItemTrackingCodeUsingStrictExpiration@101(VAR Item@1001 : Record 27;StrictExpiration@1002 : Boolean);
    VAR
      SerialWithStrictExpirationItemTrackingCode@1000 : Record 6502;
    BEGIN
      CreateItemTrackingCode(SerialWithStrictExpirationItemTrackingCode,TRUE,FALSE,StrictExpiration);
      LibraryInventory.CreateTrackedItem(Item,'',LibraryUtility.GetGlobalNoSeriesCode,SerialWithStrictExpirationItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateItemWithVariant@16(VAR Item@1000 : Record 27;VAR ItemVariant@1001 : Record 5401);
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasure@7(VAR ItemUnitOfMeasure@1000 : Record 5404;ItemNo@1001 : Code[20]);
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,ItemNo,LibraryRandom.RandInt(10) + 1); // Value required for test.
    END;

    LOCAL PROCEDURE CreateItemWithReplenishmentSystem@88(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLotItemWithReplenishmentSystem@168(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option);
    BEGIN
      CreateItemWithLotItemTrackingCode(Item,TRUE,LibraryUtility.GetGlobalNoSeriesCode);  // Taking TRUE for Lot.
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLotItemWithProductionBOMAndSKU@227(VAR ParentItem@1000 : Record 27;VAR ComponentItem@1001 : Record 27;LocationCode@1005 : Code[10];LocationCode2@1006 : Code[10]) : Decimal;
    VAR
      ItemUnitOfMeasure@1002 : Record 5404;
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionBOMLine@1004 : Record 99000772;
      UnitOfMeasure@1007 : Record 204;
    BEGIN
      CreateLotItemWithReplenishmentSystem(ParentItem,ParentItem."Replenishment System"::"Prod. Order");
      CreateLotItemWithReplenishmentSystem(ComponentItem,ComponentItem."Replenishment System"::Purchase);
      CreateBaseUnitOfMeasure(UnitOfMeasure,ParentItem);
      CreateBaseUnitOfMeasure(UnitOfMeasure,ComponentItem);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,ParentItem."No.");
      CreateAndUpdateStockKeepingUnit(ComponentItem."No.",LocationCode,LocationCode2);
      CreateAndCertifyBOM(
        ProductionBOMHeader,ProductionBOMLine,ParentItem."Base Unit of Measure",ComponentItem."No.",
        ItemUnitOfMeasure."Qty. per Unit of Measure");
      UpdateProductionBOMOnItem(ParentItem,ProductionBOMHeader."No.");
      EXIT(ItemUnitOfMeasure."Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE CreateWMSLocationWithFEFOEnabled@365(VAR Location@1000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,3);
      Location.VALIDATE("Pick According to FEFO",TRUE);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMovementFromMovementWorksheetLine@23(WhseWorksheetName@1001 : Record 7327;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];ItemNo2@1004 : Code[20]);
    VAR
      WhseWorksheetLine@1000 : Record 7326;
    BEGIN
      FindWarehouseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationCode,ItemNo,ItemNo2);
      LibraryWarehouse.WhseSourceCreateDocument(WhseWorksheetLine,0,FALSE,FALSE,FALSE);  // Taking 0 for SortActivity.
    END;

    LOCAL PROCEDURE CreateMovementWithMovementWorksheetLine@117(VAR Bin@1001 : Record 7354;ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    VAR
      Bin2@1002 : Record 7354;
      WhseWorksheetLine@1000 : Record 7326;
      WhseWorksheetName@1005 : Record 7327;
    BEGIN
      LibraryWarehouse.CreateBin(Bin2,Bin."Location Code",LibraryUtility.GenerateGUID,Bin."Zone Code",Bin."Bin Type Code");
      LibraryWarehouse.CreateMovementWorksheetLine(WhseWorksheetLine,Bin,Bin2,ItemNo,'',Quantity);
      WhseWorksheetName.GET(WhseWorksheetLine."Worksheet Template Name",WhseWorksheetLine.Name,WhseWorksheetLine."Location Code");
      CreateMovementFromMovementWorksheetLine(WhseWorksheetName,Bin."Location Code",ItemNo,ItemNo);
    END;

    PROCEDURE CreateMovementWorksheetLine@370(VAR WhseWorksheetLine@1002 : Record 7326;Bin@1004 : Record 7354;ItemNo@1005 : Code[20];Quantity@1007 : Decimal);
    VAR
      WhseWorksheetTemplate@1001 : Record 7328;
      WhseWorksheetName@1000 : Record 7327;
    BEGIN
      LibraryWarehouse.SelectWhseWorksheetTemplate(WhseWorksheetTemplate,WhseWorksheetTemplate.Type::Movement);
      LibraryWarehouse.SelectWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,Bin."Location Code");
      LibraryWarehouse.CreateWhseWorksheetLine(
        WhseWorksheetLine,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,WhseWorksheetName."Location Code",0);
      WhseWorksheetLine.VALIDATE("Item No.",ItemNo);
      WhseWorksheetLine.VALIDATE("To Zone Code",Bin."Zone Code");
      WhseWorksheetLine.VALIDATE("To Bin Code",Bin.Code);
      WhseWorksheetLine.VALIDATE(Quantity,Quantity);
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePickFromSalesOrder@63(VAR SalesHeader@1001 : Record 36;CustomerNo@1008 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1005 : Code[10];ItemTracking@1004 : Boolean;ReservationMode@1007 : Option);
    VAR
      WarehouseShipmentLine@1006 : Record 7321;
    BEGIN
      IF ItemTracking THEN
        LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectEntries);  // Enqueue for ItemTrackingLinesPageHandler.
      CreateAndReleaseSalesOrder(SalesHeader,CustomerNo,ItemNo,Quantity,LocationCode,'',ItemTracking,ReservationMode);
      CreateWarehouseShipmentFromSalesHeader(SalesHeader);
      CreatePickFromWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreatePickFromPickWorksheet@50(WhseWorksheetName@1000 : Record 7327;ItemNo@1002 : Code[20];ItemNo2@1003 : Code[20];MaxNoOfLines@1004 : Integer);
    VAR
      WhseWorksheetLine@1001 : Record 7326;
    BEGIN
      FindWarehouseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,WhseWorksheetName."Location Code",ItemNo,ItemNo2);
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,0,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,WhseWorksheetName."Location Code",'',
        MaxNoOfLines,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);  // Taking 0 for Line No, MaxNoOfSourceDoc and SortPick.
    END;

    LOCAL PROCEDURE CreatePickFromWarehouseShipment@176(SourceDocument@1003 : Option;SourceNo@1002 : Code[20]);
    VAR
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,SourceDocument,SourceNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateProductionBOM@109(VAR ProductionBOMHeader@1001 : Record 99000771;VAR ProductionBOMLine@1000 : Record 99000772;UnitOfMeasureCode@1003 : Code[10];ItemNo@1002 : Code[20];QuantityPer@1006 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,UnitOfMeasureCode);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo,QuantityPer);
    END;

    LOCAL PROCEDURE CreateProductionBOMLine@18(VAR ProductionBOMHeader@1003 : Record 99000771;ComponentItemNo@1001 : Code[20];VariantCode@1002 : Code[10]);
    VAR
      ProductionBOMLine@1000 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ComponentItemNo,LibraryRandom.RandDec(10,2));
      ProductionBOMLine.VALIDATE("Variant Code",VariantCode);
      ProductionBOMLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionOrderComponent@195(VAR ProdOrderComponent@1002 : Record 5407;ProductionOrder@1000 : Record 5405;ItemNo@1003 : Code[20];ItemUnitOfMeasureCode@1004 : Code[10];LocationCode@1005 : Code[10]);
    VAR
      ProdOrderLine@1001 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
      LibraryManufacturing.CreateProductionOrderComponent(
        ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",ProdOrderLine."Line No.");
      ProdOrderComponent.VALIDATE("Item No.",ItemNo);
      ProdOrderComponent.VALIDATE("Quantity per",LibraryRandom.RandInt(10));  // Using Random for Quantity per.
      ProdOrderComponent.VALIDATE("Unit of Measure Code",ItemUnitOfMeasureCode);
      ProdOrderComponent.VALIDATE("Location Code",LocationCode);
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@287(VAR PurchaseHeader@1000 : Record 38;DocumentType@1001 : Option;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal;VariantCode@1005 : Code[10];UseTracking@1006 : Boolean);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,'');
      CreatePurchaseLine(PurchaseHeader,ItemNo,LocationCode,Quantity,VariantCode,'',UseTracking);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@70(VAR PurchaseHeader@1006 : Record 38;LocationCode@1003 : Code[10];ItemNo@1004 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,ItemNo,LocationCode,Quantity,'',FALSE);  // Use Tracking as FALSE.
    END;

    LOCAL PROCEDURE CreatePurchaseLine@72(VAR PurchaseHeader@1001 : Record 38;ItemNo@1002 : Code[20];LocationCode@1005 : Code[10];Quantity@1003 : Decimal;VariantCode@1006 : Code[10];UOM@1007 : Code[10];ItemTracking@1004 : Boolean);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Variant Code",VariantCode);
      IF UOM <> '' THEN
        PurchaseLine.VALIDATE("Unit of Measure Code",UOM);
      PurchaseLine.MODIFY(TRUE);
      IF ItemTracking THEN
        PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithAssignLotNo@304(VAR PurchaseHeader@1006 : Record 38;VAR LotNo@1008 : Code[20];ItemNo@1005 : Code[20];LocationCode@1004 : Code[10];Quantity@1003 : Decimal;VariantCode@1002 : Code[10];ItemTracking@1001 : Boolean);
    VAR
      DequeueVar@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo); // Enqueue for ItemTrackingLinesPageHandler.
      CreatePurchaseLine(PurchaseHeader,ItemNo,LocationCode,Quantity,VariantCode,'',ItemTracking);
      LibraryVariableStorage.Dequeue(DequeueVar);
      LotNo := DequeueVar;
    END;

    LOCAL PROCEDURE CreateBlanketPurchaseOrder@265(VAR PurchaseHeader@1000 : Record 38;ItemNo@1002 : Code[20]);
    BEGIN
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseHeader."Document Type"::"Blanket Order",ItemNo,'',LibraryRandom.RandDec(10,2),'',FALSE);  // Use Tracking as FALSE.
    END;

    LOCAL PROCEDURE CreatePutAwayFromPostedWarehouseReceipt@133(ItemNo@1001 : Code[20]);
    VAR
      PostedWhseReceiptLine@1000 : Record 7319;
    BEGIN
      LibraryVariableStorage.Enqueue(PutAwayActivityTxt);  // Enqueue for MessageHandler.
      PostedWhseReceiptLine.SETRANGE("Item No.",ItemNo);
      PostedWhseReceiptLine.FINDFIRST;
      PostedWhseReceiptLine.CreatePutAwayDoc(PostedWhseReceiptLine,'');  // Use blank for Assigned ID.
    END;

    LOCAL PROCEDURE CreatePurchasingCode@211(DropShipment@1001 : Boolean;SpecialOrder@1002 : Boolean) PurchasingCode : Code[10];
    VAR
      Purchasing@1000 : Record 5721;
    BEGIN
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      IF DropShipment THEN
        Purchasing.VALIDATE("Drop Shipment",TRUE);
      IF SpecialOrder THEN
        Purchasing.VALIDATE("Special Order",TRUE);
      Purchasing.MODIFY(TRUE);
      PurchasingCode := Purchasing.Code
    END;

    LOCAL PROCEDURE CreatePurchaseQuote@266(VAR PurchaseHeader@1000 : Record 38;ItemNo@1002 : Code[20]);
    BEGIN
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseHeader."Document Type"::Quote,ItemNo,'',LibraryRandom.RandDec(10,2),'',FALSE);  // Use Tracking as FALSE.
    END;

    LOCAL PROCEDURE CreateRoutingSetup@212(VAR RoutingLine@1003 : Record 99000764;VAR WorkCenter@1000 : Record 99000754;VAR MachineCenter@1002 : Record 99000758) OperationNo : Code[10];
    VAR
      RoutingHeader@1001 : Record 99000763;
    BEGIN
      CreateWorkCenter(WorkCenter);
      LibraryManufacturing.CreateMachineCenter(MachineCenter,WorkCenter."No.",LibraryRandom.RandDec(100,2));
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'',
        COPYSTR(
          LibraryUtility.GenerateRandomCode(RoutingLine.FIELDNO("Operation No."),DATABASE::"Routing Line"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Routing Line",RoutingLine.FIELDNO("Operation No."))),
        RoutingLine.Type::"Machine Center",MachineCenter."No.");
      OperationNo := RoutingLine."Operation No.";
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'',
        COPYSTR(
          LibraryUtility.GenerateRandomCode(RoutingLine.FIELDNO("Operation No."),DATABASE::"Routing Line"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Routing Line",RoutingLine.FIELDNO("Operation No."))),
        RoutingLine.Type::"Work Center",WorkCenter."No.");
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocument@268(VAR SalesHeader@1000 : Record 36;DocumentType@1001 : Option;CustomerNo@1008 : Code[20];ItemNo@1002 : Code[20];Quantity@1007 : Decimal;LocationCode@1004 : Code[10];VariantCode@1005 : Code[10];UseTracking@1006 : Boolean;ReservationMode@1003 : Option);
    VAR
      SalesLine@1009 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      CreateSalesLine(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode,VariantCode,UseTracking,ReservationMode);
    END;

    LOCAL PROCEDURE CreateSalesLine@1(VAR SalesHeader@1005 : Record 36;VAR SalesLine@1000 : Record 37;ItemNo@1003 : Code[20];Quantity@1002 : Decimal;LocationCode@1004 : Code[10];VariantCode@1001 : Code[10];ItemTracking@1006 : Boolean;ReservationMode@1008 : ' ,ReserveFromCurrentLine,AutoReserve');
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Variant Code",VariantCode);
      SalesLine.MODIFY(TRUE);
      IF ItemTracking THEN
        SalesLine.OpenItemTrackingLines;
      IF ReservationMode <> ReservationMode::" " THEN BEGIN
        IF ReservationMode = ReservationMode::ReserveFromCurrentLine THEN
          LibraryVariableStorage.Enqueue(LibraryInventory.GetReservConfirmText);  // Enqueue for ConfirmHandler.
        LibraryVariableStorage.Enqueue(ReservationMode);  // Enqueue for ReservationPageHandler.
        SalesLine.ShowReservation;
      END;
    END;

    LOCAL PROCEDURE CreateSalesLineAndSelectItemTrackingCode@341(SalesHeader@1000 : Record 36;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10]);
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectEntries); // Enqueue for ItemTrackingLinesPageHandler
      SalesLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateSalesOrderWithPurchaseCode@210(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1003 : Record 37;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;DropShipment@1005 : Boolean;SpecialOrder@1004 : Boolean);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Purchasing Code",CreatePurchasingCode(DropShipment,SpecialOrder));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesQuote@222(VAR SalesHeader@1000 : Record 36;ItemNo@1004 : Code[20]);
    BEGIN
      CreateSalesDocument(
        SalesHeader,SalesHeader."Document Type"::Quote,'',ItemNo,LibraryRandom.RandDec(10,2),'',
        '',FALSE,ReservationMode::" ");
    END;

    LOCAL PROCEDURE CreateServiceDocument@330(VAR ServiceLine@1000 : Record 5902;DocumentType@1004 : Option;CustomerNo@1001 : Code[20];No@1003 : Code[20];Quantity@1005 : Decimal);
    VAR
      ServiceHeader@1006 : Record 5900;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,CustomerNo);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,No);
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2)); // Using Random value for Unit Cost.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceDocumentAndUpdateServiceLine@399(VAR ServiceLine@1000 : Record 5902;ItemNo@1004 : Code[20];CustomerNo@1001 : Code[20];Quantity@1006 : Decimal;PostConsume@1007 : Boolean);
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItem@1002 : Record 5940;
      ServiceItemLine@1005 : Record 5901;
    BEGIN
      CreateServiceDocument(ServiceLine,ServiceHeader."Document Type"::Order,CustomerNo,ItemNo,Quantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
      IF PostConsume THEN
        ServiceLine.VALIDATE("Qty. to Consume",Quantity / 2)
      ELSE
        ServiceLine.VALIDATE("Qty. to Ship",Quantity / 2);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferHeaderWithShipmentAndPostingDate@213(VAR TransferHeader@1000 : Record 5740;FromLocation@1002 : Code[10];ToLocation@1003 : Code[10];PostingDate@1004 : Date;ShipmentDate@1005 : Date);
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocation,ToLocation,LocationInTransit.Code);
      TransferHeader.VALIDATE("Posting Date",PostingDate);
      TransferHeader.VALIDATE("Shipment Date",ShipmentDate);
      TransferHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferOrderWithMultipleUOMAndLotTracking@385(VAR TransferHeader@1006 : Record 5740;FromLocationCode@1005 : Code[10];ToLocationCode@1004 : Code[10];ItemNo@1003 : Code[20];Quantity@1002 : ARRAY [3] OF Decimal;QtyPerUOM@1012 : Decimal;UOMCode@1000 : Code[10];LotNo@1009 : ARRAY [3] OF Code[20]);
    VAR
      TransferLine@1007 : Record 5741;
      Direction@1008 : 'Outbound,Inbound';
      Qty@1001 : Decimal;
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,LocationInTransit.Code);

      Qty := ROUND(Quantity[1] / LibraryRandom.RandIntInRange(3,5),1);
      CreateTransferLineWithUOM(TransferHeader,ItemNo,Qty,UOMCode);
      CreateTransferLineWithUOM(TransferHeader,ItemNo,(Quantity[1] - Qty) * QtyPerUOM + 2 * Quantity[1],'');

      FindTransferLine(TransferLine,TransferHeader."No.");
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignManualLotNo); // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(LotNo[1]);
      TransferLine.OpenItemTrackingLines(Direction::Outbound);
      TransferLine.NEXT;
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignManualTwoLotNo);  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(LotNo[1]);
      LibraryVariableStorage.Enqueue(LotNo[3]);
      LibraryVariableStorage.Enqueue(AvailabilityWarningsQst);  // Enqueue for ConfirmHandler.
      TransferLine.OpenItemTrackingLines(Direction::Outbound);
    END;

    LOCAL PROCEDURE CreateTransferOrderWithMultipleUOMAndReservation@322(VAR TransferHeader@1006 : Record 5740;FromLocationCode@1005 : Code[10];ToLocationCode@1004 : Code[10];ItemNo@1003 : Code[20];Quantity@1002 : ARRAY [3] OF Decimal;UOMCode@1000 : Code[10];ReservationMode@1011 : Option);
    VAR
      TransferLine@1007 : Record 5741;
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,LocationInTransit.Code);
      CreateTransferLineWithUOM(TransferHeader,ItemNo,Quantity[2],UOMCode);
      CreateTransferLineWithUOM(TransferHeader,ItemNo,Quantity[3],'');

      FindTransferLine(TransferLine,TransferHeader."No.");
      LibraryVariableStorage.Enqueue(ReservationMode); // Enqueue for ReservationPageHandler.
      TransferLine.ShowReservation;
    END;

    LOCAL PROCEDURE CreateTransferLineWithUOM@386(TransferHeader@1001 : Record 5740;ItemNo@1004 : Code[20];Quantity@1003 : Decimal;UOMCode@1002 : Code[10]);
    VAR
      TransferLine@1000 : Record 5741;
    BEGIN
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      IF UOMCode <> '' THEN BEGIN
        TransferLine.VALIDATE("Unit of Measure Code",UOMCode);
        TransferLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateTransferLine@11(VAR TransferHeader@1001 : Record 5740;ItemNo@1004 : Code[20];Quantity@1003 : Decimal;VariantCode@1002 : Code[10]);
    VAR
      TransferLine@1000 : Record 5741;
    BEGIN
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      TransferLine.VALIDATE("Variant Code",VariantCode);
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferRoute@178();
    VAR
      TransferRoute@1002 : Record 5742;
    BEGIN
      LibraryWarehouse.CreateTransferRoute(TransferRoute,LocationGreen.Code,LocationYellow.Code);
      TransferRoute.VALIDATE("In-Transit Code",LocationInTransit.Code);
      TransferRoute.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWorkCenter@216(VAR WorkCenter@1004 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenter(WorkCenter);
    END;

    LOCAL PROCEDURE CreateWhseInternalPickHeader@14(VAR WhseInternalPickHeader@1001 : Record 7333;LocationCode@1000 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      LibraryWarehouse.CreateWhseInternalPickHeader(WhseInternalPickHeader,LocationCode);
      WhseInternalPickHeader.VALIDATE("To Bin Code",BinCode);
      WhseInternalPickHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWhseInternalPickLine@20(VAR WhseInternalPickHeader@1000 : Record 7333;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;VariantCode@1004 : Code[10]);
    VAR
      WhseInternalPickLine@1001 : Record 7334;
    BEGIN
      LibraryWarehouse.CreateWhseInternalPickLine(WhseInternalPickHeader,WhseInternalPickLine,ItemNo,Quantity);
      WhseInternalPickLine.VALIDATE("Variant Code",VariantCode);
      WhseInternalPickLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptFromPurchaseOrder@115(VAR PurchaseHeader@1000 : Record 38;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,LocationCode,ItemNo,Quantity);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentWithGetSourceDocument@38(LocationCode@1001 : Code[10];OutboundTransfers@1006 : Boolean;SalesOrders@1005 : Boolean;PurchaseReturnOrders@1007 : Boolean;ItemNo@1002 : Code[20];ItemNo2@1004 : Code[20]);
    VAR
      WarehouseSourceFilter@1003 : Record 5771;
      WarehouseShipmentHeader@1000 : Record 7320;
    BEGIN
      CreateWarehouseShipmentHeaderWithLocation(WarehouseShipmentHeader,LocationCode);
      LibraryWarehouse.CreateWarehouseSourceFilter(WarehouseSourceFilter,WarehouseSourceFilter.Type::Outbound);
      WarehouseSourceFilter.VALIDATE("Outbound Transfers",OutboundTransfers);
      WarehouseSourceFilter.VALIDATE("Sales Orders",SalesOrders);
      WarehouseSourceFilter.VALIDATE("Purchase Return Orders",PurchaseReturnOrders);
      WarehouseSourceFilter.VALIDATE("Item No. Filter",ItemNo + '|' + ItemNo2);
      WarehouseSourceFilter.MODIFY(TRUE);
      LibraryWarehouse.GetSourceDocumentsShipment(WarehouseShipmentHeader,WarehouseSourceFilter,LocationCode);
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentFromSalesHeader@32(SalesHeader@1000 : Record 36);
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentHeaderWithLocation@76(VAR WarehouseShipmentHeader@1000 : Record 7320;LocationCode@1001 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",LocationCode);
      WarehouseShipmentHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseJournalLine@91(VAR WarehouseJournalLine@1004 : Record 7311;Bin@1003 : Record 7354;Item@1002 : Record 27;Quantity@1001 : Decimal;VariantCode@1000 : Code[10]);
    BEGIN
      WarehouseJournalSetup(Bin."Location Code");
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",
        Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
      WarehouseJournalLine.VALIDATE("Variant Code",VariantCode);
      WarehouseJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAssemblyItem@288(VAR Item@1000 : Record 27;AssemblyPolicy@1001 : Option);
    BEGIN
      // Use False for Update Unit Cost and blank for Variant Code.
      LibraryAssembly.SetupAssemblyItem(
        Item,Item."Costing Method"::Standard,Item."Costing Method"::Standard,Item."Replenishment System"::Assembly,'',FALSE,
        LibraryRandom.RandInt(5),LibraryRandom.RandInt(5),
        LibraryRandom.RandInt(5),LibraryRandom.RandInt(5));
      Item.VALIDATE("Assembly Policy",AssemblyPolicy);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemAndUpdateInventory@286(VAR Item@1000 : Record 27;Quantity@1001 : Decimal);
    VAR
      Bin@1002 : Record 7354;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryInventory.UpdateInventoryPostingSetup(LocationWhite);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE); // PICK Zone.
      UpdateInventoryUsingWhseJournal(Bin,Item,Quantity,'');
    END;

    LOCAL PROCEDURE CreateSalesOrderAndWareshouseShipment@281(VAR SalesHeader@1002 : Record 36;ItemNo@1005 : Code[20];ItemNo2@1004 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      CreateSalesOrder(SalesHeader,ItemNo,ItemNo2,Quantity,LocationWhite.Code);
      CreateWarehouseShipmentFromSalesHeader(SalesHeader);
    END;

    LOCAL PROCEDURE CreateSalesOrder@338(VAR SalesHeader@1002 : Record 36;ItemNo@1005 : Code[20];ItemNo2@1004 : Code[20];Quantity@1000 : Decimal;LocationCode@1003 : Code[10]);
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryVariableStorage.Enqueue(STRSUBSTNO(BeforeWorkDateMsg,WORKDATE)); // Enqueue for message triggered by sales line for assembly item
      CreateAndReleaseSalesOrderWithMultipleSalesLines(
        SalesHeader,Customer."No.",ItemNo,ItemNo2,LibraryRandom.RandDec(10,2),Quantity,LocationCode);
    END;

    LOCAL PROCEDURE CreateAndRegisterPickFromWareshouseShipment@279(SalesHeaderNo@1000 : Code[20]);
    VAR
      WarehouseShipmentLine@1003 : Record 7321;
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      CreatePickFromWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeaderNo);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Order",SalesHeaderNo,
        WarehouseActivityLine."Activity Type"::Pick);
    END;

    LOCAL PROCEDURE CreateSalesLineWithSelectLotOnTrackingLine@295(LotNo@1007 : Code[20];LotNo2@1008 : Code[20];SalesHeader@1000 : Record 36;VAR SalesLine@1010 : Record 37;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10];TrackingMode@1004 : Option);
    VAR
      ReservationMode@1009 : ' ,ReserveFromCurrentLine,AutoReserve';
    BEGIN
      LibraryVariableStorage.Enqueue(TrackingMode); // Enqueue for ItemTrackingLinesPageHandler
      LibraryVariableStorage.Enqueue(LotNo); // Enqueue for ItemTrackingLinesPageHandler
      IF TrackingMode = ItemTrackingMode::SelectEntriesForMultipleLines THEN
        LibraryVariableStorage.Enqueue(LotNo2); // Enqueue for ItemTrackingLinesPageHandler
      CreateSalesLine(SalesHeader,SalesLine,ItemNo,Quantity,LocationCode,'',TRUE,ReservationMode::" ");
    END;

    LOCAL PROCEDURE CreateProdOrderLineAtLocation@427(VAR ProdOrderLine@1000 : Record 5406;LocationCode@1002 : Code[10]);
    VAR
      ProductionOrder@1003 : Record 5405;
      ProdOrderLineRecordRef@1001 : RecordRef;
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,LibraryInventory.CreateItemNo,1);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
      ProdOrderLine.VALIDATE(Status,ProductionOrder.Status);
      ProdOrderLine.VALIDATE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLineRecordRef.GETTABLE(ProdOrderLine);
      ProdOrderLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(ProdOrderLineRecordRef,ProdOrderLine.FIELDNO("Line No.")));
    END;

    LOCAL PROCEDURE MockSalesOrder@416(VAR SalesHeader@1000 : Record 36);
    BEGIN
      WITH SalesHeader DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Order;
        "No." := LibraryUtility.GenerateRandomCode(FIELDNO("No."),DATABASE::"Sales Header");
        "Posting Date" := LibraryRandom.RandDateFromInRange(WORKDATE,10,20);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockATOLink@417(SalesHeader@1000 : Record 36;AssemblyHeader@1002 : Record 900);
    VAR
      AssembleToOrderLink@1001 : Record 904;
    BEGIN
      WITH AssembleToOrderLink DO BEGIN
        INIT;
        "Assembly Document Type" := AssemblyHeader."Document Type";
        "Assembly Document No." := AssemblyHeader."No.";
        Type := Type::Sale;
        "Document Type" := SalesHeader."Document Type";
        "Document No." := SalesHeader."No.";
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockAssemblyHeader@418(VAR AssemblyHeader@1000 : Record 900);
    BEGIN
      WITH AssemblyHeader DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Order;
        "No." := LibraryUtility.GenerateRandomCode(FIELDNO("No."),DATABASE::"Assembly Header");
        "Posting Date" := WORKDATE;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE DeletePutAwayLines@130(SourceNo@1002 : Code[20];LotNo@1001 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      LibraryVariableStorage.Enqueue(DeletedAllRelatedWarehouseActivityLinesTxt);  // Enqueue for MessageHandler.
      WarehouseActivityLine.SETRANGE("Lot No.",LotNo);
      FilterWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Inbound Transfer",SourceNo,
        WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DeleteWarehouseActivityHeader@298(WarehouseActivityLineNo@1000 : Code[20]);
    VAR
      WarehouseActivityHeader@1001 : Record 5766;
    BEGIN
      WarehouseActivityHeader.SETRANGE("No.",WarehouseActivityLineNo);
      WarehouseActivityHeader.FINDFIRST;
      WarehouseActivityHeader.DELETE(TRUE);
    END;

    LOCAL PROCEDURE FilterPurchaseLine@245(VAR PurchaseLine@1000 : Record 39;ItemNo@1001 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("No.",ItemNo);
    END;

    LOCAL PROCEDURE FilterSalesLine@503(VAR SalesLine@1000 : Record 37;ItemNo@1001 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("No.",ItemNo);
    END;

    LOCAL PROCEDURE FilterWarehouseActivityLine@15(VAR WarehouseActivityLine@1000 : Record 5767;SourceDocument@1003 : Option;SourceNo@1001 : Code[20];ActivityType@1002 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source Document",SourceDocument);
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
    END;

    LOCAL PROCEDURE FindAdjustmentBin@161(VAR Bin@1001 : Record 7354;Location@1000 : Record 14);
    VAR
      Zone@1002 : Record 7300;
    BEGIN
      FindZone(Zone,Location.Code,LibraryWarehouse.SelectBinType(FALSE,FALSE,FALSE,FALSE));
      Bin.SETFILTER(Code,'<>%1',Location."Adjustment Bin Code");
      Bin.SETRANGE("Location Code",Location.Code);
      Bin.SETRANGE("Zone Code",Zone.Code);
      Bin.FINDFIRST;
    END;

    LOCAL PROCEDURE FindAndSplitTakePlaceLines@489(Item@1003 : Record 27;LotNo@1001 : Code[20];TransferHeaderNo@1004 : Code[20];ActionType@1005 : Option;VAR QtyToHandle@1002 : Decimal;VAR BinCode@1006 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLineWithActionType(
        WarehouseActivityLine,Item."Base Unit of Measure",LotNo,WarehouseActivityLine."Source Document"::"Outbound Transfer",
        TransferHeaderNo,WarehouseActivityLine."Activity Type"::Pick,ActionType);
      SplitLineAndUpdateBinCode(WarehouseActivityLine,QtyToHandle,BinCode);
    END;

    LOCAL PROCEDURE FindBin@64(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10]);
    BEGIN
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.FINDLAST;
    END;

    LOCAL PROCEDURE FindBinForPickZone@10(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10];Pick@1002 : Boolean);
    VAR
      Zone@1003 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,Pick));  // Taking True for PutAway.
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE("Zone Code",Zone.Code);
      LibraryWarehouse.FindBin(Bin,LocationCode,Zone.Code,RANDOM(Bin.COUNT));  // Find Random Bin.
    END;

    LOCAL PROCEDURE FindReplenishmentBin@354(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10]);
    VAR
      Zone@1003 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode,LibraryWarehouse.SelectBinType(TRUE,FALSE,FALSE,FALSE));
      LibraryWarehouse.FindBin(Bin,LocationCode,Zone.Code,1);
    END;

    LOCAL PROCEDURE FindBinsForPickZone@342(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10];Pick@1002 : Boolean;BinIndex@1004 : Integer) : Code[20];
    VAR
      Zone@1003 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,Pick));  // Taking True for Putaway and Pick
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE("Zone Code",Zone.Code);
      LibraryWarehouse.FindBin(Bin,LocationCode,Zone.Code,BinIndex);  // Find Bin by BinIndex.
      EXIT(Bin.Code);
    END;

    LOCAL PROCEDURE FindLotNoOnItemLedgerEntry@397(VAR ItemLedgerEntry@1002 : Record 32;EntryType@1001 : Option;ItemNo@1000 : Code[20]) : Code[20];
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo);
      EXIT(ItemLedgerEntry."Lot No.");
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@42(VAR ItemLedgerEntry@1000 : Record 32;EntryType@1002 : Option;ItemNo@1001 : Code[20]);
    BEGIN
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindProductionOrderComponent@98(VAR ProdOrderComponent@1000 : Record 5407;ProductionOrderNo@1001 : Code[20]);
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProdOrderComponent.Status::Released);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrderNo);
      ProdOrderComponent.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseLine@289(VAR PurchaseLine@1000 : Record 39;ItemNo@1001 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("No.",ItemNo);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRegisteredWhseActivityLine@149(VAR RegisteredWhseActivityLine@1000 : Record 5773;SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ActivityType@1006 : Option;ActionType@1003 : Option;ItemNo@1004 : Code[20];BinCode@1005 : Code[20]);
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Source Document",SourceDocument);
      RegisteredWhseActivityLine.SETRANGE("Source No.",SourceNo);
      RegisteredWhseActivityLine.SETRANGE("Activity Type",ActivityType);
      RegisteredWhseActivityLine.SETRANGE("Action Type",ActionType);
      RegisteredWhseActivityLine.SETRANGE("Item No.",ItemNo);
      RegisteredWhseActivityLine.SETRANGE("Bin Code",BinCode);
      RegisteredWhseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRegisteredWhseActivityLineForLotAndUOM@499(VAR RegisteredWhseActivityLine@1000 : Record 5773;SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ActivityType@1006 : Option;ActionType@1003 : Option;ItemNo@1004 : Code[20];UOMCode@1007 : Code[10];LotNo@1005 : Code[20]);
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Source Document",SourceDocument);
      RegisteredWhseActivityLine.SETRANGE("Source No.",SourceNo);
      RegisteredWhseActivityLine.SETRANGE("Activity Type",ActivityType);
      RegisteredWhseActivityLine.SETRANGE("Action Type",ActionType);
      RegisteredWhseActivityLine.SETRANGE("Item No.",ItemNo);
      RegisteredWhseActivityLine.SETRANGE("Unit of Measure Code",UOMCode);
      RegisteredWhseActivityLine.SETRANGE("Lot No.",LotNo);
      RegisteredWhseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRequisitionLine@306(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPlanningComponent@315(VAR PlanningComponent@1002 : Record 99000829;RequisitionLine@1000 : Record 246);
    BEGIN
      WITH PlanningComponent DO BEGIN
        SETRANGE("Worksheet Template Name",RequisitionLine."Worksheet Template Name");
        SETRANGE("Worksheet Batch Name",RequisitionLine."Journal Batch Name");
        SETRANGE("Worksheet Line No.",RequisitionLine."Line No.");
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindSalesLine@376(VAR SalesLine@1000 : Record 37;DocumentNo@1001 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindTransferLine@164(VAR TransferLine@1000 : Record 5741;DocumentNo@1001 : Code[20]);
    BEGIN
      TransferLine.SETRANGE("Document No.",DocumentNo);
      TransferLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityLine@5(VAR WarehouseActivityLine@1000 : Record 5767;SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option);
    BEGIN
      FilterWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityLineWithActionType@384(VAR WarehouseActivityLine@1000 : Record 5767;UOMCode@1006 : Code[10];LotNo@1005 : Code[20];SourceDocument@1001 : Option;SourceNo@1002 : Code[20];ActivityType@1003 : Option;ActionType@1004 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.SETRANGE("Lot No.",LotNo);
      IF UOMCode <> '' THEN
        WarehouseActivityLine.SETRANGE("Unit of Measure Code",UOMCode);
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
    END;

    LOCAL PROCEDURE FindWarehouseReceiptLine@29(VAR WarehouseReceiptLine@1002 : Record 7317;SourceDocument@1001 : Option;SourceNo@1000 : Code[20]);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseShipmentLine@141(VAR WarehouseShipmentLine@1002 : Record 7321;SourceDocument@1001 : Option;SourceNo@1000 : Code[20]);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",SourceDocument);
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseWorksheetLine@54(VAR WhseWorksheetLine@1000 : Record 7326;WhseWorksheetName@1001 : Record 7327;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];ItemNo2@1004 : Code[20]);
    BEGIN
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.SETRANGE(Name,WhseWorksheetName.Name);
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.SETFILTER("Item No.",ItemNo + '|' + ItemNo2);
      WhseWorksheetLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindZone@8(VAR Zone@1000 : Record 7300;LocationCode@1001 : Code[10];BinTypeCode@1002 : Code[10]);
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      Zone.SETRANGE("Bin Type Code",BinTypeCode);
      Zone.SETRANGE("Cross-Dock Bin Zone",FALSE);
      Zone.FINDFIRST;
    END;

    LOCAL PROCEDURE GetNoOfPicksOnLocation@65(VAR NoOfPicks@1002 : Integer;LocationCode@1001 : Code[10]);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      WarehouseActivityHeader.SETRANGE(Type,WarehouseActivityHeader.Type::Pick);
      WarehouseActivityHeader.SETRANGE("Location Code",LocationCode);
      NoOfPicks := WarehouseActivityHeader.COUNT;
    END;

    LOCAL PROCEDURE GetWarehouseDocumentOnWhseWorksheetLine@125(VAR WhseWorksheetName@1000 : Record 7327;LocationCode@1003 : Code[10];DocumentType@1004 : Option);
    VAR
      WhseWorksheetTemplate@1001 : Record 7328;
      WhsePickRequest@1002 : Record 7325;
    BEGIN
      LibraryWarehouse.SelectWhseWorksheetTemplate(WhseWorksheetTemplate,WhseWorksheetTemplate.Type::Pick);
      LibraryWarehouse.SelectWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
      WhsePickRequest.SETRANGE(Status,WhsePickRequest.Status::Released);
      WhsePickRequest.SETRANGE("Completely Picked",FALSE);
      WhsePickRequest.SETRANGE("Location Code",LocationCode);
      WhsePickRequest.SETRANGE("Document Type",DocumentType);
      LibraryWarehouse.GetOutboundSourceDocuments(WhsePickRequest,WhseWorksheetName,LocationCode);
    END;

    LOCAL PROCEDURE GetSalesOrderForDropShipmentOnRequisitionWorksheet@275(VAR SalesLine@1002 : Record 37);
    VAR
      RequisitionWkshName@1000 : Record 245;
      RequisitionLine@1001 : Record 246;
      RetrieveDimensionsFrom@1004 : 'Item,Sales Line';
    BEGIN
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,SelectRequisitionTemplate);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
      LibraryPlanning.GetSalesOrders(SalesLine,RequisitionLine,RetrieveDimensionsFrom::"Sales Line");
    END;

    LOCAL PROCEDURE GetSalesOrderForSpecialOrderOnRequisitionWorksheet@294(VAR SalesLine@1002 : Record 37);
    VAR
      RequisitionWkshName@1000 : Record 245;
      RequisitionLine@1001 : Record 246;
    BEGIN
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,SelectRequisitionTemplate);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
      LibraryPlanning.GetSpecialOrder(RequisitionLine,SalesLine."No.");
    END;

    LOCAL PROCEDURE GetPostiveAdjmtQtyFromWarehouseEntry@267(ItemNo@1000 : Code[20];LocationCode@1001 : Code[20];AssemblyHeaderNo@1002 : Code[20]) PositiveAdjmtQty : Decimal;
    VAR
      WarehouseEntry@1003 : Record 7312;
    BEGIN
      WITH WarehouseEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Source No.",AssemblyHeaderNo);
        SETRANGE("Entry Type","Entry Type"::"Positive Adjmt.");
        FINDSET;
        REPEAT
          PositiveAdjmtQty += Quantity;
        UNTIL NEXT = 0;
      END;
      EXIT(PositiveAdjmtQty);
    END;

    LOCAL PROCEDURE InitSetupForProdBOMWithRouting@316(VAR WorkCenter@1003 : Record 99000754;VAR ItemNo@1004 : Code[20];VAR ParentItemNo@1009 : Code[20];LocationCode@1007 : Code[10]);
    VAR
      ParentItem@1001 : Record 27;
      Item@1010 : Record 27;
      ProductionBOMHeader@1006 : Record 99000771;
      ProductionBOMLine@1005 : Record 99000772;
      RoutingLine@1008 : Record 99000764;
    BEGIN
      CreateRoutingSetupWithWorkCenter(RoutingLine,WorkCenter,LocationCode);
      LibraryInventory.CreateItem(Item);
      ItemNo := Item."No.";

      CreateAndCertifyBOM(
        ProductionBOMHeader,ProductionBOMLine,Item."Base Unit of Measure",Item."No.",LibraryRandom.RandInt(10));
      CreateItemWithRoutingAndProductionBOM(ParentItem,ProductionBOMHeader."No.",RoutingLine."Routing No.");
      ParentItemNo := ParentItem."No.";
    END;

    LOCAL PROCEDURE OpenProductionJournal@69(ProductionOrder@1000 : Record 5405);
    VAR
      ProdOrderComponent@1001 : Record 5407;
    BEGIN
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrder."No.");
      LibraryManufacturing.OpenProductionJournal(ProductionOrder,ProdOrderComponent."Prod. Order Line No.");
    END;

    LOCAL PROCEDURE OpenWhseReceiptItemTrackingLines@277(VAR WarehouseReceiptLine@1001 : Record 7317;ItemTrackingMode@1000 : ' ,AssignLotNo,SelectEntries,AssignSerialNo,ApplyFromItemEntry,AssignAutoSerialNo,AssignAutoLotAndSerialNo');
    VAR
      LotNo@1002 : Variant;
    BEGIN
      IF ItemTrackingMode = ItemTrackingMode::AssignLotNo THEN BEGIN
        LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignLotNo);
        WarehouseReceiptLine.OpenItemTrackingLines;
        LibraryVariableStorage.Dequeue(LotNo)
      END ELSE BEGIN
        LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignAutoSerialNo);
        WarehouseReceiptLine.OpenItemTrackingLines;
      END;
    END;

    LOCAL PROCEDURE BatchPostSalesOrderWithNewPostingDate@407(VAR SalesHeader@1000 : Record 36;NewPostingDate@1001 : Date);
    BEGIN
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      LibraryVariableStorage.Enqueue(STRSUBSTNO(NoOfPostedOrdersMsg,1));
      COMMIT;
      LibrarySales.BatchPostSalesHeaders(SalesHeader,TRUE,FALSE,NewPostingDate,TRUE,FALSE,FALSE);
    END;

    LOCAL PROCEDURE PostPurchOrderAfterCarryOutActionMsgOnReqWorksheet@236(ItemNo@1000 : Code[20];Quantity@1002 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
      PurchaseHeader@1003 : Record 38;
    BEGIN
      CarryOutActionMsgOnRequisitionWorksheet(ItemNo);
      PurchaseLine.SETRANGE("No.",ItemNo);
      PurchaseLine.FINDFIRST;
      UpdateQuantityToReceiveOnPurchaseLine(PurchaseLine,Quantity);
      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);  // Post as Receive.
    END;

    LOCAL PROCEDURE PostPurchaseOrder@291(ItemNo@1003 : Code[20];ToShipReceive@1001 : Boolean;ToInvoice@1000 : Boolean);
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1004 : Record 39;
    BEGIN
      FindPurchaseLine(PurchaseLine,ItemNo);
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,ToShipReceive,ToInvoice);
    END;

    LOCAL PROCEDURE PostPurchaseOrderWithTwoLot@377(VAR Item@1005 : Record 27;VAR Quantity@1004 : ARRAY [3] OF Decimal;VAR LotNo@1002 : ARRAY [3] OF Code[20];PostShipReceive@1007 : Boolean;PostInvoice@1000 : Boolean);
    VAR
      PurchaseHeader@1006 : Record 38;
      UOM@1003 : ARRAY [3] OF Code[10];
      QtyPerUOM@1001 : Decimal;
    BEGIN
      Quantity[1] := 0;
      Quantity[2] := LibraryRandom.RandIntInRange(10,100);
      Quantity[3] := Quantity[2];
      LotNo[1] := '';
      LotNo[2] := LibraryUtility.GenerateGUID;
      LotNo[3] := LibraryUtility.GenerateGUID;
      CreateAndReleasePurchaseOrderWithMultipleUOMAndLotTracking(PurchaseHeader,Item,Quantity,UOM,LotNo,QtyPerUOM,'');
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,PostShipReceive,PostInvoice);
    END;

    LOCAL PROCEDURE PostSalesInvoiceWithPurchasingCodeAndNegativeQuantity@292(DropShipment@1000 : Boolean;SpecialOrder@1001 : Boolean);
    VAR
      Item@1006 : Record 27;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
      Quantity@1003 : Decimal;
    BEGIN
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);

      // Setup: Create sales order with Purchase Code
      CreateItemWithStandardCost(Item);
      CreateSalesOrderWithPurchaseCode(SalesHeader,SalesLine,Item."No.",-Quantity,DropShipment,SpecialOrder);

      // Get Sales Order for Drop Shipment on Requisition Worksheet and Carry Out
      IF DropShipment THEN
        GetSalesOrderForDropShipmentOnRequisitionWorksheet(SalesLine);
      IF SpecialOrder THEN
        GetSalesOrderForSpecialOrderOnRequisitionWorksheet(SalesLine);

      CarryOutActionMsgOnRequisitionWorksheet(Item."No.");

      // Exercise: Post Purchase Order and Sales Order
      PostPurchaseOrder(Item."No.",TRUE,FALSE);
      SalesHeader.FIND; // Require for Posting.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE); // Post as Ship and Invoice.

      // Verify: Verify Sales Order post successfully, Posted Sales Invoice is correct.
      VerifyPostedSalesInvoiceLine(Item."No.",-Quantity);
    END;

    LOCAL PROCEDURE PostTransferOrderAsReceive@205(TransferHeader@1000 : Record 5740;Quantity@1001 : Decimal);
    VAR
      TransferLine@1002 : Record 5741;
    BEGIN
      FindTransferLine(TransferLine,TransferHeader."No.");
      TransferLine.VALIDATE("Qty. to Receive",Quantity);
      TransferLine.MODIFY(TRUE);
      LibraryWarehouse.PostTransferOrder(TransferHeader,FALSE,TRUE);  // Post as receive.
    END;

    LOCAL PROCEDURE PostTransferOrderAsReceiveAfterUpdateDimensionOnTransferLine@160(VAR TransferHeader@1000 : Record 5740;ShortcutDimension1Code@1002 : Code[20]);
    VAR
      TransferLine@1001 : Record 5741;
    BEGIN
      FindTransferLine(TransferLine,TransferHeader."No.");
      TransferLine.VALIDATE("Shortcut Dimension 1 Code",ShortcutDimension1Code);
      TransferLine.MODIFY(TRUE);
      LibraryWarehouse.PostTransferOrder(TransferHeader,FALSE,TRUE);  // Post as Receive.
    END;

    LOCAL PROCEDURE PostWarehouseActivity@224(ProductionOrderNo@1000 : Code[20];Quantity@1001 : Decimal);
    VAR
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1003 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrderNo,
        WarehouseActivityLine."Activity Type"::"Invt. Pick");
      WarehouseActivityLine.VALIDATE("Qty. to Handle",Quantity);
      WarehouseActivityLine.MODIFY(TRUE);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@30(WarehouseReceiptNo@1000 : Code[20]);
    VAR
      WarehouseReceiptHeader@1001 : Record 7316;
    BEGIN
      WarehouseReceiptHeader.GET(WarehouseReceiptNo);
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE PostWarehouseShipment@159(SourceDocument@1003 : Option;SourceNo@1001 : Code[20];Invoice@1004 : Boolean);
    VAR
      WarehouseShipmentHeader@1000 : Record 7320;
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      FindWarehouseShipmentLine(WarehouseShipmentLine,SourceDocument,SourceNo);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,Invoice);  // Use TRUE for Invoice.
    END;

    LOCAL PROCEDURE PostWarehouseShipmentAndReopenSalesOrder@369(VAR SalesHeader@1005 : Record 36;VAR Item@1004 : Record 27;Quantity@1000 : Decimal);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      // Create a new item, update the inventory.
      UpdateInventoryUsingItemJournal(Item,Quantity);

      // Create a Sales Order, Create Pick and post Warehourse Shipment
      CreateAndRegisterPickFromSalesOrder(
        SalesHeader,Item."No.",Quantity,LocationYellow.Code,FALSE,ReservationMode::" "); // Value required for the test.
      PostWarehouseShipment(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No.",FALSE);

      // Reopen Sales Order
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      LibrarySales.ReopenSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE RegisterPutAwayAfterDeletePutAwayLines@136(Bin@1003 : Record 7354;SourceNo@1000 : Code[20];LotNo@1001 : Code[20]);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      DeletePutAwayLines(SourceNo,LotNo);
      UpdateZoneAndBinCodeOnWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Inbound Transfer",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,SourceNo,Bin);
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Inbound Transfer",SourceNo,
        WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@46(VAR WarehouseActivityLine@1004 : Record 5767;SourceDocument@1000 : Option;SourceNo@1002 : Code[20];ActivityType@1001 : Option);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE RegisterWhseJournalLineAndPostItemJournal@355(Item@1002 : Record 27;Bin@1001 : Record 7354);
    BEGIN
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",TRUE);
      UpdateNoSeriesOnItemJournalBatch(ItemJournalBatch,LibraryUtility.GetGlobalNoSeriesCode);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE ReleasePurchaseOrderAndRegisterPutAwayWithMultipleUOMAndLotTracking@390(VAR Item@1011 : Record 27;Quantity@1003 : ARRAY [3] OF Decimal;VAR UOM@1005 : ARRAY [3] OF Code[10];VAR LotNo@1004 : ARRAY [3] OF Code[20];VAR QtyPerUOM@1001 : Decimal);
    VAR
      PurchaseHeader@1000 : Record 38;
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      CreateAndReleasePurchaseOrderWithMultipleUOMAndLotTracking(PurchaseHeader,Item,Quantity,UOM,LotNo,QtyPerUOM,LocationWhite.Code);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,FALSE,ItemTrackingMode::" ");
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away"); // Register Put-away for Purchase Order
    END;

    LOCAL PROCEDURE ReleaseTransferOrderAndCreatePick@492(VAR TransferHeader@1006 : Record 5740;FromLocationCode@1005 : Code[10];ToLocationCode@1004 : Code[10];ItemNo@1003 : Code[20];Quantity@1002 : ARRAY [3] OF Decimal;QtyPerUOM@1012 : Decimal;UOMCode@1000 : Code[10];LotNo@1009 : ARRAY [3] OF Code[20];ReservationMode@1007 : ' ,ReserveFromCurrentLine,AutoReserve');
    VAR
      WarehouseShipmentLine@1010 : Record 7321;
    BEGIN
      IF ReservationMode <> ReservationMode::" " THEN
        CreateTransferOrderWithMultipleUOMAndReservation(
          TransferHeader,FromLocationCode,ToLocationCode,ItemNo,Quantity,UOMCode,ReservationMode)
      ELSE
        CreateTransferOrderWithMultipleUOMAndLotTracking(
          TransferHeader,FromLocationCode,ToLocationCode,ItemNo,Quantity,QtyPerUOM,UOMCode,LotNo);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
      CreateWarehouseShipmentWithGetSourceDocument(LocationWhite.Code,TRUE,FALSE,FALSE,ItemNo,ItemNo);  // Taking TRUE for Transfer Orders.
      CreatePickFromWarehouseShipment(WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.");
    END;

    LOCAL PROCEDURE RegisterWhseActivityAfterAutofillingQtyToHandle@264(WarehouseActivityLine@1001 : Record 5767);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      WarehouseActivityLine.AutofillQtyToHandle(WarehouseActivityLine);
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE ReleaseTransferOrderAndCreatePickWithUOMAndLotTracking@314(VAR TransferHeader@1006 : Record 5740;FromLocationCode@1005 : Code[10];ToLocationCode@1004 : Code[10];ItemNo@1003 : Code[20];TransferQty@1002 : Decimal;LotNo@1009 : Code[20]);
    VAR
      TransferLine@1007 : Record 5741;
      WarehouseShipmentLine@1011 : Record 7321;
      Direction@1008 : 'Outbound,Inbound';
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,LocationInTransit.Code);

      CreateTransferLineWithUOM(TransferHeader,ItemNo,TransferQty,'');
      FindTransferLine(TransferLine,TransferHeader."No.");
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignManualLotNo); // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(LotNo);
      TransferLine.OpenItemTrackingLines(Direction::Outbound);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);

      CreateWarehouseShipmentWithGetSourceDocument(LocationWhite.Code,TRUE,FALSE,FALSE,ItemNo,ItemNo);  // Taking TRUE for Transfer Orders.
      CreatePickFromWarehouseShipment(WarehouseShipmentLine."Source Document"::"Outbound Transfer",TransferHeader."No.");
    END;

    LOCAL PROCEDURE RunCalculateRegenerativePlan@194(ItemNo@1000 : Code[20];LocationCode@1002 : Code[10];StartingDate@1004 : Date);
    VAR
      Item@1003 : Record 27;
    BEGIN
      Item.SETRANGE("No.",ItemNo);
      Item.SETRANGE("Location Filter",LocationCode);
      LibraryPlanning.CalcRegenPlanForPlanWksh(
        Item,StartingDate,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',StartingDate));
    END;

    LOCAL PROCEDURE RunItemTrackingAppendixReport@323(DocType@1000 : Option;DocNo@1002 : Code[20]);
    VAR
      ItemTrackingAppendix@1001 : Report 6521;
    BEGIN
      LibraryVariableStorage.Enqueue(DocType);
      LibraryVariableStorage.Enqueue(DocNo);
      COMMIT; // Use the COMMIT function to save the changes
      CLEAR(ItemTrackingAppendix);
      ItemTrackingAppendix.USEREQUESTPAGE(TRUE);
      ItemTrackingAppendix.RUN;
    END;

    LOCAL PROCEDURE ReleaseAndCreateWhsePickFromAsmHeader@242(ItemNo@1000 : Code[20]) : Code[20];
    VAR
      AssemblyHeader@1001 : Record 900;
      LibraryAssembly@1002 : Codeunit 132207;
    BEGIN
      WITH AssemblyHeader DO BEGIN
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        CODEUNIT.RUN(CODEUNIT::"Release Assembly Document",AssemblyHeader);
        LibraryVariableStorage.Enqueue(PickActivityMsg);
        LibraryAssembly.CreateWhsePick(AssemblyHeader,USERID,0,FALSE,FALSE,FALSE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE RunSalesShipmentReport@358(No@1005 : Code[20];ShowInternalInformation@1001 : Boolean;LogInteraction@1002 : Boolean;ShowCorrectionLines@1003 : Boolean);
    VAR
      SalesShipmentHeader@1004 : Record 110;
      SalesShipment@1000 : Report 208;
    BEGIN
      CLEAR(SalesShipment);
      SalesShipmentHeader.SETRANGE("No.",No);
      SalesShipment.SETTABLEVIEW(SalesShipmentHeader);

      // Passing 0 for No. of Copies, TRUE for Show Serial/ Lot No and FALSE for Show Assembly Components. Appendix option as these options can not be checked.
      SalesShipment.InitializeRequest(0,ShowInternalInformation,LogInteraction,ShowCorrectionLines,TRUE,FALSE);
      COMMIT; // Due to limitation in Report Commit is required for this Test case.
      SalesShipment.RUN;
    END;

    LOCAL PROCEDURE RunServiceShipmentReport@334(ShowInternalInfo@1002 : Boolean;ShowCorrectionLine@1003 : Boolean;ShowLotSerialNoAppendix@1004 : Boolean;OrderNo@1005 : Code[20]);
    VAR
      ServiceShipmentHeader@1001 : Record 5990;
      ServiceShipment@1000 : Report 5913;
    BEGIN
      CLEAR(ServiceShipment);
      ServiceShipmentHeader.SETRANGE("Order No.",OrderNo);
      ServiceShipment.SETTABLEVIEW(ServiceShipmentHeader);
      ServiceShipment.InitializeRequest(ShowInternalInfo,ShowCorrectionLine,ShowLotSerialNoAppendix);
      COMMIT; // Due to limitation in Report Commit is required for this Test case.
      ServiceShipment.RUN;
    END;

    LOCAL PROCEDURE SelectRequisitionTemplate@219() ReqWkshTemplateName : Code[10];
    VAR
      ReqWkshTemplate@1000 : Record 244;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::"Req.");
      ReqWkshTemplate.SETRANGE(Recurring,FALSE);
      ReqWkshTemplate.FINDFIRST;
      ReqWkshTemplateName := ReqWkshTemplate.Name
    END;

    LOCAL PROCEDURE SplitPutAwayLineAndUpdateZoneCodeAndBinCodeForPlace@339(VAR WarehouseActivityLine@1001 : Record 5767;Quantity@1000 : Decimal);
    BEGIN
      UpdateZoneAndBinCodeInWarehouseActivityLine(WarehouseActivityLine,1); // Find and set 1st bin

      // Update Qty. to Handle and split Place line
      WarehouseActivityLine.VALIDATE("Qty. to Handle",Quantity);
      WarehouseActivityLine.MODIFY(TRUE);
      WarehouseActivityLine.SplitLine(WarehouseActivityLine);

      WarehouseActivityLine.NEXT;
      UpdateZoneAndBinCodeInWarehouseActivityLine(WarehouseActivityLine,2); // Find and set 2nd bin
    END;

    LOCAL PROCEDURE SplitLineAndUpdateBinCode@388(WarehouseActivityLine@1001 : Record 5767;VAR QtyToHandle@1000 : Decimal;VAR BinCode@1003 : Code[20]);
    BEGIN
      // Update Qty. to Handle and split Place line
      BinCode := WarehouseActivityLine."Bin Code";
      QtyToHandle := ROUND(WarehouseActivityLine."Qty. to Handle" / LibraryRandom.RandIntInRange(3,5),1);
      WarehouseActivityLine.VALIDATE("Qty. to Handle",QtyToHandle);
      WarehouseActivityLine.MODIFY(TRUE);
      WarehouseActivityLine.SplitLine(WarehouseActivityLine);

      WarehouseActivityLine.NEXT;
      WarehouseActivityLine.VALIDATE("Bin Code",''); // Clear the default Bin Code and reset.
      WarehouseActivityLine.VALIDATE("Bin Code",BinCode);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemWithReplenishmentSystem@241(VAR Item@1000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        VALIDATE("Replenishment System","Replenishment System"::Assembly);
        VALIDATE("Assembly Policy","Assembly Policy"::"Assemble-to-Order");
        VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
        VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UndoSaleShipmentLine@278(OrderNo@1002 : Code[20]);
    VAR
      SalesShipmentHeader@1000 : Record 110;
      SalesShipmentLine@1001 : Record 111;
    BEGIN
      WITH SalesShipmentHeader DO BEGIN
        SETRANGE("Order No.",OrderNo);
        FINDFIRST;
        SalesShipmentLine.SETRANGE("Document No.","No.");
        SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
        FINDFIRST;
      END;
      LibrarySales.UndoSalesShipmentLine(SalesShipmentLine);
    END;

    LOCAL PROCEDURE UpdateAlwaysCreatePickLineOnLocation@116(VAR Location@1002 : Record 14;VAR OldAlwaysCreatePickLine@1001 : Boolean;NewAlwaysCreatePickLine@1000 : Boolean);
    BEGIN
      OldAlwaysCreatePickLine := Location."Always Create Pick Line";
      LocationWhite.VALIDATE("Always Create Pick Line",NewAlwaysCreatePickLine);
      LocationWhite.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinCodeAfterSplitPutAwayLine@145(VAR Bin@1003 : Record 7354;SourceNo@1001 : Code[20];QtyToHandle@1002 : Decimal);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Place);
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityLine.VALIDATE("Qty. to Handle",QtyToHandle);
      WarehouseActivityLine.MODIFY(TRUE);
      WarehouseActivityLine.SplitLine(WarehouseActivityLine);
      FindBinForPickZone(Bin,LocationWhite.Code,TRUE);  // PICK Zone.
      WarehouseActivityLine.SETRANGE("Bin Code",'');
      UpdateZoneAndBinCodeOnWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,SourceNo,Bin);
    END;

    LOCAL PROCEDURE UpdateCreditWarningOnSalesAndReceivablesSetup@240(NewCreditWarnings@1001 : Option) OldCreditWarning : Integer;
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      OldCreditWarning := SalesReceivablesSetup."Credit Warnings";
      SalesReceivablesSetup.VALIDATE("Credit Warnings",NewCreditWarnings);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExpirationDateOnReservationEntry@148(ItemNo@1001 : Code[20];ExpirationDate@1004 : Date;DifferentExpirationDate@1003 : Boolean);
    VAR
      ReservationEntry@1000 : Record 337;
      DateDifference@1002 : Integer;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.FINDSET;
      REPEAT
        ReservationEntry.VALIDATE("Expiration Date",ExpirationDate);
        IF DifferentExpirationDate THEN BEGIN
          DateDifference += 1;
          ReservationEntry.VALIDATE("Expiration Date",CALCDATE('<-' + FORMAT(DateDifference) + 'D>',ExpirationDate));
        END;
        ReservationEntry.MODIFY(TRUE);
      UNTIL ReservationEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateExpirationDateOnWhseItemTrackingLine@356(ItemNo@1001 : Code[20];ExpirationDate@1004 : Date);
    VAR
      WhseItemTrackingLine@1000 : Record 6550;
    BEGIN
      WITH WhseItemTrackingLine DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
        VALIDATE("Expiration Date",ExpirationDate);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateBlockedAsTrueOnItem@238(VAR Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE(Blocked,TRUE);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLotNoOnItemTrackingLine@262(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      DequeueVariable@1002 : Variant;
      LotNo@1001 : Code[20];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LotNo := DequeueVariable;
      ItemTrackingLines."Lot No.".SETVALUE(LotNo);
    END;

    LOCAL PROCEDURE UpdateReserveOnItem@1093(VAR Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE(Reserve,Item.Reserve::Always);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateStockOutWarningOnSalesReceivablesSetup@233(NewStockOutWarning@1002 : Boolean) OldStockOutWarning : Boolean;
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      OldStockOutWarning := SalesReceivablesSetup."Stockout Warning";
      SalesReceivablesSetup.VALIDATE("Stockout Warning",NewStockOutWarning);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateZoneAndBinCodeOnWarehouseActivityLine@146(VAR WarehouseActivityLine@1000 : Record 5767;SourceDocument@1001 : Option;ActivityType@1004 : Option;ActionType@1003 : Option;SourceNo@1002 : Code[20];Bin@1005 : Record 7354);
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityLine.MODIFYALL("Zone Code",Bin."Zone Code",TRUE);
      WarehouseActivityLine.MODIFYALL("Bin Code",Bin.Code,TRUE);
    END;

    LOCAL PROCEDURE UpdateZoneAndBinCodeInWarehouseActivityLine@359(VAR WarehouseActivityLine@1001 : Record 5767;BinIndex@1002 : Integer);
    VAR
      Bin@1003 : Record 7354;
    BEGIN
      FindBinsForPickZone(Bin,LocationWhite.Code,TRUE,BinIndex);
      WarehouseActivityLine.VALIDATE("Zone Code",Bin."Zone Code");
      WarehouseActivityLine.VALIDATE("Bin Code",Bin.Code);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInventoryUsingWhseJournal@113(Bin@1000 : Record 7354;Item@1002 : Record 27;Quantity@1003 : Decimal;VariantCode@1008 : Code[10]);
    VAR
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      CreateWarehouseJournalLine(WarehouseJournalLine,Bin,Item,Quantity,VariantCode);
      RegisterWhseJournalLineAndPostItemJournal(Item,Bin);
    END;

    LOCAL PROCEDURE UpdateAndTrackInventoryUsingWhseJournal@383(Bin@1000 : Record 7354;Item@1002 : Record 27;Quantity@1003 : Decimal;VariantCode@1008 : Code[10];ExpirationDate@1004 : Date);
    VAR
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      CreateWarehouseJournalLine(WarehouseJournalLine,Bin,Item,Quantity,VariantCode);
      LibraryVariableStorage.Enqueue(LibraryUtility.GenerateGUID);
      LibraryVariableStorage.Enqueue(Quantity);
      WarehouseJournalLine.OpenItemTrackingLines;
      UpdateExpirationDateOnWhseItemTrackingLine(Item."No.",ExpirationDate);
      RegisterWhseJournalLineAndPostItemJournal(Item,Bin);
    END;

    LOCAL PROCEDURE UpdateInventoryUsingItemJournal@373(VAR Item@1002 : Record 27;Quantity@1000 : Decimal);
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryInventory.UpdateInventoryPostingSetup(LocationYellow);
      CreateItemJournalLine(ItemJournalLine,Item."No.",LocationYellow.Code,Quantity,WORKDATE,'',Item."Base Unit of Measure");
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateItemTrackingOnTransferLine@172(DocumentNo@1001 : Code[20]);
    VAR
      TransferLine@1000 : Record 5741;
      Direction@1003 : 'Outbound,Inbound';
    BEGIN
      FindTransferLine(TransferLine,DocumentNo);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::SelectEntries);  // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      TransferLine.OpenItemTrackingLines(Direction::Outbound);
    END;

    LOCAL PROCEDURE UpdateMachineCenter@555(MachineCenter@1000 : Record 99000758;Location@1005 : Record 14);
    BEGIN
      MachineCenter.VALIDATE("Location Code",Location.Code);
      MachineCenter.VALIDATE("Open Shop Floor Bin Code",Location."Open Shop Floor Bin Code");
      MachineCenter.VALIDATE("From-Production Bin Code",Location."From-Production Bin Code");
      MachineCenter.VALIDATE("To-Production Bin Code",Location."To-Production Bin Code");
      MachineCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateNoSeriesOnItemJournalBatch@110(VAR ItemJournalBatch@1000 : Record 233;NoSeries@1001 : Code[10]);
    BEGIN
      ItemJournalBatch.VALIDATE("No. Series",NoSeries);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePickAccordingToFEFOOnLocation@131(VAR Location@1000 : Record 14;VAR OldPickAccordingToFEFO@1001 : Boolean;NewPickAccordingToFEFO@1002 : Boolean);
    BEGIN
      OldPickAccordingToFEFO := Location."Pick According to FEFO";
      Location.VALIDATE("Pick According to FEFO",NewPickAccordingToFEFO);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseUnitOfMeasureOnItem@41(VAR Item@1000 : Record 27;PurchaseUnitOfMeasure@1001 : Code[10]);
    BEGIN
      Item.VALIDATE("Purch. Unit of Measure",PurchaseUnitOfMeasure);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseCodeAfterPostWarehouseShipment@389(DropShipment@1003 : Boolean;SpecialOrder@1004 : Boolean);
    VAR
      Item@1002 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1005 : Record 37;
    BEGIN
      Initialize;

      // Setup: Post Warehourse Shipment and reopen Sales Order
      PostWarehouseShipmentAndReopenSalesOrder(SalesHeader,Item,LibraryRandom.RandDec(100,2));

      // Exercise: Update Purchasing Code
      FindSalesLine(SalesLine,SalesHeader."No.");
      ASSERTERROR SalesLine.VALIDATE("Purchasing Code",CreatePurchasingCode(DropShipment,SpecialOrder));

      // Verify: Error message pops up
      Assert.ExpectedError(CannotChangePurchasingCodeErr);
    END;

    LOCAL PROCEDURE UpdateSalesUnitOfMeasureOnItem@128(VAR Item@1000 : Record 27;SalesUnitOfMeasure@1001 : Code[10]);
    BEGIN
      Item.VALIDATE("Sales Unit of Measure",SalesUnitOfMeasure);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesReceivableSetup@331(CreditWarnings@1003 : Option;StockoutWarning@1002 : Boolean);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      WITH SalesReceivablesSetup DO BEGIN
        GET;
        VALIDATE("Credit Warnings",CreditWarnings);
        VALIDATE("Stockout Warning",StockoutWarning);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateZoneAndBinCodeOnWarehouseReceiptLine@47(VAR WarehouseReceiptLine@1002 : Record 7317;SourceNo@1000 : Code[20];Bin@1001 : Record 7354);
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",SourceNo);
      WarehouseReceiptLine.VALIDATE("Zone Code",Bin."Zone Code");
      WarehouseReceiptLine.VALIDATE("Bin Code",Bin.Code);
      WarehouseReceiptLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateProductionBOMOnItem@202(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinOnLocation@214(VAR Location@1003 : Record 14);
    VAR
      Bin@1002 : Record 7354;
      Bin2@1001 : Record 7354;
      Bin3@1000 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateBin(Bin,Location.Code,LibraryUtility.GenerateGUID,'','');
      LibraryWarehouse.CreateBin(Bin2,Location.Code,LibraryUtility.GenerateGUID,'','');
      LibraryWarehouse.CreateBin(Bin3,Location.Code,LibraryUtility.GenerateGUID,'','');
      Location.VALIDATE("Open Shop Floor Bin Code",Bin.Code);
      Location.VALIDATE("From-Production Bin Code",Bin2.Code);
      Location.VALIDATE("To-Production Bin Code",Bin3.Code);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAssemblyBinOnLocation@424(VAR Location@1003 : Record 14);
    VAR
      Bin@1002 : Record 7354;
      Bin2@1001 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateBin(Bin,Location.Code,LibraryUtility.GenerateGUID,'','');
      LibraryWarehouse.CreateBin(Bin2,Location.Code,LibraryUtility.GenerateGUID,'','');
      Location.VALIDATE("From-Assembly Bin Code",Bin.Code);
      Location.VALIDATE("To-Assembly Bin Code",Bin2.Code);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateBinOnWorkCenter@318(VAR WorkCenter@1000 : Record 99000754;LocationCode@1005 : Code[10]);
    VAR
      Bin@1003 : ARRAY [3] OF Record 7354;
      i@1001 : Integer;
    BEGIN
      FOR i := 1 TO 3 DO
        LibraryWarehouse.CreateBin(Bin[i],LocationCode,LibraryUtility.GenerateGUID,'','');

      WITH WorkCenter DO BEGIN
        VALIDATE("Open Shop Floor Bin Code",Bin[1].Code);
        VALIDATE("From-Production Bin Code",Bin[2].Code);
        VALIDATE("To-Production Bin Code",Bin[3].Code);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateLocationOnWorkCenter@317(VAR WorkCenter@1000 : Record 99000754;LocationCode@1005 : Code[10]);
    BEGIN
      WorkCenter.VALIDATE("Location Code",LocationCode);
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateStockKeepingUnit@185(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20];ReplenishmentSystem@1002 : Option;TransferfromCode@1003 : Code[10];ReorderingPolicy@1004 : Option;IncludingInventory@1005 : Boolean);
    VAR
      StockkeepingUnit@1006 : Record 5700;
    BEGIN
      StockkeepingUnit.GET(LocationCode,ItemNo,'');
      StockkeepingUnit.VALIDATE("Replenishment System",ReplenishmentSystem);
      StockkeepingUnit.VALIDATE("Transfer-from Code",TransferfromCode);
      StockkeepingUnit.VALIDATE("Reordering Policy",ReorderingPolicy);
      StockkeepingUnit.VALIDATE("Include Inventory",IncludingInventory);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDefaultQuantityToShipOnSalesReceivablesSetup@203(NewDefaultQuantityToShip@1002 : Option) OldDefaultQuantityToShip : Integer;
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      OldDefaultQuantityToShip := SalesReceivablesSetup."Default Quantity to Ship";
      SalesReceivablesSetup.VALIDATE("Default Quantity to Ship",NewDefaultQuantityToShip);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityToReceiveOnPurchaseLine@248(VAR PurchaseLine@1001 : Record 39;QuantityToReceive@1000 : Decimal);
    BEGIN
      PurchaseLine.VALIDATE("Qty. to Receive",QuantityToReceive);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateWorkCenter@169(WorkCenter@1001 : Record 99000754;Location@1002 : Record 14);
    BEGIN
      WorkCenter.VALIDATE("Location Code",Location.Code);
      WorkCenter.VALIDATE("Open Shop Floor Bin Code",Location."Open Shop Floor Bin Code");
      WorkCenter.VALIDATE("From-Production Bin Code",Location."From-Production Bin Code");
      WorkCenter.VALIDATE("To-Production Bin Code",Location."To-Production Bin Code");
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQtyBaseOnTrackingLines@299(VAR SalesLine@1000 : Record 37;UpdateQtyBase@1001 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(ItemTrackingMode::UpdateQty); // Enqueue for ItemTrackingLinesPageHandler
      LibraryVariableStorage.Enqueue(UpdateQtyBase);
      SalesLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE UpdateQtyToShipAndPostWhseShipment@276(SourceNo@1002 : Code[20];QtyToShip@1003 : Decimal);
    VAR
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      WITH WarehouseShipmentLine DO BEGIN
        SETRANGE("Source Document","Source Document"::"Sales Order");
        SETRANGE("Source No.",SourceNo);
        FINDFIRST;
        VALIDATE("Qty. to Ship",QtyToShip);
        MODIFY(TRUE);
        WarehouseShipmentHeader.GET("No.");
      END;
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
    END;

    LOCAL PROCEDURE UpdateLotNoOnItem@270(VAR ChildItem@1000 : Record 27);
    BEGIN
      ChildItem.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      ChildItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UndoSalesShipmentLine@368(DocumentNo@1000 : Code[20];ExpectedMessage@1002 : Text);
    VAR
      SalesShipmentLine@1001 : Record 111;
    BEGIN
      LibraryVariableStorage.Enqueue(ExpectedMessage); // Enqueue for ConfirmHandler.
      SalesShipmentLine.SETRANGE("Document No.",DocumentNo);
      LibrarySales.UndoSalesShipmentLine(SalesShipmentLine);
    END;

    LOCAL PROCEDURE UndoShipmentForService@336(OrderNo@1000 : Code[20]);
    VAR
      ServiceShipmentLine@1002 : Record 5991;
    BEGIN
      ServiceShipmentLine.SETRANGE("Order No.",OrderNo);
      LibraryVariableStorage.Enqueue(UndoShipmentConfirmQst); // Enqueue for ConfirmHandler.
      CODEUNIT.RUN(CODEUNIT::"Undo Service Shipment Line",ServiceShipmentLine);
    END;

    LOCAL PROCEDURE UndoConsumptionForService@344(OrderNo@1001 : Code[20]);
    VAR
      ServiceShipmentLine@1000 : Record 5991;
    BEGIN
      ServiceShipmentLine.SETRANGE("Order No.",OrderNo);
      LibraryVariableStorage.Enqueue(UndoConsumptionConfirmQst); // Enqueue for ConfirmHandler.
      CODEUNIT.RUN(CODEUNIT::"Undo Service Consumption Line",ServiceShipmentLine);
    END;

    LOCAL PROCEDURE PostStockForComponents@333(Item@1000 : Record 27;Quantity@1002 : Integer);
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,Item."No.",LocationBlue.Code,Quantity,WORKDATE,'',Item."Base Unit of Measure");
      CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Explode BOM",ItemJournalLine);
      WITH ItemJournalLine DO BEGIN
        FINDSET;
        REPEAT
          IF ("Location Code" = '') AND ("Item No." <> '') THEN BEGIN
            VALIDATE("Location Code",LocationBlue.Code);
            MODIFY;
          END
        UNTIL NEXT = 0;
      END;
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE VerifyBinCodeOnReqLineAndPlanningComponent@319(ItemNo@1004 : Code[20];RequisitionLineBinCode@1002 : Code[20];PlanningComponentBinCode@1003 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
      PlanningComponent@1001 : Record 99000829;
    BEGIN
      FindRequisitionLine(RequisitionLine,ItemNo);
      FindPlanningComponent(PlanningComponent,RequisitionLine);
      RequisitionLine.TESTFIELD("Bin Code",RequisitionLineBinCode);
      PlanningComponent.TESTFIELD("Bin Code",PlanningComponentBinCode);
    END;

    LOCAL PROCEDURE VerifyEmptyReservationEntry@217(ItemNo@1000 : Code[20];SourceID@1001 : Code[20]);
    VAR
      ReservationEntry@1002 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Source ID",SourceID);
      Assert.IsTrue(ReservationEntry.ISEMPTY,ReservationEntryMustBeEmptyTxt);
    END;

    LOCAL PROCEDURE VerifyInventoryPutAwayLine@158(VAR Item@1002 : Record 27;SourceNo@1000 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Item No.",Item."No.");
      WarehouseActivityLine.SETRANGE("Unit of Measure Code",Item."Base Unit of Measure");
      WarehouseActivityLine.SETRANGE("Location Code",LocationCode);
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Sales Return Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Invt. Put-away");
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntryForCorrection@345(EntryType@1001 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;Correction@1004 : Boolean);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo);
      ItemLedgerEntry.SETRANGE(Quantity,Quantity);
      ItemLedgerEntry.FINDFIRST;
      REPEAT
        Assert.AreEqual(Correction,ItemLedgerEntry.Correction,ValueMustBeEqualTxt);
      UNTIL ItemLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntryForSerialNo@43(EntryType@1006 : Option;ItemNo@1002 : Code[20];LotNo@1005 : Code[20];Quantity@1004 : Decimal;TotalQuantity@1001 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
      Quantity2@1003 : Decimal;
    BEGIN
      ItemLedgerEntry.SETRANGE("Lot No.",LotNo);
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo);
      ItemLedgerEntry.FINDSET;
      REPEAT
        ItemLedgerEntry.TESTFIELD(Quantity,Quantity);  // Value required for Quantity.
        ItemLedgerEntry.TESTFIELD("Serial No.");
        Quantity2 += ItemLedgerEntry.Quantity;
      UNTIL ItemLedgerEntry.NEXT = 0;
      Assert.AreEqual(Quantity2,TotalQuantity,ValueMustBeEqualTxt);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntryForLotNo@53(ItemNo@1002 : Code[20];EntryType@1003 : Option;Quantity@1004 : Decimal;LotNo@1001 : Code[20]);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo);
      ItemLedgerEntry.SETRANGE("Lot No.",LotNo);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntriesForLotNo@396(EntryType@1003 : Option;ItemNo@1002 : Code[20];LotNo@1001 : Code[20];Quantity@1000 : Decimal);
    VAR
      ItemLedgerEntry@1004 : Record 32;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo);
      REPEAT
        ItemLedgerEntry.TESTFIELD("Lot No.",LotNo);
        ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
      UNTIL ItemLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@85(EntryType@1001 : Option;DocumentType@1006 : Option;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];LotNo@1007 : Code[20];GlobalDimension1Code@1008 : Code[20];Quantity@1004 : Decimal;RemainingQuantity@1005 : Decimal;PostingDate@1009 : Date);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Document Type",DocumentType);
      ItemLedgerEntry.SETRANGE("Location Code",LocationCode);
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo);
      ItemLedgerEntry.TESTFIELD("Lot No.",LotNo);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
      ItemLedgerEntry.TESTFIELD("Remaining Quantity",RemainingQuantity);
      ItemLedgerEntry.TESTFIELD("Global Dimension 1 Code",GlobalDimension1Code);
      ItemLedgerEntry.TESTFIELD("Posting Date",PostingDate);
    END;

    LOCAL PROCEDURE VerifyWarehouseActivityLinesWithLotAndSerialNoAccordingToFEFO@129(ActivityType@1006 : Option;SourceDocument@1009 : Option;SourceNo@1004 : Code[20];ActionType@1005 : Option;ItemNo@1001 : Code[20];ExpectedQuantity@1007 : Decimal;NextCount@1002 : Integer);
    VAR
      ItemLedgerEntry@1000 : Record 32;
      WarehouseActivityLine@1003 : Record 5767;
      ActualQuantity@1008 : Decimal;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Purchase,ItemNo);
      ItemLedgerEntry.FINDSET;
      IF NextCount <> 0 THEN
        ItemLedgerEntry.NEXT(NextCount);
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,ActivityType);
      WarehouseActivityLine.FINDSET;
      REPEAT
        WarehouseActivityLine.TESTFIELD("Serial No.",ItemLedgerEntry."Serial No.");
        WarehouseActivityLine.TESTFIELD("Lot No.",ItemLedgerEntry."Lot No.");
        WarehouseActivityLine.TESTFIELD("Expiration Date",ItemLedgerEntry."Expiration Date");
        WarehouseActivityLine.TESTFIELD(Quantity,ItemLedgerEntry.Quantity);
        ActualQuantity += WarehouseActivityLine.Quantity;
        ItemLedgerEntry.NEXT;
      UNTIL WarehouseActivityLine.NEXT = 0;
      Assert.AreEqual(ExpectedQuantity,ActualQuantity,ValueMustBeEqualTxt);
    END;

    LOCAL PROCEDURE VerifyPutAwayLine@260(SourceNo@1003 : Code[20];ActionType@1005 : Option;ItemNo@1002 : Code[20];Quantity@1001 : Decimal;BinCode@1004 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",SourceNo,
        WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
      WarehouseActivityLine.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyPostedWhseShipmentLine@74(SourceDocument@1006 : Option;SourceNo@1005 : Code[20];ItemNo@1003 : Code[20];Quantity@1002 : Decimal;VariantCode@1001 : Code[10]);
    VAR
      PostedWhseShipmentLine@1000 : Record 7323;
    BEGIN
      PostedWhseShipmentLine.SETRANGE("Source Document",SourceDocument);
      PostedWhseShipmentLine.SETRANGE("Source No.",SourceNo);
      PostedWhseShipmentLine.SETRANGE("Item No.",ItemNo);
      PostedWhseShipmentLine.FINDFIRST;
      PostedWhseShipmentLine.TESTFIELD(Quantity,Quantity);
      PostedWhseShipmentLine.TESTFIELD("Variant Code",VariantCode);
    END;

    LOCAL PROCEDURE VerifyPurchaseLine@374(VAR PurchaseLine@1004 : Record 39;ItemNo@1003 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      PurchaseLine.SETRANGE("No.",ItemNo);
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedSalesInvoiceLine@375(ItemNo@1003 : Code[20];Quantity@1000 : Decimal);
    VAR
      SalesInvoiceLine@1001 : Record 113;
    BEGIN
      SalesInvoiceLine.SETRANGE("No.",ItemNo);
      SalesInvoiceLine.FINDFIRST;
      SalesInvoiceLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedSalesCreditMemoLine@105(DocumentNo@1003 : Code[20];ItemNo@1000 : Code[20];Quantity@1002 : Decimal);
    VAR
      SalesCrMemoLine@1004 : Record 115;
    BEGIN
      SalesCrMemoLine.SETRANGE("Document No.",DocumentNo);
      SalesCrMemoLine.SETRANGE("No.",ItemNo);
      SalesCrMemoLine.FINDFIRST;
      SalesCrMemoLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyProductionOrderComponent@228(ProductionOrderNo@1000 : Code[20];ItemNo@1001 : Code[20];ExpectedQuantity@1003 : Decimal);
    VAR
      ProdOrderComponent@1005 : Record 5407;
    BEGIN
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrderNo);
      ProdOrderComponent.TESTFIELD("Item No.",ItemNo);
      ProdOrderComponent.TESTFIELD("Expected Quantity",ExpectedQuantity);
    END;

    LOCAL PROCEDURE VerifyProdOrderRoutingLine@209(Location@1008 : Record 14;OperationNo@1001 : Code[10];Type@1004 : Option;RoutingNo@1000 : Code[20]);
    VAR
      ProdOrderRoutingLine@1002 : Record 5409;
    BEGIN
      ProdOrderRoutingLine.SETRANGE("Operation No.",OperationNo);
      ProdOrderRoutingLine.SETRANGE(Type,Type);
      ProdOrderRoutingLine.SETRANGE("No.",RoutingNo);
      ProdOrderRoutingLine.FINDFIRST;
      ProdOrderRoutingLine.TESTFIELD("Open Shop Floor Bin Code",Location."Open Shop Floor Bin Code");
      ProdOrderRoutingLine.TESTFIELD("From-Production Bin Code",Location."From-Production Bin Code");
      ProdOrderRoutingLine.TESTFIELD("To-Production Bin Code",Location."To-Production Bin Code");
    END;

    LOCAL PROCEDURE VerifyQuantityInPickWorksheetPage@311(ItemNo@1001 : Code[20];AvailableQtyToPick@1002 : Decimal);
    VAR
      PickWorksheet@1000 : TestPage 7345;
    BEGIN
      PickWorksheet.OPENEDIT;
      PickWorksheet.FILTER.SETFILTER("Item No.",ItemNo);
      PickWorksheet."Qty. to Handle".ASSERTEQUALS(AvailableQtyToPick);
      PickWorksheet.Control52.ASSERTEQUALS(AvailableQtyToPick); // Control52 is Available Qty. To Pick
    END;

    LOCAL PROCEDURE VerifyRegisteredPickLine@89(SourceDocument@1005 : Option;SourceNo@1001 : Code[20];ActionType@1007 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;VariantCode@1004 : Code[10];BinCode@1006 : Code[20]);
    VAR
      RegisteredWhseActivityLine@1000 : Record 5773;
    BEGIN
      FindRegisteredWhseActivityLine(
        RegisteredWhseActivityLine,SourceDocument,SourceNo,RegisteredWhseActivityLine."Activity Type"::Pick,ActionType,ItemNo,BinCode);
      RegisteredWhseActivityLine.TESTFIELD(Quantity,Quantity);
      RegisteredWhseActivityLine.TESTFIELD("Variant Code",VariantCode);
    END;

    LOCAL PROCEDURE VerifyTotalQuantityBaseOnRegisteredPickLines@320(BinCode@1007 : Code[20];ItemNo@1002 : Code[20];TotalQtyBase@1003 : Decimal);
    VAR
      RegisteredWhseActivityLine@1000 : Record 5773;
    BEGIN
      WITH RegisteredWhseActivityLine DO BEGIN
        SETRANGE("Activity Type","Activity Type"::Pick);
        SETRANGE("Bin Code",BinCode);
        SETRANGE("Item No.",ItemNo);
        CALCSUMS("Qty. (Base)");
        Assert.AreEqual(TotalQtyBase,"Qty. (Base)",ValueMustBeEqualTxt);
      END;
    END;

    LOCAL PROCEDURE VerifyRegisteredPickLines@62(SourceDocument@1005 : Option;SourceNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;VariantCode@1004 : Code[10];BinCode@1006 : Code[20];BinCode2@1007 : Code[20]);
    VAR
      RegisteredWhseActivityLine@1000 : Record 5773;
    BEGIN
      VerifyRegisteredPickLine(
        SourceDocument,SourceNo,RegisteredWhseActivityLine."Action Type"::Take,ItemNo,Quantity,VariantCode,BinCode);
      VerifyRegisteredPickLine(
        SourceDocument,SourceNo,RegisteredWhseActivityLine."Action Type"::Place,ItemNo,Quantity,VariantCode,BinCode2);
    END;

    LOCAL PROCEDURE VerifyRegisteredPickLineForQtyAndBinCode@393(Item@1007 : Record 27;DocumentNo@1005 : Code[20];ActionType@1006 : Option;LotNo@1003 : Code[20];Quantity@1002 : Decimal;BinCode@1000 : Code[20]);
    VAR
      RegisteredWhseActivityLine@1001 : Record 5773;
    BEGIN
      FindRegisteredWhseActivityLineForLotAndUOM(
        RegisteredWhseActivityLine,RegisteredWhseActivityLine."Source Document"::"Outbound Transfer",DocumentNo,
        RegisteredWhseActivityLine."Activity Type"::Pick,ActionType,Item."No.",Item."Base Unit of Measure",LotNo);
      RegisteredWhseActivityLine.TESTFIELD(Quantity,Quantity);
      RegisteredWhseActivityLine.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyRegisteredPutAwayLine@173(ActionType@1004 : Option;SourceNo@1001 : Code[20];ItemNo@1002 : Code[20];BinCode@1006 : Code[20];Quantity@1003 : Decimal);
    VAR
      RegisteredWhseActivityLine@1000 : Record 5773;
    BEGIN
      FindRegisteredWhseActivityLine(
        RegisteredWhseActivityLine,RegisteredWhseActivityLine."Source Document"::"Purchase Order",SourceNo,
        RegisteredWhseActivityLine."Activity Type"::"Put-away",ActionType,ItemNo,BinCode);
      RegisteredWhseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyRequisitionLine@254(ItemNo@1000 : Code[20];Quantity@1002 : Decimal);
    VAR
      RequisitionLine@1003 : Record 246;
    BEGIN
      FindRequisitionLine(RequisitionLine,ItemNo);
      RequisitionLine.TESTFIELD("Accept Action Message",TRUE);
      RequisitionLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyReservationEntry@193(ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];ReservationStatus@1003 : Option;Quantity@1004 : Decimal;SourceID@1005 : Code[20]);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Location Code",LocationCode);
      ReservationEntry.SETRANGE("Reservation Status",ReservationStatus);
      IF SourceID <> '' THEN
        ReservationEntry.SETRANGE("Source ID",SourceID);
      ReservationEntry.FINDFIRST;
      ReservationEntry.TESTFIELD("Quantity (Base)",Quantity);
    END;

    LOCAL PROCEDURE VerifyReportForUndoShipmentWithLotTracking@321(ReportNameOption@1002 : Option;LotNoElementName@1011 : Text;QuantityElementName@1010 : Text);
    VAR
      Item@1009 : Record 27;
      SalesHeader@1007 : Record 36;
      LotNo@1005 : ARRAY [3] OF Code[20];
      DocumentNo@1004 : Code[20];
      Quantity@1003 : ARRAY [3] OF Decimal;
      i@1001 : Integer;
      DocType@1000 : 'Sales Quote,Sales Order,Sales Invoice,Sales Credit Memo,Sales Return Order,Sales Post. Shipment,Sales Post. Invoice,Purch. Quote,Purch. Order,Purch. Invoice,Purch. Credit Memo,Purch. Return Order';
    BEGIN
      Initialize;
      // Setup: Create and post a Purchase Order with 2 different Lot Tracking
      // 1st Line: Quantity[2], Lot[2]
      // 2nd Line: Quantity[2], Lot[3]
      PostPurchaseOrderWithTwoLot(Item,Quantity,LotNo,TRUE,FALSE);

      // Create and post a Sales Order with 2 lines with previous Lot Nos.
      LibraryVariableStorage.Enqueue(ItemTrackingMode::AssignManualTwoLotNo); // Enqueue ItemTrackingMode for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(LotNo[2]);
      LibraryVariableStorage.Enqueue(LotNo[3]);
      CreateSalesDocument(
        SalesHeader,SalesHeader."Document Type"::Order,'',Item."No.",Quantity[2] * 2,'','',TRUE,ReservationMode::" ");
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE); // Post as Ship

      // Undo the Posted Sales Shipment.
      UndoSalesShipmentLine(DocumentNo,UndoShipmentConfirmMessageQst);

      // Exercise: Run Sales Shipment Report / Item Tracking Appendix Report.
      CASE ReportNameOption OF
        ReportName::SalesShipment:
          RunSalesShipmentReport(DocumentNo,TRUE,FALSE,TRUE); // ShowInternalInformation=TRUE, LogInteraction=FALSE, ShowCorrectionLines=TRUE
        ReportName::ItemTrackingAppendix:
          RunItemTrackingAppendixReport(DocType::"Sales Post. Shipment",DocumentNo);
      END;

      // Verify: Verify Quantity and "Correction" Quantity are correct for the Lot Nos. in Report.
      LibraryReportDataset.LoadDataSetFile;
      FOR i := 2 TO 3 DO
        VerifyUndoTrackingQuantity(LotNoElementName,LotNo[i],QuantityElementName,Quantity[i]);
    END;

    LOCAL PROCEDURE VerifySalesLine@252(DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;QtyToShip@1004 : Decimal);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document No.",DocumentNo);
      FilterSalesLine(SalesLine,ItemNo);
      SalesLine.FINDFIRST;
      SalesLine.TESTFIELD(Quantity,Quantity);
      SalesLine.TESTFIELD("Qty. to Invoice",QtyToShip);
      SalesLine.TESTFIELD("Qty. to Ship",QtyToShip);
    END;

    LOCAL PROCEDURE VerifySalesInvoiceLine@45(ItemNo@1001 : Code[20];Quantity@1002 : Decimal;UnitOfMeasureCode@1003 : Code[10]);
    VAR
      SalesInvoiceLine@1000 : Record 113;
    BEGIN
      SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::Item);
      SalesInvoiceLine.SETRANGE("No.",ItemNo);
      SalesInvoiceLine.FINDFIRST;
      SalesInvoiceLine.TESTFIELD(Quantity,Quantity);
      SalesInvoiceLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
    END;

    LOCAL PROCEDURE VerifyNoOfPicks@13(LocationCode@1000 : Code[10];ExpectedNoOfPicks@1004 : Integer);
    VAR
      ActualNoOfPicks@1003 : Integer;
    BEGIN
      GetNoOfPicksOnLocation(ActualNoOfPicks,LocationCode);
      Assert.AreEqual(ExpectedNoOfPicks,ActualNoOfPicks,ValueMustBeEqualTxt);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntry@127(Bin@1002 : Record 7354;EntryType@1001 : Option;ItemNo@1004 : Code[20];LotNo@1003 : Code[20];Quantity@1005 : Decimal);
    VAR
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Entry Type",EntryType);
      WarehouseEntry.SETRANGE("Zone Code",Bin."Zone Code");
      WarehouseEntry.SETRANGE("Bin Code",Bin.Code);
      WarehouseEntry.SETRANGE("Lot No.",LotNo);
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.FINDFIRST;
      WarehouseEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehousePickLine@12(SourceDocument@1006 : Option;SourceNo@1003 : Code[20];ActionType@1005 : Option;ItemNo@1002 : Code[20];Quantity@1001 : Decimal;VariantCode@1007 : Code[10];BinCode@1004 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      FindWarehouseActivityLine(WarehouseActivityLine,SourceDocument,SourceNo,WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
      WarehouseActivityLine.TESTFIELD("Variant Code",VariantCode);
      WarehouseActivityLine.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyWarehousePickLines@51(SourceDocument@1006 : Option;SourceNo@1005 : Code[20];ItemNo@1003 : Code[20];Quantity@1002 : Decimal;VariantCode@1001 : Code[10];BinCode@1000 : Code[20];BinCode2@1007 : Code[20]);
    VAR
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      VerifyWarehousePickLine(SourceDocument,SourceNo,WarehouseActivityLine."Action Type"::Take,ItemNo,Quantity,VariantCode,BinCode);
      VerifyWarehousePickLine(SourceDocument,SourceNo,WarehouseActivityLine."Action Type"::Place,ItemNo,Quantity,VariantCode,BinCode2);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntriesWithMultipleLotNo@302(EntryType@1003 : Option;ItemNo@1002 : Code[20];LotNo@1001 : ARRAY [4] OF Code[10];Quantity@1000 : Decimal);
    VAR
      ItemLedgerEntry@1004 : Record 32;
      i@1005 : Integer;
    BEGIN
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,ItemNo);
      FOR i := 1 TO 4 DO BEGIN
        ItemLedgerEntry.TESTFIELD("Lot No.",LotNo[i]);
        ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
        ItemLedgerEntry.NEXT;
      END;
    END;

    LOCAL PROCEDURE VerifyUndoTrackingQuantity@366(LotNoElementName@1002 : Text;LotNo@1001 : Code[20];QuantityElementName@1003 : Text;Quantity@1000 : Decimal);
    BEGIN
      LibraryReportDataset.SetRange(LotNoElementName,LotNo);
      LibraryReportDataset.SetRange(QuantityElementName,-Quantity);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue(QuantityElementName,-Quantity);
    END;

    LOCAL PROCEDURE VerifyQtyToPickEqualsTo@405(ItemNo@1000 : Code[20];ExpectedQty@1001 : Decimal);
    VAR
      WarehouseShipmentLine@1003 : Record 7321;
      PickQtySum@1002 : Decimal;
    BEGIN
      WITH WarehouseShipmentLine DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDSET;
        REPEAT
          CALCFIELDS("Pick Qty.");
          PickQtySum += "Pick Qty.";
        UNTIL NEXT = 0;
      END;
      Assert.AreEqual(ExpectedQty,PickQtySum,ValueMustBeEqualTxt);
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreatePageHandler@123(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    VAR
      DequeueVariable@1002 : Variant;
      CreateNewLotNo@1001 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      CreateNewLotNo := DequeueVariable;
      EnterQuantityToCreate.CreateNewLotNo.SETVALUE(CreateNewLotNo);
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@108(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      QtyBase@1002 : Variant;
      Quantity@1003 : Decimal;
    BEGIN
      ItemTrackingMode := LibraryVariableStorage.DequeueInteger;
      CASE ItemTrackingMode OF
        ItemTrackingMode::AssignLotNo:
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;
            LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);
          END;
        ItemTrackingMode::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
        ItemTrackingMode::AssignSerialNo:
          BEGIN
            Quantity := ItemTrackingLines.Quantity3.ASDECIMAL;
            REPEAT
              CreateItemTrackingLine(ItemTrackingLines);
              ItemTrackingLines.NEXT;
              Quantity -= 1;
            UNTIL Quantity = 0;
          END;
        ItemTrackingMode::ApplyFromItemEntry:
          BEGIN
            UpdateLotNoOnItemTrackingLine(ItemTrackingLines);
            ItemTrackingLines."Quantity (Base)".SETVALUE(ItemTrackingLines.Quantity3.ASDECIMAL);
            ItemTrackingLines."Appl.-from Item Entry".LOOKUP;
          END;
        ItemTrackingMode::AssignAutoSerialNo:
          BEGIN
            LibraryVariableStorage.Enqueue(FALSE);  // Enqueue for EnterQuantityToCreatePageHandler.
            ItemTrackingLines."Assign Serial No.".INVOKE;
          END;
        ItemTrackingMode::AssignAutoLotAndSerialNo:
          BEGIN
            LibraryVariableStorage.Enqueue(TRUE);  // Enqueue for EnterQuantityToCreatePageHandler.
            ItemTrackingLines."Assign Serial No.".INVOKE;
          END;
        ItemTrackingMode::AssignManualLotNo:
          BEGIN
            UpdateLotNoOnItemTrackingLine(ItemTrackingLines);
            ItemTrackingLines."Quantity (Base)".SETVALUE(ItemTrackingLines.Quantity3.ASDECIMAL);
          END;
        ItemTrackingMode::AssignManualTwoLotNo:
          BEGIN
            UpdateLotNoOnItemTrackingLine(ItemTrackingLines);
            ItemTrackingLines."Quantity (Base)".SETVALUE(ItemTrackingLines.Quantity3.ASDECIMAL / 2);
            ItemTrackingLines.NEXT;
            UpdateLotNoOnItemTrackingLine(ItemTrackingLines);
            ItemTrackingLines."Quantity (Base)".SETVALUE(ItemTrackingLines.Quantity3.ASDECIMAL);
          END;
        ItemTrackingMode::AssignTwoLotNo:
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;
            ItemTrackingLines."Quantity (Base)".SETVALUE(ItemTrackingLines."Quantity (Base)".ASDECIMAL / 2);
            ItemTrackingLines."Assign Lot No.".INVOKE;
          END;
        ItemTrackingMode::SelectEntriesForMultipleLines:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines.NEXT;
            ItemTrackingLines."Select Entries".INVOKE;
          END;
        ItemTrackingMode::UpdateQty:
          BEGIN
            LibraryVariableStorage.Dequeue(QtyBase);
            ItemTrackingLines.FIRST;
            ItemTrackingLines."Quantity (Base)".SETVALUE(QtyBase);
          END;
        ItemTrackingMode::PartialAssignManualTwoLotNo:
          BEGIN
            UpdateLotNoOnItemTrackingLine(ItemTrackingLines);
            ItemTrackingLines."Quantity (Base)".SETVALUE(ItemTrackingLines.Quantity3.ASDECIMAL / 4);
            ItemTrackingLines.NEXT;
            UpdateLotNoOnItemTrackingLine(ItemTrackingLines);
            ItemTrackingLines."Quantity (Base)".SETVALUE(ItemTrackingLines.Quantity3.ASDECIMAL / 3);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WhseItemTrackingLinesPageHandler@392(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    BEGIN
      WhseItemTrackingLines."Lot No.".SETVALUE(LibraryVariableStorage.DequeueText);
      WhseItemTrackingLines.Quantity.SETVALUE(LibraryVariableStorage.DequeueDecimal);
      WhseItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@118(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE SalesShipmentReportHandler@350(VAR SalesShipment@1000 : TestRequestPage 208);
    BEGIN
      SalesShipment.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ServiceShipmentReportHandler@337(VAR ServiceShipment@1000 : TestRequestPage 5913);
    BEGIN
      ServiceShipment.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [ModalPageHandler]
    PROCEDURE SelectLotOnItemTrackingSummaryPageHandler@305(VAR ItemTrackingSummary@1000 : TestPage 6500);
    VAR
      LotNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(LotNo);
      ItemTrackingSummary.FILTER.SETFILTER("Lot No.",LotNo);
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedSalesDocumentLinesPageHandler@154(VAR PostedSalesDocumentLines@1000 : TestPage 5850);
    BEGIN
      PostedSalesDocumentLines.OK.INVOKE;
    END;

    LOCAL PROCEDURE WarehousePutAwayWithTwoLotItemTracking@363(VAR Item@1003 : Record 27;VAR Item2@1002 : Record 27;Quantity@1001 : Decimal);
    VAR
      PurchaseHeader@1007 : Record 38;
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      CreateAndReleasePurchaseOrderWithTwoLotItemTracking(PurchaseHeader,Item,Item2,Quantity);
      CreateAndPostWarehouseReceiptFromPurchaseOrder(PurchaseHeader,FALSE,ItemTrackingMode::AssignTwoLotNo);

      // Find Put-away Place lines
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Place);
      FindWarehouseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",
        PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");

      // Split Place lines and place item into different bins
      REPEAT
        SplitPutAwayLineAndUpdateZoneCodeAndBinCodeForPlace(WarehouseActivityLine,WarehouseActivityLine.Quantity / 2);
      UNTIL WarehouseActivityLine.NEXT = 0;

      // Register Put Away.
      RegisterWarehouseActivity(
        WarehouseActivityLine,WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@57(Message@1000 : Text[1024]);
    VAR
      DequeueVariable@1002 : Variant;
      LocalMessage@1001 : Text[1024];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LocalMessage := DequeueVariable;
      Assert.IsTrue(STRPOS(Message,LocalMessage) > 0,Message);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerNo@35(ConfirmMessage@1000 : Text[1024];VAR Reply@1003 : Boolean);
    VAR
      DequeueVariable@1002 : Variant;
      LocalMessage@1001 : Text[1024];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LocalMessage := DequeueVariable;
      Assert.IsTrue(STRPOS(ConfirmMessage,LocalMessage) > 0,ConfirmMessage);
      Reply := FALSE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@61(VAR Reservation@1000 : TestPage 498);
    VAR
      DequeueVariable@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueVariable);
      ReservationMode := DequeueVariable;
      CASE ReservationMode OF
        ReservationMode::ReserveFromCurrentLine:
          Reservation."Reserve from Current Line".INVOKE;
        ReservationMode::AutoReserve:
          Reservation."Auto Reserve".INVOKE;
      END;
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ProductionJournalHandler@56(VAR ProductionJournal@1000 : TestPage 5510);
    BEGIN
      LibraryVariableStorage.Enqueue(PostJournalLinesConfirmationTxt);  // Enqueue for ConfirmHandler.
      LibraryVariableStorage.Enqueue(JournalLinesPostedTxt);  // Enqueue for MessageHandler.
      ProductionJournal.Post.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@55(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);
      Assert.IsTrue(STRPOS(ConfirmMessage,ExpectedMessage) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemLedgerEntriesHandler@82(VAR ItemLedgerEntries@1000 : TestPage 38);
    BEGIN
      ItemLedgerEntries.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE ItemTrackingAppendixRequestPageHandler@324(VAR ItemTrackingAppendix@1000 : TestRequestPage 6521);
    VAR
      Document@1001 : Variant;
      DocumentNo@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Document);
      LibraryVariableStorage.Dequeue(DocumentNo);
      ItemTrackingAppendix.Document.SETVALUE(Document);
      ItemTrackingAppendix.DocumentNo.SETVALUE(DocumentNo);
      ItemTrackingAppendix.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE WhseSourceCreateDocumentPageHandler@132(VAR WhseSourceCreateDocument@1000 : TestRequestPage 7305);
    BEGIN
      WhseSourceCreateDocument.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CreateInventoryPutAwayPickHandler@221(VAR CreateInvtPutAwayPickMvmt@1000 : TestRequestPage 7323);
    BEGIN
      CreateInvtPutAwayPickMvmt.CInvtPick.SETVALUE(TRUE);
      CreateInvtPutAwayPickMvmt.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerAsTrue@263(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE
    END;

    [StrMenuHandler]
    PROCEDURE InboundOutboundHandler@327(Option@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := 1; // 1 for Outbound Reservation.
    END;

    [StrMenuHandler]
    PROCEDURE ExplodeBOMHandler@348(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := 1; // 1 for 'Retrieve dimensions from Components'
    END;

    LOCAL PROCEDURE CreateBaseUnitOfMeasure@347(VAR UnitOfMeasure@1000 : Record 204;VAR Item@1001 : Record 27);
    BEGIN
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      Item.VALIDATE("Base Unit of Measure",UnitOfMeasure.Code);
      Item.MODIFY;
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
      Test Cases for SCM Warehouse.
      1. Test the functionality of creating Pick from Pick Worksheet after Get Source Document with Sales and Transfer Order together with Variant.
      2. Test the functionality of creating Pick from Pick Worksheet with Max No. Of Lines for Transfer Order with multiple lines.
      3. Test the functionality of creating Pick from Pick Worksheet after Get Source Document for Released Production Order with Variant.
      4. Test the functionality of register Pick from Pick Worksheet after Get Source Document for Released Production Order with Variant.
      5. Test the functionality of creating Pick from Pick Worksheet for Warehouse Internal Pick after register Movement with Variant.
      6. Test the functionality of register Pick from Pick Worksheet for Warehouse Internal Pick after register Movement with Variant.
      7. Test the functionality of posting Warehouse Shipment as Invoice with different Purchase Unit of Measure with Lot No.
      8. Test the error message Item Tracking not enabled on Item on Warehouse Pick with Serial No.
      9. Test the functionality of posting Warehouse Shipment from Sales Order with Sales Lines reserved with Serial No.
      10. Test the functionality of register Pick from Warehouse Shipment by Get Source Purchase Return Order with Variant.
      11. Test the functionality of post Warehouse Shipment after register Pick from Warehouse Shipment by Get Source Purchase Return Order with Variant.
      12. Test the functionality of register Pick from Warehouse Shipment by Get Source Transfer Order with Variant.
      13. Test the functionality of post Warehouse Shipment after register Pick from Warehouse Shipment by Get Source Transfer Order with Variant.
      14. Test the functionality of register Pick from Sales Order with Auto Reserve after registering Put-Away from Purchase Order with Bin Code modified on Put-Away line.
      15. Test to verify Item Ledger Entries and Posted Sales Credit Memo Line after Registered Pick and Released Sales Credit Memo with Lot No.
      16. Test to verify Registered Warehouse Activity Lines and Item Ledger Entries after Registered Pick from Released Production Order.
      17. Test to verify Warehouse Pick according to FEFO with Serial Item Tracking using different Expiration Date.
      18. Test to verify Warehouse Pick according to FEFO with Serial Item Tracking using same Expiration Date.
      19. Test to verify Warehouse Pick according to FEFO with Lot and Serial Item Tracking using different Expiration Date.
      20. Test to verify Warehouse Pick according to FEFO with Lot and Serial Item Tracking using same Expiration Date.
      21. Test to verify Inventory Pick according to FEFO with Serial Item Tracking using different Expiration Date.
      22. Test to verify Inventory Pick according to FEFO with Serial Item Tracking using same Expiration Date.
      23. Test to verify Inventory Pick according to FEFO with Lot and Serial Item Tracking using different Expiration Date.
      24. Test to verify Inventory Pick according to FEFO with Lot and Serial Item Tracking using same Expiration Date.
      25. Test to verify Inventory Pick according to FEFO with Lot Item Tracking using different Expiration Date.
      26. Test to verify Inventory Pick according to FEFO with Lot Item Tracking using same Expiration Date.
      27. Test to verify Movement according to FEFO with Serial Item Tracking using different Expiration Date.
      28. Test to verify Movement according to FEFO with Serial Item Tracking using same Expiration Date.
      29. Test to verify Movement according to FEFO with Lot and Serial Item Tracking using different Expiration Date.
      30. Test to verify Movement according to FEFO with Lot and Serial Item Tracking using same Expiration Date.
      31. Test to verify Movement according to FEFO with Lot Item Tracking using different Expiration Date.
      32. Test to verify Movement according to FEFO with Lot Item Tracking using same Expiration Date.
      33. Test to verify Register Put Away after Split Put Away Line.
      34. Test to verify Register Pick after Split Put Away Line.
      35. Test to verify Register Pick for Quantity Reserved against Sales Order with Always Create Pick Line as False.
      36. Test to verify Register Pick for Quantity Reserved against Sales Order with Always Create Pick Line as True.
      37. Test to verify Post Warehouse Receipt from Transfer Order with Multiple Lots.
      38. Test to verify Register Partial Put Away From Transfer Order with Multiple Lots.
      39. Test to verify Register Remaining Put Away From Transfer Order with Multiple Lots.
      40. Test to verify Inventory Put Away from Sales Return Order after Get Posted Document Lines to Reverse.
      41. Test to verify Post Transfer Order with Different Dimension Code.
      42. Test to verify Item Ledger Entry after post Item Journal Line on different Location.
      43. Test to verify Reservation Entry before posting Transfer Order with Receipt Date greater than Posting Date.
      44. Test to verify Reservation Entry after posting Transfer Order with Receipt Date greater than Posting Date.
      45. Test to verify Reservation Entry before posting Item Journal with Work Date as Posting Date.
      46. Test to verify Reservation Entry after posting Item Journal with Work Date as Posting Date.
      47. Test to verify Reservation Entry after running Calculate Regenerative Plan on Planning Worksheet.
      48. Test to verify Reservation Entry after posting Transfer Order as receive.
      49. Test to Verify Item Ledger Entry after post Item Journal Line with UOM conversion.
      50. Test to Verify Item Ledger Entry after change status of Production Order from Firm Plan to released and create Inventory pick From Released Production Order.
      51. Test to verify Production Order Routing Line after create and refresh Production Order with Routing.
      52. Test to verify Production Order Component Line after create and refresh Production Order with White location.
      53. Test to verify Warehouse Activity Line after create and refresh Production Order and create warehouse pick from Production Order.
      54. Test to verify Requisition Line after get Sales Order for Drop Shipment on Requisition Worksheet.
      55. Test to verify Qty. to Ship and Qty. to Invoice blank on Sales Order by using Drop Shipment function when Default Quantity to Ship is set to blank on Sales & Receivable Setup.
      56. Test to verify Sales Order must not create when make order from Sales Quote with Item is blocked.
      57. Test to verify Sales Order must not create when make order from Blanket Sales Order with Item is blocked.
      58. Test to verify Purchase Order must not create when make order from Purchase Quote with Item is blocked.
      59. Test to verify Purchase Order must not create when make order from Blanket Purchase Order with Item is blocked.
      60. Test to verify Item Ledger Entry after post Item Journal Line with serial number and quantity on different Bin.
      61. Test to verify Warehouse Pick lines with Item Tracking define in combination of Lot No and Serial No when Items takes from Multiple Bins Code.
      62. Test to verify Editable Property on page Vendor Hist. Buy-from Fact Box.
      63. Test to verify Put Away after register Warehouse Receipt from Sales Order.
      64. Test to verify Pick after register Put Away from Sales Order.
      65. Test PostiveAdjmt Quantity on Whse Entry after undo Sales Shipment Line with Partial Qty when Items are created with Lot and Serial specific.
      66. Test PostiveAdjmt Quantity on Whse Entry after undo Sales Shipment Line with Full Qty when Items are created with Lot and Serial specific.
      67. Test PostiveAdjmt Quantity on Whse Entry after undo Sales Shipment Line with Partial Qty when Items are created with Serial and Lot specific.
      68. Test PostiveAdjmt Quantity on Whse Entry after undo Sales Shipment Line with Full Qty when Items are created with Serial and Lot specific.
      69. Test PostiveAdjmt Quantity on Whse Entry after undo Sales Shipment Line with Partial Qty when Items are created with Serial specific.
      70. Test PostiveAdjmt Quantity on Whse Entry after undo Sales Shipment Line with Full Qty when Items are created with Serial specific.
      71. Test PostiveAdjmt Quantity on Whse Entry after undo Sales Shipment Line with Partial Qty when Items are created with Lot specific.
      72. Test PostiveAdjmt Quantity on Whse Entry after undo Sales Shipment Line with Full Qty when Items are created with Lot specific.
      73. Test to verify posting Warehouse Shipment for other picked items should be allowed when there is a not picked Assemble-to-Order item.
      74. Test to verify Register Pick successfully with mutiple Lot Item Tracking and different Bins
      75. Test to verify Error message should be pop up when updating Purchase Code to Drop Shipment after posting Warehouse Shipment for sales order
      76. Test to verify Error message should be pop up when updating Purchase Code to Special Order after posting Warehouse Shipment for sales order
      77. Test to verify Purchase Code can be changed successfully if update Quantity to greater in sales line after posting Warehouse Shipment for sales order
      78. Test to verify Available Qty. to Take in Pick Worksheet is consist with Pick lines created by shipment for BreakBulk item
      79. Test to verify no error pops up when you post Sales Invoice for Drop Shipment with negative quantity
      80. Test to verify no error pops up when you post Sales Invoice for Special Order with negative quantity
      81. Test to verify Register Pick successfully with mutiple Lot Item Tracking.
      82. Test to verify there is no error when Splitting Line on Warehouse Pick with multiple UOM and Lot tracking
      83. Test to verify Bin Code should be populated from Work Center when both Work Center and Location have setup the Bin Code.
      84. Test to verify Bin Code should be populated from Location when Location has setup the Bin Code and has a Default Bin for Component Item.
      85. Test to verify Correction Quantity is correct for Lot tracking line in Report 208 (Sales - Shipment)
      86. Test to verify Correction Quantity is correct for Lot tracking line in Report 6521 (Item Tracking Appendix)
      87. Test to verify Correction Quantity is correct for Lot tracking line with Undo Shipment in Report 5913 (Service - Shipment)
      88. Test to verify Correction Quantity is correct for Lot tracking line with Undo Consumption in Report 5913 (Service - Shipment)
      89. Test to verify total Quantity(Base) in Shipment Bin on Registered Whse. Activity Lines is correct after register pick from multiple bins with UOM conversions and reservations.
      90. Verify that Shipment can be undone for Posted Warehouse Shipment with multiple lines with Items with 'Assemble-To-Order' Assembly Policy.
      91. Check that can pick Quantity if available when "Pick According to FEFO" set, Item with multiple UOMs.
      92. Check that cannot pick Quantity greater than available when "Pick According to FEFO" set.

      Covers Test Cases for WI - 298708
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                               TFS ID
      ---------------------------------------------------------------------------------------------------------------
      PickFromPickWorksheetForSalesAndTransferOrderWithVariant                                         128825
      CreatePickFromPickWorksheetWithMaxNoOfLinesForTransferOrderWithMultipleLines                     128825
      CreatePickFromPickWorksheetForReleasedProductionOrderWithVariant                                 128832,128792
      RegisterPickFromPickWorksheetForReleasedProductionOrderWithVariant                               128832,128792
      CreatePickFromPickWorksheetForWhseInternalPickAfterRegisterMovementWithVariant                   128832,128792
      RegisterPickFromPickWorksheetForWhseInternalPickAfterRegisterMovementWithVariant                 128832,128792

      Covers Test Cases for WI - 298686
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                               TFS ID
      ---------------------------------------------------------------------------------------------------------------
      PostWarehouseShipmentAsInvoiceWithDifferentPurchaseUnitOfMeasureAndLotNo                         128773

      Covers Test Cases for WI - 290339
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                               TFS ID
      ---------------------------------------------------------------------------------------------------------------
      PickFromWarehouseShipmentWithSerialNoAndItemTrackingNotEnabledOnItem                             128753
      PostShipmentFromSalesOrderWithSerialNoReservation                                                128753

      Covers Test Cases for WI - 301580
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                               TFS ID
      ---------------------------------------------------------------------------------------------------------------
      RegisterPickByGetSourcePurchaseReturnOrderWithVariant                                            128826
      PostShipmentAfterRegisterPickByGetSourcePurchaseReturnOrderWithVariant                           128826
      RegisterPickByGetSourceTransferOrderWithVariant                                                  128826
      PostShipmentAfterRegisterPickByGetSourceTransferOrderWithVariant                                 128826

      Covers Test Cases for WI - 301905
      ---------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                               TFS ID
      ---------------------------------------------------------------------------------------------------------------
      RegisterPickFromSalesOrderAfterAutoReserveWithBinCodeModifiedOnPutAwayLine                       143065

      Covers Test Cases for WI - 290077
      ------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      ------------------------------------------------------------------------------------------------
      PostSalesCreditMemoAgainstSalesInvoiceUsingLotItemTracking                              128747

      Covers Test Cases for WI - 302588
      ------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      ------------------------------------------------------------------------------------------------
      PostWarehouseShipmentAfterPostProductionJournalFromReleasedProductionOrder              290340

      Covers Test Cases for WI - 303146
      ------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      ------------------------------------------------------------------------------------------------
      WarehousePickAccordingToFEFOWithSerialItemTrackingUsingDifferentExpirationDate          129218
      WarehousePickAccordingToFEFOWithSerialItemTrackingUsingSameExpirationDate               129218
      WarehousePickAccordingToFEFOWithLotAndSerialItemTrackingUsingDifferentExpirationDate    129218
      WarehousePickAccordingToFEFOWithLotAndSerialItemTrackingUsingSameExpirationDate         129218
      InventoryPickAccordingToFEFOWithSerialItemTrackingUsingDifferentExpirationDate          129218
      InventoryPickAccordingToFEFOWithSerialItemTrackingUsingSameExpirationDate               129218
      InventoryPickAccordingToFEFOWithLotAndSerialItemTrackingUsingDifferentExpirationDate    129218
      InventoryPickAccordingToFEFOWithLotAndSerialItemTrackingUsingSameExpirationDate         129218
      InventoryPickAccordingToFEFOWithLotItemTrackingUsingDifferentExpirationDate             129218
      InventoryPickAccordingToFEFOWithLotItemTrackingUsingSameExpirationDate                  129218

      Covers Test Cases for WI - 304527
      ------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      ------------------------------------------------------------------------------------------------
      MovementAccordingToFEFOWithSerialItemTrackingUsingDifferentExpirationDate               129219
      MovementAccordingToFEFOWithSerialItemTrackingUsingSameExpirationDate                    129219
      MovementAccordingToFEFOWithLotAndSerialItemTrackingUsingDifferentExpirationDate         129219
      MovementAccordingToFEFOWithLotAndSerialItemTrackingUsingSameExpirationDate              129219
      MovementAccordingToFEFOWithLotItemTrackingUsingDifferentExpirationDate                  129219
      MovementAccordingToFEFOWithLotItemTrackingUsingSameExpirationDate                       129219

      Covers Test Cases for WI - 303148
      ------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      ------------------------------------------------------------------------------------------------
      RegisterPutAwayAfterSplitPutAwayLine                                                    128750
      RegisterPickAfterSplitPutAwayLine                                                       128750

      Covers Test Cases for WI - 309013
      ------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      ------------------------------------------------------------------------------------------------
      PickReservedSalesOrderWithoutAlwaysCreatePickLine                                       260269
      PickReservedSalesOrderWithAlwaysCreatePickLine                                          260269
      PostWarehouseReceiptFromTransferOrderWithMultipleLots                                   252776
      RegisterPartialPutAwayFromTransferOrderWithMultipleLots                                 252776
      RegisterRemainingPutAwayFromTransferOrderWithMultipleLots                               252776
      InventoryPutAwayFromSalesReturnOrder                                                    268343
      PostTransferOrderWithDifferentDimensionCode                                             273624

      Covers Test Cases for WI - 314868
      ------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      ------------------------------------------------------------------------------------------------
      PostItemJournalOnMultipleLocationWithLot                                                274829
      TransferOrderWithFirmPlannedProductionOrderWithSKU                                      274829
      PostTransferOrderWithFirmPlannedProductionOrderWithSKU                                  274829
      ReservationEntryBeforePostItemJournal                                                   274829
      ReservationEntryAfterPostItemJournal                                                    274829
      CalculateRegenerativePlanAfterShipTransferOrder                                         274829
      ReceiveTransferOrderAfterCalculateRegenerativePlan                                      274829

      Covers Test Cases for WI - 316159
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      UOMConversionAfterPostItemJournal                                                       265554
      UOMConversionAfterPostInventoryPickUsingRPO                                             265554

      Covers Test Cases for WI - 314876
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      PostInvtPickFromRPOUsingFirmPlannedProdOrder                                            185665,185989
      ReleasedProductionOrderAfterUpdateBinOnComponent                                        185991
      WhsePickOnProdOrderAfterUpdateBinOnComponentLine                                        185991

      Covers Test Cases for WI - 318115
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      RequisitionLineWithDefaultQuantityToShipAsBlank                                         282788
      PostPurchaseOrderWithDefaultQuantityToShipAsBlank                                       282788
      SalesQuoteMakeOrderWithBlockedItem                                                      274163
      BlanketSalesOrderMakeOrderWithBlockedItem                                               274163
      PurchaseQuoteMakeOrderWithBlockedItem                                                   274163
      BlanketPurchaseOrderMakeOrderWithBlockedItem                                            274163
      PostItemJournalWithItemOnDifferentBins                                                  266976
      RegisterPickWithItemOnDifferentBins                                                     266976
      VendorHistBuyFromFactBoxAsNonEditable                                                   251352

      Covers Test Cases for WI - 318116
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      PutAwayAfterRegisterWhseShipmentFromPurchaseOrder                                       286052
      PickAfterRegisterPutAwayFromPurchaseOrder                                               286052

      Covers Test Cases for Bug Id: 53761
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      UndoSalesShipmentLinePartialWithAsmItemLotAndItemtrackingSerial,
      UndoSalesShipmentLineFullWithAsmItemLotAndItemtrackingSerial,
      UndoSalesShipmentLinePartialWithAsmItemSerialAndItemtrackingSerial,
      UndoSalesShipmentLineFullWithAsmItemSerialAndItemtrackingSerial,
      UndoSalesShipmentLinePartialWithAsmItemSerialAndItemtrackingLot,
      UndoSalesShipmentLineFullWithAsmItemSerialAndItemtrackingLot,
      UndoSalesShipmentLinePartialWithAsmItemLotAndItemtrackingLot,
      UndoSalesShipmentLineFullWithAsmItemLotAndItemtrackingLot

      Covers Test Cases for SE Merge Bug
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      PostShipmentWithNotPickedAssembleToOrderItem                                             55519

      Covers Test Cases for HotFix Bug
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      RegisterPickWithMutipleLotItemTrackingAndDifferentBins                                   59010

      Covers Test Cases for HotFix Bug
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      UpdatePurchaseCodeWithDropShipmentAfterPostWarehouseShipment                             66340
      UpdatePurchaseCodeWithSpecialOrderAfterPostWarehouseShipment                             66340
      UpdateQuantityAndPurchaseCodeAfterPostWarehouseShipment                                  66340

      Covers Test Cases for HotFix Bug
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      AvailableQtyToTakeInPickWorksheetForBreakBulk                                           84276

      Covers Test Cases for HotFix Bug
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      PostSalesInvoiceWithDropShipmentAndNegativeQuantity                                     66337
      PostSalesInvoiceWithSpecialOrderAndNegativeQuantity                                     66337

      Covers Test Cases for SE Merge Bug
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      RegisterPickWithMutipleLotItemTrackingAndDifferentBOM                                   88480

      Covers Test Cases for HotFix Bug
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      SplitLineOnWarehousePickWithMultipleUOMAndLotTracking                                   89509

      Covers Test Cases for Merge Bug
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      CalcRegenPlanWithWorkCenterAndLocationHaveBinCode                                       89265
      CalcRegenPlanWithLocationHasBinCodeAndDefaultBin                                        89265

      Covers Test Cases for HotFix Bug
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      CorrectionQuantityForLotInReportSalesShipment                                           91760
      CorrectionQuantityForLotInReportItemTrackingAppendix                                    93756
      CorrectionQuantityForLotInReportServiceShipmentWithUndoShipment                         93918
      CorrectionQuantityForLotInReportServiceShipmentWithUndoConsumption                      94357

      Covers Test Cases for Merge Bug
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      RegisterPickFromMultipleBinsWithUOMConversionsAndReservations                           92298

      Covers Test Cases for Merge Bug
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      UndoShipmentWithMultipleAssembleToOrderItems                                            104515

      Covers Test Cases for Merge Bug
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                      TFS ID
      -----------------------------------------------------------------------------------------------------
      FEFOPickWithMultipleUOMs                                                                257748
      FEFOPickLotsWhenNoStockAvailable                                                        361973
      FEFOPickSerialsWhenNoStockAvailable                                                     361973
    }
    END.
  }
}

