OBJECT Codeunit 144052 e-TDS Document Transactions
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GeneralLedgerSetup@1500014 : Record 98;
      LibraryRandom@1500000 : Codeunit 130440;
      LibraryPurchase@1500002 : Codeunit 130512;
      LibraryTDS@1500010 : Codeunit 143000;
      LibraryVariableStorage@1500009 : Codeunit 131004;
      AccountErr@1500004 : TextConst 'ENU=Accounting Period Error Should Come';
      LibraryERM@1500001 : Codeunit 131300;
      LibraryUtility@1500007 : Codeunit 131000;
      LibraryLocation@1500012 : Codeunit 132209;
      LibraryServiceTax@1500013 : Codeunit 143001;
      LibraryJob@1500025 : Codeunit 131920;
      LibrarySetupStorage@1500026 : Codeunit 131009;
      isInitialized@1500005 : Boolean;
      CreditAmountErr@1500008 : TextConst '@@@="%1 and %2 = Credit Amount and Amount";ENU=The expected value is %1 and the actual value is %2.';
      TDSValueErr@1500003 : TextConst 'ENU=TDS Values are not matching';
      BlankVLEErr@1500006 : TextConst 'ENU=Vendor Ledger Entry Should be Blank';
      AmountErr@1500011 : TextConst '@@@="%1 and %2 = TDS% and TDS field Caption";ENU=%1 is incorrect in %2.';
      ServTaxReceivablesAccountLbl@1500023 : TextConst 'ENU=Rec.';
      ServTaxPayablesAccountLbl@1500022 : TextConst 'ENU=Pay.';
      ServTaxRecInterimAccountLbl@1500021 : TextConst 'ENU=Int.Rec.';
      ServTaxPayInterimAccountLbl@1500020 : TextConst 'ENU=Int.Pay.';
      ServTaxExpensesAccountLbl@1500019 : TextConst 'ENU=Expenses';
      SBCExpensesAccountLbl@1500018 : TextConst 'ENU=SBC Exp.';
      SBCPayablesAccountLbl@1500017 : TextConst 'ENU=SBC Pay.';
      SBCInterimAccountLbl@1500016 : TextConst 'ENU=SBC Int.';
      SBCPayInterimAccountLbl@1500015 : TextConst 'ENU=SBC PayInt';
      KKCRecAccountLbl@1500028 : TextConst 'ENU=KKC Rec.';
      KKCExpAccountLbl@1500029 : TextConst 'ENU=KKC Exp.';
      KKCIntmAccountLbl@1500030 : TextConst 'ENU=KKC Int.';
      KKCPayAccountLbl@1500031 : TextConst 'ENU=KKC Pay.';
      KKCRecIntAccountLbl@1500032 : TextConst 'ENU=KKC RecInt';

    [Test]
    PROCEDURE VerifyAccountingPeriodforJournals@1500023();
    VAR
      GenJournalTemplate@1500000 : Record 80;
      GenJournalLine@1500002 : Record 81;
      GenJournalLine2@1500007 : Record 81;
      GenJournalLine3@1500008 : Record 81;
      TDSNatureDeduction@1500004 : Record 13726;
      TDSNatureDeduction2@1500009 : Record 13726;
      TDSNatureDeduction3@1500010 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      NODNOCHeader2@1500011 : Record 13786;
      NODNOCHeader3@1500012 : Record 13786;
      TDSSetup@1500019 : Record 13728;
      Assert@1500017 : Codeunit 130000;
      Amount@1500006 : Decimal;
      AccountingError@1500013 : Text;
      AccountingError2@1500014 : Text;
      AccountingError3@1500015 : Text;
    BEGIN
      // [SCENARIO 64513] Validating TDS related fields availability when the Income Tax Accounting Period isn't specified. General Journal, Purchase Journal and Payment Journal
      // [FEATURE] [TDS] [General Journal,Purchase Journal,Payment Journal]
      Initialize;

      // [GIVEN] Created Setup for NODNOC and Assessee Code get Accountperiod Error for Expected Error.
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateAssesseeandNODNOCSetup(
        NODNOCHeader,TDSNatureDeduction,TDSSetup,'',CreateVendor,NODNOCHeader.Type::Vendor,WORKDATE);

      // [WHEN] Created General Journal Line
      ASSERTERROR CreateGeneralJournalLine(GenJournalLine,Amount,NODNOCHeader."No.",TDSNatureDeduction.Code,WORKDATE);
      AccountingError := GETLASTERRORTEXT;

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      LibraryTDS.CreateAssesseeandNODNOCSetup(
        NODNOCHeader2,TDSNatureDeduction2,TDSSetup,'',CreateVendor,NODNOCHeader.Type::Vendor,WORKDATE);

      // [WHEN] Created Purchase Journal Document
      ASSERTERROR CreatePurchaseJournalDocument(GenJournalLine2,
          GenJournalLine2."Document Type"::Invoice,GenJournalTemplate.Type::Purchases,Amount,NODNOCHeader2."No.",
          TDSNatureDeduction2.Code,WORKDATE);
      AccountingError2 := GETLASTERRORTEXT;

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      LibraryTDS.CreateAssesseeandNODNOCSetup(
        NODNOCHeader3,TDSNatureDeduction3,TDSSetup,'',CreateVendor,NODNOCHeader.Type::Vendor,WORKDATE);

      // [WHEN] Created Payment Journal
      ASSERTERROR CreatePurchaseJournalDocument(GenJournalLine3,
          GenJournalLine3."Document Type"::Invoice,GenJournalTemplate.Type::Payments,Amount,NODNOCHeader3."No.",
          TDSNatureDeduction3.Code,WORKDATE);
      AccountingError3 := GETLASTERRORTEXT;

      // [THEN] Accounting Period Error Created.
      Assert.AreEqual(GetIncomeTaxAccPeriod,AccountingError,AccountErr);
      Assert.AreEqual(GetIncomeTaxAccPeriod,AccountingError2,AccountErr);
      Assert.AreEqual(GetIncomeTaxAccPeriod,AccountingError3,AccountErr);
    END;

    [Test]
    PROCEDURE VerifyAccountingPeriodforPurchaseDocument@1500031();
    VAR
      TDSNatureDeduction@1500002 : Record 13726;
      TDSNatureDeduction2@1500005 : Record 13726;
      NODNOCHeader@1500003 : Record 13786;
      NODNOCHeader2@1500004 : Record 13786;
      PurchaseHeader@1500006 : Record 38;
      PurchaseHeader2@1500007 : Record 38;
      PurchaseLine@1500008 : Record 39;
      PurchaseLine2@1500009 : Record 39;
      ExpectedTDSEntry@1500010 : Record 13729;
      TDSSetup@1500015 : Record 13728;
      Assert@1500014 : Codeunit 130000;
      Amount@1500000 : Decimal;
      AccountingError@1500012 : Text;
      AccountingError2@1500013 : Text;
    BEGIN
      // [SCENARIO 64515] Validating TDS related fields availability when the Income Tax Accounting Period isn't specified. Purchase Order and Purchase Invoices
      // [FEATRUE] [TDS] [Purchasre Order]
      Initialize;

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateAssesseeandNODNOCSetup(
        NODNOCHeader,TDSNatureDeduction,TDSSetup,'',CreateVendor,NODNOCHeader.Type::Vendor,WORKDATE);

      // [WHEN] Created & Post Purchase Order & Invoice
      CreatePurchaseDocumentforTDS(PurchaseHeader,
        PurchaseLine,PurchaseHeader."Document Type"::Order,Amount,NODNOCHeader."No.",LibraryERM.CreateGLAccountNo,
        TDSNatureDeduction.Code,WORKDATE);
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,PurchaseLine.Amount);
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      AccountingError := GETLASTERRORTEXT;
      LibraryTDS.CreateAssesseeandNODNOCSetup(
        NODNOCHeader2,TDSNatureDeduction2,TDSSetup,'',CreateVendor,NODNOCHeader.Type::Vendor,WORKDATE);
      CreatePurchaseDocumentforTDS(PurchaseHeader2,
        PurchaseLine2,PurchaseHeader2."Document Type"::Invoice,Amount,NODNOCHeader2."No.",LibraryERM.CreateGLAccountNo,
        TDSNatureDeduction2.Code,WORKDATE);
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,PurchaseLine2.Amount);
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader2,TRUE,TRUE);
      AccountingError2 := GETLASTERRORTEXT;

      // [THEN] Accounting Period Error Created.
      Assert.AreEqual(GetIncomeTaxAccPeriod,AccountingError,AccountErr);
      Assert.AreEqual(GetIncomeTaxAccPeriod,AccountingError2,AccountErr);
    END;

    [Test]
    PROCEDURE PurchaseJournalLineWithTDS@1500047();
    VAR
      GenJournalTemplate@1500000 : Record 80;
      GenJournalLine@1500002 : Record 81;
      TDSNatureDeduction@1500004 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      Vendor@1500015 : Record 23;
      CountryRegion@1500014 : Record 9;
      TDSSetup@1500012 : Record 13728;
      GenJournalLine2@1500019 : Record 81;
      IncomeTaxAccountingPeriod@1500001 : Record 13724;
      IncomeTaxPeriodSetup@1500003 : Record 16501;
      Assert@1500021 : Codeunit 130000;
      Amount@1500006 : Decimal;
      CurrencyCode@1500011 : Code[10];
    BEGIN
      // [SCENARIO 64533,64534] Calculating TDS related amount successfully in the following forms in case of Foreign Currency:Invoice received from Vendor in General Journal/Purchase Journal
      // [FEATURE] [TDS] [Purchase Journal]
      Initialize;

      // [GIVEN] Created Setup for NODNOC,Assessee Setup and Vendor with Country
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateCountryRegion(CountryRegion);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      CurrencyCode := CreateCurrencyCode(IncomeTaxAccountingPeriod."Starting Date");
      CreateForeignVendor(Vendor,CurrencyCode,CountryRegion.Code);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureDeduction,TDSSetup,CountryRegion.Code,Vendor."No.",
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created Purchase Journal Line
      CreatePurchaseJournalDocument(GenJournalLine,
        GenJournalLine."Document Type"::Invoice,GenJournalTemplate.Type::Purchases,-Amount,NODNOCHeader."No.",
        TDSNatureDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      CalcTDSAmountsforJournalLine(GenJournalLine2,TDSSetup,Amount);

      // [THEN] TDS Value has been Calculated.
      Assert.AreNearlyEqual(-GenJournalLine2."Total TDS/TCS Incl. SHE CESS",
        GenJournalLine."Total TDS/TCS Incl. SHE CESS",GeneralLedgerSetup."TDS Rounding Precision",TDSValueErr);
    END;

    [Test]
    PROCEDURE PaymentJournalLineWithTDS@1500022();
    VAR
      CountryRegion@1500000 : Record 9;
      Vendor@1500004 : Record 23;
      TDSNatureDeduction@1500003 : Record 13726;
      GenJournalLine@1500009 : Record 81;
      GenJournalLine2@1500008 : Record 81;
      GenJournalTemplate@1500007 : Record 80;
      NODNOCHeader@1500002 : Record 13786;
      TDSSetup@1500011 : Record 13728;
      IncomeTaxAccountingPeriod@1500012 : Record 13724;
      IncomeTaxPeriodSetup@1500006 : Record 16501;
      Assert@1500010 : Codeunit 130000;
      Amount@1500005 : Decimal;
      CurrencyCode@1500001 : Code[10];
    BEGIN
      // [SCENARIO 64534] Calculating TDS related amount successfully in the following forms in case of Foreign Currency:Advance Payment made to vendor in General Journal/Purchase
      // [FEATURE] [TDS] [Payment Journal]
      Initialize;

      // [GIVEN] Created Setup for NODNOC,Assessee Setup and Vendor with Country
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateCountryRegion(CountryRegion);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      CurrencyCode := CreateCurrencyCode(IncomeTaxAccountingPeriod."Starting Date");
      CreateForeignVendor(Vendor,CurrencyCode,CountryRegion.Code);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureDeduction,TDSSetup,CountryRegion.Code,Vendor."No.",
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created Payment Journal Line
      CreatePurchaseJournalDocument(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalTemplate.Type::Payments,-Amount,NODNOCHeader."No.",
        TDSNatureDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      CalcTDSAmountsforJournalLine(GenJournalLine2,TDSSetup,Amount);

      // [THEN] TDS Value has been Calculated.
      Assert.AreNearlyEqual(-GenJournalLine2."Total TDS/TCS Incl. SHE CESS",
        GenJournalLine."Total TDS/TCS Incl. SHE CESS",GeneralLedgerSetup."TDS Rounding Precision",TDSValueErr);
    END;

    [Test]
    PROCEDURE CashPaymentLineWithTDS@1500036();
    VAR
      CountryRegion@1500010 : Record 9;
      Vendor@1500008 : Record 23;
      TDSNatureDeduction@1500007 : Record 13726;
      NODNOCHeader@1500006 : Record 13786;
      GenJournalLine@1500004 : Record 81;
      GenJournalLine2@1500003 : Record 81;
      GenJournalTemplate@1500002 : Record 80;
      TDSSetup@1500011 : Record 13728;
      IncomeTaxAccountingPeriod@1500012 : Record 13724;
      IncomeTaxPeriodSetup@1500001 : Record 16501;
      Assert@1500000 : Codeunit 130000;
      Amount@1500005 : Decimal;
      CurrencyCode@1500009 : Code[10];
    BEGIN
      // [SCENARIO 64534] TDS - Tax Deducted at Source - TCN B2.2: calculating TDS related amount successfully in the following forms in case of Foreign Currency:Advance Payment made to vendor in General Journal/Purchase
      // [FEATURE] [TDS] [Cash Payment Journal]
      Initialize;

      // [GIVEN] Created Setup for NODNOC,Assessee Setup and Vendor with Country
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryERM.CreateCountryRegion(CountryRegion);
      CurrencyCode := CreateCurrencyCode(IncomeTaxAccountingPeriod."Starting Date");
      CreateForeignVendor(Vendor,CurrencyCode,CountryRegion.Code);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureDeduction,TDSSetup,CountryRegion.Code,Vendor."No.",
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created Cash Payment Voucher
      CreatePaymentLine(
        GenJournalLine,Amount,NODNOCHeader."No.",TDSNatureDeduction.Code,GenJournalLine."Bal. Account Type"::"G/L Account",
        GenJournalTemplate."Sub Type"::"Cash Payment Voucher",IncomeTaxAccountingPeriod."Starting Date");
      CalcTDSAmountsforJournalLine(GenJournalLine2,TDSSetup,Amount);

      // [THEN] TDS Values had been calculated.
      Assert.AreNearlyEqual(GenJournalLine2."Total TDS/TCS Incl. SHE CESS",
        GenJournalLine."Total TDS/TCS Incl. SHE CESS",GeneralLedgerSetup."TDS Rounding Precision",TDSValueErr);
    END;

    [Test]
    PROCEDURE BankPaymentLineWithTDS@1500040();
    VAR
      CountryRegion@1500010 : Record 9;
      Vendor@1500008 : Record 23;
      TDSNatureDeduction@1500007 : Record 13726;
      NODNOCHeader@1500006 : Record 13786;
      GenJournalLine@1500004 : Record 81;
      GenJournalLine2@1500003 : Record 81;
      GenJournalTemplate@1500002 : Record 80;
      TDSSetup@1500011 : Record 13728;
      IncomeTaxAccountingPeriod@1500012 : Record 13724;
      IncomeTaxPeriodSetup@1500001 : Record 16501;
      Assert@1500000 : Codeunit 130000;
      Amount@1500005 : Decimal;
      CurrencyCode@1500009 : Code[10];
    BEGIN
      // [SCENARIO 64534] TDS - Tax Deducted at Source - TCN B2.2: calculating TDS related amount successfully in the following forms in case of Foreign Currency:Advance Payment made to vendor in General Journal/Purchase
      // [FEATURE] [TDS] [Bank Payment Voucher]
      Initialize;

      // [GIVEN] Created Setup for NODNOC,Assessee Setup and Vendor with Country
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryERM.CreateCountryRegion(CountryRegion);
      CurrencyCode := CreateCurrencyCode(IncomeTaxAccountingPeriod."Starting Date");
      CreateForeignVendor(Vendor,CurrencyCode,CountryRegion.Code);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureDeduction,TDSSetup,CountryRegion.Code,Vendor."No.",
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created Bank Payment Voucher
      CreatePaymentLine(
        GenJournalLine,Amount,NODNOCHeader."No.",TDSNatureDeduction.Code,GenJournalLine."Bal. Account Type"::"G/L Account",
        GenJournalTemplate."Sub Type"::"Bank Payment Voucher",IncomeTaxAccountingPeriod."Starting Date");
      CalcTDSAmountsforJournalLine(GenJournalLine2,TDSSetup,Amount);

      // [THEN] TDS Value has been Calculated.
      Assert.AreNearlyEqual(GenJournalLine2."Total TDS/TCS Incl. SHE CESS",
        GenJournalLine."Total TDS/TCS Incl. SHE CESS",GeneralLedgerSetup."TDS Rounding Precision",TDSValueErr);
    END;

    [Test]
    PROCEDURE GeneralJournalforForeignCurrencyWithTDS@1500024();
    VAR
      GenJournalLine@1500002 : Record 81;
      TDSNatureDeduction@1500004 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      ExpectedTDSEntry@1500010 : Record 13729;
      Vendor@1500015 : Record 23;
      CountryRegion@1500014 : Record 9;
      TDSSetup@1500012 : Record 13728;
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      IncomeTaxPeriodSetup@1500001 : Record 16501;
      ServiceTaxWithTDSHelper@1500008 : Codeunit 143005;
      Amount@1500006 : Decimal;
      DocumentNo@1500007 : Code[20];
      CurrencyCode@1500011 : Code[10];
    BEGIN
      // [SCENARIO 64285] Tax - Service - Verify the TDS amount in foreign currency.
      // [FEATURE] [TDS] [General Journal]
      Initialize;

      // [GIVEN] Created Setup for NODNOC,Assessee Setup and Vendor with Country
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateCountryRegion(CountryRegion);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      CurrencyCode := CreateCurrencyCode(IncomeTaxAccountingPeriod."Starting Date");
      CreateForeignVendor(Vendor,CurrencyCode,CountryRegion.Code);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureDeduction,TDSSetup,CountryRegion.Code,Vendor."No.",
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created General Journal Line and Update Foreign Currency
      CreateGeneralJournalLine(
        GenJournalLine,Amount,NODNOCHeader."No.",TDSNatureDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,GenJournalLine."Amount (LCY)");
      UpdateCurrency(GenJournalLine,CurrencyCode,DocumentNo);
      DocumentNo := GenJournalLine."Document No.";
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalLine."Journal Template Name",
        GenJournalLine."Journal Batch Name",GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"Bank Account",
        LibraryERM.CreateBankAccountNo,-Amount);
      GenJournalLine.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      GenJournalLine.MODIFY(TRUE);
      UpdateCurrency(GenJournalLine,CurrencyCode,DocumentNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] GL and TDS Entry has been created.
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryforTDS(DocumentNo,ExpectedTDSEntry."TDS Base Amount",GenJournalLine."Document Type"::Payment);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,ExpectedTDSEntry."Document Type"::Payment,FALSE);
    END;

    [Test]
    PROCEDURE GeneralJournalLineWithTDS@1500025();
    VAR
      GenJournalLine@1500002 : Record 81;
      TDSNatureDeduction@1500004 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      Vendor@1500015 : Record 23;
      CountryRegion@1500014 : Record 9;
      TDSSetup@1500012 : Record 13728;
      GenJournalLine2@1500019 : Record 81;
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      IncomeTaxPeriodSetup@1500001 : Record 16501;
      Assert@1500021 : Codeunit 130000;
      Amount@1500006 : Decimal;
      CurrencyCode@1500011 : Code[10];
    BEGIN
      // [SCENARIO 64533,64534] TDS - Tax Deducted at Source - TCN B2.1: calculating TDS related amount successfully in the following forms in case of Foreign Currency:Invoice received from Vendor in General Journal/Purchase Journal
      // [FEATURE] [TDS] [General Journal]
      Initialize;

      // [GIVEN] Created Setup for NODNOC,Assessee Setup and Vendor with Country
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateCountryRegion(CountryRegion);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      CurrencyCode := CreateCurrencyCode(IncomeTaxAccountingPeriod."Starting Date");
      CreateForeignVendor(Vendor,CurrencyCode,CountryRegion.Code);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureDeduction,TDSSetup,CountryRegion.Code,Vendor."No.",
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created General Journal Line
      CreateGeneralJournalLine(
        GenJournalLine,Amount,NODNOCHeader."No.",TDSNatureDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      CalcTDSAmountsforJournalLine(GenJournalLine2,TDSSetup,Amount);

      // [THEN] TDS Value has been calculated
      Assert.AreNearlyEqual(GenJournalLine2."Total TDS/TCS Incl. SHE CESS",
        GenJournalLine."Total TDS/TCS Incl. SHE CESS",GeneralLedgerSetup."TDS Rounding Precision",TDSValueErr);
    END;

    [Test]
    PROCEDURE PurchaseReceiptAndInvoiceWithTDS@1500005();
    VAR
      TDSNatureDeduction@1500001 : Record 13726;
      NODNOCHeader@1500002 : Record 13786;
      ExpectedTDSEntry@1500012 : Record 13729;
      PurchaseHeader@1500017 : Record 38;
      PurchaseLine@1500010 : Record 39;
      TDSSetup@1500008 : Record 13728;
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      IncomeTaxPeriodSetup@1500005 : Record 16501;
      ServiceTaxWithTDSHelper@1500007 : Codeunit 143005;
      DocumentNo@1500004 : Code[20];
      Amount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 64549] Creating correct G/L entries and TDS entries details when an invoice is raised to vendor in:PurchaseInvoice
      // [FEATURE] [TDS] [Purchase Order]
      Initialize;

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureDeduction,TDSSetup,'',CreateVendor,
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Post Purchase Receipt and Invoice
      CreatePurchaseReceiptDocumentforTDS(PurchaseHeader,
        PurchaseLine,NODNOCHeader."No.",FindGLAccountNo,Amount,TDSNatureDeduction.Code,PurchaseHeader."Document Type"::Order,
        IncomeTaxAccountingPeriod."Starting Date");
      CheckandUpdatePurchaseLineforQtytoRecandQtytoInv(PurchaseLine,PurchaseHeader,NODNOCHeader);
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,(PurchaseLine."Direct Unit Cost" * PurchaseLine."Qty. to Invoice"));
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // [THEN] GL & TDS Entry has been created
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryWithTDS(DocumentNo,(PurchaseLine."Direct Unit Cost" * PurchaseLine."Qty. to Invoice"));
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE PurchaseJournalWithTDS@1500000();
    VAR
      NODNOCHeader@1500000 : Record 13786;
      TDSNatureofDeduction@1500001 : Record 13726;
      GenJournalLine@1500003 : Record 81;
      GenJournalTemplate@1500004 : Record 80;
      ExpectedTDSEntry@1500007 : Record 13729;
      TDSSetup@1500010 : Record 13728;
      IncomeTaxAccountingPeriod@1500008 : Record 13724;
      IncomeTaxPeriodSetup@1500009 : Record 16501;
      ServiceTaxWithTDSHelper@1500006 : Codeunit 143005;
      Amount@1500002 : Decimal;
      DocumentNo@1500005 : Code[20];
    BEGIN
      // [SCENARIO 64311] Creating correct G/L entries and TDS entries details when an invoice is raised to vendor in:Purchase Journal
      // [FEATURE] [TDS] [Purchase Journal]
      Initialize;

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureofDeduction,TDSSetup,'',CreateVendor,
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Post Purchase Journal Document
      CreatePurchaseJournalDocument(GenJournalLine,
        GenJournalLine."Document Type"::Invoice,GenJournalTemplate.Type::Purchases,-Amount,NODNOCHeader."No.",
        TDSNatureofDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      DocumentNo := GenJournalLine."Document No.";
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] GL & TDS Entry has been created
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryWithTDS(DocumentNo,Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice,FALSE);
    END;

    [Test]
    [HandlerFunctions(PurchOrderStatisticsMPH)]
    PROCEDURE PurchaseOrderWithTDS@1500006();
    VAR
      TDSNatureDeduction@1500001 : Record 13726;
      NODNOCHeader@1500002 : Record 13786;
      PurchaseHeader@1500010 : Record 38;
      PurchaseLine@1500008 : Record 39;
      TDSSetup@1500016 : Record 13728;
      ExpectedTDSEntry@1500011 : Record 13729;
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      IncomeTaxPeriodSetup@1500005 : Record 16501;
      ServiceTaxWithTDSHelper@1500007 : Codeunit 143005;
      Amount@1500000 : Decimal;
      DocumentNo@1500004 : Code[20];
    BEGIN
      // [SCENARIO 64352] creating correct G/L entries and TDS entries details when an invoice is raised to vendor in:PurchaseInvoice
      // [FEATURE] [TDS] [Purchase Invoice]
      Initialize;

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureDeduction,TDSSetup,'',CreateVendor,
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Post Purchase Invoice
      CreatePurchaseDocumentforTDS(PurchaseHeader,
        PurchaseLine,PurchaseHeader."Document Type"::Order,Amount,NODNOCHeader."No.",FindGLAccountNo,
        TDSNatureDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,PurchaseLine.Amount);
      VerifyPurchaseOrderStatistics(PurchaseLine,ExpectedTDSEntry);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] GL & TDS Entry has been created
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryWithTDS(DocumentNo,Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE GeneralJournalLineWithoutCurrency@1500013();
    VAR
      GenJournalLine@1500002 : Record 81;
      TDSNatureDeduction@1500004 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      TDSSetup@1500012 : Record 13728;
      GenJournalLine2@1500019 : Record 81;
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      IncomeTaxPeriodSetup@1500001 : Record 16501;
      Assert@1500021 : Codeunit 130000;
      Amount@1500006 : Decimal;
    BEGIN
      // [SCENARIO 64538] TDS - Tax Deducted at Source - TCN B2.1: calculating TDS related amount successfully in the following forms in case of Foreign Currency:Invoice received from Vendor in General Journal/Purchase Journal
      // [FEATURE] [TDS] [General Journal]
      Initialize;

      // [GIVEN] Created Setup for NODNOC,Assessee Setup and Vendor with Country
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureDeduction,TDSSetup,'',CreateVendor,
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created General Journal Line
      CreateGeneralJournalLine(
        GenJournalLine,Amount,NODNOCHeader."No.",TDSNatureDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      CalcTDSAmountsforJournalLine(GenJournalLine2,TDSSetup,Amount);

      // [THEN] TDS Value has been calculated
      Assert.AreNearlyEqual(GenJournalLine2."Total TDS/TCS Incl. SHE CESS",
        GenJournalLine."Total TDS/TCS Incl. SHE CESS",GeneralLedgerSetup."TDS Rounding Precision",TDSValueErr);
    END;

    [Test]
    PROCEDURE PurchaseJournalLineWithoutCurrency@1500012();
    VAR
      GenJournalTemplate@1500000 : Record 80;
      GenJournalLine@1500002 : Record 81;
      TDSNatureDeduction@1500004 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      CountryRegion@1500014 : Record 9;
      TDSSetup@1500012 : Record 13728;
      GenJournalLine2@1500019 : Record 81;
      IncomeTaxAccountingPeriod@1500001 : Record 13724;
      IncomeTaxPeriodSetup@1500003 : Record 16501;
      Assert@1500021 : Codeunit 130000;
      Amount@1500006 : Decimal;
    BEGIN
      // [SCENARIO 64538] Calculating TDS related amount successfully in the following forms in case of Foreign Currency:Invoice received from Vendor in General Journal/Purchase Journal
      // [FEATURE] [TDS] [Purchase Journal]
      Initialize;

      // [GIVEN] Created Setup for NODNOC,Assessee Setup and Vendor with Country
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureDeduction,TDSSetup,CountryRegion.Code,CreateVendor,
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created Purchase Journal Line
      CreatePurchaseJournalDocument(GenJournalLine,
        GenJournalLine."Document Type"::Payment,GenJournalTemplate.Type::Purchases,-Amount,NODNOCHeader."No.",
        TDSNatureDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      CalcTDSAmountsforJournalLine(GenJournalLine2,TDSSetup,Amount);

      // [THEN] TDS Value has been calculated
      Assert.AreNearlyEqual(-GenJournalLine2."Total TDS/TCS Incl. SHE CESS",
        GenJournalLine."Total TDS/TCS Incl. SHE CESS",GeneralLedgerSetup."TDS Rounding Precision",TDSValueErr);
    END;

    [Test]
    PROCEDURE PaymentJournalLineWithoutCurrency@1500011();
    VAR
      CountryRegion@1500000 : Record 9;
      TDSNatureDeduction@1500003 : Record 13726;
      GenJournalLine@1500009 : Record 81;
      GenJournalLine2@1500008 : Record 81;
      GenJournalTemplate@1500007 : Record 80;
      NODNOCHeader@1500002 : Record 13786;
      TDSSetup@1500011 : Record 13728;
      IncomeTaxAccountingPeriod@1500012 : Record 13724;
      IncomeTaxPeriodSetup@1500006 : Record 16501;
      Assert@1500010 : Codeunit 130000;
      Amount@1500005 : Decimal;
    BEGIN
      // [SCENARIO 64538] Calculating TDS related amount successfully in the following forms in case of Foreign Currency:Advance Payment made to vendor in General Journal/Purchase
      // [FEATURE] [TDS] [Payment Journal]
      Initialize;

      // [GIVEN] Created Setup for NODNOC,Assessee Setup and Vendor with Country
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureDeduction,TDSSetup,CountryRegion.Code,CreateVendor,
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created Payment Journal Line
      CreatePurchaseJournalDocument(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalTemplate.Type::Payments,-Amount,NODNOCHeader."No.",
        TDSNatureDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      CalcTDSAmountsforJournalLine(GenJournalLine2,TDSSetup,Amount);

      // [THEN] TDS value has been calculated
      Assert.AreNearlyEqual(-GenJournalLine2."Total TDS/TCS Incl. SHE CESS",
        GenJournalLine."Total TDS/TCS Incl. SHE CESS",GeneralLedgerSetup."TDS Rounding Precision",TDSValueErr);
    END;

    [Test]
    PROCEDURE CashPaymentLineWithoutCurrency@1500010();
    VAR
      CountryRegion@1500010 : Record 9;
      TDSNatureDeduction@1500007 : Record 13726;
      NODNOCHeader@1500006 : Record 13786;
      GenJournalLine@1500004 : Record 81;
      GenJournalLine2@1500003 : Record 81;
      GenJournalTemplate@1500002 : Record 80;
      TDSSetup@1500011 : Record 13728;
      IncomeTaxAccountingPeriod@1500012 : Record 13724;
      IncomeTaxPeriodSetup@1500001 : Record 16501;
      Assert@1500000 : Codeunit 130000;
      Amount@1500005 : Decimal;
    BEGIN
      // [SCENARIO 64538] TDS - Tax Deducted at Source - TCN B2.2: calculating TDS related amount successfully in the following forms in case of Foreign Currency:Advance Payment made to vendor in General Journal/Purchase
      // [FEATURE] [TDS] [Cash Payment Voucher]
      Initialize;

      // [GIVEN] Created Setup for NODNOC,Assessee Setup and Vendor with Country
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureDeduction,TDSSetup,CountryRegion.Code,CreateVendor,
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created Cash Payment Voucher
      CreatePaymentLine(
        GenJournalLine,Amount,NODNOCHeader."No.",TDSNatureDeduction.Code,GenJournalLine."Bal. Account Type"::"G/L Account",
        GenJournalTemplate."Sub Type"::"Cash Payment Voucher",IncomeTaxAccountingPeriod."Starting Date");
      CalcTDSAmountsforJournalLine(GenJournalLine2,TDSSetup,Amount);

      // [THEN] TDS Value has been calculated
      Assert.AreNearlyEqual(GenJournalLine2."Total TDS/TCS Incl. SHE CESS",
        GenJournalLine."Total TDS/TCS Incl. SHE CESS",GeneralLedgerSetup."TDS Rounding Precision",TDSValueErr);
    END;

    [Test]
    PROCEDURE BankPaymentLineWithoutCurrency@1500004();
    VAR
      CountryRegion@1500010 : Record 9;
      TDSNatureDeduction@1500007 : Record 13726;
      NODNOCHeader@1500006 : Record 13786;
      GenJournalLine@1500004 : Record 81;
      GenJournalLine2@1500003 : Record 81;
      GenJournalTemplate@1500002 : Record 80;
      TDSSetup@1500011 : Record 13728;
      IncomeTaxAccountingPeriod@1500012 : Record 13724;
      IncomeTaxPeriodSetup@1500001 : Record 16501;
      Assert@1500000 : Codeunit 130000;
      Amount@1500005 : Decimal;
    BEGIN
      // [SCENARIO 64538] TDS - Tax Deducted at Source - TCN B2.2: calculating TDS related amount successfully in the following forms in case of Foreign Currency:Advance Payment made to vendor in General Journal/Purchase
      // [FEATURE] [TDS] [Bank Payment Voucher]
      Initialize;

      // [GIVEN] Created Setup for NODNOC,Assessee Setup and Vendor with Country
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureDeduction,TDSSetup,CountryRegion.Code,CreateVendor,
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created Bank Payment Voucher
      CreatePaymentLine(
        GenJournalLine,Amount,NODNOCHeader."No.",TDSNatureDeduction.Code,GenJournalLine."Bal. Account Type"::"G/L Account",
        GenJournalTemplate."Sub Type"::"Bank Payment Voucher",IncomeTaxAccountingPeriod."Starting Date");
      CalcTDSAmountsforJournalLine(GenJournalLine2,TDSSetup,Amount);

      // [THEN] TDS Value has been calculated
      Assert.AreNearlyEqual(GenJournalLine2."Total TDS/TCS Incl. SHE CESS",
        GenJournalLine."Total TDS/TCS Incl. SHE CESS",GeneralLedgerSetup."TDS Rounding Precision",TDSValueErr);
    END;

    [Test]
    PROCEDURE PurchaseOrderWithMultipleLineTypesTDS@1500028();
    VAR
      TDSNatureDeduction@1500001 : Record 13726;
      NODNOCHeader@1500002 : Record 13786;
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500010 : Record 39;
      TDSSetup@1500005 : Record 13728;
      ExpectedPurchaseLine@1500013 : Record 39;
      IncomeTaxAccountingPeriod@1500004 : Record 13724;
      IncomeTaxPeriodSetup@1500007 : Record 16501;
      Amount@1500000 : Decimal;
      Quantity@1500011 : Decimal;
    BEGIN
      // [SCENARIO 64539] Create Purchase Order using Foreign currency with Multiple Line Types and check TDS related fields
      // [FEATURE] [TDS][Purchase Order]
      Initialize;

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      Amount := LibraryRandom.RandDec(10000,2);
      UpdateTANNoOnCompanyInformation;
      Quantity := LibraryRandom.RandInt(5);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureDeduction,TDSSetup,'',CreateVendor,
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created Purchase Order with Type: Item, G/L Account, Fixed Asset and Charge (Item)
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,NODNOCHeader."No.");
      PurchaseHeader.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      PurchaseHeader.MODIFY(TRUE);
      CreatePurchaseLineWithTDSNatureOfDeduction(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,'',Quantity,Amount,TDSNatureDeduction.Code,0);
      CreatePurchaseLineWithTDSNatureOfDeduction(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",'',Quantity,Amount,TDSNatureDeduction.Code,
        0);
      CreatePurchaseLineWithTDSNatureOfDeduction(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Fixed Asset",'',Quantity,Amount,TDSNatureDeduction.Code,
        0);
      CreatePurchaseLineWithTDSNatureOfDeduction(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",'',Quantity,Amount,TDSNatureDeduction.Code,
        0);
      PurchaseLine.CalculateTDS(PurchaseHeader);

      // [THEN] TDS Entry has been created
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      IF PurchaseLine.FINDLAST THEN
        REPEAT
          CalcExpectedTDSAmounts(ExpectedPurchaseLine,PurchaseLine,TDSSetup);
          VerifyTDSAmountsPurchaseDoc(ExpectedPurchaseLine,PurchaseLine);
        UNTIL PurchaseLine.NEXT = 0;
    END;

    [Test]
    PROCEDURE PurchaseInvoiceWithVATStructure@1500034();
    VAR
      NODNOCHeader@1500000 : Record 13786;
      TDSNatureofDeduction@1500001 : Record 13726;
      TDSSetup@1500002 : Record 13728;
      TaxDetail@1500005 : Record 322;
      StructureHeader@1500006 : Record 13792;
      DummyStructureDetails@1500007 : Record 13793;
      PurchaseHeader@1500008 : Record 38;
      PurchaseLine@1500009 : Record 39;
      Location@1500015 : Record 14;
      ExpectedTDSEntry@1500011 : Record 13729;
      IncomeTaxAccountingPeriod@1500016 : Record 13724;
      IncomeTaxPeriodSetup@1500017 : Record 16501;
      Amount2@1500012 : Decimal;
      Quantity@1500010 : Decimal;
      DocumentNo@1500013 : Code[20];
    BEGIN
      // [SCENARIO 164350] Verify Program updates correct TDS Base Amount and TDS Line Amount  when TDS and VAT Rounding are included
      // [FEATURE] [TDS][Purchase Invoice]
      Initialize;

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      UpdateTANNoOnCompanyInformation;
      CreateTaxDetail(TaxDetail);
      CreateStructureIncludingTDSBase(StructureHeader,DummyStructureDetails,FALSE);
      Quantity := LibraryRandom.RandInt(5);
      LibraryLocation.CreateLocation(Location);
      Location.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      Location.MODIFY(TRUE);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureofDeduction,TDSSetup,'',CreateVendor,
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created Purchase Invoice With Structure
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.");
      PurchaseHeader.VALIDATE(Structure,StructureHeader.Code);
      PurchaseHeader.VALIDATE("Location Code",Location.Code);
      PurchaseHeader.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      PurchaseHeader.MODIFY(TRUE);
      CreatePurchaseLineWithTDSNatureOfDeduction(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",FindGLAccountNo,Quantity,LibraryRandom.RandDec(10,2),
        TDSNatureofDeduction.Code,
        0);
      Amount2 := PurchaseLine.Amount;
      CreatePurchaseLineWithTDSNatureOfDeduction(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",FindGLAccountNo,Quantity,LibraryRandom.RandDec(10,2),
        TDSNatureofDeduction.Code,
        0);
      Amount2 += PurchaseLine.Amount;
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,Amount2);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] GL & TDS Entry has been created
      VerifyGLEntryCount(DocumentNo,4);
      VerifyGLEntryforTDS(DocumentNo,Amount2,PurchaseHeader."Document Type"::Invoice);
      VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE VerifyThresholdAmount@1500044();
    VAR
      Location@1500002 : Record 14;
      NODNOCHeader@1500003 : Record 13786;
      TDSNatureofDeduction@1500004 : Record 13726;
      TDSSetup@1500006 : Record 13728;
      ServiceTaxSetup@1500007 : Record 16472;
      PurchaseHeader@1500011 : Record 38;
      PurchaseLine@1500012 : Record 39;
      ExpectedTDSEntry@1500013 : Record 13729;
      ExpectedTDSEntry2@1500017 : Record 13729;
      ExpectedTDSEntry3@1500018 : Record 13729;
      IncomeTaxAccountingPeriod@1500019 : Record 13724;
      IncomeTaxPeriodSetup@1500020 : Record 16501;
      ServiceTaxGroups@1500021 : Record 16471;
      ServiceTaxWithTDSHelper@1500015 : Codeunit 143005;
      Quantity@1500001 : Decimal;
      Amount@1500005 : Decimal;
      VendorAmount@1500016 : Decimal;
      DocumentNo@1500014 : Code[20];
    BEGIN
      // [SCENARIO 164263] Creating TDS entries correctly when set the Per Contract Value in TDS Group window
      // [FEATURE] [TDS][General Journal]

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      UpdateTANNoOnCompanyInformation;
      Quantity := LibraryRandom.RandInt(5);
      LibraryLocation.CreateLocation(Location);
      Location.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      Location.MODIFY(TRUE);
      CreateServiceTaxGroupandServiceTaxSetup(ServiceTaxGroups,ServiceTaxSetup,IncomeTaxAccountingPeriod."Starting Date",'');
      CreateAssesseeandNODNOCSetupWithThresholdLimit(
        NODNOCHeader,TDSNatureofDeduction,Amount,TDSSetup,'',CreateVendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created Purchase Invoice With Structure
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,NODNOCHeader."No.");
      PurchaseHeader.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      PurchaseHeader.MODIFY(TRUE);
      CreatePurchaseLineWithTDSNatureOfDeduction(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,'',Quantity,800,TDSNatureofDeduction.Code,0);
      CalcTDSAmountsFromBaseWithThreshold(ExpectedTDSEntry,TDSSetup,PurchaseLine.Amount,VendorAmount);
      VerifyPurchaseOrderStatisticsWithThreshold(PurchaseLine,ExpectedTDSEntry,TDSSetup."TDS Group",VendorAmount);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] TDS Entry has been created
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice,FALSE);

      // [WHEN] Created Purchase Invoice With Structure
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,NODNOCHeader."No.");
      PurchaseHeader.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      PurchaseHeader.MODIFY(TRUE);
      CreatePurchaseLineWithTDSNatureOfDeduction(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,'',Quantity,100,TDSNatureofDeduction.Code,0);
      VendorAmount := CalculateTDSThresholdLimit(NODNOCHeader."No.");
      CalcTDSAmountsFromBaseWithThreshold(ExpectedTDSEntry2,TDSSetup,PurchaseLine.Amount,VendorAmount);
      VerifyPurchaseOrderStatisticsWithThreshold(PurchaseLine,ExpectedTDSEntry2,TDSSetup."TDS Group",VendorAmount);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] TDS Entry has been created
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry2,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice,FALSE);

      // [WHEN] Created Purchase Invoice With Structure
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,NODNOCHeader."No.");
      PurchaseHeader.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      PurchaseHeader.MODIFY(TRUE);
      CreatePurchaseLineWithTDSNatureOfDeduction(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,'',Quantity,150,TDSNatureofDeduction.Code,0);
      VendorAmount := CalculateTDSThresholdLimit(NODNOCHeader."No.");
      CalcTDSAmountsFromBaseWithThreshold(ExpectedTDSEntry3,TDSSetup,PurchaseLine.Amount,VendorAmount);
      VerifyPurchaseOrderStatisticsWithThreshold(PurchaseLine,ExpectedTDSEntry3,TDSSetup."TDS Group",VendorAmount);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] TDS Entry has been created
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry3,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE VerifyInvoicePartyTypeAndAccountType@1500041();
    VAR
      NODNOCHeader@1500000 : Record 13786;
      TDSNatureofDeduction@1500001 : Record 13726;
      TDSSetup@1500003 : Record 13728;
      PurchaseHeader@1500004 : Record 38;
      PurchaseLine@1500005 : Record 39;
      ExpectedTDSEntry@1500006 : Record 13729;
      GenJournalLine@1500009 : Record 81;
      GenJournalTemplate@1500010 : Record 80;
      IncomeTaxAccountingPeriod@1500012 : Record 13724;
      IncomeTaxPeriodSetup@1500011 : Record 16501;
      ServiceTaxWithTDSHelper@1500008 : Codeunit 143005;
      Amount@1500002 : Decimal;
      DocumentNo@1500007 : Code[20];
    BEGIN
      // [SCENARIO 164358] Verify program generates correct TCS entries when Sales Invoice with TDS Nature of Deduction is being posted.
      // [FEATURE] [TDS] [Purchase Invoice]

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureofDeduction,TDSSetup,'',CreateVendor,
        NODNOCHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created Purchase Invoice and Post
      CreatePurchaseDocumentforTDS(PurchaseHeader,
        PurchaseLine,PurchaseHeader."Document Type"::Invoice,Amount,NODNOCHeader."No.",FindGLAccountNo,TDSNatureofDeduction.Code,
        IncomeTaxAccountingPeriod."Starting Date");
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,PurchaseLine.Amount);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] GL & TDS Entry has been created
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryWithTDS(DocumentNo,(PurchaseLine."Direct Unit Cost" * PurchaseLine."Qty. to Invoice"));
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice,FALSE);

      // [WHEN] Created Cash Payment Voucher and Post
      CreatePaymentLine(
        GenJournalLine,Amount,NODNOCHeader."No.",TDSNatureofDeduction.Code,GenJournalLine."Bal. Account Type"::"G/L Account",
        GenJournalTemplate."Sub Type"::"Cash Payment Voucher",IncomeTaxAccountingPeriod."Starting Date");
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,GenJournalLine."Amount (LCY)");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN]GL & TDS Entry has been created
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryWithTDS(DocumentNo,Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSWithJournalDocuments@1500003();
    VAR
      NODNOCHeader@1500008 : Record 13786;
      TDSNatureofDeduction@1500007 : Record 13726;
      TDSSetup@1500006 : Record 13728;
      Party@1500005 : Record 13730;
      GenJournalLine@1500004 : Record 81;
      DummyExpectedTDSEntry@1500003 : Record 13729;
      IncomeTaxAccountingPeriod@1500002 : Record 13724;
      IncomeTaxPeriodSetup@1500001 : Record 16501;
      Amount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 164358] Verify program generates correct TCS entries when Sales Invoice with TDS Nature of Deduction is being posted.
      // [FEATURE] [TDS] [Purchase Invoice]

      // [GIVEN] Created NODNOC Setup and Assessee Code for Party
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTDS.CreateParty(Party);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NODNOCHeader,TDSNatureofDeduction,TDSSetup,'',Party.Code,
        NODNOCHeader.Type::Party,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created Journal Documents and TDS Entry
      CreateJournalLineAndVerifythePostedTDSEntry(Party,GenJournalLine,TDSNatureofDeduction,TDSSetup,DummyExpectedTDSEntry,
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,Amount,
        IncomeTaxAccountingPeriod."Starting Date");

      CreateJournalLineAndVerifythePostedTDSEntry(Party,GenJournalLine,TDSNatureofDeduction,TDSSetup,DummyExpectedTDSEntry,
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,
        GenJournalLine."Bal. Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,Amount,
        IncomeTaxAccountingPeriod."Starting Date");

      CreateJournalLineAndVerifythePostedTDSEntry(Party,GenJournalLine,TDSNatureofDeduction,TDSSetup,DummyExpectedTDSEntry,
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,Amount,
        IncomeTaxAccountingPeriod."Starting Date");

      CreateJournalLineAndVerifythePostedTDSEntry(Party,GenJournalLine,TDSNatureofDeduction,TDSSetup,DummyExpectedTDSEntry,
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,-Amount,
        IncomeTaxAccountingPeriod."Starting Date");

      CreateJournalLineAndVerifythePostedTDSEntry(Party,GenJournalLine,TDSNatureofDeduction,TDSSetup,DummyExpectedTDSEntry,
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,-Amount,
        IncomeTaxAccountingPeriod."Starting Date");

      CreateJournalLineAndVerifythePostedTDSEntry(Party,GenJournalLine,TDSNatureofDeduction,TDSSetup,DummyExpectedTDSEntry,
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Vendor,CreateVendor,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,-Amount,
        IncomeTaxAccountingPeriod."Starting Date");

      CreateJournalLineAndVerifythePostedTDSEntry(Party,GenJournalLine,TDSNatureofDeduction,TDSSetup,DummyExpectedTDSEntry,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,Amount,
        IncomeTaxAccountingPeriod."Starting Date");

      CreateJournalLineAndVerifythePostedTDSEntry(Party,GenJournalLine,TDSNatureofDeduction,TDSSetup,DummyExpectedTDSEntry,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,
        GenJournalLine."Bal. Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,Amount,
        IncomeTaxAccountingPeriod."Starting Date");

      CreateJournalLineAndVerifythePostedTDSEntry(Party,GenJournalLine,TDSNatureofDeduction,TDSSetup,DummyExpectedTDSEntry,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,Amount,
        IncomeTaxAccountingPeriod."Starting Date");

      CreateJournalLineAndVerifythePostedTDSEntry(Party,GenJournalLine,TDSNatureofDeduction,TDSSetup,DummyExpectedTDSEntry,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,-Amount,
        IncomeTaxAccountingPeriod."Starting Date");

      CreateJournalLineAndVerifythePostedTDSEntry(Party,GenJournalLine,TDSNatureofDeduction,TDSSetup,DummyExpectedTDSEntry,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,
        GenJournalLine."Bal. Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,-Amount,
        IncomeTaxAccountingPeriod."Starting Date");

      CreateJournalLineAndVerifythePostedTDSEntry(Party,GenJournalLine,TDSNatureofDeduction,TDSSetup,DummyExpectedTDSEntry,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,-Amount,
        IncomeTaxAccountingPeriod."Starting Date");

      CreateJournalLineAndVerifythePostedTDSEntry(Party,GenJournalLine,TDSNatureofDeduction,TDSSetup,DummyExpectedTDSEntry,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,CreateVendor,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,Amount,
        IncomeTaxAccountingPeriod."Starting Date");
    END;

    [Test]
    PROCEDURE CheckTDSUsingPurhcaseInvoice@1500038();
    VAR
      TaxDetail@1500000 : Record 322;
      StructureHeader@1500001 : Record 13792;
      DummyStructureDetails@1500002 : Record 13793;
      NodNocHeader@1500005 : Record 13786;
      TdsNatureOfDeduction@1500006 : Record 13726;
      TDSSetup@1500007 : Record 13728;
      ServiceTaxSetup@1500009 : Record 16472;
      GenJournalLine@1500010 : Record 81;
      ExpectedTDSEntry@1500012 : Record 13729;
      IncomeTaxAccountingPeriod@1500015 : Record 13724;
      PurchaseHeader@1500016 : Record 38;
      PurchaseLine@1500017 : Record 39;
      ServiceTaxEntry@1500019 : Record 16473;
      ServiceTaxGroups@1500021 : Record 16471;
      IncomeTaxPeriodSetup@1500022 : Record 16501;
      ServiceTaxRegistrationNos@1500018 : Record 16475;
      ServiceTaxWithTDSHelper@1500014 : Codeunit 143005;
      DocumentNo@1500013 : Code[20];
      DocumentNo2@1500020 : Code[20];
      Amount@1500008 : Decimal;
    BEGIN
      // [SCENARIO 163857] Verify program populates correct TDS Amount In Statistics when invoice is being applied to payment which is posted with TDS and Service Tax in Advance.
      // [FEATURE] [TDS][Payment Journal,Purchase Invoice]
      Initialize;

      // [GIVEN] Created Setup for NODNOC and Assessee Code
      Amount := LibraryRandom.RandDec(1000,2);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      UpdateTANNoOnCompanyInformation;
      CreateTaxDetail(TaxDetail);
      CreateStructureIncludingTDSBase(StructureHeader,DummyStructureDetails,TRUE);
      LibraryServiceTax.CreateServiceTaxRegistrationNo(ServiceTaxRegistrationNos);
      CreateServiceTaxGroupandServiceTaxSetup(
        ServiceTaxGroups,ServiceTaxSetup,IncomeTaxAccountingPeriod."Starting Date",ServiceTaxRegistrationNos.Code);
      CreateAssessandNODNOCWithZeroSurcharge(NodNocHeader,TdsNatureOfDeduction,TDSSetup,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Create General Journal Line and Post
      CreateBankPaymentJournalAndUpdateServiceTax(GenJournalLine,NodNocHeader."No.",TdsNatureOfDeduction.Code,
        IncomeTaxAccountingPeriod,ServiceTaxGroups.Code,ServiceTaxRegistrationNos.Code,Amount);
      DocumentNo := GenJournalLine."Document No.";
      CalculateServiceTaxfromBase(ServiceTaxEntry,ServiceTaxSetup,GenJournalLine.Amount);
      CalcServiceTaxAmountsFromBaseWithoutServiceTax(ExpectedTDSEntry,ServiceTaxEntry,TDSSetup,GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] GL and TDS Entry has been created
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntryforTDS(DocumentNo,Amount,GenJournalLine."Document Type"::Payment);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,GenJournalLine."Document Type"::Payment,FALSE);

      // [WHEN] Create Purchase Invoice With Structure
      CreatePurchaseInvoiceHeaderWithStructure(PurchaseHeader,NodNocHeader."No.",StructureHeader.Code,
        IncomeTaxAccountingPeriod."Starting Date",DocumentNo);
      CreatePurchaseInvoiceLineWithStructure(PurchaseLine,PurchaseHeader,
        ServiceTaxRegistrationNos.Code,ServiceTaxGroups.Code,TdsNatureOfDeduction.Code);
      CalculateServiceTaxfromBase(ServiceTaxEntry,ServiceTaxSetup,PurchaseLine.Amount);
      CalculateTDSWithServiceTax(ExpectedTDSEntry,ServiceTaxEntry,TDSSetup,PurchaseLine.Amount,Amount);
      DocumentNo2 := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] GL,TDS and Service Entry has been created
      VerifyGLEntryCount(DocumentNo2,6);
      VerifyGLEntryWithTDS(DocumentNo2,PurchaseLine.Amount);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo2,ExpectedTDSEntry."Document Type"::Invoice,FALSE);
      VerfiyServiceTaxEntry(DocumentNo2,PurchaseLine.Amount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE CheckTDSUsingPurchaseOrderWithCWIP@1500007();
    VAR
      Location@1500015 : Record 14;
      JobPostingGroup@1500010 : Record 208;
      Job@1500009 : Record 167;
      PurchaseHeader@1500007 : Record 38;
      PurchaseLine@1500008 : Record 39;
      TDSSetup@1500006 : Record 13728;
      TdsNatureOfDeduction@1500005 : Record 13726;
      NodNocHeader@1500004 : Record 13786;
      IncomeTaxPeriodSetup@1500002 : Record 16501;
      IncomeTaxAccountingPeriod@1500001 : Record 13724;
      JobJournalLine@1500013 : Record 210;
      JobTask@1500014 : Record 1001;
      JobTask2@1500016 : Record 1001;
      ExpectedTDSEntry@1500017 : Record 13729;
      Amount@1500000 : Decimal;
      DocumentNo@1500011 : Code[20];
    BEGIN
      // [SCENARIO 164111] Check if the system is calculating CVD and ADC VAT or TDS in case of CWIP Job has been selected in Purchase line
      // [FEATURE] [TDS][Purchase Order]
      Initialize;

      // [GIVEN] Created Setup for NODNOC and Assessee,Job,Job Task Code
      Amount := LibraryRandom.RandDec(100000,2);
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      CreateLocationWithTAN(Location);
      LibraryJob.CreateJobWithPostingGroup(Job,JobPostingGroup);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobTask(Job,JobTask2);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,'',CreateVendor,
        NodNocHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Created Job Journal Line and Created Purchase Order and Post
      CreateMultipleJobJournalLines(JobJournalLine,JobTask,JobTask2,Location,1,Amount);
      LibraryJob.PostJobJournal(JobJournalLine);
      CalculateAndPostWIPtoGL(Job);
      CreatePurchaseHeaderforJob(PurchaseHeader,Location.Code,NodNocHeader."No.",IncomeTaxAccountingPeriod."Starting Date");
      CreatePurchaseLineforJob(PurchaseLine,PurchaseHeader,TdsNatureOfDeduction.Code,Job."No.",
        JobTask."Job Task No.");
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,PurchaseLine.Amount);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] Job Ledger Entry,GL Entry, TDS Entry has been created.
      VerifyJobLedgerEntryCount(Job."No.",7);
      VerifyGLEntryforTDS(DocumentNo,PurchaseLine.Amount,PurchaseLine."Document Type"::Invoice);
      VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,ExpectedTDSEntry."Document Type"::Invoice);
    END;

    LOCAL PROCEDURE Initialize@3();
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      GeneralLedgerSetup.GET;

      isInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@19();
    VAR
      DeductorCategory@1000 : Record 16498;
      CompanyInformation@1001 : Record 79;
    BEGIN
      CompanyInformation.GET;
      LibraryERM.CreateDeductorCategory(DeductorCategory);
      CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateNODNOCSetupforTDSWithThreshold@1500058(VAR NodNocHeader@1040 : Record 13786;Type@1041 : Option;No@1042 : Code[20];AssesseeCode@1043 : Code[10];CodeContractor@1044 : Code[10]);
    VAR
      NodNocLines@1046 : Record 13785;
    BEGIN
      LibraryERM.CreateNODNOCHeader(NodNocHeader,Type,No);
      NodNocHeader.VALIDATE("Assesse Code",AssesseeCode);
      NodNocHeader.MODIFY(TRUE);
      LibraryERM.CreateNODNOCLines(NodNocLines,NodNocHeader,CodeContractor);
      UpdateNODNOCLines(NodNocLines,NodNocHeader.Type::Vendor,FALSE,FALSE);
    END;

    PROCEDURE CreateTDSNatureDeductionAndTDSSetup@10(VAR TDSNatureDeduction@1055 : Record 13726;VAR TDSSetup@1500002 : Record 13728;TDSGroup@1056 : Option;AssesseeCode@1057 : Code[10];CountryCode@1500000 : Code[10];EffectiveDate@1500003 : Date);
    BEGIN
      LibraryERM.CreateTDSNatureDeduction(TDSNatureDeduction);
      TDSNatureDeduction.VALIDATE("TDS Group",TDSGroup);
      TDSNatureDeduction.MODIFY(TRUE);
      LibraryTDS.CreateTDSSetupWithCountry(TDSSetup,TDSNatureDeduction.Code,AssesseeCode,CountryCode,EffectiveDate);
    END;

    LOCAL PROCEDURE CreateVendor@12() : Code[20];
    VAR
      Vendor@1063 : Record 23;
      GeneralPostingSetup@1064 : Record 252;
      GenBusinessPostingGroup@1500000 : Record 250;
      GenProductPostingGroup@1500001 : Record 251;
    BEGIN
      LibraryERM.CreateGenBusPostingGroup(GenBusinessPostingGroup);
      LibraryERM.CreateGenProdPostingGroup(GenProductPostingGroup);
      LibraryERM.CreateGeneralPostingSetup(GeneralPostingSetup,GenBusinessPostingGroup.Code,GenProductPostingGroup.Code);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      Vendor.VALIDATE("P.A.N. No.",LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. No."),DATABASE::Vendor));
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateBankPaymentJournalAndUpdateServiceTax@1500053(VAR GenJournalLine@1500000 : Record 81;NODNOCHeaderCode@1500007 : Code[20];TDSNatureofDeductionCode@1500002 : Code[10];IncomeTaxAccountingPeriod@1500003 : Record 13724;ServiceTaxGroupsCode@1500004 : Code[20];ServiceTaxRegistrationNos@1500005 : Code[20];Amount@1500006 : Decimal);
    VAR
      SubType@1500001 : ' ,Cash Receipt Voucher,Cash Payment Voucher,Bank Receipt Voucher,Bank Payment Voucher,Contra Voucher,Journal Voucher';
    BEGIN
      CreatePaymentLine(
        GenJournalLine,Amount,NODNOCHeaderCode,TDSNatureofDeductionCode,GenJournalLine."Bal. Account Type"::"Bank Account",
        SubType::"Bank Payment Voucher",IncomeTaxAccountingPeriod."Starting Date");
      GenJournalLine.VALIDATE("Service Tax Group Code",ServiceTaxGroupsCode);
      GenJournalLine.VALIDATE("Service Tax Registration No.",ServiceTaxRegistrationNos);
      GenJournalLine.VALIDATE("Serv. Tax on Advance Payment",TRUE);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceHeaderWithStructure@1500060(VAR PurchaseHeader@1500010 : Record 38;VendorNo@1500001 : Code[20];Structure@1500002 : Code[10];PostingDate@1500003 : Date;DocumentNo@1500000 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);
      PurchaseHeader.VALIDATE(Structure,Structure);
      PurchaseHeader.VALIDATE("Posting Date",PostingDate);
      PurchaseHeader.VALIDATE("Applies-to Doc. Type",PurchaseHeader."Applies-to Doc. Type"::Payment);
      PurchaseHeader.VALIDATE("Applies-to Doc. No.",DocumentNo);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceLineWithStructure@1500054(VAR PurchaseLine@1500000 : Record 39;PurchaseHeader@1500001 : Record 38;ServiceTaxRegistrationNos@1500003 : Code[20];ServiceTaxGroupCode@1500004 : Code[20];TDSNatureofDeductionCode@1500005 : Code[10]);
    BEGIN
      CreatePurchaseLineWithTDSNatureOfDeduction(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",FindGLAccountNoWithServiceTax(
          ServiceTaxGroupCode),LibraryRandom.RandInt(2),LibraryRandom.RandDec(1000,2),TDSNatureofDeductionCode,0);
      PurchaseLine.VALIDATE("Service Tax Registration No.",ServiceTaxRegistrationNos);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseReceiptDocumentforTDS@1500018(VAR PurchaseHeader@1500005 : Record 38;VAR PurchaseLine@1500006 : Record 39;VendorNo@1500004 : Code[20];GLAccountNo@1500003 : Code[20];Amount@1500002 : Decimal;CodeContractor@1500001 : Code[10];DocType@1500000 : 'Order,Invoice';PostingDate@1500007 : Date);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocType,VendorNo);
      PurchaseHeader.VALIDATE("Posting Date",PostingDate);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",GLAccountNo,10);
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAssesseeandNODNOCSetupWithThresholdLimit@1500048(VAR NODNOCHeader@1500000 : Record 13786;VAR TDSNatureofDeduction@1500001 : Record 13726;VAR Amount@1500002 : Decimal;VAR TDSSetup@1500007 : Record 13728;CountryCode@1500004 : Code[10];VendorNo@1500005 : Code[20];EffectiveDate@1500008 : Date);
    VAR
      AssesseeCode@1500003 : Record 13727;
      TDSGroup@1500006 : Record 13731;
    BEGIN
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      IF CountryCode <> '' THEN
        CreateTDSNatureDeductionAndTDSSetup(TDSNatureofDeduction,TDSSetup,
          TDSNatureofDeduction."TDS Group"::"Payable to Non Residents",AssesseeCode.Code,CountryCode,EffectiveDate)
      ELSE
        CreateTDSNatureDeductionAndTDSSetup(TDSNatureofDeduction,TDSSetup,
          TDSNatureofDeduction."TDS Group"::Contractor,AssesseeCode.Code,CountryCode,EffectiveDate);
      TDSGroup.SETRANGE("TDS Group",TDSNatureofDeduction."TDS Group");
      TDSGroup.FINDFIRST;
      TDSGroup.VALIDATE("TDS Threshold Amount",LibraryRandom.RandInt(4450)); // 4450 Value has been added, if the line amounts of particular document exceeds this value then it calculate the TDS.
      TDSGroup.VALIDATE("Surcharge Threshold Amount",0);
      TDSGroup.VALIDATE("Per Contract Value",LibraryRandom.RandInt(1000));
      TDSGroup.VALIDATE("Non Resident Payments",FALSE);
      TDSGroup.MODIFY(TRUE);
      CreateNODNOCSetupforTDSWithThreshold(
        NODNOCHeader,NODNOCHeader.Type::Vendor,VendorNo,AssesseeCode.Code,TDSNatureofDeduction.Code);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@7(VAR GenJournalLine@1033 : Record 81;Amount@1500001 : Decimal;VendorNo@1034 : Code[20];CodeContractor@1036 : Code[10];PostingDate@1500002 : Date);
    VAR
      GenJournalBatch@1500100 : Record 232;
      GenJournalTemplate@1500000 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",
        GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      GenJournalLine."Posting Date" := PostingDate;
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLineWithParty@1500043(VAR GenJournalLine@1033 : Record 81;Amount@1500001 : Decimal;PartyNo@1034 : Code[20];CodeContractor@1036 : Code[10];DocumentType@1500006 : 'Payment,Invoice';AccountType@1500002 : Option;AccountNo@1500003 : Code[20];BalAccType@1500004 : Option;BalAccNo@1500005 : Code[20];PostingDate@1500007 : Date);
    VAR
      GenJournalBatch@1500101 : Record 232;
      GenJournalTemplate@1500000 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",
        GenJournalBatch.Name,DocumentType,AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Party);
      GenJournalLine.VALIDATE("Party Code",PartyNo);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Bal. Account Type",BalAccType);
      GenJournalLine.VALIDATE("Bal. Account No.",BalAccNo);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseJournalDocument@62(VAR GenJournalLine@1003 : Record 81;DocumentType@1500003 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';Type@1001 : Option;Amount@1500001 : Decimal;VendorNo@1500002 : Code[20];CodeContractor@1500000 : Code[10];PostingDate@1500005 : Date);
    VAR
      GenJournalBatch@1500102 : Record 232;
      GenJournalTemplate@1500004 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,Type);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      CreateGeneralJournalLineWithBatch(
        GenJournalLine,DocumentType,Amount,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,VendorNo,CodeContractor,
        PostingDate);
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentforTDS@1500014(VAR PurchaseHeader@1500005 : Record 38;VAR PurchaseLine@1500006 : Record 39;DocType@1500000 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';Amount@1500002 : Decimal;VendorNo@1500004 : Code[20];GLAccountNo@1500003 : Code[20];CodeContractor@1500001 : Code[10];PostingDate@1500007 : Date);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocType,VendorNo);
      PurchaseHeader.VALIDATE("Posting Date",PostingDate);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",GLAccountNo,1);
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceTaxGroupandServiceTaxSetup@1500052(VAR ServiceTaxGroups@1500003 : Record 16471;VAR ServiceTaxSetup@1500000 : Record 16472;FromDate@1500002 : Date;ServiceTaxRegistrationNo@1500005 : Code[20]);
    VAR
      STGroupSTRegistrationNo@1500001 : Record 16592;
      GLAccount@1500004 : Record 15;
    BEGIN
      ServiceTaxGroups.INIT;
      ServiceTaxGroups.VALIDATE(Code,LibraryUtility.GenerateRandomCode(1,16471));
      ServiceTaxGroups.VALIDATE(Description,ServiceTaxGroups.Code);
      ServiceTaxGroups.INSERT(TRUE);
      STGroupSTRegistrationNo.VALIDATE("Service Tax Registration No.",ServiceTaxRegistrationNo);
      ServiceTaxSetup.INIT;
      ServiceTaxSetup.VALIDATE(Code,ServiceTaxGroups.Code);
      ServiceTaxSetup.VALIDATE("From Date",FromDate);
      ServiceTaxSetup.VALIDATE("Service Tax %",LibraryRandom.RandIntInRange(5,20));
      ServiceTaxSetup.VALIDATE("eCess %",LibraryRandom.RandIntInRange(2,5));
      ServiceTaxSetup.VALIDATE("SHE Cess %",LibraryRandom.RandIntInRange(2,5));
      ServiceTaxSetup.INSERT(TRUE);

      LibraryServiceTax.CreateGLAccountWithPrefix(GLAccount,ServTaxReceivablesAccountLbl);
      ServiceTaxSetup.VALIDATE("Service Tax Receivable Account",GLAccount."No.");
      LibraryServiceTax.CreateGLAccountWithPrefix(GLAccount,ServTaxPayablesAccountLbl);
      ServiceTaxSetup.VALIDATE("Service Tax Payable Account",GLAccount."No.");
      LibraryServiceTax.CreateGLAccountWithPrefix(GLAccount,ServTaxRecInterimAccountLbl);
      ServiceTaxSetup.VALIDATE("Receivables Account (Interim)",GLAccount."No.");
      LibraryServiceTax.CreateGLAccountWithPrefix(GLAccount,ServTaxPayInterimAccountLbl);
      ServiceTaxSetup.VALIDATE("Payables Account (Interim)",GLAccount."No.");
      LibraryServiceTax.CreateGLAccountWithPrefix(GLAccount,ServTaxExpensesAccountLbl);
      ServiceTaxSetup.VALIDATE("Service Tax Expenses Account",GLAccount."No.");
      LibraryServiceTax.CreateGLAccountWithPrefix(GLAccount,SBCExpensesAccountLbl);
      ServiceTaxSetup.VALIDATE("SB Cess Expense Account",GLAccount."No.");
      LibraryServiceTax.CreateGLAccountWithPrefix(GLAccount,SBCPayablesAccountLbl);
      ServiceTaxSetup.VALIDATE("SB Cess Payable Account",GLAccount."No.");
      LibraryServiceTax.CreateGLAccountWithPrefix(GLAccount,SBCInterimAccountLbl);
      ServiceTaxSetup.VALIDATE("SB Cess Acc.(Interim)",GLAccount."No.");
      LibraryServiceTax.CreateGLAccountWithPrefix(GLAccount,SBCPayInterimAccountLbl);
      ServiceTaxSetup.VALIDATE("SB Cess Payable Acc.(Interim)",GLAccount."No.");
      LibraryServiceTax.CreateGLAccountWithPrefix(GLAccount,KKCRecAccountLbl);
      ServiceTaxSetup.VALIDATE("KK Cess Receivable Account",GLAccount."No.");
      LibraryServiceTax.CreateGLAccountWithPrefix(GLAccount,KKCExpAccountLbl);
      ServiceTaxSetup.VALIDATE("KK Cess Expense Account",GLAccount."No.");
      LibraryServiceTax.CreateGLAccountWithPrefix(GLAccount,KKCIntmAccountLbl);
      ServiceTaxSetup.VALIDATE("KK Cess Payable Acc. (Interim)",GLAccount."No.");
      LibraryServiceTax.CreateGLAccountWithPrefix(GLAccount,KKCPayAccountLbl);
      ServiceTaxSetup.VALIDATE("KK Cess Payable Account",GLAccount."No.");
      LibraryServiceTax.CreateGLAccountWithPrefix(GLAccount,KKCRecIntAccountLbl);
      ServiceTaxSetup.VALIDATE("KK Cess Rec. Acc. (Interim)",GLAccount."No.");
      ServiceTaxSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLineWithBatch@1500008(VAR GenJournalLine@1033 : Record 81;DocumentType@1500002 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';Amount@1500004 : Decimal;JournalTemplateName@1500001 : Code[10];JournalBatchName@1500000 : Code[10];VendorNo@1034 : Code[20];CodeContractor@1036 : Code[10];PostingDate@1500003 : Date);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,JournalTemplateName,JournalBatchName,DocumentType,GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCurrencyCode@1500020(StartingDate@1500001 : Date) : Code[10];
    VAR
      Currency@1500120 : Record 4;
    BEGIN
      WITH Currency DO BEGIN
        GET(CreateCurrencyWithRandomExchRates(StartingDate));
        VALIDATE("Invoice Rounding Precision",0.01);
        MODIFY(TRUE);
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithTDSNatureOfDeduction@1500029(VAR PurchaseLine@1500000 : Record 39;VAR PurchaseHeader@1500001 : Record 38;Type@1500008 : Option;No@1500002 : Code[20];Quantity@1500003 : Decimal;DirectUnitCost@1500004 : Decimal;TDSNatureOfDeduction@1500005 : Code[10];LineDiscountPercent@1500006 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Type,No,Quantity);
      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",TDSNatureOfDeduction);
      IF LineDiscountPercent <> 0 THEN
        PurchaseLine.VALIDATE("Line Discount %",LineDiscountPercent);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJournalLineAndVerifythePostedTDSEntry@1500110(Party@1500010 : Record 13730;GenJournalLine@1500000 : Record 81;TDSNatureofDeduction@1500001 : Record 13726;TDSSetup@1500009 : Record 13728;ExpectedTDSEntry@1500008 : Record 13729;DocumentType@1500002 : Option;AccountType@1500003 : Option;AccountNo@1500004 : Code[20];BalAccType@1500005 : Option;BalAccNo@1500006 : Code[20];Amount@1500007 : Decimal;PostingDate@1500013 : Date);
    VAR
      ServiceTaxWithTDSHelper@1500012 : Codeunit 143005;
      DocumentNo@1500011 : Code[20];
    BEGIN
      // Create General Journal Line and Post
      CreateGeneralJournalLineWithParty(GenJournalLine,Amount,Party.Code,TDSNatureofDeduction.Code,DocumentType,AccountType,AccountNo,
        BalAccType,BalAccNo,PostingDate);
      DocumentNo := GenJournalLine."Document No.";
      IF Amount < 0 THEN
        CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,-GenJournalLine.Amount)
      ELSE
        CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify GL Entry Count, Credit Amount On GL Entry and TDS Entry Amounts.
      VerifyGLEntryCount(DocumentNo,3);
      IF Amount < 0 THEN
        VerifyGLEntryforTDS(DocumentNo,-Amount,DocumentType)
      ELSE
        VerifyGLEntryforTDS(DocumentNo,Amount,DocumentType);
      ServiceTaxWithTDSHelper.VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,DocumentType,FALSE);
    END;

    LOCAL PROCEDURE CreateAssessandNODNOCWithZeroSurcharge@1500057(VAR NODNOCHeader@1500000 : Record 13786;VAR TDSNatureofDeduction@1500001 : Record 13726;VAR TDSSetup@1500002 : Record 13728;EffectiveDate@1500004 : Date);
    BEGIN
      LibraryTDS.CreateAssesseeandNODNOCSetup(
        NODNOCHeader,TDSNatureofDeduction,TDSSetup,'',CreateVendor,NODNOCHeader.Type::Vendor,EffectiveDate);
      TDSSetup.VALIDATE("Non PAN TDS %",LibraryRandom.RandDec(5,2));
      TDSSetup.VALIDATE("Surcharge %",0);
      TDSSetup.VALIDATE("eCESS %",0);
      TDSSetup.VALIDATE("SHE Cess %",0);
      TDSSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTaxDetail@1500039(VAR TaxDetail@1500000 : Record 322);
    VAR
      TaxJurisdiction@1500001 : Record 320;
      TaxGroup@1500002 : Record 321;
    BEGIN
      LibraryERM.CreateTaxJurisdiction(TaxJurisdiction);
      LibraryERM.CreateTaxGroup(TaxGroup);
      LibraryERM.CreateTaxDetail(TaxDetail,TaxJurisdiction.Code,TaxGroup.Code,TaxDetail."Tax Type"::"Excise Tax",WORKDATE);
    END;

    LOCAL PROCEDURE CreateStructureIncludingTDSBase@1500046(VAR StructureHeader@1500000 : Record 13792;StructureDetails@1500001 : Record 13793;TDSBase@1500003 : Boolean);
    BEGIN
      LibraryERM.CreateStructureHeader(StructureHeader);
      LibraryERM.CreateStructureDetails(StructureDetails,StructureHeader.Code,1,StructureDetails.Type::"Service Tax",'','');
      StructureDetails.VALIDATE(CVD,TRUE);
      StructureDetails.VALIDATE("CVD Payable to Third Party",FALSE);
      StructureDetails.VALIDATE("Include Base",TRUE);
      StructureDetails.VALIDATE("Include in TDS Base",TDSBase);
      StructureDetails.VALIDATE("Include Line Discount",TRUE);
      StructureDetails.VALIDATE("Include Invoice Discount",TRUE);
      StructureDetails.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobJournalLineWithBatch@1500016(VAR JobJournalLine@1500003 : Record 210;JobTask@1500000 : Record 1001;LocationCode@1500004 : Code[10];Quantity@1500005 : Decimal;UnitCost@1500006 : Decimal;CWIPType@1500007 : Option);
    VAR
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      CreateJobJournalBatch(GenJournalBatch);
      LibraryJob.CreateJobJournalLineForType(0,JobJournalLine.Type::"G/L Account",JobTask,JobJournalLine);
      JobJournalLine.VALIDATE("No.",FindGLAccountNo);
      JobJournalLine.VALIDATE("Location Code",LocationCode);
      JobJournalLine.VALIDATE(Quantity,Quantity);
      JobJournalLine.VALIDATE("Unit Cost",UnitCost);
      JobJournalLine.VALIDATE("CWIP G/L Type",CWIPType);
      JobJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobJournalBatch@9(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalTemplate@1500105 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::Jobs);
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CheckandUpdatePurchaseLineforQtytoRecandQtytoInv@1500017(VAR PurchaseLine@1500000 : Record 39;VAR PurchaseHeader@1500001 : Record 38;VAR NODNOCHeader@1500003 : Record 13786);
    VAR
      VendorLedgerEntry@1500002 : Record 25;
      Assert@1500004 : Codeunit 130000;
    BEGIN
      PurchaseLine.VALIDATE("Qty. to Receive",2);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      VendorLedgerEntry.SETRANGE("Vendor No.",NODNOCHeader."No.");
      Assert.AreEqual(VendorLedgerEntry.COUNT,0,BlankVLEErr);
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
      PurchaseLine.VALIDATE("Qty. to Invoice",2);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcTDSAmountsFromBase@1500009(VAR ExpectedTDSEntry@1500000 : Record 13729;TDSSetup@1500001 : Record 13728;TaxBaseAmount@1500002 : Decimal);
    BEGIN
      WITH ExpectedTDSEntry DO BEGIN
        "TDS Base Amount" := TaxBaseAmount;
        "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS Base Amount");
        "Surcharge Amount" := LibraryTDS.RoundTDS(TDSSetup."Surcharge %" / 100 * "TDS Amount");
        "eCESS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "SHE Cess Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "Total TDS Including SHE CESS" := "TDS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE CalcTDSAmountsFromBaseWithThreshold@1500051(VAR ExpectedTDSEntry@1500000 : Record 13729;TDSSetup@1500001 : Record 13728;TaxBaseAmount@1500002 : Decimal;TDSThresholdValue@1500004 : Decimal);
    VAR
      TDSGroup@1500003 : Record 13731;
    BEGIN
      TDSGroup.SETRANGE("TDS Group",TDSSetup."TDS Group");
      TDSGroup.FINDFIRST;
      ExpectedTDSEntry."TDS Base Amount" := TaxBaseAmount;
      IF (TaxBaseAmount > TDSGroup."Per Contract Value") OR (TDSThresholdValue > TDSGroup."TDS Threshold Amount") THEN
        WITH ExpectedTDSEntry DO BEGIN
          "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS Base Amount");
          "Surcharge Amount" := LibraryTDS.RoundTDS(TDSSetup."Surcharge %" / 100 * "TDS Amount");
          "eCESS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount"));
          "SHE Cess Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount"));
          "Total TDS Including SHE CESS" := "TDS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
        END;
    END;

    LOCAL PROCEDURE CalculateServiceTaxfromBase@1500062(VAR ServiceTaxEntry@1500000 : Record 16473;ServiceTaxSetup@1500001 : Record 16472;TaxBaseAmount@1500002 : Decimal);
    BEGIN
      WITH ServiceTaxEntry DO BEGIN
        "Service Tax Base Amount" := TaxBaseAmount;
        "Service Tax Amount" := RoundServiceTaxAmount(ServiceTaxSetup."Service Tax %" / 100 * "Service Tax Base Amount");
        "eCess Amount" := RoundServiceTaxAmount(ServiceTaxSetup."eCess %" / 100 * "Service Tax Amount");
        "SHE Cess Amount" := RoundServiceTaxAmount(ServiceTaxSetup."SHE Cess %" / 100 * "Service Tax Amount");
      END;
    END;

    LOCAL PROCEDURE CalculateTDSWithServiceTax@1500059(VAR ExpectedTDSEntry@1500003 : Record 13729;ServiceTaxEntry@1500004 : Record 16473;TDSSetup@1500002 : Record 13728;TDSBaseAmount@1500001 : Decimal;PaidAmount@1500000 : Decimal);
    BEGIN
      WITH ExpectedTDSEntry DO BEGIN
        "TDS Base Amount" :=
          (TDSBaseAmount + ServiceTaxEntry."eCess Amount" + GeneralLedgerSetup."Service Tax Rounding Precision" ) - PaidAmount;
        "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS Base Amount");
        "Surcharge Amount" := LibraryTDS.RoundTDS(TDSSetup."Surcharge %" / 100 * "TDS Amount");
        "eCESS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "SHE Cess Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "Total TDS Including SHE CESS" := "TDS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE CalcServiceTaxAmountsFromBaseWithoutServiceTax@1500045(VAR ExpectedTDSEntry@1500001 : Record 13729;ServiceTaxEntry@1500000 : Record 16473;TDSSetup@1500004 : Record 13728;TDSBaseAmount@1500005 : Decimal);
    BEGIN
      WITH ExpectedTDSEntry DO BEGIN
        "TDS Base Amount" := (TDSBaseAmount + GeneralLedgerSetup."Service Tax Rounding Precision") -
          ServiceTaxEntry."Service Tax Amount";
        "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS Base Amount");
        "Surcharge Amount" := LibraryTDS.RoundTDS(TDSSetup."Surcharge %" / 100 * "TDS Amount");
        "eCESS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "SHE Cess Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "Total TDS Including SHE CESS" := "TDS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE CreateForeignVendor@1500032(VAR Vendor@1500000 : Record 23;CurrencyCode@1500001 : Code[10];CountryCode@1500002 : Code[10]);
    VAR
      VendorNo@1500003 : Code[20];
    BEGIN
      VendorNo := CreateVendor;
      Vendor.GET(VendorNo);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.VALIDATE("Country/Region Code",CountryCode);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcTDSAmountsforJournalLine@1500033(VAR GenJournalLine@1500003 : Record 81;TDSSetup@1500005 : Record 13728;TaxBaseAmount@1500004 : Decimal);
    BEGIN
      WITH GenJournalLine DO BEGIN
        "TDS/TCS Base Amount" := TaxBaseAmount;
        "TDS/TCS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS/TCS Base Amount");
        "Surcharge Amount" := LibraryTDS.RoundTDS(TDSSetup."Surcharge %" / 100 * "TDS/TCS Amount");
        "eCESS on TDS/TCS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * ("TDS/TCS Amount" + "Surcharge Amount"));
        "SHE Cess on TDS/TCS Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * ("TDS/TCS Amount" + "Surcharge Amount"));
        "Total TDS/TCS Incl. SHE CESS" :=
          "TDS/TCS Amount" + "eCESS on TDS/TCS Amount" + "SHE Cess on TDS/TCS Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE CreatePaymentLine@1500037(VAR GenJournalLine@1500000 : Record 81;Amount@1500002 : Decimal;VendorNo@1500001 : Code[20];CodeContractor@1500003 : Code[10];BalAccType@1500004 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';SubType@1500005 : ' ,Cash Receipt Voucher,Cash Payment Voucher,Bank Receipt Voucher,Bank Payment Voucher,Contra Voucher,Journal Voucher';PostingDate@1500008 : Date);
    VAR
      GenJournalTemplate@1500006 : Record 80;
      GenJournalBatch@1500007 : Record 232;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::Payments);
      GenJournalTemplate.VALIDATE("Sub Type",SubType);
      GenJournalTemplate.MODIFY(TRUE);
      CASE SubType OF
        SubType::"Bank Payment Voucher":
          GenJournalTemplate.SETRANGE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
        SubType::"Cash Payment Voucher":
          GenJournalTemplate.SETRANGE("Sub Type",GenJournalTemplate."Sub Type"::"Cash Payment Voucher");
      END;
      GenJournalTemplate.FINDFIRST;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      CASE BalAccType OF
        BalAccType::"Bank Account":
          BEGIN
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
            GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
          END;
        BalAccType::"G/L Account":
          BEGIN
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
            GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
          END;
      END;
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationWithTAN@1500080(VAR Location@1500000 : Record 14);
    BEGIN
      LibraryLocation.CreateLocation(Location);
      Location.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      Location.MODIFY(TRUE);
    END;

    PROCEDURE CreateCurrencyWithRandomExchRates@1500130(StartingDate@1500000 : Date) : Code[10];
    VAR
      CurrencyCode@1500150 : Code[10];
    BEGIN
      CurrencyCode := CreateCurrencyWithGLAccountSetup;
      CreateRandomExchangeRate(CurrencyCode,StartingDate);
      EXIT(CurrencyCode);
    END;

    PROCEDURE CreateCurrencyWithGLAccountSetup@1500131() : Code[10];
    VAR
      Currency@1500021 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      WITH Currency DO BEGIN
        VALIDATE("Residual Gains Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("Residual Losses Account","Residual Gains Account");
        VALIDATE("Realized G/L Gains Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("Realized G/L Losses Account","Realized G/L Gains Account");
        VALIDATE("Realized Gains Acc.",LibraryERM.CreateGLAccountNo);
        VALIDATE("Realized Losses Acc.","Realized Gains Acc.");
        VALIDATE("Unrealized Gains Acc.",LibraryERM.CreateGLAccountNo);
        VALIDATE("Unrealized Losses Acc.","Unrealized Gains Acc.");
        MODIFY(TRUE);
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseHeaderforJob@1500082(VAR PurchaseHeader@1500000 : Record 38;LocationCode@1500002 : Code[10];NODNOCHeaderNo@1500007 : Code[20];PostingDate@1500001 : Date);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,NODNOCHeaderNo);
      PurchaseHeader.VALIDATE("Posting Date",PostingDate);
      PurchaseHeader.VALIDATE("Location Code",LocationCode);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLineforJob@1500061(VAR PurchaseLine@1500000 : Record 39;PurchaseHeader@1500001 : Record 38;TDSNatureofDeduction@1500003 : Code[10];Job@1500004 : Code[20];JobTask@1500005 : Code[20]);
    BEGIN
      CreatePurchaseLineWithTDSNatureOfDeduction(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",FindGLAccountNo,1,LibraryRandom.RandDec(100000,2) * 5,
        TDSNatureofDeduction,0);
      PurchaseLine.VALIDATE("CIF Amount",LibraryRandom.RandDec(100000,2));
      PurchaseLine.VALIDATE("BCD Amount",LibraryRandom.RandDec(100000,2));
      PurchaseLine.VALIDATE("Job No.",Job);
      PurchaseLine.VALIDATE("Job Task No.",JobTask);
      PurchaseLine.VALIDATE("Job Line Type",PurchaseLine."Job Line Type"::Schedule);
      PurchaseLine.VALIDATE("CWIP G/L Type",PurchaseLine."CWIP G/L Type"::Overheads);
      PurchaseLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateRandomExchangeRate@1500120(CurrencyCode@1001 : Code[10];StartingDate@1500000 : Date);
    VAR
      CurrencyExchangeRate@1500121 : Record 330;
    BEGIN
      CurrencyExchangeRate.INIT;
      CurrencyExchangeRate.VALIDATE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.VALIDATE("Starting Date",StartingDate);
      CurrencyExchangeRate.INSERT(TRUE);

      // Using RANDOM Exchange Rate Amount and Adjustment Exchange Rate, between 100 and 400 (Standard Value).
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",100 * LibraryRandom.RandInt(4));
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");

      // Relational Exch. Rate Amount and Relational Adjmt Exch Rate Amt always greater than Exchange Rate Amount.
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",2 * CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMultipleJobJournalLines@1500073(VAR JobJournalLine@1500000 : Record 210;JobTask@1500001 : Record 1001;JobTask2@1500002 : Record 1001;Location@1500003 : Record 14;Quantity@1500004 : Decimal;Amount@1500005 : Decimal);
    BEGIN
      CreateJobJournalLineWithBatch(JobJournalLine,JobTask,Location.Code,Quantity,Amount,JobJournalLine."CWIP G/L Type"::Overheads);
      CreateJobJournalLineWithBatch(JobJournalLine,JobTask,Location.Code,Quantity,Amount,JobJournalLine."CWIP G/L Type"::Labor);
      CreateJobJournalLineWithBatch(JobJournalLine,JobTask,Location.Code,Quantity,Amount,JobJournalLine."CWIP G/L Type"::Material);
      CreateJobJournalLineWithBatch(JobJournalLine,JobTask2,Location.Code,Quantity,Amount,JobJournalLine."CWIP G/L Type"::Overheads);
      CreateJobJournalLineWithBatch(JobJournalLine,JobTask2,Location.Code,Quantity,Amount,JobJournalLine."CWIP G/L Type"::Labor);
      CreateJobJournalLineWithBatch(JobJournalLine,JobTask2,Location.Code,Quantity,Amount,JobJournalLine."CWIP G/L Type"::Material);
    END;

    LOCAL PROCEDURE CalcExpectedTDSAmounts@1500042(VAR ExpectedPurchaseLine@1500000 : Record 39;PurchaseLine@1500001 : Record 39;TDSSetup@1500002 : Record 13728);
    BEGIN
      WITH ExpectedPurchaseLine DO BEGIN
        "TDS %" := TDSSetup."TDS %";
        "Surcharge %" := TDSSetup."Surcharge %";
        "eCESS % on TDS" := TDSSetup."eCESS %";
        "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
        "TDS Base Amount" := PurchaseLine."TDS Base Amount";
        "TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."TDS %" / 100 * PurchaseLine.Amount));
        "Surcharge Amount" := LibraryTDS.RoundTDS((TDSSetup."Surcharge %" / 100 * "TDS Amount"));
        "eCESS on TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount")));
        "SHE Cess on TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount")));
        "Total TDS Including SHE CESS" :=
          LibraryTDS.RoundTDS("TDS Amount" + "eCESS on TDS Amount" + "SHE Cess on TDS Amount" + "Surcharge Amount");
      END;
    END;

    LOCAL PROCEDURE CalculateTDSThresholdLimit@1500063(VendorNo@1500000 : Code[20]) : Decimal;
    VAR
      TDSEntry@1500001 : Record 13729;
      Amount@1500002 : Decimal;
    BEGIN
      TDSEntry.SETRANGE("Party Code",VendorNo);
      TDSEntry.FINDSET;
      REPEAT
        Amount += TDSEntry."TDS Base Amount";
      UNTIL TDSEntry.NEXT = 0;
      EXIT(Amount);
    END;

    LOCAL PROCEDURE CalculateWIP@1500263(Job@1000 : Record 167);
    VAR
      JobCalculateWIP@1500463 : Report 1086;
    BEGIN
      // Use the Job Calculate WIP report to create the WIP entries and update WIP related fields in Job and its job tasks
      Job.SETRANGE("No.",Job."No.");
      JobCalculateWIP.SETTABLEVIEW(Job);
      JobCalculateWIP.InitializeRequest(FORMAT(TIME - 000000T));
      JobCalculateWIP.USEREQUESTPAGE(FALSE);
      JobCalculateWIP.RUNMODAL
    END;

    LOCAL PROCEDURE CalculateAndPostWIPtoGL@1500076(VAR Job@1500000 : Record 167);
    BEGIN
      CalculateWIP(Job);
      PostWIP2GL(Job);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@1500170(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE
    END;

    LOCAL PROCEDURE FindGLAccountNo@1500171() : Code[20];
    VAR
      GLAccount@1500160 : Record 15;
      GeneralPostingSetup@1500161 : Record 252;
      LibraryERM@1500000 : Codeunit 131300;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryERM.FindGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE FindGLAccountNoWithServiceTax@1500056(ServiceTaxGroup@1500005 : Code[20]) : Code[20];
    VAR
      GLAccount@1500162 : Record 15;
      GeneralPostingSetup@1500163 : Record 252;
      LibraryERM@1500000 : Codeunit 131300;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryERM.FindGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.VALIDATE("Service Tax Group Code",ServiceTaxGroup);
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE FindGLEntry@1500165(VAR GLEntry@1067 : Record 17;DocumentType@1068 : Option;DocumentNo@1069 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
    END;

    LOCAL PROCEDURE GetIncomeTaxAccPeriod@1500021() : Text;
    VAR
      TDSAccountingPeriod@1500000 : Record 13724;
    BEGIN
      TDSAccountingPeriod.RESET;
      TDSAccountingPeriod.SETFILTER("Ending Date",'>=%1',WORKDATE);
      TDSAccountingPeriod.SETFILTER("Starting Date",'<=%1',WORKDATE);
      ASSERTERROR TDSAccountingPeriod.FINDFIRST;
      EXIT(GETLASTERRORTEXT);
    END;

    [ModalPageHandler]
    PROCEDURE PurchOrderStatisticsMPH@1500026(VAR PurchaseOrderStatistics@1500000 : TestPage 403);
    VAR
      Value@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Value);
      PurchaseOrderStatistics.Control1500012.ASSERTEQUALS(Value);
    END;

    LOCAL PROCEDURE PostWIP2GL@1500326(Job@1500426 : Record 167);
    VAR
      JobPostWIPToGL@1500526 : Report 1085;
    BEGIN
      // Use the Job Post WIP to G/L report to post WIP to GL.
      Job.SETRANGE("No.",Job."No.");
      JobPostWIPToGL.SETTABLEVIEW(Job);
      JobPostWIPToGL.InitializeRequest(FORMAT(TIME - 000000T));
      JobPostWIPToGL.USEREQUESTPAGE(FALSE);
      JobPostWIPToGL.RUNMODAL;
    END;

    LOCAL PROCEDURE UpdateCurrency@1500027(VAR GenJournalLine@1500000 : Record 81;CurrencyCode@1500001 : Code[10];DocumentNo@1500002 : Code[20]);
    BEGIN
      IF DocumentNo <> '' THEN
        GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.VALIDATE("Bal. Account No.",'');
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTANNoOnCompanyInformation@1500015();
    VAR
      CompanyInformation@1500000 : Record 79;
    BEGIN
      CompanyInformation.GET;
      CompanyInformation.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateNODNOCLines@1500180(VAR NODNOCLines@1070 : Record 13785;Type@1071 : Option;ThresholdOverlook@1500000 : Boolean;SurchargeOverlook@1500001 : Boolean);
    BEGIN
      NODNOCLines.SETRANGE("No.",NODNOCLines."No.");
      NODNOCLines.SETRANGE(Type,Type);
      NODNOCLines.FINDSET;
      NODNOCLines.MODIFYALL("Monthly Certificate",TRUE);
      NODNOCLines.MODIFYALL("Threshold Overlook",ThresholdOverlook);
      NODNOCLines.MODIFYALL("Surcharge Overlook",SurchargeOverlook);
    END;

    LOCAL PROCEDURE VerifyPurchaseOrderStatistics@1500019(PurchaseLine@1500000 : Record 39;TDSEntry@1500001 : Record 13729);
    VAR
      ServiceTaxAsExciseHelper@1500002 : Codeunit 143003;
    BEGIN
      WITH TDSEntry DO
        LibraryVariableStorage.Enqueue("Total TDS Including SHE CESS");
      ServiceTaxAsExciseHelper.OpenPurchaseOrderStatistics(PurchaseLine);
    END;

    LOCAL PROCEDURE VerifyPurchaseOrderStatisticsWithThreshold@1500035(PurchaseLine@1500000 : Record 39;TDSEntry@1500001 : Record 13729;TDSGroupCode@1500003 : ' ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others,Rent for Plant & Machinery,Rent for Land & Building,Banking Services';TDSThresholdValue@1500005 : Decimal);
    VAR
      TDSGroup@1500004 : Record 13731;
      ServiceTaxAsExciseHelper@1500002 : Codeunit 143003;
    BEGIN
      TDSGroup.SETRANGE("TDS Group",TDSGroupCode);
      TDSGroup.FINDFIRST;
      IF (PurchaseLine."Direct Unit Cost" > TDSGroup."Per Contract Value") OR
         (TDSThresholdValue > TDSGroup."TDS Threshold Amount")
      THEN BEGIN
        WITH TDSEntry DO
          LibraryVariableStorage.Enqueue("Total TDS Including SHE CESS");
        ServiceTaxAsExciseHelper.OpenPurchaseOrderStatistics(PurchaseLine);
      END;
    END;

    LOCAL PROCEDURE VerifyGLEntryWithTDS@1500190(DocumentNo@1077 : Code[20];Amount@1078 : Decimal);
    VAR
      GLEntry@1500191 : Record 17;
    BEGIN
      FindGLEntry(GLEntry,GLEntry."Document Type"::Invoice,DocumentNo);
      GLEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyGLEntryCount@1500001(DocumentNo@1500000 : Code[20];ExpectedCount@1500001 : Integer);
    VAR
      DummyGLEntry@1500002 : Record 17;
      Assert@1500003 : Codeunit 130000;
    BEGIN
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      Assert.RecordCount(DummyGLEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyJobLedgerEntryCount@1500055(JobNo@1500000 : Code[20];ExpectedCount@1500001 : Integer);
    VAR
      DummyJobLedgerEntry@1500003 : Record 169;
      Assert@1500002 : Codeunit 130000;
    BEGIN
      DummyJobLedgerEntry.SETRANGE("Job No.",JobNo);
      Assert.RecordCount(DummyJobLedgerEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyGLEntryforTDS@1500002(DocumentNo@1072 : Code[20];Amount@1073 : Decimal;DocumentType@1500002 : Option);
    VAR
      GLEntry@1500110 : Record 17;
      Assert@1500000 : Codeunit 130000;
      CreditAmount@1500001 : Decimal;
    BEGIN
      FindGLEntry(GLEntry,DocumentType,DocumentNo);
      REPEAT
        CreditAmount += GLEntry."Credit Amount"
      UNTIL GLEntry.NEXT = 0;
      Assert.AreEqual(CreditAmount,Amount,STRSUBSTNO(CreditAmountErr,CreditAmount,Amount));
    END;

    LOCAL PROCEDURE VerifyTDSAmountsPurchaseDoc@1500078(ExpectedPurchaseLineTDSValue@1500005 : Record 39;PurchaseLine@1500007 : Record 39);
    VAR
      Assert@1500000 : Codeunit 130000;
    BEGIN
      Assert.AreEqual(
        ExpectedPurchaseLineTDSValue."TDS %",PurchaseLine."TDS %",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDNAME("TDS %"),PurchaseLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."TDS Amount",PurchaseLine."TDS Amount",GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDNAME("TDS Amount"),PurchaseLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."TDS Base Amount",PurchaseLine."TDS Base Amount",GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDNAME("TDS Base Amount"),PurchaseLine.TABLECAPTION));
      Assert.AreEqual(
        ExpectedPurchaseLineTDSValue."eCESS % on TDS",PurchaseLine."eCESS % on TDS",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDNAME("eCESS % on TDS"),PurchaseLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."eCESS on TDS Amount",PurchaseLine."eCESS on TDS Amount",
        GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDNAME("eCESS on TDS Amount"),PurchaseLine.TABLECAPTION));
      Assert.AreEqual(
        ExpectedPurchaseLineTDSValue."SHE Cess % On TDS",PurchaseLine."SHE Cess % On TDS",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDNAME("SHE Cess % On TDS"),PurchaseLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."SHE Cess on TDS Amount",PurchaseLine."SHE Cess on TDS Amount",
        GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDNAME("SHE Cess on TDS Amount"),PurchaseLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLineTDSValue."Total TDS Including SHE CESS",PurchaseLine."Total TDS Including SHE CESS",
        GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchaseLine.FIELDNAME("Total TDS Including SHE CESS"),PurchaseLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyTDSEntry@1500049(ExpectedTDSEntryAmounts@1500005 : Record 13729;DocumentNo@1500000 : Code[20];DocumentType@1500001 : Option);
    VAR
      TDSEntry@1500002 : Record 13729;
      Assert@1500007 : Codeunit 130000;
    BEGIN
      TDSEntry.SETRANGE("Document No.",DocumentNo);
      TDSEntry.SETRANGE("Document Type",DocumentType);
      TDSEntry.FINDLAST;

      Assert.AreEqual(
        ExpectedTDSEntryAmounts."Base Includes Service Tax",TDSEntry."Base Includes Service Tax",
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("Base Includes Service Tax"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntryAmounts."TDS Amount",TDSEntry."TDS Amount",GeneralLedgerSetup."Service Tax Rounding Precision",
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("TDS Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntryAmounts."TDS Base Amount",TDSEntry."TDS Base Amount",
        GeneralLedgerSetup."Service Tax Rounding Precision",
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("TDS Base Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntryAmounts."eCESS Amount",TDSEntry."eCESS Amount",GeneralLedgerSetup."Service Tax Rounding Precision",
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("eCESS Amount"),TDSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTDSEntryAmounts."SHE Cess Amount",TDSEntry."SHE Cess Amount",
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("SHE Cess Amount"),TDSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTDSEntryAmounts."Work Tax Amount",TDSEntry."Work Tax Amount",
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("Work Tax Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntryAmounts."Work Tax Base Amount",TDSEntry."Work Tax Base Amount",
        GeneralLedgerSetup."Service Tax Rounding Precision",
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("Work Tax Base Amount"),TDSEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerfiyServiceTaxEntry@1500064(DocumentNo@1500001 : Code[20];BaseAmount@1500002 : Decimal);
    VAR
      ServiceTaxEntry@1500000 : Record 16473;
    BEGIN
      ServiceTaxEntry.SETRANGE("Document No.",DocumentNo);
      ServiceTaxEntry.FINDFIRST;
      ServiceTaxEntry.TESTFIELD("Service Tax Base Amount",BaseAmount);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500626(Message@1500726 : Text[1024]);
    BEGIN
      // Dummy Message Handler.
    END;

    BEGIN
    END.
  }
}

