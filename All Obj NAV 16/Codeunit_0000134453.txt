OBJECT Codeunit 134453 ERM Fixed Assets GL Journal
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryFixedAsset@1004 : Codeunit 131330;
      LibraryERM@1003 : Codeunit 131300;
      LibraryFiscalYear@1015 : Codeunit 131302;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryRandom@1001 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      UnknownErr@1008 : TextConst 'ENU=Unknown error.';
      AllowPostingToMainAssetsMsg@1007 : TextConst '@@@=.;ENU="%1 %2 = %3 is a %4. %5 must be %6 in %7."';
      DisposalMustNotBePositiveMsg@1006 : TextConst '@@@=.;ENU="Disposal must not be positive on %1 for %2 %3 = %4 in %5 = %6."';
      AmountErr@1009 : TextConst '@@@=.;ENU=%1 must be %2 in %3.';
      ReverseErr@1010 : TextConst 'ENU=You can only reverse entries that were posted from a journal.';
      EndingDateErr@1011 : TextConst 'ENU=You must specify an Ending Date that is later than the Starting Date.';
      GLBudgetEntriesMustExistMsg@1013 : TextConst 'ENU=G/L Budget Entries must exist.';
      GLBudgetEntriesMustNotExistMsg@1012 : TextConst 'ENU=G/L Budget Entries must not exist.';
      WrongAmountErr@1017 : TextConst 'ENU=Wrong amount.';
      PeriodTxt@1014 : TextConst 'ENU=12';

    [Test]
    PROCEDURE FAJournalWithDuplicateBookCode@129();
    VAR
      DepreciationBook@1006 : Record 5611;
      GenJournalLine@1005 : Record 81;
      FADepreciationBook@1003 : Record 5612;
    BEGIN
      // Test Duplicate Entry in FA Journal Line after Posting FA G/L Journal with Duplicate in Depreciation Book Code.

      // 1. Setup: Create Depreciation Book with Default Exchange Rate, Fixed Asset, FA Depreciation Book with Default Depreciation
      // Book on FA Setup and Created new Depreciation Book.
      Initialize;
      CreateJournalSetupDepreciation(DepreciationBook);
      UpdateDepreciationBook(DepreciationBook);
      CreateFAWithFADepreciationBook(FADepreciationBook,DepreciationBook.Code);

      // 2. Exercise: Create and Post General Journal Line with Duplicate in Depreciation Book Code.
      CreateGeneralJournal(GenJournalLine,FADepreciationBook."FA No.",FADepreciationBook."Depreciation Book Code");
      GenJournalLine.VALIDATE("Duplicate in Depreciation Book",DepreciationBook.Code);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify Duplicate Entry in FA Journal Line.
      VerifyFAJournalLine(
        FADepreciationBook."FA No.",DepreciationBook.Code,
        ROUND(GenJournalLine.Amount * 100 / DepreciationBook."Default Exchange Rate"));

      // 4. Teardown: Update Part of Duplication List as False on created Depreciation Book.
      UpdatePartOfDuplicationList(DepreciationBook,FALSE);
    END;

    [Test]
    PROCEDURE FAJournalWithUseDuplicateList@108();
    VAR
      DepreciationBook@1006 : Record 5611;
      GenJournalLine@1005 : Record 81;
      FADepreciationBook@1003 : Record 5612;
    BEGIN
      // Test Duplicate Entry in FA Journal Line after Posting FA G/L Journal with Use Duplication List as True.

      // 1. Setup: Create Depreciation Book with Default Exchange Rate, Fixed Asset, FA Depreciation Book with Default Depreciation
      // Book on FA Setup and Created new Depreciation Book.
      Initialize;
      CreateJournalSetupDepreciation(DepreciationBook);
      UpdateDepreciationBook(DepreciationBook);
      CreateFAWithFADepreciationBook(FADepreciationBook,DepreciationBook.Code);

      // 2. Exercise: Create and Post General Journal Line with Use Duplication List as True.
      CreateGeneralJournal(GenJournalLine,FADepreciationBook."FA No.",FADepreciationBook."Depreciation Book Code");
      GenJournalLine.VALIDATE("Use Duplication List",TRUE);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify Duplicate Entry in FA Journal Line.
      VerifyFAJournalLine(
        FADepreciationBook."FA No.",DepreciationBook.Code,
        ROUND(GenJournalLine.Amount * 100 / DepreciationBook."Default Exchange Rate"));

      // 4. Teardown: Update Part of Duplication List as False on created Depreciation Book.
      UpdatePartOfDuplicationList(DepreciationBook,FALSE);
    END;

    [Test]
    PROCEDURE FAJournalWithOutExchangeRate@124();
    VAR
      DepreciationBook@1006 : Record 5611;
      FAJournalSetup@1000 : Record 5605;
      GenJournalLine@1005 : Record 81;
      FADepreciationBook@1003 : Record 5612;
    BEGIN
      // Test Duplicate Entry in FA Journal Line after Posting FA G/L Journal with Use Duplication List as True and Depreciation
      // Book without Default Exchange Rate.

      // 1. Setup: Create Depreciation Book with Part of Duplication List as True, Fixed Asset, FA Depreciation Book with Default
      // Depreciation Book on FA Setup and Created new Depreciation Book.
      Initialize;
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      UpdatePartOfDuplicationList(DepreciationBook,TRUE);
      LibraryFixedAsset.CreateFAJournalSetup(FAJournalSetup,DepreciationBook.Code,'');
      UpdateFAJournalSetup(FAJournalSetup);
      CreateFAWithFADepreciationBook(FADepreciationBook,DepreciationBook.Code);

      // 2. Exercise: Create and Post General Journal Line with Use Duplication List as True.
      CreateGeneralJournal(GenJournalLine,FADepreciationBook."FA No.",FADepreciationBook."Depreciation Book Code");
      GenJournalLine.VALIDATE("Use Duplication List",TRUE);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify Duplicate Entry in FA Journal Line.
      VerifyFAJournalLine(FADepreciationBook."FA No.",DepreciationBook.Code,GenJournalLine.Amount);

      // 4. Teardown: Update Part of Duplication List as False on created Depreciation Book.
      UpdatePartOfDuplicationList(DepreciationBook,FALSE);
    END;

    [Test]
    PROCEDURE ExchangeRateOnDepreciationBook@95();
    VAR
      DepreciationBook@1006 : Record 5611;
    BEGIN
      // Test Default Exchange Rate on Depreciation Book after update Use FA Exch. Rate in Duplic. as False.

      // 1. Setup: Create Depreciation Book with Default Exchange Rate.
      Initialize;
      CreateJournalSetupDepreciation(DepreciationBook);

      // 2. Exercise: Update Use FA Exch. Rate in Duplic. as False on Depreciation Book.
      DepreciationBook.VALIDATE("Use FA Exch. Rate in Duplic.",FALSE);
      DepreciationBook.MODIFY(TRUE);

      // 3. Verify: Verify Default Exchange Rate on Depreciation Book.
      DepreciationBook.TESTFIELD("Default Exchange Rate",0);
    END;

    [Test]
    PROCEDURE AcquisitionCostIntegrationTrue@31();
    VAR
      FADepreciationBook@1002 : Record 5612;
      GenJournalLine@1000 : Record 81;
      FixedAsset@1001 : Record 5600;
      FALedgerEntry@1007 : Record 5601;
      GenJournalBatch@1005 : Record 232;
      DepreciationBook@1004 : Record 5611;
    BEGIN
      // Test the Posting of fixed Assets in FA G/L Journal.

      // 1. Setup: Create Fixed Asset, FA Depreciation Book with FA Posting Group and Put check marks on Integration Tab.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateGenJournalBatch(GenJournalBatch);
      SetupGLIntegrationInBook(DepreciationBook,TRUE);

      // 2. Exercise: Create and post a line in FA G/L Journal with FA Posting Type Acquisition Cost.
      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::"Acquisition Cost",
        LibraryRandom.RandDec(10000,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify that the Amount is Posted in FA Ledger Entry and G/L Entry correctly.
      VerifyAmountInFALedgerEntry(FALedgerEntry,FADepreciationBook."FA No.",GenJournalLine.Amount);
      VerifyAmountInGLEntry(FixedAsset."No.",GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE DepreciationIntegrationTrue@25();
    VAR
      FALedgerEntry@1009 : Record 5601;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Post a line in FA G/L journals with FA Posting Type Depreciation.
      PostingWithIntegration(GenJournalLine."FA Posting Type"::Depreciation,FALedgerEntry."FA Posting Type"::Depreciation,-1);
    END;

    [Test]
    PROCEDURE WriteDownIntegrationTrue@28();
    VAR
      GenJournalLine@1007 : Record 81;
      FALedgerEntry@1009 : Record 5601;
    BEGIN
      // Post a line in FA G/L journals with FA Posting Type Write-Down.
      PostingWithIntegration(GenJournalLine."FA Posting Type"::"Write-Down",FALedgerEntry."FA Posting Type"::"Write-Down",-1);
    END;

    [Test]
    PROCEDURE AppreciationIntegrationTrue@29();
    VAR
      GenJournalLine@1007 : Record 81;
      FALedgerEntry@1009 : Record 5601;
    BEGIN
      // Post a line in FA G/L journals with FA Posting Type Appreciation.
      PostingWithIntegration(GenJournalLine."FA Posting Type"::Appreciation,FALedgerEntry."FA Posting Type"::Appreciation,1);
    END;

    [Test]
    PROCEDURE Custom1IntegrationTrue@2();
    VAR
      GenJournalLine@1007 : Record 81;
      FALedgerEntry@1009 : Record 5601;
    BEGIN
      // Post a line in FA G/L journals with FA Posting Type Custom 1.
      PostingWithIntegration(GenJournalLine."FA Posting Type"::"Custom 1",FALedgerEntry."FA Posting Type"::"Custom 1",-1);
    END;

    [Test]
    PROCEDURE Custom2IntegrationTrue@27();
    VAR
      GenJournalLine@1007 : Record 81;
      FALedgerEntry@1009 : Record 5601;
    BEGIN
      // Post a line in FA G/L journals with FA Posting Type Custom 2.
      PostingWithIntegration(GenJournalLine."FA Posting Type"::"Custom 2",FALedgerEntry."FA Posting Type"::"Custom 2",-1);
    END;

    LOCAL PROCEDURE PostingWithIntegration@21(GenJnlLineFAPostingType@1001 : Option;FALedgerEntryFAPostingType@1004 : Option;AmountSign@1005 : Integer);
    VAR
      FADepreciationBook@1002 : Record 5612;
      GenJournalLine@1007 : Record 81;
      FixedAsset@1000 : Record 5600;
      GenJournalBatch@1010 : Record 232;
      DepreciationBook@1008 : Record 5611;
      FALedgerEntry@1003 : Record 5601;
    BEGIN
      // Test the Posting of fixed Assets in FA G/L Journal.

      // 1. Setup: Create Fixed Asset, FA Depreciation Book with FA Posting Group and Put check marks on Integration Tab.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateGenJournalBatch(GenJournalBatch);
      SetupGLIntegrationInBook(DepreciationBook,TRUE);

      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::"Acquisition Cost",
        LibraryRandom.RandDec(10000,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2. Exercise: Create and post a line in FA G/L Journal.
      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJnlLineFAPostingType,ROUND(GenJournalLine.Amount / 4) * AmountSign);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify that the Amount is Posted in FA Ledger Entry and G/L Entry correctly.
      FALedgerEntry.SETRANGE("FA Posting Type",FALedgerEntryFAPostingType);
      VerifyAmountInFALedgerEntry(FALedgerEntry,FixedAsset."No.",GenJournalLine.Amount);
      VerifyAmountInGLEntry(FixedAsset."No.",GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE MaintenanceIntegrationTrue@1();
    VAR
      FADepreciationBook@1002 : Record 5612;
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1007 : Record 81;
      FixedAsset@1000 : Record 5600;
      DepreciationBook@1003 : Record 5611;
    BEGIN
      // Test the Posting of fixed Assets in FA G/L Journal.

      // 1. Setup: Create Fixed Asset, FA Depreciation Book with FA Posting Group and Put check marks on Integration Tab.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      CreateGenJournalBatch(GenJournalBatch);
      SetupGLIntegrationInBook(DepreciationBook,TRUE);

      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::"Acquisition Cost",
        LibraryRandom.RandDec(10000,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2. Exercise: To create and post a line in FA G/L Journal with FA Posting Type Maintenance.
      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::Maintenance,
        -ROUND(GenJournalLine.Amount / 4));
      MaintenanceCodeGenJournalLine(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify that the Amount is Posted in FA Ledger Entry and G/L Entry correctly.
      VerifyMaintenanceLedgerEntry(FADepreciationBook."FA No.",GenJournalLine.Amount);
      VerifyMaintenanceInGLEntry(FixedAsset."No.",GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE BudgetedAssetWithError@39();
    VAR
      FixedAsset@1001 : Record 5600;
      FixedAsset2@1000 : Record 5600;
      GenJournalBatch@1009 : Record 232;
      FADepreciationBook@1002 : Record 5612;
      GenJournalLine@1008 : Record 81;
      DepreciationBook@1004 : Record 5611;
      FASetup@1003 : Record 5603;
    BEGIN
      // Test the Posting of fixed Assets in FA G/L Journal.

      // 1. Setup: Create Fixed Asset, FA Depreciation Book with FA Posting Group and put check marks on Maintenance,
      // Acquisition Cost, Disposal fields on Integration Tab.
      Initialize;
      CreateBudgtedFixedAsset(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset2."No.",FixedAsset2."FA Posting Group",DepreciationBook.Code);

      CreateGenJournalBatch(GenJournalBatch);
      SetupPartialGLIntegrationBook(DepreciationBook,TRUE);
      SetupAllowPostingToMainAssets(FALSE);

      // 2. Exercise: Create and post a line in FA G/L Journal with FA Posting Type Maintenance.
      CreateJnlLineWithBudgetedAsset(GenJournalLine,FADepreciationBook,GenJournalBatch,FixedAsset."No.");
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify the Error that Allow Posting to Main Assets must be Yes in FA Setup.
      Assert.AreEqual(
        STRSUBSTNO(
          AllowPostingToMainAssetsMsg,FixedAsset.TABLECAPTION,FixedAsset.FIELDCAPTION("No."),FixedAsset."No.",
          FixedAsset."Main Asset/Component",FASetup.FIELDCAPTION("Allow Posting to Main Assets"),TRUE,FASetup.TABLECAPTION),
        GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE BudgetedAssetWithoutError@6();
    VAR
      FixedAsset@1001 : Record 5600;
      FixedAsset2@1000 : Record 5600;
      GenJournalBatch@1009 : Record 232;
      FADepreciationBook@1002 : Record 5612;
      FADepreciationBook2@1005 : Record 5612;
      GenJournalLine@1008 : Record 81;
      DepreciationBook@1004 : Record 5611;
    BEGIN
      // Test the Posting of fixed Assets in FA G/L Journal.

      // 1.Setup: Create Fixed Asset, FA Depreciation Book with FA Posting Group and put check marks on Maintenance,
      // Acquisition Cost, Disposal fields on Integration Tab.
      Initialize;
      CreateBudgtedFixedAsset(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);

      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset2);
      CreateFADepreciationBook(FADepreciationBook2,FixedAsset2."No.",FixedAsset2."FA Posting Group",DepreciationBook.Code);

      CreateGenJournalBatch(GenJournalBatch);
      SetupPartialGLIntegrationBook(DepreciationBook,TRUE);
      SetupAllowPostingToMainAssets(TRUE);

      // 2. Exercise: Create and post a line in FA G/L Journal with FA Posting Type Maintenance.
      CreateJnlLineWithBudgetedAsset(GenJournalLine,FADepreciationBook2,GenJournalBatch,FixedAsset."No.");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify that the Amount is Posted in Maintenance Ledger Entry correctly.
      VerifyMaintenanceLedgerEntry(FixedAsset."No.",-GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE FixedAssetAcquisitionCost@18();
    VAR
      FALedgerEntry@1000 : Record 5601;
      FADepreciationBook@1005 : Record 5612;
      FixedAsset@1002 : Record 5600;
      GenJournalLine@1004 : Record 81;
      GenJournalBatch@1008 : Record 232;
      DepreciationBook@1003 : Record 5611;
    BEGIN
      // Test the Posting of fixed Assets in FA G/L Journal.

      // 1. Setup: Create Fixed Asset, FA Depreciation Book with FA Posting Group and put check marks on Maintenance,
      // Acquisition Cost, Disposal fields on Integration Tab.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateGenJournalBatch(GenJournalBatch);

      SetupPartialGLIntegrationBook(DepreciationBook,TRUE);

      // 2. Exercise: Create and post a line in FA G/L Journal with FA Posting Type Acquisition Cost.
      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::"Acquisition Cost",
        LibraryRandom.RandDec(10000,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify that the Amount is Posted in FA Ledger Entry and G/L Entry correctly.
      VerifyAmountInFALedgerEntry(FALedgerEntry,FADepreciationBook."FA No.",GenJournalLine.Amount);
      VerifyAmountInGLEntry(FixedAsset."No.",GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE FixedAssetDisposalWithError@20();
    VAR
      FixedAsset@1002 : Record 5600;
      FADepreciationBook@1000 : Record 5612;
      GenJournalBatch@1006 : Record 232;
      GenJournalLine@1003 : Record 81;
      DepreciationBook@1005 : Record 5611;
    BEGIN
      // Test the Posting of fixed Assets in FA G/L Journal.

      // 1.Setup: Create Fixed Asset, FA Depreciation Book with FA Posting Group and put check mark on Maintenance,
      // Acquisition Cost, Disposal fields on Integration Tab.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateGenJournalBatch(GenJournalBatch);

      SetupPartialGLIntegrationBook(DepreciationBook,TRUE);

      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::"Acquisition Cost",
        LibraryRandom.RandDec(1000,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2.Exercise: Create and post a line in FA G/L Journal with FA Posting Type Disposal.
      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::Disposal,
        LibraryRandom.RandDec(1000,2));
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify that Disposal must not be positive for Depreciation Book.
      Assert.ExpectedError(
        STRSUBSTNO(
          DisposalMustNotBePositiveMsg,WORKDATE,FixedAsset.TABLECAPTION,FixedAsset.FIELDCAPTION("No."),FixedAsset."No.",
          FADepreciationBook.FIELDCAPTION("Depreciation Book Code"),FADepreciationBook."Depreciation Book Code"));
    END;

    [Test]
    PROCEDURE FixedAssetDisposalWithoutError@23();
    VAR
      FixedAsset@1002 : Record 5600;
      FADepreciationBook@1000 : Record 5612;
      GenJournalBatch@1006 : Record 232;
      FALedgerEntry@1008 : Record 5601;
      GenJournalLine@1003 : Record 81;
      DepreciationBook@1005 : Record 5611;
    BEGIN
      // Test the Posting of fixed Assets in FA G/L Journal.

      // 1.Setup: Create Fixed Asset, FA Depreciation Book with FA Posting Group and put check mark on Maintenance,
      // Acquisition Cost, Disposal fields on Integration Tab.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateGenJournalBatch(GenJournalBatch);

      SetupPartialGLIntegrationBook(DepreciationBook,TRUE);

      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::"Acquisition Cost",
        LibraryRandom.RandDec(1000,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2. Exercise: Create and post a line in FA G/L Journal with FA Posting Type Disposal.
      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::Disposal,-GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify that the Amount is Posted in FA Ledger Entry and G/L Entry correctly.
      FALedgerEntry.SETRANGE("FA Posting Type",FALedgerEntry."FA Posting Type"::"Proceeds on Disposal");
      VerifyAmountInFALedgerEntry(FALedgerEntry,FixedAsset."No.",GenJournalLine.Amount);
      VerifyAmountInGLEntry(FixedAsset."No.",GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE FAJournalWithSalvageValue@5();
    VAR
      FALedgerEntry@1009 : Record 5601;
      FADepreciationBook@1002 : Record 5612;
      Amount@1008 : Decimal;
    BEGIN
      // Check FA Ledger Entry after Posting Salvage Value with Posting of Acquisition Cost.

      // Create Fixed Asset with Depreciation Book Declining Balance %.
      Initialize;
      Amount := CreateFAWithFAJournalLine(FADepreciationBook);

      // Verify: Verify FA Ledger Entry with Salvage Value and Acquisition Cost.
      VerifyFALedgerEntry(FALedgerEntry."FA Posting Type"::"Salvage Value",FADepreciationBook."FA No.",-Amount / 2);
      VerifyFALedgerEntry(FALedgerEntry."FA Posting Type"::"Acquisition Cost",FADepreciationBook."FA No.",Amount);
    END;

    [Test]
    PROCEDURE FAJournalWithCalcDepreciation@65();
    VAR
      GeneralLedgerSetup@1017 : Record 98;
      FAJournalLine@1003 : Record 5621;
      FADepreciationBook@1002 : Record 5612;
      FAAmount@1016 : Decimal;
      Amount@1008 : Decimal;
      NoOfMonth@1000 : Integer;
    BEGIN
      // Check FA journal Line after Calculating Depreciation.

      // Create Fixed Asset with Depreciation Book Declining Balance %.
      Initialize;
      FAAmount := CreateFAWithFAJournalLine(FADepreciationBook);

      // Exercise: Calculate Depreciation. Required 12 for dividing Depreciation Value with Random Values.
      Amount := FAAmount / 2;
      NoOfMonth := LibraryRandom.RandInt(10);
      RunCalculateDepeciation(FADepreciationBook,NoOfMonth);
      Amount := ROUND((Amount * FADepreciationBook."Declining-Balance %" / 100) * NoOfMonth / 12);

      // Verify: Verify FA Journal Line with Calculated Depreciation Amount.
      GeneralLedgerSetup.GET;
      FAJournalLine.SETRANGE("FA No.",FADepreciationBook."FA No.");
      FAJournalLine.FINDFIRST;
      Assert.AreNearlyEqual(
        -Amount,FAJournalLine.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,FAJournalLine.FIELDCAPTION(Amount),-Amount,FAJournalLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE ReverseErrorOnFALedgerEntry@10();
    VAR
      SalesLine@1010 : Record 37;
      FALedgerEntry@1009 : Record 5601;
      FAJournalLine@1003 : Record 5621;
      FADepreciationBook@1002 : Record 5612;
      FixedAsset@1001 : Record 5600;
      FALedgerEntries@1011 : TestPage 5604;
    BEGIN
      // Check Reverse Transaction Error on FA Ledger Entry after Posting FA with Sales Invoice.

      // Setup: Create FA and Post Fa Journal Line with Acquisition Cost then Post Sales Invoice.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",CreateDepreciationBook);
      CreateAndPostFAJournalLine(
        FADepreciationBook,LibraryRandom.RandDec(100,2),FAJournalLine."FA Posting Type"::"Acquisition Cost");
      CreateAndPostSalesInvoice(SalesLine,FADepreciationBook);

      // Exercise: Try Reverse Transaction on Posted FA Entry which is posted through Sales Invoice.
      FALedgerEntries.OPENVIEW;
      FALedgerEntries.FILTER.SETFILTER("FA No.",FixedAsset."No.");
      FALedgerEntries.FILTER.SETFILTER("FA Posting Category",FORMAT(FALedgerEntry."FA Posting Category"::Disposal));
      ASSERTERROR FALedgerEntries.ReverseTransaction.INVOKE;

      // Verify: Verify Error raised on FA Ledger entry during Reverse Transaction.
      Assert.ExpectedError(STRSUBSTNO(ReverseErr));
    END;

    LOCAL PROCEDURE CreateFAWithFAJournalLine@36(VAR FADepreciationBook@1002 : Record 5612) Amount : Decimal;
    VAR
      FAJournalLine@1008 : Record 5621;
      FixedAsset@1007 : Record 5600;
      DepreciationBook@1006 : Record 5611;
    BEGIN
      // Setup: Create Fixed Asset and Depreciation Book with Random Declining Balance %.
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      DepreciationBook.VALIDATE("Allow more than 360/365 Days",TRUE);
      DepreciationBook.MODIFY(TRUE);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      FADepreciationBook.VALIDATE("Depreciation Method",FADepreciationBook."Depreciation Method"::"Declining-Balance 1");
      FADepreciationBook.VALIDATE("Declining-Balance %",LibraryRandom.RandDec(10,2));
      FADepreciationBook.MODIFY(TRUE);
      Amount := LibraryRandom.RandDec(100,2);

      // Exercise.
      CreateAndPostFAJournalLine(FADepreciationBook,Amount,FAJournalLine."FA Posting Type"::"Acquisition Cost");
      CreateAndPostFAJournalLine(FADepreciationBook,-Amount / 2,FAJournalLine."FA Posting Type"::"Salvage Value");
    END;

    [Test]
    PROCEDURE CopyFAEntriesToGLBudgetError@34();
    BEGIN
      // Test that System generates an error when Starting Date is later than the Ending Date on Report Copy FA Entries To G/L Budget.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Run Copy FA Entries To G/L Budget with Random Starting Date.
      ASSERTERROR RunCopyFAEntriesToGLBudget('','','',CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));

      // 3. Verify: Verify that System generates an error when Starting Date is later than the Ending Date.
      Assert.AreEqual(STRSUBSTNO(EndingDateErr),GETLASTERRORTEXT,UnknownErr);
    END;

    [Test]
    PROCEDURE CopyFAEntriesToGLBudgetActive@19();
    VAR
      FADepreciationBook@1005 : Record 5612;
      FixedAsset@1003 : Record 5600;
      GLBudgetName@1007 : Record 95;
    BEGIN
      // Test and verify Copy FA Entries To G/L Budget Report functionality for Active Fixed Asset..

      // 1. Setup: Create Fixed Asset, FA Depreciation Book with FA Posting Group. Create and post General Journal Lines.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",LibraryFixedAsset.GetDefaultDeprBook);
      CreateAndPostFAJournalLines(FADepreciationBook);
      LibraryFixedAsset.CreateGLBudgetName(GLBudgetName);
      COMMIT;  // COMMIT required for Batch Report.

      // 2. Exercise: Run Copy FA Entries To G/L Budget.
      RunCopyFAEntriesToGLBudget(FixedAsset."No.",LibraryFixedAsset.GetDefaultDeprBook,GLBudgetName.Name,WORKDATE);

      // 3. Verify: Verify FA Entries must be copy to G\L Budget Entries for Active Fixed Asset.
      // Using 6 because we have created 6 General Journal Lines with different FA Posting Type.
      Assert.AreEqual(6,GetNumberOfGLBudgetEntries(GLBudgetName.Name),GLBudgetEntriesMustExistMsg);
      LibraryFixedAsset.VerifyLastFARegisterGLRegisterOneToOneRelation; // TFS 376879
    END;

    [Test]
    PROCEDURE CopyFAEntriesGLBudgetInactive@11();
    VAR
      FADepreciationBook@1004 : Record 5612;
      FixedAsset@1002 : Record 5600;
      GLBudgetName@1001 : Record 95;
    BEGIN
      // Test and verify Copy FA Entries To G/L Budget Report functionality for Inactive Fixed Asset.

      // 1. Setup: Create Fixed Asset, FA Depreciation Book with FA Posting Group. Create and post General Journal Lines.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",LibraryFixedAsset.GetDefaultDeprBook);
      CreateAndPostFAJournalLines(FADepreciationBook);
      FixedAsset.VALIDATE(Inactive,TRUE);
      FixedAsset.MODIFY(TRUE);
      LibraryFixedAsset.CreateGLBudgetName(GLBudgetName);
      COMMIT;  // COMMIT required for Batch Report.

      // 2. Exercise: Run Copy FA Entries To G/L Budget.
      RunCopyFAEntriesToGLBudget(FixedAsset."No.",LibraryFixedAsset.GetDefaultDeprBook,GLBudgetName.Name,WORKDATE);

      // 3. Verify: Verify FA Entries must not be copy to G\L Budget Entries for Inactive Fixed Asset.
      Assert.AreEqual(0,GetNumberOfGLBudgetEntries(GLBudgetName.Name),GLBudgetEntriesMustNotExistMsg);
      LibraryFixedAsset.VerifyLastFARegisterGLRegisterOneToOneRelation; // TFS 376879
    END;

    [Test]
    [HandlerFunctions(YesConfirmHandler,MessageHandler)]
    PROCEDURE GLEntriesAfterReclassification@38();
    VAR
      DepreciationBook@1001 : Record 5611;
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1005 : Record 81;
      FixedAsset@1000 : Record 5600;
      FixedAsset2@1013 : Record 5600;
      FAPostingGroup@1003 : Record 5606;
      FADepreciationBook@1002 : Record 5612;
      FADepreciationBook2@1012 : Record 5612;
      DepreciationCalculation@1018 : Codeunit 5616;
      DocumentNo@1009 : Code[20];
      PostingDate@1014 : Date;
      AcquisitionCostBeforeReclassification@1015 : Decimal;
      DepreciationBeforeReclassification@1011 : Decimal;
      AcquisitionCostAfterReclassification@1006 : Decimal;
      DepreciationAfterReclassification@1010 : Decimal;
      ReclassifyAcqCostPct@1016 : Decimal;
      NumberOfDays@1017 : Integer;
    BEGIN
      // NOTE: Test fails on WORKDATE = 1,2 January
      // Check GL Entries after posting FA Reclass Journals.

      // 1. Setup: Create and modify Depreciation Book, create FA Posting Group, create two Fixed Assets.
      Initialize;
      LibraryFiscalYear.CreateFiscalYear;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      ModifyDepreciationBookAndGenJournalBatch(DepreciationBook);
      CreateAndModifyFADepreciationBook(
        FADepreciationBook,FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group",LibraryRandom.RandIntInRange(10,20));  // Take Random value for Declining-Balance %.
      LibraryFixedAsset.CreateFixedAsset(FixedAsset2);
      FixedAsset2.VALIDATE("FA Posting Group",FixedAsset."FA Posting Group");
      FixedAsset2.MODIFY(TRUE);
      CreateAndModifyFADepreciationBook(
        FADepreciationBook2,FixedAsset2."No.",DepreciationBook.Code,FixedAsset2."FA Posting Group",
        FADepreciationBook."Declining-Balance %");

      // Create and post FA G/L Journal for Acquisition and Depriciation with Random Amounts.
      PostingDate := CALCDATE('<12M - 2D>',WORKDATE);  // Take Posting Date as per test.
      CreateGenJournalBatch(GenJournalBatch);
      SetupGLIntegrationInBook(DepreciationBook,TRUE);
      CreateAndModifyFAGLJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::"Acquisition Cost",
        LibraryRandom.RandIntInRange(10000,20000),PostingDate);
      AcquisitionCostBeforeReclassification := GenJournalLine.Amount;
      CreateAndModifyFAGLJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::Depreciation,
        -LibraryRandom.RandIntInRange(1000,2000),PostingDate);
      DepreciationBeforeReclassification := GenJournalLine.Amount;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Calculate Depreciation and post FA GL Lines created.
      DocumentNo := RunCalculateDepeciationWithBalAccount(FADepreciationBook,12);  // Calculate Depreciation after one year.
      FindAndPostGenJournalLines(DocumentNo);
      ReclassifyAcqCostPct := LibraryRandom.RandIntInRange(10,20);  // Take Random value for Reclassify Acq Cost %.

      AcquisitionCostAfterReclassification := ROUND(AcquisitionCostBeforeReclassification * ReclassifyAcqCostPct / 100);
      NumberOfDays :=
        DepreciationCalculation.DeprDays(
          DepreciationCalculation.ToMorrow(PostingDate,FALSE),CALCDATE('<1Y>',WORKDATE),
          FALSE);
      DepreciationBeforeReclassification -=
        AcquisitionCostBeforeReclassification * (FADepreciationBook."Declining-Balance %" / 100) * (NumberOfDays / 360);
      DepreciationAfterReclassification := ROUND(DepreciationBeforeReclassification * ReclassifyAcqCostPct / 100);

      // 2. Exercise: Create and Post FA Raclass Journal.
      DocumentNo := CreateFAReclassJournalLine(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,ReclassifyAcqCostPct);
      FindAndPostGenJournalLines(DocumentNo);

      // 3. Verify: Verify GL Entries after Reclassification.
      FAPostingGroup.GET(FixedAsset."FA Posting Group");
      VerifyGLEntry(FixedAsset."No.",DocumentNo,FAPostingGroup."Acquisition Cost Account",-AcquisitionCostAfterReclassification);
      VerifyGLEntry(FixedAsset2."No.",DocumentNo,FAPostingGroup."Accum. Depreciation Account",DepreciationAfterReclassification);
      LibraryFixedAsset.VerifyLastFARegisterGLRegisterOneToOneRelation; // TFS 376879
    END;

    [Test]
    [HandlerFunctions(YesConfirmHandler,MessageHandler)]
    PROCEDURE CalcDepreciationAfterReversingFADepreciation@69();
    VAR
      DepreciationBook@1001 : Record 5611;
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1005 : Record 81;
      FixedAsset@1000 : Record 5600;
      FADepreciationBook@1002 : Record 5612;
      FALedgerEntry@1006 : Record 5601;
      DocumentNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Reverse] [Depreciation]
      // [SCENARIO 202489] Calculate depreciation after reversal
      Initialize;

      // [GIVEN] Fixed Asset with Acquisition Cost of 100
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      ModifyDepreciationBookAndGenJournalBatch(DepreciationBook);
      CreateAndModifyFADepreciationBook(
        FADepreciationBook,FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group",LibraryRandom.RandIntInRange(10,20));
      CreateGenJournalBatch(GenJournalBatch);
      SetupGLIntegrationInBook(DepreciationBook,TRUE);
      CreateAndModifyFAGLJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::"Acquisition Cost",
        LibraryRandom.RandIntInRange(10000,20000),WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [GIVEN] Calculated depreciation with Amount = -10 on "DeprDate"
      FindAndPostGenJournalLines(
        RunCalculateDepeciationWithBalAccount(FADepreciationBook,1));

      // [GIVEN] Reversed transaction of depreciation entry
      FALedgerEntry.SETRANGE("FA No.",FixedAsset."No.");
      FALedgerEntry.SETRANGE("FA Posting Type",FALedgerEntry."FA Posting Type"::Depreciation);
      FALedgerEntry.FINDFIRST;
      LibraryERM.ReverseTransaction(FALedgerEntry."Transaction No.");

      // [WHEN] Calculate Depreciation again on "DeprDate"
      DocumentNo := RunCalculateDepeciationWithBalAccount(FADepreciationBook,1);

      // [THEN] Gen. Journal Line is created for Fixed Asset with Amount = -10 on "DeprDate"
      GenJournalLine.RESET;
      GenJournalLine.SETRANGE("Document No.",DocumentNo);
      GenJournalLine.SETRANGE("Account No.",FixedAsset."No.");
      GenJournalLine.FINDFIRST;
      GenJournalLine.TESTFIELD("Posting Date",FALedgerEntry."Posting Date");
      GenJournalLine.TESTFIELD(Amount,FALedgerEntry.Amount);
      GenJournalLine.SETRANGE("Account No.");
      GenJournalLine.DELETEALL;
    END;

    [Test]
    [HandlerFunctions(YesConfirmHandler,MessageHandler)]
    PROCEDURE DepriciationAfterReclassification@74();
    VAR
      DepreciationBook@1001 : Record 5611;
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1005 : Record 81;
      FixedAsset@1000 : Record 5600;
      FixedAsset2@1013 : Record 5600;
      FAPostingGroup@1003 : Record 5606;
      FADepreciationBook@1002 : Record 5612;
      FADepreciationBook2@1012 : Record 5612;
      DepreciationCalculation@1021 : Codeunit 5616;
      DocumentNo@1009 : Code[20];
      PostingDate@1014 : Date;
      OriginalAcqCostAmount@1015 : Decimal;
      AcqCostReclassAmount@1006 : Decimal;
      OriginalDeprAmount@1018 : Decimal;
      DeprAmount@1019 : Decimal;
      DeprReclassAmount@1020 : Decimal;
      ReclassifyAcqCostPct@1016 : Decimal;
      ExpDeprAmount@1017 : Decimal;
      NumberOfDaysInPeriod@1007 : Decimal;
    BEGIN
      // NOTE: Test fails on WORKDATE = 1,2 January
      // Check GL Entries when depreciation is calculated after Reclassification.

      // 1. Setup: Create Depreciation Book, create FA Posting Group, create two Fixed Assets.
      Initialize;
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      ModifyDepreciationBookAndGenJournalBatch(DepreciationBook);
      CreateAndModifyFADepreciationBook(
        FADepreciationBook,FixedAsset."No.",DepreciationBook.Code,FixedAsset."FA Posting Group",LibraryRandom.RandIntInRange(10,20));  // Take Random value for Declining-Balance %.
      LibraryFixedAsset.CreateFixedAsset(FixedAsset2);
      FixedAsset2.VALIDATE("FA Posting Group",FixedAsset."FA Posting Group");
      FixedAsset2.MODIFY(TRUE);
      CreateAndModifyFADepreciationBook(
        FADepreciationBook2,FixedAsset2."No.",DepreciationBook.Code,FixedAsset2."FA Posting Group",
        FADepreciationBook."Declining-Balance %");

      // Create and post FA G/L Journal for Acquisition and Depriciation with Random value.
      PostingDate := CALCDATE('<12M - 2D>',WORKDATE);  // Take Posting Date as per test.
      CreateGenJournalBatch(GenJournalBatch);
      SetupGLIntegrationInBook(DepreciationBook,TRUE);
      CreateAndModifyFAGLJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::"Acquisition Cost",
        LibraryRandom.RandIntInRange(10000,20000),PostingDate);
      OriginalAcqCostAmount := GenJournalLine.Amount;
      CreateAndModifyFAGLJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::Depreciation,
        -LibraryRandom.RandIntInRange(1000,2000),PostingDate);
      OriginalDeprAmount := GenJournalLine.Amount;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Calculate Depreciation and post FA GL Lines created.
      DocumentNo := RunCalculateDepeciationWithBalAccount(FADepreciationBook,12);  // Calculate Depreciation after one year.
      FindAndPostGenJournalLines(DocumentNo);
      ReclassifyAcqCostPct := LibraryRandom.RandIntInRange(10,20);  // Take Random value for Reclassify Acq Cost %.
      AcqCostReclassAmount := OriginalAcqCostAmount * (1 - ReclassifyAcqCostPct / 100);
      NumberOfDaysInPeriod :=
        DepreciationCalculation.DeprDays(
          DepreciationCalculation.ToMorrow(PostingDate,FALSE),CALCDATE('<1Y>',WORKDATE),
          FALSE);
      DeprAmount :=
        -ROUND(
          OriginalAcqCostAmount * (FADepreciationBook."Declining-Balance %" / 100) * (NumberOfDaysInPeriod / 360));  // Take 30 as No. of days for depreciation for one month.
      DeprReclassAmount := -ROUND((OriginalDeprAmount + DeprAmount) * ReclassifyAcqCostPct / 100);

      // Create and Post FA Raclass Journal.
      DocumentNo := CreateFAReclassJournalLine(FixedAsset."No.",FixedAsset2."No.",DepreciationBook.Code,ReclassifyAcqCostPct);
      FindAndPostGenJournalLines(DocumentNo);

      // 2. Exercise: Calculate Depreciation and post FA GL Lines created again.
      DocumentNo := RunCalculateDepeciationWithBalAccount(FADepreciationBook,13);  // Calculate Depreciation after one year and one month.
      FindAndPostGenJournalLines(DocumentNo);

      // 3. Verify: Verify GL Entries after Depreciation.
      NumberOfDaysInPeriod := GetNumberOfDaysInPeriod(WORKDATE,CALCDATE('<' + FORMAT(13) + 'M>',WORKDATE));
      ExpDeprAmount :=
        -ROUND(
          (AcqCostReclassAmount + DeprReclassAmount) * (FADepreciationBook."Declining-Balance %" / 100) *
          (NumberOfDaysInPeriod / 360));

      FAPostingGroup.GET(FixedAsset."FA Posting Group");
      VerifyGLEntry(FixedAsset."No.",DocumentNo,FAPostingGroup."Accum. Depreciation Account",ExpDeprAmount);
      LibraryFixedAsset.VerifyLastFARegisterGLRegisterOneToOneRelation; // TFS 376879
    END;

    [Test]
    PROCEDURE GenJnlLineWithDeprAcqCostAndSalvageValueFCY@47();
    BEGIN
      // Verify that the system converts the Salvage Value into the Local Currency when Posting Gen. Journal Line
      // with Fixed Asset.
      GenJnlLineWithDeprAcqCostAndSalvageValue(CreateCurrencyWithExchRate);
      LibraryFixedAsset.VerifyLastFARegisterGLRegisterOneToOneRelation; // TFS 376879
    END;

    [Test]
    PROCEDURE ConvertAmountForSourceCurrencyZeroAmt@60();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Unit Test: verify that the function ConvertAmountToLCYForSourceCurrency returns the correct result
      // for Zero amount.
      Initialize;
      GenerateGenJnlLine(GenJournalLine,CreateCurrencyWithExchRate);
      Assert.AreEqual(0,GenJournalLine.ConvertAmtFCYToLCYForSourceCurrency(0),WrongAmountErr);
    END;

    [Test]
    PROCEDURE ConvertAmountForSourceCurrencyLCY@72();
    VAR
      GenJournalLine@1000 : Record 81;
      Amount@1003 : Decimal;
    BEGIN
      // Unit Test: verify that the function ConvertAmountToLCYForSourceCurrency returns the correct result
      // for Local Currency.
      Initialize;
      GenerateGenJnlLine(GenJournalLine,'');
      Amount := LibraryRandom.RandDec(10000,2);
      Assert.AreEqual(Amount,GenJournalLine.ConvertAmtFCYToLCYForSourceCurrency(Amount),WrongAmountErr);
    END;

    [Test]
    PROCEDURE ConvertAmountForSourceCurrencyFCY@75();
    VAR
      GenJournalLine@1000 : Record 81;
      CurrencyCode@1001 : Code[10];
      Amount@1003 : Decimal;
    BEGIN
      // Unit Test: verify that the function ConvertAmountToLCYForSourceCurrency returns the correct result
      // for Foreign Currency.
      Initialize;
      CurrencyCode := CreateCurrencyWithExchRate;
      GenerateGenJnlLine(GenJournalLine,CurrencyCode);

      Amount := LibraryRandom.RandDec(10000,2);
      Assert.AreEqual(
        LibraryERM.ConvertCurrency(Amount,CurrencyCode,'',WORKDATE),
        GenJournalLine.ConvertAmtFCYToLCYForSourceCurrency(Amount),WrongAmountErr);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1003 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateFAPostingGroup;
      LibraryFixedAsset.CreateFAIncomeTaxAccPeriod(WORKDATE);
      LibraryFixedAsset.CreateFAIncomeTaxAccPeriod(CALCDATE('<1Y>',WORKDATE));
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE GenJnlLineWithDeprAcqCostAndSalvageValue@167(CurrencyCode@1010 : Code[10]);
    VAR
      FADepreciationBook@1005 : Record 5612;
      FALedgerEntry@1002 : Record 5601;
      AcquisitionAmount@1006 : Decimal;
      DeprAmount@1007 : Decimal;
      SalvageValue@1008 : Decimal;
    BEGIN
      Initialize;
      AcquisitionAmount := LibraryRandom.RandDec(1000,2);
      DeprAmount := CreateFAWithAcqAndDepreciation(FADepreciationBook,AcquisitionAmount);

      // Excercise: Post Gen. Journal Line with Salvage Value in Foreign Currency.
      SalvageValue := PostGenJnlLineWithDeprAcqCostAndSalvageValue(FADepreciationBook,CurrencyCode);

      // Verify: Salvage Value and Depreciation Amount.
      VerifyLastFALedgEntryAmount(FADepreciationBook."FA No.",FALedgerEntry."FA Posting Type"::"Salvage Value",SalvageValue);
      VerifyLastFALedgEntryAmount(
        FADepreciationBook."FA No.",FALedgerEntry."FA Posting Type"::Depreciation,
        CalcAcqCostDepreciation(
          FADepreciationBook."FA No.",FADepreciationBook."Depreciation Book Code",AcquisitionAmount,DeprAmount,SalvageValue));
    END;

    LOCAL PROCEDURE CreateFAWithAcqAndDepreciation@44(VAR FADepreciationBook@1004 : Record 5612;AcquisitionAmount@1000 : Decimal) : Decimal;
    VAR
      FixedAsset@1001 : Record 5600;
      GenJournalLine@1005 : Record 81;
      GenJournalBatch@1006 : Record 232;
      DepreciationBook@1003 : Record 5611;
      DeprAmount@1002 : Decimal;
    BEGIN
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateJournalSetupDepreciation(DepreciationBook);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBook.Code);
      CreateGenJournalBatch(GenJournalBatch);
      SetupGLIntegrationInBook(DepreciationBook,TRUE);

      DeprAmount := -ROUND(AcquisitionAmount / 3);
      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::"Acquisition Cost",AcquisitionAmount);
      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::Depreciation,DeprAmount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      EXIT(DeprAmount);
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@16(VAR SalesLine@1002 : Record 37;FADepreciationBook@1006 : Record 5612);
    VAR
      Customer@1000 : Record 18;
      SalesHeader@1001 : Record 36;
      LibrarySales@1005 : Codeunit 130509;
    BEGIN
      FindCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,Customer."No.");
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"Fixed Asset",FADepreciationBook."FA No.",LibraryRandom.RandDec(10,2));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.VALIDATE("Depreciation Book Code",FADepreciationBook."Depreciation Book Code");
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateBudgtedFixedAsset@13(VAR FixedAsset@1000 : Record 5600);
    BEGIN
      LibraryFixedAsset.CreateFixedAsset(FixedAsset);
      FixedAsset.VALIDATE("Budgeted Asset",TRUE);
      FixedAsset.VALIDATE("Main Asset/Component",FixedAsset."Main Asset/Component"::"Main Asset");
      FixedAsset.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDepreciationBook@32() : Code[10];
    VAR
      DepreciationBook@1006 : Record 5611;
    BEGIN
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      DepreciationBook.VALIDATE("G/L Integration - Disposal",TRUE);
      DepreciationBook.MODIFY(TRUE);
      EXIT(DepreciationBook.Code);
    END;

    LOCAL PROCEDURE CreateFAJournalSetup@54(DepreciationBookCode@1016 : Code[10]);
    VAR
      FAJournalSetup@1013 : Record 5605;
      FAJournalBatch@1011 : Record 5620;
    BEGIN
      SelectFAJournalBatch(FAJournalBatch);
      LibraryFixedAsset.CreateFAJournalSetup(FAJournalSetup,DepreciationBookCode,'');
      FAJournalSetup.VALIDATE("FA Jnl. Template Name",FAJournalBatch."Journal Template Name");
      FAJournalSetup.VALIDATE("FA Jnl. Batch Name",FAJournalBatch.Name);
      FAJournalSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFADepreciationBook@30(VAR FADepreciationBook@1000 : Record 5612;FANo@1002 : Code[20];FAPostingGroupCode@1003 : Code[10];DepreciationBookCode@1004 : Code[10]);
    BEGIN
      LibraryFixedAsset.CreateFADepreciationBook(FADepreciationBook,FANo,DepreciationBookCode);
      FADepreciationBook.VALIDATE("FA Posting Group",FAPostingGroupCode);
      FADepreciationBook.VALIDATE("Depreciation Starting Date",WORKDATE);

      // Depreciation Ending Date greater than Depreciation Starting Date, Using the Random Number for the Year.
      FADepreciationBook.VALIDATE("Depreciation Ending Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'Y>',WORKDATE));
      FADepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostFAJournalLines@35(FADepreciationBook@1001 : Record 5612);
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1002 : Record 232;
      Amount@1004 : Decimal;
    BEGIN
      CreateGenJournalBatch(GenJournalBatch);
      Amount := LibraryRandom.RandDec(1000,2) + 100;  // Use Random Amount because value is not important.

      // Create 6 General Journal Lines with different FA Posting Type.
      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::"Acquisition Cost",Amount);
      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::Depreciation,-Amount / 4);
      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::"Write-Down",-Amount / 4);
      CreateGenJournalLine(GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::Appreciation,Amount);
      CreateGenJournalLine(GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::"Custom 1",-Amount / 4);
      CreateGenJournalLine(GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::"Custom 2",-Amount / 4);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostFAJournalLine@24(FADepreciationBook@1005 : Record 5612;Amount@1013 : Decimal;FAPostingType@1000 : Option);
    VAR
      FAJournalLine@1001 : Record 5621;
      FAJournalBatch@1008 : Record 5620;
    BEGIN
      SelectFAJournalBatch(FAJournalBatch);
      LibraryFixedAsset.CreateFAJournalLine(FAJournalLine,FAJournalBatch."Journal Template Name",FAJournalBatch.Name);
      FAJournalLine.VALIDATE("FA Posting Date",WORKDATE);
      FAJournalLine.VALIDATE("Document No.",GetDocumentNo(FAJournalBatch));
      FAJournalLine.VALIDATE("FA No.",FADepreciationBook."FA No.");
      FAJournalLine.VALIDATE("FA Posting Type",FAPostingType);
      FAJournalLine.VALIDATE("Depreciation Book Code",FADepreciationBook."Depreciation Book Code");
      FAJournalLine.VALIDATE(Amount,Amount);
      FAJournalLine.MODIFY(TRUE);
      LibraryFixedAsset.PostFAJournalLine(FAJournalLine);
    END;

    LOCAL PROCEDURE CreateAndModifyFADepreciationBook@49(VAR FADepreciationBook@1004 : Record 5612;FixedAssetNo@1000 : Code[20];DepreciationBookCode@1001 : Code[10];FAPostingGroup@1002 : Code[10];DecliningBalancePct@1003 : Decimal);
    BEGIN
      LibraryFixedAsset.CreateFADepreciationBook(FADepreciationBook,FixedAssetNo,DepreciationBookCode);
      FADepreciationBook.VALIDATE("FA Posting Group",FAPostingGroup);
      FADepreciationBook.VALIDATE("Depreciation Method",FADepreciationBook."Depreciation Method"::"Declining-Balance 1");
      FADepreciationBook.VALIDATE("Declining-Balance %",DecliningBalancePct);
      FADepreciationBook.VALIDATE("Depreciation Starting Date",WORKDATE);
      FADepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFAWithFADepreciationBook@161(VAR FADepreciationBook@1000 : Record 5612;DepreciationBookCode@1003 : Code[10]);
    VAR
      FixedAsset@1001 : Record 5600;
    BEGIN
      LibraryFixedAsset.CreateFAWithPostingGroup(FixedAsset);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",DepreciationBookCode);
      CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",FixedAsset."FA Posting Group",LibraryFixedAsset.GetDefaultDeprBook);
    END;

    LOCAL PROCEDURE CreateAndModifyFAGLJournalLine@51(VAR GenJournalLine@1000 : Record 81;FADepreciationBook@1001 : Record 5612;GenJournalBatch@1002 : Record 232;FAPostingType@1003 : Option;Amount@1004 : Decimal;PostingDate@1005 : Date);
    BEGIN
      CreateGenJournalLine(GenJournalLine,FADepreciationBook,GenJournalBatch,FAPostingType,Amount);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFAReclassJournalLine@66(FANo@1000 : Code[20];NewFANo@1001 : Code[20];DepreciationBookCode@1002 : Code[10];ReclassifyAcqCostPct@1005 : Decimal) DocumentNo : Code[20];
    VAR
      FAReclassJournalTemplate@1006 : Record 5622;
      FAReclassJournalBatch@1004 : Record 5623;
      FAReclassJournalLine@1003 : Record 5624;
    BEGIN
      FAReclassJournalTemplate.FINDFIRST;
      LibraryFixedAsset.CreateFAReclassJournalBatch(FAReclassJournalBatch,FAReclassJournalTemplate.Name);
      LibraryFixedAsset.CreateFAReclassJournal(
        FAReclassJournalLine,FAReclassJournalBatch."Journal Template Name",FAReclassJournalBatch.Name);
      FAReclassJournalLine.VALIDATE("FA Posting Date",CALCDATE('<' + PeriodTxt + 'M>',WORKDATE));
      DocumentNo := LibraryUtility.GenerateGUID;
      FAReclassJournalLine.VALIDATE("Document No.",DocumentNo);
      FAReclassJournalLine.VALIDATE("FA No.",FANo);
      FAReclassJournalLine.VALIDATE("New FA No.",NewFANo);
      FAReclassJournalLine.VALIDATE("Depreciation Book Code",DepreciationBookCode);
      FAReclassJournalLine.VALIDATE("Reclassify Acq. Cost %",ReclassifyAcqCostPct);
      FAReclassJournalLine.VALIDATE("Reclassify Acquisition Cost",TRUE);
      FAReclassJournalLine.VALIDATE("Reclassify Depreciation",TRUE);
      FAReclassJournalLine.MODIFY(TRUE);
      CODEUNIT.RUN(CODEUNIT::"FA Reclass. Jnl.-Transfer",FAReclassJournalLine);
    END;

    LOCAL PROCEDURE CreateGeneralJournal@48(VAR GenJournalLine@1003 : Record 81;AccountNo@1002 : Code[20];DepreciationBookCode@1004 : Code[10]);
    VAR
      GenJournalBatch@1000 : Record 232;
      FADepreciationBook@1005 : Record 5612;
    BEGIN
      CreateGenJournalBatch(GenJournalBatch);
      FADepreciationBook.GET(AccountNo,DepreciationBookCode);
      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::"Acquisition Cost",
        LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE CreateGenJournalBatch@50(VAR GenJournalBatch@1002 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateGenJournalLine@3(VAR GenJournalLine@1007 : Record 81;FADepreciationBook@1005 : Record 5612;GenJournalBatch@1000 : Record 232;FAPostingType@1004 : Option;Amount@1001 : Decimal);
    VAR
      GLAccount@1002 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"Fixed Asset",FADepreciationBook."FA No.",Amount);
      GenJournalLine.VALIDATE("Depreciation Book Code",FADepreciationBook."Depreciation Book Code");
      GenJournalLine.VALIDATE("FA Posting Type",FAPostingType);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.VALIDATE("Document No.",FADepreciationBook."FA No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostGenJnlLineWithDeprAcqCostAndSalvageValue@73(FADepreciationBook@1004 : Record 5612;CurrencyCode@1002 : Code[10]) : Decimal;
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1001 : Record 232;
    BEGIN
      WITH GenJournalLine DO BEGIN
        CreateGenJournalBatch(GenJournalBatch);
        CreateGenJournalLine(
          GenJournalLine,FADepreciationBook,GenJournalBatch,"FA Posting Type"::"Acquisition Cost",
          LibraryRandom.RandDec(10000,2));
        VALIDATE("Depr. Acquisition Cost",TRUE);
        VALIDATE("Currency Code",CurrencyCode);
        VALIDATE("Salvage Value",-ROUND(Amount / 10));
        VALIDATE("Document No.",LibraryUtility.GenerateGUID);
        MODIFY(TRUE);
        LibraryERM.PostGeneralJnlLine(GenJournalLine);
        EXIT(LibraryERM.ConvertCurrency("Salvage Value",CurrencyCode,'',WORKDATE));
      END;
    END;

    LOCAL PROCEDURE CreateJnlLineWithBudgetedAsset@14(VAR GenJournalLine@1008 : Record 81;FADepreciationBook@1004 : Record 5612;GenJournalBatch@1001 : Record 232;BudgetedFANo@1007 : Code[20]);
    BEGIN
      CreateGenJournalLine(
        GenJournalLine,FADepreciationBook,GenJournalBatch,GenJournalLine."FA Posting Type"::Maintenance,
        LibraryRandom.RandDec(10000,2));
      GenJournalLine.VALIDATE("Budgeted FA No.",BudgetedFANo);
      MaintenanceCodeGenJournalLine(GenJournalLine);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJournalSetupDepreciation@62(VAR DepreciationBook@1000 : Record 5611) : Code[10];
    VAR
      FAJournalSetup@1001 : Record 5605;
    BEGIN
      LibraryFixedAsset.CreateDepreciationBook(DepreciationBook);
      LibraryFixedAsset.CreateFAJournalSetup(FAJournalSetup,DepreciationBook.Code,'');
      UpdateFAJournalSetup(FAJournalSetup);
      EXIT(FAJournalSetup."Gen. Jnl. Batch Name");
    END;

    LOCAL PROCEDURE CreateCurrencyWithExchRate@133() : Code[10];
    VAR
      Currency@1000 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE GenerateGenJnlLine@82(VAR GenJournalLine@1000 : Record 81;CurrencyCode@1001 : Code[10]);
    BEGIN
      GenJournalLine."Posting Date" := WORKDATE;
      GenJournalLine."Source Currency Code" := CurrencyCode;
    END;

    LOCAL PROCEDURE GetDocumentNo@33(FAJournalBatch@1000 : Record 5620) : Code[20];
    VAR
      NoSeries@1001 : Record 308;
      NoSeriesManagement@1002 : Codeunit 396;
    BEGIN
      NoSeries.GET(FAJournalBatch."No. Series");
      EXIT(NoSeriesManagement.GetNextNo(FAJournalBatch."No. Series",WORKDATE,FALSE));
    END;

    LOCAL PROCEDURE GetNumberOfGLBudgetEntries@98(BudgetName@1002 : Code[10]) : Integer;
    VAR
      GLBudgetEntry@1003 : Record 96;
    BEGIN
      GLBudgetEntry.SETRANGE("Budget Name",BudgetName);
      EXIT(GLBudgetEntry.COUNT);
    END;

    LOCAL PROCEDURE GetNumberOfDaysInPeriod@63(PeriodStartDate@1005 : Date;PeriodEndDate@1000 : Date) : Decimal;
    VAR
      NoOfDaysInPeriod@1002 : Decimal;
    BEGIN
      // special processing for February due to "border" case:
      // end of period is the end of February and start of period is not the end of January
      // in this case number of days in period should be increased
      NoOfDaysInPeriod := 30;

      IF DATE2DMY(PeriodStartDate,1) <= 27 THEN
        EXIT(NoOfDaysInPeriod);

      IF IsLeapDay(CALCDATE('<CM>',PeriodEndDate)) THEN BEGIN
        IF DATE2DMY(PeriodEndDate,1) = 29 THEN
          NoOfDaysInPeriod += 2
        ELSE
          NoOfDaysInPeriod += 1;
        IF DATE2DMY(PeriodStartDate,1) = 28 THEN
          NoOfDaysInPeriod -= 1;
        NoOfDaysInPeriod += AdjustForJanEnd(PeriodStartDate);
      END ELSE
        IF (DATE2DMY(PeriodEndDate,1) = 28) AND (DATE2DMY(PeriodEndDate,2) = 2) THEN BEGIN
          NoOfDaysInPeriod += 2;
          NoOfDaysInPeriod += AdjustForJanEnd(PeriodStartDate);
        END;

      IF (DATE2DMY(PeriodStartDate,1) = 28) AND (DATE2DMY(PeriodStartDate,2) = 2) THEN
        IF NOT IsLeapDay(CALCDATE('<12M+CM>',PeriodStartDate)) THEN
          NoOfDaysInPeriod := 28.25;

      IF IsLeapDay(CALCDATE('<CM>',PeriodStartDate)) THEN
        IF DATE2DMY(PeriodStartDate,1) = 29 THEN
          NoOfDaysInPeriod -= 1;

      EXIT(NoOfDaysInPeriod);
    END;

    LOCAL PROCEDURE IsLeapDay@57(Date@1000 : Date) : Boolean;
    BEGIN
      IF (DATE2DMY(Date,1) = 29) AND (DATE2DMY(Date,2) = 2) THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE AdjustForJanEnd@61(Date@1000 : Date) : Integer;
    BEGIN
      CASE DATE2DMY(Date,1) OF
        29:
          EXIT(-1);
        30,31:
          EXIT(-2);
      END;
      EXIT(0);
    END;

    LOCAL PROCEDURE FindAndPostGenJournalLines@59(DocumentNo@1000 : Code[20]);
    VAR
      GenJournalLine@1001 : Record 81;
      GenJournalBatch@1002 : Record 232;
    BEGIN
      GenJournalLine.SETRANGE("Document No.",DocumentNo);
      GenJournalLine.FINDSET;
      GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
      GenJournalBatch.VALIDATE("No. Series",'');
      GenJournalBatch.MODIFY(TRUE);
      REPEAT
        GenJournalLine.VALIDATE(Description,GenJournalBatch.Name);
        GenJournalLine.VALIDATE("FA Posting Date",GenJournalLine."Posting Date");
        GenJournalLine.MODIFY(TRUE);
      UNTIL GenJournalLine.NEXT = 0;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE FindPostedAcqCostAmt@148(FANo@1000 : Code[20]) : Decimal;
    VAR
      FALedgerEntry@1001 : Record 5601;
    BEGIN
      WITH FALedgerEntry DO BEGIN
        SETRANGE("FA No.",FANo);
        SETRANGE("FA Posting Type","FA Posting Type"::"Acquisition Cost");
        FINDLAST;
        EXIT(Amount);
      END;
    END;

    LOCAL PROCEDURE MaintenanceCodeGenJournalLine@15(VAR GenJournalLine@1000 : Record 81);
    VAR
      Maintenance@1001 : Record 5626;
    BEGIN
      LibraryFixedAsset.CreateMaintenance(Maintenance);
      GenJournalLine.VALIDATE("Maintenance Code",Maintenance.Code);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyDepreciationBookAndGenJournalBatch@40(VAR DepreciationBook@1001 : Record 5611);
    VAR
      GenJournalBatch@1000 : Record 232;
      BatchName@1002 : Code[10];
    BEGIN
      BatchName := CreateJournalSetupDepreciation(DepreciationBook);
      DepreciationBook.VALIDATE("Allow more than 360/365 Days",TRUE);
      DepreciationBook.MODIFY(TRUE);

      GenJournalBatch.SETRANGE(Name,BatchName);
      GenJournalBatch.FINDFIRST;
      GenJournalBatch.VALIDATE("No. Series",'');
      GenJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunCalculateDepeciation@52(FADepreciationBook@1016 : Record 5612;NoOfMonth@1000 : Integer);
    BEGIN
      CreateFAJournalSetup(FADepreciationBook."Depreciation Book Code");
      SetRequestOption(FADepreciationBook,FADepreciationBook."FA No.",NoOfMonth,FALSE);
    END;

    LOCAL PROCEDURE RunCalculateDepeciationWithBalAccount@53(FADepreciationBook@1016 : Record 5612;NoOfMonth@1000 : Integer) DocumentNo : Code[20];
    BEGIN
      DocumentNo := LibraryUtility.GenerateGUID;
      SetRequestOption(FADepreciationBook,DocumentNo,NoOfMonth,TRUE);
    END;

    LOCAL PROCEDURE RunCopyFAEntriesToGLBudget@87(FANo@1001 : Code[20];DepreciationBookCode@1006 : Code[10];GLBudgetName@1004 : Code[10];StartingDate@1003 : Date);
    VAR
      FixedAsset@1000 : Record 5600;
      CopyFAEntriesToGLBudget@1002 : Report 5684;
    BEGIN
      FixedAsset.SETRANGE("No.",FANo);
      CLEAR(CopyFAEntriesToGLBudget);
      CopyFAEntriesToGLBudget.USEREQUESTPAGE(FALSE);
      CopyFAEntriesToGLBudget.SETTABLEVIEW(FixedAsset);
      CopyFAEntriesToGLBudget.InitializeRequest(DepreciationBookCode,GLBudgetName,StartingDate,WORKDATE,FixedAsset."No.",FALSE);
      CopyFAEntriesToGLBudget.SetTransferType(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE);
      CopyFAEntriesToGLBudget.RUN;
    END;

    LOCAL PROCEDURE SelectFAJournalBatch@37(VAR FAJournalBatch@1000 : Record 5620);
    VAR
      FAJournalTemplate@1004 : Record 5619;
      FAJournalLine@1001 : Record 5621;
    BEGIN
      FAJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryFixedAsset.FindFAJournalTemplate(FAJournalTemplate);
      LibraryFixedAsset.FindFAJournalBatch(FAJournalBatch,FAJournalTemplate.Name);
      FAJournalLine.SETRANGE("Journal Template Name",FAJournalBatch."Journal Template Name");
      FAJournalLine.SETRANGE("Journal Batch Name",FAJournalBatch.Name);
      FAJournalLine.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE SetupAllowPostingToMainAssets@41(AllowPostingToMainAssets@1001 : Boolean);
    VAR
      FASetup@1000 : Record 5603;
    BEGIN
      FASetup.GET;
      FASetup.VALIDATE("Allow Posting to Main Assets",AllowPostingToMainAssets);
      FASetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetupGLIntegrationInBook@7(VAR DepreciationBook@1001 : Record 5611;Boolean@1000 : Boolean);
    BEGIN
      DepreciationBook.VALIDATE("G/L Integration - Depreciation",Boolean);
      DepreciationBook.VALIDATE("G/L Integration - Write-Down",Boolean);
      DepreciationBook.VALIDATE("G/L Integration - Appreciation",Boolean);
      DepreciationBook.VALIDATE("G/L Integration - Custom 1",Boolean);
      DepreciationBook.VALIDATE("G/L Integration - Custom 2",Boolean);
      SetupPartialGLIntegrationBook(DepreciationBook,Boolean);
    END;

    LOCAL PROCEDURE SetupPartialGLIntegrationBook@12(VAR DepreciationBook@1001 : Record 5611;Boolean@1000 : Boolean);
    BEGIN
      DepreciationBook.VALIDATE("G/L Integration - Acq. Cost",Boolean);
      DepreciationBook.VALIDATE("G/L Integration - Disposal",Boolean);
      DepreciationBook.VALIDATE("G/L Integration - Maintenance",Boolean);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetRequestOption@56(FADepreciationBook@1006 : Record 5612;DocumentNo@1001 : Code[20];NoOfMonth@1000 : Integer;InsertBalAccount@1002 : Boolean);
    VAR
      FixedAsset@1004 : Record 5600;
      CalculateDepreciation@1005 : Report 5692;
      PostingDate@1003 : Date;
    BEGIN
      PostingDate := CALCDATE('<' + FORMAT(NoOfMonth) + 'M>',WORKDATE);
      FixedAsset.SETRANGE("No.",FADepreciationBook."FA No.");
      CLEAR(CalculateDepreciation);
      CalculateDepreciation.SETTABLEVIEW(FixedAsset);
      CalculateDepreciation.InitializeRequest(
        FADepreciationBook."Depreciation Book Code",PostingDate,FALSE,0,PostingDate,DocumentNo,'',InsertBalAccount);
      CalculateDepreciation.USEREQUESTPAGE(FALSE);
      CalculateDepreciation.RUN;
    END;

    LOCAL PROCEDURE UpdateDepreciationBook@125(VAR DepreciationBook@1000 : Record 5611);
    BEGIN
      DepreciationBook.VALIDATE("Use FA Exch. Rate in Duplic.",TRUE);

      // Using Random Number Generator for Default Exchange Rate.
      DepreciationBook.VALIDATE("Default Exchange Rate",LibraryRandom.RandDec(10,2));
      UpdatePartOfDuplicationList(DepreciationBook,TRUE);
    END;

    LOCAL PROCEDURE UpdateFAJournalSetup@134(VAR FAJournalSetup@1000 : Record 5605);
    VAR
      FAJournalSetup2@1005 : Record 5605;
    BEGIN
      FAJournalSetup2.SETRANGE("Depreciation Book Code",LibraryFixedAsset.GetDefaultDeprBook);
      FAJournalSetup2.FINDFIRST;
      FAJournalSetup.TRANSFERFIELDS(FAJournalSetup2,FALSE);
      FAJournalSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePartOfDuplicationList@127(VAR DepreciationBook@1000 : Record 5611;PartOfDuplicationList@1001 : Boolean);
    BEGIN
      DepreciationBook.VALIDATE("Part of Duplication List",PartOfDuplicationList);
      DepreciationBook.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcAcqCostDepreciation@147(FANo@1003 : Code[20];DeprBookCode@1004 : Code[10];OldAcquisitionAmt@1002 : Decimal;OldDepreciationAmt@1001 : Decimal;SalvageValue@1000 : Decimal) DeprAmount : Decimal;
    VAR
      DepreciationCalculation@1005 : Codeunit 5616;
    BEGIN
      DeprAmount :=
        DepreciationCalculation.CalcRounding(
          DeprBookCode,(FindPostedAcqCostAmt(FANo) + SalvageValue) * OldDepreciationAmt / OldAcquisitionAmt);
    END;

    LOCAL PROCEDURE VerifyAmountInFALedgerEntry@42(VAR FALedgerEntry@1003 : Record 5601;FANo@1001 : Code[20];Amount@1002 : Decimal);
    BEGIN
      FALedgerEntry.SETRANGE("FA No.",FANo);
      FALedgerEntry.FINDFIRST;
      FALedgerEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyAmountInGLEntry@43(SourceNo@1000 : Code[20];Amount@1001 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("FA Entry Type",GLEntry."FA Entry Type"::"Fixed Asset");
      GLEntry.SETRANGE("Source No.",SourceNo);
      GLEntry.SETRANGE(Amount,Amount);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyFAJournalLine@168(FANo@1000 : Code[20];DepreciationBookCode@1001 : Code[10];Amount@1002 : Decimal);
    VAR
      FAJournalLine@1003 : Record 5621;
    BEGIN
      FAJournalLine.SETRANGE("FA No.",FANo);
      FAJournalLine.FINDFIRST;
      FAJournalLine.TESTFIELD("Depreciation Book Code",DepreciationBookCode);
      FAJournalLine.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyFALedgerEntry@58(FAPostingType@1001 : Option;FANo@1002 : Code[20];Amount@1003 : Decimal);
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      FALedgerEntry@1000 : Record 5601;
    BEGIN
      GeneralLedgerSetup.GET;
      FALedgerEntry.SETRANGE("FA Posting Type",FAPostingType);
      FALedgerEntry.SETRANGE("FA No.",FANo);
      FALedgerEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        Amount,FALedgerEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,FALedgerEntry.FIELDCAPTION(Amount),Amount,FALedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyLastFALedgEntryAmount@173(FANo@1001 : Code[20];FAPostingType@1002 : Option;ExpectedAmount@1003 : Decimal);
    VAR
      FALedgerEntry@1000 : Record 5601;
    BEGIN
      WITH FALedgerEntry DO BEGIN
        SETRANGE("FA No.",FANo);
        SETRANGE("FA Posting Type",FAPostingType);
        FINDLAST;
        TESTFIELD(Amount,ExpectedAmount);
      END;
    END;

    LOCAL PROCEDURE VerifyGLEntry@79(SourceNo@1001 : Code[20];DocumentNo@1004 : Code[20];GLAccountNo@1003 : Code[20];Amount@1000 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("FA Entry Type",GLEntry."FA Entry Type"::"Fixed Asset");
      GLEntry.SETRANGE("Source No.",SourceNo);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyMaintenanceInGLEntry@45(SourceNo@1000 : Code[20];Amount@1001 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("FA Entry Type",GLEntry."FA Entry Type"::Maintenance);
      GLEntry.SETRANGE("Source No.",SourceNo);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyMaintenanceLedgerEntry@9(FANo@1002 : Code[20];Amount@1001 : Decimal);
    VAR
      MaintenanceLedgerEntry@1003 : Record 5625;
    BEGIN
      MaintenanceLedgerEntry.SETRANGE("FA No.",FANo);
      MaintenanceLedgerEntry.FINDFIRST;
      MaintenanceLedgerEntry.TESTFIELD(Amount,Amount);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@46(Message@1000 : Text[1024]);
    BEGIN
      // For handle message
    END;

    [ConfirmHandler]
    PROCEDURE YesConfirmHandler@86(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    LOCAL PROCEDURE FindCustomer@55(VAR Customer@1000 : Record 18);
    BEGIN
      // Filter Customer so that errors are not generated due to mandatory fields.
      Customer.SETFILTER("Customer Posting Group",'<>''''');
      Customer.SETFILTER("Gen. Bus. Posting Group",'<>''''');
      Customer.SETFILTER("Payment Terms Code",'<>''''');
      Customer.SETRANGE(Blocked,Customer.Blocked::" ");
      // For Complete Shipping Advice, partial shipments are disallowed, hence select Partial.
      Customer.SETRANGE("Shipping Advice",Customer."Shipping Advice"::Partial);
      Customer.FINDFIRST;
    END;

    BEGIN
    {
      // [FEATURE] [Fixed Asset]
      Test for Fixed Asset:
       1. Test Duplicate Entry in FA Journal Line after Posting FA G/L Journal with Duplicate in Depreciation Book Code.
       2. Test Duplicate Entry in FA Journal Line after Posting FA G/L Journal with Use Duplication List as True.
       3. Test Duplicate Entry in FA Journal Line after Posting FA G/L Journal with Use Duplication List as True and Depreciation Book
          without Default Exchange Rate.
       4. Test Default Exchange Rate on Depreciation Book after update Use FA Exch. Rate in Duplicate as False.
       5. Test the Posting of fixed Assets in FA G/L Journal.
       6. Post a line in FA G/L journals with FA Posting Type Depreciation.
       7. Post a line in FA G/L journals with FA Posting Type Write-Down.
       8. Post a line in FA G/L journals with FA Posting Type Appreciation.
       9. Post a line in FA G/L journals with FA Posting Type Custom 1.
       10. Post a line in FA G/L journals with FA Posting Type Custom 2.
       11 to 16. Test the Posting of fixed Assets in FA G/L Journal.
       17. Check FA Ledger Entry after Posting Salvage Value with Posting of Acquisition Cost.
       18. Check FA journal Line after Calculating Depreciation.
       19. Check Reverse Transaction Error on FA Ledger Entry after Posting FA with Sales Invoice.
       20. Test that System generates an error when Starting Date is later than the Ending Date on Report Copy FA Entries To G/L Budget.
       21. Test and verify Copy FA Entries To G/L Budget Report functionality for Active Fixed Asset.
       22. Test and verify Copy FA Entries To G/L Budget Report functionality for Inactive Fixed Asset.
       23. Check GL Entries after posting FA Reclass Journals.
       24. Check GL Entries when depreciation is calculated after Reclassification.
       25. Verify that the system converts the Salvage Value into the Local Currency when Posting Gen. Journal Line with Fixed Asset.
       26. Unit Test: verify that the function ConvertAmountToLCYForSourceCurrency returns the correct result for Zero amount.
       27. Unit Test: verify that the function ConvertAmountToLCYForSourceCurrency returns the correct result for Local Currency.
       28. Unit Test: verify that the function ConvertAmountToLCYForSourceCurrency returns the correct result for Foreign Currency.

      TFS_TS_ID = 205985
      Covers Test cases:
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                            TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      FAJournalWithDuplicateBookCode, FAJournalWithUseDuplicateList, FAJournalWithOutExchangeRate, ExchangeRateOnDepreciationBook   141544

      TFS_TS_ID = 205989
      Covers Test cases:
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                            TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      AcquisitionCostIntegrationTrue, DepreciationIntegrationTrue, WriteDownIntegrationTrue, AppreciationIntegrationTrue            141546
      Custom1IntegrationTrue, Custom2IntegrationTrue, MaintenanceIntegrationTrue,BudgetedAssetWithError, BudgetedAssetWithoutError  141546
      FixedAssetAcquisitionCost, FixedAssetDisposalWithError, FixedAssetDisposalWithoutError                                        141546

      TFS_TS_ID = 260081
      Covers Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                              TFS ID
      -------------------------------------------------------------------------
      FAJournalWithSalvageValue,FAJournalWithCalcDepreciation         243089

      TFS_TS_ID = 260089
      Covers Test cases:
      -------------------------------------------------------------------------
      Test Function Name                                              TFS ID
      -------------------------------------------------------------------------
      ReverseErrorOnFALedgerEntry                                     124935

      TFS_TS_ID = 261069
      Covers Test cases:
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                            TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      CopyFAEntriesToGLBudgetError,CopyFAEntriesToGLBudgetActive,CopyFAEntriesGLBudgetInactive                                      129067

      TFS_TS_ID = 271434
      Covers Test cases:
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                            TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      GLEntriesAfterReclassification, DepriciationAfterReclassification                                                              269486
      GenJnlLineWithDeprAcqCostAndSalvageValueFCY,                                                                                   345009
      ConvertAmountForSourceCurrencyZeroAmt,ConvertAmountForSourceCurrencyLCY,ConvertAmountForSourceCurrencyFCY                      345009
    }
    END.
  }
}

