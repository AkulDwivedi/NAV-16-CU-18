OBJECT Codeunit 136903 Employee Reports
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryReportDataset@1003 : Codeunit 131007;
      LibraryHumanResource@1005 : Codeunit 131901;
      LibraryUtility@1009 : Codeunit 131000;
      LibraryService@1000 : Codeunit 131902;
      LibraryTimeSheet@1002 : Codeunit 131904;
      LibrarySetupStorage@1008 : Codeunit 131009;
      Assert@1004 : Codeunit 130000;
      isInitialized@1001 : Boolean;
      PostCodeCityTextErr@1006 : TextConst 'ENU=Wrong value of PostCodeCityText.';
      CountyTextErr@1007 : TextConst 'ENU=Wrong value of CountyText.';

    [Test]
    [HandlerFunctions(EmployeeRelativeReportHandler)]
    PROCEDURE EmployeeRelative@11();
    VAR
      Employee@1003 : Record 5200;
      EmployeeRelative@1001 : Record 5205;
      EmployeeRelatives@1002 : Report 5208;
    BEGIN
      // Test that value of First Name and Birth Date in Employee - Relatives matches the value of First Name and Birth Date
      // in corresponding Employee Relative.

      // 1. Setup: Create Employee and Relative.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      CreateEmployeeRelative(EmployeeRelative,Employee."No.");

      // 2. Exercise: Generate the Employee - Relatives Report.
      COMMIT;
      CLEAR(EmployeeRelatives);
      EmployeeRelative.SETRANGE("Employee No.",EmployeeRelative."Employee No.");
      EmployeeRelatives.SETTABLEVIEW(EmployeeRelative);
      EmployeeRelatives.RUN;

      // 3. Verify: Test that value of First Name and Birth Date in Employee - Relatives matches the value of First Name and Birth Date
      // in corresponding Employee Relative Report.
      VerifyEmployeeRelative(EmployeeRelative);
    END;

    [Test]
    [HandlerFunctions(EmployeeConfidentialInfoReportHandler)]
    PROCEDURE EmployeeConfidentialInfo@26();
    VAR
      ConfidentialInformation@1001 : Record 5216;
      Employee@1003 : Record 5200;
      EmployeeConfidentialInfo@1000 : Report 5203;
    BEGIN
      // Test that value of Description in Employee - Confidential Info. matches the value of Description
      // in corresponding Confidential Information.

      // 1. Setup: Create Employee and Find Confidential.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      LibraryHumanResource.CreateConfidentialInformation(ConfidentialInformation,Employee."No.",FindConfidential);

      // 2. Exercise: Generate the Employee - Confidential Info. Report.
      COMMIT;
      CLEAR(EmployeeConfidentialInfo);
      ConfidentialInformation.SETRANGE("Employee No.",ConfidentialInformation."Employee No.");
      EmployeeConfidentialInfo.SETTABLEVIEW(ConfidentialInformation);
      EmployeeConfidentialInfo.RUN;

      // 3. Verify: Verify that value of Description in Employee - Confidential Info. matches the value of Description
      // in corresponding Confidential Information.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Confidential_Information__Confidential_Code_',ConfidentialInformation."Confidential Code");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the confidential code');

      LibraryReportDataset.AssertCurrentRowValue('Confidential_Information_Description',ConfidentialInformation.Description);
    END;

    [Test]
    [HandlerFunctions(EmployeeMiscellaneousArticleReportHandler)]
    PROCEDURE EmployeeMiscellaneousArticle@6();
    VAR
      Employee@1001 : Record 5200;
      MiscArticleInformation@1002 : Record 5214;
      EmployeeMiscArticleInfo@1000 : Report 5202;
    BEGIN
      // Test that value of Description and Serial No in Employee - Misc. Article Info. matches the value of Description
      // and Serial No in corresponding Misc. Article Information.

      // 1. Setup: Create Employee, Find Misc. Article and Modify Misc. Article Information.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      ModifyMiscellaneousArticle(MiscArticleInformation,Employee."No.");

      // 2. Exercise: Generate the Employee - Misc. Article Info. Report.
      COMMIT;
      CLEAR(EmployeeMiscArticleInfo);
      MiscArticleInformation.SETRANGE("Employee No.",MiscArticleInformation."Employee No.");
      EmployeeMiscArticleInfo.SETTABLEVIEW(MiscArticleInformation);
      EmployeeMiscArticleInfo.RUN;

      // 3. Verify: Verify that value of Description and Serial No in Employee - Misc. Article Info. matches the value of Description
      // and Serial No in corresponding Misc. Article Information.
      VerifyMiscellaneousArticle(MiscArticleInformation);
    END;

    [Test]
    [HandlerFunctions(EmployeeQualificationsArticleReportHandler)]
    PROCEDURE EmployeeQualifications@8();
    VAR
      EmployeeQualification@1001 : Record 5203;
      Employee@1002 : Record 5200;
      EmployeeQualifications@1000 : Report 5206;
    BEGIN
      // Test that value of Description and From Date in Employee - Qualifications matches the value of Description
      // and From Date in corresponding Employee Qualification.

      // 1. Setup: Create Employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      CreateEmployeeQualifications(EmployeeQualification,Employee."No.");

      // 2. Exercise: Generate the Employee - Qualifications Report.
      COMMIT;
      CLEAR(EmployeeQualifications);
      EmployeeQualification.SETRANGE("Employee No.",EmployeeQualification."Employee No.");
      EmployeeQualifications.SETTABLEVIEW(EmployeeQualification);
      EmployeeQualifications.RUN;

      // 3. Verify: Verify that value of Description and From Date in Employee - Qualifications matches the value of Description
      // and From Date in corresponding Employee Qualification.
      VerifyEmployeeQualifications(EmployeeQualification);
    END;

    [Test]
    [HandlerFunctions(EmployeeContractsReportHandler)]
    PROCEDURE EmployeeContracts@10();
    VAR
      Employee@1000 : Record 5200;
      EmploymentContract@1002 : Record 5211;
      EmployeeContracts@1001 : Report 5212;
    BEGIN
      // Test that the values of Code in Employee - Contracts Report must match in Corresponding Employment Contract Table values.

      // 1. Setup: Find Employment Contract and Modify Employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      FindEmploymentContract(EmploymentContract);
      ModifyEmployeeContracts(Employee,EmploymentContract.Code);

      // 2. Exercise: Generate Employee - Contracts Report.
      COMMIT;
      CLEAR(EmployeeContracts);
      EmploymentContract.SETRANGE(Code,EmploymentContract.Code);
      EmployeeContracts.SETTABLEVIEW(EmploymentContract);
      EmployeeContracts.RUN;

      // 3. Verify: Verify that the values of Code in Employee - Contracts Report must match in Corresponding
      // Employment Contract Table values.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Employment_Contract_Code',EmploymentContract.Code);
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the contract code');
    END;

    [Test]
    [HandlerFunctions(EmployeeUnionsReportHandler)]
    PROCEDURE EmployeeUnions@5();
    VAR
      Employee@1000 : Record 5200;
      Union@1002 : Record 5209;
      EmployeeUnions@1001 : Report 5211;
    BEGIN
      // Test that the values of Code in Employee - Unions Report must match in Corresponding Employee Table values.

      // 1. Setup: Find Union and Modify Employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      LibraryHumanResource.CreateUnion(Union);
      ModifyEmployeeUnions(Employee,Union.Code);

      // 2. Exercise: Generate Employee - Unions Report.
      COMMIT;
      CLEAR(EmployeeUnions);
      Union.SETRANGE(Code,Union.Code);
      EmployeeUnions.SETTABLEVIEW(Union);
      EmployeeUnions.RUN;

      // 3. Verify: Verify that the values of Code in Employee - Unions Report must match in Corresponding Employee Table values.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Union_Code',Union.Code);
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the union code');
    END;

    [Test]
    [HandlerFunctions(EmployeePhoneNosReportHandler)]
    PROCEDURE EmployeePhoneNos@15();
    VAR
      Employee@1000 : Record 5200;
      EmployeePhoneNos@1001 : Report 5210;
    BEGIN
      // Test that the values of Phone No and Mobile Phone No in Employee - Phone Nos. Report must match in Corresponding
      // Employee Table values.

      // 1. Setup: Create Employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      ModifyEmployeePhoneNos(Employee);

      // 2. Exercise: Generate Employee - Phone Nos Report.
      COMMIT;
      CLEAR(EmployeePhoneNos);
      Employee.SETRANGE("No.",Employee."No.");
      EmployeePhoneNos.SETTABLEVIEW(Employee);
      EmployeePhoneNos.RUN;

      // 3. Verify: Verify that the values of Phone No and Mobile Phone No in Employee - Phone Nos. Report must match
      // in Corresponding Employee Table values.
      VerifyEmployeePhoneNos(Employee);
    END;

    [Test]
    [HandlerFunctions(EmployeeBirthdaysReportHandler)]
    PROCEDURE EmployeeBirthdays@14();
    VAR
      Employee@1000 : Record 5200;
      EmployeeBirthdays@1001 : Report 5209;
    BEGIN
      // Test that the values of Birth Date in Employee - Birthdays Report must match in Corresponding Employee Table values.

      // 1. Setup: Create Employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      AttachBirthDate(Employee);

      // 2. Exercise: Generate Employee - Birthdays Report.
      COMMIT;
      CLEAR(EmployeeBirthdays);
      Employee.SETRANGE("No.",Employee."No.");
      EmployeeBirthdays.SETTABLEVIEW(Employee);
      EmployeeBirthdays.RUN;

      // 3. Verify: Verify that the values of Birth Date in Employee - Birthdays Report must match in
      // Corresponding Employee Table values.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Employee__No__',Employee."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the employee no');
      LibraryReportDataset.AssertCurrentRowValue('Employee__Birth_Date_',FORMAT(Employee."Birth Date"));
    END;

    [Test]
    [HandlerFunctions(EmployeeAddressesReportHandler)]
    PROCEDURE EmployeeAddresses@29();
    VAR
      Employee@1000 : Record 5200;
      EmployeeAddresses@1001 : Report 5207;
    BEGIN
      // Test that the values of Address in Employee - Addresses Report must match in Corresponding Employee Table values.

      // 1. Setup: Create Employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      AttachAddress(Employee);

      // 2. Exercise: Generate Employee - Addresses Report.
      COMMIT;
      CLEAR(EmployeeAddresses);
      Employee.SETRANGE("No.",Employee."No.");
      EmployeeAddresses.SETTABLEVIEW(Employee);
      EmployeeAddresses.RUN;

      // 3. Verify: Verify that the values of Address in Employee - Addresses Report must match in
      // Corresponding Employee Table values.
      VerifyEmployeeAddresses(Employee);
    END;

    [Test]
    [HandlerFunctions(EmployeeAlternativeAddressReportHandler)]
    PROCEDURE EmployeeAlternativeAddress@23();
    VAR
      Employee@1000 : Record 5200;
      AlternativeAddress@1002 : Record 5201;
      EmployeeAltAddresses@1001 : Report 5213;
    BEGIN
      // Test that the values of Alternative Address and Post Code in Employee - Alt. Addresses Report must match
      // in Corresponding Employee Table values.

      // 1. Setup: Create Employee.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      CreateAlternativeAddress(AlternativeAddress,Employee."No.");
      AttachAlternativeAddress(Employee,AlternativeAddress.Code);

      // 2. Exercise: Generate Employee - Alt. Addresses Report.
      COMMIT;
      CLEAR(EmployeeAltAddresses);
      Employee.SETRANGE("No.",Employee."No.");
      EmployeeAltAddresses.SETTABLEVIEW(Employee);
      EmployeeAltAddresses.RUN;

      // 3. Verify: Test that the values of Alternative Address and Post Code in Employee - Alt. Addresses Report must match
      // Corresponding Employee Table values.
      VerifyAlternativeAddress(Employee,AlternativeAddress);
    END;

    [Test]
    [HandlerFunctions(EmployeeListReportHandler)]
    PROCEDURE EmployeeList@3();
    VAR
      Employee@1000 : Record 5200;
      EmployeeList@1001 : Report 5201;
    BEGIN
      // Test that the values of Department Code and Statistics Group Code in Employee - List Report must
      // match in Corresponding Employee Table values.

      // 1. Setup: Create Employee.
      Initialize;
      CreateEmployeeList(Employee);

      // 2. Exercise: Generate Resource Journal - Test.
      COMMIT;
      CLEAR(EmployeeList);
      Employee.SETRANGE("No.",Employee."No.");
      EmployeeList.SETTABLEVIEW(Employee);
      EmployeeList.RUN;

      // 3. Verify: Verify that the values of Department Code and Statistics Group Code in Employee - List Report must
      // match in Corresponding Employee Table values.
      VerifyEmployee(Employee);
    END;

    [Test]
    [HandlerFunctions(EmployeeAbsencesByCausesReportHandler)]
    PROCEDURE EmployeeAbsencesByCauses@17();
    VAR
      EmployeeAbsence@1001 : Record 5207;
      Employee@1002 : Record 5200;
      EmployeeAbsencesByCauses@1003 : Report 5205;
      EmployeeNo@1006 : Code[20];
    BEGIN
      // Test that the values of Employee No,To Date in Employee - Absences by Causes Report must
      // match in Corresponding Employee Absence Table values.

      // 1. Setup: Find Cause of Absence.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      CreateEmployeeAbsence(EmployeeAbsence,Employee."No.",WORKDATE);
      EmployeeNo := EmployeeAbsence."Employee No.";
      CreateEmployeeAbsence(EmployeeAbsence,EmployeeNo,CALCDATE('<-' + FORMAT(RANDOM(10)) + 'D>',WORKDATE));

      // 2. Exercise: Generate Employee - Absences by Causes Report.
      COMMIT;
      CLEAR(EmployeeAbsencesByCauses);
      EmployeeAbsence.SETRANGE("Employee No.",EmployeeAbsence."Employee No.");
      EmployeeAbsencesByCauses.SETTABLEVIEW(EmployeeAbsence);
      EmployeeAbsencesByCauses.RUN;

      // 3. Verify: Verify that the values of Employee No,To Date in Employee - Absences by Causes Report must
      // match in Corresponding Employee Absence Table values.
      VerifyEmployeeAbsencesByCauses(EmployeeAbsence);
    END;

    [Test]
    [HandlerFunctions(EmployeeStaffAbsencesReportHandler)]
    PROCEDURE EmployeeStaffAbsences@13();
    VAR
      EmployeeAbsence@1001 : Record 5207;
      Employee@1002 : Record 5200;
      EmployeeStaffAbsences@1003 : Report 5204;
    BEGIN
      // Test that the values of Cause of Absence Code and Unit of Measure Code in Employee - Staff Absences Report must
      // match in Corresponding Employee Absence Table values.

      // 1. Setup: Find Cause of Absence.
      Initialize;
      LibraryHumanResource.CreateEmployee(Employee);
      CreateEmployeeAbsence(EmployeeAbsence,Employee."No.",WORKDATE);

      // 2. Exercise: Generate Employee - Staff Absences Report.
      COMMIT;
      CLEAR(EmployeeStaffAbsences);
      EmployeeAbsence.SETRANGE("Employee No.",EmployeeAbsence."Employee No.");
      EmployeeStaffAbsences.SETTABLEVIEW(EmployeeAbsence);
      EmployeeStaffAbsences.RUN;

      // 3. Verify: Verify that the values of Cause of Absence Code and Unit of Measure Code in
      // Employee - Staff Absences Report must match in Corresponding Employee Absence Table values.
      VerifyEmployeeStaffAbsences(EmployeeAbsence);
    END;

    [Test]
    PROCEDURE CheckFormatAddressCountryPostCodeCity@44();
    VAR
      CountryRegion@1000 : Record 9;
      FormatAddress@1006 : Codeunit 365;
      PostCodeCityText@1001 : Text[90];
      CountyText@1002 : Text[50];
      City@1003 : Text[50];
      PostCode@1004 : Code[20];
      County@1005 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country <> '', and "Country/Region"."Address Format" = "Post Code+City"
      Initialize;

      // [GIVEN] Record "Country/Region" with Code = "CR1" and "Address Format" = "Post Code+City"
      CountryRegion.INIT;
      CountryRegion.Code := LibraryUtility.GenerateRandomCode(CountryRegion.FIELDNO(Code),DATABASE::"Country/Region");
      CountryRegion."Address Format" := CountryRegion."Address Format"::"Post Code+City";
      CountryRegion.INSERT;

      // [GIVEN] "Post Code" = '123456'
      PostCode := LibraryUtility.GenerateGUID;

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = 'Moscowia'
      County := LibraryUtility.GenerateGUID;

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = "CR1"
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,PostCode,County,CountryRegion.Code);

      // [THEN] PostCodeCityText = '123456 Moscow'
      Assert.AreEqual(PostCode + ' ' + City,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = 'Moscowia'
      Assert.AreEqual(County,CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressCountryPostCodeCityWithPostCodeIsBlank@69();
    VAR
      CountryRegion@1000 : Record 9;
      FormatAddress@1006 : Codeunit 365;
      PostCodeCityText@1001 : Text[90];
      CountyText@1002 : Text[50];
      City@1003 : Text[50];
      County@1005 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country <> '', and PostCode is blank, and "Country/Region"."Address Format" = "Post Code+City"
      Initialize;

      // [GIVEN] Record "Country/Region" with Code = "CR1" and "Address Format" = "Post Code+City"
      CountryRegion.INIT;
      CountryRegion.Code := LibraryUtility.GenerateRandomCode(CountryRegion.FIELDNO(Code),DATABASE::"Country/Region");
      CountryRegion."Address Format" := CountryRegion."Address Format"::"Post Code+City";
      CountryRegion.INSERT;

      // [GIVEN] "Post Code" = ''

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = 'Moscowia'
      County := LibraryUtility.GenerateGUID;

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = "CR1" and PostCode = ''
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,'',County,CountryRegion.Code);

      // [THEN] PostCodeCityText = 'Moscow'
      Assert.AreEqual(City,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = 'Moscowia'
      Assert.AreEqual(County,CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressCountryCityCountyPostCode@50();
    VAR
      CountryRegion@1006 : Record 9;
      FormatAddress@1005 : Codeunit 365;
      PostCodeCityText@1004 : Text[90];
      CountyText@1003 : Text[50];
      City@1002 : Text[50];
      PostCode@1001 : Code[20];
      County@1000 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country <> '', and "Country/Region"."Address Format" = "City+County+Post Code"
      Initialize;

      // [GIVEN] Record "Country/Region" with Code = "CR1" and "Address Format" = "City+County+Post Code"
      CountryRegion.INIT;
      CountryRegion.Code := LibraryUtility.GenerateRandomCode(CountryRegion.FIELDNO(Code),DATABASE::"Country/Region");
      CountryRegion."Address Format" := CountryRegion."Address Format"::"City+County+Post Code";
      CountryRegion.INSERT;

      // [GIVEN] "Post Code" = '123456'
      PostCode := LibraryUtility.GenerateGUID;

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = 'Moscowia'
      County := LibraryUtility.GenerateGUID;

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = "CR1"
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,PostCode,County,CountryRegion.Code);

      // [THEN] PostCodeCityText = 'Moscow, Moscowia 123456'
      Assert.AreEqual(
        DELSTR(City,MAXSTRLEN(PostCodeCityText) - STRLEN(PostCode) - STRLEN(County) - 3) + ', ' + County + '  ' + PostCode,
        PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = ''
      Assert.AreEqual('',CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressCountryCityCountyPostCodeWithPostCodeIsBlank@75();
    VAR
      CountryRegion@1006 : Record 9;
      FormatAddress@1005 : Codeunit 365;
      PostCodeCityText@1004 : Text[90];
      CountyText@1003 : Text[50];
      City@1002 : Text[50];
      County@1000 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country <> '', and PostCode is blank, and "Country/Region"."Address Format" = "City+County+Post Code"
      Initialize;

      // [GIVEN] Record "Country/Region" with Code = "CR1" and "Address Format" = "City+County+Post Code"
      CountryRegion.INIT;
      CountryRegion.Code := LibraryUtility.GenerateRandomCode(CountryRegion.FIELDNO(Code),DATABASE::"Country/Region");
      CountryRegion."Address Format" := CountryRegion."Address Format"::"City+County+Post Code";
      CountryRegion.INSERT;

      // [GIVEN] "Post Code" = ''

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = 'Moscowia'
      County := LibraryUtility.GenerateGUID;

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = "CR1" and PostCode = ''
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,'',County,CountryRegion.Code);

      // [THEN] PostCodeCityText = 'Moscow'
      Assert.AreEqual(City,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = 'Moscowia'
      Assert.AreEqual(County,CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressCountryCityCountyPostCodeWithCountyIsBlank@77();
    VAR
      CountryRegion@1006 : Record 9;
      FormatAddress@1005 : Codeunit 365;
      PostCodeCityText@1004 : Text[90];
      CountyText@1003 : Text[50];
      PostCode@1000 : Code[20];
      City@1002 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country <> '', and County is blank, and "Country/Region"."Address Format" = "City+County+Post Code"
      Initialize;

      // [GIVEN] Record "Country/Region" with Code = "CR1" and "Address Format" = "City+County+Post Code"
      CountryRegion.INIT;
      CountryRegion.Code := LibraryUtility.GenerateRandomCode(CountryRegion.FIELDNO(Code),DATABASE::"Country/Region");
      CountryRegion."Address Format" := CountryRegion."Address Format"::"City+County+Post Code";
      CountryRegion.INSERT;

      // [GIVEN] "Post Code" = '123456'
      PostCode := LibraryUtility.GenerateGUID;

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = ''

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = "CR1" and County = ''
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,PostCode,'',CountryRegion.Code);

      // [THEN] PostCodeCityText = 'Moscow, 123456'
      Assert.AreEqual(
        DELSTR(City,MAXSTRLEN(PostCodeCityText) - STRLEN(PostCode) - 1) + ', ' + PostCode,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = ''
      Assert.AreEqual('',CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressCountryCityCountyPostCodeWithPostCodeAndCountyAreBlank@79();
    VAR
      CountryRegion@1006 : Record 9;
      FormatAddress@1005 : Codeunit 365;
      PostCodeCityText@1004 : Text[90];
      CountyText@1003 : Text[50];
      City@1002 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country <> '', and PostCode and County are blank, and "Country/Region"."Address Format" = "City+County+Post Code"
      Initialize;

      // [GIVEN] Record "Country/Region" with Code = "CR1" and "Address Format" = "City+County+Post Code"
      CountryRegion.INIT;
      CountryRegion.Code := LibraryUtility.GenerateRandomCode(CountryRegion.FIELDNO(Code),DATABASE::"Country/Region");
      CountryRegion."Address Format" := CountryRegion."Address Format"::"City+County+Post Code";
      CountryRegion.INSERT;

      // [GIVEN] "Post Code" = ''

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = ''

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = "CR1" and PostCode = '' and County = ''
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,'','',CountryRegion.Code);

      // [THEN] PostCodeCityText = 'Moscow'
      Assert.AreEqual(City,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = ''
      Assert.AreEqual('',CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressCountryCityPostCode@51();
    VAR
      CountryRegion@1006 : Record 9;
      FormatAddress@1005 : Codeunit 365;
      PostCodeCityText@1004 : Text[90];
      CountyText@1003 : Text[50];
      City@1002 : Text[50];
      PostCode@1001 : Code[20];
      County@1000 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country <> '', and "Country/Region"."Address Format" = "City+Post Code"
      Initialize;

      // [GIVEN] Record "Country/Region" with Code = "CR1" and "Address Format" = "City+Post Code"
      CountryRegion.INIT;
      CountryRegion.Code := LibraryUtility.GenerateRandomCode(CountryRegion.FIELDNO(Code),DATABASE::"Country/Region");
      CountryRegion."Address Format" := CountryRegion."Address Format"::"City+Post Code";
      CountryRegion.INSERT;

      // [GIVEN] "Post Code" = '123456'
      PostCode := LibraryUtility.GenerateGUID;

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = 'Moscowia'
      County := LibraryUtility.GenerateGUID;

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = "CR1"
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,PostCode,County,CountryRegion.Code);

      // [THEN] PostCodeCityText = 'Moscow, 123456'
      Assert.AreEqual(City + ', ' + PostCode,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = 'Moscowia'
      Assert.AreEqual(County,CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressCountryCityPostCodeWithPostCodeIsBlank@85();
    VAR
      CountryRegion@1006 : Record 9;
      FormatAddress@1005 : Codeunit 365;
      PostCodeCityText@1004 : Text[90];
      CountyText@1003 : Text[50];
      City@1002 : Text[50];
      County@1000 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country <> '', and PostCode = '', and "Country/Region"."Address Format" = "City+Post Code"
      Initialize;

      // [GIVEN] Record "Country/Region" with Code = "CR1" and "Address Format" = "City+Post Code"
      CountryRegion.INIT;
      CountryRegion.Code := LibraryUtility.GenerateRandomCode(CountryRegion.FIELDNO(Code),DATABASE::"Country/Region");
      CountryRegion."Address Format" := CountryRegion."Address Format"::"City+Post Code";
      CountryRegion.INSERT;

      // [GIVEN] "Post Code" = ''

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = 'Moscowia'
      County := LibraryUtility.GenerateGUID;

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = "CR1"
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,'',County,CountryRegion.Code);

      // [THEN] PostCodeCityText = 'Moscow'
      Assert.AreEqual(City,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = 'Moscowia'
      Assert.AreEqual(County,CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressCountryBlankLinePostCodeCity@52();
    VAR
      CountryRegion@1006 : Record 9;
      FormatAddress@1005 : Codeunit 365;
      PostCodeCityText@1004 : Text[90];
      CountyText@1003 : Text[50];
      City@1002 : Text[50];
      PostCode@1001 : Code[20];
      County@1000 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country <> '', and "Country/Region"."Address Format" = "Blank Line+Post Code+City"
      Initialize;

      // [GIVEN] Record "Country/Region" with Code = "CR1" and "Address Format" = "Blank Line+Post Code+City"
      CountryRegion.INIT;
      CountryRegion.Code := LibraryUtility.GenerateRandomCode(CountryRegion.FIELDNO(Code),DATABASE::"Country/Region");
      CountryRegion."Address Format" := CountryRegion."Address Format"::"Blank Line+Post Code+City";
      CountryRegion.INSERT;

      // [GIVEN] "Post Code" = '123456'
      PostCode := LibraryUtility.GenerateGUID;

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = 'Moscowia'
      County := LibraryUtility.GenerateGUID;

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = "CR1"
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,PostCode,County,CountryRegion.Code);

      // [THEN] PostCodeCityText = '123456 Moscow'
      Assert.AreEqual(PostCode + ' ' + City,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = 'Moscowia'
      Assert.AreEqual(County,CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressCountryBlankLinePostCodeCityWithPostCodeIsBlank@90();
    VAR
      CountryRegion@1006 : Record 9;
      FormatAddress@1005 : Codeunit 365;
      PostCodeCityText@1004 : Text[90];
      CountyText@1003 : Text[50];
      City@1002 : Text[50];
      County@1000 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country <> '', and PostCode = '', and "Country/Region"."Address Format" = "Blank Line+Post Code+City"
      Initialize;

      // [GIVEN] Record "Country/Region" with Code = "CR1" and "Address Format" = "Blank Line+Post Code+City"
      CountryRegion.INIT;
      CountryRegion.Code := LibraryUtility.GenerateRandomCode(CountryRegion.FIELDNO(Code),DATABASE::"Country/Region");
      CountryRegion."Address Format" := CountryRegion."Address Format"::"Blank Line+Post Code+City";
      CountryRegion.INSERT;

      // [GIVEN] "Post Code" = ''

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = 'Moscowia'
      County := LibraryUtility.GenerateGUID;

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = "CR1"
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,'',County,CountryRegion.Code);

      // [THEN] PostCodeCityText = 'Moscow'
      Assert.AreEqual(City,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = 'Moscowia'
      Assert.AreEqual(County,CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressGLSetupPostCodeCity@101();
    VAR
      GeneralLedgerSetup@1000 : Record 98;
      FormatAddress@1006 : Codeunit 365;
      PostCodeCityText@1001 : Text[90];
      CountyText@1002 : Text[50];
      City@1003 : Text[50];
      PostCode@1004 : Code[20];
      County@1005 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country = '', and "General Ledger Setup"."Local Address Format" = "Post Code+City"
      Initialize;

      // [GIVEN] "General Ledger Setup" with "Local Address Format" = "Post Code+City"
      UpdateGLSetupAddressFormat(GeneralLedgerSetup."Local Address Format"::"Post Code+City");

      // [GIVEN] "Post Code" = '123456'
      PostCode := LibraryUtility.GenerateGUID;

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = 'Moscowia'
      County := LibraryUtility.GenerateGUID;

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = ''
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,PostCode,County,'');

      // [THEN] PostCodeCityText = '123456 Moscow'
      Assert.AreEqual(PostCode + ' ' + City,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = 'Moscowia'
      Assert.AreEqual(County,CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressGLSetupPostCodeCityWithPostCodeIsBlank@100();
    VAR
      GeneralLedgerSetup@1000 : Record 98;
      FormatAddress@1006 : Codeunit 365;
      PostCodeCityText@1001 : Text[90];
      CountyText@1002 : Text[50];
      City@1003 : Text[50];
      County@1005 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country = '', and PostCode is blank, and "General Ledger Setup"."Local Address Format" = "Post Code+City"
      Initialize;

      // [GIVEN] "General Ledger Setup" with "Local Address Format" = "Post Code+City"
      UpdateGLSetupAddressFormat(GeneralLedgerSetup."Local Address Format"::"Post Code+City");

      // [GIVEN] "Post Code" = ''

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = 'Moscowia'
      County := LibraryUtility.GenerateGUID;

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = '' and PostCode = ''
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,'',County,'');

      // [THEN] PostCodeCityText = 'Moscow'
      Assert.AreEqual(City,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = 'Moscowia'
      Assert.AreEqual(County,CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressGLSetupCityCountyPostCode@99();
    VAR
      GeneralLedgerSetup@1006 : Record 98;
      FormatAddress@1005 : Codeunit 365;
      PostCodeCityText@1004 : Text[90];
      CountyText@1003 : Text[50];
      City@1002 : Text[50];
      PostCode@1001 : Code[20];
      County@1000 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country = '', and "General Ledger Setup"."Local Address Format" = "City+County+Post Code"
      Initialize;

      // [GIVEN] "General Ledger Setup" "Local Address Format" = "City+County+Post Code"
      UpdateGLSetupAddressFormat(GeneralLedgerSetup."Local Address Format"::"City+County+Post Code");

      // [GIVEN] "Post Code" = '123456'
      PostCode := LibraryUtility.GenerateGUID;

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = 'Moscowia'
      County := LibraryUtility.GenerateGUID;

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = ''
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,PostCode,County,'');

      // [THEN] PostCodeCityText = 'Moscow, Moscowia 123456'
      Assert.AreEqual(
        DELSTR(City,MAXSTRLEN(PostCodeCityText) - STRLEN(PostCode) - STRLEN(County) - 3) + ', ' + County + '  ' + PostCode,
        PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = ''
      Assert.AreEqual('',CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressGLSetupCityCountyPostCodeWithPostCodeIsBlank@98();
    VAR
      GeneralLedgerSetup@1006 : Record 98;
      FormatAddress@1005 : Codeunit 365;
      PostCodeCityText@1004 : Text[90];
      CountyText@1003 : Text[50];
      City@1002 : Text[50];
      County@1000 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country = '', and PostCode is blank, and "General Ledger Setup"."Local Address Format" = "City+County+Post Code"
      Initialize;

      // [GIVEN] "General Ledger Setup" with "Local Address Format" = "City+County+Post Code"
      UpdateGLSetupAddressFormat(GeneralLedgerSetup."Local Address Format"::"City+County+Post Code");

      // [GIVEN] "Post Code" = ''

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = 'Moscowia'
      County := LibraryUtility.GenerateGUID;

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = '' and PostCode = ''
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,'',County,'');

      // [THEN] PostCodeCityText = 'Moscow'
      Assert.AreEqual(City,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = 'Moscowia'
      Assert.AreEqual(County,CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressGLSetupCityCountyPostCodeWithCountyIsBlank@97();
    VAR
      GeneralLedgerSetup@1006 : Record 98;
      FormatAddress@1005 : Codeunit 365;
      PostCodeCityText@1004 : Text[90];
      CountyText@1003 : Text[50];
      PostCode@1000 : Code[20];
      City@1002 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country = '', and County is blank, and "General Ledger Setup"."Local Address Format" = "City+County+Post Code"
      Initialize;

      // [GIVEN] Record "Country/Region" with Code = "CR1" and "Address Format" = "City+County+Post Code"
      UpdateGLSetupAddressFormat(GeneralLedgerSetup."Local Address Format"::"City+County+Post Code");

      // [GIVEN] "Post Code" = '123456'
      PostCode := LibraryUtility.GenerateGUID;

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = ''

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = '' and County = ''
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,PostCode,'','');

      // [THEN] PostCodeCityText = 'Moscow, 123456'
      Assert.AreEqual(
        DELSTR(City,MAXSTRLEN(PostCodeCityText) - STRLEN(PostCode) - 1) + ', ' + PostCode,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = ''
      Assert.AreEqual('',CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressGLSetupCityCountyPostCodeWithPostCodeAndCountyAreBlank@96();
    VAR
      GeneralLedgerSetup@1006 : Record 98;
      FormatAddress@1005 : Codeunit 365;
      PostCodeCityText@1004 : Text[90];
      CountyText@1003 : Text[50];
      City@1002 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country = '', and PostCode and County are blank, and "General Ledger Setup"."Local Address Format" = "City+County+Post Code"
      Initialize;

      // [GIVEN] "General Ledger Setup" with "Local Address Format" = "City+County+Post Code"
      UpdateGLSetupAddressFormat(GeneralLedgerSetup."Local Address Format"::"City+County+Post Code");

      // [GIVEN] "Post Code" = ''

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = ''

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = '' and PostCode = '' and County = ''
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,'','','');

      // [THEN] PostCodeCityText = 'Moscow'
      Assert.AreEqual(City,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = ''
      Assert.AreEqual('',CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressGLSetupCityPostCode@95();
    VAR
      GeneralLedgerSetup@1006 : Record 98;
      FormatAddress@1005 : Codeunit 365;
      PostCodeCityText@1004 : Text[90];
      CountyText@1003 : Text[50];
      City@1002 : Text[50];
      PostCode@1001 : Code[20];
      County@1000 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country = '', and "General Ledger Setup"."Local Address Format" = "City+Post Code"
      Initialize;

      // [GIVEN] "General Ledger Setup" with "Local Address Format" = "City+Post Code"
      UpdateGLSetupAddressFormat(GeneralLedgerSetup."Local Address Format"::"City+Post Code");

      // [GIVEN] "Post Code" = '123456'
      PostCode := LibraryUtility.GenerateGUID;

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = 'Moscowia'
      County := LibraryUtility.GenerateGUID;

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = ''
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,PostCode,County,'');

      // [THEN] PostCodeCityText = 'Moscow, 123456'
      Assert.AreEqual(City + ', ' + PostCode,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = 'Moscowia'
      Assert.AreEqual(County,CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressGLSetupCityPostCodeWithPostCodeIsBlank@94();
    VAR
      GeneralLedgerSetup@1006 : Record 98;
      FormatAddress@1005 : Codeunit 365;
      PostCodeCityText@1004 : Text[90];
      CountyText@1003 : Text[50];
      City@1002 : Text[50];
      County@1000 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country = '', and PostCode = '', and "General Ledger Setup"."Local Address Format" = "City+Post Code"
      Initialize;

      // [GIVEN] "General Ledger Setup" with "Local Address Format" = "City+Post Code"
      UpdateGLSetupAddressFormat(GeneralLedgerSetup."Local Address Format"::"City+Post Code");

      // [GIVEN] "Post Code" = ''

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = 'Moscowia'
      County := LibraryUtility.GenerateGUID;

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = ''
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,'',County,'');

      // [THEN] PostCodeCityText = 'Moscow'
      Assert.AreEqual(City,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = 'Moscowia'
      Assert.AreEqual(County,CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressGLSetupBlankLinePostCodeCity@93();
    VAR
      GeneralLedgerSetup@1006 : Record 98;
      FormatAddress@1005 : Codeunit 365;
      PostCodeCityText@1004 : Text[90];
      CountyText@1003 : Text[50];
      City@1002 : Text[50];
      PostCode@1001 : Code[20];
      County@1000 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country = '', and "General Ledger Setup"."Local Address Format" = "Blank Line+Post Code+City"
      Initialize;

      // [GIVEN] Record "Country/Region" with Code = "CR1" and "Address Format" = "Blank Line+Post Code+City"
      UpdateGLSetupAddressFormat(GeneralLedgerSetup."Local Address Format"::"Blank Line+Post Code+City");

      // [GIVEN] "Post Code" = '123456'
      PostCode := LibraryUtility.GenerateGUID;

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = 'Moscowia'
      County := LibraryUtility.GenerateGUID;

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = ''
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,PostCode,County,'');

      // [THEN] PostCodeCityText = '123456 Moscow'
      Assert.AreEqual(PostCode + ' ' + City,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = 'Moscowia'
      Assert.AreEqual(County,CountyText,CountyTextErr);
    END;

    [Test]
    PROCEDURE CheckFormatAddressGLSetupBlankLinePostCodeCityWithPostCodeIsBlank@92();
    VAR
      GeneralLedgerSetup@1006 : Record 98;
      FormatAddress@1005 : Codeunit 365;
      PostCodeCityText@1004 : Text[90];
      CountyText@1003 : Text[50];
      City@1002 : Text[50];
      County@1000 : Text[50];
    BEGIN
      // [FEATURE] [UT] [Format Address]
      // [SCENARIO 212227] FormatPostCodeCity returns correct Address if Country = '', and PostCode = '', and "General Ledger Setup"."Local Address Format" = "Blank Line+Post Code+City"
      Initialize;

      // [GIVEN] "General Ledger Setup" with "Local Address Format" = "Blank Line+Post Code+City"
      UpdateGLSetupAddressFormat(GeneralLedgerSetup."Local Address Format"::"Blank Line+Post Code+City");

      // [GIVEN] "Post Code" = ''

      // [GIVEN] "City" = 'Moscow'
      City := LibraryUtility.GenerateGUID;

      // [GIVEN] "County" = 'Moscowia'
      County := LibraryUtility.GenerateGUID;

      // [WHEN] Invoike FormatPostCodeCity of "Format Address" (codeunit 365) with CountryCode = ''
      FormatAddress.FormatPostCodeCity(PostCodeCityText,CountyText,City,'',County,'');

      // [THEN] PostCodeCityText = 'Moscow'
      Assert.AreEqual(City,PostCodeCityText,PostCodeCityTextErr);

      // [THEN] CountyText = 'Moscowia'
      Assert.AreEqual(County,CountyText,CountyTextErr);
    END;

    LOCAL PROCEDURE Initialize@4();
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;

      isInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
    END;

    LOCAL PROCEDURE AttachAddress@49(VAR Employee@1000 : Record 5200);
    VAR
      PostCode@1001 : Record 225;
      LibraryERM@1002 : Codeunit 131300;
    BEGIN
      // Using Random Values for Address, Value is not important for test.
      LibraryERM.CreatePostCode(PostCode);
      Employee.VALIDATE(
        Address,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Employee.FIELDNO(Address),DATABASE::Employee),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Employee,Employee.FIELDNO(Address))));
      Employee.VALIDATE("Post Code",PostCode.Code);
      Employee.VALIDATE("Country/Region Code",PostCode."Country/Region Code");
      Employee.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AttachAlternativeAddress@34(Employee@1000 : Record 5200;AltAddressCode@1001 : Code[10]);
    BEGIN
      // Use TODAY instead of WORKDATE because original code uses TODAY.
      Employee.VALIDATE("Alt. Address Code",AltAddressCode);
      Employee.VALIDATE("Alt. Address Start Date",CALCDATE('<-' + FORMAT(RANDOM(10)) + 'D>',TODAY));
      Employee.VALIDATE("Alt. Address End Date",CALCDATE('<' + FORMAT(RANDOM(10)) + 'D>',TODAY));
      Employee.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AttachBirthDate@45(VAR Employee@1000 : Record 5200);
    BEGIN
      Employee.VALIDATE("Birth Date",WORKDATE);
      Employee.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAlternativeAddress@22(VAR AlternativeAddress@1001 : Record 5201;EmployeeNo@1000 : Code[20]);
    VAR
      PostCode@1004 : Record 225;
      LibraryERM@1003 : Codeunit 131300;
      LibraryHumanResource@1002 : Codeunit 131901;
    BEGIN
      LibraryERM.CreatePostCode(PostCode);  // Creation of Post Code is required to avoid special characters in existing ones.

      LibraryHumanResource.CreateAlternativeAddress(AlternativeAddress,EmployeeNo);
      AlternativeAddress.VALIDATE(
        Address,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(AlternativeAddress.FIELDNO(Address),DATABASE::"Alternative Address"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Alternative Address",AlternativeAddress.FIELDNO(Address))));
      AlternativeAddress.VALIDATE("Post Code",PostCode.Code);
      AlternativeAddress.VALIDATE("Country/Region Code",PostCode."Country/Region Code");
      AlternativeAddress.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateEmployeeAbsence@9(VAR EmployeeAbsence@1000 : Record 5207;EmployeeNo@1001 : Code[20];FromDate@1004 : Date);
    BEGIN
      LibraryHumanResource.CreateEmployeeAbsence(EmployeeAbsence);
      EmployeeAbsence.VALIDATE("Employee No.",EmployeeNo);
      EmployeeAbsence.VALIDATE("From Date",FromDate);

      // Using Random Value for date.Value is not important for test.
      EmployeeAbsence.VALIDATE("To Date",FromDate);
      EmployeeAbsence.VALIDATE("Cause of Absence Code",GetCauseOfAbsenceCode);
      EmployeeAbsence.VALIDATE(
        Quantity,RANDOM(100) + LibraryUtility.GenerateRandomFraction);  // Required field - value is not important to test case.
      EmployeeAbsence.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateEmployeeQualifications@31(VAR EmployeeQualification@1000 : Record 5203;EmployeeNo@1001 : Code[20]);
    BEGIN
      LibraryHumanResource.CreateEmployeeQualification(EmployeeQualification,EmployeeNo);
      EmployeeQualification.VALIDATE("Qualification Code",FindQualification);
      EmployeeQualification.VALIDATE("From Date",WORKDATE);
      EmployeeQualification.VALIDATE("To Date",WORKDATE);
      EmployeeQualification.VALIDATE(Type,EmployeeQualification.Type::Internal);
      EmployeeQualification.VALIDATE(
        "Institution/Company",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(EmployeeQualification.FIELDNO("Institution/Company"),DATABASE::"Employee Qualification"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Employee Qualification",EmployeeQualification.FIELDNO("Institution/Company"))));

      EmployeeQualification.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateEmployeeRelative@12(VAR EmployeeRelative@1003 : Record 5205;EmployeeNo@1002 : Code[20]);
    BEGIN
      LibraryHumanResource.CreateEmployeeRelative(EmployeeRelative,EmployeeNo);
      EmployeeRelative.VALIDATE("Relative Code",FindRelative);
      EmployeeRelative.VALIDATE("First Name",FindRelative);
      EmployeeRelative.VALIDATE("Birth Date",WORKDATE);
      EmployeeRelative.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateEmployeeList@33(VAR Employee@1000 : Record 5200);
    VAR
      DimensionValue@1001 : Record 349;
      GeneralLedgerSetup@1003 : Record 98;
      PostCode@1002 : Record 225;
      LibraryERM@1004 : Codeunit 131300;
    BEGIN
      GeneralLedgerSetup.GET;
      LibraryERM.CreatePostCode(PostCode);
      DimensionValue.SETRANGE("Dimension Code",GeneralLedgerSetup."Global Dimension 1 Code");
      DimensionValue.FINDFIRST;
      LibraryHumanResource.CreateEmployee(Employee);
      Employee.VALIDATE("Global Dimension 1 Code",DimensionValue.Code);
      Employee.VALIDATE("Statistics Group Code",FindEmployeeStatisticsGroup);
      Employee.VALIDATE("Post Code",PostCode.Code);
      Employee.VALIDATE("Country/Region Code",PostCode."Country/Region Code");
      Employee.VALIDATE("Employment Date",CALCDATE('<' + FORMAT(RANDOM(10)) + 'Y>'));
      Employee.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetCauseOfAbsenceCode@42() : Code[10];
    VAR
      CauseOfAbsence@1000 : Record 5206;
      HumanResourceUnitOfMeasure@1001 : Record 5220;
    BEGIN
      LibraryTimeSheet.FindCauseOfAbsence(CauseOfAbsence);
      WITH CauseOfAbsence DO BEGIN
        IF "Unit of Measure Code" = '' THEN BEGIN
          HumanResourceUnitOfMeasure.FINDFIRST;
          VALIDATE("Unit of Measure Code",HumanResourceUnitOfMeasure.Code);
          MODIFY(TRUE);
        END;
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE UpdateGLSetupAddressFormat@102(AddressFormat@1001 : Option);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup."Local Address Format" := AddressFormat;
      GeneralLedgerSetup.MODIFY;
    END;

    LOCAL PROCEDURE FindRelative@20() : Code[10];
    VAR
      Relative@1000 : Record 5204;
    BEGIN
      LibraryHumanResource.CreateRelative(Relative);
      EXIT(Relative.Code);
    END;

    LOCAL PROCEDURE FindMiscellaneousArticle@36() : Code[10];
    VAR
      MiscArticle@1000 : Record 5213;
    BEGIN
      LibraryHumanResource.CreateMiscArticle(MiscArticle);
      EXIT(MiscArticle.Code);
    END;

    LOCAL PROCEDURE FindConfidential@41() : Code[10];
    VAR
      Confidential@1000 : Record 5215;
    BEGIN
      LibraryHumanResource.CreateConfidential(Confidential);
      EXIT(Confidential.Code);
    END;

    LOCAL PROCEDURE FindEmploymentContract@48(VAR EmploymentContract@1000 : Record 5211);
    BEGIN
      LibraryHumanResource.CreateEmploymentContract(EmploymentContract);
    END;

    LOCAL PROCEDURE FindEmployeeStatisticsGroup@65() : Code[10];
    VAR
      EmployeeStatisticsGroup@1000 : Record 5212;
    BEGIN
      LibraryHumanResource.CreateEmployeeStatGroup(EmployeeStatisticsGroup);
      EXIT(EmployeeStatisticsGroup.Code);
    END;

    LOCAL PROCEDURE FindQualification@81() : Code[10];
    VAR
      Qualification@1000 : Record 5202;
    BEGIN
      LibraryHumanResource.CreateQualification(Qualification);
      EXIT(Qualification.Code);
    END;

    LOCAL PROCEDURE ModifyMiscellaneousArticle@21(VAR MiscArticleInformation@1001 : Record 5214;EmployeeNo@1002 : Code[20]);
    BEGIN
      LibraryHumanResource.CreateMiscArticleInformation(MiscArticleInformation,EmployeeNo,FindMiscellaneousArticle);
      MiscArticleInformation.VALIDATE(
        "Serial No.",
        LibraryUtility.GenerateRandomCode(MiscArticleInformation.FIELDNO("Serial No."),DATABASE::"Misc. Article Information"));
      MiscArticleInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyEmployeeUnions@25(VAR Employee@1000 : Record 5200;UnionCode@1001 : Code[10]);
    BEGIN
      Employee.VALIDATE("Union Code",UnionCode);
      Employee.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyEmployeeContracts@24(VAR Employee@1001 : Record 5200;EmplymtContractCode@1000 : Code[10]);
    BEGIN
      Employee.VALIDATE("Emplymt. Contract Code",EmplymtContractCode);
      Employee.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyEmployeePhoneNos@32(VAR Employee@1000 : Record 5200);
    BEGIN
      Employee.VALIDATE("Phone No.",FORMAT(RANDOM(100) + RANDOM(100) + RANDOM(100)));
      Employee.VALIDATE("Mobile Phone No.",FORMAT(RANDOM(100) + RANDOM(100) + RANDOM(100)));
      Employee.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyAlternativeAddress@19(Employee@1005 : Record 5200;AlternativeAddress@1000 : Record 5201);
    VAR
      CountryRegion@1001 : Record 9;
      FormatAddress@1002 : Codeunit 365;
      PostCodeCity@1003 : Text[90];
      County@1004 : Text[50];
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Employee__No__',Employee."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the employee no');

      LibraryReportDataset.AssertCurrentRowValue('AlternativeAddr_Address',AlternativeAddress.Address);

      CountryRegion.GET(AlternativeAddress."Country/Region Code");
      FormatAddress.FormatPostCodeCity(
        PostCodeCity,County,AlternativeAddress.City,AlternativeAddress."Post Code",AlternativeAddress.County,CountryRegion.Code);
      LibraryReportDataset.AssertCurrentRowValue('PostCodeCityText',PostCodeCity);
    END;

    LOCAL PROCEDURE VerifyEmployee@2(Employee@1000 : Record 5200);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Employee__No__',Employee."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the employee no');

      LibraryReportDataset.AssertCurrentRowValue('Employee__Global_Dimension_1_Code_',Employee."Global Dimension 1 Code");
      LibraryReportDataset.AssertCurrentRowValue('Employee__Global_Dimension_2_Code_',Employee."Global Dimension 2 Code");
      LibraryReportDataset.AssertCurrentRowValue('Employee__Statistics_Group_Code_',Employee."Statistics Group Code");
    END;

    LOCAL PROCEDURE VerifyEmployeeAddresses@87(Employee@1005 : Record 5200);
    VAR
      CountryRegion@1001 : Record 9;
      FormatAddress@1002 : Codeunit 365;
      PostCodeCity@1003 : Text[90];
      County@1004 : Text[50];
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Employee__No__',Employee."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the employee no');

      LibraryReportDataset.AssertCurrentRowValue('Employee_Address',Employee.Address);

      CountryRegion.GET(Employee."Country/Region Code");
      FormatAddress.FormatPostCodeCity(
        PostCodeCity,County,Employee.City,Employee."Post Code",Employee.County,CountryRegion.Code);
      LibraryReportDataset.AssertCurrentRowValue('PostCodeCityText',PostCodeCity);
    END;

    LOCAL PROCEDURE VerifyEmployeeAbsencesByCauses@16(EmployeeAbsence@1000 : Record 5207);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Employee_Absence__Employee_No__',EmployeeAbsence."Employee No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the employee no');

      LibraryReportDataset.AssertCurrentRowValue('Employee_Absence__Quantity__Base__',EmployeeAbsence."Quantity (Base)");
      LibraryReportDataset.AssertCurrentRowValue('Employee_Absence__From_Date_',FORMAT(EmployeeAbsence."From Date"));
      LibraryReportDataset.AssertCurrentRowValue('Employee_Absence__To_Date_',FORMAT(EmployeeAbsence."To Date"));
    END;

    LOCAL PROCEDURE VerifyEmployeePhoneNos@7(Employee@1000 : Record 5200);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Employee__No__',Employee."No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the employee no');

      LibraryReportDataset.AssertCurrentRowValue('Employee__Mobile_Phone_No__',Employee."Mobile Phone No.");
      LibraryReportDataset.AssertCurrentRowValue('Employee__Phone_No__',Employee."Phone No.");
    END;

    LOCAL PROCEDURE VerifyMiscellaneousArticle@28(MiscArticleInformation@1000 : Record 5214);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Misc__Article_Information__Misc__Article_Code_',MiscArticleInformation."Misc. Article Code");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the confidential code');

      LibraryReportDataset.AssertCurrentRowValue('Misc__Article_Information_Description',MiscArticleInformation.Description);
      LibraryReportDataset.AssertCurrentRowValue('Misc__Article_Information__Serial_No__',MiscArticleInformation."Serial No.");
    END;

    LOCAL PROCEDURE VerifyEmployeeQualifications@59(EmployeeQualification@1000 : Record 5203);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Employee_Qualification__Qualification_Code_',EmployeeQualification."Qualification Code");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the confidential code');

      LibraryReportDataset.AssertCurrentRowValue('Employee_Qualification_Description',EmployeeQualification.Description);
      LibraryReportDataset.AssertCurrentRowValue('Employee_Qualification__From_Date_',FORMAT(EmployeeQualification."From Date"));
      LibraryReportDataset.AssertCurrentRowValue('Employee_Qualification__Institution_Company_',
        EmployeeQualification."Institution/Company");
      LibraryReportDataset.AssertCurrentRowValue('Employee_Qualification__To_Date_',FORMAT(EmployeeQualification."To Date"));
    END;

    LOCAL PROCEDURE VerifyEmployeeRelative@43(EmployeeRelative@1000 : Record 5205);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Employee_Relative__Relative_Code_',EmployeeRelative."Relative Code");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the relative code');

      LibraryReportDataset.AssertCurrentRowValue('Employee_Relative__First_Name_',EmployeeRelative."First Name");
      LibraryReportDataset.AssertCurrentRowValue('Employee_Relative__Birth_Date_',FORMAT(EmployeeRelative."Birth Date"));
    END;

    LOCAL PROCEDURE VerifyEmployeeStaffAbsences@18(EmployeeAbsence@1000 : Record 5207);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Employee_Absence__Employee_No__',EmployeeAbsence."Employee No.");
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'find element with the employee no');

      LibraryReportDataset.AssertCurrentRowValue('Employee_Absence__From_Date_',FORMAT(EmployeeAbsence."From Date"));
      LibraryReportDataset.AssertCurrentRowValue('Employee_Absence__Cause_of_Absence_Code_',EmployeeAbsence."Cause of Absence Code");
      LibraryReportDataset.AssertCurrentRowValue('Employee_Absence__Unit_of_Measure_Code_',EmployeeAbsence."Unit of Measure Code");
      LibraryReportDataset.AssertCurrentRowValue('Employee_Absence_Quantity',EmployeeAbsence.Quantity);
    END;

    [RequestPageHandler]
    PROCEDURE EmployeeRelativeReportHandler@27(VAR EmployeeRelatives@1000 : TestRequestPage 5208);
    BEGIN
      EmployeeRelatives.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE EmployeeConfidentialInfoReportHandler@35(VAR EmployeeConfidentialInfo@1000 : TestRequestPage 5203);
    BEGIN
      EmployeeConfidentialInfo.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE EmployeeMiscellaneousArticleReportHandler@37(VAR EmployeeMiscArticleInfo@1000 : TestRequestPage 5202);
    BEGIN
      EmployeeMiscArticleInfo.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE EmployeeQualificationsArticleReportHandler@46(VAR EmployeeQualifications@1000 : TestRequestPage 5206);
    BEGIN
      EmployeeQualifications.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE EmployeeContractsReportHandler@1(VAR EmployeeContracts@1000 : TestRequestPage 5212);
    BEGIN
      EmployeeContracts.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE EmployeeUnionsReportHandler@39(VAR EmployeeUnions@1000 : TestRequestPage 5211);
    BEGIN
      EmployeeUnions.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE EmployeePhoneNosReportHandler@47(VAR EmployeePhoneNos@1000 : TestRequestPage 5210);
    BEGIN
      EmployeePhoneNos.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE EmployeeBirthdaysReportHandler@40(VAR EmployeeBirthdays@1000 : TestRequestPage 5209);
    BEGIN
      EmployeeBirthdays.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE EmployeeAddressesReportHandler@38(VAR EmployeeAddresses@1000 : TestRequestPage 5207);
    BEGIN
      EmployeeAddresses.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE EmployeeAlternativeAddressReportHandler@30(VAR EmployeeAltAddresses@1000 : TestRequestPage 5213);
    BEGIN
      EmployeeAltAddresses.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE EmployeeListReportHandler@53(VAR EmployeeList@1000 : TestRequestPage 5201);
    BEGIN
      EmployeeList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE EmployeeAbsencesByCausesReportHandler@61(VAR EmployeeAbsencesbyCauses@1000 : TestRequestPage 5205);
    BEGIN
      EmployeeAbsencesbyCauses.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE EmployeeStaffAbsencesReportHandler@70(VAR EmployeeStaffAbsences@1000 : TestRequestPage 5204);
    BEGIN
      EmployeeStaffAbsences.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Reports] [Employee]
      Test and Verify Employee Reports.
        1. Test that value of First Name and Birth Date in Employee - Relatives matches the value of First Name and Birth Date
           in corresponding Employee Relative.
        2. Test that value of Description in Employee - Confidential Info. matches the value of Description
           in corresponding Confidential Information.
        3. Test that value of Description and Serial No in Employee - Misc. Article Info. matches the value of Description
           and Serial No in corresponding Misc. Article Information.
        4. Test that value of Description and From Date in Employee - Qualifications matches the value of Description
           and From Date in corresponding Employee Qualification.
        5. Test that the values of Code in Employee - Contracts Report must match in Corresponding Employment Contract Table values.
        6. Test that the values of Code in Employee - Unions Report must match in Corresponding Employee Table values.
        7. Test that the values of Phone No and Mobile Phone No in Employee - Phone Nos. Report must match in Corresponding
           Employee Table values.
        8. Test that the values of Birth Date in Employee - Birthdays Report must match in Corresponding Employee Table values.
        9. Test that the values of Address in Employee - Addresses Report must match in Corresponding Employee Table values.
       10. Test that the values of Alternative Address and Post Code in Employee - Alt. Addresses Report must match
           in Corresponding Employee Table values.
       11. Test that the values of Department Code and Statistics Group Code in Resource List Report must
           match in Corresponding Employee Table values.
       12. Test that the values of Employee No,To Date in Employee - Absences by Causes Report must
           match in Corresponding Employee Absence Table values.
       13. Test that the values of Cause of Absence Code and Unit of Measure Code in Employee - Staff Absences Report must
           match in Corresponding Employee Absence Table values.

      TFS_TS_ID = 234740 and 234742
      Cover Test cases:
      --------------------------------------
      Test Function Name             TFS ID
      --------------------------------------
      EmployeeRelative               139622
      EmployeeConfidentialInfo       139619
      EmployeeMiscellaneousArticle   139618
      EmployeeQualifications         139620
      EmployeeContracts              139626
      EmployeeUnions                 139625
      EmployeePhoneNos               139624
      EmployeeBirthdays              139623
      EmployeeAddresses              139621
      EmployeeAlternativeAddress
      EmployeeList                   139596
      EmployeeAbsencesByCauses       139598
      EmployeeStaffAbsences          139597
    }
    END.
  }
}

