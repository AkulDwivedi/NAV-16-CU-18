OBJECT Codeunit 144062 ERM-TDS Nature Deduction
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GLSetup@1500001 : Record 98;
      IncomeTaxAccountingPeriod@1500006 : Record 13724;
      IncomeTaxPeriodSetup@1500012 : Record 16501;
      NodNocHeader@1500013 : Record 13786;
      TdsNatureOfDeduction@1500014 : Record 13726;
      TDSSetup@1500015 : Record 13728;
      AssesseeCode@1500017 : Record 13727;
      CompanyInformation@1500022 : Record 79;
      TaxJournalTemplate@1500027 : Record 16585;
      TaxJournalBatch@1500026 : Record 16586;
      LibraryWarehouse@1500023 : Codeunit 132204;
      LibraryPurchase@1500009 : Codeunit 130512;
      LibraryERM@1500008 : Codeunit 131300;
      LibraryRandom@1500007 : Codeunit 130440;
      LibraryTDS@1500000 : Codeunit 143000;
      LibrarySetupStorage@1500016 : Codeunit 131009;
      LibraryUtility@1500005 : Codeunit 131000;
      LibraryReportDataset@1500018 : Codeunit 131007;
      LibraryVariableStorage@1500021 : Codeunit 131004;
      ServiceTaxWithTDSHelper@1500002 : Codeunit 143005;
      Assert@1500010 : Codeunit 130000;
      CreditAmountErr@1500011 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=The expected value is %1 and the actual value is %2.';
      AmountErr@1500003 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=%1 is incorrect in %2.';
      GeneralJournalTemplateName@1500020 : Code[10];
      isInitialized@1500004 : Boolean;
      DocNoErr@1500019 : TextConst '@@@="%1 and %2 = Code and Code";ENU=The expected value is %1 and the actual value is %2.';
      ValueNotFoundErr@1500025 : TextConst 'ENU=Value Not Found.';

    [Test]
    PROCEDURE VerifyIncomeTaxAccPeriodErrorBankPaymentVoucher@1500008();
    VAR
      AssesseeCode@1500008 : Record 13727;
      TdsNatureOfDeduction@1500007 : Record 13726;
      NodNocHeader@1500006 : Record 13786;
      GenJnlLine@1500004 : Record 81;
      GenJnlTemplate@1500003 : Record 80;
      TDSSetup@1500001 : Record 13728;
      Amount@1500005 : Decimal;
    BEGIN
      //[SCENARIO 64310] Validating TDS related fields for Bank Payment Voucher when the Income Tax Accounting Period isn't specified
      //[FEATURE] [TDS] [BANK PAYMENT VOUCHER]

      //[GIVEN] Created TDS Setup without Income Tax Acc. Period
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDec(1000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(
        TdsNatureOfDeduction,TDSSetup,TdsNatureOfDeduction."TDS Group"::Contractor,AssesseeCode.Code,'','');
      CreateNODNOCSetup(
        NodNocHeader,ServiceTaxWithTDSHelper.CreateVendorWithPANNo,AssesseeCode.Code,'',TdsNatureOfDeduction.Code,TRUE,
        TRUE,TRUE);

      //[WHEN] Create Bank Payment Voucher Line
      ASSERTERROR CreateJournalDocs(GenJnlLine,NodNocHeader."No.",Amount,TdsNatureOfDeduction.Code,
        GenJnlLine."Bal. Account Type"::"G/L Account",GenJnlTemplate."Sub Type"::"Bank Payment Voucher",
        GenJnlTemplate.Type::General,GenJnlLine."Document Type"::Invoice);

      //[THEN] Error for missing Income Tax Acc. Period is thrown
      Assert.ExpectedError(GetIncomeTaxAccPeriod);
    END;

    [Test]
    PROCEDURE VerifyIncomeTaxAccPeriodErrorCashPaymentVoucher@1500015();
    VAR
      AssesseeCode@1500009 : Record 13727;
      TdsNatureOfDeduction@1500008 : Record 13726;
      NodNocHeader@1500007 : Record 13786;
      GenJnlLine@1500004 : Record 81;
      GenJnlTemplate@1500003 : Record 80;
      TDSSetup@1500001 : Record 13728;
      Amount@1500006 : Decimal;
    BEGIN
      //[SCENARIO 64310] Validating TDS related fields for Cash Payment Voucher when the Income Tax Accounting Period isn't specified
      //[FEATURE] [TDS] [CASH PAYMENT VOUCHER]

      //[GIVEN] Created TDS Setup without Income Tax Acc. Period
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      Amount := LibraryRandom.RandDec(1000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(
        TdsNatureOfDeduction,TDSSetup,TdsNatureOfDeduction."TDS Group"::Contractor,AssesseeCode.Code,'','');
      CreateNODNOCSetup(
        NodNocHeader,ServiceTaxWithTDSHelper.CreateVendorWithPANNo,AssesseeCode.Code,'',TdsNatureOfDeduction.Code,TRUE,
        TRUE,TRUE);

      //[WHEN] Create Cash Payment Voucher Line
      ASSERTERROR CreateJournalDocs(GenJnlLine,NodNocHeader."No.",Amount,TdsNatureOfDeduction.Code,
        GenJnlLine."Bal. Account Type"::"G/L Account",GenJnlTemplate."Sub Type"::"Cash Payment Voucher",
        GenJnlTemplate.Type::General,GenJnlLine."Document Type"::Invoice);

      //[THEN] Error for missing Income Tax Acc. Period is thrown
      Assert.ExpectedError(GetIncomeTaxAccPeriod);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseOrderItem@1500019();
    VAR
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500002 : Record 39;
      ExpectedPurchaseLine@1500001 : Record 39;
      Amount@1500007 : Decimal;
    BEGIN
      //[SCENARIO 64531] Calculating TDS related amount successfully in PO with Item Line
      //[FEATURE] [TDS] [PURCHASE ORDER]

      //[GIVEN] Created TDS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);

      //[WHEN] Create PO with Item
      CreatePurchaseOrderWithTDS(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,NodNocHeader."No.",PurchaseLine.Type::Item,Amount,
        TdsNatureOfDeduction.Code);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmounts(ExpectedPurchaseLine,PurchaseLine.Amount,TDSSetup);

      //[THEN] Verify TDS amount
      VerifyTDSAmountsPurchaseDoc(ExpectedPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseOrderGLAcc@1500034();
    VAR
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500002 : Record 39;
      ExpectedPurchaseLine@1500001 : Record 39;
      Amount@1500007 : Decimal;
    BEGIN
      //[SCENARIO 64531] Calculating TDS related amount successfully in PO with G/L Account Line
      //[FEATURE] [TDS] [PURCHASE ORDER]

      //[GIVEN] Created TDS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);

      //[WHEN] Create PO with G/L Account
      CreatePurchaseOrderWithTDS(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,NodNocHeader."No.",PurchaseLine.Type::"G/L Account",Amount,
        TdsNatureOfDeduction.Code);
      CalcExpectedTDSAmounts(ExpectedPurchaseLine,PurchaseLine.Amount,TDSSetup);
      PurchaseLine.CalculateTDS(PurchaseHeader);

      //[THEN] Verify TDS amount
      VerifyTDSAmountsPurchaseDoc(ExpectedPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseOrderFixedAsset@1500014();
    VAR
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500002 : Record 39;
      ExpectedPurchaseLine@1500001 : Record 39;
      Amount@1500007 : Decimal;
    BEGIN
      //[SCENARIO 64531] Calculating TDS related amount successfully in PO with FA Line
      //[FEATURE] [TDS] [PURCHASE ORDER]

      //[GIVEN] Created TDS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);

      //[WHEN] Create PO with Fixed Asset
      CreatePurchaseOrderWithTDS(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,NodNocHeader."No.",PurchaseLine.Type::"Fixed Asset",Amount,
        TdsNatureOfDeduction.Code);
      CalcExpectedTDSAmounts(ExpectedPurchaseLine,PurchaseLine.Amount,TDSSetup);
      PurchaseLine.CalculateTDS(PurchaseHeader);

      //[THEN] Verify TDS Amount
      VerifyTDSAmountsPurchaseDoc(ExpectedPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseOrderChargeItem@1500018();
    VAR
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500002 : Record 39;
      ExpectedPurchaseLine@1500001 : Record 39;
      Amount@1500007 : Decimal;
    BEGIN
      //[SCENARIO 64531] Calculating TDS related amount successfully in PO with Charge(Item) Line
      //[FEATURE] [TDS] [PURCHASE ORDER]

      //[GIVEN] Created TDS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);

      //[WHEN] Create PO with Charge(Item)
      CreatePurchaseOrderWithTDS(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,NodNocHeader."No.",PurchaseLine.Type::"Charge (Item)",Amount,
        TdsNatureOfDeduction.Code);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmounts(ExpectedPurchaseLine,PurchaseLine.Amount,TDSSetup);

      //[THEN] Verify TDS Amount
      VerifyTDSAmountsPurchaseDoc(ExpectedPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseOrderWithoutThreshold@1500002();
    VAR
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500002 : Record 39;
      ExpectedPurchLine@1500001 : Record 39;
      Amount@1500007 : Decimal;
    BEGIN
      //[SCENARIO 64521] Calculating TDS correctly in Purchase Order when there is no threshold and surcharge overlook for NOD lines of a particular Vendor
      //[FEATURE] [TDS] [PURCHASE ORDER]

      //[GIVEN] Created TDS Setup with Threshold Overlook boolean set to false in NOD lines
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);
      UpdateNODNOCLines(NodNocHeader."No.",'',FALSE,FALSE,FALSE);

      //[WHEN] Create Purchase Order and calculate TDS
      CreatePurchaseOrderWithTDS(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,NodNocHeader."No.",PurchaseLine.Type::Item,Amount,
        TdsNatureOfDeduction.Code);
      PurchaseHeader.CALCFIELDS("Amount to Vendor");
      CalcExpectedTDSAmountsWithThreshold(ExpectedPurchLine,PurchaseLine.Amount);
      PurchaseLine.CalculateTDS(PurchaseHeader);

      //[THEN] Verify TDS Amount
      VerifyTDSAmountsPurchaseDoc(ExpectedPurchLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseInvoiceWithoutThreshold@1500003();
    VAR
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500002 : Record 39;
      ExpectedPurchaseLine@1500001 : Record 39;
      Amount@1500007 : Decimal;
    BEGIN
      //[SCENARIO 64521] Calculating TDS correctly in Purchase Invoice when there is no threshold and surcharge overlook for NOD lines of a particular Vendor
      //[FEATURE] [TDS] [PURCHASE INVOICE]

      //[GIVEN] Created TDS Setup with Threshold Overlook boolean set to false in NOD lines
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);
      UpdateNODNOCLines(NodNocHeader."No.",'',FALSE,FALSE,FALSE);

      //[WHEN] Create Purchase Invoice and calculate TDS
      CreatePurchaseOrderWithTDS(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NodNocHeader."No.",PurchaseLine.Type::Item,Amount,
        TdsNatureOfDeduction.Code);
      PurchaseHeader.CALCFIELDS("Amount to Vendor");
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmountsWithThreshold(ExpectedPurchaseLine,PurchaseLine.Amount);

      //[THEN] Verify TDS Amount
      VerifyTDSAmountsPurchaseDoc(ExpectedPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountWithThresholdBankPaymentVoucher@1500006();
    VAR
      GenJnlLine@1500009 : Record 81;
      ExpectedTDSEntries@1500008 : Record 13729;
      GenJnlTemplate@1500007 : Record 80;
      GenJournalBatch@1500010 : Record 232;
      AmountLine1@1500011 : Decimal;
      AmountLine2@1500003 : Decimal;
      DocumentNo@1500012 : Code[20];
      DocumentType@1500013 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
    BEGIN
      //[SCENARIO 64275] Verify the TDS entry when threshold limit defined is more for first invoice and less for sencond invoice
      //[FEATURE] [TDS] [BANK PAYMENT VOUCHER]

      //[GIVEN] Created TDS Setup
      Initialize;
      AmountLine1 := LibraryRandom.RandDec(10000,2);
      AmountLine2 := LibraryRandom.RandDec(30000,2);
      UpdateNODNOCLines(NodNocHeader."No.",'',FALSE,FALSE,FALSE);

      //[WHEN] Create Template, Batch and Bank Payment Voucher Lines
      LibraryERM.CreateGenJournalTemplate(GenJnlTemplate);
      GenJnlTemplate.VALIDATE(Type,GenJnlTemplate.Type::General);
      GenJnlTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJnlTemplate.Name);

      CreateBankPaymentVoucherLineDrAmt(GenJnlLine,DocumentType::Payment,GenJournalBatch,
        NodNocHeader."No.",AmountLine1,TdsNatureOfDeduction.Code);
      DocumentNo := GenJnlLine."Document No.";
      CreateBankPaymentVoucherLineDrAmt(GenJnlLine,DocumentType::Payment,GenJournalBatch,
        NodNocHeader."No.",AmountLine2,TdsNatureOfDeduction.Code);
      CreateBankPaymentVoucherLineCrAmt(GenJnlLine,DocumentType::Payment,GenJournalBatch,
        LibraryERM.CreateBankAccountNo,-(AmountLine1+AmountLine2));
      GenJnlLine.MODIFYALL("Document No.",DocumentNo);
      CalcTDSAmountsFromBase(ExpectedTDSEntries,TDSSetup,AmountLine1+AmountLine2);
      LibraryERM.PostGeneralJnlLine(GenJnlLine);

      //[THEN] Verify TDS Amounts
      VerifyGLEntry(GenJnlLine."Document Type"::Payment,DocumentNo,(AmountLine1+AmountLine2));
      VerifyTDSEntry(ExpectedTDSEntries,DocumentNo,GenJnlLine."Document Type",FALSE);
    END;

    [Test]
    PROCEDURE VerifyGLPurchaseInvWithDimTDS@1500011();
    VAR
      ServiceTaxGroups@1500007 : Record 16471;
      StructureHdr@1500006 : Record 13792;
      ReverseServiceTaxHelper@1500000 : Codeunit 143006;
      AmtToVend@1500001 : Decimal;
      PostedPurchDocNo@1500009 : Code[20];
      PostedPaymentDocNo@1500010 : Code[20];
    BEGIN
      //[SCENARIO 65659] Verify correct GL Entries when Purchase Invoice is posted with Document Dimensions and TDS
      //[FEATURE] [TDS] [PURCHASE INVOICE]

      //[GIVEN] Created TDS Setup
      Initialize;
      ReverseServiceTaxHelper.CreateServiceTaxGroupSetup(ServiceTaxGroups);
      CreateServiceTaxStructure(StructureHdr);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateTDSNatureDeductionAndTDSSetup(
        TdsNatureOfDeduction,TDSSetup,TdsNatureOfDeduction."TDS Group"::Contractor,AssesseeCode.Code,'','');
      CreateNODNOCSetup(
        NodNocHeader,ServiceTaxWithTDSHelper.CreateVendorWithPANNo,AssesseeCode.Code,'',TdsNatureOfDeduction.Code,TRUE,TRUE,TRUE);

      //[WHEN] Create PO with Serv. Tax and TDS, Post and Verify
      PostedPurchDocNo :=
        CreateAndVerifyPurchaseInvWithDimTDS(AmtToVend,TdsNatureOfDeduction,ServiceTaxGroups,StructureHdr,TDSSetup,NodNocHeader."No.");
      //Create and Post Payment, Verify GL Entries for Posted Payment
      PostedPaymentDocNo := CreateAndVerifyPaymentForPurchInvWithDimTDS(AmtToVend,NodNocHeader."No.");
      //Apply Payment with Invoice, Verify GL entries for Application
      ApplyAndVerifyPaymentWithInvoicePurchInvDimTDS(ServiceTaxGroups,PostedPurchDocNo,PostedPaymentDocNo);
      //Unapply applied Payment and Invoice, Verify GL entries for Un-Application
      UnApplyAndVerifyPaymentWithInvoicePurchInvDimTDS(ServiceTaxGroups,PostedPurchDocNo,PostedPaymentDocNo);
      //Apply Invoice with Payment
      ApplyAndVerifyInvWithPaymentPurchInvDimTDS(PostedPurchDocNo,PostedPaymentDocNo);

      //[THEN] Verify GL entries for Application
      VerifySTaxAfterApplication(PostedPurchDocNo,PostedPaymentDocNo,ServiceTaxGroups);
    END;

    [Test]
    PROCEDURE GeneralJournalInvoiceWithTDSConcessionalCode@1500029();
    VAR
      TdsNatureOfDeduction1@1500004 : Record 13726;
      TDSSetup@1500005 : Record 13728;
      AssesseeCode@1500006 : Record 13727;
      NODHeader@1500008 : Record 13786;
      ConcessionalCode@1500002 : Record 13718;
      GenJournalLine@1500001 : Record 81;
      ExpectedTDSEntries@1500000 : Record 13729;
      GenJnlTemplate@1500003 : Record 80;
      Amount@1500009 : Decimal;
      DocumentNo@1500010 : Code[20];
    BEGIN
      //[SCENARIO 64559] Creation of TDS entries correctly when set Concessional Value in TDS setup window with General Journal
      //[FEATURE] [TDS] [GENERAL JOURNAL]

      //[GIVEN] Created TDS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTDS.CreateConcessionalCode(ConcessionalCode);
      CreateTDSNatureDeductionAndTDSSetup(TdsNatureOfDeduction1,TDSSetup,TDSSetup."TDS Group"::Contractor,
        NodNocHeader."Assesse Code",ConcessionalCode.Code,'');
      CreateNODNOCSetup(
        NODHeader,ServiceTaxWithTDSHelper.CreateVendorWithPANNo,NodNocHeader."Assesse Code",ConcessionalCode.Code,
        TdsNatureOfDeduction1.Code,TRUE,TRUE,TRUE);

      //[WHEN] Create & Post General Journal.
      CreateJournalDocs(
        GenJournalLine,NODHeader."No.",-Amount,TdsNatureOfDeduction1.Code,GenJournalLine."Bal. Account Type"::"G/L Account",
        GenJnlTemplate."Sub Type"::" ",GenJnlTemplate.Type::General,GenJournalLine."Document Type"::Invoice);
      DocumentNo := GenJournalLine."Document No.";
      CalcTDSAmountsFromBase(ExpectedTDSEntries,TDSSetup,-GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      //[THEN] Verify GL Entry Count, Credit Amount On GL Entry.
      VerifyGLEntry(GenJournalLine."Document Type"::Invoice,DocumentNo,Amount);
      VerifyTDSEntry(ExpectedTDSEntries,DocumentNo,GenJournalLine."Document Type",FALSE);
    END;

    [Test]
    PROCEDURE PurchaseJournalInvoiceWithTDSConcessionalCode@1500057();
    VAR
      TdsNatureOfDeduction1@1500008 : Record 13726;
      TDSSetup@1500007 : Record 13728;
      AssesseeCode@1500006 : Record 13727;
      NODHeader@1500004 : Record 13786;
      GenJournalLine@1500001 : Record 81;
      ExpectedTDSEntries@1500000 : Record 13729;
      GenJnlTemplate@1500003 : Record 80;
      ConcessionalCode@1500002 : Record 13718;
      Amount@1500009 : Decimal;
      DocumentNo@1500010 : Code[20];
    BEGIN
      //[SCENARIO 64560] Creating TDS entries correctly when set the Concessional Value in TDS setup window with Purchase Journal
      //[FEATURE] [TDS] [PURCHASE JOURNAL]

      //[GIVEN] Created TDS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTDS.CreateConcessionalCode(ConcessionalCode);
      CreateTDSNatureDeductionAndTDSSetup(TdsNatureOfDeduction1,TDSSetup,TDSSetup."TDS Group"::Contractor,
        AssesseeCode.Code,ConcessionalCode.Code,'');
      CreateNODNOCSetup(
        NODHeader,ServiceTaxWithTDSHelper.CreateVendorWithPANNo,AssesseeCode.Code,ConcessionalCode.Code,
        TdsNatureOfDeduction1.Code,TRUE,TRUE,TRUE);

      //[WHEN] Create & Post Purchase Journal.
      CreateJournalDocs(
        GenJournalLine,NODHeader."No.",-Amount,TdsNatureOfDeduction1.Code,GenJournalLine."Bal. Account Type"::"G/L Account",
        GenJnlTemplate."Sub Type"::" ",GenJnlTemplate.Type::Purchases,GenJournalLine."Document Type"::Invoice);
      DocumentNo := GenJournalLine."Document No.";
      CalcTDSAmountsFromBase(ExpectedTDSEntries,TDSSetup,-GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      //[THEN] Verify GL Entry Count, Credit Amount On GL Entry.
      VerifyGLEntry(GenJournalLine."Document Type"::Invoice,DocumentNo,Amount);
      VerifyTDSEntry(ExpectedTDSEntries,DocumentNo,GenJournalLine."Document Type",FALSE);
    END;

    [Test]
    PROCEDURE PurchaseOrderWithAndWithoutThreshold@1500000();
    VAR
      ExpectedTDSEntries@1500007 : Record 13729;
      DocumentNo@1500006 : Code[20];
      Amount1@1500000 : Decimal;
      Amount2@1500005 : Decimal;
      DocType@1500008 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
    BEGIN
      //[SCENARIO 68505] Calculate TDS Amount when the Threshold Overlook field is changed in NOD/NOL Lines
      //[FEATURE] [TDS] [PURCHASE ORDER]

      //[GIVEN] Created TDS Setup
      Initialize;
      Amount1 := LibraryRandom.RandDecInRange(30000,30000,2);
      Amount2 := LibraryRandom.RandDecInRange(4000,4000,2);

      //[WHEN] Step 1: Create and post PO  when Threshold Overlook is checked for the particular vendor in NOD Lines
      CreateAndPostPOWithThreshold(NodNocHeader."No.",TdsNatureOfDeduction.Code,Amount1);
      //Step 2: Update TDS Threshold Amount and Uncheck Threshold Overlook in NOD Lines for the particular Vendor
      UpdateThresholdAmtAndNODLine(TDSSetup,NodNocHeader);
      //Step 3: Create and post another PO with amount lesser than TDS Threshold Amount, Calculate expected TDS Amount for second PO
      DocumentNo := CreateAndPostPOWithThreshold(NodNocHeader."No.",TdsNatureOfDeduction.Code,Amount2);
      CalcTDSAmountsFromBase(ExpectedTDSEntries,TDSSetup,Amount2);

      //[THEN] Verify that TDS Entry is calculated for the second PO after posting. Also check GL Entry
      VerifyGLEntry(DocType::Invoice,DocumentNo,Amount2);
      VerifyTDSEntry(ExpectedTDSEntries,DocumentNo,DocType::Invoice,FALSE);
    END;

    [Test]
    PROCEDURE PurchaseInvoiceWithTDSandWorkTax@1500033();
    VAR
      GenJnlLine@1500002 : Record 81;
      TdsNatureOfDeduction2@1500003 : Record 13726;
      NodNocLines@1500004 : Record 13785;
      TDSSetup2@1500005 : Record 13728;
      GLEntry@1500006 : Record 17;
      PaymentDocNo@1500001 : Code[20];
      PurchInvDocNo@1500010 : Code[20];
      PostedPurchaseInvoice@1500011 : Code[20];
      Amount@1500000 : Decimal;
    BEGIN
      //[SCENARIO 65608] Verify Work Tax Amount adjustment when Purchase Invoice with TDS and Work Tax amount is applied to a posted Bank Payment Voucher
      //[FEATURE] [TDS] [BANK PAYMENT VOUCHER/PURCHASE INVOICE]

      //[GIVEN] Created TDS and Work Tax Setup
      Initialize;
      Amount := LibraryRandom.RandDecInRange(5000,5000,2);
      CreateTDSNatureDeductionAndTDSSetup(
        TdsNatureOfDeduction2,TDSSetup2,TdsNatureOfDeduction2."TDS Group"::Others,NodNocHeader."Assesse Code",'','');
      LibraryERM.CreateNODNOCLines(NodNocLines,NodNocHeader,TdsNatureOfDeduction2.Code);
      UpdateNODNOCLines(NodNocHeader."No.",'',TRUE,TRUE,TRUE);

      //[WHEN] Step 1: Create and Post Bank Payment Voucher
      PaymentDocNo := CreateAndPostBankPaymentVoucherWithTDSAndWorkTax(GenJnlLine,Amount,TdsNatureOfDeduction2.Code);
      //Step 2: Create and Post Purchase Invoice with TDS and Work Tax
      PurchInvDocNo := CreatePurchInvWithTDSAndWorkTax(GenJnlLine,Amount,TdsNatureOfDeduction2.Code);
      //Step 3: Apply Payment with Invoice and Post
      PostedPurchaseInvoice := ApplyAndPostBankPaymentWithPurchInvWithWorkTaxAndTDS(PaymentDocNo,PurchInvDocNo);

      //[THEN] GL Entries has been created
      VerifyGLEntryCount(PostedPurchaseInvoice,3);
      VerifyGLEntry(GLEntry."Document Type"::Invoice,PostedPurchaseInvoice,Amount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TDSAdjustmentJnlNoSeriesIncrement@1500004();
    VAR
      PostedDocNo1@1500005 : Code[20];
      PostedDocNo2@1500004 : Code[20];
      TDSAdjustmentJnl1@1500000 : Code[20];
      TDSAdjustmentJnl2@1500001 : Code[20];
    BEGIN
      // [SCENARIO 64366/64367] No Series and Posted No Series for TDS Adjustment Journal are incremented
      // [FEATURE] [TDS] [PURCHASE ORDER]

      // [GIVEN] Created TDS Setup,Template and Batch for Tax Adjustment Journal
      Initialize;
      CreateIncomeTaxAccountingPeriod;

      // [WHEN] Create and Post Purchase Order and TDS Adjustment journal
      PostedDocNo1 := CreateAndPostPurchaseOrderWithTDS;
      TDSAdjustmentJnl1 := CreateAndPostTDSAdjustmentJournal(PostedDocNo1,NodNocHeader."No.",TaxJournalBatch.Name);
      PostedDocNo2 := CreateAndPostPurchaseOrderWithTDS;
      TDSAdjustmentJnl2 := CreateAndPostTDSAdjustmentJournal(PostedDocNo2,NodNocHeader."No.",TaxJournalBatch.Name);

      // [THEN] Posted TDS Adjustment Journal created with different Document No.
      Assert.AreEqual(INCSTR(TDSAdjustmentJnl1),TDSAdjustmentJnl2,DocNoErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler)]
    PROCEDURE UpdateTDSChallanRegisterBankPaymentVoucher@1500005();
    VAR
      GenJnlLinePaymnt@1500001 : Record 81;
      ChallanRegister@1500006 : Record 16504;
      DeductorCategory@1500002 : Record 16498;
      ChallanNo@1500005 : Code[20];
      VoucherNo@1500007 : Code[9];
      DocumentNo@1500000 : Code[20];
    BEGIN
      // [SCENARIO 64378] TDS/TCS - Validate Update Challan Register window
      // [FEATURE] [TDS] [BANK PAYMENT VOUCHER]

      // [GIVEN] Created TDS Setup
      Initialize;
      DeductorCategory.GET(CompanyInformation."Deductor Category");
      DeductorCategory.VALIDATE("Transfer Voucher No. Mandatory",TRUE);
      DeductorCategory.MODIFY(TRUE);

      // [WHEN] Create and Post Bank Paymentwith PAY TDS, Create TDS and Challan Register
      DocumentNo := CreateAndPostBankPaymntVoucherWithPayTDS(GenJnlLinePaymnt);
      ChallanNo :=
        LibraryTDS.UpdateChallanDetails(DocumentNo,GenJnlLinePaymnt."Document No.",IncomeTaxAccountingPeriod."Starting Date");
      VoucherNo := RunUpdateChallanRegister(ChallanNo);

      // [THEN] Transfer Voucher No. in Challan Register is updated
      ChallanRegister.SETRANGE("Challan No.",ChallanNo);
      ChallanRegister.FINDFIRST;
      Assert.AreEqual(VoucherNo,ChallanRegister."Transfer Voucher No.",DocNoErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,Form26QRequestPageHandler,GenerateETDSRequestPageHandler)]
    PROCEDURE Form26QMarkedCForNonPANHigherRateDeduction@1500010();
    VAR
      GenJnlLinePayment@1500003 : Record 81;
      TDSSetup1@1500009 : Record 13728;
      AssesseeCode@1500008 : Record 13727;
      ConcessionalCodes@1500007 : Record 13718;
      TdsNatureOfDeduction1@1500006 : Record 13726;
      NodNocHeader1@1500005 : Record 13786;
      Vendor@1500004 : Record 23;
      PostedDocNo@1500002 : Code[20];
    BEGIN
      // [SCENARIO 164335] Validate whether transactions are marked with Concessional Code in Form 26Q where deduction is made with higher rate for non-availability of PAN
      // [FEATURE] [TDS TRANSACTION]

      // [GIVEN] Created TDS Setup with Concessional Code
      Initialize;
      LibraryTDS.UpdateTDSNilChallanInGeneralLedgerSetup;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTDS.CreateConcessionalCode(ConcessionalCodes);
      LibraryTDS.CreateForeignVendorWithPANAPPLIED(Vendor,'','');
      CreateTDSNatureDeductionAndTDSSetup(TdsNatureOfDeduction1,TDSSetup1,TDSSetup1."TDS Group"::Contractor,
        AssesseeCode.Code,ConcessionalCodes.Code,'');
      CreateNODNOCSetup(NodNocHeader1,Vendor."No.",AssesseeCode.Code,ConcessionalCodes.Code,TdsNatureOfDeduction1.Code,TRUE,TRUE,TRUE);

      // [WHEN] Create and Post payment against Gen. Jnl. Line using PAY TDS, Update TDs Register, Generate Form 26Q and eTDS
      PostedDocNo := CreateAndPostMultipleGenJnlLinWithPaymentByPayTDS(GenJnlLinePayment,TDSSetup1,NodNocHeader1."No.",'');
      LibraryTDS.UpdateChallanDetails(PostedDocNo,GenJnlLinePayment."Document No.",IncomeTaxAccountingPeriod."Starting Date");
      LibraryVariableStorage.Enqueue(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
      GenerateForm26Q27Q(TRUE);
      GenerateETDS(TRUE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");

      // [THEN] Form 26Q has been generated with Concessional Code
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Form_26Q_27Q_Entry__Concessional_Code_',ConcessionalCodes.Code);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,Form27QRequestPageHandler,GenerateETDSRequestPageHandler)]
    PROCEDURE Form27QMarkedCForNonPANHigherRateDeduction@1500093();
    VAR
      GenJnlLinePayment@1500003 : Record 81;
      TDSSetup1@1500009 : Record 13728;
      AssesseeCode@1500008 : Record 13727;
      ConcessionalCodes@1500007 : Record 13718;
      TdsNatureOfDeduction1@1500006 : Record 13726;
      NodNocHeader1@1500005 : Record 13786;
      Vendor@1500004 : Record 23;
      CountryRegion@1500010 : Record 9;
      CurrencyCode@1500001 : Code[10];
      PostedDocNo@1500002 : Code[20];
    BEGIN
      // [SCENARIO 164336] Validate whether transactions are marked with Concessional Code in Form 27Q where deduction is made with higher rate for non-availability of PAN
      // [FEATURE] [TDS TRANSACTION]

      // [GIVEN] Created TDS Setup with Concessional Code
      Initialize;
      LibraryTDS.UpdateTDSNilChallanInGeneralLedgerSetup;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTDS.CreateConcessionalCode(ConcessionalCodes);
      CurrencyCode :=
        LibraryERM.CreateCurrencyWithExchangeRate(IncomeTaxAccountingPeriod."Starting Date",LibraryRandom.RandDec(5,0),
          LibraryRandom.RandDec(5,0));
      LibraryERM.CreateCountryRegion(CountryRegion);
      LibraryTDS.CreateForeignVendorWithPANAPPLIED(Vendor,CurrencyCode,CountryRegion.Code);
      CreateTDSNatureDeductionAndTDSSetup(TdsNatureOfDeduction1,TDSSetup1,TDSSetup1."TDS Group"::"Payable to Non Residents",
        AssesseeCode.Code,ConcessionalCodes.Code,CountryRegion.Code);
      CreateNODNOCSetup(NodNocHeader1,Vendor."No.",AssesseeCode.Code,ConcessionalCodes.Code,TdsNatureOfDeduction1.Code,TRUE,TRUE,TRUE);

      // [WHEN] Create and Post payment against Gen. Jnl. Line using PAY TDS, Update TDs Register, Generate Form 27Q and eTDS
      PostedDocNo := CreateAndPostMultipleGenJnlLinWithPaymentByPayTDS(GenJnlLinePayment,TDSSetup1,NodNocHeader1."No.",CurrencyCode);
      LibraryTDS.UpdateChallanDetails(PostedDocNo,GenJnlLinePayment."Document No.",IncomeTaxAccountingPeriod."Starting Date");
      GenerateForm26Q27Q(FALSE);
      GenerateETDS(FALSE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");

      // [THEN] Form 27Q has been generated with Concessional Code
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Form_26Q_27Q_Entry__Concessional_Code_',ConcessionalCodes.Code);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,Form26QRequestPageHandler,GenerateETDSRequestPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE Form26QGenerationAfterTDSAdjustmentJnl@1500037();
    VAR
      GenJournalTemplate@1500001 : Record 80;
      GenJournalLine@1500000 : Record 81;
      GenJnlLinePaymnt@1500004 : Record 81;
      IncomeTaxAccPeriod@1500008 : Record 13724;
      TDSAccNo@1500005 : Code[20];
      FormNo@1500002 : '26Q,27Q';
    BEGIN
      // [SCENARIO 163890] Program generates correct TDS report Form 26Q when TDS entries are adjusted using the TDS Adjustment Journal
      // [FEATURE] [eTDS TRANSACTION]

      // [GIVEN] Created TDS Setup
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      LibraryTDS.UpdateTDSNilChallanInGeneralLedgerSetup;
      TDSAccNo := LibraryTDS.CreateAndUpdateTDSAccNo(TDSSetup);

      // [WHEN] Create and Post payment against Gen. Jnl. Line using PAY TDS, Create and Post TDS Adjustment Journal,SUpdate TDS Register, Generate Form 26Q and eTDS
      CreateJournalDocs(GenJournalLine,NodNocHeader."No.",-LibraryRandom.RandDec(1000,2),TdsNatureOfDeduction.Code,
        GenJournalLine."Bal. Account Type"::"G/L Account",GenJournalTemplate."Sub Type"::"Bank Payment Voucher",
        GenJournalTemplate.Type::General,GenJournalLine."Document Type"::Invoice);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateAndPostTDSAdjustmentJournal(GenJournalLine."Document No.",NodNocHeader."No.",TaxJournalBatch.Name);
      CreateBankPaymentLineForPayTDS(
        GenJnlLinePaymnt,GenJournalTemplate."Sub Type"::"Bank Payment Voucher",GenJnlLinePaymnt."Document Type"::Payment,
        TDSAccNo,GenJournalLine."T.A.N. No.");
      GeneralJournalTemplateName := GenJnlLinePaymnt."Journal Template Name";
      GetBankPaymentVoucherAmountAfterPayTDS(GenJnlLinePaymnt."Journal Batch Name");
      LibraryERM.PostGeneralJnlLine(GenJnlLinePaymnt);
      LibraryTDS.UpdateChallanDetails(
        GenJournalLine."Document No.",GenJnlLinePaymnt."Document No.",IncomeTaxAccountingPeriod."Starting Date");
      IncomeTaxAccPeriod.FINDLAST;
      LibraryVariableStorage.Enqueue(IncomeTaxAccPeriod."Financial Year for eTDS/TCS");
      GenerateForm26Q27Q(TRUE);
      GenerateETDS(TRUE,IncomeTaxAccPeriod."Financial Year for eTDS/TCS");

      // [THEN] File for Generate eTDS has been created
      VerifyValuesOnBatchHeader(FormNo::"26Q",CompanyInformation."T.A.N. No.");
    END;

    LOCAL PROCEDURE Initialize@123();
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;
      GLSetup.GET;
      CompanyInformation.GET;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryTDS.CreateAssesseeandNODNOCSetup(
        NodNocHeader,TdsNatureOfDeduction,TDSSetup,'',ServiceTaxWithTDSHelper.CreateVendorWithPANNo,NodNocHeader.Type::Vendor,
        IncomeTaxAccountingPeriod."Starting Date");
      LibraryTDS.CreateTaxJournalTemplateTDSAdj(TaxJournalTemplate);
      LibraryTDS.CreateTaxJournalBatchTDSAdj(TaxJournalBatch,TaxJournalTemplate.Name);
      isInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE AddDimensionsForPurchLines@1500036(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1001 : Record 39;
      DimensionValue@1500001 : Record 349;
      LibraryDimension@1500000 : Codeunit 131001;
      DimensionSetID@1002 : Integer;
    BEGIN
      PurchaseLine.SETFILTER("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      IF PurchaseLine.FINDSET THEN
        REPEAT
          DimensionSetID := 0;
          LibraryDimension.CreateDimWithDimValue(DimensionValue);
          DimensionSetID := LibraryDimension.CreateDimSet(DimensionSetID,DimensionValue."Dimension Code",DimensionValue.Code);
          PurchaseLine.VALIDATE("Dimension Set ID",DimensionSetID);
          PurchaseLine.MODIFY(TRUE);
        UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateIncomeTaxAccountingPeriod@1500050();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
    BEGIN
      LibraryERM.CreateIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      IncomeTaxAccountingPeriod.VALIDATE("Starting Date",WORKDATE);
      IncomeTaxAccountingPeriod.VALIDATE("Ending Date",CALCDATE('<1Y>',WORKDATE));
      IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS" :=
        FORMAT(DATE2DMY(IncomeTaxAccountingPeriod."Starting Date",3)) +
        FORMAT(IncomeTaxAccountingPeriod."Ending Date",2,'<year,2>');
      IncomeTaxAccountingPeriod.MODIFY(TRUE);
      CreateIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."No.");
    END;

    LOCAL PROCEDURE CreateIncomeTaxPeriodSetup@1500052(IncomeTaxAccountingPeriodNo@1500000 : Integer);
    VAR
      IncomeTaxPeriodSetup@1500001 : Record 16501;
    BEGIN
      LibraryERM.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,IncomeTaxPeriodSetup.Quarter::Q1);
      IncomeTaxPeriodSetup."Starting Date" := WORKDATE;
      IncomeTaxPeriodSetup."Ending Date" := CALCDATE('<CQ>',WORKDATE);
      IncomeTaxPeriodSetup.MODIFY;
    END;

    LOCAL PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@19();
    VAR
      DeductorCategory@1000 : Record 16498;
      Location@1500000 : Record 14;
    BEGIN
      LibraryERM.CreateDeductorCategory(DeductorCategory);
      CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      CompanyInformation.VALIDATE("E-Mail",COPYSTR(LibraryUtility.GenerateRandomText(20),1,20));
      CompanyInformation.VALIDATE("Location Code",LibraryWarehouse.CreateLocation(Location));
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateNODNOCSetup@8(VAR NodNocHeader@1040 : Record 13786;No@1042 : Code[20];AssesseeCode@1043 : Code[10];ConcessionCode@1500000 : Code[10];CodeContractor@1044 : Code[10];ThresholdOverlook@1500001 : Boolean;SurchargeOverlook@1500002 : Boolean;MonthlyCert@1500003 : Boolean);
    VAR
      NodNocLines@1046 : Record 13785;
    BEGIN
      LibraryERM.CreateNODNOCHeader(NodNocHeader,NodNocHeader.Type::Vendor,No);
      NodNocHeader.VALIDATE("Assesse Code",AssesseeCode);
      NodNocHeader.MODIFY(TRUE);
      LibraryERM.CreateNODNOCLines(NodNocLines,NodNocHeader,CodeContractor);
      UpdateNODNOCLines(NodNocHeader."No.",ConcessionCode,ThresholdOverlook,SurchargeOverlook,MonthlyCert);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithTDS@9(VAR PurchaseHeader@1047 : Record 38;VAR PurchaseLine@1500000 : Record 39;DocumentType@1500001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';VendorNo@1048 : Code[20];LineType@1049 : Option;Amount@1050 : Decimal;CodeContractor@1051 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      PurchaseHeader.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      PurchaseHeader.VALIDATE("Location Code",'');
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,LineType,'',1);
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTDSNatureDeductionAndTDSSetup@10(VAR TdsNatureOfDeduction1@1055 : Record 13726;VAR TDSSetup1@1500001 : Record 13728;TDSGroup1@1056 : Option;AssesseeCode1@1057 : Code[10];ConcessionCode1@1500000 : Code[10];CountryCode1@1500002 : Code[10]);
    BEGIN
      LibraryERM.CreateTDSNatureDeduction(TdsNatureOfDeduction1);
      TdsNatureOfDeduction1.VALIDATE("TDS Group",TDSGroup1);
      TdsNatureOfDeduction1.MODIFY(TRUE);
      CreateTDSSetUp(TDSSetup1,TdsNatureOfDeduction1.Code,AssesseeCode1,ConcessionCode1,CountryCode1);
    END;

    LOCAL PROCEDURE CreateTDSSetUp@11(VAR TDSSetup@1060 : Record 13728;TdsNatureDeductionCode@1061 : Code[10];AssesseeCode@1062 : Code[10];ConcessionCode@1500000 : Code[10];CountryCode@1500001 : Code[10]);
    BEGIN
      LibraryTDS.CreateTDSSetup(TDSSetup,TdsNatureDeductionCode,AssesseeCode,IncomeTaxAccountingPeriod."Starting Date",
        ConcessionCode,'',TDSSetup."Act Applicable"::" ",CountryCode);
      TDSSetup.VALIDATE("TDS %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("Non PAN TDS %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("Surcharge %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("eCESS %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("SHE Cess %",LibraryRandom.RandInt(5));
      TDSSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostMultipleGenJnlLinWithPaymentByPayTDS@1500016(VAR GenJnlLinePaymnt@1500006 : Record 81;TDSSetup1@1500009 : Record 13728;VendorNo@1500007 : Code[20];CurrencyCode@1500005 : Code[10]) : Code[20];
    VAR
      GenJournalLineInv@1500004 : Record 81;
      GenJnlTemplate@1500001 : Record 80;
      TDSGroup@1500002 : Record 13731;
      DocumentNo@1500000 : Code[20];
    BEGIN
      CreateMultipleJournalDocs(GenJournalLineInv,VendorNo,TDSSetup1."TDS Nature of Deduction",2);
      GenJournalLineInv.MODIFYALL("Currency Code",CurrencyCode);
      DocumentNo := GenJournalLineInv."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLineInv);
      TDSGroup.SETRANGE("TDS Group",TDSSetup1."TDS Group");
      TDSGroup.FINDFIRST;
      CreateBankPaymentLineForPayTDS(
        GenJnlLinePaymnt,GenJnlTemplate."Sub Type"::"Bank Payment Voucher",GenJnlLinePaymnt."Document Type"::Payment,
        TDSGroup."TDS Account",GenJournalLineInv."T.A.N. No.");
      GeneralJournalTemplateName := GenJnlLinePaymnt."Journal Template Name";
      GetBankPaymentVoucherAmountAfterPayTDS(GenJnlLinePaymnt."Journal Batch Name");
      LibraryERM.PostGeneralJnlLine(GenJnlLinePaymnt);
      EXIT(DocumentNo);
    END;

    LOCAL PROCEDURE CreateBankPaymentVoucherLineDrAmt@1500027(VAR GenJournalLine@1003 : Record 81;DocumentType@1500003 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';GenJournalBatch@1500004 : Record 232;VendorNo@1500002 : Code[20];Amount@1500001 : Decimal;CodeContractor@1500000 : Code[10]);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      GenJournalLine.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBankPaymentVoucherLineCrAmt@1500039(VAR GenJournalLine@1003 : Record 81;DocumentType@1500003 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';GenJournalBatch@1500004 : Record 232;VendorNo@1500002 : Code[20];Amount@1500001 : Decimal);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
      GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
      GenJournalLine."Account Type"::"Bank Account",VendorNo,Amount);
      GenJournalLine.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcExpectedTDSAmountsWithThreshold@1500021(VAR ExpectedPurchaseLine@1500000 : Record 39;TaxBaseAmount@1500002 : Decimal);
    BEGIN
      WITH ExpectedPurchaseLine DO BEGIN
        "TDS Base Amount" := TaxBaseAmount;
        "TDS Amount" := 0;
        "Surcharge Amount" := 0;
        "eCESS on TDS Amount" := 0;
        "SHE Cess on TDS Amount" := 0;
        "Total TDS Including SHE CESS" := 0;
      END;
    END;

    LOCAL PROCEDURE CalcExpectedTDSAmounts@1500017(VAR ExpectedPurchaseLine@1500000 : Record 39;TDSBaseAmt@1500001 : Decimal;TDSSetup@1500005 : Record 13728);
    BEGIN
      WITH ExpectedPurchaseLine DO BEGIN
        "TDS %" := TDSSetup."TDS %";
        "Surcharge %" := TDSSetup."Surcharge %";
        "eCESS % on TDS" := TDSSetup."eCESS %";
        "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
        "TDS Base Amount" := TDSBaseAmt;
        "TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."TDS %" / 100 * "TDS Base Amount"));
        "Surcharge Amount" := LibraryTDS.RoundTDS((TDSSetup."Surcharge %" / 100 * "TDS Amount"));
        "eCESS on TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount")));
        "SHE Cess on TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount")));
        "Total TDS Including SHE CESS" :=
          LibraryTDS.RoundTDS("TDS Amount" + "eCESS on TDS Amount" + "SHE Cess on TDS Amount" + "Surcharge Amount");
      END;
    END;

    LOCAL PROCEDURE CreateMultiplePurchaseLine@1500022(VAR PurchaseLine@1500004 : Record 39;PurchaseHeader@1500003 : Record 38;Type@1500002 : Option;NoOfLines@1500005 : Integer;CodeContractor@1500006 : Code[10];ServiceTaxGroup@1500007 : Code[20]);
    VAR
      i@1500001 : Integer;
    BEGIN
      FOR i := 1 TO NoOfLines DO BEGIN
        LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Type,LibraryERM.CreateGLAccountWithPurchSetup,1);
        PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(1000,2));
        PurchaseLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
        PurchaseLine.VALIDATE("Service Tax Group",ServiceTaxGroup);
        PurchaseLine.MODIFY(TRUE);
      END;
      AddDimensionsForPurchLines(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateServiceTaxStructure@1500026(VAR StructureHeader@1500000 : Record 13792);
    VAR
      StructureLine@1500002 : Record 13793;
      LibraryServiceTax@1500001 : Codeunit 143001;
    BEGIN
      LibraryServiceTax.CreateServiceTaxStructure(StructureHeader);
      StructureLine.RESET;
      StructureLine.SETRANGE(Code,StructureHeader.Code);
      StructureLine.FINDFIRST;
      StructureLine.VALIDATE("Include in TDS Base",TRUE);
      StructureLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcTDSAmountsFromBase@1500087(VAR ExpectedTDSEntries@1500001 : Record 13729;TDSSetup@1500000 : Record 13728;TaxBaseAmount@1500003 : Decimal);
    BEGIN
      WITH ExpectedTDSEntries DO BEGIN
        "TDS Base Amount" := TaxBaseAmount;
        "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS Base Amount");
        "Surcharge Amount" := LibraryTDS.RoundTDS(TDSSetup."Surcharge %" / 100 * "TDS Amount");
        "eCESS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "SHE Cess Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "Total TDS Including SHE CESS" := "TDS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithTDS@1500012() : Code[20];
    VAR
      PurchaseHeader@1500004 : Record 38;
      PurchaseLine@1500003 : Record 39;
      ExpectedTDSEntry@1500001 : Record 13729;
      Amount@1500000 : Decimal;
      DocumentNo@1500002 : Code[20];
      GLDocType@1500005 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
    BEGIN
      Amount := LibraryRandom.RandDec(10000,0);
      CreatePurchaseOrderWithTDS(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,NodNocHeader."No.",PurchaseLine.Type::Item,
        Amount,TdsNatureOfDeduction.Code);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,Amount);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      VerifyGLEntry(GLDocType::Invoice,DocumentNo,Amount);
      VerifyTDSEntry(ExpectedTDSEntry,DocumentNo,PurchaseHeader."Document Type"::Invoice,FALSE);
      EXIT(DocumentNo);
    END;

    LOCAL PROCEDURE CreatePurchInvWithDimInMultipleLines@1500040(VAR PurchaseHeader@1500000 : Record 38;VAR PurchaseLine@1500001 : Record 39;DocType@1500009 : Option;LineType@1500008 : Option;TdsNatureOfDeduction@1500003 : Record 13726;ServiceTaxGroups@1500004 : Record 16471;StructureHdr@1500005 : Record 13792;VendorNo@1500002 : Code[20];NoOfLines@1500007 : Integer);
    VAR
      ServTaxSetup@1500006 : Record 16472;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocType,VendorNo);
      PurchaseHeader.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      PurchaseHeader.VALIDATE("Location Code",'');
      PurchaseHeader.VALIDATE(Structure,StructureHdr.Code);
      PurchaseHeader.MODIFY(TRUE);
      CreateMultiplePurchaseLine(PurchaseLine,PurchaseHeader,LineType,NoOfLines,TdsNatureOfDeduction.Code,ServiceTaxGroups.Code);
      ServTaxSetup.RESET;
      ServTaxSetup.SETRANGE(Code,ServiceTaxGroups.Code);
      ServTaxSetup.FINDFIRST;
      ServTaxSetup.RENAME(ServiceTaxGroups.Code,IncomeTaxAccountingPeriod."Starting Date");
      CalculateStatisticsPurchDoc(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateJournalDocs@1500028(VAR GenJournalLine@1500000 : Record 81;VendorNo@1500001 : Code[20];Amount@1500002 : Decimal;CodeContractor@1500003 : Code[10];BalAccType@1500004 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';SubType@1500005 : ' ,Cash Receipt Voucher,Cash Payment Voucher,Bank Receipt Voucher,Bank Payment Voucher,Contra Voucher,Journal Voucher';TemplateType@1500009 : Option;DocType@1500008 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund');
    VAR
      GenJournalBatch@1500006 : Record 232;
      GenJournalTemplate@1500007 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,TemplateType);
      GenJournalTemplate.VALIDATE("Sub Type",SubType);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocType,
        GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      GenJournalLine.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      CASE BalAccType OF
        BalAccType::"Bank Account":
          BEGIN
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
            GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
          END;
        BalAccType::"G/L Account":
          BEGIN
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
            GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
          END;
      END;
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMultipleJournalDocs@1500035(VAR GenJournalLine@1500000 : Record 81;VendorNo@1500001 : Code[20];CodeContractor@1500003 : Code[10];Maxlines@1500010 : Integer);
    VAR
      GenJournalBatch@1500006 : Record 232;
      DocumentNo@1500011 : Code[20];
      BankAccNo@1500004 : Code[20];
      i@1500009 : Integer;
    BEGIN
      CreateGenJnlTemplateAndBatch(GenJournalBatch);
      DocumentNo := LibraryUtility.GenerateRandomCode(GenJournalLine.FIELDNO("Document No."),DATABASE::"Gen. Journal Line");
      BankAccNo := LibraryERM.CreateBankAccountNo;
      FOR i := 1 TO Maxlines DO
        CreateJournalLines(GenJournalLine,GenJournalBatch,VendorNo,DocumentNo,CodeContractor,BankAccNo);
    END;

    LOCAL PROCEDURE CreateGenJnlTemplateAndBatch@1500041(VAR GenJournalBatch@1500001 : Record 232);
    VAR
      GenJournalTemplate@1500000 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::General);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateJournalLines@1500053(VAR GenJournalLine@1500006 : Record 81;GenJournalBatch@1500001 : Record 232;VendorNo@1500002 : Code[20];DocumentNo@1500003 : Code[20];CodeContractor@1500004 : Code[10];BankAccNo@1500005 : Code[20]);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Vendor,VendorNo,LibraryRandom.RandDec(10000,2));
      GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",BankAccNo);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndVerifyPurchaseInvWithDimTDS@1500042(VAR PurchHdrAmtToVendor@1500009 : Decimal;TdsNatureOfDeduction@1500002 : Record 13726;ServiceTaxGroups@1500003 : Record 16471;StructureHdr@1500004 : Record 13792;TDSSetup@1500011 : Record 13728;VendorNo@1500005 : Code[20]) : Code[20];
    VAR
      ExpectedTDSEntries@1500006 : Record 13729;
      PurchHdr@1500000 : Record 38;
      PurchLine@1500001 : Record 39;
      PostedPurchInvDocNo@1500008 : Code[20];
    BEGIN
      CreatePurchInvWithDimInMultipleLines(PurchHdr,PurchLine,PurchHdr."Document Type"::Invoice,
        PurchLine.Type::"G/L Account",TdsNatureOfDeduction,ServiceTaxGroups,
        StructureHdr,VendorNo,3);
      PurchHdr.CALCFIELDS("Amount to Vendor");
      PurchHdrAmtToVendor := ROUND(PurchHdr."Amount to Vendor",GLSetup."TDS Rounding Precision",'<');
      CalcTDSAmountsFromBase(ExpectedTDSEntries,TDSSetup,PurchHdrAmtToVendor);
      PostedPurchInvDocNo := LibraryPurchase.PostPurchaseDocument(PurchHdr,TRUE,TRUE);

      VerifyGLEntry(PurchHdr."Document Type",PostedPurchInvDocNo,PurchHdrAmtToVendor);
      VerifyTDSEntry(ExpectedTDSEntries,PostedPurchInvDocNo,PurchHdr."Document Type",FALSE);
      VerifyServiceTaxEntry(PostedPurchInvDocNo,PurchHdrAmtToVendor);

      EXIT(PostedPurchInvDocNo);
    END;

    LOCAL PROCEDURE CreateAndVerifyPaymentForPurchInvWithDimTDS@1500045(AmountToVendor@1500000 : Decimal;VendorNo@1500001 : Code[20]) : Code[20];
    VAR
      GenJnlLine@1500002 : Record 81;
      GenJnlTemplate@1500003 : Record 80;
    BEGIN
      CreateJournalDocs(GenJnlLine,VendorNo,AmountToVendor,'',
        GenJnlLine."Bal. Account Type"::"Bank Account",GenJnlTemplate."Sub Type"::"Bank Payment Voucher",
        GenJnlTemplate.Type::General,GenJnlLine."Document Type"::Payment);
      LibraryERM.PostGeneralJnlLine(GenJnlLine);
      VerifyGLEntry(GenJnlLine."Document Type",GenJnlLine."Document No.",GenJnlLine.Amount);
      EXIT(GenJnlLine."Document No.");
    END;

    LOCAL PROCEDURE CreateAndPostPOWithThreshold@1500009(VendorNo@1500000 : Code[20];NODCode@1500001 : Code[10];Amount@1500002 : Decimal) : Code[20];
    VAR
      PurchaseHeader@1500004 : Record 38;
      PurchaseLine@1500003 : Record 39;
      PostedPODocNo@1500005 : Code[20];
    BEGIN
      CreatePOWithGLAcc(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,
        VendorNo,PurchaseLine.Type::"G/L Account",FindGLAccountNo,Amount,NODCode);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      PostedPODocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      EXIT(PostedPODocNo);
    END;

    LOCAL PROCEDURE CreatePOWithGLAcc@1500001(VAR PurchaseHeader@1047 : Record 38;VAR PurchaseLine@1500000 : Record 39;DocumentType@1500001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';VendorNo@1048 : Code[20];LineType@1049 : Option;GLAccNo@1500002 : Code[20];Amount@1050 : Decimal;CodeContractor@1051 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      PurchaseHeader.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      PurchaseHeader.VALIDATE("Location Code",'');
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,LineType,GLAccNo,1);
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostBankPaymentVoucherWithTDSAndWorkTax@1500056(VAR GenJnlLine@1500005 : Record 81;Amount@1500000 : Decimal;WorkTaxCode@1500004 : Code[10]) : Code[20];
    VAR
      GenJnlTemplate@1500003 : Record 80;
      DocumentNo@1500001 : Code[20];
    BEGIN
      CreateJournalDocs(GenJnlLine,NodNocHeader."No.",Amount,TdsNatureOfDeduction.Code,GenJnlLine."Bal. Account Type"::"Bank Account",
        GenJnlTemplate."Sub Type"::"Bank Payment Voucher",GenJnlTemplate.Type::General,GenJnlLine."Document Type"::Payment);
      GenJnlLine.VALIDATE("Work Tax Nature Of Deduction",WorkTaxCode);
      GenJnlLine.MODIFY(TRUE);
      DocumentNo := GenJnlLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJnlLine);
      VerifyGLEntryCount(GenJnlLine."Document No.",4);
      VerifyGLEntry(GenJnlLine."Document Type"::Payment,GenJnlLine."Document No.",Amount);
      EXIT(DocumentNo);
    END;

    LOCAL PROCEDURE CreatePurchInvWithTDSAndWorkTax@1500055(GenJnlLine@1500004 : Record 81;Amount@1500002 : Decimal;WorkTaxCode@1500003 : Code[10]) : Code[20];
    VAR
      PurchaseHdr@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
    BEGIN
      CreatePOWithGLAcc(PurchaseHdr,PurchaseLine,PurchaseHdr."Document Type"::Invoice,NodNocHeader."No.",
        PurchaseLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithPurchSetup,Amount,TdsNatureOfDeduction.Code);
      PurchaseLine.VALIDATE("Work Tax Nature Of Deduction",WorkTaxCode);
      PurchaseLine.MODIFY(TRUE);
      CalculateStatisticsPurchDoc(PurchaseHdr);
      VerifyTDSAndWorkTaxPurchDoc(PurchaseHdr."No.",GenJnlLine."TDS/TCS Amount",GenJnlLine."Work Tax Amount");
      EXIT(PurchaseHdr."No.");
    END;

    LOCAL PROCEDURE CreateAndPostTDSAdjustmentJournal@1500408(PONo@1500002 : Code[20];PartyCode@1500302 : Code[20];BatchName@1500001 : Code[10]) : Code[20];
    VAR
      TDSEntry@1500305 : Record 13729;
      TDSAdjustmentJournal@1500306 : TestPage 13791;
      TDSAdjustmentDocNo@1500000 : Code[20];
      TDSAdjAmount@1500005 : Decimal;
      GLDocType@1500003 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
    BEGIN
      TDSEntry.SETRANGE("Party Code",PartyCode);
      TDSEntry.SETRANGE("Document No.",PONo);
      TDSEntry.FINDFIRST;
      COMMIT;
      WITH TDSAdjustmentJournal DO BEGIN
        OPENEDIT;
        CurrentJnlBatchName.SETVALUE(BatchName);
        "Transaction No".SETVALUE(TDSEntry."Entry No.");
        "TDS/TCS % Applied".SETVALUE(LibraryRandom.RandIntInRange(6,10));
        TDSAdjustmentDocNo := "Document No.".VALUE;
        TDSAdjAmount := Amount.ASDECIMAL;
        Post.INVOKE;
      END;
      VerifyGLEntry(GLDocType::" ",TDSAdjustmentDocNo,TDSAdjAmount);
      EXIT(TDSAdjustmentDocNo);
    END;

    LOCAL PROCEDURE CalculateStatisticsPurchDoc@1500060(PurchaseHdr@1500001 : Record 38);
    VAR
      PurchaseLine@1500000 : Record 39;
    BEGIN
      PurchaseLine.CalculateStructures(PurchaseHdr);
      PurchaseLine.AdjustStructureAmounts(PurchaseHdr);
      PurchaseLine.UpdatePurchLines(PurchaseHdr);
      PurchaseLine.CalculateTDS(PurchaseHdr);
    END;

    LOCAL PROCEDURE CreateAndPostBankPaymntVoucherWithPayTDS@1500031(VAR GenJnlLinePaymnt@1500001 : Record 81) : Code[20];
    VAR
      GenJnlLine@1500004 : Record 81;
      GenJnlTemplate@1500002 : Record 80;
      GenJnlBatch@1500005 : Record 232;
      BankAccNo@1500003 : Code[20];
      TDSAccNo@1500000 : Code[20];
      i@1500006 : Integer;
    BEGIN
      TDSAccNo := LibraryTDS.CreateAndUpdateTDSAccNo(TDSSetup);
      LibraryERM.CreateGenJournalTemplate(GenJnlTemplate);
      GenJnlTemplate.VALIDATE(Type,GenJnlTemplate.Type::General);
      GenJnlTemplate.VALIDATE("Sub Type",GenJnlTemplate."Sub Type"::"Bank Payment Voucher");
      GenJnlTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJnlBatch,GenJnlTemplate.Name);
      BankAccNo := LibraryERM.CreateBankAccountNo;
      FOR i := 1 TO 2 DO BEGIN
        LibraryERM.CreateGeneralJnlLine(
          GenJnlLine,GenJnlBatch."Journal Template Name",GenJnlBatch.Name,GenJnlLine."Document Type"::Payment,
          GenJnlLine."Account Type"::Vendor,NodNocHeader."No.",LibraryRandom.RandDec(50000,2));
        GenJnlLine.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
        GenJnlLine.VALIDATE("Party Type",GenJnlLine."Party Type"::Vendor);
        GenJnlLine.VALIDATE("Party Code",NodNocHeader."No.");
        GenJnlLine.VALIDATE("Bal. Account Type",GenJnlLine."Bal. Account Type"::"Bank Account");
        GenJnlLine.VALIDATE("Bal. Account No.",BankAccNo);
        GenJnlLine.VALIDATE("TDS Nature of Deduction",TdsNatureOfDeduction.Code);
        GenJnlLine.MODIFY(TRUE);
      END;
      LibraryERM.PostGeneralJnlLine(GenJnlLine);
      CreateBankPaymentLineForPayTDS(
        GenJnlLinePaymnt,GenJnlTemplate."Sub Type"::"Bank Payment Voucher",GenJnlLinePaymnt."Document Type"::Payment,
        TDSAccNo,GenJnlLine."T.A.N. No.");
      GeneralJournalTemplateName := GenJnlLinePaymnt."Journal Template Name";
      GetBankPaymentVoucherAmountAfterPayTDS(GenJnlLinePaymnt."Journal Batch Name");
      LibraryERM.PostGeneralJnlLine(GenJnlLinePaymnt);
      EXIT(GenJnlLine."Document No.");
    END;

    PROCEDURE CheckPreview@175(PaymentJournal@1000 : TestPage 16577) : Text;
    VAR
      CheckPreview@1001 : TestPage 404;
    BEGIN
      CheckPreview.TRAP;
      CheckPreview.OPENEDIT;
      PaymentJournal."Page Check Preview".INVOKE;
      EXIT(CheckPreview.AmountText.VALUE);
    END;

    LOCAL PROCEDURE CreateBankPaymentLineForPayTDS@1500030(VAR GenJournalLine@1500000 : Record 81;SubType@1500005 : Option;DocType@1500008 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';AccNo@1500001 : Code[20];TANNo@1500003 : Code[10]);
    VAR
      GenJournalBatch@1500006 : Record 232;
      GenJournalTemplate@1500007 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::General);
      GenJournalTemplate.VALIDATE("Sub Type",SubType);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocType,
        GenJournalLine."Account Type"::"G/L Account",AccNo,0);
      GenJournalLine.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
      GenJournalLine.VALIDATE("T.A.N. No.",TANNo);
      GenJournalLine.VALIDATE("Pay TDS",TRUE);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindGLEntry@14(VAR GLEntry@1067 : Record 17;DocumentType@1068 : Option;DocumentNo@1069 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
    END;

    LOCAL PROCEDURE FindGLAccountNo@13() : Code[20];
    VAR
      GLAccount@1065 : Record 15;
      GeneralPostingSetup@1066 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryERM.FindGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE GenerateForm26Q27Q@1500067(Resident@1500000 : Boolean);
    BEGIN
      COMMIT;
      IF Resident THEN
        REPORT.RUN(REPORT::"Form 26Q")
      ELSE
        REPORT.RUN(REPORT::"Form 27Q")
    END;

    LOCAL PROCEDURE GenerateETDS@1500426(Resident@1500000 : Boolean;FinancialYear@1500003 : Code[6]) FileName : Text;
    VAR
      FileManagement@1500001 : Codeunit 419;
      GenerateeTDS@1500201 : TestPage 16507;
    BEGIN
      FileName := FileManagement.ServerTempFileName('.txt');
      LibraryVariableStorage.Enqueue(FileName);
      LibraryVariableStorage.Enqueue(FinancialYear);
      COMMIT;
      GenerateeTDS.OPENEDIT;
      GenerateeTDS.FormNo.SETVALUE(GetFormNo(Resident));
      GenerateeTDS.eTDS.INVOKE;
    END;

    LOCAL PROCEDURE GetFormNo@1500043(Resident@1500000 : Boolean) : Integer;
    VAR
      BatchHeader@1500001 : Record 16503;
    BEGIN
      IF Resident THEN
        EXIT(BatchHeader."Form No."::"26Q");
      EXIT(BatchHeader."Form No."::"27Q");
    END;

    LOCAL PROCEDURE GetIncomeTaxAccPeriod@1500013() : Text;
    VAR
      TDSAccountingPeriod@1500001 : Record 13724;
    BEGIN
      TDSAccountingPeriod.RESET;
      TDSAccountingPeriod.SETFILTER("Ending Date",'>=%1',WORKDATE);
      TDSAccountingPeriod.SETFILTER("Starting Date",'<=%1',WORKDATE);
      ASSERTERROR TDSAccountingPeriod.FINDFIRST;
      EXIT(GETLASTERRORTEXT);
    END;

    LOCAL PROCEDURE GetBankPaymentVoucherAmountAfterPayTDS@1500032(JournalBatchName@1500000 : Code[20]);
    VAR
      PayTDS@1500002 : TestPage 13788;
      BankPaymentVoucherPage@1500001 : TestPage 16577;
    BEGIN
      COMMIT;
      BankPaymentVoucherPage.OPENVIEW;
      BankPaymentVoucherPage.CurrentJnlBatchName.SETVALUE(JournalBatchName);
      PayTDS.TRAP;
      BankPaymentVoucherPage.TDS.INVOKE;
      PayTDS.Pay.INVOKE;
    END;

    LOCAL PROCEDURE RunUpdateChallanRegister@1500217(ChallanNo@1501000 : Code[20]) : Code[9];
    VAR
      ChallanRegister@1500201 : Record 16504;
      UpdateChallanRegister@1500203 : Report 16503;
      UpdatedTDSAmount@1500000 : Decimal;
      TransferVoucherNo@1500001 : Code[9];
    BEGIN
      ChallanRegister.SETRANGE("Challan No.",ChallanNo);
      COMMIT;
      UpdatedTDSAmount := LibraryRandom.RandDec(100,2);
      TransferVoucherNo := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(9,0),1,9);
      UpdateChallanRegister.SETTABLEVIEW(ChallanRegister);
      UpdateChallanRegister.UpdateChallan(UpdatedTDSAmount,UpdatedTDSAmount,UpdatedTDSAmount,1);
      UpdateChallanRegister.UpdateVoucherNo(TRUE,TransferVoucherNo);
      UpdateChallanRegister.USEREQUESTPAGE(FALSE);
      UpdateChallanRegister.RUNMODAL;
      EXIT(TransferVoucherNo);
    END;

    LOCAL PROCEDURE UpdateNODNOCLines@15(VendorNo@1500004 : Code[20];ConcessionCode@1500000 : Code[10];ThresholdOverlook@1500001 : Boolean;SurchargeOverlook@1500002 : Boolean;MonthlyCertificate@1500005 : Boolean);
    VAR
      NodNocLines@1500003 : Record 13785;
    BEGIN
      NodNocLines.SETRANGE(Type,NodNocHeader.Type::Vendor);
      NodNocLines.SETRANGE("No.",VendorNo);
      NodNocLines.FINDFIRST;
      NodNocLines.MODIFYALL("Concessional Code",ConcessionCode);
      NodNocLines.MODIFYALL("Threshold Overlook",ThresholdOverlook);
      NodNocLines.MODIFYALL("Surcharge Overlook",SurchargeOverlook);
      NodNocLines.MODIFYALL("Monthly Certificate",MonthlyCertificate);
    END;

    LOCAL PROCEDURE VerifyTDSAmountsPurchaseDoc@1500078(ExpectedPurchaseLine@1500005 : Record 39;PurchaseLine@1500001 : Record 39;DoubleRoundingPrecision@1500004 : Boolean);
    VAR
      PurchLine@1500000 : Record 39;
      RoundingPrecision@1500006 : Decimal;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchaseLine."Document Type");
      PurchLine.SETRANGE("Document No.",PurchaseLine."Document No.");
      PurchLine.FINDFIRST;

      RoundingPrecision := GLSetup."TDS Rounding Precision";
      IF DoubleRoundingPrecision THEN
        RoundingPrecision := RoundingPrecision * 2;
      Assert.AreEqual(
        ExpectedPurchaseLine."TDS %",PurchLine."TDS %",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("TDS %"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLine."TDS Amount",PurchLine."TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("TDS Amount"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLine."TDS Base Amount",PurchLine."TDS Base Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("TDS Base Amount"),PurchLine.TABLECAPTION));
      Assert.AreEqual(
        ExpectedPurchaseLine."eCESS % on TDS",PurchLine."eCESS % on TDS",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("eCESS % on TDS"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLine."eCESS on TDS Amount",PurchLine."eCESS on TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("eCESS on TDS Amount"),PurchLine.TABLECAPTION));
      Assert.AreEqual(
        ExpectedPurchaseLine."SHE Cess % On TDS",PurchLine."SHE Cess % On TDS",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("SHE Cess % On TDS"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLine."SHE Cess on TDS Amount",PurchLine."SHE Cess on TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("SHE Cess on TDS Amount"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLine."Total TDS Including SHE CESS",PurchLine."Total TDS Including SHE CESS",
        GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("Total TDS Including SHE CESS"),PurchLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyServiceTaxEntry@1500024(DocumentNo@1500000 : Code[20];Amount@1500001 : Decimal);
    VAR
      ServiceTaxEntry@1500002 : Record 16473;
    BEGIN
      ServiceTaxEntry.SETRANGE("Document No.",DocumentNo);
      ServiceTaxEntry.CALCSUMS("Amount Including Service Tax");
      Assert.AreNearlyEqual(
        ROUND(ServiceTaxEntry."Amount Including Service Tax",GLSetup."TDS Rounding Precision"),Amount,
        GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,ServiceTaxEntry.FIELDNAME("Amount Including Service Tax"),ServiceTaxEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifySTaxAfterApplication@1500020(PostedPODocNo@1500000 : Code[20];PostedPaymentDocNo@1500006 : Code[20];ServTaxGroup@1500001 : Record 16471);
    VAR
      ServiceTaxSetup@1500003 : Record 16472;
      GLEntryPostedPO@1500004 : Record 17;
      GLEntryRecInterim@1500007 : Record 17;
      GLEntryRec@1500008 : Record 17;
      SourceCodeSetup@1500009 : Record 242;
    BEGIN
      SourceCodeSetup.GET;
      ServiceTaxSetup.FindOnDate(ServTaxGroup.Code,IncomeTaxAccountingPeriod."Starting Date");
      GLEntryPostedPO.SETRANGE("Document No.",PostedPODocNo);
      GLEntryPostedPO.SETRANGE("G/L Account No.",ServiceTaxSetup."Receivables Account (Interim)");
      GLEntryPostedPO.SETFILTER(Amount,'>%1',0);
      GLEntryPostedPO.CALCSUMS(Amount);

      GLEntryRecInterim.SETRANGE("Document No.",PostedPaymentDocNo);
      GLEntryRecInterim.SETRANGE("G/L Account No.",ServiceTaxSetup."Receivables Account (Interim)");
      GLEntryRecInterim.SETRANGE("Source Code",SourceCodeSetup."Purchase Entry Application");
      GLEntryRecInterim.FINDFIRST;

      GLEntryRec.SETRANGE("Document No.",PostedPaymentDocNo);
      GLEntryRec.SETRANGE("G/L Account No.",ServiceTaxSetup."Service Tax Receivable Account");
      GLEntryRec.SETRANGE("Source Code",SourceCodeSetup."Purchase Entry Application");
      GLEntryRec.FINDFIRST;

      Assert.AreEqual(GLEntryPostedPO.Amount,-GLEntryRecInterim.Amount,AmountErr);
      Assert.AreEqual(GLEntryPostedPO.Amount,GLEntryRec.Amount,AmountErr);
    END;

    LOCAL PROCEDURE VerifySTaxAfterUnApplication@1500025(PostedPODocNo@1500000 : Code[20];PostedPaymentDocNo@1500006 : Code[20];ServTaxGroup@1500001 : Record 16471);
    VAR
      ServiceTaxSetup@1500003 : Record 16472;
      GLEntryPostedPO@1500004 : Record 17;
      GLEntryRecInterim@1500007 : Record 17;
      GLEntryRec@1500008 : Record 17;
      SourceCodeSetup@1500009 : Record 242;
    BEGIN
      SourceCodeSetup.GET;
      ServiceTaxSetup.FindOnDate(ServTaxGroup.Code,IncomeTaxAccountingPeriod."Starting Date");
      GLEntryPostedPO.SETRANGE("Document No.",PostedPODocNo);
      GLEntryPostedPO.SETRANGE("G/L Account No.",ServiceTaxSetup."Receivables Account (Interim)");
      GLEntryPostedPO.CALCSUMS(Amount);

      GLEntryRecInterim.SETRANGE("Document No.",PostedPaymentDocNo);
      GLEntryRecInterim.SETRANGE("G/L Account No.",ServiceTaxSetup."Receivables Account (Interim)");
      GLEntryRecInterim.SETRANGE("Source Code",SourceCodeSetup."Unapplied Purch. Entry Appln.");
      GLEntryRecInterim.FINDFIRST;

      GLEntryRec.SETRANGE("Document No.",PostedPaymentDocNo);
      GLEntryRec.SETRANGE("G/L Account No.",ServiceTaxSetup."Service Tax Receivable Account");
      GLEntryRec.SETRANGE("Source Code",SourceCodeSetup."Unapplied Purch. Entry Appln.");
      GLEntryRec.FINDFIRST;

      Assert.AreEqual(GLEntryPostedPO.Amount,GLEntryRecInterim.Amount,AmountErr);
      Assert.AreEqual(GLEntryPostedPO.Amount,-GLEntryRec.Amount,AmountErr);
    END;

    PROCEDURE VerifyTDSEntry@1500007(ExpectedTDSEntryAmounts@1500005 : Record 13729;DocumentNo@1500000 : Code[20];DocumentType@1500001 : Option;DoubleRoundingPrecision@1500004 : Boolean);
    VAR
      TDSEntry@1500002 : Record 13729;
      RoundingPrecision@1500006 : Decimal;
    BEGIN
      TDSEntry.SETRANGE("Document No.",DocumentNo);
      TDSEntry.SETRANGE("Document Type",DocumentType);
      TDSEntry.FINDLAST;

      RoundingPrecision := GLSetup."TDS Rounding Precision";
      IF DoubleRoundingPrecision THEN
        RoundingPrecision := RoundingPrecision * 2;
      Assert.AreNearlyEqual(
        ExpectedTDSEntryAmounts."TDS Amount",TDSEntry."TDS Amount",
        RoundingPrecision,
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("TDS Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntryAmounts."TDS Base Amount",TDSEntry."TDS Base Amount",
        RoundingPrecision,
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("TDS Base Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntryAmounts."eCESS Amount",TDSEntry."eCESS Amount",
        RoundingPrecision,
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("eCESS Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntryAmounts."SHE Cess Amount",TDSEntry."SHE Cess Amount",
        RoundingPrecision,
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("SHE Cess Amount"),TDSEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyGLEntry@17(DocumentType@1500000 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';DocumentNo@1072 : Code[20];Amount@1073 : Decimal);
    VAR
      GLEntry@1074 : Record 17;
      CreditAmount@1075 : Decimal;
    BEGIN
      FindGLEntry(GLEntry,DocumentType,DocumentNo);
      REPEAT
        CreditAmount += GLEntry."Credit Amount";
      UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(CreditAmount,Amount,
        GLSetup."TDS Rounding Precision",STRSUBSTNO(CreditAmountErr,CreditAmount,Amount));
    END;

    LOCAL PROCEDURE VerifyGLEntryCount@32(DocumentNo@1003 : Code[20];ExpectedCount@1001 : Integer);
    VAR
      DummyGLEntry@1000 : Record 17;
    BEGIN
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      Assert.RecordCount(DummyGLEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyTDSAndWorkTaxPurchDoc@1500061(PODocNo@1500000 : Code[20];TDSAmount@1500001 : Decimal;WorkTaxAmount@1500002 : Decimal);
    VAR
      PurchaseLine@1500003 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document No.",PODocNo);
      PurchaseLine.FINDFIRST;
      PurchaseLine.TESTFIELD("TDS Amount",TDSAmount);
      PurchaseLine.TESTFIELD("Work Tax Amount",WorkTaxAmount);
    END;

    LOCAL PROCEDURE VerifyValuesOnBatchHeader@1500038(FormNo@1500001 : '26Q,27Q';TANNo@1500000 : Code[10]);
    VAR
      BatchHeader@1500002 : Record 16503;
    BEGIN
      BatchHeader.SETRANGE("Form No.",FormNo);
      BatchHeader.FINDLAST;
      Assert.AreEqual(
        TANNo,BatchHeader."Deductor T.A.N. No.",STRSUBSTNO(TANNo,
          BatchHeader."Deductor T.A.N. No.",ValueNotFoundErr));
    END;

    LOCAL PROCEDURE ApplyAndVerifyPaymentWithInvoicePurchInvDimTDS@1500047(ServiceTaxGroups@1500003 : Record 16471;PurchInvDoc@1500000 : Code[20];PaymentDoc@1500001 : Code[20]);
    VAR
      VendorLedgerEntry@1500002 : Record 25;
    BEGIN
      LibraryERM.ApplyVendorLedgerEntries(VendorLedgerEntry."Document Type"::Payment,VendorLedgerEntry."Document Type"::Invoice,
        PaymentDoc,PurchInvDoc);

      VerifySTaxAfterApplication(PurchInvDoc,PaymentDoc,ServiceTaxGroups);
    END;

    LOCAL PROCEDURE ApplyAndVerifyInvWithPaymentPurchInvDimTDS@1500051(PurchInvDoc@1500000 : Code[20];PaymentDoc@1500001 : Code[20]);
    VAR
      VendorLedgerEntry@1500002 : Record 25;
    BEGIN
      LibraryERM.ApplyVendorLedgerEntries(VendorLedgerEntry."Document Type"::Invoice,VendorLedgerEntry."Document Type"::Payment,
        PurchInvDoc,PaymentDoc);
    END;

    LOCAL PROCEDURE ApplyAndPostBankPaymentWithPurchInvWithWorkTaxAndTDS@1500063(BankPaymentDoc@1500001 : Code[20];PurchaseInvoiceNo@1500002 : Code[20]) : Code[20];
    VAR
      PurchaseHdr@1500000 : Record 38;
      PostedPODocNo@1500003 : Code[20];
    BEGIN
      PurchaseHdr.SETRANGE("No.",PurchaseInvoiceNo);
      PurchaseHdr.FINDFIRST;
      PurchaseHdr.VALIDATE("Applies-to Doc. Type",PurchaseHdr."Applies-to Doc. Type"::Payment);
      PurchaseHdr.VALIDATE("Applies-to Doc. No.",BankPaymentDoc);
      PurchaseHdr.MODIFY(TRUE);
      CalculateStatisticsPurchDoc(PurchaseHdr);
      VerifyTDSAndWorkTaxPurchDoc(PurchaseInvoiceNo,0,0);
      PostedPODocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHdr,TRUE,TRUE);
      EXIT(PostedPODocNo);
    END;

    LOCAL PROCEDURE UnApplyAndVerifyPaymentWithInvoicePurchInvDimTDS@1500049(ServiceTaxGroups@1500003 : Record 16471;PurchInvDoc@1500000 : Code[20];PaymentDoc@1500001 : Code[20]);
    VAR
      ReverseServiceTaxHelper@1500004 : Codeunit 143006;
    BEGIN
      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(PaymentDoc);
      VerifySTaxAfterUnApplication(PurchInvDoc,PaymentDoc,ServiceTaxGroups);
    END;

    LOCAL PROCEDURE UpdateThresholdAmtAndNODLine@1500023(TDSSetup@1500000 : Record 13728;NODHdr@1500003 : Record 13786);
    VAR
      TDSGroup@1500001 : Record 13731;
      NODLine@1500002 : Record 13785;
    BEGIN
      TDSGroup.SETRANGE("TDS Group",TDSSetup."TDS Group");
      TDSGroup.FINDFIRST;
      TDSGroup.VALIDATE("TDS Threshold Amount",LibraryRandom.RandDec(30000,2));
      TDSGroup.MODIFY(TRUE);

      NODLine.SETRANGE(Type,NODHdr.Type);
      NODLine.SETRANGE("No.",NODHdr."No.");
      NODLine.FINDFIRST;
      NODLine.MODIFYALL("Threshold Overlook",FALSE);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@1500062(Question@1500001 : Text;VAR Reply@1500000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500059(Message@1500000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE GeneralJournalTemplateHandler@1500058(VAR GeneralJournalTemplateHandler@1500002 : TestPage 250);
    BEGIN
      GeneralJournalTemplateHandler.FILTER.SETFILTER(Name,GeneralJournalTemplateName);
      GeneralJournalTemplateHandler.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE Form26QRequestPageHandler@1500066(VAR Form26Q@1500000 : TestRequestPage 16505);
    VAR
      FinancialYear@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FinancialYear);
      Form26Q.FinancialYear.SETVALUE(FinancialYear);
      Form26Q.TANLocation.SETVALUE(CompanyInformation."T.A.N. No.");
      Form26Q.ReportFrequency.SETVALUE(IncomeTaxPeriodSetup.Quarter);
      Form26Q.FullName.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomText(20),1,20));
      Form26Q.Designation.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomText(20),1,20));
      Form26Q.PrintingDate.SETVALUE(IncomeTaxAccountingPeriod."Starting Date");
      Form26Q.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      Form26Q."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      Form26Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE Form27QRequestPageHandler@1500101(VAR Form27Q@1500000 : TestRequestPage 16511);
    BEGIN
      Form27Q.TANLocation.SETVALUE(CompanyInformation."T.A.N. No.");
      Form27Q.ReportFrequency.SETVALUE(IncomeTaxPeriodSetup.Quarter);
      Form27Q.FinancialYear.SETVALUE(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
      Form27Q.FullName.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomText(20),1,20));
      Form27Q.Designation.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomText(20),1,20));
      Form27Q.PrintingDate.SETVALUE(IncomeTaxAccountingPeriod."Starting Date");
      Form27Q.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      Form27Q."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      Form27Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE GenerateETDSRequestPageHandler@1500490(VAR GenerateeTDS@1500104 : TestRequestPage 16508);
    VAR
      FileName@1500107 : Variant;
      FinancialYear@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FileName);
      GenerateeTDS.FileName.SETVALUE(FileName);
      LibraryVariableStorage.Dequeue(FinancialYear);
      GenerateeTDS.FinancialYear.SETVALUE(FinancialYear);
      GenerateeTDS.TANLocation.SETVALUE(CompanyInformation."T.A.N. No.");
      GenerateeTDS.ReportFrequency.SETVALUE(IncomeTaxPeriodSetup.Quarter);
      GenerateeTDS.FullName.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(30,0),1,30));
      GenerateeTDS.Designation.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20));
      GenerateeTDS.PrintingDate.SETVALUE(WORKDATE);
      GenerateeTDS.NameOfReturnPreparationUtility.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(30,0),1,30));
      GenerateeTDS.Email.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(30,0),1,30));
      GenerateeTDS.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      GenerateeTDS."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      GenerateeTDS.OK.INVOKE;
    END;

    BEGIN
    END.
  }
}

