OBJECT Codeunit 134080 ERM Adjust Exch Rate Cust/Bank
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd;
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryERM@1005 : Codeunit 131300;
      LibraryInventory@1008 : Codeunit 132201;
      LibrarySales@1006 : Codeunit 130509;
      LibraryPurchase@1007 : Codeunit 130512;
      LibraryRandom@1002 : Codeunit 130440;
      LibraryUtility@1014 : Codeunit 131000;
      IsInitialized@1000 : Boolean;
      AmountErr@1001 : TextConst '@@@=%1 field caption, %2 value, %3 table caption, %4 field caption, %5 field value;ENU=%1 field must be %2 in %3 table for %4 field %5.';
      GLEntryAmountErr@1004 : TextConst '@@@=%1 field caption, %2 value, %3 table caption;ENU=%1 must be %2 in %3.';
      PostingDate@1009 : Date;
      SetHandler@1010 : Boolean;
      ReversalErr@1011 : TextConst '@@@=%1 table caption, %2 Entry No.;ENU=You cannot reverse %1 No. %2 because the entry has an associated Realized Gain/Loss entry.';

    [Test]
    PROCEDURE CustAdjustExchRateForHigher@2();
    VAR
      DetailedCustLedgEntry@1000 : Record 379;
    BEGIN
      // Check that after Modify Higher Exchange rate and run Adjust Exchange rate batch job Unrealized Gain entry created
      // Customer's Detailed Ledger Entry.
      Initialize;
      AdjustExchRateForCustomer(LibraryRandom.RandInt(50),DetailedCustLedgEntry."Entry Type"::"Unrealized Gain");
    END;

    [Test]
    PROCEDURE CustAdjustExchRateForLower@4();
    VAR
      DetailedCustLedgEntry@1000 : Record 379;
    BEGIN
      // Check that after Modify Lower Exchange rate and run Adjust Exchange rate batch job Unrealized Loss entry created on
      // Customer's Detailed Ledger Entry.
      Initialize;
      AdjustExchRateForCustomer(-LibraryRandom.RandInt(50),DetailedCustLedgEntry."Entry Type"::"Unrealized Loss");
    END;

    [Test]
    PROCEDURE BankAdjustExchRateForHigher@8();
    BEGIN
      // Check that after Modify Higher Exchange rate and run Adjust Exchange rate batch job GL entry created on for Bank Account.
      Initialize;
      AdjustExchRateForBank(LibraryRandom.RandInt(50));
    END;

    [Test]
    PROCEDURE BankAdjustExchRateForLower@7();
    BEGIN
      // Check that after Modify Lower Exchange rate and run Adjust Exchange rate batch job GL entry created on for Bank Account.
      Initialize;
      AdjustExchRateForBank(-LibraryRandom.RandInt(50));
    END;

    [Test]
    PROCEDURE UnrealizedGainCreditMemoCust@27();
    VAR
      DetailedCustLedgEntry@1000 : Record 379;
      CustLedgerEntry@1004 : Record 21;
      GenJournalLine@1003 : Record 81;
      GenJournalLine2@1002 : Record 81;
      Amount@1001 : Decimal;
    BEGIN
      // Check Customer Entry for Unrealized Gain with Apply Credit Memo and Refund.

      // Setup: Modify Exchange Rate and Run Adjust Exchange Rate Batch after Create and Post General Journal Line for Customer.
      Initialize;
      CreateGenAndModifyExchRate(
        GenJournalLine,GenJournalLine."Account Type"::Customer,CreateCustomer(CreateCurrency),
        GenJournalLine."Document Type"::"Credit Memo",-LibraryRandom.RandDec(100,2),-LibraryRandom.RandInt(50));
      RunAdjustExchRate(GenJournalLine."Currency Code",WORKDATE);
      Amount :=
        ROUND(
          GenJournalLine."Amount (LCY)" - LibraryERM.ConvertCurrency(GenJournalLine.Amount,GenJournalLine."Currency Code",'',WORKDATE));
      CreateGeneralJournalLine(
        GenJournalLine2,GenJournalLine."Account Type",GenJournalLine."Account No.",GenJournalLine2."Document Type"::Refund,
        -GenJournalLine.Amount / 2);  // Take partial amount for Refund Entry.
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);

      // Exercise: Apply Customer Entry for Credit Memo.
      ApplyAndPostCustomerEntry(
        GenJournalLine2."Document No.",GenJournalLine2.Amount,GenJournalLine."Document No.",CustLedgerEntry."Document Type"::Refund,
        CustLedgerEntry."Document Type"::"Credit Memo");

      // Verify: Verify Detailed Ledger Entry for correct entry after made from running Adjust Exchange Rate Batch Job.
      VerifyDetailedLedgerEntry(GenJournalLine2."Currency Code",DetailedCustLedgEntry."Entry Type"::"Unrealized Gain",-Amount);
    END;

    [Test]
    PROCEDURE GeneralJournalWithBankAccount@24();
    VAR
      BankAccount@1007 : Record 270;
      BankAccountPostingGroup@1004 : Record 277;
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1002 : Record 81;
      GLEntry@1005 : Record 17;
      Currency@1006 : Record 4;
    BEGIN
      // Verify program allows to create General journal line with a Balancing Account Type Bank with presetup Currency.

      // Setup: Create General Journal Line with Random value and update Bal. Account No.
      Initialize;
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Account Type"::Vendor,LibraryPurchase.CreateVendorNo,
        GenJournalLine."Document Type"::" ",LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalBatch."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",CreateBankAccount(CreateCurrency));
      GenJournalLine.MODIFY(TRUE);
      BankAccount.GET(GenJournalLine."Bal. Account No.");
      BankAccountPostingGroup.GET(BankAccount."Bank Acc. Posting Group");

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Amount on G/L Entry.
      FindGLEntry(GLEntry,GenJournalLine."Document No.",BankAccountPostingGroup."G/L Bank Account No.",GLEntry."Document Type"::" ");
      Currency.GET(GenJournalLine."Currency Code");
      Assert.AreNearlyEqual(
        -GenJournalLine."Amount (LCY)",GLEntry.Amount,Currency."Amount Rounding Precision",
        STRSUBSTNO(
          AmountErr,GLEntry.FIELDCAPTION(Amount),GenJournalLine."Amount (LCY)",GLEntry.TABLECAPTION,
          GLEntry.FIELDCAPTION("Entry No."),GLEntry."Entry No."));
    END;

    [Test]
    PROCEDURE GLEntryAdjmtWithNegativeAmount@13();
    VAR
      GenJournalLine@1003 : Record 81;
      FirstStartingDate@1000 : Date;
      SecondStartingDate@1001 : Date;
      CurrencyCode@1002 : Code[10];
      Amount@1008 : Decimal;
    BEGIN
      // Check GL Entry after Run Adjust Exchange Rate Batch Job with multiple Currency Exchange Rate with Negative Amount on General Line.

      // Setup: Create Currency with three different exchange Rate and Starting Date. Custom 1 and 2 M is required for difference only 1 Month.
      Initialize;
      CurrencyCode := CreateCurrencyWithMultipleExchangeRate(FirstStartingDate,SecondStartingDate);

      // Create and Post General Line. Amount 1 is required.
      CreateAndModifyGeneralLine(GenJournalLine,-1,CurrencyCode,FirstStartingDate);
      Amount := LibraryERM.ConvertCurrency(GenJournalLine.Amount,GenJournalLine."Currency Code",'',WORKDATE);
      Amount := Amount - LibraryERM.ConvertCurrency(GenJournalLine.Amount,GenJournalLine."Currency Code",'',FirstStartingDate);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise.
      RunAdjustExchRate(GenJournalLine."Currency Code",SecondStartingDate);

      // Verify: Verify GL Entry for Adjusted Negative Amount with Currency.
      VerifyGLEntryAmountAdjmtExchangeRate(GenJournalLine."Account No.",Amount,GenJournalLine."Currency Code");
    END;

    [Test]
    PROCEDURE GLEntryAdjmtWithPositiveAmount@69();
    VAR
      GenJournalLine@1003 : Record 81;
      FirstStartingDate@1000 : Date;
      SecondStartingDate@1001 : Date;
      CurrencyCode@1002 : Code[10];
      Amount@1008 : Decimal;
    BEGIN
      // Check GL Entry after Run Adjust Exchange Rate Batch Job with multiple Currency Exchange Rate with Positive Amount on General Line.

      // Setup: Create Currency with different exchange Rate and Starting Date.
      Initialize;
      CurrencyCode := CreateCurrencyWithMultipleExchangeRate(FirstStartingDate,SecondStartingDate);

      // Create and Post General Line. Amount 1 is Required.
      CreateAndModifyGeneralLine(GenJournalLine,1,CurrencyCode,FirstStartingDate);
      Amount := FindRelationalExchRateAmount(CurrencyCode,WORKDATE,SecondStartingDate);
      Amount := Amount + FindRelationalExchRateAmount(CurrencyCode,FirstStartingDate,SecondStartingDate);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise.
      RunAdjustExchRate(GenJournalLine."Currency Code",SecondStartingDate);

      // Verify: Verify GL Entry for Adjusted Postitive Amount with Currency.
      VerifyGLEntryAmountAdjmtExchangeRate(GenJournalLine."Account No.",Amount,CurrencyCode);
    END;

    [Test]
    PROCEDURE GLEntryAdjustExchRateForGainOrLoss@23();
    VAR
      Currency@1006 : Record 4;
      GLEntry@1007 : Record 17;
      GenJournalLine@1003 : Record 81;
      FirstStartingDate@1000 : Date;
      CurrencyCode@1002 : Code[10];
      Amount@1008 : Decimal;
      Amount2@1009 : Decimal;
      ExchRateAmount@1001 : Decimal;
      GLEntryAmount2@1005 : Decimal;
      GLEntryAmount@1010 : Decimal;
    BEGIN
      // Check GL Entry for Currency Gain/Loss after running Adjust Exchange Rate Batch Job with multiple Currency Exchange Rate.

      // Setup: Create Currency with different Exchange Rate and Starting Date. Taken Random value to set Exchange rate amount and next Date.
      Initialize;
      CurrencyCode := CreateCurrency;
      ExchRateAmount := LibraryRandom.RandDec(100,2);
      FirstStartingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE);
      DeleteExistingExchangeRates(CurrencyCode);
      CreateExchangeRateWithFixRelationalAmount(CurrencyCode,WORKDATE,ExchRateAmount);
      CreateExchangeRateWithFixRelationalAmount(CurrencyCode,FirstStartingDate,ExchRateAmount + LibraryRandom.RandDec(10,2));

      // Create, modify and Post General Line with Random Amount.
      Currency.GET(CurrencyCode);
      Amount :=
        CreateModifyAndPostGeneralLine(
          GenJournalLine,CreateBankAccount(CurrencyCode),FirstStartingDate,LibraryRandom.RandDec(1000,2));
      GLEntryAmount := CalculateGLEntryBaseAmount(Currency."Realized Gains Acc.",Amount);

      Amount2 :=
        CreateModifyAndPostGeneralLine(GenJournalLine,CreateBankAccount(CurrencyCode),FirstStartingDate,-GenJournalLine.Amount / 2);
      GLEntryAmount2 := CalculateGLEntryBaseAmount(Currency."Realized Losses Acc.",Amount2);

      // Exercise.
      RunAdjustExchRate(GenJournalLine."Currency Code",FirstStartingDate);

      // Verify: Verify GL Entry for Currency Gain/Loss.
      FindGLEntry(GLEntry,Currency.Code,Currency."Realized Gains Acc.",GLEntry."Document Type"::" ");
      Assert.AreNearlyEqual(
        -GLEntryAmount,GLEntry.Amount,Currency."Amount Rounding Precision",
        STRSUBSTNO(GLEntryAmountErr,GLEntry.FIELDCAPTION(Amount),-Amount,GLEntry.TABLECAPTION));
      FindGLEntry(GLEntry,Currency.Code,Currency."Realized Losses Acc.",GLEntry."Document Type"::" ");
      Assert.AreNearlyEqual(
        -GLEntryAmount2,GLEntry.Amount,Currency."Amount Rounding Precision",
        STRSUBSTNO(GLEntryAmountErr,GLEntry.FIELDCAPTION(Amount),-Amount2,GLEntry.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SalesInvoiceAndPaymentWithDiffExchangeRates@20();
    VAR
      Currency@1006 : Record 4;
      GLEntry@1005 : Record 17;
      SalesLine@1003 : Record 37;
      FirstStartingDate@1002 : Date;
      Amount@1007 : Decimal;
      RelExchRateAmount@1000 : Decimal;
    BEGIN
      // Check GL Entry after running Adjust Exchange Rate batch job with posting of Customer Invoice and Payment With Different Exchange Rates.

      // Setup: Create and post Customer Invoice and Payment. Take Integer value to handle entries through Adjust Exchange Rate batch job.
      Initialize;
      RelExchRateAmount := LibraryRandom.RandInt(100) * 2;
      FirstStartingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE);
      PostSalesOrderAndPayment(SalesLine,FirstStartingDate,RelExchRateAmount);
      Amount := ROUND(LibraryERM.ConvertCurrency(SalesLine."Amount Including VAT",SalesLine."Currency Code",'',FirstStartingDate));
      Amount -= ROUND(LibraryERM.ConvertCurrency(SalesLine."Amount Including VAT",SalesLine."Currency Code",'',WORKDATE));

      // Exercise.
      RunAdjustExchRate(SalesLine."Currency Code",FirstStartingDate);

      // Verify: Verify GL Entry for Currency Unrealized Gain.
      Currency.GET(SalesLine."Currency Code");
      VerifyGLEntry(
        SalesLine."Currency Code",SalesLine."Currency Code",-Amount,Currency."Unrealized Gains Acc.",GLEntry."Document Type"::" ");
    END;

    [Test]
    [HandlerFunctions(ApplyCustomerEntriesPageHandler,PostApplicationPageHandler,MessageHandler)]
    PROCEDURE ApplyCustomerEntriesWithDiffExchangeRates@36();
    VAR
      Currency@1004 : Record 4;
      GLEntry@1005 : Record 17;
      SalesLine@1001 : Record 37;
      FirstStartingDate@1000 : Date;
      DocumentNo@1003 : Code[20];
      Amount@1006 : Decimal;
      RelExchRateAmount@1002 : Decimal;
    BEGIN
      // Check GL Entry after applying Payment to Customer Invoice With Different Exchange Rates.

      // Setup: Create and post Customer Invoice and Payment. Take Integer value to handle entries through Adjust Exchange Rate batch job.
      Initialize;
      RelExchRateAmount := LibraryRandom.RandInt(100) * 2;
      FirstStartingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE);
      PostingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',FirstStartingDate);
      DocumentNo := PostSalesOrderAndPayment(SalesLine,FirstStartingDate,RelExchRateAmount);
      Currency.GET(SalesLine."Currency Code");

      // Create new Exchange Rate for Currency on a different Date with Random value.
      CreateExchangeRateWithFixExchRateAmount(SalesLine."Currency Code",PostingDate,(RelExchRateAmount + RelExchRateAmount / 2));
      Amount :=
        ROUND(
          LibraryERM.ConvertCurrency(
            ROUND(SalesLine."Amount Including VAT" / 2,Currency."Amount Rounding Precision"),
            SalesLine."Currency Code",'',FirstStartingDate));
      Amount -=
        ROUND(
          LibraryERM.ConvertCurrency(
            ROUND(SalesLine."Amount Including VAT" / 2,Currency."Amount Rounding Precision"),
            SalesLine."Currency Code",'',WORKDATE));

      // Exercise : Apply Customer Payment to Invoice on a different Posting Date.
      OpenCustomerLedgerEntries(SalesLine."Sell-to Customer No.",DocumentNo);

      // Verify: Verify GL Entry for Currency Realized Gain.
      VerifyGLEntry(SalesLine."Currency Code",DocumentNo,-Amount,Currency."Realized Gains Acc.",GLEntry."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(ApplyCustomerEntriesPageHandler,PostApplicationPageHandler,MessageHandler)]
    PROCEDURE AdjustExchRateAfterApplyingCustomerEntries@31();
    VAR
      Currency@1006 : Record 4;
      GLEntry@1005 : Record 17;
      SalesLine@1004 : Record 37;
      FirstStartingDate@1002 : Date;
      DocumentNo@1001 : Code[20];
      Amount@1000 : Decimal;
      RelExchRateAmount@1003 : Decimal;
    BEGIN
      // Check GL Entry for Adjust Exchange Rate batch job after applying Customer Entries.

      // Setup: Create and post Customer Invoice and Payment. Take Integer value to handle entries through Adjust Exchange Rate batch job.
      Initialize;
      RelExchRateAmount := LibraryRandom.RandInt(100) * 2;
      FirstStartingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE);
      PostingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',FirstStartingDate);
      DocumentNo := PostSalesOrderAndPayment(SalesLine,FirstStartingDate,RelExchRateAmount);
      Currency.GET(SalesLine."Currency Code");

      // Create new Exchange Rate for Currency on a different Date with Random value and Apply Customer Payment to Invoice.
      CreateExchangeRateWithFixExchRateAmount(
        SalesLine."Currency Code",PostingDate,(RelExchRateAmount + LibraryRandom.RandInt(100)));
      OpenCustomerLedgerEntries(SalesLine."Sell-to Customer No.",DocumentNo);
      Amount :=
        ROUND(
          LibraryERM.ConvertCurrency(
            SalesLine."Amount Including VAT" - ROUND(SalesLine."Amount Including VAT" / 2,Currency."Amount Rounding Precision"),
            SalesLine."Currency Code",'',PostingDate));
      Amount -=
        ROUND(
          LibraryERM.ConvertCurrency(
            SalesLine."Amount Including VAT" - ROUND(SalesLine."Amount Including VAT" / 2,Currency."Amount Rounding Precision"),
            SalesLine."Currency Code",'',WORKDATE));

      // Exercise.
      RunAdjustExchRate(SalesLine."Currency Code",PostingDate);

      // Verify: Verify GL Entry for Currency Unrealized Gain.
      VerifyGLEntry(
        SalesLine."Currency Code",SalesLine."Currency Code",-Amount,Currency."Unrealized Gains Acc.",GLEntry."Document Type"::" ");
    END;

    [Test]
    [HandlerFunctions(ApplyCustomerEntriesPageHandler,PostApplicationPageHandler,UnapplyCustomerEntriesPageHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE AdjustExchRateAfterUnapplyingCustomerEntries@33();
    VAR
      Currency@1006 : Record 4;
      GLEntry@1005 : Record 17;
      SalesLine@1004 : Record 37;
      FirstStartingDate@1002 : Date;
      DocumentNo@1001 : Code[20];
      Amount@1000 : Decimal;
      RelExchRateAmount@1003 : Decimal;
    BEGIN
      // Check GL Entry for Adjust Exchange Rate batch job after unapplying Customer Entries.

      // Setup: Create and post Customer Invoice and Payment. Take Integer value to handle entries through Adjust Exchange Rate batch job.
      Initialize;
      RelExchRateAmount := LibraryRandom.RandInt(100) * 2;
      FirstStartingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE);
      PostingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',FirstStartingDate);
      DocumentNo := PostSalesOrderAndPayment(SalesLine,FirstStartingDate,RelExchRateAmount);
      Currency.GET(SalesLine."Currency Code");

      // Create new Exchange Rate for Currency on a different Date with Random value and Apply Customer Payment to Invoice.
      CreateExchangeRateWithFixExchRateAmount(
        SalesLine."Currency Code",PostingDate,(RelExchRateAmount + LibraryRandom.RandInt(100)));
      OpenCustomerLedgerEntries(SalesLine."Sell-to Customer No.",DocumentNo);
      RunAdjustExchRate(SalesLine."Currency Code",PostingDate);
      SetHandler := TRUE; // Taken Global variable to use in handler.
      OpenCustomerLedgerEntries(SalesLine."Sell-to Customer No.",DocumentNo);
      Amount :=
        ROUND(
          LibraryERM.ConvertCurrency(
            SalesLine."Amount Including VAT" - ROUND(SalesLine."Amount Including VAT" / 2,Currency."Amount Rounding Precision"),
            SalesLine."Currency Code",'',PostingDate));
      Amount -=
        ROUND(
          LibraryERM.ConvertCurrency(
            SalesLine."Amount Including VAT" - ROUND(SalesLine."Amount Including VAT" / 2,Currency."Amount Rounding Precision"),
            SalesLine."Currency Code",'',WORKDATE));

      // Exercise.
      RunAdjustExchRate(SalesLine."Currency Code",PostingDate);

      // Verify: Verify GL Entry for Currency Unrealized Gain.
      VerifyGLEntry(
        SalesLine."Currency Code",SalesLine."Currency Code",-Amount,Currency."Unrealized Gains Acc.",GLEntry."Document Type"::" ");
    END;

    [Test]
    PROCEDURE PurchaseInvoiceAndPaymentWithDiffExchangeRates@39();
    VAR
      Currency@1008 : Record 4;
      GLEntry@1006 : Record 17;
      PurchaseLine@1005 : Record 39;
      FirstStartingDate@1004 : Date;
      Amount@1000 : Decimal;
      RelExchRateAmount@1001 : Decimal;
    BEGIN
      // Check GL Entry after posting Vendor Invoice and Payment With Different Exchange Rates.

      // Setup: Create and post Vendor Invoice and Payment. Take Integer value to handle entries through Adjust Exchange Rate batch job.
      Initialize;
      RelExchRateAmount := LibraryRandom.RandInt(100) * 2;
      FirstStartingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE);
      PostPurchaseOrderAndPayment(PurchaseLine,FirstStartingDate,RelExchRateAmount);
      Amount :=
        ROUND(LibraryERM.ConvertCurrency(PurchaseLine."Amount Including VAT",PurchaseLine."Currency Code",'',FirstStartingDate));
      Amount -= ROUND(LibraryERM.ConvertCurrency(PurchaseLine."Amount Including VAT",PurchaseLine."Currency Code",'',WORKDATE));

      // Exercise.
      RunAdjustExchRate(PurchaseLine."Currency Code",FirstStartingDate);

      // Verify: Verify GL Entry for Currency Unrealized Loss.
      Currency.GET(PurchaseLine."Currency Code");
      VerifyGLEntry(
        PurchaseLine."Currency Code",PurchaseLine."Currency Code",Amount,Currency."Unrealized Losses Acc.",
        GLEntry."Document Type"::" ");
    END;

    [Test]
    [HandlerFunctions(ApplyVendorEntriesPageHandler,PostApplicationPageHandler,MessageHandler)]
    PROCEDURE ApplyVendorEntriesWithDiffExchangeRates@38();
    VAR
      Currency@1006 : Record 4;
      GLEntry@1004 : Record 17;
      PurchaseLine@1003 : Record 39;
      FirstStartingDate@1002 : Date;
      DocumentNo@1001 : Code[20];
      Amount@1000 : Decimal;
      RelExchRateAmount@1005 : Decimal;
    BEGIN
      // Check GL Entry after applying Payment to Vendor Invoice With Different Exchange Rates.

      // Setup: Create and post Vendor Invoice and Payment. Take Integer value to handle entries through Adjust Exchange Rate batch job.
      Initialize;
      RelExchRateAmount := LibraryRandom.RandInt(100) * 2;
      FirstStartingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE);
      PostingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',FirstStartingDate);
      DocumentNo := PostPurchaseOrderAndPayment(PurchaseLine,FirstStartingDate,RelExchRateAmount);
      Currency.GET(PurchaseLine."Currency Code");

      // Create new Exchange Rate for Currency on a different Date with Random value.
      CreateExchangeRateWithFixExchRateAmount(PurchaseLine."Currency Code",PostingDate,(RelExchRateAmount + RelExchRateAmount / 2));
      Amount :=
        ROUND(
          LibraryERM.ConvertCurrency(
            ROUND(PurchaseLine."Amount Including VAT" / 2,Currency."Amount Rounding Precision"),
            PurchaseLine."Currency Code",'',FirstStartingDate));
      Amount -=
        ROUND(
          LibraryERM.ConvertCurrency(
            ROUND(PurchaseLine."Amount Including VAT" / 2,Currency."Amount Rounding Precision"),
            PurchaseLine."Currency Code",'',WORKDATE));

      // Exercise : Apply Vendor Payment to Invoice on a different Posting Date.
      OpenVendorLedgerEntries(PurchaseLine."Buy-from Vendor No.",DocumentNo);

      // Verify: Verify GL Entry for Currency Realized Loss.
      VerifyGLEntry(PurchaseLine."Currency Code",DocumentNo,Amount,Currency."Realized Losses Acc.",GLEntry."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(ApplyVendorEntriesPageHandler,PostApplicationPageHandler,MessageHandler)]
    PROCEDURE AdjustExchRateAfterApplyingVendorEntries@37();
    VAR
      Currency@1005 : Record 4;
      GLEntry@1004 : Record 17;
      PurchaseLine@1003 : Record 39;
      FirstStartingDate@1002 : Date;
      DocumentNo@1001 : Code[20];
      Amount@1000 : Decimal;
      RelExchRateAmount@1006 : Decimal;
    BEGIN
      // Check GL Entry for Adjust Exchange Rate batch job after applying Vendor Entries.

      // Setup: Create and post Vendor Invoice and Payment. Take Integer value to handle entries through Adjust Exchange Rate batch job.
      Initialize;
      RelExchRateAmount := LibraryRandom.RandInt(100) * 2;
      FirstStartingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE);
      PostingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',FirstStartingDate);
      DocumentNo := PostPurchaseOrderAndPayment(PurchaseLine,FirstStartingDate,RelExchRateAmount);
      Currency.GET(PurchaseLine."Currency Code");

      // Create new Exchange Rate for Currency on a different Date with Random value and Apply Vendor Payment to Invoice.
      CreateExchangeRateWithFixExchRateAmount(
        PurchaseLine."Currency Code",PostingDate,(RelExchRateAmount + LibraryRandom.RandInt(100)));
      OpenVendorLedgerEntries(PurchaseLine."Buy-from Vendor No.",DocumentNo);
      Amount :=
        ROUND(
          LibraryERM.ConvertCurrency(
            PurchaseLine."Amount Including VAT" - ROUND(PurchaseLine."Amount Including VAT" / 2,Currency."Amount Rounding Precision"),
            PurchaseLine."Currency Code",'',PostingDate));
      Amount -=
        ROUND(
          LibraryERM.ConvertCurrency(
            PurchaseLine."Amount Including VAT" - ROUND(PurchaseLine."Amount Including VAT" / 2,Currency."Amount Rounding Precision"),
            PurchaseLine."Currency Code",'',WORKDATE));

      // Exercise.
      RunAdjustExchRate(PurchaseLine."Currency Code",PostingDate);

      // Verify: Verify GL Entry for Currency Unrealized Loss.
      VerifyGLEntry(
        PurchaseLine."Currency Code",PurchaseLine."Currency Code",Amount,Currency."Unrealized Losses Acc.",
        GLEntry."Document Type"::" ");
    END;

    [Test]
    [HandlerFunctions(ApplyVendorEntriesPageHandler,PostApplicationPageHandler,UnapplyVendorEntriesPageHandler,ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE AdjustExchRateAfterUnapplyingVendorEntries@35();
    VAR
      Currency@1005 : Record 4;
      GLEntry@1004 : Record 17;
      PurchaseLine@1003 : Record 39;
      FirstStartingDate@1002 : Date;
      DocumentNo@1001 : Code[20];
      Amount@1000 : Decimal;
      RelExchRateAmount@1006 : Decimal;
    BEGIN
      // Check GL Entry for Adjust Exchange Rate batch job after unapplying Vendor Entries.

      // Setup: Create and post Vendor Invoice and Payment. Take Integer value to handle entries through Adjust Exchange Rate batch job.
      Initialize;
      RelExchRateAmount := LibraryRandom.RandInt(100) * 2;
      FirstStartingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE);
      PostingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',FirstStartingDate);
      DocumentNo := PostPurchaseOrderAndPayment(PurchaseLine,FirstStartingDate,RelExchRateAmount);
      Currency.GET(PurchaseLine."Currency Code");

      // Create new Exchange Rate for Currency on a different Date with Random value and Apply Vendor Payment to Invoice.
      CreateExchangeRateWithFixExchRateAmount(
        PurchaseLine."Currency Code",PostingDate,(RelExchRateAmount + LibraryRandom.RandInt(100)));
      OpenVendorLedgerEntries(PurchaseLine."Buy-from Vendor No.",DocumentNo);
      RunAdjustExchRate(PurchaseLine."Currency Code",PostingDate);
      SetHandler := TRUE; // Taken Global variable to use in handler.
      OpenVendorLedgerEntries(PurchaseLine."Buy-from Vendor No.",DocumentNo);
      Amount :=
        ROUND(
          LibraryERM.ConvertCurrency(
            PurchaseLine."Amount Including VAT" - ROUND(PurchaseLine."Amount Including VAT" / 2,Currency."Amount Rounding Precision"),
            PurchaseLine."Currency Code",'',PostingDate));
      Amount -=
        ROUND(
          LibraryERM.ConvertCurrency(
            PurchaseLine."Amount Including VAT" - ROUND(PurchaseLine."Amount Including VAT" / 2,Currency."Amount Rounding Precision"),
            PurchaseLine."Currency Code",'',WORKDATE));

      // Exercise.
      RunAdjustExchRate(PurchaseLine."Currency Code",PostingDate);

      // Verify: Verify GL Entry for Currency Unrealized Loss.
      VerifyGLEntry(
        PurchaseLine."Currency Code",PurchaseLine."Currency Code",Amount,Currency."Unrealized Losses Acc.",
        GLEntry."Document Type"::" ");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE ReversePaymentWithUnrealizedGainLossforVendor@59();
    VAR
      GenJournalLine@1004 : Record 81;
      VendorLedgerEntry@1000 : Record 25;
      StartingDate@1008 : Date;
      StartingDate2@1009 : Date;
      CurrencyCode@1010 : Code[10];
    BEGIN
      // [FEATURE] [Reverse] [Purchase]
      // [SCENARIO] Program doesn't allow to reverse the payment transaction when Realized gain or loss entries associated with Vendor Receipt transaction.

      // [GIVEN] Create Currency, Vendor, Apply Payment on Invoice using Gen. Journal Line.
      Initialize;
      CurrencyCode := CreateCurrencyWithMultipleExchangeRate(StartingDate,StartingDate2);
      CreatePostPaymentWithAppln(
        GenJournalLine,GenJournalLine."Account Type"::Vendor,CreateVendor(CurrencyCode),CurrencyCode,1,StartingDate);

      // [GIVEN] Unapply Payment
      UnapplyVendorEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Payment,GenJournalLine."Document No.");

      // [WHEN] Reverse Payment
      ASSERTERROR LibraryERM.ReverseTransaction(VendorLedgerEntry."Transaction No.");

      // [THEN] Error raised that you cannot reverse transaction because the entry has an associated Realized Gain/Loss entry.
      Assert.ExpectedError(STRSUBSTNO(ReversalErr,VendorLedgerEntry.TABLECAPTION,VendorLedgerEntry."Entry No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE ReversePaymentWithUnrealizedGainLossforCustomer@46();
    VAR
      GenJournalLine@1004 : Record 81;
      CustLedgerEntry@1006 : Record 21;
      StartingDate@1008 : Date;
      StartingDate2@1009 : Date;
      CurrencyCode@1010 : Code[10];
    BEGIN
      // [FEATURE] [Reverse] [Sales]
      // [SCENARIO] Program doesn't allow to reverse the payment transaction when Realized gain or loss entries associated with Customer Receipt transaction.

      // [GIVEN] Create Currency, Customer, Apply Payment on Invoice using Gen. Journal Line.
      Initialize;
      CurrencyCode := CreateCurrencyWithMultipleExchangeRate(StartingDate,StartingDate2);
      CreatePostPaymentWithAppln(
        GenJournalLine,GenJournalLine."Account Type"::Customer,CreateCustomer(CurrencyCode),CurrencyCode,-1,StartingDate);

      // [GIVEN] Unapply Payment
      UnapplyCustomerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Payment,GenJournalLine."Document No.");

      // [WHEN] Reverse Payment
      ASSERTERROR LibraryERM.ReverseTransaction(CustLedgerEntry."Transaction No.");

      // [THEN] Error raised that you cannot reverse transaction because the entry has an associated Realized Gain/Loss entry.
      Assert.ExpectedError(STRSUBSTNO(ReversalErr,CustLedgerEntry.TABLECAPTION,CustLedgerEntry."Entry No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE ReverseUnappliedLCYPaymentWithGainLossforVendor@156();
    VAR
      GenJournalLine@1004 : Record 81;
      VendorLedgerEntry@1000 : Record 25;
      StartingDate@1008 : Date;
      StartingDate2@1009 : Date;
      CurrencyCode@1010 : Code[10];
    BEGIN
      // [FEATURE] [Reverse] [Purchase]
      // [SCENARIO 201007] It is not allowed to reverse purchase payment transaction when LCY Payment is posted and applied to FCY Invoice
      Initialize;

      // [GIVEN] Create Currency, Vendor, Apply LCY Payment on Invoice using Gen. Journal Line.
      CurrencyCode := CreateCurrencyWithMultipleExchangeRate(StartingDate,StartingDate2);
      CreatePostPaymentWithAppln(
        GenJournalLine,GenJournalLine."Account Type"::Vendor,CreateVendor(CurrencyCode),'',1,StartingDate);

      // [GIVEN] Unapply Payment
      UnapplyVendorEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Payment,GenJournalLine."Document No.");

      // [WHEN] Reverse Payment
      ASSERTERROR LibraryERM.ReverseTransaction(VendorLedgerEntry."Transaction No.");

      // [THEN] Error raised that you cannot reverse transaction because the entry has an associated Realized Gain/Loss entry.
      Assert.ExpectedError(STRSUBSTNO(ReversalErr,VendorLedgerEntry.TABLECAPTION,VendorLedgerEntry."Entry No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE ReverseUnappliedLCYPaymentWithGainLossforCustomer@155();
    VAR
      GenJournalLine@1004 : Record 81;
      CustLedgerEntry@1006 : Record 21;
      StartingDate@1008 : Date;
      StartingDate2@1009 : Date;
      CurrencyCode@1010 : Code[10];
    BEGIN
      // [FEATURE] [Reverse] [Sales]
      // [SCENARIO 201007] It is not allowed to reverse sales payment transaction when LCY Payment is posted and applied to FCY Invoice
      Initialize;

      // [GIVEN] Create Currency, Customer, Apply LCY Payment on Invoice using Gen. Journal Line.
      CurrencyCode := CreateCurrencyWithMultipleExchangeRate(StartingDate,StartingDate2);
      CreatePostPaymentWithAppln(
        GenJournalLine,GenJournalLine."Account Type"::Customer,CreateCustomer(CurrencyCode),'',-1,StartingDate);

      // [GIVEN] Unapply Payment
      UnapplyCustomerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Payment,GenJournalLine."Document No.");

      // [WHEN] Reverse Payment
      ASSERTERROR LibraryERM.ReverseTransaction(CustLedgerEntry."Transaction No.");

      // [THEN] Error raised that you cannot reverse transaction because the entry has an associated Realized Gain/Loss entry.
      Assert.ExpectedError(STRSUBSTNO(ReversalErr,CustLedgerEntry.TABLECAPTION,CustLedgerEntry."Entry No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE ReverseUnappliedLCYPaymentWithGainLossforVendorAppliedFromPayment@158();
    VAR
      GenJournalLine@1004 : Record 81;
      VendorLedgerEntry@1000 : Record 25;
      StartingDate@1008 : Date;
      StartingDate2@1009 : Date;
      CurrencyCode@1010 : Code[10];
      InvoiceNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Reverse] [Purchase]
      // [SCENARIO 201007] Reversed Purchase LCY Payment that was applied to FCY invoice in different transaction should have zero balance
      Initialize;

      // [GIVEN] Create Currency, Vendor, Apply Payment to Invoice
      CurrencyCode := CreateCurrencyWithMultipleExchangeRate(StartingDate,StartingDate2);
      CreatePostApplyTwoPurchDocuments(
        GenJournalLine,InvoiceNo,CurrencyCode,StartingDate,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Document Type"::Invoice);

      // [GIVEN] Unapply Payment
      UnapplyVendorEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Payment,GenJournalLine."Document No.");

      // [WHEN] Reverse Payment
      LibraryERM.ReverseTransaction(VendorLedgerEntry."Transaction No.");

      // [THEN] Payment Document Balance for Vendor Posting Account and Currency Gain/Loss Account is zero
      VerifyGLEntryReverseBalance(
        CurrencyCode,GetVendorPostingAccount(GenJournalLine."Account No."),
        GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE ReverseUnappliedFCYInvoiceWithGainLossforVendorAppliedFromInvoice@65();
    VAR
      GenJournalLine@1004 : Record 81;
      VendorLedgerEntry@1000 : Record 25;
      StartingDate@1008 : Date;
      StartingDate2@1009 : Date;
      CurrencyCode@1010 : Code[10];
      InvoiceNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Reverse] [Purchase]
      // [SCENARIO 201007] Reversed Purchase FCY Invoice that was applied to LCY payment in different transaction should have zero balance
      Initialize;

      // [GIVEN] Create Currency, Vendor, Apply Invoice To Payment
      CurrencyCode := CreateCurrencyWithMultipleExchangeRate(StartingDate,StartingDate2);
      CreatePostApplyTwoPurchDocuments(
        GenJournalLine,InvoiceNo,CurrencyCode,StartingDate,
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment);

      // [GIVEN] Unapply Invoice
      UnapplyVendorEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,InvoiceNo);

      // [WHEN] Reverse Invoice
      LibraryERM.ReverseTransaction(VendorLedgerEntry."Transaction No.");

      // [THEN] Invoice Document Balance for Vendor Posting Account and Currency Gain/Loss Account is zero
      VerifyGLEntryReverseBalance(
        CurrencyCode,GetVendorPostingAccount(GenJournalLine."Account No."),GenJournalLine."Document Type"::Invoice,InvoiceNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE ReverseUnappliedLCYPaymentWithGainLossforCustomerAppliedFromPayment@198();
    VAR
      GenJournalLine@1004 : Record 81;
      CustLedgerEntry@1000 : Record 21;
      StartingDate@1008 : Date;
      StartingDate2@1009 : Date;
      CurrencyCode@1010 : Code[10];
      InvoiceNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Reverse] [Sales]
      // [SCENARIO 201007] Reversed Sales LCY Payment that was applied to FCY invoice in different transaction should have zero balance
      Initialize;

      // [GIVEN] Create Currency, Customer, Apply Payment to Invoice
      CurrencyCode := CreateCurrencyWithMultipleExchangeRate(StartingDate,StartingDate2);
      CreatePostApplyTwoSalesDocuments(
        GenJournalLine,InvoiceNo,CurrencyCode,StartingDate,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Document Type"::Invoice);

      // [GIVEN] Unapply Payment
      UnapplyCustomerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Payment,GenJournalLine."Document No.");

      // [WHEN] Reverse Payment
      LibraryERM.ReverseTransaction(CustLedgerEntry."Transaction No.");

      // [THEN] Payment Document Balance for Customer Posting Account and Currency Gain/Loss Account is zero
      VerifyGLEntryReverseBalance(
        CurrencyCode,GetCustomerPostingAccount(GenJournalLine."Account No."),
        GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE ReverseUnappliedFCYInvoiceWithGainLossforCustomerAppliedFromInvoice@197();
    VAR
      GenJournalLine@1004 : Record 81;
      CustLedgerEntry@1000 : Record 21;
      StartingDate@1008 : Date;
      StartingDate2@1009 : Date;
      CurrencyCode@1010 : Code[10];
      InvoiceNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Reverse] [Sales]
      // [SCENARIO 201007] Reversed Sales FCY Invoice that was applied to LCY payment in different transaction should have zero balance
      Initialize;

      // [GIVEN] Create Currency, Customer, Apply Invoice To Payment
      CurrencyCode := CreateCurrencyWithMultipleExchangeRate(StartingDate,StartingDate2);
      CreatePostApplyTwoSalesDocuments(
        GenJournalLine,InvoiceNo,CurrencyCode,StartingDate,
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment);

      // [GIVEN] Unapply Invoice
      UnapplyCustomerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,InvoiceNo);

      // [WHEN] Reverse Invoice
      LibraryERM.ReverseTransaction(CustLedgerEntry."Transaction No.");

      // [THEN] Invoice Document Balance for Customer Posting Account and Currency Gain/Loss Account is zero
      VerifyGLEntryReverseBalance(
        CurrencyCode,GetCustomerPostingAccount(GenJournalLine."Account No."),GenJournalLine."Document Type"::Invoice,InvoiceNo);
    END;

    [Test]
    PROCEDURE GenJnlLineDescriptionNoTrunc@66();
    VAR
      GenJournalLine@1000 : Record 81;
      GLEntry@1002 : Record 17;
      CurrencyCode@1001 : Code[10];
      AdjExchDocNo@1003 : Code[20];
      Description@1005 : Text[50];
      ExpectedDescription@1006 : Text[50];
      DescLen@1004 : Integer;
    BEGIN
      // [SCENARIO 221966] Posting Description with long Currency Code and Amount is not truncated on run "Adjust Exchange Rates" report
      Initialize;

      // [GIVEN] Currency Code "XXX" with length 3+
      CurrencyCode := CreateCurrency;
      Assert.IsTrue(STRLEN(CurrencyCode) > 2,'The length of currency code must be greater than 2');

      // [GIVEN] Posted Gen. Journal Line with Currency Code "XXX" and Amount "YYY"
      CreateGenAndModifyExchRate(
        GenJournalLine,GenJournalLine."Account Type"::"Bank Account",CreateBankAccount(CurrencyCode),
        GenJournalLine."Document Type"::" ",LibraryRandom.RandDec(100,2),LibraryRandom.RandInt(50));
      AdjExchDocNo := LibraryUtility.GenerateGUID;

      // [GIVEN] Posting Description template string "D" = "RANDDESC %1 %2"
      DescLen := MAXSTRLEN(GLEntry.Description) - STRLEN(STRSUBSTNO(' %1 %2',GenJournalLine."Currency Code",GenJournalLine.Amount));
      Description := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(DescLen,0) + ' %1 %2',1);

      ExpectedDescription := STRSUBSTNO(Description,GenJournalLine."Currency Code",GenJournalLine.Amount);

      // [WHEN] "Adjust Exchange Rates" report run with "D" as Description
      LibraryERM.RunAdjustExchangeRates(CurrencyCode,0D,WORKDATE,Description,WORKDATE,AdjExchDocNo,FALSE);

      // [THEN] Description in G/L entries is equal to "RANDDESC XXX YYY"
      GLEntry.SETRANGE("Document No.",AdjExchDocNo);
      GLEntry.SETRANGE("Posting Date",WORKDATE);
      GLEntry.FINDSET;
      REPEAT
        GLEntry.TESTFIELD(Description,PADSTR(ExpectedDescription,MAXSTRLEN(GLEntry.Description)));
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      CLEAR(PostingDate);
      CLEAR(SetHandler);
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateLocalPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AdjustExchRateForBank@10(ExchRateAmt@1002 : Decimal);
    VAR
      BankAccount@1003 : Record 270;
      BankAccountPostingGroup@1001 : Record 277;
      CurrencyExchangeRate@1000 : Record 330;
      GenJournalLine@1007 : Record 81;
      Amount@1004 : Decimal;
    BEGIN
      // Setup: Modify Exchange Rate after Create and Post General Journal Line for Bank.
      CreateGenAndModifyExchRate(
        GenJournalLine,GenJournalLine."Account Type"::"Bank Account",CreateBankAccount(CreateCurrency),
        GenJournalLine."Document Type"::Invoice,LibraryRandom.RandDec(100,2),ExchRateAmt);
      FindCurrencyExchRate(CurrencyExchangeRate,GenJournalLine."Currency Code");
      Amount := GenJournalLine.Amount * ExchRateAmt / CurrencyExchangeRate."Exchange Rate Amount";
      BankAccount.GET(GenJournalLine."Account No.");
      BankAccountPostingGroup.GET(BankAccount."Bank Acc. Posting Group");

      // Exercise:  Run Adjust Exchange Rate batch job on Posted Entries.
      RunAdjustExchRate(GenJournalLine."Currency Code",WORKDATE);

      // Verify: Verify G/L Entry for correct entry after made from running Adjust Exchange Rate Batch Job.
      VerifyGLEntry(
        GenJournalLine."Currency Code",GenJournalLine."Currency Code",Amount,BankAccountPostingGroup."G/L Bank Account No.",
        GenJournalLine."Document Type"::" ");
    END;

    LOCAL PROCEDURE AdjustExchRateForCustomer@15(ExchRateAmt@1002 : Decimal;EntryType@1000 : Option);
    VAR
      CurrencyExchangeRate@1001 : Record 330;
      GenJournalLine@1007 : Record 81;
      Amount@1004 : Decimal;
    BEGIN
      // Setup: Modify Exchange Rate after Create and Post General Journal Line for Customer.
      CreateGenAndModifyExchRate(
        GenJournalLine,GenJournalLine."Account Type"::Customer,CreateCustomer(CreateCurrency),
        GenJournalLine."Document Type"::Invoice,LibraryRandom.RandDec(100,2),ExchRateAmt);
      FindCurrencyExchRate(CurrencyExchangeRate,GenJournalLine."Currency Code");
      Amount :=
        GenJournalLine."Amount (LCY)" -
        GenJournalLine.Amount * CurrencyExchangeRate."Relational Exch. Rate Amount" / CurrencyExchangeRate."Exchange Rate Amount";

      // Exercise: Run Adjust Exchange Rate batch job on Posted Entries.
      RunAdjustExchRate(GenJournalLine."Currency Code",WORKDATE);

      // Verify: Verify Detailed Ledger Entry for correct entry after made from running Adjust Exchange Rate Batch Job.
      VerifyDetailedLedgerEntry(GenJournalLine."Currency Code",EntryType,-Amount);
    END;

    LOCAL PROCEDURE ApplyAndPostCustomerEntry@19(DocumentNo@1002 : Code[20];AmountToApply@1003 : Decimal;DocumentNo2@1001 : Code[20];DocumentType@1005 : Option;DocumentType2@1006 : Option);
    VAR
      CustLedgerEntry@1000 : Record 21;
      CustLedgerEntry2@1004 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      LibraryERM.SetApplyCustomerEntry(CustLedgerEntry,AmountToApply);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry2,DocumentType2,DocumentNo2);
      CustLedgerEntry2.CALCFIELDS("Remaining Amount");
      CustLedgerEntry2.VALIDATE("Amount to Apply",CustLedgerEntry2."Remaining Amount");
      CustLedgerEntry2.MODIFY(TRUE);
      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry2);
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry);
    END;

    LOCAL PROCEDURE CreateAndModifyGeneralLine@77(VAR GenJournalLine@1002 : Record 81;Amount@1013 : Decimal;CurrencyCode@1012 : Code[10];PostingDate@1015 : Date);
    VAR
      GenJournalBatch@1006 : Record 232;
    BEGIN
      // Create General Line and Modify Posting Date in Second Line. Amount 1 is Required.
      SelectGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"Bank Account",CreateBankAccount(CurrencyCode),1);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type",CreateBankAccount(CurrencyCode),Amount);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateModifyAndPostGeneralLine@32(VAR GenJournalLine@1002 : Record 81;BankAccountNo@1000 : Code[20];FirstStartingDate@1003 : Date;Amount@1005 : Decimal) AmountLCY : Decimal;
    VAR
      BankAccount@1001 : Record 270;
    BEGIN
      BankAccount.GET(BankAccountNo);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,
        GenJournalLine."Document Type"::" ",Amount);
      GenJournalLine.VALIDATE("Currency Code",BankAccount."Currency Code");
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",BankAccountNo);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      AmountLCY := ROUND(LibraryERM.ConvertCurrency(GenJournalLine.Amount,GenJournalLine."Currency Code",'',WORKDATE));
      AmountLCY -= ROUND(LibraryERM.ConvertCurrency(GenJournalLine.Amount,GenJournalLine."Currency Code",'',FirstStartingDate));
    END;

    LOCAL PROCEDURE CreateCurrencyWithMultipleExchangeRate@95(VAR FirstStartingDate@1001 : Date;VAR SecondStartingDate@1000 : Date) : Code[10];
    VAR
      Currency@1003 : Record 4;
    BEGIN
      // Create Currency with different starting date and Exchange Rate. Taken Random value to calculate Date.
      FirstStartingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE);
      SecondStartingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',FirstStartingDate);
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      CreateExchangeRate(Currency.Code,WORKDATE);
      CreateExchangeRate(Currency.Code,FirstStartingDate);
      CreateExchangeRate(Currency.Code,SecondStartingDate);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCurrencyAndExchRates@47(FirstStartingDate@1000 : Date;RelExchRateAmount@1002 : Decimal) CurrencyCode : Code[10];
    BEGIN
      // Create Currency with different exchange Rate and Starting Date. Take Random for Relational Exchange Rate Amount.
      CurrencyCode := CreateCurrency;
      DeleteExistingExchangeRates(CurrencyCode);
      CreateExchangeRateWithFixExchRateAmount(CurrencyCode,WORKDATE,RelExchRateAmount);
      CreateExchangeRateWithFixExchRateAmount(CurrencyCode,FirstStartingDate,2 * RelExchRateAmount);
    END;

    LOCAL PROCEDURE CreateExchangeRateWithFixRelationalAmount@21(CurrencyCode@1000 : Code[10];StartingDate@1002 : Date;ExchangeRateAmount@1003 : Decimal);
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      // Take 1 to fix the Relational amounts for Exchange Rate.
      LibraryERM.CreateExchRate(CurrencyExchangeRate,CurrencyCode,StartingDate);
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",ExchangeRateAmount);
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",1);
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateExchangeRateWithFixExchRateAmount@40(CurrencyCode@1000 : Code[10];StartingDate@1002 : Date;RelationalExchRateAmount@1003 : Decimal);
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      // Take 1 to fix the Exchange Rate amounts for Currency Exchange Rate.
      LibraryERM.CreateExchRate(CurrencyExchangeRate,CurrencyCode,StartingDate);
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",1);
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",RelationalExchRateAmount);
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomer@5(CurrencyCode@1001 : Code[10]) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateVendor@45(CurrencyCode@1001 : Code[10]) : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateBankAccount@11(CurrencyCode@1000 : Code[10]) : Code[20];
    VAR
      BankAccount@1002 : Record 270;
      BankAccountPostingGroup@1003 : Record 277;
    BEGIN
      BankAccountPostingGroup.SETFILTER("G/L Bank Account No.",'<>''''');
      BankAccountPostingGroup.FINDFIRST;
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccount.VALIDATE("Currency Code",CurrencyCode);
      BankAccount.VALIDATE("Bank Acc. Posting Group",BankAccountPostingGroup.Code);
      BankAccount.MODIFY(TRUE);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE CreateCurrency@14() : Code[10];
    VAR
      Currency@1001 : Record 4;
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      LibraryERM.CreateCurrency(Currency);
      Currency.VALIDATE("Invoice Rounding Precision",GeneralLedgerSetup."Inv. Rounding Precision (LCY)");
      Currency.MODIFY(TRUE);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateExchangeRate@16(CurrencyCode@1000 : Code[10];StartingDate@1002 : Date);
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      // Take Random Value for Exchange Rate Fields.
      LibraryERM.CreateExchRate(CurrencyExchangeRate,CurrencyCode,StartingDate);
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",1);
      CurrencyExchangeRate.VALIDATE(
        "Relational Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount" + LibraryRandom.RandDec(100,2));
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE(
        "Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount" + LibraryRandom.RandDec(100,2));
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@17(VAR GenJournalLine@1005 : Record 81;AccountType@1004 : Option;AccountNo@1003 : Code[20];DocumentType@1002 : Option;Amount@1001 : Decimal);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      // Take Random Amount for Invoice on General Journal Line.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,AccountType,AccountNo,Amount);
    END;

    LOCAL PROCEDURE CreateGenAndModifyExchRate@22(VAR GenJournalLine@1000 : Record 81;AccountType@1005 : Option;AccountNo@1004 : Code[20];DocumentType@1001 : Option;Amount@1002 : Decimal;ExchangeRateAmount@1003 : Decimal);
    BEGIN
      CreateGeneralJournalLine(GenJournalLine,AccountType,AccountNo,DocumentType,Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      ModifyExchangeRate(GenJournalLine."Currency Code",ExchangeRateAmount);
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocument@43(VAR SalesLine@1003 : Record 37;CurrencyCode@1002 : Code[10]) : Code[20];
    VAR
      Item@1001 : Record 27;
      SalesHeader@1000 : Record 36;
    BEGIN
      // Create Sales Order with Random Quantity and Unit Price. Taken Integer value to handle Rounding on Amounts after multiple Adjust Exchange rate.
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer(CurrencyCode));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandInt(100));
      SalesLine.MODIFY(TRUE);
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocument@41(VAR PurchaseLine@1003 : Record 39;CurrencyCode@1002 : Code[10]) : Code[20];
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Create Purchase Order with Random Quantity and Unit Price. Taken Integer value to handle Rounding on Amounts after multiple Adjust Exchange rate.
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor(CurrencyCode));
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(100));
      PurchaseLine.MODIFY(TRUE);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostPaymentLine@44(AccountType@1001 : Option;AccountNo@1002 : Code[20];DocumentType@1003 : Option;Amount@1004 : Decimal;PostingDate@1005 : Date);
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      CreateGeneralJournalLine(GenJournalLine,AccountType,AccountNo,DocumentType,Amount);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreatePostPaymentWithAppln@122(VAR GenJournalLine@1000 : Record 81;AccountType@1006 : Option;AccountNo@1001 : Code[20];CurrencyCode@1002 : Code[10];Sign@1004 : Integer;PmtPostingDate@1005 : Date);
    VAR
      InvoiceNo@1003 : Code[20];
    BEGIN
      CreateGeneralJournalLine(
        GenJournalLine,AccountType,AccountNo,GenJournalLine."Document Type"::Invoice,-Sign * LibraryRandom.RandDec(100,2));
      InvoiceNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateGeneralJournalLine(
        GenJournalLine,AccountType,GenJournalLine."Account No.",GenJournalLine."Document Type"::Payment,
        Sign * LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      ModifyGeneralLine(GenJournalLine,InvoiceNo,PmtPostingDate);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreatePostInvoiceAndPayment@152(VAR GenJournalLine@1000 : Record 81;VAR InvoiceNo@1006 : Code[20];AccountType@1005 : Option;AccountNo@1004 : Code[20];CurrencyCode@1003 : Code[10];Sign@1002 : Integer;PmtPostingDate@1001 : Date);
    BEGIN
      CreateGeneralJournalLine(
        GenJournalLine,AccountType,AccountNo,GenJournalLine."Document Type"::Invoice,-Sign * LibraryRandom.RandDec(100,2));
      InvoiceNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateGeneralJournalLine(
        GenJournalLine,AccountType,AccountNo,GenJournalLine."Document Type"::Payment,Sign * LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.VALIDATE("Posting Date",PmtPostingDate);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreatePostApplyTwoPurchDocuments@62(VAR GenJournalLine@1000 : Record 81;VAR InvoiceNo@1002 : Code[20];CurrencyCode@1001 : Code[10];StartingDate@1003 : Date;ApplyDocTypeFrom@1006 : Option;ApplyDocTypeTo@1007 : Option);
    VAR
      VendorLedgerEntryApplyFrom@1004 : Record 25;
      VendorLedgerEntryApplyTo@1005 : Record 25;
    BEGIN
      CreatePostInvoiceAndPayment(
        GenJournalLine,InvoiceNo,GenJournalLine."Account Type"::Vendor,CreateVendor(CurrencyCode),'',1,StartingDate);

      FindVendorLedgerEntryByDocType(VendorLedgerEntryApplyFrom,GenJournalLine."Account No.",ApplyDocTypeFrom);
      FindVendorLedgerEntryByDocType(VendorLedgerEntryApplyTo,GenJournalLine."Account No.",ApplyDocTypeTo);

      LibraryERM.ApplyVendorLedgerEntries(
        ApplyDocTypeFrom,ApplyDocTypeTo,
        VendorLedgerEntryApplyFrom."Document No.",VendorLedgerEntryApplyTo."Document No.");
    END;

    LOCAL PROCEDURE CreatePostApplyTwoSalesDocuments@68(VAR GenJournalLine@1000 : Record 81;VAR InvoiceNo@1002 : Code[20];CurrencyCode@1001 : Code[10];StartingDate@1003 : Date;ApplyDocTypeFrom@1006 : Option;ApplyDocTypeTo@1007 : Option);
    VAR
      CustLedgerEntryApplyFrom@1004 : Record 21;
      CustLedgerEntryApplyTo@1005 : Record 21;
    BEGIN
      CreatePostInvoiceAndPayment(
        GenJournalLine,InvoiceNo,GenJournalLine."Account Type"::Customer,CreateCustomer(CurrencyCode),'',-1,StartingDate);

      FindCustLedgerEntryByDocType(CustLedgerEntryApplyFrom,GenJournalLine."Account No.",ApplyDocTypeFrom);
      FindCustLedgerEntryByDocType(CustLedgerEntryApplyTo,GenJournalLine."Account No.",ApplyDocTypeTo);

      LibraryERM.ApplyCustomerLedgerEntries(
        ApplyDocTypeFrom,ApplyDocTypeTo,
        CustLedgerEntryApplyFrom."Document No.",CustLedgerEntryApplyTo."Document No.");
    END;

    LOCAL PROCEDURE GetVendorPostingAccount@73(VendorNo@1000 : Code[20]) : Code[20];
    VAR
      Vendor@1001 : Record 23;
      VendorPostingGroup@1002 : Record 93;
    BEGIN
      Vendor.GET(VendorNo);
      VendorPostingGroup.GET(Vendor."Vendor Posting Group");
      EXIT(VendorPostingGroup."Payables Account");
    END;

    LOCAL PROCEDURE GetCustomerPostingAccount@75(CustomerNo@1000 : Code[20]) : Code[20];
    VAR
      Customer@1001 : Record 18;
      CustomerPostingGroup@1002 : Record 92;
    BEGIN
      Customer.GET(CustomerNo);
      CustomerPostingGroup.GET(Customer."Customer Posting Group");
      EXIT(CustomerPostingGroup."Receivables Account");
    END;

    LOCAL PROCEDURE ModifyGeneralLine@64(VAR GenJournalLine@1000 : Record 81;DocumentNo@1001 : Code[20];PostingDate@1003 : Date);
    BEGIN
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostSalesOrderAndPayment@49(VAR SalesLine@1000 : Record 37;FirstStartingDate@1001 : Date;RelExchRateAmount@1002 : Decimal) DocumentNo : Code[20];
    VAR
      GenJournalLine@1003 : Record 81;
    BEGIN
      // Create and post Sales Order.
      DocumentNo := CreateAndPostSalesDocument(SalesLine,CreateCurrencyAndExchRates(FirstStartingDate,RelExchRateAmount));

      // Create and post Customer Partial Payment.
      CreateAndPostPaymentLine(
        GenJournalLine."Account Type"::Customer,SalesLine."Sell-to Customer No.",GenJournalLine."Document Type"::Payment,
        -SalesLine."Amount Including VAT" / 2,FirstStartingDate);
    END;

    LOCAL PROCEDURE PostPurchaseOrderAndPayment@50(VAR PurchaseLine@1000 : Record 39;FirstStartingDate@1001 : Date;RelExchRateAmount@1002 : Decimal) DocumentNo : Code[20];
    VAR
      GenJournalLine@1003 : Record 81;
    BEGIN
      // Create and post Purchase Order.
      DocumentNo := CreateAndPostPurchaseDocument(PurchaseLine,CreateCurrencyAndExchRates(FirstStartingDate,RelExchRateAmount));

      // Create and post Vendor Partial Payment.
      CreateAndPostPaymentLine(
        GenJournalLine."Account Type"::Vendor,PurchaseLine."Buy-from Vendor No.",GenJournalLine."Document Type"::Payment,
        PurchaseLine."Amount Including VAT" / 2,FirstStartingDate);
    END;

    LOCAL PROCEDURE DeleteExistingExchangeRates@30(CurrencyCode@1001 : Code[10]);
    VAR
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE FindCurrencyExchRate@18(VAR CurrencyExchangeRate@1001 : Record 330;CurrencyCode@1000 : Code[10]);
    BEGIN
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
    END;

    LOCAL PROCEDURE FindGLEntry@29(VAR GLEntry@1000 : Record 17;DocumentNo@1002 : Code[20];GLAccountNo@1001 : Code[20];DocumentType@1003 : Option);
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRelationalExchRateAmount@34(CurrencyCode@1000 : Code[10];StartingDate@1001 : Date;StartingDate2@1003 : Date) : Decimal;
    VAR
      Currency@1004 : Record 4;
      CurrencyExchangeRate@1002 : Record 330;
      Amount@1005 : Decimal;
    BEGIN
      Currency.GET(CurrencyCode);
      CurrencyExchangeRate.GET(CurrencyCode,StartingDate);
      Amount := CurrencyExchangeRate."Relational Exch. Rate Amount";
      CurrencyExchangeRate.GET(CurrencyCode,StartingDate2);
      EXIT(CurrencyExchangeRate."Relational Adjmt Exch Rate Amt" - Amount);
    END;

    LOCAL PROCEDURE FindVendorLedgerEntryByDocType@71(VAR VendorLedgerEntry@1000 : Record 25;VendorNo@1001 : Code[20];DocType@1002 : Option);
    BEGIN
      VendorLedgerEntry.SETRANGE("Vendor No.",VendorNo);
      VendorLedgerEntry.SETRANGE("Document Type",DocType);
      VendorLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindCustLedgerEntryByDocType@63(VAR CustLedgerEntry@1000 : Record 21;CustomerNo@1001 : Code[20];DocType@1002 : Option);
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgerEntry.SETRANGE("Document Type",DocType);
      CustLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE ModifyExchangeRate@1(CurrencyCode@1000 : Code[10];ExchRateAmt@1006 : Decimal);
    VAR
      CurrencyExchangeRate@1005 : Record 330;
    BEGIN
      FindCurrencyExchRate(CurrencyExchangeRate,CurrencyCode);
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",CurrencyExchangeRate."Relational Exch. Rate Amount" + ExchRateAmt);
      CurrencyExchangeRate.VALIDATE(
        "Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Adjmt Exch Rate Amt" + ExchRateAmt);
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OpenCustomerLedgerEntries@57(CustomerNo@1001 : Code[20];DocumentNo@1002 : Code[20]);
    VAR
      CustomerLedgerEntries@1000 : TestPage 25;
    BEGIN
      CustomerLedgerEntries.OPENVIEW;
      CustomerLedgerEntries.FILTER.SETFILTER("Customer No.",CustomerNo);
      CustomerLedgerEntries.FILTER.SETFILTER("Document No.",DocumentNo);
      IF SetHandler THEN
        CustomerLedgerEntries.UnapplyEntries.INVOKE
      ELSE
        CustomerLedgerEntries."Apply Entries".INVOKE;
    END;

    LOCAL PROCEDURE OpenVendorLedgerEntries@60(VendorNo@1001 : Code[20];DocumentNo@1002 : Code[20]);
    VAR
      VendorLedgerEntries@1000 : TestPage 29;
    BEGIN
      VendorLedgerEntries.OPENVIEW;
      VendorLedgerEntries.FILTER.SETFILTER("Vendor No.",VendorNo);
      VendorLedgerEntries.FILTER.SETFILTER("Document No.",DocumentNo);
      IF SetHandler THEN
        VendorLedgerEntries.UnapplyEntries.INVOKE
      ELSE
        VendorLedgerEntries.ActionApplyEntries.INVOKE;
    END;

    LOCAL PROCEDURE RunAdjustExchRate@12(Code@1002 : Code[10];EndDate@1003 : Date);
    VAR
      Currency@1001 : Record 4;
      AdjustExchangeRates@1000 : Report 595;
    BEGIN
      Currency.SETRANGE(Code,Code);
      AdjustExchangeRates.SETTABLEVIEW(Currency);
      AdjustExchangeRates.InitializeRequest2(0D,EndDate,'Test',EndDate,Code,TRUE,FALSE); // Using Currency Code for Document No. parameter.
      AdjustExchangeRates.USEREQUESTPAGE(FALSE);
      AdjustExchangeRates.RUN;
    END;

    LOCAL PROCEDURE SelectGenJournalBatch@26(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      // Select General Journal Batch and clear General Journal Lines to make sure that no line exist before creating
      // General Journal Lines.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch)
    END;

    LOCAL PROCEDURE UnapplyVendorEntry@172(VAR VendorLedgerEntry@1006 : Record 25;DocumentType@1005 : Option;DocumentNo@1004 : Code[20]);
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo);
      LibraryERM.UnapplyVendorLedgerEntry(VendorLedgerEntry);
    END;

    LOCAL PROCEDURE UnapplyCustomerEntry@173(VAR CustLedgerEntry@1000 : Record 21;DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      LibraryERM.UnapplyCustomerLedgerEntry(CustLedgerEntry);
    END;

    LOCAL PROCEDURE VerifyGLEntryAmountAdjmtExchangeRate@42(BankAccountNo@1004 : Code[20];Amount@1003 : Decimal;DocumentNo@1001 : Code[20]);
    VAR
      BankAccount@1005 : Record 270;
      BankAccountPostingGroup@1006 : Record 277;
      Currency@1007 : Record 4;
      GLEntry@1000 : Record 17;
      GLEntryAmount@1002 : Decimal;
    BEGIN
      BankAccount.GET(BankAccountNo);
      BankAccountPostingGroup.GET(BankAccount."Bank Acc. Posting Group");
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",BankAccountPostingGroup."G/L Bank Account No.");
      GLEntry.FINDSET;
      REPEAT
        GLEntryAmount += GLEntry.Amount;
      UNTIL GLEntry.NEXT = 0;
      Currency.GET(DocumentNo);
      Assert.AreNearlyEqual(
        Amount,GLEntryAmount,Currency."Invoice Rounding Precision",
        STRSUBSTNO(GLEntryAmountErr,GLEntry.FIELDCAPTION(Amount),Amount,GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyDetailedLedgerEntry@3(DocumentNo@1000 : Code[20];EntryType@1001 : Option;Amount@1006 : Decimal);
    VAR
      DetailedCustLedgEntry@1002 : Record 379;
      Currency@1005 : Record 4;
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedCustLedgEntry.SETRANGE("Entry Type",EntryType);
      DetailedCustLedgEntry.FINDFIRST;
      DetailedCustLedgEntry.TESTFIELD("Ledger Entry Amount",TRUE);
      Currency.GET(DetailedCustLedgEntry."Currency Code");
      Assert.AreNearlyEqual(
        Amount,DetailedCustLedgEntry."Amount (LCY)",Currency."Amount Rounding Precision",
        STRSUBSTNO(
          AmountErr,DetailedCustLedgEntry.FIELDCAPTION("Amount (LCY)"),Amount,DetailedCustLedgEntry.TABLECAPTION,
          DetailedCustLedgEntry.FIELDCAPTION("Entry No."),DetailedCustLedgEntry."Entry No."));
    END;

    LOCAL PROCEDURE VerifyGLEntry@9(CurrencyCode@1004 : Code[10];DocumentNo@1002 : Code[20];Amount@1006 : Decimal;AccountNo@1000 : Code[20];DocumentType@1001 : Option);
    VAR
      Currency@1005 : Record 4;
      GLEntry@1003 : Record 17;
    BEGIN
      FindGLEntry(GLEntry,DocumentNo,AccountNo,DocumentType);
      Currency.GET(CurrencyCode);
      Assert.AreNearlyEqual(
        Amount,GLEntry.Amount,Currency."Amount Rounding Precision",
        STRSUBSTNO(
          AmountErr,GLEntry.FIELDCAPTION(Amount),Amount,GLEntry.TABLECAPTION,GLEntry.FIELDCAPTION("Entry No."),GLEntry."Entry No."));
    END;

    LOCAL PROCEDURE VerifyGLEntryReverseBalance@91(CurrencyCode@1004 : Code[10];AccountNo@1000 : Code[20];DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    VAR
      Currency@1005 : Record 4;
      GLEntry@1003 : Record 17;
    BEGIN
      FindGLEntry(GLEntry,DocumentNo,AccountNo,DocumentType);
      GLEntry.SETRANGE("Document Type"); // Unapply creates entries with empty Document Type
      GLEntry.CALCSUMS(Amount);
      GLEntry.TESTFIELD(Amount,0);

      Currency.GET(CurrencyCode);
      GLEntry.SETRANGE("G/L Account No.",Currency."Realized Gains Acc.");
      GLEntry.CALCSUMS(Amount);
      GLEntry.TESTFIELD(Amount,0);

      Currency.GET(CurrencyCode);
      GLEntry.SETRANGE("G/L Account No.",Currency."Realized Losses Acc.");
      GLEntry.CALCSUMS(Amount);
      GLEntry.TESTFIELD(Amount,0);
    END;

    [ModalPageHandler]
    PROCEDURE ApplyCustomerEntriesPageHandler@48(VAR ApplyCustomerEntries@1000 : TestPage 232);
    BEGIN
      ApplyCustomerEntries."Set Applies-to ID".INVOKE;
      ApplyCustomerEntries."Post Application".INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ApplyVendorEntriesPageHandler@61(VAR ApplyVendorEntries@1000 : TestPage 233);
    BEGIN
      ApplyVendorEntries.ActionSetAppliesToID.INVOKE;
      ApplyVendorEntries.ActionPostApplication.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@25(Message@1000 : Text[1024];VAR Response@1001 : Boolean);
    BEGIN
      Response := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE PostApplicationPageHandler@53(VAR PostApplication@1000 : TestPage 579);
    BEGIN
      PostApplication.PostingDate.SETVALUE(FORMAT(PostingDate));
      PostApplication.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@28(Message@1000 : Text[1024]);
    BEGIN
      // To handle the message.
    END;

    [ModalPageHandler]
    PROCEDURE UnapplyCustomerEntriesPageHandler@51(VAR UnapplyCustomerEntries@1000 : TestPage 623);
    BEGIN
      UnapplyCustomerEntries.Unapply.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE UnapplyVendorEntriesPageHandler@52(VAR UnapplyVendorEntries@1000 : TestPage 624);
    BEGIN
      UnapplyVendorEntries.Unapply.INVOKE;
    END;

    [Normal]
    LOCAL PROCEDURE CalculateGLEntryBaseAmount@54(GLAccountNo@1004 : Code[20];Amount@1005 : Decimal) : Decimal;
    VAR
      VATPostingSetup@1003 : Record 325;
      Currency@1006 : Record 4;
      GLAccount@1002 : Record 15;
      VATAmount@1001 : Decimal;
    BEGIN
      // function calculates VAT Base Amount based on VAT Posting Setup applied for input account
      GLAccount.GET(GLAccountNo);
      IF VATPostingSetup.GET(GLAccount."VAT Bus. Posting Group",GLAccount."VAT Prod. Posting Group") THEN
        VATAmount :=
          ROUND(
            Amount * VATPostingSetup."VAT %" / (100 + VATPostingSetup."VAT %"),Currency."Amount Rounding Precision",
            Currency.VATRoundingDirection);
      EXIT(ROUND(Amount - VATAmount,Currency."Amount Rounding Precision"));
    END;

    BEGIN
    {
      // [FEATURE] [Adjust Exchange Rate]

      Unsupported version tags:
      NA: Unable to Execute
      ES: Unable to Execute
      DE: Unable to Execute
      CH: Unable to Execute (TFS ID: 50693)

      Test Adjust Exchange Rate batch job for Customer and Bank.
        1. Create, Update Higher Exchange Rate and Run Adjust Exchange rate batch job for Unrealized Gain on Customer.
        2. Create, Update Lower Exchange Rate and Run Adjust Exchange rate batch job for Unrealized Loss on Customer.
        3. Create, Update Higher Exchange Rate and Run Adjust Exchange rate batch job for Bank Account G/L Entry.
        4. Create, Update Lower Exchange Rate and Run Adjust Exchange rate batch job for Bank Account G/L Entry.
        5. Check Customer Entry for Unrealized Gain with Apply Credit Memo and Refund.
        6. Verify program allows to create General journal line with a Balancing Account Type Bank with setup Currency.
        7. Check GL Entry after Run Adjust Exchange Rate Batch Job with multiple Currency Exchange Rate with Negative Amount on General Line.
        8. Check GL Entry after Run Adjust Exchange Rate Batch Job with multiple Currency Exchange Rate with Positive Amount on General Line.
        9. Check GL Entry for Currency Gain/Loss after running Adjust Exchange Rate Batch Job with multiple Currency Exchange Rate.
        10. Check GL Entry after running Adjust Exchange Rate batch job with posting of Customer Invoice and Payment With Different Exchange Rates.
        11. Check GL Entry after applying Payment to Customer Invoice With Different Exchange Rates.
        12. Check GL Entry for Adjust Exchange Rate batch job after applying Customer Entries.
        13. Check GL Entry for Adjust Exchange Rate batch job after unapplying Customer Entries.
        14. Check GL Entry after running Adjust Exchange Rate batch job with posting of Vendor Invoice and Payment With Different Exchange Rates.
        15. Check GL Entry after applying Payment to Vendor Invoice With Different Exchange Rates.
        16. Check GL Entry for Adjust Exchange Rate batch job after applying Vendor Entries.
        17. Check GL Entry for Adjust Exchange Rate batch job after unapplying Vendor Entries.
        18. Verify Program doesn't allow to reverse the payment transaction when Realized gain or loss entries associated with Customer Receipt transaction.
        19. Verify Program doesn't allow to reverse the payment transaction when Realized gain or loss entries associated with Vendor Receipt transaction.

      Covers Test Cases:
        ---------------------------------------------
        Test Function Name           TFS ID
        ---------------------------------------------
        CustAdjustExchRateForHigher  125893 to 125899
        CustAdjustExchRateForLower   125900 to 125903
        BankAdjustExchRateForHigher  123844 to 125847
        BankAdjustExchRateForLower   123848 to 125851

      Covers Test Cases: 234171
        ---------------------------------------------
        Test Function Name           TFS ID
        ---------------------------------------------
        UnrealizedGainCreditMemoCust  125143 to 125155

      Covers Test Cases: 253633
        ---------------------------------------------
        Test Function Name             TFS ID
        ---------------------------------------------
        GeneralJournalWithBankAccount  251591

        Covers Test Cases: 264069
        --------------------------------------------------------------------------------
        Test Function Name                                                      TFS ID
        --------------------------------------------------------------------------------
        GLEntryAdjmtWithNegativeAmount,GLEntryAdjmtWithPositiveAmount           256780

        Covers Test Cases: 264915
        --------------------------------------------------------------------------------
        Test Function Name                                                      TFS ID
        --------------------------------------------------------------------------------
        GLEntryAdjustExchRateForGainOrLoss                                      257806

        Covers Test Cases: 265505
        --------------------------------------------------------------------------------
        Test Function Name                                                      TFS ID
        --------------------------------------------------------------------------------
        SalesInvoiceAndPaymentWithDiffExchangeRates
        ApplyCustomerEntriesWithDiffExchangeRates
        AdjustExchRateAfterApplyingCustomerEntries
        AdjustExchRateAfterUnapplyingCustomerEntries
        PurchaseInvoiceAndPaymentWithDiffExchangeRates
        ApplyVendorEntriesWithDiffExchangeRates
        AdjustExchRateAfterApplyingVendorEntries
        AdjustExchRateAfterUnapplyingVendorEntries                               255688

        Covers Test Cases: 269910
        --------------------------------------------------------------------------------
        Test Function Name                                                      TFS ID
        --------------------------------------------------------------------------------
        ReversePaymentWithUnrealizedGainLossforVendor                                           266301
        ReversePaymentWithUnrealizedGainLossforCustomer
    }
    END.
  }
}

