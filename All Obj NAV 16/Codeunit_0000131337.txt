OBJECT Codeunit 131337 Library - XPath XML Reader
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      XMLDocOut@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNsMgr@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      UnexpectedValueErr@1011 : TextConst 'ENU=Unexpected value!. Expected: %1''. In XML file: %2.';
      NodeCountErr@1010 : TextConst 'ENU=Count is wrong. Node: %1';
      NodeCountWithValueErr@1009 : TextConst 'ENU=Count is wrong for value %1 in nodes %2';
      NodeNotFoundErr@1008 : TextConst 'ENU=The selected node %1 was not found.';
      UnexpectedNodeValueErr@1007 : TextConst 'ENU=Unexpected node %1 value. Expected: %2, actual %3.';
      MissingAttributeErr@1006 : TextConst 'ENU=%1 attribute is missing from the node %2.';
      UnexpectedAttributeValueErr@1005 : TextConst 'ENU=Unexpected attribute %1 value.';
      UnexpectedAttributeErr@1004 : TextConst 'ENU=Unepexted %1 attribute in the node %2.';
      SkipDefaultNamespace@1012 : Boolean;

    PROCEDURE Initialize@1(FullFilePath@1000 : Text;NameSpace@1001 : Text);
    VAR
      XMLDOMManagement@1002 : Codeunit 6224;
    BEGIN
      XMLDOMManagement.LoadXMLDocumentFromFile(FullFilePath,XMLDocOut);

      XMLNsMgr := XMLNsMgr.XmlNamespaceManager(XMLDocOut.NameTable);
      XMLNsMgr.AddNamespace('ns',NameSpace);
    END;

    PROCEDURE InitializeWithPrefix@40(FullFilePath@1000 : Text;Prefix@1001 : Text;NameSpace@1002 : Text);
    VAR
      XMLDOMManagement@1003 : Codeunit 6224;
    BEGIN
      XMLDOMManagement.LoadXMLDocumentFromFile(FullFilePath,XMLDocOut);

      XMLNsMgr := XMLNsMgr.XmlNamespaceManager(XMLDocOut.NameTable);
      XMLNsMgr.AddNamespace(Prefix,NameSpace);
    END;

    PROCEDURE InitializeWithBlob@13(TempBlob@1000 : Record 99008535;NameSpace@1001 : Text);
    VAR
      XMLDOMManagement@1003 : Codeunit 6224;
      InStream@1002 : InStream;
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InStream);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStream,XMLDocOut);

      XMLNsMgr := XMLNsMgr.XmlNamespaceManager(XMLDocOut.NameTable);
      XMLNsMgr.AddNamespace('ns',NameSpace);
    END;

    PROCEDURE InitializeWithText@20(Content@1000 : Text;NameSpace@1001 : Text);
    VAR
      XMLDOMManagement@1002 : Codeunit 6224;
      XmlDocumentNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLDOMManagement.LoadXMLNodeFromText(Content,XmlDocumentNode);
      XMLDocOut := XmlDocumentNode.OwnerDocument;

      XMLNsMgr := XMLNsMgr.XmlNamespaceManager(XMLDocOut.NameTable);
      XMLNsMgr.AddNamespace('ns',NameSpace);
    END;

    PROCEDURE GetElementValue@2(ElementName@1000 : Text) : Text;
    BEGIN
      GetNodeByElementName(ElementName,XMLNode);
      EXIT(XMLNode.Value);
    END;

    PROCEDURE VerifyNodeAbsence@3(ElementName@1000 : Text);
    VAR
      Node@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      ASSERTERROR GetNodeByElementName(ElementName,Node);
      Assert.ExpectedError('Element is missing!');
    END;

    PROCEDURE VerifyNodeValue@4(ElementName@1000 : Text;Expected@1001 : Text);
    VAR
      Actual@1002 : Text;
    BEGIN
      GetNodeByElementName(ElementName,XMLNode);
      Actual := XMLNode.InnerText;
      Assert.AreEqual(Expected,Actual,
        STRSUBSTNO('Unexpected value in xml file for element <%1>',ElementName));
    END;

    PROCEDURE VerifyAttributeAbsence@5(ElementName@1000 : Text;AttributeName@1001 : Text);
    VAR
      Attribute@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
    BEGIN
      ASSERTERROR GetAttributeFromElement(ElementName,AttributeName,Attribute);
      Assert.ExpectedError('Attribute is missing!');
    END;

    PROCEDURE VerifyAttributeValue@6(ElementName@1000 : Text;AttributeName@1001 : Text;Expected@1002 : Text);
    VAR
      Attribute@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
      Actual@1004 : Text;
    BEGIN
      GetAttributeFromElement(ElementName,AttributeName,Attribute);
      Actual := Attribute.Value;
      Assert.AreEqual(Expected,Actual,
        STRSUBSTNO('Unexpected value in xml file for Attribute <%1>',AttributeName));
    END;

    PROCEDURE GetNodeListByElementName@7(ElementName@1000 : Text;VAR NodeList@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList") : Integer;
    BEGIN
      GetNodeList(ElementName,NodeList);
      IF NodeList.Count = 0 THEN
        Assert.Fail('Element is missing! ' + ElementName);
      EXIT(NodeList.Count);
    END;

    PROCEDURE GetAttributeFromElement@8(ElementName@1000 : Text;AttributeName@1001 : Text;VAR Attribute@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute");
    VAR
      Node@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      GetNodeByElementName(ElementName,Node);
      IF Node.Attributes.Count = 0 THEN
        Assert.Fail('Attribute is missing! ' + ElementName);
      Attribute := Node.Attributes.GetNamedItem(AttributeName);
    END;

    PROCEDURE GetNodeByXPath@9(xPath@1000 : Text;VAR Node@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      NodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      GetNodeList(xPath,NodeList);
      Assert.AreNotEqual(0,NodeList.Count,STRSUBSTNO(NodeNotFoundErr,xPath));
      Node := NodeList.Item(0);
    END;

    PROCEDURE GetNodeByElementName@10(ElementName@1000 : Text;VAR Node@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      NodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      GetNodeListByElementName(ElementName,NodeList);
      Node := NodeList.Item(0);
    END;

    PROCEDURE GetElementInCurrNode@11(CurrNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ElementName@1001 : Text;VAR ElementNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      ElementNode := CurrNode.SelectSingleNode(ElementName,XMLNsMgr);
    END;

    PROCEDURE GetElementValueInCurrNode@12(CurrNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ElementName@1001 : Text) : Text;
    VAR
      Node@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      GetElementInCurrNode(CurrNode,ElementName,Node);
      EXIT(Node.InnerText);
    END;

    PROCEDURE GetNodeList@22(xPath@1000 : Text;VAR nodeList@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList");
    BEGIN
      IF SkipDefaultNamespace THEN
        nodeList := XMLDocOut.DocumentElement.SelectNodes(xPath,XMLNsMgr)
      ELSE
        nodeList := XMLDocOut.DocumentElement.SelectNodes(Replace(xPath,'/','/ns:'),XMLNsMgr);
    END;

    PROCEDURE GetNodeListInCurrNode@26(CurrNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";xPath@1001 : Text;VAR nodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList");
    BEGIN
      IF SkipDefaultNamespace THEN
        nodeList := CurrNode.SelectNodes(xPath,XMLNsMgr)
      ELSE
        nodeList := CurrNode.SelectNodes(Replace(xPath,'/','/ns:'),XMLNsMgr);
    END;

    PROCEDURE GetAttributeValueFromNode@46(Node@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";AttributeName@1000 : Text) : Text;
    VAR
      Attribute@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
      Actual@1002 : Text;
    BEGIN
      Attribute := Node.Attributes.GetNamedItem(AttributeName);
      Assert.IsFalse(ISNULL(Attribute),STRSUBSTNO(MissingAttributeErr,AttributeName,Node.Name));
      Actual := Attribute.Value;
      EXIT(Actual);
    END;

    PROCEDURE CompareTextWithInteger@14(TextValue@1000 : Text;ExpectedValue@1001 : Integer);
    VAR
      Value@1002 : Integer;
    BEGIN
      IF EVALUATE(Value,TextValue) THEN
        IF Value = ExpectedValue THEN
          EXIT;

      ERROR(UnexpectedValueErr,ExpectedValue,TextValue);
    END;

    PROCEDURE VerifyNodeCountByXPath@23(xPath@1000 : Text;NodeCount@1001 : Integer);
    VAR
      NodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      GetNodeList(xPath,NodeList);
      Assert.AreEqual(NodeCount,NodeList.Count,STRSUBSTNO(NodeCountErr,xPath));
    END;

    PROCEDURE VerifyNodeCountWithValueByXPath@15(xPath@1000 : Text;Value@1001 : Text;NodeCount@1002 : Integer);
    VAR
      NodeList@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ActualNodeCount@1004 : Integer;
      i@1005 : Integer;
    BEGIN
      GetNodeList(xPath,NodeList);
      ActualNodeCount := 0;
      FOR i := 0 TO NodeList.Count - 1 DO
        IF NodeList.Item(i).InnerText = Value THEN
          ActualNodeCount += 1;
      Assert.AreEqual(NodeCount,ActualNodeCount,STRSUBSTNO(NodeCountWithValueErr,Value,xPath));
    END;

    PROCEDURE VerifyNodeValueByXPath@16(xPath@1000 : Text;NodeValue@1001 : Text);
    BEGIN
      VerifyNodeValueByXPathWithIndex(xPath,NodeValue,0);
    END;

    PROCEDURE VerifyNodeValueByXPathWithIndex@19(xPath@1000 : Text;NodeValue@1001 : Text;Index@1006 : Integer);
    VAR
      NodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      Node@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ActualNodeValue@1004 : Text;
      NodeCount@1005 : Integer;
    BEGIN
      GetNodeList(xPath,NodeList);
      NodeCount := NodeList.Count;
      Assert.AreNotEqual(0,NodeCount,STRSUBSTNO(NodeNotFoundErr,xPath));
      Node := NodeList.Item(Index);
      ActualNodeValue := Node.InnerText;
      Assert.AreEqual(NodeValue,ActualNodeValue,STRSUBSTNO(UnexpectedNodeValueErr,xPath,NodeValue,ActualNodeValue));
    END;

    PROCEDURE VerifyAttributeFromNode@17(Node@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";AttributeName@1001 : Text;AttributeExpectedValue@1002 : Text);
    VAR
      Actual@1004 : Text;
    BEGIN
      Actual := GetAttributeValueFromNode(Node,AttributeName);
      Assert.AreEqual(AttributeExpectedValue,Actual,STRSUBSTNO(UnexpectedAttributeValueErr,AttributeName));
    END;

    PROCEDURE VerifyOptionalAttributeFromNode@33(Node@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";AttributeName@1001 : Text;AttributeExpectedValue@1002 : Text);
    VAR
      AttributeActualValue@1004 : Text;
      AttributeValueDecimal@1005 : Decimal;
      IsNumber@1006 : Boolean;
    BEGIN
      IF EVALUATE(AttributeValueDecimal,AttributeExpectedValue) THEN
        IsNumber := TRUE;

      IF (IsNumber AND (AttributeValueDecimal = 0)) OR (AttributeExpectedValue = '') THEN
        VerifyAttributeAbsenceFromNode(Node,AttributeName)
      ELSE BEGIN
        AttributeActualValue := GetAttributeValueFromNode(Node,AttributeName);
        Assert.AreEqual(AttributeExpectedValue,AttributeActualValue,STRSUBSTNO(UnexpectedAttributeValueErr,AttributeName));
      END;
    END;

    PROCEDURE VerifyAttributeAbsenceFromNode@18(Node@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";AttributeName@1001 : Text);
    VAR
      Attribute@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
    BEGIN
      Attribute := Node.Attributes.GetNamedItem(AttributeName);
      Assert.IsTrue(ISNULL(Attribute),STRSUBSTNO(UnexpectedAttributeErr,AttributeName,Node.Name));
    END;

    LOCAL PROCEDURE Replace@25(SourceText@1001 : Text;FindText@1000 : Text;ReplaceText@1002 : Text) : Text;
    VAR
      NewText@1003 : Text;
      pos@1004 : Integer;
    BEGIN
      WHILE STRPOS(SourceText,FindText) > 0 DO BEGIN
        pos := STRPOS(SourceText,FindText);
        IF (SourceText[pos + 1] <> '@') AND (SourceText[pos + 1] <> '/') THEN
          NewText := NewText + COPYSTR(SourceText,1,STRPOS(SourceText,FindText) - 1) + ReplaceText
        ELSE
          NewText := NewText + COPYSTR(SourceText,1,STRPOS(SourceText,FindText));
        SourceText := DELSTR(SourceText,1,STRPOS(SourceText,FindText));
      END;

      EXIT(NewText + SourceText);
    END;

    PROCEDURE SetDefaultNamespaceUsage@21(UseDefaultNamespace@1000 : Boolean);
    BEGIN
      SkipDefaultNamespace := NOT UseDefaultNamespace;
    END;

    PROCEDURE AddAdditionalNamespace@41(Prefix@1000 : Text;Namespace@1001 : Text);
    BEGIN
      XMLNsMgr.AddNamespace(Prefix,Namespace);
    END;

    EVENT XMLDocOut@1002::NodeInserting@93(sender@1001 : Variant;e@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDocOut@1002::NodeInserted@94(sender@1001 : Variant;e@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDocOut@1002::NodeRemoving@95(sender@1001 : Variant;e@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDocOut@1002::NodeRemoved@96(sender@1001 : Variant;e@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDocOut@1002::NodeChanging@97(sender@1001 : Variant;e@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDocOut@1002::NodeChanged@98(sender@1001 : Variant;e@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

