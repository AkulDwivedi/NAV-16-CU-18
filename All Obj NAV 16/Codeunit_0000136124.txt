OBJECT Codeunit 136124 Service Adjust Costs/Prices
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryService@1006 : Codeunit 131902;
      LibraryResource@1000 : Codeunit 130511;
      LibraryUtility@1004 : Codeunit 131000;
      Assert@1001 : Codeunit 130000;
      IsInitialized@1002 : Boolean;
      WrongUpdateErrorMessage@1003 : TextConst 'ENU=Field must be updated as per Adjustment Factor.';
      ProfitChangeErrorMessage@1005 : TextConst 'ENU=Profit % must not change.';

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE UpdateIndirectUnitCost@2();
    VAR
      Resource@1002 : Record 156;
      Selection@1001 : 'Direct Unit Cost,Indirect Cost %,Unit Cost,Profit %,Unit Price';
      AdjFactor@1003 : Decimal;
      UpdatedUnitCost@1004 : Decimal;
    BEGIN
      // Covers document number - refer to TFS ID 130447.
      // Test Indirect Unit Cost of resource changes according to Adjustment factor.

      // 1. Setup: Create New Resource.
      CreateResource(Resource);

      // 2. Exercise: Input Indirect Unit Cost and Run Report Adjust Resource Costs/Prices.
      Resource.VALIDATE("Unit Cost",RANDOM(100) + LibraryUtility.GenerateRandomFraction);
      Resource.MODIFY(TRUE);
      AdjFactor := RANDOM(10);
      UpdatedUnitCost := Resource."Unit Cost" * AdjFactor;
      VerifyResourceCostPrice(Resource,Selection::"Unit Cost",AdjFactor);

      // 3. Verify: Check that Unit Cost got updated as per Adjustment Factor.
      Resource.GET(Resource."No.");
      Assert.AreEqual(UpdatedUnitCost,Resource."Unit Cost",WrongUpdateErrorMessage);
    END;

    [Test]
    PROCEDURE UpdateDirectUnitCost@23();
    VAR
      Resource@1002 : Record 156;
      Selection@1001 : 'Direct Unit Cost,Indirect Cost %,Unit Cost,Profit %,Unit Price';
      AdjFactor@1003 : Decimal;
      UpdateDirectUnitCost@1004 : Decimal;
    BEGIN
      // Covers document number  - refer to TFS ID 130447.
      // Test Direct Unit Cost of resource changes according to Adjustment factor.

      // 1. Setup: Create New Resource.
      CreateResource(Resource);

      // 2. Exercise: Input Direct Unit Cost and Run Report Adjust Resource Costs/Prices.
      Resource.VALIDATE("Direct Unit Cost",RANDOM(100) + LibraryUtility.GenerateRandomFraction);
      Resource.MODIFY(TRUE);
      AdjFactor := RANDOM(10);
      UpdateDirectUnitCost := Resource."Direct Unit Cost" * AdjFactor;
      VerifyResourceCostPrice(Resource,Selection::"Direct Unit Cost",AdjFactor);

      // 3. Verify: Check that Direct Unit Cost got updated as per Adjustment Factor.
      Resource.GET(Resource."No.");
      Assert.AreEqual(UpdateDirectUnitCost,Resource."Direct Unit Cost",WrongUpdateErrorMessage);
    END;

    [Test]
    PROCEDURE UpdateUnitPrice@1();
    VAR
      Resource@1002 : Record 156;
      Selection@1001 : 'Direct Unit Cost,Indirect Cost %,Unit Cost,Profit %,Unit Price';
      AdjFactor@1003 : Decimal;
      UpdatedUnitPrice@1004 : Decimal;
    BEGIN
      // Covers document number  - refer to TFS ID 130447.
      // Test Unit Price of resource changes according to Adjustment factor.

      // 1. Setup: Create New Resource.
      CreateResource(Resource);

      // 2. Exercise: Input Unit Price and Run Report Adjust Resource Costs/Prices.
      Resource.VALIDATE("Unit Price",RANDOM(100) + LibraryUtility.GenerateRandomFraction);
      Resource.MODIFY(TRUE);
      AdjFactor := RANDOM(10);
      UpdatedUnitPrice := Resource."Unit Price" * AdjFactor;
      VerifyResourceCostPrice(Resource,Selection::"Unit Price",AdjFactor);

      // 3. Verify: Check that Unit Price got updated as per Adjustment Factor.
      Resource.GET(Resource."No.");
      Assert.AreEqual(UpdatedUnitPrice,Resource."Unit Price",WrongUpdateErrorMessage);
    END;

    [Test]
    PROCEDURE UpdateIndirectCostPercentage@3();
    VAR
      Resource@1002 : Record 156;
      Selection@1001 : 'Direct Unit Cost,Indirect Cost %,Unit Cost,Profit %,Unit Price';
      AdjFactor@1003 : Decimal;
      UpdatedIndirectCostPercentage@1004 : Decimal;
    BEGIN
      // Covers document number  - refer to TFS ID 130447.
      // Test Indirect Cost % of resource changes according to Adjustment factor.

      // 1. Setup: Create New Resource.
      CreateResource(Resource);

      // 2. Exercise: Input Indirect Cost % and Run Report Adjust Resource Costs/Prices.
      Resource.VALIDATE("Indirect Cost %",RANDOM(10) + LibraryUtility.GenerateRandomFraction);
      Resource.MODIFY(TRUE);
      AdjFactor := RANDOM(10);
      UpdatedIndirectCostPercentage := Resource."Indirect Cost %" * AdjFactor;
      VerifyResourceCostPrice(Resource,Selection::"Indirect Cost %",AdjFactor);

      // 3. Verify: Check that Indirect Cost % got updated as per Adjustment Factor.
      Resource.GET(Resource."No.");
      Assert.AreEqual(UpdatedIndirectCostPercentage,Resource."Indirect Cost %",WrongUpdateErrorMessage);
    END;

    [Test]
    PROCEDURE UpdateProfitPercentage@4();
    VAR
      Resource@1002 : Record 156;
      Selection@1001 : 'Direct Unit Cost,Indirect Cost %,Unit Cost,Profit %,Unit Price';
      BaseProfitPercentage@1004 : Decimal;
    BEGIN
      // Covers document number  - refer to TFS ID 130447.
      // Test Profit % of resource will not changes according to Adjustment factor.

      // 1. Setup: Create New Resource.
      CreateResource(Resource);

      // 2. Exercise: Input Profit % and Run Report Adjust Resource Costs/Prices.
      Resource.VALIDATE("Unit Cost",RANDOM(10) + LibraryUtility.GenerateRandomFraction);
      Resource.VALIDATE("Unit Price",RANDOM(10) + Resource."Unit Cost");
      Resource.MODIFY(TRUE);
      BaseProfitPercentage := Resource."Profit %";
      VerifyResourceCostPrice(Resource,Selection::"Profit %",RANDOM(10));

      // 3. Verify: Check that Profit % should not updated as per Adjustment Factor.
      Resource.GET(Resource."No.");
      Assert.AreEqual(BaseProfitPercentage,Resource."Profit %",ProfitChangeErrorMessage);
    END;

    LOCAL PROCEDURE CreateResource@7(VAR Resource@1000 : Record 156);
    BEGIN
      Initialize;
      LibraryResource.CreateResourceNew(Resource);
    END;

    LOCAL PROCEDURE VerifyResourceCostPrice@10(VAR Resource@1004 : Record 156;Selection@1000 : Option;AdjFactor@1005 : Decimal);
    VAR
      AdjustResourceCostsPrices@1002 : Report 1195;
    BEGIN
      Resource.SETRANGE("No.",Resource."No.");
      CLEAR(AdjustResourceCostsPrices);
      AdjustResourceCostsPrices.SETTABLEVIEW(Resource);
      AdjustResourceCostsPrices.InitializeRequest(Selection,AdjFactor,'');
      AdjustResourceCostsPrices.USEREQUESTPAGE(FALSE);
      AdjustResourceCostsPrices.RUNMODAL;
    END;

    BEGIN
    {
      // [FEATURE] [Adjust Resource Costs/Prices] [Service]
      Unsupported version tags:
      SE: Unable to Execute

      Test for Report Adjust Resource Cost/Price:
       1. Test for Indirect unit cost of resource changes according to Adjustment factor.

      TFS_TS_ID = 130447
      Covers Test cases:
        TFS_TC_ID=130447
    }
    END.
  }
}

