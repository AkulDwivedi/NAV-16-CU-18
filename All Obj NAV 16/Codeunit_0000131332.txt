OBJECT Codeunit 131332 Library - Cash Flow Helper
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Normal;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryRandom@1000 : Codeunit 130440;
      LibraryCashFlowForecast@1002 : Codeunit 131331;
      LibraryERM@1003 : Codeunit 131300;
      LibrarySales@1004 : Codeunit 130509;
      LibraryPurchase@1005 : Codeunit 130512;
      LibraryUtility@1009 : Codeunit 131000;
      UnhandledDocumentType@1010 : TextConst 'ENU=Unhandled document type.';
      UnexpectedCFAmount@1011 : TextConst 'ENU=Unexpected cash flow amount.';
      UnexpectedCFDate@1012 : TextConst 'ENU=Unexpected cash flow date in Document No. %1.';
      LibraryFA@1007 : Codeunit 131330;
      Assert@1006 : Codeunit 130000;
      DocumentType@1001 : 'Sale,Purchase,Service';

    PROCEDURE AddAndPostSOPrepaymentInvoice@35(VAR SalesHeader@1000 : Record 36;PrepaymentPercentage@1001 : Decimal) PrepmtInvNo : Code[20];
    BEGIN
      AddSOPrepayment(SalesHeader,PrepaymentPercentage);
      PrepmtInvNo := PostSOPrepaymentInvoice(SalesHeader);
    END;

    PROCEDURE AddSOPrepayment@101(VAR SalesHeader@1000 : Record 36;PrepaymentPercentage@1001 : Decimal);
    BEGIN
      SalesHeader.VALIDATE("Prepayment %",PrepaymentPercentage);
      SalesHeader.MODIFY(TRUE);
    END;

    PROCEDURE PostSOPrepaymentInvoice@78(VAR SalesHeader@1000 : Record 36) : Code[20];
    VAR
      SalesPostPrepayments@1002 : Codeunit 442;
    BEGIN
      SalesPostPrepayments.Invoice(SalesHeader);
      EXIT(SalesHeader."Last Prepayment No.");
    END;

    PROCEDURE AddAndPostPOPrepaymentInvoice@38(VAR PurchaseHeader@1000 : Record 38;PrepaymentPercentage@1002 : Decimal) PrepmtInvNo : Code[20];
    BEGIN
      AddPOPrepayment(PurchaseHeader,PrepaymentPercentage);
      PrepmtInvNo := PostPOPrepaymentInvoice(PurchaseHeader);
    END;

    PROCEDURE AddPOPrepayment@102(VAR PurchaseHeader@1000 : Record 38;PrepaymentPercentage@1001 : Decimal);
    BEGIN
      PurchaseHeader.VALIDATE("Prepayment %",PrepaymentPercentage);
      PurchaseHeader.MODIFY(TRUE);
    END;

    PROCEDURE PostPOPrepaymentInvoice@79(VAR PurchaseHeader@1000 : Record 38) : Code[20];
    VAR
      PurchasePostPrepayments@1001 : Codeunit 444;
    BEGIN
      PurchasePostPrepayments.Invoice(PurchaseHeader);
      EXIT(PurchaseHeader."Last Prepayment No.");
    END;

    PROCEDURE AssignCFPaymentTermToCustomer@73(VAR Customer@1000 : Record 18;PaymentTermsCode@1001 : Code[10]);
    BEGIN
      // An empty payment terms code creates a default payment term code
      Customer.VALIDATE("Cash Flow Payment Terms Code",GetPaymentTermsCode(PaymentTermsCode));
      Customer.MODIFY(TRUE);
    END;

    PROCEDURE AssignPaymentTermToCustomer@4(VAR Customer@1000 : Record 18;PaymentTermsCode@1001 : Code[10]);
    BEGIN
      // An empty payment terms code creates a default payment term code
      Customer.VALIDATE("Payment Terms Code",GetPaymentTermsCode(PaymentTermsCode));
      Customer.MODIFY(TRUE);
    END;

    PROCEDURE AssignCFPaymentTermToVendor@100(VAR Vendor@1000 : Record 23;PaymentTermsCode@1001 : Code[10]);
    BEGIN
      // An empty payment terms code creates a default payment term code
      Vendor.VALIDATE("Cash Flow Payment Terms Code",GetPaymentTermsCode(PaymentTermsCode));
      Vendor.MODIFY(TRUE);
    END;

    PROCEDURE AssignPaymentTermToVendor@5(VAR Vendor@1000 : Record 23;PaymentTermsCode@1001 : Code[10]);
    BEGIN
      // An empty payment terms code creates a default payment term code
      Vendor.VALIDATE("Payment Terms Code",GetPaymentTermsCode(PaymentTermsCode));
      Vendor.MODIFY(TRUE);
    END;

    PROCEDURE ApplyInvoicePayment@36(VAR GenJournalLine@1000 : Record 81;PartnerNo@1001 : Code[20];PartnerAccountType@1005 : Option;InvoiceNoToApply@1003 : Code[20];AmountToApply@1002 : Decimal);
    VAR
      GenJournalBatch@1004 : Record 232;
    BEGIN
      SelectAndClearGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        PartnerAccountType,PartnerNo,AmountToApply);
      // GenJournalLine.VALIDATE("Posting Date",PaymentDate);
      // GenJournalLine.VALIDATE("Document Date",PaymentDate);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",InvoiceNoToApply);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    PROCEDURE CalcDiscAmtFromGenJnlLine@81(GenJnlLine@1000 : Record 81;DiscountPercentage@1001 : Decimal) : Decimal;
    BEGIN
      IF GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor THEN
        GenJnlLine.Amount := -GenJnlLine.Amount;
      EXIT(CalculateDiscountAmount(GenJnlLine.Amount,DiscountPercentage));
    END;

    PROCEDURE CalcCustDiscAmtLCY@82(CustLedgEntry@1002 : Record 21;DiscountPercentage@1001 : Decimal;ExchRateAmount@1000 : Decimal) : Decimal;
    BEGIN
      EXIT(
        ROUND(CalcCustDiscAmt(CustLedgEntry,DiscountPercentage) * ExchRateAmount,LibraryERM.GetAmountRoundingPrecision));
    END;

    PROCEDURE CalcVendDiscAmtLCY@83(VendLedgEntry@1002 : Record 25;DiscountPercentage@1001 : Decimal;ExchRateAmount@1000 : Decimal) : Decimal;
    BEGIN
      EXIT(
        ROUND(CalcVendDiscAmt(VendLedgEntry,DiscountPercentage) * ExchRateAmount,LibraryERM.GetAmountRoundingPrecision));
    END;

    PROCEDURE CalcCustDiscAmt@85(CustLedgEntry@1001 : Record 21;DiscountPercentage@1000 : Decimal) : Decimal;
    BEGIN
      EXIT(
        ROUND(CustLedgEntry.Amount * DiscountPercentage / 100,LibraryERM.GetAmountRoundingPrecision));
    END;

    PROCEDURE CalcVendDiscAmt@87(VendLedgEntry@1001 : Record 25;DiscountPercentage@1000 : Decimal) : Decimal;
    BEGIN
      EXIT(
        ROUND(VendLedgEntry.Amount * DiscountPercentage / 100,LibraryERM.GetAmountRoundingPrecision));
    END;

    PROCEDURE CalcSalesExpectedPrepmtAmounts@88(SalesHeader@1000 : Record 36;DiscountPercentage@1001 : Decimal;VAR ExpectedOrderAmount@1003 : Decimal;VAR ExpectedPrePmtAmount@1002 : Decimal);
    VAR
      TotalOrderAmount@1004 : Decimal;
    BEGIN
      TotalOrderAmount := GetTotalSalesAmount(SalesHeader,FALSE);
      ExpectedPrePmtAmount := ROUND(TotalOrderAmount / 100 * SalesHeader."Prepayment %");
      ExpectedOrderAmount := TotalOrderAmount - ExpectedPrePmtAmount;
      IF DiscountPercentage > 0 THEN BEGIN
        ExpectedOrderAmount -= CalculateDiscountAmount(ExpectedOrderAmount,DiscountPercentage);
        ExpectedPrePmtAmount -= CalculateDiscountAmount(ExpectedPrePmtAmount,DiscountPercentage);
      END;
    END;

    PROCEDURE CalcPurchExpectedPrepmtAmounts@89(PurchaseHeader@1000 : Record 38;DiscountPercentage@1001 : Decimal;VAR ExpectedOrderAmount@1003 : Decimal;VAR ExpectedPrePmtAmount@1002 : Decimal);
    VAR
      TotalOrderAmount@1004 : Decimal;
    BEGIN
      TotalOrderAmount := GetTotalPurchaseAmount(PurchaseHeader,FALSE);
      ExpectedPrePmtAmount := ROUND(TotalOrderAmount / 100 * PurchaseHeader."Prepayment %");
      ExpectedOrderAmount := TotalOrderAmount - ExpectedPrePmtAmount;
      IF DiscountPercentage > 0 THEN BEGIN
        ExpectedOrderAmount -= CalculateDiscountAmount(ExpectedOrderAmount,DiscountPercentage);
        ExpectedPrePmtAmount -= CalculateDiscountAmount(ExpectedPrePmtAmount,DiscountPercentage);
      END;
    END;

    PROCEDURE CalculateDiscountAmount@28(Amount@1000 : Decimal;DiscountPercentage@1001 : Decimal) : Decimal;
    BEGIN
      EXIT(ROUND(Amount / 100 * DiscountPercentage,LibraryERM.GetAmountRoundingPrecision));
    END;

    PROCEDURE ChangeWorkdateByDateFormula@13(BaseDateFormula@1000 : DateFormula;CustomDateFormula@1001 : DateFormula;AdditionalDateFormula@1002 : DateFormula) OldWorkDate : Date;
    BEGIN
      OldWorkDate := ChangeWorkdate(GenerateDateFromFormulas(WORKDATE,BaseDateFormula,AdditionalDateFormula,CustomDateFormula));
    END;

    PROCEDURE ChangeWorkdate@12(NewWorkDate@1000 : Date) OldWorkDate : Date;
    BEGIN
      OldWorkDate := WORKDATE;
      WORKDATE := NewWorkDate;
    END;

    PROCEDURE CreateLedgerEntry@11(VAR GenJournalLine@1000 : Record 81;PartnerNo@1004 : Code[20];Amount@1001 : Decimal;AccountType@1002 : Option;DocumentType@1003 : Option);
    VAR
      GenJournalBatch@1005 : Record 232;
    BEGIN
      SelectAndClearGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        AccountType,PartnerNo,Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    PROCEDURE CreateAndApplySalesInvPayment@2(VAR GenJournalLine@1000 : Record 81;CustomerNo@1004 : Code[20];SalesInvoiceAmount@1001 : Decimal;AmountToApply@1002 : Decimal;DateFormula1@1003 : DateFormula;DateFormula2@1006 : DateFormula;DateFormula3@1007 : DateFormula);
    VAR
      GenJournalBatch@1005 : Record 232;
      PaymentDate@1008 : Date;
    BEGIN
      PaymentDate := GenerateDateFromFormulas(WORKDATE,DateFormula1,DateFormula2,DateFormula3);
      SelectAndClearGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,CustomerNo,SalesInvoiceAmount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Customer,CustomerNo,AmountToApply);
      GenJournalLine.VALIDATE("Posting Date",PaymentDate);
      GenJournalLine.VALIDATE("Document Date",PaymentDate);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",GenJournalLine."Document No.");
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    PROCEDURE CreateAndApplyVendorInvPmt@6(VAR GenJournalLine@1007 : Record 81;VendorNo@1006 : Code[20];InvoiceAmount@1004 : Decimal;AmountToApply@1003 : Decimal;DateFormula1@1002 : DateFormula;DateFormula2@1001 : DateFormula;DateFormula3@1000 : DateFormula);
    VAR
      GenJournalBatch@1005 : Record 232;
      PaymentDate@1008 : Date;
    BEGIN
      PaymentDate := GenerateDateFromFormulas(WORKDATE,DateFormula1,DateFormula2,DateFormula3);
      SelectAndClearGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Vendor,VendorNo,InvoiceAmount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Vendor,VendorNo,AmountToApply);
      GenJournalLine.VALIDATE("Posting Date",PaymentDate);
      GenJournalLine.VALIDATE("Document Date",PaymentDate);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",GenJournalLine."Document No.");
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    PROCEDURE CreateBudgetEntry@49(VAR GLBudgetEntry@1001 : Record 96;BudgetDate@1003 : Date);
    VAR
      GLBudgetName@1000 : Record 95;
      GLAccount@1002 : Record 15;
      CFAccount@1004 : Record 841;
    BEGIN
      LibraryERM.CreateGLBudgetName(GLBudgetName);
      FindCFBudgetAccount(CFAccount);
      FindFirstGLAccFromCFAcc(GLAccount,CFAccount);
      LibraryERM.CreateGLBudgetEntry(GLBudgetEntry,BudgetDate,GLAccount."No.",GLBudgetName.Name);
      GLBudgetEntry.VALIDATE(Amount,LibraryRandom.RandDec(100,2));
      GLBudgetEntry.MODIFY(TRUE);
    END;

    PROCEDURE CreateDefaultPaymentTerms@29(VAR PaymentTerms@1000 : Record 3);
    BEGIN
      LibraryERM.CreatePaymentTerms(PaymentTerms);
      EVALUATE(PaymentTerms."Due Date Calculation",'<0D>');
      EVALUATE(PaymentTerms."Discount Date Calculation",'<0D>');
      PaymentTerms.VALIDATE("Discount %",0);
      PaymentTerms.MODIFY(TRUE);
    END;

    PROCEDURE CreateCustWithCFDsctPmtTerm@17(VAR Customer@1000 : Record 18;VAR PaymentTerms@1001 : Record 3);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      AssignCFPaymentTermToCustomer(Customer,PaymentTerms.Code);
    END;

    PROCEDURE CreateVendorWithCFDsctPmtTerm@22(VAR Vendor@1000 : Record 23;VAR PaymentTerms@1001 : Record 3);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      AssignCFPaymentTermToVendor(Vendor,PaymentTerms.Code);
    END;

    PROCEDURE CreateFixedAssetForInvestment@1(VAR FixedAsset@1000 : Record 5600;DepreciationBookCode@1010 : Code[10];FAPostingDateFormula@1006 : DateFormula;InvestmentAmount@1007 : Decimal);
    VAR
      FADepreciationBook@1001 : Record 5612;
      FAJournalTemplate@1003 : Record 5619;
      FAJournalBatch@1004 : Record 5620;
      FAJournalLine@1005 : Record 5621;
      NoSeries@1008 : Record 308;
      NoSeriesManagement@1009 : Codeunit 396;
    BEGIN
      LibraryFA.CreateFixedAsset(FixedAsset);
      FixedAsset.VALIDATE("Budgeted Asset",TRUE);
      FixedAsset.MODIFY(TRUE);
      LibraryFA.CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",DepreciationBookCode);
      FAJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryFA.FindFAJournalTemplate(FAJournalTemplate);
      LibraryFA.CreateFAJournalBatch(FAJournalBatch,FAJournalTemplate.Name);
      FAJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      FAJournalBatch.MODIFY(TRUE);
      LibraryFA.CreateFAJournalLine(FAJournalLine,FAJournalTemplate.Name,FAJournalBatch.Name);
      FAJournalLine."Document Type" := FAJournalLine."Document Type"::Invoice;
      NoSeries.GET(FAJournalBatch."No. Series");
      FAJournalLine.VALIDATE("Document No.",NoSeriesManagement.GetNextNo(FAJournalBatch."No. Series",WORKDATE,FALSE));
      FAJournalLine.VALIDATE("FA No.",FixedAsset."No.");
      FAJournalLine.VALIDATE("Depreciation Book Code",FADepreciationBook."Depreciation Book Code");
      FAJournalLine.VALIDATE(Amount,InvestmentAmount);
      FAJournalLine.VALIDATE("FA Posting Date",CALCDATE(FAPostingDateFormula,WORKDATE));
      FAJournalLine.MODIFY(TRUE);
      LibraryFA.PostFAJournalLine(FAJournalLine);
    END;

    PROCEDURE CreateFixedAssetForDisposal@3(VAR FixedAsset@1000 : Record 5600;DepreciationBookCode@1007 : Code[10];DepreciationStartDateFormula@1001 : DateFormula;DepreciationEndDateFormula@1002 : DateFormula;DisposalDateFormula@1003 : DateFormula;ExpDisposalAmount@1006 : Decimal);
    VAR
      FADepreciationBook@1004 : Record 5612;
    BEGIN
      LibraryFA.CreateFixedAsset(FixedAsset);
      LibraryFA.CreateFADepreciationBook(FADepreciationBook,FixedAsset."No.",DepreciationBookCode);
      FADepreciationBook."Depreciation Starting Date" := CALCDATE(DepreciationStartDateFormula,WORKDATE);
      FADepreciationBook."Depreciation Ending Date" := CALCDATE(DepreciationEndDateFormula,WORKDATE);
      FADepreciationBook."Projected Disposal Date" := CALCDATE(DisposalDateFormula,WORKDATE);
      FADepreciationBook."Projected Proceeds on Disposal" := ExpDisposalAmount;
      FADepreciationBook.MODIFY(TRUE);
    END;

    PROCEDURE CreateManualPayment@30(VAR CFManualExpense@1000 : Record 850);
    VAR
      CashFlowAccount@1001 : Record 841;
    BEGIN
      LibraryCashFlowForecast.CreateCashFlowAccount(CashFlowAccount,CashFlowAccount."Account Type"::Entry);
      LibraryCashFlowForecast.CreateManualLinePayment(CFManualExpense,CashFlowAccount."No.");

      // HACK - as long as test is running on current NAV6 Liquidity feature, recurring frequency is required
      EVALUATE(CFManualExpense."Recurring Frequency",'<1D>');

      CFManualExpense.VALIDATE(Amount,LibraryRandom.RandInt(500));
      CFManualExpense.MODIFY(TRUE);
    END;

    PROCEDURE CreateManualRevenue@56(VAR CFManualRevenue@1000 : Record 849);
    VAR
      CashFlowAccount@1001 : Record 841;
    BEGIN
      LibraryCashFlowForecast.CreateCashFlowAccount(CashFlowAccount,CashFlowAccount."Account Type"::Entry);
      LibraryCashFlowForecast.CreateManualLineRevenue(CFManualRevenue,CashFlowAccount."No.");

      // HACK - as long as test is running on current NAV6 Liquidity feature, recurring frequency is required
      EVALUATE(CFManualRevenue."Recurring Frequency",'<1D>');

      CFManualRevenue.VALIDATE(Amount,LibraryRandom.RandInt(500));
      CFManualRevenue.MODIFY(TRUE);
    END;

    PROCEDURE CreateRandomDateFormula@8(VAR ResultDateFormula@1000 : DateFormula);
    BEGIN
      EVALUATE(ResultDateFormula,STRSUBSTNO('<%1D>',LibraryRandom.RandInt(5)));
    END;

    PROCEDURE CreateSpecificCashFlowCard@53(VAR CashFlowForecast@1000 : Record 840;ConsiderDiscount@1001 : Boolean;ConsiderPmtTerms@1002 : Boolean);
    BEGIN
      LibraryCashFlowForecast.CreateCashFlowCard(CashFlowForecast);
      CashFlowForecast."Manual Payments To" := CashFlowForecast."Manual Payments From";
      CashFlowForecast.VALIDATE("Consider Discount",ConsiderDiscount);
      CashFlowForecast.VALIDATE("Consider CF Payment Terms",ConsiderPmtTerms);
      CashFlowForecast.MODIFY(TRUE);
    END;

    PROCEDURE CreateCashFlowForecastDefault@99(VAR CashFlowForecast@1001 : Record 840);
    BEGIN
      CreateSpecificCashFlowCard(CashFlowForecast,FALSE,FALSE);
    END;

    PROCEDURE CreateCashFlowForecastConsiderDiscount@59(VAR CashFlowForecast@1001 : Record 840);
    BEGIN
      CreateSpecificCashFlowCard(CashFlowForecast,TRUE,FALSE);
    END;

    PROCEDURE CreateCashFlowForecastConsiderCFPmtTerms@67(VAR CashFlowForecast@1001 : Record 840);
    BEGIN
      CreateSpecificCashFlowCard(CashFlowForecast,FALSE,TRUE);
    END;

    PROCEDURE CreateCashFlowForecastConsiderDiscountAndCFPmtTerms@68(VAR CashFlowForecast@1001 : Record 840);
    BEGIN
      CreateSpecificCashFlowCard(CashFlowForecast,TRUE,TRUE);
    END;

    PROCEDURE CreateSalesOrder@92(VAR SalesHeader@1000 : Record 36;GLAccount@1001 : Record 15;PaymentTermsCode@1007 : Code[10];CFPaymentTermsCode@1002 : Code[10]);
    VAR
      Customer@1004 : Record 18;
    BEGIN
      Customer.GET(
        LibrarySales.CreateCustomerWithBusPostingGroups(
          GLAccount."Gen. Bus. Posting Group",GLAccount."VAT Bus. Posting Group"));
      AssignPaymentTermToCustomer(Customer,PaymentTermsCode);
      AssignCFPaymentTermToCustomer(Customer,CFPaymentTermsCode);

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");

      CreateSalesLine(SalesHeader,GLAccount);
      CreateSalesLine(SalesHeader,GLAccount);
      CreateSalesLine(SalesHeader,GLAccount);
    END;

    PROCEDURE CreateSpecificSalesOrder@31(VAR SalesHeader@1000 : Record 36;PaymentTermsCode@1007 : Code[10];CFPaymentTermsCode@1002 : Code[10]);
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      GLAccount.GET(LibraryERM.CreateGLAccountWithSalesSetup);
      CreateSalesOrder(SalesHeader,GLAccount,PaymentTermsCode,CFPaymentTermsCode);
    END;

    PROCEDURE CreateDefaultSalesOrder@62(VAR SalesHeader@1000 : Record 36);
    BEGIN
      CreateSpecificSalesOrder(SalesHeader,'','');
    END;

    PROCEDURE CreatePrepmtSalesOrder@90(VAR SalesHeader@1000 : Record 36;PaymentTermsCode@1004 : Code[10];CFPaymentTermsCode@1003 : Code[10]);
    VAR
      GLAccount@1001 : Record 15;
      VATPostingSetup@1002 : Record 325;
    BEGIN
      LibrarySales.CreatePrepaymentVATSetup(GLAccount,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      CreateSalesOrder(SalesHeader,GLAccount,PaymentTermsCode,CFPaymentTermsCode);
    END;

    PROCEDURE CreateSalesLine@57(SalesHeader@1001 : Record 36;GLAccount@1000 : Record 15);
    VAR
      SalesLine@1002 : Record 37;
      VATPostingSetup@1003 : Record 325;
      GLAccountNo@1004 : Code[20];
    BEGIN
      GLAccountNo := GLAccount."No.";
      IF GLAccountNo = '' THEN BEGIN
        VATPostingSetup.SETRANGE("VAT Bus. Posting Group",SalesHeader."VAT Bus. Posting Group");
        VATPostingSetup.SETFILTER("VAT Calculation Type",'<>%1',VATPostingSetup."VAT Calculation Type"::"Full VAT");
        VATPostingSetup.FINDFIRST;
        GLAccountNo := LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,GLAccount."Gen. Posting Type"::Purchase);
      END;
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",GLAccountNo,LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandInt(100));
      SalesLine.MODIFY(TRUE);
    END;

    PROCEDURE CreatePurchaseOrder@94(VAR PurchaseHeader@1000 : Record 38;GLAccount@1001 : Record 15;PaymentTermsCode@1007 : Code[10];CFPaymentTermsCode@1002 : Code[10]);
    VAR
      Vendor@1004 : Record 23;
    BEGIN
      Vendor.GET(
        LibraryPurchase.CreateVendorWithBusPostingGroups(
          GLAccount."Gen. Bus. Posting Group",GLAccount."VAT Bus. Posting Group"));
      AssignPaymentTermToVendor(Vendor,PaymentTermsCode);
      AssignCFPaymentTermToVendor(Vendor,CFPaymentTermsCode);

      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");

      CreatePurchaseLine(PurchaseHeader,GLAccount);
      CreatePurchaseLine(PurchaseHeader,GLAccount);
      CreatePurchaseLine(PurchaseHeader,GLAccount);
    END;

    PROCEDURE CreateSpecificPurchaseOrder@32(VAR PurchaseHeader@1000 : Record 38;PaymentTermsCode@1007 : Code[10];CFPaymentTermsCode@1002 : Code[10]);
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      GLAccount.GET(LibraryERM.CreateGLAccountWithPurchSetup);
      CreatePurchaseOrder(PurchaseHeader,GLAccount,PaymentTermsCode,CFPaymentTermsCode);
    END;

    PROCEDURE CreateDefaultPurchaseOrder@65(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      CreateSpecificPurchaseOrder(PurchaseHeader,'','');
    END;

    PROCEDURE CreatePrepmtPurchaseOrder@91(VAR PurchaseHeader@1000 : Record 38;PaymentTermsCode@1004 : Code[10];CFPaymentTermsCode@1003 : Code[10]);
    VAR
      GLAccount@1001 : Record 15;
      VATPostingSetup@1002 : Record 325;
    BEGIN
      LibraryPurchase.CreatePrepaymentVATSetup(GLAccount,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      CreatePurchaseOrder(PurchaseHeader,GLAccount,PaymentTermsCode,CFPaymentTermsCode);
    END;

    PROCEDURE CreatePurchaseLine@58(PurchaseHeader@1002 : Record 38;GLAccount@1000 : Record 15);
    VAR
      PurchaseLine@1001 : Record 39;
      VATPostingSetup@1004 : Record 325;
      GLAccountNo@1003 : Code[20];
    BEGIN
      GLAccountNo := GLAccount."No.";
      IF GLAccountNo = '' THEN BEGIN
        VATPostingSetup.SETRANGE("VAT Bus. Posting Group",PurchaseHeader."VAT Bus. Posting Group");
        VATPostingSetup.SETFILTER("VAT Calculation Type",'<>%1',VATPostingSetup."VAT Calculation Type"::"Full VAT");
        VATPostingSetup.FINDFIRST;
        GLAccountNo := LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,GLAccount."Gen. Posting Type"::Purchase);
      END;
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",GLAccountNo,LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(100));
      PurchaseLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateSpecificServiceOrder@33(VAR ServiceHeader@1000 : Record 5900;PaymentTermsCode@1007 : Code[10];CFPaymentTermsCode@1001 : Code[10]);
    VAR
      Customer@1002 : Record 18;
      LibraryService@1009 : Codeunit 131902;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      AssignCFPaymentTermToCustomer(Customer,PaymentTermsCode);
      AssignCFPaymentTermToCustomer(Customer,CFPaymentTermsCode);

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");

      CreateServiceLines(ServiceHeader);
      CreateServiceLines(ServiceHeader);
      CreateServiceLines(ServiceHeader);
    END;

    PROCEDURE CreateDefaultServiceOrder@66(VAR ServiceHeader@1000 : Record 5900);
    BEGIN
      CreateSpecificServiceOrder(ServiceHeader,'','');
    END;

    PROCEDURE CreateServiceLines@63(ServiceHeader@1004 : Record 5900);
    VAR
      ServiceLine@1002 : Record 5902;
      ServiceItemLine@1001 : Record 5901;
      Item@1000 : Record 27;
      LibraryService@1003 : Codeunit 131902;
    BEGIN
      // simple wrapper for LibraryPurchase.CreateServiceLine
      LibrarySales.FindItem(Item);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.VALIDATE(Quantity,LibraryRandom.RandInt(50));
      ServiceLine.MODIFY(TRUE);
    END;

    PROCEDURE CreatePrepaymentAccount@27(GeneralPostingSetup@1000 : Record 252;VATBusPostingGroup@1001 : Code[10];VATProdPostingGroup@1003 : Code[10]) : Code[20];
    VAR
      GLAccount@1002 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.VALIDATE("VAT Bus. Posting Group",VATBusPostingGroup);
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    PROCEDURE FillJournal@44(ConsiderSource@1012 : ARRAY [11] OF Boolean;CFNo@1001 : Code[20];GroupByDocumentType@1000 : Boolean);
    BEGIN
      LibraryCashFlowForecast.ClearJournal;
      LibraryCashFlowForecast.FillJournal(ConsiderSource,CFNo,GroupByDocumentType);
    END;

    PROCEDURE FillJnlOnCertDateFormulas@14(ConsiderSource@1015 : ARRAY [11] OF Boolean;CFNo@1000 : Code[20];BaseDateFormula@1012 : DateFormula;CustomDateFormula@1013 : DateFormula;AdditionalDateFormula@1014 : DateFormula);
    VAR
      ForecastDate@1016 : Date;
    BEGIN
      ForecastDate := GenerateDateFromFormulas(WORKDATE,BaseDateFormula,AdditionalDateFormula,CustomDateFormula);
      FillJournalOnCertainDate(ConsiderSource,CFNo,ForecastDate);
    END;

    PROCEDURE FillJournalOnCertainDate@19(ConsiderSource@1013 : ARRAY [11] OF Boolean;CFNo@1000 : Code[20];ForecastDate@1012 : Date);
    VAR
      OldWorkDate@1015 : Date;
    BEGIN
      OldWorkDate := ChangeWorkdate(ForecastDate);
      FillJournal(ConsiderSource,CFNo,FALSE);
      WORKDATE := OldWorkDate;
    END;

    PROCEDURE FilterSingleJournalLine@43(VAR CFWorksheetLine@1000 : Record 846;DocumentNo@1001 : Code[20];SourceType@1003 : Option;CashFlowNo@1002 : Code[20]) : Integer;
    BEGIN
      // Filters cash flow journal lines based on the given parameters
      // Returns the number of lines found based on the filter

      CFWorksheetLine.SETRANGE("Cash Flow Forecast No.",CashFlowNo);
      CFWorksheetLine.SETRANGE("Document No.",DocumentNo);
      CFWorksheetLine.SETRANGE("Source Type",SourceType);
      IF CFWorksheetLine.FINDFIRST THEN;
      EXIT(CFWorksheetLine.COUNT);
    END;

    PROCEDURE FindCFLiquidFundAccount@41(VAR CFAccount@1000 : Record 841);
    BEGIN
      FindFirstCFAccWithGLIntegration(CFAccount,CFAccount."G/L Integration"::Balance);
    END;

    PROCEDURE FindCFBudgetAccount@51(VAR CFAccount@1000 : Record 841);
    BEGIN
      FindFirstCFAccWithGLIntegration(CFAccount,CFAccount."G/L Integration"::Budget);
    END;

    LOCAL PROCEDURE FindFirstCFAccWithGLIntegration@55(VAR CFAccount@1000 : Record 841;GLIntegration@1001 : Option);
    BEGIN
      CFAccount.SETFILTER("G/L Integration",'%1|%2',GLIntegration,CFAccount."G/L Integration"::Both);
      CFAccount.SETFILTER("G/L Account Filter",'<>%1','');
      CFAccount.FINDFIRST;
    END;

    PROCEDURE FindFirstGLAccFromCFAcc@54(VAR GLAccount@1000 : Record 15;CFAccount@1001 : Record 841);
    BEGIN
      GLAccount.SETFILTER("No.",CFAccount."G/L Account Filter");
      GLAccount.FINDFIRST;
    END;

    PROCEDURE FindFirstCustLEFromSO@80(VAR CustLedgerEntry@1000 : Record 21;SalesOrderNo@1002 : Code[20]);
    VAR
      SalesInvoiceHeader@1001 : Record 112;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Order No.",SalesOrderNo);
      SalesInvoiceHeader.FINDFIRST;
      CustLedgerEntry.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      CustLedgerEntry.FINDFIRST;
    END;

    PROCEDURE FindFirstVendorLEFromPO@42(VAR VendorLedgerEntry@1000 : Record 25;PurchaseOrderNo@1002 : Code[20]);
    VAR
      PurchInvHeader@1001 : Record 122;
    BEGIN
      PurchInvHeader.SETRANGE("Order No.",PurchaseOrderNo);
      PurchInvHeader.FINDFIRST;
      VendorLedgerEntry.SETRANGE("Document No.",PurchInvHeader."No.");
      VendorLedgerEntry.FINDFIRST;
    END;

    PROCEDURE FindCustomerCFPaymentTerms@61(VAR PaymentTerms@1001 : Record 3;CustomerNo@1000 : Code[20]);
    VAR
      Customer@1002 : Record 18;
    BEGIN
      Customer.GET(CustomerNo);
      PaymentTerms.GET(Customer."Cash Flow Payment Terms Code");
    END;

    PROCEDURE FindSalesLine@26(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDSET;
    END;

    PROCEDURE FindPurchaseLine@40(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDSET;
    END;

    PROCEDURE GenerateDateFromFormulaArray@16(BaseDate@1002 : Date;DateFormulas@1005 : ARRAY [3] OF DateFormula) : Date;
    VAR
      TempDate@1000 : Date;
      I@1001 : Integer;
    BEGIN
      TempDate := BaseDate;
      FOR I := 1 TO ARRAYLEN(DateFormulas) DO
        TempDate := CALCDATE(DateFormulas[I],TempDate);
      EXIT(TempDate);
    END;

    PROCEDURE GenerateDateFromFormulas@20(BaseDate@1002 : Date;DateFormula1@1005 : DateFormula;DateFormula2@1003 : DateFormula;DateFormula3@1004 : DateFormula) : Date;
    VAR
      TempDate@1000 : Date;
    BEGIN
      TempDate := BaseDate;
      TempDate := CALCDATE(DateFormula1,TempDate);
      TempDate := CALCDATE(DateFormula2,TempDate);
      TempDate := CALCDATE(DateFormula3,TempDate);
      EXIT(TempDate);
    END;

    PROCEDURE GetDifferentDsctPaymentTerms@37(VAR PaymentTerms@1000 : Record 3;PmtTermsCodeToDifferFrom@1001 : Code[20]);
    VAR
      PaymentTerms2@1002 : Record 3;
    BEGIN
      PaymentTerms2.GET(PmtTermsCodeToDifferFrom);
      LibraryERM.CreatePaymentTerms(PaymentTerms);
      EVALUATE(PaymentTerms."Due Date Calculation",FORMAT(PaymentTerms2."Due Date Calculation") + '+<1M>');
      EVALUATE(PaymentTerms."Discount Date Calculation",FORMAT(PaymentTerms2."Discount Date Calculation") + '+<1D>');
      PaymentTerms.VALIDATE("Discount %",PaymentTerms2."Discount %" + 1);
      PaymentTerms.MODIFY(TRUE);
    END;

    PROCEDURE GetTotalSalesAmount@45(SalesHeader@1000 : Record 36;ConsiderDefaultPmtDiscount@1004 : Boolean) : Decimal;
    VAR
      SalesLine@1001 : Record 37;
      TotalAmount@1002 : Decimal;
      TotalDiscountAmount@1003 : Decimal;
      LineAmount@1005 : Decimal;
    BEGIN
      TotalAmount := 0;
      TotalDiscountAmount := 0;
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.FINDSET;
      REPEAT
        LineAmount := SalesLine."Outstanding Amount (LCY)";
        TotalAmount += LineAmount;
        IF ConsiderDefaultPmtDiscount THEN
          TotalDiscountAmount +=
            CalculateDiscountAmount(LineAmount,SalesHeader."Payment Discount %");
      UNTIL SalesLine.NEXT = 0;
      EXIT(TotalAmount - TotalDiscountAmount);
    END;

    PROCEDURE GetTotalPurchaseAmount@84(PurchaseHeader@1000 : Record 38;ConsiderDefaultPmtDiscount@1004 : Boolean) : Decimal;
    VAR
      PurchaseLine@1001 : Record 39;
      TotalAmount@1002 : Decimal;
      TotalDiscountAmount@1003 : Decimal;
      LineAmount@1005 : Decimal;
    BEGIN
      TotalAmount := 0;
      TotalDiscountAmount := 0;
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.FINDSET;
      REPEAT
        LineAmount := PurchaseLine."Outstanding Amount (LCY)";
        TotalAmount += LineAmount;
        IF ConsiderDefaultPmtDiscount THEN
          TotalDiscountAmount += CalculateDiscountAmount(LineAmount,PurchaseHeader."Payment Discount %");
      UNTIL PurchaseLine.NEXT = 0;
      EXIT(TotalAmount - TotalDiscountAmount);
    END;

    PROCEDURE GetTotalServiceAmount@145(ServiceHeader@1000 : Record 5900;ConsiderDefaultPmtDiscount@1004 : Boolean) : Decimal;
    VAR
      ServiceLine@1001 : Record 5902;
      TotalAmount@1002 : Decimal;
      TotalDiscountAmount@1003 : Decimal;
      LineAmount@1005 : Decimal;
    BEGIN
      TotalAmount := 0;
      TotalDiscountAmount := 0;
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.FINDSET;
      REPEAT
        LineAmount := ServiceLine."Outstanding Amount (LCY)";
        TotalAmount += LineAmount;
        IF ConsiderDefaultPmtDiscount THEN
          TotalDiscountAmount +=
            CalculateDiscountAmount(LineAmount,ServiceHeader."Payment Discount %");
      UNTIL ServiceLine.NEXT = 0;

      EXIT(TotalAmount - TotalDiscountAmount);
    END;

    PROCEDURE GetTotalAmountForSalesOrderWithCashFlowPaymentTermsDiscount@111(SalesHeader@1000 : Record 36) : Decimal;
    VAR
      SalesLine@1003 : Record 37;
      Customer@1004 : Record 18;
      PaymentTermsCashFlow@1005 : Record 3;
      TotalAmount@1002 : Decimal;
      TotalDiscountAmount@1001 : Decimal;
      LineAmount@1007 : Decimal;
    BEGIN
      Customer.GET(SalesHeader."Sell-to Customer No.");
      PaymentTermsCashFlow.GET(Customer."Cash Flow Payment Terms Code");
      TotalAmount := 0;
      TotalDiscountAmount := 0;
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      IF SalesLine.FINDSET THEN BEGIN
        REPEAT
          LineAmount := SalesLine."Outstanding Amount (LCY)";
          TotalAmount += LineAmount;
          TotalDiscountAmount += CalculateDiscountAmount(LineAmount,PaymentTermsCashFlow."Discount %");
        UNTIL SalesLine.NEXT = 0;
      END;
      EXIT(TotalAmount - TotalDiscountAmount);
    END;

    PROCEDURE GetTotalAmountForPurchaseOrderWithCashFlowPaymentTermsDiscount@107(PurchaseHeader@1000 : Record 38) : Decimal;
    VAR
      PurchaseLine@1007 : Record 39;
      Vendor@1006 : Record 23;
      PaymentTermsCashFlow@1005 : Record 3;
      TotalAmount@1004 : Decimal;
      TotalDiscountAmount@1003 : Decimal;
      LineAmount@1001 : Decimal;
    BEGIN
      Vendor.GET(PurchaseHeader."Buy-from Vendor No.");
      PaymentTermsCashFlow.GET(Vendor."Cash Flow Payment Terms Code");
      TotalAmount := 0;
      TotalDiscountAmount := 0;
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      IF PurchaseLine.FINDSET THEN BEGIN
        REPEAT
          LineAmount := PurchaseLine."Outstanding Amount (LCY)";
          TotalAmount += LineAmount;
          TotalDiscountAmount += CalculateDiscountAmount(LineAmount,PaymentTermsCashFlow."Discount %");
        UNTIL PurchaseLine.NEXT = 0;
      END;
      EXIT(TotalAmount - TotalDiscountAmount);
    END;

    PROCEDURE GetTotalAmountForServiceOrderWithCashFlowPaymentTermsDiscount@103(ServiceHeader@1000 : Record 5900) : Decimal;
    VAR
      ServiceLine@1004 : Record 5902;
      Customer@1003 : Record 18;
      PaymentTermsCashFlow@1002 : Record 3;
      TotalAmount@1007 : Decimal;
      TotalDiscountAmount@1001 : Decimal;
      LineAmount@1006 : Decimal;
    BEGIN
      Customer.GET(ServiceHeader."Bill-to Customer No.");
      PaymentTermsCashFlow.GET(Customer."Cash Flow Payment Terms Code");
      TotalAmount := 0;
      TotalDiscountAmount := 0;
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      IF ServiceLine.FINDSET THEN BEGIN
        REPEAT
          LineAmount := ServiceLine."Outstanding Amount (LCY)";
          TotalAmount += LineAmount;
          TotalDiscountAmount += CalculateDiscountAmount(LineAmount,PaymentTermsCashFlow."Discount %");
        UNTIL ServiceLine.NEXT = 0;
      END;
      EXIT(TotalAmount - TotalDiscountAmount);
    END;

    LOCAL PROCEDURE GetPaymentTermsCode@48(PaymentTermsCode@1000 : Code[20]) : Code[20];
    VAR
      PaymentTerms@1001 : Record 3;
    BEGIN
      // An empty payment terms code creates a default payment term code
      IF PaymentTermsCode = '' THEN BEGIN
        CreateDefaultPaymentTerms(PaymentTerms); // no due, no discount
        EXIT(PaymentTerms.Code);
      END;
      EXIT(PaymentTermsCode);
    END;

    LOCAL PROCEDURE GetCFAccountNo@86(SourceType@1000 : Option) : Code[20];
    VAR
      CFAccount@1001 : Record 841;
    BEGIN
      CFAccount.SETRANGE("Account Type",CFAccount."Account Type"::Entry);
      CFAccount.FINDSET;
      CFAccount.NEXT(SourceType);
      EXIT(CFAccount."No.");
    END;

    PROCEDURE InsertCFLedgerEntry@69(CFNo@1002 : Code[20];AccountNo@1006 : Code[20];SourceType@1003 : Integer;CFDate@1004 : Date;Amount@1005 : Decimal);
    VAR
      CFForecastEntry@1000 : Record 847;
      EntryNo@1001 : Integer;
    BEGIN
      WITH CFForecastEntry DO BEGIN
        IF FINDLAST THEN
          EntryNo := "Entry No.";

        INIT;
        "Entry No." := EntryNo + 1;
        "Cash Flow Forecast No." := CFNo;
        "Source Type" := SourceType;
        IF AccountNo <> '' THEN
          "Cash Flow Account No." := AccountNo
        ELSE
          "Cash Flow Account No." := GetCFAccountNo(SourceType);
        "Cash Flow Date" := CFDate;
        VALIDATE("Amount (LCY)",Amount);
        INSERT;
      END;
    END;

    PROCEDURE SelectAndClearGenJournalBatch@46(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch)
    END;

    PROCEDURE SetExpectedDsctAPmtTermValues@47(DocType@1004 : Option;DocumentNo@1008 : Code[20];PartnerNo@1009 : Code[20];CFSourceDate@1010 : Date;ConsiderDsctAndCFPmtTerms@1003 : Boolean;VAR ExpectedCFDate@1001 : Date;VAR ExpectedAmount@1000 : Decimal);
    VAR
      PaymentTerms@1006 : Record 3;
      Vendor@1005 : Record 23;
      SalesHeader@1012 : Record 36;
      PurchaseHeader@1013 : Record 38;
      ServiceHeader@1014 : Record 5900;
      TotalAmount@1007 : Decimal;
    BEGIN
      CASE DocType OF
        DocumentType::Sale:
          BEGIN
            SalesHeader.GET(SalesHeader."Document Type"::Order,DocumentNo);
            FindCustomerCFPaymentTerms(PaymentTerms,PartnerNo);
            TotalAmount := GetTotalSalesAmount(SalesHeader,FALSE);
          END;
        DocumentType::Service:
          BEGIN
            ServiceHeader.GET(ServiceHeader."Document Type"::Order,DocumentNo);
            FindCustomerCFPaymentTerms(PaymentTerms,PartnerNo);
            TotalAmount := GetTotalServiceAmount(ServiceHeader,FALSE);
          END;
        DocumentType::Purchase:
          BEGIN
            Vendor.GET(PartnerNo);
            PaymentTerms.GET(Vendor."Cash Flow Payment Terms Code");
            PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,DocumentNo);
            TotalAmount := GetTotalPurchaseAmount(PurchaseHeader,FALSE);
          END;
        ELSE
          ERROR(UnhandledDocumentType);
      END;

      IF ConsiderDsctAndCFPmtTerms THEN BEGIN
        ExpectedCFDate := CALCDATE(PaymentTerms."Discount Date Calculation",CFSourceDate);
        ExpectedAmount := TotalAmount - CalculateDiscountAmount(TotalAmount,PaymentTerms."Discount %");
      END ELSE BEGIN
        ExpectedCFDate := CALCDATE(PaymentTerms."Due Date Calculation",CFSourceDate);
        ExpectedAmount := TotalAmount;
      END;

      IF DocType = DocumentType::Purchase THEN
        ExpectedAmount *= -1;
    END;

    PROCEDURE SetDefaultDepreciationBook@23(DepreciationBookCode@1000 : Code[10]);
    VAR
      FASetup@1001 : Record 5603;
    BEGIN
      FASetup.GET;

      FASetup.VALIDATE("Default Depr. Book",DepreciationBookCode);
      FASetup.MODIFY(TRUE);
    END;

    PROCEDURE SetPmtToleranceOptionsOnCashFlowForecast@60(VAR CashFlowForecast@1000 : Record 840;ConsiderPmtDiscTolDate@1001 : Boolean;ConsiderPmtTolAmount@1002 : Boolean);
    BEGIN
      CashFlowForecast.VALIDATE("Consider Pmt. Disc. Tol. Date",ConsiderPmtDiscTolDate);
      CashFlowForecast.VALIDATE("Consider Pmt. Tol. Amount",ConsiderPmtTolAmount);
      CashFlowForecast.MODIFY(TRUE);
    END;

    PROCEDURE SetupPmtDsctGracePeriod@64(NewDscGracePeriodFormula@1002 : DateFormula);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.VALIDATE("Payment Discount Grace Period",NewDscGracePeriodFormula);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    PROCEDURE SetupPmtTolPercentage@9(NewPmtTolPercentage@1003 : Decimal);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.VALIDATE("Payment Tolerance %",NewPmtTolPercentage);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    PROCEDURE SetupPmtTolAmount@10(NewPmtTolAmount@1004 : Decimal);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.VALIDATE("Max. Payment Tolerance Amount",NewPmtTolAmount);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    PROCEDURE SetupCustomerPmtTolAmtTestCase@71(VAR CashFlowForecast@1000 : Record 840;VAR Customer@1002 : Record 18;VAR Amount@1003 : Decimal;PmtTolAmtPercentMultiplier@1004 : Decimal;PmtTolPercentage@1005 : Decimal);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      SetupPmtTolAmtTestCase(CashFlowForecast,Amount,PmtTolAmtPercentMultiplier,PmtTolPercentage);
    END;

    PROCEDURE SetupVendorPmtTolAmtTestCase@18(VAR CashFlowForecast@1000 : Record 840;VAR Vendor@1002 : Record 23;VAR Amount@1003 : Decimal;PmtTolAmtPercentMultiplier@1004 : Decimal;PmtTolPercentage@1005 : Decimal);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      SetupPmtTolAmtTestCase(CashFlowForecast,Amount,PmtTolAmtPercentMultiplier,PmtTolPercentage);
    END;

    LOCAL PROCEDURE SetupPmtTolAmtTestCase@24(VAR CashFlowForecast@1000 : Record 840;VAR Amount@1003 : Decimal;PmtTolAmtPercentMultiplier@1004 : Decimal;PmtTolPercentage@1005 : Decimal);
    BEGIN
      CreateCashFlowForecastDefault(CashFlowForecast);
      SetPmtToleranceOptionsOnCashFlowForecast(CashFlowForecast,FALSE,TRUE);
      Amount := LibraryRandom.RandInt(2000);
      SetupPmtTolPercentage(PmtTolPercentage);
      SetupPmtTolAmount(ROUND(Amount * PmtTolAmtPercentMultiplier));
    END;

    PROCEDURE SetupPmtDsctTolCustLETest@76(VAR CashFlowForecast@1000 : Record 840;VAR Customer@1001 : Record 18;VAR PaymentTerms@1003 : Record 3;NewPmtDiscountGracePeriod@1002 : DateFormula;VAR Amount@1005 : Decimal;VAR DiscountedAmount@1006 : Decimal);
    BEGIN
      CreateCashFlowForecastConsiderDiscountAndCFPmtTerms(CashFlowForecast);
      SetPmtToleranceOptionsOnCashFlowForecast(CashFlowForecast,TRUE,FALSE);
      SetupPmtDsctGracePeriod(NewPmtDiscountGracePeriod);
      CreateCustWithCFDsctPmtTerm(Customer,PaymentTerms);
      Amount := LibraryRandom.RandDec(2000,2);
      DiscountedAmount := Amount - CalculateDiscountAmount(Amount,PaymentTerms."Discount %");
    END;

    PROCEDURE SetupPmtDsctTolVendorLETest@21(VAR CashFlowForecast@1000 : Record 840;VAR Vendor@1001 : Record 23;VAR PaymentTerms@1003 : Record 3;NewPmtDiscountGracePeriod@1002 : DateFormula;VAR Amount@1005 : Decimal;VAR DiscountedAmount@1006 : Decimal);
    BEGIN
      CreateCashFlowForecastConsiderDiscountAndCFPmtTerms(CashFlowForecast);
      SetPmtToleranceOptionsOnCashFlowForecast(CashFlowForecast,TRUE,FALSE);
      SetupPmtDsctGracePeriod(NewPmtDiscountGracePeriod);
      CreateVendorWithCFDsctPmtTerm(Vendor,PaymentTerms);
      Amount := LibraryRandom.RandDec(2000,2);
      DiscountedAmount := Amount - CalculateDiscountAmount(Amount,PaymentTerms."Discount %");
    END;

    PROCEDURE SetupDsctPmtTermsCustLETest@15(VAR CashFlowForecast@1006 : Record 840;VAR Customer@1005 : Record 18;VAR PaymentTerms@1003 : Record 3;VAR Amount@1001 : Decimal;VAR DiscountedAmount@1000 : Decimal);
    BEGIN
      CreateCashFlowForecastConsiderDiscountAndCFPmtTerms(CashFlowForecast);
      CreateCustWithCFDsctPmtTerm(Customer,PaymentTerms);
      Amount := LibraryRandom.RandDec(2000,2);
      DiscountedAmount := Amount - CalculateDiscountAmount(Amount,PaymentTerms."Discount %");
    END;

    PROCEDURE VerifyCFDateOnCFJnlLine@7(CFWorksheetLine@1002 : Record 846;ExpectedCFDate@1000 : Date);
    BEGIN
      Assert.AreEqual(ExpectedCFDate,CFWorksheetLine."Cash Flow Date",STRSUBSTNO(UnexpectedCFDate,CFWorksheetLine."Document No."));
    END;

    PROCEDURE VerifyExpectedCFAmount@50(ExpectedAmount@1000 : Decimal;ActualAmount@1001 : Decimal);
    BEGIN
      Assert.AreEqual(ExpectedAmount,ActualAmount,UnexpectedCFAmount);
    END;

    PROCEDURE VerifyExpectedCFAmtNearlyEqual@52(ExpectedAmount@1001 : Decimal;ActualAmount@1000 : Decimal;Delta@1002 : Decimal);
    BEGIN
      Assert.AreNearlyEqual(ExpectedAmount,ActualAmount,Delta,UnexpectedCFAmount);
    END;

    PROCEDURE VerifyCFDataOnSnglJnlLine@112(VAR CFWorksheetLine@1004 : Record 846;DocumentNo@1003 : Code[20];SourceType@1005 : Option;CFNo@1002 : Code[20];ExpectedCFAmount@1001 : Decimal;ExpectedCFDate@1000 : Date);
    BEGIN
      FilterSingleJournalLine(CFWorksheetLine,DocumentNo,SourceType,CFNo);
      CFWorksheetLine.CALCSUMS("Amount (LCY)");
      VerifyExpectedCFAmtNearlyEqual(ExpectedCFAmount,CFWorksheetLine."Amount (LCY)",LibraryERM.GetAmountRoundingPrecision);
      VerifyCFDateOnCFJnlLine(CFWorksheetLine,ExpectedCFDate);
    END;

    PROCEDURE UpdateDueDateOnCustomerLedgerEntry@34(VAR CustLedgerEntry@1000 : Record 21);
    BEGIN
      CustLedgerEntry.VALIDATE("Due Date",GetAnyDateAfter(CustLedgerEntry."Due Date"));
      CustLedgerEntry.MODIFY(TRUE);
    END;

    PROCEDURE UpdatePmtDiscountDateOnCustomerLedgerEntry@70(VAR CustLedgerEntry@1000 : Record 21);
    BEGIN
      CustLedgerEntry.VALIDATE("Pmt. Discount Date",GetAnyDateAfter(CustLedgerEntry."Pmt. Discount Date"));
      CustLedgerEntry.MODIFY(TRUE);
    END;

    PROCEDURE UpdateDueDateOnVendorLedgerEntry@72(VAR VendorLedgerEntry@1000 : Record 25);
    BEGIN
      VendorLedgerEntry.VALIDATE("Due Date",GetAnyDateAfter(VendorLedgerEntry."Due Date"));
      VendorLedgerEntry.MODIFY(TRUE);
    END;

    PROCEDURE UpdatePmtDiscountDateOnVendorLedgerEntry@74(VAR VendorLedgerEntry@1000 : Record 25);
    BEGIN
      VendorLedgerEntry.VALIDATE("Pmt. Discount Date",GetAnyDateAfter(VendorLedgerEntry."Pmt. Discount Date"));
      VendorLedgerEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetAnyDateAfter@75(ReferenceDate@1000 : Date) : Date;
    VAR
      DateDelta@1001 : DateFormula;
    BEGIN
      EVALUATE(DateDelta,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      EXIT(CALCDATE(DateDelta,ReferenceDate));
    END;

    BEGIN
    {
      Feature:  Cash Flow
      Area:     Filling Cash Flow Journal
                Provides helper functions for codeunits in this area.
    }
    END.
  }
}

