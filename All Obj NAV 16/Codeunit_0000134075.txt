OBJECT Codeunit 134075 ERM Change Exchange Rate
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryERM@1005 : Codeunit 131300;
      LibraryRandom@1002 : Codeunit 130440;
      IsInitialized@1000 : Boolean;
      AmountError@1001 : TextConst 'ENU=%1 must be calculated correctly on %2.';

    [Test]
    PROCEDURE CurrencyFactorOnGenJournalLine@2();
    BEGIN
      // Covers Document TFS_TC_ID = 8866, 8867, 11723, 8870, 8878, 8879, 8882, 8883.

      // Test to Create Currency and Verify the Currency Factor on General Journal Line.
      CurrencyFactorAndAmountLCY(FALSE);
    END;

    [Test]
    PROCEDURE UpdateLCYOnGenJournalLine@13();
    BEGIN
      // Covers Document TFS_TC_ID = 8866, 8867, 11723, 8869, 8870, 8878, 8879, 8881, 8882, 8883.

      // Test to Create Currency and Verify the AmountLCY on General Journal Line after changing Relational Currency's Exchange Rates.
      CurrencyFactorAndAmountLCY(TRUE);
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CurrencyFactorAndAmountLCY@15(UpdateExchangeRate@1004 : Boolean);
    VAR
      Customer@1002 : Record 18;
      TempGenJournalLine@1001 : TEMPORARY Record 81;
      RelationalCurrencyCode@1000 : Code[10];
    BEGIN
      // Setup: Create a Customer and attach a newly created Currency on it. Create another Currency and attach it on previous Currency
      // as Relational Currency.
      Initialize;
      CreateCustomer(Customer);
      RelationalCurrencyCode := UpdateRelationalCurrency(Customer."Currency Code");

      // Exercise: Create General Journal Line. Update the Exchange Rates, Update the Currency Factor on Journal Line.
      CreateGeneralJournalLine(TempGenJournalLine,Customer."No.");
      IF UpdateExchangeRate THEN BEGIN
        UpdateRelationalExchangeRate(RelationalCurrencyCode);
        TempGenJournalLine.VALIDATE("Currency Factor",CalculateCurrencyFactor(Customer."Currency Code"));
        TempGenJournalLine.MODIFY(TRUE);
      END;

      // Verify: Verify Currency Factor and Amount (LCY) on Journal Line as per the option selected.
      IF UpdateExchangeRate THEN
        VerifyAmountLCY(TempGenJournalLine)
      ELSE
        Assert.AreEqual(CalculateCurrencyFactor(Customer."Currency Code"),TempGenJournalLine."Currency Factor",
          STRSUBSTNO(AmountError,TempGenJournalLine.FIELDCAPTION("Currency Factor"),TempGenJournalLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE CreateCustomer@5(VAR Customer@1000 : Record 18);
    VAR
      LibrarySales@1001 : Codeunit 130509;
    BEGIN
      // Create a New Customer, Create and update a new Currency on it.
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",LibraryERM.CreateCurrencyWithRandomExchRates);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@17(VAR TempGenJournalLine@1001 : TEMPORARY Record 81;CustomerNo@1005 : Code[20]);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);

      // Create Journal Lines of Payment Type using the selected Journal Batch, Customer with a Random Amount.
      LibraryERM.CreateGeneralJnlLine(
        TempGenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,TempGenJournalLine."Document Type"::Payment,
        TempGenJournalLine."Account Type"::Customer,CustomerNo,LibraryRandom.RandInt(100));
    END;

    LOCAL PROCEDURE UpdateRelationalCurrency@10(CurrencyCode@1001 : Code[10]) : Code[10];
    VAR
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      // Create a Relational Currency for Currency and update Fix Exchange Rate Amount field.
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      CurrencyExchangeRate.VALIDATE("Relational Currency Code",LibraryERM.CreateCurrencyWithRandomExchRates);
      CurrencyExchangeRate.VALIDATE("Fix Exchange Rate Amount",CurrencyExchangeRate."Fix Exchange Rate Amount"::Both);
      CurrencyExchangeRate.MODIFY(TRUE);
      EXIT(CurrencyExchangeRate."Relational Currency Code");
    END;

    LOCAL PROCEDURE UpdateRelationalExchangeRate@11(CurrencyCode@1000 : Code[10]);
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;

      // Update the Exchange Rates by subtracting a Random Decimal Amount from the Old Exchange Rates.
      CurrencyExchangeRate.VALIDATE(
        "Relational Exch. Rate Amount",CurrencyExchangeRate."Relational Exch. Rate Amount" - LibraryRandom.RandDec(1,2));
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculateCurrencyFactor@24(CurrencyCode@1002 : Code[10]) CurrencyFactor : Decimal;
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      CurrencyFactor := CurrencyExchangeRate."Exchange Rate Amount" / CurrencyExchangeRate."Relational Exch. Rate Amount";

      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyExchangeRate."Relational Currency Code");
      CurrencyExchangeRate.FINDFIRST;
      CurrencyFactor :=
        CurrencyFactor * CurrencyExchangeRate."Exchange Rate Amount" / CurrencyExchangeRate."Relational Exch. Rate Amount";
      EXIT(CurrencyFactor);
    END;

    LOCAL PROCEDURE VerifyAmountLCY@4(TempGenJournalLine@1004 : TEMPORARY Record 81);
    VAR
      Currency@1002 : Record 4;
      CurrencyExchangeRate@1001 : Record 330;
      AmountLCY@1009 : Decimal;
    BEGIN
      Currency.GET(TempGenJournalLine."Currency Code");
      CurrencyExchangeRate.SETRANGE("Currency Code",Currency.Code);
      CurrencyExchangeRate.FINDFIRST;
      AmountLCY :=
        (TempGenJournalLine.Amount / CurrencyExchangeRate."Exchange Rate Amount") *
        CurrencyExchangeRate."Relational Exch. Rate Amount";

      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyExchangeRate."Relational Currency Code");
      CurrencyExchangeRate.FINDFIRST;
      AmountLCY := (AmountLCY / CurrencyExchangeRate."Exchange Rate Amount") * CurrencyExchangeRate."Relational Exch. Rate Amount";
      Assert.AreNearlyEqual(
        AmountLCY,TempGenJournalLine."Amount (LCY)",Currency."Amount Rounding Precision",
        STRSUBSTNO(AmountError,TempGenJournalLine.FIELDCAPTION("Amount (LCY)"),TempGenJournalLine.TABLECAPTION));
    END;

    BEGIN
    {
      // [FEATURE] [Currency Factor] [General Journal]
      Verify Currency Factor and Amount LCY on General Journal Line.
        1. Create and Update Currency on a Customer and Verify Currency Factor on General Journal Line.
        2. Create and Update Currency on a Customer and Verify AmountLCY on General Journal Line after changing Currency Exchange Rate.

      This test code unit replaces Manual Test Suites (TS5251 and TS5266).

      TS_TFS ID= 20558 and 20560
      Covers Test Cases:
        TFS_TC_ID= 8866 : TC5252
        TFS_TC_ID= 8867 : TC5253
        TFS_TC_ID= 8868 : TC5254
        TFS_TC_ID= 11723: TC5255
        TFS_TC_ID= 8869 : TC5256
        TFS_TC_ID= 8870 : TC5257
        TFS_TC_ID= 8878 : TC5267
        TFS_TC_ID= 8879 : TC5268
        TFS_TC_ID= 8880 : TC5269
        TFS_TC_ID= 8881 : TC5270
        TFS_TC_ID= 8882 : TC5271
        TFS_TC_ID= 8883 : TC5272
    }
    END.
  }
}

