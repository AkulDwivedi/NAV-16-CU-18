OBJECT Codeunit 134388 ERM Sales Tax
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            Initialize;
          END;

  }
  CODE
  {
    VAR
      Assert@1007 : Codeunit 130000;
      LibraryERM@1006 : Codeunit 131300;
      isInitialized@1001 : Boolean;
      TaxDetailErr@1005 : TextConst 'ENU=Tax Detail not found.';

    [Test]
    PROCEDURE SalesTax@3();
    VAR
      VATPostingSetup@1000 : Record 325;
      VATBusinessPostingGroup@1001 : Record 323;
      VATProductPostingGroup@1002 : Record 324;
    BEGIN
      // Test VAT Posting Setup with Sales Tax.

      // Setup: Create new VAT Posting Setup.
      Initialize;
      LibraryERM.CreateVATBusinessPostingGroup(VATBusinessPostingGroup);
      LibraryERM.CreateVATProductPostingGroup(VATProductPostingGroup);
      LibraryERM.CreateVATPostingSetup(VATPostingSetup,VATBusinessPostingGroup.Code,VATProductPostingGroup.Code);

      // Exercise.
      VATPostingSetup.VALIDATE("VAT Calculation Type",VATPostingSetup."VAT Calculation Type"::"Sales Tax");
      VATPostingSetup.MODIFY(TRUE);

      // Verify: Verify VAT Posting Setup with Sales Tax Exists.
      VATPostingSetup.GET(VATPostingSetup."VAT Bus. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      VATPostingSetup.TESTFIELD("VAT Calculation Type",VATPostingSetup."VAT Calculation Type"::"Sales Tax");
    END;

    [Test]
    PROCEDURE SalesTaxGroup@2();
    VAR
      TaxGroup@1000 : Record 321;
    BEGIN
      // Test creation of Sales Tax Group.

      // Setup.
      Initialize;

      // Exercise.
      LibraryERM.CreateTaxGroup(TaxGroup);

      // Verify: Verify created Tax Group exists.
      TaxGroup.GET(TaxGroup.Code);
    END;

    [Test]
    PROCEDURE SalesTaxJurisdiction@5();
    VAR
      TaxJurisdiction@1000 : Record 320;
      JurisdictionCode@1001 : Code[10];
    BEGIN
      // Test creation of Sales Tax Jurisdiction.

      // Setup.
      Initialize;

      // Exercise.
      JurisdictionCode := CreateSalesTaxJurisdiction;

      // Verify: Verify created Tax Jurisdiction exists.
      TaxJurisdiction.GET(JurisdictionCode);
    END;

    [Test]
    PROCEDURE SalesTaxDetail@10();
    VAR
      TaxDetail@1000 : Record 322;
    BEGIN
      // Test creation of Sales Tax Detail.

      // Setup.
      Initialize;

      // Exercise.
      CreateSalesTaxDetail(TaxDetail);

      // Verify: Verify created Tax Detail exists.
      VerifyTaxDetail(TaxDetail);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateSalesTaxJurisdiction@9() : Code[10];
    VAR
      GLAccount@1001 : Record 15;
      TaxJurisdiction@1000 : Record 320;
    BEGIN
      LibraryERM.CreateTaxJurisdiction(TaxJurisdiction);
      LibraryERM.CreateGLAccount(GLAccount);
      TaxJurisdiction.VALIDATE("Tax Account (Sales)",GLAccount."No.");
      TaxJurisdiction.VALIDATE("Tax Account (Purchases)",GLAccount."No.");
      TaxJurisdiction.VALIDATE("Reverse Charge (Purchases)",GLAccount."No.");
      TaxJurisdiction.VALIDATE("Report-to Jurisdiction",TaxJurisdiction.Code);
      TaxJurisdiction.VALIDATE("Calculate Tax on Tax",TRUE);
      TaxJurisdiction.MODIFY(TRUE);
      EXIT(TaxJurisdiction.Code);
    END;

    LOCAL PROCEDURE CreateSalesTaxDetail@15(VAR TaxDetail@1004 : Record 322);
    VAR
      TaxGroup@1003 : Record 321;
    BEGIN
      LibraryERM.CreateTaxGroup(TaxGroup);
      LibraryERM.CreateTaxDetail(TaxDetail,CreateSalesTaxJurisdiction,TaxGroup.Code,TaxDetail."Tax Type"::"Sales Tax",WORKDATE);
    END;

    LOCAL PROCEDURE VerifyTaxDetail@13(TaxDetail@1000 : Record 322);
    VAR
      TaxDetail2@1001 : Record 322;
    BEGIN
      TaxDetail2.SETRANGE("Tax Jurisdiction Code",TaxDetail."Tax Jurisdiction Code");
      TaxDetail2.SETRANGE("Tax Group Code",TaxDetail."Tax Group Code");
      TaxDetail2.SETRANGE("Tax Type",TaxDetail."Tax Type");
      TaxDetail2.SETRANGE("Effective Date",TaxDetail."Effective Date");
      Assert.IsTrue(TaxDetail2.FINDFIRST,TaxDetailErr);
    END;

    BEGIN
    {
      // [FEATURE] [Sales Tax]
      Check the functionalities of Sales Tax.
      1. Test VAT Posting Setup with Sales Tax.
      2. Test Creation of Sales Tax Group.
      3. Test Creation of Sales Tax Jurisdiction.
      4. Test Creation of Sales Tax Detail.
      5. Test General Ledger Setup with Unrealized Sales Tax And Sales Payment Discounts.

      Covers Test Cases for WI - 271309
      ----------------------------------------------------------------------------------------------
      Test Function Name                                      TFS ID
      ----------------------------------------------------------------------------------------------
      SalesTax, SalesTaxGroup,                                143167, 143168, 143169,
      SalesTaxJurisdiction, SalesTaxDetail,                   143170, 143171
      UnrealizedSalesTaxAndSalesPaymentDiscounts
    }
    END.
  }
}

