OBJECT Codeunit 137062 SCM Sales & Receivables
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 87=rimd;
    Subtype=Test;
    OnRun=BEGIN
            Initialized := FALSE
          END;

  }
  CODE
  {
    VAR
      LocationSilver@1028 : Record 14;
      ItemJournalTemplate@1012 : Record 82;
      ItemJournalBatch@1011 : Record 233;
      LibraryVariableStorage@1029 : Codeunit 131004;
      Assert@1008 : Codeunit 130000;
      LibraryInventory@1002 : Codeunit 132201;
      LibraryPurchase@1005 : Codeunit 130512;
      LibraryWarehouse@1006 : Codeunit 132204;
      LibraryUtility@1014 : Codeunit 131000;
      LibrarySales@1015 : Codeunit 130509;
      LibraryCosting@1023 : Codeunit 132200;
      LibraryRandom@1018 : Codeunit 130440;
      LibraryManufacturing@1022 : Codeunit 132202;
      NumberofLineError@1019 : TextConst 'ENU=Number of Line must be same.';
      QuantityError@1020 : TextConst 'ENU=Quantity must be same.';
      QtyToReceiveError@1024 : TextConst 'ENU=Qty. to Receive must be equal.';
      QtyToInvoiceError@1025 : TextConst 'ENU=Qty. to invoice must be equal.';
      QtyToShipError@1026 : TextConst 'ENU=Qty. to ship must be equal.';
      LibraryDimension@1003 : Codeunit 131001;
      NoOfRecordsError@1009 : TextConst 'ENU=No of records must be same.';
      LineDiscountError@1010 : TextConst 'ENU=Line Discount Percentage must be same.';
      LineDiscountAmountError@1013 : TextConst 'ENU=Line Discount Amount must be same.';
      UnitPriceError@1021 : TextConst 'ENU=Unit price must be same.';
      DimensionError@1027 : TextConst 'ENU=Check Dimension Code.';
      LibraryService@1004 : Codeunit 131902;
      LibrarySetupStorage@1007 : Codeunit 131009;
      Initialized@1000 : Boolean;
      ItemCrossRefError@1001 : TextConst 'ENU=There are no items with cross reference: %1';
      AutomaticReservation@1016 : TextConst 'ENU=Automatic reservation is not possible.';
      UndoShipment@1017 : TextConst 'ENU=Do you really want to undo the selected Shipment lines?';
      DeletesEntries@1031 : TextConst 'ENU=This batch job deletes entries';
      UpdateAnalysisViews@1030 : TextConst 'ENU=Do you wish to update these analysis views?';

    [Test]
    PROCEDURE B34576_CopyDocPostedSalesInv@9();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      CustomerNo@1006 : Code[20];
      DocumentType@1007 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      Quantity@1008 : Decimal;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Create Credit Memo using Copy Document of Posted Sales Invoice.
      // 1. Setup.
      Initialize;
      CreateItemWithReserveAlways(Item);
      CustomerNo := LibrarySales.CreateCustomerNo;
      Quantity := LibraryRandom.RandDec(10,2);

      UpdateItemInventory(Item."No.",Quantity * 2);
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CustomerNo,Item."No.",Quantity);
      UpdateLocationOnSalesLine(SalesLine,'');
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 2. Exercise:
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustomerNo);
      LibrarySales.CopySalesDocument(SalesHeader,DocumentType::"Posted Invoice",DocumentNo,TRUE,FALSE);

      // 3. Verify: verify Sales line Quantity.
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("No.",Item."No.");
      Assert.AreEqual(1,SalesLine.COUNT,NumberofLineError);  // Value is important for Test.
      SalesLine.FINDFIRST;
      Assert.AreEqual(Quantity,SalesLine.Quantity,QuantityError);
    END;

    [Test]
    PROCEDURE B34576_CopyDocSalesOrder@6();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      CustomerNo@1001 : Code[20];
      LastSalesOrderNo@1005 : Text[20];
      DocumentType@1007 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      Quantity@1008 : Decimal;
    BEGIN
      // Create Credit Memo using Copy Document of Sales Order.
      // 1. Setup.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);

      CreateItemWithReserveAlways(Item);
      CustomerNo := LibrarySales.CreateCustomerNo;
      Quantity := LibraryRandom.RandDec(10,2);

      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CustomerNo,Item."No.",Quantity);
      UpdateLocationOnSalesLine(SalesLine,'');
      LastSalesOrderNo := SalesHeader."No.";

      // 2. Exercise:
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustomerNo);
      LibrarySales.CopySalesDocument(SalesHeader,DocumentType::Order,LastSalesOrderNo,TRUE,FALSE);

      // 3. Verify: verify Sales line Quantity
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("No.",Item."No.");
      Assert.AreEqual(1,SalesLine.COUNT,NumberofLineError);  // Value is important for Test.
      SalesLine.FINDFIRST;
      Assert.AreEqual(Quantity,SalesLine.Quantity,QuantityError);
    END;

    [Test]
    [HandlerFunctions(RetrieveDimStrMenuHandler)]
    PROCEDURE B35809_SalesPriceUOMSame@10();
    VAR
      ChildItem@1023 : Record 27;
      ParentItem@1011 : Record 27;
      ItemVariant@1012 : Record 5401;
      SalesPrice@1013 : Record 7002;
      SalesHeader@1015 : Record 36;
      SalesLine@1016 : Record 37;
      UnitOfMeasure@1000 : Record 204;
      UnitOfMeasure2@1001 : Record 204;
      CustomerNo@1002 : Code[20];
      QtyOfUOMPerUOM2@1018 : Decimal;
      UnitPriceOnItemCard@1019 : Decimal;
      UnitCostOnItemCard@1020 : Decimal;
      UnitSalesPrice@1021 : Decimal;
    BEGIN
      // Verify Unit price in Sales line when Sales price with same UOM.
      // 1. Setup.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);

      QtyOfUOMPerUOM2 := 2 + LibraryRandom.RandInt(3);   // Value greater than 2 is important for Test.
      UnitCostOnItemCard := LibraryRandom.RandDec(100,2);
      UnitPriceOnItemCard := LibraryRandom.RandDec(100,2);
      CustomerNo := LibrarySales.CreateCustomerNo;

      // Create item with 3 UOMs,variant code  and Unit price.
      CreateItemWithMultipleUOM(ChildItem,UnitOfMeasure,UnitOfMeasure2,QtyOfUOMPerUOM2);
      UpdateChildItem(ChildItem,UnitOfMeasure.Code,UnitPriceOnItemCard,UnitCostOnItemCard);
      LibraryInventory.CreateItemVariant(ItemVariant,ChildItem."No.");

      // Create assembly item for 2 UOM2 of above child item.
      LibraryInventory.CreateItem(ParentItem);
      CreateBOMComponentWithUOM(ParentItem."No.",ChildItem."No.",2,UnitOfMeasure2.Code,ItemVariant.Code);

      UnitSalesPrice := LibraryRandom.RandDec(100,2);
      // Create sales price.
      SalesPrice.DELETEALL(TRUE);
      LibraryCosting.CreateSalesPrice(
        SalesPrice,SalesPrice."Sales Type"::"All Customers",'',ChildItem."No.",WORKDATE,'',ItemVariant.Code,UnitOfMeasure.Code,0);
      SalesPrice.VALIDATE("Unit Price",UnitSalesPrice);
      SalesPrice.MODIFY(TRUE);

      // Create sales order for Parent item - PCS.
      CreateSalesOrder(SalesHeader,SalesLine,ParentItem."No.",CustomerNo);

      // 2. Exercise:
      LibrarySales.ExplodeBOM(SalesLine);

      // 3. Verify: Verfiy Unit Price in Sales line.
      VerifySalesUnitPrice(ChildItem."No.",QtyOfUOMPerUOM2,UnitPriceOnItemCard,UnitSalesPrice,UnitOfMeasure2.Code,UnitOfMeasure.Code);
    END;

    [Test]
    [HandlerFunctions(RetrieveDimStrMenuHandler)]
    PROCEDURE B35809_SalesPriceUOMDiff@1();
    VAR
      ChildItem@1023 : Record 27;
      ParentItem@1011 : Record 27;
      ItemVariant@1012 : Record 5401;
      SalesPrice@1013 : Record 7002;
      SalesHeader@1015 : Record 36;
      SalesLine@1016 : Record 37;
      UnitOfMeasure@1000 : Record 204;
      UnitOfMeasure2@1001 : Record 204;
      CustomerNo@1002 : Code[20];
      QtyOfUOMPerUOM2@1018 : Decimal;
      UnitPriceOnItemCard@1019 : Decimal;
      UnitCostOnItemCard@1020 : Decimal;
      UnitSalesPrice@1021 : Decimal;
    BEGIN
      // Verify Unit price in Sales line when Sales price with different UOM.
      // 1. Setup.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);

      QtyOfUOMPerUOM2 := 2 + LibraryRandom.RandInt(3);  // Value greater than 2 is important for Test.
      UnitCostOnItemCard := LibraryRandom.RandDec(100,2);
      UnitPriceOnItemCard := LibraryRandom.RandDec(100,2);
      CustomerNo := LibrarySales.CreateCustomerNo;

      // Create item with 3 UOMs,variant code  and Unit price.
      CreateItemWithMultipleUOM(ChildItem,UnitOfMeasure,UnitOfMeasure2,QtyOfUOMPerUOM2);
      UpdateChildItem(ChildItem,UnitOfMeasure.Code,UnitPriceOnItemCard,UnitCostOnItemCard);
      LibraryInventory.CreateItemVariant(ItemVariant,ChildItem."No.");

      // Create assembly item for 2 UOM2 of above child item.
      LibraryInventory.CreateItem(ParentItem);
      CreateBOMComponentWithUOM(ParentItem."No.",ChildItem."No.",2,UnitOfMeasure2.Code,ItemVariant.Code);
      UnitSalesPrice := LibraryRandom.RandDec(100,2);

      // Change sales price UOM from UOM to UOM2.
      SalesPrice.DELETEALL(TRUE);
      LibraryCosting.CreateSalesPrice(
        SalesPrice,SalesPrice."Sales Type"::"All Customers",'',ChildItem."No.",WORKDATE,'',ItemVariant.Code,UnitOfMeasure2.Code,0);
      SalesPrice.VALIDATE("Unit Price",UnitSalesPrice);
      SalesPrice.MODIFY(TRUE);
      CreateSalesOrder(SalesHeader,SalesLine,ParentItem."No.",CustomerNo);

      // 2. Exercise:
      LibrarySales.ExplodeBOM(SalesLine);

      // 3. Verify: Verfiy Unit Price in Sales line.
      VerifySalesUnitPrice(ChildItem."No.",QtyOfUOMPerUOM2,UnitPriceOnItemCard,UnitSalesPrice,UnitOfMeasure2.Code,UnitOfMeasure.Code);
    END;

    [Test]
    [HandlerFunctions(RetrieveDimStrMenuHandler)]
    PROCEDURE B35809_SalesPriceUOMBlank@35();
    VAR
      ChildItem@1023 : Record 27;
      ParentItem@1011 : Record 27;
      ItemVariant@1012 : Record 5401;
      SalesPrice@1013 : Record 7002;
      SalesHeader@1015 : Record 36;
      SalesLine@1016 : Record 37;
      UnitOfMeasure@1000 : Record 204;
      UnitOfMeasure2@1001 : Record 204;
      CustomerNo@1002 : Code[20];
      QtyOfUOMPerUOM2@1018 : Decimal;
      UnitPriceOnItemCard@1019 : Decimal;
      UnitCostOnItemCard@1020 : Decimal;
      UnitSalesPrice@1021 : Decimal;
    BEGIN
      // Verify Unit price in Sales line when Sales price with Blank UOM.
      // 1. Setup.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);

      QtyOfUOMPerUOM2 := 2 + LibraryRandom.RandInt(3);  // Value greater than 2 is important for Test.
      UnitCostOnItemCard := LibraryRandom.RandDec(100,2);
      UnitPriceOnItemCard := LibraryRandom.RandDec(100,2);
      CustomerNo := LibrarySales.CreateCustomerNo;

      // Create item with 3 UOMs,variant code  and Unit price.
      CreateItemWithMultipleUOM(ChildItem,UnitOfMeasure,UnitOfMeasure2,QtyOfUOMPerUOM2);
      UpdateChildItem(ChildItem,UnitOfMeasure.Code,UnitPriceOnItemCard,UnitCostOnItemCard);
      LibraryInventory.CreateItemVariant(ItemVariant,ChildItem."No.");

      // Create assembly item for 2 UOM of above child item.
      LibraryInventory.CreateItem(ParentItem);
      CreateBOMComponentWithUOM(ParentItem."No.",ChildItem."No.",2,UnitOfMeasure2.Code,ItemVariant.Code);
      UnitSalesPrice := LibraryRandom.RandDec(100,2);

      // Change sales price UOM from UOM to <blank>.
      SalesPrice.DELETEALL(TRUE);
      LibraryCosting.CreateSalesPrice(
        SalesPrice,SalesPrice."Sales Type"::"All Customers",'',ChildItem."No.",WORKDATE,'',ItemVariant.Code,'',0);
      SalesPrice.VALIDATE("Unit Price",UnitSalesPrice);
      SalesPrice.MODIFY(TRUE);

      CreateSalesOrder(SalesHeader,SalesLine,ParentItem."No.",CustomerNo);

      // 2. Exercise:
      LibrarySales.ExplodeBOM(SalesLine);

      // 3. Verify: Verfiy Unit Price in Sales line.
      VerifySalesUnitPrice(ChildItem."No.",QtyOfUOMPerUOM2,UnitPriceOnItemCard,UnitSalesPrice,UnitOfMeasure2.Code,UnitOfMeasure.Code);
    END;

    [Test]
    [HandlerFunctions(RetrieveDimStrMenuHandler)]
    PROCEDURE B35809_PurchasePriceUOMSame@37();
    VAR
      ChildItem@1023 : Record 27;
      ParentItem@1011 : Record 27;
      ItemVariant@1012 : Record 5401;
      PurchasePrice@1008 : Record 7012;
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1010 : Record 39;
      UnitOfMeasure@1000 : Record 204;
      UnitOfMeasure2@1001 : Record 204;
      VendorNo@1003 : Code[20];
      QtyOfUOMPerUOM2@1018 : Decimal;
      UnitPriceOnItemCard@1019 : Decimal;
      UnitCostOnItemCard@1020 : Decimal;
      UnitPurchasePrice@1022 : Decimal;
    BEGIN
      // Verify Direct Unit Cost in Purchase line when Purchase price with same UOM.
      // 1. Setup.
      Initialize;
      QtyOfUOMPerUOM2 := 2 + LibraryRandom.RandInt(3);  // Value greater than 2 is important for Test.
      UnitCostOnItemCard := LibraryRandom.RandDec(100,2);
      UnitPriceOnItemCard := LibraryRandom.RandDec(100,2);
      VendorNo := LibraryPurchase.CreateVendorNo;

      // Create item with 3 UOMs,variant code and Unit price.
      CreateItemWithMultipleUOM(ChildItem,UnitOfMeasure,UnitOfMeasure2,QtyOfUOMPerUOM2);
      UpdateChildItem(ChildItem,UnitOfMeasure.Code,UnitPriceOnItemCard,UnitCostOnItemCard);
      LibraryInventory.CreateItemVariant(ItemVariant,ChildItem."No.");

      // Create assembly item for 2 UOM2 of above child item.
      LibraryInventory.CreateItem(ParentItem);
      CreateBOMComponentWithUOM(ParentItem."No.",ChildItem."No.",2,UnitOfMeasure2.Code,ItemVariant.Code);
      UnitPurchasePrice := LibraryRandom.RandDec(100,2);

      // Create purchase price for UOM = UOM2.
      PurchasePrice.DELETEALL(TRUE);
      LibraryCosting.CreatePurchasePrice(PurchasePrice,VendorNo,ChildItem."No.",WORKDATE,'',ItemVariant.Code,UnitOfMeasure.Code,0);
      PurchasePrice.VALIDATE("Direct Unit Cost",UnitPurchasePrice);
      PurchasePrice.MODIFY(TRUE);

      // Create purch order for Parent item - PCS.
      CreatePurchOrder(PurchaseHeader,PurchaseLine,ParentItem."No.",VendorNo);

      // 2. Exercise:
      LibraryPurchase.ExplodeBOM(PurchaseLine);

      // 3. Verify: Verfiy Unit Price in Purchase line.
      VerifyPurchUnitPrice(
        ChildItem."No.",QtyOfUOMPerUOM2,UnitCostOnItemCard,UnitPurchasePrice,UnitOfMeasure2.Code,UnitOfMeasure.Code);
    END;

    [Test]
    [HandlerFunctions(RetrieveDimStrMenuHandler)]
    PROCEDURE B35809_PurchasePriceUOMDiff@40();
    VAR
      ChildItem@1023 : Record 27;
      ParentItem@1011 : Record 27;
      ItemVariant@1012 : Record 5401;
      PurchasePrice@1008 : Record 7012;
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1010 : Record 39;
      UnitOfMeasure@1000 : Record 204;
      UnitOfMeasure2@1001 : Record 204;
      VendorNo@1003 : Code[20];
      QtyOfUOMPerUOM2@1018 : Decimal;
      UnitPriceOnItemCard@1019 : Decimal;
      UnitCostOnItemCard@1020 : Decimal;
      UnitPurchasePrice@1022 : Decimal;
    BEGIN
      // Verify Direct Unit Cost in Purchase line when Purchase price with different UOM.
      // 1. Setup.
      Initialize;

      QtyOfUOMPerUOM2 := 2 + LibraryRandom.RandInt(3);  // Value greater than 2 is important for Test.
      UnitCostOnItemCard := LibraryRandom.RandDec(100,2);
      UnitPriceOnItemCard := LibraryRandom.RandDec(100,2);
      VendorNo := LibraryPurchase.CreateVendorNo;

      // Create item with 3 UOMs,variant code  and Unit price.
      CreateItemWithMultipleUOM(ChildItem,UnitOfMeasure,UnitOfMeasure2,QtyOfUOMPerUOM2);
      UpdateChildItem(ChildItem,UnitOfMeasure.Code,UnitPriceOnItemCard,UnitCostOnItemCard);
      LibraryInventory.CreateItemVariant(ItemVariant,ChildItem."No.");

      // Create assembly item for 2 UOM2 of above child item.
      LibraryInventory.CreateItem(ParentItem);
      CreateBOMComponentWithUOM(ParentItem."No.",ChildItem."No.",2,UnitOfMeasure2.Code,ItemVariant.Code);
      UnitPurchasePrice := LibraryRandom.RandDec(100,2);

      // Change purchase price UOM from UOM to UOM2.
      PurchasePrice.DELETEALL(TRUE);
      LibraryCosting.CreatePurchasePrice(PurchasePrice,VendorNo,ChildItem."No.",
        WORKDATE,'',ItemVariant.Code,UnitOfMeasure2.Code,0);
      PurchasePrice.VALIDATE("Direct Unit Cost",UnitPurchasePrice);
      PurchasePrice.MODIFY(TRUE);
      CreatePurchOrder(PurchaseHeader,PurchaseLine,ParentItem."No.",VendorNo);

      // 2. Exercise:
      LibraryPurchase.ExplodeBOM(PurchaseLine);

      // 3. Verify: Verfiy Unit Price in Purchase line.
      VerifyPurchUnitPrice(
        ChildItem."No.",QtyOfUOMPerUOM2,UnitCostOnItemCard,UnitPurchasePrice,UnitOfMeasure2.Code,UnitOfMeasure.Code);
    END;

    [Test]
    [HandlerFunctions(RetrieveDimStrMenuHandler)]
    PROCEDURE B35809_PurchasePriceUOMBlank@44();
    VAR
      ChildItem@1023 : Record 27;
      ParentItem@1011 : Record 27;
      ItemVariant@1012 : Record 5401;
      PurchasePrice@1008 : Record 7012;
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1010 : Record 39;
      UnitOfMeasure@1000 : Record 204;
      UnitOfMeasure2@1001 : Record 204;
      VendorNo@1003 : Code[20];
      QtyOfUOMPerUOM2@1018 : Decimal;
      UnitPriceOnItemCard@1019 : Decimal;
      UnitCostOnItemCard@1020 : Decimal;
      UnitPurchasePrice@1022 : Decimal;
    BEGIN
      // Verify Direct Unit Cost in Purchase line when Purchase price with blank UOM.
      // 1. Setup.
      Initialize;
      QtyOfUOMPerUOM2 := 2 + LibraryRandom.RandInt(3);  // Value greater than 2 is important for Test.
      UnitCostOnItemCard := LibraryRandom.RandDec(100,2);
      UnitPriceOnItemCard := LibraryRandom.RandDec(100,2);
      VendorNo := LibraryPurchase.CreateVendorNo;

      // Create item with 3 UOMs,variant code  and Unit price.
      CreateItemWithMultipleUOM(ChildItem,UnitOfMeasure,UnitOfMeasure2,QtyOfUOMPerUOM2);
      UpdateChildItem(ChildItem,UnitOfMeasure.Code,UnitPriceOnItemCard,UnitCostOnItemCard);
      LibraryInventory.CreateItemVariant(ItemVariant,ChildItem."No.");

      // Create assembly item for 2 UOM2 of above child item.
      LibraryInventory.CreateItem(ParentItem);
      CreateBOMComponentWithUOM(ParentItem."No.",ChildItem."No.",2,UnitOfMeasure2.Code,ItemVariant.Code);

      UnitPurchasePrice := LibraryRandom.RandDec(100,2);

      // Change purchase price UOM from UOM to <blank>.
      PurchasePrice.DELETEALL(TRUE);
      LibraryCosting.CreatePurchasePrice(PurchasePrice,VendorNo,ChildItem."No.",WORKDATE,'',ItemVariant.Code,'',0);
      PurchasePrice.VALIDATE("Direct Unit Cost",UnitPurchasePrice);
      PurchasePrice.MODIFY(TRUE);
      CreatePurchOrder(PurchaseHeader,PurchaseLine,ParentItem."No.",VendorNo);

      // 2. Exercise:
      LibraryPurchase.ExplodeBOM(PurchaseLine);

      // 3. Verify: Verfiy Unit Price in Purchase line.
      VerifyPurchUnitPrice(
        ChildItem."No.",QtyOfUOMPerUOM2,UnitCostOnItemCard,UnitPurchasePrice,UnitOfMeasure2.Code,UnitOfMeasure.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTRUE)]
    PROCEDURE B43940_SameDimDateCompress@78();
    VAR
      Item@1002 : Record 27;
      ItemBudgetEntry@1000 : Record 7134;
      DateComprRegister@1003 : Record 87;
      GeneralLedgerSetup@1001 : Record 98;
      DimensionValue@1010 : Record 349;
      DimensionValue2@1009 : Record 349;
      DimensionValue3@1012 : Record 349;
      ItemBudgetName@1013 : Record 7132;
      PeriodLength@1004 : 'Day,Week,Month,Quarter,Year,Period';
      DimensionCode@1006 : Code[20];
      DimensionCode2@1007 : Code[20];
      DimensionCode3@1008 : Code[20];
      DimensionCode4@1015 : Code[20];
      DimensionCode5@1014 : Code[20];
    BEGIN
      // Run Date Compress Item Budget Entries when Same dimension in both Item Budget entry lines.
      // 1. Setup.
      Initialize;
      ClearEntries;
      LibraryInventory.CreateItem(Item);

      // Same Dimensions in both Item Budget Entry Lines.
      GeneralLedgerSetup.GET;
      DimensionCode := GeneralLedgerSetup."Global Dimension 1 Code";
      DimensionCode2 := GeneralLedgerSetup."Global Dimension 2 Code";
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      LibraryDimension.FindDimensionValue(DimensionValue2,DimensionCode2);

      ItemBudgetName.SETRANGE("Analysis Area",ItemBudgetName."Analysis Area"::Sales);
      ItemBudgetName.SETFILTER("Budget Dimension 1 Code",'<> %1','');
      ItemBudgetName.SETFILTER("Budget Dimension 2 Code",'<> %1','');
      ItemBudgetName.FINDFIRST;

      DimensionCode3 := ItemBudgetName."Budget Dimension 1 Code";
      DimensionCode4 := ItemBudgetName."Budget Dimension 2 Code";
      DimensionCode5 := ItemBudgetName."Budget Dimension 3 Code";
      LibraryDimension.FindDimensionValue(DimensionValue3,DimensionCode3);

      // Create Item Budget Entries.
      CreateItemBudgetEntry(Item,WORKDATE,DimensionValue.Code,DimensionValue2.Code,DimensionValue3.Code);
      CreateItemBudgetEntry(Item,CALCDATE('<1D>',WORKDATE),DimensionValue.Code,DimensionValue2.Code,DimensionValue3.Code);
      ItemBudgetEntry.SETRANGE("Budget Dimension 1 Code",DimensionValue3.Code); // filtering on created.

      // Create Selected Dimensions for Date Compress.
      CreateDimForBudgetEntry(DimensionCode,DimensionCode2,DimensionCode3,DimensionCode4,DimensionCode5);

      // 2. Exercise: Run Date compress entries.
      LibraryVariableStorage.Enqueue(DeletesEntries);  // Enqueue Value for Confirm Handler.
      LibraryVariableStorage.Enqueue(UpdateAnalysisViews);  // Enqueue Value for Confirm Handler.
      LibraryInventory.DateComprItemBudgetEntries(
        ItemBudgetEntry,0,CALCDATE('<CY-1Y+1D>',WORKDATE),CALCDATE('<CY>',WORKDATE),PeriodLength::Month,LibraryUtility.GenerateGUID);

      // 3. Verify: verify compressed Item Budget Entries and date compresed Item Budget Entries.
      VerifyDimension(ItemBudgetEntry,1,DimensionValue.Code,DimensionValue2.Code);  // Value is important for Test.
      DateComprRegister.SETRANGE("Table ID",DATABASE::"Item Budget Entry");
      VerifyDateComprRegister(DateComprRegister,1,'1','2');  // Value is important for Test.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTRUE)]
    PROCEDURE B43940_DiffDimDateCompress@77();
    VAR
      Item@1002 : Record 27;
      ItemBudgetEntry@1000 : Record 7134;
      DateComprRegister@1003 : Record 87;
      GeneralLedgerSetup@1015 : Record 98;
      DimensionValue@1013 : Record 349;
      DimensionValue2@1012 : Record 349;
      DimensionValue3@1011 : Record 349;
      ItemBudgetName@1010 : Record 7132;
      PeriodLength@1004 : 'Day,Week,Month,Quarter,Year,Period';
      DimensionCode@1009 : Code[20];
      DimensionCode2@1008 : Code[20];
      DimensionCode3@1007 : Code[20];
      DimensionCode4@1006 : Code[20];
      DimensionCode5@1001 : Code[20];
    BEGIN
      // Run Date Compress Item Budget Entries when Different dimension in both Item Budget entry lines.
      // 1. Setup.
      Initialize;
      ClearEntries;
      LibraryInventory.CreateItem(Item);

      // Different Dimensions in both Item Budget Entry lines.
      GeneralLedgerSetup.GET;
      DimensionCode := GeneralLedgerSetup."Global Dimension 1 Code";
      DimensionCode2 := GeneralLedgerSetup."Global Dimension 2 Code";
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      LibraryDimension.FindDimensionValue(DimensionValue2,DimensionCode2);

      ItemBudgetName.SETRANGE("Analysis Area",ItemBudgetName."Analysis Area"::Sales);
      ItemBudgetName.SETFILTER("Budget Dimension 1 Code",'<> %1','');
      ItemBudgetName.SETFILTER("Budget Dimension 2 Code",'<> %1','');
      ItemBudgetName.FINDFIRST;

      DimensionCode3 := ItemBudgetName."Budget Dimension 1 Code";
      DimensionCode4 := ItemBudgetName."Budget Dimension 2 Code";
      DimensionCode5 := ItemBudgetName."Budget Dimension 3 Code";
      LibraryDimension.FindDimensionValue(DimensionValue3,DimensionCode3);

      // Create Item Budget Entries.
      CreateItemBudgetEntry(Item,WORKDATE,DimensionValue.Code,'',DimensionValue3.Code);
      CreateItemBudgetEntry(Item,CALCDATE('<1D>',WORKDATE),'',DimensionValue2.Code,DimensionValue3.Code);
      ItemBudgetEntry.SETRANGE("Budget Dimension 1 Code",DimensionValue3.Code); // filtering on created.

      // Create Selected Dimension for Date Compress.
      CreateDimForBudgetEntry(DimensionCode,DimensionCode2,DimensionCode3,DimensionCode4,DimensionCode5);

      // 2. Exercise: Run Date compress entries.
      LibraryVariableStorage.Enqueue(DeletesEntries);  // Enqueue Value for Confirm Handler.
      LibraryVariableStorage.Enqueue(UpdateAnalysisViews);  // Enqueue Value for Confirm Handler.
      LibraryInventory.DateComprItemBudgetEntries(
        ItemBudgetEntry,0,CALCDATE('<CY-1Y+1D>',WORKDATE),CALCDATE('<CY>',WORKDATE),PeriodLength::Month,LibraryUtility.GenerateGUID);

      // 3. Verify: verify compressed Item Budget Entries and date compresed Item Budget Entries.
      // Value is important for Test.
      VerifyDimension(ItemBudgetEntry,2,FORMAT(DimensionValue.Code + ','),FORMAT(',' + DimensionValue2.Code));
      VerifyDateComprRegister(DateComprRegister,1,'2','2');
    END;

    [Test]
    [HandlerFunctions(RetrieveDimStrMenuHandler)]
    PROCEDURE B43974_SalesExplodeBOM@95();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      BOMComponent@1017 : Record 90;
      Item@1013 : Record 27;
      Item2@1012 : Record 27;
      Item3@1011 : Record 27;
      Item4@1010 : Record 27;
      Item5@1004 : Record 27;
      LineDate@1002 : Date;
    BEGIN
      // Create a Sales Order with one line of BOM and verify Sales line.
      // 1. Setup: Create Child and Parent Item.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);

      LineDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE);
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      LibraryInventory.CreateItem(Item3);
      LibraryInventory.CreateItem(Item4);
      LibraryInventory.CreateItem(Item5);

      CreateBOMComponent(BOMComponent,Item."No.",BOMComponent.Type::Item,Item2."No.");
      CreateBOMComponent(BOMComponent,Item."No.",BOMComponent.Type::Item,Item3."No.");
      CreateBOMComponent(BOMComponent,Item."No.",BOMComponent.Type::Item,Item4."No.");
      CreateBOMComponent(BOMComponent,Item."No.",BOMComponent.Type::Item,Item5."No.");

      // Create a Sales Order with one line of BOM.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Shipment Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      SalesHeader.VALIDATE("Location Code",'');
      SalesHeader.MODIFY(TRUE);

      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));
      SalesLine.VALIDATE("Shipment Date",LineDate);
      SalesLine.MODIFY(TRUE);

      // 2. Exercise:
      LibrarySales.ExplodeBOM(SalesLine);

      // 3. Verify: verify results of Sales lines.
      VerifySalesLine(SalesLine."Document Type"::Order,SalesHeader."No.",5,LineDate);  // Value is important for Test.
    END;

    [Test]
    [HandlerFunctions(RetrieveDimStrMenuHandler)]
    PROCEDURE B43974_PurchaseExplodeBOM@94();
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1007 : Record 39;
      BOMComponent@1017 : Record 90;
      Item@1013 : Record 27;
      Item2@1012 : Record 27;
      Item3@1011 : Record 27;
      Item4@1010 : Record 27;
      Item5@1004 : Record 27;
      LineDate@1002 : Date;
    BEGIN
      // Create a Purchase Order with one line of BOM and verify Purchase line.
      // 1. Setup: Create Child and Parent Item.
      Initialize;
      LineDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE);
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      LibraryInventory.CreateItem(Item3);
      LibraryInventory.CreateItem(Item4);
      LibraryInventory.CreateItem(Item5);

      CreateBOMComponent(BOMComponent,Item."No.",BOMComponent.Type::Item,Item2."No.");
      CreateBOMComponent(BOMComponent,Item."No.",BOMComponent.Type::Item,Item3."No.");
      CreateBOMComponent(BOMComponent,Item."No.",BOMComponent.Type::Item,Item4."No.");
      CreateBOMComponent(BOMComponent,Item."No.",BOMComponent.Type::Item,Item5."No.");

      // Create a Purchase Order with one line of BOM.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      PurchaseHeader.VALIDATE("Expected Receipt Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      PurchaseHeader.VALIDATE("Location Code",'');
      PurchaseHeader.MODIFY(TRUE);

      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));
      PurchaseLine.VALIDATE("Expected Receipt Date",LineDate);
      PurchaseLine.MODIFY(TRUE);

      // 2. Exercise:
      LibraryPurchase.ExplodeBOM(PurchaseLine);

      // 3. Verify: verify results of purchase lines.
      VerifyPurchaseLine(PurchaseLine."Document Type"::Order,PurchaseHeader."No.",5,LineDate);  // Value is important for Test.
    END;

    [Test]
    PROCEDURE B44247_SalesCopyDocWithDisc@100();
    VAR
      Item@1001 : Record 27;
      GeneralLedgerSetup@1010 : Record 98;
      OldLineDiscountPercent@1000 : Decimal;
      OldUnitPrice@1002 : Decimal;
      OldLineDiscountAmount@1003 : Decimal;
      NewLineDiscountPercent@1004 : Decimal;
      NewUnitPrice@1005 : Decimal;
      NewLineDiscountAmount@1006 : Decimal;
    BEGIN
      // Create Sales Credit Memo with copy Document and verify Discount.
      // 1. Setup.
      Initialize;
      GeneralLedgerSetup.GET;
      OldUnitPrice := LibraryRandom.RandDec(100,2);
      OldLineDiscountPercent := LibraryRandom.RandInt(20);
      LibraryInventory.CreateItem(Item);

      // 2. Exercise: Create Sales Invoice,Post Invoice,Create a Credit Memo and copy document from old Posted Invoice.
      DiscountCopyDocumentSales(
        Item,OldLineDiscountPercent,OldUnitPrice,OldLineDiscountAmount,NewLineDiscountPercent,NewUnitPrice,NewLineDiscountAmount);

      // 3. Verify: Verify the line discount being copied.
      Assert.AreEqual(OldLineDiscountPercent,NewLineDiscountPercent,LineDiscountError);
      Assert.AreEqual(OldLineDiscountAmount,NewLineDiscountAmount,LineDiscountAmountError);
      Assert.AreEqual(OldUnitPrice,NewUnitPrice,UnitPriceError);
    END;

    [Test]
    PROCEDURE B44247_PurchaseCopyDocWithDisc@99();
    VAR
      Item@1001 : Record 27;
      GeneralLedgerSetup@1010 : Record 98;
      OldLineDiscountPercent@1000 : Decimal;
      OldUnitPrice@1002 : Decimal;
      OldLineDiscountAmount@1003 : Decimal;
      NewLineDiscountPercent@1004 : Decimal;
      NewUnitPrice@1005 : Decimal;
      NewLineDiscountAmount@1006 : Decimal;
    BEGIN
      // Create Purchase Credit Memo with copy Document and verify Discount.
      // 1. Setup.
      Initialize;
      GeneralLedgerSetup.GET;
      OldUnitPrice := LibraryRandom.RandDec(100,2);
      OldLineDiscountPercent := LibraryRandom.RandInt(20);
      LibraryInventory.CreateItem(Item);

      // 2. Exercise: Create Purchase Invoice,Post Invoice,Create a Credit Memo and copy document from old Posted Invoice.
      DiscountCopyDocumentPurch(
        Item,OldLineDiscountPercent,OldUnitPrice,OldLineDiscountAmount,NewLineDiscountPercent,NewUnitPrice,NewLineDiscountAmount);

      // 3. Verify: Verify the line discount being copied.
      Assert.AreEqual(OldLineDiscountPercent,NewLineDiscountPercent,LineDiscountError);
      Assert.AreEqual(OldLineDiscountAmount,NewLineDiscountAmount,LineDiscountAmountError);
      Assert.AreEqual(OldUnitPrice,NewUnitPrice,UnitPriceError);
    END;

    [Test]
    PROCEDURE B44491_SalesBlanketOrder@104();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1012 : Record 36;
      SalesLine@1011 : Record 37;
      SalesHeader2@1010 : Record 36;
      SalesHeader3@1009 : Record 36;
      OldQtyToShip@1005 : Decimal;
      OldQtyToInvoice@1004 : Decimal;
      DocumentType@1003 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      DocumentNo@1001 : Code[20];
    BEGIN
      // Verify Blanket Order after create sale order using Blanket order and create Credit Memo with copy document.
      // 1. Setup.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);
      LibraryInventory.CreateItem(Item);

      // Create a Blanket Order.
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Blanket Order",LibrarySales.CreateCustomerNo,Item."No.",
        2 * LibraryRandom.RandDec(100,2));
      UpdateLocationOnSalesLine(SalesLine,'');

      // Create a Sales Order for Partial Quantity.
      SalesLine.VALIDATE("Qty. to Ship",SalesLine.Quantity / 2);
      SalesLine.MODIFY(TRUE);
      LibrarySales.BlanketSalesOrderMakeOrder(SalesHeader);

      // Post Ship and Invoice the Sales Order.
      SalesHeader2.SETRANGE("Document Type",SalesHeader2."Document Type"::Order);
      SalesHeader2.SETRANGE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      SalesHeader2.FINDFIRST;
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader2,TRUE,TRUE);

      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      OldQtyToShip := SalesLine."Qty. to Ship";
      OldQtyToInvoice := SalesLine."Qty. to Invoice";

      // 2. Exercise: Create a return order and copy document from the last posted invoice.
      LibrarySales.CreateSalesHeader(
        SalesHeader3,SalesHeader3."Document Type"::"Return Order",SalesHeader2."Sell-to Customer No.");
      LibrarySales.CopySalesDocument(SalesHeader3,DocumentType::"Posted Invoice",DocumentNo,TRUE,FALSE);

      // 3. Verify: Verify that the Qty to Ship for the blanket order line is the same as before.
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      Assert.AreEqual(OldQtyToShip,SalesLine."Qty. to Ship",QtyToShipError);
      Assert.AreEqual(OldQtyToInvoice,SalesLine."Qty. to Invoice",QtyToInvoiceError);
    END;

    [Test]
    PROCEDURE B44491_PurchaseBlanketOrder@103();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1011 : Record 38;
      PurchaseLine@1010 : Record 39;
      PurchaseHeader2@1009 : Record 38;
      PurchaseHeader3@1008 : Record 38;
      PurchInvHeader@1007 : Record 122;
      VendorNo@1006 : Code[20];
      OldQtyToRecv@1004 : Decimal;
      OldQtyToInvoice@1003 : Decimal;
      DocumentType@1002 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
    BEGIN
      // 1. Setup.
      Initialize;
      LibraryInventory.CreateItem(Item);
      VendorNo := LibraryPurchase.CreateVendorNo;

      // Create a blanket order.
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Blanket Order",VendorNo,Item."No.",
        2 * LibraryRandom.RandDec(100,2));
      PurchaseLine.VALIDATE("Location Code",'');
      PurchaseLine.MODIFY(TRUE);

      // Create a Purch order for Partial Quantity.
      PurchaseLine.VALIDATE("Qty. to Receive",PurchaseLine.Quantity / 2);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.BlanketPurchaseOrderMakeOrder(PurchaseHeader);

      // Post Receive and invoice of Purch Order.
      PurchaseHeader2.SETRANGE("Document Type",PurchaseHeader2."Document Type"::Order);
      PurchaseHeader2.SETRANGE("Buy-from Vendor No.",VendorNo);
      PurchaseHeader2.FINDFIRST;
      PurchaseHeader2.VALIDATE("Vendor Invoice No.",PurchaseHeader2."No.");
      PurchaseHeader2.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader2,TRUE,TRUE);
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      OldQtyToRecv := PurchaseLine."Qty. to Receive";
      OldQtyToInvoice := PurchaseLine."Qty. to Invoice";

      // 2. Exercise: Create a Return Order and copy document from the last posted invoice.
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader3,PurchaseHeader3."Document Type"::"Return Order",PurchaseHeader2."Buy-from Vendor No.");
      PurchInvHeader.SETRANGE("Order No.",PurchaseHeader2."No.");
      PurchInvHeader.FINDFIRST;
      LibraryPurchase.CopyPurchaseDocument(PurchaseHeader3,DocumentType::"Posted Invoice",PurchInvHeader."No.",TRUE,FALSE);

      // 3. Verify: Verify that the Qty to Ship for the blanket order line is the same as before.
      PurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      Assert.AreEqual(OldQtyToRecv,PurchaseLine."Qty. to Receive",QtyToReceiveError);
      Assert.AreEqual(OldQtyToInvoice,PurchaseLine."Qty. to Invoice",QtyToInvoiceError);
    END;

    [Test]
    PROCEDURE ValueEntriesforSalesOrder@2();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Setup: Create Item and increase inventory.
      Initialize;
      LibraryInventory.CreateItem(Item);
      UpdateItemInventory(Item."No.",LibraryRandom.RandDec(100,2));
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo,Item."No.",LibraryRandom.RandDec(10,2));

      // Exercise: Post Sales Order with Ship and Invoice.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Check Value Entries for "Sales Amount (Actual)" field and the "Amount" field on Posted Sales Invoice line.
      VerifyValueEntriesForSalesOrder(DocumentNo);
    END;

    [Test]
    PROCEDURE ItemCrossReferenceOnPurchase@28();
    BEGIN
      // Setup.
      Initialize;
      SalesPurchaseItemCrossReferenceNo(FALSE);  // Discontinue- False.
    END;

    [Test]
    PROCEDURE ItemCrossReferenceErrorOnSales@23();
    BEGIN
      // Setup.
      Initialize;
      SalesPurchaseItemCrossReferenceNo(TRUE);  // Discontinue- True.
    END;

    LOCAL PROCEDURE SalesPurchaseItemCrossReferenceNo@15(DiscontinueCrossRefNo@1006 : Boolean);
    VAR
      Item@1005 : Record 27;
      ItemCrossReference@1003 : Record 5717;
      SalesLine@1002 : Record 37;
      SalesHeader@1001 : Record 36;
      PurchaseHeader@1004 : Record 38;
      DocumentNo@1000 : Code[20];
    BEGIN
      // Create an Item with Item Cross Reference.Create and Post a Purchase Order as Receive with Cross Ref. No.
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItemCrossReference(
        ItemCrossReference,Item."No.",ItemCrossReference."Cross-Reference Type"::"Bar Code",'');
      CreatePurchaseOrderWithCrossRefNo(ItemCrossReference,PurchaseHeader);

      // Exercise: Post Purchase Order with Receive only.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Verify: Check posted entry for Cross Reference No.
      VerifyCrossRefNoInItemLedgerEntry(DocumentNo,ItemCrossReference."Cross-Reference No.");

      IF DiscontinueCrossRefNo THEN BEGIN
        DiscontinueItemCrossReference(ItemCrossReference);
        CreateSalesDocument(
          SalesHeader,SalesLine,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo,Item."No.",LibraryRandom.RandDec(10,2));

        // Exercise: Check that the Discontinued Cross Reference No. throws an error when uupdated in Sales Line.
        ASSERTERROR UpdateCrossRefNoSalesLine(SalesLine,ItemCrossReference."Cross-Reference No.");

        // Verify: Verify Cross Reference No. error.
        Assert.ExpectedError(STRSUBSTNO(ItemCrossRefError,ItemCrossReference."Cross-Reference No."));
      END;
    END;

    [Test]
    PROCEDURE SalesOrderWithAvailableReservedQuantity@11();
    BEGIN
      // Verify Reserved Quantity on Sales Order with Sales Return Order when Quantity available for Reservation.
      // Setup.
      Initialize;
      SalesOrderWithReservedQuantity(FALSE);  // Multiple Sales Order as False.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFALSE)]
    PROCEDURE SalesOrderWithoutAvailableReservedQuantity@51();
    BEGIN
      // Verify Reserved Quantity on Sales Order with Sales Return Order when Quantity not available for Reservation.
      // Setup.
      Initialize;
      SalesOrderWithReservedQuantity(TRUE);  // Multiple Sales Order as True.
    END;

    LOCAL PROCEDURE SalesOrderWithReservedQuantity@65(MultipleSalesOrder@1010 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      SalesHeader2@1006 : Record 36;
      SalesLine2@1005 : Record 37;
      SalesHeader3@1008 : Record 36;
      SalesLine3@1007 : Record 37;
    BEGIN
      // Create Item with Reserve Option Always, Create Return Sales Order.
      CreateItemWithReserveAlways(Item);
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",
        LibrarySales.CreateCustomerNo,Item."No.",LibraryRandom.RandDec(10,2));

      // Exercise: Create Sales Orders.
      CreateSalesDocument(SalesHeader2,SalesLine2,SalesHeader2."Document Type"::Order,LibrarySales.CreateCustomerNo,Item."No.",0);
      UpdateQuantityOnSalesLinePage(SalesHeader2."No.",SalesLine.Quantity);
      IF MultipleSalesOrder THEN BEGIN
        CreateSalesDocument(SalesHeader3,SalesLine3,SalesHeader3."Document Type"::Order,LibrarySales.CreateCustomerNo,Item."No.",0);
        LibraryVariableStorage.Enqueue(AutomaticReservation);  // Enqueue Value for Confirm Handler.
        UpdateQuantityOnSalesLinePage(SalesHeader3."No.",SalesLine.Quantity);
      END;

      // Verify: Verify Reserved Quantity on Sales Line.
      IF MultipleSalesOrder THEN BEGIN
        SalesLine3.CALCFIELDS("Reserved Quantity");
        SalesLine3.TESTFIELD("Reserved Quantity",0);  // Zero is required, Quantity not available for reservation.
      END ELSE BEGIN
        SalesLine2.CALCFIELDS("Reserved Quantity");
        SalesLine2.TESTFIELD("Reserved Quantity",SalesLine.Quantity);
      END;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTRUE)]
    PROCEDURE UndoPostedSalesShipment@72();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      SalesShipmentHeader@1010 : Record 110;
      Bin@1013 : Record 7354;
      WarehouseEntry@1004 : Record 7312;
    BEGIN
      // Setup: Create Item and Bin. Create and Post Sales Order with Ship Option.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      UpdateItemInventoryWithLocationAndBin(Item."No.",LocationSilver.Code,Bin.Code,LibraryRandom.RandDec(10,2) + 100);  // Using large Random Value for Quantity.

      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo,Item."No.",LibraryRandom.RandDec(10,2));
      UpdateLocationOnSalesLine(SalesLine,LocationSilver.Code);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // Exercise: Undo Shipment on Posted Sales Shipment.
      FindSalesShipmentHeader(SalesShipmentHeader,SalesHeader."No.");
      UndoShipmentOnPostedSalesShipmentPage(SalesShipmentHeader."No.");

      // Verify: Verify Quantity on Warehouse Entry after Undo Shipment for Warehouse location.
      VerifyWarehouseEntry(SalesShipmentHeader."No.",Item."No.",WarehouseEntry."Entry Type"::"Negative Adjmt.",-SalesLine.Quantity);
      VerifyWarehouseEntry(SalesShipmentHeader."No.",Item."No.",WarehouseEntry."Entry Type"::"Positive Adjmt.",SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(DimStrMenuHandler)]
    PROCEDURE ParentItemExtAutoTextRemainsAfterExplodeBOM@36();
    VAR
      SalesHeader@1006 : Record 36;
      SalesLine@1000 : Record 37;
      BOMComponent@1001 : Record 90;
      ParentItem@1002 : Record 27;
      ChildItem@1003 : Record 27;
      ParentItemExtText@1004 : Text[50];
      ChildItemExtText@1005 : Text[50];
    BEGIN
      // [FEATURE] [BOM Component] [Extended Text]
      // [SCENARIO 377475] Parent Item's Auto Extended Text remains after Explode BOM on Sales Line
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);

      // [GIVEN] Item "A" with "Description" = "A_Desc", "Automatic Ext. Texts" = TRUE, Extended Text = "A_ExtText"
      // [GIVEN] Item "B" with "Description" = "B_Desc", "Automatic Ext. Texts" = TRUE, Extended Text = "B_ExtText"
      CreateItemWithAutoText(ParentItem,ParentItemExtText);
      CreateItemWithAutoText(ChildItem,ChildItemExtText);
      // [GIVEN] BOM Component: parent item "A" with child item "B"
      CreateBOMComponent(BOMComponent,ParentItem."No.",BOMComponent.Type::Item,ChildItem."No.");
      // [GIVEN] Sales Order with item "A" (line1) and auto inserted item's auto text "A_ExtText" (line2)
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,
        LibrarySales.CreateCustomerNo,ParentItem."No.",LibraryRandom.RandInt(10));
      TransferSalesLineExtendedText(SalesLine);

      // [WHEN] Perform Item's Sales Line "Explode BOM" action
      LibrarySales.ExplodeBOM(SalesLine);

      // [THEN] Sales Lines are:
      // [THEN] Line1: Type = "", No = "", Description = "A_Desc", BOM Item No = "A"
      // [THEN] Line2: Type = "", No = "", Description = "A_ExtText", BOM Item No = ""
      // [THEN] Line3: Type = Item, No = "B", Description = "B_Desc", BOM Item No = "A"
      // [THEN] Line4: Type = "", No = "", Description = "B_ExtText", BOM Item No = ""
      VerifySalesLinesAfterExplodeBOMWithAutoExtTexts(SalesLine,ParentItem,ChildItem,ParentItemExtText,ChildItemExtText);
    END;

    LOCAL PROCEDURE Initialize@29();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;
      IF Initialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      NoSeriesSetup;
      CreateLocationSetup;
      ItemJournalSetup;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");

      Initialized := TRUE
    END;

    LOCAL PROCEDURE NoSeriesSetup@74();
    VAR
      PurchasesPayablesSetup@1003 : Record 312;
      SalesReceivablesSetup@1004 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Credit Memo Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Blanket Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Posted Shipment Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Return Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Blanket Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@21();
    BEGIN
      CLEAR(ItemJournalTemplate);
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      CLEAR(ItemJournalBatch);
      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@88(ExactCostReversingMandatory@1000 : Boolean);
    VAR
      SalesReceivablesSetup@1002 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Exact Cost Reversing Mandatory",ExactCostReversingMandatory);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationSetup@45();
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationSilver);
      LocationSilver."Bin Mandatory" := TRUE;  // Skip validate trigger for bin mandatory to improve performance.
      LocationSilver.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@47(VAR ItemJournalLine@1002 : Record 83;ItemNo@1001 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
    END;

    LOCAL PROCEDURE UpdateItemInventory@17(ItemNo@1000 : Code[20];Quantity@1001 : Decimal);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,ItemNo,Quantity);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateItemInventoryWithLocationAndBin@38(ItemNo@1000 : Code[20];LocationCode@1003 : Code[10];BinCode@1004 : Code[20];Quantity@1001 : Decimal);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE DiscountCopyDocumentSales@3(VAR Item@1000 : Record 27;OldLineDiscountPercent@1001 : Decimal;OldUnitPrice@1002 : Decimal;VAR OldLineDiscountAmount@1003 : Decimal;VAR NewLineDiscountPercent@1004 : Decimal;VAR NewUnitPrice@1005 : Decimal;VAR NewLineDiscountAmount@1006 : Decimal);
    VAR
      SalesHeader@1007 : Record 36;
      SalesLine@1008 : Record 37;
      SalesReceivablesSetup@1009 : Record 311;
      CustomerNo@1011 : Code[20];
      DocumentType@1012 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      DocumentNo@1010 : Code[20];
    BEGIN
      CustomerNo := LibrarySales.CreateCustomerNo;

      // Create Sales Invoice.
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice,CustomerNo,Item."No.",LibraryRandom.RandDec(10,2));
      SalesLine.VALIDATE("Unit Price",OldUnitPrice); // any decimal value
      SalesLine.VALIDATE("Line Discount %",OldLineDiscountPercent);
      OldLineDiscountAmount := SalesLine."Line Discount Amount";
      SalesLine.MODIFY(TRUE);

      // Post invoice.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);

      // Enable option 'Exact Cost Reversal'
      SalesReceivablesSetup.GET;
      UpdateSalesReceivablesSetup(TRUE);

      // Create a Credit Memo and copy document from old Posted Invoice.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustomerNo);
      LibrarySales.CopySalesDocument(SalesHeader,DocumentType::"Posted Invoice",DocumentNo,TRUE,FALSE);

      // Return the required figures.
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.FINDFIRST;
      NewLineDiscountPercent := SalesLine."Line Discount %";
      NewUnitPrice := SalesLine."Unit Price";
      NewLineDiscountAmount := SalesLine."Line Discount Amount";

      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Exact Cost Reversing Mandatory");
    END;

    LOCAL PROCEDURE DiscountCopyDocumentPurch@4(VAR Item@1006 : Record 27;OldLineDiscountPercent@1005 : Decimal;OldUnitCost@1004 : Decimal;VAR OldLineDiscountAmount@1003 : Decimal;VAR NewLineDiscountPercent@1002 : Decimal;VAR NewUnitCost@1001 : Decimal;VAR NewLineDiscountAmount@1000 : Decimal);
    VAR
      PurchaseHeader@1011 : Record 38;
      PurchaseLine@1010 : Record 39;
      PurchInvHeader@1008 : Record 122;
      VendorNo@1009 : Code[20];
      OldPurchInvoiceNo@1007 : Code[20];
      DocumentType@1013 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
    BEGIN
      VendorNo := LibraryPurchase.CreateVendorNo;

      // Create purchase invoice.
      CreatePurchaseInvoiceHeader(PurchaseHeader,VendorNo);
      OldPurchInvoiceNo := PurchaseHeader."No.";
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));
      PurchaseLine.VALIDATE("Direct Unit Cost",OldUnitCost); // any decimal value
      PurchaseLine.VALIDATE("Line Discount %",OldLineDiscountPercent);
      OldLineDiscountAmount := PurchaseLine."Line Discount Amount";
      PurchaseLine.MODIFY(TRUE);

      // post invoice.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // Create a Credit Memo and copy document from old Posted Invoice.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",VendorNo);
      PurchInvHeader.SETRANGE("Pre-Assigned No.",OldPurchInvoiceNo);
      PurchInvHeader.FINDLAST;
      LibraryPurchase.CopyPurchaseDocument(PurchaseHeader,DocumentType::"Posted Invoice",PurchInvHeader."No.",TRUE,FALSE);

      // Return the required figures.
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.FINDFIRST;
      NewLineDiscountPercent := PurchaseLine."Line Discount %";
      NewUnitCost := PurchaseLine."Direct Unit Cost";
      NewLineDiscountAmount := PurchaseLine."Line Discount Amount";
    END;

    LOCAL PROCEDURE CreateSalesDocument@5(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1002 : Option;CustomerNo@1003 : Code[20];ItemNo@1004 : Code[20];Quantity@1005 : Decimal);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      SalesHeader.VALIDATE(
        "External Document No.",LibraryUtility.GenerateRandomCode(SalesHeader.FIELDNO("External Document No."),DATABASE::"Sales Header"));
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateSalesOrder@25(VAR SalesHeader@1002 : Record 36;VAR SalesLine@1003 : Record 37;SalesItemNo@1004 : Code[20];CustomerNo@1000 : Code[20]);
    VAR
      Location@1001 : Record 14;
    BEGIN
      // Create Sales Order for Parent item.
      LibraryWarehouse.CreateLocation(Location);
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CustomerNo,SalesItemNo,LibraryRandom.RandDec(10,2));
      UpdateLocationOnSalesLine(SalesLine,Location.Code);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@8(VAR PurchaseHeader@1005 : Record 38;VAR PurchaseLine@1004 : Record 39;DocumentType@1003 : Option;VendorNo@1002 : Code[20];ItemNo@1001 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreatePurchOrder@32(VAR PurchaseHeader@1004 : Record 38;VAR PurchaseLine@1003 : Record 39;ItemNo@1002 : Code[20];VendorNo@1000 : Code[20]);
    VAR
      Location@1001 : Record 14;
    BEGIN
      // Create purchase order for Parent item.
      LibraryWarehouse.CreateLocation(Location);
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,VendorNo,ItemNo,LibraryRandom.RandDec(10,2));
      PurchaseLine.VALIDATE("Location Code",Location.Code);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemBudgetEntry@16(Item@1001 : Record 27;Date@1005 : Date;DepartmentCode@1002 : Code[20];ProjectCode@1003 : Code[20];CustomerGroupCode@1004 : Code[20]);
    VAR
      ItemBudgetEntry@1000 : Record 7134;
    BEGIN
      LibraryInventory.CreateItemBudgetEntry(
        ItemBudgetEntry,ItemBudgetEntry."Analysis Area"::Sales,FindItemBudgetName,Date,Item."No.");
      ItemBudgetEntry.VALIDATE("Source Type",ItemBudgetEntry."Source Type"::Customer);
      ItemBudgetEntry.VALIDATE("Source No.",LibrarySales.CreateCustomerNo);
      ItemBudgetEntry.VALIDATE("Global Dimension 1 Code",DepartmentCode);
      ItemBudgetEntry.VALIDATE("Global Dimension 2 Code",ProjectCode);
      ItemBudgetEntry.VALIDATE(Quantity,1);  // Value is important for Test.
      ItemBudgetEntry.VALIDATE("Cost Amount",LibraryRandom.RandDec(100,2));
      ItemBudgetEntry.VALIDATE("Sales Amount",LibraryRandom.RandDec(100,2));
      ItemBudgetEntry.VALIDATE("Budget Dimension 1 Code",CustomerGroupCode);
      ItemBudgetEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDimForBudgetEntry@13(DimensionCode@1002 : Code[20];DimensionCode2@1003 : Code[20];DimensionCode3@1004 : Code[20];DimensionCode4@1005 : Code[20];DimensionCode5@1006 : Code[20]);
    VAR
      SelectedDimension@1001 : Record 369;
      Object@1000 : Record 2000000001;
    BEGIN
      SelectedDimension.SETRANGE("User ID",USERID);
      SelectedDimension.DELETEALL(TRUE);
      LibraryDimension.CreateSelectedDimension(
        SelectedDimension,Object.Type::Report,REPORT::"Date Comp. Item Budget Entries",'',DimensionCode);
      LibraryDimension.CreateSelectedDimension(
        SelectedDimension,Object.Type::Report,REPORT::"Date Comp. Item Budget Entries",'',DimensionCode2);
      LibraryDimension.CreateSelectedDimension(
        SelectedDimension,Object.Type::Report,REPORT::"Date Comp. Item Budget Entries",'',DimensionCode3);
      LibraryDimension.CreateSelectedDimension(
        SelectedDimension,Object.Type::Report,REPORT::"Date Comp. Item Budget Entries",'',DimensionCode4);
      LibraryDimension.CreateSelectedDimension(
        SelectedDimension,Object.Type::Report,REPORT::"Date Comp. Item Budget Entries",'',DimensionCode5);
    END;

    LOCAL PROCEDURE CreateBOMComponent@39(VAR BOMComponent@1003 : Record 90;ParentItemNo@1002 : Code[20];Type@1001 : Option;No@1000 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateBOMComponent(BOMComponent,ParentItemNo,Type,No,1,'');
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceHeader@126(VAR PurchaseHeader@1000 : Record 38;VendorNo@1001 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasure@185(VAR ItemUnitOfMeasure@1004 : Record 5404;ItemNo@1000 : Code[20];UnitOfMeasureCode@1001 : Code[10];QtyPerUnitOfMeasure@1003 : Decimal);
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,ItemNo,UnitOfMeasureCode,QtyPerUnitOfMeasure);
    END;

    LOCAL PROCEDURE CreateBOMComponentWithUOM@206(ParentItemNo@1001 : Code[20];ChildItemNo@1002 : Code[20];QuantityPer@1003 : Decimal;UnitOfMeasureCode@1004 : Code[10];VariantCode@1005 : Code[10]);
    VAR
      BOMComponent@1000 : Record 90;
    BEGIN
      CreateBOMComponent(BOMComponent,ParentItemNo,BOMComponent.Type::Item,ChildItemNo);
      BOMComponent.VALIDATE("Quantity per",QuantityPer);
      BOMComponent.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      BOMComponent.VALIDATE("Variant Code",VariantCode);
      BOMComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ClearEntries@7();
    VAR
      ItemBudgetEntry@1000 : Record 7134;
      DateComprRegister@1001 : Record 87;
    BEGIN
      ItemBudgetEntry.DELETEALL(TRUE);
      DateComprRegister.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE FindItemBudgetName@1056() : Code[10];
    VAR
      ItemBudgetName@1000 : Record 7132;
    BEGIN
      ItemBudgetName.SETRANGE("Analysis Area",ItemBudgetName."Analysis Area"::Sales);
      ItemBudgetName.SETRANGE(Blocked,FALSE);
      ItemBudgetName.FINDFIRST;
      EXIT(ItemBudgetName.Name);
    END;

    LOCAL PROCEDURE TrimSpaces@19(String@1000 : Text[250]) Result : Text[250];
    BEGIN
      Result := DELCHR(String,'<'); // delete leading space chars
      Result := DELCHR(String,'>'); // delete trailing space chars
    END;

    LOCAL PROCEDURE UpdateChildItem@50(VAR Item@1000 : Record 27;UnitOfMeasureCode@1001 : Code[10];UnitPrice@1002 : Decimal;LastDirectCost@1003 : Decimal);
    BEGIN
      Item.VALIDATE("Base Unit of Measure",UnitOfMeasureCode);
      Item.VALIDATE("Sales Unit of Measure",UnitOfMeasureCode);
      Item.VALIDATE("Unit Price",UnitPrice);
      Item.VALIDATE("Last Direct Cost",LastDirectCost);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithMultipleUOM@66(VAR Item@1000 : Record 27;VAR UnitOfMeasure@1001 : Record 204;VAR UnitOfMeasure2@1002 : Record 204;QtyPerUnitOfMeasure@1003 : Decimal);
    VAR
      ItemUnitOfMeasure@1004 : Record 5404;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure2);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",UnitOfMeasure.Code,1);  // Value is important for Test.
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",UnitOfMeasure2.Code,QtyPerUnitOfMeasure);
    END;

    LOCAL PROCEDURE CreateItemWithAutoText@70(VAR Item@1000 : Record 27;VAR ItemExtText@1001 : Text[50]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE(Description,LibraryUtility.GenerateGUID);
      Item.VALIDATE("Automatic Ext. Texts",TRUE);
      Item.MODIFY(TRUE);
      CreateItemExtendedText(Item."No.",ItemExtText);
    END;

    LOCAL PROCEDURE CreateItemExtendedText@55(ItemNo@1001 : Code[20];VAR ExtText@1003 : Text[50]);
    VAR
      ExtendedTextHeader@1000 : Record 279;
      ExtendedTextLine@1002 : Record 280;
    BEGIN
      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,ItemNo);
      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      ExtendedTextLine.VALIDATE(Text,LibraryUtility.GenerateGUID);
      ExtendedTextLine.MODIFY(TRUE);
      ExtText := ExtendedTextLine.Text;
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithCrossRefNo@33(ItemCrossReference@1002 : Record 5717;VAR PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1004 : Record 39;
    BEGIN
      // Create and Post Purchase Order
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,'',
        ItemCrossReference."Item No.",LibraryRandom.RandDec(10,2));
      PurchaseLine.VALIDATE("Cross-Reference No.",ItemCrossReference."Cross-Reference No.");
      PurchaseLine.VALIDATE("Unit Cost (LCY)",LibraryRandom.RandDec(10,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE DiscontinueItemCrossReference@31(VAR ItemCrossReference@1000 : Record 5717);
    BEGIN
      // Update Item Cross Reference - Discontinue Bar Code as True.
      ItemCrossReference.VALIDATE("Discontinue Bar Code",TRUE);
      ItemCrossReference.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCrossRefNoSalesLine@26(SalesLine@1001 : Record 37;CrossReferenceNo@1000 : Code[20]);
    BEGIN
      // Set a Discontinued Cross Reference No. on Sales Line to generate an error.
      SalesLine.VALIDATE("Cross-Reference No.",CrossReferenceNo);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithReserveAlways@34(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE(Reserve,Item.Reserve::Always);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE TransferSalesLineExtendedText@76(SalesLine@1001 : Record 37);
    VAR
      TransferExtendedText@1000 : Codeunit 378;
    BEGIN
      IF TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,FALSE) THEN
        TransferExtendedText.InsertSalesExtText(SalesLine);
    END;

    LOCAL PROCEDURE UpdateLocationOnSalesLine@43(VAR SalesLine@1000 : Record 37;LocationCode@1001 : Code[10]);
    BEGIN
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityOnSalesLinePage@56(No@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      SalesOrder@1000 : TestPage 42;
    BEGIN
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",No);
      SalesOrder.SalesLines.Quantity.SETVALUE(Quantity);
    END;

    LOCAL PROCEDURE UndoShipmentOnPostedSalesShipmentPage@46(No@1001 : Code[20]);
    VAR
      PostedSalesShipment@1000 : TestPage 130;
    BEGIN
      PostedSalesShipment.OPENEDIT;
      PostedSalesShipment.FILTER.SETFILTER("No.",No);
      LibraryVariableStorage.Enqueue(UndoShipment);  // Enqueue Value for Confirm Handler.
      PostedSalesShipment.SalesShipmLines.UndoShipment.INVOKE;
    END;

    LOCAL PROCEDURE FindSalesShipmentHeader@57(VAR SalesShipmentHeader@1000 : Record 110;OrderNo@1001 : Code[20]);
    BEGIN
      SalesShipmentHeader.SETRANGE("Order No.",OrderNo);
      SalesShipmentHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyDimension@20(VAR ItemBudgetEntry@1000 : Record 7134;TotalNoOfRecords@1003 : Integer;DepartmentCodes@1001 : Text[250];ProjectCodes@1002 : Text[250]);
    VAR
      i@1004 : Integer;
    BEGIN
      Assert.AreEqual(TotalNoOfRecords,ItemBudgetEntry.COUNT,NoOfRecordsError);
      IF TotalNoOfRecords = 0 THEN
        EXIT;
      ItemBudgetEntry.FINDSET;
      REPEAT
        i += 1;
        Assert.AreEqual(TrimSpaces(SELECTSTR(i,DepartmentCodes)),ItemBudgetEntry."Global Dimension 1 Code",DimensionError);
        Assert.AreEqual(TrimSpaces(SELECTSTR(i,ProjectCodes)),ItemBudgetEntry."Global Dimension 2 Code",DimensionError);
      UNTIL ItemBudgetEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPurchUnitPrice@22(ItemNo@1003 : Text[30];QtyOfUOMPerUOM2@1004 : Decimal;UnitCostOnItemCard@1005 : Decimal;UnitPurchPrice@1006 : Decimal;UnitOfMeasureCode@1000 : Code[10];UnitOfMeasureCode2@1001 : Code[10]);
    VAR
      PurchaseLine@1002 : Record 39;
      PurchasePrice@1007 : Record 7012;
      ExpectedUnitPrice@1008 : Decimal;
    BEGIN
      PurchaseLine.SETRANGE("No.",ItemNo);
      PurchaseLine.FINDLAST;
      PurchaseLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
      PurchasePrice.SETRANGE("Item No.",ItemNo);
      PurchasePrice.FINDLAST;
      PurchaseLine.TESTFIELD("Variant Code",PurchasePrice."Variant Code");
      IF PurchasePrice."Unit of Measure Code" = UnitOfMeasureCode THEN
        ExpectedUnitPrice := UnitPurchPrice;
      IF PurchasePrice."Unit of Measure Code" = UnitOfMeasureCode2 THEN
        ExpectedUnitPrice := QtyOfUOMPerUOM2 * UnitCostOnItemCard;
      IF PurchasePrice."Unit of Measure Code" = '' THEN
        ExpectedUnitPrice := QtyOfUOMPerUOM2 * UnitPurchPrice;
      PurchaseLine.TESTFIELD("Direct Unit Cost",ExpectedUnitPrice);
    END;

    LOCAL PROCEDURE VerifyDateComprRegister@18(VAR DateComprRegister@1000 : Record 87;TotalNoOfRecords@1003 : Integer;NumsNewRecords@1001 : Text[250];NumsDelRecords@1002 : Text[250]);
    VAR
      i@1004 : Integer;
    BEGIN
      Assert.AreEqual(TotalNoOfRecords,DateComprRegister.COUNT,NoOfRecordsError);
      IF TotalNoOfRecords = 0 THEN
        EXIT;
      DateComprRegister.FINDSET;
      REPEAT
        i += 1;
        Assert.AreEqual(
          TrimSpaces(SELECTSTR(i,NumsNewRecords)),FORMAT(DateComprRegister."No. of New Records"),'Check created records');
        Assert.AreEqual(
          TrimSpaces(SELECTSTR(i,NumsDelRecords)),FORMAT(DateComprRegister."No. Records Deleted"),'Check deleted records');
      UNTIL DateComprRegister.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifySalesUnitPrice@30(ItemNo@1003 : Text[30];QtyOfUOMPerUOM2@1004 : Decimal;UnitPriceOnItemCard@1005 : Decimal;UnitSalesPrice@1006 : Decimal;UnitOfMeasureCode@1000 : Code[10];UnitOfMeasureCode2@1001 : Code[10]);
    VAR
      SalesLine@1007 : Record 37;
      SalesPrice@1008 : Record 7002;
      ExpectedUnitPrice@1002 : Decimal;
    BEGIN
      SalesLine.SETRANGE("No.",ItemNo);
      SalesLine.FINDLAST;
      SalesLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
      SalesPrice.SETRANGE("Item No.",ItemNo);
      SalesPrice.FINDLAST;
      SalesLine.TESTFIELD("Variant Code",SalesPrice."Variant Code");
      IF SalesPrice."Unit of Measure Code" = UnitOfMeasureCode THEN
        ExpectedUnitPrice := UnitSalesPrice;
      IF SalesPrice."Unit of Measure Code" = UnitOfMeasureCode2 THEN
        ExpectedUnitPrice := QtyOfUOMPerUOM2 * UnitPriceOnItemCard;
      IF SalesPrice."Unit of Measure Code" = '' THEN
        ExpectedUnitPrice := QtyOfUOMPerUOM2 * UnitSalesPrice;
      SalesLine.TESTFIELD("Unit Price",ExpectedUnitPrice);
    END;

    LOCAL PROCEDURE VerifyPurchaseLine@59(DocumentType@1000 : Option;DocumentNo@1001 : Code[20];ExpectedCount@1002 : Integer;LineDate@1005 : Date);
    VAR
      PurchaseLine@1003 : Record 39;
      ActualCount@1004 : Integer;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",DocumentType);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      ActualCount := PurchaseLine.COUNT;
      Assert.AreEqual(ExpectedCount,ActualCount,' Wrong number of sales lines ' + FORMAT(ActualCount));

      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.FINDSET;
      REPEAT
        Assert.AreEqual(LineDate,PurchaseLine."Expected Receipt Date",
          ' Wrong Shipment Date of purchase line ' + FORMAT(PurchaseLine."Line No."));
      UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifySalesLine@49(DocumentType@1000 : Option;DocumentNo@1001 : Code[20];ExpectedCount@1002 : Integer;LineDate@1005 : Date);
    VAR
      SalesLine@1003 : Record 37;
      ActualCount@1004 : Integer;
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      ActualCount := SalesLine.COUNT;
      Assert.AreEqual(ExpectedCount,ActualCount,' Wrong number of sales lines ' + FORMAT(ActualCount));

      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.FINDSET;
      REPEAT
        Assert.AreEqual(LineDate,SalesLine."Shipment Date",
          ' Wrong Shipment Date of sales line ' + FORMAT(SalesLine."Line No."));
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyValueEntriesForSalesOrder@14(DocumentNo@1000 : Code[20]);
    VAR
      ValueEntry@1003 : Record 5802;
      SalesInvoiceLine@1001 : Record 113;
    BEGIN
      // Verify that the Value of "Sales Amount (Actual)" field in Value Entries matches the value of "Amount" on Posted Sales Invoice line.
      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.FINDFIRST;
      ValueEntry.SETRANGE("Document No.",SalesInvoiceLine."Document No.");
      ValueEntry.SETRANGE("Document Line No.",SalesInvoiceLine."Line No.");
      ValueEntry.FINDFIRST;
      ValueEntry.TESTFIELD("Sales Amount (Actual)",SalesInvoiceLine.Amount);
    END;

    LOCAL PROCEDURE VerifyCrossRefNoInItemLedgerEntry@24(DocumentNo@1000 : Code[20];CrossReferenceNo@1002 : Code[20]);
    VAR
      ItemLedgerEntry@1004 : Record 32;
    BEGIN
      // Verify Cross Reference No. in Item Ledger Entry for Posted Receipt.
      ItemLedgerEntry.SETRANGE("Document Type",ItemLedgerEntry."Document Type"::"Purchase Receipt");
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD("Cross-Reference No.",CrossReferenceNo);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntry@64(ReferenceNo@1001 : Code[20];ItemNo@1002 : Code[20];EntryType@1003 : Option;Quantity@1004 : Decimal);
    VAR
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Reference Document",WarehouseEntry."Reference Document"::"Posted Shipment");
      WarehouseEntry.SETRANGE("Reference No.",ReferenceNo);
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.SETRANGE("Entry Type",EntryType);
      WarehouseEntry.FINDFIRST;
      WarehouseEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifySalesLineDetails@81(SalesLine@1000 : Record 37;ExpectedType@1001 : Option;ExpectedNo@1002 : Code[20];ExpectedBOMItemNo@1003 : Code[20];ExpectedDescription@1004 : Text[50]);
    BEGIN
      WITH SalesLine DO BEGIN
        Assert.AreEqual(ExpectedType,Type,FIELDCAPTION(Type));
        Assert.AreEqual(ExpectedNo,"No.",FIELDCAPTION("No."));
        Assert.AreEqual(ExpectedBOMItemNo,"BOM Item No.",FIELDCAPTION("BOM Item No."));
        Assert.AreEqual(ExpectedDescription,Description,FIELDCAPTION(Description));
      END;
    END;

    LOCAL PROCEDURE VerifySalesLinesAfterExplodeBOMWithAutoExtTexts@52(SalesLine@1000 : Record 37;ParentItem@1004 : Record 27;ChildItem@1001 : Record 27;ParentItemExtText@1005 : Text[50];ChildItemExtText@1007 : Text[50]);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine.SETRANGE("Document No.",SalesLine."Document No.");
      SalesLine.FINDSET;
      VerifySalesLineDetails(SalesLine,SalesLine.Type::" ",'',ParentItem."No.",ParentItem.Description);
      SalesLine.NEXT;
      VerifySalesLineDetails(SalesLine,SalesLine.Type::" ",'','',ParentItemExtText);
      SalesLine.NEXT;
      VerifySalesLineDetails(SalesLine,SalesLine.Type::Item,ChildItem."No.",ParentItem."No.",ChildItem.Description);
      SalesLine.NEXT;
      VerifySalesLineDetails(SalesLine,SalesLine.Type::" ",'','',ChildItemExtText);
    END;

    [StrMenuHandler]
    PROCEDURE RetrieveDimStrMenuHandler@27(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Options,'Retrieve dimensions from components') > 0,Options);
    END;

    [StrMenuHandler]
    PROCEDURE DimStrMenuHandler@41(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := 1;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerFALSE@62(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      Assert.IsTrue(STRPOS(Question,ExpectedMessage) > 0,Question);
      Reply := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTRUE@12(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      Assert.IsTrue(STRPOS(Question,ExpectedMessage) > 0,Question);
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [SCM]
      Unsupported version tags:
      CA: Unable to Execute
      DK: Unable to Execute
      IN: Unable to Execute
      NL: Unable to Execute
      US: Unable to Execute

      Tests for Sales And Receivables unit tests:

      Covers Test cases :
      -------------------------------------------------
       Test Function                            TFS ID
      -------------------------------------------------
       B34576_CopyDocPostedSalesInv             143037
       B34576_CopyDocSalesOrder                 143037
       B35809_SalesPriceUOMSame                 143111
       B35809_SalesPriceUOMDiff                 143111
       B35809_SalesPriceUOMBlank                143111
       B35809_PurchasePriceUOMSame              143111
       B35809_PurchasePriceUOMDiff              143111
       B35809_PurchasePriceUOMBlank             143111
       B43940_SameDimDateCompress               145126
       B43940_DiffDimDateCompress               145126
       B43974_SalesExplodeBOM                   144697
       B43974_PurchaseExplodeBOM                144697
       B44247_SalesCopyDocWithDisc              144617
       B44247_PurchaseCopyDocWithDisc           144617
       B44491_SalesBlanketOrder                 144624
       B44491_PurchaseBlanketOrder              144624
       ValueEntriesforSalesOrder                11616,143519
       ItemCrossReferenceOnPurchase             11611,143513
       ItemCrossReferenceErrorOnSales           11611,143513

      Covers Test cases : 294362
      ------------------------------------------------------------------
       Test Function                                         TFS ID
      ------------------------------------------------------------------
       SalesOrderWithAvailableReservedQuantity               127528
       SalesOrderWithoutAvailableReservedQuantity            127528
       UndoPostedSalesShipment                               127529
    }
    END.
  }
}

