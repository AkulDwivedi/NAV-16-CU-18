OBJECT Codeunit 134048 ERM Gen. Lines for Vendor
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 25=rimd;
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryJournals@1013 : Codeunit 131306;
      LibraryERM@1002 : Codeunit 131300;
      LibraryPurchase@1011 : Codeunit 130512;
      LibrarySales@1012 : Codeunit 130509;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1006 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      AmountToApplyLargerError@1004 : TextConst 'ENU="%1 must not be larger than %2 in %3 %4=''%5''."';
      ValidationError@1007 : TextConst 'ENU=Error must be same.';
      AmountEqualError@1010 : TextConst 'ENU=%1 must be %2 to %3.';
      GenJournalTemplateError@1008 : TextConst 'ENU=Gen. Journal Template name is blank.';
      GenJournalBatchError@1005 : TextConst 'ENU=Gen. Journal Batch name is blank.';
      UnknownError@1009 : TextConst 'ENU=Unknown Error.';
      WrongPaymentMethodCodeErr@1003 : TextConst 'ENU=Field Payment Method Code should be updated.';
      GenPostingTypeErr@1014 : TextConst 'ENU=Gen. Posting Type must not be';

    [Test]
    PROCEDURE EqualAmountToApplyOnInvoice@1();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Amount to Apply on Vendor Ledger On Posting Vendor Invoice and Apply Payment.

      // Setup.
      Initialize;

      // Create Journal Line and Apply and check Ledger Entry.
      CreateAndCheckEqualAmount(
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,-LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE EqualAmountToApplyOnCreditMemo@8();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Amount to Apply on Vendor Ledger On Posting Vendor Credit Memo and Apply Refund.

      // Setup.
      Initialize;

      // Create Journal Line and Apply and check Ledger Entry.
      CreateAndCheckEqualAmount(
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Document Type"::Refund,LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE LargeAmountToApplyOnInvoice@7();
    VAR
      GenJournalLine@1000 : Record 81;
      VendorLedgerEntry@1002 : Record 25;
      Amount@1003 : Decimal;
    BEGIN
      // Check Large Amount to Apply Error on Vendor Ledger On Posting Vendor Invoice and Apply Payment.

      // Setup: Create and Post General Line for Invoice and Payment.
      Initialize;
      Amount := -LibraryRandom.RandDec(100,2);
      CreateGenAndFindVendorEntry(
        VendorLedgerEntry,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,Amount);

      // Exercise: Validate Large Amount to Apply on Vendor Ledger Entry.
      ASSERTERROR VendorLedgerEntry.VALIDATE("Amount to Apply",Amount - LibraryRandom.RandDec(100,2));

      // Verify: Verify Amount to Apply Error on Vendor Ledger Entry and Delete General Line.
      VerifyAmountToApplyError(VendorLedgerEntry);
    END;

    [Test]
    PROCEDURE LargeAmountToApplyOnCreditMemo@11();
    VAR
      GenJournalLine@1000 : Record 81;
      VendorLedgerEntry@1002 : Record 25;
      Amount@1003 : Decimal;
    BEGIN
      // Check Large Amount to Apply Error on Vendor Ledger On Posting Vendor Credit Memo and Apply Refund.

      // Setup: Create and Post Credit Memo and Refund General Line.
      Initialize;
      Amount := LibraryRandom.RandDec(100,2);
      CreateGenAndFindVendorEntry(
        VendorLedgerEntry,GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Document Type"::Refund,Amount);

      // Exercise: Validate Large Amount to Apply on Vendor Ledger Entry.
      ASSERTERROR VendorLedgerEntry.VALIDATE("Amount to Apply",Amount + LibraryRandom.RandDec(100,2));

      // Verify: Verify Amount to Apply Error on Vendor Ledger Entry and Delete General Line.
      VerifyAmountToApplyError(VendorLedgerEntry);
    END;

    [Test]
    PROCEDURE LessAmountToApplyOnInvoice@6();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Less Amount to Apply on Vendor Ledger On Posting Vendor Invoice and Apply Payment.
      Initialize;
      CreateAndCheckLessAmount(
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,-LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE LessAmountToApplyOnCreditMemo@9();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Less Amount to Apply on Vendor Ledger On Posting Vendor Credit Memo and Apply Refund.
      Initialize;
      CreateAndCheckLessAmount(
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Document Type"::Refund,LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE InvoiceAmountAfterAppliesID@2();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Amount to Apply on Vendor Ledger after Posting Vendor Invoice and Set Applies to ID.
      Initialize;
      CreateAndSetAppliesToIDOnGen(GenJournalLine."Document Type"::Invoice,-LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE CreditMemoAmountAfterAppliesID@13();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Amount to Apply on Vendor Ledger after Posting Vendor Credit Memo and Set Applies to ID.
      Initialize;
      CreateAndSetAppliesToIDOnGen(GenJournalLine."Document Type"::"Credit Memo",LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE SetAppliesToIDOnInvoice@17();
    VAR
      VendorLedgerEntry@1003 : Record 25;
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Applies to ID field on Vendor Ledger after Posting Vendor Invoice and Set Applies to ID.

      // Setup.
      Initialize;
      CreateAndPostGeneralLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,-LibraryRandom.RandDec(100,2));

      // Exercise: Find Vendor Ledger Entry and Set Applies to ID.
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      LibraryERM.SetAppliestoIdVendor(VendorLedgerEntry);

      // Verify: Verify Applies to ID field Not Blank after Set Applied to ID in Vendor Ledger Entry.
      VendorLedgerEntry.SETFILTER("Applies-to ID",'<>''''');
      Assert.IsTrue(VendorLedgerEntry.FINDFIRST,'Applies to ID field must not be blank.');
    END;

    [Test]
    PROCEDURE GeneralJournalTemplateError@19();
    VAR
      GenJournalBatch@1000 : Record 232;
      StandardGeneralJournal@1001 : Record 750;
    BEGIN
      // Test error occurs on running Create Vendor Journal Lines Report without General Journal Template.

      // 1. Setup: Create General Journal Batch and Find Standard General Journal.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      StandardGeneralJournal.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      StandardGeneralJournal.FINDFIRST;

      // 2. Exercise: Run Create Vendor Journal Lines Report without General Journal Template.
      ASSERTERROR RunCreateVendorJournalLines('',GenJournalBatch.Name,StandardGeneralJournal.Code);

      // 3. Verify: Verify error occurs on running Create Vendor Journal Lines Report without General Journal Template.
      Assert.AreEqual(STRSUBSTNO(GenJournalTemplateError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE GeneralJournalBatchError@18();
    VAR
      GenJournalBatch@1000 : Record 232;
      StandardGeneralJournal@1001 : Record 750;
    BEGIN
      // Test error occurs on running Create Vendor Journal Lines Report without General Batch Name.

      // 1. Setup: Create General Journal Batch and Find Standard General Journal.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);
      StandardGeneralJournal.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      StandardGeneralJournal.FINDFIRST;

      // 2. Exercise: Run Create Vendor Journal Lines Report without General Batch Name.
      ASSERTERROR RunCreateVendorJournalLines(GenJournalBatch."Journal Template Name",'',StandardGeneralJournal.Code);

      // 3. Verify: Verify error occurs on running Create Vendor Journal Lines Report without General Batch Name.
      Assert.AreEqual(STRSUBSTNO(GenJournalBatchError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CreateVendorJournalLinesBatch@30();
    VAR
      GenJournalBatch@1001 : Record 232;
      StandardGeneralJournal@1000 : Record 750;
      Vendor@1003 : Record 23;
      GenJournalLine@1005 : Record 81;
      CreateVendorJournalLines@1002 : Report 8612;
    BEGIN
      // Test General Journal Lines are created for Vendor after running Create Vendor Journal Lines Report.

      // 1. Setup: Create Vendor and General Journal Batch, Find Standard General Journal.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      CreateGeneralJournalBatch(GenJournalBatch);
      StandardGeneralJournal.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      StandardGeneralJournal.FINDFIRST;

      // 2. Exercise: Run Create Vendor Journal Lines Report.
      COMMIT;  // COMMIT is required for Write Transaction Error.
      CLEAR(CreateVendorJournalLines);
      CreateVendorJournalLines.USEREQUESTPAGE(FALSE);
      Vendor.SETRANGE("No.",Vendor."No.");
      CreateVendorJournalLines.SETTABLEVIEW(Vendor);
      CreateVendorJournalLines.InitializeRequest(GenJournalLine."Document Type"::Invoice,WORKDATE,WORKDATE);
      CreateVendorJournalLines.InitializeRequestTemplate(
        GenJournalBatch."Journal Template Name",GenJournalBatch.Name,StandardGeneralJournal.Code);
      CreateVendorJournalLines.RUN;

      // 3. Verify: Verify General Journal Lines are created for vandor after running Create Vendor Journal Lines Report.
      VerifyVendorJournalLines(GenJournalBatch,StandardGeneralJournal.Code,Vendor."No.");
    END;

    [Test]
    PROCEDURE PostGeneralLineWithCorrection@57();
    VAR
      GenJournalLine@1003 : Record 81;
    BEGIN
      // Check that the application works properly when the Correction field is True in the General Journal line.

      // 1. Setup: Create General Journal line with Correction field is True.
      Initialize;
      CreateGeneralLineForCorrection(GenJournalLine);

      // 2. Exercise: Post General Journal Line with Correction check mark.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify Debit amount for Correction in Vendor Ledger Entry.
      VerifyLedgerEntryForCorrection(GenJournalLine);
    END;

    [Test]
    PROCEDURE VendorPaymentMethodCodeGeneralJnlLine@14();
    VAR
      GenJournalLine@1001 : Record 81;
      Vendor@1003 : Record 23;
    BEGIN
      // Setup.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);

      // Exercise.
      CreateGeneralJnlLineWithBalAcc(GenJournalLine,GenJournalLine."Bal. Account Type"::Vendor,Vendor."No.");

      // Verify.
      Assert.AreEqual(Vendor."Payment Method Code",GenJournalLine."Payment Method Code",WrongPaymentMethodCodeErr);
    END;

    [Test]
    PROCEDURE CustPaymentMethodCodeGeneralJnlLine@33();
    VAR
      GenJournalLine@1001 : Record 81;
      Customer@1003 : Record 18;
    BEGIN
      // Setup.
      Initialize;
      LibrarySales.CreateCustomer(Customer);

      // Exercise.
      CreateGeneralJnlLineWithBalAcc(GenJournalLine,GenJournalLine."Bal. Account Type"::Customer,Customer."No.");

      // Verify.
      Assert.AreEqual(Customer."Payment Method Code",GenJournalLine."Payment Method Code",WrongPaymentMethodCodeErr);
    END;

    [Test]
    PROCEDURE GenJournalPostErrorWhenCustAndGLAccountWithPurchGenType@22();
    VAR
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1001 : Record 81;
      DocumentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 363478] Gen. Journal should not be posted where one transaction includes both Customer and G/L Account of Purchase Gen. Posting Type.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);

      // [GIVEN] General Journal Line1: "Account Type" = "G/L Account" (with "Gen. Posting Type" = Purchase)
      LibraryJournals.CreateGenJournalLine2(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Account Type"::"G/L Account",
        CreateGLAccountNoPurchase,0,'',LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("Bill-to/Pay-to No.",'');
      GenJournalLine.MODIFY;
      DocumentNo := GenJournalLine."Document No.";

      // [GIVEN] General Journal Line2: "Account Type" = "Customer"
      LibraryJournals.CreateGenJournalLine2(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Account Type"::Customer,
        LibrarySales.CreateCustomerNo,0,'',-GenJournalLine.Amount);
      GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.MODIFY;

      // [WHEN] Post General Journal
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Error occurs: "Gen. Posting Type must not be Purchase in Gen. Journal Line..."
      Assert.ExpectedError(GenPostingTypeErr);
    END;

    [Test]
    PROCEDURE GenJournalPostErrorWhenVendAndGLAccountWithSalesGenType@26();
    VAR
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1001 : Record 81;
      DocumentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 363478] Gen. Journal should not be posted where one transaction includes both Vendor and G/L Account of Sale Gen. Posting Type.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch);

      // [GIVEN] General Journal Line1: "Account Type" = "G/L Account" (with "Gen. Posting Type" = Sale)
      LibraryJournals.CreateGenJournalLine2(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Account Type"::"G/L Account",
        CreateGLAccountNoSales,0,'',-LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("Bill-to/Pay-to No.",'');
      GenJournalLine.MODIFY;
      DocumentNo := GenJournalLine."Document No.";

      // [GIVEN] General Journal Line2: "Account Type" = "Vendor"
      LibraryJournals.CreateGenJournalLine2(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Account Type"::Vendor,
        LibraryPurchase.CreateVendorNo,0,'',-GenJournalLine.Amount);
      GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.MODIFY;

      // [WHEN] Post General Journal
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Error occurs: "Gen. Posting Type must not be Sale in Gen. Journal Line..."
      Assert.ExpectedError(GenPostingTypeErr);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGenJournalTemplate;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndCheckEqualAmount@15(DocumentType@1002 : Option;DocumentType2@1003 : Option;Amount@1004 : Decimal);
    VAR
      GenJournalLine@1000 : Record 81;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Exercise: Create and Post Invoice and Payment General Line.
      DocumentNo := CreatePostAndApplyGeneralLine(GenJournalLine,DocumentType,DocumentType2,Amount);

      // Verify: Amount to Apply on Vendor Ledger Entry.
      VerifyAmountToApplyVendorEntry(DocumentNo,-GenJournalLine.Amount,DocumentType);

      // Roll Back.
      GenJournalLine.DELETE(TRUE);
    END;

    LOCAL PROCEDURE CreateAndCheckLessAmount@25(DocumentType@1005 : Option;DocumentType2@1004 : Option;Amount@1003 : Decimal);
    VAR
      VendorLedgerEntry@1002 : Record 25;
      GenJournalLine@1000 : Record 81;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Setup: Create and Post Invoice and Payment General Line.
      DocumentNo := CreatePostAndApplyGeneralLine(GenJournalLine,DocumentType,DocumentType2,Amount);

      // Exercise: Find Posted Vendor Ledger Entry and Modify Amount to Apply with Less Value.
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo);
      VendorLedgerEntry.VALIDATE("Amount to Apply",-GenJournalLine.Amount / 2);
      VendorLedgerEntry.MODIFY(TRUE);

      // Verify: Verify Less Amount to Apply on Vendor Ledger Entry.
      VerifyAmountToApplyVendorEntry(DocumentNo,-GenJournalLine.Amount / 2,DocumentType);

      // Roll Back.
      GenJournalLine.DELETE(TRUE);
    END;

    LOCAL PROCEDURE CreatePostAndApplyGeneralLine@5(VAR GenJournalLine2@1003 : Record 81;DocumentType@1002 : Option;DocumentType2@1001 : Option;Amount@1000 : Decimal) : Code[20];
    VAR
      GenJournalLine@1007 : Record 81;
      GenJournalBatch@1004 : Record 232;
    BEGIN
      // Create General Line and Post.
      CreateAndPostGeneralLine(GenJournalLine,GenJournalBatch,DocumentType,Amount);

      // Create and Apply Previous Posted Entry.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine2,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType2,GenJournalLine."Account Type",
        GenJournalLine."Account No.",-GenJournalLine.Amount);
      GenJournalLine2.VALIDATE("Applies-to Doc. Type",DocumentType);
      GenJournalLine2.VALIDATE("Applies-to Doc. No.",GenJournalLine."Document No.");
      GenJournalLine2.MODIFY(TRUE);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreateGenAndFindVendorEntry@16(VAR VendorLedgerEntry@1005 : Record 25;DocumentType@1002 : Option;DocumentType2@1003 : Option;Amount@1004 : Decimal);
    VAR
      GenJournalLine@1000 : Record 81;
      DocumentNo@1001 : Code[20];
    BEGIN
      DocumentNo := CreatePostAndApplyGeneralLine(GenJournalLine,DocumentType,DocumentType2,Amount);
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@21(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalBatch.VALIDATE("Copy VAT Setup to Jnl. Lines",TRUE);
      GenJournalBatch.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
      GenJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndSetAppliesToIDOnGen@10(DocumentType@1008 : Option;Amount@1010 : Decimal);
    VAR
      VendorLedgerEntry@1005 : Record 25;
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1002 : Record 232;
    BEGIN
      // Setup: Create and Post General Line.
      CreateAndPostGeneralLine(GenJournalLine,GenJournalBatch,DocumentType,Amount);

      // Exercise: Find Vendor Ledger Entry and Set Applies to ID.
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,GenJournalLine."Document No.");
      LibraryERM.SetAppliestoIdVendor(VendorLedgerEntry);

      // Verify: Verify Amount to Apply field on Vendor Ledger Entry.
      VerifyAmountToApplyVendorEntry(GenJournalLine."Document No.",GenJournalLine.Amount,DocumentType);
    END;

    LOCAL PROCEDURE CreateAndPostGeneralLine@12(VAR GenJournalLine@1000 : Record 81;VAR GenJournalBatch@1002 : Record 232;DocumentType@1007 : Option;Amount@1008 : Decimal);
    VAR
      Vendor@1003 : Record 23;
    BEGIN
      // Create General Line and Post it.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryPurchase.CreateVendor(Vendor);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,GenJournalLine."Account Type"::Vendor,
        Vendor."No.",Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateGeneralLineForCorrection@23(VAR GenJournalLine@1000 : Record 81);
    VAR
      Vendor@1003 : Record 23;
      GenJournalBatch@1002 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryPurchase.CreateVendor(Vendor);
      // Random value is taken for Amount.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Vendor,Vendor."No.",LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE(Correction,TRUE);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJnlLineWithBalAcc@36(VAR GenJournalLine@1002 : Record 81;BalAccountType@1005 : Option;BalAccountNo@1000 : Code[20]);
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalTemplate@1003 : Record 80;
    BEGIN
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,
        BalAccountType,BalAccountNo,LibraryRandom.RandInt(3000));
    END;

    LOCAL PROCEDURE CreateGLAccountNoSales@28() : Code[20];
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      WITH GLAccount DO BEGIN
        VALIDATE("Gen. Posting Type","Gen. Posting Type"::Sale);
        MODIFY;
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateGLAccountNoPurchase@24() : Code[20];
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      WITH GLAccount DO BEGIN
        VALIDATE("Gen. Posting Type","Gen. Posting Type"::Purchase);
        MODIFY;
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE RunCreateVendorJournalLines@32(JournalTemplate@1001 : Code[10];BatchName@1002 : Code[10];TemplateCode@1003 : Code[10]);
    VAR
      GenJournalLine@1004 : Record 81;
      CreateVendorJournalLines@1000 : Report 8612;
    BEGIN
      COMMIT;  // COMMIT is required for Write Transaction Error.
      CLEAR(CreateVendorJournalLines);
      CreateVendorJournalLines.USEREQUESTPAGE(FALSE);
      CreateVendorJournalLines.InitializeRequest(GenJournalLine."Document Type"::Invoice,WORKDATE,WORKDATE);
      CreateVendorJournalLines.InitializeRequestTemplate(JournalTemplate,BatchName,TemplateCode);
      CreateVendorJournalLines.RUN;
    END;

    LOCAL PROCEDURE VerifyAmountToApplyError@20(VendorLedgerEntry@1002 : Record 25);
    BEGIN
      Assert.AreEqual(
        STRSUBSTNO(
          AmountToApplyLargerError,VendorLedgerEntry.FIELDCAPTION("Amount to Apply"),
          VendorLedgerEntry.FIELDCAPTION("Remaining Amount"),VendorLedgerEntry.TABLECAPTION,
          VendorLedgerEntry.FIELDCAPTION("Entry No."),VendorLedgerEntry."Entry No."),STRSUBSTNO(GETLASTERRORTEXT),ValidationError);
    END;

    LOCAL PROCEDURE VerifyAmountToApplyVendorEntry@3(DocumentNo@1001 : Code[20];AmountToApply@1002 : Decimal;DocumentType@1003 : Option);
    VAR
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo);
      Assert.AreEqual(
        AmountToApply,VendorLedgerEntry."Amount to Apply",
        STRSUBSTNO(AmountEqualError,VendorLedgerEntry.FIELDCAPTION("Amount to Apply"),AmountToApply,VendorLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVendorJournalLines@54(GenJournalBatch@1000 : Record 232;StandardJournalCode@1001 : Code[10];AccountNo@1002 : Code[20]);
    VAR
      GenJournalLine@1004 : Record 81;
      StandardGeneralJournalLine@1003 : Record 751;
    BEGIN
      StandardGeneralJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      StandardGeneralJournalLine.SETRANGE("Standard Journal Code",StandardJournalCode);
      StandardGeneralJournalLine.FINDSET;
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.FINDSET;
      REPEAT
        GenJournalLine.TESTFIELD("Document Type",GenJournalLine."Document Type"::Invoice);
        GenJournalLine.TESTFIELD("Account Type",GenJournalLine."Account Type"::Vendor);
        GenJournalLine.TESTFIELD("Account No.",AccountNo);
        GenJournalLine.TESTFIELD(Amount,StandardGeneralJournalLine.Amount);
        GenJournalLine.NEXT;
      UNTIL StandardGeneralJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyLedgerEntryForCorrection@89(GenJournalLine@1001 : Record 81);
    VAR
      VendorLedgerEntry@1002 : Record 25;
    BEGIN
      VendorLedgerEntry.SETRANGE("Vendor No.",GenJournalLine."Account No.");
      VendorLedgerEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      VendorLedgerEntry.FINDFIRST;
      VendorLedgerEntry.CALCFIELDS("Credit Amount");
      VendorLedgerEntry.TESTFIELD("Credit Amount",-GenJournalLine.Amount);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@49(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [General Journal]
      Test for Amount to Apply on Vendor Ledger Entry:
        1. Check Amount to Apply on Vendor Ledger On Posting Vendor Invoice and Apply Payment.
        2. Check Amount to Apply on Vendor Ledger On Posting Vendor Credit Memo and Apply Refund.
        3. Check Large Amount to Apply Error on Vendor Ledger On Posting Vendor Invoice and Apply Payment.
        4. Check Large Amount to Apply Error on Vendor Ledger On Posting Vendor Credit Memo and Apply Refund.
        5. Check Less Amount to Apply on Vendor Ledger On Posting Vendor Invoice and Apply Payment.
        6. Check Less Amount to Apply on Vendor Ledger On Posting Vendor Credit Memo and Apply Refund.
        7. Check Amount to Apply on Vendor Ledger after Posting Vendor Invoice and Set Applies to ID.
        8. Check Amount to Apply on Vendor Ledger after Posting Vendor Credit Memo and Set Applies to ID.
        9. Check Applies to ID field on Vendor Ledger after Posting Vendor Invoice and Set Applies to ID.
       10. Test error occurs on running Create Vendor Journal Lines Report without General Journal Template.
       11. Test error occurs on running Create Vendor Journal Lines Report without General Batch Name.
       13. Test General Journal Lines are created for Vendor after running Create Vendor Journal Lines Report.
       14. Check that the application works properly when the Correction field is True in the General Journal line.

        Covers Test Cases: WI - 235185
        --------------------------------------------------------------
        Test Function Name                      TFS ID
        --------------------------------------------------------------
        EqualAmountToApplyOnInvoice           125925 to 125928
        EqualAmountToApplyOnCreditMemo        125925, 125933 to 125936
        LargeAmountToApplyOnInvoice           125925 to 125928
        LargeAmountToApplyOnCreditMemo        125925, 125933 to 125936
        LessAmountToApplyOnInvoice            125925 to 125928
        LessAmountToApplyOnCreditMemo         125925, 125933 to 125936

        Covers Test Cases: WI - 235400
        -------------------------------------------------------------
        Test Function Name                      TFS ID
        -------------------------------------------------------------
        InvoiceAmountAfterAppliesID           125942 TO 125945
        CreditMemoAmountAfterAppliesID        125942,125950 to 125952

        Covers Test Cases: WI - 235402
        -------------------------------------------------------------
        Test Function Name                      TFS ID
        -------------------------------------------------------------
        SetAppliesToIDOnInvoice               125994 to 126001

        TFS_TS_ID = 251060
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                    TFS ID
        -------------------------------------------------------------------------------------------------------------
        GeneralJournalTemplateError,GeneralJournalBatchError                                                  129144
        CreateVendorJournalLinesBatch                                                                         129144

        TFS_TS_ID = 272729
        -------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                    TFS ID
        -------------------------------------------------------------------------------------------------------------
        PostGeneralLineWithCorrection                                                                         143148
    }
    END.
  }
}

