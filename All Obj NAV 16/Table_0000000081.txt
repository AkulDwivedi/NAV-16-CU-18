OBJECT Table 81 Gen. Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.49326,NAVIN9.00.00.49326;
  }
  PROPERTIES
  {
    Permissions=TableData 1221=rimd;
    OnInsert=BEGIN
               GenJnlAlloc.LOCKTABLE;
               LOCKTABLE;
               GenJnlTemplate.GET("Journal Template Name");
               GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
               "Posting No. Series" := GenJnlBatch."Posting No. Series";
               "Check Printed" := FALSE;

               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
             END;

    OnModify=BEGIN
               TESTFIELD("Check Printed",FALSE);
               IF ("Applies-to ID" = '') AND (xRec."Applies-to ID" <> '') THEN
                 ClearCustVendApplnEntry;
             END;

    OnDelete=VAR
               TaxEntry@1500000 : Record 13700;
               JnlBankCharges@1500001 : Record 16511;
             BEGIN
               ApprovalsMgmt.OnCancelGeneralJournalLineApprovalRequest(Rec);

               CheckNoCardTransactEntryExist(Rec);

               TESTFIELD("Check Printed",FALSE);

               ClearCustVendApplnEntry;
               ClearAppliedGenJnlLine;
               DeletePaymentFileErrors;
               ClearDataExchangeEntries(FALSE);

               GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
               GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
               GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
               GenJnlAlloc.DELETEALL;

               DeleteGenJnlNarration;

               DelExcCenvatClaimDetail;
               ExciseCenvatClaim.RESET;
               ExciseCenvatClaim.SETRANGE("Journal Template Name","Journal Template Name");
               ExciseCenvatClaim.SETRANGE("Journal Batch Name","Journal Batch Name");
               ExciseCenvatClaim.SETRANGE("Line No.","Line No.");
               ExciseCenvatClaim.SETRANGE("Document No.","Document No.");
               IF ExciseCenvatClaim.FINDFIRST THEN
                 ExciseCenvatClaim.DELETEALL;

               IF "Pay Sales Tax" THEN BEGIN
                 TaxEntry.RESET;
                 TaxEntry.SETRANGE(Paid,FALSE);
                 TaxEntry.SETRANGE("Pay Tax Document No.","Document No.");
                 IF TaxEntry.FINDSET THEN
                   REPEAT
                     TaxEntry."Pay Tax Document No." := '';
                     TaxEntry.MODIFY;
                   UNTIL TaxEntry.NEXT = 0;
               END;
               IF "Pay TDS" THEN BEGIN
                 TDSEntry.RESET;
                 TDSEntry.SETRANGE("TDS Paid",FALSE);
                 TDSEntry.SETRANGE("Pay TDS Document No.","Document No.");
                 IF TDSEntry.FINDSET THEN
                   REPEAT
                     TDSEntry."Pay TDS Document No." := '';
                     TDSEntry.MODIFY;
                   UNTIL TDSEntry.NEXT = 0;
               END;

               JnlBankCharges.RESET;
               JnlBankCharges.SETRANGE("Journal Template Name","Journal Template Name");
               JnlBankCharges.SETRANGE("Journal Batch Name","Journal Batch Name");
               JnlBankCharges.SETRANGE("Line No.","Line No.");
               JnlBankCharges.DELETEALL;
               DeferralUtilities.DeferralCodeOnDelete(
                 DeferralDocType::"G/L",
                 "Journal Template Name",
                 "Journal Batch Name",0,'',"Line No.");

               VALIDATE("Incoming Document Entry No.",0);
               ClearGSTFields(FALSE);
             END;

    OnRename=BEGIN
               ApprovalsMgmt.RenameApprovalEntries(xRec.RECORDID,RECORDID);

               CheckNoCardTransactEntryExist(Rec);
               TESTFIELD("Check Printed",FALSE);
               TESTFIELD("Pay VAT",FALSE);
               TESTFIELD("Refund VAT",FALSE);
             END;

    CaptionML=[ENU=Gen. Journal Line;
               ENN=Gen. Journal Line];
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="Gen. Journal Template";
                                                   CaptionML=[ENU=Journal Template Name;
                                                              ENN=Journal Template Name] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 3   ;   ;Account Type        ;Option        ;OnValidate=BEGIN
                                                                IF "Tax Type" <> "Tax Type" ::" " THEN BEGIN
                                                                  TESTFIELD("Location Code");
                                                                  TESTFIELD("GST Component Code");
                                                                  TESTFIELD("Account Type","Account Type"::"G/L Account");
                                                                  Location.GET("Location Code");
                                                                  GSTPostingSetup.GET(Location."State Code","GST Component Code");
                                                                  GSTPostingSetup.TESTFIELD("Receivable Account");
                                                                  "Account Type" := "Account Type"::"G/L Account";
                                                                  "Account No." := GSTPostingSetup."Receivable Account";
                                                                  "Bal. Account Type" := "Bal. Account Type"::"G/L Account";
                                                                  "GST Base Amount" := 0;
                                                                  "GST %" := 0;
                                                                END;
                                                                IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset",
                                                                                       "Account Type"::"IC Partner"]) AND
                                                                   ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset",
                                                                                            "Bal. Account Type"::"IC Partner"])
                                                                THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                VALIDATE("Account No.",'');
                                                                VALIDATE(Description,'');
                                                                VALIDATE("IC Partner G/L Acc. No.",'');
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN BEGIN
                                                                  VALIDATE("Gen. Posting Type","Gen. Posting Type"::" ");
                                                                  VALIDATE("Gen. Bus. Posting Group",'');
                                                                  VALIDATE("Gen. Prod. Posting Group",'');
                                                                END ELSE
                                                                  IF "Bal. Account Type" IN [
                                                                                             "Bal. Account Type"::"G/L Account","Account Type"::"Bank Account","Bal. Account Type"::"Fixed Asset"]
                                                                  THEN
                                                                    VALIDATE("Payment Terms Code",'');
                                                                UpdateSource;

                                                                IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                END;
                                                                IF xRec."Account Type" IN
                                                                   [xRec."Account Type"::Customer,xRec."Account Type"::Vendor]
                                                                THEN BEGIN
                                                                  "Bill-to/Pay-to No." := '';
                                                                  "Ship-to/Order Address Code" := '';
                                                                  "Sell-to/Buy-from No." := '';
                                                                  "VAT Registration No." := '';
                                                                END;

                                                                IF "Journal Template Name" <> '' THEN
                                                                  IF "Account Type" = "Account Type"::"IC Partner" THEN BEGIN
                                                                    GetTemplate;
                                                                    IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                                                                      FIELDERROR("Account Type");
                                                                  END;

                                                                IF xRec."Account No." <> "Account No." THEN
                                                                  TESTFIELD("Pay VAT",FALSE);
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") AND "Excise Charge" THEN
                                                                  ERROR(Text16352,FIELDCAPTION("Account Type"));
                                                                IF xRec."Account Type" = xRec."Account Type"::"G/L Account" THEN BEGIN
                                                                  "Service Tax Entry" := FALSE;
                                                                  "Service Tax Group Code" := '';
                                                                  "Service Tax Registration No." := '';
                                                                END;
                                                                IF "Account Type" <> "Account Type"::"G/L Account" THEN
                                                                  "CWIP G/L Type" := "CWIP G/L Type"::" ";
                                                                IF "Account Type" <> "Account Type"::Customer THEN
                                                                  VALIDATE("Credit Card No.",'');

                                                                VALIDATE("Deferral Code",'');
                                                                IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) AND
                                                                  "GST on Advance Payment" THEN BEGIN
                                                                  ClearGSTFields(FALSE);
                                                                  CalculateGSTAmounts;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Account Type;
                                                              ENN=Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                                    ENN=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 4   ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account" WHERE (Account Type=CONST(Posting),
                                                                                                                           Blocked=CONST(No))
                                                                                                                           ELSE IF (Account Type=CONST(Customer)) Customer
                                                                                                                           ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                                                                           ELSE IF (Account Type=CONST(Bank Account)) "Bank Account"
                                                                                                                           ELSE IF (Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                           ELSE IF (Account Type=CONST(IC Partner)) "IC Partner";
                                                   OnValidate=VAR
                                                                CompanyInfo@1280000 : Record 79;
                                                                Location@1500000 : Record 14;
                                                              BEGIN
                                                                "GST Bill-to/BuyFrom State Code" := '';
                                                                "GST Vendor Type" := "GST Vendor Type"::" ";
                                                                "GST Customer Type" := "GST Customer Type"::" ";
                                                                IF "Tax Type" <> "Tax Type"::" " THEN
                                                                  IF "Account No." <> xRec."Account No." THEN
                                                                    ERROR(CheckGLAccErr,"Tax Type");
                                                                IF "Account No." <> xRec."Account No." THEN BEGIN
                                                                  ClearAppliedAutomatically;
                                                                  VALIDATE("Job No.",'');
                                                                END;

                                                                IF xRec."Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"IC Partner"] THEN
                                                                  "IC Partner Code" := '';

                                                                IF "Account No." = '' THEN BEGIN
                                                                  CleanLine;
                                                                  EXIT;
                                                                END;
                                                                ClearGSTFields(FALSE);
                                                                CASE "Account Type" OF
                                                                  "Account Type"::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("Account No.");
                                                                      CheckGLAcc;
                                                                      ReadGLSetup;
                                                                      IF GLSetup."PLA Account" = "Account No." THEN
                                                                        PLA := TRUE;
                                                                      IF ReplaceDescription AND (NOT GLAcc."Omit Default Descr. in Jnl.") THEN
                                                                        UpdateDescription(GLAcc.Name)
                                                                      ELSE
                                                                        IF GLAcc."Omit Default Descr. in Jnl." THEN
                                                                          Description := '';
                                                                      IF ("Bal. Account No." = '') OR
                                                                         ("Bal. Account Type" IN
                                                                          ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"])
                                                                      THEN BEGIN
                                                                        "Posting Group" := '';
                                                                        "Salespers./Purch. Code" := '';
                                                                        "Payment Terms Code" := '';
                                                                      END;
                                                                      IF "Bal. Account No." = '' THEN
                                                                        "Currency Code" := '';
                                                                      IF NOT GenJnlBatch.GET("Journal Template Name","Journal Batch Name") OR
                                                                         GenJnlBatch."Copy VAT Setup to Jnl. Lines"
                                                                      THEN BEGIN
                                                                        "Gen. Posting Type" := GLAcc."Gen. Posting Type";
                                                                        "Gen. Bus. Posting Group" := GLAcc."Gen. Bus. Posting Group";
                                                                        "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                        "VAT Bus. Posting Group" := GLAcc."VAT Bus. Posting Group";
                                                                        "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      END;
                                                                      "Tax Area Code" := GLAcc."Tax Area Code";
                                                                      "Tax Liable" := GLAcc."Tax Liable";
                                                                      "Tax Group Code" := GLAcc."Tax Group Code";
                                                                      IF "Posting Date" <> 0D THEN
                                                                        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
                                                                          ClearPostingGroups;

                                                                      IF GLAcc."Service Tax Group Code" <> '' THEN BEGIN
                                                                        "Service Tax Entry" := TRUE;
                                                                        "Service Tax Group Code" := GLAcc."Service Tax Group Code";
                                                                        CompanyInfo.GET;
                                                                        "Service Tax Registration No." := CompanyInfo."Service Tax Registration No.";
                                                                        IF "Location Code" <> '' THEN BEGIN
                                                                          Location.GET("Location Code");
                                                                          "Service Tax Registration No." := Location."Service Tax Registration No.";
                                                                        END;
                                                                        UpdatePoT;
                                                                      END;
                                                                      VALIDATE("Deferral Code",GLAcc."Default Deferral Template Code");
                                                                    END;
                                                                  "Account Type"::Customer:
                                                                    BEGIN
                                                                      Cust.GET("Account No.");
                                                                      Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      IF Cust."IC Partner Code" <> '' THEN BEGIN
                                                                        IF GenJnlTemplate.GET("Journal Template Name") THEN;
                                                                        IF (Cust."IC Partner Code" <> '' ) AND ICPartner.GET(Cust."IC Partner Code") THEN BEGIN
                                                                          ICPartner.CheckICPartnerIndirect(FORMAT("Account Type"),"Account No.");
                                                                          "IC Partner Code" := Cust."IC Partner Code";
                                                                        END;
                                                                      END;
                                                                      "Nature of Services" := Cust."Nature of Services";
                                                                      UpdateDescription(Cust.Name);
                                                                      "GST Bill-to/BuyFrom State Code" := Cust."State Code";
                                                                      "Payment Method Code" := Cust."Payment Method Code";
                                                                      VALIDATE("Recipient Bank Account",Cust."Preferred Bank Account");
                                                                      "Posting Group" := Cust."Customer Posting Group";
                                                                      "Salespers./Purch. Code" := Cust."Salesperson Code";
                                                                      "Payment Terms Code" := Cust."Payment Terms Code";
                                                                      VALIDATE("Bill-to/Pay-to No.","Account No.");
                                                                      VALIDATE("Sell-to/Buy-from No.","Account No.");
                                                                      "GST Customer Type" := Cust."GST Customer Type";
                                                                      IF "GST Customer Type" = "GST Customer Type"::Unregistered THEN
                                                                        "Nature of Supply" := "Nature of Supply"::B2C;
                                                                      IF NOT SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
                                                                        "Currency Code" := Cust."Currency Code";
                                                                      ClearPostingGroups;
                                                                      IF (Cust."Bill-to Customer No." <> '') AND (Cust."Bill-to Customer No." <> "Account No.") THEN
                                                                        IF NOT CONFIRM(Text014,FALSE,Cust.TABLECAPTION,Cust."No.",Cust.FIELDCAPTION("Bill-to Customer No."),
                                                                             Cust."Bill-to Customer No.")
                                                                        THEN
                                                                          ERROR('');
                                                                      VALIDATE("Payment Terms Code");
                                                                      CheckPaymentTolerance;
                                                                      UpdatePoT;
                                                                    END;
                                                                  "Account Type"::Vendor:
                                                                    BEGIN
                                                                      Vend.GET("Account No.");
                                                                      Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      IF Vend."IC Partner Code" <> '' THEN BEGIN
                                                                        IF GenJnlTemplate.GET("Journal Template Name") THEN;
                                                                        IF (Vend."IC Partner Code" <> '') AND ICPartner.GET(Vend."IC Partner Code") THEN BEGIN
                                                                          ICPartner.CheckICPartnerIndirect(FORMAT("Account Type"),"Account No.");
                                                                          "IC Partner Code" := Vend."IC Partner Code";
                                                                        END;
                                                                      END;
                                                                      UpdateDescription(Vend.Name);
                                                                      "Payment Method Code" := Vend."Payment Method Code";
                                                                      "Creditor No." := Vend."Creditor No.";
                                                                      VALIDATE("Recipient Bank Account",Vend."Preferred Bank Account");
                                                                      "Posting Group" := Vend."Vendor Posting Group";
                                                                      "Salespers./Purch. Code" := Vend."Purchaser Code";
                                                                      "Payment Terms Code" := Vend."Payment Terms Code";
                                                                      "GST Bill-to/BuyFrom State Code" := Vend."State Code";
                                                                      VALIDATE("Bill-to/Pay-to No.","Account No.");
                                                                      VALIDATE("Sell-to/Buy-from No.","Account No.");
                                                                      "GST Vendor Type" := Vend."GST Vendor Type";
                                                                      IF NOT SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
                                                                        "Currency Code" := Vend."Currency Code";
                                                                      ClearPostingGroups;
                                                                      IF (Vend."Pay-to Vendor No." <> '') AND (Vend."Pay-to Vendor No." <> "Account No.") AND
                                                                         NOT HideValidationDialog
                                                                      THEN
                                                                        IF NOT CONFIRM(Text014,FALSE,Vend.TABLECAPTION,Vend."No.",Vend.FIELDCAPTION("Pay-to Vendor No."),
                                                                             Vend."Pay-to Vendor No.")
                                                                        THEN
                                                                          ERROR('');
                                                                      VALIDATE("Payment Terms Code");
                                                                      CheckPaymentTolerance;
                                                                      UpdatePoT;
                                                                    END;
                                                                  "Account Type"::"Bank Account":
                                                                    BEGIN
                                                                      BankAcc.GET("Account No.");
                                                                      BankAcc.TESTFIELD(Blocked,FALSE);
                                                                      IF ReplaceDescription THEN
                                                                        UpdateDescription(BankAcc.Name);
                                                                      IF ("Bal. Account No." = '') OR
                                                                         ("Bal. Account Type" IN
                                                                          ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"])
                                                                      THEN BEGIN
                                                                        "Posting Group" := '';
                                                                        "Salespers./Purch. Code" := '';
                                                                        "Payment Terms Code" := '';
                                                                      END;
                                                                      IF BankAcc."Currency Code" = '' THEN BEGIN
                                                                        IF "Bal. Account No." = '' THEN
                                                                          "Currency Code" := '';
                                                                      END ELSE
                                                                        IF SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
                                                                          BankAcc.TESTFIELD("Currency Code","Currency Code")
                                                                        ELSE
                                                                          "Currency Code" := BankAcc."Currency Code";
                                                                      ClearPostingGroups;
                                                                    END;
                                                                  "Account Type"::"Fixed Asset":
                                                                    BEGIN
                                                                      FA.GET("Account No.");
                                                                      FA.TESTFIELD(Blocked,FALSE);
                                                                      FA.TESTFIELD(Inactive,FALSE);
                                                                      FA.TESTFIELD("Budgeted Asset",FALSE);
                                                                      UpdateDescription(FA.Description);
                                                                      IF "Depreciation Book Code" = '' THEN BEGIN
                                                                        FASetup.GET;
                                                                        "Depreciation Book Code" := FASetup."Default Depr. Book";
                                                                        IF NOT FADeprBook.GET("Account No.","Depreciation Book Code") THEN
                                                                          "Depreciation Book Code" := '';
                                                                      END;
                                                                      IF "Depreciation Book Code" <> '' THEN BEGIN
                                                                        FADeprBook.GET("Account No.","Depreciation Book Code");
                                                                        "Posting Group" := FADeprBook."FA Posting Group";
                                                                      END;
                                                                      GetFAVATSetup;
                                                                      GetFAAddCurrExchRate;
                                                                    END;
                                                                  "Account Type"::"IC Partner":
                                                                    BEGIN
                                                                      ICPartner.GET("Account No.");
                                                                      ICPartner.CheckICPartner;
                                                                      UpdateDescription(ICPartner.Name);
                                                                      IF ("Bal. Account No." = '') OR ("Bal. Account Type" = "Bal. Account Type"::"G/L Account") THEN
                                                                        "Currency Code" := ICPartner."Currency Code";
                                                                      IF ("Bal. Account Type" = "Bal. Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
                                                                        "Currency Code" := ICPartner."Currency Code";
                                                                      ClearPostingGroups;
                                                                      "IC Partner Code" := "Account No.";
                                                                    END;
                                                                END;

                                                                VALIDATE("Currency Code");
                                                                VALIDATE("VAT Prod. Posting Group");
                                                                UpdateLineBalance;
                                                                UpdateSource;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                VALIDATE("IC Partner G/L Acc. No.",GetDefaultICPartnerGLAccNo);
                                                                ValidateApplyRequirements(Rec);
                                                                DelExcCenvatClaimDetail;
                                                              END;

                                                   CaptionML=[ENU=Account No.;
                                                              ENN=Account No.] }
    { 5   ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Document Date","Posting Date");
                                                                VALIDATE("Currency Code");
                                                                ClearGSTFields(FALSE);

                                                                IF ("Posting Date" <> xRec."Posting Date") AND (Amount <> 0) THEN
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);

                                                                ValidateApplyRequirements(Rec);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;

                                                                IF "Deferral Code" <> '' THEN
                                                                  VALIDATE("Deferral Code");
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date];
                                                   ClosingDates=Yes }
    { 6   ;   ;Document Type       ;Option        ;OnValidate=BEGIN
                                                                IF "Tax Type" <> "Tax Type" ::" " THEN
                                                                  TESTFIELD("Document Type","Document Type"::" ");
                                                                VALIDATE("Payment Terms Code");
                                                                IF "Account No." <> '' THEN
                                                                  CASE "Account Type" OF
                                                                    "Account Type"::Customer:
                                                                      BEGIN
                                                                        Cust.GET("Account No.");
                                                                        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      END;
                                                                    "Account Type"::Vendor:
                                                                      BEGIN
                                                                        Vend.GET("Account No.");
                                                                        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      END;
                                                                  END;
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Account Type"::Customer:
                                                                      BEGIN
                                                                        Cust.GET("Bal. Account No.");
                                                                        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      END;
                                                                    "Account Type"::Vendor:
                                                                      BEGIN
                                                                        Vend.GET("Bal. Account No.");
                                                                        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      END;
                                                                  END;
                                                                UpdateSalesPurchLCY;
                                                                ValidateApplyRequirements(Rec);
                                                                CalculateServiceTax;
                                                                ClearGSTFields(FALSE);
                                                                IF NOT ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) THEN
                                                                  VALIDATE("Credit Card No.",'');
                                                              END;

                                                   CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 7   ;   ;Document No.        ;Code20        ;OnValidate=BEGIN
                                                                CheckNoCardTransactEntryExist(xRec);
                                                                IF "Pay TDS" THEN
                                                                  IF xRec."Document No." <> "Document No." THEN BEGIN
                                                                    TDSEntry.RESET;
                                                                    TDSEntry.SETRANGE("TDS Paid",FALSE);
                                                                    TDSEntry.SETRANGE("Pay TDS Document No.",xRec."Document No.");
                                                                    IF TDSEntry.FINDSET THEN
                                                                      REPEAT
                                                                        TDSEntry."Pay TDS Document No." := "Document No.";
                                                                        TDSEntry.MODIFY;
                                                                      UNTIL TDSEntry.NEXT = 0;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 8   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 10  ;   ;VAT %               ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "VAT Amount" :=
                                                                        ROUND(Amount * "VAT %" / (100 + "VAT %"),Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount - "VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    "VAT Amount" := Amount;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) AND
                                                                       "Use Tax"
                                                                    THEN BEGIN
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                    END ELSE BEGIN
                                                                      "VAT Amount" :=
                                                                        Amount -
                                                                        SalesTaxCalculate.ReverseCalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",
                                                                          "Posting Date",Amount,Quantity,"Currency Factor");
                                                                      IF Amount - "VAT Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / (Amount - "VAT Amount"),0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" :=
                                                                        ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;
                                                                "VAT Base Amount" := Amount - "VAT Amount";
                                                                "VAT Difference" := 0;

                                                                IF "Currency Code" = '' THEN
                                                                  "VAT Amount (LCY)" := "VAT Amount"
                                                                ELSE
                                                                  "VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        "VAT Amount","Currency Factor"));
                                                                "VAT Base Amount (LCY)" := "Amount (LCY)" - "VAT Amount (LCY)";

                                                                UpdateSalesPurchLCY;

                                                                IF "Deferral Code" <> '' THEN
                                                                  VALIDATE("Deferral Code");
                                                              END;

                                                   CaptionML=[ENU=VAT %;
                                                              ENN=VAT %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 11  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account" WHERE (Account Type=CONST(Posting),
                                                                                                                                Blocked=CONST(No))
                                                                                                                                ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                                                                                ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                                                                                ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account"
                                                                                                                                ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                                ELSE IF (Bal. Account Type=CONST(IC Partner)) "IC Partner";
                                                   OnValidate=VAR
                                                                CompanyInfo@1280000 : Record 79;
                                                                Location@1500000 : Record 14;
                                                              BEGIN
                                                                VALIDATE("Job No.",'');

                                                                IF xRec."Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,
                                                                                                "Bal. Account Type"::"IC Partner"]
                                                                THEN
                                                                  "IC Partner Code" := '';

                                                                IF "Bal. Account No." = '' THEN BEGIN
                                                                  UpdateLineBalance;
                                                                  UpdateSource;
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Campaign,"Campaign No.");
                                                                  IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
                                                                    "Recipient Bank Account" := '';
                                                                  IF xRec."Bal. Account No." <> '' THEN BEGIN
                                                                    ClearBalancePostingGroups;
                                                                    "Bal. Tax Area Code" := '';
                                                                    "Bal. Tax Liable" := FALSE;
                                                                    "Bal. Tax Group Code" := '';
                                                                    IF "Bal. Account Type" = "Bal. Account Type"::"G/L Account" THEN BEGIN
                                                                      "Service Tax Entry" := FALSE;
                                                                      "Service Tax Group Code" := '';
                                                                    END;
                                                                  END;
                                                                  EXIT;
                                                                END;

                                                                CASE "Bal. Account Type" OF
                                                                  "Bal. Account Type"::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("Bal. Account No.");
                                                                      CheckGLAcc;
                                                                      GLSetup.GET;
                                                                      IF GLSetup."PLA Account" = "Bal. Account No." THEN
                                                                        PLA := TRUE;
                                                                      IF "Account No." = '' THEN BEGIN
                                                                        Description := GLAcc.Name;
                                                                        "Currency Code" := '';
                                                                      END;
                                                                      IF ("Account No." = '') OR
                                                                         ("Account Type" IN
                                                                          ["Account Type"::"G/L Account","Account Type"::"Bank Account"])
                                                                      THEN BEGIN
                                                                        "Posting Group" := '';
                                                                        "Salespers./Purch. Code" := '';
                                                                        "Payment Terms Code" := '';
                                                                      END;
                                                                      IF NOT GenJnlBatch.GET("Journal Template Name","Journal Batch Name") OR
                                                                         GenJnlBatch."Copy VAT Setup to Jnl. Lines"
                                                                      THEN BEGIN
                                                                        "Bal. Gen. Posting Type" := GLAcc."Gen. Posting Type";
                                                                        "Bal. Gen. Bus. Posting Group" := GLAcc."Gen. Bus. Posting Group";
                                                                        "Bal. Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                        "Bal. VAT Bus. Posting Group" := GLAcc."VAT Bus. Posting Group";
                                                                        "Bal. VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      END;
                                                                      "Bal. Tax Area Code" := GLAcc."Tax Area Code";
                                                                      "Bal. Tax Liable" := GLAcc."Tax Liable";
                                                                      "Bal. Tax Group Code" := GLAcc."Tax Group Code";
                                                                      IF "Posting Date" <> 0D THEN
                                                                        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
                                                                          ClearBalancePostingGroups;
                                                                      IF GLAcc."Service Tax Group Code" <> '' THEN BEGIN
                                                                        "Service Tax Entry" := TRUE;
                                                                        "Service Tax Group Code" := GLAcc."Service Tax Group Code";
                                                                        CompanyInfo.GET;
                                                                        "Service Tax Registration No." := CompanyInfo."Service Tax Registration No.";
                                                                        IF "Location Code" <> '' THEN BEGIN
                                                                          Location.GET("Location Code");
                                                                          "Service Tax Registration No." := Location."Service Tax Registration No.";
                                                                        END;
                                                                        UpdatePoT;
                                                                      END;
                                                                    END;
                                                                  "Bal. Account Type"::Customer:
                                                                    BEGIN
                                                                      Cust.GET("Bal. Account No.");
                                                                      Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      IF Cust."IC Partner Code" <> '' THEN BEGIN
                                                                        IF GenJnlTemplate.GET("Journal Template Name") THEN;
                                                                        IF (Cust."IC Partner Code" <> '') AND ICPartner.GET(Cust."IC Partner Code") THEN BEGIN
                                                                          ICPartner.CheckICPartnerIndirect(FORMAT("Bal. Account Type"),"Bal. Account No.");
                                                                          "IC Partner Code" := Cust."IC Partner Code";
                                                                        END;
                                                                      END;

                                                                      IF "Account No." = '' THEN
                                                                        Description := Cust.Name;

                                                                      "Payment Method Code" := Cust."Payment Method Code";
                                                                      VALIDATE("Recipient Bank Account",Cust."Preferred Bank Account");
                                                                      "Posting Group" := Cust."Customer Posting Group";
                                                                      "Salespers./Purch. Code" := Cust."Salesperson Code";
                                                                      "Payment Terms Code" := Cust."Payment Terms Code";
                                                                      VALIDATE("Bill-to/Pay-to No.","Bal. Account No.");
                                                                      VALIDATE("Sell-to/Buy-from No.","Bal. Account No.");
                                                                      IF ("Account No." = '') OR ("Account Type" = "Account Type"::"G/L Account") THEN
                                                                        "Currency Code" := Cust."Currency Code";
                                                                      IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
                                                                        "Currency Code" := Cust."Currency Code";
                                                                      ClearBalancePostingGroups;
                                                                      IF (Cust."Bill-to Customer No." <> '') AND (Cust."Bill-to Customer No." <> "Bal. Account No.") THEN
                                                                        IF NOT CONFIRM(Text014,FALSE,Cust.TABLECAPTION,Cust."No.",Cust.FIELDCAPTION("Bill-to Customer No."),
                                                                             Cust."Bill-to Customer No.")
                                                                        THEN
                                                                          ERROR('');
                                                                      VALIDATE("Payment Terms Code");
                                                                      CheckPaymentTolerance;
                                                                    END;
                                                                  "Bal. Account Type"::Vendor:
                                                                    BEGIN
                                                                      Vend.GET("Bal. Account No.");
                                                                      Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      IF Vend."IC Partner Code" <> '' THEN BEGIN
                                                                        IF GenJnlTemplate.GET("Journal Template Name") THEN;
                                                                        IF (Vend."IC Partner Code" <> '') AND ICPartner.GET(Vend."IC Partner Code") THEN BEGIN
                                                                          ICPartner.CheckICPartnerIndirect(FORMAT("Bal. Account Type"),"Bal. Account No.");
                                                                          "IC Partner Code" := Vend."IC Partner Code";
                                                                        END;
                                                                      END;

                                                                      IF "Account No." = '' THEN
                                                                        Description := Vend.Name;

                                                                      "Payment Method Code" := Vend."Payment Method Code";
                                                                      VALIDATE("Recipient Bank Account",Vend."Preferred Bank Account");
                                                                      "Posting Group" := Vend."Vendor Posting Group";
                                                                      "Salespers./Purch. Code" := Vend."Purchaser Code";
                                                                      "Payment Terms Code" := Vend."Payment Terms Code";
                                                                      VALIDATE("Bill-to/Pay-to No.","Bal. Account No.");
                                                                      VALIDATE("Sell-to/Buy-from No.","Bal. Account No.");
                                                                      IF ("Account No." = '') OR ("Account Type" = "Account Type"::"G/L Account") THEN
                                                                        "Currency Code" := Vend."Currency Code";
                                                                      IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
                                                                        "Currency Code" := Vend."Currency Code";
                                                                      ClearBalancePostingGroups;
                                                                      IF (Vend."Pay-to Vendor No." <> '') AND (Vend."Pay-to Vendor No." <> "Bal. Account No.") THEN
                                                                        IF NOT CONFIRM(Text014,FALSE,Vend.TABLECAPTION,Vend."No.",Vend.FIELDCAPTION("Pay-to Vendor No."),
                                                                             Vend."Pay-to Vendor No.")
                                                                        THEN
                                                                          ERROR('');
                                                                      VALIDATE("Payment Terms Code");
                                                                      CheckPaymentTolerance;
                                                                    END;
                                                                  "Bal. Account Type"::"Bank Account":
                                                                    BEGIN
                                                                      BankAcc.GET("Bal. Account No.");
                                                                      BankAcc.TESTFIELD(Blocked,FALSE);
                                                                      IF "Account No." = '' THEN
                                                                        Description := BankAcc.Name;

                                                                      IF ("Account No." = '') OR
                                                                         ("Account Type" IN
                                                                          ["Account Type"::"G/L Account","Account Type"::"Bank Account"])
                                                                      THEN BEGIN
                                                                        "Posting Group" := '';
                                                                        "Salespers./Purch. Code" := '';
                                                                        "Payment Terms Code" := '';
                                                                      END;
                                                                      IF BankAcc."Currency Code" = '' THEN BEGIN
                                                                        IF "Account No." = '' THEN
                                                                          "Currency Code" := '';
                                                                      END ELSE
                                                                        IF SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
                                                                          BankAcc.TESTFIELD("Currency Code","Currency Code")
                                                                        ELSE
                                                                          "Currency Code" := BankAcc."Currency Code";
                                                                      ClearBalancePostingGroups;
                                                                    END;
                                                                  "Bal. Account Type"::"Fixed Asset":
                                                                    BEGIN
                                                                      FA.GET("Bal. Account No.");
                                                                      FA.TESTFIELD(Blocked,FALSE);
                                                                      FA.TESTFIELD(Inactive,FALSE);
                                                                      FA.TESTFIELD("Budgeted Asset",FALSE);
                                                                      IF "Account No." = '' THEN
                                                                        Description := FA.Description;

                                                                      IF "Depreciation Book Code" = '' THEN BEGIN
                                                                        FASetup.GET;
                                                                        "Depreciation Book Code" := FASetup."Default Depr. Book";
                                                                        IF NOT FADeprBook.GET("Bal. Account No.","Depreciation Book Code") THEN
                                                                          "Depreciation Book Code" := '';
                                                                      END;
                                                                      IF "Depreciation Book Code" <> '' THEN BEGIN
                                                                        FADeprBook.GET("Bal. Account No.","Depreciation Book Code");
                                                                        "Posting Group" := FADeprBook."FA Posting Group";
                                                                      END;
                                                                      GetFAVATSetup;
                                                                      GetFAAddCurrExchRate;
                                                                    END;
                                                                  "Bal. Account Type"::"IC Partner":
                                                                    BEGIN
                                                                      ICPartner.GET("Bal. Account No.");
                                                                      IF "Account No." = '' THEN
                                                                        Description := ICPartner.Name;

                                                                      IF ("Account No." = '') OR ("Account Type" = "Account Type"::"G/L Account") THEN
                                                                        "Currency Code" := ICPartner."Currency Code";
                                                                      IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
                                                                        "Currency Code" := ICPartner."Currency Code";
                                                                      ClearBalancePostingGroups;
                                                                      "IC Partner Code" := "Bal. Account No.";
                                                                    END;
                                                                END;

                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Bal. VAT Prod. Posting Group");
                                                                UpdateLineBalance;
                                                                UpdateSource;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                VALIDATE("IC Partner G/L Acc. No.",GetDefaultICPartnerGLAccNo);
                                                                ValidateApplyRequirements(Rec);
                                                                IF "Refund VAT" THEN
                                                                  IF "Bal. Account No." <> '' THEN
                                                                    ERROR(Text16353);
                                                                CalculateServiceTax;
                                                              END;

                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENN=Bal. Account No.] }
    { 12  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=VAR
                                                                JnlBankCharges@1500000 : Record 16511;
                                                              BEGIN
                                                                IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN BEGIN
                                                                  IF BankAcc3.GET("Bal. Account No.") AND (BankAcc3."Currency Code" <> '')THEN
                                                                    BankAcc3.TESTFIELD("Currency Code","Currency Code");
                                                                END;
                                                                IF "Account Type" = "Account Type"::"Bank Account" THEN BEGIN
                                                                  IF BankAcc3.GET("Account No.") AND (BankAcc3."Currency Code" <> '') THEN
                                                                    BankAcc3.TESTFIELD("Currency Code","Currency Code");
                                                                END;
                                                                IF ("Recurring Method" IN
                                                                    ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]) AND
                                                                   ("Currency Code" <> '')
                                                                THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Currency Code"),FIELDCAPTION("Recurring Method"),"Recurring Method");

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  GetCurrency;
                                                                  IF ("Currency Code" <> xRec."Currency Code") OR
                                                                     ("Posting Date" <> xRec."Posting Date") OR
                                                                     (CurrFieldNo = FIELDNO("Currency Code")) OR
                                                                     ("Currency Factor" = 0)
                                                                  THEN
                                                                    "Currency Factor" :=
                                                                      CurrExchRate.ExchangeRate("Posting Date","Currency Code");
                                                                END ELSE
                                                                  "Currency Factor" := 0;
                                                                VALIDATE("Currency Factor");

                                                                IF NOT CustVendAccountNosModified THEN
                                                                  IF ("Currency Code" <> xRec."Currency Code") AND (Amount <> 0) THEN
                                                                    PaymentToleranceMgt.PmtTolGenJnl(Rec);

                                                                JnlBankCharges.RESET;
                                                                JnlBankCharges.SETRANGE("Journal Template Name","Journal Template Name");
                                                                JnlBankCharges.SETRANGE("Journal Batch Name","Journal Batch Name");
                                                                JnlBankCharges.SETRANGE("Line No.","Line No.");
                                                                IF JnlBankCharges.FIND('-') THEN
                                                                  REPEAT
                                                                    IF "Currency Code" <> '' THEN
                                                                      JnlBankCharges."Amount (LCY)" := ROUND(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date",
                                                                            "Currency Code",JnlBankCharges.Amount,"Currency Factor"))
                                                                    ELSE
                                                                      JnlBankCharges."Amount (LCY)" := JnlBankCharges.Amount;
                                                                    JnlBankCharges.MODIFY;
                                                                  UNTIL JnlBankCharges.NEXT = 0;
                                                                ClearGSTFields(FALSE);
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code] }
    { 13  ;   ;Amount              ;Decimal       ;OnValidate=VAR
                                                                CustLedgerEntry@1500000 : Record 21;
                                                                CustLedgerEntry1@1500004 : Record 21;
                                                                VendLedgEntry@1500001 : Record 25;
                                                                VendLedgEntry1@1500005 : Record 25;
                                                                DetailedGSTLedgerEntry@1500002 : Record 16419;
                                                                TransactionType@1500003 : 'Purchase,Sales,Transfer,Settlement';
                                                              BEGIN
                                                                GetCurrency;
                                                                IF "Currency Code" = '' THEN
                                                                  "Amount (LCY)" := Amount
                                                                ELSE
                                                                  "Amount (LCY)" := ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        Amount,"Currency Factor"));

                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (CurrFieldNo <> FIELDNO("Applies-to Doc. No.")) AND
                                                                   ((("Account Type" = "Account Type"::Customer) AND
                                                                     ("Account No." <> '') AND (Amount > 0) AND
                                                                     (CurrFieldNo <> FIELDNO("Bal. Account No."))) OR
                                                                    (("Bal. Account Type" = "Bal. Account Type"::Customer) AND
                                                                     ("Bal. Account No." <> '') AND (Amount < 0) AND
                                                                     (CurrFieldNo <> FIELDNO("Account No."))))
                                                                THEN
                                                                  CustCheckCreditLimit.GenJnlLineCheck(Rec);

                                                                IF "Pay TDS" OR "Pay TCS" OR "Pay Work Tax" OR "Pay Sales Tax" OR "Pay Excise" THEN
                                                                  IF xRec.Amount <> Amount THEN
                                                                    ERROR(Text13704);

                                                                IF xRec."Service Tax Base Amount (LCY)" = "Service Tax Base Amount (LCY)" THEN BEGIN
                                                                  CalculateServiceTax;
                                                                  CalculateTDS;
                                                                END;
                                                                CalculateTCS;
                                                                VALIDATE("VAT %");
                                                                VALIDATE("Bal. VAT %");
                                                                UpdateLineBalance;
                                                                IF "Deferral Code" <> '' THEN
                                                                  VALIDATE("Deferral Code");

                                                                IF Amount <> xRec.Amount THEN BEGIN
                                                                  IF ("Applies-to Doc. No." <> '') OR ("Applies-to ID" <> '') THEN
                                                                    SetApplyToAmount;
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                                END;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                                "TDS Line Amount" := Amount;

                                                                IF "GST on Advance Payment" THEN
                                                                  CalculateGSTAmounts;

                                                                IF ("Document Type" = "Document Type"::Refund) AND ("Applies-to Doc. No." <> '') THEN BEGIN
                                                                  DetailedGSTLedgerEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                  DetailedGSTLedgerEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                  IF DetailedGSTLedgerEntry.FINDFIRST THEN BEGIN
                                                                    IF ("Amount (LCY)" <> 0) AND (xRec."Amount (LCY)" <> Rec."Amount (LCY)") THEN BEGIN
                                                                      IF "Account Type" = "Account Type"::Customer THEN BEGIN
                                                                        CustLedgEntry1.SETCURRENTKEY("Customer No.","Document Type","Document No.","GST on Advance Payment");
                                                                        CustLedgEntry1.SETRANGE("Customer No.","Account No.");
                                                                        CustLedgEntry1.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                        CustLedgEntry1.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                        CustLedgEntry1.SETRANGE("GST on Advance Payment",TRUE);
                                                                        CustLedgEntry1.SETRANGE("HSN/SAC Code","HSN/SAC Code");
                                                                        IF CustLedgEntry1.FINDFIRST THEN
                                                                          CustLedgEntry1.CALCFIELDS("Remaining Amt. (LCY)");
                                                                        IF CustLedgEntry1."Remaining Amt. (LCY)" <> 0 THEN
                                                                          GetGSTAmounts(CustLedgEntry1."Document No.",
                                                                            "Amount (LCY)" / CustLedgEntry1."Remaining Amt. (LCY)",TransactionType::Sales,
                                                                            CustLedgEntry1."Entry No.");
                                                                      END ELSE IF "Account Type" = "Account Type"::Vendor THEN BEGIN
                                                                        VendLedgEntry1.SETCURRENTKEY("Buy-from Vendor No.","Document Type","Document No.","GST on Advance Payment");
                                                                        VendLedgEntry1.SETRANGE("Buy-from Vendor No.","Account No.");
                                                                        VendLedgEntry1.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                        VendLedgEntry1.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                        VendLedgEntry1.SETRANGE("GST on Advance Payment",TRUE);
                                                                        VendLedgEntry1.SETRANGE("HSN/SAC Code","HSN/SAC Code");
                                                                        IF VendLedgEntry1.FINDFIRST THEN
                                                                          VendLedgEntry1.CALCFIELDS("Remaining Amt. (LCY)");
                                                                        IF VendLedgEntry1."Remaining Amt. (LCY)" <> 0 THEN
                                                                          GetGSTAmounts(VendLedgEntry1."Document No.",
                                                                            "Amount (LCY)" / VendLedgEntry1."Remaining Amt. (LCY)",TransactionType::Purchase,VendLedgEntry1."Entry No.");
                                                                      END;
                                                                    END;
                                                                  IF ("Currency Code" <> '' ) AND ("HSN/SAC Code" <> '') THEN BEGIN
                                                                    VALIDATE("GST Base Amount","GST Base Amount" * "Currency Factor");
                                                                    VALIDATE("Total GST Amount","Total GST Amount" * "Currency Factor");
                                                                  END;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 14  ;   ;Debit Amount        ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Debit Amount" := ROUND("Debit Amount",Currency."Amount Rounding Precision");
                                                                Correction := "Debit Amount" < 0;
                                                                Amount := "Debit Amount";
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Debit Amount;
                                                              ENN=Debit Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 15  ;   ;Credit Amount       ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Credit Amount" := ROUND("Credit Amount",Currency."Amount Rounding Precision");
                                                                Correction := "Credit Amount" < 0;
                                                                Amount := -"Credit Amount";
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Credit Amount;
                                                              ENN=Credit Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16  ;   ;Amount (LCY)        ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Code" = '' THEN BEGIN
                                                                  Amount := "Amount (LCY)";
                                                                  VALIDATE(Amount);
                                                                END ELSE BEGIN
                                                                  IF CheckFixedCurrency THEN BEGIN
                                                                    GetCurrency;
                                                                    Amount := ExchangeAmtLCYToFCY("Amount (LCY)",TRUE);
                                                                  END ELSE BEGIN
                                                                    TESTFIELD("Amount (LCY)");
                                                                    TESTFIELD(Amount);
                                                                    "Currency Factor" := Amount / "Amount (LCY)";
                                                                  END;

                                                                  VALIDATE("VAT %");
                                                                  VALIDATE("Bal. VAT %");
                                                                  UpdateLineBalance;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Amount (LCY);
                                                              ENN=Amount (LCY)];
                                                   AutoFormatType=1 }
    { 17  ;   ;Balance (LCY)       ;Decimal       ;CaptionML=[ENU=Balance (LCY);
                                                              ENN=Balance (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 18  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Currency Code" = '') AND ("Currency Factor" <> 0) THEN
                                                                  FIELDERROR("Currency Factor",STRSUBSTNO(Text002,FIELDCAPTION("Currency Code")));
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              ENN=Currency Factor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 19  ;   ;Sales/Purch. (LCY)  ;Decimal       ;CaptionML=[ENU=Sales/Purch. (LCY);
                                                              ENN=Sales/Purch. (LCY)];
                                                   AutoFormatType=1 }
    { 20  ;   ;Profit (LCY)        ;Decimal       ;CaptionML=[ENU=Profit (LCY);
                                                              ENN=Profit (LCY)];
                                                   AutoFormatType=1 }
    { 21  ;   ;Inv. Discount (LCY) ;Decimal       ;CaptionML=[ENU=Inv. Discount (LCY);
                                                              ENN=Inv. Discount (LCY)];
                                                   AutoFormatType=1 }
    { 22  ;   ;Bill-to/Pay-to No.  ;Code20        ;TableRelation=IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor;
                                                   OnValidate=BEGIN
                                                                IF "Bill-to/Pay-to No." <> xRec."Bill-to/Pay-to No." THEN
                                                                  "Ship-to/Order Address Code" := '';
                                                                ReadGLSetup;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN
                                                                  UpdateCountryCodeAndVATRegNo("Bill-to/Pay-to No.");
                                                              END;

                                                   CaptionML=[ENU=Bill-to/Pay-to No.;
                                                              ENN=Bill-to/Pay-to No.];
                                                   Editable=No }
    { 23  ;   ;Posting Group       ;Code10        ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Posting Group"
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Posting Group"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ENN=Posting Group];
                                                   Editable=No }
    { 24  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 25  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 26  ;   ;Salespers./Purch. Code;Code10      ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::Campaign,"Campaign No.");
                                                              END;

                                                   CaptionML=[ENU=Salespers./Purch. Code;
                                                              ENN=Salespers./Purch. Code] }
    { 29  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ENN=Source Code];
                                                   Editable=No }
    { 30  ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ENN=System-Created Entry];
                                                   Editable=No }
    { 34  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ENN=On Hold] }
    { 35  ;   ;Applies-to Doc. Type;Option        ;OnValidate=BEGIN
                                                                IF "Applies-to Doc. Type" <> xRec."Applies-to Doc. Type" THEN
                                                                  VALIDATE("Applies-to Doc. No.",'');
                                                              END;

                                                   CaptionML=[ENU=Applies-to Doc. Type;
                                                              ENN=Applies-to Doc. Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 36  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=VAR
                                                                CustLedgEntry@1000 : Record 21;
                                                                VendLedgEntry@1003 : Record 25;
                                                                TempGenJnlLine@1001 : TEMPORARY Record 81;
                                                                VendLedgEntry2@1500000 : Record 25;
                                                                ServTaxEntry@1500001 : Record 16473;
                                                                CustLedgerEntry2@1500004 : Record 21;
                                                                TransactionType@1500002 : 'Purchase,Sales,Transfer';
                                                                NotOpenedLookUpErr@1500003 : TextConst 'ENU=Please Drill Down and Select Appropriate HSN when applying a GST Document;ENN=Please Drill Down and Select Appropriate HSN when applying a GST Document';
                                                              BEGIN
                                                                IF "Applies-to Doc. No." <> xRec."Applies-to Doc. No." THEN BEGIN
                                                                  ClearCustVendApplnEntry;
                                                                  IF "Document Type" = "Document Type"::Refund THEN BEGIN
                                                                    ClearGSTFields(FALSE);
                                                                   "HSN/SAC Code" := '';
                                                                   "GST Jurisdiction Type" := "GST Jurisdiction Type"::Intrastate;
                                                                    "GST Group Code" := '';
                                                                  END;
                                                                END;
                                                                IF ("Applies-to Doc. No." = '') AND (xRec."Applies-to Doc. No." <> '') THEN BEGIN
                                                                  PaymentToleranceMgt.DelPmtTolApllnDocNo(Rec,xRec."Applies-to Doc. No.");

                                                                  TempGenJnlLine := Rec;
                                                                  IF (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Customer) OR
                                                                     (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Vendor)
                                                                  THEN
                                                                    CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",TempGenJnlLine);

                                                                  IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Customer THEN BEGIN
                                                                    CustLedgEntry.SETCURRENTKEY("Document No.");
                                                                    CustLedgEntry.SETRANGE("Document No.",xRec."Applies-to Doc. No.");
                                                                    IF NOT (xRec."Applies-to Doc. Type" = "Document Type"::" ") THEN
                                                                      CustLedgEntry.SETRANGE("Document Type",xRec."Applies-to Doc. Type");
                                                                    CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
                                                                    CustLedgEntry.SETRANGE(Open,TRUE);
                                                                    IF CustLedgEntry.FINDFIRST THEN BEGIN
                                                                      IF CustLedgEntry."Adv. Pmt. Adjustment" THEN
                                                                        ERROR(CannotApplyCustErr);
                                                                      IF CustLedgEntry."Amount to Apply" <> 0 THEN  BEGIN
                                                                        CustLedgEntry."Amount to Apply" := 0;
                                                                        CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
                                                                      END;
                                                                      "Exported to Payment File" := CustLedgEntry."Exported to Payment File";
                                                                      "Applies-to Ext. Doc. No." := '';
                                                                      "Transaction No. Serv. Tax" := 0;
                                                                      IF CustLedgEntry."Serv. Tax on Advance Payment" THEN BEGIN
                                                                        "Transaction No. Serv. Tax" := CustLedgEntry."Transaction No.";
                                                                        ServTaxEntry.RESET;
                                                                        ServTaxEntry.SETRANGE("Transaction No.",CustLedgEntry."Transaction No.");
                                                                        IF ServTaxEntry.FINDFIRST THEN BEGIN
                                                                          "Service Tax Rounding Precision" := ServTaxEntry."Service Tax Rounding Precision";
                                                                          "Service Tax Rounding Type" := ServTaxEntry."Service Tax Rounding Type";
                                                                        END;
                                                                      END;
                                                                    END;
                                                                  END ELSE
                                                                    IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Vendor THEN BEGIN
                                                                      VendLedgEntry.SETCURRENTKEY("Document No.");
                                                                      VendLedgEntry.SETRANGE("Document No.",xRec."Applies-to Doc. No.");
                                                                      IF NOT (xRec."Applies-to Doc. Type" = "Document Type"::" ") THEN
                                                                        VendLedgEntry.SETRANGE("Document Type",xRec."Applies-to Doc. Type");
                                                                      VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
                                                                      VendLedgEntry.SETRANGE(Open,TRUE);
                                                                      IF VendLedgEntry.FINDFIRST THEN BEGIN
                                                                        IF VendLedgEntry."Adv. Pmt. Adjustment" THEN
                                                                          ERROR(CannotApplyVendErr);
                                                                        IF VendLedgEntry."Amount to Apply" <> 0 THEN  BEGIN
                                                                          VendLedgEntry."Amount to Apply" := 0;
                                                                          CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
                                                                        END;
                                                                        "Transaction No. Serv. Tax" := 0;
                                                                        IF VendLedgEntry."Serv. Tax on Advance Payment" THEN BEGIN
                                                                          "Transaction No. Serv. Tax" := VendLedgEntry."Transaction No.";
                                                                          ServTaxEntry.RESET;
                                                                          ServTaxEntry.SETRANGE("Transaction No.",VendLedgEntry."Transaction No.");
                                                                          IF ServTaxEntry.FINDFIRST THEN BEGIN
                                                                            "Service Tax Rounding Precision" := ServTaxEntry."Service Tax Rounding Precision";
                                                                            "Service Tax Rounding Type" := ServTaxEntry."Service Tax Rounding Type";
                                                                          END;
                                                                        END;
                                                                        "Exported to Payment File" := VendLedgEntry."Exported to Payment File";
                                                                      END;
                                                                      "Applies-to Ext. Doc. No." := '';
                                                                    END;
                                                                END;

                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec.Amount <> 0) THEN BEGIN
                                                                  IF xRec."Applies-to Doc. No." <> '' THEN
                                                                    PaymentToleranceMgt.DelPmtTolApllnDocNo(Rec,xRec."Applies-to Doc. No.");
                                                                  SetApplyToAmount;
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                                  xRec.ClearAppliedGenJnlLine;
                                                                END;

                                                                CASE "Account Type" OF
                                                                  "Account Type"::Customer:
                                                                    GetCustLedgerEntry;
                                                                  "Account Type"::Vendor:
                                                                    GetVendLedgerEntry;
                                                                END;

                                                                ValidateApplyRequirements(Rec);
                                                                SetJournalLineFieldsFromApplication;
                                                                CalculateTDS;
                                                                CalculateTCS;

                                                                VendLedgEntry2.RESET;
                                                                VendLedgEntry2.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                VendLedgEntry2.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                IF VendLedgEntry2.FINDFIRST AND NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
                                                                  "Input Service Distribution" := VendLedgEntry2."Input Service Distribution";

                                                                GetCreditCard;
                                                                IF ("Document Type"="Document Type"::Refund) THEN BEGIN
                                                                  IF ("Account Type" = "Account Type"::Vendor) AND VendLedgEntry2."GST on Advance Payment" THEN BEGIN
                                                                   IF NOT OpenedOnLookup THEN
                                                                    ERROR(NotOpenedLookUpErr);
                                                                  END ELSE IF ("Account Type" ="Account Type"::Customer) THEN BEGIN
                                                                    CustLedgerEntry2.RESET;
                                                                    CustLedgerEntry2.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                    CustLedgerEntry2.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                    IF CustLedgerEntry2.FINDFIRST THEN
                                                                      IF CustLedgerEntry2."GST on Advance Payment" AND NOT OpenedOnLookup THEN
                                                                        ERROR(NotOpenedLookUpErr);
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              PaymentToleranceMgt@1001 : Codeunit 426;
                                                              ServTaxEntry@1500000 : Record 16473;
                                                              AccType@1002 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
                                                              AccNo@1003 : Code[20];
                                                              TransactionType@1500010 : 'Purchase,Sales,Transfer';
                                                            BEGIN
                                                              OpenedOnLookup := TRUE;
                                                              xRec.Amount := Amount;
                                                              xRec."Currency Code" := "Currency Code";
                                                              xRec."Posting Date" := "Posting Date";
                                                              xRec."GST Base Amount" := "GST Base Amount";
                                                              xRec."Total GST Amount" := "Total GST Amount";

                                                              GetAccTypeAndNo(Rec,AccType,AccNo);
                                                              CLEAR(CustLedgEntry);
                                                              CLEAR(VendLedgEntry);

                                                              CASE AccType OF
                                                                AccType::Customer:
                                                                  LookUpAppliesToDocCust(AccNo);
                                                                AccType::Vendor:
                                                                  LookUpAppliesToDocVend(AccNo);
                                                              END;
                                                              SetJournalLineFieldsFromApplication;

                                                              CustLedgEntry.CALCFIELDS(Amount);
                                                              VendLedgEntry.CALCFIELDS(Amount);

                                                              CASE "Account Type" OF
                                                                "Account Type"::Customer:
                                                                    BEGIN
                                                                      CustLedgEntry1.CALCFIELDS("Remaining Amt. (LCY)");
                                                                      IF CustLedgEntry1."Remaining Amt. (LCY)" <> 0 THEN
                                                                        GetGSTAmounts(
                                                                          CustLedgEntry1."Document No.",("Amount (LCY)" / CustLedgEntry1."Remaining Amt. (LCY)"),
                                                                          TransactionType::Sales,CustLedgEntry1."Entry No.");
                                                                    END;
                                                                "Account Type"::Vendor:
                                                                    BEGIN
                                                                      VendLedgEntry1.CALCFIELDS("Remaining Amt. (LCY)");
                                                                      IF VendLedgEntry1."Remaining Amt. (LCY)" <> 0 THEN
                                                                        GetGSTAmounts(
                                                                          VendLedgEntry1."Document No.",("Amount (LCY)" / VendLedgEntry1."Remaining Amt. (LCY)"),
                                                                          TransactionType::Purchase,VendLedgEntry1."Entry No.");
                                                                    END;
                                                              END;
                                                              IF ("Currency Code" <> '' ) AND ("HSN/SAC Code" <> '') AND ("Document Type" = "Document Type"::Refund) THEN BEGIN
                                                                VALIDATE("GST Base Amount","GST Base Amount" * "Currency Factor");
                                                                VALIDATE("Total GST Amount","Total GST Amount" * "Currency Factor");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ENN=Applies-to Doc. No.] }
    { 38  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENN=Due Date] }
    { 39  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              ENN=Pmt. Discount Date] }
    { 40  ;   ;Payment Discount %  ;Decimal       ;CaptionML=[ENU=Payment Discount %;
                                                              ENN=Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 42  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                IF "Job No." = xRec."Job No." THEN
                                                                  EXIT;
                                                                IF "Job No." = '' THEN
                                                                  "CWIP G/L Type" := "CWIP G/L Type"::" ";

                                                                SourceCodeSetup.GET;
                                                                IF "Source Code" <> SourceCodeSetup."Job G/L WIP" THEN
                                                                  VALIDATE("Job Task No.",'');
                                                                IF "Job No." = '' THEN BEGIN
                                                                  CreateDim(
                                                                    DATABASE::Job,"Job No.",
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Campaign,"Campaign No.");
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Account Type","Account Type"::"G/L Account");

                                                                IF "Bal. Account No." <> '' THEN
                                                                  IF NOT ("Bal. Account Type" IN ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"]) THEN
                                                                    ERROR(Text016,FIELDCAPTION("Bal. Account Type"));

                                                                Job.GET("Job No.");
                                                                Job.TestBlocked;
                                                                "Job Currency Code" := Job."Currency Code";
                                                                IF Job."Job Type" <> Job."Job Type"::"Capital WIP" THEN
                                                                  "CWIP G/L Type" := "CWIP G/L Type"::" "
                                                                ELSE
                                                                  TESTFIELD(PLA,FALSE);

                                                                CreateDim(
                                                                  DATABASE::Job,"Job No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");
                                                              END;

                                                   CaptionML=[ENU=Job No.;
                                                              ENN=Job No.] }
    { 43  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENN=Quantity];
                                                   DecimalPlaces=0:5 }
    { 44  ;   ;VAT Amount          ;Decimal       ;OnValidate=BEGIN
                                                                GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                GenJnlBatch.TESTFIELD("Allow VAT Difference",TRUE);
                                                                IF NOT ("VAT Calculation Type" IN
                                                                        ["VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT"])
                                                                THEN
                                                                  ERROR(
                                                                    Text010,FIELDCAPTION("VAT Calculation Type"),
                                                                    "VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT");
                                                                IF "VAT Amount" <> 0 THEN BEGIN
                                                                  TESTFIELD("VAT %");
                                                                  TESTFIELD(Amount);
                                                                END;

                                                                GetCurrency;
                                                                "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);

                                                                IF "VAT Amount" * Amount < 0 THEN
                                                                  IF "VAT Amount" > 0 THEN
                                                                    ERROR(Text011,FIELDCAPTION("VAT Amount"))
                                                                  ELSE
                                                                    ERROR(Text012,FIELDCAPTION("VAT Amount"));

                                                                "VAT Base Amount" := Amount - "VAT Amount";

                                                                "VAT Difference" :=
                                                                  "VAT Amount" -
                                                                  ROUND(
                                                                    Amount * "VAT %" / (100 + "VAT %"),
                                                                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                IF ABS("VAT Difference") > Currency."Max. VAT Difference Allowed" THEN
                                                                  ERROR(Text013,FIELDCAPTION("VAT Difference"),Currency."Max. VAT Difference Allowed");

                                                                IF "Currency Code" = '' THEN
                                                                  "VAT Amount (LCY)" := "VAT Amount"
                                                                ELSE
                                                                  "VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        "VAT Amount","Currency Factor"));
                                                                "VAT Base Amount (LCY)" := "Amount (LCY)" - "VAT Amount (LCY)";

                                                                UpdateSalesPurchLCY;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;

                                                                IF "Deferral Code" <> '' THEN
                                                                  VALIDATE("Deferral Code");
                                                              END;

                                                   CaptionML=[ENU=VAT Amount;
                                                              ENN=VAT Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 45  ;   ;VAT Posting         ;Option        ;CaptionML=[ENU=VAT Posting;
                                                              ENN=VAT Posting];
                                                   OptionCaptionML=[ENU=Automatic VAT Entry,Manual VAT Entry;
                                                                    ENN=Automatic VAT Entry,Manual VAT Entry];
                                                   OptionString=Automatic VAT Entry,Manual VAT Entry;
                                                   Editable=No }
    { 47  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                "Due Date" := 0D;
                                                                "Pmt. Discount Date" := 0D;
                                                                "Payment Discount %" := 0;
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") OR
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account")
                                                                THEN
                                                                  CASE "Document Type" OF
                                                                    "Document Type"::Invoice:
                                                                      IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                        PaymentTerms.GET("Payment Terms Code");
                                                                        "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                        "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                        "Payment Discount %" := PaymentTerms."Discount %";
                                                                      END;
                                                                    "Document Type"::"Credit Memo":
                                                                      IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                        PaymentTerms.GET("Payment Terms Code");
                                                                        IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
                                                                          "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                          "Pmt. Discount Date" :=
                                                                            CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                          "Payment Discount %" := PaymentTerms."Discount %";
                                                                        END ELSE
                                                                          "Due Date" := "Document Date";
                                                                      END;
                                                                    ELSE
                                                                      "Due Date" := "Document Date";
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENN=Payment Terms Code] }
    { 48  ;   ;Applies-to ID       ;Code50        ;OnValidate=BEGIN
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN
                                                                  ClearCustVendApplnEntry;
                                                                SetJournalLineFieldsFromApplication;
                                                                CalculateTDS;
                                                                CalculateTCS;
                                                                IF ("Applies-to ID" = '') OR ("Applies-to ID" <> xRec."Applies-to ID") THEN
                                                                  "Input Service Distribution" := FALSE;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CalculateTCS;
                                                              CalculateTDS;
                                                            END;

                                                   CaptionML=[ENU=Applies-to ID;
                                                              ENN=Applies-to ID] }
    { 50  ;   ;Business Unit Code  ;Code20        ;TableRelation="Business Unit";
                                                   CaptionML=[ENU=Business Unit Code;
                                                              ENN=Business Unit Code] }
    { 51  ;   ;Journal Batch Name  ;Code10        ;TableRelation="Gen. Journal Batch".Name WHERE (Journal Template Name=FIELD(Journal Template Name));
                                                   CaptionML=[ENU=Journal Batch Name;
                                                              ENN=Journal Batch Name] }
    { 52  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENN=Reason Code] }
    { 53  ;   ;Recurring Method    ;Option        ;OnValidate=BEGIN
                                                                IF "Recurring Method" IN
                                                                   ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]
                                                                THEN
                                                                  TESTFIELD("Currency Code",'');
                                                              END;

                                                   CaptionML=[ENU=Recurring Method;
                                                              ENN=Recurring Method];
                                                   OptionCaptionML=[ENU=" ,F  Fixed,V  Variable,B  Balance,RF Reversing Fixed,RV Reversing Variable,RB Reversing Balance";
                                                                    ENN=" ,F  Fixed,V  Variable,B  Balance,RF Reversing Fixed,RV Reversing Variable,RB Reversing Balance"];
                                                   OptionString=[ ,F  Fixed,V  Variable,B  Balance,RF Reversing Fixed,RV Reversing Variable,RB Reversing Balance];
                                                   BlankZero=Yes }
    { 54  ;   ;Expiration Date     ;Date          ;CaptionML=[ENU=Expiration Date;
                                                              ENN=Expiration Date] }
    { 55  ;   ;Recurring Frequency ;DateFormula   ;CaptionML=[ENU=Recurring Frequency;
                                                              ENN=Recurring Frequency] }
    { 56  ;   ;Allocated Amt. (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Gen. Jnl. Allocation".Amount WHERE (Journal Template Name=FIELD(Journal Template Name),
                                                                                                        Journal Batch Name=FIELD(Journal Batch Name),
                                                                                                        Journal Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Allocated Amt. (LCY);
                                                              ENN=Allocated Amt. (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 57  ;   ;Gen. Posting Type   ;Option        ;OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Posting Type","Gen. Posting Type"::" ");
                                                                IF ("Gen. Posting Type" = "Gen. Posting Type"::Settlement) AND (CurrFieldNo <> 0) THEN
                                                                  ERROR(Text006,"Gen. Posting Type");
                                                                CheckVATInAlloc;
                                                                IF "Gen. Posting Type" > 0 THEN
                                                                  VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Posting Type;
                                                              ENN=Gen. Posting Type];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale,Settlement";
                                                                    ENN=" ,Purchase,Sale,Settlement"];
                                                   OptionString=[ ,Purchase,Sale,Settlement] }
    { 58  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Bus. Posting Group",'');
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 59  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Prod. Posting Group",'');
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENN=Gen. Prod. Posting Group] }
    { 60  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ENN=VAT Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENN=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 61  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=[ENU=EU 3-Party Trade;
                                                              ENN=EU 3-Party Trade];
                                                   Editable=No }
    { 62  ;   ;Allow Application   ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Application;
                                                              ENN=Allow Application] }
    { 63  ;   ;Bal. Account Type   ;Option        ;OnValidate=BEGIN
                                                                IF "Tax Type" <> "Tax Type" ::" " THEN BEGIN
                                                                  TESTFIELD("Location Code");
                                                                  TESTFIELD("GST Component Code");
                                                                  TESTFIELD("Account Type","Account Type"::"G/L Account");
                                                                  TESTFIELD("Bal. Account Type","Bal. Account Type"::"G/L Account");
                                                                END;

                                                                IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset",
                                                                                       "Account Type"::"IC Partner"]) AND
                                                                   ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset",
                                                                                            "Bal. Account Type"::"IC Partner"])
                                                                THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                VALIDATE("Bal. Account No.",'');
                                                                VALIDATE("IC Partner G/L Acc. No.",'');
                                                                IF "Bal. Account Type" IN
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                THEN BEGIN
                                                                  VALIDATE("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::" ");
                                                                  VALIDATE("Bal. Gen. Bus. Posting Group",'');
                                                                  VALIDATE("Bal. Gen. Prod. Posting Group",'');
                                                                END ELSE
                                                                  IF "Account Type" IN [
                                                                                        "Bal. Account Type"::"G/L Account","Account Type"::"Bank Account","Account Type"::"Fixed Asset"]
                                                                  THEN
                                                                    VALIDATE("Payment Terms Code",'');
                                                                UpdateSource;
                                                                IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                END;
                                                                IF xRec."Bal. Account Type" IN
                                                                   [xRec."Bal. Account Type"::Customer,xRec."Bal. Account Type"::Vendor]
                                                                THEN BEGIN
                                                                  "Bill-to/Pay-to No." := '';
                                                                  "Ship-to/Order Address Code" := '';
                                                                  "Sell-to/Buy-from No." := '';
                                                                  "VAT Registration No." := '';
                                                                END;
                                                                IF ("Account Type" IN [
                                                                                       "Account Type"::"G/L Account","Account Type"::"Bank Account","Account Type"::"Fixed Asset"]) AND
                                                                   ("Bal. Account Type" IN [
                                                                                            "Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account","Bal. Account Type"::"Fixed Asset"])
                                                                THEN
                                                                  VALIDATE("Payment Terms Code",'');

                                                                IF "Bal. Account Type" = "Bal. Account Type"::"IC Partner" THEN BEGIN
                                                                  GetTemplate;
                                                                  IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                                                                    FIELDERROR("Bal. Account Type");
                                                                END;

                                                                IF "Pay VAT" THEN
                                                                  IF NOT ("Bal. Account Type" IN ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"]) THEN
                                                                    ERROR(Text16351);
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") AND "Excise Charge" THEN
                                                                  ERROR(Text16352,FIELDCAPTION("Account Type"));
                                                                IF xRec."Account Type" = xRec."Account Type"::"G/L Account" THEN BEGIN
                                                                  "Service Tax Entry" := FALSE;
                                                                  "Service Tax Group Code" := '';
                                                                  "Service Tax Registration No." := '';
                                                                END;
                                                                IF "Bal. Account Type" <> "Bal. Account Type"::"Bank Account" THEN
                                                                  VALIDATE("Credit Card No.",'');
                                                              END;

                                                   CaptionML=[ENU=Bal. Account Type;
                                                              ENN=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                                    ENN=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 64  ;   ;Bal. Gen. Posting Type;Option      ;OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::" ");
                                                                IF ("Bal. Gen. Posting Type" = "Gen. Posting Type"::Settlement) AND (CurrFieldNo <> 0) THEN
                                                                  ERROR(Text006,"Bal. Gen. Posting Type");
                                                                IF "Bal. Gen. Posting Type" > 0 THEN
                                                                  VALIDATE("Bal. VAT Prod. Posting Group");

                                                                IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Bal. Gen. Posting Type;
                                                              ENN=Bal. Gen. Posting Type];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale,Settlement";
                                                                    ENN=" ,Purchase,Sale,Settlement"];
                                                   OptionString=[ ,Purchase,Sale,Settlement] }
    { 65  ;   ;Bal. Gen. Bus. Posting Group;Code10;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Bal. Gen. Bus. Posting Group",'');
                                                                IF xRec."Bal. Gen. Bus. Posting Group" <> "Bal. Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Bal. Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("Bal. VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Bal. Gen. Bus. Posting Group;
                                                              ENN=Bal. Gen. Bus. Posting Group] }
    { 66  ;   ;Bal. Gen. Prod. Posting Group;Code10;
                                                   TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Bal. Gen. Prod. Posting Group",'');
                                                                IF xRec."Bal. Gen. Prod. Posting Group" <> "Bal. Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Bal. Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("Bal. VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Bal. Gen. Prod. Posting Group;
                                                              ENN=Bal. Gen. Prod. Posting Group] }
    { 67  ;   ;Bal. VAT Calculation Type;Option   ;CaptionML=[ENU=Bal. VAT Calculation Type;
                                                              ENN=Bal. VAT Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENN=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 68  ;   ;Bal. VAT %          ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                CASE "Bal. VAT Calculation Type" OF
                                                                  "Bal. VAT Calculation Type"::"Normal VAT",
                                                                  "Bal. VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND(-Amount * "Bal. VAT %" / (100 + "Bal. VAT %"),Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                      "Bal. VAT Base Amount" :=
                                                                        ROUND(-Amount - "Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "Bal. VAT Calculation Type"::"Full VAT":
                                                                    "Bal. VAT Amount" := -Amount;
                                                                  "Bal. VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase) AND
                                                                       "Bal. Use Tax"
                                                                    THEN BEGIN
                                                                      "Bal. VAT Amount" := 0;
                                                                      "Bal. VAT %" := 0;
                                                                    END ELSE BEGIN
                                                                      "Bal. VAT Amount" :=
                                                                        -(Amount -
                                                                          SalesTaxCalculate.ReverseCalculateTax(
                                                                            "Bal. Tax Area Code","Bal. Tax Group Code","Bal. Tax Liable",
                                                                            "Posting Date",Amount,Quantity,"Currency Factor"));
                                                                      IF Amount + "Bal. VAT Amount" <> 0 THEN
                                                                        "Bal. VAT %" := ROUND(100 * -"Bal. VAT Amount" / (Amount + "Bal. VAT Amount"),0.00001)
                                                                      ELSE
                                                                        "Bal. VAT %" := 0;
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;
                                                                "Bal. VAT Base Amount" := -(Amount + "Bal. VAT Amount");
                                                                "Bal. VAT Difference" := 0;

                                                                IF "Currency Code" = '' THEN
                                                                  "Bal. VAT Amount (LCY)" := "Bal. VAT Amount"
                                                                ELSE
                                                                  "Bal. VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        "Bal. VAT Amount","Currency Factor"));
                                                                "Bal. VAT Base Amount (LCY)" := -("Amount (LCY)" + "Bal. VAT Amount (LCY)");

                                                                UpdateSalesPurchLCY;
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT %;
                                                              ENN=Bal. VAT %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 69  ;   ;Bal. VAT Amount     ;Decimal       ;OnValidate=BEGIN
                                                                GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                GenJnlBatch.TESTFIELD("Allow VAT Difference",TRUE);
                                                                IF NOT ("Bal. VAT Calculation Type" IN
                                                                        ["Bal. VAT Calculation Type"::"Normal VAT","Bal. VAT Calculation Type"::"Reverse Charge VAT"])
                                                                THEN
                                                                  ERROR(
                                                                    Text010,FIELDCAPTION("Bal. VAT Calculation Type"),
                                                                    "Bal. VAT Calculation Type"::"Normal VAT","Bal. VAT Calculation Type"::"Reverse Charge VAT");
                                                                IF "Bal. VAT Amount" <> 0 THEN BEGIN
                                                                  TESTFIELD("Bal. VAT %");
                                                                  TESTFIELD(Amount);
                                                                END;

                                                                GetCurrency;
                                                                "Bal. VAT Amount" :=
                                                                  ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);

                                                                IF "Bal. VAT Amount" * Amount > 0 THEN
                                                                  IF "Bal. VAT Amount" > 0 THEN
                                                                    ERROR(Text011,FIELDCAPTION("Bal. VAT Amount"))
                                                                  ELSE
                                                                    ERROR(Text012,FIELDCAPTION("Bal. VAT Amount"));

                                                                "Bal. VAT Base Amount" := -(Amount + "Bal. VAT Amount");

                                                                "Bal. VAT Difference" :=
                                                                  "Bal. VAT Amount" -
                                                                  ROUND(
                                                                    -Amount * "Bal. VAT %" / (100 + "Bal. VAT %"),
                                                                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                IF ABS("Bal. VAT Difference") > Currency."Max. VAT Difference Allowed" THEN
                                                                  ERROR(
                                                                    Text013,FIELDCAPTION("Bal. VAT Difference"),Currency."Max. VAT Difference Allowed");

                                                                IF "Currency Code" = '' THEN
                                                                  "Bal. VAT Amount (LCY)" := "Bal. VAT Amount"
                                                                ELSE
                                                                  "Bal. VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        "Bal. VAT Amount","Currency Factor"));
                                                                "Bal. VAT Base Amount (LCY)" := -("Amount (LCY)" + "Bal. VAT Amount (LCY)");

                                                                UpdateSalesPurchLCY;
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT Amount;
                                                              ENN=Bal. VAT Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Bank Payment Type   ;Option        ;OnValidate=BEGIN
                                                                IF ("Bank Payment Type" <> "Bank Payment Type"::" ") AND
                                                                   ("Account Type" <> "Account Type"::"Bank Account") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Bank Account")
                                                                THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                IF ("Account Type" = "Account Type"::"Fixed Asset") AND
                                                                   ("Bank Payment Type" <> "Bank Payment Type"::" ")
                                                                THEN
                                                                  FIELDERROR("Account Type");
                                                              END;

                                                   AccessByPermission=TableData 270=R;
                                                   CaptionML=[ENU=Bank Payment Type;
                                                              ENN=Bank Payment Type];
                                                   OptionCaptionML=[ENU=" ,Computer Check,Manual Check";
                                                                    ENN=" ,Computer Check,Manual Check"];
                                                   OptionString=[ ,Computer Check,Manual Check] }
    { 71  ;   ;VAT Base Amount     ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "VAT Base Amount" := ROUND("VAT Base Amount",Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    Amount :=
                                                                      ROUND(
                                                                        "VAT Base Amount" * (1 + "VAT %" / 100),
                                                                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    IF "VAT Base Amount" <> 0 THEN
                                                                      FIELDERROR(
                                                                        "VAT Base Amount",
                                                                        STRSUBSTNO(
                                                                          Text008,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) AND
                                                                       "Use Tax"
                                                                    THEN BEGIN
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                      Amount := "VAT Base Amount" + "VAT Amount";
                                                                    END ELSE BEGIN
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable","Posting Date",
                                                                          "VAT Base Amount",Quantity,"Currency Factor");
                                                                      IF "VAT Base Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base Amount",0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" :=
                                                                        ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                      Amount := "VAT Base Amount" + "VAT Amount";
                                                                    END;
                                                                END;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=VAT Base Amount;
                                                              ENN=VAT Base Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 72  ;   ;Bal. VAT Base Amount;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Bal. VAT Base Amount" := ROUND("Bal. VAT Base Amount",Currency."Amount Rounding Precision");
                                                                CASE "Bal. VAT Calculation Type" OF
                                                                  "Bal. VAT Calculation Type"::"Normal VAT",
                                                                  "Bal. VAT Calculation Type"::"Reverse Charge VAT":
                                                                    Amount :=
                                                                      ROUND(
                                                                        -"Bal. VAT Base Amount" * (1 + "Bal. VAT %" / 100),
                                                                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                  "Bal. VAT Calculation Type"::"Full VAT":
                                                                    IF "Bal. VAT Base Amount" <> 0 THEN
                                                                      FIELDERROR(
                                                                        "Bal. VAT Base Amount",
                                                                        STRSUBSTNO(
                                                                          Text008,FIELDCAPTION("Bal. VAT Calculation Type"),
                                                                          "Bal. VAT Calculation Type"));
                                                                  "Bal. VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase) AND
                                                                       "Bal. Use Tax"
                                                                    THEN BEGIN
                                                                      "Bal. VAT Amount" := 0;
                                                                      "Bal. VAT %" := 0;
                                                                      Amount := -"Bal. VAT Base Amount" - "Bal. VAT Amount";
                                                                    END ELSE BEGIN
                                                                      "Bal. VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Bal. Tax Area Code","Bal. Tax Group Code","Bal. Tax Liable",
                                                                          "Posting Date","Bal. VAT Base Amount",Quantity,"Currency Factor");
                                                                      IF "Bal. VAT Base Amount" <> 0 THEN
                                                                        "Bal. VAT %" := ROUND(100 * "Bal. VAT Amount" / "Bal. VAT Base Amount",0.00001)
                                                                      ELSE
                                                                        "Bal. VAT %" := 0;
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                      Amount := -"Bal. VAT Base Amount" - "Bal. VAT Amount";
                                                                    END;
                                                                END;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT Base Amount;
                                                              ENN=Bal. VAT Base Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 73  ;   ;Correction          ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Correction;
                                                              ENN=Correction] }
    { 75  ;   ;Check Printed       ;Boolean       ;AccessByPermission=TableData 272=R;
                                                   CaptionML=[ENU=Check Printed;
                                                              ENN=Check Printed];
                                                   Editable=No }
    { 76  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Payment Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Document Date;
                                                              ENN=Document Date];
                                                   ClosingDates=Yes }
    { 77  ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ENN=External Document No.] }
    { 78  ;   ;Source Type         ;Option        ;OnValidate=BEGIN
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") AND ("Account No." <> '') OR
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '')
                                                                THEN
                                                                  UpdateSource
                                                                ELSE
                                                                  "Source No." := '';
                                                              END;

                                                   CaptionML=[ENU=Source Type;
                                                              ENN=Source Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bank Account,Fixed Asset";
                                                                    ENN=" ,Customer,Vendor,Bank Account,Fixed Asset"];
                                                   OptionString=[ ,Customer,Vendor,Bank Account,Fixed Asset] }
    { 79  ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Source Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Source Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   OnValidate=BEGIN
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") AND ("Account No." <> '') OR
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '')
                                                                THEN
                                                                  UpdateSource;
                                                              END;

                                                   CaptionML=[ENU=Source No.;
                                                              ENN=Source No.] }
    { 80  ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Posting No. Series;
                                                              ENN=Posting No. Series] }
    { 82  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=Tax Area Code] }
    { 83  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ENN=Tax Liable] }
    { 84  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENN=Tax Group Code] }
    { 85  ;   ;Use Tax             ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Gen. Posting Type","Gen. Posting Type"::Purchase);
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=[ENU=Use Tax;
                                                              ENN=Use Tax] }
    { 86  ;   ;Bal. Tax Area Code  ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. Tax Area Code;
                                                              ENN=Bal. Tax Area Code] }
    { 87  ;   ;Bal. Tax Liable     ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. Tax Liable;
                                                              ENN=Bal. Tax Liable] }
    { 88  ;   ;Bal. Tax Group Code ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. Tax Group Code;
                                                              ENN=Bal. Tax Group Code] }
    { 89  ;   ;Bal. Use Tax        ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::Purchase);
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. Use Tax;
                                                              ENN=Bal. Use Tax] }
    { 90  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("VAT Bus. Posting Group",'');

                                                                VALIDATE("VAT Prod. Posting Group");

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 91  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("VAT Prod. Posting Group",'');

                                                                CheckVATInAlloc;

                                                                "VAT %" := 0;
                                                                "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
                                                                IF "Gen. Posting Type" <> 0 THEN BEGIN
                                                                  IF NOT VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
                                                                    VATPostingSetup.INIT;
                                                                  "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                  CASE "VAT Calculation Type" OF
                                                                    "VAT Calculation Type"::"Normal VAT":
                                                                      "VAT %" := VATPostingSetup."VAT %";
                                                                    "VAT Calculation Type"::"Full VAT":
                                                                      CASE "Gen. Posting Type" OF
                                                                        "Gen. Posting Type"::Sale:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                            TESTFIELD("Account No.",VATPostingSetup."Sales VAT Account");
                                                                          END;
                                                                        "Gen. Posting Type"::Purchase:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Purchase VAT Account");
                                                                            TESTFIELD("Account No.",VATPostingSetup."Purchase VAT Account");
                                                                          END;
                                                                      END;
                                                                  END;
                                                                END;
                                                                VALIDATE("VAT %");

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENN=VAT Prod. Posting Group] }
    { 92  ;   ;Bal. VAT Bus. Posting Group;Code10 ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                THEN
                                                                  TESTFIELD("Bal. VAT Bus. Posting Group",'');

                                                                VALIDATE("Bal. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT Bus. Posting Group;
                                                              ENN=Bal. VAT Bus. Posting Group] }
    { 93  ;   ;Bal. VAT Prod. Posting Group;Code10;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                THEN
                                                                  TESTFIELD("Bal. VAT Prod. Posting Group",'');

                                                                "Bal. VAT %" := 0;
                                                                "Bal. VAT Calculation Type" := "Bal. VAT Calculation Type"::"Normal VAT";
                                                                IF "Bal. Gen. Posting Type" <> 0 THEN BEGIN
                                                                  IF NOT VATPostingSetup.GET("Bal. VAT Bus. Posting Group","Bal. VAT Prod. Posting Group") THEN
                                                                    VATPostingSetup.INIT;
                                                                  "Bal. VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                  CASE "Bal. VAT Calculation Type" OF
                                                                    "Bal. VAT Calculation Type"::"Normal VAT":
                                                                      "Bal. VAT %" := VATPostingSetup."VAT %";
                                                                    "Bal. VAT Calculation Type"::"Full VAT":
                                                                      CASE "Bal. Gen. Posting Type" OF
                                                                        "Bal. Gen. Posting Type"::Sale:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                            TESTFIELD("Bal. Account No.",VATPostingSetup."Sales VAT Account");
                                                                          END;
                                                                        "Bal. Gen. Posting Type"::Purchase:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Purchase VAT Account");
                                                                            TESTFIELD("Bal. Account No.",VATPostingSetup."Purchase VAT Account");
                                                                          END;
                                                                      END;
                                                                  END;
                                                                END;
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT Prod. Posting Group;
                                                              ENN=Bal. VAT Prod. Posting Group] }
    { 95  ;   ;Additional-Currency Posting;Option ;CaptionML=[ENU=Additional-Currency Posting;
                                                              ENN=Additional-Currency Posting];
                                                   OptionCaptionML=[ENU=None,Amount Only,Additional-Currency Amount Only;
                                                                    ENN=None,Amount Only,Additional-Currency Amount Only];
                                                   OptionString=None,Amount Only,Additional-Currency Amount Only;
                                                   Editable=No }
    { 98  ;   ;FA Add.-Currency Factor;Decimal    ;CaptionML=[ENU=FA Add.-Currency Factor;
                                                              ENN=FA Add.-Currency Factor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 99  ;   ;Source Currency Code;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Source Currency Code;
                                                              ENN=Source Currency Code];
                                                   Editable=No }
    { 100 ;   ;Source Currency Amount;Decimal     ;AccessByPermission=TableData 4=R;
                                                   CaptionML=[ENU=Source Currency Amount;
                                                              ENN=Source Currency Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 101 ;   ;Source Curr. VAT Base Amount;Decimal;
                                                   AccessByPermission=TableData 4=R;
                                                   CaptionML=[ENU=Source Curr. VAT Base Amount;
                                                              ENN=Source Curr. VAT Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 102 ;   ;Source Curr. VAT Amount;Decimal    ;AccessByPermission=TableData 4=R;
                                                   CaptionML=[ENU=Source Curr. VAT Amount;
                                                              ENN=Source Curr. VAT Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 103 ;   ;VAT Base Discount % ;Decimal       ;CaptionML=[ENU=VAT Base Discount %;
                                                              ENN=VAT Base Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 104 ;   ;VAT Amount (LCY)    ;Decimal       ;CaptionML=[ENU=VAT Amount (LCY);
                                                              ENN=VAT Amount (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 105 ;   ;VAT Base Amount (LCY);Decimal      ;CaptionML=[ENU=VAT Base Amount (LCY);
                                                              ENN=VAT Base Amount (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 106 ;   ;Bal. VAT Amount (LCY);Decimal      ;CaptionML=[ENU=Bal. VAT Amount (LCY);
                                                              ENN=Bal. VAT Amount (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 107 ;   ;Bal. VAT Base Amount (LCY);Decimal ;CaptionML=[ENU=Bal. VAT Base Amount (LCY);
                                                              ENN=Bal. VAT Base Amount (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 108 ;   ;Reversing Entry     ;Boolean       ;CaptionML=[ENU=Reversing Entry;
                                                              ENN=Reversing Entry];
                                                   Editable=No }
    { 109 ;   ;Allow Zero-Amount Posting;Boolean  ;CaptionML=[ENU=Allow Zero-Amount Posting;
                                                              ENN=Allow Zero-Amount Posting];
                                                   Editable=No }
    { 110 ;   ;Ship-to/Order Address Code;Code10  ;TableRelation=IF (Account Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Order Address".Code WHERE (Vendor No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) "Order Address".Code WHERE (Vendor No.=FIELD(Bill-to/Pay-to No.));
                                                   CaptionML=[ENU=Ship-to/Order Address Code;
                                                              ENN=Ship-to/Order Address Code] }
    { 111 ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              ENN=VAT Difference];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 112 ;   ;Bal. VAT Difference ;Decimal       ;CaptionML=[ENU=Bal. VAT Difference;
                                                              ENN=Bal. VAT Difference];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=IC Partner Code;
                                                              ENN=IC Partner Code];
                                                   Editable=No }
    { 114 ;   ;IC Direction        ;Option        ;CaptionML=[ENU=IC Direction;
                                                              ENN=IC Direction];
                                                   OptionCaptionML=[ENU=Outgoing,Incoming;
                                                                    ENN=Outgoing,Incoming];
                                                   OptionString=Outgoing,Incoming }
    { 116 ;   ;IC Partner G/L Acc. No.;Code20     ;TableRelation="IC G/L Account";
                                                   OnValidate=VAR
                                                                ICGLAccount@1000 : Record 410;
                                                              BEGIN
                                                                IF "Journal Template Name" <> '' THEN
                                                                  IF "IC Partner G/L Acc. No." <> '' THEN BEGIN
                                                                    GetTemplate;
                                                                    GenJnlTemplate.TESTFIELD(Type,GenJnlTemplate.Type::Intercompany);
                                                                    IF ICGLAccount.GET("IC Partner G/L Acc. No.") THEN
                                                                      ICGLAccount.TESTFIELD(Blocked,FALSE);
                                                                  END
                                                              END;

                                                   CaptionML=[ENU=IC Partner G/L Acc. No.;
                                                              ENN=IC Partner G/L Acc. No.] }
    { 117 ;   ;IC Partner Transaction No.;Integer ;CaptionML=[ENU=IC Partner Transaction No.;
                                                              ENN=IC Partner Transaction No.];
                                                   Editable=No }
    { 118 ;   ;Sell-to/Buy-from No.;Code20        ;TableRelation=IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor;
                                                   OnValidate=BEGIN
                                                                ReadGLSetup;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Sell-to/Buy-from No." THEN
                                                                  UpdateCountryCodeAndVATRegNo("Sell-to/Buy-from No.");
                                                              END;

                                                   CaptionML=[ENU=Sell-to/Buy-from No.;
                                                              ENN=Sell-to/Buy-from No.] }
    { 119 ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.","Country/Region Code",'',0);
                                                              END;

                                                   CaptionML=[ENU=VAT Registration No.;
                                                              ENN=VAT Registration No.] }
    { 120 ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Registration No.");
                                                              END;

                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENN=Country/Region Code] }
    { 121 ;   ;Prepayment          ;Boolean       ;CaptionML=[ENU=Prepayment;
                                                              ENN=Prepayment] }
    { 122 ;   ;Financial Void      ;Boolean       ;CaptionML=[ENU=Financial Void;
                                                              ENN=Financial Void];
                                                   Editable=No }
    { 165 ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document";
                                                   OnValidate=VAR
                                                                IncomingDocument@1000 : Record 130;
                                                              BEGIN
                                                                IF Description = '' THEN
                                                                  Description := COPYSTR(IncomingDocument.Description,1,MAXSTRLEN(Description));
                                                                IF "Incoming Document Entry No." = xRec."Incoming Document Entry No." THEN
                                                                  EXIT;

                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  IncomingDocument.RemoveReferenceToWorkingDocument(xRec."Incoming Document Entry No.")
                                                                ELSE
                                                                  IncomingDocument.SetGenJournalLine(Rec);
                                                              END;

                                                   CaptionML=[ENU=Incoming Document Entry No.;
                                                              ENN=Incoming Document Entry No.] }
    { 170 ;   ;Creditor No.        ;Code20        ;CaptionML=[ENU=Creditor No.;
                                                              ENN=Creditor No.];
                                                   Numeric=Yes }
    { 171 ;   ;Payment Reference   ;Code50        ;OnValidate=BEGIN
                                                                IF "Payment Reference" <> '' THEN
                                                                  TESTFIELD("Creditor No.");
                                                              END;

                                                   CaptionML=[ENU=Payment Reference;
                                                              ENN=Payment Reference];
                                                   Numeric=Yes }
    { 172 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENN=Payment Method Code] }
    { 173 ;   ;Applies-to Ext. Doc. No.;Code35    ;CaptionML=[ENU=Applies-to Ext. Doc. No.;
                                                              ENN=Applies-to Ext. Doc. No.] }
    { 288 ;   ;Recipient Bank Account;Code10      ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Bank Account".Code WHERE (Customer No.=FIELD(Account No.))
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Account No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) "Customer Bank Account".Code WHERE (Customer No.=FIELD(Bal. Account No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) "Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Bal. Account No.));
                                                   OnValidate=BEGIN
                                                                IF "Recipient Bank Account" = '' THEN
                                                                  EXIT;
                                                                IF ("Document Type" = "Document Type"::Invoice) AND
                                                                   (("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) OR
                                                                    ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]))
                                                                THEN
                                                                  "Recipient Bank Account" := '';
                                                              END;

                                                   CaptionML=[ENU=Recipient Bank Account;
                                                              ENN=Recipient Bank Account] }
    { 289 ;   ;Message to Recipient;Text140       ;CaptionML=[ENU=Message to Recipient;
                                                              ENN=Message to Recipient] }
    { 290 ;   ;Exported to Payment File;Boolean   ;CaptionML=[ENU=Exported to Payment File;
                                                              ENN=Exported to Payment File];
                                                   Editable=No }
    { 291 ;   ;Has Payment Export Error;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Payment Jnl. Export Error Text" WHERE (Journal Template Name=FIELD(Journal Template Name),
                                                                                                             Journal Batch Name=FIELD(Journal Batch Name),
                                                                                                             Journal Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Has Payment Export Error;
                                                              ENN=Has Payment Export Error];
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 827 ;   ;Credit Card No.     ;Code20        ;TableRelation=IF (Account Type=CONST(Customer),
                                                                     Document Type=FILTER(Payment|Refund),
                                                                     Bal. Account Type=CONST(Bank Account)) "DO Payment Credit Card" WHERE (Customer No.=FIELD(Account No.));
                                                   OnValidate=VAR
                                                                DOPaymentMgt@1000 : Codeunit 825;
                                                              BEGIN
                                                                CheckNoCardTransactEntryExist(xRec);
                                                                IF "Credit Card No." = '' THEN
                                                                  EXIT;

                                                                DOPaymentMgt.CheckCreditCardData("Credit Card No.");
                                                              END;

                                                   CaptionML=[ENU=Credit Card No.;
                                                              ENN=Credit Card No.] }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                IF "Job Task No." <> xRec."Job Task No." THEN
                                                                  VALIDATE("Job Planning Line No.",0);
                                                                IF "Job Task No." = '' THEN BEGIN
                                                                  "Job Quantity" := 0;
                                                                  "Job Currency Factor" := 0;
                                                                  "Job Currency Code" := '';
                                                                  "Job Unit Price" := 0;
                                                                  "Job Total Price" := 0;
                                                                  "Job Line Amount" := 0;
                                                                  "Job Line Discount Amount" := 0;
                                                                  "Job Unit Cost" := 0;
                                                                  "Job Total Cost" := 0;
                                                                  "Job Line Discount %" := 0;

                                                                  "Job Unit Price (LCY)" := 0;
                                                                  "Job Total Price (LCY)" := 0;
                                                                  "Job Line Amount (LCY)" := 0;
                                                                  "Job Line Disc. Amount (LCY)" := 0;
                                                                  "Job Unit Cost (LCY)" := 0;
                                                                  "Job Total Cost (LCY)" := 0;
                                                                  EXIT;
                                                                END;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  CopyDimensionsFromJobTaskLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Task No.;
                                                              ENN=Job Task No.] }
    { 1002;   ;Job Unit Price (LCY);Decimal       ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Unit Price (LCY);
                                                              ENN=Job Unit Price (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 1003;   ;Job Total Price (LCY);Decimal      ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Total Price (LCY);
                                                              ENN=Job Total Price (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1004;   ;Job Quantity        ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  IF "Job Planning Line No." <> 0 THEN
                                                                    VALIDATE("Job Planning Line No.");
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Quantity;
                                                              ENN=Job Quantity];
                                                   DecimalPlaces=0:5 }
    { 1005;   ;Job Unit Cost (LCY) ;Decimal       ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Unit Cost (LCY);
                                                              ENN=Job Unit Cost (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 1006;   ;Job Line Discount % ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Discount %","Job Line Discount %");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Line Discount %;
                                                              ENN=Job Line Discount %];
                                                   AutoFormatType=1 }
    { 1007;   ;Job Line Disc. Amount (LCY);Decimal;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Discount Amount (LCY)","Job Line Disc. Amount (LCY)");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Disc. Amount (LCY);
                                                              ENN=Job Line Disc. Amount (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1008;   ;Job Unit Of Measure Code;Code10    ;TableRelation="Unit of Measure";
                                                   CaptionML=[ENU=Job Unit Of Measure Code;
                                                              ENN=Job Unit Of Measure Code] }
    { 1009;   ;Job Line Type       ;Option        ;OnValidate=BEGIN
                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  ERROR(Text019,FIELDCAPTION("Job Line Type"),FIELDCAPTION("Job Planning Line No."));
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Line Type;
                                                              ENN=Job Line Type];
                                                   OptionCaptionML=[ENU=" ,Schedule,Contract,Both Schedule and Contract";
                                                                    ENN=" ,Schedule,Contract,Both Schedule and Contract"];
                                                   OptionString=[ ,Schedule,Contract,Both Schedule and Contract] }
    { 1010;   ;Job Unit Price      ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Unit Price","Job Unit Price");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Unit Price;
                                                              ENN=Job Unit Price];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1011;   ;Job Total Price     ;Decimal       ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Total Price;
                                                              ENN=Job Total Price];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1012;   ;Job Unit Cost       ;Decimal       ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Unit Cost;
                                                              ENN=Job Unit Cost];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1013;   ;Job Total Cost      ;Decimal       ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Total Cost;
                                                              ENN=Job Total Cost];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1014;   ;Job Line Discount Amount;Decimal   ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Discount Amount","Job Line Discount Amount");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Line Discount Amount;
                                                              ENN=Job Line Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1015;   ;Job Line Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Amount","Job Line Amount");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Line Amount;
                                                              ENN=Job Line Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1016;   ;Job Total Cost (LCY);Decimal       ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Total Cost (LCY);
                                                              ENN=Job Total Cost (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1017;   ;Job Line Amount (LCY);Decimal      ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Amount (LCY)","Job Line Amount (LCY)");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Line Amount (LCY);
                                                              ENN=Job Line Amount (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1018;   ;Job Currency Factor ;Decimal       ;CaptionML=[ENU=Job Currency Factor;
                                                              ENN=Job Currency Factor] }
    { 1019;   ;Job Currency Code   ;Code10        ;OnValidate=BEGIN
                                                                IF ("Job Currency Code" <> xRec."Job Currency Code") OR ("Job Currency Code" <> '') THEN
                                                                  IF JobTaskIsSet THEN BEGIN
                                                                    CreateTempJobJnlLine;
                                                                    UpdatePricesFromJobJnlLine;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Job Currency Code;
                                                              ENN=Job Currency Code] }
    { 1020;   ;Job Planning Line No.;Integer      ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                              BEGIN
                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  JobPlanningLine.TESTFIELD("Job No.","Job No.");
                                                                  JobPlanningLine.TESTFIELD("Job Task No.","Job Task No.");
                                                                  JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::"G/L Account");
                                                                  JobPlanningLine.TESTFIELD("No.","Account No.");
                                                                  JobPlanningLine.TESTFIELD("Usage Link",TRUE);
                                                                  JobPlanningLine.TESTFIELD("System-Created Entry",FALSE);
                                                                  "Job Line Type" := JobPlanningLine."Line Type" + 1;
                                                                  VALIDATE("Job Remaining Qty.",JobPlanningLine."Remaining Qty." - "Job Quantity");
                                                                END ELSE
                                                                  VALIDATE("Job Remaining Qty.",0);
                                                              END;

                                                   OnLookup=VAR
                                                              JobPlanningLine@1000 : Record 1003;
                                                            BEGIN
                                                              JobPlanningLine.SETRANGE("Job No.","Job No.");
                                                              JobPlanningLine.SETRANGE("Job Task No.","Job Task No.");
                                                              JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::"G/L Account");
                                                              JobPlanningLine.SETRANGE("No.","Account No.");
                                                              JobPlanningLine.SETRANGE("Usage Link",TRUE);
                                                              JobPlanningLine.SETRANGE("System-Created Entry",FALSE);

                                                              IF PAGE.RUNMODAL(0,JobPlanningLine) = ACTION::LookupOK THEN
                                                                VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
                                                            END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Planning Line No.;
                                                              ENN=Job Planning Line No.];
                                                   BlankZero=Yes }
    { 1030;   ;Job Remaining Qty.  ;Decimal       ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                              BEGIN
                                                                IF ("Job Remaining Qty." <> 0) AND ("Job Planning Line No." = 0) THEN
                                                                  ERROR(Text018,FIELDCAPTION("Job Remaining Qty."),FIELDCAPTION("Job Planning Line No."));

                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  IF JobPlanningLine.Quantity >= 0 THEN BEGIN
                                                                    IF "Job Remaining Qty." < 0 THEN
                                                                      "Job Remaining Qty." := 0;
                                                                  END ELSE BEGIN
                                                                    IF "Job Remaining Qty." > 0 THEN
                                                                      "Job Remaining Qty." := 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Remaining Qty.;
                                                              ENN=Job Remaining Qty.];
                                                   DecimalPlaces=0:5 }
    { 1200;   ;Direct Debit Mandate ID;Code35     ;TableRelation=IF (Account Type=CONST(Customer)) "SEPA Direct Debit Mandate" WHERE (Customer No.=FIELD(Account No.));
                                                   OnValidate=VAR
                                                                SEPADirectDebitMandate@1000 : Record 1230;
                                                              BEGIN
                                                                IF "Direct Debit Mandate ID" = '' THEN
                                                                  EXIT;
                                                                TESTFIELD("Account Type","Account Type"::Customer);
                                                                SEPADirectDebitMandate.GET("Direct Debit Mandate ID");
                                                                SEPADirectDebitMandate.TESTFIELD("Customer No.","Account No.");
                                                                "Recipient Bank Account" := SEPADirectDebitMandate."Customer Bank Account Code";
                                                              END;

                                                   CaptionML=[ENU=Direct Debit Mandate ID;
                                                              ENN=Direct Debit Mandate ID] }
    { 1220;   ;Data Exch. Entry No.;Integer       ;TableRelation="Data Exch.";
                                                   CaptionML=[ENU=Data Exch. Entry No.;
                                                              ENN=Data Exch. Entry No.];
                                                   Editable=No }
    { 1221;   ;Payer Information   ;Text50        ;CaptionML=[ENU=Payer Information;
                                                              ENN=Payer Information] }
    { 1222;   ;Transaction Information;Text100    ;CaptionML=[ENU=Transaction Information;
                                                              ENN=Transaction Information] }
    { 1223;   ;Data Exch. Line No. ;Integer       ;CaptionML=[ENU=Data Exch. Line No.;
                                                              ENN=Data Exch. Line No.];
                                                   Editable=No }
    { 1224;   ;Applied Automatically;Boolean      ;CaptionML=[ENU=Applied Automatically;
                                                              ENN=Applied Automatically] }
    { 1700;   ;Deferral Code       ;Code10        ;TableRelation="Deferral Template"."Deferral Code";
                                                   OnValidate=VAR
                                                                DeferralUtilities@1002 : Codeunit 1720;
                                                              BEGIN
                                                                IF "Deferral Code" <> '' THEN
                                                                  TESTFIELD("Account Type","Account Type"::"G/L Account");

                                                                DeferralUtilities.DeferralCodeOnValidate("Deferral Code",DeferralDocType::"G/L","Journal Template Name","Journal Batch Name",
                                                                  0,'',"Line No.",GetDeferralAmount,"Posting Date",Description,"Currency Code");
                                                              END;

                                                   CaptionML=[ENU=Deferral Code;
                                                              ENN=Deferral Code] }
    { 1701;   ;Deferral Line No.   ;Integer       ;CaptionML=[ENU=Deferral Line No.;
                                                              ENN=Deferral Line No.] }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code");
                                                              END;

                                                   CaptionML=[ENU=Campaign No.;
                                                              ENN=Campaign No.] }
    { 5400;   ;Prod. Order No.     ;Code20        ;CaptionML=[ENU=Prod. Order No.;
                                                              ENN=Prod. Order No.];
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=FA Posting Date;
                                                              ENN=FA Posting Date] }
    { 5601;   ;FA Posting Type     ;Option        ;OnValidate=BEGIN
                                                                IF  NOT (("Account Type" = "Account Type"::"Fixed Asset") OR
                                                                         ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")) AND
                                                                   ("FA Posting Type" = "FA Posting Type"::" ")
                                                                THEN BEGIN
                                                                  "FA Posting Date" := 0D;
                                                                  "Salvage Value" := 0;
                                                                  "No. of Depreciation Days" := 0;
                                                                  "Depr. until FA Posting Date" := FALSE;
                                                                  "Depr. Acquisition Cost" := FALSE;
                                                                  "Maintenance Code" := '';
                                                                  "Insurance No." := '';
                                                                  "Budgeted FA No." := '';
                                                                  "Duplicate in Depreciation Book" := '';
                                                                  "Use Duplication List" := FALSE;
                                                                  "FA Reclassification Entry" := FALSE;
                                                                  "FA Error Entry No." := 0;
                                                                END;

                                                                IF "FA Posting Type" <> "FA Posting Type"::"Acquisition Cost" THEN
                                                                  TESTFIELD("Insurance No.",'');
                                                                IF "FA Posting Type" <> "FA Posting Type"::Maintenance THEN
                                                                  TESTFIELD("Maintenance Code",'');
                                                                GetFAVATSetup;
                                                                GetFAAddCurrExchRate;
                                                              END;

                                                   AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=FA Posting Type;
                                                              ENN=FA Posting Type];
                                                   OptionCaptionML=[ENU=" ,Acquisition Cost,Depreciation,Write-Down,Appreciation,Custom 1,Custom 2,Disposal,Maintenance";
                                                                    ENN=" ,Acquisition Cost,Depreciation,Write-Down,Appreciation,Custom 1,Custom 2,Disposal,Maintenance"];
                                                   OptionString=[ ,Acquisition Cost,Depreciation,Write-Down,Appreciation,Custom 1,Custom 2,Disposal,Maintenance] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                IF "Depreciation Book Code" = '' THEN
                                                                  EXIT;

                                                                IF ("Account No." <> '') AND
                                                                   ("Account Type" = "Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  FADeprBook.GET("Account No.","Depreciation Book Code");
                                                                  "Posting Group" := FADeprBook."FA Posting Group";
                                                                END;

                                                                IF ("Bal. Account No." <> '') AND
                                                                   ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  FADeprBook.GET("Bal. Account No.","Depreciation Book Code");
                                                                  "Posting Group" := FADeprBook."FA Posting Group";
                                                                END;
                                                                GetFAVATSetup;
                                                                GetFAAddCurrExchRate;
                                                              END;

                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              ENN=Depreciation Book Code] }
    { 5603;   ;Salvage Value       ;Decimal       ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=Salvage Value;
                                                              ENN=Salvage Value];
                                                   AutoFormatType=1 }
    { 5604;   ;No. of Depreciation Days;Integer   ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=No. of Depreciation Days;
                                                              ENN=No. of Depreciation Days];
                                                   BlankZero=Yes }
    { 5605;   ;Depr. until FA Posting Date;Boolean;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=Depr. until FA Posting Date;
                                                              ENN=Depr. until FA Posting Date] }
    { 5606;   ;Depr. Acquisition Cost;Boolean     ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=Depr. Acquisition Cost;
                                                              ENN=Depr. Acquisition Cost] }
    { 5609;   ;Maintenance Code    ;Code10        ;TableRelation=Maintenance;
                                                   OnValidate=BEGIN
                                                                IF "Maintenance Code" <> '' THEN
                                                                  TESTFIELD("FA Posting Type","FA Posting Type"::Maintenance);
                                                              END;

                                                   CaptionML=[ENU=Maintenance Code;
                                                              ENN=Maintenance Code] }
    { 5610;   ;Insurance No.       ;Code20        ;TableRelation=Insurance;
                                                   OnValidate=BEGIN
                                                                IF "Insurance No." <> '' THEN
                                                                  TESTFIELD("FA Posting Type","FA Posting Type"::"Acquisition Cost");
                                                              END;

                                                   CaptionML=[ENU=Insurance No.;
                                                              ENN=Insurance No.] }
    { 5611;   ;Budgeted FA No.     ;Code20        ;TableRelation="Fixed Asset";
                                                   OnValidate=BEGIN
                                                                IF "Budgeted FA No." <> '' THEN BEGIN
                                                                  FA.GET("Budgeted FA No.");
                                                                  FA.TESTFIELD("Budgeted Asset",TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Budgeted FA No.;
                                                              ENN=Budgeted FA No.] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                "Use Duplication List" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              ENN=Duplicate in Depreciation Book] }
    { 5613;   ;Use Duplication List;Boolean       ;OnValidate=BEGIN
                                                                "Duplicate in Depreciation Book" := '';
                                                              END;

                                                   AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=Use Duplication List;
                                                              ENN=Use Duplication List] }
    { 5614;   ;FA Reclassification Entry;Boolean  ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=FA Reclassification Entry;
                                                              ENN=FA Reclassification Entry] }
    { 5615;   ;FA Error Entry No.  ;Integer       ;TableRelation="FA Ledger Entry";
                                                   CaptionML=[ENU=FA Error Entry No.;
                                                              ENN=FA Error Entry No.];
                                                   BlankZero=Yes }
    { 5616;   ;Index Entry         ;Boolean       ;CaptionML=[ENU=Index Entry;
                                                              ENN=Index Entry] }
    { 5617;   ;Source Line No.     ;Integer       ;CaptionML=[ENU=Source Line No.;
                                                              ENN=Source Line No.] }
    { 5618;   ;Comment             ;Text250       ;CaptionML=[ENU=Comment;
                                                              ENN=Comment] }
    { 13701;  ;Source Curr. Excise Amount;Decimal ;CaptionML=[ENU=Source Curr. Excise Amount;
                                                              ENN=Source Curr. Excise Amount];
                                                   Editable=No }
    { 13702;  ;Source Curr. Tax Amount;Decimal    ;CaptionML=[ENU=Source Curr. Tax Amount;
                                                              ENN=Source Curr. Tax Amount];
                                                   Editable=No }
    { 13703;  ;State Code          ;Code10        ;CaptionML=[ENU=State Code;
                                                              ENN=State Code] }
    { 13706;  ;Excise Bus. Posting Group;Code10   ;CaptionML=[ENU=Excise Bus. Posting Group;
                                                              ENN=Excise Bus. Posting Group] }
    { 13707;  ;Excise Prod. Posting Group;Code10  ;CaptionML=[ENU=Excise Prod. Posting Group;
                                                              ENN=Excise Prod. Posting Group] }
    { 13708;  ;Excise Amount       ;Decimal       ;CaptionML=[ENU=Excise Amount;
                                                              ENN=Excise Amount];
                                                   Editable=No }
    { 13709;  ;BED %               ;Decimal       ;CaptionML=[ENU=BED %;
                                                              ENN=BED %];
                                                   Editable=No }
    { 13710;  ;BED Calculation Type;Option        ;CaptionML=[ENU=BED Calculation Type;
                                                              ENN=BED Calculation Type];
                                                   OptionCaptionML=[ENU=Excise %,Amount/Unit,% of Accessable Value,Excise %+Amount/Unit,% of MRP;
                                                                    ENN=Excise %,Amount/Unit,% of Accessable Value,Excise %+Amount/Unit,% of MRP];
                                                   OptionString=Excise %,Amount/Unit,% of Accessable Value,Excise %+Amount/Unit,% of MRP }
    { 13711;  ;Amount Including Excise;Decimal    ;CaptionML=[ENU=Amount Including Excise;
                                                              ENN=Amount Including Excise];
                                                   Editable=No }
    { 13712;  ;Excise Base Amount  ;Decimal       ;CaptionML=[ENU=Excise Base Amount;
                                                              ENN=Excise Base Amount];
                                                   Editable=No }
    { 13716;  ;TDS/TCS Amount      ;Decimal       ;CaptionML=[ENU=TDS/TCS Amount;
                                                              ENN=TDS/TCS Amount];
                                                   Editable=No }
    { 13717;  ;Service Tax         ;Decimal       ;CaptionML=[ENU=Service Tax;
                                                              ENN=Service Tax] }
    { 13718;  ;Tax Amount          ;Decimal       ;CaptionML=[ENU=Tax Amount;
                                                              ENN=Tax Amount];
                                                   DecimalPlaces=0:4 }
    { 13736;  ;PLA                 ;Boolean       ;OnValidate=BEGIN
                                                                IF PLA THEN BEGIN
                                                                  "Pay Excise" := FALSE;
                                                                  "Pay Work Tax" := FALSE;
                                                                  "Pay TDS" := FALSE;
                                                                  "Pay VAT" := FALSE;
                                                                  "Refund VAT" := FALSE;
                                                                  "Excise Charge" := FALSE;
                                                                  IF "Job No." <> '' THEN BEGIN
                                                                    Job.GET("Job No.");
                                                                    Job.TESTFIELD("Job Type",Job."Job Type"::" ");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=PLA;
                                                              ENN=PLA] }
    { 13737;  ;Tax %               ;Decimal       ;CaptionML=[ENU=Tax %;
                                                              ENN=Tax %] }
    { 13744;  ;Tax Base Amount     ;Decimal       ;CaptionML=[ENU=Tax Base Amount;
                                                              ENN=Tax Base Amount] }
    { 13746;  ;Cenvat              ;Boolean       ;CaptionML=[ENU=Cenvat;
                                                              ENN=Cenvat] }
    { 13747;  ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=VAR
                                                                GenJournalBatch@1500000 : Record 232;
                                                              BEGIN
                                                                "Location State Code" := '';
                                                                "GST Input Service Distribution" := FALSE;
                                                                IF "GST on Advance Payment" THEN BEGIN
                                                                  ClearGSTFields(FALSE);
                                                                  CalculateGSTAmounts;
                                                                END;
                                                                IF Location.GET("Location Code") THEN BEGIN
                                                                  "Location State Code" := Location."State Code";
                                                                  "GST Input Service Distribution" := Location."GST Input Service Distributor";
                                                                END;
                                                                IF ("Tax Type" <> "Tax Type" ::" ") AND ("Location Code" <> '') AND ("GST Component Code" <> '') THEN BEGIN
                                                                  GSTPostingSetup.GET("Location State Code","GST Component Code");
                                                                  GSTPostingSetup.TESTFIELD("Receivable Account");
                                                                  "Account Type" := "Account Type"::"G/L Account";
                                                                  "Account No." := GSTPostingSetup."Receivable Account";
                                                                  "Bal. Account Type" := "Bal. Account Type"::"G/L Account";
                                                                  "GST Base Amount" := 0;
                                                                  "GST %" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 13750;  ;Source Curr. Tax Base Amount;Decimal;
                                                   CaptionML=[ENU=Source Curr. Tax Base Amount;
                                                              ENN=Source Curr. Tax Base Amount];
                                                   Editable=No }
    { 13753;  ;Tax Amount (LCY)    ;Decimal       ;CaptionML=[ENU=Tax Amount (LCY);
                                                              ENN=Tax Amount (LCY)] }
    { 13754;  ;Tax Base Amount (LCY);Decimal      ;CaptionML=[ENU=Tax Base Amount (LCY);
                                                              ENN=Tax Base Amount (LCY)] }
    { 13758;  ;TDS Nature of Deduction;Code10     ;TableRelation="TDS Nature of Deduction";
                                                   OnValidate=VAR
                                                                CompanyInfo@1280000 : Record 79;
                                                                Location@1500000 : Record 14;
                                                              BEGIN
                                                                "TCS Nature of Collection" := '';
                                                                "TCS Type" := "TCS Type"::" ";
                                                                "T.C.A.N. No." := '';
                                                                TDSNOD.MODIFYALL(Mark,FALSE);
                                                                SetFilterOnNODLine("TDS Nature of Deduction");
                                                                IF (NOT NODLines.FINDFIRST) AND ("TDS Nature of Deduction" <> '') THEN
                                                                  FIELDERROR("TDS Nature of Deduction",Text13701);
                                                                IF TDSNOD.GET("TDS Nature of Deduction") THEN BEGIN
                                                                  "TDS Category" := TDSNOD.Category;
                                                                  "TDS Group" := TDSNOD."TDS Group";
                                                                  IF "TDS Group" = "TDS Group"::"Payable to Non Residents" THEN BEGIN
                                                                    Vend.GET("Account No.");
                                                                    Vend.TESTFIELD("Country/Region Code");
                                                                    "Country Code" := Vend."Country/Region Code";
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "TDS Category" := "TDS Category"::" ";
                                                                  "TDS Group" := "TDS Group"::" ";
                                                                  "Nature of Remittance" :='';
                                                                  "Act Applicable" := "Act Applicable"::" ";
                                                                  "Country Code" := '';
                                                                END;
                                                                CompanyInfo.GET;
                                                                "T.A.N. No." := CompanyInfo."T.A.N. No.";
                                                                IF "Location Code" <> '' THEN BEGIN
                                                                  Location.GET("Location Code");
                                                                  "T.A.N. No." := Location."T.A.N. No.";
                                                                END;
                                                                InitTDSAmounts;
                                                                CalculateTDS;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SetFilterOnNODLine('');
                                                              NODLines.SETFILTER("TDS Group",'<>%1',NODLines."TDS Group"::Others);
                                                              IF NODLines.FIND('-') THEN
                                                                REPEAT
                                                                  TDSNOD.RESET;
                                                                  TDSNOD.SETRANGE(Code,NODLines."NOD/NOC");
                                                                  IF TDSNOD.FINDFIRST THEN
                                                                    TDSNOD.MODIFYALL(Mark,TRUE);
                                                                  COMMIT;
                                                                UNTIL NODLines.NEXT = 0;

                                                              TDSNOD.RESET;
                                                              TDSNOD.SETRANGE(Mark,TRUE);

                                                              IF PAGE.RUNMODAL(PAGE::"TDS Nature of Deductions",TDSNOD) = ACTION::LookupOK THEN BEGIN
                                                                SetFilterOnNODLine(TDSNOD.Code);
                                                                NODLines.SETFILTER("TDS Group",'<>%1',NODLines."TDS Group"::Others);
                                                                IF (NOT NODLines.FIND('-')) AND (TDSNOD.Code <> '') THEN
                                                                  FIELDERROR("TDS Nature of Deduction",Text13701);
                                                                "TDS Nature of Deduction" := TDSNOD.Code;
                                                              END;

                                                              VALIDATE("TDS Nature of Deduction");
                                                            END;

                                                   CaptionML=[ENU=TDS Nature of Deduction;
                                                              ENN=TDS Nature of Deduction] }
    { 13759;  ;Assessee Code       ;Code10        ;TableRelation="Assessee Code";
                                                   CaptionML=[ENU=Assessee Code;
                                                              ENN=Assessee Code];
                                                   Editable=No }
    { 13760;  ;TDS/TCS %           ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."TDS/TCS %" > 0 THEN BEGIN
                                                                  IF "Debit Amount" <> 0 THEN
                                                                    TDSAmt := "Debit Amount"
                                                                  ELSE
                                                                    TDSAmt := "Credit Amount";

                                                                  IF "Bal. TDS/TCS Including SHECESS" <> 0 THEN
                                                                    TDSAmt := "Bal. TDS/TCS Including SHECESS";
                                                                  "Bal. TDS/TCS Including SHECESS" := ROUND("TDS/TCS %" * TDSAmt / xRec."TDS/TCS %",Currency."Amount Rounding Precision");
                                                                  "TDS/TCS Amount" := ROUND("TDS/TCS %" * TDSAmt / xRec."TDS/TCS %",Currency."Amount Rounding Precision");
                                                                END ELSE BEGIN
                                                                  "Bal. TDS/TCS Including SHECESS" := ROUND(("TDS/TCS %" * (1 + "Surcharge %" / 100)) * Amount / 100,
                                                                      Currency."Amount Rounding Precision");
                                                                  "TDS/TCS Amount" := ROUND("TDS/TCS %" * Amount / 100,Currency."Amount Rounding Precision");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=TDS/TCS %;
                                                              ENN=TDS/TCS %];
                                                   Editable=No }
    { 13761;  ;TDS/TCS Amt Incl Surcharge;Decimal ;CaptionML=[ENU=TDS/TCS Amt Incl Surcharge;
                                                              ENN=TDS/TCS Amt Incl Surcharge];
                                                   Editable=No }
    { 13763;  ;Bal. TDS/TCS Including SHECESS;Decimal;
                                                   CaptionML=[ENU=Bal. TDS/TCS Including SHECESS;
                                                              ENN=Bal. TDS/TCS Including SHECESS];
                                                   Editable=No }
    { 13764;  ;Party Type          ;Option        ;InitValue=[ ];
                                                   CaptionML=[ENU=Party Type;
                                                              ENN=Party Type];
                                                   OptionCaptionML=[ENU=" ,Party,Customer,Vendor";
                                                                    ENN=" ,Party,Customer,Vendor"];
                                                   OptionString=[ ,Party,Customer,Vendor];
                                                   BlankNumbers=DontBlank }
    { 13765;  ;Party Code          ;Code20        ;TableRelation=IF (Party Type=CONST(Party)) Party.Code
                                                                 ELSE IF (Party Type=CONST(Vendor)) Vendor.No.
                                                                 ELSE IF (Party Type=CONST(Customer)) Customer.No.;
                                                   OnValidate=BEGIN
                                                                CASE "Party Type" OF
                                                                  "Party Type"::Vendor:
                                                                    BEGIN
                                                                      VALIDATE("Account Type","Account Type"::Vendor);
                                                                      VALIDATE("Account No.","Party Code");
                                                                    END;
                                                                  "Party Type"::Customer:
                                                                    BEGIN
                                                                      VALIDATE("Account Type","Account Type"::Customer);
                                                                      VALIDATE("Account No.","Party Code");
                                                                    END;
                                                                END;
                                                                IF NODHeader.GET("Party Type","Party Code") THEN
                                                                  VALIDATE("Assessee Code",NODHeader."Assesse Code")
                                                                ELSE
                                                                  VALIDATE("Assessee Code",'');
                                                                  VALIDATE("TDS Nature of Deduction",'');
                                                                VALIDATE("Nature of Remittance",'');
                                                                VALIDATE("Act Applicable","Act Applicable"::" ");
                                                                "Country Code" := '';
                                                              END;

                                                   CaptionML=[ENU=Party Code;
                                                              ENN=Party Code] }
    { 13773;  ;Form Code           ;Code10        ;TableRelation="Form Codes";
                                                   CaptionML=[ENU=Form Code;
                                                              ENN=Form Code] }
    { 13774;  ;Form No.            ;Code10        ;TableRelation="Tax Forms Details";
                                                   CaptionML=[ENU=Form No.;
                                                              ENN=Form No.] }
    { 13779;  ;LC No.              ;Code20        ;TableRelation="LC Detail".No. WHERE (Closed=CONST(No),
                                                                                        Released=CONST(Yes));
                                                   CaptionML=[ENU=LC No.;
                                                              ENN=LC No.] }
    { 13780;  ;Work Tax Base Amount;Decimal       ;OnValidate=BEGIN
                                                                "Work Tax Amount" := "Work Tax Base Amount" * "Work Tax %" / 100;
                                                                "Balance Work Tax Amount" := "Work Tax Amount";
                                                              END;

                                                   CaptionML=[ENU=Work Tax Base Amount;
                                                              ENN=Work Tax Base Amount];
                                                   Editable=Yes }
    { 13781;  ;Work Tax %          ;Decimal       ;CaptionML=[ENU=Work Tax %;
                                                              ENN=Work Tax %];
                                                   Editable=No }
    { 13782;  ;Work Tax Amount     ;Decimal       ;CaptionML=[ENU=Work Tax Amount;
                                                              ENN=Work Tax Amount];
                                                   Editable=No }
    { 13786;  ;TDS Category        ;Option        ;CaptionML=[ENU=TDS Category;
                                                              ENN=TDS Category];
                                                   OptionCaptionML=[ENU=" ,A,C,S,T";
                                                                    ENN=" ,A,C,S,T"];
                                                   OptionString=[ ,A,C,S,T] }
    { 13787;  ;Surcharge %         ;Decimal       ;CaptionML=[ENU=Surcharge %;
                                                              ENN=Surcharge %];
                                                   Editable=No }
    { 13788;  ;Surcharge Amount    ;Decimal       ;CaptionML=[ENU=Surcharge Amount;
                                                              ENN=Surcharge Amount];
                                                   Editable=No }
    { 13789;  ;Concessional Code   ;Code10        ;TableRelation="Concessional Codes";
                                                   CaptionML=[ENU=Concessional Code;
                                                              ENN=Concessional Code];
                                                   Editable=No }
    { 13790;  ;Work Tax Paid       ;Boolean       ;CaptionML=[ENU=Work Tax Paid;
                                                              ENN=Work Tax Paid];
                                                   Editable=No }
    { 16301;  ;Pay TDS             ;Boolean       ;CaptionML=[ENU=Pay TDS;
                                                              ENN=Pay TDS];
                                                   Editable=No }
    { 16302;  ;Pay Work Tax        ;Boolean       ;CaptionML=[ENU=Pay Work Tax;
                                                              ENN=Pay Work Tax];
                                                   Editable=No }
    { 16303;  ;TDS Entry           ;Boolean       ;CaptionML=[ENU=TDS Entry;
                                                              ENN=TDS Entry] }
    { 16304;  ;Pay Excise          ;Boolean       ;CaptionML=[ENU=Pay Excise;
                                                              ENN=Pay Excise] }
    { 16307;  ;TDS/TCS Base Amount ;Decimal       ;CaptionML=[ENU=TDS/TCS Base Amount;
                                                              ENN=TDS/TCS Base Amount];
                                                   Editable=No }
    { 16308;  ;Challan No.         ;Code20        ;CaptionML=[ENU=Challan No.;
                                                              ENN=Challan No.] }
    { 16309;  ;Challan Date        ;Date          ;CaptionML=[ENU=Challan Date;
                                                              ENN=Challan Date] }
    { 16310;  ;Adjustment          ;Boolean       ;CaptionML=[ENU=Adjustment;
                                                              ENN=Adjustment];
                                                   Editable=No }
    { 16312;  ;Pay Sales Tax       ;Boolean       ;CaptionML=[ENU=Pay Sales Tax;
                                                              ENN=Pay Sales Tax];
                                                   Editable=No }
    { 16313;  ;E.C.C. No.          ;Code20        ;TableRelation="E.C.C. Nos.";
                                                   OnValidate=BEGIN
                                                                DelExcCenvatClaimDetail;
                                                              END;

                                                   CaptionML=[ENU=E.C.C. No.;
                                                              ENN=E.C.C. No.] }
    { 16340;  ;Balance Work Tax Amount;Decimal    ;CaptionML=[ENU=Balance Work Tax Amount;
                                                              ENN=Balance Work Tax Amount];
                                                   Editable=No }
    { 16350;  ;Pay VAT             ;Boolean       ;CaptionML=[ENU=Pay VAT;
                                                              ENN=Pay VAT] }
    { 16351;  ;VAT Claim Amount    ;Decimal       ;OnValidate=VAR
                                                                VATValidation@1280000 : Codeunit 16350;
                                                              BEGIN
                                                                IF "VAT Claim Amount" > Amount THEN
                                                                  ERROR(Text16350);
                                                                IF "VAT Claim Amount" <> 0 THEN
                                                                  VATValidation.CheckVATClaim("VAT Claim Amount");
                                                              END;

                                                   CaptionML=[ENU=VAT Claim Amount;
                                                              ENN=VAT Claim Amount] }
    { 16352;  ;Refund VAT          ;Boolean       ;CaptionML=[ENU=Refund VAT;
                                                              ENN=Refund VAT] }
    { 16353;  ;Balance Surcharge Amount;Decimal   ;CaptionML=[ENU=Balance Surcharge Amount;
                                                              ENN=Balance Surcharge Amount];
                                                   Editable=No }
    { 16354;  ;Cheque Date         ;Date          ;CaptionML=[ENU=Cheque Date;
                                                              ENN=Cheque Date] }
    { 16358;  ;Surcharge Base Amount;Decimal      ;CaptionML=[ENU=Surcharge Base Amount;
                                                              ENN=Surcharge Base Amount];
                                                   Editable=No }
    { 16359;  ;TDS Group           ;Option        ;CaptionML=[ENU=TDS Group;
                                                              ENN=TDS Group];
                                                   OptionCaptionML=[ENU=" ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others,Rent for Plant & Machinery,Rent for Land & Building,Banking Services,Compensation On Immovable Property,PF Accumulated,Payment For Immovable Property";
                                                                    ENN=" ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others,Rent for Plant & Machinery,Rent for Land & Building,Banking Services,Compensation On Immovable Property,PF Accumulated,Payment For Immovable Property"];
                                                   OptionString=[ ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others,Rent for Plant & Machinery,Rent for Land & Building,Banking Services,Compensation On Immovable Property,PF Accumulated,Payment For Immovable Property];
                                                   Editable=No }
    { 16360;  ;Work Tax Nature Of Deduction;Code10;TableRelation="TDS Nature of Deduction";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("GST on Advance Payment",FALSE);
                                                                TDSNOD.MODIFYALL(Mark,FALSE);
                                                                NODLines.RESET;
                                                                CASE "Party Type" OF
                                                                  "Party Type"::Vendor:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Vendor);
                                                                  "Party Type"::Customer:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Customer);
                                                                  "Party Type"::Party:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Party);
                                                                END;
                                                                NODLines.SETRANGE("No.","Party Code");
                                                                NODLines.SETRANGE("NOD/NOC","Work Tax Nature Of Deduction");
                                                                NODLines.SETRANGE("TDS Group",NODLines."TDS Group"::Others);
                                                                IF (NOT NODLines.FIND('-')) AND ("Work Tax Nature Of Deduction" <> '') THEN
                                                                  FIELDERROR("Work Tax Nature Of Deduction",Text13701);
                                                                IF TDSNOD.GET("Work Tax Nature Of Deduction") THEN
                                                                  "Work Tax Group" := TDSNOD."TDS Group"
                                                                ELSE
                                                                  "Work Tax Group" := "Work Tax Group"::" ";
                                                                CalculateTDS;
                                                              END;

                                                   OnLookup=BEGIN
                                                              NODLines.RESET;
                                                              CASE "Party Type" OF
                                                                "Party Type"::Vendor:
                                                                  NODLines.SETRANGE(Type,NODLines.Type::Vendor);
                                                                "Party Type"::Customer:
                                                                  NODLines.SETRANGE(Type,NODLines.Type::Customer);
                                                                "Party Type"::Party:
                                                                  NODLines.SETRANGE(Type,NODLines.Type::Party);
                                                              END;
                                                              NODLines.SETRANGE("No.","Party Code");
                                                              NODLines.SETRANGE("TDS Group",NODLines."TDS Group"::Others);
                                                              IF NODLines.FIND('-') THEN
                                                                REPEAT
                                                                  TDSNOD.RESET;
                                                                  TDSNOD.SETRANGE(Code,NODLines."NOD/NOC");
                                                                  IF TDSNOD.FINDFIRST THEN
                                                                    TDSNOD.MODIFYALL(Mark,TRUE);
                                                                  COMMIT;
                                                                UNTIL NODLines.NEXT = 0;

                                                              TDSNOD.RESET;
                                                              TDSNOD.SETRANGE(Mark,TRUE);

                                                              IF PAGE.RUNMODAL(PAGE::"TDS Nature of Deductions",TDSNOD) = ACTION::LookupOK THEN BEGIN
                                                                NODLines.RESET;
                                                                CASE "Party Type" OF
                                                                  "Party Type"::Vendor:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Vendor);
                                                                  "Party Type"::Customer:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Customer);
                                                                  "Party Type"::Party:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Party);
                                                                END;

                                                                NODLines.SETRANGE("No.","Party Code");
                                                                NODLines.SETRANGE("NOD/NOC",TDSNOD.Code);
                                                                IF (NOT NODLines.FIND('-')) AND (TDSNOD.Code <> '') THEN
                                                                  FIELDERROR("TDS Nature of Deduction",Text13701);
                                                                "Work Tax Nature Of Deduction" := TDSNOD.Code;
                                                              END;

                                                              VALIDATE("Work Tax Nature Of Deduction");
                                                            END;

                                                   CaptionML=[ENU=Work Tax Nature Of Deduction;
                                                              ENN=Work Tax Nature Of Deduction] }
    { 16361;  ;Work Tax Group      ;Option        ;CaptionML=[ENU=Work Tax Group;
                                                              ENN=Work Tax Group];
                                                   OptionCaptionML=[ENU=" ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others";
                                                                    ENN=" ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others"];
                                                   OptionString=[ ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others];
                                                   Editable=No }
    { 16362;  ;Balance TDS/TCS Amount;Decimal     ;CaptionML=[ENU=Balance TDS/TCS Amount;
                                                              ENN=Balance TDS/TCS Amount];
                                                   Editable=No }
    { 16363;  ;Temp TDS/TCS Base   ;Decimal       ;CaptionML=[ENU=Temp TDS/TCS Base;
                                                              ENN=Temp TDS/TCS Base] }
    { 16364;  ;Excise Posting      ;Boolean       ;CaptionML=[ENU=Excise Posting;
                                                              ENN=Excise Posting] }
    { 16365;  ;Product Type        ;Option        ;CaptionML=[ENU=Product Type;
                                                              ENN=Product Type];
                                                   OptionCaptionML=[ENU=,Item,FA;
                                                                    ENN=,Item,FA];
                                                   OptionString=,Item,FA }
    { 16366;  ;Excise Charge       ;Boolean       ;OnValidate=BEGIN
                                                                IF "Excise Charge" = TRUE THEN BEGIN
                                                                  "Pay Excise" := FALSE;
                                                                  "Pay Work Tax" := FALSE;
                                                                  "Pay TDS" := FALSE;
                                                                  "Pay VAT" := FALSE;
                                                                  "Refund VAT" := FALSE;
                                                                  TESTFIELD(PLA,FALSE);
                                                                  TESTFIELD("Account Type","Account Type"::"G/L Account");
                                                                  TESTFIELD("Bal. Account Type","Bal. Account Type"::"G/L Account");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Excise Charge;
                                                              ENN=Excise Charge] }
    { 16370;  ;Deferred Claim FA Excise;Boolean   ;CaptionML=[ENU=Deferred Claim FA Excise;
                                                              ENN=Deferred Claim FA Excise];
                                                   Editable=No }
    { 16372;  ;Cheque No.          ;Code10        ;CaptionML=[ENU=Cheque No.;
                                                              ENN=Cheque No.] }
    { 16374;  ;Deferred            ;Boolean       ;OnValidate=BEGIN
                                                                IF Deferred THEN
                                                                  TESTFIELD("ADC VAT Amount",0);
                                                              END;

                                                   CaptionML=[ENU=Deferred;
                                                              ENN=Deferred] }
    { 16375;  ;Service Tax Type    ;Option        ;OnValidate=BEGIN
                                                                CalculateServiceTax;
                                                                CalculateTDS;
                                                              END;

                                                   CaptionML=[ENU=Service Tax Type;
                                                              ENN=Service Tax Type];
                                                   OptionCaptionML=[ENU=Sale,Purchase,Charge;
                                                                    ENN=Sale,Purchase,Charge];
                                                   OptionString=Sale,Purchase,Charge }
    { 16376;  ;Service Tax Group Code;Code20      ;TableRelation="Service Tax Groups".Code;
                                                   OnValidate=BEGIN
                                                                UpdatePoT;
                                                                CalculateServiceTax;
                                                                CalculateTDS;
                                                              END;

                                                   CaptionML=[ENU=Service Tax Group Code;
                                                              ENN=Service Tax Group Code] }
    { 16377;  ;Service Tax Registration No.;Code20;TableRelation="Service Tax Registration Nos.".Code;
                                                   OnValidate=BEGIN
                                                                UpdatePoT;
                                                                CalculateServiceTax;
                                                                CalculateTDS;
                                                              END;

                                                   CaptionML=[ENU=Service Tax Registration No.;
                                                              ENN=Service Tax Registration No.] }
    { 16378;  ;Service Tax Base Amount (LCY);Decimal;
                                                   OnValidate=VAR
                                                                ServiceTaxSetup@1500000 : Record 16472;
                                                              BEGIN
                                                                IF ((NOT HasServiceTax) OR
                                                                   (NOT ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date")) OR
                                                                   IsNormalPayment OR
                                                                   (NOT ("Document Type" IN
                                                                        ["Document Type"::Payment,"Document Type"::Refund,"Document Type"::Invoice,"Document Type"::"Credit Memo"])))
                                                                THEN BEGIN
                                                                  TESTFIELD("Service Tax Base Amount (LCY)",0);
                                                                  EXIT;
                                                                END;

                                                                IF ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) THEN
                                                                  CalcForwardAdvPaymentServTax(ServiceTaxSetup)
                                                                ELSE
                                                                  UpdateAmountFromAmountLCY("Service Tax Base Amount (LCY)");
                                                              END;

                                                   CaptionML=[ENU=Service Tax Base Amount (LCY);
                                                              ENN=Service Tax Base Amount (LCY)];
                                                   Editable=Yes }
    { 16379;  ;Service Tax Amount  ;Decimal       ;CaptionML=[ENU=Service Tax Amount;
                                                              ENN=Service Tax Amount];
                                                   Editable=No }
    { 16382;  ;Service Tax Entry   ;Boolean       ;CaptionML=[ENU=Service Tax Entry;
                                                              ENN=Service Tax Entry] }
    { 16383;  ;eCESS %             ;Decimal       ;CaptionML=[ENU=eCESS %;
                                                              ENN=eCESS %];
                                                   Editable=No }
    { 16384;  ;eCESS on TDS/TCS Amount;Decimal    ;CaptionML=[ENU=eCESS on TDS/TCS Amount;
                                                              ENN=eCESS on TDS/TCS Amount];
                                                   Editable=No }
    { 16385;  ;Total TDS/TCS Incl. SHE CESS;Decimal;
                                                   CaptionML=[ENU=Total TDS/TCS Incl. SHE CESS;
                                                              ENN=Total TDS/TCS Incl. SHE CESS];
                                                   Editable=No }
    { 16388;  ;Balance eCESS on TDS/TCS Amt;Decimal;
                                                   CaptionML=[ENU=Balance eCESS on TDS/TCS Amt;
                                                              ENN=Balance eCESS on TDS/TCS Amt] }
    { 16389;  ;Per Contract        ;Boolean       ;CaptionML=[ENU=Per Contract;
                                                              ENN=Per Contract] }
    { 16390;  ;Capital Item        ;Boolean       ;CaptionML=[ENU=Capital Item;
                                                              ENN=Capital Item] }
    { 16391;  ;Item No.            ;Code20        ;CaptionML=[ENU=Item No.;
                                                              ENN=Item No.] }
    { 16406;  ;Service Tax eCess Amount;Decimal   ;CaptionML=[ENU=Service Tax eCess Amount;
                                                              ENN=Service Tax eCess Amount] }
    { 16460;  ;Goes to Excise Entry;Boolean       ;CaptionML=[ENU=Goes to Excise Entry;
                                                              ENN=Goes to Excise Entry];
                                                   Editable=No }
    { 16461;  ;From Excise         ;Boolean       ;CaptionML=[ENU=From Excise;
                                                              ENN=From Excise];
                                                   Editable=No }
    { 16478;  ;T.A.N. No.          ;Code10        ;TableRelation="T.A.N. Nos.";
                                                   CaptionML=[ENU=T.A.N. No.;
                                                              ENN=T.A.N. No.] }
    { 16491;  ;VAT Type            ;Option        ;CaptionML=[ENU=VAT Type;
                                                              ENN=VAT Type];
                                                   OptionCaptionML=[ENU=" ,Item,Capital Goods";
                                                                    ENN=" ,Item,Capital Goods"];
                                                   OptionString=[ ,Item,Capital Goods] }
    { 16492;  ;TDS From Orders     ;Boolean       ;CaptionML=[ENU=TDS From Orders;
                                                              ENN=TDS From Orders] }
    { 16493;  ;Consignment Note No.;Code20        ;CaptionML=[ENU=Consignment Note No.;
                                                              ENN=Consignment Note No.] }
    { 16494;  ;Declaration Form (GTA);Boolean     ;OnValidate=BEGIN
                                                                CalculateServiceTax;
                                                              END;

                                                   CaptionML=[ENU=Declaration Form (GTA);
                                                              ENN=Declaration Form (GTA)] }
    { 16496;  ;Service Type (Rev. Chrg.);Option   ;CaptionML=[ENU=Service Type (Rev. Chrg.);
                                                              ENN=Service Type (Rev. Chrg.)];
                                                   OptionCaptionML=[ENU=" ,Inward,Outward Stock Transfer,Outward Input Service,Outward";
                                                                    ENN=" ,Inward,Outward Stock Transfer,Outward Input Service,Outward"];
                                                   OptionString=[ ,Inward,Outward Stock Transfer,Outward Input Service,Outward] }
    { 16500;  ;TCS Nature of Collection;Code10    ;TableRelation="TCS Nature Of Collection";
                                                   OnValidate=VAR
                                                                CompanyInfo@1500000 : Record 79;
                                                                Location@1500001 : Record 14;
                                                              BEGIN
                                                                IF "TCS Nature of Collection" = '' THEN
                                                                  EXIT;

                                                                IF "Party Type" = "Party Type"::Vendor THEN
                                                                  ERROR(Text16500,FIELDCAPTION("TCS Nature of Collection"),
                                                                    FIELDCAPTION("Party Type"),"Party Type");
                                                                "TDS Nature of Deduction" := '';
                                                                "TDS Category" := "TDS Category"::" ";
                                                                "TDS Group" := "TDS Group"::" ";
                                                                "T.A.N. No." := '';

                                                                NOCLine.RESET;
                                                                NOCLine.SETRANGE(Type,"Party Type");
                                                                NOCLine.SETRANGE("No.","Party Code");
                                                                NOCLine.SETRANGE("NOD/NOC","TCS Nature of Collection");
                                                                IF NOT NOCLine.FIND('-') THEN
                                                                  FIELDERROR("TCS Nature of Collection",Text16501);

                                                                TCSNOC.GET("TCS Nature of Collection");
                                                                "TCS Type" := TCSNOC."TCS Type";

                                                                CompanyInfo.GET;
                                                                "T.C.A.N. No." := CompanyInfo."T.C.A.N. No.";
                                                                IF "Location Code" <> '' THEN BEGIN
                                                                  Location.GET("Location Code");
                                                                  "T.C.A.N. No." := Location."T.C.A.N. No.";
                                                                END;
                                                                IF NODHeader.GET("Party Type","Party Code") THEN
                                                                  VALIDATE("Assessee Code",NODHeader."Assesse Code");
                                                                InitTCS;
                                                                CalculateTCS;
                                                              END;

                                                   OnLookup=VAR
                                                              NatureOfCollection@1500000 : Record 16507;
                                                              TempNatureOfCollection@1500001 : TEMPORARY Record 16507;
                                                            BEGIN
                                                              NOCLine.RESET;
                                                              NOCLine.SETRANGE(Type,"Party Type");
                                                              NOCLine.SETRANGE("No.","Party Code");
                                                              IF "Party Type" = "Party Type"::Party THEN
                                                                NOCLine.SETRANGE("TCS Party",TRUE);
                                                              IF NOCLine.FIND('-') THEN
                                                                REPEAT
                                                                  NatureOfCollection.GET(NOCLine."NOD/NOC");
                                                                  TempNatureOfCollection := NatureOfCollection;
                                                                  TempNatureOfCollection.INSERT;
                                                                UNTIL NOCLine.NEXT = 0;

                                                              IF PAGE.RUNMODAL(PAGE::"TCS Nature of Collections",TempNatureOfCollection) = ACTION::LookupOK THEN
                                                                "TCS Nature of Collection" := TempNatureOfCollection.Code;
                                                              VALIDATE("TCS Nature of Collection");
                                                            END;

                                                   CaptionML=[ENU=TCS Nature of Collection;
                                                              ENN=TCS Nature of Collection] }
    { 16502;  ;Pay TCS             ;Boolean       ;CaptionML=[ENU=Pay TCS;
                                                              ENN=Pay TCS] }
    { 16503;  ;TCS Entry           ;Boolean       ;CaptionML=[ENU=TCS Entry;
                                                              ENN=TCS Entry] }
    { 16504;  ;TCS Type            ;Option        ;CaptionML=[ENU=TCS Type;
                                                              ENN=TCS Type];
                                                   OptionCaptionML=[ENU=" ,A,B,C,D,E,F,G,H,I,J,K,L,M,N";
                                                                    ENN=" ,A,B,C,D,E,F,G,H,I,J,K,L,M,N"];
                                                   OptionString=[ ,A,B,C,D,E,F,G,H,I,J,K,L,M,N] }
    { 16505;  ;T.C.A.N. No.        ;Code10        ;TableRelation="T.C.A.N. No.";
                                                   CaptionML=[ENU=T.C.A.N. No.;
                                                              ENN=T.C.A.N. No.] }
    { 16506;  ;TCS From Orders     ;Boolean       ;CaptionML=[ENU=TCS From Orders;
                                                              ENN=TCS From Orders] }
    { 16507;  ;FA Shift Line No.   ;Integer       ;OnLookup=VAR
                                                              FAShift@1500000 : Record 16520;
                                                            BEGIN
                                                              FAShift.RESET;
                                                              FAShift.SETRANGE("FA No.","Account No.");
                                                              FAShift.SETRANGE("Depreciation Book Code","Depreciation Book Code");
                                                              IF PAGE.RUNMODAL(16537,FAShift) = ACTION::LookupOK THEN
                                                                "FA Shift Line No." := FAShift."Line No.";
                                                            END;

                                                   CaptionML=[ENU=FA Shift Line No.;
                                                              ENN=FA Shift Line No.] }
    { 16508;  ;Non ITC Claimable Usage %;Decimal  ;CaptionML=[ENU=Non ITC Claimable Usage %;
                                                              ENN=Non ITC Claimable Usage %];
                                                   MinValue=0;
                                                   Editable=Yes }
    { 16509;  ;Input Credit/Output Tax Amount;Decimal;
                                                   CaptionML=[ENU=Input Credit/Output Tax Amount;
                                                              ENN=Input Credit/Output Tax Amount];
                                                   Editable=No }
    { 16510;  ;Amount Loaded on Item;Decimal      ;CaptionML=[ENU=Amount Loaded on Item;
                                                              ENN=Amount Loaded on Item];
                                                   Editable=No }
    { 16518;  ;Tax Amount Loaded on Inventory;Decimal;
                                                   CaptionML=[ENU=Tax Amount Loaded on Inventory;
                                                              ENN=Tax Amount Loaded on Inventory] }
    { 16519;  ;Deferment           ;Boolean       ;CaptionML=[ENU=Deferment;
                                                              ENN=Deferment] }
    { 16520;  ;VAT Entry           ;Boolean       ;CaptionML=[ENU=VAT Entry;
                                                              ENN=VAT Entry] }
    { 16521;  ;Standard Deduction Amount;Decimal  ;CaptionML=[ENU=Standard Deduction Amount;
                                                              ENN=Standard Deduction Amount] }
    { 16522;  ;Service Tax Rounding Precision;Decimal;
                                                   OnValidate=BEGIN
                                                                FieldNum := FIELDNO("Service Tax Rounding Precision");
                                                                CalculateServiceTax;
                                                                IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::Payment) AND ("Applies-to Doc. No." <> '') AND
                                                                   ("Transaction No. Serv. Tax" <> 0)
                                                                THEN
                                                                  FIELDERROR("Service Tax Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Service Tax Rounding Precision;
                                                              ENN=Service Tax Rounding Precision] }
    { 16523;  ;Service Tax Rounding Type;Option   ;OnValidate=BEGIN
                                                                FieldNum := FIELDNO("Service Tax Rounding Type");
                                                                CalculateServiceTax;
                                                                IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::Payment) AND ("Applies-to Doc. No." <> '') AND
                                                                   ("Transaction No. Serv. Tax" <> 0)
                                                                THEN
                                                                  FIELDERROR("Service Tax Rounding Type");
                                                              END;

                                                   CaptionML=[ENU=Service Tax Rounding Type;
                                                              ENN=Service Tax Rounding Type];
                                                   OptionCaptionML=[ENU=Nearest,Up,Down;
                                                                    ENN=Nearest,Up,Down];
                                                   OptionString=Nearest,Up,Down }
    { 16525;  ;Standard Deduction Amount(ACY);Decimal;
                                                   CaptionML=[ENU=Standard Deduction Amount(ACY);
                                                              ENN=Standard Deduction Amount(ACY)] }
    { 16526;  ;Input/Output Tax Amount;Decimal    ;CaptionML=[ENU=Input/Output Tax Amount;
                                                              ENN=Input/Output Tax Amount] }
    { 16527;  ;Excise Refund       ;Boolean       ;CaptionML=[ENU=Excise Refund;
                                                              ENN=Excise Refund] }
    { 16528;  ;VAT Adjustment Entry;Boolean       ;CaptionML=[ENU=VAT Adjustment Entry;
                                                              ENN=VAT Adjustment Entry] }
    { 16529;  ;Trading             ;Boolean       ;CaptionML=[ENU=Trading;
                                                              ENN=Trading] }
    { 16530;  ;Sales Return Order  ;Boolean       ;CaptionML=[ENU=Sales Return Order;
                                                              ENN=Sales Return Order] }
    { 16531;  ;Excise as Service Tax Credit;Boolean;
                                                   CaptionML=[ENU=Excise as Service Tax Credit;
                                                              ENN=Excise as Service Tax Credit] }
    { 16532;  ;Serv. Tax on Advance Payment;Boolean;
                                                   OnValidate=BEGIN
                                                                IF (NOT ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) AND
                                                                  "Serv. Tax on Advance Payment")
                                                                THEN
                                                                  ERROR(Text16510,FIELDCAPTION("Serv. Tax on Advance Payment"),FIELDCAPTION("Document Type"));

                                                                  CalculateServiceTax;
                                                              END;

                                                   CaptionML=[ENU=Serv. Tax on Advance Payment;
                                                              ENN=Serv. Tax on Advance Payment] }
    { 16533;  ;Transaction No. Serv. Tax;Integer  ;CaptionML=[ENU=Transaction No. Serv. Tax;
                                                              ENN=Transaction No. Serv. Tax] }
    { 16534;  ;ADC VAT Amount      ;Decimal       ;OnValidate=BEGIN
                                                                IF "Excise Charge" THEN
                                                                  TESTFIELD(Deferred,FALSE);
                                                              END;

                                                   CaptionML=[ENU=ADC VAT Amount;
                                                              ENN=ADC VAT Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 16537;  ;CVD                 ;Boolean       ;CaptionML=[ENU=CVD;
                                                              ENN=CVD] }
    { 16539;  ;Source Curr. ADC VAT Amount;Decimal;CaptionML=[ENU=Source Curr. ADC VAT Amount;
                                                              ENN=Source Curr. ADC VAT Amount];
                                                   Editable=No }
    { 16547;  ;Service Tax SHE Cess Amount;Decimal;CaptionML=[ENU=Service Tax SHE Cess Amount;
                                                              ENN=Service Tax SHE Cess Amount] }
    { 16548;  ;SHE Cess % on TDS/TCS;Decimal      ;CaptionML=[ENU=SHE Cess % on TDS/TCS;
                                                              ENN=SHE Cess % on TDS/TCS];
                                                   Editable=No }
    { 16549;  ;SHE Cess on TDS/TCS Amount;Decimal ;CaptionML=[ENU=SHE Cess on TDS/TCS Amount;
                                                              ENN=SHE Cess on TDS/TCS Amount];
                                                   Editable=No }
    { 16553;  ;Bal. SHE Cess on TDS/TCS Amt;Decimal;
                                                   CaptionML=[ENU=Bal. SHE Cess on TDS/TCS Amt;
                                                              ENN=Bal. SHE Cess on TDS/TCS Amt];
                                                   Editable=No }
    { 16554;  ;TDS Certificate Receivable;Boolean ;CaptionML=[ENU=TDS Certificate Receivable;
                                                              ENN=TDS Certificate Receivable] }
    { 16555;  ;Input Service Distribution;Boolean ;OnValidate=BEGIN
                                                                IF "Input Service Distribution" AND PoT THEN
                                                                  ERROR(Text16509);
                                                              END;

                                                   CaptionML=[ENU=Input Service Distribution;
                                                              ENN=Input Service Distribution] }
    { 16556;  ;Stale Cheque        ;Boolean       ;CaptionML=[ENU=Stale Cheque;
                                                              ENN=Stale Cheque] }
    { 16557;  ;ST Pure Agent       ;Boolean       ;OnValidate=BEGIN
                                                                CalculateServiceTax;
                                                              END;

                                                   CaptionML=[ENU=ST Pure Agent;
                                                              ENN=ST Pure Agent] }
    { 16558;  ;Nature of Services  ;Option        ;OnValidate=BEGIN
                                                                CalculateServiceTax;
                                                              END;

                                                   CaptionML=[ENU=Nature of Services;
                                                              ENN=Nature of Services];
                                                   OptionCaptionML=[ENU=" ,Exempted,Export";
                                                                    ENN=" ,Exempted,Export"];
                                                   OptionString=[ ,Exempted,Export] }
    { 16559;  ;Work Tax % Applied  ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT "Work Tax" THEN
                                                                  FIELDERROR("Work Tax % Applied");
                                                                IF NOT "Reverse Work Tax" THEN BEGIN
                                                                  "W.T Amount" := "Work Tax % Applied" * "Work Tax Base Amount" / 100;
                                                                  IF ("Work Tax Nature Of Deduction" <> '') AND ("W.T Amount" <> 0) THEN BEGIN
                                                                    IF "Debit Amount" < RoundTDSAmount("W.T Amount") THEN
                                                                      Amount := (RoundTDSAmount("W.T Amount") - "Debit Amount")
                                                                    ELSE
                                                                      Amount := -("Debit Amount" - RoundTDSAmount("W.T Amount"));
                                                                  END ELSE
                                                                    IF ("Work Tax Nature Of Deduction" <> '') AND ("W.T Amount" = 0) THEN
                                                                      Amount := 0;
                                                                END ELSE
                                                                  Amount := -"Debit Amount";
                                                              END;

                                                   CaptionML=[ENU=Work Tax % Applied;
                                                              ENN=Work Tax % Applied] }
    { 16560;  ;W.T Amount          ;Decimal       ;CaptionML=[ENU=W.T Amount;
                                                              ENN=W.T Amount] }
    { 16561;  ;Work Tax            ;Boolean       ;CaptionML=[ENU=Work Tax;
                                                              ENN=Work Tax] }
    { 16562;  ;Reverse Work Tax    ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT "Work Tax" THEN
                                                                  FIELDERROR("Reverse Work Tax");
                                                                IF NOT "Reverse Work Tax" THEN BEGIN
                                                                  Amount := 0;
                                                                  IF "Work Tax % Applied" <> 0 THEN
                                                                    VALIDATE("Work Tax % Applied");
                                                                END ELSE BEGIN
                                                                  "Work Tax % Applied" := 0;
                                                                  "W.T Amount" := 0;
                                                                  VALIDATE("Work Tax % Applied");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Reverse Work Tax;
                                                              ENN=Reverse Work Tax] }
    { 16563;  ;CWIP G/L Type       ;Option        ;OnValidate=BEGIN
                                                                IF "CWIP G/L Type" <> "CWIP G/L Type"::" " THEN BEGIN
                                                                  TESTFIELD("Account Type","Account Type"::"G/L Account");
                                                                  TESTFIELD("Job No.");
                                                                  Job.GET("Job No.");
                                                                  Job.TESTFIELD("Job Type",Job."Job Type"::"Capital WIP");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=CWIP G/L Type;
                                                              ENN=CWIP G/L Type];
                                                   OptionCaptionML=[ENU=" ,Labor,Material,Overheads";
                                                                    ENN=" ,Labor,Material,Overheads"];
                                                   OptionString=[ ,Labor,Material,Overheads] }
    { 16564;  ;CWIP                ;Boolean       ;CaptionML=[ENU=CWIP;
                                                              ENN=CWIP];
                                                   Editable=No }
    { 16565;  ;Shift Type          ;Option        ;CaptionML=[ENU=Shift Type;
                                                              ENN=Shift Type];
                                                   OptionCaptionML=[ENU=Single,Double,Triple;
                                                                    ENN=Single,Double,Triple];
                                                   OptionString=Single,Double,Triple }
    { 16566;  ;Industry Type       ;Option        ;CaptionML=[ENU=Industry Type;
                                                              ENN=Industry Type];
                                                   OptionCaptionML=[ENU=Normal,Non Seasonal,Seasonal;
                                                                    ENN=Normal,Non Seasonal,Seasonal];
                                                   OptionString=Normal,Non Seasonal,Seasonal }
    { 16567;  ;No. of Days for Shift;Integer      ;CaptionML=[ENU=No. of Days for Shift;
                                                              ENN=No. of Days for Shift];
                                                   MinValue=0 }
    { 16568;  ;VATable Purchase Tax;Decimal       ;CaptionML=[ENU=VATable Purchase Tax;
                                                              ENN=VATable Purchase Tax] }
    { 16569;  ;Sale Return Type    ;Option        ;CaptionML=[ENU=Sale Return Type;
                                                              ENN=Sale Return Type];
                                                   OptionCaptionML=[ENU=" ,Sales  Cancellation";
                                                                    ENN=" ,Sales  Cancellation"];
                                                   OptionString=[ ,Sales  Cancellation] }
    { 16570;  ;RG/Service Tax Set Off Date;Date   ;CaptionML=[ENU=RG/Service Tax Set Off Date;
                                                              ENN=RG/Service Tax Set Off Date] }
    { 16571;  ;PLA Set Off Date    ;Date          ;CaptionML=[ENU=PLA Set Off Date;
                                                              ENN=PLA Set Off Date] }
    { 16572;  ;Insert S.T Recoverable;Boolean     ;CaptionML=[ENU=Insert S.T Recoverable;
                                                              ENN=Insert S.T Recoverable];
                                                   Editable=No }
    { 16573;  ;Offline Application ;Boolean       ;CaptionML=[ENU=Offline Application;
                                                              ENN=Offline Application];
                                                   Editable=No }
    { 16574;  ;S.T From Order      ;Boolean       ;CaptionML=[ENU=S.T From Order;
                                                              ENN=S.T From Order];
                                                   Editable=No }
    { 16575;  ;Un Application Entry;Boolean       ;CaptionML=[ENU=Un Application Entry;
                                                              ENN=Un Application Entry];
                                                   Editable=No }
    { 16576;  ;Include Serv. Tax in TDS Base;Boolean;
                                                   OnValidate=BEGIN
                                                                CalculateTDS;
                                                              END;

                                                   CaptionML=[ENU=Include Serv. Tax in TDS Base;
                                                              ENN=Include Serv. Tax in TDS Base] }
    { 16577;  ;TDS Line Amount     ;Decimal       ;CaptionML=[ENU=TDS Line Amount;
                                                              ENN=TDS Line Amount] }
    { 16578;  ;Posting             ;Boolean       ;CaptionML=[ENU=Posting;
                                                              ENN=Posting] }
    { 16579;  ;Applied TDS Base Amount;Decimal    ;CaptionML=[ENU=Applied TDS Base Amount;
                                                              ENN=Applied TDS Base Amount] }
    { 16580;  ;PoT                 ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("Input Service Distribution");
                                                              END;

                                                   CaptionML=[ENU=PoT;
                                                              ENN=PoT] }
    { 16581;  ;TDS/TCS Base Amount Applied;Decimal;CaptionML=[ENU=TDS/TCS Base Amount Applied;
                                                              ENN=TDS/TCS Base Amount Applied];
                                                   Editable=No }
    { 16582;  ;TDS/TCS Base Amount Adjusted;Boolean;
                                                   CaptionML=[ENU=TDS/TCS Base Amount Adjusted;
                                                              ENN=TDS/TCS Base Amount Adjusted];
                                                   Editable=No }
    { 16583;  ;Work Tax Base Amount Applied;Decimal;
                                                   CaptionML=[ENU=Work Tax Base Amount Applied;
                                                              ENN=Work Tax Base Amount Applied];
                                                   Editable=No }
    { 16584;  ;Work Tax Base Amount Adjusted;Boolean;
                                                   CaptionML=[ENU=Work Tax Base Amount Adjusted;
                                                              ENN=Work Tax Base Amount Adjusted];
                                                   Editable=No }
    { 16585;  ;Tot. Serv Tax Amount (Intm);Decimal;CaptionML=[ENU=Tot. Serv Tax Amount (Intm);
                                                              ENN=Tot. Serv Tax Amount (Intm)] }
    { 16586;  ;Nature of Remittance;Code10        ;TableRelation="TDS Nature of Remittance";
                                                   OnValidate=BEGIN
                                                                IF ("TDS Nature of Deduction" <> '') AND ("Nature of Remittance" <> '') THEN
                                                                  TESTFIELD("TDS Group","TDS Group"::"Payable to Non Residents");
                                                                SetFilterOnNODLine("TDS Nature of Deduction");
                                                                IF (NOT NODLines.FINDFIRST) AND ("Nature of Remittance" <> '') THEN
                                                                  FIELDERROR("Nature of Remittance",Text16508);

                                                                CalculateTDS;
                                                              END;

                                                   OnLookup=VAR
                                                              NatureOfRemittance@1500001 : Record 13783;
                                                            BEGIN
                                                              SetFilterOnNODLine("TDS Nature of Deduction");
                                                              NODLines.SETFILTER("TDS Group",'<>%1',NODLines."TDS Group"::Others);
                                                              NatureOfRemittance.MarkEntriesUsedInNOD(NODLines);
                                                              IF PAGE.RUNMODAL(PAGE::"TDS Nature of Remittances",NatureOfRemittance) = ACTION::LookupOK THEN BEGIN
                                                                SetFilterOnNODLine("TDS Nature of Deduction");
                                                                IF (NOT NODLines.FINDFIRST) AND (TDSNOD.Code <> '') THEN
                                                                  FIELDERROR("Nature of Remittance",Text16508);
                                                                VALIDATE("Nature of Remittance",NatureOfRemittance.Code);
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Nature of Remittance;
                                                              ENN=Nature of Remittance] }
    { 16587;  ;Act Applicable      ;Option        ;OnValidate=BEGIN
                                                                IF "Act Applicable" <> "Act Applicable"::" " THEN BEGIN
                                                                  TESTFIELD("TDS Nature of Deduction");
                                                                  TESTFIELD("TDS Group","TDS Group"::"Payable to Non Residents");
                                                                END;
                                                                CalculateTDS;
                                                              END;

                                                   CaptionML=[ENU=Act Applicable;
                                                              ENN=Act Applicable];
                                                   OptionCaptionML=[ENU=" ,IT,DTAA";
                                                                    ENN=" ,IT,DTAA"];
                                                   OptionString=[ ,IT,DTAA] }
    { 16588;  ;Country Code        ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country Code;
                                                              ENN=Country Code];
                                                   Editable=No }
    { 16589;  ;Service Tax SBC %   ;Decimal       ;CaptionML=[ENU=Service Tax SBC %;
                                                              ENN=Service Tax SBC %];
                                                   Editable=No }
    { 16590;  ;Service Tax SBC Amount;Decimal     ;CaptionML=[ENU=Service Tax SBC Amount(LCY);
                                                              ENN=Service Tax SBC Amount(LCY)];
                                                   Editable=No }
    { 16591;  ;Service Tax SBC Amount (Intm);Decimal;
                                                   CaptionML=[ENU=Service Tax SBC Amount(Intm);
                                                              ENN=Service Tax SBC Amount(Intm)];
                                                   Editable=No }
    { 16592;  ;SBC G/L Account     ;Code20        ;CaptionML=[ENU=SBC G/L Account;
                                                              ENN=SBC G/L Account];
                                                   Editable=No }
    { 16593;  ;KK Cess%            ;Decimal       ;CaptionML=[ENU=KK Cess%;
                                                              ENN=KK Cess%];
                                                   Editable=No }
    { 16594;  ;KK Cess Amount      ;Decimal       ;CaptionML=[ENU=KK Cess Amount;
                                                              ENN=KK Cess Amount];
                                                   Editable=No }
    { 16595;  ;KK Cess Amount (Intm);Decimal      ;CaptionML=[ENU=KK Cess Amount (Intm);
                                                              ENN=KK Cess Amount (Intm)];
                                                   Editable=No }
    { 16596;  ;KK Cess G/L Account ;Code20        ;CaptionML=[ENU=KK Cess G/L Account;
                                                              ENN=KK Cess G/L Account];
                                                   Editable=No }
    { 16601;  ;Nature of Supply    ;Option        ;CaptionML=[ENU=Nature of Supply;
                                                              ENN=Nature of Supply];
                                                   OptionCaptionML=[ENU=B2B,B2C;
                                                                    ENN=B2B,B2C];
                                                   OptionString=B2B,B2C }
    { 16602;  ;GST Group Code      ;Code20        ;TableRelation="GST Group";
                                                   OnValidate=VAR
                                                                GSTGroup@1500000 : Record 16404;
                                                                SalesReceivablesSetup@1500001 : Record 311;
                                                              BEGIN
                                                                "GST Reverse Charge" := "GST Vendor Type" IN ["GST Vendor Type"::Import,"GST Vendor Type"::Unregistered,"GST Vendor Type"::SEZ];
                                                                IF ("Document Type" = "Document Type"::Refund) AND ("Applies-to Doc. No." <> '') THEN
                                                                  IF xRec."GST Group Code" <> Rec."GST Group Code" THEN
                                                                    ERROR(GSTRelevantInfoErr);

                                                                TESTFIELD("Work Tax Nature Of Deduction",'');
                                                                IF "GST Group Code" <> '' THEN BEGIN
                                                                  TESTFIELD("Location Code");
                                                                  SalesReceivablesSetup.GET;
                                                                  IF GSTGroup.GET("GST Group Code") THEN BEGIN
                                                                    "GST Group Type" := GSTGroup."GST Group Type";
                                                                    IF "GST Vendor Type"=  "GST Vendor Type"::Registered THEN
                                                                      "GST Reverse Charge" := GSTGroup."Reverse Charge";
                                                                  END;
                                                                  IF "Account Type" = "Account Type"::Customer THEN BEGIN
                                                                    IF GSTGroup."Reverse Charge" THEN
                                                                      ERROR(GSTGroupReverseChargeErr,"GST Group Code");
                                                                    IF GSTGroup."GST Place Of Supply" = GSTGroup."GST Place Of Supply"::" " THEN
                                                                      "GST Place of Supply" := SalesReceivablesSetup."GST Dependency Type"
                                                                    ELSE
                                                                      "GST Place of Supply" := GSTGroup."GST Place Of Supply";
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "GST Place of Supply" := "GST Place of Supply"::" ";
                                                                  "GST Group Type" := "GST Group Type"::Goods;
                                                                END;
                                                                IF xRec."GST Group Code" <> Rec."GST Group Code" THEN BEGIN
                                                                  ClearGSTFields(FALSE);
                                                                  "HSN/SAC Code" := '';
                                                                END;

                                                                IF "GST on Advance Payment" THEN
                                                                  CalculateGSTAmounts;
                                                              END;

                                                   CaptionML=[ENU=GST Group Code;
                                                              ENN=GST Group Code] }
    { 16603;  ;GST Group Type      ;Option        ;CaptionML=[ENU=GST Group Type;
                                                              ENN=GST Group Type];
                                                   OptionCaptionML=[ENU=Goods,Service;
                                                                    ENN=Goods,Service];
                                                   OptionString=Goods,Service;
                                                   Editable=No }
    { 16604;  ;GST Base Amount     ;Decimal       ;CaptionML=[ENU=GST Base Amount;
                                                              ENN=GST Base Amount];
                                                   Editable=No }
    { 16605;  ;GST %               ;Decimal       ;CaptionML=[ENU=GST %;
                                                              ENN=GST %];
                                                   Editable=No }
    { 16606;  ;Total GST Amount    ;Decimal       ;CaptionML=[ENU=Total GST Amount;
                                                              ENN=Total GST Amount];
                                                   Editable=No }
    { 16607;  ;GST Place of Supply ;Option        ;OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Refund) AND ("Applies-to Doc. No." <> '') THEN
                                                                  IF xRec."GST Place of Supply" <> Rec."GST Place of Supply" THEN
                                                                    ERROR(GSTRelevantInfoErr);
                                                                ClearGSTFields(FALSE);
                                                                IF "GST Place of Supply" <> "GST Place of Supply"::"Ship-to Address" THEN
                                                                  "Ship-to Code" := '';
                                                                CheckShipCode;
                                                              END;

                                                   CaptionML=[ENU=GST Place of Supply;
                                                              ENN=GST Place of Supply];
                                                   OptionCaptionML=[ENU=" ,Bill-to Address,Ship-to Address,Location Address";
                                                                    ENN=" ,Bill-to Address,Ship-to Address,Location Address"];
                                                   OptionString=[ ,Bill-to Address,Ship-to Address,Location Address] }
    { 16608;  ;GST Customer Type   ;Option        ;CaptionML=[ENU=GST Customer Type;
                                                              ENN=GST Customer Type];
                                                   OptionCaptionML=[ENU=" ,Registered,Unregistered,Export,Deemed Export,Exempted,SEZ Development,SEZ Unit";
                                                                    ENN=" ,Registered,Unregistered,Export,Deemed Export,Exempted,SEZ Development,SEZ Unit"];
                                                   OptionString=[ ,Registered,Unregistered,Export,Deemed Export,Exempted,SEZ Development,SEZ Unit];
                                                   Editable=No }
    { 16609;  ;GST Vendor Type     ;Option        ;CaptionML=[ENU=GST Vendor Type;
                                                              ENN=GST Vendor Type];
                                                   OptionCaptionML=[ENU=" ,Registered,Composite,Unregistered,Import,Exempted,SEZ";
                                                                    ENN=" ,Registered,Composite,Unregistered,Import,Exempted,SEZ"];
                                                   OptionString=[ ,Registered,Composite,Unregistered,Import,Exempted,SEZ];
                                                   Editable=No }
    { 16611;  ;HSN/SAC Code        ;Code8         ;TableRelation=HSN/SAC.Code WHERE (GST Group Code=FIELD(GST Group Code));
                                                   OnValidate=VAR
                                                                GenJournalLine@1500000 : Record 81;
                                                              BEGIN
                                                                IF ("Document Type" = "Document Type"::Refund) AND ("Applies-to Doc. No." <> '') THEN
                                                                  IF xRec."HSN/SAC Code" <> Rec."HSN/SAC Code" THEN
                                                                    ERROR(GSTRelevantInfoErr);
                                                                IF "GST on Advance Payment" THEN BEGIN
                                                                  ClearGSTFields(FALSE);
                                                                  CalculateGSTAmounts;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=HSN/SAC Code;
                                                              ENN=HSN/SAC Code] }
    { 16612;  ;Exempted            ;Boolean       ;CaptionML=[ENU=Exempted;
                                                              ENN=Exempted] }
    { 16613;  ;GST Component Code  ;Code10        ;TableRelation="GST Component";
                                                   OnValidate=BEGIN
                                                                IF ("Tax Type" <> "Tax Type" ::" ") AND ("Location Code" <> '') AND ("GST Component Code" <> '') THEN BEGIN
                                                                  Location.GET("Location Code");
                                                                  GSTPostingSetup.GET(Location."State Code","GST Component Code");
                                                                  GSTPostingSetup.TESTFIELD("Receivable Account");
                                                                  "Account Type" := "Account Type"::"G/L Account";
                                                                  "Account No." := GSTPostingSetup."Receivable Account";
                                                                  "Bal. Account Type" := "Bal. Account Type"::"G/L Account";
                                                                  "GST Base Amount" := 0;
                                                                  "GST %" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=GST Component Code;
                                                              ENN=GST Component Code] }
    { 16614;  ;GST on Advance Payment;Boolean     ;OnValidate=BEGIN
                                                                ClearGSTFields("GST on Advance Payment");
                                                                IF "Tax Type" <> "Tax Type" ::" " THEN
                                                                  FIELDERROR("Tax Type");
                                                                TESTFIELD("Document Type","Document Type"::Payment);
                                                                TESTFIELD("Work Tax Nature Of Deduction",'');
                                                                IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
                                                                  TESTFIELD("GST on Advance Payment",FALSE);
                                                                CASE "Account Type" OF
                                                                  "Account Type"::Customer : BEGIN
                                                                  IF NOT ("GST Customer Type" IN ["GST Customer Type"::Registered,"GST Customer Type"::Unregistered]) THEN BEGIN
                                                                    TESTFIELD("GST on Advance Payment",FALSE);
                                                                    TESTFIELD("Currency Code",'');
                                                                  END;
                                                                  TESTFIELD("GST Input Service Distribution",FALSE);
                                                                  IF "GST Place of Supply" = "GST Place of Supply"::" " THEN
                                                                    ERROR(STRSUBSTNO(PlaceOfSupplyErr,"Journal Template Name","Journal Batch Name","Line No."));
                                                                  END;
                                                                  "Account Type"::Vendor : BEGIN
                                                                      TESTFIELD("GST Input Service Distribution",FALSE);
                                                                    IF NOT "GST Reverse Charge" THEN
                                                                      TESTFIELD("GST on Advance Payment",FALSE);
                                                                    IF ("GST Vendor Type" = "GST Vendor Type"::Import) OR ("GST Vendor Type" = "GST Vendor Type"::SEZ) THEN
                                                                      TESTFIELD("GST Group Type","GST Group Type"::Service);
                                                                  END;
                                                                END;

                                                                IF ("GST Place of Supply" = "GST Place of Supply"::"Ship-to Address") AND ("Ship-to Code" = '') THEN
                                                                  ERROR(BlankShiptoCodeErr);
                                                                CompanyInformation.GET;
                                                                CompanyInformation.TESTFIELD("GST Registration No.");
                                                                IF "GST on Advance Payment" THEN
                                                                  CalculateGSTAmounts;
                                                              END;

                                                   CaptionML=[ENU=GST on Advance Payment;
                                                              ENN=GST on Advance Payment] }
    { 16615;  ;Ship-to Code        ;Code10        ;TableRelation=IF (Account Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Account No.));
                                                   OnValidate=BEGIN

                                                                CheckShipCode;
                                                              END;

                                                   CaptionML=[ENU=Ship-to Code;
                                                              ENN=Ship-to Code] }
    { 16616;  ;Tax Type            ;Option        ;OnValidate=BEGIN
                                                                IF "Tax Type" <> "Tax Type" :: " " THEN BEGIN
                                                                  "Document Type" := "Document Type"::" ";
                                                                  "Account Type" := "Account Type"::"G/L Account";
                                                                  "Bal. Account Type" := "Bal. Account Type"::"G/L Account";
                                                                  "GST Base Amount" := 0;
                                                                  "GST %" := 0;
                                                                  IF ("GST Component Code" <> '') AND ("Location Code" <> '') THEN BEGIN
                                                                    Location.GET("Location Code");
                                                                    GSTPostingSetup.GET(Location."State Code","GST Component Code");
                                                                    GSTPostingSetup.TESTFIELD("Receivable Account");
                                                                    "Account No." := GSTPostingSetup."Receivable Account";
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Tax Type;
                                                              ENN=Tax Type];
                                                   OptionCaptionML=[ENU=" ,Sales Tax,Excise,Service Tax";
                                                                    ENN=" ,Sales Tax,Excise,Service Tax"];
                                                   OptionString=[ ,Sales Tax,Excise,Service Tax] }
    { 16617;  ;GST Jurisdiction Type;Option       ;CaptionML=[ENU=GST Jurisdiction Type;
                                                              ENN=GST Jurisdiction Type];
                                                   OptionCaptionML=[ENU=Intrastate,Interstate;
                                                                    ENN=Intrastate,Interstate];
                                                   OptionString=Intrastate,Interstate }
    { 16618;  ;Adv. Pmt. Adjustment;Boolean       ;CaptionML=[ENU=Adv. Pmt. Adjustment;
                                                              ENN=Adv. Pmt. Adjustment] }
    { 16619;  ;GST Bill-to/BuyFrom State Code;Code10;
                                                   TableRelation=State;
                                                   CaptionML=[ENU=GST Bill-to/BuyFrom State Code;
                                                              ENN=GST Bill-to/BuyFrom State Code];
                                                   Editable=No }
    { 16620;  ;GST Ship-to State Code;Code10      ;TableRelation=State;
                                                   CaptionML=[ENU=GST Ship-to State Code;
                                                              ENN=GST Ship-to State Code];
                                                   Editable=No }
    { 16621;  ;Location State Code ;Code10        ;TableRelation=State;
                                                   CaptionML=[ENU=Location State Code;
                                                              ENN=Location State Code];
                                                   Editable=No }
    { 16622;  ;GST Rounding Precision;Decimal     ;CaptionML=[ENU=GST Rounding Precision;
                                                              ENN=GST Rounding Precision] }
    { 16623;  ;GST Rounding Type   ;Option        ;CaptionML=[ENU=GST Rounding Type;
                                                              ENN=GST Rounding Type];
                                                   OptionCaptionML=[ENU=Nearest,Up,Down;
                                                                    ENN=Nearest,Up,Down];
                                                   OptionString=Nearest,Up,Down }
    { 16624;  ;GST Input Service Distribution;Boolean;
                                                   CaptionML=[ENU=GST Input Service Distribution;
                                                              ENN=GST Input Service Distribution] }
    { 16625;  ;GST Reverse Charge  ;Boolean       ;CaptionML=[ENU=GST Reverse Charge;
                                                              ENN=GST Reverse Charge];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Journal Template Name,Journal Batch Name,Line No.;
                                                   SumIndexFields=Balance (LCY);
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Journal Template Name,Journal Batch Name,Posting Date,Document No.;
                                                   MaintainSQLIndex=No }
    {    ;Account Type,Account No.,Applies-to Doc. Type,Applies-to Doc. No. }
    {    ;Document No.                            ;MaintainSQLIndex=No }
    {    ;Journal Template Name,Journal Batch Name,Location Code,Document No. }
    {    ;Incoming Document Entry No.              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst '@@@="%1=Account Type,%2=Balance Account Type";ENU=%1 or %2 must be a G/L account or bank account.;ENN=%1 or %2 must be a G/L account or bank account.';
      Text001@1001 : TextConst 'ENU=You must not specify %1 when %2 is %3.;ENN=You must not specify %1 when %2 is %3.';
      Text002@1002 : TextConst 'ENU=cannot be specified without %1;ENN=cannot be specified without %1';
      Text003@1003 : TextConst 'ENU=The %1 in the %2 will be changed from %3 to %4.\Do you want to continue?;ENN=The %1 in the %2 will be changed from %3 to %4.\Do you want to continue?';
      Text005@1005 : TextConst 'ENU=The update has been interrupted to respect the warning.;ENN=The update has been interrupted to respect the warning.';
      Text006@1006 : TextConst 'ENU=The %1 option can only be used internally in the system.;ENN=The %1 option can only be used internally in the system.';
      Text007@1007 : TextConst '@@@="%1=Account Type,%2=Balance Account Type";ENU=%1 or %2 must be a bank account.;ENN=%1 or %2 must be a bank account.';
      Text008@1008 : TextConst 'ENU=" must be 0 when %1 is %2.";ENN=" must be 0 when %1 is %2."';
      Text009@1009 : TextConst 'ENU=LCY;ENN=LCY';
      Text010@1010 : TextConst 'ENU=%1 must be %2 or %3.;ENN=%1 must be %2 or %3.';
      Text011@1011 : TextConst 'ENU=%1 must be negative.;ENN=%1 must be negative.';
      Text012@1012 : TextConst 'ENU=%1 must be positive.;ENN=%1 must be positive.';
      Text013@1013 : TextConst 'ENU=The %1 must not be more than %2.;ENN=The %1 must not be more than %2.';
      Text017@1065 : TextConst 'ENU=Credit card %1 has already been performed for this %2, but posting failed. You must complete posting of the document of type %2 with the number %3.;ENN=Credit card %1 has already been performed for this %2, but posting failed. You must complete posting of the document of type %2 with the number %3.';
      GenJnlTemplate@1014 : Record 80;
      GenJnlBatch@1015 : Record 232;
      GenJnlLine@1016 : Record 81;
      GLAcc@1017 : Record 15;
      Cust@1018 : Record 18;
      Vend@1020 : Record 23;
      ICPartner@1057 : Record 413;
      Currency@1022 : Record 4;
      CurrExchRate@1023 : Record 330;
      PaymentTerms@1024 : Record 3;
      CustLedgEntry@1025 : Record 21;
      CustLedgEntry1@1500011 : Record 21;
      VendLedgEntry@1026 : Record 25;
      VendLedgEntry1@1500012 : Record 25;
      GenJnlAlloc@1027 : Record 221;
      VATPostingSetup@1028 : Record 325;
      BankAcc@1029 : Record 270;
      BankAcc2@1030 : Record 270;
      BankAcc3@1031 : Record 270;
      FA@1032 : Record 5600;
      FASetup@1033 : Record 5603;
      FADeprBook@1034 : Record 5612;
      GenBusPostingGrp@1035 : Record 250;
      GenProdPostingGrp@1036 : Record 251;
      GLSetup@1037 : Record 98;
      Job@1060 : Record 167;
      JobJnlLine@1059 : TEMPORARY Record 210;
      NoSeriesMgt@1040 : Codeunit 396;
      CustCheckCreditLimit@1041 : Codeunit 312;
      SalesTaxCalculate@1042 : Codeunit 398;
      GenJnlApply@1043 : Codeunit 225;
      GenJnlShowCTEntries@1039 : Codeunit 16;
      CustEntrySetApplID@1044 : Codeunit 101;
      VendEntrySetApplID@1045 : Codeunit 111;
      DimMgt@1046 : Codeunit 408;
      PaymentToleranceMgt@1053 : Codeunit 426;
      DeferralUtilities@1051 : Codeunit 1720;
      ApprovalsMgmt@1069 : Codeunit 1535;
      Window@1004 : Dialog;
      DeferralDocType@1050 : 'Purchase,Sales,G/L';
      FromCurrencyCode@1048 : Code[10];
      ToCurrencyCode@1049 : Code[10];
      CurrencyCode@1052 : Code[10];
      Text014@1054 : TextConst 'ENU=The %1 %2 has a %3 %4.\Do you still want to use %1 %2 in this journal line?;ENN=The %1 %2 has a %3 %4.\Do you still want to use %1 %2 in this journal line?';
      TemplateFound@1056 : Boolean;
      Text015@1058 : TextConst 'ENU=You are not allowed to apply and post an entry to an entry with an earlier posting date.\\Instead, post %1 %2 and then apply it to %3 %4.;ENN=You are not allowed to apply and post an entry to an entry with an earlier posting date.\\Instead, post %1 %2 and then apply it to %3 %4.';
      CurrencyDate@1061 : Date;
      SourceCodeSetup@1063 : Record 242;
      Text016@1062 : TextConst 'ENU=%1 must be G/L Account or Bank Account.;ENN=%1 must be G/L Account or Bank Account.';
      HideValidationDialog@1064 : Boolean;
      Text018@1066 : TextConst 'ENU=%1 can only be set when %2 is set.;ENN=%1 can only be set when %2 is set.';
      Text019@1067 : TextConst 'ENU=%1 cannot be changed when %2 is set.;ENN=%1 cannot be changed when %2 is set.';
      GLSetupRead@1019 : Boolean;
      TDSBuf@1280001 : ARRAY [2] OF TEMPORARY Record 13714;
      TDSSetup@1280002 : Record 13728;
      NODHeader@1280009 : Record 13786;
      NODLines@1280003 : Record 13785;
      TDSNOD@1280006 : Record 13726;
      ExciseValidation@1280005 : Codeunit 13702;
      TDSBaseLCY@1280000 : Decimal;
      Text13701@1280007 : TextConst 'ENU=You are not allowed to select this Nature of Deduction.;ENN=You are not allowed to select this Nature of Deduction.';
      TDSAmt@1280008 : Decimal;
      Text13704@1280013 : TextConst 'ENU=Amount cannot be changed.;ENN=Amount cannot be changed.';
      Text16350@1280010 : TextConst 'ENU=You cannot claim more than the VAT Payable Amount.;ENN=You cannot claim more than the VAT Payable Amount.';
      Text16351@1280014 : TextConst 'ENU=Bal. Account Type must be G/L Account or Bank Account.;ENN=Bal. Account Type must be G/L Account or Bank Account.';
      Text16352@1280011 : TextConst 'ENU=%1 Type must be G/L Account.;ENN=%1 Type must be G/L Account.';
      Text16353@1280012 : TextConst 'ENU=Balance Account No. must not be specified for VAT Refund.;ENN=Balance Account No. must not be specified for VAT Refund.';
      Text16500@1500035 : TextConst 'ENU=%1 cannot be entered for %2 %3.;ENN=%1 cannot be entered for %2 %3.';
      Text16501@1500034 : TextConst 'ENU=You are not allowed to select this Nature of Collection.;ENN=You are not allowed to select this Nature of Collection.';
      NOCLine@1500040 : Record 13785;
      TCSNOC@1500039 : Record 16507;
      TCSBaseLCY@1500038 : Decimal;
      TCSBuffer@1500037 : ARRAY [2] OF TEMPORARY Record 16509;
      TCSSetup@1500036 : Record 16508;
      ExCenvatClaimDetail@1500045 : Record 16561;
      ExciseCenvatClaim@1500053 : Record 16584;
      FieldNum@1500046 : Integer;
      TDSEntry@1500054 : Record 13729;
      PreviousJnlTDSCalculated@1500064 : Decimal;
      TDSParty@1500065 : Record 13730;
      Text16509@1500056 : TextConst 'ENU=PoT rules are not applicable for Input Service Distributor, Please ensure PoT value is False.;ENN=PoT rules are not applicable for Input Service Distributor, Please ensure PoT value is False.';
      Text16510@1500000 : TextConst 'ENU=You can set %1 to Yes only if %2 is a payment or a refund.;ENN=You can set %1 to Yes only if %2 is a payment or a refund.';
      Text16508@1500063 : TextConst 'ENU=You are not allowed to select this Nature of Remittance.;ENN=You are not allowed to select this Nature of Remittance.';
      ExportAgainQst@1038 : TextConst 'ENU=One or more of the selected lines have already been exported. Do you want to export them again?;ENN=One or more of the selected lines have already been exported. Do you want to export them again?';
      NothingToExportErr@1021 : TextConst 'ENU=There is nothing to export.;ENN=There is nothing to export.';
      NotExistErr@1068 : TextConst 'ENU=Document No. %1 does not exist or is already closed.;ENN=Document No. %1 does not exist or is already closed.';
      DocNoFilterErr@1047 : TextConst 'ENU=The document numbers cannot be renumbered while there is an active filter on the Document No. field.;ENN=The document numbers cannot be renumbered while there is an active filter on the Document No. field.';
      DueDateMsg@1150 : TextConst 'ENU=This posting date will cause an overdue payment.;ENN=This posting date will cause an overdue payment.';
      CalcPostDateMsg@1169 : TextConst 'ENU=Processing payment journal lines #1##########;ENN=Processing payment journal lines #1##########';
      BlankShiptoCodeErr@1500002 : TextConst 'ENU=You must select Ship-to Code as ''GST Place of Supply'' is "Ship-to Address" on GST Group.;ENN=You must select Ship-to Code as ''GST Place of Supply'' is "Ship-to Address" on GST Group.';
      SimilarLocCodeErr@1500003 : TextConst 'ENU="You must select same Location Code value for a particular Document No. ";ENN="You must select same Location Code value for a particular Document No. "';
      CompanyInformation@1500004 : Record 79;
      CheckGSTDependencyErr@1500005 : TextConst 'ENU=You must select GST Dependency type either Ship-to Address or Bill-to Address in Sales & Receivable Setup.;ENN=You must select GST Dependency type either Ship-to Address or Bill-to Address in Sales & Receivable Setup.';
      Location@1500006 : Record 14;
      GSTPostingSetup@1500008 : Record 16406;
      CheckGLAccErr@1500007 : TextConst '@@@="%1=Tax Type";ENU=You cannot change the account no. as Tax Type is %1.;ENN=You cannot change the account no. as Tax Type is %1.';
      CannotApplyCustErr@1500009 : TextConst '@@@=You cannot unapply Cust. Ledger Entry No. %1;ENU=You cannot apply Cust. Ledger Entry No. %1 because the entry is part of a advance adjustment .;ENN=You cannot apply Cust. Ledger Entry No. %1 because the entry is part of a advance adjustment .';
      CannotApplyVendErr@1500010 : TextConst '@@@=You cannot unapply Vendor Ledger Entry No. %1;ENU=You cannot unapply Vendor Ledger Entry No. %1 because the entry is part of advance adjustment.;ENN=You cannot unapply Vendor Ledger Entry No. %1 because the entry is part of advance adjustment.';
      PlaceOfSupplyErr@1500001 : TextConst '@@@="%1 = Template, %2 = Batch, %3 = Line No.";ENU=You cannot select Blank Place of Supply for Template %1 and Batch %2 for Line %3.;ENN=You cannot select Blank Place of Supply for Template %1 and Batch %2 for Line %3.';
      GSTRelevantInfoErr@1500013 : TextConst 'ENU=You cannot change any GST Relevant Information of Refund Doument after Payment Application.;ENN=You cannot change any GST Relevant Information of Refund Doument after Payment Application.';
      OpenedOnLookup@1500014 : Boolean;
      GSTGroupReverseChargeErr@1500015 : TextConst '@@@="%1 = GST Group Code";ENU=GST Group Code %1 with Reverse Charge cannot be selected for Customer.;ENN=GST Group Code %1 with Reverse Charge cannot be selected for Customer.';
      RefundUnapplicationErr@1500400 : TextConst '@@@="%1 = Code,%2 = Code,%3 = Code";ENU=You cannot apply Document No.%1 again as it has been previously applied against Refund %2 which was unapplied. Please reverse the Refund Document No.%3 first before proceeding further.;ENN=You cannot apply Document No.%1 again as it has been previously applied against Refund %2 which was unapplied. Please reverse the Refund Document No.%3 first before proceeding further.';

    PROCEDURE EmptyLine@5() : Boolean;
    BEGIN
      EXIT(
        ("Account No." = '') AND (Amount = 0) AND
        (("Bal. Account No." = '') OR NOT "System-Created Entry"));
    END;

    PROCEDURE UpdateLineBalance@2();
    BEGIN
      IF ((Amount > 0) AND (NOT Correction)) OR
         ((Amount < 0) AND Correction)
      THEN BEGIN
        "Debit Amount" := Amount;
        "Credit Amount" := 0
      END ELSE BEGIN
        "Debit Amount" := 0;
        "Credit Amount" := -Amount;
      END;
      IF "Currency Code" = '' THEN
        "Amount (LCY)" := Amount;
      CASE TRUE OF
        ("Account No." <> '') AND ("Bal. Account No." <> ''):
          "Balance (LCY)" := 0;
        "Bal. Account No." <> '':
          "Balance (LCY)" := -"Amount (LCY)";
        ELSE
          "Balance (LCY)" := "Amount (LCY)";
      END;

      CLEAR(GenJnlAlloc);
      GenJnlAlloc.UpdateAllocations(Rec);

      UpdateSalesPurchLCY;

      IF ("Deferral Code" <> '') AND (Amount <> xRec.Amount) AND ((Amount <> 0) AND (xRec.Amount <> 0)) THEN
        VALIDATE("Deferral Code");
    END;

    PROCEDURE SetUpNewLine@9(LastGenJnlLine@1000 : Record 81;Balance@1001 : Decimal;BottomLine@1002 : Boolean);
    BEGIN
      GenJnlTemplate.GET("Journal Template Name");
      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      IF GenJnlLine.FINDFIRST THEN BEGIN
        "Posting Date" := LastGenJnlLine."Posting Date";
        "Document Date" := LastGenJnlLine."Posting Date";
        "Document No." := LastGenJnlLine."Document No.";
        IF BottomLine AND
           (Balance - LastGenJnlLine."Balance (LCY)" = 0) AND
           NOT LastGenJnlLine.EmptyLine
        THEN
          IncrementDocumentNo;
      END ELSE BEGIN
        "Posting Date" := WORKDATE;
        "Document Date" := WORKDATE;
        IF GenJnlBatch."No. Series" <> '' THEN BEGIN
          CLEAR(NoSeriesMgt);
          "Document No." := NoSeriesMgt.TryGetNextNo(GenJnlBatch."No. Series","Posting Date");
        END;
      END;
      IF GenJnlTemplate.Recurring THEN
        "Recurring Method" := LastGenJnlLine."Recurring Method";
      "Account Type" := LastGenJnlLine."Account Type";
      "Document Type" := LastGenJnlLine."Document Type";
      "Source Code" := GenJnlTemplate."Source Code";
      "Reason Code" := GenJnlBatch."Reason Code";
      "Posting No. Series" := GenJnlBatch."Posting No. Series";
      "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
      "Location Code" := GenJnlBatch."Location Code";
      IF Location.GET("Location Code") THEN BEGIN
        "Location State Code" := Location."State Code";
        "GST Input Service Distribution" := Location."GST Input Service Distributor";
      END;
      IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset"]) AND
         ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset"])
      THEN
        "Account Type" := "Account Type"::"G/L Account";
      VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
      Description := '';
    END;

    PROCEDURE CheckDocNoOnLines@78();
    VAR
      GenJnlBatch@1002 : Record 232;
      GenJnlLine@1001 : Record 81;
      LastDocNo@1003 : Code[20];
    BEGIN
      GenJnlLine.COPYFILTERS(Rec);

      IF NOT GenJnlLine.FINDSET THEN
        EXIT;
      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      IF GenJnlBatch."No. Series" = '' THEN
        EXIT;

      CLEAR(NoSeriesMgt);
      REPEAT
        GenJnlLine.CheckDocNoBasedOnNoSeries(LastDocNo,GenJnlBatch."No. Series",NoSeriesMgt);
        LastDocNo := GenJnlLine."Document No.";
      UNTIL GenJnlLine.NEXT = 0;
    END;

    PROCEDURE CheckDocNoBasedOnNoSeries@74(LastDocNo@1002 : Code[20];NoSeriesCode@1000 : Code[10];VAR NoSeriesMgtInstance@1001 : Codeunit 396);
    BEGIN
      IF NoSeriesCode = '' THEN
        EXIT;

      IF (LastDocNo = '') OR ("Document No." <> LastDocNo) THEN
        TESTFIELD("Document No.",NoSeriesMgtInstance.GetNextNo(NoSeriesCode,"Posting Date",FALSE));
    END;

    PROCEDURE RenumberDocumentNo@68();
    VAR
      GenJnlLine2@1006 : Record 81;
      DocNo@1003 : Code[20];
      FirstDocNo@1008 : Code[20];
      FirstTempDocNo@1009 : Code[20];
      LastTempDocNo@1010 : Code[20];
    BEGIN
      TESTFIELD("Check Printed",FALSE);

      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      IF GenJnlBatch."No. Series" = '' THEN
        EXIT;
      IF GETFILTER("Document No.") <> '' THEN
        ERROR(DocNoFilterErr);
      CLEAR(NoSeriesMgt);
      FirstDocNo := NoSeriesMgt.TryGetNextNo(GenJnlBatch."No. Series","Posting Date");
      FirstTempDocNo := 'RENUMBERED-000000001';
      // step1 - renumber to non-existing document number
      DocNo := FirstTempDocNo;
      GenJnlLine2 := Rec;
      GenJnlLine2.RESET;
      RenumberDocNoOnLines(DocNo,GenJnlLine2);
      LastTempDocNo := DocNo;

      // step2 - renumber to real document number (within Filter)
      DocNo := FirstDocNo;
      GenJnlLine2.COPYFILTERS(Rec);
      GenJnlLine2 := Rec;
      RenumberDocNoOnLines(DocNo,GenJnlLine2);

      // step3 - renumber to real document number (outside filter)
      DocNo := INCSTR(DocNo);
      GenJnlLine2.RESET;
      GenJnlLine2.SETRANGE("Document No.",FirstTempDocNo,LastTempDocNo);
      RenumberDocNoOnLines(DocNo,GenJnlLine2);

      GET("Journal Template Name","Journal Batch Name","Line No.");
    END;

    LOCAL PROCEDURE RenumberDocNoOnLines@69(VAR DocNo@1000 : Code[20];VAR GenJnlLine2@1001 : Record 81);
    VAR
      LastGenJnlLine@1002 : Record 81;
      GenJnlLine3@1005 : Record 81;
      PrevDocNo@1004 : Code[20];
      FirstDocNo@1006 : Code[20];
      First@1003 : Boolean;
    BEGIN
      FirstDocNo := DocNo;
      WITH GenJnlLine2 DO BEGIN
        SETCURRENTKEY("Journal Template Name","Journal Batch Name","Document No.");
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        LastGenJnlLine.INIT;
        First := TRUE;
        IF FINDSET THEN BEGIN
          REPEAT
            IF "Document No." = FirstDocNo THEN
              EXIT;
            IF NOT First AND (("Document No." <> PrevDocNo) OR ("Bal. Account No." <> '')) AND NOT LastGenJnlLine.EmptyLine THEN
              DocNo := INCSTR(DocNo);
            PrevDocNo := "Document No.";
            IF "Document No." <> '' THEN BEGIN
              IF "Applies-to ID" = "Document No." THEN
                RenumberAppliesToID(GenJnlLine2,"Document No.",DocNo);
              RenumberAppliesToDocNo(GenJnlLine2,"Document No.",DocNo);
            END;
            GenJnlLine3.GET("Journal Template Name","Journal Batch Name","Line No.");
            GenJnlLine3."Document No." := DocNo;
            GenJnlLine3.MODIFY;
            First := FALSE;
            LastGenJnlLine := GenJnlLine2
          UNTIL NEXT = 0
        END
      END
    END;

    LOCAL PROCEDURE RenumberAppliesToID@70(GenJnlLine2@1002 : Record 81;OriginalAppliesToID@1000 : Code[50];NewAppliesToID@1001 : Code[50]);
    VAR
      CustLedgEntry@1003 : Record 21;
      CustLedgEntry2@1009 : Record 21;
      VendLedgEntry@1004 : Record 25;
      VendLedgEntry2@1010 : Record 25;
      AccType@1005 : Option;
      AccNo@1006 : Code[20];
    BEGIN
      GetAccTypeAndNo(GenJnlLine2,AccType,AccNo);
      CASE AccType OF
        "Account Type"::Customer:
          BEGIN
            CustLedgEntry.SETRANGE("Customer No.",AccNo);
            CustLedgEntry.SETRANGE("Applies-to ID",OriginalAppliesToID);
            IF CustLedgEntry.FINDSET THEN
              REPEAT
                CustLedgEntry2.GET(CustLedgEntry."Entry No.");
                CustLedgEntry2."Applies-to ID" := NewAppliesToID;
                CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry2);
              UNTIL CustLedgEntry.NEXT = 0;
          END;
        "Account Type"::Vendor:
          BEGIN
            VendLedgEntry.SETRANGE("Vendor No.",AccNo);
            VendLedgEntry.SETRANGE("Applies-to ID",OriginalAppliesToID);
            IF VendLedgEntry.FINDSET THEN
              REPEAT
                VendLedgEntry2.GET(VendLedgEntry."Entry No.");
                VendLedgEntry2."Applies-to ID" := NewAppliesToID;
                CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry2);
              UNTIL VendLedgEntry.NEXT = 0;
          END;
        ELSE
          EXIT
      END;
      GenJnlLine2."Applies-to ID" := NewAppliesToID;
      GenJnlLine2.MODIFY;
    END;

    LOCAL PROCEDURE RenumberAppliesToDocNo@71(GenJnlLine2@1002 : Record 81;OriginalAppliesToDocNo@1001 : Code[20];NewAppliesToDocNo@1000 : Code[20]);
    BEGIN
      GenJnlLine2.RESET;
      GenJnlLine2.SETRANGE("Journal Template Name",GenJnlLine2."Journal Template Name");
      GenJnlLine2.SETRANGE("Journal Batch Name",GenJnlLine2."Journal Batch Name");
      GenJnlLine2.SETRANGE("Applies-to Doc. Type",GenJnlLine2."Document Type");
      GenJnlLine2.SETRANGE("Applies-to Doc. No.",OriginalAppliesToDocNo);
      GenJnlLine2.MODIFYALL("Applies-to Doc. No.",NewAppliesToDocNo);
    END;

    LOCAL PROCEDURE CheckVATInAlloc@1();
    BEGIN
      IF "Gen. Posting Type" <> 0 THEN BEGIN
        GenJnlAlloc.RESET;
        GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
        GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
        GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
        IF GenJnlAlloc.FIND('-') THEN
          REPEAT
            GenJnlAlloc.CheckVAT(Rec);
          UNTIL GenJnlAlloc.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SetCurrencyCode@4(AccType2@1000 : 'G/L Account,Customer,Vendor,Bank Account';AccNo2@1001 : Code[20]) : Boolean;
    BEGIN
      "Currency Code" := '';
      IF AccNo2 <> '' THEN
        IF AccType2 = AccType2::"Bank Account" THEN
          IF BankAcc2.GET(AccNo2) THEN
            "Currency Code" := BankAcc2."Currency Code";
      EXIT("Currency Code" <> '');
    END;

    LOCAL PROCEDURE GetCurrency@3();
    BEGIN
      IF "Additional-Currency Posting" =
         "Additional-Currency Posting"::"Additional-Currency Amount Only"
      THEN BEGIN
        IF GLSetup."Additional Reporting Currency" = '' THEN
          ReadGLSetup;
        CurrencyCode := GLSetup."Additional Reporting Currency";
      END ELSE
        CurrencyCode := "Currency Code";

      IF CurrencyCode = '' THEN BEGIN
        CLEAR(Currency);
        Currency.InitRoundingPrecision
      END ELSE
        IF CurrencyCode <> Currency.Code THEN BEGIN
          Currency.GET(CurrencyCode);
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    PROCEDURE UpdateSource@6();
    VAR
      SourceExists1@1000 : Boolean;
      SourceExists2@1001 : Boolean;
    BEGIN
      SourceExists1 := ("Account Type" <> "Account Type"::"G/L Account") AND ("Account No." <> '');
      SourceExists2 := ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '');
      CASE TRUE OF
        SourceExists1 AND NOT SourceExists2:
          BEGIN
            "Source Type" := "Account Type";
            "Source No." := "Account No.";
          END;
        SourceExists2 AND NOT SourceExists1:
          BEGIN
            "Source Type" := "Bal. Account Type";
            "Source No." := "Bal. Account No.";
          END;
        ELSE BEGIN
          "Source Type" := "Source Type"::" ";
          "Source No." := '';
        END;
      END;
    END;

    LOCAL PROCEDURE CheckGLAcc@7();
    BEGIN
      GLAcc.CheckGLAcc;
      IF GLAcc."Direct Posting" OR ("Journal Template Name" = '') OR "System-Created Entry" THEN
        EXIT;
      IF "Posting Date" <> 0D THEN
        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
          EXIT;
      GLAcc.TESTFIELD("Direct Posting",TRUE);
    END;

    PROCEDURE GetFAAddCurrExchRate@8();
    VAR
      DeprBook@1000 : Record 5611;
      FANo@1001 : Code[20];
      UseFAAddCurrExchRate@1002 : Boolean;
    BEGIN
      "FA Add.-Currency Factor" := 0;
      IF ("FA Posting Type" <> "FA Posting Type"::" ") AND
         ("Depreciation Book Code" <> '')
      THEN BEGIN
        IF "Account Type" = "Account Type"::"Fixed Asset" THEN
          FANo := "Account No.";
        IF "Bal. Account Type" = "Bal. Account Type"::"Fixed Asset" THEN
          FANo := "Bal. Account No.";
        IF FANo <> '' THEN BEGIN
          DeprBook.GET("Depreciation Book Code");
          CASE "FA Posting Type" OF
            "FA Posting Type"::"Acquisition Cost":
              UseFAAddCurrExchRate := DeprBook."Add-Curr Exch Rate - Acq. Cost";
            "FA Posting Type"::Depreciation:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Depr.";
            "FA Posting Type"::"Write-Down":
              UseFAAddCurrExchRate := DeprBook."Add-Curr Exch Rate -Write-Down";
            "FA Posting Type"::Appreciation:
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch. Rate - Apprec.";
            "FA Posting Type"::"Custom 1":
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch Rate - Custom 1";
            "FA Posting Type"::"Custom 2":
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch Rate - Custom 2";
            "FA Posting Type"::Disposal:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Disp.";
            "FA Posting Type"::Maintenance:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Maint.";
          END;
          IF UseFAAddCurrExchRate THEN BEGIN
            FADeprBook.GET(FANo,"Depreciation Book Code");
            FADeprBook.TESTFIELD("FA Add.-Currency Factor");
            "FA Add.-Currency Factor" := FADeprBook."FA Add.-Currency Factor";
          END;
        END;
      END;
    END;

    PROCEDURE GetShowCurrencyCode@10(CurrencyCode@1000 : Code[10]) : Code[10];
    BEGIN
      IF CurrencyCode <> '' THEN
        EXIT(CurrencyCode);

      EXIT(Text009);
    END;

    PROCEDURE ClearCustVendApplnEntry@11();
    VAR
      TempCustLedgEntry@1000 : Record 21;
      TempVendLedgEntry@1001 : Record 25;
      CustEntryEdit@1002 : Codeunit 103;
      VendEntryEdit@1003 : Codeunit 113;
      AccType@1004 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      AccNo@1005 : Code[20];
    BEGIN
      GetAccTypeAndNo(Rec,AccType,AccNo);
      CASE AccType OF
        AccType::Customer:
          IF xRec."Applies-to ID" <> '' THEN BEGIN
            IF FindFirstCustLedgEntryWithAppliesToID(AccNo,xRec."Applies-to ID","HSN/SAC Code") THEN BEGIN
              ClearCustApplnEntryFields;
              CustEntrySetApplID.SetApplId(CustLedgEntry,TempCustLedgEntry,'');
            END
          END ELSE
            IF xRec."Applies-to Doc. No." <> '' THEN
              IF FindFirstCustLedgEntryWithAppliesToDocNo(AccNo,xRec."Applies-to Doc. No.","HSN/SAC Code") THEN BEGIN
                ClearCustApplnEntryFields;
                CustEntryEdit.RUN(CustLedgEntry);
              END;
        AccType::Vendor:
          IF xRec."Applies-to ID" <> '' THEN BEGIN
            IF FindFirstVendLedgEntryWithAppliesToID(AccNo,xRec."Applies-to ID","HSN/SAC Code") THEN BEGIN
              ClearVendApplnEntryFields;
              VendEntrySetApplID.SetApplId(VendLedgEntry,TempVendLedgEntry,'');
            END
          END ELSE
            IF xRec."Applies-to Doc. No." <> '' THEN
              IF FindFirstVendLedgEntryWithAppliesToDocNo(AccNo,xRec."Applies-to Doc. No.","HSN/SAC Code") THEN BEGIN
                ClearVendApplnEntryFields;
                VendEntryEdit.RUN(VendLedgEntry);
              END;
      END;
    END;

    LOCAL PROCEDURE ClearCustApplnEntryFields@56();
    BEGIN
      CustLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
      CustLedgEntry."Accepted Payment Tolerance" := 0;
      CustLedgEntry."Amount to Apply" := 0;
    END;

    LOCAL PROCEDURE ClearVendApplnEntryFields@57();
    BEGIN
      VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
      VendLedgEntry."Accepted Payment Tolerance" := 0;
      VendLedgEntry."Amount to Apply" := 0;
    END;

    PROCEDURE CheckFixedCurrency@12() : Boolean;
    VAR
      CurrExchRate@1000 : Record 330;
    BEGIN
      CurrExchRate.SETRANGE("Currency Code","Currency Code");
      CurrExchRate.SETRANGE("Starting Date",0D,"Posting Date");

      IF NOT CurrExchRate.FINDLAST THEN
        EXIT(FALSE);

      IF CurrExchRate."Relational Currency Code" = '' THEN
        EXIT(
          CurrExchRate."Fix Exchange Rate Amount" =
          CurrExchRate."Fix Exchange Rate Amount"::Both);

      IF CurrExchRate."Fix Exchange Rate Amount" <>
         CurrExchRate."Fix Exchange Rate Amount"::Both
      THEN
        EXIT(FALSE);

      CurrExchRate.SETRANGE("Currency Code",CurrExchRate."Relational Currency Code");
      IF CurrExchRate.FINDLAST THEN
        EXIT(
          CurrExchRate."Fix Exchange Rate Amount" =
          CurrExchRate."Fix Exchange Rate Amount"::Both);

      EXIT(FALSE);
    END;

    PROCEDURE CreateDim@13(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1008 : Integer;No5@1009 : Code[20]);
    VAR
      TableID@1010 : ARRAY [10] OF Integer;
      No@1011 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    END;

    PROCEDURE ValidateShortcutDimCode@14(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      TESTFIELD("Check Printed",FALSE);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@18(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      TESTFIELD("Check Printed",FALSE);
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE ShowShortcutDimCode@15(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    PROCEDURE ShowDimensions@26();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Journal Template Name","Journal Batch Name","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE GetFAVATSetup@17();
    VAR
      LocalGlAcc@1000 : Record 15;
      FAPostingGr@1001 : Record 5606;
      FABalAcc@1002 : Boolean;
    BEGIN
      IF CurrFieldNo = 0 THEN
        EXIT;
      IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
         ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
      THEN
        EXIT;
      FABalAcc := ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset");
      IF NOT FABalAcc THEN BEGIN
        ClearPostingGroups;
        "Tax Group Code" := '';
        VALIDATE("VAT Prod. Posting Group");
      END;
      IF FABalAcc THEN BEGIN
        ClearBalancePostingGroups;
        "Bal. Tax Group Code" := '';
        VALIDATE("Bal. VAT Prod. Posting Group");
      END;
      IF NOT GenJnlBatch.GET("Journal Template Name","Journal Batch Name") OR
         GenJnlBatch."Copy VAT Setup to Jnl. Lines"
      THEN
        IF (("FA Posting Type" = "FA Posting Type"::"Acquisition Cost") OR
            ("FA Posting Type" = "FA Posting Type"::Disposal) OR
            ("FA Posting Type" = "FA Posting Type"::Maintenance)) AND
           ("Posting Group" <> '')
        THEN
          IF FAPostingGr.GET("Posting Group") THEN BEGIN
            IF "FA Posting Type" = "FA Posting Type"::"Acquisition Cost" THEN BEGIN
              FAPostingGr.TESTFIELD("Acquisition Cost Account");
              LocalGlAcc.GET(FAPostingGr."Acquisition Cost Account");
            END;
            IF "FA Posting Type" = "FA Posting Type"::Disposal THEN BEGIN
              FAPostingGr.TESTFIELD("Acq. Cost Acc. on Disposal");
              LocalGlAcc.GET(FAPostingGr."Acq. Cost Acc. on Disposal");
            END;
            IF "FA Posting Type" = "FA Posting Type"::Maintenance THEN BEGIN
              FAPostingGr.TESTFIELD("Maintenance Expense Account");
              LocalGlAcc.GET(FAPostingGr."Maintenance Expense Account");
            END;
            LocalGlAcc.CheckGLAcc;
            IF NOT FABalAcc THEN BEGIN
              "Gen. Posting Type" := LocalGlAcc."Gen. Posting Type";
              "Gen. Bus. Posting Group" := LocalGlAcc."Gen. Bus. Posting Group";
              "Gen. Prod. Posting Group" := LocalGlAcc."Gen. Prod. Posting Group";
              "VAT Bus. Posting Group" := LocalGlAcc."VAT Bus. Posting Group";
              "VAT Prod. Posting Group" := LocalGlAcc."VAT Prod. Posting Group";
              "Tax Group Code" := LocalGlAcc."Tax Group Code";
              VALIDATE("VAT Prod. Posting Group");
            END ELSE BEGIN;
              "Bal. Gen. Posting Type" := LocalGlAcc."Gen. Posting Type";
              "Bal. Gen. Bus. Posting Group" := LocalGlAcc."Gen. Bus. Posting Group";
              "Bal. Gen. Prod. Posting Group" := LocalGlAcc."Gen. Prod. Posting Group";
              "Bal. VAT Bus. Posting Group" := LocalGlAcc."VAT Bus. Posting Group";
              "Bal. VAT Prod. Posting Group" := LocalGlAcc."VAT Prod. Posting Group";
              "Bal. Tax Group Code" := LocalGlAcc."Tax Group Code";
              VALIDATE("Bal. VAT Prod. Posting Group");
            END;
          END;
    END;

    PROCEDURE GetTemplate@16();
    BEGIN
      IF NOT TemplateFound THEN
        GenJnlTemplate.GET("Journal Template Name");
      TemplateFound := TRUE;
    END;

    LOCAL PROCEDURE UpdateSalesPurchLCY@19();
    BEGIN
      "Sales/Purch. (LCY)" := 0;
      IF (NOT "System-Created Entry") AND ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN BEGIN
        IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) AND ("Bal. Account No." <> '') THEN
          "Sales/Purch. (LCY)" := "Amount (LCY)" + "Bal. VAT Amount (LCY)";
        IF ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]) AND ("Account No." <> '') THEN
          "Sales/Purch. (LCY)" := -("Amount (LCY)" - "VAT Amount (LCY)");
      END;
    END;

    PROCEDURE LookUpAppliesToDocCust@35(AccNo@1000 : Code[20]);
    VAR
      ApplyCustEntries@1002 : Page 232;
      ServTaxEntry@1500000 : Record 16473;
    BEGIN
      CLEAR(CustLedgEntry);
      CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
      IF AccNo <> '' THEN
        CustLedgEntry.SETRANGE("Customer No.",AccNo);
      IF "TDS Nature of Deduction" <> '' THEN
        CustLedgEntry.SETRANGE("TDS Nature of Deduction","TDS Nature of Deduction");
      IF "TDS Group" <> "TDS Group"::" " THEN
        CustLedgEntry.SETRANGE("TDS Group","TDS Group");
      CustLedgEntry.SETRANGE(Open,TRUE);
      IF "Applies-to Doc. No." <> '' THEN BEGIN
        CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF CustLedgEntry.ISEMPTY THEN BEGIN
          CustLedgEntry.SETRANGE("Document Type");
          CustLedgEntry.SETRANGE("Document No.");
        END;
      END;
      IF "Applies-to ID" <> '' THEN BEGIN
        CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
        IF CustLedgEntry.ISEMPTY THEN
          CustLedgEntry.SETRANGE("Applies-to ID");
      END;
      IF "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " THEN BEGIN
        CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        IF CustLedgEntry.ISEMPTY THEN
          CustLedgEntry.SETRANGE("Document Type");
      END;
      IF  "Applies-to Doc. No." <> ''THEN BEGIN
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF "HSN/SAC Code" <> '' THEN
          CustLedgEntry.SETRANGE("HSN/SAC Code","HSN/SAC Code");
        IF CustLedgEntry.ISEMPTY THEN
          CustLedgEntry.SETRANGE("Document No.");
      END;
      IF Amount <> 0 THEN BEGIN
        CustLedgEntry.SETRANGE(Positive,Amount < 0);
        IF CustLedgEntry.ISEMPTY THEN
          CustLedgEntry.SETRANGE(Positive);
      END;
      ApplyCustEntries.SetGenJnlLine(Rec,GenJnlLine.FIELDNO("Applies-to Doc. No."));
      ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
      ApplyCustEntries.SETRECORD(CustLedgEntry);
      ApplyCustEntries.LOOKUPMODE(TRUE);
      IF ApplyCustEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ApplyCustEntries.GETRECORD(CustLedgEntry);
        IF AccNo = '' THEN BEGIN
          AccNo := CustLedgEntry."Customer No.";
          IF "Bal. Account Type" = "Bal. Account Type"::Customer THEN
            VALIDATE("Bal. Account No.",AccNo)
          ELSE
            VALIDATE("Account No.",AccNo);
        END;
        SetAmountWithCustLedgEntry;
        "Applies-to Doc. Type" := CustLedgEntry."Document Type";
        "Applies-to Doc. No." := CustLedgEntry."Document No.";
        "Applies-to ID" := '';
        CustLedgEntry1.COPY(CustLedgEntry);
      END;
      "Transaction No. Serv. Tax" := 0;
      IF CustLedgEntry."Serv. Tax on Advance Payment" THEN BEGIN
        "Transaction No. Serv. Tax" := CustLedgEntry."Transaction No.";
        ServTaxEntry.RESET;
        ServTaxEntry.SETRANGE("Transaction No.",CustLedgEntry."Transaction No.");
        IF ServTaxEntry.FINDFIRST THEN BEGIN
          "Service Tax Rounding Precision" := ServTaxEntry."Service Tax Rounding Precision";
          "Service Tax Rounding Type" := ServTaxEntry."Service Tax Rounding Type";
        END;
      END;

      GetCreditCard;

      VALIDATE("Applies-to Doc. No.");
    END;

    PROCEDURE LookUpAppliesToDocVend@36(AccNo@1000 : Code[20]);
    VAR
      ApplyVendEntries@1001 : Page 233;
      ServTaxEntry@1500000 : Record 16473;
    BEGIN
      CLEAR(VendLedgEntry);
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
      IF AccNo <> '' THEN
        VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF "TDS Nature of Deduction" <> '' THEN
        VendLedgEntry.SETRANGE("TDS Nature of Deduction","TDS Nature of Deduction");
      IF "TDS Group" <> "TDS Group"::" " THEN
        VendLedgEntry.SETRANGE("TDS Group","TDS Group");
      IF "Applies-to Doc. No." <> '' THEN BEGIN
        VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF VendLedgEntry.ISEMPTY THEN BEGIN
          VendLedgEntry.SETRANGE("Document Type");
          VendLedgEntry.SETRANGE("Document No.");
        END;
      END;
      IF "Applies-to ID" <> '' THEN BEGIN
        VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
        IF VendLedgEntry.ISEMPTY THEN
          VendLedgEntry.SETRANGE("Applies-to ID");
      END;
      IF "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " THEN BEGIN
        VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        IF VendLedgEntry.ISEMPTY THEN
          VendLedgEntry.SETRANGE("Document Type");
      END;
      IF  "Applies-to Doc. No." <> ''THEN BEGIN
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF "HSN/SAC Code" <> '' THEN
          VendLedgEntry.SETRANGE("HSN/SAC Code","HSN/SAC Code");
        IF VendLedgEntry.ISEMPTY THEN
          VendLedgEntry.SETRANGE("Document No.");
      END;
      IF Amount <> 0 THEN BEGIN
        VendLedgEntry.SETRANGE(Positive,Amount < 0);
        IF VendLedgEntry.ISEMPTY THEN;
        VendLedgEntry.SETRANGE(Positive);
      END;
      ApplyVendEntries.SetGenJnlLine(Rec,GenJnlLine.FIELDNO("Applies-to Doc. No."));
      ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
      ApplyVendEntries.SETRECORD(VendLedgEntry);
      ApplyVendEntries.LOOKUPMODE(TRUE);
      IF ApplyVendEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
        ApplyVendEntries.GETRECORD(VendLedgEntry);
        IF AccNo = '' THEN BEGIN
          AccNo := VendLedgEntry."Vendor No.";
          IF "Bal. Account Type" = "Bal. Account Type"::Vendor THEN
            VALIDATE("Bal. Account No.",AccNo)
          ELSE
            VALIDATE("Account No.",AccNo);
        END;
        SetAmountWithVendLedgEntry;
        "Applies-to Doc. Type" := VendLedgEntry."Document Type";
        "Applies-to Doc. No." := VendLedgEntry."Document No.";
        "Applies-to ID" := '';
        VendLedgEntry1.COPY(VendLedgEntry);
      END;
      "Transaction No. Serv. Tax" := 0;
      IF VendLedgEntry."Serv. Tax on Advance Payment" THEN BEGIN
        "Transaction No. Serv. Tax" := VendLedgEntry."Transaction No.";
        ServTaxEntry.RESET;
        ServTaxEntry.SETRANGE("Transaction No.",VendLedgEntry."Transaction No.");
        IF ServTaxEntry.FINDFIRST THEN BEGIN
          "Service Tax Rounding Precision" := ServTaxEntry."Service Tax Rounding Precision";
          "Service Tax Rounding Type" := ServTaxEntry."Service Tax Rounding Type";
        END;
      END;

      VALIDATE("Applies-to Doc. No.");
    END;

    PROCEDURE SetApplyToAmount@20();
    BEGIN
      IF "Account Type" = "Account Type"::Customer THEN BEGIN
        CustLedgEntry.SETCURRENTKEY("Document No.");
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        CustLedgEntry.SETRANGE("Customer No.","Account No.");
        CustLedgEntry.SETRANGE(Open,TRUE);
        IF "HSN/SAC Code" <> '' THEN
        CustLedgEntry.SETRANGE("HSN/SAC Code","HSN/SAC Code");
        IF CustLedgEntry.FIND('-') THEN
          IF CustLedgEntry."Amount to Apply" = 0 THEN BEGIN
            CustLedgEntry.CALCFIELDS("Remaining Amount");
            CustLedgEntry."Amount to Apply" := CustLedgEntry."Remaining Amount";
            CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
          END;
      END ELSE
        IF "Account Type" = "Account Type"::Vendor THEN BEGIN
          VendLedgEntry.SETCURRENTKEY("Document No.");
          VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
          VendLedgEntry.SETRANGE("Vendor No.","Account No.");
          VendLedgEntry.SETRANGE(Open,TRUE);
          IF "HSN/SAC Code" <> '' THEN
          VendLedgEntry.SETRANGE("HSN/SAC Code","HSN/SAC Code");
          IF VendLedgEntry.FIND('-') THEN
            IF VendLedgEntry."Amount to Apply" = 0 THEN  BEGIN
              VendLedgEntry.CALCFIELDS("Remaining Amount");
              VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
              CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
            END;
        END;
    END;

    PROCEDURE ValidateApplyRequirements@21(TempGenJnlLine@1000 : TEMPORARY Record 81);
    VAR
      ExchAccGLJnlLine@1001 : Codeunit 366;
    BEGIN
      IF (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Customer) OR
         (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Vendor)
      THEN
        ExchAccGLJnlLine.RUN(TempGenJnlLine);

      IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Customer THEN BEGIN
        IF TempGenJnlLine."Applies-to ID" <> '' THEN BEGIN
          CustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open);
          CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
          CustLedgEntry.SETRANGE("Applies-to ID",TempGenJnlLine."Applies-to ID");
          CustLedgEntry.SETRANGE(Open,TRUE);
          IF CustLedgEntry.FIND('-') THEN
            REPEAT
              IF TempGenJnlLine."Posting Date" < CustLedgEntry."Posting Date" THEN
                ERROR(
                  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                  CustLedgEntry."Document Type",CustLedgEntry."Document No.");
            UNTIL CustLedgEntry.NEXT = 0;
        END ELSE
          IF TempGenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
            CustLedgEntry.SETCURRENTKEY("Document No.");
            CustLedgEntry.SETRANGE("Document No.",TempGenJnlLine."Applies-to Doc. No.");
            IF TempGenJnlLine."Applies-to Doc. Type" <> TempGenJnlLine."Applies-to Doc. Type"::" " THEN
              CustLedgEntry.SETRANGE("Document Type",TempGenJnlLine."Applies-to Doc. Type");
            CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
            CustLedgEntry.SETRANGE(Open,TRUE);
            IF CustLedgEntry.FIND('-') THEN
              IF TempGenJnlLine."Posting Date" < CustLedgEntry."Posting Date" THEN
                ERROR(
                  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                  CustLedgEntry."Document Type",CustLedgEntry."Document No.");
          END;
      END ELSE
        IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Vendor THEN
          IF TempGenJnlLine."Applies-to ID" <> '' THEN BEGIN
            VendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open);
            VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
            VendLedgEntry.SETRANGE("Applies-to ID",TempGenJnlLine."Applies-to ID");
            VendLedgEntry.SETRANGE(Open,TRUE);
            REPEAT
              IF TempGenJnlLine."Posting Date" < VendLedgEntry."Posting Date" THEN
                ERROR(
                  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                  VendLedgEntry."Document Type",VendLedgEntry."Document No.");
            UNTIL VendLedgEntry.NEXT = 0;
            IF VendLedgEntry.FIND('-') THEN
              ;
          END ELSE
            IF TempGenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
              VendLedgEntry.SETCURRENTKEY("Document No.");
              VendLedgEntry.SETRANGE("Document No.",TempGenJnlLine."Applies-to Doc. No.");
              IF TempGenJnlLine."Applies-to Doc. Type" <> TempGenJnlLine."Applies-to Doc. Type"::" " THEN
                VendLedgEntry.SETRANGE("Document Type",TempGenJnlLine."Applies-to Doc. Type");
              VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
              VendLedgEntry.SETRANGE(Open,TRUE);
              IF VendLedgEntry.FIND('-') THEN
                IF TempGenJnlLine."Posting Date" < VendLedgEntry."Posting Date" THEN
                  ERROR(
                    Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                    VendLedgEntry."Document Type",VendLedgEntry."Document No.");
            END;
    END;

    LOCAL PROCEDURE UpdateCountryCodeAndVATRegNo@25(No@1000 : Code[20]);
    BEGIN
      IF No = '' THEN BEGIN
        "Country/Region Code" := '';
        "VAT Registration No." := '';
        EXIT;
      END;

      ReadGLSetup;
      CASE TRUE OF
        ("Account Type" = "Account Type"::Customer) OR ("Bal. Account Type" = "Bal. Account Type"::Customer):
          BEGIN
            Cust.GET(No);
            "Country/Region Code" := Cust."Country/Region Code";
            "VAT Registration No." := Cust."VAT Registration No.";
          END;
        ("Account Type" = "Account Type"::Vendor) OR ("Bal. Account Type" = "Bal. Account Type"::Vendor):
          BEGIN
            Vend.GET(No);
            "Country/Region Code" := Vend."Country/Region Code";
            "VAT Registration No." := Vend."VAT Registration No.";
          END;
      END;
    END;

    PROCEDURE JobTaskIsSet@28() : Boolean;
    BEGIN
      EXIT(("Job No." <> '') AND ("Job Task No." <> '') AND ("Account Type" = "Account Type"::"G/L Account"));
    END;

    PROCEDURE CreateTempJobJnlLine@27();
    VAR
      TmpJobJnlOverallCurrencyFactor@1001 : Decimal;
    BEGIN
      TESTFIELD("Posting Date");
      CLEAR(JobJnlLine);
      JobJnlLine.DontCheckStdCost;
      JobJnlLine.VALIDATE("Job No.","Job No.");
      JobJnlLine.VALIDATE("Job Task No.","Job Task No.");
      IF CurrFieldNo <> FIELDNO("Posting Date") THEN
        JobJnlLine.VALIDATE("Posting Date","Posting Date")
      ELSE
        JobJnlLine.VALIDATE("Posting Date",xRec."Posting Date");
      JobJnlLine.VALIDATE(Type,JobJnlLine.Type::"G/L Account");
      IF "Job Currency Code" <> '' THEN BEGIN
        IF "Posting Date" = 0D THEN
          CurrencyDate := WORKDATE
        ELSE
          CurrencyDate := "Posting Date";

        IF "Currency Code" = "Job Currency Code" THEN
          "Job Currency Factor" := "Currency Factor"
        ELSE
          "Job Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Job Currency Code");
        JobJnlLine.SetCurrencyFactor("Job Currency Factor");
      END;
      JobJnlLine.VALIDATE("No.","Account No.");
      JobJnlLine.VALIDATE(Quantity,"Job Quantity");

      IF "Currency Factor" = 0 THEN BEGIN
        IF "Job Currency Factor" = 0 THEN
          TmpJobJnlOverallCurrencyFactor := 1
        ELSE
          TmpJobJnlOverallCurrencyFactor := "Job Currency Factor";
      END ELSE BEGIN
        IF "Job Currency Factor" = 0 THEN
          TmpJobJnlOverallCurrencyFactor := 1 / "Currency Factor"
        ELSE
          TmpJobJnlOverallCurrencyFactor := "Job Currency Factor" / "Currency Factor"
      END;

      IF "Job Quantity" <> 0 THEN
        JobJnlLine.VALIDATE("Unit Cost",((Amount - "VAT Amount") * TmpJobJnlOverallCurrencyFactor) / "Job Quantity");

      IF (xRec."Account No." = "Account No.") AND (xRec."Job Task No." = "Job Task No.") AND ("Job Unit Price" <> 0) THEN BEGIN
        IF JobJnlLine."Cost Factor" = 0 THEN
          JobJnlLine."Unit Price" := xRec."Job Unit Price";
        JobJnlLine."Line Amount" := xRec."Job Line Amount";
        JobJnlLine."Line Discount %" := xRec."Job Line Discount %";
        JobJnlLine."Line Discount Amount" := xRec."Job Line Discount Amount";
        JobJnlLine.VALIDATE("Unit Price");
      END;
    END;

    PROCEDURE UpdatePricesFromJobJnlLine@22();
    BEGIN
      "Job Unit Price" := JobJnlLine."Unit Price";
      "Job Total Price" := JobJnlLine."Total Price";
      "Job Line Amount" := JobJnlLine."Line Amount";
      "Job Line Discount Amount" := JobJnlLine."Line Discount Amount";
      "Job Unit Cost" := JobJnlLine."Unit Cost";
      "Job Total Cost" := JobJnlLine."Total Cost";
      "Job Line Discount %" := JobJnlLine."Line Discount %";

      "Job Unit Price (LCY)" := JobJnlLine."Unit Price (LCY)";
      "Job Total Price (LCY)" := JobJnlLine."Total Price (LCY)";
      "Job Line Amount (LCY)" := JobJnlLine."Line Amount (LCY)";
      "Job Line Disc. Amount (LCY)" := JobJnlLine."Line Discount Amount (LCY)";
      "Job Unit Cost (LCY)" := JobJnlLine."Unit Cost (LCY)";
      "Job Total Cost (LCY)" := JobJnlLine."Total Cost (LCY)";
    END;

    LOCAL PROCEDURE CheckNoCardTransactEntryExist@46(GenJnlLine@1002 : Record 81);
    VAR
      DOPaymentTransLogEntry@1000 : Record 829;
      DOPaymentTransLogMgt@1003 : Codeunit 829;
      DocumentType@1001 : Integer;
    BEGIN
      CASE GenJnlLine."Document Type" OF
        GenJnlLine."Document Type"::Payment:
          DocumentType := DOPaymentTransLogEntry."Document Type"::Payment;
        GenJnlLine."Document Type"::Refund:
          DocumentType := DOPaymentTransLogEntry."Document Type"::Refund;
      END;
      IF DOPaymentTransLogEntry.FINDFIRST THEN
        IF DOPaymentTransLogMgt.FindPostingNotFinishedEntry(DocumentType,GenJnlLine."Document No.",DOPaymentTransLogEntry) THEN
          ERROR(Text017,DOPaymentTransLogEntry."Transaction Type",GenJnlLine."Document Type",GenJnlLine."Document No.");
    END;

    LOCAL PROCEDURE GetCreditCard@47();
    VAR
      DOPaymentTransLogEntry@1000 : Record 829;
    BEGIN
      IF "Applies-to Doc. No." = xRec."Applies-to Doc. No." THEN
        EXIT;
      IF NOT (("Account Type" = "Account Type"::Customer) AND
              ("Bal. Account Type" = "Bal. Account Type"::"Bank Account"))
      THEN
        EXIT;

      IF "Applies-to Doc. No." = '' THEN
        EXIT;

      IF "Document Type" <> "Document Type"::Refund THEN
        EXIT;

      DOPaymentTransLogEntry.SETRANGE("Customer No.","Account No.");
      DOPaymentTransLogEntry.SETRANGE("Transaction Type",DOPaymentTransLogEntry."Transaction Type"::Capture);
      DOPaymentTransLogEntry.SETRANGE("Document Type",DOPaymentTransLogEntry."Document Type"::Payment);
      DOPaymentTransLogEntry.SETRANGE("Document No.","Applies-to Doc. No.");

      IF DOPaymentTransLogEntry.FINDFIRST THEN
        "Credit Card No." := DOPaymentTransLogEntry."Credit Card No."
      ELSE
        "Credit Card No." := '';
    END;

    PROCEDURE SetHideValidation@23(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetDefaultICPartnerGLAccNo@1058() : Code[20];
    VAR
      GLAcc@1001 : Record 15;
      GLAccNo@1002 : Code[20];
    BEGIN
      IF "IC Partner Code" <> '' THEN BEGIN
        IF "Account Type" = "Account Type"::"G/L Account" THEN
          GLAccNo := "Account No."
        ELSE
          GLAccNo := "Bal. Account No.";
        IF GLAcc.GET(GLAccNo) THEN
          EXIT(GLAcc."Default IC Partner G/L Acc. No")
      END;
    END;

    PROCEDURE IsApplied@30() : Boolean;
    BEGIN
      IF "Applies-to Doc. No." <> '' THEN
        EXIT(TRUE);
      IF "Applies-to ID" <> '' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE DataCaption@29() : Text[250];
    VAR
      GenJnlBatch@1000 : Record 232;
    BEGIN
      IF GenJnlBatch.GET("Journal Template Name","Journal Batch Name") THEN
        EXIT(GenJnlBatch.Name + '-' + GenJnlBatch.Description);
    END;

    LOCAL PROCEDURE ReadGLSetup@31();
    BEGIN
      IF NOT GLSetupRead THEN BEGIN
        GLSetup.GET;
        GLSetupRead := TRUE;
      END;
    END;

    PROCEDURE CalculateTDS@1280001();
    VAR
      TDSEntry@1280019 : Record 13729;
      CustLedgerEntry@1280018 : Record 21;
      VendorLedgerEntry@1280022 : Record 25;
      TDSGroup@1280017 : Record 13731;
      STReverseChargeSetup@1500002 : Record 16461;
      GenJnlLineWithPoTAmount@1500003 : Record 81;
      DateFilterCalc@1280016 : Codeunit 358;
      AccountingPeriodFilter@1280015 : Text[30];
      FiscalYear@1280014 : Boolean;
      PreviousTDSAmt@1280013 : Decimal;
      PreviousSurchargeAmt@1280012 : Decimal;
      PreviousAmount@1280011 : Decimal;
      AppliedAmount@1280010 : Decimal;
      CalculatedTDSAmt@1280006 : Decimal;
      CalculatedSurchargeAmt@1280005 : Decimal;
      SurchargeBase@1280003 : Decimal;
      PreviousContractAmount@1280002 : Decimal;
      InvoiceAmount@1280001 : Decimal;
      PaymentAmount@1280000 : Decimal;
      WorkTaxBaseAmt@1500000 : Decimal;
      AppliedAmountDoc@1500001 : Decimal;
      PreviousJnlAmt@1500011 : Decimal;
      TDSSetupPercentage@1500012 : Decimal;
    BEGIN
      IF Posting AND ("Party Type" = "Party Type"::Vendor) AND ("Applies-to Doc. No." <> '') THEN BEGIN
        FindAppliesToVendorLedgEntry(VendorLedgerEntry);
        IF VendorLedgerEntry.HasServiceTax THEN
          VendorLedgerEntry.CheckIncomeTaxForApplication(
            "TDS Nature of Deduction","Work Tax Nature Of Deduction");
      END;

      IF ("TDS Nature of Deduction" = '') AND ("Work Tax Nature Of Deduction" = '') THEN
        EXIT;
      IF Adjustment THEN
        EXIT;
      IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::Payment]) THEN
        EXIT;

      InitTDSAmounts;
      IF NOT Posting THEN
        PreviousJnlTDSCalculated := 0;

      IF TDSGroup.FindOnDate("TDS Group","Posting Date") THEN
        IF "Currency Code" <> '' THEN BEGIN
          IF NOT TDSGroup."Non Resident Payments" THEN
            EXIT;
        END ELSE BEGIN
          IF TDSGroup."Non Resident Payments" THEN
            EXIT;
        END;
      GetCurrency;
      IF "Currency Code" = '' THEN BEGIN
        IF TryGetSrvTaxReverseChargeSetup(STReverseChargeSetup) AND NOT "Serv. Tax on Advance Payment"
        THEN BEGIN
          IF (STReverseChargeSetup."Reverse Charge %" = 100) OR NOT "Include Serv. Tax in TDS Base" THEN
            TDSBaseLCY := ABS(Amount)
          ELSE BEGIN
            CalcPoTServiceTaxAmounts(GenJnlLineWithPoTAmount,STReverseChargeSetup."Reverse Charge %");
            TDSBaseLCY :=
              ABS(Amount) + ABS(GenJnlLineWithPoTAmount.FullServiceTaxAmount) +
              ABS(GenJnlLineWithPoTAmount.FullServiceTaxSBCAmount) + ABS(GenJnlLineWithPoTAmount.KKCessAmount);
          END;
        END ELSE BEGIN
          IF "Serv. Tax on Advance Payment" THEN
            IF "Include Serv. Tax in TDS Base" THEN
              TDSBaseLCY := ABS(Amount)
            ELSE
              TDSBaseLCY := "Service Tax Base Amount (LCY)"
          ELSE
            IF "Include Serv. Tax in TDS Base" THEN
              TDSBaseLCY :=
                ABS(Amount) + ABS(FullServiceTaxAmount) +
                ABS(FullServiceTaxSBCAmount) + ABS(KKCessAmount)
            ELSE
              TDSBaseLCY := ABS(Amount);
        END
      END ELSE
        IF TryGetSrvTaxReverseChargeSetup(STReverseChargeSetup) THEN
          TDSBaseLCY :=
            ROUND(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code",ABS(Amount),"Currency Factor"))
        ELSE BEGIN
          IF "Serv. Tax on Advance Payment" THEN BEGIN
            IF "Include Serv. Tax in TDS Base" THEN
              TDSBaseLCY :=
                ROUND(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code",ABS(Amount),"Currency Factor"))
            ELSE
              TDSBaseLCY := "Service Tax Base Amount (LCY)";
          END ELSE
            IF "Include Serv. Tax in TDS Base" THEN
              TDSBaseLCY :=
                ROUND(
                  CurrExchRate.ExchangeAmtFCYToLCY(
                    "Posting Date","Currency Code",ABS(Amount),"Currency Factor")) +
                  ABS(FullServiceTaxAmount) +
                  ABS(FullServiceTaxSBCAmount) +
                  ABS(KKCessAmount)
            ELSE
              TDSBaseLCY :=
                ROUND(
                  CurrExchRate.ExchangeAmtFCYToLCY(
                    "Posting Date","Currency Code",ABS(Amount),"Currency Factor"));
        END;

      TDSBuf[1].DELETEALL;
      TDSBuf[2].DELETEALL;
      CalculatedTDSAmt := 0;
      CalculatedSurchargeAmt := 0;
      SurchargeBase := 0;
      "Per Contract" := FALSE;

      DateFilterCalc.CreateTDSAccountingDateFilter(AccountingPeriodFilter,FiscalYear,"Posting Date",0);
      SetTDSEntryFiltersAppliedFalse(AccountingPeriodFilter);
      IF TDSEntry.FIND('-') THEN BEGIN
        TDSEntry.CALCSUMS("Invoice Amount","Service Tax Including eCess");
        PreviousAmount := ABS(TDSEntry."Invoice Amount");
      END;

      TDSEntry.RESET;
      TDSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TDS Group","Assessee Code","Document Type");
      TDSEntry.SETRANGE("Party Type","Party Type");
      TDSEntry.SETRANGE("Party Code","Party Code");
      TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
      TDSEntry.SETRANGE("TDS Group","TDS Group");
      TDSEntry.SETRANGE("Assessee Code","Assessee Code");
      TDSEntry.SETRANGE("Document Type",TDSEntry."Document Type"::Invoice);
      IF TDSEntry.FIND('-') THEN BEGIN
        TDSEntry.CALCSUMS("Invoice Amount","Service Tax Including eCess");
        InvoiceAmount := ABS(TDSEntry."Invoice Amount");
      END;

      TDSEntry.RESET;
      TDSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TDS Group","Assessee Code","Document Type");
      TDSEntry.SETRANGE("Party Type","Party Type");
      TDSEntry.SETRANGE("Party Code","Party Code");
      TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
      TDSEntry.SETRANGE("TDS Group","TDS Group");
      TDSEntry.SETRANGE("Assessee Code","Assessee Code");
      TDSEntry.SETRANGE("Document Type",TDSEntry."Document Type"::Payment);
      IF TDSEntry.FIND('-') THEN BEGIN
        TDSEntry.CALCSUMS("Invoice Amount","Service Tax Including eCess");
        PaymentAmount := ABS(TDSEntry."Invoice Amount");
      END;

      IF InvoiceAmount > PaymentAmount THEN
        PreviousAmount := InvoiceAmount
      ELSE
        PreviousAmount := PaymentAmount;

      IF NOT Posting THEN
        PreviousJnlAmt := CalculateJnlPreviousAmt
      ELSE
        PreviousAmount += PreviousJnlTDSCalculated;

      TDSEntry.RESET;
      TDSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TDS Group","Assessee Code");
      TDSEntry.SETRANGE("Party Type","Party Type");
      TDSEntry.SETRANGE("Party Code","Party Code");
      TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
      TDSEntry.SETRANGE("TDS Group","TDS Group");
      TDSEntry.SETRANGE("Assessee Code","Assessee Code");
      IF TDSEntry.FIND('-') THEN BEGIN
        TDSEntry.CALCSUMS("TDS Amount","Surcharge Amount");
        PreviousTDSAmt := ABS(TDSEntry."TDS Amount");
        PreviousSurchargeAmt := ABS(TDSEntry."Surcharge Amount");
      END;

      SetTDSEntryFiltersAppliedFalse(AccountingPeriodFilter);
      TDSEntry.SETRANGE("Per Contract",TRUE);
      IF TDSEntry.FIND('-') THEN BEGIN
        TDSEntry.CALCSUMS("Invoice Amount","Service Tax Including eCess");
        PreviousContractAmount := ABS(TDSEntry."Invoice Amount");
      END;

      IF NODLines.FindNODLines("Party Type","Party Code","TDS Nature of Deduction") THEN
        IF NOT TDSSetup.FindOnDate(
          "TDS Nature of Deduction","Assessee Code","TDS Group",NODLines."Concessional Code","Posting Date",
          "Nature of Remittance","Act Applicable","Country Code")
        THEN BEGIN
          "TDS/TCS %" := 0;
          TDSSetupPercentage := 0;
          "Work Tax %" := 0;
          "Surcharge %" := 0;
          "TDS/TCS Amount" := 0;
          "Surcharge Amount" := 0;
          "Work Tax Amount" := 0;
          "eCESS %" := 0;
          "SHE Cess % on TDS/TCS" := 0;
        END ELSE BEGIN
          IF "Party Type" = "Party Type"::Vendor THEN BEGIN
            Vend.GET("Party Code");
            IF (Vend."P.A.N. Status" = Vend."P.A.N. Status"::" ") AND (Vend."P.A.N. No." <> '') THEN
              TDSSetupPercentage := TDSSetup."TDS %"
            ELSE
              TDSSetupPercentage := TDSSetup."Non PAN TDS %";
          END ELSE
            IF "Party Type" = "Party Type"::Party THEN BEGIN
              TDSParty.GET("Party Code");
              IF (TDSParty."P.A.N. Status" = TDSParty."P.A.N. Status"::" ") AND (TDSParty."P.A.N. No." <> '') THEN
                TDSSetupPercentage := TDSSetup."TDS %"
              ELSE
                TDSSetupPercentage := TDSSetup."Non PAN TDS %";
            END ELSE
              TDSSetupPercentage := TDSSetup."TDS %";
          IF ("Applies-to ID" = '') AND ("Applies-to Doc. No." = '') THEN BEGIN
            IF NODLines."Threshold Overlook" THEN BEGIN
              "TDS/TCS Base Amount" := TDSBaseLCY;
              "TDS/TCS %" := TDSSetupPercentage;
              "eCESS %" := TDSSetup."eCESS %";
              "SHE Cess % on TDS/TCS" := TDSSetup."SHE Cess %";
              IF NODLines."Surcharge Overlook" THEN BEGIN
                "Surcharge Base Amount" := TDSBaseLCY;
                "Surcharge %" := TDSSetup."Surcharge %";
              END ELSE BEGIN
                TDSGroup.FindOnDate("TDS Group","Posting Date");
                IF PreviousAmount > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                  "Surcharge Base Amount" := TDSBaseLCY;
                  "Surcharge %" := TDSSetup."Surcharge %";
                END ELSE BEGIN
                  IF (PreviousAmount + TDSBaseLCY) > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                    "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY;
                    "Surcharge %" := TDSSetup."Surcharge %";
                    InsertGenTDSBuf(FALSE);
                    InsertEntriesToTDSBuffer(AccountingPeriodFilter,FALSE);
                  END ELSE
                    "Surcharge %" := 0;
                END;
              END;
            END ELSE BEGIN
              TDSGroup.FindOnDate("TDS Group","Posting Date");
              IF PreviousAmount > TDSGroup."TDS Threshold Amount" THEN BEGIN
                "TDS/TCS Base Amount" := TDSBaseLCY;
                "TDS/TCS %" := TDSSetupPercentage;
                "eCESS %" := TDSSetup."eCESS %";
                "SHE Cess % on TDS/TCS" := TDSSetup."SHE Cess %";
                IF NODLines."Surcharge Overlook" THEN BEGIN
                  "Surcharge Base Amount" := TDSBaseLCY;
                  "Surcharge %" := TDSSetup."Surcharge %";
                END ELSE
                  IF PreviousAmount > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                    "Surcharge Base Amount" := TDSBaseLCY;
                    "Surcharge %" := TDSSetup."Surcharge %";
                  END ELSE
                    IF (PreviousAmount + TDSBaseLCY) > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                      "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY;
                      "Surcharge %" := TDSSetup."Surcharge %";
                      InsertGenTDSBuf(FALSE);
                      InsertEntriesToTDSBuffer(AccountingPeriodFilter,FALSE);
                    END ELSE
                      "Surcharge %" := 0;
              END ELSE
                IF (PreviousJnlAmt > TDSGroup."TDS Threshold Amount") AND NOT Posting THEN BEGIN
                  "TDS/TCS Base Amount" := TDSBaseLCY;
                  "TDS/TCS %" := TDSSetup."TDS %";
                  "eCESS %" := TDSSetup."eCESS %";
                  "SHE Cess % on TDS/TCS" := TDSSetup."SHE Cess %";
                  IF NODLines."Surcharge Overlook" THEN BEGIN
                    "Surcharge Base Amount" := TDSBaseLCY;
                    "Surcharge %" := TDSSetup."Surcharge %";
                  END ELSE
                    IF PreviousJnlAmt > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                      "Surcharge Base Amount" := TDSBaseLCY;
                      "Surcharge %" := TDSSetup."Surcharge %";
                    END ELSE BEGIN
                      IF (PreviousJnlAmt + TDSBaseLCY) > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                        "Surcharge Base Amount" := PreviousJnlAmt + TDSBaseLCY;
                        "Surcharge %" := TDSSetup."Surcharge %";
                        InsertGenTDSBuf(FALSE);
                        InsertEntriesToTDSBuffer(AccountingPeriodFilter,FALSE);
                      END ELSE
                        "Surcharge %" := 0;
                    END;
                END ELSE
                  IF TDSGroup."Per Contract Value" <> 0 THEN BEGIN
                    IF (PreviousAmount + TDSBaseLCY) > TDSGroup."TDS Threshold Amount" THEN BEGIN
                      "TDS/TCS Base Amount" := PreviousAmount + TDSBaseLCY - PreviousContractAmount;
                      "TDS/TCS %" := TDSSetupPercentage;
                      "eCESS %" := TDSSetup."eCESS %";
                      "SHE Cess % on TDS/TCS" := TDSSetup."SHE Cess %";
                      IF NODLines."Surcharge Overlook" THEN BEGIN
                        "Surcharge Base Amount" := ABS(PreviousAmount + TDSBaseLCY) - PreviousContractAmount;
                        "Surcharge %" := TDSSetup."Surcharge %";
                      END ELSE BEGIN
                        TDSGroup.FindOnDate("TDS Group","Posting Date");
                        IF PreviousAmount > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                          "Surcharge Base Amount" := TDSBaseLCY;
                          "Surcharge %" := TDSSetup."Surcharge %";
                        END ELSE BEGIN
                          IF (PreviousAmount + TDSBaseLCY) > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                            "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY - PreviousContractAmount;
                            "Surcharge %" := TDSSetup."Surcharge %";
                          END ELSE
                            "Surcharge %" := 0;
                        END;
                      END;
                      InsertGenTDSBuf(FALSE);
                      InsertEntriesToTDSBuffer(AccountingPeriodFilter,TRUE);
                    END ELSE
                      IF TDSBaseLCY > TDSGroup."Per Contract Value" THEN BEGIN
                        "Per Contract" := TRUE;
                        "TDS/TCS Base Amount" := TDSBaseLCY;
                        "TDS/TCS %" := TDSSetupPercentage;
                        "eCESS %" := TDSSetup."eCESS %";
                        "SHE Cess % on TDS/TCS" := TDSSetup."SHE Cess %";
                        IF NODLines."Surcharge Overlook" THEN BEGIN
                          "Surcharge Base Amount" := TDSBaseLCY;
                          "Surcharge %" := TDSSetup."Surcharge %";
                        END ELSE BEGIN
                          TDSGroup.FindOnDate("TDS Group","Posting Date");
                          IF TDSBaseLCY > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                            "Surcharge Base Amount" := TDSBaseLCY;
                            "Surcharge %" := TDSSetup."Surcharge %";
                          END ELSE
                            "Surcharge %" := 0;
                        END;
                      END ELSE BEGIN
                        "TDS/TCS Base Amount" := TDSBaseLCY;
                        "TDS/TCS %" := 0;
                        "eCESS %" := 0;
                        "SHE Cess % on TDS/TCS" := 0;
                      END;
                  END ELSE
                    IF Posting THEN BEGIN
                      IF (PreviousAmount + TDSBaseLCY) > TDSGroup."TDS Threshold Amount" THEN BEGIN
                        "TDS/TCS Base Amount" := PreviousAmount + TDSBaseLCY;
                        "TDS/TCS %" := TDSSetupPercentage;
                        "eCESS %" := TDSSetup."eCESS %";
                        "SHE Cess % on TDS/TCS" := TDSSetup."SHE Cess %";
                        IF NODLines."Surcharge Overlook" THEN BEGIN
                          "Surcharge Base Amount" := TDSBaseLCY;
                          "Surcharge %" := TDSSetup."Surcharge %";
                        END ELSE BEGIN
                      TDSGroup.FindOnDate("TDS Group","Posting Date");
                          IF PreviousAmount > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                            "Surcharge Base Amount" := TDSBaseLCY;
                            "Surcharge %" := TDSSetup."Surcharge %";
                          END ELSE BEGIN
                            IF (PreviousAmount + TDSBaseLCY) > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                              "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY;
                              "Surcharge %" := TDSSetup."Surcharge %";
                            END ELSE
                              "Surcharge %" := 0;
                          END;
                        END;
                        InsertGenTDSBuf(FALSE);
                        IF Posting AND (PreviousJnlTDSCalculated <> 0) THEN
                          InsertJnlTDSBuf(PreviousJnlTDSCalculated);
                        InsertEntriesToTDSBuffer(AccountingPeriodFilter,TRUE);
                      END ELSE BEGIN
                        "TDS/TCS Base Amount" := TDSBaseLCY;
                        "TDS/TCS %" := 0;
                        "eCESS %" := 0;
                        "SHE Cess % on TDS/TCS" := 0;
                      END;
                    END ELSE
                      IF NOT Posting THEN
                        IF (PreviousAmount + TDSBaseLCY + PreviousJnlAmt) > TDSGroup."TDS Threshold Amount" THEN BEGIN
                          "TDS/TCS Base Amount" := PreviousAmount + TDSBaseLCY + PreviousJnlAmt - PreviousJnlTDSCalculated;
                          "TDS/TCS %" := TDSSetup."TDS %";
                          "eCESS %" := TDSSetup."eCESS %";
                          "SHE Cess % on TDS/TCS" := TDSSetup."SHE Cess %";
                          IF NODLines."Surcharge Overlook" THEN BEGIN
                            "Surcharge Base Amount" := TDSBaseLCY;
                            "Surcharge %" := TDSSetup."Surcharge %";
                          END ELSE BEGIN
                          TDSGroup.FindOnDate("TDS Group","Posting Date");
                            IF PreviousJnlAmt > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                              "Surcharge Base Amount" := TDSBaseLCY;
                              "Surcharge %" := TDSSetup."Surcharge %";
                            END ELSE BEGIN
                              IF (PreviousAmount + TDSBaseLCY + PreviousJnlAmt) > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                                "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY + PreviousJnlAmt - PreviousJnlTDSCalculated;
                                "Surcharge %" := TDSSetup."Surcharge %";
                              END ELSE
                                "Surcharge %" := 0;
                            END;
                          END;
                          InsertJnlTDSBuf(PreviousJnlAmt + TDSBaseLCY - PreviousJnlTDSCalculated);
                          InsertEntriesToTDSBuffer(AccountingPeriodFilter,TRUE);
                        END ELSE BEGIN
                          "TDS/TCS Base Amount" := TDSBaseLCY;
                          "TDS/TCS %" := 0;
                          "eCESS %" := 0;
                          "SHE Cess % on TDS/TCS" := 0;
                        END;
            END;
          END ELSE BEGIN
            IF "Party Type" = "Party Type"::Vendor THEN BEGIN
              IF "Applies-to Doc. No." <> '' THEN BEGIN
                FindAppliesToVendorLedgEntry(VendorLedgerEntry);
                IF VendorLedgerEntry.HasTDSWithNOD("TDS Nature of Deduction") THEN BEGIN
                  AppliedAmountDoc := CalcVendAppliedAmountLCY(VendorLedgerEntry);
                  IF (TDSBaseLCY) >= AppliedAmountDoc THEN BEGIN
                    "Applied TDS Base Amount" := AppliedAmountDoc;
                    TDSGroup.FindOnDate("TDS Group","Posting Date");
                    IF TDSGroup."Per Contract Value" <> 0 THEN BEGIN
                      IF PreviousTDSAmt = 0 THEN
                        "TDS/TCS Base Amount" := PreviousAmount + TDSBaseLCY - AppliedAmountDoc
                      ELSE BEGIN
                        IF PreviousContractAmount <> 0 THEN
                          "TDS/TCS Base Amount" := TDSBaseLCY - AppliedAmountDoc +
                            (PreviousAmount - PreviousContractAmount)
                        ELSE
                          "TDS/TCS Base Amount" := TDSBaseLCY - AppliedAmountDoc;
                      END;
                      IF PreviousSurchargeAmt = 0 THEN
                        "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY - AppliedAmountDoc
                      ELSE BEGIN
                        IF PreviousContractAmount <> 0 THEN
                          "Surcharge Base Amount" := TDSBaseLCY -
                            AppliedAmountDoc + (PreviousAmount - PreviousContractAmount)
                        ELSE
                          "Surcharge Base Amount" := TDSBaseLCY - AppliedAmountDoc;
                      END;
                    END ELSE BEGIN
                      IF PreviousTDSAmt = 0 THEN
                        "TDS/TCS Base Amount" := PreviousAmount + TDSBaseLCY - AppliedAmountDoc
                      ELSE
                        "TDS/TCS Base Amount" := TDSBaseLCY - AppliedAmountDoc;
                      IF PreviousSurchargeAmt = 0 THEN
                        "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY - AppliedAmountDoc
                      ELSE
                        "Surcharge Base Amount" := TDSBaseLCY - AppliedAmountDoc;
                    END;
                    "Temp TDS/TCS Base" := TDSBaseLCY - AppliedAmountDoc;
                  END ELSE BEGIN
                    "Applied TDS Base Amount" := "TDS/TCS Base Amount";
                    "TDS/TCS Base Amount" := 0;
                    "Surcharge Base Amount" := 0;
                    "Temp TDS/TCS Base" := 0
                  END;
                END;
              END;
              IF "Applies-to ID" <> '' THEN BEGIN
                VendorLedgerEntry.SetAppliesToIDFilter("Account No.","Applies-to ID");
                VendorLedgerEntry.SETRANGE("TDS Nature of Deduction","TDS Nature of Deduction");
                VendorLedgerEntry.SETRANGE("TDS Group","TDS Group");
                IF VendorLedgerEntry.FIND('-') THEN BEGIN
                  REPEAT
                    AppliedAmount := AppliedAmount + ABS(VendorLedgerEntry."Amount to Apply");
                  UNTIL VendorLedgerEntry.NEXT = 0;
                  IF "Currency Code" = '' THEN
                    AppliedAmount := AppliedAmount
                  ELSE
                    AppliedAmount := ROUND(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code",
                          ABS(AppliedAmount),"Currency Factor"));
                  IF TDSBaseLCY >= AppliedAmount THEN BEGIN
                    TDSGroup.FindOnDate("TDS Group","Posting Date");
                    IF TDSGroup."Per Contract Value" <> 0 THEN BEGIN
                      IF PreviousTDSAmt = 0 THEN
                        "TDS/TCS Base Amount" := PreviousAmount + TDSBaseLCY - AppliedAmount
                      ELSE BEGIN
                        IF PreviousContractAmount <> 0 THEN
                          "TDS/TCS Base Amount" := TDSBaseLCY - AppliedAmount + (PreviousAmount - PreviousContractAmount)
                        ELSE
                          "TDS/TCS Base Amount" := TDSBaseLCY - AppliedAmount;
                      END;
                      IF PreviousSurchargeAmt = 0 THEN
                        "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY - AppliedAmount
                      ELSE BEGIN
                        IF PreviousContractAmount <> 0 THEN
                          "Surcharge Base Amount" := TDSBaseLCY - AppliedAmount + (PreviousAmount - PreviousContractAmount)
                        ELSE
                          "Surcharge Base Amount" := TDSBaseLCY - AppliedAmount;
                      END;
                    END ELSE BEGIN
                      IF PreviousTDSAmt = 0 THEN
                        "TDS/TCS Base Amount" := PreviousAmount + TDSBaseLCY - AppliedAmount
                      ELSE
                        "TDS/TCS Base Amount" := TDSBaseLCY - AppliedAmount;
                      IF PreviousSurchargeAmt = 0 THEN
                        "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY - AppliedAmount
                      ELSE
                        "Surcharge Base Amount" := TDSBaseLCY - AppliedAmount;
                    END;
                    "Temp TDS/TCS Base" := TDSBaseLCY - AppliedAmount;
                  END ELSE BEGIN
                    "TDS/TCS Base Amount" := 0;
                    "Surcharge Base Amount" := 0;
                    "Temp TDS/TCS Base" := 0;
                  END;
                END;
              END;
            END;
            IF "Party Type" = "Party Type"::Customer THEN BEGIN
              IF "Applies-to Doc. No." <> '' THEN BEGIN
                CustLedgerEntry.RESET;
                CustLedgerEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                CustLedgerEntry.SETRANGE("TDS Nature of Deduction","TDS Nature of Deduction");
                CustLedgerEntry.SETRANGE("TDS Group","TDS Group");
                IF CustLedgerEntry.FINDFIRST THEN BEGIN
                  IF CustLedgerEntry."Amount to Apply" = 0 THEN BEGIN
                    CustLedgerEntry.CALCFIELDS("Remaining Amount");
                    AppliedAmountDoc := CustLedgerEntry."Remaining Amount";
                  END ELSE
                    AppliedAmountDoc := CustLedgerEntry."Amount to Apply";
                  IF "Currency Code" = '' THEN
                    AppliedAmountDoc := ABS(AppliedAmountDoc)
                  ELSE
                    AppliedAmountDoc := ROUND(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code",
                          ABS(AppliedAmountDoc),"Currency Factor"));

                  IF TDSBaseLCY >= AppliedAmountDoc THEN BEGIN
                    TDSGroup.FindOnDate("TDS Group","Posting Date");
                    IF TDSGroup."Per Contract Value" <> 0 THEN BEGIN
                      IF PreviousTDSAmt = 0 THEN
                        "TDS/TCS Base Amount" := PreviousAmount + TDSBaseLCY -
                          AppliedAmountDoc
                      ELSE BEGIN
                        IF PreviousContractAmount <> 0 THEN
                          "TDS/TCS Base Amount" := TDSBaseLCY -
                            AppliedAmountDoc +
                            (PreviousAmount - PreviousContractAmount)
                        ELSE
                          "TDS/TCS Base Amount" := TDSBaseLCY -
                            AppliedAmountDoc;
                      END;
                      IF PreviousSurchargeAmt = 0 THEN
                        "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY - AppliedAmountDoc
                      ELSE BEGIN
                        IF PreviousContractAmount <> 0 THEN
                          "Surcharge Base Amount" := TDSBaseLCY -
                            AppliedAmountDoc + (PreviousAmount - PreviousContractAmount)
                        ELSE
                          "Surcharge Base Amount" := TDSBaseLCY - AppliedAmountDoc;
                      END;
                    END ELSE BEGIN
                      IF PreviousTDSAmt = 0 THEN
                        "TDS/TCS Base Amount" := PreviousAmount + TDSBaseLCY - AppliedAmountDoc
                      ELSE
                        "TDS/TCS Base Amount" := TDSBaseLCY - AppliedAmountDoc;
                      IF PreviousSurchargeAmt = 0 THEN
                        "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY - AppliedAmountDoc
                      ELSE
                        "Surcharge Base Amount" := TDSBaseLCY - AppliedAmountDoc;
                    END;
                    "Temp TDS/TCS Base" := TDSBaseLCY - AppliedAmountDoc;
                  END ELSE BEGIN
                    "TDS/TCS Base Amount" := 0;
                    "Surcharge Base Amount" := 0;
                    "Temp TDS/TCS Base" := 0;
                  END;
                END;
              END;
              IF "Applies-to ID" <> '' THEN BEGIN
                CustLedgerEntry.RESET;
                CustLedgerEntry.SETRANGE("Applies-to ID","Applies-to ID");
                CustLedgerEntry.SETRANGE("TDS Nature of Deduction","TDS Nature of Deduction");
                CustLedgerEntry.SETRANGE("TDS Group","TDS Group");
                IF CustLedgerEntry.FIND('-') THEN BEGIN
                  REPEAT
                    AppliedAmount := AppliedAmount + ABS(CustLedgerEntry."Amount to Apply");
                  UNTIL CustLedgerEntry.NEXT = 0;
                  IF "Currency Code" = '' THEN
                    AppliedAmount := ABS(AppliedAmount)
                  ELSE
                    AppliedAmount := ROUND(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code",
                          ABS(AppliedAmount),"Currency Factor"));

                  IF ABS(Amount) >= AppliedAmount THEN BEGIN
                    TDSGroup.FindOnDate("TDS Group","Posting Date");
                    IF TDSGroup."Per Contract Value" <> 0 THEN BEGIN
                      IF PreviousTDSAmt = 0 THEN
                        "TDS/TCS Base Amount" := PreviousAmount + TDSBaseLCY - AppliedAmount
                      ELSE BEGIN
                        IF PreviousContractAmount <> 0 THEN
                          "TDS/TCS Base Amount" := TDSBaseLCY - AppliedAmount + (PreviousAmount - PreviousContractAmount)
                        ELSE
                          "TDS/TCS Base Amount" := TDSBaseLCY - AppliedAmount;
                      END;
                      IF PreviousSurchargeAmt = 0 THEN
                        "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY - AppliedAmount
                      ELSE BEGIN
                        IF PreviousContractAmount <> 0 THEN
                          "Surcharge Base Amount" := TDSBaseLCY - AppliedAmount + (PreviousAmount - PreviousContractAmount)
                        ELSE
                          "Surcharge Base Amount" := TDSBaseLCY - AppliedAmount;
                      END;
                    END ELSE BEGIN
                      IF PreviousTDSAmt = 0 THEN
                        "TDS/TCS Base Amount" := PreviousAmount + TDSBaseLCY - AppliedAmount
                      ELSE
                        "TDS/TCS Base Amount" := TDSBaseLCY - AppliedAmount ;
                      IF PreviousSurchargeAmt = 0 THEN
                        "Surcharge Base Amount" := PreviousAmount + TDSBaseLCY - AppliedAmount
                      ELSE
                        "Surcharge Base Amount" := TDSBaseLCY - AppliedAmount;
                    END;
                    "Temp TDS/TCS Base" := TDSBaseLCY - AppliedAmount;
                  END ELSE BEGIN
                    "TDS/TCS Base Amount" := 0;
                    "Surcharge Base Amount" := 0;
                    "Temp TDS/TCS Base" := 0;
                  END;
                END;
              END;
            END;
            IF NODLines."Threshold Overlook" THEN BEGIN
              "TDS/TCS Base Amount" := "TDS/TCS Base Amount";
              "TDS/TCS %" := TDSSetupPercentage;
              "eCESS %" := TDSSetup."eCESS %";
              "SHE Cess % on TDS/TCS" := TDSSetup."SHE Cess %";
              IF NODLines."Surcharge Overlook" THEN BEGIN
                "Surcharge Base Amount" := ABS("TDS/TCS Base Amount");
                "Surcharge %" := TDSSetup."Surcharge %";
              END ELSE BEGIN
                TDSGroup.FindOnDate("TDS Group","Posting Date");
                IF PreviousAmount > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                  "Surcharge Base Amount" := ABS("TDS/TCS Base Amount");
                  "Surcharge %" := TDSSetup."Surcharge %";
                  PreviousSurchargeAmt := 0;
                END ELSE
                  IF ABS("Surcharge Base Amount") > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                    "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                    "Surcharge %" := TDSSetup."Surcharge %";
                    InsertGenTDSBuf(TRUE);
                    InsertEntriesToTDSBuffer(AccountingPeriodFilter,FALSE);
                  END ELSE BEGIN
                    "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                    "Surcharge %" := 0;
                    "Surcharge Amount" := 0;
                  END;
              END;
            END ELSE BEGIN
              TDSGroup.FindOnDate("TDS Group","Posting Date");
              IF PreviousAmount > TDSGroup."TDS Threshold Amount" THEN BEGIN
                "TDS/TCS Base Amount" := "TDS/TCS Base Amount";
                "TDS/TCS %" := TDSSetupPercentage;
                "eCESS %" := TDSSetup."eCESS %";
                "SHE Cess % on TDS/TCS" := TDSSetup."SHE Cess %";
                IF NODLines."Surcharge Overlook" THEN BEGIN
                  "Surcharge Base Amount" := ABS("TDS/TCS Base Amount");
                  "Surcharge %" := TDSSetup."Surcharge %";
                END ELSE
                  IF PreviousAmount > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                    "Surcharge Base Amount" := ABS("TDS/TCS Base Amount");
                    "Surcharge %" := TDSSetup."Surcharge %";
                    PreviousSurchargeAmt := 0;
                  END ELSE
                    IF ABS("Surcharge Base Amount") > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                      "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                      "Surcharge %" := TDSSetup."Surcharge %";
                      InsertGenTDSBuf(TRUE);
                      InsertEntriesToTDSBuffer(AccountingPeriodFilter,FALSE);
                    END ELSE BEGIN
                      "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                      "Surcharge %" := 0;
                      "Surcharge Amount" := 0;
                    END;
              END ELSE
                IF TDSGroup."Per Contract Value" <> 0 THEN BEGIN
                  IF (ABS("TDS/TCS Base Amount") + PreviousContractAmount) > TDSGroup."TDS Threshold Amount" THEN BEGIN
                    "TDS/TCS %" := TDSSetupPercentage;
                    "eCESS %" := TDSSetup."eCESS %";
                    "SHE Cess % on TDS/TCS" := TDSSetup."SHE Cess %";
                    IF NODLines."Surcharge Overlook" THEN BEGIN
                      "Surcharge Base Amount" := ABS("TDS/TCS Base Amount");
                      "Surcharge %" := TDSSetup."Surcharge %";
                    END ELSE BEGIN
                      TDSGroup.FindOnDate("TDS Group","Posting Date");
                      IF PreviousAmount > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                        "Surcharge Base Amount" := ABS("TDS/TCS Base Amount");
                        "Surcharge %" := TDSSetup."Surcharge %";
                        PreviousSurchargeAmt := 0;
                      END ELSE
                        IF ABS("Surcharge Base Amount") > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                          "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                          "Surcharge %" := TDSSetup."Surcharge %";
                        END ELSE BEGIN
                          "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                          "Surcharge %" := 0;
                          "Surcharge Amount" := 0;
                        END;
                    END;
                    InsertGenTDSBuf(TRUE);
                    InsertEntriesToTDSBuffer(AccountingPeriodFilter,TRUE);
                  END ELSE
                    IF ABS("TDS/TCS Base Amount") > TDSGroup."Per Contract Value" THEN BEGIN
                      "Per Contract" := TRUE;
                      "TDS/TCS %" := TDSSetupPercentage;
                      "eCESS %" := TDSSetup."eCESS %";
                      "SHE Cess % on TDS/TCS" := TDSSetup."SHE Cess %";
                      IF NODLines."Surcharge Overlook" THEN BEGIN
                        "Surcharge Base Amount" := TDSBaseLCY;
                        "Surcharge %" := TDSSetup."Surcharge %";
                      END ELSE BEGIN
                        TDSGroup.FindOnDate("TDS Group","Posting Date");
                        IF TDSBaseLCY > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                          "Surcharge Base Amount" := TDSBaseLCY;
                          "Surcharge %" := TDSSetup."Surcharge %";
                        END ELSE
                          "Surcharge %" := 0;
                      END;
                    END ELSE BEGIN
                      "TDS/TCS Base Amount" := ABS("TDS/TCS Base Amount");
                      "TDS/TCS %" := 0;
                      "eCESS %" := 0;
                      "SHE Cess % on TDS/TCS" := 0;
                      "Surcharge %" := 0;
                      "Surcharge Amount" := 0;
                      "TDS/TCS Amount" := 0;
                      "TDS/TCS Amt Incl Surcharge" := 0;
                    END;
                END ELSE
                  IF ABS("TDS/TCS Base Amount") > TDSGroup."TDS Threshold Amount" THEN BEGIN
                    "TDS/TCS %" := TDSSetupPercentage;
                    "eCESS %" := TDSSetup."eCESS %";
                    "SHE Cess % on TDS/TCS" := TDSSetup."SHE Cess %";
                    IF NODLines."Surcharge Overlook" THEN BEGIN
                      "Surcharge Base Amount" := ABS("TDS/TCS Base Amount");
                      "Surcharge %" := TDSSetup."Surcharge %";
                    END ELSE BEGIN
                      TDSGroup.FindOnDate("TDS Group","Posting Date");
                      IF PreviousAmount > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                        "Surcharge Base Amount" := ABS("TDS/TCS Base Amount");
                        "Surcharge %" := TDSSetup."Surcharge %";
                        PreviousSurchargeAmt := 0;
                      END ELSE
                        IF ABS("Surcharge Base Amount") > TDSGroup."Surcharge Threshold Amount" THEN BEGIN
                          "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                          "Surcharge %" := TDSSetup."Surcharge %";
                        END ELSE BEGIN
                          "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                          "Surcharge %" := 0;
                          "Surcharge Amount" := 0;
                        END;
                    END;
                    InsertGenTDSBuf(TRUE);
                    InsertEntriesToTDSBuffer(AccountingPeriodFilter,TRUE);
                  END ELSE BEGIN
                    "TDS/TCS Base Amount" := ABS("TDS/TCS Base Amount");
                    "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                    "TDS/TCS %" := 0;
                    "eCESS %" := 0;
                    "SHE Cess % on TDS/TCS" := 0;
                    "Surcharge %" := 0;
                    "Surcharge Amount" := 0;
                    "TDS/TCS Amount" := 0;
                    "TDS/TCS Amt Incl Surcharge" := 0;
                  END;
            END;
          END;

          IF Amount <> 0 THEN BEGIN
            IF Amount < 0 THEN BEGIN
              "TDS/TCS Base Amount" := -"TDS/TCS Base Amount";
              "Surcharge Base Amount" := -"Surcharge Base Amount";
            END;
            IF TDSBuf[1].FIND('+') THEN BEGIN
              REPEAT
                CalculatedTDSAmt := CalculatedTDSAmt + (TDSBuf[1]."TDS Base Amount" - TDSBuf[1]."Contract TDS Ded. Base Amount") *
                  TDSBuf[1]."TDS %" / 100;
                SurchargeBase := SurchargeBase + (TDSBuf[1]."TDS %" *
                                                  (TDSBuf[1]."Surcharge Base Amount" - TDSBuf[1]."Contract TDS Ded. Base Amount") /
                                                  100);
                CalculatedSurchargeAmt := CalculatedSurchargeAmt + (TDSBuf[1]."TDS %" *
                                                                    (TDSBuf[1]."Surcharge Base Amount" -
                                                                     TDSBuf[1]."Contract TDS Ded. Base Amount") / 100)
                  * (TDSBuf[1]."Surcharge %" / 100);
              UNTIL TDSBuf[1].NEXT(-1) = 0;

              IF Amount < 0 THEN BEGIN
                "TDS/TCS Amount" := -ROUND(CalculatedTDSAmt,Currency."Amount Rounding Precision");
                "Surcharge Amount" := -ROUND(CalculatedSurchargeAmt,Currency."Amount Rounding Precision");
              END ELSE BEGIN
                "TDS/TCS Amount" := ROUND(CalculatedTDSAmt,Currency."Amount Rounding Precision");
                "Surcharge Amount" := ROUND(CalculatedSurchargeAmt,Currency."Amount Rounding Precision");
              END;
              IF "TDS/TCS Base Amount" <> 0 THEN
                "TDS/TCS %" := ABS(ROUND(CalculatedTDSAmt * 100 / "TDS/TCS Base Amount",Currency."Amount Rounding Precision"));
              IF SurchargeBase <> 0 THEN
                "Surcharge %" := ABS(ROUND(CalculatedSurchargeAmt * 100 / SurchargeBase,Currency."Amount Rounding Precision"));
            END ELSE BEGIN
              "TDS/TCS Amount" := ROUND("TDS/TCS %" * "TDS/TCS Base Amount" / 100,Currency."Amount Rounding Precision");
              "Surcharge Amount" := ("TDS/TCS %" * "Surcharge Base Amount" / 100) * ("Surcharge %" / 100);
            END;
            "TDS/TCS Amt Incl Surcharge" := ("TDS/TCS Amount" + "Surcharge Amount");
            "eCESS on TDS/TCS Amount" := ROUND("TDS/TCS Amt Incl Surcharge" * "eCESS %" / 100,
                Currency."Amount Rounding Precision");
            "SHE Cess on TDS/TCS Amount" := ROUND("TDS/TCS Amt Incl Surcharge" * "SHE Cess % on TDS/TCS" / 100,
                Currency."Amount Rounding Precision");
            "Total TDS/TCS Incl. SHE CESS" := "TDS/TCS Amount" + "Surcharge Amount" + "eCESS on TDS/TCS Amount" +
              "SHE Cess on TDS/TCS Amount";

            IF "Currency Code" = '' THEN BEGIN
              "TDS/TCS Amount" := RoundTDSAmount("TDS/TCS Amount");
              "Surcharge Amount" := RoundTDSAmount("Surcharge Amount");
              "eCESS on TDS/TCS Amount" := RoundTDSAmount("eCESS on TDS/TCS Amount");
              "SHE Cess on TDS/TCS Amount" := RoundTDSAmount("SHE Cess on TDS/TCS Amount");
              "TDS/TCS Amt Incl Surcharge" := "TDS/TCS Amount" + "Surcharge Amount";
              "Total TDS/TCS Incl. SHE CESS" :=
                "TDS/TCS Amt Incl Surcharge" + "eCESS on TDS/TCS Amount" + "SHE Cess on TDS/TCS Amount";
              "Bal. TDS/TCS Including SHECESS" := "Total TDS/TCS Incl. SHE CESS";
              "Balance Surcharge Amount" := "Surcharge Amount";
            END ELSE BEGIN
              "TDS/TCS Amount" := ExchangeAmtLCYToFCY("TDS/TCS Amount",FALSE);
              "Surcharge Amount" := ExchangeAmtLCYToFCY("Surcharge Amount",FALSE);
              "TDS/TCS Amt Incl Surcharge" := ExchangeAmtLCYToFCY("TDS/TCS Amt Incl Surcharge",FALSE);
              "eCESS on TDS/TCS Amount" := ExchangeAmtLCYToFCY("eCESS on TDS/TCS Amount",FALSE);
              "SHE Cess on TDS/TCS Amount" := ExchangeAmtLCYToFCY("SHE Cess on TDS/TCS Amount",FALSE);
              "Total TDS/TCS Incl. SHE CESS" := ExchangeAmtLCYToFCY("Total TDS/TCS Incl. SHE CESS",FALSE);
              "Bal. TDS/TCS Including SHECESS" := "Total TDS/TCS Incl. SHE CESS";
              "Balance Surcharge Amount" := "Surcharge Amount";
            END;
          END;
        END;

      TDSSetup.RESET;
      TDSSetup.SETRANGE("TDS Nature of Deduction","Work Tax Nature Of Deduction");
      TDSSetup.SETRANGE("Assessee Code","Assessee Code");
      TDSSetup.SETRANGE("TDS Group","Work Tax Group");
      TDSSetup.SETRANGE("Effective Date",0D,"Posting Date");
      NODLines.RESET;
      NODLines.SETRANGE(Type,"Party Type");
      NODLines.SETRANGE("No.","Party Code");
      NODLines.SETRANGE("NOD/NOC","Work Tax Nature Of Deduction");
      IF NODLines.FIND('-') THEN BEGIN
        IF NODLines."Concessional Code" <> '' THEN
          TDSSetup.SETRANGE("Concessional Code",NODLines."Concessional Code")
        ELSE
          TDSSetup.SETRANGE("Concessional Code",'');
        IF NOT TDSSetup.FINDLAST THEN BEGIN
          "Work Tax %" := 0;
          "Work Tax Base Amount" := 0;
          "Work Tax Amount" := 0;
          "Balance Work Tax Amount" := 0;
        END ELSE BEGIN
          "Work Tax %" := TDSSetup."TDS %";
          IF "Currency Code" = '' THEN
            WorkTaxBaseAmt := Amount
          ELSE
            WorkTaxBaseAmt := ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code",Amount,"Currency Factor"));
          IF TryGetSrvTaxReverseChargeSetup(STReverseChargeSetup) AND NOT "Serv. Tax on Advance Payment" THEN
            IF (STReverseChargeSetup."Reverse Charge %" = 100) OR NOT "Include Serv. Tax in TDS Base" THEN
              "Work Tax Base Amount" := WorkTaxBaseAmt
            ELSE BEGIN
              CalcPoTServiceTaxAmounts(GenJnlLineWithPoTAmount,STReverseChargeSetup."Reverse Charge %");
              "Work Tax Base Amount" := WorkTaxBaseAmt -
                (ABS(GenJnlLineWithPoTAmount.FullServiceTaxAmount) +
                ABS(GenJnlLineWithPoTAmount.FullServiceTaxSBCAmount) +
                ABS(GenJnlLineWithPoTAmount.KKCessAmount));
            END
          ELSE BEGIN
            IF "Serv. Tax on Advance Payment" THEN BEGIN
              IF "Include Serv. Tax in TDS Base" THEN
                "Work Tax Base Amount" := WorkTaxBaseAmt
              ELSE
                 "Work Tax Base Amount" := "Service Tax Base Amount (LCY)";
            END ELSE
              IF "Include Serv. Tax in TDS Base" THEN BEGIN
                IF Amount < 0 THEN
                   "Work Tax Base Amount" := WorkTaxBaseAmt -
                     (ABS(FullServiceTaxAmount) +
                     ABS(FullServiceTaxSBCAmount) +
                     ABS(KKCessAmount))
                ELSE
                   "Work Tax Base Amount" := WorkTaxBaseAmt +
                     ABS(FullServiceTaxAmount) +
                     ABS(FullServiceTaxSBCAmount) +
                     ABS(KKCessAmount)
              END ELSE
                "Work Tax Base Amount" := WorkTaxBaseAmt
          END;
          IF Posting AND ("Party Type" = "Party Type"::Vendor) AND ("Applies-to Doc. No." <> '') THEN BEGIN
            FindAppliesToVendorLedgEntry(VendorLedgerEntry);
            IF VendorLedgerEntry.HasWorkTaxWithNOD("Work Tax Nature Of Deduction") THEN BEGIN
              AppliedAmount := CalcVendAppliedAmountLCY(VendorLedgerEntry);
              IF Amount < 0 THEN
                "Work Tax Base Amount" += AppliedAmount
              ELSE
                "Work Tax Base Amount" -= AppliedAmount;
            END;
          END
        END;
        "Work Tax Amount" := RoundTDSAmount("Work Tax Base Amount" * "Work Tax %" / 100);
        IF "Currency Code" <> '' THEN
          "Work Tax Amount" := ExchangeAmtLCYToFCY("Work Tax Amount",FALSE);
        "Balance Work Tax Amount" := "Work Tax Amount";
      END;
    END;

    PROCEDURE RoundTDSAmount@1280019(TDSAmount@1280000 : Decimal) : Decimal;
    VAR
      TDSRoundingDirection@1280003 : Text[1];
      TDSRoundingPrecision@1280002 : Decimal;
    BEGIN
      ReadGLSetup;
      CASE GLSetup."TDS Rounding Type" OF
        GLSetup."TDS Rounding Type"::Nearest:
          TDSRoundingDirection := '=';
        GLSetup."TDS Rounding Type"::Up:
          TDSRoundingDirection := '>';
        GLSetup."TDS Rounding Type"::Down:
          TDSRoundingDirection := '<';
      END;
      IF GLSetup."TDS Rounding Precision" <> 0 THEN
        TDSRoundingPrecision := GLSetup."TDS Rounding Precision"
      ELSE
        TDSRoundingPrecision := 0.01;
      EXIT(ROUND(TDSAmount,TDSRoundingPrecision,TDSRoundingDirection));
    END;

    LOCAL PROCEDURE InsertTDSBuf@1280006(TDSEntry@1280003 : Record 13729;PostingDate@1280002 : Date;CalculateSurcharge@1280001 : Boolean;CalculateTDS@1280000 : Boolean);
    BEGIN
      WITH TDSEntry DO BEGIN
        TDSBuf[1].INIT;
        TDSBuf[1]."TDS Nature of Deduction" := "TDS Nature of Deduction";
        TDSBuf[1]."Assessee Code" := "Assessee Code";
        TDSBuf[1]."Party Code" := "Party Code";
        TDSBuf[1]."Party Type" := "Party Type";
        IF CalculateTDS THEN BEGIN
          // TDSBuf[1]."TDS Base Amount" := "Invoice Amount" + "Service Tax Including eCess";
          // IF TDSEntry."Per Contract" THEN
          // TDSBuf[1]."Contract TDS Ded. Base Amount" := "Invoice Amount" + "Service Tax Including eCess";
          TDSBuf[1]."TDS Base Amount" := "Invoice Amount";
          IF "Per Contract" THEN
            TDSBuf[1]."Contract TDS Ded. Base Amount" := "Invoice Amount";
        END ELSE BEGIN
          TDSBuf[1]."TDS Base Amount" := 0;
          TDSBuf[1]."Contract TDS Ded. Base Amount" := 0;
        END;
        IF CalculateSurcharge THEN BEGIN
          // TDSBuf[1]."Surcharge Base Amount" := "Invoice Amount" + "Service Tax Including eCess";
          // IF TDSEntry."Per Contract" THEN
          // TDSBuf[1]."Contract TDS Ded. Base Amount" := "Invoice Amount" + "Service Tax Including eCess";
          TDSBuf[1]."Surcharge Base Amount" := "Invoice Amount";
          IF "Per Contract" THEN
            TDSBuf[1]."Contract TDS Ded. Base Amount" := "Invoice Amount";
        END ELSE
          TDSBuf[1]."Surcharge Base Amount" := 0;
        TDSSetup.RESET;
        TDSSetup.SETRANGE("TDS Nature of Deduction","TDS Nature of Deduction");
        TDSSetup.SETRANGE("Assessee Code","Assessee Code");
        TDSSetup.SETRANGE("TDS Group","TDS Group");
        TDSSetup.SETRANGE("Effective Date",0D,PostingDate);
        NODLines.RESET;
        NODLines.SETRANGE(Type,"Party Type");
        NODLines.SETRANGE("No.","Party Code");
        NODLines.SETRANGE("NOD/NOC","TDS Nature of Deduction");
        IF NODLines.FIND('-') THEN
          IF NODLines."Concessional Code" <> '' THEN
            TDSSetup.SETRANGE("Concessional Code",NODLines."Concessional Code")
          ELSE
            TDSSetup.SETRANGE("Concessional Code",'');
        IF TDSSetup.FINDLAST THEN BEGIN
          IF "Party Type" = "Party Type"::Vendor THEN BEGIN
            Vend.GET("Party Code");
            IF (Vend."P.A.N. Status" = Vend."P.A.N. Status"::" ") AND (Vend."P.A.N. No." <> '') THEN
              TDSBuf[1]."TDS %" := TDSSetup."TDS %"
            ELSE
              TDSBuf[1]."TDS %" := TDSSetup."Non PAN TDS %";
          END ELSE
            IF "Party Type" = "Party Type"::Party THEN BEGIN
              TDSParty.GET("Party Code");
              IF (TDSParty."P.A.N. Status" = TDSParty."P.A.N. Status"::" ") AND (TDSParty."P.A.N. No." <> '') THEN
                TDSBuf[1]."TDS %" := TDSSetup."TDS %"
              ELSE
                TDSBuf[1]."TDS %" := TDSSetup."Non PAN TDS %";
            END ELSE
              TDSBuf[1]."TDS %" := TDSSetup."TDS %";
          TDSBuf[1]."Surcharge %" := TDSSetup."Surcharge %";
        END;
        UpdTDSBuffer;
      END;
    END;

    LOCAL PROCEDURE UpdTDSBuffer@1280004();
    BEGIN
      TDSBuf[2] := TDSBuf[1];
      IF TDSBuf[2].FIND THEN BEGIN
        TDSBuf[2]."TDS Base Amount" := TDSBuf[2]."TDS Base Amount" + TDSBuf[1]."TDS Base Amount";
        TDSBuf[2]."Surcharge Base Amount" := TDSBuf[2]."Surcharge Base Amount" + TDSBuf[1]."Surcharge Base Amount";
        TDSBuf[2]."Contract TDS Ded. Base Amount" := TDSBuf[2]."Contract TDS Ded. Base Amount" +
          TDSBuf[1]."Contract TDS Ded. Base Amount";
        TDSBuf[2].MODIFY;
      END ELSE
        TDSBuf[1].INSERT;
    END;

    LOCAL PROCEDURE InsertGenTDSBuf@1280005(Applied@1280000 : Boolean);
    BEGIN
      CLEAR(TDSBuf[1]);
      TDSBuf[1]."TDS Nature of Deduction" := "TDS Nature of Deduction";
      TDSBuf[1]."Assessee Code" := "Assessee Code";
      TDSBuf[1]."Party Code" := "Party Code";
      TDSBuf[1]."Party Type" := "Party Type";
      IF Applied THEN BEGIN
        TDSBuf[1]."TDS Base Amount" := ABS("Temp TDS/TCS Base");
        TDSBuf[1]."Surcharge Base Amount" := ABS("Temp TDS/TCS Base");
      END ELSE BEGIN
        TDSBuf[1]."TDS Base Amount" := TDSBaseLCY;
        TDSBuf[1]."Surcharge Base Amount" := TDSBaseLCY;
      END;
      TDSBuf[1]."TDS %" := "TDS/TCS %";
      TDSBuf[1]."Surcharge %" := "Surcharge %";
      UpdTDSBuffer;
    END;

    LOCAL PROCEDURE InitTDSAmounts@1500000();
    BEGIN
      "TDS/TCS %" := 0;
      "Surcharge %" := 0;
      "eCESS %" := 0;
      "SHE Cess % on TDS/TCS" := 0;
      "Work Tax %" := 0;
      "TDS/TCS Amount" := 0;
      "Surcharge Amount" := 0;
      "TDS/TCS Amt Incl Surcharge" := 0;
      "eCESS on TDS/TCS Amount" := 0;
      "SHE Cess on TDS/TCS Amount" := 0;
      "Work Tax Amount" := 0;
      "Total TDS/TCS Incl. SHE CESS" := 0;
      "Bal. TDS/TCS Including SHECESS" := 0;
      "Applied TDS Base Amount" := 0;
    END;

    LOCAL PROCEDURE CalculateServiceTax@1280002();
    VAR
      ServiceTaxSetup@1280000 : Record 16472;
      Location@1500001 : Record 14;
      CompanyInfo@1500000 : Record 79;
      ServiceTaxAbatement@1500002 : Decimal;
      Sign@1500101 : Integer;
    BEGIN
      ClearServiceTaxAmounts;
      IF NOT HasServiceTax THEN BEGIN
        "Service Tax Base Amount (LCY)" := 0;
        EXIT;
      END;

      IF "Serv. Tax on Advance Payment" AND
         ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund])
      THEN BEGIN
        ValidateSTAmountForAdvPayment;
        EXIT;
      END;

      IF "Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"] THEN BEGIN
        "Serv. Tax on Advance Payment" := FALSE;
        "Service Tax Base Amount (LCY)" := ServiceTaxBaseSign * ABS("Amount (LCY)");

        IF "Service Tax Entry" AND ("Service Tax Group Code" <> '') THEN BEGIN
          CopySTRoundingValues;
          IF ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date") THEN
            ServiceTaxAbatement := CalculateAbatementPercentage(ServiceTaxSetup);
          IF ((("Account Type" = "Account Type"::Customer) OR ("Bal. Account Type" = "Bal. Account Type"::Customer)) AND
              (("Account Type" = "Account Type"::"G/L Account") OR ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")))
          THEN BEGIN
            "Service Tax Type" := "Service Tax Type"::Sale;
            "Service Tax Base Amount (LCY)" := -ABS(ROUND("Amount (LCY)"));
            CalculateServiceTaxAmounts(ServiceTaxSetup,ServiceTaxAbatement);
          END;
          IF ((("Account Type" = "Account Type"::Vendor) OR ("Bal. Account Type" = "Bal. Account Type"::Vendor)) AND
              (("Account Type" = "Account Type"::"G/L Account") OR ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")))
          THEN BEGIN
            "Service Tax Type" := "Service Tax Type"::Purchase;
            "Service Tax Base Amount (LCY)" := ABS(ROUND("Amount (LCY)"));
            CalculateServiceTaxAmounts(ServiceTaxSetup,ServiceTaxAbatement);
          END;
        END;
        IF NOT "Service Tax Entry" THEN
          "Service Tax Entry" := CheckToCalcST;
        IF CheckToCalcST THEN BEGIN
          IF Amount > 0 THEN
            "Service Tax Type" := "Service Tax Type"::Purchase
          ELSE
            IF Amount < 0 THEN
              "Service Tax Type" := "Service Tax Type"::Sale;
          Sign := -GetSignFromAmount(Amount);
          "Service Tax Base Amount (LCY)" := Sign * ABS(ROUND("Amount (LCY)"));
          CalculateServiceTaxAmounts(ServiceTaxSetup,ServiceTaxAbatement);
        END;
      END;
      IF ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) AND (NOT "Serv. Tax on Advance Payment") THEN BEGIN
        IF ("Account Type" = "Account Type"::"G/L Account") AND ("Account No." <> '') THEN BEGIN
          CopySTRoundingValues;
          GLAcc.GET("Account No.");
          IF GLAcc."Service Tax Group Code" <> '' THEN BEGIN
            "Service Tax Entry" := TRUE;
            "Service Tax Group Code" := GLAcc."Service Tax Group Code";
            CompanyInfo.GET;
            "Service Tax Registration No." := CompanyInfo."Service Tax Registration No.";
            IF "Location Code" <> '' THEN BEGIN
              Location.GET("Location Code");
              "Service Tax Registration No." := Location."Service Tax Registration No.";
            END;
          END;
        END;

        IF ("Bal. Account Type" = "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '') THEN BEGIN
          GLAcc.GET("Bal. Account No.");
          IF GLAcc."Service Tax Group Code" <> '' THEN BEGIN
            "Service Tax Entry" := TRUE;
            "Service Tax Group Code" := GLAcc."Service Tax Group Code";
            CompanyInfo.GET;
            "Service Tax Registration No." := CompanyInfo."Service Tax Registration No.";
            IF "Location Code" <> '' THEN BEGIN
              Location.GET("Location Code");
              "Service Tax Registration No." := Location."Service Tax Registration No.";
            END;
          END;
        END;

        IF ("Service Tax Entry" AND ("Service Tax Group Code" <> '') AND
            ("Service Tax Type" IN ["Service Tax Type"::Purchase,"Service Tax Type"::Sale]))
        THEN
          IF ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date") THEN BEGIN
            ServiceTaxAbatement := CalculateAbatementPercentage(ServiceTaxSetup);
            IF ("Account Type" = "Account Type"::"G/L Account") AND ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")
            THEN BEGIN
              IF ("Service Tax Type" = "Service Tax Type"::Sale) AND ("Document Type" = "Document Type"::Payment) THEN
                "Service Tax Base Amount (LCY)" := -ABS(ROUND("Amount (LCY)"));
              IF ("Service Tax Type" = "Service Tax Type"::Purchase) AND ("Document Type" = "Document Type"::Payment) THEN
                "Service Tax Base Amount (LCY)" := ABS(ROUND("Amount (LCY)"));
              IF ("Service Tax Type" = "Service Tax Type"::Sale) AND ("Document Type" = "Document Type"::Refund) THEN
                "Service Tax Base Amount (LCY)" := ABS(ROUND("Amount (LCY)"));
              IF ("Service Tax Type" = "Service Tax Type"::Purchase) AND ("Document Type" = "Document Type"::Refund) THEN
                "Service Tax Base Amount (LCY)" := -ABS(ROUND("Amount (LCY)"));
              CalculateServiceTaxAmounts(ServiceTaxSetup,ServiceTaxAbatement);
            END;
            IF ((("Account Type" = "Account Type"::"G/L Account") OR ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")) AND
                (("Account Type" = "Account Type"::"Bank Account") OR ("Bal. Account Type" = "Bal. Account Type"::"Bank Account")))
            THEN BEGIN
              IF ("Service Tax Type" = "Service Tax Type"::Sale) AND ("Document Type" = "Document Type"::Payment) THEN
                "Service Tax Base Amount (LCY)" := -ABS(ROUND("Amount (LCY)"));
              IF ("Service Tax Type" = "Service Tax Type"::Purchase) AND ("Document Type" = "Document Type"::Payment) THEN
                "Service Tax Base Amount (LCY)" := ABS(ROUND("Amount (LCY)"));
              IF ("Service Tax Type" = "Service Tax Type"::Sale) AND ("Document Type" = "Document Type"::Refund) THEN
                "Service Tax Base Amount (LCY)" := ABS(ROUND("Amount (LCY)"));
              IF ("Service Tax Type" = "Service Tax Type"::Purchase) AND ("Document Type" = "Document Type"::Refund) THEN
                "Service Tax Base Amount (LCY)" := -ABS(ROUND("Amount (LCY)"));
              CalculateServiceTaxAmounts(ServiceTaxSetup,ServiceTaxAbatement);
            END;
          END;
      END;

      IF NOT ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) OR
         (("Applies-to Doc. No." = '') AND ("Applies-to ID" = ''))
      THEN
        VALIDATE("Input Service Distribution",GetInputServiceDistribution);

      VALIDATE("Applies-to Doc. No.");
      IF "ST Pure Agent" OR ("Nature of Services" IN ["Nature of Services"::Export,"Nature of Services"::Exempted]) THEN
        ClearServiceTaxAmounts;
    END;

    PROCEDURE RoundServiceTaxAmount@1500001(ServiceTaxAmount@1280000 : Decimal) : Decimal;
    VAR
      ServiceTaxEntry@1500000 : Record 16473;
    BEGIN
      ServiceTaxEntry."Service Tax Rounding Precision" := "Service Tax Rounding Precision";
      ServiceTaxEntry."Service Tax Rounding Type" := "Service Tax Rounding Type";
      EXIT(ServiceTaxEntry.RoundAmount(ServiceTaxAmount));
    END;

    LOCAL PROCEDURE InitTCS@1500004();
    BEGIN
      "TDS/TCS %" := 0;
      "Surcharge %" := 0;
      "eCESS %" := 0;
      "SHE Cess % on TDS/TCS" := 0;
      "TDS/TCS Amount" := 0;
      "Surcharge Amount" := 0;
      "TDS/TCS Amt Incl Surcharge" := 0;
      "eCESS on TDS/TCS Amount" := 0;
      "SHE Cess on TDS/TCS Amount" := 0;
      "Total TDS/TCS Incl. SHE CESS" := 0;
      "Bal. TDS/TCS Including SHECESS" := 0;
    END;

    LOCAL PROCEDURE RoundTCSAmount@1500007(TCSAmount@1280000 : Decimal) : Decimal;
    VAR
      TCSRoundingDirection@1280003 : Text[1];
      TCSRoundingPrecision@1280002 : Decimal;
    BEGIN
      ReadGLSetup;
      CASE GLSetup."TCS Rounding Type" OF
        GLSetup."TCS Rounding Type"::Nearest:
          TCSRoundingDirection := '=';
        GLSetup."TCS Rounding Type"::Up:
          TCSRoundingDirection := '>';
        GLSetup."TCS Rounding Type"::Down:
          TCSRoundingDirection := '<';
      END;
      IF GLSetup."TCS Rounding Precision" <> 0 THEN
        TCSRoundingPrecision := GLSetup."TCS Rounding Precision"
      ELSE
        TCSRoundingPrecision := 1;

      EXIT(ROUND(TCSAmount,TCSRoundingPrecision,TCSRoundingDirection));
    END;

    LOCAL PROCEDURE InsertGenTCSBuffer@1500002(Applied@1280000 : Boolean);
    BEGIN
      CLEAR(TCSBuffer[1]);
      TCSBuffer[1]."TCS Nature of Collection" := "TCS Nature of Collection";
      TCSBuffer[1]."Assessee Code" := "Assessee Code";
      TCSBuffer[1]."Party Code" := "Party Code";
      TCSBuffer[1]."Party Type" := "Party Type";
      IF Applied THEN BEGIN
        TCSBuffer[1]."TCS Base Amount" := ABS("Temp TDS/TCS Base");
        TCSBuffer[1]."Surcharge Base Amount" := ABS("Temp TDS/TCS Base");
      END ELSE BEGIN
        TCSBuffer[1]."TCS Base Amount" := TCSBaseLCY;
        TCSBuffer[1]."Surcharge Base Amount" := TCSBaseLCY;
      END;
      TCSBuffer[1]."TCS %" := "TDS/TCS %";
      TCSBuffer[1]."Surcharge %" := "Surcharge %";
      UpdateTCSBuffer;
    END;

    LOCAL PROCEDURE UpdateTCSBuffer@1500003();
    BEGIN
      TCSBuffer[2] := TCSBuffer[1];
      IF TCSBuffer[2].FIND THEN BEGIN
        TCSBuffer[2]."TCS Base Amount" += TCSBuffer[1]."TCS Base Amount";
        TCSBuffer[2]."Surcharge Base Amount" += TCSBuffer[1]."Surcharge Base Amount";
        TCSBuffer[2]."Contract TCS Ded. Base Amount" += TCSBuffer[1]."Contract TCS Ded. Base Amount";
        TCSBuffer[2].MODIFY;
      END ELSE
        TCSBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE InsertTCSBuffer@1500006(TCSEntry@1280003 : Record 16514;PostingDate@1280002 : Date;CalculateSurcharge@1280001 : Boolean;CalcTCS@1280000 : Boolean);
    BEGIN
      WITH TCSEntry DO BEGIN
        TCSBuffer[1].INIT;
        TCSBuffer[1]."TCS Nature of Collection" := "TCS Nature of Collection";
        TCSBuffer[1]."Assessee Code" := "Assessee Code";
        TCSBuffer[1]."Party Code" := "Party Code";
        TCSBuffer[1]."Party Type" := "Party Type";
        IF CalcTCS THEN BEGIN
          TCSBuffer[1]."TCS Base Amount" := "Invoice Amount" + "Service Tax Including eCess";
          IF "Per Contract" THEN
            TCSBuffer[1]."Contract TCS Ded. Base Amount" := "Invoice Amount" + "Service Tax Including eCess";
        END ELSE BEGIN
          TCSBuffer[1]."TCS Base Amount" := 0;
          TCSBuffer[1]."Contract TCS Ded. Base Amount" := 0;
        END;
        IF CalculateSurcharge THEN BEGIN
          TCSBuffer[1]."Surcharge Base Amount" := "Invoice Amount" + "Service Tax Including eCess";
          IF "Per Contract" THEN
            TCSBuffer[1]."Contract TCS Ded. Base Amount" := "Invoice Amount" + "Service Tax Including eCess";
        END ELSE
          TCSBuffer[1]."Surcharge Base Amount" := 0;

        TCSSetup.RESET;
        TCSSetup.SETRANGE("TCS Nature of Collection","TCS Nature of Collection");
        TCSSetup.SETRANGE("Assessee Code","Assessee Code");
        TCSSetup.SETRANGE("Effective Date",0D,PostingDate);

        NOCLine.RESET;
        NOCLine.SETRANGE(Type,"Party Type");
        NOCLine.SETRANGE("No.","Party Code");
        NOCLine.SETRANGE("NOD/NOC","TCS Nature of Collection");
        IF NOCLine.FIND('-') THEN
          IF NOCLine."Concessional Code" <> '' THEN
            TCSSetup.SETRANGE("Concessional Code",NOCLine."Concessional Code")
          ELSE
            TCSSetup.SETRANGE("Concessional Code",'');
        IF TCSSetup.FINDLAST THEN BEGIN
          TCSBuffer[1]."TCS %" := TCSSetup."TCS %";
          TCSBuffer[1]."Surcharge %" := TCSSetup."Surcharge %";
        END;
        UpdateTCSBuffer;
      END;
    END;

    LOCAL PROCEDURE CalculateTCS@1500005();
    VAR
      TCSEntry@1500018 : Record 16514;
      NOCLine@1500017 : Record 13785;
      CustLedgEntry@1500015 : Record 21;
      DateFilterCalc@1500013 : Codeunit 358;
      FiscalYear@1500011 : Boolean;
      AccPeriodFilter@1500010 : Text[30];
      InvoiceAmount@1500009 : Decimal;
      PaymentAmount@1500008 : Decimal;
      PrevInvAmount@1500007 : Decimal;
      PrevTCSAmount@1500006 : Decimal;
      PrevSurchargeAmount@1500005 : Decimal;
      PrevContractAmount@1500004 : Decimal;
      AppliedAmount@1500003 : Decimal;
      TCSAmount@1500002 : Decimal;
      SurchargeBaseAmount@1500001 : Decimal;
      SurchargeAmount@1500000 : Decimal;
    BEGIN
      IF "TCS Nature of Collection" = '' THEN
        EXIT;
      IF Adjustment THEN
        EXIT;
      InitTCS;

      TCSBuffer[1].DELETEALL;
      TCSBuffer[2].DELETEALL;

      NOCLine.RESET;
      NOCLine.SETRANGE(Type,"Party Type");
      NOCLine.SETRANGE("No.","Party Code");
      NOCLine.SETRANGE("NOD/NOC","TCS Nature of Collection");
      IF NOCLine.FINDFIRST THEN BEGIN
        "Concessional Code" := NOCLine."Concessional Code";
        TCSSetup.RESET;
        TCSSetup.SETRANGE("TCS Nature of Collection","TCS Nature of Collection");
        TCSSetup.SETRANGE("Assessee Code","Assessee Code");
        TCSSetup.SETRANGE("TCS Type","TCS Type");
        TCSSetup.SETRANGE("Effective Date",0D,"Posting Date");
        TCSSetup.SETRANGE("Concessional Code",NOCLine."Concessional Code");
        IF NOT TCSSetup.FINDLAST THEN BEGIN
          "TDS/TCS %" := 0;
          "Work Tax %" := 0;
          "Surcharge %" := 0;
          "TDS/TCS Amount" := 0;
          "Surcharge Amount" := 0;
          "Work Tax Amount" := 0;
          "eCESS %" := 0;
          "SHE Cess % on TDS/TCS" := 0;
        END ELSE BEGIN
          IF "Serv. Tax on Advance Payment" THEN
            TCSBaseLCY := ABS(Amount)
          ELSE
            TCSBaseLCY := ABS(Amount) + ABS("Service Tax Amount" + "Service Tax eCess Amount" +
              "Service Tax SHE Cess Amount" + "Service Tax SBC Amount" + "KK Cess Amount");
          IF "Currency Code" <> '' THEN
            TCSBaseLCY := ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  "Posting Date","Currency Code",
                  TCSBaseLCY,"Currency Factor"));

          DateFilterCalc.CreateTCSAccountingDateFilter(AccPeriodFilter,FiscalYear,"Posting Date",0);

          TCSEntry.RESET;
          TCSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TCS Type","Assessee Code","Document Type");
          TCSEntry.SETRANGE("Party Type","Party Type");
          TCSEntry.SETRANGE("Party Code","Party Code");
          TCSEntry.SETFILTER("Posting Date",AccPeriodFilter);
          TCSEntry.SETRANGE("TCS Type","TCS Type");
          TCSEntry.SETRANGE("Assessee Code","Assessee Code");
          TCSEntry.SETRANGE("Document Type",TCSEntry."Document Type"::Invoice);
          TCSEntry.CALCSUMS("Invoice Amount","Service Tax Including eCess");
          InvoiceAmount := ABS(TCSEntry."Invoice Amount") + ABS(TCSEntry."Service Tax Including eCess");

          TCSEntry.SETRANGE("Document Type",TCSEntry."Document Type"::Payment);
          TCSEntry.CALCSUMS("Invoice Amount","Service Tax Including eCess");
          PaymentAmount := ABS(TCSEntry."Invoice Amount") + ABS(TCSEntry."Service Tax Including eCess");

          IF InvoiceAmount > PaymentAmount THEN
            PrevInvAmount := InvoiceAmount
          ELSE
            PrevInvAmount := PaymentAmount;

          TCSEntry.SETRANGE("Document Type");
          TCSEntry.CALCSUMS("TCS Amount","Surcharge Amount");

          PrevTCSAmount := ABS(TCSEntry."TCS Amount");
          PrevSurchargeAmount := ABS(TCSEntry."Surcharge Amount");

          TCSEntry.RESET;
          TCSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TCS Type","Assessee Code",Applied);
          TCSEntry.SETRANGE("Party Type","Party Type");
          TCSEntry.SETRANGE("Party Code","Party Code");
          TCSEntry.SETFILTER("Posting Date",AccPeriodFilter);
          TCSEntry.SETRANGE("TCS Type","TCS Type");
          TCSEntry.SETRANGE("Assessee Code","Assessee Code");
          TCSEntry.SETRANGE(Applied,FALSE);
          TCSEntry.SETRANGE("Per Contract",TRUE);
          TCSEntry.CALCSUMS("Invoice Amount","Service Tax Including eCess");
          PrevContractAmount := ABS(TCSEntry."Invoice Amount") + ABS(TCSEntry."Service Tax Including eCess");

          IF ("Applies-to ID" = '') AND ("Applies-to Doc. No." = '') THEN BEGIN
            IF NOCLine."Threshold Overlook" THEN BEGIN
              "TDS/TCS Base Amount" := TCSBaseLCY;
              "TDS/TCS %" := TCSSetup."TCS %";
              "Surcharge %" := TCSSetup."Surcharge %";
              "eCESS %" := TCSSetup."eCESS %";
              "SHE Cess % on TDS/TCS" := TCSSetup."SHE Cess %";

              IF NOCLine."Surcharge Overlook" THEN
                "Surcharge Base Amount" := "TDS/TCS Base Amount"
              ELSE
                IF PrevInvAmount > TCSSetup."Surcharge Threshold Amount" THEN
                  "Surcharge Base Amount" := "TDS/TCS Base Amount"
                ELSE
                  IF (PrevInvAmount + TCSBaseLCY) > TCSSetup."Surcharge Threshold Amount" THEN BEGIN
                    "Surcharge Base Amount" := PrevInvAmount + TCSBaseLCY;

                    InsertGenTCSBuffer(FALSE);

                    TCSEntry.RESET;
                    TCSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TCS Type","Assessee Code",Applied);
                    TCSEntry.SETRANGE("Party Type","Party Type");
                    TCSEntry.SETRANGE("Party Code","Party Code");
                    TCSEntry.SETFILTER("Posting Date",AccPeriodFilter);
                    TCSEntry.SETRANGE("TCS Type","TCS Type");
                    TCSEntry.SETRANGE("Assessee Code","Assessee Code");
                    TCSEntry.SETRANGE(Applied,FALSE);
                    IF TCSEntry.FIND('-') THEN
                      REPEAT
                        InsertTCSBuffer(TCSEntry,"Posting Date","Surcharge %" <> 0,FALSE);
                      UNTIL TCSEntry.NEXT = 0;
                  END ELSE
                    "Surcharge %" := 0;
            END ELSE
              IF PrevInvAmount > TCSSetup."TCS Threshold Amount" THEN BEGIN
                "TDS/TCS Base Amount" := TCSBaseLCY;
                "TDS/TCS %" := TCSSetup."TCS %";
                "Surcharge %" := TCSSetup."Surcharge %";
                "eCESS %" := TCSSetup."eCESS %";
                "SHE Cess % on TDS/TCS" := TCSSetup."SHE Cess %";

                IF NOCLine."Surcharge Overlook" THEN
                  "Surcharge Base Amount" := TCSBaseLCY
                ELSE
                  IF PrevInvAmount > TCSSetup."Surcharge Threshold Amount" THEN
                    "Surcharge Base Amount" := TCSBaseLCY
                  ELSE
                    IF (PrevInvAmount + TCSBaseLCY) > TCSSetup."Surcharge Threshold Amount" THEN BEGIN
                      "Surcharge Base Amount" := PrevInvAmount + TCSBaseLCY;

                      InsertGenTCSBuffer(FALSE);

                      TCSEntry.RESET;
                      TCSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TCS Type","Assessee Code",Applied);
                      TCSEntry.SETRANGE("Party Type","Party Type");
                      TCSEntry.SETRANGE("Party Code","Party Code");
                      TCSEntry.SETFILTER("Posting Date",AccPeriodFilter);
                      TCSEntry.SETRANGE("TCS Type","TCS Type");
                      TCSEntry.SETRANGE("Assessee Code","Assessee Code");
                      TCSEntry.SETRANGE(Applied,FALSE);
                      IF TCSEntry.FIND('-') THEN
                        REPEAT
                          InsertTCSBuffer(TCSEntry,"Posting Date","Surcharge %" <> 0,FALSE);
                        UNTIL TCSEntry.NEXT = 0;
                    END ELSE
                      "Surcharge %" := 0;
              END ELSE
                IF TCSSetup."Contract Amount" <> 0 THEN BEGIN
                  IF (PrevInvAmount + TCSBaseLCY) > TCSSetup."TCS Threshold Amount" THEN BEGIN
                    "TDS/TCS Base Amount" := PrevInvAmount + TCSBaseLCY - PrevContractAmount;
                    "TDS/TCS %" := TCSSetup."TCS %";
                    "Surcharge %" := TCSSetup."Surcharge %";
                    "eCESS %" := TCSSetup."eCESS %";
                    "SHE Cess % on TDS/TCS" := TCSSetup."SHE Cess %";

                    IF NOCLine."Surcharge Overlook" THEN
                      "Surcharge Base Amount" := ABS(PrevInvAmount + TCSBaseLCY) - PrevContractAmount
                    ELSE
                      IF PrevInvAmount > TCSSetup."Surcharge Threshold Amount" THEN
                        "Surcharge Base Amount" := TCSBaseLCY
                      ELSE
                        IF (PrevInvAmount + TCSBaseLCY) > TCSSetup."Surcharge Threshold Amount" THEN
                          "Surcharge Base Amount" := PrevInvAmount + TCSBaseLCY - PrevContractAmount
                        ELSE
                          "Surcharge %" := 0;

                    InsertGenTCSBuffer(FALSE);

                    TCSEntry.RESET;
                    TCSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TCS Type","Assessee Code",Applied);
                    TCSEntry.SETRANGE("Party Type","Party Type");
                    TCSEntry.SETRANGE("Party Code","Party Code");
                    TCSEntry.SETFILTER("Posting Date",AccPeriodFilter);
                    TCSEntry.SETRANGE("TCS Type","TCS Type");
                    TCSEntry.SETRANGE("Assessee Code","Assessee Code");
                    TCSEntry.SETRANGE(Applied,FALSE);
                    IF TCSEntry.FIND('-') THEN
                      REPEAT
                        InsertTCSBuffer(TCSEntry,"Posting Date","Surcharge %" <> 0,TRUE);
                      UNTIL TCSEntry.NEXT = 0;
                  END ELSE
                    IF TCSBaseLCY > TCSSetup."Contract Amount" THEN BEGIN
                      "Per Contract" := TRUE;
                      "TDS/TCS Base Amount" := TCSBaseLCY;
                      "TDS/TCS %" := TCSSetup."TCS %";
                      "Surcharge %" := TCSSetup."Surcharge %";
                      "eCESS %" := TCSSetup."eCESS %";
                      "SHE Cess % on TDS/TCS" := TCSSetup."SHE Cess %";

                      IF NOCLine."Surcharge Overlook" THEN
                        "Surcharge Base Amount" := TCSBaseLCY
                      ELSE
                        IF TCSBaseLCY > TCSSetup."Surcharge Threshold Amount" THEN
                          "Surcharge Base Amount" := TCSBaseLCY
                        ELSE
                          "Surcharge %" := 0;
                    END ELSE BEGIN
                      "TDS/TCS Base Amount" := TCSBaseLCY;
                      "TDS/TCS %" := 0;
                      "eCESS %" := 0;
                      "SHE Cess % on TDS/TCS" := 0;
                    END;
                END ELSE
                  IF (PrevInvAmount + TCSBaseLCY) > TCSSetup."TCS Threshold Amount" THEN BEGIN
                    "TDS/TCS Base Amount" := PrevInvAmount + TCSBaseLCY;
                    "Surcharge Base Amount" := TCSBaseLCY;
                    "TDS/TCS %" := TCSSetup."TCS %";
                    "Surcharge %" := TCSSetup."Surcharge %";
                    "eCESS %" := TCSSetup."eCESS %";
                    "SHE Cess % on TDS/TCS" := TCSSetup."SHE Cess %";

                    IF (PrevInvAmount + TCSBaseLCY) > TCSSetup."Surcharge Threshold Amount" THEN
                      "Surcharge Base Amount" := PrevInvAmount + TCSBaseLCY
                    ELSE
                      IF NOT NOCLine."Surcharge Overlook" THEN
                        "Surcharge %" := 0;

                    InsertGenTCSBuffer(FALSE);
                    TCSEntry.RESET;
                    TCSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TCS Type","Assessee Code",Applied);
                    TCSEntry.SETRANGE("Party Type","Party Type");
                    TCSEntry.SETRANGE("Party Code","Party Code");
                    TCSEntry.SETFILTER("Posting Date",AccPeriodFilter);
                    TCSEntry.SETRANGE("TCS Type","TCS Type");
                    TCSEntry.SETRANGE("Assessee Code","Assessee Code");
                    TCSEntry.SETRANGE(Applied,FALSE);
                    IF TCSEntry.FIND('-') THEN
                      REPEAT
                        InsertTCSBuffer(TCSEntry,"Posting Date","Surcharge %" <> 0,TRUE);
                      UNTIL TCSEntry.NEXT = 0;
                  END ELSE BEGIN
                    "TDS/TCS Base Amount" := TCSBaseLCY;
                    "TDS/TCS %" := 0;
                    "eCESS %" := 0;
                    "SHE Cess % on TDS/TCS" := 0;
                  END;
          END ELSE BEGIN
            IF "Party Type" = "Party Type"::Customer THEN BEGIN
              IF "Applies-to Doc. No." <> '' THEN BEGIN
                CustLedgEntry.RESET;
                CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                CustLedgEntry.SETRANGE("TCS Nature of Collection","TCS Nature of Collection");
                CustLedgEntry.SETRANGE("TCS Type","TCS Type");
                IF CustLedgEntry.FIND('-') THEN
                  CustLedgEntry.CALCFIELDS("Remaining Amt. (LCY)");
                IF TCSBaseLCY >= ABS(CustLedgEntry."Remaining Amt. (LCY)") THEN BEGIN
                  IF TCSSetup."Contract Amount" <> 0 THEN BEGIN
                    IF PrevTCSAmount = 0 THEN
                      "TDS/TCS Base Amount" := PrevInvAmount + TCSBaseLCY -
                        ABS(CustLedgEntry."Remaining Amt. (LCY)")
                    ELSE
                      IF PrevContractAmount <> 0 THEN
                        "TDS/TCS Base Amount" := TCSBaseLCY -
                          ABS(CustLedgEntry."Remaining Amt. (LCY)") +
                          (PrevInvAmount - PrevContractAmount)
                      ELSE
                        "TDS/TCS Base Amount" := TCSBaseLCY -
                          ABS(CustLedgEntry."Remaining Amt. (LCY)");

                    IF PrevSurchargeAmount = 0 THEN
                      "Surcharge Base Amount" := PrevInvAmount + TCSBaseLCY -
                        ABS(CustLedgEntry."Remaining Amt. (LCY)")
                    ELSE
                      IF PrevContractAmount <> 0 THEN
                        "Surcharge Base Amount" := TCSBaseLCY -
                          ABS(CustLedgEntry."Remaining Amt. (LCY)") +
                          (PrevInvAmount - PrevContractAmount)
                      ELSE
                        "Surcharge Base Amount" := TCSBaseLCY -
                          ABS(CustLedgEntry."Remaining Amt. (LCY)");
                  END ELSE BEGIN
                    IF PrevTCSAmount = 0 THEN
                      "TDS/TCS Base Amount" := PrevInvAmount + TCSBaseLCY -
                        ABS(CustLedgEntry."Remaining Amt. (LCY)")
                    ELSE
                      "TDS/TCS Base Amount" := TCSBaseLCY -
                        ABS(CustLedgEntry."Remaining Amt. (LCY)");
                    IF PrevSurchargeAmount = 0 THEN
                      "Surcharge Base Amount" := PrevInvAmount + TCSBaseLCY -
                        ABS(CustLedgEntry."Remaining Amt. (LCY)")
                    ELSE
                      "Surcharge Base Amount" := TCSBaseLCY -
                        ABS(CustLedgEntry."Remaining Amt. (LCY)");
                  END;
                  "Temp TDS/TCS Base" := TCSBaseLCY - ABS(CustLedgEntry."Remaining Amt. (LCY)");
                END ELSE BEGIN
                  "TDS/TCS Base Amount" := 0;
                  "Surcharge Base Amount" := 0;
                  "Temp TDS/TCS Base" := 0;
                END;
              END;

              IF "Applies-to ID" <> '' THEN BEGIN
                CustLedgEntry.RESET;
                CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
                CustLedgEntry.SETRANGE("TCS Nature of Collection","TCS Nature of Collection");
                CustLedgEntry.SETRANGE("TCS Type","TCS Type");
                IF CustLedgEntry.FIND('-') THEN BEGIN
                  REPEAT
                    CustLedgEntry.CALCFIELDS("Remaining Amt. (LCY)");
                    AppliedAmount += ABS(CustLedgEntry."Remaining Amt. (LCY)");
                  UNTIL CustLedgEntry.NEXT = 0;

                  IF ABS(Amount) >= AppliedAmount THEN BEGIN
                    IF TCSSetup."Contract Amount" <> 0 THEN BEGIN
                      IF PrevTCSAmount = 0 THEN
                        "TDS/TCS Base Amount" := PrevInvAmount + TCSBaseLCY - AppliedAmount
                      ELSE
                        IF PrevContractAmount <> 0 THEN
                          "TDS/TCS Base Amount" := TCSBaseLCY - AppliedAmount + (PrevInvAmount - PrevContractAmount)
                        ELSE
                          "TDS/TCS Base Amount" := TCSBaseLCY - AppliedAmount;

                      IF PrevSurchargeAmount = 0 THEN
                        "Surcharge Base Amount" := PrevInvAmount + TCSBaseLCY - AppliedAmount
                      ELSE
                        IF PrevContractAmount <> 0 THEN
                          "Surcharge Base Amount" := TCSBaseLCY - AppliedAmount + (PrevInvAmount - PrevContractAmount)
                        ELSE
                          "Surcharge Base Amount" := TCSBaseLCY - AppliedAmount;
                    END ELSE BEGIN
                      IF PrevTCSAmount = 0 THEN
                        "TDS/TCS Base Amount" := PrevInvAmount + TCSBaseLCY - AppliedAmount
                      ELSE
                        "TDS/TCS Base Amount" := TCSBaseLCY - AppliedAmount ;
                      IF PrevSurchargeAmount = 0 THEN
                        "Surcharge Base Amount" := PrevInvAmount + TCSBaseLCY - AppliedAmount
                      ELSE
                        "Surcharge Base Amount" := TCSBaseLCY - AppliedAmount;
                    END;
                    "Temp TDS/TCS Base" := TCSBaseLCY - AppliedAmount;
                  END ELSE BEGIN
                    "TDS/TCS Base Amount" := 0;
                    "Surcharge Base Amount" := 0;
                    "Temp TDS/TCS Base" := 0;
                  END;
                END;
              END;
            END;

            IF NOCLine."Threshold Overlook" THEN BEGIN
              "TDS/TCS Base Amount" := "TDS/TCS Base Amount";
              "TDS/TCS %" := TCSSetup."TCS %";
              "Surcharge %" := TCSSetup."Surcharge %";
              "eCESS %" := TCSSetup."eCESS %";
              "SHE Cess % on TDS/TCS" := TCSSetup."SHE Cess %";

              IF NOCLine."Surcharge Overlook" THEN
                "Surcharge Base Amount" := ABS("TDS/TCS Base Amount")
              ELSE
                IF PrevInvAmount > TCSSetup."Surcharge Threshold Amount" THEN BEGIN
                  "Surcharge Base Amount" := ABS("TDS/TCS Base Amount");
                  PrevSurchargeAmount := 0;
                END ELSE
                  IF ABS("Surcharge Base Amount") > TCSSetup."Surcharge Threshold Amount" THEN BEGIN
                    "Surcharge Base Amount" := ABS("Surcharge Base Amount");

                    InsertGenTCSBuffer(TRUE);

                    TCSEntry.RESET;
                    TCSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TCS Type","Assessee Code",Applied);
                    TCSEntry.SETRANGE("Party Type","Party Type");
                    TCSEntry.SETRANGE("Party Code","Party Code");
                    TCSEntry.SETFILTER("Posting Date",AccPeriodFilter);
                    TCSEntry.SETRANGE("TCS Type","TCS Type");
                    TCSEntry.SETRANGE("Assessee Code","Assessee Code");
                    TCSEntry.SETRANGE(Applied,FALSE);
                    IF TCSEntry.FIND('-') THEN
                      REPEAT
                        InsertTCSBuffer(TCSEntry,"Posting Date","Surcharge %" <> 0,FALSE);
                      UNTIL TCSEntry.NEXT = 0;
                  END ELSE BEGIN
                    "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                    "Surcharge %" := 0;
                    "Surcharge Amount" := 0;
                  END;
            END ELSE
              IF PrevInvAmount > TCSSetup."TCS Threshold Amount" THEN BEGIN
                "TDS/TCS Base Amount" := "TDS/TCS Base Amount";
                "TDS/TCS %" := TCSSetup."TCS %";
                "Surcharge %" := TCSSetup."Surcharge %";
                "eCESS %" := TCSSetup."eCESS %";
                "SHE Cess % on TDS/TCS" := TCSSetup."SHE Cess %";

                IF NOCLine."Surcharge Overlook" THEN
                  "Surcharge Base Amount" := ABS("TDS/TCS Base Amount")
                ELSE
                  IF PrevInvAmount > TCSSetup."Surcharge Threshold Amount" THEN BEGIN
                    "Surcharge Base Amount" := ABS("TDS/TCS Base Amount");
                    PrevSurchargeAmount := 0;
                  END ELSE
                    IF ABS("Surcharge Base Amount") > TCSSetup."Surcharge Threshold Amount" THEN BEGIN
                      "Surcharge Base Amount" := ABS("Surcharge Base Amount");

                      InsertGenTCSBuffer(TRUE);
                      TCSEntry.RESET;
                      TCSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TCS Type","Assessee Code",Applied);
                      TCSEntry.SETRANGE("Party Type","Party Type");
                      TCSEntry.SETRANGE("Party Code","Party Code");
                      TCSEntry.SETFILTER("Posting Date",AccPeriodFilter);
                      TCSEntry.SETRANGE("TCS Type","TCS Type");
                      TCSEntry.SETRANGE("Assessee Code","Assessee Code");
                      TCSEntry.SETRANGE(Applied,FALSE);
                      IF TCSEntry.FIND('-') THEN
                        REPEAT
                          InsertTCSBuffer(TCSEntry,"Posting Date","Surcharge %" <> 0,FALSE);
                        UNTIL TCSEntry.NEXT = 0;
                    END ELSE BEGIN
                      "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                      "Surcharge %" := 0;
                      "Surcharge Amount" := 0;
                    END;
              END ELSE
                IF TCSSetup."Contract Amount" <> 0 THEN BEGIN
                  IF (ABS("TDS/TCS Base Amount") + PrevContractAmount) > TCSSetup."TCS Threshold Amount" THEN BEGIN
                    "TDS/TCS %" := TCSSetup."TCS %";
                    "eCESS %" := TCSSetup."eCESS %";
                    "SHE Cess % on TDS/TCS" := TCSSetup."SHE Cess %";
                    "Surcharge %" := TCSSetup."Surcharge %";

                    IF NOCLine."Surcharge Overlook" THEN
                      "Surcharge Base Amount" := ABS("TDS/TCS Base Amount")
                    ELSE
                      IF PrevInvAmount > TCSSetup."Surcharge Threshold Amount" THEN BEGIN
                        "Surcharge Base Amount" := ABS("TDS/TCS Base Amount");
                        PrevSurchargeAmount := 0;
                      END ELSE
                        IF ABS("Surcharge Base Amount") > TCSSetup."Surcharge Threshold Amount" THEN
                          "Surcharge Base Amount" := ABS("Surcharge Base Amount")
                        ELSE BEGIN
                          "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                          "Surcharge %" := 0;
                          "Surcharge Amount" := 0;
                        END;

                    InsertGenTCSBuffer(TRUE);

                    TCSEntry.RESET;
                    TCSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TCS Type","Assessee Code",Applied);
                    TCSEntry.SETRANGE("Party Type","Party Type");
                    TCSEntry.SETRANGE("Party Code","Party Code");
                    TCSEntry.SETFILTER("Posting Date",AccPeriodFilter);
                    TCSEntry.SETRANGE("TCS Type","TCS Type");
                    TCSEntry.SETRANGE("Assessee Code","Assessee Code");
                    TCSEntry.SETRANGE(Applied,FALSE);
                    IF TCSEntry.FIND('-') THEN
                      REPEAT
                        InsertTCSBuffer(TCSEntry,"Posting Date","Surcharge %" <> 0,TRUE);
                      UNTIL TCSEntry.NEXT = 0;
                  END ELSE
                    IF ABS("TDS/TCS Base Amount") > TCSSetup."Contract Amount" THEN BEGIN
                      "Per Contract" := TRUE;
                      "TDS/TCS %" := TCSSetup."TCS %";
                      "Surcharge %" := TCSSetup."Surcharge %";
                      "eCESS %" := TCSSetup."eCESS %";
                      "SHE Cess % on TDS/TCS" := TCSSetup."SHE Cess %";

                      IF NOCLine."Surcharge Overlook" THEN
                        "Surcharge Base Amount" := TCSBaseLCY
                      ELSE
                        IF TCSBaseLCY > TCSSetup."Surcharge Threshold Amount" THEN
                          "Surcharge Base Amount" := TCSBaseLCY
                        ELSE
                          "Surcharge %" := 0;
                    END ELSE BEGIN
                      "TDS/TCS Base Amount" := ABS("TDS/TCS Base Amount");
                      "TDS/TCS %" := 0;
                      "eCESS %" := 0;
                      "SHE Cess % on TDS/TCS" := 0;
                      "Surcharge %" := 0;
                      "Surcharge Amount" := 0;
                      "TDS/TCS Amount" := 0;
                      "TDS/TCS Amt Incl Surcharge" := 0;
                    END;
                END ELSE
                  IF ABS("TDS/TCS Base Amount") > TCSSetup."TCS Threshold Amount" THEN BEGIN
                    "TDS/TCS %" := TCSSetup."TCS %";
                    "Surcharge %" := TCSSetup."Surcharge %";
                    "eCESS %" := TCSSetup."eCESS %";
                    "SHE Cess % on TDS/TCS" := TCSSetup."SHE Cess %";

                    IF NOCLine."Surcharge Overlook" THEN
                      "Surcharge Base Amount" := ABS("TDS/TCS Base Amount")
                    ELSE
                      IF PrevInvAmount > TCSSetup."Surcharge Threshold Amount" THEN BEGIN
                        "Surcharge Base Amount" := ABS("TDS/TCS Base Amount");
                        PrevSurchargeAmount := 0;
                      END ELSE
                        IF ABS("Surcharge Base Amount") > TCSSetup."Surcharge Threshold Amount" THEN
                          "Surcharge Base Amount" := ABS("Surcharge Base Amount")
                        ELSE BEGIN
                          "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                          "Surcharge %" := 0;
                          "Surcharge Amount" := 0;
                        END;

                    InsertGenTCSBuffer(TRUE);
                    TCSEntry.RESET;
                    TCSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TCS Type","Assessee Code",Applied);
                    TCSEntry.SETRANGE("Party Type","Party Type");
                    TCSEntry.SETRANGE("Party Code","Party Code");
                    TCSEntry.SETFILTER("Posting Date",AccPeriodFilter);
                    TCSEntry.SETRANGE("TCS Type","TCS Type");
                    TCSEntry.SETRANGE("Assessee Code","Assessee Code");
                    TCSEntry.SETRANGE(Applied,FALSE);
                    IF TCSEntry.FIND('-') THEN
                      REPEAT
                        InsertTCSBuffer(TCSEntry,"Posting Date","Surcharge %" <> 0,TRUE);
                      UNTIL TCSEntry.NEXT = 0;
                  END ELSE BEGIN
                    "TDS/TCS Base Amount" := ABS("TDS/TCS Base Amount");
                    "Surcharge Base Amount" := ABS("Surcharge Base Amount");
                    "TDS/TCS %" := 0;
                    "eCESS %" := 0;
                    "SHE Cess % on TDS/TCS" := 0;
                    "Surcharge %" := 0;
                    "Surcharge Amount" := 0;
                    "TDS/TCS Amount" := 0;
                    "TDS/TCS Amt Incl Surcharge" := 0;
                  END;
          END;

          IF Amount <> 0 THEN BEGIN
            IF Amount < 0 THEN BEGIN
              "TDS/TCS Base Amount" := -"TDS/TCS Base Amount";
              "Surcharge Base Amount" := -"Surcharge Base Amount";
            END;

            IF TCSBuffer[1].FIND('+') THEN BEGIN
              REPEAT
                TCSAmount += ((TCSBuffer[1]."TCS Base Amount" - TCSBuffer[1]."Contract TCS Ded. Base Amount") *
                              TCSBuffer[1]."TCS %" / 100);
                SurchargeBaseAmount += ((TCSBuffer[1]."TCS %" *
                                         (TCSBuffer[1]."Surcharge Base Amount" - TCSBuffer[1]."Contract TCS Ded. Base Amount") / 100));
                SurchargeAmount += (TCSBuffer[1]."TCS %" *
                                    (TCSBuffer[1]."Surcharge Base Amount" - TCSBuffer[1]."Contract TCS Ded. Base Amount") / 100)
                  * (TCSBuffer[1]."Surcharge %" / 100);
              UNTIL TCSBuffer[1].NEXT(-1) = 0;

              IF Amount < 0 THEN BEGIN
                "TDS/TCS Amount" := -RoundTCSAmount(TCSAmount);
                "Surcharge Amount" := -RoundTCSAmount(SurchargeAmount);
              END ELSE BEGIN
                "TDS/TCS Amount" := RoundTCSAmount(TCSAmount);
                "Surcharge Amount" := RoundTCSAmount(SurchargeAmount);
              END;

              IF "TDS/TCS Base Amount" <> 0 THEN
                "TDS/TCS %" := ABS(ROUND(TCSAmount * 100 / "TDS/TCS Base Amount"));
              IF SurchargeBaseAmount <> 0 THEN
                "Surcharge %" := ABS(ROUND(SurchargeAmount * 100 / SurchargeBaseAmount));
            END ELSE BEGIN
              "TDS/TCS Amount" := RoundTCSAmount("TDS/TCS %" * "TDS/TCS Base Amount" / 100);
              "Surcharge Amount" := RoundTCSAmount(("TDS/TCS %" * "Surcharge Base Amount" / 100) * ("Surcharge %" / 100));
            END;

            IF ("Document Type" = "Document Type"::Payment) AND ("Applies-to Doc. No." = '') AND
               ("Applies-to ID" = '')
            THEN
              TCSGrossingup("TDS/TCS Base Amount","Surcharge Base Amount",
                "TDS/TCS %","Surcharge %","eCESS %","TDS/TCS Amount","Surcharge Amount","eCESS on TDS/TCS Amount",
                "SHE Cess % on TDS/TCS","SHE Cess on TDS/TCS Amount");

            "TDS/TCS Amt Incl Surcharge" := "TDS/TCS Amount" + "Surcharge Amount";
            "eCESS on TDS/TCS Amount" := RoundTCSAmount("TDS/TCS Amt Incl Surcharge" * "eCESS %" / 100);
            "SHE Cess on TDS/TCS Amount" := RoundTCSAmount("TDS/TCS Amt Incl Surcharge" * "SHE Cess % on TDS/TCS" / 100);
            "Total TDS/TCS Incl. SHE CESS" := "TDS/TCS Amount" + "Surcharge Amount" + "eCESS on TDS/TCS Amount" +
              "SHE Cess on TDS/TCS Amount";

            IF "Currency Code" <> '' THEN BEGIN
              "TDS/TCS Amount" := ExchangeAmtLCYToFCY("TDS/TCS Amount",TRUE);
              "Surcharge Amount" := ExchangeAmtLCYToFCY("Surcharge Amount",TRUE);
              "TDS/TCS Amt Incl Surcharge" := ExchangeAmtLCYToFCY("TDS/TCS Amt Incl Surcharge",TRUE);
              "eCESS on TDS/TCS Amount" := ExchangeAmtLCYToFCY("eCESS on TDS/TCS Amount",TRUE);
              "SHE Cess on TDS/TCS Amount" := ExchangeAmtLCYToFCY("SHE Cess on TDS/TCS Amount",TRUE);
              "Total TDS/TCS Incl. SHE CESS" := ExchangeAmtLCYToFCY("Total TDS/TCS Incl. SHE CESS",TRUE);
              "Bal. TDS/TCS Including SHECESS" := "Total TDS/TCS Incl. SHE CESS";
              "Balance Surcharge Amount" := "Surcharge Amount";
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE TCSGrossingup@1500008(VAR TCSBaseAmount@1500000 : Decimal;VAR SurchargeBaseAmount@1500001 : Decimal;TCSPercentage@1500003 : Decimal;SurchargePercentage@1500004 : Decimal;eCessPercentage@1500005 : Decimal;VAR TCSAmount@1500007 : Decimal;VAR SurchargeAmount@1500008 : Decimal;VAR eCessAmount@1500009 : Decimal;SHECessPercentage@1500010 : Decimal;VAR SHECessAmount@1500011 : Decimal);
    VAR
      TotalPercentage@1500006 : Decimal;
      TempTCSBaseAmount@1500002 : Decimal;
    BEGIN
      TempTCSBaseAmount := TCSBaseAmount;
      TotalPercentage := TCSPercentage + (TCSPercentage * SurchargePercentage / 100) +
        (TCSPercentage + (TCSPercentage * SurchargePercentage / 100)) *
        (eCessPercentage + SHECessPercentage) / 100;
      TCSBaseAmount -= RoundTCSAmount((TCSBaseAmount * TotalPercentage) / (100 + TotalPercentage));
      TCSAmount := RoundTCSAmount(TCSBaseAmount * TCSPercentage / 100);
      SurchargeAmount := RoundTCSAmount(TCSAmount * SurchargePercentage / 100);
      eCessAmount := RoundTCSAmount((TCSAmount + SurchargeAmount) * eCessPercentage / 100);
      SHECessAmount := RoundTCSAmount((TCSAmount + SurchargeAmount) * SHECessPercentage / 100);
      TCSBaseAmount := TempTCSBaseAmount - (TCSAmount + SurchargeAmount + eCessAmount + SHECessAmount);
      SurchargeBaseAmount := TCSBaseAmount;
    END;

    PROCEDURE DeleteGenJnlNarration@1500009();
    VAR
      GenJnlNarration@1500000 : Record 16549;
    BEGIN
      GenJnlNarration.SETRANGE("Journal Template Name","Journal Template Name");
      GenJnlNarration.SETRANGE("Journal Batch Name","Journal Batch Name");
      GenJnlNarration.SETRANGE("Document No.","Document No.");
      GenJnlNarration.SETRANGE("Gen. Journal Line No.","Line No.");
      GenJnlNarration.DELETEALL;

      GenJnlLine.RESET;
      GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      GenJnlLine.SETRANGE("Document No.","Document No.");
      IF GenJnlLine.COUNT = 1 THEN BEGIN
        GenJnlNarration.SETRANGE("Gen. Journal Line No.",0);
        GenJnlNarration.DELETEALL;
      END;
    END;

    PROCEDURE CheckValidations@1500011(Amount1@1500000 : Decimal;Amount2@1500001 : Decimal;Text1@1500002 : Text[30];Text2@1500003 : Text[30]);
    BEGIN
      ExciseValidation.SetDocNo("Document No.");
      ExciseValidation.GetRecord(Rec);
      ExciseValidation.CalcExcise2("E.C.C. No.",Amount1,Text1);
      ExciseValidation.CalcExcise2("E.C.C. No.",Amount2,Text2);
    END;

    LOCAL PROCEDURE ValidateSTAmountForAdvPayment@1500010();
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
    BEGIN
      IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
        EXIT;
      CopySTRoundingValues;
      IF "Account Type" = "Account Type"::Vendor THEN BEGIN
        "Service Tax Type" := "Service Tax Type"::Purchase;
        "Service Tax Entry" := FALSE;
      END;
      IF "Account Type" = "Account Type"::Customer THEN BEGIN
        "Service Tax Type" := "Service Tax Type"::Sale;
        "Service Tax Entry" := TRUE;
      END;
      IF ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date") THEN BEGIN
        IF xRec."Service Tax Base Amount (LCY)" = "Service Tax Base Amount (LCY)" THEN
          CalcBackAdvPaymentServTax(ServiceTaxSetup);
        VALIDATE("Input Service Distribution",GetInputServiceDistribution);
      END;

      IF "ST Pure Agent" OR ("Nature of Services" IN ["Nature of Services"::Export,"Nature of Services"::Exempted]) THEN BEGIN
        ClearServiceTaxAmounts;
        "Service Tax Base Amount (LCY)" := "Amount (LCY)";
      END;
    END;

    LOCAL PROCEDURE GetInputServiceDistribution@1500033() : Boolean;
    VAR
      Location@1500002 : Record 14;
      CompanyInfo@1500001 : Record 79;
      InputServiceDistribution@1500000 : Boolean;
    BEGIN
      IF "Location Code" <> '' THEN BEGIN
        Location.GET("Location Code");
        InputServiceDistribution := Location."Input Service Distributor";
      END ELSE BEGIN
        CompanyInfo.GET;
        InputServiceDistribution := CompanyInfo."Input Service Distributor";
      END;
      EXIT(InputServiceDistribution AND ("Service Tax Amount" <> 0))
    END;

    PROCEDURE DelExcCenvatClaimDetail@1500014();
    BEGIN
      ExCenvatClaimDetail.RESET;
      ExCenvatClaimDetail.SETCURRENTKEY("Pay Doc. No.","Journal Template Name","Journal Batch Name","Duty Code No.");
      ExCenvatClaimDetail.SETRANGE("Pay Doc. No.","Document No.");
      ExCenvatClaimDetail.SETRANGE("Journal Template Name","Journal Template Name");
      ExCenvatClaimDetail.SETRANGE("Journal Batch Name","Journal Batch Name");
      ExCenvatClaimDetail.DELETEALL;
    END;

    PROCEDURE CopySTRoundingValues@1500015();
    BEGIN
      IF (FieldNum = FIELDNO("Service Tax Rounding Precision")) OR
         (FieldNum = FIELDNO("Service Tax Rounding Type")) OR
         ("Transaction No. Serv. Tax" <> 0)
      THEN BEGIN
        FieldNum := 0;
        EXIT;
      END;
      ReadGLSetup;
      "Service Tax Rounding Precision" := GLSetup."Service Tax Rounding Precision";
      "Service Tax Rounding Type" := GLSetup."Service Tax Rounding Type";
      FieldNum := 0;
    END;

    PROCEDURE CheckToCalcST@1210090003() : Boolean;
    VAR
      GLAccount@1210090002 : Record 15;
    BEGIN
      IF ("Journal Template Name" = '') OR ("Journal Batch Name" = '') OR ("Bal. Account No." <> '') OR
         ("Account Type" <> "Account Type"::"G/L Account") OR
         (NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]))
      THEN
        EXIT(FALSE);
      IF GLAccount.GET("Account No.") THEN;
      IF GLAccount."Service Tax Group Code" = '' THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE CalculateJnlPreviousAmt@1500197() : Decimal;
    VAR
      GenJnlLine2@1000 : Record 81;
      DateFilterCalc@1002 : Codeunit 358;
      PreviousAmt@1001 : Decimal;
      AccountingPeriodFilter@1003 : Text[30];
      FiscalYear@1004 : Boolean;
    BEGIN
      DateFilterCalc.CreateTDSAccountingDateFilter(AccountingPeriodFilter,FiscalYear,"Posting Date",0);
      GenJnlLine2.RESET;
      GenJnlLine2.SETFILTER("Journal Template Name",'<>%1','');
      GenJnlLine2.SETFILTER("Journal Batch Name",'<>%1','');
      GenJnlLine2.SETFILTER("TDS Nature of Deduction",'<>%1','');
      GenJnlLine2.SETRANGE("Party Type","Party Type");
      GenJnlLine2.SETRANGE("Party Code","Party Code");
      GenJnlLine2.SETFILTER("Posting Date",AccountingPeriodFilter);
      GenJnlLine2.SETRANGE("TDS Group","TDS Group");
      GenJnlLine2.SETRANGE("Assessee Code","Assessee Code");
      IF GenJnlLine2.FINDSET THEN
        REPEAT
          IF ((GenJnlLine2."Journal Template Name" = "Journal Template Name") AND
              (GenJnlLine2."Journal Batch Name" = "Journal Batch Name") AND
              (GenJnlLine2."Line No." < "Line No."))
          THEN BEGIN
            PreviousAmt += ABS(GenJnlLine2."Amount (LCY)") - ABS(GenJnlLine2."Applied TDS Base Amount");
            IF (GenJnlLine2."Service Tax Amount" <> 0) AND (GenJnlLine2."Document Type" = GenJnlLine2."Document Type"::Payment) AND
               (NOT GenJnlLine2."Include Serv. Tax in TDS Base")
            THEN
              PreviousAmt -= (GenJnlLine2."Service Tax Amount" + GenJnlLine2."Service Tax eCess Amount" +
                              GenJnlLine2."Service Tax SHE Cess Amount" + GenJnlLine2."Service Tax SBC Amount" +
                              GenJnlLine2."KK Cess Amount");
            IF (GenJnlLine2."Service Tax Amount" <> 0) AND (GenJnlLine2."Document Type" = GenJnlLine2."Document Type"::Invoice) AND
               GenJnlLine2."Include Serv. Tax in TDS Base"
            THEN
              PreviousAmt += (GenJnlLine2."Service Tax Amount" + GenJnlLine2."Service Tax eCess Amount" +
                              GenJnlLine2."Service Tax SHE Cess Amount" + GenJnlLine2."Service Tax SBC Amount" +
                              GenJnlLine2."KK Cess Amount");
            IF GenJnlLine2."TDS/TCS Amount" <> 0 THEN
              PreviousJnlTDSCalculated += ABS(GenJnlLine2."TDS/TCS Base Amount");
          END ELSE
            IF (GenJnlLine2."Journal Template Name" <> "Journal Template Name") OR
               (GenJnlLine2."Journal Batch Name" <> "Journal Batch Name")
            THEN BEGIN
              PreviousAmt += ABS(GenJnlLine2."Amount (LCY)") - ABS(GenJnlLine2."Applied TDS Base Amount");
              IF (GenJnlLine2."Service Tax Amount" <> 0) AND (GenJnlLine2."Document Type" = GenJnlLine2."Document Type"::Payment) AND
                 (NOT GenJnlLine2."Include Serv. Tax in TDS Base")
              THEN
                PreviousAmt -= (GenJnlLine2."Service Tax Amount" + GenJnlLine2."Service Tax eCess Amount" +
                                GenJnlLine2."Service Tax SHE Cess Amount" + GenJnlLine2."Service Tax SBC Amount" +
                                GenJnlLine2."KK Cess Amount");
              IF (GenJnlLine2."Service Tax Amount" <> 0) AND (GenJnlLine2."Document Type" = GenJnlLine2."Document Type"::Invoice) AND
                 GenJnlLine2."Include Serv. Tax in TDS Base"
              THEN
                PreviousAmt += (GenJnlLine2."Service Tax Amount" + GenJnlLine2."Service Tax eCess Amount" +
                                GenJnlLine2."Service Tax SHE Cess Amount" + GenJnlLine2."Service Tax SBC Amount" +
                                GenJnlLine2."KK Cess Amount");
              IF GenJnlLine2."TDS/TCS Amount" <> 0 THEN
                PreviousJnlTDSCalculated += ABS(GenJnlLine2."TDS/TCS Base Amount");
            END;
        UNTIL GenJnlLine2.NEXT = 0;
      EXIT(PreviousAmt);
    END;

    LOCAL PROCEDURE InsertJnlTDSBuf@1500016(PreviousJnlAmount@1500000 : Decimal);
    BEGIN
      CLEAR(TDSBuf[1]);
      TDSBuf[1]."TDS Nature of Deduction" := "TDS Nature of Deduction";
      TDSBuf[1]."Assessee Code" := "Assessee Code";
      TDSBuf[1]."Party Code" := "Party Code";
      TDSBuf[1]."Party Type" := "Party Type";
      TDSBuf[1]."TDS Base Amount" := PreviousJnlAmount;
      TDSBuf[1]."Surcharge Base Amount" := PreviousJnlAmount;
      TDSBuf[1]."TDS %" := "TDS/TCS %";
      TDSBuf[1]."Surcharge %" := "Surcharge %";
      UpdTDSBuffer;
    END;

    PROCEDURE SetPreviousTDSAmt@1500012(PreviousJnlTDSCalculated2@1500000 : Decimal);
    BEGIN
      PreviousJnlTDSCalculated := PreviousJnlTDSCalculated2;
    END;

    PROCEDURE CalcTDS@1500013(DocNo@1500001 : Code[20]);
    VAR
      GenJnlLine2@1500000 : Record 81;
    BEGIN
      GenJnlLine2.RESET;
      GenJnlLine2.SETRANGE("Journal Template Name","Journal Template Name");
      GenJnlLine2.SETRANGE("Journal Batch Name","Journal Batch Name");
      IF DocNo <> '' THEN
        GenJnlLine2.SETRANGE("Document No.",DocNo);
      IF GenJnlLine2.FINDSET THEN
        REPEAT
          GenJnlLine2.CalculateTDS;
          GenJnlLine2.MODIFY;
        UNTIL GenJnlLine2.NEXT = 0;
    END;

    PROCEDURE UpdatePoT@1500017();
    BEGIN
      ReadGLSetup;
      PoT := ("Service Tax Group Code" <> '') AND GLSetup.PoT AND NOT "Input Service Distribution";
    END;

    PROCEDURE GetCustLedgerEntry@33();
    BEGIN
      IF ("Account Type" = "Account Type"::Customer) AND ("Account No." = '') AND
         ("Applies-to Doc. No." <> '') AND (Amount = 0)
      THEN BEGIN
        CustLedgEntry.RESET;
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        CustLedgEntry.SETRANGE(Open,TRUE);
        IF NOT CustLedgEntry.FINDFIRST THEN
          ERROR(NotExistErr,"Applies-to Doc. No.");

        VALIDATE("Account No.",CustLedgEntry."Customer No.");
        CustLedgEntry.CALCFIELDS("Remaining Amount");

        IF "Posting Date" <= CustLedgEntry."Pmt. Discount Date" THEN
          Amount := -(CustLedgEntry."Remaining Amount" - CustLedgEntry."Remaining Pmt. Disc. Possible")
        ELSE
          Amount := -CustLedgEntry."Remaining Amount";

        IF "Currency Code" <> CustLedgEntry."Currency Code" THEN BEGIN
          FromCurrencyCode := GetShowCurrencyCode("Currency Code");
          ToCurrencyCode := GetShowCurrencyCode(CustLedgEntry."Currency Code");
          IF NOT
             CONFIRM(
               Text003,TRUE,
               FIELDCAPTION("Currency Code"),TABLECAPTION,FromCurrencyCode,
               ToCurrencyCode)
          THEN
            ERROR(Text005);
          VALIDATE("Currency Code",CustLedgEntry."Currency Code");
        END;

        "Document Type" := "Document Type"::Payment;
        "Applies-to Doc. Type" := CustLedgEntry."Document Type";
        "Applies-to Doc. No." := CustLedgEntry."Document No.";
        "Applies-to ID" := '';
        IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::Invoice) AND
           ("Document Type" = "Document Type"::Payment)
        THEN
          "External Document No." := CustLedgEntry."External Document No.";
        "Bal. Account Type" := "Bal. Account Type"::"G/L Account";

        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
        IF GenJnlBatch."Bal. Account No." <> '' THEN BEGIN
          "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
          VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
        END ELSE
          VALIDATE(Amount);
      END;
    END;

    PROCEDURE GetVendLedgerEntry@37();
    BEGIN
      IF ("Account Type" = "Account Type"::Vendor) AND ("Account No." = '') AND
         ("Applies-to Doc. No." <> '') AND (Amount = 0)
      THEN BEGIN
        VendLedgEntry.RESET;
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        VendLedgEntry.SETRANGE(Open,TRUE);
        IF NOT VendLedgEntry.FINDFIRST THEN
          ERROR(NotExistErr,"Applies-to Doc. No.");

        VALIDATE("Account No.",VendLedgEntry."Vendor No.");
        VendLedgEntry.CALCFIELDS("Remaining Amount");

        IF "Posting Date" <= VendLedgEntry."Pmt. Discount Date" THEN
          Amount := -(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible")
        ELSE
          Amount := -VendLedgEntry."Remaining Amount";

        IF "Currency Code" <> VendLedgEntry."Currency Code" THEN BEGIN
          FromCurrencyCode := GetShowCurrencyCode("Currency Code");
          ToCurrencyCode := GetShowCurrencyCode(CustLedgEntry."Currency Code");
          IF NOT
             CONFIRM(
               Text003,
               TRUE,FIELDCAPTION("Currency Code"),TABLECAPTION,FromCurrencyCode,ToCurrencyCode)
          THEN
            ERROR(Text005);
          VALIDATE("Currency Code",VendLedgEntry."Currency Code");
        END;

        "Document Type" := "Document Type"::Payment;
        "Applies-to Doc. Type" := VendLedgEntry."Document Type";
        "Applies-to Doc. No." := VendLedgEntry."Document No.";
        "Applies-to ID" := '';
        IF ("Applies-to Doc. Type" = "Applies-to Doc. Type"::Invoice) AND
           ("Document Type" = "Document Type"::Payment)
        THEN
          "External Document No." := VendLedgEntry."External Document No.";
        "Bal. Account Type" := "Bal. Account Type"::"G/L Account";

        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
        IF GenJnlBatch."Bal. Account No." <> '' THEN BEGIN
          "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
          VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
        END ELSE
          VALIDATE(Amount);
      END;
    END;

    LOCAL PROCEDURE CustVendAccountNosModified@32() : Boolean;
    BEGIN
      EXIT(
        (("Bal. Account No." <> xRec."Bal. Account No.") AND
         ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor])) OR
        (("Account No." <> xRec."Account No.") AND
         ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor])))
    END;

    LOCAL PROCEDURE CheckPaymentTolerance@34();
    BEGIN
      IF Amount <> 0 THEN
        IF ("Bal. Account No." <> xRec."Bal. Account No.") OR ("Account No." <> xRec."Account No.") THEN
          PaymentToleranceMgt.PmtTolGenJnl(Rec);
    END;

    PROCEDURE IncludeVATAmount@38() : Boolean;
    BEGIN
      EXIT(
        ("VAT Posting" = "VAT Posting"::"Manual VAT Entry") AND
        ("VAT Calculation Type" <> "VAT Calculation Type"::"Reverse Charge VAT"));
    END;

    PROCEDURE ConvertAmtFCYToLCYForSourceCurrency@39(Amount@1000 : Decimal) : Decimal;
    VAR
      Currency@1001 : Record 4;
      CurrExchRate@1003 : Record 330;
      CurrencyFactor@1002 : Decimal;
    BEGIN
      IF (Amount = 0) OR ("Source Currency Code" = '') THEN
        EXIT(Amount);

      Currency.GET("Source Currency Code");
      CurrencyFactor := CurrExchRate.ExchangeRate("Posting Date","Source Currency Code");
      EXIT(
        ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY(
            "Posting Date","Source Currency Code",Amount,CurrencyFactor),
          Currency."Amount Rounding Precision"));
    END;

    PROCEDURE MatchSingleLedgerEntry@40();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",Rec);
    END;

    PROCEDURE GetStyle@41() : Text;
    BEGIN
      IF "Applied Automatically" THEN
        EXIT('Favorable')
    END;

    PROCEDURE GetOverdueDateInteractions@75(VAR OverdueWarningText@1001 : Text) : Text;
    VAR
      DueDate@1000 : Date;
    BEGIN
      DueDate := GetAppliesToDocDueDate;
      OverdueWarningText := '';
      IF (DueDate <> 0D) AND (DueDate < "Posting Date") THEN BEGIN
        OverdueWarningText := DueDateMsg;
        EXIT('Unfavorable');
      END;
      EXIT('');
    END;

    PROCEDURE ClearDataExchangeEntries@42(DeleteHeaderEntries@1002 : Boolean);
    VAR
      DataExchField@1001 : Record 1221;
      GenJournalLine@1000 : Record 81;
    BEGIN
      DataExchField.DeleteRelatedRecords("Data Exch. Entry No.","Data Exch. Line No.");

      GenJournalLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      GenJournalLine.SETRANGE("Data Exch. Entry No.","Data Exch. Entry No.");
      GenJournalLine.SETFILTER("Line No.",'<>%1',"Line No.");
      IF GenJournalLine.ISEMPTY OR DeleteHeaderEntries THEN
        DataExchField.DeleteRelatedRecords("Data Exch. Entry No.",0);
    END;

    PROCEDURE ClearAppliedGenJnlLine@49();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      GenJournalLine.SETFILTER("Line No.",'<>%1',"Line No.");
      GenJournalLine.SETRANGE("Document Type","Applies-to Doc. Type");
      GenJournalLine.SETRANGE("Document No.","Applies-to Doc. No.");
      GenJournalLine.MODIFYALL("Applied Automatically",FALSE);
      GenJournalLine.MODIFYALL("Account Type",GenJournalLine."Account Type"::"G/L Account");
      GenJournalLine.MODIFYALL("Account No.",'');
    END;

    PROCEDURE GetIncomingDocumentURL@50() : Text[1000];
    VAR
      IncomingDocument@1000 : Record 130;
    BEGIN
      IF "Incoming Document Entry No." = 0 THEN
        EXIT('');

      IncomingDocument.GET("Incoming Document Entry No.");
      EXIT(IncomingDocument.GetURL);
    END;

    PROCEDURE InsertPaymentFileError@64(Text@1001 : Text);
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      PaymentJnlExportErrorText.CreateNew(Rec,Text,'','');
    END;

    PROCEDURE InsertPaymentFileErrorWithDetails@83(ErrorText@1001 : Text;AddnlInfo@1002 : Text;ExtSupportInfo@1003 : Text);
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      PaymentJnlExportErrorText.CreateNew(Rec,ErrorText,AddnlInfo,ExtSupportInfo);
    END;

    PROCEDURE DeletePaymentFileBatchErrors@67();
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      PaymentJnlExportErrorText.DeleteJnlBatchErrors(Rec);
    END;

    PROCEDURE DeletePaymentFileErrors@61();
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      PaymentJnlExportErrorText.DeleteJnlLineErrors(Rec);
    END;

    PROCEDURE HasPaymentFileErrors@24() : Boolean;
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      EXIT(PaymentJnlExportErrorText.JnlLineHasErrors(Rec));
    END;

    PROCEDURE HasPaymentFileErrorsInBatch@65() : Boolean;
    VAR
      PaymentJnlExportErrorText@1000 : Record 1228;
    BEGIN
      EXIT(PaymentJnlExportErrorText.JnlBatchHasErrors(Rec));
    END;

    LOCAL PROCEDURE UpdateDescription@43(Name@1000 : Text[50]);
    BEGIN
      IF NOT IsAdHocDescription THEN
        Description := Name;
    END;

    LOCAL PROCEDURE IsAdHocDescription@44() : Boolean;
    VAR
      GLAccount@1000 : Record 15;
      Customer@1001 : Record 18;
      Vendor@1002 : Record 23;
      BankAccount@1003 : Record 270;
      FixedAsset@1004 : Record 5600;
      ICPartner@1005 : Record 413;
    BEGIN
      IF Description = '' THEN
        EXIT(FALSE);
      IF xRec."Account No." = '' THEN
        EXIT(TRUE);

      CASE xRec."Account Type" OF
        xRec."Account Type"::"G/L Account":
          EXIT(GLAccount.GET(xRec."Account No.") AND (GLAccount.Name <> Description));
        xRec."Account Type"::Customer:
          EXIT(Customer.GET(xRec."Account No.") AND (Customer.Name <> Description));
        xRec."Account Type"::Vendor:
          EXIT(Vendor.GET(xRec."Account No.") AND (Vendor.Name <> Description));
        xRec."Account Type"::"Bank Account":
          EXIT(BankAccount.GET(xRec."Account No.") AND (BankAccount.Name <> Description));
        xRec."Account Type"::"Fixed Asset":
          EXIT(FixedAsset.GET(xRec."Account No.") AND (FixedAsset.Description <> Description));
        xRec."Account Type"::"IC Partner":
          EXIT(ICPartner.GET(xRec."Account No.") AND (ICPartner.Name <> Description));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetAppliesToDocEntryNo@63() : Integer;
    VAR
      CustLedgEntry@1000 : Record 21;
      VendLedgEntry@1001 : Record 25;
      AccType@1003 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      AccNo@1002 : Code[20];
    BEGIN
      GetAccTypeAndNo(Rec,AccType,AccNo);
      CASE AccType OF
        AccType::Customer:
          BEGIN
            GetAppliesToDocCustLedgEntry(CustLedgEntry,AccNo);
            EXIT(CustLedgEntry."Entry No.");
          END;
        AccType::Vendor:
          BEGIN
            GetAppliesToDocVendLedgEntry(VendLedgEntry,AccNo);
            EXIT(VendLedgEntry."Entry No.");
          END;
      END;
    END;

    PROCEDURE GetAppliesToDocDueDate@62() : Date;
    VAR
      CustLedgEntry@1000 : Record 21;
      VendLedgEntry@1001 : Record 25;
      AccType@1003 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      AccNo@1002 : Code[20];
    BEGIN
      GetAccTypeAndNo(Rec,AccType,AccNo);
      CASE AccType OF
        AccType::Customer:
          BEGIN
            GetAppliesToDocCustLedgEntry(CustLedgEntry,AccNo);
            EXIT(CustLedgEntry."Due Date");
          END;
        AccType::Vendor:
          BEGIN
            GetAppliesToDocVendLedgEntry(VendLedgEntry,AccNo);
            EXIT(VendLedgEntry."Due Date");
          END;
      END;
    END;

    LOCAL PROCEDURE GetAppliesToDocCustLedgEntry@60(VAR CustLedgEntry@1000 : Record 21;AccNo@1001 : Code[20]);
    BEGIN
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE(Open,TRUE);
      IF "Applies-to Doc. No." <> '' THEN BEGIN
        CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF CustLedgEntry.FINDFIRST THEN;
      END ELSE
        IF "Applies-to ID" <> '' THEN BEGIN
          CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
          IF CustLedgEntry.FINDFIRST THEN;
        END;
    END;

    LOCAL PROCEDURE GetAppliesToDocVendLedgEntry@53(VAR VendLedgEntry@1000 : Record 25;AccNo@1001 : Code[20]);
    BEGIN
      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF "Applies-to Doc. No." <> '' THEN BEGIN
        VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        IF VendLedgEntry.FINDFIRST THEN;
      END ELSE
        IF "Applies-to ID" <> '' THEN BEGIN
          VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
          IF VendLedgEntry.FINDFIRST THEN;
        END;
    END;

    LOCAL PROCEDURE SetJournalLineFieldsFromApplication@51();
    VAR
      AccType@1005 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      AccNo@1004 : Code[20];
    BEGIN
      "Exported to Payment File" := FALSE;
      GetAccTypeAndNo(Rec,AccType,AccNo);
      CASE AccType OF
        AccType::Customer:
          IF "Applies-to ID" <> '' THEN BEGIN
            IF FindFirstCustLedgEntryWithAppliesToID(AccNo,"Applies-to ID","HSN/SAC Code") THEN BEGIN
              CustLedgEntry.SETRANGE("Exported to Payment File",TRUE);
              "Exported to Payment File" := CustLedgEntry.FINDFIRST;
            END
          END ELSE
            IF "Applies-to Doc. No." <> '' THEN
              IF FindFirstCustLedgEntryWithAppliesToDocNo(AccNo,"Applies-to Doc. No.","HSN/SAC Code") THEN BEGIN
                "Exported to Payment File" := CustLedgEntry."Exported to Payment File";
                "Applies-to Ext. Doc. No." := CustLedgEntry."External Document No.";
              END;
        AccType::Vendor:
          IF "Applies-to ID" <> '' THEN BEGIN
            IF FindFirstVendLedgEntryWithAppliesToID(AccNo,"Applies-to ID","HSN/SAC Code") THEN BEGIN
              VendLedgEntry.SETRANGE("Exported to Payment File",TRUE);
              "Exported to Payment File" := VendLedgEntry.FINDFIRST;
            END
          END ELSE
            IF "Applies-to Doc. No." <> '' THEN
              IF FindFirstVendLedgEntryWithAppliesToDocNo(AccNo,"Applies-to Doc. No.","HSN/SAC Code") THEN BEGIN
                "Exported to Payment File" := VendLedgEntry."Exported to Payment File";
                "Applies-to Ext. Doc. No." := VendLedgEntry."External Document No.";
              END;
      END;
    END;

    LOCAL PROCEDURE GetAccTypeAndNo@52(GenJnlLine2@1002 : Record 81;VAR AccType@1000 : Option;VAR AccNo@1001 : Code[20]);
    BEGIN
      IF GenJnlLine2."Bal. Account Type" IN
         [GenJnlLine2."Bal. Account Type"::Customer,GenJnlLine2."Bal. Account Type"::Vendor]
      THEN BEGIN
        AccType := GenJnlLine2."Bal. Account Type";
        AccNo := GenJnlLine2."Bal. Account No.";
      END ELSE BEGIN
        AccType := GenJnlLine2."Account Type";
        AccNo := GenJnlLine2."Account No.";
      END;
    END;

    LOCAL PROCEDURE FindFirstCustLedgEntryWithAppliesToID@54(AccNo@1000 : Code[20];AppliesToID@1001 : Code[50];HSNSACCode@1500000 : Code[8]) : Boolean;
    BEGIN
      CustLedgEntry.RESET;
      CustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open);
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE("Applies-to ID",AppliesToID);
      CustLedgEntry.SETRANGE(Open,TRUE);
      IF HSNSACCode <> '' THEN
        CustLedgEntry.SETRANGE("HSN/SAC Code",HSNSACCode);
      EXIT(CustLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE FindFirstCustLedgEntryWithAppliesToDocNo@55(AccNo@1000 : Code[20];AppliestoDocNo@1001 : Code[20];HSNSACCode@1500000 : Code[8]) : Boolean;
    BEGIN
      CustLedgEntry.RESET;
      CustLedgEntry.SETCURRENTKEY("Document No.");
      CustLedgEntry.SETRANGE("Document No.",AppliestoDocNo);
      CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE(Open,TRUE);
      IF HSNSACCode <> '' THEN
        CustLedgEntry.SETRANGE("HSN/SAC Code",HSNSACCode);
      EXIT(CustLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE FindFirstVendLedgEntryWithAppliesToID@58(AccNo@1000 : Code[20];AppliesToID@1001 : Code[50];HSNSACCode@1500000 : Code[8]) : Boolean;
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open);
      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE("Applies-to ID",AppliesToID);
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF HSNSACCode <> '' THEN
        VendLedgEntry.SETRANGE("HSN/SAC Code",HSNSACCode);
      EXIT(VendLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE FindFirstVendLedgEntryWithAppliesToDocNo@59(AccNo@1000 : Code[20];AppliestoDocNo@1001 : Code[20];HSNSACCode@1500000 : Code[8]) : Boolean;
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",AppliestoDocNo);
      VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF HSNSACCode <> '' THEN
        VendLedgEntry.SETRANGE("HSN/SAC Code",HSNSACCode);
      EXIT(VendLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE ClearPostingGroups@45();
    BEGIN
      "Gen. Posting Type" := "Gen. Posting Type"::" ";
      "Gen. Bus. Posting Group" := '';
      "Gen. Prod. Posting Group" := '';
      "VAT Bus. Posting Group" := '';
      "VAT Prod. Posting Group" := '';
    END;

    LOCAL PROCEDURE ClearBalancePostingGroups@48();
    BEGIN
      "Bal. Gen. Posting Type" := "Bal. Gen. Posting Type"::" ";
      "Bal. Gen. Bus. Posting Group" := '';
      "Bal. Gen. Prod. Posting Group" := '';
      "Bal. VAT Bus. Posting Group" := '';
      "Bal. VAT Prod. Posting Group" := '';
    END;

    PROCEDURE TryGetSrvTaxReverseChargeSetup@1500018(VAR STReverseChargeSetup@1500000 : Record 16461) : Boolean;
    VAR
      ServiceTaxRegistrationNos@1500003 : Record 16475;
      Vendor@1500001 : Record 23;
    BEGIN
      IF "Service Tax Group Code" = '' THEN
        EXIT(FALSE);

      IF "Service Tax Registration No." = '' THEN
        EXIT(FALSE);

      IF ("Account Type" = "Account Type"::Vendor) AND ("Account No." <> '') THEN BEGIN
        Vendor.GET("Account No.");
        IF STReverseChargeSetup.TryGetSrvTaxReverseCharge("Service Tax Group Code",Vendor."Service Entity Type",
          ServiceTaxRegistrationNos.GetServiceEntityType("Service Tax Registration No.")) THEN
          EXIT(TRUE);
        EXIT(FALSE);
      END;

      IF ("Bal. Account Type" = "Bal. Account Type"::Vendor) AND ("Bal. Account No." <> '') THEN BEGIN
        Vendor.GET("Bal. Account No.");
        IF STReverseChargeSetup.TryGetSrvTaxReverseCharge("Service Tax Group Code",Vendor."Service Entity Type",
          ServiceTaxRegistrationNos.GetServiceEntityType("Service Tax Registration No.")) THEN
          EXIT(TRUE);
        EXIT(FALSE);
      END;
    END;

    LOCAL PROCEDURE CalcForwardAdvPaymentServTax@1500052(ServiceTaxSetup@1500000 : Record 16472);
    VAR
      STReverseChargeSetup@1500001 : Record 16461;
      PoTGenJournalLine@1500004 : Record 81;
      AbatementPct@1500002 : Decimal;
    BEGIN
      AbatementPct := CalculateAbatementPercentage(ServiceTaxSetup);
      CalculateServiceTaxAmounts(ServiceTaxSetup,AbatementPct);

      TryGetSrvTaxReverseChargeSetup(STReverseChargeSetup);
      CalcPoTServiceTaxAmounts(PoTGenJournalLine,STReverseChargeSetup."Reverse Charge %");

      UpdateAmountFromAmountLCY("Service Tax Base Amount (LCY)" + PoTGenJournalLine.FullServiceTaxAmount +
        PoTGenJournalLine.FullServiceTaxSBCAmount + PoTGenJournalLine.KKCessAmount);
    END;

    LOCAL PROCEDURE CalcBackAdvPaymentServTax@1500020(ServiceTaxSetup@1500000 : Record 16472);
    VAR
      STReverseChargeSetup@1500001 : Record 16461;
      PoTGenJournalLine@1500004 : Record 81;
      AbatementPct@1500002 : Decimal;
    BEGIN
      AbatementPct := CalculateAbatementPercentage(ServiceTaxSetup);
      TryGetSrvTaxReverseChargeSetup(STReverseChargeSetup);
      IF STReverseChargeSetup."Reverse Charge %" = 100 THEN BEGIN
        "Service Tax Base Amount (LCY)" := "Amount (LCY)";
        CalculateServiceTaxAmounts(ServiceTaxSetup,AbatementPct);
      END ELSE BEGIN
        "Service Tax Base Amount (LCY)" :=
          ROUND("Amount (LCY)" / (1 + (((ServiceTaxSetup."Service Tax %" + ServiceTaxSetup."SB Cess%" + ServiceTaxSetup."KK Cess%") *
            (1 - STReverseChargeSetup."Reverse Charge %" / 100) *
            (1 - AbatementPct / 100)) / 100) * (1 + ServiceTaxSetup."eCess %" / 100 + ServiceTaxSetup."SHE Cess %" / 100)));
        CalculateServiceTaxAmounts(ServiceTaxSetup,AbatementPct);
        CalcPoTServiceTaxAmounts(PoTGenJournalLine,STReverseChargeSetup."Reverse Charge %");
        "Service Tax Base Amount (LCY)" :=
          "Amount (LCY)" - (PoTGenJournalLine.FullServiceTaxAmount +
                             PoTGenJournalLine.FullServiceTaxSBCAmount +
                             PoTGenJournalLine.KKCessAmount);
      END;
    END;

    PROCEDURE IsServTaxRevCharge@1500030() : Boolean;
    VAR
      STReverseChargeSetup@1500000 : Record 16461;
    BEGIN
      IF TryGetSrvTaxReverseChargeSetup(STReverseChargeSetup) THEN
        EXIT(STReverseChargeSetup."Reverse Charge %" = 100);
      EXIT(FALSE);
    END;

    PROCEDURE IsServTaxRevChrgSplit@1500021() : Boolean;
    VAR
      STReverseChargeSetup@1500000 : Record 16461;
    BEGIN
      IF TryGetSrvTaxReverseChargeSetup(STReverseChargeSetup) THEN
        EXIT(STReverseChargeSetup."Reverse Charge %" IN [1..99]);
      EXIT(FALSE);
    END;

    PROCEDURE ApplyToDocHasServiceTaxSplit@1500022(VAR ServiceTaxGroupCode@1500001 : Code[20]) : Boolean;
    VAR
      VendLedgEntry@1500000 : Record 25;
    BEGIN
      IF "Account Type" = "Account Type"::Vendor THEN BEGIN
        FindAppliesToVendorLedgEntry(VendLedgEntry);
        EXIT(VendLedgEntry.HasServTaxRevChrgSplit(ServiceTaxGroupCode));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE FullServiceTaxAmount@1500023() : Decimal;
    BEGIN
      EXIT("Service Tax Amount" + "Service Tax eCess Amount" + "Service Tax SHE Cess Amount");
    END;

    PROCEDURE CalcPoTServiceTaxAmounts@1500025(VAR GenJnlLineWithPoTAmount@1500002 : Record 81;ReverseChargePct@1500000 : Decimal);
    VAR
      Percentage@1500001 : Decimal;
    BEGIN
      Percentage := 100 - ReverseChargePct;
      GenJnlLineWithPoTAmount := Rec;
      GenJnlLineWithPoTAmount."Service Tax Amount" := RoundServiceTaxAmount("Service Tax Amount" * Percentage / 100);
      GenJnlLineWithPoTAmount."Service Tax eCess Amount" := RoundServiceTaxAmount("Service Tax eCess Amount" * Percentage / 100);
      GenJnlLineWithPoTAmount."Service Tax SHE Cess Amount" := RoundServiceTaxAmount("Service Tax SHE Cess Amount" * Percentage / 100);
      GenJnlLineWithPoTAmount."Service Tax Base Amount (LCY)" := ROUND("Service Tax Base Amount (LCY)" * Percentage / 100);
      GenJnlLineWithPoTAmount."Service Tax SBC Amount" := RoundServiceTaxAmount("Service Tax SBC Amount" * Percentage / 100);
      GenJnlLineWithPoTAmount."KK Cess Amount" := RoundServiceTaxAmount("KK Cess Amount" * Percentage / 100);
    END;

    PROCEDURE CalcRevChargeServiceTaxAmounts@1500019(VAR GenJnlLineWithRevChrgAmount@1500000 : Record 81;GenJnlLineWithPoTAmount@1500002 : Record 81);
    BEGIN
      GenJnlLineWithRevChrgAmount := Rec;
      GenJnlLineWithRevChrgAmount.PoT := FALSE;
      GenJnlLineWithRevChrgAmount."Service Tax Amount" -= GenJnlLineWithPoTAmount."Service Tax Amount";
      GenJnlLineWithRevChrgAmount."Service Tax eCess Amount" -= GenJnlLineWithPoTAmount."Service Tax eCess Amount";
      GenJnlLineWithRevChrgAmount."Service Tax SHE Cess Amount" -= GenJnlLineWithPoTAmount."Service Tax SHE Cess Amount";
      GenJnlLineWithRevChrgAmount."Service Tax Base Amount (LCY)" -= GenJnlLineWithPoTAmount."Service Tax Base Amount (LCY)";
      GenJnlLineWithRevChrgAmount."Service Tax SBC Amount" -= GenJnlLineWithPoTAmount."Service Tax SBC Amount";
      GenJnlLineWithRevChrgAmount."KK Cess Amount" -= GenJnlLineWithPoTAmount."KK Cess Amount";
    END;

    PROCEDURE FindAppliesToVendorLedgEntry@1500024(VAR VendLedgEntry@1500000 : Record 25);
    BEGIN
      VendLedgEntry.RESET;
      IF "Account Type" = "Account Type"::Vendor THEN
        VendLedgEntry.SETRANGE("Vendor No.","Account No.")
      ELSE
        VendLedgEntry.SETRANGE("Vendor No.","Bal. Account No.");
      VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
      VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
      VendLedgEntry.SETRANGE(Open,TRUE);
      VendLedgEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE CalcVendAppliedAmountLCY@1500039(VendLedgEntry@1500000 : Record 25) : Decimal;
    VAR
      AppliedAmount@1500001 : Decimal;
    BEGIN
      IF VendLedgEntry."Amount to Apply" = 0 THEN BEGIN
        VendLedgEntry.CALCFIELDS("Remaining Amount");
        AppliedAmount := VendLedgEntry."Remaining Amount";
      END ELSE
        AppliedAmount := VendLedgEntry."Amount to Apply";
      AppliedAmount := VendLedgEntry.CalcAppliedTDSBase(AppliedAmount);

      AppliedAmount := ABS(AppliedAmount);
      IF "Currency Code" <> '' THEN
        AppliedAmount :=
          ROUND(CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code",AppliedAmount,"Currency Factor"));
      EXIT(AppliedAmount);
    END;

    PROCEDURE HasServiceTaxAbatement@1500026() : Boolean;
    VAR
      ServiceTaxSetup@1500000 : Record 16472;
    BEGIN
      IF ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date") THEN
        EXIT(ServiceTaxSetup."Abatement %" > 0);
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ClearServiceTaxAmounts@1500027();
    BEGIN
      "Service Tax Amount" := 0;
      "Service Tax eCess Amount" := 0;
      "Service Tax SHE Cess Amount" := 0;
      "Service Tax SBC %" := 0;
      "Service Tax SBC Amount" := 0;
      "KK Cess%" := 0;
      "KK Cess Amount" := 0;
    END;

    LOCAL PROCEDURE CalculateServiceTaxAmounts@1500031(ServiceTaxSetup@1500000 : Record 16472;ServiceTaxAbatement@1500001 : Decimal);
    BEGIN
      "Service Tax Amount" :=
        RoundServiceTaxAmount(
          "Service Tax Base Amount (LCY)" * ServiceTaxSetup."Service Tax %" * (100 - ServiceTaxAbatement) / 100 / 100);
      "Service Tax eCess Amount" := RoundServiceTaxAmount("Service Tax Amount" * ServiceTaxSetup."eCess %" / 100);
      "Service Tax SHE Cess Amount" := RoundServiceTaxAmount("Service Tax Amount" * ServiceTaxSetup."SHE Cess %" / 100);
      "Service Tax SBC %" := ServiceTaxSetup."SB Cess%";
      "Service Tax SBC Amount" :=
        RoundServiceTaxAmount(
          "Service Tax Base Amount (LCY)" * ServiceTaxSetup."SB Cess%" * (100 - ServiceTaxAbatement) / 100 / 100);
      "KK Cess%" := ServiceTaxSetup."KK Cess%";
      "KK Cess Amount" :=
        RoundServiceTaxAmount(
          "Service Tax Base Amount (LCY)" * ServiceTaxSetup."KK Cess%" * (100 - ServiceTaxAbatement) / 100 / 100);
    END;

    LOCAL PROCEDURE CalculateAbatementPercentage@1500040(ServiceTaxSetup@1500000 : Record 16472) : Decimal;
    VAR
      STReverseChargeSetup@1500001 : Record 16461;
    BEGIN
      IF TryGetSrvTaxReverseChargeSetup(STReverseChargeSetup) THEN
        IF ((STReverseChargeSetup."Reverse Charge Tax Type" = STReverseChargeSetup."Reverse Charge Tax Type"::GTA) AND
            (NOT "Declaration Form (GTA)"))
        THEN
          EXIT(0);
      EXIT(ServiceTaxSetup."Abatement %");
    END;

    PROCEDURE IsNormalPayment@1500047() : Boolean;
    BEGIN
      EXIT(
        NOT "Serv. Tax on Advance Payment" AND
        ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]));
    END;

    PROCEDURE DocumentHasServiceTaxAndPoT@1500028() : Boolean;
    BEGIN
      EXIT(
        PoT AND HasServiceTax AND ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]));
    END;

    PROCEDURE HasServiceTax@1500029() JnlLineHasServiceTax : Boolean;
    BEGIN
      JnlLineHasServiceTax := ("Service Tax Group Code" <> '') AND ("Service Tax Registration No." <> '');
      IF ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) THEN
        JnlLineHasServiceTax := JnlLineHasServiceTax AND "Serv. Tax on Advance Payment"
      ELSE IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
        JnlLineHasServiceTax := FALSE;
    END;

    LOCAL PROCEDURE ExchangeAmtLCYToFCY@1500035(AmountLCY@1500000 : Decimal;UseCurrencyRoundingPrecision@1500001 : Boolean) : Decimal;
    BEGIN
      IF UseCurrencyRoundingPrecision THEN
        EXIT(ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY("Posting Date","Currency Code",AmountLCY,"Currency Factor"),
          Currency."Amount Rounding Precision"));

      EXIT(ROUND(CurrExchRate.ExchangeAmtLCYToFCY("Posting Date","Currency Code",AmountLCY,"Currency Factor")));
    END;

    LOCAL PROCEDURE UpdateAmountFromAmountLCY@1500055(AmountLCY@1500001 : Decimal);
    VAR
      AmountFCY@1500000 : Decimal;
    BEGIN
      GetCurrency;
      AmountFCY := ExchangeAmtLCYToFCY(AmountLCY,TRUE);
      VALIDATE(Amount,AmountFCY);
    END;

    LOCAL PROCEDURE ServiceTaxBaseSign@1500032() : Decimal;
    BEGIN
      IF NOT ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN
        EXIT(GetSignFromAmount("Amount (LCY)"));

      // on a sales invoice/credit memo, the base is always -
      IF ((("Account Type" = "Account Type"::Customer) OR ("Bal. Account Type" = "Bal. Account Type"::Customer)) AND
         (("Account Type" = "Account Type"::"G/L Account") OR ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")))
      THEN
         EXIT(-1);

      // on a purchase invoice/credit memo, the base is always +
      IF ((("Account Type" = "Account Type"::Vendor) OR ("Bal. Account Type" = "Bal. Account Type"::Vendor)) AND
          (("Account Type" = "Account Type"::"G/L Account") OR ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")))
      THEN
        EXIT(1);
    END;

    LOCAL PROCEDURE SetTDSEntryFiltersAppliedFalse@1500034(AccountingPeriodFilter@1500000 : Text[30]);
    BEGIN
      TDSEntry.RESET;
      TDSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TDS Group","Assessee Code",Applied);
      TDSEntry.SETRANGE("Party Type","Party Type");
      TDSEntry.SETRANGE("Party Code","Party Code");
      TDSEntry.SETFILTER("Posting Date",AccountingPeriodFilter);
      TDSEntry.SETRANGE("TDS Group","TDS Group");
      TDSEntry.SETRANGE("Assessee Code","Assessee Code");
      TDSEntry.SETRANGE(Applied,FALSE);
    END;

    LOCAL PROCEDURE InsertEntriesToTDSBuffer@1500037(AccountingPeriodFilter@1500002 : Text[30];CalculateTDS@1500000 : Boolean);
    VAR
      CalculateSurcharge@1500001 : Boolean;
    BEGIN
      CalculateSurcharge := "Surcharge %" <> 0;;
      SetTDSEntryFiltersAppliedFalse(AccountingPeriodFilter);
      IF TDSEntry.FINDFIRST THEN
        REPEAT
          InsertTDSBuf(TDSEntry,"Posting Date",CalculateSurcharge,CalculateTDS);
        UNTIL TDSEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE GetSignFromAmount@1500038(AmountValue@1500000 : Decimal) : Integer;
    BEGIN
      IF AmountValue = 0 THEN
        EXIT(1);
      EXIT(ABS(AmountValue) / AmountValue);
    END;

    LOCAL PROCEDURE CleanLine@66();
    BEGIN
      UpdateLineBalance;
      UpdateSource;
      CreateDim(
        DimMgt.TypeToTableID1("Account Type"),"Account No.",
        DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
        DATABASE::Job,"Job No.",
        DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
        DATABASE::Campaign,"Campaign No.");
      IF NOT ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]) THEN
        "Recipient Bank Account" := '';
      IF xRec."Account No." <> '' THEN BEGIN
        ClearPostingGroups;
        "Tax Area Code" := '';
        "Tax Liable" := FALSE;
        "Tax Group Code" := '';
        "Bill-to/Pay-to No." := '';
        "Ship-to/Order Address Code" := '';
        "Sell-to/Buy-from No." := '';
        UpdateCountryCodeAndVATRegNo('');
      END;
      IF "Account Type" = "Account Type"::"G/L Account" THEN BEGIN
        "Service Tax Entry" := FALSE;
        "Service Tax Group Code" := '';
        "Service Tax Registration No." := '';
      END;
    END;

    LOCAL PROCEDURE ReplaceDescription@84() : Boolean;
    BEGIN
      IF "Bal. Account No." = '' THEN
        EXIT(TRUE);
      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      EXIT(GenJnlBatch."Bal. Account No." <> '');
    END;

    PROCEDURE IsExportedToPaymentFile@1020() : Boolean;
    BEGIN
      EXIT(IsPaymentJournallLineExported OR IsAppliedToVendorLedgerEntryExported);
    END;

    PROCEDURE IsPaymentJournallLineExported@80() : Boolean;
    VAR
      GenJnlLine@1001 : Record 81;
      OldFilterGroup@1000 : Integer;
      HasExportedLines@1002 : Boolean;
    BEGIN
      WITH GenJnlLine DO BEGIN
        COPYFILTERS(Rec);
        OldFilterGroup := FILTERGROUP;
        FILTERGROUP := 10;
        SETRANGE("Exported to Payment File",TRUE);
        HasExportedLines := NOT ISEMPTY;
        SETRANGE("Exported to Payment File");
        FILTERGROUP := OldFilterGroup;
      END;
      EXIT(HasExportedLines);
    END;

    PROCEDURE IsAppliedToVendorLedgerEntryExported@79() : Boolean;
    VAR
      GenJnlLine@1001 : Record 81;
      VendLedgerEntry@1002 : Record 25;
    BEGIN
      GenJnlLine.COPYFILTERS(Rec);

      IF GenJnlLine.FINDSET THEN
        REPEAT
          IF GenJnlLine.IsApplied THEN BEGIN
            VendLedgerEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
            IF GenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
              VendLedgerEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
              VendLedgerEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
            END;
            IF GenJnlLine."Applies-to ID" <> '' THEN
              VendLedgerEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
            VendLedgerEntry.SETRANGE("Exported to Payment File",TRUE);
            IF NOT VendLedgerEntry.ISEMPTY THEN
              EXIT(TRUE);
          END;

          VendLedgerEntry.RESET;
          VendLedgerEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
          VendLedgerEntry.SETRANGE("Applies-to Doc. Type",GenJnlLine."Document Type");
          VendLedgerEntry.SETRANGE("Applies-to Doc. No.",GenJnlLine."Document No.");
          VendLedgerEntry.SETRANGE("Exported to Payment File",TRUE);
          IF NOT VendLedgerEntry.ISEMPTY THEN
            EXIT(TRUE);
        UNTIL GenJnlLine.NEXT = 0;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ClearAppliedAutomatically@72();
    BEGIN
      IF CurrFieldNo <> 0 THEN
        "Applied Automatically" := FALSE;
    END;

    LOCAL PROCEDURE SetFilterOnNODLine@1500116(NODGroup@1500017 : Code[10]);
    BEGIN
      NODLines.RESET;
      CASE "Party Type" OF
        "Party Type"::Vendor:
          NODLines.SETRANGE(Type,NODLines.Type::Vendor);
        "Party Type"::Customer:
          NODLines.SETRANGE(Type,NODLines.Type::Customer);
        "Party Type"::Party:
          NODLines.SETRANGE(Type,NODLines.Type::Party);
      END;
      NODLines.SETRANGE("No.","Party Code");
      NODLines.SETFILTER("NOD/NOC",NODGroup);
    END;

    PROCEDURE SetPostingDateAsDueDate@77(DueDate@1002 : Date;DateOffset@1000 : DateFormula) : Boolean;
    VAR
      NewPostingDate@1001 : Date;
    BEGIN
      IF DueDate = 0D THEN
        EXIT(FALSE);

      NewPostingDate := CALCDATE(DateOffset,DueDate);
      IF NewPostingDate < WORKDATE THEN BEGIN
        VALIDATE("Posting Date",WORKDATE);
        EXIT(TRUE);
      END;

      VALIDATE("Posting Date",NewPostingDate);
      EXIT(FALSE);
    END;

    PROCEDURE CalculatePostingDate@76();
    VAR
      GenJnlLine@1000 : Record 81;
      EmptyDateFormula@1001 : DateFormula;
    BEGIN
      GenJnlLine.COPY(Rec);
      GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");

      IF GenJnlLine.FINDSET THEN BEGIN
        Window.OPEN(CalcPostDateMsg);
        REPEAT
          EVALUATE(EmptyDateFormula,'<0D>');
          GenJnlLine.SetPostingDateAsDueDate(GenJnlLine.GetAppliesToDocDueDate,EmptyDateFormula);
          GenJnlLine.MODIFY(TRUE);
          Window.UPDATE(1,GenJnlLine."Document No.");
        UNTIL GenJnlLine.NEXT = 0;
        Window.CLOSE;
      END;
    END;

    PROCEDURE ImportBankStatement@73();
    VAR
      ProcessGenJnlLines@1000 : Codeunit 1247;
    BEGIN
      ProcessGenJnlLines.ImportBankStatement(Rec);
    END;

    PROCEDURE ExportPaymentFile@81();
    BEGIN
      IF NOT FINDSET THEN
        ERROR(NothingToExportErr);
      SETRANGE("Journal Template Name","Journal Template Name");
      SETRANGE("Journal Batch Name","Journal Batch Name");
      TESTFIELD("Check Printed",FALSE);

      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      GenJnlBatch.TESTFIELD("Bal. Account Type",GenJnlBatch."Bal. Account Type"::"Bank Account");
      GenJnlBatch.TESTFIELD("Bal. Account No.");

      CheckDocNoOnLines;
      IF IsExportedToPaymentFile THEN
        IF NOT CONFIRM(ExportAgainQst) THEN
          EXIT;
      BankAcc.GET(GenJnlBatch."Bal. Account No.");
      IF BankAcc.GetPaymentExportCodeunitID > 0 THEN
        CODEUNIT.RUN(BankAcc.GetPaymentExportCodeunitID,Rec)
      ELSE
        CODEUNIT.RUN(CODEUNIT::"Exp. Launcher Gen. Jnl.",Rec);
    END;

    PROCEDURE TotalExportedAmount@85() : Decimal;
    VAR
      CreditTransferEntry@1000 : Record 1206;
    BEGIN
      IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
        EXIT(0);
      GenJnlShowCTEntries.SetFiltersOnCreditTransferEntry(Rec,CreditTransferEntry);
      CreditTransferEntry.CALCSUMS("Transfer Amount");
      EXIT(CreditTransferEntry."Transfer Amount");
    END;

    PROCEDURE DrillDownExportedAmount@95();
    VAR
      CreditTransferEntry@1000 : Record 1206;
    BEGIN
      IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
        EXIT;
      GenJnlShowCTEntries.SetFiltersOnCreditTransferEntry(Rec,CreditTransferEntry);
      PAGE.RUN(PAGE::"Credit Transfer Reg. Entries",CreditTransferEntry);
    END;

    LOCAL PROCEDURE CopyDimensionsFromJobTaskLine@82();
    BEGIN
      "Dimension Set ID" := JobJnlLine."Dimension Set ID";
      "Shortcut Dimension 1 Code" := JobJnlLine."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := JobJnlLine."Shortcut Dimension 2 Code";
    END;

    LOCAL PROCEDURE SetAmountWithCustLedgEntry@102();
    BEGIN
      IF "Currency Code" <> CustLedgEntry."Currency Code" THEN
        CheckModifyCurrencyCode(GenJnlLine."Account Type"::Customer,CustLedgEntry."Currency Code");
      IF Amount = 0 THEN BEGIN
        CustLedgEntry.CALCFIELDS("Remaining Amount");
        SetAmountWithRemaining(
          PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(Rec,CustLedgEntry,0,FALSE),
          CustLedgEntry."Amount to Apply",CustLedgEntry."Remaining Amount",CustLedgEntry."Remaining Pmt. Disc. Possible");
      END;
    END;

    LOCAL PROCEDURE SetAmountWithVendLedgEntry@91();
    BEGIN
      IF "Currency Code" <> VendLedgEntry."Currency Code" THEN
        CheckModifyCurrencyCode(GenJnlLine."Account Type"::Vendor,VendLedgEntry."Currency Code");
      IF NOT DocumentHasServiceTaxAndPoT THEN
      IF Amount = 0 THEN BEGIN
        VendLedgEntry.CALCFIELDS("Remaining Amount");
        SetAmountWithRemaining(
          PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(Rec,VendLedgEntry,0,FALSE),
          VendLedgEntry."Amount to Apply",VendLedgEntry."Remaining Amount",VendLedgEntry."Remaining Pmt. Disc. Possible");
      END;
    END;

    PROCEDURE CheckModifyCurrencyCode@105(AccountType@1000 : Option;CustVendLedgEntryCurrencyCode@1001 : Code[10]);
    BEGIN
      IF Amount = 0 THEN BEGIN
        FromCurrencyCode := GetShowCurrencyCode("Currency Code");
        ToCurrencyCode := GetShowCurrencyCode(CustVendLedgEntryCurrencyCode);
        IF NOT
           CONFIRM(
             Text003,TRUE,FIELDCAPTION("Currency Code"),TABLECAPTION,FromCurrencyCode,ToCurrencyCode)
        THEN
          ERROR(Text005);
        VALIDATE("Currency Code",CustVendLedgEntryCurrencyCode);
      END ELSE
        GenJnlApply.CheckAgainstApplnCurrency(
          "Currency Code",CustVendLedgEntryCurrencyCode,AccountType,TRUE);
    END;

    LOCAL PROCEDURE SetAmountWithRemaining@101(CalcPmtDisc@1000 : Boolean;AmountToApply@1001 : Decimal;RemainingAmount@1002 : Decimal;RemainingPmtDiscPossible@1003 : Decimal);
    BEGIN
      IF AmountToApply <> 0 THEN
        IF CalcPmtDisc AND (ABS(AmountToApply) >= ABS(RemainingAmount - RemainingPmtDiscPossible)) THEN
          Amount := -(RemainingAmount - RemainingPmtDiscPossible)
        ELSE
          Amount := -AmountToApply
      ELSE
        IF CalcPmtDisc THEN
          Amount := -(RemainingAmount - RemainingPmtDiscPossible)
        ELSE
          Amount := -RemainingAmount;
      IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor] THEN
        Amount := -Amount;
      VALIDATE(Amount);
    END;

    PROCEDURE IsOpenedFromBatch@87() : Boolean;
    VAR
      GenJournalBatch@1002 : Record 232;
      TemplateFilter@1001 : Text;
      BatchFilter@1000 : Text;
    BEGIN
      BatchFilter := GETFILTER("Journal Batch Name");
      IF BatchFilter <> '' THEN BEGIN
        TemplateFilter := GETFILTER("Journal Template Name");
        IF TemplateFilter <> '' THEN
          GenJournalBatch.SETFILTER("Journal Template Name",TemplateFilter);
        GenJournalBatch.SETFILTER(Name,BatchFilter);
        GenJournalBatch.FINDFIRST;
      END;

      EXIT((("Journal Batch Name" <> '') AND ("Journal Template Name" = '')) OR (BatchFilter <> ''));
    END;

    PROCEDURE GetDeferralAmount@88() DeferralAmount : Decimal;
    BEGIN
      IF "VAT Base Amount" <> 0 THEN
        DeferralAmount := "VAT Base Amount"
      ELSE
        DeferralAmount := Amount;
    END;

    PROCEDURE ShowDeferrals@108(PostingDate@1000 : Date;CurrencyCode@1001 : Code[10]) : Boolean;
    VAR
      DeferralUtilities@1002 : Codeunit 1720;
    BEGIN
      EXIT(
        DeferralUtilities.OpenLineScheduleEdit(
          "Deferral Code",GetDeferralDocType,"Journal Template Name","Journal Batch Name",0,'',"Line No.",
          GetDeferralAmount,PostingDate,Description,CurrencyCode));
    END;

    PROCEDURE GetDeferralDocType@106() : Integer;
    BEGIN
      EXIT(DeferralDocType::"G/L");
    END;

    PROCEDURE IsForPurchase@86() : Boolean;
    BEGIN
      IF ("Account Type" = "Account Type"::Vendor) OR ("Bal. Account Type" = "Bal. Account Type"::Vendor) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE IsForSales@89() : Boolean;
    BEGIN
      IF ("Account Type" = "Account Type"::Customer) OR ("Bal. Account Type" = "Bal. Account Type"::Customer) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckGenJournalLinePostRestrictions@90();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckGenJournalLinePrintCheckRestrictions@92();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnMoveGenJournalLine@93(ToRecordID@1000 : RecordID);
    BEGIN
    END;

    LOCAL PROCEDURE IncrementDocumentNo@94();
    VAR
      NoSeriesLine@1001 : Record 309;
    BEGIN
      IF GenJnlBatch."No. Series" <> '' THEN BEGIN
        NoSeriesMgt.SetNoSeriesLineFilter(NoSeriesLine,GenJnlBatch."No. Series","Posting Date");
        IF NoSeriesLine."Increment-by No." > 1 THEN
          NoSeriesMgt.IncrementNoText("Document No.",NoSeriesLine."Increment-by No.")
        ELSE
          "Document No." := INCSTR("Document No.");
      END ELSE
        "Document No." := INCSTR("Document No.");
    END;

    PROCEDURE FullServiceTaxSBCAmount@1170000000() : Decimal;
    BEGIN
      EXIT("Service Tax SBC Amount");
    END;

    PROCEDURE KKCessAmount@1500042() : Decimal;
    BEGIN
      EXIT("KK Cess Amount");
    END;

    PROCEDURE NeedCheckZeroAmount@96() : Boolean;
    BEGIN
      EXIT(
        ("Account No." <> '') AND
        NOT "System-Created Entry" AND
        NOT "Allow Zero-Amount Posting" AND
        ("Account Type" <> "Account Type"::"Fixed Asset"));
    END;

    PROCEDURE IsRecurring@99() : Boolean;
    VAR
      GenJournalTemplate@1000 : Record 80;
    BEGIN
      IF "Journal Template Name" <> '' THEN
        IF GenJournalTemplate.GET("Journal Template Name") THEN
          EXIT(GenJournalTemplate.Recurring);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ClearGSTAmounts@1500044();
    BEGIN
      "GST Base Amount" := 0;
      "GST %" := 0;
      "Total GST Amount" := 0;
    END;

    LOCAL PROCEDURE CalculateGSTAmounts@1500046();
    VAR
      GSTSetup@1500002 : Record 16408;
      Customer@1500004 : Record 18;
      Location@1500005 : Record 14;
      Vendor@1500011 : Record 23;
      SalesReceivablesSetup@1500012 : Record 311;
      GSTManagement@1500001 : Codeunit 16401;
      GSTPlaceOfSupplyState@1500000 : Code[10];
      GSTPerStateCode@1500003 : Code[10];
      GSTJurisdiction@1500007 : 'Intrastate,Interstate';
      Type@1500006 : 'Vendor,Customer';
      TotalGST@1500008 : Decimal;
      TotalBaseAmount@1500010 : Decimal;
      TransactionType@1500009 : 'Purchase,Sale';
    BEGIN
      SalesReceivablesSetup.GET;
      ClearGSTAmounts;
      GSTManagement.CheckGSTAccountingPeriod("Posting Date");
      GSTManagement.DeleteGSTBufferAdvPayment(Rec,TransactionType::Sale);
      IF ("GST on Advance Payment") AND ("Document Type" = "Document Type"::Payment) THEN BEGIN
        IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
          EXIT;
        TESTFIELD("Location Code");
        TESTFIELD("GST Group Code");
        TESTFIELD("Account No.");
        TESTFIELD("HSN/SAC Code");
        Location.GET("Location Code");
        Location.TESTFIELD("State Code");
        Location.TESTFIELD("GST Registration No.");
        "State Code" := Location."State Code";
        IF "Account Type" = "Account Type"::Customer THEN BEGIN
          IF "GST Place of Supply" = "GST Place of Supply"::" " THEN
            ERROR(STRSUBSTNO(PlaceOfSupplyErr,"Journal Template Name","Journal Batch Name","Line No."));
          GSTPlaceOfSupplyState := GetPlaceOfSupply(Rec);
          Customer.GET("Account No.");
          "GST Customer Type" := Customer."GST Customer Type";
          IF "GST Customer Type" IN ["GST Customer Type"::" ","GST Customer Type"::Exempted] THEN
            EXIT;
          IF "GST Customer Type" = "GST Customer Type"::Unregistered THEN
            "Nature of Supply" := "Nature of Supply"::B2C;
          IF "GST Customer Type" IN ["GST Customer Type"::Export,"GST Customer Type"::"Deemed Export",
            "GST Customer Type"::"SEZ Development","GST Customer Type"::"SEZ Unit"] THEN
            GSTPerStateCode :=
              GSTManagement.GetGSTConfiguration(Type::Customer,Location."State Code",'',GSTJurisdiction)
          ELSE
            GSTPerStateCode :=
              GSTManagement.GetGSTConfiguration(Type::Customer,Location."State Code",GSTPlaceOfSupplyState,GSTJurisdiction);
          IF GSTPerStateCode = '' THEN EXIT;
          "GST Jurisdiction Type" := GSTJurisdiction;
          TotalBaseAmount :=
           GSTManagement.CalculateGSTAmountsAdvPaymnt(Rec,TransactionType::Sale,
             GSTJurisdiction,GSTPerStateCode,"GST Group Code","Posting Date",Amount);
         IF "Currency Code" <> '' THEN BEGIN
           "GST Base Amount" := GSTManagement.RoundGSTAmount(TotalBaseAmount,"Currency Code");
           "Total GST Amount" := GSTManagement.RoundGSTAmount(Amount - TotalBaseAmount,"Currency Code");
         END ELSE BEGIN
           "GST Base Amount" := TotalBaseAmount;
           "Total GST Amount" := "Amount (LCY)" - TotalBaseAmount;
         END;
         IF "GST Base Amount" <> 0 THEN
           "GST %" := "Total GST Amount" / "GST Base Amount" * 100;
         GSTManagement.UpdateRoundingGSTAmount(Rec,TransactionType::Sale);
         GSTManagement.DeleteAdvPaymntGSTCalculationBuffer(Rec,TransactionType::Sale);
           IF "GST Customer Type" = "GST Customer Type"::Exempted THEN BEGIN
             "GST Base Amount" := TotalBaseAmount;
             "Total GST Amount" := 0;
              "GST %" := 0;
          END;
        END;
        IF "Account Type" = "Account Type"::Vendor THEN BEGIN
          GSTManagement.DeleteGSTBufferAdvPayment(Rec,TransactionType::Purchase);
          Vendor.GET("Account No.");
          "GST Vendor Type" := Vendor."GST Vendor Type";
          IF NOT "GST Reverse Charge" THEN
            EXIT;
          IF "GST Vendor Type" IN ["GST Vendor Type"::Exempted,"GST Vendor Type"::" ","GST Vendor Type"::Composite] THEN
            EXIT;
          IF "GST Vendor Type" IN ["GST Vendor Type"::Unregistered,"GST Vendor Type"::Registered] THEN
            TESTFIELD("GST Bill-to/BuyFrom State Code");
          IF ("GST Vendor Type" = "GST Vendor Type"::Import) AND ("GST Group Type" = "GST Group Type"::Goods) THEN
            EXIT;
          IF ("GST Vendor Type" = "GST Vendor Type"::SEZ) AND ("GST Group Type" = "GST Group Type"::Goods) THEN
            EXIT;
          IF "GST Vendor Type" IN ["GST Vendor Type"::Import,"GST Vendor Type"::SEZ] THEN
            GSTPerStateCode := GSTManagement.GetGSTConfiguration(Type::Vendor,Location."State Code",'',GSTJurisdiction)
          ELSE
            GSTPerStateCode := GSTManagement.GetGSTConfiguration(Type::Vendor,Location."State Code",
              Vendor."State Code",GSTJurisdiction);
          IF GSTPerStateCode = '' THEN EXIT;
          "GST Jurisdiction Type" := GSTJurisdiction;
          TotalGST :=
           GSTManagement.CalculateGSTAmountsAdvPaymnt(Rec,TransactionType::Purchase,
             GSTJurisdiction,GSTPerStateCode,"GST Group Code","Posting Date",Amount);
         IF "Currency Code" <> '' THEN BEGIN
            "GST Base Amount" := GSTManagement.RoundGSTAmount(Amount,"Currency Code");
            "Total GST Amount" := GSTManagement.RoundGSTAmount(TotalGST,"Currency Code");
         END ELSE BEGIN
           "GST Base Amount" := Amount;
           "Total GST Amount" := TotalGST;
         END;
         IF "GST Base Amount" <> 0 THEN
           "GST %" := "Total GST Amount" / "GST Base Amount" * 100;
         GSTManagement.DeleteAdvPaymntGSTCalculationBuffer(Rec,TransactionType::Purchase);
        END;

      END;
    END;

    PROCEDURE GetPlaceOfSupply@1500043(GenJournalLine@1500006 : Record 81) : Code[10];
    VAR
      Location@1500002 : Record 14;
      ShiptoAddress@1500003 : Record 222;
      Customer@1500001 : Record 18;
      PlaceofSupplyStateCode@1500000 : Code[10];
      GSTGroupCode@1500004 : Record 16404;
      SalesSetup@1500005 : Record 311;
    BEGIN
      CASE GenJournalLine."GST Place of Supply" OF
        GenJournalLine."GST Place of Supply"::"Bill-to Address":
          PlaceofSupplyStateCode := GenJournalLine."GST Bill-to/BuyFrom State Code";
        GenJournalLine."GST Place of Supply"::"Ship-to Address":
          PlaceofSupplyStateCode := GenJournalLine."GST Ship-to State Code";
        GenJournalLine."GST Place of Supply"::"Location Address":
          PlaceofSupplyStateCode := GenJournalLine."Location State Code";
      END;
      EXIT(PlaceofSupplyStateCode);
    END;

    LOCAL PROCEDURE CheckSimilarLocationCode@1500041();
    VAR
      GenJournalLine@1500000 : Record 81;
      GenJournalLine1@1500001 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      GenJournalLine.SETRANGE("Document Type","Document Type");
      GenJournalLine.SETRANGE("Document No.","Document No.");
      GenJournalLine.SETRANGE("GST on Advance Payment",TRUE);
      IF GenJournalLine.FINDSET THEN BEGIN
        IF GenJournalLine.COUNT > 1 THEN REPEAT
          GenJournalLine1.SETRANGE("Journal Template Name","Journal Template Name");
          GenJournalLine1.SETRANGE("Journal Batch Name","Journal Batch Name");
          GenJournalLine1.SETRANGE("Document Type","Document Type");
          GenJournalLine1.SETRANGE("Document No.","Document No.");
          GenJournalLine1.SETRANGE("GST on Advance Payment",TRUE);
          GenJournalLine1.SETFILTER("Line No.",'<>%1',GenJournalLine."Line No.");
          GenJournalLine1.SETRANGE("Location Code",GenJournalLine."Location Code");
          IF NOT GenJournalLine1.FINDFIRST THEN
            ERROR(SimilarLocCodeErr);
      UNTIL GenJournalLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClearGSTFields@1500073(AdvancePayment@1500000 : Boolean);
    VAR
      GSTManagement@1500001 : Codeunit 16401;
      TransactionType@1500002 : 'Purchase,Sale';
    BEGIN
      IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN BEGIN
        "GST on Advance Payment" := AdvancePayment;
        ClearGSTAmounts;
        CASE "Account Type" OF
          "Account Type"::Customer :
            GSTManagement.DeleteGSTBufferAdvPayment(Rec,TransactionType::Sale);
          "Account Type"::Vendor :
            GSTManagement.DeleteGSTBufferAdvPayment(Rec,TransactionType::Purchase);
        END;
      END;
    END;

    LOCAL PROCEDURE GetGSTAmounts@1500045(DocumentNo@1500909 : Code[20];ApplicationFactor@1500003 : Decimal;TransactionType@1500004 : 'Purchase,Sales,Transfer';EntryNo@1500005 : Integer);
    VAR
      DetailedGSTLedgerEntry@1500000 : Record 16419;
      DetailedGSTLedgerEntry1@1500007 : Record 16419;
      TotalGSTAmt@1500002 : Decimal;
      GSTBaseAmount@1500006 : Decimal;
    BEGIN
      DetailedGSTLedgerEntry.RESET;
      DetailedGSTLedgerEntry.SETCURRENTKEY("Transaction Type","Source No.","Original Doc. Type","Original Doc. No.","GST Group Code");
      DetailedGSTLedgerEntry.SETRANGE("Transaction Type",TransactionType);
      DetailedGSTLedgerEntry.SETRANGE("Source No.","Account No.");
      DetailedGSTLedgerEntry.SETRANGE("Original Doc. Type",DetailedGSTLedgerEntry."Original Doc. Type"::Payment);
      DetailedGSTLedgerEntry.SETRANGE("Original Doc. No.",DocumentNo);
      DetailedGSTLedgerEntry.SETRANGE("CLE/VLE Entry No.",EntryNo);
      DetailedGSTLedgerEntry.SETRANGE(Cess,FALSE);
      DetailedGSTLedgerEntry.SETFILTER("Payment Type",'<>%1',DetailedGSTLedgerEntry."Payment Type"::Normal);
      IF DetailedGSTLedgerEntry.FINDFIRST THEN BEGIN
        "GST Group Code" := DetailedGSTLedgerEntry."GST Group Code";
        "HSN/SAC Code" := DetailedGSTLedgerEntry."HSN/SAC Code";
        "GST Group Type" := DetailedGSTLedgerEntry."GST Group Type";
        "GST Jurisdiction Type" := DetailedGSTLedgerEntry."GST Jurisdiction Type";
        "GST Place of Supply" := DetailedGSTLedgerEntry."GST Place of Supply";
        "GST Reverse Charge" := DetailedGSTLedgerEntry."Reverse Charge";
        GSTBaseAmount :=
          GetAdvPaymentRemainingBaseAmount(
            TransactionType,EntryNo,DocumentNo,
            DetailedGSTLedgerEntry."GST Component Code");
        DetailedGSTLedgerEntry.SETRANGE(Cess);
        REPEAT
          TotalGSTAmt += DetailedGSTLedgerEntry."GST Amount";
        UNTIL DetailedGSTLedgerEntry.NEXT = 0;
      END;
      VALIDATE("GST Base Amount",GSTBaseAmount * ApplicationFactor);
      VALIDATE("Total GST Amount",TotalGSTAmt * ApplicationFactor);
    END;

    LOCAL PROCEDURE CheckShipCode@1500051();
    VAR
      ShiptoAddress@1500000 : Record 222;
    BEGIN
      "GST Ship-to State Code" := '';
      IF "Ship-to Code" <> '' THEN BEGIN
        ShiptoAddress.GET("Account No.","Ship-to Code");
        "GST Ship-to State Code" := ShiptoAddress.State;
      END;
      IF "GST on Advance Payment" THEN BEGIN
        IF ("GST Place of Supply" = "GST Place of Supply"::"Ship-to Address") AND ("Ship-to Code" = '') THEN
          ERROR(BlankShiptoCodeErr);
        CalculateGSTAmounts;
      END;
    END;

    LOCAL PROCEDURE GetAdvPaymentRemainingBaseAmount@1500036(TransactionType@1500001 : Option;EntryNo@1500002 : Integer;DocumentNo@1500003 : Code[20];GSTComponent@1500005 : Code[10]) GSTBaseAmount : Decimal;
    VAR
      DetailedGSTLedgerEntry@1500000 : Record 16419;
      DetailedGSTLedgerEntry1@1500401 : Record 16419;
      DetailedVendorLedgEntry@1500402 : Record 380;
      DetailedCustLedgEntry@1500403 : Record 379;
    BEGIN
      GSTBaseAmount := 0;
      WITH DetailedGSTLedgerEntry DO BEGIN
        RESET;
        SETCURRENTKEY("Transaction Type","Source No.","Original Doc. Type","Original Doc. No.","GST Group Code");
        SETRANGE("Transaction Type",TransactionType);
        SETRANGE("Source No.","Account No.");
        SETRANGE("Original Doc. Type","Original Doc. Type"::Payment);
        SETRANGE("Original Doc. No.",DocumentNo);
        SETRANGE("CLE/VLE Entry No.",EntryNo);
        SETRANGE("GST Component Code",GSTComponent);
        SETFILTER("Payment Type",'<>%1',"Payment Type"::Normal);
        SETRANGE(Cess,FALSE);
        IF FINDFIRST THEN
          REPEAT
            GSTBaseAmount += "GST Base Amount";
          UNTIL NEXT = 0;

        WITH DetailedGSTLedgerEntry1 DO BEGIN
          SETCURRENTKEY("Transaction Type","Source No.","Application Doc. Type","Application Doc. No","GST Group Code");
          SETRANGE("Transaction Type",TransactionType);
          SETRANGE("Source No.","Account No.");
          SETRANGE("Document Type","Document Type"::Refund);
          SETRANGE("Application Doc. Type","Application Doc. Type"::Payment);
          SETRANGE("Application Doc. No",DocumentNo);
          SETRANGE("CLE/VLE Entry No.",EntryNo);
          SETRANGE("GST Component Code",GSTComponent);
          SETFILTER("Payment Type",'<>%1',"Payment Type"::Normal);
          SETRANGE(Cess,FALSE);
          IF FINDLAST THEN BEGIN
            IF "Transaction Type" = "Transaction Type"::Purchase THEN BEGIN
              DetailedVendorLedgEntry.SETRANGE("Document No.","Document No.");
              DetailedVendorLedgEntry.SETRANGE(Unapplied,TRUE);
              IF DetailedVendorLedgEntry.FINDFIRST THEN BEGIN
                SETRANGE(Reversed,TRUE);
                IF NOT FINDFIRST THEN
                  ERROR(RefundUnapplicationErr,DocumentNo,"Document No.","Document No.");
              END;
            END;
            IF "Transaction Type" = "Transaction Type"::Sales THEN BEGIN
              DetailedCustLedgEntry.SETRANGE("Document No.","Document No.");
              DetailedCustLedgEntry.SETRANGE(Unapplied,TRUE);
              IF DetailedCustLedgEntry.FINDFIRST THEN BEGIN
                SETRANGE(Reversed,TRUE);
                IF NOT FINDFIRST THEN
                  ERROR(RefundUnapplicationErr,DocumentNo,"Document No.","Document No.");
              END;
            END;
          END;
        END;

        EXIT(GSTBaseAmount);
      END;
    END;

    BEGIN
    END.
  }
}

