OBJECT Codeunit 137222 PurchOrder Whse Validate Line
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1009 : Codeunit 130000;
      LibraryInventory@1001 : Codeunit 132201;
      LibraryPurchase@1007 : Codeunit 130512;
      LibraryUtility@1003 : Codeunit 131000;
      LibraryWarehouse@1010 : Codeunit 132204;
      IsInitialized@1000 : Boolean;
      ErrFieldMustNotBeChanged@1004 : TextConst 'ENU=%1 must not be changed when a %2 for this %3 exists';
      ErrStatusMustBeOpen@1006 : TextConst 'ENU=Status must be equal to ''Open''  in %1';
      ErrCannotBeDeleted@1002 : TextConst 'ENU=The %1 cannot be deleted when a related %2 exists';
      UnexpectedMessage@1005 : TextConst 'ENU=Unexpected message: "%1". Expected: "%2"';

    LOCAL PROCEDURE Initialize@25();
    VAR
      WarehouseSetup@1001 : Record 5769;
      PurchaseReceivablesSetup@1002 : Record 311;
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      IsInitialized := TRUE;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;
      DisableWarnings;

      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);

      PurchaseReceivablesSetup.GET;
      PurchaseReceivablesSetup."Order Nos." := LibraryUtility.GetGlobalNoSeriesCode;
      PurchaseReceivablesSetup.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE ReleasedPurchaseOrderTypeChang@135();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1001 : Record 39;
      Location@1002 : Record 14;
      Item@1000 : Record 27;
      WhseReceiptLine@1005 : Record 7317;
      ExpectedErrorMessage@1004 : Text[1024];
    BEGIN
      Initialize;
      TestPurchaseOrderSetup(PurchaseHeader,PurchaseLine,Item,Location);

      ExpectedErrorMessage := STRSUBSTNO(ErrFieldMustNotBeChanged,
          PurchaseLine.FIELDNAME(Type),WhseReceiptLine.TABLECAPTION,PurchaseLine.TABLECAPTION);

      ASSERTERROR PurchaseLine.VALIDATE(Type,PurchaseLine.Type::"Fixed Asset");
      IF STRPOS(GETLASTERRORTEXT,ExpectedErrorMessage) = 0 THEN
        Assert.Fail(STRSUBSTNO(UnexpectedMessage,GETLASTERRORTEXT,ExpectedErrorMessage));
      CLEARLASTERROR;
    END;

    [Test]
    PROCEDURE OpenPurchaseOrderTypeChange@12();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1001 : Record 39;
      Location@1002 : Record 14;
      Item@1000 : Record 27;
    BEGIN
      Initialize;
      TestPurchaseOrderSetup(PurchaseHeader,PurchaseLine,Item,Location);

      PurchaseOrderFieldChange(TRUE,PurchaseHeader,PurchaseLine,PurchaseLine.FIELDNO(Type),PurchaseLine.Type::"Fixed Asset");
    END;

    [Test]
    PROCEDURE ReleasedPurchaseOrderNoChange@13();
    BEGIN
      PurchaseOrderNoChange(FALSE);
    END;

    [Test]
    PROCEDURE OpenPurchaseOrderNoChange@119();
    BEGIN
      PurchaseOrderNoChange(TRUE);
    END;

    [Test]
    PROCEDURE ReleasedPurchaseOrderVariantCo@1();
    BEGIN
      PurchaseOrderVariantCodChange(FALSE);
    END;

    [Test]
    PROCEDURE OpenPurchaseOrderVariantCodCha@114();
    BEGIN
      PurchaseOrderVariantCodChange(TRUE);
    END;

    [Test]
    PROCEDURE ReleasedPurchaseOrderLocCodCha@116();
    BEGIN
      PurchaseOrderLocCodChange(FALSE);
    END;

    [Test]
    PROCEDURE OpenPurchaseOrderLocCodChange@115();
    BEGIN
      PurchaseOrderLocCodChange(TRUE);
    END;

    [Test]
    PROCEDURE ReleasedPurchaseOrderQtyChange@10();
    BEGIN
      PurchaseOrderQtyChange(FALSE);
    END;

    [Test]
    PROCEDURE OpenPurchaseOrderQtyChange@17();
    BEGIN
      PurchaseOrderQtyChange(TRUE);
    END;

    [Test]
    PROCEDURE ReleasedPurchaseOrderUOMChange@14();
    BEGIN
      PurchaseOrderUOMChange(FALSE);
    END;

    [Test]
    PROCEDURE OpenPurchaseOrderUOMChange@11();
    BEGIN
      PurchaseOrderUOMChange(TRUE);
    END;

    [Test]
    PROCEDURE ReleasedPurchaseOrderDelLines@19();
    VAR
      PurchaseHeader@1002 : Record 38;
      ExpectedErrorMessage@1004 : Text[1024];
    BEGIN
      ExpectedErrorMessage := STRSUBSTNO(ErrStatusMustBeOpen,PurchaseHeader.TABLECAPTION);

      PurchaseOrderDelLines(FALSE,ExpectedErrorMessage);
    END;

    [Test]
    PROCEDURE OpenPurchaseOrderDelLines@18();
    VAR
      PurchaseLine@1001 : Record 39;
      WhseReceiptLine@1005 : Record 7317;
      ExpectedErrorMessage@1004 : Text[1024];
    BEGIN
      ExpectedErrorMessage := STRSUBSTNO(ErrCannotBeDeleted,
          PurchaseLine.TABLECAPTION,WhseReceiptLine.TABLECAPTION);

      PurchaseOrderDelLines(TRUE,ExpectedErrorMessage);
    END;

    LOCAL PROCEDURE LocationSetup@2(VAR Location@1000 : Record 14);
    VAR
      Bin@1003 : Record 7354;
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      // Skip validate trigger for bin mandatory to improve performance.
      Location."Bin Mandatory" := TRUE;
      Location.VALIDATE("Require Receive",TRUE);
      Location.VALIDATE("Require Shipment",TRUE);
      Location.VALIDATE("Require Put-away",TRUE);
      Location.VALIDATE("Require Pick",TRUE);
      Location.MODIFY(TRUE);

      LibraryWarehouse.CreateBin(
        Bin,
        Location.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),
        '',
        '');

      Bin.VALIDATE(Dedicated,TRUE);
      Bin.MODIFY(TRUE);

      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
    END;

    LOCAL PROCEDURE DisableWarnings@8();
    VAR
      PurchaseReceivablesSetup@1000 : Record 311;
    BEGIN
      PurchaseReceivablesSetup.GET;
      PurchaseReceivablesSetup.VALIDATE("Credit Warnings",PurchaseReceivablesSetup."Credit Warnings"::"No Warning");
      PurchaseReceivablesSetup.VALIDATE("Stockout Warning",FALSE);
      PurchaseReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@31(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;Item@1002 : Record 27;Location@1003 : Record 14);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      // One of the test cases will try to update quantity to "original - 1" so it is important to have quantity at least 2
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",RANDOM(10) + 2);
      PurchaseLine.VALIDATE("Location Code",Location.Code);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE TestPurchaseOrderSetup@33(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;VAR Item@1002 : Record 27;VAR Location@1003 : Record 14);
    BEGIN
      LocationSetup(Location);

      LibraryInventory.CreateItem(Item);

      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item,Location);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
    END;

    LOCAL PROCEDURE PurchaseOrderFieldChange@39(Reopen@1007 : Boolean;PurchaseHeader@1001 : Record 38;PurchaseLine@1002 : Record 39;FieldNo@1004 : Integer;Value@1003 : Variant);
    VAR
      WhseReceiptLine@1011 : Record 7317;
      FieldRef@1009 : FieldRef;
      RecRef@1010 : RecordRef;
      ExpectedErrorMessage@1000 : Text[1024];
    BEGIN
      RecRef.GETTABLE(PurchaseLine);
      FieldRef := RecRef.FIELD(FieldNo);

      IF Reopen THEN BEGIN
        LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);
        ExpectedErrorMessage := STRSUBSTNO(ErrFieldMustNotBeChanged,
            FieldRef.NAME,WhseReceiptLine.TABLECAPTION,PurchaseLine.TABLECAPTION);
      END ELSE
        ExpectedErrorMessage := STRSUBSTNO(ErrStatusMustBeOpen,PurchaseHeader.TABLECAPTION);

      ASSERTERROR UpdatePurchaseLine(PurchaseLine,FieldNo,Value);
      IF STRPOS(GETLASTERRORTEXT,ExpectedErrorMessage) = 0 THEN
        Assert.Fail(STRSUBSTNO(UnexpectedMessage,GETLASTERRORTEXT,ExpectedErrorMessage));
      CLEARLASTERROR;
    END;

    LOCAL PROCEDURE PurchaseOrderDelLines@181(Reopen@1008 : Boolean;ExpectedErrorMessage@1009 : Text[1024]);
    VAR
      Item@1000 : Record 27;
      PurchaseLine@1001 : Record 39;
      PurchaseHeader@1002 : Record 38;
      Location@1003 : Record 14;
    BEGIN
      Initialize;
      TestPurchaseOrderSetup(PurchaseHeader,PurchaseLine,Item,Location);

      IF Reopen THEN BEGIN
        LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);
        PurchaseLine.SETRANGE("No.",PurchaseLine."No.");
        PurchaseLine.FINDFIRST;
      END;

      ASSERTERROR PurchaseLine.DELETEALL(TRUE);
      IF STRPOS(GETLASTERRORTEXT,ExpectedErrorMessage) = 0 THEN
        Assert.Fail(STRSUBSTNO(UnexpectedMessage,GETLASTERRORTEXT,ExpectedErrorMessage));
      CLEARLASTERROR;
    END;

    [Normal]
    LOCAL PROCEDURE PurchaseOrderNoChange@22(Reopen@1004 : Boolean);
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1001 : Record 39;
      Location@1002 : Record 14;
      Item@1000 : Record 27;
    BEGIN
      Initialize;
      TestPurchaseOrderSetup(PurchaseHeader,PurchaseLine,Item,Location);
      LibraryInventory.CreateItem(Item);

      PurchaseOrderFieldChange(Reopen,PurchaseHeader,PurchaseLine,PurchaseLine.FIELDNO("No."),Item."No.");
    END;

    LOCAL PROCEDURE PurchaseOrderVariantCodChange@36(Reopen@1004 : Boolean);
    VAR
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1001 : Record 39;
      Location@1003 : Record 14;
      Item@1002 : Record 27;
      ItemVariant@1000 : Record 5401;
    BEGIN
      Initialize;
      TestPurchaseOrderSetup(PurchaseHeader,PurchaseLine,Item,Location);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");

      PurchaseOrderFieldChange(Reopen,PurchaseHeader,PurchaseLine,PurchaseLine.FIELDNO("Variant Code"),ItemVariant.Code);
    END;

    LOCAL PROCEDURE PurchaseOrderLocCodChange@35(Reopen@1003 : Boolean);
    VAR
      PurchaseLine@1007 : Record 39;
      PurchaseHeader@1002 : Record 38;
      Location@1001 : Record 14;
      Item@1000 : Record 27;
    BEGIN
      Initialize;
      TestPurchaseOrderSetup(PurchaseHeader,PurchaseLine,Item,Location);
      LocationSetup(Location);

      PurchaseOrderFieldChange(Reopen,PurchaseHeader,PurchaseLine,PurchaseLine.FIELDNO("Location Code"),Location.Code);
    END;

    LOCAL PROCEDURE PurchaseOrderQtyChange@30(Reopen@1001 : Boolean);
    VAR
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1003 : Record 39;
      Location@1002 : Record 14;
      Item@1000 : Record 27;
    BEGIN
      Initialize;
      TestPurchaseOrderSetup(PurchaseHeader,PurchaseLine,Item,Location);

      PurchaseOrderFieldChange(Reopen,PurchaseHeader,PurchaseLine,PurchaseLine.FIELDNO(Quantity),PurchaseLine.Quantity - 1);
    END;

    LOCAL PROCEDURE PurchaseOrderUOMChange@29(Reopen@1004 : Boolean);
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1007 : Record 39;
      Location@1001 : Record 14;
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1005 : Record 5404;
    BEGIN
      Initialize;
      TestPurchaseOrderSetup(PurchaseHeader,PurchaseLine,Item,Location);
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);

      IF Reopen THEN
        LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);

      PurchaseLine.INIT;
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
      PurchaseLine.VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseLine@139(VAR PurchaseLine@1000 : Record 39;FieldNo@1001 : Integer;Value@1002 : Variant);
    VAR
      RecRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      // Update Sales Line base on Field and its corresponding value.
      RecRef.GETTABLE(PurchaseLine);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
      RecRef.SETTABLE(PurchaseLine);
      PurchaseLine.MODIFY(TRUE);
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [Order] [Purchase] [SCM]
      Testing Warehouse Validate Source Line functionality for Purchase Order
      by changing probable set of values and then validating by messages.

      NTF test case WI 57719.
    }
    END.
  }
}

