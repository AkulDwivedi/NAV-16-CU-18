OBJECT Codeunit 131001 Library - Dimension
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryUtility@1000 : Codeunit 131000;

    PROCEDURE BlockDimension@13(VAR Dimension@1000 : Record 348);
    BEGIN
      Dimension.VALIDATE(Blocked,TRUE);
      Dimension.MODIFY(TRUE);
    END;

    PROCEDURE BlockDimensionValue@14(VAR DimensionValue@1000 : Record 349);
    BEGIN
      DimensionValue.VALIDATE(Blocked,TRUE);
      DimensionValue.MODIFY(TRUE);
    END;

    PROCEDURE ChangeGlobalDimensions@30(GlobalDimension1Code@1001 : Code[20];GlobalDimension2Code@1002 : Code[20]);
    VAR
      ChangeGlobalDimensions@1000 : Report 83;
    BEGIN
      CLEAR(ChangeGlobalDimensions);
      ChangeGlobalDimensions.InitializeRequest(GlobalDimension1Code,GlobalDimension2Code);
      ChangeGlobalDimensions.USEREQUESTPAGE(FALSE);
      ChangeGlobalDimensions.RUN;
    END;

    PROCEDURE CreateDimension@7(VAR Dimension@1002 : Record 348);
    BEGIN
      Dimension.INIT;
      Dimension.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Dimension.FIELDNO(Code),DATABASE::Dimension),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Dimension,Dimension.FIELDNO(Code))));
      Dimension.INSERT(TRUE);
    END;

    PROCEDURE CreateDimensionCombination@53(VAR DimensionCombination@1000 : Record 350;Dimension1Code@1001 : Code[20];Dimension2Code@1002 : Code[20]);
    BEGIN
      DimensionCombination.INIT;
      DimensionCombination.VALIDATE("Dimension 1 Code",Dimension1Code);
      DimensionCombination.VALIDATE("Dimension 2 Code",Dimension2Code);
      DimensionCombination.INSERT(TRUE);
    END;

    PROCEDURE CreateDimensionValue@8(VAR DimensionValue@1002 : Record 349;DimensionCode@1001 : Code[20]);
    BEGIN
      DimensionValue.INIT;
      DimensionValue.VALIDATE("Dimension Code",DimensionCode);
      DimensionValue.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(DimensionValue.FIELDNO(Code),DATABASE::"Dimension Value"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Dimension Value",DimensionValue.FIELDNO(Code))));
      DimensionValue.INSERT(TRUE);
    END;

    PROCEDURE CreateDimensionValueWithCode@26(VAR DimensionValue@1002 : Record 349;DimensionValueCode@1000 : Code[20];DimensionCode@1001 : Code[20]);
    BEGIN
      DimensionValue.INIT;
      DimensionValue.VALIDATE("Dimension Code",DimensionCode);
      DimensionValue.VALIDATE(Code,
        COPYSTR(DimensionValueCode,1,LibraryUtility.GetFieldLength(DATABASE::"Dimension Value",DimensionValue.FIELDNO(Code))));
      DimensionValue.INSERT(TRUE);
    END;

    PROCEDURE CreateDimWithDimValue@22(VAR DimensionValue@1000 : Record 349);
    VAR
      Dimension@1001 : Record 348;
    BEGIN
      CreateDimension(Dimension);
      CreateDimensionValue(DimensionValue,Dimension.Code);
    END;

    PROCEDURE CreateDimValueCombination@11(VAR DimensionValueCombination@1000 : Record 351;Dimension1Code@1001 : Code[20];Dimension2Code@1002 : Code[20];Dimension1ValueCode@1004 : Code[20];Dimension2ValueCode@1003 : Code[20]);
    BEGIN
      DimensionValueCombination.INIT;
      DimensionValueCombination.VALIDATE("Dimension 1 Code",Dimension1Code);
      DimensionValueCombination.VALIDATE("Dimension 1 Value Code",Dimension1ValueCode);
      DimensionValueCombination.VALIDATE("Dimension 2 Code",Dimension2Code);
      DimensionValueCombination.VALIDATE("Dimension 2 Value Code",Dimension2ValueCode);
      DimensionValueCombination.INSERT(TRUE);
    END;

    PROCEDURE CreateDefaultDimension@1(VAR DefaultDimension@1000 : Record 352;TableID@1001 : Integer;No@1002 : Code[20];DimensionCode@1003 : Code[20];DimensionValueCode@1004 : Code[20]);
    BEGIN
      DefaultDimension.INIT;
      DefaultDimension.VALIDATE("Table ID",TableID);
      DefaultDimension.VALIDATE("No.",No);
      DefaultDimension.VALIDATE("Dimension Code",DimensionCode);
      DefaultDimension.VALIDATE("Dimension Value Code",DimensionValueCode);
      DefaultDimension.INSERT(TRUE);
    END;

    PROCEDURE CreateDefaultDimensionPriority@5(VAR DefaultDimensionPriority@1000 : Record 354;SourceCode@1001 : Code[10];TableID@1002 : Integer);
    BEGIN
      DefaultDimensionPriority.INIT;
      DefaultDimensionPriority.VALIDATE("Source Code",SourceCode);
      DefaultDimensionPriority.VALIDATE("Table ID",TableID);
      DefaultDimensionPriority.INSERT(TRUE);
    END;

    PROCEDURE CreateICDimension@18(VAR ICDimension@1002 : Record 411);
    BEGIN
      ICDimension.INIT;
      ICDimension.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ICDimension.FIELDNO(Code),DATABASE::"IC Dimension"),1,
          LibraryUtility.GetFieldLength(DATABASE::"IC Dimension",ICDimension.FIELDNO(Code))));
      ICDimension.INSERT(TRUE);
    END;

    PROCEDURE CreateICDimensionValue@17(VAR ICDimensionValue@1002 : Record 412;ICDimensionCode@1001 : Code[20]);
    BEGIN
      ICDimensionValue.INIT;
      ICDimensionValue.VALIDATE("Dimension Code",ICDimensionCode);
      ICDimensionValue.VALIDATE(
        Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ICDimensionValue.FIELDNO(Code),DATABASE::"IC Dimension Value"),1,
          LibraryUtility.GetFieldLength(DATABASE::"IC Dimension Value",ICDimensionValue.FIELDNO(Code))));
      ICDimensionValue.INSERT(TRUE);
    END;

    PROCEDURE CreateAndMapICDimFromDim@27(VAR ICDimension@1001 : Record 411;DimensionCode@1002 : Code[20]);
    BEGIN
      ICDimension.INIT;
      ICDimension.VALIDATE(Code,DimensionCode);
      ICDimension.VALIDATE("Map-to Dimension Code",DimensionCode);
      ICDimension.INSERT(TRUE);
    END;

    PROCEDURE CreateAndMapICDimValueFromDimValue@32(VAR ICDimensionValue@1000 : Record 412;DimensionValueCode@1001 : Code[20];DimensionCode@1002 : Code[20]);
    BEGIN
      ICDimensionValue.INIT;
      ICDimensionValue.VALIDATE("Dimension Code",DimensionCode);
      ICDimensionValue.VALIDATE(Code,DimensionValueCode);
      ICDimensionValue.VALIDATE("Map-to Dimension Code",DimensionCode);
      ICDimensionValue.VALIDATE("Map-to Dimension Value Code",DimensionValueCode);
      ICDimensionValue.INSERT(TRUE);
    END;

    PROCEDURE CreateServiceContractDimension@4(VAR ServiceContractHeader@1000 : Record 5965;DimensionCode@1005 : Code[20];DimensionValueCode@1006 : Code[20]);
    VAR
      DimSetID@1001 : Integer;
    BEGIN
      DimSetID := CreateDimSet(ServiceContractHeader."Dimension Set ID",DimensionCode,DimensionValueCode);
      ServiceContractHeader.VALIDATE("Dimension Set ID",DimSetID);
      ServiceContractHeader.MODIFY(TRUE);
    END;

    PROCEDURE CreateAccTypeDefaultDimension@9(VAR DefaultDimension@1003 : Record 352;TableID@1001 : Integer;DimensionCode@1000 : Code[20];DimensionValueCode@1002 : Code[20];ValuePosting@1004 : Option);
    BEGIN
      CreateDefaultDimension(DefaultDimension,TableID,' ',DimensionCode,DimensionValueCode);
      DefaultDimension.VALIDATE("Value Posting",ValuePosting);
      DefaultDimension.MODIFY(TRUE);
    END;

    PROCEDURE CreateDefaultDimensionCustomer@21(VAR DefaultDimension@1003 : Record 352;CustomerNo@1001 : Code[20];DimensionCode@1000 : Code[20];DimensionValueCode@1002 : Code[20]);
    BEGIN
      CreateDefaultDimension(DefaultDimension,DATABASE::Customer,CustomerNo,DimensionCode,DimensionValueCode);
    END;

    PROCEDURE CreateDefaultDimensionGLAcc@16(VAR DefaultDimension@1003 : Record 352;GLAccountNo@1001 : Code[20];DimensionCode@1000 : Code[20];DimensionValueCode@1002 : Code[20]);
    BEGIN
      CreateDefaultDimension(DefaultDimension,DATABASE::"G/L Account",GLAccountNo,DimensionCode,DimensionValueCode);
    END;

    PROCEDURE CreateDefaultDimensionItem@12(VAR DefaultDimension@1003 : Record 352;ItemNo@1001 : Code[20];DimensionCode@1000 : Code[20];DimensionValueCode@1002 : Code[20]);
    BEGIN
      CreateDefaultDimension(DefaultDimension,DATABASE::Item,ItemNo,DimensionCode,DimensionValueCode);
    END;

    PROCEDURE CreateDefaultDimensionResource@19(VAR DefaultDimension@1003 : Record 352;ResourceNo@1001 : Code[20];DimensionCode@1000 : Code[20];DimensionValueCode@1002 : Code[20]);
    BEGIN
      CreateDefaultDimension(DefaultDimension,DATABASE::Resource,ResourceNo,DimensionCode,DimensionValueCode);
    END;

    PROCEDURE CreateDefaultDimensionVendor@10(VAR DefaultDimension@1003 : Record 352;VendorNo@1001 : Code[20];DimensionCode@1000 : Code[20];DimensionValueCode@1002 : Code[20]);
    BEGIN
      CreateDefaultDimension(DefaultDimension,DATABASE::Vendor,VendorNo,DimensionCode,DimensionValueCode);
    END;

    PROCEDURE CreateSelectedDimension@46(VAR SelectedDimension@1000 : Record 369;ObjectType@1001 : Option;ObjectID@1002 : Integer;AnalysisViewCode@1003 : Code[10];DimensionCode@1004 : Text[30]);
    BEGIN
      CLEAR(SelectedDimension);
      SelectedDimension."User ID" := USERID;
      SelectedDimension.VALIDATE("Object Type",ObjectType);
      SelectedDimension.VALIDATE("Object ID",ObjectID);
      SelectedDimension.VALIDATE("Analysis View Code",AnalysisViewCode);
      SelectedDimension.VALIDATE("Dimension Code",DimensionCode);
      SelectedDimension.INSERT(TRUE);
    END;

    PROCEDURE EditDimSet@2(DimSetID@1002 : Integer;DimCode@1000 : Code[20];DimValCode@1001 : Code[20]) : Integer;
    VAR
      TempDimSetEntry@1003 : TEMPORARY Record 480;
      DimVal@1006 : Record 349;
      DimMgt@1005 : Codeunit 408;
      NewDimSetID@1004 : Integer;
    BEGIN
      // Edit existing dimension value for the given dimension on document, document line and journal
      // DimSetID: existing dimension set ID on document, document line and journal
      // Return new Dimension Set ID.

      DimMgt.GetDimensionSet(TempDimSetEntry,DimSetID);

      DimVal.GET(DimCode,DimValCode);
      TempDimSetEntry.SETRANGE("Dimension Code",DimVal."Dimension Code");
      TempDimSetEntry.FINDFIRST;
      TempDimSetEntry.VALIDATE("Dimension Value Code",DimVal.Code);
      TempDimSetEntry.VALIDATE("Dimension Value ID",DimVal."Dimension Value ID");
      TempDimSetEntry.MODIFY(TRUE);

      TempDimSetEntry.RESET;
      NewDimSetID := DimMgt.GetDimensionSetID(TempDimSetEntry);
      TempDimSetEntry.DELETEALL;
      EXIT(NewDimSetID);
    END;

    PROCEDURE DeleteDimSet@3(DimSetID@1002 : Integer;DimCode@1000 : Code[20]) : Integer;
    VAR
      TempDimSetEntry@1003 : TEMPORARY Record 480;
      DimMgt@1005 : Codeunit 408;
      NewDimSetID@1001 : Integer;
    BEGIN
      // Delete existing dimension and dimension value on document, document line and journal
      // DimSetID: existing dimension set ID on document, document line and journal
      // Return new Dimension Set ID.

      DimMgt.GetDimensionSet(TempDimSetEntry,DimSetID);

      TempDimSetEntry.SETRANGE("Dimension Code",DimCode);
      TempDimSetEntry.FINDFIRST;
      TempDimSetEntry.DELETE(TRUE);

      TempDimSetEntry.RESET;
      NewDimSetID := DimMgt.GetDimensionSetID(TempDimSetEntry);
      TempDimSetEntry.DELETEALL;
      EXIT(NewDimSetID);
    END;

    PROCEDURE CreateDimSet@6(DimSetID@1002 : Integer;DimCode@1000 : Code[20];DimValCode@1001 : Code[20]) : Integer;
    VAR
      TempDimSetEntry@1003 : TEMPORARY Record 480;
      DimVal@1006 : Record 349;
      DimMgt@1005 : Codeunit 408;
      NewDimSetID@1004 : Integer;
    BEGIN
      // Insert new dimension and dimension value on document, document line and journal
      // DimSetID: existing dimension set ID on document, document line and journal
      // Return new Dimension Set ID.

      DimMgt.GetDimensionSet(TempDimSetEntry,DimSetID);
      DimVal.GET(DimCode,DimValCode);

      TempDimSetEntry.VALIDATE("Dimension Code",DimVal."Dimension Code");
      TempDimSetEntry.VALIDATE("Dimension Value Code",DimValCode);
      TempDimSetEntry.VALIDATE("Dimension Value ID",DimVal."Dimension Value ID");
      TempDimSetEntry.INSERT(TRUE);

      NewDimSetID := DimMgt.GetDimensionSetID(TempDimSetEntry);
      TempDimSetEntry.DELETEALL;
      EXIT(NewDimSetID);
    END;

    PROCEDURE FindDefaultDimension@219(VAR DefaultDimension@1000 : Record 352;TableID@1001 : Integer;No@1002 : Code[20]) : Boolean;
    BEGIN
      DefaultDimension.SETRANGE("Table ID",TableID);
      DefaultDimension.SETRANGE("No.",No);
      EXIT(DefaultDimension.FINDSET);
    END;

    PROCEDURE FindDimension@15(VAR Dimension@1000 : Record 348);
    BEGIN
      Dimension.SETRANGE(Blocked,FALSE);
      Dimension.FINDSET;
    END;

    PROCEDURE FindDimensionValue@78(VAR DimensionValue@1000 : Record 349;DimensionCode@1001 : Code[20]);
    BEGIN
      DimensionValue.SETRANGE("Dimension Code",DimensionCode);
      DimensionValue.SETRANGE(Blocked,FALSE);
      DimensionValue.SETRANGE("Dimension Value Type",DimensionValue."Dimension Value Type"::Standard);
      DimensionValue.FINDSET;
    END;

    PROCEDURE FindDifferentDimensionValue@126(DimensionCode@1001 : Code[20];DimensionValueCode@1002 : Code[20]) : Code[20];
    VAR
      DimensionValue@1000 : Record 349;
    BEGIN
      DimensionValue.SETFILTER(Code,'<>%1',DimensionValueCode);
      FindDimensionValue(DimensionValue,DimensionCode);
      EXIT(DimensionValue.Code);
    END;

    PROCEDURE FindDimensionSetEntry@117(VAR DimensionSetEntry@1000 : Record 480;DimensionSetID@1001 : Integer);
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
      DimensionSetEntry.FINDSET;
    END;

    PROCEDURE GetNextDimensionValue@20(VAR DimensionValue@1000 : Record 349);
    BEGIN
      DimensionValue.NEXT;
    END;

    PROCEDURE ResetDefaultDimensions@166(TableID@1000 : Integer;No@1001 : Code[20]);
    VAR
      DefaultDimension@1002 : Record 352;
    BEGIN
      DefaultDimension.SETRANGE("Table ID",TableID);
      DefaultDimension.SETRANGE("No.",No);
      DefaultDimension.DELETEALL;
    END;

    BEGIN
    {
      Contains all utility functions related to Dimensions.
    }
    END.
  }
}

