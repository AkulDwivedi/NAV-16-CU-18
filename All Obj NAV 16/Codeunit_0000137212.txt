OBJECT Codeunit 137212 SCM Copy Document Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1004 : Codeunit 132201;
      LibraryUtility@1001 : Codeunit 131000;
      LibrarySales@1008 : Codeunit 130509;
      LibraryPurchase@1006 : Codeunit 130512;
      LibraryAssembly@1002 : Codeunit 132207;
      Assert@1009 : Codeunit 130000;
      CopyDocumentMgt@1000 : Codeunit 6620;
      LibraryDimension@1010 : Codeunit 131001;
      LibraryResource@1007 : Codeunit 130511;
      LibraryERM@1012 : Codeunit 131300;
      LibraryVariableStorage@1013 : Codeunit 131004;
      LibraryRandom@1011 : Codeunit 130440;
      IsInitialized@1005 : Boolean;
      SalesDocType@1003 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      MsgCorrectedInvoiceNo@1041 : TextConst 'ENU=have a Corrected Invoice No. Do you want to continue?';
      WrongDimensionsCopiedErr@1042 : TextConst 'ENU=Wrong dimensions in copied document';
      PurchDocType@1014 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      ItemTrackingMode@1015 : 'Assign Lot No.,Select Entries,Assign Serial Nos.';

    LOCAL PROCEDURE CopyDocument@51(SourceType@1000 : Option;SourceUnpostedType@1004 : Option;DestType@1003 : Option);
    VAR
      SalesHeader@1005 : Record 36;
      SourceNo@1001 : Code[20];
      DestNo@1002 : Code[20];
    BEGIN
      Initialize;
      SourceNo := CreateSourceDocument(SourceType,SourceUnpostedType);
      CreateEmptySalesHeader(SalesHeader,DestType);
      DestNo := CopyToDestinationSalesDocument(SourceType,SourceNo,SalesHeader);
      VerifyCopy(SourceType,SourceNo,DestType,DestNo);
    END;

    [Test]
    PROCEDURE CopySalesOrderToSalesOrder@53();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      CopyDocument(SalesDocType::Order,SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE CopyQuoteToSalesOrder@13();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      CopyDocument(SalesDocType::Quote,SalesHeader."Document Type"::Quote,SalesHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE CopyInvoiceToReturnOrder@79();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      CopyDocument(SalesDocType::"Posted Invoice",SalesHeader."Document Type"::Order,SalesHeader."Document Type"::"Return Order");
    END;

    [Test]
    PROCEDURE CopyShipmentToQuote@80();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      CopyDocument(SalesDocType::"Posted Shipment",SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Quote);
    END;

    [Test]
    PROCEDURE CopyReturnOrderToCrMemo@81();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      CopyDocument(
        SalesDocType::"Return Order",SalesHeader."Document Type"::"Return Order",SalesHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CopyCrMemoToInvoice@82();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      ExecuteConfirmHandler;
      CopyDocument(
        SalesDocType::"Posted Credit Memo",SalesHeader."Document Type"::"Return Order",SalesHeader."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CopyReceiptToBlanketOrder@118();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      ExecuteConfirmHandler;
      CopyDocument(SalesDocType::"Posted Return Receipt",
        SalesHeader."Document Type"::"Return Order",SalesHeader."Document Type"::"Blanket Order");
    END;

    [Test]
    PROCEDURE CopyItemChargeAssignment@38();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      SalesHeader2@1002 : Record 36;
      SalesShipmentHeader@1003 : Record 110;
      SalesShipmentLine@1004 : Record 111;
      ItemChargeAssignmentSales@1005 : Record 5809;
      SourceNo@1006 : Code[20];
    BEGIN
      // [FEATURE] [Item Charge]
      Initialize;

      SourceNo := CreateSourceDocument(SalesDocType::"Posted Shipment",SalesHeader."Document Type"::Order);
      SalesShipmentHeader.GET(SourceNo);
      SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.");
      SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
      SalesShipmentLine.FINDFIRST;

      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,SalesShipmentHeader."Sell-to Customer No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::"Charge (Item)",CreateItemCharge,1);
      SalesLine.VALIDATE("Unit Price",RANDOM(10000) / 100);
      SalesLine.MODIFY(TRUE);
      LibraryInventory.CreateItemChargeAssignment(ItemChargeAssignmentSales,
        SalesLine,ItemChargeAssignmentSales."Applies-to Doc. Type"::Shipment,
        SalesShipmentLine."Document No.",SalesShipmentLine."Line No.",SalesShipmentLine."No.");

      LibrarySales.CreateSalesHeader(SalesHeader2,
        SalesHeader2."Document Type"::Order,SalesShipmentHeader."Sell-to Customer No.");

      CopyDocumentMgt.CopySalesDoc(SalesDocType::Order,
        SalesHeader."No.",SalesHeader2);

      VerifyShipmntItemChargeAssngmt(SalesHeader2,SalesShipmentLine."No.");
    END;

    [Test]
    PROCEDURE TestOverwriteHeader@8();
    VAR
      SalesHeader@1001 : Record 36;
      SourceType@1007 : Option;
      DestType@1006 : Option;
      SourceNo@1002 : Code[20];
      DestNo@1005 : Code[20];
      ExpectedErrorMsg@1000 : Text[50];
    BEGIN
      Initialize;

      SourceType := SalesDocType::Order;
      DestType := SalesHeader."Document Type"::Order;
      SourceNo := CreateSourceDocument(SourceType,SalesHeader."Document Type"::Order);

      LibrarySales.CreateSalesHeader(SalesHeader,
        CopyDocumentMgt.SalesHeaderDocType(SourceType),CreateCustomer);
      DestNo := CopyToDestinationSalesDocument(SourceType,SourceNo,SalesHeader);
      VerifyCopy(SourceType,SourceNo,DestType,DestNo);

      CopyDocumentMgt.SetProperties(FALSE,TRUE,FALSE,FALSE,TRUE,FALSE,FALSE);
      CLEAR(SalesHeader);
      LibrarySales.CreateSalesHeader(SalesHeader,
        CopyDocumentMgt.SalesHeaderDocType(SourceType),CreateCustomer);

      DestNo := CopyToDestinationSalesDocument(SourceType,SourceNo,SalesHeader);

      ASSERTERROR VerifyCopy(SourceType,SourceNo,DestType,DestNo);

      ExpectedErrorMsg := 'Sell-to Customer No. must be equal to';

      Assert.AreEqual(COPYSTR(GETLASTERRORTEXT,1,STRLEN(ExpectedErrorMsg)),ExpectedErrorMsg,
        STRSUBSTNO('Unexpected error message when validating copied header. Got %1, expected %2.',
          GETLASTERRORTEXT,ExpectedErrorMsg));
    END;

    [Test]
    PROCEDURE CopySalesQuoteWithoutCustomer@19();
    VAR
      SalesHeader@1000 : Record 36;
      SalesHeader2@1001 : Record 36;
    BEGIN
      // [SCENARIO 71922] No error occurs while creating Sales Quote from Copy Document.
      // [GIVEN] Create Sales Quote without Sell-to Customer No.
      Initialize;
      CreateSalesQuote(SalesHeader);
      CreateEmptySalesHeader(SalesHeader2,SalesHeader2."Document Type"::Quote);

      // [WHEN] Create a Sales Quote with Copy Document.
      CopyDocumentMgt.CopySalesDoc(SalesDocType::Quote,SalesHeader."No.",SalesHeader2);

      // [THEN] Sales Quote Created With Copy Document.
      ValidateCopiedSalesHeaderAndSalesLines(SalesHeader2,SalesHeader2."Document Type",SalesHeader."No.");
    END;

    [Test]
    PROCEDURE CopyDimensionsSalesDocumentRecalculateLines@91();
    BEGIN
      CopyDimensionsSalesDocument(TRUE);
    END;

    [Test]
    PROCEDURE CopyDimensionsSalesDocumentNoRecalculateLines@92();
    BEGIN
      CopyDimensionsSalesDocument(FALSE);
    END;

    [Test]
    PROCEDURE CopyDimensionsPurchaseDocumentRecalculateLines@93();
    BEGIN
      CopyDimensionsPurchaseDocument(TRUE);
    END;

    [Test]
    PROCEDURE CopyDimensionsPurchaseDocumentNoRecalculateLines@94();
    BEGIN
      CopyDimensionsPurchaseDocument(FALSE);
    END;

    [Test]
    PROCEDURE CopyDimensionsSalesLineRecalculateLines@72();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      PostedDocNo@1004 : Code[20];
      DefaultDimSetID@1005 : Integer;
    BEGIN
      // [SCENARIO 371951] Default Dimensions used for Sales Document when running Copy Sales Document with "Recalculate Lines" = Yes
      // [FEATURE] [Sales] [Dimension] [Recalculate Lines]

      Initialize;
      CopyDocumentMgt.SetProperties(TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,FALSE);
      // [GIVEN] Posted Sales Order with Dimension Set ID in Sales Line = "X" (different from Default Dimension Set ID = "Y")
      DefaultDimSetID := PostSalesOrderWithUpdatedDimensions(SalesLine,PostedDocNo);
      LibrarySales.CreateSalesHeader(
        SalesHeader,SalesHeader."Document Type"::Order,SalesLine."Bill-to Customer No.");

      // [WHEN] Copy Sales Document with "Recalculate Lines" = Yes
      CopyToDestinationSalesDocument(SalesDocType::"Posted Invoice",PostedDocNo,SalesHeader);

      // [THEN] Dimension Set ID of copied Sales Line = "X"
      FindSalesLine(SalesHeader,SalesLine);
      SalesLine.TESTFIELD("Dimension Set ID",DefaultDimSetID);
    END;

    [Test]
    PROCEDURE CopyDimensionsSalesLineNoRecalculateLines@68();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      PostedDocNo@1004 : Code[20];
      ExpectedDimSetID@1005 : Integer;
    BEGIN
      // [SCENARIO 371951] Dimensions from Posted Sales Order used for Sales Document when running Copy Sales Document with "Recalculate Lines" = No
      // [FEATURE] [Sales] [Dimension]

      Initialize;
      // [GIVEN] Posted Sales Order with Dimension Set ID in Sales Line = "X" (different from Default Dimension Set ID = "Y")
      PostSalesOrderWithUpdatedDimensions(SalesLine,PostedDocNo);
      ExpectedDimSetID := SalesLine."Dimension Set ID";
      LibrarySales.CreateSalesHeader(
        SalesHeader,SalesHeader."Document Type"::Order,SalesLine."Bill-to Customer No.");

      // [WHEN] Copy Sales Document with "Recalculate Lines" = No
      CopyToDestinationSalesDocument(SalesDocType::"Posted Invoice",PostedDocNo,SalesHeader);

      // [THEN] Dimension Set ID of copied Sales Line = "Y"
      FindSalesLine(SalesHeader,SalesLine);
      SalesLine.TESTFIELD("Dimension Set ID",ExpectedDimSetID);
    END;

    [Test]
    PROCEDURE CopyDimensionsPurchLineRecalculateLines@96();
    VAR
      PurchHeader@1000 : Record 38;
      PurchLine@1001 : Record 39;
      PostedDocNo@1004 : Code[20];
      DefaultDimSetID@1005 : Integer;
    BEGIN
      // [SCENARIO 371951] Default Dimensions used for Purchase Document when running Copy Purch. Document with "Recalculate Lines" = Yes
      // [FEATURE] [Purchase] [Dimension] [Recalculate Lines]

      Initialize;
      CopyDocumentMgt.SetProperties(TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,FALSE);
      // [GIVEN] Posted Purch. Order with Dimension Set ID in Purch. Line = "X" (different from Default Dimension Set ID = "Y")
      DefaultDimSetID := PostPurchOrderWithUpdatedDimensions(PurchLine,PostedDocNo);
      LibraryPurchase.CreatePurchHeader(
        PurchHeader,PurchHeader."Document Type"::Order,PurchLine."Pay-to Vendor No.");

      // [WHEN] Copy Purch. Document with "Recalculate Lines" = Yes
      CopyToDestinationPurchaseDocument(SalesDocType::"Posted Invoice",PostedDocNo,PurchHeader);

      // [THEN] Dimension Set ID of copied Purch. Line = "X"
      FindPurchLine(PurchHeader,PurchLine);
      PurchLine.TESTFIELD("Dimension Set ID",DefaultDimSetID);
    END;

    [Test]
    PROCEDURE CopyDimensionsPurchLineNoRecalculateLines@95();
    VAR
      PurchHeader@1003 : Record 38;
      PurchLine@1002 : Record 39;
      PostedDocNo@1001 : Code[20];
      ExpectedDimSetID@1000 : Integer;
    BEGIN
      // [SCENARIO 371951] Dimensions from Posted Purchase Order used for Purchase Document when running Copy Purch. Document with "Recalculate Lines" = No
      // [FEATURE] [Purchase] [Dimension]

      Initialize;
      // [GIVEN] Posted Purch. Order with Dimension Set ID in Purch. Line = "X" (different from Default Dimension Set ID = "Y")
      PostPurchOrderWithUpdatedDimensions(PurchLine,PostedDocNo);
      ExpectedDimSetID := PurchLine."Dimension Set ID";
      LibraryPurchase.CreatePurchHeader(
        PurchHeader,PurchHeader."Document Type"::Order,PurchLine."Pay-to Vendor No.");

      // [WHEN] Copy Purch. Document with "Recalculate Lines" = No
      CopyToDestinationPurchaseDocument(SalesDocType::"Posted Invoice",PostedDocNo,PurchHeader);

      // [THEN] Dimension Set ID of copied Purch. Line = "Y"
      FindPurchLine(PurchHeader,PurchLine);
      PurchLine.TESTFIELD("Dimension Set ID",ExpectedDimSetID);
    END;

    [Test]
    PROCEDURE CopyTwoItemChargesAssignedToOneReceipt@1();
    VAR
      PurchaseHeader@1005 : ARRAY [2] OF Record 38;
      PurchaseLine@1001 : Record 39;
      Item@1007 : Record 27;
      ItemRcptNo@1006 : Code[20];
      ChargeRcptNo@1008 : Code[20];
      Quantity@1003 : Integer;
      I@1000 : Integer;
    BEGIN
      // [FEATURE] [Item Charge] [Get Receipt Lines]
      // [SCENARIO 377987] "Get Receipt Lines" function copies all item charges assigned to a single purchase receipt line
      Initialize;

      // [GIVEN] Create a purchase order with one line of type "Item"
      LibraryPurchase.CreatePurchHeader(PurchaseHeader[1],PurchaseHeader[1]."Document Type"::Order,'');
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader[1],PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));

      // [GIVEN] Post receipt
      ItemRcptNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader[1],TRUE,FALSE);

      Quantity := LibraryRandom.RandInt(10);
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader[1]);

      // [GIVEN] Create two item charge lines and assign to the posted receipt
      FOR I := 1 TO 2 DO
        CreateItemChargePurchaseLine(
          PurchaseLine,PurchaseHeader[1],ItemRcptNo,FindPurchRcptLineNo(ItemRcptNo,1),Item."No.",Quantity,Quantity);

      // [GIVEN] Post item charges receipt
      ChargeRcptNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader[1],TRUE,FALSE);

      // [WHEN] Create a purchase invoice and copy lines from posted receipts
      CreatePurchaseInvoiceCopyFromReceipt(
        PurchaseHeader[2],PurchaseHeader[1]."Pay-to Vendor No.",STRSUBSTNO('%1|%2',ItemRcptNo,ChargeRcptNo));

      // [THEN] All item charge assignments are copied into the new invoice
      VerifyItemChargeAssignmentPurchCopied(
        PurchaseHeader[1]."Document Type",PurchaseHeader[1]."No.",
        PurchaseHeader[2]."Document Type",PurchaseHeader[2]."No.");
    END;

    [Test]
    PROCEDURE CopyOneItemChargeAssignedToTwoReceipts@50();
    VAR
      PurchaseHeader@1000 : ARRAY [2] OF Record 38;
      PurchaseLine@1001 : Record 39;
      Item@1007 : Record 27;
      ItemRcptNo@1006 : Code[20];
      ChargeRcptNo@1008 : Code[20];
      Quantity@1003 : Integer;
      I@1002 : Integer;
    BEGIN
      // [FEATURE] [Item Charge] [Get Receipt Lines]
      // [SCENARIO 377987] "Get Receipt Lines" function copies item charge assignments when a single item charge line is assigned to several purchase receipt lines

      Initialize;

      // [GIVEN] Create a purchase order with two lines of type "Item"
      LibraryPurchase.CreatePurchHeader(PurchaseHeader[1],PurchaseHeader[1]."Document Type"::Order,'');
      LibraryInventory.CreateItem(Item);

      FOR I := 1 TO 2 DO
        LibraryPurchase.CreatePurchaseLine(
          PurchaseLine,PurchaseHeader[1],PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));

      // [GIVEN] Post receipt
      ItemRcptNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader[1],TRUE,FALSE);

      // [GIVEN] Create one item charge line and split item charge amount among posted receipt lines
      Quantity := LibraryRandom.RandInt(10);
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader[1]);
      CreateItemChargePurchaseLine(
        PurchaseLine,PurchaseHeader[1],ItemRcptNo,FindPurchRcptLineNo(ItemRcptNo,1),Item."No.",Quantity * 2,Quantity);

      CreateItemChargeAssignmentPurch(PurchaseLine,ItemRcptNo,FindPurchRcptLineNo(ItemRcptNo,2),Item."No.",Quantity);
      ChargeRcptNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader[1],TRUE,FALSE);

      // [WHEN] Create a purchase invoice and copy lines from posted receipts
      CreatePurchaseInvoiceCopyFromReceipt(
        PurchaseHeader[2],PurchaseHeader[1]."Pay-to Vendor No.",STRSUBSTNO('%1|%2',ItemRcptNo,ChargeRcptNo));

      // [THEN] All item charge assignments are copied into the new invoice
      VerifyItemChargeAssignmentPurchCopied(
        PurchaseHeader[1]."Document Type",PurchaseHeader[1]."No.",
        PurchaseHeader[2]."Document Type",PurchaseHeader[2]."No.");
    END;

    [Test]
    PROCEDURE CopyTwoItemChargesAssignedToOneShipment@106();
    VAR
      SalesHeader@1005 : ARRAY [2] OF Record 36;
      SalesLine@1001 : Record 37;
      Item@1007 : Record 27;
      ItemShptNo@1006 : Code[20];
      ChargeShptNo@1008 : Code[20];
      Quantity@1003 : Integer;
      I@1000 : Integer;
    BEGIN
      // [FEATURE] [Item Charge] [Get Shipment Lines]
      // [SCENARIO 377987] "Get Shipment Lines" function copies all item charges assigned to a single sales shipment line

      Initialize;

      // [GIVEN] Create a sales order with one line of type "Item"
      LibrarySales.CreateSalesHeader(SalesHeader[1],SalesHeader[1]."Document Type"::Order,'');
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader[1],SalesLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));

      // [GIVEN] Post shipment
      ItemShptNo := LibrarySales.PostSalesDocument(SalesHeader[1],TRUE,FALSE);

      // [GIVEN] Create two item charge lines and assign to the posted shipment
      Quantity := LibraryRandom.RandInt(10);
      LibrarySales.ReopenSalesDocument(SalesHeader[1]);

      FOR I := 1 TO 2 DO
        CreateItemChargeSalesLine(
          SalesLine,SalesHeader[1],ItemShptNo,FindSalesShptLineNo(ItemShptNo,1),Item."No.",Quantity,Quantity);

      // [GIVEN] Post item charges shipment
      ChargeShptNo := LibrarySales.PostSalesDocument(SalesHeader[1],TRUE,FALSE);

      // [WHEN] Create a sales invoice and copy lines from posted shipments
      CreateSalesInvoiceCopyFromShipment(
        SalesHeader[2],SalesHeader[1]."Bill-to Customer No.",STRSUBSTNO('%1|%2',ItemShptNo,ChargeShptNo));

      // [THEN] All item charge assignments are copied into the new invoice
      VerifyItemChargeAssignmentSalesCopied(
        SalesHeader[1]."Document Type",SalesHeader[1]."No.",
        SalesHeader[2]."Document Type",SalesHeader[2]."No.");
    END;

    [Test]
    PROCEDURE CopyOneItemChargeAssignedToTwoShipments@105();
    VAR
      SalesHeader@1000 : ARRAY [2] OF Record 36;
      SalesLine@1001 : Record 37;
      Item@1007 : Record 27;
      ItemShptNo@1006 : Code[20];
      ChargeShptNo@1008 : Code[20];
      Quantity@1003 : Integer;
      I@1002 : Integer;
    BEGIN
      // [FEATURE] [Item Charge] [Get Shipment Lines]
      // [SCENARIO 377987] "Get Shipment Lines" function copies item charge assignments when a single item charge line is assigned to several sales shipment lines

      Initialize;

      // [GIVEN] Create a sales order with two lines of type "Item"
      LibrarySales.CreateSalesHeader(SalesHeader[1],SalesHeader[1]."Document Type"::Order,'');
      LibraryInventory.CreateItem(Item);

      FOR I := 1 TO 2 DO
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader[1],SalesLine.Type::Item,Item."No.",LibraryRandom.RandInt(10));

      // [GIVEN] Post shipment
      ItemShptNo := LibrarySales.PostSalesDocument(SalesHeader[1],TRUE,FALSE);

      // [GIVEN] Create one item charge line and split item charge amount among posted shipment lines
      Quantity := LibraryRandom.RandInt(10);
      LibrarySales.ReopenSalesDocument(SalesHeader[1]);
      CreateItemChargeSalesLine(
        SalesLine,SalesHeader[1],ItemShptNo,FindSalesShptLineNo(ItemShptNo,1),Item."No.",Quantity * 2,Quantity);

      CreateItemChargeAssignmentSales(SalesLine,ItemShptNo,FindSalesShptLineNo(ItemShptNo,2),Item."No.",Quantity);

      // [GIVEN] Post item charges shipment
      ChargeShptNo := LibrarySales.PostSalesDocument(SalesHeader[1],TRUE,FALSE);

      // [WHEN] Create a sales invoice and copy lines from posted shipments
      CreateSalesInvoiceCopyFromShipment(
        SalesHeader[2],SalesHeader[1]."Bill-to Customer No.",STRSUBSTNO('%1|%2',ItemShptNo,ChargeShptNo));

      // [THEN] All item charge assignments are copied into the new invoice
      VerifyItemChargeAssignmentSalesCopied(
        SalesHeader[1]."Document Type",SalesHeader[1]."No.",
        SalesHeader[2]."Document Type",SalesHeader[2]."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesModalPageHandler,ItemTrackingSummaryModalPageHandler)]
    PROCEDURE CopyPurchOrderWithTrackingAndNoRemainingQuantity@33();
    VAR
      PurchaseHeader@1000 : Record 38;
      ReservationEntry@1008 : Record 337;
      PurchInvoiceNo@1010 : Code[20];
      ItemNo@1001 : Code[20];
      Quantity@1003 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Item Tracking]
      // [SCENARIO 381103] No Item Tracking should be created for the Purchase Line copied from Purchase with fully sold Lot.
      Initialize;

      // [GIVEN] Lot-tracked Item "I".
      ItemNo := CreateLotTrackedItem;
      Quantity := LibraryRandom.RandInt(10);

      // [GIVEN] Received and invoiced Purchase "P" of Item "I" with Lot "L".
      PurchInvoiceNo := CreateAndPostPurchOrderWithTracking(ItemNo,Quantity);

      // [GIVEN] Lot "L" is sold in full.
      CreateAndPostSalesOrderWithTracking(ItemNo,Quantity);

      // [WHEN] Create new Purchase Order by copying the posted invoice of the Purchase "P".
      CopyPurchDocument(PurchaseHeader,PurchDocType::"Posted Invoice",PurchInvoiceNo);

      // [THEN] No Item Tracking for "I" is created.
      ReservationEntry.INIT;
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      Assert.RecordIsEmpty(ReservationEntry);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesModalPageHandler,EnterQuantityToCreateModalPageHandler,PostedSalesDocumentLinesModalPageHandler,MessageHandler)]
    PROCEDURE SalesReturnOrderCanBePopulatedFromPostedInvoiceWithATOAndItemTracking@4();
    VAR
      Item@1000 : Record 27;
      CompItem@1002 : Record 27;
      ItemJournalLine@1003 : Record 83;
      ReturnSalesHeader@1007 : Record 36;
      ReturnSalesLine@1009 : Record 37;
      PostedInvoiceNo@1008 : Code[20];
      CustomerNo@1001 : Code[20];
      SalesQty@1010 : Decimal;
    BEGIN
      // [FEATURE] [Sales] [Return Order] [Order] [Item Tracking] [Assembly] [Assemble-to-Order]
      // [SCENARIO 218977] Sales return order can be populated using "Get Posted Document Lines to Reverse" function from posted sales invoice with linked assembly order and serial no. tracking.
      Initialize;

      // [GIVEN] Serial no.-tracked assembled item "I" with "Assemble-to-Order" assembly policy.
      CreateSNTrackedItem(Item);
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::Assembly);
      Item.VALIDATE("Assembly Policy",Item."Assembly Policy"::"Assemble-to-Order");
      Item.MODIFY(TRUE);

      // [GIVEN] Component "C" of the parent item "I" is in inventory.
      LibraryAssembly.CreateAssemblyList(Item."Costing Method",Item."No.",TRUE,1,0,0,LibraryRandom.RandInt(5),'','');
      CompItem.GET(FindComponentItem(Item."No."));
      LibraryInventory.CreateItemJournalLineInItemTemplate(
        ItemJournalLine,CompItem."No.",'','',LibraryRandom.RandIntInRange(100,200));
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // [GIVEN] Sales order for "Q" pcs of item "I".
      // [GIVEN] Serial nos. "S1..SQ" are assigned to the linked Assembly Order.
      // [GIVEN] The sales order is posted with "Ship & Invoice" option.
      SalesQty := LibraryRandom.RandInt(10);
      CustomerNo := LibrarySales.CreateCustomerNo;
      PostedInvoiceNo :=
        CreateAndPostSalesOrderWithAsmToOrderAndTracking(CustomerNo,Item."No.",SalesQty,ItemTrackingMode::"Assign Serial Nos.");

      // [GIVEN] Sales Return Order.
      LibrarySales.CreateSalesHeader(
        ReturnSalesHeader,ReturnSalesHeader."Document Type"::"Return Order",CustomerNo);

      // [WHEN] Run "Get Posted Document Lines to Reverse" and select the posted invoice.
      LibraryVariableStorage.Enqueue(PostedInvoiceNo);
      ReturnSalesHeader.GetPstdDocLinesToRevere;

      // [THEN] Document line for "Q" pcs of "I" is created in the sales return order.
      FindSalesLine(ReturnSalesHeader,ReturnSalesLine);
      ReturnSalesLine.TESTFIELD("No.",Item."No.");
      ReturnSalesLine.TESTFIELD(Quantity,SalesQty);

      // [THEN] The sales return line is tracked with "Q" serial nos.
      VerifySNItemTrackingOnSalesLine(ReturnSalesLine,SalesQty);
    END;

    LOCAL PROCEDURE Initialize@3();
    VAR
      LibraryERMCountryData@1004 : Codeunit 131305;
    BEGIN
      CopyDocumentMgt.SetProperties(TRUE,FALSE,FALSE,FALSE,TRUE,FALSE,FALSE);
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibrarySales.SetCreditWarningsToNoWarnings;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateSourceDocument@56(Type@1000 : Option;TypeBeforePosting@1002 : Option) DocNo : Code[20];
    VAR
      SalesHeader@1001 : Record 36;
      SalesCrMemoHeader@1003 : Record 114;
      SalesShipmentHeader@1004 : Record 110;
      SalesInvoiceHeader@1005 : Record 112;
      ReturnReceiptHeader@1006 : Record 6660;
    BEGIN
      DocNo := CreateSalesOrder(SalesHeader,TypeBeforePosting,CreateCustomer);

      CASE Type OF
        SalesDocType::"Posted Shipment",
        SalesDocType::"Posted Invoice",
        SalesDocType::"Posted Return Receipt",
        SalesDocType::"Posted Credit Memo":
          BEGIN
            CreateItemChargeAssignment(SalesHeader);
            LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
          END;
      END;

      CASE Type OF
        SalesDocType::"Posted Credit Memo":
          BEGIN
            SalesCrMemoHeader.SETRANGE("Return Order No.",SalesHeader."No.");
            SalesCrMemoHeader.FINDFIRST;
            DocNo := SalesCrMemoHeader."No.";
          END;
        SalesDocType::"Posted Shipment":
          BEGIN
            SalesShipmentHeader.SETRANGE("Order No.",SalesHeader."No.");
            SalesShipmentHeader.FINDFIRST;
            DocNo := SalesShipmentHeader."No.";
          END;
        SalesDocType::"Posted Invoice":
          BEGIN
            SalesInvoiceHeader.SETRANGE("Order No.",SalesHeader."No.");
            SalesInvoiceHeader.FINDFIRST;
            DocNo := SalesInvoiceHeader."No.";
          END;
        SalesDocType::"Posted Return Receipt":
          BEGIN
            ReturnReceiptHeader.SETRANGE("Return Order No.",SalesHeader."No.");
            ReturnReceiptHeader.FINDFIRST;
            DocNo := ReturnReceiptHeader."No.";
          END;
      END;

      EXIT(DocNo);
    END;

    LOCAL PROCEDURE CopyToDestinationSalesDocument@57(SourceType@1000 : Option;SourceNo@1001 : Code[20];VAR SalesHeader@1003 : Record 36) : Code[20];
    BEGIN
      CopyDocumentMgt.CopySalesDoc(SourceType,SourceNo,SalesHeader);
      EXIT(SalesHeader."No.");
    END;

    LOCAL PROCEDURE CopyToDestinationPurchaseDocument@135(SourceType@1000 : Option;SourceNo@1001 : Code[20];VAR PurchaseHeader@1003 : Record 38) : Code[20];
    BEGIN
      CopyDocumentMgt.CopyPurchDoc(SourceType,SourceNo,PurchaseHeader);
      EXIT(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CopyPurchDocument@61(VAR PurchaseHeader@1000 : Record 38;SourceType@1002 : Option;SourceNo@1001 : Code[20]);
    BEGIN
      CreateEmptyPurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      CopyDocumentMgt.SetProperties(TRUE,FALSE,FALSE,FALSE,TRUE,FALSE,FALSE);
      CopyDocumentMgt.CopyPurchDoc(SourceType,SourceNo,PurchaseHeader);
    END;

    LOCAL PROCEDURE CopyDimensionsSalesDocument@109(RecalculateLines@1002 : Boolean);
    VAR
      SalesHeader@1001 : Record 36;
      DocNo@1003 : Code[20];
      DimensionSetID@1000 : Integer;
    BEGIN
      Initialize;
      CopyDocumentMgt.SetProperties(TRUE,RecalculateLines,FALSE,FALSE,TRUE,FALSE,FALSE);

      CreateSalesOrder(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer);
      CreateItemChargeAssignment(SalesHeader);
      DimensionSetID := SalesHeader."Dimension Set ID";
      SalesHeader."Dimension Set ID" := UpdateDimensionSet(SalesHeader."Dimension Set ID");
      IF NOT RecalculateLines THEN
        DimensionSetID := SalesHeader."Dimension Set ID";
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      CreateEmptySalesHeader(SalesHeader,SalesHeader."Document Type"::Order);
      CopyToDestinationSalesDocument(SalesDocType::"Posted Invoice",DocNo,SalesHeader);

      VerifySalesDocumentDimension(SalesHeader,DimensionSetID);
    END;

    LOCAL PROCEDURE CopyDimensionsPurchaseDocument@114(RecalculateLines@1002 : Boolean);
    VAR
      PurchaseHeader@1001 : Record 38;
      DocNo@1003 : Code[20];
      DimensionSetID@1000 : Integer;
    BEGIN
      Initialize;
      CopyDocumentMgt.SetProperties(TRUE,RecalculateLines,FALSE,FALSE,TRUE,FALSE,FALSE);

      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);
      DimensionSetID := PurchaseHeader."Dimension Set ID";
      PurchaseHeader."Dimension Set ID" := UpdateDimensionSet(PurchaseHeader."Dimension Set ID");
      IF NOT RecalculateLines THEN
        DimensionSetID := PurchaseHeader."Dimension Set ID";
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      CreateEmptyPurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      CopyToDestinationPurchaseDocument(SalesDocType::"Posted Invoice",DocNo,PurchaseHeader);

      VerifyPurchaseDocumentDimension(PurchaseHeader,DimensionSetID);
    END;

    LOCAL PROCEDURE CreateItemChargePurchaseLine@55(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38;AppliesToDocNo@1002 : Code[20];AppliesToDocLineNo@1003 : Integer;ItemNo@1005 : Code[20];Quantity@1006 : Decimal;QtyToAssign@1007 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",'',Quantity);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.MODIFY(TRUE);
      CreateItemChargeAssignmentPurch(PurchaseLine,AppliesToDocNo,AppliesToDocLineNo,ItemNo,QtyToAssign);
    END;

    LOCAL PROCEDURE CreateItemChargeSalesLine@115(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;AppliesToDocNo@1002 : Code[20];AppliesToDocLineNo@1003 : Integer;ItemNo@1005 : Code[20];Quantity@1006 : Decimal;QtyToAssign@1007 : Decimal);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::"Charge (Item)",'',Quantity);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.MODIFY(TRUE);
      CreateItemChargeAssignmentSales(SalesLine,AppliesToDocNo,AppliesToDocLineNo,ItemNo,QtyToAssign);
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceCopyFromReceipt@88(VAR PurchaseHeader@1000 : Record 38;VendorNo@1001 : Code[20];CopyFromDocNoFilter@1002 : Text);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);
      GetPurchaseReceiptLines(PurchaseHeader,CopyFromDocNoFilter);
    END;

    LOCAL PROCEDURE CreateSalesInvoiceCopyFromShipment@122(VAR SalesHeader@1002 : Record 36;CustomerNo@1001 : Code[20];CopyFromDocNoFilter@1000 : Text);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      GetSalesShipmentLines(SalesHeader,CopyFromDocNoFilter);
    END;

    LOCAL PROCEDURE CreateSalesQuote@37(VAR SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      CreateEmptySalesHeader(SalesHeader,SalesHeader."Document Type"::Quote);
      SalesHeader."Document Date" := WORKDATE;
      SalesHeader."Sell-to Customer Template Code" := FindCustomerTemplate;
      SalesHeader."Bill-to Customer Template Code" := SalesHeader."Sell-to Customer Template Code";
      SalesHeader.MODIFY;
      CreateBlankSalesLine(SalesHeader,SalesLine,SalesHeader."Document Type");
    END;

    LOCAL PROCEDURE CreateSalesOrder@22(VAR SalesHeader@1001 : Record 36;Type@1000 : Option;CustomerNo@1004 : Code[20]) : Code[20];
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,Type,CustomerNo);

      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,1);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::"G/L Account",CreateGLAccount,1);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Resource,LibraryResource.CreateResourceNo,1);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::"Charge (Item)",CreateItemCharge,1);
      SalesLine.VALIDATE("Unit Price",RANDOM(10000) / 100);
      SalesLine.MODIFY(TRUE);

      EXIT(SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@117(VAR PurchaseHeader@1001 : Record 38;Type@1000 : Option;VendorNo@1004 : Code[20]);
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,Type,VendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,1);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",CreateGLAccount,1);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDecInRange(10,100,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateEmptySalesHeader@18(VAR SalesHeader@1000 : Record 36;Type@1001 : Option) : Code[20];
    BEGIN
      SalesHeader.INIT;
      SalesHeader.VALIDATE("Document Type",Type);
      SalesHeader.INSERT(TRUE);
      EXIT(SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreateEmptyPurchHeader@29(VAR PurchaseHeader@1000 : Record 38;Type@1001 : Option) : Code[20];
    BEGIN
      PurchaseHeader.INIT;
      PurchaseHeader.VALIDATE("Document Type",Type);
      PurchaseHeader.INSERT(TRUE);
      EXIT(PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreateItemCharge@5() : Code[20];
    VAR
      ItemCharge@1000 : Record 5800;
    BEGIN
      ItemCharge.NEXT(RANDOM(ItemCharge.COUNT));
      EXIT(ItemCharge."No.");
    END;

    LOCAL PROCEDURE CreateItemChargeAssignment@6(SalesHeader@1002 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
      SalesLine2@1000 : Record 37;
      ItemChargeAssignmentSales@1003 : Record 5809;
    BEGIN
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
      SalesLine.FINDFIRST;

      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine2.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine2.SETRANGE(Type,SalesLine2.Type::Item);
      SalesLine2.FINDFIRST;

      LibraryInventory.CreateItemChargeAssignment(ItemChargeAssignmentSales,
        SalesLine,SalesLine2."Document Type",SalesLine2."Document No.",
        SalesLine2."Line No.",SalesLine2."No.");
    END;

    LOCAL PROCEDURE CreateItemChargeAssignmentPurch@77(PurchaseLine@1001 : Record 39;AppliesToDocNo@1002 : Code[20];AppliesToDocLineNo@1003 : Integer;ItemNo@1004 : Code[20];QtyToAssign@1005 : Decimal);
    VAR
      ItemChargeAssignmentPurch@1000 : Record 5805;
    BEGIN
      LibraryInventory.CreateItemChargeAssignPurchase(
        ItemChargeAssignmentPurch,PurchaseLine,ItemChargeAssignmentPurch."Applies-to Doc. Type"::Receipt,
        AppliesToDocNo,AppliesToDocLineNo,ItemNo);
      ItemChargeAssignmentPurch.VALIDATE("Qty. to Assign",QtyToAssign);
      ItemChargeAssignmentPurch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemChargeAssignmentSales@123(SalesLine@1001 : Record 37;AppliesToDocNo@1002 : Code[20];AppliesToDocLineNo@1003 : Integer;ItemNo@1004 : Code[20];QtyToAssign@1005 : Decimal);
    VAR
      ItemChargeAssignmentSales@1000 : Record 5809;
    BEGIN
      LibraryInventory.CreateItemChargeAssignment(
        ItemChargeAssignmentSales,SalesLine,ItemChargeAssignmentSales."Applies-to Doc. Type"::Shipment,
        AppliesToDocNo,AppliesToDocLineNo,ItemNo);
      ItemChargeAssignmentSales.VALIDATE("Qty. to Assign",QtyToAssign);
      ItemChargeAssignmentSales.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGLAccount@15() : Code[20];
    VAR
      GLAccount@1000 : Record 15;
      GenBusPostingGroup@1002 : Record 250;
      GenProdPostingGroup@1003 : Record 251;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);

      GenProdPostingGroup.SETFILTER("Def. VAT Prod. Posting Group",'<>%1','');
      GenProdPostingGroup.NEXT(RANDOM(GenProdPostingGroup.COUNT));
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroup.Code);
      GenBusPostingGroup.NEXT(RANDOM(GenBusPostingGroup.COUNT));
      GLAccount.VALIDATE("Gen. Bus. Posting Group",GenBusPostingGroup.Code);
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateItem@34() : Code[20];
    VAR
      Item@1002 : Record 27;
      Dimension@1003 : Record 348;
      DimensionValue@1004 : Record 349;
      DefaultDimension@1005 : Record 352;
    BEGIN
      LibraryInventory.CreateItem(Item);
      GenerateDimensions(Dimension,DimensionValue);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",Dimension.Code,DimensionValue.Code);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateLotTrackedItem@40() : Code[20];
    VAR
      ItemTrackingCode@1000 : Record 6502;
      Item@1002 : Record 27;
    BEGIN
      LibraryInventory.CreateItemTrackingCode(ItemTrackingCode);
      ItemTrackingCode.VALIDATE("Lot Specific Tracking",TRUE);
      ItemTrackingCode.MODIFY(TRUE);
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',ItemTrackingCode.Code);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateSNTrackedItem@133(VAR Item@1001 : Record 27);
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryInventory.CreateItemTrackingCode(ItemTrackingCode);
      ItemTrackingCode.VALIDATE("SN Specific Tracking",TRUE);
      ItemTrackingCode.MODIFY(TRUE);
      LibraryInventory.CreateTrackedItem(Item,'',LibraryUtility.GetGlobalNoSeriesCode,ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateCustomer@16() : Code[20];
    VAR
      Customer@1000 : Record 18;
      Dimension@1004 : Record 348;
      DimensionValue@1003 : Record 349;
      DefaultDimension@1002 : Record 352;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      GenerateDimensions(Dimension,DimensionValue);
      LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,Customer."No.",Dimension.Code,DimensionValue.Code);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateBlankSalesLine@17(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1003 : Option);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      CLEAR(SalesLine);
      SalesLine.INIT;
      SalesLine.VALIDATE("Document Type",DocumentType);
      SalesLine.VALIDATE("Document No.",SalesHeader."No.");
      RecRef.GETTABLE(SalesLine);
      SalesLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,SalesLine.FIELDNO("Line No.")));
      SalesLine.VALIDATE(Description,FORMAT(CREATEGUID));
      SalesLine.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchOrderWithTracking@45(ItemNo@1004 : Code[20];Quantity@1005 : Decimal) : Code[20];
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Assign Lot No.");
      PurchaseLine.OpenItemTrackingLines;
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithTracking@44(ItemNo@1003 : Code[20];Quantity@1002 : Decimal);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Select Entries");
      SalesLine.OpenItemTrackingLines;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithAsmToOrderAndTracking@142(CustomerNo@1006 : Code[20];ItemNo@1000 : Code[20];Qty@1001 : Decimal;ItemTracking@1002 : Option) : Code[20];
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      AssemblyHeader@1005 : Record 900;
    BEGIN
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CustomerNo,ItemNo,Qty,'',WORKDATE);
      FindLinkedAssemblyOrder(AssemblyHeader,SalesHeader."Document Type",SalesHeader."No.");
      LibraryVariableStorage.Enqueue(ItemTracking);
      AssemblyHeader.OpenItemTrackingLines;
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE FindCustomerTemplate@103() : Code[10];
    VAR
      CustomerTemplate@1000 : Record 5105;
    BEGIN
      CustomerTemplate.FINDFIRST;
      EXIT(CustomerTemplate.Code);
    END;

    LOCAL PROCEDURE CreateVendor@128() : Code[20];
    VAR
      Vendor@1000 : Record 23;
      Dimension@1004 : Record 348;
      DimensionValue@1003 : Record 349;
      DefaultDimension@1002 : Record 352;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      GenerateDimensions(Dimension,DimensionValue);
      LibraryDimension.CreateDefaultDimensionVendor(DefaultDimension,Vendor."No.",Dimension.Code,DimensionValue.Code);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE GetPurchaseReceiptLines@69(PurchaseHeader@1001 : Record 38;ReceiptNoFilter@1002 : Text);
    VAR
      PurchRcptLine@1003 : Record 121;
      PurchGetReceipt@1000 : Codeunit 74;
    BEGIN
      PurchRcptLine.SETFILTER("Document No.",ReceiptNoFilter);
      PurchGetReceipt.SetPurchHeader(PurchaseHeader);
      PurchGetReceipt.CreateInvLines(PurchRcptLine);
    END;

    LOCAL PROCEDURE GetSalesShipmentLines@125(SalesHeader@1001 : Record 36;ShipmentNoFilter@1002 : Text);
    VAR
      SalesShipmentLine@1003 : Record 111;
      SalesGetShipment@1000 : Codeunit 64;
    BEGIN
      SalesShipmentLine.SETFILTER("Document No.",ShipmentNoFilter);
      SalesGetShipment.SetSalesHeader(SalesHeader);
      SalesGetShipment.CreateInvLines(SalesShipmentLine);
    END;

    LOCAL PROCEDURE PostSalesOrderWithUpdatedDimensions@48(VAR SalesLine@1000 : Record 37;VAR PostedDocNo@1001 : Code[20]) DefaultDimSetID : Integer;
    VAR
      SalesHeader@1006 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));

      DefaultDimSetID := SalesLine."Dimension Set ID";
      SalesLine."Dimension Set ID" := UpdateDimensionSet(SalesLine."Dimension Set ID");
      SalesLine.MODIFY;
      PostedDocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      EXIT(DefaultDimSetID);
    END;

    LOCAL PROCEDURE PostPurchOrderWithUpdatedDimensions@97(VAR PurchLine@1000 : Record 39;VAR PostedDocNo@1001 : Code[20]) DefaultDimSetID : Integer;
    VAR
      PurchHeader@1006 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,CreateVendor);
      LibraryPurchase.CreatePurchaseLine(
        PurchLine,PurchHeader,PurchLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      DefaultDimSetID := PurchLine."Dimension Set ID";
      PurchLine."Dimension Set ID" := UpdateDimensionSet(PurchLine."Dimension Set ID");
      PurchLine.MODIFY;
      PostedDocNo := LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);
      EXIT(DefaultDimSetID);
    END;

    LOCAL PROCEDURE FindComponentItem@9(ParentItemNo@1001 : Code[20]) : Code[20];
    VAR
      BOMComponent@1002 : Record 90;
    BEGIN
      BOMComponent.SETRANGE("Parent Item No.",ParentItemNo);
      BOMComponent.SETRANGE(Type,BOMComponent.Type::Item);
      BOMComponent.FINDFIRST;
      EXIT(BOMComponent."No.");
    END;

    LOCAL PROCEDURE FindDimension@107(VAR Dimension@1000 : Record 348;VAR DimensionValueCode@1003 : Code[20];DimensionSetId@1001 : Integer);
    VAR
      DimensionSetEntry@1002 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetId);
      DimensionSetEntry.FINDFIRST;
      DimensionValueCode := DimensionSetEntry."Dimension Value Code";
      Dimension.GET(DimensionSetEntry."Dimension Code");
    END;

    LOCAL PROCEDURE FindDimensionValue@110(VAR DimensionValue@1000 : Record 349;DimensionCode@1001 : Code[20];OldDimensionValueCode@1002 : Code[20]);
    BEGIN
      DimensionValue.SETRANGE("Dimension Code",DimensionCode);
      DimensionValue.SETFILTER(Code,'<>%1',OldDimensionValueCode);
      DimensionValue.FINDFIRST;
    END;

    LOCAL PROCEDURE FindLinkedAssemblyOrder@276(VAR AssemblyHeader@1000 : Record 900;DocumentType@1001 : Option;DocumentNo@1003 : Code[20]);
    VAR
      ATOLink@1002 : Record 904;
    BEGIN
      ATOLink.SETRANGE("Document Type",DocumentType);
      ATOLink.SETRANGE("Document No.",DocumentNo);
      ATOLink.FINDFIRST;
      AssemblyHeader.GET(ATOLink."Assembly Document Type",ATOLink."Assembly Document No.");
    END;

    LOCAL PROCEDURE FindSalesLine@43(SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDLAST;
    END;

    LOCAL PROCEDURE FindSalesShptLineNo@120(SalesShptNo@1000 : Code[20];LineOrderNo@1001 : Integer) : Integer;
    VAR
      SalesShipmentLine@1002 : Record 111;
    BEGIN
      SalesShipmentLine.SETRANGE("Document No.",SalesShptNo);
      SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
      SalesShipmentLine.FINDSET;
      SalesShipmentLine.NEXT(LineOrderNo - 1);

      EXIT(SalesShipmentLine."Line No.");
    END;

    LOCAL PROCEDURE FindPurchLine@98(PurchHeader@1000 : Record 38;VAR PurchLine@1001 : Record 39);
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.FINDLAST;
    END;

    LOCAL PROCEDURE FindPurchRcptLineNo@99(PurchRcptNo@1000 : Code[20];LineOrderNo@1001 : Integer) : Integer;
    VAR
      PurchRcptLine@1002 : Record 121;
    BEGIN
      PurchRcptLine.SETRANGE("Document No.",PurchRcptNo);
      PurchRcptLine.SETRANGE(Type,PurchRcptLine.Type::Item);
      PurchRcptLine.FINDSET;
      PurchRcptLine.NEXT(LineOrderNo - 1);

      EXIT(PurchRcptLine."Line No.");
    END;

    LOCAL PROCEDURE GenerateDimensions@139(VAR Dimension@1000 : Record 348;VAR DimensionValue@1001 : Record 349);
    VAR
      Count@1002 : Integer;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      Count := LibraryRandom.RandIntInRange(5,10);
      WHILE Count > 0 DO BEGIN
        LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
        Count -= 1;
      END;
    END;

    LOCAL PROCEDURE UpdateDimensionSet@119(DimensionSetID@1000 : Integer) : Integer;
    VAR
      Dimension@1001 : Record 348;
      DimensionValue@1002 : Record 349;
      OldDimensionValueCode@1003 : Code[20];
    BEGIN
      FindDimension(Dimension,OldDimensionValueCode,DimensionSetID);
      FindDimensionValue(DimensionValue,Dimension.Code,OldDimensionValueCode);
      EXIT(LibraryDimension.EditDimSet(DimensionSetID,Dimension.Code,DimensionValue.Code));
    END;

    LOCAL PROCEDURE VerifyCopy@65(SourceType@1000 : Option;SourceNo@1001 : Code[20];DestType@1002 : Option;DestNo@1003 : Code[20]);
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1014 : Record 37;
    BEGIN
      SalesHeader.GET(DestType,DestNo);
      SalesLine.SETRANGE("Document No.",DestNo);
      SalesLine.SETRANGE("Document Type",DestType);
      SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
      SalesLine.FINDSET;

      CASE SourceType OF
        SalesDocType::Order,SalesDocType::"Return Order",SalesDocType::"Credit Memo",
        SalesDocType::Quote,SalesDocType::Invoice,SalesDocType::"Blanket Order":
          ValidateCopiedSalesHeader(SalesHeader,SalesLine,SourceType,SourceNo);
        SalesDocType::"Posted Credit Memo":
          ValidateCopiedCrMemoHeader(SalesHeader,SalesLine,SourceNo);
        SalesDocType::"Posted Shipment":
          ValidateCopiedShipmentHeader(SalesHeader,SalesLine,SourceNo);
        SalesDocType::"Posted Invoice":
          ValidateCopiedInvoiceHeader(SalesHeader,SalesLine,SourceNo);
        SalesDocType::"Posted Return Receipt":
          ValidateCopiedReceiptHeader(SalesHeader,SalesLine,SourceNo);
      END;

      Assert.IsTrue(SalesLine.NEXT = 0,
        'Unexpected remaining data in destination document');
    END;

    LOCAL PROCEDURE VerifyItemChargeAssignmentPurchCopied@59(FromDocType@1002 : Option;FromDocNo@1003 : Code[20];ToDocType@1005 : Option;ToDocNo@1004 : Code[20]);
    VAR
      FromItemChargeAssignmentPurch@1000 : Record 5805;
      ToItemChargeAssignmentPurch@1001 : Record 5805;
    BEGIN
      FromItemChargeAssignmentPurch.SETRANGE("Document Type",FromDocType);
      FromItemChargeAssignmentPurch.SETRANGE("Document No.",FromDocNo);
      ToItemChargeAssignmentPurch.SETRANGE("Document Type",ToDocType);
      ToItemChargeAssignmentPurch.SETRANGE("Document No.",ToDocNo);
      FromItemChargeAssignmentPurch.FINDSET;
      REPEAT
        ToItemChargeAssignmentPurch.SETRANGE("Item Charge No.",FromItemChargeAssignmentPurch."Item Charge No.");
        ToItemChargeAssignmentPurch.FINDFIRST;
        ToItemChargeAssignmentPurch.TESTFIELD("Qty. to Assign",FromItemChargeAssignmentPurch."Qty. to Assign");
      UNTIL FromItemChargeAssignmentPurch.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyItemChargeAssignmentSalesCopied@127(FromDocType@1002 : Option;FromDocNo@1003 : Code[20];ToDocType@1005 : Option;ToDocNo@1004 : Code[20]);
    VAR
      FromItemChargeAssignmentSales@1000 : Record 5809;
      ToItemChargeAssignmentSales@1001 : Record 5809;
    BEGIN
      FromItemChargeAssignmentSales.SETRANGE("Document Type",FromDocType);
      FromItemChargeAssignmentSales.SETRANGE("Document No.",FromDocNo);
      ToItemChargeAssignmentSales.SETRANGE("Document Type",ToDocType);
      ToItemChargeAssignmentSales.SETRANGE("Document No.",ToDocNo);
      FromItemChargeAssignmentSales.FINDSET;
      REPEAT
        ToItemChargeAssignmentSales.SETRANGE("Item Charge No.",FromItemChargeAssignmentSales."Item Charge No.");
        ToItemChargeAssignmentSales.FINDFIRST;
        ToItemChargeAssignmentSales.TESTFIELD("Qty. to Assign",FromItemChargeAssignmentSales."Qty. to Assign");
      UNTIL FromItemChargeAssignmentSales.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyShipmntItemChargeAssngmt@20(SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20]);
    VAR
      ItemChargeAssignmentSales@1001 : Record 5809;
    BEGIN
      ItemChargeAssignmentSales.SETRANGE("Document No.",SalesHeader."No.");
      ItemChargeAssignmentSales.SETRANGE("Document Type",SalesHeader."Document Type");
      ItemChargeAssignmentSales.FINDSET;

      Assert.AreEqual(
        ItemChargeAssignmentSales."Applies-to Doc. Type",
        ItemChargeAssignmentSales."Applies-to Doc. Type"::Shipment,
        STRSUBSTNO('Item Charge Assignment should apply to Posted Shipment. Type was %1.',
          ItemChargeAssignmentSales."Applies-to Doc. Type"));
      Assert.AreEqual(ItemChargeAssignmentSales."Item No.",ItemNo,
        STRSUBSTNO('Wrong Item No. when validating Item Charge Assignment on Shipment. Was %1, expected %2.',
          ItemChargeAssignmentSales."Item No.",ItemNo));

      Assert.IsTrue(
        ItemChargeAssignmentSales.NEXT = 0,
        'Unexpected data in item charge assignment');
    END;

    LOCAL PROCEDURE ValidateCopiedSalesHeader@21(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;SourceType@1002 : Option;SourceNo@1003 : Code[20]);
    VAR
      SalesHeader2@1004 : Record 36;
      SalesLine2@1005 : Record 37;
    BEGIN
      SalesHeader2.GET(CopyDocumentMgt.SalesHeaderDocType(SourceType),SourceNo);
      SalesHeader.TESTFIELD("Sell-to Customer No.",SalesHeader2."Sell-to Customer No.");
      SalesLine2.SETRANGE("Document No.",SourceNo);
      SalesLine2.SETRANGE("Document Type",CopyDocumentMgt.SalesHeaderDocType(SourceType));
      SalesLine2.SETFILTER(Type,'<>%1',SalesLine2.Type::" ");
      SalesLine2.FINDSET;
      REPEAT
        SalesLine.TESTFIELD(Type,SalesLine2.Type);
        SalesLine.TESTFIELD("No.",SalesLine2."No.");
        SalesLine.TESTFIELD(Quantity,SalesLine2.Quantity);
        SalesLine.TESTFIELD("Unit of Measure",SalesLine2."Unit of Measure");
        SalesLine.TESTFIELD("Unit Price",SalesLine2."Unit Price");
        SalesLine.TESTFIELD("Location Code",SalesLine2."Location Code");
      UNTIL (SalesLine2.NEXT = 0) AND (SalesLine.NEXT = 0);
      Assert.IsTrue(SalesLine2.NEXT = 0,
        'Unexpected remaining data in source document');
    END;

    LOCAL PROCEDURE ValidateCopiedCrMemoHeader@26(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;SourceNo@1002 : Code[20]);
    VAR
      SalesCrMemoHeader@1009 : Record 114;
      SalesCrMemoLine@1013 : Record 115;
    BEGIN
      SalesCrMemoHeader.GET(SourceNo);
      SalesHeader.TESTFIELD("Sell-to Customer No.",SalesCrMemoHeader."Sell-to Customer No.");
      SalesCrMemoLine.SETRANGE("Document No.",SourceNo);
      SalesCrMemoLine.SETFILTER(Type,'<>%1',SalesCrMemoLine.Type::" ");
      SalesCrMemoLine.FINDSET;
      REPEAT
        SalesLine.TESTFIELD(Type,SalesCrMemoLine.Type);
        SalesLine.TESTFIELD("No.",SalesCrMemoLine."No.");
        SalesLine.TESTFIELD(Quantity,SalesCrMemoLine.Quantity);
        SalesLine.TESTFIELD("Unit of Measure",SalesCrMemoLine."Unit of Measure");
        SalesLine.TESTFIELD("Unit Price",SalesCrMemoLine."Unit Price");
        SalesLine.TESTFIELD("Location Code",SalesCrMemoLine."Location Code");
      UNTIL (SalesCrMemoLine.NEXT = 0) AND (SalesLine.NEXT = 0);
      Assert.IsTrue(SalesCrMemoLine.NEXT = 0,
        'Unexpected remaining data in source document');
    END;

    LOCAL PROCEDURE ValidateCopiedShipmentHeader@23(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;SourceNo@1002 : Code[20]);
    VAR
      SalesShipmentHeader@1008 : Record 110;
      SalesShipmentLine@1012 : Record 111;
    BEGIN
      SalesShipmentHeader.GET(SourceNo);
      SalesHeader.TESTFIELD("Sell-to Customer No.",SalesShipmentHeader."Sell-to Customer No.");
      SalesShipmentLine.SETRANGE("Document No.",SourceNo);
      SalesShipmentLine.SETFILTER(Type,'<>%1',SalesShipmentLine.Type::" ");
      SalesShipmentLine.FINDSET;
      REPEAT
        SalesLine.TESTFIELD(Type,SalesShipmentLine.Type);
        SalesLine.TESTFIELD("No.",SalesShipmentLine."No.");
        SalesLine.TESTFIELD(Quantity,SalesShipmentLine.Quantity);
        SalesLine.TESTFIELD("Unit of Measure",SalesShipmentLine."Unit of Measure");
        SalesLine.TESTFIELD("Unit Price",SalesShipmentLine."Unit Price");
        SalesLine.TESTFIELD("Location Code",SalesShipmentLine."Location Code");
      UNTIL (SalesShipmentLine.NEXT = 0) AND (SalesLine.NEXT = 0);
      Assert.IsTrue(SalesShipmentLine.NEXT = 0,
        'Unexpected remaining data in source document');
    END;

    LOCAL PROCEDURE ValidateCopiedInvoiceHeader@24(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;SourceNo@1002 : Code[20]);
    VAR
      SalesInvoiceHeader@1007 : Record 112;
      SalesInvoiceLine@1011 : Record 113;
    BEGIN
      SalesInvoiceHeader.GET(SourceNo);
      SalesHeader.TESTFIELD("Sell-to Customer No.",SalesInvoiceHeader."Sell-to Customer No.");
      SalesInvoiceLine.SETRANGE("Document No.",SourceNo);
      SalesInvoiceLine.SETFILTER(Type,'<>%1',SalesInvoiceLine.Type::" ");
      SalesInvoiceLine.FINDSET;
      REPEAT
        SalesLine.TESTFIELD(Type,SalesInvoiceLine.Type);
        SalesLine.TESTFIELD("No.",SalesInvoiceLine."No.");
        SalesLine.TESTFIELD(Quantity,SalesInvoiceLine.Quantity);
        SalesLine.TESTFIELD("Unit of Measure",SalesInvoiceLine."Unit of Measure");
        SalesLine.TESTFIELD("Unit Price",SalesInvoiceLine."Unit Price");
        SalesLine.TESTFIELD("Location Code",SalesInvoiceLine."Location Code");
      UNTIL (SalesInvoiceLine.NEXT = 0) AND (SalesLine.NEXT = 0);
      Assert.IsTrue(SalesInvoiceLine.NEXT = 0,
        'Unexpected remaining data in source document');
    END;

    LOCAL PROCEDURE ValidateCopiedReceiptHeader@25(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;SourceNo@1002 : Code[20]);
    VAR
      ReturnReceiptHeader@1006 : Record 6660;
      ReturnReceiptLine@1010 : Record 6661;
    BEGIN
      ReturnReceiptHeader.GET(SourceNo);
      SalesHeader.TESTFIELD("Sell-to Customer No.",ReturnReceiptHeader."Sell-to Customer No.");
      ReturnReceiptLine.SETRANGE("Document No.",SourceNo);
      ReturnReceiptLine.SETFILTER(Type,'<>%1',ReturnReceiptLine.Type::" ");
      ReturnReceiptLine.FINDSET;
      REPEAT
        SalesLine.TESTFIELD(Type,ReturnReceiptLine.Type);
        SalesLine.TESTFIELD("No.",ReturnReceiptLine."No.");
        SalesLine.TESTFIELD(Quantity,ReturnReceiptLine.Quantity);
        SalesLine.TESTFIELD("Unit of Measure",ReturnReceiptLine."Unit of Measure");
        SalesLine.TESTFIELD("Unit Price",ReturnReceiptLine."Unit Price");
        SalesLine.TESTFIELD("Location Code",ReturnReceiptLine."Location Code");
      UNTIL (ReturnReceiptLine.NEXT = 0) AND (SalesLine.NEXT = 0);
      Assert.IsTrue(ReturnReceiptLine.NEXT = 0,
        'Unexpected remaining data in source document');
    END;

    LOCAL PROCEDURE ValidateCopiedSalesHeaderAndSalesLines@2(VAR SalesHeader@1000 : Record 36;FromType@1001 : Option;FromDocNo@1002 : Code[20]);
    VAR
      FromSalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      SalesLine2@1003 : Record 37;
    BEGIN
      FromSalesHeader.GET(FromType,FromDocNo);
      FindSalesLine(FromSalesHeader,SalesLine);
      FindSalesLine(SalesHeader,SalesLine2);
      REPEAT
        SalesLine2.TESTFIELD(Type,SalesLine.Type);
        SalesLine2.TESTFIELD("No.",SalesLine."No.");
      UNTIL (SalesLine2.NEXT = 0) AND (SalesLine.NEXT = 0);
    END;

    LOCAL PROCEDURE VerifySNItemTrackingOnSalesLine@108(SalesLine@1001 : Record 37;Qty@1003 : Decimal);
    VAR
      ReservationEntry@1000 : Record 337;
      SalesLineReserve@1002 : Codeunit 99000832;
    BEGIN
      SalesLineReserve.FilterReservFor(ReservationEntry,SalesLine);
      ReservationEntry.SETRANGE("Item Tracking",ReservationEntry."Item Tracking"::"Serial No.");
      Assert.RecordCount(ReservationEntry,Qty);
    END;

    LOCAL PROCEDURE VerifySalesDocumentDimension@130(VAR SalesHeader@1001 : Record 36;ExpectedDimensionSetID@1002 : Integer);
    BEGIN
      Assert.AreEqual(ExpectedDimensionSetID,SalesHeader."Dimension Set ID",WrongDimensionsCopiedErr);
    END;

    LOCAL PROCEDURE VerifyPurchaseDocumentDimension@132(VAR PurchaseHeader@1001 : Record 38;ExpectedDimensionSetID@1002 : Integer);
    BEGIN
      Assert.AreEqual(ExpectedDimensionSetID,PurchaseHeader."Dimension Set ID",WrongDimensionsCopiedErr);
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesModalPageHandler@49(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      CASE LibraryVariableStorage.DequeueInteger OF
        ItemTrackingMode::"Assign Lot No.":
          ItemTrackingLines."Assign Lot No.".INVOKE;
        ItemTrackingMode::"Assign Serial Nos.":
          ItemTrackingLines."Assign Serial No.".INVOKE;
        ItemTrackingMode::"Select Entries":
          ItemTrackingLines."Select Entries".INVOKE;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryModalPageHandler@52(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreateModalPageHandler@66(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedSalesDocumentLinesModalPageHandler@83(VAR PostedSalesDocumentLines@1000 : TestPage 5850);
    VAR
      DocType@1001 : 'Posted Shipments,Posted Invoices,Posted Return Receipts,Posted Cr. Memos';
    BEGIN
      PostedSalesDocumentLines.PostedShipmentsBtn.SETVALUE(DocType::"Posted Invoices");
      PostedSalesDocumentLines.PostedInvoices.FILTER.SETFILTER("Document No.",LibraryVariableStorage.DequeueText);
      PostedSalesDocumentLines.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@345(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(Question,MsgCorrectedInvoiceNo) > 0,Question);
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@41(Message@1000 : Text[1024]);
    BEGIN
    END;

    LOCAL PROCEDURE ExecuteConfirmHandler@346();
    BEGIN
      IF CONFIRM(MsgCorrectedInvoiceNo) THEN ;
    END;

    BEGIN
    {
      // [FEATURE] [Copy Document]
    }
    END.
  }
}

