OBJECT Codeunit 134918 ERM Sales/Purchase Application
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibrarySales@1008 : Codeunit 130509;
      LibraryPurchase@1021 : Codeunit 130512;
      LibraryERM@1002 : Codeunit 131300;
      LibraryUtility@1023 : Codeunit 131000;
      LibraryJournals@1022 : Codeunit 131306;
      LibraryVariableStorage@1007 : Codeunit 131004;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1005 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      AmountError@1012 : TextConst 'ENU=%1 must be %2 in %3.';
      ApplyAmountError@1017 : TextConst 'ENU=%1 must be %2.';
      BatchMessage@1015 : TextConst 'ENU=Edit - %1 - %2-%3';
      ValidationError@1018 : TextConst 'ENU=Journal Card Caption does not match.';
      WrongCustNoErr@1019 : TextConst 'ENU=Customer was not found.';
      WrongVendNoErr@1020 : TextConst 'ENU=Vendor was not found.';

    [Test]
    [HandlerFunctions(ApplyCustEntryPageHandler)]
    PROCEDURE CustPostInvApplyPayment@19();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Apply Customer Entries Page Fields with Posting Invoice and Apply Payment without Currency.
      Initialize;
      ApplyCustEntry(GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,'','');
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntryPageHandler)]
    PROCEDURE CustPostRefundApplyCrMemo@30();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Apply Customer Entries Page Fields with Posting Refund and Apply Credit Memo without Currency.
      Initialize;
      ApplyCustEntry(GenJournalLine."Document Type"::Refund,GenJournalLine."Document Type"::"Credit Memo",'','');
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntryPageHandler)]
    PROCEDURE CustPostInvApplyPaymentCurr@22();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Apply Customer Entries Page Fields with Posting Invoice and Apply Payment with different Currency.
      Initialize;
      ApplyCustEntry(GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,CreateCurrency,CreateCurrency);
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntryPageHandler)]
    PROCEDURE CustPostRefundApplyCrMemoCurr@24();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Apply Customer Entries Page Fields with Posting Refund and Apply Credit Memo with different Currency.
      Initialize;
      ApplyCustEntry(
        GenJournalLine."Document Type"::Refund,GenJournalLine."Document Type"::"Credit Memo",CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE ApplyCustEntry@25(DocumentType@1006 : Option;DocumentType2@1007 : Option;CurrencyCode2@1008 : Code[10];CurrencyCode3@1009 : Code[10]);
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1000 : Record 81;
      Amount@1005 : Decimal;
      Balance@1002 : Decimal;
      AppliedAmount@1003 : Decimal;
      ApplyingAmount@1004 : Decimal;
    BEGIN
      // Setup. Post Customer Invoice and Partial Payment.
      SelectGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,CreateCustomer,DocumentType,LibraryRandom.RandDec(100,2),CurrencyCode2,
        GenJournalLine."Account Type"::Customer);
      Amount := GenJournalLine.Amount;
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",DocumentType2,-GenJournalLine.Amount / 2,CurrencyCode3,
        GenJournalLine."Account Type"::Customer);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise.
      OpenCustLedgerEntryPage(DocumentType,GenJournalLine."Account No.");

      AppliedAmount := LibraryVariableStorage.DequeueDecimal;
      ApplyingAmount := LibraryVariableStorage.DequeueDecimal;
      Balance := LibraryVariableStorage.DequeueDecimal;

      // Verify: Verify Page fields value on Apply Customer Entries Page.
      Assert.AreEqual(GenJournalLine.Amount,AppliedAmount,STRSUBSTNO(ApplyAmountError,'Applied Amount',AppliedAmount));
      Assert.AreEqual(Amount,ApplyingAmount,STRSUBSTNO(ApplyAmountError,'Applying Amount',ApplyingAmount));
      Assert.AreEqual(Amount + GenJournalLine.Amount,Balance,STRSUBSTNO(ApplyAmountError,'Balance',Balance));
      Assert.AreEqual(CurrencyCode2,LibraryVariableStorage.DequeueText,STRSUBSTNO(ApplyAmountError,'Currency Code',CurrencyCode2));
    END;

    [Test]
    [HandlerFunctions(ApplyPostCustEntryPageHandler,PostApplicationPageHandler,MessageHandler)]
    PROCEDURE CustApplyAndPostPaymentInv@7();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Customer Ledger Entries for Remaining Amount after Posting and Apply Invoice and Payment through Page.
      Initialize;
      ApplyAndPostCustEntry(GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment);
    END;

    [Test]
    [HandlerFunctions(ApplyPostCustEntryPageHandler,PostApplicationPageHandler,MessageHandler)]
    PROCEDURE CustApplyAndPostPaymentCrMemo@2();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Customer Ledger Entries for Remaining Amount after Posting and Apply Refund and Credit Memo through Page.
      Initialize;
      ApplyAndPostCustEntry(GenJournalLine."Document Type"::Refund,GenJournalLine."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE ApplyAndPostCustEntry@50(DocumentType@1010 : Option;DocumentType2@1009 : Option);
    VAR
      GeneralLedgerSetup@1007 : Record 98;
      CustLedgerEntry@1006 : Record 21;
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Setup. Post Customer Invoice and Partial Payment with Random Amount.
      SelectGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLines(GenJournalLine,GenJournalBatch,CreateCustomer,DocumentType,LibraryRandom.RandDec(100,2),'',
        GenJournalLine."Account Type"::Customer);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",DocumentType2,-GenJournalLine.Amount / 2,'',
        GenJournalLine."Account Type"::Customer);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise.
      OpenCustLedgerEntryPage(DocumentType,GenJournalLine."Account No.");

      // Verify: Verify Page fields value on Apply Customer Entries Page.
      GeneralLedgerSetup.GET;
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,GenJournalLine."Document No.");
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
      Assert.AreNearlyEqual(
        -GenJournalLine.Amount,CustLedgerEntry."Remaining Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,CustLedgerEntry.FIELDCAPTION("Remaining Amount"),-GenJournalLine.Amount,CustLedgerEntry.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(ApplyPostCustEntryPageHandler,PostApplicationPageHandler,MessageHandler)]
    PROCEDURE CustPostAndApplyInvPmtDisc@16();
    VAR
      GenJournalBatch@1004 : Record 232;
      PaymentTerms@1003 : Record 3;
      GenJournalLine@1000 : Record 81;
      OriginalPmtDiscPossible@1006 : Decimal;
    BEGIN
      // Check Customer Ledger Entries for Original Payment Discount With Post and Apply Invoice.

      // Setup: Create Customer with Payment Terms and Post and Apply Invoice and Payment.
      Initialize;
      SelectGenJournalBatch(GenJournalBatch);
      CreatePaymentTerms(PaymentTerms,FALSE);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,CreateCustomerWithPaymentTerm(PaymentTerms.Code),GenJournalLine."Document Type"::Invoice,
        LibraryRandom.RandDec(100,2),'',GenJournalLine."Account Type"::Customer);
      OriginalPmtDiscPossible := ROUND(GenJournalLine.Amount * GetPaymentTermsDiscountPercentage(PaymentTerms) / 100);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",GenJournalLine."Document Type"::Payment,
        -GenJournalLine.Amount / 2,'',GenJournalLine."Account Type"::Customer);
      ModifyGenLinePostingDate(GenJournalLine,CALCDATE(PaymentTerms."Discount Date Calculation",GenJournalLine."Posting Date"));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Open Customer Ledger Entry Page, apply and Verify Amount for Customer Entry.
      OpenAndVerifyCustLedgerEntry(
        GenJournalLine,GenJournalLine."Document No.",OriginalPmtDiscPossible,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(ApplyPostCustEntryPageHandler,PostApplicationPageHandler,MessageHandler)]
    PROCEDURE CustPostAndApplyRefundPmtDisc@13();
    VAR
      GenJournalBatch@1004 : Record 232;
      PaymentTerms@1003 : Record 3;
      GenJournalLine@1000 : Record 81;
      OriginalPmtDiscPossible@1006 : Decimal;
    BEGIN
      // Check Customer Ledger Entries for Original Payment Discount With Post and Apply Credit Memo.

      // Setup: Create Customer with Payment Terms and Post and Apply Refund and Credit Memo.
      Initialize;
      SelectGenJournalBatch(GenJournalBatch);
      CreatePaymentTerms(PaymentTerms,TRUE);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,CreateCustomerWithPaymentTerm(PaymentTerms.Code),GenJournalLine."Document Type"::Refund,
        LibraryRandom.RandDec(100,2),'',GenJournalLine."Account Type"::Customer);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",GenJournalLine."Document Type"::"Credit Memo",
        -GenJournalLine.Amount / 2,'',GenJournalLine."Account Type"::Customer);
      ModifyGenLinePostingDate(GenJournalLine,CALCDATE(PaymentTerms."Discount Date Calculation",GenJournalLine."Posting Date"));
      OriginalPmtDiscPossible := ROUND(GenJournalLine.Amount * GetPaymentTermsDiscountPercentage(PaymentTerms) / 100);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Open Customer Ledger Entry Page, apply and Verify Amount for Customer Entry.
      OpenAndVerifyCustLedgerEntry(
        GenJournalLine,GenJournalLine."Document No.",OriginalPmtDiscPossible,GenJournalLine."Document Type"::Refund,
        GenJournalLine."Document Type"::"Credit Memo");
    END;

    [Test]
    [HandlerFunctions(ApplyVendorPageHandler)]
    PROCEDURE VendPostInvApplyPayment@33();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Apply Vendor Entries Page Fields with Posting Invoice and Apply Payment without Currency.
      Initialize;
      ApplyVendorEntry(GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,'','');
    END;

    [Test]
    [HandlerFunctions(ApplyVendorPageHandler)]
    PROCEDURE VendPostRefundApplyCrMemo@20();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Apply Vendor Entries Page Fields with Posting Refund and Apply Credit Memo without Currency.
      Initialize;
      ApplyVendorEntry(GenJournalLine."Document Type"::Refund,GenJournalLine."Document Type"::"Credit Memo",'','');
    END;

    [Test]
    [HandlerFunctions(ApplyVendorPageHandler)]
    PROCEDURE VendPostInvApplyPaymentCurr@52();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Apply Vendor Entries Page Fields with Posting Invoice and Apply Payment with different Currency.
      Initialize;
      ApplyVendorEntry(GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,CreateCurrency,CreateCurrency);
    END;

    [Test]
    [HandlerFunctions(ApplyVendorPageHandler)]
    PROCEDURE VendPostRefundApplyCrMemoCurr@63();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Apply Vendor Entries Page Fields with Posting Refund and Apply Credit Memo with different Currency.
      Initialize;
      ApplyVendorEntry(
        GenJournalLine."Document Type"::Refund,GenJournalLine."Document Type"::"Credit Memo",CreateCurrency,CreateCurrency);
    END;

    LOCAL PROCEDURE ApplyVendorEntry@1(DocumentType@1010 : Option;DocumentType2@1011 : Option;CurrencyCode3@1012 : Code[10];CurrencyCode2@1013 : Code[10]);
    VAR
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1000 : Record 81;
      Amount@1005 : Decimal;
      Balance@1001 : Decimal;
      AppliedAmount@1004 : Decimal;
      ApplyingAmount@1003 : Decimal;
    BEGIN
      // Setup: Create Vendor, Create and post General Journal  Line.
      SelectGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,CreateVendor,DocumentType,-LibraryRandom.RandDec(100,2),
        CurrencyCode3,GenJournalLine."Account Type"::Vendor);
      Amount := GenJournalLine.Amount;
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",DocumentType2,-GenJournalLine.Amount / 2,CurrencyCode2,
        GenJournalLine."Account Type"::Vendor);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise.
      OpenVendorLedgerEntryPage(DocumentType2,GenJournalLine."Account No.");

      AppliedAmount := LibraryVariableStorage.DequeueDecimal;
      ApplyingAmount := LibraryVariableStorage.DequeueDecimal;
      Balance := LibraryVariableStorage.DequeueDecimal;

      // Verify: Verify Page fields value on Apply Vendor Entries Page.
      Assert.AreEqual(Amount,AppliedAmount,STRSUBSTNO(ApplyAmountError,'Applied Amount',Amount));
      Assert.AreEqual(GenJournalLine.Amount,ApplyingAmount,STRSUBSTNO(ApplyAmountError,'Applying Amount',GenJournalLine.Amount));
      Assert.AreEqual(Amount + GenJournalLine.Amount,Balance,STRSUBSTNO(ApplyAmountError,'Balance',Amount + GenJournalLine.Amount));
      Assert.AreEqual(CurrencyCode2,LibraryVariableStorage.DequeueText,STRSUBSTNO(ApplyAmountError,'Currency Code',CurrencyCode2));
    END;

    [Test]
    [HandlerFunctions(PostAndApplyVendorPageHandler,PostApplicationPageHandler,MessageHandler)]
    PROCEDURE VendApplyAndPostPaymentInv@45();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Vendor Ledger Entries for Remaining Amount after Posting and Apply Invoice and Payment through Page.
      Initialize;
      ApplyAndPostVendorEntry(GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment);
    END;

    [Test]
    [HandlerFunctions(PostAndApplyVendorPageHandler,PostApplicationPageHandler,MessageHandler)]
    PROCEDURE VendApplyAndPostRefundCrMemo@48();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Vendor Ledger Entries for Remaining Amount after Posting and Apply Invoice and Payment through Page.
      Initialize;
      ApplyAndPostVendorEntry(GenJournalLine."Document Type"::Refund,GenJournalLine."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE ApplyAndPostVendorEntry@46(DocumentType@1010 : Option;DocumentType2@1009 : Option);
    VAR
      VendorLedgerEntry@1013 : Record 25;
      GeneralLedgerSetup@1012 : Record 98;
      GenJournalBatch@1006 : Record 232;
      GenJournalLine@1005 : Record 81;
    BEGIN
      // Setup. Post Vendor Invoice and Partial Payment with Random Amount.
      SelectGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,CreateVendor,DocumentType,-LibraryRandom.RandDec(100,2),'',
        GenJournalLine."Account Type"::Vendor);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",DocumentType2,-GenJournalLine.Amount / 2,'',
        GenJournalLine."Account Type"::Vendor);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise.
      OpenVendorLedgerEntryPage(DocumentType2,GenJournalLine."Account No.");

      // Verify: Verify Page fields value on Apply Vendor Entries Page.
      GeneralLedgerSetup.GET;
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,GenJournalLine."Document No.");
      VendorLedgerEntry.CALCFIELDS("Remaining Amount");
      Assert.AreNearlyEqual(
        -GenJournalLine.Amount,VendorLedgerEntry."Remaining Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,VendorLedgerEntry.FIELDCAPTION("Remaining Amount"),-GenJournalLine.Amount,
          VendorLedgerEntry.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(PostAndApplyVendorPageHandler,PostApplicationPageHandler,MessageHandler)]
    PROCEDURE VendPostAndApplyInvPmtDisc@3();
    VAR
      GenJournalBatch@1004 : Record 232;
      PaymentTerms@1003 : Record 3;
      GenJournalLine@1000 : Record 81;
      OriginalPmtDiscPossible@1006 : Decimal;
    BEGIN
      // Check Vendor Ledger Entries for Payment Discount after Posting and Apply Invoice.

      // Setup: Create Customer with Payment Terms, Post Invoice and Apply Payment.
      Initialize;
      SelectGenJournalBatch(GenJournalBatch);
      CreatePaymentTerms(PaymentTerms,FALSE);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,CreateVendorWithPaymentTerm(PaymentTerms.Code),GenJournalLine."Document Type"::Invoice,
        -LibraryRandom.RandDec(100,2),'',GenJournalLine."Account Type"::Vendor);
      OriginalPmtDiscPossible := ROUND(GenJournalLine.Amount * GetPaymentTermsDiscountPercentage(PaymentTerms) / 100);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",GenJournalLine."Document Type"::Payment,
        -GenJournalLine.Amount / 2,'',GenJournalLine."Account Type"::Vendor);
      ModifyGenLinePostingDate(GenJournalLine,CALCDATE(PaymentTerms."Discount Date Calculation",GenJournalLine."Posting Date"));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Open Vendor Ledger Entry Page, Apply Payment and Verify Amount on Vendor Ledger Entry.
      OpenAndVerifyVendorLedgerEntry(
        GenJournalLine,GenJournalLine."Document No.",OriginalPmtDiscPossible,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(PostAndApplyVendorPageHandler,PostApplicationPageHandler,MessageHandler)]
    PROCEDURE VendPostAndApplyRefundPmtDisc@36();
    VAR
      GenJournalBatch@1004 : Record 232;
      PaymentTerms@1003 : Record 3;
      GenJournalLine@1000 : Record 81;
      OriginalPmtDiscPossible@1006 : Decimal;
    BEGIN
      // Check Vendor Ledger Entries for Payment Discount after Posting and Apply Refund.

      // Setup: Create Vendor with Payment Terms, Post Refund and Apply Credit Memo.
      Initialize;
      SelectGenJournalBatch(GenJournalBatch);
      CreatePaymentTerms(PaymentTerms,TRUE);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,CreateVendorWithPaymentTerm(PaymentTerms.Code),GenJournalLine."Document Type"::Refund,
        -LibraryRandom.RandDec(100,2),'',GenJournalLine."Account Type"::Vendor);

      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",GenJournalLine."Document Type"::"Credit Memo",
        -GenJournalLine.Amount / 2,'',GenJournalLine."Account Type"::Vendor);
      ModifyGenLinePostingDate(GenJournalLine,CALCDATE(PaymentTerms."Discount Date Calculation",GenJournalLine."Posting Date"));
      OriginalPmtDiscPossible := ROUND(GenJournalLine.Amount * GetPaymentTermsDiscountPercentage(PaymentTerms) / 100);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Open Vendor Ledger Entry Page, Apply Refund and Verify Amount on Vendor Ledger Entry.
      OpenAndVerifyVendorLedgerEntry(
        GenJournalLine,GenJournalLine."Document No.",OriginalPmtDiscPossible,GenJournalLine."Document Type"::Refund,
        GenJournalLine."Document Type"::"Credit Memo");
    END;

    [Test]
    [HandlerFunctions(PostAndApplyVendorPageHandler,PostApplicationPageHandler,MessageHandler)]
    PROCEDURE VendPostAndApplyEqualAmount@12();
    VAR
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1001 : Record 81;
      GeneralLedgerSetup@1002 : Record 98;
      VendorLedgerEntry@1003 : Record 25;
    BEGIN
      // Check Vendor Ledger Entries for Amount and Remaining Amount after Applying Invoice and Payment of equal amounts
      // through Page.

      // Setup: Post Vendor Invoice and Payment with Random Amount.
      Initialize;
      SelectGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,CreateVendor,GenJournalLine."Document Type"::Invoice,
        -LibraryRandom.RandDec(100,2),'',GenJournalLine."Account Type"::Vendor);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",GenJournalLine."Document Type"::Payment,
        -GenJournalLine.Amount,'',GenJournalLine."Account Type"::Vendor);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise.
      OpenVendorLedgerEntryPage(GenJournalLine."Document Type",GenJournalLine."Account No.");

      // Verify: Verify Amount and Remaining Amount on Vendor Ledger Entries.
      GeneralLedgerSetup.GET;
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VendorLedgerEntry.CALCFIELDS(Amount,"Remaining Amount");
      Assert.AreNearlyEqual(
        GenJournalLine.Amount,VendorLedgerEntry.Amount,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,VendorLedgerEntry.FIELDCAPTION(Amount),GenJournalLine.Amount,
          VendorLedgerEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        0,VendorLedgerEntry."Remaining Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,VendorLedgerEntry.FIELDCAPTION("Remaining Amount"),0,
          VendorLedgerEntry.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(MatixPageHandler)]
    PROCEDURE SaleAnalysisMatrixRounding1@75();
    VAR
      SalesLine@1004 : Record 37;
      RoundingFactor@1010 : 'None,1,1000,1000000';
      AnalysisViewCode@1000 : Code[10];
    BEGIN
      // Check Sales Analysis By Dimension Matrix by Item with Rounding Factor 1.

      // Setup: Create and Post Sales Invoice for Generating the Quantity and Sales Amount in Matrix.
      Initialize;
      AnalysisViewCode := SetupSalesAnalysisMatrix(SalesLine);
      LibraryVariableStorage.Enqueue(SalesLine."No.");
      LibraryVariableStorage.Enqueue(ROUND(SalesLine.Quantity,1));
      LibraryVariableStorage.Enqueue(ROUND(SalesLine."Line Amount",1));

      // Exercise. Open Sales Analysis Matrix page.
      OpenSalesAnalysisMatrix(RoundingFactor::"1",AnalysisViewCode);

      // Verify: Verification has been handled through Matrix Page Handler.
    END;

    [Test]
    [HandlerFunctions(MatixPageHandler)]
    PROCEDURE SaleAnalysisMatrixRounding1000@18();
    VAR
      SalesLine@1004 : Record 37;
      RoundingFactor@1010 : 'None,1,1000,1000000';
      AnalysisViewCode@1000 : Code[10];
    BEGIN
      // Check Sales Analysis By Dimension Matrix by Item with Rounding Factor 1000.

      // Setup: Create and Post Sales Invoice for Generating the Quantity and Sales Amount in Matrix.
      Initialize;
      AnalysisViewCode := SetupSalesAnalysisMatrix(SalesLine);
      LibraryVariableStorage.Enqueue(SalesLine."No.");
      LibraryVariableStorage.Enqueue(ROUND(SalesLine.Quantity / 1000,0.1));
      LibraryVariableStorage.Enqueue(ROUND(SalesLine."Line Amount" / 1000,0.1));

      // Exercise. Open Sales Analysis Matrix page.
      OpenSalesAnalysisMatrix(RoundingFactor::"1000",AnalysisViewCode);

      // Verify: Verification has been handled through Matrix Page Handler.
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesOKPageHandler)]
    PROCEDURE CustAppliesToDocTypeBlank@17();
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      // Check Apply Customer entries using Applies-to Doc. No. lookup when Applies-to Doc. Type field is blank on Journal line.

      // Setup: Create and post Customer Invoice and Credit Memo and create Customer Payment.
      Initialize;
      CreateAndPostCustomerEntries(GenJournalLine);

      // Exercise: Open Apply Customer Entries page using Applies to Doc. No.
      LibraryVariableStorage.Enqueue(1); // used in ApplyCustEntriesOKPageHandler
      COMMIT;
      SetJournalLineAppliesToDocNo(GenJournalLine."Document Type",GenJournalLine."Document No.",GenJournalLine."Journal Batch Name");

      // Verify: Verify filtered Customer Entries on Apply Customer Entries.
      // Verification is done in handler.
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesOKPageHandler)]
    PROCEDURE CustAppliesToDocTypeNotBlank@34();
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Check Apply Customer entries using Applies-to Doc. No. lookup when Applies-to Doc. Type field is not blank on Journal line.

      // Setup: Create and post Customer Invoice and Credit Memo and create Customer Payment and fill Applies-to Doc Type field.
      Initialize;
      CreateAndPostCustomerEntries(GenJournalLine);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.MODIFY(TRUE);

      // Exercise: Open Apply Customer Entries page using Applies to Doc. No.
      LibraryVariableStorage.Enqueue(2); // used in ApplyCustEntriesOKPageHandler
      COMMIT;
      SetJournalLineAppliesToDocNo(GenJournalLine."Document Type",GenJournalLine."Document No.",GenJournalLine."Journal Batch Name");

      // Verify: Verify filtered Customer Entries on Apply Customer Entries.
      // Verification is done in handler.
    END;

    [Test]
    [HandlerFunctions(ApplyCustEntriesOKPageHandler)]
    PROCEDURE CustApplyUsingAppliestoDocNo@35();
    VAR
      CustLedgerEntry@1004 : Record 21;
      GenJournalBatch@1003 : Record 232;
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Check Customer Ledger Entries for Amount, Remaining Amount and Open field after Applying Invoice and Payment of equal amounts
      // using Applies-to Doc. No. field lookup.

      // Setup: Create and post Customer Invoice, create Payment and Apply Payment using Applies to Doc. No.
      Initialize;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,FindCashReceiptTemplate);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,CreateCustomer,GenJournalLine."Document Type"::Invoice,
        LibraryRandom.RandDec(100,2),'',GenJournalLine."Account Type"::Customer);
      ModifyGenLineBalAccountNo(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalBatch."Journal Template Name");
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",GenJournalLine."Document Type"::Payment,
        0,'',GenJournalLine."Account Type");
      ModifyGenLineBalAccountNo(GenJournalLine);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.MODIFY(TRUE);
      COMMIT;
      LibraryVariableStorage.Enqueue(2); // used in ApplyCustEntriesOKPageHandler
      SetJournalLineAppliesToDocNo(GenJournalLine."Document Type",GenJournalLine."Document No.",GenJournalBatch.Name);
      GenJournalLine.SETRANGE("Document No.",GenJournalLine."Document No.");
      GenJournalLine.FINDFIRST;

      // Exercise.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Amount, Remaining Amount and Open field on Customer Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      CustLedgerEntry.CALCFIELDS(Amount,"Remaining Amount");
      CustLedgerEntry.TESTFIELD(Amount,GenJournalLine.Amount);
      CustLedgerEntry.TESTFIELD("Remaining Amount",0);
      CustLedgerEntry.TESTFIELD(Open,FALSE);
    END;

    [Test]
    PROCEDURE CustApplyUsingAppliestoDocNoBlankAccNo@57();
    VAR
      CustLedgerEntry@1004 : Record 21;
      GenJournalBatch@1003 : Record 232;
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Check that it is possible to enter an invoice number without having a customer number.
      // Setup: Create and post Customer Invoice, create Payment and Apply Payment using Applies to Doc. No.
      Initialize;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,FindCashReceiptTemplate);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,CreateCustomer,GenJournalLine."Document Type"::Invoice,
        LibraryRandom.RandDec(100,2),'',GenJournalLine."Account Type"::Customer);
      ModifyGenLineBalAccountNo(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      // Retrieve the new invoice number
      CustLedgerEntry.FINDLAST;
      CustLedgerEntry.TESTFIELD("Document Type",CustLedgerEntry."Document Type"::Invoice);

      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalBatch."Journal Template Name");
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,'',GenJournalLine."Document Type"::Payment,
        0,'',GenJournalLine."Account Type");
      ModifyGenLineBalAccountNo(GenJournalLine);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.TESTFIELD("Applies-to Doc. No.",'');
      GenJournalLine.TESTFIELD("Account No.",'');
      GenJournalLine.VALIDATE("Applies-to Doc. No.",CustLedgerEntry."Document No.");
      // Verify that the customer number was filled in.
      Assert.AreEqual(CustLedgerEntry."Customer No.",GenJournalLine."Account No.",WrongCustNoErr);
    END;

    [Test]
    PROCEDURE VendApplyUsingAppliestoDocNoBlankAccNo@66();
    VAR
      VendLedgerEntry@1004 : Record 25;
      GenJournalBatch@1003 : Record 232;
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Check that it is possible to enter an invoice number without having a vendor number.
      // Setup: Create and post Vendor Invoice, create Payment and Apply Payment using Applies to Doc. No.
      Initialize;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,FindCashReceiptTemplate);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,CreateVendor,GenJournalLine."Document Type"::Invoice,
        -LibraryRandom.RandDec(100,2),'',GenJournalLine."Account Type"::Vendor);
      ModifyGenLineBalAccountNo(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      // Retrieve the new invoice number
      VendLedgerEntry.FINDLAST;
      VendLedgerEntry.TESTFIELD("Document Type",VendLedgerEntry."Document Type"::Invoice);

      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalBatch."Journal Template Name");
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,'',GenJournalLine."Document Type"::Payment,
        0,'',GenJournalLine."Account Type");
      ModifyGenLineBalAccountNo(GenJournalLine);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.TESTFIELD("Applies-to Doc. No.",'');
      GenJournalLine.TESTFIELD("Account No.",'');
      GenJournalLine.VALIDATE("Applies-to Doc. No.",VendLedgerEntry."Document No.");
      // Verify that the Vendomer number was filled in.
      Assert.AreEqual(VendLedgerEntry."Vendor No.",GenJournalLine."Account No.",WrongVendNoErr);
    END;

    [Test]
    [HandlerFunctions(ApplyCustomerEntriesPageHandler)]
    PROCEDURE AppliesToIDOnApplyCustomerEntriesWithGeneralLine@49();
    VAR
      GenJournalLine@1004 : Record 81;
    BEGIN
      // Check Applies to ID field should be blank on Apply Customer Entries Page.
      // Verify With ApplyCustomerEntriesPageHandler.
      Initialize;
      CreateGeneralLineAndApplyEntries(
        GenJournalLine."Account Type"::Customer,CreateCustomer,LibraryRandom.RandDec(100,2));  // Take Random Amount for General Line.
    END;

    [Test]
    [HandlerFunctions(ApplyVendorEntriesPageHandler)]
    PROCEDURE AppliesToIDOnApplyVendorEntriesWithGeneralLine@44();
    VAR
      GenJournalLine@1004 : Record 81;
    BEGIN
      // Check Applies to ID field should be blank on Apply Vendor Entries Page.
      // Verify with ApplyVendorEntriesPageHandler.
      Initialize;
      CreateGeneralLineAndApplyEntries(GenJournalLine."Account Type"::Vendor,CreateVendor,-LibraryRandom.RandDec(100,2)); // Take Random Amount for General Line.
    END;

    LOCAL PROCEDURE CreateGeneralLineAndApplyEntries@69(AccountType@1000 : Option;AccountNo@1001 : Code[20];Amount@1008 : Decimal);
    VAR
      GenJournalBatch@1003 : Record 232;
      GenJournalLine@1004 : Record 81;
      GeneralJournal@1006 : TestPage 39;
    BEGIN
      // Setup: Create and Post General Line for Invoice.
      SelectGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        AccountType,AccountNo,Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Create Payment General Line with Zero Amount.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        AccountType,AccountNo,0);

      // Verify: Open Apply Entries Page and Check Applies to ID field should be blank.
      GeneralJournal.OPENVIEW;
      GeneralJournal.CurrentJnlBatchName.SETVALUE(GenJournalBatch.Name);
      GeneralJournal."Apply Entries".INVOKE;
    END;

    [Test]
    PROCEDURE SalesJournalWithNewBatchName@55();
    VAR
      GenJournalTemplate@1000 : Record 80;
      SalesJournal@1002 : TestPage 253;
      BatchName@1001 : Code[10];
    BEGIN
      // Check Sales Journal Page's Caption with Created Batch Name.

      // Setup: Create New Sales General Batch and Template.
      Initialize;
      BatchName := CreateGeneralBatchAndTemplate(GenJournalTemplate.Type::Sales);
      COMMIT; // commit is required to save the DB State.

      // Exercise: Open Sales Journal page with Created Batch Name.
      SalesJournal.OPENVIEW;
      SalesJournal.CurrentJnlBatchName.SETVALUE(BatchName);

      // Verify: Verify Sales Journal Page's Caption with Created Batch Name.
      Assert.AreEqual(STRSUBSTNO(BatchMessage,'Sales Journal',BatchName,BatchName),SalesJournal.CAPTION,ValidationError);
    END;

    [Test]
    PROCEDURE PurchaseJournalWithNewBatchName@43();
    VAR
      GenJournalTemplate@1000 : Record 80;
      PurchaseJournal@1002 : TestPage 254;
      BatchName@1001 : Code[10];
    BEGIN
      // Check Purchase Journal Page's Caption with Created Batch Name.

      // Setup: Create New Purchase General Batch and Template.
      Initialize;
      BatchName := CreateGeneralBatchAndTemplate(GenJournalTemplate.Type::Purchases);
      COMMIT; // commit is required to save the DB State.

      // Exercise: Open Purchase Journal page with Created Batch Name.
      PurchaseJournal.OPENVIEW;
      PurchaseJournal.CurrentJnlBatchName.SETVALUE(BatchName);

      // Verify: Verify Purchase Journal Page's Caption with Created Batch Name.
      Assert.AreEqual(STRSUBSTNO(BatchMessage,'Purchase Journal',BatchName,BatchName),PurchaseJournal.CAPTION,ValidationError);
    END;

    [Test]
    PROCEDURE CustomerListChangeFilteredFieldInCard@61();
    VAR
      Customer@1000 : Record 18;
      CustomerList@1002 : TestPage 22;
      CustomerCard@1003 : TestPage 21;
      NewName@1001 : Text;
    BEGIN
      // [FEATURE] [Customer] [UI]
      // [SCENARIO] Change field value in Customer Card invoked from filtered Customer List
      // [GIVEN] Customer "A" with Name "X1"
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE(Name,LibraryUtility.GenerateGUID);
      Customer.MODIFY(TRUE);

      // [GIVEN] Customer List filtered by Name = "X1"
      CustomerList.OPENVIEW;
      CustomerList.FILTER.SETFILTER(Name,Customer.Name);

      // [GIVEN] Customer Card for Customer "A" opened from Customer List
      CustomerList."No.".ASSERTEQUALS(Customer."No.");
      CustomerCard.TRAP;
      CustomerList.EDIT.INVOKE;

      // [GIVEN] Name changed to "X2" for Customer "A" in Customer Card
      NewName := LibraryUtility.GenerateGUID;
      CustomerCard.Name.SETVALUE(NewName);

      // [WHEN] Click OK on  Customer Card
      CustomerCard.OK.INVOKE;

      // [THEN] Customer Card closed and Customer List does not contain any record.
      CustomerList."No.".ASSERTEQUALS('');
      CustomerList.CLOSE;
      Customer.GET(Customer."No.");
      Assert.AreEqual(NewName,Customer.Name,'The customer should have the right new name');
    END;

    [Test]
    PROCEDURE VendorListChangeFilteredFieldInCard@62();
    VAR
      Vendor@1000 : Record 23;
      VendorList@1002 : TestPage 27;
      VendorCard@1003 : TestPage 26;
    BEGIN
      // [FEATURE] [Vendor] [UI]
      // [SCENARIO] Change field value in Vendor Card invoked from filtered Vendor List
      // [GIVEN] Vendor "A" with Name "X1"
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE(Name,LibraryUtility.GenerateGUID);
      Vendor.MODIFY(TRUE);

      // [GIVEN] Vendor List filtered by Name = "X1"
      VendorList.OPENVIEW;
      VendorList.FILTER.SETFILTER(Name,Vendor.Name);

      // [GIVEN] Vendor Card for Vendor "A" opened from Vendor List
      VendorList."No.".ASSERTEQUALS(Vendor."No.");
      VendorCard.TRAP;
      VendorList.EDIT.INVOKE;

      // [GIVEN] Name changed to "X2" for Vendor "A" in Vendor Card
      VendorCard.Name.SETVALUE(LibraryUtility.GenerateGUID);

      // [WHEN] Click OK on Vendor Card.
      VendorCard.OK.INVOKE;

      // [THEN] Vendor Card closed and Vendor List does not contain any record.
      VendorList."No.".ASSERTEQUALS('');
      VendorList.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DuplicateContactFoundConfirmHandlerYes,ContactDuplicatesModalPageHandler)]
    PROCEDURE TestChangeFilteredFieldForCustomerWithDuplicateContacts@59();
    VAR
      Customer@1000 : Record 18;
      Vendor@1001 : Record 23;
      Contact@1004 : Record 5050;
      ContDuplicateSearchString@1009 : Record 5086;
      CustContUpdate@1006 : Codeunit 5056;
      VendContUpdate@1007 : Codeunit 5057;
      DuplicateManagement@1008 : Codeunit 5060;
      CustomerList@1003 : TestPage 22;
      CustomerCard@1002 : TestPage 21;
      OriginalName@1005 : Text[50];
      NewName@1010 : Text;
    BEGIN
      Customer.DELETEALL;
      Contact.DELETEALL;
      ContDuplicateSearchString.DELETEALL;

      // Madeira Bug 155753
      // [FEATURE] [Vendor] [UI]
      // [SCENARIO] Change field value in Customer Card invoked from filtered Customer List
      // [GIVEN] A customer
      OriginalName := LibraryUtility.GenerateGUID;
      LibrarySales.CreateCustomer(Customer);
      Customer.Name := OriginalName;
      Customer.Address := 'Sesamestreet 42';
      Customer."Post Code" := '1234XP';
      Customer.City := 'Denver';
      Customer."Phone No." := '0102573895';
      Customer.MODIFY(TRUE);
      CustContUpdate.OnModify(Customer);

      // [GIVEN] A vendor with the same name, address etc as the customer
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.Name := OriginalName;
      Vendor.Address := Customer.Address;
      Vendor."Post Code" := Customer."Post Code";
      Vendor.City := Customer.City;
      Vendor."Phone No." := Customer."Phone No.";
      Vendor.MODIFY(TRUE);
      VendContUpdate.OnModify(Vendor);

      // [THEN] The contact belonging to the customer and vendor are duplicates
      Contact.SETRANGE(Name,OriginalName);
      Assert.AreEqual(2,Contact.COUNT,'There should be two contacts with the same name');

      Contact.FINDSET;
      REPEAT
        DuplicateManagement.MakeContIndex(Contact);
      UNTIL Contact.NEXT = 0;

      Assert.IsTrue(DuplicateManagement.DuplicateExist(Contact),'The contacts should be duplicates');

      // [GIVEN] Customer List filtered by the name of the customer
      CustomerList.OPENVIEW;
      CustomerList.FILTER.SETFILTER(Name,Customer.Name);

      // [GIVEN] Customer Card for the customer opened from the Customer List so it has the same filter
      CustomerList."No.".ASSERTEQUALS(Customer."No.");
      CustomerCard.TRAP;
      CustomerList.EDIT.INVOKE;

      // [GIVEN] The customer's name is changed
      NewName := LibraryUtility.GenerateGUID;
      CustomerCard.Name.SETVALUE(NewName);

      // [WHEN] The customer card is closed
      // Using NEXT instead of OK because in the automated test the pages get focus/closed in such a
      // way that another modify call is done and a deadlock results. Does not repro manually.
      CustomerCard.NEXT;
      CustomerCard.CLOSE;
      CustomerList.CLOSE;

      // [THEN] The customer is renamed, and all that without errors.
      Customer.GET(Customer."No.");
      Assert.AreEqual(NewName,Customer.Name,'The customer should have the right new name');
    END;

    [Test]
    PROCEDURE ApplyCustPaymentToInvoiceAndTwoCrMemos@65();
    VAR
      CustLedgerEntry@1001 : Record 21;
      CustomerNo@1000 : Code[20];
      PaymentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 376164] When apply Sales Payment to two Credit Memos and Invoice with total zero Amount all Customer Ledger Entries should be closed
      Initialize;

      // [GIVEN] 2 Sales Credit Memos with Amounts = -10, -20, Payment with Amount = -30, Invoice with Amount = 60
      CustomerNo := LibrarySales.CreateCustomerNo;
      CreateAndPostCustMultipleJnlLines(PaymentNo,CustomerNo);

      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Payment,PaymentNo);

      // [WHEN] Apply Payment to 2 Cr.Memos and Invoice
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry);

      // [THEN] All Customer Ledger Entries are closed
      CustLedgerEntry.RESET;
      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgerEntry.SETRANGE(Open,TRUE);
      Assert.RecordIsEmpty(CustLedgerEntry);
    END;

    [Test]
    PROCEDURE ApplyVendPaymentToInvoiceAndTwoCrMemos@64();
    VAR
      VendorLedgerEntry@1001 : Record 25;
      VendorNo@1000 : Code[20];
      PaymentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 376164] When apply Purchase Payment to two Credit Memos and Invoice with total zero Amount all Vendor Ledger Entries should be closed
      Initialize;

      // [GIVEN] 2 Purchase Credit Memos with Amounts = 10, 20, Payment with Amount = 30, Invoice with Amount = -60
      VendorNo := LibraryPurchase.CreateVendorNo;
      CreateAndPostVendMultipleJnlLines(PaymentNo,VendorNo);

      VendorLedgerEntry.SETRANGE("Vendor No.",VendorNo);
      LibraryERM.SetAppliestoIdVendor(VendorLedgerEntry);
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Payment,PaymentNo);

      // [WHEN] Apply Payment to two Cr.Memos and Invoice
      LibraryERM.PostVendLedgerApplication(VendorLedgerEntry);

      // [THEN] All Vendor Ledger Entries are closed
      VendorLedgerEntry.RESET;
      VendorLedgerEntry.SETRANGE("Vendor No.",VendorNo);
      VendorLedgerEntry.SETRANGE(Open,TRUE);
      Assert.RecordIsEmpty(VendorLedgerEntry);
    END;

    [Test]
    [HandlerFunctions(VendorLedgerEntriesPageHandler,ApplyVendorEntriesClearsAppliesToIdPageHandler)]
    PROCEDURE VendAppliesToIdClearedAfterAmountToApplyIsSetToZero@77();
    VAR
      Vendor@1001 : Record 23;
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 206799] "Applies-to ID" is cleared when previously non-zero "Amount to Apply" is set to zero in Apply Vendor Entries Page.
      Initialize;

      // [GIVEN] Vendor with posted purchase invoice and credit memo.
      SetupVendorWithTwoPostedDocuments(Vendor);

      // [GIVEN] Vendor Ledger Entries is opened and "Apply Entries" button is invoked, opening Apply Vendor Entries Page.
      // Handled by VendorLedgerEntriesPageHandler
      VendorLedgerEntry.SETRANGE("Vendor No.",Vendor."No.");
      PAGE.RUN(PAGE::"Vendor Ledger Entries",VendorLedgerEntry);

      // The following sequence is executed by ApplyVendorEntriesClearsAppliesToIdPageHandler
      // [GIVEN] Set "Amount to Apply" = 100. "Applies-to ID" is populated.
      // [WHEN] Set "Amount to Apply" = 0.
      // [THEN] "Applies-to ID" is cleared.
    END;

    [Test]
    [HandlerFunctions(CustomerLedgerEntriesPageHandler,ApplyCustEntriesClearsAppliesToIdPageHandler)]
    PROCEDURE CustAppliesToIdClearedAfterAmountToApplyIsSetToZero@82();
    VAR
      Customer@1002 : Record 18;
      CustLedgerEntry@1003 : Record 21;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 206799] "Applies-to ID" is cleared when previously non-zero "Amount to Apply" is set to zero in Apply Customer Entries Page.
      Initialize;

      // [GIVEN] Customer with posted sales invoice and credit memo.
      SetupCustomerWithTwoPostedDocuments(Customer);

      // [GIVEN] Customer Ledger Entries is opened and "Apply Entries" button is invoked, opening Apply Customer Entries Page.
      // Handled by CustomerLedgerEntriesPageHandler
      CustLedgerEntry.SETRANGE("Customer No.",Customer."No.");
      PAGE.RUN(PAGE::"Customer Ledger Entries",CustLedgerEntry);

      // The following sequence is executed by ApplyCustEntriesClearsAppliesToIdPageHandler
      // [GIVEN] Set "Amount to Apply" = 100, "Applies-to ID" is populated.
      // [WHEN] Set "Amount to Apply" = 0.
      // [THEN] "Applies-to ID" is cleared.
    END;

    [Test]
    [HandlerFunctions(VendorLedgerEntriesPageHandler,ApplyVendorEntriesPageClearsAmountToApplyPageHandler)]
    PROCEDURE VendAmountToApplyNotClearedAfterBeingSetToZero@237();
    VAR
      Vendor@1001 : Record 23;
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 206799] "Amount to Apply" is not cleared when previously non-zero "Amount to Apply" was set to zero and then again to a value in Apply Vendor Entries Page.
      Initialize;

      // [GIVEN] Vendor with posted purchase invoice and credit memo.
      SetupVendorWithTwoPostedDocuments(Vendor);

      // [GIVEN] Vendor Ledger Entries is opened and "Apply Entries" button is invoked, opening Apply Vendor Entries Page.
      // Handled by VendorLedgerEntriesPageHandler
      VendorLedgerEntry.SETRANGE("Vendor No.",Vendor."No.");
      PAGE.RUN(PAGE::"Vendor Ledger Entries",VendorLedgerEntry);

      // The following sequence is executed by ApplyVendorEntriesPageClearsAmountToApplyPageHandler
      // [GIVEN] Set "Amount to Apply" = 100.
      // [GIVEN] Set "Amount to Apply" = 0.
      // [WHEN] Set "Amount to Apply" = 50.
      // [THEN] "Amount to Apply" is 50.
    END;

    [Test]
    [HandlerFunctions(CustomerLedgerEntriesPageHandler,ApplyCustEntriesPageClearsAmountToApplyPageHandler)]
    PROCEDURE CustAmountToApplyNotClearedAfterBeingSetToZero@215();
    VAR
      Customer@1002 : Record 18;
      CustLedgerEntry@1003 : Record 21;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 206799] "Amount to Apply" is not cleared when previously non-zero "Amount to Apply" was set to zero and then again to a value in Apply Customer Entries Page.
      Initialize;

      // [GIVEN] Customer with posted sales invoice and credit memo.
      SetupCustomerWithTwoPostedDocuments(Customer);

      // [GIVEN] Customer Ledger Entries is opened and "Apply Entries" button is invoked, opening Apply Customer Entries Page.
      // Handled by CustomerLedgerEntriesPageHandler
      CustLedgerEntry.SETRANGE("Customer No.",Customer."No.");
      PAGE.RUN(PAGE::"Customer Ledger Entries",CustLedgerEntry);

      // The following sequence is executed by ApplyCustEntriesPageClearsAmountToApplyPageHandler
      // [GIVEN] Set "Amount to Apply" = 100.
      // [GIVEN] Set "Amount to Apply" = 0.
      // [WHEN] Set "Amount to Apply" = 50.
      // [THEN] "Amount to Apply" is 50.
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateAccountInCustomerPostingGroup;
      LibraryERMCountryData.UpdateAccountInVendorPostingGroups;
      LibraryERMCountryData.RemoveBlankGenJournalTemplate;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@28(VAR SalesLine@1010 : Record 37);
    VAR
      Item@1006 : Record 27;
      SalesHeader@1005 : Record 36;
      Customer@1003 : Record 18;
      LibraryInventory@1000 : Codeunit 132201;
    BEGIN
      Customer.SETRANGE("Currency Code",'');
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,Customer."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(5,2) * 1000);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2) * 1000);
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateCurrency@29() : Code[10];
    VAR
      Currency@1007 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCustomer@54() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithPaymentTerm@70(PaymentTermsCode@1000 : Code[10]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Payment Terms Code",PaymentTermsCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateGeneralJournalLines@23(VAR GenJournalLine@1007 : Record 81;GenJournalBatch@1005 : Record 232;AccountNo@1001 : Code[20];DocumentType@1000 : Option;Amount@1003 : Decimal;CurrencyCode@1002 : Code[10];AccountType@1004 : Option);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePaymentTerms@15(VAR PaymentTerms@1000 : Record 3;CalcPmtDiscOnCrMemos@1001 : Boolean);
    BEGIN
      // Take Random amount for Discount % and Discount Date Calculation.
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,CalcPmtDiscOnCrMemos);
    END;

    LOCAL PROCEDURE CreateVendor@5() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateVendorWithPaymentTerm@72(PaymentTermsCode@1002 : Code[10]) : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Payment Terms Code",PaymentTermsCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateAndPostCustomerEntries@40(VAR GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1001 : Record 232;
      ApplyCustEntryDocumentType@1002 : Option;
      ApplyCustEntryDocumentType2@1003 : Option;
    BEGIN
      // Create and Post Invoice,Credit Memo and create Payment.
      // Take Random Amount on Gen. Journal Line.
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,FindCashReceiptTemplate);
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,CreateCustomer,GenJournalLine."Document Type"::Invoice,
        LibraryRandom.RandDec(100,2),'',GenJournalLine."Account Type"::Customer);
      ModifyGenLineBalAccountNo(GenJournalLine);
      ApplyCustEntryDocumentType := GenJournalLine."Document Type";

      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",GenJournalLine."Document Type"::"Credit Memo",
        -GenJournalLine.Amount,'',GenJournalLine."Account Type");
      ModifyGenLineBalAccountNo(GenJournalLine);
      ApplyCustEntryDocumentType2 := GenJournalLine."Document Type";

      LibraryVariableStorage.Enqueue(ApplyCustEntryDocumentType2);
      LibraryVariableStorage.Enqueue(ApplyCustEntryDocumentType);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalBatch."Journal Template Name");
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalBatch,GenJournalLine."Account No.",GenJournalLine."Document Type"::Payment,
        0,'',GenJournalLine."Account Type");
    END;

    LOCAL PROCEDURE CreateGeneralBatchAndTemplate@56(Type@1001 : Option) : Code[10];
    VAR
      GenJournalTemplate@1000 : Record 80;
      GenJournalBatch@1003 : Record 232;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,Type);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      EXIT(GenJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostMultipleJnlLinesWithTwoCrMemos@73(VAR PaymentNo@1004 : Code[20];AccountType@1006 : Option;AccountNo@1000 : Code[20];Sign@1007 : Integer);
    VAR
      GenJournalLine@1002 : Record 81;
      InvAmount@1005 : Decimal;
    BEGIN
      LibraryJournals.CreateGenJournalLineWithBatch(
        GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",
        AccountType,AccountNo,Sign * LibraryRandom.RandDecInRange(100,200,2));
      InvAmount += GenJournalLine.Amount;
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",
        GenJournalLine."Document Type"::"Credit Memo",
        AccountType,AccountNo,GenJournalLine."Bal. Account Type",GenJournalLine."Bal. Account No.",
        Sign * LibraryRandom.RandDecInRange(100,200,2));
      InvAmount += GenJournalLine.Amount;
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",
        GenJournalLine."Document Type"::Payment,
        AccountType,AccountNo,GenJournalLine."Bal. Account Type",GenJournalLine."Bal. Account No.",
        Sign * LibraryRandom.RandDecInRange(100,200,2));
      InvAmount += GenJournalLine.Amount;
      PaymentNo := GenJournalLine."Document No.";
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",
        GenJournalLine."Document Type"::Invoice,
        AccountType,AccountNo,GenJournalLine."Bal. Account Type",GenJournalLine."Bal. Account No.",
        -InvAmount);

      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostCustMultipleJnlLines@68(VAR PaymentNo@1004 : Code[20];CustomerNo@1000 : Code[20]);
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      CreateAndPostMultipleJnlLinesWithTwoCrMemos(PaymentNo,GenJournalLine."Account Type"::Customer,CustomerNo,-1);
    END;

    LOCAL PROCEDURE CreateAndPostVendMultipleJnlLines@67(VAR PaymentNo@1004 : Code[20];VendorNo@1000 : Code[20]);
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      CreateAndPostMultipleJnlLinesWithTwoCrMemos(PaymentNo,GenJournalLine."Account Type"::Vendor,VendorNo,1);
    END;

    LOCAL PROCEDURE FindCashReceiptTemplate@37() : Code[10];
    VAR
      GenJournalTemplate@1003 : Record 80;
    BEGIN
      // Find existing Cash Receipt Templates.
      // Take CASHRCPT as Applies-to Doc. No. field is available on this journal.
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::"Cash Receipts");
      GenJournalTemplate.FINDFIRST;
      EXIT(GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE ModifyGenLineBalAccountNo@38(VAR GenJournalLine@1001 : Record 81);
    VAR
      GLAccount@1002 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyGenLinePostingDate@71(VAR GenJournalLine@1001 : Record 81;PostingDate@1000 : Date);
    BEGIN
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OpenAndVerifyCustLedgerEntry@27(GenJournalLine@1000 : Record 81;DocumentNo@1001 : Code[20];OriginalPmtDiscPossible@1002 : Decimal;DocumentType@1005 : Option;DocumentType2@1006 : Option);
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      CustLedgerEntry@1003 : Record 21;
    BEGIN
      // Exercise.
      OpenCustLedgerEntryPage(DocumentType,GenJournalLine."Account No.");

      // Verify: Verify Payment Discount amount on Customer Ledger Entry.
      GeneralLedgerSetup.GET;
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType2,DocumentNo);
      Assert.AreNearlyEqual(
        OriginalPmtDiscPossible,CustLedgerEntry."Original Pmt. Disc. Possible",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,CustLedgerEntry.FIELDCAPTION("Remaining Amount"),OriginalPmtDiscPossible,
          CustLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE OpenAndVerifyVendorLedgerEntry@39(GenJournalLine@1000 : Record 81;DocumentNo@1001 : Code[20];OriginalPmtDiscPossible@1002 : Decimal;DocumentType@1005 : Option;DocumentType2@1006 : Option);
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      VendorLedgerEntry@1003 : Record 25;
    BEGIN
      // Exercise.
      OpenVendorLedgerEntryPage(DocumentType,GenJournalLine."Account No.");

      // Verify: Verify Payment Discount amount on Vendor Ledger Entry.
      GeneralLedgerSetup.GET;
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType2,DocumentNo);
      Assert.AreNearlyEqual(
        OriginalPmtDiscPossible,VendorLedgerEntry."Original Pmt. Disc. Possible",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,VendorLedgerEntry.FIELDCAPTION("Remaining Amount"),OriginalPmtDiscPossible,
          VendorLedgerEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE OpenCustLedgerEntryPage@10(DocumentType@1000 : Option;CustomerNo@1001 : Code[20]);
    VAR
      CustomerLedgerEntries@1002 : TestPage 25;
    BEGIN
      CustomerLedgerEntries.OPENVIEW;
      CustomerLedgerEntries.FILTER.SETFILTER("Document Type",FORMAT(DocumentType));
      CustomerLedgerEntries.FILTER.SETFILTER("Customer No.",CustomerNo);
      CustomerLedgerEntries."Apply Entries".INVOKE;
    END;

    LOCAL PROCEDURE OpenSalesAnalysisMatrix@32(RoundingFactor@1002 : Option;AnalysisViewCode@1003 : Code[10]);
    VAR
      Item@1000 : Record 27;
      SalesAnalysisByDimensions@1001 : TestPage 7158;
    BEGIN
      // Exercise. Open Show Matrix page by Sales Analysis by Dimension Page.
      SalesAnalysisByDimensions.OPENEDIT;
      SalesAnalysisByDimensions.CurrentItemAnalysisViewCode.SETVALUE(AnalysisViewCode);
      SalesAnalysisByDimensions.LineDimCode.SETVALUE(Item.TABLECAPTION);
      SalesAnalysisByDimensions.RoundingFactor.SETVALUE(RoundingFactor);
      SalesAnalysisByDimensions.ShowMatrix_Process.INVOKE;
    END;

    LOCAL PROCEDURE OpenVendorLedgerEntryPage@11(DocumentType@1000 : Option;VendorNo@1001 : Code[20]);
    VAR
      VendorLedgerEntries@1002 : TestPage 29;
    BEGIN
      VendorLedgerEntries.OPENVIEW;
      VendorLedgerEntries.FILTER.SETFILTER("Document Type",FORMAT(DocumentType));
      VendorLedgerEntries.FILTER.SETFILTER("Vendor No.",VendorNo);
      VendorLedgerEntries.ActionApplyEntries.INVOKE;
    END;

    LOCAL PROCEDURE SelectGenJournalBatch@26(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      // Select General Journal Batch and clear General Journal Lines to make sure that no line exist before creating
      // General Journal Lines.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch)
    END;

    LOCAL PROCEDURE SetupSalesAnalysisMatrix@51(VAR SalesLine@1000 : Record 37) : Code[10];
    VAR
      ItemAnalysisView@1001 : Record 7152;
      AnalysisViewListSales@1009 : TestPage 9371;
    BEGIN
      // Create and Post Sales Invoice and Update Item analysis through page.
      ItemAnalysisView.SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area"::Sales);
      ItemAnalysisView.FINDFIRST;

      CreateAndPostSalesInvoice(SalesLine);

      AnalysisViewListSales.OPENVIEW;
      AnalysisViewListSales.FILTER.SETFILTER(Code,ItemAnalysisView.Code);
      AnalysisViewListSales."Codeunit Update Item Analysis View".INVOKE;
      EXIT(ItemAnalysisView.Code);
    END;

    LOCAL PROCEDURE SetJournalLineAppliesToDocNo@42(DocumentType@1000 : Option;DocumentNo@1001 : Code[20];BatchName@1003 : Code[10]);
    VAR
      CashReceiptJournal@1002 : TestPage 255;
    BEGIN
      // Open Cash Receipt Journal page for lookup on applies to Doc. no. field.
      CashReceiptJournal.OPENEDIT;
      CashReceiptJournal.CurrentJnlBatchName.SETVALUE := BatchName;
      CashReceiptJournal.FILTER.SETFILTER("Document Type",FORMAT(DocumentType));
      CashReceiptJournal.FILTER.SETFILTER("Document No.",DocumentNo);
      CashReceiptJournal."Applies-to Doc. No.".LOOKUP;
      CashReceiptJournal.OK.INVOKE;
    END;

    LOCAL PROCEDURE GetPaymentTermsDiscountPercentage@60(PaymentTerms@1000 : Record 3) : Decimal;
    BEGIN
      EXIT(LibraryERM.GetPaymentTermsDiscountPct(PaymentTerms));
    END;

    LOCAL PROCEDURE SetupVendorWithTwoPostedDocuments@79(VAR Vendor@1000 : Record 23);
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      CreateAndPostJournalLine(
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Vendor,
        Vendor."No.",-LibraryRandom.RandIntInRange(1000,5000));
      CreateAndPostJournalLine(
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Account Type"::Vendor,
        Vendor."No.",LibraryRandom.RandIntInRange(100,500));
    END;

    LOCAL PROCEDURE SetupCustomerWithTwoPostedDocuments@76(VAR Customer@1000 : Record 18);
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      CreateAndPostJournalLine(
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,
        Customer."No.",LibraryRandom.RandIntInRange(1000,5000));
      CreateAndPostJournalLine(
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Account Type"::Customer,
        Customer."No.",-LibraryRandom.RandIntInRange(100,999));
    END;

    LOCAL PROCEDURE CreateAndPostJournalLine@117(DocumentType@1000 : Option;AccountType@1001 : Option;AccountNo@1003 : Code[20];LineAmount@1006 : Decimal);
    VAR
      GenJournalLine@1004 : Record 81;
    BEGIN
      LibraryJournals.CreateGenJournalLineWithBatch(
        GenJournalLine,DocumentType,AccountType,AccountNo,LineAmount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    [ModalPageHandler]
    PROCEDURE ApplyCustomerEntriesPageHandler@47(VAR ApplyCustomerEntries@1000 : TestPage 232);
    BEGIN
      ApplyCustomerEntries."Applies-to ID".ASSERTEQUALS('');
    END;

    [ModalPageHandler]
    PROCEDURE ApplyCustEntriesOKPageHandler@41(VAR ApplyCustomerEntries@1001 : TestPage 232);
    BEGIN
      // Modal Page Handler.
      // Using Case to handle consecutive Modal Page Handlers.

      CASE LibraryVariableStorage.DequeueInteger OF
        1:
          BEGIN
            ApplyCustomerEntries."Document Type".ASSERTEQUALS(LibraryVariableStorage.DequeueInteger);
            ApplyCustomerEntries.NEXT;
            ApplyCustomerEntries."Document Type".ASSERTEQUALS(LibraryVariableStorage.DequeueInteger);
          END;
        2:
          ASSERTERROR ApplyCustomerEntries."Document Type".ASSERTEQUALS(LibraryVariableStorage.DequeueInteger);
      END;
      ApplyCustomerEntries.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ApplyCustEntryPageHandler@4(VAR ApplyCustomerEntries@1000 : TestPage 232);
    BEGIN
      ApplyCustomerEntries."Set Applies-to ID".INVOKE;
      LibraryVariableStorage.Enqueue(ApplyCustomerEntries.AppliedAmount.VALUE);
      LibraryVariableStorage.Enqueue(ApplyCustomerEntries.ApplyingAmount.VALUE);
      LibraryVariableStorage.Enqueue(ApplyCustomerEntries.ControlBalance.VALUE);
      LibraryVariableStorage.Enqueue(ApplyCustomerEntries.ApplnCurrencyCode.VALUE);
    END;

    [ModalPageHandler]
    PROCEDURE ApplyVendorEntriesPageHandler@53(VAR ApplyVendorEntries@1000 : TestPage 233);
    BEGIN
      ApplyVendorEntries."Applies-to ID".ASSERTEQUALS('');
    END;

    [ModalPageHandler]
    PROCEDURE ApplyVendorPageHandler@21(VAR ApplyVendorEntries@1000 : TestPage 233);
    BEGIN
      ApplyVendorEntries.ActionSetAppliesToID.INVOKE;
      LibraryVariableStorage.Enqueue(ApplyVendorEntries.AppliedAmount.VALUE);
      LibraryVariableStorage.Enqueue(ApplyVendorEntries.ApplyingAmount.VALUE);
      LibraryVariableStorage.Enqueue(ApplyVendorEntries.ControlBalance.VALUE);
      LibraryVariableStorage.Enqueue(ApplyVendorEntries.ApplnCurrencyCode.VALUE);
    END;

    [ModalPageHandler]
    PROCEDURE ApplyPostCustEntryPageHandler@9(VAR ApplyCustomerEntries@1000 : TestPage 232);
    BEGIN
      ApplyCustomerEntries."Set Applies-to ID".INVOKE;
      ApplyCustomerEntries."Post Application".INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostAndApplyVendorPageHandler@58(VAR ApplyVendorEntries@1000 : TestPage 233);
    BEGIN
      ApplyVendorEntries.ActionSetAppliesToID.INVOKE;
      ApplyVendorEntries.ActionPostApplication.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@14(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    [ModalPageHandler]
    PROCEDURE PostApplicationPageHandler@6(VAR PostApplication@1000 : Page 579;VAR Response@1005 : Action);
    BEGIN
      // Modal Page Handler.
      Response := ACTION::OK
    END;

    [ModalPageHandler]
    PROCEDURE MatixPageHandler@31(VAR SalesAnalysisByDimMatrix@1000 : TestPage 9227);
    BEGIN
      SalesAnalysisByDimMatrix.FINDFIRSTFIELD(Code,LibraryVariableStorage.DequeueText);
      SalesAnalysisByDimMatrix.TotalQuantity.ASSERTEQUALS(-LibraryVariableStorage.DequeueDecimal);
      SalesAnalysisByDimMatrix.TotalInvtValue.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
    END;

    [ModalPageHandler]
    PROCEDURE ContactDuplicatesModalPageHandler@102(VAR ContactDuplicates@1000 : TestPage 5134);
    BEGIN
      ContactDuplicates.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE DuplicateContactFoundConfirmHandlerYes@97(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Assert.ExpectedMessage('Duplicate Contacts were found',Question);
      Reply := TRUE;
    END;

    [PageHandler]
    PROCEDURE VendorLedgerEntriesPageHandler@93(VAR VendorLedgerEntries@1000 : TestPage 29);
    BEGIN
      VendorLedgerEntries.ActionApplyEntries.INVOKE;
    END;

    [PageHandler]
    PROCEDURE CustomerLedgerEntriesPageHandler@84(VAR CustomerLedgerEntries@1000 : TestPage 25);
    BEGIN
      CustomerLedgerEntries."Apply Entries".INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ApplyVendorEntriesClearsAppliesToIdPageHandler@78(VAR ApplyVendorEntries@1000 : TestPage 233);
    BEGIN
      ApplyVendorEntries."Amount to Apply".SETVALUE := LibraryRandom.RandDec(100,2);
      ApplyVendorEntries."Applies-to ID".ASSERTEQUALS(USERID);

      ApplyVendorEntries."Amount to Apply".SETVALUE := 0;
      ApplyVendorEntries."Applies-to ID".ASSERTEQUALS('');
    END;

    [ModalPageHandler]
    PROCEDURE ApplyCustEntriesClearsAppliesToIdPageHandler@74(VAR ApplyCustomerEntries@1000 : TestPage 232);
    BEGIN
      ApplyCustomerEntries."Amount to Apply".SETVALUE := -LibraryRandom.RandDec(100,2);
      ApplyCustomerEntries."Applies-to ID".ASSERTEQUALS(USERID);

      ApplyCustomerEntries."Amount to Apply".SETVALUE := 0;
      ApplyCustomerEntries."Applies-to ID".ASSERTEQUALS('');
    END;

    [ModalPageHandler]
    PROCEDURE ApplyVendorEntriesPageClearsAmountToApplyPageHandler@238(VAR ApplyVendorEntries@1000 : TestPage 233);
    VAR
      AmountToApply@1001 : Decimal;
    BEGIN
      AmountToApply := LibraryRandom.RandDecInRange(100,200,2);
      ApplyVendorEntries."Amount to Apply".SETVALUE := AmountToApply;
      ApplyVendorEntries."Amount to Apply".ASSERTEQUALS(AmountToApply);

      ApplyVendorEntries."Amount to Apply".SETVALUE := 0;
      ApplyVendorEntries."Amount to Apply".ASSERTEQUALS(0);

      AmountToApply := LibraryRandom.RandDecInRange(1,50,2);
      ApplyVendorEntries."Amount to Apply".SETVALUE := AmountToApply;
      ApplyVendorEntries."Amount to Apply".ASSERTEQUALS(AmountToApply);
    END;

    [ModalPageHandler]
    PROCEDURE ApplyCustEntriesPageClearsAmountToApplyPageHandler@214(VAR ApplyCustomerEntries@1000 : TestPage 232);
    VAR
      AmountToApply@1001 : Decimal;
    BEGIN
      AmountToApply := -LibraryRandom.RandDecInRange(100,200,2);
      ApplyCustomerEntries."Amount to Apply".SETVALUE := AmountToApply;
      ApplyCustomerEntries."Amount to Apply".ASSERTEQUALS(AmountToApply);

      ApplyCustomerEntries."Amount to Apply".SETVALUE := 0;
      ApplyCustomerEntries."Amount to Apply".ASSERTEQUALS(0);

      AmountToApply := -LibraryRandom.RandDecInRange(1,50,2);
      ApplyCustomerEntries."Amount to Apply".SETVALUE := AmountToApply;
      ApplyCustomerEntries."Amount to Apply".ASSERTEQUALS(AmountToApply);
    END;

    BEGIN
    {
      // [FEATURE] [Application]
      Test Apply Customer Entries Page's Fields Value with Page Testability.
      1. Check Apply Customer Entries Page Fields with Posting Invoice and Apply Payment without Currency.
      2. Check Apply Customer Entries Page Fields with Posting Refund and Apply Credit Memo without Currency.
      3. Check Apply Customer Entries Page Fields with Posting Invoice and Apply Payment with different Currency.
      4. Check Apply Customer Entries Page Fields with Posting Refund and Apply Credit Memo with different Currency.
      5. Check Customer Ledger Entries for Remaining Amount after Posting and Apply Invoice and Payment through Page.
      6. Check Customer Ledger Entries for Remaining Amount after Posting and Apply Refund and Credit Memo through Page.
      7. Check Customer Ledger Entries for Original Payment Discount With Post and Apply Invoice.
      8. Check Customer Ledger Entries for Original Payment Discount With Post and Apply Credit Memo.
      9. Check Apply Vendor Entries Page Fields with Posting Invoice and Apply Payment without Currency.
      10. Check Apply Vendor Entries Page Fields with Posting Refund and Apply Credit Memo without Currency.
      11. Check Apply Vendor Entries Page Fields with Posting Invoice and Apply Payment with different Currency.
      12. Check Apply Vendor Entries Page Fields with Posting Refund and Apply Credit Memo with different Currency.
      13. Check Vendor Ledger Entries for Remaining Amount after Posting and Apply Invoice and Payment through Page.
      14. Check Vendor Ledger Entries for Remaining Amount after Posting and Apply Invoice and Payment through Page.
      15. Check Vendor Ledger Entries for Payment Discount after Posting and Apply Invoice.
      16. Check Vendor Ledger Entries for Payment Discount after Posting and Apply Invoice.
      17. Check Vendor Ledger Entries for Amount and Remaining Amount after Applying Invoice and Payment of equal amounts through Page.
      18. Check Sales Analysis By Dimension Matrix by Item with Rounding Factor 1.
      19. Check Sales Analysis By Dimension Matrix by Item with Rounding Factor 1000.
      20. Check Apply Customer entries using Applies-to Doc. No. lookup when Applies-to Doc. Type field is blank on Journal line.
      21. Check Apply Customer entries using Applies-to Doc. No. lookup when Applies-to Doc. Type field is not blank on Journal line.
      22. Check Customer Ledger Entries for Amount, Remaining Amount and Open field after Applying Invoice and Payment of equal amounts
          using Applies-to Doc. No. field lookup.
      23. Check Applies to ID field should be blank on Apply Customer Entries Page.
      24. Check Applies to ID field should be blank on Apply Vendor Entries Page.
      25. Check Sales Journal Page's Caption with Created Batch Name.
      26. Check Purchase Journal Page's Caption with Created Batch Name.

        TFS_TS_ID = 256785
        --------------------------------------------------------------------------------------
        Test Function Name                                                      TFS ID
        --------------------------------------------------------------------------------------
        CustPostInvApplyPayment,CustPostRefundApplyCrMemo
        CustPostInvApplyPaymentCurr,CustPostRefundApplyCrMemoCurr
        CustApplyAndPostPaymentInv,CustApplyAndPostPaymentCrMemo
        CustPostAndApplyInvPmtDisc,CustPostAndApplyRefundPmtDisc             125581 - 125596

        TFS_TS_ID = 256818
        --------------------------------------------------------------------------------------
        Test Function Name                                                      TFS ID
        --------------------------------------------------------------------------------------
        VendPostInvApplyPayment,VendPostRefundApplyCrMemo
        VendPostInvApplyPaymentCurr,VendPostRefundApplyCrMemoCurr
        VendApplyAndPostPaymentInv,VendApplyAndPostRefundCrMemo
        VendPostAndApplyInvPmtDisc,VendPostAndApplyRefundPmtDisc              125960 - 125971

        TFS_TS_ID = 257199
        --------------------------------------------------------------------------------------
        Test Function Name                                                      TFS ID
        --------------------------------------------------------------------------------------
        VendPostAndApplyEqualAmount                                           121517

        TFS_TS_ID = 259854
        --------------------------------------------------------------------------------------
        Test Function Name                                                      TFS ID
        --------------------------------------------------------------------------------------
        SaleAnalysisMatrixRounding1,SaleAnalysisMatrixRounding1000             256786

        TFS_TS_ID = 256824
        --------------------------------------------------------------------------------------
        Test Function Name                                                      TFS ID
        --------------------------------------------------------------------------------------
        CustAppliesToDocTypeBlank,CustAppliesToDocTypeNotBlank
        CustApplyUsingAppliestoDocNo                                           125597 - 125602

        TFS_TS_ID = 264825
        --------------------------------------------------------------------------------------
        Test Function Name                                                      TFS ID
        --------------------------------------------------------------------------------------
        AppliesToIDOnApplyCustomerEntriesWithGeneralLine                        263450
        AppliesToIDOnApplyVendorEntriesWithGeneralLine

        TFS_TS_ID = 265507
        --------------------------------------------------------------------------------------
        Test Function Name                                                      TFS ID
        --------------------------------------------------------------------------------------
        SalesJournalWithNewBatchName,PurchaseJournalWithNewBatchName          258930
    }
    END.
  }
}

