OBJECT Codeunit 144042 Service Tax Other Scenarios
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1500010 : Codeunit 131300;
      LibraryServiceTax@1500007 : Codeunit 143001;
      LibraryRandom@1500003 : Codeunit 130440;
      ReverseServiceTaxHelper@1500002 : Codeunit 143006;
      ServiceTaxVerify@1500011 : Codeunit 143004;
      LibraryUtility@1500004 : Codeunit 131000;
      Assert@1500008 : Codeunit 130000;
      isInitialized@1500001 : Boolean;
      ReverseChargeTypeOption@1500000 : ' ,Standard,GTA';
      ServTaxRecDistAccountErr@1500006 : TextConst 'ENU=Rec.Dist';
      ServTaxRecInterimDistAccountErr@1500005 : TextConst 'ENU=IntRecDist';

    LOCAL PROCEDURE Initialize@1500100() : Integer;
    BEGIN
      LibraryRandom.SetSeed(1);

      IF isInitialized THEN
        EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);

      LibraryServiceTax.CreateServiceTaxReturnPeriod;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      COMMIT;

      isInitialized := TRUE;

      EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);
    END;

    [Test]
    PROCEDURE PurchInvInputServDistBalAcc@1500010();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      PurchDocInputServDistBalAcc(GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE PurchCrMInputServDistBalAcc@1500017();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      PurchDocInputServDistBalAcc(GenJournalLine."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE PurchDocInputServDistBalAcc@1500023(DocumentType@1500000 : Option);
    VAR
      GenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500004 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine."Document Type" := DocumentType;
      PostPurchDocWithInputServDist(GenJournalLine,ReverseServiceTaxHelper.FindPmtMethodWithBalAcc);

      VerifyDistApplication(GenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE PurchInvInputServDist@1500005();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      PurchDocInputServDist(GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE PurchCrMInputServDist@1500004();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      PurchDocInputServDist(GenJournalLine."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE PurchDocInputServDist@1500024(DocumentType@1500000 : Option);
    VAR
      GenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500004 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine."Document Type" := DocumentType;
      PostPurchDocWithInputServDist(GenJournalLine,'');

      VerifyDistInvPosting(GenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE PurchInvInputServDistApplyPmt@1500014();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      PurchDocInputServDistApplyPmt(GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE PurchCrMInputServDistApplyRef@1500013();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      PurchDocInputServDistApplyPmt(GenJournalLine."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE PurchDocInputServDistApplyPmt@1500025(DocumentType@1500001 : Option);
    VAR
      GenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500004 : Integer;
      PaymentAmount@1500002 : Decimal;
      PmtDocNo@1500000 : Code[20];
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine."Document Type" := DocumentType;
      PostPurchDocWithInputServDist(GenJournalLine,'');
      PmtDocNo := PostPayment(GenJournalLine,PaymentAmount);
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(GenJournalLine."Document Type",GenJournalLine."Document No.",
        ReverseServiceTaxHelper.GetApplyingDocType(GenJournalLine."Document Type"),PmtDocNo);

      VerifyDistApplication(GenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE PurchInvGJInputServDist@1500029();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      PurchGenJInputServDist(GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE PurchCrMGJInputServDist@1500028();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      PurchGenJInputServDist(GenJournalLine."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE PurchGenJInputServDist@1500027(DocumentType@1500001 : Option);
    VAR
      GenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500004 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine."Document Type" := DocumentType;
      PostPurchGenJWithInputServDist(GenJournalLine);

      VerifyDistInvPosting(GenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE PurchAdvPmtInputServDist@1500009();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      PurchAdvanceInputServDist(GenJournalLine."Document Type"::Payment);
    END;

    [Test]
    PROCEDURE PurchAdvRefInputServDist@1500006();
    VAR
      GenJournalLine@1500003 : Record 81;
    BEGIN
      PurchAdvanceInputServDist(GenJournalLine."Document Type"::Refund);
    END;

    LOCAL PROCEDURE PurchAdvanceInputServDist@1500002(DocumentType@1500001 : Option);
    VAR
      GenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500004 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine."Document Type" := DocumentType;
      PostAdvPmtWithInputServDist(GenJournalLine);

      VerifyDistAdvPmtPosting(GenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE PurchAdvInputServDistApplyOff@1500031();
    VAR
      GenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500004 : Integer;
      InvDocNo@1500000 : Code[20];
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine."Document Type" := GenJournalLine."Document Type"::Payment;
      PostAdvPmtWithInputServDist(GenJournalLine);
      InvDocNo := PostInvForAdvPmt(GenJournalLine);
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(GenJournalLine."Document Type",GenJournalLine."Document No.",
        GenJournalLine."Document Type"::Invoice,InvDocNo);

      VerifyDistApplication(GenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE PurchAdvInputServDistApplyOnl@1500043();
    VAR
      GenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500004 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine."Document Type" := GenJournalLine."Document Type"::Payment;
      PostAdvPmtWithInputServDist(GenJournalLine);
      PostInvForAdvPmtApply(GenJournalLine);

      VerifyDistApplication(GenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE PurchInvPmtISDUnapply@1500016();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      PurchDocISDUnapply(GenJournalLine."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE PurchCrRefMISDtUnapply@1500011();
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      PurchDocISDUnapply(GenJournalLine."Document Type"::"Credit Memo");
    END;

    LOCAL PROCEDURE PurchDocISDUnapply@1500022(DocumentType@1500002 : Option);
    VAR
      GenJournalLine@1500001 : Record 81;
      LastTransactionNo@1500000 : Integer;
      ApplyTransactionNo@1500006 : Integer;
      PaymentAmount@1500004 : Decimal;
      PmtDocNo@1500003 : Code[20];
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine."Document Type" := DocumentType;
      PmtDocNo := PostPurchDocWithISDApplyPmt(GenJournalLine,PaymentAmount);
      ApplyTransactionNo := ReverseServiceTaxHelper.GetLastTransactionNo;

      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(PmtDocNo);

      VerifyUnapply(GenJournalLine,PmtDocNo,PaymentAmount,LastTransactionNo,ApplyTransactionNo);
    END;

    [Test]
    PROCEDURE PurchAdvPmtInvISDUnapply@1500021();
    VAR
      GenJournalLine@1500001 : Record 81;
      LastTransactionNo@1500000 : Integer;
      ApplyTransactionNo@1500005 : Integer;
      InvDocNo@1500002 : Code[20];
    BEGIN
      LastTransactionNo := Initialize;

      GenJournalLine."Document Type" := GenJournalLine."Document Type"::Payment;
      PostAdvPmtWithInputServDist(GenJournalLine);
      InvDocNo := PostInvForAdvPmtApply(GenJournalLine);
      ApplyTransactionNo := ReverseServiceTaxHelper.GetLastTransactionNo;

      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(InvDocNo);

      VerifyUnapply(GenJournalLine,InvDocNo,-GenJournalLine.Amount,LastTransactionNo,ApplyTransactionNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE AdvancePaymentWithStaleCheque@1500035();
    VAR
      GenJournalLine@1500000 : Record 81;
      ReversalEntry@1500002 : Record 179;
    BEGIN
      // [SCENARIO 164412] Verify the entries when do stale cheque and reverse transaction.
      // [FEATURE] [Service Tax]

      // [GIVEN] Created Service Tax Accounting Period
      Initialize;

      // [WHEN] Create and Post Advance Payment with Service Tax & Make the Payment as Stale Cheque
      PostAdvPmtWithCheque(GenJournalLine);
      MakePaymentasStaleChequeUsingPage;

      // [THEN] Created GL, Service Tax, Detailed Service Tax Entires.
      ServiceTaxVerify.PostedAdvPayment(GenJournalLine,ReverseChargeTypeOption::" ",TRUE);

      // [WHEN] Reverse the transaction
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseTransaction(ReverseServiceTaxHelper.GetLastTransactionNo);

      // [THEN] GL Entries reversed
      VerifyReversalEntry(GenJournalLine,ReverseServiceTaxHelper.GetLastTransactionNo);
    END;

    LOCAL PROCEDURE CreateBankWithStaleChequeSetup@1500061() : Code[20];
    VAR
      BankAccount@1500000 : Record 270;
      StaleChequeFormula@1500001 : DateFormula;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      EVALUATE(StaleChequeFormula,'<6M>');
      BankAccount.VALIDATE("Stale Cheque Stipulated Period",StaleChequeFormula);
      BankAccount.MODIFY(TRUE);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE MakePaymentasStaleChequeUsingPage@1500051();
    VAR
      BankAccountLedgerEntries@1500002 : TestPage 372;
    BEGIN
      WORKDATE := CALCDATE('<+7M>',WORKDATE);
      BankAccountLedgerEntries.TRAP;
      BankAccountLedgerEntries.OPENVIEW;
      BankAccountLedgerEntries.LAST;
      BankAccountLedgerEntries.Action1500003.INVOKE;
    END;

    LOCAL PROCEDURE CalculateTaxAmount@1500048(GenJournalLine@1500000 : Record 81;ServiceTaxSetup@1500002 : Record 16472) : Decimal;
    VAR
      BaseAmount@1500001 : Decimal;
    BEGIN
      IF GenJournalLine."Serv. Tax on Advance Payment" THEN
        BaseAmount :=
          ReverseServiceTaxHelper.GetBaseAmountFromAdvPayment(
            GenJournalLine.Amount,0,ReverseChargeTypeOption::" ",ServiceTaxSetup)
      ELSE
        BaseAmount := -GenJournalLine.Amount;
      EXIT(ReverseServiceTaxHelper.CalculateServTaxTotal(BaseAmount,ServiceTaxSetup));
    END;

    LOCAL PROCEDURE CalculateKKCessAmount@1500032(GenJournalLine@1500000 : Record 81;ServiceTaxSetup@1500002 : Record 16472) : Decimal;
    VAR
      BaseAmount@1500001 : Decimal;
    BEGIN
      IF GenJournalLine."Serv. Tax on Advance Payment" THEN
        BaseAmount :=
          ReverseServiceTaxHelper.GetBaseAmountFromAdvPayment(
            GenJournalLine.Amount,0,ReverseChargeTypeOption::" ",ServiceTaxSetup)
      ELSE
        BaseAmount := -GenJournalLine.Amount;
      EXIT(ReverseServiceTaxHelper.CalculateKKCess(BaseAmount,ServiceTaxSetup));
    END;

    LOCAL PROCEDURE PostAdvPmtWithInputServDist@1500012(VAR GenJournalLine@1500003 : Record 81);
    BEGIN
      ReverseServiceTaxHelper.CreateAdvancePayment(GenJournalLine,GenJournalLine."Document Type",FALSE,
        ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeTypeOption::" "),ReverseChargeTypeOption::" ",0);
      GenJournalLine.VALIDATE("Input Service Distribution",TRUE);
      GenJournalLine.MODIFY(TRUE);
      UpateServTaxSetupWithDistAcc(GenJournalLine."Document Date",GenJournalLine."Service Tax Group Code");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE PostAdvPmtWithCheque@1500008(VAR GenJournalLine@1500003 : Record 81);
    BEGIN
      ReverseServiceTaxHelper.CreateAdvancePayment(
        GenJournalLine,GenJournalLine."Document Type"::Payment,FALSE,
        ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeTypeOption::" "),
        ReverseChargeTypeOption::" ",0);
      GenJournalLine.VALIDATE("Bal. Account No.",CreateBankWithStaleChequeSetup);
      GenJournalLine.VALIDATE("Cheque No.",COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(6,0),1,6));
      GenJournalLine.VALIDATE("Cheque Date",WORKDATE);
      GenJournalLine.VALIDATE(PoT,TRUE);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE PostPurchDocWithInputServDist@1500000(VAR GenJournalLine@1500003 : Record 81;PmtMethodCode@1500004 : Code[20]);
    VAR
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      PostedDocNo@1500002 : Code[20];
    BEGIN
      ReverseServiceTaxHelper.CreatePurchaseDoc(
        PurchaseHeader,PurchaseLine,GenJournalLine."Document Type",ReverseChargeTypeOption::" ",0,FALSE);
      PurchaseHeader.VALIDATE("Input Service Distribution",TRUE);
      PurchaseHeader.VALIDATE("Payment Method Code",PmtMethodCode);
      PurchaseHeader.MODIFY(TRUE);
      UpateServTaxSetupWithDistAcc(PurchaseHeader."Document Date",PurchaseLine."Service Tax Group");
      PostedDocNo := ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader);
      ReverseServiceTaxHelper.ConvertDocToJnlLine(PurchaseHeader,PurchaseLine,PostedDocNo,GenJournalLine);
      IF GenJournalLine."Document Type" = GenJournalLine."Document Type"::Invoice THEN
        GenJournalLine.Amount := -GenJournalLine.Amount;
    END;

    LOCAL PROCEDURE PostPurchDocWithISDApplyPmt@1500026(VAR GenJournalLine@1500003 : Record 81;VAR PaymentAmount@1500002 : Decimal) PmtDocNo : Code[20];
    BEGIN
      PostPurchDocWithInputServDist(GenJournalLine,'');
      PmtDocNo := PostPayment(GenJournalLine,PaymentAmount);
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(GenJournalLine."Document Type",GenJournalLine."Document No.",
        ReverseServiceTaxHelper.GetApplyingDocType(GenJournalLine."Document Type"),PmtDocNo);
    END;

    LOCAL PROCEDURE PostPurchGenJWithInputServDist@1500030(VAR GenJournalLine@1500003 : Record 81);
    BEGIN
      ReverseServiceTaxHelper.CreatePurchaseDocFromGenJnl(GenJournalLine,GenJournalLine."Document Type",
        ReverseChargeTypeOption::" ",ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeTypeOption::" "),FALSE,0);
      GenJournalLine.VALIDATE("Input Service Distribution",TRUE);
      GenJournalLine.MODIFY(TRUE);
      UpateServTaxSetupWithDistAcc(GenJournalLine."Document Date",GenJournalLine."Service Tax Group Code");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE PostInvForAdvPmt@1500034(GenJournalLine@1500000 : Record 81) : Code[20];
    VAR
      PurchaseHeader@1500001 : Record 38;
      PurchaseLine@1500002 : Record 39;
      ServiceTaxSetup@1500003 : Record 16472;
      BaseAmount@1500004 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      BaseAmount :=
        ReverseServiceTaxHelper.GetBaseAmountFromAdvPayment(
          GenJournalLine.Amount,0,ReverseChargeTypeOption::" ",ServiceTaxSetup);
      ReverseServiceTaxHelper.CreatePurchaseDocForAdvPayment(PurchaseHeader,PurchaseLine,GenJournalLine,
        GenJournalLine."Document Type"::Invoice,ReverseChargeTypeOption::" ",0,FALSE,BaseAmount);
      PurchaseHeader.VALIDATE("Input Service Distribution",TRUE);
      PurchaseHeader.MODIFY(TRUE);
      EXIT(ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader))
    END;

    LOCAL PROCEDURE PostInvForAdvPmtApply@1500041(GenJournalLine@1500000 : Record 81) : Code[20];
    VAR
      PurchaseHeader@1500001 : Record 38;
      PurchaseLine@1500002 : Record 39;
      ServiceTaxSetup@1500003 : Record 16472;
      BaseAmount@1500004 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      BaseAmount :=
        ReverseServiceTaxHelper.GetBaseAmountFromAdvPayment(
          GenJournalLine.Amount,0,ReverseChargeTypeOption::" ",ServiceTaxSetup);
      ReverseServiceTaxHelper.CreateDocAndApplyAdvPayment(PurchaseHeader,PurchaseLine,GenJournalLine,
        GenJournalLine."Document Type"::Invoice,ReverseChargeTypeOption::" ",0,FALSE,BaseAmount);
      PurchaseHeader.VALIDATE("Input Service Distribution",TRUE);
      PurchaseHeader.MODIFY(TRUE);
      EXIT(ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader));
    END;

    LOCAL PROCEDURE PostPayment@1500015(GenJournalLine@1500000 : Record 81;VAR PaymentAmount@1500003 : Decimal) : Code[20];
    VAR
      ServiceTaxSetup@1500001 : Record 16472;
      TotalTaxAmount@1500002 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      TotalTaxAmount :=
        ReverseServiceTaxHelper.CalculateServTaxTotal(GenJournalLine.Amount,ServiceTaxSetup) +
        ReverseServiceTaxHelper.CalculateKKCess(GenJournalLine.Amount,ServiceTaxSetup) +
        ReverseServiceTaxHelper.CalculateSBC(GenJournalLine.Amount,ServiceTaxSetup);
      PaymentAmount := -(GenJournalLine.Amount + TotalTaxAmount);
      EXIT(
        ReverseServiceTaxHelper.PostPayment(
          GenJournalLine."Account No.",PaymentAmount,GenJournalLine."Posting Date",
          ReverseServiceTaxHelper.GetApplyingDocType(GenJournalLine."Document Type")));
    END;

    LOCAL PROCEDURE UpateServTaxSetupWithDistAcc@1500003(DocumentDate@1500000 : Date;ServiceTaxGroupCode@1500002 : Code[20]);
    VAR
      ServiceTaxSetup@1500001 : Record 16472;
      GLAccount@1500003 : Record 15;
    BEGIN
      ServiceTaxSetup.FindOnDate(ServiceTaxGroupCode,DocumentDate);
      LibraryServiceTax.CreateGLAccountWithPrefix(GLAccount,ServTaxRecDistAccountErr);
      ServiceTaxSetup.VALIDATE("S.T. Receivable Account (Dist)",GLAccount."No.");
      LibraryServiceTax.CreateGLAccountWithPrefix(GLAccount,ServTaxRecInterimDistAccountErr);
      ServiceTaxSetup.VALIDATE("Receivable Acc. Interim (Dist)",GLAccount."No.");
      ServiceTaxSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyDistBalances@1500018(ServiceTaxSetup@1500002 : Record 16472;RecDistBalance@1500000 : Decimal;InterimRecDistBalance@1500003 : Decimal);
    BEGIN
      ServiceTaxVerify.AccountBalance(ServiceTaxSetup."S.T. Receivable Account (Dist)",RecDistBalance);
      ServiceTaxVerify.AccountBalance(ServiceTaxSetup."Receivable Acc. Interim (Dist)",InterimRecDistBalance);
    END;

    LOCAL PROCEDURE VerifyDistAdvPmtPosting@1500019(GenJournalLine@1500000 : Record 81;LastTransactionNo@1500003 : Integer);
    VAR
      ServiceTaxSetup@1500001 : Record 16472;
      TaxAmount@1500002 : Decimal;
      KKCAmount@1500004 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      TaxAmount := CalculateTaxAmount(GenJournalLine,ServiceTaxSetup);
      KKCAmount := CalculateKKCessAmount(GenJournalLine,ServiceTaxSetup);

      VerifyDistBalances(ServiceTaxSetup,0,0);

      ServiceTaxVerify.STEntryFullTaxBalance(LastTransactionNo,TaxAmount);
      ServiceTaxVerify.STEntryDtlsFullTaxBalance(LastTransactionNo,0);
      ServiceTaxVerify.STEntryFullKKCBalance(LastTransactionNo,KKCAmount);
      ServiceTaxVerify.STEntryDtlsKKCBalance(LastTransactionNo,0);
    END;

    LOCAL PROCEDURE VerifyDistApplication@1500007(GenJournalLine@1500000 : Record 81;LastTransactionNo@1500003 : Integer);
    VAR
      ServiceTaxSetup@1500001 : Record 16472;
      TaxAmount@1500002 : Decimal;
      KKCAmount@1500004 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      TaxAmount := CalculateTaxAmount(GenJournalLine,ServiceTaxSetup);
      KKCAmount := CalculateKKCessAmount(GenJournalLine,ServiceTaxSetup);
      VerifyDistBalances(ServiceTaxSetup,TaxAmount + KKCAmount,0);

      IF GenJournalLine."Serv. Tax on Advance Payment" THEN BEGIN
        ServiceTaxVerify.STEntryFullTaxBalance(LastTransactionNo,2 * TaxAmount);
        ServiceTaxVerify.STEntryFullKKCBalance(LastTransactionNo,2 * KKCAmount);
      END ELSE BEGIN
        ServiceTaxVerify.STEntryFullTaxBalance(LastTransactionNo,TaxAmount);
        ServiceTaxVerify.STEntryFullKKCBalance(LastTransactionNo,KKCAmount);
      END;

      ServiceTaxVerify.STEntryDtlsFullTaxBalance(LastTransactionNo,TaxAmount);
      ServiceTaxVerify.STEntryDtlsKKCBalance(LastTransactionNo,KKCAmount);
    END;

    LOCAL PROCEDURE VerifyDistInvPosting@1500001(GenJournalLine@1500000 : Record 81;LastTransactionNo@1500003 : Integer);
    VAR
      ServiceTaxSetup@1500001 : Record 16472;
      TaxAmount@1500002 : Decimal;
      KKCAmount@1500004 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      TaxAmount := CalculateTaxAmount(GenJournalLine,ServiceTaxSetup);
      KKCAmount := CalculateKKCessAmount(GenJournalLine,ServiceTaxSetup);
      VerifyDistBalances(ServiceTaxSetup,0,TaxAmount + KKCAmount);
      IF GenJournalLine."Serv. Tax on Advance Payment" THEN
        ServiceTaxVerify.STEntryFullTaxBalance(LastTransactionNo,2 * TaxAmount)
      ELSE
        ServiceTaxVerify.STEntryFullTaxBalance(LastTransactionNo,TaxAmount);
      ServiceTaxVerify.STEntryDtlsFullTaxBalance(LastTransactionNo,0);
    END;

    LOCAL PROCEDURE VerifyUnapply@1500059(GenJournalLine@1500000 : Record 81;SecondDocNo@1500002 : Code[20];PaymentAmount@1500005 : Decimal;LastTransactionNo@1500003 : Integer;ApplyTransactionNo@1500004 : Integer);
    BEGIN
      VerifyDistInvPosting(GenJournalLine,LastTransactionNo);
      ServiceTaxVerify.VendorLedgerEntryRemAmt(SecondDocNo,PaymentAmount);
      ServiceTaxVerify.VendorLedgerEntryRemAmt(GenJournalLine."Document No.",-PaymentAmount);
      ServiceTaxVerify.VendorLedgerEntryOpen(GenJournalLine."Document No.",TRUE);
      ServiceTaxVerify.VendorLedgerEntryOpen(SecondDocNo,TRUE);

      ServiceTaxVerify.UnappAdvPmtSTEntryDetBalances(
        0,GenJournalLine."Document Type",LastTransactionNo,
        GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date",FALSE);
      ServiceTaxVerify.UnappliedSTEntryDetails(ApplyTransactionNo);
    END;

    LOCAL PROCEDURE VerifyReversalEntry@1500077(GenJournalLine@1500001 : Record 81;LastTransactionNo@1500000 : Integer);
    VAR
      ServiceTaxSetup@1500002 : Record 16472;
      DummyGLEntry@1500003 : Record 17;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      DummyGLEntry.SETRANGE("Transaction No.",LastTransactionNo);
      Assert.RecordCount(DummyGLEntry,8);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500075(Msg@1500000 : Text);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@1500074(Text@1500000 : Text;VAR Reply@1500001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    END.
  }
}

