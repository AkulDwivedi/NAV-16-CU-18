OBJECT Codeunit 136125 Service Posting Journals
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1008 : Codeunit 130000;
      LibraryService@1000 : Codeunit 131902;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryInventory@1005 : Codeunit 132201;
      LibrarySales@1006 : Codeunit 130509;
      LibraryRandom@1004 : Codeunit 130440;
      IsInitialized@1001 : Boolean;
      ExpectedConfirm@1003 : TextConst 'ENU=The Credit Memo doesn''t have a Corrected Invoice No. Do you want to continue?';
      NumberOfServiceLedgerEntriesErr@1007 : TextConst 'ENU=Number of Service Ledger Entries is incorrect';
      LibraryERM@1500000 : Codeunit 131300;

    [Normal]
    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      CLEAR(LibraryService);
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateAccountInServiceCosts;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE ServiceOrderWithLocation@25();
    VAR
      Location@1009 : Record 14;
      ServiceHeader@1008 : Record 5900;
      ServiceLine@1007 : Record 5902;
      TempServiceLine@1011 : TEMPORARY Record 5902;
      LibraryWarehouse@1001 : Codeunit 132204;
    BEGIN
      // Covers document number CU-5987-1 refer to TFS ID 172599.
      // Test Posted Entries after Posting Service Order with Location.

      // 1. Setup: Create Location, Inventory setup for Location, Service Order with Item, Resource, Cost and G/L Account.
      Initialize;
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      CreateServiceOrderWithLines(ServiceHeader,Location.Code);
      GetServiceLines(ServiceLine,ServiceHeader."No.");
      CopyServiceLines(ServiceLine,TempServiceLine);

      // 2. Exercise: Post Service Order as Ship and Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify VAT Entry, G/L Entry, Resource Ledger Entry, Service Invoice Lines, Customer Ledger Entry, Service Ledger Entry
      // and Value Entry after Posting Service Order.
      VerifyGLEntry(ServiceHeader."No.");
      VerifyResourceLedgerEntry(TempServiceLine);
      VerifyServiceInvoice(TempServiceLine);
      VerifyCustomerLedgerEntry(ServiceHeader."No.");
      VerifyServiceLedgerEntry(TempServiceLine);
      VerifyValueEntry(TempServiceLine);
    END;

    [Test]
    PROCEDURE ItemJournalWithLocationAndBin@34();
    VAR
      Bin@1010 : Record 7354;
      Item@1004 : Record 27;
      Quantity@1017 : Decimal;
    BEGIN
      // Covers document number CU-5987-1 refer to TFS ID 172599.
      // Test Bin Content after Posting Item Journal with Location and Bin Code.

      // 1. Setup: Create Location with Bin Code and Create Item.
      Initialize;
      CreateLocationWithBinCode(Bin);
      LibraryInventory.CreateItem(Item);

      // 2. Exercise: Create and Post Item Journal.
      Quantity := RANDOM(10);  // Use Random because value is not important.
      CreateAndPostItemJournal(Bin,Item."No.",Quantity);

      // 3. Verify: Verify Bin Content.
      VerifyBinContent(Bin,Item."No.",Quantity);
    END;

    [Test]
    PROCEDURE ServiceOrderWithLocationAndBin@17();
    VAR
      Bin@1010 : Record 7354;
      Item@1004 : Record 27;
      ServiceHeader@1008 : Record 5900;
      ServiceLine@1007 : Record 5902;
      ServiceItemLine@1019 : Record 5901;
      ServiceLedgerEntry@1001 : Record 5907;
      ServiceShipmentHeader@1002 : Record 5990;
      Quantity@1017 : Decimal;
    BEGIN
      // Covers document number CU-5987-1 refer to TFS ID 172599.
      // Test Service Ledger Entry after Posting Service Order with Location and Bin Code.

      // 1. Setup: Create Location with Bin Code, Create Item, Create and Post Item Journal, Create Service Order with Type Item and
      // Update Location and Bin Code on Service Line.
      Initialize;
      CreateLocationWithBinCode(Bin);
      LibraryInventory.CreateItem(Item);
      Quantity := RANDOM(10);  // Use Random because value is not important.
      CreateAndPostItemJournal(Bin,Item."No.",Quantity);

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CreateCustomer);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      UpdateServiceLineWithLocation(ServiceLine,Bin,ServiceItemLine."Line No.",Quantity);

      // 2. Exercise: Post Service Order as Ship and Consume.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify Service Ledger Entry after Posting Service Order.
      ServiceShipmentHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceShipmentHeader.FINDFIRST;
      VerifyServiceLedgerEntryForBin(
        ServiceLine,ServiceShipmentHeader."No.",ServiceLedgerEntry."Document Type"::Shipment,ServiceLedgerEntry."Entry Type"::Usage);
      VerifyServiceLedgerEntryForBin(
        ServiceLine,ServiceShipmentHeader."No.",ServiceLedgerEntry."Document Type"::Shipment,ServiceLedgerEntry."Entry Type"::Consume);
    END;

    [Test]
    PROCEDURE ServiceOrderWithJob@3();
    VAR
      Job@1005 : Record 167;
      JobTask@1006 : Record 1001;
      ServiceHeader@1008 : Record 5900;
      ServiceLine@1007 : Record 5902;
      ServiceItemLine@1019 : Record 5901;
      LibraryJob@1000 : Codeunit 131920;
      LibraryResource@1002 : Codeunit 130511;
      ItemNo@1004 : Code[20];
      ResourceNo@1021 : Code[20];
      Quantity@1017 : Decimal;
    BEGIN
      // Covers document number CU-5987-1 refer to TFS ID 172599.
      // Test Service Ledger Entry after Posting Service Order with Job.

      // 1. Setup: Create Job, Job Task, Create Service Order with Item and Resource.
      Initialize;
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      Quantity := RANDOM(10);  // Use Random because value is not important.

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Job."Bill-to Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      ItemNo := LibraryInventory.CreateItemNo;
      CreateServiceLineWithBlankLocation(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
      UpdateServiceLineWithJob(ServiceLine,JobTask,ServiceItemLine."Line No.",Quantity);

      ResourceNo := LibraryResource.CreateResourceNo;
      CreateServiceLineWithBlankLocation(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,ResourceNo);
      UpdateServiceLineWithJob(ServiceLine,JobTask,ServiceItemLine."Line No.",Quantity);

      // 2. Exercise: Post Service Order as Ship and Consume.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify Service Ledger Entry after Posting Service Order.
      VerifyServiceLedgerEntryForJob(JobTask,ServiceHeader."No.",ItemNo,Quantity);
      VerifyServiceLedgerEntryForJob(JobTask,ServiceHeader."No.",ResourceNo,Quantity);
    END;

    [Test]
    PROCEDURE ServiceOrderWithResource@5();
    VAR
      ServiceHeader@1008 : Record 5900;
      ServiceLine@1007 : Record 5902;
      ServiceItemLine@1019 : Record 5901;
      TempServiceLine@1011 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number CU-5987-1 refer to TFS ID 172599.
      // Test Shipment Line after Posting Service Order with Resource.

      // 1. Setup: Create Service Order with Resource.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CreateCustomer);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLineWithResource(ServiceHeader,ServiceItemLine."Line No.");
      GetServiceLines(ServiceLine,ServiceHeader."No.");
      CopyServiceLines(ServiceLine,TempServiceLine);

      // 2. Exercise: Post Service Order as Ship and Consume.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify Service Shipment Line after Posting Service Order.
      VerifyServiceShipmentLine(TempServiceLine);
    END;

    [Test]
    [HandlerFunctions(InvoiceESConfirmHandler)]
    PROCEDURE CreditMemoWithLocationAndBin@7();
    VAR
      Bin@1010 : Record 7354;
      ServiceHeader@1008 : Record 5900;
      ServiceLine@1007 : Record 5902;
      ServiceCrMemoHeader@1021 : Record 5994;
      ServiceLedgerEntry@1000 : Record 5907;
    BEGIN
      // Covers document number CU-5987-2 refer to TFS ID 172599.
      // Test Service Ledger Entry after Posting Service Credit Memo with Location and Bin Code.

      // 1. Setup: Create Location, Bin and Service Credit Memo.
      Initialize;
      CreateLocationWithBinCode(Bin);
      CreateServiceCreditMemo(ServiceHeader,ServiceLine,Bin);

      // 2. Exercise: Post Service Credit Memo.
      ExecuteConfirmHandlerInvoiceES;
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,FALSE);

      // 3. Verify: Verify Service Ledger Entry after Posting Service Credit Memo.
      ServiceCrMemoHeader.SETRANGE("Pre-Assigned No.",ServiceHeader."No.");
      ServiceCrMemoHeader.FINDFIRST;
      VerifyServiceLedgerEntryForBin(
        ServiceLine,ServiceCrMemoHeader."No.",ServiceLedgerEntry."Document Type"::"Credit Memo",ServiceLedgerEntry."Entry Type"::Sale);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PostConsumeForServiceOrderWithMultipleLines@12();
    VAR
      ServiceHeader@1008 : Record 5900;
      ServiceLedgerEntry@1001 : Record 5907;
      Quantity@1017 : Decimal;
      ItemNo@1000 : Code[20];
      OldAutomaticCostPosting@1009 : Boolean;
      SrvLine@1500000 : Record 5902;
      GenPostingSetup@1500001 : Record 252;
    BEGIN
      // Setup: Update Automatic Cost Posting setup. Create two Items. Create and Post Item Journal for Items. Create Service Order with 3 lines.
      Initialize;
      OldAutomaticCostPosting := UpdateAutomaticCostPosting(TRUE);
      Quantity := LibraryRandom.RandInt(10);
      ItemNo := CreateItemWithUnitCost(LibraryRandom.RandDec(10,2));
      CreateAndPostItemJournalLine(ItemNo,Quantity);
      CreateServiceOrderWithMultipleLines(ServiceHeader,ItemNo,Quantity);
      //Create Gen. Posting Setup Account
      SrvLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      SrvLine.SETRANGE("Document No.",ServiceHeader."No.");
      SrvLine.FINDSET;
        REPEAT
          GenPostingSetup.GET(SrvLine."Gen. Bus. Posting Group",SrvLine."Gen. Prod. Posting Group");
          IF GenPostingSetup."Sales Line Disc. Account" ='' THEN BEGIN
            GenPostingSetup.VALIDATE("Sales Line Disc. Account",LibraryERM.CreateGLAccountNo);
            GenPostingSetup.MODIFY(TRUE);
           END;
        UNTIL SrvLine.NEXT = 0;

      // Exercise: Post Service Order as Ship and Consume.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // Verify: Verify Service Order was posted successfully and it generated 3 Consume Service Ledger Entries.
      VerifyServiceLedgerEntryNumber(ServiceLedgerEntry."Entry Type"::Consume,ServiceHeader."No.",3);

      // Tear down.
      UpdateAutomaticCostPosting(OldAutomaticCostPosting);
    END;

    LOCAL PROCEDURE CopyServiceLines@29(VAR FromServiceLine@1000 : Record 5902;VAR ToTempServiceLine@1001 : TEMPORARY Record 5902);
    BEGIN
      IF FromServiceLine.FINDSET THEN
        REPEAT
          ToTempServiceLine.INIT;
          ToTempServiceLine := FromServiceLine;
          ToTempServiceLine.INSERT;
        UNTIL FromServiceLine.NEXT = 0
    END;

    LOCAL PROCEDURE CreateAndPostItemJournal@4(Bin@1004 : Record 7354;ItemNo@1003 : Code[20];Quantity@1005 : Decimal);
    VAR
      ItemJournalBatch@1002 : Record 233;
      ItemJournalLine@1001 : Record 83;
    BEGIN
      ItemJournalBatch.SETRANGE("Template Type",ItemJournalBatch."Template Type"::Item);
      ItemJournalBatch.NEXT(RANDOM(ItemJournalBatch.COUNT));
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Purchase,
        ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",Bin."Location Code");
      ItemJournalLine.VALIDATE("Bin Code",Bin.Code);
      ItemJournalLine.MODIFY(TRUE);

      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@22(ItemNo@1003 : Code[20];Qty@1005 : Decimal);
    VAR
      ItemJournalBatch@1002 : Record 233;
      ItemJournalLine@1001 : Record 83;
    BEGIN
      ItemJournalBatch.SETRANGE("Template Type",ItemJournalBatch."Template Type"::Item);
      ItemJournalBatch.NEXT(LibraryRandom.RandInt(ItemJournalBatch.COUNT));
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::Purchase,ItemNo,Qty);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateLocationWithBinCode@1(VAR Bin@1000 : Record 7354);
    VAR
      Location@1002 : Record 14;
      LibraryWarehouse@1001 : Codeunit 132204;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);
      LibraryWarehouse.CreateBin(
        Bin,
        Location.Code,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),
          1,
          LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),
        '',
        '');
    END;

    LOCAL PROCEDURE CreateServiceCreditMemo@2(VAR ServiceHeader@1000 : Record 5900;VAR ServiceLine@1001 : Record 5902;Bin@1002 : Record 7354);
    VAR
      Item@1004 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::"Credit Memo",CreateCustomer);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      ServiceLine.VALIDATE("Location Code",Bin."Location Code");
      ServiceLine.VALIDATE("Bin Code",Bin.Code);
      ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Use Random because value is not important.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLineWithResource@8(ServiceHeader@1002 : Record 5900;ServiceItemLineNo@1001 : Integer);
    VAR
      Resource@1000 : Record 156;
      ServiceLine@1003 : Record 5902;
      LibraryResource@1005 : Codeunit 130511;
      Counter@1004 : Integer;
    BEGIN
      // Create 2 to 10 Service Lines with Type Resource - Boundary 2 is important.
      FOR Counter := 2 TO 2 + RANDOM(8) DO BEGIN
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,LibraryResource.CreateResourceNo);
        ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineNo);
        ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Use Random because value is not important.
        ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity);
        ServiceLine.MODIFY(TRUE);
        Resource.NEXT;
      END;
    END;

    LOCAL PROCEDURE CreateServiceOrderWithLines@50(VAR ServiceHeader@1000 : Record 5900;LocationCode@1009 : Code[10]);
    VAR
      Customer@1001 : Record 18;
      ServiceItemLine@1003 : Record 5901;
      ServiceLine@1002 : Record 5902;
      GLAccount@1006 : Record 15;
      ServiceCost@1008 : Record 5905;
      LibraryResource@1010 : Codeunit 130511;
      LibraryERM@1011 : Codeunit 131300;
    BEGIN
      // Service Header, Service Item Line, Service Line with Type Item, Resource, Cost and G/L Account.
      LibrarySales.CreateCustomer(Customer);

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      ServiceHeader.VALIDATE("Location Code",LocationCode);
      ServiceHeader.MODIFY(TRUE);

      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');

      LibraryERM.FindGLAccount(GLAccount);
      LibraryService.FindServiceCost(ServiceCost);

      CreateServiceLine(ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItemNo,ServiceItemLine."Line No.");
      CreateServiceLine(ServiceHeader,ServiceLine.Type::Resource,LibraryResource.CreateResourceNo,ServiceItemLine."Line No.");
      CreateServiceLine(ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code,ServiceItemLine."Line No.");
      CreateServiceLine(
        ServiceHeader,ServiceLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,ServiceItemLine."Line No.");
    END;

    LOCAL PROCEDURE CreateServiceOrderWithMultipleLines@19(VAR ServiceHeader@1000 : Record 5900;ItemNo@1004 : Code[20];Qty@1014 : Decimal);
    VAR
      Customer@1001 : Record 18;
      ServiceItemLine@1003 : Record 5901;
      ServiceLine@1002 : Record 5902;
      ServiceItem@1015 : Record 5940;
      ServiceCost@1005 : Record 5905;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      // Test requires to create 3 Service Lines with Type Item, Cost and Item.
      CreateAndUpdateServiceLine(ServiceHeader,ServiceLine.Type::Item,ItemNo,ServiceItemLine."Line No.",Qty);
      LibraryService.FindServiceCost(ServiceCost);
      CreateAndUpdateServiceLine(ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code,ServiceItemLine."Line No.",Qty);
      CreateAndUpdateServiceLine(ServiceHeader,ServiceLine.Type::Item,ItemNo,ServiceItemLine."Line No.",Qty);
    END;

    LOCAL PROCEDURE CreateServiceLineWithBlankLocation@15(VAR ServiceLine@1006 : Record 5902;VAR ServiceHeader@1001 : Record 5900;Type@1000 : Option;No@1002 : Code[20]);
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,Type,No);
      ServiceLine.VALIDATE("Location Code",'');
      ServiceLine.MODIFY;
    END;

    LOCAL PROCEDURE CreateServiceLine@52(ServiceHeader@1001 : Record 5900;Type@1000 : Option;No@1002 : Code[20];ServiceItemLineNo@1004 : Integer);
    VAR
      ServiceLine@1003 : Record 5902;
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,Type,No);
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineNo);
      ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Use Random because value is not important.
      ServiceLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE ExecuteConfirmHandlerInvoiceES@9();
    BEGIN
      IF CONFIRM(STRSUBSTNO(ExpectedConfirm)) THEN;
    END;

    LOCAL PROCEDURE CreateItemWithUnitCost@23(UnitCost@1001 : Decimal) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Cost",UnitCost);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateCustomer@92() : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateAndUpdateServiceLine@16(ServiceHeader@1001 : Record 5900;Type@1000 : Option;No@1002 : Code[20];ServiceItemLineNo@1004 : Integer;Qty@1005 : Decimal);
    VAR
      ServiceLine@1003 : Record 5902;
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,Type,No);
      UpdateServiceLine(ServiceLine,ServiceItemLineNo,Qty);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateServiceLine@28(VAR ServiceLine@1002 : Record 5902;ServiceItemLineNo@1001 : Integer;Quantity@1000 : Decimal);
    BEGIN
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineNo);
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity);
    END;

    LOCAL PROCEDURE UpdateServiceLineWithLocation@61(VAR ServiceLine@1000 : Record 5902;Bin@1003 : Record 7354;ServiceItemLineNo@1005 : Integer;Quantity@1006 : Decimal);
    BEGIN
      UpdateServiceLine(ServiceLine,ServiceItemLineNo,Quantity);
      ServiceLine.VALIDATE("Location Code",Bin."Location Code");
      ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity);
      ServiceLine.VALIDATE("Bin Code",Bin.Code);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateServiceLineWithJob@10(VAR ServiceLine@1000 : Record 5902;JobTask@1003 : Record 1001;ServiceItemLineNo@1005 : Integer;Quantity@1006 : Decimal);
    BEGIN
      UpdateServiceLine(ServiceLine,ServiceItemLineNo,Quantity);
      ServiceLine.VALIDATE("Job No.",JobTask."Job No.");
      ServiceLine.VALIDATE("Job Task No.",JobTask."Job Task No.");
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAutomaticCostPosting@30(NewAutomaticCostPosting@1002 : Boolean) OldAutomaticCostPosting : Boolean;
    VAR
      InventorySetup@1000 : Record 313;
    BEGIN
      InventorySetup.GET;
      OldAutomaticCostPosting := InventorySetup."Automatic Cost Posting";
      InventorySetup.VALIDATE("Automatic Cost Posting",NewAutomaticCostPosting);
      InventorySetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetServiceLines@26(VAR ServiceLine@1000 : Record 5902;ServiceOrderNo@1001 : Code[20]);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Document No.",ServiceOrderNo);
      ServiceLine.FINDSET;
    END;

    LOCAL PROCEDURE VerifyBinContent@11(Bin@1000 : Record 7354;ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      BinContent@1003 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Location Code",Bin."Location Code");
      BinContent.SETRANGE("Bin Code",Bin.Code);
      BinContent.FINDFIRST;
      BinContent.TESTFIELD(Fixed,TRUE);
      BinContent.TESTFIELD(Default,TRUE);
      BinContent.TESTFIELD("Item No.",ItemNo);
      BinContent.CALCFIELDS(Quantity);
      BinContent.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@27(OrderNo@1002 : Code[20]);
    VAR
      ServiceInvoiceHeader@1001 : Record 5992;
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",OrderNo);
      ServiceInvoiceHeader.FINDFIRST;
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.TESTFIELD("Posting Date",ServiceInvoiceHeader."Posting Date");
    END;

    LOCAL PROCEDURE VerifyGLEntry@40(OrderNo@1001 : Code[20]);
    VAR
      ServiceInvoiceHeader@1000 : Record 5992;
      GLEntry@1002 : Record 17;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",OrderNo);
      ServiceInvoiceHeader.FINDFIRST;
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("Source Type",GLEntry."Source Type"::Customer);
      GLEntry.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      GLEntry.FINDSET;
      REPEAT
        GLEntry.TESTFIELD("Source Type",GLEntry."Source Type"::Customer);
        GLEntry.TESTFIELD("Source No.",ServiceInvoiceHeader."Bill-to Customer No.");
        GLEntry.TESTFIELD("Posting Date",ServiceInvoiceHeader."Posting Date");
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyResourceLedgerEntry@39(VAR TempServiceLine@1003 : TEMPORARY Record 5902);
    VAR
      ServiceInvoiceHeader@1001 : Record 5992;
      ResLedgerEntry@1002 : Record 203;
    BEGIN
      TempServiceLine.SETRANGE(Type,TempServiceLine.Type::Resource);
      TempServiceLine.FINDFIRST;

      ServiceInvoiceHeader.SETRANGE("Order No.",TempServiceLine."Document No.");
      ServiceInvoiceHeader.FINDFIRST;

      ResLedgerEntry.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      ResLedgerEntry.SETRANGE("Resource No.",TempServiceLine."No.");
      ResLedgerEntry.FINDFIRST;
      ResLedgerEntry.TESTFIELD("Posting Date",ServiceInvoiceHeader."Posting Date");
      ResLedgerEntry.TESTFIELD(Quantity,-TempServiceLine.Quantity);
      ResLedgerEntry.TESTFIELD("Order Type",ResLedgerEntry."Order Type"::Service);
      ResLedgerEntry.TESTFIELD("Order No.",TempServiceLine."Document No.");
      ResLedgerEntry.TESTFIELD("Order Line No.",TempServiceLine."Line No.");
    END;

    LOCAL PROCEDURE VerifyServiceInvoice@45(VAR TempServiceLine@1000 : TEMPORARY Record 5902);
    VAR
      ServiceInvoiceHeader@1002 : Record 5992;
      ServiceInvoiceLine@1004 : Record 5993;
    BEGIN
      TempServiceLine.FINDSET;
      ServiceInvoiceHeader.SETRANGE("Order No.",TempServiceLine."Document No.");
      ServiceInvoiceHeader.FINDFIRST;
      REPEAT
        ServiceInvoiceLine.GET(ServiceInvoiceHeader."No.",TempServiceLine."Line No.");
        ServiceInvoiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceInvoiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceInvoiceLine.TESTFIELD("Line Discount %",TempServiceLine."Line Discount %");
        ServiceInvoiceLine.TESTFIELD("Line Discount Amount",TempServiceLine."Line Discount Amount" );
        ServiceInvoiceLine.TESTFIELD("Inv. Discount Amount",TempServiceLine."Inv. Discount Amount");
      UNTIL TempServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntry@18(VAR TempServiceLine@1002 : TEMPORARY Record 5902);
    VAR
      ServiceLedgerEntry@1000 : Record 5907;
    BEGIN
      TempServiceLine.FINDSET;
      ServiceLedgerEntry.SETRANGE("Document Type",ServiceLedgerEntry."Document Type"::Shipment);
      ServiceLedgerEntry.SETRANGE("Service Order No.",TempServiceLine."Document No.");
      REPEAT
        ServiceLedgerEntry.SETRANGE("Document Line No.",TempServiceLine."Line No.");
        ServiceLedgerEntry.FINDFIRST;
        ServiceLedgerEntry.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLedgerEntry.TESTFIELD(Quantity,TempServiceLine.Quantity);
      UNTIL TempServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntryForBin@13(ServiceLine@1003 : Record 5902;DocumentNo@1004 : Code[20];DocumentType@1000 : Option;EntryType@1001 : Option);
    VAR
      ServiceLedgerEntry@1002 : Record 5907;
    BEGIN
      ServiceLedgerEntry.SETRANGE("Document Type",DocumentType);
      ServiceLedgerEntry.SETRANGE("Entry Type",EntryType);
      ServiceLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ServiceLedgerEntry.FINDFIRST;
      ServiceLedgerEntry.TESTFIELD("Location Code",ServiceLine."Location Code");
      ServiceLedgerEntry.TESTFIELD("Bin Code",ServiceLine."Bin Code");
      ServiceLedgerEntry.TESTFIELD("No.",ServiceLine."No.");
      IF EntryType = ServiceLedgerEntry."Entry Type"::Consume THEN
        ServiceLedgerEntry.TESTFIELD(Quantity,-ServiceLine.Quantity)
      ELSE
        ServiceLedgerEntry.TESTFIELD(Quantity,ServiceLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntryForJob@14(JobTask@1003 : Record 1001;ServiceOrderNo@1000 : Code[20];No@1005 : Code[20];Quantity@1004 : Decimal);
    VAR
      ServiceLedgerEntry@1002 : Record 5907;
    BEGIN
      ServiceLedgerEntry.SETRANGE("Service Order No.",ServiceOrderNo);
      ServiceLedgerEntry.SETRANGE("No.",No);
      ServiceLedgerEntry.FINDSET;
      REPEAT
        ServiceLedgerEntry.TESTFIELD("Job No.",JobTask."Job No.");
        ServiceLedgerEntry.TESTFIELD("Job Task No.",JobTask."Job Task No.");
        IF ServiceLedgerEntry."Entry Type" = ServiceLedgerEntry."Entry Type"::Consume THEN
          ServiceLedgerEntry.TESTFIELD(Quantity,-Quantity)
        ELSE
          ServiceLedgerEntry.TESTFIELD(Quantity,Quantity);
      UNTIL ServiceLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceShipmentLine@20(VAR TempServiceLine@1000 : TEMPORARY Record 5902);
    VAR
      ServiceShipmentLine@1001 : Record 5991;
    BEGIN
      ServiceShipmentLine.SETRANGE("Order No.",TempServiceLine."Document No.");
      TempServiceLine.FINDSET;
      REPEAT
        ServiceShipmentLine.SETRANGE("Order Line No.",TempServiceLine."Line No.");
        ServiceShipmentLine.FINDFIRST;
        ServiceShipmentLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceShipmentLine.TESTFIELD(Quantity,TempServiceLine.Quantity);
        ServiceShipmentLine.TESTFIELD("Quantity Consumed",TempServiceLine.Quantity);
      UNTIL TempServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyVATEntry@38(OrderNo@1001 : Code[20]);
    VAR
      ServiceInvoiceHeader@1000 : Record 5992;
      VATEntry@1003 : Record 254;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",OrderNo);
      ServiceInvoiceHeader.FINDFIRST;
      VATEntry.SETRANGE("Document Type",VATEntry."Document Type"::Invoice);
      VATEntry.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      VATEntry.FINDSET;
      REPEAT
        VATEntry.TESTFIELD("Posting Date",ServiceInvoiceHeader."Posting Date");
        VATEntry.TESTFIELD("Bill-to/Pay-to No.",ServiceInvoiceHeader."Bill-to Customer No.");
      UNTIL VATEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyValueEntry@31(VAR TempServiceLine@1000 : TEMPORARY Record 5902);
    VAR
      ValueEntry@1001 : Record 5802;
      ServiceInvoiceHeader@1002 : Record 5992;
    BEGIN
      TempServiceLine.SETRANGE(Type,TempServiceLine.Type::Item);
      TempServiceLine.FINDFIRST;

      ServiceInvoiceHeader.SETRANGE("Order No.",TempServiceLine."Document No.");
      ServiceInvoiceHeader.FINDFIRST;

      ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Service Invoice");
      ValueEntry.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      ValueEntry.SETRANGE("Document Line No.",TempServiceLine."Line No.");
      ValueEntry.FINDFIRST;
      ValueEntry.TESTFIELD("Item No.",TempServiceLine."No.");
      ValueEntry.TESTFIELD("Valued Quantity",-TempServiceLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntryNumber@21(EntryType@1003 : Option;ServiceOrderNo@1002 : Code[20];Count@1001 : Integer);
    VAR
      ServiceLedgerEntry@1000 : Record 5907;
    BEGIN
      ServiceLedgerEntry.SETRANGE("Entry Type",EntryType);
      ServiceLedgerEntry.SETRANGE("Service Order No.",ServiceOrderNo);
      Assert.AreEqual(Count,ServiceLedgerEntry.COUNT,NumberOfServiceLedgerEntriesErr);
    END;

    [ConfirmHandler]
    PROCEDURE InvoiceESConfirmHandler@24(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := (Question = ExpectedConfirm);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@66(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Service]
      Unsupported version tags:
      NA: Unable to Compile

      Test for Service Posting Journals Mgt:
        1. Test Posted Entries after Posting Service Order with Location Code.
        2. Test Bin Content after Posting Item Journal.
        3. Test Service Ledger Entries after Posting Service Order with Location and Bin Code.
        4. Test Service Ledger Entries after Posting Service Order with Job and Job Task.
        5. Test Service Shipment Line after Posting Service Order with Resource.
        6. Test Service Ledger Entries after Posting Service Credit Memo with Location and Bin Code.
        7. Test Service Order can be posted as Ship & Consume with multiple lines.

      Covered Test cases:
        TFS_TC_ID=141405

      Covers Test cases: for WI - 103171
      -------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                    TFS ID
      -------------------------------------------------------------------------------------------------------------
      PostConsumeForServiceOrderWithMultipleLines                                                           103171
    }
    END.
  }
}

