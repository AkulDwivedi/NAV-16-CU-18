OBJECT Codeunit 137153 SCM Warehouse - Journal
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LocationWhite@1006 : Record 14;
      LocationSilver@1007 : Record 14;
      WarehouseEmployee@1005 : Record 7301;
      BasicLocation@1026 : Record 14;
      LocationSilver2@1025 : Record 14;
      Assert@1012 : Codeunit 130000;
      LibraryPurchase@1008 : Codeunit 130512;
      LibrarySales@1024 : Codeunit 130509;
      LibraryWarehouse@1004 : Codeunit 132204;
      LibraryInventory@1003 : Codeunit 132201;
      LibraryItemTracking@1035 : Codeunit 130502;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryVariableStorage@1022 : Codeunit 131004;
      LibraryPatterns@1040 : Codeunit 132212;
      LibraryManufacturing@1042 : Codeunit 132202;
      LibrarySetupStorage@1044 : Codeunit 131009;
      isInitialized@1000 : Boolean;
      RegisterJournalLines@1011 : TextConst 'ENU=Do you want to register the journal lines?';
      HandlingError@1013 : TextConst 'ENU=There is nothing to register.';
      LotNoEmptyError@1017 : TextConst 'ENU=Lot No. must have a value in Whse. Item Tracking Line';
      PhysicalInventoryError@1021 : TextConst '@@@="%1 = Item No., %2 = Lot No., %3 = Lot Specific Quantity. %4 = Total Quantity";ENU=Qty. to Handle (Base) in Tracking Specification for Item No. %1, Serial No.: , Lot No.: %2 is currently %3. It must be %4.';
      BinError@1020 : TextConst '@@@="%1 = Location Code, %2 = Bin Code";ENU="You cannot delete the Bin with Location Code = %1, Code = %2, because the Bin contains items."';
      BinContentError@1019 : TextConst 'ENU=You cannot delete this Bin Content, because the Bin Content contains items.';
      WarehouseLineMustNotExist@1009 : TextConst 'ENU=Warehouse Adjustment Lines must not exist.';
      JournalLinesRegistered@1010 : TextConst 'ENU=The journal lines were successfully registered';
      NewExpirationDateError@1023 : TextConst 'ENU=New Expiration Date must be equal to ''''  in Tracking Specification';
      SingleExpirationDateError@1015 : TextConst 'ENU=Only one expiration date is allowed per lot number.';
      DirectedPutAwayAndPickErrorNewExpirationDate@1018 : TextConst 'ENU="Validation error for Field: New Expiration Date,  Message = ''You cannot change item tracking because the item is set up with warehouse tracking and location %1 is set up with Directed Put-away and Pick."';
      DirectedPutAwayAndPickSerialNo@1027 : TextConst 'ENU="Validation error for Field: Serial No.,  Message = ''You cannot change item tracking because it is created from warehouse entries."';
      ItemLedgerEntriesMustNotExist@1028 : TextConst 'ENU=Item Ledger Entries must not exist.';
      LocationCodeErrorOnPhysicalInventoryJournal@1029 : TextConst 'ENU="Validation error for Field: Location Code,  Message = ''You cannot change the Location Code because this item journal line is created from warehouse entries."';
      ItemReclassificationErrorWithNewLotNo@1014 : TextConst 'ENU="Validation error for Field: New Lot No.,  Message = ''You cannot change item tracking because the item is set up"';
      ItemReclassificationErrorWithNewSerialNo@1030 : TextConst 'ENU="Validation error for Field: New Serial No.,  Message = ''You cannot change item tracking because the item is set"';
      WarehouseLineMustExistErr@1032 : TextConst 'ENU=Warehouse Journal Line with Zone Code %1, Bin Code %2, Item No. %3 must be exist.';
      QtyCalculatedErr@1033 : TextConst 'ENU=Qty. Calculated is not correct.';
      BinContentErr@1031 : TextConst 'ENU=Bin Content should be deleted by registration Whse Journal Line';
      BinContentQuantityErr@1034 : TextConst 'ENU=Quantity (Base) available must not be less';
      UnitOfMeasureMustHaveValueErr@1038 : TextConst '@@@="%1=field name (Unit of Measure Code must have a value in Warehouse Journal Line)";ENU=%1 must have a value in Warehouse Journal Line';
      TestFieldErrorErr@1036 : TextConst 'ENU=TestField';
      ItemJnlLineMustExistErr@1039 : TextConst 'ENU=Physical inventory journal line must be created';
      ItemNoErr@1016 : TextConst 'ENU=Item No. must have a value in Warehouse Journal Line';
      ReservationExistMsg@1037 : TextConst 'ENU=One or more reservation entries exist for the item';
      ExcessiveItemTrackingErr@1041 : TextConst 'ENU=More than one Item Tracking Line exists for the Item Journal Line.';
      TrackingAction@1045 : ' ,VerifyTracking,AssignLotNo,AssistEdit,AssignSerialNo,AssitEditNewSerialNoExpDate,AssignMultipleLotNo,MultipleExpirationDate,SelectEntries,AssitEditSerialNoAndRemoveExpDate,EditSerialNo,AssitEditLotNo,AssitEditNewLotNoExpDate,AssignSerialAndLot,AssignNewSerialAndLotNo,SelectEntriesWithLot,SelectEntriesWithNewSerialNo';

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ConfirmHandler)]
    PROCEDURE PostWhseItemJournalWithoutLotNoOnItemTrackingLine@7();
    VAR
      ItemTrackingCode@1000 : Record 6502;
      Item@1001 : Record 27;
      Bin@1002 : Record 7354;
      WarehouseJournalLine@1003 : Record 7311;
      WarehouseJournalTemplate@1005 : Record 7309;
    BEGIN
      // Setup: Create Warehouse Journal Line with Tracking Lines.
      Initialize;
      LibraryVariableStorage.Enqueue(TrackingAction::AssignLotNo);  // TrackingAction used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(TRUE);  // LotNoBlank used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // AssignSerialAndLot used in WhseItemTrackingLinesHandler.
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateItem(Item,ItemTrackingCode.Code);
      FindBin(Bin,LocationWhite.Code,TRUE);
      CreateWarehouseJournalLine(
        WarehouseJournalLine,Bin,WarehouseJournalTemplate.Type::Item,Item."No.",LibraryRandom.RandDec(100,2),TRUE);  // Use random Quantity.

      // Exercise: Register Warehouse Journal Line.
      LibraryVariableStorage.Enqueue(RegisterJournalLines);  // RegisterJournalLines used in ConfirmHandler.
      ASSERTERROR LibraryWarehouse.RegisterWhseJournalLine(
          WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",LocationWhite.Code,FALSE);

      // Verify: Error Message Missing Lot No..
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,LotNoEmptyError) > 0,GETLASTERRORTEXT);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE PostPartialPurchaseOrderWithItemTrackingLine@21();
    VAR
      Item@1000 : Record 27;
      ItemTrackingCode@1001 : Record 6502;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      Bin@1004 : Record 7354;
    BEGIN
      // Setup : Create Purchase Order with Partial Receive and Invoice.
      Initialize;
      LibraryVariableStorage.Enqueue(TrackingAction::AssignLotNo);  // TrackingAction used in WhseItemTrackingLinesHandler.
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateItem(Item,ItemTrackingCode.Code);
      LibraryWarehouse.FindBin(Bin,LocationSilver.Code,'',1);  // Use 1 for Bin Index.
      CreatePurchaseOrderForPartialShipmentAndInvoice(PurchaseHeader,PurchaseLine,Item."No.",LocationSilver.Code,Bin.Code);

      // Exercise: Post Purchase Order.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Warehouse Entry.
      VerifyWarehouseEntry(PurchaseLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PostWhseItemJournalWithoutQuantity@11();
    VAR
      WarehouseJournalTemplate@1004 : Record 7309;
    BEGIN
      Initialize;
      PostWarehouseJournalLine(WarehouseJournalTemplate.Type::Item);  // Warehouse Item Journal.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PostWhsePhysicalInventoryJournalWithoutQuantity@13();
    VAR
      WarehouseJournalTemplate@1000 : Record 7309;
    BEGIN
      Initialize;
      PostWarehouseJournalLine(WarehouseJournalTemplate.Type::"Physical Inventory");  // Warehouse Physical Inventory.
    END;

    LOCAL PROCEDURE PostWarehouseJournalLine@16(Type@1005 : Option);
    VAR
      Item@1004 : Record 27;
      Bin@1003 : Record 7354;
      WarehouseJournalLine@1002 : Record 7311;
    BEGIN
      // Setup: Create Warehouse Journal Line.
      CreateItem(Item,'');
      FindBin(Bin,LocationWhite.Code,TRUE);
      CreateWarehouseJournalLine(WarehouseJournalLine,Bin,Type,Item."No.",0,FALSE);  // Value Zero Important for test.

      // Exercise: Register Warehouse Journal line.
      LibraryVariableStorage.Enqueue(RegisterJournalLines);  // RegisterJournalLines used in ConfirmHandler.
      LibraryVariableStorage.Enqueue(HandlingError);  // RegisterJournalLines used in MessageHandler.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",LocationWhite.Code,FALSE);

      // Verify: Verification done in ConfirmHandler.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PostWhseReclassificationJournalWithoutQuantity@15();
    VAR
      Item@1001 : Record 27;
      Bin@1000 : Record 7354;
      Bin2@1005 : Record 7354;
      WarehouseJournalLine@1003 : Record 7311;
      WarehouseJournalBatch@1002 : Record 7310;
      WarehouseJournalTemplate@1004 : Record 7309;
      BinContent@1006 : Record 7302;
    BEGIN
      // Setup: Create Warehouse Journal Line. Create Bin Content.
      Initialize;
      CreateItem(Item,'');
      FindBin(Bin,LocationWhite.Code,TRUE);  // Find Bin for From Bin Code.
      FindBin(Bin2,LocationWhite.Code,FALSE);  // Find Bin for To Bin Code.
      LibraryWarehouse.CreateBinContent(
        BinContent,Bin."Location Code",Bin."Zone Code",Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      LibraryWarehouse.CreateBinContent(
        BinContent,Bin2."Location Code",Bin2."Zone Code",Bin2.Code,Item."No.",'',Item."Base Unit of Measure");
      CreateWarehouseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Type::Reclassification,LocationWhite.Code);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,'','',
        WarehouseJournalLine."Entry Type"::Movement,Item."No.",0);  // Value Zero Important for test.
      ModifyWhseJournalLineForReclass(WarehouseJournalLine,Bin,Bin2);

      // Exercise: Register Warehouse Journal line.
      LibraryVariableStorage.Enqueue(RegisterJournalLines);  // RegisterJournalLines used in ConfirmHandler.
      LibraryVariableStorage.Enqueue(HandlingError);  // RegisterJournalLines used in MessageHandler.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,LocationWhite.Code,FALSE);

      // Verify: Verification done in ConfirmHandler.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler)]
    PROCEDURE RegisterWhseItemJournalWithSerialAndLotNoWithoutLotSpecific@20();
    BEGIN
      Initialize;
      RegisterWhseItemJournalWithItemTracking(FALSE);  // Register Warehouse Journal Line With Serial and Lot No. without Lot Specific in Item Tracking Code.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler)]
    PROCEDURE RegisterWhseItemJournalWithSerialAndLotNo@24();
    BEGIN
      Initialize;
      RegisterWhseItemJournalWithItemTracking(TRUE);  // Register Warehouse Journal Line with Serial and Lot No.
    END;

    LOCAL PROCEDURE RegisterWhseItemJournalWithItemTracking@23(Lot@1006 : Boolean);
    VAR
      ItemTrackingCode@1005 : Record 6502;
      Item@1004 : Record 27;
      WarehouseJournalLine@1003 : Record 7311;
      Bin@1002 : Record 7354;
      WarehouseJournalTemplate@1001 : Record 7309;
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      // Setup: Create Warehouse Journal Line with Tracking Lines.
      LibraryVariableStorage.Enqueue(TrackingAction);  // TrackingAction used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // LotNoBlank used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(TRUE);  // AssignSerialAndLot used in WhseItemTrackingLinesHandler.
      CreateItemTrackingCode(ItemTrackingCode,TRUE,Lot);
      CreateItem(Item,ItemTrackingCode.Code);
      FindBin(Bin,LocationWhite.Code,TRUE);
      CreateWarehouseJournalLine(
        WarehouseJournalLine,Bin,WarehouseJournalTemplate.Type::Item,Item."No.",LibraryRandom.RandInt(10),TRUE);

      // Exercise: Register Warehouse Journal Line.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",LocationWhite.Code,TRUE);

      // Verify: Verify Serial No. and Lot No. in Warehouse Entries.
      VerifyWarehouseEntriesForLotAndSerialNo(WarehouseJournalLine,WarehouseEntry."Entry Type"::"Positive Adjmt.",1,Lot);  // Verify Serial Quantity.
      VerifyWarehouseEntriesForLotAndSerialNo(WarehouseJournalLine,WarehouseEntry."Entry Type"::"Negative Adjmt.",-1,Lot); // Verify Serial Quantity.
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler,ItemTrackingLinesPageHandler)]
    PROCEDURE CalculateAdjustmentWithSerialAndLotNo@17();
    VAR
      ItemTrackingCode@1004 : Record 6502;
      Item@1003 : Record 27;
      WarehouseJournalLine@1002 : Record 7311;
      Bin@1001 : Record 7354;
      WarehouseJournalTemplate@1000 : Record 7309;
      ItemJournalBatch@1005 : Record 233;
      ItemJournalLine@1007 : Record 83;
    BEGIN
      // Setup: Create Warehouse Journal Line with Tracking Lines, Assign Serial No. and Lot No. on Warehouse Journal Line and Register.
      Initialize;
      LibraryVariableStorage.Enqueue(TrackingAction);
      LibraryVariableStorage.Enqueue(FALSE);  // LotNoBlank used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(TRUE);  // AssignSerialAndLot used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(TrackingAction::VerifyTracking);  // TrackingAction used in ItemTrackingLinesPageHandler.
      CreateItemTrackingCode(ItemTrackingCode,TRUE,TRUE);
      CreateItem(Item,ItemTrackingCode.Code);
      FindBin(Bin,LocationWhite.Code,TRUE);
      CreateWarehouseJournalLine(
        WarehouseJournalLine,Bin,WarehouseJournalTemplate.Type::Item,Item."No.",LibraryRandom.RandInt(10) + 5,TRUE);  // Value Required Creating multiple Tracking Lines.
      LibraryVariableStorage.Enqueue(WarehouseJournalLine.Quantity);  // Quantity used in ItemTrackingLinesPageHandler.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",LocationWhite.Code,TRUE);

      // Exercise: Calculate Warehouse Adjustment. Open Item Tracking Line Page.
      CalculateWhseAdjustment(ItemJournalBatch,Item);
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,Item."No.");
      ItemJournalLine.OpenItemTrackingLines(FALSE);

      // Verify: Warehouse Adjustment Line on Item Journal. Verify Item Tracking Line on Item Tracking Page done in ItemTrackingLinesPageHandler.
      VerifyWarehouseAdjustmentLine(ItemJournalBatch,Item."No.",WarehouseJournalLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryHandler)]
    PROCEDURE CalculatePhysicalInventoryAndPost@32();
    VAR
      Bin@1001 : Record 7354;
      Item@1003 : Record 27;
      ItemTrackingCode@1002 : Record 6502;
      ItemJournalBatch@1007 : Record 233;
      ItemJournalLine@1004 : Record 83;
      ItemJournalTemplate@1006 : Record 82;
      LotNo@1000 : Variant;
    BEGIN
      // Setup: Update Bin Quantity by posting Item Journal Lines with Item Tracking.
      Initialize;
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateItem(Item,ItemTrackingCode.Code);
      CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Item,FALSE);
      LibraryVariableStorage.Enqueue(TrackingAction::AssignLotNo);  // TrackingAction used in ItemTrackingLinesPageHandler.
      CreateItemJournalLineWithItemTracking(ItemJournalLine,ItemJournalBatch,Bin,Item."No.",LibraryRandom.RandDec(100,2),TRUE);
      LibraryVariableStorage.Enqueue(TrackingAction::AssignLotNo);  // TrackingAction used in ItemTrackingLinesPageHandler.
      CreateItemJournalLineWithItemTracking(ItemJournalLine,ItemJournalBatch,Bin,Item."No.",ItemJournalLine.Quantity,TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      LibraryVariableStorage.Enqueue(TrackingAction::AssistEdit);  // TrackingAction used in ItemTrackingLinesPageHandler.

      // Exercise: Create and Post Physical Inventory Journal.
      ASSERTERROR CreateAndPostPhysicalInventory(Item."No.",LocationSilver.Code,Bin.Code,TRUE);

      // Verify: Error Message for Total Quantity more than Lot Specific Quantity.
      LibraryVariableStorage.Dequeue(LotNo);  // Dequeue LotNo Used in ItemTrackingLinesPageHandler.
      Assert.ExpectedError(STRSUBSTNO(PhysicalInventoryError,Item."No.",LotNo,ItemJournalLine.Quantity,ItemJournalLine.Quantity * 2));  // Total Physical Quantity is Twice the Lot Specific Quantity.
    END;

    [Test]
    PROCEDURE DeleteBinAfterPostingItemJournalLineAndVerifyError@31();
    VAR
      ItemJournalLine@1005 : Record 83;
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CreateItem(Item,'');
      CreateAndPostItemJournalLineWithBin(ItemJournalLine,Item."No.",Item."Base Unit of Measure");

      // Exercise: Delete Bin.
      ASSERTERROR DeleteBin(ItemJournalLine."Location Code",ItemJournalLine."Bin Code");

      // Verify: Verify Error while Deleting Bin.
      Assert.ExpectedError(STRSUBSTNO(BinError,LocationSilver.Code,ItemJournalLine."Bin Code"));

      // Exercise: Delete Bin Content.
      ASSERTERROR DeleteBinContent(ItemJournalLine."Location Code",ItemJournalLine."Bin Code",ItemJournalLine."Item No.",'');

      // Verify: Verify Error while Deleting Bin Content.
      Assert.ExpectedError(BinContentError);
    END;

    [Test]
    PROCEDURE DeleteBinAfterPostingPhysicalInventoryJournal@30();
    VAR
      ItemJournalLine@1000 : Record 83;
      Item@1001 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CreateItem(Item,'');
      CreateAndPostItemJournalLineWithBin(ItemJournalLine,Item."No.",Item."Base Unit of Measure");

      // Exercise: Create and Post Physical Inventory.
      CreateAndPostPhysicalInventory(ItemJournalLine."Item No.",LocationSilver.Code,ItemJournalLine."Bin Code",FALSE);

      // Verify: Verify Bin is deleted after Posting Physical Inventory.
      DeleteBin(ItemJournalLine."Location Code",ItemJournalLine."Bin Code");
    END;

    [Test]
    PROCEDURE RegisterWarehouseItemJournalLineWithBlockedItem@54();
    VAR
      Item@1004 : Record 27;
      Bin@1003 : Record 7354;
      WarehouseJournalLine@1002 : Record 7311;
      WarehouseJournalTemplate@1001 : Record 7309;
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      // Setup: Create Warehouse Journal Line.
      Initialize;
      CreateBlockedItem(Item);
      FindBin(Bin,LocationWhite.Code,TRUE);
      CreateWarehouseJournalLine(
        WarehouseJournalLine,Bin,WarehouseJournalTemplate.Type::Item,Item."No.",LibraryRandom.RandDec(100,2),FALSE);

      // Exercise: Register Warehouse Item Journal Line.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",LocationWhite.Code,TRUE);

      // Verify: Verify Warehouse Entry After Register Warehouse Item Journal Line for Blocked Item.
      VerifyWarehouseEntryWithBlockedItem(
        WarehouseJournalLine,WarehouseEntry."Entry Type"::"Positive Adjmt.",WarehouseJournalLine.Quantity);
      VerifyWarehouseEntryWithBlockedItem(
        WarehouseJournalLine,WarehouseEntry."Entry Type"::"Negative Adjmt.",-WarehouseJournalLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler)]
    PROCEDURE CalculateWarehouseAdjustmentWithMultipleUOM@45();
    VAR
      ItemTrackingCode@1007 : Record 6502;
      Item@1006 : Record 27;
      ItemUnitOfMeasure@1008 : Record 5404;
      WarehouseJournalLine@1005 : Record 7311;
      Bin@1004 : Record 7354;
      ItemJournalBatch@1002 : Record 233;
      Quantity@1010 : Decimal;
    BEGIN
      // Setup: Create Warehouse Journal Line with Tracking Lines, Assign Lot No. on Warehouse Journal Line and Register.
      Initialize;
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateItem(Item,ItemTrackingCode.Code);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      FindBin(Bin,LocationWhite.Code,TRUE);
      Quantity := LibraryRandom.RandDec(100,2);
      CreateAndUpdateWarehouseJournalLinesWithItemTrackingAndMultipleUOM(
        WarehouseJournalLine,Bin,Item."No.",ItemUnitOfMeasure.Code,Quantity);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",LocationWhite.Code,TRUE);
      CalculateWhseAdjustment(ItemJournalBatch,Item);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      CreateAndUpdateWarehouseJournalLinesWithItemTrackingAndMultipleUOM(
        WarehouseJournalLine,Bin,Item."No.",ItemUnitOfMeasure.Code,Quantity + 10);  // Higher Quantity required than above posted Item Journal Lines.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",LocationWhite.Code,TRUE);

      // Exercise: Calculate Warehouse Adjustment.
      CalculateWhseAdjustment(ItemJournalBatch,Item);

      // Verify: Warehouse Adjustment Line on Item Journal.
      Assert.IsFalse(VerifyWhseAdjustmentLinesnotExist(ItemJournalBatch,Item."No.",Quantity),WarehouseLineMustNotExist);
      VerifyWhseAdjustmentLinesWithMultipleUnitOfMeasure(
        ItemJournalBatch,Item."No.",Item."Base Unit of Measure",WarehouseJournalLine.Quantity);
      VerifyWhseAdjustmentLinesWithMultipleUnitOfMeasure(
        ItemJournalBatch,Item."No.",ItemUnitOfMeasure.Code,WarehouseJournalLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(PhysicalInventoryItemSelectionHandler,CalculatePhysicalInventoryCountingHandler)]
    PROCEDURE PostPhysicalInventoryJournalForCountingPeriodWithoutQuantityDifference@57();
    BEGIN
      Initialize;
      PostPhysicalInventoryJournalForCountingPeriod(FALSE);  // Post Warehouse Journal without Difference in Quantity.
    END;

    [Test]
    [HandlerFunctions(PhysicalInventoryItemSelectionHandler,CalculatePhysicalInventoryCountingHandler)]
    PROCEDURE PostPhysicalInventoryJournalForCountingPeriodWithQuantityDifference@58();
    BEGIN
      Initialize;
      PostPhysicalInventoryJournalForCountingPeriod(TRUE);  // Post Warehouse Journal with Difference in Quantity.
    END;

    LOCAL PROCEDURE PostPhysicalInventoryJournalForCountingPeriod@53(QuantityDifference@1012 : Boolean);
    VAR
      Bin@1005 : Record 7354;
      Item@1000 : Record 27;
      PhysInvtCountingPeriod@1001 : Record 7381;
      WarehouseJournalLine@1004 : Record 7311;
      WarehouseJournalLine2@1003 : Record 7311;
      WarehouseJournalTemplate@1006 : Record 7309;
      WarehouseEntry@1009 : Record 7312;
      PhysInvtCountManagement@1007 : Codeunit 7380;
      NextCountingStartDate@1011 : Date;
      NextCountingEndDate@1002 : Date;
    BEGIN
      // Setup: Create Item with Physical Inventory Counting Period. Create and register Warehouse Journal Line. Run Calculate Counting Period on Warehouse Physical Inventory Journal.
      CreateItemWithPhysicalInventoryCountingPeriod(Item,PhysInvtCountingPeriod);
      FindBin(Bin,LocationWhite.Code,TRUE);
      CreateWarehouseJournalLine(
        WarehouseJournalLine,Bin,WarehouseJournalTemplate.Type::Item,Item."No.",LibraryRandom.RandInt(10),FALSE);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",LocationWhite.Code,TRUE);
      LibraryVariableStorage.Enqueue(Item."No.");  // ItemNo used in PhysicalInventoryItemSelectionHandler.
      PhysInvtCountManagement.CalcPeriod(
        Item."Last Counting Period Update",NextCountingStartDate,NextCountingEndDate,
        PhysInvtCountingPeriod."Count Frequency per Year");
      LibraryVariableStorage.Enqueue(NextCountingStartDate);  // NextCountingStartDate used in PhysicalInventoryItemSelectionHandler.
      LibraryVariableStorage.Enqueue(NextCountingEndDate);  // NextCountingEndDate used in PhysicalInventoryItemSelectionHandler.
      RunCalculateCountingPeriodOnWarehousePhysicalInventoryJournal(WarehouseJournalLine2,LocationWhite.Code);
      FindWarehouseJournalLine(WarehouseJournalLine2,Item."No.");
      IF QuantityDifference THEN
        UpdateQuantityPhysicalInventoryOnWarehouseJournalLine(
          WarehouseJournalLine2,WarehouseJournalLine2."Qty. (Phys. Inventory)" / 2);

      // Exercise: Post Warehouse Physical Inventory Journal for Calculated Counting Period.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine2."Journal Template Name",WarehouseJournalLine2."Journal Batch Name",LocationWhite.Code,TRUE);

      // Verify: Verify Warehouse Entries.
      VerifyWarehouseEntryForCoutingPeriod(
        WarehouseJournalLine2,WarehouseEntry."Entry Type"::"Positive Adjmt.",-WarehouseJournalLine2.Quantity);
      VerifyWarehouseEntryForCoutingPeriod(
        WarehouseJournalLine2,WarehouseEntry."Entry Type"::"Negative Adjmt.",WarehouseJournalLine2.Quantity);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE CalculateInventoryOnWhsePhysicalInventoryJournalWithDifferentZoneAndItemVariant@68();
    VAR
      Item@1000 : Record 27;
      Bin@1009 : Record 7354;
      Bin2@1005 : Record 7354;
      WarehouseJournalLine@1003 : Record 7311;
      WarehouseJournalLine2@1010 : Record 7311;
      WarehouseJournalBatch@1006 : Record 7310;
      WarehouseJournalTemplate@1004 : Record 7309;
      ItemVariant@1007 : Record 5401;
    BEGIN
      // Setup: Create Item with Variant. Create Warehouse Journal line with Bin and Item Variant. Calculate and Post Warehouse Adjustment.
      Initialize;
      CreateItem(Item,'');
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      FindBin(Bin,LocationWhite.Code,TRUE);
      CreateWarehouseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Type::Item,Bin."Location Code");
      CreateAndUpdateWarehouseJournalLineWithBin(
        WarehouseJournalLine,WarehouseJournalBatch,Bin,Item."No.",ItemVariant.Code,Item."Base Unit of Measure");
      FindBin(Bin2,LocationWhite.Code,FALSE);  // Select Next Zone Code.
      CreateAndUpdateWarehouseJournalLineWithBin(
        WarehouseJournalLine,WarehouseJournalBatch,Bin2,Item."No.",ItemVariant.Code,Item."Base Unit of Measure");
      RegisterWarehouseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",LocationWhite.Code);
      CalculateAndPostWhseAdjustment(Item);

      // Exercise: Calculate Inventory on Warehouse Physical Journal.
      RunWarehouseCalculateInventory(WarehouseJournalLine2,Bin2."Zone Code",Bin2."Location Code",'');

      // Verify: Warehouse Physical Journal Line.
      VerifyWarehousePhysicalJournalLine(WarehouseJournalLine2,Bin2,Item."No.");
      Assert.IsFalse(
        VerifyWarehousePhysicalJournalLineExist(WarehouseJournalLine2,Bin."Zone Code",Item."No."),WarehouseLineMustNotExist);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE CalculateInventoryOnPhysicalInventoryJournalWithDifferentLocation@73();
    VAR
      Item@1000 : Record 27;
      Bin@1009 : Record 7354;
      WarehouseJournalLine@1003 : Record 7311;
      WarehouseJournalBatch@1006 : Record 7310;
      WarehouseJournalTemplate@1004 : Record 7309;
      ItemJournalLine@1011 : Record 83;
      LocationCode@1012 : Code[10];
      Quantity@1013 : Decimal;
    BEGIN
      // Setup: Create and Post Item Journal Line and Warehouse Physical Inventory Journal with Different location Code. Calculate and Post Warehouse Adjustment.
      Initialize;
      CreateItem(Item,'');
      FindBin(Bin,LocationWhite.Code,TRUE);
      CreateAndPostItemJournalLineWithBin(ItemJournalLine,Item."No.",Item."Base Unit of Measure");
      LocationCode := ItemJournalLine."Location Code";
      Quantity := ItemJournalLine.Quantity;
      CreateWarehouseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Type::Item,Bin."Location Code");
      CreateAndUpdateWarehouseJournalLineWithBin(
        WarehouseJournalLine,WarehouseJournalBatch,Bin,Item."No.",'',Item."Base Unit of Measure");
      RegisterWarehouseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",LocationWhite.Code);
      CalculateAndPostWhseAdjustment(Item);

      // Exercise: Calculate Inventory on Physical Journal.
      RunReportCalculateInventory(ItemJournalLine,Item."No.",'','',FALSE);

      // Verify: Physical Inventory Journal Line is Created for both the location.
      VerifyPhysicalInventoryJournal(ItemJournalLine,Item."No.",Bin."Location Code",WarehouseJournalLine.Quantity);
      VerifyPhysicalInventoryJournal(ItemJournalLine,Item."No.",LocationCode,Quantity);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE CalculateInventoryOnPhysicalInventoryJournalMultipleUOM@76();
    VAR
      Item@1000 : Record 27;
      Bin@1009 : Record 7354;
      WarehouseJournalLine@1003 : Record 7311;
      WarehouseJournalBatch@1006 : Record 7310;
      WarehouseJournalTemplate@1004 : Record 7309;
      ItemVariant@1007 : Record 5401;
      ItemUnitOfMeasure@1012 : Record 5404;
      ItemJournalLine@1008 : Record 83;
      Quantity@1013 : Decimal;
    BEGIN
      // Setup: Create and Post Warehouse Physical Inventory Journal with Multiple Unit of Measure and Item Variant. Calculate and Post Warehouse Adjustment.
      Initialize;
      CreateItem(Item,'');
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      FindBin(Bin,LocationWhite.Code,TRUE);
      CreateWarehouseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Type::Item,Bin."Location Code");
      CreateAndUpdateWarehouseJournalLineWithBin(
        WarehouseJournalLine,WarehouseJournalBatch,Bin,Item."No.",ItemVariant.Code,Item."Base Unit of Measure");
      Quantity := WarehouseJournalLine.Quantity;
      CreateAndUpdateWarehouseJournalLineWithBin(
        WarehouseJournalLine,WarehouseJournalBatch,Bin,Item."No.",ItemVariant.Code,ItemUnitOfMeasure.Code);
      RegisterWarehouseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",LocationWhite.Code);
      CalculateAndPostWhseAdjustment(Item);

      // Exercise: Calculate Inventory on Physical Journal.
      RunReportCalculateInventory(ItemJournalLine,'',Bin."Location Code",'',FALSE);

      // Verify: Physical Inventory Journal Line is Created.
      VerifyPhysicalInventoryJournal(
        ItemJournalLine,Item."No.",Bin."Location Code",
        Quantity + WarehouseJournalLine.Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure");  // Verify total base Quantity.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,QuantityToCreatePageHandler,WhseItemTrackingLinesHandler,ItemTrackingSummaryHandler)]
    PROCEDURE RegisterReclassificationWithExpirationDate@77();
    VAR
      ItemLedgerEntry@1003 : Record 32;
      RegisteredWhseActivityLine@1008 : Record 5773;
      SerialNo@1010 : Variant;
      NewSerialNo@1009 : Variant;
    BEGIN
      // Setup: Create and Post Warehouse Receipt and Register Put Away.
      Initialize;
      PostWarehouseReceiptAndRegisterPutAwayForSerialNo(RegisteredWhseActivityLine,'',LibraryRandom.RandInt(10),FALSE);

      // Exercise: Create Warehouse Reclassification Journal.
      LibraryVariableStorage.Enqueue(TrackingAction::AssitEditNewSerialNoExpDate);  // TrackingAction used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // LotNoBlank used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // AssignSerialAndLot used in WhseItemTrackingLinesHandler.
      CreateWarehouseReclassificationJournalAndRegister(RegisteredWhseActivityLine,'');

      // Verify: Item Ledger Entry for New Expiration and Serial No.
      LibraryVariableStorage.Dequeue(SerialNo);
      LibraryVariableStorage.Dequeue(NewSerialNo);
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Transfer,RegisteredWhseActivityLine."Item No.",RegisteredWhseActivityLine."Location Code",
        FALSE,SerialNo,'',0D,-1);  // Used 0D for Blank Date and -1 for Quantity.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Transfer,RegisteredWhseActivityLine."Item No.",RegisteredWhseActivityLine."Location Code",TRUE,
        NewSerialNo,'',WORKDATE,1);  // Used 1 for Quantity.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,WhseItemTrackingLinesHandler,ItemTrackingSummaryHandler)]
    PROCEDURE RegisterReclassificationWithMultipleLotNoAndDifferentExpirationDate@90();
    BEGIN
      Initialize;
      RegisterReclassificationJournal(FALSE);  // Register Warehouse Reclassification Journal with Multiple Lot and Different Expiration Date.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,WhseItemTrackingLinesHandler,ItemTrackingSummaryHandler)]
    PROCEDURE RegisterReclassificationWithMultipleExpirationDate@100();
    BEGIN
      Initialize;
      RegisterReclassificationJournal(TRUE);  // Register Warehouse Reclassification Journal with Multiple Expiration Date on Lot No.
    END;

    LOCAL PROCEDURE RegisterReclassificationJournal@91(MultipleExpirationDate@1010 : Boolean);
    VAR
      ItemTrackingCode@1009 : Record 6502;
      Item@1008 : Record 27;
      PurchaseHeader@1007 : Record 38;
      WarehouseReceiptLine@1005 : Record 7317;
      WarehouseActivityLine@1004 : Record 5767;
      RegisteredWhseActivityLine@1003 : Record 5773;
      DequeueVariable@1002 : Variant;
      LotNo@1001 : Code[20];
    BEGIN
      // Setup: Create and Post Warehouse Receipt.
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateItem(Item,ItemTrackingCode.Code);
      LibraryVariableStorage.Enqueue(TrackingAction::AssignMultipleLotNo);  // TrackingAction used in ItemTrackingLinesPageHandler.
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationWhite.Code,'',Item."No.",TRUE,LibraryRandom.RandInt(5));
      LibraryVariableStorage.Dequeue(DequeueVariable);
      LotNo := DequeueVariable;
      LibraryVariableStorage.Dequeue(DequeueVariable);
      CreateAndPostWarehouseReceipt(WarehouseReceiptLine,PurchaseHeader,'',FALSE);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");

      IF MultipleExpirationDate THEN
        LibraryVariableStorage.Enqueue(TrackingAction::MultipleExpirationDate)
      ELSE
        LibraryVariableStorage.Enqueue(TrackingAction::AssignMultipleLotNo);  // TrackingAction used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // LotNoBlank used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // AssignSerialAndLot used in WhseItemTrackingLinesHandler.
      IF NOT MultipleExpirationDate THEN
        LibraryVariableStorage.Enqueue(LotNo);  // LotNo used in WhseItemTrackingLinesHandler.
      FindRegisteredPutAway(RegisteredWhseActivityLine,Item."No.");

      // Exercise: Create Warehouse Reclassification Journal and Register.
      ASSERTERROR CreateWarehouseReclassificationJournalAndRegister(RegisteredWhseActivityLine,'');

      // Verify: Expiration Date Error.
      IF MultipleExpirationDate THEN
        Assert.IsTrue(STRPOS(GETLASTERRORTEXT,SingleExpirationDateError) > 0,GETLASTERRORTEXT)
      ELSE
        Assert.IsTrue(STRPOS(GETLASTERRORTEXT,NewExpirationDateError) > 0,GETLASTERRORTEXT);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,QuantityToCreatePageHandler,WhseItemTrackingLinesHandler,ItemTrackingSummaryHandler)]
    PROCEDURE RegisterReclassificationAfterRemovingExpirationDate@44();
    VAR
      RegisteredWhseActivityLine@1004 : Record 5773;
      ItemLedgerEntry@1007 : Record 32;
      SerialNo@1008 : Variant;
    BEGIN
      // Setup: Post Warehouse Receipt, Update Expiration Date and Register Put Away.
      Initialize;
      PostWarehouseReceiptAndRegisterPutAwayForSerialNo(RegisteredWhseActivityLine,'',LibraryRandom.RandInt(10),TRUE);  // Used True to update Expiration Date.

      // Exercise: Create Warehouse Reclassification Journal.
      LibraryVariableStorage.Enqueue(TrackingAction::AssitEditSerialNoAndRemoveExpDate);  // TrackingAction used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // LotNoBlank used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // AssignSerialAndLot used in WhseItemTrackingLinesHandler.
      CreateWarehouseReclassificationJournalAndRegister(RegisteredWhseActivityLine,'');

      // Verify: Item Ledger Entry for Serial No and Expiration Date.
      LibraryVariableStorage.Dequeue(SerialNo);
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Transfer,RegisteredWhseActivityLine."Item No.",RegisteredWhseActivityLine."Location Code",
        FALSE,'','',0D,0);  // Used 0 for Quantity.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Purchase,RegisteredWhseActivityLine."Item No.",RegisteredWhseActivityLine."Location Code",
        FALSE,'','',0D,0);  // Used 0 for Quantity.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryHandler)]
    PROCEDURE ItemReclassificationWithDifferentExpirationDate@93();
    VAR
      RegisteredWhseActivityLine@1003 : Record 5773;
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Post Warehouse Receipt and Register Put Away.
      Initialize;
      PostWarehouseReceiptAndRegisterPutAwayForSerialNo(RegisteredWhseActivityLine,'',LibraryRandom.RandInt(10),FALSE);

      // Exercise: Create Item Reclassification Journal.
      ASSERTERROR CreateItemReclassJournalLine(
          ItemJournalLine,RegisteredWhseActivityLine."Item No.",LocationWhite.Code,LocationWhite.Code,'',TRUE,
          RegisteredWhseActivityLine.Quantity);

      // Verify: Location with Directed Put-Away and Pick Error.
      Assert.ExpectedError(STRSUBSTNO(DirectedPutAwayAndPickErrorNewExpirationDate,RegisteredWhseActivityLine."Location Code"));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryHandler)]
    PROCEDURE ItemReclassificationWithLocationAsRequireReceiveAndBasicLocation@46();
    VAR
      ItemTrackingCode@1009 : Record 6502;
      Item@1008 : Record 27;
      ItemJournalLine@1000 : Record 83;
      Bin@1005 : Record 7354;
      Bin2@1002 : Record 7354;
      RegisteredWhseActivityLine@1006 : Record 5773;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create and Post Warehouse Receipt. Item Reclassification with Location as Require Receive to Basic Location.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      LibraryWarehouse.CreateBin(Bin,LocationSilver2.Code,LibraryUtility.GenerateGUID,'','');  // Create Bin for LocationSilver2
      LibraryWarehouse.CreateBin(Bin2,LocationSilver2.Code,LibraryUtility.GenerateGUID,'','');  // Create Second Bin for LocationSilver2
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateItem(Item,ItemTrackingCode.Code);
      LibraryVariableStorage.Enqueue(TrackingAction::AssignLotNo);  // TrackingAction used in ItemTrackingLinesPageHandler.
      PostWarehouseReceiptAndRegisterPutAway(LocationSilver2.Code,'',Item."No.",Bin.Code,Quantity);
      FindRegisteredPutAway(RegisteredWhseActivityLine,Item."No.");
      CreateItemReclassJournalLine(ItemJournalLine,Item."No.",LocationSilver2.Code,BasicLocation.Code,Bin2.Code,TRUE,Quantity);

      // Exercise: Post Item Reclassification Journal.
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // Verify: Item Ledger Entry for Posted Reclassification.
      VerifyItemLedgerEntry(
        ItemJournalLine."Entry Type"::Transfer,Item."No.",BasicLocation.Code,TRUE,'',RegisteredWhseActivityLine."Lot No.",WORKDATE,
        Quantity);
      VerifyItemLedgerEntry(
        ItemJournalLine."Entry Type"::Transfer,Item."No.",LocationSilver2.Code,FALSE,'',RegisteredWhseActivityLine."Lot No.",0D,
        -Quantity);  // Used 0D for Blank Date.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE ErrorChangingItemTrackingLineOnItemJournal@2013();
    VAR
      RegisteredWhseActivityLine@1003 : Record 5773;
      ItemJournalLine@1000 : Record 83;
      WarehouseJournalLine@1001 : Record 7311;
      ItemJournalBatch@1002 : Record 233;
      Item@1004 : Record 27;
    BEGIN
      // Setup: Post Warehouse Receipt and Register Put Away. Create and Register Warehouse Physical Journal. Calculate Warehouse Adjustment.
      Initialize;
      PostWarehouseReceiptAndRegisterPutAwayForSerialNo(RegisteredWhseActivityLine,'',LibraryRandom.RandInt(10),FALSE);
      RunWarehouseCalculateInventory(WarehouseJournalLine,'',RegisteredWhseActivityLine."Location Code",'');
      Item.GET(RegisteredWhseActivityLine."Item No.");
      UpdatePhysicalInventoryAndRegister(WarehouseJournalLine,Item."No.");
      CalculateWhseAdjustment(ItemJournalBatch,Item);
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,Item."No.");

      // Exercise: Change Serial No. on Item Tracking Line.
      LibraryVariableStorage.Enqueue(TrackingAction::EditSerialNo);  // TrackingAction used in WhseItemTrackingLinesHandler.
      ASSERTERROR ItemJournalLine.OpenItemTrackingLines(FALSE);

      // Verify: Error Message while Update Serial No. on Item Journal Line.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,DirectedPutAwayAndPickSerialNo) > 0,GETLASTERRORTEXT);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE CalculateAndPostWarehouseAdjustmentAfterChangingQuantityOnWarehousePhysicalInventory@2011();
    VAR
      RegisteredWhseActivityLine@1003 : Record 5773;
      WarehouseJournalLine@1001 : Record 7311;
      Item@1004 : Record 27;
      Quantity@1006 : Decimal;
    BEGIN
      // Setup: Post Warehouse Receipt and Register Put Away. Create and Register Warehouse Physical Journal. Calculate and Post Warehouse Adjustment.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      PostWarehouseReceiptAndRegisterPutAwayForSerialNo(RegisteredWhseActivityLine,'',Quantity,FALSE);
      RunWarehouseCalculateInventory(
        WarehouseJournalLine,'',RegisteredWhseActivityLine."Location Code",RegisteredWhseActivityLine."Item No.");
      Item.GET(RegisteredWhseActivityLine."Item No.");
      UpdatePhysicalInventoryAndRegister(WarehouseJournalLine,Item."No.");

      // Exercise: Calculate and Post Warehouse Adjustment.
      CalculateAndPostWhseAdjustment(Item);

      // Verify: Inventory is Reduced after Posting Warehosue Adjustment.
      VerifyInventoryForItem(Item,Quantity - RegisteredWhseActivityLine.Quantity);  // Value required for test.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE ErrorChangingItemTrackingLineOnPhysicalInventoryJournal@96();
    VAR
      RegisteredWhseActivityLine@1003 : Record 5773;
      ItemJournalLine@1000 : Record 83;
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      // Setup: Post Warehouse Receipt and Register Put Away. Create and Register Warehouse Physical Journal. Calculate Inventory on Physical Inventory Journal.
      Initialize;
      PostWarehouseReceiptAndRegisterPutAwayForSerialNo(RegisteredWhseActivityLine,'',LibraryRandom.RandInt(10),FALSE);
      RunWarehouseCalculateInventory(
        WarehouseJournalLine,'',RegisteredWhseActivityLine."Location Code",RegisteredWhseActivityLine."Item No.");
      UpdatePhysicalInventoryAndRegister(WarehouseJournalLine,RegisteredWhseActivityLine."Item No.");
      RunReportCalculateInventory(ItemJournalLine,RegisteredWhseActivityLine."Item No.",'','',FALSE);
      FindItemJournalLine(
        ItemJournalLine,ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name",
        RegisteredWhseActivityLine."Item No.");

      // Exercise: Change Serial No. on Item Tracking Line.
      LibraryVariableStorage.Enqueue(TrackingAction::EditSerialNo);  // TrackingAction used in WhseItemTrackingLinesHandler.
      ASSERTERROR ItemJournalLine.OpenItemTrackingLines(FALSE);

      // Verify: Error Message while Update Serial No. on Physical Inventory Journal.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,DirectedPutAwayAndPickSerialNo) > 0,GETLASTERRORTEXT);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE CalculateAndPostPhysicalInventoryAfterChangingQuantityOnWarehousePhysicalInventory@2007();
    VAR
      RegisteredWhseActivityLine@1003 : Record 5773;
      Item@1002 : Record 27;
      ItemJournalLine@1000 : Record 83;
      WarehouseJournalLine@1001 : Record 7311;
      Quantity@1006 : Decimal;
    BEGIN
      // Setup: Post Warehouse Receipt and Register Put Away. Create and Register Warehouse Physical Journal. Calculate and Post Inventory on Physical Inventory Journal.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      PostWarehouseReceiptAndRegisterPutAwayForSerialNo(RegisteredWhseActivityLine,'',Quantity,FALSE);
      RunWarehouseCalculateInventory(
        WarehouseJournalLine,'',RegisteredWhseActivityLine."Location Code",RegisteredWhseActivityLine."Item No.");
      UpdatePhysicalInventoryAndRegister(WarehouseJournalLine,RegisteredWhseActivityLine."Item No.");
      RunReportCalculateInventory(ItemJournalLine,RegisteredWhseActivityLine."Item No.",'','',FALSE);
      Item.GET(RegisteredWhseActivityLine."Item No.");

      // Exercise: Post Physical Inventory Journal.
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // Verify: Inventory is Reduced after Posting Physical Inventory Journal.
      VerifyInventoryForItem(Item,Quantity - RegisteredWhseActivityLine.Quantity);  // Value required for test.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,WhseItemTrackingLinesHandler,ItemTrackingSummaryHandler)]
    PROCEDURE RegisterReclassificationWithoutChangingItemTrackingLineWithLot@103();
    VAR
      ItemTrackingCode@1001 : Record 6502;
      Item@1002 : Record 27;
      ItemLedgerEntry@1006 : Record 32;
      ItemVariant@1004 : Record 5401;
      RegisteredWhseActivityLine@1003 : Record 5773;
    BEGIN
      // Setup: Create Item with Item Variant. Post Warehouse Receipt and Register Put Away.
      Initialize;
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateItem(Item,ItemTrackingCode.Code);
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      LibraryVariableStorage.Enqueue(TrackingAction::AssignLotNo);  // TrackingAction used in ItemTrackingLinesPageHandler.
      PostWarehouseReceiptAndRegisterPutAway(LocationWhite.Code,ItemVariant.Code,Item."No.",'',LibraryRandom.RandInt(10));
      FindRegisteredPutAway(RegisteredWhseActivityLine,Item."No.");

      // Exercise: Create Warehouse Reclassification Journal.
      LibraryVariableStorage.Enqueue(TrackingAction::AssitEditLotNo);  // TrackingAction used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // LotNoBlank used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // AssignSerialAndLot used in WhseItemTrackingLinesHandler.
      CreateWarehouseReclassificationJournalAndRegister(RegisteredWhseActivityLine,ItemVariant.Code);

      // Verify: Warehouse Entries.
      VerifyWarehouseEntryForWhseJournal(
        RegisteredWhseActivityLine,'',RegisteredWhseActivityLine."Lot No.",RegisteredWhseActivityLine.Quantity,TRUE);
      Assert.IsFalse(
        FindItemLedgerEntry(
          ItemLedgerEntry,ItemLedgerEntry."Entry Type"::Transfer,RegisteredWhseActivityLine."Location Code",
          RegisteredWhseActivityLine."Item No."),ItemLedgerEntriesMustNotExist);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,WhseItemTrackingLinesHandler,ItemTrackingSummaryHandler)]
    PROCEDURE RegisterReclassificationChangingItemTrackingLineWithLot@120();
    VAR
      ItemTrackingCode@1006 : Record 6502;
      Item@1007 : Record 27;
      RegisteredWhseActivityLine@1001 : Record 5773;
      ItemLedgerEntry@1000 : Record 32;
      LotNo@1004 : Variant;
      NewLotNo@1003 : Variant;
    BEGIN
      // Setup: Post Warehouse Receipt and Register Put Away.
      Initialize;
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateItem(Item,ItemTrackingCode.Code);
      LibraryVariableStorage.Enqueue(TrackingAction::AssignLotNo);  // TrackingAction used in ItemTrackingLinesPageHandler.
      PostWarehouseReceiptAndRegisterPutAway(LocationWhite.Code,'',Item."No.",'',LibraryRandom.RandInt(10));
      FindRegisteredPutAway(RegisteredWhseActivityLine,Item."No.");

      // Exercise: Create Warehouse Reclassification Journal.
      LibraryVariableStorage.Enqueue(TrackingAction::AssitEditNewLotNoExpDate);  // TrackingAction used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // LotNoBlank used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // AssignSerialAndLot used in WhseItemTrackingLinesHandler.
      CreateWarehouseReclassificationJournalAndRegister(RegisteredWhseActivityLine,'');

      // Verify: Item Ledger Entry and Warehouse Entries.
      LibraryVariableStorage.Dequeue(LotNo);
      LibraryVariableStorage.Dequeue(NewLotNo);
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Transfer,RegisteredWhseActivityLine."Item No.",RegisteredWhseActivityLine."Location Code",
        FALSE,'',LotNo,0D,-RegisteredWhseActivityLine.Quantity);  // Used 0D for Blank Date.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Transfer,RegisteredWhseActivityLine."Item No.",RegisteredWhseActivityLine."Location Code",TRUE,
        '',NewLotNo,WORKDATE,RegisteredWhseActivityLine.Quantity);
      VerifyWarehouseEntryForWhseJournal(RegisteredWhseActivityLine,'',LotNo,RegisteredWhseActivityLine.Quantity,FALSE);
      VerifyWarehouseEntryForWhseJournal(RegisteredWhseActivityLine,'',NewLotNo,-RegisteredWhseActivityLine.Quantity,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,WhseItemTrackingLinesHandler,ItemTrackingSummaryHandler)]
    PROCEDURE RegisterReclassificationWithSerialAndLotNo@105();
    VAR
      ItemTrackingCode@1001 : Record 6502;
      Item@1002 : Record 27;
      RegisteredWhseActivityLine@1007 : Record 5773;
      ItemLedgerEntry@1009 : Record 32;
      SerialNo@1000 : Variant;
      NewSerialNo@1004 : Variant;
      LotNo@1005 : Variant;
      NewLotNo@1006 : Variant;
    BEGIN
      // Setup: Post Warehouse Receipt and Register Put Away.
      Initialize;
      CreateItemTrackingCode(ItemTrackingCode,TRUE,TRUE);
      CreateItem(Item,ItemTrackingCode.Code);
      LibraryVariableStorage.Enqueue(TrackingAction::AssignSerialAndLot);  // TrackingAction used in ItemTrackingLinesPageHandler.
      PostWarehouseReceiptAndRegisterPutAway(LocationWhite.Code,'',Item."No.",'',LibraryRandom.RandInt(5));
      FindRegisteredPutAway(RegisteredWhseActivityLine,Item."No.");

      // Exercise: Create Warehouse Reclassification Journal.
      LibraryVariableStorage.Enqueue(TrackingAction::AssignNewSerialAndLotNo);  // TrackingAction used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // LotNoBlank used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // AssignSerialAndLot used in WhseItemTrackingLinesHandler.
      CreateWarehouseReclassificationJournalAndRegister(RegisteredWhseActivityLine,'');

      // Verify: Warehouse Entry and Item Ledger Entry.
      LibraryVariableStorage.Dequeue(SerialNo);
      LibraryVariableStorage.Dequeue(NewSerialNo);
      LibraryVariableStorage.Dequeue(LotNo);
      LibraryVariableStorage.Dequeue(NewLotNo);
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Transfer,RegisteredWhseActivityLine."Item No.",RegisteredWhseActivityLine."Location Code",
        FALSE,SerialNo,LotNo,0D,-RegisteredWhseActivityLine.Quantity);  // Used 0D for Blank Date.
      VerifyItemLedgerEntry(
        ItemLedgerEntry."Entry Type"::Transfer,RegisteredWhseActivityLine."Item No.",RegisteredWhseActivityLine."Location Code",TRUE,
        NewSerialNo,NewLotNo,0D,RegisteredWhseActivityLine.Quantity);  // Used 0D for Blank Date.
      VerifyWarehouseEntryForWhseJournal(
        RegisteredWhseActivityLine,RegisteredWhseActivityLine."Serial No.",RegisteredWhseActivityLine."Lot No.",
        RegisteredWhseActivityLine.Quantity,FALSE);
      VerifyWarehouseEntryForWhseJournal(RegisteredWhseActivityLine,NewSerialNo,NewLotNo,-RegisteredWhseActivityLine.Quantity,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE CalculateInventoryOnWarehousePhysicalInventoryJournalWithLot@97();
    VAR
      ItemTrackingCode@1008 : Record 6502;
      Item@1007 : Record 27;
      PurchaseHeader@1006 : Record 38;
      WarehouseReceiptLine@1005 : Record 7317;
      WarehouseJournalLine@1004 : Record 7311;
      LotNo@1003 : Variant;
      LotNo2@1002 : Variant;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create and Post Warehouse Receipt.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateItem(Item,ItemTrackingCode.Code);
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationWhite.Code,'',Item."No.",FALSE,Quantity);
      LibraryVariableStorage.Enqueue(TrackingAction::AssignMultipleLotNo);  // TrackingAction used in ItemTrackingLinesPageHandler.
      CreateAndPostWarehouseReceipt(WarehouseReceiptLine,PurchaseHeader,'',TRUE);  // Post Warehouse Receipt with Tracking.

      // Exercise: Calculate Inventory on Warehouse Physical Journal.
      RunWarehouseCalculateInventory(WarehouseJournalLine,'',LocationWhite.Code,Item."No.");

      // Verify: Warehouse Physical Journal Line.
      LibraryVariableStorage.Dequeue(LotNo);
      LibraryVariableStorage.Dequeue(LotNo2);
      VerifyWarehousePhysicalJournalLineForLot(WarehouseJournalLine,LotNo,Item."No.",Quantity / 2);  // Value Required for Test.
      VerifyWarehousePhysicalJournalLineForLot(WarehouseJournalLine,LotNo2,Item."No.",Quantity / 2); // Value Required for Test.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE DeleteBinContentWithFlowFilter@104();
    VAR
      ItemTrackingCode@1000 : Record 6502;
      Item@1001 : Record 27;
      ItemJournalLine@1002 : Record 83;
      ItemLedgerEntry@1003 : Record 32;
    BEGIN
      // Setup.
      Initialize;
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE); // Assign Lot No.
      CreateItem(Item,ItemTrackingCode.Code);
      LibraryVariableStorage.Enqueue(TrackingAction::AssignLotNo);  // AssignLotNo for Page Handler - ItemTrackingLinesPageHandler.
      CreateAndPostItemJournalLineWithBinAndTracking(ItemJournalLine,Item."No.",Item."Base Unit of Measure",TRUE);

      // Exercise: Delete Bin Content.
      FindItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Entry Type"::"Positive Adjmt.",LocationSilver.Code,Item."No.");
      ASSERTERROR DeleteBinContent(
          ItemJournalLine."Location Code",ItemJournalLine."Bin Code",ItemJournalLine."Item No.",ItemLedgerEntry."Lot No.");

      // Verify: Verify Error while Deleting Bin Content.
      Assert.ExpectedError(BinContentError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,CalculateInventoryPageHandler)]
    PROCEDURE ErrorChangingLocationCodeOnPhysicalInventoryJournal@111();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1003 : Record 38;
      PhysInventoryJournal@1009 : TestPage 392;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Register Put Away from Warehouse Receipt using Purchase Order with Item Tracking.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);
      CreateItemWithItemTrackingCode(Item,FALSE,TRUE);  // Create Item with Lot.
      LibraryVariableStorage.Enqueue(TrackingAction::AssignLotNo);  // TrackingAction used in ItemTrackingLinesPageHandler.
      RegisterPutAwayFromWarehouseReceiptUsingPurchaseOrderWithItemTracking(PurchaseHeader,Item."No.",Quantity,TRUE);

      // Exercise: Change Location Code on Physical Inventory Journal Page.
      CalculateInventoryOnPhysicalInventoryJournalPage(PhysInventoryJournal,Item."No.");
      ASSERTERROR PhysInventoryJournal."Location Code".SETVALUE(LocationSilver.Code);

      // Verify: Error message for new Location Code.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,LocationCodeErrorOnPhysicalInventoryJournal) > 0,GETLASTERRORTEXT);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryHandler)]
    PROCEDURE ErrorChangingNewLotNoOnItemReclassificationJournal@109();
    BEGIN
      Initialize;
      ItemReclassificationErrorWithNewLotNoAndNewSerialNo(FALSE,TRUE,TrackingAction::AssignLotNo,TrackingAction::SelectEntriesWithLot);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryHandler)]
    PROCEDURE ErrorChangingNewSerialNoOnItemReclassificationJournal@126();
    BEGIN
      Initialize;
      ItemReclassificationErrorWithNewLotNoAndNewSerialNo(
        TRUE,FALSE,TrackingAction::AssignSerialNo,TrackingAction::SelectEntriesWithNewSerialNo);
    END;

    LOCAL PROCEDURE ItemReclassificationErrorWithNewLotNoAndNewSerialNo@110(Serial@1001 : Boolean;Lot@1000 : Boolean;TrackingAction@1002 : ' ,VerifyTracking,AssignLotNo,AssistEdit,AssignSerialNo,AssitEditNewSerialNoExpDate,AssignMultipleLotNo,MultipleExpirationDate,SelectEntries,AssitEditSerialNoAndRemoveExpDate,EditSerialNo,AssitEditLotNo,AssitEditNewLotNoExpDate,AssignSerialAndLot,AssignNewSerialAndLotNo,SelectEntriesWithLot,SelectEntriesWithNewSerialNo';SelectTrackingAction@1003 : ' ,VerifyTracking,AssignLotNo,AssistEdit,AssignSerialNo,AssitEditNewSerialNoExpDate,AssignMultipleLotNo,MultipleExpirationDate,SelectEntries,AssitEditSerialNoAndRemoveExpDate,EditSerialNo,AssitEditLotNo,AssitEditNewLotNoExpDate,AssignSerialAndLot,AssignNewSerialAndLotNo,SelectEntriesWithLot,SelectEntriesWithNewSerialNo');
    VAR
      PurchaseHeader@1007 : Record 38;
      Item@1006 : Record 27;
      ItemJournalLine@1005 : Record 83;
      Quantity@1004 : Decimal;
    BEGIN
      // Setup: Register Put Away from Warehouse Receipt using Purchase Order with Item Tracking.
      Quantity := LibraryRandom.RandInt(10);
      CreateItemWithItemTrackingCode(Item,Serial,Lot);
      LibraryVariableStorage.Enqueue(TrackingAction);  // TrackingAction used in ItemTrackingLinesPageHandler.
      RegisterPutAwayFromWarehouseReceiptUsingPurchaseOrderWithItemTracking(PurchaseHeader,Item."No.",Quantity,TRUE);

      // Exercise: Change New Lot No or New Serial No on Item Reclassification Journal and capture error.
      LibraryVariableStorage.Enqueue(SelectTrackingAction);  // TrackingAction used in ItemTrackingLinesPageHandler.
      ASSERTERROR CreateItemReclassJournalLine(ItemJournalLine,Item."No.",LocationWhite.Code,LocationWhite.Code,'',TRUE,Quantity);

      // Verify: Error message on Item Tracking Line.
      IF Lot THEN
        Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ItemReclassificationErrorWithNewLotNo) > 0,GETLASTERRORTEXT)
      ELSE
        Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ItemReclassificationErrorWithNewSerialNo) > 0,GETLASTERRORTEXT);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE RegisterWhseItemJnlWithoutNoSeriesInWhseJnlBatch@121();
    VAR
      Bin@1002 : Record 7354;
      Item@1003 : Record 27;
      WarehouseJournalTemplate@1001 : Record 7309;
      WarehouseJournalLine@1000 : Record 7311;
      WarehouseJournalBatch@1005 : Record 7310;
      WarehouseEntry@1006 : Record 7312;
      WhseItemJournal@1004 : TestPage 7324;
    BEGIN
      // Register Warehouse Journal Line for multiple times with blank No. Series in Whse. Journal Batch. Verify User ID is filled in Warehouse Entry.

      // Setup: Create Whse. Journal Batch with blank No. Series. Create Whse. Journal Line and register it.
      Initialize;
      FindBin(Bin,LocationWhite.Code,TRUE);
      CreateWarehouseJournalAndRegister(
        WarehouseJournalLine,Bin,WarehouseJournalTemplate.Type::Item,LibraryInventory.CreateItem(Item),
        LibraryRandom.RandDec(100,2),FALSE);

      // Find the Journal Batch since the Journal Batch Name will be updated after the first journal line is registered.
      FindWarehouseJournalBatch(WarehouseJournalBatch,WarehouseJournalLine."Journal Template Name",''); // Blank for No. Series

      // Open Whse. Item Journal page and create Whse. Item Journal Line
      CreateWhseItemJournalFromPage(WhseItemJournal,Bin,WarehouseJournalBatch.Name,Item."No.",LibraryRandom.RandDec(100,2));

      // Exercise: Register Whse. Item Journal Line
      LibraryVariableStorage.Enqueue(RegisterJournalLines); // Enqueue for ConfirmHandler.
      LibraryVariableStorage.Enqueue(JournalLinesRegistered); // Enqueue for MessageHandler.
      WhseItemJournal.Action34.INVOKE; // Invoke Register Button

      // Verify: User ID is filled in Warehouse Entries.
      FindWarehouseEntry(WarehouseEntry,WarehouseJournalBatch.Name,WarehouseEntry."Entry Type"::"Positive Adjmt.",Item."No.");
      WarehouseEntry.TESTFIELD("User ID",WarehouseEmployee."User ID");
      FindWarehouseEntry(WarehouseEntry,WarehouseJournalBatch.Name,WarehouseEntry."Entry Type"::"Negative Adjmt.",Item."No.");
      WarehouseEntry.TESTFIELD("User ID",WarehouseEmployee."User ID");
    END;

    [Test]
    [HandlerFunctions(WhseJournalBatchesListHandler,WhseCalculateInventoryRequestPageHandler)]
    PROCEDURE CalculateInventoryWithItemsNotOnInventoryAndZoneFilter@129();
    VAR
      Bin@1000 : Record 7354;
      WhsePhysInvtJournal@1003 : TestPage 7326;
      ItemNo@1002 : Code[20];
    BEGIN
      // Verify Warehouse Physical Journal Line is suggested when Calculate Inventory With "Items Not On Inventory" and Zone Filter for Item (exist Warehouse Entries but the actual Quantity is 0 on bin).

      // Setup: Create Item, Register Put away using Purchase Order.
      // Calculate Inventory and register Whse. Phys. Invt. Journal with updating Qty. (Phys. Inventory) to 0, and post adjustment in Item Jounal.
      ItemNo := AdjustInventoryToZeroAfterAddInventoryForItem(Bin);

      // Exercise: Calculate Inventory on Warehouse Physical Journal, set filter Zone Filter.
      CalculateInventoryOnWhsePhysInvtJournalPage(WhsePhysInvtJournal,TRUE,ItemNo,Bin."Zone Code",''); // "Items not on Inventory" = TRUE, call WhseCalculateInventoryRequestPageHandler.

      // Verify: Verify Whse. Phys. Journal Line is suggested and the Qty. Calculated is correct.
      VerifyWhsePhysJournalLine(Bin."Zone Code",Bin.Code,ItemNo,0);
    END;

    [Test]
    [HandlerFunctions(WhseJournalBatchesListHandler,WhseCalculateInventoryRequestPageHandler)]
    PROCEDURE CalculateInventoryWithItemsNotOnInventoryAndBinFilter@130();
    VAR
      Bin@1000 : Record 7354;
      WhsePhysInvtJournal@1003 : TestPage 7326;
      ItemNo@1002 : Code[20];
    BEGIN
      // Verify Warehouse Physical Journal Line is suggested when Calculate Inventory With "Items Not On Inventory" and Bin Filter for Item (exist Warehouse Entries but the actual Quantity is 0 on bin).

      // Setup: Create Item, Register Put away using Purchase Order.
      // Calculate Inventory and register Whse. Phys. Invt. Journal with updating Qty. (Phys. Inventory) to 0, and post adjustment in Item Jounal.
      ItemNo := AdjustInventoryToZeroAfterAddInventoryForItem(Bin);

      // Exercise: Calculate Inventory on Warehouse Physical Journal, set filter Bin Filter.
      CalculateInventoryOnWhsePhysInvtJournalPage(WhsePhysInvtJournal,TRUE,ItemNo,'',Bin.Code); // "Items not on Inventory" = TRUE, call WhseCalculateInventoryRequestPageHandler.

      // Verify: Verify Whse. Phys. Journal Line is suggested and the Qty. Calculated is correct.
      VerifyWhsePhysJournalLine(Bin."Zone Code",Bin.Code,ItemNo,0);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesHandler)]
    PROCEDURE RegisteringWhseJournalLineChecksBinContentFilteringByLotNo@135();
    VAR
      Bin@1003 : Record 7354;
      BinContent@1006 : Record 7302;
      WarehouseJournalLine@1004 : Record 7311;
      WarehouseJournalBatch@1009 : Record 7310;
      ItemNo@1005 : Code[20];
      Quantity@1000 : Decimal;
      WarehouseJournalTemplateType@1001 : 'Item,Physical Inventory,Reclassification';
    BEGIN
      // [FEATURE] [Wharehouse Item Journal] [Bin Content] [Item Tracking]
      // [SCENARIO 362621] Registering Whse Journal Line includes BinContent check filtering by "Lot No"
      Initialize;
      Quantity := LibraryRandom.RandInt(10);

      // [GIVEN] Bin with Content for Item with Tracking
      ItemNo := CreateBinWithContentForItem(Bin,BinContent);

      // [GIVEN] Create and register Whse Journal Line with Positive Adjustment of Quantity = "Q1" on Lot "L" for Item
      CreateWarehouseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplateType::Item,Bin."Location Code");
      CreateWhseJournalLineWithTracking(
        WarehouseJournalLine,WarehouseJournalBatch,Bin,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",Bin."Location Code",TRUE);

      // [GIVEN] Create Pick for Item of Quantity = "Q2";
      CreateWhseActivityLineForPick(BinContent); // MOCK Pick for quantity = "Q2"

      // [GIVEN] Create Whse Journal Line with Negative Adjustment of Quantity = "-Q1" on Lot "L" for Item
      CreateWhseJournalLineWithTracking(
        WarehouseJournalLine,WarehouseJournalBatch,Bin,WarehouseJournalLine."Entry Type"::"Negative Adjmt.",ItemNo,-Quantity);

      // [WHEN] Register Whse Journal Line with negative Quantity
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",Bin."Location Code",TRUE);

      // [THEN] Bin Content is deleted
      Assert.IsFalse(BinContent.FIND,BinContentErr);
    END;

    [Test]
    PROCEDURE RegisteringWhseJournalLineThowsErrorIfQuantityIsNotSufficient@125();
    VAR
      Bin@1003 : Record 7354;
      BinContent@1006 : Record 7302;
      WarehouseJournalLine@1004 : Record 7311;
      WarehouseJournalBatch@1009 : Record 7310;
      Item@1002 : Record 27;
      Quantity@1000 : Decimal;
      WarehouseJournalTemplateType@1001 : 'Item,Physical Inventory,Reclassification';
    BEGIN
      // [FEATURE] [Wharehouse Item Journal] [Bin Content]
      // [SCENARIO 362621] Registering Whse Journal Line thows Error if Quantity is not sufficient for negative admt. without Tracking
      Initialize;
      Quantity := LibraryRandom.RandInt(10);

      // [GIVEN] Bin with Content for Item
      LibraryInventory.CreateItem(Item);
      FindBin(Bin,LocationWhite.Code,TRUE);
      LibraryWarehouse.CreateBinContent(
        BinContent,Bin."Location Code",Bin."Zone Code",Bin.Code,Item."No.",'',Item."Base Unit of Measure");

      // [GIVEN] Create and register Whse Journal Line with Positive Adjustment of Quantity = "Q1"
      CreateWarehouseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplateType::Item,Bin."Location Code");
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",
        Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);

      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",Bin."Location Code",TRUE);

      // [GIVEN] Create Pick for Item of Quantity = "Q2"
      CreateWhseActivityLineForPick(BinContent); // MOCK Pick for Quantity = "Q2"

      // [GIVEN] Create Whse Journal Line with Negative Adjustment of Quantity = "Q1" without Tracking.
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",
        Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Negative Adjmt.",Item."No.",-Quantity);

      // [WHEN] Register Whse Journal Line with negative Quantity
      ASSERTERROR LibraryWarehouse.RegisterWhseJournalLine(
          WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",Bin."Location Code",TRUE);

      // [THEN] Error is thrown while checking Quantity in Bin Content
      Assert.ExpectedError(STRSUBSTNO(BinContentQuantityErr));
    END;

    [Test]
    PROCEDURE UnitOfMeasureRequiredInWhseJournalIfItemNoIsFilled@131();
    VAR
      WhseJnlLine@1000 : Record 7311;
    BEGIN
      // [FEATURE] [Warehouse Item Journal] [UT]
      // [SCENARIO 372282] Field "Unit of Measure Code" in warehouse journal cannot be empty if "Item No." is not empty

      // [GIVEN] Warehouse journal line with "Item No."
      WhseJnlLine.INIT;
      WhseJnlLine."Item No." := LibraryUtility.GenerateGUID;

      // [WHEN] Set "Unit of Measure Code" to empty string
      ASSERTERROR WhseJnlLine.VALIDATE("Unit of Measure Code",'');

      // [THEN] Error mesage: "Unit of Measure Code must have a value"
      Assert.ExpectedError(STRSUBSTNO(UnitOfMeasureMustHaveValueErr,WhseJnlLine.FIELDCAPTION("Unit of Measure Code")));
      Assert.ExpectedErrorCode(TestFieldErrorErr);
    END;

    [Test]
    PROCEDURE UnitOfMeasureNotRequiredInWhseJournalIfItemNoNotFilled@138();
    VAR
      WarehouseJournalTemplate@1002 : Record 7309;
      WhseJnlLine@1000 : Record 7311;
      Bin@1001 : Record 7354;
    BEGIN
      // [FEATURE] [Warehouse Item Journal]
      // [SCENARIO 372282] Field "Unit of Measure Code" in warehouse journal can be empty if "Item No." is empty

      // [GIVEN] Warehouse journal line with empty "Item No."
      Initialize;
      FindBin(Bin,LocationWhite.Code,TRUE);
      CreateWarehouseJournalLine(WhseJnlLine,Bin,WarehouseJournalTemplate.Type::Item,'',0,FALSE);

      // [WHEN] Set "Unit of Measure Code" to empty string
      WhseJnlLine.VALIDATE("Unit of Measure Code",'');
      // [THEN] Empty "Unit os Measure Code" is accepted
      WhseJnlLine.TESTFIELD("Unit of Measure Code",'');
    END;

    [Test]
    PROCEDURE PhysicalInventorySkipsILEOnDeletedLocation@179();
    VAR
      Location@1000 : ARRAY [2] OF Record 14;
      Item@1001 : Record 27;
      ItemJournalLine@1003 : Record 83;
      Qty@1004 : Decimal;
    BEGIN
      // [FEATURE] [Physical Inventory Journal]
      // [SCENARIO] When running physical inventory calculation, item ledger entries on deleted location should be skipped

      // [GIVEN] 2 locations "L1" and "L2"
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location[1]);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location[2]);

      // [GIVEN] Post positive adjustment and negative adjustment on location "L1", and positive adjustment on "L2". So there is inventory left only on "L2".
      LibraryInventory.CreateItem(Item);
      Qty := LibraryRandom.RandDec(100,2);
      LibraryPatterns.POSTPositiveAdjustment(Item,Location[1].Code,'','',Qty,WORKDATE,Item."Unit Cost");
      LibraryPatterns.POSTPositiveAdjustment(Item,Location[2].Code,'','',Qty,WORKDATE,Item."Unit Cost");
      LibraryPatterns.POSTNegativeAdjustment(Item,Location[1].Code,'','',Qty,WORKDATE,Item."Unit Cost");

      // [GIVEN] Delete location "L1"
      Location[1].DELETE(TRUE);

      // [WHEN] Run "Calculate Physical Inventory" for both locations
      RunReportCalculateInventory(ItemJournalLine,Item."No.",'','',TRUE);

      // [THEN] No item journal lines created for location "L1"
      ItemJournalLine.SETRANGE("Item No.",Item."No.");
      ItemJournalLine.SETRANGE("Location Code",Location[1].Code);
      Assert.RecordIsEmpty(ItemJournalLine);

      // [THEN] 1 item journal line created for location "L2"
      ItemJournalLine.SETRANGE("Location Code",Location[2].Code);
      Assert.AreEqual(1,ItemJournalLine.COUNT,ItemJnlLineMustExistErr);
    END;

    [Test]
    PROCEDURE PhysicalInventoryOnBlankLocationCode@139();
    VAR
      Item@1001 : Record 27;
      ItemJournalLine@1003 : Record 83;
    BEGIN
      // [FEATURE] [Physical Inventory Journal]
      // [SCENARIO] Physical inventory journal line should be created when runnning "Calculate Physical Inventory" with blank location code

      // [GIVEN] Item "I" with inventory on hand on blank location
      LibraryInventory.CreateItem(Item);
      LibraryPatterns.POSTPositiveAdjustment(Item,'','','',1,WORKDATE,Item."Unit Cost");

      // [WHEN] Run "Calculate Physical Inventory"
      RunReportCalculateInventory(ItemJournalLine,Item."No.",'','',TRUE);

      // [THEN] 1 physical inventory journal line is created
      ItemJournalLine.SETRANGE("Item No.",Item."No.");
      ItemJournalLine.SETRANGE("Location Code",'');
      Assert.AreEqual(1,ItemJournalLine.COUNT,ItemJnlLineMustExistErr);
    END;

    [Test]
    PROCEDURE RegisteringWhseItemJournalWithBlankItemNo@86();
    VAR
      WarehouseJournalLine@1001 : Record 7311;
      WarehouseJournalTemplate@1000 : Record 7309;
      Bin@1003 : Record 7354;
    BEGIN
      // [FEATURE] [Wharehouse Item Journal]
      // [SCENARIO 376074] Registering Wharehouse Item Journal with blank "Item No." should be prohibited
      Initialize;

      // [GIVEN] Wharehouse Journal Line with blank "Item No."
      FindBin(Bin,LocationWhite.Code,TRUE);
      CreateWarehouseJournalLine(WarehouseJournalLine,Bin,WarehouseJournalTemplate.Type::Item,'',LibraryRandom.RandDec(10,2),FALSE);

      // [WHEN] Register Wharehouse Journal Line
      ASSERTERROR LibraryWarehouse.RegisterWhseJournalLine(
          WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",LocationWhite.Code,TRUE);

      // [THEN] Error is thrown: "Item No. must have a value in Warehouse Journal Line"
      Assert.ExpectedError(ItemNoErr);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE WhseJournalNotAffectingReservationPostedWithoutConfirmation@136();
    VAR
      Item@1001 : Record 27;
      WarehouseJournalTemplate@1003 : Record 7309;
      WarehouseJournalLine@1002 : Record 7311;
      Bin@1004 : Record 7354;
      Quantity@1000 : Decimal;
      DeltaQty@1005 : Decimal;
    BEGIN
      // [FEATURE] [Reservation]
      // [SCENARIO 377903] Warehouse journal is posted without error when warehouse stock is reserved if journal line being posted does not affect reservation

      // [GIVEN] Post item stock on a warehouse location "L", stock quantity = "X"
      // [GIVEN] Create a sales order, quantity = "X" / 2, and reserve sales line
      Quantity := LibraryRandom.RandIntInRange(100,200);
      CreateReservedStockOnWarehouse(Bin,Item,Quantity * 2,Quantity);

      // [GIVEN] Create warehouse journal batch "B1", create journal line with quantity = -"X"
      CreateWarehouseJournalLine(WarehouseJournalLine,Bin,WarehouseJournalTemplate.Type::Item,Item."No.",-Quantity * 2,FALSE);
      // [GIVEN] Create another warehouse journal batch "B2", and create a journal line in this batch with quantity = "X" / 2
      DeltaQty := LibraryRandom.RandInt(50);
      CreateWarehouseJournalLine(
        WarehouseJournalLine,Bin,WarehouseJournalTemplate.Type::Item,Item."No.",Quantity - DeltaQty,FALSE);

      // [WHEN] Post batch "B2"
      LibraryVariableStorage.Enqueue(RegisterJournalLines);
      LibraryVariableStorage.Enqueue(JournalLinesRegistered);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",Bin."Location Code",FALSE);

      // [THEN] Journal batch is posted without additional user confirmation
      VerifyBinContent(Bin,Item."No.",Quantity * 3 - DeltaQty);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE WhseJournalAffectingReservationRequiresConfirmation@157();
    VAR
      Item@1001 : Record 27;
      WarehouseJournalTemplate@1003 : Record 7309;
      WarehouseJournalLine@1002 : Record 7311;
      Bin@1004 : Record 7354;
      Quantity@1000 : Decimal;
    BEGIN
      // [FEATURE] [Reservation]
      // [SCENARIO 377903] Confirmation is required when posting warehouse journal if journal line being posted affects reservation

      // [GIVEN] Post item stock on a warehouse location "L", stock quantity = "X"
      // [GIVEN] Create a sales order, quantity = "X" / 2, and reserve sales line
      Quantity := LibraryRandom.RandIntInRange(100,200);
      CreateReservedStockOnWarehouse(Bin,Item,Quantity * 2,Quantity);

      // [GIVEN] Create warehouse journal batch, create journal line with quantity = -"X"
      CreateWarehouseJournalLine(
        WarehouseJournalLine,Bin,WarehouseJournalTemplate.Type::Item,Item."No.",-Quantity - LibraryRandom.RandInt(100),FALSE);

      // [WHEN] Post journal batch
      LibraryVariableStorage.Enqueue(RegisterJournalLines);
      LibraryVariableStorage.Enqueue(ReservationExistMsg);
      LibraryVariableStorage.Enqueue(JournalLinesRegistered);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",Bin."Location Code",FALSE);

      // [THEN] Confirmation is requested
      // Confirmation request is verified in ConfirmHandler
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,ItemTrackingLinesHandler)]
    PROCEDURE LotFilterIsAppliedToWhseAdjustmentCalculation@140();
    VAR
      Item@1006 : Record 27;
      ItemJournalBatch@1002 : Record 233;
      ItemJournalLine@1001 : Record 83;
      LotOrSerialNos@1003 : ARRAY [5] OF Code[20];
      ItemTrackingMode@1000 : 'Lot No,Serial No';
    BEGIN
      // [FEATURE] [Item Tracking] [Warehouse Adjustment]
      // [SCENARIO 381478] "Lot No. Filter" from Item is applied when running "Calculate Whse. Adjustment" job.
      Initialize;

      // [GIVEN] Lot-tracked Item.
      // [GIVEN] Location with "Directed Put-away and Pick".
      // [GIVEN] Several Warehouse Journal Lines with lot tracking are posted for Item. Lot nos. = "L1".."Ln". Quantity on each line = 1.
      CreateAndRegisterWhseJournalLineWithTracking(Item,LotOrSerialNos,ItemTrackingMode::"Lot No");

      // [WHEN] Calculate Whse. Adjustment with "Lot No. Filter" = "L1".
      Item.SETRANGE("Lot No. Filter",LotOrSerialNos[1]);
      CalculateWhseAdjustment(ItemJournalBatch,Item);

      // [THEN] One Item Journal Line is created. Quantity = 1.
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,Item."No.");
      Assert.RecordCount(ItemJournalLine,1);
      ItemJournalLine.TESTFIELD(Quantity,1);

      // [THEN] One Item Tracking Line with lot "L1" is created for the Item Journal Line.
      // verification is done in ItemTrackingLinesHandler
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Lot No");
      LibraryVariableStorage.Enqueue(LotOrSerialNos[1]);
      ItemJournalLine.OpenItemTrackingLines(FALSE);
    END;

    [Test]
    [HandlerFunctions(WhseItemTrackingLinesPageHandler,ItemTrackingLinesHandler)]
    PROCEDURE SerialNoFilterIsAppliedToWhseAdjustmentCalculation@142();
    VAR
      Item@1004 : Record 27;
      ItemJournalBatch@1003 : Record 233;
      ItemJournalLine@1002 : Record 83;
      LotOrSerialNos@1001 : ARRAY [5] OF Code[20];
      ItemTrackingMode@1000 : 'Lot No,Serial No';
    BEGIN
      // [FEATURE] [Item Tracking] [Warehouse Adjustment]
      // [SCENARIO 381478] "Serial No. Filter" from Item is applied when running "Calculate Whse. Adjustment" job.
      Initialize;

      // [GIVEN] Serial No.-tracked Item.
      // [GIVEN] Location with "Directed Put-away and Pick".
      // [GIVEN] Several Warehouse Journal Lines with lot tracking are posted for Item. Serial nos. = "S1".."Sn". Quantity on each line = 1.
      CreateAndRegisterWhseJournalLineWithTracking(Item,LotOrSerialNos,ItemTrackingMode::"Serial No");

      // [WHEN] Calculate Whse. Adjustment with "Serial No. Filter" = "S1".
      Item.SETRANGE("Serial No. Filter",LotOrSerialNos[1]);
      CalculateWhseAdjustment(ItemJournalBatch,Item);

      // [THEN] One Item Journal Line is created. Quantity = 1.
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,Item."No.");
      Assert.RecordCount(ItemJournalLine,1);
      ItemJournalLine.TESTFIELD(Quantity,1);

      // [THEN] One Item Tracking Line with serial no. "S1" is created for the Item Journal Line.
      // verification is done in ItemTrackingLinesHandler
      LibraryVariableStorage.Enqueue(ItemTrackingMode::"Serial No");
      LibraryVariableStorage.Enqueue(LotOrSerialNos[1]);
      ItemJournalLine.OpenItemTrackingLines(FALSE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ResidualQtyBaseInBinIsWrittenOffWhenQtyIsZeroedOutByWhseJournal@141();
    VAR
      Bin@1000 : Record 7354;
      WarehouseJournalTemplate@1003 : Record 7309;
      WarehouseJournalBatch@1007 : Record 7310;
      ItemNo@1008 : Code[20];
      UnitOfMeasureCode@1009 : Code[10];
      QtyInUOM@1001 : Decimal;
    BEGIN
      // [FEATURE] [Rounding]
      // [SCENARIO 382095] When quantity in bin is turned to zero by registering warehouse journal, residual base quantity should be zeroed out too.
      Initialize;

      // [GIVEN] Item "I" with alternate unit of measure "PACK" has contains 3 base units ("pcs").
      QtyInUOM := 3;
      CreateItemWithAlternateUnitOfMeasure(ItemNo,UnitOfMeasureCode,QtyInUOM);

      // [GIVEN] Positive warehouse adjustment of item "I" is registered to bin "B". Quantity = 0.33333 PACK. Base quantity = 1 pc.
      FindBin(Bin,LocationWhite.Code,TRUE);
      CreateWarehouseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Type::Item,Bin."Location Code");
      CreateAndRegisterWhseJournalWithAlternateUOM(
        WarehouseJournalBatch,ItemNo,UnitOfMeasureCode,Bin,ROUND(1 / QtyInUOM,0.00001),1);

      // [WHEN] Register negative warehouse adjustment of item "I" from bin "B". Quantity = -0.33333 PACK. Base quantity = -0.99999 pcs.
      CreateAndRegisterWhseJournalWithAlternateUOM(
        WarehouseJournalBatch,ItemNo,UnitOfMeasureCode,Bin,-ROUND(1 / QtyInUOM,0.00001),-ROUND(1 / QtyInUOM,0.00001) * QtyInUOM);

      // [THEN] Bin "B" contains 0 pcs and 0 PACKs of item "I".
      VerifyWarehouseEntryForZeroQty(ItemNo,Bin.Code);

      // [THEN] Adjustment bin contains 0 pcs and 0 PACKs of item "I".
      VerifyWarehouseEntryForZeroQty(ItemNo,LocationWhite."Adjustment Bin Code");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ExcessivelyWrittenOffQtyBaseByWhseJournalIsZeroedOut@1000();
    VAR
      Bin@1005 : Record 7354;
      WarehouseJournalTemplate@1004 : Record 7309;
      WarehouseJournalBatch@1003 : Record 7310;
      ItemNo@1002 : Code[20];
      UnitOfMeasureCode@1001 : Code[10];
      QtyInUOM@1000 : Decimal;
    BEGIN
      // [FEATURE] [Rounding]
      // [SCENARIO 382095] When quantity in bin is turned to zero by registering warehouse journal, excessively written off base quantity should be zeroed out too.
      Initialize;

      // [GIVEN] Item "I" with alternate unit of measure "PACK" has contains 3 base units ("pcs").
      QtyInUOM := 3;
      CreateItemWithAlternateUnitOfMeasure(ItemNo,UnitOfMeasureCode,QtyInUOM);

      // [GIVEN] Positive warehouse adjustment of item "I" is registered to bin "B". Quantity = 0.33333 PACK. Base quantity = 0.99999 pc.
      FindBin(Bin,LocationWhite.Code,TRUE);
      CreateWarehouseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Type::Item,Bin."Location Code");
      CreateAndRegisterWhseJournalWithAlternateUOM(
        WarehouseJournalBatch,ItemNo,UnitOfMeasureCode,Bin,ROUND(1 / QtyInUOM,0.00001),ROUND(1 / QtyInUOM,0.00001) * QtyInUOM);

      // [WHEN] Register negative warehouse adjustment of item "I" from bin "B". Quantity = -0.33333 PACK. Base quantity = -1 pcs.
      CreateAndRegisterWhseJournalWithAlternateUOM(
        WarehouseJournalBatch,ItemNo,UnitOfMeasureCode,Bin,-ROUND(1 / QtyInUOM,0.00001),-1);

      // [THEN] Bin "B" contains 0 pcs and 0 PACKs of item "I".
      VerifyWarehouseEntryForZeroQty(ItemNo,Bin.Code);

      // [THEN] Adjustment bin contains 0 pcs and 0 PACKs of item "I".
      VerifyWarehouseEntryForZeroQty(ItemNo,LocationWhite."Adjustment Bin Code");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BinContentCreatedByWhseJnlRegisteringHasNoMaxQtyLimit@185();
    VAR
      WarehouseJournalTemplate@1001 : Record 7309;
      WarehouseJournalLine@1000 : Record 7311;
      Location@1003 : Record 14;
      Bin@1004 : Record 7354;
      BinContent@1005 : Record 7302;
    BEGIN
      // [FEATURE] [Open Shop Floor Bin] [Bin] [Bin Content]
      // [SCENARIO 201466] Bin content automatically created by the warehouse journal registering routine, should not have the Max. Qty. limit
      Initialize;

      // [GIVEN] Location "L" with directed put-away and pick
      LibraryWarehouse.CreateFullWMSLocation(Location,1);
      FindBin(Bin,Location.Code,FALSE);
      // [GIVEN] Empty bin "B" configured as the open shop floor bin for the location "L"
      Location.VALIDATE("Open Shop Floor Bin Code",Bin.Code);
      Location.MODIFY(TRUE);

      // [WHEN] Post positive adjustment on bin "B" via warehouse journal
      CreateWarehouseJournalAndRegister(
        WarehouseJournalLine,Bin,WarehouseJournalTemplate.Type::Item,LibraryInventory.CreateItemNo,
        LibraryRandom.RandDec(100,2),FALSE);

      // [THEN] Bin content for the bin "B" has "Max. Qty." = 0, "Fixed" = TRUE
      BinContent.SETRANGE("Location Code",Location.Code);
      BinContent.SETRANGE("Bin Code",Bin.Code);
      BinContent.FINDFIRST;
      BinContent.TESTFIELD("Max. Qty.",0);
      BinContent.TESTFIELD(Fixed,TRUE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,DummyMessageHandler)]
    PROCEDURE ReservationBindingAfterPickingProdOrderComponentLinkedToPurchase@151();
    VAR
      Location@1000 : Record 14;
      Bin@1014 : Record 7354;
      ComponentItem@1005 : Record 27;
      ProductionOrder@1006 : Record 5405;
      PurchaseHeader@1007 : Record 38;
      WarehouseActivityLine@1012 : Record 5767;
      ReservationEntry@1001 : Record 337;
      LotNo@1008 : Code[20];
      DemandQty@1002 : Decimal;
    BEGIN
      // [FEATURE] [Order tracking] [Pick] [Reservation]
      // [SCENARIO 201721] Item tracking binding should be changed from purchase to item ledger when warehouse pick is registered

      Initialize;

      // [GIVEN] Location with shipment and pick required
      CreateComponentsLocationWithBin(Location,Bin);

      // [GIVEN] Lot tracked item "CI" with order tracking and action messages enabled
      CreateTrackedItem(ComponentItem);

      // [GIVEN] Production order producing an item "PI" that includes "CI" as a component. Quantity to produce is 5. Due date is 25.01.18
      DemandQty := LibraryRandom.RandInt(99);
      CreateProductionOrderWithComponent(ProductionOrder,ComponentItem."No.",Location.Code,Bin.Code,DemandQty);

      // [GIVEN] Purchase order for component item "CI". Quantity = 5, expected receipt date = 20.01.18
      CreatePurchaseOrderUpdateReceiptDate(
        PurchaseHeader,Location.Code,'',ComponentItem."No.",DemandQty,ProductionOrder."Starting Date");
      // [GIVEN] Post item stock of 5 PCS with lot no. = "L1"
      LotNo := PostItemPositiveAdjmtWithLotTracking(ComponentItem."No.",Location.Code,Bin.Code,DemandQty);

      // [GIVEN] Create a warehouse pick from the production order
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);

      // [GIVEN] Set lot no. = "L1" in warehouse pick lines
      WarehouseActivityLine.SETRANGE("Item No.",ComponentItem."No.");
      WarehouseActivityLine.MODIFYALL("Lot No.",LotNo);

      // [WHEN] Register the warehouse pick
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
        WarehouseActivityLine."Activity Type"::Pick);

      // [THEN] Production order component "CI" is tracked against item ledger.
      VerifyReservationEntry(
        ComponentItem."No.",DATABASE::"Prod. Order Component",ProductionOrder.Status,ProductionOrder."No.",
        ReservationEntry."Reservation Status"::Tracking,-DemandQty,LotNo);
      VerifyReservationEntry(
        ComponentItem."No.",DATABASE::"Item Ledger Entry",0,'',ReservationEntry."Reservation Status"::Tracking,DemandQty,LotNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,DummyMessageHandler)]
    PROCEDURE ReservationBindingAfterPartialPickingProdOrderComponentLinkedToPurchase@200();
    VAR
      Location@1000 : Record 14;
      Bin@1014 : Record 7354;
      ComponentItem@1005 : Record 27;
      ProductionOrder@1006 : Record 5405;
      PurchaseHeader@1007 : Record 38;
      WarehouseActivityLine@1012 : Record 5767;
      ReservationEntry@1001 : Record 337;
      LotNo@1010 : Code[20];
      DemandQty@1003 : Decimal;
      SurplusQty@1002 : Decimal;
    BEGIN
      // [FEATURE] [Order tracking] [Pick] [Reservation]
      // [SCENARIO 201721] Item tracking binding should be changed from purchase to item ledger when item is partially picked and item stock is sufficient to cover the demand

      Initialize;

      // [GIVEN] Location with shipment and pick required
      CreateComponentsLocationWithBin(Location,Bin);

      // [GIVEN] Lot tracked item "CI" with order tracking and action messages enabled
      CreateTrackedItem(ComponentItem);

      // [GIVEN] Production order producing an item "PI" that includes "CI" as a component. Quantity to produce is 5. Due date is 25.01.18
      DemandQty := LibraryRandom.RandIntInRange(10,100);
      SurplusQty := LibraryRandom.RandInt(99);
      CreateProductionOrderWithComponent(ProductionOrder,ComponentItem."No.",Location.Code,Bin.Code,DemandQty);
      // [GIVEN] Purchase order for component item "CI". Quantity = 5, expected receipt date = 20.01.18
      CreatePurchaseOrderUpdateReceiptDate(
        PurchaseHeader,Location.Code,'',ComponentItem."No.",DemandQty,ProductionOrder."Starting Date");

      // [GIVEN] Post item stock of 100 PCS with lot no. = "L1"
      LotNo := PostItemPositiveAdjmtWithLotTracking(ComponentItem."No.",Location.Code,Bin.Code,DemandQty + SurplusQty);
      // [GIVEN] Create a warehouse pick from the production order
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);

      // [GIVEN] Set lot no. = "L1" in warehouse pick lines, set "Qty. to Handle" = 2 to pick partial quantitiy
      WarehouseActivityLine.SETRANGE("Item No.",ComponentItem."No.");
      WarehouseActivityLine.MODIFYALL("Lot No.",LotNo);
      WarehouseActivityLine.MODIFYALL("Qty. to Handle",LibraryRandom.RandInt(DemandQty - 1));

      // [WHEN] Register the warehouse pick
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
        WarehouseActivityLine."Activity Type"::Pick);

      // [THEN] Prod. order consumption is tracked against the item ledger entry. 95 pcs are tracked as surplus quantity. 5 pcs from purchase order are tracked as surplus.
      VerifyReservationEntry(
        ComponentItem."No.",DATABASE::"Prod. Order Component",ProductionOrder.Status,ProductionOrder."No.",
        ReservationEntry."Reservation Status"::Tracking,-DemandQty,LotNo);
      VerifyReservationEntry(
        ComponentItem."No.",DATABASE::"Item Ledger Entry",0,'',ReservationEntry."Reservation Status"::Tracking,DemandQty,LotNo);
      VerifyReservationEntry(
        ComponentItem."No.",DATABASE::"Item Ledger Entry",0,'',ReservationEntry."Reservation Status"::Surplus,SurplusQty,LotNo);
      VerifyReservationEntry(
        ComponentItem."No.",DATABASE::"Purchase Line",PurchaseHeader."Document Type",PurchaseHeader."No.",
        ReservationEntry."Reservation Status"::Surplus,DemandQty,'');
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,DummyMessageHandler)]
    PROCEDURE ReservationBindingAfterPartialPickingProdOrderComponentLinkedToPurchaseInsuffucientStock@201();
    VAR
      Location@1000 : Record 14;
      Bin@1014 : Record 7354;
      ComponentItem@1005 : Record 27;
      ProductionOrder@1006 : Record 5405;
      PurchaseHeader@1007 : Record 38;
      WarehouseActivityLine@1012 : Record 5767;
      ReservationEntry@1001 : Record 337;
      LotNo@1010 : Code[20];
      DemandQty@1003 : Decimal;
      StockQty@1002 : Decimal;
    BEGIN
      // [FEATURE] [Order tracking] [Pick] [Reservation]
      // [SCENARIO 201721] Item tracking binding should be split between purchase and item ledger when item is partially picked and item stock is insufficient to cover the demand

      Initialize;

      // [GIVEN] Location with shipment and pick required
      CreateComponentsLocationWithBin(Location,Bin);

      // [GIVEN] Lot tracked item "CI" with order tracking and action messages enabled
      CreateTrackedItem(ComponentItem);
      // [GIVEN] Production order producing an item "PI" that includes "CI" as a component. Quantity to produce is 5. Due date is 25.01.18
      DemandQty := LibraryRandom.RandIntInRange(50,100);
      StockQty := LibraryRandom.RandInt(30);
      CreateProductionOrderWithComponent(ProductionOrder,ComponentItem."No.",Location.Code,Bin.Code,DemandQty);
      // [GIVEN] Purchase order for component item "CI". Quantity = 5, expected receipt date = 20.01.18
      CreatePurchaseOrderUpdateReceiptDate(
        PurchaseHeader,Location.Code,'',ComponentItem."No.",DemandQty,ProductionOrder."Starting Date");

      // [GIVEN] Post item stock of 2 PCS with lot no. = "L1"
      LotNo := PostItemPositiveAdjmtWithLotTracking(ComponentItem."No.",Location.Code,Bin.Code,StockQty);
      // [GIVEN] Create a warehouse pick from the production order
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);

      // [GIVEN] Set lot no. = "L1" in warehouse pick lines, set "Qty. to Handle" = 2 to pick partial quantitiy
      WarehouseActivityLine.SETRANGE("Item No.",ComponentItem."No.");
      WarehouseActivityLine.MODIFYALL("Lot No.",LotNo);
      WarehouseActivityLine.MODIFYALL("Qty. to Handle",StockQty);

      // [WHEN] Register the warehouse pick
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
        WarehouseActivityLine."Activity Type"::Pick);

      // [THEN] 2 PCS of item "CI" are tracked against the item ledger entry. 3 PCS are tracked against the purchase order.
      VerifyReservationEntry(
        ComponentItem."No.",DATABASE::"Purchase Line",PurchaseHeader."Document Type",PurchaseHeader."No.",
        ReservationEntry."Reservation Status"::Tracking,DemandQty - StockQty,'');
      VerifyReservationEntry(
        ComponentItem."No.",DATABASE::"Purchase Line",PurchaseHeader."Document Type",PurchaseHeader."No.",
        ReservationEntry."Reservation Status"::Surplus,StockQty,'');
      VerifyReservationEntry(
        ComponentItem."No.",DATABASE::"Item Ledger Entry",0,'',ReservationEntry."Reservation Status"::Tracking,StockQty,LotNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,DummyMessageHandler)]
    PROCEDURE ReservEntryUpdatedAfterChangingComponentQtyAndPicking@234();
    VAR
      Location@1000 : Record 14;
      Bin@1014 : Record 7354;
      ComponentItem@1005 : Record 27;
      ProductionOrder@1006 : Record 5405;
      PurchaseHeader@1007 : Record 38;
      ReservationEntry@1011 : Record 337;
      DemandQty@1018 : Decimal;
      StockQty@1019 : Decimal;
      LotNo@1020 : Code[20];
    BEGIN
      // [FEATURE] [Item Tracking] [Order Tracking] [Pick] [Production]
      // [SCENARIO 201717] Reservation entries should be updated when a warehouse pick created from production component is registered after changing component quantity, and initial quantity was picked

      Initialize;

      // [GIVEN] Location with shipment and pick required
      CreateComponentsLocationWithBin(Location,Bin);

      // [GIVEN] Lot tracked item "CI" with order tracking enabled
      CreateTrackedItem(ComponentItem);

      // [GIVEN] Production order producing an item "PI" that includes "CI" as a component. Quantity to produce is 30.
      DemandQty := LibraryRandom.RandInt(30);
      StockQty := LibraryRandom.RandIntInRange(70,100);
      CreateProductionOrderWithComponent(ProductionOrder,ComponentItem."No.",Location.Code,Bin.Code,DemandQty);

      // [GIVEN] Purchase order for component item "CI". Quantity = 30
      CreatePurchaseOrderUpdateReceiptDate(PurchaseHeader,Location.Code,'',ComponentItem."No.",DemandQty,WORKDATE - 5);
      // [GIVEN] Post item stock of 70 PCS with lot no. = "L1"
      LotNo := PostItemPositiveAdjmtWithLotTracking(ComponentItem."No.",Location.Code,Bin.Code,StockQty);

      // [GIVEN] Create and register a warehouse pick from the production order
      CreateAndRegisterWhsePickFromProduction(ProductionOrder,LotNo);

      // [GIVEN] Set "Quantity per" = 2 in production order component. This will double the total demand for the production order.
      UpdateQtyPerInProdOrderComponent(ProductionOrder.Status,ProductionOrder."No.",2);

      // [GIVEN] Create a warehouse pick from the production order
      // [WHEN] Register the warehouse pick
      CreateAndRegisterWhsePickFromProduction(ProductionOrder,LotNo);

      // [THEN] Surplus quantity on item ledger is 10, surplus quantity on purchase order is 30
      VerifyReservationEntry(
        ComponentItem."No.",DATABASE::"Item Ledger Entry",0,'',ReservationEntry."Reservation Status"::Surplus,
        StockQty - DemandQty * 2,LotNo);
      VerifyReservationEntry(
        ComponentItem."No.",DATABASE::"Purchase Line",PurchaseHeader."Document Type",PurchaseHeader."No.",
        ReservationEntry."Reservation Status"::Surplus,DemandQty,'');

      // [THEN] 60 PCS of item "CI" are tracked against item ledger with lot no. "L1"
      VerifyReservationQuantity(
        ReservationEntry."Reservation Status"::Tracking,DATABASE::"Prod. Order Component",ProductionOrder.Status,ProductionOrder."No.",
        LotNo,-DemandQty * 2);
      VerifyReservationQuantity(
        ReservationEntry."Reservation Status"::Tracking,DATABASE::"Item Ledger Entry",0,'',LotNo,DemandQty * 2);
    END;

    LOCAL PROCEDURE Initialize@1();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      CreateLocationSetup;
      NoSeriesSetup;
      isInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"Manufacturing Setup");
    END;

    LOCAL PROCEDURE CalculateAndPostWhseAdjustment@85(Item@1000 : Record 27);
    VAR
      ItemJournalBatch@1002 : Record 233;
    BEGIN
      CalculateWhseAdjustment(ItemJournalBatch,Item);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CalculateWhseAdjustment@50(VAR ItemJournalBatch@1003 : Record 233;VAR Item@1004 : Record 27);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Item,TRUE);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@80(VAR PurchaseHeader@1000 : Record 38;LocationCode@1002 : Code[10];ItemVariant@1006 : Code[10];ItemNo@1003 : Code[20];IsTracking@1005 : Boolean;Quantity@1004 : Decimal);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,LocationCode,ItemVariant,ItemNo,Quantity);
      IF IsTracking THEN
        PurchaseLine.OpenItemTrackingLines;
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLineWithBin@33(VAR ItemJournalLine@1000 : Record 83;ItemNo@1006 : Code[20];UnitOfMeasureCode@1007 : Code[10]);
    BEGIN
      CreateAndPostItemJournalLineWithBinAndTracking(ItemJournalLine,ItemNo,UnitOfMeasureCode,FALSE);  // Item Tracking As False.
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLineWithBinAndTracking@107(VAR ItemJournalLine@1002 : Record 83;ItemNo@1001 : Code[20];UnitOfMeasureCode@1000 : Code[10];ItemTracking@1003 : Boolean);
    VAR
      Bin@1007 : Record 7354;
      BinContent@1006 : Record 7302;
      ItemJournalBatch@1005 : Record 233;
      ItemJournalTemplate@1004 : Record 82;
    BEGIN
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LibraryUtility.GenerateGUID,'','');
      CreateAndUpdateBinContent(BinContent,LocationSilver.Code,Bin.Code,ItemNo,UnitOfMeasureCode);
      CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Item,FALSE);
      CreateItemJournalLineWithItemTracking(
        ItemJournalLine,ItemJournalBatch,Bin,ItemNo,LibraryRandom.RandDec(100,2),ItemTracking);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostWarehouseReceipt@81(VAR WarehouseReceiptLine@1000 : Record 7317;PurchaseHeader@1002 : Record 38;BinCode@1001 : Code[20];IsTracking@1003 : Boolean);
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      IF BinCode <> '' THEN
        UpdateBinOnWarehouseReceiptLine(WarehouseReceiptLine,BinCode);
      IF IsTracking THEN
        WarehouseReceiptLine.OpenItemTrackingLines;
      PostWarehouseReceipt(WarehouseReceiptLine."No.");
    END;

    LOCAL PROCEDURE CreateAndRegisterWhseJournalLineWithTracking@153(VAR Item@1001 : Record 27;VAR LotOrSerialNos@1002 : ARRAY [5] OF Code[20];ItemTrackingMode@1008 : 'Lot No,Serial No');
    VAR
      ItemTrackingCode@1009 : Record 6502;
      Bin@1005 : Record 7354;
      WarehouseJournalBatch@1007 : Record 7310;
      WarehouseJournalLine@1006 : Record 7311;
      i@1000 : Integer;
    BEGIN
      CreateItemTrackingCode(
        ItemTrackingCode,ItemTrackingMode = ItemTrackingMode::"Serial No",ItemTrackingMode = ItemTrackingMode::"Lot No");
      CreateItem(Item,ItemTrackingCode.Code);
      FindBin(Bin,LocationWhite.Code,TRUE);

      CreateWarehouseJournalBatch(WarehouseJournalBatch,WarehouseJournalBatch."Template Type"::Item,Bin."Location Code");
      FOR i := 1 TO LibraryRandom.RandIntInRange(2,5) DO BEGIN
        LotOrSerialNos[i] := LibraryUtility.GenerateGUID;
        LibraryWarehouse.CreateWhseJournalLine(
          WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",
          Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",1);
        LibraryVariableStorage.Enqueue(ItemTrackingMode);
        LibraryVariableStorage.Enqueue(LotOrSerialNos[i]);
        WarehouseJournalLine.OpenItemTrackingLines;
      END;
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",Bin."Location Code",TRUE);
    END;

    LOCAL PROCEDURE RegisterPutAwayFromWarehouseReceiptUsingPurchaseOrderWithItemTracking@117(VAR PurchaseHeader@1000 : Record 38;ItemNo@1003 : Code[20];Quantity@1004 : Decimal;IsTracking@1001 : Boolean);
    VAR
      WarehouseReceiptLine@1006 : Record 7317;
      WarehouseActivityLine@1005 : Record 5767;
    BEGIN
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationWhite.Code,'',ItemNo,IsTracking,Quantity);
      CreateAndPostWarehouseReceipt(WarehouseReceiptLine,PurchaseHeader,'',FALSE);  // Post Warehouse Receipt with Tracking.
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE CreateAndUpdateWarehouseJournalLineWithBin@69(VAR WarehouseJournalLine@1000 : Record 7311;WarehouseJournalBatch@1001 : Record 7310;Bin@1002 : Record 7354;ItemNo@1003 : Code[20];VariantCode@1004 : Code[10];BaseUnitOfMeasure@1005 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",
        Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,LibraryRandom.RandInt(10));
      WarehouseJournalLine.VALIDATE("Variant Code",VariantCode);
      WarehouseJournalLine.VALIDATE("Unit of Measure Code",BaseUnitOfMeasure);
      WarehouseJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPhysicalInventory@36(ItemNo@1000 : Code[20];LocationCode@1009 : Code[10];BinCode@1008 : Code[20];Tracking@1006 : Boolean);
    VAR
      ItemJournalLine@1001 : Record 83;
    BEGIN
      RunReportCalculateInventory(ItemJournalLine,ItemNo,LocationCode,BinCode,FALSE);
      PostPhysicalInventoryJournal(ItemJournalLine,ItemNo,Tracking);
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@242(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];LocationCode@1003 : Code[10];BinCode@1004 : Code[20];Qty@1002 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,Qty);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.VALIDATE("Bin Code",BinCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,FALSE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndRegisterWhsePickFromProduction@213(ProductionOrder@1000 : Record 5405;LotNo@1001 : Code[20]);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);
      RegisterWarehouseActivityWithLotNo(
        WarehouseActivityLine."Source Document"::"Prod. Consumption",ProductionOrder."No.",
        WarehouseActivityLine."Activity Type"::Pick,LotNo);
    END;

    LOCAL PROCEDURE CreateAndUpdateLocation@3(VAR Location@1004 : Record 14;RequireReceive@1000 : Boolean);
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,TRUE,TRUE,TRUE,RequireReceive,FALSE);
    END;

    LOCAL PROCEDURE CreateAndUpdateBinContent@37(VAR BinContent@1004 : Record 7302;LocationCode@1003 : Code[10];BinCode@1002 : Code[20];ItemNo@1001 : Code[20];UnitofMeasure@1000 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateBinContent(BinContent,LocationCode,'',BinCode,ItemNo,'',UnitofMeasure) ;
      BinContent.VALIDATE(Default,TRUE);
      BinContent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateWarehouseJournalLinesWithItemTrackingAndMultipleUOM@49(VAR WarehouseJournalLine@1003 : Record 7311;Bin@1002 : Record 7354;ItemNo@1001 : Code[20];ItemUnitOfMeasureCode@1006 : Code[10];Quantity@1000 : Decimal);
    VAR
      WarehouseJournalTemplate@1004 : Record 7309;
    BEGIN
      LibraryVariableStorage.Enqueue(TrackingAction::AssignLotNo);  // TrackingAction used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // LotNoBlank used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // AssignSerialAndLot used in WhseItemTrackingLinesHandler.
      CreateWarehouseJournalLine(WarehouseJournalLine,Bin,WarehouseJournalTemplate.Type::Item,ItemNo,Quantity,TRUE);
      LibraryVariableStorage.Enqueue(TrackingAction::AssignLotNo);  // TrackingAction used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // LotNoBlank used in WhseItemTrackingLinesHandler.
      LibraryVariableStorage.Enqueue(FALSE);  // AssignSerialAndLot used in WhseItemTrackingLinesHandler.
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",
        Bin."Location Code",Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      WarehouseJournalLine.VALIDATE("Unit of Measure Code",ItemUnitOfMeasureCode);
      WarehouseJournalLine.MODIFY(TRUE);
      WarehouseJournalLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateBlockedItem@55(VAR Item@1000 : Record 27);
    BEGIN
      CreateItem(Item,'');
      Item.VALIDATE(Blocked,TRUE);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateComponentsLocationWithBin@264(VAR Location@1000 : Record 14;VAR Bin@1001 : Record 7354);
    BEGIN
      CreateWMSLocationWithProductionBin(Location);
      LibraryWarehouse.CreateBin(Bin,Location.Code,LibraryUtility.GenerateGUID,'','');
      UpdateManufacturingSetup(Location.Code);
    END;

    LOCAL PROCEDURE CreateFullWarehouseSetup@60(VAR Location@1000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
    END;

    LOCAL PROCEDURE CreateItem@5(VAR Item@1000 : Record 27;ItemTrackingCode@1002 : Code[10]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      IF ItemTrackingCode <> '' THEN BEGIN
        Item.VALIDATE("Item Tracking Code",ItemTrackingCode);
        Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
        Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
        Item.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@22(VAR ItemTrackingCode@1003 : Record 6502;Serial@1000 : Boolean;Lot@1001 : Boolean);
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,Serial,Lot);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",Serial);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",Lot);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasure@47(VAR ItemUnitOfMeasure@1002 : Record 5404;ItemNo@1001 : Code[20]);
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,ItemNo,LibraryRandom.RandInt(5) + 1);
    END;

    LOCAL PROCEDURE CreateItemJournalBatch@34(VAR ItemJournalBatch@1000 : Record 233;Type@1001 : Option;NoSeries@1003 : Boolean);
    VAR
      ItemJournalTemplate@1002 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,Type);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
      IF NoSeries THEN BEGIN
        ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
        ItemJournalBatch.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateItemJournalLineWithItemTracking@35(VAR ItemJournalLine@1005 : Record 83;ItemJournalBatch@1004 : Record 233;Bin@1001 : Record 7354;ItemNo@1003 : Code[20];Quantity@1002 : Decimal;Tracking@1000 : Boolean);
    BEGIN
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",Bin."Location Code");
      ItemJournalLine.VALIDATE("Bin Code",Bin.Code);
      ItemJournalLine.MODIFY(TRUE);
      IF Tracking THEN
        ItemJournalLine.OpenItemTrackingLines(FALSE);  // Execute ItemTrackingLinesHandler for assigning Item Tracking lines.
    END;

    LOCAL PROCEDURE CreateItemReclassJournalLine@41(VAR ItemJournalLine@1002 : Record 83;ItemNo@1003 : Code[20];FromLocationCode@1006 : Code[10];ToLocationCode@1007 : Code[10];BinCode@1009 : Code[20];IsTracking@1005 : Boolean;Quantity@1004 : Decimal);
    VAR
      ItemJournalBatch@1001 : Record 233;
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Transfer,TRUE);
      LibraryVariableStorage.Enqueue(TrackingAction::SelectEntries);  // TrackingAction used in ItemTrackingLinesPageHandler.
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Transfer,ItemNo,
        Quantity);
      ItemJournalLine.VALIDATE("Location Code",FromLocationCode);
      ItemJournalLine.VALIDATE("New Location Code",ToLocationCode);
      IF BinCode <> '' THEN
        ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      IF IsTracking THEN
        ItemJournalLine.OpenItemTrackingLines(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithPhysicalInventoryCountingPeriod@59(VAR Item@1000 : Record 27;VAR PhysInvtCountingPeriod@1001 : Record 7381);
    BEGIN
      PhysInvtCountingPeriod.FINDFIRST;
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Phys Invt Counting Period Code",PhysInvtCountingPeriod.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithProductionBOM@209(VAR Item@1000 : Record 27;ComponentItemNo@1002 : Code[20];QtyPer@1003 : Decimal);
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryManufacturing.CreateCertifiedProductionBOM(ProductionBOMHeader,ComponentItemNo,QtyPer);
      Item.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithItemTrackingCode@113(VAR Item@1000 : Record 27;Serial@1002 : Boolean;Lot@1003 : Boolean);
    VAR
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      CreateItemTrackingCode(ItemTrackingCode,Serial,Lot);
      CreateItem(Item,ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateItemWithAlternateUnitOfMeasure@143(VAR ItemNo@1003 : Code[20];VAR UnitOfMeasureCode@1004 : Code[10];QtyInUOM@1005 : Decimal);
    VAR
      Item@1002 : Record 27;
      ItemUnitOfMeasure@1000 : Record 5404;
    BEGIN
      ItemNo := LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",QtyInUOM);
      UnitOfMeasureCode := ItemUnitOfMeasure.Code;
    END;

    LOCAL PROCEDURE CreateLocationSetup@4();
    BEGIN
      WarehouseEmployee.SETRANGE("User ID",USERID);
      WarehouseEmployee.DELETEALL(TRUE);
      CreateFullWarehouseSetup(LocationWhite);  // Location: White.
      CreateAndUpdateLocation(LocationSilver,FALSE);  // Location: Silver.
      CreateAndUpdateLocation(LocationSilver2,TRUE);  // Location: Silver as Require Receive as True.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(BasicLocation);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationSilver.Code,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationSilver2.Code,FALSE);
      LibraryWarehouse.CreateNumberOfBins(LocationSilver.Code,'','',LibraryRandom.RandInt(3) + 2,FALSE);  // Value Required.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite.Code,TRUE);
    END;

    LOCAL PROCEDURE CreateProductionOrderWithComponent@266(VAR ProductionOrder@1005 : Record 5405;ComponentItemNo@1001 : Code[20];LocationCode@1002 : Code[10];BinCode@1003 : Code[20];Qty@1004 : Decimal);
    VAR
      ParentItem@1000 : Record 27;
    BEGIN
      CreateItemWithProductionBOM(ParentItem,ComponentItemNo,1);
      CreateAndRefreshProductionOrder(ProductionOrder,ParentItem."No.",LocationCode,BinCode,Qty);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@79(VAR PurchaseHeader@1006 : Record 38;VAR PurchaseLine@1001 : Record 39;LocationCode@1003 : Code[10];VariantCode@1002 : Code[10];ItemNo@1004 : Code[20];Quantity@1000 : Integer);
    BEGIN
      // Create Purchase Order with One Item Line. Random values used are not important for test.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Variant Code",VariantCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderForPartialShipmentAndInvoice@28(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];BinCode@1004 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandDec(100,2));  // Use random Quantity.
      ModifyPurchaseLineForPartialShipAndInvoice(PurchaseLine,LocationCode,BinCode);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreatePurchaseOrderUpdateReceiptDate@246(VAR PurchaseHeader@1005 : Record 38;LocationCode@1003 : Code[10];VariantCode@1002 : Code[10];ItemNo@1001 : Code[20];Quantity@1000 : Integer;ExpectedReceiptDate@1006 : Date);
    VAR
      PurchaseLine@1004 : Record 39;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,LocationCode,VariantCode,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Expected Receipt Date",ExpectedReceiptDate);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReservedStockOnWarehouse@182(VAR Bin@1001 : Record 7354;VAR Item@1002 : Record 27;Quantity@1003 : Decimal;QtyToReserve@1004 : Decimal);
    VAR
      Location@1000 : Record 14;
    BEGIN
      CreateFullWarehouseSetup(Location);
      LibraryInventory.CreateItem(Item);
      Bin.GET(Location.Code,Location."Receipt Bin Code");
      PostPositiveAdjustmentOnWarehouse(Bin,Item,Quantity);
      CreateSalesOrderWithAutoReserve(Item."No.",Location.Code,QtyToReserve);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithAutoReserve@173(ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal);
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      LibrarySales.AutoReserveSalesLine(SalesLine);
    END;

    LOCAL PROCEDURE CreateTrackedItem@207(VAR Item@1000 : Record 27);
    VAR
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      CreateItem(Item,ItemTrackingCode.Code);
      Item.VALIDATE("Order Tracking Policy",Item."Order Tracking Policy"::"Tracking & Action Msg.");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseJournalBatch@51(VAR WarehouseJournalBatch@1000 : Record 7310;Type@1003 : Option;LocationCode@1001 : Code[10]);
    VAR
      WarehouseJournalTemplate@1002 : Record 7309;
    BEGIN
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,Type);
      LibraryWarehouse.CreateWhseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Name,LocationCode);
    END;

    LOCAL PROCEDURE CreateWarehouseJournalLine@18(VAR WarehouseJournalLine@1000 : Record 7311;Bin@1002 : Record 7354;WarehouseJournalTemplateType@1005 : Option;ItemNo@1004 : Code[20];Quantity@1006 : Decimal;IsTracking@1003 : Boolean);
    VAR
      WarehouseJournalBatch@1001 : Record 7310;
    BEGIN
      CreateWarehouseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplateType,Bin."Location Code");
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",
        Bin."Zone Code",Bin.Code,WarehouseJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      IF IsTracking THEN
        WarehouseJournalLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateWhseJournalLineWithTracking@149(VAR WarehouseJournalLine@1001 : Record 7311;WarehouseJournalBatch@1002 : Record 7310;Bin@1003 : Record 7354;EntryType@1000 : 'Negative Adjmt.,Positive Adjmt.,Movement';ItemNo@1004 : Code[20];Quantity@1005 : Decimal);
    BEGIN
      WITH LibraryVariableStorage DO BEGIN
        Enqueue(0);  // Set TrackingAction to "0" for WhseItemTrackingLinesHandler.
        Enqueue(FALSE);  // Set LotNoBlank to "FALSE" for WhseItemTrackingLinesHandler.
        Enqueue(TRUE);  // Set AssignSerialAndLot to "TRUE" for WhseItemTrackingLinesHandler.
      END;
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",
        Bin."Zone Code",Bin.Code,EntryType,ItemNo,Quantity);
      WarehouseJournalLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateWhseActivityLineForPick@165(BinContent@1001 : Record 7302);
    VAR
      WhseActivityLine@1000 : Record 5767;
    BEGIN
      WITH WhseActivityLine DO BEGIN
        INIT;
        "Activity Type" := "Activity Type"::Pick;
        "No." := LibraryUtility.GenerateGUID;
        "Line No." := 1000;
        "Qty. Outstanding (Base)" := LibraryRandom.RandInt(10);
        "Location Code" := BinContent."Location Code";
        "Bin Code" := BinContent."Bin Code";
        "Item No." := BinContent."Item No.";
        "Variant Code" := BinContent."Variant Code";
        "Unit of Measure Code" := BinContent."Unit of Measure Code";
        "Action Type" := "Action Type"::Take;
        "Assemble to Order" := FALSE;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateWMSLocationWithProductionBin@239(VAR Location@1000 : Record 14);
    VAR
      Bin@1001 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateLocationWMS(Location,TRUE,FALSE,TRUE,FALSE,TRUE);

      LibraryWarehouse.CreateBin(Bin,Location.Code,LibraryUtility.GenerateGUID,'','');
      Location.VALIDATE("From-Production Bin Code",Bin.Code);
      Location.VALIDATE("To-Production Bin Code",Bin.Code);
      Location.MODIFY(TRUE);

      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
    END;

    LOCAL PROCEDURE CreateBinWithContentForItem@147(VAR Bin@1001 : Record 7354;VAR BinContent@1000 : Record 7302) : Code[20];
    VAR
      ItemTrackingCode@1002 : Record 6502;
      Item@1003 : Record 27;
    BEGIN
      CreateItemTrackingCode(ItemTrackingCode,TRUE,TRUE);
      CreateItem(Item,ItemTrackingCode.Code);
      FindBin(Bin,LocationWhite.Code,TRUE);
      LibraryWarehouse.CreateBinContent(
        BinContent,Bin."Location Code",Bin."Zone Code",Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateWarehouseJournalAndRegister@123(VAR WarehouseJournalLine@1000 : Record 7311;Bin@1002 : Record 7354;WarehouseJournalTemplateType@1005 : Option;ItemNo@1004 : Code[20];Quantity@1006 : Decimal;IsTracking@1003 : Boolean);
    BEGIN
      CreateWarehouseJournalLine(
        WarehouseJournalLine,Bin,WarehouseJournalTemplateType,ItemNo,Quantity,IsTracking);

      // Register Warehouse Journal Line.
      LibraryVariableStorage.Enqueue(RegisterJournalLines); // Enqueue for ConfirmHandler.
      LibraryVariableStorage.Enqueue(JournalLinesRegistered); // Enqueue for MessageHandler
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",Bin."Location Code",FALSE);
    END;

    LOCAL PROCEDURE CreateAndRegisterWhseJournalWithAlternateUOM@150(WarehouseJournalBatch@1005 : Record 7310;ItemNo@1003 : Code[20];UnitOfMeasureCode@1006 : Code[10];Bin@1004 : Record 7354;Qty@1001 : Decimal;QtyBase@1002 : Decimal);
    VAR
      WarehouseJournalLine@1000 : Record 7311;
    BEGIN
      WITH WarehouseJournalLine DO BEGIN
        LibraryWarehouse.CreateWhseJournalLine(
          WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Bin."Location Code",
          Bin."Zone Code",Bin.Code,"Entry Type"::"Positive Adjmt.",ItemNo,0);
        VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
        VALIDATE(Quantity,Qty);
        "Qty. (Base)" := QtyBase;
        "Qty. (Absolute, Base)" := ABS("Qty. (Base)");
        MODIFY(TRUE);

        RegisterWarehouseJournalLine("Journal Template Name","Journal Batch Name",Bin."Location Code");
      END;
    END;

    LOCAL PROCEDURE CreateWarehouseReclassificationJournalAndRegister@89(RegisteredWhseActivityLine@1002 : Record 5773;ItemVariant@1000 : Code[10]);
    VAR
      WarehouseJournalBatch@1004 : Record 7310;
      WarehouseJournalTemplate@1003 : Record 7309;
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      CreateWarehouseJournalBatch(
        WarehouseJournalBatch,WarehouseJournalTemplate.Type::Reclassification,RegisteredWhseActivityLine."Location Code");
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,
        RegisteredWhseActivityLine."Location Code",RegisteredWhseActivityLine."Zone Code",RegisteredWhseActivityLine."Bin Code",
        WarehouseJournalLine."Entry Type"::Movement,RegisteredWhseActivityLine."Item No.",RegisteredWhseActivityLine.Quantity);
      WarehouseJournalLine.VALIDATE("From Zone Code",RegisteredWhseActivityLine."Zone Code");
      WarehouseJournalLine.VALIDATE("From Bin Code",RegisteredWhseActivityLine."Bin Code");
      WarehouseJournalLine.VALIDATE("To Zone Code",RegisteredWhseActivityLine."Zone Code");
      WarehouseJournalLine.VALIDATE("To Bin Code",RegisteredWhseActivityLine."Bin Code");
      WarehouseJournalLine.VALIDATE("Variant Code",ItemVariant);
      WarehouseJournalLine.MODIFY(TRUE);
      WarehouseJournalLine.OpenItemTrackingLines;
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",WarehouseJournalLine."Location Code",
        TRUE);
    END;

    LOCAL PROCEDURE CreateWhseItemJournalFromPage@132(VAR WhseItemJournal@1001 : TestPage 7324;Bin@1000 : Record 7354;JournalBatchName@1002 : Code[10];ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    BEGIN
      WhseItemJournal.OPENEDIT;
      WhseItemJournal.CurrentLocationCode.SETVALUE(Bin."Location Code");
      WhseItemJournal.CurrentJnlBatchName.SETVALUE(JournalBatchName);
      WhseItemJournal."Item No.".SETVALUE(ItemNo);
      WhseItemJournal."Bin Code".SETVALUE(Bin.Code);
      WhseItemJournal.Quantity.SETVALUE(Quantity);
    END;

    LOCAL PROCEDURE AdjustInventoryToZeroAfterAddInventoryForItem@127(VAR Bin@1003 : Record 7354) : Code[20];
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1001 : Record 38;
      WarehouseJournalLine@1002 : Record 7311;
    BEGIN
      // Add Inventory for Item.
      Initialize;
      CreateItem(Item,'');
      RegisterPutAwayFromWarehouseReceiptUsingPurchaseOrderWithItemTracking(
        PurchaseHeader,Item."No.",LibraryRandom.RandInt(10),FALSE);

      // Adjust Inventory to 0.
      RunWarehouseCalculateInventory(WarehouseJournalLine,'',LocationWhite.Code,Item."No.");
      UpdatePhysicalInventoryAndRegister(WarehouseJournalLine,Item."No.");
      CalculateAndPostWhseAdjustment(Item);

      Bin.GET(LocationWhite.Code,LocationWhite."Receipt Bin Code");
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE DeleteBin@40(LocationCode@1002 : Code[20];BinCode@1001 : Code[20]);
    VAR
      Bin@1003 : Record 7354;
    BEGIN
      Bin.SETRANGE(Code,BinCode);
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.FINDFIRST;
      Bin.DELETE(TRUE);
    END;

    LOCAL PROCEDURE DeleteBinContent@42(LocationCode@1003 : Code[20];BinCode@1001 : Code[20];ItemNo@1000 : Code[20];LotNo@1004 : Code[20]);
    VAR
      BinContent@1002 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Bin Code",BinCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Lot No. Filter",LotNo);
      BinContent.FINDFIRST;
      BinContent.DELETE(TRUE);
    END;

    LOCAL PROCEDURE FilterItemJournalLine@48(VAR ItemJournalLine@1002 : Record 83;JournalTemplateName@1003 : Code[10];JournalBatchName@1001 : Code[10];ItemNo@1000 : Code[20]);
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      ItemJournalLine.SETRANGE("Item No.",ItemNo);
    END;

    LOCAL PROCEDURE FIlterWarehouseEntries@70(VAR WarehouseEntry@1000 : Record 7312;EntryType@1001 : Option;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10]);
    BEGIN
      WarehouseEntry.SETRANGE("Entry Type",EntryType);
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.SETRANGE("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE FilterWarehouseJournalLine@101(VAR WarehouseJournalLine@1000 : Record 7311;JournalTemplateName@1002 : Code[10];JournalBatchName@1001 : Code[10];LocationCode@1003 : Code[10]);
    BEGIN
      WarehouseJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      WarehouseJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      WarehouseJournalLine.SETRANGE("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE FindBin@10(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10];Pick@1002 : Boolean);
    VAR
      Zone@1003 : Record 7300;
    BEGIN
      FindZone(Zone,LocationCode,LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,Pick));
      LibraryWarehouse.FindBin(Bin,LocationCode,Zone.Code,1);  // Use 1 for Bin Index.
    END;

    LOCAL PROCEDURE FindRegisteredPutAway@78(VAR RegisteredWhseActivityLine@1003 : Record 5773;ItemNo@1001 : Code[20]);
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Action Type",RegisteredWhseActivityLine."Action Type"::Place);
      RegisteredWhseActivityLine.SETRANGE("Item No.",ItemNo);
      RegisteredWhseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindItemJournalLine@29(VAR ItemJournalLine@1000 : Record 83;JournalTemplateName@1001 : Code[10];JournalBatchName@1003 : Code[10];ItemNo@1002 : Code[20]);
    BEGIN
      FilterItemJournalLine(ItemJournalLine,JournalTemplateName,JournalBatchName,ItemNo);
      ItemJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@114(VAR ItemLedgerEntry@1003 : Record 32;EntryType@1000 : Option;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20]) : Boolean;
    BEGIN
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Location Code",LocationCode);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      EXIT(ItemLedgerEntry.FINDFIRST);
    END;

    LOCAL PROCEDURE FindWarehouseActivityNo@83(VAR WarehouseActivityLine@1002 : Record 5767;SourceDocument@1003 : Option;SourceNo@1001 : Code[20];ActivityType@1000 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source Document",SourceDocument);
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseReceiptLine@75(VAR WarehouseReceiptLine@1002 : Record 7317;SourceDocument@1001 : Option;SourceNo@1000 : Code[20]);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseJournalLine@63(VAR WarehouseJournalLine@1000 : Record 7311;ItemNo@1001 : Code[20]);
    BEGIN
      WarehouseJournalLine.SETRANGE("Journal Template Name",WarehouseJournalLine."Journal Template Name");
      WarehouseJournalLine.SETRANGE("Journal Batch Name",WarehouseJournalLine."Journal Batch Name");
      WarehouseJournalLine.SETRANGE("Location Code",WarehouseJournalLine."Location Code");
      WarehouseJournalLine.SETRANGE("Item No.",ItemNo);
      WarehouseJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindZone@8(VAR Zone@1000 : Record 7300;LocationCode@1001 : Code[10];BinTypeCode@1002 : Code[10]);
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      Zone.SETRANGE("Bin Type Code",BinTypeCode);
      Zone.SETRANGE("Cross-Dock Bin Zone",FALSE);
      Zone.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseJournalBatch@128(VAR WarehouseJournalBatch@1000 : Record 7310;JournalTemplateName@1001 : Code[10];NoSeries@1002 : Code[10]);
    BEGIN
      WarehouseJournalBatch.SETRANGE("Journal Template Name",JournalTemplateName);
      WarehouseJournalBatch.SETRANGE("No. Series",NoSeries);
      WarehouseJournalBatch.FINDLAST;
    END;

    LOCAL PROCEDURE FindWarehouseEntry@124(VAR WarehouseEntry@1000 : Record 7312;JournalBatchName@1002 : Code[10];EntryType@1003 : Option;ItemNo@1001 : Code[20]);
    BEGIN
      WITH WarehouseEntry DO BEGIN
        SETRANGE("Journal Batch Name",JournalBatchName);
        SETRANGE("Entry Type",EntryType);
        SETRANGE("Item No.",ItemNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE ModifyPurchaseLineForPartialShipAndInvoice@27(VAR PurchaseLine@1000 : Record 39;LocationCode@1002 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.VALIDATE("Qty. to Receive",PurchaseLine.Quantity / 2);  // Assign Partial Quantity to Receive.
      PurchaseLine.VALIDATE("Qty. to Invoice",PurchaseLine.Quantity / 4);  // Assign Partial Quantity to Invoice.
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ModifyWhseJournalLineForReclass@19(WarehouseJournalLine@1000 : Record 7311;Bin@1001 : Record 7354;Bin2@1002 : Record 7354);
    BEGIN
      WarehouseJournalLine.VALIDATE("From Zone Code",Bin."Zone Code");
      WarehouseJournalLine.VALIDATE("From Bin Code",Bin.Code);
      WarehouseJournalLine.VALIDATE("To Zone Code",Bin2."Zone Code");
      WarehouseJournalLine.VALIDATE("To Bin Code",Bin2.Code);
      WarehouseJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE NoSeriesSetup@2();
    VAR
      WarehouseSetup@1002 : Record 5769;
      PurchasesPayablesSetup@1003 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);

      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);
    END;

    LOCAL PROCEDURE CalculateInventoryOnPhysicalInventoryJournalPage@118(VAR PhysInventoryJournal@1001 : TestPage 392;ItemNo@1000 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(ItemNo);  // ItemNo used in CalculateInventoryPageHandler.
      PhysInventoryJournal.OPENEDIT;
      PhysInventoryJournal.CalculateInventory.INVOKE;
      PhysInventoryJournal.FILTER.SETFILTER("Item No.",ItemNo);
    END;

    LOCAL PROCEDURE PostItemPositiveAdjmtWithLotTracking@250(ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];BinCode@1003 : Code[20];Qty@1004 : Decimal) : Code[20];
    VAR
      ItemJournalLine@1000 : Record 83;
      ItemLedgerEntry@1006 : Record 32;
    BEGIN
      LibraryInventory.CreateItemJournalLineInItemTemplate(ItemJournalLine,ItemNo,LocationCode,BinCode,Qty);
      LibraryVariableStorage.Enqueue(TrackingAction::AssignLotNo);
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Location Code",LocationCode);
      ItemLedgerEntry.FINDLAST;

      EXIT(ItemLedgerEntry."Lot No.");
    END;

    LOCAL PROCEDURE PostPhysicalInventoryJournal@39(ItemJournalLine@1001 : Record 83;ItemNo@1000 : Code[20];Tracking@1002 : Boolean);
    VAR
      ItemJournalLine2@1003 : Record 83;
    BEGIN
      ItemJournalLine2.SETRANGE("Journal Template Name",ItemJournalLine."Journal Template Name");
      ItemJournalLine2.SETRANGE("Journal Batch Name",ItemJournalLine."Journal Batch Name");
      ItemJournalLine2.SETRANGE("Item No.",ItemNo);
      ItemJournalLine2.FINDFIRST;
      ItemJournalLine2.VALIDATE("Qty. (Phys. Inventory)",0); // Value Zero Important for test.
      ItemJournalLine2.MODIFY(TRUE);
      IF Tracking THEN
        ItemJournalLine2.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine2."Journal Template Name",ItemJournalLine2."Journal Batch Name");
    END;

    LOCAL PROCEDURE PostPositiveAdjustmentOnWarehouse@170(Bin@1001 : Record 7354;Item@1003 : Record 27;Quantity@1004 : Decimal);
    VAR
      WarehouseJournalTemplate@1002 : Record 7309;
      WarehouseJournalLine@1000 : Record 7311;
      ItemJournalBatch@1005 : Record 233;
    BEGIN
      CreateWarehouseJournalLine(
        WarehouseJournalLine,Bin,WarehouseJournalTemplate.Type::Item,Item."No.",Quantity,FALSE);
      LibraryVariableStorage.Enqueue(RegisterJournalLines);
      LibraryVariableStorage.Enqueue(JournalLinesRegistered);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",Bin."Location Code",FALSE);
      CalculateWhseAdjustment(ItemJournalBatch,Item);
      LibraryInventory.PostItemJournalBatch(ItemJournalBatch);
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@87(WarehouseReceiptNo@1000 : Code[20]);
    VAR
      WarehouseReceiptHeader@1001 : Record 7316;
    BEGIN
      WarehouseReceiptHeader.GET(WarehouseReceiptNo);
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE PostWarehouseReceiptAndRegisterPutAway@95(LocationCode@1000 : Code[10];ItemVariant@1002 : Code[10];ItemNo@1001 : Code[20];BinCode@1007 : Code[20];Quantity@1003 : Decimal);
    VAR
      PurchaseHeader@1006 : Record 38;
      WarehouseReceiptLine@1005 : Record 7317;
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationCode,ItemVariant,ItemNo,TRUE,Quantity);
      CreateAndPostWarehouseReceipt(WarehouseReceiptLine,PurchaseHeader,BinCode,FALSE);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE PostWarehouseReceiptAndRegisterPutAwayForSerialNo@102(VAR RegisteredWhseActivityLine@1006 : Record 5773;ItemVariant@1009 : Code[10];Quantity@1008 : Decimal;UpdateExpirationDate@1007 : Boolean);
    VAR
      ItemTrackingCode@1005 : Record 6502;
      Item@1004 : Record 27;
      PurchaseHeader@1003 : Record 38;
      WarehouseReceiptLine@1002 : Record 7317;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      CreateItemTrackingCode(ItemTrackingCode,TRUE,FALSE);
      CreateItem(Item,ItemTrackingCode.Code);
      LibraryVariableStorage.Enqueue(TrackingAction::AssignSerialNo);  // TrackingAction used in ItemTrackingLinesPageHandler.
      CreateAndReleasePurchaseOrder(PurchaseHeader,LocationWhite.Code,ItemVariant,Item."No.",TRUE,Quantity);
      IF UpdateExpirationDate THEN
        UpdateReservationEntry(Item."No.",LocationWhite.Code,WORKDATE);
      CreateAndPostWarehouseReceipt(WarehouseReceiptLine,PurchaseHeader,'',FALSE);
      RegisterWarehouseActivity(
        WarehouseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",
        WarehouseActivityLine."Activity Type"::"Put-away");
      FindRegisteredPutAway(RegisteredWhseActivityLine,Item."No.");
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@82(SourceDocument@1001 : Option;SourceNo@1004 : Code[20];Type@1000 : Option);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      FindWarehouseActivityNo(WarehouseActivityLine,SourceDocument,SourceNo,Type);
      WarehouseActivityHeader.GET(Type,WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE RegisterWarehouseActivityWithLotNo@198(SourceDocument@1002 : Option;SourceNo@1001 : Code[20];Type@1000 : Option;LotNo@1003 : Code[20]);
    VAR
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Source Document",SourceDocument);
        SETRANGE("Source No.",SourceNo);
        SETRANGE("Activity Type",Type);
        MODIFYALL("Lot No.",LotNo);
      END;

      RegisterWarehouseActivity(SourceDocument,SourceNo,Type);
    END;

    LOCAL PROCEDURE RegisterWarehouseJournalLine@92(JournalTemplateName@1000 : Code[10];JournalBatchName@1001 : Code[10];LocationCode@1002 : Code[10]);
    BEGIN
      LibraryVariableStorage.Enqueue(RegisterJournalLines);  // RegisterJournalLines used in ConfirmHandler.
      LibraryVariableStorage.Enqueue(JournalLinesRegistered);  // JournalLinesRegistered used in MessageHandler.
      LibraryWarehouse.RegisterWhseJournalLine(JournalTemplateName,JournalBatchName,LocationCode,FALSE);
    END;

    LOCAL PROCEDURE RunReportCalculateInventory@38(VAR ItemJournalLine@1000 : Record 83;ItemNo@1001 : Code[20];LocationCode@1008 : Code[10];BinCode@1009 : Code[20];ItemsNotOnInventory@1002 : Boolean);
    VAR
      ItemJournalTemplate@1007 : Record 82;
      ItemJournalBatch@1006 : Record 233;
      Item@1005 : Record 27;
    BEGIN
      CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::"Phys. Inventory",FALSE);
      ItemJournalLine.INIT;
      ItemJournalLine.VALIDATE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.VALIDATE("Journal Batch Name",ItemJournalBatch.Name);
      IF ItemNo <> '' THEN
        Item.SETRANGE("No.",ItemNo);
      IF LocationCode <> '' THEN
        Item.SETRANGE("Location Filter",LocationCode);
      IF BinCode <> '' THEN
        Item.SETRANGE("Bin Filter",BinCode);
      LibraryWarehouse.CalculateInventory(ItemJournalLine,Item,WORKDATE,LibraryUtility.GenerateGUID,ItemsNotOnInventory);
    END;

    LOCAL PROCEDURE RunWarehouseCalculateInventory@99(VAR WarehouseJournalLine@1005 : Record 7311;ZoneCode@1002 : Code[10];LocationCode@1009 : Code[10];ItemNo@1000 : Code[20]);
    VAR
      BinContent@1010 : Record 7302;
      WarehouseJournalBatch@1003 : Record 7310;
      WarehouseJournalTemplate@1004 : Record 7309;
    BEGIN
      CreateWarehouseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Type::"Physical Inventory",LocationWhite.Code);
      WarehouseJournalLine.INIT;
      WarehouseJournalLine.VALIDATE("Journal Template Name",WarehouseJournalBatch."Journal Template Name");
      WarehouseJournalLine.VALIDATE("Journal Batch Name",WarehouseJournalBatch.Name);
      WarehouseJournalLine.VALIDATE("Location Code",LocationCode);
      IF ZoneCode <> '' THEN
        BinContent.SETRANGE("Zone Code",ZoneCode);
      IF ItemNo <> '' THEN
        BinContent.SETRANGE("Item No.",ItemNo);
      LibraryWarehouse.WhseCalculateInventory(WarehouseJournalLine,BinContent,WORKDATE,LibraryUtility.GenerateGUID,FALSE);
    END;

    LOCAL PROCEDURE CalculateInventoryOnWhsePhysInvtJournalPage@133(VAR WhsePhysInvtJournal@1000 : TestPage 7326;ItemsNotOnInventory@1002 : Boolean;ItemNo@1001 : Code[20];ZoneCode@1004 : Code[10];BinCode@1005 : Code[20]);
    BEGIN
      WhsePhysInvtJournal.OPENEDIT;
      WhsePhysInvtJournal.CurrentJnlBatchName.LOOKUP;

      // Enqueue values for WhseCalculateInventoryRequestPageHandler.
      LibraryVariableStorage.Enqueue(ItemsNotOnInventory);
      LibraryVariableStorage.Enqueue(ItemNo);
      LibraryVariableStorage.Enqueue(ZoneCode);
      LibraryVariableStorage.Enqueue(BinCode);

      WhsePhysInvtJournal.Action17.INVOKE; // Invoke Action17: Calculate Inventory.
      WhsePhysInvtJournal.OK.INVOKE;
    END;

    LOCAL PROCEDURE RunCalculateCountingPeriodOnWarehousePhysicalInventoryJournal@62(VAR WarehouseJournalLine@1003 : Record 7311;LocationCode@1002 : Code[10]);
    VAR
      WarehouseJournalTemplate@1000 : Record 7309;
      WarehouseJournalBatch@1001 : Record 7310;
    BEGIN
      CreateWarehouseJournalBatch(WarehouseJournalBatch,WarehouseJournalTemplate.Type::"Physical Inventory",LocationCode);
      WarehouseJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalBatch.MODIFY(TRUE);
      WarehouseJournalLine.INIT;
      WarehouseJournalLine.VALIDATE("Journal Template Name",WarehouseJournalBatch."Journal Template Name");
      WarehouseJournalLine.VALIDATE("Journal Batch Name",WarehouseJournalBatch.Name);
      WarehouseJournalLine.VALIDATE("Location Code",LocationCode);
      LibraryWarehouse.CalculateCountingPeriodOnWarehousePhysicalInventoryJournal(WarehouseJournalLine);
    END;

    LOCAL PROCEDURE UpdateBinOnWarehouseReceiptLine@94(WarehouseReceiptLine@1000 : Record 7317;BinCode@1001 : Code[20]);
    BEGIN
      WarehouseReceiptLine.VALIDATE("Bin Code",BinCode);
      WarehouseReceiptLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemTrackingLines@122(VAR ItemTrackingLines@1000 : TestPage 6510;TrackingQuantity@1001 : Decimal);
    BEGIN
      ItemTrackingLines."Lot No.".SETVALUE(LibraryUtility.GenerateGUID);
      ItemTrackingLines."Quantity (Base)".SETVALUE(TrackingQuantity / 2);
      LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);
    END;

    LOCAL PROCEDURE UpdateManufacturingSetup@204(LocationCode@1001 : Code[10]);
    VAR
      ManufacturingSetup@1000 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Components at Location",LocationCode);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePhysicalInventoryAndRegister@112(VAR WarehouseJournalLine@1001 : Record 7311;ItemNo@1000 : Code[20]);
    BEGIN
      FindWarehouseJournalLine(WarehouseJournalLine,ItemNo);
      UpdateQuantityPhysicalInventoryOnWarehouseJournalLine(WarehouseJournalLine,0);  // Value Important for Difference in Quantity.
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",LocationWhite.Code,TRUE);
    END;

    LOCAL PROCEDURE UpdateQtyPerInProdOrderComponent@214(ProdOrderStatus@1001 : Option;ProdOrderNo@1002 : Code[20];NewQtyPer@1003 : Decimal);
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      WITH ProdOrderComponent DO BEGIN
        SETRANGE(Status,ProdOrderStatus);
        SETRANGE("Prod. Order No.",ProdOrderNo);
        FINDFIRST;
        VALIDATE("Quantity per",NewQtyPer);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateQuantityPhysicalInventoryOnWarehouseJournalLine@61(VAR WarehouseJournalLine@1000 : Record 7311;QtyPhysInventory@1001 : Decimal);
    BEGIN
      WarehouseJournalLine.VALIDATE("Qty. (Phys. Inventory)",QtyPhysInventory);  // Value Important for Difference in Quantity.
      WarehouseJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateReservationEntry@237(ItemNo@1000 : Code[20];LocationCode@1003 : Code[10];ExpirationDate@1001 : Date);
    VAR
      ReservationEntry@1002 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Location Code",LocationCode);
      ReservationEntry.MODIFYALL("Expiration Date",ExpirationDate,TRUE);
    END;

    LOCAL PROCEDURE UpdateWhseItemTrackingLine@119(VAR WhseItemTrackingLines@1000 : TestPage 6550;TrackingQuantity@1001 : Decimal;NewExpirationDate@1002 : Date);
    BEGIN
      WhseItemTrackingLines."Lot No.".ASSISTEDIT;
      WhseItemTrackingLines.Quantity.SETVALUE(TrackingQuantity / 2);
      WhseItemTrackingLines."New Expiration Date".SETVALUE(NewExpirationDate);
    END;

    LOCAL PROCEDURE VerifyBinContent@193(Bin@1001 : Record 7354;ItemNo@1002 : Code[20];ExpectedQuantity@1003 : Decimal);
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Location Code",Bin."Location Code");
      BinContent.SETRANGE("Bin Code",Bin.Code);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.FINDFIRST;
      BinContent.CALCFIELDS("Quantity (Base)");
      BinContent.TESTFIELD("Quantity (Base)",ExpectedQuantity);
    END;

    LOCAL PROCEDURE VerifyInventoryForItem@116(Item@1000 : Record 27;Quantity@1001 : Decimal);
    BEGIN
      Item.CALCFIELDS(Inventory);
      Item.TESTFIELD(Inventory,Quantity);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@88(EntryType@1006 : Option;ItemNo@1000 : Code[20];LocationCode@1007 : Code[10];Open@1004 : Boolean;SerialNo@1001 : Code[20];LotNo@1008 : Code[20];ExpirationDate@1005 : Date;Quantity@1002 : Decimal);
    VAR
      ItemLedgerEntry@1003 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE(Open,Open);
      FindItemLedgerEntry(ItemLedgerEntry,EntryType,LocationCode,ItemNo);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
      ItemLedgerEntry.TESTFIELD("Serial No.",SerialNo);
      ItemLedgerEntry.TESTFIELD("Lot No.",LotNo);
      ItemLedgerEntry.TESTFIELD("Expiration Date",ExpirationDate);
    END;

    LOCAL PROCEDURE VerifyReservationEntry@272(ItemNo@1001 : Code[20];SourceType@1002 : Integer;SourceSubtype@1003 : Integer;SourceID@1004 : Code[20];ReservationStatus@1006 : Option;ExpectedQty@1005 : Decimal;ExpectedLotNo@1007 : Code[20]);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source ID",SourceID);
        SETRANGE("Reservation Status",ReservationStatus);
        FINDFIRST;

        TESTFIELD(Quantity,ExpectedQty);
        TESTFIELD("Lot No.",ExpectedLotNo);
      END;
    END;

    LOCAL PROCEDURE VerifyReservationQuantity@194(ReservationStatus@1001 : Option;SourceType@1002 : Integer;SourceSubtype@1003 : Option;SourceID@1004 : Code[20];LotNo@1005 : Code[20];ExpectedQty@1006 : Decimal);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Reservation Status",ReservationStatus);
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source ID",SourceID);
        SETRANGE("Lot No.",LotNo);
        CALCSUMS(Quantity);
        TESTFIELD(Quantity,ExpectedQty);
      END;
    END;

    LOCAL PROCEDURE VerifyPhysicalInventoryJournal@72(VAR ItemJournalLine@1000 : Record 83;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      FilterItemJournalLine(ItemJournalLine,ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name",ItemNo);
      ItemJournalLine.SETRANGE("Location Code",LocationCode);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.TESTFIELD("Qty. (Phys. Inventory)",Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseAdjustmentLine@25(ItemJournalBatch@1000 : Record 233;ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      FindItemJournalLine(ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemNo);
      ItemJournalLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWhseAdjustmentLinesWithMultipleUnitOfMeasure@52(ItemJournalBatch@1005 : Record 233;ItemNo@1003 : Code[20];UnitOfMeasureCode@1001 : Code[10];Quantity@1000 : Decimal);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      FilterItemJournalLine(ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemNo);
      ItemJournalLine.SETRANGE("Unit of Measure Code",UnitOfMeasureCode);
      ItemJournalLine.FINDFIRST;
      ItemJournalLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntry@6(PurchaseLine@1000 : Record 39);
    VAR
      WarehouseEntry@1001 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Source No.",PurchaseLine."Document No.");
      WarehouseEntry.SETRANGE("Item No.",PurchaseLine."No.");
      WarehouseEntry.FINDSET;
      WarehouseEntry.TESTFIELD(Quantity,PurchaseLine."Qty. to Receive" / 2);  // Verify Partial Quantity.
      WarehouseEntry.NEXT;
      WarehouseEntry.TESTFIELD(Quantity,PurchaseLine."Qty. to Receive" / 2);  // Verify Partial Quantity.
    END;

    LOCAL PROCEDURE VerifyWhseAdjustmentLinesnotExist@67(ItemJournalBatch@1002 : Record 233;ItemNo@1001 : Code[20];Quantity@1000 : Decimal) : Boolean;
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      FilterItemJournalLine(ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemNo);
      ItemJournalLine.SETRANGE(Quantity,Quantity);
      EXIT(ItemJournalLine.FINDFIRST);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntryForCoutingPeriod@64(WarehouseJournalLine@1000 : Record 7311;EntryType@1001 : Option;Quantity@1002 : Decimal);
    VAR
      WarehouseEntry@1004 : Record 7312;
    BEGIN
      FIlterWarehouseEntries(WarehouseEntry,EntryType,WarehouseJournalLine."Item No.",WarehouseJournalLine."Location Code");
      WarehouseEntry.SETRANGE("Journal Template Name",WarehouseJournalLine."Journal Template Name");
      WarehouseEntry.FINDFIRST;
      WarehouseEntry.TESTFIELD(Quantity,Quantity);
      WarehouseEntry.TESTFIELD("Phys Invt Counting Period Code",WarehouseJournalLine."Phys Invt Counting Period Code");
      WarehouseEntry.TESTFIELD("Phys Invt Counting Period Type",WarehouseJournalLine."Phys Invt Counting Period Type");
    END;

    LOCAL PROCEDURE VerifyWarehouseEntriesForLotAndSerialNo@26(WarehouseJournalLine@1001 : Record 7311;EntryType@1000 : Option;Quantity@1004 : Decimal;LotNoExpected@1005 : Boolean);
    VAR
      WarehouseEntry@1002 : Record 7312;
      TrackingQuantity@1003 : Decimal;
    BEGIN
      FIlterWarehouseEntries(WarehouseEntry,EntryType,WarehouseJournalLine."Item No.",WarehouseJournalLine."Location Code");
      WarehouseEntry.FINDSET;
      TrackingQuantity := WarehouseJournalLine.Quantity;
      REPEAT
        WarehouseEntry.TESTFIELD("Serial No.",FORMAT(TrackingQuantity));
        IF LotNoExpected THEN
          WarehouseEntry.TESTFIELD("Lot No.",FORMAT(TrackingQuantity))
        ELSE
          WarehouseEntry.TESTFIELD("Lot No.",'');
        WarehouseEntry.TESTFIELD(Quantity,Quantity);
        TrackingQuantity -= 1;
      UNTIL WarehouseEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyWarehouseEntryForWhseJournal@106(RegisteredWhseActivityLine@1001 : Record 5773;SerialNo@1003 : Code[20];LotNo@1005 : Code[20];Quantity@1006 : Decimal;NextLine@1002 : Boolean);
    VAR
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      FIlterWarehouseEntries(
        WarehouseEntry,WarehouseEntry."Entry Type"::Movement,RegisteredWhseActivityLine."Item No.",
        RegisteredWhseActivityLine."Location Code");
      WarehouseEntry.SETRANGE("Whse. Document Type",WarehouseEntry."Whse. Document Type"::"Whse. Journal");
      WarehouseEntry.SETRANGE("Lot No.",LotNo);
      WarehouseEntry.FINDSET;
      WarehouseEntry.TESTFIELD(Quantity,-Quantity);
      IF NextLine THEN BEGIN
        WarehouseEntry.NEXT;
        WarehouseEntry.TESTFIELD(Quantity,Quantity);
      END;
      WarehouseEntry.TESTFIELD("Variant Code",RegisteredWhseActivityLine."Variant Code");
      WarehouseEntry.TESTFIELD("Bin Code",RegisteredWhseActivityLine."Bin Code");
      WarehouseEntry.TESTFIELD("Serial No.",SerialNo);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntryWithBlockedItem@56(WarehouseJournalLine@1002 : Record 7311;EntryType@1001 : Option;Quantity@1003 : Decimal);
    VAR
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      FIlterWarehouseEntries(WarehouseEntry,EntryType,WarehouseJournalLine."Item No.",WarehouseJournalLine."Location Code");
      WarehouseEntry.FINDFIRST;
      WarehouseEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntryForZeroQty@146(ItemNo@1000 : Code[20];BinCode@1001 : Code[20]);
    VAR
      WarehouseEntry@1002 : Record 7312;
    BEGIN
      WITH WarehouseEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Bin Code",BinCode);
        CALCSUMS(Quantity,"Qty. (Base)");
        TESTFIELD(Quantity,0);
        TESTFIELD("Qty. (Base)",0);
      END;
    END;

    LOCAL PROCEDURE VerifyWarehousePhysicalJournalLine@74(WarehouseJournalLine@1000 : Record 7311;Bin@1004 : Record 7354;ItemNo@1003 : Code[20]);
    BEGIN
      FilterWarehouseJournalLine(
        WarehouseJournalLine,WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",
        WarehouseJournalLine."Location Code");
      WarehouseJournalLine.FINDFIRST;
      WarehouseJournalLine.TESTFIELD("Item No.",ItemNo);
      WarehouseJournalLine.TESTFIELD("Bin Code",Bin.Code);
      WarehouseJournalLine.TESTFIELD("Zone Code",Bin."Zone Code");
    END;

    LOCAL PROCEDURE VerifyWarehousePhysicalJournalLineForLot@98(WarehouseJournalLine@1000 : Record 7311;LotNo@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1004 : Decimal);
    BEGIN
      FilterWarehouseJournalLine(
        WarehouseJournalLine,WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",
        WarehouseJournalLine."Location Code");
      WarehouseJournalLine.SETRANGE("Lot No.",LotNo);
      WarehouseJournalLine.FINDFIRST;
      WarehouseJournalLine.TESTFIELD("Item No.",ItemNo);
      WarehouseJournalLine.TESTFIELD("Qty. (Phys. Inventory)",Quantity);
    END;

    LOCAL PROCEDURE VerifyWarehousePhysicalJournalLineExist@71(WarehouseJournalLine@1000 : Record 7311;ZoneCode@1001 : Code[20];ItemNo@1002 : Code[20]) : Boolean;
    BEGIN
      FilterWarehouseJournalLine(
        WarehouseJournalLine,WarehouseJournalLine."Journal Template Name",WarehouseJournalLine."Journal Batch Name",
        WarehouseJournalLine."Location Code");
      WarehouseJournalLine.SETRANGE("Zone Code",ZoneCode);
      WarehouseJournalLine.SETRANGE("Item No.",ItemNo);
      EXIT(WarehouseJournalLine.FINDFIRST);
    END;

    LOCAL PROCEDURE VerifyWhsePhysJournalLine@137(ZoneCode@1001 : Code[10];BinCode@1003 : Code[20];ItemNo@1002 : Code[20];QtyCalculated@1004 : Decimal);
    VAR
      WarehouseJournalLine@1000 : Record 7311;
    BEGIN
      WITH WarehouseJournalLine DO BEGIN
        SETRANGE("Zone Code",ZoneCode);
        SETRANGE("Bin Code",BinCode);
        SETRANGE("Item No.",ItemNo);
        Assert.IsTrue(FINDFIRST,STRSUBSTNO(WarehouseLineMustExistErr,ZoneCode,BinCode,ItemNo));
        Assert.AreEqual(QtyCalculated,"Qty. (Calculated)",QtyCalculatedErr);
      END;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@14(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ConfirmMessageText@1003 : Text;
    BEGIN
      ConfirmMessageText := LibraryVariableStorage.DequeueText;
      Assert.IsTrue(STRPOS(ConfirmMessage,ConfirmMessageText) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE CalculatePhysicalInventoryCountingHandler@66(VAR CalculatePhysInvtCounting@1000 : TestRequestPage 7380);
    BEGIN
      CalculatePhysInvtCounting.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@108(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      TrackingQuantity@1001 : Variant;
      TrackingQuantity2@1002 : Integer;
    BEGIN
      TrackingQuantity2 := 0;  // Assign Variable.
      CASE LibraryVariableStorage.DequeueInteger OF
        TrackingAction::VerifyTracking:
          BEGIN
            ItemTrackingLines.LAST;
            LibraryVariableStorage.Dequeue(TrackingQuantity);
            TrackingQuantity2 := TrackingQuantity;
            REPEAT
              ItemTrackingLines."Lot No.".ASSERTEQUALS(TrackingQuantity2);
              TrackingQuantity2 -= 1;
            UNTIL ItemTrackingLines.PREVIOUS;
          END;
        TrackingAction::AssignLotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
        TrackingAction::AssistEdit:
          BEGIN
            ItemTrackingLines."Lot No.".ASSISTEDIT;
            LibraryVariableStorage.Enqueue(ItemTrackingLines."Lot No.".VALUE);  // Using LotNo for Verification as Index 1 in Queque.
          END;
        TrackingAction::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        TrackingAction::AssignMultipleLotNo:
          BEGIN
            TrackingQuantity2 := ItemTrackingLines.Quantity3.ASDECIMAL;
            UpdateItemTrackingLines(ItemTrackingLines,TrackingQuantity2);
            ItemTrackingLines.NEXT;
            UpdateItemTrackingLines(ItemTrackingLines,TrackingQuantity2);
          END;
        TrackingAction::SelectEntries:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines."New Expiration Date".SETVALUE(WORKDATE);
          END;
        TrackingAction::EditSerialNo:
          ItemTrackingLines."Serial No.".SETVALUE(LibraryUtility.GenerateGUID);
        TrackingAction::AssignSerialAndLot:
          BEGIN
            TrackingQuantity2 := ItemTrackingLines.Quantity3.ASDECIMAL;
            ItemTrackingLines.FIRST;
            REPEAT
              ItemTrackingLines."Lot No.".SETVALUE(FORMAT(TrackingQuantity2));
              ItemTrackingLines."Serial No.".SETVALUE(FORMAT(TrackingQuantity2));
              ItemTrackingLines."Quantity (Base)".SETVALUE(1);
              TrackingQuantity2 -= 1;
              ItemTrackingLines.NEXT;
            UNTIL TrackingQuantity2 = 0;
          END;
        TrackingAction::SelectEntriesWithLot:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines."New Lot No.".SETVALUE(LibraryUtility.GenerateGUID);
          END;
        TrackingAction::SelectEntriesWithNewSerialNo:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines."New Serial No.".SETVALUE(LibraryUtility.GenerateGUID);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryHandler@43(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@12(Message@1000 : Text[1024]);
    VAR
      DequeueMessage@1002 : Variant;
      MessageText@1001 : Text[1024];
    BEGIN
      LibraryVariableStorage.Dequeue(DequeueMessage);
      MessageText := DequeueMessage;
      Assert.IsTrue(STRPOS(Message,MessageText) > 0,Message);
    END;

    [MessageHandler]
    PROCEDURE DummyMessageHandler@148(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE PhysicalInventoryItemSelectionHandler@65(VAR PhysInvtItemSelection@1000 : TestPage 7380);
    VAR
      ItemNo@1001 : Variant;
      NextCountingStartDateVar@1002 : Variant;
      NextCountingEndDateVar@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ItemNo);
      PhysInvtItemSelection.FILTER.SETFILTER("Item No.",ItemNo);
      PhysInvtItemSelection.FIRST;
      LibraryVariableStorage.Dequeue(NextCountingStartDateVar);
      LibraryVariableStorage.Dequeue(NextCountingEndDateVar);
      PhysInvtItemSelection."Next Counting Start Date".ASSERTEQUALS(NextCountingStartDateVar);
      PhysInvtItemSelection."Next Counting End Date".ASSERTEQUALS(NextCountingEndDateVar);
      PhysInvtItemSelection.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@84(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WhseItemTrackingLinesHandler@9(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    VAR
      AssignSerialAndLot@1004 : Variant;
      LotNoBlank@1003 : Variant;
      TrackingAction@1007 : Variant;
      TrackingAction2@1006 : ' ,VerifyTracking,AssignLotNo,AssistEdit,AssignSerialNo,AssitEditNewSerialNoExpDate,AssignMultipleLotNo,MultipleExpirationDate,SelectEntries,AssitEditSerialNoAndRemoveExpDate,EditSerialNo,AssitEditLotNo,AssitEditNewLotNoExpDate,AssignSerialAndLot,AssignNewSerialAndLotNo';
      AssignSerialAndLot2@1005 : Boolean;
      LotNoBlank2@1002 : Boolean;
      TrackingQuantity@1001 : Decimal;
      LotNo@1008 : Code[20];
    BEGIN
      LibraryVariableStorage.Dequeue(TrackingAction);
      TrackingAction2 := TrackingAction;
      LibraryVariableStorage.Dequeue(LotNoBlank);
      LotNoBlank2 := LotNoBlank;
      LibraryVariableStorage.Dequeue(AssignSerialAndLot);
      AssignSerialAndLot2 := AssignSerialAndLot;

      CASE TrackingAction2 OF
        TrackingAction2::AssignLotNo:
          BEGIN
            WhseItemTrackingLines."Lot No.".SETVALUE(LibraryRandom.RandInt(10));  // Taking Random Value for Lot No.
            WhseItemTrackingLines.Quantity.SETVALUE(WhseItemTrackingLines.Quantity3.ASDECIMAL);
          END;
        TrackingAction2::AssitEditNewSerialNoExpDate:
          BEGIN
            WhseItemTrackingLines."Serial No.".ASSISTEDIT;
            LibraryVariableStorage.Enqueue(WhseItemTrackingLines."Serial No.".VALUE);
            WhseItemTrackingLines."New Serial No.".SETVALUE(LibraryUtility.GenerateGUID);
            LibraryVariableStorage.Enqueue(WhseItemTrackingLines."New Serial No.".VALUE);
            WhseItemTrackingLines."New Expiration Date".SETVALUE(WORKDATE);
          END;
        TrackingAction2::AssitEditNewLotNoExpDate:
          BEGIN
            WhseItemTrackingLines."Lot No.".ASSISTEDIT;
            LibraryVariableStorage.Enqueue(WhseItemTrackingLines."Lot No.".VALUE);
            WhseItemTrackingLines."New Lot No.".SETVALUE(LibraryUtility.GenerateGUID);
            LibraryVariableStorage.Enqueue(WhseItemTrackingLines."New Lot No.".VALUE);
            WhseItemTrackingLines."New Expiration Date".SETVALUE(WORKDATE);
          END;
        TrackingAction2::AssignMultipleLotNo:
          BEGIN
            LibraryVariableStorage.Dequeue(LotNoBlank);
            LotNo := LotNoBlank;
            WhseItemTrackingLines."Lot No.".ASSISTEDIT;
            WhseItemTrackingLines."New Lot No.".SETVALUE(LotNo);
            WhseItemTrackingLines."New Expiration Date".SETVALUE(WORKDATE);
          END;
        TrackingAction2::MultipleExpirationDate:
          BEGIN
            TrackingQuantity := WhseItemTrackingLines.Quantity3.ASDECIMAL;
            UpdateWhseItemTrackingLine(WhseItemTrackingLines,TrackingQuantity,WORKDATE);
            WhseItemTrackingLines.NEXT;
            UpdateWhseItemTrackingLine(
              WhseItemTrackingLines,TrackingQuantity,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
          END;
        TrackingAction2::AssitEditSerialNoAndRemoveExpDate:
          BEGIN
            WhseItemTrackingLines."Serial No.".ASSISTEDIT;
            LibraryVariableStorage.Enqueue(WhseItemTrackingLines."Serial No.".VALUE);
            WhseItemTrackingLines.Quantity.SETVALUE(1);
            WhseItemTrackingLines."New Expiration Date".SETVALUE(0D);
          END;
        TrackingAction2::AssitEditLotNo:
          WhseItemTrackingLines."Lot No.".ASSISTEDIT;
        TrackingAction2::AssignNewSerialAndLotNo:
          BEGIN
            WhseItemTrackingLines."Serial No.".ASSISTEDIT;
            WhseItemTrackingLines.Quantity.SETVALUE(0);
            WhseItemTrackingLines."Lot No.".ASSISTEDIT;
            WhseItemTrackingLines."New Serial No.".SETVALUE(LibraryUtility.GenerateGUID);
            WhseItemTrackingLines."New Lot No.".SETVALUE(LibraryUtility.GenerateGUID);
            LibraryVariableStorage.Enqueue(WhseItemTrackingLines."Serial No.".VALUE);
            LibraryVariableStorage.Enqueue(WhseItemTrackingLines."New Serial No.".VALUE);
            LibraryVariableStorage.Enqueue(WhseItemTrackingLines."Lot No.".VALUE);
            LibraryVariableStorage.Enqueue(WhseItemTrackingLines."New Lot No.".VALUE)
          END;
      END;

      IF LotNoBlank2 THEN
        WhseItemTrackingLines."Lot No.".SETVALUE('');

      IF AssignSerialAndLot2 THEN BEGIN
        TrackingQuantity := WhseItemTrackingLines.Quantity3.ASDECIMAL;
        WhseItemTrackingLines.FIRST;
        REPEAT
          WhseItemTrackingLines."Serial No.".SETVALUE(FORMAT(TrackingQuantity));
          WhseItemTrackingLines."Lot No.".SETVALUE(FORMAT(TrackingQuantity));
          WhseItemTrackingLines.Quantity.SETVALUE(1);
          TrackingQuantity -= 1;
          WhseItemTrackingLines.NEXT;
        UNTIL TrackingQuantity = 0;
      END;
      WhseItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WhseItemTrackingLinesPageHandler@144(VAR WhseItemTrackingLines@1000 : TestPage 6550);
    VAR
      ItemTrackingMode@1001 : 'Lot No,Serial No';
    BEGIN
      ItemTrackingMode := LibraryVariableStorage.DequeueInteger;
      CASE ItemTrackingMode OF
        ItemTrackingMode::"Lot No":
          WhseItemTrackingLines."Lot No.".SETVALUE(LibraryVariableStorage.DequeueText);
        ItemTrackingMode::"Serial No":
          WhseItemTrackingLines."Serial No.".SETVALUE(LibraryVariableStorage.DequeueText);
      END;
      WhseItemTrackingLines.Quantity.SETVALUE(1);
      WhseItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesHandler@152(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      ItemTrackingMode@1001 : 'Lot No,Serial No';
    BEGIN
      ItemTrackingMode := LibraryVariableStorage.DequeueInteger;
      ItemTrackingLines.LAST;
      CASE ItemTrackingMode OF
        ItemTrackingMode::"Lot No":
          ItemTrackingLines."Lot No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
        ItemTrackingMode::"Serial No":
          ItemTrackingLines."Serial No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      END;
      ItemTrackingLines."Quantity (Base)".ASSERTEQUALS(1);
      Assert.IsFalse(ItemTrackingLines.PREVIOUS,ExcessiveItemTrackingErr);
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE WhseJournalBatchesListHandler@145(VAR WhseJournalBatchesList@1000 : TestPage 7329);
    BEGIN
      WhseJournalBatchesList.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CalculateInventoryPageHandler@115(VAR CalculateInventory@1000 : TestRequestPage 790);
    VAR
      ItemNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ItemNo);
      CalculateInventory.DocumentNo.SETVALUE(ItemNo);
      CalculateInventory.Item.SETFILTER("No.",ItemNo);
      CalculateInventory.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE WhseCalculateInventoryRequestPageHandler@134(VAR WhseCalculateInventory@1000 : TestRequestPage 7390);
    VAR
      ZoneCode@1004 : Variant;
      BinCode@1003 : Variant;
      ItemsNotOnInventory@1001 : Variant;
      ItemNo@1002 : Variant;
      Zone@1005 : Text;
      Bin@1006 : Text;
    BEGIN
      LibraryVariableStorage.Dequeue(ItemsNotOnInventory);
      LibraryVariableStorage.Dequeue(ItemNo);
      LibraryVariableStorage.Dequeue(ZoneCode);
      LibraryVariableStorage.Dequeue(BinCode);
      Zone := ZoneCode;
      Bin := BinCode;

      WhseCalculateInventory.WhseDocumentNo.SETVALUE(LibraryUtility.GetGlobalNoSeriesCode);
      WhseCalculateInventory.Control11.SETVALUE(ItemsNotOnInventory); // Control11: Items Not on Inventory.
      WhseCalculateInventory."Bin Content".SETFILTER("Item No.",ItemNo);
      IF Zone <> '' THEN
        WhseCalculateInventory."Bin Content".SETFILTER("Zone Code",ZoneCode);
      IF Bin <> '' THEN
        WhseCalculateInventory."Bin Content".SETFILTER("Bin Code",BinCode);
      WhseCalculateInventory.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [Warehouse Journal] [SCM]
      Test Cases for SCM Warehouse Journals.
        1.  Register Warehouse Item Journal without Lot No. On Item Tracking Line and Verify the Error.
        2.  Register Partial Purchase Order with Item Tracking Line and Verify Entries in Warehouse Entry.
        3.  Register Warehouse Item Journal without Quantity and Verify the Message There is nothing to register.
        4.  Register Warehouse Physical Inventory Journal without Quantity and Verify the Message There is nothing to register.
        5.  Register Warehouse Reclassification Journal without Quantity and Verify the Message There is nothing to register.
        6.  Register Warehouse Journal Line with Serial No., Lot No. and Item having Item Tracking Code as Serial No.
        7.  Register Warehouse Journal Line with Serial No. and Lot No. and Verify Serial No. and Lot No. on Warehouse Entries.
        8.  Register Warehouse Journal Line with Serial No. and Lot No. Calculate Warehouse Adjustment and Verify Item Tracking Line for Serial No. and Lot No.
        9.  Verify Error Message while posting Physical Inventory with Total Quantity greater than Lot Quantity.
        10. Post Item Journal. Delete Bin, Bin Content and Verify Error Messages.
        11. Post Physical Inventory Journal and Verify bin gets Deleted.
        12. Register Warehouse Item Journal Line with Blocked Item and Verify Warehouse Entry.
        13. Calculate and Post Warehouse Adjustment with Multiple UOM. Calculate Warehouse Adjustment with Multiple UOM and Verify Posted Entries are not Calculated.
        14. Calculate Counting Period on Warehouse Physical Inventory Journal for Item and Post with no Difference in Quantity.
        15. Calculate Counting Period on Warehouse Physical Inventory Journal for Item and Post with Difference in Quantity.
        16. Calculate Inventory on Warehouse Physical Inventory Journal for different Bins and Item Variant.
        17. Calculate Inventory on Physical Inventory Journal for Different Location.
        18. Calculate Inventory on Physical Inventory Journal for Multiple Unit of Measure.
        19. Register Warehouse Reclassification Journal with New Expiration Date, New Serial No. and Verify Item Ledger Entries.
        20. Register Warehouse Reclassification Journal with Multiple Lot and Different Expiration Date
        21. Register Warehouse Reclassification Journal with Multiple Expiration Date on Lot No.
        22. Register Warehouse Reclassification after Removing Expiration Date and Verify Item Ledger Entries.
        23. Verify Error while Posting Item Reclassification with Different Expiration Date.
        24. Reclassification of Item with Location as Require Receive to Basic Location.
        25. Verify Error Message on changing Item Tracking Line on Physical Inventory Journal.
        26. Register Put Away. Change Quantity in Physical Inventory. Calculate and Post Inventory on Physical Inventory Journal. Verify Inventory is reduced.
        27. Verify Error Message on Changing Item Tracking Line on Item Journal Line.
        28. Register Put Away. Change Quantity in Physical Inventory and Post the Adjustment. Verify Inventory is reduced.
        29. Register Warehouse Reclassification Journal without Changing Item Tracking Lines and Verify Warehouse Entries.
        30. Register Warehouse Reclassification Journal with Changes on Item Tracking Line. Verify Item Ledger Entries and Warehouse Entries.
        31. Register Warehouse Reclassification Journal with New Lot and Serial No. on Item Tracking Line. Verify Item Ledger Entries and Warehouse Entries.
        32. Calculate Inventory on Physical Inventory Journal with Lot No.
        33. Bin Contents deleted when filter to Lot Number is set on the Bin Content.
        34. Verify Error Message on changing Location Code on Physical Inventory Journal.
        35. Verify Error Message on changing New Location Code on Item Reclassification Journal.
        36. Verify Error Message on changing New Serial No on Item Tracking Line on Item Reclassification Journal.
        37. Register Warehouse Journal Line for multiple times with blank No. Series in Whse. Journal Batch. Verify User ID is filled in Warehouse Entry.
        38. Verify Warehouse Physical Journal Line is suggested when Calculate Inventory With "Items Not On Inventory" and Zone Filter for Item (exist Warehouse Entries but the actual Quantity is 0 on bin).
        39. Verify Warehouse Physical Journal Line is suggested when Calculate Inventory With "Items Not On Inventory" and Bin Filter for Item (exist Warehouse Entries but the actual Quantity is 0 on bin).

        Covers Test Cases for WI - 286464
        ---------------------------------------------------------------------------
        Test Function Name                                                  TFS ID
        ---------------------------------------------------------------------------
        PostWhseItemJournalWithoutLotNoOnItemTrackingLine                   143060
        PostPartialPurchaseOrderWithItemTrackingLine                        143061
        PostWhseItemJournalWithoutQuantity                                  128766
        PostWhsePhysicalInventoryJournalWithoutQuantity                     128766
        PostWhseReclassificationJournalWithoutQuantity                      128766

        Covers Test Cases for WI - 286465
        ---------------------------------------------------------------------------
        Test Function Name                                                  TFS ID
        ---------------------------------------------------------------------------
        RegisterWhseItemJournalWithSerialAndLotNoWithoutLotSpecific         128845
        RegisterWhseItemJournalWithSerialAndLotNo                           128844
        CalculateAdjustmentWithSerialAndLotNo                               128844

        Covers Test Cases for WI - 286463
        ---------------------------------------------------------------------------
        Test Function Name                                                  TFS ID
        ---------------------------------------------------------------------------
        CalculatePhysicalInventoryAndPost                                   127633
        DeleteBinAfterPostingItemJournalLineAndVerifyError                  127627
        DeleteBinAfterPostingPhysicalInventoryJournal                       127627

        Covers Test Cases for WI - 286470
        ---------------------------------------------------------------------------
        Test Function Name                                                  TFS ID
        ---------------------------------------------------------------------------
        RegisterWarehouseItemJournalLineWithBlockedItem                     127564

        Covers Test Cases for WI - 291159
        ---------------------------------------------------------------------------
        Test Function Name                                                  TFS ID
        ---------------------------------------------------------------------------
        CalculateWarehouseAdjustmentWithMultipleUOM                         127603

        Covers Test Cases for WI - 291161
        --------------------------------------------------------------------------------------
        Test Function Name                                                             TFS ID
        --------------------------------------------------------------------------------------
        PostPhysicalInventoryJournalForCountingPeriodWithoutQuantityDifference         128850
        PostPhysicalInventoryJournalForCountingPeriodWithQuantityDifference            128850

        Covers Test Cases for WI - 293537
        -------------------------------------------------------------------------------------------------------
        Test Function Name                                                                            TFS ID
        -------------------------------------------------------------------------------------------------------
        CalculateInventoryOnWhsePhysicalInventoryJournalWithDifferentZoneAndItemVariant           128837,128838
        CalculateInventoryOnPhysicalInventoryJournalWithDifferentLocation                         128837,128838
        CalculateInventoryOnPhysicalInventoryJournalMultipleUOM                                   128837,128838

        Covers Test Cases for WI - 294142
        --------------------------------------------------------------------------------------
        Test Function Name                                                             TFS ID
        --------------------------------------------------------------------------------------
        RegisterReclassificationWithExpirationDate                                     131966
        RegisterReclassificationWithMultipleLotNoAndDifferentExpirationDate            131967
        RegisterReclassificationWithMultipleExpirationDate                             131967

        Covers Test Cases for WI - 295806
        --------------------------------------------------------------------------------------
        Test Function Name                                                             TFS ID
        --------------------------------------------------------------------------------------
        RegisterReclassificationAfterRemovingExpirationDate                            131969
        ItemReclassificationWithDifferentExpirationDate                                131970

        Covers Test Cases for WI - 298053
        -----------------------------------------------------------------------------------------------------
        Test Function Name                                                                           TFS ID
        -----------------------------------------------------------------------------------------------------
        ItemReclassificationWithLocationAsRequireReceiveAndBasicLocation                             131971

        Covers Test Cases for WI - 297699
        ----------------------------------------------------------------------------------------------------------
        Test Function Name                                                                           TFS ID
        ----------------------------------------------------------------------------------------------------------
        ErrorChangingItemTrackingLineOnItemJournal                                                   131973,131974
        CalculateAndPostWarehouseAdjustmentAfterChangingQuantityOnWarehousePhysicalInventory         131973,131974

        Covers Test Cases for WI - 297695
        ------------------------------------------------------------------------------------------------------
        Test Function Name                                                                           TFS ID
        ------------------------------------------------------------------------------------------------------
        ErrorChangingItemTrackingLineOnPhysicalInventoryJournal                                      131972
        CalculateAndPostPhysicalInventoryAfterChangingQuantityOnWarehousePhysicalInventory           131972
        RegisterReclassificationWithoutChangingItemTrackingLineWithLot                               129287
        RegisterReclassificationChangingItemTrackingLineWithLot                                      129287
        RegisterReclassificationWithSerialAndLotNo                                                   129287

        Covers Test Cases for WI - 299170
        ------------------------------------------------------------------------------------------------------
        Test Function Name                                                                           TFS ID
        ------------------------------------------------------------------------------------------------------
        CalculateInventoryOnWarehousePhysicalInventoryJournalWithLot                                 128780

        Covers Test Cases for WI - 290129
        ----------------------------------------------------------------------------------------------------
        Test Function Name                                                                           TFS ID
        ----------------------------------------------------------------------------------------------------
        DeleteBinContentWithFlowFilter                                                               291086

        Covers Test Cases for WI - 303769
        ----------------------------------------------------------------------------------------------------
        Test Function Name                                                                           TFS ID
        ----------------------------------------------------------------------------------------------------
        ErrorChangingLocationCodeOnPhysicalInventoryJournal                                          129286
        ErrorChangingNewLotNoOnItemReclassificationJournal                                           129286
        ErrorChangingNewSerialNoOnItemReclassificationJournal                                        129286

        Covers Test Cases for Sicily Bug
        ----------------------------------------------------------------------------------------------------
        Test Function Name                                                                           TFS ID
        ---------------------------------------------------------------------------------------------------
        RegisterWhseItemJnlWithoutNoSeriesInWhseJnlBatch                                              59008

        Covers Test Cases for Sicily Bug
        ----------------------------------------------------------------------------------------------------
        Test Function Name                                                                           TFS ID
        ----------------------------------------------------------------------------------------------------
        CalculateInventoryWithItemsNotOnInventoryAndZoneFilter                                        96720
        CalculateInventoryWithItemsNotOnInventoryAndBinFilter                                         96720
    }
    END.
  }
}

