OBJECT Codeunit 137034 SCM Production Journal
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      TempItemJournalLine@1015 : TEMPORARY Record 83;
      TempItemJournalLine2@1012 : TEMPORARY Record 83;
      TempDimensionSetEntry@1014 : TEMPORARY Record 480;
      ItemJournalTemplate@1018 : Record 82;
      ItemJournalBatch@1008 : Record 233;
      Assert@1009 : Codeunit 130000;
      LibraryInventory@1022 : Codeunit 132201;
      LibraryManufacturing@1010 : Codeunit 132202;
      LibraryDimension@1002 : Codeunit 131001;
      LibrarySales@1023 : Codeunit 130509;
      LibraryVariableStorage@1025 : Codeunit 131004;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryRandom@1003 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      PostedProdJournal@1020 : Boolean;
      ReserveItemNo@1019 : Code[20];
      ProductionOrderNo@1005 : Code[20];
      ErrMsgReservedItem@1006 : TextConst 'ENU=Reserved item %1 is not on inventory.';
      ErrMsgAppliesToEntry@1013 : TextConst 'ENU=Applies-to Entry must not be filled out when reservations exist in Item Ledger Entry';
      ErrMsgQuantity@1016 : TextConst 'ENU=Quantities must match.';
      ErrMsgTime@1017 : TextConst 'ENU=%1 must match.';
      UnknownError@1011 : TextConst 'ENU=Unknown Error.';
      ErrMsgDimensions@1007 : TextConst 'ENU=Dimensions must be same.';
      WrongFilterOnProdOrderCompListErr@1026 : TextConst 'ENU=Wrong filter is set on Prod. Order Line No. field in Prod. Order Comp. Line List page.';

    [Test]
    [HandlerFunctions(JournalReservePageHandler)]
    PROCEDURE ItemProductionJnlReserveItem@12();
    BEGIN
      // Check Reserved Item Not On Inventory error.

      // Create required Production Journal Setups and Open Production Journal to perform required actions.
      Initialize;
      ProdJnlForRelProdOrder;

      // Verify: Verification of 'Reserved Item Not On Inventory' when posting.
      Assert.AreEqual(STRSUBSTNO(ErrMsgReservedItem,ReserveItemNo),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(JournalApplyPageHandler)]
    PROCEDURE ItemProductionJnlApplyToEntry@14();
    BEGIN
      // Check Applies To Entry With Reservation error.

      // Create required Production Journal Setups and Open Production Journal to perform required actions.
      Initialize;
      ProdJnlForRelProdOrder;

      // Verify: Verification of 'Applies To Entry' error message when posting.
      Assert.AreEqual(STRSUBSTNO(ErrMsgAppliesToEntry),PADSTR(GETLASTERRORTEXT,84),UnknownError);
    END;

    [Test]
    [HandlerFunctions(JournalPageHandler)]
    PROCEDURE ItemProductionJnlNoPosting@6();
    VAR
      ProdOrderNo@1000 : Code[20];
    BEGIN
      // Check Production Journal Lines for Production Item in Released Production Order before lines have been posted.

      // Create required Production Journal Setups and Open Production Journal to perform required actions.
      Initialize;
      ProdOrderNo := ProdJnlForRelProdOrder;

      // Verify: Verification of Production Journal Lines - Consumption and Output without posting of Production Journal.
      VerifyConsumptionEntries(ProdOrderNo);
      VerifyOutputEntries(ProdOrderNo);
    END;

    LOCAL PROCEDURE ProdJnlForRelProdOrder@32() : Code[20];
    VAR
      Item@1005 : Record 27;
      ProductionBOMHeader@1007 : Record 99000771;
      ProductionOrder@1004 : Record 5405;
      RoutingHeader@1006 : Record 99000763;
      ChildItemNo@1001 : Code[20];
      ChildItemNo2@1002 : Code[20];
    BEGIN
      // Setup: Create Items and Released Production Order Setup.
      CreateItemsWithInventory(
        ChildItemNo,ChildItemNo2,Item."Manufacturing Policy"::"Make-to-Stock",Item."Manufacturing Policy"::"Make-to-Order");
      ReserveItemNo := ChildItemNo2;
      LibraryManufacturing.CreateCertifProdBOMWithTwoComp(ProductionBOMHeader,ChildItemNo,ChildItemNo2,1);  // Value important.
      CreateRoutingSetup(RoutingHeader);
      CreateItem(
        Item,Item."Costing Method"::FIFO,RoutingHeader."No.",ProductionBOMHeader."No.",Item."Manufacturing Policy"::"Make-to-Order");
      CreateAndRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,Item."No.");
      ProductionOrderNo := ProductionOrder."No.";

      // Exercise: Open Production Journal and perform required actions in Handler function corresponding to each called function.
      // ------------------------------------------------------------
      // Function                         Page Handler Invoked
      // ------------------------------------------------------------
      // ItemProductionJnlReserveItem     JournalReservePageHandler
      // ItemProductionJnlApplyToEntry    JournalApplyPageHandler
      // ItemProductionJnlNoPosting       JournalPageHandler
      // ------------------------------------------------------------

      OpenProductionJournal(ProductionOrder,ProductionOrderNo);
      EXIT(ProductionOrderNo);
    END;

    [Test]
    [HandlerFunctions(UpdateJournalPostPageHandler)]
    PROCEDURE ItemProductionJnlWithPosting@27();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1004 : Record 5405;
      RoutingHeader@1001 : Record 99000763;
    BEGIN
      // Setup: Create Items and Released Production Order Setup.
      Initialize;
      CreateRoutingSetup(RoutingHeader);
      CreateProdItem(Item,RoutingHeader."No.");
      CreateAndRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,Item."No.");
      ProductionOrderNo := ProductionOrder."No.";

      // Exercise: Open Production Journal based on Production Order Lines. Post Lines and re-open Production Journal lines after posting.
      // Page Handler Invoked: UpdateJournalPostPageHandler.
      ProductionJournalPostLines(ProductionOrder,ProductionOrderNo);

      // Verify: Verification of Production Journal Lines after modification and posting.
      VerifyConsumpEntriesAfterPost;
      VerifyOutputEntriesAfterPost;
    END;

    [Test]
    [HandlerFunctions(JournalPageHandler)]
    PROCEDURE FamilyProductionJnlNoPosting@102();
    VAR
      Item@1000 : Record 27;
      Item2@1006 : Record 27;
      ProdOrderLine@1008 : Record 5406;
      ProductionOrder@1007 : Record 5405;
      RoutingHeader@1004 : Record 99000763;
      Family@1002 : Record 99000773;
      ProductionJournalMgt@1005 : Codeunit 5510;
    BEGIN
      // Setup: Create Items, Family and Released Production Order Setup.
      Initialize;
      CreateProdItem(Item,'');
      CreateProdItem(Item2,'');
      CreateRoutingSetup(RoutingHeader);
      CreateFamily(Family,RoutingHeader."No.",Item."No.",Item2."No.");
      CreateAndRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Family,Family."No.");
      ProductionOrderNo := ProductionOrder."No.";

      // Exercise: Select first Production Order line and Open Production Journal.
      // Page Handler Invoked: JournalPageHandler.
      SelectProdOrderLine(ProdOrderLine,ProductionOrderNo);
      ProductionJournalMgt.Handling(ProductionOrder,ProdOrderLine."Line No.");

      // Verify: Verification of Production Journal Lines without posting.
      VerifyFamilyConsumptionEntries(ProdOrderLine."Item No.",ProductionOrderNo);
      VerifyFamilyOutputEntries(ProdOrderLine."Item No.",ProductionOrder."Source No.");

      // Exercise: Select second Production Order line and Open Production Journal.
      // Page Handler Invoked: JournalPageHandler
      ProdOrderLine.NEXT;
      ProductionJournalMgt.Handling(ProductionOrder,ProdOrderLine."Line No.");

      // Verify: Verification of Production Journal Lines without posting.
      VerifyFamilyConsumptionEntries(ProdOrderLine."Item No.",ProductionOrderNo);
      VerifyFamilyOutputEntries(ProdOrderLine."Item No.",ProductionOrder."Source No.");
    END;

    [Test]
    [HandlerFunctions(PostJournalPageHandler)]
    PROCEDURE FamilyProductionJnlWithPosting@34();
    VAR
      Item@1005 : Record 27;
      Item2@1004 : Record 27;
      ProductionOrder@1007 : Record 5405;
      RoutingHeader@1000 : Record 99000763;
      Family@1001 : Record 99000773;
    BEGIN
      // Setup: Create Items, Family and Released Production Order Setup.
      Initialize;
      CreateProdItem(Item,'');
      CreateProdItem(Item2,'');
      CreateRoutingSetup(RoutingHeader);
      CreateFamily(Family,RoutingHeader."No.",Item."No.",Item2."No.");
      CreateAndRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Family,Family."No.");
      ProductionOrderNo := ProductionOrder."No.";

      // Exercise: Open Production Journal based on Production Order Lines. Post Lines and re-open Production Journal lines after posting.
      // Page Handler Invoked: PostJournalPageHandler.
      ProductionJournalPostLines(ProductionOrder,ProductionOrderNo);

      // Verify: Verification of Production Journal Lines after posting.
      VerifyConsumpEntriesAfterPost;
      VerifyOutputEntriesAfterPost;
    END;

    [Test]
    [HandlerFunctions(JournalPageHandler)]
    PROCEDURE SalesProductionJnlNoPosting@16();
    VAR
      Item@1004 : Record 27;
      ProductionOrder@1007 : Record 5405;
      RoutingHeader@1001 : Record 99000763;
      SalesHeader@1000 : Record 36;
    BEGIN
      // Setup: Create Items, Sales Order and Released Production Order Setup.
      Initialize;
      CreateRoutingSetup(RoutingHeader);
      CreateProdItem(Item,RoutingHeader."No.");
      CreateSalesOrder(SalesHeader,Item."No.");
      CreateAndRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::"Sales Header",SalesHeader."No.");
      ProductionOrderNo := ProductionOrder."No.";

      // Exercise: Select Production Order line and Open Production Journal.
      // Page Handler Invoked: JournalPageHandler.
      OpenProductionJournal(ProductionOrder,ProductionOrderNo);

      // Verify: Verification of Production Journal Lines without posting.
      VerifyConsumptionEntries(ProductionOrderNo);
      VerifyOutputEntries(ProductionOrderNo);
    END;

    [Test]
    [HandlerFunctions(PostJournalPageHandler)]
    PROCEDURE SalesProductionJnlWithPosting@7();
    VAR
      SalesHeader@1000 : Record 36;
      Item@1004 : Record 27;
      ProductionOrder@1007 : Record 5405;
      RoutingHeader@1003 : Record 99000763;
    BEGIN
      // Setup: Create Items, Sales Order and Released Production Order Setup.
      Initialize;
      CreateRoutingSetup(RoutingHeader);
      CreateProdItem(Item,RoutingHeader."No.");
      CreateSalesOrder(SalesHeader,Item."No.");
      CreateAndRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::"Sales Header",SalesHeader."No.");
      ProductionOrderNo := ProductionOrder."No.";

      // Exercise: Open Production Journal based on Production Order Lines. Post Lines and re-open Production Journal lines after posting.
      // Page Handler Invoked: PostJournalPageHandler.
      ProductionJournalPostLines(ProductionOrder,ProductionOrderNo);

      // Verify: Verification of Production Journal Lines after posting.
      VerifyConsumpEntriesAfterPost;
      VerifyOutputEntriesAfterPost;
    END;

    [Test]
    [HandlerFunctions(JournalPageHandler)]
    PROCEDURE ItemProdJnlNoRouting@2();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1008 : Record 5405;
      RoutingHeader@1001 : Record 99000763;
    BEGIN
      // Setup: Create Items and Released Production Order.
      Initialize;
      CreateRoutingSetup(RoutingHeader);
      CreateProdItem(Item,RoutingHeader."No.");
      CreateAndRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,Item."No.");
      ProductionOrderNo := ProductionOrder."No.";

      // Exercise: Open Production Journal based on Production Order Lines.
      // Page Handler Invoked: JournalPageHandler.
      OpenProductionJournal(ProductionOrder,ProductionOrderNo);

      // Verify: Verification of Production Journal Lines without posting.
      VerifyConsumptionEntries(ProductionOrderNo);
      VerifyOutputEntries(ProductionOrderNo);
    END;

    [Test]
    [HandlerFunctions(PostJournalPageHandler)]
    PROCEDURE ItemProdJnlNoRoutingPosting@8();
    VAR
      Item@1001 : Record 27;
      ProductionOrder@1004 : Record 5405;
      RoutingHeader@1000 : Record 99000763;
    BEGIN
      // Setup: Create Items and Released Production Order.
      Initialize;
      CreateRoutingSetup(RoutingHeader);
      CreateProdItem(Item,RoutingHeader."No.");
      CreateAndRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,Item."No.");
      ProductionOrderNo := ProductionOrder."No.";

      // Exercise: Open Production Journal based on Production Order Lines. Post Lines and re-open Production Journal lines after posting.
      // Page Handler Invoked: PostJournalPageHandler.
      ProductionJournalPostLines(ProductionOrder,ProductionOrderNo);

      // Verify: Verification of Production Journal Lines without posting.
      VerifyConsumpEntriesAfterPost;
      VerifyOutputEntriesAfterPost;
    END;

    [Test]
    [HandlerFunctions(JournalDimPageHandler)]
    PROCEDURE ItemProdJnlDimensions@30();
    VAR
      ProductionOrder@1008 : Record 5405;
      DefaultDimension@1005 : Record 352;
      DefaultDimension2@1002 : Record 352;
      DimSetIDProdOrder@1011 : Integer;
    BEGIN
      // Setup: Create Items with Dimensions and Create Released Production Order.
      Initialize;
      DimSetIDProdOrder := CreateDimRelProdOrderSetup(ProductionOrder,DefaultDimension,DefaultDimension2);
      ProductionOrderNo := ProductionOrder."No.";

      // Exercise: Open Production Journal.
      // Page Handler Invoked: JournalDimPageHandler.
      OpenProductionJournal(ProductionOrder,ProductionOrderNo);

      // Verify: Verification of Dimensions on Production Journal lines.
      // Dimensions for Consumption Entries.
      TempItemJournalLine2.FINDSET;
      VerifyDimensionSetEntry(DefaultDimension);
      TempItemJournalLine2.NEXT;
      VerifyDimensionSetEntry(DefaultDimension2);

      // Dimensions for Output Entries.
      TempItemJournalLine2.FINDLAST;
      Assert.AreEqual(DimSetIDProdOrder,TempItemJournalLine2."Dimension Set ID",ErrMsgDimensions);
    END;

    [Test]
    [HandlerFunctions(PostJournalDimPageHandler)]
    PROCEDURE ItemProdJnlDimensionsPosting@20();
    VAR
      ProductionOrder@1006 : Record 5405;
      DefaultDimension@1004 : Record 352;
      DefaultDimension2@1003 : Record 352;
    BEGIN
      // Setup: Create Items with Dimensions and Create Released Production Order.
      Initialize;
      CreateDimRelProdOrderSetup(ProductionOrder,DefaultDimension,DefaultDimension2);
      ProductionOrderNo := ProductionOrder."No.";

      // Exercise: Open and Post Production Journal.
      // Page Handler Invoked: PostJournalDimPageHandler.
      ProductionJournalPostLines(ProductionOrder,ProductionOrderNo);

      // Verify: Verification of Dimensions of posted Production Journal Lines from Item Ledger entry.
      VerifyDimensionSetId(DefaultDimension."No.");
      VerifyDimensionSetId(DefaultDimension2."No.");
      VerifyDimensionSetId(ProductionOrder."Source No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderCompLineListPageHandler)]
    PROCEDURE ProdOrderCompLinesAreFilteredByNotBlankProdOrderLineNo@26();
    VAR
      ProdOrderLine@1000 : Record 5406;
      ConsumptionJournal@1003 : TestPage 99000846;
    BEGIN
      // [FEATURE] [Consumption Journal] [UI]
      // [SCENARIO 215892] List of prod. order components should be filtered by Prod. Order Line No. on looking up Prod. Order Comp. Line No. field in consumption journal, if Order Line No. on the journal line is not blank.
      Initialize;

      // [GIVEN] Prod. Order Line "X".
      MockProdOrderLine(ProdOrderLine);

      // [GIVEN] New consumption journal line.
      // [GIVEN] Order No. and Order Line No. on the journal line are selected from "X".
      ConsumptionJournal.OPENEDIT;
      ConsumptionJournal.NEW;
      ConsumptionJournal."Order No.".SETVALUE(ProdOrderLine."Prod. Order No.");
      ConsumptionJournal."Order Line No.".SETVALUE(ProdOrderLine."Line No.");

      // [WHEN] Look up Prod. Order Comp. Line No. field.
      LibraryVariableStorage.Enqueue(FORMAT(ProdOrderLine."Line No."));
      ConsumptionJournal."Prod. Order Comp. Line No.".LOOKUP;

      // [THEN] Prod. Order Comp. Line List page is opened and filtered by Prod. Order Line No.
      // The verification is done in ProdOrderCompLineListPageHandler.
    END;

    [Test]
    [HandlerFunctions(ProdOrderCompLineListPageHandler)]
    PROCEDURE ProdOrderCompLinesAreNotFilteredByBlankProdOrderLineNo@56();
    VAR
      ProdOrderLine@1001 : Record 5406;
      ConsumptionJournal@1000 : TestPage 99000846;
    BEGIN
      // [FEATURE] [Consumption Journal] [UI]
      // [SCENARIO 215892] List of prod. order components should not be filtered by Prod. Order Line No. on looking up Prod. Order Comp. Line No. field in consumption journal, if Order Line No. on the journal line is blank.
      Initialize;

      // [GIVEN] Prod. Order Line "X".
      MockProdOrderLine(ProdOrderLine);

      // [GIVEN] New consumption journal line.
      // [GIVEN] Order No. on the journal line is selected from "X", Order Line No. is blank.
      ConsumptionJournal.OPENEDIT;
      ConsumptionJournal.NEW;
      ConsumptionJournal."Order No.".SETVALUE(ProdOrderLine."Prod. Order No.");
      ConsumptionJournal."Order Line No.".SETVALUE('');

      // [WHEN] Look up Prod. Order Comp. Line No. field.
      LibraryVariableStorage.Enqueue('');
      ConsumptionJournal."Prod. Order Comp. Line No.".LOOKUP;

      // [THEN] Prod. Order Comp. Line List page is opened and not filtered by Prod. Order Line No.
      // The verification is done in ProdOrderCompLineListPageHandler.
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;
      UpdateSalesReceivablesSetup;
      ItemJournalSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ItemJournalSetup@75();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@11();
    BEGIN
      LibrarySales.SetCreditWarningsToNoWarnings;
      LibrarySales.SetStockoutWarning(FALSE);
    END;

    LOCAL PROCEDURE CreateItem@5(VAR Item@1000 : Record 27;CostingMethod@1004 : Option;RoutingNo@1001 : Code[20];ProductionBOMNo@1003 : Code[20];ItemManufacturingPolicy@1005 : Option);
    BEGIN
      // Random value important for test.
      LibraryManufacturing.CreateItemManufacturing(
        Item,CostingMethod,LibraryRandom.RandInt(50) + 10,Item."Reordering Policy",
        Item."Flushing Method",RoutingNo,ProductionBOMNo);
      Item.VALIDATE("Manufacturing Policy",ItemManufacturingPolicy);
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingSetup@9(VAR RoutingHeader@1001 : Record 99000763);
    VAR
      WorkCenter@1000 : Record 99000754;
      MachineCenter@1004 : Record 99000758;
      RoutingLine@1006 : Record 99000764;
    BEGIN
      CreateWorkCenter(WorkCenter);
      CreateMachineCenter(MachineCenter,WorkCenter."No.");
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");
      RoutingLine.Type := RoutingLine.Type::"Machine Center";
      CreateRoutingLine(RoutingLine,RoutingHeader,MachineCenter."No.");
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWorkCenter@53(VAR WorkCenter@1004 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);
    END;

    LOCAL PROCEDURE CreateMachineCenter@51(VAR MachineCenter@1002 : Record 99000758;WorkCenterNo@1000 : Code[20]);
    BEGIN
      // Random value important for test.
      LibraryManufacturing.CreateMachineCenterWithCalendar(MachineCenter,WorkCenterNo,LibraryRandom.RandDec(105,1));
    END;

    LOCAL PROCEDURE CreateRoutingLine@17(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random used such that the Next Operation No is greater than the Previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));

      // Random values not important for test.
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,CenterNo,OperationNo,LibraryRandom.RandInt(5),LibraryRandom.RandInt(5));
    END;

    LOCAL PROCEDURE FindLastOperationNo@19(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
    END;

    LOCAL PROCEDURE CreateProdItem@72(VAR Item@1005 : Record 27;RoutingNo@1001 : Code[20]);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
      ChildItemNo@1002 : Code[20];
      ChildItemNo2@1003 : Code[20];
    BEGIN
      // Create Child Items.
      CreateItemsWithInventory(
        ChildItemNo,ChildItemNo2,Item."Manufacturing Policy"::"Make-to-Stock",Item."Manufacturing Policy"::"Make-to-Stock");

      // Create Production BOM.
      LibraryManufacturing.CreateCertifProdBOMWithTwoComp(ProductionBOMHeader,ChildItemNo,ChildItemNo2,1);  // Value important.

      // Create parent Item and attach Routing and Production BOM.
      CreateItem(Item,Item."Costing Method"::FIFO,RoutingNo,ProductionBOMHeader."No.",Item."Manufacturing Policy"::"Make-to-Order");
    END;

    LOCAL PROCEDURE CreateItemsWithInventory@3(VAR ChildItemNo@1008 : Code[20];VAR ChildItemNo2@1009 : Code[20];ItemManufacturingPolicy@1006 : Option;ItemManufacturingPolicy2@1007 : Option);
    VAR
      Item@1002 : Record 27;
      ItemJournalLine@1005 : Record 83;
    BEGIN
      CreateItem(Item,Item."Costing Method"::FIFO,'','',ItemManufacturingPolicy);
      ChildItemNo := Item."No.";
      CLEAR(Item);
      CreateItem(Item,Item."Costing Method"::FIFO,'','',ItemManufacturingPolicy2);
      ChildItemNo2 := Item."No.";

      // Update Inventory for Item, random value important for test.
      CreateAndPostItemJournal(ItemJournalLine."Entry Type"::"Positive Adjmt.",ChildItemNo,LibraryRandom.RandInt(100) + 10);
      CreateAndPostItemJournal(ItemJournalLine."Entry Type"::"Positive Adjmt.",ChildItemNo2,LibraryRandom.RandInt(100) + 10);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournal@25(EntryType@1002 : Option;ItemNo@1004 : Code[20];Qty@1005 : Decimal);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      // Create Item Journal to populate Item Quantity.
      ClearJournal(ItemJournalBatch);  // Clear Item Journal Template and Journal Batch.
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Qty);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE ClearJournal@134(ItemJournalBatch@1001 : Record 233);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CLEAR(ItemJournalLine);
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.DELETEALL;
    END;

    LOCAL PROCEDURE SelectProdOrderLine@10(VAR ProdOrderLine@1000 : Record 5406;ProdOrderNo@1002 : Code[20]);
    VAR
      ProductionOrder@1001 : Record 5405;
    BEGIN
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status::Released);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.FINDSET;
    END;

    LOCAL PROCEDURE CreateAndRefreshRelProdOrder@58(VAR ProductionOrder@1000 : Record 5405;SourceType@1001 : Option;SourceNo@1002 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,SourceType,SourceNo,1);  // Value important.
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateFamily@108(VAR Family@1005 : Record 99000773;RoutingNo@1003 : Code[20];ItemNo@1001 : Code[20];ItemNo2@1002 : Code[20]);
    VAR
      FamilyLine@1004 : Record 99000774;
    BEGIN
      // Random values not important for test.
      LibraryManufacturing.CreateFamily(Family);
      Family.VALIDATE("Routing No.",RoutingNo);
      Family.MODIFY(TRUE);
      LibraryManufacturing.CreateFamilyLine(FamilyLine,Family."No.",ItemNo,LibraryRandom.RandInt(5));
      LibraryManufacturing.CreateFamilyLine(FamilyLine,Family."No.",ItemNo2,LibraryRandom.RandInt(5));
    END;

    LOCAL PROCEDURE CreateSalesOrder@29(VAR SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20]);
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,'',ItemNo,1,'',0D);  // Value important.
    END;

    LOCAL PROCEDURE OpenProductionJournal@21(ProductionOrder@1003 : Record 5405;ProdOrderNo@1002 : Code[20]) : Integer;
    VAR
      ProdOrderLine@1001 : Record 5406;
      ProductionJournalMgt@1000 : Codeunit 5510;
    BEGIN
      // Open Production Journal based on selected Production Order Line.
      SelectProdOrderLine(ProdOrderLine,ProdOrderNo);
      ProductionJournalMgt.Handling(ProductionOrder,ProdOrderLine."Line No.");
      EXIT(ProdOrderLine."Line No.");
    END;

    LOCAL PROCEDURE ProductionJournalPostLines@1(ProductionOrder@1000 : Record 5405;ProdOrderNo@1001 : Code[20]);
    VAR
      ProductionJournalMgt@1002 : Codeunit 5510;
      ProdOrderLineNo@1003 : Integer;
    BEGIN
      // Boolean - PostedProdJournal, signifies if the Production Journal Lines have been posted when opening the Production Journal page.
      PostedProdJournal := FALSE;
      ProdOrderLineNo := OpenProductionJournal(ProductionOrder,ProdOrderNo);

      // Need to re-open the Production Journal page and copy the entries to temporary record needed for verification.
      PostedProdJournal := TRUE;
      ProductionJournalMgt.Handling(ProductionOrder,ProdOrderLineNo);
    END;

    LOCAL PROCEDURE CreateDimRelProdOrderSetup@35(VAR ProductionOrder@1002 : Record 5405;VAR DefaultDimension@1000 : Record 352;VAR DefaultDimension2@1001 : Record 352) : Integer;
    VAR
      ProductionBOMHeader@1005 : Record 99000771;
      ItemJournalLine@1003 : Record 83;
      Item@1004 : Record 27;
    BEGIN
      // Random value important for test.
      CreateItemWithDimension(DefaultDimension);
      CreateItemWithDimension(DefaultDimension2);
      CreateAndPostItemJournal(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",DefaultDimension."No.",LibraryRandom.RandInt(100) + 10);
      CreateAndPostItemJournal(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",DefaultDimension2."No.",LibraryRandom.RandInt(100) + 10);

      // Create Production BOM. Create Released Production Order.
      LibraryManufacturing.CreateCertifProdBOMWithTwoComp(ProductionBOMHeader,DefaultDimension."No.",DefaultDimension2."No.",1);  // Value important.

      CreateItem(Item,Item."Costing Method"::FIFO,'',ProductionBOMHeader."No.",Item."Manufacturing Policy"::"Make-to-Order");
      CreateAndRefreshRelProdOrder(ProductionOrder,ProductionOrder."Source Type"::Item,Item."No.");
      EXIT(UpdateProductionOrderDimension(ProductionOrder."No."));
    END;

    LOCAL PROCEDURE CreateItemWithDimension@31(VAR DefaultDimension@1004 : Record 352);
    VAR
      Item@1000 : Record 27;
      Dimension@1003 : Record 348;
      DimensionValue@1001 : Record 349;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,Item."No.",Dimension.Code,DimensionValue.Code);
    END;

    LOCAL PROCEDURE MockProdOrderLine@91(VAR ProdOrderLine@1000 : Record 5406);
    VAR
      ProductionOrder@1001 : Record 5405;
    BEGIN
      WITH ProductionOrder DO BEGIN
        INIT;
        Status := Status::Released;
        "No." := LibraryUtility.GenerateRandomCode(FIELDNO("No."),DATABASE::"Production Order");
        INSERT;
      END;

      WITH ProdOrderLine DO BEGIN
        INIT;
        Status := ProductionOrder.Status;
        "Prod. Order No." := ProductionOrder."No.";
        "Line No." := LibraryUtility.GetNewRecNo(ProdOrderLine,FIELDNO("Line No."));
        INSERT;
      END;
    END;

    LOCAL PROCEDURE UpdateProductionOrderDimension@33(ProdOrderNo@1001 : Code[20]) NewDimensionSetID : Integer;
    VAR
      Dimension@1002 : Record 348;
      DimensionValue@1000 : Record 349;
      ProdOrderLine@1003 : Record 5406;
    BEGIN
      SelectProdOrderLine(ProdOrderLine,ProdOrderNo);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      NewDimensionSetID := LibraryDimension.CreateDimSet(ProdOrderLine."Dimension Set ID",Dimension.Code,DimensionValue.Code);
      ProdOrderLine.VALIDATE("Dimension Set ID",NewDimensionSetID);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectProdOrderComponent@48(VAR ProdOrderComponent@1000 : Record 5407;ProdOrderNo@1001 : Code[20]);
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProdOrderComponent.Status::Released);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.FINDSET;
    END;

    LOCAL PROCEDURE SelectConsumptionJournal@37(VAR ItemJournalLine@1000 : Record 83;ProdOrderNo@1001 : Code[20]);
    BEGIN
      ItemJournalLine.SETRANGE("Order No.",ProdOrderNo);
      ItemJournalLine.SETRANGE("Entry Type",ItemJournalLine."Entry Type"::Consumption);
      ItemJournalLine.SETRANGE("Item No.",ReserveItemNo);
      ItemJournalLine.FINDSET;
    END;

    LOCAL PROCEDURE CopyProductionJournalToTemp@22(VAR ItemJournalLine@1000 : Record 83;ProdOrderNo@1001 : Code[20]);
    BEGIN
      TempItemJournalLine.DELETEALL;
      ItemJournalLine.SETRANGE("Order No.",ProdOrderNo);
      ItemJournalLine.FINDSET;
      REPEAT
        TempItemJournalLine := ItemJournalLine;
        IF TempItemJournalLine.INSERT THEN;
      UNTIL ItemJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyProdJournalAndDimToTemp@43(VAR ItemJournalLine@1000 : Record 83;ProdOrderNo@1001 : Code[20]);
    VAR
      DimensionSetEntry@1002 : Record 480;
    BEGIN
      // Copy Dimension Set Entry record to temporary record because record not available when out of Production Journal Handler.
      TempItemJournalLine2.DELETEALL;
      TempDimensionSetEntry.DELETEALL;
      ItemJournalLine.SETRANGE("Order No.",ProdOrderNo);
      ItemJournalLine.FINDSET;
      REPEAT
        TempItemJournalLine2 := ItemJournalLine;
        TempItemJournalLine2.INSERT;
        LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,ItemJournalLine."Dimension Set ID");
        REPEAT
          TempDimensionSetEntry := DimensionSetEntry;
          IF TempDimensionSetEntry.INSERT THEN;
        UNTIL DimensionSetEntry.NEXT = 0;
      UNTIL ItemJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyConsumptionEntries@15(ProdOrderNo@1002 : Code[20]);
    VAR
      ProdOrderComponent@1001 : Record 5407;
      ProductionOrder@1000 : Record 5405;
    BEGIN
      SelectProdOrderComponent(ProdOrderComponent,ProdOrderNo);
      ProductionOrder.GET(ProductionOrder.Status::Released,ProdOrderNo);
      TempItemJournalLine.FINDSET;
      REPEAT
        Assert.AreEqual(ProdOrderComponent."Quantity per" * ProductionOrder.Quantity,TempItemJournalLine.Quantity,ErrMsgQuantity);
        TempItemJournalLine.NEXT;
      UNTIL ProdOrderComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyConsumpEntriesAfterPost@28();
    BEGIN
      TempItemJournalLine.FINDSET;
      REPEAT
        Assert.AreEqual(0,TempItemJournalLine.Quantity,ErrMsgQuantity);
      UNTIL TempItemJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyFamilyConsumptionEntries@23(ItemNo@1000 : Code[20];ProdOrderNo@1001 : Code[20]);
    VAR
      ProdOrderLine@1004 : Record 5406;
      ProdOrderComponent@1003 : Record 5407;
    BEGIN
      SelectProdOrderLine(ProdOrderLine,ProdOrderNo);
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.FINDFIRST;
      SelectProdOrderComponent(ProdOrderComponent,ProdOrderNo);
      ProdOrderComponent.SETRANGE("Prod. Order Line No.",ProdOrderLine."Line No.");
      ProdOrderComponent.FINDSET;
      TempItemJournalLine.FINDSET;
      REPEAT
        Assert.AreEqual(ProdOrderComponent."Quantity per" * ProdOrderLine.Quantity,TempItemJournalLine.Quantity,ErrMsgQuantity);
        TempItemJournalLine.NEXT;
        ProdOrderLine.NEXT;
      UNTIL ProdOrderComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyOutputEntries@18(ProdOrderNo@1001 : Code[20]);
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      ProductionOrder.GET(ProductionOrder.Status::Released,ProdOrderNo);
      TempItemJournalLine.SETRANGE("Entry Type",TempItemJournalLine."Entry Type"::Output);
      TempItemJournalLine.FINDSET;
      REPEAT
        Assert.AreEqual(ProductionOrder.Quantity,TempItemJournalLine."Output Quantity",ErrMsgQuantity);
        Assert.AreEqual(0,TempItemJournalLine."Setup Time",STRSUBSTNO(ErrMsgTime,TempItemJournalLine.FIELDCAPTION("Setup Time")));
        Assert.AreEqual(0,TempItemJournalLine."Run Time",STRSUBSTNO(ErrMsgTime,TempItemJournalLine.FIELDCAPTION("Run Time")));
      UNTIL TempItemJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyOutputEntriesAfterPost@24();
    BEGIN
      TempItemJournalLine.SETRANGE("Entry Type",TempItemJournalLine."Entry Type"::Output);
      TempItemJournalLine.FINDSET;
      REPEAT
        Assert.AreEqual(0,TempItemJournalLine."Output Quantity",ErrMsgQuantity);
        Assert.AreEqual(0,TempItemJournalLine."Setup Time",STRSUBSTNO(ErrMsgTime,TempItemJournalLine.FIELDCAPTION("Setup Time")));
        Assert.AreEqual(0,TempItemJournalLine."Run Time",STRSUBSTNO(ErrMsgTime,TempItemJournalLine.FIELDCAPTION("Run Time")));
      UNTIL TempItemJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyFamilyOutputEntries@45(ItemNo@1002 : Code[20];FamilyNo@1001 : Code[20]);
    VAR
      FamilyLine@1000 : Record 99000774;
    BEGIN
      FamilyLine.SETRANGE("Family No.",FamilyNo);
      FamilyLine.SETRANGE("Item No.",ItemNo);
      FamilyLine.FINDFIRST;
      TempItemJournalLine.SETRANGE("Entry Type",TempItemJournalLine."Entry Type"::Output);
      TempItemJournalLine.FINDSET;
      REPEAT
        Assert.AreEqual(FamilyLine.Quantity,TempItemJournalLine."Output Quantity",ErrMsgQuantity);
        Assert.AreEqual(0,TempItemJournalLine."Setup Time",STRSUBSTNO(ErrMsgTime,TempItemJournalLine.FIELDCAPTION("Setup Time")));
        Assert.AreEqual(0,TempItemJournalLine."Run Time",STRSUBSTNO(ErrMsgTime,TempItemJournalLine.FIELDCAPTION("Run Time")));
      UNTIL TempItemJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimensionSetEntry@42(DefaultDimension@1000 : Record 352);
    BEGIN
      TempDimensionSetEntry.SETRANGE("Dimension Set ID",TempItemJournalLine2."Dimension Set ID");
      TempDimensionSetEntry.SETRANGE("Dimension Code",DefaultDimension."Dimension Code");
      TempDimensionSetEntry.FINDFIRST;
      TempDimensionSetEntry.TESTFIELD("Dimension Value Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyDimensionSetId@44(ItemNo@1000 : Code[20]);
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      TempItemJournalLine2.SETRANGE("Item No.",ItemNo);
      TempItemJournalLine2.FINDFIRST;
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDLAST;
      ItemLedgerEntry.TESTFIELD("Dimension Set ID",TempItemJournalLine2."Dimension Set ID");
    END;

    [ModalPageHandler]
    PROCEDURE JournalReservePageHandler@41(VAR ProductionJournal@1001 : Page 5510;VAR Response@1000 : Action);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      // Generate Reserved Item Not On Inventory error.
      SelectConsumptionJournal(ItemJournalLine,ProductionOrderNo);
      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch",ItemJournalLine);
    END;

    [ModalPageHandler]
    PROCEDURE JournalApplyPageHandler@40(VAR ProductionJournal@1001 : Page 5510;VAR Response@1000 : Action);
    VAR
      ItemJournalLine@1002 : Record 83;
      ItemLedgerEntry@1003 : Record 32;
    BEGIN
      // Generate Apply To Entry With Reservation error.
      SelectConsumptionJournal(ItemJournalLine,ProductionOrderNo);
      ItemLedgerEntry.SETRANGE("Item No.",ReserveItemNo);
      ItemLedgerEntry.FINDFIRST;
      ItemJournalLine.VALIDATE("Applies-to Entry",ItemLedgerEntry."Entry No.");
      ItemJournalLine.MODIFY(TRUE);
      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch",ItemJournalLine);
    END;

    [ModalPageHandler]
    PROCEDURE JournalPageHandler@60(VAR ProductionJournal@1001 : Page 5510;VAR Response@1000 : Action);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      // Copy Production Journal record to global temporary record.
      CopyProductionJournalToTemp(ItemJournalLine,ProductionOrderNo);
    END;

    [ModalPageHandler]
    PROCEDURE UpdateJournalPostPageHandler@39(VAR ProductionJournal@1000 : Page 5510;VAR Response@1001 : Action);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      // Copy Production Journal record to global temporary record.
      CopyProductionJournalToTemp(ItemJournalLine,ProductionOrderNo);

      // If the Production Journal already been posted then exit handler.
      IF PostedProdJournal THEN
        EXIT;

      ItemJournalLine.SETRANGE("Entry Type",ItemJournalLine."Entry Type"::Output);
      ItemJournalLine.FINDSET;
      REPEAT
        ItemJournalLine.VALIDATE("Setup Time",LibraryRandom.RandInt(5));  // Random values not important.
        ItemJournalLine.VALIDATE("Run Time",LibraryRandom.RandInt(5));
        ItemJournalLine.MODIFY(TRUE);
      UNTIL ItemJournalLine.NEXT = 0;

      // Post Production Journal lines with modified Setup time, Run time.
      CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch",ItemJournalLine);
    END;

    [ModalPageHandler]
    PROCEDURE PostJournalPageHandler@52(VAR ProductionJournal@1001 : Page 5510;VAR Response@1000 : Action);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      // Copy Production Journal record to global temporary record.
      CopyProductionJournalToTemp(ItemJournalLine,ProductionOrderNo);

      // If the Production Journal already been posted then exit handler.
      IF PostedProdJournal THEN
        EXIT;

      ItemJournalLine.FINDSET;

      // Post Production Journal lines.
      CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch",ItemJournalLine);
    END;

    [ModalPageHandler]
    PROCEDURE JournalDimPageHandler@38(VAR ProductionJournal@1001 : Page 5510;VAR Response@1000 : Action);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      // Copy Production Journal record to global temporary record.
      CopyProdJournalAndDimToTemp(ItemJournalLine,ProductionOrderNo);
    END;

    [ModalPageHandler]
    PROCEDURE PostJournalDimPageHandler@36(VAR ProductionJournal@1001 : Page 5510;VAR Response@1000 : Action);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      // Copy Production Journal record to global temporary record.
      CopyProdJournalAndDimToTemp(ItemJournalLine,ProductionOrderNo);

      // If the Production Journal already been posted then exit handler.
      IF PostedProdJournal THEN
        EXIT;

      ItemJournalLine.FINDSET;

      // Post Production Journal lines.
      CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch",ItemJournalLine);
    END;

    [ModalPageHandler]
    PROCEDURE ProdOrderCompLineListPageHandler@64(VAR ProdOrderCompLineList@1000 : TestPage 5407);
    BEGIN
      Assert.AreEqual(
        LibraryVariableStorage.DequeueText,ProdOrderCompLineList.FILTER.GETFILTER("Prod. Order Line No."),
        WrongFilterOnProdOrderCompListErr);
    END;

    BEGIN
    {
      // [FEATURE] [Production Journal] [SCM]
      Test for Production Journals:
       1. Test Production Journal for Reserved Item Not On Inventory error when Production Journal is Posted.
       2. Test Production Journal when Applies To Entry is filled up with Reservation and Posted.
       3. Test Production Journal with Routing without Posting (Released Production Order : Source Type - Item).
          Verify Consumption and Output entries.
       4. Test Production Journal with Routing and Posting (Released Production Order : Source Type - Item).
          Verify Consumption and Output entries.
       5. Test Production Journal with Routing without Posting (Released Production Order : Source Type - Family).
          Verify Consumption and Output entries.
       6. Test Production Journal with Routing and Posting (Released Production Order : Source Type - Family).
          Verify Consumption and Output entries.
       7. Test Production Journal with Routing without Posting (Released Production Order : Source Type - Sales Header).
          Verify Consumption and Output entries.
       8. Test Production Journal with Routing and Posting (Released Production Order : Source Type - Sales Header).
          Verify Consumption and Output entries.
       9. Test Production Journal without Routing and Posting (Released Production Order : Source Type - Item).
          Verify Consumption and Output entries.
      10. Test Production Journal without Routing. Post Production Journal (Released Production Order : Source Type - Item).
          Verify Consumption and Output entries.
      11. Test Production Journal lines Dimensions before Posting (Released Production Order : Source Type - Item).
      12. Test Production Journal lines Dimensions after Posting (Released Production Order : Source Type - Item).

        Covers Test cases:
        -----------------------------------------------------------------------------------------------------------------------
        Test Function Name                TFS ID
        -----------------------------------------------------------------------------------------------------------------------
        ItemProductionJnlReserveItem      121125
        ItemProductionJnlApplyToEntry     121125
        ItemProductionJnlNoPosting        121126
        ItemProductionJnlWithPosting      121127,121128
        FamilyProductionJnlNoPosting      121129
        FamilyProductionJnlWithPosting    121130,121131,121132
        SalesProductionJnlNoPosting       121133
        SalesProductionJnlWithPosting     121134,121500,121135
        ItemProdJnlNoRouting              121140,121141
        ItemProdJnlNoRoutingPosting       121142
        ItemProdJnlDimensions             121138
        ItemProdJnlDimensionsPosting      121139
    }
    END.
  }
}

