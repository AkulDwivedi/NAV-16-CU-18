OBJECT Codeunit 144082 Job Journals
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      JobTask@1500005 : Record 1001;
      GeneralLedgerSetup@1500020 : Record 98;
      JobJournalTemplate@1500017 : Record 209;
      JobJournalBatch@1500016 : Record 237;
      LibraryJob@1500001 : Codeunit 131920;
      LibraryERM@1500002 : Codeunit 131300;
      LibraryRandom@1500009 : Codeunit 130440;
      LibraryInventory@1500008 : Codeunit 132201;
      LibraryWarehouse@1500011 : Codeunit 132204;
      LibraryUtility@1500018 : Codeunit 131000;
      LibraryResource@1500006 : Codeunit 130511;
      LibrarySales@1500012 : Codeunit 130509;
      ServiceTaxAsExciseHelper@1500019 : Codeunit 143003;
      Assert@1500015 : Codeunit 130000;
      NoSeriesManagement@1500010 : Codeunit 396;
      isInitialized@1500000 : Boolean;
      JobErr@1500003 : TextConst '@@@="%1 and %2 and %3 and %4 = Line Type and Journal Template and Journal Batch and Journal Line Number";ENU="Line Type must not be %1 in Job Journal Line Journal Template Name=''%2'',Journal Batch Name=''%3'',Line No.=''%4''."';
      JobSchedulErr@1500007 : TextConst '@@@="%1 and %2 and %3 = Journal Template and Journal Batch and Journal Line Number";ENU="CWIP G/L Type must not be   in Job Journal Line Journal Template Name=''%1'',Journal Batch Name=''%2'',Line No.=''%3''."';
      CWIPGLTypeValidateErr@1500013 : TextConst '@@@="%1 and %2 and %3 and %4 = Journal Template and Journal Batch and Journal Line Number and Job Journal Type";ENU="CWIP G/L Type must be equal to ''Material''  in Job Journal Line: Journal Template Name=%1, Journal Batch Name=%2, Line No.=%3. Current value is ''%4''."';
      CWIPGLTypeForResourcesErr@1500014 : TextConst '@@@="%1 and %2 and %3 and %4 = Journal Template and Journal Batch and Journal Line Number and Job Journal Type";ENU="CWIP G/L Type must be equal to ''Labor''  in Job Journal Line: Journal Template Name=%1, Journal Batch Name=%2, Line No.=%3. Current value is ''%4''."';
      CWIPGLErr@1500004 : TextConst '@@@="%1 and %2 and %3 and %4 = CWIP G/L Type and Journal Template and Journal Batch and Journal Line Number";ENU="CWIP G/L Type must not be %1 in Job Journal Line Journal Template Name=''%2'',Journal Batch Name=''%3'',Line No.=''%4''."';
      AmountErr@1500021 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=%1 is incorrect in %2.';

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE JobJournalWithJobLineTypeContract@1500002();
    VAR
      JobJournalLine@1500001 : Record 210;
    BEGIN
      // [SCENARIO 164094] Post Jobs Journal with Line Type as Contract
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Job Journal and Post
      CreateAndUpdateJobJournalLine(
        JobJournalLine,JobJournalLine."Line Type"::Contract,JobJournalLine.Type::"G/L Account",
        JobJournalLine."CWIP G/L Type"::Labor);
      ASSERTERROR LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Verified Job Line Type With Contract
      Assert.ExpectedError(
        STRSUBSTNO(
          JobErr,JobJournalLine."Line Type",JobJournalLine."Journal Template Name",JobJournalLine."Journal Batch Name",
          JobJournalLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE JobJournalWithJobLineTypeBothScheduleandContract@1500001();
    VAR
      JobJournalLine@1500001 : Record 210;
    BEGIN
      // [SCENARIO 164094] Post Jobs Journal with Job Line Type as Both Schedule and Contract
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Job Journal and Post
      CreateAndUpdateJobJournalLine(
        JobJournalLine,JobJournalLine."Line Type"::"Both Schedule and Contract",
        JobJournalLine.Type::"G/L Account",JobJournalLine."CWIP G/L Type"::" ");
      ASSERTERROR LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Verified Job Line Type With Both Schedule and Contract
      Assert.ExpectedError(
        STRSUBSTNO(
          JobErr,JobJournalLine."Line Type",JobJournalLine."Journal Template Name",JobJournalLine."Journal Batch Name",
          JobJournalLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE JobJournalWithJobLineTypeSchedule@1500007();
    VAR
      JobJournalLine@1500001 : Record 210;
    BEGIN
      // [SCENARIO 164094] Post Job Journals with CWIP G/L Type as Blank
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Job Journal and Post
      CreateAndUpdateJobJournalLine(
        JobJournalLine,JobJournalLine."Line Type"::Schedule,
        JobJournalLine.Type::"G/L Account",JobJournalLine."CWIP G/L Type"::" ");
      ASSERTERROR LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Verified Job Journals with CWIP G/L Type as Blank
      Assert.ExpectedError(
        STRSUBSTNO(
          JobSchedulErr,JobJournalLine."Journal Template Name",JobJournalLine."Journal Batch Name",
          JobJournalLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE JobJournalWithJobLineTypeScheduleWithCWIPGLTypeLabor@1500000();
    VAR
      JobJournalLine@1500001 : Record 210;
      Job@1500000 : Record 167;
      JobTask2@1500002 : Record 1001;
    BEGIN
      // [SCENARIO 164094] Post Job Journals with Not CWIP Job
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job Task and Job with Blank Job Type
      Initialize;
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask2);

      // [WHEN] Create Job Journal and Post
      JobTask := JobTask2;
      CreateAndUpdateJobJournalLine(JobJournalLine,JobJournalLine."Line Type"::Schedule,JobJournalLine.Type::"G/L Account",
        JobJournalLine."CWIP G/L Type"::Labor);

      ASSERTERROR LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Verified Job Journals with Not CWIP Job
      Assert.ExpectedError(
        STRSUBSTNO(
          CWIPGLErr,JobJournalLine."CWIP G/L Type"::Labor,JobJournalLine."Journal Template Name",
          JobJournalLine."Journal Batch Name",JobJournalLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE JobJournalWithJobLineTypeScheduleWithCWIPGLTypeMaterial@1500009();
    VAR
      JobJournalLine@1500001 : Record 210;
      Job@1500000 : Record 167;
      JobTask2@1500002 : Record 1001;
    BEGIN
      // [SCENARIO 164094] Post Job Journals with Not CWIP Job
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job Task and Job with Blank Job Type
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask2);

      // [WHEN] Create Job Journal and Post
      JobTask := JobTask2;
      CreateAndUpdateJobJournalLine(JobJournalLine,JobJournalLine."Line Type"::Schedule,JobJournalLine.Type::"G/L Account",
        JobJournalLine."CWIP G/L Type"::Material);

      ASSERTERROR LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Verified Job Journals with Not CWIP Job
      Assert.ExpectedError(
        STRSUBSTNO(
          CWIPGLErr,JobJournalLine."CWIP G/L Type"::Material,JobJournalLine."Journal Template Name",
          JobJournalLine."Journal Batch Name",JobJournalLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE JobJournalWithJobLineTypeScheduleWithCWIPGLTypeOverheads@1500010();
    VAR
      JobJournalLine@1500001 : Record 210;
      Job@1500000 : Record 167;
      JobTask2@1500002 : Record 1001;
    BEGIN
      // [SCENARIO 164094] Post Job Journals with Not CWIP Job
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job Task and Job with Blank Job Type
      Initialize;
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask2);

      // [WHEN] Create Job Journal and Post
      JobTask := JobTask2;
      CreateAndUpdateJobJournalLine(
        JobJournalLine,JobJournalLine."Line Type"::Schedule,JobJournalLine.Type::"G/L Account",
        JobJournalLine."CWIP G/L Type"::Overheads);

      ASSERTERROR LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Verified Job Journals with Not CWIP Job
      Assert.ExpectedError(
        STRSUBSTNO(
          CWIPGLErr,JobJournalLine."CWIP G/L Type"::Overheads,JobJournalLine."Journal Template Name",
          JobJournalLine."Journal Batch Name",JobJournalLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobJournalWithMultiLines@1500003();
    VAR
      JobJournalLine@1500002 : Record 210;
      ActualCount@1500000 : Integer;
    BEGIN
      // [SCENARIO 164094] Post Job Journals  with three Lines
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Job Journal and Post
      CreateMultipleJobJournalLine(JobJournalLine);
      ActualCount := JobJournalLine.COUNT;
      LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Verified Job Journals with three Lines
      VerifyScheduleJobLineType(JobTask."Job No.",JobJournalLine."Document No.",ActualCount);
    END;

    [Test]
    PROCEDURE JobJournalForItemWithCWIPGLAsLabor@1500013();
    VAR
      JobJournalLine@1500000 : Record 210;
    BEGIN
      // [SCENARIO 164095] Post Jobs Journal with Type as Item and CWIP G/L Type as Labor
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Job Journal Line with Type as Item and CWIP G/L as Labor
      ASSERTERROR
        CreateAndUpdateJobJournalLine(
          JobJournalLine,JobJournalLine."Line Type"::"Both Schedule and Contract",
          JobJournalLine.Type::Item,JobJournalLine."CWIP G/L Type"::Labor);

      // [THEN] Verified Job Line CWIP G/L Type as Labor
      Assert.ExpectedError(
        STRSUBSTNO(
          CWIPGLTypeValidateErr,JobJournalLine."Journal Template Name",JobJournalLine."Journal Batch Name",
          JobJournalLine."Line No.",JobJournalLine."CWIP G/L Type"::Labor));
    END;

    [Test]
    PROCEDURE JobJournalForItemWithCWIPGLAsOverheads@1500014();
    VAR
      JobJournalLine@1500000 : Record 210;
    BEGIN
      // [SCENARIO 164095] Post Jobs Journal with Type as Item and CWIP G/L Type as Overheads
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Job Journal Line with Type as Item and CWIP G/L as Overheads
      ASSERTERROR
        CreateAndUpdateJobJournalLine(
          JobJournalLine,JobJournalLine."Line Type"::"Both Schedule and Contract",
          JobJournalLine.Type::Item,JobJournalLine."CWIP G/L Type"::Overheads);

      // [THEN] Verified Job Line Type CWIP G/L Type as Overheads
      Assert.ExpectedError(
        STRSUBSTNO(
          CWIPGLTypeValidateErr,JobJournalLine."Journal Template Name",JobJournalLine."Journal Batch Name",
          JobJournalLine."Line No.",JobJournalLine."CWIP G/L Type"::Overheads));
    END;

    [Test]
    PROCEDURE JobJournalForItemWithCWIPGLAsBlank@1500016();
    VAR
      JobJournalLine@1500000 : Record 210;
    BEGIN
      // [SCENARIO 164095] Post Jobs Journal with Type as Item and CWIP G/L Type as Blank
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Job Journal Line with Type as Item and CWIP G/L as Blank
      ASSERTERROR
        CreateAndUpdateJobJournalLine(
          JobJournalLine,JobJournalLine."Line Type"::"Both Schedule and Contract",
          JobJournalLine.Type::Item,JobJournalLine."CWIP G/L Type"::" ");

      // [THEN] Verified Job Line Type CWIP G/L Type as Blank
      Assert.ExpectedError(
        STRSUBSTNO(
          CWIPGLTypeValidateErr,JobJournalLine."Journal Template Name",JobJournalLine."Journal Batch Name",
          JobJournalLine."Line No.",JobJournalLine."CWIP G/L Type"::" "));
    END;

    [Test]
    PROCEDURE JobJournalForResourceWithCWIPGLAsMaterial@1500017();
    VAR
      JobJournalLine@1500000 : Record 210;
    BEGIN
      // [SCENARIO 164096] Post Jobs Journal with Type as Resource and CWIP G/L Type as Labor
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Job Journal Line with Type as Item and CWIP G/L as Material
      ASSERTERROR
        CreateAndUpdateJobJournalLine(
          JobJournalLine,JobJournalLine."Line Type"::"Both Schedule and Contract",
          JobJournalLine.Type::Resource,JobJournalLine."CWIP G/L Type"::Material);

      // [THEN] Verified Job Line CWIP G/L Type as Material
      Assert.ExpectedError(
        STRSUBSTNO(
          CWIPGLTypeForResourcesErr,JobJournalLine."Journal Template Name",JobJournalLine."Journal Batch Name",
          JobJournalLine."Line No.",JobJournalLine."CWIP G/L Type"::Material));
    END;

    [Test]
    PROCEDURE JobJournalForResourcesWithCWIPGLAsOverheads@1500015();
    VAR
      JobJournalLine@1500000 : Record 210;
    BEGIN
      // [SCENARIO 164096] Post Jobs Journal with Type as Resource and CWIP G/L Type as Overheads
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Job Journal Line with Type as Item and CWIP G/L as Overheads
      ASSERTERROR
        CreateAndUpdateJobJournalLine(
          JobJournalLine,JobJournalLine."Line Type"::"Both Schedule and Contract",
          JobJournalLine.Type::Resource,JobJournalLine."CWIP G/L Type"::Overheads);

      // [THEN] Verified Job Line Type CWIP G/L Type as Overheads
      Assert.ExpectedError(
        STRSUBSTNO(
          CWIPGLTypeForResourcesErr,JobJournalLine."Journal Template Name",JobJournalLine."Journal Batch Name",
          JobJournalLine."Line No.",JobJournalLine."CWIP G/L Type"::Overheads));
    END;

    [Test]
    PROCEDURE JobJournalForResourcesWithCWIPGLAsBlank@1500012();
    VAR
      JobJournalLine@1500000 : Record 210;
    BEGIN
      // [SCENARIO 164096] Post Jobs Journal with Type as Resource and CWIP G/L Type as Blank
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Job Journal Line with Type as Item and CWIP G/L as Blank
      ASSERTERROR
        CreateAndUpdateJobJournalLine(
          JobJournalLine,JobJournalLine."Line Type"::"Both Schedule and Contract",
          JobJournalLine.Type::Resource,JobJournalLine."CWIP G/L Type"::" ");

      // [THEN] Verified Job Line Type CWIP G/L Type as Blank
      Assert.ExpectedError(
        STRSUBSTNO(
          CWIPGLTypeForResourcesErr,JobJournalLine."Journal Template Name",JobJournalLine."Journal Batch Name",
          JobJournalLine."Line No.",JobJournalLine."CWIP G/L Type"::" "));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE JobJournalForResourcesAndItem@1500019();
    VAR
      JobJournalLine@1500000 : Record 210;
      ExpectedCount@1500002 : Integer;
    BEGIN
      // [SCENARIO 164097] Post Jobs Journal with multiple lines
      // [FEATURE] [Job Journals]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Job Journal Line with Type as Item and Resource
      CreateAndUpdateJobJournalLine(
        JobJournalLine,JobJournalLine."Line Type"::Schedule,
        JobJournalLine.Type::Item,JobJournalLine."CWIP G/L Type"::Material);
      CreateAndUpdateJobJournalLine(
        JobJournalLine,JobJournalLine."Line Type"::Schedule,
        JobJournalLine.Type::Resource,JobJournalLine."CWIP G/L Type"::Labor);
      ExpectedCount := JobJournalLine.COUNT;
      LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Verified Job Journals for type Item and Resources
      VerifyScheduleJobLineType(JobTask."Job No.",JobJournalLine."Document No.",ExpectedCount);
    END;

    [Test]
    PROCEDURE RecurringJobJournalForItemWithCWIPTypeLabor@1500024();
    VAR
      JobJournalLine@1500000 : Record 210;
      Assert@1500001 : Codeunit 130000;
    BEGIN
      // [SCENARIO 164099] Posting Recurring Job Journals with Type as Item With CWIP G/L Type As Labor
      // [FEATURE] [Job Journals]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Recurring Job Journal and Post
      CreateRecurringJobJournalTemplateAndBatch(JobJournalTemplate,JobJournalBatch);
      CreateAndUpdateRecurringJobJournalLine(
        JobJournalLine,JobTask,
        NoSeriesManagement.GetNextNo(
          JobJournalBatch."Posting No. Series",JobJournalLine."Posting Date",FALSE),
        JobJournalLine.Type::Item,JobJournalLine."Line Type"::Schedule,JobJournalLine."CWIP G/L Type"::Material);

      ASSERTERROR JobJournalLine.VALIDATE("CWIP G/L Type",JobJournalLine."CWIP G/L Type"::Labor);

      // [THEN] Verified Recurring Job Journal With CWIP Type Labor and Type as Item
      Assert.ExpectedError(
        STRSUBSTNO(
          CWIPGLTypeValidateErr,JobJournalLine."Journal Template Name",
          JobJournalLine."Journal Batch Name",JobJournalLine."Line No.",JobJournalLine."CWIP G/L Type"::Labor));
    END;

    [Test]
    PROCEDURE RecurringJobJournalForItemWithCWIPTypeOverheads@1500023();
    VAR
      JobJournalLine@1500000 : Record 210;
      Assert@1500001 : Codeunit 130000;
    BEGIN
      // [SCENARIO 164099] Post Recurring Job Journals with Type as Item With CWIP G/L Type As Overheads
      // [FEATURE] [Job Journals]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Recurring Job Journal and Post
      CreateRecurringJobJournalTemplateAndBatch(JobJournalTemplate,JobJournalBatch);
      CreateAndUpdateRecurringJobJournalLine(
        JobJournalLine,JobTask,
        NoSeriesManagement.GetNextNo(
          JobJournalBatch."Posting No. Series",JobJournalLine."Posting Date",FALSE),
        JobJournalLine.Type::Item,JobJournalLine."Line Type"::Schedule,JobJournalLine."CWIP G/L Type"::Material);

      ASSERTERROR JobJournalLine.VALIDATE("CWIP G/L Type",JobJournalLine."CWIP G/L Type"::Overheads);

      // [THEN] Verified Recurring Job Journal With CWIP Type Overheads and Type as Item
      Assert.ExpectedError(
        STRSUBSTNO(
          CWIPGLTypeValidateErr,JobJournalLine."Journal Template Name",
          JobJournalLine."Journal Batch Name",JobJournalLine."Line No.",JobJournalLine."CWIP G/L Type"::Overheads));
    END;

    [Test]
    PROCEDURE RecurringJobJournalForResourcesWithCWIPTypeMaterial@1500022();
    VAR
      JobJournalLine@1500000 : Record 210;
    BEGIN
      // [SCENARIO 164100] Post Recurring Job Journals with Type as Resource With CWIP G/L Type As Material
      // [FEATURE] [Job Journals]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Recurring Job Journal and Post
      CreateRecurringJobJournalTemplateAndBatch(JobJournalTemplate,JobJournalBatch);
      CreateAndUpdateRecurringJobJournalLine(
        JobJournalLine,JobTask,
        NoSeriesManagement.GetNextNo(
          JobJournalBatch."Posting No. Series",JobJournalLine."Posting Date",FALSE),
        JobJournalLine.Type::Resource,JobJournalLine."Line Type"::Schedule,JobJournalLine."CWIP G/L Type"::Labor);

      ASSERTERROR JobJournalLine.VALIDATE("CWIP G/L Type",JobJournalLine."CWIP G/L Type"::Material);

      // [THEN] Verified Recurring Job Journal With CWIP Type Material and Type as Resources
      Assert.ExpectedError(
        STRSUBSTNO(
          CWIPGLTypeForResourcesErr,JobJournalLine."Journal Template Name",
          JobJournalLine."Journal Batch Name",JobJournalLine."Line No.",JobJournalLine."CWIP G/L Type"::Material));
    END;

    [Test]
    PROCEDURE RecurringJobJournalForResourcesWithCWIPTypeOverheads@1500021();
    VAR
      JobJournalLine@1500000 : Record 210;
    BEGIN
      // [SCENARIO 164100] Post Recurring Job Journals with Type as Resource and CWIP G/L Type As Overheads
      // [FEATURE] [Job Journals]

      // [GIVEN] Created Recurring Job and Job Task
      Initialize;

      // [WHEN] Create Job Journal and Post
      CreateRecurringJobJournalTemplateAndBatch(JobJournalTemplate,JobJournalBatch);
      CreateAndUpdateRecurringJobJournalLine(
        JobJournalLine,JobTask,
        NoSeriesManagement.GetNextNo(
          JobJournalBatch."Posting No. Series",JobJournalLine."Posting Date",FALSE),
        JobJournalLine.Type::Resource,JobJournalLine."Line Type"::Schedule,JobJournalLine."CWIP G/L Type"::Labor);

      ASSERTERROR JobJournalLine.VALIDATE("CWIP G/L Type",JobJournalLine."CWIP G/L Type"::Overheads);

      // [THEN] Verified Recurring Job Journal With CWIP Type Overheads and Type as Resources
      Assert.ExpectedError(
        STRSUBSTNO(
          CWIPGLTypeForResourcesErr,JobJournalLine."Journal Template Name",
          JobJournalLine."Journal Batch Name",JobJournalLine."Line No.",JobJournalLine."CWIP G/L Type"::Overheads));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE RecurringJobJournalForGLWithJobLineTypeContract@1500008();
    VAR
      JobJournalLine@1500000 : Record 210;
    BEGIN
      // [SCENARIO 164098] Post Recurring Job Journals with Line Type as Contract
      // [FEATURE] [Job Journals]

      // [GIVEN] Created Recurring Job and Job Task
      Initialize;

      // [WHEN] Create Recurring Job Journal and Post
      CreateRecurringJobJournalTemplateAndBatch(JobJournalTemplate,JobJournalBatch);
      CreateAndUpdateRecurringJobJournalLine(
        JobJournalLine,JobTask,
        NoSeriesManagement.GetNextNo(
          JobJournalBatch."Posting No. Series",JobJournalLine."Posting Date",FALSE),
        JobJournalLine.Type::"G/L Account",JobJournalLine."Line Type"::Contract,JobJournalLine."CWIP G/L Type"::Overheads);

      ASSERTERROR LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Verified Recurring Job Journal with Line Type as Contract
      Assert.ExpectedError(
        STRSUBSTNO(
          JobErr,JobJournalLine."Line Type",JobJournalLine."Journal Template Name",
          JobJournalLine."Journal Batch Name",JobJournalLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE RecurringJobJournalForGLWithJobLineTypeBothScheduleandContract@1500018();
    VAR
      JobJournalLine@1500000 : Record 210;
    BEGIN
      // [SCENARIO 164098] Post Recurring Job Journals with Line Type as Both Schedule and Contract
      // [FEATURE] [Job Journals]

      // [GIVEN] Created Recurring Job and Job Task
      Initialize;

      // [WHEN] Create Recurring Job Journal and Post
      CreateRecurringJobJournalTemplateAndBatch(JobJournalTemplate,JobJournalBatch);
      CreateAndUpdateRecurringJobJournalLine(
        JobJournalLine,JobTask,
        NoSeriesManagement.GetNextNo(
          JobJournalBatch."Posting No. Series",JobJournalLine."Posting Date",FALSE),
        JobJournalLine.Type::"G/L Account",JobJournalLine."Line Type"::"Both Schedule and Contract",
        JobJournalLine."CWIP G/L Type"::Overheads);

      ASSERTERROR LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Verified Recurring Job Journal with Line Type as Both Schedule And Contract
      Assert.ExpectedError(
        STRSUBSTNO(
          JobErr,JobJournalLine."Line Type",JobJournalLine."Journal Template Name",
          JobJournalLine."Journal Batch Name",JobJournalLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE RecurringJobJournalForGLWithJobLineTypeScheduleAndCWIPGLTypeBlank@1500028();
    VAR
      JobJournalLine@1500000 : Record 210;
    BEGIN
      // [SCENARIO 164098] Post Recurring Job Journals with Line Type as Schedule and CWIP Type as Blank
      // [FEATURE] [Job Journals]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Recurring Job Journal and Post
      CreateRecurringJobJournalTemplateAndBatch(JobJournalTemplate,JobJournalBatch);
      CreateAndUpdateRecurringJobJournalLine(
        JobJournalLine,JobTask,
        NoSeriesManagement.GetNextNo(
          JobJournalBatch."Posting No. Series",JobJournalLine."Posting Date",FALSE),
        JobJournalLine.Type::"G/L Account",JobJournalLine."Line Type"::Schedule,JobJournalLine."CWIP G/L Type"::" ");

      ASSERTERROR LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Verified Recurring Job Journal With Job Journals with Line Type as Schedule CWIP Type as Blank
      Assert.ExpectedError(
        STRSUBSTNO(
          JobSchedulErr,JobJournalLine."Journal Template Name",
          JobJournalLine."Journal Batch Name",JobJournalLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE RecurringJobJournalWithNotCWIPJobAndCWIPGLTypeLabor@1500030();
    VAR
      JobJournalLine@1500001 : Record 210;
      Job@1500002 : Record 167;
      JobTask@1500003 : Record 1001;
    BEGIN
      // [SCENARIO 164098] Post Recurring Job Journals with Not CWIP Job and CWIP Type as Labor
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job Task and Job with Blank Job Type
      Initialize;
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // [WHEN] Create Recurring Job Journal and Post
      CreateRecurringJobJournalTemplateAndBatch(JobJournalTemplate,JobJournalBatch);
      CreateAndUpdateRecurringJobJournalLine(
        JobJournalLine,JobTask,
        NoSeriesManagement.GetNextNo(
          JobJournalBatch."Posting No. Series",JobJournalLine."Posting Date",FALSE),
        JobJournalLine.Type::"G/L Account",JobJournalLine."Line Type"::Schedule,JobJournalLine."CWIP G/L Type"::Labor);

      ASSERTERROR LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Verified Recurring Job Journals with Not CWIP Job and CWIP G/L Type as Labor
      Assert.ExpectedError(
        STRSUBSTNO(
          CWIPGLErr,JobJournalLine."CWIP G/L Type",JobJournalLine."Journal Template Name",
          JobJournalLine."Journal Batch Name",JobJournalLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE RecurringJobJournalWithNotCWIPJobAndCWIPGLTypeMaterial@1500029();
    VAR
      JobJournalLine@1500001 : Record 210;
      Job@1500000 : Record 167;
      JobTask@1500002 : Record 1001;
    BEGIN
      // [SCENARIO 164098] Post Recurring Job Journals with Not CWIP Job and CWIP Type as Material
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job Task and Job with Blank Job Type
      Initialize;
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // [WHEN] Create Recurring Job Journal and Post
      CreateRecurringJobJournalTemplateAndBatch(JobJournalTemplate,JobJournalBatch);
      CreateAndUpdateRecurringJobJournalLine(
        JobJournalLine,JobTask,
        NoSeriesManagement.GetNextNo(
          JobJournalBatch."Posting No. Series",JobJournalLine."Posting Date",FALSE),
        JobJournalLine.Type::"G/L Account",JobJournalLine."Line Type"::Schedule,JobJournalLine."CWIP G/L Type"::Material);

      ASSERTERROR LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Verified Recurring Job Journals with Not CWIP Job and CWIP G/L Type as Material
      Assert.ExpectedError(
        STRSUBSTNO(
          CWIPGLErr,JobJournalLine."CWIP G/L Type",JobJournalLine."Journal Template Name",
          JobJournalLine."Journal Batch Name",JobJournalLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE RecurringJobJournalWithNotCWIPJobAndCWIPGLTypeOverheads@1500027();
    VAR
      JobJournalLine@1500001 : Record 210;
      Job@1500000 : Record 167;
      JobTask@1500002 : Record 1001;
    BEGIN
      // [SCENARIO 164098] Post Recurring Job Journals with Not CWIP Job and CWIP Type as Overheads
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job Task and Job with Blank Job Type
      Initialize;
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // [WHEN] Create Recurring Job Journal and Post
      CreateRecurringJobJournalTemplateAndBatch(JobJournalTemplate,JobJournalBatch);
      CreateAndUpdateRecurringJobJournalLine(
        JobJournalLine,JobTask,
        NoSeriesManagement.GetNextNo(
          JobJournalBatch."Posting No. Series",JobJournalLine."Posting Date",FALSE),
        JobJournalLine.Type::"G/L Account",JobJournalLine."Line Type"::Schedule,JobJournalLine."CWIP G/L Type"::Overheads);

      ASSERTERROR LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Verified Recurring Job Journals with Not CWIP Job and CWIP G/L Type as Overheads
      Assert.ExpectedError(
        STRSUBSTNO(
          CWIPGLErr,JobJournalLine."CWIP G/L Type",JobJournalLine."Journal Template Name",
          JobJournalLine."Journal Batch Name",JobJournalLine."Line No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,MessageHandler)]
    PROCEDURE RecurringJobJournalWithMultiLines@1500031();
    VAR
      JobJournalLine@1500001 : Record 210;
      DocumentNo@1500000 : Code[20];
      ExpectedCount@1500002 : Integer;
    BEGIN
      // [SCENARIO 164098] Post Recurring Job Journals with Multiple Lines
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task
      Initialize;

      // [WHEN] Create Recurring Job Journal and Post
      CreateRecurringJobJournalTemplateAndBatch(JobJournalTemplate,JobJournalBatch);
      DocumentNo := NoSeriesManagement.GetNextNo(JobJournalBatch."Posting No. Series",JobJournalLine."Posting Date",FALSE);
      ExpectedCount := CreateMultipleRecurringJobJournalLine(JobJournalLine,DocumentNo);
      LibraryJob.PostJobJournal(JobJournalLine);

      // [THEN] Verified Recurring Job Journals with Multiple Lines
      VerifyScheduleJobLineType(JobTask."Job No.",DocumentNo,ExpectedCount);
    END;

    [Test]
    [HandlerFunctions(JobCreateSalesInvoiceRequestPagehandler,MessageHandler)]
    PROCEDURE VerifyErrorOnSelectingFormCodeInSalesInvoiceCreatedFromJob@1500042();
    VAR
      JobPlanningLine@1500009 : Record 1003;
      Customer@1500006 : Record 18;
      SalesLine@1500005 : Record 37;
      StructureHeader@1500004 : Record 13792;
      Location@1500003 : Record 14;
      TaxArea@1500002 : Record 318;
      TaxGroup@1500001 : Record 321;
    BEGIN
      // [SCENARIO BUG ID 163781] Error message on selecting Form Code in Sales invoice created from Job
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task and Create Structure
      Initialize;
      ModifyJob(JobTask,Customer);
      CreateStructureHeaderAndLine(StructureHeader);
      CreateSalesTaxStructureRelatedInformation(Location,TaxArea,TaxGroup,Customer."No.");

      // [WHEN] Create and Update Job Planning , Updated Sales Header
      CreateAndUpdateJobPlaningLine(JobPlanningLine,JobTask,Location.Code);
      ASSERTERROR UpdateSalesLine(SalesLine,JobPlanningLine."Job Contract Entry No.",TaxGroup.Code,TRUE);

      // [THEN] Job and Job Task No. link Error Created.
      Assert.ExpectedError(GetSalesLineUnitPrice(SalesLine));
    END;

    [Test]
    [HandlerFunctions(JobCreateSalesInvoiceRequestPagehandler,MessageHandler)]
    PROCEDURE RectifyErrorOnSelectingFormCodeInSalesInvoiceCreatedFromJob@1500032();
    VAR
      JobPlanningLine@1500001 : Record 1003;
      Customer@1500004 : Record 18;
      SalesLine@1500007 : Record 37;
      StructureHeader@1500013 : Record 13792;
      Location@1500012 : Record 14;
      TaxArea@1500011 : Record 318;
      TaxGroup@1500010 : Record 321;
      ExpectedSalesLine@1500000 : Record 37;
    BEGIN
      // [SCENARIO BUG ID 163781] Error message on selecting Form Code in Sales invoice created from Job
      // [FEATURE] [Job Transactions]

      // [GIVEN] Created Job and Job Task and Create Structure
      Initialize;
      ModifyJob(JobTask,Customer);
      CreateStructureHeaderAndLine(StructureHeader);
      CreateSalesTaxStructureRelatedInformation(Location,TaxArea,TaxGroup,Customer."No.");

      // [WHEN] Create and Update Job Planning , Updated Sales Header
      CreateAndUpdateJobPlaningLine(JobPlanningLine,JobTask,Location.Code);
      UpdateSalesHeaderAndSalesLine(SalesLine,JobPlanningLine."Job Contract Entry No.",StructureHeader.Code,TaxGroup.Code,
        FindAndUpdateStateFormCode(Location."State Code"));
      CalcExpectedTaxAmount(ExpectedSalesLine,SalesLine.Amount,TaxArea,TaxGroup);

      // [THEN] Verified the Tax Amount calculated as per the Form Code
      VerifyTaxAmountInSalesDoc(ExpectedSalesLine,SalesLine."Document Type",SalesLine."Document No.");
    END;

    LOCAL PROCEDURE Initialize@1500039();
    VAR
      Job@1500001 : Record 167;
      JobPostingGroup@1500000 : Record 208;
      LibrarySetupStorage@1500003 : Codeunit 131009;
    BEGIN
      LibraryJob.CreateJobWithPostingGroup(Job,JobPostingGroup);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ModifyJob@1500043(VAR JobTask@1500002 : Record 1001;VAR Customer@1500004 : Record 18);
    VAR
      Job@1500001 : Record 167;
    BEGIN
      GeneralLedgerSetup.GET;
      LibrarySales.CreateCustomer(Customer);
      WITH Job DO BEGIN
        SETRANGE("No.",JobTask."Job No.");
        FINDFIRST;
        VALIDATE("Job Type","Job Type"::" ");
        VALIDATE("Bill-to Customer No.",Customer."No.");
        VALIDATE(Status,Status::Order);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateStructureHeaderAndLine@1500045(VAR StructureHeader@1500000 : Record 13792);
    VAR
      StructureDetails@1500002 : Record 13793;
    BEGIN
      CreateStructureHeader(StructureHeader);
      WITH StructureDetails DO BEGIN
        INIT;
        VALIDATE(Code,StructureHeader.Code);
        VALIDATE(Type,Type::"Sales Tax");
        VALIDATE("Header/Line","Header/Line"::Line);
        VALIDATE("Include Base",TRUE);
        VALIDATE("Include Line Discount",TRUE);
        VALIDATE("Include Invoice Discount",TRUE);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateStructureHeader@1500046(VAR StructureHeader@1500000 : Record 13792);
    BEGIN
      WITH StructureHeader DO BEGIN
        INIT;
        VALIDATE(Code,LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"Structure Header"));
        VALIDATE(Description,Code);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateSalesTaxStructureRelatedInformation@1500033(VAR Location@1500014 : Record 14;VAR TaxArea@1500015 : Record 318;VAR TaxGroup@1500016 : Record 321;CustomerNo@1500017 : Code[20]);
    VAR
      TaxJurisdiction@1500011 : Record 320;
      TaxAreaLine@1500009 : Record 319;
      TaxDetail@1500008 : Record 322;
      TaxAreaLocations@1500006 : Record 13761;
      State@1500000 : Record 13762;
    BEGIN
      CreateStateAndModifyCustomerAndLocation(State,Location,CustomerNo);
      LibraryERM.CreateTaxGroup(TaxGroup);
      LibraryERM.CreateTaxJurisdiction(TaxJurisdiction);
      TaxJurisdiction.VALIDATE("Tax Type",TaxJurisdiction."Tax Type"::CST);
      TaxJurisdiction.VALIDATE("State Code",State.Code);
      TaxJurisdiction.MODIFY(TRUE);
      LibraryERM.CreateTaxArea(TaxArea);
      LibraryERM.CreateTaxAreaLine(TaxAreaLine,TaxArea.Code,TaxJurisdiction.Code);
      TaxAreaLine.VALIDATE("Include Tax Base",TRUE);
      TaxAreaLine.MODIFY(TRUE);
      ServiceTaxAsExciseHelper.CreateTaxAreaLocations(Location.Code,State.Code,TaxArea.Code,TaxAreaLocations.Type::Customer);
      ServiceTaxAsExciseHelper.CreateTaxDetail(TaxDetail,TaxJurisdiction.Code,TaxGroup.Code,TaxDetail."Tax Type"::"Sales Tax",
        WORKDATE,LibraryRandom.RandDec(10,2),ServiceTaxAsExciseHelper.FindStateFormCode(State.Code));
    END;

    LOCAL PROCEDURE CreateStateAndModifyCustomerAndLocation@1500047(VAR State@1500000 : Record 13762;VAR Location@1500014 : Record 14;CustomerNo@1500017 : Code[20]);
    VAR
      Customer@1500001 : Record 18;
    BEGIN
      ServiceTaxAsExciseHelper.CreateStateWithCForm(State);
      State.VALIDATE("Tax Account (Sales)",LibraryERM.CreateGLAccountNo);
      State.MODIFY(TRUE);
      WITH Customer DO BEGIN
        GET(CustomerNo);
        VALIDATE("State Code",State.Code);
        VALIDATE("Tax Liable",TRUE);
        VALIDATE("Location Code",Location.Code);
        MODIFY(TRUE);
      END;
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("State Code",State.Code);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMultipleJobJournalLine@1500006(VAR JobJournalLine@1500000 : Record 210);
    VAR
      i@1500001 : Integer;
      CWIPGLType@1500002 : Integer;
    BEGIN
      FOR i := 1 TO 3 DO BEGIN
        CWIPGLType += 1;
        CreateAndUpdateJobJournalLine(
          JobJournalLine,JobJournalLine."Line Type"::Schedule,JobJournalLine.Type::"G/L Account",CWIPGLType);
      END;
    END;

    LOCAL PROCEDURE CreateAndUpdateJobJournalLine@1500004(VAR JobJournalLine@1500000 : Record 210;LineType@1500003 : ' ,Schedule,Contract,Both Schedule and Contract';JobType@1500004 : 'Resource,Item,G/L Account';CWIPGLType@1500009 : ' ,Labor,Material,Overheads');
    VAR
      Location@1500005 : Record 14;
    BEGIN
      LibraryJob.CreateJobJournalLine(LineType,JobTask,JobJournalLine);
      WITH JobJournalLine DO BEGIN
        VALIDATE(Type,JobType);
        CASE Type OF
          Type::"G/L Account":
            VALIDATE("No.",LibraryERM.CreateGLAccountNo);
          Type::Item:
            VALIDATE("No.",LibraryInventory.CreateItemNo);
          Type::Resource:
            VALIDATE("No.",LibraryResource.CreateResourceNo);
        END;
        VALIDATE("Location Code",LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location));
        VALIDATE("CWIP G/L Type",CWIPGLType);
        VALIDATE(Quantity,LibraryRandom.RandInt(10));
        VALIDATE("Unit Cost",LibraryRandom.RandDecInRange(100,10000,1));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateAndUpdateRecurringJobJournalLine@1500025(VAR JobJournalLine@1500006 : Record 210;JobTask@1500005 : Record 1001;DocumentNo@1500000 : Code[20];JobType@1500007 : 'Resource,Item,G/L Account';LineType@1500004 : Option;CWIPGLType@1500001 : ' ,Labor,Material,Overheads');
    BEGIN
      WITH JobJournalLine DO BEGIN
        VALIDATE("Journal Template Name",JobJournalTemplate.Name);
        VALIDATE("Journal Batch Name",JobJournalBatch.Name);
        VALIDATE("Document No.",DocumentNo);
        VALIDATE("Line No.",LibraryRandom.RandInt(1000));
        VALIDATE("Job No.",JobTask."Job No.");
        VALIDATE("Job Task No.",JobTask."Job Task No.");
        INSERT(TRUE);
        UpdateJobJournalWithRecurring(JobJournalLine,JobType,CWIPGLType,LineType);
      END;
    END;

    LOCAL PROCEDURE CreateRecurringJobJournalTemplateAndBatch@1500026(VAR JobJournalTemplate@1500001 : Record 209;VAR JobJournalBatch@1500000 : Record 237);
    BEGIN
      LibraryJob.GetJobJournalTemplate(JobJournalTemplate);
      JobJournalTemplate.VALIDATE("No. Series",'');
      JobJournalTemplate.VALIDATE(Recurring,TRUE);
      JobJournalTemplate.MODIFY(TRUE);
      LibraryJob.CreateJobJournalBatch(JobJournalTemplate.Name,JobJournalBatch);
      JobJournalBatch.VALIDATE("Posting No. Series",LibraryJob.GetJobTestNoSeries);
      JobJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMultipleRecurringJobJournalLine@1500034(VAR JobJournalLine@1500000 : Record 210;DocumentNo@1500003 : Code[20]) : Integer;
    VAR
      i@1500001 : Integer;
      CWIPGLType@1500002 : Integer;
    BEGIN
      FOR i := 1 TO 3 DO BEGIN
        CWIPGLType += 1;
        CreateAndUpdateRecurringJobJournalLine(
          JobJournalLine,JobTask,DocumentNo,JobJournalLine.Type::"G/L Account",JobJournalLine."Line Type"::Schedule,
          CWIPGLType);
      END;
      EXIT(i);
    END;

    LOCAL PROCEDURE CreateAndUpdateJobPlaningLine@1500036(VAR JobPlanningLine@1500000 : Record 1003;JobTask@1500002 : Record 1001;LocationCode@1500001 : Code[10]);
    VAR
      JobPlanningLines@1500003 : TestPage 1007;
    BEGIN
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::"Both Schedule and Contract",JobPlanningLine.Type::Item,
        JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE("Location Code",LocationCode);
      JobPlanningLine.MODIFY(TRUE);
      COMMIT;
      WITH JobPlanningLines DO BEGIN
        OPENEDIT;
        FILTER.SETFILTER("Job No.",JobTask."Job No.");
        FILTER.SETFILTER("Job Task No.",JobTask."Job Task No.");
        Action51.INVOKE;
      END;
    END;

    LOCAL PROCEDURE UpdateJobJournalWithRecurring@1500020(VAR JobJournalLine@1500000 : Record 210;JobType@1500002 : 'Resource,Item,G/L Account';CWIPGLType@1500003 : ' ,Labor,Material,Overheads';LineType@1500005 : Option);
    VAR
      Location@1500001 : Record 14;
      RecurringFrequency@1500004 : DateFormula;
    BEGIN
      WITH JobJournalLine DO BEGIN
        VALIDATE(Type,JobType);
        CASE Type OF
          Type::"G/L Account":
            VALIDATE("No.",LibraryERM.CreateGLAccountNo);
          Type::Item:
            VALIDATE("No.",LibraryInventory.CreateItemNo);
          Type::Resource:
            VALIDATE("No.",LibraryResource.CreateResourceNo);
        END;
        VALIDATE("Location Code",LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location));
        VALIDATE("CWIP G/L Type",CWIPGLType);
        VALIDATE(Quantity,LibraryRandom.RandInt(10));
        VALIDATE("Unit Cost",LibraryRandom.RandDecInRange(100,10000,1));
        VALIDATE("Recurring Method","Recurring Method"::Fixed);
        EVALUATE(RecurringFrequency,'<1M>');
        VALIDATE("Recurring Frequency",RecurringFrequency);
        VALIDATE("Posting Date",WORKDATE);
        VALIDATE("Line Type",LineType);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateSalesHeader@1500052(VAR SalesLine@1500000 : Record 37;StructureCode@1500002 : Code[10];FormCode@1500005 : Code[10]);
    VAR
      SalesHeader@1500004 : Record 36;
    BEGIN
      WITH SalesHeader DO BEGIN
        SETRANGE("No.",SalesLine."Document No.");
        FINDFIRST;
        VALIDATE("Posting Date",WORKDATE);
        VALIDATE(Structure,StructureCode);
        VALIDATE("Form Code",FormCode);
        MODIFY(TRUE);
        SalesLine.CalculateStructures(SalesHeader);
      END;
    END;

    LOCAL PROCEDURE UpdateSalesLine@1500038(VAR SalesLine@1500000 : Record 37;JobLedgerEntryNo@1500001 : Integer;TaxGroupCode@1500003 : Code[10];Validation@1500002 : Boolean);
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Job Contract Entry No.",JobLedgerEntryNo);
        FINDFIRST;
        VALIDATE("Tax Group Code",TaxGroupCode);
        IF Validation THEN BEGIN
          VALIDATE("Unit Price");
          VALIDATE("Unit Cost (LCY)");
        END;
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateSalesHeaderAndSalesLine@1500051(VAR SalesLine@1500000 : Record 37;JobLedgerEntryNo@1500001 : Integer;StructureCode@1500002 : Code[10];TaxGroupCode@1500003 : Code[10];FormCode@1500005 : Code[10]);
    BEGIN
      UpdateSalesLine(SalesLine,JobLedgerEntryNo,TaxGroupCode,FALSE);
      UpdateSalesHeader(SalesLine,StructureCode,FormCode);
    END;

    LOCAL PROCEDURE VerifyScheduleJobLineType@1500005(JobNo@1500005 : Code[20];DocumentNo@1500001 : Code[20];ExpectedCount@1500002 : Integer);
    VAR
      DummyJobLedgerEntry@1500000 : Record 169;
    BEGIN
      DummyJobLedgerEntry.SETRANGE("Job No.",JobNo);
      DummyJobLedgerEntry.SETRANGE("Document No.",DocumentNo);
      Assert.RecordCount(DummyJobLedgerEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE CalcExpectedTaxAmount@1500037(VAR ExpectedSalesLineTaxValue@1500000 : Record 37;ExpectedAmount@1500003 : Decimal;TaxArea@1500004 : Record 318;TaxGroup@1500005 : Record 321);
    VAR
      TaxAreaLine@1500006 : Record 319;
      TaxDetail@1500007 : Record 322;
    BEGIN
      TaxAreaLine.SETRANGE("Tax Area",TaxArea.Code);
      TaxAreaLine.FINDFIRST;
      TaxDetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
      TaxDetail.SETRANGE("Tax Group Code",TaxGroup.Code);
      TaxDetail.FINDFIRST;
      WITH ExpectedSalesLineTaxValue DO BEGIN
        "Tax %" := TaxDetail."Tax Below Maximum";
        "Tax Amount" := ROUND(ExpectedAmount / 100 * "Tax %");
      END;
    END;

    LOCAL PROCEDURE VerifyTaxAmountInSalesDoc@1500044(ExpectedSalesLineTaxValue@1500002 : Record 37;DocumentType@1500001 : Option;DocumentNo@1500000 : Code[20]);
    VAR
      SalesLine@1500003 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        Assert.AreEqual(
          ExpectedSalesLineTaxValue."Tax %","Tax %",
          STRSUBSTNO(AmountErr,FIELDNAME("Tax %"),TABLECAPTION));
        Assert.AreNearlyEqual(
          ExpectedSalesLineTaxValue."Tax Amount","Tax Amount",GeneralLedgerSetup."VAT Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("Tax Amount"),TABLECAPTION));
      END;
    END;

    PROCEDURE FindAndUpdateStateFormCode@1500040(StateCode@1500001 : Code[10]) : Code[10];
    VAR
      StateForms@1500000 : Record 13767;
      FormCodes@1500002 : Record 13756;
    BEGIN
      WITH StateForms DO BEGIN
        SETRANGE(State,StateCode);
        FINDFIRST;
        FormCodes.SETRANGE(Code,"Form Code");
        FormCodes.FINDFIRST;
        FormCodes.VALIDATE("Transit Document",FALSE);
        FormCodes.MODIFY(TRUE);
        EXIT("Form Code");
      END;
    END;

    LOCAL PROCEDURE GetSalesLineUnitPrice@1500041(SalesLine@1500000 : Record 37) : Text;
    BEGIN
      ASSERTERROR SalesLine.VALIDATE("Unit Price");
      EXIT(GETLASTERRORTEXT);
    END;

    [RequestPageHandler]
    PROCEDURE JobCreateSalesInvoiceRequestPagehandler@1500035(VAR JobTransfertoSalesInvoice@1500000 : TestRequestPage 1094);
    BEGIN
      JobTransfertoSalesInvoice.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@1500054(QuestionText@1500000 : Text;VAR Relpy@1500001 : Boolean);
    BEGIN
      Relpy := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500011(Message@1500001 : Text[1024]);
    BEGIN
      EXIT;
    END;

    BEGIN
    END.
  }
}

