OBJECT Codeunit 137262 SCM Invt Item Tracking III
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryJob@1008 : Codeunit 131920;
      LibraryERM@1020 : Codeunit 131300;
      LibraryInventory@1003 : Codeunit 132201;
      LibraryItemTracking@1023 : Codeunit 130502;
      LibraryManufacturing@1016 : Codeunit 132202;
      LibraryPurchase@1002 : Codeunit 130512;
      LibrarySales@1011 : Codeunit 130509;
      LibraryUtility@1006 : Codeunit 131000;
      LibraryWarehouse@1004 : Codeunit 132204;
      LibraryVariableStorage@1012 : Codeunit 131004;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryPatterns@1019 : Codeunit 132212;
      TrackingOption@1014 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,SetLotNoAndQty,SetSerialNoAndQty,SelectAndApplyToItemEntry,SetEntriesToInvoice';
      DocType@1018 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      isInitialized@1001 : Boolean;
      ItemTrackingExistErr@1013 : TextConst 'ENU=You must delete the existing item tracking before modifying';
      ItemTrackingQuantityError@1007 : TextConst 'ENU=Item tracking defined for item %1 in the %2 accounts for more than the quantity you have entered.';
      DescriptionError@1022 : TextConst 'ENU=Description must match.';
      ReleasedProductionOrderOutput@1021 : TextConst 'ENU=Released Production Order Output';
      QuantityErr@1009 : TextConst 'ENU=Quantity is Incorrect';
      WrongSerialNoErr@1010 : TextConst 'ENU=Wrong Serial No. in Pick Line.';
      SalesLineBinCodeErr@1015 : TextConst 'ENU=Incorrect Bin Code';
      WrongFieldValueErr@1024 : TextConst 'ENU=Incorrect value of %1 in %2';
      TransferReceiptLineNotExistsErr@1017 : TextConst 'ENU=Transfer Receipt Line not exists.';
      ClearApplEntryErr@1025 : TextConst 'ENU=Incorrect Appl. Item Entry clearing.';
      WrongInvoicedQtyErr@1026 : TextConst '@@@="%1=Purch. Rcpt. Line table caption";ENU=Quantity Invoiced is incorrect in %1.';

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ValidateBinCodeFromSalesLineWhenProdOrderIsCreated@247();
    VAR
      SalesLine@1000 : Record 37;
      SalesHeader@1001 : Record 36;
      BinContent@1004 : Record 7302;
      BinContent2@1002 : Record 7302;
      ItemNo@1003 : Code[20];
    BEGIN
      // [SCENARIO 360930] It is allowed to change Bin Code from Sales Line When Production Order is Created from Sales Order
      Initialize;

      // [GIVEN] Tracked Item "X" with two Bin Contents "B1", "B2". Warehouse Item Tracking enabled
      ItemNo := CreateTrackedItemWithTwoBinContents(BinContent,BinContent2);

      // [GIVEN] Sales Order Line for Item "X" with "Bin Code" = "B1"
      CreateSalesOrderWithRandomQty(SalesHeader,SalesLine,BinContent."Location Code",BinContent."Bin Code",ItemNo);

      // [GIVEN] Released Production Order created from Sales Order with Positive and Negative Reservation Entry
      CreateReleasedProdOrderWithReservEntry(SalesHeader,SalesLine);

      // [WHEN] Change Sales Line's "Bin Code" to "B2"
      ChangeBinCodeInSalesLine(SalesLine,BinContent2."Bin Code");

      // [THEN] Sales Line's "Bin Code" = "B2"
      Assert.AreEqual(BinContent2."Bin Code",SalesLine."Bin Code",SalesLineBinCodeErr);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE LOTNoPstdPurchDocumentWithOriginUsage@1();
    VAR
      ItemLedgerEntry@1007 : Record 32;
      PurchRcptHeader@1006 : Record 120;
      ItemTracing@1003 : TestPage 6520;
      TraceMethod@1009 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1000 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      // Verify Item Tracing Line using Trace Method Forward (Origin -> Usage) with Item Tracking for Posted Purchase Document.

      // Setup.
      Initialize;
      SetupTrackingEntryForSalesAndPurchase(ItemLedgerEntry,TrackingOption::AssignLotNo,FALSE,TRUE);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'','',ItemLedgerEntry."Lot No.",TraceMethod::"Origin -> Usage");

      // Verify: Verify Item Tracing Page for Posted Document.
      VerifyItemTracingLine(
        ItemTracing,PurchRcptHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        ItemLedgerEntry."Location Code",ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE LOTNoPstdPurchDocumentWithUsageOrigin@45();
    VAR
      ItemLedgerEntry@1007 : Record 32;
      PurchRcptHeader@1006 : Record 120;
      ItemTracing@1003 : TestPage 6520;
      TraceMethod@1009 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1000 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      // Verify Item Tracing Line using Trace Method Backward (Usage -> Origin) with Item Tracking for Posted Purchase Document.

      // Setup.
      Initialize;
      SetupTrackingEntryForSalesAndPurchase(ItemLedgerEntry,TrackingOption::AssignLotNo,FALSE,TRUE);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'','',ItemLedgerEntry."Lot No.",TraceMethod::"Usage -> Origin");

      // Verify: Verify Item Tracing Page for Posted Document.
      VerifyNextItemTracingLine(
        ItemTracing,PurchRcptHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        ItemLedgerEntry."Location Code",ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE LOTNoPstdSalesDocumentWithUsageOrigin@53();
    VAR
      ItemLedgerEntry@1007 : Record 32;
      SalesShipmentHeader@1008 : Record 110;
      ItemTracing@1003 : TestPage 6520;
      TraceMethod@1004 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1000 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      // Verify Item Tracing Line using Trace Method Forward (Origin -> Usage) with Item Tracking for Posted Sales Document.

      // Setup.
      Initialize;
      SetupTrackingEntryForSalesAndPurchase(ItemLedgerEntry,TrackingOption::AssignLotNo,FALSE,TRUE);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'','',ItemLedgerEntry."Lot No.",TraceMethod::"Usage -> Origin");

      // Verify: Verify Item Tracing Page for Posted Document.
      VerifyItemTracingLine(
        ItemTracing,SalesShipmentHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        ItemLedgerEntry."Location Code",-ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE LOTNoPstdSalesDocumentWithOriginUsage@40();
    VAR
      ItemLedgerEntry@1007 : Record 32;
      SalesShipmentHeader@1008 : Record 110;
      ItemTracing@1003 : TestPage 6520;
      TraceMethod@1004 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1000 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      // Verify Item Tracing Line using Trace Method Forward (Origin -> Usage) with Item Tracking for Long Chain Posted Documents (Purchase Order,Transfer Order,Sales Order).

      // Setup.
      Initialize;
      SetupTrackingEntryForSalesAndPurchase(ItemLedgerEntry,TrackingOption::AssignLotNo,FALSE,TRUE);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'','',ItemLedgerEntry."Lot No.",TraceMethod::"Origin -> Usage");

      // Verify: Verify Item Tracing Page for Posted Document.
      VerifyNextItemTracingLine(
        ItemTracing,SalesShipmentHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        ItemLedgerEntry."Location Code",-ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE LOTNoForLongChainPstdDocumentWithOriginUsage@69();
    VAR
      ItemLedgerEntry@1007 : Record 32;
      PurchRcptHeader@1006 : Record 120;
      SalesShipmentHeader@1008 : Record 110;
      TransferLine@1011 : Record 5741;
      TransferReceiptHeader@1015 : Record 5746;
      TransferShipmentHeader@1014 : Record 5744;
      ItemTracing@1000 : TestPage 6520;
      TraceMethod@1009 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1001 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      // Verify Item Tracing Line using Trace Method Forward (Usage -> Origin) with Item Tracking for Long Chain Posted Documents (Purchase Order,Transfer Order,Sales Order).
      SetupLOTNoForLongChainPstdDocument(ItemLedgerEntry,TransferLine,TrackingOption::AssignLotNo,FALSE,TRUE);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'','',ItemLedgerEntry."Lot No.",TraceMethod::"Origin -> Usage");

      // Verify: Verify Item Tracing Page for different Posted Documents.
      VerifyItemTracingLine(
        ItemTracing,PurchRcptHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        TransferLine."Transfer-from Code",ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,TransferShipmentHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        TransferLine."Transfer-from Code",-ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,TransferShipmentHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        TransferLine."In-Transit Code",ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,TransferReceiptHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        TransferLine."In-Transit Code",-ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,TransferReceiptHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        TransferLine."Transfer-to Code",ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,SalesShipmentHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        TransferLine."Transfer-to Code",-ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE LOTNoForLongChainPstdDocumentWithUsageOrigin@26();
    VAR
      ItemLedgerEntry@1007 : Record 32;
      PurchRcptHeader@1006 : Record 120;
      SalesShipmentHeader@1005 : Record 110;
      TransferLine@1004 : Record 5741;
      TransferReceiptHeader@1003 : Record 5746;
      TransferShipmentHeader@1002 : Record 5744;
      ItemTracing@1001 : TestPage 6520;
      TraceMethod@1000 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1008 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      // Verify Item Tracing Opposite from Line using Trace Method with Item Tracking for Posted Purchase Document.
      SetupLOTNoForLongChainPstdDocument(ItemLedgerEntry,TransferLine,TrackingOption::AssignLotNo,FALSE,TRUE);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'','',ItemLedgerEntry."Lot No.",TraceMethod::"Usage -> Origin");

      // Verify: Verify Item Tracing Page for different Posted Documents.
      VerifyItemTracingLine(
        ItemTracing,SalesShipmentHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        TransferLine."Transfer-to Code",-ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,TransferReceiptHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        TransferLine."Transfer-to Code",ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,TransferReceiptHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        TransferLine."In-Transit Code",-ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,TransferShipmentHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        TransferLine."In-Transit Code",ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,TransferShipmentHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        TransferLine."Transfer-from Code",-ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,PurchRcptHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        TransferLine."Transfer-from Code",ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE TraceOppositeFromLineForPstdPurchDocument@91();
    VAR
      ItemLedgerEntry@1007 : Record 32;
      PurchRcptHeader@1006 : Record 120;
      ItemTracing@1003 : TestPage 6520;
      TraceMethod@1009 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1000 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      // Verify Item Tracing Opposite from Line using Trace Method with Item Tracking for Posted Purchase Document.

      // Setup.
      Initialize;
      SetupTrackingEntryForSalesAndPurchase(ItemLedgerEntry,TrackingOption::AssignLotNo,FALSE,TRUE);
      OpenItemTracingPage(ItemTracing,'','',ItemLedgerEntry."Lot No.",TraceMethod::"Origin -> Usage");

      // Exercise.
      ItemTracing.TraceOppositeFromLine.INVOKE;

      // Verify: Verify Item Tracing Page with Trace Opposite From Line Option.
      VerifyItemTracingLine(
        ItemTracing,PurchRcptHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        ItemLedgerEntry."Location Code",ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE LOTNoForRlsdProdOrder@55();
    VAR
      Item@1000 : Record 27;
      ItemLedgerEntry@1005 : Record 32;
      ProductionOrder@1001 : Record 5405;
      ItemTracing@1008 : TestPage 6520;
      TraceMethod@1002 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1003 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      // Verify Item Tracing Line using Trace Method Forward with Item Tracking for Released Production Order.

      // Setup.
      Initialize;
      Item.GET(CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode(FALSE,TRUE)));
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.MODIFY(TRUE);

      // Create Released Production Order and Post Output.
      CreateAndRefreshProductionOrderWithIT(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(10),TrackingOption::AssignLotNo);
      CreateAndPostOutputJournal(ProductionOrder."No.");
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.");

      // Exercise.
      OpenItemTracingPage(ItemTracing,'','',ItemLedgerEntry."Lot No.",TraceMethod::"Usage -> Origin");

      // Verify: Verify Item Tracing Page for Posted Document.
      VerifyItemTracingLine(
        ItemTracing,ReleasedProductionOrderOutput,'',ItemLedgerEntry."Lot No.",Item."No.",ProductionOrder."Location Code",
        ProductionOrder.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE LOTNoForReclassJouranl@107();
    VAR
      Item@1001 : Record 27;
      ItemJournalBatch@1005 : Record 233;
      ItemJournalLine@1004 : Record 83;
      ItemLedgerEntry@1009 : Record 32;
      Location@1000 : Record 14;
      NewLocation@1003 : Record 14;
      PurchaseLine@1002 : Record 39;
      PurchRcptHeader@1008 : Record 120;
      SalesLine@1007 : Record 37;
      SalesShipmentHeader@1013 : Record 110;
      ItemTracing@1010 : TestPage 6520;
      TraceMethod@1011 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1006 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      // Verify Item Tracing Line using Trace Method with Item Tracking for Reclass Journal.

      // Setup.
      Initialize;
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(NewLocation);

      Item.GET(CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode(FALSE,TRUE)));
      CreateAndPostPurchaseOrderWithIT(PurchaseLine,Item."No.",Location.Code,TrackingOption::AssignLotNo);
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.");

      // Create Reclass Journal and Using Post Transfer Inventory From One Location to Another Location.
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue value for ItemTrackingLinesPageHandler.
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Transfer);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Transfer,
        Item."No.",PurchaseLine.Quantity);  // Use Random value for Quantity.
      ItemJournalLine.VALIDATE("Location Code",Location.Code);
      ItemJournalLine.VALIDATE("New Location Code",NewLocation.Code);
      ItemJournalLine.MODIFY(TRUE);
      ItemJournalLine.OpenItemTrackingLines(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
      CreateAndPostSalesOrderWithIT(SalesLine,Item."No.",NewLocation.Code,PurchaseLine.Quantity,FALSE);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'','',ItemLedgerEntry."Lot No.",TraceMethod::"Usage -> Origin");

      // Verify: Verify Item Tracing Page for different Posted Documents.
      VerifyItemTracingLine(
        ItemTracing,SalesShipmentHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",Item."No.",NewLocation.Code,-PurchaseLine.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,ItemLedgerEntry.TABLECAPTION,'',ItemLedgerEntry."Lot No.",Item."No.",NewLocation.Code,PurchaseLine.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,ItemLedgerEntry.TABLECAPTION,'',ItemLedgerEntry."Lot No.",Item."No.",Location.Code,-PurchaseLine.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,PurchRcptHeader.TABLECAPTION,'',ItemLedgerEntry."Lot No.",Item."No.",Location.Code,PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE LOTNoForPositiveAdjmtJouranlWithUsageOrigin@27();
    VAR
      ItemLedgerEntry@1000 : Record 32;
      SalesShipmentHeader@1013 : Record 110;
      Quantity@1012 : Decimal;
      TraceMethod@1011 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1001 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      // Verify Item Tracing Line using Trace Method Backward with Item Tracking for Positive Adjustment from Item Journal.
      Quantity := LibraryRandom.RandInt(10);
      SlAndLOTNoForPositiveAdjmt(
        TraceMethod::"Usage -> Origin",SalesShipmentHeader.TABLECAPTION,ItemLedgerEntry.TABLECAPTION,Quantity,-Quantity,Quantity,
        FALSE,TRUE,TrackingOption::AssignLotNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE LOTNoForPositiveAdjmtJouranlWithOriginUsage@67();
    VAR
      ItemLedgerEntry@1003 : Record 32;
      SalesShipmentHeader@1002 : Record 110;
      Quantity@1001 : Decimal;
      TraceMethod@1000 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1004 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      // Verify Item Tracing Line using Trace Method Forward with Item Tracking for Positive Adjustment from Item Journal.
      Quantity := LibraryRandom.RandInt(10);
      SlAndLOTNoForPositiveAdjmt(
        TraceMethod::"Origin -> Usage",ItemLedgerEntry.TABLECAPTION,SalesShipmentHeader.TABLECAPTION,Quantity,Quantity,-Quantity,
        FALSE,TRUE,TrackingOption::AssignLotNo);
    END;

    LOCAL PROCEDURE SlAndLOTNoForPositiveAdjmt@111(TraceMethod@1017 : Option;Description@1011 : Text[100];Description2@1012 : Text[100];Quantity@1016 : Decimal;Quantity2@1015 : Decimal;Quantity3@1014 : Decimal;SNSpecific@1003 : Boolean;LOTSpecific@1002 : Boolean;TrackingOption@1005 : Option);
    VAR
      ItemJournalLine@1004 : Record 83;
      ItemLedgerEntry@1009 : Record 32;
      SalesLine@1007 : Record 37;
      ItemTracing@1010 : TestPage 6520;
      ItemNo@1000 : Code[20];
    BEGIN
      // Setup.
      Initialize;
      ItemNo :=
        CreateTrackedItem(
          LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(SNSpecific,LOTSpecific));
      CreateItemJournalLineWithIT(ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",TrackingOption,ItemNo,Quantity);
      PostOutputJournal(ItemJournalLine);
      FindItemLedgerEntry(ItemLedgerEntry,ItemNo);
      CreateAndPostSalesOrderWithIT(SalesLine,ItemNo,'',ItemJournalLine.Quantity,FALSE);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'',ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",TraceMethod);

      // Validate Item Tracing
      VerifyItemTracingLine(ItemTracing,Description,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",ItemNo,'',Quantity2);
      VerifyNextItemTracingLine(ItemTracing,Description2,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",ItemNo,'',Quantity3);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE LOTNoForNegativeAdjmtJouranlWithUsageOrigin@74();
    VAR
      Quantity@1014 : Decimal;
      Quantity2@1012 : Decimal;
      TraceMethod@1011 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1000 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      // Verify Item Tracing Line using Trace Method Backward with Item Tracking for Negative Adjustment from Item Journal.
      Quantity := 5 + LibraryRandom.RandInt(10);
      Quantity2 := LibraryRandom.RandInt(5);
      SlAndLOTNoForNegativeAdjmt(
        TraceMethod::"Usage -> Origin",Quantity,Quantity2,-Quantity2,Quantity,FALSE,TRUE,TrackingOption::AssignLotNo);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE LOTNoForNegativeAdjmtJouranlWithOriginUsage@73();
    VAR
      Quantity@1014 : Integer;
      Quantity2@1012 : Integer;
      TraceMethod@1011 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1000 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      // Verify Item Tracing Line using Trace Method Forward with Item Tracking for Negative Adjustment from Item Journal.
      Quantity := 5 + LibraryRandom.RandInt(10);
      Quantity2 := LibraryRandom.RandInt(5);
      SlAndLOTNoForNegativeAdjmt(
        TraceMethod::"Origin -> Usage",Quantity,Quantity2,Quantity,-Quantity2,FALSE,TRUE,TrackingOption::AssignLotNo);
    END;

    LOCAL PROCEDURE SlAndLOTNoForNegativeAdjmt@96(TraceMethod@1017 : Option;Quantity@1003 : Decimal;Quantity2@1014 : Decimal;Quantity3@1016 : Decimal;Quantity4@1015 : Decimal;SNSpecific@1005 : Boolean;LOTSpecific@1004 : Boolean;TrackingOption2@1001 : Option);
    VAR
      ItemJournalLine@1011 : Record 83;
      ItemLedgerEntry@1010 : Record 32;
      ItemTracing@1002 : TestPage 6520;
      ItemNo@1000 : Code[20];
      TrackingOption@1006 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      // Setup.
      Initialize;
      ItemNo :=
        CreateTrackedItem(
          LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(SNSpecific,LOTSpecific));
      CreateItemJournalLineWithIT(ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",TrackingOption2,ItemNo,Quantity);
      PostOutputJournal(ItemJournalLine);
      CreateItemJournalLineWithIT(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Negative Adjmt.",TrackingOption::SelectEntries,ItemNo,Quantity2);
      PostOutputJournal(ItemJournalLine);
      FindItemLedgerEntry(ItemLedgerEntry,ItemNo);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'',ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",TraceMethod);

      // Validate Item Tracing
      VerifyItemTracingLine(
        ItemTracing,ItemLedgerEntry.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",ItemNo,'',Quantity3);
      VerifyNextItemTracingLine(
        ItemTracing,ItemLedgerEntry.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",ItemNo,'',Quantity4);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostOutputJournalWithReleasedProductionOrder@2();
    VAR
      Bin@1013 : Record 7354;
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      ItemJournalLine@1009 : Record 83;
      ProductionBOMLine@1002 : Record 99000772;
      ProductionOrder@1014 : Record 5405;
      RoutingLine@1005 : Record 99000764;
      ItemLedgerEntry@1003 : Record 32;
      TrackingOption@1004 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
      ItemJournalQuantity@1021 : Decimal;
    BEGIN
      // Verify Item Ledger Entry for Posted Output Journal with Released Production Order.

      // Setup: Create Production BOM,Create Routing,Create Production Order with Auto Reserve,Create Output Journal.
      Initialize;
      CreateAndModifyItem(Item,Item."Replenishment System"::"Prod. Order");
      CreateAndModifyItem(Item2,Item2."Replenishment System"::Purchase);
      CreateProductionBOM(ProductionBOMLine,Item2."No.",Item."Base Unit of Measure");
      CreateRouting(RoutingLine,ProductionBOMLine."Routing Link Code");

      // Add Production BOM No. and Routing No. to Item.
      UpdateItem(Item,ProductionBOMLine."Production BOM No.",RoutingLine."Routing No.");
      CreateLocationWithBin(Bin,Item2."No.");
      ItemJournalQuantity := (LibraryRandom.RandInt(10) + 10) * ProductionBOMLine."Quantity per";  // Take Random Value greater than OutputJournal Quantity.
      CreateItemJournalLineWithIT(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",TrackingOption::AssignLotNo,Item2."No.",ItemJournalQuantity);
      ModifyAndPostItemJournal(ItemJournalLine,Bin);
      CreateProductionOrderWithAutoReserve(ProductionOrder,Item."No.",ItemJournalQuantity,Bin."Location Code");
      CreateAndModifyOutputJournal(
        ItemJournalLine,ProductionOrder."No.",RoutingLine."Operation No.",Item."Gen. Prod. Posting Group",Item2."No.");
      ItemJournalQuantity := ItemJournalLine.Quantity;

      // Exercise: Post Output Journal.
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      // Verify: Verify Item Ledger Entry.
      VerifyItemLedgerEntry(Item."No.",Bin."Location Code",ItemLedgerEntry."Entry Type"::Output,ItemJournalQuantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ILEAfterUpdateQtyMultipleTimes@18();
    VAR
      Bin@1002 : Record 7354;
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      ItemLedgerEntry@1004 : Record 32;
      TransferLine@1005 : Record 5741;
      TransferHeader@1008 : Record 5740;
      TrackingOption@1003 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
      Quantity@1007 : Decimal;
    BEGIN
      // Verify Item Ledger Entry after posting Transfer Order as Ship for an Item with Item Tracking when Quantity updated multiple times for a Lot No.

      // Setup: Create Item, create Transfer Order and update Quantity on Item Tracking Line for same Lot No.
      Initialize;
      Item.GET(CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode(FALSE,TRUE)));  // TRUE for Lot Specific.
      CreateLocationWithBin(Bin,Item."No.");
      CreateItemJournalLineWithIT(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",TrackingOption::AssignLotNo,Item."No.",
        2 * LibraryRandom.RandInt(100));  // Use Random value for Quantity.
      ModifyAndPostItemJournal(ItemJournalLine,Bin);
      CreateTransferOrder(TransferLine,Bin."Location Code",Item."No.",ItemJournalLine.Quantity / 2);
      Quantity := LibraryRandom.RandDec(TransferLine.Quantity,2);  // Use random value for Quantity less than Quantity on Transfer Line.
      UpdateQuantityOnItemTrackingLines(TransferLine,TransferLine.Quantity - Quantity);
      UpdateQuantityOnItemTrackingLines(TransferLine,TransferLine.Quantity);
      TransferHeader.GET(TransferLine."Document No.");

      // Exercise: Post Transfer Order as Ship.
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);

      // Verify: Verify Quantity on Item Ledger Entry.
      VerifyItemLedgerEntry(
        Item."No.",TransferLine."Transfer-from Code",ItemLedgerEntry."Entry Type"::Transfer,-TransferLine.Quantity);
      VerifyItemLedgerEntry(Item."No.",TransferLine."In-Transit Code",ItemLedgerEntry."Entry Type"::Transfer,TransferLine.Quantity);
    END;

    [Normal]
    LOCAL PROCEDURE LOTNoForLongTransferChain@19(TraceMethod@1009 : Option;CostingMethod@1000 : Option);
    VAR
      ItemLedgerEntry@1007 : Record 32;
      ItemTracing@1001 : TestPage 6520;
    BEGIN
      SetupLongChainWithTransferAndLot(ItemLedgerEntry,CostingMethod);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'','',ItemLedgerEntry."Lot No.",TraceMethod);

      // Verify: Verify Item Tracing Page for different Posted Documents.
      ItemLedgerEntry.SETFILTER("Entry Type",'<>%1',ItemLedgerEntry."Entry Type"::Sale);
      VerifyItemTracingLinesForLongChain(ItemLedgerEntry,ItemTracing,FALSE);

      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Sale);
      VerifyItemTracingLinesForLongChain(ItemLedgerEntry,ItemTracing,TRUE);

      VerifyAlreadyTraced(ItemTracing);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE LOTLongTransferChainUsageOriginFIFO@81();
    VAR
      Item@1000 : Record 27;
      TraceMethod@1001 : 'Origin -> Usage,Usage -> Origin';
    BEGIN
      LOTNoForLongTransferChain(TraceMethod::"Usage -> Origin",Item."Costing Method"::FIFO);
    END;

    [Normal]
    LOCAL PROCEDURE SNLOTForLongProdChain@78(TraceMethod@1009 : Option);
    VAR
      CompItemLedgerEntry@1007 : Record 32;
      SubItemLedgerEntry@1010 : Record 32;
      TopItemLedgerEntry@1000 : Record 32;
      ItemTracing@1001 : TestPage 6520;
    BEGIN
      SetupProdChainWithSN(CompItemLedgerEntry,SubItemLedgerEntry,TopItemLedgerEntry);

      // Check a random top item tracing entry.
      TopItemLedgerEntry.FINDSET;
      TopItemLedgerEntry.NEXT(RANDOM(TopItemLedgerEntry.COUNT));
      OpenItemTracingPage(
        ItemTracing,TopItemLedgerEntry."Item No.",TopItemLedgerEntry."Serial No.",TopItemLedgerEntry."Lot No.",TraceMethod);
      VerifySingleItemTracingLine(ItemTracing,TopItemLedgerEntry,1);

      // Check a random subassembly item tracing entry - consumption and output.
      SubItemLedgerEntry.SETRANGE("Entry Type",SubItemLedgerEntry."Entry Type"::Consumption);
      SubItemLedgerEntry.FINDSET;
      SubItemLedgerEntry.NEXT(RANDOM(SubItemLedgerEntry.COUNT));
      VerifySingleItemTracingLine(ItemTracing,SubItemLedgerEntry,1);

      SubItemLedgerEntry.SETRANGE("Entry Type",SubItemLedgerEntry."Entry Type"::Output);
      SubItemLedgerEntry.FINDSET;
      SubItemLedgerEntry.NEXT(RANDOM(SubItemLedgerEntry.COUNT));
      VerifySingleItemTracingLine(ItemTracing,SubItemLedgerEntry,1);

      // Check consumption entries for component item.
      CompItemLedgerEntry.SETRANGE("Entry Type",CompItemLedgerEntry."Entry Type"::Consumption);
      CompItemLedgerEntry.FINDSET;
      REPEAT
        VerifySingleItemTracingLine(ItemTracing,CompItemLedgerEntry,CompItemLedgerEntry.COUNT);
      UNTIL CompItemLedgerEntry.NEXT = 0;

      // Check purchase entries for component item - should only be traced once per serial/lot/item.
      CompItemLedgerEntry.SETRANGE("Entry Type",CompItemLedgerEntry."Entry Type"::Purchase);
      CompItemLedgerEntry.SETRANGE("Remaining Quantity",0);
      CompItemLedgerEntry.FINDSET;
      REPEAT
        VerifySingleItemTracingLine(ItemTracing,CompItemLedgerEntry,1);
      UNTIL CompItemLedgerEntry.NEXT = 0;

      ItemTracing.CLOSE;
      OpenItemTracingPage(ItemTracing,TopItemLedgerEntry."Item No.",'','',TraceMethod);
      VerifyAlreadyTraced(ItemTracing);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE SNLOTLongProdChainUsageOrigin@82();
    VAR
      TraceMethod@1000 : 'Origin -> Usage,Usage -> Origin';
    BEGIN
      SNLOTForLongProdChain(TraceMethod::"Usage -> Origin");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE SlNoPstdPurchDocumentWithOriginUsage@44();
    VAR
      ItemLedgerEntry@1007 : Record 32;
      PurchRcptHeader@1006 : Record 120;
      ItemTracing@1003 : TestPage 6520;
      TraceMethod@1009 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1000 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo';
    BEGIN
      // Verify Item Tracing Line using Trace Method Forward (Origin -> Usage) with Item Tracking for Posted Purchase Document.

      // Setup.
      Initialize;
      SetupTrackingEntryForSalesAndPurchase(ItemLedgerEntry,TrackingOption::AssignSerialLot,TRUE,FALSE);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'',ItemLedgerEntry."Serial No.",'',TraceMethod::"Origin -> Usage");

      // Verify: Verify Item Tracing Page for Posted Document.
      VerifyItemTracingLine(
        ItemTracing,PurchRcptHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        ItemLedgerEntry."Location Code",ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE SlNoPstdPurchDocumentWithUsageOrigin@43();
    VAR
      ItemLedgerEntry@1007 : Record 32;
      PurchRcptHeader@1006 : Record 120;
      ItemTracing@1003 : TestPage 6520;
      TraceMethod@1009 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1000 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo';
    BEGIN
      // Verify Item Tracing Line using Trace Method Backward (Usage -> Origin) with Item Tracking for Posted Purchase Document.

      // Setup.
      Initialize;
      SetupTrackingEntryForSalesAndPurchase(ItemLedgerEntry,TrackingOption::AssignSerialLot,TRUE,FALSE);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'',ItemLedgerEntry."Serial No.",'',TraceMethod::"Usage -> Origin");

      // Verify: Verify Item Tracing Page for Posted Document.
      VerifyNextItemTracingLine(
        ItemTracing,PurchRcptHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        ItemLedgerEntry."Location Code",ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE SlNoPstdSalesDocumentWithUsageOrigin@42();
    VAR
      ItemLedgerEntry@1007 : Record 32;
      SalesShipmentHeader@1008 : Record 110;
      ItemTracing@1003 : TestPage 6520;
      TraceMethod@1004 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1000 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo';
    BEGIN
      // Verify Item Tracing Line using Trace Method Forward (Origin -> Usage) with Item Tracking for Posted Sales Document.

      // Setup.
      Initialize;
      SetupTrackingEntryForSalesAndPurchase(ItemLedgerEntry,TrackingOption::AssignSerialLot,TRUE,FALSE);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'',ItemLedgerEntry."Serial No.",'',TraceMethod::"Usage -> Origin");

      // Verify: Verify Item Tracing Page for Posted Document.
      VerifyItemTracingLine(
        ItemTracing,SalesShipmentHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",
        ItemLedgerEntry."Item No.",ItemLedgerEntry."Location Code",-ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE SlNoPstdSalesDocumentWithOriginUsage@41();
    VAR
      ItemLedgerEntry@1007 : Record 32;
      SalesShipmentHeader@1008 : Record 110;
      ItemTracing@1003 : TestPage 6520;
      TraceMethod@1004 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1000 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo';
    BEGIN
      // Verify Item Tracing Line using Trace Method Forward (Origin -> Usage) with Item Tracking for Long Chain Posted Documents (Purchase Order,Transfer Order,Sales Order).

      // Setup.
      Initialize;
      SetupTrackingEntryForSalesAndPurchase(ItemLedgerEntry,TrackingOption::AssignSerialLot,TRUE,FALSE);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'',ItemLedgerEntry."Serial No.",'',TraceMethod::"Origin -> Usage");

      // Verify: Verify Item Tracing Page for Posted Document.
      VerifyNextItemTracingLine(
        ItemTracing,SalesShipmentHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",
        ItemLedgerEntry."Item No.",ItemLedgerEntry."Location Code",-ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE SlNoForLongChainPstdDocumentWithOriginUsage@39();
    VAR
      ItemLedgerEntry@1007 : Record 32;
      PurchRcptHeader@1006 : Record 120;
      SalesShipmentHeader@1008 : Record 110;
      TransferLine@1011 : Record 5741;
      TransferReceiptHeader@1015 : Record 5746;
      TransferShipmentHeader@1014 : Record 5744;
      ItemTracing@1000 : TestPage 6520;
      TraceMethod@1009 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1001 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo';
    BEGIN
      // Verify Item Tracing Line using Trace Method Forward (Usage -> Origin) with Item Tracking for Long Chain Posted Documents (Purchase Order,Transfer Order,Sales Order).
      SetupLOTNoForLongChainPstdDocument(ItemLedgerEntry,TransferLine,TrackingOption::AssignSerialLot,TRUE,FALSE);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'',ItemLedgerEntry."Serial No.",'',TraceMethod::"Origin -> Usage");

      // Verify: Verify Item Tracing Page for different Posted Documents.
      VerifyItemTracingLine(
        ItemTracing,PurchRcptHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        TransferLine."Transfer-from Code",ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,TransferShipmentHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",
        ItemLedgerEntry."Item No.",TransferLine."Transfer-from Code",-ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,TransferShipmentHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",
        ItemLedgerEntry."Item No.",TransferLine."In-Transit Code",ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,TransferReceiptHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",
        ItemLedgerEntry."Item No.",TransferLine."In-Transit Code",-ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,TransferReceiptHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",
        ItemLedgerEntry."Item No.",TransferLine."Transfer-to Code",ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,SalesShipmentHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",
        ItemLedgerEntry."Item No.",TransferLine."Transfer-to Code",-ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE SlNoForLongChainPstdDocumentWithUsageOrigin@37();
    VAR
      ItemLedgerEntry@1007 : Record 32;
      PurchRcptHeader@1006 : Record 120;
      SalesShipmentHeader@1005 : Record 110;
      TransferLine@1004 : Record 5741;
      TransferReceiptHeader@1003 : Record 5746;
      TransferShipmentHeader@1002 : Record 5744;
      ItemTracing@1001 : TestPage 6520;
      TraceMethod@1000 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1008 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo';
    BEGIN
      // Verify Item Tracing Opposite from Line using Trace Method with Item Tracking for Posted Purchase Document.
      SetupLOTNoForLongChainPstdDocument(ItemLedgerEntry,TransferLine,TrackingOption::AssignSerialLot,TRUE,FALSE);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'',ItemLedgerEntry."Serial No.",'',TraceMethod::"Usage -> Origin");

      // Verify: Verify Item Tracing Page for different Posted Documents.
      VerifyItemTracingLine(
        ItemTracing,SalesShipmentHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",
        ItemLedgerEntry."Item No.",TransferLine."Transfer-to Code",-ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,TransferReceiptHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",
        ItemLedgerEntry."Item No.",TransferLine."Transfer-to Code",ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,TransferReceiptHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",
        ItemLedgerEntry."Item No.",TransferLine."In-Transit Code",-ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,TransferShipmentHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",
        ItemLedgerEntry."Item No.",TransferLine."In-Transit Code",ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,TransferShipmentHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",
        ItemLedgerEntry."Item No.",TransferLine."Transfer-from Code",-ItemLedgerEntry.Quantity);
      VerifyNextItemTracingLine(
        ItemTracing,PurchRcptHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        TransferLine."Transfer-from Code",ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE TraceOppositeFromLineForPstdPurchDocumentSlNo@36();
    VAR
      ItemLedgerEntry@1007 : Record 32;
      PurchRcptHeader@1006 : Record 120;
      ItemTracing@1003 : TestPage 6520;
      TraceMethod@1009 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1000 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo';
    BEGIN
      // Verify Item Tracing Opposite from Line using Trace Method with Item Tracking for Posted Purchase Document.

      // Setup.
      Initialize;
      SetupTrackingEntryForSalesAndPurchase(ItemLedgerEntry,TrackingOption::AssignSerialLot,TRUE,FALSE);
      OpenItemTracingPage(ItemTracing,'',ItemLedgerEntry."Serial No.",'',TraceMethod::"Origin -> Usage");

      // Exercise.
      ItemTracing.TraceOppositeFromLine.INVOKE;

      // Verify: Verify Item Tracing Page with Trace Opposite From Line Option.
      VerifyItemTracingLine(
        ItemTracing,PurchRcptHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",ItemLedgerEntry."Item No.",
        ItemLedgerEntry."Location Code",ItemLedgerEntry.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE SlNoForRlsdProdOrder@35();
    VAR
      Item@1000 : Record 27;
      ItemLedgerEntry@1005 : Record 32;
      ProductionOrder@1001 : Record 5405;
      ItemTracing@1008 : TestPage 6520;
      TraceMethod@1002 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1003 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo';
    BEGIN
      // Verify Item Tracing Line using Trace Method Forward with Item Tracking for Released Production Order.

      // Setup.
      Initialize;
      Item.GET(
        CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(TRUE,FALSE)));
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.MODIFY(TRUE);

      // Create Released Production Order and Post Output.
      CreateAndRefreshProductionOrderWithIT(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",LibraryRandom.RandInt(10),TrackingOption::AssignSerialLot);
      CreateAndPostOutputJournal(ProductionOrder."No.");
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.");

      // Exercise.
      OpenItemTracingPage(ItemTracing,'',ItemLedgerEntry."Serial No.",'',TraceMethod::"Usage -> Origin");

      // Verify: Verify Item Tracing Page for Posted Document.
      VerifyItemTracingLine(
        ItemTracing,ReleasedProductionOrderOutput,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",Item."No.",
        ProductionOrder."Location Code",ProductionOrder.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE SlNoForReclassJouranl@33();
    VAR
      Item@1001 : Record 27;
      ItemJournalBatch@1005 : Record 233;
      ItemJournalLine@1004 : Record 83;
      ItemLedgerEntry@1009 : Record 32;
      Location@1000 : Record 14;
      NewLocation@1003 : Record 14;
      PurchaseLine@1002 : Record 39;
      PurchRcptHeader@1008 : Record 120;
      SalesLine@1007 : Record 37;
      SalesShipmentHeader@1013 : Record 110;
      ItemTracing@1010 : TestPage 6520;
      TraceMethod@1011 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1006 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo';
    BEGIN
      // Verify Item Tracing Line using Trace Method with Item Tracking for Reclass Journal.

      // Setup.
      Initialize;
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(NewLocation);

      Item.GET(
        CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(TRUE,FALSE)));
      CreateAndPostPurchaseOrderWithIT(PurchaseLine,Item."No.",Location.Code,TrackingOption::AssignSerialLot);
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.");

      // Create Reclass Journal and Using Post Transfer Inventory From One Location to Another Location.
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue value for ItemTrackingLinesPageHandler.
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Transfer);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Transfer,
        Item."No.",PurchaseLine.Quantity);
      ItemJournalLine.VALIDATE("Location Code",Location.Code);
      ItemJournalLine.VALIDATE("New Location Code",NewLocation.Code);
      ItemJournalLine.MODIFY(TRUE);
      ItemJournalLine.OpenItemTrackingLines(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
      CreateAndPostSalesOrderWithIT(SalesLine,Item."No.",NewLocation.Code,PurchaseLine.Quantity,FALSE);

      // Exercise.
      OpenItemTracingPage(ItemTracing,'',ItemLedgerEntry."Serial No.",'',TraceMethod::"Usage -> Origin");

      // Verify: Verify Item Tracing Page for different Posted Documents.
      VerifyItemTracingLine(
        ItemTracing,SalesShipmentHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",Item."No.",
        NewLocation.Code,-1);
      VerifyNextItemTracingLine(
        ItemTracing,ItemLedgerEntry.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",Item."No.",NewLocation.Code,1);
      VerifyNextItemTracingLine(
        ItemTracing,ItemLedgerEntry.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",Item."No.",Location.Code,-1);
      VerifyNextItemTracingLine(
        ItemTracing,PurchRcptHeader.TABLECAPTION,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.",Item."No.",Location.Code,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE SlNoForPositiveAdjmtJouranlWithUsageOrigin@31();
    VAR
      ItemLedgerEntry@1000 : Record 32;
      SalesShipmentHeader@1013 : Record 110;
      Quantity@1012 : Decimal;
      TraceMethod@1011 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1001 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo,SetQuantity';
    BEGIN
      // Verify Item Tracing Line using Trace Method Backward with Item Tracking for Positive Adjustment from Item Journal.
      Quantity := LibraryRandom.RandInt(10);
      SlAndLOTNoForPositiveAdjmt(
        TraceMethod::"Usage -> Origin",SalesShipmentHeader.TABLECAPTION,ItemLedgerEntry.TABLECAPTION,Quantity,-Quantity,Quantity,
        TRUE,FALSE,TrackingOption::AssignSerialLot);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE SlNoForPositiveAdjmtJouranlWithOriginUsage@30();
    VAR
      ItemLedgerEntry@1003 : Record 32;
      SalesShipmentHeader@1002 : Record 110;
      Quantity@1001 : Decimal;
      TraceMethod@1000 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1004 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo,SetQuantity';
    BEGIN
      // Verify Item Tracing Line using Trace Method Forward with Item Tracking for Positive Adjustment from Item Journal.
      Quantity := LibraryRandom.RandInt(10);
      SlAndLOTNoForPositiveAdjmt(
        TraceMethod::"Origin -> Usage",ItemLedgerEntry.TABLECAPTION,SalesShipmentHeader.TABLECAPTION,Quantity,Quantity,-Quantity,
        TRUE,FALSE,TrackingOption::AssignSerialLot);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE SlNoForNegativeAdjmtJouranlWithUsageOrigin@23();
    VAR
      Quantity@1014 : Decimal;
      Quantity2@1012 : Decimal;
      TraceMethod@1011 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1000 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo,SetQuantity';
    BEGIN
      // Verify Item Tracing Line using Trace Method Backward with Item Tracking for Negative Adjustment from Item Journal.
      Quantity := 5 + LibraryRandom.RandInt(10);
      Quantity2 := LibraryRandom.RandInt(5);
      SlAndLOTNoForNegativeAdjmt(TraceMethod::"Usage -> Origin",Quantity,Quantity2,-1,1,TRUE,FALSE,TrackingOption::AssignSerialLot);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE SlNoForNegativeAdjmtJouranlWithOriginUsage@22();
    VAR
      Quantity@1014 : Integer;
      Quantity2@1012 : Integer;
      TraceMethod@1011 : 'Origin -> Usage,Usage -> Origin';
      TrackingOption@1000 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo,SetQuantity';
    BEGIN
      // Verify Item Tracing Line using Trace Method Forward with Item Tracking for Negative Adjustment from Item Journal.
      Quantity := 5 + LibraryRandom.RandInt(10);
      Quantity2 := LibraryRandom.RandInt(5);
      SlAndLOTNoForNegativeAdjmt(TraceMethod::"Origin -> Usage",Quantity,Quantity2,1,-1,TRUE,FALSE,TrackingOption::AssignSerialLot);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,PostedSalesDocumentLinesPageHandler)]
    PROCEDURE SalesReturnOrderWithLessQtyError@20();
    VAR
      ItemJournalLine@1001 : Record 83;
      SalesLine@1003 : Record 37;
      SalesHeader@1004 : Record 36;
      DocumentNo@1000 : Code[20];
    BEGIN
      // Verify error while posting Sales Return Order with less Quantity as compared to quantity for same Lot No. using Get Posted Document Line to Reverse.

      // Setup: Create and post Item Journal Line, create and post Sales Order, create Sales Return Order using Get Posted Document Lines To Reverse.
      Initialize;
      CreateAndPostItemJournalLine(ItemJournalLine);
      DocumentNo := CreateAndPostSalesOrderWithIT(SalesLine,ItemJournalLine."Item No.",'',ItemJournalLine.Quantity / 2,TRUE);  // Take partial Quantity.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",SalesLine."Sell-to Customer No.");
      LibraryVariableStorage.Enqueue(DocumentNo);  // Enqueue value for PostedSalesDocumentLinesPageHandler.
      GetPostedDocToReverseOnSalesReturnOrder(SalesHeader."No.");

      // Exercise: Update Quantity on Sales Line.
      ASSERTERROR FindAndUpdateSalesLine(SalesHeader."No.",SalesHeader."Document Type");

      // Verify: Verify error while posting Sales Return Order with less quantity.
      Assert.ExpectedError(STRSUBSTNO(ItemTrackingQuantityError,SalesLine."No.",SalesLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,PostedSalesDocumentLinesPageHandler)]
    PROCEDURE SalesCreditMemoWithLessQtyQtyError@54();
    VAR
      ItemJournalLine@1000 : Record 83;
      SalesLine@1003 : Record 37;
      SalesHeader@1004 : Record 36;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Verify error while posting Sales Credit Memo with less Quantity as compared to quantity for same Lot No. using Get Posted Document Line to Reverse.

      // Setup: Create and post Item Journal Line, create and post Sales Order, create Sales Credit Memo using Get Posted Document Lines To Reverse.
      Initialize;
      CreateAndPostItemJournalLine(ItemJournalLine);
      DocumentNo := CreateAndPostSalesOrderWithIT(SalesLine,ItemJournalLine."Item No.",'',ItemJournalLine.Quantity / 2,TRUE);  // Take partial Quantity.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",SalesLine."Sell-to Customer No.");
      LibraryVariableStorage.Enqueue(DocumentNo);  // Enqueue value for PostedSalesDocumentLinesPageHandler.
      GetPostedDocToReverseOnSalesCreditMemo(SalesHeader."No.");

      // Exercise: Update Quantity on Sales Line.
      ASSERTERROR FindAndUpdateSalesLine(SalesHeader."No.",SalesHeader."Document Type");

      // Verify: Verify error while posting Sales Credit Memo with less quantity.
      Assert.ExpectedError(STRSUBSTNO(ItemTrackingQuantityError,SalesLine."No.",SalesLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE PurchReturnOrderWithLessQtyQtyError@51();
    VAR
      PurchaseLine@1003 : Record 39;
      PurchaseHeader@1004 : Record 38;
      TrackingOption@1002 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
      DocumentNo@1000 : Code[20];
    BEGIN
      // Verify error while posting Purchase Return Order with less Quantity as compared to quantity for same Lot No. using Get Posted Document Line to Reverse.

      // Setup: Create Item, create and post Purchase Order, create Purchase Return Order using Get Posted Document Lines To Reverse.
      Initialize;
      DocumentNo :=
        CreateAndPostPurchaseOrderWithIT(
          PurchaseLine,CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode(FALSE,TRUE)),'',
          TrackingOption::AssignLotNo);
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",PurchaseLine."Buy-from Vendor No.");
      LibraryVariableStorage.Enqueue(DocumentNo);  // Enqueue value for PostedPurchaseDocumentLinesPageHandler.
      GetPostedDocToReverseOnPurchReturnOrder(PurchaseHeader."No.");

      // Exercise: Update Quantity on Sales Line.
      ASSERTERROR FindAndUpdatePurchaseLine(PurchaseHeader."No.",PurchaseHeader."Document Type");

      // Verify: Verify error while posting Purchase Return Order with less quantity.
      Assert.ExpectedError(STRSUBSTNO(ItemTrackingQuantityError,PurchaseLine."No.",PurchaseLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE PurchCreditMemoWithLessQtyQtyError@57();
    VAR
      PurchaseLine@1003 : Record 39;
      PurchaseHeader@1004 : Record 38;
      TrackingOption@1002 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
      DocumentNo@1000 : Code[20];
    BEGIN
      // Verify error while posting Purchase Credit Memo with less Quantity as compared to quantity for same Lot No. using Get Posted Document Line to Reverse.

      // Setup: Create Item, create and post Purchase Order, create Purchase Return Order using Get Posted Document Lines To Reverse.
      Initialize;
      DocumentNo :=
        CreateAndPostPurchaseOrderWithIT(
          PurchaseLine,CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode(FALSE,TRUE)),'',
          TrackingOption::AssignLotNo);
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",PurchaseLine."Buy-from Vendor No.");
      LibraryVariableStorage.Enqueue(DocumentNo);  // Enqueue value for PostedPurchaseDocumentLinesPageHandler.
      GetPostedDocToReverseOnPurchCreditMemo(PurchaseHeader."No.");

      // Exercise: Update Quantity on Sales Line.
      ASSERTERROR FindAndUpdatePurchaseLine(PurchaseHeader."No.",PurchaseHeader."Document Type");

      // Verify: Verify error while posting Purchase Credit Memo with less quantity.
      Assert.ExpectedError(STRSUBSTNO(ItemTrackingQuantityError,PurchaseLine."No.",PurchaseLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnItemJournalTC1@131();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: Existing Error
      ChangeBinWithLotITOnItemJournalS1(TRUE,1,ItemJournalLine."Entry Type"::"Negative Adjmt.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnItemJournalTC2@115();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnItemJournalS1(FALSE,1,ItemJournalLine."Entry Type"::"Negative Adjmt.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnItemJournalTC3@117();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnItemJournalS1(TRUE,-1,ItemJournalLine."Entry Type"::Sale);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnItemJournalTC4@90();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnItemJournalS2(TRUE,1,ItemJournalLine."Entry Type"::Sale);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnItemJournalTC5@97();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnItemJournalS2(FALSE,1,ItemJournalLine."Entry Type"::"Negative Adjmt.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnItemJournalTC6@93();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnItemJournalS2(TRUE,-1,ItemJournalLine."Entry Type"::Sale);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandlerTrue)]
    PROCEDURE ChangeBinWithLotITOnItemJournalTC7@106();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: Existing Error
      ChangeBinWithLotITOnItemJournalS3(TRUE,1,ItemJournalLine."Entry Type"::Sale);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandlerTrue)]
    PROCEDURE ChangeBinWithLotITOnItemJournalTC8@105();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnItemJournalS3(FALSE,1,ItemJournalLine."Entry Type"::"Negative Adjmt.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnItemJournalTC9@102();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnItemJournalS3(TRUE,-1,ItemJournalLine."Entry Type"::"Negative Adjmt.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnItemJournalTC10@99();
    VAR
      ItemJournalLine@1000 : Record 83;
      SetNoOption@1003 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      Initialize;
      SetupLotTrackingItemJournalLineForChangeBin(
        ItemJournalLine,1,TRUE,ItemJournalLine."Entry Type"::"Negative Adjmt.",SetNoOption::QtyNotEnoughNo);

      // Exercise: Change Bin, Bin code is blank
      // Verify: No Error
      ItemJournalLine.VALIDATE("Bin Code",'');
    END;

    LOCAL PROCEDURE ChangeBinWithLotITOnItemJournalS1@24(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer;EntryType@1006 : Option);
    VAR
      ItemJournalLine@1008 : Record 83;
      BinCode@1000 : Code[20];
      SetNoOption@1003 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking, create an item journal line with Bin code and
      // do item tracking with setting a Lot No. that the other Bin has no enough quantity
      Initialize;
      BinCode := SetupLotTrackingItemJournalLineForChangeBin(
          ItemJournalLine,SignFactor,WhseTracking,EntryType,SetNoOption::QtyNotEnoughNo);

      // Excercise and Verify
      ChangeBinAndVerifyOnItemJournalLine(ItemJournalLine,BinCode,WhseTracking,SignFactor);
    END;

    LOCAL PROCEDURE ChangeBinWithLotITOnItemJournalS2@128(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer;EntryType@1006 : Option);
    VAR
      ItemJournalLine@1008 : Record 83;
      BinCode@1000 : Code[20];
      SetNoOption@1003 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking, create an item journal line with Bin code and
      // do item tracking with setting a Lot No. that the other Bin has enough quantity
      Initialize;
      BinCode := SetupLotTrackingItemJournalLineForChangeBin(
          ItemJournalLine,SignFactor,WhseTracking,EntryType,SetNoOption::QtyEnoughNo);

      // Excercise and Verify: No error is expected here when changing the bin code
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE ChangeBinWithLotITOnItemJournalS3@76(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer;EntryType@1006 : Option);
    VAR
      ItemJournalLine@1008 : Record 83;
      BinCode@1000 : Code[20];
      SetNoOption@1003 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking, create an item journal line with Bin code and
      // do item tracking with setting a Lot No. that can cause unavailablity warning
      Initialize;
      BinCode := SetupLotTrackingItemJournalLineForChangeBin(
          ItemJournalLine,SignFactor,WhseTracking,EntryType,SetNoOption::UnavailableNo);

      // Excercise and Verify
      ChangeBinAndVerifyOnItemJournalLine(ItemJournalLine,BinCode,WhseTracking,SignFactor);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnItemJournalTC1@109();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: Existing Error
      ChangeBinWithSerialITOnItemJournalS1(TRUE,1,ItemJournalLine."Entry Type"::"Negative Adjmt.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnItemJournalTC2@119();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnItemJournalS1(FALSE,1,ItemJournalLine."Entry Type"::"Negative Adjmt.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnItemJournalTC3@121();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnItemJournalS1(TRUE,-1,ItemJournalLine."Entry Type"::Sale);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnItemJournalTC4@89();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnItemJournalS2(TRUE,1,ItemJournalLine."Entry Type"::Sale);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnItemJournalTC5@88();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnItemJournalS2(FALSE,1,ItemJournalLine."Entry Type"::"Negative Adjmt.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnItemJournalTC6@70();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnItemJournalS2(TRUE,-1,ItemJournalLine."Entry Type"::Sale);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandlerTrue,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnItemJournalTC7@112();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: Existing Error
      ChangeBinWithSerialITOnItemJournalS3(TRUE,1,ItemJournalLine."Entry Type"::Sale);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandlerTrue,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnItemJournalTC8@110();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnItemJournalS3(FALSE,1,ItemJournalLine."Entry Type"::Sale);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnItemJournalTC9@104();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnItemJournalS3(TRUE,-1,ItemJournalLine."Entry Type"::"Negative Adjmt.");
    END;

    LOCAL PROCEDURE ChangeBinWithSerialITOnItemJournalS1@122(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer;EntryType@1006 : Option);
    VAR
      ItemJournalLine@1008 : Record 83;
      BinCode@1000 : Code[20];
      SetNoOption@1009 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking, create an item journal line with Bin code and
      // do item tracking with setting a Lot No. that the other Bin has no enough quantity
      Initialize;
      BinCode := SetupSerialTrackingItemJournalLineForChangeBin(
          ItemJournalLine,SignFactor,WhseTracking,EntryType,SetNoOption::QtyNotEnoughNo);

      // Excercise and Verify
      ChangeBinAndVerifyOnItemJournalLine(ItemJournalLine,BinCode,WhseTracking,SignFactor);
    END;

    LOCAL PROCEDURE ChangeBinWithSerialITOnItemJournalS2@85(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer;EntryType@1006 : Option);
    VAR
      ItemJournalLine@1008 : Record 83;
      BinCode@1000 : Code[20];
      SetNoOption@1009 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking, create an item journal line with Bin code and
      // do item tracking with setting a Lot No. that the other Bin has enough quantity
      Initialize;
      BinCode := SetupSerialTrackingItemJournalLineForChangeBin(
          ItemJournalLine,SignFactor,WhseTracking,EntryType,SetNoOption::QtyEnoughNo);

      // Excercise and Verify: No error is expected here when changing the bin code
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE ChangeBinWithSerialITOnItemJournalS3@94(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer;EntryType@1006 : Option);
    VAR
      ItemJournalLine@1008 : Record 83;
      BinCode@1000 : Code[20];
      SetNoOption@1009 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking, create an item journal line with Bin code and
      // do item tracking with setting a Lot No. that can cause unavailablity warning
      Initialize;
      BinCode := SetupSerialTrackingItemJournalLineForChangeBin(
          ItemJournalLine,SignFactor,WhseTracking,EntryType,SetNoOption::UnavailableNo);

      // Excercise and Verify
      ChangeBinAndVerifyOnItemJournalLine(ItemJournalLine,BinCode,WhseTracking,SignFactor);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,JobJournalTemplateListHandler)]
    PROCEDURE ChangeBinWithLotITOnJobJournalTC1@134();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: Existing Error
      ChangeBinWithLotITOnJobJournalS1(TRUE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,JobJournalTemplateListHandler)]
    PROCEDURE ChangeBinWithLotITOnJobJournalTC2@137();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnJobJournalS1(FALSE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,JobJournalTemplateListHandler)]
    PROCEDURE ChangeBinWithLotITOnJobJournalTC3@138();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnJobJournalS1(TRUE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,JobJournalTemplateListHandler)]
    PROCEDURE ChangeBinWithLotITOnJobJournalTC4@139();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnJobJournalS2(TRUE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,JobJournalTemplateListHandler)]
    PROCEDURE ChangeBinWithLotITOnJobJournalTC5@135();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnJobJournalS2(FALSE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,JobJournalTemplateListHandler)]
    PROCEDURE ChangeBinWithLotITOnJobJournalTC6@130();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnJobJournalS2(TRUE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,JobJournalTemplateListHandler,ConfirmHandlerTrue)]
    PROCEDURE ChangeBinWithLotITOnJobJournalTC7@145();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: Existing Error
      ChangeBinWithLotITOnJobJournalS3(TRUE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,JobJournalTemplateListHandler,ConfirmHandlerTrue)]
    PROCEDURE ChangeBinWithLotITOnJobJournalTC8@143();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnJobJournalS3(FALSE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,JobJournalTemplateListHandler)]
    PROCEDURE ChangeBinWithLotITOnJobJournalTC9@142();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnJobJournalS3(TRUE,-1);
    END;

    LOCAL PROCEDURE ChangeBinWithLotITOnJobJournalS1@125(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      JobJournalLine@1008 : Record 210;
      BinCode@1000 : Code[20];
      SetNoOption@1003 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create job journal line
      Initialize;
      BinCode := SetupLotTrackingJobJournalLineForChangeBin(
          JobJournalLine,SignFactor,WhseTracking,SetNoOption::QtyNotEnoughNo);

      // Excercise and Verify
      ChangeBinAndVerifyOnJobJournal(JobJournalLine,BinCode,WhseTracking,SignFactor);
    END;

    LOCAL PROCEDURE ChangeBinWithLotITOnJobJournalS2@92(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      JobJournalLine@1008 : Record 210;
      JobJournal@1003 : TestPage 201;
      BinCode@1000 : Code[20];
      SetNoOption@1007 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create job journal line
      Initialize;
      BinCode := SetupLotTrackingJobJournalLineForChangeBin(
          JobJournalLine,SignFactor,WhseTracking,SetNoOption::QtyEnoughNo);

      // Exercise
      ChangeBinOnJobJournal(JobJournal,JobJournalLine,BinCode);

      // Verify
      Assert.AreEqual('',JobJournal.GETVALIDATIONERROR,'Validation Error should not exist');
    END;

    LOCAL PROCEDURE ChangeBinWithLotITOnJobJournalS3@191(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      JobJournalLine@1008 : Record 210;
      BinCode@1000 : Code[20];
      SetNoOption@1003 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create job journal line
      Initialize;
      BinCode := SetupLotTrackingJobJournalLineForChangeBin(
          JobJournalLine,SignFactor,WhseTracking,SetNoOption::UnavailableNo);

      // Excercise and Verify
      ChangeBinAndVerifyOnJobJournal(JobJournalLine,BinCode,WhseTracking,SignFactor);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse,JobJournalTemplateListHandler)]
    PROCEDURE ChangeBinWithSerialITOnJobJournalTC1@172();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: Existing Error
      ChangeBinWithSerialITOnJobJournalS1(TRUE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse,JobJournalTemplateListHandler)]
    PROCEDURE ChangeBinWithSerialITOnJobJournalTC2@171();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnJobJournalS1(FALSE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse,JobJournalTemplateListHandler)]
    PROCEDURE ChangeBinWithSerialITOnJobJournalTC3@170();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnJobJournalS1(TRUE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse,JobJournalTemplateListHandler)]
    PROCEDURE ChangeBinWithSerialITOnJobJournalTC4@180();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnJobJournalS2(TRUE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse,JobJournalTemplateListHandler)]
    PROCEDURE ChangeBinWithSerialITOnJobJournalTC5@179();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnJobJournalS2(FALSE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse,JobJournalTemplateListHandler)]
    PROCEDURE ChangeBinWithSerialITOnJobJournalTC6@178();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnJobJournalS2(TRUE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse,JobJournalTemplateListHandler,ConfirmHandlerTrue)]
    PROCEDURE ChangeBinWithSerialITOnJobJournalTC7@184();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: Existing Error
      ChangeBinWithSerialITOnJobJournalS3(TRUE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse,JobJournalTemplateListHandler,ConfirmHandlerTrue)]
    PROCEDURE ChangeBinWithSerialITOnJobJournalTC8@183();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnJobJournalS3(FALSE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse,JobJournalTemplateListHandler)]
    PROCEDURE ChangeBinWithSerialITOnJobJournalTC9@181();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnJobJournalS3(TRUE,-1);
    END;

    LOCAL PROCEDURE ChangeBinWithSerialITOnJobJournalS1@185(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      JobJournalLine@1008 : Record 210;
      BinCode@1000 : Code[20];
      SetNoOption@1009 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create job journal line
      Initialize;
      BinCode := SetupSerialTrackingJobJournalLineForChangeBin(
          JobJournalLine,SignFactor,WhseTracking,SetNoOption::QtyNotEnoughNo);

      // Excercise and Verify
      ChangeBinAndVerifyOnJobJournal(JobJournalLine,BinCode,WhseTracking,SignFactor);
    END;

    LOCAL PROCEDURE ChangeBinWithSerialITOnJobJournalS2@175(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      JobJournalLine@1008 : Record 210;
      JobJournal@1006 : TestPage 201;
      BinCode@1000 : Code[20];
      SetNoOption@1009 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create job journal line
      Initialize;
      BinCode := SetupSerialTrackingJobJournalLineForChangeBin(
          JobJournalLine,SignFactor,WhseTracking,SetNoOption::QtyEnoughNo);

      // Exercise
      ChangeBinOnJobJournal(JobJournal,JobJournalLine,BinCode);

      // Verify
      Assert.AreEqual('',JobJournal.GETVALIDATIONERROR,'Validation Error should not exist');
    END;

    LOCAL PROCEDURE ChangeBinWithSerialITOnJobJournalS3@176(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      JobJournalLine@1008 : Record 210;
      BinCode@1000 : Code[20];
      SetNoOption@1006 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create job journal line
      Initialize;
      BinCode := SetupSerialTrackingJobJournalLineForChangeBin(
          JobJournalLine,SignFactor,WhseTracking,SetNoOption::UnavailableNo);

      // Excercise and Verify
      ChangeBinAndVerifyOnJobJournal(JobJournalLine,BinCode,WhseTracking,SignFactor);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnPurchLineTC1@207();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: Existing Error
      ChangeBinWithLotITOnPurchLineS1(TRUE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnPurchLineTC2@209();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Negative
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnPurchLineS1(FALSE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnPurchLineTC3@210();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnPurchLineS1(TRUE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnPurchLineTC4@214();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnPurchLineS2(TRUE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnPurchLineTC5@213();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Negative
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnPurchLineS2(FALSE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnPurchLineTC6@212();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnPurchLineS2(TRUE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandlerTrue)]
    PROCEDURE ChangeBinWithLotITOnPurchLineTC7@217();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: Existing Error
      ChangeBinWithLotITOnPurchLineS3(TRUE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandlerTrue)]
    PROCEDURE ChangeBinWithLotITOnPurchLineTC8@216();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Negative
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnPurchLineS3(FALSE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnPurchLineTC9@215();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnPurchLineS3(TRUE,1);
    END;

    LOCAL PROCEDURE ChangeBinWithLotITOnPurchLineS1@199(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      PurchaseLine@1008 : Record 39;
      BinCode@1000 : Code[20];
      SetNoOption@1003 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create Purchase Line
      Initialize;
      BinCode := SetupLotTrackingPurchaseLineForChangeBin(PurchaseLine,SignFactor,WhseTracking,SetNoOption::QtyNotEnoughNo);

      // Excercise and Verify
      ChangeBinAndVerifyOnPurchaseLine(PurchaseLine."Document No.",BinCode,WhseTracking,SignFactor);
    END;

    LOCAL PROCEDURE ChangeBinWithLotITOnPurchLineS2@203(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      PurchaseLine@1008 : Record 39;
      PurchaseOrder@1003 : TestPage 50;
      BinCode@1000 : Code[20];
      SetNoOption@1007 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create Purchase Line
      Initialize;
      BinCode := SetupLotTrackingPurchaseLineForChangeBin(PurchaseLine,SignFactor,WhseTracking,SetNoOption::QtyEnoughNo);

      // Exercise
      ChangeBinOnPurchaseLine(PurchaseOrder,PurchaseLine."Document No.",BinCode);

      // Verify
      Assert.AreEqual('',PurchaseOrder.GETVALIDATIONERROR,'Validation Error should not exist');
    END;

    LOCAL PROCEDURE ChangeBinWithLotITOnPurchLineS3@204(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      PurchaseLine@1008 : Record 39;
      BinCode@1000 : Code[20];
      SetNoOption@1003 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create Purchase Line
      Initialize;
      BinCode := SetupLotTrackingPurchaseLineForChangeBin(PurchaseLine,SignFactor,WhseTracking,SetNoOption::UnavailableNo);

      // Excercise and Verify
      ChangeBinAndVerifyOnPurchaseLine(PurchaseLine."Document No.",BinCode,WhseTracking,SignFactor);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnPurchLineTC1@165();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: Existing Error
      ChangeBinWithSerialITOnPurchLineS1(TRUE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnPurchLineTC2@173();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Negative
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnPurchLineS1(FALSE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnPurchLineTC3@174();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnPurchLineS1(TRUE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnPurchLineTC4@196();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnPurchLineS2(TRUE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnPurchLineTC5@195();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Negative
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnPurchLineS2(FALSE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnPurchLineTC6@194();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnPurchLineS2(TRUE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse,ConfirmHandlerTrue)]
    PROCEDURE ChangeBinWithSerialITOnPurchLineTC7@201();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: Existing Error
      ChangeBinWithSerialITOnPurchLineS3(TRUE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse,ConfirmHandlerTrue)]
    PROCEDURE ChangeBinWithSerialITOnPurchLineTC8@198();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Negative
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnPurchLineS3(FALSE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnPurchLineTC9@197();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnPurchLineS3(TRUE,1);
    END;

    LOCAL PROCEDURE ChangeBinWithSerialITOnPurchLineS1@157(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      PurchaseLine@1008 : Record 39;
      BinCode@1000 : Code[20];
      SetNoOption@1001 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create Purchase Line
      Initialize;
      BinCode := SetupSerialTrackingPurchaseLineForChangeBin(PurchaseLine,SignFactor,WhseTracking,SetNoOption::QtyNotEnoughNo);

      // Excercise and Verify
      ChangeBinAndVerifyOnPurchaseLine(PurchaseLine."Document No.",BinCode,WhseTracking,SignFactor);
    END;

    LOCAL PROCEDURE ChangeBinWithSerialITOnPurchLineS2@186(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      PurchaseLine@1008 : Record 39;
      PurchaseOrder@1006 : TestPage 50;
      BinCode@1000 : Code[20];
      SetNoOption@1001 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create Purchase Line
      Initialize;
      BinCode := SetupSerialTrackingPurchaseLineForChangeBin(PurchaseLine,SignFactor,WhseTracking,SetNoOption::QtyEnoughNo);

      // Exercise
      ChangeBinOnPurchaseLine(PurchaseOrder,PurchaseLine."Document No.",BinCode);

      // Verify
      Assert.AreEqual('',PurchaseOrder.GETVALIDATIONERROR,'Validation Error should not exist');
    END;

    LOCAL PROCEDURE ChangeBinWithSerialITOnPurchLineS3@189(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      PurchaseLine@1008 : Record 39;
      BinCode@1000 : Code[20];
      SetNoOption@1006 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create Purchase Line
      Initialize;
      BinCode := SetupSerialTrackingPurchaseLineForChangeBin(PurchaseLine,SignFactor,WhseTracking,SetNoOption::UnavailableNo);

      // Excercise and Verify
      ChangeBinAndVerifyOnPurchaseLine(PurchaseLine."Document No.",BinCode,WhseTracking,SignFactor);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnProdOrderCompTC1@168();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: Existing Error
      ChangeBinWithLotITOnProdOrderCompS1(TRUE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnProdOrderCompTC2@190();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnProdOrderCompS1(FALSE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnProdOrderCompTC3@202();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnProdOrderCompS1(TRUE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnProdOrderCompTC4@152();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnProdOrderCompS2(TRUE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnProdOrderCompTC5@150();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnProdOrderCompS2(FALSE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnProdOrderCompTC6@149();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnProdOrderCompS2(TRUE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandlerTrue)]
    PROCEDURE ChangeBinWithLotITOnProdOrderCompTC7@156();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: Existing Error
      ChangeBinWithLotITOnProdOrderCompS3(TRUE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ConfirmHandlerTrue)]
    PROCEDURE ChangeBinWithLotITOnProdOrderCompTC8@155();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnProdOrderCompS3(FALSE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE ChangeBinWithLotITOnProdOrderCompTC9@154();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: No Error
      ChangeBinWithLotITOnProdOrderCompS3(TRUE,-1);
    END;

    LOCAL PROCEDURE ChangeBinWithLotITOnProdOrderCompS1@158(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      ProdOrderComp@1008 : Record 5407;
      BinCode@1000 : Code[20];
      SetNoOption@1001 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create Prod. Order Components
      Initialize;
      BinCode := SetupLotTrackingProdCompForChangeBin(
          ProdOrderComp,SignFactor,WhseTracking,SetNoOption::QtyNotEnoughNo);

      // Excercise and Verify
      ChangeBinAndVerifyOnProdOrderComponents(ProdOrderComp."Item No.",BinCode,WhseTracking,SignFactor);
    END;

    LOCAL PROCEDURE ChangeBinWithLotITOnProdOrderCompS2@95(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      ProdOrderComp@1008 : Record 5407;
      ProdOrderComponents@1003 : TestPage 99000818;
      BinCode@1000 : Code[20];
      SetNoOption@1007 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create Prod. Order Components
      Initialize;
      BinCode := SetupLotTrackingProdCompForChangeBin(
          ProdOrderComp,SignFactor,WhseTracking,SetNoOption::QtyEnoughNo);

      // Exercise
      ChangeBinOnProdOrderComponents(ProdOrderComponents,ProdOrderComp."Item No.",BinCode);

      // Verify
      Assert.AreEqual('',ProdOrderComponents.GETVALIDATIONERROR,'Validation Error should not exist');
    END;

    LOCAL PROCEDURE ChangeBinWithLotITOnProdOrderCompS3@147(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      ProdOrderComp@1008 : Record 5407;
      BinCode@1000 : Code[20];
      SetNoOption@1001 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create Prod. Order Components
      Initialize;
      BinCode := SetupLotTrackingProdCompForChangeBin(
          ProdOrderComp,SignFactor,WhseTracking,SetNoOption::UnavailableNo);

      // Excercise and Verify
      ChangeBinAndVerifyOnProdOrderComponents(ProdOrderComp."Item No.",BinCode,WhseTracking,SignFactor);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnProdOrderCompTC1@211();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: Existing Error
      ChangeBinWithSerialITOnProdOrderCompS1(TRUE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnProdOrderCompTC2@221();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnProdOrderCompS1(FALSE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnProdOrderCompTC3@222();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has no enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnProdOrderCompS1(TRUE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnProdOrderCompTC4@227();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnProdOrderCompS2(TRUE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnProdOrderCompTC5@226();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnProdOrderCompS2(FALSE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnProdOrderCompTC6@224();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, the Bin has enough quantity for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnProdOrderCompS2(TRUE,-1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse,ConfirmHandlerTrue)]
    PROCEDURE ChangeBinWithSerialITOnProdOrderCompTC7@230();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Positive
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: Existing Error
      ChangeBinWithSerialITOnProdOrderCompS3(TRUE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse,ConfirmHandlerTrue)]
    PROCEDURE ChangeBinWithSerialITOnProdOrderCompTC8@229();
    BEGIN
      // Setup: Warehouse tracked = FALSE, Quantity is Positive
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnProdOrderCompS3(FALSE,1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE ChangeBinWithSerialITOnProdOrderCompTC9@228();
    BEGIN
      // Setup: Warehouse tracked = TRUE, Quantity is Negative
      // Exercise: Change Bin, causing Availability warning for the tracking No.
      // Verify: No Error
      ChangeBinWithSerialITOnProdOrderCompS3(TRUE,-1);
    END;

    LOCAL PROCEDURE ChangeBinWithSerialITOnProdOrderCompS1@177(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      ProdOrderComp@1008 : Record 5407;
      BinCode@1000 : Code[20];
      SetNoOption@1001 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create Prod. Order Components
      Initialize;
      BinCode := SetupSerialTrackingProdCompForChangeBin(ProdOrderComp,SignFactor,WhseTracking,SetNoOption::QtyNotEnoughNo);

      // Excercise and Verify
      ChangeBinAndVerifyOnProdOrderComponents(ProdOrderComp."Item No.",BinCode,WhseTracking,SignFactor);
    END;

    LOCAL PROCEDURE ChangeBinWithSerialITOnProdOrderCompS2@188(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      ProdOrderComp@1008 : Record 5407;
      ProdOrderComponents@1006 : TestPage 99000818;
      BinCode@1000 : Code[20];
      SetNoOption@1001 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create Prod. Order Components
      Initialize;
      BinCode := SetupSerialTrackingProdCompForChangeBin(ProdOrderComp,SignFactor,WhseTracking,SetNoOption::QtyEnoughNo);

      // Exercise
      ChangeBinOnProdOrderComponents(ProdOrderComponents,ProdOrderComp."Item No.",BinCode);

      // Verify
      Assert.AreEqual('',ProdOrderComponents.GETVALIDATIONERROR,'Validation Error should not exist');
    END;

    LOCAL PROCEDURE ChangeBinWithSerialITOnProdOrderCompS3@205(WhseTracking@1005 : Boolean;SignFactor@1004 : Integer);
    VAR
      ProdOrderComp@1008 : Record 5407;
      BinCode@1000 : Code[20];
      SetNoOption@1001 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      // Setup: Add Item in Bins with item tracking and create Prod. Order Components
      Initialize;
      BinCode := SetupSerialTrackingProdCompForChangeBin(ProdOrderComp,SignFactor,WhseTracking,SetNoOption::UnavailableNo);

      // Excercise and Verify
      ChangeBinAndVerifyOnProdOrderComponents(ProdOrderComp."Item No.",BinCode,WhseTracking,SignFactor);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,PostedSalesDocumentLinesPageHandler,ReservationHandler)]
    PROCEDURE PostSalesReturnOrderWithReserveFromPurchaseReturnOrder@84();
    VAR
      SalesLine@1003 : Record 37;
      SalesHeader@1004 : Record 36;
      PurchaseLine@1005 : Record 39;
      DocumentNo@1000 : Code[20];
      OldExactCostReversingMandatory@1002 : Boolean;
      TrackingOption@1001 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      // Setup: Create and post Purchase Order, create and post Sales Order, create Sales Return Order using Get Posted Document Lines To Reverse.
      Initialize;
      OldExactCostReversingMandatory := UpdateSalesReceivablesSetup(TRUE);
      CreateAndPostPurchaseOrderWithIT(
        PurchaseLine,CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode(FALSE,TRUE)),'',
        TrackingOption::AssignLotNo);

      DocumentNo := CreateAndPostSalesOrderWithIT(SalesLine,PurchaseLine."No.",'',PurchaseLine.Quantity,TRUE);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",SalesLine."Sell-to Customer No.");
      LibraryVariableStorage.Enqueue(DocumentNo); // Enqueue value for PostedSalesDocumentLinesPageHandler.
      GetPostedDocToReverseOnSalesReturnOrder(SalesHeader."No.");

      // Exercise: Create Purchase Return Order and Reserve from Sales Return Order.
      CreatePurchaseOrderWithReservation(
        PurchaseLine,PurchaseLine."Document Type"::"Return Order",CreateVendor,
        PurchaseLine."No.",'',PurchaseLine.Quantity,TRUE); // TRUE for Reserve.

      // Verify: Verify that Sales Return Order can be posted and verify the Posted Credit Memo.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      VerifyPostedSalesCreditMemo(PurchaseLine."No.",PurchaseLine.Quantity);

      // Tear Down.
      UpdateSalesReceivablesSetup(OldExactCostReversingMandatory);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,ItemTrackingSummaryPageHandler,PostedSalesDocumentLinesPageHandler)]
    PROCEDURE SalesCopyDocumentWithItemTracking@220();
    VAR
      SalesLine@1000 : Record 37;
      PurchaseLine@1001 : Record 39;
      DocumentNo@1002 : Code[20];
      SalesHeaderNo@1003 : Code[20];
      OldExactCostReversingMandatory@1004 : Boolean;
    BEGIN
      // Test that Sales Order can copy document from posted Credit Memo correctly when 'Exact Cost Reversing Mandatory' is enabled.

      // Setup: Create and post Purchase Order with item tracking, Sales Order and Sales Return Order by getting posted sales document.
      Initialize;
      OldExactCostReversingMandatory := UpdateSalesReceivablesSetup(TRUE); // Check the 'Exact Cost Reversing Mandatory' field.
      CreateAndPostPurchaseOrderWithIT(
        PurchaseLine,CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode(FALSE,TRUE)),'',
        TrackingOption::AssignLotNo);
      DocumentNo := CreateAndPostSalesOrderWithIT(SalesLine,PurchaseLine."No.",'',PurchaseLine.Quantity,TRUE);
      DocumentNo := CreateAndPostSaleReturnOrderByGetPostedDoc(SalesLine."Sell-to Customer No.",DocumentNo);

      // Exercise: Create Sales Order copy document from posted Sales Credit Memo.
      SalesHeaderNo := CreateAndCopyDocFromPostedSalesDoc(SalesLine."Sell-to Customer No.",DocumentNo);

      // Verify: Verify the quantity on Sales Line.
      VerifyQtyOnSalesLine(SalesHeaderNo,SalesLine."No.",PurchaseLine.Quantity);

      // Tear Down: Set default value of 'Exact Cost Reversing Mandatory' on Sales & Receivables Setup.
      UpdateSalesReceivablesSetup(OldExactCostReversingMandatory);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE PurchCopyDocumentWithItemTracking@223();
    VAR
      PurchaseLine@1000 : Record 39;
      DocumentNo@1001 : Code[20];
      PurchHeaderNo@1002 : Code[20];
      OldExactCostReversingMandatory@1003 : Boolean;
    BEGIN
      // Test that Purchase Order can copy document from posted Credit Memo correctly when 'Exact Cost Reversing Mandatory' is enabled.

      // Setup: Create and post Purchase Order with item tracking, Purchase Return Order by getting posted document.
      Initialize;
      OldExactCostReversingMandatory := UpdatePurchasesPayablesSetup(TRUE); // check the 'Exact Cost Reversing Mandatory' field.
      DocumentNo :=
        CreateAndPostPurchaseOrderWithIT(
          PurchaseLine,CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode(FALSE,TRUE)),'',
          TrackingOption::AssignLotNo);
      DocumentNo := CreateAndPostPurchReturnOrderByGetPostedDoc(PurchaseLine."Buy-from Vendor No.",DocumentNo);

      // Exercise: Create Purchase Order copy document from posted Purchase Credit Memo.
      PurchHeaderNo := CreateAndCopyDocFromPostedPurchDoc(PurchaseLine."Buy-from Vendor No.",DocumentNo);

      // Verify: Verify the quantity on Purchase Line.
      VerifyQtyOnPurchaseLine(PurchHeaderNo,PurchaseLine."No.",PurchaseLine.Quantity);

      // Tear Down: Set default value of 'Exact Cost Reversing Mandatory' on Purchases & Payables Setup
      UpdatePurchasesPayablesSetup(OldExactCostReversingMandatory);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandlerFalse)]
    PROCEDURE PickExpiringItemFromFEFOLocation@146();
    VAR
      Item@1000 : Record 27;
      Location@1001 : Record 14;
      SalesHeader@1005 : Record 36;
      WhseShptHeader@1003 : Record 7320;
      WhseActivityLine@1015 : Record 5767;
      BinType@1006 : Record 7303;
      SerialNo@1002 : Code[20];
    BEGIN
      // Verify that warehouse pick created from sales shipment gets first expiring item if location is set to process picks according to FEFO.
      Initialize;

      DeleteDefaultReceiptBinType(BinType);
      CreateTrackedItemWithWhseTracking(Item);
      CreateFEFOLocation(Location);

      SerialNo := PostPositiveAdjustmentWithExpiryTracking(Item,Location.Code,Location."Receipt Bin Code");

      CreateAndReleaseSalesDocument(SalesHeader,Item."No.",Location.Code,1);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      FindAndReleaseWhseShipment(WhseShptHeader,Location.Code);
      CreatePickFromWhseShipimentLine(WhseActivityLine,WhseShptHeader);
      BinType.INSERT; // Restore the deleted bin type

      Assert.AreEqual(SerialNo,WhseActivityLine."Serial No.",WrongSerialNoErr);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE PurchInvoiceFromPostedRcptGetsQtyPerUomFromRcpt@252();
    VAR
      ItemUOM@1000 : Record 5404;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      Item@1002 : Record 27;
      LotQty@1012 : Integer;
    BEGIN
      // [FEATURE] [Item Tracking] [Get Receipt Lines] [Qty. per Unit of Measure]
      // [SCENARIO 361867] Qty. per UoM in tracking specification when purchasing item in additional unit of measure with tracking by lot number
      Initialize;
      LotQty := LibraryRandom.RandInt(100);

      // [GIVEN] Item "I" with base unit of measure "U1"
      // [GIVEN] Additional item unit of measure "U2", qty. per unit of measure = "X"
      CreateItemWithAdditionalUOM(Item,ItemUOM,FALSE,TRUE);
      // [GIVEN] Purchase order for item "I" with lot tracking and unit of measure = "U2"
      CreatePurchaseInAdditionalUoM(PurchaseHeader,PurchaseLine,Item,LotQty * 2,ItemUOM.Code);
      AssignPurchaseLotNos(PurchaseLine,LotQty * ItemUOM."Qty. per Unit of Measure");

      // [GIVEN] Post purchase receipt
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [WHEN] Create purchase invoice from posted purchase receipt
      CreatePurchInvoiceFromReceipt(PurchaseHeader,PurchaseHeader."No.");

      // [THEN] "Quantity per Unit of Measure" in purchase invoice tracking lines is "X"
      VerifyQtyPerUoMOnReservation(PurchaseHeader."Document Type",PurchaseHeader."No.",ItemUOM."Qty. per Unit of Measure");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler)]
    PROCEDURE TransferOrderWithItemTrackingApplication@257();
    VAR
      ItemLedgerEntry@1000 : Record 32;
      TransferHeader@1013 : Record 5740;
      TransferLine@1002 : Record 5741;
      ItemJournalLine@1004 : Record 83;
      Location@1005 : Record 14;
      ItemNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Item Tracking] [Inventory Transfer] [Fixed Application]
      // [SCENARIO] Verify that transfer order can be received when Item Tracking is applied to Item Ledger Entry.

      // [GIVEN] Transfer Order with Lot Tracked Item, apply to Item Entry when assigning Lot No.
      Initialize;
      ItemNo :=
        CreateTrackedItem(
          LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(FALSE,TRUE));
      WITH ItemJournalLine DO BEGIN
        CreateItemJournalLineWithIT(
          ItemJournalLine,"Entry Type"::"Positive Adjmt.",TrackingOption::AssignLotNo,ItemNo,
          LibraryRandom.RandIntInRange(10,100));
        VALIDATE("Location Code",LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location));
        MODIFY(TRUE);
        PostOutputJournal(ItemJournalLine);
        FindItemLedgerEntry(ItemLedgerEntry,ItemNo);
        CreateTransferOrderApplyToItemEntry(TransferLine,"Location Code",ItemNo,Quantity,ItemLedgerEntry."Entry No.");
      END;

      // [GIVEN] Ship Transfer Order.
      TransferHeader.GET(TransferLine."Document No.");
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);

      // [WHEN] Receive Transfer Order.
      LibraryWarehouse.PostTransferOrder(TransferHeader,FALSE,TRUE);

      // [THEN] Transfer Receipt Line is created.
      VerifyPostedTransferReceipt(ItemNo);
    END;

    [Test]
    PROCEDURE UTPositiveClearApplItemEntry@292();
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      // [FEATURE] [Reservation Entry]
      // [SCENARIO] "Appl.-to Item Entry" zeroed after call to 'ClearApplFromToItemEntry' for positive Reservation Entry.

      // [GIVEN] Positive Reservation Entry with non-zero "Appl.-to Item Entry" and "Appl.-from Item Entry".
      WITH ReservationEntry DO BEGIN
        INIT;
        SetApplFromToItemEntry(ReservationEntry,TRUE);

        // [WHEN] ClearApplFromToItemEntry called.
        ClearApplFromToItemEntry;

        // [THEN] "Appl.-to Item Entry" set to zero, "Appl.-from Item Entry" rest as is.
        Assert.AreEqual(0,"Appl.-to Item Entry",ClearApplEntryErr);
        Assert.AreEqual(1,"Appl.-from Item Entry",ClearApplEntryErr);
      END
    END;

    [Test]
    PROCEDURE UTNegativeClearApplItemEntry@299();
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      // [FEATURE] [Reservation Entry]
      // [SCENARIO] "Appl.-from Item Entry" zeroed after call to 'ClearApplFromToItemEntry' for negative Reservation Entry.

      // [GIVEN] Negative Reservation Entry with non-zero "Appl.-to Item Entry" and "Appl.-from Item Entry".
      WITH ReservationEntry DO BEGIN
        INIT;
        SetApplFromToItemEntry(ReservationEntry,FALSE);

        // [WHEN] ClearApplFromToItemEntry called.
        ClearApplFromToItemEntry;

        // [THEN] "Appl.-from Item Entry" set to zero, "Appl.-to Item Entry" rest as is.
        Assert.AreEqual(1,"Appl.-to Item Entry",ClearApplEntryErr);
        Assert.AreEqual(0,"Appl.-from Item Entry",ClearApplEntryErr);
      END
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreateChangeQtyPageHandler)]
    PROCEDURE InvoicedQtyRoundedTwoReceiptsOneInvoice@263();
    VAR
      Item@1000 : Record 27;
      Location@1004 : Record 14;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      QtyPerUoM@1005 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Partial Receipt] [Item Tracking] [Qty. per Unit of Measure] [Rounding]
      // [SCENARIO 364284] Invoiced quantity is rounded correctly when one invoice is applied to several receipts

      // [GIVEN] Item with serial no. tracking and an additional unit of measure (Box): Qty. per base UoM = 12
      QtyPerUoM := 12;
      CreateItemWithSalesPurchUOM(Item,TRUE,FALSE,QtyPerUoM);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);

      // [GIVEN] Create purchase order with 5 boxes, assign 60 serial numbers
      CreatePurchaseOrderWithITSetTrackingQty(
        PurchaseHeader,PurchaseLine,Item."No.",Location.Code,5,TrackingOption::AssignSerialLot,3 * QtyPerUoM);
      // [GIVEN] Receive 3 Boxes (36 base UoM)
      SetPurchaseLineQtyToReceive(PurchaseLine,3);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Receive 2 Boxes (24 base UoM)
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialLot);
      LibraryVariableStorage.Enqueue(2 * QtyPerUoM);
      PurchaseLine.OpenItemTrackingLines;
      PurchaseLine.FIND;
      SetPurchaseLineQtyToReceive(PurchaseLine,2);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [WHEN] Post invoice on 5 boxes
      PurchaseLine.FIND;
      PurchaseLine.VALIDATE("Qty. to Invoice",5);
      PurchaseLine.MODIFY(TRUE);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // [THEN] Quantity invoiced is equal to quantity received in all posted receipts
      VerifyInvoicedQtyOnPurchRcptLine(Item."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreateChangeQtyPageHandler,ItemTrackingSummarySelectEntriesPageHandler)]
    PROCEDURE InvoicedQtyRoundedTwoShipmentsOneInvoice@285();
    VAR
      Item@1000 : Record 27;
      Location@1004 : Record 14;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      SalesHeader@1005 : Record 36;
      SalesLine@1007 : Record 37;
      QtyPerUoM@1010 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Partial Shipment] [Item Tracking] [Qty. per Unit of Measure] [Rounding]
      // [SCENARIO 364284] Invoiced quantity is rounded correctly when one invoice is applied to several shipments

      // [GIVEN] Item with serial no. tracking and an additional unit of measure (Box): Qty. per base UoM = 12
      QtyPerUoM := 12;
      CreateItemWithSalesPurchUOM(Item,TRUE,FALSE,QtyPerUoM);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);

      // [GIVEN] Post purchase order (receive only) with 5 boxes, assign 60 serial numbers
      CreatePurchaseOrderWithITSetTrackingQty(
        PurchaseHeader,PurchaseLine,Item."No.",Location.Code,5,TrackingOption::AssignSerialLot,5 * QtyPerUoM);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Create sales order with 5 boxes
      CreateSalesOrder(SalesHeader,SalesLine,Location.Code,'',Item."No.",5);

      // [GIVEN] Ship 3 boxes (36 base UoM)
      SetSalesLineQtyToShip(SalesLine,3);
      PostSalesShipmentWithTracking(SalesHeader,SalesLine,TrackingOption::SelectEntries,3 * QtyPerUoM);

      // [GIVEN] Ship 2 boxes (24 base UoM)
      SalesLine.FIND;
      SetSalesLineQtyToShip(SalesLine,2);
      PostSalesShipmentWithTracking(SalesHeader,SalesLine,TrackingOption::SelectEntries,2 * QtyPerUoM);

      // [WHEN] Invoice 5 boxes
      SalesLine.FIND;
      SalesLine.VALIDATE("Qty. to Invoice",5);
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);

      // [THEN] Quantity invoiced is equal to quantity received in all posted shipments
      VerifyInvoicedQtyOnSalesShptLine(Item."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreateChangeQtyPageHandler)]
    PROCEDURE InvoicedQtyRoundedOneReceiptTwoInvoices@282();
    VAR
      Item@1000 : Record 27;
      Location@1004 : Record 14;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      QtyPerUoM@1005 : Decimal;
    BEGIN
      // [FEATURE] [Purchase] [Partial Invoice] [Item Tracking] [Qty. per Unit of Measure] [Rounding]
      // [SCENARIO 364284] Invoiced quantity is rounded correctly when several invoices are applied to one receipt

      // [GIVEN] Item with serial no. tracking and an additional unit of measure (Box): Qty. per base UoM = 12
      QtyPerUoM := 12;
      CreateItemWithSalesPurchUOM(Item,TRUE,FALSE,QtyPerUoM);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);

      // [GIVEN] Post purchase order (receive only) with 6 boxes, assign 72 serial numbers
      CreatePurchaseOrderWithITSetTrackingQty(
        PurchaseHeader,PurchaseLine,Item."No.",Location.Code,6,TrackingOption::AssignSerialLot,6 * QtyPerUoM);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Invoice 3 boxes (36 base UoM)
      PurchaseLine.FIND;
      PostPurchaseInvoiceWithTracking(PurchaseHeader,PurchaseLine,3,3 * QtyPerUoM);

      // [GIVEN] Invoice 2 boxes (24 base UoM)
      PurchaseLine.FIND;
      PostPurchaseInvoiceWithTracking(PurchaseHeader,PurchaseLine,2,2 * QtyPerUoM);

      // [WHEN] Invoice the last 1 box
      PurchaseLine.FIND;
      PostPurchaseInvoiceWithTracking(PurchaseHeader,PurchaseLine,1,QtyPerUoM);

      // [THEN] Quantity invoiced is equal to quantity received in the receipt
      VerifyInvoicedQtyOnPurchRcptLine(Item."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreateChangeQtyPageHandler,ItemTrackingSummarySelectEntriesPageHandler)]
    PROCEDURE InvoicedQtyRoundedOneShipmentTwoInvoices@306();
    VAR
      Item@1001 : Record 27;
      Location@1002 : Record 14;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1004 : Record 39;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      QtyPerUoM@1000 : Integer;
    BEGIN
      // [FEATURE] [Sales] [Partial Invoice] [Item Tracking] [Qty. per Unit of Measure] [Rounding]
      // [SCENARIO 364284] Invoiced quantity is rounded correctly when several invoices are applied to one shipment

      // [GIVEN] Item with serial no. tracking and an additional unit of measure (Box): Qty. per base UoM = 12
      QtyPerUoM := 12;
      CreateItemWithSalesPurchUOM(Item,TRUE,FALSE,QtyPerUoM);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);

      // [GIVEN] Post purchase order with 6 boxes, assign 72 serial numbers
      CreatePurchaseOrderWithITSetTrackingQty(
        PurchaseHeader,PurchaseLine,Item."No.",Location.Code,6,TrackingOption::AssignSerialLot,6 * QtyPerUoM);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Create sales order with 6 boxes
      CreateSalesOrder(SalesHeader,SalesLine,Location.Code,'',Item."No.",6);

      // [GIVEN] Post sales shipment
      PostSalesShipmentWithTracking(SalesHeader,SalesLine,TrackingOption::SelectEntries,6 * QtyPerUoM);

      // [GIVEN] Invoice 3 boxes (36 base UoM)
      SalesLine.FIND;
      PostSalesInvoiceWithTracking(SalesHeader,SalesLine,3,3 * QtyPerUoM);

      // [GIVEN] Invoice 2 boxes (24 base UoM)
      SalesLine.FIND;
      PostSalesInvoiceWithTracking(SalesHeader,SalesLine,2,2 * QtyPerUoM);

      // [WHEN] Invoice the last box
      SalesLine.FIND;
      PostSalesInvoiceWithTracking(SalesHeader,SalesLine,1,QtyPerUoM);

      // [THEN] Quantity invoiced is equal to quantity received in the shipment
      VerifyInvoicedQtyOnSalesShptLine(Item."No.");
    END;

    LOCAL PROCEDURE Initialize@9();
    VAR
      InventorySetup@1000 : Record 313;
      LibraryERMCountryData@1010 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF isInitialized THEN
        EXIT;

      LibraryInventory.NoSeriesSetup(InventorySetup);
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AssignPurchaseLotNos@283(VAR PurchaseLine@1000 : Record 39;LotQtyBase@1004 : Integer);
    VAR
      PurchLineReserve@1001 : Codeunit 99000834;
      LotNo@1003 : ARRAY [2] OF Code[20];
      Qty@1002 : ARRAY [2] OF Integer;
    BEGIN
      LotNo[1] := LibraryUtility.GenerateGUID;
      LotNo[2] := LibraryUtility.GenerateGUID;
      Qty[1] := LotQtyBase;
      Qty[2] := LotQtyBase;

      SetNoAndQtyOnItemTrackingLines(LotNo,Qty,2,TrackingOption::SetLotNoAndQty);
      PurchLineReserve.CallItemTracking(PurchaseLine);
    END;

    LOCAL PROCEDURE ChangeBinAndVerifyOnItemJournalLine@182(ItemJournalLine@1000 : Record 83;BinCode@1002 : Code[20];WhseTracking@1001 : Boolean;SignFactor@1003 : Integer);
    BEGIN
      IF WhseTracking AND (SignFactor > 0) THEN BEGIN
        ASSERTERROR ItemJournalLine.VALIDATE("Bin Code",BinCode);
        Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ItemTrackingExistErr) > 0,'Actual:' + GETLASTERRORTEXT);
        CLEARLASTERROR;
      END ELSE
        ItemJournalLine.VALIDATE("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE ChangeBinOnJobJournal@159(VAR JobJournal@1001 : TestPage 201;JobJournalLine@1005 : Record 210;BinCode@1002 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(JobJournalLine."Journal Template Name");
      JobJournal.OPENEDIT;
      JobJournal.CurrentJnlBatchName.SETVALUE(JobJournalLine."Journal Batch Name");
      JobJournal.FILTER.SETFILTER("No.",JobJournalLine."No.");
      JobJournal."Bin Code".SETVALUE(BinCode);
      JobJournal.NEXT; // Trigger the item existing error
    END;

    LOCAL PROCEDURE ChangeBinAndVerifyOnJobJournal@141(JobJournalLine@1005 : Record 210;BinCode@1002 : Code[20];WhseTracking@1001 : Boolean;SignFactor@1003 : Integer);
    VAR
      JobJournal@1000 : TestPage 201;
    BEGIN
      ChangeBinOnJobJournal(JobJournal,JobJournalLine,BinCode);

      IF WhseTracking AND (SignFactor > 0) THEN
        Assert.IsTrue(STRPOS(JobJournal.GETVALIDATIONERROR,ItemTrackingExistErr) > 0,'Actual:' + JobJournal.GETVALIDATIONERROR)
      ELSE
        Assert.AreEqual('',JobJournal.GETVALIDATIONERROR,'Validation Error should not exist');
    END;

    LOCAL PROCEDURE ChangeBinOnPurchaseLine@169(VAR PurchaseOrder@1001 : TestPage 50;DocNo@1000 : Code[20];BinCode@1002 : Code[20]);
    BEGIN
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.FILTER.SETFILTER("No.",DocNo);
      PurchaseOrder.PurchLines."Bin Code".SETVALUE(BinCode);
      PurchaseOrder.PurchLines.NEXT; // Trigger the item existing error
    END;

    LOCAL PROCEDURE ChangeBinAndVerifyOnPurchaseLine@200(DocNo@1000 : Code[20];BinCode@1002 : Code[20];WhseTracking@1001 : Boolean;SignFactor@1003 : Integer);
    VAR
      PurchaseOrder@1004 : TestPage 50;
    BEGIN
      ChangeBinOnPurchaseLine(PurchaseOrder,DocNo,BinCode);

      IF WhseTracking AND (SignFactor < 0) THEN
        Assert.IsTrue(STRPOS(PurchaseOrder.GETVALIDATIONERROR,ItemTrackingExistErr) > 0,'Actual:' + PurchaseOrder.GETVALIDATIONERROR)
      ELSE
        Assert.AreEqual('',PurchaseOrder.GETVALIDATIONERROR,'Validation Error should not exist');
    END;

    LOCAL PROCEDURE ChangeBinOnProdOrderComponents@206(VAR ProdOrderComponents@1001 : TestPage 99000818;ItemNo@1000 : Code[20];BinCode@1002 : Code[20]);
    BEGIN
      ProdOrderComponents.OPENEDIT;
      ProdOrderComponents.FILTER.SETFILTER("Item No.",ItemNo);
      ProdOrderComponents."Bin Code".SETVALUE(BinCode);
      ProdOrderComponents.NEXT; // Trigger the item existing error
    END;

    LOCAL PROCEDURE ChangeBinAndVerifyOnProdOrderComponents@162(ItemNo@1000 : Code[20];BinCode@1002 : Code[20];WhseTracking@1001 : Boolean;SignFactor@1003 : Integer);
    VAR
      ProdOrderComponents@1004 : TestPage 99000818;
    BEGIN
      ChangeBinOnProdOrderComponents(ProdOrderComponents,ItemNo,BinCode);

      IF WhseTracking AND (SignFactor > 0) THEN
        Assert.IsTrue(
          STRPOS(ProdOrderComponents.GETVALIDATIONERROR,ItemTrackingExistErr) > 0,'Actual:' + ProdOrderComponents.GETVALIDATIONERROR)
      ELSE
        Assert.AreEqual('',ProdOrderComponents.GETVALIDATIONERROR,'Validation Error should not exist');
    END;

    LOCAL PROCEDURE CreateAndModifyItem@7(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option);
    VAR
      ItemTrackingCode@1003 : Record 6502;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,FALSE);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode.Code);
      Item.VALIDATE("Flushing Method",Item."Flushing Method"::"Pick + Backward");
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndModifyOutputJournal@50(VAR ItemJournalLine@1002 : Record 83;ProductionOrderNo@1001 : Code[20];OperationNo@1004 : Code[10];GenProdPostingGroup@1005 : Code[10];ItemNo@1006 : Code[20]);
    VAR
      ItemJournalBatch@1000 : Record 233;
      TrackingOption@1003 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      CreateOutputJournal(ItemJournalBatch,ProductionOrderNo);
      ItemJournalLine.SETRANGE("Order No.",ProductionOrderNo);
      ItemJournalLine.FINDFIRST;
      LibraryVariableStorage.Enqueue(TrackingOption::AssignLotNo);
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      ItemJournalLine.VALIDATE("Output Quantity",LibraryRandom.RandInt(10));  // Use Random value for Output Quantity.
      ItemJournalLine.VALIDATE("Operation No.",OperationNo);
      ItemJournalLine.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroup);
      ItemJournalLine.VALIDATE("Bin Code",ItemNo);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomer@13() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateVendor@166() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateBin@249(LocationCode@1001 : Code[10]) : Code[20];
    VAR
      Bin@1000 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateBin(Bin,LocationCode,LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),'','');
      EXIT(Bin.Code);
    END;

    LOCAL PROCEDURE CreateFEFOLocation@248(VAR Location@1000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);

      WITH Location DO BEGIN
        VALIDATE("Bin Mandatory",TRUE);
        VALIDATE("Require Shipment",TRUE);
        VALIDATE("Require Pick",TRUE);
        VALIDATE("Require Receive",TRUE);
        VALIDATE("Pick According to FEFO",TRUE);
        VALIDATE("Receipt Bin Code",CreateBin(Code));
        VALIDATE("Shipment Bin Code",CreateBin(Code));
        MODIFY(TRUE);
      END;

      CreateWarehouseEmployee(Location.Code);
    END;

    LOCAL PROCEDURE CreateItemWithAdditionalUOM@274(VAR Item@1000 : Record 27;VAR ItemUnitOfMeasure@1001 : Record 5404;SNTracking@1002 : Boolean;LotNoTracking@1003 : Boolean);
    BEGIN
      CreateItemWithAddUOMFixedQty(Item,ItemUnitOfMeasure,SNTracking,LotNoTracking,LibraryRandom.RandIntInRange(2,10));
    END;

    LOCAL PROCEDURE CreateItemWithAddUOMFixedQty@277(VAR Item@1000 : Record 27;VAR ItemUnitOfMeasure@1003 : Record 5404;SNTracking@1002 : Boolean;LotNoTracking@1001 : Boolean;QtyPerUOM@1004 : Decimal);
    BEGIN
      Item.GET(
        CreateTrackedItem(
          LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(SNTracking,LotNoTracking)));
      LibraryPatterns.MAKEAdditionalItemUOM(ItemUnitOfMeasure,Item."No.",QtyPerUOM);
    END;

    LOCAL PROCEDURE CreateItemWithSalesPurchUOM@284(VAR Item@1004 : Record 27;SNTracking@1002 : Boolean;LotNoTracking@1001 : Boolean;QtyPerUOM@1000 : Decimal);
    VAR
      ItemUnitOfMeasure@1003 : Record 5404;
    BEGIN
      CreateItemWithAddUOMFixedQty(Item,ItemUnitOfMeasure,SNTracking,LotNoTracking,QtyPerUOM);
      Item.VALIDATE("Purch. Unit of Measure",ItemUnitOfMeasure.Code);
      Item.VALIDATE("Sales Unit of Measure",ItemUnitOfMeasure.Code);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationWithBin@83(VAR Bin@1000 : Record 7354;ItemNo@1001 : Code[20]);
    VAR
      Location@1002 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);
      LibraryWarehouse.CreateBin(Bin,Location.Code,ItemNo,'','');  // Use blank Zone Code and Bin Type Code.
    END;

    LOCAL PROCEDURE CreatePurchInvoiceFromReceipt@268(VAR PurchaseHeader@1002 : Record 38;PurchOrderNo@1001 : Code[20]);
    VAR
      PurchRcptLine@1000 : Record 121;
      PurchGetReceipt@1003 : Codeunit 74;
    BEGIN
      FindPurchaseReceiptLine(PurchRcptLine,PurchOrderNo);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Buy-from Vendor No.");
      PurchGetReceipt.SetPurchHeader(PurchaseHeader);
      PurchGetReceipt.CreateInvLines(PurchRcptLine);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@127(VAR PurchaseLine@1002 : Record 39;ItemNo@1001 : Code[20];LocationCode@1000 : Code[10];Qty@1004 : Decimal);
    VAR
      PurchaseHeader@1003 : Record 38;
    BEGIN
      CreatePurchaseOrderWithReservation(
        PurchaseLine,PurchaseHeader."Document Type"::Order,'',ItemNo,LocationCode,Qty,FALSE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithReservation@120(VAR PurchaseLine@1002 : Record 39;DocumentType@1004 : Option;VendorNo@1006 : Code[20];ItemNo@1001 : Code[20];LocationCode@1000 : Code[10];Qty@1005 : Decimal;Reserve@1007 : Boolean);
    VAR
      PurchaseHeader@1003 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,ItemNo,LocationCode,Qty);
      IF Reserve THEN
        PurchaseLine.ShowReservation;
    END;

    [Normal]
    LOCAL PROCEDURE CreateProdBOMWithOneComp@71(VAR ParentItem@1002 : Record 27;CompItem@1003 : Record 27);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
      ProductionBOMLine@1001 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,ParentItem."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,CompItem."No.",1);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
      ParentItem.GET(ParentItem."No.");
      ParentItem.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      ParentItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalLineWithIT@14(VAR ItemJournalLine@1000 : Record 83;EntryType@1001 : Option;TrackingOption@1005 : Option;ItemNo@1003 : Code[20];Quantity@1002 : Decimal);
    VAR
      ItemJournalBatch@1004 : Record 233;
    BEGIN
      LibraryVariableStorage.Enqueue(TrackingOption);  // Enqueue value for ItemTrackingLinesPageHandler.
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);  // Using Random value for Quantity.
    END;

    LOCAL PROCEDURE CreateItemJournalLineWithBin@87(VAR ItemJournalLine@1000 : Record 83;Bin@1006 : Record 7354;EntryType@1001 : Option;ItemNo@1003 : Code[20];Quantity@1002 : Decimal);
    VAR
      ItemJournalBatch@1004 : Record 233;
    BEGIN
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",Bin."Location Code");
      ItemJournalLine.VALIDATE("Bin Code",Bin.Code);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobWithJobTask@133(VAR JobTask@1000 : Record 1001);
    VAR
      Job@1001 : Record 167;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
    END;

    LOCAL PROCEDURE CreateJobJournalLineWithBin@129(VAR JobJournalLine@1000 : Record 210;Bin@1006 : Record 7354;Type@1001 : Option;No@1003 : Code[20];Quantity@1002 : Decimal);
    VAR
      JobTask@1004 : Record 1001;
    BEGIN
      CreateJobWithJobTask(JobTask);
      LibraryJob.CreateJobJournalLine(JobJournalLine."Line Type"::" ",JobTask,JobJournalLine);
      JobJournalLine.VALIDATE(Type,Type);
      JobJournalLine.VALIDATE("No.",No);
      JobJournalLine.VALIDATE("Location Code",Bin."Location Code");
      JobJournalLine.VALIDATE("Bin Code",Bin.Code);
      JobJournalLine.VALIDATE(Quantity,Quantity);
      JobJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePickFromWhseShipimentLine@258(VAR WhseActivityLine@1003 : Record 5767;WhseShptHeader@1001 : Record 7320);
    VAR
      WhseShptLine@1000 : Record 7321;
      WhseShptCreatePick@1002 : Report 7318;
    BEGIN
      WhseShptLine.SETRANGE("No.",WhseShptHeader."No.");
      WhseShptLine.FINDFIRST;

      WhseShptCreatePick.SetWhseShipmentLine(WhseShptLine,WhseShptHeader);
      WhseShptCreatePick.SetHideValidationDialog(TRUE);
      WhseShptCreatePick.USEREQUESTPAGE(FALSE);
      WhseShptCreatePick.RUNMODAL;

      FindWhseActivityLineForLocation(WhseActivityLine,WhseShptHeader."Location Code");
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithBin@193(VAR PurchaseLine@1000 : Record 39;Bin@1006 : Record 7354;No@1003 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      CreatePurchaseOrder(PurchaseLine,No,Bin."Location Code",LibraryRandom.RandIntInRange(50,100));
      PurchaseLine.VALIDATE("Bin Code",Bin.Code);
      PurchaseLine.VALIDATE(Quantity,Quantity);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProdOrderCompWithBin@219(VAR ProdOrderComp@1000 : Record 5407;Bin@1006 : Record 7354;No@1003 : Code[20];Quantity@1002 : Decimal);
    VAR
      ProdItem@1004 : Record 27;
      ProductionBOMLine@1005 : Record 99000772;
      ProductionBOMHeader@1007 : Record 99000771;
      ProductionOrder@1008 : Record 5405;
      RoutingLine@1001 : Record 99000764;
    BEGIN
      LibraryInventory.CreateItem(ProdItem);
      CreateProductionBOM(ProductionBOMLine,No,ProdItem."Base Unit of Measure");

      ProductionBOMHeader.GET(ProductionBOMLine."Production BOM No.");
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::"Under Development");
      ProductionBOMHeader.MODIFY(TRUE);
      ProductionBOMLine.VALIDATE("Quantity per",1); // Set 1 here to make sure component's Quantity would equal the Quantity passed as parameter
      ProductionBOMLine.MODIFY(TRUE);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
      CreateRouting(RoutingLine,ProductionBOMLine."Routing Link Code");

      // Add Production BOM No. and Routing No. to Production Item.
      UpdateItem(ProdItem,ProductionBOMLine."Production BOM No.",RoutingLine."Routing No.");
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ProdItem."No.",Quantity);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      ProdOrderComp.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComp.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderComp.SETRANGE("Item No.",No);
      ProdOrderComp.FINDFIRST;
      ProdOrderComp.VALIDATE("Location Code",Bin."Location Code");
      ProdOrderComp.VALIDATE("Bin Code",Bin.Code);
      ProdOrderComp.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithIT@270(VAR PurchaseHeader@1004 : Record 38;VAR PurchaseLine@1003 : Record 39;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];Qty@1005 : Decimal;TrackingOption@1000 : Option);
    BEGIN
      CreatePurchaseOrder(PurchaseLine,ItemNo,LocationCode,Qty);
      UpdateGeneralPostingSetup(PurchaseLine);
      LibraryVariableStorage.Enqueue(TrackingOption);  // Enqueue value for ItemTrackingLinesPageHandler.
      PurchaseLine.OpenItemTrackingLines;
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithITSetTrackingQty@264(VAR PurchaseHeader@1004 : Record 38;VAR PurchaseLine@1003 : Record 39;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];Qty@1005 : Decimal;TrackingOption@1000 : Option;QtyToTrack@1006 : Decimal);
    BEGIN
      CreatePurchaseOrder(PurchaseLine,ItemNo,LocationCode,Qty);
      LibraryVariableStorage.Enqueue(TrackingOption);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(QtyToTrack);
      PurchaseLine.OpenItemTrackingLines;
      PurchaseHeader.GET(PurchaseLine."Document Type"::Order,PurchaseLine."Document No.");
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithIT@123(VAR PurchaseLine@1002 : Record 39;ItemNo@1001 : Code[20];LocationCode@1000 : Code[10];TrackingOption@1005 : Option) : Code[20];
    VAR
      PurchaseHeader@1003 : Record 38;
    BEGIN
      CreatePurchaseOrderWithIT(
        PurchaseHeader,PurchaseLine,ItemNo,LocationCode,LibraryRandom.RandIntInRange(50,100),TrackingOption);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostOutputJournal@86(ProductionOrderNo@1000 : Code[20]);
    VAR
      ItemJournalBatch@1003 : Record 233;
    BEGIN
      CreateOutputJournal(ItemJournalBatch,ProductionOrderNo);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostConsumptionJournal@5(ProductionOrderNo@1000 : Code[20]);
    VAR
      ItemJournalBatch@1003 : Record 233;
      ItemJournalLine@1002 : Record 83;
      ItemJournalTemplate@1001 : Record 82;
      TrackingOption@1004 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Consumption);
      LibraryInventory.SelectItemJournalBatchName(
        ItemJournalBatch,ItemJournalBatch."Template Type"::Consumption,ItemJournalTemplate.Name);
      LibraryManufacturing.CalculateConsumption(ProductionOrderNo,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.SETRANGE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.SETRANGE("Order No.",ProductionOrderNo);
      ItemJournalLine.FINDFIRST;
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries); // Enqueue value for ItemTrackingLinesPageHandler.
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrderWithIT@12(VAR ProductionOrder@1002 : Record 5405;Status@1003 : Option;SourceNo@1001 : Code[20];Quantity@1000 : Decimal;TrackingOption@1006 : Option);
    VAR
      ProdOrderLine@1004 : Record 5406;
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,ProductionOrder."Source Type"::Item,SourceNo,Quantity);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      LibraryVariableStorage.Enqueue(TrackingOption);  // Enqueue value for ItemTrackingLinesPageHandler.
      ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@140(SNSpecific@1002 : Boolean;LOTSpecific@1001 : Boolean) : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,SNSpecific,LOTSpecific);
      ItemTrackingCode.VALIDATE("SN Specific Tracking",SNSpecific);
      ItemTrackingCode.VALIDATE("Lot Specific Tracking",LOTSpecific);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",LOTSpecific);
      ItemTrackingCode.MODIFY(TRUE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateOutputJournal@151(VAR ItemJournalBatch@1000 : Record 233;ProductionOrderNo@1001 : Code[20]);
    VAR
      ItemJournalLine@1003 : Record 83;
      ItemJournalTemplate@1002 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Output);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryManufacturing.CreateOutputJournal(ItemJournalLine,ItemJournalTemplate,ItemJournalBatch,'',ProductionOrderNo);  // Use Blank Value for Item No.
      LibraryInventory.OutputJnlExplRoute(ItemJournalLine);
    END;

    LOCAL PROCEDURE CreateProductionBOM@34(VAR ProductionBOMLine@1003 : Record 99000772;ItemNo@1001 : Code[20];BaseUnitofMeasure@1002 : Code[10]);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
      RoutingLink@1004 : Record 99000777;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitofMeasure);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo,LibraryRandom.RandInt(5));  // Use Random value for Quantity Per and blank value for Version Code.
      RoutingLink.FINDFIRST;
      ProductionBOMLine.VALIDATE("Routing Link Code",RoutingLink.Code);
      ProductionBOMLine.MODIFY(TRUE);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProductionOrderWithAutoReserve@38(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10]);
    VAR
      ProdOrderComponent@1005 : Record 5407;
      TrackingOption@1004 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderComponent.FINDFIRST;
      ProdOrderComponent.AutoReserve;
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);
      ProdOrderComponent.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreatePurchaseLine@46(VAR PurchaseLine@1004 : Record 39;PurchaseHeader@1000 : Record 38;ItemNo@1003 : Code[20];LocationCode@1002 : Code[10];Quantity@1001 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10,2));  // Using Random value for Direct Unit Cost.
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRouting@52(VAR RoutingLine@1002 : Record 99000764;Code@1001 : Code[10]);
    VAR
      RoutingHeader@1005 : Record 99000763;
      WorkCenter@1004 : Record 99000754;
    BEGIN
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      LibraryManufacturing.CreateWorkCenter(WorkCenter);

      // Use Random value for Operation No and blank value for Version Code.
      LibraryManufacturing.CreateRoutingLine(
        RoutingHeader,RoutingLine,'',LibraryUtility.GenerateRandomCode(RoutingLine.FIELDNO("Operation No."),DATABASE::"Routing Line"),
        RoutingLine.Type::"Work Center",WorkCenter."No.");
      RoutingLine.VALIDATE("Routing Link Code",Code);
      RoutingLine.MODIFY(TRUE);
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
      WorkCenter.VALIDATE("Flushing Method",WorkCenter."Flushing Method"::Backward);
      WorkCenter.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocument@6(VAR SalesLine@1001 : Record 37;No@1004 : Code[20];LocationCode@1007 : Code[10];Quantity@1002 : Decimal);
    VAR
      SalesHeader@1006 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,No,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithIT@103(VAR SalesLine@1003 : Record 37;No@1006 : Code[20];LocationCode@1005 : Code[10];Quantity@1004 : Decimal;Invoice@1002 : Boolean) : Code[20];
    VAR
      SalesHeader@1001 : Record 36;
      TrackingOption@1000 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      CreateSalesDocument(SalesLine,No,LocationCode,Quantity);
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue value for ItemTrackingLinesPageHandler.
      SalesLine.OpenItemTrackingLines;
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,Invoice));
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesDocument@254(VAR SalesHeader@1000 : Record 36;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Integer);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      CreateSalesDocument(SalesLine,ItemNo,LocationCode,Quantity);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      CODEUNIT.RUN(CODEUNIT::"Release Sales Document",SalesHeader);
    END;

    LOCAL PROCEDURE CreateTrackedItem@10(LotNo@1002 : Code[10];SerialNo@1001 : Code[10];ItemTrackingCode@1000 : Code[10]) : Code[20];
    VAR
      Item@1003 : Record 27;
    BEGIN
      LibraryInventory.CreateTrackedItem(Item,LotNo,SerialNo,ItemTrackingCode);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateTrackedItemWithWhseTracking@244(VAR Item@1000 : Record 27);
    VAR
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      Item.GET(CreateTrackedItem('',LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(TRUE,FALSE)));
      ItemTrackingCode.GET(Item."Item Tracking Code");
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",TRUE);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PrepareTransferOrder@280(VAR TransferHeader@1006 : Record 5740;VAR TransferLine@1001 : Record 5741;LocationFromCode@1004 : Code[10];ItemNo@1012 : Code[20];Quantity@1007 : Decimal);
    VAR
      LocationTo@1000 : Record 14;
      LocationInTransit@1008 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationTo);
      LibraryWarehouse.CreateInTransitLocation(LocationInTransit);
      LibraryWarehouse.CreateTransferHeader(TransferHeader,LocationFromCode,LocationTo.Code,LocationInTransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateTransferOrder@8(VAR TransferLine@1001 : Record 5741;LocationFromCode@1004 : Code[10];ItemNo@1012 : Code[20];Quantity@1007 : Decimal);
    VAR
      TransferHeader@1002 : Record 5740;
      Direction@1003 : 'Outbound,Inbound';
    BEGIN
      PrepareTransferOrder(TransferHeader,TransferLine,LocationFromCode,ItemNo,Quantity);
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue value for ItemTrackingLinesPageHandler.
      TransferLine.OpenItemTrackingLines(Direction::Outbound);
    END;

    LOCAL PROCEDURE CreateTransferOrderApplyToItemEntry@279(VAR TransferLine@1001 : Record 5741;LocationFromCode@1004 : Code[10];ItemNo@1012 : Code[20];Quantity@1007 : Decimal;ItemLedgEntryNo@1006 : Integer);
    VAR
      TransferHeader@1002 : Record 5740;
      Direction@1003 : 'Outbound,Inbound';
    BEGIN
      PrepareTransferOrder(TransferHeader,TransferLine,LocationFromCode,ItemNo,Quantity);
      LibraryVariableStorage.Enqueue(TrackingOption::SelectAndApplyToItemEntry);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(ItemLedgEntryNo); // Enqueue value for SelectApplyToItemEntry.
      TransferLine.OpenItemTrackingLines(Direction::Outbound);
    END;

    LOCAL PROCEDURE CreateAndPostTransferOrderWithIT@15(VAR TransferLine@1001 : Record 5741;LocationFromCode@1004 : Code[10];LocationToCode@1006 : Code[10];InTransitCode@1009 : Code[10];ItemNo@1012 : Code[20];Quantity@1007 : Decimal);
    VAR
      TransferHeader@1002 : Record 5740;
      Direction@1003 : 'Outbound,Inbound';
      TrackingOption@1000 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,LocationFromCode,LocationToCode,InTransitCode);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      LibraryVariableStorage.Enqueue(TrackingOption::SelectEntries);  // Enqueue value for ItemTrackingLinesPageHandler.
      TransferLine.OpenItemTrackingLines(Direction::Outbound);
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndCopyDocFromPostedSalesDoc@225(CustomerNo@1000 : Code[20];DocNo@1001 : Code[20]) : Code[20];
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeaderCopySalesDoc(SalesHeader,DocType::"Posted Credit Memo",DocNo,TRUE,TRUE);
      EXIT(SalesHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndCopyDocFromPostedPurchDoc@231(VendorNo@1000 : Code[20];DocNo@1001 : Code[20]) : Code[20];
    VAR
      PurchHeader@1002 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,VendorNo);
      PurchaseHeaderCopyPurchDoc(PurchHeader,DocType::"Posted Credit Memo",DocNo,TRUE,TRUE);
      EXIT(PurchHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndPostSaleReturnOrderByGetPostedDoc@232(CustomerNo@1001 : Code[20];DocNo@1000 : Code[20]) : Code[20];
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",CustomerNo);
      LibraryVariableStorage.Enqueue(DocNo); // Enqueue value for PostedSalesDocumentLinesPageHandler.
      GetPostedDocToReverseOnSalesReturnOrder(SalesHeader."No.");
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostPurchReturnOrderByGetPostedDoc@233(VendorNo@1001 : Code[20];DocNo@1000 : Code[20]) : Code[20];
    VAR
      PurchHeader@1002 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::"Return Order",VendorNo);
      UpdatePurchHeader(PurchHeader);
      LibraryVariableStorage.Enqueue(DocNo); // Enqueue value for PostedPurchaseDocumentLinesPageHandler.
      GetPostedDocToReverseOnPurchReturnOrder(PurchHeader."No.");
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE ChangeBinCodeInSalesLine@256(VAR NewSalesLine@1000 : Record 37;BinCode@1001 : Code[20]);
    VAR
      OldSalesLine@1003 : Record 37;
      SalesLineReserve@1004 : Codeunit 99000832;
    BEGIN
      // Can not use Modify trigger on SalesLine because xRec will be equal to Rec in that way for Sales Line.
      // Can not use TestPage Prod Order because TestTool doesn't show error in OnModify Triggerwhile running from Page (created Bug 360986).
      OldSalesLine := NewSalesLine;
      NewSalesLine.VALIDATE("Bin Code",BinCode);
      SalesLineReserve.VerifyChange(NewSalesLine,OldSalesLine);
    END;

    LOCAL PROCEDURE CreatePurchaseInAdditionalUoM@278(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;Item@1002 : Record 27;Quantity@1003 : Decimal;UoMCode@1004 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",Quantity);
      PurchaseLine.VALIDATE("Unit of Measure Code",UoMCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReleasedProdOrderWithReservEntry@253(SalesHeader@1000 : Record 36;SalesLine@1001 : Record 37);
    VAR
      ProductionOrder@1003 : Record 5405;
      ReservationEntry@1005 : Record 337;
      OrderType@1002 : 'ItemOrder,ProjectOrder';
      EntryNo@1004 : Integer;
    BEGIN
      LibraryManufacturing.CreateProductionOrderFromSalesOrder(SalesHeader,ProductionOrder.Status::Released,OrderType::ProjectOrder);
      IF ReservationEntry.FINDLAST THEN ;
      EntryNo := ReservationEntry."Entry No." + 1;
      CreateReservationEntry(SalesLine,EntryNo,DATABASE::"Sales Line",FALSE);
      CreateReservationEntry(SalesLine,EntryNo,DATABASE::"Purchase Line",TRUE);
    END;

    LOCAL PROCEDURE CreateReservationEntry@291(SalesLine@1001 : Record 37;EntryNo@1004 : Integer;SourceType@1003 : Integer;IsPositive@1002 : Boolean);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        INIT;
        "Entry No." := EntryNo;
        VALIDATE("Source Type",SourceType);
        VALIDATE("Source Subtype",SalesLine."Document Type");
        VALIDATE("Source ID",SalesLine."Document No.");
        VALIDATE("Source Batch Name",'');
        VALIDATE("Source Prod. Order Line",0);
        VALIDATE("Source Ref. No.",SalesLine."Line No.");
        VALIDATE(Positive,IsPositive);
        VALIDATE("Quantity (Base)",1);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateBinMandatoryLocation@287(VAR Location@1000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY;
    END;

    LOCAL PROCEDURE CreateFixedBinContent@275(VAR BinContent@1001 : Record 7302;Item@1004 : Record 27;LocationCode@1002 : Code[10];IsDefault@1003 : Boolean);
    VAR
      Bin@1000 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateBin(Bin,LocationCode,LibraryUtility.GenerateGUID,'','');
      LibraryWarehouse.CreateBinContent(BinContent,Bin."Location Code",'',Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      WITH BinContent DO BEGIN
        VALIDATE(Default,IsDefault);
        VALIDATE(Fixed,TRUE);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateItemWithTrackingCode@262(VAR Item@1000 : Record 27);
    VAR
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,FALSE);
      WITH ItemTrackingCode DO BEGIN
        "Lot Specific Tracking" := TRUE;
        "Lot Warehouse Tracking" := TRUE;
        MODIFY;
      END;
      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateSalesOrder@265(VAR SalesHeader@1003 : Record 36;VAR SalesLine@1002 : Record 37;LocationCode@1001 : Code[10];BinCode@1005 : Code[20];ItemNo@1004 : Code[20];Quantity@1006 : Decimal);
    VAR
      Customer@1000 : Record 18;
    BEGIN
      WITH LibrarySales DO BEGIN
        CreateCustomer(Customer);
        CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");
        CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      END;
      WITH SalesLine DO BEGIN
        VALIDATE("Location Code",LocationCode);
        VALIDATE("Bin Code",BinCode);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateSalesOrderWithRandomQty@308(VAR SalesHeader@1004 : Record 36;VAR SalesLine@1003 : Record 37;LocationCode@1002 : Code[10];BinCode@1001 : Code[20];ItemNo@1000 : Code[20]);
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,LocationCode,BinCode,ItemNo,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreateTrackedItemWithTwoBinContents@260(VAR BinContent@1002 : Record 7302;VAR BinContent2@1001 : Record 7302) : Code[20];
    VAR
      Item@1003 : Record 27;
      Location@1000 : Record 14;
    BEGIN
      CreateItemWithTrackingCode(Item);
      CreateBinMandatoryLocation(Location);
      CreateFixedBinContent(BinContent,Item,Location.Code,TRUE);
      CreateFixedBinContent(BinContent2,Item,Location.Code,FALSE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateWarehouseEmployee@245(LocationCode@1001 : Code[10]);
    VAR
      WhseEmployee@1000 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateWarehouseEmployee(WhseEmployee,LocationCode,TRUE);
    END;

    LOCAL PROCEDURE DeleteDefaultReceiptBinType@241(VAR BinTypeBuf@1001 : Record 7303);
    VAR
      BinType@1000 : Record 7303;
    BEGIN
      // Save bin type before deleting to restore it after completing the test
      WITH BinType DO BEGIN
        SETRANGE(Receive,TRUE);
        IF FINDFIRST THEN BEGIN
          BinTypeBuf := BinType;
          DELETE;
        END;
      END;
    END;

    LOCAL PROCEDURE EnqueueVariablesForSetLotTrackingNo@236(LotNo@1000 : ARRAY [2] OF Code[20];Qty@1001 : ARRAY [2] OF Integer;SignFactor@1002 : Integer;SetNoOption@1003 : Option);
    VAR
      OptionString@1004 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
    BEGIN
      CASE SetNoOption OF
        OptionString::QtyNotEnoughNo:
          SetLotNoAndQtyOnItemTrackingLine(LotNo[1],SignFactor * Qty[1]);
        OptionString::QtyEnoughNo:
          SetLotNoAndQtyOnItemTrackingLine(LotNo[1],SignFactor * Qty[2]);
        OptionString::UnavailableNo:
          SetLotNoAndQtyOnItemTrackingLine(LotNo[2],SignFactor * LibraryRandom.RandIntInRange(Qty[1] - Qty[2] + 1,Qty[1]));
      END;
    END;

    LOCAL PROCEDURE EnqueueVariablesForSetSerialTrackingNo@250(ItemJournalDocNo@1000 : ARRAY [10] OF Code[20];ItemNo@1002 : Code[20];Quantity@1005 : Integer;SignFactor@1007 : Integer;SetNoOption@1003 : Option);
    VAR
      SerialNos@1001 : ARRAY [10] OF Code[20];
      OptionString@1004 : 'QtyNotEnoughNo,QtyEnoughNo,UnavailableNo';
      TrackingOption@1006 : 'Serial,Lot';
    BEGIN
      CASE SetNoOption OF
        OptionString::QtyNotEnoughNo:
          GetNosFromItemTrackingEntries(SerialNos,ItemNo,ItemJournalDocNo[1],TrackingOption::Serial);
        OptionString::QtyEnoughNo:
          GetNosFromItemTrackingEntries(SerialNos,ItemNo,ItemJournalDocNo[2],TrackingOption::Serial);
        OptionString::UnavailableNo:
          BEGIN
            GetNosFromItemTrackingEntries(SerialNos,ItemNo,ItemJournalDocNo[2],TrackingOption::Serial);
            SerialNos[ABS(Quantity)] := LibraryUtility.GenerateGUID;
          END;
      END;
      SetSerialNosAndQtyOnItemTrackingLine(SerialNos,SignFactor,ABS(Quantity));
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@21(VAR ItemLedgerEntry@1000 : Record 32;ItemNo@1001 : Code[20]);
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindAndReleaseWhseShipment@255(VAR WhseShptHeader@1000 : Record 7320;LocationCode@1001 : Code[10]);
    VAR
      WhseShipmentRelease@1002 : Codeunit 7310;
    BEGIN
      WhseShptHeader.SETRANGE("Location Code",LocationCode);
      WhseShptHeader.FINDFIRST;
      WhseShipmentRelease.Release(WhseShptHeader);
    END;

    LOCAL PROCEDURE FindAndUpdateSalesLine@68(DocumentNo@1000 : Code[20];DocumentType@1002 : Option);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETFILTER("No.",'<>%1','');
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDFIRST;
      SalesLine.VALIDATE(Quantity,SalesLine.Quantity / 2);  // Take Partial Quantity.
    END;

    LOCAL PROCEDURE FindAndUpdatePurchaseLine@66(DocumentNo@1000 : Code[20];DocumentType@1002 : Option);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      PurchaseLine.SETFILTER("No.",'<>%1','');
      PurchaseLine.SETRANGE("Document Type",DocumentType);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDFIRST;
      PurchaseLine.VALIDATE(Quantity,PurchaseLine.Quantity / 2);  // Take Partial Quantity.
    END;

    LOCAL PROCEDURE FindPurchaseReceiptLine@259(VAR PurchRcptLine@1000 : Record 121;OrderNo@1001 : Code[20]);
    VAR
      PurchRcptHeader@1002 : Record 120;
    BEGIN
      PurchRcptHeader.SETRANGE("Order No.",OrderNo);
      PurchRcptHeader.FINDFIRST;
      PurchRcptLine.SETRANGE("Document No.",PurchRcptHeader."No.");
      PurchRcptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchLine@148(VAR PurchLine@1002 : Record 39;PurchHeaderNo@1001 : Code[20];ItemNo@1000 : Code[20]);
    BEGIN
      WITH PurchLine DO BEGIN
        SETRANGE("Document No.",PurchHeaderNo);
        SETRANGE("No.",ItemNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindSalesLine@242(VAR SalesLine@1000 : Record 37;SalesHeaderNo@1002 : Code[20];ItemNo@1001 : Code[20]);
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document No.",SalesHeaderNo);
        SETRANGE("No.",ItemNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindWhseActivityLineForLocation@261(VAR WhseActivityLine@1000 : Record 5767;LocationCode@1001 : Code[10]);
    BEGIN
      WhseActivityLine.SETRANGE("Location Code",LocationCode);
      WhseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetLotNoFromItemTrackingEntries@77(ItemNo@1000 : Code[20];DocumentNo@1002 : Code[20]) : Code[20];
    VAR
      ItemTrackingEntries@1001 : TestPage 6501;
    BEGIN
      ItemTrackingEntries.OPENEDIT;
      ItemTrackingEntries.FILTER.SETFILTER("Item No.",ItemNo);
      ItemTrackingEntries.FILTER.SETFILTER("Document No.",DocumentNo);
      EXIT(ItemTrackingEntries."Lot No.".VALUE);
    END;

    LOCAL PROCEDURE GetNosFromItemTrackingEntries@126(VAR Nos@1003 : ARRAY [10] OF Code[20];ItemNo@1000 : Code[20];DocumentNo@1002 : Code[20];TrackingOption@1005 : Option);
    VAR
      ItemTrackingEntries@1001 : TestPage 6501;
      I@1004 : Integer;
      OptionString@1006 : 'Serial,Lot';
    BEGIN
      ItemTrackingEntries.OPENEDIT;
      ItemTrackingEntries.FILTER.SETFILTER("Item No.",ItemNo);
      ItemTrackingEntries.FILTER.SETFILTER("Document No.",DocumentNo);
      I := 1;
      REPEAT
        CASE TrackingOption OF
          OptionString::Serial:
            Nos[I] := ItemTrackingEntries."Serial No.".VALUE;
          OptionString::Lot:
            Nos[I] := ItemTrackingEntries."Lot No.".VALUE;
        END;
        I := I + 1;
      UNTIL ItemTrackingEntries.NEXT = FALSE;
    END;

    LOCAL PROCEDURE GetPostedDocToReverseOnSalesReturnOrder@63(No@1001 : Code[20]);
    VAR
      SalesReturnOrder@1003 : TestPage 6630;
    BEGIN
      SalesReturnOrder.OPENEDIT;
      SalesReturnOrder.FILTER.SETFILTER("No.",No);
      SalesReturnOrder.GetPostedDocumentLinesToReverse.INVOKE;
    END;

    LOCAL PROCEDURE GetPostedDocToReverseOnSalesCreditMemo@62(No@1001 : Code[20]);
    VAR
      SalesCreditMemo@1003 : TestPage 44;
    BEGIN
      SalesCreditMemo.OPENEDIT;
      SalesCreditMemo.FILTER.SETFILTER("No.",No);
      SalesCreditMemo.GetPostedDocumentLinesToReverse.INVOKE;
    END;

    LOCAL PROCEDURE GetPostedDocToReverseOnPurchReturnOrder@47(No@1001 : Code[20]);
    VAR
      PurchaseReturnOrder@1003 : TestPage 6640;
    BEGIN
      PurchaseReturnOrder.OPENEDIT;
      PurchaseReturnOrder.FILTER.SETFILTER("No.",No);
      PurchaseReturnOrder.GetPostedDocumentLinesToReverse.INVOKE;
    END;

    LOCAL PROCEDURE GetPostedDocToReverseOnPurchCreditMemo@61(No@1001 : Code[20]);
    VAR
      PurchaseCreditMemo@1003 : TestPage 52;
    BEGIN
      PurchaseCreditMemo.OPENEDIT;
      PurchaseCreditMemo.FILTER.SETFILTER("No.",No);
      PurchaseCreditMemo.GetPostedDocumentLinesToReverse.INVOKE;
    END;

    LOCAL PROCEDURE IncreaseItemInventoryWithBin@164(Bin@1000 : Record 7354;ItemNo@1001 : Code[20];Quantity@1002 : Integer;TrackingOption@1003 : Option) : Code[20];
    VAR
      ItemJournalLine@1004 : Record 83;
    BEGIN
      CreateItemJournalLineWithBin(ItemJournalLine,Bin,ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      LibraryVariableStorage.Enqueue(TrackingOption);
      PostOutputJournal(ItemJournalLine);
      EXIT(ItemJournalLine."Document No.");
    END;

    LOCAL PROCEDURE ModifyAndPostItemJournal@11(ItemJournalLine@1001 : Record 83;Bin@1000 : Record 7354);
    BEGIN
      ItemJournalLine.VALIDATE("Location Code",Bin."Location Code");
      ItemJournalLine.VALIDATE("Bin Code",Bin.Code);
      ItemJournalLine.MODIFY(TRUE);
      PostOutputJournal(ItemJournalLine);
    END;

    LOCAL PROCEDURE PostOutputJournal@32(ItemJournalLine@1000 : Record 83);
    BEGIN
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE PostPositiveAdjustmentWithExpiryTracking@251(Item@1000 : Record 27;LocationCode@1001 : Code[10];BinCode@1002 : Code[20]) : Code[20];
    VAR
      ItemJournalBatch@1003 : Record 233;
      ItemJournalLine@1004 : Record 83;
      ReservationEntry@1005 : Record 337;
      ItemJnlLineReserve@1007 : Codeunit 99000835;
      NoSeriesManagement@1008 : Codeunit 396;
      SerialNo@1006 : Code[20];
    BEGIN
      SelectAndClearItemJournalBatch(ItemJournalBatch,ItemJournalBatch."Template Type"::Item);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::"Positive Adjmt.",
        Item."No.",1);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);

      SerialNo := NoSeriesManagement.GetNextNo(Item."Serial Nos.",WORKDATE,FALSE);
      LibraryVariableStorage.Enqueue(TrackingOption::AssignSerialLot);  // Enqueue value for ItemTrackingLinesPageHandler.
      ItemJnlLineReserve.CallItemTracking(ItemJournalLine,FALSE);

      ReservationEntry.SETRANGE("Serial No.",SerialNo);
      ReservationEntry.FINDFIRST;
      ReservationEntry.VALIDATE("Expiration Date",CALCDATE('<+1M>',WORKDATE));
      ReservationEntry.MODIFY(TRUE);

      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      EXIT(SerialNo);
    END;

    LOCAL PROCEDURE PostPurchaseInvoiceWithTracking@321(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;QtyToInvoice@1002 : Decimal;QtyToInvoiceBase@1003 : Decimal);
    BEGIN
      PurchaseLine.VALIDATE("Qty. to Invoice",QtyToInvoice);
      PurchaseLine.MODIFY(TRUE);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      LibraryVariableStorage.Enqueue(TrackingOption::SetEntriesToInvoice);
      LibraryVariableStorage.Enqueue(PurchaseHeader."No.");
      LibraryVariableStorage.Enqueue(PurchaseLine."No.");
      LibraryVariableStorage.Enqueue(QtyToInvoiceBase);
      PurchaseLine.OpenItemTrackingLines;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
    END;

    LOCAL PROCEDURE PostSalesInvoiceWithTracking@319(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37;QtyToInvoice@1002 : Decimal;QtyToInvoiceBase@1003 : Decimal);
    BEGIN
      SalesLine.VALIDATE("Qty. to Invoice",QtyToInvoice);
      SalesLine.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(TrackingOption::SetEntriesToInvoice);
      LibraryVariableStorage.Enqueue(SalesHeader."No.");
      LibraryVariableStorage.Enqueue(SalesLine."No.");
      LibraryVariableStorage.Enqueue(QtyToInvoiceBase);
      SalesLine.OpenItemTrackingLines;
      LibrarySales.PostSalesDocument(SalesHeader,FALSE,TRUE);
    END;

    LOCAL PROCEDURE PostSalesShipmentWithTracking@312(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1005 : Record 37;SalesTrackingOption@1001 : Option;QtyToTrack@1002 : Decimal);
    BEGIN
      LibraryVariableStorage.Enqueue(SalesTrackingOption);
      LibraryVariableStorage.Enqueue(QtyToTrack);
      SalesLine.OpenItemTrackingLines;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE SelectAndClearItemJournalBatch@25(VAR ItemJournalBatch@1001 : Record 233;Type@1002 : Option);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,Type);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalBatch."Template Type"::Item,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE SetupLOTNoForLongChainPstdDocument@144(VAR ItemLedgerEntry@1004 : Record 32;VAR TransferLine@1001 : Record 5741;TrackingOption@1008 : Option;SNSpecific@1007 : Boolean;LotSpecific@1003 : Boolean);
    VAR
      Item@1005 : Record 27;
      Location@1012 : Record 14;
      PurchaseLine@1000 : Record 39;
      SalesLine@1002 : Record 37;
      TransferHeader@1013 : Record 5740;
    BEGIN
      // Setup: Create Purchase Order with Item Tracking and Post.
      Initialize;
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Item.GET(
        CreateTrackedItem(
          LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(SNSpecific,LotSpecific)));
      CreateAndPostPurchaseOrderWithIT(PurchaseLine,Item."No.",Location.Code,TrackingOption);

      // Create and Post Transfer Order and Sales Order.
      CreateTransferOrder(TransferLine,Location.Code,Item."No.",PurchaseLine.Quantity);
      TransferHeader.GET(TransferLine."Document No.");
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,TRUE);
      CreateAndPostSalesOrderWithIT(SalesLine,PurchaseLine."No.",TransferLine."Transfer-to Code",PurchaseLine.Quantity,FALSE);
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.");
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@56(VAR ItemJournalLine@1000 : Record 83);
    VAR
      TrackingOption@1002 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
    BEGIN
      // Create and post Item Journal Line with random Quantity, create and post Sales Order.
      CreateItemJournalLineWithIT(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",TrackingOption::AssignLotNo,
        CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode(FALSE,TRUE)),
        LibraryRandom.RandDec(10,2));
      PostOutputJournal(ItemJournalLine);
    END;

    LOCAL PROCEDURE SelectTrackingEntriesToInvoice@266();
    VAR
      TrackingSpec@1001 : Record 336;
      QueuedVariable@1007 : Variant;
      SourceID@1006 : Code[20];
      ItemNo@1005 : Code[20];
      I@1003 : Integer;
    BEGIN
      LibraryVariableStorage.Dequeue(QueuedVariable);
      SourceID := QueuedVariable;
      LibraryVariableStorage.Dequeue(QueuedVariable);
      ItemNo := QueuedVariable;

      WITH TrackingSpec DO BEGIN
        SETRANGE("Source ID",SourceID);
        SETRANGE("Item No.",ItemNo);
        MODIFYALL("Qty. to Invoice (Base)",0);
        SETRANGE("Quantity Invoiced (Base)",0);
        FINDSET(TRUE,FALSE);
        FOR I := 1 TO LibraryVariableStorage.DequeueInteger DO BEGIN
          VALIDATE("Qty. to Invoice (Base)","Quantity (Base)");
          MODIFY(TRUE);
          IF NEXT = 0 THEN
            EXIT;
        END;
      END;
    END;

    LOCAL PROCEDURE SetupLotTrackingItemJournalLineForChangeBin@132(VAR ItemJournalLine@1002 : Record 83;SignFactor@1009 : Integer;WhseTracking@1006 : Boolean;EntryType@1007 : Option;SetNoOption@1000 : Option) : Code[20];
    VAR
      Bin@1003 : ARRAY [2] OF Record 7354;
      ItemNo@1004 : Code[20];
      LotNo@1010 : ARRAY [2] OF Code[20];
      Qty@1011 : ARRAY [2] OF Integer;
    BEGIN
      // General Setup: Add Item in Bins with item tracking
      SetupLotTrackingEntryForChangeBin(Bin,ItemNo,LotNo,WhseTracking,Qty);

      // Create item journal line and add Lot No for tracking
      CreateItemJournalLineWithBin(ItemJournalLine,Bin[1],EntryType,ItemNo,SignFactor * Qty[1]);
      EnqueueVariablesForSetLotTrackingNo(LotNo,Qty,SignFactor,SetNoOption);
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      EXIT(Bin[2].Code);
    END;

    LOCAL PROCEDURE SetupLotTrackingJobJournalLineForChangeBin@113(VAR JobJournalLine@1002 : Record 210;SignFactor@1009 : Integer;WhseTracking@1006 : Boolean;SetNoOption@1007 : Option) : Code[20];
    VAR
      Bin@1003 : ARRAY [2] OF Record 7354;
      ItemNo@1004 : Code[20];
      LotNo@1001 : ARRAY [2] OF Code[20];
      Qty@1000 : ARRAY [2] OF Integer;
    BEGIN
      // General Setup: Add Item in Bins with item tracking
      SetupLotTrackingEntryForChangeBin(Bin,ItemNo,LotNo,WhseTracking,Qty);

      // Create job journal line and add Lot No for tracking
      CreateJobJournalLineWithBin(JobJournalLine,Bin[1],JobJournalLine.Type::Item,ItemNo,SignFactor * Qty[1]);
      EnqueueVariablesForSetLotTrackingNo(LotNo,Qty,SignFactor,SetNoOption);
      JobJournalLine.OpenItemTrackingLines(FALSE);
      EXIT(Bin[2].Code);
    END;

    LOCAL PROCEDURE SetupLotTrackingPurchaseLineForChangeBin@192(VAR PurchaseLine@1002 : Record 39;SignFactor@1009 : Integer;WhseTracking@1006 : Boolean;SetNoOption@1007 : Option) : Code[20];
    VAR
      Bin@1003 : ARRAY [2] OF Record 7354;
      ItemNo@1004 : Code[20];
      LotNo@1001 : ARRAY [2] OF Code[20];
      Qty@1000 : ARRAY [2] OF Integer;
    BEGIN
      // General Setup: Add Item in Bins with item tracking
      SetupLotTrackingEntryForChangeBin(Bin,ItemNo,LotNo,WhseTracking,Qty);

      // Create purchase line and add Lot No for tracking
      CreatePurchaseLineWithBin(PurchaseLine,Bin[1],ItemNo,SignFactor * Qty[1]);
      EnqueueVariablesForSetLotTrackingNo(LotNo,Qty,SignFactor,SetNoOption);
      PurchaseLine.OpenItemTrackingLines;
      EXIT(Bin[2].Code);
    END;

    LOCAL PROCEDURE SetupLotTrackingProdCompForChangeBin@218(VAR ProdOrderComp@1002 : Record 5407;SignFactor@1009 : Integer;WhseTracking@1006 : Boolean;SetNoOption@1007 : Option) : Code[20];
    VAR
      Bin@1003 : ARRAY [2] OF Record 7354;
      ItemNo@1004 : Code[20];
      LotNo@1001 : ARRAY [2] OF Code[20];
      Qty@1000 : ARRAY [2] OF Integer;
    BEGIN
      // General Setup: Add Item in Bins with item tracking
      SetupLotTrackingEntryForChangeBin(Bin,ItemNo,LotNo,WhseTracking,Qty);

      // Create Prod. Order Component line and add Lot No for tracking
      CreateProdOrderCompWithBin(ProdOrderComp,Bin[1],ItemNo,SignFactor * Qty[1]);
      EnqueueVariablesForSetLotTrackingNo(LotNo,Qty,SignFactor,SetNoOption);
      ProdOrderComp.OpenItemTrackingLines;
      EXIT(Bin[2].Code);
    END;

    LOCAL PROCEDURE SetupLotTrackingEntryForChangeBin@75(VAR Bin@1000 : ARRAY [2] OF Record 7354;VAR ItemNo@1007 : Code[20];VAR LotNo@1010 : ARRAY [2] OF Code[20];WhseTracking@1001 : Boolean;VAR Qty@1002 : ARRAY [2] OF Integer);
    VAR
      ItemJournalLine@1005 : Record 83;
      ItemTrackingCode@1004 : Record 6502;
      TrackingOption@1008 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,SetLotNoAndQty';
    BEGIN
      ItemTrackingCode.GET(CreateItemTrackingCode(FALSE,TRUE));
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",WhseTracking);
      ItemTrackingCode.MODIFY(TRUE);

      ItemNo := CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,ItemTrackingCode.Code);
      CreateLocationWithBin(Bin[1],ItemNo);
      LibraryWarehouse.CreateBin(Bin[2],Bin[1]."Location Code",LibraryUtility.GenerateGUID,'',''); // Use blank values for Unit Of Measure Code and Zone Code.

      Qty[1] := LibraryRandom.RandIntInRange(10,20);
      Qty[2] := LibraryRandom.RandInt(9);

      // Add Qty[1] of Item into Bin1 with Lot1 by clicking Assign Lot No.
      LotNo[1] := GetLotNoFromItemTrackingEntries(
          ItemNo,IncreaseItemInventoryWithBin(Bin[1],ItemNo,Qty[1],TrackingOption::AssignLotNo));

      // Add Qty[2] of Item into Bin2 with Lot1 by setting the Lot No. manually
      CreateItemJournalLineWithBin(ItemJournalLine,Bin[2],ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Qty[2]);
      SetLotNoAndQtyOnItemTrackingLine(LotNo[1],Qty[2]);
      PostOutputJournal(ItemJournalLine);

      // Add Qty[1]-Qty[2] of Item into Bin2 with Lot2 by clicking Assign Lot No.
      LotNo[2] := GetLotNoFromItemTrackingEntries(
          ItemNo,IncreaseItemInventoryWithBin(Bin[2],ItemNo,Qty[1] - Qty[2],TrackingOption::AssignLotNo));
    END;

    LOCAL PROCEDURE SetupSerialTrackingItemJournalLineForChangeBin@49(VAR ItemJournalLine@1002 : Record 83;SignFactor@1009 : Integer;WhseTracking@1006 : Boolean;EntryType@1007 : Option;SetNoOption@1005 : Option) : Code[20];
    VAR
      Bin@1003 : ARRAY [2] OF Record 7354;
      ItemJournalDocNo@1001 : ARRAY [2] OF Code[20];
      ItemNo@1004 : Code[20];
      Qty@1000 : Integer;
    BEGIN
      // General Setup: Add Item in Bins with item tracking
      SetupSerialTrackingEntryForChangeBin(Bin,ItemNo,ItemJournalDocNo,WhseTracking,Qty);

      // Create item journal line and add Serial No for tracking
      CreateItemJournalLineWithBin(ItemJournalLine,Bin[1],EntryType,ItemNo,SignFactor * Qty);
      EnqueueVariablesForSetSerialTrackingNo(ItemJournalDocNo,ItemNo,ItemJournalLine.Quantity,SignFactor,SetNoOption);
      ItemJournalLine.OpenItemTrackingLines(FALSE);
      EXIT(Bin[2].Code);
    END;

    LOCAL PROCEDURE SetupSerialTrackingJobJournalLineForChangeBin@163(VAR JobJournalLine@1002 : Record 210;SignFactor@1009 : Integer;WhseTracking@1006 : Boolean;SetNoOption@1001 : Option) : Code[20];
    VAR
      Bin@1003 : ARRAY [2] OF Record 7354;
      ItemJournalDocNo@1005 : ARRAY [2] OF Code[20];
      ItemNo@1004 : Code[20];
      Qty@1000 : Integer;
    BEGIN
      // General Setup: Add Item in Bins with item tracking
      SetupSerialTrackingEntryForChangeBin(Bin,ItemNo,ItemJournalDocNo,WhseTracking,Qty);

      // Create job journal line and add Serial No for tracking
      CreateJobJournalLineWithBin(JobJournalLine,Bin[1],JobJournalLine.Type::Item,ItemNo,SignFactor * Qty);
      EnqueueVariablesForSetSerialTrackingNo(ItemJournalDocNo,ItemNo,JobJournalLine.Quantity,SignFactor,SetNoOption);
      JobJournalLine.OpenItemTrackingLines(FALSE);
      EXIT(Bin[2].Code);
    END;

    LOCAL PROCEDURE SetupSerialTrackingPurchaseLineForChangeBin@161(VAR PurchaseLine@1002 : Record 39;SignFactor@1009 : Integer;WhseTracking@1006 : Boolean;SetNoOption@1001 : Option) : Code[20];
    VAR
      Bin@1003 : ARRAY [2] OF Record 7354;
      ItemJournalDocNo@1005 : ARRAY [2] OF Code[20];
      ItemNo@1004 : Code[20];
      Qty@1000 : Integer;
    BEGIN
      // General Setup: Add Item in Bins with item tracking
      SetupSerialTrackingEntryForChangeBin(Bin,ItemNo,ItemJournalDocNo,WhseTracking,Qty);

      // Create purchase line and add Serial No for tracking
      CreatePurchaseLineWithBin(PurchaseLine,Bin[1],ItemNo,SignFactor * Qty);
      EnqueueVariablesForSetSerialTrackingNo(ItemJournalDocNo,ItemNo,PurchaseLine.Quantity,SignFactor,SetNoOption);
      PurchaseLine.OpenItemTrackingLines;
      EXIT(Bin[2].Code);
    END;

    LOCAL PROCEDURE SetupSerialTrackingProdCompForChangeBin@160(VAR ProdOrderComp@1002 : Record 5407;SignFactor@1009 : Integer;WhseTracking@1006 : Boolean;SetNoOption@1001 : Option) : Code[20];
    VAR
      Bin@1003 : ARRAY [2] OF Record 7354;
      ItemJournalDocNo@1005 : ARRAY [2] OF Code[20];
      ItemNo@1004 : Code[20];
      Qty@1000 : Integer;
    BEGIN
      // General Setup: Add Item in Bins with item tracking
      SetupSerialTrackingEntryForChangeBin(Bin,ItemNo,ItemJournalDocNo,WhseTracking,Qty);

      // Create Prod. Order component and add Serial No for tracking
      CreateProdOrderCompWithBin(ProdOrderComp,Bin[1],ItemNo,SignFactor * Qty);
      EnqueueVariablesForSetSerialTrackingNo(ItemJournalDocNo,ItemNo,ProdOrderComp.Quantity,SignFactor,SetNoOption);
      ProdOrderComp.OpenItemTrackingLines;
      EXIT(Bin[2].Code);
    END;

    LOCAL PROCEDURE SetupSerialTrackingEntryForChangeBin@79(VAR Bin@1000 : ARRAY [2] OF Record 7354;VAR ItemNo@1007 : Code[20];VAR ItemJournalDocNo@1003 : ARRAY [2] OF Code[20];WhseTracking@1001 : Boolean;VAR Qty@1002 : Integer);
    VAR
      ItemTrackingCode@1004 : Record 6502;
      TrackingOption@1008 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,SetLotNoAndQty';
    BEGIN
      ItemTrackingCode.GET(CreateItemTrackingCode(TRUE,FALSE));
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",WhseTracking);
      ItemTrackingCode.MODIFY(TRUE);

      ItemNo := CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,ItemTrackingCode.Code);
      CreateLocationWithBin(Bin[1],ItemNo);
      LibraryWarehouse.CreateBin(Bin[2],Bin[1]."Location Code",LibraryUtility.GenerateGUID,'','');  // Use blank values for Unit Of Measure Code and Zone Code.

      Qty := LibraryRandom.RandInt(10);

      // Add Qty of Item into Bin[1] with serial code
      ItemJournalDocNo[1] := IncreaseItemInventoryWithBin(Bin[1],ItemNo,Qty,TrackingOption::AssignSerialLot);

      // Add Qty of Item into Bin[2] with new serial code
      ItemJournalDocNo[2] := IncreaseItemInventoryWithBin(Bin[2],ItemNo,Qty,TrackingOption::AssignSerialLot);
    END;

    LOCAL PROCEDURE SetupTrackingEntryForSalesAndPurchase@17(VAR ItemLedgerEntry@1000 : Record 32;TrackingOption@1007 : Option;SNSpecific@1006 : Boolean;LotSpecific@1004 : Boolean);
    VAR
      Item@1001 : Record 27;
      PurchaseLine@1002 : Record 39;
      SalesLine@1003 : Record 37;
    BEGIN
      Item.GET(
        CreateTrackedItem(
          LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(SNSpecific,LotSpecific)));
      CreateAndPostPurchaseOrderWithIT(PurchaseLine,Item."No.",'',TrackingOption);
      CreateAndPostSalesOrderWithIT(SalesLine,PurchaseLine."No.",'',PurchaseLine.Quantity,FALSE);
      FindItemLedgerEntry(ItemLedgerEntry,Item."No.");
    END;

    LOCAL PROCEDURE SetupLongChainWithTransferAndLot@72(VAR ItemLedgerEntry@1004 : Record 32;CostingMethod@1003 : Option);
    VAR
      Item@1005 : Record 27;
      Location@1012 : Record 14;
      PurchaseLine@1000 : Record 39;
      SalesLine@1002 : Record 37;
      TransferHeader@1013 : Record 5740;
      TransferLine@1001 : Record 5741;
      TransferLine1@1009 : Record 5741;
      TrackingOption@1006 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
      TransferQty@1007 : Decimal;
      SalesOrderQty@1008 : Decimal;
    BEGIN
      // Setup: Create Purchase Order with Item Tracking and Post.
      Initialize;
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Item.GET(CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,'',CreateItemTrackingCode(FALSE,TRUE)));
      Item.VALIDATE("Costing Method",CostingMethod);
      Item.MODIFY(TRUE);
      CreateAndPostPurchaseOrderWithIT(PurchaseLine,Item."No.",Location.Code,TrackingOption::AssignLotNo);

      // Create and Post Transfer Order Location A -> Location B.
      TransferQty := LibraryRandom.RandIntInRange(PurchaseLine.Quantity - 10,PurchaseLine.Quantity);
      CreateTransferOrder(TransferLine,Location.Code,Item."No.",TransferQty);
      TransferHeader.GET(TransferLine."Document No.");
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,TRUE);

      // Create and Post Transfer Order Location B -> Location A.
      CreateAndPostTransferOrderWithIT(
        TransferLine,TransferLine."Transfer-to Code",TransferLine."Transfer-from Code",TransferLine."In-Transit Code",Item."No.",
        LibraryRandom.RandIntInRange(TransferQty - 10,TransferQty - 1));

      // Create and Post Transfer Order Location A -> Location B.
      CreateAndPostTransferOrderWithIT(
        TransferLine1,Location.Code,TransferLine."Transfer-from Code",TransferLine."In-Transit Code",Item."No.",
        LibraryRandom.RandIntInRange(TransferLine.Quantity - 10,TransferLine.Quantity - 1));

      // Post SO with IT.
      SalesOrderQty := LibraryRandom.RandInt(TransferQty - TransferLine.Quantity);
      CreateAndPostSalesOrderWithIT(SalesLine,PurchaseLine."No.",TransferLine."Transfer-from Code",SalesOrderQty,FALSE);
      CreateAndPostSalesOrderWithIT(
        SalesLine,PurchaseLine."No.",TransferLine."Transfer-from Code",
        TransferQty - TransferLine.Quantity + TransferLine1.Quantity - SalesOrderQty,FALSE);

      FindItemLedgerEntry(ItemLedgerEntry,Item."No.");
    END;

    LOCAL PROCEDURE SetupProdChainWithSN@59(VAR CompItemLedgerEntry@1004 : Record 32;VAR SubItemLedgerEntry@1003 : Record 32;VAR TopItemLedgerEntry@1008 : Record 32);
    VAR
      Item@1005 : Record 27;
      Item1@1001 : Record 27;
      Item2@1009 : Record 27;
      PurchaseLine@1000 : Record 39;
      ProductionOrder@1010 : Record 5405;
      TrackingOption@1006 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo,SetQuantity';
    BEGIN
      // Setup: Create BOM structure 2 levels deep.
      Initialize;
      Item.GET(
        CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(TRUE,TRUE)));
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.MODIFY(TRUE);

      Item1.GET(
        CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(TRUE,TRUE)));
      Item1.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item1.MODIFY(TRUE);
      CreateProdBOMWithOneComp(Item,Item1);

      Item2.GET(
        CreateTrackedItem(LibraryUtility.GetGlobalNoSeriesCode,LibraryUtility.GetGlobalNoSeriesCode,CreateItemTrackingCode(TRUE,TRUE)));
      CreateProdBOMWithOneComp(Item1,Item2);

      // Purchase component with IT.
      CreateAndPostPurchaseOrderWithIT(PurchaseLine,Item2."No.",'',TrackingOption::AssignSerialLot);

      // Create Released Production Orders and Post Output for first 2 levels.
      CreateAndRefreshProductionOrderWithIT(
        ProductionOrder,ProductionOrder.Status::Released,Item1."No.",PurchaseLine.Quantity DIV 10,TrackingOption::AssignSerialLot);
      CreateAndPostConsumptionJournal(ProductionOrder."No.");
      CreateAndPostOutputJournal(ProductionOrder."No.");

      CreateAndRefreshProductionOrderWithIT(
        ProductionOrder,ProductionOrder.Status::Released,Item."No.",PurchaseLine.Quantity DIV 10,TrackingOption::AssignSerialLot);
      CreateAndPostConsumptionJournal(ProductionOrder."No.");
      CreateAndPostOutputJournal(ProductionOrder."No.");

      FindItemLedgerEntry(CompItemLedgerEntry,Item2."No.");
      FindItemLedgerEntry(SubItemLedgerEntry,Item1."No.");
      FindItemLedgerEntry(TopItemLedgerEntry,Item."No.");
    END;

    LOCAL PROCEDURE SetLotNoAndQtyOnItemTrackingLine@153(LotNo@1001 : Code[20];Qty@1002 : Integer);
    VAR
      TrackingOption@1003 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,SetLotNoAndQty';
    BEGIN
      LibraryVariableStorage.Enqueue(TrackingOption::SetLotNoAndQty);
      LibraryVariableStorage.Enqueue(1); // Enqueue the line count
      LibraryVariableStorage.Enqueue(LotNo);
      LibraryVariableStorage.Enqueue(Qty);
    END;

    LOCAL PROCEDURE SetPurchaseLineQtyToReceive@271(VAR PurchaseLine@1000 : Record 39;QtyToReceive@1001 : Decimal);
    BEGIN
      PurchaseLine.VALIDATE("Qty. to Receive",QtyToReceive);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetSalesLineQtyToShip@301(VAR SalesLine@1000 : Record 37;QtyToShip@1001 : Decimal);
    BEGIN
      SalesLine.VALIDATE("Qty. to Ship",QtyToShip);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetSerialNosAndQtyOnItemTrackingLine@136(SerialNos@1001 : ARRAY [10] OF Code[20];Qty@1002 : Integer;Count@1006 : Integer);
    VAR
      Qtys@1004 : ARRAY [10] OF Integer;
      I@1005 : Integer;
      TrackingOption@1003 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,SetLotNoAndQty,SetSerialNoAndQty';
    BEGIN
      FOR I := 1 TO Count DO
        Qtys[I] := Qty;
      SetNoAndQtyOnItemTrackingLines(SerialNos,Qtys,Count,TrackingOption::SetSerialNoAndQty);
    END;

    LOCAL PROCEDURE SetNoAndQtyOnItemTrackingLines@118(No@1001 : ARRAY [10] OF Code[20];Qty@1002 : ARRAY [10] OF Integer;Count@1006 : Integer;TrackingOption@1005 : Option);
    VAR
      I@1003 : Integer;
    BEGIN
      LibraryVariableStorage.Enqueue(TrackingOption);
      LibraryVariableStorage.Enqueue(Count); // Enqueue the line count
      FOR I := 1 TO Count DO BEGIN
        LibraryVariableStorage.Enqueue(No[I]);
        LibraryVariableStorage.Enqueue(Qty[I]);
      END;
    END;

    LOCAL PROCEDURE SetTrackingNoAndQty@101(ItemTrackingLines@1007 : TestPage 6510;TrackingOption@1000 : Option);
    VAR
      Count@1006 : Variant;
      No@1005 : Variant;
      Quantity@1003 : Variant;
      I@1004 : Integer;
      Count2@1002 : Integer;
      OptionString@1001 : 'AssignSerialLot,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,SetLotNoAndQty,SetSerialNoAndQty';
    BEGIN
      LibraryVariableStorage.Dequeue(Count);
      Count2 := Count;
      FOR I := 1 TO Count2 DO BEGIN
        LibraryVariableStorage.Dequeue(No);
        LibraryVariableStorage.Dequeue(Quantity);
        CASE TrackingOption OF
          OptionString::SetLotNoAndQty:
            ItemTrackingLines."Lot No.".SETVALUE(No);
          OptionString::SetSerialNoAndQty:
            ItemTrackingLines."Serial No.".SETVALUE(No);
        END;
        ItemTrackingLines."Quantity (Base)".SETVALUE(Quantity);
        ItemTrackingLines.NEXT;
      END;
    END;

    LOCAL PROCEDURE SelectApplyToItemEntry@267(ItemTrackingLines@1007 : TestPage 6510);
    VAR
      ItemLedgEntry@1000 : Record 32;
      EntryNo@1006 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(EntryNo);
      ItemLedgEntry.GET(EntryNo);
      ItemTrackingLines."Lot No.".SETVALUE(ItemLedgEntry."Lot No.");
      ItemTrackingLines."Quantity (Base)".SETVALUE(ItemLedgEntry.Quantity);
      ItemTrackingLines."Appl.-to Item Entry".SETVALUE(EntryNo);
    END;

    LOCAL PROCEDURE SalesHeaderCopySalesDoc@234(VAR SalesHeader@1000 : Record 36;DocType@1001 : Option;DocNo@1002 : Code[20];IncludeHeader@1003 : Boolean;RecalcLines@1004 : Boolean);
    VAR
      CopySalesDocument@1005 : Report 292;
    BEGIN
      CopySalesDocument.SetSalesHeader(SalesHeader);
      CopySalesDocument.InitializeRequest(DocType,DocNo,IncludeHeader,RecalcLines);
      CopySalesDocument.USEREQUESTPAGE(FALSE);
      CopySalesDocument.RUN;
    END;

    LOCAL PROCEDURE PurchaseHeaderCopyPurchDoc@235(VAR PurchHeader@1000 : Record 38;DocType@1001 : Option;DocNo@1002 : Code[20];IncludeHeader@1003 : Boolean;RecalcLines@1004 : Boolean);
    VAR
      CopyPurchDocument@1005 : Report 492;
    BEGIN
      CopyPurchDocument.SetPurchHeader(PurchHeader);
      CopyPurchDocument.InitializeRequest(DocType,DocNo,IncludeHeader,RecalcLines);
      CopyPurchDocument.USEREQUESTPAGE(FALSE);
      CopyPurchDocument.RUN;
    END;

    LOCAL PROCEDURE OpenItemTracingPage@28(VAR ItemTracing@1003 : TestPage 6520;ItemNoFilter@1004 : Code[20];SerialNoFilter@1005 : Code[20];LotNoFilter@1000 : Code[20];TraceMethod@1001 : Option);
    VAR
      ShowComponents@1002 : 'No,Item-tracked Only,All';
    BEGIN
      ItemTracing.OPENEDIT;
      ItemTracing.ItemNoFilter.SETVALUE(ItemNoFilter);
      ItemTracing.SerialNoFilter.SETVALUE(SerialNoFilter);
      ItemTracing.LotNoFilter.SETVALUE(LotNoFilter);
      ItemTracing.TraceMethod.SETVALUE(TraceMethod);
      ItemTracing.ShowComponents.SETVALUE(ShowComponents::All);
      ItemTracing.Trace.INVOKE;
    END;

    LOCAL PROCEDURE UpdateItem@60(Item@1000 : Record 27;ProductionBOMHeaderNo@1003 : Code[20];RoutingHeaderNo@1002 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMHeaderNo);
      Item.VALIDATE("Routing No.",RoutingHeaderNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityOnItemTrackingLines@80(VAR TransferLine@1000 : Record 5741;Quantity@1001 : Decimal);
    VAR
      TrackingOption@1003 : 'AssignSerialNo,AssignLotNo,SelectEntries,SetLotNo,SetQuantity,AssignSerialLot';
      Direction@1002 : 'Outbound,Inbound';
    BEGIN
      LibraryVariableStorage.Enqueue(TrackingOption::SetQuantity);  // Enqueue value for ItemTrackingLinesPageHandler.
      LibraryVariableStorage.Enqueue(Quantity);
      TransferLine.OpenItemTrackingLines(Direction::Outbound);
    END;

    LOCAL PROCEDURE UpdateGeneralPostingSetup@1021(PurchaseLine@1000 : Record 39);
    VAR
      GLAccount@1001 : Record 15;
      GeneralPostingSetup@1002 : Record 252;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);
      GeneralPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      IF GeneralPostingSetup."Purch. Account" = '' THEN BEGIN
        GeneralPostingSetup.VALIDATE("Purch. Account",GLAccount."No.");
        GeneralPostingSetup.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@208(ExactCostReversingMandatory@1001 : Boolean) OldExactCostReversingMandatory : Boolean;
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      OldExactCostReversingMandatory := SalesReceivablesSetup."Exact Cost Reversing Mandatory";
      SalesReceivablesSetup.VALIDATE("Exact Cost Reversing Mandatory",ExactCostReversingMandatory);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchasesPayablesSetup@237(ExactCostReversingMandatory@1000 : Boolean) OldExactCostReversingMandatory : Boolean;
    VAR
      PurchasesPayablesSetup@1001 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      OldExactCostReversingMandatory := PurchasesPayablesSetup."Exact Cost Reversing Mandatory";
      PurchasesPayablesSetup.VALIDATE("Exact Cost Reversing Mandatory",ExactCostReversingMandatory);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchHeader@240(VAR PurchHeader@1000 : Record 38);
    BEGIN
      PurchHeader.VALIDATE("Vendor Cr. Memo No.",LibraryUtility.GenerateGUID);
      PurchHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyPostedSalesCreditMemo@187(No@1005 : Code[20];Quantity@1002 : Decimal);
    VAR
      SalesCrMemoLine@1004 : Record 115;
    BEGIN
      SalesCrMemoLine.SETRANGE("No.",No);
      SalesCrMemoLine.FINDFIRST;
      Assert.AreEqual(Quantity,SalesCrMemoLine.Quantity,QuantityErr);
    END;

    LOCAL PROCEDURE VerifyPostedTransferReceipt@296(ItemNo@1005 : Code[20]);
    VAR
      TransferReceiptLine@1004 : Record 5747;
    BEGIN
      TransferReceiptLine.SETRANGE("Item No.",ItemNo);
      Assert.IsFalse(TransferReceiptLine.ISEMPTY,TransferReceiptLineNotExistsErr);
    END;

    LOCAL PROCEDURE VerifyInvoicedQtyOnPurchRcptLine@273(ItemNo@1001 : Code[20]);
    VAR
      PurchRcptLine@1000 : Record 121;
    BEGIN
      WITH PurchRcptLine DO BEGIN
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ItemNo);
        FINDSET;
        REPEAT
          Assert.AreEqual(Quantity,"Quantity Invoiced",STRSUBSTNO(WrongInvoicedQtyErr,TABLECAPTION));
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyInvoicedQtyOnSalesShptLine@303(ItemNo@1001 : Code[20]);
    VAR
      SalesShipmentLine@1000 : Record 111;
    BEGIN
      WITH SalesShipmentLine DO BEGIN
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ItemNo);
        FINDSET;
        REPEAT
          Assert.AreEqual(Quantity,"Quantity Invoiced",STRSUBSTNO(WrongInvoicedQtyErr,TABLECAPTION));
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@65(ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];EntryType@1004 : Option;Quantity@1003 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Entry Type",EntryType);
      ItemLedgerEntry.SETRANGE("Location Code",LocationCode);
      FindItemLedgerEntry(ItemLedgerEntry,ItemNo);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyItemTracingLine@3(ItemTracing@1000 : TestPage 6520;Description@1001 : Text[1000];SerialNo@1002 : Code[20];LotNo@1003 : Code[20];ItemNo@1004 : Code[20];LocationCode@1006 : Code[10];Quantity@1005 : Decimal);
    BEGIN
      Assert.IsTrue(STRPOS(ItemTracing.Description.VALUE,Description) > 0,DescriptionError);
      ItemTracing."Serial No.".ASSERTEQUALS(SerialNo);
      ItemTracing."Lot No.".ASSERTEQUALS(LotNo);
      ItemTracing."Item No.".ASSERTEQUALS(ItemNo);
      ItemTracing.Quantity.ASSERTEQUALS(Quantity);
      ItemTracing."Location Code".ASSERTEQUALS(LocationCode);
    END;

    LOCAL PROCEDURE VerifyNextItemTracingLine@64(ItemTracing@1000 : TestPage 6520;Description@1001 : Text[1000];SerialNo@1002 : Code[20];LotNo@1003 : Code[20];ItemNo@1004 : Code[20];LocationCode@1006 : Code[10];Quantity@1005 : Decimal);
    BEGIN
      ItemTracing.EXPAND(TRUE);
      ItemTracing.NEXT;
      VerifyItemTracingLine(ItemTracing,Description,SerialNo,LotNo,ItemNo,LocationCode,Quantity);
    END;

    LOCAL PROCEDURE VerifyItemTracingLinesForLongChain@341(VAR ItemLedgerEntry@1001 : Record 32;ItemTracing@1000 : TestPage 6520;IsFirstLevel@1004 : Boolean);
    BEGIN
      ItemTracing.EXPAND(TRUE);

      IF ItemLedgerEntry.FINDSET THEN
        REPEAT
          IF IsFirstLevel THEN
            VerifySingleItemTracingLine(ItemTracing,ItemLedgerEntry,1)
          ELSE
            VerifySingleItemTracingLine(ItemTracing,ItemLedgerEntry,GetApplications(ItemLedgerEntry))
        UNTIL ItemLedgerEntry.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifySingleItemTracingLine@108(ItemTracing@1000 : TestPage 6520;ItemLedgerEntry@1001 : Record 32;ExpCount@1003 : Integer);
    VAR
      ActCount@1002 : Integer;
    BEGIN
      ActCount := 0;
      ItemTracing.FILTER.SETFILTER(Description,'*' + ItemLedgerEntry."Document No." + '*');
      ItemTracing.FILTER.SETFILTER("Serial No.",ItemLedgerEntry."Serial No.");
      ItemTracing.FILTER.SETFILTER("Lot No.",ItemLedgerEntry."Lot No.");
      ItemTracing.FILTER.SETFILTER("Item No.",ItemLedgerEntry."Item No.");
      ItemTracing.FILTER.SETFILTER("Location Code",ItemLedgerEntry."Location Code");
      ItemTracing.FILTER.SETFILTER(Quantity,FORMAT(ItemLedgerEntry.Quantity));

      IF ItemTracing.FIRST THEN
        ActCount := 1;

      WHILE ItemTracing.NEXT DO BEGIN
        ActCount += 1;
        ItemTracing."Already Traced".ASSERTEQUALS(TRUE); // If there are multiple occurences of the same inbound, the subsequent ones should be already traced.
      END;

      Assert.AreEqual(ExpCount,ActCount,'Unexpected no. of tracing entries for ILE ' + FORMAT(ItemLedgerEntry."Entry No."))
    END;

    LOCAL PROCEDURE VerifyAlreadyTraced@16(ItemTracing@1000 : TestPage 6520);
    VAR
      Description@1002 : Text;
    BEGIN
      ItemTracing.EXPAND(TRUE);
      ItemTracing.FIRST;

      WHILE ItemTracing.NEXT DO
        IF ItemTracing."Already Traced".ASBOOLEAN THEN BEGIN
          Description := FORMAT(ItemTracing.Description);
          ItemTracing."Go to Already-Traced History".INVOKE;
          ItemTracing."Already Traced".ASSERTEQUALS(FALSE);
          ItemTracing.Description.ASSERTEQUALS(Description);
          EXIT;
        END;
    END;

    LOCAL PROCEDURE VerifyQtyOnPurchaseLine@238(PurchHeaderNo@1000 : Code[20];ItemNo@1001 : Code[20];Qty@1002 : Decimal);
    VAR
      PurchLine@1003 : Record 39;
    BEGIN
      FindPurchLine(PurchLine,PurchHeaderNo,ItemNo);
      Assert.AreEqual(Qty,PurchLine.Quantity,QuantityErr);
    END;

    LOCAL PROCEDURE VerifyQtyOnSalesLine@239(SalesHeaderNo@1000 : Code[20];ItemNo@1001 : Code[20];Qty@1002 : Decimal);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,SalesHeaderNo,ItemNo);
      Assert.AreEqual(Qty,SalesLine.Quantity,QuantityErr);
    END;

    LOCAL PROCEDURE VerifyQtyPerUoMOnReservation@286(DocumentType@1001 : Option;DocumentNo@1002 : Code[20];ExpectedQtyPerUoM@1003 : Decimal);
    VAR
      ReservEntry@1000 : Record 337;
    BEGIN
      ReservEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
      ReservEntry.SETRANGE("Source Subtype",DocumentType);
      ReservEntry.SETRANGE("Source ID",DocumentNo);
      ReservEntry.FINDSET;
      REPEAT
        Assert.AreEqual(
          ExpectedQtyPerUoM,ReservEntry."Qty. per Unit of Measure",
          STRSUBSTNO(WrongFieldValueErr,ReservEntry.FIELDCAPTION("Qty. per Unit of Measure"),ReservEntry.TABLECAPTION));
      UNTIL ReservEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE GetApplications@48(ItemLedgerEntry@1000 : Record 32) : Integer;
    VAR
      ItemApplicationEntry@1001 : Record 339;
    BEGIN
      ItemApplicationEntry.RESET;
      IF ItemLedgerEntry.Positive THEN BEGIN
        ItemApplicationEntry.SETRANGE("Inbound Item Entry No.",ItemLedgerEntry."Entry No.");
        ItemApplicationEntry.SETFILTER("Outbound Item Entry No.",'<>%1',0);
      END ELSE
        ItemApplicationEntry.SETRANGE("Outbound Item Entry No.",ItemLedgerEntry."Entry No.");

      ItemApplicationEntry.SETRANGE("Transferred-from Entry No.",0);
      EXIT(ItemApplicationEntry.COUNT);
    END;

    LOCAL PROCEDURE SetApplFromToItemEntry@276(VAR ReservationEntry@1003 : Record 337;SetPositive@1002 : Boolean);
    BEGIN
      WITH ReservationEntry DO BEGIN
        Positive := SetPositive;
        "Appl.-to Item Entry" := 1;
        "Appl.-from Item Entry" := 1;
      END;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@167(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@4(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      Quantity@1001 : Variant;
      TrackingOptionValue@1006 : Option;
    BEGIN
      TrackingOptionValue := LibraryVariableStorage.DequeueInteger;
      CASE TrackingOptionValue OF
        TrackingOption::AssignLotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
        TrackingOption::AssignSerialLot:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        TrackingOption::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
        TrackingOption::SetQuantity:
          BEGIN
            LibraryVariableStorage.Dequeue(Quantity);
            ItemTrackingLines."Quantity (Base)".SETVALUE(Quantity);
          END;
        TrackingOption::SetLotNoAndQty,TrackingOption::SetSerialNoAndQty:
          SetTrackingNoAndQty(ItemTrackingLines,TrackingOptionValue);
        TrackingOption::SelectAndApplyToItemEntry:
          SelectApplyToItemEntry(ItemTrackingLines);
        TrackingOption::SetEntriesToInvoice:
          SelectTrackingEntriesToInvoice;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@98(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreatePageHandler@29(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.CreateNewLotNo.SETVALUE(TRUE);
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreatePageHandlerFalse@116(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.CreateNewLotNo.SETVALUE(FALSE);
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedSalesDocumentLinesPageHandler@100(VAR PostedSalesDocumentLines@1000 : TestPage 5850);
    VAR
      DocumentNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNo);
      PostedSalesDocumentLines.PostedInvoices.FILTER.SETFILTER("Document No.",DocumentNo);
      PostedSalesDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedPurchaseDocumentLinesPageHandler@58(VAR PostedPurchaseDocumentLines@1000 : TestPage 5855);
    VAR
      DocumentNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DocumentNo);
      PostedPurchaseDocumentLines.PostedInvoices.FILTER.SETFILTER("Document No.",DocumentNo);
      PostedPurchaseDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE JobJournalTemplateListHandler@114(VAR JobJournalTemplateList@1000 : TestPage 275);
    VAR
      Name@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Name);
      JobJournalTemplateList.FILTER.SETFILTER(Name,Name);
      JobJournalTemplateList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationHandler@124(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Auto Reserve".INVOKE;
      Reservation.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@243(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreateChangeQtyPageHandler@272(VAR EnterQtyToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQtyToCreate.QtyToCreate.SETVALUE(LibraryVariableStorage.DequeueDecimal);
      EnterQtyToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummarySelectEntriesPageHandler@300(VAR ItemTrackingSummaryPage@1000 : TestPage 6500);
    VAR
      I@1001 : Integer;
      TotalQtyToAssign@1002 : Integer;
    BEGIN
      ItemTrackingSummaryPage.FIRST;
      TotalQtyToAssign := LibraryVariableStorage.DequeueInteger;
      REPEAT
        I += 1;
        ItemTrackingSummaryPage."Selected Quantity".SETVALUE(I <= TotalQtyToAssign);
      UNTIL NOT ItemTrackingSummaryPage.NEXT;

      ItemTrackingSummaryPage.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Item Tracking] [SCM]
      Test Cases for Reservation:
        1. Verify Item Tracing Line using Trace Method Forward (Origin -> Usage) with Item Tracking for Posted Purchase Document.
        2. Verify Item Tracing Line using Trace Method Backward (Usage -> Origin) with Item Tracking for Posted Purchase Document.
        3. Verify Item Tracing Line using Trace Method Forward (Origin -> Usage) with Item Tracking for Posted Sales Document.
        4. Verify Item Tracing Line using Trace Method Backward (Usage -> Origin) with Item Tracking for Posted Sales Document.
        5. Verify Item Tracing Line using Trace Method Forward (Origin -> Usage) with Item Tracking for Long Chain Posted Documents (Purchase Order,Transfer Order,Sales Order).
        6. Verify Item Tracing Line using Trace Method Forward (Usage -> Origin) with Item Tracking for Long Chain Posted Documents (Purchase Order,Transfer Order,Sales Order).
        7. Verify Item Tracing Opposite from Line using Trace Method with Item Tracking for Posted Purchase Document.
        8. Verify Item Tracing Line using Trace Method Forward with Item Tracking for Released Production Order.
        9. Verify Item Tracing Line using Trace Method with Item Tracking for Reclass Journal.
       10. Verify Item Tracing Line using Trace Method Backward with Item Tracking for Positive Adjustment from Item Journal.
       11. Verify Item Tracing Line using Trace Method Forward with Item Tracking for Positive Adjustment from Item Journal.
       12. Verify Item Tracing Line using Trace Method Backward with Item Tracking for Negative Adjustment from Item Journal.
       13. Verify Item Tracing Line using Trace Method Forward with Item Tracking for Negative Adjustment from Item Journal.
       14. Verify Item Ledger Entry for Posted Output Journal with Released Production Order.
       15. Verify Item Ledger Entry after posting Transfer Order as Ship for an Item with Item Tracking when Quantity updated multiple times for a Lot No.
       16. Added all above 1-13 Scenarios for Serial No.
       17. Verify error while posting Sales Return Order with less Quantity as compared to quantity for same Lot No. using Get Posted Document Line to Reverse.
       18. Verify error while posting Sales Credit Memo with less Quantity as compared to quantity for same Lot No. using Get Posted Document Line to Reverse.
       19. Verify error while posting Purchase Return Order with less Quantity as compared to quantity for same Lot No. using Get Posted Document Line to Reverse.
       20. Verify error while posting Purchase Credit Memo with less Quantity as compared to quantity for same Lot No. using Get Posted Document Line to Reverse.
       21. Verify error on Item Journal Line after changing the bin code when item tracking exists, whse. tracking of tracking code is true, items are going out,
           and the new Bin has no enough quantity for the Lot No
       22. Verify no error on Item Journal Line after changing the bin code when item tracking exists, whse. tracking of tracking code is false, items are going out,
           and the new Bin has no enough quantity for the Lot No
       23. Verify no error on Item Journal Line after changing the bin code when item tracking exists, whse. tracking of tracking code is true, items are going in,
           and the new Bin has no enough quantity for the Lot No
       24. Verify no error on Item Journal Line after changing the bin code when item tracking exists, whse. tracking of tracking code is true, item is going out,
           and the new Bin has enough quantity for the Lot No
       25. Verify no error on Item Journal Line after changing the bin code when item tracking exists, whse. tracking of tracking code is false, item is going out,
           and the new Bin has enough quantity for the Lot No
       26. Verify no error on Item Journal Line after changing the bin code when item tracking exists, whse. tracking of tracking code is true, item is going in,
           and the new Bin has enough quantity for the Lot No
       27. Verify error on Item Journal Line after changing the bin code when item tracking exists, whse. tracking of tracking code is true, item is going out,
           and there is availability warning for the Lot No in the new Bin.
       28. Verify no error on Item Journal Line after changing the bin code when item tracking exists, whse. tracking of tracking code is false, item is going out,
           and there is availability warning for the Lot No in the new Bin.
       29. Verify no error on Item Journal Line after changing the bin code when item tracking exists, whse. tracking of tracking code is false, item is going in,
           and there is availability warning for the Lot No in the new Bin.
       30. Verify no error on Item Journal Line after changing the bin code when item tracking exists, whse. tracking of tracking code is true, items are going out,
           and the new Bin Code is blank
       31. Added all above 21-29 Scenarios for Serial No.
       32. Added scenarios 21-29, 31 for Job Journal, Purchase Line, Prod. Order Components
       33. Verify Sales Return Ordercan be post after creating a reservation from a Purchase Return Order.
       34. Test that Sales Order can copy document from posted Credit Memo correctly when 'Exact Cost Reversing Mandatory' is enabled.
       35. Test that Purchase Order can copy document from posted Credit Memo correctly when 'Exact Cost Reversing Mandatory' is enabled.
       36. Verify that warehouse pick created from sales shipment gets first expiring item if location is set to process picks according to FEFO.
       37. Verify that transfer order can be received when Item Tracking is applied to Item Ledger Entry.
       38. "Appl.-to Item Entry" zeroed after call to 'ClearApplFromToItemEntry' for positive Reservation Entry.
       39. "Appl.-from Item Entry" zeroed after call to 'ClearApplFromToItemEntry' for negative Reservation Entry.

      Covers Test cases: for WI - 304889
       --------------------------------------------------------------------------------------------------------------------------------------------
       Test Function Name                                                                                                                    TFS ID
       --------------------------------------------------------------------------------------------------------------------------------------------
      LOTNoPstdPurchDocumentWithOriginUsage, LOTNoPstdPurchDocumentWithUsageOriginLOTNo,PstdSalesDocumentWithUsageOrigin
      LOTNoPstdSalesDocumentWithOriginUsage,LOTNoForLongChainPstdDocumentWithOriginUsage,LOTNoForLongChainPstdDocumentWithUsageOrigin
      TraceOppositeFromLineForPstdPurchDocument,LOTNoForRlsdProdOrder,LOTNoForReclassJouranl,LOTNoForPositiveAdjmtJouranlWithUsageOrigin
      LOTNoForPositiveAdjmtJouranlWithOriginUsage,LOTNoForNegativeAdjmtJouranlWithUsageOrigin,
      LOTNoForNegativeAdjmtJouranlWithOriginUsage                                                                                      129253

      Covers Test cases: for WI - 308984
       --------------------------------------------------------------------------------------------------------------------------------------------
       Test Function Name                                                                                                                    TFS ID
       --------------------------------------------------------------------------------------------------------------------------------------------
      PostOutputJournalWithReleasedProductionOrder                                                                                           143070

      Covers Test cases: for WI - 309086
       --------------------------------------------------------------------------------------------------------------------------------------------
       Test Function Name                                                                                                                    TFS ID
       --------------------------------------------------------------------------------------------------------------------------------------------
      ILEAfterUpdateQtyMultipleTimes                                                                                                         245870

      Covers Test cases: for WI - 304889
       --------------------------------------------------------------------------------------------------------------------------------------------
       Test Function Name                                                                                                                    TFS ID
       --------------------------------------------------------------------------------------------------------------------------------------------
      SlNoPstdPurchDocumentWithOriginUsage,SlNoPstdPurchDocumentWithUsageOrigin,SlNoPstdSalesDocumentWithUsageOrigin
      SlNoPstdSalesDocumentWithOriginUsage,SlNoForLongChainPstdDocumentWithOriginUsage,SlNoForLongChainPstdDocumentWithUsageOrigin
      TraceOppositeFromLineForPstdPurchDocumentSlNo,SlNoForRlsdProdOrder,SlNoForReclassJouranl,SlNoForPositiveAdjmtJouranlWithUsageOrigin
      SlNoForPositiveAdjmtJouranlWithOriginUsage,SlNoForNegativeAdjmtJouranlWithUsageOrigin                                                  129254
      SlNoForNegativeAdjmtJouranlWithOriginUsage

      Covers Test cases: for WI - 311601
       --------------------------------------------------------------------------------------------------------------------------------------------
       Test Function Name                                                                                                                    TFS ID
       --------------------------------------------------------------------------------------------------------------------------------------------
      SalesReturnOrderWithLessQtyError, SalesCreditMemoWithLessQtyQtyError
      PurchReturnOrderWithLessQtyQtyError, PurchCreditMemoWithLessQtyQtyError                                                                253832

      Covers Test cases: for CodeDefect - 335728
       --------------------------------------------------------------------------------------------------------------------------------------------
       Test Function Name                                                                                                                    TFS ID
       --------------------------------------------------------------------------------------------------------------------------------------------
      ChangeBinWithLotITOnItemJournalTC1,ChangeBinWithLotITOnItemJournalTC2,ChangeBinWithLotITOnItemJournalTC3
      ChangeBinWithLotITOnItemJournalTC4,ChangeBinWithLotITOnItemJournalTC5,ChangeBinWithLotITOnItemJournalTC6
      ChangeBinWithLotITOnItemJournalTC7,ChangeBinWithLotITOnItemJournalTC8,ChangeBinWithLotITOnItemJournalTC9
      ChangeBinWithLotITOnItemJournalTC10

      ChangeBinWithSerialITOnItemJournalTC1,ChangeBinWithSerialITOnItemJournalTC2,ChangeBinWithSerialITOnItemJournalTC3
      ChangeBinWithSerialITOnItemJournalTC4,ChangeBinWithSerialITOnItemJournalTC5,ChangeBinWithSerialITOnItemJournalTC6
      ChangeBinWithSerialITOnItemJournalTC7,ChangeBinWithSerialITOnItemJournalTC8,ChangeBinWithSerialITOnItemJournalTC9

      ChangeBinWithLotITOnJobJournalTC1,ChangeBinWithLotITOnJobJournalTC2,ChangeBinWithLotITOnJobJournalTC3
      ChangeBinWithLotITOnJobJournalTC4,ChangeBinWithLotITOnJobJournalTC5,ChangeBinWithLotITOnJobJournalTC6
      ChangeBinWithLotITOnJobJournalTC7,ChangeBinWithLotITOnJobJournalTC8,ChangeBinWithLotITOnJobJournalTC9

      ChangeBinWithSerialITOnJobJournalTC1,ChangeBinWithSerialITOnJobJournalTC2,ChangeBinWithSerialITOnJobJournalTC3
      ChangeBinWithSerialITOnJobJournalTC4,ChangeBinWithSerialITOnJobJournalTC5,ChangeBinWithSerialITOnJobJournalTC6
      ChangeBinWithSerialITOnJobJournalTC7,ChangeBinWithSerialITOnJobJournalTC8,ChangeBinWithSerialITOnJobJournalTC9

      ChangeBinWithLotITOnPurchLineTC1,ChangeBinWithLotITOnPurchLineTC2,ChangeBinWithLotITOnPurchLineTC3
      ChangeBinWithLotITOnPurchLineTC4,ChangeBinWithLotITOnPurchLineTC5,ChangeBinWithLotITOnPurchLineTC6
      ChangeBinWithLotITOnPurchLineTC7,ChangeBinWithLotITOnPurchLineTC8,ChangeBinWithLotITOnPurchLineTC9

      ChangeBinWithSerialITOnPurchLineTC1,ChangeBinWithSerialITOnPurchLineTC2,ChangeBinWithSerialITOnPurchLineTC3
      ChangeBinWithSerialITOnPurchLineTC4,ChangeBinWithSerialITOnPurchLineTC5,ChangeBinWithSerialITOnPurchLineTC6
      ChangeBinWithSerialITOnPurchLineTC7,ChangeBinWithSerialITOnPurchLineTC8,ChangeBinWithSerialITOnPurchLineTC9

      ChangeBinWithLotITOnProdOrderCompTC1,ChangeBinWithLotITOnProdOrderCompTC2,ChangeBinWithLotITOnProdOrderCompTC3
      ChangeBinWithLotITOnProdOrderCompTC4,ChangeBinWithLotITOnProdOrderCompTC5,ChangeBinWithLotITOnProdOrderCompTC6
      ChangeBinWithLotITOnProdOrderCompTC7,ChangeBinWithLotITOnProdOrderCompTC8,ChangeBinWithLotITOnProdOrderCompTC9

      ChangeBinWithSerialITOnProdOrderCompTC1,ChangeBinWithSerialITOnProdOrderCompTC2,ChangeBinWithSerialITOnProdOrderCompTC3
      ChangeBinWithSerialITOnProdOrderCompTC4,ChangeBinWithSerialITOnProdOrderCompTC5,ChangeBinWithSerialITOnProdOrderCompTC6
      ChangeBinWithSerialITOnProdOrderCompTC7,ChangeBinWithSerialITOnProdOrderCompTC8,ChangeBinWithSerialITOnProdOrderCompTC9

      Covers Test cases: for merge bug - 97312
      -----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      -----------------------------------------------------------------------------------------------------
      PostSalesReturnOrderWithReserveFromPurchaseReturnOrder                                        97312

       Covers Test cases: for WI - 97426
       -----------------------------------------------------------------------------------------------------
       Test Function Name                                                                            TFS ID
       -----------------------------------------------------------------------------------------------------
       SalesCopyDocumentWithItemTracking,PurchCopyDocumentWithItemTracking                           97426
       PickExpiringItemFromFEFOLocation                                                              358286

       Covers Test cases: for WI - 361832
       -----------------------------------------------------------------------------------------------------
       Test Function Name                                                                            TFS ID
       -----------------------------------------------------------------------------------------------------
       TransferOrderWithItemTrackingApplication                                                      122220
       UTPositiveClearApplItemEntry                                                                  122220
       UTNegativeClearApplItemEntry                                                                  122220
    }
    END.
  }
}

