OBJECT Codeunit 137306 SCM Costing Reports
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1000 : Codeunit 132201;
      LibraryCosting@1001 : Codeunit 132200;
      LibraryRandom@1002 : Codeunit 130440;
      LibraryPurchase@1003 : Codeunit 130512;
      Assert@1006 : Codeunit 130000;
      LibraryUtility@1005 : Codeunit 131000;
      LibraryService@1007 : Codeunit 131902;
      LibraryVariableStorage@1008 : Codeunit 131004;
      LibraryReportDataset@1010 : Codeunit 131007;
      isInitialized@1004 : Boolean;
      ExpectedMsg@1012 : TextConst 'ENU=Expected Cost Posting to G/L has been changed';
      ExpectedConfirm@1011 : TextConst 'ENU=If you change the Expected Cost Posting to G/L';
      OLD@1009 : TextConst 'ENU=OLD';

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler)]
    PROCEDURE AutoCostPostFalseAndAdjustCost@37();
    BEGIN
      Initialize;
      AdjustCostItemEntries(FALSE,FALSE);  // Automatic Cost Posting, Expected Cost Posting To GL.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandler)]
    PROCEDURE AutoCostPostTrueAndAdjustCost@39();
    BEGIN
      Initialize;
      AdjustCostItemEntries(TRUE,TRUE);    // Automatic Cost Posting - TRUE, Expected Cost Posting To GL will be TRUE later.
    END;

    [Test]
    [HandlerFunctions(ItemAgeCompositionValueRequestPageHandler)]
    PROCEDURE ItemAgeCompositionAverageDifferentPeriods@7();
    VAR
      Item@1000 : Record 27;
      ItemJournalTemplate@1001 : Record 82;
      ItemJournalBatch@1002 : Record 233;
      ItemJournalLine@1003 : Record 83;
      UnitCost@1004 : ARRAY [2] OF Decimal;
    BEGIN
      // [FEATURE] [Item Age Composition - Value]
      // [SCENARIO 381639] For an item with "Average" costing method, report "Item Age Composition - Value" should calculate average cost amount in each period separately

      Initialize;

      // [GIVEN] Item with "Average" costing method
      CreateItem(Item,Item."Costing Method"::Average);

      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);

      // [GIVEN] Post item inventory on workdate with cost amount = "C1", another entry on workdate + 1 month, cost amount = "C2"
      UnitCost[1] := LibraryRandom.RandDecInRange(100,500,2);
      UnitCost[2] := LibraryRandom.RandDecInRange(100,500,2);
      PostItemJournalLine(
        ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLine."Entry Type"::"Positive Adjmt.",
        Item."No.",1,UnitCost[1],WORKDATE);
      PostItemJournalLine(
        ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLine."Entry Type"::"Positive Adjmt.",
        Item."No.",1,UnitCost[2],CALCDATE('<1M>',WORKDATE));

      // [WHEN] Run report "Item Age Composition - Value" with ending date = workdate and period length = "1M"
      RunItemAgeCompositionReport(WORKDATE,'1M',Item);

      // [THEN] Inventory value on workdate is "C1", inventory value in the period after workdate is "C2"
      VerifyItemAgeComposition(Item."No.",UnitCost[1],UnitCost[2]);
    END;

    [Test]
    [HandlerFunctions(ItemAgeCompositionValueRequestPageHandler)]
    PROCEDURE ItemAgeCompositionAverageOnePeriod@9();
    VAR
      Item@1000 : Record 27;
      ItemJournalTemplate@1001 : Record 82;
      ItemJournalBatch@1002 : Record 233;
      ItemJournalLine@1003 : Record 83;
      UnitCost@1004 : ARRAY [2] OF Decimal;
      I@1005 : Integer;
    BEGIN
      // [FEATURE] [Item Age Composition - Value]
      // [SCENARIO 381639] For an item with "Average" costing method, report "Item Age Composition - Value" should valuate inventory by average cost amount

      Initialize;

      // [GIVEN] Item with "Average" costing method
      CreateItem(Item,Item."Costing Method"::Average);

      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);

      // [GIVEN] Post two item ledger entries on workdate with cost amount = "C1"and "C2"
      FOR I := 1 TO 2 DO BEGIN
        UnitCost[I] := LibraryRandom.RandDecInRange(100,500,2);
        PostItemJournalLine(
          ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLine."Entry Type"::"Positive Adjmt.",
          Item."No.",1,UnitCost[I],WORKDATE);
      END;

      // [GIVEN] Post negative adjustment, quantity = 1. Remaining quantity on inventory is 1.
      PostItemJournalLine(
        ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLine."Entry Type"::"Negative Adjmt.",Item."No.",1,0,WORKDATE);

      // [GIVEN] Run "Adjust Cost - Item Entries"
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // [WHEN] Run report "Item Age Composition - Value" with ending date = workdate and period length = "1M"
      COMMIT;
      RunItemAgeCompositionReport(WORKDATE,'1M',Item);

      // [THEN] Inventory value on workdate is ("C1" + "C2") / 2
      VerifyItemAgeComposition(Item."No.",(UnitCost[1] + UnitCost[2]) / 2,0);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;
      PostInventoryCostGL(OLD,WORKDATE);  // Run for Old Record.
      NoSeriesSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AdjustCostItemEntries@139(AutomaticCostPosting@1028 : Boolean;ExpectedCostPostingToGLLater@1027 : Boolean);
    VAR
      PurchaseHeader@1007 : Record 38;
      PurchaseHeader2@1014 : Record 38;
      PurchaseHeader3@1012 : Record 38;
      SalesReceivablesSetup@1004 : Record 311;
      InventorySetup@1003 : Record 313;
      Item@1001 : Record 27;
      NewPostingDate@1002 : Date;
      UnitCost@1022 : Decimal;
      Quantity@1000 : Decimal;
      DirectUnitCost@1005 : Decimal;
      QuantityToReceive@1006 : Decimal;
      SalesQuantity@1011 : Decimal;
      ItemChargeUnitCost@1009 : Decimal;
      TotalInventoryCost@1020 : Decimal;
      PostedPurchInvoiceNo@1010 : Code[20];
      PostedPurchInvoiceNo2@1021 : Code[20];
      PostedPurchInvoiceNo3@1023 : Code[20];
      ServiceInvoiceNo@1024 : Code[20];
    BEGIN
      // Setup : Update Sales Setup and Inventory Setup, Create Item, Post Two Purchase Orders.
      SalesReceivablesSetup.GET;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Credit Warnings"::"No Warning",FALSE);
      InventorySetup.GET;
      UpdateInventorySetup(InventorySetup."Average Cost Calc. Type"::Item,AutomaticCostPosting,FALSE);  // Expected Cost Posting is FALSE.

      DirectUnitCost := LibraryRandom.RandDec(100,2);
      QuantityToReceive := LibraryRandom.RandIntInRange(10,20);
      Quantity := QuantityToReceive + LibraryRandom.RandInt(10);
      ItemChargeUnitCost := LibraryRandom.RandDec(10,2);
      NewPostingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(2) + 2) + 'D>',WORKDATE);  // Random date required for later postings.

      CreateItem(Item,Item."Costing Method"::Average);
      PostedPurchInvoiceNo := CreatePurchaseOrderAndPost(PurchaseHeader,Item."No.",WORKDATE,Quantity,QuantityToReceive,DirectUnitCost);
      PostedPurchInvoiceNo2 :=
        CreatePurchaseOrderAndPost(PurchaseHeader2,Item."No.",NewPostingDate,Quantity,QuantityToReceive,DirectUnitCost);  // Random date required.

      // Calculating Inventory Quantity.
      Item.GET(Item."No.");
      Item.CALCFIELDS(Inventory);

      // Post Service Order.
      SalesQuantity := LibraryRandom.RandInt(QuantityToReceive);
      ServiceInvoiceNo := CreateServiceOrderAndPost(Item."No.",NewPostingDate,SalesQuantity,TRUE,TRUE);

      // Post Charge Item.
      PostedPurchInvoiceNo3 :=
        CreateAndPostChargeItemPO(PurchaseHeader3,PurchaseHeader2."No.",Item."No.",NewPostingDate,ItemChargeUnitCost);

      UnitCost := (2 * QuantityToReceive * DirectUnitCost + ItemChargeUnitCost) / Item.Inventory;
      Item.CALCFIELDS(Inventory);
      TotalInventoryCost := Item.Inventory * UnitCost;

      // Exercise : Run Adjust Cost - Item Entries Batch Report
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      IF ExpectedCostPostingToGLLater THEN
        UpdateExpectedCostOnInvSetup(TRUE);

      // Verify : Check That Unit Cost is equal to Unit Cost on Item.
      VerifyUnitCost(Item."No.",UnitCost);

      // Exercise : Run Post Inventory Cost to G/L for the different dates.
      PostInventoryCostGL(Item."No.",WORKDATE);
      PostInventoryCostGL(Item."No.",NewPostingDate);

      // Verify : Check G/L Entry Created After Run Post Inventory To G/L Report.
      VerifyInventoryCostOnGL(
        TotalInventoryCost,Item,PostedPurchInvoiceNo,PostedPurchInvoiceNo2,PostedPurchInvoiceNo3,ServiceInvoiceNo);

      // Teardown.
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Credit Warnings",SalesReceivablesSetup."Stockout Warning");
      UpdateInventorySetup(
        InventorySetup."Average Cost Calc. Type",InventorySetup."Automatic Cost Posting",
        InventorySetup."Expected Cost Posting to G/L");
    END;

    LOCAL PROCEDURE NoSeriesSetup@2();
    VAR
      PurchasesPayablesSetup@1005 : Record 312;
      SalesSetup@1004 : Record 311;
    BEGIN
      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);

      LibraryService.SetupServiceMgtNoSeries;
    END;

    LOCAL PROCEDURE UpdateInventorySetup@1(AverageCostCalcType@1003 : Option;AutomaticCostPosting@1001 : Boolean;ExpectedCostPostingToGL@1002 : Boolean);
    VAR
      InventorySetup@1004 : Record 313;
    BEGIN
      // This function sometimes triggers a message and a confirm dialog,
      // ExecuteUIHandlers is to make sure the corresponding handlers are always executed.
      // (otherwise tests would fail)
      ExecuteUIHandlers;

      InventorySetup.GET;
      InventorySetup.VALIDATE("Automatic Cost Posting",AutomaticCostPosting);
      InventorySetup.VALIDATE("Expected Cost Posting to G/L",ExpectedCostPostingToGL);
      InventorySetup.VALIDATE("Average Cost Calc. Type",AverageCostCalcType);
      InventorySetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExpectedCostOnInvSetup@11(ExpectedCostPostingToGL@1001 : Boolean);
    VAR
      InventorySetup@1000 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Expected Cost Posting to G/L",ExpectedCostPostingToGL);
      InventorySetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@26(CreditWarnings@1000 : Option;StockoutWarning@1001 : Boolean);
    VAR
      SalesReceivablesSetup@1002 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Credit Warnings",CreditWarnings);
      SalesReceivablesSetup.VALIDATE("Stockout Warning",StockoutWarning);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@27(VAR Item@1000 : Record 27;CostingMethod@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Costing Method",CostingMethod);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceOrderAndPost@84(ItemNo@1006 : Code[20];PostingDate@1000 : Date;Quantity@1004 : Decimal;Ship@1008 : Boolean;Invoice@1009 : Boolean) ServiceInvoiceNo : Code[20];
    VAR
      ServiceMgtSetup@1007 : Record 5911;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1001 : Record 5902;
      ServiceItem@1005 : Record 5940;
      ServiceItemLine@1003 : Record 5901;
      NoSeriesManagement@1010 : Codeunit 396;
    BEGIN
      CreateServiceOrder(ServiceHeader,ServiceItemLine,ServiceItem);
      ServiceHeader.VALIDATE("Posting Date",PostingDate);
      ServiceHeader.MODIFY(TRUE);
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceItem."No.",ItemNo,Quantity);

      ServiceMgtSetup.GET;
      ServiceInvoiceNo := NoSeriesManagement.GetNextNo(ServiceMgtSetup."Posted Service Invoice Nos.",WORKDATE,FALSE);
      LibraryService.PostServiceOrder(ServiceHeader,Ship,FALSE,Invoice);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderAndPost@70(VAR PurchaseHeader@1001 : Record 38;ItemNo@1006 : Code[20];DocumentDate@1002 : Date;Quantity@1003 : Decimal;QuantityToReceive@1005 : Decimal;DirectUnitCost@1004 : Decimal) PostedPurchInvoiceNo : Code[20];
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,DocumentDate);

      // Receive Quantity is less than Purchase Order Quantity.
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,ItemNo,Quantity,QuantityToReceive,DirectUnitCost);
      PostedPurchInvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE PostInventoryCostGL@44(ItemNo@1002 : Code[20];PostingDate@1001 : Date);
    BEGIN
      LibraryCosting.PostInvtCostToGL(TRUE,PostingDate,ItemNo);
    END;

    LOCAL PROCEDURE CreateAndPostChargeItemPO@16(VAR PurchaseHeader@1003 : Record 38;PurchaseOdrerNo@1004 : Code[20];ItemNo@1005 : Code[20];DocumentDate@1001 : Date;ItemChargeUnitCost@1000 : Decimal) PostedPurchInvoiceNo : Code[20];
    VAR
      PurchaseLine@1006 : Record 39;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,DocumentDate);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",LibraryInventory.CreateItemChargeNo,1);  // creating a single item charge.
      PurchaseLine.VALIDATE("Direct Unit Cost",ItemChargeUnitCost);
      PurchaseLine.MODIFY(TRUE);
      CreateItemChargeAssignment(PurchaseLine,PurchaseOdrerNo,ItemNo);
      PostedPurchInvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@24(VAR PurchaseHeader@1000 : Record 38;DocumentDate@1002 : Date);
    BEGIN
      CLEAR(PurchaseHeader);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      PurchaseHeader.VALIDATE(
        "Vendor Invoice No.",
        LibraryUtility.GenerateRandomCode(PurchaseHeader.FIELDNO("Vendor Invoice No."),DATABASE::"Purchase Header"));
      PurchaseHeader.VALIDATE("Document Date",DocumentDate);
      PurchaseHeader.VALIDATE("Posting Date",DocumentDate);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@3(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38;ItemNo@1006 : Code[20];Quantity@1004 : Decimal;QuantityToReceiveAndInvoice@1002 : Decimal;DirectUnitCost@1003 : Decimal);
    BEGIN
      CLEAR(PurchaseLine);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Qty. to Invoice",QuantityToReceiveAndInvoice);
      PurchaseLine.VALIDATE("Qty. to Receive",QuantityToReceiveAndInvoice);
      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLine@12(VAR ServiceLine@1000 : Record 5902;ServiceHeader@1001 : Record 5900;ServiceItemNo@1002 : Code[20];ItemNo@1006 : Code[20];Quantity@1004 : Decimal);
    BEGIN
      CLEAR(ServiceLine);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
      ServiceLine.VALIDATE("Service Item No.",ServiceItemNo);
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.VALIDATE("Qty. to Invoice",Quantity);
      ServiceLine.VALIDATE("Qty. to Ship",Quantity);
      ServiceLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2) + 10);  // Value required.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceOrder@71(VAR ServiceHeader@1001 : Record 5900;VAR ServiceItemLine@1002 : Record 5901;VAR ServiceItem@1004 : Record 5940);
    BEGIN
      // Create Service Order - Service Item, Service Header, Service Line with Type as Item.
      LibraryService.CreateServiceItem(ServiceItem,'');
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateItemChargeAssignment@15(VAR PurchaseLine@1005 : Record 39;PurchaseOrderNo@1003 : Code[20];ItemNo@1004 : Code[20]);
    VAR
      ItemChargeAssignmentPurch@1001 : Record 5805;
      PurchRcptLine@1000 : Record 121;
    BEGIN
      FindPurchaseReceiptLine(PurchRcptLine,PurchaseOrderNo,ItemNo);
      LibraryInventory.CreateItemChargeAssignPurchase(
        ItemChargeAssignmentPurch,PurchaseLine,ItemChargeAssignmentPurch."Applies-to Doc. Type"::Receipt,PurchRcptLine."Document No.",
        PurchRcptLine."Line No.",PurchRcptLine."No.");
    END;

    LOCAL PROCEDURE FindInventoryPostingSetup@8(VAR InventoryPostingSetup@1001 : Record 5813;InventoryPostingGroup@1000 : Code[10]);
    BEGIN
      InventoryPostingSetup.SETRANGE("Location Code",'');
      InventoryPostingSetup.SETRANGE("Invt. Posting Group Code",InventoryPostingGroup);
      InventoryPostingSetup.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseReceiptLine@14(VAR PurchRcptLine@1000 : Record 121;PurchaseOrderNo@1003 : Code[20];ItemNo@1004 : Code[20]);
    BEGIN
      PurchRcptLine.SETRANGE("Order No.",PurchaseOrderNo);
      PurchRcptLine.SETRANGE("No.",ItemNo);
      PurchRcptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE PostItemJournalLine@19(ItemJnlTemplateName@1001 : Code[10];ItemJnlBatchName@1002 : Code[10];EntryType@1003 : Option;ItemNo@1004 : Code[20];Qty@1005 : Decimal;UnitAmount@1007 : Decimal;PostingDate@1006 : Date);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalLine(ItemJournalLine,ItemJnlTemplateName,ItemJnlBatchName,EntryType,ItemNo,Qty);
      ItemJournalLine.VALIDATE("Posting Date",PostingDate);
      ItemJournalLine.VALIDATE("Unit Amount",UnitAmount);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJnlTemplateName,ItemJnlBatchName);
    END;

    LOCAL PROCEDURE RunItemAgeCompositionReport@41(EndingDate@1000 : Date;PeriodLength@1001 : Text;VAR Item@1002 : Record 27);
    BEGIN
      LibraryVariableStorage.Enqueue(EndingDate);
      LibraryVariableStorage.Enqueue(PeriodLength);
      Item.SETRECFILTER;
      REPORT.RUN(REPORT::"Item Age Composition - Value",TRUE,FALSE,Item);
    END;

    LOCAL PROCEDURE VerifyInventoryCostOnGL@30(ExpectedAmount@1009 : Decimal;Item@1000 : Record 27;DocumentNo@1001 : Code[20];DocumentNo2@1002 : Code[20];DocumentNo3@1003 : Code[20];DocumentNo4@1004 : Code[20]);
    VAR
      GeneralLedgerSetup@1010 : Record 98;
      InventoryPostingSetup@1006 : Record 5813;
      GLEntry@1007 : Record 17;
      ActualAmount@1008 : Decimal;
    BEGIN
      FindInventoryPostingSetup(InventoryPostingSetup,Item."Inventory Posting Group");
      GLEntry.SETFILTER(
        "Document No.",'%1|%2|%3|%4|%5',Item."No.",DocumentNo,DocumentNo2,DocumentNo3,DocumentNo4);
      GLEntry.SETRANGE("G/L Account No.",InventoryPostingSetup."Inventory Account");
      GLEntry.FINDSET;
      REPEAT
        ActualAmount := ActualAmount + GLEntry.Amount ;
      UNTIL GLEntry.NEXT = 0;

      GeneralLedgerSetup.GET;

      Assert.AreNearlyEqual(ExpectedAmount,ActualAmount,GeneralLedgerSetup."Inv. Rounding Precision (LCY)",
        'Wrong Inventory value. Item:' + Item."No.");
    END;

    LOCAL PROCEDURE VerifyItemAgeComposition@43(ItemNo@1000 : Code[20];CurrPeriodInvtValue@1001 : Decimal;NextPeriodInvtValue@1002 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Item',ItemNo);
      LibraryReportDataset.GetNextRow;

      LibraryReportDataset.AssertCurrentRowValue('InvtValueRTC4',CurrPeriodInvtValue);
      LibraryReportDataset.AssertCurrentRowValue('InvtValueRTC5',NextPeriodInvtValue);
      LibraryReportDataset.AssertCurrentRowValue('TotalInvtValueRTC',CurrPeriodInvtValue + NextPeriodInvtValue);

      LibraryReportDataset.AssertCurrentRowValue('InvtValue4_Item',CurrPeriodInvtValue);
      LibraryReportDataset.AssertCurrentRowValue('InvtValue5_Item',NextPeriodInvtValue);
      LibraryReportDataset.AssertCurrentRowValue('TotalInvtValue_Item',CurrPeriodInvtValue + NextPeriodInvtValue);
    END;

    LOCAL PROCEDURE VerifyUnitCost@10(ItemNo@1000 : Code[20];UnitCost@1003 : Decimal);
    VAR
      Item@1001 : Record 27;
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      Item.GET(ItemNo);
      GeneralLedgerSetup.GET;
      Assert.AreNearlyEqual(UnitCost,Item."Unit Cost",GeneralLedgerSetup."Inv. Rounding Precision (LCY)",
        'Wrong Unit cost. Item:' + ItemNo);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@36(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(
        STRPOS(ConfirmMessage,'If you change the Expected Cost Posting to G/L') > 0,'Unexpected confirm dialog: ' + ConfirmMessage);

      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@5(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(
        (STRPOS(Message,'The field Automatic Cost Posting ') > 0 ) OR
        (STRPOS(Message,'Expected Cost Posting to G/L has been changed') > 0 ),'Unexpected Message dialog: ' + Message);
    END;

    [RequestPageHandler]
    PROCEDURE ItemAgeCompositionValueRequestPageHandler@17(VAR ItemAgeCompositionValue@1000 : TestRequestPage 5808);
    BEGIN
      ItemAgeCompositionValue.EndingDate.SETVALUE(LibraryVariableStorage.DequeueDate);
      ItemAgeCompositionValue.PeriodLength.SETVALUE(LibraryVariableStorage.DequeueText);
      ItemAgeCompositionValue.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    LOCAL PROCEDURE ExecuteUIHandlers@13();
    BEGIN
      MESSAGE(STRSUBSTNO(ExpectedMsg));
      IF CONFIRM(STRSUBSTNO(ExpectedConfirm)) THEN ;
    END;

    BEGIN
    {
      // [FEATURE] [Adjust Cost Item Entries] [SCM]
      Unsupported version tags:
      MX: Unable to Execute
      GB: Unable to Execute
      IT: Unable to Execute
      ES: Unable to Execute

      Test Inventory Costing Reports.
       1. Check Unit Cost is equal to Unit Cost on Item after Run Adjust Cost - Item Entries Batch Report, And Check G/L Entry Created
          After Run Post Inventory To G/L Report when Automatic And Expected cost posting to G/L Both are set to FALSE.
       2. Check Unit Cost is equal to Unit Cost on Item after Run Adjust Cost - Item Entries Batch Report, And Check G/L Entry Created
          After Run Post Inventory To G/L Report when Automatic cost posting set to True And Expected cost posting to G/L are set to
          TRUE Later.

        Covers Test Cases for WI - 242298
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        AutoCostPostFalseAndAdjustCost                   128094
        AutoCostPostTrueAndAdjustCost                    128094
    }
    END.
  }
}

