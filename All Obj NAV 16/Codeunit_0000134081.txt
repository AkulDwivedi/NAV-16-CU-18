OBJECT Codeunit 134081 ERM Adjust Exch. Rate Vendor
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryERM@1004 : Codeunit 131300;
      LibraryRandom@1001 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      AmountErrorMessage@1008 : TextConst 'ENU="%1 must be %2 in \\%3 %4=%5."';

    [Test]
    PROCEDURE AdjustExchRateWithHigherValue@5();
    VAR
      DetailedVendorLedgEntry@1001 : Record 380;
    BEGIN
      // Test Adjust Exchange Rate batch job after modifying Higher Exchange Rate and verify Unrealized Loss entry created
      // in Detailed Vendor Ledger Entry.
      Initialize;
      AdjustExchRateForVendor(LibraryRandom.RandInt(50),DetailedVendorLedgEntry."Entry Type"::"Unrealized Loss");
    END;

    [Test]
    PROCEDURE AdjustExchRateWithLowerValue@3();
    VAR
      DetailedVendorLedgEntry@1001 : Record 380;
    BEGIN
      // Check that Adjust Exchange Rate batch job after Modify Higher Exchange Rate and verify Unrealized Gain entry created
      // in Detailed Vendor Ledger Entry.
      Initialize;
      AdjustExchRateForVendor(-LibraryRandom.RandInt(50),DetailedVendorLedgEntry."Entry Type"::"Unrealized Gain");
    END;

    LOCAL PROCEDURE AdjustExchRateForVendor@4(ExchRateAmount@1005 : Decimal;EntryType@1006 : Option);
    VAR
      GenJournalLine@1004 : Record 81;
      CurrencyExchangeRate@1002 : Record 330;
      Amount@1000 : Decimal;
    BEGIN
      // Setup: Create and Post General Journal Line and Modify Exchange Rate.
      CreateGeneralJnlLine(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      UpdateExchangeRate(CurrencyExchangeRate,GenJournalLine."Currency Code",ExchRateAmount);
      Amount :=
        GenJournalLine."Amount (LCY)" -
        (GenJournalLine.Amount * CurrencyExchangeRate."Relational Exch. Rate Amount" / CurrencyExchangeRate."Exchange Rate Amount");

      // Exercise: Run Adjust Exchange Rate Batch Job and calculate Realized Gain/Loss Amount.
      RunAdjustExchangeRate(GenJournalLine."Currency Code",GenJournalLine."Document No.");

      // Verify: Verify Detailed Ledger Entry for Unrealized Loss/Gain entry.
      VerifyDetailedVendorEntry(GenJournalLine."Document No.",GenJournalLine."Currency Code",-Amount,EntryType);
    END;

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateGeneralJnlLine@2(VAR GenJournalLine@1004 : Record 81);
    VAR
      GenJournalBatch@1002 : Record 232;
    BEGIN
      // Using Random value for Invoice Amount.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Vendor,CreateVendor,-LibraryRandom.RandInt(1000));
    END;

    LOCAL PROCEDURE CreateCurrency@27() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateVendor@1() : Code[20];
    VAR
      Vendor@1001 : Record 23;
      LibraryPurchase@1000 : Codeunit 130512;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CreateCurrency);
      Vendor.MODIFY;
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE RunAdjustExchangeRate@6(CurrencyCode@1000 : Code[10];DocumentNo@1001 : Code[20]);
    VAR
      Currency@1002 : Record 4;
      AdjustExchangeRates@1003 : Report 595;
    BEGIN
      Currency.SETRANGE(Code,CurrencyCode);
      AdjustExchangeRates.SETTABLEVIEW(Currency);
      AdjustExchangeRates.InitializeRequest2(0D,WORKDATE,'Test',WORKDATE,DocumentNo,TRUE,FALSE);
      AdjustExchangeRates.USEREQUESTPAGE(FALSE);
      AdjustExchangeRates.RUN;
    END;

    LOCAL PROCEDURE UpdateExchangeRate@7(VAR CurrencyExchangeRate@1000 : Record 330;CurrencyCode@1001 : Code[10];ExchRateAmount@1002 : Decimal);
    BEGIN
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      CurrencyExchangeRate.VALIDATE(
        "Relational Exch. Rate Amount",CurrencyExchangeRate."Relational Exch. Rate Amount" + ExchRateAmount);
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyDetailedVendorEntry@26(DocumentNo@1003 : Code[20];CurrencyCode@1004 : Code[10];Amount@1001 : Decimal;EntryType@1005 : Option);
    VAR
      Currency@1002 : Record 4;
      DetailedVendorLedgEntry@1000 : Record 380;
    BEGIN
      Currency.GET(CurrencyCode);
      DetailedVendorLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedVendorLedgEntry.SETRANGE("Entry Type",EntryType);
      DetailedVendorLedgEntry.FINDFIRST;
      DetailedVendorLedgEntry.TESTFIELD("Ledger Entry Amount",TRUE);
      Assert.AreNearlyEqual(
        Amount,DetailedVendorLedgEntry."Amount (LCY)",Currency."Amount Rounding Precision",STRSUBSTNO(AmountErrorMessage,
          DetailedVendorLedgEntry.FIELDCAPTION("Amount (LCY)"),Amount,DetailedVendorLedgEntry.TABLECAPTION,
          DetailedVendorLedgEntry.FIELDCAPTION("Entry No."),DetailedVendorLedgEntry."Entry No."));
    END;

    BEGIN
    {
      // [FEATURE] [Adjust Exchange Rate] [Detailed Ledger Entry] [Purchase]
      Unsupported version tags:
      ES: Unable to Execute
      DE: Unable to Execute
      CH: Unable to Execute (TFS ID: 50694)

      Test Adjust Exchange Rate batch job for Vendor.
      1. Test Adjustment entry while updating Higher Exchange Rate and Run Adjust Exchange Rate batch job for Unrealized Loss on Vendor.
      2. Test Adjustment entry while updating Lower Exchange Rate and Run Adjust Exchange Rate batch job for Unrealized Gain on Vendor.

      Covers Test Cases:
        --------------------------------------------------
        Test Function Name               TFS ID
        --------------------------------------------------
        AdjustExchRateWithHigherValue    125904 to 125907
        AdjustExchRateWithLowerValue     125908 to 1259011
    }
    END.
  }
}

