OBJECT Codeunit 144022 ERM Currency
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1500002 : Codeunit 131300;
      LibraryRandom@1500000 : Codeunit 130440;
      LibrarySales@1500003 : Codeunit 130509;
      LibraryInventory@1500004 : Codeunit 132201;
      LibraryWarehouse@1500005 : Codeunit 132204;
      LibraryUtility@1500006 : Codeunit 131000;
      LibraryVariableStorage@1500007 : Codeunit 131004;
      LibraryPurchase@1500010 : Codeunit 130512;
      Assert@1500008 : Codeunit 130000;
      ServiceTaxAsExciseHelper@1500012 : Codeunit 143003;
      IsInitialized@1500001 : Boolean;
      AddReportingCurrencyConfirmMeaasge@1500009 : TextConst 'ENU=If you change the additional reporting currency, future general ledger entries will be posted in the new reporting currency (and in LCY)';
      DeleteAddReportingCurrency@1500025 : TextConst 'ENU=If you delete the additional reporting currency, future general ledger entries will be posted in LCY only.Deleting the additional reporting currency will have no effect on already posted general ledger entries.';
      SameAmountErr@1170000000 : TextConst 'ENU=The Tax Amount of G/L Entry must be consistent with Purchase Line.';
      WrongFieldValueErr@1500011 : TextConst 'ENU=Field %1 contains an incorrect value';
      VATExemptedMsg@1500013 : TextConst 'ENU=Vat Exempted should be True in Sales Order';

    [Test]
    [HandlerFunctions(AdjustAddReportingCurrencyRequestPageHandler)]
    PROCEDURE PostSalesOrderWithMultipleItemChargeAndForeignCurrency@1500002();
    VAR
      Location@1500006 : Record 14;
      Currency@1500000 : Record 4;
      SalesHeader@1500005 : Record 36;
      OldCurrencyCode@1500001 : Code[10];
      OldInvRoundingPrecisionLCY@1500003 : Decimal;
      Quantity@1500004 : Decimal;
    BEGIN
      // Test the functionality of Posting Sales Order with multiple Item Charge and Foreign Currency.

      // Setup: Crete State, TIN, Location, Item, Currency and Exchange Rate. Create Tax Details and Structure. Create Sales Order.
      Initialize;
      Quantity := LibraryRandom.RandInt(5);
      ServiceTaxAsExciseHelper.CreateLocationWithStateAndTINNo(Location);
      CreateCurrencyAndExchangeRate(Currency);
      LibraryVariableStorage.Enqueue(AddReportingCurrencyConfirmMeaasge);  // Enqueue for Confirm Handler.
      UpdateGeneralLedgerSetup(OldCurrencyCode,OldInvRoundingPrecisionLCY,Currency.Code,LibraryRandom.RandDec(5,2));
      CreateSalesOrder(SalesHeader,Location.Code,Currency.Code,Quantity);

      // Exercise: Post Sales Order.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);  // Post Sales Order as Ship and Invoice.

      // Verify: Posted Sales Invoice.
      VerifyPostedSalesInvoice(SalesHeader."No.",Location.Code,Quantity);

      // TearDown.
      LibraryVariableStorage.Enqueue(DeleteAddReportingCurrency);  // Enqueue for Confirm Handler.
      RestoreGeneralLedgerSetup(OldCurrencyCode,OldInvRoundingPrecisionLCY);
    END;

    [Test]
    [HandlerFunctions(AdjustAddReportingCurrencyRequestPageHandler)]
    PROCEDURE PostPurchaseOrderWithMultipleItemChargeAndForeignCurrency@1500036();
    VAR
      Item@1500001 : Record 27;
      Location@1500006 : Record 14;
      Currency@1500002 : Record 4;
      PurchaseHeader@1500007 : Record 38;
      OldCurrencyCode@1500003 : Code[10];
      OldInvRoundingPrecisionLCY@1500010 : Decimal;
      Quantity@1500000 : Decimal;
    BEGIN
      // Test the functionality of Posting Purchase Order with multiple Item Charge and Foreign Currency.

      // Setup: Create State, TIN, Location, Item, Currency and Exchange Rate. Create Tax Details and Structure. Create Purchase Order.
      Initialize;
      Quantity := LibraryRandom.RandInt(5);
      ServiceTaxAsExciseHelper.CreateLocationWithStateAndTINNo(Location);
      CreateItem(Item,Location.Code);
      CreateCurrencyAndExchangeRate(Currency);
      LibraryVariableStorage.Enqueue(AddReportingCurrencyConfirmMeaasge);  // Enqueue for Confirm Handler.
      UpdateGeneralLedgerSetup(OldCurrencyCode,OldInvRoundingPrecisionLCY,Currency.Code,LibraryRandom.RandDec(5,2));
      CreatePurchaseOrder(PurchaseHeader,Location.Code,Currency.Code,Item."No.",Quantity);

      // Exercise: Post Purchase Order.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);  // Post Purchase Order as Ship and Invoice.

      // Verify: Posted Purchase Invoice.
      VerifyPostedPurchaseInvoice(PurchaseHeader."No.",Location.Code,Quantity);

      // TearDown.
      LibraryVariableStorage.Enqueue(DeleteAddReportingCurrency);  // Enqueue for Confirm Handler.
      RestoreGeneralLedgerSetup(OldCurrencyCode,OldInvRoundingPrecisionLCY);
    END;

    [Test]
    PROCEDURE PurchaseCreditMemoWithSalesTaxAndForeignCurrency@1500007();
    VAR
      Currency@1500001 : Record 4;
      DocumentNo@1500002 : Code[20];
      OldVATRoundingPrecision@1500003 : Decimal;
    BEGIN
      // Setup: Set up VAT Rounding Precision on General Ledger Setup, create Currency and Exchange Rate.
      // The inconsistant error caused by Rounding,so we need hardcode to repro this issue.
      // Detail: VATRoundingPrecision = 0.01,Line Amount = 7.31, Tax% = 1, Exch. Rate = 2.
      // Tax Amount(FCY) = 7.31 * 1% = 0.0731,Tax Amount(LCY) = 0.0731 * 2 = 0.1462.
      // ROUND(0.0731) *  2 = 0.14,ROUND(0.1462) = 0.15.
      // Because the values 0.14 and 0.15 are not equal,the inconsistant error will be triggered.
      Initialize;
      UpdateVATRoundingPrecision(OldVATRoundingPrecision,0.01); // Use 0.01 to rounding Tax Amount in local currency.
      CreateCurrencyAndExchangeRate(Currency);

      // Exercise: Create and post Purchase Credit Memo with Tax.
      DocumentNo := CreateAndPostPurchaseCreditMemoWithTax(Currency.Code);

      // Verify: Verify the Tax Amount and does not pop up inconsistent error.
      VerifyGLEntry(DocumentNo,GetTaxAmountOnPostPurchaseCreditMemo(Currency.Code,DocumentNo));

      // TearDown: Rollback General Ledger Setup.
      UpdateVATRoundingPrecision(OldVATRoundingPrecision,OldVATRoundingPrecision);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CheckFieldReceiptDocumentLineNOReceiptDocumentNo@1500027();
    VAR
      OldAutomaticCostPosting@1500011 : Boolean;
      DocumentNo@1500001 : Code[20];
    BEGIN
      Initialize;

      OldAutomaticCostPosting := UpdateAutomaticCostPosting(TRUE);
      DocumentNo := PostInvoiceFromReceipts;

      VerifyReceiptDocumentLineNoAndReceiptDocumentNo(DocumentNo);
      UpdateAutomaticCostPosting(OldAutomaticCostPosting);
    END;

    [Test]
    PROCEDURE VerifySalesOrderWithCustomerVATExempted@1500008();
    VAR
      SalesHeader@1500000 : Record 36;
      Customer@1500001 : Record 18;
    BEGIN
      // [SCENARIO 163996] BUG ID #172745  Verify the Customer Vat Exempted value should be flow in Sales Order
      // [FEATURE] [Sales Order]

      // [GIVEN] Created Customer with Vat Exempted True
      Initialize;
      CreateCustomerWithVATExempted(Customer,TRUE);

      // [WHEN] Create Sales Order
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Customer."No.");

      // [THEN] Customer Vat Exempted has been updated in Sales Order
      Assert.AreEqual(Customer."VAT Exempted",SalesHeader."VAT Exempted",VATExemptedMsg);
    END;

    LOCAL PROCEDURE Initialize@3();
    BEGIN
      LibraryRandom.SetSeed(1);  // Use Random Number Generator to generate the seed for RANDOM function.

      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      NoSeriesSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateCurrencyAndExchangeRate@1500000(VAR Currency@1500001 : Record 4);
    VAR
      GLAccount@1500000 : Record 15;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.FindGLAccount(GLAccount);
      Currency.VALIDATE("Residual Gains Account",GLAccount."No.");
      Currency.VALIDATE("Residual Losses Account",Currency."Residual Gains Account");
      Currency.MODIFY(TRUE);

      // Create Currency Exchange Rate.
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
    END;

    LOCAL PROCEDURE CreateItem@1500014(VAR Item@1500000 : Record 27;LocationCode@1500003 : Code[10]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Inventory Posting Group",CreateInventoryPostingGroup(LocationCode));
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemChargeAssignmentForPurchase@1500012(VAR PurchaseLine@1500001 : Record 39;ItemChargeNo@1500002 : Code[20];Quantity@1500003 : Decimal);
    VAR
      ItemChargeAssignPurchase@1500000 : Record 5805;
    BEGIN
      LibraryInventory.CreateItemChargeAssignPurchase(ItemChargeAssignPurchase,PurchaseLine,PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.",ItemChargeNo);
      ItemChargeAssignPurchase.VALIDATE("Qty. to Assign",Quantity);
      ItemChargeAssignPurchase.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemChargeAssignmentForSales@1500015(VAR SalesLine@1500001 : Record 37;ItemChargeNo@1500002 : Code[20];Quantity@1500003 : Decimal);
    VAR
      ItemChargeAssignmentSales@1500000 : Record 5809;
    BEGIN
      LibraryInventory.CreateItemChargeAssignment(ItemChargeAssignmentSales,SalesLine,SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",ItemChargeNo);
      ItemChargeAssignmentSales.VALIDATE("Qty. to Assign",Quantity);
      ItemChargeAssignmentSales.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateInventoryPostingGroup@1500034(LocationCode@1500000 : Code[10]) : Code[10];
    VAR
      InventoryPostingGroup@1500003 : Record 94;
      InventoryPostingSetup@1500002 : Record 5813;
      GLAccount@1500001 : Record 15;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);
      LibraryInventory.CreateInventoryPostingGroup(InventoryPostingGroup);
      LibraryInventory.CreateInventoryPostingSetup(InventoryPostingSetup,LocationCode,InventoryPostingGroup.Code);
      InventoryPostingSetup.VALIDATE("Inventory Account",GLAccount."No.");
      InventoryPostingSetup.MODIFY(TRUE);
      EXIT(InventoryPostingGroup.Code);
    END;

    LOCAL PROCEDURE CreateMultiplePurchaseLineForItemCharge@1500037(VAR PurchaseLine@1500001 : Record 39;VAR PurchaseHeader@1500002 : Record 38;Type@1500005 : Option;Quantity@1500003 : Decimal);
    VAR
      ItemCharge@1500000 : Record 5800;
    BEGIN
      FindItemCharge(ItemCharge);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,Type,ItemCharge."No.",Quantity,LibraryRandom.RandDec(100,2));
      CreateItemChargeAssignmentForPurchase(PurchaseLine,ItemCharge."No.",Quantity);
    END;

    LOCAL PROCEDURE CreateMultipleSalesLineForItemCharge@1500006(VAR SalesLine@1500005 : Record 37;VAR SalesHeader@1500002 : Record 36;Type@1500003 : Option;Quantity@1500009 : Decimal);
    VAR
      ItemCharge@1500000 : Record 5800;
    BEGIN
      FindItemCharge(ItemCharge);
      CreateSalesLine(SalesLine,SalesHeader,Type,ItemCharge."No.",Quantity);
      CreateItemChargeAssignmentForSales(SalesLine,ItemCharge."No.",Quantity);
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@1500013(VAR PurchaseHeader@1500000 : Record 38;LocationCode@1500002 : Code[10];VendorNo@1500004 : Code[20];CurrencyCode@1500003 : Code[10];DocType@1500005 : Option);
    VAR
      StructureDetails@1500001 : Record 13793;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocType,VendorNo);
      PurchaseHeader.VALIDATE(
        Structure,ServiceTaxAsExciseHelper.CreateStructure(StructureDetails.Type::"Sales Tax"));
      PurchaseHeader.VALIDATE("Location Code",LocationCode);
      PurchaseHeader.VALIDATE("Currency Code",CurrencyCode);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseHeaderForCreditMemo@1500123(VAR PurchaseHeader@1500000 : Record 38;CurrencyCode@1500001 : Code[10];VendorNo@1500002 : Code[20]);
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,'',VendorNo,CurrencyCode,PurchaseHeader."Document Type"::"Credit Memo");
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@1500020(VAR PurchaseLine@1500000 : Record 39;VAR PurchaseHeader@1500001 : Record 38;Type@1500008 : Option;ItemNo@1500002 : Code[20];Quantity@1500003 : Decimal;DirectUnitCost@1500004 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,Type,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithTax@1500122(VAR PurchaseHeader@1500000 : Record 38;VendorTaxAreaCode@1500001 : Code[20]);
    VAR
      PurchaseLine@1500003 : Record 39;
      TaxJurisdiction@1500002 : Record 320;
    BEGIN
      CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ServiceTaxAsExciseHelper.CreateItemWithTaxGroup,1,7.31); // 1 and 7.31 are needed to trigger the inconsistent error.
      PurchaseLine.VALIDATE("Tax Area Code",VendorTaxAreaCode);
      PurchaseLine.MODIFY(TRUE);
      ServiceTaxAsExciseHelper.SetupSalesTax(
        PurchaseLine."Tax Area Code",PurchaseLine."Tax Group Code",1,TaxJurisdiction."Tax Type"::" ",''); // 1 is needed to trigger the inconsistent error.
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@1500049(VAR PurchaseHeader@1500000 : Record 38;LocationCode@1500002 : Code[10];CurrencyCode@1500003 : Code[10];ItemNo@1500004 : Code[20];Quantity@1500006 : Decimal);
    VAR
      PurchaseLine@1500005 : Record 39;
      i@1500009 : Integer;
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,LocationCode,CreateVendor,CurrencyCode,PurchaseHeader."Document Type"::Order);
      CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity,LibraryRandom.RandDec(100,2));
      FOR i := 1 TO LibraryRandom.RandIntInRange(2,4) DO
        CreateMultiplePurchaseLineForItemCharge(PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",Quantity);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseCreditMemoWithTax@1500017(CurrencyCode@1500001 : Code[10]) : Code[20];
    VAR
      PurchaseHeader@1500003 : Record 38;
      Vendor@1500006 : Record 23;
    BEGIN
      ServiceTaxAsExciseHelper.CreateVendorWithTaxLiable(Vendor,CurrencyCode,TRUE);
      CreatePurchaseHeaderForCreditMemo(PurchaseHeader,CurrencyCode,Vendor."No.");
      CreatePurchaseLineWithTax(PurchaseHeader,Vendor."Tax Area Code");
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateSalesHeader@1500004(VAR SalesHeader@1500000 : Record 36;StructureCode@1500005 : Code[20];LocationCode@1500006 : Code[10];CurrencyCode@1500003 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibraryInventory.SelectCustomer);
      SalesHeader.VALIDATE(Structure,StructureCode);
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.VALIDATE("Currency Code",CurrencyCode);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLine@1500005(VAR SalesLine@1500000 : Record 37;VAR SalesHeader@1500001 : Record 36;Type@1500009 : Option;ItemNo@1500002 : Code[20];Quantity@1500003 : Decimal);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,Type,ItemNo,Quantity);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@1500045(VAR SalesHeader@1500000 : Record 36;LocationCode@1500007 : Code[10];CurrencyCode@1500001 : Code[10];Quantity@1500005 : Decimal);
    VAR
      SalesLine@1500002 : Record 37;
      Item@1500003 : Record 27;
      i@1500004 : Integer;
    BEGIN
      CreateSalesHeader(SalesHeader,CreateStructure,LocationCode,CurrencyCode);
      CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItem(Item),Quantity);
      FOR i := 1 TO LibraryRandom.RandIntInRange(2,4) DO
        CreateMultipleSalesLineForItemCharge(SalesLine,SalesHeader,SalesLine.Type::"Charge (Item)",Quantity);
    END;

    LOCAL PROCEDURE CreateStructure@1500003() : Code[20];
    VAR
      StructureHeader@1500004 : Record 13792;
      StructureDetails@1500000 : Record 13793;
    BEGIN
      LibraryERM.CreateStructureHeader(StructureHeader);
      LibraryERM.CreateStructureDetails(StructureDetails,StructureHeader.Code,1,StructureDetails.Type::"Sales Tax",'','');  // Value 1 for Calculation Order Field.
      StructureDetails.VALIDATE("Include Base",TRUE);
      StructureDetails.VALIDATE("Include Line Discount",TRUE);
      StructureDetails.VALIDATE("Include Invoice Discount",TRUE);
      StructureDetails.MODIFY(TRUE);
      EXIT(StructureHeader.Code);
    END;

    LOCAL PROCEDURE CreateVendor@12() : Code[20];
    VAR
      Vendor@1500063 : Record 23;
      GeneralPostingSetup@1500064 : Record 252;
    BEGIN
      GeneralPostingSetup.SETFILTER("Purch. Account",'<>%1','');
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithVATExempted@1500011(VAR Customer@1500002 : Record 18;VatExempted@1500000 : Boolean);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("VAT Exempted",VatExempted);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMultiplePurchaseLineAndPostDocument@1500040(PurchaseHeader@1500005 : Record 38;InventoryPostingGroupCode@1500002 : Code[10];Quantity@1500004 : Decimal;QtyToReceive@1500003 : Decimal);
    VAR
      PurchLine@1500000 : Record 39;
      Item@1500001 : Record 27;
      i@1500006 : Integer;
    BEGIN
      CreateItemWithInventoryPostingGroup(Item,InventoryPostingGroupCode);

      FOR i := 1 TO LibraryRandom.RandIntInRange(2,4) DO BEGIN
        CreatePurchaseLine(PurchLine,PurchaseHeader,PurchLine.Type::Item,Item."No.",Quantity,LibraryRandom.RandDec(100,2));
        PurchLine.VALIDATE("Qty. to Receive",QtyToReceive);
        PurchLine.VALIDATE("Qty. to Invoice",0);
        PurchLine.MODIFY;
      END;

      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      PurchLine.FIND;
      UpdateQtyToReceivePurchLine(PurchLine,0);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreatePurchHeader@1500047(VAR PurchaseHeader@1500000 : Record 38;LocationCode@1500002 : Code[10];VendorNo@1500001 : Code[20];DocType@1500004 : Option);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocType,VendorNo);
      PurchaseHeader.VALIDATE("Location Code",LocationCode);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithInventoryPostingGroup@1500001(VAR Item@1500000 : Record 27;InventoryPostingGroupCode@1500001 : Code[10]);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Inventory Posting Group",InventoryPostingGroupCode);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindItemCharge@1500080(VAR ItemCharge@1500001 : Record 5800);
    BEGIN
      ItemCharge.NEXT(LibraryRandom.RandInt(ItemCharge.COUNT));
    END;

    LOCAL PROCEDURE FindCurrExchRate@1500031(VAR CurrExchRate@1500000 : Record 330;CurrencyCode@1500001 : Code[10]);
    BEGIN
      CurrExchRate.SETRANGE("Currency Code",CurrencyCode);
      CurrExchRate.FINDFIRST;
    END;

    LOCAL PROCEDURE GetTaxAmountOnPurchCrMemoLine@1500033(DocumentNo@1500001 : Code[20]) : Decimal;
    VAR
      PurchCrMemoLine@1500003 : Record 125;
      PurchCrMemoLineType@1500002 : ' ,G/L Account,Item,,Fixed Asset,Charge (Item)';
    BEGIN
      WITH PurchCrMemoLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE(Type,PurchCrMemoLineType::Item);
        FINDFIRST;
        EXIT("Tax Amount");
      END;
    END;

    LOCAL PROCEDURE GetTaxAmountOnPostPurchaseCreditMemo@1500025(CurrencyCode@1500000 : Code[10];DocumentNo@1500001 : Code[20]) : Decimal;
    VAR
      CurrExchRate@1500003 : Record 330;
      PurchCrMemoLine@1500004 : Record 125;
    BEGIN
      FindCurrExchRate(CurrExchRate,CurrencyCode);
      EXIT(-ROUND(GetTaxAmountOnPurchCrMemoLine(DocumentNo) * CurrExchRate."Relational Exch. Rate Amount" / CurrExchRate."Exchange Rate Amount"));
    END;

    LOCAL PROCEDURE GetReceiptLines@1500101(VAR PurchaseHeader@1500000 : Record 38);
    VAR
      PurchRcptLine@1500003 : Record 121;
      PurchGetReceipt@1500004 : Codeunit 74;
    BEGIN
      PurchRcptLine.SETCURRENTKEY("Pay-to Vendor No.");
      PurchRcptLine.SETRANGE("Pay-to Vendor No.",PurchaseHeader."Pay-to Vendor No.");
      PurchGetReceipt.SetPurchHeader(PurchaseHeader);
      PurchGetReceipt.CreateInvLines(PurchRcptLine);
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      InventorySetup@1500000 : Record 313;
      WarehouseSetup@1500002 : Record 5769;
      PurchasesPayablesSetup@1500003 : Record 312;
      SalesSetup@1500001 : Record 311;
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Item Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      InventorySetup.MODIFY(TRUE);

      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);

      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostInvoiceFromReceipts@1500032() : Code[20];
    VAR
      Location@1500001 : Record 14;
      PurchaseHeaderInvoice@1500000 : Record 38;
      VendorNo@1500003 : Code[20];
    BEGIN
      VendorNo := CreateVendor;
      ServiceTaxAsExciseHelper.CreateLocationWithStateAndTINNo(Location);

      PostReceipts(VendorNo,Location.Code);

      CreatePurchHeader(PurchaseHeaderInvoice,Location.Code,VendorNo,PurchaseHeaderInvoice."Document Type"::Invoice);

      GetReceiptLines(PurchaseHeaderInvoice);

      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeaderInvoice,TRUE,TRUE));
    END;

    LOCAL PROCEDURE PostReceipts@1500066(VendorNo@1500002 : Code[20];LocationCode@1500006 : Code[10]);
    VAR
      i@1500005 : Integer;
      InventoryPostingGroupCode@1500001 : Code[10];
    BEGIN
      InventoryPostingGroupCode := CreateInventoryPostingGroup(LocationCode);

      FOR i := 1 TO LibraryRandom.RandIntInRange(2,4) DO
        PostReceipt(InventoryPostingGroupCode,LocationCode,VendorNo);
    END;

    LOCAL PROCEDURE PostReceipt@1500018(InventoryPostingGroupCode@1500000 : Code[10];LocationCode@1500004 : Code[10];VendorNo@1500005 : Code[20]);
    VAR
      PurchaseHeaderReceipt@1500001 : Record 38;
      Quantity@1500007 : Decimal;
      QtyToReceive@1500006 : Decimal;
    BEGIN
      Quantity := LibraryRandom.RandIntInRange(2,10);
      QtyToReceive := LibraryRandom.RandInt(Quantity - 1);

      CreatePurchHeader(PurchaseHeaderReceipt,LocationCode,VendorNo,PurchaseHeaderReceipt."Document Type"::Order);
      CreateMultiplePurchaseLineAndPostDocument(PurchaseHeaderReceipt,InventoryPostingGroupCode,Quantity,QtyToReceive);
    END;

    LOCAL PROCEDURE RestoreGeneralLedgerSetup@1500081(AdditionalReportingCurrency@1500002 : Code[10];InvRoundingPrecisionLCY@1500001 : Decimal);
    VAR
      GeneralLedgerSetup@1500003 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.VALIDATE("Inv. Rounding Precision (LCY)",InvRoundingPrecisionLCY);
      GeneralLedgerSetup.VALIDATE("Additional Reporting Currency",AdditionalReportingCurrency);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGeneralLedgerSetup@1500010(VAR OldCurrencyCode@1500003 : Code[10];VAR OldInvRoundingPrecisionLCY@1500002 : Decimal;NewCurrencyCode@1500001 : Code[10];NewInvRoundingPrecisionLCY@1500000 : Decimal);
    VAR
      GeneralLedgerSetup@1500007 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      OldInvRoundingPrecisionLCY := GeneralLedgerSetup."Inv. Rounding Precision (LCY)";
      OldCurrencyCode := GeneralLedgerSetup."Additional Reporting Currency";
      COMMIT;
      RestoreGeneralLedgerSetup(NewCurrencyCode,NewInvRoundingPrecisionLCY);
    END;

    LOCAL PROCEDURE UpdateVATRoundingPrecision@1500028(VAR OldVATRoundingPrecision@1500000 : Decimal;NewVATRoundingPrecision@1500001 : Decimal);
    VAR
      GeneralLedgerSetup@1500002 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      OldVATRoundingPrecision := GeneralLedgerSetup."VAT Rounding Precision";
      GeneralLedgerSetup.VALIDATE("VAT Rounding Precision",NewVATRoundingPrecision);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQtyToReceivePurchLine@1500051(VAR PurchLine@1500001 : Record 39;Qty@1500002 : Decimal);
    BEGIN
      PurchLine.VALIDATE("Qty. to Receive",Qty);
      PurchLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAutomaticCostPosting@1500038(Value@1500000 : Boolean) : Boolean;
    VAR
      InventorySetup@1500003 : Record 313;
      OldValue@1500001 : Boolean;
    BEGIN
      WITH InventorySetup DO BEGIN
        GET;
        OldValue := "Automatic Cost Posting";
        VALIDATE("Automatic Cost Posting",Value);
        MODIFY(TRUE);
        EXIT(OldValue);
      END;
    END;

    [RequestPageHandler]
    PROCEDURE AdjustAddReportingCurrencyRequestPageHandler@1500035(VAR AdjustAddReportingCurrency@1500000 : TestRequestPage 86);
    VAR
      GLAccount@1500001 : Record 15;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);
      AdjustAddReportingCurrency.DocumentNo.SETVALUE(LibraryUtility.GetGlobalNoSeriesCode);
      AdjustAddReportingCurrency.RetainedEarningsAcc.SETVALUE(GLAccount."No.");
      AdjustAddReportingCurrency.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@27(Message@1000 : Text[1024]);
    BEGIN
    END;

    LOCAL PROCEDURE VerifyGLEntry@1500029(DocumentNo@1500001 : Code[20];TaxAmount@1500002 : Decimal);
    VAR
      GLEntry@1500003 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETFILTER("Document No.",DocumentNo);
        FINDSET;
        REPEAT
          IF "Tax Amount" = 0 THEN
            NEXT;
        UNTIL "Tax Amount" <> 0;
        Assert.AreEqual("Tax Amount",TaxAmount,SameAmountErr);
      END;
    END;

    LOCAL PROCEDURE VerifyPostedPurchaseInvoice@25(OrderNo@1500003 : Code[20];LocationCode@1500002 : Code[10];Quantity@1500000 : Decimal);
    VAR
      PurchInvHeader@1500005 : Record 122;
      PurchInvLine@1500004 : Record 123;
    BEGIN
      PurchInvHeader.SETRANGE("Order No.",OrderNo);
      PurchInvHeader.FINDFIRST;

      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
      PurchInvLine.FINDFIRST;
      PurchInvLine.TESTFIELD("Location Code",LocationCode);
      PurchInvLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedSalesInvoice@32(OrderNo@1500003 : Code[20];LocationCode@1500002 : Code[10];Quantity@1500000 : Decimal);
    VAR
      SalesInvoiceHeader@1500005 : Record 112;
      SalesInvoiceLine@1500004 : Record 113;
    BEGIN
      SalesInvoiceHeader.SETRANGE("Order No.",OrderNo);
      SalesInvoiceHeader.FINDFIRST;

      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      SalesInvoiceLine.FINDFIRST;
      SalesInvoiceLine.TESTFIELD("Location Code",LocationCode);
      SalesInvoiceLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyReceiptDocumentLineNoAndReceiptDocumentNo@1500039(DocumentNo@1500002 : Code[20]);
    VAR
      PurchInvLine@1500000 : Record 123;
    BEGIN
      WITH PurchInvLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Receipt No.",'');
        SETRANGE("Receipt Line No.",0);
        SETRANGE(Type,Type::" ");
        FINDSET;
        REPEAT
          Assert.AreEqual(0,"Receipt Document Line No.",STRSUBSTNO(WrongFieldValueErr,'Receipt No.'));
          Assert.AreEqual('',"Receipt Document No.",STRSUBSTNO(WrongFieldValueErr,'Receipt Document No.'));
        UNTIL NEXT = 0;
      END;
    END;

    BEGIN
    {
      Test for ERM:
        1. Test the functionality of Posting Sales Order with multiple Item Charge and Foreign Currency.
        2. Test the functionality of Posting Purchase Order with multiple Item Charge and Foreign Currency.
        3. Verify the Tax Amount and does not pop up inconsistent error when post Purchase Credit Memo with Sales Tax and Foreign Currency.
        4. Verify Receipt Document No and Receipt Document No are not populated to lines without Type.

        Covers Test cases: 283426
        ---------------------------------------------------------------------------------
        Test Function Name                                                         TFS ID
        ---------------------------------------------------------------------------------
        PostSalesOrderWithMultipleItemChargeAndForeignCurrency                     283426
        PostPurchaseOrderWithMultipleItemChargeAndForeignCurrency                  283426

        Covers Test cases: 94354
        ---------------------------------------------------------------------------------
        Test Function Name                                                         TFS ID
        ---------------------------------------------------------------------------------
        PurchaseCreditMemoWithSalesTaxAndForeignCurrency                           94354
        CheckFieldReceiptDocumentLineNOReceiptDocumentNo                           359904
    }
    END.
  }
}

