OBJECT Codeunit 144033 Reverse Serv Tax Credit Memo
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE
          END;

  }
  CODE
  {
    VAR
      Assert@1500002 : Codeunit 130000;
      LibraryERM@1500007 : Codeunit 131300;
      LibraryPurchase@1500001 : Codeunit 130512;
      LibraryServiceTax@1500005 : Codeunit 143001;
      LibraryRandom@1500004 : Codeunit 130440;
      ReverseServiceTaxHelper@1500003 : Codeunit 143006;
      ServiceTaxReportHelper@1500018 : Codeunit 143007;
      ServiceTaxVerify@1500006 : Codeunit 143004;
      CrMemoAmtCovers@1500011 : 'FirstPurchInvAmt,SecondPurchInvAmt,BothPurchInvAmts';
      InvoiceAmountIs@1500014 : 'Equal,Greater,Smaller';
      ServiceTaxType@1500009 : ' ,Standard,GTA';
      isInitialized@1500000 : Boolean;
      ServiceTaxRegNoErr@1500008 : TextConst 'ENU=You cannot apply the documents, because they have different Service Tax Registration Nos.';
      ServiceTaxGroupCodeErr@1500010 : TextConst 'ENU=You cannot apply the documents, because they have different Service Tax Group Codes.';
      ServiceTaxApplicationErr@1500012 : TextConst 'ENU=You cannot apply a document with service tax to a document without service tax.';
      UnapplyOfUsedCreditErr@1500015 : TextConst 'ENU=the Service Tax credit has already been utilized';
      WrongGLRegCountErr@1500013 : TextConst 'ENU=Wrong number of G/L Register entries.';
      GLRegFromToSTEntryNoErr@1500016 : TextConst 'ENU="""From ST Entry No."" must be bigger than ""To ST Entry No."" in previous G/L Register entry."';
      ServiceTaxEntryCountErr@1500017 : TextConst 'ENU=Wrong number of Service Tax Entries.';
      WrongDocumentNoErr@1500019 : TextConst 'ENU=Wrong Document No. in Service Tax Entry.';

    [Test]
    PROCEDURE ApplyCrMemoOnInvPoTEqualAmount@1500014();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyDocOnCrMemo(PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::" ",
        ServiceTaxType::" ",TRUE,InvoiceAmountIs::Equal)
    END;

    [Test]
    PROCEDURE ApplyCrMemoOnInvNonPoTEqualAmt@1500011();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyDocOnCrMemo(PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::" ",
        ServiceTaxType::" ",FALSE,InvoiceAmountIs::Equal)
    END;

    [Test]
    PROCEDURE ApplyCrMemoOnOrderPoTEqualAmt@1500022();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyDocOnCrMemo(PurchaseHeader."Document Type"::Order,PurchaseHeader."Service Type (Rev. Chrg.)"::" ",
        ServiceTaxType::" ",TRUE,InvoiceAmountIs::Equal)
    END;

    [Test]
    PROCEDURE ApplyCrMemoOnGreaterInvPoT@1500095();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyDocOnCrMemo(PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::" ",
        ServiceTaxType::" ",TRUE,InvoiceAmountIs::Greater)
    END;

    [Test]
    PROCEDURE ApplyCrMemoOnGreaterInvNonPoT@1500012();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyDocOnCrMemo(PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::" ",
        ServiceTaxType::" ",FALSE,InvoiceAmountIs::Greater)
    END;

    [Test]
    PROCEDURE ApplyCrMemoOnGreaterOrderPoT@1500092();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyDocOnCrMemo(PurchaseHeader."Document Type"::Order,PurchaseHeader."Service Type (Rev. Chrg.)"::" ",
        ServiceTaxType::" ",TRUE,InvoiceAmountIs::Greater)
    END;

    [Test]
    PROCEDURE ApplyCrMemoOnInvRCEqualAmount@1500023();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyDocOnCrMemo(PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,
        ServiceTaxType::Standard,FALSE,InvoiceAmountIs::Equal)
    END;

    [Test]
    PROCEDURE ApplyCrMemoOnOrderRCEqualAmt@1500024();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyDocOnCrMemo(PurchaseHeader."Document Type"::Order,PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,
        ServiceTaxType::Standard,FALSE,InvoiceAmountIs::Equal)
    END;

    [Test]
    PROCEDURE ApplyCrMemoOnGreaterInvoiceRC@1500076();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyDocOnCrMemo(PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,
        ServiceTaxType::Standard,FALSE,InvoiceAmountIs::Greater)
    END;

    [Test]
    PROCEDURE ApplyCrMemoOnGreaterOrderRC@1500077();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyDocOnCrMemo(PurchaseHeader."Document Type"::Order,PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,
        ServiceTaxType::Standard,FALSE,InvoiceAmountIs::Greater)
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE AppCrMOnBigInvRCInwardPayRC@1500088();
    VAR
      ServiceTaxSetup@1500018 : Record 16472;
      GenJournalLine@1500002 : Record 81;
      PaymentBaseAmount@1500011 : Decimal;
      ServiceTypeReverseCharge@1500022 : Option;
      LastTransactionNo@1500000 : Integer;
      TotalServTaxPayable@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      ServiceTypeReverseCharge := GenJournalLine."Service Type (Rev. Chrg.)"::Inward;

      ApplyCrMOnBigInvRCPayRCToGov(PaymentBaseAmount,ServiceTypeReverseCharge,GenJournalLine);

      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      TotalServTaxPayable := ReverseServiceTaxHelper.CalculateServTaxTotal(PaymentBaseAmount,ServiceTaxSetup);

      ServiceTaxVerify.STEntriesFullPurchFlow(LastTransactionNo,GenJournalLine,PaymentBaseAmount,ServiceTaxType::Standard);
      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,TotalServTaxPayable,0,0,0);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE AppCrMOnBigInvRCOutwardPayRC@1500097();
    VAR
      GenJournalLine@1500003 : Record 81;
      ServiceTaxSetup@1500022 : Record 16472;
      PaymentBaseAmount@1500011 : Decimal;
      ServiceTypeReverseCharge@1500001 : Option;
      LastTransactionNo@1500000 : Integer;
      TotalServTaxPayable@1500002 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      ServiceTypeReverseCharge := GenJournalLine."Service Type (Rev. Chrg.)"::Outward;

      ApplyCrMOnBigInvRCPayRCToGov(PaymentBaseAmount,ServiceTypeReverseCharge,GenJournalLine);

      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      TotalServTaxPayable := ReverseServiceTaxHelper.CalculateServTaxTotal(PaymentBaseAmount,ServiceTaxSetup);

      ServiceTaxVerify.STEntriesFullPurchFlow(LastTransactionNo,GenJournalLine,PaymentBaseAmount,ServiceTaxType::Standard);
      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      ServiceTaxVerify.STExpenseAccBalance(ServiceTaxSetup,TotalServTaxPayable);
    END;

    LOCAL PROCEDURE ApplyCrMOnBigInvRCPayRCToGov@1500104(VAR PaymentBaseAmount@1500004 : Decimal;ServiceTypeReverseCharge@1500007 : Option;VAR InvGenJournalLine@1500015 : Record 81);
    VAR
      CrMemoGenJournalLine@1500017 : Record 81;
      PurchaseHeader@1500016 : Record 38;
      VendorLedgerEntry@1500013 : Record 25;
      PoT@1500006 : Boolean;
      DocumentType@1500009 : Option;
      ReverseChargeType@1500008 : Option;
      PaymentDocNo@1500002 : Code[20];
    BEGIN
      DocumentType := PurchaseHeader."Document Type"::Invoice;
      ReverseChargeType := ServiceTaxType::Standard;
      PoT := FALSE;
      // Post an Invoice with Amount greater than Credit Memo. Apply Credit Memo to the Invoice.
      ApplyDocOnCrMemoCoverAmount(
        DocumentType,ServiceTypeReverseCharge,ReverseChargeType,PoT,
        InvoiceAmountIs::Greater,InvGenJournalLine,CrMemoGenJournalLine);

      PaymentBaseAmount := InvGenJournalLine.Amount - ABS(CrMemoGenJournalLine.Amount);

      // Post and Apply Payment
      PaymentDocNo := ReverseServiceTaxHelper.PostPayment(InvGenJournalLine."Account No.",PaymentBaseAmount,
          InvGenJournalLine."Posting Date",ReverseServiceTaxHelper.GetApplyingDocType(DocumentType));
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(PurchaseHeader."Document Type"::Invoice,InvGenJournalLine."Document No.",
        VendorLedgerEntry."Document Type"::Payment,PaymentDocNo);

      // Exercise
      ReverseServiceTaxHelper.PayServiceTax(
        InvGenJournalLine."Service Tax Registration No.",InvGenJournalLine."Service Tax Group Code",
        TRUE);
    END;

    [Test]
    PROCEDURE ApplyPartiallyClosedInvToCrMem@1500025();
    VAR
      InvGenJournalLine@1500016 : Record 81;
      CRMemoGenJournalLine@1500020 : Record 81;
      PurchaseHeader@1500010 : Record 38;
      PurchaseHeaderCrM@1500008 : Record 38;
      PurchaseLineCrM@1500007 : Record 39;
      ServiceTaxSetup@1500014 : Record 16472;
      PostedSecondCreditMemoNo@1500009 : Code[20];
      RemainingBaseAmount@1500002 : Decimal;
      PoT@1500000 : Boolean;
      DocumentType@1500012 : Option;
      ServiceTypeReverseCharge@1500011 : Option;
      ReverseChargeType@1500001 : Option;
    BEGIN
      Initialize;

      DocumentType := PurchaseHeader."Document Type"::Invoice;
      ReverseChargeType := ServiceTaxType::Standard;
      ServiceTypeReverseCharge := PurchaseHeader."Service Type (Rev. Chrg.)"::Inward;
      PoT := FALSE;
      // Post an Invoice with Amount greater than Credit Memo. Apply Credit Memo to the Invoice.
      ApplyDocOnCrMemoCoverAmount(DocumentType,ServiceTypeReverseCharge,ReverseChargeType,PoT,
        InvoiceAmountIs::Greater,InvGenJournalLine,CRMemoGenJournalLine);
      ServiceTaxSetup.FindOnDate(InvGenJournalLine."Service Tax Group Code",InvGenJournalLine."Posting Date");

      // Post Second Credit Memo
      RemainingBaseAmount := InvGenJournalLine.Amount - ABS(CRMemoGenJournalLine.Amount);
      PostedSecondCreditMemoNo :=
        ReverseServiceTaxHelper.PostPurchaseDocForVendWithAmt(
          PurchaseHeaderCrM,PurchaseLineCrM,InvGenJournalLine."Account No.",
          PurchaseHeaderCrM."Document Type"::"Credit Memo",ServiceTypeReverseCharge,ReverseChargeType,PoT,
          InvGenJournalLine."Service Tax Registration No.",InvGenJournalLine."Service Tax Group Code",RemainingBaseAmount);
      ApplyCreditMemoToInvoice(InvGenJournalLine."Document No.",PostedSecondCreditMemoNo);

      // Verify
      ServiceTaxVerify.ServTaxEntry(PostedSecondCreditMemoNo,-RemainingBaseAmount,ServiceTaxSetup);

      ServiceTaxVerify.PostedPurchDocGLBalance(ServiceTaxSetup,ReverseChargeType,PoT,0);
      ServiceTaxVerify.ServTaxEntriesArePaid(ReverseServiceTaxHelper.GetLastTransactionNo);
      ServiceTaxVerify.DocHasClosedRemCredit(PostedSecondCreditMemoNo);
      ServiceTaxVerify.DocHasClosedRemCredit(InvGenJournalLine."Document No.");

      ServiceTaxVerify.VendorLedgerEntryOpen(InvGenJournalLine."Document No.",FALSE);
      ServiceTaxVerify.VendorLedgerEntryOpen(PostedSecondCreditMemoNo,FALSE);
    END;

    [Test]
    PROCEDURE ApplyCrMemoOnTwoInvoicePoT@1500018();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyTwoDocOnCrMemo(PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::" ",
        ServiceTaxType::" ",TRUE)
    END;

    [Test]
    PROCEDURE ApplyCrMemoOnTwoOrderPoT@1500020();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyTwoDocOnCrMemo(PurchaseHeader."Document Type"::Order,PurchaseHeader."Service Type (Rev. Chrg.)"::" ",
        ServiceTaxType::" ",TRUE)
    END;

    [Test]
    PROCEDURE ApplyCrMemoOnTwoInvoiceRevChrg@1500021();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyTwoDocOnCrMemo(PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,
        ServiceTaxType::Standard,FALSE)
    END;

    [Test]
    PROCEDURE ApplyCrMemoOnTwoOrderRevChrg@1500029();
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      ApplyTwoDocOnCrMemo(PurchaseHeader."Document Type"::Order,PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,
        ServiceTaxType::Standard,FALSE)
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE Post2Inv1CrMemoTakeSalesCrPoT@1500075();
    VAR
      PurchaseHeader@1500002 : Record 38;
      ServiceTaxSetup@1500014 : Record 16472;
      ServiceTaxEntryDetails@1500015 : Record 16474;
      PostedInvoiceNo@1500000 : Code[20];
      PostedInvoiceNo2@1500001 : Code[20];
      PostedCreditMemoNo@1500009 : Code[20];
      PostedSalesInvoiceNo@1500013 : Code[20];
      RevChargeCreditClosed@1500011 : Boolean;
      RealCreditClosed@1500010 : Boolean;
      PoT@1500004 : Boolean;
      DocumentType@1500018 : Option;
      ServiceTypeReverseCharge@1500003 : Option;
      ReverseChargeType@1500017 : Option;
    BEGIN
      DocumentType := PurchaseHeader."Document Type"::Invoice;
      PoT := TRUE;
      ServiceTypeReverseCharge := PurchaseHeader."Service Type (Rev. Chrg.)"::" ";
      ReverseChargeType := ServiceTaxType::" ";

      ApplyTwoDocOnCrMemoCoverAmount(PostedInvoiceNo,PostedInvoiceNo2,PostedCreditMemoNo,ServiceTaxSetup,
        DocumentType,ServiceTypeReverseCharge,ReverseChargeType,PoT,CrMemoAmtCovers::FirstPurchInvAmt);

      ReverseServiceTaxHelper.GetServiceTaxEntryDetail(ServiceTaxEntryDetails,PostedInvoiceNo2);
      PostedSalesInvoiceNo := ReverseServiceTaxHelper.PostEqualAmountSalesDoc(ServiceTaxEntryDetails);
      LibraryServiceTax.PayServiceTax(ServiceTaxEntryDetails."Service Tax Registration No.",
        ServiceTaxEntryDetails."Service Tax Group Code",FALSE);

      // Verify:
      RevChargeCreditClosed := TRUE;
      RealCreditClosed := TRUE;
      ServiceTaxVerify.ServTaxEntryDetails(PostedInvoiceNo2,ServiceTaxEntryDetails."Base Amount",
        ServiceTaxSetup,RevChargeCreditClosed,RealCreditClosed);

      ReverseServiceTaxHelper.GetServiceTaxEntryDetail(ServiceTaxEntryDetails,PostedInvoiceNo);
      ServiceTaxVerify.ServTaxEntryDetails(PostedInvoiceNo,ServiceTaxEntryDetails."Base Amount",
        ServiceTaxSetup,RevChargeCreditClosed,RealCreditClosed);

      ReverseServiceTaxHelper.GetServiceTaxEntryDetail(ServiceTaxEntryDetails,PostedCreditMemoNo);
      ServiceTaxVerify.ServTaxEntryDetails(PostedCreditMemoNo,ServiceTaxEntryDetails."Base Amount",
        ServiceTaxSetup,RevChargeCreditClosed,RealCreditClosed);

      ServiceTaxVerify.ServTaxEntryStatus(PostedSalesInvoiceNo,RevChargeCreditClosed,RealCreditClosed);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE AplyCrMemoOnBigInvTakeSlsCrPoT@1500080();
    VAR
      InvGenJournalLine@1500020 : Record 81;
      CrMemoGenJournalLine@1500019 : Record 81;
      PurchaseHeader@1500000 : Record 38;
      ServiceTaxSetup@1500013 : Record 16472;
      ServiceTaxEntryDetails@1500004 : Record 16474;
      STEntryDetailsDifference@1500005 : Record 16474;
      PostedSalesInvoiceNo@1500007 : Code[20];
      SalesInvoiceAmount@1500003 : Decimal;
      RevChargeCreditClosed@1500002 : Boolean;
      RealCreditClosed@1500001 : Boolean;
      PoT@1500014 : Boolean;
      DocumentType@1500016 : Option;
      ServiceTypeReverseCharge@1500017 : Option;
      ReverseChargeType@1500015 : Option;
    BEGIN
      Initialize;
      DocumentType := PurchaseHeader."Document Type"::Invoice;
      ServiceTypeReverseCharge := PurchaseHeader."Service Type (Rev. Chrg.)"::" ";
      ReverseChargeType := ServiceTaxType::" ";
      PoT := TRUE;
      ApplyDocOnCrMemoCoverAmount(DocumentType,ServiceTypeReverseCharge,ReverseChargeType,PoT,
        InvoiceAmountIs::Greater,InvGenJournalLine,CrMemoGenJournalLine);

      ReverseServiceTaxHelper.GetServiceTaxEntryDetail(ServiceTaxEntryDetails,InvGenJournalLine."Document No.");
      SalesInvoiceAmount := InvGenJournalLine.Amount - ABS(CrMemoGenJournalLine.Amount);
      STEntryDetailsDifference := ServiceTaxEntryDetails;
      STEntryDetailsDifference."Base Amount" := SalesInvoiceAmount;
      PostedSalesInvoiceNo := ReverseServiceTaxHelper.PostEqualAmountSalesDoc(STEntryDetailsDifference);
      LibraryServiceTax.PayServiceTax(ServiceTaxEntryDetails."Service Tax Registration No.",
        ServiceTaxEntryDetails."Service Tax Group Code",FALSE);

      // Verify:
      RevChargeCreditClosed := TRUE;
      RealCreditClosed := TRUE;
      ServiceTaxSetup.FindOnDate(InvGenJournalLine."Service Tax Group Code",InvGenJournalLine."Posting Date");
      ServiceTaxVerify.ServTaxEntryDetails(InvGenJournalLine."Document No.",ServiceTaxEntryDetails."Base Amount",
        ServiceTaxSetup,RevChargeCreditClosed,RealCreditClosed);

      ReverseServiceTaxHelper.GetServiceTaxEntryDetail(ServiceTaxEntryDetails,CrMemoGenJournalLine."Document No.");
      ServiceTaxVerify.ServTaxEntryDetails(InvGenJournalLine."Document No.",ServiceTaxEntryDetails."Base Amount",
        ServiceTaxSetup,RevChargeCreditClosed,RealCreditClosed);

      ServiceTaxVerify.ServTaxEntryStatus(PostedSalesInvoiceNo,RevChargeCreditClosed,RealCreditClosed);
    END;

    [Test]
    PROCEDURE ApplyInvOnCrMemoWOServTax@1500033();
    VAR
      PurchaseHeader@1500001 : Record 38;
      PurchaseLine@1500003 : Record 39;
      VendorLedgerEntry@1500010 : Record 25;
      VendorNo@1500007 : Code[20];
      PostedInvoiceNo@1500009 : Code[20];
      PostedCrMNo@1500002 : Code[20];
    BEGIN
      // Acceptance Test 7 an invoice with service tax applied on credit memo wo service tax Error is expected
      Initialize;

      VendorNo := ReverseServiceTaxHelper.CreateVendor;
      PostedInvoiceNo := ReverseServiceTaxHelper.PostPurchaseDocForVendor(
          PurchaseHeader,PurchaseLine,VendorNo,PurchaseHeader."Document Type"::Invoice,ServiceTaxType::Standard,FALSE);
      PostedCrMNo := ReverseServiceTaxHelper.PostPurchaseDocWOServTax(PurchaseHeader."Document Type"::"Credit Memo",VendorNo);

      ASSERTERROR ReverseServiceTaxHelper.ApplyAndPostVendorEntry(PurchaseHeader."Document Type"::Invoice,PostedInvoiceNo,
          VendorLedgerEntry."Document Type"::"Credit Memo",PostedCrMNo);

      Assert.ExpectedError(ServiceTaxApplicationErr);
    END;

    [Test]
    PROCEDURE ApplyInOnCrMemoWOServTaxOnline@1500006();
    VAR
      PurchaseHeader@1500009 : Record 38;
      PurchaseLine@1500008 : Record 39;
      PurchaseHeaderCrM@1500007 : Record 38;
      PurchaseLineCrM@1500006 : Record 39;
      VendorNo@1500003 : Code[20];
      PostedInvoiceNo@1500002 : Code[20];
    BEGIN
      Initialize;
      // Setup:

      VendorNo := ReverseServiceTaxHelper.CreateVendor;
      PostedInvoiceNo := ReverseServiceTaxHelper.PostPurchaseDocForVendor(PurchaseHeader,PurchaseLine,
          VendorNo,PurchaseHeader."Document Type"::Invoice,ServiceTaxType::Standard,FALSE);

      LibraryPurchase.CreatePurchHeader(PurchaseHeaderCrM,PurchaseHeaderCrM."Document Type"::"Credit Memo",VendorNo);
      PurchaseHeaderCrM.VALIDATE("Posting Date",PurchaseHeader."Posting Date");
      PurchaseHeaderCrM.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeaderCrM.VALIDATE(PoT,FALSE);
      PurchaseHeaderCrM.VALIDATE("Service Tax Rounding Precision",ReverseServiceTaxHelper.GetServTaxRoundingPrecision);
      PurchaseHeaderCrM.VALIDATE("Applies-to Doc. Type",PurchaseHeader."Document Type"::Invoice);
      PurchaseHeaderCrM.VALIDATE("Applies-to Doc. No.",PostedInvoiceNo);
      PurchaseHeaderCrM.MODIFY(TRUE);

      LibraryPurchase.CreatePurchaseLine(PurchaseLineCrM,PurchaseHeaderCrM,
        PurchaseLine.Type::"G/L Account",ReverseServiceTaxHelper.CreateGLAccount(''),1);
      PurchaseLineCrM.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(1000,2));
      PurchaseLineCrM.MODIFY(TRUE);
      ASSERTERROR ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeaderCrM);

      Assert.ExpectedError(ServiceTaxApplicationErr);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE BlockedUnapplyCrMAndInvNonPot@1500000();
    VAR
      InvGenJournalLine@1500000 : Record 81;
      CrMemoGenJournalLine@1500001 : Record 81;
      ServiceTaxEntryDetails@1500002 : Record 16474;
    BEGIN
      Initialize;

      WITH InvGenJournalLine DO BEGIN
        ApplyDocOnCrMemoCoverAmount(
          "Document Type"::Invoice,"Service Type (Rev. Chrg.)"::" ",ServiceTaxType::" ",FALSE,
          InvoiceAmountIs::Greater,InvGenJournalLine,CrMemoGenJournalLine);
        PayForRemainingInvoiceAmt(InvGenJournalLine);
        ReverseServiceTaxHelper.UseCreditToPayForSalesDoc(CrMemoGenJournalLine."Document No.",ServiceTaxEntryDetails);

        ASSERTERROR ReverseServiceTaxHelper.UnapplyVendorLedgerEntry("Document No.");
        Assert.ExpectedError(UnapplyOfUsedCreditErr);
      END;
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE BlockedUnapplyCrMAndInvPot@1500031();
    VAR
      InvGenJournalLine@1500000 : Record 81;
      CrMemoGenJournalLine@1500001 : Record 81;
      ServiceTaxEntryDetails@1500002 : Record 16474;
    BEGIN
      Initialize;

      WITH InvGenJournalLine DO BEGIN
        ApplyDocOnCrMemoCoverAmount(
          "Document Type"::Invoice,"Service Type (Rev. Chrg.)"::" ",ServiceTaxType::" ",TRUE,
          InvoiceAmountIs::Greater,InvGenJournalLine,CrMemoGenJournalLine);
        ReverseServiceTaxHelper.UseCreditToPayForSalesDoc("Document No.",ServiceTaxEntryDetails);

        ASSERTERROR ReverseServiceTaxHelper.UnapplyVendorLedgerEntry("Document No.");
        Assert.ExpectedError(UnapplyOfUsedCreditErr);
      END;
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE BlockedUnapplyCrMAndInvRevChrg@1500001();
    VAR
      InvGenJournalLine@1500000 : Record 81;
      CrMemoGenJournalLine@1500001 : Record 81;
    BEGIN
      Initialize;

      WITH InvGenJournalLine DO BEGIN
        ApplyDocOnCrMemoCoverAmount(
          "Document Type"::Invoice,"Service Type (Rev. Chrg.)"::Inward,ServiceTaxType::Standard,FALSE,
          InvoiceAmountIs::Greater,InvGenJournalLine,CrMemoGenJournalLine);
        PayForRemainingInvoiceAmt(InvGenJournalLine);
        ReverseServiceTaxHelper.PayServiceTax("Service Tax Registration No.","Service Tax Group Code",TRUE);

        ASSERTERROR ReverseServiceTaxHelper.UnapplyVendorLedgerEntry("Document No.");
        Assert.ExpectedError(UnapplyOfUsedCreditErr);
      END;
    END;

    [Test]
    PROCEDURE GLRegisterFromToSTEntryNo@1500015();
    VAR
      InvGenJournalLine@1500001 : Record 81;
      CrMemoGenJournalLine@1500000 : Record 81;
      PurchaseHeader@1500002 : Record 38;
      GLRegister@1500003 : Record 45;
      ToSTEntryNo@1500004 : Integer;
    BEGIN
      Initialize;
      IF GLRegister.FINDLAST THEN;

      ApplyDocOnCrMemoCoverAmount(
        PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::" ",
        ServiceTaxType::" ",FALSE,InvoiceAmountIs::Equal,InvGenJournalLine,CrMemoGenJournalLine);

      GLRegister.SETFILTER("No.",'>%1',GLRegister."No.");
      Assert.AreEqual(2,GLRegister.COUNT,WrongGLRegCountErr);
      GLRegister.FINDSET;
      ToSTEntryNo := GLRegister."To ST Entry No.";
      VerifyServTaxEntryFromGLReg(GLRegister,InvGenJournalLine."Document No.");
      GLRegister.NEXT;
      Assert.AreEqual(ToSTEntryNo + 1,GLRegister."From ST Entry No.",GLRegFromToSTEntryNoErr);
      VerifyServTaxEntryFromGLReg(GLRegister,CrMemoGenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE InvCrMemoOfflAppDiffServGrpErr@1500002();
    VAR
      ServiceTaxGroup@1500015 : Record 16471;
      PurchaseHeader@1500014 : Record 38;
      PurchaseLine@1500013 : Record 39;
      PurchaseHeaderCrM@1500012 : Record 38;
      VendorLedgerEntry@1500011 : Record 25;
      PurchaseLineCrM@1500010 : Record 39;
      ServRegNo@1500008 : Code[20];
      VendorNo@1500007 : Code[20];
      PostedInvoiceNo@1500006 : Code[20];
      PostedCrMNo@1500005 : Code[20];
      Amount@1500003 : Decimal;
      ServiceTypeReverseCharge@1500000 : Option;
    BEGIN
      Initialize;
      ServiceTypeReverseCharge := PurchaseHeader."Service Type (Rev. Chrg.)"::Inward;

      // Post Invoice
      ReverseServiceTaxHelper.CreateServiceTaxGroupSetup(ServiceTaxGroup);
      VendorNo := ReverseServiceTaxHelper.CreateVendor;
      ServRegNo := ReverseServiceTaxHelper.CreateServTaxRegNo;
      Amount := 10000;
      PostedInvoiceNo := ReverseServiceTaxHelper.PostPurchaseDocForVendWithAmt(
          PurchaseHeader,PurchaseLine,VendorNo,PurchaseHeader."Document Type"::Invoice,
          ServiceTypeReverseCharge,ServiceTaxType::Standard,FALSE,ServRegNo,ServiceTaxGroup.Code,Amount);

      // Post Cr. Memo with different service tax group
      ReverseServiceTaxHelper.CreateNewServGrpForRevChPLine(PurchaseLine,ServiceTaxGroup);
      PostedCrMNo := ReverseServiceTaxHelper.PostPurchaseDocForVendWithAmt(
          PurchaseHeaderCrM,PurchaseLineCrM,VendorNo,
          PurchaseHeaderCrM."Document Type"::"Credit Memo",ServiceTypeReverseCharge,
          ServiceTaxType::Standard,FALSE,ServRegNo,ServiceTaxGroup.Code,Amount);

      // Try to apply
      ASSERTERROR ReverseServiceTaxHelper.ApplyAndPostVendorEntry(VendorLedgerEntry."Document Type"::Invoice,PostedInvoiceNo,
          VendorLedgerEntry."Document Type"::"Credit Memo",PostedCrMNo);
      Assert.ExpectedError(ServiceTaxGroupCodeErr);
    END;

    [Test]
    PROCEDURE InvCrMemoOfflAppDiffSRegNoErr@1500003();
    VAR
      ServiceTaxGroup@1500010 : Record 16471;
      ServiceTaxRegistrationNos@1500011 : Record 16475;
      PurchaseHeader@1500009 : Record 38;
      PurchaseLine@1500008 : Record 39;
      PurchaseHeaderCrM@1500007 : Record 38;
      VendorLedgerEntry@1500006 : Record 25;
      PurchaseLineCrM@1500005 : Record 39;
      ServRegNo@1500004 : Code[20];
      VendorNo@1500003 : Code[20];
      PostedInvoiceNo@1500002 : Code[20];
      PostedCrMNo@1500001 : Code[20];
      Amount@1500000 : Decimal;
      ServiceTypeReverseCharge@1500012 : Option;
    BEGIN
      Initialize;
      ServiceTypeReverseCharge := PurchaseHeader."Service Type (Rev. Chrg.)"::Inward;

      // Post Invoice
      ReverseServiceTaxHelper.CreateServiceTaxGroupSetup(ServiceTaxGroup);
      VendorNo := ReverseServiceTaxHelper.CreateVendor;
      ServRegNo := ReverseServiceTaxHelper.CreateServTaxRegNo;
      Amount := 10000;
      PostedInvoiceNo := ReverseServiceTaxHelper.PostPurchaseDocForVendWithAmt(
          PurchaseHeader,PurchaseLine,VendorNo,PurchaseHeader."Document Type"::Invoice,
          ServiceTypeReverseCharge,ServiceTaxType::Standard,FALSE,ServRegNo,ServiceTaxGroup.Code,Amount);

      // Post Cr. Memo with different service tax registration no.
      ReverseServiceTaxHelper.CreateNewSRegNoForRevChPLine(PurchaseLine,ServiceTaxRegistrationNos);
      PostedCrMNo := ReverseServiceTaxHelper.PostPurchaseDocForVendWithAmt(
          PurchaseHeaderCrM,PurchaseLineCrM,VendorNo,
          PurchaseHeaderCrM."Document Type"::"Credit Memo",ServiceTypeReverseCharge,
          ServiceTaxType::Standard,FALSE,ServiceTaxRegistrationNos.Code,ServiceTaxGroup.Code,Amount);

      // Try to apply
      ASSERTERROR ReverseServiceTaxHelper.ApplyAndPostVendorEntry(VendorLedgerEntry."Document Type"::Invoice,PostedInvoiceNo,
          VendorLedgerEntry."Document Type"::"Credit Memo",PostedCrMNo);
      Assert.ExpectedError(ServiceTaxRegNoErr);
    END;

    [Test]
    PROCEDURE InvCrMemoOnlAppDiffServGrpErr@1500010();
    VAR
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500004 : Record 39;
      ServiceTaxGroup@1500000 : Record 16471;
      ServiceTaxGroupNew@1500001 : Record 16471;
      PostedInvoiceNo@1500002 : Code[20];
      ServTaxRegNo@1500005 : Code[10];
    BEGIN
      Initialize;
      ReverseServiceTaxHelper.CreateServiceTaxGroupSetup(ServiceTaxGroup);
      ServTaxRegNo := ReverseServiceTaxHelper.CreateServTaxRegNo;
      PostedInvoiceNo := ReverseServiceTaxHelper.PostPurchaseDocForVendWithAmt(
          PurchaseHeader,PurchaseLine,ReverseServiceTaxHelper.CreateVendor,
          PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,
          ServiceTaxType::Standard,FALSE,ServTaxRegNo,ServiceTaxGroup.Code,LibraryRandom.RandDec(1000,2));

      ReverseServiceTaxHelper.CreateNewServGrpForRevChPLine(PurchaseLine,ServiceTaxGroupNew);
      ASSERTERROR PostAndOnlineApplyCrMemo(PurchaseHeader,PostedInvoiceNo,ServiceTaxGroupNew.Code,ServTaxRegNo);

      Assert.ExpectedError(ServiceTaxGroupCodeErr);
    END;

    [Test]
    PROCEDURE InvCrMemoOnlAppDiffSRegNoErr@1500013();
    VAR
      PurchaseHeader@1500005 : Record 38;
      PurchaseLine@1500004 : Record 39;
      ServiceTaxGroup@1500003 : Record 16471;
      ServiceTaxRegistrationNos@1500002 : Record 16475;
      PostedInvoiceNo@1500001 : Code[20];
    BEGIN
      Initialize;
      ReverseServiceTaxHelper.CreateServiceTaxGroupSetup(ServiceTaxGroup);
      PostedInvoiceNo := ReverseServiceTaxHelper.PostPurchaseDocForVendWithAmt(
          PurchaseHeader,PurchaseLine,ReverseServiceTaxHelper.CreateVendor,
          PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,
          ServiceTaxType::Standard,FALSE,ReverseServiceTaxHelper.CreateServTaxRegNo,
          ServiceTaxGroup.Code,LibraryRandom.RandDec(1000,2));

      ReverseServiceTaxHelper.CreateNewSRegNoForRevChPLine(PurchaseLine,ServiceTaxRegistrationNos);
      ASSERTERROR PostAndOnlineApplyCrMemo(PurchaseHeader,PostedInvoiceNo,ServiceTaxGroup.Code,ServiceTaxRegistrationNos.Code);

      Assert.ExpectedError(ServiceTaxRegNoErr);
    END;

    [Test]
    PROCEDURE InvCrMJnlOnlAppDiffServGrpErr@1500049();
    VAR
      GenJournalLine@1500000 : Record 81;
      PostedInvoiceNo@1500001 : Code[20];
    BEGIN
      Initialize;
      PostedInvoiceNo := ReverseServiceTaxHelper.PostPurchDocFromGenJnl(
          GenJournalLine,ServiceTaxType::Standard,GenJournalLine."Document Type"::Invoice,FALSE);

      ReverseServiceTaxHelper.AlterServiceTaxGrpInJnlLine(GenJournalLine);
      ASSERTERROR PostAndOnlineApplyCrMJnl(GenJournalLine,GenJournalLine."Document Type",PostedInvoiceNo);

      Assert.ExpectedError(ServiceTaxGroupCodeErr);
    END;

    [Test]
    PROCEDURE InvCrMJnlOnlAppDiffSRegNoErr@1500057();
    VAR
      GenJournalLine@1500001 : Record 81;
      PostedInvoiceNo@1500000 : Code[20];
    BEGIN
      Initialize;
      PostedInvoiceNo := ReverseServiceTaxHelper.PostPurchDocFromGenJnl(
          GenJournalLine,ServiceTaxType::Standard,GenJournalLine."Document Type"::Invoice,FALSE);

      ReverseServiceTaxHelper.AlterServiceTaxRegNoInJnlLine(GenJournalLine);
      ASSERTERROR PostAndOnlineApplyCrMJnl(GenJournalLine,GenJournalLine."Document Type",PostedInvoiceNo);

      Assert.ExpectedError(ServiceTaxRegNoErr);
    END;

    [Test]
    [HandlerFunctions(STaxCreditRegisterReportHandler)]
    PROCEDURE RepServTaxCreditRegisterGreaterInvoice@1500016();
    VAR
      InvGenJournalLine@1500011 : Record 81;
      CrMemoGenJournalLine@1500010 : Record 81;
      ServiceTaxSetup@1500000 : Record 16472;
      InvoiceTaxAmount@1500009 : Decimal;
      CrMemoTaxAmount@1500008 : Decimal;
      SBCAmount@1500001 : Decimal;
      KKCAmount@1500002 : Decimal;
      CrSBCAmount@1500003 : Decimal;
      CrKKCAmount@1500004 : Decimal;
    BEGIN
      Initialize;

      ApplyDocOnCrMemoCoverAmount(
        InvGenJournalLine."Document Type"::Invoice,
        InvGenJournalLine."Service Type (Rev. Chrg.)"::" ",
        ServiceTaxType::" ",TRUE,InvoiceAmountIs::Greater,
        InvGenJournalLine,CrMemoGenJournalLine);

      ServiceTaxReportHelper.RunReportServiceTaxCreditRegister(InvGenJournalLine,TRUE);

      ServiceTaxSetup.FindOnDate(InvGenJournalLine."Service Tax Group Code",InvGenJournalLine."Posting Date");
      InvoiceTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(InvGenJournalLine.Amount,ServiceTaxSetup);
      CrMemoTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(-CrMemoGenJournalLine.Amount,ServiceTaxSetup);
      SBCAmount := ReverseServiceTaxHelper.CalculateSBC(InvGenJournalLine.Amount,ServiceTaxSetup);
      KKCAmount := ReverseServiceTaxHelper.CalculateKKCess(InvGenJournalLine.Amount,ServiceTaxSetup);
      CrKKCAmount := ReverseServiceTaxHelper.CalculateKKCess(-CrMemoGenJournalLine.Amount,ServiceTaxSetup);
      CrSBCAmount := ReverseServiceTaxHelper.CalculateSBC(-CrMemoGenJournalLine.Amount,ServiceTaxSetup);

      ServiceTaxReportHelper.LoadDataSetFile;
      ServiceTaxReportHelper.AssertRowCount(3);
      ServiceTaxReportHelper.VerifyServTaxCreditRegisterApplication(InvoiceTaxAmount + CrMemoTaxAmount);
      ServiceTaxReportHelper.VerifyServTaxCreditRegisterCreditMemoInvCreditAvailed(
        InvGenJournalLine.Amount + KKCAmount + SBCAmount,
        InvoiceTaxAmount,-CrMemoGenJournalLine.Amount + CrKKCAmount + CrSBCAmount,CrMemoTaxAmount);
    END;

    [Test]
    [HandlerFunctions(ServTaxRegisterReportHandler)]
    PROCEDURE ServTaxRegisterForPoTCrMAppliedToInv@1500027();
    VAR
      PurchaseHeader@1500012 : Record 38;
      InvGenJournalLine@1500011 : Record 81;
      CrMemoGenJournalLine@1500010 : Record 81;
    BEGIN
      Initialize;

      ApplyDocOnCrMemoCoverAmount(
        PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::" ",ServiceTaxType::" ",
        TRUE,InvoiceAmountIs::Greater,InvGenJournalLine,CrMemoGenJournalLine);

      ServiceTaxReportHelper.RunReportServiceTaxRegister(InvGenJournalLine);

      ServiceTaxReportHelper.VerifyServTaxRegisterCrMAppliedToInvPoT(InvGenJournalLine,CrMemoGenJournalLine);
    END;

    [Test]
    [HandlerFunctions(ServTaxRegisterReportHandler)]
    PROCEDURE ServTaxRegisterForRevChrgCrMAppliedToInv@1500028();
    VAR
      PurchaseHeader@1500002 : Record 38;
      InvGenJournalLine@1500001 : Record 81;
      CrMemoGenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;

      ApplyDocOnCrMemoCoverAmount(
        PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,ServiceTaxType::Standard,
        FALSE,InvoiceAmountIs::Greater,InvGenJournalLine,CrMemoGenJournalLine);

      ServiceTaxReportHelper.RunReportServiceTaxRegister(InvGenJournalLine);

      ServiceTaxReportHelper.VerifyServTaxRegisterCrMAppliedToInvRevChrg(InvGenJournalLine,CrMemoGenJournalLine);
    END;

    [Test]
    [TransactionModel(AutoCommit)]
    PROCEDURE UnapplyCrMAndInvNonPot@1500009();
    VAR
      InvGenJournalLine@1500000 : Record 81;
      CrMemoGenJournalLine@1500001 : Record 81;
      ApplyTransactionNo@1500003 : Integer;
      LastTransactionNo@1500004 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      WITH InvGenJournalLine DO BEGIN
        ApplyDocOnCrMemoCoverAmount(
          "Document Type"::Invoice,"Service Type (Rev. Chrg.)"::" ",ServiceTaxType::" ",FALSE,
          InvoiceAmountIs::Greater,InvGenJournalLine,CrMemoGenJournalLine);
        ApplyTransactionNo := ReverseServiceTaxHelper.GetLastTransactionNo;

        ReverseServiceTaxHelper.UnapplyVendorLedgerEntry("Document No.");

        ServiceTaxVerify.UnappliedSTEntryDetails(ApplyTransactionNo);
        ServiceTaxVerify.DocHasClosedRemCredit(CrMemoGenJournalLine."Document No.");
        VerifyUnappliedCrMemo(CrMemoGenJournalLine,InvGenJournalLine,LastTransactionNo);
      END;
    END;

    [Test]
    PROCEDURE UnapplyCrMAndInvPot@1500005();
    VAR
      InvGenJournalLine@1500000 : Record 81;
      CrMemoGenJournalLine@1500001 : Record 81;
      ApplyTransactionNo@1500003 : Integer;
      LastTransactionNo@1500004 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      WITH InvGenJournalLine DO BEGIN
        ApplyDocOnCrMemoCoverAmount(
          "Document Type"::Invoice,"Service Type (Rev. Chrg.)"::" ",ServiceTaxType::" ",TRUE,
          InvoiceAmountIs::Greater,InvGenJournalLine,CrMemoGenJournalLine);
        ApplyTransactionNo := ReverseServiceTaxHelper.GetLastTransactionNo;

        ReverseServiceTaxHelper.UnapplyVendorLedgerEntry("Document No.");

        ServiceTaxVerify.InitialRemainingCredit(LastTransactionNo,ApplyTransactionNo);
        ServiceTaxVerify.ServTaxEntriesArePaid(ApplyTransactionNo);
        VerifyUnappliedCrMemo(CrMemoGenJournalLine,InvGenJournalLine,LastTransactionNo);
      END;
    END;

    [Test]
    PROCEDURE UnapplyCrMAndInvRevChrg@1500004();
    VAR
      InvGenJournalLine@1500000 : Record 81;
      CrMemoGenJournalLine@1500001 : Record 81;
      ApplyTransactionNo@1500002 : Integer;
      LastTransactionNo@1500003 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      WITH InvGenJournalLine DO BEGIN
        ApplyDocOnCrMemoCoverAmount(
          "Document Type"::Invoice,"Service Type (Rev. Chrg.)"::Inward,ServiceTaxType::Standard,FALSE,
          InvoiceAmountIs::Greater,InvGenJournalLine,CrMemoGenJournalLine);
        ApplyTransactionNo := ReverseServiceTaxHelper.GetLastTransactionNo;

        ReverseServiceTaxHelper.UnapplyVendorLedgerEntry("Document No.");

        ServiceTaxVerify.UnappliedSTEntryDetails(ApplyTransactionNo);
        ServiceTaxVerify.DocHasClosedRemCredit(CrMemoGenJournalLine."Document No.");
        VerifyUnappliedCrMemo(CrMemoGenJournalLine,InvGenJournalLine,LastTransactionNo);
      END;
    END;

    [Test]
    [HandlerFunctions(InputServiceDetailsReportHandler)]
    PROCEDURE InputServiceDetailsApplyCrMemoOnGreaterInvPoT@1500008();
    VAR
      PurchaseHeader@1500000 : Record 38;
      InvGenJournalLine@1500002 : Record 81;
      CrMemoGenJournalLine@1500001 : Record 81;
      ServiceTaxSetup@1500005 : Record 16472;
    BEGIN
      Initialize;

      ApplyDocOnCrMemoCoverAmount(
        PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::" ",ServiceTaxType::" ",TRUE,InvoiceAmountIs::Greater,
        InvGenJournalLine,CrMemoGenJournalLine);

      ServiceTaxReportHelper.RunReportInputServiceDetails(InvGenJournalLine);

      ServiceTaxSetup.FindOnDate(InvGenJournalLine."Service Tax Group Code",InvGenJournalLine."Posting Date");
      ServiceTaxReportHelper.VerifyInputServiceDetails(InvGenJournalLine.Amount,-CrMemoGenJournalLine.Amount,InvGenJournalLine."Document No.",CrMemoGenJournalLine."Document No.",ServiceTaxSetup);
    END;

    [Test]
    [HandlerFunctions(InputServiceDetailsReportHandler)]
    PROCEDURE InputServiceDetailsApplyCrMemoOnGreaterInvoiceRC@1500044();
    VAR
      PurchaseHeader@1500000 : Record 38;
      InvGenJournalLine@1500005 : Record 81;
      CrMemoGenJournalLine@1500004 : Record 81;
    BEGIN
      Initialize;

      ApplyDocOnCrMemoCoverAmount(
        PurchaseHeader."Document Type"::Invoice,PurchaseHeader."Service Type (Rev. Chrg.)"::Inward,ServiceTaxType::Standard,FALSE,InvoiceAmountIs::Greater,
        InvGenJournalLine,CrMemoGenJournalLine);

      ServiceTaxReportHelper.RunReportInputServiceDetails(InvGenJournalLine);

      ServiceTaxReportHelper.VerifyReportIsEmpty;
    END;

    LOCAL PROCEDURE Initialize@1500100() : Integer;
    BEGIN
      LibraryRandom.SetSeed(1);

      IF isInitialized THEN
        EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);

      LibraryServiceTax.CreateServiceTaxReturnPeriod;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      COMMIT;

      isInitialized := TRUE;

      EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);
    END;

    LOCAL PROCEDURE ApplyDocOnCrMemo@1500017(DocumentType@1500000 : Option;ServiceTypeReverseCharge@1500006 : Option;ReverseChargeType@1500001 : Option;PoT@1500012 : Boolean;InvAmountIs@1500020 : Option);
    VAR
      InvGenJournalLine@1500009 : Record 81;
      CrMemoGenJournalLine@1500008 : Record 81;
      ServiceTaxSetup@1500014 : Record 16472;
      InvoiceTaxAmount@1500016 : Decimal;
      CrMemoTaxAmount@1500021 : Decimal;
      LastTransactionNo@1500002 : Integer;
      SmallerDocumentNo@1500003 : Code[20];
    BEGIN
      LastTransactionNo := Initialize;

      ApplyDocOnCrMemoCoverAmount(
        DocumentType,ServiceTypeReverseCharge,ReverseChargeType,PoT,InvAmountIs,
        InvGenJournalLine,CrMemoGenJournalLine);

      // Verify
      ServiceTaxVerify.VendorLedgerEntryOpen(InvGenJournalLine."Document No.",InvAmountIs = InvoiceAmountIs::Greater);
      ServiceTaxVerify.VendorLedgerEntryOpen(CrMemoGenJournalLine."Document No.",InvAmountIs = InvoiceAmountIs::Smaller);

      ServiceTaxSetup.FindOnDate(InvGenJournalLine."Service Tax Group Code",InvGenJournalLine."Posting Date");
      ServiceTaxVerify.ServTaxEntry(InvGenJournalLine."Document No.",InvGenJournalLine.Amount,ServiceTaxSetup);
      ServiceTaxVerify.ServTaxEntry(CrMemoGenJournalLine."Document No.",-CrMemoGenJournalLine.Amount,ServiceTaxSetup);

      InvoiceTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(InvGenJournalLine.Amount,ServiceTaxSetup);
      CrMemoTaxAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(-CrMemoGenJournalLine.Amount,ServiceTaxSetup);
      ServiceTaxVerify.PostedPurchDocGLBalance(ServiceTaxSetup,ReverseChargeType,PoT,InvoiceTaxAmount + CrMemoTaxAmount);
      IF ReverseChargeType = ServiceTaxType::" " THEN
        IF PoT THEN BEGIN
          ServiceTaxVerify.STEntryDetailsRemainingCredit(LastTransactionNo,InvoiceTaxAmount + CrMemoTaxAmount);
          ServiceTaxVerify.ServTaxEntriesArePaid(ReverseServiceTaxHelper.GetLastTransactionNo);
        END ELSE
          ServiceTaxVerify.STEntryDetailsRemainingCredit(LastTransactionNo,0)
      ELSE
        ServiceTaxVerify.STEntryDetailsRemRevChrgCredit(LastTransactionNo,0);

      IF InvAmountIs = InvoiceAmountIs::Greater THEN
        SmallerDocumentNo := CrMemoGenJournalLine."Document No."
      ELSE
        SmallerDocumentNo := InvGenJournalLine."Document No.";
      ServiceTaxVerify.DocHasClosedRemCredit(SmallerDocumentNo);
    END;

    LOCAL PROCEDURE ApplyDocOnCrMemoCoverAmount@1500086(DocumentType@1500003 : Option;ServiceTypeReverseCharge@1500008 : Option;ReverseChargeType@1500002 : Option;PoT@1500001 : Boolean;InvAmountIs@1500000 : Option;VAR InvGenJournalLine@1500010 : Record 81;VAR CrMemoGenJournalLine@1500011 : Record 81);
    VAR
      ServiceTaxGroup@1500025 : Record 16471;
      PurchaseHeader@1500024 : Record 38;
      PurchaseLine@1500023 : Record 39;
      PurchaseHeaderCreditMemo@1500022 : Record 38;
      PurchaseLineCreditMemo@1500020 : Record 39;
      ServiceTaxSetup@1500006 : Record 16472;
      Amount@1500013 : Decimal;
      PostedPurchInvoiceNo@1500004 : Code[20];
      PostedCreditMemoNo@1500005 : Code[20];
    BEGIN
      ReverseServiceTaxHelper.CreateServiceTaxGroupSetup(ServiceTaxGroup);

      Amount := LibraryRandom.RandDec(10000,2);
      PostedPurchInvoiceNo := ReverseServiceTaxHelper.PostPurchaseDocForVendWithAmt(
          PurchaseHeader,PurchaseLine,ReverseServiceTaxHelper.CreateVendor,DocumentType,ServiceTypeReverseCharge,
          ReverseChargeType,PoT,ReverseServiceTaxHelper.CreateServTaxRegNo,ServiceTaxGroup.Code,
          ReverseServiceTaxHelper.GetPurchInvAmountFactor(InvAmountIs) * Amount);
      PostedCreditMemoNo := ReverseServiceTaxHelper.PostPurchaseDocForVendWithAmt(
          PurchaseHeaderCreditMemo,PurchaseLineCreditMemo,PurchaseHeader."Pay-to Vendor No.",
          PurchaseHeaderCreditMemo."Document Type"::"Credit Memo",ServiceTypeReverseCharge,
          ReverseChargeType,PoT,PurchaseLine."Service Tax Registration No.",ServiceTaxGroup.Code,Amount);

      ServiceTaxSetup.FindOnDate(ServiceTaxGroup.Code,PurchaseHeader."Posting Date");

      ApplyCreditMemoToInvoice(PostedPurchInvoiceNo,PostedCreditMemoNo);

      ReverseServiceTaxHelper.ConvertDocToJnlLine(PurchaseHeader,PurchaseLine,PostedPurchInvoiceNo,InvGenJournalLine);
      ReverseServiceTaxHelper.ConvertDocToJnlLine(PurchaseHeaderCreditMemo,PurchaseLineCreditMemo,
        PostedCreditMemoNo,CrMemoGenJournalLine);
    END;

    LOCAL PROCEDURE ApplyTwoDocOnCrMemo@1500019(DocumentType@1500000 : Option;ServiceTypeReverseCharge@1500006 : Option;ReverseChargeType@1500001 : Option;PoT@1500012 : Boolean);
    VAR
      ServiceTaxSetup@1500005 : Record 16472;
      PostedInvoiceNo@1500004 : Code[20];
      PostedInvoiceNo2@1500014 : Code[20];
      PostedCreditMemoNo@1500003 : Code[20];
    BEGIN
      ApplyTwoDocOnCrMemoCoverAmount(
        PostedInvoiceNo,PostedInvoiceNo2,PostedCreditMemoNo,ServiceTaxSetup,
        DocumentType,ServiceTypeReverseCharge,ReverseChargeType,PoT,CrMemoAmtCovers::BothPurchInvAmts);

      ServiceTaxVerify.DocHasClosedRemCredit(PostedInvoiceNo);
      ServiceTaxVerify.DocHasClosedRemCredit(PostedInvoiceNo2);
      ServiceTaxVerify.DocHasClosedRemCredit(PostedCreditMemoNo);
      ServiceTaxVerify.GLBalanceReceivablesOnly(ServiceTaxSetup,0);
    END;

    LOCAL PROCEDURE ApplyTwoDocOnCrMemoCoverAmount@1500036(VAR PostedFirstInvoiceNo@1500020 : Code[20];VAR PostedSecondInvoiceNo@1500021 : Code[20];VAR PostedCreditMemoNo@1500022 : Code[20];VAR ServiceTaxSetup@1500006 : Record 16472;DocumentType@1500002 : Option;ServiceTypeReverseCharge@1500007 : Option;ReverseChargeType@1500001 : Option;PoT@1500000 : Boolean;CrMemoAmountCoversInvAmount@1500018 : Option);
    VAR
      ServiceTaxGroup@1500005 : Record 16471;
      PurchaseHeader@1500016 : Record 38;
      PurchaseLine@1500015 : Record 39;
      PurchaseHeader2@1500014 : Record 38;
      PurchaseLine2@1500013 : Record 39;
      PurchaseHeaderCrM@1500012 : Record 38;
      PurchaseLineCrM@1500011 : Record 39;
      ServRegNo@1500009 : Code[20];
      VendorNo@1500008 : Code[20];
      Amount1@1500004 : Decimal;
      Amount2@1500003 : Decimal;
      CreditMemoAmount@1500019 : Decimal;
    BEGIN
      Initialize;

      ReverseServiceTaxHelper.CreateServiceTaxGroupSetup(ServiceTaxGroup);
      VendorNo := ReverseServiceTaxHelper.CreateVendor;
      ServRegNo := ReverseServiceTaxHelper.CreateServTaxRegNo;

      Amount1 := LibraryRandom.RandDec(10000,2);
      Amount2 := LibraryRandom.RandDec(10000,2);

      PostedFirstInvoiceNo := ReverseServiceTaxHelper.PostPurchaseDocForVendWithAmt(PurchaseHeader,PurchaseLine,VendorNo,DocumentType,
          ServiceTypeReverseCharge,ReverseChargeType,PoT,ServRegNo,ServiceTaxGroup.Code,Amount1);
      PostedSecondInvoiceNo :=
        ReverseServiceTaxHelper.PostPurchaseDocForVendWithAmt(PurchaseHeader2,PurchaseLine2,VendorNo,DocumentType,
          ServiceTypeReverseCharge,ReverseChargeType,PoT,ServRegNo,ServiceTaxGroup.Code,Amount2);

      ServiceTaxSetup.FindOnDate(ServiceTaxGroup.Code,PurchaseHeader."Posting Date");

      CASE CrMemoAmountCoversInvAmount OF
        CrMemoAmtCovers::FirstPurchInvAmt:
          CreditMemoAmount := PurchaseLine."Line Amount";
        CrMemoAmtCovers::SecondPurchInvAmt:
          CreditMemoAmount := PurchaseLine2."Line Amount";
        CrMemoAmtCovers::BothPurchInvAmts:
          CreditMemoAmount := PurchaseLine."Line Amount" + PurchaseLine2."Line Amount";
      END;
      PostedCreditMemoNo := ReverseServiceTaxHelper.
        PostPurchaseDocForVendWithAmt(PurchaseHeaderCrM,PurchaseLineCrM,VendorNo,
          PurchaseHeaderCrM."Document Type"::"Credit Memo",ServiceTypeReverseCharge,ReverseChargeType,
          PoT,ServRegNo,ServiceTaxGroup.Code,CreditMemoAmount);

      CASE CrMemoAmountCoversInvAmount OF
        CrMemoAmtCovers::FirstPurchInvAmt:
          ApplyCreditMemoToInvoice(PostedFirstInvoiceNo,PostedCreditMemoNo);
        CrMemoAmtCovers::SecondPurchInvAmt:
          ApplyCreditMemoToInvoice(PostedSecondInvoiceNo,PostedCreditMemoNo);
        CrMemoAmtCovers::BothPurchInvAmts:
          BEGIN
            ApplyCreditMemoToInvoice(PostedFirstInvoiceNo,PostedCreditMemoNo);
            ApplyCreditMemoToInvoice(PostedSecondInvoiceNo,PostedCreditMemoNo)
          END;
      END;
    END;

    LOCAL PROCEDURE ApplyCreditMemoToInvoice@1500087(PostedInvoiceNo@1500000 : Code[20];AppliedCreditMemoNo@1500001 : Code[20]);
    VAR
      VendorLedgerEntry@1500002 : Record 25;
    BEGIN
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(VendorLedgerEntry."Document Type"::Invoice,PostedInvoiceNo,
        VendorLedgerEntry."Document Type"::"Credit Memo",AppliedCreditMemoNo);
    END;

    LOCAL PROCEDURE PayForRemainingInvoiceAmt@1500026(InvGenJournalLine@1500012 : Record 81);
    VAR
      PaymentDocNo@1500000 : Code[20];
    BEGIN
      PaymentDocNo := ReverseServiceTaxHelper.PostPayment(
        InvGenJournalLine."Account No.",-ReverseServiceTaxHelper.GetRemainingAmount(InvGenJournalLine."Document Type",
        InvGenJournalLine."Document No."),InvGenJournalLine."Posting Date",InvGenJournalLine."Document Type"::Payment);
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(
        InvGenJournalLine."Document Type",InvGenJournalLine."Document No.",InvGenJournalLine."Document Type"::Payment,PaymentDocNo);
    END;

    LOCAL PROCEDURE PostAndOnlineApplyCrMemo@1500030(InvoicePurchHeader@1500012 : Record 38;AppliesToDocNo@1500000 : Code[20];ServiceTaxGroupCode@1500002 : Code[10];ServiceTaxRegNo@1500003 : Code[10]) : Code[20];
    VAR
      PurchaseHeader@1500006 : Record 38;
      PurchaseInvoiceLine@1500001 : Record 123;
      PurchaseLine@1500010 : Record 39;
      CopyDocMgt@1500009 : Codeunit 6620;
      LinesNotCopied@1500005 : Integer;
      MissingExCostRevLink@1500007 : Boolean;
    BEGIN
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",InvoicePurchHeader."Buy-from Vendor No.");
      PurchaseHeader.VALIDATE("Posting Date",InvoicePurchHeader."Posting Date");
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE(PoT,InvoicePurchHeader.PoT);
      PurchaseHeader.VALIDATE("Service Tax Rounding Precision",ReverseServiceTaxHelper.GetServTaxRoundingPrecision);
      PurchaseHeader.VALIDATE("Applies-to Doc. Type",InvoicePurchHeader."Document Type");
      PurchaseHeader.VALIDATE("Applies-to Doc. No.",AppliesToDocNo);
      PurchaseHeader.VALIDATE("Service Type (Rev. Chrg.)",InvoicePurchHeader."Service Type (Rev. Chrg.)");
      PurchaseHeader.VALIDATE("Consignment Note No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      PurchaseInvoiceLine.SETFILTER("Document No.",AppliesToDocNo);
      PurchaseInvoiceLine.FINDFIRST;
      CopyDocMgt.SetProperties(FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,FALSE);
      CopyDocMgt.CopyPurchInvLinesToDoc(
        PurchaseHeader,PurchaseInvoiceLine,LinesNotCopied,MissingExCostRevLink);
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETFILTER("Service Tax Group",'<>%1','');
      PurchaseLine.FINDFIRST;
      PurchaseLine."Service Tax Group" := ServiceTaxGroupCode;
      PurchaseLine."Service Tax Registration No." := ServiceTaxRegNo;
      PurchaseLine.MODIFY(TRUE);
      EXIT(ReverseServiceTaxHelper.PostPurchaseDoc(PurchaseHeader));
    END;

    LOCAL PROCEDURE PostAndOnlineApplyCrMJnl@1500072(VAR GenJournalLine@1500000 : Record 81;AppliesToDocType@1500002 : Option;AppliesToDocNo@1500001 : Code[20]);
    VAR
      GenJournalBatch@1500004 : Record 232;
      DocumentType@1500003 : Integer;
    BEGIN
      DocumentType := GenJournalLine."Document Type"::"Credit Memo";
      ReverseServiceTaxHelper.CreateGenJournalBatch(GenJournalBatch);
      ReverseServiceTaxHelper.CreateJnlLineWithSTNoSetup(GenJournalLine,GenJournalBatch,DocumentType,
        GenJournalLine."Service Type (Rev. Chrg.)",GenJournalLine."Account No.",-GenJournalLine."Amount (LCY)",
        GenJournalLine."Posting Date",GenJournalLine."Service Tax Registration No.",
        GenJournalLine."Service Tax Group Code");
      ReverseServiceTaxHelper.CreateSTRevChrgSetupFromJnl(GenJournalLine,GenJournalLine."Service Type (Rev. Chrg.)",100);
      GenJournalLine.VALIDATE(PoT,FALSE);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",AppliesToDocType);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",AppliesToDocNo);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE VerifyUnappliedCrMemo@1500046(CrMemoGenJournalLine@1500000 : Record 81;InvGenJournalLine@1500001 : Record 81;LastTransactionNo@1500003 : Integer);
    VAR
      ServiceTaxSetup@1500005 : Record 16472;
      ExpectedFullRemainingCredit@1500004 : Decimal;
      ReverseChargeType@1500002 : Option;
    BEGIN
      ServiceTaxVerify.VendorLedgerEntryOpen(CrMemoGenJournalLine."Document No.",TRUE);
      ServiceTaxVerify.VendorLedgerEntryOpen(InvGenJournalLine."Document No.",TRUE);

      ServiceTaxSetup.FindOnDate(InvGenJournalLine."Service Tax Group Code",InvGenJournalLine."Posting Date");
      ExpectedFullRemainingCredit :=
        ReverseServiceTaxHelper.CalculateServTaxTotal(InvGenJournalLine.Amount,ServiceTaxSetup) -
        ReverseServiceTaxHelper.CalculateServTaxTotal(CrMemoGenJournalLine.Amount,ServiceTaxSetup);

      IF InvGenJournalLine.IsServTaxRevCharge THEN
        ReverseChargeType := ServiceTaxType::Standard;
      ServiceTaxVerify.PostedPurchDocGLBalance(ServiceTaxSetup,ReverseChargeType,InvGenJournalLine.PoT,ExpectedFullRemainingCredit);

      IF InvGenJournalLine.PoT THEN
        ServiceTaxVerify.STEntryDetailsRemainingCredit(LastTransactionNo,ExpectedFullRemainingCredit)
      ELSE
        ServiceTaxVerify.STEntryDetailsRemainingCredit(LastTransactionNo,0);
    END;

    LOCAL PROCEDURE VerifyServTaxEntryFromGLReg@1500032(GLRegister@1500000 : Record 45;DocumentNo@1500001 : Code[20]);
    VAR
      ServiceTaxEntry@1500002 : Record 16473;
    BEGIN
      ServiceTaxEntry.SETRANGE("Entry No.",GLRegister."From ST Entry No.",GLRegister."To ST Entry No.");
      Assert.AreEqual(1,ServiceTaxEntry.COUNT,ServiceTaxEntryCountErr);
      ServiceTaxEntry.FINDFIRST;
      Assert.AreEqual(DocumentNo,ServiceTaxEntry."Document No.",WrongDocumentNoErr)
    END;

    [ModalPageHandler]
    PROCEDURE PayServiceTaxHandler@1500073(VAR PayServiceTax@1500000 : TestPage 16477);
    BEGIN
      LibraryServiceTax.SetValuesForPaymentUseCreditAvailable(PayServiceTax);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500007(Message@1500000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE InputServiceDetailsReportHandler@1500089(VAR InputServiceDetails@1500000 : TestRequestPage 16474);
    BEGIN
      ServiceTaxReportHelper.InputServiceDetailsReportHandler(InputServiceDetails);
    END;

    [RequestPageHandler]
    PROCEDURE ServTaxRegisterReportHandler@1500040(VAR ServiceTaxRegister@1500000 : TestRequestPage 16473);
    BEGIN
      ServiceTaxReportHelper.ServTaxRegisterReportHandler(ServiceTaxRegister);
    END;

    [RequestPageHandler]
    PROCEDURE STaxCreditRegisterReportHandler@1500174(VAR ServTaxCreditRegister@1500000 : TestRequestPage 16592);
    BEGIN
      ServiceTaxReportHelper.ServTaxCreditRegisterReportHandler(ServTaxCreditRegister);
    END;

    BEGIN
    END.
  }
}

