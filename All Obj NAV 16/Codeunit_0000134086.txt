OBJECT Codeunit 134086 ERM Update Currency - Purchase
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryInventory@1015 : Codeunit 132201;
      LibraryERM@1002 : Codeunit 131300;
      LibraryFiscalYear@1021 : Codeunit 131302;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryPurchase@1009 : Codeunit 130512;
      isInitialized@1000 : Boolean;
      PostingDateMessageText@1005 : Text[1024];
      UnknownError@1007 : TextConst 'ENU=Unknown error.';
      PostingDateMessage@1006 : TextConst 'ENU=Do you want to update the exchange rate?';
      PurchaseHeaderError@1008 : TextConst 'ENU=%1 %2 must be deleted.';
      SuggestVendorPaymentText@1011 : Text[1024];
      AmountError@1010 : TextConst 'ENU=%1 must be %2 in %3.';
      ExpectedMessage@1012 : TextConst 'ENU=The Credit Memo doesn''t have a Corrected Invoice No. Do you want to continue?';
      IncorrectValueErr@1014 : TextConst 'ENU=Incorrect value %1 for field %2.';

    [Test]
    PROCEDURE UpdateCurrencyOnCreditMemo@24();
    VAR
      PurchaseHeader@1009 : Record 38;
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      // Check that Direct Unit Cost and Line Amount of Purchase Line get updated as per Currency Exchange Rates.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Purchase Credit Memo and new Currency with Exchange rate.
      CreatePurchaseDocument(PurchaseHeader,CurrencyExchangeRate,PurchaseHeader."Document Type"::"Credit Memo");

      // 3. Verify: Verify Purchase Line Direct Unit Cost and Line Amount updated as per Currency.
      VerifyPurchaseDocumentValues(
        PurchaseHeader,CalcCurrencyFactor(CurrencyExchangeRate));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ChangeCurrencyOnCreditMemo@9();
    VAR
      PurchaseHeader@1009 : Record 38;
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      // Check that Direct Unit Cost and Line Amount of Purchase Line get updated after changing Currency as per new
      // Currency Exchange Rates.

      // 1. Setup: Create Purchase Credit Memo and new Currency with Exchange rate.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,CurrencyExchangeRate,PurchaseHeader."Document Type"::"Credit Memo");

      // 2. Exercise: Create New Currency with Exchange Rate and Validate Purchase Header.
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);
      UpdateCurrencyOnPurchaseHeader(PurchaseHeader,CurrencyExchangeRate."Currency Code");

      // 3. Verify: Verify Purchase Line Direct Unit Cost and Line Amount updated as per Currency.
      VerifyPurchaseDocumentValues(
        PurchaseHeader,CalcCurrencyFactor(CurrencyExchangeRate));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ChangePostingDateOnCreditMemo@12();
    VAR
      PurchaseHeader@1000 : Record 38;
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      // Check While changing Posting Date, Application generates a message to update Exchange Rate.

      Initialize;
      CreateDocumentExchangeRate(PurchaseHeader,CurrencyExchangeRate,PurchaseHeader."Document Type"::"Credit Memo");

      // 3. Verify: Message occurs while changing Posting Date.
      Assert.AreEqual(STRSUBSTNO(PostingDateMessage),PostingDateMessageText,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ModifyAmountOnCreditMemo@19();
    VAR
      PurchaseHeader@1003 : Record 38;
      CurrencyExchangeRate@1002 : Record 330;
    BEGIN
      // Check after changing Posting Date, Direct Unit Cost and Line Amount of Purchase Line get updated as per new Exchange Rate.

      Initialize;
      CreateDocumentExchangeRate(PurchaseHeader,CurrencyExchangeRate,PurchaseHeader."Document Type"::"Credit Memo");
      UpdatePurchaseLines(PurchaseHeader."Document Type",PurchaseHeader."No.");

      // 3. Verify: Verify Purchase Line Direct Unit Cost and Line Amount updated as per new Exchange Rate.
      VerifyPurchaseDocumentValues(
        PurchaseHeader,CalcCurrencyFactor(CurrencyExchangeRate));
    END;

    [Test]
    PROCEDURE ChangeCurrencyOnQuote@5();
    VAR
      PurchaseHeader@1001 : Record 38;
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      // Check after changing Currency in Purchase Quote, Currency Factor get updated.

      // 1. Setup: Create Purchase Quote and new Currency with Exchange rate.
      Initialize;
      CreatePurchaseHeader(PurchaseHeader,CurrencyExchangeRate,PurchaseHeader."Document Type"::Quote);

      // 2. Exercise: Create new Currency with Exchange rate and update Purchase Header.
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);
      UpdateCurrencyOnPurchaseHeader(PurchaseHeader,CurrencyExchangeRate."Currency Code");

      // 3. Verify: Verify Purchase Header Currency Factor get updated as per new Currency.
      PurchaseHeader.TESTFIELD("Currency Factor",CalcCurrencyFactor(CurrencyExchangeRate));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ModifyAmountOnQuote@35();
    VAR
      PurchaseHeader@1001 : Record 38;
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      // Check after changing Currency in Purchase Quote, Direct Unit Cost and Line Amount of Purchase Line get updated as
      // per new Currency.

      // 1. Setup: Create Purchase Quote and new Currency with Exchange rate.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,CurrencyExchangeRate,PurchaseHeader."Document Type"::Quote);

      // 2. Exercise: Create new Currency with Exchange rate and update Purchase Header.
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);
      UpdateCurrencyOnPurchaseHeader(PurchaseHeader,CurrencyExchangeRate."Currency Code");
      UpdatePurchaseLines(PurchaseHeader."Document Type",PurchaseHeader."No.");

      // 3. Verify: Verify Purchase Line Direct Unit Cost and Line Amount updated as per Currency.
      VerifyPurchaseDocumentValues(
        PurchaseHeader,CalcCurrencyFactor(CurrencyExchangeRate));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ModifyVendWithCurrencyOnOrder@36();
    VAR
      CurrencyExchangeRate@1005 : Record 330;
      PurchHeader@1004 : Record 38;
    BEGIN
      Initialize;

      CreateOrderWithLCY(PurchHeader);
      ValidateVendWithFCYOnOrder(CurrencyExchangeRate,PurchHeader);

      PurchHeader.TESTFIELD("Currency Factor",CalcCurrencyFactor(CurrencyExchangeRate));
    END;

    [Test]
    PROCEDURE FlowCurrencyOnCreditMemo@14();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Check Purchase Credit Memo get updated with Vendor Currency Code.
      CheckCurrencyOnHeader(PurchaseHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE FlowCurrencyOnInvoice@39();
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      // Check Purchase Invoice get updated with Vendor Currency Code.
      CheckCurrencyOnHeader(PurchaseHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE FlowCurrencyOnOrder@40();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Check Purchase Order get updated with Vendor Currency Code.
      CheckCurrencyOnHeader(PurchaseHeader."Document Type"::Order);
    END;

    [Test]
    PROCEDURE FlowCurrencyOnQuote@41();
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Check Purchase Quote get updated with Vendor Currency Code.
      CheckCurrencyOnHeader(PurchaseHeader."Document Type"::Quote);
    END;

    LOCAL PROCEDURE CheckCurrencyOnHeader@26(DocumentType@1000 : Option);
    VAR
      PurchaseHeader@1004 : Record 38;
      Vendor@1003 : Record 23;
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      // 1. Setup:
      Initialize;

      // 2. Exercise: Create new Currency, Vendor, Purchase Document and update with Currency.
      Vendor.GET(CreateVendorUpdateCurrency(CurrencyExchangeRate));
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,Vendor."No.");

      // 3. Verify: Verify Purchase Document Currency Code match with Vendor Currency Code.
      PurchaseHeader.TESTFIELD("Currency Code",Vendor."Currency Code");
    END;

    [Test]
    PROCEDURE CheckCurrencyOnVendor@52();
    VAR
      Vendor@1002 : Record 23;
      CurrencyExchangeRate@1004 : Record 330;
      VendorNo@1000 : Code[20];
    BEGIN
      // Check Vendor get updated with Currency Code.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create new Currency and update Customer.
      VendorNo := CreateVendorUpdateCurrency(CurrencyExchangeRate);

      // 3. Verify: Verify Customer updated with new Currency Code.
      Vendor.GET(VendorNo);
      Vendor.TESTFIELD("Currency Code",CurrencyExchangeRate."Currency Code");
    END;

    [Test]
    PROCEDURE DeletePurchaseHeader@15();
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      // Check Purchase Header Deleted.

      // 1. Setup: Create Purchase Header.
      Initialize;
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');

      // 2. Exercise: Delete Purchase Header.
      PurchaseHeader.DELETE(TRUE);

      // 3. Verify: Verify Purchase Header deleted.
      Assert.IsFalse(
        PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No."),
        STRSUBSTNO(PurchaseHeaderError,PurchaseHeader.TABLECAPTION,PurchaseHeader."No."));
    END;

    [Test]
    [HandlerFunctions(CreditMemoConfirmHandler)]
    PROCEDURE PostCreditMemoWithCurrency@48();
    VAR
      PurchaseHeader@1001 : Record 38;
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      // Check after Posting Purchase Credit Memo, Currency flow in Vendor Ledger Entry.

      // 1. Setup: Create Purchase Credit Memo and new Currency with Exchange rate.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,CurrencyExchangeRate,PurchaseHeader."Document Type"::"Credit Memo");
      UpdateVendorCreditMemoNo(PurchaseHeader);

      // 2. Exercise: Post Purchase Credit Memo.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);
      ExecuteUIHandler;

      // 3. Verify: Verify Currency flow in Vendor Ledger Entry.
      VerifyLedgerPurchaseCreditMemo(PurchaseHeader."No.",CurrencyExchangeRate."Currency Code");
    END;

    [Test]
    PROCEDURE PostInvoiceWithCurrency@23();
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      // Check after Posting Purchase Invoice, Currency flow in Vendor Ledger Entry.
      Initialize;
      PostDocumentWithCurrency(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,FALSE,TRUE);

      // 3. Verify: Verify Currency flow in Vendor Ledger Entry.
      VerifyLedgerPurchaseInvoice(PurchaseHeader."No.",PurchaseHeader."Currency Code");
    END;

    [Test]
    PROCEDURE PostOderWithCurrency@25();
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      // Check after Posting Purchase Order, Currency flow in Vendor Ledger Entry.
      Initialize;
      PostDocumentWithCurrency(PurchaseHeader,PurchaseHeader."Document Type"::Order,TRUE,TRUE);

      // 3. Verify: Verify Currency flow in Vendor Ledger Entry.
      VerifyLedgerPurchaseOrder(PurchaseHeader."No.",PurchaseHeader."Currency Code");
    END;

    LOCAL PROCEDURE PostDocumentWithCurrency@47(VAR PurchaseHeader@1000 : Record 38;DocumentType@1002 : Option;Ship@1003 : Boolean;Invoice@1004 : Boolean);
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      // 1. Setup: Create Purchase Document and new Currency with Exchange rate.
      CreatePurchaseDocument(PurchaseHeader,CurrencyExchangeRate,DocumentType);
      UpdateVendorInvoiceNo(PurchaseHeader);

      // 2. Exercise: Post Purchase Credit Memo.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,Ship,Invoice);
    END;

    [Test]
    PROCEDURE AdjustExchangeRateWithVendor@59();
    VAR
      GenJournalLine@1002 : Record 81;
      CurrencyExchangeRate@1000 : Record 330;
      VendorNo@1001 : Code[20];
    BEGIN
      // Check that after Modify Relational Exch. Rate Amount and run Adjust Exchange rate batch job, GL entry and
      // Detailed Vendor Ledger Entry created with Correct Amount.

      // 1. Setup: Create and Post General Journal Line for Vendor, make Currency with Exchange Rate and modify.
      Initialize;
      VendorNo := CreateVendorUpdateCurrency(CurrencyExchangeRate);
      CreateAndPostGenJournalLine(GenJournalLine,VendorNo,CurrencyExchangeRate);
      UpdateExchangeRate(CurrencyExchangeRate);

      // 2. Exercise: Run Adjust Exchange Rate batch job.
      RunAdjustExchangeRates(CurrencyExchangeRate);

      // 3. Verify: Verify G/L Entry and Detailed Vendor Ledger Entry made for correct Amount after running
      // Adjust Exchange Rate Batch Job
      VerifyGLEntryAdjustExchange(GenJournalLine,CurrencyExchangeRate);
      VerifyDetailedVendorLedgEntry(GenJournalLine,CurrencyExchangeRate);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE VendorPaymentWithManualCheck@32();
    VAR
      BankPaymentType@1000 : ' ,Computer Check,Manual Check';
    BEGIN
      // Create and Post General Journal Lines and Suggest Vendor Payments with Manual Check.
      SetupVendorPayment(BankPaymentType::"Manual Check");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE VendorPaymentWithComputerCheck@30();
    VAR
      BankPaymentType@1000 : ' ,Computer Check,Manual Check';
    BEGIN
      // Create and Post General Journal Lines and Suggest Vendor Payments with Computer Check.
      SetupVendorPayment(BankPaymentType::"Computer Check");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UpdateCurrencyCodeOnPurchQuotePage@50();
    VAR
      PurchaseLine@1001 : Record 39;
      Vendor@1003 : Record 23;
      GLAccount@1004 : Record 15;
      Currency@1005 : Record 4;
      PurchaseQuotePage@1000 : TestPage 49;
      DocumentNo@1002 : Code[20];
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryERM.FindGLAccount(GLAccount);
      LibraryERM.FindCurrency(Currency);
      PurchaseQuotePage.OPENEDIT;
      PurchaseQuotePage.NEW;
      PurchaseQuotePage."Buy-from Vendor No.".VALUE(Vendor."No.");
      PurchaseQuotePage.PurchLines.Type.VALUE(FORMAT(PurchaseLine.Type::"G/L Account"));
      PurchaseQuotePage.PurchLines."No.".VALUE(GLAccount."No.");
      PurchaseQuotePage.PurchLines.Quantity.VALUE(FORMAT(LibraryRandom.RandInt(5)));
      PurchaseQuotePage."Currency Code".VALUE(Currency.Code);
      DocumentNo := PurchaseQuotePage."No.".VALUE;
      PurchaseQuotePage.CLOSE;

      VerifyCurrencyInPurchaseLine(PurchaseLine."Document Type"::Quote,DocumentNo,GLAccount."No.",Currency.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UpdateCurrencyCodeOnPurchOrderPage@76();
    VAR
      PurchaseLine@1001 : Record 39;
      Vendor@1003 : Record 23;
      GLAccount@1004 : Record 15;
      Currency@1005 : Record 4;
      PurchaseOrderPage@1000 : TestPage 50;
      DocumentNo@1002 : Code[20];
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryERM.FindGLAccount(GLAccount);
      LibraryERM.FindCurrency(Currency);
      PurchaseOrderPage.OPENEDIT;
      PurchaseOrderPage.NEW;
      PurchaseOrderPage."Buy-from Vendor No.".VALUE(Vendor."No.");
      PurchaseOrderPage.PurchLines.Type.VALUE(FORMAT(PurchaseLine.Type::"G/L Account"));
      PurchaseOrderPage.PurchLines."No.".VALUE(GLAccount."No.");
      PurchaseOrderPage.PurchLines.Quantity.VALUE(FORMAT(LibraryRandom.RandInt(5)));
      PurchaseOrderPage."Currency Code".VALUE(Currency.Code);
      DocumentNo := PurchaseOrderPage."No.".VALUE;
      PurchaseOrderPage.CLOSE;

      VerifyCurrencyInPurchaseLine(PurchaseLine."Document Type"::Order,DocumentNo,GLAccount."No.",Currency.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UpdateCurrencyCodeOnPurchInvoicePage@77();
    VAR
      PurchaseLine@1001 : Record 39;
      Vendor@1003 : Record 23;
      GLAccount@1004 : Record 15;
      Currency@1005 : Record 4;
      PurchaseInvoicePage@1000 : TestPage 51;
      DocumentNo@1002 : Code[20];
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryERM.FindGLAccount(GLAccount);
      LibraryERM.FindCurrency(Currency);
      PurchaseInvoicePage.OPENEDIT;
      PurchaseInvoicePage.NEW;
      PurchaseInvoicePage."Buy-from Vendor No.".VALUE(Vendor."No.");
      PurchaseInvoicePage.PurchLines.Type.VALUE(FORMAT(PurchaseLine.Type::"G/L Account"));
      PurchaseInvoicePage.PurchLines."No.".VALUE(GLAccount."No.");
      PurchaseInvoicePage.PurchLines.Quantity.VALUE(FORMAT(LibraryRandom.RandInt(5)));
      PurchaseInvoicePage."Currency Code".VALUE(Currency.Code);
      DocumentNo := PurchaseInvoicePage."No.".VALUE;
      PurchaseInvoicePage.CLOSE;

      VerifyCurrencyInPurchaseLine(PurchaseLine."Document Type"::Invoice,DocumentNo,GLAccount."No.",Currency.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UpdateCurrencyCodeOnPurchCrMemoPage@79();
    VAR
      PurchaseLine@1001 : Record 39;
      Vendor@1003 : Record 23;
      GLAccount@1004 : Record 15;
      Currency@1005 : Record 4;
      PurchaseCrMemoPage@1000 : TestPage 52;
      DocumentNo@1002 : Code[20];
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryERM.FindGLAccount(GLAccount);
      LibraryERM.FindCurrency(Currency);
      PurchaseCrMemoPage.OPENEDIT;
      PurchaseCrMemoPage.NEW;
      PurchaseCrMemoPage."Buy-from Vendor No.".VALUE(Vendor."No.");
      PurchaseCrMemoPage.PurchLines.Type.VALUE(FORMAT(PurchaseLine.Type::"G/L Account"));
      PurchaseCrMemoPage.PurchLines."No.".VALUE(GLAccount."No.");
      PurchaseCrMemoPage.PurchLines.Quantity.VALUE(FORMAT(LibraryRandom.RandInt(5)));
      PurchaseCrMemoPage."Currency Code".VALUE(Currency.Code);
      DocumentNo := PurchaseCrMemoPage."No.".VALUE;
      PurchaseCrMemoPage.CLOSE;

      VerifyCurrencyInPurchaseLine(PurchaseLine."Document Type"::"Credit Memo",DocumentNo,GLAccount."No.",Currency.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UpdateCurrencyCodeOnBlanketPurchOrderPage@80();
    VAR
      PurchaseLine@1001 : Record 39;
      Vendor@1003 : Record 23;
      GLAccount@1004 : Record 15;
      Currency@1005 : Record 4;
      BlanketPurchOrderPage@1000 : TestPage 509;
      DocumentNo@1002 : Code[20];
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryERM.FindGLAccount(GLAccount);
      LibraryERM.FindCurrency(Currency);
      BlanketPurchOrderPage.OPENEDIT;
      BlanketPurchOrderPage.NEW;
      BlanketPurchOrderPage."Buy-from Vendor No.".VALUE(Vendor."No.");
      BlanketPurchOrderPage.PurchLines.Type.VALUE(FORMAT(PurchaseLine.Type::"G/L Account"));
      BlanketPurchOrderPage.PurchLines."No.".VALUE(GLAccount."No.");
      BlanketPurchOrderPage.PurchLines.Quantity.VALUE(FORMAT(LibraryRandom.RandInt(5)));
      BlanketPurchOrderPage."Currency Code".VALUE(Currency.Code);
      DocumentNo := BlanketPurchOrderPage."No.".VALUE;
      BlanketPurchOrderPage.CLOSE;

      VerifyCurrencyInPurchaseLine(PurchaseLine."Document Type"::"Blanket Order",DocumentNo,GLAccount."No.",Currency.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UpdateCurrencyCodeOnPurchReturnOrderPage@81();
    VAR
      PurchaseLine@1001 : Record 39;
      Vendor@1003 : Record 23;
      GLAccount@1004 : Record 15;
      Currency@1005 : Record 4;
      PurchReturnOrderPage@1000 : TestPage 6640;
      DocumentNo@1002 : Code[20];
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryERM.FindGLAccount(GLAccount);
      LibraryERM.FindCurrency(Currency);
      PurchReturnOrderPage.OPENEDIT;
      PurchReturnOrderPage.NEW;
      PurchReturnOrderPage."Buy-from Vendor No.".VALUE(Vendor."No.");
      PurchReturnOrderPage.PurchLines.Type.VALUE(FORMAT(PurchaseLine.Type::"G/L Account"));
      PurchReturnOrderPage.PurchLines."No.".VALUE(GLAccount."No.");
      PurchReturnOrderPage.PurchLines.Quantity.VALUE(FORMAT(LibraryRandom.RandInt(5)));
      PurchReturnOrderPage."Currency Code".VALUE(Currency.Code);
      DocumentNo := PurchReturnOrderPage."No.".VALUE;
      PurchReturnOrderPage.CLOSE;

      VerifyCurrencyInPurchaseLine(PurchaseLine."Document Type"::"Return Order",DocumentNo,GLAccount."No.",Currency.Code);
    END;

    LOCAL PROCEDURE SetupVendorPayment@29(CheckType@1000 : Option);
    VAR
      CurrencyExchangeRate@1002 : Record 330;
      GenJournalLine@1006 : Record 81;
      BankAccount@1004 : Record 270;
      BankAccountNo@1003 : Code[20];
    BEGIN
      // 1. Setup: Create Currency, Bank Account, Vendor and General Journal Lines and Post.
      Initialize;
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);
      BankAccountNo := CreateBankAccount(CurrencyExchangeRate."Currency Code");
      CreateGeneralLines(GenJournalLine,CreateVendor(CurrencyExchangeRate."Currency Code"));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2. Exercise: Run Report Suggest Vendor Payment.
      SuggestVendorPayment(GenJournalLine."Account No.",BankAccountNo,CheckType);

      // 3. Verify: Message Appears for Suggest Vendor Payment.
      BankAccount.GET(BankAccountNo);
      Assert.AreNotEqual(0,STRPOS(SuggestVendorPaymentText,BankAccount."Currency Code"),UnknownError);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateLocalData;
      isInitialized := TRUE;
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE RunAdjustExchangeRates@57(CurrencyExchangeRate@1000 : Record 330);
    VAR
      Currency@1002 : Record 4;
      AdjustExchangeRates@1001 : Report 595;
    BEGIN
      // Using Random Number Generator for Document No.
      Currency.SETRANGE(Code,CurrencyExchangeRate."Currency Code");
      CLEAR(AdjustExchangeRates);
      AdjustExchangeRates.SETTABLEVIEW(Currency);
      AdjustExchangeRates.InitializeRequest2(
        CurrencyExchangeRate."Starting Date",CurrencyExchangeRate."Starting Date",'Test',CurrencyExchangeRate."Starting Date",
        CurrencyExchangeRate."Currency Code",TRUE,FALSE);
      AdjustExchangeRates.USEREQUESTPAGE(FALSE);
      AdjustExchangeRates.RUN;
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@11(VAR PurchaseHeader@1001 : Record 38;VAR CurrencyExchangeRate@1000 : Record 330;DocumentType@1002 : Option);
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,CurrencyExchangeRate,DocumentType);
      CreatePurchaseLines(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateOrderWithLCY@82(VAR PurchHeader@1000 : Record 38);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,CreateVendor(''));
      CreatePurchaseLines(PurchHeader);
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@16(VAR PurchaseHeader@1000 : Record 38;VAR CurrencyExchangeRate@1001 : Record 330;DocumentType@1002 : Option);
    BEGIN
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,'');
      UpdateCurrencyOnPurchaseHeader(PurchaseHeader,CurrencyExchangeRate."Currency Code");
    END;

    LOCAL PROCEDURE CreatePurchaseLines@17(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1001 : Record 39;
      Counter@1004 : Integer;
    BEGIN
      // Create Multiple lines - Boundary 2 is important.
      FOR Counter := 2 TO 2 + LibraryRandom.RandInt(9) DO
        // Required Random Value for Quantity field.
        LibraryPurchase.CreatePurchaseLine(
          PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandInt(100));
    END;

    LOCAL PROCEDURE CreateCurrencyWithExchangeRate@22(VAR CurrencyExchangeRate@1002 : Record 330);
    VAR
      Currency@1000 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      CreateExchangeRate(CurrencyExchangeRate,Currency.Code,NORMALDATE(LibraryFiscalYear.GetInitialPostingDate));
    END;

    LOCAL PROCEDURE CreateExchangeRate@3(VAR CurrencyExchangeRate@1001 : Record 330;CurrencyCode@1000 : Code[10];StartingDate@1002 : Date);
    BEGIN
      LibraryERM.CreateExchRate(CurrencyExchangeRate,CurrencyCode,StartingDate);

      // Using Random Exchange Rate Amount and Adjustment Exchange Rate.
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",LibraryRandom.RandDec(100,2));
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");

      // Relational Exch. Rate Amount and Relational Adjmt Exch Rate Amt always greater than Exchange Rate Amount.
      CurrencyExchangeRate.VALIDATE(
        "Relational Exch. Rate Amount",LibraryRandom.RandDec(100,2) + CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@13() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandDec(100,2)); // Use Random Value for Last Direct Cost field.
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateVendor@42(CurrencyCode@1004 : Code[10]) : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    [Normal]
    LOCAL PROCEDURE CreateBankAccount@34(CurrencyCode@1002 : Code[10]) : Code[20];
    VAR
      BankAccount@1000 : Record 270;
      BankAccountPostingGroup@1001 : Record 277;
    BEGIN
      LibraryERM.FindBankAccountPostingGroup(BankAccountPostingGroup);
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccount.VALIDATE("Currency Code",CurrencyCode);
      BankAccount.VALIDATE("Bank Acc. Posting Group",BankAccountPostingGroup.Code);
      BankAccount.MODIFY(TRUE);
      EXIT(BankAccount."No.");
    END;

    [Normal]
    LOCAL PROCEDURE CreateGeneralLines@33(VAR GenJournalLine@1004 : Record 81;VendorNo@1000 : Code[20]);
    VAR
      Counter@1002 : Integer;
    BEGIN
      // Create 2 to 10 Gen. Journal Lines Boundary 2 is important to test Suggest Vendor Payment for multiple lines.
      FOR Counter := 1 TO 2 * LibraryRandom.RandInt(5) DO
        CreateGeneralJournalLine(GenJournalLine,VendorNo);
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLine@28(VAR GenJournalLine@1000 : Record 81;VendorNo@1004 : Code[20];CurrencyExchangeRate@1001 : Record 330);
    BEGIN
      CreateGeneralJournalLine(GenJournalLine,VendorNo);
      GenJournalLine.VALIDATE("Posting Date",CurrencyExchangeRate."Starting Date");
      GenJournalLine.VALIDATE("Currency Code",CurrencyExchangeRate."Currency Code");
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@38(VAR GenJournalLine@1007 : Record 81;VendorNo@1001 : Code[20]);
    VAR
      GenJournalBatch@1002 : Record 232;
      GenJournalTemplate@1003 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      // Required Random Value for Amount field value is not important.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Vendor,VendorNo,-LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE(
        "Document No.",LibraryUtility.GenerateRandomCode(GenJournalLine.FIELDNO("Document No."),DATABASE::"Gen. Journal Line"));
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",FindGLAccount);
      GenJournalLine.VALIDATE("External Document No.",GenJournalLine."Document No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorUpdateCurrency@67(VAR CurrencyExchangeRate@1000 : Record 330) : Code[20];
    VAR
      Vendor@1002 : Record 23;
    BEGIN
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CurrencyExchangeRate."Currency Code");
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateDocumentExchangeRate@31(VAR PurchaseHeader@1000 : Record 38;VAR CurrencyExchangeRate@1001 : Record 330;DocumentType@1002 : Option);
    BEGIN
      // 1. Setup: Create Purchase Document and new Currency with Exchange Rate.
      CreatePurchaseHeader(PurchaseHeader,CurrencyExchangeRate,DocumentType);
      CreatePurchaseLines(PurchaseHeader);

      // 2. Exercise: Create new Exchange Rate for Currency with different Starting Date.
      CreateExchangeRate(
        CurrencyExchangeRate,
        CurrencyExchangeRate."Currency Code",
        CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',CurrencyExchangeRate."Starting Date"));
      UpdatePostingDate(PurchaseHeader,CurrencyExchangeRate."Starting Date");
    END;

    LOCAL PROCEDURE FindGLAccount@1092() : Code[20];
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      GLAccount.SETRANGE("Gen. Posting Type",GLAccount."Gen. Posting Type"::Purchase);
      EXIT(LibraryERM.FindDirectPostingGLAccount(GLAccount));
    END;

    LOCAL PROCEDURE FindPurchaseLines@27(VAR PurchaseLine@1000 : Record 39;DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",DocumentType);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDSET;
    END;

    [Normal]
    LOCAL PROCEDURE SuggestVendorPayment@37(VendorNo@1001 : Code[20];BankAccountNo@1006 : Code[20];BankPmtType@1009 : Option);
    VAR
      GenJournalTemplate@1008 : Record 80;
      GenJournalBatch@1007 : Record 232;
      Vendor@1003 : Record 23;
      GenJournalLine@1002 : Record 81;
      SuggestVendorPayments@1000 : Report 393;
      BalanceAccuntType@1004 : 'G/L Account,Customer,Vendor,Bank Account';
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);

      GenJournalLine.INIT;
      GenJournalLine.VALIDATE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.VALIDATE("Journal Batch Name",GenJournalBatch.Name);

      CLEAR(SuggestVendorPayments);
      SuggestVendorPayments.SetGenJnlLine(GenJournalLine);
      Vendor.SETRANGE("No.",VendorNo);
      SuggestVendorPayments.SETTABLEVIEW(Vendor);
      // Required Random Value for "Document No." field value is not important.
      SuggestVendorPayments.InitializeRequest(
        WORKDATE,FALSE,0,FALSE,WORKDATE,VendorNo,TRUE,BalanceAccuntType::"Bank Account",BankAccountNo,BankPmtType);
      SuggestVendorPayments.USEREQUESTPAGE(FALSE);
      COMMIT;
      SuggestVendorPayments.RUN;
    END;

    LOCAL PROCEDURE UpdateCurrencyOnPurchaseHeader@2(VAR PurchaseHeader@1000 : Record 38;CurrencyCode@1001 : Code[10]);
    BEGIN
      PurchaseHeader.VALIDATE("Currency Code",CurrencyCode);
      IF PurchaseHeader."Document Type" = PurchaseHeader."Document Type"::Quote THEN
        PurchaseHeader."Posting Date" := PurchaseHeader."Document Date";
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePostingDate@10(VAR PurchaseHeader@1003 : Record 38;PostingDate@1001 : Date);
    BEGIN
      PurchaseHeader.VALIDATE("Posting Date",PostingDate);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseLines@4(DocumentType@1000 : Option;DocumentNo@1001 : Code[20]);
    VAR
      PurchaseLine@1003 : Record 39;
    BEGIN
      FindPurchaseLines(PurchaseLine,DocumentType,DocumentNo);
      REPEAT
        PurchaseLine.VALIDATE("No.");
        PurchaseLine.VALIDATE("Line Discount %",0);
        PurchaseLine.MODIFY(TRUE);
      UNTIL PurchaseLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE UpdateExchangeRate@54(VAR CurrencyExchangeRate@1000 : Record 330);
    BEGIN
      CurrencyExchangeRate.VALIDATE(
        "Relational Exch. Rate Amount",CurrencyExchangeRate."Relational Exch. Rate Amount" + LibraryRandom.RandInt(4));
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVendorInvoiceNo@44(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVendorCreditMemoNo@45(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcCurrencyFactor@85(CurrencyExchangeRate@1000 : Record 330) : Decimal;
    BEGIN
      WITH CurrencyExchangeRate DO
        EXIT("Exchange Rate Amount" / "Relational Exch. Rate Amount");
    END;

    LOCAL PROCEDURE ValidateVendWithFCYOnOrder@51(VAR CurrencyExchangeRate@1002 : Record 330;VAR PurchHeader@1000 : Record 38);
    VAR
      PurchOrder@1001 : TestPage 50;
    BEGIN
      PurchOrder.OPENEDIT;
      PurchOrder.GOTORECORD(PurchHeader);
      PurchOrder."Buy-from Vendor No.".SETVALUE(CreateVendorUpdateCurrency(CurrencyExchangeRate));
      PurchOrder.CLOSE;
      PurchHeader.FIND;
    END;

    LOCAL PROCEDURE VerifyPurchaseDocumentValues@1(PurchaseHeader@1000 : Record 38;CurrencyFactor@1001 : Decimal);
    BEGIN
      PurchaseHeader.TESTFIELD("Currency Factor",CurrencyFactor);
      VerifyPurchaseLineValues(PurchaseHeader);
    END;

    LOCAL PROCEDURE VerifyPurchaseLineValues@20(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1003 : Record 39;
      Item@1002 : Record 27;
      Currency@1001 : Record 4;
    BEGIN
      // Replace TESTFIELD with AssertNealyEqual to fix GDL Failures.
      Currency.GET(PurchaseHeader."Currency Code");
      Currency.InitRoundingPrecision;
      FindPurchaseLines(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      REPEAT
        Item.GET(PurchaseLine."No.");
        Assert.AreNearlyEqual(
          PurchaseLine."Direct Unit Cost",Item."Last Direct Cost" * PurchaseHeader."Currency Factor",
          Currency."Unit-Amount Rounding Precision",
          STRSUBSTNO(
            AmountError,PurchaseLine.FIELDCAPTION("Direct Unit Cost"),
            Item."Last Direct Cost" * PurchaseHeader."Currency Factor",PurchaseLine.TABLECAPTION));
        PurchaseLine.TESTFIELD(
          "Line Amount",ROUND(PurchaseLine.Quantity * PurchaseLine."Direct Unit Cost",Currency."Amount Rounding Precision"));
      UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyLedgerPurchaseCreditMemo@49(PreAssignedNo@1000 : Code[20];CurrencyCode@1003 : Code[10]);
    VAR
      PurchCrMemoHdr@1001 : Record 124;
    BEGIN
      PurchCrMemoHdr.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      PurchCrMemoHdr.FINDFIRST;
      VerifyVendorLedgerEntry(PurchCrMemoHdr."No.",CurrencyCode);
    END;

    LOCAL PROCEDURE VerifyLedgerPurchaseInvoice@18(PreAssignedNo@1000 : Code[20];CurrencyCode@1003 : Code[10]);
    VAR
      PurchInvHeader@1001 : Record 122;
    BEGIN
      PurchInvHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      PurchInvHeader.FINDFIRST;
      VerifyVendorLedgerEntry(PurchInvHeader."No.",CurrencyCode);
    END;

    LOCAL PROCEDURE VerifyLedgerPurchaseOrder@21(OrderNo@1000 : Code[20];CurrencyCode@1003 : Code[10]);
    VAR
      PurchInvHeader@1001 : Record 122;
    BEGIN
      PurchInvHeader.SETRANGE("Order No.",OrderNo);
      PurchInvHeader.FINDFIRST;
      VerifyVendorLedgerEntry(PurchInvHeader."No.",CurrencyCode);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyGLEntryAdjustExchange@61(GenJournalLine@1000 : Record 81;CurrencyExchangeRate@1003 : Record 330);
    VAR
      GLEntry@1002 : Record 17;
      Currency@1004 : Record 4;
    BEGIN
      Currency.GET(CurrencyExchangeRate."Currency Code");
      Currency.InitRoundingPrecision;
      GLEntry.SETRANGE("Document No.",CurrencyExchangeRate."Currency Code");
      GLEntry.SETFILTER(Amount,'<0');
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD(
        Amount,ROUND(
          GenJournalLine.Amount * CurrencyExchangeRate."Relational Exch. Rate Amount" /
          CurrencyExchangeRate."Exchange Rate Amount" - GenJournalLine."Amount (LCY)",Currency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntry@46(DocumentNo@1000 : Code[20];CurrencyCode@1002 : Code[10]);
    VAR
      VendorLedgerEntry@1001 : Record 25;
    BEGIN
      VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
      VendorLedgerEntry.FINDFIRST;
      VendorLedgerEntry.TESTFIELD("Currency Code",CurrencyCode);
    END;

    LOCAL PROCEDURE VerifyDetailedVendorLedgEntry@56(GenJournalLine@1001 : Record 81;CurrencyExchangeRate@1000 : Record 330);
    VAR
      Currency@1004 : Record 4;
      DetailedVendorLedgEntry@1002 : Record 380;
    BEGIN
      Currency.GET(CurrencyExchangeRate."Currency Code");
      Currency.InitRoundingPrecision;
      DetailedVendorLedgEntry.SETRANGE("Document No.",CurrencyExchangeRate."Currency Code");
      DetailedVendorLedgEntry.FINDFIRST;
      DetailedVendorLedgEntry.TESTFIELD(
        "Amount (LCY)",ROUND(
          GenJournalLine.Amount * CurrencyExchangeRate."Relational Exch. Rate Amount" /
          CurrencyExchangeRate."Exchange Rate Amount" - GenJournalLine."Amount (LCY)",Currency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE VerifyCurrencyInPurchaseLine@62(DocumentType@1001 : Option;DocumentNo@1002 : Code[20];No@1003 : Code[20];CurrencyCode@1004 : Code[10]);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      WITH PurchaseLine DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        Assert.AreEqual(No,"No.",
          STRSUBSTNO(IncorrectValueErr,"No.",FIELDCAPTION("No.")));
        Assert.AreEqual(CurrencyCode,"Currency Code",
          STRSUBSTNO(IncorrectValueErr,"Currency Code",FIELDCAPTION("Currency Code")));
      END;
    END;

    LOCAL PROCEDURE ExecuteUIHandler@78();
    BEGIN
      // Generate Dummy message. Required for executing the test case successfully.
      IF CONFIRM(STRSUBSTNO(ExpectedMessage)) THEN ;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@7(ConfirmMessage@1000 : Text[1024];VAR Result@1001 : Boolean);
    BEGIN
      Result := TRUE;
      PostingDateMessageText := ConfirmMessage; // Set global variable.
    END;

    [ConfirmHandler]
    PROCEDURE CreditMemoConfirmHandler@43(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@6(Message@1000 : Text[1024]);
    BEGIN
      // Just for Handle the Message.
      SuggestVendorPaymentText := Message; // Set global variable.
    END;

    BEGIN
    {
      // [FEATURE] [FCY] [Purchase]
      Unsupported version tags:
      ES: Unable to Execute
      DE: Unable to Execute
      CH: Unable to Execute (TFS ID: 50698)

      Test for Currency Code Validation while making new Purchase Credit Memo.
        1. Check that Direct Unit Cost and Line Amount of Purchase Line get updated as per Currency Exchange Rates.
        2. Check that Direct Unit Cost and Line Amount of Purchase Line get updated after changing Currency as per new
           Currency Exchange Rates.
        3. Check While changing Posting Date, Application generates a message to update Exchange Rate.
        4. Check after changing Posting Date, Direct Unit Cost and Line Amount of Purchase Line get updated as per new Exchange Rate.
        5. Check after changing Currency in Purchase Quote, Currency Factor get updated.
        6. Check after changing Currency in Purchase Quote, Direct Unit Cost and Line Amount of Purchase Line get updated as per
           new Currency.
        7. Check Purchase Credit Memo get updated with Vendor Currency Code.
        8. Check Purchase Invoice get updated with Vendor Currency Code.
        9. Check Purchase Order get updated with Vendor Currency Code.
       10. Check Purchase Quote get updated with Vendor Currency Code.
       11. Check Vendor get updated with Currency Code.
       12. Check Purchase Header Deleted.
       13. Check that after Modify Relational Exch. Rate Amount and run Adjust Exchange rate batch job, GL entry and
           Detailed Vendor Ledger Entry created with Correct Amount.
       14. Create and Post General Journal Lines and Suggest Vendor Payments with Manual Check.
       15. Create and Post General Journal Lines and Suggest Vendor Payments with Computer Check.
       16. Check after changing Buy-from Vendor in Purchase Order, Currency Factor get updated.

      TFS_TS_ID = 187979
      Covers Test cases:
      ----------------------------------------
      Test Function Name         TFS ID
      ----------------------------------------
      UpdateCurrencyOnCreditMemo 121617,124339
      ChangeCurrencyOnCreditMemo 124340

      TFS_TS_ID = 187996
      Covers Test cases:
      ------------------------------------
      Test Function Name            TFS ID
      ------------------------------------
      ChangePostingDateOnCreditMemo 124325
      ModifyAmountOnCreditMemo      124326

      TFS_TS_ID = 188071
      Covers Test cases:
      -----------------------------------
      Test Function Name    TFS ID
      -----------------------------------
      ChangeCurrencyOnQuote 124341
      ModifyAmountOnQuote   124342,124343

      TFS_TS_ID = 188098
      Covers Test cases:
      -------------------------------
      Test Function Name       TFS ID
      -------------------------------
      FlowCurrencyOnCreditMemo 124330
      FlowCurrencyOnInvoice    124331
      FlowCurrencyOnOrder      124333
      FlowCurrencyOnQuote      124334
      CheckCurrencyOnVendor    124329

      TFS_TS_ID = 198715
      Covers Test cases:
      ---------------------------
      Test Function Name   TFS ID
      ---------------------------
      DeletePurchaseHeader 124311

      TFS_TS_ID = 198716
      Covers Test cases:
      ------------------------------------------------------------------
      Test Function Name                                          TFS ID
      ------------------------------------------------------------------
      PostInvoiceWithCurrency, PostOderWithCurrency               127906
      PostCreditMemoWithCurrency                                  125545
      AdjustExchangeRateWithVendor                                121696
      VendorPaymentWithManualCheck,VendorPaymentWithComputerCheck 127904

      ---------------------------------
      Test Function Name         TFS ID
      ---------------------------------
      ModifyVendWithCurrencyOnOrder 333214
    }
    END.
  }
}

