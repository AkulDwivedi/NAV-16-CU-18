OBJECT Codeunit 136609 ERM RS Fld. Validate and Apply
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryRapidStart@1003 : Codeunit 131903;
      Assert@1001 : Codeunit 130000;
      LibraryERM@1010 : Codeunit 131300;
      LibraryUtility@1012 : Codeunit 131000;
      ConfigValidateManagement@1100 : Codeunit 8617;
      LibraryRandom@1016 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      SingleEntryRecNo@1004 : Integer;
      MigrationError@1007 : TextConst 'ENU=There are errors in Migration Data Error.';
      NoMigrationError@1006 : TextConst 'ENU=There must be errors in Migration Data Error.';
      NoDataInTableAfterApply@1005 : TextConst 'ENU=There is no data in table after apply procedure.';
      DataIsInvalidAfterApply@1008 : TextConst 'ENU=Invalid data in field %1.';
      PackageValidationError@1009 : TextConst 'ENU=Package validation errors.';
      InvalidDataExpected@1002 : TextConst 'ENU=Config. package record is expected to be invalid.';
      ListMustBeEmpty@1011 : TextConst 'ENU=%1 must be empty.';
      OptionNoExistsErr@1013 : TextConst 'ENU=OptionNoExists function returns wrong result.';
      GetOptionNoErr@1014 : TextConst 'ENU=GetOptionNo function returns wrong result.';
      ConfigPackContErr@1015 : TextConst 'ENU=Config Package contains errors';

    LOCAL PROCEDURE Initialize@4();
    BEGIN
      IF isInitialized THEN
        EXIT;

      SingleEntryRecNo := 1;
      Cleanup('');

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE Cleanup@60(PackageCode@1005 : Code[20]);
    VAR
      ConfigPackage@1004 : Record 8623;
    BEGIN
      ConfigPackage.SETRANGE(Code,PackageCode);
      ConfigPackage.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE CreateResource@20(VAR Resource@1000 : Record 156;VAR ResourcePrice@1002 : Record 201);
    VAR
      LibraryResource@1001 : Codeunit 130511;
    BEGIN
      Resource.INIT;
      Resource.VALIDATE("No.",LibraryUtility.GenerateRandomCode(Resource.FIELDNO("No."),DATABASE::Resource));
      Resource.INSERT(TRUE);

      LibraryResource.CreateResourcePrice(ResourcePrice,ResourcePrice.Type::Resource,Resource."No.",'','');
    END;

    LOCAL PROCEDURE GeneratePackageWithFieldFillingDependency@6(VAR ConfigPackage@1006 : Record 8623;FieldPriorityWithDependency@1007 : Integer;FieldPriorityWithoutDependency@1008 : Integer;VAR ResourcePriceCode@1009 : Code[20];SavePackageRecord@1000 : Boolean);
    VAR
      ConfigPackageTable@1005 : Record 8613;
      Resource@1004 : Record 156;
      ResourcePrice@1002 : Record 201;
    BEGIN
      CreateResource(Resource,ResourcePrice);

      ResourcePriceCode := ResourcePrice.Code;

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"Resource Price",
        ResourcePrice.FIELDNO(Type),
        FORMAT(ResourcePrice.Type::All),
        SingleEntryRecNo);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"Resource Price",
        ResourcePrice.FIELDNO(Code),
        ResourcePrice.Code,
        SingleEntryRecNo);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"Resource Price",
        ResourcePrice.FIELDNO("Work Type Code"),
        ResourcePrice."Work Type Code",
        SingleEntryRecNo);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"Resource Price",
        ResourcePrice.FIELDNO("Currency Code"),
        ResourcePrice."Currency Code",
        SingleEntryRecNo);

      LibraryRapidStart.SetProcessingOrderForField(
        ConfigPackage.Code,ConfigPackageTable."Table ID",ResourcePrice.FIELDNO(Type),FieldPriorityWithoutDependency);
      LibraryRapidStart.SetProcessingOrderForField(
        ConfigPackage.Code,ConfigPackageTable."Table ID",ResourcePrice.FIELDNO(Code),FieldPriorityWithDependency);

      IF NOT SavePackageRecord THEN
        ResourcePrice.DELETE;
    END;

    LOCAL PROCEDURE GenerateSimplePackage@12(UseInvalidGLAccountCode@1009 : Boolean;SavePackageRecord@1010 : Boolean;ValidateFields@1002 : Boolean;VAR ConfigPackage@1006 : Record 8623;VAR CustPostingGroupCode@1007 : Code[10];VAR GLAccountNo@1008 : Code[20]);
    VAR
      GLAccount@1004 : Record 15;
      CustPostingGroup@1000 : Record 92;
      ConfigPackageTable@1003 : Record 8613;
    BEGIN
      CustPostingGroup.Code := LibraryUtility.GenerateRandomCode(CustPostingGroup.FIELDNO(Code),DATABASE::"Customer Posting Group");

      IF UseInvalidGLAccountCode THEN
        CustPostingGroup."Receivables Account" :=
          LibraryUtility.GenerateRandomCode(CustPostingGroup.FIELDNO("Receivables Account"),DATABASE::"Customer Posting Group")
      ELSE BEGIN
        LibraryERM.FindGLAccount(GLAccount);
        CustPostingGroup."Receivables Account" := GLAccount."No.";
      END;

      IF SavePackageRecord THEN
        CustPostingGroup.INSERT;

      CustPostingGroupCode := CustPostingGroup.Code;
      GLAccountNo := CustPostingGroup."Receivables Account";

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"Customer Posting Group",
        CustPostingGroup.FIELDNO(Code),
        CustPostingGroup.Code,
        SingleEntryRecNo);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"Customer Posting Group",
        CustPostingGroup.FIELDNO("Receivables Account"),
        CustPostingGroup."Receivables Account",
        SingleEntryRecNo);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"Customer Posting Group",
        CustPostingGroup.FIELDNO("Service Charge Acc."),
        '',
        SingleEntryRecNo);

      SetPackageFieldsValidation(ConfigPackage.Code,ValidateFields);
    END;

    LOCAL PROCEDURE SetPackageFieldsValidation@2(PackageCode@1000 : Code[20];ValidateFields@1001 : Boolean);
    VAR
      ConfigPackageTable@1002 : Record 8613;
      ConfigPackageField@1003 : Record 8616;
    BEGIN
      ConfigPackageTable.SETRANGE("Package Code",PackageCode);
      IF ConfigPackageTable.FINDSET THEN
        REPEAT
          ConfigPackageField.SETRANGE("Package Code",PackageCode);
          ConfigPackageField.SETRANGE("Table ID",ConfigPackageTable."Table ID");
          IF ConfigPackageField.FINDSET THEN
            REPEAT
              IF NOT ConfigPackageField."Primary Key" THEN BEGIN
                ConfigPackageField.VALIDATE("Validate Field",ValidateFields);
                ConfigPackageField.MODIFY(TRUE);
              END;
            UNTIL ConfigPackageField.NEXT = 0;
        UNTIL ConfigPackageTable.NEXT = 0;
    END;

    LOCAL PROCEDURE SetPackageFieldValue@13(ConfigPackageCode@1001 : Code[20];TableID@1002 : Integer;RecordNo@1003 : Integer;FieldNo@1004 : Integer;NewValue@1005 : Text[250]);
    VAR
      ConfigPackageData@1000 : Record 8615;
    BEGIN
      ConfigPackageData.GET(ConfigPackageCode,TableID,RecordNo,FieldNo);
      ConfigPackageData.VALIDATE(Value,NewValue);
      ConfigPackageData.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CheckOptionNoExists@33(Value@1004 : Text;ExpectedResult@1005 : Boolean);
    VAR
      SalesLine@1003 : Record 37;
      RecRef@1001 : RecordRef;
      FieldRef@1000 : FieldRef;
    BEGIN
      RecRef.OPEN(DATABASE::"Sales Line");
      FieldRef := RecRef.FIELD(SalesLine.FIELDNO(Type));
      Assert.AreEqual(ExpectedResult,ConfigValidateManagement.OptionNoExists(FieldRef,COPYSTR(Value,1,250)),OptionNoExistsErr);
    END;

    LOCAL PROCEDURE CheckGetOptionNo@49(Value@1004 : Text;ExpectedResult@1005 : Integer);
    VAR
      SalesCrMemoLine@1006 : Record 115;
      RecRef@1001 : RecordRef;
      FieldRef@1000 : FieldRef;
    BEGIN
      RecRef.OPEN(DATABASE::"Sales Cr.Memo Line");
      FieldRef := RecRef.FIELD(SalesCrMemoLine.FIELDNO("IC Partner Ref. Type"));
      Assert.AreEqual(ExpectedResult,ConfigValidateManagement.GetOptionNo(COPYSTR(Value,1,250),FieldRef.OPTIONCAPTION),GetOptionNoErr);
    END;

    LOCAL PROCEDURE VerifyOption@31(OptionNo@1001 : Integer);
    VAR
      SalesCrMemoLine@1000 : Record 115;
    BEGIN
      SalesCrMemoLine.INIT;
      SalesCrMemoLine."IC Partner Ref. Type" := OptionNo;
      CheckGetOptionNo(FORMAT(SalesCrMemoLine."IC Partner Ref. Type"),OptionNo);
    END;

    [Test]
    PROCEDURE TableValidation_ValidateTableWithWrongOrderInPK_PackageErrorGenerated@3();
    VAR
      ConfigPackageError@1007 : Record 8617;
      ConfigPackage@1000 : Record 8623;
      ResourcePriceCode@1001 : Code[20];
    BEGIN
      Initialize;

      GeneratePackageWithFieldFillingDependency(ConfigPackage,1,0,ResourcePriceCode,FALSE);

      LibraryRapidStart.ValidatePackage(ConfigPackage,FALSE);

      Assert.IsTrue(NOT ConfigPackageError.ISEMPTY,NoMigrationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE TableValidation_ValidateTableWithCorrectOrderInPK_NoPackageErrors@11();
    VAR
      ConfigPackageError@1007 : Record 8617;
      ConfigPackage@1000 : Record 8623;
      ResourcePriceCode@1001 : Code[20];
    BEGIN
      Initialize;

      GeneratePackageWithFieldFillingDependency(ConfigPackage,0,1,ResourcePriceCode,FALSE);

      LibraryRapidStart.ValidatePackage(ConfigPackage,FALSE);

      Assert.IsTrue(ConfigPackageError.ISEMPTY,MigrationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE TableApplying_ApplyTableWithWrongOrderInPK_PackageErrorGenerated@15();
    VAR
      ConfigPackageError@1007 : Record 8617;
      ConfigPackage@1000 : Record 8623;
      ResourcePriceCode@1001 : Code[20];
    BEGIN
      Initialize;

      GeneratePackageWithFieldFillingDependency(ConfigPackage,1,0,ResourcePriceCode,FALSE);

      LibraryRapidStart.ApplyPackage(ConfigPackage,FALSE);

      Assert.IsTrue(NOT ConfigPackageError.ISEMPTY,NoMigrationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE TableApplying_ApplyTableWithCorrectOrderInPK_DataInTable@14();
    VAR
      ConfigPackage@1000 : Record 8623;
      ResourcePrice@1001 : Record 201;
      ResourcePriceCode@1002 : Code[20];
    BEGIN
      Initialize;

      GeneratePackageWithFieldFillingDependency(ConfigPackage,0,1,ResourcePriceCode,FALSE);

      LibraryRapidStart.ApplyPackage(ConfigPackage,FALSE);

      Assert.IsTrue(ResourcePrice.GET(ResourcePrice.Type::All,ResourcePriceCode,'',''),NoDataInTableAfterApply);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE TableApplying_ApplyValidTableDataWithoutFieldValidation@1();
    VAR
      ConfigPackage@1000 : Record 8623;
      CustPostingGroup@1001 : Record 92;
      CustPostingGroupCode@1003 : Code[10];
      GLAccountNo@1002 : Code[20];
    BEGIN
      Initialize;

      GenerateSimplePackage(FALSE,FALSE,FALSE,ConfigPackage,CustPostingGroupCode,GLAccountNo);

      LibraryRapidStart.ApplyPackage(ConfigPackage,FALSE);

      Assert.IsTrue(CustPostingGroup.GET(CustPostingGroupCode),NoDataInTableAfterApply);
      Assert.AreEqual(
        GLAccountNo,CustPostingGroup."Receivables Account",
        STRSUBSTNO(DataIsInvalidAfterApply,CustPostingGroup.FIELDCAPTION("Receivables Account")));

      Cleanup(ConfigPackage.Code);
      CustPostingGroup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE TableApplying_ApplyInvalidTableDataWithoutFieldValidation@5();
    VAR
      ConfigPackage@1000 : Record 8623;
      CustPostingGroup@1001 : Record 92;
      CustPostingGroupCode@1003 : Code[10];
      GLAccountNo@1002 : Code[20];
    BEGIN
      Initialize;

      GenerateSimplePackage(TRUE,FALSE,FALSE,ConfigPackage,CustPostingGroupCode,GLAccountNo);

      LibraryRapidStart.ApplyPackage(ConfigPackage,FALSE);

      Assert.IsTrue(CustPostingGroup.GET(CustPostingGroupCode),NoDataInTableAfterApply);
      Assert.AreEqual(
        GLAccountNo,CustPostingGroup."Receivables Account",
        STRSUBSTNO(DataIsInvalidAfterApply,CustPostingGroup.FIELDCAPTION("Receivables Account")));

      Cleanup(ConfigPackage.Code);
      CustPostingGroup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE TableApplying_ApplyTableWhenAppliedRecordExists@8();
    VAR
      ConfigPackage@1003 : Record 8623;
      CustPostingGroup@1002 : Record 92;
      CustPostingGroupCode@1001 : Code[10];
      GLAccountNo@1000 : Code[20];
    BEGIN
      Initialize;

      GenerateSimplePackage(FALSE,TRUE,FALSE,ConfigPackage,CustPostingGroupCode,GLAccountNo);

      CustPostingGroup.GET(CustPostingGroupCode);
      CustPostingGroup."Receivables Account" := '';
      CustPostingGroup.MODIFY;

      LibraryRapidStart.ApplyPackage(ConfigPackage,FALSE);

      Assert.IsTrue(CustPostingGroup.GET(CustPostingGroupCode),NoDataInTableAfterApply);
      Assert.AreEqual(
        GLAccountNo,CustPostingGroup."Receivables Account",
        STRSUBSTNO(DataIsInvalidAfterApply,CustPostingGroup.FIELDCAPTION("Receivables Account")));

      Cleanup(ConfigPackage.Code);
      CustPostingGroup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE TableValidation_ValidateValidTableDataWithoutFieldValidation@7();
    VAR
      ConfigPackageError@1007 : Record 8617;
      ConfigPackage@1000 : Record 8623;
      CustPostingGroupCode@1003 : Code[10];
      GLAccountNo@1002 : Code[20];
    BEGIN
      Initialize;

      GenerateSimplePackage(FALSE,FALSE,FALSE,ConfigPackage,CustPostingGroupCode,GLAccountNo);

      LibraryRapidStart.ValidatePackage(ConfigPackage,FALSE);

      ConfigPackageError.SETRANGE("Package Code",ConfigPackage.Code);
      Assert.IsTrue(ConfigPackageError.ISEMPTY,PackageValidationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE TableValidation_ValidateInvalidTableDataWithoutFieldValidation@10();
    VAR
      ConfigPackageError@1002 : Record 8617;
      ConfigPackage@1001 : Record 8623;
      CustPostingGroupCode@1004 : Code[10];
      GLAccountNo@1003 : Code[20];
    BEGIN
      Initialize;

      GenerateSimplePackage(TRUE,FALSE,FALSE,ConfigPackage,CustPostingGroupCode,GLAccountNo);

      LibraryRapidStart.ValidatePackage(ConfigPackage,FALSE);

      ConfigPackageError.SETRANGE("Package Code",ConfigPackage.Code);
      Assert.IsTrue(ConfigPackageError.ISEMPTY,PackageValidationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE TableValidation_ValidateTableWhenValidatedRecordExists@9();
    VAR
      ConfigPackage@1003 : Record 8623;
      ConfigPackageError@1002 : Record 8617;
      ResourcePriceCode@1000 : Code[20];
    BEGIN
      // Verify that ValidatePackage works correctly when a record being validated exists in DB

      Initialize;

      GeneratePackageWithFieldFillingDependency(ConfigPackage,0,1,ResourcePriceCode,TRUE);

      LibraryRapidStart.ValidatePackage(ConfigPackage,FALSE);

      ConfigPackageError.SETRANGE("Package Code",ConfigPackage.Code);
      Assert.IsTrue(ConfigPackageError.ISEMPTY,PackageValidationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE TableValidation_ValidateMultipleErrorsCreated@17();
    VAR
      ConfigPackage@1001 : Record 8623;
      ConfigPackageData@1000 : Record 8615;
      ConfigPackageError@1005 : Record 8617;
      CustPostingGroup@1004 : Record 92;
      CustPostingGroupCode@1002 : Code[10];
      GLAccountNo@1003 : Code[20];
    BEGIN
      // Verify that a package error is created for every invalid fata entry when a single package line contains more than one error

      Initialize;

      // The package is created with one error in data
      GenerateSimplePackage(
        TRUE,// Generate package with invalid G/L Account code
        FALSE,// Do not save package record
        TRUE,// Validate package fields
        ConfigPackage,// Resulting package
        CustPostingGroupCode,// Code of customer posting group loaded to package
        GLAccountNo); // G/L Account No. used in package

      // Invalidate one more field
      SetPackageFieldValue(
        ConfigPackage.Code,DATABASE::"Customer Posting Group",1,CustPostingGroup.FIELDNO("Service Charge Acc."),GLAccountNo);

      LibraryRapidStart.ValidatePackage(ConfigPackage,FALSE);

      // Make sure that two errors have been created
      ConfigPackageError.SETRANGE("Package Code",ConfigPackage.Code);
      Assert.AreEqual(2,ConfigPackageError.COUNT,PackageValidationError);

      ConfigPackageData.GET(ConfigPackage.Code,DATABASE::"Customer Posting Group",1,CustPostingGroup.FIELDNO("Receivables Account"));
      Assert.IsTrue(ConfigPackageData.Invalid,InvalidDataExpected);

      ConfigPackageData.GET(ConfigPackage.Code,DATABASE::"Customer Posting Group",1,CustPostingGroup.FIELDNO("Service Charge Acc."));
      Assert.IsTrue(ConfigPackageData.Invalid,InvalidDataExpected);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE TableValidation_CorrectPackageErrorAfterValidation@18();
    VAR
      ConfigPackage@1005 : Record 8623;
      ConfigPackageData@1004 : Record 8615;
      ConfigPackageError@1006 : Record 8617;
      CustPostingGroup@1002 : Record 92;
      GLAccount@1003 : Record 15;
      CustPostingGroupCode@1001 : Code[10];
      GLAccountNo@1000 : Code[20];
    BEGIN
      // Verify that a package error is deleted when the invalid record is corrected

      Initialize;

      GenerateSimplePackage(
        TRUE,// Generate package with invalid G/L Account code
        FALSE,// Do not save package record
        TRUE,// Validate package fields
        ConfigPackage,// Resulting package
        CustPostingGroupCode,// Code of customer posting group loaded to package
        GLAccountNo); // G/L Account No. used in package

      LibraryRapidStart.ValidatePackage(ConfigPackage,FALSE);

      // Make sure that the error is created
      ConfigPackageError.SETRANGE("Package Code",ConfigPackage.Code);
      Assert.AreEqual(1,ConfigPackageError.COUNT,PackageValidationError);

      ConfigPackageData.GET(ConfigPackage.Code,DATABASE::"Customer Posting Group",1,CustPostingGroup.FIELDNO("Receivables Account"));
      Assert.IsTrue(ConfigPackageData.Invalid,InvalidDataExpected);

      // Now, fix it
      LibraryERM.FindGLAccount(GLAccount);
      SetPackageFieldValue(
        ConfigPackage.Code,DATABASE::"Customer Posting Group",1,CustPostingGroup.FIELDNO("Receivables Account"),GLAccount."No.");
      LibraryRapidStart.ValidatePackage(ConfigPackage,FALSE);

      ConfigPackageError.SETRANGE("Package Code",ConfigPackage.Code);
      Assert.IsTrue(ConfigPackageError.ISEMPTY,PackageValidationError);

      ConfigPackageData.GET(ConfigPackage.Code,DATABASE::"Customer Posting Group",1,CustPostingGroup.FIELDNO("Receivables Account"));
      Assert.IsFalse(ConfigPackageData.Invalid,PackageValidationError);

      Cleanup(ConfigPackage.Code);
    END;

    [ModalPageHandler]
    PROCEDURE ConfigPackageRecordsHandler@19(VAR ConfigPackageRecords@1000 : TestPage 8626);
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);

      ConfigPackageRecords.FIRST;
      ConfigPackageRecords.Field2.SETVALUE(GLAccount."No.");

      Assert.IsFalse(ConfigPackageRecords.FIRST,STRSUBSTNO(ListMustBeEmpty,ConfigPackageRecords.CAPTION));
    END;

    [Test]
    [HandlerFunctions(ConfigPackageRecordsHandler)]
    PROCEDURE PageValidation_CorrectPackageErrorFromPage@16();
    VAR
      ConfigPackage@1001 : Record 8623;
      ConfigPackageData@1004 : Record 8615;
      CustomerPostingGroup@1005 : Record 92;
      ConfigPackageCard@1000 : TestPage 8614;
      CustPostingGroupCode@1002 : Code[10];
      GLAccountNo@1003 : Code[20];
    BEGIN
      // Verify that a package error can be corrected from "Config. Package Records" page

      Initialize;

      GenerateSimplePackage(
        TRUE,// Generate package with invalid G/L Account code
        FALSE,// Do not save package record
        TRUE,// Validate package fields
        ConfigPackage,// Resulting package
        CustPostingGroupCode,// Code of customer posting group loaded to package
        GLAccountNo); // G/L Account No. used in package

      LibraryRapidStart.ValidatePackage(ConfigPackage,FALSE);

      ConfigPackageData.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigPackageData.SETRANGE("Field ID",CustomerPostingGroup.FIELDNO("Receivables Account"));
      ConfigPackageData.SETRANGE(Invalid,FALSE);
      Assert.IsTrue(ConfigPackageData.ISEMPTY,InvalidDataExpected);

      ConfigPackageCard.OPENVIEW;
      ConfigPackageCard.GOTORECORD(ConfigPackage);
      ConfigPackageCard."Config. Package Subform".GOTOKEY(ConfigPackage.Code,DATABASE::"Customer Posting Group");

      ConfigPackageCard."Config. Package Subform".PackageErrors.INVOKE;

      ConfigPackageData.GET(
        ConfigPackage.Code,DATABASE::"Customer Posting Group",1,CustomerPostingGroup.FIELDNO("Receivables Account"));
      Assert.IsFalse(ConfigPackageData.Invalid,PackageValidationError);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE OptionNoExistsUT_NonIntegerValue_False@21();
    BEGIN
      CheckOptionNoExists('A',FALSE);
    END;

    [Test]
    PROCEDURE OptionNoExistsUT_NegativeValue_False@22();
    BEGIN
      CheckOptionNoExists('-1',FALSE);
    END;

    [Test]
    PROCEDURE OptionNoExistsUT_ZeroValue_True@23();
    BEGIN
      CheckOptionNoExists('0',TRUE);
    END;

    [Test]
    PROCEDURE OptionNoExistsUT_BetweenZeroAndMaxOptionNo_True@24();
    BEGIN
      CheckOptionNoExists('2',TRUE);
    END;

    [Test]
    PROCEDURE OptionNoExistsUT_MaxOptionNo_True@25();
    BEGIN
      CheckOptionNoExists('5',TRUE);
    END;

    [Test]
    PROCEDURE OptionNoExistsUT_MoreThanMax_False@26();
    BEGIN
      CheckOptionNoExists('10',FALSE);
    END;

    [Test]
    PROCEDURE GetOptionNoUT_NonOptionSubstring_NoOption@45();
    BEGIN
      CheckGetOptionNo(FORMAT(CREATEGUID),-1);
    END;

    [Test]
    PROCEDURE GetOptionNoUT_OptionSubstringNotEqualToOption_NoOption@53();
    VAR
      SalesCrMemoLine@1001 : Record 115;
    BEGIN
      SalesCrMemoLine."IC Partner Ref. Type" := SalesCrMemoLine."IC Partner Ref. Type"::Item;
      CheckGetOptionNo(
        COPYSTR(
          FORMAT(SalesCrMemoLine."IC Partner Ref. Type"),1,
          STRLEN(FORMAT(SalesCrMemoLine."IC Partner Ref. Type")) / 2),-1);
    END;

    [Test]
    PROCEDURE GetOptionNoUT_EmptySubstringAndEmptyOptionExists_NoFound@54();
    BEGIN
      CheckGetOptionNo('',0);
    END;

    [Test]
    PROCEDURE GetOptionNoUT_EmptySubstringAndEmptyOptionNotExists_NoOption@55();
    BEGIN
      Assert.AreEqual(-1,ConfigValidateManagement.GetOptionNo('','aaa,bbb'),GetOptionNoErr);
    END;

    [Test]
    PROCEDURE GetOptionNoUT_EmptySubstringAndEmptyOptionInTheMiddle_OptionFound@28();
    BEGIN
      Assert.AreEqual(1,ConfigValidateManagement.GetOptionNo('','aaa,,bbb'),GetOptionNoErr);
    END;

    [Test]
    PROCEDURE GetOptionNoUT_EmptySubstringAndSpaceOptionInTheEnd_OptionFound@29();
    BEGIN
      Assert.AreEqual(2,ConfigValidateManagement.GetOptionNo('','aaa,bbb, '),GetOptionNoErr);
    END;

    [Test]
    PROCEDURE GetOptionNoUT_SpaceSubstringAndSpaceOptionInTheEnd_OptionFound@30();
    BEGIN
      Assert.AreEqual(2,ConfigValidateManagement.GetOptionNo(' ','aaa,bbb, '),GetOptionNoErr);
    END;

    [Test]
    PROCEDURE GetOptionNoUT_FirstOption_OptionFound@56();
    VAR
      SalesCrMemoLine@1000 : Record 115;
    BEGIN
      VerifyOption(SalesCrMemoLine."IC Partner Ref. Type"::" ");
    END;

    [Test]
    PROCEDURE GetOptionNoUT_MiddleOption_OptionFound@57();
    VAR
      SalesCrMemoLine@1000 : Record 115;
    BEGIN
      VerifyOption(SalesCrMemoLine."IC Partner Ref. Type"::"Charge (Item)");
    END;

    [Test]
    PROCEDURE GetOptionNoUT_LastOption_OptionFound@58();
    VAR
      SalesCrMemoLine@1000 : Record 115;
    BEGIN
      VerifyOption(SalesCrMemoLine."IC Partner Ref. Type"::"Common Item No.");
    END;

    [Test]
    PROCEDURE GetOptionNoUT_OnlyOneOptionExists_OptionFound@27();
    BEGIN
      Assert.AreEqual(0,ConfigValidateManagement.GetOptionNo('aaa','aaa'),GetOptionNoErr);
    END;

    [Test]
    PROCEDURE GetOptionNoUT_OnlyOneEmptyOptionExists_OptionFound@32();
    BEGIN
      Assert.AreEqual(0,ConfigValidateManagement.GetOptionNo('',''),GetOptionNoErr);
    END;

    [Test]
    PROCEDURE GetOptionNoUT_GetWrongOptionFromOneOption_OptionNotFound@34();
    BEGIN
      Assert.AreEqual(-1,ConfigValidateManagement.GetOptionNo('','aaa'),GetOptionNoErr);
    END;

    [Test]
    PROCEDURE GetOptionNoUT_GetWrongOptionFromOneEmptyOption_OptionNotFound@35();
    BEGIN
      Assert.AreEqual(-1,ConfigValidateManagement.GetOptionNo('aaa',''),GetOptionNoErr);
    END;

    [Test]
    PROCEDURE TableApplying_ApplyTableDataWithCurrency@36();
    VAR
      ConfigPackage@1001 : Record 8623;
      ConfigPackageTable@1002 : Record 8613;
      GenJnlLine@1003 : Record 81;
      Customer@1005 : Record 18;
      GenJournalBatch@1007 : Record 232;
      GenJournalTemplate@1008 : Record 80;
      LibrarySales@1006 : Codeunit 130509;
      RecRef@1004 : RecordRef;
      CurrencyCode@1000 : Code[10];
    BEGIN
      // Create Config. Package Record (Gen. Jnl Line with Currency)
      // Check no package errors exist after Package Application
      Initialize;

      CurrencyCode := LibraryERM.CreateCurrencyWithExchangeRate(
          WORKDATE - LibraryRandom.RandInt(365),
          LibraryRandom.RandDec(2,2),
          LibraryRandom.RandDec(2,2));
      LibrarySales.CreateCustomer(Customer);
      Customer."Currency Code" := CurrencyCode;
      Customer.MODIFY(TRUE);
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"Gen. Journal Line",
        GenJnlLine.FIELDNO("Journal Template Name"),
        GenJournalTemplate.Name,
        SingleEntryRecNo);

      RecRef.GETTABLE(GenJnlLine);
      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"Gen. Journal Line",
        GenJnlLine.FIELDNO("Line No."),
        FORMAT(LibraryUtility.GetNewLineNo(RecRef,GenJnlLine.FIELDNO("Line No."))),
        SingleEntryRecNo);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"Gen. Journal Line",
        GenJnlLine.FIELDNO("Account Type"),
        FORMAT(GenJnlLine."Account Type"::Customer),
        SingleEntryRecNo);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"Gen. Journal Line",
        GenJnlLine.FIELDNO("Account No."),
        Customer."No.",
        SingleEntryRecNo);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"Gen. Journal Line",
        GenJnlLine.FIELDNO("Posting Date"),
        FORMAT(WORKDATE),
        SingleEntryRecNo);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"Gen. Journal Line",
        GenJnlLine.FIELDNO("Currency Code"),
        CurrencyCode,
        SingleEntryRecNo);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"Gen. Journal Line",
        GenJnlLine.FIELDNO(Amount),
        FORMAT(LibraryRandom.RandDecInRange(1,1000,2)),
        SingleEntryRecNo);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::"Gen. Journal Line",
        GenJnlLine.FIELDNO("Journal Batch Name"),
        GenJournalBatch.Name,
        SingleEntryRecNo);

      LibraryRapidStart.ApplyPackage(ConfigPackage,FALSE);

      ConfigPackageTable.GET(ConfigPackage.Code,DATABASE::"Gen. Journal Line");
      ConfigPackageTable.CALCFIELDS("No. of Package Errors");

      // Validate
      Assert.AreEqual(0,ConfigPackageTable."No. of Package Errors",ConfigPackContErr);

      Cleanup(ConfigPackage.Code);
    END;

    [Test]
    PROCEDURE UT_SalesPriceTableProcessingOrder@37();
    VAR
      ConfigPackage@1000 : Record 8623;
      ConfigPackageTable@1001 : Record 8613;
    BEGIN
      // [FEATURE] [Sales Price] [UT]
      // [SCENARIO 375680] Field included in primary key should have higher Processing Order in configuration package

      // [GIVEN] Configuration package
      Initialize;
      LibraryRapidStart.CreatePackage(ConfigPackage);

      // [WHEN] Add table "Sales Price" in configuration package
      LibraryRapidStart.CreatePackageTable(ConfigPackageTable,ConfigPackage.Code,DATABASE::"Sales Price");

      // [THEN] Key field "Sales Type" with ID = "13" has "Processing Order" = 2
      VerifyProcessingOrder(ConfigPackage.Code,ConfigPackageTable."Table ID",13,2);
    END;

    [Test]
    PROCEDURE ApplyTableFilterFieldValue@39();
    VAR
      ConfigPackage@1003 : Record 8623;
      Permission@1000 : Record 2000000005;
      PermissionSet@1001 : Record 2000000004;
      GLAccount@1006 : Record 15;
      SecurityFilter@1004 : Text[250];
    BEGIN
      // [SCENARIO 363000] RapidStart Record with Field of TableFilter applies with no errors
      Initialize;

      // [GIVEN] Permission Set
      WITH PermissionSet DO BEGIN
        INIT;
        VALIDATE(
          "Role ID",
          LibraryUtility.GenerateRandomCode(FIELDNO("Role ID"),DATABASE::"Permission Set"));
        INSERT(TRUE);
      END;

      // [GIVEN] RapidStart Package Data for Permission Record with Security Filter = X (TableFilter field type).
      SecurityFilter := GLAccount.TABLECAPTION + ': ' + GLAccount.FIELDCAPTION("Account Type") + '=' +
        FORMAT(GLAccount."Account Type"::Heading);
      CreateRSPackageForPermissionRecord(
        ConfigPackage,PermissionSet."Role ID",Permission."Object Type"::"Table Data",DATABASE::"G/L Account",
        SecurityFilter);

      // [WHEN] RapidStart Package is applied
      LibraryRapidStart.ApplyPackage(ConfigPackage,FALSE);

      // [THEN] New Permission Record is created with Security Filter = X;
      Permission.GET(PermissionSet."Role ID",Permission."Object Type"::"Table Data",DATABASE::"G/L Account");
      Assert.AreEqual(
        SecurityFilter,FORMAT(Permission."Security Filter"),
        STRSUBSTNO(DataIsInvalidAfterApply,Permission.FIELDCAPTION("Security Filter")));
    END;

    LOCAL PROCEDURE VerifyProcessingOrder@38(PackageCode@1000 : Code[20];TableID@1001 : Integer;FieldID@1002 : Integer;ProcessingOrder@1003 : Integer);
    VAR
      ConfigPackageField@1004 : Record 8616;
    BEGIN
      ConfigPackageField.GET(PackageCode,TableID,FieldID);
      ConfigPackageField.TESTFIELD("Processing Order",ProcessingOrder);
    END;

    LOCAL PROCEDURE CreateRSPackageForPermissionRecord@77(VAR ConfigPackage@1007 : Record 8623;RoleID@1003 : Code[20];ObjectType@1004 : Option;ObjectID@1005 : Integer;SecurityFilter@1006 : Text[250]);
    VAR
      ConfigPackageTable@1000 : Record 8613;
      Permission@1002 : Record 2000000005;
    BEGIN
      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::Permission,
        Permission.FIELDNO("Role ID"),
        RoleID,
        SingleEntryRecNo);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::Permission,
        Permission.FIELDNO("Object Type"),
        FORMAT(ObjectType),
        SingleEntryRecNo);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::Permission,
        Permission.FIELDNO("Object ID"),
        FORMAT(ObjectID),
        SingleEntryRecNo);

      LibraryRapidStart.CreatePackageDataForField(
        ConfigPackage,
        ConfigPackageTable,
        DATABASE::Permission,
        Permission.FIELDNO("Security Filter"),
        SecurityFilter,
        SingleEntryRecNo);
    END;

    BEGIN
    {
      // [FEATURE] [Config Package] [Rapid Start]
    }
    END.
  }
}

