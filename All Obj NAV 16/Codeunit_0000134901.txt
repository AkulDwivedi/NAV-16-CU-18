OBJECT Codeunit 134901 ERM Customer Appl Rounding
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd;
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1001 : Codeunit 131300;
      LibrarySales@1006 : Codeunit 130509;
      Assert@1005 : Codeunit 130000;
      LibraryRandom@1002 : Codeunit 130440;
      isInitialized@1000 : Boolean;
      ApplnRoundPrecMessage@1004 : TextConst 'ENU="%1 must be %2 in %3 %4=%5."';
      ApplyEntryMessage@1003 : TextConst 'ENU=%1 must be %2 in %3.';

    [Test]
    PROCEDURE ApplRoundingWithCurrency@13();
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1000 : Record 81;
      Currency@1002 : Record 4;
      ApplRoundingAmountLCY@1003 : Decimal;
    BEGIN
      // Check that correct Application Rounding Amount Applied after posting General Journal Line with FCY and making Payment against it.

      // Setup: Create Customer and Update Currency.
      Initialize;
      Currency.GET(UpdateCurrency(CreateCurrencyForApplRounding,LibraryRandom.RandInt(9) / 100));

      // Using value for calculating Application Rounding Amount.
      ApplRoundingAmountLCY := LibraryERM.ConvertCurrency(Currency."Appln. Rounding Precision",Currency.Code,'',WORKDATE);

      // Create and Post Invoice and Payment Line.
      SelectGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,LibraryRandom.RandInt(300),CreateCustomer,
        CreateCurrencyForApplRounding);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Payment,
        -GenJournalLine.Amount - Currency."Appln. Rounding Precision",GenJournalLine."Account No.",Currency.Code);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Apply and Post Customer Ledger Entry.
      ApplyAndPostCustomerEntry(GenJournalLine."Document No.");

      // Verify: Verify Remaining Amount of Customer Ledger Entry.
      VerifyApplnRoundingPrecision(GenJournalLine."Document No.",ApplRoundingAmountLCY);
      VerifyCustomerLedgerEntry(GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE ApplRoundingWithGLSetup@2();
    VAR
      GenJournalBatch@1001 : Record 232;
      GenJournalLine@1000 : Record 81;
      GeneralLedgerSetup@1003 : Record 98;
      ApplRoundingAmount@1002 : Decimal;
      ApplnRoundingPrecisionAmount@1004 : Decimal;
    BEGIN
      // Check that correct Application Rounding Amount Applied after posting General Journal Line with LCY and making Payment against it.

      // Setup: Create Customer and Update General Ledger setup.
      Initialize;
      ApplnRoundingPrecisionAmount := UpdateGeneralLedgerSetup(GeneralLedgerSetup,LibraryRandom.RandInt(9) / 100);
      ApplRoundingAmount := GeneralLedgerSetup."Appln. Rounding Precision";

      // Create and Post Invoice and Payment Line.
      SelectGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,LibraryRandom.RandInt(300),CreateCustomer,
        CreateCurrencyForApplRounding);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Payment,-GenJournalLine."Amount (LCY)" -
        GeneralLedgerSetup."Appln. Rounding Precision",GenJournalLine."Account No.",'');
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Apply and Post Customer Ledger Entry.
      ApplyAndPostCustomerEntry(GenJournalLine."Document No.");

      // Verify: Verify Remaining Amount of Customer Ledger Entry.
      VerifyApplnRoundingPrecision(GenJournalLine."Document No.",ApplRoundingAmount);
      VerifyCustomerLedgerEntry(GenJournalLine."Document No.");

      // TearDown: Roll back the Previous General Ledger Setup.
      UpdateGeneralLedgerSetup(GeneralLedgerSetup,ApplnRoundingPrecisionAmount);
    END;

    [Test]
    PROCEDURE CorrectionOfRemAmtWithCurrency@5();
    VAR
      GenJournalBatch@1003 : Record 232;
      GenJournalLine@1000 : Record 81;
      Currency@1002 : Record 4;
      Amount@1001 : Decimal;
    BEGIN
      // Check that an Entry of Entry Type Correction of Remaining Amount created after posting General Journal Line
      // with FCY and making Payment against it.

      // Setup: Create Customer and Update Currency.
      Initialize;

      // Fix the value of Application Rounding Precision because without fixing this value we are not able to generate
      // a Correction Entry.On Random value of Application Rounding Precision we are not able to find Correction Amount value.
      Currency.GET(UpdateCurrency(CreateCurrencyCorrectionEntry,0.05));

      // Create and Post Invoice and Payment Line.
      SelectGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,LibraryRandom.RandInt(300),
        CreateCustomer,CreateCurrencyCorrectionEntry);
      Amount := LibraryERM.ConvertCurrency(GenJournalLine.Amount,GenJournalLine."Currency Code",Currency.Code,WORKDATE);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Payment,
        -Amount + Currency."Appln. Rounding Precision",GenJournalLine."Account No.",Currency.Code);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Apply and Post Customer Ledger Entry.
      ApplyAndPostCustomerEntry(GenJournalLine."Document No.");

      // Verify: Verify Remaining Amount of Customer Ledger Entry.
      VerifyCorrectionofRemAmount(GenJournalLine."Document No.");
      VerifyCustomerLedgerEntry(GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE CorrectionOfRemAmtWithCurrencyAmounts@18();
    VAR
      Customer@1001 : Record 18;
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1003 : Record 81;
      CurrencyCode@1000 : Code[10];
    BEGIN
      // Check that detailed customer ledger entry with type Correction for Remaining Amount included into (Amount LCY)
      // and reconcile with G/L entries for receivables account

      // Create and Post General Line for Two Invoices and apply Payment with currency to both invoices
      Initialize;
      CurrencyCode := LibraryERM.CreateCurrencyWithExchangeRate(WORKDATE,3,3);
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.MODIFY;

      SelectGenJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,Customer."No.",1);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,Customer."No.",1);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Customer,Customer."No.",-2);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Apply Payment Against Invoice and Post it.
      ApplyAndPostCustomerPayment(GenJournalLine."Document No.");

      // Verify: Account Receivables amount should be -0.67, Correction amount should be 0.1
      VerifyCorrAmountGLEntries(Customer,GenJournalLine."Document No.",-0.67,0.01);
      VerifyCorrAmountCustLedgEntries(GenJournalLine."Document No.",-0.66);
      VerifyCorrAmountDtldCustLedgEntries(GenJournalLine."Document No.",0.01);
    END;

    [Test]
    [HandlerFunctions(ApplyCustomerEntriesPageHandler)]
    PROCEDURE ApplyCustomerEntriesFieldsValue@14();
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      GenJournalBatch@1003 : Record 232;
      GenJournalLine@1000 : Record 81;
      GeneralJournal@1005 : TestPage 39;
      Amount@1001 : Decimal;
    BEGIN
      // Check Application Rounding and Balance field's value on Apply Customer Entries Page.

      // Setup: Create General Line for Invoice and Post with Random Values.
      Initialize;
      GeneralLedgerSetup.GET;
      SelectGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,LibraryRandom.RandInt(100),CreateCustomer,
        CreateAndModifyCurrency);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Create Another general line for Payment with Posted Entry.
      Amount := GenJournalLine.Amount - GeneralLedgerSetup."Inv. Rounding Precision (LCY)";
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Payment,-Amount,GenJournalLine."Account No.",
        GenJournalLine."Currency Code");

      // Verify: Open Apply Customer Entries page through General Journal and Verify Balance and Rounding Values with ApplyCustomerEntriesPageHandler.
      GeneralJournal.OPENEDIT;
      GeneralJournal.CurrentJnlBatchName.SETVALUE(GenJournalBatch.Name);
      GeneralJournal."Apply Entries".INVOKE;
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Setup demo data.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.RemoveBlankGenJournalTemplate;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ApplyAndPostCustomerEntry@11(DocumentNo@1002 : Code[20]);
    VAR
      CustLedgerEntry@1003 : Record 21;
      CustLedgerEntry2@1000 : Record 21;
    BEGIN
      // Apply Payment Entry on Posted Invoice.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Payment,DocumentNo);
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
      LibraryERM.SetApplyCustomerEntry(CustLedgerEntry,CustLedgerEntry."Remaining Amount");

      // Set Applies-to ID.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry2,CustLedgerEntry2."Document Type"::Invoice,DocumentNo);
      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry2);

      // Post Application Entries.
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry);
    END;

    LOCAL PROCEDURE ApplyAndPostCustomerPayment@19(DocumentNo@1002 : Code[20]);
    VAR
      CustLedgerEntry@1003 : Record 21;
      CustLedgerEntry2@1000 : Record 21;
    BEGIN
      // Apply Payment Entry on Posted Invoice.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Payment,DocumentNo);
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
      LibraryERM.SetApplyCustomerEntry(CustLedgerEntry,CustLedgerEntry."Remaining Amount");

      // Set Applies-to ID.
      CustLedgerEntry2.SETCURRENTKEY("Customer No.",Open,Positive);
      CustLedgerEntry2.SETRANGE("Customer No.",CustLedgerEntry."Customer No.");
      CustLedgerEntry2.SETRANGE("Document Type",CustLedgerEntry2."Document Type"::Invoice);
      CustLedgerEntry2.SETRANGE(Open,TRUE);
      IF CustLedgerEntry2.FINDSET THEN
        REPEAT
          LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry2);
        UNTIL CustLedgerEntry2.NEXT = 0;

      // Post Application Entries.
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry);
    END;

    LOCAL PROCEDURE CreateAndModifyCurrency@16() : Code[10];
    VAR
      Currency@1000 : Record 4;
    BEGIN
      // Take Random value for Application Rounding Precision.
      Currency.GET(CreateCurrencyForApplRounding);
      Currency.VALIDATE("Appln. Rounding Precision",LibraryRandom.RandDec(10,2));
      Currency.MODIFY(TRUE);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCurrency@3(VAR Currency@1001 : Record 4);
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
    END;

    LOCAL PROCEDURE CreateCurrencyForApplRounding@12() : Code[10];
    VAR
      Currency@1000 : Record 4;
    BEGIN
      CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCurrencyCorrectionEntry@10() : Code[10];
    VAR
      Currency@1001 : Record 4;
      CurrencyExchangeRate@1002 : Record 330;
    BEGIN
      Currency.GET(CreateCurrencyForApplRounding);
      CurrencyExchangeRate.SETRANGE("Currency Code",Currency.Code);
      CurrencyExchangeRate.FINDFIRST;

      // Relational Exch. Rate Amount and Relational Adjmt Exch Rate Amt always Half than Exchange Rate Amount.
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount" / 2);
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCustomer@17() : Code[20];
    VAR
      Customer@1000 : Record 18;
      LibrarySales@1001 : Codeunit 130509;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@1(VAR GenJournalLine@1006 : Record 81;GenJournalBatch@1001 : Record 232;DocumentType@1004 : Option;Amount@1000 : Decimal;CustomerNo@1003 : Code[20];CurrencyCode@1005 : Code[10]);
    BEGIN
      // Select Journal Batch Name.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Customer,CustomerNo,Amount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectGenJournalBatch@15(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE UpdateCurrency@23(CurrencyCode@1000 : Code[10];ApplnRoundingPrecision@1001 : Decimal) : Code[10];
    VAR
      Currency@1002 : Record 4;
    BEGIN
      Currency.GET(CurrencyCode);
      Currency.VALIDATE("Appln. Rounding Precision",ApplnRoundingPrecision);
      Currency.MODIFY(TRUE);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE UpdateGeneralLedgerSetup@7(VAR GeneralLedgerSetup@1000 : Record 98;ApplnRoundingPrecisionAmount@1001 : Decimal) ApplnRoundingPrecision : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      ApplnRoundingPrecision := GeneralLedgerSetup."Appln. Rounding Precision";
      GeneralLedgerSetup.VALIDATE("Appln. Rounding Precision",ApplnRoundingPrecisionAmount);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyApplnRoundingPrecision@9(DocumentNo@1001 : Code[20];ApplnRoundPrecAmount@1003 : Decimal);
    VAR
      CustLedgerEntry@1000 : Record 21;
      DetailedCustLedgEntry@1002 : Record 379;
      GeneralLedgerSetup@1005 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Payment,DocumentNo);
      DetailedCustLedgEntry.SETRANGE("Document No.",CustLedgerEntry."Document No.");
      DetailedCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
      DetailedCustLedgEntry.SETRANGE("Entry Type",DetailedCustLedgEntry."Entry Type"::"Appln. Rounding");
      DetailedCustLedgEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        DetailedCustLedgEntry."Amount (LCY)",ApplnRoundPrecAmount,GeneralLedgerSetup."Inv. Rounding Precision (LCY)",
        STRSUBSTNO(ApplnRoundPrecMessage,DetailedCustLedgEntry.FIELDCAPTION("Amount (LCY)"),DetailedCustLedgEntry."Amount (LCY)",
          DetailedCustLedgEntry.TABLECAPTION,DetailedCustLedgEntry.FIELDCAPTION("Entry No."),DetailedCustLedgEntry."Entry No." ));
    END;

    LOCAL PROCEDURE VerifyCorrectionofRemAmount@6(DocumentNo@1001 : Code[20]);
    VAR
      CustLedgerEntry@1000 : Record 21;
      DetailedCustLedgEntry@1002 : Record 379;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Payment,DocumentNo);
      DetailedCustLedgEntry.SETRANGE("Document No.",CustLedgerEntry."Document No.");
      DetailedCustLedgEntry.SETRANGE("Entry Type",DetailedCustLedgEntry."Entry Type"::"Correction of Remaining Amount");
      DetailedCustLedgEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerEntry@4(DocumentNo@1002 : Code[20]);
    VAR
      CustLedgerEntry@1000 : Record 21;
      GeneralLedgerSetup@1003 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CustLedgerEntry.FINDSET;
      REPEAT
        CustLedgerEntry.CALCFIELDS("Remaining Amount");
        Assert.AreNearlyEqual(
          0,CustLedgerEntry."Remaining Amount",GeneralLedgerSetup."Inv. Rounding Precision (LCY)",
          STRSUBSTNO(ApplnRoundPrecMessage,CustLedgerEntry.FIELDCAPTION("Amount (LCY)"),CustLedgerEntry."Amount (LCY)",
            CustLedgerEntry.TABLECAPTION,CustLedgerEntry.FIELDCAPTION("Entry No."),CustLedgerEntry."Entry No." ));
      UNTIL CustLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyCorrAmountGLEntries@24(Customer@1001 : Record 18;DocumentNo@1000 : Code[20];ReceivablesAmount@1004 : Decimal;CorrectionAmount@1005 : Decimal);
    VAR
      CustomerPostingGroup@1002 : Record 92;
      GLEntry@1003 : Record 17;
    BEGIN
      CustomerPostingGroup.GET(Customer."Customer Posting Group");
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Payment);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",CustomerPostingGroup."Receivables Account");
      GLEntry.FIND('-');
      Assert.AreEqual(ReceivablesAmount,GLEntry.Amount,STRSUBSTNO('G/L receivables amount should be %1',ReceivablesAmount));
      GLEntry.NEXT;
      Assert.AreEqual(CorrectionAmount,GLEntry.Amount,STRSUBSTNO('G/L correction amount should be %1.',CorrectionAmount));
    END;

    LOCAL PROCEDURE VerifyCorrAmountCustLedgEntries@21(DocumentNo@1000 : Code[20];ExpectedAmount@1001 : Decimal);
    VAR
      CustLedgerEntry@1002 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Payment);
      CustLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.CALCFIELDS("Amount (LCY)");
      Assert.AreEqual(
        ExpectedAmount,CustLedgerEntry."Amount (LCY)",
        STRSUBSTNO('Amount (LCY) in payment customer entry should be %1.',ExpectedAmount));
    END;

    LOCAL PROCEDURE VerifyCorrAmountDtldCustLedgEntries@20(DocumentNo@1000 : Code[20];ExpectedAmount@1002 : Decimal);
    VAR
      DetailedCustLedgEntry@1001 : Record 379;
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Document Type",DetailedCustLedgEntry."Document Type"::Payment);
      DetailedCustLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedCustLedgEntry.SETRANGE("Entry Type",DetailedCustLedgEntry."Entry Type"::"Correction of Remaining Amount");
      DetailedCustLedgEntry.FINDLAST;
      Assert.AreEqual(
        ExpectedAmount,DetailedCustLedgEntry."Amount (LCY)",
        STRSUBSTNO('Correction of remaining Amount (LCY) should be %1',ExpectedAmount));
    END;

    [ModalPageHandler]
    PROCEDURE ApplyCustomerEntriesPageHandler@27(VAR ApplyCustomerEntries@1000 : TestPage 232);
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      // Take Zero for Validation on Apply Customer Entries Page.
      GeneralLedgerSetup.GET;
      ApplyCustomerEntries."Set Applies-to ID".INVOKE;
      Assert.AreEqual(
        0,ApplyCustomerEntries.ApplnRounding.ASDECIMAL,
        STRSUBSTNO(ApplyEntryMessage,ApplyCustomerEntries.ApplnRounding.CAPTION,0,ApplyCustomerEntries.CAPTION));
      Assert.AreEqual(
        GeneralLedgerSetup."Inv. Rounding Precision (LCY)",ApplyCustomerEntries.ControlBalance.ASDECIMAL,
        STRSUBSTNO(
          ApplyEntryMessage,ApplyCustomerEntries.ControlBalance.CAPTION,GeneralLedgerSetup."Inv. Rounding Precision (LCY)",
          ApplyCustomerEntries.CAPTION));
    END;

    BEGIN
    {
      // [FEATURE] [Application Rounding] [Sales]
      Unsupported version tags:
      NA: Unable to Execute
      ES: Unable to Execute

      Test Application Rounding Amount for Customer.
        1. Test that make invoice in a foreign currency and payment in another that trigger Application Rounding Amount where
           Application Rounding define on Currency.
        2. Test that make invoice in a foreign currency and payment in another that trigger Application Rounding Amount where
           Application Rounding define on General Ledger Setup.
        3. Test that make invoice in a foreign currency and payment in another that trigger Correction of Remaining Amount where
           Application Rounding define on Currency.
        4. Check Application Rounding and Balance field's value on Apply Customer Entries Page.

            Covers Test Cases:
            -------------------------------------------------------
            Test Function Name               Test TFS ID
            -------------------------------------------------------
            ApplRoundingWithCurrency         125848,125600,125850,125602,125851,125603
            ApplRoundingWithGLSetup          125849,125601,125852,125604
            CorrectionOfRemAmtWithCurrency   121609,125858
            CorrectionOfRemAmtWithCurrencyAmounts  97134

            Covers Test Cases: 264422
            -------------------------------------------------------
            Test Function Name               Test TFS ID
            -------------------------------------------------------
            ApplyCustomerEntriesFieldsValue   121792
    }
    END.
  }
}

