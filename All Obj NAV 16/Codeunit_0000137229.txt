OBJECT Codeunit 137229 SCM Item Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1003 : Codeunit 132201;
      LibraryWarehouse@1006 : Codeunit 132204;
      LibraryPurchase@1007 : Codeunit 130512;
      LibrarySales@1005 : Codeunit 130509;
      Assert@1004 : Codeunit 130000;
      LibraryVariableStorage@1008 : Codeunit 131004;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryUtility@1002 : Codeunit 131000;
      isInitialized@1000 : Boolean;
      InvPickCreatedMessageTxt@1009 : TextConst 'ENU=Number of Invt. Pick activities created: 1 out of a total of 1.';

    [Test]
    PROCEDURE CheckUpdateOnPosting@8();
    VAR
      ItemAnalysisView@1000 : Record 7152;
      LastEntryNo@1004 : Integer;
    BEGIN
      // 5. Check Update on Posting for GL
      Initialize;

      // Setup
      PrepareAnalysisViewRec(ItemAnalysisView,FALSE,TRUE);

      // Validate
      CODEUNIT.RUN(CODEUNIT::"Update Item Analysis View",ItemAnalysisView);
      ItemAnalysisView.FIND;
      ItemAnalysisView.TESTFIELD("Last Entry No.");
      LastEntryNo := ItemAnalysisView."Last Entry No.";
      PostSalesOrder;
      CODEUNIT.RUN(CODEUNIT::"Update Item Analysis View",ItemAnalysisView);
      ItemAnalysisView.FIND;
      ItemAnalysisView.TESTFIELD("Last Entry No.");
      Assert.IsTrue(ItemAnalysisView."Last Entry No." > LastEntryNo,'Item Analysis View was not updated.');
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CheckUpdateOnPostingRollback@134();
    VAR
      ItemAnalysisView@1000 : Record 7152;
      TransferLine@1007 : Record 5741;
      WarehouseActivityHeader@1008 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
      ItemLedgerEntry@1013 : Record 32;
    BEGIN
      // [FEATURE] [Transfer] [Inventory Pick] [Dimension]
      // [SCENARIO 381591] When item analysis view updates on posting and error occurs from posting inventory pick for transfer order no lines must exist in item ledger entry for this transfer order.
      Initialize;

      // [GIVEN] Item Analysis View with Update on Posting enabled.
      PrepareAnalysisViewRec(ItemAnalysisView,TRUE,FALSE);

      // [GIVEN] Released transfer order T with line TL for item I with inventory in Bin B.
      CreateReleasedTransferLineQtyOneFromLocation(TransferLine);

      // [GIVEN] Inventory Pick P with line PL with Bin B.
      CreateInvPickFromTransferLine(WarehouseActivityHeader,WarehouseActivityLine,TransferLine);

      // [GIVEN] Post reclassification for item I from bin B to some other bin.
      WITH TransferLine DO
        ReclassItemWithNewBin("Transfer-from Code","Item No.",Quantity,WarehouseActivityLine."Bin Code");

      // [WHEN] Error occurs when posting inventory pick P.
      ASSERTERROR LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,TRUE);

      // [THEN] Transaction rollback completely and no lines exist in item ledger entry for transfer order T.
      ItemLedgerEntry.INIT;
      ItemLedgerEntry.SETRANGE("Order No.",TransferLine."Document No.");
      Assert.RecordIsEmpty(ItemLedgerEntry);
    END;

    LOCAL PROCEDURE Initialize@3();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE PrepareAnalysisViewRec@6(VAR ItemAnalysisView@1000 : Record 7152;UpdateOnPosting@1003 : Boolean;IncludeBudgets@1004 : Boolean);
    VAR
      Dim@1002 : Record 348;
      i@1001 : Integer;
    BEGIN
      WITH ItemAnalysisView DO BEGIN
        INIT;
        "Analysis Area" := "Analysis Area"::Inventory;
        VALIDATE(Code,LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"Item Analysis View"));
        INSERT(TRUE);

        VALIDATE("Update on Posting",UpdateOnPosting);
        VALIDATE("Include Budgets",IncludeBudgets);
        IF Dim.FINDSET THEN
          REPEAT
            i += 1;
            CASE i OF
              1:
                VALIDATE("Dimension 1 Code",Dim.Code);
              2:
                VALIDATE("Dimension 2 Code",Dim.Code);
              3:
                VALIDATE("Dimension 3 Code",Dim.Code);
            END;
          UNTIL (i = 3) OR (Dim.NEXT = 0);

        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE PostSalesOrder@10();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,'',1);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateLocationsChain@5(VAR FromLocation@1007 : Record 14;VAR ToLocation@1005 : Record 14;VAR TransitLocation@1004 : Record 14);
    VAR
      TransferRoute@1002 : Record 5742;
    BEGIN
      // LibraryWarehouse.CreateLocationWithInventoryPostingSetup(FromLocation);
      CreateLocationRequirePick(FromLocation);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(ToLocation);
      LibraryWarehouse.CreateInTransitLocation(TransitLocation);
      LibraryInventory.CreateTransferRoute(TransferRoute,FromLocation.Code,ToLocation.Code);
      TransferRoute.VALIDATE("In-Transit Code",TransitLocation.Code);
      TransferRoute.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostPurchaseDocument@183(PurchaseHeader@1000 : Record 38);
    BEGIN
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@83(VAR PurchaseHeader@1003 : Record 38;VAR PurchaseLine@1000 : Record 39;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1005 : Decimal;BinCode@1004 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemInventory@17(LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1005 : Decimal;BinCode@1004 : Code[20]);
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,LocationCode,ItemNo,Quantity,BinCode);
      PostPurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE ReclassItemWithNewBin@26(LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1005 : Decimal;BinCode@1004 : Code[20]);
    VAR
      ItemJournalLine@1003 : Record 83;
      NewBinCode@1000 : Code[20];
    BEGIN
      NewBinCode := CreateBinCode(LocationCode);
      CreateItemReclassJournalLine(ItemJournalLine,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("New Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.VALIDATE("New Bin Code",NewBinCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateTransferOrderQtyOne@38(VAR TransferHeader@1003 : Record 5740;VAR TransferLine@1004 : Record 5741;ItemNo@1002 : Code[20];FromLocationCode@1007 : Code[10];ToLocationCode@1000 : Code[10];TransitLocationCode@1005 : Code[10];ReceiptDate@1008 : Date);
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,TransitLocationCode);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,1);
      TransferLine.VALIDATE("Receipt Date",ReceiptDate);
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReleasedTransferLineQtyOneFromLocation@31(VAR TransferLine@1004 : Record 5741);
    VAR
      Item@1005 : Record 27;
      FromLocation@1002 : Record 14;
      ToLocation@1001 : Record 14;
      TransitLocation@1000 : Record 14;
      TransferHeader@1003 : Record 5740;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateLocationsChain(FromLocation,ToLocation,TransitLocation);
      CreateItemInventory(FromLocation.Code,Item."No.",1,FromLocation."Receipt Bin Code");
      CreateTransferOrderQtyOne(
        TransferHeader,TransferLine,Item."No.",FromLocation.Code,ToLocation.Code,TransitLocation.Code,WORKDATE);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateLocationRequirePick@238(VAR Location@1000 : Record 14);
    VAR
      WarehouseEmployee@1002 : Record 7301;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.VALIDATE("Require Pick",TRUE);
      Location.VALIDATE("Receipt Bin Code",CreateBinCode(Location.Code));
      Location.VALIDATE("Shipment Bin Code",CreateBinCode(Location.Code));
      Location.MODIFY(TRUE);

      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,FALSE);
    END;

    LOCAL PROCEDURE CreateBinCode@111(LocationCode@1000 : Code[10]) : Code[20];
    VAR
      Bin@1001 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateBin(Bin,LocationCode,LibraryUtility.GenerateGUID,'','');
      EXIT(Bin.Code);
    END;

    LOCAL PROCEDURE CreateItemReclassJournalLine@35(VAR ItemJournalLine@1002 : Record 83;ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    VAR
      ItemJournalBatch@1001 : Record 233;
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      SelectItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Transfer);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Transfer,ItemNo,
        Quantity);
    END;

    LOCAL PROCEDURE SelectItemJournalBatch@37(VAR ItemJournalBatch@1000 : Record 233;ItemJournalTemplateType@1002 : Option);
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplateType);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplateType,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE CreateInvPick@107(VAR WarehouseActivityHeader@1000 : Record 5766;VAR WarehouseActivityLine@1002 : Record 5767;SourceDocument@1005 : Option;SourceNo@1004 : Code[20];LocationCode@1001 : Code[10]);
    BEGIN
      LibraryVariableStorage.Enqueue(InvPickCreatedMessageTxt);
      LibraryWarehouse.CreateInvtPutPickMovement(SourceDocument,SourceNo,FALSE,TRUE,FALSE);
      FindWarehouseActivityNo(WarehouseActivityLine,SourceNo,LocationCode);
      WarehouseActivityHeader.GET(WarehouseActivityHeader.Type::"Invt. Pick",WarehouseActivityLine."No.");
      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE CreateInvPickFromTransferLine@45(VAR WarehouseActivityHeader@1000 : Record 5766;VAR WarehouseActivityLine@1002 : Record 5767;TransferLine@1001 : Record 5741);
    BEGIN
      WITH TransferLine DO
        CreateInvPick(
          WarehouseActivityHeader,WarehouseActivityLine,
          WarehouseActivityHeader."Source Document"::"Outbound Transfer","Document No.","Transfer-from Code");
    END;

    LOCAL PROCEDURE FindWarehouseActivityNo@57(VAR WarehouseActivityLine@1000 : Record 5767;SourceNo@1002 : Code[20];LocationCode@1005 : Code[10]);
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Source No.",SourceNo);
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Action Type","Action Type"::Take);
        FINDFIRST;
      END;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@106(Message@1000 : Text[1024]);
    VAR
      ExpectedMessage@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue Variable.
      Assert.IsTrue(STRPOS(Message,ExpectedMessage) > 0,Message);
    END;

    BEGIN
    {
      // [FEATURE] [Item Analysis View] [SCM]
    }
    END.
  }
}

