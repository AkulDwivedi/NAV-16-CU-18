OBJECT Codeunit 144051 Sales Doc. With TCS
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyInformation@1500004 : Record 79;
      Assert@1500008 : Codeunit 130000;
      LibrarySetupStorage@1500000 : Codeunit 131009;
      LibraryTCS@1500002 : Codeunit 143008;
      LibraryTDS@1500005 : Codeunit 143000;
      LibraryERM@1500003 : Codeunit 131300;
      LibraryRandom@1500006 : Codeunit 130440;
      LibrarySales@1500007 : Codeunit 130509;
      LibraryUtility@1500013 : Codeunit 131000;
      LibraryServiceTax@1500014 : Codeunit 143001;
      LibraryReportDataset@1500011 : Codeunit 131007;
      AmountErr@1500009 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=%1 is incorrect in %2.';
      CustomerNo@1500015 : Code[20];
      isInitialized@1500001 : Boolean;

    [Test]
    PROCEDURE VerifySalesOrderTCSRoundedOffWithNoLineCreated@1500004();
    VAR
      NodNocHeader@1500005 : Record 13786;
      TcsNatureOfCollection@1500004 : Record 16507;
      TCSSetup@1500003 : Record 16508;
      SalesHeader@1500002 : Record 36;
      SalesLine@1500007 : Record 37;
      ExpectedTCSEntry@1500008 : Record 16514;
      DocumentNo@1500001 : Code[20];
      Amount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 163820] Check if system is calculating TCS rounded off on each component with no line created
      // [FEATURE] [Sales Order]

      // [GIVEN] Created NODNOC ,TCS Nature of Collection,Assesse Code & TCS Setup For Sales Order & Sales Return order
      Initialize;
      InitializeSalesSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,'');
      Amount := LibraryRandom.RandDec(20,0);

      // [WHEN] Create Sales Order with TCS Nature of collection and Calculated TCS Entries.
      CreateSalesDocWithTCS(SalesHeader,SalesLine,NodNocHeader,TcsNatureOfCollection.Code,SalesHeader."Document Type"::Order,Amount);
      CalcExpectedTCSAmounts(ExpectedTCSEntry,TCSSetup,SalesLine.Amount);
      SalesLine.CalculateTCS(SalesHeader);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Created GL Entries and TCS Entries and Verifying TCS entry with Expected TCS Entry
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,ExpectedTCSEntry."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE VerifySalesOrderTCSRoundedOffWithOneLineCreated@1500013();
    VAR
      NodNocHeader@1500005 : Record 13786;
      TcsNatureOfCollection@1500004 : Record 16507;
      TCSSetup@1500003 : Record 16508;
      SalesHeader@1500002 : Record 36;
      SalesLine@1500007 : Record 37;
      ExpectedTCSEntry@1500008 : Record 16514;
      DocumentNo@1500001 : Code[20];
      Amount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 163821] Check if system is calculating TCS rounded off on each component with One line created
      // [FEATURE] [Sales Order]

      // [GIVEN] Created NODNOC ,TCS Nature of Collection,Assesse Code & TCS Setup For Sales Order & Sales Return order
      Initialize;
      InitializeSalesSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,'');
      Amount := LibraryRandom.RandDec(200,0);

      // [WHEN] Create Sales Order with TCS Nature of collection and calculated TCS Entries with one line created.
      CreateSalesDocWithTCS(SalesHeader,SalesLine,NodNocHeader,TcsNatureOfCollection.Code,SalesHeader."Document Type"::Order,Amount);
      CalcExpectedTCSAmounts(ExpectedTCSEntry,TCSSetup,SalesLine.Amount);
      SalesLine.CalculateTCS(SalesHeader);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Created GL Entries and TCS Entries and Verified.
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,ExpectedTCSEntry."Document Type"::Invoice);
      VerifyGLEntryforTCS(ExpectedTCSEntry."Account No.",ExpectedTCSEntry."TCS Amount",ExpectedTCSEntry."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE VerifySalesOrderTCSRoundedOffWithEachComponent@1500001();
    VAR
      NodNocHeader@1500005 : Record 13786;
      TcsNatureOfCollection@1500004 : Record 16507;
      TCSSetup@1500003 : Record 16508;
      SalesHeader@1500002 : Record 36;
      SalesLine@1500007 : Record 37;
      ExpectedTCSEntry@1500008 : Record 16514;
      DocumentNo@1500001 : Code[20];
      Amount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 163822] Check if system is calculating TCS rounded off on each component with One line created
      // [FEATURE] [Sales Order]

      // [GIVEN] Created NODNOC ,TCS Nature of Collection,Assesse Code & TCS Setup For Sales Order & Sales Return order
      Initialize;
      InitializeSalesSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,'');
      Amount := LibraryRandom.RandDec(200,2);

      // [WHEN] Create Sales Order with TCS Nature of collection and calculated TCS Entries with one line created.
      CreateSalesDocWithTCS(SalesHeader,SalesLine,NodNocHeader,TcsNatureOfCollection.Code,SalesHeader."Document Type"::Order,Amount);
      CalcExpectedTCSAmounts(ExpectedTCSEntry,TCSSetup,SalesLine.Amount);
      SalesLine.CalculateTCS(SalesHeader);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Created GL Entries and TCS Entries and Verified.
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,ExpectedTCSEntry."Document Type"::Invoice);
      VerifyGLEntryforTCS(ExpectedTCSEntry."Account No.",ExpectedTCSEntry."TCS Amount",ExpectedTCSEntry."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE VerifySalesOrderWithConcessional@1500002();
    VAR
      NodNocHeader@1500005 : Record 13786;
      TcsNatureOfCollection@1500004 : Record 16507;
      TCSSetup@1500003 : Record 16508;
      SalesHeader@1500002 : Record 36;
      SalesLine@1500007 : Record 37;
      ExpectedTCSEntry@1500008 : Record 16514;
      ConcessionalCodes@1500006 : Record 13718;
      DocumentNo@1500001 : Code[20];
      Amount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 163825] Check if the program is calculating TCS amount with defined Concessional codes
      // [FEATURE] [Sales Order]

      // [GIVEN] Created NODNOC ,TCS Nature of Collection,Assesse Code & TCS Setup For Sales Order & Sales Return order
      Initialize;
      LibraryTDS.CreateConcessionalCode(ConcessionalCodes);
      InitializeSalesSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,ConcessionalCodes.Code);
      Amount := LibraryRandom.RandDec(5000,2);

      // [WHEN] Create Sales Order with ConcessionalCode and Calculated TCS Entries.
      CreateSalesDocWithTCS(SalesHeader,SalesLine,NodNocHeader,TcsNatureOfCollection.Code,SalesHeader."Document Type"::Order,Amount);
      CalcExpectedTCSAmounts(ExpectedTCSEntry,TCSSetup,SalesLine.Amount);
      SalesLine.CalculateTCS(SalesHeader);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Created GL Entries and TCS Entries and Verified.
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,ExpectedTCSEntry."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE VerifySalesOrderWithStructure@1500010();
    VAR
      NodNocHeader@1500005 : Record 13786;
      TcsNatureOfCollection@1500004 : Record 16507;
      TCSSetup@1500003 : Record 16508;
      SalesHeader@1500002 : Record 36;
      SalesLine@1500007 : Record 37;
      ExpectedTCSEntry@1500008 : Record 16514;
      VATPostingSetup@1500012 : Record 325;
      ServiceTaxGroups@1500011 : Record 16471;
      SalesInvoiceLine@1500014 : Record 113;
      PostingType@1500013 : Option;
      AccountNo@1500009 : Code[20];
      DocumentNo@1500001 : Code[20];
      Amount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 163830] If the program is calculating TCS where Other Taxes are applicable in Sales Order. System will calculate TCS on the base amount including other taxes amount.
      // [FEATURE] [Sales Order]

      // [GIVEN] Created NODNOC ,TCS Nature of Collection,Assesse Code & TCS Setup For Sales Order & Sales Return order
      Initialize;
      InitializeSalesSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,'');
      AccountNo := LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,PostingType);
      CreateServiceTaxGroupandServiceTaxSetup(ServiceTaxGroups,WORKDATE);
      UpdateServiceTaxGroupInGLAccount(AccountNo,ServiceTaxGroups.Code);
      Amount := LibraryRandom.RandDec(2000,0);

      // [WHEN] Create Sales Order with Structure and Calculated TCS Entry and Service Tax Entry.
      CreateSalesInvoiceDocumentforTCS(SalesHeader,SalesLine,NodNocHeader."No.",AccountNo,TcsNatureOfCollection.Code,Amount);
      SalesLine.CalculateStructures(SalesHeader);
      SalesLine.CalculateTCS(SalesHeader);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.FINDFIRST;
      CalcExpectedTCSAmounts(ExpectedTCSEntry,TCSSetup,SalesInvoiceLine."TDS/TCS Base Amount");

      // [THEN] Created GL Entries , TCS Entries and Service Tax Entry.
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,ExpectedTCSEntry."Document Type"::Invoice);
      VerifyServiceTaxEntry(ExpectedTCSEntry."Document Type"::Invoice,DocumentNo,-SalesInvoiceLine."Service Tax Amount");
    END;

    [Test]
    PROCEDURE VerifySalesCreditMemoWithTCS@1500000();
    VAR
      NodNocHeader@1500005 : Record 13786;
      TcsNatureOfCollection@1500004 : Record 16507;
      TCSSetup@1500003 : Record 16508;
      SalesHeader@1500002 : Record 36;
      SalesLine@1500007 : Record 37;
      ExpectedTCSEntry@1500008 : Record 16514;
      DocumentNo@1500001 : Code[20];
      Amount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 163799] Check if system is calculating TCS rounded off on each component with One line created
      // [FEATURE] [Sales CreditMemo]

      // [GIVEN] Created NODNOC ,TCS Nature of Collection,Assesse Code & TCS Setup For Sales Order & Sales Return order
      Initialize;
      InitializeSalesSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,'');
      Amount := LibraryRandom.RandDec(200,0);

      // [WHEN] Create Sales Order with Multiple line and calculate TCS Entries.
      CreateSalesDocWithTCS(
        SalesHeader,SalesLine,NodNocHeader,TcsNatureOfCollection.Code,SalesHeader."Document Type"::"Credit Memo",Amount);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,'',LibraryRandom.RandInt(2));
      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.MODIFY(TRUE);
      CalcExpectedTCSAmounts(ExpectedTCSEntry,TCSSetup,SalesLine.Amount);
      SalesLine.CalculateTCS(SalesHeader);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Created GL Entries and TCS Entries.
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,ExpectedTCSEntry."Document Type"::"Credit Memo");
    END;

    [Test]
    [HandlerFunctions(SummaryRepPageHandler,ReceivableRepPageHandler,UpdateTDSReceivablePageHandler)]
    PROCEDURE CreateSalesOrderWithoutTDSReceivableforTDSSummary@1500065();
    VAR
      SalesHeader@1500005 : Record 36;
      SalesLine@1500006 : Record 37;
      VATPostingSetup@1500010 : Record 325;
      ServiceTaxGroups@1500012 : Record 16471;
      AccountNo@1500000 : Code[20];
      PostingType@1500002 : Option;
      Amount@1500001 : Decimal;
    BEGIN
      // [SCENARIO 164328] Check if the system is generating entry in TDS Certificate Receivable report when check mark is not placed in TDS Certificate receivable field in Sales Order
      // [FEATURE] Sales Order

      // [GIVEN] Created Customer,GL Account for Sales Order
      Initialize;
      LibraryTCS.CreateIncomeTaxAccountingPeriod;
      AccountNo := LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,PostingType);
      CreateServiceTaxGroupandServiceTaxSetup(ServiceTaxGroups,WORKDATE);
      UpdateServiceTaxGroupInGLAccount(AccountNo,ServiceTaxGroups.Code);
      Amount := LibraryRandom.RandDec(2000,0);

      // [WHEN] Create Sales Order with Structure and Post.
      CreateSalesInvoiceDocumentforTCS(SalesHeader,SalesLine,LibrarySales.CreateCustomerNo,AccountNo,'',Amount);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      VerifyTDSSummaryReport(SalesHeader."Sell-to Customer No.");
      VerifyTDSReceivableReport(SalesHeader."Sell-to Customer No.");

      // [WHEN] Update TDS Certificate Receivale
      UpdateTDSReceivablesFromCustomer(SalesHeader."Sell-to Customer No.",SalesLine.Amount,FALSE,TRUE);
      COMMIT;// Multiple transaction are involved so to avoid using COMMIT

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      VerifyTDSSummaryReport(SalesHeader."Sell-to Customer No.");
      VerifyTDSReceivableReport(SalesHeader."Sell-to Customer No.");

      // [WHEN] Update TDS Certificate Received
      UpdateTDSReceivablesFromCustomer(SalesHeader."Sell-to Customer No.",SalesLine.Amount,TRUE,TRUE);
      COMMIT;// Multiple transaction are involved so to avoid using COMMIT

      // [THEN] Verify TDS Certificate Receivable and Certificate Received.
      VerifyTDSSummaryReport(SalesHeader."Sell-to Customer No.");
      VerifyTDSReceivableReport(SalesHeader."Sell-to Customer No.");
    END;

    LOCAL PROCEDURE Initialize@1500039();
    BEGIN
      LibrarySetupStorage.Restore;
      IF  isInitialized THEN
        EXIT;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      isInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE InitializeSalesSetup@1500074(VAR NodNocHeader@1500001 : Record 13786;VAR TcsNatureOfCollection@1500003 : Record 16507;VAR TCSSetup@1500002 : Record 16508;ConcessionCode@1500005 : Code[10]);
    VAR
      AssesseeCode@1500000 : Record 13727;
    BEGIN
      LibraryTCS.CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTCS.CreateTCSNatureCollection(TcsNatureOfCollection);
      TcsNatureOfCollection.VALIDATE("TCS Type",TcsNatureOfCollection."TCS Type"::E);
      TcsNatureOfCollection.MODIFY(TRUE);
      CreateTCSSetUp(TCSSetup,TcsNatureOfCollection.Code,AssesseeCode.Code,TcsNatureOfCollection."TCS Type",ConcessionCode);
      LibraryTCS.CreateNODNOCSetup(NodNocHeader,NodNocHeader.Type::Customer,LibraryTCS.CreateCustomer,AssesseeCode.Code,
        TcsNatureOfCollection.Code,TRUE,TRUE,TRUE);
      IF ConcessionCode <> '' THEN
        UpdateNODNOCLines(NodNocHeader,ConcessionCode);
    END;

    PROCEDURE CreateTCSSetUp@1500007(VAR TCSSetup@150003 : Record 16508;TCSNatureCollectionCode@150002 : Code[10];AssesseeCode@150001 : Code[10];TCSType@1500000 : Option;ConcessionalCode@1500001 : Code[10]);
    BEGIN
      TCSSetup.INIT;
      TCSSetup.VALIDATE("TCS Nature of Collection",TCSNatureCollectionCode);
      TCSSetup.VALIDATE("Assessee Code",AssesseeCode);
      TCSSetup.VALIDATE("Effective Date",WORKDATE);
      TCSSetup.VALIDATE("Concessional Code",ConcessionalCode);
      TCSSetup.VALIDATE("TCS %",LibraryRandom.RandInt(1));
      TCSSetup.VALIDATE("TCS Threshold Amount",LibraryRandom.RandDec(100000,2));
      TCSSetup.VALIDATE("Surcharge %",LibraryRandom.RandInt(5));
      TCSSetup.VALIDATE("Surcharge Threshold Amount",LibraryRandom.RandDec(200000,2));
      TCSSetup.VALIDATE("eCESS %",LibraryRandom.RandInt(5));
      TCSSetup.VALIDATE("TCS Type",TCSType);
      TCSSetup.VALIDATE("TCS Account No.",LibraryERM.CreateGLAccountNo);
      TCSSetup.VALIDATE("No. Series",LibraryERM.CreateNoSeriesCode);
      TCSSetup.VALIDATE("SHE Cess %",LibraryRandom.RandInt(5));
      TCSSetup.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@1500053();
    VAR
      DeductorCategory@1500001 : Record 16498;
    BEGIN
      CompanyInformation.GET;
      LibraryERM.CreateDeductorCategory(DeductorCategory);
      CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      CompanyInformation.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocWithTCS@1500062(VAR SalesHeader@1500008 : Record 36;VAR SalesLine@1500001 : Record 37;NOCHeader@1500000 : Record 13786;NatureOfCollectionCode@1500003 : Code[10];DocumentType@1500005 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';Amount@1500004 : Decimal);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,NOCHeader."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,'',LibraryRandom.RandInt(2));
      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.VALIDATE("TCS Nature of Collection",NatureOfCollectionCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesInvoiceDocumentforTCS@1500048(VAR SalesHeader@1500006 : Record 36;VAR SalesLine@1500007 : Record 37;CustomerNo@1500008 : Code[20];No@1500009 : Code[20];NatureOfCollectionCode@1500000 : Code[10];Amount@1500002 : Decimal);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.VALIDATE(Structure,CreateStructure);
      SalesHeader.VALIDATE("TDS Certificate Receivable",FALSE);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",No,LibraryRandom.RandDec(1,0));
      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.VALIDATE("TCS Nature of Collection",NatureOfCollectionCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateNODNOCLines@1500014(NodNocHeader@1500000 : Record 13786;ConcessionCode@1500001 : Code[10]);
    VAR
      NodNocLines@1500002 : Record 13785;
    BEGIN
      NodNocLines.SETRANGE(Type,NodNocHeader.Type);
      NodNocLines.SETRANGE("No.",NodNocHeader."No.");
      NodNocLines.FINDFIRST;
      NodNocLines.VALIDATE("Concessional Code",ConcessionCode);
      NodNocLines.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcExpectedTCSAmounts@1500063(VAR ExpectedTCSEntry@1500009 : Record 16514;TCSSetup@1500001 : Record 16508;TaxBaseAmount@1500007 : Decimal);
    BEGIN
      WITH ExpectedTCSEntry DO BEGIN
        "TCS Base Amount" := TaxBaseAmount;
        "TCS %" := TCSSetup."TCS %";
        "TCS Amount" := LibraryTDS.RoundTCSAmount(TCSSetup."TCS %" / 100 * "TCS Base Amount");
        "Surcharge %" := TCSSetup."Surcharge %";
        "Surcharge Amount" := LibraryTDS.RoundTCSAmount(TCSSetup."Surcharge %" / 100 * "TCS Amount");
        "eCESS %" := TCSSetup."eCESS %";
        "eCESS Amount" := LibraryTDS.RoundTCSAmount(TCSSetup."eCESS %" / 100 * ("TCS Amount" + "Surcharge Amount"));
        "SHE Cess %" := TCSSetup."SHE Cess %";
        "SHE Cess Amount" := LibraryTDS.RoundTCSAmount(TCSSetup."SHE Cess %" / 100 * ("TCS Amount" + "Surcharge Amount"));
        "Total TCS Including SHE CESS" := "TCS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
        "Account No." := TCSSetup."TCS Account No.";
      END;
    END;

    LOCAL PROCEDURE VerifyTCSEntry@1500066(ExpectedTCSEntry@1500003 : Record 16514;DocumentNo@1500002 : Code[20];DocumentType@1500001 : ',Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder');
    VAR
      TCSEntry@1500005 : Record 16514;
    BEGIN
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.SETRANGE("Document Type",DocumentType);
      TCSEntry.FINDFIRST;

      Assert.AreEqual(
        ExpectedTCSEntry."TCS Base Amount",TCSEntry."TCS Base Amount",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("TCS Base Amount"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."TCS %",TCSEntry."TCS %",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("TCS %"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."TCS Amount",TCSEntry."TCS Amount",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("TCS Amount"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."Surcharge %",TCSEntry."Surcharge %",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("Surcharge %"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."Surcharge Amount",TCSEntry."Surcharge Amount",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("Surcharge Amount"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."eCESS %",TCSEntry."eCESS %",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("eCESS %"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."eCESS Amount",TCSEntry."eCESS Amount",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("eCESS Amount"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."SHE Cess %",TCSEntry."SHE Cess %",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("SHE Cess %"),TCSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTCSEntry."SHE Cess Amount",TCSEntry."SHE Cess Amount",
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("SHE Cess Amount"),TCSEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyGLEntryforTCS@1500016(GLAccNo@1500004 : Code[20];Amount@1500003 : Decimal;DocumentType@1500002 : Option);
    VAR
      GLEntry@1500110 : Record 17;
      Assert@1500000 : Codeunit 130000;
      CreditAmount@1500001 : Decimal;
    BEGIN
      FindGLEntry(GLEntry,DocumentType,GLAccNo);
      REPEAT
        CreditAmount += GLEntry."Credit Amount"
      UNTIL GLEntry.NEXT = 0;
      Assert.AreEqual(CreditAmount,Amount,STRSUBSTNO(AmountErr,CreditAmount,Amount));
    END;

    LOCAL PROCEDURE VerifyServiceTaxEntry@1500005(DocumentType@1500003 : Option;DocumentNo@1500000 : Code[20];Amount@1500001 : Decimal);
    VAR
      ServiceTaxEntry@1500002 : Record 16473;
      ServiceTaxAmount@1500004 : Decimal;
    BEGIN
      ServiceTaxEntry.SETRANGE("Document No.",DocumentNo);
      ServiceTaxEntry.SETRANGE("Document Type",DocumentType);
      ServiceTaxEntry.FINDSET;
      REPEAT
        ServiceTaxAmount += ServiceTaxEntry."Service Tax Amount"
      UNTIL ServiceTaxEntry.NEXT = 0;
      Assert.AreEqual(ServiceTaxAmount,Amount,STRSUBSTNO(AmountErr,ServiceTaxAmount,Amount));
    END;

    LOCAL PROCEDURE FindGLEntry@1500165(VAR GLEntry@1500002 : Record 17;DocumentType@1500001 : Option;GLAccNo@1500000 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("G/L Account No.",GLAccNo);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateServiceTaxGroupandServiceTaxSetup@1500059(VAR ServiceTaxGroups@1500004 : Record 16471;FromDate@1500002 : Date);
    BEGIN
      ServiceTaxGroups.INIT;
      ServiceTaxGroups.VALIDATE(Code,LibraryUtility.GenerateRandomCode(1,16471));
      ServiceTaxGroups.VALIDATE(Description,ServiceTaxGroups.Code);
      ServiceTaxGroups.INSERT(TRUE);
      LibraryServiceTax.CreateServiceTaxSetup(ServiceTaxGroups.Code,FromDate);
    END;

    LOCAL PROCEDURE UpdateServiceTaxGroupInGLAccount@1500064(GLAccNo@1500001 : Code[20];ServiceTaxGroup@1500000 : Code[20]);
    VAR
      GLAccount@1500002 : Record 15;
    BEGIN
      GLAccount.GET(GLAccNo);
      GLAccount.VALIDATE("Service Tax Group Code",ServiceTaxGroup);
      GLAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyTDSSummaryReport@1500072(CustNo@1500000 : Code[20]);
    VAR
      CustLedgerEntry@1500001 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.",CustNo);
      CustLedgerEntry.FINDFIRST;
      CustomerNo := CustNo;
      REPORT.RUNMODAL(REPORT::"TDS Certificate Summary",TRUE,TRUE,CustLedgerEntry);

      LibraryReportDataset.LoadDataSetFile;
      IF CustLedgerEntry."TDS Certificate Received" THEN
        LibraryReportDataset.AssertElementWithValueExists('Cust__Ledger_Entry__Customer_No__',CustNo);
    END;

    LOCAL PROCEDURE VerifyTDSReceivableReport@1500008(CustNo@1500000 : Code[20]);
    VAR
      CustLedgerEntry@1500001 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.",CustNo);
      CustLedgerEntry.FINDFIRST;
      CustomerNo := CustNo;
      REPORT.RUNMODAL(REPORT::"TDS Certificate Receivable",TRUE,TRUE,CustLedgerEntry);

      LibraryReportDataset.LoadDataSetFile;
      IF CustLedgerEntry."TDS Certificate Receivable" THEN
        LibraryReportDataset.AssertElementWithValueExists('Cust__Ledger_Entry__Customer_No__',CustNo);
    END;

    LOCAL PROCEDURE CreateStructure@1500052() : Code[10];
    VAR
      StructureHeader@1500000 : Record 13792;
      StructureDetails@1500003 : Record 13793;
    BEGIN
      LibraryERM.CreateStructureHeader(StructureHeader);
      LibraryERM.CreateStructureDetails(StructureDetails,StructureHeader.Code,1,StructureDetails.Type::"Service Tax",'',''); // Value 1 for Calculation Order.
      StructureDetails.VALIDATE("Include Base",TRUE);
      StructureDetails.MODIFY(TRUE);
      EXIT(StructureHeader.Code);
    END;

    LOCAL PROCEDURE UpdateTDSReceivablesFromCustomer@1500009(CustNo@1500005 : Code[20];Amount@1500003 : Decimal;TDSCertificateReceived@1500001 : Boolean;TDSCertificateReceivable@1500000 : Boolean);
    VAR
      CustLedgerEntry@1500004 : Record 21;
      UpdateTDSCertDetails@1500002 : Page 16499;
    BEGIN
      UpdateTDSCertDetails.SetCertificateDetail(LibraryUtility.GenerateGUID,WORKDATE,CustNo,Amount,DATE2DMY(WORKDATE,3),1);
      CustomerNo := CustNo;
      CustLedgerEntry.SETRANGE("Customer No.",CustNo);
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.VALIDATE("TDS Certificate Received",TDSCertificateReceived);
      CustLedgerEntry.VALIDATE("TDS Certificate Receivable",TDSCertificateReceivable);
      CustLedgerEntry.MODIFY(TRUE);
      UpdateTDSCertDetails.RUNMODAL;
    END;

    [ModalPageHandler]
    PROCEDURE UpdateTDSReceivablePageHandler@1500045(VAR UpdateTDSCertDetails@1500000 : TestPage 16499);
    BEGIN
      UpdateTDSCertDetails.FILTER.SETFILTER("Customer No.",CustomerNo);
      UpdateTDSCertDetails.FILTER.SETFILTER("TDS Certificate Receivable",FORMAT(TRUE));
      UpdateTDSCertDetails.FILTER.SETFILTER("Certificate Received",FORMAT(FALSE));
      UpdateTDSCertDetails.Action1500033.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE SummaryRepPageHandler@1500070(VAR TDSCertificateSummary@1500000 : TestRequestPage 16591);
    BEGIN
      TDSCertificateSummary."Cust. Ledger Entry".SETFILTER("Customer No.",CustomerNo);
      TDSCertificateSummary.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReceivableRepPageHandler@1500071(VAR TDSCertificateReceivable@1500000 : TestRequestPage 16590);
    BEGIN
      TDSCertificateReceivable."Cust. Ledger Entry".SETFILTER("Customer No.",CustomerNo);
      TDSCertificateReceivable.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    END.
  }
}

