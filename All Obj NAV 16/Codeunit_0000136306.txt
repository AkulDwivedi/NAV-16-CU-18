OBJECT Codeunit 136306 Job Invoicing
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            Initialized := FALSE
          END;

  }
  CODE
  {
    VAR
      LibraryJob@1001 : Codeunit 131920;
      Assert@1002 : Codeunit 130000;
      NoLinesError@1005 : TextConst 'ENU=Qty. to Transfer to Invoice cannot be set on a Job Planning Line of type Schedule.';
      QtyError@1003 : TextConst 'ENU=Qty. to Transfer to Invoice may not be lower than';
      UnexpectedErrorMessage@1006 : TextConst 'ENU=Unexpected error.';
      LibraryRandom@1004 : Codeunit 130440;
      LibrarySales@1007 : Codeunit 130509;
      LibraryPurchase@1023 : Codeunit 130512;
      LibraryDimension@1008 : Codeunit 131001;
      LibraryERM@1010 : Codeunit 131300;
      LibraryInventory@1011 : Codeunit 132201;
      LibraryUTUtility@1012 : Codeunit 131008;
      LibraryUtility@1021 : Codeunit 131000;
      LibraryWarehouse@1020 : Codeunit 132204;
      LibraryVariableStorage@1024 : Codeunit 131004;
      LibraryItemTracking@1027 : Codeunit 130502;
      LibraryCosting@1029 : Codeunit 132200;
      Initialized@1000 : Boolean;
      JobLedgerEntryFieldErr@1009 : TextConst 'ENU=Field %1 in Job Ledger Entry has invalid value';
      WrongDimSetIDInSalesLineErr@1013 : TextConst 'ENU=Wrong dimension set ID in sales line of document %1.';
      WrongItemInfoErr@1014 : TextConst 'ENU=Wrong item info: %1 in posted Sales Invoice Line.';
      WrongDimValueCodeErr@1015 : TextConst 'ENU=Wrong dimension value code in Sales Line.';
      WrongJobJnlDimensionsErr@1016 : TextConst 'ENU=Wrong %1 in General Journal Line.';
      WrongJobLedgerEntryQtyErr@1017 : TextConst 'ENU=Wrong Quantity in General Ledger Entry.';
      WrongSalesInvoceDimensionsErr@1018 : TextConst 'ENU=Dimensions must be equal.';
      UnitPriceMustNotBeZeroErr@1019 : TextConst 'ENU=Field Unit Price of Job Journal Line must not be zero.';
      WrongDescriptionInPostedSalesInvoiceErr@1022 : TextConst 'ENU=Wrong Description in Sales Invoice Line.';
      TrackingOption@1028 : 'Assign Lot No.,Assign Serial No.';
      DetailLevel@1033 : 'All,Per Job,Per Job Task,Per Job Planning Line';

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler)]
    PROCEDURE TransferItemLine@5();
    BEGIN
      // Transfer a contract item line to a sales invoice
      TransferJob(LibraryJob.ItemType,LibraryJob.PlanningLineTypeContract,1)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler)]
    PROCEDURE TransferResourceLine@18();
    BEGIN
      // Transfer a contract resource line to a sales invoice
      TransferJob(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeContract,1)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler)]
    PROCEDURE TransferGLLine@19();
    BEGIN
      // Transfer a contract GL line to a sales invoice
      TransferJob(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeContract,1)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler)]
    PROCEDURE TransferItemLineBoth@11();
    BEGIN
      // Transfer a both schedule and contract item line to a sales invoice
      TransferJob(LibraryJob.ItemType,LibraryJob.PlanningLineTypeBoth,1)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler)]
    PROCEDURE TransferResourceLineBoth@10();
    BEGIN
      // Transfer a both schedule and contract resource line to a sales invoice
      TransferJob(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeBoth,1)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler)]
    PROCEDURE TransferGLLineBoth@9();
    BEGIN
      // Transfer a both schedule and contract GL line to a sales invoice
      TransferJob(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeBoth,1)
    END;

    [Test]
    PROCEDURE TransferItemLineSchedule@13();
    BEGIN
      // Transfer a schedule item line to a sales invoice (ERROR)
      ASSERTERROR TransferJob(LibraryJob.ItemType,LibraryJob.PlanningLineTypeSchedule,1);
      Assert.AreEqual(STRSUBSTNO(NoLinesError),GETLASTERRORTEXT,UnexpectedErrorMessage)
    END;

    [Test]
    PROCEDURE TransferResourceLineSchedule@12();
    BEGIN
      // Transfer a schedule resource line to a sales invoice (ERROR)
      ASSERTERROR TransferJob(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeSchedule,1);
      Assert.AreEqual(STRSUBSTNO(NoLinesError),GETLASTERRORTEXT,UnexpectedErrorMessage)
    END;

    [Test]
    PROCEDURE TransferGLLineSchedule@7();
    BEGIN
      // Transfer a schedule GL line to a sales invoice (ERROR)
      ASSERTERROR TransferJob(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeSchedule,1);
      Assert.AreEqual(STRSUBSTNO(NoLinesError),GETLASTERRORTEXT,UnexpectedErrorMessage)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler)]
    PROCEDURE PTransferItemLine@14();
    BEGIN
      // Partially transfer a contract item line to a sales invoice
      TransferJob(LibraryJob.ItemType,LibraryJob.PlanningLineTypeContract,RANDOM(99) / 100)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler)]
    PROCEDURE PTransferResourceLine@15();
    BEGIN
      // Partially transfer a contract resource line to a sales invoice
      TransferJob(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeContract,RANDOM(99) / 100)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler)]
    PROCEDURE PTransferGLLine@16();
    BEGIN
      // Partially transfer a contract GL line to a sales invoice
      TransferJob(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeContract,RANDOM(99) / 100)
    END;

    [Test]
    PROCEDURE ETransferItemLine@56();
    BEGIN
      // Excess transfer a contract item line to a sales invoice (ERROR)
      ASSERTERROR TransferJob(LibraryJob.ItemType,LibraryJob.PlanningLineTypeContract,RANDOM(99) / 100 + 1);
      Assert.AreEqual(STRPOS(GETLASTERRORTEXT,QtyError),1,UnexpectedErrorMessage)
    END;

    [Test]
    PROCEDURE ETransferResourceLine@55();
    BEGIN
      // Excess transfer a contract resource line to a sales invoice (ERROR)
      ASSERTERROR TransferJob(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeContract,RANDOM(99) / 100 + 1);
      Assert.AreEqual(STRPOS(GETLASTERRORTEXT,QtyError),1,UnexpectedErrorMessage)
    END;

    [Test]
    PROCEDURE ETransferGLLine@54();
    BEGIN
      // Excess transfer a contract GL line to a sales invoice (ERROR)
      ASSERTERROR TransferJob(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeContract,RANDOM(99) / 100 + 1);
      Assert.AreEqual(STRPOS(GETLASTERRORTEXT,QtyError),1,UnexpectedErrorMessage)
    END;

    LOCAL PROCEDURE TransferJob@3(ConsumableType@1000 : Option;LineType@1001 : Option;Fraction@1006 : Decimal);
    VAR
      JobPlanningLine@1004 : Record 1003;
      SalesHeader@1005 : Record 36;
    BEGIN
      // Create job, job task
      // Create job planning line with Type = ConsumableType, Line Type = LineType
      // Transfer Fraction of job planning line to sales invoice
      // Verify Qty. Transferred to Invoice is updated
      // Verify created sales invoice

      // Setup
      Initialize;
      Plan(LineType,ConsumableType,JobPlanningLine);

      // Exercise
      TransferJobPlanningLine(JobPlanningLine,Fraction,FALSE,SalesHeader);

      // Verify
      Assert.AreEqual(Fraction * JobPlanningLine.Quantity,JobPlanningLine."Qty. Transferred to Invoice",
        JobPlanningLine.FIELDCAPTION("Qty. Transferred to Invoice"));
      VerifySalesInvoice(JobPlanningLine,SalesHeader)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler)]
    PROCEDURE DeleteSalesInvoice@17();
    VAR
      JobPlanningLine@1004 : Record 1003;
      SalesHeader@1005 : Record 36;
    BEGIN
      // Create job, job task
      // Create job planning line with Type = Item, Line Type = Contract
      // Transfer Fraction of job planning line to sales invoice
      // Delete sales invoice
      // Verify "Qty. Transferred to Invoice", "Qty. to Transfer to Invoice"

      // Setup
      Initialize;
      Plan(LibraryJob.PlanningLineTypeContract,LibraryJob.ItemType,JobPlanningLine);

      // Exercise
      TransferJobPlanningLine(JobPlanningLine,1,FALSE,SalesHeader);
      SalesHeader.DELETE(TRUE);

      // Verify
      WITH JobPlanningLine DO BEGIN
        GET("Job No.","Job Task No.","Line No.");
        CALCFIELDS("Qty. Transferred to Invoice");
        Assert.AreEqual(0,"Qty. Transferred to Invoice",FIELDCAPTION("Qty. Transferred to Invoice"));
        Assert.AreEqual(Quantity,"Qty. to Transfer to Invoice",FIELDCAPTION("Qty. to Transfer to Invoice"))
      END
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler)]
    PROCEDURE TransferMultipleInvoices@26();
    BEGIN
      // Transfer a contract item line to multiple sales invoices
      TransferJobStaged(LibraryJob.ItemType,LibraryJob.PlanningLineTypeContract,RANDOM(99) / 100)
    END;

    LOCAL PROCEDURE TransferJobStaged@23(ConsumableType@1000 : Option;LineType@1001 : Option;Fraction@1006 : Decimal);
    VAR
      JobPlanningLine@1004 : Record 1003;
      JobPlanningLineInvoice@1007 : Record 1022;
      SalesHeader@1008 : Record 36;
    BEGIN
      // Create job, job task
      // Create job planning line with Type = ConsumableType, Line Type = LineType
      // Transfer Fraction of job planning line to sales invoice
      // Transfer remainder to another sales invoice
      // Verify everything has been transferred (Qty. Transferred to Invoice = Quantity)
      // Verify 2 invoices have been created

      // Setup
      Initialize;
      Plan(LineType,ConsumableType,JobPlanningLine);

      // Exercise
      TransferJobPlanningLine(JobPlanningLine,Fraction,FALSE,SalesHeader);
      TransferJobPlanningLine(JobPlanningLine,1 - Fraction,FALSE,SalesHeader);

      // Verify
      WITH JobPlanningLine DO BEGIN
        Assert.AreEqual("Qty. Transferred to Invoice",Quantity,FIELDCAPTION("Qty. Transferred to Invoice"));
        JobPlanningLineInvoice.SETRANGE("Job No.","Job No.");
        JobPlanningLineInvoice.SETRANGE("Job Task No.","Job Task No.");
        JobPlanningLineInvoice.SETRANGE("Job Planning Line No.","Line No.");
        Assert.AreEqual(2,JobPlanningLineInvoice.COUNT,STRSUBSTNO('%1 count.',JobPlanningLineInvoice.TABLECAPTION))
      END
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE InvoiceItemLine@30();
    BEGIN
      // Invoice a contract item line
      ExecuteJob(LibraryJob.ItemType,LibraryJob.PlanningLineTypeBoth,1,1,0)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE InvoiceResourceLine@29();
    BEGIN
      // Invoice a contract resource line
      ExecuteJob(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeBoth,1,1,0)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE InvoiceGLLine@31();
    BEGIN
      // Invoice a contract GL line
      ExecuteJob(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeBoth,1,1,0)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE PInvoiceItemLine@35();
    BEGIN
      // Partially invoice a contract item line
      ExecuteJob(LibraryJob.ItemType,LibraryJob.PlanningLineTypeBoth,1,RANDOM(99) / 100,0)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE PInvoiceResourceLine@34();
    BEGIN
      // Partially invoice a contract resource line
      ExecuteJob(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeBoth,1,RANDOM(99) / 100,0)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE PInvoiceGLLine@33();
    BEGIN
      // Partially invoice a GL item line
      ExecuteJob(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeBoth,1,RANDOM(99) / 100,0)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler,ConfirmHandler,TransferToCreditMemoHandler)]
    PROCEDURE CreditItemLine@45();
    BEGIN
      // Credit a "both" item line
      ExecuteJob(LibraryJob.ItemType,LibraryJob.PlanningLineTypeBoth,1,1,1)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler,ConfirmHandler,TransferToCreditMemoHandler)]
    PROCEDURE CreditResourceLine@32();
    BEGIN
      // Credit a "both" resource line
      ExecuteJob(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeBoth,1,1,1)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler,ConfirmHandler,TransferToCreditMemoHandler)]
    PROCEDURE CreditGLLine@37();
    BEGIN
      // Credit a "both" GL line
      ExecuteJob(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeBoth,1,1,1)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler,ConfirmHandler,TransferToCreditMemoHandler)]
    PROCEDURE PCreditItemLine@42();
    BEGIN
      // Partially credit a "both" item line
      ExecuteJob(LibraryJob.ItemType,LibraryJob.PlanningLineTypeBoth,1,1,RANDOM(99) / 100)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler,ConfirmHandler,TransferToCreditMemoHandler)]
    PROCEDURE PCreditResourceLine@40();
    BEGIN
      // Partially credit a "both" resource line
      ExecuteJob(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeBoth,1,1,RANDOM(99) / 100)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler,ConfirmHandler,TransferToCreditMemoHandler)]
    PROCEDURE PCreditGLLine@39();
    BEGIN
      // Partially credit a "both" resource line
      ExecuteJob(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeBoth,1,1,RANDOM(99) / 100)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler,ConfirmHandler,TransferToCreditMemoHandler)]
    PROCEDURE ECreditItemLine@48();
    BEGIN
      // Excess credit a "both" item line
      ExecuteJob(LibraryJob.ItemType,LibraryJob.PlanningLineTypeBoth,1,1,RANDOM(99) / 100 + 1)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler,ConfirmHandler,TransferToCreditMemoHandler)]
    PROCEDURE ECreditResourceLine@47();
    BEGIN
      // Excess credit a "both" item line
      ExecuteJob(LibraryJob.ResourceType,LibraryJob.PlanningLineTypeBoth,1,1,RANDOM(99) / 100 + 1)
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler,ConfirmHandler,TransferToCreditMemoHandler)]
    PROCEDURE ECreditGLLine@46();
    BEGIN
      // Excess credit a "both" GL line
      ExecuteJob(LibraryJob.GLAccountType,LibraryJob.PlanningLineTypeBoth,1,1,RANDOM(99) / 100 + 1)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,TransferToInvoiceHandler)]
    PROCEDURE SalesInvoiceFromJobPalnningAndVerifyGLEntry@8();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1007 : Record 37;
      JobPlanningLine@1000 : Record 1003;
      PostedDocumentNo@1009 : Code[20];
      JobNo@1003 : Code[20];
      LineAmount@1002 : Decimal;
    BEGIN
      // Create Job and Job Planning Line and Create Job Journal with Line Type Blank and Create - Post Sales Invoice and Verify GL Entry.

      // Setup: Create Job and Job Planning Line and Create sales Invoice.
      Initialize;
      JobNo := CreateSalesInvoiceFromJobPlanningLine(SalesHeader,JobPlanningLine,FALSE,FALSE);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.");
      LineAmount := SalesLine."Line Amount";

      // Exercise: Post sales Invoice.
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify GL Entries
      VerifyGLEntry(PostedDocumentNo,JobNo,-1 * LineAmount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,TransferToInvoiceHandler)]
    PROCEDURE SalesInvoiceFromJobPalnningAndVerifyLineTypeInJobLedger@97();
    VAR
      SalesHeader@1003 : Record 36;
      JobPlanningLine@1000 : Record 1003;
      PostedDocumentNo@1001 : Code[20];
      JobNo@1004 : Code[20];
    BEGIN
      // Create Job and Job Planning Line and Create Job Journal with Line Type Blank and Create - Post Sales Invoice and Verify Line Type Contract in Job Ledger Entry.

      // Setup: Create Job and Job Planning Line and Create sales Invoice.
      Initialize;
      JobNo := CreateSalesInvoiceFromJobPlanningLine(SalesHeader,JobPlanningLine,FALSE,FALSE);
      // Exercise: Post sales Invoice.
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Line Type In Job Ledger Entries.
      VerifyLineTypeInJobLedgerEntry(PostedDocumentNo,JobNo);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,TransferToInvoiceHandler)]
    PROCEDURE CheckDimensionOnSalesInvoiceFromJobPlanningLine@28();
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Verify Dimension on Sales Invoice line that copied from Job Task.
      SalesDocumentFromJobPlanning(SalesHeader."Document Type"::Invoice,FALSE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,TransferToCreditMemoHandler)]
    PROCEDURE CheckDimensionOnSalesCreditMemoFromJobPlanningLine@68();
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Verify Dimension on Sales Credit Memo line that copied from Job Task.
      SalesDocumentFromJobPlanning(SalesHeader."Document Type"::"Credit Memo",TRUE);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,TransferToInvoiceHandler)]
    PROCEDURE SalesInvoiceFromJobPlanningAndVerifyDimSetID@52();
    VAR
      JobPlanningLine@1005 : Record 1003;
      SalesHeader@1006 : Record 36;
    BEGIN
      // Create Customer & Job with Dimension and Create - Sales Invoice from Job Planning Line and Verify Sales Line Dimension Set ID.

      // Setup: Create Customer & Job with Dimension.
      Initialize;
      CreateJobPlanningLineWithDimension(JobPlanningLine);

      // Exercise: Create sales Invoice from Job Planning Line and find related Sales Line.
      TransferJobPlanningLine(JobPlanningLine,1,FALSE,SalesHeader);

      // Verify: Verify DimesionSet ID  of Sales Line with Comdined Dimension Set ID from Sales Header & Sales Line.
      VerifyCombinedDimensionSetIDOnSalesLine(SalesHeader);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,TransferToInvoiceHandler)]
    PROCEDURE SalesInvoiceFromJobPalnningWithInvoiceCurrencyCode@144();
    VAR
      SalesHeader@1001 : Record 36;
      JobPlanningLine@1004 : Record 1003;
      JobLedgerEntry@1000 : Record 169;
      PostedDocumentNo@1009 : Code[20];
      JobNo@1003 : Code[20];
    BEGIN
      // Create Job and Job Planning Line and Create Job Journal with Line Type Blank and Create - Post Sales Invoice and Verify Job Ledger Entry.
      // Setup: Create Job and Job Planning Line and Create sales Invoice.
      Initialize;
      JobNo := CreateSalesInvoiceFromJobPlanningLine(SalesHeader,JobPlanningLine,TRUE,FALSE);
      // Exercise: Post sales Invoice.
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      // Verify: Verify Job Ledger Entries
      VerifyJobLedgerEntry(PostedDocumentNo,JobNo,-JobPlanningLine."Line Amount",JobLedgerEntry.FIELDNO("Line Amount (LCY)"));
      VerifyJobLedgerEntry(PostedDocumentNo,JobNo,JobPlanningLine."Unit Price",JobLedgerEntry.FIELDNO("Unit Price (LCY)"));
      VerifyJobLedgerEntry(PostedDocumentNo,JobNo,JobPlanningLine."Unit Cost",JobLedgerEntry.FIELDNO("Unit Cost (LCY)"));
    END;

    [Test]
    PROCEDURE DimensionOnJobJournalLine@60();
    VAR
      JobTask@1001 : Record 1001;
      JobJournalLine@1000 : Record 210;
      DimMgt@1004 : Codeunit 408;
      DimensionValueCode@1002 : Code[20];
    BEGIN
      // Verify dimension value on Job Journal Line when Job Journal line created with Job and Job Task.

      // Setup: Create Job and Job task with dimension.
      Initialize;
      DimensionValueCode := CreateJobTaskWithDimension(JobTask);

      // Exercise: Create Job Journal Line.
      LibraryJob.CreateJobJournalLine(JobJournalLine."Line Type"::" ",JobTask,JobJournalLine);

      // Verify: Verifying dimension on Job Journal Line.
      JobJournalLine.TESTFIELD("Shortcut Dimension 1 Code",DimensionValueCode);
      JobJournalLine.TESTFIELD("Dimension Set ID",
        DimMgt.CreateDimSetFromJobTaskDim(
          JobTask."Job No.",JobTask."Job Task No.",DimensionValueCode,JobJournalLine."Shortcut Dimension 2 Code"));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE DimensionOnJobLedgerEntry@65();
    VAR
      JobTask@1000 : Record 1001;
      JobJournalLine@1001 : Record 210;
    BEGIN
      // Verify dimension value on Job Ledger Entry when Job Journal line posted with Job and Job Task.

      // Setup: Create Job and Job task with dimension.
      Initialize;
      CreateJobTaskWithDimension(JobTask);

      // Exercise: Create and post Job Journal Line.
      CreateAndPostJobJournalLineWithTypeItem(JobJournalLine,JobTask);

      // Verify: Verifying dimension on Job Ledger Entry.
      VerifyDimensionOnJobLedgerEntry(JobTask,JobJournalLine."Shortcut Dimension 1 Code",JobJournalLine."Dimension Set ID");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,JobCalculateWIPRequestPageHandler)]
    PROCEDURE DimensionOnJobWIPEntry@69();
    VAR
      JobTask@1000 : Record 1001;
      Job@1002 : Record 167;
      JobJournalLine@1003 : Record 210;
      JobLedgerEntry@1005 : Record 169;
    BEGIN
      // Verify dimension on Job WIP Entry after running the report Job calculate WIP.

      // Setup: Create Job and Job task with dimension and create Post Job Journal Line.
      Initialize;
      CreateJobTaskWithDimension(JobTask);
      CreateAndPostJobJournalLineWithTypeItem(JobJournalLine,JobTask);
      FindJobLedgerEntry(JobLedgerEntry,JobTask);

      // Exercise: Run Job Calculate WIP report.
      Job.SETRANGE("No.",JobTask."Job No.");
      REPORT.RUN(REPORT::"Job Calculate WIP",TRUE,FALSE,Job);

      // Verify: Verifying dimension on Job WIP Entry.
      VerifyDimensionOnJobWIPEntry(JobTask."Job No.",JobJournalLine."Shortcut Dimension 1 Code",JobLedgerEntry."Dimension Set ID");
    END;

    [Test]
    PROCEDURE ItemDimensionOnJobJournalLine@64();
    VAR
      Item@1000 : Record 27;
      DimensionValue@1002 : Record 349;
      DefaultDimension@1003 : Record 352;
      JobPlanningLine@1006 : Record 1003;
      JobJournalLine@1007 : Record 210;
      JobJournalTemplate@1009 : Record 209;
      JobJournalBatch@1010 : Record 237;
      GeneralLedgerSetup@1011 : Record 98;
      JobTransferLine@1008 : Codeunit 1004;
    BEGIN
      // Verify Item dimension on Job journal line when Job jounal line created from Job Planning line.

      // Setup: Create Item With Dimension and Create Job Planning Line.
      Initialize;
      GeneralLedgerSetup.GET;
      LibraryDimension.CreateDimensionValue(DimensionValue,GeneralLedgerSetup."Shortcut Dimension 1 Code");
      LibraryDimension.CreateDefaultDimensionItem(
        DefaultDimension,LibraryInventory.CreateItem(Item),GeneralLedgerSetup."Shortcut Dimension 1 Code",DimensionValue.Code);
      Plan(LibraryJob.PlanningLineTypeSchedule,LibraryJob.ItemType,JobPlanningLine);
      UpdateJobPlanningLine(JobPlanningLine,Item."No.");

      // Exercise: Create Job Journal Line.
      JobTransferLine.FromPlanningLineToJnlLine(JobPlanningLine,WORKDATE,LibraryJob.GetJobJournalTemplate(JobJournalTemplate),
        LibraryJob.CreateJobJournalBatch(LibraryJob.GetJobJournalTemplate(JobJournalTemplate),JobJournalBatch),JobJournalLine);

      // Verify: Verifying Dimension on Job Journal Line.
      VerifyDimensionOnJobJournalLine(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",DimensionValue.Code)
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,TransferToInvoiceHandler)]
    PROCEDURE SalesInvoiceDimensionFromJobPlanningLine@70();
    VAR
      Item@1002 : Record 27;
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      JobTaskDim@1004 : Record 1002;
      DefaultDimension@1003 : Record 352;
      SalesHeader@1008 : Record 36;
      SalesLine@1009 : Record 37;
      ExpectedCombDimSetID@1005 : Integer;
    BEGIN
      // Check that dimensions are successfully combined from job journal line and job task dimensions

      // Setup: Create job task, job task dimenion, item and item default dimension.
      Initialize;
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      CreateJobTaskDim(JobTaskDim,JobTask);
      LibraryInventory.CreateItem(Item);
      CreateDefDimForItem(DefaultDimension,Item."No.");

      // Exercuse: Post job journal line with item, transfer posted job planning line to sales invoice.
      CreatePostJobJournalLineWithItem(JobTask,Item."No.");
      TransJobPlanningLineToSalesInvoice(SalesHeader,JobTask);

      // Verify: Calculate expected combined dimension set ID and compare with set ID in sales line.
      ExpectedCombDimSetID :=
        GetCombinedDimSetID(JobTaskDim,DefaultDimension);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.");
      Assert.AreEqual(
        ExpectedCombDimSetID,SalesLine."Dimension Set ID",STRSUBSTNO(WrongDimSetIDInSalesLineErr,SalesHeader."No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,TransferToInvoiceHandler)]
    PROCEDURE TryPostSalesInvoiceFromJobPlanningLineStdCostChanged@150();
    VAR
      Item@1002 : Record 27;
      JobTask@1001 : Record 1001;
      SalesHeader@1008 : Record 36;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Verify that Sales Invoice for Job Planning Line can be posted if Standard Cost is changed after creation of Job Planning Line.

      // Setup.
      PrepareJobForSalesInvoice(JobTask,Item);

      // Exercise.
      CreatePostJobJournalLineWithItem(JobTask,Item."No.");
      TransJobPlanningLineToSalesInvoice(SalesHeader,JobTask);
      SetItemStandardCost(Item,Item."Standard Cost" * 2);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify.
      VerifyPostedSalesInvoice(DocumentNo,Item."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,TransferToInvoiceHandler)]
    PROCEDURE TryPostSalesInvoiceFromJobPlanningLineStdCostDiffUOM@180();
    VAR
      Item@1002 : Record 27;
      JobTask@1001 : Record 1001;
      JobJournalLine@1006 : Record 210;
      SalesHeader@1008 : Record 36;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Verify that Sales Invoice for Job Planning Line can be posted with Unit of Measure different from Base Unit of Measure.

      // Setup.
      PrepareJobForSalesInvoice(JobTask,Item);

      // Exercise.
      CreateJobJournalLineWithItem(JobJournalLine,JobTask,Item."No.");
      JobJournalLine.VALIDATE("Unit of Measure Code",CreateItemUnitOfMeasure(Item));
      JobJournalLine.MODIFY;
      LibraryJob.PostJobJournal(JobJournalLine);
      TransJobPlanningLineToSalesInvoice(SalesHeader,JobTask);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify.
      VerifyPostedSalesInvoice(DocumentNo,Item."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,TransferToInvoiceHandler)]
    PROCEDURE SalesInvoiceDimensionFromJobPlanningLineManual@53();
    VAR
      Item@1002 : Record 27;
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      JobTaskDim@1004 : Record 1002;
      JobJournalLine@1006 : Record 210;
      DefaultDimension@1003 : Record 352;
      SalesHeader@1008 : Record 36;
      SalesLine@1009 : Record 37;
      ExpectedDimValueCode@1005 : Code[20];
    BEGIN
      // Create Job and Job Planning Line and Create Job Journal with Line Type Contract and Manually set Dimension and Create Sales Invoice and Verify Dimensions.

      // Setup.
      Initialize;
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      CreateJobTaskGlobalDim(JobTaskDim,JobTask);
      LibraryInventory.CreateItem(Item);
      CreateDefDimForItem(DefaultDimension,Item."No.");

      // Exercise.
      CreateJobJournalLineWithItem(JobJournalLine,JobTask,Item."No.");
      ExpectedDimValueCode := ModifyDimension(JobJournalLine);
      LibraryJob.PostJobJournal(JobJournalLine);

      TransJobPlanningLineToSalesInvoice(SalesHeader,JobTask);

      // Verify.
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.");
      Assert.AreEqual(
        ExpectedDimValueCode,SalesLine."Shortcut Dimension 1 Code",WrongDimValueCodeErr);
    END;

    LOCAL PROCEDURE ExecuteJob@20(ConsumableType@1004 : Option;LineType@1003 : Option;UsageFraction@1008 : Decimal;InvoiceFraction@1002 : Decimal;CreditFraction@1007 : Decimal);
    VAR
      JobPlanningLine@1005 : Record 1003;
      JobJournalLine@1006 : Record 210;
    BEGIN
      // Plan job with LineType and ConsumableType
      // Consume UsageFraction of the job planning line
      // Invoice InvoiceFraction of the job planning line
      // Verify Qty. Invoiced, Qty. to Invoice
      // Credit CreditFraction of the job planning line
      // Verify Qty. Invoiced, Qty. to Invoice

      // Setup
      Initialize;
      WITH JobPlanningLine DO BEGIN
        // Plan
        Plan(LineType,ConsumableType,JobPlanningLine);
        VALIDATE("Usage Link",TRUE);
        MODIFY(TRUE);

        // Consume
        LibraryJob.UseJobPlanningLine(JobPlanningLine,LibraryJob.UsageLineType("Line Type"),UsageFraction,JobJournalLine);
        GET("Job No.","Job Task No.","Line No.");

        // Invoice
        Invoice(JobPlanningLine,InvoiceFraction);
        CALCFIELDS("Qty. Invoiced");
        Assert.AreEqual(InvoiceFraction * Quantity,"Qty. Invoiced",FIELDCAPTION("Qty. Invoiced"));
        Assert.AreEqual("Qty. Posted" - "Qty. Invoiced","Qty. to Invoice",FIELDCAPTION("Qty. to Invoice"));

        // Credit
        Credit(JobPlanningLine,CreditFraction);
        CALCFIELDS("Qty. Invoiced");
      END
    END;

    [Test]
    PROCEDURE PostJournalLineFromJobJnlLine@74();
    VAR
      JobTask@1012 : Record 1001;
      GenJournalLine@1010 : Record 81;
      JobJnlLine@1009 : Record 210;
    BEGIN
      // SETUP
      Initialize;
      CreateJobTaskWithDimensions(JobTask);
      LibraryJob.CreateJobJournalLine(JobJnlLine.Type::"G/L Account",JobTask,JobJnlLine);

      // EXERCISE: Add Job General Line
      LibraryJob.CreateJobGLJournalLine(GenJournalLine."Job Line Type"::"Both Schedule and Contract",JobTask,GenJournalLine);

      // VERIFY
      Assert.AreEqual(JobJnlLine."Dimension Set ID",GenJournalLine."Dimension Set ID",
        STRSUBSTNO(WrongJobJnlDimensionsErr,GenJournalLine.FIELDCAPTION("Dimension Set ID")));
      Assert.AreEqual(JobJnlLine."Shortcut Dimension 1 Code",GenJournalLine."Shortcut Dimension 1 Code",
        STRSUBSTNO(WrongJobJnlDimensionsErr,GenJournalLine.FIELDCAPTION("Shortcut Dimension 1 Code")));
      Assert.AreEqual(JobJnlLine."Shortcut Dimension 2 Code",GenJournalLine."Shortcut Dimension 2 Code",
        STRSUBSTNO(WrongJobJnlDimensionsErr,GenJournalLine.FIELDCAPTION("Shortcut Dimension 2 Code")));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE PostJobJnlLineFromJobPlanningLine@80();
    VAR
      JobLedgerEntry@1000 : Record 169;
      JobPlanningLine@1001 : Record 1003;
      JobJournalLine@1002 : Record 210;
    BEGIN
      // SETUP
      Initialize;
      CreateJobPlanningLineWithItem(JobPlanningLine);
      CreateJobJnlLineFromJobPlanningLine(JobJournalLine,JobPlanningLine);

      // EXERCISE
      LibraryJob.PostJobJournal(JobJournalLine);

      // VERIFY
      FindJobLedgerEntryByJob(JobLedgerEntry,JobPlanningLine."Job No.",JobPlanningLine."No.");
      Assert.AreEqual(JobPlanningLine.Quantity,JobLedgerEntry.Quantity,
        STRSUBSTNO(WrongJobLedgerEntryQtyErr));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,TransferToInvoiceHandler)]
    PROCEDURE CreateJobSalesInvoce@87();
    VAR
      JobPlanningLine@1003 : Record 1003;
      DimensionSetEntry@1004 : Record 480;
      SalesHeader@1001 : Record 36;
      SalesLine@1006 : Record 37;
      DimensionSetEntrySalesLine@1007 : Record 480;
      DimensionCode@1000 : Code[20];
      JobJournalLineDimSetID@1005 : Integer;
    BEGIN
      // SETUP
      Initialize;
      CreatePostJobJnlLineWithDimJobPlanningLine(JobPlanningLine,DimensionCode,JobJournalLineDimSetID);
      // EXERCISE: Create Job Sales Line
      TransferJobPlanningLine(JobPlanningLine,1,FALSE,SalesHeader);
      // VERIFY
      FindDimensionSetEntryByCode(DimensionSetEntry,JobJournalLineDimSetID,DimensionCode);
      FindSalesLineByDocumentType(SalesLine,SalesHeader);
      FindDimensionSetEntryByCode(DimensionSetEntrySalesLine,SalesLine."Dimension Set ID",DimensionCode);
      Assert.AreEqual(DimensionSetEntry."Dimension Value Code",
        DimensionSetEntrySalesLine."Dimension Value Code",WrongSalesInvoceDimensionsErr);
    END;

    [Test]
    PROCEDURE ChangeQuantityInJobJournalLine@85();
    VAR
      JobJournalLine@1007 : Record 210;
      ExpectedUnitPrice@1001 : Decimal;
    BEGIN
      // [SCENARIO] Verifies Job Journal Line's Unit Price properly calculated after line's quantity update
      Initialize;
      // [GIVEN] Create Job Journal Line with Item and Job Item Price setup
      ExpectedUnitPrice := CreateJobJnlLine(JobJournalLine);
      // [WHEN] Quantity updated in Job Journal Line
      JobJournalLine.VALIDATE(Quantity,LibraryRandom.RandInt(10));
      // [THEN] Line's "Unit Price" must be calculated using Item's Unit Cost and Job Item Price factor.
      Assert.AreEqual(ROUND(ExpectedUnitPrice,2),ROUND(JobJournalLine."Unit Price",2),UnitPriceMustNotBeZeroErr);
    END;

    [Test]
    PROCEDURE ChangeLocationCodeInJobJournalLine@86();
    VAR
      JobJournalLine@1007 : Record 210;
      Location@1000 : Record 14;
      ExpectedUnitPrice@1001 : Decimal;
    BEGIN
      // [SCENARIO] Verifies Job Journal Line's Unit Price properly calculated after line's location update
      Initialize;
      // [GIVEN] Create Job Journal Line with Item and Job Item Price setup
      // [GIVEN] Create new location for update Job Journal Line
      ExpectedUnitPrice := CreateJobJnlLine(JobJournalLine);
      LibraryWarehouse.CreateLocation(Location);
      // [WHEN] Location updated in Job Journal Line
      JobJournalLine.VALIDATE("Location Code",Location.Code);
      // [THEN] Line's "Unit Price" must be calculated using Item's Unit Cost and Job Item Price factor.
      Assert.AreEqual(ROUND(ExpectedUnitPrice,2),ROUND(JobJournalLine."Unit Price",2),UnitPriceMustNotBeZeroErr);
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler)]
    PROCEDURE TryPostSalesInvoiceFromJobPlanningLineAfterDescriptionChanged@105();
    VAR
      JobTask@1002 : Record 1001;
      SalesHeader@1001 : Record 36;
      NewDescription@1003 : Text[50];
      DocumentNo@1004 : Code[20];
    BEGIN
      // [SCENARIO] Verifies that Sales Invoice can be posted after changing Description
      Initialize;
      // [GIVEN] Create Job Journal Line
      CreateJobPlanningLineWithResource(JobTask);
      // [GIVEN] Create Sales Invoice and change Description
      TransJobPlanningLineToSalesInvoice(SalesHeader,JobTask);
      NewDescription := UpdateDesriptionInSalesLine(SalesHeader."No.",SalesHeader."Document Type");
      // [WHEN] Sales invoice posted
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      // [THEN] Sales invoice line must have with changed description
      VerifyDescriptionInPostedSalesInvoice(DocumentNo,NewDescription);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,TransferToInvoiceHandler)]
    PROCEDURE SalesInvoiceLCYFromJobPlanningPricesInclVAT@108();
    VAR
      SalesHeader@1001 : Record 36;
      JobPlanningLine@1004 : Record 1003;
      JobLedgerEntry@1000 : Record 169;
      PostedDocumentNo@1009 : Code[20];
      JobNo@1003 : Code[20];
    BEGIN
      // [SCENARIO 120828] Sales Invoice's "Prices Incl. VAT" value should not affect Job Ledger Entry fields "Line Amount" and "Unit Price". Sale is in LCY.
      Initialize;
      // [GIVEN] Sales Invoice (LCY, Prices Incl. VAT = true) created from Job Planning Line
      JobNo := CreateSalesInvoiceFromJobPlanningLine(SalesHeader,JobPlanningLine,FALSE,TRUE);
      // [WHEN] Sales Invoice posted
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      // [THEN] Job Ledger Entry values of Line Amount and Unit Price are equal to the values of Job Planning Line
      VerifyJobLedgerEntry(PostedDocumentNo,JobNo,-JobPlanningLine."Line Amount",JobLedgerEntry.FIELDNO("Line Amount"));
      VerifyJobLedgerEntry(PostedDocumentNo,JobNo,JobPlanningLine."Unit Price",JobLedgerEntry.FIELDNO("Unit Price"));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,TransferToInvoiceHandler)]
    PROCEDURE SalesInvoiceFCYFromJobPlanningPricesInclVAT@110();
    VAR
      SalesHeader@1001 : Record 36;
      JobPlanningLine@1004 : Record 1003;
      JobLedgerEntry@1000 : Record 169;
      PostedDocumentNo@1009 : Code[20];
      JobNo@1003 : Code[20];
    BEGIN
      // [SCENARIO 120828] Sales Invoice's "Prices Incl. VAT" value should not affect Job Ledger Entry fields "Line Amount" and "Unit Price". Sale is in FCY.
      Initialize;
      // [GIVEN] Sales Invoice (FCY, Prices Incl. VAT = true) created from Job Planning Line
      JobNo := CreateSalesInvoiceFromJobPlanningLine(SalesHeader,JobPlanningLine,TRUE,TRUE);
      // [WHEN] Sales Invoice posted
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      // [THEN] Job Ledger Entry values of Line Amount and Unit Price are equal to the values of Job Planning Line
      VerifyJobLedgerEntry(PostedDocumentNo,JobNo,-JobPlanningLine."Line Amount",JobLedgerEntry.FIELDNO("Line Amount"));
      VerifyJobLedgerEntry(PostedDocumentNo,JobNo,JobPlanningLine."Unit Price",JobLedgerEntry.FIELDNO("Unit Price"));
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler)]
    PROCEDURE SalesInvoiceFCYWithTextJobPlanningLine@83();
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      JobPlanningLine@1002 : Record 1003;
      JobCreateInvoice@1003 : Codeunit 1002;
    BEGIN
      // [FEATURE] [FCY]
      // [SCENARIO 375614] Sales Invoice created from Job with FCY and Job Planning Line with Type = Text

      Initialize;
      // [GIVEN] Job with Currency Code
      CreateJobWithCurrency(Job);

      // [GIVEN] Job Task with Resource and Text job planning lines
      // Resource line is mandatory in order to have non-zero Sales Invoice
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobPlanningLine(
        JobPlanningLine."Line Type"::Contract,LibraryJob.ResourceType,JobTask,JobPlanningLine);
      CreateJobPlanningLineWithTypeText(JobPlanningLine,JobPlanningLine."Line Type"::Contract,JobTask);
      COMMIT;

      // [WHEN] Create Sales Invoice for job planning lines
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);

      // [THEN] Sales Invoice invoice with Text line created
      VerifySalesLineWithTextExists(JobPlanningLine);
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler)]
    PROCEDURE SalesInvoiceDocumentDateOnJobLedgEntry@104();
    VAR
      JobPlanningLine@1001 : Record 1003;
      SalesHeader@1000 : Record 36;
      DocNo@1002 : Code[20];
    BEGIN
      // [SCENARIO 376225] Document Date should be transfered from Sales Invoice to Job Ledger Entry

      // [GIVEN] Sales Invoice with "Posting Date" = 15.01 and "Document Date" = 10.01
      Initialize;
      Plan(LibraryJob.PlanningLineTypeContract,LibraryJob.ItemType,JobPlanningLine);
      TransferJobPlanningLine(JobPlanningLine,1,FALSE,SalesHeader);

      SalesHeader.VALIDATE("Document Date",SalesHeader."Document Date" - 1);

      // [WHEN] Post Sales Invoice
      DocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Job Ledger Entry created with "Document Date" = 10.01
      VerifyDocDateOnJobLedgEntry(
        JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",DocNo,SalesHeader."Document Date");
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ConfirmHandlerFalseReply)]
    PROCEDURE JobCurrencyFactorNotUpdatedWhenCancelExchRateConfOnPurchOrder@112();
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      PurchHeader@1002 : Record 38;
      NewPostingDate@1003 : Date;
    BEGIN
      // [FEATURE] [Currency] [Purchase]
      // [SCNEARIO 377381] "Job Currency Factor" should not be updated in Purchase Line when cancel exchange rate update on Purchase Order

      Initialize;
      // [GIVEN] Job Task with Currency
      CreateJobWithCurrency(Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      // [GIVEN] Purchase Order related to Job Task with Currency, "Posting Date" = 01.01 and "Exchage Rate" = "A"
      CreatePurchInvWithCurrencyAndJobTask(PurchHeader,Job."Currency Code",JobTask);

      // [GIVEN] Currency Exchange Rate with "Starting Date" = 02.01 and "Exchange Rate" = "B"
      NewPostingDate := LibraryRandom.RandDate(10);
      CreateCurrencyExchangeRate(Job."Currency Code",NewPostingDate);

      // [WHEN] Change "Posting Date" of Purchase Order to 02.01. Cancel confirmation "Do you want to update Exchange Rate?"
      PurchHeader.VALIDATE("Posting Date",NewPostingDate);

      // [THEN] "Job Currency Factor" = "A" in Purchase Line
      VerifyJobCurrencyFactorOnPurchLine(PurchHeader);
    END;

    [Test]
    [HandlerFunctions(CreateSalesInvoiceReportHandler,MessageHandler)]
    PROCEDURE PostSalesInvoiceWithJobAndVATGroups@123();
    VAR
      SalesHeader@1001 : Record 36;
      JobTask@1003 : Record 1001;
      VATBusPostingGroup@1012 : Record 323;
      VATProdPostingGroupArray@1013 : ARRAY [6] OF Record 324;
      VATPostingSetupArray@1014 : ARRAY [6] OF Record 325;
      ItemNo@1016 : Code[20];
      GLAccountNo@1015 : Code[20];
      CustomerNo@1017 : Code[20];
      PostedDocumentNo@1000 : Code[20];
      GenBusPostingGroupCode@1011 : Code[10];
      GenProdPostingGroupCode@1010 : Code[10];
    BEGIN
      // [SCENARIO 380416] Job Ledger Entry is pointing to a correct General Ledger Entry when Sales Invoice has been posted with various VAT Production Posting Groups.

      Initialize;
      CreateGenPostingGroups(GenProdPostingGroupCode,GenBusPostingGroupCode);
      CreateVATPostingGroupsArray(VATBusPostingGroup,VATProdPostingGroupArray,VATPostingSetupArray);
      GLAccountNo := SetupGLAccount(VATPostingSetupArray[1],GenBusPostingGroupCode,GenProdPostingGroupCode);
      ItemNo := LibraryInventory.CreateItemNoWithPostingSetup(GenProdPostingGroupCode,VATProdPostingGroupArray[1].Code);
      CustomerNo := SetupCustomerWithVATPostingGroup(VATBusPostingGroup.Code,GenProdPostingGroupCode);

      // [GIVEN] Job with Job Task "JT" with Planning Lines with 8 Items and GL Accounts.
      // [GIVEN] Created Sales Invoice from Job Task where are 8 G/L Account/Items lines have various VAT Prod. Posting Group.
      CreateJobWithVATPostingGroupsWithPlanningLines(
        JobTask,GenBusPostingGroupCode,GenProdPostingGroupCode,CustomerNo,ItemNo,GLAccountNo);
      CreateSalesInvoiceWithVariousVATPostingGroups(SalesHeader,JobTask,VATProdPostingGroupArray,VATBusPostingGroup.Code,CustomerNo);

      // [WHEN] Post the Sales Invoice.
      PostedDocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Posted Job Ledger Entries, where "Ledger Entry Type" is "G/L Account", are mapped 1-to-1 and 1-to-many to G/L Entries by "Ledger Entry No.".
      // [THEN] Posted Job Ledger Entries, where "Ledger Entry Type" is "Item", are mapped 1-to-1 to Item Ledger Entries by "Ledger Entry No.".
      VerifyJobLedgerEntriesWithGLEntries(JobTask,PostedDocumentNo,GLAccountNo);
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler)]
    PROCEDURE CreateSalesInvoiceTwiceFromJobPlanningLineWithCurrency@113();
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      JobPlanningLine@1002 : Record 1003;
      JobCreateInvoice@1003 : Codeunit 1002;
    BEGIN
      // [FEATURE] [Currency] [UI]
      // [SCENARIO 201069] Isaac can create Sales Invoice from Job Planning Line twice for Job with "Currency Code"

      Initialize;

      // [GIVEN] Job with "Currency Code"
      CreateJobWithCurrency(Job);

      // [GIVEN] Job Planning Line with Quantity = 2 and "Qty. to Transfer to Invoice" = 1
      LibraryJob.CreateJobTask(Job,JobTask);
      CreateJobPlanningLineWithQtyToTransferToInvoice(JobPlanningLine,JobTask,2,1);
      COMMIT; // needed for TransferToInvoiceHandler which shows modal page

      // [GIVEN] Created first Sales Invoice for Job Planning Line. "Qty. Transferred to Invoice" = 1; "Qty. to Transfer to Invoice" = 1
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);

      // [WHEN] Create Sales Invoice second time
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,FALSE);

      // [THEN] Two Sales Lines created in total (for the first and second invoice)
      VerifySalesLineCountLinkedToJob(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",2);

      // [THEN] Job Planning Line is updated. "Qty. Transferred to Invoice" = 2; "Qty. to Transfer to Invoice" = 0
      VerifyInvoiceQuantityInJobPlanningLine(JobPlanningLine,JobPlanningLine.Quantity,0);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CostAmountWhenUndoReceiptWithJob@120();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchRcptLine@1006 : Record 121;
      PostedRcptNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Undo Receipt]
      // [SCENARIO 209289] Cost Amount is actual when undo the receipt of Purchase Order with Job

      Initialize;

      // [GIVEN] Receive Purchase Order with Item "X", Job and Cost Amount = 100
      CreatePurchaseOrderWithJob(PurchaseHeader,PurchaseLine);
      PostedRcptNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [GIVEN] Undo Receipt
      FindPurchaseReceiptLine(PurchRcptLine,PostedRcptNo);
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);

      // [WHEN] Post Purchase Order (Receive & Invoice)
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] All Item Ledger Entry posted with Item "X" has "Cost Amount (Expected)" = 0" and "Cost Amount (Actual)" = 100
      VerifyItemLedgEntriesInvoiced(PurchRcptLine."No.",PurchaseLine.Amount);
    END;

    [Test]
    [HandlerFunctions(PostedPurchaseDocumentLinesPageHandler)]
    PROCEDURE CostAmountWhenPostCrMemoLinesToReverseFromInvWithJob@125();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PostedInvoiceNo@1005 : Code[20];
    BEGIN
      // [SCENARIO 209289] Cost amount is actual when post Credit Memo with lines to reverse from Purchase Order with Job

      Initialize;

      // [GIVEN] Posted Purchase Invoice with Item "X", Job and Cost Amount = 100
      CreatePurchaseOrderWithJob(PurchaseHeader,PurchaseLine);
      PostedInvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [GIVEN] Purchase Credit Memo with lines to reverse from Posted Purchase Invoice
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",PurchaseHeader."Buy-from Vendor No.");
      LibraryVariableStorage.Enqueue(PostedInvoiceNo);
      PurchaseHeader.GetPstdDocLinesToRevere;

      // [WHEN] Post Purchase Credit Memo
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] All Item Ledger Entry posted with Item "X" has "Cost Amount (Expected)" = 0" and "Cost Amount (Actual)" = 100
      VerifyItemLedgEntriesInvoiced(PurchaseLine."No.",PurchaseLine.Amount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ItemTrackingLinesPageHandler)]
    PROCEDURE CostAmountWhenUndoReceiptWithJobAndLotTracking@134();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchLine@1001 : Record 39;
      Item@1002 : Record 27;
      PurchRcptLine@1006 : Record 121;
      PostedRcptNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Undo Receipt]
      // [SCENARIO 209289] Cost Amount is actual when undo the receipt of Purchase Order with Job and Lot tracking

      Initialize;

      // [GIVEN] Receive Purchase Order with Item "X", Lot Tracking, Job and Cost Amount = 100
      LibraryItemTracking.CreateLotItem(Item);
      PostedRcptNo := ReceivePurchOrderWithJobAndItemTracking(PurchaseHeader,Item."No.",TrackingOption::"Assign Lot No.");
      FindPurchLine(PurchLine,PurchaseHeader."Document Type",PurchaseHeader."No.");

      // [GIVEN] Undo Receipt
      FindPurchaseReceiptLine(PurchRcptLine,PostedRcptNo);
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);

      // [WHEN] Post Purchase Order (Receive & Invoice)
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] All Item Ledger Entry posted with Item "X" has "Cost Amount (Expected)" = 0" and "Cost Amount (Actual)" = 100
      VerifyItemLedgEntriesInvoiced(Item."No.",PurchLine.Amount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler)]
    PROCEDURE CostAmountWhenUndoReceiptWithJobAndSerialNoTracking@141();
    VAR
      PurchaseHeader@1000 : Record 38;
      Item@1002 : Record 27;
      PurchRcptLine@1006 : Record 121;
      PostedRcptNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Undo Receipt]
      // [SCENARIO 209289] Cost Amount is actual when undo the receipt of Purchase Order with Job and Serial No. tracking

      Initialize;

      // [GIVEN] Receive Purchase Order with Item "X", Serial No. Tracking, Job and Cost Amount = 100
      LibraryItemTracking.CreateSerialItem(Item);
      PostedRcptNo := ReceivePurchOrderWithJobAndItemTracking(PurchaseHeader,Item."No.",TrackingOption::"Assign Serial No.");

      // [GIVEN] Undo Receipt
      FindPurchaseReceiptLine(PurchRcptLine,PostedRcptNo);
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);

      // [WHEN] Post Purchase Order (Receive & Invoice)
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] All Item Ledger Entry posted with Item "X" has "Cost Amount (Expected)" = 0" and "Cost Amount (Actual)" = 100
      Item.FIND;
      VerifyItemLedgEntriesInvoiced(Item."No.",Item."Unit Cost");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ItemLedgerEntriesAfterUndoReceiptAreReopenForAdjustment@156();
    VAR
      PurchRcptLine@1006 : Record 121;
      Item@1000 : Record 27;
      PostedRcptNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Undo Receipt]
      // [SCENARIO 209289] Item Ledger Entries after undo the receipt are reopen for adjustment

      Initialize;

      // [GIVEN] Receive Purchase Order with Item "X", Job and Cost Amount = 100
      PostedRcptNo := PostPurchaseOrderWithJob(TRUE,FALSE);
      FindPurchaseReceiptLine(PurchRcptLine,PostedRcptNo);

      // [GIVEN] Adjust Cost Item Entries for Item "X"
      LibraryCosting.AdjustCostItemEntries(PurchRcptLine."No.",'');

      // [WHEN] Undo receipt
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);

      // [THEN] All Item Ledger Entry posted with Item "X" has "Applied Entry to Adjust" = TRUE
      VerifyAppliedEntryToAdjustFalseInItemLedgEntries(PurchRcptLine."No.");

      // [THEN] Item has "Cost is Adjust" = FALSE
      Item.GET(PurchRcptLine."No.");
      Item.TESTFIELD("Cost is Adjusted",FALSE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CostAmountWhenUndoReceiptOnLaterDateWithJob@215();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchRcptLine@1006 : Record 121;
      PurchLine@1001 : Record 39;
      PostedRcptNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Undo Receipt]
      // [SCENARIO 209289] Cost Amount is actual when undo the receipt of Purchase Order with Job on later "Posting Date"

      Initialize;

      // [GIVEN] Receive Purchase Order with "Posting Date" = 01.01, Item "X", Job and Cost Amount = 100
      PostedRcptNo := PostPurchaseOrderWithJob(TRUE,FALSE);
      FindPurchaseReceiptLine(PurchRcptLine,PostedRcptNo);

      // [GIVEN] Change "Posting Date" = 05.01 in Purchase Order
      ChangePostingDateWithLaterDateOnPurchHeader(PurchaseHeader,PurchRcptLine."No.");
      FindPurchLine(PurchLine,PurchaseHeader."Document Type",PurchaseHeader."No.");

      // [GIVEN] Undo Receipt
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);

      // [WHEN] Post Purchase Order (Receive & Invoice)
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] All Item Ledger Entry posted with Item "X" has "Cost Amount (Expected)" = 0" and "Cost Amount (Actual)" = 100
      VerifyItemLedgEntriesInvoiced(PurchRcptLine."No.",PurchLine.Amount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ItemRegisterWhenUndoReceiptWithJob@221();
    VAR
      PurchRcptLine@1005 : Record 121;
      PostedRcptNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Undo Receipt]
      // [SCENARIO 209289] Item Register is created when undo the receipt of Purchase Order with Job

      Initialize;

      // [GIVEN] Receive Purchase Order with Item and Job
      PostedRcptNo := PostPurchaseOrderWithJob(TRUE,FALSE);
      FindPurchaseReceiptLine(PurchRcptLine,PostedRcptNo);

      // [WHEN] Undo Receipt
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);

      // [THEN] Item Register is created for Item Ledger Entries from Negative Adjustment of Job to Purchase of Job
      VerifyItemRegisterExistsFromNegativeToPurchItemLedgEntry(PurchRcptLine."No.");

      // [GIVEN] Value Entries in Item Register has Cost Amount (Actual)
      VerifyItemRegisterWithCostAmtActualValueEntriesExists(PurchRcptLine."No.");
    END;

    [Test]
    PROCEDURE JobInvoicesPageInDrillDownMode@291();
    VAR
      JobInvoicesTestPage@1000 : TestPage 1029;
      JobInvoicesPage@1001 : Page 1029;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 222559] "Transferred Date", "Invoiced Date" and "Job Lendger Entry No." fields are not visible when page "Job Invoices" opened without "Show Details"
      JobInvoicesTestPage.TRAP;

      JobInvoicesPage.SetShowDetails(FALSE);
      JobInvoicesPage.RUN;

      Assert.IsFalse(JobInvoicesTestPage."Transferred Date".VISIBLE,JobInvoicesTestPage."Transferred Date".CAPTION);
      Assert.IsFalse(JobInvoicesTestPage."Invoiced Date".VISIBLE,JobInvoicesTestPage."Invoiced Date".CAPTION);
      Assert.IsFalse(JobInvoicesTestPage."Job Ledger Entry No.".VISIBLE,JobInvoicesTestPage."Job Ledger Entry No.".CAPTION);
    END;

    [Test]
    PROCEDURE JobInvoicesPageInNormalMode@292();
    VAR
      JobInvoicesTestPage@1001 : TestPage 1029;
      JobInvoicesPage@1000 : Page 1029;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 222559] "Transferred Date", "Invoiced Date" and "Job Lendger Entry No." fields are visible when page "Job Invoices" opened with "Show Details"
      JobInvoicesTestPage.TRAP;

      JobInvoicesPage.SetShowDetails(TRUE);
      JobInvoicesPage.RUN;

      Assert.IsTrue(JobInvoicesTestPage."Transferred Date".VISIBLE,JobInvoicesTestPage."Transferred Date".CAPTION);
      Assert.IsTrue(JobInvoicesTestPage."Invoiced Date".VISIBLE,JobInvoicesTestPage."Invoiced Date".CAPTION);
      Assert.IsTrue(JobInvoicesTestPage."Job Ledger Entry No.".VISIBLE,JobInvoicesTestPage."Job Ledger Entry No.".CAPTION);
    END;

    [Test]
    PROCEDURE JobInvoicesPageFromJobPlanningLine@293();
    VAR
      JobPlanningLine@1000 : Record 1003;
      JobInvoicesTestPage@1001 : TestPage 1029;
    BEGIN
      // [FEATURE] [Job Planning Line] [UI]
      // [SCENARIO 222559] "Transferred Date", "Invoiced Date" and "Job Lendger Entry No." fields are not visible when page "Job Invoices" opened as drill down from job planning line
      JobInvoicesTestPage.TRAP;

      JobPlanningLine.DrillDownJobInvoices;

      Assert.IsFalse(JobInvoicesTestPage."Transferred Date".VISIBLE,JobInvoicesTestPage."Transferred Date".CAPTION);
      Assert.IsFalse(JobInvoicesTestPage."Invoiced Date".VISIBLE,JobInvoicesTestPage."Invoiced Date".CAPTION);
      Assert.IsFalse(JobInvoicesTestPage."Job Ledger Entry No.".VISIBLE,JobInvoicesTestPage."Job Ledger Entry No.".CAPTION);
    END;

    [Test]
    [HandlerFunctions(JobInvoicesDetailsVisibleModalPageHandler)]
    PROCEDURE JobInvoicesPageFromJob@295();
    VAR
      Job@1003 : Record 167;
      JobInvoicesTestPage@1001 : TestPage 1029;
      JobList@1004 : TestPage 89;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 222559] "Transferred Date", "Invoiced Date" and "Job Lendger Entry No." fields are visible when page "Job Invoices" opened by "Sales Invoices / Credit Memos" action on jobs page
      LibraryJob.CreateJob(Job);

      JobInvoicesTestPage.TRAP;

      JobList.OPENVIEW;
      JobList.GOTORECORD(Job);

      JobList.SalesInvoicesCreditMemos.INVOKE;

      // Visibility verified in JobInvoicesDetailsVisibleModalPageHandler
    END;

    [Test]
    [HandlerFunctions(TransferToInvoiceHandler,MessageHandler)]
    PROCEDURE CopyTransferedAndPostingDateFromPostedInvoice@164();
    VAR
      JobPlanningLine@1001 : Record 1003;
      TempJobPlanningLineInvoice@1005 : TEMPORARY Record 1022;
      SalesHeader@1000 : Record 36;
      JobCreateInvoice@1004 : Codeunit 1002;
      DocumentNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Invoice] [Sales] [UT]
      // [SCENARIO 225966] COD1002.FindInvoices function transfers copies "Transfered Date" and "Invoiced Date" to output temporary record
      Initialize;

      // [GIVEN] Posted sales invoice "I" created from job "X" with the job planning line
      // [GIVEN] Created "Job Planning Line Invoice" for "I" has "Transfered Date" and "Invoiced Date" = WORKDATE
      CreateSimpleSalesInvoiceFromJobPlanningLine(
        SalesHeader,JobPlanningLine,LibraryJob.PlanningLineTypeContract,LibraryRandom.RandInt(5));

      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [WHEN] When call COD1002.FindInvoices function with detail level = "Per Job" for job "X"
      JobCreateInvoice.FindInvoices(TempJobPlanningLineInvoice,JobPlanningLine."Job No.",'',0,DetailLevel::"Per Job");

      // [THEN] Inserted temporary "Job Planning Line Invoice" record has "Transfered Date" and "Invoiced Date" = WORKDATE
      TempJobPlanningLineInvoice.TESTFIELD("Job No.",JobPlanningLine."Job No.");
      TempJobPlanningLineInvoice.TESTFIELD("Document No.",DocumentNo);
      TempJobPlanningLineInvoice.TESTFIELD("Document Type",TempJobPlanningLineInvoice."Document Type"::"Posted Invoice");
      TempJobPlanningLineInvoice.TESTFIELD("Transferred Date",WORKDATE);
      TempJobPlanningLineInvoice.TESTFIELD("Invoiced Date",WORKDATE);

      Assert.RecordCount(TempJobPlanningLineInvoice,1);
    END;

    LOCAL PROCEDURE Initialize@2();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      IF Initialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateVATPostingSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      Initialized := TRUE;
      COMMIT
    END;

    LOCAL PROCEDURE Plan@38(LineType@1001 : Option;ConsumableType@1002 : Option;VAR JobPlanningLine@1000 : Record 1003);
    VAR
      Job@1003 : Record 167;
      JobTask@1004 : Record 1001;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobPlanningLine(LineType,ConsumableType,JobTask,JobPlanningLine);
    END;

    LOCAL PROCEDURE TransferJobPlanningLine@22(VAR JobPlanningLine@1000 : Record 1003;Fraction@1001 : Decimal;Credit@1002 : Boolean;VAR SalesHeader@1003 : Record 36);
    VAR
      JobCreateInvoice@1005 : Codeunit 1002;
      QtyToTransfer@1004 : Decimal;
    BEGIN
      // Transfer Fraction of JobPlanningLine to a sales invoice

      WITH JobPlanningLine DO BEGIN
        QtyToTransfer := Fraction * Quantity;
        VALIDATE("Qty. to Transfer to Invoice",QtyToTransfer);
        MODIFY(TRUE);
        SETRECFILTER;
      END;
      COMMIT;
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,Credit);

      IF QtyToTransfer > 0 THEN
        GetSalesDocument(JobPlanningLine,SalesHeader."Document Type"::Invoice,SalesHeader)
      ELSE
        GetSalesDocument(JobPlanningLine,SalesHeader."Document Type"::"Credit Memo",SalesHeader)
    END;

    LOCAL PROCEDURE TransJobPlanningLineToSalesInvoice@72(VAR SalesHeader@1001 : Record 36;JobTask@1003 : Record 1001);
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      WITH JobPlanningLine DO BEGIN
        SETRANGE("Job No.",JobTask."Job No.");
        SETRANGE("Job Task No.",JobTask."Job Task No.");
        SETRANGE("Line Type","Line Type"::Contract);
        FINDLAST;
        TransferJobPlanningLine(JobPlanningLine,1,FALSE,SalesHeader);
      END;
    END;

    LOCAL PROCEDURE Invoice@21(VAR JobPlanningLine@1000 : Record 1003;Fraction@1001 : Decimal);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      TransferJobPlanningLine(JobPlanningLine,Fraction,FALSE,SalesHeader);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      WITH JobPlanningLine DO
        GET("Job No.","Job Task No.","Line No.")
    END;

    LOCAL PROCEDURE CreateJobTaskWithDimension@44(VAR JobTask@1005 : Record 1001) DimensionValueCode : Code[20];
    VAR
      Job@1001 : Record 167;
      DimensionCode@1003 : Code[20];
    BEGIN
      DimensionCode := CreateJobWithDimension(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      DimensionValueCode := UpdateDimensionOnJobTask(JobTask,DimensionCode);
    END;

    LOCAL PROCEDURE CreateAndPostJobJournalLine@67(VAR JobPlanningLine@1002 : Record 1003;JobTask@1001 : Record 1001);
    VAR
      JobJournalLine@1000 : Record 210;
    BEGIN
      LibraryJob.CreateJobJournalLine(JobJournalLine."Line Type"::" ",JobTask,JobJournalLine);
      JobJournalLine.VALIDATE("No.",JobPlanningLine."No.");
      JobJournalLine.VALIDATE(Quantity,JobPlanningLine.Quantity / LibraryRandom.RandIntInRange(2,4));
      JobJournalLine.MODIFY(TRUE);
      LibraryJob.PostJobJournal(JobJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostJobJournalLineWithTypeItem@95(VAR JobJournalLine@1001 : Record 210;JobTask@1000 : Record 1001);
    VAR
      Item@1002 : Record 27;
    BEGIN
      WITH JobJournalLine DO BEGIN
        LibraryJob.CreateJobJournalLine("Line Type"::" ",JobTask,JobJournalLine);
        VALIDATE(Type,Type::Item);
        VALIDATE("No.",LibraryInventory.CreateItem(Item));
        VALIDATE(Quantity,LibraryRandom.RandDec(10,2));
        VALIDATE("Unit Cost",LibraryRandom.RandDec(10,2));
        MODIFY(TRUE);
        LibraryJob.PostJobJournal(JobJournalLine);
      END;
    END;

    LOCAL PROCEDURE CreatePostJobJournalLineWithItem@75(JobTask@1001 : Record 1001;ItemNo@1002 : Code[20]);
    VAR
      JobJournalLine@1000 : Record 210;
    BEGIN
      CreateJobJournalLineWithItem(JobJournalLine,JobTask,ItemNo);
      LibraryJob.PostJobJournal(JobJournalLine);
    END;

    LOCAL PROCEDURE CreateJobJournalLineWithItem@71(VAR JobJournalLine@1003 : Record 210;JobTask@1001 : Record 1001;ItemNo@1002 : Code[20]);
    BEGIN
      LibraryJob.CreateJobJournalLine(JobJournalLine."Line Type"::Contract,JobTask,JobJournalLine);
      JobJournalLine.VALIDATE(Type,JobJournalLine.Type::Item);
      JobJournalLine.VALIDATE("No.",ItemNo);
      JobJournalLine.VALIDATE(Quantity,LibraryRandom.RandInt(100));
      JobJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesInvoiceFromJobPlanningLine@92(VAR SalesHeader@1003 : Record 36;VAR JobPlanningLine@1007 : Record 1003;ForeignCustomer@1005 : Boolean;PricesInclVAT@1002 : Boolean) : Code[20];
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
      Currency@1004 : Record 4;
    BEGIN
      IF ForeignCustomer THEN BEGIN
        LibraryERM.CreateCurrency(Currency);
        CreateCurrencyExchangeRate(Currency.Code,WORKDATE);
      END;
      CreateJob(Job,Currency.Code,PricesInclVAT);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobPlanningLine(LibraryJob.PlanningLineTypeContract,LibraryJob.ResourceType,JobTask,JobPlanningLine);
      CreateAndPostJobJournalLine(JobPlanningLine,JobTask);
      TransferJobPlanningLine(JobPlanningLine,1,FALSE,SalesHeader);
      EXIT(Job."No.");
    END;

    LOCAL PROCEDURE CreateSalesInvoiceWithVariousVATPostingGroups@205(VAR SalesHeader@1000 : Record 36;JobTask@1005 : Record 1001;VATProdPostingGroupArray@1002 : ARRAY [6] OF Record 324;VATBusPostingGroupCode@1003 : Code[10];CustomerNo@1006 : Code[20]);
    VAR
      SalesLine@1001 : Record 37;
      CurrentArrayNo@1007 : Integer;
    BEGIN
      COMMIT;
      JobTask.SETRECFILTER;
      REPORT.RUN(REPORT::"Job Create Sales Invoice",TRUE,FALSE,JobTask);

      SalesHeader.RESET;
      SalesHeader.SETRANGE("Bill-to Customer No.",CustomerNo);
      SalesHeader.SETRANGE("Posting Date",WORKDATE);
      SalesHeader.FINDFIRST;

      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      IF SalesLine.FINDSET THEN
        REPEAT
          IF CurrentArrayNo < ARRAYLEN(VATProdPostingGroupArray) THEN
            CurrentArrayNo += 1;
          SalesLine.VALIDATE("VAT Bus. Posting Group",VATBusPostingGroupCode);
          SalesLine.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroupArray[CurrentArrayNo].Code);
          SalesLine.MODIFY(TRUE);
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateJobWithDimension@49(VAR Job@1000 : Record 167) : Code[20];
    VAR
      GeneralLedgerSetup@1001 : Record 98;
      DefaultDimension@1002 : Record 352;
      DimensionValue@1003 : Record 349;
    BEGIN
      GeneralLedgerSetup.GET;
      CreateJob(Job,'',FALSE);
      LibraryDimension.CreateDimensionValue(DimensionValue,GeneralLedgerSetup."Shortcut Dimension 1 Code");
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Job,Job."No.",DimensionValue."Dimension Code",DimensionValue.Code);
      EXIT(DefaultDimension."Dimension Code");
    END;

    LOCAL PROCEDURE SetItemStandardCost@165(VAR Item@1000 : Record 27;StandardCost@1002 : Decimal);
    BEGIN
      WITH Item DO BEGIN
        GET("No.");
        VALIDATE("Costing Method","Costing Method"::Standard);
        VALIDATE("Standard Cost",StandardCost);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasure@184(Item@1000 : Record 27) : Code[10];
    VAR
      ItemUnitOfMeasure@1001 : Record 5404;
      UnitOfMeasure@1002 : Record 204;
    BEGIN
      UnitOfMeasure.SETFILTER(Code,'<>%1',Item."Base Unit of Measure");
      UnitOfMeasure.FINDFIRST;
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",UnitOfMeasure.Code,LibraryRandom.RandIntInRange(2,10));
      EXIT(ItemUnitOfMeasure.Code);
    END;

    LOCAL PROCEDURE PrepareJobForSalesInvoice@159(VAR JobTask@1000 : Record 1001;VAR Item@1001 : Record 27);
    VAR
      Job@1002 : Record 167;
    BEGIN
      Initialize;
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryInventory.CreateItem(Item);
      SetItemStandardCost(Item,LibraryRandom.RandDecInRange(1,10,2));
    END;

    LOCAL PROCEDURE ModifyDimension@100(VAR JobJournalLine@1000 : Record 210) : Code[20];
    VAR
      DimValue@1002 : Record 349;
    BEGIN
      LibraryDimension.CreateDimensionValue(DimValue,LibraryERM.GetGlobalDimensionCode(1));
      JobJournalLine.VALIDATE("Shortcut Dimension 1 Code",DimValue.Code);
      JobJournalLine.MODIFY;
      EXIT(DimValue.Code);
    END;

    LOCAL PROCEDURE Credit@36(JobPlanningLine@1000 : Record 1003;Fraction@1001 : Decimal);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      IF Fraction = 0 THEN
        EXIT;

      WITH JobPlanningLine DO BEGIN
        // we cannot credit from the same line.
        "Line No." += 1;
        "Usage Link" := FALSE;
        "Line Type" := LibraryJob.PlanningLineTypeContract;
        "Qty. Posted" := 0;
        VALIDATE(Quantity,-Fraction * Quantity);
        INSERT(TRUE);

        TransferJobPlanningLine(JobPlanningLine,1,TRUE,SalesHeader);
        LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      END
    END;

    LOCAL PROCEDURE CreateJob@62(VAR Job@1000 : Record 167;CurrencyCode@1001 : Code[10];PricesInclVAT@1003 : Boolean);
    VAR
      Customer@1002 : Record 18;
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("WIP Method",FindJobWipMethods);
      Job.VALIDATE("Starting Date",WORKDATE);
      Job.VALIDATE("Ending Date",WORKDATE);
      Customer.GET(Job."Bill-to Customer No.");
      SetCustomerCurrencyCodePricesInclVAT(Customer,CurrencyCode,PricesInclVAT);
      IF CurrencyCode <> '' THEN
        Job.VALIDATE("Bill-to Customer No.",Customer."No.");
      Job.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobWithCurrency@119(VAR Job@1000 : Record 167);
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      CreateCurrencyExchangeRate(Currency.Code,WORKDATE);
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Currency Code",Currency.Code);
      Job.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobWithVATPostingGroupsWithPlanningLines@192(VAR JobTask@1000 : Record 1001;GenBusPostingGroupCode@1004 : Code[10];GenProdPostingGroupCode@1003 : Code[10];CustomerNo@1008 : Code[20];ItemNo@1001 : Code[20];GLAccountNo@1002 : Code[20]);
    VAR
      Job@1006 : Record 167;
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Bill-to Customer No.",CustomerNo);
      Job.MODIFY;
      LibraryJob.CreateJobTask(Job,JobTask);
      CreateJobPlanningLine(JobTask,LibraryJob.ItemType,ItemNo,GenBusPostingGroupCode,GenProdPostingGroupCode);
      CreateJobPlanningLine(JobTask,LibraryJob.GLAccountType,GLAccountNo,GenBusPostingGroupCode,GenProdPostingGroupCode);
      CreateJobPlanningLine(JobTask,LibraryJob.ItemType,ItemNo,GenBusPostingGroupCode,GenProdPostingGroupCode);
      CreateJobPlanningLine(JobTask,LibraryJob.GLAccountType,GLAccountNo,GenBusPostingGroupCode,GenProdPostingGroupCode);
      CreateJobPlanningLine(JobTask,LibraryJob.GLAccountType,GLAccountNo,GenBusPostingGroupCode,GenProdPostingGroupCode);
      CreateJobPlanningLine(JobTask,LibraryJob.GLAccountType,GLAccountNo,GenBusPostingGroupCode,GenProdPostingGroupCode);
      CreateJobPlanningLine(JobTask,LibraryJob.GLAccountType,GLAccountNo,GenBusPostingGroupCode,GenProdPostingGroupCode);
      CreateJobPlanningLine(JobTask,LibraryJob.GLAccountType,GLAccountNo,GenBusPostingGroupCode,GenProdPostingGroupCode);
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@124(JobTask@1003 : Record 1001;OptionType@1001 : Option;CodeNo@1007 : Code[20];GenBusPostingGroupCode@1004 : Code[10];GenProdPostingGroupCode@1005 : Code[10]);
    VAR
      JobPlanningLine@1000 : Record 1003;
    BEGIN
      WITH JobPlanningLine DO BEGIN
        INIT;
        VALIDATE("Job No.",JobTask."Job No.");
        VALIDATE("Job Task No.",JobTask."Job Task No.");
        VALIDATE("Line No.",LibraryJob.GetNextLineNo(JobPlanningLine));
        INSERT(TRUE);
        VALIDATE("Planning Date",WORKDATE);
        VALIDATE("Line Type",LibraryJob.PlanningLineTypeBoth);
        VALIDATE(Type,OptionType);
        VALIDATE("No.",CodeNo);
        VALIDATE(Quantity,LibraryRandom.RandIntInRange(10,50));
        VALIDATE("Unit Cost",LibraryRandom.RandIntInRange(10,100));
        VALIDATE("Unit Price","Unit Cost" * (LibraryRandom.RandIntInRange(2,10) / 10));
        VALIDATE(Description,LibraryUtility.GenerateGUID);
        VALIDATE("Gen. Bus. Posting Group",GenBusPostingGroupCode);
        VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroupCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateCurrencyExchangeRate@151(CurrencyCode@1001 : Code[10];PostingDate@1002 : Date);
    VAR
      CurrencyExchangeRate@1000 : Record 330;
    BEGIN
      LibraryERM.CreateExchRate(CurrencyExchangeRate,CurrencyCode,PostingDate);
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",LibraryRandom.RandDec(1000,2));
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",LibraryRandom.RandDec(1000,2));
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerwithDimension@59() : Code[20];
    VAR
      Customer@1000 : Record 18;
      Dimension@1002 : Record 348;
      DimensionValue@1001 : Record 349;
      DefaultDimension@1003 : Record 352;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionCustomer(
        DefaultDimension,Customer."No.",DimensionValue."Dimension Code",DimensionValue.Code);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateJobPlanningLineWithDimension@66(VAR JobPlanningLine@1001 : Record 1003);
    VAR
      Job@1000 : Record 167;
      JobTask@1005 : Record 1001;
      DimensionValue@1002 : Record 349;
      DefaultDimension@1004 : Record 352;
      GeneralLedgerSetup@1006 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      CreateJobWithCustomer(Job);
      LibraryDimension.CreateDimensionValue(DimensionValue,GeneralLedgerSetup."Shortcut Dimension 1 Code");
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Job,Job."No.",DimensionValue."Dimension Code",DimensionValue.Code);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobPlanningLine(LibraryJob.PlanningLineTypeContract,LibraryJob.ResourceType,JobTask,JobPlanningLine);
    END;

    LOCAL PROCEDURE CreateJobPlanningLineWithResource@107(VAR JobTask@1000 : Record 1001);
    VAR
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      Plan(LibraryJob.PlanningLineTypeContract,LibraryJob.ResourceType,JobPlanningLine);
      JobTask.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
    END;

    LOCAL PROCEDURE CreateJobPlanningLineWithQtyToTransferToInvoice@118(VAR JobPlanningLine@1000 : Record 1003;JobTask@1001 : Record 1001;Quantity@1002 : Decimal;QtyToTransferToInvoice@1003 : Decimal);
    BEGIN
      LibraryJob.CreateJobPlanningLine(
        JobPlanningLine."Line Type"::Contract,LibraryJob.ResourceType,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE(Quantity,Quantity);
      JobPlanningLine.VALIDATE("Qty. to Transfer to Invoice",QtyToTransferToInvoice);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobWithCustomer@58(VAR Job@1000 : Record 167);
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Bill-to Customer No.",CreateCustomerwithDimension);
      Job.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDefDimForItem@77(VAR DefaultDimension@1000 : Record 352;ItemNo@1001 : Code[20]);
    VAR
      Dimension@1002 : Record 348;
      DimValue@1003 : Record 349;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Item,ItemNo,DimValue."Dimension Code",DimValue.Code);
    END;

    LOCAL PROCEDURE CreateJobTaskDim@78(VAR JobTaskDim@1000 : Record 1002;JobTask@1001 : Record 1001);
    VAR
      Dimension@1003 : Record 348;
      DimValue@1002 : Record 349;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimValue,Dimension.Code);
      InsertJobTaskDim(JobTaskDim,JobTask,DimValue);
    END;

    LOCAL PROCEDURE CreateJobTaskGlobalDim@76(VAR JobTaskDim@1000 : Record 1002;JobTask@1001 : Record 1001);
    VAR
      DimValue@1002 : Record 349;
    BEGIN
      LibraryDimension.CreateDimensionValue(DimValue,LibraryERM.GetGlobalDimensionCode(1));
      InsertJobTaskDim(JobTaskDim,JobTask,DimValue);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithJob@197(VAR PurchaseHeader@1001 : Record 38;VAR PurchaseLine@1000 : Record 39);
    VAR
      Item@1004 : Record 27;
      Job@1003 : Record 167;
      JobTask@1002 : Record 1001;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);

      CreatePurchaseOrderAssignJob(PurchaseHeader,PurchaseLine,LibraryPurchase.CreateVendorNo,Item."No.",JobTask);
    END;

    LOCAL PROCEDURE CreatePurchInvWithCurrencyAndJobTask@157(VAR PurchHeader@1000 : Record 38;CurrencyCode@1001 : Code[10];JobTask@1002 : Record 1001);
    VAR
      PurchLine@1003 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(
        PurchHeader,PurchHeader."Document Type"::Invoice,LibraryPurchase.CreateVendorNo);
      PurchHeader.VALIDATE("Currency Code",CurrencyCode);
      PurchHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchLine,PurchHeader,PurchLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithPurchSetup,LibraryRandom.RandInt(100));
      PurchLine.VALIDATE("Job No.",JobTask."Job No.");
      PurchLine.VALIDATE("Job Task No.",JobTask."Job Task No.");
      PurchLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGenPostingGroups@140(VAR GenProdPostingGroupCode@1001 : Code[10];VAR GenBusPostingGroupCode@1000 : Code[10]);
    VAR
      GenBusPostingGroup@1004 : Record 250;
      GenProdPostingGroup@1003 : Record 251;
      GeneralPostingSetup@1002 : Record 252;
    BEGIN
      LibraryERM.CreateGenBusPostingGroup(GenBusPostingGroup);
      LibraryERM.CreateGenProdPostingGroup(GenProdPostingGroup);
      LibraryERM.CreateGeneralPostingSetup(GeneralPostingSetup,GenBusPostingGroup.Code,GenProdPostingGroup.Code);
      GenBusPostingGroupCode := GenBusPostingGroup.Code;
      GenProdPostingGroupCode := GenProdPostingGroup.Code;
    END;

    LOCAL PROCEDURE CreateVATPostingGroupsArray@228(VAR VATBusPostingGroup@1000 : Record 323;VAR VATProdPostingGroupArray@1001 : ARRAY [6] OF Record 324;VAR VATPostingSetupArray@1002 : ARRAY [6] OF Record 325);
    VAR
      CurrentGroupNo@1004 : Integer;
      VATRate@1003 : Integer;
    BEGIN
      LibraryERM.CreateVATBusinessPostingGroup(VATBusPostingGroup);
      FOR CurrentGroupNo := 1 TO ARRAYLEN(VATProdPostingGroupArray) DO BEGIN
        LibraryERM.CreateVATProductPostingGroup(VATProdPostingGroupArray[CurrentGroupNo]);
        LibraryERM.CreateVATPostingSetup(
          VATPostingSetupArray[CurrentGroupNo],VATBusPostingGroup.Code,
          VATProdPostingGroupArray[CurrentGroupNo].Code);
        VATRate := LibraryRandom.RandIntInRange(5,50);
        IF (CurrentGroupNo = 3) OR (CurrentGroupNo = 4) THEN
          VATRate := 0;
        VATPostingSetupArray[CurrentGroupNo].VALIDATE("Sales VAT Account",LibraryERM.CreateGLAccountNo);
        VATPostingSetupArray[CurrentGroupNo].VALIDATE("Purchase VAT Account",LibraryERM.CreateGLAccountNo);
        VATPostingSetupArray[CurrentGroupNo].VALIDATE("VAT %",VATRate);
        VATPostingSetupArray[CurrentGroupNo].VALIDATE(
          "VAT Identifier",
          COPYSTR(
            LibraryERM.CreateRandomVATIdentifierAndGetCode,1,MAXSTRLEN(VATPostingSetupArray[CurrentGroupNo]."VAT Identifier")));
        VATPostingSetupArray[CurrentGroupNo].MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseOrderAssignJob@245(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;VendorNo@1004 : Code[20];ItemNo@1003 : Code[20];JobTask@1002 : Record 1001);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandInt(100));
      PurchaseLine.VALIDATE("Job No.",JobTask."Job No.");
      PurchaseLine.VALIDATE("Job Task No.",JobTask."Job Task No.");
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(500,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSimpleSalesInvoiceFromJobPlanningLine@152(VAR SalesHeader@1003 : Record 36;VAR JobPlanningLine@1007 : Record 1003;LineType@1002 : Option;QtyInvoiceFraction@1004 : Decimal) : Code[20];
    VAR
      Job@1000 : Record 167;
      JobTask@1001 : Record 1001;
    BEGIN
      CreateJob(Job,'',FALSE);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobPlanningLine(LineType,LibraryJob.ResourceType,JobTask,JobPlanningLine);
      TransferJobPlanningLine(JobPlanningLine,QtyInvoiceFraction,FALSE,SalesHeader);
      EXIT(Job."No.");
    END;

    LOCAL PROCEDURE PostPurchaseOrderWithJob@196(ToReceive@1005 : Boolean;ToInvoice@1006 : Boolean) : Code[20];
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      CreatePurchaseOrderWithJob(PurchaseHeader,PurchaseLine);
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,ToReceive,ToInvoice));
    END;

    LOCAL PROCEDURE SetupGLAccount@142(VATPostingSetup@1002 : Record 325;GenBusPostingGroupCode@1001 : Code[10];GenProdPostingGroupCode@1000 : Code[10]) : Code[20];
    VAR
      GLAccount@1004 : Record 15;
      GeneralPostingSetup@1003 : Record 252;
    BEGIN
      GeneralPostingSetup.GET(GenBusPostingGroupCode,GenProdPostingGroupCode);
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.UpdateGLAccountWithPostingSetup(
        GLAccount,GLAccount."Gen. Posting Type"::Purchase,GeneralPostingSetup,VATPostingSetup);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE SetupCustomerWithVATPostingGroup@175(VATBusPostingGroupCode@1001 : Code[10];GenProdPostingGroupCode@1000 : Code[10]) : Code[20];
    VAR
      GeneralPostingSetup@1002 : Record 252;
      Customer@1003 : Record 18;
    BEGIN
      Customer.GET(LibrarySales.CreateCustomerWithVATBusPostingGroup(VATBusPostingGroupCode));
      LibraryERM.CreateGeneralPostingSetup(GeneralPostingSetup,Customer."Gen. Bus. Posting Group",GenProdPostingGroupCode);
      WITH GeneralPostingSetup DO BEGIN
        VALIDATE("Sales Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("Purch. Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("Direct Cost Applied Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("Inventory Adjmt. Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("COGS Account",LibraryERM.CreateGLAccountNo);
        MODIFY(TRUE);
      END;
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE ReceivePurchOrderWithJobAndItemTracking@207(VAR PurchaseHeader@1004 : Record 38;ItemNo@1000 : Code[20];TrackingOption@1003 : Option) : Code[20];
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
      PurchaseLine@1005 : Record 39;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      CreatePurchaseOrderAssignJob(PurchaseHeader,PurchaseLine,LibraryPurchase.CreateVendorNo,ItemNo,JobTask);
      LibraryVariableStorage.Enqueue(TrackingOption);
      PurchaseLine.OpenItemTrackingLines;
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE));
    END;

    LOCAL PROCEDURE InsertJobTaskDim@103(VAR JobTaskDim@1000 : Record 1002;JobTask@1001 : Record 1001;DimValue@1005 : Record 349);
    BEGIN
      WITH JobTaskDim DO BEGIN
        INIT;
        VALIDATE("Job No.",JobTask."Job No.");
        VALIDATE("Job Task No.",JobTask."Job Task No.");
        VALIDATE("Dimension Code",DimValue."Dimension Code");
        VALIDATE("Dimension Value Code",DimValue.Code);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE FindItemLedgerEntry@222(ItemNo@1003 : Code[20];EntryType@1000 : Option;IsPositive@1001 : Boolean) : Integer;
    VAR
      ItemLedgerEntry@1002 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Entry Type",EntryType);
        SETRANGE(Positive,IsPositive);
        FINDFIRST;

        EXIT("Entry No.");
      END;
    END;

    LOCAL PROCEDURE FindJobWipMethods@25() : Code[20];
    VAR
      JobWIPMethod@1000 : Record 1006;
    BEGIN
      JobWIPMethod.NEXT(LibraryRandom.RandInt(JobWIPMethod.COUNT));
      EXIT(JobWIPMethod.Code);
    END;

    LOCAL PROCEDURE FindSalesLine@63(VAR SalesLine@1004 : Record 37;DocumentType@1001 : Option;DocumentNo@1000 : Code[20]);
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindJobLedgerEntry@73(VAR JobLedgerEntry@1000 : Record 169;JobTask@1001 : Record 1001);
    BEGIN
      JobLedgerEntry.SETRANGE("Job No.",JobTask."Job No.");
      JobLedgerEntry.SETRANGE("Job Task No.",JobTask."Job Task No.");
      JobLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindGLEntry@138(VAR GLEntry@1002 : Record 17;DocumentNo@1000 : Code[20];DocumentType@1001 : Option);
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE GetILEAmountSign@231(ItemLedgerEntry@1000 : Record 32) : Integer;
    BEGIN
      IF ItemLedgerEntry.Positive THEN
        EXIT(1);

      EXIT(-1);
    END;

    LOCAL PROCEDURE GetDimensionSetIdFromSalesLine@50(SalesHeader@1001 : Record 36) : Integer;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        FINDFIRST;
        EXIT("Dimension Set ID");
      END;
    END;

    LOCAL PROCEDURE SalesDocumentFromJobPlanning@43(DocumentType@1000 : Option;SalesDocumentType@1001 : Boolean);
    VAR
      JobTask@1004 : Record 1001;
      JobPlanningLine@1011 : Record 1003;
      JobCreateInvoice@1002 : Codeunit 1002;
      DimensionValueCode@1003 : Code[20];
    BEGIN
      // Setup: Create Job Planning Line with Dimesion.
      Initialize;
      DimensionValueCode := CreateJobTaskWithDimension(JobTask);
      LibraryJob.CreateJobPlanningLine(LibraryJob.PlanningLineTypeContract,LibraryJob.ResourceType,JobTask,JobPlanningLine);

      // Exercise: Create sales Document from Job Planning Line.
      COMMIT;
      JobCreateInvoice.CreateSalesInvoice(JobPlanningLine,SalesDocumentType);

      // Verify: Verifying Dimension Value Code on Dimension Set Entry equal to Dimension Value Code of Job Task.
      VerifyDimensionSetEntry(JobPlanningLine,DimensionValueCode,DocumentType);
    END;

    LOCAL PROCEDURE SetCustomerCurrencyCodePricesInclVAT@109(VAR Customer@1000 : Record 18;CurrencyCode@1001 : Code[10];PricesInclVAT@1002 : Boolean);
    BEGIN
      WITH Customer DO BEGIN
        VALIDATE("Currency Code",CurrencyCode);
        VALIDATE("Prices Including VAT",PricesInclVAT);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateDimensionOnJobTask@51(JobTask@1001 : Record 1001;DimensionCode@1002 : Code[20]) : Code[20];
    VAR
      JobTaskDimension@1000 : Record 1002;
      DimensionValue@1003 : Record 349;
    BEGIN
      WITH JobTaskDimension DO BEGIN
        GET(JobTask."Job No.",JobTask."Job Task No.",DimensionCode);
        LibraryDimension.CreateDimensionValue(DimensionValue,DimensionCode);
        VALIDATE("Dimension Value Code",DimensionValue.Code);
        MODIFY(TRUE);
        EXIT("Dimension Value Code");
      END;
    END;

    LOCAL PROCEDURE UpdateJobPlanningLine@102(VAR JobPlanningLine@1000 : Record 1003;ItemNo@1001 : Code[20]);
    BEGIN
      WITH JobPlanningLine DO BEGIN
        VALIDATE("No.",ItemNo);
        VALIDATE(Quantity,LibraryRandom.RandInt(5));
        VALIDATE("Qty. to Transfer to Journal",Quantity);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE ChangePostingDateWithLaterDateOnPurchHeader@199(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20]);
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.SETRANGE("No.",ItemNo);
      PurchaseLine.FINDFIRST;
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);
      PurchaseHeader.VALIDATE("Posting Date",LibraryRandom.RandDateFrom(WORKDATE,5));
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindPurchaseReceiptLine@203(VAR PurchRcptLine@1000 : Record 121;PostedRcptNo@1001 : Code[20]);
    BEGIN
      PurchRcptLine.SETRANGE("Document No.",PostedRcptNo);
      PurchRcptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesInvoiceLine@172(VAR SalesInvoiceLine@1000 : Record 113;DocumentNo@1001 : Code[20]);
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateJobJnlLine@111(VAR JobJournalLine@1000 : Record 210) : Decimal;
    VAR
      Item@1003 : Record 27;
      Job@1004 : Record 167;
      JobTask@1005 : Record 1001;
      JobItemPrice@1001 : Record 1013;
    BEGIN
      LibraryInventory.CreateItemWithUnitPriceAndUnitCost(Item,
        LibraryRandom.RandDec(100,2),
        LibraryRandom.RandDec(100,2));
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobItemPrice(JobItemPrice,Job."No.",JobTask."Job Task No.",Item."No.",'','',Item."Base Unit of Measure");
      JobItemPrice.VALIDATE("Unit Cost Factor",LibraryRandom.RandDec(2,2));
      JobItemPrice.MODIFY(TRUE);
      WITH JobJournalLine DO BEGIN
        LibraryJob.CreateJobJournalLine("Line Type"::"Both Schedule and Contract",JobTask,JobJournalLine);
        VALIDATE(Type,Type::Item);
        VALIDATE("No.",Item."No.");
        MODIFY(TRUE);
      END;
      EXIT(JobItemPrice."Unit Cost Factor" * Item."Unit Cost");
    END;

    LOCAL PROCEDURE UpdateDesriptionInSalesLine@114(DocumentNo@1002 : Code[20];DocumentType@1003 : Option) : Text[50];
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Document Type",DocumentType);
        FINDFIRST;
        VALIDATE(Description,LibraryUtility.GenerateGUID);
        MODIFY(TRUE);
        EXIT(Description);
      END;
    END;

    LOCAL PROCEDURE VerifyLineTypeInJobLedgerEntry@57(DocumentNo@1001 : Code[20];JobNo@1000 : Code[20]);
    VAR
      JobLedgerEntry@1002 : Record 169;
    BEGIN
      JobLedgerEntry.SETRANGE("Document No.",DocumentNo);
      JobLedgerEntry.SETRANGE("Job No.",JobNo);
      JobLedgerEntry.FINDFIRST;
      JobLedgerEntry.TESTFIELD("Line Type",JobLedgerEntry."Line Type"::Contract);
    END;

    LOCAL PROCEDURE VerifyDimensionSetEntry@101(JobPlanningLine@1000 : Record 1003;DimensionValueCode@1001 : Code[20];DocumentType@1002 : Option);
    VAR
      SalesHeader@1003 : Record 36;
      DimensionSetEntry@1004 : Record 480;
    BEGIN
      GetSalesDocument(JobPlanningLine,DocumentType,SalesHeader);
      WITH DimensionSetEntry DO BEGIN
        SETRANGE("Dimension Set ID",GetDimensionSetIdFromSalesLine(SalesHeader));
        FINDFIRST;
        Assert.AreEqual("Dimension Value Code",DimensionValueCode,'Dimension value mismatch');
      END;
    END;

    LOCAL PROCEDURE VerifyDimensionOnJobJournalLine@93(JobNo@1001 : Code[20];JobTaskNo@1002 : Code[20];DimensionValueCode@1003 : Code[20]);
    VAR
      JobJournalLine@1000 : Record 210;
    BEGIN
      WITH JobJournalLine DO BEGIN
        SETRANGE("Job No.",JobNo);
        SETRANGE("Job Task No.",JobTaskNo);
        FINDFIRST;
        TESTFIELD("Shortcut Dimension 1 Code",DimensionValueCode);
      END;
    END;

    LOCAL PROCEDURE VerifySalesInvoice@6(JobPlanningLine@1000 : Record 1003;SalesHeader@1001 : Record 36);
    VAR
      Job@1005 : Record 167;
      SalesLine@1002 : Record 37;
    BEGIN
      // Verify JobPlanningLine has a corresponding sales invoice

      Job.GET(JobPlanningLine."Job No.");
      SalesHeader.TESTFIELD("Sell-to Customer No.",Job."Bill-to Customer No.");
      SalesHeader.TESTFIELD("Bill-to Customer No.",Job."Bill-to Customer No.");

      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        FINDFIRST;
        TESTFIELD(Type,LibraryJob.Job2SalesConsumableType(JobPlanningLine.Type));
        TESTFIELD("No.",JobPlanningLine."No.");
        TESTFIELD(Quantity,JobPlanningLine."Qty. Transferred to Invoice");
        TESTFIELD("Unit Price",JobPlanningLine."Unit Price")
      END
    END;

    LOCAL PROCEDURE GetSalesDocument@24(JobPlanningLine@1001 : Record 1003;DocumentType@1004 : Option;VAR SalesHeader@1000 : Record 36);
    VAR
      JobPlanningLineInvoice@1003 : Record 1022;
    BEGIN
      WITH JobPlanningLineInvoice DO BEGIN
        SETRANGE("Job No.",JobPlanningLine."Job No.");
        SETRANGE("Job Task No.",JobPlanningLine."Job Task No.");
        SETRANGE("Job Planning Line No.",JobPlanningLine."Line No.");
        IF DocumentType = SalesHeader."Document Type"::Invoice THEN
          SETRANGE("Document Type","Document Type"::Invoice)
        ELSE
          SETRANGE("Document Type","Document Type"::"Credit Memo");
        FINDFIRST;
        SalesHeader.GET(DocumentType,"Document No.")
      END
    END;

    LOCAL PROCEDURE GetCombinedDimSetID@82(JobTaskDim@1000 : Record 1002;DefaultDimension@1001 : Record 352) : Integer;
    VAR
      TempDimSetEntry@1002 : TEMPORARY Record 480;
      DimValue@1003 : Record 349;
      DimMgt@1004 : Codeunit 408;
    BEGIN
      DimValue.GET(JobTaskDim."Dimension Code",JobTaskDim."Dimension Value Code");
      InsertDimSetEntry(TempDimSetEntry,DimValue);
      DimValue.GET(DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
      InsertDimSetEntry(TempDimSetEntry,DimValue);
      EXIT(DimMgt.GetDimensionSetID(TempDimSetEntry))
    END;

    LOCAL PROCEDURE InsertDimSetEntry@84(VAR DimSetEntry@1000 : Record 480;DimValue@1001 : Record 349);
    BEGIN
      WITH DimSetEntry DO BEGIN
        "Dimension Code" := DimValue."Dimension Code";
        "Dimension Value Code" := DimValue.Code;
        "Dimension Value ID" := DimValue."Dimension Value ID";
        INSERT;
      END;
    END;

    LOCAL PROCEDURE VerifyGLEntry@94(DocumentNo@1000 : Code[20];JobNo@1001 : Code[20];Amount@1003 : Decimal);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Job No.",JobNo);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyCombinedDimensionSetIDOnSalesLine@61(SalesHeader@1000 : Record 36);
    VAR
      SalesLine@1001 : Record 37;
      DimensionManagement@1004 : Codeunit 408;
      DimensionSetIDArr@1002 : ARRAY [10] OF Integer;
      DimensionSetID@1003 : Integer;
    BEGIN
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.");
      DimensionSetIDArr[1] := SalesHeader."Dimension Set ID";
      DimensionSetIDArr[2] := SalesLine."Dimension Set ID";
      DimensionSetID :=
        DimensionManagement.GetCombinedDimensionSetID(
          DimensionSetIDArr,SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
      SalesLine.TESTFIELD("Dimension Set ID",DimensionSetID);
    END;

    LOCAL PROCEDURE VerifyDimensionOnJobLedgerEntry@89(JobTask@1000 : Record 1001;DimensionValueCode@1001 : Code[20];DimensionSetID@1003 : Integer);
    VAR
      JobLedgerEntry@1002 : Record 169;
    BEGIN
      FindJobLedgerEntry(JobLedgerEntry,JobTask);
      JobLedgerEntry.TESTFIELD("Global Dimension 1 Code",DimensionValueCode);
      JobLedgerEntry.TESTFIELD("Dimension Set ID",DimensionSetID);
    END;

    LOCAL PROCEDURE VerifyDimensionOnJobWIPEntry@81(JobNo@1001 : Code[20];DimensionValueCode@1003 : Code[20];DimensionSetID@1000 : Integer);
    VAR
      JobWIPEntry@1002 : Record 1004;
    BEGIN
      WITH JobWIPEntry DO BEGIN
        SETRANGE("Job No.",JobNo);
        FINDFIRST;
        TESTFIELD("Global Dimension 1 Code",DimensionValueCode);
        TESTFIELD("Dimension Set ID",DimensionSetID);
      END;
    END;

    LOCAL PROCEDURE VerifyJobLedgerEntry@128(DocumentNo@1000 : Code[20];JobNo@1001 : Code[20];Amount@1003 : Decimal;FieldNo@1004 : Integer);
    VAR
      JobLedgerEntry@1002 : Record 169;
      RecRef@1005 : RecordRef;
      FieldRef@1006 : FieldRef;
    BEGIN
      JobLedgerEntry.SETRANGE("Document No.",DocumentNo);
      JobLedgerEntry.SETRANGE("Job No.",JobNo);
      JobLedgerEntry.FINDLAST;
      RecRef.GETTABLE(JobLedgerEntry);
      FieldRef := RecRef.FIELD(FieldNo);
      Assert.AreEqual(FieldRef.VALUE,Amount,STRSUBSTNO(JobLedgerEntryFieldErr,FieldRef.NAME));
    END;

    LOCAL PROCEDURE VerifyPostedSalesInvoice@168(DocumentNo@1000 : Code[20];ItemNo@1001 : Code[20]);
    VAR
      SalesInvoiceLine@1002 : Record 113;
    BEGIN
      FindSalesInvoiceLine(SalesInvoiceLine,DocumentNo);
      Assert.AreEqual(SalesInvoiceLine.Type::Item,SalesInvoiceLine.Type,
        STRSUBSTNO(WrongItemInfoErr,SalesInvoiceLine.FIELDCAPTION(Type)));
      Assert.AreEqual(ItemNo,SalesInvoiceLine."No.",
        STRSUBSTNO(WrongItemInfoErr,SalesInvoiceLine.FIELDCAPTION("No.")));
    END;

    LOCAL PROCEDURE VerifyDescriptionInPostedSalesInvoice@106(DocumentNo@1001 : Code[20];NewDescription@1002 : Text[50]);
    VAR
      SalesInvoiceLine@1000 : Record 113;
    BEGIN
      FindSalesInvoiceLine(SalesInvoiceLine,DocumentNo);
      Assert.AreEqual(NewDescription,SalesInvoiceLine.Description,WrongDescriptionInPostedSalesInvoiceErr);
    END;

    LOCAL PROCEDURE VerifySalesLineWithTextExists@116(JobPlanningLine@1000 : Record 1003);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      GetSalesDocument(JobPlanningLine,SalesHeader."Document Type"::Invoice,SalesHeader);
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::" ");
      Assert.RecordIsNotEmpty(SalesLine);
    END;

    LOCAL PROCEDURE VerifyDocDateOnJobLedgEntry@115(JobNo@1001 : Code[20];JobTaskNo@1000 : Code[20];DocNo@1003 : Code[20];ExpectedDocDate@1004 : Date);
    VAR
      JobTask@1005 : Record 1001;
      JobLedgEntry@1002 : Record 169;
    BEGIN
      JobTask.GET(JobNo,JobTaskNo);
      JobLedgEntry.SETRANGE("Document No.",DocNo);
      FindJobLedgerEntry(JobLedgEntry,JobTask);
      JobLedgEntry.TESTFIELD("Document Date",ExpectedDocDate);
    END;

    LOCAL PROCEDURE VerifyJobCurrencyFactorOnPurchLine@160(PurchHeader@1000 : Record 38);
    VAR
      PurchLine@1001 : Record 39;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.FINDFIRST;
      PurchLine.TESTFIELD("Job Currency Factor",PurchHeader."Currency Factor");
    END;

    LOCAL PROCEDURE VerifyJobLedgerEntriesWithGLEntries@213(JobTask@1002 : Record 1001;DocumentNo@1003 : Code[20];GLAccountNo@1005 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
      JobLedgerEntry@1001 : Record 169;
    BEGIN
      JobLedgerEntry.SETRANGE("Document No.",DocumentNo);
      JobLedgerEntry.SETRANGE(Type,JobLedgerEntry.Type::"G/L Account");
      FindJobLedgerEntry(JobLedgerEntry,JobTask);
      FindGLEntry(GLEntry,DocumentNo,GLEntry."Document Type"::Invoice);
      GLEntry.SETFILTER("G/L Account No.",GLAccountNo);
      GLEntry.FINDSET;
      REPEAT
        WITH JobLedgerEntry DO BEGIN
          SETRANGE("Ledger Entry No.",GLEntry."Entry No.");
          SETRANGE("Ledger Entry Type","Ledger Entry Type"::"G/L Account");
          FINDFIRST;
          CALCSUMS("Line Amount (LCY)");
          TESTFIELD("Line Amount (LCY)",GLEntry.Amount);
        END;
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifySalesLineCountLinkedToJob@133(JobNo@1000 : Code[20];JobTaskNo@1003 : Code[20];ExpectedCount@1001 : Integer);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
      SalesLine.SETRANGE("Job No.",JobNo);
      SalesLine.SETRANGE("Job Task No.",JobTaskNo);
      Assert.RecordCount(SalesLine,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyInvoiceQuantityInJobPlanningLine@121(JobPlanningLine@1000 : Record 1003;QtyTransferredToInvoice@1001 : Decimal;QtyToTransferToInvoice@1002 : Decimal);
    BEGIN
      JobPlanningLine.FIND;
      JobPlanningLine.CALCFIELDS("Qty. Transferred to Invoice");
      JobPlanningLine.TESTFIELD("Qty. Transferred to Invoice",QtyTransferredToInvoice);
      JobPlanningLine.TESTFIELD("Qty. to Transfer to Invoice",QtyToTransferToInvoice);
    END;

    LOCAL PROCEDURE VerifyItemLedgEntriesInvoiced@206(ItemNo@1000 : Code[20];ExpectedActualCost@1002 : Decimal);
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDSET;
        REPEAT
          CALCFIELDS("Cost Amount (Actual)","Cost Amount (Expected)");
          TESTFIELD("Completely Invoiced",TRUE);
          TESTFIELD("Invoiced Quantity",Quantity);
          TESTFIELD("Cost Amount (Expected)",0);
          TESTFIELD("Cost Amount (Actual)",ExpectedActualCost * GetILEAmountSign(ItemLedgerEntry));
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyAppliedEntryToAdjustFalseInItemLedgEntries@170(ItemNo@1000 : Code[20]);
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDSET;
        REPEAT
          TESTFIELD("Applied Entry to Adjust",TRUE);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyItemRegisterExistsFromNegativeToPurchItemLedgEntry@217(ItemNo@1000 : Code[20]);
    VAR
      DummyItemRegister@1001 : Record 46;
      ItemLedgerEntry@1002 : Record 32;
    BEGIN
      DummyItemRegister.SETRANGE(
        "From Entry No.",FindItemLedgerEntry(ItemNo,ItemLedgerEntry."Entry Type"::"Negative Adjmt.",TRUE));
      DummyItemRegister.SETRANGE(
        "To Entry No.",FindItemLedgerEntry(ItemNo,ItemLedgerEntry."Entry Type"::Purchase,FALSE));
      Assert.RecordIsNotEmpty(DummyItemRegister);
    END;

    LOCAL PROCEDURE VerifyItemRegisterWithCostAmtActualValueEntriesExists@223(ItemNo@1000 : Code[20]);
    VAR
      ItemRegister@1003 : Record 46;
      ValueEntry@1004 : Record 5802;
      FromEntryNo@1001 : Integer;
      ToEntryNo@1002 : Integer;
    BEGIN
      ValueEntry.SETRANGE("Item No.",ItemNo);
      ValueEntry.SETFILTER("Cost Amount (Actual)",'<>%1',0);
      ValueEntry.FINDFIRST;
      FromEntryNo := ValueEntry."Entry No.";
      ValueEntry.FINDLAST;
      ToEntryNo := ValueEntry."Entry No.";

      ItemRegister.SETRANGE("From Value Entry No.",FromEntryNo);
      ItemRegister.SETRANGE("To Value Entry No.",ToEntryNo);
      ItemRegister.FINDFIRST;
      ItemRegister.TESTFIELD("From Entry No.",0);
      ItemRegister.TESTFIELD("To Entry No.",0);
    END;

    [RequestPageHandler]
    PROCEDURE JobCalculateWIPRequestPageHandler@90(VAR JobCalculateWIP@1000 : TestRequestPage 1086);
    BEGIN
      JobCalculateWIP.PostingDate.SETVALUE(WORKDATE);
      JobCalculateWIP.DocumentNo.SETVALUE(LibraryUTUtility.GetNewCode);
      JobCalculateWIP.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE TransferToInvoiceHandler@1(VAR RequestPage@1000 : TestRequestPage 1094);
    BEGIN
      RequestPage.OK.INVOKE
    END;

    [RequestPageHandler]
    PROCEDURE TransferToCreditMemoHandler@41(VAR JobTransferToCreditMemo@1000 : TestRequestPage 1092);
    BEGIN
      JobTransferToCreditMemo.OK.INVOKE
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@4(Msg@1000 : Text[1024]);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@27(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerFalseReply@147(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    LOCAL PROCEDURE CreateJobTaskWithDimensions@79(VAR JobTask@1000 : Record 1001);
    VAR
      Dimension@1001 : Record 348;
      DimensionValue@1002 : Record 349;
      GlobalDimensionValue@1003 : Record 349;
      JobTaskDimension@1005 : Record 1002;
      Job@1006 : Record 167;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      InsertJobTaskDim(JobTaskDimension,JobTask,DimensionValue);
      LibraryDimension.FindDimensionValue(GlobalDimensionValue,LibraryERM.GetGlobalDimensionCode(1));
      JobTask.VALIDATE("Global Dimension 1 Code",GlobalDimensionValue.Code);
      LibraryDimension.FindDimensionValue(GlobalDimensionValue,LibraryERM.GetGlobalDimensionCode(2));
      JobTask.VALIDATE("Global Dimension 2 Code",GlobalDimensionValue.Code);
      JobTask.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateJobPlanningLineWithItem@122(VAR JobPlanningLine@1000 : Record 1003);
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobPlanningLine(LibraryJob.PlanningLineTypeSchedule,LibraryJob.ItemType,JobTask,JobPlanningLine);
      AddDiffUOMItemToJobPlanningLine(JobPlanningLine);
    END;

    LOCAL PROCEDURE CreateJobJnlLineFromJobPlanningLine@126(VAR JobJournalLine@1000 : Record 210;JobPlanningLine@1006 : Record 1003);
    VAR
      JobJournalTemplate@1001 : Record 209;
      JobJournalBatch@1002 : Record 237;
      JobTransferLine@1003 : Codeunit 1004;
      JobJournalTemplateName@1004 : Code[10];
      JobJournalBatchName@1005 : Code[10];
    BEGIN
      JobJournalTemplateName := LibraryJob.GetJobJournalTemplate(JobJournalTemplate);
      JobJournalBatchName := LibraryJob.CreateJobJournalBatch(JobJournalTemplateName,JobJournalBatch);
      JobTransferLine.FromPlanningLineToJnlLine(JobPlanningLine,0D,JobJournalTemplateName,JobJournalBatchName,JobJournalLine);
    END;

    LOCAL PROCEDURE CreateJobPlanningLineWithTypeText@117(VAR JobPlanningLine@1000 : Record 1003;LineType@1001 : Option;JobTask@1002 : Record 1001);
    VAR
      StandardText@1003 : Record 7;
    BEGIN
      StandardText.FINDFIRST;
      LibraryJob.CreateJobPlanningLine(LineType,JobPlanningLine.Type::Resource,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE(Type,JobPlanningLine.Type::Text);
      JobPlanningLine.VALIDATE("No.",StandardText.Code);
      JobPlanningLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AddDiffUOMItemToJobPlanningLine@130(VAR JobPlanningLine@1000 : Record 1003);
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      WITH JobPlanningLine DO BEGIN
        VALIDATE("No.",Item."No.");
        VALIDATE("Unit of Measure Code",CreateItemUnitOfMeasure(Item));
        VALIDATE(Quantity,LibraryRandom.RandInt(100));
        VALIDATE("Qty. to Transfer to Journal",Quantity);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE FindJobLedgerEntryByJob@132(VAR JobLedgerEntry@1000 : Record 169;JobNo@1001 : Code[20];JobPlanningLineNo@1002 : Code[20]);
    BEGIN
      JobLedgerEntry.SETRANGE("Job No.",JobNo);
      JobLedgerEntry.SETRANGE("No.",JobPlanningLineNo);
      JobLedgerEntry.FINDLAST;
    END;

    LOCAL PROCEDURE CreateJobJournalLineWithDim@91(VAR JobJnlLine@1000 : Record 210);
    VAR
      Job@1001 : Record 167;
      JobTask@1002 : Record 1001;
      Dimension@1003 : Record 348;
      DimensionValue@1004 : Record 349;
      DimensionSetID@1005 : Integer;
    BEGIN
      LibraryJob.CreateJob(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobJournalLineForType(LibraryJob.UsageLineTypeBoth,LibraryJob.GLAccountType,JobTask,JobJnlLine);
      JobJnlLine.VALIDATE("No.",LibraryJob.FindConsumable(LibraryJob.GLAccountType));
      JobJnlLine.VALIDATE(Quantity,LibraryRandom.RandInt(100));
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      DimensionSetID := LibraryDimension.CreateDimSet(JobJnlLine."Dimension Set ID",Dimension.Code,DimensionValue.Code);
      JobJnlLine.VALIDATE("Dimension Set ID",DimensionSetID);
      JobJnlLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindDimensionSetEntryByCode@88(VAR DimensionSetEntry@1000 : Record 480;DimensionSetID@1001 : Integer;DimensionCode@1002 : Code[20]);
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Code",DimensionCode);
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,DimensionSetID);
    END;

    LOCAL PROCEDURE FindSalesLineByDocumentType@98(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindJobPlanningLine@99(VAR JobPlanningLine@1000 : Record 1003;JobNo@1003 : Code[20];JobTaskNo@1001 : Code[20]);
    BEGIN
      WITH JobPlanningLine DO BEGIN
        SETRANGE("Job No.",JobNo);
        SETRANGE("Job Task No.",JobTaskNo);
        SETRANGE(Type,LibraryJob.GLAccountType);
        SETRANGE("Line Type",LibraryJob.PlanningLineTypeContract);
        FINDLAST;
      END;
    END;

    LOCAL PROCEDURE FindPurchLine@127(VAR PurchLine@1000 : Record 39;DocType@1001 : Option;DocNo@1002 : Code[20]);
    BEGIN
      PurchLine.SETRANGE("Document Type",DocType);
      PurchLine.SETRANGE("Document No.",DocNo);
      PurchLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreatePostJobJnlLineWithDimJobPlanningLine@96(VAR JobPlanningLine@1002 : Record 1003;VAR DimensionCode@1003 : Code[20];VAR JobJournalLineDimSetID@1000 : Integer);
    VAR
      DimensionSetEntry@1005 : Record 480;
      JobJournalLine@1001 : Record 210;
      JobPostingGroup@1004 : Record 208;
    BEGIN
      CreateJobJournalLineWithDim(JobJournalLine);
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,JobJournalLine."Dimension Set ID");
      DimensionCode := DimensionSetEntry."Dimension Code";
      JobJournalLineDimSetID := JobJournalLine."Dimension Set ID";
      JobPostingGroup.FINDLAST;
      JobPostingGroup.VALIDATE("G/L Expense Acc. (Contract)",LibraryJob.FindConsumable(LibraryJob.GLAccountType));
      JobPostingGroup.MODIFY(TRUE);
      LibraryJob.PostJobJournal(JobJournalLine);
      FindJobPlanningLine(JobPlanningLine,JobJournalLine."Job No.",JobJournalLine."Job Task No.");
    END;

    [RequestPageHandler]
    PROCEDURE CreateSalesInvoiceReportHandler@143(VAR JobCreateSalesInvoice@1000 : TestRequestPage 1093);
    BEGIN
      JobCreateSalesInvoice.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedPurchaseDocumentLinesPageHandler@129(VAR PostedPurchaseDocumentLines@1002 : TestPage 5855);
    VAR
      DocumentType@1001 : 'Posted Receipts,Posted Invoices,Posted Return Shipments,Posted Cr. Memos';
    BEGIN
      PostedPurchaseDocumentLines.PostedReceiptsBtn.SETVALUE(FORMAT(DocumentType::"Posted Invoices"));
      PostedPurchaseDocumentLines.PostedRcpts.FILTER.SETFILTER("Document No.",LibraryVariableStorage.DequeueText);
      PostedPurchaseDocumentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@136(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      CASE LibraryVariableStorage.DequeueInteger OF
        TrackingOption::"Assign Lot No.":
          ItemTrackingLines."Assign Lot No.".INVOKE;
        TrackingOption::"Assign Serial No.":
          ItemTrackingLines."Assign Serial No.".INVOKE;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreatePageHandler@153(VAR EnterQuantitytoCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantitytoCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE JobInvoicesDetailsVisibleModalPageHandler@296(VAR JobInvoices@1000 : TestPage 1029);
    BEGIN
      Assert.IsTrue(JobInvoices."Transferred Date".VISIBLE,JobInvoices."Transferred Date".CAPTION);
      Assert.IsTrue(JobInvoices."Invoiced Date".VISIBLE,JobInvoices."Invoiced Date".CAPTION);
      Assert.IsTrue(JobInvoices."Job Ledger Entry No.".VISIBLE,JobInvoices."Job Ledger Entry No.".CAPTION);
    END;

    BEGIN
    {
      // [FEATURE] [Job]

      1. Create Job and Job Planning Line and Create Job Journal with Line Type Blank and Create - Post Sales Invoice and Verify GL Entry.
      2. Create Job and Job Planning Line and Create Job Journal with Line Type Blank and Create - Post Sales Invoice and Verify Line Type Contract in Job Ledger Entry.
      3. Verify dimension on Sales Invoice line that copied from Job Task.
      4. Verify dimension on Sales Credit Memo line that copied from Job Task.
      5. Verify dimension value on Job Journal Line when Job Journal line created with Job and Job Task.
      6. Verify dimension value on Job Ledger Entry when Job Journal line posted with Job and Job Task.
      7. Verify dimension on Job WIP Entry after running the report Job calculate WIP.
      8. Verify Item dimension on Job journal line when Job jounal line created from Job Planning line.
      9. Verify that Sales Invoice for Job Planning Line can be posted if Standard Cost is changed after creation of Job Planning Line.
      10.Verify that Sales Invoice for Job Planning Line can be posted with Unit of Measure different from Base Unit of Measure.
      11. Create Job and Job Planning Line and Create Job Journal with Line Type Contract and Manually set Dimension and Create Sales Invoice and Verify Dimensions.
      12. Test Post General Journal Line from Job Journal Line with Dimensions Set.
      13. Verify that Quantit in Job Job Ledger Entry correct after post Job Journal Line from Job Planning Line
      14. Test Create Job Sales Line from Job Planning Line with changed Dimension Set.

      TFS_TS_ID = 299217
      --------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      Test TFS ID
      --------------------------------------------------------------------------------------------------------------------
      SalesInvoiceFromJobPalnningAndVerifyGLEntry, SalesInvoiceFromJobPalnningAndVerifyLineTypeInJobLedger    299217
      SalesInvoiceDimensionFromJobPlanningLine                                                                355209

      BUG_ID = 66309
      --------------------------------------------------------------------------------------------------------------------
      Test Function Name
      --------------------------------------------------------------------------------------------------------------------
      SalesInvoiceFromJobPalnningWithInvoiceCurrencyCode

      BUG_ID = 54442
      --------------------------------------------------------------------------------------------------------------------
      Test Function Name
      --------------------------------------------------------------------------------------------------------------------
      CheckDimensionOnSalesInvoiceFromJobPlanningLine,CheckDimensionOnSalesCreditMemoFromJobPlanningLine

      BUG_ID = 56126
      --------------------------------------------------------------------------------------------------------------------
      Test Function Name
      --------------------------------------------------------------------------------------------------------------------
      SalesInvoiceFromJobPlanningAndVerifyDimSetID

      BUG ID 68596
      --------------------------------------------------------------------------------------------------------------------
      Test Function Name
      --------------------------------------------------------------------------------------------------------------------
      DimensionOnJobJournalLine,DimensionOnJobLedgerEntry
      DimensionOnJobWIPEntry

      BUG ID
      --------------------------------------------------------------------------------------------------------------------
      Test Function Name
      --------------------------------------------------------------------------------------------------------------------
      ItemDimensionOnJobJournalLine

      TFS_TS_ID = 358026
      --------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      Test TFS ID
      --------------------------------------------------------------------------------------------------------------------
      TryPostSalesInvoiceFromJobPlanningLineStdCostChanged                                                     358026
      TryPostSalesInvoiceFromJobPlanningLineStdCostDiffUOM                                                     358026

      TFS_TS_ID = 97677
      --------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      Test TFS ID
      --------------------------------------------------------------------------------------------------------------------
      SalesInvoiceDimensionFromJobPlanningLineManual                                                          97677

      TFS_TS_ID = 104034
      --------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                      Test TFS ID
      --------------------------------------------------------------------------------------------------------------------
      PostJournalLineFromJobJnlLine                                                                           104034

      TFS_TS_ID = 359085
      --------------------------------------------------------------------------------------------------------------------
      PostJobJnlLineFromJobPlanningLine                                                                        359085

      TFS_TS_ID = 359837
      --------------------------------------------------------------------------------------------------------------------
      Test Function Name
      --------------------------------------------------------------------------------------------------------------------
      CreateJobSalesLine                                                                                       359837
      Test Function Name                                                                                      Test TFS ID
      --------------------------------------------------------------------------------------------------------------------
      PostJobJnlLineFromJobPlanningLine                                                                       104945
    }
    END.
  }
}

