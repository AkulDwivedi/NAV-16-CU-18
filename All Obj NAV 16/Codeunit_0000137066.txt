OBJECT Codeunit 137066 SCM Order Tracking
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1010 : Record 82;
      ItemJournalBatch@1008 : Record 233;
      LocationOrange@1013 : Record 14;
      LibraryVariableStorage@1012 : Codeunit 131004;
      LibraryManufacturing@1003 : Codeunit 132202;
      LibraryInventory@1017 : Codeunit 132201;
      LibraryPlanning@1011 : Codeunit 132203;
      LibraryPurchase@1016 : Codeunit 130512;
      LibrarySales@1015 : Codeunit 130509;
      LibraryUtility@1006 : Codeunit 131000;
      LibraryWarehouse@1009 : Codeunit 132204;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1005 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      TrackingMessage@1004 : TextConst 'ENU=The change will not affect existing entries';
      NoTrackingLines@1007 : TextConst 'ENU=There are no order tracking entries for this line';
      WarehouseReceiveMessage@1014 : TextConst 'ENU=Warehouse Receive is required for Line No.';

    [Test]
    [HandlerFunctions(OrderTrackingPageHandler,MessageHandler)]
    PROCEDURE OrderTrackingOnReleasedProdOrder@2();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      Item3@1002 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ProdOrderLine@1010 : Record 5406;
      Quantity@1011 : Decimal;
    BEGIN
      // Setup: Create Item with Production BOM and create Production Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithProductionBOMSetup(Item,Item2,Item3,Item."Order Tracking Policy"::"Tracking & Action Msg.");
      CreateAndRefreshReleasedProdOrder(ProductionOrder,Item."No.",WORKDATE,Quantity);
      SelectProdOrderLine(ProdOrderLine,ProductionOrder."No.",ProductionOrder.Status,Item."No.");

      // Enqueue value for message handler and OrderTrackingPageHandler.
      LibraryVariableStorage.Enqueue(NoTrackingLines);
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(Quantity);

      // Exercise & Verify: Open and verify Order Tracking from Production Order. Verification is inside test page handler - OrderTrackingPageHandler.
      OpenOrderTrackingForProduction(ProdOrderLine);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingDetailsPageHandler)]
    PROCEDURE OrderTrackingOnReleasedProdOrderWithRequisitionLine@14();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      Item3@1002 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ProductionOrder2@1009 : Record 5405;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Item with Production BOM and create two Production Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithProductionBOMSetup(Item,Item2,Item3,Item."Order Tracking Policy"::"Tracking & Action Msg.");
      CreateAndRefreshReleasedProdOrder(ProductionOrder,Item2."No.",WORKDATE,Quantity);
      CreateAndRefreshReleasedProdOrder(ProductionOrder2,Item."No.",GetRequiredDate(5,10,WORKDATE),Quantity);  // Due Date based on Work Date.

      // Create Requisition line for Child Item.
      CreateRequisitionLine(Item3."No.",Quantity);

      // Exercise & Verify: Select Production Order component. Enqueue values. Open and verify Order Tracking from Production Order Component.
      // Verification is inside test page handler - OrderTrackingDetailsPageHandler.
      OrderTrackingForProdOrderComponent(ProductionOrder2."No.",Item2."No.",Quantity);  // Order Tracking for Released Production Order.
      OrderTrackingForProdOrderComponent(ProductionOrder2."No.",Item3."No.",Quantity);  // Order Tracking for Requisition Line.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingDetailsPageHandler)]
    PROCEDURE OrderTrackingOnProdOrderComponentWithVariant@16();
    BEGIN
      // Setup.
      Initialize;
      OrderTrackingOnProdOrderComponent(TRUE);  // Component with variant as True.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrackingOnProdOrderComponentWithoutVariant@65();
    BEGIN
      // Setup.
      Initialize;
      OrderTrackingOnProdOrderComponent(FALSE);  // Component with variant as False.
    END;

    LOCAL PROCEDURE OrderTrackingOnProdOrderComponent@90(ComponentWithVariant@1012 : Boolean);
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      Item3@1002 : Record 27;
      ProductionOrder@1008 : Record 5405;
      ItemVariant@1004 : Record 5401;
      ItemVariant2@1010 : Record 5401;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1006 : Record 39;
      ProdOrderComponent@1011 : Record 5407;
      Quantity@1003 : Decimal;
    BEGIN
      // Create Item with Production BOM, create Purchase Order with variant and Released Production Order.
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithProductionBOMSetup(Item,Item2,Item3,Item."Order Tracking Policy"::"Tracking Only");
      LibraryInventory.CreateItemVariant(ItemVariant,Item2."No.");
      LibraryInventory.CreateItemVariant(ItemVariant2,Item3."No.");
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item2."No.",ItemVariant.Code,Quantity);
      CreatePurchaseLineWithVariantCode(PurchaseHeader,PurchaseLine,Item3."No.",ItemVariant2.Code,Quantity);
      CreateAndRefreshReleasedProdOrder(ProductionOrder,Item."No.",GetRequiredDate(5,10,WORKDATE),Quantity);  // Due Date based on Work Date.
      UpdateVariantCodeOnProdOrderComponent(ProductionOrder."No.",Item2."No.",ItemVariant.Code);

      // Exercise & Verify: Open and verify Order Tracking from Production Order Component.Verification is inside test page handler.
      IF ComponentWithVariant THEN
        // Open page handler - OrderTrackingDetailsPageHandler.
        OrderTrackingForProdOrderComponent(ProductionOrder."No.",Item2."No.",PurchaseLine.Quantity)
      ELSE BEGIN
        SelectProdOrderComponent(ProdOrderComponent,ProductionOrder."No.",Item3."No.");
        LibraryVariableStorage.Enqueue(NoTrackingLines);  // Enqueue value for message handler.
        LibraryVariableStorage.Enqueue(ProdOrderComponent."Expected Quantity");  // Enqueue value for page handler.
        LibraryVariableStorage.Enqueue(ProdOrderComponent."Expected Quantity");  // Enqueue value for page handler.
        OpenOrderTrackingForProdOrderComponent(ProdOrderComponent);  // Open page handler - OrderTrackingPageHandler.
      END;
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingDetailsPageHandler)]
    PROCEDURE OrderTrackingOnSalesOrderWithPurchaseOrder@13();
    VAR
      Item@1000 : Record 27;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      SalesHeader@1007 : Record 36;
      SalesLine@1006 : Record 37;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Item, Create Purchase Order and Sales Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Order Tracking Policy"::"Tracking Only",'');
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.",'',Quantity);
      UpdateExpectedReceiptDateOnPurchaseLine(
        PurchaseLine,CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5) + 10) + 'D>',WORKDATE));  // Expected Receipt Date based on Work Date.
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity);

      // Enqueue value for page handler.
      LibraryVariableStorage.Enqueue(SalesLine.Quantity);
      LibraryVariableStorage.Enqueue(SalesLine.Quantity - Quantity);
      LibraryVariableStorage.Enqueue(PurchaseLine.Quantity);

      // Exercise & Verify: Open and verify Order Tracking from Sales Order. Verification is inside test page handler - OrderTrackingDetailsPageHandler.
      OpenOrderTrackingForSales(SalesLine);  // Open page handler - OrderTrackingDetailsPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrackingOnSalesOrderWithPositiveAdjmtWithoutPosting@25();
    BEGIN
      // Setup.
      Initialize;
      OrderTrackingOnSalesOrderWithPositiveAdjmt(FALSE);  // Post Item Journal as False.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingDetailsPageHandler)]
    PROCEDURE OrderTrackingOnSalesOrderWithPositiveAdjmtWithPosting@50();
    BEGIN
      // Setup.
      Initialize;
      OrderTrackingOnSalesOrderWithPositiveAdjmt(TRUE);  // Post Item Journal as True.
    END;

    LOCAL PROCEDURE OrderTrackingOnSalesOrderWithPositiveAdjmt@59(PostItemJournal@1012 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1007 : Record 36;
      SalesLine@1006 : Record 37;
      ItemJournalLine@1001 : Record 83;
      Quantity@1003 : Decimal;
    BEGIN
      // Create Item, Item Journal line and Sales Order.
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Order Tracking Policy"::"Tracking Only",'');
      CreateAndPostItemJournal(Item."No.",ItemJournalLine."Entry Type"::"Positive Adjmt.",Quantity,PostItemJournal);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity);

      // Enqueue value for Page handler.
      IF PostItemJournal THEN BEGIN
        LibraryVariableStorage.Enqueue(SalesLine.Quantity);
        LibraryVariableStorage.Enqueue(SalesLine.Quantity - Quantity);
        LibraryVariableStorage.Enqueue(Quantity);
      END ELSE BEGIN
        LibraryVariableStorage.Enqueue(NoTrackingLines);
        LibraryVariableStorage.Enqueue(SalesLine.Quantity);
        LibraryVariableStorage.Enqueue(SalesLine.Quantity);
      END;

      // Exercise & Verify: Open and verify Order Tracking from Sales Order. Verification is inside test page handler - OrderTrackingPageHandler  /  OrderTrackingDetailsPageHandler.
      OpenOrderTrackingForSales(SalesLine);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingDetailsPageHandler)]
    PROCEDURE OrderTrackingOnPurchaseWithLocation@12();
    BEGIN
      // Setup.
      Initialize;
      OrderTrackingOnProdOrderComponentAndPurchaseWithLocation(TRUE);  // Order Tracking On Purchase as TRUE.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingDetailsPageHandler)]
    PROCEDURE OrderTrackingOnProdOrderComponentWithLocation@11();
    BEGIN
      // Setup.
      Initialize;
      OrderTrackingOnProdOrderComponentAndPurchaseWithLocation(FALSE);  // Order Tracking On Purchase as FALSE.
    END;

    LOCAL PROCEDURE OrderTrackingOnProdOrderComponentAndPurchaseWithLocation@5(OrderTrackingOnPurchase@1008 : Boolean);
    VAR
      Item@1001 : Record 27;
      Item2@1002 : Record 27;
      Item3@1003 : Record 27;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      PurchaseLine2@1009 : Record 39;
      Bin@1006 : Record 7354;
      ProductionOrder@1007 : Record 5405;
      Quantity@1000 : Decimal;
    BEGIN
      // Create Item with Production BOM, create Purchase Order with Location and Bin Code and Released Production Order.
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithProductionBOMSetup(Item,Item2,Item3,Item."Order Tracking Policy"::"Tracking Only");
      FindBin(Bin,LocationOrange.Code);
      CreatePurchaseOrderWithLocationAndVariant(PurchaseHeader,PurchaseLine,Item2."No.",Quantity,'',LocationOrange.Code,Bin.Code);  // Variant Code as Blank.
      CreatePurchaseLineWithLocationAndVariant(PurchaseHeader,PurchaseLine2,Item3."No.",Quantity,'',LocationOrange.Code,Bin.Code);  // Variant Code as Blank.
      CreateAndRefreshReleasedProdOrder(ProductionOrder,Item."No.",GetRequiredDate(5,10,WORKDATE),Quantity);
      UpdateLocationAndVariantOnProdOrderComponent(ProductionOrder."No.",Item2."No.",'',LocationOrange.Code,Bin.Code);
      UpdateLocationAndVariantOnProdOrderComponent(ProductionOrder."No.",Item3."No.",'',LocationOrange.Code,Bin.Code);

      // Exercise & Verify: Open and verify Order Tracking from Production Order Component.Verification is inside test page handler - OrderTrackingDetailsPageHandler.
      IF OrderTrackingOnPurchase THEN BEGIN
        LibraryVariableStorage.Enqueue(PurchaseLine.Quantity);
        LibraryVariableStorage.Enqueue(PurchaseLine.Quantity - Quantity);
        LibraryVariableStorage.Enqueue(-PurchaseLine.Quantity);
        OpenOrderTrackingForPurchase(PurchaseLine);  // Open page handler - OrderTrackingDetailsPageHandler.
      END ELSE
        OrderTrackingForProdOrderComponent(ProductionOrder."No.",Item2."No.",PurchaseLine.Quantity);  // Open page handler OrderTrackingDetailsPageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrackingOnSalesWithVariant@96();
    VAR
      Item@1001 : Record 27;
      Item2@1002 : Record 27;
      Item3@1003 : Record 27;
      ItemVariant@1004 : Record 5401;
      ProductionOrder@1006 : Record 5405;
      ProdOrderLine@1007 : Record 5406;
      SalesHeader@1008 : Record 36;
      SalesLine@1009 : Record 37;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with Production BOM, create Item Variants, create Released Production Order with Variant and Sales Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItemWithProductionBOMSetup(Item,Item2,Item3,Item."Order Tracking Policy"::"Tracking Only");
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      CreateAndRefreshReleasedProdOrder(ProductionOrder,Item."No.",GetRequiredDate(5,10,WORKDATE),Quantity);
      UpdateVariantCodeOnProdOrder(ProdOrderLine,ProductionOrder."No.",Item."No.",ItemVariant.Code);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",Quantity);
      UpdateVariantCodeOnSalesOrder(SalesLine,ItemVariant.Code);

      // Enqueue value for Page handler.
      LibraryVariableStorage.Enqueue(NoTrackingLines);
      LibraryVariableStorage.Enqueue(SalesLine.Quantity);
      LibraryVariableStorage.Enqueue(SalesLine.Quantity);

      // Exercise & Verify: Open and verify Order Tracking from Sales Order. Verification is inside test page handler - OrderTrackingPageHandler.
      OpenOrderTrackingForSales(SalesLine);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingPageHandler)]
    PROCEDURE OrderTrackingOnProdOrderComponentWithLocationAndWithoutVariant@67();
    BEGIN
      // Setup.
      Initialize;
      OrderTrackingOnProdOrderComponentForVariantAndLocation(TRUE,FALSE);  // Prod Order Without Variant as TRUE, Update Variant as False.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingDetailsPageHandler)]
    PROCEDURE OrderTrackingOnProdOrderComponentWithVariantAndLocation@68();
    BEGIN
      // Setup.
      Initialize;
      OrderTrackingOnProdOrderComponentForVariantAndLocation(FALSE,FALSE);  // Prod Order Without Variant as False, Update Variant as False.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingDetailsPageHandler)]
    PROCEDURE OrderTrackingOnProdOrderComponentWithUpdatedVariant@31();
    BEGIN
      // Setup.
      Initialize;
      OrderTrackingOnProdOrderComponentForVariantAndLocation(FALSE,TRUE);  // Prod Order Without Variant as False, Update Variant as True.
    END;

    LOCAL PROCEDURE OrderTrackingOnProdOrderComponentForVariantAndLocation@61(ProdOrderWithoutVariant@1011 : Boolean;UpdateVariant@1013 : Boolean);
    VAR
      Item@1001 : Record 27;
      Item2@1002 : Record 27;
      Item3@1003 : Record 27;
      Bin@1004 : Record 7354;
      ItemVariant@1005 : Record 5401;
      ItemVariant2@1006 : Record 5401;
      PurchaseHeader@1007 : Record 38;
      PurchaseLine@1008 : Record 39;
      ProductionOrder@1010 : Record 5405;
      ProdOrderComponent@1012 : Record 5407;
    BEGIN
      // Create Item with Production BOM, create Purchase Order with Location and Bin Code and Released Production Order.
      CreateItemWithProductionBOMSetup(Item,Item2,Item3,Item."Order Tracking Policy"::"Tracking Only");
      LibraryInventory.CreateItemVariant(ItemVariant,Item2."No.");
      LibraryInventory.CreateItemVariant(ItemVariant2,Item3."No.");
      FindBin(Bin,LocationOrange.Code);

      CreatePurchaseOrderWithTwoLinesAndLocation(
        PurchaseHeader,Bin,Item2."No.",Item3."No.",ItemVariant.Code,LocationOrange.Code,LibraryRandom.RandDec(10,2));
      FindPurchaseOrderLine(PurchaseLine,PurchaseHeader."No.",Item2."No.");
      CreateAndRefreshReleasedProdOrder(ProductionOrder,Item."No.",GetRequiredDate(5,10,WORKDATE),PurchaseLine.Quantity);
      UpdateLocationAndVariantOnProdOrderComponent(ProductionOrder."No.",Item2."No.",ItemVariant.Code,LocationOrange.Code,Bin.Code);
      UpdateLocationAndVariantOnProdOrderComponent(ProductionOrder."No.",Item3."No.",ItemVariant2.Code,LocationOrange.Code,Bin.Code);

      // Exercise & Verify: Open and verify Order Tracking from Production Order Component.
      // Verification is inside test page handler - OrderTrackingDetailsPageHandler.
      // Verify Order Tracking on Production Order Component without Variant.
      IF ProdOrderWithoutVariant THEN BEGIN
        SelectProdOrderComponent(ProdOrderComponent,ProductionOrder."No.",Item3."No.");
        LibraryVariableStorage.Enqueue(NoTrackingLines);
        LibraryVariableStorage.Enqueue(ProdOrderComponent."Expected Quantity");
        LibraryVariableStorage.Enqueue(ProdOrderComponent."Expected Quantity");
        OpenOrderTrackingForProdOrderComponent(ProdOrderComponent);  // Open page handler - OrderTrackingPageHandler.
      END ELSE
        // Verify Order Tracking on Production Order Component after updating variant on Purchase Line.
        IF UpdateVariant THEN BEGIN
          FindPurchaseOrderLine(PurchaseLine,PurchaseHeader."No.",Item3."No.");
          UpdateVariantCodeOnPurchaseLine(PurchaseLine,ItemVariant2.Code);
          OrderTrackingForProdOrderComponent(ProductionOrder."No.",Item3."No.",PurchaseLine.Quantity);  // Open page handler OrderTrackingDetailsPageHandler.
        END ELSE
          // Verify Order Tracking on Production Order Component with Variant.
          OrderTrackingForProdOrderComponent(ProductionOrder."No.",Item2."No.",PurchaseLine.Quantity) // Open page handler OrderTrackingDetailsPageHandler.
    END;

    [Test]
    [HandlerFunctions(OrderTrackingMultipleLinePageHandler,MessageHandler)]
    PROCEDURE OrderTrackingOnProdOrderComponentAndItemLedgerEntry@39();
    VAR
      ItemPurch@1000 : Record 27;
      ChildItemMfg@1001 : Record 27;
      ParentItemMfg@1002 : Record 27;
      ProdOrderComponent@1006 : Record 5407;
      ProductionOrder@1005 : Record 5405;
      OutputItemLedgEntryNo@1003 : ARRAY [2] OF Integer;
      Quantity@1007 : ARRAY [4] OF Decimal;
    BEGIN
      // [FEATURE] [Prod. Order Component]
      // [SCENARIO 381248] Order Tracking called from Prod. Order Component should show output Item Entries to which the consumption of the Component will be applied.
      Initialize;
      Quantity[1] := 3; // values are picked for the clear perception of the test
      Quantity[2] := 5;
      Quantity[3] := 5;
      Quantity[4] := 1;

      // [GIVEN] Purchased Item "I1".
      CreateItem(
        ItemPurch,ItemPurch."Replenishment System"::Purchase,ItemPurch."Order Tracking Policy"::"Tracking & Action Msg.",'');

      // [GIVEN] Manufacturing Item "I2" with BOM component "I1".
      CreateItemManufacturing(ChildItemMfg,ItemPurch."No.");

      // [GIVEN] Manufacturing Item "I3" with BOM component "I2".
      CreateItemManufacturing(ParentItemMfg,ChildItemMfg."No.");

      // [GIVEN] Released Production Order for "I2".
      // [GIVEN] Two output lines of "I2" with quantities "Q1" and "Q2" are posted (i.e. "Q1" = 3 pcs; "Q2" = 5 pcs).
      CreateAndRefreshReleasedProdOrder(ProductionOrder,ChildItemMfg."No.",WORKDATE,Quantity[1] + Quantity[2]);
      OutputItemLedgEntryNo[1] := PostOutput(ProductionOrder,Quantity[1]);
      OutputItemLedgEntryNo[2] := PostOutput(ProductionOrder,Quantity[2]);

      // [GIVEN] Part of each output of "I2" is consumed in another Production Order. Consumption quantity = "Q4" (i.e. "Q4" = 1).
      CreateAndRefreshReleasedProdOrder(ProductionOrder,ParentItemMfg."No.",WORKDATE,2 * Quantity[4]);
      PostConsumption(ProductionOrder,Quantity[4],OutputItemLedgEntryNo[1]);
      PostConsumption(ProductionOrder,Quantity[4],OutputItemLedgEntryNo[2]);

      // [GIVEN] Released Production Order "PO" for "I3". Quantity = "Q3" (i.e. "Q3" = 5 pcs).
      CreateAndRefreshReleasedProdOrder(ProductionOrder,ParentItemMfg."No.",WORKDATE,Quantity[3]);

      // [WHEN] Show Order Tracking for the Prod. Order Component "I2" in "PO".
      SelectProdOrderComponent(ProdOrderComponent,ProductionOrder."No.",ChildItemMfg."No.");
      LibraryVariableStorage.Enqueue(Quantity[3]); // quantity to be tracked ("Q3" = 5 pcs)
      LibraryVariableStorage.Enqueue(0); // untracked quantity
      LibraryVariableStorage.Enqueue(Quantity[2] - Quantity[4]); // quantity to be applied to the second output ("Q2" - "Q4" = 4 pcs).
      LibraryVariableStorage.Enqueue(Quantity[3] - (Quantity[2] - Quantity[4])); // quantity to be applied to the first output ("Q3" - ("Q2" - "Q4") = 1 pc).
      OpenOrderTrackingForProdOrderComponent(ProdOrderComponent);

      // [THEN] Order Tracking show two output Item Entries with planned applied quantities (4 pcs & 1 pc).
      // Verification is done in OrderTrackingMultipleLinePageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingDetailsPageHandler)]
    PROCEDURE OrderTrackingOnFirmPlannedProdOrder@32();
    BEGIN
      // Setup.
      Initialize;
      OrderTrackingOnReleasedProdOrderAndFirmPlannedProdOrder(TRUE);  // Firm Planned Prod Order Tracking as True.
    END;

    [Test]
    [HandlerFunctions(OrderTrackingPageHandler,MessageHandler)]
    PROCEDURE OrderTrackingOnReleasedProdOrderForFirmPlannedProdOrder@43();
    BEGIN
      // Setup.
      Initialize;
      OrderTrackingOnReleasedProdOrderAndFirmPlannedProdOrder(FALSE);  // Firm Planned Prod Order Tracking as False.
    END;

    LOCAL PROCEDURE OrderTrackingOnReleasedProdOrderAndFirmPlannedProdOrder@27(FirmPlannedProdOrderTracking@1008 : Boolean);
    VAR
      Item@1001 : Record 27;
      Item2@1002 : Record 27;
      Item3@1003 : Record 27;
      ProductionOrder@1004 : Record 5405;
      ProductionOrder2@1005 : Record 5405;
      ProductionOrder3@1006 : Record 5405;
      ProdOrderLine@1007 : Record 5406;
      ProdOrderComponent@1009 : Record 5407;
    BEGIN
      // Create Item with Production BOM and create Firm Planned and Released Production Order.
      CreateItemWithProductionBOMSetup(Item,Item2,Item3,Item."Order Tracking Policy"::"Tracking Only");
      CreateAndRefreshFirmPlannedProdOrder(ProductionOrder,Item2."No.",WORKDATE,LibraryRandom.RandDec(10,2) + 100);  // Using Large Value for Quantity.
      CreateAndRefreshFirmPlannedProdOrder(ProductionOrder2,Item2."No.",WORKDATE,LibraryRandom.RandDec(10,2) + 50);  // Using Large Value for Quantity.
      CreateAndRefreshReleasedProdOrder(
        ProductionOrder3,Item."No.",GetRequiredDate(5,10,WORKDATE),LibraryRandom.RandDec(10,2) + 10);  // Using Large Value for Quantity.

      IF FirmPlannedProdOrderTracking THEN BEGIN
        SelectProdOrderComponent(ProdOrderComponent,ProductionOrder3."No.",Item2."No.");
        // Enqueue value for Page handler.
        LibraryVariableStorage.Enqueue(ProductionOrder2.Quantity);
        LibraryVariableStorage.Enqueue(ProductionOrder2.Quantity - ProdOrderComponent."Expected Quantity");
        LibraryVariableStorage.Enqueue(-ProdOrderComponent."Expected Quantity");
        SelectProdOrderLine(ProdOrderLine,ProductionOrder2."No.",ProductionOrder2.Status,Item2."No.");
      END ELSE BEGIN
        // Enqueue value for Page handler.
        LibraryVariableStorage.Enqueue(NoTrackingLines);
        LibraryVariableStorage.Enqueue(ProductionOrder3.Quantity);
        LibraryVariableStorage.Enqueue(ProductionOrder3.Quantity);
        SelectProdOrderLine(ProdOrderLine,ProductionOrder3."No.",ProductionOrder3.Status,Item."No.");
      END;

      // Exercise & Verify: Open and verify Order Tracking from Production Order Line. Verification is inside test page handler - OrderTrackingPageHandler  /  OrderTrackingDetailsPageHandler.
      OpenOrderTrackingForProduction(ProdOrderLine);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingDetailsPageHandler)]
    PROCEDURE OrderTrackingOnProdOrderComponentForPurchaseOrder@58();
    BEGIN
      // Setup.
      Initialize;
      OrderTrackingOnProdOrderComponentAndSalesOrder(FALSE);  // Sales Order Tracking as False.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingMultipleLinePageHandler)]
    PROCEDURE OrderTrackingOnSalesOrderForPurchaseOrderAndProdOrder@89();
    BEGIN
      // Setup.
      Initialize;
      OrderTrackingOnProdOrderComponentAndSalesOrder(TRUE);  // Sales Order Tracking as True.
    END;

    LOCAL PROCEDURE OrderTrackingOnProdOrderComponentAndSalesOrder@40(SalesOrderTracking@1014 : Boolean);
    VAR
      Item@1007 : Record 27;
      Item2@1006 : Record 27;
      Item3@1005 : Record 27;
      ProductionOrder@1004 : Record 5405;
      ProductionOrder2@1003 : Record 5405;
      PurchaseHeader@1008 : Record 38;
      PurchaseLine@1009 : Record 39;
      SalesHeader@1012 : Record 36;
      SalesLine@1013 : Record 37;
      RequiredDate@1000 : Date;
    BEGIN
      // Create Item with Production BOM, create Released Production Order and Purchase Order.
      RequiredDate := GetRequiredDate(5,5,WORKDATE);  // Calculate Required Date based on Workdate.
      CreateItemWithProductionBOMSetup(Item,Item2,Item3,Item."Order Tracking Policy"::"Tracking Only");
      CreateAndRefreshReleasedProdOrder(ProductionOrder,Item2."No.",WORKDATE,LibraryRandom.RandDec(10,2));

      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.",'',LibraryRandom.RandDec(10,2) + 10);  // Using Large Value for Quantity.
      UpdateExpectedReceiptDateOnPurchaseLine(PurchaseLine,RequiredDate);  // Expected Receipt Date based on Work Date.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreateAndRefreshReleasedProdOrder(ProductionOrder2,Item."No.",RequiredDate,PurchaseLine.Quantity + 50);  // Production Quantity Greater than Purchase Line Quantity.

      IF SalesOrderTracking THEN BEGIN
        CreateSalesOrder(SalesHeader,SalesLine,Item."No.",ProductionOrder2.Quantity);  // Sales Order Quantity equal to Production Order Quantity.
        UpdateShipmentDateOnSalesLine(SalesLine,RequiredDate);
      END;

      // Exercise & Verify: Open and verify Order Tracking from Sales Order and Production Order Component.
      // Verification is inside test page handler - OrderTrackingDetailsPageHandler and OrderTrackingMultipleLinePageHandler.
      IF SalesOrderTracking THEN BEGIN
        // Enqueue value for page handler.
        LibraryVariableStorage.Enqueue(SalesLine.Quantity);
        LibraryVariableStorage.Enqueue(0);
        LibraryVariableStorage.Enqueue(PurchaseLine.Quantity);
        LibraryVariableStorage.Enqueue(SalesLine.Quantity - PurchaseLine.Quantity);
        OpenOrderTrackingForSales(SalesLine) // Open page handler - OrderTrackingDetailsPageHandler.
      END ELSE
        OrderTrackingForProdOrderComponent(ProductionOrder2."No.",Item2."No.",ProductionOrder.Quantity) // Open page handler - OrderTrackingMultipleLinePageHandler.
    END;

    [Test]
    [HandlerFunctions(OrderTrackingPageHandler,MessageHandler)]
    PROCEDURE OrderTrackingOnPurchaseOrderForNegativeAdjustment@26();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      Quantity@1005 : Decimal;
    BEGIN
      // Setup: Create Item, Create and Post Item Journal with Negative Adjustment and create Purchase Order.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Order Tracking Policy"::"Tracking Only",'');
      CreateAndPostItemJournal(Item."No.",ItemJournalLine."Entry Type"::"Negative Adjmt.",Quantity,TRUE);
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.",'',Quantity);
      UpdateExpectedReceiptDateOnPurchaseLine(PurchaseLine,GetRequiredDate(5,5,WORKDATE));  // Expected Receipt Date based on Work Date.

      // Exercise & Verify: Open and verify Order Tracking from Purchase Order. Verification is inside test page handler - OrderTrackingDetailsPageHandler.
      // Enqueue value for page handler.
      LibraryVariableStorage.Enqueue(Quantity);
      LibraryVariableStorage.Enqueue(0);
      LibraryVariableStorage.Enqueue(Quantity);
      OpenOrderTrackingForPurchase(PurchaseLine);
    END;

    [Test]
    [HandlerFunctions(OrderTrackingPageHandler,MessageHandler)]
    PROCEDURE OrderTrackingOnSalesOrderForSalesCreditMemoWithoutPosting@34();
    BEGIN
      // Setup.
      Initialize;
      OrderTrackingOnSalesOrderForSalesCreditMemo(FALSE);  // Post Credit Memo as False.
    END;

    [Test]
    [HandlerFunctions(MessageHandler,OrderTrackingDetailsPageHandler)]
    PROCEDURE OrderTrackingOnSalesOrderForSalesCreditMemoWithPosting@57();
    BEGIN
      // Setup.
      Initialize;
      OrderTrackingOnSalesOrderForSalesCreditMemo(TRUE);  // Post Credit Memo as True.
    END;

    LOCAL PROCEDURE OrderTrackingOnSalesOrderForSalesCreditMemo@78(PostCreditMemo@1010 : Boolean);
    VAR
      Item@1005 : Record 27;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      SalesHeader2@1009 : Record 36;
      SalesLine2@1008 : Record 37;
      Quantity@1000 : Decimal;
    BEGIN
      // Create Item, Create Sales Credit Memo and Sales Order.
      Quantity := LibraryRandom.RandDec(10,2);
      CreateItem(Item,Item."Replenishment System"::Purchase,Item."Order Tracking Policy"::"Tracking Only",'');
      CreateSalesCreditMemo(SalesHeader,SalesLine,Item."No.",Quantity);
      IF PostCreditMemo THEN
        LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      CreateSalesOrder(SalesHeader2,SalesLine2,Item."No.",Quantity);

      // Exercise & Verify: Open and verify Order Tracking from Sales Order. Verification is inside test page handler - OrderTrackingDetailsPageHandler ,OrderTrackingPageHandler.
      // Enqueue value for page handler.
      IF PostCreditMemo THEN BEGIN
        LibraryVariableStorage.Enqueue(Quantity);
        LibraryVariableStorage.Enqueue(0);  // Untracked Quantity - zero, for Posted Credit Memo.
      END ELSE BEGIN
        LibraryVariableStorage.Enqueue(NoTrackingLines);
        LibraryVariableStorage.Enqueue(Quantity);
      END;
      LibraryVariableStorage.Enqueue(Quantity);
      OpenOrderTrackingForSales(SalesLine2);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;

      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      CreateLocationSetup;
      NoSeriesSetup;
      ItemJournalSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE NoSeriesSetup@46();
    VAR
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@21();
    BEGIN
      CLEAR(ItemJournalTemplate);
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      CLEAR(ItemJournalBatch);
      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationSetup@92();
    VAR
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      CreateAndUpdateLocation(LocationOrange);  // Location Orange.
      LibraryWarehouse.CreateNumberOfBins(LocationOrange.Code,'','',2,FALSE);  // Value required.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationOrange.Code,FALSE);
    END;

    LOCAL PROCEDURE CreateAndUpdateLocation@91(VAR Location@1004 : Record 14);
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Require Put-away",TRUE);
      Location.VALIDATE("Require Pick",TRUE);
      Location.VALIDATE("Require Receive",TRUE);
      Location.VALIDATE("Require Shipment",TRUE);
      Location."Bin Mandatory" := TRUE;
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithProductionBOMSetup@3(VAR Item@1007 : Record 27;VAR Item2@1006 : Record 27;VAR Item3@1005 : Record 27;OrderTrackingPolicy@1000 : Option);
    VAR
      ProductionBOMHeader@1003 : Record 99000771;
    BEGIN
      // Create Child Items.
      CreateItem(Item2,Item."Replenishment System"::Purchase,OrderTrackingPolicy,'');
      CreateItem(Item3,Item."Replenishment System"::Purchase,OrderTrackingPolicy,'');

      // Create Production BOM with two Component.
      LibraryManufacturing.CreateCertifProdBOMWithTwoComp(ProductionBOMHeader,Item2."No.",Item3."No.",1);

      // Create Production Item.
      CreateItem(Item,Item."Replenishment System"::"Prod. Order",OrderTrackingPolicy,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateItem@45(VAR Item@1000 : Record 27;ReplenishmentSystem@1002 : Option;OrderTrackingPolicy@1001 : Option;ProductionBOMNo@1003 : Code[20]);
    BEGIN
      // Random value for Unit Cost.
      LibraryVariableStorage.Enqueue(TrackingMessage);  // Enqueue value for message handler.
      LibraryManufacturing.CreateItemManufacturing(
        Item,Item."Costing Method"::FIFO,LibraryRandom.RandDec(50,2),Item."Reordering Policy",Item."Flushing Method",'',
        ProductionBOMNo);
      Item.VALIDATE("Order Tracking Policy",OrderTrackingPolicy);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemManufacturing@47(VAR Item@1001 : Record 27;ComponentItemNo@1002 : Code[20]);
    VAR
      ProductionBOMHeader@1000 : Record 99000771;
    BEGIN
      LibraryManufacturing.CreateCertifiedProductionBOM(ProductionBOMHeader,ComponentItemNo,1);
      CreateItem(
        Item,Item."Replenishment System"::"Prod. Order",Item."Order Tracking Policy"::"Tracking & Action Msg.",
        ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndRefreshReleasedProdOrder@20(VAR ProductionOrder@1000 : Record 5405;ItemNo@1002 : Code[20];DueDate@1001 : Date;Quantity@1003 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      UpdateDueDateOnReleasedProdOrder(ProductionOrder."No.",DueDate);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndRefreshFirmPlannedProdOrder@33(VAR ProductionOrder@1000 : Record 5405;ItemNo@1002 : Code[20];DueDate@1001 : Date;Quantity@1003 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      UpdateDueDateOnFirmPlannedProdOrder(ProductionOrder."No.",DueDate);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE FindBin@64(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10]);
    BEGIN
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseOrderLine@15(VAR PurchaseLine@1000 : Record 39;DocumentNo@1001 : Code[20];No@1003 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.SETRANGE("No.",No);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateDueDateOnReleasedProdOrder@71(No@1001 : Code[20];DueDate@1000 : Date);
    VAR
      ReleasedProductionOrder@1002 : TestPage 99000831;
    BEGIN
      ReleasedProductionOrder.OPENEDIT;
      ReleasedProductionOrder.FILTER.SETFILTER("No.",No);
      ReleasedProductionOrder."Due Date".SETVALUE(DueDate);
    END;

    LOCAL PROCEDURE UpdateDueDateOnFirmPlannedProdOrder@37(No@1001 : Code[20];DueDate@1000 : Date);
    VAR
      FirmPlannedProdOrder@1002 : TestPage 99000829;
    BEGIN
      FirmPlannedProdOrder.OPENEDIT;
      FirmPlannedProdOrder.FILTER.SETFILTER("No.",No);
      FirmPlannedProdOrder."Due Date".SETVALUE(DueDate);
    END;

    LOCAL PROCEDURE OpenOrderTrackingForProduction@74(ProdOrderLine@1001 : Record 5406);
    VAR
      OrderTracking@1000 : Page 99000822;
    BEGIN
      // Open Order Tracking page for required Production Order.
      OrderTracking.SetProdOrderLine(ProdOrderLine);
      OrderTracking.RUNMODAL;
    END;

    LOCAL PROCEDURE OpenOrderTrackingForProdOrderComponent@23(ProdOrderComponent@1001 : Record 5407);
    VAR
      OrderTracking@1000 : Page 99000822;
    BEGIN
      // Open Order Tracking page for required Production Order Component line.
      OrderTracking.SetProdOrderComponent(ProdOrderComponent);
      OrderTracking.RUNMODAL;
    END;

    LOCAL PROCEDURE OpenOrderTrackingForSales@36(SalesLine@1001 : Record 37);
    VAR
      OrderTracking@1000 : Page 99000822;
    BEGIN
      // Open Order Tracking page for required Sales Order.
      OrderTracking.SetSalesLine(SalesLine);
      OrderTracking.RUNMODAL;
    END;

    LOCAL PROCEDURE OpenOrderTrackingForPurchase@62(PurchaseLine@1001 : Record 39);
    VAR
      OrderTracking@1000 : Page 99000822;
    BEGIN
      // Open Order Tracking page for required Purchase Order.
      OrderTracking.SetPurchLine(PurchaseLine);
      OrderTracking.RUNMODAL;
    END;

    LOCAL PROCEDURE SelectProdOrderLine@76(VAR ProdOrderLine@1000 : Record 5406;ProdOrderNo@1001 : Code[20];Status@1003 : Option;ItemNo@1002 : Code[20]);
    BEGIN
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.SETRANGE("Item No.",ItemNo);
      ProdOrderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectProdOrderComponent@7(VAR ProdOrderComponent@1000 : Record 5407;ProdOrderNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProdOrderComponent.Status::Released);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.FINDLAST;
    END;

    LOCAL PROCEDURE CreateRequisitionWorksheetName@1(VAR RequisitionWkshName@1001 : Record 245);
    VAR
      ReqWkshTemplate@1000 : Record 244;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::"Req.");
      RequisitionWkshName.SETRANGE(Recurring,FALSE);
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
    END;

    LOCAL PROCEDURE CreateRequisitionLine@29(ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      RequisitionWkshName@1000 : Record 245;
      RequisitionLine@1001 : Record 246;
    BEGIN
      CreateRequisitionWorksheetName(RequisitionWkshName);
      LibraryPlanning.CreateRequisitionLine(RequisitionLine,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
      RequisitionLine.VALIDATE(Type,RequisitionLine.Type::Item);
      RequisitionLine.VALIDATE("No.",ItemNo);
      RequisitionLine.VALIDATE(Quantity,Quantity);
      RequisitionLine.VALIDATE("Due Date",WORKDATE);
      RequisitionLine.VALIDATE("Action Message",RequisitionLine."Action Message"::New);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OrderTrackingForProdOrderComponent@38(ProductionOrderNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      ProdOrderComponent@1000 : Record 5407;
    BEGIN
      SelectProdOrderComponent(ProdOrderComponent,ProductionOrderNo,ItemNo);

      // Enqueue value for page handler.
      LibraryVariableStorage.Enqueue(ProdOrderComponent."Expected Quantity");
      LibraryVariableStorage.Enqueue(ProdOrderComponent."Expected Quantity" - Quantity);
      LibraryVariableStorage.Enqueue(Quantity);
      OpenOrderTrackingForProdOrderComponent(ProdOrderComponent);  // Open page handler - OrderTrackingPageHandler.
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@9(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20];VariantCode@1003 : Code[10];Quantity@1004 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      CreatePurchaseLineWithVariantCode(PurchaseHeader,PurchaseLine,ItemNo,VariantCode,Quantity);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithLocationAndVariant@55(VAR PurchaseHeader@1004 : Record 38;VAR PurchaseLine@1003 : Record 39;ItemNo@1002 : Code[20];Quantity@1000 : Decimal;VariantCode@1006 : Code[10];LocationCode@1001 : Code[10];BinCode@1005 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLineWithLocationAndVariant(PurchaseHeader,PurchaseLine,ItemNo,Quantity,VariantCode,LocationCode,BinCode);
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithVariantCode@6(VAR PurchaseHeader@1004 : Record 38;VAR PurchaseLine@1003 : Record 39;ItemNo@1002 : Code[20];VariantCode@1001 : Code[10];Quantity@1000 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Variant Code",VariantCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithLocationAndVariant@42(VAR PurchaseHeader@1004 : Record 38;VAR PurchaseLine@1003 : Record 39;ItemNo@1002 : Code[20];Quantity@1000 : Decimal;VariantCode@1006 : Code[10];LocationCode@1001 : Code[10];BinCode@1005 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Variant Code",VariantCode);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      LibraryVariableStorage.Enqueue(WarehouseReceiveMessage);  // Enqueue value for Message Handler.
      PurchaseLine.VALIDATE("Bin Code",BinCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@41(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      // Create Sales Order.
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateSalesCreditMemo@135(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      // Create Sales Credit Memo.
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Credit Memo",ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateSalesDocument@136(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1004 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE PostConsumption@51(ProductionOrder@1001 : Record 5405;ConsumptionQty@1000 : Decimal;AppliedToEntryNo@1004 : Integer);
    VAR
      ItemJournalLine@1003 : Record 83;
      ProdOrderComponent@1002 : Record 5407;
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProductionOrder.Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      LibraryManufacturing.CalculateConsumptionForJournal(ProductionOrder,ProdOrderComponent,WORKDATE,FALSE);

      WITH ItemJournalLine DO BEGIN
        SETRANGE("Order Type","Order Type"::Production);
        SETRANGE("Order No.",ProductionOrder."No.");
        SETRANGE("Entry Type","Entry Type"::Consumption);
        FINDFIRST;
        VALIDATE(Quantity,ConsumptionQty);
        VALIDATE("Applies-to Entry",AppliedToEntryNo);
        MODIFY(TRUE);
      END;
      LibraryManufacturing.PostConsumptionJournal;
    END;

    LOCAL PROCEDURE PostOutput@60(ProductionOrder@1000 : Record 5405;OutputQty@1001 : Decimal) : Integer;
    VAR
      ItemJournalLine@1002 : Record 83;
      ItemLedgerEntry@1003 : Record 32;
    BEGIN
      LibraryManufacturing.OutputJournalExplodeRouting(ProductionOrder);

      WITH ItemJournalLine DO BEGIN
        SETRANGE("Order Type","Order Type"::Production);
        SETRANGE("Order No.",ProductionOrder."No.");
        SETRANGE("Entry Type","Entry Type"::Output);
        FINDFIRST;
        VALIDATE("Output Quantity",OutputQty);
        MODIFY(TRUE);
      END;
      LibraryManufacturing.PostOutputJournal;

      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Entry Type","Entry Type"::Output);
        SETRANGE("Order Type","Order Type"::Production);
        SETRANGE("Order No.",ProductionOrder."No.");
        FINDLAST;
        EXIT("Entry No.");
      END;
    END;

    LOCAL PROCEDURE UpdateVariantCodeOnProdOrderComponent@19(ProductionOrderNo@1000 : Code[20];ItemNo@1001 : Code[20];VariantCode@1002 : Code[10]);
    VAR
      ProdOrderComponent@1003 : Record 5407;
    BEGIN
      SelectProdOrderComponent(ProdOrderComponent,ProductionOrderNo,ItemNo);
      ProdOrderComponent.VALIDATE("Variant Code",VariantCode);
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVariantCodeOnProdOrder@18(VAR ProdOrderLine@1000 : Record 5406;ProductionOrderNo@1002 : Code[20];ItemNo@1003 : Code[20];VariantCode@1001 : Code[10]);
    BEGIN
      SelectProdOrderLine(ProdOrderLine,ProductionOrderNo,ProdOrderLine.Status::Released,ItemNo);
      ProdOrderLine.VALIDATE("Variant Code",VariantCode);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVariantCodeOnSalesOrder@69(VAR SalesLine@1001 : Record 37;VariantCode@1002 : Code[10]);
    BEGIN
      SalesLine.VALIDATE("Variant Code",VariantCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVariantCodeOnPurchaseLine@17(VAR PurchaseLine@1000 : Record 39;VariantCode@1001 : Code[10]);
    BEGIN
      PurchaseLine.VALIDATE("Variant Code",VariantCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateLocationAndVariantOnProdOrderComponent@10(ProductionOrderNo@1001 : Code[20];ItemNo@1000 : Code[20];VariantCode@1005 : Code[10];LocationCode@1003 : Code[10];BinCode@1004 : Code[20]);
    VAR
      ProdOrderComponent@1002 : Record 5407;
    BEGIN
      SelectProdOrderComponent(ProdOrderComponent,ProductionOrderNo,ItemNo);
      ProdOrderComponent.VALIDATE("Variant Code",VariantCode);
      ProdOrderComponent.VALIDATE("Location Code",LocationCode);
      ProdOrderComponent.VALIDATE("Bin Code",BinCode);
      ProdOrderComponent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExpectedReceiptDateOnPurchaseLine@35(VAR PurchaseLine@1000 : Record 39;ExpectedReceiptDate@1001 : Date);
    BEGIN
      PurchaseLine.VALIDATE("Expected Receipt Date",ExpectedReceiptDate);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateShipmentDateOnSalesLine@110(VAR SalesLine@1000 : Record 37;ShipmentDate@1001 : Date);
    BEGIN
      SalesLine.VALIDATE("Shipment Date",ShipmentDate);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetRequiredDate@28(Days@1000 : Integer;IncludeAdditionalPeriod@1003 : Integer;RelativeDate@1001 : Date) : Date;
    BEGIN
      // Calculating a New Date relative to WorkDate.
      EXIT(CALCDATE('<' + FORMAT(LibraryRandom.RandInt(Days) + IncludeAdditionalPeriod) + 'D>',RelativeDate));
    END;

    LOCAL PROCEDURE CreateAndPostItemJournal@8(ItemNo@1000 : Code[20];EntryType@1004 : Option;Quantity@1001 : Decimal;PostJournal@1002 : Boolean);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
      IF PostJournal THEN
        LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithTwoLinesAndLocation@24(VAR PurchaseHeader@1000 : Record 38;Bin@1001 : Record 7354;ItemNo@1002 : Code[20];ItemNo2@1003 : Code[20];ItemVariantCode@1004 : Code[10];LocationCode@1005 : Code[10];Quantity@1008 : Decimal);
    VAR
      PurchaseLine@1006 : Record 39;
    BEGIN
      CreatePurchaseOrderWithLocationAndVariant(PurchaseHeader,PurchaseLine,ItemNo,Quantity,ItemVariantCode,LocationCode,Bin.Code);
      Bin.NEXT;
      CreatePurchaseLineWithLocationAndVariant(PurchaseHeader,PurchaseLine,ItemNo2,Quantity,'',LocationCode,Bin.Code);  // Variant Code as Blank.
    END;

    LOCAL PROCEDURE VerifyOrderTracking@49(VAR OrderTracking@1004 : TestPage 99000822);
    VAR
      UntrackedQuantity@1003 : Variant;
      TotalQuantity@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TotalQuantity);  // Dequeue variable.
      LibraryVariableStorage.Dequeue(UntrackedQuantity);  // Dequeue variable.
      OrderTracking."Total Quantity".ASSERTEQUALS(TotalQuantity);
      OrderTracking."Untracked Quantity".ASSERTEQUALS(UntrackedQuantity);
    END;

    LOCAL PROCEDURE VerifyQuantityOnOrderTracking@48(VAR OrderTracking@1001 : TestPage 99000822);
    VAR
      Quantity@1003 : Variant;
      LineQuantity@1002 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(Quantity);
      LineQuantity := Quantity;  // Assign Variant to Decimal.
      OrderTracking.Quantity.ASSERTEQUALS(-LineQuantity);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@30(Message@1000 : Text[1024]);
    VAR
      QueuedMessage@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(QueuedMessage);  // Dequeue variable.
      Assert.IsTrue(STRPOS(Message,QueuedMessage) > 0,Message);
    END;

    [ModalPageHandler]
    PROCEDURE OrderTrackingPageHandler@22(VAR OrderTracking@1001 : TestPage 99000822);
    BEGIN
      // Verify required Quantity values - Total Quantity and Untracked Quantity.
      VerifyOrderTracking(OrderTracking);
    END;

    [ModalPageHandler]
    PROCEDURE OrderTrackingDetailsPageHandler@63(VAR OrderTracking@1001 : TestPage 99000822);
    BEGIN
      // Verify required Quantity values - Total Quantity, Untracked Qty and Quantity.
      VerifyOrderTracking(OrderTracking);
      VerifyQuantityOnOrderTracking(OrderTracking);
    END;

    [ModalPageHandler]
    PROCEDURE OrderTrackingMultipleLinePageHandler@98(VAR OrderTracking@1001 : TestPage 99000822);
    BEGIN
      // Verify required Quantity values - Total Quantity, Untracked Qty and Quantity.
      VerifyOrderTracking(OrderTracking);
      VerifyQuantityOnOrderTracking(OrderTracking);
      OrderTracking.NEXT;
      VerifyQuantityOnOrderTracking(OrderTracking);
    END;

    BEGIN
    {
      // [FEATURE] [Order Tracking] [SCM]
      Test Order Tracking:
        1. Create Released Production Order, Open Order Tracking page from Production Order and Verify required Quantity values.
        2. Create multiple Released Production Order, Create Requisition line. Open Order Tracking page from Production Order and Verify required Quantity values.
        3. Create Purchase Order with Variant and Released Production Order. Open Order Tracking page from Production Component with Variant and Verify required Quantity values.
        4. Create Purchase Order with Variant and Released Production Order. Open Order Tracking page from Production Component without Variant and Verify required Quantity values.
        5. Create Purchase Order and Sales Order. Open Order Tracking page from Sales Order and Verify required Quantity values.
        6. Create Sales Order and Item Journal line with Positive adjustment. Open Order Tracking page from Sales Order and Verify required Quantity values.
        7. Create Sales Order, Create Item Journal line with Positive adjustment and Post it. Open Order Tracking page from Sales Order and Verify required Quantity values.
        8. Create Purchase Order with Location and Bin Code and Released Production Order. Open Order Tracking page from Purchase Order with Location and Bin Code and Verify required Quantity values.
        9. Create Purchase Order with Location and Bin Code and Released Production Order. Open Order Tracking page from Production Component with Location and Bin Code and Verify required Quantity values.
       10. Create Sales Order with Variant, Create Release Production Order with Variant. Open Order Tracking page from Sales Order and Verify required Quantity values.
       11. Create Purchase Order with Variant, Location and Bin Code and Released Production Order. Open Order Tracking page from ProdOrder Component Without Variant and Verify required Quantity values.
       12. Create Purchase Order with Variant, Location and Bin Code and Released Production Order. Open Order Tracking page from ProdOrder Component with Variant and Verify required Quantity values.
       13. Create Purchase Order with Variant, Location and Bin Code and Released Production Order. Update Variant Code on Purchase Line, Open Order Tracking page from ProdOrder Component with Variant and Verify required Quantity values.
       14. Create Firm Planned and Released Production Order, Open Order Tracking page from Firm Planned Production Order and Verify required Quantity values.
       15. Create Firm Planned and Released Production Order, Open Order Tracking page from Released Production Order and Verify required Quantity values.
       16. Create Purchase Order and Released Production Order, Open Order Tracking page from Production Order Component and Verify required Quantity values.
       17. Create Sales Order, Purchase Order and Released Production Order, Open Order Tracking page from Sales Order and Verify required Quantity values.
       18. Create Purchase Order, Create and Post Item Journal for Negative Adjustment, Open Order Tracking page from Purchase Order and Verify required Quantity values.
       19. Create Sales Credit Memo and Sales Order, Open Order Tracking page from Sales Order and Verify required Quantity values.
       20. Create and Post Sales Credit Memo, Create Sales Order, Open Order Tracking page from Sales Order and Verify required Quantity values.

        Covers Test Cases: TFS_TS_ID = 290162
        ----------------------------------------------------------------------------------
        Test Function Name                                                    TFS ID
        ----------------------------------------------------------------------------------
        OrderTrackingOnReleasedProdOrder                                      126574
        OrderTrackingOnReleasedProdOrderWithRequisitionLine                   126574
        OrderTrackingOnProdOrderComponentWithVariant                          127746
        OrderTrackingOnProdOrderComponentWithoutVariant                       127746
        OrderTrackingOnSalesOrderWithPurchaseOrder                            127747
        OrderTrackingOnSalesOrderWithPositiveAdjmtWithoutPosting              127748
        OrderTrackingOnSalesOrderWithPositiveAdjmtWithPosting                 127748

        Covers Test Cases: TFS_TS_ID = 290163
        ----------------------------------------------------------------------------------
        Test Function Name                                                    TFS ID
        ----------------------------------------------------------------------------------
        OrderTrackingOnPurchaseWithLocation                                   127749
        OrderTrackingOnProdOrderComponentWithLocation                         127749
        OrderTrackingOnSalesWithVariant                                       127750
        OrderTrackingOnProdOrderComponentWithLocationAndWithoutVariant        127751
        OrderTrackingOnProdOrderComponentWithVariantAndLocation               127751
        OrderTrackingOnProdOrderComponentWithUpdatedVariant                   127751

        Covers Test Cases: TFS_TS_ID = 290238 and 290390
        ----------------------------------------------------------------------------------
        Test Function Name                                                    TFS ID
        ----------------------------------------------------------------------------------
        OrderTrackingOnFirmPlannedProdOrder                                   127752
        OrderTrackingOnReleasedProdOrderForFirmPlannedProdOrder               127752
        OrderTrackingOnProdOrderComponentForPurchaseOrder                     127753
        OrderTrackingOnSalesOrderForPurchaseOrderAndProdOrder                 127753
        OrderTrackingOnPurchaseOrderForNegativeAdjustment                     127754
        OrderTrackingOnSalesOrderForSalesCreditMemoWithoutPosting             127755
        OrderTrackingOnSalesOrderForSalesCreditMemoWithPosting                127755
    }
    END.
  }
}

