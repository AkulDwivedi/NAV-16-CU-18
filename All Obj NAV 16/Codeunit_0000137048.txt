OBJECT Codeunit 137048 SCM Warehouse II
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalBatch@1008 : Record 233;
      WarehouseEmployee@1007 : Record 7301;
      LocationGreen@1033 : Record 14;
      LocationBlue@1034 : Record 14;
      LocationOrange@1001 : Record 14;
      LocationOrange2@1004 : Record 14;
      LocationWhite@1015 : Record 14;
      LocationRed@1039 : Record 14;
      LocationIntransit@1005 : Record 14;
      WarehouseJournalTemplate@1026 : Record 7309;
      WarehouseJournalBatch@1025 : Record 7310;
      Assert@1002 : Codeunit 130000;
      LibraryWarehouse@1009 : Codeunit 132204;
      LibraryInventory@1016 : Codeunit 132201;
      LibraryManufacturing@1017 : Codeunit 132202;
      LibrarySales@1037 : Codeunit 130509;
      LibraryPurchase@1038 : Codeunit 130512;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryRandom@1006 : Codeunit 130440;
      WarehouseShipmentNo@1014 : Code[20];
      NewUnitOfMeasure@1013 : Code[10];
      SourceNo@1023 : Code[20];
      isInitialized@1000 : Boolean;
      BinError@1003 : TextConst 'ENU=Bin Code must be%1 in %2.';
      BinError2@1041 : TextConst 'ENU=Bin Code must be %1 in %2.';
      QuantityError@1011 : TextConst 'ENU=Quantity must be %1 in %2.';
      ErrorText@1018 : TextConst 'ENU="You can create a Pick only for the available quantity in Whse. Worksheet Line "';
      ErrorQtyToHandleText@1019 : TextConst 'ENU="Qty. to Ship must not be greater than 0 units in Warehouse Shipment Line No.=''%1''"';
      ErrorMessage@1022 : TextConst 'ENU=Wrong Error Message';
      QtyErrorText@1024 : TextConst 'ENU="Qty. (Base) must be equal to ''%1''  in Warehouse Shipment Line: No.=%2, Line No.=%3. Current value is ''%4''."';
      UnexpectedMessageDialog@1027 : TextConst 'ENU=Unexpected Message dialog %1.';
      DisregardMessage@1028 : TextConst 'ENU=The entered information may be disregarded by warehouse operations.';
      DeletedMessage@1029 : TextConst 'ENU=has been deleted.';
      HandlingError@1032 : TextConst 'ENU=Nothing to handle.';
      LocationCode2@1035 : Code[10];
      PickActivityMessage@1040 : TextConst 'ENU="Pick activity no. "';
      PutAwayActivityMessage@1178 : TextConst 'ENU="Put-away activity no. "';
      NonWarehouseErr@1043 : TextConst 'ENU=Directed Put-away and Pick must have a value';
      BinContentGetCaptionErr@1044 : TextConst 'ENU=BinContent.GetCaption does not work with %1';

    [Test]
    PROCEDURE TransferWhseShipment@93();
    VAR
      Item@1000 : Record 27;
      TransferHeader@1006 : Record 5740;
      TransferLine@1003 : Record 5741;
      WarehouseShipmentLine@1010 : Record 7321;
      BinCode@1001 : Code[20];
      WarehouseShipmentNo@1002 : Code[20];
    BEGIN
      // Setup : Create Item, Transfer Order.
      Initialize;
      BinCode := CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      CreateAndRealeaseTransferOrder(
        TransferHeader,TransferLine,Item."No.",LocationOrange.Code,LocationOrange2.Code,LocationIntransit.Code);
      WarehouseShipmentNo := FindWarehouseShipmentNo;

      // Exercise: Create Warehouse Shipment from Transfer Order.
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);

      // Verify : Check that Bin Code is same as on Transfer Order.
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentNo);
      Assert.AreEqual(BinCode,WarehouseShipmentLine."Bin Code",STRSUBSTNO(BinError,BinCode,WarehouseShipmentLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE TransferWhseCreatePick@80();
    VAR
      Item@1008 : Record 27;
      TransferHeader@1005 : Record 5740;
      TransferLine@1004 : Record 5741;
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseActivityLine@1006 : Record 5767;
      BinCode@1003 : Code[20];
      BinCode2@1009 : Code[20];
      WarehouseShipmentNo@1002 : Code[20];
    BEGIN
      // Setup : Create Item, Transfer Order, Create Warehouse Shipment from Transfer Order and change bin code on Shipment Line.
      Initialize;
      BinCode := CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      CreateAndRealeaseTransferOrder(
        TransferHeader,TransferLine,Item."No.",LocationOrange.Code,LocationOrange2.Code,LocationIntransit.Code);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      WhseShipFromTOWithNewBinCode(BinCode2,TransferHeader,WarehouseShipmentNo,LocationOrange.Code);

      // Exercise: Create Pick.
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);

      // Verify: Check that Place Bin Code is same as changed on shipment line and Take Bin Code as transfer order line.
      VerifyBinCode(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,LocationOrange.Code,
        TransferHeader."No.",BinCode);
      VerifyBinCode(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Place,LocationOrange.Code,
        TransferHeader."No.",BinCode2);
    END;

    [Test]
    PROCEDURE TransferWhseReceipt@35();
    VAR
      Item@1000 : Record 27;
      TransferHeader@1006 : Record 5740;
      TransferLine@1007 : Record 5741;
      WarehouseShipmentHeader@1011 : Record 7320;
      WarehouseActivityHeader@1012 : Record 5766;
      WarehouseReceiptLine@1017 : Record 7317;
      BinCode2@1009 : Code[20];
      WarehouseReceiptNo@1003 : Code[20];
      WarehouseShipmentNo@1004 : Code[20];
    BEGIN
      // Setup : Create Item, Transfer Order, Create Warehouse Shipment from Transfer Order and change bin code on Shipment Line and Post
      // Warehouse Shipment.
      Initialize;
      CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      CreateAndRealeaseTransferOrder(
        TransferHeader,TransferLine,Item."No.",LocationOrange.Code,LocationOrange2.Code,LocationIntransit.Code);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      WhseShipFromTOWithNewBinCode(BinCode2,TransferHeader,WarehouseShipmentNo,LocationOrange.Code);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);
      RegisterWarehouseActivity(TransferHeader."No.",WarehouseActivityHeader.Type::Pick);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,TRUE);

      // Exercise: Create Warehouse Receipt from Transfer Order.
      LibraryWarehouse.CreateWhseReceiptFromTO(TransferHeader);

      // Verify: Check that Warehouse Receipt Line Bin Code is same as Transfer To Bin Code.
      WarehouseReceiptNo := FindWarehouseReceiptNo(WarehouseReceiptLine."Source Document"::"Inbound Transfer",TransferHeader."No.");
      WarehouseReceiptLine.SETRANGE("No.",WarehouseReceiptNo);
      WarehouseReceiptLine.FINDFIRST;
      Assert.AreEqual(
        TransferLine."Transfer-To Bin Code",WarehouseReceiptLine."Bin Code",
        STRSUBSTNO(BinError,TransferLine."Transfer-To Bin Code",WarehouseReceiptLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(ShipmentReceiptDeleteMessageHandler)]
    PROCEDURE TransferPostWhseReceipt@24();
    VAR
      Item@1008 : Record 27;
      TransferHeader@1007 : Record 5740;
      TransferLine@1006 : Record 5741;
      WarehouseReceiptLine@1005 : Record 7317;
      WarehouseActivityHeader@1004 : Record 5766;
      WarehouseActivityLine@1009 : Record 5767;
      WarehouseShipmentHeader@1002 : Record 7320;
      BinCode2@1001 : Code[20];
      WarehouseShipmentNo@1000 : Code[20];
    BEGIN
      // Setup : Create Item, Transfer Order, Create Warehouse Shipment from Transfer Order and change bin code on Shipment Line and Post
      // Warehouse Shipment.
      Initialize;
      CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      CreateAndRealeaseTransferOrder(
        TransferHeader,TransferLine,Item."No.",LocationOrange.Code,LocationOrange2.Code,LocationIntransit.Code);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      WhseShipFromTOWithNewBinCode(BinCode2,TransferHeader,WarehouseShipmentNo,LocationOrange.Code);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);
      RegisterWarehouseActivity(TransferHeader."No.",WarehouseActivityHeader.Type::Pick);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,TRUE);
      LibraryWarehouse.CreateWhseReceiptFromTO(TransferHeader);

      // Exercise:
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Inbound Transfer",TransferHeader."No.");

      // Verify: Check that Take and Place Bin Code is same as changed on Transfer To Bin Code on Warehouse Activity Line.
      VerifyBinCode(
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Take,LocationOrange2.Code,
        TransferHeader."No.",TransferLine."Transfer-To Bin Code");
      // The program selectes first bin that is not shipment bin, receipt bin or posted whse receipt line (take line) bin (look into help). As result we need to check negative condition
      VerifyBinCodeNotEqual(
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,LocationOrange2.Code,
        TransferHeader."No.",TransferLine."Transfer-To Bin Code");
      VerifyBinCodeNotEqual(
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,LocationOrange2.Code,
        TransferHeader."No.",'');
    END;

    [Test]
    [HandlerFunctions(ShipmentReceiptDeleteMessageHandler)]
    PROCEDURE TransferRegisterPutAway@17();
    VAR
      Item@1010 : Record 27;
      TransferHeader@1007 : Record 5740;
      TransferLine@1004 : Record 5741;
      WarehouseReceiptLine@1002 : Record 7317;
      WarehouseActivityHeader@1005 : Record 5766;
      BinContent@1011 : Record 7302;
      WarehouseShipmentHeader@1006 : Record 7320;
      BinCode2@1001 : Code[20];
      WarehouseShipmentNo@1000 : Code[20];
    BEGIN
      // Setup : Create Item, Transfer Order, Create Warehouse Shipment from Transfer Order and change bin code on Shipment Line and Post
      // Warehouse Shipment and Post Warehouse Receipt.
      Initialize;
      CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      CreateAndRealeaseTransferOrder(
        TransferHeader,TransferLine,Item."No.",LocationOrange.Code,LocationOrange2.Code,LocationIntransit.Code);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      WhseShipFromTOWithNewBinCode(BinCode2,TransferHeader,WarehouseShipmentNo,LocationOrange.Code);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);
      RegisterWarehouseActivity(TransferHeader."No.",WarehouseActivityHeader.Type::Pick);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,TRUE);
      LibraryWarehouse.CreateWhseReceiptFromTO(TransferHeader);
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Inbound Transfer",TransferHeader."No.");

      // Exercise: Register Put Away.
      RegisterWarehouseActivity(TransferHeader."No.",WarehouseActivityHeader.Type::"Put-away");

      // Verify: Check That Bin Content Quantity is same as Quantity on Transfer Order.
      FindBinContent(BinContent,LocationOrange2.Code,Item."No.");
      BinContent.CALCFIELDS(Quantity);
      Assert.AreEqual(
        TransferLine.Quantity,BinContent.Quantity,STRSUBSTNO(QuantityError,TransferLine.Quantity,TransferLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE WhseCreateSalesOrder@16();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      Item@1008 : Record 27;
      BinCode@1002 : Code[20];
    BEGIN
      // Setup : Create Item, Bin Content for the item.
      Initialize;
      BinCode := CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.

      // Exercise.
      CreateSalesOrder(SalesHeader,SalesLine,LocationOrange.Code,Item."No.",LibraryRandom.RandDec(10,2),WORKDATE);

      // Verify: Check that Bin Code is same as Default Bin Code.
      SalesLine.TESTFIELD("Bin Code",BinCode);
    END;

    [Test]
    PROCEDURE SalesWhseShipment@13();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1001 : Record 37;
      WarehouseShipmentLine@1000 : Record 7321;
      Item@1010 : Record 27;
      BinCode@1004 : Code[20];
      WarehouseShipmentNo@1002 : Code[20];
    BEGIN
      // Setup : Create Item, Bin Content for the Item and Create and Release Sales Order.
      Initialize;
      BinCode := CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      CreateSalesOrder(SalesHeader,SalesLine,LocationOrange.Code,Item."No.",LibraryRandom.RandDec(10,2),WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      WarehouseShipmentNo := FindWarehouseShipmentNo;

      // Exercise.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // Verify: Check That Bin Code on Warehouse Shipment Line is same as Bin Code as on Sales Line.
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentNo);
      Assert.AreEqual(BinCode,WarehouseShipmentLine."Bin Code",STRSUBSTNO(BinError,BinCode,WarehouseShipmentLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SalesCreatePick@14();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      Item@1011 : Record 27;
      WarehouseShipmentHeader@1008 : Record 7320;
      WarehouseActivityLine@1002 : Record 5767;
      BinCode@1005 : Code[20];
      WarehouseShipmentNo@1003 : Code[20];
      BinCode2@1012 : Code[20];
    BEGIN
      // Setup : Create Item, Bin Content for the Item and Create and Release Sales Order, Create Warehouse Shipment.
      Initialize;
      BinCode := CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      CreateSalesOrder(SalesHeader,SalesLine,LocationOrange.Code,Item."No.",LibraryRandom.RandDec(10,2),WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      WhseShipFromSOWithNewBinCode(BinCode2,SalesHeader,WarehouseShipmentNo,LocationOrange.Code);

      // Exercise.
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);

      // Verify: Check that Place Bin Code is same as changed on shipment line and Take Bin Code as Bin Code on Sales order line.
      VerifyBinCode(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,LocationOrange.Code,SalesHeader."No.",
        BinCode);
      VerifyBinCode(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Place,LocationOrange.Code,SalesHeader."No.",
        BinCode2);
    END;

    [Test]
    PROCEDURE SalesRegisterPickPostShipment@18();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1000 : Record 37;
      Item@1013 : Record 27;
      WarehouseShipmentHeader@1010 : Record 7320;
      WarehouseActivityHeader@1009 : Record 5766;
      WarehouseEntry@1003 : Record 7312;
      BinCode@1007 : Code[20];
      WarehouseShipmentNo@1005 : Code[20];
      BinCode2@1001 : Code[20];
    BEGIN
      // Setup : Create Item, Bin Content for the Item and Create and Release Sales Order, Create Warehouse Shipment, Create And
      // Register Pick.
      Initialize;
      BinCode := CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      CreateSalesOrder(SalesHeader,SalesLine,LocationOrange.Code,Item."No.",LibraryRandom.RandDec(10,2),WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      WhseShipFromSOWithNewBinCode(BinCode2,SalesHeader,WarehouseShipmentNo,LocationOrange.Code);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityHeader.Type::Pick);

      // Exercise.
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,TRUE);

      // Verify: Check that Warehouse Entry Quantity and Bin Code are same as Sales Line after change Bin Code on Warehouse Shipment Line.
      FindWarehouseEntry(WarehouseEntry,Item."No.",LocationOrange.Code);
      VerifyWarehouseEntry(WarehouseEntry,BinCode,-SalesLine.Quantity);
      WarehouseEntry.NEXT;
      VerifyWarehouseEntry(WarehouseEntry,BinCode2,SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(DisregardedMessageHandler)]
    PROCEDURE SalesDefaultBinWarningMessage@21();
    VAR
      Item@1013 : Record 27;
      BinContent@1008 : Record 7302;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      Bin@1000 : Record 7354;
    BEGIN
      // Setup : Create Item, Bin Content for the Item and Create Sales Order.
      Initialize;
      CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      CreateSalesOrder(SalesHeader,SalesLine,LocationOrange.Code,Item."No.",LibraryRandom.RandDec(10,2),WORKDATE);
      LibraryWarehouse.FindBin(Bin,LocationOrange.Code,'',2);
      LibraryWarehouse.CreateBinContent(BinContent,LocationOrange.Code,'',Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      UpdateItemInventory(Item."No.",LocationOrange.Code,Bin.Code,LibraryRandom.RandDec(100,2) + 100);

      // Exercise, Verify : Change Bin Code and check that warning message is Pop Out or Not. Verification is done under Message Handler.
      SalesLine.VALIDATE("Bin Code",Bin.Code);
    END;

    [Test]
    PROCEDURE WhseCreatePurchaseOrder@11();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      Item@1001 : Record 27;
      BinCode@1000 : Code[20];
    BEGIN
      // Setup : Create Item, Bin Content for the item.
      Initialize;
      BinCode := CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.

      // Exercise.
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,LocationOrange.Code,Item."No.");

      // Verify: Check that Bin Code is same as Default Bin Code.
      PurchaseLine.TESTFIELD("Bin Code",BinCode);
    END;

    [Test]
    PROCEDURE PurchaseWarehouseReceipt@33();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      WarehouseReceiptLine@1005 : Record 7317;
      Item@1001 : Record 27;
      BinCode@1000 : Code[20];
      WarehouseReceiptNo@1004 : Code[20];
    BEGIN
      // Setup : Create Item, Bin Content for the Item and Create and Release Sales Order.
      Initialize;
      BinCode := CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.

      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,LocationOrange.Code,Item."No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);

      // Exercise:
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      // Verify: Check That Bin Code on Warehouse Receipt Line is same as Bin Code as on Purchase Line.
      WarehouseReceiptNo := FindWarehouseReceiptNo(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptNo);
      Assert.AreEqual(BinCode,WarehouseReceiptLine."Bin Code",STRSUBSTNO(BinError,BinCode,WarehouseReceiptLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE PurchasePutAway@39();
    VAR
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      WarehouseActivityLine@1007 : Record 5767;
      WarehouseReceiptLine@1003 : Record 7317;
      Item@1002 : Record 27;
      BinCode@1001 : Code[20];
    BEGIN
      // Setup : Create Item, Bin Content for the Item and Create and Release Sales Order.
      Initialize;
      BinCode := CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.

      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,LocationOrange.Code,Item."No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      // Exercise:
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");

      // Verify: Check that Take and Place Bin Code is same as Receipt line Bin Code.
      VerifyBinCode(
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Take,LocationOrange.Code,
        PurchaseHeader."No.",BinCode);
      // The program selectes first bin that is not shipment bin, receipt bin or posted whse receipt line (take line) bin (look into help). As result we need to check negative condition
      VerifyBinCodeNotEqual(
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,LocationOrange.Code,
        PurchaseHeader."No.",BinCode);
      VerifyBinCodeNotEqual(
        WarehouseActivityLine."Activity Type"::"Put-away",WarehouseActivityLine."Action Type"::Place,LocationOrange.Code,
        PurchaseHeader."No.",'');
    END;

    [Test]
    PROCEDURE PurchaseChangeBinAndRegister@42();
    VAR
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      WarehouseActivityLine@1007 : Record 5767;
      WarehouseReceiptLine@1003 : Record 7317;
      Item@1002 : Record 27;
      WarehouseEntry@1009 : Record 7312;
      BinCode@1001 : Code[20];
      BinCode2@1008 : Code[20];
    BEGIN
      // Setup : Create Item, Bin Content for the Item and Create and Release Sales Order.
      Initialize;
      BinCode := CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,LocationOrange.Code,Item."No.");
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");

      // Exercise: Change Bin Code on Put Away Line and Register Put Away.
      ChangeBinCodeOnActivityLine(BinCode2,PurchaseHeader."No.",LocationOrange.Code);
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");

      // Verify: Check that Warehouse Entry Quantity and Bin Code are same as Purchase Line after change Bin Code on
      // Put Away and Register.
      FindWarehouseEntry(WarehouseEntry,Item."No.",LocationOrange.Code);
      VerifyWarehouseEntry(WarehouseEntry,BinCode,-PurchaseLine.Quantity);
      WarehouseEntry.NEXT;
      VerifyWarehouseEntry(WarehouseEntry,BinCode2,PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(DisregardedMessageHandler)]
    PROCEDURE PurchDefaultBinWarningMessage@38();
    VAR
      Item@1013 : Record 27;
      BinContent@1008 : Record 7302;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      Bin@1000 : Record 7354;
    BEGIN
      // Setup : Create Item, Bin Content for the Item and Create Purchase Order.
      Initialize;
      CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,LocationOrange.Code,Item."No.");
      LibraryWarehouse.FindBin(Bin,LocationOrange.Code,'',2);  // Value required for Bin Index.
      LibraryWarehouse.CreateBinContent(BinContent,LocationOrange.Code,'',Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      UpdateItemInventory(Item."No.",LocationOrange.Code,Bin.Code,LibraryRandom.RandDec(100,2) + 100);

      // Exercise, Verify : Change Bin Code and check that warning message is Pop Out or Not. Verification is done under Message Handler.
      PurchaseLine.VALIDATE("Bin Code",Bin.Code);
    END;

    [Test]
    PROCEDURE ProductionOrderBinCode@25();
    VAR
      Item@1004 : Record 27;
      Item2@1011 : Record 27;
      Item3@1012 : Record 27;
      ProductionBOMHeader@1013 : Record 99000771;
      ProductionOrder@1014 : Record 5405;
      BinCode@1002 : Code[20];
    BEGIN
      // Setup : Create Item, Bin Content for the Item and Create Production BOM with Two Item of different Default Bin and
      // attached with Item.
      Initialize;
      BinCode := CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      CreateItemAddInventory(Item2,LocationOrange.Code,2);
      CreateItemAddInventory(Item3,LocationOrange.Code,3);
      CreateBOM(ProductionBOMHeader,Item2."No.",Item3."No.",LibraryRandom.RandDec(100,2));
      Item.FIND;
      ItemWithProductionBOM(Item,ProductionBOMHeader."No.");

      // Exercise: Create Firm Planned Production Order.
      CreateProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ProductionOrder."Source Type"::Item,Item."No.",LocationOrange.Code,
        LibraryRandom.RandDec(100,2),WORKDATE);

      // Verify: Check that Production Order Bin Code is same as Default Bin Code of Item.
      ProductionOrder.TESTFIELD("Bin Code",BinCode);
    END;

    [Test]
    PROCEDURE ProductionOrdComponentBinCode@43();
    VAR
      Item@1004 : Record 27;
      Item2@1011 : Record 27;
      Item3@1012 : Record 27;
      ProductionBOMHeader@1013 : Record 99000771;
      ProductionOrder@1014 : Record 5405;
      ProdOrderComponent@1015 : Record 5407;
      BinCode@1002 : Code[20];
      BinCode2@1001 : Code[20];
    BEGIN
      // Setup : Create Item, Bin Content for the Item and Create Production BOM with Two Item of different Default Bin and
      // attached with Item and Create Firm Planned Production Order.
      Initialize;
      CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      BinCode := CreateItemAddInventory(Item2,LocationOrange.Code,2);
      BinCode2 := CreateItemAddInventory(Item3,LocationOrange.Code,3);
      CreateBOM(ProductionBOMHeader,Item2."No.",Item3."No.",LibraryRandom.RandDec(100,2));
      Item.FIND;
      ItemWithProductionBOM(Item,ProductionBOMHeader."No.");
      CreateProdOrder(
        ProductionOrder,ProductionOrder.Status::"Firm Planned",ProductionOrder."Source Type"::Item,Item."No.",LocationOrange.Code,
        LibraryRandom.RandDec(100,2),WORKDATE);

      // Exercise:
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);

      // Verify: Verify that Bin Code of Production Order Component Item is same as default Bin Code of Item.
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrder."No.");
      VerifyBinOnProdOrdComponent(ProdOrderComponent,Item2."No.",BinCode);
      ProdOrderComponent.NEXT;
      VerifyBinOnProdOrdComponent(ProdOrderComponent,Item3."No.",BinCode2);
    END;

    [Test]
    [HandlerFunctions(PickSelectionPageHandler)]
    PROCEDURE BinCodeForPickUsingWorkSheet@73();
    VAR
      Bin@1003 : Record 7354;
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      salesLine@1006 : Record 37;
      WhseWorksheetLine@1005 : Record 7326;
      WarehouseActivityLine@1014 : Record 5767;
      WhseWorksheetName@1017 : Record 7327;
      WarehouseShipmentHeader@1010 : Record 7320;
      GetSourceDocOutbound@1007 : Codeunit 5752;
      BinCode@1002 : Code[20];
      Quantity@1004 : Decimal;
    BEGIN
      // Setup : Create Item, Update Inventory, Warehouse Shipment and Select Document from Pick Selection Page.
      Initialize;
      CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryWarehouse.FindBin(Bin,LocationOrange.Code,'',1);
      UpdateItemInventory(Item."No.",LocationOrange.Code,Bin.Code,Quantity);

      CreateAndReleaseSalesOrder(SalesHeader,salesLine,LocationOrange.Code,Item."No.",Quantity,WORKDATE);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      WhseShipFromSOWithNewBinCode(BinCode,SalesHeader,WarehouseShipmentNo,LocationOrange.Code);
      ReleaseWarehouseShipment(WarehouseShipmentHeader,WarehouseShipmentNo);
      LocationCode2 := LocationOrange.Code;  // Assign value to global variable for use in handler.

      // Create Pick Worksheet Template, Getsource Document and Select the Pick Line from Pick Selection Page.
      CreateWhseWorksheetName(WhseWorksheetName,LocationOrange.Code);
      GetSourceDocOutbound.GetSingleWhsePickDoc(
        WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationOrange.Code);
      FindWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationOrange.Code);

      // Exercise : Create Pick From Pick Worksheet.
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,10000,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        LocationOrange.Code,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);

      // Verify: Check that Take and Place Bin Code is same as expected.
      VerifyBinCode(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,LocationOrange.Code,SalesHeader."No.",
        Bin.Code);
      VerifyBinCode(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Place,LocationOrange.Code,SalesHeader."No.",
        BinCode);
    END;

    [Test]
    [HandlerFunctions(PickSelectionPageHandler)]
    PROCEDURE PickErrorForQtyWhseWorksheet@72();
    VAR
      Bin@1000 : Record 7354;
      Item@1025 : Record 27;
      SalesHeader@1024 : Record 36;
      SalesLine@1002 : Record 37;
      WhseWorksheetLine@1022 : Record 7326;
      WhseWorksheetName@1018 : Record 7327;
      WarehouseShipmentHeader@1014 : Record 7320;
      GetSourceDocOutbound@1012 : Codeunit 5752;
      BinCode@1001 : Code[20];
      Quantity@1010 : Decimal;
    BEGIN
      // Setup : Create Item, Update Inventory, Warehouse Shipment with more that inventory and Select Document from Pick Selection Page.
      Initialize;
      CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryWarehouse.FindBin(Bin,LocationOrange.Code,'',1);
      UpdateItemInventory(Item."No.",LocationOrange.Code,Bin.Code,Quantity);

      CreateAndReleaseSalesOrder(
        SalesHeader,SalesLine,LocationOrange.Code,Item."No.",Quantity + LibraryRandom.RandDec(100,2),WORKDATE);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      WhseShipFromSOWithNewBinCode(BinCode,SalesHeader,WarehouseShipmentNo,LocationOrange.Code);
      ReleaseWarehouseShipment(WarehouseShipmentHeader,WarehouseShipmentNo);
      LocationCode2 := LocationOrange.Code;  // Assign value to global variable for use in handler.

      // Create Pick Worksheet Template, Getsource Document and Select the Pick Line from Pick Selection Page.
      CreateWhseWorksheetName(WhseWorksheetName,LocationOrange.Code);
      GetSourceDocOutbound.GetSingleWhsePickDoc(
        WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationOrange.Code);
      FindWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationOrange.Code);
      AssignQtyToHndlOnWhseWrkSheet(WhseWorksheetLine,WhseWorksheetName,LocationOrange.Code);

      // Exercise : Create Pick From Pick Worksheet.
      ASSERTERROR LibraryWarehouse.CreatePickFromPickWorksheet(
          WhseWorksheetLine,10000,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationOrange.Code,'',0,0,0,
          FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);

      // Verify : Check that Last error is same as expected.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ErrorText) > 0,' ');
    END;

    [Test]
    PROCEDURE BinCodeForPickFromWhseShipment@70();
    VAR
      Bin@1000 : Record 7354;
      Item@1020 : Record 27;
      SalesHeader@1019 : Record 36;
      SalesLine@1002 : Record 37;
      WarehouseActivityLine@1001 : Record 5767;
      WarehouseShipmentHeader@1012 : Record 7320;
      BinCode@1009 : Code[20];
      Quantity@1005 : Decimal;
    BEGIN
      // Setup : Create Item, Update Inventory, Warehouse Shipment.
      Initialize;
      CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryWarehouse.FindBin(Bin,LocationOrange.Code,'',1);
      UpdateItemInventory(Item."No.",LocationOrange.Code,Bin.Code,Quantity);

      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,LocationOrange.Code,Item."No.",Quantity,WORKDATE);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      WhseShipFromSOWithNewBinCode(BinCode,SalesHeader,WarehouseShipmentNo,LocationOrange.Code);
      ReleaseWarehouseShipment(WarehouseShipmentHeader,WarehouseShipmentNo);

      // Exercise.
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);

      // Verify: Check that Take and Place Bin Code is same as expected.
      VerifyBinCode(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Take,LocationOrange.Code,SalesHeader."No.",
        Bin.Code);
      VerifyBinCode(
        WarehouseActivityLine."Activity Type"::Pick,WarehouseActivityLine."Action Type"::Place,LocationOrange.Code,SalesHeader."No.",
        BinCode);
    END;

    [Test]
    PROCEDURE CheckDefaultBin@66();
    VAR
      Bin@1002 : Record 7354;
      Item@1020 : Record 27;
      SalesHeader@1019 : Record 36;
      SalesLine@1003 : Record 37;
      WarehouseActivityHeader@1013 : Record 5766;
      WarehouseShipmentHeader@1012 : Record 7320;
      BinCode@1001 : Code[20];
      Quantity@1000 : Decimal;
    BEGIN
      // Setup : Create Item, Update Inventory, Warehouse Shipment.
      Initialize;
      CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryWarehouse.FindBin(Bin,LocationOrange.Code,'',1);
      UpdateItemInventory(Item."No.",LocationOrange.Code,Bin.Code,Quantity);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,LocationOrange.Code,Item."No.",Quantity,WORKDATE);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      WhseShipFromSOWithNewBinCode(BinCode,SalesHeader,WarehouseShipmentNo,LocationOrange.Code);
      ReleaseWarehouseShipment(WarehouseShipmentHeader,WarehouseShipmentNo);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);

      // Exercise : Register Pick Activity and Post Shipment.
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityHeader.Type::Pick);
      PostWarehouseShipment(WarehouseShipmentNo);

      // Verify : Posted shipment is same as sales.
      VerifyPostedShipment(SalesHeader);

      // Verify That Default Bin Code on Bin Content is First Warehouse Receipt Bin Code.
      VerifyDefaultBinContent(LocationOrange.Code,Item."No.",Bin.Code);
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentReportHandler,PickActivityMessageHandler)]
    PROCEDURE CreatePickFromProductionOrder@86();
    BEGIN
      // Check That Pick Document is same as Expected without changing Unit Of Measure and Create Pick from Production Order.
      PickForProductionOrder(FALSE);
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentReportHandler,PickActivityMessageHandler)]
    PROCEDURE RegisterPickForProductionOrder@85();
    BEGIN
      // Check That Register Pick Document is same as Pick document without changing Unit Of Measure.
      PickForProductionOrder(TRUE);
    END;

    LOCAL PROCEDURE PickForProductionOrder@30(RegisterPick@1000 : Boolean);
    VAR
      Item@1010 : Record 27;
      ProductionBOMHeader@1009 : Record 99000771;
      ItemUnitOfMeasure@1008 : Record 5404;
      PurchaseHeader@1007 : Record 38;
      PurchaseLine@1006 : Record 39;
      WarehouseActivityLine@1005 : Record 5767;
      WarehouseActivityHeader@1004 : Record 5766;
      ProductionOrder@1003 : Record 5405;
      Item2@1002 : Record 27;
      Item3@1001 : Record 27;
    BEGIN
      // Setup : Create Location, Item, Purchase Order, Create and Post Warehouse Receipt, Register Putaway,
      // Create Released Production Order, Create Pick from Production Order.
      Initialize;
      CreateBOMWithComponent(ProductionBOMHeader,Item2,Item3);
      CreateItem(Item);
      ItemWithProductionBOM(Item,ProductionBOMHeader."No.");
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item2."No.");
      NewUnitOfMeasure := ItemUnitOfMeasure.Code;  // Use Global Value for Handler Function.
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,LocationWhite.Code,Item2."No.");
      CreateAndPostWhseReceiptFromPO(PurchaseHeader);
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationWhite.Code,PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Place);
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityHeader.Type::"Put-away");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,Item."No.",LocationWhite.Code,
        LibraryRandom.RandDec(10,2),WORKDATE);

      // Exercise for CreatePickFromProductionOrder;
      ProductionOrder.CreatePick(USERID,0,FALSE,FALSE,FALSE);  // SetBreakBulkFilter False,DoNotFillQtyToHandle False,PrintDocument False
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationWhite.Code,ProductionOrder."No.",
        WarehouseActivityLine."Action Type"::Take);

      IF RegisterPick THEN BEGIN
        // Exercise : Register Pick.
        RegisterWarehouseActivity(ProductionOrder."No.",WarehouseActivityHeader.Type::Pick);

        // Verify : Verify That Register Pick Document is same as Pick document without changing Unit Of Measure.
        VerifyRegisteredWhseActivityLine(WarehouseActivityLine,Item."Base Unit of Measure",1,WarehouseActivityLine.Quantity);  // value is Quantity Per Unit Of Measure For Base Unit Of Measure.
      END ELSE
        VerifyWhseActivityLine(WarehouseActivityLine,Item."Base Unit of Measure",1,WarehouseActivityLine.Quantity);  // value is Quantity Per Unit Of Measure For Base Unit Of Measure.
    END;

    [Test]
    [HandlerFunctions(ChangeUOMRequestPageHandler)]
    PROCEDURE ChangeUOMAndCreatePutAway@57();
    BEGIN
      // Check That Put Away Document is same as Expected after run change Unit Of Measure.
      Initialize;
      PutAwayWithNewUOM(FALSE);
    END;

    [Test]
    [HandlerFunctions(ChangeUOMRequestPageHandler)]
    PROCEDURE ChangeUOMAndRegisterPutAway@59();
    BEGIN
      // Check That Register Put Document is same as Put Away Document after run change Unit Of Measure.
      Initialize;
      PutAwayWithNewUOM(TRUE);
    END;

    LOCAL PROCEDURE PutAwayWithNewUOM@94(RegisterPutAway@1000 : Boolean);
    VAR
      Item@1007 : Record 27;
      ItemUnitOfMeasure@1006 : Record 5404;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseActivityHeader@1002 : Record 5766;
      ExpectedQuantity@1001 : Decimal;
    BEGIN
      // Setup : Create Location, Item, Purchase Order, Create and Post Warehouse Receipt.
      CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      NewUnitOfMeasure := ItemUnitOfMeasure.Code;   // Use Global Value for Handler Function.
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,LocationWhite.Code,Item."No.");
      CreateAndPostWhseReceiptFromPO(PurchaseHeader);
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationWhite.Code,PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Place);
      ExpectedQuantity := WarehouseActivityLine.Quantity / ItemUnitOfMeasure."Qty. per Unit of Measure";

      // Exercise for ChangeUOMAndCreatePutAway;
      LibraryWarehouse.ChangeUnitOfMeasure(WarehouseActivityLine);

      IF RegisterPutAway THEN BEGIN
        // Exercise: Register Put Away.
        RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityHeader.Type::"Put-away");

        // Verify : Verify That Register Put Document is same as Put Away Document after change Unit Of Measure.
        VerifyRegisteredWhseActivityLine(
          WarehouseActivityLine,ItemUnitOfMeasure.Code,ItemUnitOfMeasure."Qty. per Unit of Measure",ExpectedQuantity);
      END ELSE
        VerifyWhseActivityLine(WarehouseActivityLine,NewUnitOfMeasure,ItemUnitOfMeasure."Qty. per Unit of Measure",ExpectedQuantity);
    END;

    [Test]
    [HandlerFunctions(ChangeUOMRequestPageHandler,WhseSourceCreateDocumentReportHandler,PickActivityMessageHandler)]
    PROCEDURE ChangeUOMAndCreatePickFromProductionOrder@54();
    BEGIN
      // Check That Pick Document is same as Expected with changing Unit Of Measure and Create Pick from Production Order.
      Initialize;
      ChangeUOMAndPickForProdOrder(FALSE);
    END;

    [Test]
    [HandlerFunctions(ChangeUOMRequestPageHandler,WhseSourceCreateDocumentReportHandler,PickActivityMessageHandler)]
    PROCEDURE ChangeUOMAndRegisterPickForProductionOrder@63();
    BEGIN
      // Check That Register Pick Document is same as Pick document with changing Unit Of Measure and Create Pick from Production Order.
      Initialize;
      ChangeUOMAndPickForProdOrder(TRUE);
    END;

    LOCAL PROCEDURE ChangeUOMAndPickForProdOrder@78(RegisterPick@1000 : Boolean);
    VAR
      Item@1011 : Record 27;
      ProductionBOMHeader@1010 : Record 99000771;
      ItemUnitOfMeasure@1009 : Record 5404;
      PurchaseHeader@1008 : Record 38;
      PurchaseLine@1007 : Record 39;
      WarehouseActivityLine@1006 : Record 5767;
      WarehouseActivityHeader@1005 : Record 5766;
      ProductionOrder@1003 : Record 5405;
      Item2@1002 : Record 27;
      Item3@1001 : Record 27;
      ExpectedQuantity@1014 : Decimal;
    BEGIN
      // Setup : Create Location, Item, Purchase Order, Create and Post Warehouse Receipt, Change Unit Of Measure and Register Putaway.
      // Create Released Production Order, Create Pick from Production Order.
      CreateBOMWithComponent(ProductionBOMHeader,Item2,Item3);
      CreateItem(Item);
      ItemWithProductionBOM(Item,ProductionBOMHeader."No.");
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item2."No.");
      NewUnitOfMeasure := ItemUnitOfMeasure.Code;   // Use Global Value for Handler Function.
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,LocationWhite.Code,Item2."No.");
      CreateAndPostWhseReceiptFromPO(PurchaseHeader);
      ChangeUOMAndRegisterWhseAct(WarehouseActivityLine,LocationWhite.Code,PurchaseHeader."No.");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,Item."No.",LocationWhite.Code,
        LibraryRandom.RandDec(10,2),WORKDATE);

      // Exercise For ChangeUOMAndCreatePickFromProductionOrder.
      ProductionOrder.CreatePick(USERID,0,FALSE,FALSE,FALSE);
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationWhite.Code,ProductionOrder."No.",
        WarehouseActivityLine."Action Type"::Take);

      IF RegisterPick THEN BEGIN
        // Exercise : Register Pick.
        RegisterWarehouseActivity(ProductionOrder."No.",WarehouseActivityHeader.Type::Pick);

        // Verify : Verify That Register Pick Document is same as Pick document with changing Unit Of Measure.
        VerifyRegisteredWhseActivityLine(
          WarehouseActivityLine,NewUnitOfMeasure,ItemUnitOfMeasure."Qty. per Unit of Measure",WarehouseActivityLine.Quantity);
      END ELSE BEGIN
        ExpectedQuantity := CalculateExpectedQuantity(ProductionOrder."No.",Item2."No.",ItemUnitOfMeasure."Qty. per Unit of Measure");
        VerifyWhseActivityLine(WarehouseActivityLine,NewUnitOfMeasure,ItemUnitOfMeasure."Qty. per Unit of Measure",ExpectedQuantity);
      END;
    END;

    [Test]
    [HandlerFunctions(ReceiptTransferDeletedMessageHandler)]
    PROCEDURE TransferAndReceiveUsingWarehouseReceipt@90();
    VAR
      Item@1008 : Record 27;
      TransferHeader@1007 : Record 5740;
      TransferLine@1006 : Record 5741;
      WarehouseReceiptLine@1005 : Record 7317;
      WarehouseActivityHeader@1004 : Record 5766;
      WarehouseEntry@1000 : Record 7312;
    BEGIN
      // Setup : Create Item, Transfer Order and Post Warehouse Receipt.
      Initialize;

      CreateItem(Item);
      UpdateItemInventory(Item."No.",LocationBlue.Code,'',LibraryRandom.RandDec(100,2) + 100);
      CreateAndRealeaseTransferOrder(
        TransferHeader,TransferLine,Item."No.",LocationBlue.Code,LocationOrange.Code,LocationIntransit.Code);
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);
      LibraryWarehouse.CreateWhseReceiptFromTO(TransferHeader);
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Inbound Transfer",TransferHeader."No.");

      // Exercise: Register Put Away.
      RegisterWarehouseActivity(TransferHeader."No.",WarehouseActivityHeader.Type::"Put-away");

      // Verify : Check that Transfer Receipt Line expected when Made Transfer Receipt using Full WMS Setup.
      VerifyTransferReceipt(TransferLine);

      // Check Warehouse Entry has same data as expected.
      FindWarehouseEntry(WarehouseEntry,Item."No.",LocationOrange.Code);
      VerifyWarehouseEntry(WarehouseEntry,TransferLine."Transfer-To Bin Code",-TransferLine.Quantity);
      WarehouseEntry.NEXT;
      // The program selectes first bin that is not shipment bin, receipt bin or posted whse receipt line (take line) bin (look into help). As result we need to check negative condition
      Assert.AreNotEqual(TransferLine."Transfer-To Bin Code",WarehouseEntry."Bin Code",STRSUBSTNO(BinError2,
          TransferLine."Transfer-To Bin Code",WarehouseEntry.TABLECAPTION));
      Assert.AreNotEqual('',WarehouseEntry."Bin Code",STRSUBSTNO(BinError2,'',WarehouseEntry.TABLECAPTION));
      WarehouseEntry.TESTFIELD(Quantity,TransferLine.Quantity);
    END;

    [Test]
    PROCEDURE ShipTransferOrder@89();
    BEGIN
      Initialize;
      TransferOrderWithShipmentAndReceipt(TRUE);
    END;

    [Test]
    PROCEDURE ReceiveTransferOrder@88();
    BEGIN
      Initialize;
      TransferOrderWithShipmentAndReceipt(FALSE);
    END;

    LOCAL PROCEDURE TransferOrderWithShipmentAndReceipt@100(Ship@1005 : Boolean);
    VAR
      Item@1008 : Record 27;
      TransferHeader@1007 : Record 5740;
      TransferLine@1006 : Record 5741;
      WarehouseActivityHeader@1004 : Record 5766;
      WarehouseActivityLine@1009 : Record 5767;
      WarehouseShipmentHeader@1002 : Record 7320;
      BinCode2@1001 : Code[20];
      WarehouseShipmentNo@1000 : Code[20];
    BEGIN
      // Setup : Create Item, Transfer Order, Create Warehouse Shipment from Transfer Order and Post Warehouse Shipment.
      CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      LibraryWarehouse.CreateTransferHeader(TransferHeader,LocationOrange.Code,LocationBlue.Code,LocationIntransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,Item."No.",LibraryRandom.RandDec(100,2));
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      WhseShipFromTOWithNewBinCode(BinCode2,TransferHeader,WarehouseShipmentNo,LocationOrange.Code);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationOrange.Code,TransferHeader."No.",
        WarehouseActivityLine."Action Type"::Take);
      RegisterWarehouseActivity(TransferHeader."No.",WarehouseActivityHeader.Type::Pick);

      IF Ship THEN BEGIN
        PostWarehouseShipment(WarehouseShipmentNo);

        // Verify : Check that Transfer Shipment Line same data as expected when Ship Transfer Order.
        VerifyTransferShipment(TransferHeader."No.",Item."No.",TransferLine.Quantity,LocationBlue.Code,LocationOrange.Code);

        // Check Registered Pick Line with expected data.
        VerifyRegisteredWhseActivityLine(WarehouseActivityLine,Item."Base Unit of Measure",1,TransferLine.Quantity);
      END ELSE BEGIN
        PostWarehouseShipment(WarehouseShipmentNo);

        // Exercise:
        TransferHeader.GET(TransferHeader."No.");
        LibraryWarehouse.PostTransferOrder(TransferHeader,FALSE,TRUE);

        // Verify : Check that Transfer Receipt Line same data as expected when Ship Transfer Order using Full WMS Setup.
        VerifyTransferReceipt(TransferLine);
      END;
    END;

    [Test]
    PROCEDURE AutoFillQtyToShipInWhseShipment@87();
    VAR
      LocationGreen2@1001 : Record 14;
      SalesHeader@1002 : Record 36;
      SalesLine@1000 : Record 37;
      Item@1013 : Record 27;
      WarehouseShipmentLine@1008 : Record 7321;
      WarehouseShipmentNo@1005 : Code[20];
      Quantity@1006 : Decimal;
    BEGIN
      // Setup : Create Item, Create and Release Sales Order, Create Warehouse Shipment.
      Initialize;
      LibraryWarehouse.CreateLocationWMS(LocationGreen2,FALSE,FALSE,FALSE,TRUE,TRUE);  // BinMandatory FALSE,RequirePutAway FALSE,RequirePick FALSE,RequireReceive TRUE,RequireShipment TRUE
      CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2) + 100;
      UpdateItemInventory(Item."No.",LocationGreen2.Code,'',Quantity);
      CreateSalesOrder(SalesHeader,SalesLine,LocationGreen2.Code,Item."No.",Quantity,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentNo);

      // Exercise.
      WarehouseShipmentLine.AutofillQtyToHandle(WarehouseShipmentLine);

      // Verify : Check that Qty to Ship and Quantity is same as expected after run Auto Fill Qty.
      VerifyWarehouseShipmentLine(WarehouseShipmentNo,Item."No.",SalesLine.Quantity,SalesLine.Quantity);
    END;

    [Test]
    PROCEDURE QtyToShipErrorForWhseShipment@84();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1000 : Record 37;
      Item@1013 : Record 27;
      WarehouseShipmentLine@1008 : Record 7321;
      WarehouseShipmentNo@1005 : Code[20];
      Quantity@1001 : Decimal;
    BEGIN
      // Setup : Create Item, Create and Release Sales Order, Create Warehouse Shipment.
      Initialize;
      CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2) + 100;
      UpdateItemInventory(Item."No.",LocationGreen.Code,'',Quantity);
      CreateSalesOrder(SalesHeader,SalesLine,LocationGreen.Code,Item."No.",Quantity,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentNo);

      // Exercise.
      ASSERTERROR WarehouseShipmentLine.VALIDATE("Qty. to Ship",Quantity);

      // Verify : Check that Error Message is same as expected when we directly put Quantity in Qty to Ship Field when there is Require Pick on location.
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(ErrorQtyToHandleText,WarehouseShipmentNo)) > 0,ErrorMessage);
    END;

    [Test]
    PROCEDURE RegisterPartialPick@82();
    BEGIN
      // Check That Quantity To Ship on Warehouse Shipment Line is same as Partial Pick Quantity after Register Warehouse Activity.
      Initialize;
      PratialWarehouseShipment(TRUE);
    END;

    [Test]
    PROCEDURE RegisterPartialPickAndPostShipment@81();
    BEGIN
      // Check that Quantity on Posted Warehouse Shipment is same as Qty To Handle On Pick.
      Initialize;
      PratialWarehouseShipment(FALSE);
    END;

    LOCAL PROCEDURE PratialWarehouseShipment@23(RegisterOnly@1007 : Boolean);
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1000 : Record 37;
      Item@1013 : Record 27;
      WarehouseShipmentHeader@1010 : Record 7320;
      WarehouseActivityHeader@1009 : Record 5766;
      WarehouseActivityLine@1001 : Record 5767;
      WarehouseShipmentNo@1005 : Code[20];
      Quantity@1004 : Decimal;
      QtyToHandle@1006 : Decimal;
    BEGIN
      // Setup : Create Item, and Create and Release Sales Order, Create Warehouse Shipment, Create Pick and select partial Quantity and Register Pick.
      CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2) + 100;
      UpdateItemInventory(Item."No.",LocationGreen.Code,'',Quantity);
      CreateSalesOrder(SalesHeader,SalesLine,LocationGreen.Code,Item."No.",Quantity,WORKDATE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationGreen.Code,SalesHeader."No.",
        WarehouseActivityLine."Action Type"::" ");
      QtyToHandle := Quantity / 2 ;
      WarehouseActivityLine.VALIDATE("Qty. to Handle",QtyToHandle);
      WarehouseActivityLine.MODIFY(TRUE);
      IF RegisterOnly THEN BEGIN
        RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityHeader.Type::Pick);

        // Verify : Check That Quantity To Ship on Warehouse Shipment Line is same as Partial Pick Quantity after Register Warehouse Activity.
        VerifyWarehouseShipmentLine(WarehouseShipmentHeader."No.",Item."No.",QtyToHandle,SalesLine.Quantity);
      END ELSE BEGIN
        RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityHeader.Type::Pick);

        // Exercise.
        LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

        // Verify: Check that Quantity on Posted Warehouse Shipment is same as Qty To Handle On Pick.
        VerifyPostedWarehouseShipmentLine(LocationGreen.Code,Item."No.",WarehouseShipmentHeader."No.",SalesHeader."No.",QtyToHandle);
      END;
    END;

    [Test]
    [HandlerFunctions(SourceDocumentsPageHandler)]
    PROCEDURE CreatePutAwayForTwoPurchaseOrder@122();
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseHeader2@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchaseLine2@1010 : Record 39;
      Item@1002 : Record 27;
      WarehouseReceiptHeader@1009 : Record 7316;
      WarehouseActivityLine@1011 : Record 5767;
    BEGIN
      // Setup: Create Item, Create Two Purchase Order ,Create Warehouse Receipt and Select Created Purchase Order.
      Initialize;
      LocationCode2 := LocationOrange.Code;  // Assign value to global variable for use in handler.
      CreateItem(Item);
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,LocationOrange.Code,Item."No.");
      CreateAndReleasePurchaseOrder(PurchaseHeader2,PurchaseLine2,LocationOrange.Code,Item."No.");
      CreateWarehouseReceiptHeader(WarehouseReceiptHeader,LocationOrange.Code);
      GetSourceDocumentInbound(WarehouseReceiptHeader,PurchaseHeader."No.");
      GetSourceDocumentInbound(WarehouseReceiptHeader,PurchaseHeader2."No.");

      // Exercise :  Post Warehouse Receipt.
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify : Check That Put Away created from Warehouse Receipt have same data as on Diffrent Purchase Order.
      VerifyActivityLine(
        LocationOrange.Code,PurchaseHeader."No.",PurchaseLine."No.",Item."Base Unit of Measure",PurchaseLine.Quantity,
        WarehouseActivityLine."Activity Type"::"Put-away");
      VerifyActivityLine(
        LocationOrange.Code,PurchaseHeader2."No.",PurchaseLine2."No.",Item."Base Unit of Measure",PurchaseLine2.Quantity,
        WarehouseActivityLine."Activity Type"::"Put-away");

      // Exercise : Register Put Away.
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");

      // Verify : Check That  Registered Put Away is same as Put Away created from Warehouse Receipt have same data as on Diffrent Purchase Order.
      VerifyRegisteredActivityLine(
        WarehouseActivityLine."Activity Type"::"Put-away",LocationOrange.Code,PurchaseHeader."No.",PurchaseLine."No.",
        Item."Base Unit of Measure",PurchaseLine.Quantity);
      VerifyRegisteredActivityLine(
        WarehouseActivityLine."Activity Type"::"Put-away",LocationOrange.Code,PurchaseHeader2."No.",PurchaseLine2."No.",
        Item."Base Unit of Measure",PurchaseLine2.Quantity);
    END;

    [Test]
    [HandlerFunctions(SourceDocumentsPageHandler)]
    PROCEDURE CreatePickForTwoSalesOrder@121();
    VAR
      SalesHeader@1004 : Record 36;
      SalesHeader2@1000 : Record 36;
      SalesLine@1001 : Record 37;
      SalesLine2@1010 : Record 37;
      Item@1002 : Record 27;
      WarehouseShipmentHeader@1009 : Record 7320;
      WarehouseActivityLine@1011 : Record 5767;
    BEGIN
      // Setup. Create Item, Update Inventory, Create Two Sales Order, Create Warehouse Shipment and Select Created Sales Order.
      Initialize;
      LocationCode2 := LocationOrange.Code;  // Assign value to global variable for use in handler.
      CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,LocationOrange.Code,Item."No.",LibraryRandom.RandDec(10,2),WORKDATE);
      CreateAndReleaseSalesOrder(SalesHeader2,SalesLine2,LocationOrange.Code,Item."No.",LibraryRandom.RandDec(10,2),WORKDATE);
      CreateWarehouseShipmentHeader(WarehouseShipmentHeader,LocationOrange.Code);
      GetSourceDocumentOutbound(WarehouseShipmentHeader,SalesHeader."No.");
      GetSourceDocumentOutbound(WarehouseShipmentHeader,SalesHeader2."No.");

      // Exercise : Create Pick from Warehouse Shipment Header.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify : Check That Pick created from Warehouse Shipment have same data as on Diffrent Sales Order.
      VerifyActivityLine(
        LocationOrange.Code,SalesHeader."No.",SalesLine."No.",Item."Base Unit of Measure",SalesLine.Quantity,
        WarehouseActivityLine."Activity Type"::Pick);
      VerifyActivityLine(
        LocationOrange.Code,SalesHeader2."No.",SalesLine2."No.",Item."Base Unit of Measure",SalesLine2.Quantity,
        WarehouseActivityLine."Activity Type"::Pick);

      // Exercise : Register Pick.
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Verify : Check That Registered Pick is same as Pick created from Warehouse Shipment have same data as on Diffrent Sales Order.
      VerifyRegisteredActivityLine(
        WarehouseActivityLine."Activity Type"::Pick,LocationOrange.Code,SalesHeader."No.",SalesLine."No.",
        Item."Base Unit of Measure",SalesLine.Quantity);
      VerifyRegisteredActivityLine(
        WarehouseActivityLine."Activity Type"::Pick,LocationOrange.Code,SalesHeader2."No.",SalesLine2."No.",
        Item."Base Unit of Measure",SalesLine2.Quantity);
    END;

    [Test]
    [HandlerFunctions(SourceDocumentsPageHandler)]
    PROCEDURE PostShippingAdviceComplete@120();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1001 : Record 37;
      Item@1002 : Record 27;
      WarehouseShipmentHeader@1009 : Record 7320;
      WarehouseShipmentLine@1007 : Record 7321;
      WarehouseActivityLine@1011 : Record 5767;
      QtyToShip@1008 : Decimal;
    BEGIN
      // Setup: Create Item, Update Inventory, Create Sales Order With Shipping Advice Complete, Create Warehouse Shipment and Select Created Sales Order Create Pick And Change Quantity On Qty To Ship Of Warehouse Shipment.
      Initialize;
      CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      CreateSalesOrder(SalesHeader,SalesLine,LocationOrange.Code,Item."No.",LibraryRandom.RandDec(10,2) + 10,WORKDATE);
      SalesHeader.VALIDATE("Shipping Advice",SalesHeader."Shipping Advice"::Complete);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateWarehouseShipmentHeader(WarehouseShipmentHeader,LocationOrange.Code);
      LocationCode2 := LocationOrange.Code;  // Assign value to global variable for use in handler.
      GetSourceDocumentOutbound(WarehouseShipmentHeader,SalesHeader."No.");
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      QtyToShip := LibraryRandom.RandDec(10,2);
      UpdateQuantityOnWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentHeader."No.",QtyToShip);  // Change Quantity To Ship On Warehouse Shipment Line.

      // Exercise : Post Ware House Shipment.
      ASSERTERROR LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify : Check That Error Occurred while Posting Warehouse Shipment with Partial Quantity when Shipping Advice is Set to Complete in Sales Order.
      Assert.AreEqual(
        STRSUBSTNO(QtyErrorText,QtyToShip,WarehouseShipmentLine."No.",WarehouseShipmentLine."Line No.",SalesLine.Quantity),
        GETLASTERRORTEXT,ErrorMessage);
    END;

    [Test]
    [HandlerFunctions(SourceDocumentsPageHandler)]
    PROCEDURE PostCompleteSalesShipment@119();
    VAR
      Quantity@1015 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      PostShipment(Quantity,Quantity);
    END;

    [Test]
    [HandlerFunctions(SourceDocumentsPageHandler)]
    PROCEDURE PostPartialShipment@118();
    VAR
      Quantity@1015 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      PostShipment(Quantity,Quantity / 2);
    END;

    LOCAL PROCEDURE PostShipment@117(Quantity@1015 : Decimal;QtyToShip@1016 : Decimal);
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1001 : Record 37;
      Item@1002 : Record 27;
      WarehouseShipmentHeader@1009 : Record 7320;
      WarehouseShipmentLine@1007 : Record 7321;
      WarehouseActivityLine@1011 : Record 5767;
      PostedWhseShipmentLine@1013 : Record 7323;
      PostedWhseShipmentNo@1014 : Code[20];
    BEGIN
      // Create Item, Update Inventory, Create Sales Order , Create Warehouse Shipment and Select Created Sales Order Create Pick And Change Quantity On Qty To Ship Of Warehouse Shipment.
      CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,LocationOrange.Code,Item."No.",Quantity,WORKDATE);
      CreateWarehouseShipmentHeader(WarehouseShipmentHeader,LocationOrange.Code);
      LocationCode2 := LocationOrange.Code;  // Assign value to global variable for use in handler.
      GetSourceDocumentOutbound(WarehouseShipmentHeader,SalesHeader."No.");
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      UpdateQuantityOnWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentHeader."No.",QtyToShip);
      PostedWhseShipmentNo := FindPostedWhseShipmentNo;

      // Exercise : Post Warehouse Shipment.
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify : Check That Posted Warrehouse Shipment has same data as expected when Posting quantity is Partial or Complete.
      PostedWhseShipmentLine.SETRANGE("No.",PostedWhseShipmentNo);
      PostedWhseShipmentLine.FINDFIRST;
      PostedWhseShipmentLine.TESTFIELD("Item No.",SalesLine."No.");
      PostedWhseShipmentLine.TESTFIELD(Quantity,QtyToShip);

      // Verify That Quantity Shipped is update On Sales Line.
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      SalesLine.TESTFIELD("Quantity Shipped",QtyToShip);
    END;

    [Test]
    PROCEDURE ShipmentWithDifferentUOM@114();
    VAR
      Item@1001 : Record 27;
      ItemUnitOfMeasure@1002 : Record 5404;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseActivityLine@1011 : Record 5767;
      WarehouseShipmentNo@1007 : Code[20];
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Item, Item Unit Of Measure, Location, Update Inventory, Create Sales Order , Create Warehouse Shipment From Sales Order, Create And Register Pick , And Post Warehouse Shipment.
      Initialize;
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationWhite.Code,FALSE);
      CreateItem(Item);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.");
      Item.VALIDATE("Sales Unit of Measure",ItemUnitOfMeasure.Code);
      Item.MODIFY(TRUE);
      Quantity := LibraryRandom.RandDec(10,2);
      UpdateInventoryUsingWhseJournal(LocationWhite,Item,Quantity);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,LocationWhite.Code,Item."No.",Quantity,WORKDATE);
      WarehouseShipmentNo := FindWarehouseShipmentNo;

      LocationCode2 := LocationWhite.Code;  // Assignvalue to global variable for use in handler.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Execise : Post Warehouse Shipment.
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify : Check That Quantity Shipped and Out standing Quantity is same as expected when use Diffrent UOM.
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      SalesLine.TESTFIELD("Unit of Measure",ItemUnitOfMeasure.Code);
      SalesLine.TESTFIELD("Quantity Shipped",Quantity);
      SalesLine.TESTFIELD("Outstanding Quantity",SalesLine.Quantity - Quantity);
    END;

    [Test]
    [HandlerFunctions(SourceDocumentsPageHandler)]
    PROCEDURE PickErrorMultipleLinesWithBlankLocation@251();
    VAR
      SalesHeader@1007 : Record 36;
      SalesHeader2@1006 : Record 36;
      SalesLine@1001 : Record 37;
      SalesLine2@1004 : Record 37;
      Item@1003 : Record 27;
      WarehouseShipmentHeader@1002 : Record 7320;
    BEGIN
      // Setup: Update Warehouse Setup, create Item, create a Sales Order on blank location, create Warehouse Shipment.
      Initialize;
      UpdateWarehouseSetup(TRUE,TRUE);  // Update the Warehouse Setup with Require Receive and Require Shipment True.
      CreateItem(Item);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,'',Item."No.",LibraryRandom.RandDec(10,2),WORKDATE);
      CreateAndReleaseSalesOrder(SalesHeader2,SalesLine2,'',Item."No.",LibraryRandom.RandDec(10,2),WORKDATE);
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);

      // Assign values to global variable.
      LocationCode2 := '';
      GetSourceDocumentOutbound(WarehouseShipmentHeader,SalesHeader."No.");
      GetSourceDocumentOutbound(WarehouseShipmentHeader,SalesHeader2."No.");

      // Exercise : Create Pick from Warehouse Shipment Header.
      ASSERTERROR LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify that Pick is not created.
      Assert.ExpectedError(HandlingError);

      // Tear Down: Restore the original value of Warehouse Setup.
      UpdateWarehouseSetup(FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(SourceDocumentsPageHandler)]
    PROCEDURE PickErrorSingleLineWithBlankLocation@163();
    VAR
      SalesHeader@1007 : Record 36;
      SalesLine@1004 : Record 37;
      Item@1003 : Record 27;
      WarehouseShipmentHeader@1002 : Record 7320;
    BEGIN
      // Setup: Update Warehouse Setup, create Item, create a Sales Order on blank location, create Warehouse Shipment.
      Initialize;
      UpdateWarehouseSetup(TRUE,TRUE);  // Update the Warehouse Setup with Require Receive and Require Shipment True.
      CreateItem(Item);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,'',Item."No.",LibraryRandom.RandDec(10,2),WORKDATE);
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);

      // Assign values to global variable.
      LocationCode2 := '';
      GetSourceDocumentOutbound(WarehouseShipmentHeader,SalesHeader."No.");

      // Exercise : Create Pick from Warehouse Shipment Header.
      ASSERTERROR LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify that Pick is not created.
      Assert.ExpectedError(HandlingError);

      // Tear Down: Restore the original value of Warehouse Setup.
      UpdateWarehouseSetup(FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(PickSelectionPageHandler)]
    PROCEDURE CreatePickFromPickWorksheet@139();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1018 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseShipmentHeader@1008 : Record 7320;
      WhseWorksheetName@1022 : Record 7327;
      WhseWorksheetLine@1002 : Record 7326;
      WarehouseActivityHeader@1001 : Record 5766;
      GetSourceDocOutbound@1020 : Codeunit 5752;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Location, create Item, Update Inventory, Warehouse Shipment and select Document from Pick Selection page.
      Initialize;
      CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      UpdateItemInventory(Item."No.",LocationGreen.Code,'',Quantity);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,LocationGreen.Code,Item."No.",Quantity,WORKDATE);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      ReleaseWarehouseShipment(WarehouseShipmentHeader,WarehouseShipmentNo);

      LocationCode2 := LocationGreen.Code;  // Assign value to global variable for use in handler.
      // Create Pick Worksheet Template, get source Document and select the Pick Line from Pick Selection page, create Pick from Pick Worksheet.
      CreateWhseWorksheetName(WhseWorksheetName,LocationGreen.Code);
      GetSourceDocOutbound.GetSingleWhsePickDoc(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationGreen.Code);
      FindWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationGreen.Code);
      AssignQtyToHndlOnWhseWrkSheet(WhseWorksheetLine,WhseWorksheetName,LocationGreen.Code);
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,10000,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationGreen.Code,'',0,0,0,FALSE,
        FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityHeader.Type::Pick);

      // Exercise: Post Whse Shipment.
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,TRUE);

      // Verify: Verify the values on Posted Warehouse Shipment Line.
      VerifyPostedWarehouseShipmentLine(LocationGreen.Code,Item."No.",WarehouseShipmentHeader."No.",SalesHeader."No.",Quantity / 2);
    END;

    [Test]
    [HandlerFunctions(PickSelectionPageHandler)]
    PROCEDURE AvailablePickOnWarehouseWorksheet@124();
    VAR
      WhseWorksheetLine@1016 : Record 7326;
      Item@1014 : Record 27;
      SalesHeader@1013 : Record 36;
      SalesLine@1002 : Record 37;
      WarehouseShipmentHeader@1007 : Record 7320;
      WhseWorksheetName@1004 : Record 7327;
      GetSourceDocOutbound@1001 : Codeunit 5752;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Location, create Item, update Inventory, create a sales Order, create Warehouse Shipment.
      Initialize;
      CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      UpdateItemInventory(Item."No.",LocationGreen.Code,'',Quantity);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,LocationGreen.Code,Item."No.",Quantity,WORKDATE);

      // Assign value to global variable. Create Pick Worksheet Template, get source Document and select the Pick Line from Pick Selection page.
      LocationCode2 := LocationGreen.Code;
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      ReleaseWarehouseShipment(WarehouseShipmentHeader,WarehouseShipmentNo);
      CreateWhseWorksheetName(WhseWorksheetName,LocationGreen.Code);
      GetSourceDocOutbound.GetSingleWhsePickDoc(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationGreen.Code);
      FindWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationGreen.Code);

      // Exercise: Assign Quantity to handle on Whse. WorkSheet.
      AssignQtyToHndlOnWhseWrkSheet(WhseWorksheetLine,WhseWorksheetName,LocationGreen.Code);

      // Verify: Verify the Correct Quantity Outstanding.
      WhseWorksheetLine.TESTFIELD("Qty. Outstanding",Quantity);
    END;

    [Test]
    PROCEDURE PickAcrossMultipleBins@164();
    VAR
      Item@1000 : Record 27;
      Bin@1001 : Record 7354;
      Bin2@1015 : Record 7354;
      SalesHeader@1011 : Record 36;
      SalesLine@1008 : Record 37;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      WarehouseActivityLine@1007 : Record 5767;
      WarehouseReceiptLine@1005 : Record 7317;
      WarehouseShipmentHeader@1006 : Record 7320;
      Quantity@1014 : Decimal;
    BEGIN
      // Setup: Find Bin, create Item, update Item Inventory, create purchase order, create Warehouse Receipt, update Bin Code on Warehouse receipt.
      // Post Warehouse Receipt, update Quantity To Handle on Activity Line, create Sales Order and release it, create Pick.
      Initialize;
      LibraryWarehouse.FindBin(Bin,LocationOrange.Code,'',1);  // Find bin of Index 1.
      CreateItem(Item);
      UpdateItemInventory(Item."No.",LocationOrange.Code,Bin.Code,LibraryRandom.RandDec(100,2));
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,LocationOrange.Code,Item."No.");
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      FindWarehouseReceiptLine(
        WarehouseReceiptLine,FindWarehouseReceiptNo(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No."));
      LibraryWarehouse.FindBin(Bin2,LocationOrange.Code,'',2);  // Find bin of Index 2.
      WarehouseReceiptLine.VALIDATE("Bin Code",Bin.Code);
      WarehouseReceiptLine.MODIFY(TRUE);
      Quantity := PurchaseLine.Quantity;
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      UpdateQuantityToHandleAndBinOnActivityLine(WarehouseActivityLine."Action Type"::Take,PurchaseHeader."No.",Quantity / 2);
      UpdateQuantityToHandleAndBinOnActivityLine(WarehouseActivityLine."Action Type"::Place,PurchaseHeader."No.",Quantity / 2);
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,LocationOrange.Code,Item."No.",Quantity,WORKDATE);

      LocationCode2 := LocationOrange.Code;  // Assign value to global variable for use in handler.
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      ReleaseWarehouseShipment(WarehouseShipmentHeader,WarehouseShipmentNo);
      CreatePick(WarehouseShipmentHeader,WarehouseShipmentNo);
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationOrange.Code,SalesHeader."No.",
        WarehouseActivityLine."Action Type"::Take);

      // Exercise: Register Pick.
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // Verify: Verify the Quantity on registered Pick.
      VerifyRegisteredWhseActivityLine(WarehouseActivityLine,Item."Base Unit of Measure",1,Quantity / 2);  // Verify the registered Quantity.
    END;

    [Test]
    PROCEDURE WhseReceiptFromPurchaseOrder@149();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      Item@1002 : Record 27;
      PurchRcptHeader@1005 : Record 120;
      WarehouseReceiptLine@1003 : Record 7317;
    BEGIN
      // Setup: Create a Purchase Order and create Warehouse Receipt from Purchase Order for Red Location.
      Initialize;
      CreateItem(Item);
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,LocationRed.Code,Item."No.");
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      // Exercise: Post Warehouse Receipt.
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");

      // Verify: Verify the values on Item Ledger Entry.
      FindPurchaseReceipt(PurchRcptHeader,PurchaseHeader."No.");
      VerifyItemLedgerEntry(PurchRcptHeader."No.",Item."No.",LocationRed.Code,PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(GetReceiptLinePageHandler)]
    PROCEDURE PurchaseInvoiceWithInvoiceNoAsReceiptNo@148();
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      Item@1002 : Record 27;
      PurchaseHeader2@1008 : Record 38;
      PurchaseLine2@1009 : Record 39;
      PurchRcptLine@1012 : Record 121;
      DocumentNo@1017 : Code[20];
    BEGIN
      // Setup: Create a Purchase Order, create and post Warehouse Receipt, Create Purchase Invoice having same Invoice No. as Receipt No.
      Initialize;
      UpdatePurchaseInvoiceNoSeries(TRUE);  // Make No. Series Manual for Purchase Invoice to allow Receipt No. as Invoice No.
      CreateItem(Item);
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,LocationRed.Code,Item."No.");
      CreateAndPostWhseReceiptFromPO(PurchaseHeader);
      FindPurchaseReceiptLine(PurchRcptLine,PurchaseHeader."No.");
      CreatePurchaseInvoiceWithReceiptNo(PurchaseHeader2,PurchaseHeader,PurchRcptLine."Document No.");

      // Create Purchase Line For Item Charge, Create Item Charge Assignment, post Puchase Invoice.
      CreatePurchaseLineAndAssignItemCharge(PurchaseHeader2,PurchaseLine2,PurchRcptLine);
      LibraryPurchase.GetPurchaseReceiptLine(PurchaseLine2);  // Get Receipt Line for Item Charge Assignment(Purch).

      // Exercise: Post Puchase Invoice.
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader2,TRUE,TRUE);

      // Verify: Verify posted Purchase Invoice.
      VerifyPostedPurchaseInvoice(DocumentNo,PurchaseLine2.Type::Item,PurchRcptLine.Quantity);
      VerifyPostedPurchaseInvoice(DocumentNo,PurchaseLine2.Type::"Charge (Item)",PurchaseLine2.Quantity);

      // Teardown: Reset Manual No. False for Purchase Invoice.
      UpdatePurchaseInvoiceNoSeries(FALSE);
    END;

    [Test]
    PROCEDURE WhseShipmentFromSalesOrder@147();
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
      Item@1003 : Record 27;
      SalesShipmentHeader@1011 : Record 110;
      WarehouseShipmentLine@1012 : Record 7321;
      WarehouseShipmentHeader@1001 : Record 7320;
    BEGIN
      // Setup: Create and release Sales Order and create Warehouse Shipment from SO for Location Red.
      Initialize;
      CreateItem(Item);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,LocationRed.Code,Item."No.",LibraryRandom.RandDec(100,2),WORKDATE);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      WarehouseShipmentHeader.GET(FindWhseShipmentNo(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No."));

      // Exercise: Post Warehouse Shipment.
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // Verify: Verify values in Item Ledger Entry.
      FindSalesShipment(SalesShipmentHeader,SalesHeader."No.");
      VerifyItemLedgerEntry(SalesShipmentHeader."No.",Item."No.",LocationRed.Code,-SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(GetShipmentLinePageHandler)]
    PROCEDURE SalesInvoiceWithInvoiceNoAsShipmentNo@146();
    VAR
      SalesHeader@1010 : Record 36;
      SalesLine@1009 : Record 37;
      Item@1008 : Record 27;
      SalesHeader2@1002 : Record 36;
      SalesLine2@1001 : Record 37;
      SalesShipmentLine@1014 : Record 111;
      DocumentNo@1004 : Code[20];
    BEGIN
      // Setup: Create and release Sales Order, create and post Warehouse Shipment, create Sales Invoice having same Invoice No. as ShipmentNo.
      Initialize;
      UpdateSalesInvoiceNoSeries(TRUE);  // Make No. Series Manual for Sales Invoice to allow Shipment No. as Invoice No.
      CreateItem(Item);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,LocationRed.Code,Item."No.",LibraryRandom.RandDec(100,2),WORKDATE);
      CreateAndPostWhseShipmentFromSO(SalesHeader);
      FindSalesShipmentLine(SalesShipmentLine,SalesHeader."No.");
      CreateSalesInvoiceWithShipmentNo(SalesHeader2,SalesHeader,SalesShipmentLine."Document No.");

      // Create SalesLine for Item Charge, create Item Charge Assignment.
      CreateSalesLineAndAssignItemCharge(SalesHeader2,SalesLine2,SalesShipmentLine);
      LibrarySales.GetShipmentLines(SalesLine2);  // Get Shipment Line for Item Charge Assignment.

      // Exercise: Post Sales Invoice.
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader2,TRUE,TRUE);

      // Verify: Verify posted Sales Invoice.
      VerifyPostedSalesInvoice(DocumentNo,SalesLine2.Type::Item,SalesShipmentLine.Quantity);
      VerifyPostedSalesInvoice(DocumentNo,SalesLine2.Type::"Charge (Item)",SalesLine2.Quantity);

      // Teardown: Reset Manual No. False for Sales Invoice.
      UpdateSalesInvoiceNoSeries(FALSE);
    END;

    [Test]
    [HandlerFunctions(WhseShipmentCreatePick,PickActivityMessageHandler)]
    PROCEDURE WhseBatchPickFromWhseShipment@126();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      Item@1002 : Record 27;
      SalesHeader@1007 : Record 36;
      SalesLine@1016 : Record 37;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseShipmentHeader@1010 : Record 7320;
      WarehouseShipmentLine@1011 : Record 7321;
      WhseShipmentRelease@1015 : Codeunit 7310;
      Quantity@1006 : Decimal;
    BEGIN
      // Setup: Create and release Purchase Order, create Warehouse Receipt, register Put away and create Warehouse Shipment from Sales Order for White Location.
      Initialize;
      CreateItem(Item);
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,LocationWhite.Code,Item."No.");
      Quantity := PurchaseLine.Quantity;
      CreateAndPostWhseReceiptFromPO(PurchaseHeader);
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationWhite.Code,PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Take);
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,LocationWhite.Code,Item."No.",Quantity,WORKDATE);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      WarehouseShipmentHeader.GET(WarehouseShipmentNo);
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentHeader."No.");
      WhseShipmentRelease.Release(WarehouseShipmentHeader);

      // Exercise: Create Pick from Warehouse Shipment.
      WarehouseShipmentLine.CreatePickDoc(WarehouseShipmentLine,WarehouseShipmentHeader);

      // Verify: Verify Pick has been created on Warehouse Activity Line.
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationWhite.Code,SalesHeader."No.",
        WarehouseActivityLine."Action Type"::Take);
      VerifyWhseActivityLine(WarehouseActivityLine,Item."Base Unit of Measure",1,WarehouseActivityLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentReportHandler,PickActivityMessageHandler)]
    PROCEDURE PickFromWhseInternalPick@144();
    VAR
      Item@1002 : Record 27;
      Zone@1004 : Record 7300;
      Bin@1005 : Record 7354;
      WhseInternalPickHeader@1000 : Record 7333;
      WhseInternalPickLine@1001 : Record 7334;
      WarehouseActivityLine@1006 : Record 5767;
      WhseInternalPickRelease@1003 : Codeunit 7315;
    BEGIN
      // Setup: Create Item, find Zone, find Bin, update Inventory, create Warehouse Internal Pick and Release.
      Initialize;
      CreateItem(Item);
      FindZone(Zone,LocationWhite.Code);
      UpdateInventoryOnLocationWithWhseAdjustment(LocationWhite,Item,100 + LibraryRandom.RandDec(100,2));  // For large Quantity.
      LibraryWarehouse.FindBin(Bin,LocationWhite.Code,Zone.Code,2);  // Find Bin for Zone with Bin Index 2.
      CreateWhseInternalPickHeader(WhseInternalPickHeader,Zone.Code,Bin.Code);
      LibraryWarehouse.CreateWhseInternalPickLine(
        WhseInternalPickHeader,WhseInternalPickLine,Item."No.",LibraryRandom.RandDec(100,2));
      WhseInternalPickRelease.Release(WhseInternalPickHeader);

      // Exercise: Create Pick from Warehouse Internal Pick.
      WhseInternalPickLine.CreatePickDoc(WhseInternalPickLine,WhseInternalPickHeader);

      // Verify: Verify Pick has been created on Whse Activity Line.
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::Pick,LocationWhite.Code,WhseInternalPickHeader."No.",
        WarehouseActivityLine."Action Type"::Take);
      VerifyWhseActivityLine(WarehouseActivityLine,Item."Base Unit of Measure",1,WarehouseActivityLine.Quantity);  // value is Quantity Per Unit Of Measure For Base Unit Of Measure.
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentReportHandler,PutAwayActivityMessageHandler)]
    PROCEDURE PutAwayFromWhseInternalPutAway@158();
    VAR
      Item@1000 : Record 27;
      Bin@1008 : Record 7354;
      WhseInternalPutAwayHeader@1001 : Record 7331;
      WhseInternalPutAwayLine@1002 : Record 7332;
      WarehouseActivityLine@1004 : Record 5767;
      WhseIntPutAwayRelease@1003 : Codeunit 7316;
      Quantity@1010 : Decimal;
    BEGIN
      // Setup: Create Item, find Zone, find Bin, update Inventory, create Warehouse Internal Put Away and release.
      Initialize;
      CreateItem(Item);
      UpdateInventoryOnLocationWithWhseAdjustment(LocationWhite,Item,100 + LibraryRandom.RandDec(100,2));  // For large Quantity.
      Bin.GET(LocationWhite.Code,LocationWhite."Cross-Dock Bin Code");
      CreateWhseInternalPutawayHeader(WhseInternalPutAwayHeader,Bin."Zone Code",Bin.Code);
      Quantity := LibraryRandom.RandDec(100,2);
      LibraryWarehouse.CreateWhseInternalPutawayLine(WhseInternalPutAwayHeader,WhseInternalPutAwayLine,Item."No.",Quantity);
      WhseIntPutAwayRelease.Release(WhseInternalPutAwayHeader);

      // Exercise: Create Put Away from Warehouse Internal Put Away.
      WhseInternalPutAwayLine.CreatePutAwayDoc(WhseInternalPutAwayLine);

      // Verify: Verify the values on Warehouse Activity Line.
      WarehouseActivityLine.SETRANGE("Location Code",LocationWhite.Code);
      WarehouseActivityLine.FINDFIRST;
      VerifyWhseActivityLine(WarehouseActivityLine,Item."Base Unit of Measure",1,WarehouseActivityLine.Quantity);  // Value 1 is Quantity Per Unit Of Measure.
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentHandler)]
    PROCEDURE WhseBatchPickFromProductionOrder@169();
    VAR
      Item@1009 : Record 27;
      ProductionBOMHeader@1008 : Record 99000771;
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseActivityLine@1004 : Record 5767;
      ProductionOrder@1002 : Record 5405;
      Item2@1001 : Record 27;
      Item3@1000 : Record 27;
    BEGIN
      // Setup: Cretae BOM, create Item, Item with Production BOM, create and release Purchase Order, post Whse Receipt, register Put away.
      // Create and refresh Production Order.
      Initialize;
      CreateBOMWithComponent(ProductionBOMHeader,Item2,Item3);
      CreateItem(Item);
      ItemWithProductionBOM(Item,ProductionBOMHeader."No.");
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,LocationWhite.Code,Item2."No.");
      CreateAndPostWhseReceiptFromPO(PurchaseHeader);
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationWhite.Code,PurchaseHeader."No.",
        WarehouseActivityLine."Action Type"::Place);
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityHeader.Type::"Put-away");
      CreateAndRefreshProdOrder(
        ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,Item."No.",LocationWhite.Code,
        LibraryRandom.RandDec(10,2),WORKDATE);

      // Exercise: Create Pick from Production Order.
      ProductionOrder.CreatePick(USERID,0,FALSE,FALSE,FALSE);  // SetBreakBulkFilter False, DoNotFillQtyToHandle False, PrintDocument False.

      // Verify: Verify the values on Whse Activity Line.
      VerifyWhseActivityLine(WarehouseActivityLine,Item."Base Unit of Measure",1,WarehouseActivityLine.Quantity);  // value is Quantity Per Unit Of Measure For Base Unit Of Measure.
    END;

    [Test]
    [HandlerFunctions(WhseSourceCreateDocumentHandler)]
    PROCEDURE WhseBatchPutAwayFromPostedWhseReceiptLine@157();
    VAR
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      WarehouseReceiptLine@1003 : Record 7317;
      Item@1002 : Record 27;
      PostedWhseReceiptLine@1001 : Record 7319;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup : Create Item, create and release Purchase Order and Create and post Warehouse Receipt.
      Initialize;
      CreateItemAddInventory(Item,LocationOrange.Code,1);  // Value required for Bin Index.
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,LocationOrange.Code,Item."No.");
      Quantity := PurchaseLine.Quantity;
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
      FindPostedWhseReceiptLines(PostedWhseReceiptLine,PurchaseHeader."No.");

      // Exercise: Create Put away.
      COMMIT;
      PostedWhseReceiptLine.CreatePutAwayDoc(PostedWhseReceiptLine,USERID);

      // Verify: Verify the values on Posted Whse Receipt Line.
      VerifyPostedWhseReceiptLine(PurchaseHeader."No.",Item."No.",Quantity,LocationOrange.Code);
    END;

    [Test]
    [HandlerFunctions(PickSelectionPageHandler)]
    PROCEDURE WhseBatchPickFromPickWorksheet@167();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1018 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseShipmentHeader@1008 : Record 7320;
      WhseWorksheetName@1022 : Record 7327;
      WhseWorksheetLine@1002 : Record 7326;
      WarehouseActivityHeader@1001 : Record 5766;
      GetSourceDocOutbound@1020 : Codeunit 5752;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Create Item, Update Inventory, create and release Sales Order, Create warehouse Shipment and select Document from Pick Selection page.
      Initialize;
      CreateItem(Item);
      Quantity := LibraryRandom.RandDec(100,2);
      UpdateItemInventory(Item."No.",LocationGreen.Code,'',Quantity);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,LocationGreen.Code,Item."No.",Quantity,WORKDATE);
      WarehouseShipmentNo := FindWarehouseShipmentNo;
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      ReleaseWarehouseShipment(WarehouseShipmentHeader,WarehouseShipmentNo);

      LocationCode2 := LocationGreen.Code;  // Assign value to global variable for use in handler.
      // Create Pick Worksheet Template, get source Document and select the Pick Line from Pick Selection page.
      CreateWhseWorksheetName(WhseWorksheetName,LocationGreen.Code);
      GetSourceDocOutbound.GetSingleWhsePickDoc(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationGreen.Code);
      FindWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationGreen.Code);

      // Exercise: Create Pick from Pick Worksheet.
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,10000,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationGreen.Code,'',0,0,0,FALSE,
        FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityHeader.Type::Pick);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,TRUE);

      // Verify: Verify the values on Posted Warehouse Shipment Line.
      VerifyPostedWarehouseShipmentLine(LocationGreen.Code,Item."No.",WarehouseShipmentHeader."No.",SalesHeader."No.",Quantity);
    END;

    [Test]
    PROCEDURE CreateWhseInternalPickWithNonWarehouse@98();
    VAR
      WhseInternalPickHeader@1000 : Record 7333;
    BEGIN
      // Test and verify an error message pops up when create Internal Pick with Non-warehouse.

      // Setup & Exercise: Create Whse. Internal Pick with Non-Warehouse.
      // Verify: Verify the error message.
      Initialize;
      ASSERTERROR LibraryWarehouse.CreateWhseInternalPickHeader(WhseInternalPickHeader,LocationOrange.Code);
      Assert.ExpectedError(NonWarehouseErr);
    END;

    [Test]
    PROCEDURE CreateWhseInternalPutawayWithNonWarehouse@173();
    VAR
      WhseInternalPutAwayHeader@1000 : Record 7331;
    BEGIN
      // Test and verify an error message pops up when create Internal Put-away with Non-warehouse.

      // Setup & Exercise: Create Whse. Internal Putaway with Non-Warehouse.
      // Verify: Verify the error message.
      Initialize;
      ASSERTERROR LibraryWarehouse.CreateWhseInternalPutawayHdr(WhseInternalPutAwayHeader,LocationOrange.Code);
      Assert.ExpectedError(NonWarehouseErr);
    END;

    [Test]
    PROCEDURE BinContentGetCaptionWithFilterOnBinCode@28();
    VAR
      BinContent@1001 : Record 7302;
      RegisteredInvtMovementLine@1003 : Record 7345;
      LocationCode@1005 : Code[10];
      FirstCode@1004 : Code[20];
      SecondCode@1006 : Code[20];
    BEGIN
      // Test and Verify caption build on set filter

      // Setup
      Initialize;
      FillBinContent(LocationCode,FALSE);

      // Exercise
      FindBinCodesInBinContent(FirstCode,SecondCode,LocationCode);

      // Verify
      VerifyBinContentGetCaptionWithFilter(
        '',LocationCode,FirstCode,SecondCode,BinContent.FIELDNO("Bin Code"),RegisteredInvtMovementLine.TABLECAPTION);
      VerifyBinContentGetCaptionWithFilter(
        '@%1*',LocationCode,FirstCode,SecondCode,BinContent.FIELDNO("Bin Code"),RegisteredInvtMovementLine.TABLECAPTION);
      VerifyBinContentGetCaptionWithFilter(
        '%1..%2',LocationCode,FirstCode,SecondCode,BinContent.FIELDNO("Bin Code"),RegisteredInvtMovementLine.TABLECAPTION);
      VerifyBinContentGetCaptionWithFilter(
        '..%2',LocationCode,FirstCode,SecondCode,BinContent.FIELDNO("Bin Code"),RegisteredInvtMovementLine.TABLECAPTION);
      VerifyBinContentGetCaptionWithFilter(
        '%1|%2',LocationCode,FirstCode,SecondCode,BinContent.FIELDNO("Bin Code"),RegisteredInvtMovementLine.TABLECAPTION);
    END;

    [Test]
    PROCEDURE BinContentGetCaptionWithFilterOnItemNo@215();
    VAR
      BinContent@1001 : Record 7302;
      Item@1003 : Record 27;
      LocationCode@1005 : Code[10];
      FirstCode@1004 : Code[20];
      SecondCode@1006 : Code[20];
    BEGIN
      // Test and Verify caption build on set filter

      // Setup
      Initialize;
      FillBinContent(LocationCode,FALSE);

      // Exercise
      FindItemCodesInBinContent(FirstCode,SecondCode,LocationCode);

      // Verify
      VerifyBinContentGetCaptionWithFilter(
        '',LocationCode,FirstCode,SecondCode,BinContent.FIELDNO("Item No."),Item.TABLECAPTION);
      VerifyBinContentGetCaptionWithFilter(
        '@%1*',LocationCode,FirstCode,SecondCode,BinContent.FIELDNO("Item No."),Item.TABLECAPTION);
      VerifyBinContentGetCaptionWithFilter(
        '%1..%2',LocationCode,FirstCode,SecondCode,BinContent.FIELDNO("Item No."),Item.TABLECAPTION);
      VerifyBinContentGetCaptionWithFilter(
        '..%1',LocationCode,FirstCode,SecondCode,BinContent.FIELDNO("Item No."),Item.TABLECAPTION);
      VerifyBinContentGetCaptionWithFilter(
        '%1|%2',LocationCode,FirstCode,SecondCode,BinContent.FIELDNO("Item No."),Item.TABLECAPTION);
    END;

    [Test]
    PROCEDURE BinContentGetCaptionWithFilterOnVariantCode@216();
    VAR
      BinContent@1001 : Record 7302;
      ItemVariant@1003 : Record 5401;
      LocationCode@1005 : Code[10];
      FirstCode@1004 : Code[20];
      SecondCode@1006 : Code[20];
    BEGIN
      // Test and Verify caption build on set filter

      // Setup
      Initialize;
      FillBinContent(LocationCode,TRUE);

      // Exercise
      FindItemVariantCodesInBinContent(FirstCode,SecondCode,LocationCode);

      // Verify
      VerifyBinContentGetCaptionWithFilter(
        '',LocationCode,FirstCode,SecondCode,BinContent.FIELDNO("Variant Code"),ItemVariant.TABLECAPTION);
      VerifyBinContentGetCaptionWithFilter(
        '@%1*',LocationCode,FirstCode,SecondCode,BinContent.FIELDNO("Variant Code"),ItemVariant.TABLECAPTION);
      VerifyBinContentGetCaptionWithFilter(
        '%1..%2',LocationCode,FirstCode,SecondCode,BinContent.FIELDNO("Variant Code"),ItemVariant.TABLECAPTION);
      VerifyBinContentGetCaptionWithFilter(
        '..%1',LocationCode,FirstCode,SecondCode,BinContent.FIELDNO("Variant Code"),ItemVariant.TABLECAPTION);
      VerifyBinContentGetCaptionWithFilter(
        '%1|%2',LocationCode,FirstCode,SecondCode,BinContent.FIELDNO("Variant Code"),ItemVariant.TABLECAPTION);
    END;

    [Test]
    PROCEDURE CreatePutawayToFloatingBinWithFixedBinExist@183();
    BEGIN
      // Check Item can be put away into floating Bin with Fixed Bin existing.
      Initialize;
      CreatePutawayToFloatingBin(TRUE,FALSE,FALSE); // TRUE for Fixed Bin
    END;

    [Test]
    PROCEDURE CreatePutawayToFloatingBinWithDefaultBinExist@185();
    BEGIN
      // Check Item can be put away into floating Bin with Default Bin existing.
      Initialize;
      CreatePutawayToFloatingBin(FALSE,TRUE,FALSE); // TRUE for Default Bin
    END;

    [Test]
    PROCEDURE CreatePutawayToFloatingBinWithDedicatedBinExist@186();
    BEGIN
      // Check Item can be put away into floating Bin with Dedicated Bin existing.
      Initialize;
      CreatePutawayToFloatingBin(FALSE,FALSE,TRUE); // TRUE for Dedicated Bin
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      CLEAR(SourceNo);
      CLEAR(WarehouseShipmentNo);
      CLEAR(LocationCode2);
      CLEAR(NewUnitOfMeasure);
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      NoSeriesSetup;
      CreateLocationSetup;
      ItemJournalSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      PurchasesPayablesSetup@1005 : Record 312;
      SalesSetup@1004 : Record 311;
      WarehouseSetup@1002 : Record 5769;
    BEGIN
      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);

      SalesSetup.GET;
      SalesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Vendor Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@75();
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationSetup@92();
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      CreateFullWarehouseSetup(LocationWhite);  // Location: White.
      LibraryWarehouse.CreateLocationWMS(LocationGreen,FALSE,TRUE,TRUE,TRUE,TRUE);  // Location: Green.
      LibraryWarehouse.CreateLocationWMS(LocationBlue,FALSE,FALSE,FALSE,FALSE,FALSE);  // Location: Blue.
      LibraryWarehouse.CreateLocationWMS(LocationOrange,TRUE,TRUE,TRUE,TRUE,TRUE);  // Location: Orange.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationOrange.Code,TRUE);
      LibraryWarehouse.CreateLocationWMS(LocationOrange2,TRUE,TRUE,TRUE,TRUE,TRUE);  // Location: Orange2.
      LibraryWarehouse.CreateLocationWMS(LocationRed,FALSE,FALSE,FALSE,TRUE,TRUE);  // Location: Red.
      LibraryWarehouse.CreateInTransitLocation(LocationIntransit);

      LibraryWarehouse.CreateNumberOfBins(LocationOrange.Code,'','',LibraryRandom.RandInt(5) + 2,FALSE);  // 2 is required as minimun number of Bin must be 2.
      LibraryWarehouse.CreateNumberOfBins(LocationOrange2.Code,'','',LibraryRandom.RandInt(5),FALSE);

      LocationCode2 := LocationOrange.Code;  // Assign value to global variable for use in handler.
    END;

    [Normal]
    LOCAL PROCEDURE CreateFullWarehouseSetup@60(VAR Location@1000 : Record 14);
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
    END;

    LOCAL PROCEDURE WarehouseJournalSetup@106(LocationCode@1000 : Code[10]);
    BEGIN
      CLEAR(WarehouseJournalTemplate);
      WarehouseJournalTemplate.INIT;
      LibraryWarehouse.SelectWhseJournalTemplateName(WarehouseJournalTemplate,WarehouseJournalTemplate.Type::Item);
      WarehouseJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalTemplate.MODIFY(TRUE);

      CLEAR(WarehouseJournalBatch);
      WarehouseJournalBatch.INIT;
      LibraryWarehouse.SelectWhseJournalBatchName(WarehouseJournalBatch,WarehouseJournalTemplate.Type,WarehouseJournalTemplate.Name,
        LocationCode);
      WarehouseJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      WarehouseJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AssignQtyToHndlOnWhseWrkSheet@71(VAR WhseWorksheetLine@1000 : Record 7326;WhseWorksheetName@1001 : Record 7327;LocationCode@1002 : Code[10]);
    BEGIN
      FindWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationCode);
      WhseWorksheetLine."Qty. to Handle" := WhseWorksheetLine.Quantity / 2;  // Assigning directly to recreate original behavior.
      WhseWorksheetLine."Qty. to Handle (Base)" := WhseWorksheetLine.Quantity / 2;
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBOM@50(VAR ProductionBOMHeader@1000 : Record 99000771;ItemNo@1001 : Code[20];ItemNo2@1006 : Code[20];QuantityPer@1005 : Decimal);
    VAR
      ProductionBOMLine@1003 : Record 99000772;
      UnitOfMeasure@1004 : Record 204;
    BEGIN
      // Choose any unit of measure.
      UnitOfMeasure.FINDFIRST;
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,UnitOfMeasure.Code);

      // Create component lines in the BOM.
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo,QuantityPer);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo2,QuantityPer);

      // Certify BOM.
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@6(VAR Item@1001 : Record 27);
    BEGIN
      LibraryManufacturing.CreateItemManufacturing(
        Item,Item."Costing Method"::Standard,LibraryRandom.RandDec(100,2),Item."Reordering Policy"::Order,
        Item."Flushing Method",'','');
      Item.VALIDATE("Reorder Quantity",LibraryRandom.RandDec(100,2));  // Value Required.
      Item.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemAddInventory@37(VAR Item@1000 : Record 27;LocationCode@1002 : Code[10];BinIndex@1001 : Integer) : Code[20];
    VAR
      Bin@1016 : Record 7354;
    BEGIN
      LibraryWarehouse.FindBin(Bin,LocationCode,'',BinIndex);
      CreateItem(Item);
      UpdateItemInventory(Item."No.",LocationCode,Bin.Code,LibraryRandom.RandDec(100,2) + 100);
      EXIT(Bin.Code);
    END;

    LOCAL PROCEDURE ChangeBinCodeOnWhseShipLine@32(VAR BinCode@1001 : Code[20];LocationCode@1004 : Code[10];WarehouseShipmentNo@1000 : Code[20]);
    VAR
      WarehouseShipmentLine@1002 : Record 7321;
      Bin@1003 : Record 7354;
    BEGIN
      LibraryWarehouse.FindBin(Bin,LocationCode,'',4);
      BinCode := Bin.Code;
      FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentNo);
      WarehouseShipmentLine.VALIDATE("Bin Code",BinCode);
      WarehouseShipmentLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeBinCodeOnActivityLine@48(VAR BinCode@1000 : Code[20];SourceNo@1003 : Code[20];LocationCode@1004 : Code[10]);
    VAR
      Bin@1001 : Record 7354;
      WarehouseActivityLine@1002 : Record 5767;
    BEGIN
      LibraryWarehouse.FindBin(Bin,LocationCode,'',2);
      BinCode := Bin.Code;
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationCode,SourceNo,
        WarehouseActivityLine."Action Type"::Place);
      WarehouseActivityLine.VALIDATE("Bin Code",BinCode);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ChangeUOMAndRegisterWhseAct@83(VAR WarehouseActivityLine@1000 : Record 5767;LocationCode@1002 : Code[10];SourceNo@1003 : Code[20]);
    VAR
      Bin@1001 : Record 7354;
    BEGIN
      ChangeUnitOfMeasure(WarehouseActivityLine,LocationCode,SourceNo);
      FindBin(Bin,LocationCode);
      UpdateWhseActivityLine(WarehouseActivityLine,WarehouseActivityLine.FIELDNO("Bin Code"),Bin.Code);
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.FINDFIRST;
      UpdateWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine.FIELDNO("Qty. to Handle"),WarehouseActivityLine."Qty. to Handle (Base)");
      RegisterWarehouseActivity(SourceNo,WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE ChangeUnitOfMeasure@79(VAR WarehouseActivityLine@1000 : Record 5767;LocationCode@1001 : Code[10];SourceNo@1002 : Code[20]);
    BEGIN
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationCode,SourceNo,
        WarehouseActivityLine."Action Type"::Place);
      LibraryWarehouse.ChangeUnitOfMeasure(WarehouseActivityLine);
    END;

    LOCAL PROCEDURE CreateSalesOrder@22(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37;LocationCode@1002 : Code[10];ItemNo@1004 : Code[20];Quantity@1003 : Decimal;ShipmentDate@1006 : Date);
    BEGIN
      // Random values used are not important for test.
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,'',ItemNo,Quantity,LocationCode,ShipmentDate);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrder@69(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];Quantity@1004 : Decimal;ShipmentDate@1005 : Date);
    BEGIN
      CreateSalesOrder(SalesHeader,SalesLine,LocationCode,ItemNo,Quantity,ShipmentDate);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreatePick@47(VAR WarehouseShipmentHeader@1000 : Record 7320;WarehouseShipmentNo@1001 : Code[20]);
    BEGIN
      WarehouseShipmentHeader.GET(WarehouseShipmentNo);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@27(VAR PurchaseHeader@1006 : Record 38;VAR PurchaseLine@1001 : Record 39;LocationCode@1003 : Code[10];ItemNo@1004 : Code[20]);
    BEGIN
      // Create Purchase Order with One Item Line. Random values used are not important for test.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandDec(100,2));
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateProdOrder@55(VAR ProductionOrder@1000 : Record 5405;Status@1004 : Option;SourceType@1006 : Option;SourceNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1005 : Decimal;DueDate@1003 : Date);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,SourceType,SourceNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.VALIDATE("Due Date",DueDate);
      ProductionOrder.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndRealeaseTransferOrder@40(VAR TransferHeader@1005 : Record 5740;VAR TransferLine@1000 : Record 5741;ItemNo@1004 : Code[20];FromLocationCode@1003 : Code[10];ToLocationCode@1002 : Code[10];IntransitLocationCode@1006 : Code[10]);
    VAR
      ToBin@1001 : Record 7354;
    BEGIN
      LibraryWarehouse.FindBin(ToBin,ToLocationCode,'',1);
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,IntransitLocationCode);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,LibraryRandom.RandDec(100,2));
      TransferLine.VALIDATE("Transfer-To Bin Code",ToBin.Code);
      TransferLine.MODIFY(TRUE);

      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateWhseWorksheetName@53(VAR WhseWorksheetName@1002 : Record 7327;LocationCode@1001 : Code[10]);
    VAR
      WhseWorksheetTemplate@1000 : Record 7328;
    BEGIN
      WhseWorksheetTemplate.SETRANGE(Type,WhseWorksheetTemplate.Type::Pick);
      WhseWorksheetTemplate.FINDFIRST;
      LibraryWarehouse.CreateWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptHeader@101(VAR WarehouseReceiptHeader@1000 : Record 7316;LocationCode@1001 : Code[10]);
    VAR
      Bin@1003 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateWarehouseReceiptHeader(WarehouseReceiptHeader);
      WarehouseReceiptHeader.VALIDATE("Location Code",LocationOrange.Code);
      LibraryWarehouse.FindBin(Bin,LocationCode,'',1);
      WarehouseReceiptHeader.VALIDATE("Bin Code",Bin.Code);
      WarehouseReceiptHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBOMWithComponent@133(VAR ProductionBOMHeader@1000 : Record 99000771;VAR Item@1001 : Record 27;VAR Item2@1002 : Record 27);
    BEGIN
      CreateItem(Item);
      CreateItem(Item2);
      CreateBOM(ProductionBOMHeader,Item."No.",Item2."No.",LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE CreateAndPostWhseReceiptFromPO@116(VAR PurchaseHeader@1000 : Record 38);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@105(VAR PurchaseHeader@1006 : Record 38;VAR PurchaseLine@1001 : Record 39;LocationCode@1003 : Code[10];ItemNo@1004 : Code[20]);
    BEGIN
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,LocationCode,ItemNo);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndRefreshProdOrder@76(VAR ProductionOrder@1000 : Record 5405;Status@1004 : Option;SourceType@1006 : Option;SourceNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1005 : Decimal;DueDate@1003 : Date);
    BEGIN
      CreateProdOrder(ProductionOrder,Status,SourceType,SourceNo,LocationCode,Quantity,DueDate);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CalculateExpectedQuantity@77(ProductionOrderNo@1000 : Code[20];ItemNo@1001 : Code[20];QtyPerUnitOfMeasure@1003 : Decimal) ExpectedQuantity : Decimal;
    VAR
      ProdOrderComponent@1002 : Record 5407;
    BEGIN
      FindProductionOrderComponent(ProdOrderComponent,ProductionOrderNo);
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.FINDFIRST;
      ExpectedQuantity := ProdOrderComponent."Remaining Quantity" / QtyPerUnitOfMeasure;
    END;

    LOCAL PROCEDURE CreateItemUnitOfMeasure@99(VAR ItemUnitOfMeasure@1000 : Record 5404;ItemNo@1002 : Code[20]);
    BEGIN
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,ItemNo,1);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentHeader@130(VAR WarehouseShipmentHeader@1000 : Record 7320;LocationCode@1001 : Code[10]);
    VAR
      Bin@1003 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateWarehouseShipmentHeader(WarehouseShipmentHeader);
      WarehouseShipmentHeader.VALIDATE("Location Code",LocationOrange.Code);
      LibraryWarehouse.FindBin(Bin,LocationCode,'',2);
      WarehouseShipmentHeader.VALIDATE("Bin Code",Bin.Code);
      WarehouseShipmentHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetSourceDocumentInbound@108(WarehouseReceiptHeader@1001 : Record 7316;DocumentNo@1000 : Code[20]);
    VAR
      GetSourceDocInbound@1002 : Codeunit 5751;
    BEGIN
      SourceNo := DocumentNo;
      GetSourceDocInbound.GetSingleInboundDoc(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE GetSourceDocumentOutbound@137(WarehouseShipmentHeader@1002 : Record 7320;DocumentNo@1000 : Code[20]);
    VAR
      GetSourceDocOutbound@1001 : Codeunit 5752;
    BEGIN
      SourceNo := DocumentNo;
      GetSourceDocOutbound.GetSingleOutboundDoc(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreatePurchaseLineAndAssignItemCharge@153(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1004 : Record 39;PurchRcptLine@1002 : Record 121);
    VAR
      ItemChargeAssignmentPurch@1003 : Record 5805;
    BEGIN
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"Charge (Item)",
        LibraryInventory.CreateItemChargeNo,LibraryRandom.RandDec(100,2));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(100,2));
      PurchaseLine.MODIFY(TRUE);
      LibraryInventory.CreateItemChargeAssignPurchase(
        ItemChargeAssignmentPurch,PurchaseLine,ItemChargeAssignmentPurch."Applies-to Doc. Type"::Receipt,
        PurchRcptLine."Document No.",PurchRcptLine."Line No.",PurchRcptLine."No.");
    END;

    LOCAL PROCEDURE CreateSalesLineAndAssignItemCharge@128(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1000 : Record 37;SalesShipmentLine@1002 : Record 111);
    VAR
      ItemChargeAssignmentSales@1003 : Record 5809;
    BEGIN
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"Charge (Item)",
        LibraryInventory.CreateItemChargeNo,LibraryRandom.RandDec(100,2));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.MODIFY(TRUE);
      LibraryInventory.CreateItemChargeAssignment(
        ItemChargeAssignmentSales,SalesLine,ItemChargeAssignmentSales."Applies-to Doc. Type"::Shipment,
        SalesShipmentLine."Document No.",SalesShipmentLine."Line No.",SalesShipmentLine."No.");
    END;

    LOCAL PROCEDURE CreateAndPostWhseShipmentFromSO@132(VAR SalesHeader@1000 : Record 36);
    VAR
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      WarehouseShipmentHeader.GET(FindWhseShipmentNo(WarehouseShipmentLine."Source Document"::"Sales Order",SalesHeader."No."));
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
    END;

    LOCAL PROCEDURE CreatePurchaseInvoiceWithReceiptNo@152(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseHeader2@1001 : Record 38;DocumentNo@1005 : Code[20]);
    VAR
      PurchRcptHeader@1003 : Record 120;
      PurchRcptLine@1004 : Record 121;
      PurchGetReceipt@1002 : Codeunit 74;
    BEGIN
      // Creates a purchase invoice for the given posted purchase order, finally the order and the invoice will be linked.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,PurchaseHeader2."Buy-from Vendor No.");
      PurchaseHeader.VALIDATE("No.",DocumentNo);
      PurchaseHeader.INSERT(TRUE);  // Used for primary key as the record cannot use RENAME function.
      PurchaseHeader.VALIDATE("Buy-from Vendor No.",PurchaseHeader2."Buy-from Vendor No.");
      PurchaseHeader.MODIFY(TRUE);

      // Link Purchase Order with Purchase Invoice. Create Purchase Invoice Lines.
      FindPurchaseReceipt(PurchRcptHeader,PurchaseHeader2."No.");
      PurchRcptLine.SETRANGE("Document No.",PurchRcptHeader."No.");
      PurchGetReceipt.SetPurchHeader(PurchaseHeader);
      PurchGetReceipt.CreateInvLines(PurchRcptLine);
    END;

    LOCAL PROCEDURE CreateSalesInvoiceWithShipmentNo@129(VAR SalesHeader@1002 : Record 36;SalesHeader2@1001 : Record 36;DocumentNo@1000 : Code[20]);
    VAR
      SalesShipmentHeader@1003 : Record 110;
      SalesShipmentLine@1005 : Record 111;
      SalesGetShipment@1004 : Codeunit 64;
    BEGIN
      // Creates a Sales invoice for the given posted Sales order, finally the order and the invoice will be linked.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,SalesHeader2."Sell-to Customer No.");
      SalesHeader.VALIDATE("No.",DocumentNo);
      SalesHeader.INSERT(TRUE);  // Used for primary key as the record cannot use RENAME function.
      SalesHeader.VALIDATE("Sell-to Customer No.",SalesHeader2."Sell-to Customer No.");
      SalesHeader.MODIFY(TRUE);

      // Link Sales Order with Sales Invoice. Create Sales Invoice Lines.
      FindSalesShipment(SalesShipmentHeader,SalesHeader2."No.");
      SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.") ;
      SalesGetShipment.SetSalesHeader(SalesHeader);
      SalesGetShipment.CreateInvLines(SalesShipmentLine);
    END;

    LOCAL PROCEDURE CreateWhseInternalPickHeader@156(VAR WhseInternalPickHeader@1000 : Record 7333;ToZoneCode@1001 : Code[10];ToBinCode@1002 : Code[20]);
    BEGIN
      LibraryWarehouse.CreateWhseInternalPickHeader(WhseInternalPickHeader,LocationWhite.Code);
      WhseInternalPickHeader.VALIDATE("To Zone Code",ToZoneCode);
      WhseInternalPickHeader.VALIDATE("To Bin Code",ToBinCode);
      WhseInternalPickHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBinContentWithItemVariantCode@192(VAR BinContent@1000 : Record 7302;LocationCode@1001 : Code[10];BinCode@1002 : Code[20];ZoneCode@1006 : Code[10];ItemNo@1003 : Code[20];BaseUnitOfMeasure@1004 : Code[10];Fixed@1008 : Boolean;Default@1005 : Boolean;ItemVariantCode@1007 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateBinContent(BinContent,LocationCode,ZoneCode,BinCode,ItemNo,ItemVariantCode,BaseUnitOfMeasure);
      BinContent.VALIDATE(Fixed,Fixed);
      BinContent.VALIDATE(Default,Default);
      BinContent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWhseInternalPutawayHeader@161(VAR WhseInternalPutAwayHeader@1000 : Record 7331;FromZonecode@1001 : Code[10];FromBinCode@1002 : Code[20]);
    BEGIN
      LibraryWarehouse.CreateWhseInternalPutawayHdr(WhseInternalPutAwayHeader,LocationWhite.Code);
      WhseInternalPutAwayHeader.VALIDATE("From Zone Code",FromZonecode);
      WhseInternalPutAwayHeader.VALIDATE("From Bin Code",FromBinCode);
      WhseInternalPutAwayHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePutawayToFloatingBin@159(Fixed@1013 : Boolean;Default@1014 : Boolean;Dedicated@1015 : Boolean);
    VAR
      Bin@1003 : Record 7354;
      Item@1004 : Record 27;
      PurchaseHeader@1007 : Record 38;
      PurchaseLine@1008 : Record 39;
      WarehouseActivityLine@1009 : Record 5767;
      LocationCode@1002 : Code[10];
    BEGIN
      // Setup: Create 2 Items: Item1,Item2, create 2 PUTPICK Bins: Bin1, Bin2 in WMS location, set Bin2 as Item1's Fixed,Default or Dedicated Bin.
      // Create Purchase Order for Item2 at the WMS location.
      LocationCode := CreateWMSLocationWithBinAndBinContent(Fixed,Default,Dedicated);
      CreateAndReleasePurchaseOrder(PurchaseHeader,PurchaseLine,LocationCode,LibraryInventory.CreateItem(Item));

      // Exercise: Create and post warehouse receipt for Purchase Order created above, Put-away will be created.
      CreateAndPostWhseReceiptFromPO(PurchaseHeader);

      // Verify: Item2 is put-away into Bin1 following the rule - Find Floating Bin = TRUE & Find Empty Bin = TRUE
      FindBin(Bin,LocationCode); // The first PUTPICK Bin is the floating Bin
      VerifyBinCode(
        WarehouseActivityLine."Activity Type"::"Put-away",
        WarehouseActivityLine."Action Type"::Place,LocationCode,PurchaseHeader."No.",Bin.Code);
    END;

    LOCAL PROCEDURE CreateWMSLocationWithBinAndBinContent@190(Fixed@1002 : Boolean;Default@1003 : Boolean;Dedicated@1004 : Boolean) : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      CreateFullWarehouseSetup(Location);
      UpdateBinAndBinContent(Location.Code,Fixed,Default,Dedicated); // Set the PUTPICK Bin with the highest Bin Code as Fixed,Default or Dedicated Bin.
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE FindPurchaseReceiptLine@150(VAR PurchRcptLine@1004 : Record 121;PurchaseHeaderNo@1002 : Code[20]);
    VAR
      PurchRcptHeader@1000 : Record 120;
    BEGIN
      FindPurchaseReceipt(PurchRcptHeader,PurchaseHeaderNo);
      PurchRcptLine.SETRANGE("Document No.",PurchRcptHeader."No.");
      PurchRcptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseReceipt@140(VAR PurchRcptHeader@1000 : Record 120;OrderNo@1001 : Code[20]);
    BEGIN
      PurchRcptHeader.SETRANGE("Order No.",OrderNo);
      PurchRcptHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesShipment@135(VAR SalesShipmentHeader@1000 : Record 110;OrderNo@1001 : Code[20]);
    BEGIN
      SalesShipmentHeader.SETRANGE("Order No.",OrderNo);
      SalesShipmentHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWhseShipmentNo@141(SourceDocument@1001 : Option;SourceNo@1000 : Code[20]) : Code[20];
    VAR
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",SourceDocument);
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.FINDFIRST;
      EXIT(WarehouseShipmentLine."No.");
    END;

    LOCAL PROCEDURE UpdatePurchaseInvoiceNoSeries@136(ManualNos@1002 : Boolean);
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
      NoSeries@1001 : Record 308;
    BEGIN
      PurchasesPayablesSetup.GET;
      NoSeries.SETRANGE(Code,PurchasesPayablesSetup."Invoice Nos.");
      NoSeries.FINDFIRST;
      NoSeries.VALIDATE("Manual Nos.",ManualNos);
      NoSeries.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesInvoiceNoSeries@134(ManualNos@1000 : Boolean);
    VAR
      SalesReceivablesSetup@1001 : Record 311;
      NoSeries@1002 : Record 308;
    BEGIN
      SalesReceivablesSetup.GET;
      NoSeries.SETRANGE(Code,SalesReceivablesSetup."Invoice Nos.");
      NoSeries.FINDFIRST;
      NoSeries.VALIDATE("Manual Nos.",ManualNos);
      NoSeries.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindBin@142(VAR Bin@1000 : Record 7354;LocationCode@1003 : Code[10]);
    VAR
      BinType@1002 : Record 7303;
      Zone@1004 : Record 7300;
    BEGIN
      FindBinType(BinType,TRUE,TRUE,FALSE,FALSE);
      Bin.SETRANGE("Bin Type Code",BinType.Code);
      Bin.SETRANGE("Location Code",LocationCode);
      FindZone(Zone,LocationCode);
      Bin.SETRANGE("Zone Code",Zone.Code);
      Bin.FINDFIRST;
    END;

    LOCAL PROCEDURE FindBinContent@9(VAR BinContent@1000 : Record 7302;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20]);
    BEGIN
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETFILTER(Quantity,'>%1',0);
      BinContent.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseReceiptLine@36(VAR WarehouseReceiptLine@1000 : Record 7317;No@1001 : Code[20]);
    BEGIN
      WarehouseReceiptLine.SETRANGE("No.",No);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseShipmentLine@1(VAR WarehouseShipmentLine@1000 : Record 7321;No@1001 : Code[20]);
    BEGIN
      WarehouseShipmentLine.SETRANGE("No.",No);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityNo@2(SourceNo@1002 : Code[20];ActivityType@1003 : Option) : Code[20];
    VAR
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDFIRST;
      EXIT(WarehouseActivityLine."No.");
    END;

    LOCAL PROCEDURE FindWarehouseReceiptNo@56(SourceDocument@1002 : Option;SourceNo@1003 : Code[20]) : Code[20];
    VAR
      WarehouseReceiptLine@1004 : Record 7317;
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
      EXIT(WarehouseReceiptLine."No.");
    END;

    LOCAL PROCEDURE FindWarehouseShipmentNo@7() : Code[20];
    VAR
      WarehouseSetup@1000 : Record 5769;
      NoSeriesManagement@1001 : Codeunit 396;
    BEGIN
      WarehouseSetup.GET;
      EXIT(NoSeriesManagement.GetNextNo(WarehouseSetup."Whse. Ship Nos.",WORKDATE,FALSE));
    END;

    LOCAL PROCEDURE FindWhseActivityLine@74(VAR WarehouseActivityLine@1001 : Record 5767;ActivityType@1000 : Option;LocationCode@1002 : Code[10];SourceNo@1003 : Code[20];ActionType@1004 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.SETRANGE("Location Code",LocationCode);
      WarehouseActivityLine.SETRANGE("No.",FindWarehouseActivityNo(SourceNo,ActivityType));
      WarehouseActivityLine.SETRANGE("Action Type",ActionType);
      WarehouseActivityLine.FINDSET;
    END;

    LOCAL PROCEDURE FindProductionOrderComponent@45(VAR ProdOrderComponent@1000 : Record 5407;ProductionOrderNo@1001 : Code[20]);
    BEGIN
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProductionOrderNo);
      ProdOrderComponent.FINDSET;
    END;

    LOCAL PROCEDURE FindWhseWorksheetLine@67(VAR WhseWorksheetLine@1000 : Record 7326;WhseWorksheetName@1001 : Record 7327;LocationCode@1002 : Code[10]);
    BEGIN
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.SETRANGE(Name,WhseWorksheetName.Name);
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindRegisterWarehouseActivityLine@107(VAR RegisteredWhseActivityLine@1000 : Record 5773;ActivityType@1001 : Option;ActionType@1003 : Option;LocationCode@1002 : Code[10];SourceNo@1004 : Code[20]);
    BEGIN
      RegisteredWhseActivityLine.SETRANGE("Activity Type",ActivityType);
      RegisteredWhseActivityLine.SETRANGE("Location Code",LocationCode);
      RegisteredWhseActivityLine.SETRANGE("Action Type",ActionType);
      RegisteredWhseActivityLine.SETRANGE("Source No.",SourceNo);
      RegisteredWhseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPostedWhseShipmentNo@112() : Code[20];
    VAR
      WarehouseSetup@1000 : Record 5769;
      NoSeriesManagement@1001 : Codeunit 396;
    BEGIN
      WarehouseSetup.GET;
      EXIT(NoSeriesManagement.GetNextNo(WarehouseSetup."Posted Whse. Shipment Nos.",WORKDATE,FALSE));
    END;

    LOCAL PROCEDURE FindSalesShipmentLine@131(VAR SalesShipmentLine@1001 : Record 111;SalesHeaderNo@1002 : Code[20]);
    VAR
      SalesShipmentHeader@1000 : Record 110;
    BEGIN
      FindSalesShipment(SalesShipmentHeader,SalesHeaderNo);
      SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.") ;
      SalesShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindZone@145(VAR Zone@1001 : Record 7300;LocationCode@1000 : Code[20]);
    VAR
      BinType@1004 : Record 7303;
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      FindBinType(BinType,TRUE,TRUE,FALSE,FALSE);
      Zone.SETRANGE("Bin Type Code",BinType.Code);
      Zone.SETRANGE("Cross-Dock Bin Zone",FALSE);
      Zone.FINDFIRST;
    END;

    LOCAL PROCEDURE FindBinType@162(VAR BinType@1000 : Record 7303;PutAway@1001 : Boolean;Pick@1002 : Boolean;Receive@1003 : Boolean;Ship@1004 : Boolean);
    BEGIN
      BinType.SETRANGE("Put Away",PutAway);
      BinType.SETRANGE(Pick,Pick);
      BinType.SETRANGE(Receive,Receive);
      BinType.SETRANGE(Ship,Ship);
      BinType.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPostedWhseReceiptLines@166(VAR PostedWhseReceiptLine@1000 : Record 7319;SourceNo@1001 : Code[20]);
    BEGIN
      PostedWhseReceiptLine.SETRANGE("Source Document",PostedWhseReceiptLine."Source Document"::"Purchase Order");
      PostedWhseReceiptLine.SETRANGE("Source No.",SourceNo);
      PostedWhseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindLastBin@181(VAR Bin@1002 : Record 7354;LocationCode@1000 : Code[10];ZoneCode@1001 : Code[10]);
    BEGIN
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE("Zone Code",ZoneCode);
      Bin.FINDLAST;
    END;

    LOCAL PROCEDURE ItemWithProductionBOM@96(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@3(SourceDocument@1000 : Option;SourceNo@1001 : Code[20]);
    VAR
      WarehouseReceiptHeader@1002 : Record 7316;
    BEGIN
      WarehouseReceiptHeader.GET(FindWarehouseReceiptNo(SourceDocument,SourceNo));
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE PostWarehouseShipment@58(No@1000 : Code[20]);
    VAR
      WarehouseShipmentHeader@1001 : Record 7320;
    BEGIN
      WarehouseShipmentHeader.GET(No);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
    END;

    [Normal]
    LOCAL PROCEDURE RegisterWarehouseActivity@46(SourceNo@1002 : Code[20];Type@1000 : Option);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
    BEGIN
      WarehouseActivityHeader.SETRANGE(Type,Type);
      WarehouseActivityHeader.SETRANGE("No.",FindWarehouseActivityNo(SourceNo,Type));
      WarehouseActivityHeader.FINDFIRST;
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE ReleaseWarehouseShipment@68(VAR WarehouseShipmentHeader@1002 : Record 7320;WarehouseShipmentNo@1000 : Code[20]);
    BEGIN
      WarehouseShipmentHeader.GET(WarehouseShipmentNo);
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE UpdateInventoryUsingWhseJournal@113(Location@1000 : Record 14;Item@1002 : Record 27;Quantity@1003 : Decimal);
    VAR
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      WarehouseJournalSetup(Location.Code);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,'',
        Location."Cross-Dock Bin Code",WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,TRUE);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateItemInventory@15(ItemNo@1002 : Code[20];LocationCode@1000 : Code[10];BinCode@1001 : Code[20];Quantity@1003 : Decimal);
    VAR
      ItemJournalLine@1004 : Record 83;
    BEGIN
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    [Normal]
    LOCAL PROCEDURE UpdateWhseActivityLine@115(VAR WarehouseActivityLine@1000 : Record 5767;FieldNo@1001 : Integer;Value@1004 : Variant);
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      RecRef.GETTABLE(WarehouseActivityLine);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
      RecRef.SETTABLE(WarehouseActivityLine);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityOnWarehouseShipmentLine@123(VAR WarehouseShipmentLine@1002 : Record 7321;No@1000 : Code[20];QtyToShip@1001 : Decimal);
    BEGIN
      WarehouseShipmentLine.SETRANGE("No.",No);
      WarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentLine.VALIDATE("Qty. to Ship",QtyToShip);
      WarehouseShipmentLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE WhseShipFromTOWithNewBinCode@41(VAR BinCode@1002 : Code[20];TransferHeader@1000 : Record 5740;WarehouseShipmentNo@1001 : Code[20];LocationCode@1003 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);
      ChangeBinCodeOnWhseShipLine(BinCode,LocationCode,WarehouseShipmentNo);
    END;

    LOCAL PROCEDURE WhseShipFromSOWithNewBinCode@44(VAR BinCode@1002 : Code[20];SalesHeader@1001 : Record 36;WarehouseShipmentNo@1000 : Code[20];LocationCode@1003 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      ChangeBinCodeOnWhseShipLine(BinCode,LocationCode,WarehouseShipmentNo);
    END;

    LOCAL PROCEDURE UpdateWarehouseSetup@127(RequireReceive@1001 : Boolean;RequireShipment@1002 : Boolean);
    VAR
      WarehouseSetup@1000 : Record 5769;
    BEGIN
      WarehouseSetup.GET;
      WarehouseSetup.VALIDATE("Require Receive",RequireReceive);
      WarehouseSetup.VALIDATE("Require Shipment",RequireShipment);
      WarehouseSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateQuantityToHandleAndBinOnActivityLine@151(ActionType@1000 : Option;SourceNo@1003 : Code[20];QtyToHandle@1004 : Decimal);
    VAR
      WarehouseActivityLine@1002 : Record 5767;
      Bin3@1001 : Record 7354;
    BEGIN
      LibraryWarehouse.FindBin(Bin3,LocationOrange.Code,'',3);  // Find bin of Index 3.
      FindWhseActivityLine(
        WarehouseActivityLine,WarehouseActivityLine."Activity Type"::"Put-away",LocationOrange.Code,SourceNo,ActionType);
      ChangeBinCodeOnActivityLine(Bin3.Code,SourceNo,LocationOrange.Code);
      WarehouseActivityLine.VALIDATE("Qty. to Handle",QtyToHandle);
      WarehouseActivityLine.VALIDATE("Qty. to Handle (Base)",QtyToHandle);
      WarehouseActivityLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateInventoryOnLocationWithWhseAdjustment@155(Location@1000 : Record 14;Item@1002 : Record 27;Quantity@1003 : Decimal);
    VAR
      WarehouseJournalLine@1001 : Record 7311;
    BEGIN
      WarehouseJournalSetup(Location.Code);
      LibraryWarehouse.CreateWhseJournalLine(
        WarehouseJournalLine,WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,'',
        Location."Cross-Dock Bin Code",WarehouseJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Quantity);
      LibraryWarehouse.RegisterWhseJournalLine(
        WarehouseJournalBatch."Journal Template Name",WarehouseJournalBatch.Name,Location.Code,TRUE);
      LibraryWarehouse.CalculateWhseAdjustment(Item,ItemJournalBatch);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateBinAndBinContent@189(LocationCode@1000 : Code[10];Fixed@1007 : Boolean;Default@1006 : Boolean;Dedicated@1005 : Boolean);
    VAR
      Zone@1001 : Record 7300;
      Bin@1002 : Record 7354;
      BinContent@1003 : Record 7302;
      Item@1009 : Record 27;
    BEGIN
      FindZone(Zone,LocationCode);
      FindLastBin(Bin,Zone."Location Code",Zone.Code);
      Bin.VALIDATE(Dedicated,Dedicated);
      Bin.MODIFY(TRUE);
      CreateBinContentWithItemVariantCode(
        BinContent,LocationCode,Bin.Code,Zone.Code,LibraryInventory.CreateItem(Item),Item."Base Unit of Measure",Fixed,Default,'');
    END;

    LOCAL PROCEDURE FindBinCodeInBinContent@202(VAR BinContent@1000 : Record 7302;VAR ItemCode@1001 : Code[20];MaxStep@1002 : Integer);
    BEGIN
      BinContent.NEXT(LibraryRandom.RandInt(MaxStep));
      ItemCode := BinContent."Bin Code";
    END;

    LOCAL PROCEDURE FindBinCodesInBinContent@175(VAR FirstCode@1000 : Code[20];VAR SecondCode@1001 : Code[20];LocationCode@1003 : Code[10]);
    VAR
      BinContent@1002 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Location Code",LocationCode);
      FindBinCodeInBinContent(BinContent,FirstCode,BinContent.COUNT DIV 2);
      FindBinCodeInBinContent(BinContent,SecondCode,BinContent.COUNT DIV 2);
    END;

    LOCAL PROCEDURE FindItemCodeInBinContent@198(VAR BinContent@1000 : Record 7302;VAR ItemCode@1001 : Code[20];MaxStep@1002 : Integer);
    BEGIN
      BinContent.NEXT(LibraryRandom.RandInt(MaxStep));
      ItemCode := BinContent."Item No.";
    END;

    LOCAL PROCEDURE FindItemCodesInBinContent@235(VAR FirstCode@1000 : Code[20];VAR SecondCode@1001 : Code[20];LocationCode@1007 : Code[10]);
    VAR
      BinContent@1002 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Location Code",LocationCode);
      FindItemCodeInBinContent(BinContent,FirstCode,BinContent.COUNT DIV 2);
      FindItemCodeInBinContent(BinContent,SecondCode,BinContent.COUNT DIV 2);
    END;

    LOCAL PROCEDURE FindItemVariantCodeInBinContent@203(VAR BinContent@1000 : Record 7302;VAR ItemCode@1001 : Code[20];MaxStep@1002 : Integer);
    BEGIN
      BinContent.NEXT(LibraryRandom.RandInt(MaxStep));
      ItemCode := BinContent."Variant Code";
    END;

    LOCAL PROCEDURE FindItemVariantCodesInBinContent@236(VAR FirstCode@1001 : Code[20];VAR SecondCode@1000 : Code[20];LocationCode@1003 : Code[10]);
    VAR
      BinContent@1002 : Record 7302;
      ItemCode@1004 : Code[20];
    BEGIN
      BinContent.SETRANGE("Location Code",LocationCode);
      FindItemCodeInBinContent(BinContent,ItemCode,BinContent.COUNT DIV 2);
      BinContent.SETRANGE("Item No.",ItemCode);
      BinContent.FINDFIRST;

      FindItemVariantCodeInBinContent(BinContent,FirstCode,BinContent.COUNT DIV 2);
      FindItemVariantCodeInBinContent(BinContent,SecondCode,BinContent.COUNT DIV 2);
    END;

    LOCAL PROCEDURE FillBinContent@171(VAR LocationCode@1008 : Code[10];CreateItemVariant@1012 : Boolean);
    VAR
      Item@1002 : Record 27;
      Zone@1003 : Record 7300;
      Bin@1004 : Record 7354;
      BinContent@1005 : Record 7302;
      BinType@1007 : Record 7303;
      ItemVariant@1010 : Record 5401;
      ItemIndex@1006 : Integer;
      BinIndex@1000 : Integer;
      ItemVariantIndex@1013 : Integer;
    BEGIN
      LocationCode := LocationWhite.Code;

      FindZone(Zone,LocationCode);
      FindBinType(BinType,TRUE,FALSE,FALSE,FALSE);

      FOR BinIndex := 1 TO LibraryRandom.RandIntInRange(3,10) DO BEGIN
        LibraryWarehouse.CreateBin(
          Bin,
          LocationCode,
          COPYSTR(
            LibraryUtility.GenerateRandomCode(Bin.FIELDNO(Code),DATABASE::Bin),1,
            LibraryUtility.GetFieldLength(DATABASE::Bin,Bin.FIELDNO(Code))),
          Zone.Code,
          BinType.Code);
        FOR ItemIndex := 1 TO LibraryRandom.RandIntInRange(3,10) DO BEGIN
          CreateItem(Item);
          IF CreateItemVariant THEN
            FOR ItemVariantIndex := 1 TO LibraryRandom.RandIntInRange(3,10) DO BEGIN
              LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
              CreateBinContentWithItemVariantCode(
                BinContent,LocationCode,Bin.Code,Zone.Code,Item."No.",Item."Base Unit of Measure",TRUE,TRUE,ItemVariant.Code);
            END
          ELSE
            CreateBinContentWithItemVariantCode(
              BinContent,LocationCode,Bin.Code,Zone.Code,Item."No.",Item."Base Unit of Measure",TRUE,TRUE,'');
        END;
      END;
    END;

    LOCAL PROCEDURE VerifyBinContentGetCaptionWithFilter@176(FilterMask@1001 : Text;LocationCode@1007 : Code[20];FirstCode@1004 : Code[20];SecondCode@1005 : Code[20];FieldNo@1013 : Integer;TableCaption@1012 : Text);
    VAR
      BinContent@1000 : Record 7302;
      Location@1006 : Record 14;
      RecRef@1010 : RecordRef;
      FieldRef@1011 : FieldRef;
      ExpectedCaption@1009 : Text;
    BEGIN
      RecRef.GETTABLE(BinContent);
      FieldRef := RecRef.FIELD(BinContent.FIELDNO("Location Code"));
      FieldRef.SETFILTER(LocationCode);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.SETFILTER(STRSUBSTNO(FilterMask,FirstCode,SecondCode));
      RecRef.FINDFIRST;
      RecRef.SETTABLE(BinContent);

      ExpectedCaption := STRSUBSTNO('%1 %2',Location.TABLECAPTION,LocationCode);
      IF FilterMask <> '' THEN
        ExpectedCaption := STRSUBSTNO('%1 %2 %3',ExpectedCaption,TableCaption,FieldRef.VALUE);

      Assert.AreEqual(
        ExpectedCaption,
        BinContent.GetCaption,
        STRSUBSTNO(BinContentGetCaptionErr,BinContent.GETFILTERS));
    END;

    LOCAL PROCEDURE VerifyActivityLine@110(LocationCode@1000 : Code[10];SourceNo@1001 : Code[20];ItemNo@1002 : Code[20];BaseUnitOfMeasure@1005 : Code[10];Quantity@1003 : Decimal;ActivityType@1006 : Option);
    VAR
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      FindWhseActivityLine(WarehouseActivityLine,ActivityType,LocationCode,SourceNo,WarehouseActivityLine."Action Type"::Place);
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
      VerifyWhseActivityLine(WarehouseActivityLine,BaseUnitOfMeasure,1,Quantity);  // value is Quantity Per Unit Of Measure For Base Unit Of Measure.
    END;

    LOCAL PROCEDURE VerifyBinCode@20(ActivityType@1003 : Option;ActionType@1000 : Option;LocationCode@1004 : Code[10];SourceNo@1005 : Code[20];ExpectedBinCode@1002 : Code[20]);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      FindWhseActivityLine(WarehouseActivityLine,ActivityType,LocationCode,SourceNo,ActionType);
      Assert.AreEqual(
        ExpectedBinCode,WarehouseActivityLine."Bin Code",STRSUBSTNO(BinError,ExpectedBinCode,WarehouseActivityLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyBinCodeNotEqual@5(ActivityType@1003 : Option;ActionType@1000 : Option;LocationCode@1004 : Code[10];SourceNo@1005 : Code[20];NotExpectedBinCode@1002 : Code[20]);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      FindWhseActivityLine(WarehouseActivityLine,ActivityType,LocationCode,SourceNo,ActionType);
      Assert.AreNotEqual(
        NotExpectedBinCode,WarehouseActivityLine."Bin Code",STRSUBSTNO(BinError2,NotExpectedBinCode,WarehouseActivityLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE FindWarehouseEntry@19(VAR WarehouseEntry@1003 : Record 7312;ItemNo@1000 : Code[20];LocationCode@1004 : Code[10]);
    BEGIN
      WarehouseEntry.SETRANGE("Item No.",ItemNo);
      WarehouseEntry.SETRANGE("Location Code",LocationCode);
      WarehouseEntry.SETRANGE("Entry Type",WarehouseEntry."Entry Type"::Movement);
      WarehouseEntry.FINDSET;
    END;

    LOCAL PROCEDURE VerifyBinOnProdOrdComponent@51(VAR ProdOrderComponent@1000 : Record 5407;ItemNo@1001 : Code[20];BinCode@1002 : Code[20]);
    BEGIN
      ProdOrderComponent.TESTFIELD("Item No.",ItemNo);
      ProdOrderComponent.TESTFIELD("Bin Code",BinCode);
    END;

    LOCAL PROCEDURE VerifyWarehouseEntry@26(WarehouseEntry@1000 : Record 7312;BinCode@1001 : Code[20];Quantity@1002 : Decimal);
    BEGIN
      WarehouseEntry.TESTFIELD("Bin Code",BinCode);
      WarehouseEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedShipment@61(SalesHeader@1001 : Record 36);
    VAR
      PostedWhseShipmentLine@1002 : Record 7323;
      SalesLine@1003 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDSET;
      REPEAT
        PostedWhseShipmentLine.SETRANGE("Source No.",SalesLine."Document No.");
        PostedWhseShipmentLine.SETRANGE("Source Line No.",SalesLine."Line No.");
        PostedWhseShipmentLine.FINDFIRST;
        Assert.AreEqual(PostedWhseShipmentLine.Quantity,SalesLine.Quantity,
          STRSUBSTNO(QuantityError,SalesLine.Quantity,PostedWhseShipmentLine.TABLECAPTION));
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDefaultBinContent@49(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20];BinCode@1002 : Code[20]);
    VAR
      BinContent@1003 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE(Default,TRUE);
      BinContent.FINDFIRST;
      Assert.AreEqual(BinCode,BinContent."Bin Code",STRSUBSTNO(BinError,BinCode,BinContent.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyWhseActivityLine@65(WarehouseActivityLine@1000 : Record 5767;UnitOfMeasureCode@1001 : Code[10];QtyPerUnitOfMeasure@1002 : Decimal;ExpectedQuantity@1003 : Decimal);
    VAR
      GeneralLedgerSetup@1004 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      WarehouseActivityLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
      WarehouseActivityLine.TESTFIELD("Qty. per Unit of Measure",QtyPerUnitOfMeasure);
      Assert.AreNearlyEqual(
        ExpectedQuantity,WarehouseActivityLine.Quantity,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(QuantityError,ExpectedQuantity,WarehouseActivityLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedQuantity,WarehouseActivityLine."Qty. Outstanding",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(QuantityError,ExpectedQuantity,WarehouseActivityLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyRegisteredWhseActivityLine@103(WarehouseActivityLine@1000 : Record 5767;UnitOfMeasureCode@1001 : Code[10];QtyPerUnitOfMeasure@1002 : Decimal;ExpectedQuantity@1003 : Decimal);
    VAR
      RegisteredWhseActivityLine@1004 : Record 5773;
      GeneralLedgerSetup@1005 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      FindRegisterWarehouseActivityLine(
        RegisteredWhseActivityLine,WarehouseActivityLine."Activity Type",WarehouseActivityLine."Action Type",
        WarehouseActivityLine."Location Code",WarehouseActivityLine."Source No.");

      RegisteredWhseActivityLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
      RegisteredWhseActivityLine.TESTFIELD("Qty. per Unit of Measure",QtyPerUnitOfMeasure);
      Assert.AreNearlyEqual(
        ExpectedQuantity,RegisteredWhseActivityLine.Quantity,GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(QuantityError,ExpectedQuantity,WarehouseActivityLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyTransferReceipt@102(TransferLine@1000 : Record 5741);
    VAR
      TransferReceiptLine@1004 : Record 5747;
    BEGIN
      TransferReceiptLine.SETRANGE("Transfer Order No.",TransferLine."Document No.");
      TransferReceiptLine.SETRANGE("Item No.",TransferLine."Item No.");
      TransferReceiptLine.FINDFIRST;
      TransferReceiptLine.TESTFIELD(Quantity,TransferLine.Quantity);
      TransferReceiptLine.TESTFIELD("Transfer-to Code",TransferLine."Transfer-to Code");
      TransferReceiptLine.TESTFIELD("Transfer-from Code",TransferLine."Transfer-from Code");
      TransferReceiptLine.TESTFIELD("Transfer-To Bin Code",TransferLine."Transfer-To Bin Code");
    END;

    LOCAL PROCEDURE VerifyTransferShipment@97(TransferOderNo@1000 : Code[20];ItemNo@1001 : Code[20];Quantity@1006 : Decimal;TransferToCode@1002 : Code[10];TransferFromCode@1003 : Code[10]);
    VAR
      TransferShipmentLine@1004 : Record 5745;
    BEGIN
      TransferShipmentLine.SETRANGE("Transfer Order No.",TransferOderNo);
      TransferShipmentLine.SETRANGE("Item No.",ItemNo);
      TransferShipmentLine.FINDFIRST;
      TransferShipmentLine.TESTFIELD(Quantity,Quantity);
      TransferShipmentLine.TESTFIELD("Transfer-to Code",TransferToCode);
      TransferShipmentLine.TESTFIELD("Transfer-from Code",TransferFromCode);
    END;

    LOCAL PROCEDURE VerifyWarehouseShipmentLine@8(No@1000 : Code[20];ItemNo@1001 : Code[20];QtyToShip@1002 : Decimal;Quantity@1003 : Decimal);
    VAR
      WarehouseShipmentLine@1004 : Record 7321;
    BEGIN
      WarehouseShipmentLine.SETRANGE("No.",No);
      WarehouseShipmentLine.SETRANGE("Item No.",ItemNo);
      WarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentLine.TESTFIELD("Qty. to Ship",QtyToShip);
      WarehouseShipmentLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedWarehouseShipmentLine@12(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20];WhseShipmentNo@1002 : Code[20];SourceNo@1004 : Code[20];Quantity@1003 : Decimal);
    VAR
      PostedWhseShipmentLine@1005 : Record 7323;
    BEGIN
      PostedWhseShipmentLine.SETRANGE("Location Code",LocationCode);
      PostedWhseShipmentLine.SETRANGE("Item No.",ItemNo);
      PostedWhseShipmentLine.SETRANGE("Whse. Shipment No.",WhseShipmentNo);
      PostedWhseShipmentLine.FINDFIRST;
      PostedWhseShipmentLine.TESTFIELD(Quantity,Quantity);
      PostedWhseShipmentLine.TESTFIELD("Source No.",SourceNo);
    END;

    LOCAL PROCEDURE VerifyRegisteredActivityLine@104(ActivityType@1000 : Option;LocationCode@1007 : Code[10];SourceNo@1006 : Code[20];ItemNo@1005 : Code[20];UnitOfMeasureCode@1004 : Code[10];ExpectedQuantity@1003 : Decimal);
    VAR
      RegisteredWhseActivityLine@1002 : Record 5773;
    BEGIN
      FindRegisterWarehouseActivityLine(
        RegisteredWhseActivityLine,ActivityType,RegisteredWhseActivityLine."Action Type"::Place,LocationCode,SourceNo);
      RegisteredWhseActivityLine.TESTFIELD("Item No.",ItemNo);
      RegisteredWhseActivityLine.TESTFIELD("Unit of Measure Code",UnitOfMeasureCode);
      RegisteredWhseActivityLine.TESTFIELD("Qty. per Unit of Measure",1);
      Assert.AreEqual(
        ExpectedQuantity,RegisteredWhseActivityLine.Quantity,
        STRSUBSTNO(QuantityError,ExpectedQuantity,RegisteredWhseActivityLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@138(DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];Quantity@1004 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD("Item No.",ItemNo);
      ItemLedgerEntry.TESTFIELD("Location Code",LocationCode);
      ItemLedgerEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedPurchaseInvoice@154(DocumentNo@1000 : Code[20];Type@1001 : Option;Quantity@1002 : Decimal);
    VAR
      PurchInvLine@1003 : Record 123;
    BEGIN
      PurchInvLine.SETRANGE("Document No.",DocumentNo);
      PurchInvLine.SETRANGE(Type,Type);
      PurchInvLine.FINDFIRST;
      PurchInvLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedSalesInvoice@125(DocumentNo@1002 : Code[20];Type@1001 : Option;Quantity@1000 : Decimal);
    VAR
      SalesInvoiceLine@1003 : Record 113;
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.SETRANGE(Type,Type);
      SalesInvoiceLine.FINDFIRST;
      SalesInvoiceLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPostedWhseReceiptLine@165(SourceNo@1001 : Code[20];ItemNo@1002 : Code[20];Quantity@1003 : Decimal;LocationCode@1004 : Code[20]);
    VAR
      PostedWhseReceiptLine@1000 : Record 7319;
    BEGIN
      FindPostedWhseReceiptLines(PostedWhseReceiptLine,SourceNo);
      PostedWhseReceiptLine.TESTFIELD("Item No.",ItemNo);
      PostedWhseReceiptLine.TESTFIELD("Location Code",LocationCode);
      PostedWhseReceiptLine.TESTFIELD(Quantity,Quantity);
    END;

    [RequestPageHandler]
    PROCEDURE WhseSourceCreateDocumentReportHandler@111(VAR WhseSourceCreateDocument@1000 : TestRequestPage 7305);
    BEGIN
      WhseSourceCreateDocument.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE ChangeUOMRequestPageHandler@62(VAR WhseChangeUnitOfMeasure@1001 : TestRequestPage 7314);
    BEGIN
      WhseChangeUnitOfMeasure.UnitOfMeasureCode.SETVALUE(NewUnitOfMeasure);
      WhseChangeUnitOfMeasure.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SourceDocumentsPageHandler@95(VAR SourceDocuments@1000 : Page 5793;VAR Response@1001 : Action);
    VAR
      WarehouseRequest@1002 : Record 5765;
    BEGIN
      WarehouseRequest.SETRANGE("Location Code",LocationCode2);
      WarehouseRequest.SETRANGE("Source No.",SourceNo);
      WarehouseRequest.FINDFIRST;
      SourceDocuments.SETRECORD(WarehouseRequest);
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE PickSelectionPageHandler@52(VAR PickSelection@1000 : Page 7343;VAR Response@1001 : Action);
    VAR
      WhsePickRequest@1002 : Record 7325;
    BEGIN
      WhsePickRequest.SETRANGE("Location Code",LocationCode2);
      WhsePickRequest.SETRANGE("Document No.",WarehouseShipmentNo);
      WhsePickRequest.FINDFIRST;
      PickSelection.SETRECORD(WhsePickRequest);
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE GetReceiptLinePageHandler@109(VAR GetReceiptLines@1000 : Page 5709;VAR Response@1001 : Action);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE GetShipmentLinePageHandler@64(VAR GetShipmentLines@1001 : Page 5708;VAR Response@1000 : Action);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE WhseShipmentCreatePick@143(VAR WhseShipmentCreatePick@1000 : TestRequestPage 7318);
    BEGIN
      WhseShipmentCreatePick.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE WhseSourceCreateDocumentHandler@170(VAR WhseSourceCreateDocument@1000 : TestRequestPage 7305);
    BEGIN
    END;

    [MessageHandler]
    PROCEDURE ShipmentReceiptDeleteMessageHandler@209(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,DeletedMessage) > 0,STRSUBSTNO(UnexpectedMessageDialog,Message));
    END;

    [MessageHandler]
    PROCEDURE DisregardedMessageHandler@228(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,DisregardMessage) > 0,STRSUBSTNO(UnexpectedMessageDialog,Message));
    END;

    [MessageHandler]
    PROCEDURE ReceiptTransferDeletedMessageHandler@305(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,DeletedMessage) > 0,STRSUBSTNO(UnexpectedMessageDialog,Message));
    END;

    [MessageHandler]
    PROCEDURE PickActivityMessageHandler@271(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,PickActivityMessage) > 0,Message);
    END;

    [MessageHandler]
    PROCEDURE PutAwayActivityMessageHandler@276(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,PutAwayActivityMessage) > 0,Message);
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
      Unsupported version tags:
      CA: Unable to Execute
      IN: Unable to Execute

      Test SCM Warehouse.
       1. Check that Bin Code is same as on Transfer Order.
       2. Check that Place Bin Code is same as changed on shipment line and Take Bin Code as transfer order line.
       3. Check that Warehouse Receipt Line Bin Code is same as Transfer To Bin Code.
       4. Check that Take and Place Bin Code is same as changed on Transfer To Bin Code on Warehouse Activity Line.
       5. Check That Bin Content Quantity is same as Quantity on Transfer Order.
       6. Check that Bin Code is same as Default Bin Code on Sales Line.
       7. Check That Bin Code on Warehouse Shipment Line is same as Bin Code as on Sales Line.
       8. Check that Place Bin Code is same as changed on shipment line and Take Bin Code as Bin Code on Sales order line.
       9. Check that Warehouse Entry Quantity and Bin Code are same as Sales Line after change Bin Code on Warehouse Shipment Line.
      10. Check that Warning Message is Pop Out after change Default Bin Code on Sales Line.
      11. Check that Bin Code is same as Default Bin Code on Purchase Line.
      12. Check That Bin Code on Warehouse Receipt Line is same as Bin Code as on Purchase Line.
      13. Check that Take and Place Bin Code is same as Receipt line Bin Code.
      14. Check that Warehouse Entry Quantity and Bin Code are same as Purchase Line after change Bin Code on Put Away and Register.
      15. Check that Warning Message is Pop Out after change Default Bin Code on Purchase Line.
      16. Check that Production Order Bin Code is same as Default Bin Code of Item.
      17. Check that Bin Code of Production Order Component Item is same as default Bin Code of Item.
      18. Check that Take and Place Bin Code is same as expected while doing Cross Transaction and Pick from Pick Worksheet.
      19. Check that Last error is same as expected when creating Pick from Pick Worksheet in cross transaction when inventory quantity
          less than Demand Quantity.
      20. Check that Take and Place Bin Code is same as expected  while doing Cross Transaction and Pick from Warehouse Shipment.
      21. Check that Default Bin Code on Bin Content is first Bin Code in which inventory is updated in cross Transaction
          and Check posted Shipment Quantity with sales order Quantity.
      22. Check That Pick Document is same as Expected without changing Unit Of Measure and Create Pick from Production Order.
      23. Check That Register Pick Document is same as Pick document without changing Unit Of Measure and Create Pick from
          Production Order.
      24. Check That Put Away Document is same as Expected after run change Unit Of Measure.
      25. Check That Register Put Document is same as Put Away Document after run change Unit Of Measure.
      26. Check That Pick Document is same as Expected with changing Unit Of Measure and Create Pick from Production Order.
      27. Check That Register Pick Document is same as Pick document with changing Unit Of Measure and Create Pick from Production Order.
      28. Check that Transfer Receipt Line and Warehouse Entry has same data as expected when Made Transfer Receipt using Full WMS Setup.
      29. Check that Transfer Shipment Line same data as expected when Ship Transfer Order.
      30. Check that Transfer Receipt Line same data as expected when Ship Transfer Order using Full WMS Setup.
      31. Check that Qty to Ship and Quantity is same as expected after run Auto Fill Qty.
      32. Check that Error Message is same as expected when we directly put Quantity in Qty to Ship Field when there is Require Pick on location.
      33. Check That Quantity To Ship on Warehouse Shipment Line is same as Partial Pick Quantity after Register Warehouse Activity.
      34. Check that Quantity on Posted Warehouse Shipment is same as Qty To Handle On Pick after Register Warehouse Activity.
      35. Check That Put Away created from Warehouse Receipt have same data as on Different Purchase Order. And Check That Registered Put Away is same as Put Away created from Warehouse Receipt have same data as on Different Purchase Order.
      36. Check That Pick created from Warehouse Shipment have same data as on Different Sales Order And Check That Registered Pick is same as Pick created from Warehouse Shipment have same data as on Different Sales Order.
      37. Check That Error Occurred while Posting Warehouse Shipment with Partial Quantity when Shipping Advice is set to Complete in Sales Order.
      38. Check That Posted Warehouse Shipment has same data as expected when posting quantity is Complete and Verify That Quantity Shipped is updating On Sales Line.
      39. Check That Posted Warehouse Shipment has same data as expected when posting quantity is Partial or Complete and Verify That Quantity Shipped is update On Sales Line.
      40. Check That Quantity Shipped and Outstanding Quantity is same as expected when use Different UOM.
      41. Check that the Pick is not created on Blank location for multiple Activity Lines.
      42. Check that the Pick is not created on Blank location for single Activity Line.
      42. Check that correct Quantity Outstanding on Pick Worksheet for Green location.
      43. Check that correct Quantity Outstanding on Warehouse Worksheet Line for Green location.
      44. Check that the pick is created for mutiple bin assignment on Activity Lines.
      45. Check that Warehoue Receipt created from Purchase Order posted successfully and has correct Item Ledger Entry.
      46. Check that Purchase Invoice posted successfully having same Invoice No. as Receipt No.
      47. Check that Warehouse Shipment created from Sales Order posted successfully and verify it in Item Ledger Entry.
      48. Check that Sales Invoice posted successfully having same invoice No. as  Receipt No.
      49. Check that the Pick Activity can be created from Warehouse Shipment.
      50. Check whether the Pick Activity can be created from Warehouse Internal Pick.
      51. Check whether the Put Away Activity can be created from Warehouse Internal Put Away.
      52. Check whether the Pick Activity can be created from Production Order.
      53. Check whether the Pick Activity can be created from Posted Whse Receipt Line.
      54. Check whether the Pick Activity can be created from  Whse Shipment using Pick Worksheet.
      55. Check that an error message pops up when create Internal Pick with Non-warehouse.
      56. Check that an error message pops up when create Internal Putaway with Non-warehouse.
      57. Check caption building in public GetCaption function in Bin Content table.
      58. Check Item can be put away into floating Bin with Fixed Bin existing.
      59. Check Item can be put away into floating Bin with Default Bin existing.
      60. Check Item can be put away into floating Bin with Dedicated Bin existing.

        Covers Test Cases for WI - 245701
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        TransferWhseShipment                             230357
        TransferWhseCreatePick                           230357
        TransferWhseReceipt                              230357
        TransferPostWhseReceipt                          230357
        TransferRegisterPutAway                          230357

        Covers Test Cases for WI - 245702
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        WhseCreateSalesOrder                             230358
        SalesWhseShipment                                230358
        SalesCreatePick                                  230358
        SalesRegisterPickPostShipment                    230358
        SalesDefaultBinWarningMessage                    230358

        Covers Test Cases for WI - 245703
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        WhseCreatePurchaseOrder                          230359
        PurchaseWarehouseReceipt                         230359
        PurchasePutAway                                  230359
        PurchaseChangeBinAndRegister                     230359
        PurchDefaultBinWarningMessage                    230359
        ProductionOrderBinCode                           230359
        ProductionOrdComponentBinCode                    230359

        Covers Test Cases for WI - 245704
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        BinCodeForPickUsingWorkSheet                     128094
        PickErrorForQtyWhseWorksheet                     128094
        BinCodeForPickFromWhseShipment                   128094
        CheckDefaultBin                                  128094

        Covers Test Cases for WI - 245630
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        CreatePickFromProductionOrder                     204429
        RegisterPickForProductionOrder                    204429
        ChangeUOMAndCreatePutAway                         204430,143119
        ChangeUOMAndRegisterPutAway                       204430,143119
        ChangeUOMAndCreatePickFromProductionOrder         204430
        ChangeUOMAndRegisterPickForProductionOrder        204430

        Covers Test Cases for WI - 260718
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        TransferAndReceiveUsingWarehouseReceipt         124847
        ShipTransferOrder                               124848
        ReceiveTransferOrder                            124849
        AutoFillQtyToShipInWhseShipment                 124853,124854
        QtyToShipErrorForWhseShipment                   124846
        RegisterPartialPick                             121627
        RegisterPartialPickAndPostShipment              121627

        Covers Test Cases for WI - 261023
        -------------------------------------------------------------------------
        Test Function Name                               TFS ID
        -------------------------------------------------------------------------
        CreatePutAwayForTwoPurchaseOrder                 128852
        CreatePickForTwoSalesOrder                       128852
        PostShippingAdviceComplete                       128765
        PostCompleteSalesShipment                        121627
        PostPartialShipment                              121627
        ShipmentWithDifferentUOM                         143078

        Covers Test Cases for WI - 264945
        ---------------------------------------------------------------------------------------------
        Test Function Name                                                                     TFS ID
        ---------------------------------------------------------------------------------------------
        PickErrorMultipleLinesWithBlankLocation, PickErrorSingleLineWithBlankLocation          164125
        CreatePickFromPickWorksheet, AvailablePickOnWarehouseWorksheet                         164122
        PickAcrossMultipleBins                                                                 203796

        Covers Test Cases for WI - 265779
        ----------------------------------------------------------------------------------------
        Test Function Name                                                               TFS ID
        ----------------------------------------------------------------------------------------
        WhseReceiptFromPurchaseOrder, PurchaseInvoiceWithInvoiceNoAsReceiptNo            236334
        WhseShipmentFromSalesOrder, SalesInvoiceWithInvoiceNoAsShipmentNo                236334

        Covers Test Cases for WI - 268033
        ----------------------------------------------------------------
        Test Function Name                                        TFS ID
        ----------------------------------------------------------------
        WhseBatchPickFromWhseShipment                             129134

        Covers Test Cases for WI - 268033
        ----------------------------------------------------------------------------------------
        Test Function Name                                                                FS ID
        ----------------------------------------------------------------------------------------
        PickFromWhseInternalPick, PutAwayFromWhseInternalPutaway                          129129
        WhseBatchPickFromProductionOrder, WhseBatchPutAwayFromPostedWhseReceiptLine       129129

        Covers Test Cases for WI - 268033
        ---------------------------------------------------------
        Test Function Name                                TFS ID
        ---------------------------------------------------------
        WhseBatchPickFromPickWorksheet                    129083

        Covers Test Cases for WI - N/A
        ---------------------------------------------------------
        Test Function Name                                TFS ID
        ---------------------------------------------------------
        CreateWhseInternalPickWithNonWarehouse            55910
        CreateWhseInternalPutawayWithNonWarehouse         55910
        BinContentGetCaptionWithFilterOnBinCode           54635
        BinContentGetCaptionWithFilterOnItemNo            54635
        BinContentGetCaptionWithFilterOnVariantCode       54635
        CreatePutawayToFloatingBinWithFixedBinExist       68754
        CreatePutawayToFloatingBinWithDefaultBinExist     68754
        CreatePutawayToFloatingBinWithDedicatedBinExist   68754
    }
    END.
  }
}

