OBJECT Codeunit 134083 ERM Adjust Exchange Rates
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1004 : Codeunit 130000;
      LibraryERM@1000 : Codeunit 131300;
      LibraryRandom@1001 : Codeunit 130440;
      LibrarySetupStorage@1003 : Codeunit 131009;
      IsInitialized@1002 : Boolean;
      ExpectNoAdjustment@1005 : TextConst 'ENU=Expect no adjustment for entries before %1';
      ExchangeRateAdjmt@1006 : TextConst 'ENU=Exchange Rate Adjmt. of %1 %2';

    [Test]
    PROCEDURE AdjustExchangeRates@2();
    VAR
      CurrencyExchangeRate@1006 : Record 330;
      GLAccount@1002 : Record 15;
      GLAccount2@1001 : Record 15;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Test run the Adjust Exchange Rate and check the corresponding ledger entries.

      // 1. Setup: Create a new Currency with Exchange Rate, create another Exchange Rate for the Currency having greater
      // Relational Exch Rate Amount.
      Initialize;
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);
      LibraryERM.SetAddReportingCurrency(CurrencyExchangeRate."Currency Code");

      // Create two GL Entries for two different GL Accounts having different Exchange Rate Adjustment.
      CreateGLEntryForAccount(
        GLAccount,CurrencyExchangeRate."Currency Code",GLAccount."Exchange Rate Adjustment"::"Adjust Amount",WORKDATE);
      CreateGLEntryForAccount(
        GLAccount2,CurrencyExchangeRate."Currency Code",GLAccount2."Exchange Rate Adjustment"::"Adjust Additional-Currency Amount",
        WORKDATE);
      CreateNewExchangeRate(CurrencyExchangeRate);

      // 2. Exercise: Run the report Adjust Exchange Rate.
      DocumentNo := FORMAT(LibraryRandom.RandInt(100));
      LibraryERM.RunAdjustExchangeRates(
        CurrencyExchangeRate."Currency Code",WORKDATE,WORKDATE,ExchangeRateAdjmt,WORKDATE,DocumentNo,TRUE);

      // 3. Verification: Verify that the amount in GL Entry is populated as per the adjustment exchange rate for both GL Accounts.
      VerifyGLEntryAdjustAmount(GLAccount,DocumentNo,CurrencyExchangeRate."Currency Code");
      VerifyGLEntry(DocumentNo,GLAccount2."No.");
    END;

    [Test]
    PROCEDURE AdjustExchRateACYStartDate@9();
    VAR
      CurrencyExchangeRate@1006 : Record 330;
      GLAccount@1002 : Record 15;
      GLAccount2@1001 : Record 15;
      DocumentNo@1005 : Code[20];
    BEGIN
      // Test Start Date Field is Used for  Additional Reporting Currency Adjustment.

      // 1. Setup: Create a new Currency with Exchange Rate.
      Initialize;
      CreateCurrencyWithExchangeRate(CurrencyExchangeRate);

      // Setup: Configure Additional Currency.
      LibraryERM.SetAddReportingCurrency(CurrencyExchangeRate."Currency Code");

      // Setup: Create two GL Entries for two different GL Accounts with Different Posting Date.
      CreateGLEntryForAccount(
        GLAccount,CurrencyExchangeRate."Currency Code",GLAccount."Exchange Rate Adjustment"::"Adjust Additional-Currency Amount",
        LibraryRandom.RandDate(-7));  // Random Date in the Past.
      CreateGLEntryForAccount(
        GLAccount2,CurrencyExchangeRate."Currency Code",GLAccount."Exchange Rate Adjustment"::"Adjust Additional-Currency Amount",
        WORKDATE);

      // Setup: Create new Exchange Rate for a WORKDATE.
      LibraryERM.CreateExchRate(CurrencyExchangeRate,CurrencyExchangeRate."Currency Code",WORKDATE);
      UpdateExchangeRate(CurrencyExchangeRate,100 * LibraryRandom.RandInt(4),200 * LibraryRandom.RandInt(4));

      // 2. Exercise: Run the report Adjust Exchange Rate.
      DocumentNo := FORMAT(LibraryRandom.RandInt(100));
      LibraryERM.RunAdjustExchangeRates(
        CurrencyExchangeRate."Currency Code",WORKDATE,WORKDATE,ExchangeRateAdjmt,WORKDATE,DocumentNo,TRUE);

      // 3. Verification: Verify that Entries with Posting Date Less than WORKDATE Were Not Adjusted.
      Assert.IsFalse(VerifyGLEntryFound(DocumentNo,GLAccount."No."),STRSUBSTNO(ExpectNoAdjustment,WORKDATE));

      // 4. Verification: Verify that Entries with Posting Date Equal to WORKDATE Were Adjusted.
      VerifyGLEntry(DocumentNo,GLAccount2."No.");
    END;

    [Test]
    PROCEDURE CheckNoErrorOnCurrenciesPage@4();
    VAR
      Currency@1000 : Record 4;
      CurrencyExchangeRate@1001 : Record 330;
      Currencies@1002 : TestPage 5;
    BEGIN
      // Check that there is no error exist on currencies page when exchange rate is defined with starting date only.

      // Setup:Create currency and create Exchange Rate with starting date only.
      Initialize;
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateExchRate(CurrencyExchangeRate,Currency.Code,WORKDATE);

      // Exercise: Open Currencies page.
      Currencies.OPENEDIT;
      Currencies.FILTER.SETFILTER(Code,Currency.Code);

      // Verify: Verifying that Currency Code exist on page and no error exist when open the page.
      Currencies.Code.ASSERTEQUALS(Currency.Code);
    END;

    LOCAL PROCEDURE Initialize@8();
    BEGIN
      LibrarySetupStorage.Restore;
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;
      IsInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
    END;

    LOCAL PROCEDURE CreateCurrencyWithExchangeRate@1(VAR CurrencyExchangeRate@1002 : Record 330);
    VAR
      Currency@1000 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      SetupAccountOnCurrency(Currency);
      Currency.MODIFY(TRUE);

      LibraryERM.CreateExchRate(CurrencyExchangeRate,Currency.Code,0D);
      UpdateExchangeRate(CurrencyExchangeRate,100 * LibraryRandom.RandInt(4),200 * LibraryRandom.RandInt(4));
    END;

    LOCAL PROCEDURE CreateGLEntryForAccount@26(VAR GLAccount@1000 : Record 15;CurrencyCode@1002 : Code[10];ExchangeRateAdjustment@1001 : Option;PostingDate@1004 : Date);
    VAR
      GenJournalLine@1003 : Record 81;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Exchange Rate Adjustment",ExchangeRateAdjustment);
      GLAccount.VALIDATE("Income/Balance",GLAccount."Income/Balance"::"Balance Sheet");
      GLAccount.MODIFY(TRUE);
      CreateGeneralJournalLine(GenJournalLine,GLAccount."No.",CurrencyCode);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@6(VAR GenJournalLine@1002 : Record 81;GLAccountNo@1000 : Code[20];CurrencyCode@1001 : Code[10]);
    VAR
      GenJournalBatch@1003 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);

      // Using Random Number Generator to Generate the Amount.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"G/L Account",
        GLAccountNo,LibraryRandom.RandInt(200));

      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateNewExchangeRate@7(CurrencyExchangeRate@1001 : Record 330);
    VAR
      CurrencyExchangeRate2@1000 : Record 330;
    BEGIN
      LibraryERM.CreateExchRate(CurrencyExchangeRate2,CurrencyExchangeRate."Currency Code",WORKDATE);
      UpdateExchangeRate(
        CurrencyExchangeRate2,CurrencyExchangeRate."Exchange Rate Amount",2 * CurrencyExchangeRate."Relational Exch. Rate Amount");
    END;

    LOCAL PROCEDURE SetupAccountOnCurrency@17(VAR Currency@1000 : Record 4);
    BEGIN
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      Currency.VALIDATE("Residual Gains Account",Currency."Realized Gains Acc.");
      Currency.VALIDATE("Realized G/L Gains Account",Currency."Realized Gains Acc.");
      Currency.VALIDATE("Residual Losses Account",Currency."Realized Losses Acc.");
      Currency.VALIDATE("Realized G/L Losses Account",Currency."Realized Losses Acc.");
      Currency.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateExchangeRate@21(VAR CurrencyExchangeRate@1000 : Record 330;ExchangeRateAmount@1002 : Decimal;RelationalExchRateAmount@1001 : Decimal);
    BEGIN
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",ExchangeRateAmount);
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");

      // Relational Exch. Rate Amount and Relational Adjmt Exch Rate Amt always greater than Exchange Rate Amount.
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",RelationalExchRateAmount);
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyGLEntryAdjustAmount@10(GLAccount@1000 : Record 15;DocumentNo@1003 : Code[20];CurrencyCode@1001 : Code[10]);
    VAR
      CurrencyExchangeRate@1005 : Record 330;
      GLEntry@1002 : Record 17;
    BEGIN
      CurrencyExchangeRate.GET(CurrencyCode,WORKDATE);
      GLAccount.CALCFIELDS("Add.-Currency Balance at Date");
      GLEntry.SETRANGE("G/L Account No.",GLAccount."No.");
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD(
        Amount,
        GLAccount."Add.-Currency Balance at Date" * (CurrencyExchangeRate."Relational Exch. Rate Amount" / 2) /
        CurrencyExchangeRate."Exchange Rate Amount");
    END;

    LOCAL PROCEDURE VerifyGLEntry@12(DocumentNo@1001 : Code[20];GLAccountNo@1000 : Code[20]);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD(Amount,0);  // Entry will be created with zero amount.
      GLEntry.TESTFIELD("System-Created Entry",TRUE);
    END;

    LOCAL PROCEDURE VerifyGLEntryFound@20(DocumentNo@1001 : Code[20];GLAccountNo@1000 : Code[20]) : Boolean;
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      EXIT(GLEntry.FINDFIRST);
    END;

    BEGIN
    {
      // [FEATURE] [Adjust Exchange Rate]
      Unsupported version tags:
      ES: Unable to Execute
      DE: Unable to Execute
      CH: Unable to Execute (TFS ID: 50696)
      Test for Adjust Exchange Rate and Additional Reporting Currency.
        1. Test the Adjust Exchange Rate.

      TFS_TS_ID = 174581.
      Cover Test cases:
        TC5017 TFS_TC_ID=123852
        TC5018 TFS_TC_ID=123853
        TC5019 TFS_TC_ID=123854
        TC5020 TFS_TC_ID=123855
        TC5021 TFS_TC_ID=123856
        TC5022 TFS_TC_ID=123857

        2. Test Start Date Field is Used for  Additional Reporting Currency Adjustment.
        TFS_ID = 202675

        3. Check that there is no error exist on currencies page when exchange rate is defined with starting date only.

       BUG ID 52028
       ----------------------------------------------------------------------------------
       CheckNoErrorOnCurrenciesPage
       ----------------------------------------------------------------------------------
    }
    END.
  }
}

