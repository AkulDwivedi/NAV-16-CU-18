OBJECT Codeunit 134377 ERM Sales Blanket Order
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryERM@1006 : Codeunit 131300;
      LibraryUtility@1013 : Codeunit 131000;
      LibraryInventory@1009 : Codeunit 132201;
      LibraryWarehouse@1014 : Codeunit 132204;
      LibrarySales@1001 : Codeunit 130509;
      LibraryService@1011 : Codeunit 131902;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryVariableStorage@1020 : Codeunit 131004;
      LibrarySetupStorage@1016 : Codeunit 131009;
      DocumentTypeRef@1015 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      isInitialized@1002 : Boolean;
      AmountErr@1003 : TextConst '@@@="%1: Field Caption;%2: Expected Value;%3: Table Caption";ENU=%1 must be %2 in %3.';
      FieldErr@1004 : TextConst '@@@=%1: Field Caption;ENU=%1 not updated correctly.';
      SalesLineErr@1007 : TextConst '@@@="%1: Field Caption;%2: Document Type;%3:Document No.;%4:Line No.,%5:Actual Line No.";ENU="%1 must be equal to ''0''  in Sales Line: Document Type=%2, Document No.=%3, Line No.=%4. Current value is ''%5''."';
      NoFilterMsg@1012 : TextConst 'ENU=There should be no record within the filter.';
      QuantityShippedMustNotBeGreaterErr@1017 : TextConst 'ENU=Quantity Shipped in the associated blanket order must not be greater than Quantity in Sales Line Document Type';
      CustCrLimitConfirmQst@1018 : TextConst 'ENU=The customer''s credit limit has been exceeded. Do you still want to continue?';
      CustCrLimitWarningTxt@1019 : TextConst 'ENU=The update has been interrupted to respect the warning.';

    [Test]
    PROCEDURE SalesBlanketOrderCreation@12();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      SalesReceivablesSetup@1004 : Record 311;
    BEGIN
      // [SCENARIO] Test if the system allows to create a New Sales Blanket Order for Customer.

      // Setup.
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      CreateSalesBlanketOrder(SalesHeader,SalesLine,1 + LibraryRandom.RandInt(10),LibrarySales.CreateCustomerNo,CreateItem);  // Passing Random Value to create more than one line.

      // Verify: Verify Blanket Sales Order created.
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
    END;

    [Test]
    PROCEDURE VATAmountOnSalesBlanketOrder@4();
    VAR
      GeneralLedgerSetup@1008 : Record 98;
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      VATAmountLine@1002 : Record 290;
      SalesReceivablesSetup@1004 : Record 311;
      QtyType@1003 : 'General,Invoicing,Shipping';
      BaseAmount@1005 : Decimal;
    BEGIN
      // [SCENARIO] Test if the system calculates applicable VAT in Blanket Sales Order.

      // Setup.
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      CreateSalesBlanketOrder(SalesHeader,SalesLine,1 + LibraryRandom.RandInt(10),LibrarySales.CreateCustomerNo,CreateItem);  // Passing Random Value to create more than 1 Line.

      // Calculate VAT Amount on Sales Blanket Order.
      SalesLine.CalcVATAmountLines(QtyType::Invoicing,SalesHeader,SalesLine,VATAmountLine);

      // Verify: Verify VAT Amount on Sales Blanket Order.
      GeneralLedgerSetup.GET;
      SalesLine.FINDSET;
      REPEAT
        BaseAmount += SalesLine."Line Amount";
      UNTIL SalesLine.NEXT = 0;

      Assert.AreNearlyEqual(
        BaseAmount * SalesLine."VAT %" / 100,VATAmountLine."VAT Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(
          AmountErr,VATAmountLine.FIELDCAPTION("VAT Amount"),BaseAmount * SalesLine."VAT %" / 100,VATAmountLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SalesBlanketOrderReport@3();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      SalesReceivablesSetup@1007 : Record 311;
      BlanketSalesOrder@1002 : Report 210;
      FilePath@1003 : Text[1024];
    BEGIN
      // [SCENARIO] Test if the system generates Blanket Sales Order report.

      // Setup.
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      CreateSalesBlanketOrder(SalesHeader,SalesLine,1 + LibraryRandom.RandInt(10),LibrarySales.CreateCustomerNo,CreateItem);  // Passing Random Value to create more than 1 Line.

      // Exercise: Generate Report as external file for Sales Blanket Order.
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Blanket Order");
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      BlanketSalesOrder.SETTABLEVIEW(SalesHeader);
      FilePath := TEMPORARYPATH + FORMAT(SalesHeader."Document Type") + SalesHeader."No." + '.xlsx';
      BlanketSalesOrder.SAVEASEXCEL(FilePath);

      // Verify: Verify that Saved files have some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    PROCEDURE PartialShipSalesBlanketOrder@5();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      SalesHeader2@1003 : Record 36;
      SalesLine2@1002 : Record 37;
      SalesReceivablesSetup@1007 : Record 311;
    BEGIN
      // [SCENARIO] Test Create Sales Order from Blanket Order with Qty. to Ship less than Quantity.

      // Setup: Set Stock out Warnings to No in Sales and Receivables Setup.
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);

      // Exercise: Create Blanket Sales Order with Minimum Quantity 2 to make partial shipment. Create Sales Order from Sales Blanket Order and Post Sales order.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Blanket Order",'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,1 + LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Qty. to Ship",SalesLine.Quantity - 1);  // Qty to Ship always less than Quantity.
      SalesLine.MODIFY(TRUE);
      CODEUNIT.RUN(CODEUNIT::"Blanket Sales Order to Order",SalesHeader);
      FindOrderLineFromBlanket(SalesLine2,SalesHeader);
      SalesHeader2.GET(SalesLine2."Document Type",SalesLine2."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader2,TRUE,TRUE);

      // Verify: Verify Sales Blanket Order Quantity Shipped field.
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      Assert.AreEqual(
        SalesLine.Quantity - 1,SalesLine."Quantity Shipped",STRSUBSTNO(FieldErr,SalesLine.FIELDCAPTION("Quantity Shipped")));
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE LocationOnSalesBlanketOrder@6();
    VAR
      Location@1002 : Record 14;
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      SalesHeader2@1004 : Record 36;
      SalesLine2@1003 : Record 37;
      SalesReceivablesSetup@1007 : Record 311;
    BEGIN
      // [SCENARIO] Test Post the Sales Order created from Blanket Order and check if lines of Blanket Order are getting updated.

      // Setup.
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      CreateSalesBlanketOrder(SalesHeader,SalesLine,1 + LibraryRandom.RandInt(10),LibrarySales.CreateCustomerNo,CreateItem);  // Pass Random Value to create more than 1 Line.

      // Modify Location Code and Make Sales Order from Sales Blanket Order.
      Location.SETRANGE("Bin Mandatory",FALSE);
      Location.FINDFIRST;
      UpdateSalesHeaderWithLocation(SalesHeader,Location.Code);
      CODEUNIT.RUN(CODEUNIT::"Blanket Sales Order to Order",SalesHeader);

      // Verify: Verify New Sales Order have updated Location Code.
      FindOrderLineFromBlanket(SalesLine2,SalesHeader);
      SalesHeader2.GET(SalesLine2."Document Type",SalesLine2."Document No.");
      Assert.AreEqual(SalesHeader2."Location Code",Location.Code,STRSUBSTNO(FieldErr,SalesHeader2.FIELDCAPTION("Location Code")));
    END;

    [Test]
    PROCEDURE SalesOrderFromBlanketOrder@2();
    VAR
      SalesHeader@1001 : Record 36;
      SalesHeader2@1005 : Record 36;
      SalesLine@1000 : Record 37;
      SalesLine2@1004 : Record 37;
      SalesReceivablesSetup@1007 : Record 311;
      QtyToShip@1002 : Decimal;
    BEGIN
      // [SCENARIO] Test Check if the Location Code can be changed in the Blanket Order after the Blanket Order has been Partially Shipped.

      // Setup: Create Sales Blanket Order with Quantity greater than 1. Change the Quantity to ship and store it in a variable.
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Blanket Order",'');
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,2 * LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Qty. to Ship",SalesLine.Quantity - 1);
      SalesLine.MODIFY(TRUE);
      QtyToShip := SalesLine."Qty. to Ship";

      // Exercise: Create Sales Order from Sales Blanket Order and post it.
      CODEUNIT.RUN(CODEUNIT::"Blanket Sales Order to Order",SalesHeader);
      FindOrderLineFromBlanket(SalesLine2,SalesHeader);
      SalesHeader2.GET(SalesLine2."Document Type",SalesLine2."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader2,TRUE,TRUE);

      // Verify: Verify that the correct Quantity has been updated on Sales Blanket Order Line.
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      Assert.AreEqual(QtyToShip,SalesLine."Quantity Shipped",STRSUBSTNO(FieldErr,SalesLine.FIELDCAPTION("Quantity Shipped")));
    END;

    [Test]
    PROCEDURE SalesOrdrInvDiscFrmBlnketOrdr@11();
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      SalesReceivablesSetup@1007 : Record 311;
      InvDiscountAmount@1003 : Decimal;
    BEGIN
      // [SCENARIO] Check Invoice Discount has been flow correctly on Sales Order after Make Order from Sales Blanket Order.

      // Setup: Create Sales Blanket Order and Calculate Invoice Discount.
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      LibrarySales.CreateSalesHeader(
        SalesHeader,SalesHeader."Document Type"::"Blanket Order",CreateCustomerInvDiscount(LibrarySales.CreateCustomerNo));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",SalesLine);
      SalesLine.GET(SalesHeader."Document Type",SalesHeader."No.",SalesLine."Line No.");
      InvDiscountAmount := SalesLine."Inv. Discount Amount";

      // Exercise: Create Sales Blanket Order.
      CODEUNIT.RUN(CODEUNIT::"Blanket Sales Order to Order",SalesHeader);

      // Verify: Verify Invoice Discount Amount on Created Sales Order.
      GeneralLedgerSetup.GET;
      FindOrderLineFromBlanket(SalesLine,SalesHeader);
      Assert.AreNearlyEqual(
        InvDiscountAmount,SalesLine."Inv. Discount Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,SalesLine.FIELDCAPTION("Inv. Discount Amount"),InvDiscountAmount,SalesLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE SalesOrderFromSalesBlanketOrderWithPostingDateBlank@13();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      SalesReceivablesSetup@1007 : Record 311;
    BEGIN
      // [SCENARIO] Check that blank Posting Date is populating on created Sales Order from Blanket Order while Default Posting Date is set to No Date on the Sales & Receivables Setup.

      // Setup: Update Sales & Receivables Setup and create Sales Blanket Order.
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"No Date",FALSE);
      CreateSalesBlanketOrder(SalesHeader,SalesLine,1 + LibraryRandom.RandInt(10),LibrarySales.CreateCustomerNo,CreateItem);  // Passing Random Value to create more than one Line.
      // To avoid failure in IT, using Posting Date as Document Date when Default Posting Date: "No Date" in Sales & Receivables Setup.
      SalesHeader.VALIDATE("Document Date",SalesHeader."Posting Date");
      SalesHeader.MODIFY(TRUE);

      // Exercise: Create Sales Order from Blanket Order.
      CODEUNIT.RUN(CODEUNIT::"Blanket Sales Order to Order",SalesHeader);

      // Verify: Verify that new Sales Order created form Blanket Order with Posting Date blank.
      VerifyPostingDateOnOrder(SalesLine);
    END;

    [Test]
    PROCEDURE SalesOrderCreationFromBlanketOrder@16();
    VAR
      Customer@1000 : Record 18;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      SalesReceivablesSetup@1005 : Record 311;
    BEGIN
      // [SCENARIO] Check Blanket Order No. and Blanket Order Line No. in Sales Order created from Sales Blanket Order.

      // Setup.
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      LibrarySales.CreateCustomer(Customer);
      CreateSalesBlanketOrder(SalesHeader,SalesLine,1,Customer."No.",CreateItem);  // Passing 1 to create only one Sales Line.

      // Exercise: Create Sales Order From Sales Blanket Order.
      CODEUNIT.RUN(CODEUNIT::"Blanket Sales Order to Order",SalesHeader);

      // Verify: Verify that newly created Sales Line contains correct Blanket Order No. and Blanket Order Line No.
      VerifyBlanketOrderDetailsOnSalesLine(
        SalesLine,SalesLine."Document Type"::Order,Customer."No.",SalesHeader."No.",SalesLine."Line No.");
    END;

    [Test]
    PROCEDURE SalesBlanketOrderUsingCopyDocument@25();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      SalesLine2@1006 : Record 37;
      SalesReceivablesSetup@1002 : Record 311;
    BEGIN
      // [SCENARIO] Check that Sales Blanket Order created using Copy Document does not contain Blanket Order No. and Blanket Order Line No.

      // Setup: Create Sales Blanket Order and create Sales Order from it.
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      CreateSalesOrderFromBlanketSalesOrder(SalesLine);

      // Exercise: Create a new Sales Blanket Order from the Sales Order created using Sales Blanket Order.
      CopySalesDocument(
        SalesHeader,SalesLine."Sell-to Customer No.",SalesLine."Document No.",
        SalesHeader."Document Type"::"Blanket Order",DocumentTypeRef::Order,FALSE);

      // Verify: Verify that Blanket Order created after Copy Sales Document Batch Job doesn't contain Blanket Order No. and Line No.
      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      VerifyBlanketOrderDetailsOnSalesLine(
        SalesLine2,SalesLine."Document Type"::"Blanket Order",SalesLine."Sell-to Customer No.",'',0);
    END;

    [Test]
    PROCEDURE DeletionErrorSalesBlanketOrder@27();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      SalesReceivablesSetup@1005 : Record 311;
    BEGIN
      // [SCENARIO] Check that Sales Blanket Order can not be deleted if Sales Order created from Blanket Order exists.

      // Setup: Create Blanket Sales Order, make Sales Order from it.
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      CreateSalesOrderFromBlanketSalesOrder(SalesLine);
      SalesHeader.GET(SalesHeader."Document Type"::"Blanket Order",SalesLine."Blanket Order No.");

      // Exercise: Try to delete Sales Return Order;
      ASSERTERROR SalesHeader.DELETE(TRUE);

      // Verify: Verify Error Message.
      Assert.ExpectedError(
        STRSUBSTNO(
          SalesLineErr,SalesLine.FIELDCAPTION("Blanket Order Line No."),SalesHeader."Document Type"::Order,
          SalesLine."Document No.",SalesLine."Line No.",SalesLine."Blanket Order Line No."));
    END;

    [Test]
    PROCEDURE DeleteSalesBlanketOrder@81();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      SalesReceivablesSetup@1005 : Record 311;
    BEGIN
      // [SCENARIO] Check that Sales Blanket Order can be deleted successfully after Sales Order creation.

      // Setup.
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);
      CreateSalesOrderFromBlanketSalesOrder(SalesLine);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesLine."Document No.");

      // Exercise: Post Sales Order created after doing Make Order from Blanket Sales Order.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify that Blanket Order created earlier is deleted successfully.
      SalesHeader.GET(SalesHeader."Document Type"::"Blanket Order",SalesLine."Blanket Order No.");
      SalesHeader.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE CreateSalesOrderFromBlanketOrderWithItemCharge@33();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      ItemJournalLine@1002 : Record 83;
    BEGIN
      // [SCENARIO] Verify Sales Order created from Sales Blanket Order with Item Charge.

      // Setup: Create Sales Blanket Order with Item Charge.
      Initialize;
      CreateAndPostItemJournalLine(ItemJournalLine);
      CreateSalesBlanketOrderWithItemCharge(SalesHeader,ItemJournalLine."Item No.");
      FindSalesLine(SalesLine,SalesLine."Document Type"::"Blanket Order",SalesHeader."Sell-to Customer No.");

      // Exercise.
      CODEUNIT.RUN(CODEUNIT::"Blanket Sales Order to Order",SalesHeader);  // Create Sales Order from Blanket Sales Order.

      // Verify: Verify Sales Order created from Sales Blanket Order with Item Charge.
      VerifyBlanketOrderDetailsOnSalesLine(
        SalesLine,SalesLine."Document Type"::Order,SalesHeader."Sell-to Customer No.",SalesHeader."No.",SalesLine."Line No.");
    END;

    [Test]
    PROCEDURE ExtTextOnSalesBlnktOrd@28();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      // [SCENARIO] Verify Exetended Text on Blanket Sales Order.

      // Setup: Create Sales Blanket Order Header.
      Initialize;
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Blanket Order",'');

      // Exercise: Create Item, Sales Blanket Order Line.
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,CreateExtendedTextItem,LibraryRandom.RandInt(10));  // Use Random value for Quantity.

      // Verify: Verify Extended Text on Blanket Sales Order Line.
      Assert.IsFalse(FindExtendedTextLine(SalesLine."Document Type"::"Blanket Order",SalesLine.Description),NoFilterMsg);
    END;

    [Test]
    PROCEDURE SalesOrderUnitPriceFromBlanketOrder@22();
    VAR
      SalesHeaderBlanket@1001 : Record 36;
      SalesLineBlanket@1000 : Record 37;
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      Location@1005 : Record 14;
      ItemUnitOfMeasure@1007 : Record 5404;
      ItemNo@1006 : Code[20];
    BEGIN
      // [SCENARIO 362692] Fields "Location Code", "Unit of Measure", "Unit Price", "Line Discount %", "Line Discount Amount"  are copied from Blanket Order to Purchase Order when Blanket Order and Line set manually
      Initialize;
      ItemNo := CreateItem;
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,ItemNo,1);
      LibraryWarehouse.CreateLocation(Location);

      // [GIVEN] Purchase Blanket Order for item "X"
      CreateSalesBlanketOrder(SalesHeaderBlanket,SalesLineBlanket,1,LibrarySales.CreateCustomerNo,ItemNo); // 1 line is enough for test
      SalesLineBlanket.VALIDATE("Location Code",Location.Code);
      SalesLineBlanket.VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
      SalesLineBlanket.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLineBlanket.VALIDATE("Line Discount %",LibraryRandom.RandDec(100,2));
      SalesLineBlanket.MODIFY(TRUE);

      // [GIVEN] Purchase Order with a line for the item "X"
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,SalesHeaderBlanket."Sell-to Customer No.");
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,SalesLineBlanket."No.",SalesLineBlanket.Quantity);

      // [WHEN] "Blanket Order Line No." is set manually
      UpdateSalesLineWithBlanketOrder(
        SalesLine,SalesHeaderBlanket."No.",SalesLineBlanket."Line No.");

      // [THEN] Fields "Location Code", "Unit of Measure", "Unit Price", "Line Discount %", "Line Discount Amount" are copied from Blanket Order Line
      WITH SalesLine DO BEGIN
        Assert.AreEqual(SalesLineBlanket."Location Code","Location Code",FIELDCAPTION("Location Code"));
        Assert.AreEqual(SalesLineBlanket."Unit of Measure","Unit of Measure",FIELDCAPTION("Unit of Measure"));
        Assert.AreEqual(SalesLineBlanket."Unit Price","Unit Price",FIELDCAPTION("Unit Price"));
        Assert.AreEqual(SalesLineBlanket."Line Discount %","Line Discount %",FIELDCAPTION("Line Discount %"));
        Assert.AreEqual(SalesLineBlanket."Line Discount Amount","Line Discount Amount",FIELDCAPTION("Line Discount Amount"));
      END;
    END;

    [Test]
    PROCEDURE CrMemoFromBlanketOrderByCopyDocument@38();
    VAR
      SalesLineOrder@1001 : Record 37;
      SalesHeader@1002 : Record 36;
      SalesLine@1004 : Record 37;
      SalesReceivablesSetup@1007 : Record 311;
    BEGIN
      // [FEATURE] [Copy Document]
      // [SCENARIO 375760] Blanket Order fields should be empty when create Credit Memo using Copy Document
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);

      // [GIVEN] Sales Order from Blanket Order
      CreateSalesOrderFromBlanketSalesOrder(SalesLineOrder);

      // [WHEN] Copy Document to Credit Memo from Sales Order
      CopySalesDocument(
        SalesHeader,SalesLineOrder."Sell-to Customer No.",SalesLineOrder."Document No.",
        SalesHeader."Document Type"::"Credit Memo",DocumentTypeRef::Order,FALSE);

      // [THEN] "Blanket Order No."/ "Blanket Order Line No." fields are empty in Sales Credit Memo line
      VerifyBlanketOrderDetailsOnSalesLine(
        SalesLine,SalesHeader."Document Type"::"Credit Memo",SalesLineOrder."Sell-to Customer No.",'',0);
    END;

    [Test]
    PROCEDURE ReturnOrderFromBlanketOrderByCopyDocument@39();
    VAR
      SalesLineOrder@1001 : Record 37;
      SalesHeader@1002 : Record 36;
      SalesLine@1004 : Record 37;
      SalesReceivablesSetup@1007 : Record 311;
    BEGIN
      // [FEATURE] [Copy Document]
      // [SCENARIO 375760] Blanket Order fields should be empty when create Return Order using Copy Document
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);

      // [GIVEN] Sales Order from Blanket Order
      CreateSalesOrderFromBlanketSalesOrder(SalesLineOrder);

      // [WHEN] Copy Document to Return Order from Sales Order
      CopySalesDocument(
        SalesHeader,SalesLineOrder."Sell-to Customer No.",SalesLineOrder."Document No.",
        SalesHeader."Document Type"::"Return Order",DocumentTypeRef::Order,FALSE);

      // [THEN] "Blanket Order No."/ "Blanket Order Line No." fields are empty in Sales Return Order line
      VerifyBlanketOrderDetailsOnSalesLine(
        SalesLine,SalesHeader."Document Type"::"Return Order",SalesLineOrder."Sell-to Customer No.",'',0);
    END;

    [Test]
    [HandlerFunctions(GetPostedDocLinesPageHandler)]
    PROCEDURE CrMemoFromBlanketOrderByGetDocLinesToReverse@71();
    VAR
      SalesLineOrder@1001 : Record 37;
      SalesHeader@1002 : Record 36;
      SalesLine@1004 : Record 37;
      SalesReceivablesSetup@1007 : Record 311;
      SalesCreditMemoPage@1005 : TestPage 44;
    BEGIN
      // [FEATURE] [Get Document Lines To Reverse]
      // [SCENARIO 375760] Blanket Order fields should be empty when create Credit Memo using Get Document Lines To Reverse
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);

      // [GIVEN] Posted Sales Order from Blanket Order
      CreateAndPostSalesOrderFromBlanketSalesOrder(SalesLineOrder);

      // [GIVEN] Credit Memo Header
      LibrarySales.CreateSalesHeader(
        SalesHeader,SalesHeader."Document Type"::"Credit Memo",SalesLineOrder."Sell-to Customer No.");

      // [WHEN] Get Document Lines To Reverse to Credit Memo from Sales Order
      SalesCreditMemoPage.OPENEDIT;
      SalesCreditMemoPage.GOTORECORD(SalesHeader);
      SalesCreditMemoPage.GetPostedDocumentLinesToReverse.INVOKE;

      // [THEN] "Blanket Order No."/ "Blanket Order Line No." fields are empty in Sales Credit Memo line
      VerifyBlanketOrderDetailsOnSalesLine(
        SalesLine,SalesHeader."Document Type"::"Credit Memo",SalesLineOrder."Sell-to Customer No.",'',0);
    END;

    [Test]
    [HandlerFunctions(GetPostedDocLinesPageHandler)]
    PROCEDURE ReturnOrderFromBlanketOrderByGetDocLinesToReverse@70();
    VAR
      SalesLineOrder@1001 : Record 37;
      SalesHeader@1002 : Record 36;
      SalesLine@1004 : Record 37;
      SalesReceivablesSetup@1007 : Record 311;
      SalesReturnOrderPage@1005 : TestPage 6630;
    BEGIN
      // [FEATURE] [Get Document Lines To Reverse]
      // [SCENARIO 375760] Blanket Order fields should be empty when create Return Order using Get Document Lines To Reverse
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);

      // [GIVEN] Posted Sales Order from Blanket Order
      CreateAndPostSalesOrderFromBlanketSalesOrder(SalesLineOrder);

      // [GIVEN] Return Order Header
      LibrarySales.CreateSalesHeader(
        SalesHeader,SalesHeader."Document Type"::"Return Order",SalesLineOrder."Sell-to Customer No.");

      // [WHEN] Get Document Lines To Reverse to Return Order from Sales Order
      SalesReturnOrderPage.OPENEDIT;
      SalesReturnOrderPage.GOTORECORD(SalesHeader);
      SalesReturnOrderPage.GetPostedDocumentLinesToReverse.INVOKE;

      // [THEN] "Blanket Order No."/ "Blanket Order Line No." fields are empty in Sales Return Order line
      VerifyBlanketOrderDetailsOnSalesLine(
        SalesLine,SalesHeader."Document Type"::"Return Order",SalesLineOrder."Sell-to Customer No.",'',0);
    END;

    [Test]
    PROCEDURE SecondSalesInvoiceByCopyDocumentRecalculateYes@106();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
      SalesLineOrder@1002 : Record 37;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      InvoiceNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document]
      // [SCENARIO 375760] Blanket Order fields should be empty when create Sales Invoice using Copy Document with Recalculate Lines = Yes
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);

      // [GIVEN] Posted Sales Order from Blanket Order
      InvoiceNo := CreateAndPostSalesOrderFromBlanketSalesOrder(SalesLineOrder);

      // [WHEN] Copy Document to Sales Invoice from Sales Order with Recalculate Lines = Yes
      CopySalesDocument(
        SalesHeader,SalesLineOrder."Sell-to Customer No.",InvoiceNo,
        SalesHeader."Document Type"::Invoice,DocumentTypeRef::"Posted Invoice",TRUE);

      // [THEN] "Blanket Order No."/ "Blanket Order Line No." fields are empty in Sales Invoice line
      VerifyBlanketOrderDetailsOnSalesLine(
        SalesLine,SalesHeader."Document Type"::Invoice,SalesLineOrder."Sell-to Customer No.",'',0);
    END;

    [Test]
    PROCEDURE PostSecondSalesInvoiceByCopyDocumentRecalculateNo@108();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
      SalesLineOrder@1001 : Record 37;
      SalesHeader@1004 : Record 36;
      SalesLine@1005 : Record 37;
      InvoiceNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document]
      // [SCENARIO 375760] Blanket Order fields should be filled in and Sales Invoice should not be posted when it is copied with Recalculate Lines = No
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);

      // [GIVEN] Posted Sales Order from Blanket Order
      InvoiceNo := CreateAndPostSalesOrderFromBlanketSalesOrder(SalesLineOrder);

      // [GIVEN] Copy Document to Sales Invoice from Sales Order with Recalculate Lines = No
      CopySalesDocument(
        SalesHeader,SalesLineOrder."Sell-to Customer No.",InvoiceNo,
        SalesHeader."Document Type"::Invoice,DocumentTypeRef::"Posted Invoice",FALSE);
      FindSalesLine(SalesLine,SalesHeader."Document Type"::Invoice,SalesHeader."Sell-to Customer No.");

      // [WHEN] Post second Sales Invoice
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] "Blanket Order No."/ "Blanket Order Line No." fields in Sales Invoice line are equal to the fields in Sales Order
      SalesLine.TESTFIELD("Blanket Order No.",SalesLineOrder."Blanket Order No.");
      SalesLine.TESTFIELD("Blanket Order Line No.",SalesLineOrder."Blanket Order Line No.");
      // [THEN] Error raised "Quantity Shipped in the associated blanket order must not be greater than Quantity in Sales Line Document Type"
      Assert.ExpectedError(QuantityShippedMustNotBeGreaterErr);
    END;

    [Test]
    PROCEDURE SalesInvoiceAfterCrMemoFromBlanketOrder@29();
    VAR
      SalesLineOrder@1001 : Record 37;
      SalesHeader@1002 : Record 36;
      SalesLine@1004 : Record 37;
      SalesReceivablesSetup@1007 : Record 311;
      InvoiceNo@1003 : Code[20];
      CrMemoNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document]
      // [SCENARIO 375760] Posting new Invoice after correction of first Sales Invoice from Blanket Order by Credit Memo
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);

      // [GIVEN] Posted Sales Order from Blanket Order with Quantity = "X"
      InvoiceNo := CreateAndPostSalesOrderFromBlanketSalesOrder(SalesLineOrder);

      // [GIVEN] Copy and Post Sales Credit Memo from Posted Invoice with Recalculate Lines = No
      CopySalesDocument(
        SalesHeader,SalesLineOrder."Sell-to Customer No.",InvoiceNo,
        SalesHeader."Document Type"::"Credit Memo",DocumentTypeRef::"Posted Invoice",FALSE);
      CrMemoNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [GIVEN] Copy Sales Invoice from Credit Memo with Recalculate Lines = No
      CopySalesDocument(
        SalesHeader,SalesLineOrder."Sell-to Customer No.",CrMemoNo,
        SalesHeader."Document Type"::Invoice,DocumentTypeRef::"Posted Credit Memo",FALSE);

      // [WHEN] Post new copied Sales Invoice
      InvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] "Blanket Order No."/ "Blanket Order Line No." fields are empty in Posted Sales Invoice line
      VerifyBlanketOrderFieldsOnSalesInvoiceLine(InvoiceNo,'',0);
      // [THEN] Quantity Shipped in Blanket Order is equal to "X"
      FindSalesLine(SalesLine,SalesHeader."Document Type"::"Blanket Order",SalesHeader."Sell-to Customer No.");
      SalesLine.TESTFIELD("Quantity Shipped",SalesLineOrder.Quantity);
    END;

    [Test]
    PROCEDURE SalesInvoiceAfterCrMemoWithManuallySetBlanketFieldsFromBlanketOrder@34();
    VAR
      SalesLineOrder@1006 : Record 37;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
      SalesLineBoAfterCrM@1009 : Record 37;
      SalesReceivablesSetup@1002 : Record 311;
      InvoiceNo@1001 : Code[20];
      CrMemoNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document]
      // [SCENARIO 375760] Posting new Invoice after correction of Sales Invoice from Blanket Order by Credit Memo with manually updated Blanket fields
      Initialize;
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);

      // [GIVEN] Posted Sales Order from Blanket Order with Quantity = "X"
      InvoiceNo := CreateAndPostSalesOrderFromBlanketSalesOrder(SalesLineOrder);

      // [GIVEN] Copy and Post Sales Credit Memo from Posted Invoice with Recalculate Lines = No, set "Blanket Order No./Line No."
      CopySalesDocument(
        SalesHeader,SalesLineOrder."Sell-to Customer No.",InvoiceNo,
        SalesHeader."Document Type"::"Credit Memo",DocumentTypeRef::"Posted Invoice",FALSE);
      FindSalesLine(SalesLine,SalesHeader."Document Type"::"Credit Memo",SalesHeader."Sell-to Customer No.");
      SalesLine.VALIDATE("Blanket Order No.",SalesLineOrder."Blanket Order No.");
      SalesLine.VALIDATE("Blanket Order Line No.",SalesLineOrder."Blanket Order Line No.");
      SalesLine.MODIFY(TRUE);
      CrMemoNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      FindSalesLine(SalesLineBoAfterCrM,SalesHeader."Document Type"::"Blanket Order",SalesHeader."Sell-to Customer No.");

      // [GIVEN] Copy Sales Invoice from Credit Memo with Recalculate Lines = No
      CopySalesDocument(
        SalesHeader,SalesLineOrder."Sell-to Customer No.",CrMemoNo,
        SalesHeader."Document Type"::Invoice,DocumentTypeRef::"Posted Credit Memo",FALSE);

      // [WHEN] Post copied Sales Invoice
      InvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] "Blanket Order No."/ "Blanket Order Line No." fields are filled in Posted Sales Invoice line
      VerifyBlanketOrderFieldsOnSalesInvoiceLine(InvoiceNo,SalesLineBoAfterCrM."Document No.",SalesLineBoAfterCrM."Line No.");
      // [THEN] Quantity Shipped in Blanket Order is 0 after posting of Credit Memo
      SalesLineBoAfterCrM.TESTFIELD("Quantity Shipped",0);
      // [THEN] Quantity Shipped in Blanket Order is equal to "X"
      FindSalesLine(SalesLine,SalesHeader."Document Type"::"Blanket Order",SalesHeader."Sell-to Customer No.");
      SalesLine.TESTFIELD("Quantity Shipped",SalesLineOrder.Quantity);
    END;

    [Test]
    [HandlerFunctions(CreditLimitConfirmHandler)]
    PROCEDURE SalesOrderFromBlanketOrder_CreditLimit_ConfirmNo@1();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      Customer@1002 : Record 18;
    BEGIN
      // [FEATURE] [Credit Limit] [UI]
      // [SCENARIO 379173] No Order is created after Reply="No" on credit limit confirm question when "Make Order" on Blanket Sales Order
      Initialize;
      UpdateSalesSetupCreditWarnings;

      // [GIVEN] Customer with "Credit Limit" = "A", Balance = 0
      CreateCustomerWithCreditLimit(Customer);
      // [GIVEN] Sales Blanket Order with Total Amount = "A" + 0.01
      CreateSalesBlanketOrderWithGL(SalesHeader,Customer."No.",Customer."Credit Limit (LCY)" + LibraryERM.GetAmountRoundingPrecision);
      // [GIVEN] Perform "Make Order" action on Blanket Order
      LibraryVariableStorage.Enqueue(FALSE);
      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Blanket Sales Order to Order",SalesHeader);
      // [GIVEN] Customer Credit Limit Confirm is shown: "The customer's credit limit has been exceeded. Do you still want to continue?"

      // [WHEN] Reply "No"
      // CreditLimitConfirmHandler
      Assert.ExpectedErrorCode('Dialog');

      // [THEN] No Order is created
      FilterOrderLineFromBlanket(SalesLine,SalesHeader);
      Assert.RecordIsEmpty(SalesLine);
    END;

    [Test]
    [HandlerFunctions(CreditLimitConfirmHandler)]
    PROCEDURE SalesOrderFromBlanketOrder_CreditLimit_ConfirmYes@86();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      Customer@1002 : Record 18;
    BEGIN
      // [FEATURE] [Credit Limit] [UI]
      // [SCENARIO 379173] Order is created after Reply="Yes" on credit limit confirm question when "Make Order" on Blanket Sales Order
      Initialize;
      UpdateSalesSetupCreditWarnings;

      // [GIVEN] Customer with "Credit Limit" = "A", Balance = 0
      CreateCustomerWithCreditLimit(Customer);
      // [GIVEN] Sales Blanket Order with Total Amount = "A" + 0.01
      CreateSalesBlanketOrderWithGL(SalesHeader,Customer."No.",Customer."Credit Limit (LCY)" + LibraryERM.GetAmountRoundingPrecision);
      // [GIVEN] Perform "Make Order" action on Blanket Order
      LibraryVariableStorage.Enqueue(TRUE);
      CODEUNIT.RUN(CODEUNIT::"Blanket Sales Order to Order",SalesHeader);
      // [GIVEN] Customer Credit Limit Confirm is shown: "The customer's credit limit has been exceeded. Do you still want to continue?"

      // [WHEN] Reply "Yes"
      // CreditLimitConfirmHandler

      // [THEN] Sales Order is created from Blanket
      FilterOrderLineFromBlanket(SalesLine,SalesHeader);
      Assert.RecordIsNotEmpty(SalesLine);
    END;

    [Test]
    [HandlerFunctions(CreditLimitWarningReplyNoMPH)]
    PROCEDURE SalesOrderFromBlanketOrder_CreditLimitWithOverdue_ConfirmNo@91();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      Customer@1002 : Record 18;
    BEGIN
      // [FEATURE] [Credit Limit] [UI]
      // [SCENARIO 379173] No Order is created after Reply="No" on credit limit warning when "Make Order" on Blanket Sales Order with overdue customer balance
      Initialize;
      UpdateSalesSetupCreditWarnings;

      // [GIVEN] Customer with "Credit Limit" and overdue balance
      CreateCustomerWithCreditLimit(Customer);
      CreatePostSalesInvoice(Customer."No.",Customer."Credit Limit (LCY)" + LibraryERM.GetAmountRoundingPrecision);
      // [GIVEN] Sales Blanket Order
      CreateSalesBlanketOrderWithGL(SalesHeader,Customer."No.",LibraryRandom.RandDecInRange(1000,2000,2));
      // [GIVEN] Perform "Make Order" action on Blanket Order
      LibraryVariableStorage.Enqueue(FALSE);
      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Blanket Sales Order to Order",SalesHeader);
      // [GIVEN] Customer Credit Limit warning page is shown: "This customer has an overdue balance. Do you still want to record the amount?"

      // [WHEN] Reply "No"
      // CreditLimitWarningReplyNoMPH
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(CustCrLimitWarningTxt);

      // [THEN] No Order is created
      FilterOrderLineFromBlanket(SalesLine,SalesHeader);
      Assert.RecordIsEmpty(SalesLine);
    END;

    [Test]
    [HandlerFunctions(CreditLimitWarningReplyYesMPH)]
    PROCEDURE SalesOrderFromBlanketOrder_CreditLimitWithOverdue_ConfirmYes@116();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      Customer@1002 : Record 18;
    BEGIN
      // [FEATURE] [Credit Limit] [UI]
      // [SCENARIO 379173] Order is created after Reply="Yes" on credit limit warning when "Make Order" on Blanket Sales Order with overdue customer balance
      Initialize;
      UpdateSalesSetupCreditWarnings;

      // [GIVEN] Customer with "Credit Limit" and overdue balance
      CreateCustomerWithCreditLimit(Customer);
      CreatePostSalesInvoice(Customer."No.",Customer."Credit Limit (LCY)" + LibraryERM.GetAmountRoundingPrecision);
      // [GIVEN] Sales Blanket Order
      CreateSalesBlanketOrderWithGL(SalesHeader,Customer."No.",LibraryRandom.RandDecInRange(1000,2000,2));
      // [GIVEN] Perform "Make Order" action on Blanket Order
      LibraryVariableStorage.Enqueue(FALSE);
      CODEUNIT.RUN(CODEUNIT::"Blanket Sales Order to Order",SalesHeader);
      // [GIVEN] Customer Credit Limit warning page is shown: "This customer has an overdue balance. Do you still want to record the amount?"

      // [WHEN] Reply "Yes"
      // CreditLimitWarningReplyYesMPH

      // [THEN] Sales Order is created from Blanket
      FilterOrderLineFromBlanket(SalesLine,SalesHeader);
      Assert.RecordIsNotEmpty(SalesLine);
    END;

    [Test]
    PROCEDURE AmountCanBeUpdatedOnInvoicedBlanketSalesOrderItemChargeLine@44();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      NewUnitPrice@1002 : Decimal;
    BEGIN
      // [FEATURE] [Item Charge]
      // [SCENARIO 202722] Unit Price could be updated on Blanket Sales Order line with item charge after the line is invoiced.
      Initialize;

      // [GIVEN] Blanket Sales Order line with Item Charge partially invoiced.
      MockBlanketSalesHeader(SalesHeader);
      MockSalesLine(SalesLine,SalesHeader,SalesLine.Type::"Charge (Item)");

      // [WHEN] Update Unit Price on the line.
      NewUnitPrice := LibraryRandom.RandDecInRange(11,20,2);
      SalesLine.VALIDATE("Unit Price",NewUnitPrice);

      // [THEN] The price is updated.
      SalesLine.TESTFIELD("Unit Price",NewUnitPrice);
    END;

    [Test]
    PROCEDURE OrderDocumentDateEqualsToWorkDateWhenDefPostingDateNoDate@23();
    VAR
      SalesReceivablesSetup@1003 : Record 311;
    BEGIN
      // [SCENARIO 218835] Create Sales Order from Blanket Order when "Default Posting Date" = "No Date" in Sales & Receivable setup
      Initialize;

      // [GIVEN] TAB311."Default Posting Date" = "No Date"
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"No Date",FALSE);

      // [GIVEN] Sales Blanket Order with "Document Date" = 01.01.2017
      // [WHEN] Create Sales Order from the Blanket Sales Order on 02.01.2017
      // [THEN] "Document Date" of the Sales Order equals to 02.01.2017
      VerifyDocumentDates;
    END;

    [Test]
    PROCEDURE OrderDocumentDateEqualsToWorkDateWhenDefPostingDateWorkDate@40();
    VAR
      SalesReceivablesSetup@1003 : Record 311;
    BEGIN
      // [SCENARIO 218835] Create Sales Order from Blanket Order when "Default Posting Date" = "Work Date" in Sales & Receivable setup
      Initialize;

      // [GIVEN] TAB311."Default Posting Date" = "Work Date"
      UpdateSalesReceivablesSetup(SalesReceivablesSetup."Default Posting Date"::"Work Date",FALSE);

      // [GIVEN] Sales Blanket Order with "Document Date" = 01.01.2017
      // [WHEN] Create Sales Order from the Blanket Sales Order on 02.01.2017
      // [THEN] "Document Date" of the Sales Order equals to 02.01.2017
      VerifyDocumentDates;
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      isInitialized := TRUE;
    END;

    LOCAL PROCEDURE CopySalesDocument@26(VAR SalesHeader@1000 : Record 36;CustomerNo@1003 : Code[20];DocumentNo@1004 : Code[20];DocumentType@1002 : Option;FromDocType@1001 : Option;Recalculate@1006 : Boolean);
    BEGIN
      CLEAR(SalesHeader);
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      LibrarySales.CopySalesDocument(SalesHeader,FromDocType,DocumentNo,TRUE,Recalculate);  // Set TRUE for Include Header
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@90(VAR ItemJournalLine@1001 : Record 83);
    VAR
      Location@1003 : Record 14;
      ItemJournalBatch@1002 : Record 233;
    BEGIN
      SelectAndClearItemJournalBatch(ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",CreateItem,LibraryRandom.RandDec(200,2));  // Used Random Value for Qty.
      Location.SETRANGE("Bin Mandatory",FALSE);
      Location.FINDFIRST;
      ItemJournalLine.VALIDATE("Location Code",Location.Code);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateSalesBlanketOrder@10(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;NoOfLines@1003 : Integer;CustomerNo@1004 : Code[20];ItemNo@1005 : Code[20]);
    VAR
      Counter@1002 : Integer;
    BEGIN
      // Create Random Quantity.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Blanket Order",CustomerNo);
      FOR Counter := 1 TO NoOfLines DO
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));
    END;

    LOCAL PROCEDURE CreateSalesBlanketOrderWithItemCharge@20(VAR SalesHeader@1002 : Record 36;ItemNo@1003 : Code[20]);
    VAR
      Location@1005 : Record 14;
      SalesLine@1000 : Record 37;
    BEGIN
      // Create Multiple Sales Header, Find Location and update on Header.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Blanket Order",'');
      Location.SETRANGE("Bin Mandatory",FALSE);
      Location.FINDFIRST;
      UpdateSalesHeaderWithLocation(SalesHeader,Location.Code);

      // Create Sales Line with Item and update Unit Price.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2));  // Used Random Value for Quantity.
      UpdateSalesLine(SalesLine,LibraryRandom.RandDecInRange(1000,2000,2));

      // Create Charge Item and create Sales Line with Item (Charge) and update Unit Price.
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"Charge (Item)",
        LibraryInventory.CreateItemChargeNo,SalesLine.Quantity);
      UpdateSalesLine(SalesLine,LibraryRandom.RandDecInRange(1000,2000,2));
    END;

    LOCAL PROCEDURE CreateSalesBlanketOrderWithGL@36(VAR SalesHeader@1000 : Record 36;CustomerNo@1004 : Code[20];UnitPrice@1001 : Decimal);
    BEGIN
      CreateSalesDocWithGL(SalesHeader,SalesHeader."Document Type"::"Blanket Order",CustomerNo,UnitPrice);
    END;

    LOCAL PROCEDURE CreateSalesDocWithGL@77(VAR SalesHeader@1000 : Record 36;DocumentType@1003 : Option;CustomerNo@1004 : Code[20];UnitPrice@1001 : Decimal);
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,1);
      UpdateSalesLine(SalesLine,UnitPrice);
    END;

    LOCAL PROCEDURE CreatePostSalesInvoice@92(CustomerNo@1000 : Code[20];UnitPrice@1001 : Decimal);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      CreateSalesDocWithGL(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo,UnitPrice);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderFromBlanketSalesOrder@19(VAR SalesLine@1000 : Record 37);
    VAR
      Customer@1001 : Record 18;
      SalesHeader@1002 : Record 36;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      CreateSalesBlanketOrder(SalesHeader,SalesLine,1,Customer."No.",CreateItem);  // Passing 1 to create only one Sales Line.
      CODEUNIT.RUN(CODEUNIT::"Blanket Sales Order to Order",SalesHeader);
      SalesLine.SETRANGE("Blanket Order No.",SalesHeader."No.");
      FindSalesLine(SalesLine,SalesHeader."Document Type"::Order,Customer."No.");
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderFromBlanketSalesOrder@61(VAR SalesLine@1001 : Record 37) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      CreateSalesOrderFromBlanketSalesOrder(SalesLine);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesLine."Document No.");
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateCustomerInvDiscount@14(CustomerNo@1001 : Code[20]) : Code[20];
    VAR
      CustInvoiceDisc@1000 : Record 19;
    BEGIN
      LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc,CustomerNo,'',0);  // Set Zero for Charge Amount.
      CustInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandDec(10,2));  // Take Random Discount.
      CustInvoiceDisc.MODIFY(TRUE);
      EXIT(CustomerNo);
    END;

    LOCAL PROCEDURE CreateItem@9() : Code[20];
    BEGIN
      EXIT(CreateItemWithUnitPrice(LibraryRandom.RandInt(100)));
    END;

    LOCAL PROCEDURE CreateItemWithUnitPrice@32(UnitPrice@1005 : Decimal) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",UnitPrice);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateExtendedTextItem@59() : Code[20];
    VAR
      Item@1002 : Record 27;
      ExtendedTextHeader@1001 : Record 279;
      ExtendedTextLine@1000 : Record 280;
    BEGIN
      // Create Item.
      Item.GET(CreateItem);
      Item.VALIDATE("Automatic Ext. Texts",TRUE);
      Item.MODIFY(TRUE);

      // Create Extended Text Header and Line.
      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,Item."No.");
      ExtendedTextHeader.VALIDATE("Sales Blanket Order",FALSE);
      ExtendedTextHeader.MODIFY(TRUE);
      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      ExtendedTextLine.VALIDATE(Text,Item."No.");
      ExtendedTextLine.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithCreditLimit@75(VAR Customer@1001 : Record 18);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      WITH Customer DO BEGIN
        VALIDATE("Credit Limit (LCY)",LibraryRandom.RandDecInRange(1000,2000,2));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE MockBlanketSalesHeader@42(VAR SalesHeader@1000 : Record 36);
    BEGIN
      WITH SalesHeader DO BEGIN
        INIT;
        "Document Type" := "Document Type"::"Blanket Order";
        "No." := LibraryUtility.GenerateRandomCode(FIELDNO("No."),DATABASE::"Sales Header");
        "Sell-to Customer No." := LibraryUtility.GenerateGUID;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockSalesLine@41(VAR SalesLine@1001 : Record 37;SalesHeader@1000 : Record 36;LineType@1002 : Option);
    BEGIN
      WITH SalesLine DO BEGIN
        INIT;
        "Document Type" := SalesHeader."Document Type";
        "Document No." := SalesHeader."No.";
        "Line No." := LibraryUtility.GetNewRecNo(SalesLine,FIELDNO("Line No."));
        Type := LineType;
        "No." := LibraryUtility.GenerateGUID;
        Quantity := LibraryRandom.RandIntInRange(11,20);
        "Quantity Invoiced" := LibraryRandom.RandInt(10);
        "Unit Price" := LibraryRandom.RandDec(10,2);
        "Line Amount" := Quantity * "Unit Price";
        INSERT;
      END;
    END;

    LOCAL PROCEDURE FilterOrderLineFromBlanket@68(VAR SalesLine@1000 : Record 37;BlanketSalesHeader@1001 : Record 36);
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Sell-to Customer No.",BlanketSalesHeader."Sell-to Customer No.");
        SETRANGE("Blanket Order No.",BlanketSalesHeader."No.");
        SETRANGE("Document Type","Document Type"::Order);
      END;
    END;

    LOCAL PROCEDURE FindSalesLine@18(VAR SalesLine@1000 : Record 37;DocumentType@1001 : Option;SellToCustomerNo@1002 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Sell-to Customer No.",SellToCustomerNo);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindOrderLineFromBlanket@58(VAR SalesLine@1000 : Record 37;BlanketSalesHeader@1002 : Record 36);
    BEGIN
      FilterOrderLineFromBlanket(SalesLine,BlanketSalesHeader);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindExtendedTextLine@30(DocumentType@1001 : Option;Description@1002 : Text[50]) : Boolean;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE(Type,SalesLine.Type::" ");  // Blank value for Type.
      SalesLine.SETRANGE(Description,Description);
      EXIT(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE SelectAndClearItemJournalBatch@21(VAR ItemJournalBatch@1001 : Record 233);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalBatch."Template Type"::Item,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE UpdateSalesHeaderWithLocation@24(VAR SalesHeader@1000 : Record 36;LocationCode@1002 : Code[10]);
    BEGIN
      SalesHeader.VALIDATE("Location Code",LocationCode);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesLine@31(VAR SalesLine@1000 : Record 37;UnitPrice@1001 : Decimal);
    BEGIN
      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesLineWithBlanketOrder@35(VAR SalesLine@1000 : Record 37;BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1002 : Integer);
    BEGIN
      SalesLine.VALIDATE("Blanket Order No.",BlanketOrderNo);
      SalesLine.VALIDATE("Blanket Order Line No.",BlanketOrderLineNo);
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@15(DefaultPostingDate@1002 : Option;StockoutWarning@1000 : Boolean);
    VAR
      SalesReceivablesSetup@1003 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Stockout Warning",StockoutWarning);
      SalesReceivablesSetup.VALIDATE("Credit Warnings",SalesReceivablesSetup."Credit Warnings"::"No Warning");
      SalesReceivablesSetup.VALIDATE("Default Posting Date",DefaultPostingDate);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesSetupCreditWarnings@37();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      LibrarySales.SetCreditWarnings(SalesReceivablesSetup."Credit Warnings"::"Both Warnings");
    END;

    LOCAL PROCEDURE VerifyPostingDateOnOrder@17(SalesLine@1000 : Record 37);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      SalesLine.SETRANGE("Blanket Order No.",SalesLine."Document No.");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.FINDFIRST;
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      SalesHeader.TESTFIELD("Posting Date",0D);
    END;

    LOCAL PROCEDURE VerifyBlanketOrderDetailsOnSalesLine@119(VAR SalesLine@1000 : Record 37;DocumentType@1002 : Option;CustomerNo@1003 : Code[20];BlanketOrderNo@1004 : Code[20];BlanketOrderLineNo@1005 : Integer);
    BEGIN
      FindSalesLine(SalesLine,DocumentType,CustomerNo);
      SalesLine.TESTFIELD("Blanket Order No.",BlanketOrderNo);
      SalesLine.TESTFIELD("Blanket Order Line No.",BlanketOrderLineNo);
    END;

    LOCAL PROCEDURE VerifyBlanketOrderFieldsOnSalesInvoiceLine@50(InvoiceNo@1001 : Code[20];BlanketOrderNo@1002 : Code[20];BlanketOrderLineNo@1003 : Integer);
    VAR
      SalesInvoiceLine@1000 : Record 113;
    BEGIN
      WITH SalesInvoiceLine DO BEGIN
        SETRANGE("Document No.",InvoiceNo);
        SETRANGE(Type,Type::Item);
        FINDFIRST;
        TESTFIELD("Blanket Order No.",BlanketOrderNo);
        TESTFIELD("Blanket Order Line No.",BlanketOrderLineNo);
      END;
    END;

    LOCAL PROCEDURE VerifyDocumentDates@43();
    VAR
      BlanketSalesHeader@1003 : Record 36;
      BlanketSalesLine@1002 : Record 37;
      SalesHeader@1001 : Record 36;
      PaymentTerms@1004 : Record 3;
      Customer@1005 : Record 18;
      SalesHeaderNo@1000 : Code[20];
    BEGIN
      Customer.GET(LibrarySales.CreateCustomerNo);
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,FALSE);
      Customer.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Customer.MODIFY(TRUE);

      CreateSalesBlanketOrder(BlanketSalesHeader,BlanketSalesLine,1,Customer."No.",LibraryInventory.CreateItemNo);
      BlanketSalesHeader.VALIDATE("Document Date",BlanketSalesHeader."Document Date" - 1);
      BlanketSalesHeader.MODIFY;

      SalesHeaderNo := LibrarySales.BlanketSalesOrderMakeOrder(BlanketSalesHeader);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesHeaderNo);

      WITH SalesHeader DO BEGIN
        PaymentTerms.GET("Prepmt. Payment Terms Code");
        TESTFIELD("Document Date",WORKDATE);
        TESTFIELD("Prepayment Due Date",CALCDATE(PaymentTerms."Due Date Calculation","Document Date"));
        TESTFIELD("Prepmt. Pmt. Discount Date",CALCDATE(PaymentTerms."Discount Date Calculation","Document Date"));
        TESTFIELD("Due Date",CALCDATE(PaymentTerms."Due Date Calculation","Document Date"));
        TESTFIELD("Pmt. Discount Date",CALCDATE(PaymentTerms."Discount Date Calculation","Document Date"));
      END;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@7(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    [ModalPageHandler]
    PROCEDURE GetPostedDocLinesPageHandler@84(VAR PostedSalesDocumentLines@1000 : TestPage 5850);
    BEGIN
      PostedSalesDocumentLines.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE CreditLimitConfirmHandler@45(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.ExpectedMessage(CustCrLimitConfirmQst,Question);
      Reply := LibraryVariableStorage.DequeueBoolean;
    END;

    [ModalPageHandler]
    PROCEDURE CreditLimitWarningReplyNoMPH@99(VAR CheckCreditLimit@1000 : TestPage 343);
    BEGIN
      CheckCreditLimit.No.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CreditLimitWarningReplyYesMPH@110(VAR CheckCreditLimit@1000 : TestPage 343);
    BEGIN
      CheckCreditLimit.Yes.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Blanket Order] [Sales]
      Check the functionalities of Blanket Sales Order.
      1. Test if the system allows to create a New Sales Blanket Order for Customer.
      2. Test if the system calculates applicable VAT in Blanket Sales Order.
      3. Test if the system generates Blanket Sales Order report.
      4. Test Create Sales Order from Blanket Order with Qty. to Ship less than Quantity.
      5. Test Post the Sales Order created from Blanket Order and check if lines of Blanket Order are getting updated.
      6. Test Check if the Location Code can be changed in the Blanket Order after the Blanket Order has been Partially Shipped.
      7. Test Create the Sales Order from Blanket Order and check if change in Location in Blanket Order has also updated
         in Sales Order while creating.
      8. Check Invoice Discount has been flow correctly on Sales Order after Make Order from Sales Blanket Order.
      9. Check that blank Posting Date is populating on created Sales Order from Blanket Order while Default Posting Date is set to No Date on the Sales & Receivables Setup.
      10. Test Blanket Order No. and Blanket Order Line No. in Sales Order created from Sales Blanket Order.
      11. Test that Sales Blanket Order created using Copy Document does not contain Blanket Order No. and Blanket Order Line No.
      12. Test that Sales Blanket Order can not be deleted if Sales Order created from Blanket Order exists.
      13. Test that Sales Blanket Order can be deleted successfully after Sales Order Posting.
      14. Verify Sales Order created from Sales Blanket Order with Item Charge.
      15. Verify Error on Update Quantity  after partially invoiced of Blanket Sales Order Line where Type is 'Charge (Item)'.
      16. Verify Exetended Text on Blanket Sales Order.
      17. Verify Exetended Text on Sales Order created by Blanket Sales Order.

      This test code unit replaces Manual Test Suite (TS0126).

      TS_TFS ID=21534
      Covers Test Cases:
        TFS_TC_ID= 4949 and 30733: TC00563
        TFS_TC_ID= 4950 and 30734: TC00564
        TFS_TC_ID= 4951 and 30735: TC00565
        TFS_TC_ID= 4952 and 30736: TC00566
        TFS_TC_ID= 4953 and 30737: TC00567
        TFS_TC_ID= 4954 and 30738: TC00568
        TFS_TC_ID= 4955 and 30739: TC00569

        Covers Test Cases for WI - 219040
        ------------------------------------------------------------------------------
        Test Function Name                                       TFS ID
        ------------------------------------------------------------------------------
        SalesOrdrInvDiscFrmBlnketOrdr                            127391

        Covers Test Cases for WI - 264826
        ------------------------------------------------------------------------------
        Test Function Name                                       TFS ID
        ------------------------------------------------------------------------------
        SalesOrderFromSalesBlanketOrderWithPostingDateBlank      263320

        Covers Test Cases for WI - 273878
        -----------------------------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                                   TFS ID
        -----------------------------------------------------------------------------------------------------------------------------------------------
        SalesOrderCreationFromBlanketOrder, SalesBlanketOrderUsingCopyDocument, DeletionErrorSalesBlanketOrder, DeleteSalesBlanketOrder      271655

        Covers Test Cases for WI - 313049
        ----------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                            TFS ID
        ----------------------------------------------------------------------------------------------------------------------
        CreateSalesOrderFromBlanketOrderWithItemCharge, ErrorOnUpdateQuantityOfBlanketSalesOrderLine                  290156

      Covers Test Cases for WI - 320046
      ----------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------------------------
      ExtTextOnSalesBlnktOrd                                                                                        297688
    }
    END.
  }
}

