OBJECT Codeunit 134905 ERM Issued Reminder Addnl Fee
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1006 : Codeunit 130000;
      LibraryERM@1004 : Codeunit 131300;
      LibrarySales@1000 : Codeunit 130509;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryInventory@1012 : Codeunit 132201;
      LibraryRandom@1002 : Codeunit 130440;
      IsInitialized@1003 : Boolean;
      AmountError@1005 : TextConst 'ENU=Additional Fee Amount must be %1 for Issued Reminder No: %2.';
      ReminderEndingText@1007 : TextConst 'ENU=Balance %7';
      ErrorMustMatch@1001 : TextConst 'ENU=Error Must Match.';
      ReminderLineDescription@1009 : TextConst 'ENU=Balance %1';
      ReminderLevelNo@1008 : Integer;
      NoOfRemindersErr@1011 : TextConst 'ENU=The value of No. Of Reminders is not correct.';

    [Test]
    PROCEDURE ReminderWithLCY@13();
    VAR
      CurrencyCode@1003 : Code[10];
    BEGIN
      // Check the Additional Fee Amount on Issued Reminder for a Customer with LCY.
      Initialize;
      CurrencyCode := CreateCurrency;
      CreateReminderWithCurrency(CurrencyCode,CurrencyCode);
    END;

    [Test]
    PROCEDURE ReminderWithFCY@14();
    BEGIN
      // Check the Additional Fee Amount on Issued Reminder for a Customer with FCY.
      Initialize;
      CreateReminderWithCurrency(CreateCurrency,FindCurrency);
    END;

    LOCAL PROCEDURE CreateReminderWithCurrency@5(CurrencyCode@1008 : Code[10];CurrencyCode2@1009 : Code[10]);
    VAR
      Customer@1004 : Record 18;
      ReminderNo@1005 : Code[20];
      Amount@1001 : Decimal;
      DocumentDate@1002 : Date;
      AdditionalFee@1000 : Decimal;
    BEGIN
      // Setup: Create a Customer with Currency and Reminder Terms attached to it. Create and Post Sales Invoice for the Customer with
      // Currency selected. Create Reminder for the Customer through batch job on a Date after Grace Period.
      AdditionalFee := SetupAndPostSalesInvoice(Customer,DocumentDate,CurrencyCode,CurrencyCode2);
      Amount := ROUND(LibraryERM.ConvertCurrency(AdditionalFee,'',CurrencyCode2,WORKDATE));
      CreateReminder(Customer."No.",DocumentDate,FALSE); // "Use Header Level" = FALSE

      // Exercise: Issue the Reminder.
      ReminderNo := IssueReminder(DocumentDate);

      // Verify: Verify the Additional Fee Amount on Issued Reminder Lines.
      VerifyReminderLine(ReminderNo,Amount);
    END;

    [Test]
    PROCEDURE CreateSalesInvoiceAndReminder@10();
    VAR
      Customer@1007 : Record 18;
      ReminderLine@1001 : Record 296;
      ReminderLevel@1004 : Record 293;
      ReminderText@1002 : Record 294;
      DueDate@1000 : Date;
      DocumentDate@1005 : Date;
    BEGIN
      // Check Reminder Line Description after creating Reminder.
      // Setup: Create Sales Invoice and Reminder Terms Code.
      Initialize;
      CreateCustomer(Customer,'');
      ReminderLevel.SETRANGE("Reminder Terms Code",Customer."Reminder Terms Code");
      ReminderLevel.FINDFIRST;
      LibraryERM.CreateReminderText(
        ReminderText,Customer."Reminder Terms Code",ReminderLevel."No.",ReminderText.Position::Ending,ReminderEndingText);

      // Exercise: Post Sales Invoice and Create Reminder.
      DueDate := CreateAndPostSalesInvoice(Customer."No.",'');
      DocumentDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',CALCDATE(ReminderLevel."Grace Period",DueDate));

      CreateReminder(Customer."No.",DocumentDate,FALSE); // "Use Header Level" = FALSE

      // Verify: Check Description on Reminder Line after Creating Reminder.
      ReminderLine.SETRANGE("Line Type",ReminderLine."Line Type"::"Ending Text");
      ReminderLine.FINDLAST;
      Assert.AreEqual(STRSUBSTNO(ReminderLine.Description,ReminderLine.Amount + ReminderLine."Remaining Amount"),
        ReminderLine.Description,ErrorMustMatch);
    END;

    [Test]
    PROCEDURE ManualReminderMultipleInvoices@30();
    VAR
      Customer@1005 : Record 18;
      ReminderNo@1003 : Code[20];
      DocumentDate@1000 : Date;
      Amount@1002 : Decimal;
      AdditionalFee@1001 : Decimal;
    BEGIN
      // Check Additional Fee Amount on Issued Reminder with different Currencies for Different Sales Invoices.

      // Setup: Create a Customer with Currency and Reminder Terms attached to it. Create and Post Sales Invoice for the Customer with
      // a new Currency. Again post a Sales Invoice with Customer Currency and Create Reminder after Grace Period Date.
      AdditionalFee := SetupAndPostSalesInvoice(Customer,DocumentDate,CreateCurrency,FindCurrency);
      CreateAndPostSalesInvoice(Customer."No.",Customer."Currency Code");
      Amount := ROUND(LibraryERM.ConvertCurrency(AdditionalFee,'',Customer."Currency Code",WORKDATE));
      CreateSuggestReminderManually(Customer."No.",Customer."Currency Code",DocumentDate);

      // Exercise: Issue the Reminder.
      ReminderNo := IssueReminder(DocumentDate);

      // Verify: Verify the Additional Fee Amount on Issued Reminder Lines.
      VerifyReminderLine(ReminderNo,Amount);
    END;

    [Test]
    PROCEDURE SuggestReminderLinesBatch@12();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      // Test create reminder using suggest line.

      // Setup: Create and Post Sales Invoice using Sales Journal.
      CreateAndPostGenJournalLine(Customer);

      // Exercise: Run Suggest Reminder Lines report with Random Document Date.
      CreateSuggestReminderManually(
        Customer."No.",Customer."Currency Code",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE));

      // Verify: Verify Reminder Line must be created.
      FindReminderLine(GetReminderNo(Customer."No."));
    END;

    [Test]
    PROCEDURE CreateRemindersBatch@18();
    VAR
      Customer@1003 : Record 18;
    BEGIN
      // Test create reminder using suggest reminder.

      // Setup: Create and Post Sales Invoice using Sales Journal.
      CreateAndPostGenJournalLine(Customer);

      // Exercise: Run Create Reminders report with Random Document Date.
      CreateReminder(Customer."No.",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',WORKDATE),FALSE); // "Use Header Level" = FALSE

      // Verify: Verify Reminder Line must be created.
      FindReminderLine(GetReminderNo(Customer."No."));
    END;

    [Test]
    [HandlerFunctions(UpdateReminderTextPageHandler)]
    PROCEDURE UpdateReminderText@33();
    VAR
      Customer@1005 : Record 18;
      ReminderHeader@1007 : Record 295;
      ReminderLevel@1003 : Record 293;
      ReminderText@1002 : Record 294;
    BEGIN
      // Check the functionality of Report Update Reminder Text.

      // Setup: Create Sales Invoice, Reminder Terms Code and Reminder Document.
      Initialize;
      CreateCustomer(Customer,'');
      GetReminderLevel(ReminderLevel,Customer."Reminder Terms Code");
      LibraryERM.CreateReminderText(
        ReminderText,Customer."Reminder Terms Code",ReminderLevel."No.",ReminderText.Position::Ending,ReminderEndingText);
      ReminderLevelNo := ReminderLevel."No.";  // Assign global variable.
      CreateReminder(
        Customer."No.",
        CALCDATE(
          '<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',
          CALCDATE(ReminderLevel."Grace Period",CreateAndPostSalesInvoice(Customer."No.",''))),FALSE); // "Use Header Level" = FALSE
      FindReminderHeader(ReminderHeader,Customer."No.");

      // Exercise: Run Update Reminder Text Report.
      UpdateReminderTextBatch(ReminderHeader);

      // Verify: Check Description on Reminder Line after creating Reminder.
      VerifyReminderDescription(ReminderHeader."No.");
    END;

    [Test]
    PROCEDURE ReminderLevelInReminderFinChargeEntry@24();
    VAR
      Customer@1003 : Record 18;
      ReminderLevel@1001 : Record 293;
      ReminderFinChargeEntry@1002 : Record 300;
      DueDate@1000 : Date;
      DocumentDate@1004 : Date;
      IssuedReminderNo@1005 : Code[20];
    BEGIN
      // Verify Reminder Level in Reminder/Fin. Charge Entry associated with the Issued Reminder, after issuing Reminder.

      // Setup: Create Customer. Create and post Sales Invoice. Create Reminder.
      CreateCustomer(Customer,'');
      DueDate := CreateAndPostSalesInvoice(Customer."No.",'');
      GetReminderLevel(ReminderLevel,Customer."Reminder Terms Code");
      DocumentDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',CALCDATE(ReminderLevel."Grace Period",DueDate));  // Use Random Integer value to calculate Document date.
      CreateReminder(Customer."No.",DocumentDate,FALSE); // "Use Header Level" = FALSE

      // Exercise: Issue the Reminder.
      IssuedReminderNo := IssueReminder(DocumentDate);

      // Verify: Verify Reminder Level in Reminder/Fin. Charge Entry.
      ReminderFinChargeEntry.SETRANGE(Type,ReminderFinChargeEntry.Type::Reminder);
      ReminderFinChargeEntry.SETRANGE("No.",IssuedReminderNo);
      ReminderFinChargeEntry.FINDFIRST;
      ReminderFinChargeEntry.TESTFIELD("Reminder Level",ReminderLevel."No.");
    END;

    [Test]
    PROCEDURE VerifyReminderHeaderRemainingAmountWithLineTypeReminderLine@55();
    VAR
      ReminderLine@1000 : Record 296;
    BEGIN
      // Test Remaining Amount on Reminder Header when Reminder Lines created with Line Type ReminderLine.
      ReminderHeaderWithRemainingAmount(ReminderLine."Line Type"::"Reminder Line");
    END;

    [Test]
    PROCEDURE VerifyReminderHeaderRemainingAmountWithLineTypeNotDue@39();
    VAR
      ReminderLine@1005 : Record 296;
    BEGIN
      // Test Remaining Amount on Reminder Header when Reminder Line is created with Line Type Not Due.
      ReminderHeaderWithRemainingAmount(ReminderLine."Line Type"::"Not Due");
    END;

    [Test]
    PROCEDURE VerifyReminderHeaderIntrestAmountWithLineTypeReminderLine@29();
    VAR
      ReminderLine@1005 : Record 296;
    BEGIN
      // Test Intrest Amount on Reminder Header when Reminder Lines created with Line Type ReminderLine.
      ReminderHeaderWithIntrestAmount(ReminderLine."Line Type"::"Reminder Line");
    END;

    [Test]
    PROCEDURE VerifyReminderHeaderIntrestAmountWithLineTypeNotDue@36();
    VAR
      ReminderLine@1005 : Record 296;
    BEGIN
      // Test Intrest Amount on Reminder Header when Reminder Line is created with Line Type Not Due.
      ReminderHeaderWithIntrestAmount(ReminderLine."Line Type"::"Not Due");
    END;

    [Test]
    PROCEDURE VerifyReminderHeaderAdditionalFeeAndVATAmountWithLineTypeAdditionalFee@59();
    VAR
      ReminderHeader@1004 : Record 295;
      ReminderLine@1005 : Record 296;
    BEGIN
      // Test Additional Fee and VAT Amounts on Reminder Header when Reminder Line is created with Line Type Additional Fee.

      // Setup: Insert Reminder Header with Customer No.
      Initialize;
      InsertReminderHeader(ReminderHeader);

      // Exercise: Insert Reminder Line with Line Type Additional Fee.
      AddReminderLine(ReminderLine,ReminderHeader."No.",ReminderLine.Type::"G/L Account",ReminderLine."Line Type"::"Additional Fee");

      // Verify: Verify Additional Fee and VAT Amounts On Reminder Header.
      ReminderHeader.CALCFIELDS("Additional Fee","VAT Amount");
      ReminderHeader.TESTFIELD("Additional Fee",ReminderLine.Amount);
      ReminderHeader.TESTFIELD("VAT Amount",ReminderLine."VAT Amount");
    END;

    [Test]
    PROCEDURE VerifyReminderHeaderAdditionalFeeAndVATAmountWithLineTypeNotDue@40();
    VAR
      ReminderHeader@1004 : Record 295;
      ReminderLine@1005 : Record 296;
    BEGIN
      // Test Additional Fee and VAT Amounts on Reminder Header when Reminder Line is created with Line Type Not Due.

      // Setup: Insert Reminder Header with Customer No.
      Initialize;
      InsertReminderHeader(ReminderHeader);

      // Exercise: Insert Reminder Line with Line Type Not Due.
      AddReminderLine(ReminderLine,ReminderHeader."No.",ReminderLine.Type::"G/L Account",ReminderLine."Line Type"::"Not Due");

      // Verify: Verify Additional Fee and VAT Amounts On Reminder Header.
      ReminderHeader.CALCFIELDS("Additional Fee","VAT Amount");
      ReminderHeader.TESTFIELD("Additional Fee",0);
      ReminderHeader.TESTFIELD("VAT Amount",0);
    END;

    [Test]
    PROCEDURE VerifyReminderLineAmountsForDiffrentLineTypes@37();
    VAR
      ReminderLine@1005 : Record 296;
    BEGIN
      // Test Amount,VATAmount and Remaining Amounts on Reminder Lines when Reminder Lines are created with Different Line Type Options.

      // Setup.
      Initialize;

      // Exercise: Insert Reminder Lines with Different Line Types and calculate Amounts.
      WITH ReminderLine DO BEGIN
        AddReminderLine(ReminderLine,'',Type::"Customer Ledger Entry","Line Type"::"Reminder Line");
        AddReminderLine(ReminderLine,'',Type::"Customer Ledger Entry","Line Type"::"Not Due");
        AddReminderLine(ReminderLine,'',Type::"G/L Account","Line Type"::"Reminder Line");

        SETRANGE("Line Type","Line Type"::"Reminder Line");
        CALCSUMS(Amount,"VAT Amount","Remaining Amount");
        TESTFIELD(Amount,Amount);
        TESTFIELD("VAT Amount","VAT Amount");
        TESTFIELD("Remaining Amount","Remaining Amount");
      END;
    END;

    [Test]
    PROCEDURE CreateReminderForCustomerLedgerEntriesWithDifferentLevelWhenUseHeaderLevelTrue@26();
    VAR
      Customer@1004 : Record 18;
      ReminderHeader@1001 : Record 295;
      DocumentDate@1002 : Date;
      DueDate@1000 : Date;
      ReminderLevelGracePeriod@1005 : DateFormula;
    BEGIN
      // Test No. Of Reminders for customer ledger entries with  different level are correct when option "Use Header Level" = TRUE.

      // Setup: Create a Customer and Reminder Terms with two levels attached to it. Create and Post two Sales Invoices with different Due Date for the Customer.
      SetupAndPostSalesInvoice(Customer,DocumentDate,'','');
      CreateReminderLevel(ReminderLevelGracePeriod,Customer."Reminder Terms Code");
      DueDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(3)) + 'D>',DocumentDate);
      CreateAndPostSalesInvoiceWithUpdateDueDate(Customer."No.",DueDate);

      // Create Reminder for the Customer through batch job on a Date after Grace Period. Issue the Reminder.
      CreateReminder(Customer."No.",DocumentDate,FALSE); // Document Date need to between the Due Date of two Sales Invoices and "Use Header Level" = FALSE
      IssueReminder(DocumentDate);

      // Exercise: Create Reminder for the Customer with "Use Header Level" = TRUE.
      CreateReminder(Customer."No.",CALCDATE(ReminderLevelGracePeriod,DueDate),TRUE); // Document Date need to greater than the Due Date of two Sales Invoices.
      FindReminderHeader(ReminderHeader,Customer."No.");

      // Verify: Verify No. Of Reminders field on Reminder Lines.
      VerifyNoOfRemindersOnReminderLine(ReminderHeader."No.",ReminderHeader."Reminder Level");
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Clear global variable.
      CLEAR(ReminderLevelNo);

      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      IsInitialized := TRUE;
    END;

    LOCAL PROCEDURE AddReminderLine@50(VAR ReminderLine@1000 : Record 296;ReminderHeaderNo@1001 : Code[20];ReminderType@1002 : Option;ReminderLineType@1004 : Option);
    BEGIN
      ReminderLine.INIT;
      ReminderLine."Reminder No." := ReminderHeaderNo;
      ReminderLine."Line No." += 10000;
      ReminderLine.Type := ReminderType;
      ReminderLine."Line Type" := ReminderLineType;
      ReminderLine."Remaining Amount" := LibraryRandom.RandDec(100,2);
      ReminderLine.Amount := LibraryRandom.RandDec(10,2);
      ReminderLine."VAT Amount" := LibraryRandom.RandDec(5,2);
      ReminderLine.INSERT;
    END;

    LOCAL PROCEDURE SetupAndPostSalesInvoice@9(VAR Customer@1003 : Record 18;VAR DocumentDate@1000 : Date;CurrencyCode@1008 : Code[10];CurrencyCode2@1009 : Code[10]) : Decimal;
    VAR
      ReminderLevel@1002 : Record 293;
      DueDate@1004 : Date;
    BEGIN
      // Setup: Create a Customer with Currency and Reminder Terms attached to it. Create and Post Sales Invoice for the Customer with
      // Currency selected. Create Reminder for the Customer after Grace Period Date.
      CreateCustomer(Customer,CurrencyCode);
      GetReminderLevel(ReminderLevel,Customer."Reminder Terms Code");
      DueDate := CreateAndPostSalesInvoice(Customer."No.",CurrencyCode2);
      DocumentDate := CALCDATE('<1D>',CALCDATE(ReminderLevel."Grace Period",DueDate));
      EXIT(ReminderLevel."Additional Fee (LCY)");
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@17(CustomerNo@1000 : Code[20];CurrencyCode@1004 : Code[10]) : Date;
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Take Random Quantity for Sales Invoice.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      SalesHeader.VALIDATE("Currency Code",CurrencyCode);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      EXIT(SalesHeader."Due Date");
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoiceWithUpdateDueDate@31(CustomerNo@1000 : Code[20];DueDate@1002 : Date);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Take Random Quantity for Sales Invoice.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);
      SalesHeader.VALIDATE("Due Date",DueDate);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem,LibraryRandom.RandInt(10));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateCurrency@27() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCustomer@1(VAR Customer@1000 : Record 18;CurrencyCode@1002 : Code[10]);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.VALIDATE("Reminder Terms Code",CreateReminderTerms);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@23(VAR GenJournalBatch@1002 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::Sales);
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLine@22(VAR Customer@1000 : Record 18);
    VAR
      GenJournalLine@1001 : Record 81;
      GenJournalBatch@1002 : Record 232;
      GLAccount@1003 : Record 15;
    BEGIN
      CreateCustomer(Customer,'');
      LibraryERM.CreateGLAccount(GLAccount);
      CreateGeneralJournalBatch(GenJournalBatch);

      // Use Random Amount because value is not important.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,Customer."No.",LibraryRandom.RandDec(1000,2));
      GenJournalLine.VALIDATE("Document No.",GenJournalLine."Journal Batch Name" + FORMAT(GenJournalLine."Line No."));
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateReminder@11(CustomerNo@1001 : Code[20];DocumentDate@1002 : Date;UseHeaderLevel@1003 : Boolean);
    VAR
      Customer@1007 : Record 18;
      CreateReminders@1000 : Report 188;
    BEGIN
      CLEAR(CreateReminders);
      Customer.SETRANGE("No.",CustomerNo);
      CreateReminders.SETTABLEVIEW(Customer);
      CreateReminders.InitializeRequest(DocumentDate,DocumentDate,TRUE,UseHeaderLevel,FALSE);
      CreateReminders.USEREQUESTPAGE(FALSE);
      CreateReminders.RUN;
    END;

    LOCAL PROCEDURE CreateReminderLevel@3(VAR ReminderLevelGracePeriod@1003 : DateFormula;ReminderTermsCode@1000 : Code[10]);
    VAR
      ReminderLevel@1001 : Record 293;
    BEGIN
      // Create Reminder Level with a Random Grace Period and Random Additional Fee.
      LibraryERM.CreateReminderLevel(ReminderLevel,ReminderTermsCode);
      EVALUATE(ReminderLevel."Grace Period",'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      ReminderLevel.VALIDATE("Additional Fee (LCY)",LibraryRandom.RandInt(10));
      ReminderLevel.MODIFY(TRUE);
      ReminderLevelGracePeriod := ReminderLevel."Grace Period";
    END;

    LOCAL PROCEDURE CreateReminderTerms@4() : Code[10];
    VAR
      ReminderTerms@1000 : Record 292;
      ReminderLevelGracePeriod@1002 : DateFormula;
    BEGIN
      LibraryERM.CreateReminderTerms(ReminderTerms);
      CreateReminderLevel(ReminderLevelGracePeriod,ReminderTerms.Code);
      EXIT(ReminderTerms.Code);
    END;

    LOCAL PROCEDURE CreateSuggestReminderManually@19(CustomerNo@1001 : Code[20];CurrencyCode@1000 : Code[10];DocumentDate@1002 : Date);
    VAR
      ReminderHeader@1003 : Record 295;
    BEGIN
      LibraryERM.CreateReminderHeader(ReminderHeader);
      ReminderHeader.VALIDATE("Customer No.",CustomerNo);
      ReminderHeader.VALIDATE("Document Date",DocumentDate);
      ReminderHeader.VALIDATE("Currency Code",CurrencyCode);
      ReminderHeader.MODIFY(TRUE);
      SuggestReminderManually(ReminderHeader."No.");
    END;

    LOCAL PROCEDURE FindCurrency@2() : Code[10];
    VAR
      Currency@1000 : Record 4;
    BEGIN
      LibraryERM.FindCurrency(Currency);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateItem@21() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItemWithUnitPriceAndUnitCost(
        Item,LibraryRandom.RandDec(1000,2),LibraryRandom.RandDec(1000,2));
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE FindReminderHeader@118(VAR ReminderHeader@1000 : Record 295;CustomerNo@1001 : Code[20]);
    BEGIN
      ReminderHeader.SETRANGE("Customer No.",CustomerNo);
      ReminderHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindReminderLine@20(ReminderNo@1000 : Code[20]);
    VAR
      ReminderLine@1001 : Record 296;
    BEGIN
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      ReminderLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetReminderLevel@15(VAR ReminderLevel@1001 : Record 293;ReminderTermsCode@1000 : Code[10]);
    BEGIN
      ReminderLevel.SETRANGE("Reminder Terms Code",ReminderTermsCode);
      ReminderLevel.FINDFIRST;
    END;

    LOCAL PROCEDURE GetReminderNo@25(CustomerNo@1001 : Code[20]) : Code[20];
    VAR
      ReminderHeader@1000 : Record 295;
    BEGIN
      ReminderHeader.SETRANGE("Customer No.",CustomerNo);
      ReminderHeader.FINDFIRST;
      EXIT(ReminderHeader."No.");
    END;

    LOCAL PROCEDURE InsertReminderHeader@48(VAR ReminderHeader@1000 : Record 295);
    BEGIN
      ReminderHeader.INIT;
      ReminderHeader."No." := LibraryUtility.GenerateGUID;
      ReminderHeader.INSERT;
    END;

    LOCAL PROCEDURE InsertReminderWithTwoLines@32(VAR ReminderHeader@1000 : Record 295;VAR ReminderLine@1001 : Record 296;ReminderType@1002 : Option;ReminderLineType@1003 : Option);
    BEGIN
      InsertReminderHeader(ReminderHeader);
      AddReminderLine(ReminderLine,ReminderHeader."No.",ReminderLine.Type::"Customer Ledger Entry",
        ReminderLine."Line Type"::"Reminder Line");
      AddReminderLine(ReminderLine,ReminderHeader."No.",ReminderType,ReminderLineType);
    END;

    LOCAL PROCEDURE IssueReminder@6(DocumentDate@1004 : Date) IssuedReminderNo : Code[20];
    VAR
      NoSeriesLine@1002 : Record 309;
      ReminderHeader@1003 : Record 295;
      SalesAndReceivablesSetup@1001 : Record 311;
      ReminderIssue@1000 : Codeunit 393;
      NoSeriesManagement@1005 : Codeunit 396;
    BEGIN
      SalesAndReceivablesSetup.GET;
      NoSeriesLine.SETRANGE("Series Code",SalesAndReceivablesSetup."Reminder Nos.");
      NoSeriesLine.FINDFIRST;
      ReminderHeader.GET(NoSeriesLine."Last No. Used");
      IssuedReminderNo := NoSeriesManagement.GetNextNo(ReminderHeader."Issuing No. Series",WORKDATE,FALSE);
      ReminderIssue.Set(ReminderHeader,FALSE,DocumentDate);
      ReminderIssue.RUN;
    END;

    LOCAL PROCEDURE SuggestReminderManually@16(ReminderHeaderNo@1000 : Code[20]);
    VAR
      ReminderHeader@1002 : Record 295;
      SuggestReminderLines@1001 : Report 189;
    BEGIN
      ReminderHeader.SETRANGE("No.",ReminderHeaderNo);
      SuggestReminderLines.SETTABLEVIEW(ReminderHeader);
      SuggestReminderLines.USEREQUESTPAGE(FALSE);
      SuggestReminderLines.RUN;
    END;

    LOCAL PROCEDURE SumRemainigLineAmounts@45(ReminderLine@1001 : Record 296;FieldNumber@1000 : Integer) : Decimal;
    BEGIN
      WITH ReminderLine DO BEGIN
        SETRANGE("Reminder No.","Reminder No.");
        SETRANGE("Line Type","Line Type"::"Reminder Line");
        CASE FieldNumber OF
          FIELDNO("Remaining Amount"):
            BEGIN
              CALCSUMS("Remaining Amount");
              EXIT("Remaining Amount");
            END;
          FIELDNO(Amount):
            BEGIN
              CALCSUMS(Amount);
              EXIT(Amount);
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE ReminderHeaderWithRemainingAmount@34(ReminderLineType@1012 : Option);
    VAR
      ReminderHeader@1004 : Record 295;
      ReminderLine@1005 : Record 296;
    BEGIN
      // Setup: Create Reminder Header.
      Initialize;

      // Exercise: Insert Reminder Lines.
      InsertReminderWithTwoLines(ReminderHeader,ReminderLine,ReminderLine.Type::"Customer Ledger Entry",ReminderLineType);

      // Verify: Verify Remaining Amount On Reminder Header.
      ReminderHeader.CALCFIELDS("Remaining Amount");
      ReminderHeader.TESTFIELD("Remaining Amount",SumRemainigLineAmounts(ReminderLine,ReminderLine.FIELDNO("Remaining Amount")));
    END;

    LOCAL PROCEDURE ReminderHeaderWithIntrestAmount@47(ReminderLineType@1012 : Option);
    VAR
      ReminderHeader@1004 : Record 295;
      ReminderLine@1005 : Record 296;
    BEGIN
      // Setup: Create Reminder Header and Reminder Lines with Line Types.
      Initialize;

      // Exercise: Insert Reminder Lines.
      InsertReminderWithTwoLines(ReminderHeader,ReminderLine,ReminderLine.Type::"Customer Ledger Entry",ReminderLineType);

      // Verify: Verify Intrest Amount On Reminder Header.
      ReminderHeader.CALCFIELDS("Interest Amount");
      ReminderHeader.TESTFIELD("Interest Amount",SumRemainigLineAmounts(ReminderLine,ReminderLine.FIELDNO(Amount)));
    END;

    LOCAL PROCEDURE UpdateReminderTextBatch@134(ReminderHeader@1000 : Record 295);
    VAR
      UpdateReminderText@1001 : Report 187;
    BEGIN
      CLEAR(UpdateReminderText);
      UpdateReminderText.SETTABLEVIEW(ReminderHeader);
      UpdateReminderText.RUN;
    END;

    LOCAL PROCEDURE VerifyReminderLine@7(ReminderNo@1001 : Code[20];Amount@1003 : Decimal);
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      IssuedReminderLine@1000 : Record 298;
    BEGIN
      GeneralLedgerSetup.GET;
      IssuedReminderLine.SETRANGE("Reminder No.",ReminderNo);
      IssuedReminderLine.SETRANGE(Type,IssuedReminderLine.Type::"G/L Account");
      IssuedReminderLine.SETFILTER("Line Type",'<>%1',IssuedReminderLine."Line Type"::Rounding);
      IssuedReminderLine.FINDFIRST;
      Assert.AreNearlyEqual(
        Amount,IssuedReminderLine.Amount,GeneralLedgerSetup."Amount Rounding Precision",STRSUBSTNO(AmountError,Amount,ReminderNo));
    END;

    LOCAL PROCEDURE VerifyNoOfRemindersOnReminderLine@43(ReminderNo@1001 : Code[20];NoOfReminders@1003 : Integer);
    VAR
      ReminderLine@1000 : Record 296;
    BEGIN
      WITH ReminderLine DO BEGIN
        SETRANGE("Reminder No.",ReminderNo);
        SETRANGE(Type,Type::"Customer Ledger Entry");
        FINDSET;
        REPEAT
          Assert.AreEqual(NoOfReminders,"No. of Reminders",NoOfRemindersErr);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyReminderDescription@106(ReminderNo@1000 : Code[20]);
    VAR
      ReminderLine@1001 : Record 296;
      Amount@1002 : Decimal;
    BEGIN
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      ReminderLine.FINDSET;
      REPEAT
        Amount += (ReminderLine."Remaining Amount" + ReminderLine.Amount) * (1 + (ReminderLine."VAT %" / 100));
      UNTIL ReminderLine.NEXT = 0;
      Assert.AreEqual(
        STRSUBSTNO(ReminderLineDescription,FORMAT(Amount,0,'<Precision,2><Standard Format,0>')),ReminderLine.Description,
        ErrorMustMatch);
    END;

    [RequestPageHandler]
    PROCEDURE UpdateReminderTextPageHandler@61(VAR UpdateReminderText@1000 : TestRequestPage 187);
    BEGIN
      UpdateReminderText.ReminderLevelNo.SETVALUE(ReminderLevelNo);
      UpdateReminderText.UpdateAdditionalFee.SETVALUE(FALSE);
      UpdateReminderText.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Reminder]
      Unsupported version tags:
      NA: Unable to Execute

      Test Reminder with LCY and FCY for a Customer.
        1. Verify Issued Reminder Additional Fee Amount with LCY for a Customer.
        2. Verify Issued Reminder Additional Fee Amount with FCY for a Customer.
        3. Verify Additional Fee on Manually created Reminder with Multiple Invoices for a Customer.
        4. Verify Reminder Line Description after creating Reminder.
        5. Test create reminder using suggest line.
        6. Test create reminder using suggest reminder.
        7. Check the functionality of Report Update Reminder Text.
        8. Verify Reminder Level in Reminder/Fin. Charge Entry associated with the Issued Reminder, after issuing Reminder.
        9. Verify Reminder Line Description when Create Reminders report with Only Entries With Overdue Amounts.
       10. Verify Reminder Line Description when Create Reminders report without Only Entries With Overdue Amounts.
       11. Test Remaining Amount on Reminder Header when Reminder Lines created with Line Type ReminderLine.
       12. Test Remaining Amount on Reminder Header when Reminder Lines created with Line Type Not Due.
       13. Test Intrest Amount on Reminder Header when Reminder Lines created with Line Type ReminderLine.
       14. Test Intrest Amount on Reminder Header when Reminder Line is created with Line Type Not Due.
       15. Test Additional Fee and VAT Amounts on Reminder Header when Reminder Line is created with Line Type Additional Fee.
       16. Test Additional Fee and VAT Amounts on Reminder Header when Reminder Line is created with Line Type Not Due.
       17. Test Amount,VATAmount and Remaining Amounts on Reminder Lines when Reminder Lines are created with Different Line Type Options.
       18. Test No. Of Reminders for customer ledger entries with  different level are correct when option "Use Header Level" = TRUE.

        Covers Test Cases
        -------------------------------------------------------------------------
        Test Function Name                       TFS ID
        -------------------------------------------------------------------------
        ReminderWithLCY, ReminderWithFCY         125675, 125676, 125677, 125678
        ManualReminderMultipleInvoices           125679, 125680, 125681

        TFS_TS_ID = 259771
        Covers Test Cases
        -------------------------------------------------------------------------
        Test Function Name                       TFS ID
        -------------------------------------------------------------------------
        CreateSalesInvoiceAndReminder            252231

        TFS_TS_ID = 257783
        Covers Test Cases
        -------------------------------------------------------------------------
        Test Function Name                       TFS ID
        -------------------------------------------------------------------------
        SuggestReminderLinesBatch                230194
        CreateRemindersBatch                     230195

        TFS_TS_ID = 251020
        Covers Test Cases
        ---------------------------------------------------------------------------
        Test Function Name                        TFS ID
        ---------------------------------------------------------------------------
        UpdateReminderText                        128974

        TFS_TS_ID = 320045
        Covers Test Cases
        ---------------------------------------------------------------------------
        Test Function Name                        TFS ID
        ---------------------------------------------------------------------------
        ReminderLevelInReminderFinChargeEntry     289118

        Bug_ID = 332265
        Covers Test Cases
        ---------------------------------------------------------------------------
        Test Function Name                                                 TFS ID
        ---------------------------------------------------------------------------
        VerifyReminderHeaderRemainingAmountWithLineTypeReminderLine,
        VerifyReminderHeaderRemainingAmountWithLineTypeNotDue,
        VerifyReminderHeaderIntrestAmountWithLineTypeReminderLine,
        VerifyReminderHeaderIntrestAmountWithLineTypeNotDue,
        VerifyReminderHeaderAdditionalFeeAndVATAmountWithLineTypeAdditionalFee,
        VerifyReminderHeaderAdditionalFeeAndVATAmountWithLineTypeNotDue,
        VerifyReminderLineAmountsForDiffrentLineTypes                        332170

        Bug_ID = 89862
        Covers Test Cases
        --------------------------------------------------------------------------------------------------
        Test Function Name                                                                         TFS ID
        --------------------------------------------------------------------------------------------------
        CreateReminderForCustomerLedgerEntriesWithDifferentLevelWhenUseHeaderLevelTrue             89862
    }
    END.
  }
}

