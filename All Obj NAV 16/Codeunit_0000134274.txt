OBJECT Codeunit 134274 Transformation Rules Tests
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      REMOVE_CURR_SYMBOLSTxt@1012 : TextConst '@@@=TransformationRule.Code for removing currency symbol in string;ENU=REMOVE_CURR_SYMBOLS';
      LowerAlphaNumericCharsTxt@1002 : TextConst 'ENU="abcdefghijklmnopqrstuvwxyz1234567890!""#Ï%&/()=?`^*::_;"';
      TitleCaseJohnRobertsTxt@1004 : TextConst 'ENU=john roberts';
      EUR_DKKTxt@1006 : TextConst '@@@=A sample example representing a concatenation of two currency codes;ENU=EURDKK';
      FindReplaceTxt@1008 : TextConst 'ENU=abaabbaaabbbaaaabbbb';
      REPLACEATxt@1010 : TextConst '@@@=TransformationRule.Code for replacing all a characters to b;ENU=REPLACEA';

    [Test]
    PROCEDURE TestUpperCase@1();
    VAR
      TransformationRule@1000 : Record 1237;
      InputText@1001 : Text;
    BEGIN
      Iniatialize;

      TransformationRule.GET(TransformationRule.GetUppercaseCode);
      InputText := LowerAlphaNumericCharsTxt;
      Assert.AreEqual(UPPERCASE(InputText),TransformationRule.TransformText(InputText),'');
    END;

    [Test]
    PROCEDURE TestLowerCase@2();
    VAR
      TransformationRule@1000 : Record 1237;
      InputText@1001 : Text;
    BEGIN
      Iniatialize;

      TransformationRule.GET(TransformationRule.GetLowercaseCode);
      InputText := UPPERCASE(LowerAlphaNumericCharsTxt);
      Assert.AreEqual(LOWERCASE(InputText),TransformationRule.TransformText(InputText),'');
    END;

    [Test]
    PROCEDURE TestTitleCase@3();
    VAR
      TransformationRule@1000 : Record 1237;
      InputText@1001 : Text;
      ResultText@1003 : Text;
      Index@1002 : Integer;
    BEGIN
      Iniatialize;

      TransformationRule.GET(TransformationRule.GetTitlecaseCode);

      InputText := TitleCaseJohnRobertsTxt;
      ResultText := TransformationRule.TransformText(InputText);

      FOR Index := 1 TO STRLEN(InputText) DO BEGIN
        IF TRUE IN [Index = 1,InputText[Index - 1] = ' '] THEN
          Assert.IsFalse(ResultText[Index] IN ['a'..'z'],FORMAT(ResultText[Index]))
        ELSE
          Assert.IsFalse(ResultText[Index] IN ['A'..'Z'],FORMAT(ResultText[Index]))
      END;
    END;

    [Test]
    PROCEDURE TestTrim@4();
    VAR
      TransformationRule@1000 : Record 1237;
      InputText@1001 : Text;
    BEGIN
      Iniatialize;

      TransformationRule.GET(TransformationRule.GetTrimCode);
      InputText := STRSUBSTNO(' %1 ',LowerAlphaNumericCharsTxt);

      Assert.AreEqual(FORMAT(LowerAlphaNumericCharsTxt),TransformationRule.TransformText(InputText),'');
    END;

    [Test]
    PROCEDURE TestSubstring@5();
    VAR
      TransformationRule@1000 : Record 1237;
      InputText@1001 : Text;
      ResultText@1002 : Text;
      i@1003 : Integer;
    BEGIN
      Iniatialize;

      TransformationRule.GET(TransformationRule.GetFourthToSixthSubstringCode);

      InputText := EUR_DKKTxt;
      ResultText := TransformationRule.TransformText(InputText);

      FOR i := TransformationRule."Start Position" TO TransformationRule.Length DO
        Assert.AreEqual(InputText[i],ResultText[i - TransformationRule."Start Position"],'');
    END;

    [Test]
    PROCEDURE TestReplace@6();
    VAR
      TransformationRule@1000 : Record 1237;
      InputText@1003 : Text;
      ResultText@1002 : Text;
      i@1001 : Integer;
      j@1004 : Integer;
      k@1005 : Integer;
      m@1006 : Integer;
    BEGIN
      Iniatialize;

      TransformationRule.INIT;
      TransformationRule.VALIDATE(Code,REPLACEATxt);
      TransformationRule.VALIDATE("Transformation Type",TransformationRule."Transformation Type"::Replace);
      TransformationRule.VALIDATE("Find Value",'a');
      TransformationRule.VALIDATE("Replace Value",'b');
      TransformationRule.INSERT;

      InputText := FindReplaceTxt;
      ResultText := TransformationRule.TransformText(InputText);

      j := 1;
      FOR i := 1 TO STRLEN(ResultText) DO BEGIN
        IF ResultText[i] <> InputText[j] THEN BEGIN
          FOR k := 1 TO STRLEN(TransformationRule."Find Value") DO BEGIN
            Assert.AreEqual(FORMAT(TransformationRule."Find Value"[k]),FORMAT(InputText[j]),'');
            j += 1;
          END;

          FOR m := 1 TO STRLEN(TransformationRule."Replace Value") DO BEGIN
            Assert.AreEqual(FORMAT(TransformationRule."Replace Value"[m]),FORMAT(ResultText[i]),'');
            i += 1;
          END
        END ELSE
          j += 1;
      END;
    END;

    [Test]
    PROCEDURE TestRegularExpression@7();
    VAR
      TransformationRule@1000 : Record 1237;
      InputText@1002 : Text;
      ResultText@1001 : Text;
    BEGIN
      Iniatialize;

      TransformationRule.INIT;
      TransformationRule.VALIDATE(Code,REMOVE_CURR_SYMBOLSTxt);
      TransformationRule.VALIDATE("Transformation Type",TransformationRule."Transformation Type"::"Regular Expression");
      TransformationRule.VALIDATE("Find Value",'(\p{Sc}\s?)?(\d+\.?((?<=\.)\d+)?)(?(1)|\s?\p{Sc})?');
      TransformationRule.VALIDATE("Replace Value",'$2');
      TransformationRule.INSERT;

      InputText := '$17.43  $2 16.33  œ0.98  0.43   œ43   12$  12$';
      ResultText := TransformationRule.TransformText(InputText);

      Assert.AreEqual('17.43  2 16.33  0.98  0.43   43   12  12',ResultText,'');
    END;

    [Test]
    PROCEDURE TestRemoveNonAlphaNumbericCharacters@8();
    VAR
      TransformationRule@1000 : Record 1237;
      InputText@1001 : Text;
      ResultText@1003 : Text;
      Index@1002 : Integer;
    BEGIN
      Iniatialize;

      TransformationRule.GET(TransformationRule.GetAlphanumericCode);
      InputText := LowerAlphaNumericCharsTxt;
      ResultText := TransformationRule.TransformText(InputText);

      FOR Index := 1 TO STRLEN(ResultText) DO
        Assert.IsTrue(InputText[Index] IN ['a'..'z','0'..'9'],FORMAT(InputText[Index]));
    END;

    [Test]
    PROCEDURE TestUSDateTimeFormating@9();
    VAR
      TransformationRule@1000 : Record 1237;
      TestDate@1001 : Date;
      InputText@1003 : Text;
      ResultText@1002 : Text;
    BEGIN
      Iniatialize;

      TransformationRule.GET(TransformationRule.GetUSDateFormatCode);

      TestDate := TODAY;

      InputText := STRSUBSTNO('%1/%2/%3',DATE2DMY(TestDate,2),DATE2DMY(TestDate,1),DATE2DMY(TestDate,3));
      ResultText := TransformationRule.TransformText(InputText);

      Assert.AreEqual(FORMAT(TestDate,0,9),ResultText,'');
    END;

    [Test]
    PROCEDURE TestYYYYMMDD_DateTimeFormating@10();
    VAR
      TransformationRule@1000 : Record 1237;
      TestDate@1001 : Date;
      InputText@1003 : Text;
      ResultText@1002 : Text;
    BEGIN
      Iniatialize;

      TransformationRule.GET(TransformationRule.GetYYYYMMDDCode);

      TestDate := 131215D;

      InputText := STRSUBSTNO('%1%2%3',DATE2DMY(TestDate,3),DATE2DMY(TestDate,2),DATE2DMY(TestDate,1));
      ResultText := TransformationRule.TransformText(InputText);

      Assert.AreEqual(FORMAT(TestDate,0,9),ResultText,'');
    END;

    LOCAL PROCEDURE Iniatialize@11();
    VAR
      TransformationRule@1000 : Record 1237;
    BEGIN
      TransformationRule.CreateDefaultTransformations;
    END;

    BEGIN
    {
      // [FEATURE] [Transformation Rule]
    }
    END.
  }
}

