OBJECT Codeunit 134477 ERM Dimension General Part-1
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd,
                TableData 25=rimd;
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1006 : Codeunit 131300;
      LibraryDimension@1012 : Codeunit 131001;
      LibraryInventory@1009 : Codeunit 132201;
      LibrarySales@1011 : Codeunit 130509;
      LibrarySetupStorage@1019 : Codeunit 131009;
      LibraryVariableStorage@1003 : Codeunit 131004;
      LibraryRandom@1010 : Codeunit 130440;
      LibraryUtility@1000 : Codeunit 131000;
      Assert@1001 : Codeunit 130000;
      IsInitialized@1002 : Boolean;
      ExistError@1007 : TextConst 'ENU=%1 for %2 %3 must not exist.';
      Rollback@1017 : TextConst 'ENU=Rollback to Default Value.';
      WrongValueErr@1018 : TextConst 'ENU=Wrong value of field %1 in table %2.';
      WrongCaptionErr@1005 : TextConst 'ENU=Wrong Caption %1.';
      InvalidColumnIndexErr@1004 : TextConst 'ENU=The ColumnNo param is outside the permitted range.';
      PKRangeMsg@1008 : TextConst 'ENU=%1..%2';

    [Test]
    PROCEDURE ApplyInvoicePaymentForCustomer@39();
    VAR
      GenJournalLine@1012 : Record 81;
      DefaultDimension@1000 : Record 352;
    BEGIN
      // Test Dimension on G/L Entry after Apply Invoice on Payment for Customer.

      // 1. Setup: Create Customer with Default Dimension, Create and Post General Journal Line with Document Type Invoice and Payment.
      Initialize;
      CreateCustomerWithDimension(DefaultDimension);

      // Use Random because value is not important.
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalLine."Account Type"::Customer,DefaultDimension."No.",LibraryRandom.RandDec(100,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2. Exercise: Apply Invoice on Payment.
      ApplyAndPostCustomerEntry(GenJournalLine."Document No.",-GenJournalLine.Amount);

      // 3. Verify: Verify Dimension on created G/L Entries.
      VerifyAppliedEntriesDimension(GenJournalLine."Document No.",GenJournalLine."Dimension Set ID");
    END;

    [Test]
    PROCEDURE ApplyInvoicePaymentForVendor@3();
    VAR
      GenJournalLine@1012 : Record 81;
    BEGIN
      // Test Dimension on G/L Entry after Apply Invoice on Payment for Vendor.

      // 1. Setup: Create Vendor with Default Dimension, Create and Post General Journal Line with Document Type Invoice and Payment.
      Initialize;

      // Use Random because value is not important.
      CreateGeneralJournalLines(
        GenJournalLine,GenJournalLine."Account Type"::Vendor,CreateVendorWithDimension,-LibraryRandom.RandDec(100,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2. Exercise: Apply Invoice on Payment.
      ApplyAndPostVendorEntry(GenJournalLine."Document No.",-GenJournalLine.Amount);

      // 3. Verify: Verify Dimension on created G/L Entries.
      VerifyAppliedEntriesDimension(GenJournalLine."Document No.",GenJournalLine."Dimension Set ID");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ChangeGlobalDimensionOnItem@1();
    VAR
      Item@1000 : Record 27;
      DefaultDimension@1002 : Record 352;
      GeneralLedgerSetup@1005 : Record 98;
      LibraryInventory@1001 : Codeunit 132201;
    BEGIN
      // Test Global Dimension on Item after Change the Global Dimension.

      // 1. Setup: Create Item, Dimension, Dimension Value and attach Dimension on Item.
      Initialize;
      GeneralLedgerSetup.GET;
      LibraryInventory.CreateItem(Item);
      CreateItemWithDimension(DefaultDimension,Item."No.");

      // 2. Exercise: Change Global Dimension 2 Code on General Ledger Setup.
      LibraryDimension.ChangeGlobalDimensions(GeneralLedgerSetup."Global Dimension 1 Code",DefaultDimension."Dimension Code");

      // 3. Verify: Verify Global Dimension 2 Code on Item.
      Item.GET(Item."No.");
      Item.TESTFIELD("Global Dimension 2 Code",DefaultDimension."Dimension Value Code");

      // 4. Teardown: Rollback the Default Global Dimension 2 Code on General Ledger Setup.
      ASSERTERROR ERROR(Rollback);
    END;

    [Test]
    PROCEDURE CreateDefaultDimension@22();
    VAR
      DimensionValue@1000 : Record 349;
      DefaultDimension@1002 : Record 352;
    BEGIN
      // Test Default Dimension creation with new Dimension.

      // 1. Setup: Create Dimension.
      Initialize;
      CreateDimensionWithValue(DimensionValue);

      // 2. Exercise: Create Default Dimension for G/L Account.
      LibraryDimension.CreateDefaultDimensionGLAcc(DefaultDimension,'',DimensionValue."Dimension Code",DimensionValue.Code);

      // 3. Verify: Verify Default Dimension created for G/L Account.
      DefaultDimension.SETRANGE("Dimension Code",DimensionValue."Dimension Code");
      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::"G/L Account",'');
      DefaultDimension.TESTFIELD("Dimension Value Code",DimensionValue.Code);
    END;

    [Test]
    PROCEDURE DeleteDimension@43();
    VAR
      Dimension@1003 : Record 348;
      DefaultDimension@1002 : Record 352;
    BEGIN
      // Test Default Dimension deleted on deletion of Dimension.

      // 1. Setup: Create Dimension and Default Dimension for G/L Account.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDefaultDimensionGLAcc(DefaultDimension,'',Dimension.Code,'');

      // 2. Exercise: Delete Dimension.
      Dimension.DELETE(TRUE);

      // 3. Verify: Verify Default Dimension successfully deleted.
      Assert.IsFalse(
        DefaultDimension.GET(DATABASE::"G/L Account",'',Dimension.Code),
        STRSUBSTNO(ExistError,DefaultDimension.TABLECAPTION,DefaultDimension.FIELDCAPTION("Dimension Code"),Dimension.Code));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ChangeShortcutDimensionBlocked@9();
    VAR
      Dimension@1010 : Record 348;
      GeneralLedgerSetup@1005 : Record 98;
    BEGIN
      // Test Shortcut Dimension 2 Code successfully updated after Changing Global Dimension 2 Code on General Ledger Setup with Blocked
      // Dimension.

      // 1. Setup: Create Dimension and Blocked it.
      Initialize;
      GeneralLedgerSetup.GET;
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.BlockDimension(Dimension);

      // 2. Exercise: Change Global Dimension 2 Code on General Ledger Setup.
      LibraryDimension.ChangeGlobalDimensions(GeneralLedgerSetup."Global Dimension 1 Code",Dimension.Code);

      // 3. Verify: Verify Shortcut Dimension 2 Code on General Ledger Setup.
      VerifyShortcutDimension(GeneralLedgerSetup."Global Dimension 1 Code",Dimension.Code);

      // 4. Teardown: Rollback the Default Global Dimension 2 Code on General Ledger Setup.
      ASSERTERROR ERROR(Rollback);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ChangeGlobalDimensionWithBlank@83();
    VAR
      Dimension@1010 : Record 348;
    BEGIN
      // Test Shortcut Dimension 1 Code and Shortcut Dimension 2 Code successfully updated after Changing Global Dimension 1 Code and
      // Global Dimension 2 code to Blank value on General Ledger Setup.

      // 1. Setup: Create Dimension.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);

      // 2. Exercise: Change Global Dimension 1 Code to New Dimension and Global Dimension 2 Code to Blank on General Ledger Setup.
      LibraryDimension.ChangeGlobalDimensions(Dimension.Code,'');

      // 3. Verify: Verify Shortcut Dimension 1 Code and Shortcut Dimension 2 Code on General Ledger Setup.
      VerifyShortcutDimension(Dimension.Code,'');

      // 4. Teardown: Rollback the Default Global Dimension 1 Code and Global Dimension 2 Code on General Ledger Setup.
      ASSERTERROR ERROR(Rollback);
    END;

    [Test]
    PROCEDURE ChangeShortcutDimension@108();
    VAR
      Dimension@1010 : Record 348;
      Dimension2@1011 : Record 348;
      GeneralLedgerSetup@1005 : Record 98;
    BEGIN
      // Test Shortcut Dimension 3 Code and Shortcut Dimension 4 Code successfully updated on General Ledger Setup.

      // 1. Setup: Create 2 Dimensions.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimension(Dimension2);

      // 2. Exercise: Change Shortcut Dimension 3 Code and Shortcut Dimension 4 Code successfully updated on General Ledger Setup.
      LibraryERM.SetShortcutDimensionCode(3,Dimension.Code);
      LibraryERM.SetShortcutDimensionCode(4,Dimension2.Code);

      // 3. Verify: Verify Shortcut Dimension 3 Code and Shortcut Dimension 4 Code on General Ledger Setup.
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.TESTFIELD("Shortcut Dimension 3 Code",Dimension.Code);
      GeneralLedgerSetup.TESTFIELD("Shortcut Dimension 4 Code",Dimension2.Code);
    END;

    [Test]
    PROCEDURE ShortcutDimensionSameGlobal@127();
    BEGIN
      // Test error occurs on updating Shortcut Dimension 3 Code same as Global Dimension 1 Code on General Ledger Setup.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Change Shortcut Dimension 3 Code on General Ledger Setup.
      ASSERTERROR LibraryERM.SetShortcutDimensionCode(3,LibraryERM.GetGlobalDimensionCode(1));
    END;

    [Test]
    PROCEDURE ShortcutDimensionSameShortcut@135();
    VAR
      Dimension@1010 : Record 348;
    BEGIN
      // Test error occurs on updating Shortcut Dimension 3 Code same as Shortcut Dimension 4 Code on General Ledger Setup.

      // 1. Setup: Create Dimension and attach as Shortcut Dimension 4 Code on General Ledger Setup.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);
      LibraryERM.SetShortcutDimensionCode(3,'');
      LibraryERM.SetShortcutDimensionCode(4,Dimension.Code);

      // 2. Exercise: Change Shortcut Dimension 3 Code on General Ledger Setup.
      ASSERTERROR LibraryERM.SetShortcutDimensionCode(3,LibraryERM.GetShortcutDimensionCode(4));
    END;

    [Test]
    PROCEDURE DeleteShortcutDimension@17();
    VAR
      Dimension@1010 : Record 348;
      GeneralLedgerSetup@1005 : Record 98;
    BEGIN
      // Test Shortcut Dimension 7 Code on General Ledger Setup after Deleting Dimension.

      // 1. Setup: Create Dimension and attach on General Ledger Setup as Shortcut Dimension 7 Code.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);
      LibraryERM.SetShortcutDimensionCode(7,Dimension.Code);

      // 2. Exercise: Delete Dimension.
      Dimension.DELETE(TRUE);

      // 3. Verify: Verify Shortcut Dimension 7 Code on General Ledger Setup.
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.TESTFIELD("Shortcut Dimension 7 Code",'');
    END;

    [Test]
    PROCEDURE DimensionWithGLBudgetName@23();
    VAR
      Dimension@1010 : Record 348;
    BEGIN
      // Test error Occurs on deleting Dimension attached on G/L Budget Name.

      // 1. Setup: Create Dimension, attach on General Ledger Setup as Shortcut Dimension 7 Code and Create New G/L Budget Name, update
      // Dimension as Budget Dimension 1 Code on it.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);
      LibraryERM.SetShortcutDimensionCode(7,Dimension.Code);
      CreateGLBudgetNameDimension(Dimension.Code);

      // 2. Exercise: Delete Dimension.
      ASSERTERROR Dimension.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE DimensionWithAnalysisView@18();
    VAR
      Dimension@1010 : Record 348;
    BEGIN
      // Test error Occurs on deleting Dimension attached on Analysis View.

      // 1. Setup: Create Dimension, attach on General Ledger Setup as Shortcut Dimension 7 Code and Create New Analysis View, update
      // Dimension as Dimension 1 Code on it.
      Initialize;
      LibraryDimension.CreateDimension(Dimension);
      LibraryERM.SetShortcutDimensionCode(7,Dimension.Code);
      CreateAnalysisViewDimension(Dimension.Code);

      // 2. Exercise: Delete Dimension.
      ASSERTERROR Dimension.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE DimensionValueWithExistingCode@44();
    VAR
      Dimension@1010 : Record 348;
      DimensionValue@1000 : Record 349;
      DimensionValueCode@1001 : Code[20];
    BEGIN
      // Test error occurs on creating Dimension Value with same code previously exist Dimension value Code.

      // 1. Setup: Create Dimension Value for any Dimension.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      DimensionValueCode := DimensionValue.Code;

      // 2. Exercise: Create Dimension Value and Rename to already exist Dimension Value code.
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      ASSERTERROR DimensionValue.RENAME(Dimension.Code,DimensionValueCode);
    END;

    [Test]
    PROCEDURE DimensionValueWithConflict@42();
    VAR
      Dimension@1010 : Record 348;
      DimensionValue@1000 : Record 349;
    BEGIN
      // Test error occurs on creating Dimension Value with Conflict keyword as Code.

      // 1. Setup: Find Dimension.
      Initialize;
      LibraryDimension.FindDimension(Dimension);

      // 2. Exercise: Create Dimension value and validate Code as Conflict keyword.
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      ASSERTERROR DimensionValue.VALIDATE(Code,'(conflict)');
    END;

    [Test]
    PROCEDURE SameDimensionValueAndCode@36();
    VAR
      Customer@1010 : Record 18;
      GenJournalLine@1012 : Record 81;
      DimensionValue@1003 : Record 349;
      DimensionSetID@1001 : Integer;
    BEGIN
      // Test Dimension on Customer Ledger Entry after Posting General Journal with Same value as Code and Dimension Code on Dimension
      // Value.

      // 1. Setup: Create Customer, Dimension, Dimension Value with Same Code as Dimension Code, General Journal with Document
      // Type Invoice for Customer and Create Dimension for General Journal Line.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateDimensionWithValue(DimensionValue);
      DimensionValue.RENAME(DimensionValue."Dimension Code",DimensionValue."Dimension Code");
      CreateJournalLineWithDimension(GenJournalLine,DimensionValue,Customer."No.");
      DimensionSetID := GenJournalLine."Dimension Set ID";

      // 2. Exercise: Post the General Journal.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify Dimension on Customer Ledger Entry.
      VerifyCustomerLedgerDimension(Customer."No.",DimensionSetID);
      VerifyDimensionSetEntry(DimensionValue."Dimension Code",DimensionValue.Code,DimensionSetID);
    END;

    [Test]
    PROCEDURE BlockedDimensionTypeStandard@53();
    VAR
      DimensionValue@1003 : Record 349;
    BEGIN
      // Test error occur on creating Dimension Set Entry with Blocked Dimension Value having Dimension Value Type Standard.
      JournalLineBlockedDimension(DimensionValue."Dimension Value Type"::Standard);
    END;

    [Test]
    PROCEDURE BlockedDimensionTypeHeading@12();
    VAR
      DimensionValue@1003 : Record 349;
    BEGIN
      // Test error occur on creating Dimension Set Entry with Blocked Dimension Value having Dimension Value Type Heading.
      JournalLineBlockedDimension(DimensionValue."Dimension Value Type"::Heading);
    END;

    [Test]
    PROCEDURE BlockedDimensionTypeTotal@13();
    VAR
      DimensionValue@1003 : Record 349;
    BEGIN
      // Test error occur on creating Dimension Set Entry with Blocked Dimension Value having Dimension Value Type Total.
      JournalLineBlockedDimension(DimensionValue."Dimension Value Type"::Total);
    END;

    [Test]
    PROCEDURE BlockedDimensionTypeBeginTotal@15();
    VAR
      DimensionValue@1003 : Record 349;
    BEGIN
      // Test error occur on creating Dimension Set Entry with Blocked Dimension Value having Dimension Value Type Begin-Total.
      JournalLineBlockedDimension(DimensionValue."Dimension Value Type"::"Begin-Total");
    END;

    [Test]
    PROCEDURE BlockedDimensionTypeEndTotal@21();
    VAR
      DimensionValue@1003 : Record 349;
    BEGIN
      // Test error occur on creating Dimension Set Entry with Blocked Dimension Value having Dimension Value Type End-Total.
      JournalLineBlockedDimension(DimensionValue."Dimension Value Type"::"End-Total");
    END;

    LOCAL PROCEDURE JournalLineBlockedDimension@35(DimensionValueType@1002 : Option);
    VAR
      Customer@1010 : Record 18;
      GenJournalLine@1012 : Record 81;
      DimensionValue@1003 : Record 349;
    BEGIN
      // 1. Setup: Create Customer, Dimension, Dimension Value, update Dimension Value Type as per parameter and Blocked it.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateDimensionWithValue(DimensionValue);
      UpdateDimensionValueWithBlock(DimensionValue,DimensionValueType);

      // 2. Exercise: Create General Journal with Dimension.
      ASSERTERROR CreateJournalLineWithDimension(GenJournalLine,DimensionValue,Customer."No.");
    END;

    [Test]
    PROCEDURE DefaultDimensionForCustomer@38();
    VAR
      Customer@1010 : Record 18;
      DefaultDimension@1002 : Record 352;
      DimensionValue@1003 : Record 349;
    BEGIN
      // Test error occur on creating Default Dimension for customer with blocked Dimension Value.

      // 1. Setup: Create Customer, Dimension, Dimension Value and Blocked it
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateDimensionWithValue(DimensionValue);
      UpdateDimensionValueWithBlock(DimensionValue,DimensionValue."Dimension Value Type"::Standard);

      // 2. Exercise: Create Default Dimension for Customer.
      ASSERTERROR LibraryDimension.CreateDefaultDimensionCustomer(
          DefaultDimension,Customer."No.",DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    [Test]
    PROCEDURE InvalidDimensionValueType@33();
    VAR
      DimensionValue@1003 : Record 349;
    BEGIN
      // Test error occur on updating wrong Dimension Value Type on Dimension Value.

      // 1. Setup: Create Dimension and Dimension Value.
      Initialize;
      CreateDimensionWithValue(DimensionValue);

      // 2. Exercise: Update Dimension Value Type as Dimension Code.
      ASSERTERROR EVALUATE(DimensionValue."Dimension Value Type",DimensionValue."Dimension Code");
    END;

    [Test]
    PROCEDURE JournalLineValueTypeHeading@29();
    VAR
      DimensionValue@1003 : Record 349;
    BEGIN
      // Test error occur on creating Dimension Set Entry with Dimension Value having Dimension Value Type as Heading.
      JournalLineWithValueType(DimensionValue."Dimension Value Type"::Heading);
    END;

    [Test]
    PROCEDURE JournalLineValueTypeTotal@24();
    VAR
      DimensionValue@1003 : Record 349;
    BEGIN
      // Test error occur on creating Dimension Set Entry with Dimension Value having Dimension Value Type as Total.
      JournalLineWithValueType(DimensionValue."Dimension Value Type"::Total);
    END;

    [Test]
    PROCEDURE JournalLineValueTypeEndTotal@26();
    VAR
      DimensionValue@1003 : Record 349;
    BEGIN
      // Test error occur on creating Dimension Set Entry with Dimension Value having Dimension Value Type as End-Total.
      JournalLineWithValueType(DimensionValue."Dimension Value Type"::"End-Total");
    END;

    LOCAL PROCEDURE JournalLineWithValueType@20(DimensionValueType@1001 : Option);
    VAR
      Customer@1010 : Record 18;
      GenJournalLine@1012 : Record 81;
      DimensionValue@1003 : Record 349;
    BEGIN
      // 1. Setup: Create Customer, Dimension, Dimension Value and update Dimension Value Type as per parameter.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateDimensionWithValue(DimensionValue);
      UpdateDimensionValueType(DimensionValue,DimensionValueType);

      // 2. Exercise: Create General Journal with Dimension.
      ASSERTERROR CreateJournalLineWithDimension(GenJournalLine,DimensionValue,Customer."No.");
    END;

    [Test]
    PROCEDURE DimensionOnCustomerLedgerEntry@4();
    VAR
      Customer@1010 : Record 18;
      GenJournalLine@1012 : Record 81;
      DimensionValue@1003 : Record 349;
      DimensionSetID@1001 : Integer;
    BEGIN
      // Test Dimension on Customer Ledger Entry after Posting General Journal with Dimension Value having Dimension Value Type as
      // Begin-Total.

      // 1. Setup: Create Customer, Dimension, Dimension Value, update Dimension Value Type as Begin-Total, General Journal with
      // Document Type Invoice for Customer and Create Dimension for General Journal Line.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateDimensionWithValue(DimensionValue);
      UpdateDimensionValueType(DimensionValue,DimensionValue."Dimension Value Type"::"Begin-Total");
      CreateJournalLineWithDimension(GenJournalLine,DimensionValue,Customer."No.");
      DimensionSetID := GenJournalLine."Dimension Set ID";

      // 2. Exercise: Post the General Journal.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 3. Verify: Verify Dimension on Customer Ledger Entry.
      VerifyCustomerLedgerDimension(Customer."No.",DimensionSetID);
    END;

    [Test]
    PROCEDURE DefaultDimensionWithHeading@55();
    VAR
      DimensionValue@1003 : Record 349;
    BEGIN
      // Test error occur on creating Default Dimension for customer with Dimension Value having Dimension Value Type as Heading.
      DefaultDimensionWithValueType(DimensionValue."Dimension Value Type"::Heading);
    END;

    [Test]
    PROCEDURE DefaultDimensionWithTotal@56();
    VAR
      DimensionValue@1003 : Record 349;
    BEGIN
      // Test error occur on creating Default Dimension for customer with Dimension Value having Dimension Value Type as Total.
      DefaultDimensionWithValueType(DimensionValue."Dimension Value Type"::Total);
    END;

    [Test]
    PROCEDURE DefaultDimensionWithEndTotal@57();
    VAR
      DimensionValue@1003 : Record 349;
    BEGIN
      // Test error occur on creating Default Dimension for customer with Dimension Value having Dimension Value Type as End-Total.
      DefaultDimensionWithValueType(DimensionValue."Dimension Value Type"::"End-Total");
    END;

    LOCAL PROCEDURE DefaultDimensionWithValueType@46(DimensionValueType@1001 : Option);
    VAR
      Customer@1010 : Record 18;
      DefaultDimension@1002 : Record 352;
      DimensionValue@1003 : Record 349;
    BEGIN
      // 1. Setup: Create Customer, Dimension, Dimension Value and update Dimension Value Type as per parameter.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateDimensionWithValue(DimensionValue);
      UpdateDimensionValueType(DimensionValue,DimensionValueType);

      // 2. Exercise: Create Default Dimension for Customer.
      ASSERTERROR LibraryDimension.CreateDefaultDimensionCustomer(
          DefaultDimension,Customer."No.",DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    [Test]
    PROCEDURE ModifyValueTypeAfterPosting@2();
    VAR
      Customer@1010 : Record 18;
      GenJournalLine@1012 : Record 81;
      DimensionValue@1003 : Record 349;
    BEGIN
      // Test error occurs on updating Dimension Value Type as Heading on Dimension Value after Posting General Journal.

      // 1. Setup: Create Customer, Dimension, Dimension Value, Create and Post General Journal with Dimension.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateDimensionWithValue(DimensionValue);
      CreateJournalLineWithDimension(GenJournalLine,DimensionValue,Customer."No.");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2. Exercise: Update Dimension Value Type as Heading on Dimension Value.
      ASSERTERROR DimensionValue.VALIDATE("Dimension Value Type",DimensionValue."Dimension Value Type"::Heading);
    END;

    [Test]
    PROCEDURE RenameDimensionValueCode@5();
    VAR
      Dimension@1010 : Record 348;
      DimensionValue@1000 : Record 349;
      DimensionValueCode@1001 : Code[20];
    BEGIN
      // Test Dimension Value Code successfully renamed.

      // 1. Setup: Create Dimension Value for any Dimension.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      DimensionValueCode :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(DimensionValue.FIELDNO(Code),DATABASE::"Dimension Value"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Dimension Value",DimensionValue.FIELDNO(Code)));

      // 2. Exercise: Rename Dimension Value Code.
      DimensionValue.RENAME(Dimension.Code,DimensionValueCode);

      // 3. Verify: Verify renamed Dimension Value Code.
      DimensionValue.TESTFIELD(Code,DimensionValueCode);
    END;

    [Test]
    PROCEDURE RenameDimensionValueName@70();
    VAR
      Dimension@1010 : Record 348;
      DimensionValue@1000 : Record 349;
      DimensionValueName@1001 : Text[50];
    BEGIN
      // Test Dimension Value Name successfully Modify.

      // 1. Setup: Create Dimension Value for any Dimension.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      DimensionValueName :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(DimensionValue.FIELDNO(Name),DATABASE::"Dimension Value"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Dimension Value",DimensionValue.FIELDNO(Name)));

      // 2. Exercise: Update Dimension Value Name.
      DimensionValue.VALIDATE(Name,DimensionValueName);
      DimensionValue.MODIFY(TRUE);

      // 3. Verify: Verify Dimension Value Name.
      DimensionValue.GET(Dimension.Code,DimensionValue.Code);
      DimensionValue.TESTFIELD(Name,DimensionValueName);
    END;

    [Test]
    PROCEDURE RenameBlockDimensionValueCode@81();
    VAR
      Dimension@1010 : Record 348;
      DimensionValue@1000 : Record 349;
      DimensionValueCode@1001 : Code[20];
    BEGIN
      // Test Dimension Value Code successfully renamed for Blocked Dimension Value.

      // 1. Setup: Create Dimension Value for any Dimension and Block it.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      UpdateDimensionValue(DimensionValue,DimensionValue."Dimension Value Type"::Standard);
      DimensionValueCode :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(DimensionValue.FIELDNO(Code),DATABASE::"Dimension Value"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Dimension Value",DimensionValue.FIELDNO(Code)));

      // 2. Exercise: Rename the Dimension Value Code.
      DimensionValue.RENAME(Dimension.Code,DimensionValueCode);

      // 3. Verify: Verify renamed Dimension Value.
      DimensionValue.TESTFIELD(Code,DimensionValueCode);
    END;

    [Test]
    PROCEDURE BlankDimensionValueCode@92();
    VAR
      Dimension@1010 : Record 348;
      DimensionValue@1000 : Record 349;
    BEGIN
      // Test error occurs on rename Dimension Value Code to Blank.

      // 1. Setup: Create Dimension Value for any Dimension.
      Initialize;
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);

      // 2. Exercise: Rename Dimension Value Code.
      ASSERTERROR DimensionValue.RENAME(Dimension.Code,'');
    END;

    [Test]
    PROCEDURE DimensionValueAfterPosting@52();
    VAR
      Customer@1010 : Record 18;
      GenJournalLine@1012 : Record 81;
      DimensionValue@1003 : Record 349;
      DimensionSetEntry@1005 : Record 480;
      GeneralLedgerSetup@1001 : Record 98;
      DimensionValueCode@1002 : Code[20];
      DimensionSetID@1004 : Integer;
    BEGIN
      // Test Dimension Value Code successfully renamed the after Posting General Journal.

      // 1. Setup: Create Customer, Dimension Value, Create and Post General Journal with Dimension.
      Initialize;
      GeneralLedgerSetup.GET;
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.CreateDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 1 Code");
      CreateJournalLineWithDimension(GenJournalLine,DimensionValue,Customer."No.");
      DimensionSetID := GenJournalLine."Dimension Set ID";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      DimensionValueCode :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(DimensionValue.FIELDNO(Code),DATABASE::"Dimension Value"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Dimension Value",DimensionValue.FIELDNO(Code)));

      // 2. Exercise: Rename Dimension Value Code.
      DimensionValue.RENAME(GeneralLedgerSetup."Global Dimension 1 Code",DimensionValueCode);

      // 3. Verify: Verify Dimension Value Code on Dimension Set Entry.
      DimensionSetEntry.SETRANGE("Dimension Code",GeneralLedgerSetup."Global Dimension 1 Code");
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,DimensionSetID);
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DimensionValueCode);
    END;

    [Test]
    PROCEDURE DeleteDimensionValue@49();
    VAR
      DimensionValue@1003 : Record 349;
      DimensionValue2@1000 : Record 349;
    BEGIN
      // Test deletion of Dimension Value.

      // 1. Setup: Create Dimension and Dimension Value.
      Initialize;
      CreateDimensionWithValue(DimensionValue);

      // 2. Exercise: Delete Dimension Value.
      DimensionValue2.GET(DimensionValue."Dimension Code",DimensionValue.Code);
      DimensionValue2.DELETE(TRUE);

      // 3. Verify: Verify Dimension Value deleted.
      Assert.IsFalse(
        DimensionValue2.GET(DimensionValue."Dimension Code",DimensionValue.Code),
        STRSUBSTNO(ExistError,DimensionValue.TABLECAPTION,DimensionValue."Dimension Code",DimensionValue.Code));
    END;

    [Test]
    PROCEDURE DeleteDefaultDimensionValue@48();
    VAR
      DimensionValue@1003 : Record 349;
      Customer@1001 : Record 18;
      DefaultDimension@1004 : Record 352;
      DimensionCode@1005 : Code[20];
    BEGIN
      // Test Default Dimension deleted on deletion of Dimension Value.

      // 1. Setup: Create Dimension, Dimension Value, Customer with Default Dimension.
      Initialize;
      CreateDimensionWithValue(DimensionValue);
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.CreateDefaultDimensionCustomer(
        DefaultDimension,Customer."No.",DimensionValue."Dimension Code",DimensionValue.Code);
      DimensionCode := DimensionValue."Dimension Code";

      // 2. Exercise: Delete Dimension Value.
      DimensionValue.DELETE(TRUE);

      // 3. Verify: Verify Default Dimension deleted.
      Assert.IsFalse(
        DefaultDimension.GET(DATABASE::Customer,Customer."No.",DimensionCode),
        STRSUBSTNO(ExistError,DefaultDimension.TABLECAPTION,DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code"));
    END;

    [Test]
    PROCEDURE DeleteDimensionValueWithEntry@45();
    VAR
      Customer@1010 : Record 18;
      GenJournalLine@1012 : Record 81;
      DimensionValue@1003 : Record 349;
    BEGIN
      // Test error occurs on deletion of Dimension Value after posting General Journal.

      // 1. Setup: Create Customer, Dimension, Dimension Value, Create and Post General Journal with Dimension.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateDimensionWithValue(DimensionValue);
      CreateJournalLineWithDimension(GenJournalLine,DimensionValue,Customer."No.");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2. Exercise: Delete Dimension Value.
      ASSERTERROR DimensionValue.DELETE(TRUE);
    END;

    [Test]
    [HandlerFunctions(SalesAnalysisbyDimMatrixPageHandler)]
    PROCEDURE SalesAnalysisDimMatrixForItemsColumnName@79();
    VAR
      ShowAsColumn@1001 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
    BEGIN
      // Check Sales Analysis by Dimensions shows correct Catpion values when Show Cloumn Name TRUE and Show as Column is Item.
      Initialize;
      EnqueueDetailAnalysisDimMatrixItem;
      CreateAndRunSalesAnalysisMatrix(ShowAsColumn::Item);
    END;

    [Test]
    [HandlerFunctions(SalesAnalysisbyDimMatrixPageHandler)]
    PROCEDURE SalesAnalysisDimMatrixForLocationsColumnName@87();
    VAR
      ShowAsColumn@1000 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
    BEGIN
      // Check Sales Analysis by Dimensions shows correct Catpion values when Show Cloumn Name TRUE and Show as Column is Location.
      Initialize;
      EnqueueDetailAnalysisDimMatrixLocation;
      CreateAndRunSalesAnalysisMatrix(ShowAsColumn::Location);
    END;

    [Test]
    [HandlerFunctions(SalesAnalysisbyDimMatrixPageHandler)]
    PROCEDURE SalesAnalysisDimMatrixForDimension1ColumnName@80();
    VAR
      GeneralLedgerSetup@1013 : Record 98;
    BEGIN
      // Check Sales Analysis by Dimensions shows correct Catpion values when Show Cloumn Name is TRUE and Column Dim. Code is Dimension 1.
      Initialize;
      GeneralLedgerSetup.GET;
      EnqueueDetailAnalysisDimMatrixDimensions(GeneralLedgerSetup."Global Dimension 1 Code");
      CreateAndRunSalesAnalysisMatrixForDimensions(GeneralLedgerSetup."Global Dimension 1 Code",1);
    END;

    [Test]
    [HandlerFunctions(SalesAnalysisbyDimMatrixPageHandler)]
    PROCEDURE SalesAnalysisDimMatrixForDimension2ColumnName@16();
    VAR
      GeneralLedgerSetup@1013 : Record 98;
    BEGIN
      // Check Sales Analysis by Dimensions shows correct Catpion values when Show Cloumn Name is TRUE and Column Dim. Code is Dimension 2.
      Initialize;
      GeneralLedgerSetup.GET;
      EnqueueDetailAnalysisDimMatrixDimensions(GeneralLedgerSetup."Global Dimension 2 Code");
      CreateAndRunSalesAnalysisMatrixForDimensions(GeneralLedgerSetup."Global Dimension 2 Code",2);
    END;

    [Test]
    [HandlerFunctions(SalesAnalysisbyDimMatrixPageHandler)]
    PROCEDURE SalesAnalysisDimMatrixForDimension3ColumnName@121();
    VAR
      GeneralLedgerSetup@1013 : Record 98;
    BEGIN
      // Check Sales Analysis by Dimensions shows correct Catpion values when Show Cloumn Name is TRUE and Column Dim. Code is Dimension 3.
      Initialize;
      GeneralLedgerSetup.GET;
      EnqueueDetailAnalysisDimMatrixDimensions(GeneralLedgerSetup."Shortcut Dimension 1 Code");
      CreateAndRunSalesAnalysisMatrixForDimensions(GeneralLedgerSetup."Shortcut Dimension 1 Code",3);
    END;

    [Test]
    [HandlerFunctions(PurchaseAnalysisbyDimMatrixPageHandler)]
    PROCEDURE PurchaseAnalysisDimMatrixForItemsColumnName@31();
    VAR
      ShowAsColumn@1001 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
    BEGIN
      // Check Purchase Analysis by Dimensions shows correct Catpion values when Show Cloumn Name TRUE and Show as Column is Item.
      Initialize;
      EnqueueDetailAnalysisDimMatrixItem;
      CreateAndRunPurchaseAnalysisMatrix(ShowAsColumn::Item);
    END;

    [Test]
    [HandlerFunctions(PurchaseAnalysisbyDimMatrixPageHandler)]
    PROCEDURE PurchaseAnalysisDimMatrixForLocationsColumnName@30();
    VAR
      ShowAsColumn@1000 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
    BEGIN
      // Check Purchase Analysis by Dimensions shows correct Catpion values when Show Cloumn Name TRUE and Show as Column is Location.
      Initialize;
      EnqueueDetailAnalysisDimMatrixLocation;
      CreateAndRunPurchaseAnalysisMatrix(ShowAsColumn::Location);
    END;

    [Test]
    [HandlerFunctions(PurchaseAnalysisbyDimMatrixPageHandler)]
    PROCEDURE PurchaseAnalysisDimMatrixForDimension1ColumnName@28();
    VAR
      GeneralLedgerSetup@1013 : Record 98;
    BEGIN
      // Check Purchase Analysis by Dimensions shows correct Catpion values when Show Cloumn Name is TRUE and Column Dim. Code is Dimension 1.
      Initialize;
      GeneralLedgerSetup.GET;
      EnqueueDetailAnalysisDimMatrixDimensions(GeneralLedgerSetup."Global Dimension 1 Code");
      CreateAndRunPurchaseAnalysisMatrixForDimensions(GeneralLedgerSetup."Global Dimension 1 Code",1);
    END;

    [Test]
    [HandlerFunctions(PurchaseAnalysisbyDimMatrixPageHandler)]
    PROCEDURE PurchaseAnalysisDimMatrixForDimension2ColumnName@27();
    VAR
      GeneralLedgerSetup@1013 : Record 98;
    BEGIN
      // Check Purchase Analysis by Dimensions shows correct Catpion values when Show Cloumn Name is TRUE and Column Dim. Code is Dimension 2.
      Initialize;
      GeneralLedgerSetup.GET;
      EnqueueDetailAnalysisDimMatrixDimensions(GeneralLedgerSetup."Global Dimension 2 Code");
      CreateAndRunPurchaseAnalysisMatrixForDimensions(GeneralLedgerSetup."Global Dimension 2 Code",2);
    END;

    [Test]
    [HandlerFunctions(PurchaseAnalysisbyDimMatrixPageHandler)]
    PROCEDURE PurchaseAnalysisDimMatrixForDimension3ColumnName@122();
    VAR
      GeneralLedgerSetup@1013 : Record 98;
    BEGIN
      // Check Purchase Analysis by Dimensions shows correct Catpion values when Show Cloumn Name is TRUE and Column Dim. Code is Dimension 3.
      Initialize;
      GeneralLedgerSetup.GET;
      EnqueueDetailAnalysisDimMatrixDimensions(GeneralLedgerSetup."Shortcut Dimension 1 Code");
      CreateAndRunPurchaseAnalysisMatrixForDimensions(GeneralLedgerSetup."Shortcut Dimension 1 Code",3);
    END;

    [Test]
    PROCEDURE PKRangeWhenMatrixCurrentSetLengthGreaterThanOne@63();
    VAR
      Item@1001 : Record 27;
      MatrixManagement@1000 : Codeunit 9200;
      RecRef@1003 : RecordRef;
      PkRange@1002 : Text[100];
      LastItemCounter@1004 : Integer;
      ItemNo@1005 : Code[20];
    BEGIN
      // Verify PKRange when Matrix Current Set Length Greater than one.

      // Setup: Create Multiple Items.
      Initialize;
      LastItemCounter := LibraryRandom.RandIntInRange(3,5);
      ItemNo := CreateMultipleItems(Item,LastItemCounter);
      RecRef.GETTABLE(Item);

      // Exercise: Get Pk Range from MatrixManagement.
      PkRange := MatrixManagement.GetPKRange(RecRef,Item.FIELDNO("No."),ReturnPkFirst(ItemNo),LastItemCounter - 1);

      // Verify: Verify PKRange when Matrix Current Set Length Greater than one.
      Assert.IsTrue(PkRange = STRSUBSTNO(PKRangeMsg,ItemNo,Item."No."),'NotCorrect');
    END;

    [Test]
    PROCEDURE PKRangeWhenMatrixCurrentSetLengthIsOne@78();
    VAR
      Item@1005 : Record 27;
      MatrixManagement@1003 : Codeunit 9200;
      RecRef@1001 : RecordRef;
      PkRange@1002 : Text[100];
      ItemNo@1000 : Code[20];
    BEGIN
      // Verify PKRange when Matrix Current Set Length is one.

      // Setup: Create Multiple Items.
      Initialize;
      ItemNo := CreateMultipleItems(Item,LibraryRandom.RandIntInRange(3,5));
      RecRef.GETTABLE(Item);

      // Exercise: Get Pk Range from MatrixManagement.
      PkRange := MatrixManagement.GetPKRange(RecRef,Item.FIELDNO("No."),ReturnPkFirst(ItemNo),1);

      // Verify: Verify PKRange when Matrix Current Set Length is one.
      Assert.IsTrue(PkRange = ItemNo,'NotCorrect');
    END;

    [Test]
    PROCEDURE PKRangeWhenMatrixCurrentSetLengthIsZero@91();
    VAR
      Item@1005 : Record 27;
      MatrixManagement@1003 : Codeunit 9200;
      RecRef@1001 : RecordRef;
      PkRange@1002 : Text[100];
      ItemNo@1000 : Code[20];
    BEGIN
      // Verify PKRange when Matrix Current Set Length is Zero.

      // Setup: Create Multiple Items.
      Initialize;
      ItemNo := CreateMultipleItems(Item,LibraryRandom.RandIntInRange(3,5));
      RecRef.GETTABLE(Item);

      // Exercise: Get Pk Range from MatrixManagement.
      PkRange := MatrixManagement.GetPKRange(RecRef,Item.FIELDNO("No."),ReturnPkFirst(ItemNo),0);

      // Verify: Verify PKRange when Matrix Current Set Length Zero.
      Assert.IsTrue(PkRange = STRSUBSTNO(PKRangeMsg,ItemNo,ItemNo),'NotCorrect');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ChangeGlobalDimensionOnItemBudgetEntry@25();
    VAR
      Item@1004 : Record 27;
      DefaultDimension@1003 : Record 352;
      GeneralLedgerSetup@1002 : Record 98;
      ItemBudgetEntry@1000 : Record 7134;
      ItemBudgetName@1007 : Record 7132;
      DimensionValue@1001 : Record 349;
    BEGIN
      // Test changing of the global dimensions on ItemBudgetEntry.

      // 1. Setup: Find an item, valid budget name and valid dimension value for Global Dimension 2.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateItemWithDimension(DefaultDimension,Item."No.");
      ItemBudgetName.SETRANGE("Analysis Area",ItemBudgetName."Analysis Area"::Sales);
      ItemBudgetName.FINDFIRST;
      GeneralLedgerSetup.GET;
      LibraryDimension.FindDimensionValue(DimensionValue,GeneralLedgerSetup."Global Dimension 2 Code");

      // 2. Create a budget item entry
      LibraryInventory.CreateItemBudgetEntry(
        ItemBudgetEntry,ItemBudgetEntry."Analysis Area"::Sales,ItemBudgetName.Name,WORKDATE,Item."No.");
      ItemBudgetEntry.VALIDATE("Global Dimension 2 Code",DimensionValue.Code);
      ItemBudgetEntry.MODIFY(TRUE);

      // 3. Exercise: Change Global Dimension 2 Code on General Ledger Setup.
      GeneralLedgerSetup.GET;
      LibraryDimension.ChangeGlobalDimensions(GeneralLedgerSetup."Global Dimension 1 Code",DefaultDimension."Dimension Code");

      // 4. Verify: Verify Global Dimension 2 Code on Item Budget is empty.
      ItemBudgetEntry.GET(ItemBudgetEntry."Entry No.");
      ItemBudgetEntry.TESTFIELD("Global Dimension 2 Code",'');

      // 5. Teardown: Rollback the Default Global Dimension 2 Code on General Ledger Setup.
      ASSERTERROR ERROR(Rollback);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ChangeGlobalDimensionOnCustLedgEntry@66();
    VAR
      NewDimValue@1003 : Record 349;
      OldDimValue@1004 : Record 349;
      CustLedgEntry@1001 : Record 21;
    BEGIN
      // Test changing of the global dimensions on Customer Ledger Entry.

      // 1. Setup & Exercise: Create a customer ledger entry with old a new Global Dimension 1 Code.
      Initialize;
      InitExistingAndNewDimensions(OldDimValue,NewDimValue,LibraryERM.GetGlobalDimensionCode(1));
      CreateCustLedgEntry(CustLedgEntry,OldDimValue,NewDimValue);
      LibraryDimension.ChangeGlobalDimensions(NewDimValue."Dimension Code",LibraryERM.GetGlobalDimensionCode(2));

      // 2. Verify: Verify Global Dimension 1 Code on Customer Ledger Entry.
      CustLedgEntry.FIND;
      Assert.AreEqual(
        NewDimValue.Code,CustLedgEntry."Global Dimension 1 Code",
        STRSUBSTNO(WrongValueErr,CustLedgEntry.FIELDCAPTION("Global Dimension 1 Code"),CustLedgEntry.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ChangeGlobalDimensionOnVendLedgEntry@69();
    VAR
      NewDimValue@1002 : Record 349;
      OldDimValue@1001 : Record 349;
      VendLedgEntry@1000 : Record 25;
    BEGIN
      // Test changing of the global dimensions on Customer Ledger Entry.

      // 1. Setup & Exercise: Create a customer ledger entry with old a new Global Dimension 1 Code.
      Initialize;
      InitExistingAndNewDimensions(OldDimValue,NewDimValue,LibraryERM.GetGlobalDimensionCode(1));
      CreateVendLedgEntry(VendLedgEntry,OldDimValue,NewDimValue);
      LibraryDimension.ChangeGlobalDimensions(NewDimValue."Dimension Code",LibraryERM.GetGlobalDimensionCode(2));

      // 2. Verify: Verify Global Dimension 1 Code on Customer Ledger Entry.
      VendLedgEntry.FIND;
      Assert.AreEqual(
        NewDimValue.Code,VendLedgEntry."Global Dimension 1 Code",
        STRSUBSTNO(WrongValueErr,VendLedgEntry.FIELDCAPTION("Global Dimension 1 Code"),VendLedgEntry.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE GLSetupIsNotClearedAfterRunRepUsingInitializeRequest@7();
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      Dimension@1001 : Record 348;
      ChangeGlobalDimensions@1000 : Report 83;
    BEGIN
      // [SCENARIO 203076] GLSetup is not cleared after run REP83 "Change Global Dimensions" using InitializeRequest() without request page
      Initialize;
      LibraryDimension.CreateDimension(Dimension);

      // [GIVEN] GLSetup with "LCY Code" = "GBP", "Global Dimension 1 Code" = "DEPARTMENT", "Global Dimension 2 Code" = "PROJECT"
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.TESTFIELD("LCY Code");
      GeneralLedgerSetup.TESTFIELD("Global Dimension 1 Code");
      GeneralLedgerSetup.TESTFIELD("Global Dimension 2 Code");

      // [WHEN] Run REP83 "Change Global Dimensions" using InitializeRequest('NEWDIM','NEWDIM') without request page
      CLEAR(ChangeGlobalDimensions);
      ChangeGlobalDimensions.InitializeRequest(Dimension.Code,Dimension.Code);
      ChangeGlobalDimensions.USEREQUESTPAGE(FALSE);
      ChangeGlobalDimensions.RUN;

      // [THEN] GLSetup has "LCY Code" = "GBP", "Global Dimension 1 Code" = "NEWDIM", "Global Dimension 2 Code" = "NEWDIM"
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.TESTFIELD("LCY Code");
      GeneralLedgerSetup.TESTFIELD("Global Dimension 1 Code",Dimension.Code);
      GeneralLedgerSetup.TESTFIELD("Global Dimension 2 Code",Dimension.Code);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
    END;

    [Normal]
    LOCAL PROCEDURE ApplyAndPostCustomerEntry@32(DocumentNo@1002 : Code[20];AmountToApply@1003 : Decimal);
    VAR
      CustLedgerEntry@1000 : Record 21;
      CustLedgerEntry2@1004 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,DocumentNo);
      LibraryERM.SetApplyCustomerEntry(CustLedgerEntry,AmountToApply);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry2,CustLedgerEntry2."Document Type"::Payment,DocumentNo);
      CustLedgerEntry2.CALCFIELDS("Remaining Amount");
      CustLedgerEntry2.VALIDATE("Amount to Apply",CustLedgerEntry2."Remaining Amount");
      CustLedgerEntry2.MODIFY(TRUE);

      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry2);
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry);
    END;

    [Normal]
    LOCAL PROCEDURE ApplyAndPostVendorEntry@14(DocumentNo@1002 : Code[20];AmountToApply@1003 : Decimal);
    VAR
      VendorLedgerEntry@1000 : Record 25;
      VendorLedgerEntry2@1001 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,DocumentNo);
      LibraryERM.SetApplyVendorEntry(VendorLedgerEntry,AmountToApply);
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry2,VendorLedgerEntry2."Document Type"::Payment,DocumentNo);
      VendorLedgerEntry2.CALCFIELDS("Remaining Amount");
      VendorLedgerEntry2.VALIDATE("Amount to Apply",VendorLedgerEntry2."Remaining Amount");
      VendorLedgerEntry2.MODIFY(TRUE);

      LibraryERM.SetAppliestoIdVendor(VendorLedgerEntry2);
      LibraryERM.PostVendLedgerApplication(VendorLedgerEntry);
    END;

    LOCAL PROCEDURE InitExistingAndNewDimensions@67(VAR OldDimValue@1000 : Record 349;VAR NewDimValue@1001 : Record 349;OldDimensionCode@1002 : Code[20]);
    VAR
      NewDimension@1003 : Record 348;
    BEGIN
      LibraryDimension.FindDimensionValue(OldDimValue,OldDimensionCode);
      LibraryDimension.CreateDimension(NewDimension);
      LibraryDimension.CreateDimensionValue(NewDimValue,NewDimension.Code);
    END;

    LOCAL PROCEDURE CreateMultipleItems@61(VAR Item@1000 : Record 27;CounterLoop@1002 : Integer) ItemNo : Code[20];
    VAR
      LibraryInventory@1003 : Codeunit 132201;
      Counter@1001 : Integer;
    BEGIN
      FOR Counter := 1 TO CounterLoop DO BEGIN
        LibraryInventory.CreateItem(Item);
        IF Counter = 1 THEN
          ItemNo := Item."No.";
      END;
      EXIT(ItemNo);
    END;

    LOCAL PROCEDURE CreateAndRunSalesAnalysisMatrix@100(ShowAsColumn@1000 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3');
    VAR
      SalesAnalysisbyDimensions@1002 : TestPage 7158;
    BEGIN
      CreateSalesItemAnalysisView(SalesAnalysisbyDimensions,'',0);
      SetParameterForSalesAnalysisDimension(SalesAnalysisbyDimensions,ShowAsColumn);
      SalesAnalysisbyDimensions.ShowColumnName.SETVALUE(TRUE);
      SalesAnalysisbyDimensions.ShowMatrix_Process.INVOKE;
    END;

    LOCAL PROCEDURE CreateAndRunSalesAnalysisMatrixForDimensions@82(DimensionValue@1000 : Code[20];DimCode@1007 : Integer);
    VAR
      SalesAnalysisbyDimensions@1001 : TestPage 7158;
      ShowAsColumn@1002 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
    BEGIN
      CreateSalesItemAnalysisView(SalesAnalysisbyDimensions,DimensionValue,DimCode);
      SalesAnalysisbyDimensions.LineDimCode.SETVALUE(ShowAsColumn::Location);
      SalesAnalysisbyDimensions.ColumnDimCode.SETVALUE(DimensionValue);
      SalesAnalysisbyDimensions.ShowColumnName.SETVALUE(TRUE);
      SalesAnalysisbyDimensions.ShowMatrix_Process.INVOKE;
    END;

    LOCAL PROCEDURE CreateAndRunPurchaseAnalysisMatrix@54(ShowAsColumn@1000 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3');
    VAR
      PurchaseAnalysisbyDimensions@1002 : TestPage 7157;
    BEGIN
      CreatePurchaseItemAnalysisView(PurchaseAnalysisbyDimensions,'',0);
      SetParameterForPurchaseAnalysisDimension(PurchaseAnalysisbyDimensions,ShowAsColumn);
      PurchaseAnalysisbyDimensions.ShowColumnName.SETVALUE(TRUE);
      PurchaseAnalysisbyDimensions.ShowMatrix.INVOKE;
    END;

    LOCAL PROCEDURE CreateAndRunPurchaseAnalysisMatrixForDimensions@40(DimensionValue@1000 : Code[20];DimCode@1003 : Integer);
    VAR
      PurchaseAnalysisbyDimensions@1001 : TestPage 7157;
      ShowAsColumn@1002 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3';
    BEGIN
      CreatePurchaseItemAnalysisView(PurchaseAnalysisbyDimensions,DimensionValue,DimCode);
      PurchaseAnalysisbyDimensions.LineDimCode.SETVALUE(ShowAsColumn::Location);
      PurchaseAnalysisbyDimensions.ColumnDimCode.SETVALUE(DimensionValue);
      PurchaseAnalysisbyDimensions.ShowColumnName.SETVALUE(TRUE);
      PurchaseAnalysisbyDimensions.ShowMatrix.INVOKE;
    END;

    LOCAL PROCEDURE CreateAnalysisViewDimension@71(Dimension1Code@1000 : Code[20]);
    VAR
      AnalysisView@1001 : Record 363;
    BEGIN
      LibraryERM.CreateAnalysisView(AnalysisView);
      AnalysisView.VALIDATE("Dimension 1 Code",Dimension1Code);
      AnalysisView.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithDimension@47(VAR DefaultDimension@1000 : Record 352);
    VAR
      Customer@1002 : Record 18;
      Dimension@1001 : Record 348;
      DimensionValue@1003 : Record 349;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,Customer."No.",Dimension.Code,DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateDimensionWithValue@235(VAR DimensionValue@1000 : Record 349);
    VAR
      Dimension@1001 : Record 348;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
    END;

    LOCAL PROCEDURE CreateGLBudgetNameDimension@19(BudgetDimension1Code@1000 : Code[20]);
    VAR
      GLBudgetName@1001 : Record 95;
    BEGIN
      LibraryERM.CreateGLBudgetName(GLBudgetName);
      GLBudgetName.VALIDATE("Budget Dimension 1 Code",BudgetDimension1Code);
      GLBudgetName.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@50(VAR GenJournalLine@1003 : Record 81;GenJournalBatch@1002 : Record 232;DocumentType@1000 : Option;AccountType@1005 : Option;AccountNo@1004 : Code[20];Amount@1006 : Decimal);
    VAR
      GLAccount@1007 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLines@136(VAR GenJournalLine@1000 : Record 81;AccountType@1003 : Option;AccountNo@1001 : Code[20];Amount@1004 : Decimal);
    VAR
      GenJournalBatch@1002 : Record 232;
    BEGIN
      FindJournalBatchAndTemplate(GenJournalBatch);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,AccountType,AccountNo,Amount);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Payment,AccountType,AccountNo,-Amount);
    END;

    LOCAL PROCEDURE CreateItemWithDimension@41(VAR DefaultDimension@1000 : Record 352;ItemNo@1003 : Code[20]);
    VAR
      DimensionValue@1002 : Record 349;
    BEGIN
      CreateDimensionWithValue(DimensionValue);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,ItemNo,DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateJournalLineWithDimension@51(VAR GenJournalLine@1003 : Record 81;DimensionValue@1000 : Record 349;AccountNo@1004 : Code[20]);
    VAR
      GenJournalBatch@1002 : Record 232;
    BEGIN
      FindJournalBatchAndTemplate(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,AccountNo,
        LibraryRandom.RandDec(100,2));  // Use Random because value is not important.
      GenJournalLine.VALIDATE(
        "Dimension Set ID",
        LibraryDimension.CreateDimSet(GenJournalLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code));
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesItemAnalysisView@72(VAR SalesAnalysisbyDimensions@1001 : TestPage 7158;DimensionCode@1002 : Code[20];DimCode@1004 : Integer);
    VAR
      ItemAnalysisView@1000 : Record 7152;
      AnalysisViewListSales@1003 : TestPage 9371;
    BEGIN
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Sales);
      UpdateDimensionCodeOnItemAnalysisView(ItemAnalysisView,DimCode,DimensionCode);
      AnalysisViewListSales.OPENEDIT;
      AnalysisViewListSales.FILTER.SETFILTER(Code,ItemAnalysisView.Code);
      SalesAnalysisbyDimensions.TRAP;
      AnalysisViewListSales.EditAnalysisView.INVOKE;
    END;

    LOCAL PROCEDURE CreatePurchaseItemAnalysisView@86(VAR PurchaseAnalysisbyDimensions@1001 : TestPage 7157;DimensionCode@1002 : Code[20];DimCode@1004 : Integer);
    VAR
      ItemAnalysisView@1000 : Record 7152;
      AnalysisViewListPurchase@1003 : TestPage 9370;
    BEGIN
      LibraryERM.CreateItemAnalysisView(ItemAnalysisView,ItemAnalysisView."Analysis Area"::Purchase);
      UpdateDimensionCodeOnItemAnalysisView(ItemAnalysisView,DimCode,DimensionCode);
      AnalysisViewListPurchase.OPENEDIT;
      AnalysisViewListPurchase.FILTER.SETFILTER(Code,ItemAnalysisView.Code);
      PurchaseAnalysisbyDimensions.TRAP;
      AnalysisViewListPurchase.EditAnalysisView.INVOKE;
    END;

    LOCAL PROCEDURE CreateVendorWithDimension@6() : Code[20];
    VAR
      Vendor@1002 : Record 23;
      Dimension@1000 : Record 348;
      DimensionValue@1003 : Record 349;
      DefaultDimension@1004 : Record 352;
      LibraryPurchase@1005 : Codeunit 130512;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionVendor(DefaultDimension,Vendor."No.",Dimension.Code,DimensionValue.Code);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateCustLedgEntry@68(VAR CustLedgEntry@1000 : Record 21;OldDimValue@1002 : Record 349;NewDimValue@1004 : Record 349);
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        INIT;
        RecRef.GETTABLE(CustLedgEntry);
        "Entry No." :=
          LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Entry No."));
        "Global Dimension 1 Code" := OldDimValue.Code;
        "Dimension Set ID" :=
          LibraryDimension.CreateDimSet(
            LibraryDimension.CreateDimSet(0,OldDimValue."Dimension Code",OldDimValue.Code),
            NewDimValue."Dimension Code",NewDimValue.Code);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateVendLedgEntry@101(VAR VendLedgEntry@1000 : Record 25;OldDimValue@1003 : Record 349;NewDimValue@1002 : Record 349);
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      WITH VendLedgEntry DO BEGIN
        INIT;
        RecRef.GETTABLE(VendLedgEntry);
        "Entry No." :=
          LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Entry No."));
        "Global Dimension 1 Code" := OldDimValue.Code;
        "Dimension Set ID" :=
          LibraryDimension.CreateDimSet(
            LibraryDimension.CreateDimSet(0,OldDimValue."Dimension Code",OldDimValue.Code),
            NewDimValue."Dimension Code",NewDimValue.Code);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE EnqueueDetailAnalysisDimMatrixItem@98();
    VAR
      Item@1000 : Record 27;
      TableCounter@1001 : Integer;
      Counter@1002 : Integer;
    BEGIN
      Item.FINDSET;
      IF Item.COUNT > 12 THEN
        TableCounter := LibraryRandom.RandInt(12)
      ELSE
        TableCounter := Item.COUNT;
      LibraryVariableStorage.Enqueue(TableCounter);
      FOR Counter := 1 TO TableCounter DO BEGIN
        LibraryVariableStorage.Enqueue(Counter);
        LibraryVariableStorage.Enqueue(Item.Description);
        Item.NEXT;
      END;
    END;

    LOCAL PROCEDURE EnqueueDetailAnalysisDimMatrixLocation@90();
    VAR
      Location@1004 : Record 14;
      TableCounter@1001 : Integer;
      Counter@1002 : Integer;
    BEGIN
      Location.FINDSET;
      IF Location.COUNT > 12 THEN
        TableCounter := LibraryRandom.RandInt(12)
      ELSE
        TableCounter := Location.COUNT;
      LibraryVariableStorage.Enqueue(TableCounter);
      FOR Counter := 1 TO TableCounter DO BEGIN
        LibraryVariableStorage.Enqueue(Counter);
        LibraryVariableStorage.Enqueue(Location.Name);
        Location.NEXT;
      END;
    END;

    LOCAL PROCEDURE EnqueueDetailAnalysisDimMatrixDimensions@97(DimensionCode@1001 : Code[20]);
    VAR
      DimensionValue@1000 : Record 349;
      TableCounter@1002 : Integer;
      Counter@1003 : Integer;
    BEGIN
      DimensionValue.SETFILTER("Dimension Code",DimensionCode);
      DimensionValue.FINDSET;
      IF DimensionValue.COUNT > 12 THEN
        TableCounter := LibraryRandom.RandInt(12)
      ELSE
        TableCounter := DimensionValue.COUNT;
      LibraryVariableStorage.Enqueue(TableCounter);
      FOR Counter := 1 TO TableCounter DO BEGIN
        LibraryVariableStorage.Enqueue(Counter);
        LibraryVariableStorage.Enqueue(DimensionValue.Name);
        DimensionValue.NEXT;
      END;
    END;

    LOCAL PROCEDURE FindJournalBatchAndTemplate@94(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      GenJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ReturnPkFirst@62(ItemNo@1000 : Code[20]) PkFirst : Text[100];
    VAR
      Item@1001 : Record 27;
      RecRef@1002 : RecordRef;
    BEGIN
      Item.GET(ItemNo);
      RecRef.GETTABLE(Item);
      RecRef.GET(RecRef.RECORDID);
      PkFirst := RecRef.GETPOSITION;
      EXIT(PkFirst);
    END;

    LOCAL PROCEDURE SetParameterForSalesAnalysisDimension@103(VAR SalesAnalysisbyDimensions@1001 : TestPage 7158;LineDimOption@1000 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3');
    BEGIN
      IF LineDimOption = LineDimOption::Item THEN BEGIN
        SalesAnalysisbyDimensions.LineDimCode.SETVALUE(LineDimOption::Location);
        SalesAnalysisbyDimensions.ColumnDimCode.SETVALUE(LineDimOption::Item);
      END ELSE
        IF LineDimOption = LineDimOption::Location THEN BEGIN
          SalesAnalysisbyDimensions.LineDimCode.SETVALUE(LineDimOption::Item);
          SalesAnalysisbyDimensions.ColumnDimCode.SETVALUE(LineDimOption::Location);
        END;
    END;

    LOCAL PROCEDURE SetParameterForPurchaseAnalysisDimension@60(VAR PurchaseAnalysisbyDimensions@1001 : TestPage 7157;LineDimOption@1000 : 'Item,Period,Location,Dimension 1,Dimension 2,Dimension 3');
    BEGIN
      IF LineDimOption = LineDimOption::Item THEN BEGIN
        PurchaseAnalysisbyDimensions.LineDimCode.SETVALUE(LineDimOption::Location);
        PurchaseAnalysisbyDimensions.ColumnDimCode.SETVALUE(LineDimOption::Item);
      END ELSE
        IF LineDimOption = LineDimOption::Location THEN BEGIN
          PurchaseAnalysisbyDimensions.LineDimCode.SETVALUE(LineDimOption::Item);
          PurchaseAnalysisbyDimensions.ColumnDimCode.SETVALUE(LineDimOption::Location);
        END;
    END;

    LOCAL PROCEDURE UpdateDimensionValue@10(VAR DimensionValue@1000 : Record 349;DimensionValueType@1001 : Option);
    BEGIN
      DimensionValue.VALIDATE("Dimension Value Type",DimensionValueType);
      LibraryDimension.BlockDimensionValue(DimensionValue);
    END;

    LOCAL PROCEDURE UpdateDimensionValueType@77(VAR DimensionValue@1000 : Record 349;DimensionValueType@1001 : Option);
    BEGIN
      DimensionValue.VALIDATE("Dimension Value Type",DimensionValueType);
      DimensionValue.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDimensionValueWithBlock@34(VAR DimensionValue@1000 : Record 349;DimensionValueType@1001 : Option);
    BEGIN
      DimensionValue.VALIDATE("Dimension Value Type",DimensionValueType);
      LibraryDimension.BlockDimensionValue(DimensionValue);
    END;

    LOCAL PROCEDURE UpdateDimensionCodeOnItemAnalysisView@115(VAR ItemAnalysisView@1000 : Record 7152;DimCode@1001 : Integer;DimensionCode@1002 : Code[20]);
    BEGIN
      CASE DimCode OF
        1:
          BEGIN
            ItemAnalysisView.VALIDATE("Dimension 1 Code",DimensionCode);
            ItemAnalysisView.MODIFY(TRUE);
          END;
        2:
          BEGIN
            ItemAnalysisView.VALIDATE("Dimension 2 Code",DimensionCode);
            ItemAnalysisView.MODIFY(TRUE);
          END;
        3:
          BEGIN
            ItemAnalysisView.VALIDATE("Dimension 3 Code",DimensionCode);
            ItemAnalysisView.MODIFY(TRUE);
          END;
      END;
    END;

    LOCAL PROCEDURE VerifyAppliedEntriesDimension@118(DocumentNo@1003 : Code[20];DimensionSetID@1000 : Integer);
    VAR
      GLEntry@1001 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
      REPEAT
        GLEntry.TESTFIELD("Dimension Set ID",DimensionSetID);
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyCustomerLedgerDimension@323(CustomerNo@1000 : Code[20];DimensionSetID@1002 : Integer);
    VAR
      CustLedgerEntry@1001 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.TESTFIELD("Dimension Set ID",DimensionSetID);
    END;

    LOCAL PROCEDURE VerifyDimensionSetEntry@336(DimensionCode@1000 : Code[20];DimensionValueCode@1001 : Code[20];DimensionSetID@1002 : Integer);
    VAR
      DimensionSetEntry@1003 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Code",DimensionCode);
      LibraryDimension.FindDimensionSetEntry(DimensionSetEntry,DimensionSetID);
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DimensionValueCode);
    END;

    LOCAL PROCEDURE VerifyShortcutDimension@65(ShortcutDimension1Code@1001 : Code[20];ShortcutDimension2Code@1002 : Code[20]);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.TESTFIELD("Shortcut Dimension 1 Code",ShortcutDimension1Code);
      GeneralLedgerSetup.TESTFIELD("Shortcut Dimension 2 Code",ShortcutDimension2Code);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@37(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@11(Message@1000 : Text[1024]);
    BEGIN
      // Just for Handle the Message.
    END;

    [ModalPageHandler]
    PROCEDURE SalesAnalysisbyDimMatrixPageHandler@93(VAR SalesAnalysisbyDimMatrix@1000 : TestPage 9227);
    VAR
      ColumnNo@1003 : ARRAY [12] OF Variant;
      Caption@1004 : ARRAY [12] OF Variant;
      RecCounter@1002 : Variant;
      ColumnNoInt@1005 : ARRAY [12] OF Integer;
      CounterInt@1007 : Integer;
      Counter@1001 : Integer;
    BEGIN
      LibraryVariableStorage.Dequeue(RecCounter);
      CounterInt := RecCounter;
      FOR Counter := 1 TO CounterInt DO BEGIN
        LibraryVariableStorage.Dequeue(ColumnNo[Counter]);
        LibraryVariableStorage.Dequeue(Caption[Counter]);
        ColumnNoInt[Counter] := ColumnNo[Counter];
      END;
      CASE ColumnNoInt[Counter] OF
        1:
          Assert.AreEqual(Caption[1],SalesAnalysisbyDimMatrix.Field1.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[1]));
        2:
          Assert.AreEqual(Caption[2],SalesAnalysisbyDimMatrix.Field2.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[2]));
        3:
          Assert.AreEqual(Caption[3],SalesAnalysisbyDimMatrix.Field3.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[3]));
        4:
          Assert.AreEqual(Caption[4],SalesAnalysisbyDimMatrix.Field4.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[4]));
        5:
          Assert.AreEqual(Caption[5],SalesAnalysisbyDimMatrix.Field5.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[5]));
        6:
          Assert.AreEqual(Caption[6],SalesAnalysisbyDimMatrix.Field6.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[6]));
        7:
          Assert.AreEqual(Caption[7],SalesAnalysisbyDimMatrix.Field7.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[7]));
        8:
          Assert.AreEqual(Caption[8],SalesAnalysisbyDimMatrix.Field8.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[8]));
        9:
          Assert.AreEqual(Caption[9],SalesAnalysisbyDimMatrix.Field9.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[9]));
        10:
          Assert.AreEqual(Caption[10],SalesAnalysisbyDimMatrix.Field10.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[10]));
        11:
          Assert.AreEqual(Caption[11],SalesAnalysisbyDimMatrix.Field11.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[11]));
        12:
          Assert.AreEqual(Caption[12],SalesAnalysisbyDimMatrix.Field12.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[12]));
        ELSE
          ERROR(InvalidColumnIndexErr)
      END
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseAnalysisbyDimMatrixPageHandler@58(VAR PurchAnalysisbyDimMatrix@1000 : TestPage 9225);
    VAR
      ColumnNo@1003 : ARRAY [12] OF Variant;
      Caption@1004 : ARRAY [12] OF Variant;
      RecCounter@1002 : Variant;
      ColumnNoInt@1005 : ARRAY [12] OF Integer;
      CounterInt@1007 : Integer;
      Counter@1001 : Integer;
    BEGIN
      LibraryVariableStorage.Dequeue(RecCounter);
      CounterInt := RecCounter;
      FOR Counter := 1 TO CounterInt DO BEGIN
        LibraryVariableStorage.Dequeue(ColumnNo[Counter]);
        LibraryVariableStorage.Dequeue(Caption[Counter]);
        ColumnNoInt[Counter] := ColumnNo[Counter];
      END;
      CASE ColumnNoInt[Counter] OF
        1:
          Assert.AreEqual(Caption[1],PurchAnalysisbyDimMatrix.Field1.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[1]));
        2:
          Assert.AreEqual(Caption[2],PurchAnalysisbyDimMatrix.Field2.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[2]));
        3:
          Assert.AreEqual(Caption[3],PurchAnalysisbyDimMatrix.Field3.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[3]));
        4:
          Assert.AreEqual(Caption[4],PurchAnalysisbyDimMatrix.Field4.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[4]));
        5:
          Assert.AreEqual(Caption[5],PurchAnalysisbyDimMatrix.Field5.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[5]));
        6:
          Assert.AreEqual(Caption[6],PurchAnalysisbyDimMatrix.Field6.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[6]));
        7:
          Assert.AreEqual(Caption[7],PurchAnalysisbyDimMatrix.Field7.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[7]));
        8:
          Assert.AreEqual(Caption[8],PurchAnalysisbyDimMatrix.Field8.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[8]));
        9:
          Assert.AreEqual(Caption[9],PurchAnalysisbyDimMatrix.Field9.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[9]));
        10:
          Assert.AreEqual(Caption[10],PurchAnalysisbyDimMatrix.Field10.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[10]));
        11:
          Assert.AreEqual(Caption[11],PurchAnalysisbyDimMatrix.Field11.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[11]));
        12:
          Assert.AreEqual(Caption[12],PurchAnalysisbyDimMatrix.Field12.CAPTION,STRSUBSTNO(WrongCaptionErr,ColumnNoInt[12]));
        ELSE
          ERROR(InvalidColumnIndexErr)
      END
    END;

    BEGIN
    {
      // [FEATURE] [Dimension]
      Unsupported version tags:
      NA: Unable to Compile
      ES: Unable to Execute
      DE: Unable to Execute

      Test for Dimension on General Documents:
        1. Test Dimension on G/L Entry after Apply Invoice on Payment for Customer.
        2. Test Dimension on G/L Entry after Apply Invoice on Payment for Vendor.
        3. Test Global Dimension on Item after Change the Global Dimension.
        4. Test Default Dimension creation with new Dimension.
        5. Test Default Dimension deleted on deletion of Dimension.
        6. Test Shortcut Dimension 2 Code successfully updated after Changing Global Dimension 2 Code on General Ledger Setup with Blocked
           Dimension.
        7. Test Shortcut Dimension 1 Code and Shortcut Dimension 2 Code successfully updated after Changing Global Dimension 1 Code and
           Global Dimension 2 code to Blank value on General Ledger Setup.
        8. Test Shortcut Dimension 3 Code and Shortcut Dimension 4 Code successfully updated on General Ledger Setup.
        9. Test on updating Shortcut Dimension 3 Code same as Global Dimension 1 Code on General Ledger Setup error occurs.
       10. Test on updating Shortcut Dimension 3 Code same as Shortcut Dimension 4 Code on General Ledger Setup error occurs.
       11. Test Shortcut Dimension 7 Code on General Ledger Setup after Deleting Dimension.
       12. Test on deleting Dimension attached on G/L Budget Name error occurs.
       13. Test on deleting Dimension attached on Analysis View error occurs.
       14. Test on creating Dimension Value with same code previously exist Dimension value Code error occurs.
       15. Test on creating Dimension Value with Conflict keyword as Code error occurs.
       16. Test Dimension on Customer Ledger Entry after Posting General Journal with Same value as Code and Dimension Code on Dimension
           Value.
       17. Test on creating Dimension Set Entry with Blocked Dimension Value having Dimension Value Type Standard error occur.
       18. Test on creating Dimension Set Entry with Blocked Dimension Value having Dimension Value Type Heading error occur.
       19. Test on creating Dimension Set Entry with Blocked Dimension Value having Dimension Value Type Total error occur.
       20. Test on creating Dimension Set Entry with Blocked Dimension Value having Dimension Value Type Begin-Total error occur.
       21. Test on creating Dimension Set Entry with Blocked Dimension Value having Dimension Value Type End-Total error occur.
       22. Test on creating Default Dimension for customer with blocked Dimension Value error occur.
       23. Test on updating wrong Dimension Value Type on Dimension Value error occur.
       24. Test on creating Dimension Set Entry with Dimension Value having Dimension Value Type as Heading error occur.
       25. Test on creating Dimension Set Entry with Dimension Value having Dimension Value Type as Total error occur.
       26. Test on creating Dimension Set Entry with Dimension Value having Dimension Value Type as End-Total error occur.
       27. Test Dimension on Customer Ledger Entry after Posting General Journal with Dimension Value having Dimension Value Type as
           Begin-Total.
       28. Test on creating Default Dimension for customer with Dimension Value having Dimension Value Type as Heading error occur.
       29. Test on creating Default Dimension for customer with Dimension Value having Dimension Value Type as Total error occur.
       30. Test on creating Default Dimension for customer with Dimension Value having Dimension Value Type as End-Total error occur.
       31. Test on updating Dimension Value Type as Heading on Dimension Value after Posting General Journal error occur.
       32. Test Dimension Value Code successfully renamed.
       33. Test Dimension Value Name successfully Modify.
       34. Test Dimension Value Code successfully renamed for Blocked Dimension Value.
       35. Test on rename Dimension Value Code to Blank error occurs.
       36. Test Dimension Value Code successfully renamed the after Posting General Journal.
       37. Test deletion of Dimension Value.
       38. Test Default Dimension deleted on deletion of Dimension Value.
       39. Test on deletion of Dimension Value after posting General Journal error occurs.
       40. Check Sales Analysis by Dimensions shows correct Catpion values when Show Cloumn Name TRUE and Show as Column is Item.
       41. Check Sales Analysis by Dimensions shows correct Catpion values when Show Cloumn Name TRUE and Show as Column is Location.
       42. Check Sales Analysis by Dimensions shows correct Catpion values when Show Cloumn Name is TRUE and Column Dim. Code is Dimension 1.
       43. Check Sales Analysis by Dimensions shows correct Catpion values when Show Cloumn Name is TRUE and Column Dim. Code is Dimension 2.
       44. Check Sales Analysis by Dimensions shows correct Catpion values when Show Cloumn Name is TRUE and Column Dim. Code is Dimension 3.
       45. Check Purch. Analysis by Dimensions shows correct Catpion values when Show Cloumn Name TRUE and Show as Column is Item.
       46. Check Purch. Analysis by Dimensions shows correct Catpion values when Show Cloumn Name TRUE and Show as Column is Location.
       47. Check Purch. Analysis by Dimensions shows correct Catpion values when Show Cloumn Name is TRUE and Column Dim. Code is Dimension 1.
       48. Check Purch. Analysis by Dimensions shows correct Catpion values when Show Cloumn Name is TRUE and Column Dim. Code is Dimension 2.
       49. Check Sales Analysis by Dimensions shows correct Catpion values when Show Cloumn Name is TRUE and Column Dim. Code is Dimension 3.
       50. Verify PKRange when Matrix Current Set Length Greater than one.
       51. Verify PKRange when Matrix Current Set Length is one.
       52. Verify PKRange when Matrix Current Set Length Zero.

      TFS_TS_ID = 198718, 202356
      Cover Test cases:
      -----------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                     TFS ID
      -----------------------------------------------------------------------------------------------------------------------------
      ApplyInvoicePaymentForCustomer, ApplyInvoicePaymentForVendor                                                           140780
      ChangeGlobalDimensionOnItem                                                                                            140779
      CreateDefaultDimension, DeleteDimension                                                                                140718

      TFS_TS_ID = 202354
      Cover Test cases:
      -----------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                     TFS ID
      -----------------------------------------------------------------------------------------------------------------------------
      ChangeShortcutDimensionBlocked, ChangeGlobalDimensionWithBlank                                                         140746
      ChangeShortcutDimension, ShortcutDimensionSameGlobal, ShortcutDimensionSameShortcut                                    140747
      DeleteShortcutDimension, DimensionWithGLBudgetName, DimensionWithAnalysisView                                          140748

      TFS_TS_ID = 202357
      Cover Test cases:
      -----------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                     TFS ID
      -----------------------------------------------------------------------------------------------------------------------------
      DimensionValueWithExistingCode, DimensionValueWithConflict, SameDimensionValueAndCode                                  140739
      BlockedDimensionTypeStandard, BlockedDimensionTypeHeading, BlockedDimensionTypeTotal, BlockedDimensionTypeBeginTotal   140743
      BlockedDimensionTypeEndTotal, DefaultDimensionForCustomer                                                              140743

      TFS_TS_ID = 202359
      Cover Test cases:
      -----------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                     TFS ID
      -----------------------------------------------------------------------------------------------------------------------------
      InvalidDimensionValueType, JournalLineValueTypeHeading, JournalLineValueTypeTotal, JournalLineValueTypeEndTotal        140742
      DimensionOnCustomerLedgerEntry, DefaultDimensionWithHeading, DefaultDimensionWithTotal, DefaultDimensionWithEndTotal   140742
      ModifyValueTypeAfterPosting                                                                                            140742

      TFS_TS_ID = 202358
      Cover Test cases:
      -----------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                     TFS ID
      -----------------------------------------------------------------------------------------------------------------------------
      RenameDimensionValueCode, RenameDimensionValueName, RenameBlockDimensionValueCode, BlankDimensionValueCode             140740
      DimensionValueAfterPosting                                                                                             140740
      DeleteDimensionValue, DeleteDefaultDimensionValue, DeleteDimensionValueWithEntry                                       140741
      ChangeGlobalDimensionOnCustLedgEntry,ChangeGlobalDimensionOnVendLedgEntry                                              357859

      BUG ID 6999
      ------------------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                                        TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------
      SalesAnalysisDimMatrixForItemsColumnName,SalesAnalysisDimMatrixForLocationsColumnName
      SalesAnalysisDimMatrixForDimension1ColumnName,SalesAnalysisDimMatrixForDimension2ColumnName
      SalesAnalysisDimMatrixForDimension3ColumnName,PurchaseAnalysisDimMatrixForItemsColumnName
      PurchaseAnalysisDimMatrixForLocationsColumnName,PurchaseAnalysisDimMatrixForDimension1ColumnName
      PurchaseAnalysisDimMatrixForDimension2ColumnName,PurchaseAnalysisDimMatrixForDimension3ColumnName
      PKRangeWhenMatrixCurrentSetLengthGreaterThanOne,PKRangeWhenMatrixCurrentSetLengthIsOne,
      PKRangeWhenMatrixCurrentSetLengthIsZero
    }
    END.
  }
}

