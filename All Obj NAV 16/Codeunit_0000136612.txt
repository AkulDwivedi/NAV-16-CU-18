OBJECT Codeunit 136612 ERM RS Text Transformations
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      TestNameTxt@1002 : TextConst 'ENU=Test Name''s very good';
      TestNameUppercaseTxt@1005 : TextConst 'ENU=TEST NAME''S VERY GOOD';
      TestNameLowerCaseTxt@1006 : TextConst 'ENU=test name''s very good';
      TestNameTitleCaseTxt@1007 : TextConst 'ENU=Test Name''s Very Good';
      TestNameReplacedValueTxt@1008 : TextConst 'ENU=Test Name''s merry good';
      TestRegexEscapeSpecialCharactersNotReplacedTxt@1009 : TextConst 'ENU=Mrs Test Name';
      TestRegexEscapeSpecialCharactersReplacedTxt@1013 : TextConst 'ENU=Mister Test Name';
      NonAlphaNumericCharactersTxt@1014 : TextConst 'ENU=45 oda dz< .. - , dda 21';
      ExpectedTransformedNonAlphaNumericCharactersTxt@1018 : TextConst 'ENU=45odadzdda21';
      DateTimeTextEnUs1Txt@1000 : TextConst 'ENU=Tuesday, December 30, 2014';
      DateTimeTextEnUs2Txt@1004 : TextConst 'ENU=December 30, 2014';
      TransformedDateTimeEnUsTxt@1016 : TextConst 'ENU=123014';
      DateTimeTextDaDk1Txt@1003 : TextConst 'ENU=Fredag, Oktober 24, 2014';
      DateTimeTextDaDk2Txt@1010 : TextConst 'ENU=24. oktober 2014';
      TransformedDateTimeDaDKTxt@1017 : TextConst 'ENU=24102014';
      ToFormatEnUsTxt@1011 : TextConst 'ENU=MMddyy';
      ToFormatDaDkTxt@1012 : TextConst 'ENU=ddMMyyyy';
      ThereIsNothingToProcessErr@1015 : TextConst 'ENU=Implement processing logic in Report 8621 - Config. Package - Process.';
      LibraryUtility@1019 : Codeunit 131000;

    [Test]
    PROCEDURE TestUppercaseTextTransformation@43();
    VAR
      ConfigTextTransformation@1004 : Record 8640;
      ConfigPackageProcess@1002 : Report 8621;
      TransformedText@1003 : Text;
      ExpectedText@1006 : Text;
    BEGIN
      ConfigTextTransformation.INIT;
      ConfigTextTransformation."Transformation Type" := ConfigTextTransformation."Transformation Type"::Uppercase;
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameTxt);

      ExpectedText := TestNameUppercaseTxt;
      Assert.AreEqual(ExpectedText,TransformedText,'Uppercase transformation was not correct');

      // Test Blank
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,'');
      Assert.AreEqual('',TransformedText,'Uppercase transformation was not correct');
    END;

    [Test]
    PROCEDURE TestLowerCaseTextTransformation@55();
    VAR
      ConfigTextTransformation@1004 : Record 8640;
      ConfigPackageProcess@1002 : Report 8621;
      TransformedText@1003 : Text;
      ExpectedText@1006 : Text;
    BEGIN
      ConfigTextTransformation.INIT;
      ConfigTextTransformation."Transformation Type" := ConfigTextTransformation."Transformation Type"::Lowercase;
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameTxt);

      ExpectedText := TestNameLowerCaseTxt;
      Assert.AreEqual(ExpectedText,TransformedText,'Lowercase transformation was not correct');

      // Test Blank
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,'');
      Assert.AreEqual('',TransformedText,'Uppercase transformation was not correct');
    END;

    [Test]
    PROCEDURE TestTitleCaseTextTransformation@56();
    VAR
      ConfigTextTransformation@1004 : Record 8640;
      ConfigPackageProcess@1002 : Report 8621;
      TransformedText@1003 : Text;
      ExpectedText@1006 : Text;
    BEGIN
      ConfigTextTransformation.INIT;
      ConfigTextTransformation."Transformation Type" := ConfigTextTransformation."Transformation Type"::"Title Case";
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameTxt);

      ExpectedText := TestNameTitleCaseTxt;
      Assert.AreEqual(ExpectedText,TransformedText,'Uppercase transformation was not correct');

      // Test Blank
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,'');
      Assert.AreEqual('',TransformedText,'Uppercase transformation was not correct');
    END;

    [Test]
    PROCEDURE TestTrimTextTransformation@13();
    VAR
      ConfigTextTransformation@1004 : Record 8640;
      ConfigPackageProcess@1002 : Report 8621;
      TransformedText@1003 : Text;
    BEGIN
      ConfigTextTransformation.INIT;
      ConfigTextTransformation."Transformation Type" := ConfigTextTransformation."Transformation Type"::Trim;
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,' Test Text 1   ');
      Assert.AreEqual('Test Text 1',TransformedText,'Uppercase transformation was not correct');

      // Test Blank
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,'');
      Assert.AreEqual('',TransformedText,'Uppercase transformation was not correct');
    END;

    [Test]
    PROCEDURE TestSubstringFromBeginning@18();
    VAR
      ConfigTextTransformation@1004 : Record 8640;
      ConfigPackageProcess@1002 : Report 8621;
      TransformedText@1003 : Text;
      TestNameText@1006 : Text;
    BEGIN
      ConfigTextTransformation.INIT;
      ConfigTextTransformation."Transformation Type" := ConfigTextTransformation."Transformation Type"::Substring;

      // Test full string
      ConfigTextTransformation."Start Position" := 1;
      ConfigTextTransformation.Length := STRLEN(TestNameTxt);

      TestNameText := TestNameTxt;
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameTxt);
      Assert.AreEqual(TestNameText,TransformedText,'Substring should return full string');

      // Test one character less
      ConfigTextTransformation."Start Position" := 1;
      ConfigTextTransformation.Length := STRLEN(TestNameTxt) - 1;

      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameTxt);
      Assert.AreEqual(COPYSTR(TestNameText,1,STRLEN(TestNameTxt) - 1),TransformedText,'Substring should return partial string');

      // Test Longer than the string
      ConfigTextTransformation."Start Position" := 1;
      ConfigTextTransformation.Length := STRLEN(TestNameTxt) + 1;

      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameTxt);
      Assert.AreEqual(TestNameText,TransformedText,'Substring should return full string');

      // Test Blank
      ConfigTextTransformation."Start Position" := 1;
      ConfigTextTransformation.Length := 2;

      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,'');
      Assert.AreEqual('',TransformedText,'Substring should return empty string');
    END;

    [Test]
    PROCEDURE TestSubstringFromPosition@39();
    VAR
      ConfigTextTransformation@1004 : Record 8640;
      ConfigPackageProcess@1002 : Report 8621;
      TransformedText@1003 : Text;
      TestNameText@1007 : Text;
      TestNameExpected@1008 : Text;
    BEGIN
      ConfigTextTransformation.INIT;
      ConfigTextTransformation."Transformation Type" := ConfigTextTransformation."Transformation Type"::Substring;
      TestNameText := TestNameTxt;

      // Test full string
      ConfigTextTransformation."Start Position" := 2;
      ConfigTextTransformation.Length := STRLEN(TestNameTxt);

      TestNameExpected := COPYSTR(TestNameText,2);

      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameTxt);
      Assert.AreEqual(TestNameExpected,TransformedText,'Substring should return partial string');

      // Test one character less
      ConfigTextTransformation."Start Position" := 2;
      ConfigTextTransformation.Length := STRLEN(TestNameTxt) - 4;

      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameTxt);
      Assert.AreEqual(COPYSTR(TestNameExpected,1,STRLEN(TestNameTxt) - 4),TransformedText,'Substring should return partial string');

      // Test Longer than the string
      ConfigTextTransformation."Start Position" := 2;
      ConfigTextTransformation.Length := STRLEN(TestNameTxt) + 1;

      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameTxt);
      Assert.AreEqual(TestNameExpected,TransformedText,'Substring should return partial string');

      // Test Blank
      ConfigTextTransformation."Start Position" := 2;
      ConfigTextTransformation.Length := 2;

      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,'');
      Assert.AreEqual('',TransformedText,'Substring should return empty string');
    END;

    [Test]
    PROCEDURE TestSubstringLengthNotSpecified@1();
    VAR
      ConfigTextTransformation@1004 : Record 8640;
      ConfigPackageProcess@1002 : Report 8621;
      TransformedText@1003 : Text;
      TestNameText@1007 : Text;
      TestNameExpected@1008 : Text;
    BEGIN
      ConfigTextTransformation.INIT;
      ConfigTextTransformation."Transformation Type" := ConfigTextTransformation."Transformation Type"::Substring;
      TestNameText := TestNameTxt;

      // Test full string
      ConfigTextTransformation."Start Position" := 1;
      ConfigTextTransformation.Length := 0;

      // Full name should be matched
      TestNameExpected := TestNameText;

      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameTxt);
      Assert.AreEqual(TestNameExpected,TransformedText,'Substring should return partial string');

      // Test Part of the string
      ConfigTextTransformation."Start Position" := 2;
      TestNameExpected := COPYSTR(TestNameText,2);

      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameTxt);
      Assert.AreEqual(TestNameExpected,TransformedText,'Substring should return partial string');

      // Test Blank
      ConfigTextTransformation."Start Position" := 2;
      ConfigTextTransformation.Length := 2;

      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,'');
      Assert.AreEqual('',TransformedText,'Substring should return empty string');
    END;

    [Test]
    PROCEDURE TestSubstringPositionNotSpecified@10();
    VAR
      ConfigTextTransformation@1004 : Record 8640;
      ConfigPackageProcess@1002 : Report 8621;
      TransformedText@1003 : Text;
      TestNameText@1007 : Text;
      TestNameExpected@1008 : Text;
    BEGIN
      ConfigTextTransformation.INIT;
      ConfigTextTransformation."Transformation Type" := ConfigTextTransformation."Transformation Type"::Substring;
      TestNameText := TestNameTxt;

      // Test full string
      ConfigTextTransformation."Start Position" := 0;
      ConfigTextTransformation.Length := STRLEN(TestNameTxt);

      // Full name should be matched
      TestNameExpected := TestNameTxt;
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameTxt);
      Assert.AreEqual(TestNameExpected,TransformedText,'Substring should return partial string');

      // Test Part of the string
      ConfigTextTransformation.Length := 2;
      TestNameExpected := COPYSTR(TestNameText,1,ConfigTextTransformation.Length);

      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameTxt);
      Assert.AreEqual(TestNameExpected,TransformedText,'Substring should return partial string');

      // Test Blank
      ConfigTextTransformation."Start Position" := 2;
      ConfigTextTransformation.Length := 2;

      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,'');
      Assert.AreEqual('',TransformedText,'Substring should return empty string');
    END;

    [Test]
    PROCEDURE TestSubstringInvalidValues@40();
    VAR
      ConfigTextTransformation@1004 : Record 8640;
    BEGIN
      ConfigTextTransformation.INIT;
      ConfigTextTransformation."Transformation Type" := ConfigTextTransformation."Transformation Type"::Substring;

      // Test cannot enter less than one
      ASSERTERROR ConfigTextTransformation.VALIDATE("Start Position",-1);
      ASSERTERROR ConfigTextTransformation.VALIDATE(Length,-1);
    END;

    [Test]
    PROCEDURE TestReplaceTransformation@6();
    VAR
      ConfigTextTransformation@1004 : Record 8640;
      ConfigPackageProcess@1003 : Report 8621;
      TransformedText@1001 : Text;
      TestNameText@1000 : Text;
      TestNameExpected@1007 : Text;
    BEGIN
      ConfigTextTransformation.INIT;
      ConfigTextTransformation."Transformation Type" := ConfigTextTransformation."Transformation Type"::Replace;
      ConfigTextTransformation."Current Value" := 'very';
      ConfigTextTransformation."New Value" := 'merry';

      TestNameText := TestNameTxt;
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameText);
      TestNameExpected := TestNameReplacedValueTxt;
      Assert.AreEqual(TestNameExpected,TransformedText,'Text should be replaced');

      // Test nothing is identified - currently it is not case sensitive
      ConfigTextTransformation."Current Value" := 'Very';
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameText);
      TestNameExpected := TestNameTxt;
      Assert.AreEqual(TestNameText,TransformedText,'Text should stay the same');

      // Test Blank
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,'');
      Assert.AreEqual('',TransformedText,'Text transformation should return emtpy string');
    END;

    [Test]
    PROCEDURE TestRegularExpressionsAreCaseInsensitive@23();
    VAR
      ConfigTextTransformation@1004 : Record 8640;
      ConfigPackageProcess@1003 : Report 8621;
      TransformedText@1001 : Text;
      TestNameText@1000 : Text;
      TestNameExpected@1007 : Text;
    BEGIN
      ConfigTextTransformation.INIT;
      ConfigTextTransformation."Transformation Type" := ConfigTextTransformation."Transformation Type"::"Regular Expression";
      ConfigTextTransformation."Current Value" := 'Very';
      ConfigTextTransformation."New Value" := 'merry';

      TestNameText := TestNameTxt;
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameText);
      TestNameExpected := TestNameReplacedValueTxt;
      Assert.AreEqual(TestNameExpected,TransformedText,'Text should be replaced');

      // Test Blank
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,'');
      Assert.AreEqual('',TransformedText,'Text transformation should return emtpy string');
    END;

    [Test]
    PROCEDURE TestRegularExpressionsExpressionSpecified@25();
    VAR
      ConfigTextTransformation@1004 : Record 8640;
      ConfigPackageProcess@1003 : Report 8621;
      TransformedText@1001 : Text;
      TestNameText@1000 : Text;
      TestNameExpected@1007 : Text;
    BEGIN
      ConfigTextTransformation.INIT;
      ConfigTextTransformation."Transformation Type" := ConfigTextTransformation."Transformation Type"::"Regular Expression";
      ConfigTextTransformation."Current Value" := 'V..y';
      ConfigTextTransformation."New Value" := 'merry';

      TestNameText := TestNameTxt;
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameText);
      TestNameExpected := TestNameReplacedValueTxt;
      Assert.AreEqual(TestNameExpected,TransformedText,'Text should be replaced');

      // Test Blank
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,'');
      Assert.AreEqual('',TransformedText,'Text transformation should return empty string');
    END;

    [Test]
    PROCEDURE TestRegularExpressionsEscapeSpecialCharacters@26();
    VAR
      ConfigTextTransformation@1004 : Record 8640;
      ConfigPackageProcess@1003 : Report 8621;
      TransformedText@1001 : Text;
      TestNameText@1000 : Text;
      TestNameExpected@1007 : Text;
    BEGIN
      ConfigTextTransformation.INIT;
      ConfigTextTransformation."Transformation Type" := ConfigTextTransformation."Transformation Type"::"Regular Expression";
      ConfigTextTransformation."Current Value" := 'Mr\.';
      ConfigTextTransformation."New Value" := 'Mister';

      TestNameText := TestRegexEscapeSpecialCharactersNotReplacedTxt;
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameText);
      TestNameExpected := TestRegexEscapeSpecialCharactersNotReplacedTxt;
      Assert.AreEqual(TestNameExpected,TransformedText,'Text should stay the same');

      // Test nothing is identified - currently it is not case sensitive
      TestNameText := TestRegexEscapeSpecialCharactersReplacedTxt;
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestNameText);
      TestNameExpected := TestRegexEscapeSpecialCharactersReplacedTxt;
      Assert.AreEqual(TestNameText,TransformedText,'Text should be replaced');

      // Test Blank
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,'');
      Assert.AreEqual('',TransformedText,'Text transformation should return empty string');
    END;

    [Test]
    PROCEDURE TestRemoveNonAlphaNumericCharacters@46();
    VAR
      ConfigTextTransformation@1004 : Record 8640;
      ConfigPackageProcess@1003 : Report 8621;
      TransformedText@1001 : Text;
      TestText@1000 : Text;
      ExpectedTestText@1007 : Text;
    BEGIN
      ConfigTextTransformation.INIT;
      ConfigTextTransformation."Transformation Type" :=
        ConfigTextTransformation."Transformation Type"::"Remove Non-Alphanumeric Characters";

      TestText := NonAlphaNumericCharactersTxt;
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestText);
      ExpectedTestText := ExpectedTransformedNonAlphaNumericCharactersTxt;
      Assert.AreEqual(ExpectedTestText,TransformedText,'Text should stay the same');

      // Test Blank
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,'');
      Assert.AreEqual('',TransformedText,'Text transformation should return empty string');
    END;

    [Test]
    PROCEDURE TestDateTimeConversion@2();
    VAR
      ConfigTextTransformation@1004 : Record 8640;
      ConfigPackageProcess@1003 : Report 8621;
      TransformedText@1001 : Text;
      TestText@1000 : Text;
      ExpectedText@1007 : Text;
    BEGIN
      ConfigTextTransformation.INIT;
      ConfigTextTransformation."Transformation Type" :=
        ConfigTextTransformation."Transformation Type"::"Date and Time Formatting";

      ConfigTextTransformation.Format := ToFormatEnUsTxt;
      ConfigTextTransformation."Language ID" := 1033;

      ExpectedText := TransformedDateTimeEnUsTxt;
      TestText := DateTimeTextEnUs1Txt;
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestText);
      Assert.AreEqual(ExpectedText,TransformedText,'Date time conversion is wrong');

      TestText := DateTimeTextEnUs2Txt;
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestText);
      Assert.AreEqual(ExpectedText,TransformedText,'Date time conversion is wrong');

      // Test Blank
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,'');
      Assert.AreEqual('',TransformedText,'Date time conversion is wrong');
    END;

    [Test]
    PROCEDURE TestDateTimeConversionDifferentCulture@15();
    VAR
      ConfigTextTransformation@1004 : Record 8640;
      ConfigPackageProcess@1003 : Report 8621;
      TransformedText@1001 : Text;
      TestText@1000 : Text;
      ExpectedText@1007 : Text;
    BEGIN
      ConfigTextTransformation.INIT;
      ConfigTextTransformation."Transformation Type" :=
        ConfigTextTransformation."Transformation Type"::"Date and Time Formatting";

      ConfigTextTransformation.Format := ToFormatDaDkTxt;
      ConfigTextTransformation."Language ID" := 1030;

      ExpectedText := TransformedDateTimeDaDKTxt;
      TestText := DateTimeTextDaDk1Txt;
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestText);
      Assert.AreEqual(ExpectedText,TransformedText,'Date time conversion is wrong');

      TestText := DateTimeTextDaDk2Txt;
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,TestText);
      Assert.AreEqual(ExpectedText,TransformedText,'Date time conversion is wrong');

      // Test Blank
      TransformedText := ConfigPackageProcess.TransformText(ConfigTextTransformation,'');
      Assert.AreEqual('',TransformedText,'Date time conversion is wrong');
    END;

    [Test]
    PROCEDURE TestInvokingTheReportFromMainPageShowsError@5();
    VAR
      ConfigPackage@1002 : Record 8623;
      ConfigPackageRecord@1001 : Record 8614;
      ConfigPackageCard@1000 : TestPage 8614;
    BEGIN
      InsertSimpleConfigPackageRecords(ConfigPackage,ConfigPackageRecord);

      ConfigPackageCard.OPENEDIT;
      ConfigPackageCard.GOTORECORD(ConfigPackage);
      ASSERTERROR ConfigPackageCard.ProcessData.INVOKE;
      Assert.ExpectedError(ThereIsNothingToProcessErr);
    END;

    [Test]
    PROCEDURE TestInvokingTheReportFromPackageRecordsShowsError@9();
    VAR
      ConfigPackage@1002 : Record 8623;
      ConfigPackageRecord@1000 : Record 8614;
      ConfigPackageRecords@1001 : TestPage 8626;
    BEGIN
      InsertSimpleConfigPackageRecords(ConfigPackage,ConfigPackageRecord);

      ConfigPackageRecords.OPENEDIT;
      ConfigPackageRecords.FIRST;
      ASSERTERROR ConfigPackageRecords.ProcessData.INVOKE;
      Assert.ExpectedError(ThereIsNothingToProcessErr);
    END;

    LOCAL PROCEDURE InsertSimpleConfigPackageRecords@4(VAR ConfigPackage@1002 : Record 8623;VAR ConfigPackageRecord@1000 : Record 8614);
    VAR
      ConfigPackageTable@1001 : Record 8613;
    BEGIN
      ConfigPackage.INIT;
      ConfigPackage.Code := LibraryUtility.GenerateRandomCode(ConfigPackage.FIELDNO(Code),DATABASE::"Config. Package");
      ConfigPackage.INSERT;

      ConfigPackageTable.INIT;
      ConfigPackageTable."Package Code" := ConfigPackage.Code;
      ConfigPackageTable."Table ID" := DATABASE::Customer;
      ConfigPackageTable.INSERT;

      ConfigPackageRecord.INIT;
      ConfigPackageRecord."Package Code" := ConfigPackageTable."Package Code";
      ConfigPackageRecord."Table ID" := ConfigPackageTable."Table ID";
      ConfigPackageRecord."No." := 1000;
      ConfigPackageRecord.INSERT;
    END;

    BEGIN
    {
      // [FEATURE] [Text Transformation] [Rapid Start]
    }
    END.
  }
}

