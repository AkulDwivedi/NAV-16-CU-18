OBJECT Codeunit 137909 SCM Resource Usage Type
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryKitting@1003 : Codeunit 132205;
      Assert@1004 : Codeunit 130000;
      CalcRecursionLevel@1001 : Integer;
      Initialized@1005 : Boolean;

    [Normal]
    LOCAL PROCEDURE Initialize@50();
    BEGIN
      IF Initialized THEN
        EXIT;

      Initialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE OneResource@13();
    VAR
      ParentItem@1000 : Record 27;
      BOMComp@1001 : Record 90;
      resource@1002 : Record 156;
    BEGIN
      Initialize;
      ParentItem.GET(LibraryKitting.CreateItemWithLotAndNewUOM(500,700,1));
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(100,0));
      LibraryKitting.CreateBOMComponentLine(
        ParentItem,BOMComp.Type::Resource,resource."No.",1,resource."Base Unit of Measure",FALSE);
      calcThenValidateCost(ParentItem."No.",100,2);
      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE OneResource10@16();
    VAR
      ParentItem@1002 : Record 27;
      BOMComp@1000 : Record 90;
      resource@1001 : Record 156;
    BEGIN
      Initialize;
      ParentItem.GET(LibraryKitting.CreateItemWithLotAndNewUOM(500,700,10));
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(100,0));
      LibraryKitting.CreateBOMComponentLine(
        ParentItem,BOMComp.Type::Resource,resource."No.",10,resource."Base Unit of Measure",FALSE);
      calcThenValidateCost(ParentItem."No.",1000,1);
      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE OneResource10Fixed@4();
    VAR
      ParentItem@1000 : Record 27;
      BOMComp@1001 : Record 90;
      resource@1002 : Record 156;
    BEGIN
      Initialize;
      ParentItem.GET(LibraryKitting.CreateItemWithLotAndNewUOM(500,700,10));
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(100,0));
      LibraryKitting.CreateBOMComponentLine(ParentItem,BOMComp.Type::Resource,resource."No.",5,resource."Base Unit of Measure",TRUE);
      calcThenValidateCost(ParentItem."No.",50,1);
      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE TwoResources@14();
    VAR
      ParentItem@1000 : Record 27;
      BOMComp@1001 : Record 90;
      resource@1002 : Record 156;
    BEGIN
      Initialize;
      ParentItem.GET(LibraryKitting.CreateItemWithLotAndNewUOM(500,700,10));
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(100,0));
      LibraryKitting.CreateBOMComponentLine(ParentItem,BOMComp.Type::Resource,resource."No.",5,resource."Base Unit of Measure",TRUE);
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(100,0));
      LibraryKitting.CreateBOMComponentLine(
        ParentItem,BOMComp.Type::Resource,resource."No.",10,resource."Base Unit of Measure",FALSE);
      calcThenValidateCost(ParentItem."No.",1050,1);
      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    PROCEDURE OneResourceOneItem@18();
    VAR
      ParentItem@1000 : Record 27;
      BOMComp@1001 : Record 90;
      childItem@1002 : Record 27;
      resource@1003 : Record 156;
    BEGIN
      Initialize;
      ParentItem.GET(LibraryKitting.CreateItemWithLotAndNewUOM(500,700,1));
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(100,0));
      LibraryKitting.CreateBOMComponentLine(
        ParentItem,BOMComp.Type::Resource,resource."No.",1,resource."Base Unit of Measure",FALSE);
      childItem.GET(LibraryKitting.CreateItemWithNewUOM(300,400));
      LibraryKitting.CreateBOMComponentLine(ParentItem,BOMComp.Type::Item,childItem."No.",1,childItem."Base Unit of Measure",FALSE);
      calcThenValidateCost(ParentItem."No.",400,1);
      ASSERTERROR ERROR('') // roll back
    END;

    [Test]
    [HandlerFunctions(pickCalcLevel)]
    PROCEDURE NestedBOMItem@7();
    VAR
      ParentItem@1000 : Record 27;
      ComponentItem@1002 : Record 27;
      subComponentItem@1004 : Record 27;
      BOMComp@1001 : Record 90;
      resource@1005 : Record 156;
      auxId@1003 : Code[20];
    BEGIN
      Initialize;
      ParentItem.GET(LibraryKitting.CreateItemWithLotAndNewUOM(0,0,10));
      ComponentItem.GET(LibraryKitting.CreateItemWithNewUOM(300,400));
      LibraryKitting.CreateBOMComponentLine(
        ParentItem,BOMComp.Type::Item,ComponentItem."No.",1,ComponentItem."Base Unit of Measure",FALSE);
      calcThenValidatePrice(ParentItem."No.",400,0);
      ComponentItem.GET(LibraryKitting.CreateItemWithNewUOM(300,400));

      LibraryKitting.CreateBOMComponentLine(
        ParentItem,BOMComp.Type::Item,ComponentItem."No.",3,ComponentItem."Base Unit of Measure",FALSE);
      calcThenValidatePrice(ParentItem."No.",1600,0);
      auxId := ComponentItem."No.";
      ComponentItem.GET(LibraryKitting.CreateItemWithNewUOM(200,360));
      LibraryKitting.CreateBOMComponentLine(
        ParentItem,BOMComp.Type::Item,ComponentItem."No.",2,ComponentItem."Base Unit of Measure",FALSE);
      ComponentItem.GET(auxId);
      calcThenValidatePrice(ParentItem."No.",2320,0);
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(100,0));
      LibraryKitting.CreateBOMComponentLine(
        ParentItem,BOMComp.Type::Resource,resource."No.",5,resource."Base Unit of Measure",FALSE);

      subComponentItem.GET(LibraryKitting.CreateItemWithNewUOM(2,3));
      LibraryKitting.CreateBOMComponentLine(
        ComponentItem,BOMComp.Type::Item,subComponentItem."No.",3,subComponentItem."Base Unit of Measure",FALSE);
      calcThenValidatePrice(ParentItem."No.",-999,0);
      validatePrice(ComponentItem."No.",400);
      calcThenValidatePrice(ParentItem."No.",2320,1);
      validatePrice(ComponentItem."No.",400);
      calcThenValidatePrice(ParentItem."No.",1147,2);
      validatePrice(ComponentItem."No.",9);
      subComponentItem.GET(LibraryKitting.CreateItemWithNewUOM(11,23));
      LibraryKitting.CreateBOMComponentLine(
        ComponentItem,BOMComp.Type::Item,subComponentItem."No.",4,subComponentItem."Base Unit of Measure",FALSE);
      calcThenValidatePrice(ParentItem."No.",-999,0);
      validatePrice(ComponentItem."No.",400);
      calcThenValidatePrice(ParentItem."No.",2320,1);
      validatePrice(ComponentItem."No.",400);
      calcThenValidatePrice(ParentItem."No.",1423,2);
      validatePrice(ComponentItem."No.",101);
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(100,0));
      LibraryKitting.CreateBOMComponentLine(
        ComponentItem,BOMComp.Type::Resource,resource."No.",5,resource."Base Unit of Measure",FALSE);
      calcThenValidatePrice(ParentItem."No.",-999,0);
      validatePrice(ComponentItem."No.",400);
      calcThenValidatePrice(ParentItem."No.",2320,1);
      validatePrice(ComponentItem."No.",400);
      calcThenValidatePrice(ParentItem."No.",1423,2);
      validatePrice(ComponentItem."No.",101);

      validateCost(ComponentItem."No.",300); // initial cost
      calcThenValidateCost(ParentItem."No.",2850,2);
      validateCost(ComponentItem."No.",2 * 3 + 11 * 4 + 100 * 5); // calculated cost
      ASSERTERROR ERROR('') // roll back
    END;

    [StrMenuHandler]
    PROCEDURE pickCalcLevel@2(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := CalcRecursionLevel
    END;

    LOCAL PROCEDURE validateCost@3(itemNo@1000 : Code[20];cost@1001 : Decimal);
    VAR
      item@1002 : Record 27;
    BEGIN
      item.GET(itemNo);
      Assert.AreEqual(item."Unit Cost",cost,
        STRSUBSTNO('Bad Unit Cost of %3. expected %1, got %2',cost,item."Unit Cost",itemNo));
    END;

    LOCAL PROCEDURE calcThenValidateCost@1(itemNo@1000 : Code[20];cost@1001 : Decimal;recursion@1004 : Integer);
    VAR
      item@1002 : Record 27;
      CalculateStandardCost@1003 : Codeunit 5812;
    BEGIN
      item.GET(itemNo);
      item."Unit Cost" := -999;
      item.MODIFY;
      CalcRecursionLevel := recursion;
      CalculateStandardCost.CalcItem(itemNo,TRUE);
      validateCost(itemNo,cost);
    END;

    LOCAL PROCEDURE validatePrice@8(itemNo@1000 : Code[20];price@1001 : Decimal);
    VAR
      item@1002 : Record 27;
    BEGIN
      item.GET(itemNo);
      Assert.AreEqual(item."Unit Price",price,
        STRSUBSTNO('Bad Unit Price of %3. expected %1, got %2',price,item."Unit Price",itemNo));
    END;

    LOCAL PROCEDURE calcThenValidatePrice@9(itemNo@1000 : Code[20];price@1001 : Decimal;recursion@1004 : Integer);
    VAR
      item@1002 : Record 27;
      CalculateStandardCost@1003 : Codeunit 5812;
    BEGIN
      item.GET(itemNo);
      item."Unit Price" := -999;
      item.MODIFY;
      CalcRecursionLevel := recursion;
      CalculateStandardCost.CalcAssemblyItemPrice(itemNo);
      validatePrice(itemNo,price);
    END;

    BEGIN
    {
      // [FEATURE] [BOM Component] [Resource] [SCM]
      Assumption: Codeunit 5812 Calculated Standard Cost, when calling CalcItem and CalcAssemblySalesPrice, does not call COMMIT
      Test Item with one component: Usage Type=Direct, Quantity=1 Resource with Unit Cost=100 and Item with Lot Size=1
      Test Item with one component: Usage Type=Direct,Quantity=10 Resource with Unit Cost=100 and Item with Lot Size=1
      Test Item with one component: Usage Type=Fixed,Quantity=10 Resource with Unit Cost=100 and Item with Lot Size=10
      Test Item with two component: Usage Type=Fixed,Quantity=10 Resource with Unit Cost=100 and Item with Lot Size=10 and Item with Unit
      Test Item with two component: Usage Type=Direct,Quantity=10 Resource with Unit Cost=100 and Item with Lot Size=10 and Item with Unit
      Test a nested Bom with components in components
    }
    END.
  }
}

