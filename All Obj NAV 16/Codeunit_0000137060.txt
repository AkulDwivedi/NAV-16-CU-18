OBJECT Codeunit 137060 SCM Inventory 7.0
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            Initialized := FALSE
          END;

  }
  CODE
  {
    VAR
      LocationInTransit@1020 : Record 14;
      LocationBlue@1019 : Record 14;
      LocationRed@1018 : Record 14;
      ItemJournalTemplate@1012 : Record 82;
      ItemJournalBatch@1006 : Record 233;
      RevaluationItemJournalTemplate@1017 : Record 82;
      RevaluationItemJournalBatch@1004 : Record 233;
      LibraryInventory@1000 : Codeunit 132201;
      LibraryRandom@1002 : Codeunit 130440;
      LibraryDimension@1009 : Codeunit 131001;
      LibraryPurchase@1003 : Codeunit 130512;
      LibraryCosting@1005 : Codeunit 132200;
      LibraryUtility@1016 : Codeunit 131000;
      LibraryWarehouse@1013 : Codeunit 132204;
      LibraryVariableStorage@1023 : Codeunit 131004;
      Assert@1011 : Codeunit 130000;
      ErrorDoNotMatchErr@1007 : TextConst '@@@="%1 = Error Text, %2 = Error Text";ENU=Expected error: ''%1''\Actual error: ''%2''';
      DivideByZeroErr@1024 : TextConst 'ENU=Attempted to divide by zero.';
      DimErr@1010 : TextConst '@@@="Expected DimSetID: %1, Actual DimSetID: %2 ";ENU="Expected DimSetID: %1, Actual DimSetID: %2 "';
      ConfirmQst@1001 : TextConst 'ENU=Do you really want to change the Average Cost Period?';
      AdjustCostMsg@1014 : TextConst 'ENU=Average Cost Period has been changed to Accounting Period. You should now run Adjust Cost - Item Entries.';
      AdjustCost2Msg@1026 : TextConst 'ENU=Average Cost Period has been changed to Day. You should now run Adjust Cost - Item Entries.';
      ReservationManagement@1008 : Codeunit 99000845;
      Initialized@1025 : Boolean;
      RoundingPrecisionErr@1015 : TextConst 'ENU=Rounding Precision must be greater than 0.';
      DecimalPlacesErr@1021 : TextConst 'ENU=The field can have a maximum of 5 decimal places.';
      ReservedQtyErr@1022 : TextConst 'ENU=The Reserved Quantity Outbnd is changed.';
      WrongFieldValueErr@1028 : TextConst '@@@="%1 = Field Name, %2 = Table Name";ENU=Value of %1 in table %2 is incorrect';
      ItemVendorMustExistErr@1029 : TextConst 'ENU=Item Vendor must exist.';
      ItemVendorMustNotExistErr@1030 : TextConst 'ENU=Item Vendor must not exist.';
      DescriptionErr@1031 : TextConst 'ENU=Incorrect Description';

    [Test]
    PROCEDURE B7425_AmtAtLowerBound@19();
    BEGIN
      // Item Unit Cost test Boundary value : 0.
      Initialize;
      ItemJournalAmount(0,FALSE); // Divide by Zero boolean - False.
    END;

    [Test]
    PROCEDURE B7425_AmtLessThanUpperBound@18();
    BEGIN
      // Item Unit Cost test Boundary value : Decimal value less than 100.
      Initialize;
      ItemJournalAmount(LibraryRandom.RandDec(99,2),FALSE);  // Divide by Zero boolean - False.
    END;

    [Test]
    PROCEDURE B7425_AmtLargerThanUpperBound@17();
    BEGIN
      // Item Unit Cost test Boundary value : Decimal value greater than 100.
      Initialize;
      ItemJournalAmount(100 + LibraryRandom.RandDec(10,2),FALSE);  // Divide by Zero boolean - False.
    END;

    [Test]
    PROCEDURE B7425_AmtLessThanLowerBound@16();
    BEGIN
      // Item Unit Cost test Boundary value : Decimal value less than -10.
      Initialize;
      ItemJournalAmount(-LibraryRandom.RandDec(10,2),FALSE);  // Divide by Zero boolean - False.
    END;

    [Test]
    PROCEDURE B7425_AmtErrorDivisionByZero@13();
    BEGIN
      // Item Unit Cost test Boundary value : -100 required for test.
      Initialize;
      ItemJournalAmount(-100,TRUE);  // Divide by Zero boolean True to generate error.
    END;

    LOCAL PROCEDURE ItemJournalAmount@4(UnitCost@1000 : Decimal;DivideByZero@1001 : Boolean);
    VAR
      Item@1004 : Record 27;
    BEGIN
      // Setup.
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Indirect Cost %",UnitCost);
      Item.MODIFY(TRUE);

      // Exercise and Verify.
      IF NOT DivideByZero THEN
        VerifyUnitCostItemJournal(Item)
      ELSE BEGIN
        ASSERTERROR VerifyUnitCostItemJournal(Item);
        Assert.IsFalse(
          STRPOS(GETLASTERRORTEXT,DivideByZeroErr) = 0,STRSUBSTNO(ErrorDoNotMatchErr,DivideByZeroErr,GETLASTERRORTEXT));
      END;
    END;

    [Test]
    PROCEDURE B29325_StockKeepingUnitError@6();
    VAR
      Item@1000 : Record 27;
      StockkeepingUnit@1001 : Record 5700;
      Location@1004 : Record 14;
      VendorNo@1006 : Code[20];
    BEGIN
      // Setup.
      Initialize;

      LibraryWarehouse.CreateLocation(Location);
      VendorNo := LibraryUtility.GenerateGUID;
      CreateItem(Item,Location.Code,Item."Costing Method"::FIFO);
      LibraryInventory.CreateStockKeepingUnit(Item,0,FALSE,FALSE);
      StockkeepingUnit.GET(Location.Code,Item."No.",'');

      // Exercise: Create Stock Keeping Unit to generate error.
      ASSERTERROR StockkeepingUnit.VALIDATE("Vendor No.",VendorNo);

      Assert.AssertPrimRecordNotFound;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTRUE,MessageHandler)]
    PROCEDURE B29388_UpdateAverageCostPeriod@1();
    VAR
      InventorySetup@1000 : Record 313;
      Item@1001 : Record 27;
      ItemJournalLine@1004 : Record 83;
      AverageCostPeriod@1002 : Option;
    BEGIN
      // Update Average Cost Period in Inventory Setup and verify message in confirm handler.
      // Setup.
      Initialize;

      LibraryInventory.CreateItem(Item);
      CreateItemJournalLine(
        ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandDec(10,2),0);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // Exercise and Verify: Update Average Cost Period in Inventory Setup and verify message in confirm handler.
      LibraryVariableStorage.Enqueue(ConfirmQst);  // Enqueue Value for ConfirmHandler.
      LibraryVariableStorage.Enqueue(AdjustCostMsg);  // Enqueue Value for MessageHandler.

      InventorySetup.GET;
      AverageCostPeriod := InventorySetup."Average Cost Period";
      InventorySetup.VALIDATE("Average Cost Period",InventorySetup."Average Cost Period"::"Accounting Period");
      InventorySetup.MODIFY(TRUE);

      // Teardown.
      LibraryVariableStorage.Enqueue(ConfirmQst);  // Enqueue Value for ConfirmHandler.
      LibraryVariableStorage.Enqueue(AdjustCost2Msg);  // Enqueue Value for MessageHandler.
      UpdateInventorySetup(AverageCostPeriod);
    END;

    [Test]
    PROCEDURE B43701_InvoiceDimInReval@60();
    VAR
      Item@1000 : Record 27;
      DimensionValue@1001 : Record 349;
      DimensionValue2@1002 : Record 349;
      ItemJournalLine@1009 : Record 83;
    BEGIN
      // [FEATURE] [Dimension] [Revaluation]
      // [SCENARIO] Verify that Dimensions entered in invoice are same in Revaluation Journal.

      // Setup.
      Initialize;
      PurchaseDocumentWithDimSetup(Item,DimensionValue,DimensionValue2);

      // Calculate inventory on Revaluation journal- calculate per ILE.
      Item.SETRANGE("No.",Item."No.");
      CreateRevaluationJournal(ItemJournalLine);
      LibraryCosting.CalculateInventoryValue(ItemJournalLine,Item,WORKDATE,LibraryUtility.GenerateGUID,0,FALSE,FALSE,FALSE,0,FALSE);

      // Verify: verify that the dimensions entered above are there.
      VerifyDimensions(
        ItemJournalLine,DimensionValue."Dimension Code",DimensionValue2."Dimension Code",DimensionValue.Code,DimensionValue2.Code);
    END;

    [Test]
    PROCEDURE B43701_InvoiceAndItemDimReval@58();
    VAR
      Item@1008 : Record 27;
      DimensionValue@1007 : Record 349;
      DimensionValue2@1006 : Record 349;
      DimensionValue3@1010 : Record 349;
      DimensionValue4@1009 : Record 349;
      ItemJournalLine@1002 : Record 83;
    BEGIN
      // [FEATURE] [Dimension] [Revaluation]
      // [SCENARIO] Verify that Dimensions entered in the item card and dimension values are still same as invoice in the Revaluation Journal.

      // Setup.
      Initialize;

      PurchaseDocumentWithDimSetup(Item,DimensionValue,DimensionValue2);
      UpdateItemWithDimensions(Item,DimensionValue3,DimensionValue4,DimensionValue."Dimension Code",DimensionValue2."Dimension Code");

      // Calculate inventory on Revaluation journal- calculate per ILE.
      Item.SETRANGE("No.",Item."No.");
      CreateRevaluationJournal(ItemJournalLine);

      // Exercise.
      LibraryCosting.CalculateInventoryValue(ItemJournalLine,Item,WORKDATE,LibraryUtility.GenerateGUID,0,FALSE,FALSE,FALSE,0,FALSE);

      // Verify: verify dimension values are still the ones chosen on the Purchase Invoice line.
      VerifyDimensions(
        ItemJournalLine,DimensionValue."Dimension Code",DimensionValue2."Dimension Code",DimensionValue.Code,DimensionValue2.Code);
    END;

    [Test]
    PROCEDURE B43701_ItemDimInReval@62();
    VAR
      Item@1010 : Record 27;
      DimensionValue@1009 : Record 349;
      DimensionValue2@1008 : Record 349;
      DimensionValue3@1007 : Record 349;
      DimensionValue4@1006 : Record 349;
      ItemJournalLine@1002 : Record 83;
    BEGIN
      // [FEATURE] [Dimension] [Revaluation]
      // [SCENARIO] Verify that Dimensions entered in the item card are same in the Revaluation Journal.

      // Setup.
      Initialize;
      PurchaseDocumentWithDimSetup(Item,DimensionValue,DimensionValue2);
      UpdateItemWithDimensions(Item,DimensionValue3,DimensionValue4,DimensionValue."Dimension Code",DimensionValue2."Dimension Code");

      // Calculate inventory on Revaluation journal- calculate per ILE.
      Item.SETRANGE("No.",Item."No.");
      CreateRevaluationJournal(ItemJournalLine);

      // Exercise.
      LibraryCosting.CalculateInventoryValue(ItemJournalLine,Item,WORKDATE,LibraryUtility.GenerateGUID,1,FALSE,FALSE,FALSE,0,FALSE);

      // Verify: verify dimension values are the ones chosen on the item.
      VerifyDimensions(
        ItemJournalLine,DimensionValue."Dimension Code",DimensionValue2."Dimension Code",DimensionValue3.Code,DimensionValue4.Code);
    END;

    [Test]
    PROCEDURE DimensionOnTransferShipment@169();
    BEGIN
      // Verify Dimension on Transfer Shipment.
      // Setup.
      Initialize;
      TransferOrderWithDimension(FALSE);  // Update Dimension as False.
    END;

    [Test]
    [HandlerFunctions(EditDimensionSetEntriesPageHandler,ConfirmHandlerOnChangeDimension)]
    PROCEDURE DimensionOnTransferReceiptWithNewDimension@21();
    BEGIN
      // Verify Dimension on Transfer Receipt after Updating Dimension on Transfer Order.
      // Setup.
      Initialize;
      TransferOrderWithDimension(TRUE);  // Update Dimension as True.
    END;

    LOCAL PROCEDURE TransferOrderWithDimension@69(UpdateDimension@1019 : Boolean);
    VAR
      Item@1000 : Record 27;
      DimensionValue@1002 : Record 349;
      DimensionValue2@1003 : Record 349;
      TransferHeader@1007 : Record 5740;
      TransferLine@1008 : Record 5741;
    BEGIN
      // Create Item with Dimension, Update Inventory and Create Transfer Order.
      CreateItemWithDimension(Item,DimensionValue);
      CreateAndPostItemJournalLine(Item."No.",LocationRed.Code,LibraryRandom.RandDec(10,2) + 10);  // Using Large Random Value.
      CreateTransferRoute(LocationRed.Code,LocationBlue.Code,LocationInTransit.Code);
      CreateAndReleaseTransferOrder(
        TransferHeader,TransferLine,Item."No.",LocationRed.Code,LocationBlue.Code,LocationInTransit.Code,
        LibraryRandom.RandDec(10,2));

      // Exercise: Post Transfer Shipment. Update Dimension on Transfer Order and Post Transfer Receipt.
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);  // Post with Ship Option.
      IF UpdateDimension THEN BEGIN
        UpdateDimensionOnTransferOrder(DimensionValue2,TransferHeader."No.");
        TransferHeader.GET(TransferHeader."No.");
        LibraryWarehouse.PostTransferOrder(TransferHeader,FALSE,TRUE);  // Post with Receive Option.
      END;

      // Verify: Verify Dimension on Transfer Shipment and Transfer Receipt.
      IF UpdateDimension THEN
        VerifyDimensionOnTransferReceipt(TransferHeader."No.",DimensionValue,DimensionValue2,Item."No.")
      ELSE
        VerifyDimensionOnTransferShipmentLine(TransferHeader."No.",Item."No.",DimensionValue);
    END;

    [Test]
    PROCEDURE ItemWithZeroRoundingPrecisionError@29();
    BEGIN
      // Verify Error message when update Zero Rounding Precision on Item.
      // Setup.
      Initialize;
      ItemWithRoundingPrecision(0);  // Zero Rounding Precision.
    END;

    [Test]
    PROCEDURE ItemWithNegativeRoundingPrecisionError@30();
    BEGIN
      // Verify Error message when update Negative Rounding Precision on Item.
      // Setup.
      Initialize;
      ItemWithRoundingPrecision(-LibraryRandom.RandDec(10,2));  // Negative Rounding Precision.
    END;

    LOCAL PROCEDURE ItemWithRoundingPrecision@14(RoundingPrecision@1001 : Decimal);
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Create Item.
      CreateItem(Item,'',Item."Costing Method"::FIFO);

      // Exercise: Validate Rounding Precision on Item.
      ASSERTERROR Item.VALIDATE("Rounding Precision",RoundingPrecision);

      // Verify: Verify Error message for Rounding Precision.
      Assert.ExpectedError(RoundingPrecisionErr);
    END;

    [Test]
    PROCEDURE ItemWithRoundingPrecisionMoreThanFiveDecimalPlaceValueError@28();
    VAR
      Item@1000 : Record 27;
      ItemCard@1001 : TestPage 30;
    BEGIN
      // Verify Error message when update Rounding Precision with more than five decimal place value on Item.
      // Setup: Create Item and Open Item Card.
      Initialize;
      CreateItem(Item,'',Item."Costing Method"::FIFO);
      OpenItemCard(ItemCard,Item."No.");

      // Exercise: Update Rounding Precision with more than five decimal place value on Item Card. Use page because Rounding Precision Field Property Decimal Places defined as 0:5.
      ASSERTERROR ItemCard."Rounding Precision".SETVALUE(FORMAT(LibraryRandom.RandDec(10,6)));    // Six decimal place value required.

      // Verify: Verify error message for Rounding Precision.
      Assert.ExpectedError(DecimalPlacesErr);
    END;

    [Test]
    PROCEDURE ItemWithRoundingPrecisionEqualAndLessThanFiveDecimalPlaceValue@68();
    VAR
      Item@1000 : Record 27;
      ItemCard@1001 : TestPage 30;
      RoundingPrecision@1003 : Decimal;
    BEGIN
      // Verify Rounding Precision on Item when update Rounding Precision with five decimal place value on Item.
      // Setup: Create Item and Open Item Card.
      Initialize;
      RoundingPrecision := LibraryRandom.RandDec(10,LibraryRandom.RandInt(5));  // Using Random for range of one to five decimal place.
      CreateItem(Item,'',Item."Costing Method"::FIFO);
      OpenItemCard(ItemCard,Item."No.");

      // Exercise: Update Rounding Precision with range of one to Five decimal place value on Item Card.
      ItemCard."Rounding Precision".SETVALUE(FORMAT(RoundingPrecision));  // Use page because Rounding Precision Field Property Decimal Places defined as 0:5.
      ItemCard.OK.INVOKE;

      // Verify: Verify Updated Rounding Precision on Item.
      Item.GET(Item."No.");
      Item.TESTFIELD("Rounding Precision",RoundingPrecision);
    END;

    [Test]
    PROCEDURE UpdateShipmentDateOnReservedTransferOrder@7();
    VAR
      Item@1000 : Record 27;
      TransferLine@1001 : Record 5741;
    BEGIN
      // Setup: Create an Item. Create and post Item Journal Line, Create Transfer Order with reservation.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateAndPostItemJournalLine(Item."No.",LocationBlue.Code,LibraryRandom.RandInt(100) + 100); // Random Number Generator Add 100 is for reservation.
      CreateTransferOrderWithReservation(TransferLine,LibraryRandom.RandInt(100),Item."No.");

      // Exercise: Change the Shipment Date on Transfer Header.
      ModifyShipmentDateOnTransferHeader(TransferLine."Document No.");

      // Verify: Verify the Confirm Message doesn't pop up and the Reserved Quantity Outbnd. has no change on Transfer Line.
      TransferLine.CALCFIELDS("Reserved Quantity Outbnd.");
      Assert.AreEqual(TransferLine.Quantity,TransferLine."Reserved Quantity Outbnd.",ReservedQtyErr);
    END;

    [Test]
    PROCEDURE ChangingCrossRefNoDoesNotChangeItemVendorLeadTimeDiffUnitsOfMeasure@31();
    VAR
      Item@1000 : Record 27;
      ItemCrossRef@1001 : Record 5717;
      UnitOfMeasure@1002 : Record 204;
      Vendor@1004 : Record 23;
      ItemVendor@1005 : Record 99;
      VendorItemNo@1006 : Text[20];
      LeadTimeFormula@1007 : DateFormula;
    BEGIN
      // [FEATURE] [Item Cross Reference]
      // [SCENARIO 361680] Lead time calculation in Vendor Item is not changed after changing "Cross-Ref. No." in linked cross reference when two cross-ref. with diff. units of measure
      Initialize;

      // [GIVEN] Item with two units of measure
      CreateItemWithTwoUnitsOfMeasure(Item,UnitOfMeasure);
      LibraryPurchase.CreateVendor(Vendor);

      // [GIVEN] Item cross reference with unit of measure = "U1" and Item Cross Reference No. = "N1"
      CreateItemCrossReference(ItemCrossRef,Item."No.",Item."Base Unit of Measure",Vendor."No.",'');

      // [GIVEN] Item cross reference with unit of measure = "U2" and Item Cross Reference No. = "N2"
      VendorItemNo := ItemCrossRef."Cross-Reference No.";
      CreateItemCrossReference(ItemCrossRef,Item."No.",UnitOfMeasure.Code,Vendor."No.",'');

      // [GIVEN] Set Lead Time Calculation in Item Vendor = "1D"
      EVALUATE(LeadTimeFormula,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      UpdateItemVendorLeadTime(Vendor."No.",Item."No.",LeadTimeFormula);

      // [WHEN] In Item Cross Reference change Cross Reference No. from "N2" to "N1"
      WITH ItemCrossRef DO
        RENAME("Item No.",'',"Unit of Measure","Cross-Reference Type","Cross-Reference Type No.",VendorItemNo);

      ItemVendor.GET(Vendor."No.",Item."No.",'');
      // [THEN] Item Vendor is updated: "Vendor Item No." = "N1", "Lead Time Calculation" = "1D"
      Assert.AreEqual(
        VendorItemNo,ItemVendor."Vendor Item No.",
        STRSUBSTNO(WrongFieldValueErr,ItemVendor.FIELDCAPTION("Vendor Item No."),ItemVendor.TABLECAPTION));
      Assert.IsTrue(
        LeadTimeFormula = ItemVendor."Lead Time Calculation",
        STRSUBSTNO(WrongFieldValueErr,ItemVendor.FIELDCAPTION("Lead Time Calculation"),ItemVendor.TABLECAPTION));
    END;

    [Test]
    PROCEDURE ChangingCrossRefNoDoesNotChangeItemVendorLeadTimeSameUnitOfMeasure@48();
    VAR
      Item@1000 : Record 27;
      ItemCrossRef@1001 : Record 5717;
      Vendor@1004 : Record 23;
      ItemVendor@1005 : Record 99;
      LeadTimeFormula@1007 : DateFormula;
    BEGIN
      // [FEATURE] [Item Cross Reference]
      // [SCENARIO 361680] Lead time calculation in Vendor Item is not changed after changing "Cross-Ref. No." in linked cross reference when two cross-ref. with the same unit of measure
      Initialize;

      // [GIVEN] Item cross reference with unit of measure = "U" and Cross Reference No. = "N1"
      LibraryInventory.CreateItem(Item);
      LibraryPurchase.CreateVendor(Vendor);
      CreateItemCrossReference(ItemCrossRef,Item."No.",Item."Base Unit of Measure",Vendor."No.",'');

      // [GIVEN] Item cross reference with unit of measure = "U" and Cross Reference No. = "N2"
      CreateItemCrossReference(ItemCrossRef,Item."No.",Item."Base Unit of Measure",Vendor."No.",'');

      // [GIVEN] Set Lead Time Calculation in Item Vendor = "1D"
      EVALUATE(LeadTimeFormula,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      UpdateItemVendorLeadTime(Vendor."No.",Item."No.",LeadTimeFormula);

      // [WHEN] In Item Cross Reference change Cross Reference No. from "N2" to "N3"
      WITH ItemCrossRef DO
        RENAME("Item No.",'',"Unit of Measure","Cross-Reference Type","Cross-Reference Type No.",LibraryUtility.GenerateGUID);

      ItemVendor.GET(Vendor."No.",Item."No.",'');

      // [THEN] Item Vendor is updated: "Vendor Item No." = "N3", "Lead Time Calculation" = "1D"
      Assert.AreEqual(
        ItemCrossRef."Cross-Reference No.",ItemVendor."Vendor Item No.",
        STRSUBSTNO(WrongFieldValueErr,ItemVendor.FIELDCAPTION("Vendor Item No."),ItemVendor.TABLECAPTION));
      Assert.IsTrue(
        LeadTimeFormula = ItemVendor."Lead Time Calculation",
        STRSUBSTNO(WrongFieldValueErr,ItemVendor.FIELDCAPTION("Lead Time Calculation"),ItemVendor.TABLECAPTION));
    END;

    [Test]
    PROCEDURE TwoCrossReferencesWithDiffVendorsCreateTwoItemVendors@53();
    VAR
      Item@1000 : Record 27;
      ItemCrossRef@1001 : Record 5717;
      UnitOfMeasure@1002 : Record 204;
      Vendor@1004 : ARRAY [2] OF Record 23;
      ItemVendor@1005 : Record 99;
    BEGIN
      // [FEATURE] [Item Cross Reference]
      // [SCENARIO 361680] One linked Item Vendor created for each of two Item Cross References
      Initialize;

      // [GIVEN] Item cross-reference related to Vendor "V1"
      CreateItemWithTwoUnitsOfMeasure(Item,UnitOfMeasure);
      LibraryPurchase.CreateVendor(Vendor[1]);
      CreateItemCrossReference(ItemCrossRef,Item."No.",Item."Base Unit of Measure",Vendor[1]."No.",'');

      LibraryPurchase.CreateVendor(Vendor[2]);

      // [WHEN] The second cross-reference for the same item created with a link to Vendor "V2"
      CreateItemCrossReference(ItemCrossRef,Item."No.",Item."Base Unit of Measure",Vendor[2]."No.",'');

      // [THEN] Two Item Vendor records exist - one for each Vendor
      Assert.IsTrue(ItemVendor.GET(Vendor[1]."No.",Item."No.",''),ItemVendorMustExistErr);
      Assert.IsTrue(ItemVendor.GET(Vendor[2]."No.",Item."No.",''),ItemVendorMustExistErr);
    END;

    [Test]
    PROCEDURE ChangingVendorInItemCrossRefDeletesRelatedItemVendor@54();
    VAR
      Item@1000 : Record 27;
      ItemCrossRef@1001 : Record 5717;
      UnitOfMeasure@1002 : Record 204;
      Vendor@1004 : ARRAY [2] OF Record 23;
      ItemVendor@1005 : Record 99;
    BEGIN
      // [FEATURE] [Item Cross Reference]
      // [SCENARIO 361680] Item Vendor deleted after the linked cross reference renamed so that two item cross references refer to the same vendor after renaming
      Initialize;

      // [GIVEN] Item with two cross-references on different vendors "V1" and "V2"
      CreateItemWithTwoUnitsOfMeasure(Item,UnitOfMeasure);
      LibraryPurchase.CreateVendor(Vendor[1]);
      CreateItemCrossReference(ItemCrossRef,Item."No.",Item."Base Unit of Measure",Vendor[1]."No.",'');

      LibraryPurchase.CreateVendor(Vendor[2]);
      CreateItemCrossReference(ItemCrossRef,Item."No.",Item."Base Unit of Measure",Vendor[2]."No.",'');

      // [WHEN] Vendor "V2" in cross-reference is changed "V1"
      WITH ItemCrossRef DO
        RENAME("Item No.",'',"Unit of Measure","Cross-Reference Type",Vendor[1]."No.","Cross-Reference No.");

      // [THEN] Item Vendor for Vendor "V1" exists, Item Vendor for Vendor "V2" does not exist
      Assert.IsTrue(ItemVendor.GET(Vendor[1]."No.",Item."No.",''),ItemVendorMustExistErr);
      Assert.IsFalse(ItemVendor.GET(Vendor[2]."No.",Item."No.",''),ItemVendorMustNotExistErr);
    END;

    [Test]
    PROCEDURE ChangingUnitOfMeasureInCrosRefDoesNotChangeItemVendorLeadTime@40();
    VAR
      Item@1000 : Record 27;
      Vendor@1001 : Record 23;
      UnitOfMeasure@1002 : Record 204;
      ItemCrossRef@1003 : Record 5717;
      ItemVendor@1005 : Record 99;
      LeadTimeFormula@1004 : DateFormula;
    BEGIN
      // [FEATURE] [Item Cross Reference]
      // [SCENARIO 361680] Lead time calculation in Vendor Item is not changed after changing "Unit of Measure" in linked cross reference when two cross-ref.
      Initialize;

      // [GIVEN] Item with two units of measure "U1" and "U2"
      // [GIVEN] Item cross reference with unit of measure = "U1" and Cross Reference No. = "N"
      CreateItemWithTwoUnitsOfMeasure(Item,UnitOfMeasure);
      LibraryPurchase.CreateVendor(Vendor);
      CreateItemCrossReference(ItemCrossRef,Item."No.",Item."Base Unit of Measure",Vendor."No.",'');

      // [GIVEN] Set Lead Time Calculation in Item Vendor = '1D'
      EVALUATE(LeadTimeFormula,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      UpdateItemVendorLeadTime(Vendor."No.",Item."No.",LeadTimeFormula);

      // [WHEN] Set "Unit of Measure" = "U2" in item cross-reference
      WITH ItemCrossRef DO
        RENAME("Item No.",'',UnitOfMeasure.Code,"Cross-Reference Type","Cross-Reference Type No.","Cross-Reference No.");

      ItemVendor.GET(Vendor."No.",Item."No.",'');
      // [THEN] Vendor Item No. in Item Vendor = "N", Lead Time Calculation = "1D"
      Assert.AreEqual(
        ItemCrossRef."Cross-Reference No.",ItemVendor."Vendor Item No.",
        STRSUBSTNO(WrongFieldValueErr,ItemVendor.FIELDCAPTION("Vendor Item No."),ItemVendor.TABLECAPTION));
      Assert.IsTrue(
        LeadTimeFormula = ItemVendor."Lead Time Calculation",
        STRSUBSTNO(WrongFieldValueErr,ItemVendor.FIELDCAPTION("Lead Time Calculation"),ItemVendor.TABLECAPTION));
    END;

    [Test]
    PROCEDURE VendorItemNoCopiedFromCrossReference@43();
    VAR
      Item@1000 : Record 27;
      Vendor@1002 : Record 23;
      ItemCrossReference@1001 : Record 5717;
      PurchaseLine@1004 : Record 39;
    BEGIN
      // [FEATURE] [Item Cross Reference] [Vendor Item No.]
      // [SCENARIO 377506] "Vendor Item No." in purchase line should be copied from item cross reference if there is a cross reference with matching vendor and unit of measure
      Initialize;

      // [GIVEN] Create item "I" with base unit of measure "U"
      LibraryInventory.CreateItem(Item);
      // [GIVEN] Create vendor "V"
      LibraryPurchase.CreateVendor(Vendor);
      // [GIVEN] Create item cross reference for item "I", vendor "V" and unit of measure "U", set vendor item no. = "N"
      CreateItemCrossReference(ItemCrossReference,Item."No.",Item."Base Unit of Measure",Vendor."No.",'');

      // [WHEN] Create purchase order for vendor "V", item "I", unit of measure "U"
      CreatePurchaseOrder(PurchaseLine,Vendor."No.",Item."No.",'','');

      // [THEN] "Vendor Item No." in purchase line is "N"
      PurchaseLine.TESTFIELD("Vendor Item No.",ItemCrossReference."Cross-Reference No.");
    END;

    [Test]
    PROCEDURE VendorItemNoCopiedFromCrossReferenceMismatchingUoM@49();
    VAR
      Item@1004 : Record 27;
      ItemUnitOfMeasure@1005 : Record 5404;
      Vendor@1003 : Record 23;
      ItemCrossReference@1002 : Record 5717;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Item Cross Reference] [Item Unit of Measure] [Vendor Item No.]
      // [SCENARIO 377506] "Vendor Item No." in purch. line should be copied from item cross reference if there is no cross reference with matching UoM and no other item vendors
      Initialize;

      // [GIVEN] Create item "I" with base unit of measure "U1"
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Vendor Item No.",LibraryUtility.GenerateGUID);
      Item.MODIFY(TRUE);

      // [GIVEN] Create unit of measure "U2" for item "I"
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);

      // [GIVEN] Create vendor "V"
      LibraryPurchase.CreateVendor(Vendor);
      // [GIVEN] Create item cross reference for item "I", vendor "V" and unit of measure "U2", set vendor item no. = "N"
      CreateItemCrossReference(ItemCrossReference,Item."No.",ItemUnitOfMeasure.Code,Vendor."No.",'');

      // [WHEN] Create purchase order for vendor "V", item "I" and unit of measure "U1"
      CreatePurchaseOrder(PurchaseLine,Vendor."No.",Item."No.",'','');

      // [THEN] "Vendor Item No." in purchase line is "N"
      PurchaseLine.TESTFIELD("Vendor Item No.",ItemCrossReference."Cross-Reference No.");
    END;

    [Test]
    PROCEDURE VendorItemNoPriorityCrossReferenceItemVendor@52();
    VAR
      Item@1005 : Record 27;
      Vendor@1003 : Record 23;
      ItemCrossReference@1002 : Record 5717;
      ItemVendor@1006 : Record 99;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Item Cross Reference] [Item Vendor] [Vendor Item No.]
      // [SCENARIO 377506] "Vendor Item No." in purch. line should be copied from item cross reference if there is a cross reference with matching UoM and another item vendor for the same item
      Initialize;

      // [GIVEN] Create item "I" with base unit of measure "U"
      LibraryInventory.CreateItem(Item);
      // [GIVEN] Create vendor "V"
      LibraryPurchase.CreateVendor(Vendor);
      // [GIVEN] Create item vendor for item "I", vendor "V", set vendor item no. = "N1"
      MockItemVendor(ItemVendor,Vendor."No.",Item."No.",'');
      // [GIVEN] Create item cross-reference for item "I", vendor "V", unit of measure "U", set vendor item no. = "N2"
      CreateItemCrossReference(ItemCrossReference,Item."No.",Item."Base Unit of Measure",Vendor."No.",'');

      // [WHEN] Create purchase order for vendor "V", item "I", unit of measure "U"
      CreatePurchaseOrder(PurchaseLine,Vendor."No.",Item."No.",'','');

      // [THEN] "Vendor Item No." in purchase line is "N2"
      PurchaseLine.TESTFIELD("Vendor Item No.",ItemCrossReference."Cross-Reference No.");
    END;

    [Test]
    PROCEDURE VendorItemNoMismatchingCrossReferenceVendorItem@59();
    VAR
      Item@1006 : Record 27;
      ItemUnitOfMeasure@1005 : Record 5404;
      Vendor@1004 : Record 23;
      ItemCrossReference@1003 : Record 5717;
      ItemVendor@1002 : Record 99;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Item Cross Reference] [Item Vendor] [Vendor Item No.]
      // [SCENARIO 377506] "Vendor Item No." in purch. line should be copied from item item vendor catalog if there is a cross reference with mismatching UoM and another item vendor for the same item
      Initialize;

      // [GIVEN] Create item "I" with base unit of measure "U1"
      LibraryInventory.CreateItem(Item);
      // [GIVEN] Create unit of measure "U2" for item "I"
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);

      // [GIVEN] Create vendor "V"
      LibraryPurchase.CreateVendor(Vendor);
      // [GIVEN] Create item vendor for item "I", vendor "V", set vendor item no. = "N1"
      MockItemVendor(ItemVendor,Vendor."No.",Item."No.",'');
      // [GIVEN] Create item cross reference - vendor = "V", item = "I", unit of measure = "U2", set vendor item no. = "N2"
      CreateItemCrossReference(ItemCrossReference,Item."No.",ItemUnitOfMeasure.Code,Vendor."No.",'');

      // [WHEN] Create purchase order for vendor "V", item "I", unit of measure "U1"
      CreatePurchaseOrder(PurchaseLine,Vendor."No.",Item."No.",'','');

      // [THEN] "Vendor Item No." in purchase line is "N1"
      PurchaseLine.TESTFIELD("Vendor Item No.",ItemVendor."Vendor Item No.");
    END;

    [Test]
    PROCEDURE VendorItemNoPriorityItemVendorSKU@64();
    VAR
      Item@1006 : Record 27;
      Vendor@1004 : Record 23;
      ItemVendor@1002 : Record 99;
      Location@1007 : Record 14;
      SKU@1003 : Record 5700;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Item Vendor] [Stockkeeping Unit] [Vendor Item No.]
      // [SCENARIO 377506] "Vendor Item No." in purch. line should be copied from item item vendor catalog if there is an item vendor and SKU for the same item
      Initialize;

      // [GIVEN] Create item "I"
      LibraryInventory.CreateItem(Item);
      // [GIVEN] Create vendor "V"
      LibraryPurchase.CreateVendor(Vendor);
      // [GIVEN] Create item vendor for item "I" and vendor "V", set vendor item no. = "N1"
      MockItemVendor(ItemVendor,Vendor."No.",Item."No.",'');

      // [GIVEN] Create location "L" and stockkeeping unit for item "I", location "L". Set vendor item no. = "N2" in SKU
      LibraryWarehouse.CreateLocation(Location);
      CreateStockkeepingUnit(SKU,Item."No.",'',Location.Code);

      // [WHEN] Create purchase order: vendor = "V", item = "I", location = "L"
      CreatePurchaseOrder(PurchaseLine,Vendor."No.",Item."No.",Location.Code,'');

      // [THEN] Vendor item no. in purchase line = "N1"
      PurchaseLine.TESTFIELD("Vendor Item No.",ItemVendor."Vendor Item No.");
    END;

    [Test]
    PROCEDURE VendorItemNoItemVendorSKUDifferentVariants@77();
    VAR
      Item@1007 : Record 27;
      Vendor@1005 : Record 23;
      ItemVariant@1001 : ARRAY [2] OF Record 5401;
      ItemVendor@1004 : Record 99;
      Location@1003 : Record 14;
      SKU@1002 : Record 5700;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Item Vendor] [Stockkeeping Unit] [Vendor Item No.]
      // [SCENARIO 377506] "Vendor Item No." in purch. line should be copied from SKU if variant code in item vendor does not match the purch. line
      Initialize;

      // [GIVEN] Create item "I"
      LibraryInventory.CreateItem(Item);
      // [GIVEN] Create 2 item variants: "V1" and "V2"
      LibraryInventory.CreateItemVariant(ItemVariant[1],Item."No.");
      LibraryInventory.CreateItemVariant(ItemVariant[2],Item."No.");
      // [GIVEN] Create vendor "V"
      LibraryPurchase.CreateVendor(Vendor);
      // [GIVEN] Create item vendor: item = "I", vendor = "V", variant = "V1", set vendor item no. = "N1"
      MockItemVendor(ItemVendor,Vendor."No.",Item."No.",ItemVariant[1].Code);

      // [GIVEN] Create location "L"
      LibraryWarehouse.CreateLocation(Location);
      // [GIVEN] Create stockkeeping unit: item = "I", location = "L", variant = "V2", set vendor item no. = "N2"
      CreateStockkeepingUnit(SKU,Item."No.",ItemVariant[2].Code,Location.Code);

      // [WHEN] Create purchase order: vendor = "V", item = "I", location = "L", variant = "V2"
      CreatePurchaseOrder(PurchaseLine,Vendor."No.",Item."No.",Location.Code,ItemVariant[2].Code);

      // [THEN] Vendor item no. in purchase line = "N2"
      PurchaseLine.TESTFIELD("Vendor Item No.",SKU."Vendor Item No.");
    END;

    [Test]
    PROCEDURE VendorItemNoCopiedFromSKU@61();
    VAR
      Item@1007 : Record 27;
      Location@1003 : Record 14;
      SKU@1002 : Record 5700;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Stockkeeping Unit] [Location] [Vendor Item No.]
      // [SCENARIO 377506] Vendor item no. in purchase line should be copied from a stockkeeping unit if there is a SKU matching the purchase line
      Initialize;

      // [GIVEN] Create item "I"
      LibraryInventory.CreateItem(Item);
      // [GIVEN] Create location "L"
      LibraryWarehouse.CreateLocation(Location);
      // [GIVEN] Create stockkeeping unit with item = "I", location = "L", set vendor item no. = "N"
      CreateStockkeepingUnit(SKU,Item."No.",'',Location.Code);

      // [WHEN] Create purchase order for item "I", location "L"
      CreatePurchaseOrder(PurchaseLine,'',Item."No.",Location.Code,'');

      // [THEN] Vendor item no. in purchase line = "N"
      PurchaseLine.TESTFIELD("Vendor Item No.",SKU."Vendor Item No.");
    END;

    [Test]
    PROCEDURE VendorItemNoUpdatedFromCrossRefWhenChangingUoM@51();
    VAR
      Item@1000 : Record 27;
      ItemUnitOfMeasure@1001 : Record 5404;
      Vendor@1002 : Record 23;
      ItemCrossReference@1003 : ARRAY [2] OF Record 5717;
      PurchaseLine@1005 : Record 39;
    BEGIN
      // [FEATURE] [Item Cross Reference] [Item Unit of Measure] [Vendor Item No.]
      // [SCENARIO 377506] Vendor item no. in purchase line should be updated when changing the unit of measure and there are cross references matching both UoMs
      Initialize;

      // [GIVEN] Create item "I" with base unit of measure "U1"
      LibraryInventory.CreateItem(Item);
      // [GIVEN] Create unit of measure "U2" for item "I"
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);

      // [GIVEN] Create vendor "V"
      LibraryPurchase.CreateVendor(Vendor);

      // [GIVEN] Create item cross reference: item = "I", vendor = "V", unit of measure = "U1", set vendor item no. = "N1"
      CreateItemCrossReference(ItemCrossReference[1],Item."No.",Item."Base Unit of Measure",Vendor."No.",'');
      // [GIVEN] Create item cross reference: item = "I", vendor = "V", unit of measure = "U2", set vendor item no. = "N2"
      CreateItemCrossReference(ItemCrossReference[2],Item."No.",ItemUnitOfMeasure.Code,Vendor."No.",'');

      // [GIVEN] Create purchase order: vendor = "V", item = "I", unit of measure = "U1"
      CreatePurchaseOrder(PurchaseLine,Vendor."No.",Item."No.",'','');

      // [WHEN] Change unit of measure in purcahse line: new UoM = "U2"
      PurchaseLine.VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);

      // [THEN] Vendor item no. in purchase line = "N2"
      PurchaseLine.TESTFIELD("Vendor Item No.",ItemCrossReference[2]."Cross-Reference No.");
    END;

    [Test]
    PROCEDURE VendorItemNoNotUpdatedWhenChangingUoMMismatchingCrossRef@56();
    VAR
      Item@1005 : Record 27;
      ItemUnitOfMeasure@1004 : Record 5404;
      Vendor@1003 : Record 23;
      ItemCrossReference@1002 : Record 5717;
      ItemVendor@1006 : Record 99;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Item Cross Reference] [Item Unit of Measure] [Vendor Item No.]
      // [SCENARIO 377506] Vendor item no. in purchase line should not be updated from item vendor when changing the unit of measure and there is a mismatching cross reference and item vendor for the item
      Initialize;

      // [GIVEN] Create item "I" with base unit of measure "U1"
      LibraryInventory.CreateItem(Item);
      // [GIVEN] Create unit of measure "U2" for item "I"
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);
      // [GIVEN] Create vendor "V"
      LibraryPurchase.CreateVendor(Vendor);
      // [GIVEN] Create item vendor: item = "I", vendor = "V", vendor item no. = "N1"
      MockItemVendor(ItemVendor,Vendor."No.",Item."No.",'');
      // [GIVEN] Create cross reference: item = "I", vendor = "V", unit of measure = "U1", vendor item no. = "N2"
      CreateItemCrossReference(ItemCrossReference,Item."No.",Item."Base Unit of Measure",Vendor."No.",'');
      // [GIVEN] Create purchase order: vendor = "V", item = "I", unit of measure = "U1"
      CreatePurchaseOrder(PurchaseLine,Vendor."No.",Item."No.",'','');

      // [WHEN] Change unit of measure in purchase line. New unit of measure = "U2"
      PurchaseLine.VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);

      // [THEN] Vendor item no. in purchase line is updated. New item vendor no. = "N1"
      PurchaseLine.TESTFIELD("Vendor Item No.",ItemVendor."Vendor Item No.");
    END;

    [Test]
    PROCEDURE VendorItemNoUpdatedFromItemWhenChangingUoMMismatchingCrossRef@63();
    VAR
      Item@1005 : Record 27;
      ItemUnitOfMeasure@1004 : Record 5404;
      Vendor@1003 : Record 23;
      ItemCrossReference@1002 : Record 5717;
      ItemVendor@1006 : Record 99;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // [FEATURE] [Item Cross Reference] [Item Unit of Measure] [Vendor Item No.]
      // [SCENARIO 377506] Vendor item no. in purchase line should be copied from item card when changing the unit of measure and there is a mismatching cross reference
      Initialize;

      // [GIVEN] Create item "I" with base unit of measure "U1", Set vendor item no. = "N1"
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Vendor Item No.",LibraryUtility.GenerateGUID);
      Item.MODIFY(TRUE);

      // [GIVEN] Create unit of measure "U2" for item "I"
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);
      // [GIVEN] Create vendor "V"
      LibraryPurchase.CreateVendor(Vendor);
      // [GIVEN] Create cross reference: item = "I", vendor = "V", unit of measure = "U1", vendor item no. = "N2"
      CreateItemCrossReference(ItemCrossReference,Item."No.",Item."Base Unit of Measure",Vendor."No.",'');
      // [GIVEN] Delete all item vendors
      ItemVendor.SETRANGE("Item No.",Item."No.");
      ItemVendor.DELETEALL;

      // [GIVEN] Create purchase order: vendor = "V", item = "I", unit of measure = "U1"
      CreatePurchaseOrder(PurchaseLine,Vendor."No.",Item."No.",'','');

      // [WHEN] Change unit of measure in purchase line. New unit of measure = "U2"
      PurchaseLine.VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);

      // [THEN] Vendor item no. in purchase line is updated. New vendor item no. = "N1"
      PurchaseLine.TESTFIELD("Vendor Item No.",Item."Vendor Item No.");
    END;

    [Test]
    PROCEDURE VendorItemNoUpdatedFromSKUWhenChangingVariant@67();
    VAR
      Item@1000 : Record 27;
      Location@1001 : Record 14;
      ItemVariant@1002 : ARRAY [2] OF Record 5401;
      SKU@1003 : ARRAY [2] OF Record 5700;
      PurchaseLine@1005 : Record 39;
    BEGIN
      // [FEATURE] [Stockkeeping Unit] [Item Variant] [Location] [Vendor Item No.]
      // [SCENARIO 377506] Vendor item no. in purchase line should be updated when changing the variant code and there are matching stockkeeping units
      Initialize;

      // [GIVEN] Create item "I"
      LibraryInventory.CreateItem(Item);
      // [GIVEN] Create location "L"
      LibraryWarehouse.CreateLocation(Location);
      // [GIVEN] Create 2 item variants: "V1" and "V2"
      LibraryInventory.CreateItemVariant(ItemVariant[1],Item."No.");
      LibraryInventory.CreateItemVariant(ItemVariant[2],Item."No.");
      // [GIVEN] Create stockkeeping unit: item "I", location "L", variant "V1", set vendor item no. = "N1"
      CreateStockkeepingUnit(SKU[1],Item."No.",ItemVariant[1].Code,Location.Code);
      // [GIVEN] Create stockkeeping unit: item "I", location "L", variant "V2", set vendor item no. = "N2"
      CreateStockkeepingUnit(SKU[2],Item."No.",ItemVariant[2].Code,Location.Code);

      // [GIVEN] Create purchase order: item = "I", location = "L", variant = "V1"
      CreatePurchaseOrder(PurchaseLine,'',Item."No.",Location.Code,ItemVariant[1].Code);
      PurchaseLine.TESTFIELD("Vendor Item No.",SKU[1]."Vendor Item No.");

      // [WHEN] Change variant code in the purchase lin: new variant code = "V2"
      PurchaseLine.VALIDATE("Variant Code",ItemVariant[2].Code);

      // [THEN] Vendor item no. in purchase line = "N2"
      PurchaseLine.TESTFIELD("Vendor Item No.",SKU[2]."Vendor Item No.");
    END;

    [Test]
    PROCEDURE VendorItemNoCopiedFromItemCardWhenChangingVariantMismatchingSKU@70();
    VAR
      Item@1000 : Record 27;
      Location@1001 : Record 14;
      ItemVariant@1002 : ARRAY [2] OF Record 5401;
      PurchaseLine@1004 : Record 39;
      SKU@1005 : Record 5700;
    BEGIN
      // [FEATURE] [Stockkeeping Unit] [Item Variant] [Location] [Vendor Item No.]
      // [SCENARIO 377506] Vendor item no. in purchase line should be copied from item card when changing the variant code and new variant code does not match the SKU
      Initialize;

      // [GIVEN] Create item "I", set vendor item no. = "N1"
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Vendor Item No.",LibraryUtility.GenerateGUID);
      Item.MODIFY(TRUE);

      // [GIVEN] Create location "L"
      LibraryWarehouse.CreateLocation(Location);
      // [GIVEN] Create 2 item variants "V1" and "V2"
      LibraryInventory.CreateItemVariant(ItemVariant[1],Item."No.");
      LibraryInventory.CreateItemVariant(ItemVariant[2],Item."No.");
      // [GIVEN] Create stockkeeping unit: item = "I", location = "L", variant = "V1", set vendor item no. = "N2"
      CreateStockkeepingUnit(SKU,Item."No.",ItemVariant[1].Code,Location.Code);

      // [GIVEN] Create purchase order: item = "I", location = "L", variant = "V1"
      CreatePurchaseOrder(PurchaseLine,'',Item."No.",Location.Code,ItemVariant[1].Code);
      PurchaseLine.TESTFIELD("Vendor Item No.",SKU."Vendor Item No.");

      // [WHEN] Change variant code in purchase line: new variant code = "V2"
      PurchaseLine.VALIDATE("Variant Code",ItemVariant[2].Code);

      // [THEN] Vendor item no. in purchase line = "N1"
      PurchaseLine.TESTFIELD("Vendor Item No.",Item."Vendor Item No.");
    END;

    [Test]
    PROCEDURE VendorItemNoUpdatedFromItemVendorWhenChangingUoM@95();
    VAR
      Item@1000 : Record 27;
      Vendor@1001 : Record 23;
      ItemVariant@1003 : Record 5401;
      ItemVendor@1002 : Record 99;
      ItemUnitOfMeasure@1004 : Record 5404;
      ItemCrossReference@1005 : Record 5717;
      PurchaseLine@1006 : Record 39;
    BEGIN
      // [FEATURE] [Stockkeeping Unit] [Item Variant] [Location] [Item Cross Reference] [Unit of Measure] [Vendor Item No.]
      // [SCENARIO 377506] Vendor item no. in purchase line should be copied from item vendor catalog when changing UoM, cross ref. does not match the new UoM, there is a matching item vendor
      Initialize;

      // [GIVEN] Create item "I" with base unit of measure "U1"
      LibraryInventory.CreateItem(Item);
      // [GIVEN] Create vendor "V"
      LibraryPurchase.CreateVendor(Vendor);
      // [GIVEN] Create item variant: item = "I", vendor = "V"
      LibraryInventory.CreateItemVariant(ItemVariant,Item."No.");
      // [GIEN] Create item vendor: vendor = "V", item = "I", variant = "I", set vendor item no. = "N1"
      MockItemVendor(ItemVendor,Vendor."No.",Item."No.",ItemVariant.Code);

      // [GIVEN] Create unit of measure "U2" for item "I"
      LibraryInventory.CreateItemUnitOfMeasureCode(ItemUnitOfMeasure,Item."No.",1);
      // [GIVEN] Create item cross reference: item = "I", unit of measure = "U1", variant = "V", vendor item no. = "N2"
      CreateItemCrossReference(ItemCrossReference,Item."No.",Item."Base Unit of Measure",Vendor."No.",ItemVariant.Code);

      // [GIVEN] Create purchase order: vendor = "V", item = "I", variant = "V", unit of measure = "U1"
      CreatePurchaseOrder(PurchaseLine,Vendor."No.",Item."No.",'',ItemVariant.Code);
      PurchaseLine.TESTFIELD("Vendor Item No.",ItemCrossReference."Cross-Reference No.");

      // [WHEN] Change unit of measure in purchase line: new unit of measure code = "U2"
      PurchaseLine.VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);

      // [THEN] Vendor item no. in purchase line = "N1"
      PurchaseLine.TESTFIELD("Vendor Item No.",ItemVendor."Vendor Item No.");
    END;

    [Test]
    PROCEDURE ItemCrossReferencesDescription@50();
    VAR
      Item@1000 : Record 27;
      Vendor@1001 : Record 23;
      ItemVendor@1002 : Record 99;
      ItemCrossReference@1003 : Record 5717;
    BEGIN
      // [FEATURE] [Item Cross Reference]
      // [SCENARIO 378078] Description of Item Cross References should be taken from Item if there is no Translation
      Initialize;

      // [GIVEN] Item with Description = "X"
      LibraryInventory.CreateItem(Item);

      // [WHEN] Insert Item Vendor
      LibraryPurchase.CreateVendor(Vendor);
      CreateItemVendor(ItemVendor,Vendor."No.",Item."No.");

      // [THEN] Item Cross Reference is created with Description = "X"
      ItemCrossReference.SETRANGE("Item No.",Item."No.");
      ItemCrossReference.FINDFIRST;
      Assert.AreEqual(Item.Description,ItemCrossReference.Description,DescriptionErr);
    END;

    [Test]
    PROCEDURE ItemCrossReferencesDescriptionTranslation@72();
    VAR
      Item@1000 : Record 27;
      Vendor@1001 : Record 23;
      ItemVendor@1002 : Record 99;
      ItemCrossReference@1003 : Record 5717;
      ItemTranslationDescription@1004 : Text[50];
    BEGIN
      // [FEATURE] [Item Cross Reference]
      // [SCENARIO 378078] Description of Item Cross References should be taken from Item Translation if there is Translation
      Initialize;

      // [GIVEN] Item with Description = "X"
      LibraryInventory.CreateItem(Item);

      // [GIVEN] Item Translation with Description = "Y"
      ItemTranslationDescription := CreateVendorWithItemTranslationDescription(Vendor,Item."No.");

      // [WHEN] Insert Item Vendor
      CreateItemVendor(ItemVendor,Vendor."No.",Item."No.");

      // [THEN] Item Cross Reference is created with Description = "Y"
      ItemCrossReference.SETRANGE("Item No.",Item."No.");
      ItemCrossReference.FINDFIRST;
      Assert.AreEqual(ItemTranslationDescription,ItemCrossReference.Description,DescriptionErr);
    END;

    LOCAL PROCEDURE Initialize@22();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF Initialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;
      NoSeriesSetup;
      CreateLocationSetup;
      ItemJournalSetup;
      RevaluationJournalSetup;
      COMMIT;

      Initialized := TRUE
    END;

    LOCAL PROCEDURE ItemJournalSetup@9();
    BEGIN
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE NoSeriesSetup@74();
    VAR
      PurchasesPayablesSetup@1003 : Record 312;
      SalesReceivablesSetup@1004 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);

      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationSetup@131();
    BEGIN
      // Location - Blue.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationBlue);

      // Location - Red.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationRed);

      // Location In - Transit.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationInTransit);
      LocationInTransit.VALIDATE("Use As In-Transit",TRUE);
      LocationInTransit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RevaluationJournalSetup@86();
    BEGIN
      RevaluationItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(RevaluationItemJournalTemplate,RevaluationItemJournalTemplate.Type::Revaluation);

      RevaluationItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(RevaluationItemJournalBatch,RevaluationItemJournalTemplate.Type,
        RevaluationItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE UpdateInventorySetup@11(AverageCostPeriod@1001 : Option);
    VAR
      InventorySetup@1004 : Record 313;
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Average Cost Period",AverageCostPeriod);
      InventorySetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@12(VAR Item@1000 : Record 27;LocationFilter@1001 : Code[10];ItemCostingMethod@1003 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Costing Method",ItemCostingMethod);
      Item.VALIDATE("Location Filter",LocationFilter);
      Item.VALIDATE("Unit Cost",LibraryRandom.RandDec(100,2));
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDimensionWithValue@66(VAR DimensionValue@1000 : Record 349);
    VAR
      Dimension@1001 : Record 348;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
    END;

    LOCAL PROCEDURE CreateVendorWithItemTranslationDescription@98(VAR Vendor@1000 : Record 23;ItemNo@1001 : Code[20]) : Text[50];
    VAR
      Language@1002 : Record 8;
    BEGIN
      Language.FINDFIRST;
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Language Code",Language.Code);
      Vendor.MODIFY(TRUE);
      EXIT(CreateItemTranslation(ItemNo,Vendor."Language Code"));
    END;

    LOCAL PROCEDURE CreateItemCrossReference@34(VAR ItemCrossRef@1003 : Record 5717;ItemNo@1000 : Code[20];UoMCode@1001 : Code[10];VendorNo@1002 : Code[20];VariantCode@1004 : Code[10]);
    BEGIN
      WITH ItemCrossRef DO BEGIN
        VALIDATE("Item No.",ItemNo);
        VALIDATE("Unit of Measure",UoMCode);
        VALIDATE("Cross-Reference Type","Cross-Reference Type"::Vendor);
        VALIDATE("Cross-Reference Type No.",VendorNo);
        VALIDATE("Variant Code",VariantCode);
        VALIDATE("Cross-Reference No.",LibraryUtility.GenerateGUID);
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateItemJournalLine@15(VAR ItemJournalLine@1000 : Record 83;EntryType@1001 : Option;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;UnitCost@1004 : Decimal);
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Unit Cost",UnitCost);
      ItemJournalLine.VALIDATE("Posting Date",WORKDATE);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE MockItemVendor@55(VAR ItemVendor@1000 : Record 99;VendorNo@1001 : Code[20];ItemNo@1002 : Code[20];VariantCode@1003 : Code[10]);
    BEGIN
      WITH ItemVendor DO BEGIN
        INIT;
        "Vendor No." := VendorNo;
        "Item No." := ItemNo;
        "Variant Code" := VariantCode;
        EVALUATE("Lead Time Calculation",STRSUBSTNO('<%1D>',LibraryRandom.RandInt(10)));
        "Vendor Item No." := LibraryUtility.GenerateGUID;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateItemVendor@47(VAR ItemVendor@1003 : Record 99;VendorNo@1002 : Code[20];ItemNo@1001 : Code[20]);
    BEGIN
      WITH ItemVendor DO BEGIN
        INIT;
        "Vendor No." := VendorNo;
        "Item No." := ItemNo;
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateItemTranslation@73(ItemNo@1001 : Code[20];LanguageCode@1003 : Code[10]) : Text[50];
    VAR
      ItemTranslation@1000 : Record 30;
    BEGIN
      WITH ItemTranslation DO BEGIN
        INIT;
        VALIDATE("Item No.",ItemNo);
        VALIDATE("Language Code",LanguageCode);
        VALIDATE(Description,ItemNo + LanguageCode);
        INSERT(TRUE);
        EXIT(Description);
      END;
    END;

    LOCAL PROCEDURE CreateItemWithTwoUnitsOfMeasure@32(VAR Item@1000 : Record 27;VAR UnitOfMeasure@1001 : Record 204);
    VAR
      ItemUnitOfMeasure@1002 : Record 5404;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",UnitOfMeasure.Code,1);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@81(VAR PurchaseLine@1000 : Record 39;VendorNo@1001 : Code[20];ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];VariantCode@1004 : Code[10]);
    VAR
      PurchaseHeader@1005 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandInt(100));
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Variant Code",VariantCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRevaluationJournal@20(VAR ItemJournalLine@1000 : Record 83);
    BEGIN
      LibraryInventory.ClearItemJournal(RevaluationItemJournalTemplate,RevaluationItemJournalBatch);
      LibraryInventory.CreateItemJnlLineWithNoItem(
        ItemJournalLine,RevaluationItemJournalBatch,RevaluationItemJournalBatch."Journal Template Name",
        RevaluationItemJournalBatch.Name,ItemJournalLine."Entry Type"::"Positive Adjmt.");
    END;

    LOCAL PROCEDURE CreateStockkeepingUnit@71(VAR SKU@1000 : Record 5700;ItemNo@1001 : Code[20];VariantCode@1003 : Code[10];LocationCode@1002 : Code[10]);
    BEGIN
      SKU."Location Code" := LocationCode;
      SKU."Item No." := ItemNo;
      SKU."Variant Code" := VariantCode;
      SKU."Vendor Item No." := LibraryUtility.GenerateGUID;
      SKU.INSERT;
    END;

    LOCAL PROCEDURE CreateTransferRoute@119(TransferFrom@1000 : Code[10];TransferTo@1001 : Code[10];InTransit@1002 : Code[10]);
    VAR
      TransferRoute@1003 : Record 5742;
    BEGIN
      IF NOT TransferRoute.GET(TransferFrom,TransferTo) THEN BEGIN  // Check Transfer Route exists.
        LibraryWarehouse.CreateTransferRoute(TransferRoute,TransferFrom,TransferTo);
        TransferRoute.VALIDATE("In-Transit Code",InTransit);
        TransferRoute.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrder@35(VAR TransferHeader@1000 : Record 5740;VAR TransferLine@1001 : Record 5741;ItemNo@1006 : Code[20];TransferFrom@1002 : Code[10];TransferTo@1003 : Code[10];InTransit@1004 : Code[10];Quantity@1005 : Decimal);
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,TransferFrom,TransferTo,InTransit);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateTransferOrderWithReservation@25(VAR TransferLine@1000 : Record 5741;Qty@1001 : Decimal;ItemNo@1002 : Code[20]);
    VAR
      TransferHeader@1003 : Record 5740;
      Direction@1004 : 'Outbound,Inbound';
      FullReservation@1005 : Boolean;
    BEGIN
      CLEAR(TransferHeader);
      LibraryWarehouse.CreateTransferHeader(TransferHeader,LocationBlue.Code,LocationRed.Code,LocationInTransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Qty);
      ReservationManagement.SetTransferLine(TransferLine,Direction::Outbound);
      ReservationManagement.AutoReserve(FullReservation,'',TransferLine."Shipment Date",Qty,Qty);
    END;

    LOCAL PROCEDURE UpdateItemWithDimensions@24(VAR Item@1000 : Record 27;VAR DimensionValue@1001 : Record 349;VAR DimensionValue2@1003 : Record 349;DimensionCode@1002 : Code[20];DimensionCode2@1004 : Code[20]);
    VAR
      DefaultDimension@1005 : Record 352;
    BEGIN
      LibraryDimension.CreateDimensionValue(DimensionValue,DimensionCode);
      LibraryDimension.CreateDimensionValue(DimensionValue2,DimensionCode2);

      // Item with dimensions.
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Item,Item."No.",DimensionCode,DimensionValue.Code);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Item,Item."No.",DimensionCode2,DimensionValue2.Code);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@65(ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Quantity,0);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE PurchaseDocumentWithDimSetup@23(VAR Item@1000 : Record 27;VAR DimensionValue@1001 : Record 349;VAR DimensionValue2@1003 : Record 349);
    VAR
      PurchaseHeader@1012 : Record 38;
      PurchaseLine@1011 : Record 39;
      LineDimSetID@1004 : Integer;
      VendorNo@1002 : Code[20];
    BEGIN
      VendorNo := SelectVendorWithDimension;
      CreateItem(Item,'',Item."Costing Method"::FIFO);

      // Create purchase invoice.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));

      // Retrieve Dimension Set ID from the Purchase line.
      LineDimSetID := PurchaseLine."Dimension Set ID";

      // Create Dimension with different Dimension Value.
      CreateDimensionWithValue(DimensionValue);
      CreateDimensionWithValue(DimensionValue2);

      LineDimSetID := LibraryDimension.CreateDimSet(LineDimSetID,DimensionValue."Dimension Code",DimensionValue.Code);
      LineDimSetID := LibraryDimension.CreateDimSet(LineDimSetID,DimensionValue2."Dimension Code",DimensionValue2.Code);

      // Link to new dimension set ID in Purchase line.
      PurchaseLine.VALIDATE("Dimension Set ID",LineDimSetID);
      PurchaseLine.MODIFY(TRUE);

      // Post invoice.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      // Run adjust cost item entries.
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');
    END;

    LOCAL PROCEDURE SelectVendorWithDimension@38() VendorNo : Code[20];
    VAR
      DimensionValue@1001 : Record 349;
      DefaultDimension@1002 : Record 352;
    BEGIN
      VendorNo := LibraryPurchase.CreateVendorNo;
      IF LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::Vendor,VendorNo) THEN
        EXIT;
      CreateDimensionWithValue(DimensionValue);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Vendor,VendorNo,DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE UpdateDimensionOnTransferOrder@10(VAR DimensionValue@1002 : Record 349;No@1001 : Code[20]);
    VAR
      TransferOrder@1000 : TestPage 5740;
    BEGIN
      CreateDimensionWithValue(DimensionValue);
      LibraryVariableStorage.Enqueue(DimensionValue."Dimension Code");  // Enqueue Value for Page Handler - EditDimensionSetEntriesPageHandler.
      LibraryVariableStorage.Enqueue(DimensionValue.Code);  // Enqueue Value for Page Handler - EditDimensionSetEntriesPageHandler.

      // Use Page Testability to Update Dimension on Transfer Order. Dimension Set ID - OnLookup trigger code required.
      TransferOrder.OPENEDIT;
      TransferOrder.FILTER.SETFILTER("No.",No);
      TransferOrder.Dimensions.INVOKE;
    END;

    LOCAL PROCEDURE FindTransferShipmentHeader@36(VAR TransferShipmentHeader@1000 : Record 5744;TransferOrderNo@1001 : Code[20]);
    BEGIN
      TransferShipmentHeader.SETRANGE("Transfer Order No.",TransferOrderNo);
      TransferShipmentHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateItemWithDimension@42(VAR Item@1000 : Record 27;VAR DimensionValue@1001 : Record 349);
    VAR
      DefaultDimension@1002 : Record 352;
    BEGIN
      CreateItem(Item,'',Item."Costing Method"::FIFO);
      CreateDimensionWithValue(DimensionValue);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Item,Item."No.",DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE OpenItemCard@41(VAR ItemCard@1000 : TestPage 30;No@1001 : Code[20]);
    BEGIN
      ItemCard.OPENEDIT;
      ItemCard.FILTER.SETFILTER("No.",No);
    END;

    LOCAL PROCEDURE AreSameMessages@2(Message@1001 : Text[1024];Message2@1000 : Text[1024]) : Boolean;
    BEGIN
      EXIT(STRPOS(Message,Message2) > 0);
    END;

    LOCAL PROCEDURE UpdateItemVendorLeadTime@37(VendorNo@1000 : Code[20];ItemNo@1001 : Code[20];LeadTimeFormula@1002 : DateFormula);
    VAR
      ItemVendor@1003 : Record 99;
    BEGIN
      ItemVendor.GET(VendorNo,ItemNo,'');
      ItemVendor.VALIDATE("Lead Time Calculation",LeadTimeFormula);
      ItemVendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyUnitCostItemJournal@5(Item@1002 : Record 27);
    VAR
      ItemJournalLine@1005 : Record 83;
      GeneralLedgerSetup@1006 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",
        ItemJournalBatch.Name,ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandDec(100,2));

      // Verify.
      ItemJournalLine.TESTFIELD(
        "Unit Amount",ROUND(Item."Standard Cost" / (1 + Item."Indirect Cost %" / 100),
          GeneralLedgerSetup."Unit-Amount Rounding Precision"));
      ItemJournalLine.TESTFIELD("Unit Cost",Item."Standard Cost");
    END;

    LOCAL PROCEDURE VerifyDimensions@8(VAR ItemJournalLine@1003 : Record 83;DimCode1@1005 : Code[20];DimCode2@1006 : Code[20];DimValue1@1002 : Code[20];DimValue2@1004 : Code[20]);
    VAR
      DimensionSetEntry@1001 : Record 480;
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",RevaluationItemJournalTemplate.Name);
      ItemJournalLine.FINDLAST;
      DimensionSetEntry.SETRANGE("Dimension Set ID",ItemJournalLine."Dimension Set ID");
      DimensionSetEntry.SETRANGE("Dimension Code",DimCode1);
      DimensionSetEntry.FINDFIRST;
      Assert.IsFalse(
        DimensionSetEntry."Dimension Value Code" <> DimValue1,STRSUBSTNO(DimErr,DimValue1,DimensionSetEntry."Dimension Value Code"));

      CLEAR(DimensionSetEntry);
      DimensionSetEntry.SETRANGE("Dimension Set ID",ItemJournalLine."Dimension Set ID");
      DimensionSetEntry.SETRANGE("Dimension Code",DimCode2);
      DimensionSetEntry.FINDFIRST;
      Assert.IsFalse(
        DimensionSetEntry."Dimension Value Code" <> DimValue2,STRSUBSTNO(DimErr,DimValue2,DimensionSetEntry."Dimension Value Code"));
    END;

    LOCAL PROCEDURE VerifyDimensionSetEntry@27(DimensionSetID@1001 : Integer;DimensionCode@1002 : Code[20];DimensionValueCode@1003 : Code[20]);
    VAR
      DimensionSetEntry@1000 : Record 480;
    BEGIN
      DimensionSetEntry.GET(DimensionSetID,DimensionCode);
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DimensionValueCode);
    END;

    LOCAL PROCEDURE VerifyDimensionOnTransferShipmentLine@33(TransferOrderNo@1001 : Code[20];ItemNo@1002 : Code[20];DimensionValue@1003 : Record 349);
    VAR
      TransferShipmentHeader@1000 : Record 5744;
      TransferShipmentLine@1004 : Record 5745;
    BEGIN
      FindTransferShipmentHeader(TransferShipmentHeader,TransferOrderNo);
      TransferShipmentLine.SETRANGE("Document No.",TransferShipmentHeader."No.");
      TransferShipmentLine.SETRANGE("Item No.",ItemNo);
      TransferShipmentLine.FINDFIRST;
      VerifyDimensionSetEntry(TransferShipmentLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE VerifyDimensionOnTransferReceipt@44(TransferOrderNo@1000 : Code[20];DimensionValue@1002 : Record 349;DimensionValue2@1003 : Record 349;ItemNo@1005 : Code[20]);
    VAR
      TransferReceiptHeader@1001 : Record 5746;
    BEGIN
      VerifyDimensionOnTransferReceiptHeader(TransferReceiptHeader,TransferOrderNo,DimensionValue2);
      VerifyDimensionOnTransferReceiptLine(TransferReceiptHeader."No.",ItemNo,DimensionValue,DimensionValue2);
    END;

    LOCAL PROCEDURE VerifyDimensionOnTransferReceiptHeader@45(VAR TransferReceiptHeader@1001 : Record 5746;TransferOrderNo@1002 : Code[20];DimensionValue@1000 : Record 349);
    BEGIN
      TransferReceiptHeader.SETRANGE("Transfer Order No.",TransferOrderNo);
      TransferReceiptHeader.FINDFIRST;
      VerifyDimensionSetEntry(TransferReceiptHeader."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE VerifyDimensionOnTransferReceiptLine@46(DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20];DimensionValue@1003 : Record 349;DimensionValue2@1004 : Record 349);
    VAR
      TransferReceiptLine@1000 : Record 5747;
    BEGIN
      TransferReceiptLine.SETRANGE("Document No.",DocumentNo);
      TransferReceiptLine.SETRANGE("Item No.",ItemNo);
      TransferReceiptLine.FINDFIRST;
      VerifyDimensionSetEntry(TransferReceiptLine."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code);
      VerifyDimensionSetEntry(TransferReceiptLine."Dimension Set ID",DimensionValue2."Dimension Code",DimensionValue2.Code);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTRUE@39(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      Assert.IsTrue(AreSameMessages(Question,ExpectedMessage),STRSUBSTNO(ErrorDoNotMatchErr,ExpectedMessage,Question));
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerOnChangeDimension@75(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@3(Message@1000 : Text[1024]);
    VAR
      ExpectedMessage@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      Assert.IsTrue(AreSameMessages(Message,ExpectedMessage),STRSUBSTNO(ErrorDoNotMatchErr,ExpectedMessage,Message));
    END;

    [ModalPageHandler]
    PROCEDURE EditDimensionSetEntriesPageHandler@57(VAR EditDimensionSetEntries@1000 : TestPage 480);
    VAR
      DimensionCode@1001 : Variant;
      DimensionValue@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(DimensionCode);  // Dequeue variable.
      LibraryVariableStorage.Dequeue(DimensionValue);  // Dequeue variable.

      EditDimensionSetEntries."Dimension Code".SETVALUE(DimensionCode);
      EditDimensionSetEntries.DimensionValueCode.SETVALUE(DimensionValue);
      EditDimensionSetEntries.OK.INVOKE;
    END;

    LOCAL PROCEDURE ModifyShipmentDateOnTransferHeader@26(DocumentNo@1000 : Code[20]);
    VAR
      TransferHeader@1001 : Record 5740;
    BEGIN
      TransferHeader.GET(DocumentNo);
      TransferHeader.VALIDATE("Shipment Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE));
      TransferHeader.MODIFY(TRUE);
    END;

    BEGIN
    {
      // [FEATURE] [Inventory] [SCM]
      Unsupported version tags:
      GB: Unable to Execute

      Tests for Inventory unit tests:
       1. Test to verify no error message pops up after Shipment Date is updated on Transfer Order with Reserve from ILE.

      Covers Test cases :
      ------------------------------------------------
       Test Function Name                    TFS ID
      ------------------------------------------------
       B7425_AmtAtLowerBound                 142621
       B7425_AmtLessThanUpperBound           142621
       B7425_AmtLargerThanUpperBound         142621
       B7425_AmtLessThanLowerBound           142621
       B7425_AmtErrorDivisionByZero          142621
       B29325_StockKeepingUnitError          142619
       B29388_UpdateAverageCostPeriod        143023
       B43701_InvoiceDimInReval              143467
       B43701_InvoiceAndItemDimReval         143467
       B43701_ItemDimInReval                 143467

      Covers Test cases : 294786
      ------------------------------------------------------------
       Test Function Name                                 TFS ID
      ------------------------------------------------------------
      DimensionOnTransferShipment                        127575
      DimensionOnTransferReceiptWithNewDimension         127575

      Covers Test cases : 298984
      --------------------------------------------------------------------------
       Test Function Name                                                TFS ID
      --------------------------------------------------------------------------
       ItemWithZeroRoundingPrecisionError                                229552
       ItemWithNegativeRoundingPrecisionError                            229552
       ItemWithRoundingPrecisionMoreThanFiveDecimalPlaceValueError       229552
       ItemWithRoundingPrecisionEqualAndLessThanFiveDecimalPlaceValue    229552

      Covers Test cases : 88670
      --------------------------------------------------------------------------
       Test Function Name                                                TFS ID
      --------------------------------------------------------------------------
       UpdateShipmentDateOnReservedTransferOrder                          88670
    }
    END.
  }
}

