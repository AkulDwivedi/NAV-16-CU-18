OBJECT Codeunit 134998 Reminder - Add. Fee Setup
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1002 : Codeunit 130000;
      LibraryERM@1001 : Codeunit 131300;
      LibraryUtility@1007 : Codeunit 131000;
      LibraryRandom@1003 : Codeunit 130440;
      UnexpectedAddFeeAmountErr@1005 : TextConst 'ENU=Unexpected Additional Fee Amount. Expected %1, Actual %2.';
      AddFeeCalculationType@1006 : 'Fixed,Single Dynamic,Accumulated Dynamic';
      CaptionErr@1000 : TextConst 'ENU=Page Captions must match.';
      ReminderTermsTxt@1008 : TextConst 'ENU=Reminder Terms:';
      ReminderLevelTxt@1004 : TextConst 'ENU=Level:';
      AddFeePerLineTxt@1009 : TextConst 'ENU=Edit - Additional Fee Setup - Additional Fee per Line Setup -';

    [Test]
    PROCEDURE AccumulatedDynamicRemAmtLessThanThresholdRemAmt@1085();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      RemainingAmount@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] Remaining amount is less than Threshold Remaining Amount defined in Additional Fee Setup
      // and Calculation Type is Accumulated Dynamic then Add. Fee Amount = 0

      // [GIVEN] Remaining Amount less than Threshold Remaining Amount
      AddFeeCalculationType := AddFeeCalculationType::"Accumulated Dynamic";
      RemainingAmount := LibraryRandom.RandDec(100,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup,RemainingAmount + 1,'',FALSE,AddFeeCalculationType);

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,RemainingAmount);

      // [THEN] Add. Fee is 0
      Assert.AreEqual(0,AddFeeAmount,STRSUBSTNO(UnexpectedAddFeeAmountErr,0,AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE AccumulatedDynamicAddFeeFixedFeeAmount@1091();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      AddFeeAmountSetup@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Setup contains Additional Fee Amount >0 and Additional Fee % = 0
      // and Calculation Type is Accumulated Dynamic then calculated amount is Additional Fee Amount

      // [GIVEN] Additional Fee Setup conatins Additional Fee Amount <>0 and Additional Fee % = 0
      AddFeeCalculationType := AddFeeCalculationType::"Accumulated Dynamic";
      AddFeeAmountSetup := LibraryRandom.RandDec(100,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup,0,'',FALSE,AddFeeCalculationType);
      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        0,// Min. Add. Fee Amount
        AddFeeAmountSetup + 1,// Max. Add. Fee Amount
        AddFeeAmountSetup,// Add. Fee Amount
        0);// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,LibraryRandom.RandDec(100,2));

      // [THEN] then calculated amount is Additional Fee Amount defined in Add. Fee Setup
      Assert.AreEqual(AdditionalFeeSetup."Additional Fee Amount",AddFeeAmount,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,AdditionalFeeSetup."Additional Fee Amount",AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE AccumulatedDynamicAddFeePercentage@1113();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      AddFeePerc@1003 : Decimal;
      RemainingAmount@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Setup contains Additional Fee Amount  = 0 and Additional Fee % > 0
      // and Calculation Type is Accumulated Dynamic then Add. Fee calculation is based on Additional Fee %

      // [GIVEN] Additional Fee Setup conatins Additional Fee Amount = 0 and Additional Fee % > 0
      AddFeeCalculationType := AddFeeCalculationType::"Accumulated Dynamic";
      RemainingAmount := LibraryRandom.RandDec(99,2);
      AddFeePerc := LibraryRandom.RandDec(100,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup,0,'',FALSE,AddFeeCalculationType);
      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        0,// Min. Add. Fee Amount
        AddFeePerc * RemainingAmount,// Max. Add. Fee Amount
        0,// Add. Fee Amount
        AddFeePerc);// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,RemainingAmount);

      // [THEN] then calculated amount is Remaining Amount multiplied by Additional Fee %
      Assert.AreEqual(AdditionalFeeSetup."Additional Fee %" * RemainingAmount / 100,AddFeeAmount,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,AdditionalFeeSetup."Additional Fee Amount",AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE AccumulatedDynamicAddFeeAmountLessThanMin@1099();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      AddFeeAmountSetup@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Amount calculated from Additional Fee Setup is less than Min. Add. Fee Amount
      // and Calculation Type is Accumulated Dynamic then calculated amount is equal to Min. Add. Fee Amount

      // [GIVEN] Additional Fee Amount defined by Additional Fee Setup is less than Min. Add. Fee Amount
      AddFeeCalculationType := AddFeeCalculationType::"Accumulated Dynamic";
      AddFeeAmountSetup := LibraryRandom.RandDec(100,2);

      CreateAddFeeSetupUT(AdditionalFeeSetup,0,'',FALSE,AddFeeCalculationType);
      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        AddFeeAmountSetup + 1,// Min. Add. Fee Amount
        0,// Max. Add. Fee Amount
        AddFeeAmountSetup,// Add. Fee Amount
        0);// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,LibraryRandom.RandDec(100,2));

      // then calculated amount is equal to Min. Add. Fee Amount
      Assert.AreEqual(AddFeeAmountSetup + 1,AddFeeAmount,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,AddFeeAmountSetup + 1,AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE AccumulatedDynamicAddFeeAmountEqualToMin@1096();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      AddFeeAmountSetup@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Amount calculated from Additional Fee Setup is equal to Min. Add. Fee Amount
      // and Calculation Type is Accumulated Dynamic then calculated amount is 0

      // [GIVEN] Additional Fee Amount defined by Additional Fee Setup is equal to Min. Add. Fee Amount
      AddFeeCalculationType := AddFeeCalculationType::"Accumulated Dynamic";
      AddFeeAmountSetup := LibraryRandom.RandDec(100,2);

      CreateAddFeeSetupUT(AdditionalFeeSetup,0,'',FALSE,AddFeeCalculationType);
      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        AddFeeAmountSetup,// Min. Add. Fee Amount
        AddFeeAmountSetup + 1,// Max. Add. Fee Amount
        AddFeeAmountSetup,// Add. Fee Amount
        0);// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,LibraryRandom.RandDec(100,2));

      // [THEN] Add. Fee is Min. Add. Fee Amount
      Assert.AreEqual(AddFeeAmountSetup,AddFeeAmount,STRSUBSTNO(UnexpectedAddFeeAmountErr,AddFeeAmountSetup,AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE AccumulatedDynamicAddFeeAmountBiggerThanMax@1102();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      AddFeeAmountSetup@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Amount calculated from Additional Fee Setup is bigger than Max. Add. Fee Amount
      // and Calculation Type is Accumulated Dynamic then calculated amount is equal to Max. Add. Fee Amount

      // [GIVEN] When Additional Fee Amount calculated from Additional Fee Setup is bigger than Max. Add. Fee Amount
      AddFeeCalculationType := AddFeeCalculationType::"Accumulated Dynamic";
      AddFeeAmountSetup := LibraryRandom.RandDec(100,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup,0,'',FALSE,AddFeeCalculationType);
      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        0,// Min. Add. Fee Amount
        AddFeeAmountSetup - 1,// Max. Add. Fee Amount
        AddFeeAmountSetup,// Add. Fee Amount
        0);// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,LibraryRandom.RandDec(100,2));

      // [THEN] calculated Add. Fee Amount is equal to Max. Add. Fee Amount
      Assert.AreEqual(AdditionalFeeSetup."Max. Additional Fee Amount",AddFeeAmount,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,AdditionalFeeSetup."Additional Fee Amount",AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE AccumulatedDynamicAddFeeAmountEqualToMax@1092();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      AddFeeAmountSetup@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Amount calculated from Additional Fee Setup is equal to Max. Add. Fee Amount
      // and Calculation Type is Accumulated Dynamic then calculated amount is equal to Max. Add. Fee Amount

      // [GIVEN] When Additional Fee Amount calculated from Additional Fee Setup is equal to Max. Add. Fee Amount
      AddFeeCalculationType := AddFeeCalculationType::"Accumulated Dynamic";
      AddFeeAmountSetup := LibraryRandom.RandDec(100,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup,0,'',FALSE,AddFeeCalculationType);
      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        0,// Min. Add. Fee Amount
        AddFeeAmountSetup,// Max. Add. Fee Amount
        AddFeeAmountSetup,// Add. Fee Amount
        0);// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,LibraryRandom.RandDec(100,2));

      // [THEN] calculated Add. Fee Amount is equal to Max. Add. Fee Amount
      Assert.AreEqual(AdditionalFeeSetup."Max. Additional Fee Amount",AddFeeAmount,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,AdditionalFeeSetup."Additional Fee Amount",AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE AccumulatedDynamicAddFixedFeeAmountFeePercentageSum@1119();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmountActual@1002 : Decimal;
      AddFeeAmountExpected@1003 : Decimal;
      RemainingAmount@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Setup contains Additional Fee Amount  > 0 and Additional Fee % > 0
      // and Calculation Type is Accumulated Dynamic then Add. Fee calculation is sum of Additional Fee Amount
      // and "Additional Fee %" * RemainingAmount / 100

      // [GIVEN] Additional Fee Setup conatins Additional Fee Amount > 0 and Additional Fee % > 0
      AddFeeCalculationType := AddFeeCalculationType::"Accumulated Dynamic";
      RemainingAmount := LibraryRandom.RandDec(99,2);

      CreateAddFeeSetupUT(AdditionalFeeSetup,0,'',FALSE,AddFeeCalculationType);
      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        0,// Min. Add. Fee Amount
        100 * RemainingAmount,// Max. Add. Fee Amount
        LibraryRandom.RandDec(100,2),// Add. Fee Amount
        LibraryRandom.RandDec(99,2));// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmountActual := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,RemainingAmount);
      AddFeeAmountExpected :=
        (AdditionalFeeSetup."Additional Fee %" * RemainingAmount / 100) + AdditionalFeeSetup."Additional Fee Amount";

      // [THEN] then calculated amount is Remaining Amount multiplied by Additional Fee %
      Assert.AreEqual(
        AddFeeAmountExpected,AddFeeAmountActual,STRSUBSTNO(UnexpectedAddFeeAmountErr,AddFeeAmountExpected,AddFeeAmountActual));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE AccumulatedDynamicMultipleAmountRanges@1123();
    VAR
      AdditionalFeeSetup@1007 : Record 1050;
      AdditionalFeeSetup1@1001 : Record 1050;
      AdditionalFeeSetup2@1006 : Record 1050;
      AddFeeAmountActual@1002 : Decimal;
      AddFeeAmountExpected@1003 : Decimal;
      RangeAmount2@1004 : Decimal;
      RemainingAmount@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Setup contains multiple amount ranges with Additional Fee Amount  > 0 and Additional Fee % > 0
      // and Calculation Type is Accumulated Dynamic then Add. Fee calculation is based on amount ranges

      // [GIVEN] When Additional Fee Setup contains multiple amount ranges with Additional Fee Amount  > 0 and Additional Fee % > 0
      AddFeeCalculationType := AddFeeCalculationType::"Accumulated Dynamic";
      RemainingAmount := LibraryRandom.RandDecInDecimalRange(100,200,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup1,0,'',FALSE,AddFeeCalculationType);

      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup1,
        0,// Min. Add. Fee Amount
        100 * RemainingAmount,// Max. Add. Fee Amount
        LibraryRandom.RandDec(100,2),// Add. Fee Amount
        LibraryRandom.RandDec(99,2));// Add. Fee Perc

      RangeAmount2 := LibraryRandom.RandDec(99,2);

      WITH AdditionalFeeSetup2 DO BEGIN
        INIT;
        "Charge Per Line" := AdditionalFeeSetup1."Charge Per Line";
        "Reminder Terms Code" := AdditionalFeeSetup1."Reminder Terms Code";
        "Reminder Level No." := AdditionalFeeSetup1."Reminder Level No.";
        "Currency Code" := AdditionalFeeSetup1."Currency Code";
        "Threshold Remaining Amount" := RangeAmount2;
        "Max. Additional Fee Amount" := 100 * RemainingAmount;
        "Additional Fee Amount" := LibraryRandom.RandDec(100,2);
        "Additional Fee %" := LibraryRandom.RandDec(99,2);
        INSERT(TRUE);
      END;

      AdditionalFeeSetup.SETRANGE("Reminder Terms Code",AdditionalFeeSetup1."Reminder Terms Code");
      AdditionalFeeSetup.FINDFIRST;

      // [WHEN] Add. Fee is calculated
      AddFeeAmountActual := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,RemainingAmount);
      AddFeeAmountExpected :=
        (AdditionalFeeSetup1."Additional Fee %" * AdditionalFeeSetup2."Threshold Remaining Amount" / 100) +
        AdditionalFeeSetup1."Additional Fee Amount" +
        (AdditionalFeeSetup2."Additional Fee %" * (RemainingAmount - AdditionalFeeSetup2."Threshold Remaining Amount") / 100) +
        AdditionalFeeSetup2."Additional Fee Amount";

      // [THEN] then Add. Fee calculation is based on amount ranges
      Assert.AreEqual(
        AddFeeAmountExpected,AddFeeAmountActual,STRSUBSTNO(UnexpectedAddFeeAmountErr,AddFeeAmountExpected,AddFeeAmountActual));

      // Tear down
      AdditionalFeeSetup1.DELETE(TRUE);
      AdditionalFeeSetup2.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE AccumulatedDynamicCurrencyCodeNotEmpty@1110();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      AddFeePerc@1003 : Decimal;
      RemainingAmount@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Setup contains record with Currency Code <> ''
      // and Calculation Type is Accumulated Dynamic then Add. Fee calculation is based on that record

      // [GIVEN] When Additional Fee Setup contains record with Currency Code <> ''
      AddFeeCalculationType := AddFeeCalculationType::"Accumulated Dynamic";
      RemainingAmount := LibraryRandom.RandDec(99,2);
      AddFeePerc := LibraryRandom.RandDec(100,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup,0,LibraryERM.CreateCurrencyWithRandomExchRates,FALSE,AddFeeCalculationType);

      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        0,// Min. Add. Fee Amount
        AddFeePerc * RemainingAmount,// Max. Add. Fee Amount
        0,// Add. Fee Amount
        AddFeePerc);// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,RemainingAmount);

      // [THEN] then calculated amount is based on Add. Fee Setup with defined Currency Code
      Assert.AreEqual(AdditionalFeeSetup."Additional Fee %" * RemainingAmount / 100,AddFeeAmount,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,AdditionalFeeSetup."Additional Fee Amount",AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE AccumulatedDynamicChargePerLine@1097();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      AddFeeAmountSetup@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When calculation requires Additional Fee per Line
      // and Calculation Type is Accumulated Dynamic then calculation will be based only on record with Charge per Line = TRUE

      // [GIVEN] Additional Fee Setup conatins record with Charge per Line = TRUE
      AddFeeCalculationType := AddFeeCalculationType::"Accumulated Dynamic";
      AddFeeAmountSetup := LibraryRandom.RandDec(100,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup,0,'',TRUE,AddFeeCalculationType);
      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        0,// Min. Add. Fee Amount
        AddFeeAmountSetup + 1,// Max. Add. Fee Amount
        AddFeeAmountSetup,// Add. Fee Amount
        0);// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,LibraryRandom.RandDec(100,2));

      // [THEN] then calculation will be based only on record with Charge per Line = TRUE
      Assert.AreEqual(AdditionalFeeSetup."Additional Fee Amount",AddFeeAmount,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,AdditionalFeeSetup."Additional Fee Amount",AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE SingleDynamicRemAmtLessThanThresholdRemAmt@1014();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      RemainingAmount@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] Remaining amount is less than Threshold Remaining Amount defined in Additional Fee Setup
      // and Calculation Type is Single Dynamic then Add. Fee Amount = 0

      // [GIVEN] Remaining Amount less than Threshold Remaining Amount
      AddFeeCalculationType := AddFeeCalculationType::"Single Dynamic";
      RemainingAmount := LibraryRandom.RandDec(100,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup,RemainingAmount + 1,'',FALSE,AddFeeCalculationType);

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,RemainingAmount);

      // [THEN] Add. Fee is 0
      Assert.AreEqual(0,AddFeeAmount,STRSUBSTNO(UnexpectedAddFeeAmountErr,0,AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE SingleDynamicAddFeeFixedFeeAmount@1013();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      AddFeeAmountSetup@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Setup contains Additional Fee Amount > 0 and Additional Fee % = 0
      // and Calculation Type is Single Dynamic then calculated amount is Additional Fee Amount

      // [GIVEN] Additional Fee Setup conatins Additional Fee Amount <>0 and Additional Fee % = 0
      AddFeeCalculationType := AddFeeCalculationType::"Single Dynamic";
      AddFeeAmountSetup := LibraryRandom.RandDec(100,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup,0,'',FALSE,AddFeeCalculationType);
      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        0,// Min. Add. Fee Amount
        AddFeeAmountSetup + 1,// Max. Add. Fee Amount
        AddFeeAmountSetup,// Add. Fee Amount
        0);// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,LibraryRandom.RandDec(100,2));

      // [THEN] then calculated amount is Additional Fee Amount defined in Add. Fee Setup
      Assert.AreEqual(AdditionalFeeSetup."Additional Fee Amount",AddFeeAmount,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,AdditionalFeeSetup."Additional Fee Amount",AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE SingleDynamicAddFeePercentage@1012();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      AddFeePerc@1003 : Decimal;
      RemainingAmount@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Setup contains Additional Fee Amount  = 0 and Additional Fee % > 0
      // and Calculation Type is Single Dynamic then Add. Fee calculation is equal to Remaining Amount * Additional Fee %/100

      // [GIVEN] Additional Fee Setup conatins Additional Fee Amount = 0 and Additional Fee % > 0
      AddFeeCalculationType := AddFeeCalculationType::"Single Dynamic";
      RemainingAmount := LibraryRandom.RandDec(99,2);
      AddFeePerc := LibraryRandom.RandDec(100,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup,0,'',FALSE,AddFeeCalculationType);
      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        0,// Min. Add. Fee Amount
        AddFeePerc * RemainingAmount,// Max. Add. Fee Amount
        0,// Add. Fee Amount
        AddFeePerc);// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,RemainingAmount);

      // [THEN] then calculated amount is Remaining Amount multiplied by Additional Fee %
      Assert.AreEqual(AdditionalFeeSetup."Additional Fee %" * RemainingAmount / 100,AddFeeAmount,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,AdditionalFeeSetup."Additional Fee Amount",AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE SingleDynamicAddFeeAmountLessThanMin@1011();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      AddFeeAmountSetup@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Amount calculated from Additional Fee Setup is less than Min. Add. Fee Amount
      // and Calculation Type is Single Dynamic then calculated amount is equal to Min. Add. Fee Amount

      // [GIVEN] Additional Fee Amount defined by Additional Fee Setup is less than Min. Add. Fee Amount
      AddFeeCalculationType := AddFeeCalculationType::"Single Dynamic";
      AddFeeAmountSetup := LibraryRandom.RandDec(100,2);

      CreateAddFeeSetupUT(AdditionalFeeSetup,0,'',FALSE,AddFeeCalculationType);
      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        AddFeeAmountSetup + 1,// Min. Add. Fee Amount
        0,// Max. Add. Fee Amount
        AddFeeAmountSetup,// Add. Fee Amount
        0);// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,LibraryRandom.RandDec(100,2));

      // then calculated amount is equal to Min. Add. Fee Amount
      Assert.AreEqual(AddFeeAmountSetup + 1,AddFeeAmount,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,AddFeeAmountSetup + 1,AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE SingleDynamicAddFeeAmountEqualToMin@1010();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      AddFeeAmountSetup@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Amount calculated from Additional Fee Setup is equal to Min. Add. Fee Amount
      // and Calculation Type is Single Dynamic then calculated amount is Min. Add. Fee Amount

      // [GIVEN] Additional Fee Amount defined by Additional Fee Setup is equal to Min. Add. Fee Amount
      AddFeeCalculationType := AddFeeCalculationType::"Single Dynamic";
      AddFeeAmountSetup := LibraryRandom.RandDec(100,2);

      CreateAddFeeSetupUT(AdditionalFeeSetup,0,'',FALSE,AddFeeCalculationType);
      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        AddFeeAmountSetup,// Min. Add. Fee Amount
        AddFeeAmountSetup + 1,// Max. Add. Fee Amount
        AddFeeAmountSetup,// Add. Fee Amount
        0);// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,LibraryRandom.RandDec(100,2));

      // [THEN] Add. Fee is Min. Add. Fee Amount
      Assert.AreEqual(AddFeeAmountSetup,AddFeeAmount,STRSUBSTNO(UnexpectedAddFeeAmountErr,AddFeeAmountSetup,AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE SingleDynamicAddFeeAmountBiggerThanMax@1009();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      AddFeeAmountSetup@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Amount calculated from Additional Fee Setup is bigger than Max. Add. Fee Amount
      // and Calculation Type is Single Dynamic then calculated amount is equal to Max. Add. Fee Amount

      // [GIVEN] When Additional Fee Amount calculated from Additional Fee Setup is bigger than Max. Add. Fee Amount
      AddFeeCalculationType := AddFeeCalculationType::"Single Dynamic";
      AddFeeAmountSetup := LibraryRandom.RandDec(100,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup,0,'',FALSE,AddFeeCalculationType);
      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        0,// Min. Add. Fee Amount
        AddFeeAmountSetup - 1,// Max. Add. Fee Amount
        AddFeeAmountSetup,// Add. Fee Amount
        0);// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,LibraryRandom.RandDec(100,2));

      // [THEN] calculated Add. Fee Amount is equal to Max. Add. Fee Amount
      Assert.AreEqual(AdditionalFeeSetup."Max. Additional Fee Amount",AddFeeAmount,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,AdditionalFeeSetup."Additional Fee Amount",AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE SingleDynamicAddFeeAmountEqualToMax@1008();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      AddFeeAmountSetup@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Amount calculated from Additional Fee Setup is equal to Max. Add. Fee Amount
      // and Calculation Type is Single Dynamic then calculated amount is equal to Max. Add. Fee Amount

      // [GIVEN] When Additional Fee Amount calculated from Additional Fee Setup is equal to Max. Add. Fee Amount
      AddFeeCalculationType := AddFeeCalculationType::"Single Dynamic";
      AddFeeAmountSetup := LibraryRandom.RandDec(100,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup,0,'',FALSE,AddFeeCalculationType);
      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        0,// Min. Add. Fee Amount
        AddFeeAmountSetup,// Max. Add. Fee Amount
        AddFeeAmountSetup,// Add. Fee Amount
        0);// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,LibraryRandom.RandDec(100,2));

      // [THEN] calculated Add. Fee Amount is equal to Max. Add. Fee Amount
      Assert.AreEqual(AdditionalFeeSetup."Max. Additional Fee Amount",AddFeeAmount,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,AdditionalFeeSetup."Additional Fee Amount",AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE SingleDynamicAddFixedFeeAmountFeePercentageSum@1007();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmountActual@1002 : Decimal;
      AddFeeAmountExpected@1003 : Decimal;
      RemainingAmount@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Setup contains Additional Fee Amount  > 0 and Additional Fee % > 0
      // and Calculation Type is Single Dynamic then Add. Fee calculation is sum of Add Fee Amount
      // and "Additional Fee %" * RemainingAmount / 100 from that Amount Range

      // [GIVEN] Additional Fee Setup conatins Additional Fee Amount > 0 and Additional Fee % > 0
      AddFeeCalculationType := AddFeeCalculationType::"Single Dynamic";
      RemainingAmount := LibraryRandom.RandDec(99,2);

      CreateAddFeeSetupUT(AdditionalFeeSetup,0,'',FALSE,AddFeeCalculationType);
      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        0,// Min. Add. Fee Amount
        100 * RemainingAmount,// Max. Add. Fee Amount
        LibraryRandom.RandDec(100,2),// Add. Fee Amount
        LibraryRandom.RandDec(99,2));// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmountActual := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,RemainingAmount);
      AddFeeAmountExpected :=
        (AdditionalFeeSetup."Additional Fee %" * RemainingAmount / 100) + AdditionalFeeSetup."Additional Fee Amount";

      // [THEN] then calculated amount is sum of Add Fee Amount and "Additional Fee %" * RemainingAmount / 100 from that Amount Range
      Assert.AreEqual(
        AddFeeAmountExpected,AddFeeAmountActual,STRSUBSTNO(UnexpectedAddFeeAmountErr,AddFeeAmountExpected,AddFeeAmountActual));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE SingleDynamicMultipleAmountRanges@1006();
    VAR
      AdditionalFeeSetup@1007 : Record 1050;
      AdditionalFeeSetup1@1001 : Record 1050;
      AdditionalFeeSetup2@1006 : Record 1050;
      AddFeeAmountActual@1002 : Decimal;
      AddFeeAmountExpected@1003 : Decimal;
      RangeAmount2@1004 : Decimal;
      RemainingAmount@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Setup contains multiple amount ranges with Additional Fee Amount  > 0 and Additional Fee % > 0
      // and Calculation Type is Single Dynamic then Add. Fee calculation is based on chosen amount range

      // [GIVEN] When Additional Fee Setup contains multiple amount ranges with Additional Fee Amount  > 0 and Additional Fee % > 0
      AddFeeCalculationType := AddFeeCalculationType::"Single Dynamic";
      RemainingAmount := LibraryRandom.RandDecInDecimalRange(100,200,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup1,0,'',FALSE,AddFeeCalculationType);

      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup1,
        0,// Min. Add. Fee Amount
        100 * RemainingAmount,// Max. Add. Fee Amount
        LibraryRandom.RandDec(100,2),// Add. Fee Amount
        LibraryRandom.RandDec(99,2));// Add. Fee Perc

      RangeAmount2 := LibraryRandom.RandDec(99,2);

      WITH AdditionalFeeSetup2 DO BEGIN
        INIT;
        "Charge Per Line" := AdditionalFeeSetup1."Charge Per Line";
        "Reminder Terms Code" := AdditionalFeeSetup1."Reminder Terms Code";
        "Reminder Level No." := AdditionalFeeSetup1."Reminder Level No.";
        "Currency Code" := AdditionalFeeSetup1."Currency Code";
        "Threshold Remaining Amount" := RangeAmount2;
        "Max. Additional Fee Amount" := 100 * RemainingAmount;
        "Additional Fee Amount" := LibraryRandom.RandDec(100,2);
        "Additional Fee %" := LibraryRandom.RandDec(99,2);
        INSERT(TRUE);
      END;

      AdditionalFeeSetup.SETRANGE("Reminder Terms Code",AdditionalFeeSetup1."Reminder Terms Code");
      AdditionalFeeSetup.FINDFIRST;

      // [WHEN] Add. Fee is calculated
      AddFeeAmountActual := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,RemainingAmount);
      AddFeeAmountExpected :=
        (AdditionalFeeSetup2."Additional Fee %" * RemainingAmount / 100) +
        AdditionalFeeSetup2."Additional Fee Amount";

      // [THEN] then Add. Fee calculation is based on amount ranges
      Assert.AreEqual(
        AddFeeAmountExpected,AddFeeAmountActual,STRSUBSTNO(UnexpectedAddFeeAmountErr,AddFeeAmountExpected,AddFeeAmountActual));

      // Tear down
      AdditionalFeeSetup1.DELETE(TRUE);
      AdditionalFeeSetup2.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE SingleDynamicCurrencyCodeNotEmpty@1005();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      AddFeePerc@1003 : Decimal;
      RemainingAmount@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Additional Fee Setup contains record with Currency Code <> ''
      // and Calculation Type is Single Dynamic then Add. Fee calculation is based on that record

      // [GIVEN] When Additional Fee Setup contains record with Currency Code <> ''
      AddFeeCalculationType := AddFeeCalculationType::"Single Dynamic";
      RemainingAmount := LibraryRandom.RandDec(99,2);
      AddFeePerc := LibraryRandom.RandDec(100,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup,0,LibraryERM.CreateCurrencyWithRandomExchRates,FALSE,AddFeeCalculationType);

      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        0,// Min. Add. Fee Amount
        AddFeePerc * RemainingAmount,// Max. Add. Fee Amount
        0,// Add. Fee Amount
        AddFeePerc);// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,RemainingAmount);

      // [THEN] then calculated amount is based on Add. Fee Setup with defined Currency Code
      Assert.AreEqual(AdditionalFeeSetup."Additional Fee %" * RemainingAmount / 100,AddFeeAmount,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,AdditionalFeeSetup."Additional Fee Amount",AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE SingleDynamicChargePerLine@1004();
    VAR
      AdditionalFeeSetup@1001 : Record 1050;
      AddFeeAmount@1002 : Decimal;
      AddFeeAmountSetup@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When calculation requires Additional Fee per Line
      // and Calculation Type is Dynamic then calculation will be based only on record with Charge per Line = TRUE

      // [GIVEN] Additional Fee Setup conatins record with Charge per Line = TRUE
      AddFeeCalculationType := AddFeeCalculationType::"Single Dynamic";
      AddFeeAmountSetup := LibraryRandom.RandDec(100,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup,0,'',TRUE,AddFeeCalculationType);
      SetUpAdditionalFeePropertiesUT(AdditionalFeeSetup,
        0,// Min. Add. Fee Amount
        AddFeeAmountSetup + 1,// Max. Add. Fee Amount
        AddFeeAmountSetup,// Add. Fee Amount
        0);// Add. Fee Perc

      // [WHEN] Add. Fee is calculated
      AddFeeAmount := CalculateAddFeeFromSetupUT(AdditionalFeeSetup,LibraryRandom.RandDec(100,2));

      // [THEN] then calculation will be based only on record with Charge per Line = TRUE
      Assert.AreEqual(AdditionalFeeSetup."Additional Fee Amount",AddFeeAmount,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,AdditionalFeeSetup."Additional Fee Amount",AddFeeAmount));

      // Tear down
      AdditionalFeeSetup.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE FixedFeeChargePerLineFalse@1020();
    VAR
      ReminderLevel@1004 : Record 293;
      AddFeeAmountCalculated@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Reminder Level contains Additional Fee Amount > 0
      // and Post Additional Fee = TRUE and Calculation Type is Fixed
      // then calculated amount is Additional Fee Amount

      // [GIVEN] When Reminder Level contains Additional Fee (LCY) Amount > 0
      AddFeeCalculationType := AddFeeCalculationType::Fixed;
      CreateReminderTermsAndLevel(ReminderLevel,TRUE,TRUE,AddFeeCalculationType);
      ReminderLevel."Additional Fee (LCY)" := LibraryRandom.RandDec(100,2);
      ReminderLevel.MODIFY(TRUE);

      // [WHEN] Add. Fee is calculated
      AddFeeAmountCalculated := ReminderLevel.GetAdditionalFee(LibraryRandom.RandDec(100,2),
          '',FALSE,TODAY);

      // [THEN] then calculated amount is Additional Fee (LCY) Amount
      Assert.AreEqual(ReminderLevel."Additional Fee (LCY)",AddFeeAmountCalculated,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,ReminderLevel."Additional Fee (LCY)",AddFeeAmountCalculated));
    END;

    [Test]
    PROCEDURE FixedFeeChargePerLineTrue@1032();
    VAR
      ReminderLevel@1004 : Record 293;
      AddFeeAmountCalculated@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Reminder Level contains Additional Fee per Line Amount > 0
      // and Post Additional Fee per Line  = TRUE
      // and Calculation Type is Fixed then calculated amount is Additional Fee per Line Amount

      // [GIVEN] When Reminder Level contains Additional Fee Amount > 0
      AddFeeCalculationType := AddFeeCalculationType::Fixed;
      CreateReminderTermsAndLevel(ReminderLevel,TRUE,TRUE,AddFeeCalculationType);
      ReminderLevel."Add. Fee per Line Amount (LCY)" := LibraryRandom.RandDec(100,2);
      ReminderLevel.MODIFY(TRUE);

      // [WHEN] Add. Fee is calculated
      AddFeeAmountCalculated := ReminderLevel.GetAdditionalFee(LibraryRandom.RandDec(100,2),
          '',TRUE,TODAY);

      // [THEN] then calculated amount is Additional Fee Amount defined in Add. Fee Setup
      Assert.AreEqual(ReminderLevel."Add. Fee per Line Amount (LCY)",AddFeeAmountCalculated,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,ReminderLevel."Add. Fee per Line Amount (LCY)",AddFeeAmountCalculated));
    END;

    [Test]
    PROCEDURE FixedFeeChargePerLineFalseFCY@1049();
    VAR
      Currency@1005 : Record 4;
      ReminderLevel@1004 : Record 293;
      AddFeeAmount@1001 : Decimal;
      AddFeeAmountCalculated@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Reminder Level contains Currency for Reminder Level record
      // and Post Additional Fee = TRUE and Calculation Type is Fixed
      // then calculated amount is Additional Fee Amount in FCY

      // [GIVEN] When Reminder Level contains Additional Fee (LCY) Amount record
      Currency.GET(LibraryERM.CreateCurrencyWithRandomExchRates);
      AddFeeCalculationType := AddFeeCalculationType::Fixed;
      AddFeeAmount := LibraryRandom.RandDec(100,2);
      CreateReminderTermsAndLevel(ReminderLevel,TRUE,TRUE,AddFeeCalculationType);
      CreateCurrencyForReminderLevel(ReminderLevel,Currency.Code,AddFeeAmount,0);

      // [WHEN] Add. Fee is calculated
      AddFeeAmountCalculated := ReminderLevel.GetAdditionalFee(LibraryRandom.RandDec(100,2),
          Currency.Code,FALSE,TODAY);

      // [THEN] then calculated amount is Additional Fee (FCY) Amount
      Assert.AreEqual(AddFeeAmountCalculated,AddFeeAmount,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,AddFeeAmountCalculated,AddFeeAmount));
    END;

    [Test]
    PROCEDURE FixedFeeChargePerLineTrueFCY@1048();
    VAR
      Currency@1005 : Record 4;
      ReminderLevel@1004 : Record 293;
      AddFeePerLineAmount@1001 : Decimal;
      AddFeeAmountCalculated@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Reminder Level contains Currency for Reminder Level
      // and Post Additional Fee per Line = TRUE and Calculation Type is Fixed
      // then calculated amount is Additional Fee per Line Amount in FCY

      // [GIVEN] When Reminder Level contains Currency for Reminder Level
      Currency.GET(LibraryERM.CreateCurrencyWithRandomExchRates);
      AddFeeCalculationType := AddFeeCalculationType::Fixed;
      AddFeePerLineAmount := LibraryRandom.RandDec(100,2);
      CreateReminderTermsAndLevel(ReminderLevel,TRUE,TRUE,AddFeeCalculationType);
      CreateCurrencyForReminderLevel(ReminderLevel,Currency.Code,0,AddFeePerLineAmount);

      // [WHEN] Add. Fee is calculated
      AddFeeAmountCalculated := ReminderLevel.GetAdditionalFee(LibraryRandom.RandDec(100,2),
          Currency.Code,TRUE,TODAY);

      // [THEN] then calculated amount is Additional Fee per Line Amount in FCY
      Assert.AreEqual(AddFeeAmountCalculated,AddFeePerLineAmount,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,AddFeeAmountCalculated,AddFeePerLineAmount));
    END;

    [Test]
    PROCEDURE PostAdditionalFeePerLineFalse@1045();
    VAR
      ReminderLevel@1004 : Record 293;
      ReminderTermsCode@1001 : Code[10];
      AddFeeAmountCalculated@1000 : Decimal;
    BEGIN
      // [SCENARIO 107048] When Reminder Terms has value Post Add. Fee Per Line = FALSE
      // then Add. Fee Amount =0

      // [GIVEN] When Reminder Terms has value Post Add. Fee per Line = FALSE
      AddFeeCalculationType := AddFeeCalculationType::Fixed;
      ReminderTermsCode := CreateReminderTermsAndLevel(ReminderLevel,TRUE,FALSE,AddFeeCalculationType);

      LibraryERM.CreateReminderLevel(ReminderLevel,ReminderTermsCode);
      ReminderLevel."Add. Fee per Line Amount (LCY)" := LibraryRandom.RandDec(100,2);
      ReminderLevel.MODIFY(TRUE);

      // [WHEN] Add. Fee is calculated
      AddFeeAmountCalculated := ReminderLevel.GetAdditionalFee(LibraryRandom.RandDec(100,2),
          '',FALSE,TODAY);

      // [THEN] then calculated amount is Additional Fee (LCY) Amount
      Assert.AreEqual(0,AddFeeAmountCalculated,
        STRSUBSTNO(UnexpectedAddFeeAmountErr,0,AddFeeAmountCalculated));
    END;

    [Test]
    PROCEDURE AddFeeSetupOnOpenPageUT@1();
    VAR
      ReminderLevel@1002 : Record 293;
      AdditionalFeeSetupPage@1000 : TestPage 1050;
      ReminderLevels@1003 : TestPage 432;
      PageCaption@1004 : Text;
    BEGIN
      // [SCENARIO 107048] Verify Add. Fee Setup Caption

      // [GIVEN] When Reminder Terms and Reminder Level exist
      CreateReminderTermsAndLevel(ReminderLevel,TRUE,TRUE,AddFeeCalculationType);

      // [WHEN] Add. Fee Setup Page is run from Reminder Levels Page.
      OpenReminderLevelsPage(ReminderLevels,ReminderLevel."Reminder Terms Code",ReminderLevel."No.");
      ReminderLevels."Add. Fee Calculation Type".SETVALUE(ReminderLevel."Add. Fee Calculation Type"::"Single Dynamic");

      AdditionalFeeSetupPage.TRAP;
      ReminderLevels."Additional Fee per Line".INVOKE;
      PageCaption := AddFeePerLineTxt + ' ' + ReminderTermsTxt + ' ' + ReminderLevel."Reminder Terms Code" + ' ' +
        ReminderLevelTxt + ' ' + FORMAT(ReminderLevel."No.");

      // [THEN] then caption contains Reminder Terms and Reminder Level specified
      Assert.AreEqual(AdditionalFeeSetupPage.CAPTION,PageCaption,CaptionErr);
    END;

    [Test]
    [HandlerFunctions(AdditionalFeeChartPageHandler)]
    PROCEDURE AddFeeChartOnOpenPageUT@95();
    VAR
      ReminderLevel@1002 : Record 293;
      AdditionalFeeChart@1000 : TestPage 1051;
      ReminderLevels@1003 : TestPage 432;
    BEGIN
      // [SCENARIO 107048] Verify Add. Fee Chart

      // [GIVEN] When Reminder Terms and Reminder Level exist
      CreateReminderTermsAndLevel(ReminderLevel,TRUE,TRUE,AddFeeCalculationType);

      // [WHEN] Add. Fee Chart Page is run from Reminder Levels Page.
      OpenReminderLevelsPage(ReminderLevels,ReminderLevel."Reminder Terms Code",ReminderLevel."No.");
      ReminderLevels."Add. Fee Calculation Type".SETVALUE(ReminderLevel."Add. Fee Calculation Type"::"Single Dynamic");
      AdditionalFeeChart.TRAP;
      ReminderLevels."View Additional Fee Chart".INVOKE;

      // [THEN] then Additional Fee  per Line, M
    END;

    [Test]
    PROCEDURE AdditionalFeeChartUpdateDataUT@34();
    VAR
      SortingTable@1006 : Record 1051;
      BusinessChartBuffer@1007 : Record 485;
      AdditionalFeeSetup@1001 : Record 1050;
      ReminderLevel@1002 : Record 293;
      RemainingAmount@1008 : Decimal;
    BEGIN
      // [SCENARIO 107048] Verify Add. Fee Setup Caption

      // [GIVEN] When Reminder Terms and Reminder Level exist
      AddFeeCalculationType := AddFeeCalculationType::"Accumulated Dynamic";
      RemainingAmount := LibraryRandom.RandDec(100,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup,RemainingAmount + 1,'',TRUE,AddFeeCalculationType);
      ReminderLevel.GET(AdditionalFeeSetup."Reminder Terms Code",AdditionalFeeSetup."Reminder Level No.");

      // [WHEN] Add. Fee Setup Page is run from Reminder Levels Page.
      SortingTable.UpdateData(BusinessChartBuffer,ReminderLevel,TRUE,'','TEST',100000);

      VerifyBufferData(BusinessChartBuffer,AdditionalFeeSetup,ReminderLevel);
    END;

    [Test]
    PROCEDURE AddFeeChartUpdateDataMinBiggerThanAmountUT@67();
    VAR
      SortingTable@1006 : Record 1051;
      BusinessChartBuffer@1007 : Record 485;
      AdditionalFeeSetup@1001 : Record 1050;
      ReminderLevel@1002 : Record 293;
      RemainingAmount@1008 : Decimal;
    BEGIN
      // [SCENARIO 107048] Verify Add. Fee Setup Caption

      // [GIVEN] When Reminder Terms and Reminder Level exist
      AddFeeCalculationType := AddFeeCalculationType::"Accumulated Dynamic";
      RemainingAmount := LibraryRandom.RandDec(100,2);
      CreateAddFeeSetupUT(AdditionalFeeSetup,RemainingAmount + 1,'',TRUE,AddFeeCalculationType);
      AdditionalFeeSetup."Min. Additional Fee Amount" := AdditionalFeeSetup."Additional Fee Amount" +
        AdditionalFeeSetup."Max. Additional Fee Amount" * (AdditionalFeeSetup."Additional Fee %" / 100);
      AdditionalFeeSetup.MODIFY;
      ReminderLevel.GET(AdditionalFeeSetup."Reminder Terms Code",AdditionalFeeSetup."Reminder Level No.");

      // [WHEN] Add. Fee Setup Page is run from Reminder Levels Page.
      SortingTable.UpdateData(BusinessChartBuffer,ReminderLevel,TRUE,'','TEST',100000);

      // [THEN] buffer table is updated
      VerifyBufferData(BusinessChartBuffer,AdditionalFeeSetup,ReminderLevel);
    END;

    LOCAL PROCEDURE CalculateAddFeeFromSetupUT@1090(VAR AdditionalFeeSetup@1000 : Record 1050;RemainingAmount@1001 : Decimal) : Decimal;
    VAR
      ReminderLevel@1002 : Record 293;
    BEGIN
      ReminderLevel.GET(AdditionalFeeSetup."Reminder Terms Code",AdditionalFeeSetup."Reminder Level No.");

      EXIT(ReminderLevel.GetAdditionalFee(RemainingAmount,
          AdditionalFeeSetup."Currency Code",
          AdditionalFeeSetup."Charge Per Line",TODAY));
    END;

    LOCAL PROCEDURE CreateAddFeeSetupUT@1142(VAR AdditionalFeeSetup@1000 : Record 1050;ThresholdRemAmount@1001 : Decimal;CurrencyCode@1003 : Code[10];ChargePerLine@1004 : Boolean;CalcType@1006 : 'Fixed,Single Dynamic,Accumulated Dynamic');
    VAR
      ReminderLevel@1002 : Record 293;
      ReminderTermsCode@1005 : Code[10];
    BEGIN
      ReminderTermsCode := CreateReminderTerms(TRUE,TRUE);
      CreateReminderLevel(ReminderLevel,ReminderTermsCode,CalcType);
      WITH AdditionalFeeSetup DO BEGIN
        INIT;
        "Reminder Terms Code" := ReminderTermsCode;
        "Charge Per Line" := ChargePerLine;
        "Reminder Level No." := ReminderLevel."No.";
        "Currency Code" := CurrencyCode;
        "Threshold Remaining Amount" := ThresholdRemAmount;
        "Additional Fee Amount" := LibraryRandom.RandDec(100,2);
        "Additional Fee %" := LibraryRandom.RandDec(10,2);
        "Min. Additional Fee Amount" := "Additional Fee Amount" - 1;
        "Max. Additional Fee Amount" := "Additional Fee Amount" + LibraryRandom.RandDec(1000,2) ;
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateCurrencyForReminderLevel@1051(VAR ReminderLevel@1004 : Record 293;CurrencyCode@1001 : Code[10];AdditionalFee@1002 : Decimal;AdditionalFeePerLine@1003 : Decimal);
    VAR
      CurrencyForReminderLevel@1000 : Record 329;
    BEGIN
      WITH CurrencyForReminderLevel DO BEGIN
        INIT;
        "Reminder Terms Code" := ReminderLevel."Reminder Terms Code";
        "No." := ReminderLevel."No.";
        "Currency Code" := CurrencyCode;
        "Additional Fee" := AdditionalFee;
        "Add. Fee per Line" := AdditionalFeePerLine;
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateReminderTerms@1016(PostAddFee@1001 : Boolean;PostAddFeePerLine@1002 : Boolean) : Code[10];
    VAR
      ReminderTerms@1000 : Record 292;
    BEGIN
      WITH ReminderTerms DO BEGIN
        INIT;
        Code := LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"Reminder Terms");
        "Post Additional Fee" := PostAddFee;
        "Post Add. Fee per Line" := PostAddFeePerLine;
        INSERT(TRUE);
      END;
      EXIT(ReminderTerms.Code)
    END;

    LOCAL PROCEDURE CreateReminderLevel@1022(VAR ReminderLevel@1000 : Record 293;ReminderTermsCode@1001 : Code[10];CalcType@1003 : 'Fixed,Single Dynamic,Accumulated Dynamic');
    BEGIN
      LibraryERM.CreateReminderLevel(ReminderLevel,ReminderTermsCode);
      ReminderLevel."Add. Fee Calculation Type" := CalcType;
      ReminderLevel.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReminderTermsAndLevel@1025(VAR ReminderLevel@1002 : Record 293;PostAddFee@1001 : Boolean;PostAddFeePerLine@1000 : Boolean;CalcType@1003 : 'Fixed,Single Dynamic,Accumulated Dynamic') : Code[10];
    VAR
      ReminderTermsCode@1004 : Code[10];
    BEGIN
      ReminderTermsCode := CreateReminderTerms(PostAddFee,PostAddFeePerLine);
      CreateReminderLevel(ReminderLevel,ReminderTermsCode,CalcType);
      EXIT(ReminderTermsCode);
    END;

    LOCAL PROCEDURE GetAdditionalFee@28(AdditionalFeeSetup@1001 : Record 1050;ColumnIndex@1000 : Integer;VAR SingleDynamicAmount@1004 : Decimal;VAR AccumulatedDynamicAmount@1002 : Decimal);
    VAR
      RemainingAmount@1003 : Decimal;
      ColumnIndexMin@1005 : Integer;
    BEGIN
      IF AdditionalFeeSetup."Additional Fee Amount" < AdditionalFeeSetup."Min. Additional Fee Amount" THEN
        ColumnIndexMin := 2;

      CASE ColumnIndex OF
        0:
          RemainingAmount := 0;
        1:
          RemainingAmount := AdditionalFeeSetup."Threshold Remaining Amount" - 1;
        2:
          RemainingAmount := AdditionalFeeSetup."Threshold Remaining Amount";
        3 + ColumnIndexMin:
          RemainingAmount := AdditionalFeeSetup."Threshold Remaining Amount" * 1.5;
      END;

      IF RemainingAmount < AdditionalFeeSetup."Threshold Remaining Amount" THEN
        RemainingAmount := 0
      ELSE BEGIN
        SingleDynamicAmount := AdditionalFeeSetup."Additional Fee Amount" +
          ((AdditionalFeeSetup."Additional Fee %" / 100) * RemainingAmount);

        AccumulatedDynamicAmount := AdditionalFeeSetup."Additional Fee Amount" +
          ((AdditionalFeeSetup."Additional Fee %" / 100) * RemainingAmount);

        IF SingleDynamicAmount > AdditionalFeeSetup."Max. Additional Fee Amount" THEN
          SingleDynamicAmount := AdditionalFeeSetup."Max. Additional Fee Amount";

        IF AccumulatedDynamicAmount > AdditionalFeeSetup."Max. Additional Fee Amount" THEN
          AccumulatedDynamicAmount := AdditionalFeeSetup."Max. Additional Fee Amount";

        IF SingleDynamicAmount < AdditionalFeeSetup."Min. Additional Fee Amount" THEN
          SingleDynamicAmount := AdditionalFeeSetup."Min. Additional Fee Amount";

        IF AccumulatedDynamicAmount < AdditionalFeeSetup."Min. Additional Fee Amount" THEN
          AccumulatedDynamicAmount := AdditionalFeeSetup."Min. Additional Fee Amount";
      END;
    END;

    LOCAL PROCEDURE SetUpAdditionalFeePropertiesUT@1095(VAR AdditionalFeeSetup@1000 : Record 1050;MinAddFeeAmount@1003 : Decimal;MaxAddFeeAmount@1004 : Decimal;AddFeeAmount@1005 : Decimal;AddFeePerc@1006 : Decimal);
    BEGIN
      WITH AdditionalFeeSetup DO BEGIN
        "Min. Additional Fee Amount" := MinAddFeeAmount;
        "Max. Additional Fee Amount" := MaxAddFeeAmount;
        "Additional Fee Amount" := AddFeeAmount;
        "Additional Fee %" := AddFeePerc;
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE OpenReminderLevelsPage@18(VAR ReminderLevels@1001 : TestPage 432;Code@1003 : Code[10];No@1004 : Integer);
    VAR
      ReminderTerms@1002 : TestPage 431;
    BEGIN
      ReminderTerms.OPENEDIT;
      ReminderTerms.FILTER.SETFILTER(Code,Code);
      ReminderLevels.TRAP;
      ReminderTerms."Page Reminder Levels".INVOKE;
      ReminderLevels.FILTER.SETFILTER("No.",FORMAT(No));
    END;

    LOCAL PROCEDURE VerifyBufferData@60(VAR BusinessChartBuffer@1012 : Record 485;AdditionalFeeSetup@1010 : Record 1050;ReminderLevel@1011 : Record 293);
    VAR
      FixedAmountVariant@1003 : Variant;
      SingleDynamicAmountVariant@1002 : Variant;
      AccumulatedDynamicAmountVariant@1001 : Variant;
      FixedAmountExpected@1009 : Decimal;
      SingleDynamicAmountExpected@1008 : Decimal;
      AccumulatedDynamicAmountExpected@1007 : Decimal;
      FixedAmount@1006 : Decimal;
      SingleDynamicAmount@1005 : Decimal;
      AccumulatedDynamicAmount@1004 : Decimal;
      ColumnIndex@1000 : Integer;
    BEGIN
      ColumnIndex := 0;
      REPEAT
        GetAdditionalFee(AdditionalFeeSetup,ColumnIndex,SingleDynamicAmountExpected,AccumulatedDynamicAmountExpected);
        FixedAmountExpected := ReminderLevel."Add. Fee per Line Amount (LCY)";

        // fixed fee
        BusinessChartBuffer.GetValue(FORMAT(ReminderLevel."Add. Fee Calculation Type"::Fixed),ColumnIndex,FixedAmountVariant);
        EVALUATE(FixedAmount,FORMAT(FixedAmountVariant));

        Assert.AreEqual(FixedAmountExpected,FixedAmount,STRSUBSTNO(UnexpectedAddFeeAmountErr,FixedAmountExpected,FixedAmount));

        // single dynamic
        BusinessChartBuffer.GetValue(
          FORMAT(ReminderLevel."Add. Fee Calculation Type"::"Single Dynamic"),ColumnIndex,SingleDynamicAmountVariant);
        EVALUATE(SingleDynamicAmount,FORMAT(SingleDynamicAmountVariant));

        Assert.AreNearlyEqual(SingleDynamicAmountExpected,SingleDynamicAmount,0.01,
          STRSUBSTNO(UnexpectedAddFeeAmountErr,SingleDynamicAmountExpected,SingleDynamicAmount));

        // accumulated dynamic
        BusinessChartBuffer.GetValue(
          FORMAT(ReminderLevel."Add. Fee Calculation Type"::"Accumulated Dynamic"),ColumnIndex,AccumulatedDynamicAmountVariant);
        EVALUATE(AccumulatedDynamicAmount,FORMAT(AccumulatedDynamicAmountVariant));
        Assert.AreNearlyEqual(AccumulatedDynamicAmountExpected,AccumulatedDynamicAmount,0.01,
          STRSUBSTNO(UnexpectedAddFeeAmountErr,AccumulatedDynamicAmountExpected,AccumulatedDynamicAmount));

        ColumnIndex += 1;
      UNTIL ColumnIndex = 4;
    END;

    [ModalPageHandler]
    PROCEDURE AdditionalFeeChartPageHandler@52(VAR AdditionalFeeChart@1000 : TestPage 1051);
    BEGIN
      AdditionalFeeChart.LAST;
      AdditionalFeeChart.ChargePerLine.SETVALUE(TRUE);
      AdditionalFeeChart."Max. Remaining Amount".SETVALUE(LibraryRandom.RandDec(100,2));
      AdditionalFeeChart.Currency.SETVALUE(LibraryERM.CreateCurrencyWithRandomExchRates);
      AdditionalFeeChart.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Reminder] [Additional Fee]
    }
    END.
  }
}

