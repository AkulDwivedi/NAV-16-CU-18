OBJECT Codeunit 134814 ERM CA Budget
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryCostAccounting@1002 : Codeunit 131340;
      LibraryDimension@1008 : Codeunit 131001;
      LibraryERM@1006 : Codeunit 131300;
      LibraryVariableStorage@1026 : Codeunit 131004;
      LibraryRandom@1004 : Codeunit 130440;
      CostBudgetEntriesCountError@1001 : TextConst 'ENU=Incorrect number of Cost Budget Entries.';
      CostEntriesCountError@1023 : TextConst 'ENU=Incorrect number of Cost Entries.';
      AllocatedCostEntriesCountError@1024 : TextConst 'ENU=Incorrect number of allocated Cost Entries.';
      CopiedBudgetEntryDescription@1009 : TextConst 'ENU=Copy of cost budget %1';
      DateFilter@1012 : TextConst 'ENU=''<%1>''';
      GLBudgetDimensionError@1016 : TextConst 'ENU=Dimension value code %1 is not copied correctly to the G/L Budget Entry.';
      AllocatedBudgetEntriesCountErr@1018 : TextConst 'ENU=The number of Allocated Cost Budget Entries should be 0.';
      isInitialized@1000 : Boolean;
      SourceBudgetEmptyError@1017 : TextConst 'ENU=Define name of source budget.';
      TargetBudgetEmptyError@1019 : TextConst 'ENU=Define name of target budget.';
      UnexpectedErrorMessage@1020 : TextConst 'ENU=Unexpected error message.';
      NoOfCopiesZeroError@1021 : TextConst 'ENU=Number of copies must be at least 1.';
      MultiplicationFactorZeroError@1022 : TextConst 'ENU=The multiplication factor must not be 0.';
      MultiplicationFactorZeroOrLess@1010 : TextConst 'ENU=The multiplication factor must not be 0 or less than 0.';
      TotalBudgetEntriesAmountError@1025 : TextConst 'ENU=Incorrect total amount for compressed budget entries.';
      BalanceAtDateFilter@1005 : TextConst 'ENU=..%1';
      DateChangeFormulaRequired@1007 : TextConst 'ENU=If more than one copy is created, a formula for date change must be defined.';
      CostBudgetEntryDateErr@1011 : TextConst 'ENU=Incorrect Date of Cost Budget Entry.';

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyCAToCA,MessageHandler)]
    PROCEDURE CompressBudgetEntries@50();
    VAR
      SourceCostBudgetName@1001 : Record 1110;
      TargetCostBudgetName@1000 : Record 1110;
      CostBudgetEntry@1002 : Record 1109;
      NewEntriesCount@1003 : Integer;
      ExpectedAmount@1004 : Decimal;
    BEGIN
      // Test if Cost Budget Entries with same date, cost type, cost center/ cost object are compressed
      Initialize;

      // Setup:
      LibraryCostAccounting.CreateCostBudgetName(SourceCostBudgetName);
      LibraryCostAccounting.CreateCostBudgetName(TargetCostBudgetName);
      NewEntriesCount := 3;
      ExpectedAmount := CreateBudgetEntries(SourceCostBudgetName.Name,NewEntriesCount);

      // Create budget entries suited for compression
      COMMIT;
      SetSharedVars(SourceCostBudgetName.Name,TargetCostBudgetName.Name,'',1,1);
      REPORT.RUN(REPORT::"Copy Cost Budget");

      SetSharedVars(SourceCostBudgetName.Name,TargetCostBudgetName.Name,'',1,1);
      REPORT.RUN(REPORT::"Copy Cost Budget");

      // Exercise:
      CostBudgetEntry.CompressBudgetEntries(TargetCostBudgetName.Name);

      // Verify:
      VerifyCompressedEntries(TargetCostBudgetName.Name,NewEntriesCount,ExpectedAmount * 2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyCAToCA,MessageHandler,RPHandlerAllocCosts)]
    PROCEDURE CopyAllocatedCostBudget@34();
    VAR
      SourceCostBudgetName@1002 : Record 1110;
      TargetCostBudgetName@1001 : Record 1110;
      CostBudgetEntry@1004 : Record 1109;
    BEGIN
      // Test Copy CA Budget with Allocated Cost Budget Entries to another CA Budget
      Initialize;

      // Setup:
      LibraryCostAccounting.CreateCostBudgetName(SourceCostBudgetName);
      LibraryCostAccounting.CreateCostBudgetName(TargetCostBudgetName);

      // Exercise:
      COMMIT;
      LibraryVariableStorage.Enqueue(SourceCostBudgetName.Name);
      REPORT.RUN(REPORT::"Cost Allocation");

      SetSharedVars(SourceCostBudgetName.Name,TargetCostBudgetName.Name,'1M',1,1);
      REPORT.RUN(REPORT::"Copy Cost Budget");

      // Verify:
      CostBudgetEntry.SETRANGE("Budget Name",TargetCostBudgetName.Name);
      CostBudgetEntry.SETRANGE(Allocated,TRUE);
      Assert.IsTrue(CostBudgetEntry.ISEMPTY,AllocatedBudgetEntriesCountErr);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyGLToCAWithDate,MessageHandler)]
    PROCEDURE CopyGLBudgetGlobalDim@1();
    VAR
      Formula@1000 : DateFormula;
    BEGIN
      // Test Copy G/L Budget To Cost Budget when CC & CO are mapped to Global Dim 1 & 2
      EVALUATE(Formula,'');
      CopyGLBudget(Formula);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyGLToCAWithDate,MessageHandler)]
    PROCEDURE CopyGLBudgetGlobalDimWithDate@90();
    VAR
      Formula@1000 : DateFormula;
    BEGIN
      // Test Copy G/L Budget To Cost Budget when CC & CO are mapped to Global Dim 1 & 2 with Date Change Formula
      EVALUATE(Formula,'<1M>');
      CopyGLBudget(Formula);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyGLToCA,MessageHandler)]
    PROCEDURE CopyGLBudgetGlobalAndBudgetDim@9();
    VAR
      CostBudgetName@1004 : Record 1110;
      GLBudgetEntry@1003 : Record 96;
      GLBudgetName@1002 : Record 95;
      DimensionCode@1008 : Code[20];
    BEGIN
      // Test Copy G/L Budget To Cost Budget when CC is mapped to Global Dim 1 and CO is mapped to Budget Dimension 1
      Initialize;

      // Setup Dimensions
      GLBudgetName.FINDFIRST;
      DimensionCode := FindDimensionCode(GLBudgetName);
      SetBudgetDimensionOnGLBudget(GLBudgetName,DimensionCode,GLBudgetName.FIELDNO("Budget Dimension 1 Code"));
      SetDimensionsOnGLBudgetEntries(GLBudgetEntry.FIELDNO("Budget Dimension 1 Code"),GLBudgetName.Name,DimensionCode);
      SetCADimensions(LibraryERM.GetGlobalDimensionCode(1),DimensionCode);

      // Setup Cost Budget
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      CreateCostCentersAndObjects;

      // Exercise:
      COMMIT;
      LibraryVariableStorage.Enqueue(GLBudgetName.Name);
      LibraryVariableStorage.Enqueue(CostBudgetName.Name);

      REPORT.RUN(REPORT::"Copy G/L Budget to Cost Acctg.");

      // Verify:
      ValidateCopyGLToCA(GLBudgetName.Name);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyGLToCA,MessageHandler)]
    PROCEDURE CopyGLBudgetBudgetAndGlobalDim@10();
    VAR
      CostBudgetName@1004 : Record 1110;
      GLBudgetEntry@1003 : Record 96;
      GLBudgetName@1002 : Record 95;
      DimensionCode@1008 : Code[20];
    BEGIN
      // Test Copy G/L Budget To Cost Budget when CC is mapped to Budget Dimension 1 and CO is mapped to Global Dim 2
      Initialize;

      // Setup Dimensions
      GLBudgetName.FINDFIRST;
      DimensionCode := FindDimensionCode(GLBudgetName);
      SetBudgetDimensionOnGLBudget(GLBudgetName,DimensionCode,GLBudgetName.FIELDNO("Budget Dimension 1 Code"));
      SetDimensionsOnGLBudgetEntries(GLBudgetEntry.FIELDNO("Budget Dimension 1 Code"),GLBudgetName.Name,DimensionCode);
      SetCADimensions(DimensionCode,LibraryERM.GetGlobalDimensionCode(2));

      // Setup Cost Budget
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      CreateCostCentersAndObjects;

      // Exercise:
      COMMIT;
      LibraryVariableStorage.Enqueue(GLBudgetName.Name);
      LibraryVariableStorage.Enqueue(CostBudgetName.Name);
      REPORT.RUN(REPORT::"Copy G/L Budget to Cost Acctg.");

      // Verify:
      ValidateCopyGLToCA(GLBudgetName.Name);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyGLToCA,MessageHandler)]
    PROCEDURE CopyGLBudgetWithBudgetDim1@11();
    VAR
      CostBudgetName@1004 : Record 1110;
      GLBudgetEntry@1003 : Record 96;
      GLBudgetName@1002 : Record 95;
      DimensionCode@1000 : Code[20];
    BEGIN
      // Test Copy G/L Budget To Cost Budget when CC is mapped to Budget Dimension 1 and CO is mapped to a dimension different than
      // Global Dimensions or Budget Dimensions
      Initialize;

      // Setup Dimensions
      GLBudgetName.FINDFIRST;
      DimensionCode := FindDimensionCode(GLBudgetName);
      SetBudgetDimensionOnGLBudget(GLBudgetName,DimensionCode,GLBudgetName.FIELDNO("Budget Dimension 1 Code"));
      SetDimensionsOnGLBudgetEntries(GLBudgetEntry.FIELDNO("Budget Dimension 1 Code"),GLBudgetName.Name,DimensionCode);
      SetCADimensions(DimensionCode,FindDimensionCode(GLBudgetName));

      // Setup Cost Budget
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      CreateCostCentersAndObjects;

      // Exercise:
      COMMIT;
      LibraryVariableStorage.Enqueue(GLBudgetName.Name);
      LibraryVariableStorage.Enqueue(CostBudgetName.Name);
      REPORT.RUN(REPORT::"Copy G/L Budget to Cost Acctg.");

      // Verify:
      ValidateCopyGLToCA(GLBudgetName.Name);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyGLToCA,MessageHandler)]
    PROCEDURE CopyGLBudgetWithBudgetDim2@12();
    VAR
      CostBudgetName@1004 : Record 1110;
      GLBudgetEntry@1003 : Record 96;
      GLBudgetName@1002 : Record 95;
      DimensionCode@1008 : Code[20];
    BEGIN
      // Test Copy G/L Budget To Cost Budget when CC is mapped to Budget Dimension 2 and CO to Global Dim 2
      Initialize;

      // Setup Dimensions
      GLBudgetName.FINDFIRST;
      DimensionCode := FindDimensionCode(GLBudgetName);
      SetBudgetDimensionOnGLBudget(GLBudgetName,DimensionCode,GLBudgetName.FIELDNO("Budget Dimension 2 Code"));
      SetDimensionsOnGLBudgetEntries(GLBudgetEntry.FIELDNO("Budget Dimension 2 Code"),GLBudgetName.Name,DimensionCode);
      SetCADimensions(DimensionCode,LibraryERM.GetGlobalDimensionCode(2));

      // Setup Cost Budget
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      CreateCostCentersAndObjects;

      // Exercise:
      COMMIT;
      LibraryVariableStorage.Enqueue(GLBudgetName.Name);
      LibraryVariableStorage.Enqueue(CostBudgetName.Name);
      REPORT.RUN(REPORT::"Copy G/L Budget to Cost Acctg.");

      // Verify:
      ValidateCopyGLToCA(GLBudgetName.Name);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyGLToCA,MessageHandler)]
    PROCEDURE CopyGLBudgetWithBudgetDim3@13();
    VAR
      CostBudgetName@1004 : Record 1110;
      GLBudgetEntry@1003 : Record 96;
      GLBudgetName@1002 : Record 95;
      DimensionCode@1008 : Code[20];
    BEGIN
      // Test Copy G/L Budget To Cost Budget when CC is mapped to Budget Dimension 3 and CO to Global Dim 2
      Initialize;

      // Setup Dimensions
      GLBudgetName.FINDFIRST;
      DimensionCode := FindDimensionCode(GLBudgetName);
      SetBudgetDimensionOnGLBudget(GLBudgetName,DimensionCode,GLBudgetName.FIELDNO("Budget Dimension 3 Code"));
      SetDimensionsOnGLBudgetEntries(GLBudgetEntry.FIELDNO("Budget Dimension 3 Code"),GLBudgetName.Name,DimensionCode);
      SetCADimensions(DimensionCode,LibraryERM.GetGlobalDimensionCode(2));

      // Setup Cost Budget
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      CreateCostCentersAndObjects;

      // Exercise:
      COMMIT;
      LibraryVariableStorage.Enqueue(GLBudgetName.Name);
      LibraryVariableStorage.Enqueue(CostBudgetName.Name);
      REPORT.RUN(REPORT::"Copy G/L Budget to Cost Acctg.");

      // Verify:
      ValidateCopyGLToCA(GLBudgetName.Name);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyGLToCA,MessageHandler)]
    PROCEDURE CopyGLBudgetWithBudgetDim4@14();
    VAR
      CostBudgetName@1004 : Record 1110;
      GLBudgetEntry@1003 : Record 96;
      GLBudgetName@1002 : Record 95;
      DimensionCode@1008 : Code[20];
    BEGIN
      // Test Copy G/L Budget To Cost Budget when CC is mapped to Budget Dimension 4 and CO to Global Dim 2
      Initialize;

      // Setup Dimensions
      GLBudgetName.FINDFIRST;
      DimensionCode := FindDimensionCode(GLBudgetName);
      SetBudgetDimensionOnGLBudget(GLBudgetName,DimensionCode,GLBudgetName.FIELDNO("Budget Dimension 4 Code"));
      SetDimensionsOnGLBudgetEntries(GLBudgetEntry.FIELDNO("Budget Dimension 4 Code"),GLBudgetName.Name,DimensionCode);
      SetCADimensions(DimensionCode,LibraryERM.GetGlobalDimensionCode(2));

      // Setup Cost Budget
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      CreateCostCentersAndObjects;

      // Exercise:
      COMMIT;
      LibraryVariableStorage.Enqueue(GLBudgetName.Name);
      LibraryVariableStorage.Enqueue(CostBudgetName.Name);
      REPORT.RUN(REPORT::"Copy G/L Budget to Cost Acctg.");

      // Verify:
      ValidateCopyGLToCA(GLBudgetName.Name);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyGLToCA,MessageHandler)]
    PROCEDURE CopyGLBudgetWithDimSetID@25();
    VAR
      CostBudgetName@1004 : Record 1110;
      GLBudgetName@1002 : Record 95;
      DimensionCode@1008 : Code[20];
    BEGIN
      // Test Copy G/L Budget To Cost Budget when CC is mapped to Dimension from Dimension Set Entry and CO to Global Dim 2
      Initialize;

      // Setup Dimensions
      GLBudgetName.FINDFIRST;
      DimensionCode := CreateDimensionWithDimValue;
      SetDimSetIDOnGLBudgetEntries(GLBudgetName.Name,DimensionCode);
      SetCADimensions(DimensionCode,LibraryERM.GetGlobalDimensionCode(2));

      // Setup Cost Budget
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      CreateCostCentersAndObjects;

      // Exercise:
      COMMIT;
      LibraryVariableStorage.Enqueue(GLBudgetName.Name);
      LibraryVariableStorage.Enqueue(CostBudgetName.Name);
      REPORT.RUN(REPORT::"Copy G/L Budget to Cost Acctg.");

      // Verify:
      ValidateCopyGLToCA(GLBudgetName.Name);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyGLToCA,MessageHandler)]
    PROCEDURE CopyGLBudgetNoCostTypeLinkAcc@26();
    VAR
      CostBudgetName@1004 : Record 1110;
      GLBudgetName@1002 : Record 95;
    BEGIN
      // Test Copy G/L Budget To Cost Budget when CC & CO are mapped to Global Dim 1 & 2 but not all Accounts have Cost Type link
      Initialize;

      // Setup Dimensions
      GLBudgetName.FINDFIRST;
      SetCADimensions(LibraryERM.GetGlobalDimensionCode(1),LibraryERM.GetGlobalDimensionCode(2));

      // Setup Cost Budget
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      CreateCostCentersAndObjects;
      RemoveCostTypeLink(GLBudgetName.Name);

      // Exercise:
      COMMIT;
      LibraryVariableStorage.Enqueue(GLBudgetName.Name);
      LibraryVariableStorage.Enqueue(CostBudgetName.Name);
      REPORT.RUN(REPORT::"Copy G/L Budget to Cost Acctg.");

      // Verify:
      ValidateCopyGLToCA(GLBudgetName.Name);
    END;

    [Test]
    [HandlerFunctions(RPHandlerCopyGLToCA)]
    PROCEDURE CopyGLBudgetSourceBudgetEmpty@69();
    BEGIN
      Initialize;

      // Setup
      LibraryVariableStorage.Enqueue(''); // G/L Budget.
      LibraryVariableStorage.Enqueue(''); // CA Budget.

      // Exercise
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Copy G/L Budget to Cost Acctg.");

      // Verify
      Assert.ExpectedError(SourceBudgetEmptyError);
    END;

    [Test]
    [HandlerFunctions(RPHandlerCopyGLToCA)]
    PROCEDURE CopyGLBudgetTargetBudgetEmpty@70();
    VAR
      GLBudgetName@1000 : Record 95;
    BEGIN
      Initialize;

      // Pre-Setup
      GLBudgetName.FINDFIRST;

      // Setup
      LibraryVariableStorage.Enqueue(GLBudgetName.Name);
      LibraryVariableStorage.Enqueue('');

      // Exercise
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Copy G/L Budget to Cost Acctg.");

      // Verify
      Assert.ExpectedError(TargetBudgetEmptyError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyCAToGL,MessageHandler)]
    PROCEDURE CopyCABudgetToGLWithCCDim@22();
    VAR
      TargetGLBudgetName@1000 : Record 95;
      SourceCostBudgetName@1001 : Record 1110;
      CostBudgetEntry@1002 : Record 1109;
      CostCenter@1004 : Record 1112;
    BEGIN
      Initialize;

      // Setup budgets
      LibraryERM.CreateGLBudgetName(TargetGLBudgetName);
      LibraryCostAccounting.CreateCostBudgetName(SourceCostBudgetName);

      LibraryCostAccounting.CreateCostCenterFromDimension(CostCenter);
      CreateCostBudgetEntry(CostBudgetEntry,SourceCostBudgetName.Name,CostCenter.Code,'');

      // Exercise:
      COMMIT;
      SetSharedVars(SourceCostBudgetName.Name,TargetGLBudgetName.Name,'1M',1,1);
      REPORT.RUN(REPORT::"Copy Cost Acctg. Budget to G/L");

      // Verify:
      ValidateCopyCAToGL(SourceCostBudgetName.Name,TargetGLBudgetName.Name,
        ROUND(CostBudgetEntry.Amount,0.01),CALCDATE(STRSUBSTNO(DateFilter,'1M'),CostBudgetEntry.Date));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyCAToGL,MessageHandler)]
    PROCEDURE CopyCABudgetToGLWithCODim@36();
    VAR
      TargetGLBudgetName@1000 : Record 95;
      SourceCostBudgetName@1001 : Record 1110;
      CostBudgetEntry@1002 : Record 1109;
      CostObject@1005 : Record 1113;
    BEGIN
      Initialize;

      // Setup budgets
      LibraryERM.CreateGLBudgetName(TargetGLBudgetName);
      LibraryCostAccounting.CreateCostBudgetName(SourceCostBudgetName);

      LibraryCostAccounting.CreateCostObjectFromDimension(CostObject);
      CreateCostBudgetEntry(CostBudgetEntry,SourceCostBudgetName.Name,'',CostObject.Code);

      // Exercise:
      COMMIT;
      SetSharedVars(SourceCostBudgetName.Name,TargetGLBudgetName.Name,'1M',1,1);
      REPORT.RUN(REPORT::"Copy Cost Acctg. Budget to G/L");

      // Verify:
      ValidateCopyCAToGL(SourceCostBudgetName.Name,TargetGLBudgetName.Name,
        ROUND(CostBudgetEntry.Amount,0.01),CALCDATE(STRSUBSTNO(DateFilter,'1M'),CostBudgetEntry.Date));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyCAToGL,MessageHandler)]
    PROCEDURE CopyCABudgetToGLWithBudgetDim@49();
    VAR
      TargetGLBudgetName@1000 : Record 95;
      SourceCostBudgetName@1001 : Record 1110;
      CostBudgetEntry@1002 : Record 1109;
      CostCenter@1005 : Record 1112;
    BEGIN
      Initialize;

      // Setup target budget
      LibraryERM.CreateGLBudgetName(TargetGLBudgetName);
      SetCADimensions(FindDimensionCode(TargetGLBudgetName),CostObjectDimension);
      TargetGLBudgetName.VALIDATE("Budget Dimension 1 Code",CostCenterDimension);
      TargetGLBudgetName.MODIFY(TRUE);

      // Setup source budget
      LibraryCostAccounting.CreateCostBudgetName(SourceCostBudgetName);
      LibraryCostAccounting.CreateCostCenterFromDimension(CostCenter);
      CreateCostBudgetEntry(CostBudgetEntry,SourceCostBudgetName.Name,CostCenter.Code,'');

      // Exercise:
      COMMIT;
      SetSharedVars(SourceCostBudgetName.Name,TargetGLBudgetName.Name,'1M',1,1);
      REPORT.RUN(REPORT::"Copy Cost Acctg. Budget to G/L");

      // Verify:
      ValidateCopyCAToGL(SourceCostBudgetName.Name,TargetGLBudgetName.Name,
        ROUND(CostBudgetEntry.Amount,0.01),CALCDATE(STRSUBSTNO(DateFilter,'1M'),CostBudgetEntry.Date));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyCAToGL)]
    PROCEDURE CopyCABudgetToGLNoDimension@73();
    VAR
      TargetGLBudgetName@1000 : Record 95;
      SourceCostBudgetName@1001 : Record 1110;
      CostBudgetEntry@1002 : Record 1109;
      CostCenter@1004 : Record 1112;
    BEGIN
      Initialize;

      // Setup budgets
      LibraryERM.CreateGLBudgetName(TargetGLBudgetName);
      LibraryCostAccounting.CreateCostBudgetName(SourceCostBudgetName);

      LibraryCostAccounting.CreateCostCenter(CostCenter);
      CreateCostBudgetEntry(CostBudgetEntry,SourceCostBudgetName.Name,CostCenter.Code,'');

      // Exercise:
      COMMIT;
      SetSharedVars(SourceCostBudgetName.Name,TargetGLBudgetName.Name,'1M',1,1);
      REPORT.RUN(REPORT::"Copy Cost Acctg. Budget to G/L");

      // Verify:
      ValidateCopyCAToGL(SourceCostBudgetName.Name,TargetGLBudgetName.Name,
        ROUND(CostBudgetEntry.Amount,0.01),CALCDATE(STRSUBSTNO(DateFilter,'1M'),CostBudgetEntry.Date));
    END;

    [Test]
    [HandlerFunctions(RPHandlerCopyCAToGL)]
    PROCEDURE CopyCABudgetToGLSourceBudgetEmpty@72();
    BEGIN
      Initialize;

      // Setup
      SetSharedVars('','','',1,1);

      // Exercise
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Copy Cost Acctg. Budget to G/L");

      // Verify
      Assert.ExpectedError(SourceBudgetEmptyError);
    END;

    [Test]
    [HandlerFunctions(RPHandlerCopyCAToGL)]
    PROCEDURE CopyCABudgetToGLTargetBudgetEmpty@74();
    VAR
      CostBudgetName@1000 : Record 1110;
    BEGIN
      Initialize;

      // Pre-Setup
      CostBudgetName.FINDFIRST;

      // Setup
      SetSharedVars(CostBudgetName.Name,'','',1,1);

      // Exercise
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Copy Cost Acctg. Budget to G/L");

      // Verify
      Assert.ExpectedError(TargetBudgetEmptyError);
    END;

    [Test]
    [HandlerFunctions(RPHandlerCopyCAToGL)]
    PROCEDURE CopyCABudgetToGLNoOfCopiesZero@75();
    BEGIN
      Initialize;

      // Setup
      SetSharedVars('','','',1,0);

      // Exercise
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Copy Cost Acctg. Budget to G/L");

      // Verify
      Assert.ExpectedError(NoOfCopiesZeroError);
    END;

    [Test]
    [HandlerFunctions(RPHandlerCopyCAToGL)]
    PROCEDURE CopyCABudgetToGLAmtRatioZero@76();
    BEGIN
      Initialize;

      // Setup
      SetSharedVars('','','',0,0);

      // Exercise
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Copy Cost Acctg. Budget to G/L");

      // Verify
      Assert.ExpectedError(MultiplicationFactorZeroOrLess);
    END;

    [Test]
    [HandlerFunctions(RPHandlerCopyCAToGL)]
    PROCEDURE CopyCABudgetToGLDateError@78();
    VAR
      CostBudgetName@1000 : Record 1110;
      GLBudgetName@1001 : Record 95;
    BEGIN
      Initialize;

      // Pre-Setup
      CostBudgetName.FINDFIRST;
      GLBudgetName.FINDFIRST;

      // Setup
      SetSharedVars(CostBudgetName.Name,GLBudgetName.Name,'',1,2);

      // Exercise
      COMMIT;
      ASSERTERROR REPORT.RUN(REPORT::"Copy Cost Acctg. Budget to G/L");

      // Verify
      Assert.ExpectedError(DateChangeFormulaRequired);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyCAToCA)]
    PROCEDURE CopyCABudgetDefault@21();
    VAR
      SourceCostBudgetName@1000 : Record 1110;
      TargetCostBudgetName@1001 : Record 1110;
      CostBudgetEntry@1003 : Record 1109;
    BEGIN
      // Test Copy CA Budget to CA Budget with Amount Ration 1 and Period 1M
      Initialize;

      // Setup budgets
      LibraryCostAccounting.CreateCostBudgetName(SourceCostBudgetName);
      LibraryCostAccounting.CreateCostBudgetEntry(CostBudgetEntry,SourceCostBudgetName.Name);
      LibraryCostAccounting.CreateCostBudgetName(TargetCostBudgetName);

      // Exercise:
      COMMIT;
      SetSharedVars(SourceCostBudgetName.Name,TargetCostBudgetName.Name,'1M',1,1);
      REPORT.RUN(REPORT::"Copy Cost Budget");

      // Verify:
      ValidateCopyCAToCA(SourceCostBudgetName.Name,TargetCostBudgetName.Name,
        ROUND(CostBudgetEntry.Amount,0.01),CALCDATE(STRSUBSTNO(DateFilter,'1M'),CostBudgetEntry.Date));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyCAToCA)]
    PROCEDURE CopyCABudgetAmtRatio@43();
    VAR
      SourceCostBudgetName@1000 : Record 1110;
      TargetCostBudgetName@1001 : Record 1110;
      CostBudgetEntry@1003 : Record 1109;
    BEGIN
      // Test Copy CA Budget to CA Budget with Amount Ration 2 and Period 1M
      Initialize;

      // Setup budgets
      LibraryCostAccounting.CreateCostBudgetName(SourceCostBudgetName);
      LibraryCostAccounting.CreateCostBudgetEntry(CostBudgetEntry,SourceCostBudgetName.Name);
      LibraryCostAccounting.CreateCostBudgetName(TargetCostBudgetName);

      // Exercise:
      COMMIT;
      SetSharedVars(SourceCostBudgetName.Name,TargetCostBudgetName.Name,'1M',2,1);
      REPORT.RUN(REPORT::"Copy Cost Budget");

      // Verify:
      ValidateCopyCAToCA(SourceCostBudgetName.Name,TargetCostBudgetName.Name,
        ROUND(CostBudgetEntry.Amount * 2,0.01),CALCDATE(STRSUBSTNO(DateFilter,'1M'),CostBudgetEntry.Date));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyCAToCA)]
    PROCEDURE CopyCABudgetDateFormulaMonth@44();
    VAR
      SourceCostBudgetName@1000 : Record 1110;
      TargetCostBudgetName@1001 : Record 1110;
      CostBudgetEntry@1003 : Record 1109;
    BEGIN
      // Test Copy CA Budget to CA Budget with Amount Ration 1 and Period 2M
      Initialize;

      // Setup budgets
      LibraryCostAccounting.CreateCostBudgetName(SourceCostBudgetName);
      LibraryCostAccounting.CreateCostBudgetEntry(CostBudgetEntry,SourceCostBudgetName.Name);
      LibraryCostAccounting.CreateCostBudgetName(TargetCostBudgetName);

      // Exercise:
      COMMIT;
      SetSharedVars(SourceCostBudgetName.Name,TargetCostBudgetName.Name,'2M',1,1);
      REPORT.RUN(REPORT::"Copy Cost Budget");

      // Verify:
      ValidateCopyCAToCA(SourceCostBudgetName.Name,TargetCostBudgetName.Name,
        ROUND(CostBudgetEntry.Amount,0.01),CALCDATE(STRSUBSTNO(DateFilter,'2M'),CostBudgetEntry.Date));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyCAToCA)]
    PROCEDURE CopyCABudgetDateFormulaYear@47();
    VAR
      SourceCostBudgetName@1000 : Record 1110;
      TargetCostBudgetName@1001 : Record 1110;
      CostBudgetEntry@1003 : Record 1109;
    BEGIN
      // Test Copy CA Budget to CA Budget with Amount Ration 1 and Period 1Y
      Initialize;

      // Setup budgets
      LibraryCostAccounting.CreateCostBudgetName(SourceCostBudgetName);
      LibraryCostAccounting.CreateCostBudgetEntry(CostBudgetEntry,SourceCostBudgetName.Name);
      LibraryCostAccounting.CreateCostBudgetName(TargetCostBudgetName);

      // Exercise:
      COMMIT;
      SetSharedVars(SourceCostBudgetName.Name,TargetCostBudgetName.Name,'1Y',1,1);
      REPORT.RUN(REPORT::"Copy Cost Budget");

      // Verify:
      ValidateCopyCAToCA(SourceCostBudgetName.Name,TargetCostBudgetName.Name,
        ROUND(CostBudgetEntry.Amount,0.01),CALCDATE(STRSUBSTNO(DateFilter,'1Y'),CostBudgetEntry.Date));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,RPHandlerCopyCAToCA)]
    PROCEDURE CopyCABudgetDateFormulaMonthNoOfCopiesMoreThanOne@80();
    VAR
      SourceCostBudgetName@1000 : Record 1110;
      TargetCostBudgetName@1001 : Record 1110;
      CostBudgetEntry@1003 : Record 1109;
      NumberOfCopies@1002 : Integer;
      DateFormula@1004 : Text[30];
    BEGIN
      // Test Copy CA Budget to CA Budget with some Period and number of copies more than one
      // Date has to be sequentially increased
      Initialize;

      // Setup budgets
      LibraryCostAccounting.CreateCostBudgetName(SourceCostBudgetName);
      LibraryCostAccounting.CreateCostBudgetEntry(CostBudgetEntry,SourceCostBudgetName.Name);
      LibraryCostAccounting.CreateCostBudgetName(TargetCostBudgetName);

      // Exercise:
      COMMIT;
      NumberOfCopies := LibraryRandom.RandIntInRange(5,10);
      DateFormula := STRSUBSTNO('%1M',LibraryRandom.RandInt(3));
      SetSharedVars(SourceCostBudgetName.Name,TargetCostBudgetName.Name,DateFormula,1,NumberOfCopies);
      REPORT.RUN(REPORT::"Copy Cost Budget");

      // Verify: each copy is created with new date
      VerifySequintiallyCBEnriesCreated(CostBudgetEntry.Date,DateFormula);
    END;

    [Test]
    [HandlerFunctions(RPHandlerCopyCAToCA)]
    PROCEDURE CopyCABudgetSourceBudgetEmpty@38();
    VAR
      TargetCostBudgetName@1001 : Record 1110;
    BEGIN
      // Test Copy CA Budget to CA Budget with Amount Ration 1 and Period 1M
      Initialize;

      // Setup target budget
      LibraryCostAccounting.CreateCostBudgetName(TargetCostBudgetName);

      // Exercise:
      COMMIT;
      SetSharedVars('',TargetCostBudgetName.Name,'1M',1,1);
      ASSERTERROR REPORT.RUN(REPORT::"Copy Cost Budget");
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,SourceBudgetEmptyError) > 0,UnexpectedErrorMessage);
    END;

    [Test]
    [HandlerFunctions(RPHandlerCopyCAToCA)]
    PROCEDURE CopyCABudgetTargetBudgetEmpty@41();
    VAR
      SourceCostBudgetName@1000 : Record 1110;
    BEGIN
      // Test Copy CA Budget to CA Budget with Amount Ration 1 and Period 1M
      Initialize;

      // Setup source budget
      LibraryCostAccounting.CreateCostBudgetName(SourceCostBudgetName);

      // Exercise:
      COMMIT;
      SetSharedVars(SourceCostBudgetName.Name,'','1M',1,1);
      ASSERTERROR REPORT.RUN(REPORT::"Copy Cost Budget");
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,TargetBudgetEmptyError) > 0,UnexpectedErrorMessage);
    END;

    [Test]
    [HandlerFunctions(RPHandlerCopyCAToCA)]
    PROCEDURE CopyCABudgetNoOfCopiesZero@45();
    VAR
      SourceCostBudgetName@1000 : Record 1110;
      TargetCostBudgetName@1001 : Record 1110;
    BEGIN
      // Test Copy CA Budget to CA Budget with Amount Ration 1 and Period 1M
      Initialize;

      // Setup budgets
      LibraryCostAccounting.CreateCostBudgetName(SourceCostBudgetName);
      LibraryCostAccounting.CreateCostBudgetName(TargetCostBudgetName);

      // Exercise:
      COMMIT;
      SetSharedVars(SourceCostBudgetName.Name,TargetCostBudgetName.Name,'1M',1,0);
      ASSERTERROR REPORT.RUN(REPORT::"Copy Cost Budget");
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,NoOfCopiesZeroError) > 0,UnexpectedErrorMessage);
    END;

    [Test]
    [HandlerFunctions(RPHandlerCopyCAToCA)]
    PROCEDURE CopyCABudgetAmtRatioZero@31();
    VAR
      SourceCostBudgetName@1000 : Record 1110;
      TargetCostBudgetName@1001 : Record 1110;
    BEGIN
      // Test Copy CA Budget to CA Budget with Amount Ration 1 and Period 1M
      Initialize;

      // Setup budgets
      LibraryCostAccounting.CreateCostBudgetName(SourceCostBudgetName);
      LibraryCostAccounting.CreateCostBudgetName(TargetCostBudgetName);

      // Exercise:
      COMMIT;
      SetSharedVars(SourceCostBudgetName.Name,TargetCostBudgetName.Name,'1M',0,1);
      ASSERTERROR REPORT.RUN(REPORT::"Copy Cost Budget");
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,MultiplicationFactorZeroError) > 0,UnexpectedErrorMessage);
    END;

    [Test]
    [HandlerFunctions(RPHandlerCopyCAToCA)]
    PROCEDURE CopyCABudgetDateError@33();
    VAR
      SourceCostBudgetName@1000 : Record 1110;
      TargetCostBudgetName@1001 : Record 1110;
    BEGIN
      // Test Copy CA Budget to CA Budget with Amount Ration 1 and Period 1M
      Initialize;

      // Setup budgets:
      LibraryCostAccounting.CreateCostBudgetName(SourceCostBudgetName);
      LibraryCostAccounting.CreateCostBudgetName(TargetCostBudgetName);

      // Exercise:
      COMMIT;
      SetSharedVars(SourceCostBudgetName.Name,TargetCostBudgetName.Name,'',1,2);
      ASSERTERROR REPORT.RUN(REPORT::"Copy Cost Budget");
      Assert.ExpectedError(DateChangeFormulaRequired);
    END;

    [Test]
    PROCEDURE DeleteCostBudgetName@4();
    VAR
      CostBudgetName@1000 : Record 1110;
      CostBudgetEntry@1002 : Record 1109;
      BudgetName@1003 : Code[80];
    BEGIN
      Initialize;

      // Setup cost budget:
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      LibraryCostAccounting.CreateCostBudgetEntry(CostBudgetEntry,CostBudgetName.Name);
      BudgetName := CostBudgetName.Description;

      // Exercise:
      CostBudgetName.DELETE(TRUE);

      // Verify:
      CLEAR(CostBudgetEntry);
      CostBudgetEntry.SETRANGE("Budget Name",BudgetName);
      Assert.IsTrue(CostBudgetEntry.ISEMPTY,CostBudgetEntriesCountError);
    END;

    [Test]
    [HandlerFunctions(MFHandlerCostBudgetEntries)]
    PROCEDURE InsertCostBudgetEntryManually@7();
    BEGIN
      Initialize;

      InsertManualCostBudgetEntry;
    END;

    [Test]
    [HandlerFunctions(MFHandlerCostBudgetEntries)]
    PROCEDURE InsertFirstCostBudgetEntryMan@24();
    VAR
      CostBudgetRegister@1000 : Record 1111;
    BEGIN
      Initialize;

      // Pre-Setup:
      CostBudgetRegister.DELETEALL(TRUE);

      InsertManualCostBudgetEntry;
    END;

    [Test]
    [HandlerFunctions(RPHandlerTransferToActual)]
    PROCEDURE TransferToActualBudgetEmpty@51();
    BEGIN
      // Test Transfer Budget To Actual with no source budget defined
      Initialize;

      COMMIT;
      LibraryVariableStorage.Enqueue('');
      LibraryVariableStorage.Enqueue(FORMAT(WORKDATE));
      ASSERTERROR REPORT.RUN(REPORT::"Transfer Budget to Actual");
    END;

    [Test]
    [HandlerFunctions(RPHandlerTransferToActual)]
    PROCEDURE TransferToActualDateEmpty@52();
    VAR
      CostBudgetName@1000 : Record 1110;
    BEGIN
      // Test Transfer Budget To Actual with no date range defined
      Initialize;

      // Setup:
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);

      // Exercise:
      COMMIT;
      LibraryVariableStorage.Enqueue(CostBudgetName.Name);
      LibraryVariableStorage.Enqueue('');
      ASSERTERROR REPORT.RUN(REPORT::"Transfer Budget to Actual");
    END;

    [Test]
    [HandlerFunctions(RPHandlerAllocCosts,RPHandlerTransferToActual,ConfirmHandlerYes,MessageHandler)]
    PROCEDURE TransferToActual@53();
    VAR
      CostBudgetName@1000 : Record 1110;
      CostBudgetEntry@1002 : Record 1109;
      BudgetEntriesCount@1001 : Integer;
    BEGIN
      // Test Transfer Budget To Actual : default scenario
      Initialize;

      // Setup:
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);

      // Create budget entries
      COMMIT;
      LibraryVariableStorage.Enqueue(CostBudgetName.Name);
      REPORT.RUN(REPORT::"Cost Allocation");

      // count the number of cost budget entries
      CostBudgetEntry.SETRANGE("Budget Name",CostBudgetName.Name);
      BudgetEntriesCount := CostBudgetEntry.COUNT;

      // Exercise:
      COMMIT;
      LibraryVariableStorage.Enqueue(CostBudgetName.Name);
      LibraryVariableStorage.Enqueue(FORMAT(WORKDATE));
      REPORT.RUN(REPORT::"Transfer Budget to Actual");

      // Verify:
      VerifyTransferToActual(BudgetEntriesCount);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CostBudgetMovementPageWithNetChange@30();
    VAR
      CostBudgetName@1005 : Record 1110;
      CostCenter@1003 : Record 1112;
      CostType@1006 : Record 1103;
      Amount@1000 : Decimal;
    BEGIN
      // Check Cost Budget/Movement page when View as Net Change option.

      // Setup: Create New Cost Budget, Cost Center and Cost Type.
      Initialize;
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      LibraryCostAccounting.CreateCostType(CostType);
      Amount := LibraryRandom.RandDec(1000,2);

      // Exercise: Create and Post Cost Journal Line with Random Amount.
      CreateAndPostCostJournalLine(WORKDATE,CostType."No.",CostCenter.Code,Amount);

      // Verify: Verify Cost Budget/Movement page for Net Change.
      VerifyCostBudgetMovement(CostBudgetName.Name,CostType."No.",1,Amount); // Take 1 for option type Net Change.
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE CostBudgetMovementPageWithBalanceAtDate@28();
    VAR
      CostBudgetName@1004 : Record 1110;
      CostCenter@1003 : Record 1112;
      CostType@1001 : Record 1103;
      Amount@1002 : Decimal;
      Amount2@1005 : Decimal;
    BEGIN
      // Check Cost Budget/Movement page when View as Balance at Date option.

      // Setup: Create New Cost Budget, Cost Center and Cost Type.
      Initialize;
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      LibraryCostAccounting.CreateCostCenter(CostCenter);
      LibraryCostAccounting.CreateCostType(CostType);

      // Exercise: Create and Post Cost Journal Line with Random Amount.
      Amount := LibraryRandom.RandDec(1000,2);
      CreateAndPostCostJournalLine(CALCDATE('<-1D>',WORKDATE),CostType."No.",CostCenter.Code,Amount);
      Amount2 := LibraryRandom.RandDec(100,2);
      CreateAndPostCostJournalLine(WORKDATE,CostType."No.",CostCenter.Code,Amount2);

      // Verify: Verify Cost Budget/Movement page for Balance at Date.
      VerifyCostBudgetMovement(CostBudgetName.Name,CostType."No.",2,Amount2 + Amount); // Take 2 for option type Balance at Date.
    END;

    LOCAL PROCEDURE CreateAndPostCostJournalLine@101(PostingDate@1001 : Date;CostTypeNo@1000 : Code[20];CostCenterCode@1007 : Code[20];Amount@1004 : Decimal);
    VAR
      CostJournalLine@1002 : Record 1101;
      CostJournalBatch@1005 : Record 1102;
      CostType@1003 : Record 1103;
      CostCenter@1008 : Record 1112;
    BEGIN
      LibraryCostAccounting.FindCostType(CostType);
      LibraryCostAccounting.FindCostCenter(CostCenter);
      FindCostJnlBatchAndTemplate(CostJournalBatch);
      LibraryCostAccounting.CreateCostJournalLineBasic(
        CostJournalLine,CostJournalBatch."Journal Template Name",CostJournalBatch.Name,PostingDate,CostTypeNo,CostType."No.");
      CostJournalLine.VALIDATE("Cost Center Code",CostCenterCode);
      CostJournalLine.VALIDATE("Cost Object Code",'');
      CostJournalLine.VALIDATE("Bal. Cost Center Code",CostCenter.Code);
      CostJournalLine.VALIDATE("Bal. Cost Object Code",'');
      CostJournalLine.VALIDATE(Amount,Amount);
      CostJournalLine.MODIFY(TRUE);
      LibraryCostAccounting.PostCostJournalLine(CostJournalLine);
    END;

    LOCAL PROCEDURE CCOrCOExists@103(DimSetID@1000 : Integer) : Boolean;
    VAR
      DimensionSetEntry@1001 : Record 480;
      CostCenter@1004 : Record 1112;
      CostObject@1005 : Record 1113;
    BEGIN
      // Check if Global Dim 1 or 2 codes exist among the dimension set entries
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      IF DimensionSetEntry.FINDSET THEN
        REPEAT
          IF DimensionSetEntry."Dimension Code" = CostCenterDimension THEN
            IF CostCenter.GET(DimensionSetEntry."Dimension Value Code") THEN
              EXIT(TRUE);
          IF DimensionSetEntry."Dimension Code" = CostObjectDimension THEN
            IF CostObject.GET(DimensionSetEntry."Dimension Value Code") THEN
              EXIT(TRUE);
        UNTIL DimensionSetEntry.NEXT = 0;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CostCenterDimension@54() : Code[20];
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      CostAccountingSetup.GET;
      EXIT(CostAccountingSetup."Cost Center Dimension");
    END;

    LOCAL PROCEDURE CostObjectDimension@55() : Code[20];
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      CostAccountingSetup.GET;
      EXIT(CostAccountingSetup."Cost Object Dimension");
    END;

    LOCAL PROCEDURE CreateBudgetEntries@62(BudgetName@1001 : Code[10];Count@1002 : Integer) : Decimal;
    VAR
      CostBudgetEntry@1003 : Record 1109;
      CostCenter@1004 : Record 1112;
      I@1005 : Integer;
      TotalAmount@1006 : Decimal;
    BEGIN
      LibraryCostAccounting.FindCostCenter(CostCenter);

      FOR I := 1 TO Count DO BEGIN
        CLEAR(CostBudgetEntry);
        CreateCostBudgetEntry(CostBudgetEntry,BudgetName,CostCenter.Code,'');
        TotalAmount := TotalAmount + CostBudgetEntry.Amount;
      END;

      EXIT(TotalAmount);
    END;

    LOCAL PROCEDURE CreateCostBudgetEntry@102(VAR CostBudgetEntry@1000 : Record 1109;CostBudgetName@1001 : Code[10];CostCenterCode@1002 : Code[20];CostObjectCode@1003 : Code[20]);
    VAR
      CostType@1004 : Record 1103;
    BEGIN
      LibraryCostAccounting.CreateCostBudgetEntry(CostBudgetEntry,CostBudgetName);
      LibraryCostAccounting.FindCostTypeLinkedToGLAcc(CostType);

      CostBudgetEntry.VALIDATE("Cost Center Code",CostCenterCode);
      CostBudgetEntry.VALIDATE("Cost Object Code",CostObjectCode);
      CostBudgetEntry.VALIDATE("Cost Type No.",CostType."No.");
      CostBudgetEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCostCentersAndObjects@48();
    VAR
      CostAccountMgt@1000 : Codeunit 1100;
    BEGIN
      CostAccountMgt.CreateCostCenters;
      CostAccountMgt.CreateCostObjects;
    END;

    LOCAL PROCEDURE CreateManualCostBudgetEntry@63(BudgetName@1003 : Code[10];CostTypeNo@1002 : Code[20];CostCenterCode@1001 : Code[20];Amount@1000 : Decimal);
    VAR
      CostType@1005 : Record 1103;
      CostBudgetPerPeriodPage@1004 : TestPage 1117;
    BEGIN
      LibraryVariableStorage.Clear;
      LibraryVariableStorage.Enqueue(Amount);
      CostType.GET(CostTypeNo);

      CostBudgetPerPeriodPage.OPENVIEW;
      CostBudgetPerPeriodPage.BudgetFilter.SETVALUE(BudgetName);
      CostBudgetPerPeriodPage.CostCenterFilter.SETVALUE(CostCenterCode);
      CostBudgetPerPeriodPage.MatrixForm.GOTORECORD(CostType);
      CostBudgetPerPeriodPage.MatrixForm.Column1.DRILLDOWN
    END;

    LOCAL PROCEDURE DimensionValueExists@65(DimensionValueCode@1000 : Code[20]) : Boolean;
    VAR
      DimensionValue@1001 : Record 349;
    BEGIN
      DimensionValue.SETRANGE(Code,DimensionValueCode);
      EXIT(DimensionValue.COUNT > 0);
    END;

    LOCAL PROCEDURE FindCostJnlBatchAndTemplate@68(VAR CostJournalBatch@1000 : Record 1102);
    VAR
      CostJournalTemplate@1001 : Record 1100;
    BEGIN
      LibraryCostAccounting.FindCostJournalTemplate(CostJournalTemplate);
      LibraryCostAccounting.FindCostJournalBatch(CostJournalBatch,CostJournalTemplate.Name);
      LibraryCostAccounting.ClearCostJournalLines(CostJournalBatch);
    END;

    LOCAL PROCEDURE FindDimensionCode@58(GLBudgetName@1001 : Record 95) : Code[20];
    VAR
      Dimension@1000 : Record 348;
      DimensionValue@1002 : Record 349;
    BEGIN
      // select a dimension <> 'AREA' -> temporary fix due to bug id 254697
      Dimension.SETFILTER(
        Code,'<>%1&<>%2&<>%3&<>%4&<>%5&<>%6&<>%7',
        LibraryERM.GetGlobalDimensionCode(1),LibraryERM.GetGlobalDimensionCode(2),GLBudgetName."Budget Dimension 1 Code",
        GLBudgetName."Budget Dimension 2 Code",GLBudgetName."Budget Dimension 3 Code",GLBudgetName."Budget Dimension 4 Code",'AREA');
      IF Dimension.FINDSET THEN
        REPEAT
          DimensionValue.SETRANGE("Dimension Code",Dimension.Code);
          IF NOT DimensionValue.ISEMPTY THEN
            EXIT(Dimension.Code);
        UNTIL Dimension.NEXT = 0;

      EXIT('');
    END;

    LOCAL PROCEDURE FindGLAccount@46(CostTypeNo@1000 : Code[20]) : Code[10];
    VAR
      CostType@1002 : Record 1103;
      GLAccount@1001 : Record 15;
    BEGIN
      CostType.GET(CostTypeNo);
      GLAccount.SETFILTER("No.",CostType."G/L Account Range");
      GLAccount.FINDFIRST;

      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE GetSkippedGLBudgetEntriesCount@16(GLBudgetName@1001 : Record 95) : Integer;
    VAR
      GLBudgetEntry@1000 : Record 96;
      NoSkipped@1005 : Integer;
    BEGIN
      // Count the number of skipped GL Budget Entries during a 'Copy' operation

      GLBudgetEntry.SETRANGE("Budget Name",GLBudgetName.Name);
      IF NOT GLBudgetHasCADimension(GLBudgetName,CostCenterDimension) AND
         NOT GLBudgetHasCADimension(GLBudgetName,CostObjectDimension)
      THEN
        EXIT(GLBudgetEntry.COUNT);

      GLBudgetEntry.FINDSET;
      REPEAT
        IF NOT GLAccExistsAndHasCostTypeLink(GLBudgetEntry."G/L Account No.") THEN
          NoSkipped := NoSkipped + 1
        ELSE
          IF NOT CCOrCOExists(GLBudgetEntry."Dimension Set ID") THEN // check for dimensions on Dimension Set Entry
            NoSkipped := NoSkipped + 1;
      UNTIL GLBudgetEntry.NEXT = 0;

      EXIT(NoSkipped);
    END;

    LOCAL PROCEDURE GetGLBudgetEntryFieldNo@20(GLBudgetName@1002 : Record 95;DimensionCode@1000 : Code[20]) : Integer;
    VAR
      GLBudgetEntry@1003 : Record 96;
      FieldNo@1004 : Integer;
    BEGIN
      // Check Global Dimension 1 or 2 fields
      IF DimensionCode = LibraryERM.GetGlobalDimensionCode(1) THEN
        FieldNo := GLBudgetEntry.FIELDNO("Global Dimension 1 Code")
      ELSE
        IF DimensionCode = LibraryERM.GetGlobalDimensionCode(2) THEN
          FieldNo := GLBudgetEntry.FIELDNO("Global Dimension 2 Code")
        ELSE
          CASE DimensionCode OF  // Check budget dimension fields
            GLBudgetName."Budget Dimension 1 Code":
              FieldNo := GLBudgetEntry.FIELDNO("Budget Dimension 1 Code");
            GLBudgetName."Budget Dimension 2 Code":
              FieldNo := GLBudgetEntry.FIELDNO("Budget Dimension 2 Code");
            GLBudgetName."Budget Dimension 3 Code":
              FieldNo := GLBudgetEntry.FIELDNO("Budget Dimension 3 Code");
            GLBudgetName."Budget Dimension 4 Code":
              FieldNo := GLBudgetEntry.FIELDNO("Budget Dimension 4 Code");
            ELSE
              FieldNo := -1;
          END;

      EXIT(FieldNo);
    END;

    LOCAL PROCEDURE GLBudgetHasCADimension@71(GLBudgetName@1001 : Record 95;DimensionCode@1000 : Code[20]) : Boolean;
    BEGIN
      EXIT(
        (DimensionCode = LibraryERM.GetGlobalDimensionCode(1)) OR
        (DimensionCode = LibraryERM.GetGlobalDimensionCode(2)) OR
        (DimensionCode = GLBudgetName."Budget Dimension 1 Code") OR
        (DimensionCode = GLBudgetName."Budget Dimension 2 Code") OR
        (DimensionCode = GLBudgetName."Budget Dimension 3 Code") OR
        (DimensionCode = GLBudgetName."Budget Dimension 4 Code"));
    END;

    LOCAL PROCEDURE GLAccExistsAndHasCostTypeLink@23(GLAccountNo@1000 : Code[20]) : Boolean;
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      IF GLAccount.GET(GLAccountNo) THEN
        EXIT(GLAccount."Cost Type No." <> '');
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE Initialize@3();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibraryCostAccounting.InitializeCASetup;

      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.SetupCostAccounting;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CopyGLBudget@87(Formula@1002 : DateFormula);
    VAR
      CostBudgetName@1001 : Record 1110;
      GLBudgetName@1000 : Record 95;
    BEGIN
      Initialize;

      // Setup:
      GLBudgetName.FINDFIRST;
      SetCADimensions(LibraryERM.GetGlobalDimensionCode(1),LibraryERM.GetGlobalDimensionCode(2));
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      CreateCostCentersAndObjects;

      // Exercise:
      COMMIT;
      LibraryVariableStorage.Enqueue(GLBudgetName.Name);
      LibraryVariableStorage.Enqueue(CostBudgetName.Name);
      LibraryVariableStorage.Enqueue(Formula);
      REPORT.RUN(REPORT::"Copy G/L Budget to Cost Acctg.");

      // Verify:
      ValidateCopyGLToCA(GLBudgetName.Name);
    END;

    LOCAL PROCEDURE InsertManualCostBudgetEntry@66();
    VAR
      CostBudgetName@1004 : Record 1110;
      CostType@1002 : Record 1103;
      CostCenter@1001 : Record 1112;
      Amount@1000 : Decimal;
    BEGIN
      // Setup:
      LibraryCostAccounting.CreateCostBudgetName(CostBudgetName);
      LibraryCostAccounting.FindCostType(CostType);
      LibraryCostAccounting.FindCostCenter(CostCenter);
      Amount := LibraryRandom.RandDec(100,2);

      // Exercise:
      CreateManualCostBudgetEntry(CostBudgetName.Name,CostType."No.",CostCenter.Code,Amount);

      // Verify:
      VerifyCostBudgetRegister(CostBudgetName.Name,CostType."No.",CostCenter.Code,Amount);
    END;

    LOCAL PROCEDURE RemoveCostTypeLink@37(GLBudgetName@1004 : Code[10]);
    VAR
      GLBudgetEntry@1002 : Record 96;
      GLAccount@1001 : Record 15;
      I@1003 : Integer;
    BEGIN
      GLBudgetEntry.SETRANGE("Budget Name",GLBudgetName);
      GLBudgetEntry.NEXT(LibraryRandom.RandInt(GLBudgetEntry.COUNT - 10));
      // Remove Cost Type Link for some GL Accounts
      FOR I := 1 TO 10 DO BEGIN
        GLAccount.GET(GLBudgetEntry."G/L Account No.");
        GLAccount.VALIDATE("Cost Type No.",'');
        GLAccount.MODIFY(TRUE);
        GLBudgetEntry.NEXT;
      END;
    END;

    LOCAL PROCEDURE SetBudgetDimensionOnGLBudget@56(GLBudgetName@1005 : Record 95;DimensionCode@1001 : Code[20];FieldNo@1000 : Integer);
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1003 : FieldRef;
    BEGIN
      RecRef.GETTABLE(GLBudgetName);
      FieldRef := RecRef.FIELD(FieldNo);

      RecRef.SETVIEW(GLBudgetName.GETVIEW);
      FieldRef.VALIDATE(DimensionCode);
      RecRef.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetDimensionsOnGLBudgetEntries@104(FieldNo@1004 : Integer;GLBudgetName@1000 : Code[20];DimensionCode@1001 : Code[20]);
    VAR
      GLBudgetEntry@1002 : Record 96;
      DimensionValue@1003 : Record 349;
      RecRef@1005 : RecordRef;
      FieldRef@1006 : FieldRef;
      I@1007 : Integer;
    BEGIN
      RecRef.GETTABLE(GLBudgetEntry);
      FieldRef := RecRef.FIELD(FieldNo);

      GLBudgetEntry.SETRANGE("Budget Name",GLBudgetName);
      RecRef.SETVIEW(GLBudgetEntry.GETVIEW);
      RecRef.NEXT(LibraryRandom.RandInt(GLBudgetEntry.COUNT - 10));
      // Add dimension values to some GL Budget Entries
      FOR I := 1 TO 10 DO BEGIN
        LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
        FieldRef.VALIDATE(DimensionValue.Code);
        RecRef.MODIFY(TRUE);
        RecRef.NEXT;
      END;
    END;

    LOCAL PROCEDURE SetDimSetIDOnGLBudgetEntries@39(GLBudgetName@1005 : Code[20];DimensionCode@1006 : Code[20]);
    VAR
      DimensionValue@1004 : Record 349;
      DimSetEntry@1002 : Record 480;
      GLBudgetEntry@1001 : Record 96;
      I@1000 : Integer;
    BEGIN
      GLBudgetEntry.SETRANGE("Budget Name",GLBudgetName);
      GLBudgetEntry.NEXT(LibraryRandom.RandInt(GLBudgetEntry.COUNT - 10));
      // Set DimSetID to some GL Budget Entries
      FOR I := 1 TO 10 DO BEGIN
        IF NOT DimSetEntry.GET(GLBudgetEntry."Dimension Set ID",DimensionCode) THEN BEGIN
          LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
          GLBudgetEntry.VALIDATE("Dimension Set ID",
            LibraryDimension.CreateDimSet(0,DimensionCode,DimensionValue.Code));
          GLBudgetEntry.MODIFY(TRUE);
        END;
        GLBudgetEntry.NEXT;
      END;
    END;

    LOCAL PROCEDURE SetCADimensions@35(CostCenterDimension@1000 : Code[20];CostObjectDimension@1001 : Code[20]);
    VAR
      CostAccountingSetup@1002 : Record 1108;
    BEGIN
      CostAccountingSetup.GET;
      CostAccountingSetup.VALIDATE("Cost Center Dimension",CostCenterDimension);
      CostAccountingSetup.VALIDATE("Cost Object Dimension",CostObjectDimension);
      CostAccountingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetSharedVars@32(SourceBudget@1000 : Code[10];TargetBudget@1001 : Code[10];DateFormula@1002 : Text[30];AmtRatio@1003 : Integer;NoOfCopies@1004 : Integer);
    BEGIN
      LibraryVariableStorage.Clear;
      LibraryVariableStorage.Enqueue(SourceBudget);
      LibraryVariableStorage.Enqueue(TargetBudget);
      LibraryVariableStorage.Enqueue(DateFormula);
      LibraryVariableStorage.Enqueue(AmtRatio);
      LibraryVariableStorage.Enqueue(NoOfCopies)
    END;

    LOCAL PROCEDURE GetSharedVars@77(VAR SourceBudget@1004 : Variant;VAR TargetBudget@1003 : Variant;VAR DateFormula@1002 : Variant;VAR AmtRatio@1001 : Variant;VAR NoOfCopies@1000 : Variant);
    BEGIN
      LibraryVariableStorage.Dequeue(SourceBudget);
      LibraryVariableStorage.Dequeue(TargetBudget);
      LibraryVariableStorage.Dequeue(DateFormula);
      LibraryVariableStorage.Dequeue(AmtRatio);
      LibraryVariableStorage.Dequeue(NoOfCopies);
    END;

    LOCAL PROCEDURE CreateDimensionWithDimValue@84() : Code[20];
    VAR
      Dimension@1001 : Record 348;
      DimensionValue@1002 : Record 349;
    BEGIN
      LibraryDimension.CreateDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      EXIT(Dimension.Code);
    END;

    LOCAL PROCEDURE ValidateCopyGLToCA@5(SourceBudget@1005 : Code[10]);
    VAR
      CostBudgetRegister@1000 : Record 1111;
      CostBudgetEntry@1002 : Record 1109;
      GLBudgetEntry@1003 : Record 96;
      SourceGLBudgetName@1001 : Record 95;
      TotalAmount@1004 : Decimal;
    BEGIN
      // Find G/L Budget entries
      GLBudgetEntry.SETRANGE("Budget Name",SourceBudget);

      // Find Cost Budget Register
      CostBudgetRegister.FINDLAST;

      CostBudgetRegister.TESTFIELD(Source,CostBudgetRegister.Source::"Transfer from G/L Budget");
      // Validate number of entries transferred
      SourceGLBudgetName.GET(SourceBudget);
      CostBudgetRegister.TESTFIELD("No. of Entries",GLBudgetEntry.COUNT - GetSkippedGLBudgetEntriesCount(SourceGLBudgetName));
      CostBudgetRegister.TESTFIELD(
        "No. of Entries",CostBudgetRegister."To Cost Budget Entry No." - CostBudgetRegister."From Cost Budget Entry No." + 1);

      // Validate amount
      CostBudgetEntry.SETRANGE(
        "Entry No.",CostBudgetRegister."From Cost Budget Entry No.",CostBudgetRegister."To Cost Budget Entry No.");
      IF CostBudgetEntry.FINDSET THEN
        REPEAT
          TotalAmount := TotalAmount + CostBudgetEntry.Amount;
          // Validate Allocated flag
          CostBudgetEntry.TESTFIELD(Allocated,FALSE);
        UNTIL CostBudgetEntry.NEXT = 0;

      CostBudgetRegister.TESTFIELD(Amount,TotalAmount);
    END;

    LOCAL PROCEDURE ValidateCopyCAToCA@6(SourceBudget@1001 : Code[10];TargetBudget@1000 : Code[10];ExpectedAmount@1004 : Decimal;ExpectedDate@1005 : Date);
    VAR
      CostBudgetRegister@1002 : Record 1111;
      CostBudgetEntry@1003 : Record 1109;
    BEGIN
      CostBudgetRegister.FINDLAST;
      CostBudgetEntry.GET(CostBudgetRegister."From Cost Budget Entry No.");

      // Validate Cost Budget Register
      CostBudgetRegister.TESTFIELD(Source,CostBudgetRegister.Source::Manual);
      CostBudgetRegister.TESTFIELD("No. of Entries",1);
      CostBudgetRegister.TESTFIELD(Amount,ExpectedAmount);
      // Validate Cost Budget Entry
      CostBudgetEntry.TESTFIELD("Budget Name",TargetBudget);
      CostBudgetEntry.TESTFIELD(Description,STRSUBSTNO(CopiedBudgetEntryDescription,SourceBudget));
      CostBudgetEntry.TESTFIELD(Amount,ExpectedAmount);
      CostBudgetEntry.TESTFIELD(Date,ExpectedDate);
      CostBudgetEntry.TESTFIELD(Allocated,FALSE);
    END;

    LOCAL PROCEDURE ValidateCopyCAToGL@40(SourceBudget@1002 : Code[10];TargetBudget@1003 : Code[10];ExpectedAmount@1001 : Decimal;ExpectedDate@1000 : Date);
    VAR
      CostBudgetEntry@1004 : Record 1109;
      GLBudgetEntry@1005 : Record 96;
    BEGIN
      CostBudgetEntry.SETRANGE("Budget Name",SourceBudget);
      CostBudgetEntry.FINDFIRST;

      // Validate G/L Budget Entry
      GLBudgetEntry.SETRANGE("Budget Name",TargetBudget);
      GLBudgetEntry.FINDFIRST;
      GLBudgetEntry.TESTFIELD(Amount,ExpectedAmount);
      GLBudgetEntry.TESTFIELD(Date,ExpectedDate);
      GLBudgetEntry.TESTFIELD(Description,STRSUBSTNO(CopiedBudgetEntryDescription,SourceBudget));
      GLBudgetEntry.TESTFIELD("G/L Account No.",FindGLAccount(CostBudgetEntry."Cost Type No."));

      IF NOT VerifyGLBudgetEntryDimension(GLBudgetEntry,CostCenterDimension,CostBudgetEntry."Cost Center Code") THEN
        ERROR(STRSUBSTNO(GLBudgetDimensionError,CostBudgetEntry."Cost Center Code"));

      IF NOT VerifyGLBudgetEntryDimension(GLBudgetEntry,CostObjectDimension,CostBudgetEntry."Cost Object Code") THEN
        ERROR(STRSUBSTNO(GLBudgetDimensionError,CostBudgetEntry."Cost Object Code"));
    END;

    LOCAL PROCEDURE VerifyGLBudgetEntryDimension@57(GLBudgetEntry@1002 : Record 96;DimensionCode@1001 : Code[20];DimensionValueCode@1000 : Code[20]) : Boolean;
    VAR
      GLBudgetName@1003 : Record 95;
      DimensionSetEntry@1006 : Record 480;
      RecordRef@1004 : RecordRef;
      FieldNo@1005 : Integer;
    BEGIN
      // Check if the dimension value was copied correctly
      IF NOT DimensionValueExists(DimensionValueCode) THEN // Check that the dimension value was not copied
        EXIT(NOT DimensionSetEntry.GET(GLBudgetEntry."Dimension Set ID",DimensionCode));

      GLBudgetName.GET(GLBudgetEntry."Budget Name");
      GLBudgetEntry.SETRANGE("Budget Name",GLBudgetName.Name);
      FieldNo := GetGLBudgetEntryFieldNo(GLBudgetName,DimensionCode);
      IF FieldNo <> -1 THEN BEGIN
        RecordRef.GETTABLE(GLBudgetEntry);
        RecordRef.SETVIEW(GLBudgetEntry.GETVIEW);
        RecordRef.FINDSET;
        IF FORMAT(RecordRef.FIELD(FieldNo)) = DimensionValueCode THEN
          EXIT(TRUE);
      END;

      // Look in Dimension Set Entry
      DimensionSetEntry.SETRANGE("Dimension Set ID",GLBudgetEntry."Dimension Set ID");
      DimensionSetEntry.SETRANGE("Dimension Value Code",DimensionValueCode);
      EXIT(DimensionSetEntry.FINDFIRST);
    END;

    LOCAL PROCEDURE VerifyCompressedEntries@59(BudgetName@1000 : Code[10];ExpectedEntries@1003 : Integer;ExpectedAmount@1001 : Decimal);
    VAR
      CostBudgetEntry@1002 : Record 1109;
      TotalAmount@1004 : Decimal;
    BEGIN
      CostBudgetEntry.SETRANGE("Budget Name",BudgetName);
      Assert.AreEqual(ExpectedEntries,CostBudgetEntry.COUNT,CostBudgetEntriesCountError);

      CostBudgetEntry.FINDSET;
      REPEAT
        TotalAmount := TotalAmount + CostBudgetEntry.Amount;
      UNTIL CostBudgetEntry.NEXT = 0;
      Assert.AreEqual(ExpectedAmount,TotalAmount,TotalBudgetEntriesAmountError);
    END;

    LOCAL PROCEDURE VerifyCostBudgetRegister@8(BudgetName@1001 : Code[10];CostTypeNo@1002 : Code[20];CostCenterCode@1003 : Code[20];Amount@1004 : Decimal);
    VAR
      CostBudgetRegister@1000 : Record 1111;
      CostBudgetEntry@1005 : Record 1109;
    BEGIN
      CostBudgetRegister.FINDLAST;
      CostBudgetEntry.GET(CostBudgetRegister."From Cost Budget Entry No.");

      // Validate Cost Budget Register
      CostBudgetRegister.TESTFIELD(Source,CostBudgetRegister.Source::Manual);
      CostBudgetRegister.TESTFIELD("No. of Entries",1);
      CostBudgetRegister.TESTFIELD("From Cost Budget Entry No.",CostBudgetEntry."Entry No.");
      CostBudgetRegister.TESTFIELD("To Cost Budget Entry No.",CostBudgetEntry."Entry No.");
      CostBudgetRegister.TESTFIELD("From Budget Entry No.",0);
      CostBudgetRegister.TESTFIELD("To Budget Entry No.",0);
      CostBudgetRegister.TESTFIELD(Amount,Amount);
      // Verify corresponding Cost Budget Entry
      CostBudgetEntry.TESTFIELD("Budget Name",BudgetName);
      CostBudgetEntry.TESTFIELD("Cost Type No.",CostTypeNo);
      CostBudgetEntry.TESTFIELD("Cost Center Code",CostCenterCode);
      CostBudgetEntry.TESTFIELD(Amount,Amount);
      CostBudgetEntry.TESTFIELD(Date,WORKDATE);
    END;

    LOCAL PROCEDURE VerifyTransferToActual@61(ExpectedCostEntriesCount@1000 : Integer);
    VAR
      CostRegister@1001 : Record 1105;
      CostEntry@1002 : Record 1104;
    BEGIN
      // Validate Cost Register
      CostRegister.FINDLAST;
      CostRegister.TESTFIELD("No. of Entries",ExpectedCostEntriesCount);

      // Validate Cost Entries count
      CostEntry.SETRANGE("Entry No.",CostRegister."From Cost Entry No.",CostRegister."To Cost Entry No.");
      Assert.AreEqual(ExpectedCostEntriesCount,CostEntry.COUNT,CostEntriesCountError);

      // Validate number of allocated cost entries
      CostEntry.SETRANGE(Allocated,TRUE);
      Assert.IsTrue(CostEntry.ISEMPTY,AllocatedCostEntriesCountError);
      // Validate the source field
      CostRegister.TESTFIELD(Source,CostRegister.Source::"Transfer from Budget");
    END;

    LOCAL PROCEDURE VerifyCostBudgetMovement@27(CostBudgetName@1002 : Code[10];Name@1005 : Text[50];AmountType@1000 : Integer;Amount@1001 : Decimal);
    VAR
      CostBudgetNames@1004 : TestPage 1116;
      CostTypeBalanceBudget@1003 : TestPage 1120;
    BEGIN
      CostBudgetNames.OPENVIEW;
      CostBudgetNames.FILTER.SETFILTER(Name,CostBudgetName);
      CostTypeBalanceBudget.TRAP;
      CostBudgetNames."Page Cost Type Balance/Budget".INVOKE;
      CostTypeBalanceBudget.PeriodType.SETVALUE(FORMAT(CostTypeBalanceBudget.PeriodType.GETOPTION(1))); // Take Index as 1 for option View By Day.
      CostTypeBalanceBudget.AmountType.SETVALUE(FORMAT(CostTypeBalanceBudget.AmountType.GETOPTION(AmountType)));
      CostTypeBalanceBudget.CostCenterFilter.SETVALUE('');
      CostTypeBalanceBudget.CostObjectFilter.SETVALUE('');
      CostTypeBalanceBudget.FILTER.SETFILTER(Name,Name);
      IF AmountType = 1 THEN // Net Change
        CostTypeBalanceBudget.FILTER.SETFILTER("Date Filter",FORMAT(WORKDATE))
      ELSE
        CostTypeBalanceBudget.FILTER.SETFILTER("Date Filter",STRSUBSTNO(BalanceAtDateFilter,FORMAT(WORKDATE)));

      CostTypeBalanceBudget."Net Change".ASSERTEQUALS(Amount);
    END;

    LOCAL PROCEDURE VerifySequintiallyCBEnriesCreated@83(StartingDate@1004 : Date;DateFormula@1002 : Text);
    VAR
      CostBudgetRegister@1006 : Record 1111;
      CostBudgetEntry@1008 : Record 1109;
      ExpectedDate@1007 : Date;
    BEGIN
      CostBudgetRegister.FINDLAST;
      CostBudgetEntry.SETRANGE("Entry No.",CostBudgetRegister."From Cost Budget Entry No.",
        CostBudgetRegister."To Cost Budget Entry No.");

      ExpectedDate := StartingDate;
      CostBudgetEntry.FINDSET;
      REPEAT
        ExpectedDate := CALCDATE(STRSUBSTNO(DateFilter,DateFormula),ExpectedDate);
        Assert.AreEqual(ExpectedDate,CostBudgetEntry.Date,CostBudgetEntryDateErr);
      UNTIL CostBudgetEntry.NEXT = 0;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerAllocCosts@42(VAR AllocCostsReqPage@1000 : TestRequestPage 1131);
    VAR
      SourceBudget@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SourceBudget);
      LibraryCostAccounting.AllocateCostsFromTo(AllocCostsReqPage,1,99,WORKDATE,'',SourceBudget);
      AllocCostsReqPage.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerCopyCAToCA@15(VAR CopyCAToCARP@1000 : TestRequestPage 1134);
    VAR
      AmtMultiplyRatio@1005 : Variant;
      DateFormula@1004 : Variant;
      NoOfCopies@1003 : Variant;
      SourceBudget@1002 : Variant;
      TargetBudget@1001 : Variant;
    BEGIN
      GetSharedVars(SourceBudget,TargetBudget,DateFormula,AmtMultiplyRatio,NoOfCopies);
      LibraryCostAccounting.CopyCABudgetToCABudget(CopyCAToCARP,SourceBudget,TargetBudget,AmtMultiplyRatio,DateFormula,NoOfCopies);
      CopyCAToCARP.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerCopyCAToGL@29(VAR CopyCAToGLReqPage@1000 : TestRequestPage 1136);
    VAR
      AmtMultiplyRatio@1005 : Variant;
      DateFormula@1004 : Variant;
      NoOfCopies@1003 : Variant;
      SourceBudget@1002 : Variant;
      TargetBudget@1001 : Variant;
    BEGIN
      GetSharedVars(SourceBudget,TargetBudget,DateFormula,AmtMultiplyRatio,NoOfCopies);
      LibraryCostAccounting.CopyCABudgetToGLBudget(
        CopyCAToGLReqPage,SourceBudget,TargetBudget,AmtMultiplyRatio,DateFormula,NoOfCopies);

      CopyCAToGLReqPage.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerCopyGLToCA@2(VAR CopyGLToCAReqPage@1000 : TestRequestPage 1135);
    VAR
      SourceBudget@1002 : Variant;
      TargetBudget@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SourceBudget);
      LibraryVariableStorage.Dequeue(TargetBudget);
      LibraryCostAccounting.CopyGLBudgetToCABudget(CopyGLToCAReqPage,SourceBudget,TargetBudget);
      CopyGLToCAReqPage.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerCopyGLToCAWithDate@79(VAR CopyGLToCAReqPage@1000 : TestRequestPage 1135);
    VAR
      DateFormula@1003 : Variant;
      SourceBudget@1002 : Variant;
      TargetBudget@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SourceBudget);
      LibraryVariableStorage.Dequeue(TargetBudget);
      LibraryVariableStorage.Dequeue(DateFormula);
      LibraryCostAccounting.CopyGLBudgetToCABudget(CopyGLToCAReqPage,SourceBudget,TargetBudget);
      CopyGLToCAReqPage."Date Change Formula".SETVALUE(DateFormula);
      CopyGLToCAReqPage.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE RPHandlerTransferToActual@64(VAR TransferToActualReqPage@1000 : TestRequestPage 1137);
    VAR
      DateRange@1002 : Variant;
      SourceBudget@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SourceBudget);
      LibraryVariableStorage.Dequeue(DateRange);
      LibraryCostAccounting.TransferBudgetToActual(TransferToActualReqPage,SourceBudget,DateRange);
      TransferToActualReqPage.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE MFHandlerCostBudgetEntries@67(VAR CostBudgetEntriesPage@1000 : TestPage 1115);
    VAR
      BudgetAmount@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(BudgetAmount);
      CostBudgetEntriesPage.Date.SETVALUE(WORKDATE);
      CostBudgetEntriesPage.Amount.SETVALUE(BudgetAmount);
      CostBudgetEntriesPage.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@17(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@60(Message@1000 : Text[1024]);
    BEGIN
      // dummy message handler
    END;

    BEGIN
    {
      // [FEATURE] [Cost Accounting] [Cost Budget]
      Unsupported version tags:
      SE: Unable to Execute

       1. Check Cost Budget/Movement page when View as option is Net Change.
       2. Check Cost Budget/Movement page when View as option is Balance at Date.

       TFS_TS_ID = 265325
       Covers Test Cases:
       -------------------------------------------------------------------
       Test Function Name                            TFS ID
       -------------------------------------------------------------------
       CostBudgetMovementPageWithNetChange
       CostBudgetMovementPageWithBalanceAtDate       257493
    }
    END.
  }
}

