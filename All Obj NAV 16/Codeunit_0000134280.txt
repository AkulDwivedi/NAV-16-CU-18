OBJECT Codeunit 134280 Simple Data Exchange UI UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1008 : Codeunit 130000;
      LibraryUtility@1007 : Codeunit 131000;
      Initialized@1002 : Boolean;
      CurrencyCodeXMLElementTxt@1000 : TextConst 'ENU=\exchangerates\dailyrates\@code';
      StartingDateXMLElementTxt@1010 : TextConst 'ENU=\exchangerates\@id';
      ExchRateAmountXMLElementTxt@1003 : TextConst 'ENU=\exchangerates\dailyrates\rate';
      RelationalExchRateAmountXMLElementTxt@1009 : TextConst 'ENU=\exchangerates\dailyrates\@amount';
      NewDefinitionLineSourceTxt@1001 : TextConst 'ENU=\exchangerates\dailyrates\';

    LOCAL PROCEDURE Initialize@27();
    VAR
      DataExch@1006 : Record 1220;
      DataExchDef@1003 : Record 1222;
      InventorySetup@1001 : Record 313;
      LibraryERMCountryData@1004 : Codeunit 131305;
      LibraryInventory@1000 : Codeunit 132201;
    BEGIN
      DataExch.DELETEALL(TRUE);
      DataExchDef.DELETEALL(TRUE);

      IF Initialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryInventory.NoSeriesSetup(InventorySetup);
      Initialized := TRUE;

      COMMIT;
    END;

    [Test]
    PROCEDURE TestGeneratingSetupWithSuggestedFieldsOnly@15();
    VAR
      DataExchDef@1000 : Record 1222;
      TempSuggestedField@1001 : TEMPORARY Record 2000000041;
      DataExchFieldMappingBuf@1002 : Record 1265;
      TempDataExchFieldMappingBuf@1003 : TEMPORARY Record 1265;
      DataExchLineDef@1004 : Record 1227;
      DataExchMapping@1005 : Record 1224;
      Depth@1006 : Integer;
    BEGIN
      // Setup
      Initialize;
      CreateDataExchangeDefinition(DataExchDef,DataExchLineDef,DataExchMapping);
      GetSuggestedFields(TempSuggestedField);

      // Execute
      DataExchFieldMappingBuf.InsertFromDataExchDefinition(TempDataExchFieldMappingBuf,DataExchDef,TempSuggestedField);

      // Verify
      Assert.IsTrue(DataExchFieldMappingBuf.ISEMPTY,'No permanent records should have been inserted');
      Assert.IsTrue(TempSuggestedField.COUNT > 0,'Temp suggested fields must have a value');
      TempDataExchFieldMappingBuf.FINDFIRST;

      Depth := 0;
      VerifyDataExchangeDefLineField(TempDataExchFieldMappingBuf,DataExchLineDef,DataExchMapping,Depth);

      Depth := 1;
      Assert.AreEqual(
        TempSuggestedField.COUNT,TempDataExchFieldMappingBuf.COUNT - 1,'Wrong number of TempSimpleDataExchangeSetup records found');
      VerifySuggestedFields(TempDataExchFieldMappingBuf,DataExchLineDef,TempSuggestedField,Depth);
    END;

    [Test]
    PROCEDURE TestGeneratingSetupWithMappedFieldsOnly@41();
    VAR
      DataExchDef@1000 : Record 1222;
      TempSuggestedField@1001 : TEMPORARY Record 2000000041;
      DataExchFieldMappingBuf@1002 : Record 1265;
      TempDataExchFieldMappingBuf@1003 : TEMPORARY Record 1265;
      DataExchLineDef@1004 : Record 1227;
      DataExchMapping@1005 : Record 1224;
      DataExchFieldMapping@1007 : Record 1225;
      Depth@1006 : Integer;
    BEGIN
      // Setup
      Initialize;
      CreateDataExchangeDefinition(DataExchDef,DataExchLineDef,DataExchMapping);
      CreateFieldMappings(DataExchMapping);

      // Execute
      DataExchFieldMappingBuf.InsertFromDataExchDefinition(TempDataExchFieldMappingBuf,DataExchDef,TempSuggestedField);

      // Verify
      Assert.IsTrue(DataExchFieldMappingBuf.ISEMPTY,'No permanent records should have been inserted');
      TempDataExchFieldMappingBuf.FINDFIRST;

      Depth := 0;
      VerifyDataExchangeDefLineField(TempDataExchFieldMappingBuf,DataExchLineDef,DataExchMapping,Depth);

      Depth := 1;
      Assert.AreEqual(
        DataExchFieldMapping.COUNT,TempDataExchFieldMappingBuf.COUNT - 1,
        'Wrong number of TempSimpleDataExchangeSetup records found');
      VerifyMappedFields(TempDataExchFieldMappingBuf,DataExchMapping);
    END;

    [Test]
    PROCEDURE TestGeneratingSetupWithMixedFields@12();
    VAR
      DataExchDef@1000 : Record 1222;
      TempSuggestedField@1001 : TEMPORARY Record 2000000041;
      DataExchFieldMappingBuf@1002 : Record 1265;
      TempDataExchFieldMappingBuf@1003 : TEMPORARY Record 1265;
      DataExchLineDef@1004 : Record 1227;
      DataExchMapping@1005 : Record 1224;
      DataExchFieldMapping@1007 : Record 1225;
      Depth@1006 : Integer;
    BEGIN
      // Setup
      Initialize;
      CreateDataExchangeDefinition(DataExchDef,DataExchLineDef,DataExchMapping);
      CreateFieldMappings(DataExchMapping);
      GetSuggestedFields(TempSuggestedField);

      TempSuggestedField.FINDFIRST;
      DataExchFieldMapping.SETFILTER("Field ID",'<>%1',TempSuggestedField."No.");
      DataExchFieldMapping.DELETEALL(TRUE);
      TempSuggestedField.DELETE;
      TempSuggestedField.RESET;

      // Execute
      DataExchFieldMappingBuf.InsertFromDataExchDefinition(TempDataExchFieldMappingBuf,DataExchDef,TempSuggestedField);

      // Verify
      Assert.IsTrue(DataExchFieldMappingBuf.ISEMPTY,'No permanent records should have been inserted');
      TempDataExchFieldMappingBuf.FINDFIRST;

      Depth := 0;
      VerifyDataExchangeDefLineField(TempDataExchFieldMappingBuf,DataExchLineDef,DataExchMapping,Depth);

      CLEAR(DataExchFieldMapping);
      Depth := 1;
      Assert.AreEqual(
        DataExchFieldMapping.COUNT,TempDataExchFieldMappingBuf.COUNT - 1,
        'Wrong number of TempSimpleDataExchangeSetup records found');
      VerifyMappedFields(TempDataExchFieldMappingBuf,DataExchMapping);
    END;

    [Test]
    PROCEDURE TestGeneratingSetupWithDefinitionLineOnly@38();
    VAR
      DataExchDef@1000 : Record 1222;
      TempSuggestedField@1001 : TEMPORARY Record 2000000041;
      DataExchFieldMappingBuf@1002 : Record 1265;
      TempDataExchFieldMappingBuf@1003 : TEMPORARY Record 1265;
      DataExchLineDef@1004 : Record 1227;
      DataExchMapping@1005 : Record 1224;
      Depth@1006 : Integer;
    BEGIN
      // Setup
      Initialize;
      CreateDataExchangeDefinition(DataExchDef,DataExchLineDef,DataExchMapping);

      // Execute
      DataExchFieldMappingBuf.InsertFromDataExchDefinition(TempDataExchFieldMappingBuf,DataExchDef,TempSuggestedField);

      // Verify
      Assert.IsTrue(DataExchFieldMappingBuf.ISEMPTY,'No permanent records should have been inserted');

      Depth := 0;
      Assert.AreEqual(1,TempDataExchFieldMappingBuf.COUNT,'Wrong number of TempSimpleDataExchangeSetup records found');
      VerifyDataExchangeDefLineField(TempDataExchFieldMappingBuf,DataExchLineDef,DataExchMapping,Depth);
    END;

    [Test]
    PROCEDURE TestGeneratingSetupWithParentChildLinesDefinition@52();
    VAR
      DataExchDef@1000 : Record 1222;
      TempChildSuggestedField@1010 : TEMPORARY Record 2000000041;
      DataExchFieldMappingBuf@1002 : Record 1265;
      TempDataExchFieldMappingBuf@1003 : TEMPORARY Record 1265;
      DataExchLineDef@1004 : Record 1227;
      DataExchMapping@1005 : Record 1224;
      ChildDataExchLineDef@1009 : Record 1227;
      ChildDataExchMapping@1008 : Record 1224;
      DataExchFieldMapping@1007 : Record 1225;
      Depth@1006 : Integer;
    BEGIN
      // Setup
      Initialize;
      CreateDataExchangeDefinition(DataExchDef,DataExchLineDef,DataExchMapping);
      CreateFieldMappings(DataExchMapping);
      CreateChildLineDefinition(DataExchLineDef,ChildDataExchLineDef,ChildDataExchMapping);
      GetSuggestedFieldsChildTable(TempChildSuggestedField);

      // Execute
      DataExchFieldMappingBuf.InsertFromDataExchDefinition(TempDataExchFieldMappingBuf,DataExchDef,TempChildSuggestedField);

      // Verify Header
      Assert.IsTrue(DataExchFieldMappingBuf.ISEMPTY,'No permanent records should have been inserted');
      TempDataExchFieldMappingBuf.FINDFIRST;
      Assert.AreEqual(
        DataExchFieldMapping.COUNT,TempDataExchFieldMappingBuf.COUNT - 2,
        'Wrong number of TempSimpleDataExchangeSetup records found');

      Depth := 0;
      VerifyDataExchangeDefLineField(TempDataExchFieldMappingBuf,DataExchLineDef,DataExchMapping,Depth);

      CLEAR(DataExchFieldMapping);
      Depth := 1;
      VerifyMappedFields(TempDataExchFieldMappingBuf,DataExchMapping);

      // Verify child lines
      TempDataExchFieldMappingBuf.RESET;
      TempDataExchFieldMappingBuf.SETRANGE("Data Exchange Line Def Code",ChildDataExchLineDef.Code);
      TempDataExchFieldMappingBuf.FINDSET;
      VerifyDataExchangeDefLineField(TempDataExchFieldMappingBuf,ChildDataExchLineDef,ChildDataExchMapping,Depth);

      Depth := 2;
      VerifySuggestedFields(TempDataExchFieldMappingBuf,ChildDataExchLineDef,TempChildSuggestedField,Depth);
    END;

    [Test]
    PROCEDURE TestInsertingLineManually@25();
    VAR
      DataExchDef@1000 : Record 1222;
      DataExchFieldMappingBuf@1002 : Record 1265;
      TempDataExchFieldMappingBuf@1003 : TEMPORARY Record 1265;
      DataExchLineDef@1004 : Record 1227;
      DataExchMapping@1005 : Record 1224;
      DataExchFieldMapping@1007 : Record 1225;
      DataExchColumnDef@1009 : Record 1223;
    BEGIN
      // Setup
      Initialize;
      CreateDataExchangeDefinition(DataExchDef,DataExchLineDef,DataExchMapping);

      // Execute
      CreateSetupRecordManually(TempDataExchFieldMappingBuf,DataExchMapping);

      // Verify
      Assert.IsTrue(DataExchFieldMappingBuf.ISEMPTY,'No permanent records should have been inserted');

      Assert.AreEqual(1,DataExchFieldMapping.COUNT,'Data Exchange Field Mapping should have been created');
      Assert.AreEqual(1,DataExchColumnDef.COUNT,'Data Exchange Column Def should have been created');
      VerifyMappedFields(TempDataExchFieldMappingBuf,DataExchMapping);
    END;

    [Test]
    PROCEDURE TestSettingDefaultValue@4();
    VAR
      DataExchDef@1000 : Record 1222;
      DataExchFieldMappingBuf@1002 : Record 1265;
      TempDataExchFieldMappingBuf@1003 : TEMPORARY Record 1265;
      DataExchLineDef@1004 : Record 1227;
      DataExchMapping@1005 : Record 1224;
      DataExchFieldMapping@1007 : Record 1225;
      DataExchColumnDef@1009 : Record 1223;
      ExpectedText@1010 : Text;
    BEGIN
      // Setup
      Initialize;
      CreateDataExchangeDefinition(DataExchDef,DataExchLineDef,DataExchMapping);
      CreateSetupRecordManually(TempDataExchFieldMappingBuf,DataExchMapping);

      // Execute
      ExpectedText := LibraryUtility.GenerateRandomText(MAXSTRLEN(TempDataExchFieldMappingBuf."Default Value"));
      TempDataExchFieldMappingBuf.SETRANGE(Type,TempDataExchFieldMappingBuf.Type::Field);
      TempDataExchFieldMappingBuf.FINDFIRST;
      TempDataExchFieldMappingBuf.VALIDATE(
        "Default Value",COPYSTR(ExpectedText,1,MAXSTRLEN(TempDataExchFieldMappingBuf."Default Value")));
      TempDataExchFieldMappingBuf.MODIFY(TRUE);

      // Verify
      Assert.IsTrue(DataExchFieldMappingBuf.ISEMPTY,'No permanent records should have been inserted');

      Assert.AreEqual(1,DataExchFieldMapping.COUNT,'Data Exchange Field Mapping should have been created');
      Assert.AreEqual(1,DataExchColumnDef.COUNT,'Data Exchange Column Def should have been created');

      DataExchFieldMapping.SETRANGE("Field ID",TempDataExchFieldMappingBuf."Field ID");
      DataExchFieldMapping.FINDFIRST;

      Assert.AreEqual(ExpectedText,DataExchFieldMapping."Default Value",'Expected value was not set');
    END;

    [Test]
    PROCEDURE TestDeletingALine@43();
    VAR
      DataExchDef@1000 : Record 1222;
      DataExchFieldMappingBuf@1002 : Record 1265;
      TempDataExchFieldMappingBuf@1003 : TEMPORARY Record 1265;
      DataExchLineDef@1004 : Record 1227;
      DataExchMapping@1005 : Record 1224;
      DataExchFieldMapping@1007 : Record 1225;
      DataExchColumnDef@1009 : Record 1223;
    BEGIN
      // Setup
      Initialize;
      CreateDataExchangeDefinition(DataExchDef,DataExchLineDef,DataExchMapping);
      CreateSetupRecordManually(TempDataExchFieldMappingBuf,DataExchMapping);

      // Execute
      TempDataExchFieldMappingBuf.DELETE(TRUE);

      // Verify
      Assert.IsTrue(DataExchFieldMappingBuf.ISEMPTY,'No permanent records should have been inserted');

      Assert.AreEqual(0,DataExchFieldMapping.COUNT,'Data Exchange Field Mapping should have been deleted');
      Assert.AreEqual(0,DataExchColumnDef.COUNT,'Data Exchange Column Def should have been deleted');
    END;

    [Test]
    PROCEDURE TestUpdatingSourceUpdatesColumnMapping@21();
    VAR
      DataExchDef@1000 : Record 1222;
      DataExchFieldMappingBuf@1002 : Record 1265;
      TempDataExchFieldMappingBuf@1003 : TEMPORARY Record 1265;
      DataExchLineDef@1004 : Record 1227;
      DataExchMapping@1005 : Record 1224;
      DataExchFieldMapping@1007 : Record 1225;
      DataExchColumnDef@1009 : Record 1223;
      ExpectedText@1010 : Text;
    BEGIN
      // Setup
      Initialize;
      CreateDataExchangeDefinition(DataExchDef,DataExchLineDef,DataExchMapping);
      CreateSetupRecordManually(TempDataExchFieldMappingBuf,DataExchMapping);
      ExpectedText := RelationalExchRateAmountXMLElementTxt;
      Assert.AreNotEqual(TempDataExchFieldMappingBuf.Source,ExpectedText,'Setup data is wrong');

      // Execute
      TempDataExchFieldMappingBuf.VALIDATE(Source,RelationalExchRateAmountXMLElementTxt);

      // Verify
      Assert.IsTrue(DataExchFieldMappingBuf.ISEMPTY,'No permanent records should have been inserted');

      Assert.AreEqual(1,DataExchFieldMapping.COUNT,'Data Exchange Field Mapping should have been deleted');
      Assert.AreEqual(1,DataExchColumnDef.COUNT,'Data Exchange Column Def should have been deleted');

      DataExchColumnDef.FINDFIRST;
      Assert.AreEqual(ExpectedText,DataExchColumnDef.Path,'Path should be updated');
    END;

    [Test]
    PROCEDURE TestUpdatingSourceUpdatesLineDefinition@7();
    VAR
      DataExchDef@1000 : Record 1222;
      TempSuggestedField@1001 : TEMPORARY Record 2000000041;
      DataExchFieldMappingBuf@1002 : Record 1265;
      TempDataExchFieldMappingBuf@1003 : TEMPORARY Record 1265;
      DataExchLineDef@1004 : Record 1227;
      DataExchMapping@1005 : Record 1224;
      DataExchFieldMapping@1007 : Record 1225;
      DataExchColumnDef@1008 : Record 1223;
      ExpectedText@1009 : Text;
    BEGIN
      // Setup
      Initialize;
      CreateDataExchangeDefinition(DataExchDef,DataExchLineDef,DataExchMapping);
      DataExchFieldMappingBuf.InsertFromDataExchDefinition(TempDataExchFieldMappingBuf,DataExchDef,TempSuggestedField);
      TempDataExchFieldMappingBuf.SETRANGE(Type,TempDataExchFieldMappingBuf.Type::Table);
      TempDataExchFieldMappingBuf.FINDFIRST;
      ExpectedText := NewDefinitionLineSourceTxt;
      Assert.AreNotEqual(TempDataExchFieldMappingBuf.Source,ExpectedText,'Setup data is wrong');

      // Execute
      TempDataExchFieldMappingBuf.VALIDATE(Source,NewDefinitionLineSourceTxt);

      // Verify
      Assert.IsTrue(DataExchFieldMappingBuf.ISEMPTY,'No permanent records should have been inserted');
      TempDataExchFieldMappingBuf.FINDFIRST;

      Assert.AreEqual(0,DataExchFieldMapping.COUNT,'Data Exchange Field Mapping should not be created');
      Assert.AreEqual(0,DataExchColumnDef.COUNT,'Data Exchange Column Def should not be created');

      DataExchLineDef.FINDFIRST;
      Assert.AreEqual(ExpectedText,DataExchLineDef."Data Line Tag",'Path should be updated');
    END;

    LOCAL PROCEDURE CreateDataExchangeDefinition@1(VAR DataExchDef@1000 : Record 1222;VAR DataExchLineDef@1001 : Record 1227;VAR DataExchMapping@1003 : Record 1224);
    BEGIN
      DataExchDef.INIT;
      DataExchDef.Code := LibraryUtility.GenerateRandomCode(DataExchDef.FIELDNO(Code),DATABASE::"Data Exch. Def");
      DataExchDef.Name := LibraryUtility.GenerateRandomCode(DataExchDef.FIELDNO(Name),DATABASE::"Data Exch. Def");
      DataExchDef.Type := DataExchDef.Type::"Generic Import";
      DataExchDef."Reading/Writing Codeunit" := CODEUNIT::"Import XML File to Data Exch.";
      DataExchDef.INSERT(TRUE);

      // TODO: test with namespace
      DataExchLineDef.INIT;
      DataExchLineDef."Data Exch. Def Code" := DataExchDef.Code;
      DataExchLineDef.Code :=
        LibraryUtility.GenerateRandomCode(DataExchLineDef.FIELDNO(Code),DATABASE::"Data Exch. Line Def");
      DataExchLineDef.Name :=
        LibraryUtility.GenerateRandomCode(DataExchLineDef.FIELDNO(Name),DATABASE::"Data Exch. Line Def");
      DataExchLineDef.INSERT;

      DataExchMapping.INIT;
      DataExchMapping."Data Exch. Def Code" := DataExchDef.Code;
      DataExchMapping."Data Exch. Line Def Code" := DataExchLineDef.Code;
      DataExchMapping."Table ID" := DATABASE::"Currency Exchange Rate";
      DataExchMapping."Mapping Codeunit" := CODEUNIT::"Map Currency Exchange Rate";
      DataExchMapping.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateChildLineDefinition@56(ParentDataExchLineDef@1000 : Record 1227;VAR DataExchLineDef@1001 : Record 1227;VAR DataExchMapping@1003 : Record 1224);
    BEGIN
      DataExchLineDef.INIT;
      DataExchLineDef."Data Exch. Def Code" := ParentDataExchLineDef."Data Exch. Def Code";
      DataExchLineDef.Code :=
        LibraryUtility.GenerateRandomCode(DataExchLineDef.FIELDNO(Code),DATABASE::"Data Exch. Line Def");
      DataExchLineDef.Name :=
        LibraryUtility.GenerateRandomCode(DataExchLineDef.FIELDNO(Name),DATABASE::"Data Exch. Line Def");
      DataExchLineDef."Parent Code" := ParentDataExchLineDef.Code;
      DataExchLineDef.INSERT;

      DataExchMapping.INIT;
      DataExchMapping."Data Exch. Def Code" := DataExchLineDef."Data Exch. Def Code";
      DataExchMapping."Data Exch. Line Def Code" := DataExchLineDef.Code;
      DataExchMapping."Table ID" := DATABASE::Dimension;
      DataExchMapping."Mapping Codeunit" := CODEUNIT::"Map Currency Exchange Rate";
      DataExchMapping.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateFieldMappings@13(DataExchMapping@1000 : Record 1224);
    VAR
      CurrencyExchangeRate@1001 : Record 330;
    BEGIN
      CreateExchMappingLine(DataExchMapping,CurrencyCodeXMLElementTxt,CurrencyExchangeRate.FIELDNO("Currency Code"));
      CreateExchMappingLine(DataExchMapping,StartingDateXMLElementTxt,CurrencyExchangeRate.FIELDNO("Starting Date"));
      CreateExchMappingLine(DataExchMapping,ExchRateAmountXMLElementTxt,CurrencyExchangeRate.FIELDNO("Exchange Rate Amount"));
      CreateExchMappingLine(
        DataExchMapping,RelationalExchRateAmountXMLElementTxt,CurrencyExchangeRate.FIELDNO("Relational Exch. Rate Amount"));
    END;

    LOCAL PROCEDURE CreateExchMappingLine@14(DataExchMapping@1005 : Record 1224;FromColumnName@1004 : Text[50];ToFieldNo@1003 : Integer);
    VAR
      DataExchColumnDef@1000 : Record 1223;
      DataExchFieldMapping@1001 : Record 1225;
      LastColumnNoUsed@1002 : Integer;
    BEGIN
      DataExchColumnDef.SETRANGE("Data Exch. Def Code",DataExchMapping."Data Exch. Def Code");
      DataExchColumnDef.SETRANGE("Data Exch. Line Def Code",DataExchMapping."Data Exch. Line Def Code");
      IF DataExchColumnDef.FINDLAST THEN
        LastColumnNoUsed := DataExchColumnDef."Column No.";

      DataExchColumnDef."Data Exch. Def Code" := DataExchMapping."Data Exch. Def Code";
      DataExchColumnDef."Data Exch. Line Def Code" := DataExchMapping."Data Exch. Line Def Code";
      DataExchColumnDef."Column No." := LastColumnNoUsed + 10000;
      DataExchColumnDef.Name := FromColumnName;
      DataExchColumnDef.Path := FromColumnName;
      DataExchColumnDef.INSERT(TRUE);

      DataExchFieldMapping.INIT;
      DataExchFieldMapping.VALIDATE("Data Exch. Def Code",DataExchMapping."Data Exch. Def Code");
      DataExchFieldMapping.VALIDATE("Data Exch. Line Def Code",DataExchMapping."Data Exch. Line Def Code");
      DataExchFieldMapping.VALIDATE("Table ID",DataExchMapping."Table ID");
      DataExchFieldMapping.VALIDATE("Column No.",DataExchColumnDef."Column No.");
      DataExchFieldMapping.VALIDATE("Field ID",ToFieldNo);
      DataExchFieldMapping.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateSetupRecordManually@6(VAR TempDataExchFieldMappingBuf@1000 : TEMPORARY Record 1265;DataExchMapping@1001 : Record 1224);
    VAR
      CurrencyExchangeRate@1002 : Record 330;
    BEGIN
      TempDataExchFieldMappingBuf.INIT;
      TempDataExchFieldMappingBuf.VALIDATE("Data Exchange Def Code",DataExchMapping."Data Exch. Def Code");
      TempDataExchFieldMappingBuf.VALIDATE("Data Exchange Line Def Code",DataExchMapping."Data Exch. Line Def Code");
      TempDataExchFieldMappingBuf.VALIDATE("Field ID",CurrencyExchangeRate.FIELDNO("Currency Code"));
      TempDataExchFieldMappingBuf.VALIDATE("Table ID",DataExchMapping."Table ID");
      TempDataExchFieldMappingBuf.VALIDATE(Caption,CurrencyExchangeRate.FIELDCAPTION("Currency Code"));
      TempDataExchFieldMappingBuf.VALIDATE(Source,CurrencyCodeXMLElementTxt);
      TempDataExchFieldMappingBuf.INSERT(TRUE);
    END;

    PROCEDURE GetSuggestedFields@2(VAR TempField@1000 : TEMPORARY Record 2000000041);
    VAR
      CurrencyExchangeRate@1002 : Record 330;
    BEGIN
      InsertMandatoryField(TempField,CurrencyExchangeRate.FIELDNO("Currency Code"),DATABASE::"Currency Exchange Rate");
      InsertMandatoryField(TempField,CurrencyExchangeRate.FIELDNO("Relational Exch. Rate Amount"),DATABASE::"Currency Exchange Rate");
      InsertMandatoryField(TempField,CurrencyExchangeRate.FIELDNO("Starting Date"),DATABASE::"Currency Exchange Rate");
      InsertMandatoryField(TempField,CurrencyExchangeRate.FIELDNO("Exchange Rate Amount"),DATABASE::"Currency Exchange Rate");
    END;

    PROCEDURE GetSuggestedFieldsChildTable@65(VAR TempField@1000 : TEMPORARY Record 2000000041);
    VAR
      Dimension@1002 : Record 348;
    BEGIN
      InsertMandatoryField(TempField,Dimension.FIELDNO(Code),DATABASE::Dimension);
      InsertMandatoryField(TempField,Dimension.FIELDNO(Name),DATABASE::Dimension);
      InsertMandatoryField(TempField,Dimension.FIELDNO("Code Caption"),DATABASE::Dimension);
    END;

    LOCAL PROCEDURE InsertMandatoryField@5(VAR TempField@1002 : TEMPORARY Record 2000000041;FieldID@1000 : Integer;TableID@1001 : Integer);
    VAR
      Field@1003 : Record 2000000041;
    BEGIN
      Field.GET(TableID,FieldID);
      TempField.COPY(Field);
      TempField.INSERT;
    END;

    LOCAL PROCEDURE VerifyDataExchangeDefLineField@28(VAR TempDataExchFieldMappingBuf@1001 : TEMPORARY Record 1265;DataExchLineDef@1000 : Record 1227;DataExchMapping@1002 : Record 1224;Depth@1003 : Integer);
    VAR
      DataExchDef@1004 : Record 1222;
    BEGIN
      DataExchDef.GET(DataExchLineDef."Data Exch. Def Code");
      Assert.AreEqual(TempDataExchFieldMappingBuf.Type::Table,TempDataExchFieldMappingBuf.Type,'Wrong value for Type Field');
      Assert.AreEqual(
        TempDataExchFieldMappingBuf."Data Exchange Def Code",DataExchLineDef."Data Exch. Def Code",
        'Wrong value for Data Exchange Def Code Field');
      Assert.AreEqual(
        TempDataExchFieldMappingBuf."Data Exchange Line Def Code",DataExchLineDef.Code,
        'Wrong value for Data Exchange Line Def Code Field');
      Assert.AreEqual(TempDataExchFieldMappingBuf."Field ID",0,'Wrong value for Field ID Field');
      Assert.AreEqual(TempDataExchFieldMappingBuf."Table ID",DataExchMapping."Table ID",'Wrong value for Table ID Field');
      Assert.AreEqual(TempDataExchFieldMappingBuf."Column No.",0,'Wrong value for Column No Field');
      Assert.AreEqual(TempDataExchFieldMappingBuf."Default Value",'','Wrong value for Default Value Field');
      Assert.AreEqual(TempDataExchFieldMappingBuf.Source,DataExchLineDef."Data Line Tag",'Wrong value for Source Field');
      Assert.AreEqual(TempDataExchFieldMappingBuf.Caption,DataExchLineDef.Name,'Wrong value for Caption Field');
      Assert.AreEqual(TempDataExchFieldMappingBuf.Depth,Depth,'Wrong value for Depth Field');
    END;

    LOCAL PROCEDURE VerifySuggestedFields@37(VAR TempDataExchFieldMappingBuf@1001 : TEMPORARY Record 1265;DataExchLineDef@1002 : Record 1227;VAR TempSuggestedField@1000 : TEMPORARY Record 2000000041;Depth@1003 : Integer);
    VAR
      DataExchDef@1005 : Record 1222;
      DataExchColumnDef@1004 : Record 1223;
    BEGIN
      TempDataExchFieldMappingBuf.SETRANGE(Type,TempDataExchFieldMappingBuf.Type::Field);

      IF TempDataExchFieldMappingBuf.ISEMPTY THEN
        EXIT;

      DataExchDef.GET(DataExchLineDef."Data Exch. Def Code");

      REPEAT
        TempDataExchFieldMappingBuf.SETRANGE("Field ID",TempSuggestedField."No.");
        Assert.AreEqual(1,TempDataExchFieldMappingBuf.COUNT,'There should only be one suggestion field record present');
        TempDataExchFieldMappingBuf.FINDFIRST;
        Assert.AreEqual(TempDataExchFieldMappingBuf.Type::Field,TempDataExchFieldMappingBuf.Type,'Wrong value for Type Field');
        Assert.AreEqual(
          TempDataExchFieldMappingBuf."Data Exchange Def Code",DataExchLineDef."Data Exch. Def Code",
          'Wrong value for Data Exchange Def Code Field');
        Assert.AreEqual(
          TempDataExchFieldMappingBuf."Data Exchange Line Def Code",DataExchLineDef.Code,
          'Wrong value for Data Exchange Line Def Code Field');
        Assert.AreEqual(TempDataExchFieldMappingBuf."Field ID",TempSuggestedField."No.",'Wrong value for Field ID Field');
        Assert.AreEqual(TempDataExchFieldMappingBuf."Table ID",TempSuggestedField.TableNo,'Wrong value for Table ID Field');
        Assert.IsTrue(TempDataExchFieldMappingBuf."Column No." > 0,'Wrong value for Column No Field');
        Assert.IsTrue(
          DataExchColumnDef.GET(
            TempDataExchFieldMappingBuf."Data Exchange Def Code",TempDataExchFieldMappingBuf."Data Exchange Line Def Code",
            TempDataExchFieldMappingBuf."Column No."),'Data Exch Column Def should have been created');
        Assert.AreEqual(TempDataExchFieldMappingBuf."Default Value",'','Wrong value for Default Value Field');
        Assert.AreEqual(TempDataExchFieldMappingBuf.Source,'','Wrong value for Source Field');
        Assert.AreEqual(TempDataExchFieldMappingBuf.Caption,TempSuggestedField."Field Caption",'Wrong value for Caption Field');
        Assert.AreEqual(TempDataExchFieldMappingBuf.Depth,Depth,'Wrong value for Depth Field');
      UNTIL TempSuggestedField.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyMappedFields@18(VAR TempDataExchFieldMappingBuf@1001 : TEMPORARY Record 1265;DataExchMapping@1002 : Record 1224);
    VAR
      DataExchDef@1005 : Record 1222;
      DataExchColumnDef@1004 : Record 1223;
      DataExchFieldMapping@1000 : Record 1225;
    BEGIN
      TempDataExchFieldMappingBuf.SETRANGE(Type,TempDataExchFieldMappingBuf.Type::Field);
      DataExchFieldMapping.SETRANGE("Data Exch. Def Code",DataExchMapping."Data Exch. Def Code");
      DataExchFieldMapping.SETRANGE("Data Exch. Line Def Code",DataExchMapping."Data Exch. Line Def Code");
      DataExchFieldMapping.SETRANGE("Table ID",DataExchMapping."Table ID");

      IF TempDataExchFieldMappingBuf.ISEMPTY THEN
        EXIT;

      DataExchDef.GET(DataExchMapping."Data Exch. Def Code");

      DataExchFieldMapping.FINDSET;
      REPEAT
        TempDataExchFieldMappingBuf.SETRANGE("Field ID",DataExchFieldMapping."Field ID");
        TempDataExchFieldMappingBuf.SETRANGE("Table ID",DataExchFieldMapping."Table ID");
        Assert.AreEqual(1,TempDataExchFieldMappingBuf.COUNT,'There should only be one suggestion field record present');
        TempDataExchFieldMappingBuf.FINDFIRST;
        Assert.AreEqual(TempDataExchFieldMappingBuf.Type::Field,TempDataExchFieldMappingBuf.Type,'Wrong value for Type Field');
        Assert.AreEqual(
          TempDataExchFieldMappingBuf."Data Exchange Def Code",DataExchFieldMapping."Data Exch. Def Code",
          'Wrong value for Data Exchange Def Code Field');
        Assert.AreEqual(
          TempDataExchFieldMappingBuf."Data Exchange Line Def Code",DataExchFieldMapping."Data Exch. Line Def Code",
          'Wrong value for Data Exchange Line Def Code Field');
        Assert.AreEqual(TempDataExchFieldMappingBuf."Table ID",DataExchFieldMapping."Table ID",'Wrong value for Table ID Field');
        Assert.IsTrue(TempDataExchFieldMappingBuf."Column No." > 0,'Wrong value for Column No Field');
        Assert.IsTrue(
          DataExchColumnDef.GET(
            TempDataExchFieldMappingBuf."Data Exchange Def Code",TempDataExchFieldMappingBuf."Data Exchange Line Def Code",
            TempDataExchFieldMappingBuf."Column No."),'Data Exch Column Def should have been created');
        Assert.AreEqual(TempDataExchFieldMappingBuf."Default Value",'','Wrong value for Default Value Field');
        Assert.AreEqual(TempDataExchFieldMappingBuf.Source,DataExchColumnDef.Path,'Wrong value for Source Field');
        Assert.AreEqual(TempDataExchFieldMappingBuf.Caption,DataExchFieldMapping.GetFieldCaption,'Wrong value for Caption Field');
      UNTIL DataExchFieldMapping.NEXT = 0;
    END;

    BEGIN
    {
      // [FEATURE] [Data Exchange]
    }
    END.
  }
}

