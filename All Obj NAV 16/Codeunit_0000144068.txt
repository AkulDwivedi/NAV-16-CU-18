OBJECT Codeunit 144068 TDS - TCS Transactions
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GeneralLedgerSetup@1500011 : Record 98;
      CompanyInformation@1500019 : Record 79;
      Assert@1500001 : Codeunit 130000;
      LibraryRandom@1500002 : Codeunit 130440;
      LibraryTDS@1500003 : Codeunit 143000;
      LibraryERM@1500004 : Codeunit 131300;
      LibraryPurchase@1500005 : Codeunit 130512;
      LibraryInventory@1500006 : Codeunit 132201;
      LibraryJournals@1500007 : Codeunit 131306;
      LibrarySales@1500008 : Codeunit 130509;
      LibraryUtility@1500009 : Codeunit 131000;
      LibraryWarehouse@1500010 : Codeunit 132204;
      LibraryVariableStorage@1500012 : Codeunit 131004;
      LibraryTCS@1500013 : Codeunit 143008;
      LibraryServiceTax@1500014 : Codeunit 143001;
      LibrarySetupStorage@1500017 : Codeunit 131009;
      ReverseServiceTaxHelper@1500015 : Codeunit 143006;
      ServiceTaxAsExciseHelper@1500016 : Codeunit 143003;
      CreditAmountErr@1500000 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=The expected value is %1 and the actual value is %2.';
      LibraryReportDataset@1500022 : Codeunit 131007;
      GeneralJournalTemplateName@1500020 : Code[10];
      FinancialYear@1500023 : Code[6];
      VendorNo@1500027 : Code[20];
      StartDate@1500024 : Date;
      EndDate@1500026 : Date;
      isInitialized@1500018 : Boolean;
      RowMustExistErr@1500025 : TextConst 'ENU=Row must exist.';
      MobileNoValidErr@1500021 : TextConst 'ENU=You must specify valid mobile number. Enter a 10 digit mobile number.';
      ValueNotFoundErr@1500034 : TextConst 'ENU=Value Not Found.';
      ExpectedTANErr@1500033 : TextConst 'ENU=Select T.A.N. No.';
      BlankQuaterErr@1500032 : TextConst 'ENU=Please enter Quarter.';
      BlankFinancialYearErr@1500031 : TextConst 'ENU=Please enter Financial Year.';
      BlankFillingDateErr@1500030 : TextConst 'ENU=Please enter Filling Date.';
      BlankPRNoErr@1500029 : TextConst 'ENU=Please enter Provisional Receipt No.';
      EntriesErr@1500035 : TextConst 'ENU=No field Exists';

    [Test]
    [HandlerFunctions(PurchOrderStatisticsMPH)]
    PROCEDURE PurchaseOrderWithVendorPANAPPLIEDandTDS@1500000();
    VAR
      IncomeTaxAccountingPeriod@1500001 : Record 13724;
      IncomeTaxPeriodSetup@1500002 : Record 16501;
      NodNocHeader@1500003 : Record 13786;
      PurchaseHeader@1500005 : Record 38;
      PurchaseLine@1500006 : Record 39;
      ExpectedTDSEntry@1500007 : Record 13729;
      TDSSetup@1500009 : Record 13728;
      TdsNatureOfDeduction@1500010 : Record 13726;
      Vendor@1500011 : Record 23;
      DocumentNo@1500012 : Code[20];
      Amount@1500013 : Decimal;
    BEGIN
      // [SCENARIO 164282] Verify the calculation TDS as per the setup defined in the TDS Setup
      // [FEATURE] [TDS][Purchase Order]
      Initialize;

      // [GIVEN] Created TDS Setups, AssesseeCode and NOD/NOC Setup.
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      Amount := LibraryRandom.RandDec(10000,2);
      CreateVendorWithPANAPPLIED(Vendor);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,'',Vendor."No.",
        NodNocHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Create and Post Purchase Order
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,NodNocHeader."No.",Amount,
        TdsNatureOfDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,Amount,NodNocHeader."No.");
      VerifyPurchaseOrderStatistics(ExpectedTDSEntry,PurchaseLine);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] GL and TDS entries have been created
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntry(DocumentNo,Amount);
      VerifyTDSEntry(ExpectedTDSEntry,DocumentNo);
    END;

    [Test]
    PROCEDURE GenJnlLineWithPartyPANAPPLIEDandTDS@1500002();
    VAR
      ExpectedTDSEntry@1500003 : Record 13729;
      GenJournalLine@1500005 : Record 81;
      NodNocHeader@1500006 : Record 13786;
      Party@1500007 : Record 13730;
      TdsNatureOfDeduction@1500008 : Record 13726;
      TDSSetup@1500009 : Record 13728;
      Amount@1500010 : Decimal;
    BEGIN
      // [SCENARIO 164282] Verify the calculation TDS as per the setup defined in the TDS Setup
      // [FEATURE] [TDS] [General Journal]
      Initialize;

      // [GIVEN] Created TDS Setup
      Amount := LibraryRandom.RandDec(10000,2);
      LibraryTCS.CreateIncomeTaxAccountingPeriod;
      CreatePartyWithPANAPPLIED(Party);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,'',Party.Code,
        NodNocHeader.Type::Party,WORKDATE);

      // [WHEN] Create and Post General Journal
      CreatePaymentGenJnlLineforParty(GenJournalLine,NodNocHeader."No.",TdsNatureOfDeduction.Code,Amount);
      CalcTDSAmountsFromBaseforGenJnlLine(ExpectedTDSEntry,TDSSetup,Amount,NodNocHeader."No.");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] TDS Entries has been created
      VerifyTDSEntry(ExpectedTDSEntry,GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE PostGeneralJournallLineWithTDSFiling@1500001();
    VAR
      GenJournalLine@1500002 : Record 81;
      CustomerNo@1500008 : Code[20];
      Amount@1500009 : Decimal;
    BEGIN
      // [SCENARIO 163949] Verify to post a General Journal line after importing the e TDS Filing
      // [FEATURE] [TDS] [General Journal]
      Initialize;

      // [GIVEN] Created TDS Setup
      Amount := LibraryRandom.RandDec(10000,0);
      CustomerNo := LibrarySales.CreateCustomerNo;

      // [WHEN] Create and Post General Journal
      LibraryJournals.CreateGenJournalLineWithBatch(GenJournalLine,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Customer,CustomerNo,-Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] G/l Entries has been created
      VerifyGLEntry(GenJournalLine."Document No.",Amount);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsMPH)]
    PROCEDURE SalesDocumentWithCustomerPANAPPLIEDandTCS@1500003();
    VAR
      AssesseeCode@1500000 : Record 13727;
      Customer@1500001 : Record 18;
      ExpectedTCSEntry@1500002 : Record 16514;
      NodNocHeader@1500004 : Record 13786;
      SalesHeader@1500006 : Record 36;
      SalesLine@1500007 : Record 37;
      TcsNatureOfCollection@1500008 : Record 16507;
      TCSSetup@1500009 : Record 16508;
      SalesInvHeader@1500003 : Record 112;
      DocumentNo@1500010 : Code[20];
      Amount@1500005 : Decimal;
    BEGIN
      // [SCENARIO 163550] Verify the correct G\L Entry & TCS Entry after posting the sales invoice with multiple invoice line
      // [FEATURE] [TCS] [Sales Invoice]
      Initialize;

      // [GIVEN] Created TCS Setup,NOD/NOC setup,
      LibraryTCS.CreateIncomeTaxAccountingPeriod;
      Amount := LibraryRandom.RandDec(250000,2);
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      CreateCustomerWithPANAPPLIED(Customer);
      LibraryTCS.CreateTCSNatureCollectionAndTCSSetup(TcsNatureOfCollection,TCSSetup,TCSSetup."TCS Type"::E,AssesseeCode.Code);
      LibraryTCS.CreateNODNOCSetup(NodNocHeader,NodNocHeader.Type::Customer,Customer."No.",AssesseeCode.Code,
        TcsNatureOfCollection.Code,FALSE,FALSE,FALSE);

      // [WHEN] Create & Post Sales Invoice With TDS
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice,
        NodNocHeader."No.",TcsNatureOfCollection.Code,Amount);
      SalesHeader.CALCFIELDS("Amount to Customer");
      CalcTCSAmountsFromBase(ExpectedTCSEntry,TCSSetup,SalesHeader."Amount to Customer");
      VerifySalesOrderStatistics(ExpectedTCSEntry,SalesLine);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] GL and TCS Entries have been created
      SalesInvHeader.GET(DocumentNo);
      SalesInvHeader.CALCFIELDS("Amount to Customer");
      VerifyGLEntryCount(DocumentNo,3);
      VerifyGLEntry(DocumentNo,SalesInvHeader."Amount to Customer");
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,SalesLine."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE GenJnlLineWithServiceTaxandTDS@1500004();
    VAR
      CountryRegion@1500000 : Record 9;
      ExpectedTDSEntry@1500001 : Record 13729;
      GenJournalLine@1500002 : Record 81;
      GenJournalBatch@1500003 : Record 232;
      NodNocHeader@1500006 : Record 13786;
      ServiceTaxGroups@1500007 : Record 16471;
      ServiceTaxRegistrationNos@1500008 : Record 16475;
      StructureHeader@1500012 : Record 13792;
      TdsNatureOfDeduction@1500015 : Record 13726;
      TDSSetup@1500016 : Record 13728;
      Vendor@1500017 : Record 23;
      CurrencyCode@1500020 : Code[10];
      TotalServiceTaxAmount@1500005 : Decimal;
    BEGIN
      // [SCINERIO 164436]  Verify  correct Vendor Ledger and Detailed Vendor Ledger Entries after posting a General Journal with TDS, Service tax & Foreign Currency.
      // [FEATURE] [TDS] [SERVICE TAX]
      Initialize;

      // [GIVEN] Created TDS and Service Tax Setup
      LibraryTCS.CreateIncomeTaxAccountingPeriod;
      CreateServiceTaxSetup(CountryRegion,ServiceTaxGroups,StructureHeader,Vendor,CurrencyCode);
      LibraryServiceTax.CreateServiceTaxRegistrationNo(ServiceTaxRegistrationNos);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,CountryRegion.Code,
        Vendor."No.",NodNocHeader.Type::Vendor,TODAY);

      // [WHEN] Create and Post General Journal
      CreateGeneralJnlLineforServiceTax(GenJournalLine,GenJournalBatch,TdsNatureOfDeduction.Code,
        CurrencyCode,ServiceTaxGroups.Code,Vendor."No.");
      TotalServiceTaxAmount := GenJournalLine."Service Tax Base Amount (LCY)" + GenJournalLine."Service Tax Amount" +
        GenJournalLine."Service Tax SBC Amount" + GenJournalLine."KK Cess Amount";
      LibraryTDS.CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,-GenJournalLine."Amount (LCY)");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] G/L Entries,Service Tax Entry and TDS Entry has been created
      VerifyGLEntryCount(GenJournalLine."Document No.",6);
      VerifyGLEntry(GenJournalLine."Document No.",TotalServiceTaxAmount);
      VerifyTDSEntry(ExpectedTDSEntry,GenJournalLine."Document No.");
      VerifyServiceTaxEntry(GenJournalLine,GenJournalLine."Document No.");
      VerifyDetailedandVendorLedgerEntry(ExpectedTDSEntry,Vendor."No.",
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE SalesCreditMemoWithTCSEntry@1500010();
    VAR
      AssesseeCode@1500003 : Record 13727;
      ExpectedTCSEntry@1500006 : Record 16514;
      NodNocHeader@1500002 : Record 13786;
      SalesHeader@1500005 : Record 36;
      SalesLine@1500008 : Record 37;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500000 : Record 16508;
      DocumentNo@1500007 : Code[20];
    BEGIN
      // [SCENARIO 163801] calculating TCS in case of creating Sales Credit Memo with line discount
      // [FEATURE] [TCS] [Credit Memo]
      Initialize;

      // [GIVEN] Created TCS Setups
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,FALSE,FALSE,FALSE);

      // [WHEN]  Create and post Credit Memo with Line Discount
      CreateSalesCreditMemo(SalesHeader,NodNocHeader."No.",TcsNatureOfCollection.Code);
      CalcTCSAmountsFromBase(ExpectedTCSEntry,TCSSetup,SalesHeader."Amount to Customer");
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TCS Entry have been created
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,SalesLine."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE SalesCreditMemowithInvoiceDiscount@1500008();
    VAR
      AssesseeCode@1500003 : Record 13727;
      ExpectedTCSEntry@1500007 : Record 16514;
      NodNocHeader@1500000 : Record 13786;
      SalesHeader@1500006 : Record 36;
      SalesLine@1500009 : Record 37;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      DocumentNo@1500008 : Code[20];
    BEGIN
      // [SCENARIO 163802] calculating TCS in case of creating Sales Credit Memo with invoice line discount
      // [FEATURE] [TCS] [Credit Memo]
      Initialize;

      // [GIVEN]  Created TCS Setups
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,FALSE,FALSE,FALSE);

      // [WHEN] Create and post Credit Memo with invoice discount
      CreateSalesCreditMemoWithInvoiceDiscount(SalesHeader,SalesLine,NodNocHeader."No.",TcsNatureOfCollection.Code);
      CalcTCSAmountsFromBase(ExpectedTCSEntry,TCSSetup,SalesLine.Amount);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TCS Entry have been created
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,SalesLine."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE SalesCreditMemowithConcessionalCode@1500005();
    VAR
      AssesseeCode@1500003 : Record 13727;
      Customer@1500005 : Record 18;
      ConcessionalCodes@1500010 : Record 13718;
      ExpectedTCSEntry@1500007 : Record 16514;
      NodNocHeader@1500000 : Record 13786;
      SalesHeader@1500006 : Record 36;
      SalesLine@1500009 : Record 37;
      TcsNatureOfCollection@1500001 : Record 16507;
      TCSSetup@1500002 : Record 16508;
      DocumentNo@1500008 : Code[20];
    BEGIN
      // [SCENARIO 163793] calculating TCS in case of creating Sales Credit Memo with Concessional Code
      // [FEATURE] [TCS] [Credit Memo]
      Initialize;

      // [GIVEN]  Created TCS Setups and NOD/NOC Setups
      CreateCustomerWithPANAPPLIED(Customer);
      LibraryTCS.CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTDS.CreateConcessionalCode(ConcessionalCodes);
      CreateTCSNatureCollectionAndTCSSetup(TcsNatureOfCollection,TCSSetup,TcsNatureOfCollection."TCS Type"::E,
        AssesseeCode.Code,ConcessionalCodes.Code);
      CreateNODNOCSetup(NodNocHeader,NodNocHeader.Type::Customer,Customer."No.",AssesseeCode.Code,
        TcsNatureOfCollection.Code,ConcessionalCodes.Code);

      // [WHEN] Create and post Credit Memo with Concessional Code
      CreateSalesCreditMemoWithConcessionalCode(SalesHeader,NodNocHeader."No.",TcsNatureOfCollection.Code,ConcessionalCodes.Code);
      CalcTCSAmountsFromBase(ExpectedTCSEntry,TCSSetup,SalesHeader."Amount to Customer");
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] G/L Entry and TCS Entry have been created
      VerifyGLEntry(DocumentNo,SalesHeader."Amount to Customer" + ExpectedTCSEntry."Total TCS Including SHE CESS");
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,SalesLine."Document Type"::"Credit Memo");
    END;

    [Test]
    [HandlerFunctions(PurchOrderStatisticsMPH,GeneralJournalTemplateHandler,Form26QRequestPageHandler)]
    PROCEDURE PurchaseOrderWithTDSPaymentAndUpdateChallanWithPANApplied@1500006();
    VAR
      GenJnlLinePayment@1500000 : Record 81;
      IncomeTaxAccountingPeriod@1500001 : Record 13724;
      NodNocHeader@1500003 : Record 13786;
      PurchaseHeader@1500005 : Record 38;
      PurchaseLine@1500006 : Record 39;
      ExpectedTDSEntry@1500007 : Record 13729;
      TDSSetup@1500009 : Record 13728;
      TdsNatureOfDeduction@1500010 : Record 13726;
      Vendor@1500011 : Record 23;
      DocumentNo@1500012 : Code[20];
      ChallanNo@1500002 : Code[20];
      Amount@1500013 : Decimal;
      ExpectedTDSAmount@1500008 : Decimal;
      TDSAccount@1500014 : Code[20];
    BEGIN
      // [SCENARIO 164278] Verify that the value in the 'P.A.N. Status' field is flowing into 26 Q  report where PAN No.= Blank, pan applied
      // [FEATURE] [Generate eTDS Transactions]
      Initialize;

      // [GIVEN] Created TDS Setups, AssesseeCode and NOD/NOC Setup.
      CreateTDSSetupWithVendorPANAPPLIED(IncomeTaxAccountingPeriod,NodNocHeader,TdsNatureOfDeduction,Vendor,TDSSetup);
      TDSAccount := UpdateCompanyPANandTDSChallanSetup(TDSSetup);
      Amount := LibraryRandom.RandDec(10000,2);
      FinancialYear := IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS";

      // [WHEN] Create and Post Purchase Order
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseLine,Vendor."No.",Amount,
        TdsNatureOfDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,Amount,Vendor."No.");
      VerifyPurchaseOrderStatistics(ExpectedTDSEntry,PurchaseLine);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [WHEN] Bank Payment using PAY TDS, Update TDS and Challan Register & Run Form 26Q Report.
      CreateAndPostPaymentByPayTDS(GenJnlLinePayment,TDSAccount,IncomeTaxAccountingPeriod."Starting Date");
      ChallanNo :=
        UpdateChallanDetails(
          DocumentNo,GenJnlLinePayment."Document No.",GenJnlLinePayment."Document Type"::Invoice,
          IncomeTaxAccountingPeriod."Starting Date");
      RunUpdateChallanRegister(ChallanNo,LibraryRandom.RandDec(1000,2));
      ExpectedTDSAmount := LibraryRandom.RandDec(2000,2);
      RunUpdateChallanRegister(ChallanNo,ExpectedTDSAmount);
      COMMIT;
      REPORT.RUN(REPORT::"Form 26Q");

      // [THEN] GL and TDS entries have been created & 'Permanent Account No.' field should be filled with "PANNOTREQD"
      VerifyEntries(ExpectedTDSEntry,DocumentNo,Amount,3);
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Form_26Q_27Q_Entry__Deductee_P_A_N__No__',CompanyInformation."P.A.N. No.");
      Assert.IsFalse(LibraryReportDataset.GetNextRow,RowMustExistErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,Form26QRequestPageHandler,GenerateeTDSRequestPageHandler)]
    PROCEDURE BankPaymentwithTDSPaymentAndChallanwithForm26Q@1500043();
    VAR
      GenJournalLine@1500008 : Record 81;
      IncomeTaxAccountingPeriod@1500006 : Record 13724;
      NodNocHeader@1500005 : Record 13786;
      TDSSetup@1500004 : Record 13728;
      TdsNatureOfDeduction@1500003 : Record 13726;
      Vendor@1500002 : Record 23;
      ChallanNo@1500001 : Code[20];
      TDSAccount@1500007 : Code[20];
      DocumentNo@1500009 : Code[20];
    BEGIN
      // [SCENARIO 164344] Verify The mobile phone number is not valid. Enter a 10 digit phone number that does not contain letters or special characters.
      // [FEATURE] [Generate eTDS Transactions]
      Initialize;

      // [GIVEN] Created TDS Setups, AssesseeCode and NOD/NOC Setup.
      CreateTDSSetupWithVendorPANAPPLIED(IncomeTaxAccountingPeriod,NodNocHeader,TdsNatureOfDeduction,Vendor,TDSSetup);
      TDSAccount := UpdateCompanyPANandTDSChallanSetup(TDSSetup);
      FinancialYear := IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS";

      // [WHEN] Create and Post Bank Payment, Payment using PAY TDS, Update TDS and Challan Register & Run Form 26Q Report with generate eTDS.
      CreateandPostBankPayment(
        DocumentNo,NodNocHeader."No.",TdsNatureOfDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      CreateandPostBankPayment(
        DocumentNo,NodNocHeader."No.",TdsNatureOfDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      CreateAndPostPaymentByPayTDS(GenJournalLine,TDSAccount,IncomeTaxAccountingPeriod."Starting Date");
      ChallanNo :=
        UpdateChallanDetails(
          DocumentNo,GenJournalLine."Document No.",GenJournalLine."Document Type"::Payment,
          IncomeTaxAccountingPeriod."Starting Date");
      RunUpdateChallanRegister(ChallanNo,LibraryRandom.RandDec(1000,2));
      RunForm26Q27Q(TRUE);
      ASSERTERROR GenerateeTDSUsingPage(Vendor."P.A.N. No.",TRUE,TRUE);

      // [THEN] Expected Error : You must specify valid mobile number. Enter a 10 digit mobile number.
      Assert.ExpectedError(MobileNoValidErr);
    END;

    [Test]
    PROCEDURE BankPaymentWithTCSUsingCashReceiptJournal@1500049();
    VAR
      AssesseeCode@1500000 : Record 13727;
      ExpectedTCSEntry@1500001 : Record 16514;
      TCSSetup@1500002 : Record 16508;
      GenJournalLine@1500003 : Record 81;
      NodNocHeader@1500005 : Record 13786;
      TcsNatureOfCollection@1500004 : Record 16507;
    BEGIN
      // [SCENARIO 163717] TCS Calculating component receiving advance payment: Advance payment in Cash Receipt Journal
      // [FEATURE] [TCS Transaction]
      Initialize;

      // [GIVEN] Create TCS Setups
      LibraryTCS.CreateIncomeTaxAccountingPeriod;
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,
        AssesseeCode,TRUE,TRUE,TRUE);

      // [WHEN] Create and post Cash Receipt Journal
      CreateCashReceiptJournal(GenJournalLine,TcsNatureOfCollection.Code,NodNocHeader."No.");
      CalcTCSAmountsFromBase(ExpectedTCSEntry,TCSSetup,-GenJournalLine."TDS/TCS Base Amount");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify G/L Entry and TCS Entry
      VerifyGLEntryCount(GenJournalLine."Document No.",3);
      VerifyGLEntry(GenJournalLine."Document No.",-GenJournalLine.Amount);
      VerifyTCSEntry(ExpectedTCSEntry,GenJournalLine."Document No.",GenJournalLine."Document Type");
    END;

    [Test]
    PROCEDURE BankPaymentWithTCSUsingCashReceiptVoucher@1500047();
    VAR
      AssesseeCode@1500000 : Record 13727;
      ExpectedTCSEntry@1500001 : Record 16514;
      TCSSetup@1500002 : Record 16508;
      GenJournalLine@1500003 : Record 81;
      NodNocHeader@1500005 : Record 13786;
      TcsNatureOfCollection@1500004 : Record 16507;
    BEGIN
      // [SCENARIO 163718] TCS Calculating component receiving advance payment: Advance payment in Cash Receipt Voucher
      // [FEATURE] [TCS Transaction]
      Initialize;

      // [GIVEN] Create TCS Setups
      LibraryTCS.CreateIncomeTaxAccountingPeriod;
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,
        AssesseeCode,TRUE,TRUE,TRUE);

      // [WHEN] Create and post Cash Receipt Voucher
      CreateCashReceiptVoucher(GenJournalLine,TcsNatureOfCollection.Code,NodNocHeader."No.");
      CalcTCSAmountsFromBase(ExpectedTCSEntry,TCSSetup,-GenJournalLine."TDS/TCS Base Amount");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify G/L Entry and TCS Entry
      VerifyGLEntryCount(GenJournalLine."Document No.",3);
      VerifyGLEntry(GenJournalLine."Document No.",-GenJournalLine.Amount);
      VerifyTCSEntry(ExpectedTCSEntry,GenJournalLine."Document No.",GenJournalLine."Document Type");
    END;

    [Test]
    PROCEDURE GeneralJnlLinewithTCSAndConcessionalCode@1500053();
    VAR
      AssesseeCode@1500000 : Record 13727;
      ConcessionalCodes@1500001 : Record 13718;
      ExpectedTCSEntry@1500002 : Record 16514;
      TCSSetup@1500004 : Record 16508;
      GenJournalLine@1500003 : Record 81;
      NodNocHeader@1500006 : Record 13786;
      TcsNatureOfCollection@1500005 : Record 16507;
    BEGIN
      // [SCENARIO 163722] TCS Check if system is calculating TCS amount with defined Concessional codes,TCS nature of collection and TCS Concessional code combination in TCS setup
      // [FEATURE] [TCS Transaction]
      Initialize;

      // [GIVEN] Create TCS Setups
      LibraryTCS.CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTDS.CreateConcessionalCode(ConcessionalCodes);
      CreateTCSNatureCollectionAndTCSSetup(TcsNatureOfCollection,TCSSetup,TcsNatureOfCollection."TCS Type"::E,
        AssesseeCode.Code,ConcessionalCodes.Code);
      CreateNODNOCSetup(NodNocHeader,NodNocHeader.Type::Customer,LibraryTCS.CreateCustomer,AssesseeCode.Code,
        TcsNatureOfCollection.Code,ConcessionalCodes.Code);

      // [WHEN] Create and post General Journal line
      CreateGeneralJnlLine(GenJournalLine,TcsNatureOfCollection.Code,NodNocHeader."No.");
      CalcTCSAmountsFromBase(ExpectedTCSEntry,TCSSetup,GenJournalLine."TDS/TCS Base Amount");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Verify G/L Entry and TCS Entry
      VerifyGLEntryCount(GenJournalLine."Document No.",3);
      VerifyGLEntry(GenJournalLine."Document No.",GenJournalLine.Amount + ExpectedTCSEntry."Total TCS Including SHE CESS");
      VerifyTCSEntry(ExpectedTCSEntry,GenJournalLine."Document No.",GenJournalLine."Document Type");
    END;

    [Test]
    PROCEDURE GeneralJnlLineWithServiceTaxAndTCS@1500089();
    VAR
      AssesseeCode@1500004 : Record 13727;
      ExpectedTCSEntry@1500007 : Record 16514;
      GenJournalLine@1500005 : Record 81;
      ServiceTaxGroups@1500000 : Record 16471;
      ServiceTaxRegistrationNos@1500001 : Record 16475;
      TcsNatureOfCollection@1500002 : Record 16507;
      TCSSetup@1500003 : Record 16508;
      NodNocHeader@1500009 : Record 13786;
      TotalAmount@1500006 : Decimal;
    BEGIN
      // [SCENARIO 163725] To check if system is calculating TCS where Service Tax is applicable in General Journal
      // [FEATURE] [TCS Transaction]
      Initialize;

      // [GIVEN] Created TCS Setups And Service Tax Setups
      LibraryTCS.CreateIncomeTaxAccountingPeriod;
      LibraryServiceTax.CreateServiceTaxGroup(ServiceTaxGroups);
      LibraryServiceTax.CreateServiceTaxSetup(ServiceTaxGroups.Code,WORKDATE);
      LibraryServiceTax.CreateServiceTaxRegistrationNo(ServiceTaxRegistrationNos);
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,
        AssesseeCode,TRUE,TRUE,TRUE);

      // [WHEN] created and posted General journal line
      CreateGeneralJnlLineWithServiceTaxAndTCS(GenJournalLine,TcsNatureOfCollection.Code,ServiceTaxGroups.Code,NodNocHeader."No.");
      TotalAmount :=
        -(GenJournalLine."Service Tax Base Amount (LCY)" + GenJournalLine."Service Tax Amount" +
          GenJournalLine."Service Tax SBC Amount" + GenJournalLine."KK Cess Amount") + GenJournalLine."Total TDS/TCS Incl. SHE CESS";
      CalcTCSAmountsFromBase(ExpectedTCSEntry,TCSSetup,GenJournalLine."TDS/TCS Base Amount");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] verify G/L Entry,TCS Entry,Service Tax Entry
      VerifyGLEntryCount(GenJournalLine."Document No.",6);
      VerifyGLEntry(GenJournalLine."Document No.",TotalAmount);
      VerifyTCSEntry(ExpectedTCSEntry,GenJournalLine."Document No.",GenJournalLine."Document Type");
      VerifyServiceTaxEntry(GenJournalLine,GenJournalLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,Form26QRequestPageHandler,UpdatePANStatusRequestPageHandler)]
    PROCEDURE VerifyForm26QAfterPaymentWithPANApplied@15000031();
    VAR
      GenJournalLine@1500010 : Record 81;
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      NodNocHeader@1500007 : Record 13786;
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      TdsNatureOfDeduction@1500006 : Record 13726;
      TDSSetup@1500005 : Record 13728;
      DocumentNo@1500009 : Code[20];
    BEGIN
      // [SCENARIO 163871] Verify update the changed PAN No. for a vendor in TDS Entry and Form 26Q tables
      // [FEATURE] [TDS Transaction]

      // [GIVEN] created TDS Setups
      UpdateCompanyInfoAndCreateTDSSetup(IncomeTaxAccountingPeriod,NodNocHeader,TdsNatureOfDeduction,TDSSetup);

      // [WHEN] create and post the purchase invoice and bank payment voucher
      CreatePurchaseInvoice(PurchaseHeader,PurchaseLine,NodNocHeader."No.",
        TdsNatureOfDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreateBankPaymentVoucher(GenJournalLine,TDSSetup);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryTDS.UpdateChallanDetails(DocumentNo,GenJournalLine."Document No.",IncomeTaxAccountingPeriod."Starting Date");
      RunForm26Q27Q(TRUE);
      UpdatePANStatusReportandVendorCardWithPANNo(NodNocHeader."No.");

      // [THEN] verify the PAN163722 No updation in the form26q and TDS Entry
      VerifyTDSEntryAndForm26QwithPAN(DocumentNo,PurchaseHeader."Document Type",NodNocHeader."No.");
    END;

    [Test]
    [HandlerFunctions(Form26QRequestPageHandler,GenerateFileeTDSRequestPageHandler,GenerateeTDSRequestPageHandler,ReturnModalPageHandler,ConfirmHandlerTrue)]
    PROCEDURE VerifyGenerateFileeTDSAfterExecuteForm26Q@1500055();
    VAR
      TDSSetup@1500000 : Record 13728;
      GenJournalLine@1500001 : Record 81;
      GenJournalLinePmt@1500002 : Record 81;
      IncomeTaxAccountingPeriod@1500007 : Record 13724;
      IncomeTaxPeriodSetup@1500008 : Record 16501;
      NodNocHeader@1500009 : Record 13786;
      TdsNatureOfDeduction@1500010 : Record 13726;
      ChallanNo@1500003 : Code[10];
      ExportedFileName@1500004 : Text;
      FormNo@1500005 : '26Q,27Q';
    BEGIN
      // [SCENARIO 164289] check if program is allowing entering the parameters of the "Filed e-TDS" option with the wrong condition
      // [FEATURE] [TDS Transaction]
      Initialize;
      LibraryTDS.UpdateTDSNilChallanInGeneralLedgerSetup;

      // [GIVEN] Created TDS Setups
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",
        CreateIncomeTaxPeriodQuarters(IncomeTaxAccountingPeriod."No."));
      LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,'',
        LibraryTDS.CreateVendorWithPostingSetup,NodNocHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Create And Post General Journal line and Payment Joyrnal
      CreateGenJnlPaymentLineAndPost(GenJournalLine,NodNocHeader."No.",TdsNatureOfDeduction.Code,
        IncomeTaxAccountingPeriod."Starting Date");
      CreatePaymentJournalAndPost(GenJournalLinePmt,TDSSetup,IncomeTaxAccountingPeriod."Starting Date");
      ChallanNo :=
        LibraryTDS.UpdateChallanDetails(
          GenJournalLine."Document No.",GenJournalLinePmt."Document No.",IncomeTaxAccountingPeriod."Starting Date");
      LibraryTDS.RunUpdateChallanRegister(ChallanNo,LibraryRandom.RandDec(2000,2));
      LibraryTDS.Form26QForm27QReportFieldsValidation;
      FinancialYear := IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS";
      REPORT.RUN(REPORT::"Form 26Q");
      CreateeTDSDocument(IncomeTaxAccountingPeriod,IncomeTaxPeriodSetup,ExportedFileName);

      // [THEN] Verify Exported File and Error if field is blank
      VerifyValuesOnBatchHeader(FormNo::"26Q",IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",CompanyInformation."T.A.N. No.");
      VerifytheBlankFields(IncomeTaxAccountingPeriod,IncomeTaxPeriodSetup);
    END;

    [Test]
    [HandlerFunctions(Form26QRequestPageHandler,GenerateFileeTDSRequestPageHandler,GenerateeTDSRequestPageHandler,ReturnModalPageHandler,ConfirmHandlerTrue)]
    PROCEDURE GenerateFileeTDSandVerifyUpdateChallanRegister@1500121();
    VAR
      TDSSetup@1500000 : Record 13728;
      GenJournalLine@1500001 : Record 81;
      GenJournalLinePmt@1500002 : Record 81;
      IncomeTaxAccountingPeriod@1500007 : Record 13724;
      IncomeTaxPeriodSetup@1500006 : Record 16501;
      NodNocHeader@1500005 : Record 13786;
      TdsNatureOfDeduction@1500004 : Record 13726;
      ChallanNo@1500003 : Code[10];
    BEGIN
      // [SCENARIO 164295] check if program is allowing entering the parameters of the "Filed e-TDS" option with the wrong condition
      // [FEATURE] [TDS Transaction]
      Initialize;
      LibraryTDS.UpdateTDSNilChallanInGeneralLedgerSetup;

      // [GIVEN] Created TDS Setups
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,'',
        LibraryTDS.CreateVendorWithPostingSetup,NodNocHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");

      // [WHEN] Create And Post General Journal line and Payment Joyrnal
      CreateGenJnlPaymentLineAndPost(
        GenJournalLine,NodNocHeader."No.",TdsNatureOfDeduction.Code,IncomeTaxAccountingPeriod."Starting Date");
      CreatePaymentJournalAndPost(GenJournalLinePmt,TDSSetup,IncomeTaxAccountingPeriod."Starting Date");
      ChallanNo :=
        LibraryTDS.UpdateChallanDetails(
          GenJournalLine."Document No.",GenJournalLinePmt."Document No.",IncomeTaxAccountingPeriod."Starting Date");
      LibraryTDS.RunUpdateChallanRegister(ChallanNo,LibraryRandom.RandDec(2000,2));
      LibraryTDS.Form26QForm27QReportFieldsValidation;
      FinancialYear := IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS";
      REPORT.RUN(REPORT::"Form 26Q");
      GenerateeTDSUsingPage(CompanyInformation."P.A.N. No.",TRUE,FALSE);
      GenerateFileeTDS(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",IncomeTaxPeriodSetup.Quarter::Q1,
        CompanyInformation."T.A.N. No.",IncomeTaxAccountingPeriod."Starting Date",COPYSTR(CREATEGUID,1,15));

      // [THEN] challan register has created with filing
      VerifyUpdateChallanRegister(ChallanNo);
    END;

    LOCAL PROCEDURE Initialize@1500090();
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;
      CompanyInformation.GET;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      GeneralLedgerSetup.GET;

      isInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE CreateServiceTaxSetup@1500015(VAR CountryRegion@1500005 : Record 9;VAR ServiceTaxGroups@1500004 : Record 16471;VAR StructureHeader@1500002 : Record 13792;VAR Vendor@1500001 : Record 23;VAR CurrencyCode@1500000 : Code[10]);
    BEGIN
      LibraryERM.CreateCountryRegion(CountryRegion);
      CurrencyCode := CreateCurrencyCodeWithExchangeRate;
      CreateForeignVendorWithPostingGroup(Vendor,CurrencyCode,CountryRegion.Code);
      LibraryServiceTax.CreateServiceTaxGroup(ServiceTaxGroups);
      LibraryServiceTax.CreateServiceTaxSetup(ServiceTaxGroups.Code,WORKDATE);
      CreateServiceTaxStructure(StructureHeader);
    END;

    LOCAL PROCEDURE UpdateCompanyInfoAndCreateTDSSetup@1500072(VAR IncomeTaxAccountingPeriod@1500005 : Record 13724;VAR NodNocHeader@1500002 : Record 13786;VAR TdsNatureOfDeduction@1500001 : Record 13726;VAR TDSSetup@1500000 : Record 13728);
    VAR
      IncomeTaxPeriodSetup@1500004 : Record 16501;
      Location@1500003 : Record 14;
    BEGIN
      Initialize;
      CompanyInformation.VALIDATE("E-Mail",COPYSTR(LibraryUtility.GenerateRandomText(20),1,20));
      CompanyInformation.VALIDATE("Location Code",LibraryWarehouse.CreateLocation(Location));
      CompanyInformation.MODIFY(TRUE);
      LibraryTDS.UpdateTDSNilChallanInGeneralLedgerSetup;
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      FinancialYear := IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS";
      StartDate := IncomeTaxAccountingPeriod."Starting Date";
      EndDate := IncomeTaxAccountingPeriod."Ending Date";
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,'',LibraryTDS.CreateVendorWithPostingSetup,
        NodNocHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");
      VendorNo := NodNocHeader."No.";
    END;

    LOCAL PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@1500007();
    VAR
      DeductorCategory@1500002 : Record 16498;
    BEGIN
      LibraryERM.CreateDeductorCategory(DeductorCategory);
      CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      CompanyInformation.VALIDATE("T.A.N. No.",LibraryTDS.CreateTANNo);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocument@15000010(VAR SalesHeader@1500056 : Record 36;VAR SalesLine@1500007 : Record 37;DocumentType@1500008 : Option;CustomerNo@1500009 : Code[20];CodeContractor@1500010 : Code[10];Amount@1500000 : Decimal);
    VAR
      Location@1500001 : Record 14;
      LocationCode@1500002 : Code[10];
      ItemNo@1500003 : Code[20];
      i@1500004 : Integer;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      ItemNo := LibraryInventory.CreateItemNo;
      LocationCode := LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      FOR i := 1 TO 3 DO BEGIN
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,1);
        SalesLine.VALIDATE("Unit Price",Amount);
        SalesLine.VALIDATE("TCS Nature of Collection",CodeContractor);
        SalesLine.VALIDATE("Location Code",LocationCode);
        SalesLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateSalesCreditMemo@1500024(VAR SalesHeader@1500000 : Record 36;CustomerNo@1500001 : Code[20];TCSNatureCode@1500005 : Code[10]);
    VAR
      SalesLine@1500003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustomerNo);
      SalesHeader.VALIDATE("Posting Date",WORKDATE);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,
        LibraryInventory.CreateItemNo,LibraryRandom.RandInt(20));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(1000000,2));
      SalesLine.VALIDATE("Qty. to Ship",0);
      SalesLine.VALIDATE("TCS Nature of Collection",TCSNatureCode);
      SalesLine.VALIDATE("Line Discount %",LibraryRandom.RandInt(25));
      SalesLine.MODIFY(TRUE);
      SalesHeader.CALCFIELDS("Amount to Customer");
    END;

    LOCAL PROCEDURE CreateSalesCreditMemoWithInvoiceDiscount@1500031(VAR SalesHeader@1500000 : Record 36;VAR SalesLine@1500007 : Record 37;CustomerNo@1500001 : Code[20];TCSNatureCode@1500005 : Code[10]);
    VAR
      CustInvoiceDisc@1500004 : Record 19;
    BEGIN
      LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc,CustomerNo,'',0);
      CustInvoiceDisc.INIT;
      CustInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandDec(10,2));
      CustInvoiceDisc.MODIFY(TRUE);
      CreateSalesCreditMemo(SalesHeader,CustomerNo,TCSNatureCode);
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDSET;
      SalesLine.VALIDATE("Line Discount %",0);
      SalesLine.MODIFY(TRUE);
      CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",SalesLine);
    END;

    LOCAL PROCEDURE CreateSalesCreditMemoWithConcessionalCode@1500145(VAR SalesHeader@1500000 : Record 36;CustomerNo@1500001 : Code[20];TCSNatureCode@1500005 : Code[10];ConcessionalCode@1500004 : Code[10]);
    VAR
      SalesLine@1500003 : Record 37;
    BEGIN
      CreateSalesCreditMemo(SalesHeader,CustomerNo,TCSNatureCode);
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;
      SalesLine.VALIDATE("Line Discount %",0);
      SalesLine.VALIDATE("Concessional Code",ConcessionalCode);
      SalesLine.MODIFY(TRUE);
      SalesHeader.CALCFIELDS("Amount to Customer");
    END;

    LOCAL PROCEDURE CreateCashReceiptJnlPayment@1500141(VAR GenJournalLine@1500000 : Record 81;GeneralTemplateName@1500002 : Code[10];CustomerNo@1500003 : Code[20];CodeContractor@1500004 : Code[10]);
    VAR
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GeneralTemplateName);
      WITH GenJournalLine DO BEGIN
        LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
          "Document Type"::Payment,"Account Type"::Customer,CustomerNo,
          "Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,-LibraryRandom.RandDec(10000,2));
        VALIDATE("Party Type","Party Type"::Customer);
        VALIDATE("Party Code",CustomerNo);
        VALIDATE("Posting Date",WORKDATE);
        VALIDATE("TCS Nature of Collection",CodeContractor);
        VALIDATE("T.A.N. No.",CompanyInformation."T.A.N. No.");
        MODIFY(TRUE);
      END ;
    END;

    LOCAL PROCEDURE CreateCashReceiptJournal@1500054(VAR GenJournalLine@1500054 : Record 81;CodeContractor@1500000 : Code[10];CustomerNo@1500055 : Code[20]);
    VAR
      GenJournalTemplate@1500060 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::"Cash Receipts");
      GenJournalTemplate.MODIFY(TRUE);
      CreateCashReceiptJnlPayment(GenJournalLine,GenJournalTemplate.Name,CustomerNo,CodeContractor);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCashReceiptVoucher@1500051(VAR GenJournalLine@1500054 : Record 81;CodeContractor@1500000 : Code[10];CustomerNo@1500055 : Code[20]);
    VAR
      GenJournalTemplate@1500060 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::General);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Cash Receipt Voucher");
      GenJournalTemplate.MODIFY(TRUE);
      CreateCashReceiptJnlPayment(GenJournalLine,GenJournalTemplate.Name,CustomerNo,CodeContractor);
    END;

    LOCAL PROCEDURE CreateGeneralJnlLine@1500086(VAR GenJournalLine@1500054 : Record 81;CodeContractor@1500000 : Code[10];CustomerNo@1500055 : Code[20]);
    VAR
      GenJournalTemplate@1500060 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      CreateCashReceiptJnlPayment(GenJournalLine,GenJournalTemplate.Name,CustomerNo,CodeContractor);
      GenJournalLine.VALIDATE("Document Type",GenJournalLine."Document Type"::Invoice);
      GenJournalLine.VALIDATE(Amount,-GenJournalLine.Amount);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@1500011(VAR PurchaseHeader@1500070 : Record 38;VAR PurchaseLine@1500001 : Record 39;VendorNo@1500002 : Code[20];Amount@1500003 : Decimal;CodeContractor@1500004 : Code[10];PostingDate@1500006 : Date);
    VAR
      Item@1500007 : Record 27;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.VALIDATE("Posting Date",PostingDate);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItem(Item),1);
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseInvoice@1500079(VAR PurchaseHeader@1500070 : Record 38;VAR PurchaseLine@1500001 : Record 39;VendorNo@1500002 : Code[20];CodeContractor@1500004 : Code[10];PostingDate@1500006 : Date);
    VAR
      GLAccount@1500000 : Record 15;
      GenProductPostingGroup@1500003 : Record 251;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,VendorNo);
      PurchaseHeader.VALIDATE("Posting Date",PostingDate);
      PurchaseHeader.VALIDATE("Location Code",'');
      PurchaseHeader.MODIFY(TRUE);
      LibraryERM.CreateGenProdPostingGroup(GenProductPostingGroup);
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GenProductPostingGroup.Code);
      GLAccount.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",GLAccount."No.",1);
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10000,2));
      PurchaseLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBankPaymentVoucher@1500080(VAR GenJournalLine@1500054 : Record 81;TDSSetup@1500000 : Record 13728);
    VAR
      GenJournalTemplate@1500060 : Record 80;
      TDSGroup@1500001 : Record 13731;
    BEGIN
      TDSGroup.SETRANGE("TDS Group",TDSSetup."TDS Group");
      TDSGroup.FINDFIRST;
      CreateBankPaymentLineForPayTDS(GenJournalLine,GenJournalTemplate."Sub Type"::"Bank Payment Voucher",TDSGroup."TDS Account",
        CompanyInformation."T.A.N. No.",WORKDATE,TRUE);
      GeneralJournalTemplateName := GenJournalLine."Journal Template Name";
      GetBankPaymentVoucherAmountAfterPayTDS(GenJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreatePaymentGenJnlLineforParty@1500012(VAR GenJournalLine@1500010 : Record 81;PartyCode@1500002 : Code[20];CodeContractor@1500004 : Code[10];Amount@1500003 : Decimal);
    VAR
      GenJournalTemplate@1500005 : Record 80;
      GenJournalBatch@1500000 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,-Amount);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Party);
      GenJournalLine.VALIDATE("Party Code",PartyCode);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.VALIDATE("Posting Date",WORKDATE);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJnlLineforServiceTax@1500013(VAR GenJournalLine@1500050 : Record 81;VAR GenJournalBatch@1500001 : Record 232;CodeContractor@1500002 : Code[10];CurrencyCode@1500003 : Code[10];ServiceTaxGroupCode@1500004 : Code[20];VendorNo@1500005 : Code[20]);
    VAR
      GenJournalTemplate@1500008 : Record 80;
      GLAccountNo@1500010 : Code[20];
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GLAccountNo := ReverseServiceTaxHelper.CreateGLAccount(ServiceTaxGroupCode);
      LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Vendor,VendorNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",GLAccountNo,-LibraryRandom.RandDec(10000,2));
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.VALIDATE("Posting Date",WORKDATE);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.VALIDATE("Service Tax Group Code",ServiceTaxGroupCode);
      GenJournalLine.VALIDATE("Posting Date",WORKDATE);
      GenJournalLine.VALIDATE(PoT,TRUE);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJnlLineWithServiceTaxAndTCS@1500056(VAR GenJournalLine@1500050 : Record 81;CodeContractor@1500002 : Code[10];ServiceTaxGroupCode@1500004 : Code[20];CustomerNo@1500005 : Code[20]);
    VAR
      GenJournalTemplate@1500008 : Record 80;
      GenJournalBatch@1500000 : Record 232;
      GLAccountNo@1500010 : Code[20];
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GLAccountNo := ReverseServiceTaxHelper.CreateGLAccount(ServiceTaxGroupCode);
      WITH GenJournalLine DO BEGIN
        LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
          "Document Type"::Invoice,"Account Type"::Customer,CustomerNo,
          "Bal. Account Type"::"G/L Account",GLAccountNo,LibraryRandom.RandDec(10000,2));
        VALIDATE("Party Type","Party Type"::Customer);
        VALIDATE("Party Code",CustomerNo);
        VALIDATE("Posting Date",WORKDATE);
        VALIDATE("TCS Nature of Collection",CodeContractor);
        VALIDATE("Service Tax Group Code",ServiceTaxGroupCode);
        VALIDATE("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::" ");
        VALIDATE("Bal. Gen. Bus. Posting Group",'');
        VALIDATE("Bal. Gen. Prod. Posting Group",'');
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateGenJnlPaymentLineAndPost@1500060(VAR GenJournalLine@1500000 : Record 81;VendorNo@1500003 : Code[20];CodeContractor@1500004 : Code[10];PostingDate@1500002 : Date);
    VAR
      GenJournalBatch@1500001 : Record 232;
      GenJournalTemplate@1500005 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Vendor,VendorNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,-LibraryRandom.RandDec(10000,2));
      WITH GenJournalLine DO BEGIN
        VALIDATE("Party Type","Party Type"::Vendor);
        VALIDATE("Party Code",VendorNo);
        VALIDATE("Posting Date",PostingDate);
        VALIDATE("TDS Nature of Deduction",CodeContractor);
        VALIDATE("T.A.N. No.",CompanyInformation."T.A.N. No.");
        MODIFY(TRUE);
      END;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreatePaymentJournalAndPost@1500058(VAR GenJournalLine@1500054 : Record 81;TDSSetup@1500002 : Record 13728;PostingDate@1500000 : Date);
    VAR
      GenJournalTemplate@1500060 : Record 80;
      TDSGroup@1500001 : Record 13731;
    BEGIN
      TDSGroup.SETRANGE("TDS Group",TDSSetup."TDS Group");
      TDSGroup.FINDFIRST;
      CreateBankPaymentLineForPayTDS(GenJournalLine,GenJournalTemplate."Sub Type"::" ",TDSGroup."TDS Account",
        CompanyInformation."T.A.N. No.",PostingDate,FALSE);
      LibraryTDS.PayTDS(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateCurrencyCodeWithExchangeRate@1500014() : Code[10];
    VAR
      CurrencyExchangeRate@1500002 : Record 330;
      CurrencyCode@1500003 : Code[10];
    BEGIN
      CurrencyCode := LibraryERM.CreateCurrencyWithGLAccountSetup;
      CurrencyExchangeRate.INIT;
      CurrencyExchangeRate.VALIDATE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.VALIDATE("Starting Date",TODAY);
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",100 * LibraryRandom.RandInt(4));
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",2 * CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Relational Exch. Rate Amount");
      CurrencyExchangeRate.INSERT(TRUE);
      EXIT(CurrencyCode);
    END;

    PROCEDURE CreateTCSNatureCollectionAndTCSSetup@1500039(VAR TcsNatureOfCollection@1500001 : Record 16507;VAR TCSSetup@1500002 : Record 16508;TCSType@1500003 : Option;AssesseeCode@1500004 : Code[10];ConcessionalCode@1500000 : Code[10]);
    BEGIN
      LibraryTCS.CreateTCSNatureCollection(TcsNatureOfCollection);
      TcsNatureOfCollection.VALIDATE("TCS Type",TCSType);
      TcsNatureOfCollection.MODIFY(TRUE);
      CreateTCSSetUp(TCSSetup,TcsNatureOfCollection.Code,AssesseeCode,ConcessionalCode,TCSType);
    END;

    PROCEDURE CreateNODNOCSetup@1500038(VAR NodNocHeader@1500002 : Record 13786;Type@1500001 : Option;No@1500003 : Code[20];AssesseeCode@1500004 : Code[10];TCSNatureCode@1500005 : Code[10];ConcessionalCode@1500000 : Code[20]);
    VAR
      NodNocLines@1500011 : Record 13785;
    BEGIN
      LibraryERM.CreateNODNOCHeader(NodNocHeader,Type,No);
      NodNocHeader.VALIDATE("Assesse Code",AssesseeCode);
      NodNocHeader.MODIFY(TRUE);
      LibraryERM.CreateNODNOCLines(NodNocLines,NodNocHeader,TCSNatureCode);
      UpdateNODNOCLines(NodNocLines,NodNocHeader.Type,ConcessionalCode,TRUE,TRUE,TRUE);
    END;

    PROCEDURE CreateTCSSetUp@1500036(VAR TCSSetup@1500002 : Record 16508;TCSNatureCollectionCode@1500001 : Code[10];AssesseeCode@1500003 : Code[10];ConcessionalCode@1500004 : Code[10];TCSType@1500007 : Option);
    BEGIN
      TCSSetup.INIT;
      TCSSetup.VALIDATE("TCS Nature of Collection",TCSNatureCollectionCode);
      TCSSetup.VALIDATE("Assessee Code",AssesseeCode);
      TCSSetup.VALIDATE("Effective Date",TODAY);
      TCSSetup.VALIDATE("Concessional Code",ConcessionalCode);
      TCSSetup.VALIDATE("TCS %",LibraryRandom.RandInt(5));
      TCSSetup.VALIDATE("TCS Threshold Amount",LibraryRandom.RandDec(100000,2));
      TCSSetup.VALIDATE("Surcharge %",LibraryRandom.RandInt(5));
      TCSSetup.VALIDATE("Surcharge Threshold Amount",LibraryRandom.RandDec(200000,2));
      TCSSetup.VALIDATE("eCESS %",LibraryRandom.RandInt(5));
      TCSSetup.VALIDATE("TCS Type",TCSType);
      TCSSetup.VALIDATE("TCS Account No.",LibraryERM.CreateGLAccountNo);
      TCSSetup.VALIDATE("No. Series",LibraryERM.CreateNoSeriesCode);
      TCSSetup.VALIDATE("SHE Cess %",LibraryRandom.RandInt(5));
      TCSSetup.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateeTDSDocument@1500062(VAR IncomeTaxAccountingPeriod@1500003 : Record 13724;VAR IncomeTaxPeriodSetup@1500004 : Record 16501;VAR ExportedFileName@1500000 : Text);
    VAR
      IncomeTaxAccountingPeriodFinancial@1500001 : Code[6];
    BEGIN
      GenerateFileeTDS(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",IncomeTaxPeriodSetup.Quarter::Q1,
        CompanyInformation."T.A.N. No.",IncomeTaxAccountingPeriod."Starting Date",COPYSTR(CREATEGUID,1,15));
      ExportedFileName := GenerateeTDSUsingPage(CompanyInformation."P.A.N. No.",TRUE,FALSE);
      GenerateFileeTDS(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",IncomeTaxPeriodSetup.Quarter::Q2,
        CompanyInformation."T.A.N. No.",WORKDATE,COPYSTR(CREATEGUID,1,15));
      IncomeTaxAccountingPeriodFinancial :=
        FORMAT(DATE2DMY(WORKDATE,3)) + FORMAT(CALCDATE('<+1y>',WORKDATE),2,'<year,2>');
      GenerateFileeTDS(IncomeTaxAccountingPeriodFinancial,IncomeTaxPeriodSetup.Quarter::Q1,
        CompanyInformation."T.A.N. No.",IncomeTaxAccountingPeriod."Starting Date",COPYSTR(CREATEGUID,1,15));
    END;

    LOCAL PROCEDURE CreateTDSSetupWithVendorPANAPPLIED@1500037(VAR IncomeTaxAccountingPeriod@1500006 : Record 13724;VAR NodNocHeader@1500005 : Record 13786;VAR TdsNatureOfDeduction@1500004 : Record 13726;VAR Vendor@1500002 : Record 23;VAR TDSSetup@1500001 : Record 13728);
    VAR
      IncomeTaxPeriodSetup@1500000 : Record 16501;
    BEGIN
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      CreateVendorWithPANAPPLIED(Vendor);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,'',Vendor."No.",
        NodNocHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");
    END;

    LOCAL PROCEDURE CreateAndPostPaymentByPayTDS@1500048(VAR GenJnlLinePaymnt@1500006 : Record 81;TDSAccount@1500000 : Code[20];PostingDate@1500004 : Date);
    VAR
      GenJnlTemplate@1500001 : Record 80;
    BEGIN
      CreateBankPaymentLineForPayTDS(
        GenJnlLinePaymnt,GenJnlTemplate."Sub Type"::"Bank Payment Voucher",
        TDSAccount,CompanyInformation."T.A.N. No.",PostingDate,TRUE);
      GeneralJournalTemplateName := GenJnlLinePaymnt."Journal Template Name";
      GetBankPaymentVoucherAmountAfterPayTDS(GenJnlLinePaymnt."Journal Batch Name");
      LibraryERM.PostGeneralJnlLine(GenJnlLinePaymnt);
    END;

    LOCAL PROCEDURE CreateBankPaymentLineForPayTDS@1500040(VAR GenJournalLine@1500000 : Record 81;SubType@1500005 : Option;AccNo@1500001 : Code[20];TANNo@1500003 : Code[10];PostingDate@1500002 : Date;PaymentType@1500004 : Boolean);
    VAR
      GenJournalBatch@1500006 : Record 232;
      GenJournalTemplate@1500007 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      IF PaymentType THEN
        GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::General)
      ELSE
        GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::Payments);
      GenJournalTemplate.VALIDATE("Sub Type",SubType);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",AccNo,0);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
      GenJournalLine.VALIDATE("T.A.N. No.",TANNo);
      GenJournalLine.VALIDATE("Pay TDS",TRUE);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetBankPaymentVoucherAmountAfterPayTDS@1500009(JournalBatchName@1500000 : Code[20]);
    VAR
      PayTDS@1500002 : TestPage 13788;
      BankPaymentVoucherPage@1500001 : TestPage 16577;
    BEGIN
      COMMIT;
      BankPaymentVoucherPage.OPENVIEW;
      BankPaymentVoucherPage.CurrentJnlBatchName.SETVALUE(JournalBatchName);
      PayTDS.TRAP;
      BankPaymentVoucherPage.TDS.INVOKE;
      PayTDS.Pay.INVOKE;
    END;

    LOCAL PROCEDURE CalcTDSAmountsFromBase@1500016(VAR ExpectedTDSEntry@1500001 : Record 13729;TDSSetup@1500002 : Record 13728;TaxBaseAmount@1500003 : Decimal;VendorNo@1500006 : Code[20]);
    VAR
      Vendor@1500004 : Record 23;
    BEGIN
      WITH ExpectedTDSEntry DO BEGIN
        Vendor.SETRANGE("No.",VendorNo);
        Vendor.FINDFIRST;
        "TDS Base Amount" := TaxBaseAmount;
        IF (Vendor."P.A.N. Status" = Vendor."P.A.N. Status"::" ") AND (Vendor."P.A.N. No." <> '') THEN
          "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS Base Amount")
        ELSE
          "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."Non PAN TDS %" / 100 * "TDS Base Amount");
        "Surcharge Amount" := LibraryTDS.RoundTDS(TDSSetup."Surcharge %" / 100 * "TDS Amount");
        "eCESS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "SHE Cess Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "Total TDS Including SHE CESS" := "TDS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE CalcTCSAmountsFromBase@1500017(VAR ExpectedTCSEntry@1500002 : Record 16514;TCSSetup@1500001 : Record 16508;TaxBaseAmount@1500003 : Decimal);
    BEGIN
      WITH ExpectedTCSEntry DO BEGIN
        "TCS Base Amount" := TaxBaseAmount;
        "TCS Amount" := LibraryTCS.RoundTCS(TCSSetup."TCS %" * "TCS Base Amount" / 100);
        "Surcharge Amount" := LibraryTCS.RoundTCS((TCSSetup."TCS %" * "TCS Base Amount" / 100) * (TCSSetup."Surcharge %" / 100));
        "eCESS Amount" := LibraryTCS.RoundTCS(("TCS Amount" + "Surcharge Amount") * TCSSetup."eCESS %" / 100);
        "SHE Cess Amount" := LibraryTCS.RoundTCS(("TCS Amount" + "Surcharge Amount") * TCSSetup."SHE Cess %" / 100);
        "Total TCS Including SHE CESS" :=
          LibraryTDS.RoundTCSAmount("TCS Amount" + "Surcharge Amount" + "eCESS Amount" + "SHE Cess Amount");
      END;
    END;

    LOCAL PROCEDURE CalcTDSAmountsFromBaseforGenJnlLine@1500018(VAR ExpectedTDSEntry@1500001 : Record 13729;TDSSetup@1500002 : Record 13728;TaxBaseAmount@1500003 : Decimal;PartyNo@1500004 : Code[20]);
    VAR
      Party@1500006 : Record 13730;
    BEGIN
      WITH ExpectedTDSEntry DO BEGIN
        Party.SETRANGE(Code,PartyNo);
        Party.FINDFIRST;
        "TDS Base Amount" := TaxBaseAmount;
        IF (Party."P.A.N. Status" = Party."P.A.N. Status"::" ") AND (Party."P.A.N. No." <> '') THEN
          "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS Base Amount")
        ELSE
          "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."Non PAN TDS %" / 100 * "TDS Base Amount");
        "eCESS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * "TDS Amount");
        "SHE Cess Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * "TDS Amount");
        "Total TDS Including SHE CESS" := "TDS Amount" + "eCESS Amount" + "SHE Cess Amount";
      END;
    END;

    LOCAL PROCEDURE CreateForeignVendorWithPostingGroup@1500019(VAR Vendor@1500000 : Record 23;CurrencyCode@1500001 : Code[10];CountryCode@1500002 : Code[10]);
    VAR
      VendorPostingGroup@1500003 : Record 93;
    BEGIN
      LibraryPurchase.CreateVendorPostingGroup(VendorPostingGroup);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("P.A.N. No.",Vendor."P.A.N. No.");
      Vendor.VALIDATE("P.A.N. No.",
        LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. No."),DATABASE::Vendor));
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.VALIDATE("Country/Region Code",CountryCode);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorWithPANAPPLIED@1500020(VAR Vendor@1500000 : Record 23);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("P.A.N. Status",Vendor."P.A.N. Status"::PANAPPLIED);
      Vendor.VALIDATE("P.A.N. Reference No.",
        LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. Reference No."),DATABASE::Vendor));
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePartyWithPANAPPLIED@1500021(VAR Party@1500000 : Record 13730);
    BEGIN
      LibraryTDS.CreateParty(Party);
      Party.VALIDATE("P.A.N. Status",Party."P.A.N. Status"::PANAPPLIED);
      Party.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithPANAPPLIED@1500022(VAR Customer@1500002 : Record 18);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("P.A.N. Status",Customer."P.A.N. Status"::PANAPPLIED);
      Customer.VALIDATE("P.A.N. Reference No.",
        LibraryUtility.GenerateRandomCode(Customer.FIELDNO("P.A.N. Reference No."),DATABASE::Customer));
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceTaxStructure@1500023(VAR StructureHeader@150000 : Record 13792);
    VAR
      StructureDetails@1500001 : Record 13793;
    BEGIN
      LibraryServiceTax.CreateServiceTaxStructure(StructureHeader);
      StructureDetails.RESET;
      StructureDetails.SETRANGE(Code,StructureHeader.Code);
      StructureDetails.FINDFIRST;
      StructureDetails.VALIDATE("Include in TDS Base",TRUE);
      StructureDetails.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateandPostBankPayment@1500044(VAR DocumentNo@1500006 : Code[20];PartyCode@1500002 : Code[20];CodeContractor@1500004 : Code[10];PostingDate@1500001 : Date);
    VAR
      GenJournalLine@1500007 : Record 81;
      GenJournalTemplate@1500005 : Record 80;
      GenJournalBatch@1500000 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,PartyCode,
        GenJournalLine."Bal. Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,LibraryRandom.RandDec(10000,2));
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",PartyCode);
      GenJournalLine.VALIDATE("T.A.N. No.",CompanyInformation."T.A.N. No.");
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
      DocumentNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    PROCEDURE CreateIncomeTaxPeriodQuarters@1500057(IncomeTaxAccountingPeriodNo@1500002 : Integer) : Integer;
    VAR
      IncomeTaxPeriodSetup@1500000 : Record 16501;
      Quarter@1500001 : Integer;
    BEGIN
      FOR Quarter := IncomeTaxPeriodSetup.Quarter::Q1 TO IncomeTaxPeriodSetup.Quarter::Q4 DO
        LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,Quarter);
    END;

    LOCAL PROCEDURE GenerateeTDSUsingPage@1500061(PANNo@1500006 : Code[20];Resident@1500005 : Boolean;ValidMobileNo@1500003 : Boolean) FileName : Text;
    VAR
      CompanyInformation@1500000 : Record 79;
      FileManagement@1500002 : Codeunit 419;
      GenerateeTDS@1500001 : TestPage 16507;
    BEGIN
      CompanyInformation.GET;
      CLEAR(LibraryVariableStorage);
      LibraryVariableStorage.Enqueue(CompanyInformation."T.A.N. No.");
      FileName := FileManagement.ServerTempFileName('.txt');
      LibraryVariableStorage.Enqueue(FileName);
      LibraryVariableStorage.Enqueue(PANNo);
      IF ValidMobileNo THEN
        LibraryVariableStorage.Enqueue(LibraryRandom.RandIntInRange(100000000,99999999))
      ELSE
        LibraryVariableStorage.Enqueue(LibraryRandom.RandIntInRange(1000000000,999999999));
      COMMIT;
      GenerateeTDS.OPENEDIT;
      GenerateeTDS.FormNo.SETVALUE(LibraryTDS.GetFormNo(Resident));
      GenerateeTDS.eTDS.INVOKE;
    END;

    LOCAL PROCEDURE GenerateFileeTDS@1500177(FinancialYearForeTDSTCS@1500002 : Code[6];Quarter@1500000 : Option;TANNo@1500005 : Code[20];FilingDate@1500006 : Date;ProvisionReceiptNo@1500007 : Code[20]);
    VAR
      GenerateeTDS@1500001 : TestPage 16507;
    BEGIN
      LibraryVariableStorage.Enqueue(FinancialYearForeTDSTCS);
      LibraryVariableStorage.Enqueue(Quarter);
      LibraryVariableStorage.Enqueue(TANNo);
      LibraryVariableStorage.Enqueue(FilingDate);
      LibraryVariableStorage.Enqueue(ProvisionReceiptNo);
      COMMIT;
      GenerateeTDS.OPENEDIT;
      GenerateeTDS.FormNo.SETVALUE(LibraryTDS.GetFormNo(TRUE));
      GenerateeTDS."File e-TDS".INVOKE;
      GenerateReturnStatusPage;
    END;

    LOCAL PROCEDURE GenerateReturnStatusPage@1500066();
    VAR
      GenerateeTDS@1500000 : TestPage 16507;
    BEGIN
      GenerateeTDS.OPENEDIT;
      GenerateeTDS.FormNo.SETVALUE(LibraryTDS.GetFormNo(TRUE));
      GenerateeTDS.Action1500008.INVOKE;
    END;

    LOCAL PROCEDURE RunForm26Q27Q@1500091(Resident@1500000 : Boolean);
    BEGIN
      COMMIT;
      IF Resident THEN
        REPORT.RUN(REPORT::"Form 26Q")
      ELSE
        REPORT.RUN(REPORT::"Form 27Q");
    END;

    PROCEDURE UpdateNODNOCLines@1500046(VAR NodNocLines@1500004 : Record 13785;Type@1500003 : Option;ConcessionalCode@1500005 : Code[20];ThresholdOverlook@1500002 : Boolean;SurchargeOverlook@1500001 : Boolean;MonthlyCertificate@1500000 : Boolean);
    BEGIN
      NodNocLines.SETRANGE("No.",NodNocLines."No.");
      NodNocLines.SETRANGE(Type,Type);
      NodNocLines.FINDSET;
      NodNocLines.MODIFYALL("Concessional Code",ConcessionalCode);
      NodNocLines.MODIFYALL("Monthly Certificate",MonthlyCertificate);
      NodNocLines.MODIFYALL("Threshold Overlook",ThresholdOverlook);
      NodNocLines.MODIFYALL("Surcharge Overlook",SurchargeOverlook);
    END;

    LOCAL PROCEDURE UpdateCompanyPANNOTREQD@1500052();
    VAR
      Location@1500000 : Record 14;
    BEGIN
      CompanyInformation.VALIDATE("P.A.N. Status",CompanyInformation."P.A.N. Status"::"Not available");
      CompanyInformation.VALIDATE("P.A.N. No.",'PANNOTREQD');
      CompanyInformation.VALIDATE("E-Mail",COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20));
      CompanyInformation.VALIDATE("Location Code",LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location));
      CompanyInformation.MODIFY(TRUE);
      Location.VALIDATE("T.A.N. No.",CompanyInformation."T.A.N. No.");
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateChallanDetails@1500042(DocumentNo@1500001 : Code[20];PaymentDocNo@1500005 : Code[20];DocumentType@1500000 : Option;PostingDate@1500006 : Date) : Code[9];
    VAR
      TDSEntry@1500002 : Record 13729;
      UpdateChallanDetails@1500003 : Report 13721;
      ChallanNo@1500004 : Code[5];
    BEGIN
      WITH TDSEntry DO BEGIN
        SETFILTER("Document No.",DocumentNo);
        SETRANGE("Document Type",DocumentType);
        FINDFIRST;
        ChallanNo := FORMAT(LibraryRandom.RandInt(1000));
        UpdateChallanDetails.InitializeRequest(PaymentDocNo,ChallanNo,PostingDate,
          LibraryUtility.GenerateGUID,COPYSTR(LibraryUtility.GenerateGUID,1,7),LibraryUtility.GenerateGUID,
          PostingDate,1);
        UpdateChallanDetails.USEREQUESTPAGE(FALSE);
        UpdateChallanDetails.RUN;
      END;
      EXIT(ChallanNo);
    END;

    LOCAL PROCEDURE UpdateCompanyPANandTDSChallanSetup@1500041(VAR TDSSetup@1500000 : Record 13728) : Code[20];
    BEGIN
      UpdateCompanyPANNOTREQD;
      LibraryTDS.UpdateTDSNilChallanInGeneralLedgerSetup;
      EXIT(LibraryTDS.CreateAndUpdateTDSAccNo(TDSSetup));
    END;

    LOCAL PROCEDURE UpdatePANStatusReportandVendorCardWithPANNo@1500081(VendorNo@1500001 : Code[20]);
    VAR
      Vendor@1500000 : Record 23;
    BEGIN
      Vendor.SETRANGE("No.",VendorNo);
      Vendor.FINDFIRST;
      Vendor.VALIDATE("P.A.N. No.",LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. No."),DATABASE::Vendor));
      Vendor.MODIFY(TRUE);
      COMMIT;
      REPORT.RUN(REPORT::"Update P.A.N. Status");
    END;

    LOCAL PROCEDURE RunUpdateChallanRegister@1500217(ChallanNo@1501000 : Code[20];UpdatedTDSAmount@1500001 : Decimal);
    VAR
      ChallanRegister@1500201 : Record 16504;
      UpdateChallanRegister@1500203 : Report 16503;
    BEGIN
      ChallanRegister.SETRANGE("Challan No.",ChallanNo);
      COMMIT;
      UpdateChallanRegister.SETTABLEVIEW(ChallanRegister);
      UpdateChallanRegister.UpdateChallan(UpdatedTDSAmount,UpdatedTDSAmount,UpdatedTDSAmount,1);
      UpdateChallanRegister.USEREQUESTPAGE(FALSE);
      UpdateChallanRegister.RUNMODAL;
    END;

    LOCAL PROCEDURE VerifySalesOrderStatistics@1500027(ExpectedTCSEntry@1500000 : Record 16514;SalesLine@1500001 : Record 37);
    BEGIN
      WITH ExpectedTCSEntry DO BEGIN
        CLEAR(LibraryVariableStorage);
        LibraryVariableStorage.Enqueue("Total TCS Including SHE CESS");
        LibraryVariableStorage.Enqueue("Work Tax Amount");
        ServiceTaxAsExciseHelper.OpenSalesOrderStatistics(SalesLine);
      END;
    END;

    LOCAL PROCEDURE VerifyPurchaseOrderStatistics@1500028(ExpectedTDSEntry@1500000 : Record 13729;PurchaseLine@1500001 : Record 39);
    BEGIN
      WITH ExpectedTDSEntry DO BEGIN
        CLEAR(LibraryVariableStorage);
        LibraryVariableStorage.Enqueue("Total TDS Including SHE CESS");
        LibraryVariableStorage.Enqueue("Work Tax Amount");
        ServiceTaxAsExciseHelper.OpenPurchaseOrderStatistics(PurchaseLine);
      END;
    END;

    LOCAL PROCEDURE VerifyGLEntryCount@1500029(DocumentNo@1500000 : Code[20];ExpectedCount@1500001 : Integer);
    VAR
      DummyGLEntry@1500002 : Record 17;
    BEGIN
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      Assert.RecordCount(DummyGLEntry,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyGLEntry@1500030(DocumentNo@1500001 : Code[20];Amount@1500002 : Decimal);
    VAR
      GLEntry@1500004 : Record 17;
      CreditAmount@1500007 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
      REPEAT
        CreditAmount += GLEntry."Credit Amount";
      UNTIL GLEntry.NEXT = 0;
      Assert.AreEqual(CreditAmount,Amount,STRSUBSTNO(CreditAmountErr,CreditAmount,Amount));
    END;

    LOCAL PROCEDURE VerifyTCSEntry@1500032(ExpectedTCSEntry@1500001 : Record 16514;DocumentNo@1500002 : Code[20];DocumentType@1500003 : Option);
    VAR
      TCSEntry@1500005 : Record 16514;
    BEGIN
      GeneralLedgerSetup.GET;
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.SETRANGE("Document Type",DocumentType);
      TCSEntry.FINDLAST;
      Assert.AreNearlyEqual(
        ExpectedTCSEntry."TCS Amount",TCSEntry."TCS Amount",
        GeneralLedgerSetup."TCS Rounding Precision",
        STRSUBSTNO(CreditAmountErr,TCSEntry.FIELDNAME("TCS Amount"),TCSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTCSEntry."TCS Base Amount",TCSEntry."TCS Base Amount",
        GeneralLedgerSetup."TCS Rounding Precision",
        STRSUBSTNO(CreditAmountErr,TCSEntry.FIELDNAME("TCS Base Amount"),TCSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTCSEntry."eCESS Amount",TCSEntry."eCESS Amount",
        GeneralLedgerSetup."TCS Rounding Precision",
        STRSUBSTNO(CreditAmountErr,TCSEntry.FIELDNAME("eCESS Amount"),TCSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTCSEntry."SHE Cess Amount",TCSEntry."SHE Cess Amount",
        GeneralLedgerSetup."TCS Rounding Precision",
        STRSUBSTNO(CreditAmountErr,TCSEntry.FIELDNAME("SHE Cess Amount"),TCSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTCSEntry."Surcharge Amount",TCSEntry."Surcharge Amount",
        GeneralLedgerSetup."TCS Rounding Precision",
        STRSUBSTNO(CreditAmountErr,TCSEntry.FIELDNAME("Surcharge Amount"),TCSEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyTDSEntry@1500033(ExpectedTDSEntry@1500000 : Record 13729;DocumentNo@1500001 : Code[20]);
    VAR
      TDSEntry@1500005 : Record 13729;
    BEGIN
      GeneralLedgerSetup.GET;
      TDSEntry.SETRANGE("Document No.",DocumentNo);
      TDSEntry.FINDLAST;
      Assert.AreEqual(
        ExpectedTDSEntry."Base Includes Service Tax",TDSEntry."Base Includes Service Tax",
        STRSUBSTNO(CreditAmountErr,TDSEntry.FIELDNAME("Base Includes Service Tax"),TDSEntry.TABLECAPTION));
      Assert.AreEqual(
        ExpectedTDSEntry."TDS Amount",TDSEntry."TDS Amount",
        STRSUBSTNO(CreditAmountErr,TDSEntry.FIELDNAME("TDS Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntry."TDS Base Amount",TDSEntry."TDS Base Amount",
        GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(CreditAmountErr,TDSEntry.FIELDNAME("TDS Base Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntry."eCESS Amount",TDSEntry."eCESS Amount",
        GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(CreditAmountErr,TDSEntry.FIELDNAME("eCESS Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntry."SHE Cess Amount",TDSEntry."SHE Cess Amount",
        GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(CreditAmountErr,TDSEntry.FIELDNAME("SHE Cess Amount"),TDSEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyServiceTaxEntry@1500034(GenJournalLine@1500000 : Record 81;DocumentNo@1500001 : Code[20]);
    VAR
      ServiceTaxEntry@1500002 : Record 16473;
    BEGIN
      ServiceTaxEntry.SETRANGE("Document No.",DocumentNo);
      ServiceTaxEntry.FINDFIRST;
      Assert.AreEqual(
        GenJournalLine."Service Tax Base Amount (LCY)",ServiceTaxEntry."Service Tax Base Amount",
        STRSUBSTNO(CreditAmountErr,ServiceTaxEntry.FIELDNAME("Service Tax Base Amount"),ServiceTaxEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        GenJournalLine."Service Tax Amount",ServiceTaxEntry."Service Tax Amount",
        GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(CreditAmountErr,ServiceTaxEntry.FIELDNAME("Service Tax Amount"),ServiceTaxEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyDetailedandVendorLedgerEntry@1500035(ExpectedTDSEntry@1500009 : Record 13729;VendorNo@1500001 : Code[20];DocumentType@1500002 : Option;DocumentNo@1500003 : Code[20]);
    VAR
      DetailedVendorLedgEntry@1500004 : Record 380;
      GLEntry@1500005 : Record 17;
      VendorLedgerEntry@1500006 : Record 25;
      CreditAmount@1500008 : Decimal;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
      REPEAT
        IF GLEntry."Credit Amount" <> ExpectedTDSEntry."Total TDS Including SHE CESS" THEN
          CreditAmount := GLEntry."Credit Amount";
      UNTIL GLEntry.NEXT = 0;
      DetailedVendorLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedVendorLedgEntry.SETRANGE("Document Type",DocumentType);
      DetailedVendorLedgEntry.FINDFIRST;
      DetailedVendorLedgEntry."Amount (LCY)" := -DetailedVendorLedgEntry."Amount (LCY)";
      DetailedVendorLedgEntry.TESTFIELD("Amount (LCY)",CreditAmount);
      VendorLedgerEntry.SETRANGE("Vendor No.",VendorNo);
      VendorLedgerEntry.FINDFIRST;
      VendorLedgerEntry.CALCFIELDS("Amount (LCY)");
      VendorLedgerEntry."Amount (LCY)" := -VendorLedgerEntry."Amount (LCY)";
      VendorLedgerEntry.TESTFIELD("Amount (LCY)",CreditAmount);
    END;

    LOCAL PROCEDURE VerifyEntries@1500045(VAR ExpectedTDSEntry@1500000 : Record 13729;DocumentNo@1500001 : Code[20];Amount@1500003 : Decimal;RecordCount@1500002 : Integer);
    BEGIN
      VerifyGLEntryCount(DocumentNo,RecordCount);
      VerifyGLEntry(DocumentNo,Amount);
      VerifyTDSEntry(ExpectedTDSEntry,DocumentNo);
    END;

    LOCAL PROCEDURE VerifyTDSEntryAndForm26QwithPAN@1500050(DocumentNo@1500000 : Code[20];DocumentType@1500001 : Option;VendorNo@1500003 : Code[20]);
    VAR
      TDSEntry@1500002 : Record 13729;
      Form26Q27QEntry@1500004 : Record 16505;
      Vendor@1500005 : Record 23;
    BEGIN
      Vendor.SETRANGE("No.",VendorNo);
      Vendor.FINDFIRST;
      TDSEntry.SETRANGE("Document No.",DocumentNo);
      TDSEntry.SETRANGE("Document Type",DocumentType);
      TDSEntry.FINDFIRST;
      TDSEntry.TESTFIELD("Deductee P.A.N. No.",Vendor."P.A.N. No.");
      Form26Q27QEntry.SETRANGE("Document No.",DocumentNo);
      Form26Q27QEntry.FINDFIRST;
      Form26Q27QEntry.TESTFIELD("Deductee P.A.N. No.",Vendor."P.A.N. No.");
    END;

    LOCAL PROCEDURE VerifytheBlankFields@1500063(IncomeTaxAccountingPeriod@1500000 : Record 13724;IncomeTaxPeriodSetup@1500001 : Record 16501);
    BEGIN
      ASSERTERROR
        GenerateFileeTDS(
          '',IncomeTaxPeriodSetup.Quarter::Q1,CompanyInformation."T.A.N. No.",
          IncomeTaxAccountingPeriod."Starting Date",COPYSTR(CREATEGUID,1,15));
      Assert.ExpectedError(BlankFinancialYearErr);
      ASSERTERROR
        GenerateFileeTDS(
          IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",IncomeTaxPeriodSetup.Quarter::" ",
          CompanyInformation."T.A.N. No.",IncomeTaxAccountingPeriod."Starting Date",COPYSTR(CREATEGUID,1,15));
      Assert.ExpectedError(BlankQuaterErr);
      ASSERTERROR
        GenerateFileeTDS(
          IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",IncomeTaxPeriodSetup.Quarter::Q1,'',
          IncomeTaxAccountingPeriod."Starting Date",COPYSTR(CREATEGUID,1,15));
      Assert.ExpectedError(ExpectedTANErr);
      ASSERTERROR
        GenerateFileeTDS(
          IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",IncomeTaxPeriodSetup.Quarter::Q1,
          CompanyInformation."T.A.N. No.",0D,COPYSTR(CREATEGUID,1,15));
      Assert.ExpectedError(BlankFillingDateErr);
      ASSERTERROR
        GenerateFileeTDS(
          IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",IncomeTaxPeriodSetup.Quarter::Q1,
          CompanyInformation."T.A.N. No.",IncomeTaxAccountingPeriod."Starting Date",'');
      Assert.ExpectedError(BlankPRNoErr);
    END;

    LOCAL PROCEDURE VerifyUpdateChallanRegister@1500065(ChallanNo@1500000 : Code[10]);
    VAR
      ChallanRegister@1500001 : Record 16504;
    BEGIN
      ChallanRegister.SETRANGE("Challan No.",ChallanNo);
      ChallanRegister.FINDFIRST;
      Assert.AreEqual(FALSE,ChallanRegister.Revised,EntriesErr);
      Assert.AreEqual(FALSE,ChallanRegister."Paid By Book Entry",EntriesErr);
    END;

    LOCAL PROCEDURE VerifyValuesOnBatchHeader@1500067(FormNo@1500001 : '26Q,27Q';FinancialYear@1500004 : Code[6];TANNo@1500000 : Code[10]);
    VAR
      BatchHeader@1500002 : Record 16503;
    BEGIN
      BatchHeader.SETRANGE("Form No.",FormNo);
      BatchHeader.FINDLAST;
      Assert.AreEqual(
        FinancialYear,BatchHeader."Financial Year",STRSUBSTNO(FinancialYear,
          BatchHeader."Financial Year",ValueNotFoundErr));
      Assert.AreEqual(
        TANNo,BatchHeader."Deductor T.A.N. No.",STRSUBSTNO(TANNo,
          BatchHeader."Deductor T.A.N. No.",ValueNotFoundErr));
    END;

    [ModalPageHandler]
    PROCEDURE PurchOrderStatisticsMPH@1500025(VAR PurchaseOrderStatistics@1500000 : TestPage 403);
    VAR
      Value@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Value);
      PurchaseOrderStatistics.Control1500012.ASSERTEQUALS(Value);
    END;

    [ModalPageHandler]
    PROCEDURE SalesOrderStatisticsMPH@1500026(VAR SalesOrderStatistics@1500000 : TestPage 402);
    VAR
      Value@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Value);
      SalesOrderStatistics.Control1500015.ASSERTEQUALS(Value);
    END;

    [ModalPageHandler]
    PROCEDURE GeneralJournalTemplateHandler@1500301(VAR GeneralJournalTemplateHandler@1500302 : TestPage 250);
    BEGIN
      GeneralJournalTemplateHandler.FILTER.SETFILTER(Name,GeneralJournalTemplateName);
      GeneralJournalTemplateHandler.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE Form26QRequestPageHandler@1500059(VAR Form26Q@1500113 : TestRequestPage 16505);
    VAR
      ReportFrequency@1500000 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      Form26Q.FinancialYear.SETVALUE(FinancialYear);
      Form26Q.TANLocation.SETVALUE(CompanyInformation."T.A.N. No.");
      Form26Q.ReportFrequency.SETVALUE(ReportFrequency::Q1);
      Form26Q.FullName.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20));
      Form26Q.Designation.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      Form26Q.PrintingDate.SETVALUE(WORKDATE);
      Form26Q.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,999999999));
      Form26Q."PAN No.".SETVALUE('PANNOTREQD');
      Form26Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE GenerateFileeTDSRequestPageHandler@1500070(VAR GenerateFileeTDS@1500003 : TestRequestPage 16501);
    VAR
      TANLocation@1500000 : Variant;
      FinancialYear@1500001 : Variant;
      FinancialYearQuarter@1500002 : Variant;
      FilingDate@1500004 : Variant;
      ProvisionReceiptNo@1500005 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(FinancialYearQuarter);
      LibraryVariableStorage.Dequeue(TANLocation);
      LibraryVariableStorage.Dequeue(FilingDate);
      LibraryVariableStorage.Dequeue(ProvisionReceiptNo);
      GenerateFileeTDS.Control1500009.SETVALUE(TANLocation);
      GenerateFileeTDS.Control1500000.SETVALUE(FinancialYearQuarter);
      GenerateFileeTDS.Control1500002.SETVALUE(FinancialYear);
      GenerateFileeTDS.Control1500004.SETVALUE(FilingDate);
      GenerateFileeTDS.Control1500006.SETVALUE(ProvisionReceiptNo);
      GenerateFileeTDS.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateeTDSRequestPageHandler@1500071(VAR GenerateeTDS@1500005 : TestRequestPage 16508);
    VAR
      TANLocation@1500000 : Variant;
      FileName@1500002 : Variant;
      PANNo@1500004 : Variant;
      MobileNo@1500006 : Variant;
      Quarter@1500001 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      LibraryVariableStorage.Dequeue(TANLocation);
      LibraryVariableStorage.Dequeue(FileName);
      LibraryVariableStorage.Dequeue(PANNo);
      LibraryVariableStorage.Dequeue(MobileNo);

      GenerateeTDS.FileName.SETVALUE(FileName);
      GenerateeTDS.TANLocation.SETVALUE(TANLocation);
      GenerateeTDS.ReportFrequency.SETVALUE(Quarter::Q1);
      GenerateeTDS.FinancialYear.SETVALUE(FinancialYear);
      GenerateeTDS.FullName.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20));
      GenerateeTDS.Designation.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTDS.PrintingDate.SETVALUE(WORKDATE);
      GenerateeTDS.NameOfReturnPreparationUtility.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(3,0),1,3));
      GenerateeTDS.Email.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTDS.MobileNo.SETVALUE(MobileNo);
      GenerateeTDS."PAN No.".SETVALUE(PANNo);
      GenerateeTDS.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE UpdatePANStatusRequestPageHandler@1500133(VAR UpdatePANStatus@1500000 : TestRequestPage 13712);
    BEGIN
      UpdatePANStatus.Control1500002.SETVALUE('Vendor');
      UpdatePANStatus.Control1500003.SETVALUE(VendorNo);
      UpdatePANStatus.Control1.SETVALUE(StartDate);
      UpdatePANStatus.Control2.SETVALUE(EndDate);
      UpdatePANStatus.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReturnModalPageHandler@1500092(VAR ReturnStatus@1500000 : TestPage 16508);
    BEGIN
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@1500064(QuestionText@1500000 : Text;VAR Relpy@1500001 : Boolean);
    BEGIN
      Relpy := TRUE;
    END;

    BEGIN
    END.
  }
}

