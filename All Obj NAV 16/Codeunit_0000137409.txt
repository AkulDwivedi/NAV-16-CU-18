OBJECT Codeunit 137409 Analysis Reports Chart
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 32=rimd,
                TableData 5802=rimd;
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DrillDownAnalysisLine@1009 : Record 7114;
      DrillDownAnalysisColumn@1010 : Record 7118;
      DrillDownValueEntry@1015 : Record 5802;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryInventory@1003 : Codeunit 132201;
      Assert@1005 : Codeunit 130000;
      AnalysisReportChartMgt@1007 : Codeunit 770;
      IsInitialized@1001 : Boolean;
      DimensionValueNotEqualERR@1006 : TextConst 'ENU=X-Axis Dimension value for interval no. %1 differs from expected value.';
      AmountNotEqualERR@1008 : TextConst 'ENU=Amount does not match expected value for measure %1, X-axis dimension %2.';
      ColFormulaMSG@1012 : TextConst 'ENU=Column formula: %1';
      RowFormulaMSG@1011 : TextConst 'ENU=Row formula: %1';
      FormulaDrillDownERR@1014 : TextConst 'ENU=Incorrect %1 Formula message.';
      DrillDownValERR@1013 : TextConst 'ENU="DrillDown page Sales Amount does not match the expected value for Analysis Line %1,Analysis Column %2, Date Filter %3. "';
      MeasureTXT@1016 : TextConst 'ENU=%1 %2';

    LOCAL PROCEDURE Initialize@148();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE TestChart_Period_Day@24();
    VAR
      AnalysisReportChartSetup@1006 : Record 770;
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestChart(
        AnalysisReportChartSetup."Base X-Axis on"::Period,AnalysisReportChartSetup."Period Length"::Day,
        LibraryRandom.RandIntInRange(5,15));
    END;

    [Test]
    PROCEDURE TestChart_Period_Week@4();
    VAR
      AnalysisReportChartSetup@1000 : Record 770;
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestChart(
        AnalysisReportChartSetup."Base X-Axis on"::Period,AnalysisReportChartSetup."Period Length"::Week,
        LibraryRandom.RandIntInRange(5,15));
    END;

    [Test]
    PROCEDURE TestChart_Period_Month@5();
    VAR
      AnalysisReportChartSetup@1000 : Record 770;
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestChart(
        AnalysisReportChartSetup."Base X-Axis on"::Period,AnalysisReportChartSetup."Period Length"::Month,
        LibraryRandom.RandIntInRange(5,15));
    END;

    [Test]
    PROCEDURE TestChart_Period_Quarter@23();
    VAR
      AnalysisReportChartSetup@1000 : Record 770;
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestChart(
        AnalysisReportChartSetup."Base X-Axis on"::Period,AnalysisReportChartSetup."Period Length"::Quarter,
        LibraryRandom.RandIntInRange(5,15));
    END;

    [Test]
    PROCEDURE TestChart_Period_Year@22();
    VAR
      AnalysisReportChartSetup@1000 : Record 770;
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestChart(
        AnalysisReportChartSetup."Base X-Axis on"::Period,AnalysisReportChartSetup."Period Length"::Year,
        LibraryRandom.RandIntInRange(5,15));
    END;

    [Test]
    PROCEDURE TestChart_Line@21();
    VAR
      AnalysisReportChartSetup@1000 : Record 770;
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestChart(AnalysisReportChartSetup."Base X-Axis on"::Line,LibraryRandom.RandIntInRange(1,5) - 1,0);
    END;

    [Test]
    PROCEDURE TestChart_Column@10();
    VAR
      AnalysisReportChartSetup@1000 : Record 770;
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestChart(AnalysisReportChartSetup."Base X-Axis on"::Column,AnalysisReportChartSetup."Period Length",0);
    END;

    [Test]
    PROCEDURE TestAction_ChangePeriod_Period_MonthToDay@14();
    VAR
      AnalysisReportChartSetup@1000 : Record 770;
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestAction_ChangePeriod(
        AnalysisReportChartSetup."Base X-Axis on"::Period,AnalysisReportChartSetup."Period Length"::Month,
        LibraryRandom.RandIntInRange(5,15),AnalysisReportChartSetup."Period Length"::Day);
    END;

    [Test]
    PROCEDURE TestAction_ChangePeriod_Period_QuarterToWeek@35();
    VAR
      AnalysisReportChartSetup@1000 : Record 770;
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestAction_ChangePeriod(
        AnalysisReportChartSetup."Base X-Axis on"::Period,AnalysisReportChartSetup."Period Length"::Quarter,
        LibraryRandom.RandIntInRange(5,15),AnalysisReportChartSetup."Period Length"::Week);
    END;

    [Test]
    PROCEDURE TestAction_ChangePeriod_Period_DayToWeek@34();
    VAR
      AnalysisReportChartSetup@1000 : Record 770;
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestAction_ChangePeriod(
        AnalysisReportChartSetup."Base X-Axis on"::Period,AnalysisReportChartSetup."Period Length"::Day,
        LibraryRandom.RandIntInRange(5,15),AnalysisReportChartSetup."Period Length"::Week);
    END;

    [Test]
    PROCEDURE TestAction_ChangePeriod_Period_WeekToMonth@17();
    VAR
      AnalysisReportChartSetup@1000 : Record 770;
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestAction_ChangePeriod(
        AnalysisReportChartSetup."Base X-Axis on"::Period,AnalysisReportChartSetup."Period Length"::Week,
        LibraryRandom.RandIntInRange(5,15),AnalysisReportChartSetup."Period Length"::Month);
    END;

    [Test]
    PROCEDURE TestAction_ChangePeriod_Line_MonthToDay@33();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestAction_ChangePeriod(
        AnalysisReportChartSetup."Base X-Axis on"::Line,AnalysisReportChartSetup."Period Length"::Month,0,
        AnalysisReportChartSetup."Period Length"::Day);
    END;

    [Test]
    PROCEDURE TestAction_ChangePeriod_Line_QuarterToWeek@31();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestAction_ChangePeriod(
        AnalysisReportChartSetup."Base X-Axis on"::Line,AnalysisReportChartSetup."Period Length"::Quarter,0,
        AnalysisReportChartSetup."Period Length"::Week);
    END;

    [Test]
    PROCEDURE TestAction_ChangePeriod_Column_DayToWeek@30();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestAction_ChangePeriod(
        AnalysisReportChartSetup."Base X-Axis on"::Column,AnalysisReportChartSetup."Period Length"::Day,0,
        AnalysisReportChartSetup."Period Length"::Week);
    END;

    [Test]
    PROCEDURE TestAction_ChangePeriod_Column_WeekToMonth@29();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestAction_ChangePeriod(
        AnalysisReportChartSetup."Base X-Axis on"::Column,AnalysisReportChartSetup."Period Length"::Week,0,
        AnalysisReportChartSetup."Period Length"::Month);
    END;

    [Test]
    PROCEDURE TestAction_NextPeriod_Period@18();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
      MovePeriod@1000 : ' ,Next,Previous';
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestAction_MovePeriod(
        AnalysisReportChartSetup."Base X-Axis on"::Period,LibraryRandom.RandIntInRange(1,5) - 1,
        LibraryRandom.RandIntInRange(5,15),MovePeriod::Next);
    END;

    [Test]
    PROCEDURE TestAction_PrevPeriod_Period@19();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
      MovePeriod@1000 : ' ,Next,Previous';
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestAction_MovePeriod(
        AnalysisReportChartSetup."Base X-Axis on"::Period,LibraryRandom.RandIntInRange(1,5) - 1,
        LibraryRandom.RandIntInRange(5,15),MovePeriod::Previous);
    END;

    [Test]
    PROCEDURE TestAction_NextPeriod_Line@26();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
      MovePeriod@1000 : ' ,Next,Previous';
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestAction_MovePeriod(
        AnalysisReportChartSetup."Base X-Axis on"::Line,LibraryRandom.RandIntInRange(1,5) - 1,0,MovePeriod::Next);
    END;

    [Test]
    PROCEDURE TestAction_PrevPeriod_Line@41();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
      MovePeriod@1000 : ' ,Next,Previous';
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestAction_MovePeriod(
        AnalysisReportChartSetup."Base X-Axis on"::Line,LibraryRandom.RandIntInRange(1,5) - 1,0,MovePeriod::Previous);
    END;

    [Test]
    PROCEDURE TestAction_NextPeriod_Column@49();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
      MovePeriod@1000 : ' ,Next,Previous';
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestAction_MovePeriod(
        AnalysisReportChartSetup."Base X-Axis on"::Column,LibraryRandom.RandIntInRange(1,5) - 1,0,MovePeriod::Next);
    END;

    [Test]
    PROCEDURE TestAction_PrevPeriod_Column@47();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
      MovePeriod@1000 : ' ,Next,Previous';
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestAction_MovePeriod(
        AnalysisReportChartSetup."Base X-Axis on"::Column,LibraryRandom.RandIntInRange(1,5) - 1,0,MovePeriod::Previous);
    END;

    [Test]
    [HandlerFunctions(MsgHandler)]
    PROCEDURE TestAction_DrillDown_ColumnFormula_Period@27();
    VAR
      AnalysisReportChartSetup@1000 : Record 770;
      TestDrillDownType@1001 : 'ColumnFormula,RowFormula,Data';
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestDrillDown(
        AnalysisReportChartSetup."Base X-Axis on"::Period,LibraryRandom.RandIntInRange(1,5) - 1,
        LibraryRandom.RandIntInRange(5,15),TestDrillDownType::ColumnFormula);
    END;

    [Test]
    [HandlerFunctions(MsgHandler)]
    PROCEDURE TestAction_DrillDown_RowFormula_Period@79();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
      TestDrillDownType@1000 : 'ColumnFormula,RowFormula,Data';
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestDrillDown(
        AnalysisReportChartSetup."Base X-Axis on"::Period,LibraryRandom.RandIntInRange(1,5) - 1,
        LibraryRandom.RandIntInRange(5,15),TestDrillDownType::RowFormula);
    END;

    [Test]
    [HandlerFunctions(ValueEntriesHandler)]
    PROCEDURE TestAction_DrillDown_Data_Period@95();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
      TestDrillDownType@1000 : 'ColumnFormula,RowFormula,Data';
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestDrillDown(
        AnalysisReportChartSetup."Base X-Axis on"::Period,LibraryRandom.RandIntInRange(1,5) - 1,
        LibraryRandom.RandIntInRange(5,15),TestDrillDownType::Data);
    END;

    [Test]
    [HandlerFunctions(MsgHandler)]
    PROCEDURE TestAction_DrillDown_ColumnFormula_Line@109();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
      TestDrillDownType@1000 : 'ColumnFormula,RowFormula,Data';
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestDrillDown(
        AnalysisReportChartSetup."Base X-Axis on"::Line,LibraryRandom.RandIntInRange(1,5) - 1,0,
        TestDrillDownType::ColumnFormula);
    END;

    [Test]
    [HandlerFunctions(MsgHandler)]
    PROCEDURE TestAction_DrillDown_RowFormula_Line@108();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
      TestDrillDownType@1000 : 'ColumnFormula,RowFormula,Data';
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestDrillDown(
        AnalysisReportChartSetup."Base X-Axis on"::Line,LibraryRandom.RandIntInRange(1,5) - 1,0,TestDrillDownType::RowFormula);
    END;

    [Test]
    [HandlerFunctions(ValueEntriesHandler)]
    PROCEDURE TestAction_DrillDown_Data_Line@107();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
      TestDrillDownType@1000 : 'ColumnFormula,RowFormula,Data';
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestDrillDown(
        AnalysisReportChartSetup."Base X-Axis on"::Line,LibraryRandom.RandIntInRange(1,5) - 1,0,TestDrillDownType::Data);
    END;

    [Test]
    [HandlerFunctions(MsgHandler)]
    PROCEDURE TestAction_DrillDown_ColumnFormula_Column@141();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
      TestDrillDownType@1000 : 'ColumnFormula,RowFormula,Data';
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestDrillDown(
        AnalysisReportChartSetup."Base X-Axis on"::Column,LibraryRandom.RandIntInRange(1,5) - 1,0,
        TestDrillDownType::ColumnFormula);
    END;

    [Test]
    [HandlerFunctions(MsgHandler)]
    PROCEDURE TestAction_DrillDown_RowFormula_Column@140();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
      TestDrillDownType@1000 : 'ColumnFormula,RowFormula,Data';
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestDrillDown(
        AnalysisReportChartSetup."Base X-Axis on"::Column,LibraryRandom.RandIntInRange(1,5) - 1,0,
        TestDrillDownType::RowFormula);
    END;

    [Test]
    [HandlerFunctions(ValueEntriesHandler)]
    PROCEDURE TestAction_DrillDown_Data_Column@139();
    VAR
      AnalysisReportChartSetup@1001 : Record 770;
      TestDrillDownType@1000 : 'ColumnFormula,RowFormula,Data';
    BEGIN
      Initialize;
      AnalysisReportChartSetup.INIT;

      TestDrillDown(
        AnalysisReportChartSetup."Base X-Axis on"::Column,LibraryRandom.RandIntInRange(1,5) - 1,0,TestDrillDownType::Data);
    END;

    [Test]
    [HandlerFunctions(AnalysisReportChartMatrixHandler)]
    PROCEDURE NoErrorForReportChartWithMoreThan12Columns@28();
    VAR
      AnalysisColumnTemplate@1000 : Record 7116;
      AnalysisColumn@1001 : Record 7118;
      AnalysisReportChartSetup@1003 : Record 770;
      AnalysisLine@1005 : Record 7114;
      AnalysisLineTemplate@1006 : Record 7112;
      AnalysisReportChartMatrix@1004 : Page 776;
      AnalysisArea@1008 : Integer;
      Counter@1002 : Integer;
      MaxNumberOfMatrixColumns@1007 : Integer;
    BEGIN
      // [SCENARIO 379113] There should be no "Index out of bounds" error if Analysis Report Chart Setup uses Analysis Column Template with more than 12 columns

      Initialize;

      // [GIVEN] Max Number Of Matrix Columns is 12
      MaxNumberOfMatrixColumns := 12;

      // [GIVEN] Created Analysis Report Chart Setup using Analysis Column Template with 13 columns
      AnalysisArea := 0;
      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,AnalysisArea);

      FOR Counter := 1 TO MaxNumberOfMatrixColumns + 1 DO BEGIN
        LibraryInventory.CreateAnalysisColumn(AnalysisColumn,AnalysisArea,AnalysisColumnTemplate.Name);
        AnalysisColumn.VALIDATE("Column No.",FORMAT(Counter * 10000));
        AnalysisColumn.VALIDATE("Column Header",FORMAT(Counter));
        AnalysisColumn.MODIFY;
      END;

      LibraryInventory.CreateAnalysisLineTemplate(AnalysisLineTemplate,AnalysisColumnTemplate."Analysis Area");

      LibraryInventory.CreateAnalysisLine(AnalysisLine,AnalysisColumnTemplate."Analysis Area",AnalysisLineTemplate.Name);
      AnalysisLine."Line No." := 10000;
      AnalysisLine.MODIFY;

      AnalysisReportChartSetup."Analysis Column Template Name" := AnalysisColumnTemplate.Name;
      AnalysisReportChartSetup."Analysis Line Template Name" := AnalysisLine."Analysis Line Template Name";
      AnalysisReportChartSetup."Analysis Area" := AnalysisColumnTemplate."Analysis Area";
      AnalysisReportChartSetup."Base X-Axis on" := AnalysisReportChartSetup."Base X-Axis on"::Period;
      AnalysisReportChartSetup.INSERT;

      FOR Counter := 1 TO MaxNumberOfMatrixColumns + 1 DO
        CreateOnePerfIndSetupLine(AnalysisReportChartSetup,AnalysisLine."Line No.",Counter * 10000,'','',AnalysisArea);

      // [WHEN] Open Analysis Report Chart Matrix on created Analysis Report Chart Setup
      AnalysisReportChartMatrix.SetFilters(AnalysisReportChartSetup);
      AnalysisReportChartMatrix.RUN;

      // [THEN] No 'Index out of bounds error" appears
      // Check done in AnalysisReportChartMatrixHandler
    END;

    LOCAL PROCEDURE TestChart@6(ShowPer@1010 : Option;PeriodLength@1009 : Option;NoOfPeriods@1006 : Integer);
    VAR
      AnalysisReportChartSetup@1011 : Record 770;
      AnalysisLine@1003 : Record 7114;
      AnalysisColumn@1002 : Record 7118;
      BusinessChartBuffer@1012 : Record 485;
      StartDate@1007 : Date;
      EndDate@1008 : Date;
    BEGIN
      SetupStartAndEndDates(StartDate,EndDate,ShowPer,PeriodLength,NoOfPeriods);

      SetupChart2ItemAndTotalLines2Cols(
        AnalysisReportChartSetup,AnalysisLine,AnalysisColumn,ShowPer,PeriodLength,StartDate,EndDate,NoOfPeriods);

      RunChart(BusinessChartBuffer,AnalysisReportChartSetup,0);
      VerifyChart2ItemAndTotalLines2Cols(AnalysisReportChartSetup,BusinessChartBuffer,AnalysisLine,AnalysisColumn,StartDate,EndDate);
    END;

    LOCAL PROCEDURE TestAction_ChangePeriod@20(ShowPer@1010 : Option;PeriodLength@1009 : Option;NoOfPeriods@1006 : Integer;NewPeriodLength@1013 : Option);
    VAR
      AnalysisReportChartSetup@1011 : Record 770;
      AnalysisLine@1003 : Record 7114;
      AnalysisColumn@1002 : Record 7118;
      BusinessChartBuffer@1012 : Record 485;
      StartDate@1007 : Date;
      EndDate@1008 : Date;
    BEGIN
      SetupStartAndEndDates(StartDate,EndDate,ShowPer,PeriodLength,NoOfPeriods);

      SetupChart2ItemAndTotalLines2Cols(
        AnalysisReportChartSetup,AnalysisLine,AnalysisColumn,ShowPer,PeriodLength,StartDate,EndDate,NoOfPeriods);

      RunChart(BusinessChartBuffer,AnalysisReportChartSetup,0);
      VerifyChart2ItemAndTotalLines2Cols(AnalysisReportChartSetup,BusinessChartBuffer,AnalysisLine,AnalysisColumn,StartDate,EndDate);

      AnalysisReportChartSetup."Period Length" := NewPeriodLength;
      AnalysisReportChartSetup.MODIFY;
      IF ShowPer = AnalysisReportChartSetup."Base X-Axis on"::Period THEN
        EndDate :=
          CalculatePeriodEndDate(
            CalculateNextDate(StartDate,NoOfPeriods - 1,AnalysisReportChartSetup."Period Length"),
            AnalysisReportChartSetup."Period Length")
      ELSE BEGIN
        StartDate := CalculatePeriodStartDate(EndDate,AnalysisReportChartSetup."Period Length");
        EndDate := CalculatePeriodEndDate(EndDate,AnalysisReportChartSetup."Period Length");
      END;

      RunChart(BusinessChartBuffer,AnalysisReportChartSetup,0);
      VerifyChart2ItemAndTotalLines2Cols(AnalysisReportChartSetup,BusinessChartBuffer,AnalysisLine,AnalysisColumn,StartDate,EndDate);
    END;

    LOCAL PROCEDURE TestAction_MovePeriod@38(ShowPer@1010 : Option;PeriodLength@1009 : Option;NoOfPeriods@1006 : Integer;PeriodToCheck@1000 : Option);
    VAR
      AnalysisReportChartSetup@1011 : Record 770;
      AnalysisLine@1003 : Record 7114;
      AnalysisColumn@1002 : Record 7118;
      BusinessChartBuffer@1012 : Record 485;
      StartDate@1007 : Date;
      EndDate@1008 : Date;
    BEGIN
      SetupStartAndEndDates(StartDate,EndDate,ShowPer,PeriodLength,NoOfPeriods);

      SetupChart2ItemAndTotalLines2Cols(
        AnalysisReportChartSetup,AnalysisLine,AnalysisColumn,ShowPer,PeriodLength,StartDate,EndDate,NoOfPeriods);

      RunChart(BusinessChartBuffer,AnalysisReportChartSetup,0);
      VerifyChart2ItemAndTotalLines2Cols(AnalysisReportChartSetup,BusinessChartBuffer,AnalysisLine,AnalysisColumn,StartDate,EndDate);

      ShiftPeriod(StartDate,EndDate,PeriodToCheck,AnalysisReportChartSetup."Period Length",AnalysisReportChartSetup."Base X-Axis on");

      RunChart(BusinessChartBuffer,AnalysisReportChartSetup,PeriodToCheck);
      VerifyChart2ItemAndTotalLines2Cols(AnalysisReportChartSetup,BusinessChartBuffer,AnalysisLine,AnalysisColumn,StartDate,EndDate);
    END;

    LOCAL PROCEDURE TestDrillDown@56(ShowPer@1010 : Option;PeriodLength@1009 : Option;NoOfPeriods@1006 : Integer;TestDrillDownType@1000 : 'ColumnFormula,RowFormula,Data');
    VAR
      AnalysisReportChartSetup@1011 : Record 770;
      AnalysisLine@1003 : Record 7114;
      AnalysisColumn@1002 : Record 7118;
      BusinessChartBuffer@1012 : Record 485;
      StartDate@1007 : Date;
      EndDate@1008 : Date;
    BEGIN
      SetupStartAndEndDates(StartDate,EndDate,ShowPer,PeriodLength,NoOfPeriods);

      SetupChart2ItemAndTotalLines2Cols(
        AnalysisReportChartSetup,AnalysisLine,AnalysisColumn,ShowPer,PeriodLength,StartDate,EndDate,NoOfPeriods);

      RunChart(BusinessChartBuffer,AnalysisReportChartSetup,0);
      VerifyChart2ItemAndTotalLines2Cols(AnalysisReportChartSetup,BusinessChartBuffer,AnalysisLine,AnalysisColumn,StartDate,EndDate);

      SetupDrillDownData2ItemAndTotalLines2Cols(
        AnalysisReportChartSetup,AnalysisLine,AnalysisColumn,BusinessChartBuffer,TestDrillDownType);

      DrillDownChart(BusinessChartBuffer,AnalysisReportChartSetup);
    END;

    LOCAL PROCEDURE RunChart@15(VAR BusinessChartBuffer@1002 : Record 485;VAR AnalysisReportChartSetup@1001 : Record 770;Period@1000 : Option);
    BEGIN
      AnalysisReportChartMgt.UpdateData(BusinessChartBuffer,AnalysisReportChartSetup,Period);
    END;

    LOCAL PROCEDURE DrillDownChart@11(VAR BusinessChartBuffer@1001 : Record 485;VAR AnalysisReportChartSetup@1002 : Record 770);
    BEGIN
      AnalysisReportChartMgt.DrillDown(BusinessChartBuffer,AnalysisReportChartSetup);
    END;

    LOCAL PROCEDURE VerifyChart2ItemAndTotalLines2Cols@16(VAR AnalysisReportChartSetup@1005 : Record 770;VAR BusinessChartBuffer@1004 : Record 485;VAR AnalysisLine@1003 : Record 7114;VAR AnalysisColumn@1002 : Record 7118;StartDate@1001 : Date;EndDate@1000 : Date);
    VAR
      PeriodFormManagement@1011 : Codeunit 359;
      ActualChartValue@1009 : Variant;
      PeriodStart@1006 : Date;
      PeriodEnd@1007 : Date;
      RowIndex@1008 : Integer;
      MeasureName@1010 : Text[111];
    BEGIN
      CASE AnalysisReportChartSetup."Base X-Axis on" OF
        AnalysisReportChartSetup."Base X-Axis on"::Period:
          BEGIN
            PeriodStart := StartDate;
            PeriodEnd := CalculatePeriodEndDate(PeriodStart,AnalysisReportChartSetup."Period Length");
            RowIndex := 0;
            REPEAT
              CLEAR(ActualChartValue);
              BusinessChartBuffer.GetValue(FORMAT(BusinessChartBuffer."Period Length"),RowIndex,ActualChartValue);
              IF BusinessChartBuffer."Period Length" = BusinessChartBuffer."Period Length"::Day THEN
                Assert.AreEqual(PeriodEnd,DT2DATE(ActualChartValue),STRSUBSTNO(DimensionValueNotEqualERR,RowIndex + 1))
              ELSE
                Assert.AreEqual(
                  PeriodFormManagement.CreatePeriodFormat(BusinessChartBuffer."Period Length",PeriodEnd),ActualChartValue,
                  STRSUBSTNO(DimensionValueNotEqualERR,RowIndex + 1));

              AnalysisLine.FINDSET;
              REPEAT
                AnalysisColumn.FINDSET;
                REPEAT
                  MeasureName := STRSUBSTNO(MeasureTXT,AnalysisLine.Description,AnalysisColumn."Column Header");
                  VerifyChartMeasure(
                    BusinessChartBuffer,AnalysisLine,AnalysisColumn,MeasureName,FORMAT(PeriodEnd),RowIndex,PeriodStart,PeriodEnd);
                UNTIL AnalysisColumn.NEXT = 0;
              UNTIL AnalysisLine.NEXT = 0;
              PeriodStart := PeriodEnd + 1;
              PeriodEnd :=
                CalculatePeriodEndDate(
                  CalculateNextDate(PeriodEnd,1,AnalysisReportChartSetup."Period Length"),AnalysisReportChartSetup."Period Length");
              RowIndex += 1;
            UNTIL PeriodEnd >= EndDate;
          END;
        AnalysisReportChartSetup."Base X-Axis on"::Line:
          BEGIN
            AnalysisLine.FINDSET;
            RowIndex := 0;
            REPEAT
              CLEAR(ActualChartValue);
              BusinessChartBuffer.GetValue(AnalysisLine.FIELDCAPTION(Description),RowIndex,ActualChartValue);
              Assert.AreEqual(AnalysisLine.Description,ActualChartValue,STRSUBSTNO(DimensionValueNotEqualERR,RowIndex + 1));

              AnalysisColumn.FINDSET;
              REPEAT
                MeasureName := AnalysisColumn."Column Header";
                VerifyChartMeasure(
                  BusinessChartBuffer,AnalysisLine,AnalysisColumn,MeasureName,AnalysisLine.Description,RowIndex,StartDate,EndDate);
              UNTIL AnalysisColumn.NEXT = 0;
              RowIndex += 1;
            UNTIL AnalysisLine.NEXT = 0;
          END;
        AnalysisReportChartSetup."Base X-Axis on"::Column:
          BEGIN
            AnalysisColumn.FINDSET;
            RowIndex := 0;
            REPEAT
              CLEAR(ActualChartValue);
              BusinessChartBuffer.GetValue(AnalysisColumn.FIELDCAPTION("Column Header"),RowIndex,ActualChartValue);
              Assert.AreEqual(AnalysisColumn."Column Header",ActualChartValue,STRSUBSTNO(DimensionValueNotEqualERR,RowIndex + 1));

              AnalysisLine.FINDSET;
              REPEAT
                MeasureName := AnalysisLine.Description;
                VerifyChartMeasure(
                  BusinessChartBuffer,AnalysisLine,AnalysisColumn,MeasureName,AnalysisColumn."Column Header",RowIndex,StartDate,
                  EndDate);
              UNTIL AnalysisLine.NEXT = 0;
              RowIndex += 1;
            UNTIL AnalysisColumn.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE VerifyChartMeasure@72(VAR BusinessChartBuffer@1001 : Record 485;VAR AnalysisLine@1009 : Record 7114;VAR AnalysisColumn@1008 : Record 7118;MeasureName@1002 : Text[111];DimensionValue@1011 : Text[80];RowIndex@1003 : Integer;PeriodStart@1004 : Date;PeriodEnd@1005 : Date);
    VAR
      CalcAnalysisLine@1006 : Record 7114;
      CalcAnalysisColumn@1007 : Record 7118;
      AnalysisReportMgt@1010 : Codeunit 7110;
      ActualChartValue@1000 : Variant;
    BEGIN
      CLEAR(ActualChartValue);
      BusinessChartBuffer.GetValue(MeasureName,RowIndex,ActualChartValue);
      CalcAnalysisLine.SETRANGE("Date Filter",PeriodStart,PeriodEnd);
      CalcAnalysisLine.GET(AnalysisLine."Analysis Area",AnalysisLine."Analysis Line Template Name",AnalysisLine."Line No.");
      CalcAnalysisColumn.GET(AnalysisColumn."Analysis Area",AnalysisColumn."Analysis Column Template",AnalysisColumn."Line No.");
      Assert.AreEqual(AnalysisReportMgt.CalcCell(CalcAnalysisLine,CalcAnalysisColumn,FALSE),ActualChartValue,
        STRSUBSTNO(AmountNotEqualERR,MeasureName,DimensionValue) + FORMAT(RowIndex) + STRSUBSTNO('|%1..%2',PeriodStart,PeriodEnd));
    END;

    LOCAL PROCEDURE SetupChart2ItemAndTotalLines2Cols@25(VAR AnalysisReportChartSetup@1007 : Record 770;VAR AnalysisLine@1006 : Record 7114;VAR AnalysisColumn@1005 : Record 7118;ShowPer@1004 : Option;PeriodLength@1003 : Option;StartDate@1002 : Date;EndDate@1001 : Date;NoOfPeriods@1000 : Integer);
    VAR
      ItemLedgerEntry@1011 : Record 32;
      ValueEntry@1010 : Record 5802;
      AnalysisReportName@1009 : Code[10];
      ItemNo@1012 : Code[20];
      AnalysisArea@1008 : Option;
    BEGIN
      AnalysisArea := 0;
      SetupAnalysisReport2ItemAndTotalLines2Cols(AnalysisLine,AnalysisColumn,AnalysisArea,AnalysisColumn."Value Type"::"Sales Amount");
      AnalysisReportName := '';
      SetupChartParam(
        AnalysisReportChartSetup,AnalysisLine,AnalysisColumn,AnalysisReportName,AnalysisArea,ShowPer,PeriodLength,StartDate,EndDate,
        NoOfPeriods);
      IF ShowPer = AnalysisReportChartSetup."Base X-Axis on"::Period THEN
        EndDate :=
          CalculatePeriodEndDate(
            CalculateNextDate(StartDate,NoOfPeriods - 1,AnalysisReportChartSetup."Period Length"),
            AnalysisReportChartSetup."Period Length");
      AnalysisLine.FINDSET;
      ItemNo := COPYSTR(AnalysisLine.Range,1,20);
      SetupItemEntries(ItemLedgerEntry,ValueEntry,ItemNo,StartDate,EndDate,PeriodLength,ItemLedgerEntry."Entry Type"::Sale);
      AnalysisLine.NEXT;
      ItemNo := COPYSTR(AnalysisLine.Range,1,20);
      SetupItemEntries(ItemLedgerEntry,ValueEntry,ItemNo,StartDate,EndDate,PeriodLength,ItemLedgerEntry."Entry Type"::Sale);
    END;

    LOCAL PROCEDURE SetupChartParam@32(VAR AnalysisReportChartSetup@1000 : Record 770;VAR AnalysisLine@1003 : Record 7114;VAR AnalysisColumn@1001 : Record 7118;AnalysisReportName@1009 : Code[10];AnalysisArea@1008 : Option;ShowPer@1002 : Option;PeriodLength@1006 : Option;StartDate@1004 : Date;EndDate@1005 : Date;NoOfPeriods@1007 : Integer);
    BEGIN
      CLEAR(AnalysisReportChartSetup);
      AnalysisReportChartSetup."User ID" := USERID;
      AnalysisReportChartSetup.Name :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(AnalysisReportChartSetup.FIELDNO(Name),DATABASE::"Analysis Report Chart Setup"),1,
          MAXSTRLEN(AnalysisReportChartSetup.Name));
      AnalysisReportChartSetup."Analysis Area" := AnalysisArea;
      AnalysisReportChartSetup."Analysis Report Name" := AnalysisReportName;
      AnalysisReportChartSetup."Analysis Line Template Name" := AnalysisLine."Analysis Line Template Name";
      AnalysisReportChartSetup."Analysis Column Template Name" := AnalysisColumn."Analysis Column Template";
      AnalysisReportChartSetup."Base X-Axis on" := ShowPer;
      AnalysisReportChartSetup."Period Length" := PeriodLength;
      AnalysisReportChartSetup."Start Date" := StartDate;
      IF AnalysisReportChartSetup."Base X-Axis on" = AnalysisReportChartSetup."Base X-Axis on"::Period THEN
        AnalysisReportChartSetup."No. of Periods" := NoOfPeriods
      ELSE
        AnalysisReportChartSetup."End Date" := EndDate;
      AnalysisReportChartSetup.INSERT;

      CreatePerfIndSetupLines(AnalysisReportChartSetup,AnalysisLine,AnalysisColumn);
    END;

    LOCAL PROCEDURE CreatePerfIndSetupLines@36(VAR AnalysisReportChartSetup@1002 : Record 770;VAR AnalysisLine@1001 : Record 7114;VAR AnalysisColumn@1000 : Record 7118);
    VAR
      MeasureName@1003 : Text[111];
    BEGIN
      AnalysisLine.FINDSET;
      CASE AnalysisReportChartSetup."Base X-Axis on" OF
        AnalysisReportChartSetup."Base X-Axis on"::Period:
          REPEAT
            AnalysisColumn.FINDSET;
            REPEAT
              MeasureName := STRSUBSTNO(MeasureTXT,AnalysisLine.Description,AnalysisColumn."Column Header");
              CreateOnePerfIndSetupLine(AnalysisReportChartSetup,AnalysisLine."Line No.",AnalysisColumn."Line No.",MeasureName,
                FORMAT(AnalysisLine."Line No.") + ' ' + FORMAT(AnalysisColumn."Line No."),LibraryRandom.RandIntInRange(1,3));
            UNTIL AnalysisColumn.NEXT = 0;
          UNTIL AnalysisLine.NEXT = 0;
        AnalysisReportChartSetup."Base X-Axis on"::Line,
        AnalysisReportChartSetup."Base X-Axis on"::Column:
          BEGIN
            REPEAT
              MeasureName := AnalysisLine.Description;
              CreateOnePerfIndSetupLine(
                AnalysisReportChartSetup,AnalysisLine."Line No.",0,MeasureName,FORMAT(AnalysisLine."Line No."),
                LibraryRandom.RandIntInRange(1,3));
            UNTIL AnalysisLine.NEXT = 0;
            AnalysisColumn.FINDSET;
            REPEAT
              MeasureName := AnalysisColumn."Column Header";
              CreateOnePerfIndSetupLine(
                AnalysisReportChartSetup,0,AnalysisColumn."Line No.",AnalysisColumn."Column Header",
                FORMAT(AnalysisColumn."Line No."),LibraryRandom.RandIntInRange(1,3));
            UNTIL AnalysisColumn.NEXT = 0;
          END;
      END;
    END;

    LOCAL PROCEDURE CreateOnePerfIndSetupLine@52(VAR AnalysisReportChartSetup@1004 : Record 770;AnalysisLineNo@1001 : Integer;AnalysisColumnNo@1003 : Integer;MeasureName@1006 : Text[111];MeasureValue@1007 : Text[30];ChartType@1002 : Option);
    VAR
      AnalysisReportChartLine@1000 : Record 771;
    BEGIN
      AnalysisReportChartLine.INIT;
      AnalysisReportChartLine."User ID" := AnalysisReportChartSetup."User ID";
      AnalysisReportChartLine."Analysis Area" := AnalysisReportChartSetup."Analysis Area";
      AnalysisReportChartLine.Name := AnalysisReportChartSetup.Name;
      AnalysisReportChartLine."Analysis Line Line No." := AnalysisLineNo;
      AnalysisReportChartLine."Analysis Column Line No." := AnalysisColumnNo;
      AnalysisReportChartLine."Analysis Line Template Name" := AnalysisReportChartSetup."Analysis Line Template Name";
      AnalysisReportChartLine."Analysis Column Template Name" := AnalysisReportChartSetup."Analysis Column Template Name";
      AnalysisReportChartLine."Original Measure Name" := MeasureName;
      AnalysisReportChartLine."Measure Name" := MeasureName;
      AnalysisReportChartLine."Measure Value" := MeasureValue;
      AnalysisReportChartLine."Chart Type" := ChartType;
      AnalysisReportChartLine.INSERT;
    END;

    LOCAL PROCEDURE SetupAnalysisReport2ItemAndTotalLines2Cols@1(VAR AnalysisLine@1003 : Record 7114;VAR AnalysisColumn@1004 : Record 7118;AnalysisArea@1002 : Option;ColumnValueType@1005 : Option);
    VAR
      AnalysisReportName@1001 : Record 7111;
    BEGIN
      CreateAnalysisLineTempl2ItemAndTotal(AnalysisLine,AnalysisArea);
      CreateAnalysisColTempl2Cols(AnalysisColumn,AnalysisArea,ColumnValueType);
      LibraryInventory.CreateAnalysisReportName(AnalysisReportName,AnalysisArea);
      AnalysisReportName.VALIDATE("Analysis Line Template Name",AnalysisLine."Analysis Line Template Name");
      AnalysisReportName.VALIDATE("Analysis Column Template Name",AnalysisColumn."Analysis Column Template");
      AnalysisReportName.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAnalysisLineTempl2ItemAndTotal@2(VAR AnalysisLine@1002 : Record 7114;AnalysisArea@1003 : Option);
    VAR
      AnalysisLineTemplate@1000 : Record 7112;
      TotalFormula@1001 : Text[250];
    BEGIN
      LibraryInventory.CreateAnalysisLineTemplate(AnalysisLineTemplate,AnalysisArea);

      CreateAnalysisLine(AnalysisLine,AnalysisArea,AnalysisLineTemplate.Name);
      TotalFormula := AnalysisLine."Row Ref. No.";

      CreateAnalysisLine(AnalysisLine,AnalysisArea,AnalysisLineTemplate.Name);
      TotalFormula += '|' + AnalysisLine."Row Ref. No.";

      LibraryInventory.CreateAnalysisLine(AnalysisLine,AnalysisArea,AnalysisLineTemplate.Name);
      AnalysisLine.VALIDATE("Row Ref. No.",FORMAT(LibraryRandom.RandInt(100)));
      AnalysisLine.VALIDATE(
        Description,COPYSTR(LibraryUtility.GenerateRandomCode(AnalysisLine.FIELDNO(Description),DATABASE::"Analysis Line"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Analysis Line",AnalysisLine.FIELDNO(Description))));
      AnalysisLine.VALIDATE(Type,AnalysisLine.Type::Formula);
      AnalysisLine.VALIDATE(Range,TotalFormula);
      AnalysisLine.MODIFY(TRUE);

      AnalysisLine.SETRANGE("Analysis Area",AnalysisArea);
      AnalysisLine.SETRANGE("Analysis Line Template Name",AnalysisLineTemplate.Name);
      AnalysisLine.FINDSET;
    END;

    LOCAL PROCEDURE CreateAnalysisLine@8(VAR AnalysisLine@1000 : Record 7114;AnalysisArea@1001 : Option;AnalysisLineTemplateName@1002 : Code[10]);
    BEGIN
      LibraryInventory.CreateAnalysisLine(AnalysisLine,AnalysisArea,AnalysisLineTemplateName);
      AnalysisLine.VALIDATE("Row Ref. No.",FORMAT(LibraryRandom.RandInt(100)));
      AnalysisLine.VALIDATE(
        Description,COPYSTR(LibraryUtility.GenerateRandomCode(AnalysisLine.FIELDNO(Description),DATABASE::"Analysis Line"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Analysis Line",AnalysisLine.FIELDNO(Description))));
      AnalysisLine.VALIDATE(Type,AnalysisLine.Type::Item);
      AnalysisLine.VALIDATE(Range,LibraryInventory.CreateItemNo);
      AnalysisLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAnalysisColTempl2Cols@3(VAR AnalysisColumn@1002 : Record 7118;AnalysisArea@1001 : Option;FirstColValueType@1004 : Option);
    VAR
      AnalysisColumnTemplate@1000 : Record 7116;
      ColumnFormula@1003 : Code[80];
    BEGIN
      LibraryInventory.CreateAnalysisColumnTemplate(AnalysisColumnTemplate,AnalysisArea);

      LibraryInventory.CreateAnalysisColumn(AnalysisColumn,AnalysisArea,AnalysisColumnTemplate.Name);
      AnalysisColumn.VALIDATE("Column No.",FORMAT(LibraryRandom.RandInt(100)));
      AnalysisColumn.VALIDATE(
        "Column Header",COPYSTR(LibraryUtility.GenerateRandomCode(AnalysisColumn.FIELDNO("Column Header"),DATABASE::"Analysis Column"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Analysis Column",AnalysisColumn.FIELDNO("Column Header"))));
      AnalysisColumn.VALIDATE("Column Type",AnalysisColumn."Column Type"::"Net Change");
      AnalysisColumn.VALIDATE("Ledger Entry Type",AnalysisColumn."Ledger Entry Type"::"Item Entries");
      AnalysisColumn.VALIDATE("Value Type",FirstColValueType);
      AnalysisColumn.VALIDATE(Invoiced,TRUE);
      AnalysisColumn.MODIFY(TRUE);

      ColumnFormula := '-' + AnalysisColumn."Column No.";
      LibraryInventory.CreateAnalysisColumn(AnalysisColumn,AnalysisArea,AnalysisColumnTemplate.Name);
      AnalysisColumn.VALIDATE("Column No.",FORMAT(LibraryRandom.RandInt(100)));
      AnalysisColumn.VALIDATE(
        "Column Header",COPYSTR(LibraryUtility.GenerateRandomCode(AnalysisColumn.FIELDNO("Column Header"),DATABASE::"Analysis Column"),
          1,LibraryUtility.GetFieldLength(DATABASE::"Analysis Column",AnalysisColumn.FIELDNO("Column Header"))));
      AnalysisColumn.VALIDATE("Column Type",AnalysisColumn."Column Type"::Formula);
      AnalysisColumn.VALIDATE(Formula,ColumnFormula);
      AnalysisColumn.MODIFY(TRUE);

      AnalysisColumn.SETRANGE("Analysis Area",AnalysisArea);
      AnalysisColumn.SETRANGE("Analysis Column Template",AnalysisColumnTemplate.Name);
      AnalysisColumn.FINDSET;
    END;

    LOCAL PROCEDURE SetupItemEntries@7(VAR ItemLedgerEntry@1005 : Record 32;VAR ValueEntry@1009 : Record 5802;ItemNo@1004 : Code[20];StartingDate@1002 : Date;EndingDate@1001 : Date;PeriodLength@1000 : Option;ILEEntryType@1007 : Option);
    VAR
      PostingDate@1003 : Date;
      ItemLedgerEntryNo@1006 : Integer;
      ValueEntryNo@1008 : Integer;
    BEGIN
      PostingDate := StartingDate;

      IF ItemLedgerEntry.FINDLAST THEN
        ItemLedgerEntryNo := ItemLedgerEntry."Entry No.";

      IF ValueEntry.FINDLAST THEN
        ValueEntryNo := ValueEntry."Entry No.";

      REPEAT
        ItemLedgerEntryNo += 1;
        ValueEntryNo += 1;
        CreateItemLedgerEntry(
          ItemLedgerEntry,ItemLedgerEntryNo,PostingDate,ItemNo,LibraryRandom.RandDecInDecimalRange(1,100,2),ILEEntryType);
        CreateValueEntry(
          ValueEntry,ItemLedgerEntry,ValueEntryNo,LibraryRandom.RandDecInDecimalRange(1,100,2),
          LibraryRandom.RandDecInDecimalRange(1,100,2));
        PostingDate := CalculateNextDate(PostingDate,1,PeriodLength);
      UNTIL PostingDate > EndingDate;
    END;

    LOCAL PROCEDURE CreateItemLedgerEntry@9(VAR ItemLedgerEntry@1000 : Record 32;EntryNo@1004 : Integer;PostingDate@1001 : Date;ItemNo@1002 : Code[20];Quantity@1003 : Decimal;ILEEntryType@1005 : Option);
    BEGIN
      CLEAR(ItemLedgerEntry);
      ItemLedgerEntry."Entry No." := EntryNo;
      ItemLedgerEntry."Item No." := ItemNo;
      ItemLedgerEntry."Posting Date" := PostingDate;
      ItemLedgerEntry."Entry Type" := ILEEntryType;
      ItemLedgerEntry.Quantity := Quantity;
      ItemLedgerEntry.INSERT;
    END;

    LOCAL PROCEDURE CreateValueEntry@12(VAR ValueEntry@1000 : Record 5802;VAR ItemLedgerEntry@1001 : Record 32;EntryNo@1004 : Integer;CostAmount@1002 : Decimal;SalesAmount@1003 : Decimal);
    BEGIN
      CLEAR(ValueEntry);
      ValueEntry."Entry No." := EntryNo;
      ValueEntry."Item No." := ItemLedgerEntry."Item No.";
      ValueEntry."Posting Date" := ItemLedgerEntry."Posting Date";
      ValueEntry."Entry Type" := ValueEntry."Entry Type"::"Direct Cost";
      ValueEntry."Item Ledger Entry Type" := ItemLedgerEntry."Entry Type";
      ValueEntry."Item Ledger Entry No." := ItemLedgerEntry."Entry No.";
      ValueEntry."Cost Amount (Actual)" := CostAmount;
      ValueEntry."Sales Amount (Actual)" := SalesAmount;
      ValueEntry.INSERT;
    END;

    LOCAL PROCEDURE SetupStartAndEndDates@75(VAR StartDate@1000 : Date;VAR EndDate@1001 : Date;ShowPer@1003 : 'Period,Acc. Sched. Line,Acc. Sched. Column';PeriodLength@1004 : Option;NoOfPeriods@1002 : Integer);
    BEGIN
      StartDate := WORKDATE;

      IF ShowPer = ShowPer::Period THEN
        EndDate := CalculatePeriodEndDate(CalculateNextDate(StartDate,NoOfPeriods - 1,PeriodLength),PeriodLength)
      ELSE
        EndDate := CALCDATE(STRSUBSTNO('<%1D>',LibraryRandom.RandIntInRange(100,200)),WORKDATE);
    END;

    LOCAL PROCEDURE SetupDrillDownData2ItemAndTotalLines2Cols@57(VAR AnalysisReportChartSetup@1003 : Record 770;VAR AnalysisLine@1002 : Record 7114;VAR AnalysisColumn@1001 : Record 7118;VAR BusinessChartBuffer@1000 : Record 485;TestDrillDownType@1004 : 'ColumnFormula,RowFormula,Data');
    VAR
      FromDate@1005 : Date;
      ToDate@1006 : Date;
      NoOfLines@1007 : Integer;
      NoOfColumns@1008 : Integer;
      LineIndex@1009 : Integer;
      ColumnIndex@1010 : Integer;
    BEGIN
      NoOfLines := AnalysisLine.COUNT;
      NoOfColumns := AnalysisColumn.COUNT;

      CASE AnalysisReportChartSetup."Base X-Axis on" OF
        AnalysisReportChartSetup."Base X-Axis on"::Period:
          BEGIN
            BusinessChartBuffer."Drill-Down X Index" :=
              LibraryRandom.RandIntInRange(1,AnalysisReportChartSetup."No. of Periods") - 1;
            ToDate := BusinessChartBuffer.GetXValueAsDate(BusinessChartBuffer."Drill-Down X Index");
            FromDate := BusinessChartBuffer.CalcFromDate(ToDate);
            CASE TestDrillDownType OF
              TestDrillDownType::ColumnFormula:
                BEGIN
                  BusinessChartBuffer."Drill-Down Measure Index" := LibraryRandom.RandIntInRange(1,NoOfLines) *
                    NoOfColumns - 1;
                  AnalysisColumn.FINDLAST;
                END;
              TestDrillDownType::RowFormula:
                BEGIN
                  BusinessChartBuffer."Drill-Down Measure Index" :=
                    (NoOfLines - 1) * NoOfColumns + LibraryRandom.RandIntInRange(0,NoOfColumns - 2);
                  AnalysisLine.FINDLAST;
                  AnalysisColumn.FINDFIRST;
                END;
              TestDrillDownType::Data:
                BEGIN
                  LineIndex := LibraryRandom.RandIntInRange(0,NoOfLines - 2);
                  ColumnIndex := LibraryRandom.RandIntInRange(0,NoOfColumns - 2);
                  BusinessChartBuffer."Drill-Down Measure Index" := LineIndex * NoOfColumns + ColumnIndex;
                  AnalysisLine.FINDSET;
                  AnalysisLine.NEXT(LineIndex);
                  AnalysisColumn.FINDSET;
                  AnalysisColumn.NEXT(ColumnIndex);
                END;
            END;
          END;
        AnalysisReportChartSetup."Base X-Axis on"::Line:
          BEGIN
            FromDate := AnalysisReportChartSetup."Start Date";
            ToDate := AnalysisReportChartSetup."End Date";
            CASE TestDrillDownType OF
              TestDrillDownType::ColumnFormula:
                BEGIN
                  BusinessChartBuffer."Drill-Down X Index" := LibraryRandom.RandIntInRange(1,NoOfLines) - 1;
                  BusinessChartBuffer."Drill-Down Measure Index" := NoOfColumns - 1;
                END;
              TestDrillDownType::RowFormula:
                BEGIN
                  BusinessChartBuffer."Drill-Down X Index" := NoOfLines - 1;
                  BusinessChartBuffer."Drill-Down Measure Index" := LibraryRandom.RandIntInRange(0,NoOfColumns - 2);
                END;
              TestDrillDownType::Data:
                BEGIN
                  BusinessChartBuffer."Drill-Down X Index" := LibraryRandom.RandIntInRange(0,NoOfLines - 2);
                  BusinessChartBuffer."Drill-Down Measure Index" := LibraryRandom.RandIntInRange(0,NoOfColumns - 2);
                END;
            END;
            AnalysisLine.FINDSET;
            AnalysisLine.NEXT(BusinessChartBuffer."Drill-Down X Index");
            AnalysisColumn.FINDSET;
            AnalysisColumn.NEXT(BusinessChartBuffer."Drill-Down Measure Index");
          END;
        AnalysisReportChartSetup."Base X-Axis on"::Column:
          BEGIN
            FromDate := AnalysisReportChartSetup."Start Date";
            ToDate := AnalysisReportChartSetup."End Date";
            CASE TestDrillDownType OF
              TestDrillDownType::ColumnFormula:
                BEGIN
                  BusinessChartBuffer."Drill-Down X Index" := NoOfColumns - 1;
                  BusinessChartBuffer."Drill-Down Measure Index" := LibraryRandom.RandIntInRange(1,NoOfLines) - 1;
                END;
              TestDrillDownType::RowFormula:
                BEGIN
                  BusinessChartBuffer."Drill-Down X Index" := LibraryRandom.RandIntInRange(0,NoOfColumns - 2);
                  BusinessChartBuffer."Drill-Down Measure Index" := NoOfLines - 1;
                END;
              TestDrillDownType::Data:
                BEGIN
                  BusinessChartBuffer."Drill-Down X Index" := LibraryRandom.RandIntInRange(0,NoOfColumns - 2);
                  BusinessChartBuffer."Drill-Down Measure Index" := LibraryRandom.RandIntInRange(0,NoOfLines - 2);
                END;
            END;
            AnalysisLine.FINDSET;
            AnalysisLine.NEXT(BusinessChartBuffer."Drill-Down Measure Index");
            AnalysisColumn.FINDSET;
            AnalysisColumn.NEXT(BusinessChartBuffer."Drill-Down X Index");
          END;
      END;

      CLEAR(DrillDownAnalysisLine);
      CLEAR(DrillDownAnalysisColumn);
      CLEAR(DrillDownValueEntry);

      DrillDownAnalysisLine := AnalysisLine;
      DrillDownAnalysisColumn := AnalysisColumn;

      DrillDownValueEntry.SETRANGE("Item No.",AnalysisLine.Range);
      DrillDownValueEntry.SETRANGE("Posting Date",FromDate,ToDate);
    END;

    LOCAL PROCEDURE CalculateNextDate@40(StartDate@1000 : Date;NoOfPeriods@1001 : Integer;PeriodLength@1002 : 'Day,Week,Month,Quarter,Year') : Date;
    BEGIN
      EXIT(CALCDATE(STRSUBSTNO('<%1%2>',NoOfPeriods,GetPeriodString(PeriodLength)),StartDate));
    END;

    LOCAL PROCEDURE CalculatePeriodStartDate@59(PeriodDate@1002 : Date;PeriodLength@1000 : 'Day,Week,Month,Quarter,Year') : Date;
    BEGIN
      CASE PeriodLength OF
        PeriodLength::Day:
          EXIT(PeriodDate);
        PeriodLength::Week,
        PeriodLength::Month,
        PeriodLength::Quarter,
        PeriodLength::Year:
          EXIT(CALCDATE(STRSUBSTNO('<-C%1>',GetPeriodString(PeriodLength)),PeriodDate));
      END;
    END;

    LOCAL PROCEDURE CalculatePeriodEndDate@50(PeriodDate@1002 : Date;PeriodLength@1000 : 'Day,Week,Month,Quarter,Year') : Date;
    BEGIN
      CASE PeriodLength OF
        PeriodLength::Day:
          EXIT(PeriodDate);
        PeriodLength::Week,
        PeriodLength::Month,
        PeriodLength::Quarter,
        PeriodLength::Year:
          EXIT(CALCDATE(STRSUBSTNO('<C%1>',GetPeriodString(PeriodLength)),PeriodDate));
      END;
    END;

    LOCAL PROCEDURE ShiftPeriod@13(VAR StartDate@1000 : Date;VAR EndDate@1001 : Date;PeriodToCheck@1002 : ' ,Next,Previous';PeriodLength@1003 : 'Day,Week,Month,Quarter,Year';ShowPer@1005 : 'Period,Line,Column');
    VAR
      PeriodIncrement@1004 : Integer;
    BEGIN
      IF PeriodToCheck = PeriodToCheck::" " THEN
        EXIT;

      IF PeriodToCheck = PeriodToCheck::Next THEN
        PeriodIncrement := 1
      ELSE
        PeriodIncrement := -1;

      IF ShowPer = ShowPer::Period THEN
        StartDate := CalculatePeriodStartDate(CalculateNextDate(StartDate,PeriodIncrement,PeriodLength),PeriodLength)
      ELSE
        StartDate := CalculatePeriodStartDate(CalculateNextDate(EndDate,PeriodIncrement,PeriodLength),PeriodLength);
      EndDate := CalculatePeriodEndDate(CalculateNextDate(EndDate,PeriodIncrement,PeriodLength),PeriodLength);
    END;

    LOCAL PROCEDURE GetPeriodString@43(PeriodLength@1000 : 'Day,Week,Month,Quarter,Year') : Text[1];
    BEGIN
      CASE PeriodLength OF
        PeriodLength::Day:
          EXIT('D');
        PeriodLength::Week:
          EXIT('W');
        PeriodLength::Month:
          EXIT('M');
        PeriodLength::Quarter:
          EXIT('Q');
        PeriodLength::Year:
          EXIT('Y');
      END;
    END;

    [MessageHandler]
    PROCEDURE MsgHandler@58(Message@1000 : Text[1024]);
    BEGIN
      IF DrillDownAnalysisColumn."Column Type" = DrillDownAnalysisColumn."Column Type"::Formula THEN
        Assert.AreEqual(
          STRSUBSTNO(ColFormulaMSG,DrillDownAnalysisColumn.Formula),Message,
          STRSUBSTNO(FormulaDrillDownERR,DrillDownAnalysisColumn.TABLECAPTION))
      ELSE
        IF DrillDownAnalysisLine.Type = DrillDownAnalysisLine.Type::Formula THEN
          Assert.AreEqual(
            STRSUBSTNO(RowFormulaMSG,DrillDownAnalysisLine.Range),Message,
            STRSUBSTNO(FormulaDrillDownERR,DrillDownAnalysisLine.TABLECAPTION));
    END;

    [PageHandler]
    PROCEDURE ValueEntriesHandler@104(VAR ValueEntriesPage@1000 : TestPage 5802);
    VAR
      LineSales@1001 : Decimal;
      TotalSales@1002 : Decimal;
    BEGIN
      DrillDownValueEntry.CALCSUMS(DrillDownValueEntry."Sales Amount (Actual)");
      IF ValueEntriesPage.FIRST THEN
        REPEAT
          IF ValueEntriesPage."Sales Amount (Actual)".VALUE <> '' THEN
            EVALUATE(LineSales,ValueEntriesPage."Sales Amount (Actual)".VALUE);
          TotalSales += LineSales;
        UNTIL NOT ValueEntriesPage.NEXT;
      Assert.AreEqual(DrillDownValueEntry."Sales Amount (Actual)",TotalSales,
        COPYSTR(
          STRSUBSTNO(
            DrillDownValERR,DrillDownAnalysisLine.Description,DrillDownAnalysisColumn."Column Header",
            DrillDownAnalysisLine.GETFILTER("Date Filter")),1,250));
    END;

    [PageHandler]
    PROCEDURE AnalysisReportChartMatrixHandler@37(VAR AnalysisReportChartMatrix@1000 : TestPage 776);
    BEGIN
      AnalysisReportChartMatrix.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Analysis] [Chart] [SCM]
    }
    END.
  }
}

