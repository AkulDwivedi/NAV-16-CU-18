OBJECT Codeunit 136101 Service Orders
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryWarehouse@1005 : Codeunit 132204;
      LibraryERM@1023 : Codeunit 131300;
      LibraryInventory@1021 : Codeunit 132201;
      LibrarySales@1015 : Codeunit 130509;
      LibraryService@1003 : Codeunit 131902;
      LibraryResource@1017 : Codeunit 130511;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryVariableStorage@1041 : Codeunit 131004;
      LibrarySetupStorage@1051 : Codeunit 131009;
      LibrarySmallBusiness@1013 : Codeunit 132213;
      Assert@1002 : Codeunit 130000;
      LibraryRandom@1034 : Codeunit 130440;
      IsInitialized@1009 : Boolean;
      UnknownErr@1027 : TextConst '@@@="%1 = error message";ENU=Unknown error: %1';
      OrderTypeMandatoryTxt@1026 : TextConst '@@@="%1 = doc. type, %2 = doc. no.";ENU="You have not specified the Service Order Type for Service Header Document Type=%1, No.=%2."';
      OrderStartDateServiceTierTxt@1024 : TextConst '@@@="%1 = doc. type, %2 = doc. no.";ENU="Starting Date must have a value in Service Header: Document Type=%1, No.=%2. It cannot be zero or empty."';
      OrderFinishingDateServiceTierTxt@1022 : TextConst '@@@="%1 = doc. type, %2 = doc. no.";ENU="Finishing Date must have a value in Service Header: Document Type=%1, No.=%2. It cannot be zero or empty."';
      FaultReasonCodeServiceTierTxt@1020 : TextConst '@@@="%1 = doc. type, %2 = doc. no.,%3 = line no.";ENU="Fault Reason Code must have a value in Service Item Line: Document Type=%1, Document No.=%2, Line No.=%3. It cannot be zero or empty."';
      SalespersonCodeServiceTierTxt@1018 : TextConst '@@@="%1 = doc. type, %2 = doc. no.";ENU="Salesperson Code must have a value in Service Header: Document Type=%1, No.=%2. It cannot be zero or empty."';
      WorkTypeCodeServiceTierTxt@1016 : TextConst '@@@="%1 = doc. type, %2 = doc. no.,%3=line no.";ENU="Work Type Code must have a value in Service Line: Document Type=%1, Document No.=%2, Line No.=%3. It cannot be zero or empty."';
      UnitOfMeasureServiceTierTxt@1014 : TextConst '@@@="%1 = doc. type, %2 = doc. no.,%3=line no.";ENU="Unit of Measure Code must have a value in Service Line: Document Type=%1, Document No.=%2, Line No.=%3. It cannot be zero or empty."';
      RespTimeServiceTierTxt@1012 : TextConst '@@@="%1 = doc. type, %2 = doc. no.,%3=line no.";ENU="Response Time (Hours) must have a value in Service Contract Line: Contract Type=%1, Contract No.=%2, Line No.=%3. It cannot be zero or empty."';
      CustomerDeletionErr@1011 : TextConst '@@@="%1 = customer no.";ENU=You cannot delete Customer %1 because there is at least one outstanding Service Order for this customer.';
      ServItemDeletionErr@1010 : TextConst '@@@="%1 = item no.";ENU=You cannot delete Service Item %1,because it is attached to a service order.';
      RecordExistErr@1000 : TextConst '@@@="%1=Table name,%2= Field name,%3=Field value";ENU=%1 %2 : %3 must not exist.';
      ServiceItemLineExistErr@1008 : TextConst '@@@="%1 = Service Item Line table name";ENU=%1 must not exist.';
      TotalAmountErr@1028 : TextConst '@@@="%1 = amount,%2 = table name,%3 = field name,%4 = expected value";ENU=Total Amount must be %1 in %2 table for %3 field : %4.';
      GlAccountTotalAmountErr@1035 : TextConst '@@@="%2=G/L Entry;%3=Document No.;%5=G/L Account No.";ENU="Total Amount must be  %1 in %2 table for %3=%4,%5=%6"';
      DiscountAmountErr@1029 : TextConst '@@@="%1 = field name,%2 = value,%3 = table name";ENU=%1 must be %2 in %3.';
      ServiceLineCountErr@1032 : TextConst 'ENU=Service Line count not matched.';
      VATAmountErr@1033 : TextConst '@@@="%1=Field name,%2=Field value,%3=Table name,%4=Field name,%5=Field value,%6=Field value";ENU="%1 must be equal to ''%2''  in %3: %4=%5. Current value is ''%6''."';
      NoOfLinesErr@1031 : TextConst '@@@="%1=Table name,%2=Value";ENU=No. of lines in %1 must be %2.';
      WrongValueErr@1036 : TextConst '@@@="%1=Field Caption,%2=Field Value,%3=Table Caption";ENU=%1 must be %2 in %3.';
      NextInvoicePeriodTxt@1037 : TextConst '@@@="%1 = Starting Date,%2 = Ending Date";ENU=%1 to %2';
      PriceUpdatePeriodErr@1038 : TextConst 'ENU=Price Update Period cannot be less than Invoice Period';
      ServiceItemNoErr@1039 : TextConst 'ENU=Service Item No. must exist on Service Item Line.';
      VendorNoErr@1040 : TextConst 'ENU=Vendor No. must have a value in Service Item Line:';
      ServiceLineErr@1042 : TextConst 'ENU=Service Line must exists with Service Item No. %1.';
      ServiceLineLineNoErr@1048 : TextConst 'ENU="Service Line must exist with %1 value = %2"';
      NoOfEntriesMsg@1043 : TextConst 'ENU=Number of entries must be equal.';
      ServShiptItemLineWrongCountErr@1044 : TextConst 'ENU=Wrong Service Shipment Item Line count.';
      LoanerEntryDoesNotExistErr@1045 : TextConst 'ENU=Loaner Entry does not exist.';
      LoanerEntryExistsErr@1046 : TextConst 'ENU=Loaner Entry exists.';
      LoanerNoIsNotEmptyErr@1047 : TextConst 'ENU=Loaner No. is not empty.';
      ThereIsNotEnoughSpaceToInsertErr@1049 : TextConst 'ENU=There is not enough space to insert %1.';
      CustCheckCrLimitErr@1001 : TextConst 'ENU=The update has been interrupted to respect the warning.';
      CustCheckCrLimitOnceErr@1006 : TextConst '@@@={Locked};ENU=Customer credit limit warning page is called more than once.';
      PostedDocsToPrintCreatedMsg@1007 : TextConst 'ENU=One or more documents have been posted during deletion, which you can print from the related posted document.';

    [Test]
    PROCEDURE ServiceOrderType@57();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceMgtSetup@1001 : Record 5911;
    BEGIN
      // Covers document number TC0117 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test error occurs on Posting Service Order with "Service Order Type Mandatory" True on Service Management Setup.

      // [GIVEN] Set "Service Order Type Mandatory" field True on Service Management Setup.
      Initialize;
      ServiceMgtSetup.GET;
      ServiceMgtSetup.VALIDATE("Service Order Type Mandatory",TRUE);
      ServiceMgtSetup.MODIFY(TRUE);

      // [WHEN] Create Service Order.
      CreateServiceOrder(ServiceHeader,'');

      // [THEN] Verify that the Service Order shows "Service Order Type" Mandatory error when we Post it as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      Assert.AreEqual(
        STRSUBSTNO(OrderTypeMandatoryTxt,ServiceHeader."Document Type",ServiceHeader."No."),ConvertMessage(GETLASTERRORTEXT),
        STRSUBSTNO(UnknownErr,GETLASTERRORTEXT));

      // 4. Teardown: Rollback "Service Order Type Mandatory" field as false on Service Management Setup.
      ServiceMgtSetup.VALIDATE("Service Order Type Mandatory",FALSE);
      ServiceMgtSetup.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE ServiceOrderStart@56();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceMgtSetup@1001 : Record 5911;
    BEGIN
      // Covers document number TC0117 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test error occurs on Posting Service Order with "Service Order Start Mandatory" True on Service Management Setup.

      // [GIVEN] Set "Service Order Start Mandatory" field True on Service Management Setup.
      Initialize;
      ServiceMgtSetup.GET;
      ServiceMgtSetup.VALIDATE("Service Order Start Mandatory",TRUE);
      ServiceMgtSetup.MODIFY(TRUE);

      // [WHEN] Create Service Order.
      CreateServiceOrder(ServiceHeader,'');

      // [THEN] Verify that the Service Order shows "Service Order Starting Date" Mandatory error when we Post it as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      Assert.AreEqual(
        STRSUBSTNO(OrderStartDateServiceTierTxt,ServiceHeader."Document Type",ServiceHeader."No."),ConvertMessage(GETLASTERRORTEXT),
        STRSUBSTNO(UnknownErr,GETLASTERRORTEXT));

      // 4. Teardown: Rollback "Service Order Start Mandatory" field as false on Service Management Setup.
      ServiceMgtSetup.VALIDATE("Service Order Start Mandatory",FALSE);
      ServiceMgtSetup.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE ServiceOrderFinish@55();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceMgtSetup@1001 : Record 5911;
    BEGIN
      // Covers document number TC0117 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test error occurs on Posting Service Order with "Service Order Finish Mandatory" True on Service Management Setup.

      // [GIVEN] Set "Service Order Finish Mandatory" field True on Service Management Setup.
      Initialize;
      ServiceMgtSetup.GET;
      ServiceMgtSetup.VALIDATE("Service Order Finish Mandatory",TRUE);
      ServiceMgtSetup.MODIFY(TRUE);

      // [WHEN] Create Service Order.
      CreateServiceOrder(ServiceHeader,'');

      // [THEN] Verify that the Service Order shows "Service Order Finishing Date" Mandatory error when we Post it as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      Assert.AreEqual(
        STRSUBSTNO(OrderFinishingDateServiceTierTxt,ServiceHeader."Document Type",ServiceHeader."No."),
        ConvertMessage(GETLASTERRORTEXT),STRSUBSTNO(UnknownErr,GETLASTERRORTEXT));

      // 4. Teardown: Rollback "Service Order Finish Mandatory" field as false on Service Management Setup.
      ServiceMgtSetup.VALIDATE("Service Order Finish Mandatory",FALSE);
      ServiceMgtSetup.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE FaultReasonCode@53();
    VAR
      ServiceHeader@1005 : Record 5900;
      ServiceMgtSetup@1004 : Record 5911;
      ServiceItemLineNo@1000 : Integer;
    BEGIN
      // Covers document number TC0117 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test error occurs on Posting Service Order with "Fault Reason Code Mandatory" True on Service Management Setup.

      // [GIVEN] Set "Fault Reason Code Mandatory" field True on Service Management Setup.
      Initialize;
      ServiceMgtSetup.GET;
      ServiceMgtSetup.VALIDATE("Fault Reason Code Mandatory",TRUE);
      ServiceMgtSetup.MODIFY(TRUE);

      // [WHEN] Create Service Order.
      ServiceItemLineNo := CreateServiceOrder(ServiceHeader,'');

      // [THEN] Verify that the Service Order shows "Fault Reason Code" Mandatory error when we Post it as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      Assert.AreEqual(
        STRSUBSTNO(FaultReasonCodeServiceTierTxt,ServiceHeader."Document Type",ServiceHeader."No.",ServiceItemLineNo),
        ConvertMessage(GETLASTERRORTEXT),STRSUBSTNO(UnknownErr,GETLASTERRORTEXT));

      // 4. Teardown: Rollback "Fault Reason Code Mandatory" field as false on Service Management Setup.
      ServiceMgtSetup.VALIDATE("Fault Reason Code Mandatory",FALSE);
      ServiceMgtSetup.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE SalesPersonCode@52();
    VAR
      ServiceHeader@1007 : Record 5900;
      ServiceMgtSetup@1006 : Record 5911;
      ServiceItemLine@1005 : Record 5901;
    BEGIN
      // Covers document number TC0117 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test error occurs on Posting Service Order with "Salesperson Mandatory" True on Service Management Setup.

      // [GIVEN] Set "Salesperson Mandatory" field True on Service Management Setup.
      Initialize;
      ServiceMgtSetup.GET;
      ServiceMgtSetup.VALIDATE("Salesperson Mandatory",TRUE);
      ServiceMgtSetup.MODIFY(TRUE);

      // [WHEN] Create Service Order, Update Salesperson Code on Service Header.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      ServiceHeader.VALIDATE("Salesperson Code",'');
      ServiceHeader.MODIFY(TRUE);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');

      // [THEN] Verify that the Service Order shows "Salesperson" Mandatory error when we Post it as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      Assert.AreEqual(
        STRSUBSTNO(SalespersonCodeServiceTierTxt,ServiceHeader."Document Type",ServiceHeader."No."),ConvertMessage(GETLASTERRORTEXT),
        STRSUBSTNO(UnknownErr,GETLASTERRORTEXT));

      // 4. Teardown: Rollback "Salesperson Mandatory" field as false on Service Management Setup.
      ServiceMgtSetup.VALIDATE("Salesperson Mandatory",FALSE);
      ServiceMgtSetup.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE WorkTypeCode@51();
    VAR
      ServiceHeader@1008 : Record 5900;
      ServiceLine@1007 : Record 5902;
      ServiceMgtSetup@1006 : Record 5911;
      Resource@1005 : Record 156;
      ServiceItemLineNo@1000 : Integer;
    BEGIN
      // Covers document number TC0117 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test error occurs on Posting Service Order with "Work Type Code Mandatory" True on Service Management Setup.

      // [GIVEN] Set "Work Type Code Mandatory" field True on Service Management Setup.
      Initialize;
      ServiceMgtSetup.GET;
      ServiceMgtSetup.VALIDATE("Work Type Code Mandatory",TRUE);
      ServiceMgtSetup.MODIFY(TRUE);

      // [WHEN] Create Service Order.
      ServiceItemLineNo := CreateServiceOrder(ServiceHeader,'');

      LibraryResource.FindResource(Resource);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,Resource."No.");
      UpdateServiceLineWithRandomQtyAndPrice(ServiceLine,ServiceItemLineNo);

      // [THEN] Verify that the Service Order shows "Work Type Code" Mandatory error when we Post it as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      Assert.AreEqual(
        STRSUBSTNO(WorkTypeCodeServiceTierTxt,ServiceHeader."Document Type",ServiceHeader."No.",ServiceLine."Line No."),
        ConvertMessage(GETLASTERRORTEXT),STRSUBSTNO(UnknownErr,GETLASTERRORTEXT));

      // 4. Teardown: Rollback "Work Type Code Mandatory" field as false on Service Management Setup.
      ServiceMgtSetup.VALIDATE("Work Type Code Mandatory",FALSE);
      ServiceMgtSetup.MODIFY(TRUE);
    END;

    [Test]
    PROCEDURE UnitOfMeasureCode@50();
    VAR
      ServiceHeader@1008 : Record 5900;
      ServiceLine@1007 : Record 5902;
      ServiceMgtSetup@1006 : Record 5911;
      ServiceItemLineNo@1000 : Integer;
    BEGIN
      // Covers document number TC0117 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test error occurs on Posting Service Order with "Unit of Measure Mandatory" True on Service Management Setup.

      // [GIVEN] Set "Unit of Measure Mandatory" field True on Service Management Setup, Create Service Order.
      Initialize;
      ServiceMgtSetup.GET;
      ServiceMgtSetup.VALIDATE("Unit of Measure Mandatory",TRUE);
      ServiceMgtSetup.MODIFY(TRUE);
      ServiceItemLineNo := CreateServiceOrder(ServiceHeader,'');
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,'');
      UpdateServiceLineWithRandomQtyAndPrice(ServiceLine,ServiceItemLineNo);

      // [WHEN] Update Unit of Measure Code on Service Line.
      ServiceLine.VALIDATE("Unit of Measure Code",'');
      ServiceLine.MODIFY(TRUE);

      // [THEN] Verify that the Service Order shows "Unit of Measure Code" Mandatory error when we Post it as Ship.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      Assert.AreEqual(
        STRSUBSTNO(UnitOfMeasureServiceTierTxt,ServiceHeader."Document Type",ServiceHeader."No.",ServiceLine."Line No."),
        ConvertMessage(GETLASTERRORTEXT),STRSUBSTNO(UnknownErr,GETLASTERRORTEXT));

      // 4. Teardown: Rollback "Unit of Measure Mandatory" field as false on Service Management Setup.
      ServiceMgtSetup.VALIDATE("Unit of Measure Mandatory",FALSE);
      ServiceMgtSetup.MODIFY(TRUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandlerForFalse)]
    PROCEDURE ContractResponseTimeMandatory@49();
    VAR
      ServiceItem@1009 : Record 5940;
      ServiceContractHeader@1007 : Record 5965;
      ServiceContractLine@1006 : Record 5964;
      ServiceMgtSetup@1005 : Record 5911;
      ServiceContractAccountGroup@1000 : Record 5973;
      SignServContractDoc@1004 : Codeunit 5944;
    BEGIN
      // Covers document number TC0117 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test error occurs on Signing Service Contract with "Contract Rsp. Time Mandatory" True on Service Management Setup.

      // [GIVEN] Set "Contract Rsp. Time Mandatory" field True on Service Management Setup, Create and Update Response Time on Service Item.
      Initialize;
      ServiceMgtSetup.GET;
      ServiceMgtSetup.VALIDATE("Contract Rsp. Time Mandatory",TRUE);
      ServiceMgtSetup.MODIFY(TRUE);
      LibraryService.CreateServiceItem(ServiceItem,'');
      ServiceItem.VALIDATE("Response Time (Hours)",0);  // Use 0 to blank Response Time (Hours).
      ServiceItem.MODIFY(TRUE);
      LibraryService.CreateServiceContractAcctGrp(ServiceContractAccountGroup);

      // [WHEN] Create Service Contract Quote.
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Quote,ServiceItem."Customer No.");
      ServiceContractHeader.VALIDATE("Serv. Contract Acc. Gr. Code",ServiceContractAccountGroup.Code);
      ServiceContractHeader.MODIFY(TRUE);

      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");
      ServiceContractLine.VALIDATE("Line Value",LibraryRandom.RandInt(100));  // Use Random to select Random Line Value.
      ServiceContractLine.MODIFY(TRUE);
      UpdateServiceContract(ServiceContractHeader);

      // [THEN] Verify that the Service Contract Quote shows "Contract Response Time" Mandatory error when we Make Contract from Quote.
      ASSERTERROR SignServContractDoc.SignContractQuote(ServiceContractHeader);
      Assert.AreEqual(
        STRSUBSTNO(
          RespTimeServiceTierTxt,ServiceContractLine."Contract Type",
          ServiceContractLine."Contract No.",ServiceContractLine."Line No."),
        ConvertMessage(GETLASTERRORTEXT),STRSUBSTNO(UnknownErr,GETLASTERRORTEXT));

      // 4. Teardown: Rollback "Contract Rsp. Time Mandatory" field as false on Service Management Setup.
      ServiceMgtSetup.VALIDATE("Contract Rsp. Time Mandatory",FALSE);
      ServiceMgtSetup.MODIFY(TRUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE ShipToCodeOnServiceShipment@48();
    VAR
      Customer@1001 : Record 18;
      ServiceHeader@1009 : Record 5900;
      ServiceItemLine@1008 : Record 5901;
      ServiceLine@1007 : Record 5902;
      ShipToAddress@1006 : Record 222;
      ServiceItem@1005 : Record 5940;
    BEGIN
      // Covers document number TC0121 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test Ship to Code on Service Shipment Line after Post Service Order as Ship.

      // [GIVEN] Create Service Order with Different Ship to code on Service Item Line.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateShipToAddress(ShipToAddress,Customer."No.");

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
      ServiceItem.VALIDATE("Ship-to Code",ShipToAddress.Code);
      ServiceItem.MODIFY(TRUE);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      SelectDifferentShiptoCode(ShipToAddress);

      CLEAR(ServiceItem);
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
      ServiceItem.VALIDATE("Ship-to Code",ShipToAddress.Code);
      ServiceItem.MODIFY(TRUE);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      CLEAR(ServiceItem);
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      UpdateServiceLineWithRandomQtyAndPrice(ServiceLine,ServiceItemLine."Line No.");

      // [WHEN] Post Service Order as Ship.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // [THEN] Verify that the Ship to Code on Service Shipment Item Line is Ship to Code on Service Item on Service Shipment Item Line.
      VerifyShiptoCode(ServiceHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE DeleteQuoteAfterChangeCustomer@47();
    VAR
      ServiceHeader@1013 : Record 5900;
      ServiceItemLine@1012 : Record 5901;
      ServiceLine@1011 : Record 5902;
      Item@1008 : Record 27;
      ServiceQuoteNo@1006 : Code[20];
    BEGIN
      // Covers document number TC0123, TC0124 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test Delete Service Quote after Change Customer No. on Service Quote.

      // [GIVEN] Create Service Quote.
      Initialize;
      CreateServiceDocumentWithServiceItem(ServiceHeader,ServiceItemLine,ServiceHeader."Document Type"::Quote,'');
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      ServiceItemLine.VALIDATE("Item No.",Item."No.");
      ServiceItemLine.MODIFY(TRUE);

      Item.NEXT;
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      UpdateServiceLineWithRandomQtyAndPrice(ServiceLine,ServiceItemLine."Line No.");

      // [WHEN] Change Customer No. on Service Quote, Delete Service Quote.
      ChangeCustomerOnServiceQuote(ServiceHeader);
      ServiceQuoteNo := ServiceHeader."No.";
      ServiceHeader.DELETE(TRUE);

      // [THEN] Verify that the Service Quote not Exist.
      Assert.IsFalse(
        ServiceHeader.GET(ServiceHeader."Document Type"::Quote,ServiceQuoteNo),
        STRSUBSTNO(RecordExistErr,ServiceHeader.TABLECAPTION,ServiceHeader.FIELDCAPTION("No."),ServiceQuoteNo));
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE CommentsOnServiceOrder@46();
    VAR
      ServiceItemLine@1009 : Record 5901;
      ServiceHeader@1007 : Record 5900;
      TempServiceCommentLine@1006 : TEMPORARY Record 5906;
      ServiceItemNo@1003 : Code[20];
    BEGIN
      // Covers document number TC0122 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test Comments on Service Order create from Service Quote.

      // [GIVEN] Create Service Quote and Assign Loaner on Service Quote, Create Comments on Service Quote.
      Initialize;
      CreateServiceDocWithLoaner(ServiceHeader,ServiceItemLine,ServiceHeader."Document Type"::Quote);
      CreateCommentsOnServiceQuote(ServiceItemLine);
      ServiceItemNo := ServiceItemLine."Service Item No.";
      SaveComments(TempServiceCommentLine,ServiceItemLine);

      // [WHEN] Create Service Order from Service Quote, Receive Loaner on Created Service Order.
      CODEUNIT.RUN(CODEUNIT::"Service-Quote to Order",ServiceHeader);
      ReceiveLoanerOnServiceOrder(ServiceItemLine,ServiceItemNo);

      // [THEN] Verify that the Comments on Service Order is Comments assign on Service Quote.
      VerifyComments(TempServiceCommentLine,ServiceItemLine);
    END;

    [Test]
    [HandlerFunctions(CustomerTemplateHandler)]
    PROCEDURE CreateCustomerFromServiceOrder@45();
    VAR
      ServiceHeader@1006 : Record 5900;
      Customer@1005 : Record 18;
      ServOrderManagement@1004 : Codeunit 5900;
    BEGIN
      // Covers document number TC0118 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test error occurs on Deletion of Customer attached on Service Order.

      // [GIVEN] Create Customer Template.
      Initialize;
      CreateCustomerTemplate;

      // [WHEN] Create Customer from Service Order.
      CreateServiceHeaderWithName(ServiceHeader);
      COMMIT;
      ServOrderManagement.CreateNewCustomer(ServiceHeader);
      ServiceHeader.MODIFY(TRUE);

      // [THEN] Verify that the "Outstanding Service Order Exist" error occurs when we delete Customer of Service Order.
      Customer.GET(ServiceHeader."Customer No.");
      ASSERTERROR Customer.DELETE(TRUE);
      Assert.AreEqual(
        STRSUBSTNO(CustomerDeletionErr,ServiceHeader."Customer No."),ConvertMessage(GETLASTERRORTEXT),
        STRSUBSTNO(UnknownErr,GETLASTERRORTEXT));
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE CreateServiceItemFromOrder@44();
    VAR
      ServiceItemLine@1006 : Record 5901;
      ServiceItem@1005 : Record 5940;
      ServItemManagement@1002 : Codeunit 5920;
    BEGIN
      // Covers document number TC0118 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test error occurs on Deletion of Service Item attached on Service Order.

      // [GIVEN] Create Service Order - Service Header, Service Item Line with Description.
      CreateServItemLineDescription(ServiceItemLine);

      // [WHEN] Create Service Item from Service Order.
      ServItemManagement.CreateServItemOnServItemLine(ServiceItemLine);
      ServiceItemLine.MODIFY(TRUE);

      // [THEN] Verify that the "Outstanding Service Order Exist" error occurs when we delete Service Item of Service Order.
      ServiceItem.GET(ServiceItemLine."Service Item No.");
      ASSERTERROR ServiceItem.DELETE(TRUE);
      Assert.AreEqual(
        STRSUBSTNO(ServItemDeletionErr,ServiceItemLine."Service Item No."),ConvertMessage(GETLASTERRORTEXT),
        STRSUBSTNO(UnknownErr,GETLASTERRORTEXT));
    END;

    [Test]
    [HandlerFunctions(CustomerTemplateHandler)]
    PROCEDURE DeleteCustomerFromServiceOrder@43();
    VAR
      ServiceHeader@1006 : Record 5900;
      Customer@1005 : Record 18;
      ServOrderManagement@1004 : Codeunit 5900;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Covers document number TC0118, TC0119 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test Customer delete after deletion of attached Service Order.

      // [GIVEN] Create Customer Template, Create Customer from service Order.
      Initialize;
      CreateCustomerTemplate;
      CreateServiceHeaderWithName(ServiceHeader);
      COMMIT;
      ServOrderManagement.CreateNewCustomer(ServiceHeader);
      ServiceHeader.MODIFY(TRUE);

      CustomerNo := ServiceHeader."Customer No.";

      // [WHEN] Delete Service Order, Delete Customer.
      ServiceHeader.DELETE(TRUE);
      Customer.GET(ServiceHeader."Customer No.");
      Customer.DELETE(TRUE);

      // [THEN] Verify that the Customer not Exist.
      Assert.IsFalse(
        Customer.GET(CustomerNo),STRSUBSTNO(RecordExistErr,Customer.TABLECAPTION,Customer.FIELDCAPTION("No."),CustomerNo));
    END;

    [Test]
    PROCEDURE DescriptionOnPostedInvoiceLine@68();
    VAR
      Customer@1008 : Record 18;
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1006 : Record 5902;
      TempServiceLine@1007 : TEMPORARY Record 5902;
    BEGIN
      // [SCENARIO 173928] Test Description correctly populated on Posted Invoice Line.

      // [GIVEN] Create Service Header and Service Line.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateMultipleServiceLine(ServiceHeader,CreateServiceOrder(ServiceHeader,Customer."No."));
      GetServiceLine(ServiceLine,ServiceHeader);
      CopyServiceLine(TempServiceLine,ServiceLine);

      // [WHEN] Post Service Order as Ship and Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] Verify Description on Posted Invoice Line.
      VerifyDescOnPostedInvoiceLine(TempServiceLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE DeleteServiceItemFromOrder@42();
    VAR
      ServiceItemLine@1008 : Record 5901;
      ServiceItem@1007 : Record 5940;
      ServiceHeader@1006 : Record 5900;
      ServItemManagement@1005 : Codeunit 5920;
      ServiceItemNo@1002 : Code[20];
    BEGIN
      // Covers document number TC0118, TC0119 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test Service Item delete after deletion of attached Service Order.

      // [GIVEN] Create Service Item from Service Order.
      CreateServItemLineDescription(ServiceItemLine);
      ServItemManagement.CreateServItemOnServItemLine(ServiceItemLine);
      ServiceItemLine.MODIFY(TRUE);

      ServiceItemNo := ServiceItemLine."Service Item No.";

      // [WHEN] Delete Service Order, Delete Service Item.
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");
      ServiceHeader.DELETE(TRUE);
      ServiceItem.GET(ServiceItemNo);
      ServiceItem.DELETE(TRUE);

      // [THEN] Verify that the Service Item not Exist.
      Assert.IsFalse(
        ServiceItem.GET(ServiceItemNo),
        STRSUBSTNO(RecordExistErr,ServiceItem.TABLECAPTION,ServiceItem.FIELDCAPTION("No."),ServiceItemNo));
    END;

    [Test]
    PROCEDURE ServiceOrderResponseTimeReport@41();
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceShipmentHeader@1003 : Record 5990;
      ServiceOrderResponseTime@1002 : Report 5908;
      FilePath@1000 : Text[1024];
    BEGIN
      // Covers document number TC0125 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test Service Order - Response Time Report.

      // [GIVEN] Create Service Order - Service Header, Service Item Line, Service Line and Post it as Ship.
      CreateServiceHeaderRespCenter(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // [WHEN] Save Service Order - Response Time Report as XML and XLSX in local Temp folder.
      ServiceShipmentHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceShipmentHeader.SETRANGE("Responsibility Center",ServiceHeader."Responsibility Center");
      ServiceShipmentHeader.FINDFIRST;
      CLEAR(ServiceOrderResponseTime);
      ServiceOrderResponseTime.SETTABLEVIEW(ServiceShipmentHeader);
      FilePath := TEMPORARYPATH + FORMAT(ServiceShipmentHeader."No.") + ServiceShipmentHeader."Responsibility Center" + '.xlsx';
      ServiceOrderResponseTime.SAVEASEXCEL(FilePath);

      // [THEN] Verify that Saved file has some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    PROCEDURE ServiceItemLineLabelsReport@40();
    VAR
      ServiceItemLine@1009 : Record 5901;
      ServiceItemLineLabels@1007 : Report 5901;
      FilePath@1003 : Text[1024];
    BEGIN
      // Covers document number TC0125 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test Service Item Line Labels Report.

      // [GIVEN] Create Service Order - Service Header, Service Item and Service Item Line.
      Initialize;
      CreateServiceOrderWithServiceItem(ServiceItemLine);

      // [WHEN] Save Service Item Line Labels Report as XML and XLSX in local Temp folder.
      CLEAR(ServiceItemLineLabels);
      ServiceItemLineLabels.SETTABLEVIEW(ServiceItemLine);
      FilePath := TEMPORARYPATH + FORMAT(ServiceItemLine."Document Type") + ServiceItemLine."Document No." + '.xlsx';
      ServiceItemLineLabels.SAVEASEXCEL(FilePath);

      // [THEN] Verify that Saved file has some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    PROCEDURE ServiceProfitRespCentersReport@39();
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceShipmentHeader@1003 : Record 5990;
      ServiceProfitRespCenters@1002 : Report 5909;
      FilePath@1000 : Text[1024];
    BEGIN
      // Covers document number TC0125 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test Service Profit(Resp. Centers) Report.

      // [GIVEN] Create Service Order - Service Header, Service Item Line, Service Line and Post it as Ship and Invoice.
      CreateServiceHeaderRespCenter(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [WHEN] Save Service Profit(Resp. Centers) Report as XML and XLSX in local Temp folder.
      CLEAR(ServiceProfitRespCenters);
      ServiceShipmentHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceShipmentHeader.SETRANGE("Responsibility Center",ServiceHeader."Responsibility Center");
      ServiceShipmentHeader.FINDFIRST;
      ServiceProfitRespCenters.SETTABLEVIEW(ServiceShipmentHeader);
      FilePath := TEMPORARYPATH + FORMAT(ServiceShipmentHeader."No.") + ServiceShipmentHeader."Responsibility Center" + '.xlsx';
      ServiceProfitRespCenters.SAVEASEXCEL(FilePath);

      // [THEN] Verify that Saved file has some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    PROCEDURE ServiceProfitServOrdersReport@37();
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceShipmentHeader@1003 : Record 5990;
      ServiceProfitServOrders@1002 : Report 5910;
      FilePath@1000 : Text[1024];
    BEGIN
      // Covers document number TC0125 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test Service Profit(Serv. Orders) Report.

      // [GIVEN] Create Service Order - Service Header, Service Item Line, Service Line and Post it as Ship and Invoice.
      CreateServiceHeaderRespCenter(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [WHEN] Save Service Profit(Serv. Orders) Report as XML and XLSX in local Temp folder.
      CLEAR(ServiceProfitServOrders);
      ServiceShipmentHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceShipmentHeader.SETRANGE("Responsibility Center",ServiceHeader."Responsibility Center");
      ServiceShipmentHeader.FINDFIRST;
      ServiceProfitServOrders.SETTABLEVIEW(ServiceShipmentHeader);
      FilePath := TEMPORARYPATH + FORMAT(ServiceShipmentHeader."No.") + ServiceShipmentHeader."Responsibility Center" + '.xlsx';
      ServiceProfitServOrders.SAVEASEXCEL(FilePath);

      // [THEN] Verify that Saved file has some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    PROCEDURE ServiceTasksReport@36();
    VAR
      ServiceHeader@1010 : Record 5900;
      ServiceItemLine@1009 : Record 5901;
      Item@1008 : Record 27;
      ServiceTasks@1007 : Report 5904;
      FilePath@1003 : Text[1024];
    BEGIN
      // Covers document number TC0125 - refer to TFS ID 21728.
      // [SCENARIO 21728] Test Service Tasks Report.

      // [GIVEN] Create Service Order - Service Header and Service Item Line.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      ServiceItemLine.VALIDATE("Item No.",Item."No.");
      ServiceItemLine.VALIDATE(Priority,ServiceItemLine.Priority::High);
      ServiceItemLine.MODIFY(TRUE);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');

      // [WHEN] Save Service Tasks Report as XML and XLSX in local Temp folder.
      CLEAR(ServiceTasks);
      ServiceTasks.SETTABLEVIEW(ServiceItemLine);
      FilePath := TEMPORARYPATH + FORMAT(ServiceItemLine."Document Type") + ServiceItemLine."Document No." + '.xlsx';
      ServiceTasks.SAVEASEXCEL(FilePath);

      // [THEN] Verify that Saved file has some data.
      LibraryUtility.CheckFileNotEmpty(FilePath);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE CommentsOnOrderFromQuote@1();
    VAR
      ServiceItemLine@1009 : Record 5901;
      ServiceHeader@1007 : Record 5900;
      TempServiceCommentLine@1006 : TEMPORARY Record 5906;
    BEGIN
      // Covers document number CU5901 - refer to TFS ID 167035.
      // [SCENARIO 167035] Test Comments on Service Order create from Service Quote.

      // [GIVEN] Create Service Quote and Assign Loaner on Service Quote, Create Comments on Service Quote.
      CreateServiceQuoteWithComments(ServiceItemLine);
      SaveComments(TempServiceCommentLine,ServiceItemLine);

      // [WHEN] Create Service Order from Service Quote.
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");
      LibraryService.CreateOrderFromQuote(ServiceHeader);

      // [THEN] Verify that the Comments on Service Order is Comments assign on Service Quote.
      ServiceItemLine.SETRANGE("Service Item No.",ServiceItemLine."Service Item No.");
      ServiceItemLine.FINDFIRST;
      VerifyComments(TempServiceCommentLine,ServiceItemLine);

      // 4. Teardown: Receive Loaner.
      ReceiveLoanerOnServiceOrder(ServiceItemLine,ServiceItemLine."Service Item No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE PostedServiceShipment@2();
    VAR
      ServiceItemLine@1009 : Record 5901;
      ServiceHeader@1007 : Record 5900;
    BEGIN
      // Covers document number CU5901, CU5906-1 - refer to TFS ID 167035.
      // [SCENARIO 167035] Test Loaner Entry and Service Document Log from Posted Service Shipment.

      // [GIVEN] Create Service Quote and Assign Loaner on Service Quote, Create Comments on Service Quote, Make Order from Quote.
      CreateServiceQuoteWithComments(ServiceItemLine);
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");
      LibraryService.CreateOrderFromQuote(ServiceHeader);

      // [WHEN] Post Service Order as Ship and Receive Loaner on service Shipment Header.
      ServiceItemLine.SETRANGE("Service Item No.",ServiceItemLine."Service Item No.");
      ServiceItemLine.FINDFIRST;
      ServiceHeader.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      ReceiveLoanerOnServiceShipment(ServiceHeader."No.");

      // [THEN] Verify Loaner Entry and Service Document Log for Loaner.
      VerifyLoanerEntry(ServiceItemLine);

      // The value 8 is the event number for Receive Loaner.
      VerifyServiceDocumentLog(ServiceItemLine."Document No.",ServiceItemLine."Loaner No.",8);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,ContractTemplateHandler,MessageHandler)]
    PROCEDURE ServiceItemAndDocumentLog@5();
    VAR
      ServiceContractHeader@1009 : Record 5965;
      ServiceContractLine@1010 : Record 5964;
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1006 : Record 5901;
      ServItemManagement@1002 : Codeunit 5920;
      SignServContractDoc@1011 : Codeunit 5944;
    BEGIN
      // Covers document number CU5906-1 - refer to TFS ID 167035.
      // [SCENARIO 167035] Test Service Item Log and Service Document Log after create Service Item form Order.

      // [GIVEN] Create and Sign Service Contract, Create Service Header and Assign Contract No. on Header.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceContractHeader."Customer No.");
      UpdateContractOnServiceHeader(ServiceHeader,ServiceContractHeader."Contract No.");

      // [WHEN] Create Service Item from Service Order and Assign Loaner on Service Item Line.
      CreateServiceItemLine(ServiceItemLine,ServiceHeader);
      ServItemManagement.CreateServItemOnServItemLine(ServiceItemLine);
      ServiceItemLine.MODIFY(TRUE);
      AssignLoanerOnServiceItemLine(ServiceItemLine);

      // [THEN] Verify Service Item Log and Service Document Log.
      // [THEN] The value 11,13,2 is the event number for Customer No., Item No. changed and Automatically created on Service Item Log and
      // [THEN] 7,11 is the event number for Loaner lent and Contract No. Changed on Service Document Log.
      VerifyServiceItemLog(ServiceItemLine."Service Item No.",ServiceItemLine."Customer No.",11);
      VerifyServiceItemLog(ServiceItemLine."Service Item No.",ServiceItemLine."Item No.",13);
      VerifyServiceItemLogExist(ServiceItemLine."Service Item No.",2);
      VerifyServiceDocumentLog(ServiceItemLine."Document No.",ServiceItemLine."Loaner No.",7);
      VerifyServiceDocumentLog(ServiceItemLine."Document No.",ServiceContractHeader."Contract No.",11);

      // 4. Teardown: Receive Loaner.
      ReceiveLoanerOnServiceOrder(ServiceItemLine,ServiceItemLine."Service Item No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,ContractTemplateHandler,MessageHandler)]
    PROCEDURE ServiceItemDocumentLogOnPost@54();
    VAR
      ServiceContractHeader@1009 : Record 5965;
      ServiceContractLine@1010 : Record 5964;
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1006 : Record 5901;
      Resource@1014 : Record 156;
      ServiceLine@1001 : Record 5902;
      ServItemManagement@1002 : Codeunit 5920;
      SignServContractDoc@1011 : Codeunit 5944;
    BEGIN
      // Covers document number CU5906-1 - refer to TFS ID 167035.
      // [SCENARIO 167035] Test Service Item Log and Service Document Log after Posting Service Order.

      // [GIVEN] Create and Sign Service Contract, Create Service Header and Assign Contract No. on Header,
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceContractHeader."Customer No.");
      UpdateContractOnServiceHeader(ServiceHeader,ServiceContractHeader."Contract No.");

      // [GIVEN] Create Service Item from Service Order and Assign Loaner on Service Item Line.
      CreateServiceItemLine(ServiceItemLine,ServiceHeader);
      ServItemManagement.CreateServItemOnServItemLine(ServiceItemLine);
      ServiceItemLine.MODIFY(TRUE);
      AssignLoanerOnServiceItemLine(ServiceItemLine);

      // [WHEN] Create Service Line with Type Resource and Post Service Order as Ship.
      LibraryResource.FindResource(Resource);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,Resource."No.");
      UpdateServiceLineWithRandomQtyAndPrice(ServiceLine,ServiceItemLine."Line No.");

      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // [THEN] Verify Service Item Log and Service Document Log after Posting Service Order.
      // [THEN] The value 11,13,2 is the event number for Customer No., Item No. changed and Automatically created on Service Item Log
      // [THEN] 7,11,6 is the event number for Loaner lent, Contract No. Changed and Shipment Created on Service Document Log.
      VerifyServiceItemLog(ServiceItemLine."Service Item No.",ServiceItemLine."Customer No.",11);
      VerifyServiceItemLog(ServiceItemLine."Service Item No.",ServiceItemLine."Item No.",13);
      VerifyServiceItemLogExist(ServiceItemLine."Service Item No.",2);
      VerifyServiceDocumentLog(ServiceItemLine."Document No.",ServiceItemLine."Loaner No.",7);
      VerifyServiceDocumentLog(ServiceItemLine."Document No.",ServiceContractHeader."Contract No.",11);
      VerifyServiceDocumentShipment(FindServiceShipmentHeader(ServiceHeader."No."),6);

      // 4. Teardown: Receive Loaner.
      ReceiveLoanerOnServiceOrder(ServiceItemLine,ServiceItemLine."Service Item No.");
    END;

    [Test]
    PROCEDURE ServiceDocumentLogRepairStatus@18();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1006 : Record 5901;
      ServiceItemLine2@1000 : Record 5901;
      RepairStatus@1012 : Record 5927;
    BEGIN
      // Covers document number CU5906-1 - refer to TFS ID 167035.
      // [SCENARIO 167035] Test Service Document Log created after change Repair Status code on Service Item Line.

      // [GIVEN] Create Service Header and Service Item Line.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');

      // [WHEN] Create Repair Status Code and Update it on Service Item Line.
      CreateRepairStatusCodeFinish(RepairStatus);
      ServiceItemLine2.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.",ServiceItemLine."Line No.");
      ServiceItemLine.VALIDATE("Repair Status Code",RepairStatus.Code);
      ServiceItemLine.UpdateServiceOrderChangeLog(ServiceItemLine2);
      ServiceItemLine.MODIFY(TRUE);

      // [THEN] Verify Service Document Log for Repair Status.
      // [THEN] The value 14 is the event number for Repair Status Change.
      VerifyServiceDocumentLog(ServiceItemLine."Document No.",RepairStatus.Code,14);
    END;

    [Test]
    PROCEDURE ServiceDocumentLogStatus@71();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceHeader2@1000 : Record 5900;
    BEGIN
      // Covers document number CU5906-1 - refer to TFS ID 167035.
      // [SCENARIO 167035] Test Service Document Log created after change Status on Service Header.

      // [GIVEN] Create Service Header.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');

      // [WHEN] Change Status to In Process on Service Header.
      ServiceHeader2.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      ServiceHeader.VALIDATE(Status,ServiceHeader.Status::"In Process");
      ServiceHeader.UpdateServiceOrderChangeLog(ServiceHeader2);
      ServiceHeader.MODIFY(TRUE);

      // [THEN] Verify Service Document Log for Status.
      VerifyServiceDocumentLogExist(ServiceHeader."No.",2);  // The value 2 is the event number for Status Change.
    END;

    [Test]
    [HandlerFunctions(FormHandlerResourceAllocation)]
    PROCEDURE ResourceAllocation@9();
    VAR
      ServiceItemLine@1002 : Record 5901;
      Resource@1005 : Record 156;
    BEGIN
      // Covers document number CU5906-1 - refer to TFS ID 167035.
      // [SCENARIO 167035] Test Service Document Log created after Resource Allocation on Service Header.

      // [GIVEN] Create Service Header, Service Item and Service Item Line.
      Initialize;
      CreateServiceOrderWithServiceItem(ServiceItemLine);

      // [WHEN] Allocate Resource on Service Order.
      AllocateResource(Resource,ServiceItemLine);

      // [THEN] Verify Service Document Log for Resource Allocation.
      VerifyServiceDocumentLog(ServiceItemLine."Document No.",Resource."No.",4);  // The value 4 is the event number for REsource Allocation.
    END;

    [Test]
    [HandlerFunctions(FormHandlerResourceAllocation,FormHandlerCancelAllocation)]
    PROCEDURE CancelResourceAllocation@83();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceItem@1003 : Record 5940;
      Resource@1005 : Record 156;
      ServiceDocumentLog@1008 : Record 5912;
      ServiceOrderAllocation@1006 : Record 5950;
      ResourceNo@1000 : Code[20];
    BEGIN
      // Covers document number CU5906-1 - refer to TFS ID 167035.
      // [SCENARIO 167035] Test Service Document Log created after Change Resource Allocation on Service Header.

      // [GIVEN] Create Service Header, Service Item and Service Item Line and Allocate Resource on Service Order.
      Initialize;
      LibraryService.CreateServiceItem(ServiceItem,'');
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      CreateServiceItemLineRepair(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      AllocateResource(Resource,ServiceItemLine);
      ResourceNo := Resource."No.";

      // [WHEN] Change Resource No. on Service Order Allocation.
      ServiceOrderAllocation.GET(LibraryVariableStorage.DequeueInteger);
      Resource.NEXT;
      ServiceOrderAllocation.VALIDATE("Resource No.",Resource."No.");

      // [THEN] Verify Service Document Log for Change Resource Allocation.
      ServiceDocumentLog.SETRANGE("Document Type",ServiceDocumentLog."Document Type"::Order);
      ServiceDocumentLog.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceDocumentLog.SETRANGE(After,ResourceNo);
      ServiceDocumentLog.FINDLAST;
      ServiceDocumentLog.TESTFIELD("Event No.",5);  // The value 5 is the event number for Cancel Resource Allocation.
    END;

    [Test]
    [HandlerFunctions(FormHandlerResourceAllocation,FormHandlerRelAllocation)]
    PROCEDURE ResourceReAllocation@63();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceItem@1003 : Record 5940;
      Resource@1005 : Record 156;
      ServiceDocumentLog@1008 : Record 5912;
      ServiceOrderAllocation@1006 : Record 5950;
      ServAllocationManagement@1009 : Codeunit 5930;
    BEGIN
      // Covers document number CU5906-1 - refer to TFS ID 167035.
      // [SCENARIO 167035] Test Service Document Log created after Cancel Resource Allocation on Service Header.

      // [GIVEN] Create Service Header, Service Item and Service Item Line and Allocate Resource on Service Order.
      Initialize;
      LibraryService.CreateServiceItem(ServiceItem,'');
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      CreateServiceItemLineRepair(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      AllocateResource(Resource,ServiceItemLine);

      // [WHEN] Cancel Resource Allocation.
      ServiceOrderAllocation.GET(LibraryVariableStorage.DequeueInteger);
      ServAllocationManagement.CancelAllocation(ServiceOrderAllocation);

      // [THEN] Verify Service Document Log for Cancel Resource Allocation.
      ServiceDocumentLog.SETRANGE("Document Type",ServiceDocumentLog."Document Type"::Order);
      ServiceDocumentLog.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceDocumentLog.SETRANGE(After,Resource."No.");
      ServiceDocumentLog.FINDLAST;
      ServiceDocumentLog.TESTFIELD("Event No.",17);  // The value 17 is the event number for Reallocation Needed.
    END;

    [Test]
    PROCEDURE DeleteServiceOrder@77();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
    BEGIN
      // Covers document number CU5906-1 - refer to TFS ID 167035.
      // [SCENARIO 167035] Test Service Item Log created after Delete service Order.

      // [GIVEN] Create Service Header, Service Item and Service Item Line.
      Initialize;
      CreateServiceDocumentWithServiceItem(
        ServiceHeader,ServiceItemLine,ServiceHeader."Document Type"::Order,'');

      // [WHEN] Delete Service Order.
      ServiceHeader.DELETE(TRUE);

      // [THEN] Verify Service Document Log for Delete service Order.
      VerifyServiceItemLogExist(ServiceItemLine."Service Item No.",7);  // The value 7 is the event number for delete Service Order.
    END;

    [Test]
    PROCEDURE ServiceLineExtendedText@38();
    VAR
      Item@1007 : Record 27;
      ServiceHeader@1005 : Record 5900;
      ServiceLine@1004 : Record 5902;
      TransferExtendedText@1000 : Codeunit 378;
      Description@1001 : Text[50];
    BEGIN
      // Covers document number CU5912-2 - refer to TFS ID 167035.
      // [SCENARIO 167035] Test Extended Text created on Service Line.

      // [GIVEN] Create Item, Extended Text for Item, Service Order - Service Header and Service Line.
      Initialize;
      LibraryInventory.CreateItem(Item);
      Description := CreateExtendedTextForItem(Item."No.");

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      ServiceLine."Document Type" := ServiceHeader."Document Type";
      ServiceLine."Document No." := ServiceHeader."No.";
      ServiceLine.Type := ServiceLine.Type::Item;
      ServiceLine."No." := Item."No.";

      // [WHEN] Add Extended Text to the Service Line by Insert Extended Text function.
      TransferExtendedText.ServCheckIfAnyExtText(ServiceLine,TRUE);
      TransferExtendedText.InsertServExtText(ServiceLine);

      // [THEN] Verify Extended Text on Service Line.
      GetServiceLine(ServiceLine,ServiceHeader);
      ServiceLine.TESTFIELD(Description,Description);
    END;

    [Test]
    [HandlerFunctions(CustomerTemplateHandler)]
    PROCEDURE CreationCustomerFromOrder@34();
    VAR
      ServiceHeader@1006 : Record 5900;
      Customer@1005 : Record 18;
      ServOrderManagement@1004 : Codeunit 5900;
    BEGIN
      // Covers document number CU-5988-1-2 - refer to TFS ID 172910.
      // [SCENARIO 172910] Test Create Customer from Service Order.

      // [GIVEN] Create Customer Template.
      Initialize;
      CreateCustomerTemplate;

      // [WHEN] Create Customer from Service Order.
      CreateServiceHeaderWithName(ServiceHeader);
      COMMIT;
      ServOrderManagement.CreateNewCustomer(ServiceHeader);
      ServiceHeader.MODIFY(TRUE);

      // [THEN] Verify values on Created Customer is values on Service Header.
      Customer.GET(ServiceHeader."Customer No.");
      Customer.TESTFIELD(Name,ServiceHeader.Name);
      Customer.TESTFIELD(Address,ServiceHeader.Address);
      Customer.TESTFIELD("Post Code",ServiceHeader."Post Code");
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE CreationServiceItemFromOrder@78();
    VAR
      ServiceItemLine@1006 : Record 5901;
      Item@1000 : Record 27;
      ServiceItem@1005 : Record 5940;
      ServItemManagement@1002 : Codeunit 5920;
    BEGIN
      // Covers document number CU-5988-1-3 - refer to TFS ID 172910.
      // [SCENARIO 172910] Test Create Service Item from Service Order.

      // [GIVEN] Create Service Order - Service Header, Service Item Line with Description and attach Item on Service Item Line.
      CreateServItemLineDescription(ServiceItemLine);
      LibraryInventory.CreateItem(Item);
      ServiceItemLine.VALIDATE("Item No.",Item."No.");
      ServiceItemLine.MODIFY(TRUE);

      // [WHEN] Create Service Item from Service Order.
      ServItemManagement.CreateServItemOnServItemLine(ServiceItemLine);
      ServiceItemLine.MODIFY(TRUE);

      // [THEN] Verify values on Created Service Item is values on Service Item Line.
      ServiceItem.GET(ServiceItemLine."Service Item No.");
      ServiceItem.TESTFIELD("Customer No.",ServiceItemLine."Customer No.");
      ServiceItem.TESTFIELD("Item No.",Item."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,ContractTemplateHandler,MessageHandler)]
    PROCEDURE ShipOrderServiceContract@67();
    VAR
      ServiceContractHeader@1009 : Record 5965;
      ServiceContractLine@1010 : Record 5964;
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1000 : Record 5902;
      ServiceLedgerEntry@1004 : Record 5907;
      SignServContractDoc@1011 : Codeunit 5944;
    BEGIN
      // Covers document number CU5988-1-9 - refer to TFS ID 172911.
      // [SCENARIO 172911] Test Service Ledger Entry after Posting Service Order as Ship with Service Contract No.

      // [GIVEN] Create and Sign Service Contract, Create Service Order with Contract No. on Header.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
      CreateOrderWithContract(ServiceHeader,ServiceLine,ServiceContractHeader);

      // [WHEN] Post Service Order as Ship.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // [THEN] Verify Service Ledger Entry after Posting Service Order.
      VerifyServiceLedgerEntry(
        ServiceLine."No.",FindServiceShipmentHeader(ServiceHeader."No."),ServiceContractHeader."Contract No.",
        ServiceLedgerEntry."Entry Type"::Usage,ServiceLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,ContractTemplateHandler,MessageHandler)]
    PROCEDURE ConsumeServiceOrderContract@65();
    VAR
      ServiceContractHeader@1009 : Record 5965;
      ServiceContractLine@1010 : Record 5964;
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1000 : Record 5902;
      ServiceLedgerEntry@1004 : Record 5907;
      SignServContractDoc@1011 : Codeunit 5944;
    BEGIN
      // Covers document number CU5988-1-14 - refer to TFS ID 172911.
      // [SCENARIO 172911] Test Service Ledger Entry after Posting Service Order as Ship and Consume with Service Contract No.

      // [GIVEN] Create and Sign Service Contract, Create Service Order with Contract No. on Header and update Qty. to Consume on
      // Service Line.
      Initialize;
      CreateServiceContract(ServiceContractHeader,ServiceContractLine,ServiceContractHeader."Contract Type"::Contract);
      ModifyServiceContractHeader(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
      CreateOrderWithContract(ServiceHeader,ServiceLine,ServiceContractHeader);
      ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity * LibraryUtility.GenerateRandomFraction);
      ServiceLine.MODIFY(TRUE);

      // [WHEN] Post Service Order as Ship and Consume.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // [THEN] Verify Service Ledger Entry after Posting Service Order.
      VerifyServiceLedgerEntry(
        ServiceLine."No.",FindServiceShipmentHeader(ServiceHeader."No."),ServiceContractHeader."Contract No.",
        ServiceLedgerEntry."Entry Type"::Usage,ServiceLine."Qty. to Consume");
      VerifyServiceLedgerEntry(
        ServiceLine."No.",FindServiceShipmentHeader(ServiceHeader."No."),ServiceContractHeader."Contract No.",
        ServiceLedgerEntry."Entry Type"::Consume,-ServiceLine."Qty. to Consume");
    END;

    [Test]
    PROCEDURE DeleteServiceItemLine@70();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1000 : Record 5901;
    BEGIN
      // Covers document number CU5988-1-15 - refer to TFS ID 172912.
      // [SCENARIO 172912] Test Deletion of Service Item Line.

      // [GIVEN] Create Service Item, Service Header and Service Item Line.
      Initialize;
      CreateServiceDocumentWithServiceItem(ServiceHeader,ServiceItemLine,ServiceHeader."Document Type"::Order,'');

      // [WHEN] Delete Service Item Line.
      ServiceItemLine.DELETE(TRUE);

      // [THEN] Verify Service Item Line successfully deleted.
      Assert.IsFalse(
        ServiceItemLine.GET(ServiceItemLine."Document Type",ServiceItemLine."Document No.",ServiceItemLine."Line No."),
        STRSUBSTNO(ServiceItemLineExistErr,ServiceItemLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler,ModalFormHandlerLookupOK)]
    PROCEDURE ServiceItemLogReplaceComponent@102();
    BEGIN
      // [SCENARIO 202377] Test Service item log After posting the Service Order Line with string menu option Replace Components.

      ServiceItemLogOnPost(1);  // Use for Choose the First option of the string menu.
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE ServiceItemLogNewComponent@103();
    BEGIN
      // [SCENARIO 202377] Test Service item log After posting the Service Order Line with string menu option New Components.

      ServiceItemLogOnPost(2);  // Use for Choose the second option of the string menu.
    END;

    [Test]
    PROCEDURE ServiceOrderWithResolutionCode@95();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceItem@1004 : Record 5940;
    BEGIN
      // [SCENARIO 146033] Test Create a Service Order with Resolution Code.

      // [GIVEN] Create New Service Item.
      Initialize;
      CreateServiceItemWithGroup(ServiceItem,LibrarySales.CreateCustomerNo);

      // [GIVEN] Create a new Service Order.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");

      // [GIVEN] Insert Service Item Line 1 with Resolution Code, Service Item No., Item No. and Service Item Group Code.
      CreateItemLineResolution(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      // [WHEN] Insert Service Item  Line 2,3 and 4 with Resolution Code.
      CreateItemLineResolution(ServiceItemLine,ServiceHeader,'');
      CreateItemLineResolution(ServiceItemLine,ServiceHeader,'');
      CreateItemLineResolution(ServiceItemLine,ServiceHeader,'');
      UpdationOfServiceItemGroup(ServiceItemLine);

      // [THEN] Verify Service Item  Line 4 created without any error message also allows to enter Service Item Group Code values.
      VerifyServiceItemGroup(ServiceHeader."No.",ServiceHeader."Document Type");
    END;

    LOCAL PROCEDURE ServiceItemLogOnPost@85(StringMenuOption@1003 : Integer);
    VAR
      ServiceItem@1001 : Record 5940;
      Item@1005 : Record 27;
      ServiceItemComponent@1006 : Record 5941;
      DocumentNo@1010 : Code[20];
    BEGIN
      // 1. Setup: Find Customer and Item,Create Service Item and Service Item Component.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateServiceItem(ServiceItem,LibrarySales.CreateCustomerNo,Item."No.");
      LibraryService.CreateServiceItemComponent(ServiceItemComponent,ServiceItem."No.",ServiceItemComponent.Type::Item,Item."No.");

      // 2. Exercise: Create and Post Service Order.
      // Set StringMenuOption For String Menu Handler.
      LibraryVariableStorage.Enqueue(StringMenuOption);
      LibraryVariableStorage.Enqueue(ServiceItem."No.");
      DocumentNo := CreateAndPostServiceOrder(ServiceItem);

      // 3. Verify: Verify Service Item Log Entries.
      // The value 5 and 16 is the event number for Service item component and Added to service order.
      VerifyServiceItemLogEntry(DocumentNo,5);
      VerifyServiceItemLogEntry(DocumentNo,16);
    END;

    [Test]
    PROCEDURE InvoiceDiscountZero@115();
    BEGIN
      // [FEATURE] [Invoice Discount]
      // [SCENARIO 203760] Test Resource Ledger Entry after Posting Service Order with Invoice Discount % as boundary value 0 on Customer.

      PostWithInvoiceDiscount(0);
    END;

    [Test]
    PROCEDURE DiscountBetweenFiftyHundred@116();
    BEGIN
      // [FEATURE] [Invoice Discount]
      // [SCENARIO 203760] Test Resource Ledger Entry after Posting Service Order with Invoice Discount % between 50 and 60 on Customer.

      PostWithInvoiceDiscount(50 + LibraryRandom.RandDec(10,2));
    END;

    [Test]
    PROCEDURE InvoiceDiscountHundred@117();
    BEGIN
      // [FEATURE] [Invoice Discount]
      // [SCENARIO 203760] Test Resource Ledger Entry after Posting Service Order with Invoice Discount % as boundary value 100 on Customer.

      PostWithInvoiceDiscount(100);
    END;

    LOCAL PROCEDURE PostWithInvoiceDiscount@96(DiscountPct@1015 : Decimal);
    VAR
      Customer@1000 : Record 18;
      Item@1001 : Record 27;
      Resource@1004 : Record 156;
      ServiceHeader@1008 : Record 5900;
      ServiceItemLine@1009 : Record 5901;
      ServiceLine@1010 : Record 5902;
      ResLedgerEntry@1011 : Record 203;
      ServiceItem@1005 : Record 5940;
      TotalPrice@1007 : Decimal;
    BEGIN
      // 1. Setup: Create Customer, Customer Invoice Discount, Update Sales & Receivable Setup with Calc. Inv. Discount as True, Service
      // Item, Service Header with Document Type as Order, Service Item Line and Service Line with Type Resource.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      CreateCustomerInvoiceDiscount(Customer."No.",DiscountPct,0);  // Take Zero for Service Charge.
      CreateServiceItem(ServiceItem,Customer."No.",Item."No.");
      LibrarySales.SetCalcInvDiscount(TRUE);

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      LibraryResource.FindResource(Resource);

      // Use 1 for Quantity required for Test Case.
      CreateAndUpdateServiceLine(ServiceHeader,ServiceLine.Type::Resource,Resource."No.",1,ServiceItemLine."Line No.",0);  // Use zero for Line Discount.
      GetServiceLine(ServiceLine,ServiceHeader);
      TotalPrice := ROUND(ServiceLine."Unit Price" - (ServiceLine."Unit Price" * DiscountPct / 100));

      // 2. Exercise: Post Service Order as Ship and Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify: Verify Resource Ledger Entry for both Entry Type Sale and Usage.
      VerifyResourceLedgerEntry(
        ServiceLine."No.",FindServiceInvoiceHeader(ServiceHeader."No."),ResLedgerEntry."Entry Type"::Sale,-ServiceLine.Quantity,
        -TotalPrice);

      VerifyResourceLedgerEntry(
        ServiceLine."No.",FindServiceShipmentHeader(ServiceHeader."No."),ResLedgerEntry."Entry Type"::Usage,ServiceLine.Quantity,
        TotalPrice);
    END;

    [Test]
    [HandlerFunctions(ServiceOrderHandler,CheckCreditLimitHandler)]
    PROCEDURE ServiceOrderCreditLimitWarning@105();
    VAR
      SalesReceivablesSetup@1003 : Record 311;
      Customer@1005 : Record 18;
      CustomerCard@1000 : TestPage 21;
    BEGIN
      // [FEATURE] [Credit Limit] [UI]
      // [SCENARIO 202516] Test to verify that credit limit warning comes once when creating a Service Order through Customer Card.

      // [GIVEN] Set Credit Warnings to Both warnings, find Item, create Customer, create Sales Order and post it.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.SetCreditWarnings(SalesReceivablesSetup."Credit Warnings"::"Both Warnings");

      LibraryVariableStorage.Enqueue(Customer."No.");
      CreateAndPostSalesOrder(Customer."No.");

      // [WHEN] Create Service Order from Customer Card.
      CustomerCard.OPENVIEW;
      CustomerCard.FILTER.SETFILTER("No.",Customer."No.");
      CustomerCard."Page Service Order".INVOKE;

      // [THEN] Verify the Customer No through the handler.
    END;

    [Test]
    PROCEDURE AmountInclusiveVATOnServiceLine@124();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1009 : Record 5901;
      ServiceLine@1002 : Record 5902;
      VATPostingSetup@1001 : Record 325;
    BEGIN
      // [SCENARIO 235565] Test calculation of Amount Including VAT on Service Line when Price Including VAT is True.

      // [GIVEN] Find VAT Posting Setup and create Item.
      Initialize;
      LibraryERM.SetVATRoundingType('=');
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      CreateAndUpdateServiceHeader(ServiceHeader,VATPostingSetup."VAT Bus. Posting Group");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');

      // [WHEN] Create Service Order, use Random value for Quantity.
      CreateAndUpdateServiceLine(
        ServiceHeader,ServiceLine.Type::Item,CreateItem(VATPostingSetup."VAT Prod. Posting Group"),
        LibraryRandom.RandDec(10,2),ServiceItemLine."Line No.",0);  // Use zero for Line Discount.

      // [THEN] Verify the correct Amount updated on Amount Including VAT on Service Line.
      VerifyAmountIncludingVATOnServiceLine(ServiceHeader,VATPostingSetup."VAT %");
    END;

    [Test]
    PROCEDURE VATAmountOnGLEntryAfterPostingServiceOrder@121();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1001 : Record 5902;
      ServiceItemLine@1011 : Record 5901;
      VATPostingSetup@1003 : Record 325;
      VATAmount@1010 : Decimal;
    BEGIN
      // [SCENARIO 235565] Test calculation of VAT Amount on GL Entry after posting Service Order.

      // [GIVEN] Find VAT Posting Setup and create Item, create Service Order with Random Quantity.
      Initialize;
      LibraryERM.SetVATRoundingType('=');
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      CreateAndUpdateServiceHeader(ServiceHeader,VATPostingSetup."VAT Bus. Posting Group");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateAndUpdateServiceLine(
        ServiceHeader,ServiceLine.Type::Item,CreateItem(VATPostingSetup."VAT Prod. Posting Group"),
        LibraryRandom.RandDec(10,2),ServiceItemLine."Line No.",0);  // Use zero for Line Discount.
      GetServiceLine(ServiceLine,ServiceHeader);
      VATAmount := -ROUND(ServiceLine.Quantity * ServiceLine."Unit Price" * VATPostingSetup."VAT %" / (100 + VATPostingSetup."VAT %"));

      // [WHEN] Post Service Order.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] Verify the VAT Amount on GL Entry after posting Service Order.
      VerifyVATAmountOnGLEntry(ServiceHeader."No.",VATAmount);
    END;

    [Test]
    PROCEDURE ResponsibilityCenterOnServiceOrder@111();
    VAR
      Customer@1005 : Record 18;
      Item@1003 : Record 27;
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1007 : Record 5902;
      UserSetup@1000 : Record 91;
      ServiceItemLineNo@1004 : Integer;
      ResponsibilityCenterCode@1002 : Code[10];
    BEGIN
      // [SCENARIO 203169] Check Responsibility Center on Service Order.

      // [GIVEN] Create User Setup.
      Initialize;
      ResponsibilityCenterCode := CreateResponsibilityCenterAndUserSetup;
      LibrarySales.CreateCustomer(Customer);

      // 2. Exercise.
      ServiceItemLineNo := CreateServiceOrder(ServiceHeader,Customer."No.");
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      UpdateServiceLineWithRandomQtyAndPrice(ServiceLine,ServiceItemLineNo);

      // [THEN] Validate Responsibility Center on Service Order.
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      ServiceHeader.TESTFIELD("Responsibility Center",ResponsibilityCenterCode);

      // 4. Tear Down.
      DeleteUserSetup(UserSetup,ResponsibilityCenterCode);
    END;

    [Test]
    PROCEDURE ResponsibilityCenterOnPostedServiceDocument@144();
    VAR
      Customer@1003 : Record 18;
      Item@1006 : Record 27;
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1007 : Record 5902;
      ServiceInvoiceHeader@1008 : Record 5992;
      ServiceShipmentHeader@1009 : Record 5990;
      UserSetup@1000 : Record 91;
      ServiceItemLineNo@1004 : Integer;
      ResponsibilityCenterCode@1002 : Code[10];
    BEGIN
      // [SCENARIO 203169] Check Responsibility Center on Service Document.

      // [GIVEN] Create User Setup, Service Order and Service Line.
      Initialize;
      ResponsibilityCenterCode := CreateResponsibilityCenterAndUserSetup;
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateCustomer(Customer);
      ServiceItemLineNo := CreateServiceOrder(ServiceHeader,Customer."No.");
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      UpdateServiceLineWithRandomQtyAndPrice(ServiceLine,ServiceItemLineNo);

      // 2. Exercise.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] Validate Responsibility Center on Service Document.
      ServiceInvoiceHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceInvoiceHeader.FINDFIRST;
      ServiceInvoiceHeader.TESTFIELD("Responsibility Center",ResponsibilityCenterCode);

      ServiceShipmentHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceShipmentHeader.FINDFIRST;
      ServiceShipmentHeader.TESTFIELD("Responsibility Center",ResponsibilityCenterCode);

      // 4. Tear Down.
      DeleteUserSetup(UserSetup,ResponsibilityCenterCode);
    END;

    [Test]
    [HandlerFunctions(PageHandlerServiceLines)]
    PROCEDURE PostingDateOnServiceLine@110();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1007 : Record 5902;
      ServiceOrder@1000 : TestPage 5900;
    BEGIN
      // [SCENARIO 259505] Check Posting Date on the Service lines same as Service Item Worksheet.

      // [GIVEN] Create Service Order and update the Posting Date on the Service Item Worksheet.
      Initialize;
      CreateServiceOrderWithUpdatedPostingDate(ServiceHeader,ServiceLine);
      LibraryVariableStorage.Enqueue(ServiceLine."Posting Date");

      // 2. Exercise.
      ServiceOrder.OPENEDIT;
      ServiceOrder.FILTER.SETFILTER("No.",ServiceHeader."No.");
      ServiceOrder.ServItemLines."Service Lines".INVOKE;

      // [THEN] Validate Posting Date on Service Line.
      // Verification done in Page Handler.
    END;

    [Test]
    PROCEDURE ServiceLedgerEntryWithUpdatedPostingDate@127();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1007 : Record 5902;
      ServiceLedgerEntry@1013 : Record 5907;
    BEGIN
      // [SCENARIO 259505] Check Posting Date on the Service Ledger Entry same as Service Item Worksheet.

      // [GIVEN] Create Service Order and update the Posting Date on the Service Item Worksheet.
      Initialize;
      CreateServiceOrderWithUpdatedPostingDate(ServiceHeader,ServiceLine);

      // 2. Exercise.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] Validate Service Ledger Entry.
      VerifyPostingDateOnServiceLedgerEntry(ServiceLine,ServiceLedgerEntry."Document Type"::Shipment,ServiceLine.Quantity);
      VerifyPostingDateOnServiceLedgerEntry(ServiceLine,ServiceLedgerEntry."Document Type"::Invoice,-ServiceLine.Quantity);
    END;

    [Test]
    PROCEDURE ServiceOrderUsingPaymentMethodWithBalanceAccount@119();
    VAR
      Customer@1003 : Record 18;
      CustLedgerEntry@1007 : Record 21;
      Item@1008 : Record 27;
      ServiceHeader@1000 : Record 5900;
      ServiceItemLine@1001 : Record 5901;
      ServiceLine@1009 : Record 5902;
      ServiceInvoiceHeader@1005 : Record 5992;
    BEGIN
      // [SCENARIO 265765] Test General Ledger, Customer Ledger and Detailed Customer ledger entries after Posting Service Order with Currency and Payment method with a balance account.

      // [GIVEN] Modify General Ledger Setup, create Customer with Payment Method Code with a balance account and create Service Order.
      Initialize;
      LibraryERM.SetApplnRoundingPrecision(LibraryRandom.RandDec(10,2));  // Taken Random value for Application Rounding Precision.
      CreateAndModifyCustomer(Customer,Customer."Application Method"::Manual,FindPaymentMethodWithBalanceAccount,0);  // Taken Zero value for Currency Application Rounding Precision.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      UpdateServiceLineWithRandomQtyAndPrice(ServiceLine,ServiceItemLine."Line No.");

      // 2. Exercise.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] Verify GL, Customer and Detailed Customer ledger entries.
      ServiceInvoiceHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceInvoiceHeader.FINDFIRST;
      VerifyEntriesAfterPostingServiceDocument(
        CustLedgerEntry."Document Type"::Payment,ServiceInvoiceHeader."No.",ServiceInvoiceHeader."No.");
    END;

    [Test]
    PROCEDURE ServiceDocumentUsingApplicationMethodApplyToOldest@126();
    VAR
      Customer@1003 : Record 18;
      CustLedgerEntry@1007 : Record 21;
      Item@1008 : Record 27;
      PaymentMethod@1001 : Record 289;
      ServiceHeader@1000 : Record 5900;
      ServiceHeader2@1011 : Record 5900;
      ServiceInvoiceHeader@1005 : Record 5992;
      ServiceCrMemoHeader@1010 : Record 5994;
      Quantity@1012 : Decimal;
      UnitPrice@1013 : Decimal;
    BEGIN
      // [SCENARIO 265766] Test General Ledger, Customer Ledger and Detailed Customer ledger entries after posting Service documents with Currency and Apply to Oldest Application Method.

      // [GIVEN] Modify General Ledger Setup, create Customer with Apply to Oldest Application Method, create and post Service Invoice and create Service Credit Memo.
      Initialize;
      LibraryERM.SetApplnRoundingPrecision(LibraryRandom.RandDec(10,2));  // Taken Random value for Application Rounding Precision.
      LibraryERM.FindPaymentMethod(PaymentMethod);
      CreateAndModifyCustomer(
        Customer,Customer."Application Method"::"Apply to Oldest",PaymentMethod.Code,
        LibraryRandom.RandDec(5,2));  // Taken Random value for Currency Application Rounding Precision.
      LibraryInventory.CreateItem(Item);
      Quantity := LibraryRandom.RandIntInRange(10,20);
      UnitPrice := LibraryRandom.RandDecInRange(1000,2000,2);
      CreateServiceDocument(ServiceHeader,ServiceHeader."Document Type"::Invoice,Customer."No.",Item."No.",Quantity,UnitPrice);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      CreateServiceDocument(ServiceHeader2,ServiceHeader2."Document Type"::"Credit Memo",Customer."No.",Item."No.",Quantity,UnitPrice);

      // [WHEN] Post Service Credit Memo.
      LibraryService.PostServiceOrder(ServiceHeader2,TRUE,FALSE,TRUE);

      // [THEN] Verify GL, Customer and Detailed Customer ledger entries.
      ServiceInvoiceHeader.SETRANGE("Pre-Assigned No.",ServiceHeader."No.");
      ServiceInvoiceHeader.FINDFIRST;
      ServiceCrMemoHeader.SETRANGE("Pre-Assigned No.",ServiceHeader2."No.");
      ServiceCrMemoHeader.FINDFIRST;
      VerifyEntriesAfterPostingServiceDocument(
        CustLedgerEntry."Document Type"::"Credit Memo",ServiceInvoiceHeader."No.",ServiceCrMemoHeader."No.");
    END;

    [Test]
    PROCEDURE ServiceOrderWithInvoiceDiscount@143();
    VAR
      Customer@1001 : Record 18;
      Item@1002 : Record 27;
      GeneralPostingSetup@1008 : Record 252;
      ServiceCost@1006 : Record 5905;
      ServiceItem@1004 : Record 5940;
      ServiceItemLine@1003 : Record 5901;
      ServiceHeader@1005 : Record 5900;
      ServiceLine@1007 : Record 5902;
      DiscountPct@1012 : Decimal;
      DiscountAmount@1017 : Decimal;
    BEGIN
      // [SCENARIO 259506] Test Discount Amount after Posting Service Order with Invoice Discount %.

      // [GIVEN] Modify Sales Receivables Setup, Create Customer, Item, Customer Invoice Discount, Service Order And Calculate Invoice Discount.
      Initialize;
      LibrarySales.SetCalcInvDiscount(TRUE);
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      GeneralPostingSetup.GET(Customer."Gen. Bus. Posting Group",Item."Gen. Prod. Posting Group");
      DiscountPct := LibraryRandom.RandDec(10,2);  // Generate Random Value for Discount Percent.
      CreateCustomerInvoiceDiscount(Customer."No.",DiscountPct,0);  // Take Zero for Service Charge.
      CreateServiceItem(ServiceItem,Customer."No.",Item."No.");
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      LibraryService.FindServiceCost(ServiceCost);
      CreateAndUpdateServiceLine(ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code,1,ServiceItemLine."Line No.",0);  // Take 1 for Quantity and 0 for Line Discount.
      GetServiceLine(ServiceLine,ServiceHeader);
      CODEUNIT.RUN(CODEUNIT::"Service-Calc. Discount",ServiceLine);
      DiscountAmount := (ServiceLine.Amount * DiscountPct / 100);
      // 2. Exercise.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      // [THEN] Verify Discount Amount after Posting.
      GeneralPostingSetup.GET(ServiceLine."Gen. Bus. Posting Group",ServiceLine."Gen. Prod. Posting Group");
      VerifyDiscountAmount(ServiceHeader."No.",DiscountAmount,GeneralPostingSetup."Sales Inv. Disc. Account");
    END;

    [Test]
    [HandlerFunctions(ServiceItemWorksheetHandler,ServiceLinesSequenceHandler)]
    PROCEDURE ServiceOrderVerificationWithMultipleLines@141();
    VAR
      TempServiceLine@1002 : TEMPORARY Record 5902;
      ServiceItem@1001 : Record 5940;
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1005 : Record 5902;
      ServiceOrder@1009 : TestPage 5900;
    BEGIN
      // [SCENARIO 245322] Verify the sequence of Service Lines after entering on the Service Order.

      // [GIVEN] Create Service Order, open Service Item Worksheet and save data to a temporary table.
      Initialize;
      CreateServiceOrder(ServiceHeader,'');
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      OpenServiceOrderPage(ServiceOrder,ServiceHeader."No.");
      ServiceOrder.ServItemLines."Service Item Worksheet".INVOKE;
      GetServiceLine(ServiceLine,ServiceHeader);
      CopyServiceLine(TempServiceLine,ServiceLine);
      ServiceOrder.OK.INVOKE;

      // [WHEN] Open Service Lines page.
      OpenServiceOrderPage(ServiceOrder,ServiceHeader."No.");
      ServiceOrder.ServItemLines."Service Lines".INVOKE;

      // [THEN] Verify sequence of lines in ServiceLinesSequenceHandler.
    END;

    [Test]
    PROCEDURE ShipPartialServiceOrder@151();
    VAR
      ServiceHeader@1007 : Record 5900;
      ServiceLine@1008 : Record 5902;
    BEGIN
      // [SCENARIO 259256] Test Service Charge Line is generated after Partial shipment of Service Order.

      // [GIVEN] Modify Sales Receivables Setup, Create Service Order.
      Initialize;
      LibrarySales.SetCalcInvDiscount(TRUE);
      CreateServiceDocumentWithInvoiceDiscount(ServiceLine);
      ServiceHeader.GET(ServiceHeader."Document Type"::Order,ServiceLine."Document No.");

      // [WHEN] Post Service Order.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify.
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      Assert.IsTrue(ServiceLine.COUNT > 1,ServiceLineCountErr);
    END;

    [Test]
    PROCEDURE ShipServiceOrder@149();
    VAR
      ServiceHeader@1014 : Record 5900;
      ServiceLine@1013 : Record 5902;
    BEGIN
      // [SCENARIO 259256] Test Service Charge Line is not generated after shipping remaining quantity on Service Order.

      // [GIVEN] Modify Sales Receivables Setup, Create Service Order.
      Initialize;
      LibrarySales.SetCalcInvDiscount(TRUE);
      CreateServiceDocumentWithInvoiceDiscount(ServiceLine);
      ServiceHeader.GET(ServiceHeader."Document Type"::Order,ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      ServiceHeader.GET(ServiceHeader."Document Type"::Order,ServiceLine."Document No.");

      // [WHEN] Post Service Order.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify.
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      Assert.IsTrue(ServiceLine.COUNT > 1,ServiceLineCountErr);
    END;

    [Test]
    PROCEDURE ServiceOrderWithFullDiscountOnServiceLine@154();
    VAR
      Customer@1000 : Record 18;
      Item@1002 : Record 27;
      Resource@1005 : Record 156;
      ServiceItem@1003 : Record 5940;
      ServiceItemLine@1004 : Record 5901;
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1006 : Record 5902;
      ResLedgerEntry@1007 : Record 203;
    BEGIN
      // [SCENARIO 281469] Verify Resource Ledger Entry for Sale is created when posting a Resource line having 100% discount from a Service Order.

      // [GIVEN] Create Service Order with Resource with 100 % discount.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateServiceItem(ServiceItem,Customer."No.",LibraryInventory.CreateItem(Item));
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      LibraryResource.FindResource(Resource);
      CreateAndUpdateServiceLine(
        ServiceHeader,ServiceLine.Type::Resource,Resource."No.",LibraryRandom.RandInt(10),ServiceItemLine."Line No.",100);  // Use 100 for Full Discount and Random value for Quantity..
      GetServiceLine(ServiceLine,ServiceHeader);

      // [WHEN] Post Service Order.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] Verify Resource Ledger Entry for both Entry Type Sale and Usage.
      VerifyResourceLedgerEntry(
        ServiceLine."No.",FindServiceInvoiceHeader(ServiceHeader."No."),ResLedgerEntry."Entry Type"::Sale,-ServiceLine.Quantity,0);  // Total Price must be 0 in case of Full Discount.
      VerifyResourceLedgerEntry(
        ServiceLine."No.",FindServiceShipmentHeader(ServiceHeader."No."),ResLedgerEntry."Entry Type"::Usage,ServiceLine.Quantity,0);  // Total Price must be 0 in case of Full Discount.
    END;

    [Test]
    [HandlerFunctions(ServiceItemListHandler)]
    PROCEDURE NewServiceItemFromOrderUsingLookUp@158();
    VAR
      ServiceItemLine@1000 : Record 5901;
      ServiceItem@1001 : Record 5940;
      ServiceOrderPage@1002 : TestPage 5900;
    BEGIN
      // [SCENARIO 283776] New Service Item is created by LookUp from Order line
      // 1. Setup.
      Initialize;

      // Create Service Order.
      CreateServItemLineDescription(ServiceItemLine);

      // [WHEN] Open Service Order Page.
      ServiceOrderPage.OPENEDIT;
      ServiceOrderPage.FILTER.SETFILTER("No.",ServiceItemLine."Document No.");
      ServiceOrderPage.FIRST;
      ServiceOrderPage.ServItemLines.ServiceItemNo.LOOKUP;

      // [THEN] Verification of new Service Item on the created Service Line through the look up button.
      ServiceItem.GET(LibraryVariableStorage.DequeueText);
    END;

    [Test]
    PROCEDURE WarrantyLedgerEntryAsOpenFalse@164();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItem@1006 : Record 5940;
    BEGIN
      // [SCENARIO 294774] Create and Post Service Order and Verify Open field as False in Warranty Ledger Entry.

      // [GIVEN] Create Service Item and Service Order .
      Initialize;
      LibraryService.CreateServiceItem(ServiceItem,'');
      ServiceItem.VALIDATE("Warranty Starting Date (Parts)",WORKDATE);
      ServiceItem.MODIFY(TRUE);
      CreateServiceOrderWithWarranty(ServiceHeader,ServiceItem);

      // [WHEN] Post Service Order as Ship and Invoice.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] Verify Warranty Ledger Entry field Open as False.
      VerifyWarrantyLedgerEntry(ServiceHeader."No.");
    END;

    [Test]
    PROCEDURE OutStandingAmountOnServiceLines@167();
    VAR
      ServiceItem@1000 : Record 5940;
      ServiceHeader@1001 : Record 5900;
      Item@1002 : Record 27;
      Quantity@1006 : Decimal;
      UnitPrice@1007 : Decimal;
    BEGIN
      // [SCENARIO 309583] Create Service Order and Verify OutStanding Amount on Service Lines.

      // [GIVEN] Create Service Item and Item .
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      UnitPrice := LibraryRandom.RandDec(100,2);
      LibraryService.CreateServiceItem(ServiceItem,'');
      LibraryInventory.CreateItem(Item);

      // [WHEN] Create Service order.
      CreateServiceOrderWithMultipleLines(ServiceHeader,ServiceItem."Customer No.",ServiceItem."No.",Item."No.",Quantity,UnitPrice);

      // [THEN] Verify OutStanding Amount on Service Line.
      VerifyOutstandingAmountOnServiceLines(ServiceHeader."No.",Quantity,UnitPrice);
    END;

    [Test]
    PROCEDURE OutStandingAmountOnGLEntries@173();
    VAR
      ServiceItem@1002 : Record 5940;
      Item@1003 : Record 27;
      ServiceHeader@1004 : Record 5900;
      OrderNo@1005 : Code[20];
      TotalOutStandingAmount@1006 : Decimal;
    BEGIN
      // [SCENARIO 309583] Create and Post Service Order and Verify OutStanding Amount on Service Lines.

      // [GIVEN] Create Service Item and Item and Service Order.
      Initialize;
      LibraryService.CreateServiceItem(ServiceItem,'');
      LibraryInventory.CreateItem(Item);
      CreateServiceOrderWithMultipleLines(
        ServiceHeader,ServiceItem."Customer No.",ServiceItem."No.",Item."No.",LibraryRandom.RandDec(10,2),
        LibraryRandom.RandDec(100,2));
      OrderNo := ServiceHeader."No.";
      TotalOutStandingAmount := GetOutstandingAmountForServiceLines(ServiceHeader);

      // [WHEN] Post Service order.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] Verify Outstanding Amount On GL Entries.
      VerifyOutstandingAmountOnGLEntry(FindServiceInvoiceHeader(OrderNo),-1 * TotalOutStandingAmount);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,ContractTemplateHandler)]
    PROCEDURE ServiceContractWithInvoicePeriodYear@175();
    VAR
      ServiceContractHeader@1000 : Record 5965;
    BEGIN
      // [SCENARIO 312261] Verify Amount Per Period and Next Invoice Date on Service Contract Header When Invoice Period is Year.
      VerifyNextInvoiceDateAndAmountToPeriod(ServiceContractHeader."Invoice Period"::Year,1,CALCDATE('<CY+1Y>',WORKDATE));  // Amount Per Period for Year calculated using Amount divided by 1.
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,ContractTemplateHandler)]
    PROCEDURE ServiceContractWithInvoicePeriodMonth@176();
    VAR
      ServiceContractHeader@1001 : Record 5965;
    BEGIN
      // [SCENARIO 312261] Verify Amount Per Period and Next Invoice Date on Service Contract Header When Invoice Period is Month.
      VerifyNextInvoiceDateAndAmountToPeriod(ServiceContractHeader."Invoice Period"::Month,12,CALCDATE('<CY+1M>',WORKDATE));  // Amount Per Period for Month calculated using Amount divided by 12.
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,ContractTemplateHandler)]
    PROCEDURE ServiceContractWithInvoicePeriodQuarter@177();
    VAR
      ServiceContractHeader@1000 : Record 5965;
    BEGIN
      // [SCENARIO 312261] Verify Amount Per Period and Next Invoice Date on Service Contract Header When Invoice Period is Quarter.
      VerifyNextInvoiceDateAndAmountToPeriod(ServiceContractHeader."Invoice Period"::Quarter,4,CALCDATE('<CY+3M>',WORKDATE));  // Amount Per Period for Quarter calculated using Amount divided by 4.
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,ContractTemplateHandler)]
    PROCEDURE ServiceContractWithPriceUpdatePeriod@174();
    VAR
      Customer@1001 : Record 18;
      ServiceContractHeader@1000 : Record 5965;
      PriceUpdatePeriod@1002 : DateFormula;
    BEGIN
      // [SCENARIO 316447] Test error occurs on validating Price Update Period less than Invoice Period on Service Contract.

      // [GIVEN] Create Service Contract Header.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,Customer."No.");
      ServiceContractHeader.VALIDATE("Starting Date",CALCDATE('<CY+1D>',WORKDATE));  // Starting Date should be First Day of the Next Year.
      ServiceContractHeader.VALIDATE("Invoice Period",ServiceContractHeader."Invoice Period"::Year);
      ServiceContractHeader.MODIFY(TRUE);
      EVALUATE(PriceUpdatePeriod,STRSUBSTNO('<%1M>',LibraryRandom.RandInt(11)));

      // [WHEN] Try to set Price Update Period Less than 12M.
      ASSERTERROR ServiceContractHeader.VALIDATE("Price Update Period",PriceUpdatePeriod);

      // [THEN] Verify error message on Service Contract Header.
      Assert.ExpectedError(PriceUpdatePeriodErr);
    END;

    [Test]
    [HandlerFunctions(ResGrAvailabilityServiceHandler,ResGrAvailServMatrixHandler)]
    PROCEDURE CheckServiceResourceGroupAvailability@179();
    VAR
      ServiceItemLine@1001 : Record 5901;
      ResourceAllocations@1003 : TestPage 6005;
    BEGIN
      // [SCENARIO 324493] Check that program does not populate error while displaying matrix in Resource Group Availability window.

      // [GIVEN] Create Service Order.
      Initialize;
      CreateServiceOrderWithServiceItem(ServiceItemLine);
      ResourceAllocations.OPENEDIT;
      ResourceAllocations.FILTER.SETFILTER("Document No.",ServiceItemLine."Document No.");
      ResourceAllocations.FILTER.SETFILTER("Service Item No.",ServiceItemLine."Service Item No.");

      // [WHEN] Call "Res.Group Availability" action on Resource Allocations page.
      ResourceAllocations.ResGroupAvailability.INVOKE;

      // [THEN] Verify as no error occurs when Showmatrix is call in ResGrAvailabilityServiceHandler.
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE ServiceOrderWithRepSysProdOrderAndWarrantyTrue@188();
    VAR
      Item@1001 : Record 27;
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // [SCENARIO 331971] Verify Service Item No. created on Service Item Line when Item Replenishment System is Prod. Order and Warranty is True for Service Order.
      ServiceItemNoCreatedOnServiceItemLine(ServiceHeader."Document Type"::Order,TRUE,Item."Replenishment System"::"Prod. Order");
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE ServiceOrderWithRepSysProdOrderAndWarrantyFalse@189();
    VAR
      Item@1001 : Record 27;
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // [SCENARIO 331971] Verify Service Item No. created on Service Item Line when Item Replenishment System is Prod. Order and Warranty is False for Service Order.
      ServiceItemNoCreatedOnServiceItemLine(ServiceHeader."Document Type"::Order,FALSE,Item."Replenishment System"::"Prod. Order");
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE ServiceQuoteWithRepSysProdOrderAndWarrantyTrue@185();
    VAR
      Item@1001 : Record 27;
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // [SCENARIO 331971] Verify Service Item No. created on Service Item Line when Item Replenishment System is Prod. Order and Warranty is True for Service Quote.
      ServiceItemNoCreatedOnServiceItemLine(ServiceHeader."Document Type"::Quote,TRUE,Item."Replenishment System"::"Prod. Order");
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE ServiceQuoteWithRepSysProdOrderAndWarrantyFalse@184();
    VAR
      Item@1001 : Record 27;
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // [SCENARIO 331971] Verify Service Item No. created on Service Item Line when Item Replenishment System is Prod. Order and Warranty is False for Service Quote.
      ServiceItemNoCreatedOnServiceItemLine(ServiceHeader."Document Type"::Quote,FALSE,Item."Replenishment System"::"Prod. Order");
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE ServiceOrderWithRepSysPurchaseAndWarrantyFalse@196();
    VAR
      Item@1001 : Record 27;
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // [SCENARIO 331971] Verify Service Item No. created on Service Item Line when Item Replenishment System is Purchase and Warranty is False for Service Order.
      ServiceItemNoCreatedOnServiceItemLine(ServiceHeader."Document Type"::Order,FALSE,Item."Replenishment System"::Purchase);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler)]
    PROCEDURE ServiceQuoteWithRepSysPurchaseAndWarrantyFalse@194();
    VAR
      Item@1001 : Record 27;
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // [SCENARIO 331971] Verify Service Item No. created on Service Item Line when Item Replenishment System is Purchase and Warranty is False for Service Order.
      ServiceItemNoCreatedOnServiceItemLine(ServiceHeader."Document Type"::Quote,FALSE,Item."Replenishment System"::Purchase);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE ServiceOrderWithRepSysPurchaseAndWarrantyTrue@197();
    VAR
      Item@1001 : Record 27;
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // [SCENARIO 331971] Verify Error message while Creating Service Item when Item Replenishment System is Purchase and Warranty is True for Service Order.
      VendorErrorMessageWhileCreatingServiceItem(ServiceHeader."Document Type"::Order,TRUE,Item."Replenishment System"::Purchase);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE ServiceQuoteWithRepSysPurchaseAndWarrantyTrue@195();
    VAR
      Item@1001 : Record 27;
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // [SCENARIO 331971] Verify Error message while Creating Service Item when Item Replenishment System is Purchase and Warranty is True for Service Quote.
      VendorErrorMessageWhileCreatingServiceItem(ServiceHeader."Document Type"::Quote,TRUE,Item."Replenishment System"::Purchase);
    END;

    [Test]
    PROCEDURE VerifyDefaultBinCodeOnServiceLine@187();
    VAR
      Bin@1003 : Record 7354;
      Item@1002 : Record 27;
      ServiceLine@1001 : Record 5902;
    BEGIN
      // [SCENARIO 332644] Verify that Bin Code exist on Service Invoice Line,When re-enter Item No. removes the default Bin.

      // [GIVEN] Create Service Document with Bin Code.
      Initialize;
      LibraryInventory.CreateItem(Item);
      CreateBinAndBinContent(Bin,Item);
      CreateServiceDocumentWithLocation(ServiceLine,Item."No.",Bin."Location Code");

      // [WHEN] Re-enter Item No.
      ServiceLine.VALIDATE("No.",Item."No.");

      // [THEN] Verify Bin Code exist on Service Line.
      ServiceLine.TESTFIELD("Bin Code",Bin.Code);
    END;

    [Test]
    [HandlerFunctions(ServiceStatisticsPageHandler)]
    PROCEDURE VerifyVATAmountOnServiceInvoiceStatistics@209();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // [SCENARIO 333709] Verify VAT Amount on Service Invoice Statistics when Invoice Rounding Precision updated .
      VerifyVATAmountOnServiceStatistics(ServiceHeader."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(ServiceStatisticsPageHandler)]
    PROCEDURE VerifyVATAmountOnServiceCreditMemoStatistics@204();
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      // [SCENARIO 333709] Verify VAT Amount on Service Credit Memo Statistics when Invoice Rounding Precision updated .
      VerifyVATAmountOnServiceStatistics(ServiceHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE VerifyVATAmountOnPostedServiceCreditMemoStatistics@211();
    VAR
      Customer@1009 : Record 18;
      Item@1003 : Record 27;
      ServiceHeader@1001 : Record 5900;
      VATPostingSetup@1010 : Record 325;
    BEGIN
      // [SCENARIO 333709] Verify Amount Excl. VAT on Service Credit Memo Statistics when Invoice Rounding Precision updated.

      // [GIVEN] Modify General Ledger Setup and Create Service Credit Memo.
      Initialize;
      LibraryERM.SetInvRoundingPrecisionLCY(
        LibraryRandom.RandInt(5) + LibraryUtility.GenerateRandomFraction);

      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Customer.MODIFY(TRUE);
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      Item.MODIFY(TRUE);
      CreateServiceDocument(ServiceHeader,ServiceHeader."Document Type"::"Credit Memo",Customer."No.",
        Item."No.",LibraryRandom.RandDec(10,2),LibraryRandom.RandDec(1000,2));

      // [WHEN] Post Service Order.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] Verify "Amount Excluding VAT" on Posted Credit Memo Statistics,
      VerifyAmountExclVATOnPostedCrMemoStatistics(ServiceHeader."Customer No.");
    END;

    [Test]
    [HandlerFunctions(ServiceOrderSubformPageHandler)]
    PROCEDURE VerifyServiceLinesAsPerServiceItem@212();
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1001 : Record 5902;
      ServiceOrder@1008 : TestPage 5900;
    BEGIN
      // [SCENARIO 6749] Verify Service Lines are shown per Service Item.

      // [GIVEN] Create Multiple Service Item Lines with Service Line.
      Initialize;
      CreateServiceOrderWithMultipleServiceItemLines(ServiceHeader);
      GetServiceLine(ServiceLine,ServiceHeader);
      OpenServiceOrderPage(ServiceOrder,ServiceHeader."No.");
      LibraryVariableStorage.Enqueue(ServiceOrder.ServItemLines.ServiceItemNo.VALUE);
      LibraryVariableStorage.Enqueue(ServiceLine."No.");

      // [WHEN] Invoke Service Lines.
      ServiceOrder.ServItemLines."Service Lines".INVOKE;

      // [THEN] Verification done in ServiceLinesSubformHandler.
    END;

    [Test]
    [HandlerFunctions(ServiceOrderSubformPageHandler)]
    PROCEDURE VerifyServiceLinesWithOutServiceItem@217();
    VAR
      Item@1003 : Record 27;
      ServiceHeader@1000 : Record 5900;
      ServiceItemLine@1001 : Record 5901;
      ServiceLine@1002 : Record 5902;
      ServiceOrder@1008 : TestPage 5900;
    BEGIN
      // [SCENARIO 6749] Verify Service Line should be blank when Service Item Line created without Service Item.

      // [GIVEN] Create Multiple Service Item Lines with Service Line and One Service Item Line Without Service Item.
      Initialize;
      CreateServiceOrderWithMultipleServiceItemLines(ServiceHeader);
      CreateServiceItemLine(ServiceItemLine,ServiceHeader);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItem(Item));
      UpdateServiceLineWithRandomQtyAndPrice(ServiceLine,ServiceItemLine."Line No.");
      OpenServiceOrderPage(ServiceOrder,ServiceHeader."No.");
      ServiceOrder.ServItemLines.FILTER.SETFILTER(Description,ServiceItemLine.Description);
      LibraryVariableStorage.Enqueue('');
      LibraryVariableStorage.Enqueue(Item."No.");

      // [WHEN] Invoke Balnk Service Item Service Lines.
      ServiceOrder.ServItemLines."Service Lines".INVOKE;

      // [THEN] Verification done in ServiceLinesSubformHandler.
    END;

    [Test]
    PROCEDURE CheckNoOverFlowErrorExistOnServiceLine@213();
    VAR
      ServiceHeader@1000 : Record 5900;
      Item@1001 : Record 27;
    BEGIN
      // [SCENARIO 116417] Verify that no Overflow error on service line with more ranges.

      // [GIVEN]
      Initialize;

      // [WHEN] Create Service order with large random values.
      CreateServiceDocument(
        ServiceHeader,ServiceHeader."Document Type"::Order,
        LibrarySales.CreateCustomerNo,LibraryInventory.CreateItem(Item),
        LibraryRandom.RandIntInRange(10000000,2147483647),
        LibraryRandom.RandDecInRange(0,1,3));

      // [THEN] Verifying service line amount.
      VerifyServiceLineAmount(ServiceHeader."Document Type",ServiceHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,ContractTemplateHandler)]
    PROCEDURE CheckServiceLedgerEntriesWithInvoicePeriodYear@216();
    VAR
      ServiceContractHeader@1000 : Record 5965;
    BEGIN
      // [SCENARIO 55518] Check the service ledger entry with Invoice Period Year.
      ServiceContractWithInvoicePeriod(ServiceContractHeader."Invoice Period"::Year,12);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,ContractTemplateHandler)]
    PROCEDURE CheckServiceLedgerEntriesWithInvoicePeriodMonth@219();
    VAR
      ServiceContractHeader@1000 : Record 5965;
    BEGIN
      // [SCENARIO 55518] Check the service ledger entry with Invoice Period Month.
      ServiceContractWithInvoicePeriod(ServiceContractHeader."Invoice Period"::Month,1);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,ContractTemplateHandler)]
    PROCEDURE CheckServiceLedgerEntriesWithInvoicePeriodQuarter@220();
    VAR
      ServiceContractHeader@1000 : Record 5965;
    BEGIN
      // [SCENARIO 55518] Check the service ledger entry with Invoice Period Quarter.
      ServiceContractWithInvoicePeriod(ServiceContractHeader."Invoice Period"::Quarter,3);
    END;

    LOCAL PROCEDURE ServiceContractWithInvoicePeriod@221(InvoicePeriod@1007 : Option;NoOfEntries@1000 : Integer);
    VAR
      ServiceContractHeader@1001 : Record 5965;
      ServiceContractLine@1002 : Record 5964;
      ServiceContractLine2@1003 : Record 5964;
      SignServContractDoc@1004 : Codeunit 5944;
      SavedDate@1005 : Date;
    BEGIN
      // Setup: Create and signed service contract.
      Initialize;
      SavedDate := WORKDATE;
      WORKDATE := CALCDATE('<CY+1D>',WORKDATE); // First day of the year.
      CreateServiceContractHeader(ServiceContractHeader,InvoicePeriod);
      CreateServiceContractLineWithPriceUpdatePeriod(ServiceContractHeader,ServiceContractLine);
      CreateServiceContractLineWithPriceUpdatePeriod(ServiceContractHeader,ServiceContractLine2);
      UpdateServiceContract(ServiceContractHeader);
      SignServContractDoc.SignContract(ServiceContractHeader);
      ServiceContractHeader.GET(ServiceContractHeader."Contract Type",ServiceContractHeader."Contract No.");

      // Exercise: Create and Post Service Invoice.
      CreateAndPostServiceInvoice(ServiceContractHeader);

      // Verify : Verifying Service Ledger Entry with Invoice period.
      VerifyServiceLedgerEntryWithUnitPrice(ServiceContractLine,NoOfEntries);
      VerifyServiceLedgerEntryWithUnitPrice(ServiceContractLine2,NoOfEntries);

      // Tear Down:
      WORKDATE := SavedDate;
    END;

    [Test]
    [HandlerFunctions(CheckCreditLimitHandlerTotal,GetServiceShipmentLinesHandler)]
    PROCEDURE CheckCreditLimitCustomerTotalAmount@224();
    VAR
      ServiceHeader@1003 : Record 5900;
    BEGIN
      // [FEATURE] [Credit Limit] [UI]
      // [SCENARIO 352311] Verify Total Amount on Check Credit Limit page when having Invoice with Get Shipment Lines.

      // [GIVEN] Set StockOut warning and Credit Warnings, Create Customer and Item.
      Initialize;
      UpdateSalesReceivablesSetup;

      CreateDocWithLineAndGetShipmentLine(ServiceHeader);
      // [WHEN] Open Service Order page with New Order
      OpenServiceOrderPageWithNewOrder(ServiceHeader."Customer No.");
      // [THEN] Verification of the Total Amount is done in CheckCreditLimitHandlerTotal.
    END;

    [Test]
    [HandlerFunctions(CheckCreditLimitHandlerTotal,GetServiceShipmentLinesHandler)]
    PROCEDURE CheckCreditLimitCustomerTotalAmountFromLine@235();
    VAR
      ServiceHeader@1003 : Record 5900;
    BEGIN
      // [FEATURE] [Credit Limit] [UI]
      // [SCENARIO 353097] Verify Total Amount on Check Credit Limit page when having Invoice with Get Shipment Lines in case of Unit Price line validation

      // [GIVEN] Set StockOut warning and Credit Warnings, Create Customer and Item.
      Initialize;
      UpdateSalesReceivablesSetup;

      CreateDocWithLineAndGetShipmentLine(ServiceHeader);
      // [WHEN] Validate "Unit Price" on Service Invoice page
      OpenServiceInvoicePageAndValidateUnitPrice(ServiceHeader."No.");
      // [THEN] Verification of the Total Amount is done in CheckCreditLimitHandlerTotal.
    END;

    [Test]
    [HandlerFunctions(ServiceLinesValidateUnitPrice_MPH,CheckCreditLimit_ReplyYes_MPH)]
    PROCEDURE CheckCreditLimitCustomerServiceLine_Negative@120();
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1001 : Record 5902;
      ServiceOrder@1005 : TestPage 5900;
      UnitPrice@1002 : Decimal;
    BEGIN
      // [FEATURE] [Credit Limit] [UI]
      // [SCENARIO 378637] Credit limit warning page is opened when validate Service Line with exceeded amount
      Initialize;
      UpdateSalesReceivablesSetup;

      // [GIVEN] Customer "C" with "Credit Limit" = "A"
      // [GIVEN] Service Order for customer "C" with total amount = "A". Service Line "Quantity" = 1, "Unit Price" = "X"
      CreateServiceOrderWithItem(ServiceHeader,LibrarySales.CreateCustomerNo,'',LibraryInventory.CreateItemNo,1);
      UpdateCustomerCreditLimit(
        ServiceHeader."Customer No.",CalcTotalLineAmount(ServiceHeader."Document Type",ServiceHeader."No."));
      GetServiceLine(ServiceLine,ServiceHeader);
      UnitPrice := ServiceLine."Unit Price";
      // [GIVEN] Modify Service Line "Unit Price" = "X" + 0.01 (through the Service Line page)
      LibraryVariableStorage.Enqueue(UnitPrice + LibraryERM.GetAmountRoundingPrecision);
      LibraryVariableStorage.Enqueue(ServiceHeader."Customer No.");
      ServiceOrder.OPENEDIT;
      ServiceOrder.GOTORECORD(ServiceHeader);
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      ServiceOrder.CLOSE;
      // [GIVEN] Credit Limit warning page is opened for customer "C"
      // "CheckCreditLimit_ReplyYes_MPH" handler

      // [WHEN] Close credit limit warning page with "OK" action.
      // [THEN] No error occurs and Service Line "Unit Price" = "X" + 0.01
      ServiceLine.FIND;
      Assert.AreEqual(
        UnitPrice + LibraryERM.GetAmountRoundingPrecision,
        ServiceLine."Unit Price",
        ServiceLine.FIELDCAPTION("Unit Price"));
    END;

    [Test]
    [HandlerFunctions(CheckCreditLimitHandler)]
    PROCEDURE CheckCreditLimitCustomerServiceLine_Negative_UT@238();
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1001 : Record 5902;
      CustCheckCrLimit@1003 : Codeunit 312;
    BEGIN
      // [FEATURE] [Credit Limit] [UT]
      // [SCENARIO 378637] Error is shown after close Credit limit warning page with "No" action after validate Service Line with exceeded amount
      Initialize;
      UpdateSalesReceivablesSetup;

      // [GIVEN] Customer "C" with "Credit Limit" = "A"
      // [GIVEN] Service Order for customer "C" with total amount = "A". Service Line "Quantity" = 1, "Unit Price" = "X"
      CreateServiceOrderWithItem(ServiceHeader,LibrarySales.CreateCustomerNo,'',LibraryInventory.CreateItemNo,1);
      UpdateCustomerCreditLimit(
        ServiceHeader."Customer No.",CalcTotalLineAmount(ServiceHeader."Document Type",ServiceHeader."No."));
      // [GIVEN] Modify Service Line "Unit Price" = "X" + 0.01
      GetServiceLine(ServiceLine,ServiceHeader);
      UpdateServiceLine(
        ServiceLine,ServiceLine."Service Item Line No.",1,ServiceLine."Unit Price" + LibraryERM.GetAmountRoundingPrecision);
      // [GIVEN] Credit Limit warning page is opened for customer "C"
      // "CheckCreditLimitHandler" handler

      // [WHEN] Close credit limit warning page with "NO" action.
      // [THEN] Error occurs: "The update has been interrupted to respect the warning."
      LibraryVariableStorage.Enqueue(ServiceHeader."Customer No.");
      ASSERTERROR CustCheckCrLimit.ServiceLineCheck(ServiceLine);
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(CustCheckCrLimitErr);
    END;

    [Test]
    [HandlerFunctions(ServiceLinesValidateUnitPrice_MPH)]
    PROCEDURE CheckCreditLimitCustomerServiceLine_Positive@341();
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1002 : Record 5902;
      ServiceOrder@1005 : TestPage 5900;
      UnitPrice@1004 : Decimal;
    BEGIN
      // [FEATURE] [Credit Limit]
      // [SCENARIO 378637] Credit limit warning page is not opened when validate Service Line with max amount
      Initialize;
      UpdateSalesReceivablesSetup;

      // [GIVEN] Customer "C" with "Credit Limit" = "A"
      // [GIVEN] Service Order for customer "C" with total amount = "A". Service Line "Quantity" = 1, "Unit Price" = "X"
      CreateServiceOrderWithItem(ServiceHeader,LibrarySales.CreateCustomerNo,'',LibraryInventory.CreateItemNo,1);
      UpdateCustomerCreditLimit(
        ServiceHeader."Customer No.",CalcTotalLineAmount(ServiceHeader."Document Type",ServiceHeader."No."));
      // [GIVEN] Modify Service Line "Unit Price" = 0
      GetServiceLine(ServiceLine,ServiceHeader);
      UnitPrice := ServiceLine."Unit Price";
      UpdateServiceLine(ServiceLine,ServiceLine."Service Item Line No.",1,0);

      // [WHEN] Modify Service Line "Unit Price" = "X" (through the Service Line page)
      LibraryVariableStorage.Enqueue(UnitPrice);
      ServiceOrder.OPENEDIT;
      ServiceOrder.GOTORECORD(ServiceHeader);
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      ServiceOrder.CLOSE;

      // [THEN] Credit Limit warning page is not opened and ServiceLine."Unit Price" = "X"
      ServiceLine.FIND;
      Assert.AreEqual(UnitPrice,ServiceLine."Unit Price",ServiceLine.FIELDCAPTION("Unit Price"));
    END;

    [Test]
    [HandlerFunctions(ServiceLinesValidateQuantity_MPH,CheckCreditLimit_ReplyYes_MPH)]
    PROCEDURE CheckCreditLimitCustomerServiceLine_Quantity@225();
    VAR
      Location@1003 : Record 14;
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1001 : Record 5902;
      ServiceOrder@1005 : TestPage 5900;
      Quantity@1002 : Decimal;
    BEGIN
      // [FEATURE] [Credit Limit] [UI]
      // [SCENARIO 378946] Credit limit warning page is opened once when validate Service Line with exceeded Quantity
      Initialize;
      UpdateSalesReceivablesSetup;

      // [GIVEN] Customer with Credit Limit
      // [GIVEN] Service Order (used Location with "Require Shipment" = TRUE). Service Line "Quantity" = 1.
      LibraryWarehouse.CreateLocationWMS(Location,FALSE,FALSE,FALSE,FALSE,TRUE);
      CreateServiceOrderWithItem(ServiceHeader,LibrarySales.CreateCustomerNo,Location.Code,LibraryInventory.CreateItemNo,1);
      UpdateCustomerCreditLimit(
        ServiceHeader."Customer No.",CalcTotalLineAmount(ServiceHeader."Document Type",ServiceHeader."No."));
      GetServiceLine(ServiceLine,ServiceHeader);
      Quantity := ServiceLine.Quantity;
      // [GIVEN] Modify Service Line "Quantity" = 2 (through the Service Line page)
      LibraryVariableStorage.Enqueue(Quantity + LibraryERM.GetAmountRoundingPrecision);
      LibraryVariableStorage.Enqueue(ServiceHeader."Customer No.");
      ServiceOrder.OPENEDIT;
      ServiceOrder.GOTORECORD(ServiceHeader);
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      ServiceOrder.CLOSE;
      // [GIVEN] Credit Limit warning page is opened

      // [WHEN] Close credit limit warning page with "OK" action.
      // "CheckCreditLimit_ReplyYes_MPH" handler

      // [THEN] No error occurs and Service Line "Quantity" = 2. No more credit limit warning page is shown.
      ServiceLine.FIND;
      Assert.AreEqual(
        Quantity + LibraryERM.GetAmountRoundingPrecision,
        ServiceLine.Quantity,
        ServiceLine.FIELDCAPTION("Unit Price"));
      Assert.AreEqual(1,LibraryVariableStorage.Length,CustCheckCrLimitOnceErr);
    END;

    LOCAL PROCEDURE CreateDocWithLineAndGetShipmentLine@230(VAR NewServiceHeader@1001 : Record 5900);
    VAR
      VATPostingSetup@1009 : Record 325;
      ServiceHeader@1006 : Record 5900;
      CustomerNo@1005 : Code[20];
      ItemNo@1008 : Code[20];
      CreditLimit@1004 : Decimal;
      TotalAmount@1000 : Decimal;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      CustomerNo := CreateCustomerWithVATBusPostingGroup(VATPostingSetup."VAT Bus. Posting Group");
      ItemNo := CreateItem(VATPostingSetup."VAT Prod. Posting Group");

      // Create and Ship Service Order. Set Unit Price more than Credit Limit.
      CreateServiceOrderWithItem(ServiceHeader,CustomerNo,'',ItemNo,1);
      CreditLimit := CalcTotalLineAmount(ServiceHeader."Document Type",ServiceHeader."No.") - LibraryERM.GetAmountRoundingPrecision;
      UpdateCustomerCreditLimit(ServiceHeader."Customer No.",CreditLimit);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      TotalAmount := CalcTotalLineAmount(ServiceHeader."Document Type",ServiceHeader."No.");
      LibraryVariableStorage.Enqueue(TotalAmount);

      // Create Service Invoice and Get Shipment Lines.
      CreateServiceDocument(
        NewServiceHeader,NewServiceHeader."Document Type"::Invoice,CustomerNo,
        ItemNo,LibraryRandom.RandIntInRange(10,20),LibraryRandom.RandDecInRange(1000,2000,2));

      TotalAmount += CalcTotalLineAmount(NewServiceHeader."Document Type",NewServiceHeader."No.");
      LibraryVariableStorage.Enqueue(TotalAmount);
      OpenServiceInvoicePage(NewServiceHeader."No.");
    END;

    [Test]
    PROCEDURE CheckServiceOrderPostedWithLastCommentLine@229();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1003 : Record 5902;
      Resource@1005 : Record 156;
      ServiceItemLineNo@1004 : Integer;
      PrevAutomaticCostPosting@1007 : Boolean;
    BEGIN
      // [SCENARIO 354415] Check that Service Order having last Service Line with comment only can be posted.

      // 1. Setup.
      Initialize;
      LibraryERM.SetUseLegacyGLEntryLocking(TRUE);
      PrevAutomaticCostPosting := UpdateAutomaticCostPosting(TRUE);

      // 2. Exercise.
      ServiceItemLineNo := CreateServiceOrder(ServiceHeader,'');
      LibraryResource.FindResource(Resource);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,Resource."No.");
      UpdateServiceLineWithRandomQtyAndPrice(ServiceLine,ServiceItemLineNo);
      CreateDescriptionServiceLine(ServiceHeader,ServiceLine.Type::" ",'',ServiceItemLineNo);

      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. Verify.
      VerifyServiceShipmentItemLineCount(ServiceHeader."No.",1);

      // 4. Teardown
      UpdateAutomaticCostPosting(PrevAutomaticCostPosting);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandlerWithAnswer)]
    PROCEDURE ValidateBillToCustomerNoInServiceHeader@250();
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1004 : Record 5902;
      GeneralLedgerSetup@1002 : Record 98;
      Customer1@1003 : Record 18;
      Customer2@1005 : Record 18;
    BEGIN
      // [SCENARIO 363375] "VAT Bus. Posting Group" should not be updated if "Bill-to Customer No." update is not confirmed.
      Initialize;
      // Setup for test
      LibraryERM.SetBillToSellToVATCalc(GeneralLedgerSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No.");
      // [GIVEN] Service Order ("SO") for "Bill-to Customer No." = "C1", "VAT Bus. Posting Group" = "V1"
      CreateCustomerWithVATBusPostGroup(Customer1);
      // [GIVEN] Customer "C2", where "VAT Bus. Posting Group" = "V2"
      CreateCustomerWithVATBusPostGroup(Customer2);
      CreateServiceInvoiceWithServiceLine(ServiceHeader,ServiceLine,Customer1."No.");
      // [WHEN] Change Customer "C1" to "C2" in "SO". Confirm update of "SO"."Sell-to Customer No." and cancel update of "SO"."Bill-to Customer No."
      ChangeCustomerNo(ServiceHeader,Customer2."No.");
      // [THEN] "Service Header"."VAT Bus. Posting Group" = "V1"
      // [THEN] "Service Line"."VAT Bus. Posting Group" = "V1"
      VerifyVATBusPostGroupServiceOrder(ServiceHeader,ServiceLine,Customer1."VAT Bus. Posting Group");
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE ValidateLoanerOnServiceItemLineWithDelayedInsert@330();
    VAR
      ServiceItemLine@1003 : Record 5901;
      ServiceHeader@1002 : Record 5900;
      ServiceItem@1001 : Record 5940;
    BEGIN
      // [SCENARIO 360806] Loaner Entry is inserted when Loaner No. change is confirmed

      // [GIVEN] Service Order
      Initialize;
      LibraryService.CreateServiceItem(ServiceItem,'');
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");

      // [GIVEN] Service Item Line with Loaner to be inserted
      WITH ServiceItemLine DO BEGIN
        INIT;
        VALIDATE("Document Type",ServiceHeader."Document Type");
        VALIDATE("Document No.",ServiceHeader."No.");
        VALIDATE("Service Item No.",ServiceItem."No.");
        VALIDATE("Loaner No.",CreateLoaner);
      END;

      // [WHEN] Answer yes on the confirmation dialog when inserting Service Item Line
      ServiceItemLine.INSERT(TRUE);

      // [THEN] Loaner Entry is created
      VerifyLoanerEntryExists(ServiceItemLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE ChangeLoanerOnServiceItemLine@339();
    VAR
      ServiceItemLine@1003 : Record 5901;
      ServiceHeader@1002 : Record 5900;
    BEGIN
      // [SCENARIO 360806] Loaner entry is created if change Loaner No.

      // [GIVEN] Service Order with "Loaner No." = "A"
      Initialize;
      CreateServiceDocWithLoaner(ServiceHeader,ServiceItemLine,ServiceHeader."Document Type"::Order);
      // [GIVEN] Receive Loaner "A"
      ReceiveLoanerOnServiceOrder(ServiceItemLine,ServiceItemLine."Service Item No.");

      // [GIVEN] Change Loaner No. from "A" to "B"
      ServiceItemLine.VALIDATE("Loaner No.",CreateLoaner);

      // [WHEN] Answer yes on the confirmation dialog "Do you want to lend?"
      ServiceItemLine.MODIFY(TRUE);

      // [THEN] Loaner Entry is created for Loaner "B"
      VerifyLoanerEntryExists(ServiceItemLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandlerForFalse)]
    PROCEDURE EmptyLoanerWhenCancelLendConfirmation@352();
    VAR
      ServiceItemLine@1001 : Record 5901;
      ServiceHeader@1000 : Record 5900;
    BEGIN
      // [SCENARIO 360806] Loaner Entry is not inserted when Loaner No. change is not confirmed

      // [GIVEN] Service Order with Loaner
      CreateServiceDocWithLoaner(ServiceHeader,ServiceItemLine,ServiceHeader."Document Type"::Order);

      // [WHEN] Confirmation is canceled by ConfirmMessageHandlerForFalse

      // [THEN] Loaner No. is empty and Loaner Entry is not created
      Assert.AreEqual('',ServiceItemLine."Loaner No.",LoanerNoIsNotEmptyErr);
      VerifyLoanerEntryDoesNotExist(ServiceItemLine);
    END;

    [Test]
    [HandlerFunctions(ServiceItemWorksheetHandlerOneLine)]
    PROCEDURE ServiceItemWrkshLineInsertMultiple@231();
    VAR
      ServiceItem@1001 : Record 5940;
      ServiceHeader@1000 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      Customer@1003 : Record 18;
      ServiceOrder@1009 : TestPage 5900;
      i@1006 : Integer;
      NoOfServiceItemLines@1008 : Integer;
    BEGIN
      // [SCENARIO 120370] Check possibility of creation Service Line for each of >16 Service Item Lines
      // [GIVEN] Service Order with 16 Service Item Lines
      Initialize;
      NoOfServiceItemLines := 16;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
      LibraryService.CreateServiceHeader(
        ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      FOR i := 1 TO NoOfServiceItemLines DO
        LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      OpenServiceOrderPage(ServiceOrder,ServiceHeader."No.");
      // [WHEN] User adds Service Line for each Service Item Line
      FOR i := 1 TO NoOfServiceItemLines DO BEGIN
        ServiceOrder.ServItemLines."Service Item Worksheet".INVOKE;
        ServiceOrder.ServItemLines.NEXT;
      END;
      ServiceOrder.OK.INVOKE;
      // [THEN] No error message appears and Service Line linked with last Service Item Line exists
      VerifyLinkedServiceLineExists(
        ServiceHeader."Document Type",ServiceHeader."No.",
        FindLastServiceItemLineNo(ServiceHeader."Document Type",ServiceHeader."No."));
    END;

    [Test]
    [HandlerFunctions(InsertTravelFeePageHandler)]
    PROCEDURE ServiceItemWrkshLineInsertFee@294();
    VAR
      ServiceItem@1008 : Record 5940;
      ServiceHeader@1007 : Record 5900;
      ServiceItemLine@1006 : Record 5901;
      ServiceLine@1009 : Record 5902;
      ServiceOrder@1000 : TestPage 5900;
      NoOfInsertFees@1004 : Integer;
    BEGIN
      // [SCENARIO 121069] Check error message appears after Inserting 16 Fees in Service Item Worksheet
      // [GIVEN] Service Order with Service Line
      Initialize;
      CreateServiceItemWithZone(ServiceItem);
      LibraryService.CreateServiceHeader(
        ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      OpenServiceOrderPage(ServiceOrder,ServiceHeader."No.");
      NoOfInsertFees := 16;
      LibraryVariableStorage.Enqueue(NoOfInsertFees);
      // [WHEN] User inserts 16 Travel Fees, 16th Line "Line No." should have value of already existing line
      ASSERTERROR ServiceOrder.ServItemLines."Service Item Worksheet".INVOKE;
      // [THEN] Error message appears that user cannot anymore insert lines at current position, not that the line already exists
      Assert.ExpectedError(STRSUBSTNO(ThereIsNotEnoughSpaceToInsertErr,ServiceLine.TABLECAPTION));
    END;

    [Test]
    PROCEDURE ServiceLineInsertAfterLastLine@293();
    BEGIN
      // [SCENARIO 361240] 1 Service Line. Insert new Service Line after 1st line
      CheckServiceLineInsertion(1,TRUE,FALSE,20000);
    END;

    [Test]
    PROCEDURE ServiceLineInsertAfterLastLinePrevFocusOnFirst@251();
    BEGIN
      // [SCENARIO 364477] 2 Service Lines. Set focus on 1st line. Insert new Service Line after 2nd line
      CheckServiceLineInsertion(1,TRUE,TRUE,30000);
    END;

    [Test]
    PROCEDURE ServiceLineInsertBetweenLines@258();
    BEGIN
      // [SCENARIO 361240] 2 Service Lines. Insert new Service Line after 1st line
      CheckServiceLineInsertion(2,FALSE,TRUE,15000);
    END;

    [Test]
    PROCEDURE ServiceLineInsertBeforeFirstLine@335();
    BEGIN
      // [SCENARIO 361240] 1 Service Line. Insert new Service Line before 1st line
      CheckServiceLineInsertion(1,FALSE,FALSE,5000);
    END;

    [Test]
    PROCEDURE ServiceLineNoLinesInsertNew@240();
    VAR
      ServiceItemLine@1000 : Record 5901;
      ServiceLineBeforeAfterInsert@1002 : Record 5902;
    BEGIN
      // [SCENARIO 120370] User is able to insert new Service Line to the empty Service Item Worksheet
      CreateServiceOrderWithServiceItem(ServiceItemLine);
      ServiceLineBeforeAfterInsert.INIT;

      VerifyServiceLineInsertLineNo(
        ServiceItemLine."Document Type",ServiceItemLine."Document No.",
        ServiceLineBeforeAfterInsert,FALSE,10000);
    END;

    [Test]
    PROCEDURE ServiceOrderFromQuoteCustomerLocationCode@287();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      Customer@1003 : Record 18;
      Location@1005 : Record 14;
    BEGIN
      // [SCENARIO 121634] Make Order should Create Service Order with Location Code value taken from Customer
      Initialize;
      // [GIVEN] Customer with defined Location Code
      CreateCustomerWithLocationCode(Customer,Location);
      // [GIVEN] Service Quote
      CreateServiceDocumentWithServiceItem(ServiceHeader,ServiceItemLine,ServiceHeader."Document Type"::Quote,Customer."No.");
      // [WHEN] Run Make Order action
      LibraryService.CreateOrderFromQuote(ServiceHeader);
      // [THEN] Service Order created with ServiceOrder."Location Code" = Customer."Location Code"
      VerifyServiceDocumentLocationCode(ServiceHeader."Document Type"::Order,Customer."No.",Location.Code);
    END;

    [Test]
    PROCEDURE ServiceOrderPostWithItemExtText@245();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1002 : Record 5902;
      ItemNo@1001 : ARRAY [2] OF Code[20];
      ItemExtText@1004 : ARRAY [2] OF Text[50];
      i@1005 : Integer;
    BEGIN
      // [SCENARIO 123182] Item's extended text line is not inserted into posted Service Invoice when "Qty. To Invoice" = 0
      Initialize;

      // [GIVEN] Item "X" with extended text "ETX"
      // [GIVEN] Item "Y" with extended text "ETY"
      FOR i := 1 TO 2 DO BEGIN
        ItemNo[i] := LibraryInventory.CreateItemNo;
        ItemExtText[i] := CreateExtendedTextForItem(ItemNo[i]);
      END;

      // [GIVEN] Service order with items "X", "Y"
      CreateServiceOrderWithItem(
        ServiceHeader,LibrarySales.CreateCustomerNo,'',ItemNo[1],LibraryRandom.RandIntInRange(10,20));
      AddServiceLine(ServiceLine,ServiceHeader,ItemNo[2]);

      // [GIVEN] Insert "X", "Y" extended texts into service order lines
      InsertExtendedTextForServiceLines(ServiceHeader);

      // [GIVEN] Set "Qty. To Ship" and "Qty. To Invoice" = 0 for item "Y"
      UpdateServiceLineQtyToShipInvoice(ServiceLine,0);

      // [WHEN] Post service order
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE); // Ship & Invoice

      // [THEN] Posted service invoice contains only item "X" line and description line "ETX"
      VerifyServiceInvoiceLineItemWithExtendedText(ServiceHeader."No.",ItemNo[1],ItemExtText[1]);
    END;

    [Test]
    [HandlerFunctions(ServiceItemWorksheet_ValidateFaultReasonCode_MPH)]
    PROCEDURE ValidateFaultReasonCodeWithContractDiscount@325();
    VAR
      ServiceLine@1004 : Record 5902;
      FaultReasonCode@1002 : Record 5917;
      LineDiscountPercent@1005 : Decimal;
    BEGIN
      // [FEATURE] [Line Discount] [UI]
      // [SCENARIO 362453] "Line Discount %" should not be changed by "Fault Reason Code" with "Exclude Contract Discount"
      Initialize;

      // [GIVEN] Service Order with Service Line with Line Discount % = 50
      CreateSimpleServiceOrder(ServiceLine,LineDiscountPercent);
      // [GIVEN] Fault Reason Code "C" excluding contract discount
      LibraryService.CreateFaultReasonCode(FaultReasonCode,FALSE,TRUE);

      // [WHEN] Fault Reason Code "C" set into Service Line through page
      LibraryVariableStorage.Enqueue(FaultReasonCode.Code);
      OpenServiceItemWorksheetPage(ServiceLine."Document No.");

      // [THEN] Line Discount must be equal to 50. (must not be changed)
      ServiceLine.FIND;
      Assert.AreEqual(LineDiscountPercent,ServiceLine."Line Discount %",ServiceLine.FIELDCAPTION("Line Discount %"));
    END;

    [Test]
    [HandlerFunctions(ServiceItemWorksheet_ValidateFaultReasonCode_MPH)]
    PROCEDURE ValidateFaultReasonCodeWithoutContractDiscount@327();
    VAR
      ServiceLine@1002 : Record 5902;
      FaultReasonCode@1001 : Record 5917;
      LineDiscountPercent@1000 : Decimal;
    BEGIN
      // [FEATURE] [Line Discount] [UI]
      // [SCENARIO 362453] "Line Discount %" should be blanked by "Fault Reason Code" with "Exclude Contract Discount"
      Initialize;

      // [GIVEN] Service Order with Service Line with Line Discount % = 50
      CreateSimpleServiceOrder(ServiceLine,LineDiscountPercent);
      // [GIVEN] Fault Reason Code "C" including contract discount
      LibraryService.CreateFaultReasonCode(FaultReasonCode,FALSE,FALSE);

      // [WHEN] Fault Reason Code "C" set into Service Line through page
      LibraryVariableStorage.Enqueue(FaultReasonCode.Code);
      OpenServiceItemWorksheetPage(ServiceLine."Document No.");

      // [THEN] Line Discount must be equal to 0. (must be reset)
      ServiceLine.FIND;
      Assert.AreEqual(0,ServiceLine."Line Discount %",ServiceLine.FIELDCAPTION("Line Discount %"));
    END;

    [Test]
    [HandlerFunctions(ServiceItemWorksheet_EnableExcludeContractDiscount_MPH,ConfirmMessageHandler)]
    PROCEDURE ValidateExcludeContractDiscount@254();
    VAR
      ServiceLine@1002 : Record 5902;
      LineDiscountPercent@1000 : Decimal;
    BEGIN
      // [FEATURE] [Line Discount] [UI]
      // [SCENARIO 379169] "Line Discount %" should be blanked by enable "Exclude Contract Discount" field
      Initialize;

      // [GIVEN] Service Order with Service Line with Line Discount % = 50
      CreateSimpleServiceOrder(ServiceLine,LineDiscountPercent);

      // [WHEN] Enable Service Line "Exclude Contract Discount" through page
      OpenServiceItemWorksheetPage(ServiceLine."Document No.");

      // [THEN] Line Discount must be equal to 0. (must be reset)
      ServiceLine.FIND;
      Assert.AreEqual(0,ServiceLine."Line Discount %",ServiceLine.FIELDCAPTION("Line Discount %"));
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE GenBusinessPostingGroupInLinesUpdated@263();
    VAR
      GenBusPostingGroup@1000 : Record 250;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1001 : Record 5902;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 378255] Field "Gen. Bus. Posting Group" is updated in lines when user changes it in the document header and Gen. Bus. Posting Group has "Auto Insert Default" = False

      // [GIVEN] Gen. Bus. Posting Group "B" with "Auto Insert Default" = False,
      Initialize;
      LibraryERM.CreateGenBusPostingGroup(GenBusPostingGroup);
      GenBusPostingGroup."Auto Insert Default" := FALSE;
      GenBusPostingGroup.MODIFY;
      // [GIVEN] Customer "C" with  Gen. Bus. Posting Group = "X",
      // [GIVEN] Service Order for Customer "C" with one line
      CreateOrderCheckVATSetup(ServiceHeader,ServiceLine);

      // [WHEN] Validate field "Gen. Bus. Posting Group" = "B" in Service Order header
      ServiceHeader.VALIDATE("Gen. Bus. Posting Group",GenBusPostingGroup.Code);

      // [THEN] Field "Gen. Bus. Posting Group" in Service Order line is "B"
      ServiceLine.FIND;
      ServiceLine.TESTFIELD("Gen. Bus. Posting Group",GenBusPostingGroup.Code);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandlerForFalse)]
    PROCEDURE GenBusinessPostingGroupInLinesNotUpdated@268();
    VAR
      GenBusPostingGroup@1000 : Record 250;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1001 : Record 5902;
      OldGenBusPostingGroup@1003 : Code[10];
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 378255] Field "Gen. Bus. Posting Group" is updated in lines when user changes it in the document header and chooses "No" in Confirm dialog

      // [GIVEN] Gen. Bus. Posting Group "B" with "Auto Insert Default" = False,
      Initialize;
      LibraryERM.CreateGenBusPostingGroup(GenBusPostingGroup);
      GenBusPostingGroup."Auto Insert Default" := FALSE;
      GenBusPostingGroup.MODIFY;
      // [GIVEN] Customer "C" with  "Gen. Bus. Posting Group" = "X",
      // [GIVEN] Service Order for Customer "C" with one line
      CreateOrderCheckVATSetup(ServiceHeader,ServiceLine);
      OldGenBusPostingGroup := ServiceLine."Gen. Bus. Posting Group";
      COMMIT;

      // [WHEN] Validating field "Gen. Bus. Posting Group" = "B" in Service Order header
      ASSERTERROR ServiceHeader.VALIDATE("Gen. Bus. Posting Group",GenBusPostingGroup.Code);

      // [THEN] Field "Gen. Bus. Posting Group" in Service Order line is not changed because of error message
      Assert.AreEqual('',GETLASTERRORTEXT,'Unexpected error');
      ServiceLine.FIND;
      ServiceLine.TESTFIELD("Gen. Bus. Posting Group",OldGenBusPostingGroup);
    END;

    [Test]
    [HandlerFunctions(ExactMessageHandler)]
    PROCEDURE PostedDocToPrintMessageRaisedWhenDeleteServInWithNoInPostedInvoiceNos@129();
    VAR
      ServiceMgtSetup@1000 : Record 5911;
      ServHeader@1002 : Record 5900;
    BEGIN
      // [SCENARIO 379123] Message raised when delete Service Invoice with "Posted Invoice Nos." = "Invoice Nos." in Service Setup

      Initialize;
      // [GIVEN] "Posted Invoice Nos." = "Invoice Nos." in Service Setup
      SetPostedInvoiceNosEqualInvoiceNosInServSetup(ServiceMgtSetup);

      // [GIVEN] Service Invoice
      LibraryService.CreateServiceHeader(
        ServHeader,ServHeader."Document Type"::Invoice,'');
      ServHeader.VALIDATE("No. Series",ServiceMgtSetup."Posted Service Invoice Nos.");
      ServHeader.VALIDATE("Posting No. Series",ServiceMgtSetup."Service Invoice Nos.");
      ServHeader.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(PostedDocsToPrintCreatedMsg);

      // [WHEN] Delete Service Invoice
      ServHeader.DELETE(TRUE);

      // [THEN] Message "One or more documents have been posted during deletion which you can print" was raised
      // Verification done in ExactMessageHandler
    END;

    [Test]
    [HandlerFunctions(ServiceLinesNewLine_MPH)]
    PROCEDURE NewServiceLineNo@271();
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceItemLine@1001 : ARRAY [3] OF Record 5901;
      ServiceLine@1002 : Record 5902;
      ServiceOrder@1005 : TestPage 5900;
      i@1004 : Integer;
    BEGIN
      // [FEATURE] [Order] [UI]
      // [SCENARIO 379469] Service Line get a unique "Line No." when add to Service Item Line in case of Service Order
      Initialize;

      // [GIVEN] Service Order with 3 Service Item Lines: "A", "B", "C".
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      FOR i := 1 TO ARRAYLEN(ServiceItemLine) DO
        CreateServiceItemLineWithServiceItem(ServiceItemLine[i],ServiceHeader);

      // [GIVEN] Service Line for Service Item Line "A". Service Line "Line No." = 10000.
      // [GIVEN] Service Line for Service Item Line "B". Service Line "Line No." = 20000.
      FOR i := 1 TO ARRAYLEN(ServiceItemLine) - 1 DO
        CreateServiceLine(ServiceLine,ServiceHeader,ServiceItemLine[i]."Service Item No.");

      // [WHEN] Open "Service Lines" page for Service Item Line "C" (Service Order -> Lines -> Order -> Service Lines)
      ServiceOrder.OPENEDIT;
      ServiceOrder.GOTORECORD(ServiceHeader);
      ServiceOrder.ServItemLines.GOTORECORD(ServiceItemLine[3]);
      ServiceOrder.ServItemLines."Service Lines".INVOKE;

      // [WHEN] Create a new Service Line through the page.
      // ServiceLinesNewLine_MPH

      // [THEN] New Service Line "Line No." = 30000
      FindServiceLineByServiceItemLineNo(ServiceLine,ServiceHeader,ServiceItemLine[3]."Line No.");
      Assert.AreEqual(30000,ServiceLine."Line No.",ServiceLine.FIELDCAPTION("Line No."));
    END;

    [Test]
    [HandlerFunctions(ServiceQuoteLinesNewLine_MPH)]
    PROCEDURE NewServiceQuoteLineNo@277();
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceItemLine@1001 : ARRAY [3] OF Record 5901;
      ServiceLine@1002 : Record 5902;
      ServiceQuote@1005 : TestPage 5964;
      i@1004 : Integer;
    BEGIN
      // [FEATURE] [Quote] [UI]
      // [SCENARIO 379469] Service Line get a unique "Line No." when add to Service Item Line in case of Service Quote
      Initialize;

      // [GIVEN] Service Quote with 3 Service Item Lines: "A", "B", "C".
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Quote,LibrarySales.CreateCustomerNo);
      FOR i := 1 TO ARRAYLEN(ServiceItemLine) DO
        CreateServiceItemLineWithServiceItem(ServiceItemLine[i],ServiceHeader);

      // [GIVEN] Service Line for Service Item Line "A". Service Line "Line No." = 10000.
      // [GIVEN] Service Line for Service Item Line "B". Service Line "Line No." = 20000.
      FOR i := 1 TO ARRAYLEN(ServiceItemLine) - 1 DO
        CreateServiceLine(ServiceLine,ServiceHeader,ServiceItemLine[i]."Service Item No.");

      // [WHEN] Open "Service Quote Lines" page for Service Item Line "C" (Service Quote -> Lines -> Quote -> Service Lines)
      ServiceQuote.OPENEDIT;
      ServiceQuote.GOTORECORD(ServiceHeader);
      ServiceQuote.ServItemLine.GOTORECORD(ServiceItemLine[3]);
      ServiceQuote.ServItemLine.ServiceLines.INVOKE;

      // [WHEN] Create a new Service Line through the page.
      // ServiceQuoteLinesNewLine_MPH

      // [THEN] New Service Line "Line No." = 30000
      FindServiceLineByServiceItemLineNo(ServiceLine,ServiceHeader,ServiceItemLine[3]."Line No.");
      Assert.AreEqual(30000,ServiceLine."Line No.",ServiceLine.FIELDCAPTION("Line No."));
    END;

    [Test]
    [HandlerFunctions(ServiceLinesNewLineWithExtendedText)]
    PROCEDURE NewServiceLineWithExtendedText@278();
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceItemLine@1003 : Record 5901;
      ServiceLine@1002 : Record 5902;
      ServiceOrder@1001 : TestPage 5900;
    BEGIN
      // [FEATURE] [Order] [UI]
      // [SCENARIO 379758] When standard text with extended text is inserted between 2 Service Lines, extended text line is placed after standard text and not after the last line
      Initialize;

      // [GIVEN] Service Order with Service Item Lines
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      CreateServiceItemLineWithServiceItem(ServiceItemLine,ServiceHeader);

      // [GIVEN] Service Line for Service Item Line. Service Line "Line No." = 10000
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceItemLine."Service Item No.");
      // [GIVEN] Service Line for Service Item Line. Service Line "Line No." = 20000
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceItemLine."Service Item No.");

      // [GIVEN] Open "Service Lines" page for Service Item Line for Service Line with "Line No." = 20000 (Service Order -> Lines -> Order -> Service Lines)
      ServiceOrder.OPENEDIT;
      ServiceOrder.GOTORECORD(ServiceHeader);
      ServiceOrder.ServItemLines.GOTORECORD(ServiceItemLine);

      // [WHEN] Create a new Service Line Standard Text with Extended Text through the page Service Lines
      ServiceOrder.ServItemLines."Service Lines".INVOKE;

      // [THEN] Extended Text Line No. = 15000
      FindServiceLineWithExtText(ServiceLine,ServiceHeader,ServiceItemLine."Line No.");
      ServiceLine.TESTFIELD("Line No.",15000);
    END;

    [Test]
    PROCEDURE SendToPostBlankServiceHeader@292();
    VAR
      ServiceHeader@1000 : Record 5900;
      ServicePostYesNo@1001 : Codeunit 5981;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 379956] Throw error "There is nothing to post" without intermediate confirmations when send to post blank Service Header
      ServiceHeader.INIT;

      ASSERTERROR ServicePostYesNo.PostDocument(ServiceHeader);

      Assert.ExpectedError('There is nothing to post');
    END;

    [Test]
    PROCEDURE ReplaceServiceLineStandardTextWithExtText@291();
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1001 : Record 5902;
      StandardText@1005 : Record 7;
      ExtendedText@1002 : Text;
    BEGIN
      // [FEATURE] [Standard Text] [Extended Text]
      // [SCENARIO 380579] Replacing of Service Line's Standard Text Code updates attached Extended Text lines
      Initialize;

      // [GIVEN] Standard Text (Code = "ST1", Description = "SD1") with Extended Text "ET1".
      // [GIVEN] Standard Text (Code = "ST2", Description = "SD2") with Extended Text "ET2".
      // [GIVEN] Service Order with line: "Type" = "", "No." = "ST1"
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      MockServiceLine(ServiceLine,ServiceHeader);
      ValidateServiceLineStandardCode(ServiceLine,LibrarySales.CreateStandardTextWithExtendedText(StandardText,ExtendedText));

      // [WHEN] Validate Service Line "No." = "ST2"
      ValidateServiceLineStandardCode(ServiceLine,LibrarySales.CreateStandardTextWithExtendedText(StandardText,ExtendedText));

      // [THEN] There are two Service lines:
      // [THEN] Line1: Type = "", "No." = "ST2", Description = "SD2"
      // [THEN] Line2: Type = "", "No." = "", Description = "ET2"
      VerifyServiceLineCount(ServiceHeader,2);
      VerifyServiceLineDescription(ServiceLine,ServiceLine.Type::" ",StandardText.Code,StandardText.Description);
      ServiceLine.NEXT;
      VerifyServiceLineDescription(ServiceLine,ServiceLine.Type::" ",'',ExtendedText);
    END;

    [Test]
    PROCEDURE DocumentDateNotUpdatedAfterCreationOfServOrderFromQuote@296();
    VAR
      ServiceHeader@1000 : Record 5900;
      DocDate@1001 : Date;
    BEGIN
      // [SCENARIO 381308] "Document Date" should not be updated after creation of Service Order from Service Quote
      Initialize;

      // [GIVEN] Service Quote with "Document Date" = 01.07.16
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Quote,LibrarySales.CreateCustomerNo);
      DocDate := LibraryRandom.RandDate(100);
      ServiceHeader."Document Date" := DocDate;
      ServiceHeader.MODIFY;

      // [WHEN] Create Service Order from Service Quote on WORKDATE = 15.07.16
      LibraryService.CreateOrderFromQuote(ServiceHeader);

      // [THEN] Service Order has "Document Date" of 01.07.16
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type"::Order);
      ServiceHeader.SETRANGE("Quote No.",ServiceHeader."No.");
      ServiceHeader.FINDFIRST;

      ServiceHeader.TESTFIELD("Document Date",DocDate);
    END;

    [Test]
    PROCEDURE ServiceOrderFromQuoteCustomerWithResponsibilityCenter@297();
    VAR
      ServiceHeader@1002 : Record 5900;
      Customer@1001 : Record 18;
      ResponsibilityCenterCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [Quote] [Order] [Responsibility Center]
      // [SCENARIO 215838] System gets responsibility center from customer when it is specified for customer on making service order from quote.
      // [GIVEN] Customer "X" where"Responsibility Center" = "RC1"
      CreateCustomerWithResponsibilityCenter(Customer);
      ResponsibilityCenterCode := Customer."Responsibility Center";
      // [GIVEN] Service Quote "Q" for "X" where "Responsibility Center" = "RC2"
      CreateServiceQuote(ServiceHeader,Customer."No.");
      LibrarySales.SetStockoutWarning(FALSE);
      // [WHEN] Create Service Order "O" from "Q"
      LibraryService.CreateOrderFromQuote(ServiceHeader);
      // [THEN] O."Responsibility Center" = "RC2"
      VerifyServiceDocumentResponsibilityCenter(ServiceHeader."Document Type"::Order,Customer."No.",ResponsibilityCenterCode);
    END;

    [Test]
    PROCEDURE ServiceOrderFromQuoteCustomerWithoutResponsibilityCenter@299();
    VAR
      ServiceHeader@1002 : Record 5900;
      Customer@1001 : Record 18;
      ResponsibilityCenterCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [Quote] [Order] [Responsibility Center]
      // [SCENARIO 215838] System gets responsibility center from service quote when it does not specified for customer on making order from quote.
      // [GIVEN] Customer "X" without "Responsibility Center"
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Responsibility Center",'');
      Customer.MODIFY(TRUE);
      // [GIVEN] Service Quote "Q" for "X" where "Responsibility Center" = "RC2"
      CreateServiceHeaderRespCenter(ServiceHeader,ServiceHeader."Document Type"::Quote,Customer."No.");
      ResponsibilityCenterCode := ServiceHeader."Responsibility Center";
      LibrarySales.SetStockoutWarning(FALSE);
      // [WHEN] Create Service Order "O" from "Q"
      LibraryService.CreateOrderFromQuote(ServiceHeader);
      // [THEN] O."Responsibility Center" = "RC1"
      VerifyServiceDocumentResponsibilityCenter(ServiceHeader."Document Type"::Order,Customer."No.",ResponsibilityCenterCode);
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE ShipServiceOrderUsingPageWithAppliedFilter@313();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1003 : Record 5902;
      ServiceOrder@1000 : TestPage 5900;
      CustomerNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 218581] Service Order's "Customer No." is not blanked after Ship through the Service Order page being applied with filter "Completely Shipped" = FALSE
      Initialize;

      // [GIVEN] Service Order for Customer "X"
      CustomerNo := LibrarySales.CreateCustomerNo;
      CreateServiceDocumentWithServiceItem(
        ServiceHeader,ServiceItemLine,ServiceHeader."Document Type"::Order,CustomerNo);
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceItemLine."Service Item No.");
      UpdateServiceLineQtyToShipInvoice(ServiceLine,ServiceLine.Quantity);

      // [GIVEN] Open Service Order page and apply filter "Completely Shipped" = "No"
      ServiceOrder.OPENEDIT;
      ServiceOrder.FILTER.SETFILTER("No.",ServiceHeader."No.");
      ServiceOrder.FILTER.SETFILTER("Completely Shipped",'No');

      // [WHEN] Ship the Service Order
      LibraryVariableStorage.Enqueue(1); // Post = Ship
      ServiceOrder.Post.INVOKE;

      // [THEN] Service Order's "Customer No." = "X"
      ServiceHeader.FIND;
      ServiceHeader.TESTFIELD("Customer No.",CustomerNo);
    END;

    [Test]
    PROCEDURE ServiceOrderWithLinesWithoutServiceItemNoIsDeletedAfterPosting@324();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
    BEGIN
      // [FEATURE] [Service Item Line]
      // [SCENARIO 226470] Service Order is deleted after posting if there are not posted Service Item Lines with "Service Item No." = ''
      Initialize;

      // [GIVEN] Service Order "SO" with Service Item Line with Service Line
      CreateServiceOrderWithItem(
        ServiceHeader,LibrarySales.CreateCustomerNo,'',LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));

      // [GIVEN] Service Item Line with "Service Item No." = '' for "SO"
      CreateServiceItemLineWithServiceItemNo(ServiceItemLine,ServiceHeader,'');

      // [WHEN] Post Service Order
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // [THEN] Service Order is deleted
      VerifyServiceOrderNotExist(ServiceHeader."No.");
    END;

    LOCAL PROCEDURE Initialize@35();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      LibraryVariableStorage.Clear;

      IF IsInitialized THEN
        EXIT;

      // Create Demonstration Database.
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryService.SetupServiceMgtNoSeries;
      UpdateCustNoSeries;
      IsInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
    END;

    LOCAL PROCEDURE UpdateAutomaticCostPosting@232(NewValue@1000 : Boolean) Result : Boolean;
    VAR
      InventorySetup@1002 : Record 313;
    BEGIN
      WITH InventorySetup DO BEGIN
        GET;
        Result := "Automatic Cost Posting";
        IF Result = NewValue THEN
          EXIT;
        VALIDATE("Automatic Cost Posting",NewValue);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE AllocateResource@87(VAR Resource@1002 : Record 156;ServiceItemLine@1003 : Record 5901);
    VAR
      ServiceOrderSubform@1001 : Page 5902;
    BEGIN
      LibraryResource.FindResource(Resource);
      LibraryVariableStorage.Enqueue(Resource."No.");
      CLEAR(ServiceOrderSubform);
      ServiceOrderSubform.SETRECORD(ServiceItemLine);
      ServiceOrderSubform.AllocateResource;
    END;

    LOCAL PROCEDURE AssignLoanerOnServiceItemLine@64(VAR ServiceItemLine@1000 : Record 5901);
    VAR
      Loaner@1001 : Record 5913;
      RecordRef@1002 : RecordRef;
    BEGIN
      Loaner.INIT;
      RecordRef.GETTABLE(Loaner);
      LibraryUtility.FindRecord(RecordRef);
      RecordRef.SETTABLE(Loaner);
      ServiceItemLine.VALIDATE("Loaner No.",Loaner."No.");
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalculateVATForMultipleServiceLines@155(ServiceHeader@1005 : Record 5900;VATPct@1003 : Decimal) : Decimal;
    VAR
      ServiceLine@1002 : Record 5902;
      TotalAmount@1004 : Decimal;
    BEGIN
      GetServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        TotalAmount += ServiceLine."Unit Price" * ServiceLine.Quantity;
      UNTIL ServiceLine.NEXT = 0;
      EXIT(ROUND(TotalAmount * VATPct / 100));
    END;

    LOCAL PROCEDURE CheckServiceLineInsertion@246(InsertBeforeAfterLineNo@1003 : Integer;IsInsertAfter@1005 : Boolean;InsertAdditionalServiceLine@1004 : Boolean;CheckLineNoValue@1006 : Integer);
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceLineBeforeAfterInsert@1001 : Record 5902;
    BEGIN
      Initialize;
      CreateServiceOrderWithServiceItemLineAndServiceLines(ServiceHeader,InsertAdditionalServiceLine);
      FindServiceLineByOrder(ServiceHeader,InsertBeforeAfterLineNo,ServiceLineBeforeAfterInsert);

      VerifyServiceLineInsertLineNo(
        ServiceHeader."Document Type",ServiceHeader."No.",
        ServiceLineBeforeAfterInsert,IsInsertAfter,CheckLineNoValue);
    END;

    LOCAL PROCEDURE CreateBinAndBinContent@198(VAR Bin@1000 : Record 7354;Item@1001 : Record 27);
    VAR
      BinContent@1005 : Record 7302;
      LibraryWarehouse@1006 : Codeunit 132204;
    BEGIN
      LibraryWarehouse.CreateBin(Bin,CreateLocationWithBinMandatory,LibraryUtility.GenerateGUID,'','');
      LibraryWarehouse.CreateBinContent(BinContent,Bin."Location Code",'',Bin.Code,Item."No.",'',Item."Base Unit of Measure");
      BinContent.VALIDATE(Default,TRUE);
      BinContent.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationWithBinMandatory@206() : Code[10];
    VAR
      Location@1000 : Record 14;
      LibraryWarehouse@1001 : Codeunit 132204;
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateAndModifyCustomer@136(VAR Customer@1000 : Record 18;ApplicationMethod@1002 : Option;PaymentMethodCode@1001 : Code[10];ApplyRoundingPrecision@1003 : Decimal);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Payment Method Code",PaymentMethodCode);
      Customer.VALIDATE("Application Method",ApplicationMethod);
      Customer.VALIDATE("Currency Code",CreateCurrency(ApplyRoundingPrecision));
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrder@108(No@1003 : Code[20]);
    VAR
      Item@1004 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,No);

      // Use random value for Quantity.
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(100,2));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostServiceOrder@90(ServiceItem@1003 : Record 5940) DocumentNo : Code[20];
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1005 : Record 5902;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      DocumentNo := ServiceHeader."No.";
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceItem."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndUpdateServiceHeader@133(VAR ServiceHeader@1000 : Record 5900;VATBusPostingGroup@1001 : Code[10]);
    BEGIN
      LibraryService.CreateServiceHeader(
        ServiceHeader,ServiceHeader."Document Type"::Order,CreateCustomerWithVATBusPostingGroup(VATBusPostingGroup));
      ServiceHeader.VALIDATE("Prices Including VAT",TRUE);
      ServiceHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostServiceInvoice@226(ServiceContractHeader@1000 : Record 5965);
    VAR
      ServiceHeader@1002 : Record 5900;
      ServContractManagement@1001 : Codeunit 5940;
    BEGIN
      ServContractManagement.InitCodeUnit;
      ServContractManagement.CreateInvoice(ServiceContractHeader);
      ServContractManagement.FinishCodeunit;

      WITH ServiceHeader DO BEGIN
        SETRANGE("Contract No.",ServiceContractHeader."Contract No.");
        FINDFIRST;
        LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateAndUpdateServiceLine@69(ServiceHeader@1001 : Record 5900;Type@1000 : Option;No@1002 : Code[20];Quantity@1004 : Decimal;ServiceItemLineNo@1005 : Integer;LineDiscount@1006 : Decimal);
    VAR
      ServiceLine@1003 : Record 5902;
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,Type,No);
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineNo);

      // Use Random because value is not important in case where Type is not blank.
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.VALIDATE("Unit Price",LibraryRandom.RandDecInRange(1000,2000,2));
      ServiceLine.VALIDATE("Line Discount %",LineDiscount);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@275(VATProdPostingGroup@1002 : Code[10]) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandInt(100));  // Using RANDOM value for Unit Price.
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateCurrency@135(ApplnRoundingPrecision@1000 : Decimal) : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      Currency.VALIDATE("Appln. Rounding Precision",ApplnRoundingPrecision);
      Currency.MODIFY(TRUE);

      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateLoaner@233() : Code[20];
    VAR
      Loaner@1000 : Record 5913;
    BEGIN
      LibraryService.CreateLoaner(Loaner);
      EXIT(Loaner."No.");
    END;

    LOCAL PROCEDURE CreateDescriptionServiceLine@80(VAR ServiceHeader@1004 : Record 5900;Type@1003 : Option;No@1002 : Code[20];ServiceItemLineNo@1000 : Integer);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,Type,No);
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineNo);
      ServiceLine.VALIDATE(Description,FORMAT(ServiceHeader."Document Type") + FORMAT(ServiceHeader."No."));
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerInvoiceDiscount@123(CustomerNo@1002 : Code[20];DiscountPct@1003 : Decimal;ServiceCharge@1001 : Decimal);
    VAR
      CustInvoiceDisc@1000 : Record 19;
    BEGIN
      LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc,CustomerNo,'',0);  // Take Blank for Currency Code And 0 for Minimum Amount.
      CustInvoiceDisc.VALIDATE("Discount %",DiscountPct);
      CustInvoiceDisc.VALIDATE("Service Charge",ServiceCharge);
      CustInvoiceDisc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithLocationCode@288(VAR Customer@1000 : Record 18;VAR Location@1001 : Record 14);
    VAR
      LibraryWarehouse@1002 : Codeunit 132204;
    BEGIN
      LibraryWarehouse.CreateLocation(Location);
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Location Code",Location.Code);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithResponsibilityCenter@300(VAR Customer@1000 : Record 18);
    VAR
      ResponsibilityCenter@1001 : Record 5714;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      ResponsibilityCenter.FINDFIRST;
      Customer.VALIDATE("Responsibility Center",ResponsibilityCenter.Code);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerTemplate@33();
    VAR
      Customer@1001 : Record 18;
      CustomerTemplate@1004 : Record 5105;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateCustomerTemplate(CustomerTemplate);
      CustomerTemplate.VALIDATE("Gen. Bus. Posting Group",Customer."Gen. Bus. Posting Group");
      CustomerTemplate.VALIDATE("Customer Posting Group",Customer."Customer Posting Group");
      CustomerTemplate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithVATBusPostingGroup@130(VATBusinessPostingGroup@1000 : Code[10]) : Code[20];
    VAR
      Customer@1002 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("VAT Bus. Posting Group",VATBusinessPostingGroup);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithZoneCode@253(ServiceZoneCode@1002 : Code[10];VATBusPostingGroupCode@1000 : Code[10]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      WITH Customer DO BEGIN
        GET(CreateCustomerWithVATBusPostingGroup(VATBusPostingGroupCode));
        VALIDATE("Service Zone Code",ServiceZoneCode);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateCustomerWithVATBusPostGroup@255(VAR Customer@1000 : Record 18);
    VAR
      VATBusPostingGroup@1004 : Record 323;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryERM.CreateVATBusinessPostingGroup(VATBusPostingGroup);
      Customer.VALIDATE("VAT Bus. Posting Group",VATBusPostingGroup.Code);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateExtendedTextForItem@59(ItemNo@1002 : Code[20]) : Text[50];
    VAR
      ExtendedTextHeader@1001 : Record 279;
      ExtendedTextLine@1000 : Record 280;
    BEGIN
      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,ItemNo);
      ExtendedTextHeader.VALIDATE("Starting Date",WORKDATE);
      ExtendedTextHeader.VALIDATE("All Language Codes",TRUE);
      ExtendedTextHeader.MODIFY(TRUE);

      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      ExtendedTextLine.VALIDATE(Text,LibraryUtility.GenerateRandomCode(ExtendedTextLine.FIELDNO(Text),DATABASE::"Extended Text Line"));
      ExtendedTextLine.MODIFY(TRUE);
      EXIT(ExtendedTextLine.Text);
    END;

    LOCAL PROCEDURE CreateItemWithReplenishmentSystem@200(ReplenishmentSystem@1001 : Option) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateMultipleServiceLine@199(VAR ServiceHeader@1010 : Record 5900;ServiceItemLineNo@1011 : Integer);
    VAR
      Item@1005 : Record 27;
      Resource@1004 : Record 156;
      ServiceLine@1003 : Record 5902;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryResource.FindResource(Resource);

      // Create Service Line with type as Item, use random for Quantity.
      CreateAndUpdateServiceLine(
        ServiceHeader,ServiceLine.Type::Item,Item."No.",LibraryRandom.RandDec(100,2),ServiceItemLineNo,0);  // Take zero for Line Discount.

      // Create Service Line with type as Resource, use random for Quantity.
      CreateAndUpdateServiceLine(
        ServiceHeader,ServiceLine.Type::Resource,Resource."No.",LibraryRandom.RandDec(100,2),
        ServiceItemLineNo,0);  // Take zero for Line Discount.

      // Create Service Line with type as Blank.
      CreateDescriptionServiceLine(ServiceHeader,ServiceLine.Type::" ",'',ServiceItemLineNo);
    END;

    LOCAL PROCEDURE CreateOrderCheckVATSetup@274(VAR ServiceHeader@1000 : Record 5900;VAR ServiceLine@1001 : Record 5902);
    VAR
      VATPostingSetup@1003 : Record 325;
      Item@1002 : Record 27;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibraryInventory.CreateItem(Item);
      IF NOT VATPostingSetup.GET(ServiceHeader."VAT Bus. Posting Group",Item."VAT Prod. Posting Group") THEN
        LibraryERM.CreateVATPostingSetup(VATPostingSetup,ServiceHeader."VAT Bus. Posting Group",Item."VAT Prod. Posting Group");
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
    END;

    LOCAL PROCEDURE CreateOrderWithContract@66(VAR ServiceHeader@1000 : Record 5900;VAR ServiceLine@1002 : Record 5902;ServiceContractHeader@1001 : Record 5965);
    VAR
      ServiceItemLine@1004 : Record 5901;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceContractHeader."Customer No.");
      UpdateContractOnServiceHeader(ServiceHeader,ServiceContractHeader."Contract No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      UpdateServiceLineWithRandomQtyAndPrice(ServiceLine,ServiceItemLine."Line No.");
    END;

    LOCAL PROCEDURE CreateRepairStatusCodeFinish@61(VAR RepairStatus@1001 : Record 5927);
    BEGIN
      RepairStatus.SETRANGE(Finished,TRUE);
      IF NOT RepairStatus.FINDFIRST THEN BEGIN
        LibraryService.CreateRepairStatus(RepairStatus);
        RepairStatus.VALIDATE(Finished,TRUE);
        RepairStatus.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateServiceContract@10(VAR ServiceContractHeader@1003 : Record 5965;VAR ServiceContractLine@1001 : Record 5964;ContractType@1000 : Option);
    BEGIN
      // Create Service Item, Service Contract Header, Service Contract Line.
      LibraryService.CreateServiceContractHeader(ServiceContractHeader,ContractType,'');
      CreateServiceContractLine(ServiceContractLine,ServiceContractHeader);
    END;

    LOCAL PROCEDURE CreateServiceContractHeader@261(VAR ServiceContractHeader@1000 : Record 5965;InvoicePeriod@1001 : Option);
    VAR
      Customer@1002 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      WITH ServiceContractHeader DO BEGIN
        LibraryService.CreateServiceContractHeader(ServiceContractHeader,"Contract Type"::Contract,Customer."No.");
        VALIDATE("Invoice Period",InvoicePeriod);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateServiceContractLine@16(VAR ServiceContractLine@1002 : Record 5964;ServiceContractHeader@1000 : Record 5965);
    VAR
      ServiceItem@1001 : Record 5940;
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,ServiceContractHeader."Customer No.");
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");
      ServiceContractLine.VALIDATE("Line Cost",LibraryRandom.RandInt(10));  // Use Random because value is not important.
      ServiceContractLine.VALIDATE("Line Value",LibraryRandom.RandInt(10));  // Use Random because value is not important.
      ServiceContractLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceContractLineWithPriceUpdatePeriod@222(ServiceContractHeader@1000 : Record 5965;VAR ServiceContractLine@1002 : Record 5964);
    VAR
      ServiceItem@1001 : Record 5940;
      PriceUpdatePeriod@1003 : DateFormula;
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,ServiceContractHeader."Customer No.");
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");
      EVALUATE(PriceUpdatePeriod,STRSUBSTNO('<%1M>',LibraryRandom.RandInt(11)));
      WITH ServiceContractLine DO BEGIN
        VALIDATE("Line Value",12 * LibraryRandom.RandDecInRange(50,100,2));
        VALIDATE("Next Planned Service Date",WORKDATE);
        VALIDATE("Starting Date",WORKDATE);
        VALIDATE("Service Period",PriceUpdatePeriod);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateServiceDocument@132(VAR ServiceHeader@1000 : Record 5900;DocumentType@1001 : Option;CustomerNo@1002 : Code[20];ItemNo@1003 : Code[20];Quantity@1004 : Decimal;UnitPrice@1005 : Decimal);
    VAR
      ServiceLine@1006 : Record 5902;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,CustomerNo);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.VALIDATE("Unit Price",UnitPrice);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceDocumentWithServiceItem@289(VAR ServiceHeader@1001 : Record 5900;VAR ServiceItemLine@1002 : Record 5901;DocumentType@1004 : Option;CustomerNo@1003 : Code[20]);
    VAR
      ServiceItem@1000 : Record 5940;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,CustomerNo);
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateServiceLine@94(VAR ServiceLine@1000 : Record 5902;ServiceHeader@1003 : Record 5900;ServiceItemNo@1001 : Code[20]);
    VAR
      Item@1002 : Record 27;
      Quantity@1005 : Decimal;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      ServiceLine.VALIDATE("Service Item No.",ServiceItemNo);
      Quantity := LibraryRandom.RandInt(10);  // Use Random For Quantity and Quantity to Consume.
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.VALIDATE("Qty. to Consume",Quantity);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceItem@101(VAR ServiceItem@1000 : Record 5940;CustomerNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,CustomerNo);
      ServiceItem.VALIDATE("Item No.",ItemNo);
      ServiceItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceItemLine@58(VAR ServiceItemLine@1003 : Record 5901;ServiceHeader@1000 : Record 5900);
    VAR
      Item@1001 : Record 27;
    BEGIN
      // Create Service Order - Service Header and Service Item Line with Item.
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      ServiceItemLine.VALIDATE("Item No.",Item."No.");
      ServiceItemLine.VALIDATE(Description,Item."No.");
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceItemLineWithServiceItemNo@344(VAR ServiceItemLine@1003 : Record 5901;ServiceHeader@1000 : Record 5900;ServiceItemNo@1002 : Code[20]);
    BEGIN
      CreateServiceItemLine(ServiceItemLine,ServiceHeader);
      ServiceItemLine.VALIDATE("Service Item No.",ServiceItemNo);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceItemLineWithServiceItem@285(VAR ServiceItemLine@1004 : Record 5901;ServiceHeader@1003 : Record 5900);
    VAR
      ServiceItem@1000 : Record 5940;
    BEGIN
      CreateServiceItem(ServiceItem,ServiceHeader."Customer No.",LibraryInventory.CreateItemNo);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateItemLineResolution@93(VAR ServiceItemLine@1000 : Record 5901;ServiceHeader@1004 : Record 5900;ServiceItemNo@1006 : Code[20]);
    VAR
      ResolutionCode@1001 : Record 5919;
    BEGIN
      LibraryService.FindResolutionCode(ResolutionCode);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItemNo);
      ServiceItemLine.VALIDATE("Resolution Code",ResolutionCode.Code);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceItemWithGroup@92(VAR ServiceItem@1000 : Record 5940;CustomerNo@1001 : Code[20]);
    VAR
      ServiceItemGroup@1002 : Record 5904;
      Item@1003 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryService.FindServiceItemGroup(ServiceItemGroup);
      LibraryService.CreateServiceItem(ServiceItem,CustomerNo);
      ServiceItem.VALIDATE("Item No.",Item."No.");
      ServiceItem.VALIDATE("Service Item Group Code",ServiceItemGroup.Code);
      ServiceItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceItemWithZone@244(VAR ServiceItem@1000 : Record 5940);
    VAR
      ServiceZone@1001 : Record 5957;
      ServiceCost@1002 : Record 5905;
      VATPostingSetup@1003 : Record 325;
    BEGIN
      CreateVATPostingSetup(VATPostingSetup);
      LibraryService.CreateServiceZone(ServiceZone);
      CreateServiceCost(ServiceCost,ServiceZone.Code,VATPostingSetup."VAT Prod. Posting Group");
      LibraryService.CreateServiceItem(
        ServiceItem,CreateCustomerWithZoneCode(ServiceZone.Code,VATPostingSetup."VAT Bus. Posting Group"));
    END;

    LOCAL PROCEDURE CreateServiceItemLineRepair@98(VAR ServiceItemLine@1002 : Record 5901;ServiceHeader@1001 : Record 5900;ServiceItemNo@1004 : Code[20]);
    VAR
      RepairStatus@1000 : Record 5927;
    BEGIN
      LibraryService.CreateRepairStatus(RepairStatus);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItemNo);
      ServiceItemLine.VALIDATE("Repair Status Code",RepairStatus.Code);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceItemFromDocument@191(ServiceItemLine@1000 : Record 5901);
    VAR
      ServiceOrderSubform@1001 : Page 5902;
    BEGIN
      ServiceOrderSubform.SETRECORD(ServiceItemLine);
      ServiceOrderSubform.CreateServiceItem;
    END;

    LOCAL PROCEDURE CreateServiceHeaderWithName@32(VAR ServiceHeader@1000 : Record 5900);
    VAR
      PostCode@1001 : Record 225;
    BEGIN
      ServiceHeader.INIT;
      ServiceHeader.VALIDATE("Document Type",ServiceHeader."Document Type"::Order);
      ServiceHeader.INSERT(TRUE);

      FindPostCode(PostCode);
      ServiceHeader.VALIDATE(Name,FORMAT(ServiceHeader."Document Type") + ServiceHeader."No.");
      ServiceHeader.VALIDATE(Address,FORMAT(ServiceHeader."Document Type") + ServiceHeader."No." + PostCode.City);
      ServiceHeader.VALIDATE("Post Code",PostCode.Code);
      ServiceHeader.VALIDATE(City,PostCode.City);
      ServiceHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServItemLineDescription@31(VAR ServiceItemLine@1003 : Record 5901);
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceItem@1001 : Record 5940;
    BEGIN
      // Create Service Order - Service Header and Service Item Line with description.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      ServiceItemLine.VALIDATE(
        Description,FORMAT(ServiceItemLine."Document Type") + ServiceItemLine."Document No." + FORMAT(ServiceItemLine."Line No."));
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceCost@249(VAR ServiceCost@1000 : Record 5905;ServiceZoneCode@1002 : Code[10];VATProdPostingGroupCode@1003 : Code[10]);
    VAR
      GLAccount@1001 : Record 15;
      GenProdPostingGroup@1004 : Record 251;
    BEGIN
      LibraryERM.CreateGenProdPostingGroup(GenProdPostingGroup);
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroup.Code);
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroupCode);
      GLAccount.MODIFY(TRUE);
      LibraryService.CreateServiceCost(ServiceCost);
      WITH ServiceCost DO BEGIN
        VALIDATE("Cost Type","Cost Type"::Travel);
        VALIDATE("Account No.",GLAccount."No.");
        VALIDATE("Service Zone Code",ServiceZoneCode);
        VALIDATE("Default Quantity",LibraryRandom.RandDecInRange(10,100,2));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateServiceOrder@30(VAR ServiceHeader@1001 : Record 5900;CustomerNo@1002 : Code[20]) : Integer;
    VAR
      ServiceItemLine@1000 : Record 5901;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      EXIT(ServiceItemLine."Line No.");
    END;

    LOCAL PROCEDURE CreateServiceQuote@301(VAR ServiceHeader@1001 : Record 5900;CustomerNo@1000 : Code[20]) : Integer;
    VAR
      ServiceItemLine@1002 : Record 5901;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Quote,CustomerNo);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      EXIT(ServiceItemLine."Line No.");
    END;

    LOCAL PROCEDURE CreateServiceHeaderRespCenter@29(VAR ServiceHeader@1006 : Record 5900;DocumentType@1004 : Option;CustomerNo@1000 : Code[20]);
    VAR
      Item@1005 : Record 27;
      ResponsibilityCenter@1003 : Record 5714;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
    BEGIN
      // Create Service Header with Responsibility Center, Create Service Item Line and Service Line.
      Initialize;
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,CustomerNo);
      ResponsibilityCenter.FINDFIRST;
      ServiceHeader.VALIDATE("Responsibility Center",ResponsibilityCenter.Code);
      ServiceHeader.MODIFY(TRUE);

      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      LibraryInventory.CreateItem(Item);

      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      UpdateServiceLineWithRandomQtyAndPrice(ServiceLine,ServiceItemLine."Line No.");
    END;

    LOCAL PROCEDURE CreateServiceOrderWithWarranty@170(VAR ServiceHeader@1000 : Record 5900;ServiceItem@1001 : Record 5940);
    VAR
      ServiceItemLine@1003 : Record 5901;
      Item@1004 : Record 27;
      ServiceLine@1005 : Record 5902;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      ServiceLine.VALIDATE("Service Item No.",ServiceItemLine."Service Item No.");
      ServiceLine.VALIDATE(Quantity,LibraryRandom.RandDec(100,2));
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceOrderWithServiceItemLineAndServiceLines@279(VAR ServiceHeader@1002 : Record 5900;AdditionalLine@1005 : Boolean);
    VAR
      Customer@1000 : Record 18;
      Item@1001 : Record 27;
      ServiceLine@1004 : Record 5902;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      CreateServiceOrderWithItem(ServiceHeader,Customer."No.",'',Item."No.",1);
      IF AdditionalLine THEN BEGIN
        LibraryService.CreateServiceLine(
          ServiceLine,ServiceHeader,
          ServiceLine.Type::Item,Item."No.");
        UpdateServiceLineWithRandomQtyAndPrice(
          ServiceLine,
          FindLastServiceItemLineNo(ServiceHeader."Document Type"::Order,ServiceHeader."No."));
      END;
    END;

    LOCAL PROCEDURE CreateServiceQuoteWithComments@3(VAR ServiceItemLine@1006 : Record 5901);
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceLine@1008 : Record 5902;
      Item@1007 : Record 27;
    BEGIN
      // Create Service Item, Service Header with Document Type Quote, Service Item Line, Assign Loaner No. on Service Item Line,
      // Create Service Line with Type Item and Create Commnet on Service Quote.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);
      CreateServiceDocWithLoaner(ServiceHeader,ServiceItemLine,ServiceHeader."Document Type"::Quote);
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      UpdateServiceLineWithRandomQtyAndPrice(ServiceLine,ServiceItemLine."Line No.");
      CreateCommentsOnServiceQuote(ServiceItemLine);
    END;

    LOCAL PROCEDURE CreateServiceOrderWithServiceItem@181(VAR ServiceItemLine@1002 : Record 5901);
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItem@1000 : Record 5940;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateServiceOrderWithItem@284(VAR ServiceHeader@1001 : Record 5900;CustomerNo@1002 : Code[20];LocationCode@1007 : Code[10];ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    VAR
      ServiceItemLine@1005 : Record 5901;
      ServiceItem@1000 : Record 5940;
      ServiceLine@1006 : Record 5902;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      ServiceHeader.VALIDATE("Location Code",LocationCode);
      ServiceHeader.MODIFY(TRUE);

      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
      UpdateServiceLine(
        ServiceLine,ServiceItemLine."Line No.",Quantity,LibraryRandom.RandDecInRange(1000,2000,2));
    END;

    LOCAL PROCEDURE CreateServiceInvoiceWithServiceLine@282(VAR ServiceHeader@1000 : Record 5900;VAR ServiceLine@1001 : Record 5902;CustomerNo@1002 : Code[20]);
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,CustomerNo);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
    END;

    LOCAL PROCEDURE CreateServiceDocumentWithLocation@205(VAR ServiceLine@1000 : Record 5902;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10]);
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Invoice,'');
      ServiceHeader.VALIDATE("Location Code",LocationCode);
      ServiceHeader.MODIFY(TRUE);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
      ServiceLine.VALIDATE(Quantity,LibraryRandom.RandDec(100,2));
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateStandardTextWithExtendedText@310() : Code[20];
    VAR
      ExtendedTextHeader@1004 : Record 279;
      ExtendedTextLine@1003 : Record 280;
      StandardText@1000 : Record 7;
      TableNameOption@1001 : 'Standard Text,G/L Account,Item,Resource';
    BEGIN
      StandardText.INIT;
      StandardText.Code := LibraryUtility.GenerateRandomCode(StandardText.FIELDNO(Code),DATABASE::"Standard Text");
      StandardText.INSERT(TRUE);
      LibrarySmallBusiness.CreateExtendedTextHeader(ExtendedTextHeader,TableNameOption::"Standard Text",StandardText.Code);
      LibrarySmallBusiness.CreateExtendedTextLine(ExtendedTextLine,ExtendedTextHeader);
      EXIT(StandardText.Code);
    END;

    LOCAL PROCEDURE ChangeCustomerOnServiceQuote@26(VAR ServiceHeader@1000 : Record 5900);
    BEGIN
      // Select different Customer from Service Header Customer No.
      ServiceHeader.VALIDATE("Customer No.",LibrarySales.CreateCustomerNo);
      ServiceHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCommentsOnServiceQuote@28(ServiceItemLine@1001 : Record 5901);
    VAR
      ServiceCommentLine@1002 : Record 5906;
    BEGIN
      LibraryService.CreateCommentLineForServHeader(ServiceCommentLine,ServiceItemLine,ServiceCommentLine.Type::Fault);
      LibraryService.CreateCommentLineForServHeader(ServiceCommentLine,ServiceItemLine,ServiceCommentLine.Type::Resolution);
      LibraryService.CreateCommentLineForServHeader(ServiceCommentLine,ServiceItemLine,ServiceCommentLine.Type::Accessory);
      LibraryService.CreateCommentLineForServHeader(ServiceCommentLine,ServiceItemLine,ServiceCommentLine.Type::Internal);
      LibraryService.CreateCommentLineForServHeader(ServiceCommentLine,ServiceItemLine,ServiceCommentLine.Type::"Service Item Loaner");
    END;

    LOCAL PROCEDURE CreateResponsibilityCenterAndUserSetup@109() : Code[10];
    VAR
      Location@1004 : Record 14;
      UserSetup@1000 : Record 91;
      ResponsibilityCenter@1001 : Record 5714;
      LibraryTimeSheet@1002 : Codeunit 131904;
      LibraryWarehouse@1003 : Codeunit 132204;
    BEGIN
      LibraryTimeSheet.CreateUserSetup(UserSetup,TRUE);
      LibraryService.CreateResponsibilityCenter(ResponsibilityCenter);
      ResponsibilityCenter.VALIDATE("Location Code",LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location));
      ResponsibilityCenter.MODIFY(TRUE);
      UserSetup.VALIDATE("Service Resp. Ctr. Filter",ResponsibilityCenter.Code);
      UserSetup.MODIFY(TRUE);
      EXIT(ResponsibilityCenter.Code);
    END;

    LOCAL PROCEDURE CreateServiceOrderWithUpdatedPostingDate@137(VAR ServiceHeader@1003 : Record 5900;VAR ServiceLine@1001 : Record 5902);
    VAR
      Customer@1005 : Record 18;
      Item@1004 : Record 27;
      ServiceItemLineNo@1000 : Integer;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateCustomer(Customer);
      ServiceItemLineNo := CreateServiceOrder(ServiceHeader,Customer."No.");
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      UpdateServiceLineWithRandomQtyAndPrice(ServiceLine,ServiceItemLineNo);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      ServiceHeader.VALIDATE("Posting Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE));  // Use Random for Date.
      ServiceHeader.MODIFY(TRUE);
      ServiceLine.GET(ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.");
      ServiceLine.VALIDATE("Posting Date",ServiceHeader."Posting Date");
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceOrderWithMultipleLines@208(VAR ServiceHeader@1000 : Record 5900;CustomerNo@1001 : Code[20];ServiceItemNo@1003 : Code[20];ItemNo@1006 : Code[20];Quantity@1007 : Decimal;UnitPrice@1008 : Decimal);
    VAR
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1005 : Record 5902;
      i@1004 : Integer;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItemNo);
      FOR i := 1 TO LibraryRandom.RandIntInRange(3,6) DO BEGIN
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
        ServiceLine.VALIDATE("Service Item No.",ServiceItemLine."Service Item No.");
        ServiceLine.VALIDATE(Quantity,Quantity);
        ServiceLine.VALIDATE("Unit Price",UnitPrice);
        ServiceLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateServiceLinesOnPage@150(VAR ServiceItemWorksheet@1000 : TestPage 5906;Type@1002 : Option;ItemNo@1003 : Code[20]);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      ServiceItemWorksheet.ServInvLines.Type.SETVALUE(Type);
      ServiceItemWorksheet.ServInvLines."No.".SETVALUE(ItemNo);
      ServiceItemWorksheet.ServInvLines.Description.SETVALUE(
        LibraryUtility.GenerateRandomCode(ServiceLine.FIELDNO(Description),DATABASE::"Service Line"));
      ServiceItemWorksheet.ServInvLines.NEW;
    END;

    LOCAL PROCEDURE CreateServiceDocumentWithInvoiceDiscount@152(VAR ServiceLine@1001 : Record 5902) ServiceCharge : Decimal;
    VAR
      Customer@1011 : Record 18;
      Item@1010 : Record 27;
      ServiceHeader@1002 : Record 5900;
      ServiceItem@1009 : Record 5940;
      ServiceItemLine@1006 : Record 5901;
    BEGIN
      // Create Customer, Item, Customer Invoice Discount, Service Order.
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      ServiceCharge := LibraryRandom.RandDec(10,2);  // Generate Random Value for Service Charge.
      CreateCustomerInvoiceDiscount(Customer."No.",LibraryRandom.RandDec(10,2),ServiceCharge);  // Generate Random Value for Discount Percent.
      CreateServiceItem(ServiceItem,Customer."No.",Item."No.");
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      CreateAndUpdateServiceLine(
        ServiceHeader,ServiceLine.Type::Item,Item."No.",LibraryRandom.RandDec(100,2),
        ServiceItemLine."Line No.",0);  // Take RANDOM Value for Quantity and zero for Line Discount.
      GetServiceLine(ServiceLine,ServiceHeader);
      ServiceLine.VALIDATE("Qty. to Ship",ServiceLine.Quantity / 2);  // For Partial Shipping.
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceDoumentLine@186(VAR ServiceItemLine@1001 : Record 5901;DocumentType@1002 : Option);
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,'');
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
    END;

    LOCAL PROCEDURE CreateSimpleServiceOrder@331(VAR ServiceLine@1003 : Record 5902;VAR LineDiscountPercent@1004 : Decimal);
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceItemLineNo@1001 : Integer;
    BEGIN
      LineDiscountPercent := LibraryRandom.RandInt(100);
      ServiceItemLineNo := CreateServiceOrder(ServiceHeader,'');
      LibraryService.CreateServiceLine(
        ServiceLine,ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      UpdateServiceLineWithRandomQtyAndPrice(ServiceLine,ServiceItemLineNo);
      ServiceLine.VALIDATE("Line Discount %",LineDiscountPercent);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPartialServiceOrder@159(VAR ServiceHeader@1001 : Record 5900;VAR ItemServiceLine@1003 : Record 5902;VAR VATPostingSetup@1006 : Record 325);
    VAR
      Resource@1004 : Record 156;
      ResourceServiceLine@1005 : Record 5902;
      ServiceItemLineNo@1000 : Integer;
    BEGIN
      // Create and post (Ship + Invoice partially) Service Order with item/resource lines

      // 1. Exercise: Get VAT Posting Setup, VAT Rate
      VATPostingSetup.SETFILTER("Unrealized VAT Type",'=''''');
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");

      // 2. Exercise: Create Service Order.
      ServiceItemLineNo :=
        CreateServiceOrder(ServiceHeader,CreateCustomerWithVATBusPostingGroup(VATPostingSetup."VAT Bus. Posting Group"));

      // 3. Exercise: Create Item and Resource service lines, set Qty. To Invoice and Post.
      LibraryService.CreateServiceLine(
        ItemServiceLine,ServiceHeader,ItemServiceLine.Type::Item,CreateItem(VATPostingSetup."VAT Prod. Posting Group"));
      UpdateServiceLineWithRandomQtyAndPrice(ItemServiceLine,ServiceItemLineNo);

      LibraryResource.FindResource(Resource);
      LibraryService.CreateServiceLine(ResourceServiceLine,ServiceHeader,ResourceServiceLine.Type::Resource,Resource."No.");
      UpdateServiceLine(ResourceServiceLine,ServiceItemLineNo,LibraryRandom.RandIntInRange(10,20),0);

      // 4. Exercise: Post Service Order - Ship.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 5. Exercise: Set Qty. To. Invoice to 1 for Item Line and to 0 for Resource Line.
      ItemServiceLine.GET(ItemServiceLine."Document Type",ItemServiceLine."Document No.",ItemServiceLine."Line No."); // Update line after posting.
      ItemServiceLine.VALIDATE("Qty. to Invoice",LibraryRandom.RandInt(ItemServiceLine.Quantity));
      ItemServiceLine.MODIFY(TRUE);
      ResourceServiceLine.GET(ResourceServiceLine."Document Type",ResourceServiceLine."Document No.",ResourceServiceLine."Line No."); // Update line after posting.
      ResourceServiceLine.VALIDATE("Qty. to Invoice",0);
      ResourceServiceLine.MODIFY(TRUE);

      // 6. Exercise: Post Service Order - Invoice.
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,TRUE);
    END;

    LOCAL PROCEDURE CreateServiceOrderWithMultipleServiceItemLines@214(VAR ServiceHeader@1000 : Record 5900);
    VAR
      ServiceItem@1004 : Record 5940;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      Counter@1003 : Integer;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      FOR Counter := 1 TO LibraryRandom.RandIntInRange(3,6) DO BEGIN
        CLEAR(ServiceItem);
        LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
        LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,'');
        UpdateServiceLineWithRandomQtyAndPrice(ServiceLine,ServiceItemLine."Line No.");
      END;
    END;

    LOCAL PROCEDURE CreateServiceDocWithLoaner@257(VAR ServiceHeader@1000 : Record 5900;VAR ServiceItemLine@1001 : Record 5901;DocType@1002 : Option);
    VAR
      ServiceItem@1003 : Record 5940;
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,'');
      LibraryService.CreateServiceHeader(ServiceHeader,DocType,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      ServiceItemLine.VALIDATE("Loaner No.",CreateLoaner);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVATPostingSetup@264(VAR VATPostingSetup@1002 : Record 325);
    VAR
      VATBusPostingGroup@1001 : Record 323;
      VATProdPostingGroup@1000 : Record 324;
    BEGIN
      LibraryERM.CreateVATBusinessPostingGroup(VATBusPostingGroup);
      LibraryERM.CreateVATProductPostingGroup(VATProdPostingGroup);
      LibraryERM.CreateVATPostingSetup(VATPostingSetup,VATBusPostingGroup.Code,VATProdPostingGroup.Code);
    END;

    LOCAL PROCEDURE MockServiceLine@298(VAR ServiceLine@1000 : Record 5902;ServiceHeader@1001 : Record 5900);
    BEGIN
      WITH ServiceLine DO BEGIN
        "Document Type" := ServiceHeader."Document Type";
        "Document No." := ServiceHeader."No.";
        "Line No." := LibraryUtility.GetNewRecNo(ServiceLine,FIELDNO("Line No."));
        INSERT;
      END;
    END;

    LOCAL PROCEDURE AddServiceLine@265(VAR ServiceLine@1002 : Record 5902;ServiceHeader@1000 : Record 5900;ItemNo@1001 : Code[20]);
    BEGIN
      LibraryService.CreateServiceLine(
        ServiceLine,ServiceHeader,
        ServiceLine.Type::Item,ItemNo);
      UpdateServiceLineWithRandomQtyAndPrice(
        ServiceLine,FindLastServiceItemLineNo(ServiceHeader."Document Type",ServiceHeader."No."));
    END;

    LOCAL PROCEDURE ValidateServiceLineStandardCode@312(VAR ServiceLine@1000 : Record 5902;StandardTextCode@1001 : Code[20]);
    VAR
      TransferExtendedText@1002 : Codeunit 378;
    BEGIN
      ServiceLine.VALIDATE("No.",StandardTextCode);
      ServiceLine.MODIFY(TRUE);
      TransferExtendedText.ServCheckIfAnyExtText(ServiceLine,FALSE);
      TransferExtendedText.InsertServExtText(ServiceLine);
    END;

    LOCAL PROCEDURE OpenServiceOrderPageWithNewOrder@302(CustomerNo@1002 : Code[20]);
    VAR
      ServiceHeader@1000 : Record 5900;
      ServiceOrder@1001 : TestPage 5900;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      OpenServiceOrderPage(ServiceOrder,ServiceHeader."No.");
    END;

    LOCAL PROCEDURE OpenServiceOrderPage@157(VAR ServiceOrder@1000 : TestPage 5900;DocumentNo@1001 : Code[20]);
    BEGIN
      ServiceOrder.OPENEDIT;
      ServiceOrder.FILTER.SETFILTER("No.",DocumentNo);
    END;

    LOCAL PROCEDURE OpenServiceInvoicePage@228(No@1002 : Code[20]);
    VAR
      ServiceInvoice@1001 : TestPage 5933;
    BEGIN
      ServiceInvoice.OPENEDIT;
      ServiceInvoice.FILTER.SETFILTER("No.",No);
      ServiceInvoice.ServLines.GetShipmentLines.INVOKE;
      ServiceInvoice.OK.INVOKE;
    END;

    LOCAL PROCEDURE ChangeCustomerNo@273(VAR ServiceHeader@1000 : Record 5900;CustomerNo@1001 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(FALSE);
      ServiceHeader.VALIDATE("Customer No.",CustomerNo);
    END;

    LOCAL PROCEDURE OpenServiceInvoicePageAndValidateUnitPrice@237(No@1000 : Code[20]);
    VAR
      ServiceInvoice@1001 : TestPage 5933;
    BEGIN
      ServiceInvoice.OPENEDIT;
      ServiceInvoice.FILTER.SETFILTER("No.",No);
      ServiceInvoice.ServLines."Unit Price".SETVALUE(ServiceInvoice.ServLines."Unit Price".VALUE);
    END;

    LOCAL PROCEDURE ConvertMessage@25(ErrorMessage@1000 : Text[1024]) : Text[1024];
    VAR
      NewLine@1001 : Text[1];
    BEGIN
      // Remove New Line Character from Error Message.
      NewLine[1] := 13;
      EXIT(DELCHR(ErrorMessage,'=',NewLine));
    END;

    LOCAL PROCEDURE CopyServiceLine@76(VAR ServiceLineOld@1000 : Record 5902;VAR ServiceLine@1003 : Record 5902);
    BEGIN
      REPEAT
        ServiceLineOld := ServiceLine;
        ServiceLineOld.INSERT;
        LibraryVariableStorage.Enqueue(ServiceLine.Description);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteUserSetup@142(VAR UserSetup@1000 : Record 91;ResponsibilityCenterCode@1001 : Code[10]);
    BEGIN
      UserSetup.SETRANGE("Service Resp. Ctr. Filter",ResponsibilityCenterCode);
      UserSetup.FINDFIRST;
      UserSetup.DELETE(TRUE);
    END;

    LOCAL PROCEDURE CreateGLAccount@148(VATProdPostingGroup@1001 : Code[10]) : Code[20];
    VAR
      GLAccount@1000 : Record 15;
      GenBusinessPostingGroup@1002 : Record 250;
      GenProductPostingGroup@1003 : Record 251;
    BEGIN
      LibraryERM.FindGenBusinessPostingGroup(GenBusinessPostingGroup);
      LibraryERM.FindGenProductPostingGroup(GenProductPostingGroup);
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Bus. Posting Group",GenBusinessPostingGroup.Code);
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GenProductPostingGroup.Code);
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE OpenServiceItemWorksheetPage@242(ServiceOrderNo@1001 : Code[20]);
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceOrder@1003 : TestPage 5900;
    BEGIN
      ServiceHeader.GET(ServiceHeader."Document Type"::Order,ServiceOrderNo);
      ServiceOrder.OPENEDIT;
      ServiceOrder.GOTORECORD(ServiceHeader);
      ServiceOrder.ServItemLines."Service Item Worksheet".INVOKE;
    END;

    LOCAL PROCEDURE FindDetailedCustLedgerEntry@140(VAR DetailedCustLedgEntry@1000 : Record 379;DocumentNo@1001 : Code[20];DocumentType@1002 : Option;EntryType@1003 : Option);
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Entry Type",EntryType);
      DetailedCustLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedCustLedgEntry.SETRANGE("Document Type",DocumentType);
      DetailedCustLedgEntry.FINDSET;
    END;

    LOCAL PROCEDURE FindPostCode@192(VAR PostCode@1000 : Record 225);
    BEGIN
      PostCode.SETFILTER(City,'<>%1','');
      PostCode.SETFILTER("Country/Region Code",'<>%1','');
      LibraryERM.FindPostCode(PostCode);
    END;

    LOCAL PROCEDURE FindPaymentMethodWithBalanceAccount@128() : Code[10];
    VAR
      PaymentMethod@1001 : Record 289;
    BEGIN
      PaymentMethod.SETFILTER("Bal. Account No.",'<>''''');
      PaymentMethod.FINDFIRST;
      EXIT(PaymentMethod.Code);
    END;

    LOCAL PROCEDURE FindServiceDocumentLog@60(VAR ServiceDocumentLog@1002 : Record 5912;DocumentType@1000 : Option;DocumentNo@1001 : Code[20]);
    BEGIN
      ServiceDocumentLog.SETRANGE("Document Type",DocumentType);
      ServiceDocumentLog.SETRANGE("Document No.",DocumentNo);
      ServiceDocumentLog.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceShipmentHeader@122(OrderNo@1001 : Code[20]) : Code[20];
    VAR
      ServiceShipmentHeader@1000 : Record 5990;
    BEGIN
      ServiceShipmentHeader.SETRANGE("Order No.",OrderNo);
      ServiceShipmentHeader.FINDFIRST;
      EXIT(ServiceShipmentHeader."No.");
    END;

    LOCAL PROCEDURE FindServiceInvoiceHeader@114(OrderNo@1001 : Code[20]) : Code[20];
    VAR
      ServiceInvoiceHeader@1000 : Record 5992;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",OrderNo);
      ServiceInvoiceHeader.FINDFIRST;
      EXIT(ServiceInvoiceHeader."No.");
    END;

    LOCAL PROCEDURE FindLastServiceItemLineNo@270(DocumentType@1000 : Option;DocumentNo@1002 : Code[20]) : Integer;
    VAR
      ServiceItemLine@1001 : Record 5901;
    BEGIN
      WITH ServiceItemLine DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        FINDLAST;
        EXIT("Line No.");
      END;
    END;

    LOCAL PROCEDURE FindServiceLineByOrder@305(ServiceHeader@1000 : Record 5900;ServiceLineOrderNo@1003 : Integer;VAR ServiceLine@1002 : Record 5902);
    BEGIN
      GetServiceLine(ServiceLine,ServiceHeader);
      ServiceLine.NEXT(ServiceLineOrderNo - 1);
    END;

    LOCAL PROCEDURE FindServiceLineByServiceItemLineNo@320(VAR ServiceLine@1001 : Record 5902;ServiceHeader@1000 : Record 5900;ServiceItemLineNo@1002 : Integer);
    BEGIN
      WITH ServiceLine DO BEGIN
        SETRANGE("Document Type",ServiceHeader."Document Type");
        SETRANGE("Document No.",ServiceHeader."No.");
        SETRANGE("Service Item Line No.",ServiceItemLineNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE FindServiceLineWithExtText@316(VAR ServiceLine@1002 : Record 5902;ServiceHeader@1001 : Record 5900;ServiceItemLineNo@1000 : Integer);
    BEGIN
      ServiceLine.SETRANGE(Type,ServiceLine.Type::" ");
      FindServiceLineByServiceItemLineNo(ServiceLine,ServiceHeader,ServiceItemLineNo);
    END;

    LOCAL PROCEDURE GetServiceLine@72(VAR ServiceLine@1001 : Record 5902;ServiceHeader@1000 : Record 5900);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDSET;
    END;

    LOCAL PROCEDURE ModifyServiceContractHeader@8(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.CALCFIELDS("Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Annual Amount",ServiceContractHeader."Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Starting Date",WORKDATE);
      ServiceContractHeader.VALIDATE("Price Update Period",ServiceContractHeader."Service Period");
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InsertExtendedTextForServiceLines@259(ServiceHeader@1000 : Record 5900);
    VAR
      ServiceLine@1001 : Record 5902;
      TransferExtendedText@1002 : Codeunit 378;
    BEGIN
      GetServiceLine(ServiceLine,ServiceHeader);
      REPEAT
        TransferExtendedText.ServCheckIfAnyExtText(ServiceLine,TRUE);
        TransferExtendedText.InsertServExtText(ServiceLine);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ReceiveLoanerOnServiceShipment@7(OrderNo@1000 : Code[20]);
    VAR
      ServiceShipmentItemLine@1002 : Record 5989;
      PostedServiceShptSubform@1001 : Page 5976;
    BEGIN
      ServiceShipmentItemLine.SETRANGE("No.",FindServiceShipmentHeader(OrderNo));
      ServiceShipmentItemLine.FINDFIRST;
      CLEAR(PostedServiceShptSubform);
      PostedServiceShptSubform.SETTABLEVIEW(ServiceShipmentItemLine);
      PostedServiceShptSubform.SETRECORD(ServiceShipmentItemLine);
      PostedServiceShptSubform.ReceiveLoaner;
    END;

    LOCAL PROCEDURE ReceiveLoanerOnServiceOrder@24(VAR ServiceItemLine@1001 : Record 5901;ServiceItemNo@1000 : Code[20]);
    VAR
      ServLoanerManagement@1002 : Codeunit 5901;
    BEGIN
      ServiceItemLine.SETRANGE("Service Item No.",ServiceItemNo);
      ServiceItemLine.FINDFIRST;
      ServLoanerManagement.ReceiveLoaner(ServiceItemLine);
    END;

    LOCAL PROCEDURE SaveComments@23(VAR ServiceCommentLineOld@1001 : Record 5906;ServiceItemLine@1000 : Record 5901);
    VAR
      ServiceCommentLine@1002 : Record 5906;
    BEGIN
      ServiceCommentLine.SETRANGE("Table Name",ServiceCommentLine."Table Name"::"Service Header");
      ServiceCommentLine.SETRANGE("Table Subtype",ServiceItemLine."Document Type");
      ServiceCommentLine.SETRANGE("No.",ServiceItemLine."Document No.");
      ServiceCommentLine.FINDSET;
      REPEAT
        ServiceCommentLineOld := ServiceCommentLine;
        ServiceCommentLineOld.INSERT;
      UNTIL ServiceCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SelectDifferentShiptoCode@22(VAR ShipToAddress@1002 : Record 222);
    VAR
      ShipToAddress2@1000 : Record 222;
    BEGIN
      ShipToAddress2.SETRANGE("Customer No.",ShipToAddress."Customer No.");
      ShipToAddress2.SETFILTER(Code,'<>%1',ShipToAddress.Code);
      IF NOT ShipToAddress2.FINDFIRST THEN
        LibrarySales.CreateShipToAddress(ShipToAddress2,ShipToAddress."Customer No.");
      ShipToAddress := ShipToAddress2;
    END;

    LOCAL PROCEDURE ServiceItemNoCreatedOnServiceItemLine@180(DocumentType@1008 : Option;Warranty@1007 : Boolean;ReplenishmentSystem@1009 : Option);
    VAR
      ServiceItemLine@1003 : Record 5901;
    BEGIN
      // Setup: Create Service Order and Update Service Item Line with Item No.,Warranty.
      Initialize;
      CreateServiceDoumentLine(ServiceItemLine,DocumentType);
      UpdateItemAndWarrantyOnServiceItemLine(ServiceItemLine,Warranty,ReplenishmentSystem);

      // Exercise: Create Service Item on Service Item Line.
      CreateServiceItemFromDocument(ServiceItemLine);

      // Verify: Verify Service Item No. field filled with value Service Item Line.
      VerifyServiceItemLineExistServiceItemNo(ServiceItemLine."Item No.");
    END;

    LOCAL PROCEDURE GetOutstandingAmountForServiceLines@178(ServiceHeader@1000 : Record 5900) : Decimal;
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      ServiceLine.SETCURRENTKEY("Document Type","Bill-to Customer No.","Currency Code");
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Bill-to Customer No.",ServiceHeader."Bill-to Customer No.");
      ServiceLine.SETRANGE("Currency Code",ServiceHeader."Currency Code");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.CALCSUMS("Outstanding Amount");
      EXIT(ServiceLine."Outstanding Amount");
    END;

    LOCAL PROCEDURE CalcTotalLineAmount@260(DocType@1002 : Option;DocNo@1000 : Code[20]) : Decimal;
    VAR
      ServiceLine@1003 : Record 5902;
    BEGIN
      WITH ServiceLine DO BEGIN
        SETRANGE("Document Type",DocType);
        SETRANGE("Document No.",DocNo);
        CALCSUMS("Amount Including VAT");
        EXIT("Amount Including VAT");
      END;
    END;

    LOCAL PROCEDURE UpdateItemAndWarrantyOnServiceItemLine@202(VAR ServiceItemLine@1000 : Record 5901;Warranty@1002 : Boolean;ReplenishmentSystem@1001 : Option);
    BEGIN
      ServiceItemLine.VALIDATE("Item No.",CreateItemWithReplenishmentSystem(ReplenishmentSystem));
      ServiceItemLine.VALIDATE(Warranty,Warranty);
      ServiceItemLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateContractOnServiceHeader@75(VAR ServiceHeader@1000 : Record 5900;ContractNo@1002 : Code[20]);
    VAR
      ServiceHeader2@1001 : Record 5900;
    BEGIN
      ServiceHeader2.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      ServiceHeader.VALIDATE("Contract No.",ContractNo);
      ServiceHeader.UpdateServiceOrderChangeLog(ServiceHeader2);
      ServiceHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateServiceContract@21(VAR ServiceContractHeader@1000 : Record 5965);
    BEGIN
      ServiceContractHeader.CALCFIELDS("Calcd. Annual Amount");
      ServiceContractHeader.VALIDATE("Annual Amount",ServiceContractHeader."Calcd. Annual Amount");
      ServiceContractHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateServiceLineWithRandomQtyAndPrice@236(VAR ServiceLine@1003 : Record 5902;ServiceItemLineNo@1002 : Integer);
    BEGIN
      UpdateServiceLine(
        ServiceLine,ServiceItemLineNo,
        LibraryRandom.RandIntInRange(10,20),LibraryRandom.RandDecInRange(1000,2000,2));
    END;

    LOCAL PROCEDURE UpdateServiceLine@19(VAR ServiceLine@1003 : Record 5902;ServiceItemLineNo@1002 : Integer;Quantity@1000 : Decimal;UnitPrice@1001 : Decimal);
    BEGIN
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineNo);
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.VALIDATE("Unit Price",UnitPrice);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdationOfServiceItemGroup@91(VAR ServiceItemLine@1000 : Record 5901);
    VAR
      ServiceItemGroup@1001 : Record 5904;
    BEGIN
      LibraryService.FindServiceItemGroup(ServiceItemGroup);
      ServiceItemLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceItemLine.SETRANGE("Item No.",'');
      IF ServiceItemLine.FINDSET THEN
        REPEAT
          ServiceItemLine.VALIDATE("Service Item Group Code",ServiceItemGroup.Code);
          ServiceItemLine.MODIFY(TRUE);
          ServiceItemGroup.NEXT;
        UNTIL ServiceItemLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@295();
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      LibrarySales.SetCreditWarnings(SalesReceivablesSetup."Credit Warnings"::"Credit Limit");
      LibrarySales.SetStockoutWarning(FALSE);
    END;

    LOCAL PROCEDURE UpdateServiceLineQtyToShipInvoice@280(VAR ServiceLine@1000 : Record 5902;QtyToShipInvoice@1001 : Decimal);
    BEGIN
      WITH ServiceLine DO BEGIN
        VALIDATE("Qty. to Invoice",QtyToShipInvoice);
        VALIDATE("Qty. to Ship",QtyToShipInvoice);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE UpdateCustNoSeries@100();
    VAR
      SalesSetup@1000 : Record 311;
    BEGIN
      SalesSetup.GET;
      SalesSetup.VALIDATE("Customer Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateCustomerCreditLimit@156(CustomerNo@1000 : Code[20];NewCreditLimitAmount@1006 : Decimal);
    VAR
      Customer@1004 : Record 18;
    BEGIN
      WITH Customer DO BEGIN
        GET(CustomerNo);
        VALIDATE("Credit Limit (LCY)",NewCreditLimitAmount);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE SetPostedInvoiceNosEqualInvoiceNosInServSetup@262(VAR ServiceMgtSetup@1000 : Record 5911);
    BEGIN
      ServiceMgtSetup.GET;
      ServiceMgtSetup.VALIDATE("Posted Service Invoice Nos.",LibraryERM.CreateNoSeriesCode);
      ServiceMgtSetup.VALIDATE("Service Invoice Nos.",ServiceMgtSetup."Posted Service Invoice Nos.");
      ServiceMgtSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VendorErrorMessageWhileCreatingServiceItem@193(DocumentType@1008 : Option;Warranty@1007 : Boolean;ReplenishmentSystem@1009 : Option);
    VAR
      ServiceItemLine@1003 : Record 5901;
    BEGIN
      // Setup: Create Service Order and Update Service Item Line with Item No.,Warranty.
      Initialize;
      CreateServiceDoumentLine(ServiceItemLine,DocumentType);
      UpdateItemAndWarrantyOnServiceItemLine(ServiceItemLine,Warranty,ReplenishmentSystem);

      // Exercise: Create Service Item on Service Item Line.
      ASSERTERROR CreateServiceItemFromDocument(ServiceItemLine);

      // Verify: Verify Error message will occur while Creating Service Item.
      Assert.ExpectedError(VendorNoErr);
    END;

    LOCAL PROCEDURE VerifyAmountIncludingVATOnServiceLine@113(ServiceHeader@1000 : Record 5900;VATPercentage@1002 : Decimal);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      GetServiceLine(ServiceLine,ServiceHeader);
      ServiceLine.TESTFIELD("VAT %",VATPercentage);
      ServiceLine.TESTFIELD("Amount Including VAT",ROUND(ServiceLine.Quantity * ServiceLine."Unit Price"));
    END;

    LOCAL PROCEDURE VerifyComments@17(VAR ServiceCommentLineOld@1001 : Record 5906;ServiceItemLine@1000 : Record 5901);
    VAR
      ServiceCommentLine@1002 : Record 5906;
    BEGIN
      ServiceCommentLineOld.FINDFIRST;
      ServiceCommentLine.SETRANGE("Table Name",ServiceCommentLine."Table Name"::"Service Header");
      ServiceCommentLine.SETRANGE("No.",ServiceItemLine."Document No.");
      ServiceCommentLine.SETRANGE("Table Line No.",ServiceItemLine."Line No.");
      ServiceCommentLine.FINDSET;
      REPEAT
        ServiceCommentLine.TESTFIELD(Type,ServiceCommentLineOld.Type);
        ServiceCommentLine.TESTFIELD(Comment,ServiceCommentLineOld.Comment);
        ServiceCommentLineOld.NEXT;
      UNTIL ServiceCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDescOnPostedInvoiceLine@79(VAR ServiceLine@1000 : Record 5902);
    VAR
      ServiceInvoiceHeader@1001 : Record 5992;
      ServiceInvoiceLine@1002 : Record 5993;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",ServiceLine."Document No.");
      ServiceInvoiceHeader.FINDFIRST;
      ServiceLine.FINDSET;
      REPEAT
        ServiceInvoiceLine.GET(ServiceInvoiceHeader."No.",ServiceLine."Line No.");
        ServiceInvoiceLine.TESTFIELD(Description,ServiceLine.Description);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDetailedLedgerEntry@139(DocumentNo@1003 : Code[20];DocumentType@1004 : Option);
    VAR
      DetailedCustLedgEntry@1001 : Record 379;
      TotalAmount@1002 : Decimal;
    BEGIN
      FindDetailedCustLedgerEntry(DetailedCustLedgEntry,DocumentNo,DocumentType,DetailedCustLedgEntry."Entry Type"::Application);
      REPEAT
        TotalAmount += DetailedCustLedgEntry.Amount;
      UNTIL DetailedCustLedgEntry.NEXT = 0;
      Assert.AreEqual(
        0,TotalAmount,
        STRSUBSTNO(
          TotalAmountErr,0,DetailedCustLedgEntry.TABLECAPTION,DetailedCustLedgEntry.FIELDCAPTION("Entry Type"),
          DetailedCustLedgEntry."Entry Type"));
    END;

    LOCAL PROCEDURE VerifyEntriesAfterPostingServiceDocument@131(DocumentType@1001 : Option;DocumentNo@1002 : Code[20];DocumentNo2@1003 : Code[20]);
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,DocumentNo);
      CustLedgerEntry.TESTFIELD(Open,FALSE);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo2);
      CustLedgerEntry.TESTFIELD(Open,FALSE);
      VerifyGLEntries(DocumentNo2);
      VerifyDetailedLedgerEntry(DocumentNo2,DocumentType);
    END;

    LOCAL PROCEDURE VerifyGLEntries@138(DocumentNo@1002 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
      TotalAmount@1001 : Decimal;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
      REPEAT
        TotalAmount += GLEntry.Amount;
      UNTIL GLEntry.NEXT = 0;
      Assert.AreEqual(
        0,TotalAmount,STRSUBSTNO(TotalAmountErr,0,GLEntry.TABLECAPTION,GLEntry.FIELDCAPTION("Document No."),GLEntry."Document No."));
    END;

    LOCAL PROCEDURE VerifyGLEntriesByAccount@165(DocumentNo@1000 : Code[20];GLAccountNo@1001 : Code[20];ExpectedAmount@1004 : Decimal);
    VAR
      GLEntry@1003 : Record 17;
      TotalAmount@1002 : Decimal;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDSET;
      REPEAT
        TotalAmount += GLEntry.Amount;
      UNTIL GLEntry.NEXT = 0;
      Assert.AreEqual(
        ExpectedAmount,TotalAmount,
        STRSUBSTNO(
          GlAccountTotalAmountErr,0,GLEntry.TABLECAPTION,GLEntry.FIELDCAPTION("Document No."),GLEntry."Document No.",
          GLEntry.FIELDCAPTION("G/L Account No."),GLEntry."G/L Account No."));
    END;

    LOCAL PROCEDURE VerifyOutstandingAmountOnServiceLines@190(DocumentNo@1000 : Code[20];Quantity@1004 : Decimal;UnitPrice@1005 : Decimal);
    VAR
      ServiceLine@1002 : Record 5902;
      OutStandingAmount@1001 : Decimal;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Document No.",DocumentNo);
      ServiceLine.FINDSET;
      OutStandingAmount := OutStandingAmount + (OutStandingAmount * ServiceLine."VAT %" / 100);
      REPEAT
        OutStandingAmount := (1 + ServiceLine."VAT %" / 100) * Quantity * UnitPrice;
        Assert.AreNearlyEqual(
          OutStandingAmount,ServiceLine."Outstanding Amount",LibraryERM.GetAmountRoundingPrecision,
          STRSUBSTNO(WrongValueErr,ServiceLine.FIELDCAPTION("Outstanding Amount"),OutStandingAmount,ServiceLine.TABLECAPTION));
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyOutstandingAmountOnGLEntry@168(DocumentNo@1000 : Code[20];TotalOutStandingAmount@1002 : Decimal);
    VAR
      GLEntry@1001 : Record 17;
      GLAmt@1004 : Decimal;
    BEGIN
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      IF TotalOutStandingAmount > 0 THEN
        GLEntry.SETFILTER(Amount,'>0')
      ELSE
        GLEntry.SETFILTER(Amount,'<0');
      IF GLEntry.FINDSET THEN
        REPEAT
          GLAmt += GLEntry.Amount;
        UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(
        TotalOutStandingAmount,GLAmt,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(WrongValueErr,GLEntry.FIELDCAPTION(Amount),GLAmt,GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyVATEntries@163(DocumentNo@1002 : Code[20];ExpectedAmount@1000 : Decimal);
    VAR
      VATEntry@1001 : Record 254;
      TotalAmount@1003 : Decimal;
    BEGIN
      VATEntry.SETRANGE("Document No.",DocumentNo);
      VATEntry.FINDSET;
      REPEAT
        TotalAmount += VATEntry.Amount;
      UNTIL VATEntry.NEXT = 0;
      Assert.AreEqual(
        ExpectedAmount,TotalAmount,
        STRSUBSTNO(TotalAmountErr,ExpectedAmount,VATEntry.TABLECAPTION,VATEntry.FIELDCAPTION("Document No."),VATEntry."Document No."));
    END;

    LOCAL PROCEDURE VerifyVATAmountOnServiceStatistics@207(DocumentType@1000 : Option);
    VAR
      Customer@1007 : Record 18;
      Item@1003 : Record 27;
      ServiceHeader@1001 : Record 5900;
      VATPostingSetup@1009 : Record 325;
    BEGIN
      // Setup: Modify General Ledger Setup and Create Service Document.
      Initialize;
      LibraryERM.SetInvRoundingPrecisionLCY(
        LibraryRandom.RandInt(5) + LibraryUtility.GenerateRandomFraction);
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      Customer.MODIFY(TRUE);
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      Item.MODIFY(TRUE);
      CreateServiceDocument(ServiceHeader,DocumentType,Customer."No.",Item."No.",
        LibraryRandom.RandDec(10,2),LibraryRandom.RandDec(1000,2));

      // Exercise: Open Service Statistics.
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Service Statistics",ServiceHeader);

      // Verify: Verify VAT Amount and "Amount Including VAT" on VAT Amount Lines and VAT Amount on Service Statistics using ServiceStatisticsPageHandler .
    END;

    LOCAL PROCEDURE VerifyDiscountAmount@145(DocumentNo@1001 : Code[20];DiscountAmount@1003 : Decimal;GLAccountNo@1004 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
      ServiceInvoiceHeader@1002 : Record 5992;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",DocumentNo);
      ServiceInvoiceHeader.FINDFIRST;
      GLEntry.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        DiscountAmount,GLEntry.Amount,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(DiscountAmountErr,GLEntry.FIELDCAPTION(Amount),DiscountAmount,GLEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyLinkedServiceLineExists@281(DocumentType@1000 : Option;DocumentNo@1001 : Code[20];ServiceItemLineNo@1003 : Integer);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      WITH ServiceLine DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Service Item Line No.",ServiceItemLineNo);
        Assert.IsFalse(
          ISEMPTY,
          STRSUBSTNO(ServiceLineLineNoErr,FIELDCAPTION("Service Item Line No."),ServiceItemLineNo));
      END;
    END;

    LOCAL PROCEDURE VerifyLoanerEntry@4(ServiceItemLine@1000 : Record 5901);
    VAR
      LoanerEntry@1001 : Record 5914;
    BEGIN
      LoanerEntry.SETRANGE("Loaner No.",ServiceItemLine."Loaner No.");
      LoanerEntry.FINDFIRST;
      LoanerEntry.TESTFIELD("Document No.",ServiceItemLine."Document No.");
      LoanerEntry.TESTFIELD("Service Item Line No.",ServiceItemLine."Line No.");
      LoanerEntry.TESTFIELD("Service Item No.",ServiceItemLine."Service Item No.");
      LoanerEntry.TESTFIELD(Lent,FALSE);
      LoanerEntry.TESTFIELD("Customer No.",ServiceItemLine."Customer No.");
    END;

    LOCAL PROCEDURE VerifyResourceLedgerEntry@104(ResourceNo@1000 : Code[20];DocumentNo@1001 : Code[20];EntryType@1002 : Option;Quantity@1003 : Decimal;TotalPrice@1004 : Decimal);
    VAR
      ResLedgerEntry@1005 : Record 203;
    BEGIN
      ResLedgerEntry.SETRANGE("Resource No.",ResourceNo);
      ResLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ResLedgerEntry.SETRANGE("Entry Type",EntryType);
      ResLedgerEntry.FINDFIRST;
      ResLedgerEntry.TESTFIELD(Quantity,Quantity);
      ResLedgerEntry.TESTFIELD("Total Price",TotalPrice);
    END;

    LOCAL PROCEDURE VerifyShiptoCode@15(ServiceOrderNo@1000 : Code[20]);
    VAR
      ServiceShipmentItemLine@1002 : Record 5989;
      ServiceItem@1001 : Record 5940;
    BEGIN
      // Verify that the Ship to Code on Service Shipment Item Line is Ship to Code on Service Item on Service Shipment Item Line.
      ServiceShipmentItemLine.SETRANGE("No.",FindServiceShipmentHeader(ServiceOrderNo));
      ServiceShipmentItemLine.FINDSET;
      REPEAT
        ServiceItem.GET(ServiceShipmentItemLine."Service Item No.");
        ServiceShipmentItemLine.TESTFIELD("Ship-to Code",ServiceItem."Ship-to Code");
      UNTIL ServiceShipmentItemLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceDocumentLocationCode@290(DocumentType@1001 : Option;CustomerNo@1002 : Code[20];LocationCode@1003 : Code[10]);
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      WITH ServiceHeader DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Customer No.",CustomerNo);
        FINDFIRST;
        Assert.AreEqual(
          LocationCode,"Location Code",
          STRSUBSTNO(WrongValueErr,FIELDCAPTION("Location Code"),LocationCode,TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyServiceDocumentResponsibilityCenter@306(DocumentType@1002 : Option;CustomerNo@1001 : Code[20];ResponsibilityCenter@1000 : Code[10]);
    VAR
      ServiceHeader@1003 : Record 5900;
    BEGIN
      WITH ServiceHeader DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Customer No.",CustomerNo);
        FINDFIRST;
        TESTFIELD("Responsibility Center",ResponsibilityCenter);
      END;
    END;

    LOCAL PROCEDURE VerifyServiceShipmentItemLineCount@234(ServiceOrderNo@1000 : Code[20];ExpectedCount@1003 : Integer);
    VAR
      ServiceShipmentItemLine@1002 : Record 5989;
    BEGIN
      ServiceShipmentItemLine.SETRANGE("No.",FindServiceShipmentHeader(ServiceOrderNo));
      Assert.AreEqual(ExpectedCount,ServiceShipmentItemLine.COUNT,ServShiptItemLineWrongCountErr);
    END;

    LOCAL PROCEDURE VerifyServiceDocumentLog@81(DocumentNo@1000 : Code[20];After@1001 : Text[50];EventNo@1002 : Integer);
    VAR
      ServiceDocumentLog@1003 : Record 5912;
    BEGIN
      ServiceDocumentLog.SETRANGE(After,After);
      FindServiceDocumentLog(ServiceDocumentLog,ServiceDocumentLog."Document Type"::Order,DocumentNo);
      ServiceDocumentLog.TESTFIELD("Event No.",EventNo);
    END;

    LOCAL PROCEDURE VerifyServiceDocumentLogExist@97(DocumentNo@1000 : Code[20];EventNo@1002 : Integer);
    VAR
      ServiceDocumentLog@1003 : Record 5912;
    BEGIN
      ServiceDocumentLog.SETRANGE("Event No.",EventNo);
      FindServiceDocumentLog(ServiceDocumentLog,ServiceDocumentLog."Document Type"::Order,DocumentNo);
    END;

    LOCAL PROCEDURE VerifyServiceDocumentShipment@73(DocumentNo@1000 : Code[20];EventNo@1002 : Integer);
    VAR
      ServiceDocumentLog@1003 : Record 5912;
    BEGIN
      FindServiceDocumentLog(ServiceDocumentLog,ServiceDocumentLog."Document Type"::Shipment,DocumentNo);
      ServiceDocumentLog.TESTFIELD("Event No.",EventNo);
    END;

    LOCAL PROCEDURE VerifyServiceOrderNotExist@342(ServiceHeaderCode@1000 : Code[20]);
    VAR
      ServiceHeader@1001 : Record 5900;
    BEGIN
      ServiceHeader.SETRANGE("No.",ServiceHeaderCode);
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type"::Order);
      Assert.RecordIsEmpty(ServiceHeader);
    END;

    LOCAL PROCEDURE VerifyServiceItemLog@74(ServiceItemNo@1000 : Code[20];After@1001 : Text[50];EventNo@1002 : Integer);
    VAR
      ServiceItemLog@1003 : Record 5942;
    BEGIN
      ServiceItemLog.SETRANGE("Service Item No.",ServiceItemNo);
      ServiceItemLog.SETRANGE(After,After);
      ServiceItemLog.FINDFIRST;
      ServiceItemLog.TESTFIELD("Event No.",EventNo);
    END;

    LOCAL PROCEDURE VerifyServiceItemLogEntry@86(DocumentNo@1000 : Code[20];EventNo@1001 : Integer);
    VAR
      ServiceItemLog@1002 : Record 5942;
    BEGIN
      ServiceItemLog.SETRANGE("Document No.",DocumentNo);
      ServiceItemLog.SETRANGE("Document Type",ServiceItemLog."Document Type"::Order);
      ServiceItemLog.SETRANGE("Event No.",EventNo);
      ServiceItemLog.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyServiceItemLogExist@99(ServiceItemNo@1000 : Code[20];EventNo@1002 : Integer);
    VAR
      ServiceItemLog@1003 : Record 5942;
    BEGIN
      ServiceItemLog.SETRANGE("Service Item No.",ServiceItemNo);
      ServiceItemLog.SETRANGE("Event No.",EventNo);
      ServiceItemLog.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntry@62(No@1003 : Code[20];DocumentNo@1004 : Code[20];ServiceContractNo@1005 : Code[20];EntryType@1001 : Option;Quantity@1000 : Decimal);
    VAR
      ServiceLedgerEntry@1002 : Record 5907;
    BEGIN
      ServiceLedgerEntry.SETRANGE("Document Type",ServiceLedgerEntry."Document Type"::Shipment);
      ServiceLedgerEntry.SETRANGE("Entry Type",EntryType);
      ServiceLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ServiceLedgerEntry.FINDFIRST;
      ServiceLedgerEntry.TESTFIELD("No.",No);
      ServiceLedgerEntry.TESTFIELD("Service Contract No.",ServiceContractNo);
      ServiceLedgerEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntryWithUnitPrice@223(ServiceContractLine@1003 : Record 5964;ExpectedNoOfEntries@1000 : Integer);
    VAR
      ServiceLedgerEntry@1002 : Record 5907;
      ActualNoOfEntries@1001 : Integer;
    BEGIN
      WITH ServiceLedgerEntry DO BEGIN
        SETRANGE("Service Contract No.",ServiceContractLine."Contract No.");
        SETRANGE("Service Item No. (Serviced)",ServiceContractLine."Service Item No.");
        SETRANGE("Document Type","Document Type"::Invoice);
        FINDSET;
        ActualNoOfEntries := COUNT;
        REPEAT
          TESTFIELD("Unit Price",-ServiceContractLine."Line Value" / 12);
        UNTIL NEXT = 0;
      END;
      Assert.AreEqual(ExpectedNoOfEntries,ActualNoOfEntries,NoOfEntriesMsg);
    END;

    LOCAL PROCEDURE VerifyServiceItemGroup@88(DocumentNo@1000 : Code[20];DocumentType@1001 : Option);
    VAR
      ServiceItemLine@1002 : Record 5901;
    BEGIN
      ServiceItemLine.SETRANGE("Document Type",DocumentType);
      ServiceItemLine.SETRANGE("Document No.",DocumentNo);
      IF ServiceItemLine.FINDSET THEN
        REPEAT
          ServiceItemLine.TESTFIELD("Service Item Group Code");
        UNTIL ServiceItemLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyVATAmountOnGLEntry@112(OrderNo@1000 : Code[20];VATAmount@1001 : Decimal);
    VAR
      GLEntry@1004 : Record 17;
      ServiceInvoiceHeader@1005 : Record 5992;
    BEGIN
      ServiceInvoiceHeader.SETRANGE("Order No.",OrderNo);
      ServiceInvoiceHeader.FINDFIRST;
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
      GLEntry.SETRANGE("VAT Amount",VATAmount);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyPostingDateOnServiceLedgerEntry@134(ServiceLine@1000 : Record 5902;DocumentType@1002 : Option;Quantity@1004 : Decimal);
    VAR
      ServiceLedgerEntry@1001 : Record 5907;
    BEGIN
      ServiceLedgerEntry.SETRANGE("Service Order No.",ServiceLine."Document No.");
      ServiceLedgerEntry.SETRANGE("Document Type",DocumentType);
      ServiceLedgerEntry.FINDFIRST;
      ServiceLedgerEntry.TESTFIELD("Posting Date",ServiceLine."Posting Date");
      ServiceLedgerEntry.TESTFIELD("No.",ServiceLine."No.");
      ServiceLedgerEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyWarrantyLedgerEntry@171(ServiceOrderNo@1001 : Code[20]);
    VAR
      WarrantyLedgerEntry@1000 : Record 5908;
    BEGIN
      WarrantyLedgerEntry.SETRANGE("Service Order No.",ServiceOrderNo);
      WarrantyLedgerEntry.FINDFIRST;
      WarrantyLedgerEntry.TESTFIELD(Open,FALSE);
    END;

    LOCAL PROCEDURE VerifyAmountExclVATOnPostedCrMemoStatistics@210(CustomerNo@1000 : Code[20]);
    VAR
      ServiceCrMemoHeader@1002 : Record 5994;
      ServiceCreditMemoStatistics@1003 : TestPage 6034;
    BEGIN
      ServiceCrMemoHeader.SETRANGE("Customer No.",CustomerNo);
      ServiceCrMemoHeader.FINDFIRST;

      ServiceCreditMemoStatistics.OPENVIEW;
      ServiceCreditMemoStatistics.GOTORECORD(ServiceCrMemoHeader);

      WITH ServiceCreditMemoStatistics.Subform DO BEGIN
        FIRST;
        FILTER.SETFILTER("VAT Amount",'>0');
      END;
    END;

    LOCAL PROCEDURE VerifyNextInvoiceDateAndAmountToPeriod@169(ServiceInvoicePeriod@1013 : Option;Formula@1009 : Integer;EndingDate@1006 : Date);
    VAR
      Customer@1003 : Record 18;
      ServiceContractHeader@1002 : Record 5965;
      ServiceContractLine@1004 : Record 5964;
      ServiceItem@1001 : Record 5940;
      ServiceContract@1005 : TestPage 6050;
      Amount@1010 : Decimal;
    BEGIN
      // Setup: Create Service Item and Customer.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
      Amount := LibraryRandom.RandDecInRange(1000,2000,2);

      // Exercise: Create Service Contract Header With Expiration Date.
      LibraryService.CreateServiceContractHeader(
        ServiceContractHeader,ServiceContractHeader."Contract Type"::Contract,ServiceItem."Customer No.");
      ServiceContractHeader.VALIDATE("Starting Date",CALCDATE('<CY+1D>',WORKDATE));  // Starting Date should be First Day of the Next Year.
      ServiceContractHeader.VALIDATE("Expiration Date",CALCDATE('<CY+1D>',ServiceContractHeader."Starting Date"));
      ServiceContractHeader.MODIFY(TRUE);
      LibraryService.CreateServiceContractLine(ServiceContractLine,ServiceContractHeader,ServiceItem."No.");

      // Verify: Verify Amount Per Period and Next Invoice Date on Service Contract Header After Changing Line Value and Service Invoicce Period on Service Contract Lines.
      ServiceContract.OPENVIEW;
      ServiceContract.FILTER.SETFILTER("Contract No.",ServiceContractHeader."Contract No.");
      ServiceContract.ServContractLines."Line Value".SETVALUE(Amount);
      ServiceContract.InvoicePeriod.SETVALUE(ServiceInvoicePeriod);
      ServiceContractHeader.GET(ServiceContractLine."Contract Type",ServiceContractLine."Contract No.");
      ServiceContract.NextInvoiceDate.ASSERTEQUALS(ServiceContractHeader."Starting Date");
      ServiceContract.NextInvoicePeriod.ASSERTEQUALS(
        STRSUBSTNO(NextInvoicePeriodTxt,ServiceContractHeader."Starting Date",EndingDate));
      ServiceContract.AmountPerPeriod.ASSERTEQUALS(Amount / Formula);
    END;

    LOCAL PROCEDURE VerifyServiceItemLineExistServiceItemNo@203(ItemNo@1000 : Code[20]);
    VAR
      ServiceItemLine@1001 : Record 5901;
    BEGIN
      ServiceItemLine.SETRANGE("Item No.",ItemNo);
      ServiceItemLine.SETRANGE("Service Item No.",'');
      IF NOT ServiceItemLine.ISEMPTY THEN
        ERROR(ServiceItemNoErr);
    END;

    LOCAL PROCEDURE VerifyServiceLineAmount@215(DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      WITH ServiceLine DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        Assert.AreEqual(ROUND(Quantity * "Unit Price"),"Line Amount",
          STRSUBSTNO(WrongValueErr,FIELDCAPTION("Line Amount"),"Line Amount"));
      END;
    END;

    LOCAL PROCEDURE VerifyServiceLineInsertLineNo@241(DocumentType@1004 : Option;DocumentNo@1005 : Code[20];ServiceLineBeforeAfterInsert@1001 : Record 5902;IsInsertAfter@1002 : Boolean;CheckLineNoValue@1003 : Integer);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      WITH ServiceLine DO BEGIN
        INIT;
        VALIDATE("Document Type",DocumentType);
        VALIDATE("Document No.",DocumentNo);

        Assert.AreEqual(
          CheckLineNoValue,GetNextLineNo(ServiceLineBeforeAfterInsert,IsInsertAfter),
          STRSUBSTNO(ServiceLineLineNoErr,FIELDCAPTION("Line No."),CheckLineNoValue));
      END;
    END;

    LOCAL PROCEDURE VerifyLoanerEntryExists@337(ServiceItemLine@1001 : Record 5901);
    VAR
      LoanerEntry@1000 : Record 5914;
    BEGIN
      FilterLoanerEntryFromServiceItemLine(LoanerEntry,ServiceItemLine);
      Assert.IsFalse(LoanerEntry.ISEMPTY,LoanerEntryDoesNotExistErr);
    END;

    LOCAL PROCEDURE VerifyLoanerEntryDoesNotExist@267(ServiceItemLine@1001 : Record 5901);
    VAR
      LoanerEntry@1000 : Record 5914;
    BEGIN
      FilterLoanerEntryFromServiceItemLine(LoanerEntry,ServiceItemLine);
      Assert.IsTrue(LoanerEntry.ISEMPTY,LoanerEntryExistsErr);
    END;

    LOCAL PROCEDURE VerifyServiceInvoiceLineItemWithExtendedText@248(ServiceOrderNo@1001 : Code[20];ExpItemNo@1003 : Code[20];ExpExtendedText@1002 : Text[50]);
    VAR
      ServiceInvoiceLine@1000 : Record 5993;
    BEGIN
      WITH ServiceInvoiceLine DO BEGIN
        SETRANGE("Document No.",FindServiceInvoiceHeader(ServiceOrderNo));
        Assert.AreEqual(2,COUNT,STRSUBSTNO(NoOfLinesErr,TABLECAPTION,2));

        SETRANGE(Type,Type::Item);
        FINDFIRST;
        Assert.AreEqual(ExpItemNo,"No.",STRSUBSTNO(WrongValueErr,FIELDCAPTION("No."),ExpItemNo,TABLECAPTION));

        SETRANGE(Type,Type::" ");
        FINDFIRST;
        Assert.AreEqual(ExpExtendedText,Description,STRSUBSTNO(WrongValueErr,FIELDCAPTION(Description),ExpExtendedText,TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyVATBusPostGroupServiceOrder@276(ServiceHeader@1000 : Record 5900;ServiceLine@1004 : Record 5902;VATBusPostingGroupCode@1003 : Code[10]);
    BEGIN
      Assert.AreEqual(
        VATBusPostingGroupCode,ServiceHeader."VAT Bus. Posting Group",
        ServiceHeader.FIELDCAPTION("VAT Bus. Posting Group"));
      Assert.AreEqual(
        VATBusPostingGroupCode,ServiceLine."VAT Bus. Posting Group",
        ServiceLine.FIELDCAPTION("VAT Bus. Posting Group"));
    END;

    LOCAL PROCEDURE VerifyServiceLineCount@304(ServiceHeader@1000 : Record 5900;ExpectedCount@1001 : Integer);
    VAR
      DummyServiceLine@1002 : Record 5902;
    BEGIN
      DummyServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      DummyServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      Assert.RecordCount(DummyServiceLine,ExpectedCount);
    END;

    LOCAL PROCEDURE VerifyServiceLineDescription@303(ServiceLine@1000 : Record 5902;ExpectedType@1002 : Option;ExpectedNo@1001 : Code[20];ExpectedDescription@1003 : Text);
    BEGIN
      WITH ServiceLine DO BEGIN
        Assert.AreEqual(ExpectedType,Type,FIELDCAPTION(Type));
        Assert.AreEqual(ExpectedNo,"No.",FIELDCAPTION("No."));
        Assert.AreEqual(ExpectedDescription,Description,FIELDCAPTION(Description));
      END;
    END;

    LOCAL PROCEDURE FilterLoanerEntryFromServiceItemLine@269(VAR LoanerEntry@1001 : Record 5914;ServiceItemLine@1000 : Record 5901);
    BEGIN
      WITH LoanerEntry DO BEGIN
        SETRANGE("Loaner No.",ServiceItemLine."Loaner No.");
        SETRANGE("Document Type","Document Type"::Order);
        SETRANGE("Document No.",ServiceItemLine."Document No.");
        SETRANGE("Service Item No.",ServiceItemLine."Service Item No.");
      END;
    END;

    [ModalPageHandler]
    PROCEDURE CheckCreditLimitHandler@106(VAR CheckCreditLimit@1000 : TestPage 343);
    BEGIN
      CheckCreditLimit."No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      CheckCreditLimit.No.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CheckCreditLimitHandlerTotal@256(VAR CheckCreditLimit@1000 : TestPage 343);
    BEGIN
      // Verify 'Cust Credit Amount(LCY)' on Credit Limit warning Page.
      CheckCreditLimit.CustCreditAmountLCY.ASSERTEQUALS(LibraryVariableStorage.DequeueDecimal);
      CheckCreditLimit.Yes.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE CheckCreditLimit_ReplyYes_MPH@332(VAR CheckCreditLimit@1000 : TestPage 343);
    BEGIN
      CheckCreditLimit."No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      CheckCreditLimit.Yes.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandler@14(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandlerForFalse@13(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandlerWithAnswer@272(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    VAR
      Answer@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Answer);
      Reply := Answer;
    END;

    [ModalPageHandler]
    PROCEDURE CustomerTemplateHandler@12(VAR CustomerTemplateList@1001 : Page 5156;VAR Response@1000 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE ContractTemplateHandler@6(VAR ServiceContractTemplateList@1001 : Page 6056;VAR Response@1000 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@11(Message@1000 : Text[1024]);
    BEGIN
      // Just for Handle the Message.
    END;

    [PageHandler]
    PROCEDURE FormHandlerResourceAllocation@20(VAR ResourceAllocations@1000 : Page 6005);
    VAR
      ServiceOrderAllocation@1001 : Record 5950;
    BEGIN
      ServiceOrderAllocation.INIT;
      ResourceAllocations.GETRECORD(ServiceOrderAllocation);
      ServiceOrderAllocation.VALIDATE(
        "Resource No.",COPYSTR(LibraryVariableStorage.DequeueText,1,MAXSTRLEN(ServiceOrderAllocation."Resource No.")));
      ServiceOrderAllocation.VALIDATE("Allocation Date",WORKDATE);
      ServiceOrderAllocation.MODIFY(TRUE);

      LibraryVariableStorage.Enqueue(ServiceOrderAllocation."Entry No.");
    END;

    [ModalPageHandler]
    PROCEDURE FormHandlerCancelAllocation@27(VAR ReallocationEntryReasons@1000 : Page 6022;VAR Response@1002 : Action);
    BEGIN
      Response := ACTION::Yes;
    END;

    [ModalPageHandler]
    PROCEDURE FormHandlerRelAllocation@89(VAR CancelledAllocationReasons@1000 : Page 6002;VAR Response@1002 : Action);
    BEGIN
      Response := ACTION::Yes;
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormHandlerLookupOK@84(VAR ServiceItemComponentList@1000 : Page 5986;VAR Response@1001 : Action);
    VAR
      ServiceItemComponent@1002 : Record 5941;
    BEGIN
      // Modal form handler. Return Action as LookupOK for first record found.
      ServiceItemComponent.SETRANGE("Parent Service Item No.",LibraryVariableStorage.DequeueText);
      ServiceItemComponent.FINDFIRST;
      ServiceItemComponentList.SETRECORD(ServiceItemComponent);
      Response := ACTION::LookupOK;
    END;

    [PageHandler]
    PROCEDURE ServiceOrderHandler@107(VAR ServiceOrder@1000 : TestPage 5900);
    BEGIN
      // Catch the "The update has been interrupted to respect the warning."
      ASSERTERROR ServiceOrder."Customer No.".ACTIVATE;
    END;

    [StrMenuHandler]
    PROCEDURE StrMenuHandler@82(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := LibraryVariableStorage.DequeueInteger;
    END;

    [ModalPageHandler]
    PROCEDURE PageHandlerServiceLines@118(VAR ServiceLines@1001 : TestPage 5905);
    BEGIN
      ServiceLines."Posting Date".ASSERTEQUALS(LibraryVariableStorage.DequeueDate);
      ServiceLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceItemWorksheetHandler@147(VAR ServiceItemWorksheet@1000 : TestPage 5906);
    VAR
      Item@1002 : Record 27;
      ServiceLine@1001 : Record 5902;
    BEGIN
      CreateServiceLinesOnPage(ServiceItemWorksheet,ServiceLine.Type::" ",'');
      CreateServiceLinesOnPage(ServiceItemWorksheet,ServiceLine.Type::Item,LibraryInventory.CreateItem(Item));
      CreateServiceLinesOnPage(ServiceItemWorksheet,ServiceLine.Type::" ",'');
    END;

    [ModalPageHandler]
    PROCEDURE ServiceItemWorksheetHandlerOneLine@247(VAR ServiceItemWorksheet@1000 : TestPage 5906);
    VAR
      Item@1002 : Record 27;
      ServiceLine@1001 : Record 5902;
    BEGIN
      CreateServiceLinesOnPage(ServiceItemWorksheet,ServiceLine.Type::Item,LibraryInventory.CreateItem(Item));
    END;

    [ModalPageHandler]
    PROCEDURE ServiceItemWorksheet_ValidateFaultReasonCode_MPH@283(VAR ServiceItemWorksheet@1000 : TestPage 5906);
    BEGIN
      ServiceItemWorksheet.ServInvLines."Fault Reason Code".SETVALUE(LibraryVariableStorage.DequeueText);
    END;

    [ModalPageHandler]
    PROCEDURE ServiceItemWorksheet_EnableExcludeContractDiscount_MPH@266(VAR ServiceItemWorksheet@1000 : TestPage 5906);
    BEGIN
      ServiceItemWorksheet.ServInvLines."Exclude Contract Discount".SETVALUE(TRUE);
    END;

    [ModalPageHandler]
    PROCEDURE ServiceItemListHandler@172(VAR ServiceItemList@1000 : TestPage 5981);
    VAR
      ServiceItemCardPage@1001 : TestPage 5980;
    BEGIN
      ServiceItemCardPage.OPENNEW;
      ServiceItemCardPage.Description.ACTIVATE;
      ServiceItemList.OK.INVOKE;
      LibraryVariableStorage.Enqueue(ServiceItemCardPage."No.".VALUE); // Format required for Testpage variable.
    END;

    [ModalPageHandler]
    PROCEDURE ServiceLinesSequenceHandler@146(VAR ServiceLines@1002 : TestPage 5905);
    BEGIN
      // Verify sequence of Service Lines.
      REPEAT
        ServiceLines.Description.ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      UNTIL ServiceLines.NEXT = TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ResGrAvailabilityServiceHandler@183(VAR ResGrAvailabilityService@1000 : TestPage 6010);
    VAR
      ViewBy@1001 : 'Day,Week,Month';
    BEGIN
      ResGrAvailabilityService.PeriodType.SETVALUE(ViewBy::Month);
      ResGrAvailabilityService.ShowMatrix.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ResGrAvailServMatrixHandler@182(VAR ResGrAvailServMatrix@1000 : TestPage 9221);
    BEGIN
      ResGrAvailServMatrix.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceStatisticsPageHandler@201(VAR ServiceStatistics@1000 : TestPage 6030);
    BEGIN
      WITH ServiceStatistics.SubForm DO BEGIN
        FILTER.SETFILTER("VAT %",'0');
        "Amount Including VAT".ASSERTEQUALS("Line Amount".VALUE);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceOrderSubformPageHandler@218(VAR ServiceLines@1002 : TestPage 5905);
    VAR
      ServiceItemNo@1000 : Variant;
      ItemNo@1003 : Variant;
      Counter@1001 : Integer;
    BEGIN
      LibraryVariableStorage.Dequeue(ServiceItemNo);
      LibraryVariableStorage.Dequeue(ItemNo);
      ServiceLines."Service Item No.".ASSERTEQUALS(ServiceItemNo);
      ServiceLines."No.".ASSERTEQUALS(ItemNo);
      WHILE ServiceLines.NEXT DO
        Counter := Counter + 1;
      Assert.AreEqual(1,Counter,STRSUBSTNO(ServiceLineErr,ServiceItemNo));
    END;

    [ModalPageHandler]
    PROCEDURE ServiceLinesValidateUnitPrice_MPH@125(VAR ServiceLines@1002 : TestPage 5905);
    BEGIN
      ServiceLines."Unit Price".SETVALUE(LibraryVariableStorage.DequeueDecimal);
      ServiceLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceLinesValidateQuantity_MPH@239(VAR ServiceLines@1002 : TestPage 5905);
    BEGIN
      ServiceLines.Quantity.SETVALUE(LibraryVariableStorage.DequeueDecimal);
      ServiceLines.OK.INVOKE;
      LibraryVariableStorage.Enqueue(1); // dummy enqueue for handler call's count
    END;

    [ModalPageHandler]
    PROCEDURE ServiceLinesNewLineWithExtendedText@309(VAR ServiceLines@1006 : TestPage 5905);
    BEGIN
      ServiceLines.NEW;
      ServiceLines."No.".SETVALUE(CreateStandardTextWithExtendedText);
      ServiceLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceLinesNewLine_MPH@315(VAR ServiceLines@1002 : TestPage 5905);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      ServiceLines.NEW;
      ServiceLines.Type.SETVALUE(ServiceLine.Type::Item);
      ServiceLines."No.".SETVALUE(LibraryInventory.CreateItemNo);
      ServiceLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceQuoteLinesNewLine_MPH@286(VAR ServiceQuoteLines@1002 : TestPage 5966);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      ServiceQuoteLines.NEW;
      ServiceQuoteLines.Type.SETVALUE(ServiceLine.Type::Item);
      ServiceQuoteLines."No.".SETVALUE(LibraryInventory.CreateItemNo);
      ServiceQuoteLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GetServiceShipmentLinesHandler@227(VAR GetServiceShipmentLines@1000 : TestPage 5994);
    BEGIN
      GetServiceShipmentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE InsertTravelFeePageHandler@243(VAR ServiceItemWorksheet@1000 : TestPage 5906);
    VAR
      NoOfInsertFees@1001 : Variant;
      i@1002 : Integer;
      NoOfFeesToInsert@1003 : Integer;
    BEGIN
      LibraryVariableStorage.Dequeue(NoOfInsertFees);
      NoOfFeesToInsert := NoOfInsertFees;
      FOR i := 1 TO NoOfFeesToInsert DO
        ServiceItemWorksheet.ServInvLines."Insert Travel Fee".INVOKE;
    END;

    [MessageHandler]
    PROCEDURE ExactMessageHandler@252(Message@1000 : Text);
    BEGIN
      Assert.ExpectedMessage(LibraryVariableStorage.DequeueText,Message);
    END;

    BEGIN
    {
      // [FEATURE] [Service]

      Unsupported version tags:
      NA: Unable to Compile

      TFS_TS_ID = 21728
      Covered Test cases:
        TC0117 TFS_TC_ID=31863 and 12062
        TC0118 TFS_TC_ID=31864 and 12063
        TC0119 TFS_TC_ID=31865 and 12064
        TC0121 TFS_TC_ID=31867 and 12066
        TC0122 TFS_TC_ID=31868 and 12067
        TC0123 TFS_TC_ID=31869 and 12068
        TC0124 TFS_TC_ID=31870 and 12069
        TC0125 TFS_TC_ID=31871 and 12070

      TFS_TS_ID = 167035
      Covered Test cases:
        TFS_TC_ID=141397
        TFS_TC_ID=141398
        TFS_TC_ID=141399

      TFS_TS_ID = 172910, 172911, 172912
      Cover Test cases:
       TFS_TC_ID=141406

      BUG ID 378567
      ---------------------------------------------------------------------------------------------
      Test Function Name                                                                  TFS ID
      ---------------------------------------------------------------------------------------------
      GenBusinessPostingGroupInLinesUpdated,
      GenBusinessPostingGroupInLinesNotUpdated                                            378255
    }
    END.
  }
}

