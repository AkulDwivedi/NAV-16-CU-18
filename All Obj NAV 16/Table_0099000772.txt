OBJECT Table 99000772 Production BOM Line
{
  OBJECT-PROPERTIES
  {
    Date=01-08-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.48992,NAVIN9.00.00.48992;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestStatus;
             END;

    OnModify=BEGIN
               IF Type <> Type::" " THEN
                 TestStatus;
             END;

    OnDelete=VAR
               ProdBOMComment@1000 : Record 99000776;
               PlanningAssignment@1001 : Record 99000850;
               BOMChangeLog@1500002 : Record 16534;
               Item@1500001 : Record 27;
               EntryNo@1500000 : Integer;
             BEGIN
               IF Type <> Type::" " THEN BEGIN
                 TestStatus;
                 IF Type = Type::Item THEN
                   PlanningAssignment.AssignPlannedOrders("No.",FALSE)
                 ELSE
                   IF Type = Type::"Production BOM" THEN
                     PlanningAssignment.OldBom("No.");
               END;

               ProdBOMComment.SETRANGE("Production BOM No.","Production BOM No.");
               ProdBOMComment.SETRANGE("BOM Line No.","Line No.");
               ProdBOMComment.SETRANGE("Version Code","Version Code");

               IF ProdBOMComment.FINDSET THEN
                 REPEAT
                   BOMReasonCodeLine.RESET;
                   BOMReasonCodeLine.SETRANGE("Production BOM No.","Production BOM No.");
                   BOMReasonCodeLine.SETRANGE("Line No.","Line No.");
                   BOMReasonCodeLine.SETRANGE("Version Code","Version Code");
                   IF NOT BOMReasonCodeLine.FINDFIRST THEN
                     InsertBOMReasonCodeLine(ProdBOMComment);
                 UNTIL ProdBOMComment.NEXT = 0
               ELSE
                 IF CONFIRM(Text16500,TRUE,"Production BOM No.") THEN
                   ERROR('');
               IF "Principal Input" THEN BEGIN
                 BOMChangeLog.RESET;
                 IF BOMChangeLog.FINDLAST THEN
                   EntryNo := BOMChangeLog."Entry No." + 1
                 ELSE
                   EntryNo := 1;
                 BOMChangeLog.INIT;
                 BOMChangeLog."Entry No." := EntryNo;
                 BOMChangeLog."Raw Material Code" := "No.";
                 BOMChangeLog."BOM No." := "Production BOM No.";
                 BOMChangeLog."Effective Date" := 0D;
                 BOMChangeLog."Raw Material Line No." := "Line No.";
                 BOMChangeLog.Quantity := Quantity;
                 BOMChangeLog."Quantity per" := "Quantity per";
                 BOMChangeLog."Unit Of Measure" := "Unit of Measure Code";
                 BOMChangeLog."PI Status" := TRUE;
                 BOMChangeLog.Deleted :=TRUE;
                 Item.RESET;
                 Item.SETRANGE("Production BOM No.","Production BOM No.");
                 IF Item.FINDFIRST THEN
                   BOMChangeLog."FG Code" := Item."No.";
                 BOMChangeLog.INSERT(TRUE);
               END;
               ProdBOMComment.DELETEALL;
             END;

    CaptionML=[ENU=Production BOM Line;
               ENN=Production BOM Line];
  }
  FIELDS
  {
    { 1   ;   ;Production BOM No.  ;Code20        ;TableRelation="Production BOM Header";
                                                   CaptionML=[ENU=Production BOM No.;
                                                              ENN=Production BOM No.];
                                                   NotBlank=Yes }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 3   ;   ;Version Code        ;Code20        ;TableRelation="Production BOM Version"."Version Code" WHERE (Production BOM No.=FIELD(Production BOM No.));
                                                   CaptionML=[ENU=Version Code;
                                                              ENN=Version Code] }
    { 10  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                TestStatus;

                                                                xRec.Type := Type;

                                                                INIT;
                                                                Type := xRec.Type;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENN=Type];
                                                   OptionCaptionML=[ENU=" ,Item,Production BOM";
                                                                    ENN=" ,Item,Production BOM"];
                                                   OptionString=[ ,Item,Production BOM] }
    { 11  ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Item)) Item WHERE (Type=CONST(Inventory))
                                                                 ELSE IF (Type=CONST(Production BOM)) "Production BOM Header";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Type);

                                                                TestStatus;

                                                                CASE Type OF
                                                                  Type::Item:
                                                                    BEGIN
                                                                      Item.GET("No.");
                                                                      Description := Item.Description;
                                                                      Item.TESTFIELD("Base Unit of Measure");
                                                                      "Unit of Measure Code" := Item."Base Unit of Measure";
                                                                      "Scrap %" := Item."Scrap %";
                                                                      IF "No." <> xRec."No." THEN
                                                                        "Variant Code" := '';
                                                                    END;
                                                                  Type::"Production BOM":
                                                                    BEGIN
                                                                      ProdBOMHeader.GET("No.");
                                                                      ProdBOMHeader.TESTFIELD("Unit of Measure Code");
                                                                      Description := ProdBOMHeader.Description;
                                                                      "Unit of Measure Code" := ProdBOMHeader."Unit of Measure Code";
                                                                    END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 12  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 13  ;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE IF (Type=CONST(Production BOM)) "Unit of Measure";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("No.");
                                                                IF xRec."Unit of Measure Code" <> "Unit of Measure Code" THEN
                                                                  TESTFIELD(Type,Type::Item);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENN=Unit of Measure Code] }
    { 14  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ENN=Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 15  ;   ;Position            ;Code10        ;CaptionML=[ENU=Position;
                                                              ENN=Position] }
    { 16  ;   ;Position 2          ;Code10        ;CaptionML=[ENU=Position 2;
                                                              ENN=Position 2] }
    { 17  ;   ;Position 3          ;Code10        ;CaptionML=[ENU=Position 3;
                                                              ENN=Position 3] }
    { 18  ;   ;Lead-Time Offset    ;DateFormula   ;OnValidate=BEGIN
                                                                TESTFIELD("No.");
                                                              END;

                                                   CaptionML=[ENU=Lead-Time Offset;
                                                              ENN=Lead-Time Offset] }
    { 19  ;   ;Routing Link Code   ;Code10        ;TableRelation="Routing Link";
                                                   OnValidate=BEGIN
                                                                IF "Routing Link Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD("No.");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Routing Link Code;
                                                              ENN=Routing Link Code] }
    { 20  ;   ;Scrap %             ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("No.");
                                                              END;

                                                   CaptionML=[ENU=Scrap %;
                                                              ENN=Scrap %];
                                                   DecimalPlaces=0:5;
                                                   MaxValue=100;
                                                   BlankNumbers=BlankNeg }
    { 21  ;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   OnValidate=BEGIN
                                                                IF "Variant Code" = '' THEN
                                                                  EXIT;
                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("No.");
                                                                ItemVariant.GET("No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ENN=Variant Code] }
    { 22  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Production BOM Comment Line" WHERE (Production BOM No.=FIELD(Production BOM No.),
                                                                                                          Version Code=FIELD(Version Code),
                                                                                                          BOM Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 28  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD("No.");

                                                                IF "Starting Date" > 0D THEN
                                                                  VALIDATE("Ending Date");
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              ENN=Starting Date] }
    { 29  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD("No.");

                                                                IF ("Ending Date" > 0D) AND
                                                                   ("Starting Date" > 0D) AND
                                                                   ("Starting Date" > "Ending Date")
                                                                THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Ending Date"),
                                                                    FIELDCAPTION("Starting Date"));
                                                              END;

                                                   CaptionML=[ENU=Ending Date;
                                                              ENN=Ending Date] }
    { 40  ;   ;Length              ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Length;
                                                              ENN=Length];
                                                   DecimalPlaces=0:5 }
    { 41  ;   ;Width               ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Width;
                                                              ENN=Width];
                                                   DecimalPlaces=0:5 }
    { 42  ;   ;Weight              ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Weight;
                                                              ENN=Weight];
                                                   DecimalPlaces=0:5 }
    { 43  ;   ;Depth               ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Depth;
                                                              ENN=Depth];
                                                   DecimalPlaces=0:5 }
    { 44  ;   ;Calculation Formula ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("No.");

                                                                CASE "Calculation Formula" OF
                                                                  "Calculation Formula"::" ":
                                                                    Quantity := "Quantity per";
                                                                  "Calculation Formula"::Length:
                                                                    Quantity := ROUND(Length * "Quantity per",0.00001);
                                                                  "Calculation Formula"::"Length * Width":
                                                                    Quantity := ROUND(Length * Width * "Quantity per",0.00001);
                                                                  "Calculation Formula"::"Length * Width * Depth":
                                                                    Quantity := ROUND(Length * Width * Depth * "Quantity per",0.00001);
                                                                  "Calculation Formula"::Weight:
                                                                    Quantity := ROUND(Weight * "Quantity per",0.00001);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Calculation Formula;
                                                              ENN=Calculation Formula];
                                                   OptionCaptionML=[ENU=" ,Length,Length * Width,Length * Width * Depth,Weight";
                                                                    ENN=" ,Length,Length * Width,Length * Width * Depth,Weight"];
                                                   OptionString=[ ,Length,Length * Width,Length * Width * Depth,Weight] }
    { 45  ;   ;Quantity per        ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Quantity per;
                                                              ENN=Quantity per];
                                                   DecimalPlaces=0:5 }
    { 16500;  ;Principal Input     ;Boolean       ;CaptionML=[ENU=Principal Input;
                                                              ENN=Principal Input];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Production BOM No.,Version Code,Line No.;Clustered=Yes }
    {    ;Type,No.                                 }
    {    ;Production BOM No.,Version Code,No.     ;SumIndexFields=Quantity per }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 must be later than %2.;ENN=%1 must be later than %2.';
      Item@1001 : Record 27;
      ProdBOMHeader@1002 : Record 99000771;
      ItemVariant@1003 : Record 5401;
      Text16500@1500001 : TextConst 'ENU=The Comment has not been entered yet for BOM No. %1. Do you want to enter Comment for this BOM ?;ENN=The Comment has not been entered yet for BOM No. %1. Do you want to enter Comment for this BOM ?';
      BOMReasonCodeLine@1500003 : Record 16535;
      ProdBOMComment@1500002 : Record 99000776;
      BOMVersionUOMErr@1004 : TextConst '@@@="%1=UOM Code;%2=Item No.;%3=Production BOM No.;%4=Version Code";ENU="The Unit of Measure Code %1 for Item %2 does not exist. Identification fields and values: Production BOM No. = %3, Version Code = %4.";ENN="The Unit of Measure Code %1 for Item %2 does not exist. Identification fields and values: Production BOM No. = %3, Version Code = %4."';
      BOMHeaderUOMErr@1005 : TextConst '@@@="%1=UOM Code;%2=Item No.;%3=Production BOM No.";ENU="The Unit of Measure Code %1 for Item %2 does not exist. Identification fields and values: Production BOM No. = %3.";ENN="The Unit of Measure Code %1 for Item %2 does not exist. Identification fields and values: Production BOM No. = %3."';
      BOMLineUOMErr@1006 : TextConst '@@@="%1=UOM Code;%2=Item No.;%3=Production BOM No.;%4=Version Code;%5=Line No.";ENU="The Unit of Measure Code %1 for Item %2 does not exist. Identification fields and values: Production BOM No. = %3, Version Code = %4, Line No. = %5.";ENN="The Unit of Measure Code %1 for Item %2 does not exist. Identification fields and values: Production BOM No. = %3, Version Code = %4, Line No. = %5."';

    LOCAL PROCEDURE TestStatus@1();
    VAR
      ProdBOMVersion@1000 : Record 99000779;
    BEGIN
      IF "Version Code" = '' THEN BEGIN
        ProdBOMHeader.GET("Production BOM No.");
        IF ProdBOMHeader.Status = ProdBOMHeader.Status::Certified THEN
          ProdBOMHeader.FIELDERROR(Status);
      END ELSE BEGIN
        ProdBOMVersion.GET("Production BOM No.","Version Code");
        IF ProdBOMVersion.Status = ProdBOMVersion.Status::Certified THEN
          ProdBOMVersion.FIELDERROR(Status);
      END;
    END;

    PROCEDURE GetQtyPerUnitOfMeasure@2() : Decimal;
    VAR
      Item@1000 : Record 27;
      UOMMgt@1001 : Codeunit 5402;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        Item.GET("No.");
        EXIT(
          UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code"));
      END;
      EXIT(1);
    END;

    PROCEDURE InsertBOMReasonCodeLine@1500000(ProductionBOMCommentLine@1500000 : Record 99000776);
    VAR
      BOMReasonCodeLine2@1500001 : Record 16535;
      LineNo@1500002 : Integer;
    BEGIN
      BOMReasonCodeLine2.RESET;
      IF BOMReasonCodeLine2.FINDLAST THEN
        LineNo := BOMReasonCodeLine2."Line No." + 10000
      ELSE
        LineNo := 10000;
      BOMReasonCodeLine2.INIT;
      BOMReasonCodeLine2."Production BOM No." := ProductionBOMCommentLine."Production BOM No.";
      BOMReasonCodeLine2."BOM Line No." := ProductionBOMCommentLine."BOM Line No.";
      BOMReasonCodeLine2."Line No." := LineNo;
      BOMReasonCodeLine2."Version Code" := ProductionBOMCommentLine."Version Code";
      BOMReasonCodeLine2.Date := ProductionBOMCommentLine.Date;
      BOMReasonCodeLine2.Comment := ProductionBOMCommentLine.Comment;
      BOMReasonCodeLine2.Code := ProductionBOMCommentLine.Code;
      BOMReasonCodeLine2."Raw Material Code" := "No.";
      BOMReasonCodeLine2."Raw Material Description" := Description;
      BOMReasonCodeLine2."Unit of Measure Code" := "Unit of Measure Code";
      BOMReasonCodeLine2.Quantity := Quantity;
      BOMReasonCodeLine2."Quantity per" := "Quantity per";
      BOMReasonCodeLine2."User ID" := USERID;
      BOMReasonCodeLine2.INSERT
    END;

    PROCEDURE GetBOMHeaderQtyPerUOM@3(Item@1000 : Record 27) : Decimal;
    VAR
      ProdBOMHeader@1003 : Record 99000771;
      ProdBOMVersion@1002 : Record 99000779;
      ItemUnitOfMeasure@1004 : Record 5404;
      UOMMgt@1001 : Codeunit 5402;
    BEGIN
      IF "Production BOM No." = '' THEN
        EXIT(1);

      IF "Version Code" <> '' THEN BEGIN
        ProdBOMVersion.GET("Production BOM No.","Version Code");
        IF NOT ItemUnitOfMeasure.GET(Item."No.",ProdBOMVersion."Unit of Measure Code") THEN
          ERROR(BOMVersionUOMErr,ProdBOMVersion."Unit of Measure Code",Item."No.","Production BOM No.","Version Code");
        EXIT(UOMMgt.GetQtyPerUnitOfMeasure(Item,ProdBOMVersion."Unit of Measure Code"));
      END;

      ProdBOMHeader.GET("Production BOM No.");
      IF NOT ItemUnitOfMeasure.GET(Item."No.",ProdBOMHeader."Unit of Measure Code") THEN
        ERROR(BOMHeaderUOMErr,ProdBOMHeader."Unit of Measure Code",Item."No.","Production BOM No.");
      EXIT(UOMMgt.GetQtyPerUnitOfMeasure(Item,ProdBOMHeader."Unit of Measure Code"));
    END;

    PROCEDURE GetBOMLineQtyPerUOM@4(Item@1000 : Record 27) : Decimal;
    VAR
      ItemUnitOfMeasure@1001 : Record 5404;
      UOMMgt@1002 : Codeunit 5402;
    BEGIN
      IF "No." = '' THEN
        EXIT(1);

      IF NOT ItemUnitOfMeasure.GET(Item."No.","Unit of Measure Code") THEN
        ERROR(BOMLineUOMErr,"Unit of Measure Code",Item."No.","Production BOM No.","Version Code","Line No.");
      EXIT(UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code"));
    END;

    BEGIN
    END.
  }
}

