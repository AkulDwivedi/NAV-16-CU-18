OBJECT Codeunit 144061 ERM TCS
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GLSetup@1500009 : Record 98;
      CompanyInformation@1500014 : Record 79;
      AssesseeCode@1500013 : Record 13727;
      TcsNatureOfCollection@1500018 : Record 16507;
      NodNocHeader@1500019 : Record 13786;
      TCSSetup@1500016 : Record 16508;
      TaxJournalTemplate@1500023 : Record 16585;
      TaxJournalBatch@1500022 : Record 16586;
      LibraryRandom@1500004 : Codeunit 130440;
      LibraryERM@1500002 : Codeunit 131300;
      LibrarySales@1500001 : Codeunit 130509;
      LibraryTDS@1500006 : Codeunit 143000;
      LibrarySetupStorage@1500012 : Codeunit 131009;
      LibraryTCS@1500017 : Codeunit 143008;
      LibraryInventory@1500007 : Codeunit 132201;
      LibraryJournals@1500011 : Codeunit 131306;
      LibraryVariableStorage@1500015 : Codeunit 131004;
      LibraryUtility@1500020 : Codeunit 131000;
      LibraryReportDataset@1500021 : Codeunit 131007;
      Assert@1500003 : Codeunit 130000;
      CreditAmountErr@1500005 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=The Amount in GL Entry is %1 and the actual value is %2.';
      AmountErr@1500008 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=%1 is incorrect in %2.';
      isInitialized@1500000 : Boolean;

    [Test]
    PROCEDURE VerifyTCSAmountBankRcptVoucher@1500003();
    VAR
      GenJnlLine@1500005 : Record 81;
      ExpectedTCSEntry@1500003 : Record 16514;
      GenJnlTemplate@1500000 : Record 80;
      TCSAmount@1500001 : Decimal;
    BEGIN
      // [SCENARIO 65591] Verify program allows to post the Bank Receipt Voucher is posted with TCS
      // [FEATURE] [TCS] [BANK RECEIPT VOUCHER]

      // [GIVEN] Created TCS Setup
      Initialize;
      TCSAmount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create and Post Bank Receipt Voucher with TCS
      CreateJournalLineDocuments(
        GenJnlLine,GenJnlLine."Document Type"::Payment,GenJnlLine."Bal. Account Type"::"Bank Account",
        GenJnlTemplate.Type::General,GenJnlTemplate."Sub Type"::"Bank Receipt Voucher",-TCSAmount);
      CalculateTCSForVerification(ExpectedTCSEntry,-GenJnlLine."TDS/TCS Base Amount",TCSSetup);
      LibraryERM.PostGeneralJnlLine(GenJnlLine);

      // [THEN] GL and TCS Entries has been created
      VerifyGLEntry(GenJnlLine."Document No.",TCSAmount);
      VerifyTCSEntry(ExpectedTCSEntry,GenJnlLine."Document No.",GenJnlLine."Document Type",FALSE);
    END;

    [Test]
    PROCEDURE VerifyTCSAmountCashRcptVoucher@1500029();
    VAR
      GenJnlLine@1500005 : Record 81;
      ExpectedTCSEntry@1500003 : Record 16514;
      GenJnlTemplate@1500000 : Record 80;
      TCSAmount@1500001 : Decimal;
    BEGIN
      // [SCENARIO 65591] Verify program allows to post the Cash Receipt Voucher is posted with TCS
      // [FEATURE] [TCS] [CASH RECEIPT VOUCHER]

      // [GIVEN] Created TCS Setup
      Initialize;
      TCSAmount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create and Post Cash Receipt Voucher with TCS
      CreateJournalLineDocuments(
        GenJnlLine,GenJnlLine."Document Type"::Payment,GenJnlLine."Bal. Account Type"::"Bank Account",
        GenJnlTemplate.Type::General,GenJnlTemplate."Sub Type"::"Cash Receipt Voucher",-TCSAmount);
      CalculateTCSForVerification(ExpectedTCSEntry,-GenJnlLine."TDS/TCS Base Amount",TCSSetup);
      LibraryERM.PostGeneralJnlLine(GenJnlLine);

      // [THEN] GL and TCS Entries has been created
      VerifyGLEntry(GenJnlLine."Document No.",TCSAmount);
      VerifyTCSEntry(ExpectedTCSEntry,GenJnlLine."Document No.",GenJnlLine."Document Type",FALSE);
    END;

    [Test]
    PROCEDURE VerifyTCSAmountGeneralJournal@1500000();
    VAR
      GenJnlLine@1500005 : Record 81;
      ExpectedTCSEntry@1500003 : Record 16514;
      GenJnlTemplate@1500000 : Record 80;
      TCSAmount@1500001 : Decimal;
    BEGIN
      // [SCENARIO 163710] Verify whether the program is creating correct G/L entries and TCS entries details when an invoice is raised to customer in General Journal
      // [FEATURE] [TCS] [GENERAL JOURNAL]

      // [GIVEN] Created TCS Setup
      Initialize;
      TCSAmount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create and Post General Journal with TCS
      CreateJournalLineDocuments(
        GenJnlLine,GenJnlLine."Document Type"::Invoice,GenJnlLine."Bal. Account Type"::"G/L Account",
        GenJnlTemplate.Type::General,GenJnlTemplate."Sub Type"::" ",TCSAmount);
      CalculateTCSForVerification(ExpectedTCSEntry,GenJnlLine."TDS/TCS Base Amount",TCSSetup);
      LibraryERM.PostGeneralJnlLine(GenJnlLine);

      // [THEN] GL and TCS Entries has been created
      VerifyGLEntry(GenJnlLine."Document No.",GenJnlLine.Amount + ABS(ExpectedTCSEntry."Total TCS Including SHE CESS"));
      VerifyTCSEntry(ExpectedTCSEntry,GenJnlLine."Document No.",GenJnlLine."Document Type",FALSE);
    END;

    [Test]
    PROCEDURE VerifyTCSAmountSalesJournal@1500006();
    VAR
      GenJnlLine@1500005 : Record 81;
      ExpectedTCSEntry@1500003 : Record 16514;
      GenJnlTemplate@1500007 : Record 80;
      TCSAmount@1500002 : Decimal;
    BEGIN
      // [SCENARIO 163711] Check whether system is creating correct G/L entries and TCS entries details when an invoice is raised to customer in Sales Journal
      // [FEATURE] [TCS] [SALES JOURNAL]

      // [GIVEN] Created TCS Setup
      Initialize;
      TCSAmount := LibraryRandom.RandDec(1000,0);

      // [WHEN] Create and Post Sales Journal with TCS
      CreateJournalLineDocuments(
        GenJnlLine,GenJnlLine."Document Type"::Invoice,GenJnlLine."Bal. Account Type"::"G/L Account",
        GenJnlTemplate.Type::Sales,GenJnlTemplate."Sub Type"::" ",TCSAmount);
      CalculateTCSForVerification(ExpectedTCSEntry,GenJnlLine."TDS/TCS Base Amount",TCSSetup);
      LibraryERM.PostGeneralJnlLine(GenJnlLine);

      // [THEN] GL and TCS Entries has been created
      VerifyGLEntry(GenJnlLine."Document No.",TCSAmount + ExpectedTCSEntry."Total TCS Including SHE CESS");
      VerifyTCSEntry(ExpectedTCSEntry,GenJnlLine."Document No.",GenJnlLine."Document Type",FALSE);
    END;

    [Test]
    PROCEDURE GeneralJournalWithAdvPaymentAndTCS@1500002();
    VAR
      GenJnlLine@1500003 : Record 81;
      ExpectedTCSEntry@1500002 : Record 16514;
      GenJnlTemplate@1500001 : Record 80;
      TCSAmount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 163712] Check if the program is creating correct G/L entries and TCS entries when an advance payment is received from customer in General Journal
      // [FEATURE] [TCS] [GENERAL JOURNAL]

      // [GIVEN] Created TCS Setup
      Initialize;
      TCSAmount := LibraryRandom.RandDec(1000,0);

      // [WHEN] Create and Post General Journal with TCS
      CreateJournalLineDocuments(
        GenJnlLine,GenJnlLine."Document Type"::Payment,GenJnlLine."Bal. Account Type"::"G/L Account",
        GenJnlTemplate.Type::General,GenJnlTemplate."Sub Type"::" ",-TCSAmount);
      CalculateTCSForVerification(ExpectedTCSEntry,-GenJnlLine."TDS/TCS Base Amount",TCSSetup);
      LibraryERM.PostGeneralJnlLine(GenJnlLine);

      // [THEN] GL and TCS Entries has been created
      VerifyGLEntry(GenJnlLine."Document No.",TCSAmount);
      VerifyTCSEntry(ExpectedTCSEntry,GenJnlLine."Document No.",GenJnlLine."Document Type",FALSE);
    END;

    [Test]
    PROCEDURE CashRcptJournalWithAdvPaymentAndTCS@1500015();
    VAR
      GenJnlLine@1500003 : Record 81;
      ExpectedTCSEntry@1500002 : Record 16514;
      GenJnlTemplate@1500001 : Record 80;
      TCSAmount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 163713] Check whether system is creating correct G/L entries and TCS entries when an advance payment is received from customer in Cash Receipt Journal
      // [FEATURE] [TCS] [CASH RECEIPT JOURNAL]

      // [GIVEN] Created TCS Setup
      Initialize;
      TCSAmount := LibraryRandom.RandDec(1000,0);

      // [WHEN] Create and Post Cash Receipt Journal with TCS
      CreateJournalLineDocuments(
        GenJnlLine,GenJnlLine."Document Type"::Payment,GenJnlLine."Bal. Account Type"::"Bank Account",
        GenJnlTemplate.Type::"Cash Receipts",GenJnlTemplate."Sub Type"::" ",-TCSAmount);
      CalculateTCSForVerification(ExpectedTCSEntry,-GenJnlLine."TDS/TCS Base Amount",TCSSetup);
      LibraryERM.PostGeneralJnlLine(GenJnlLine);

      // [THEN] GL and TCS Entries has been created
      VerifyGLEntry(GenJnlLine."Document No.",TCSAmount);
      VerifyTCSEntry(ExpectedTCSEntry,GenJnlLine."Document No.",GenJnlLine."Document Type",FALSE);
    END;

    [Test]
    PROCEDURE CashRcptVoucherWithAdvPaymentAndTCS@1500010();
    VAR
      GenJnlLine@1500003 : Record 81;
      ExpectedTCSEntry@1500002 : Record 16514;
      GenJnlTemplate@1500001 : Record 80;
      TCSAmount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 163714] Check if program is creating correct G/L entries and TCS entries when an advance payment is received from customer in Cash Receipt Voucher
      // [FEATURE] [TCS] [CASH RECEIPT VOUCHER]

      // [GIVEN] Created TCS Setup
      Initialize;
      TCSAmount := LibraryRandom.RandDec(1000,0);

      // [WHEN] Create and Post Cash Receipt Voucher with TCS
      CreateJournalLineDocuments(
        GenJnlLine,GenJnlLine."Document Type"::Payment,GenJnlLine."Bal. Account Type"::"G/L Account",
        GenJnlTemplate.Type::General,GenJnlTemplate."Sub Type"::"Cash Receipt Voucher",-TCSAmount);
      CalculateTCSForVerification(ExpectedTCSEntry,-GenJnlLine."TDS/TCS Base Amount",TCSSetup);
      LibraryERM.PostGeneralJnlLine(GenJnlLine);

      // [THEN] GL and TCS Entries has been created
      VerifyGLEntry(GenJnlLine."Document No.",TCSAmount);
      VerifyTCSEntry(ExpectedTCSEntry,GenJnlLine."Document No.",GenJnlLine."Document Type",FALSE);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,UpdateTCSChallanRegisterRequestPageHandler,GenerateCertificateNosRequestPageHandler,ConfirmHandler,MessageHandler,ReportHandlerTCSChallanRegister)]
    PROCEDURE GenerateTCSChallanRegister@1500008();
    VAR
      SalesHeader@1500001 : Record 36;
      GenJournalLine@1500000 : Record 81;
      DocumentNo@1500003 : Code[20];
    BEGIN
      // [SCENARIO 163754] Check if the system is generating `TCS Challan register' report according to the given parameters.
      // [FEATURE] [TCS] [SALES ORDER]

      // [GIVEN] Created TCS Setup
      Initialize;
      UpdateTCSAccNo;

      // [WHEN] Step 1: Create and Post Sales Order with TCS
      CreateSalesDocWithTCS(SalesHeader,SalesHeader."Document Type"::Order);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      // Step 2: Create and Post Payment Journal with Pay TCS
      CreatePaymentJournalWithPayTCS(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      // Step 3: Update TCS Register, Challan Register and Generate TCS Cretificate Nos.
      UpdateTCSRegisterDetails(GenJournalLine."Document No.");
      UpdateTCSChallanDetails(GenJournalLine."Document No.");
      GenerateCertificateNos;

      // [THEN] TCS Challan Register Report has been generated
      VerifyTCSChallanRegister(GenJournalLine."Document No.",DocumentNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TCSAdjustmentJournalWithIncreasedTCSApplied@1500007();
    VAR
      SalesHeader@1500000 : Record 36;
      TCSEntry@1500006 : Record 16514;
      TCSEntry1@1500007 : Record 16514;
      DocumentNo@1500002 : Code[20];
      TCSADjusmentJnlDocNo@1500003 : Code[20];
      TCSAdjustmentAmt@1500004 : Decimal;
    BEGIN
      // [SCENARIO 163756] Check if the system is updating TCS entries through TCS Adjustment Journal with increase in TCS% applied
      // [FEATURE] [TCS] [TCS ADJUSTMENT JOURNAL]

      // [GIVEN] Created TCS Setup
      Initialize;

      // [WHEN] Step 1: Create and Post Sales Order with TCS, Create TCS Adjustment Journal with greater TCS% Applied value
      CreateSalesDocWithTCS(SalesHeader,SalesHeader."Document Type"::Order);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      FindTCSEntry(TCSEntry,DocumentNo);
      CreateTCSAdjusmentJnlGreaterTCSApplied(DocumentNo,TCSADjusmentJnlDocNo,TCSAdjustmentAmt);

      // [THEN] GL Entries for TCS Adjusment Journal has been created
      VerifyGLEntry(TCSADjusmentJnlDocNo,TCSAdjustmentAmt);
      FindTCSEntry(TCSEntry1,DocumentNo);
      TCSEntry1.TESTFIELD("Total TCS Including SHE CESS",TCSEntry."Total TCS Including SHE CESS" + TCSAdjustmentAmt);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TCSAdjustmentJournalWithDecreasedTCSApplied@1500035();
    VAR
      SalesHeader@1500000 : Record 36;
      TCSEntry@1500006 : Record 16514;
      TCSEntry1@1500007 : Record 16514;
      DocumentNo@1500002 : Code[20];
      TCSADjusmentJnlDocNo@1500003 : Code[20];
      TCSAdjustmentAmt@1500004 : Decimal;
    BEGIN
      // [SCENARIO 163757] Check if the system is updating TCS entries through TCS Adjustment Journal with decrease in TCS% applied
      // [FEATURE] [TCS] [TCS ADJUSTMENT JOURNAL]

      // [GIVEN] Created TCS Setup
      Initialize;

      // [WHEN] Create and Post Sales Order with TCS, Create TCS Adjustment Journal with lesser TCS% Applied value
      CreateSalesDocWithTCS(SalesHeader,SalesHeader."Document Type"::Order);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      FindTCSEntry(TCSEntry,DocumentNo);
      CreateTCSAdjusmentJnlLesserTCSApplied(DocumentNo,TCSADjusmentJnlDocNo,TCSAdjustmentAmt);

      // [THEN] GL Entries for TCS Adjusment Journal has been created
      VerifyGLEntry(TCSADjusmentJnlDocNo,-TCSAdjustmentAmt);
      FindTCSEntry(TCSEntry1,DocumentNo);
      TCSEntry1.TESTFIELD("Total TCS Including SHE CESS",TCSEntry."Total TCS Including SHE CESS" + TCSAdjustmentAmt);
    END;

    [Test]
    PROCEDURE SalesOrderWithTCSAndDimension@1500009();
    VAR
      SalesHeader@1500000 : Record 36;
      SalesInvoiceLine@1500002 : Record 113;
      DocumentNo@1500003 : Code[20];
      DimensionSetID@1500004 : Integer;
    BEGIN
      // [SCENARIO 163748] Verify that sales order can be posted successfully with TCS and dimension.
      // [FEATURE] [TCS] [SALES ORDER]

      // [GIVEN] Created TCS Setup
      Initialize;

      // [WHEN] Create Sales Order, Add Dimension and Post
      CreateSalesDocWithTCS(SalesHeader,SalesHeader."Document Type"::Order);
      DimensionSetID := AddDimensionsForSalesLines(SalesHeader."No.");
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Dimensions are updated in Posted Sales Document
      FindSalesInvLine(SalesInvoiceLine,DocumentNo);
      SalesInvoiceLine.TESTFIELD("Dimension Set ID",DimensionSetID);
    END;

    [Test]
    PROCEDURE SalesOrderWithTCSAndInvoiceDiscount@1500011();
    VAR
      SalesHeader@1500000 : Record 36;
      ExpectedTCSEntry@1500001 : Record 16514;
      SalesInvoiceLine@1500005 : Record 113;
      DocumentNo@1500002 : Code[20];
      DocType@1500003 : ',Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder';
      DiscAmount@1500004 : Decimal;
      CustInvDiscPer@1500006 : Integer;
    BEGIN
      // [SCENARIO 163696] Check if system is calculating TCS in case of creating Sales Order with invoice discount
      // [FEATURE] [TCS TRANSACTION]

      // [GIVEN] Created TCS Setup, Updated Calc. Inv. Discount boolean in Sales & Receivables Setup to TRUE and Created new Cust. Inv. Discount Per.
      Initialize;
      UpdateSalesSetupCalcInvDisc;
      CustInvDiscPer := CreateCustomerInvDisc;

      // [WHEN] Create and Post Sales Order with Invoice Discount
      CreateSalesDocWithTCS(SalesHeader,SalesHeader."Document Type"::Order);
      SalesHeader.CALCFIELDS("Amount to Customer");
      DiscAmount := SalesHeader."Amount to Customer" * CustInvDiscPer / 100;
      CalculateTCSForVerification(ExpectedTCSEntry,SalesHeader."Amount to Customer" - DiscAmount,TCSSetup);
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] GL and TCS Entries has been created
      FindSalesInvLine(SalesInvoiceLine,DocumentNo);
      VerifyGLEntry(DocumentNo,SalesInvoiceLine."Amount To Customer" + SalesInvoiceLine."Inv. Discount Amount");
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,DocType::Invoice,FALSE);
    END;

    LOCAL PROCEDURE Initialize@123();
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;
      GLSetup.GET;
      CompanyInformation.GET;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      LibraryTCS.CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTCS.CreateTCSNatureCollectionAndTCSSetup(TcsNatureOfCollection,TCSSetup,TCSSetup."TCS Type"::E,AssesseeCode.Code);
      LibraryTCS.CreateNODNOCSetup(NodNocHeader,NodNocHeader.Type::Customer,CreateCustomerWithTaxDetails,AssesseeCode.Code,
        TcsNatureOfCollection.Code,TRUE,TRUE,TRUE);
      LibraryTCS.CreateTaxJournalTemplateTCSAdj(TaxJournalTemplate);
      LibraryTCS.CreateTaxJournalBatchTCSAdj(TaxJournalBatch,TaxJournalTemplate.Name);
      isInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE AddDimensionsForSalesLines@1500036(DocumentNo@1000 : Code[20]) : Integer;
    VAR
      SalesLine@1500003 : Record 37;
      DimensionValue@1500001 : Record 349;
      LibraryDimension@1500000 : Codeunit 131001;
      DimensionSetID@1500004 : Integer;
    BEGIN
      SalesLine.SETFILTER("Document No.",DocumentNo);
      SalesLine.FINDFIRST;
      LibraryDimension.CreateDimWithDimValue(DimensionValue);
      DimensionSetID := LibraryDimension.CreateDimSet(DimensionSetID,DimensionValue."Dimension Code",DimensionValue.Code);
      SalesLine.VALIDATE("Dimension Set ID",DimensionSetID);
      SalesLine.MODIFY(TRUE);
      EXIT(DimensionSetID);
    END;

    LOCAL PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@1500748();
    VAR
      DeductorCategory@1500001 : Record 16498;
    BEGIN
      LibraryERM.CreateDeductorCategory(DeductorCategory);
      CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithTaxDetails@1500458() : Code[20];
    VAR
      Customer@1500000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("P.A.N. No.",'ACFPH4256B');
      Customer.VALIDATE("Tax Liable",TRUE);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CalculateTCSForVerification@1500865(VAR ExpectedTCSEntry@1500006 : Record 16514;Amount@1500001 : Decimal;TCSSetup@1500000 : Record 16508) : Decimal;
    BEGIN
      WITH ExpectedTCSEntry DO BEGIN
        "TCS Base Amount" := Amount;
        "TCS Amount" := LibraryTDS.RoundTCSAmount(TCSSetup."TCS %" * Amount / 100);
        "Surcharge Amount" := LibraryTDS.RoundTCSAmount((TCSSetup."TCS %" * Amount / 100) * (TCSSetup."Surcharge %" / 100));
        "eCESS Amount" := LibraryTDS.RoundTCSAmount(("TCS Amount" + "Surcharge Amount") * TCSSetup."eCESS %" / 100);
        "SHE Cess Amount" := LibraryTDS.RoundTCSAmount(("TCS Amount" + "Surcharge Amount") * TCSSetup."SHE Cess %" / 100);
        "Total TCS Including SHE CESS" :=
          LibraryTDS.RoundTCSAmount("TCS Amount" + "Surcharge Amount" + "eCESS Amount" + "SHE Cess Amount");
      END;
    END;

    LOCAL PROCEDURE CreateJournalLineDocuments@1500012(VAR GenJournalLine@1003 : Record 81;DocumentType@1500003 : Option;BalAccType@1500000 : Option;TemplateType@1500002 : Option;SubType@1500004 : Option;Amount@1500001 : Decimal);
    VAR
      GenJournalBatch@1500006 : Record 232;
      GenJnlTemplate@1500005 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJnlTemplate);
      GenJnlTemplate.VALIDATE(Type,TemplateType);
      GenJnlTemplate.VALIDATE("Sub Type",SubType);
      GenJnlTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJnlTemplate.Name);
      CreateGeneralJournalLineWithBatch(GenJournalLine,DocumentType,BalAccType,GenJournalBatch."Journal Template Name",
        GenJournalBatch.Name,Amount);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLineWithBatch@1500005(VAR GenJournalLine@1500006 : Record 81;DocumentType@1500002 : Option;BalAccType@1500003 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';JournalTemplateName@1500001 : Code[10];JournalBatchName@1500000 : Code[10];Amount@1500005 : Decimal);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,JournalTemplateName,JournalBatchName,DocumentType,GenJournalLine."Account Type"::Customer,
        NodNocHeader."No.",Amount);
      GenJournalLine.VALIDATE("Posting Date",WORKDATE);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Customer);
      GenJournalLine.VALIDATE("Party Code",NodNocHeader."No.");
      CASE BalAccType OF
        BalAccType::"Bank Account":
          BEGIN
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
            GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
          END;
        BalAccType::"G/L Account":
          BEGIN
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
            GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
          END;
      END;
      GenJournalLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocWithTCS@1500004(VAR SalesHeader@1500000 : Record 36;DocType@1500005 : Option);
    VAR
      Item@1500003 : Record 27;
      SalesLine@1500002 : Record 37;
      TCSAmount@1500001 : Decimal;
    BEGIN
      TCSAmount := LibraryRandom.RandDec(1000,0);
      LibrarySales.CreateSalesHeader(SalesHeader,DocType,NodNocHeader."No.");
      SalesHeader.VALIDATE("Posting Date",WORKDATE);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItem(Item),1);
      SalesLine.VALIDATE("Unit Price",TCSAmount);
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePaymentJournalWithPayTCS@1500019(VAR GenJournalLine@1500086 : Record 81);
    VAR
      GenJournalTemplate@1500091 : Record 80;
      GenJournalBatch@1500092 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::General);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(GenJournalTemplate.Name);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"G/L Account",TCSSetup."TCS Account No.",GenJournalLine."Bal. Account Type"::"Bank Account",
        LibraryERM.CreateBankAccountNo,0);
      GenJournalLine.VALIDATE("Posting Date",WORKDATE);
      GenJournalLine.VALIDATE("T.C.A.N. No.",CompanyInformation."T.C.A.N. No.");
      GenJournalLine.VALIDATE("Pay TCS",TRUE);
      GenJournalLine.MODIFY(TRUE);
      PayTCS(GenJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateTCSAdjusmentJnlGreaterTCSApplied@1500013(DocumentNo@1500003 : Code[20];VAR TCSAdjJnlDocNo@1500005 : Code[20];VAR TCSAdjAmount@1500006 : Decimal);
    VAR
      TCSEntry@1500002 : Record 16514;
      TCSAdjustmentJournal@1500004 : TestPage 16524;
    BEGIN
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.FINDFIRST;
      COMMIT;
      WITH TCSAdjustmentJournal DO BEGIN
        OPENEDIT;
        CurrentJnlBatchName.SETVALUE(TaxJournalBatch.Name);
        "Transaction No".SETVALUE(TCSEntry."Entry No.");
        "TDS/TCS % Applied".SETVALUE(LibraryRandom.RandIntInRange(TCSSetup."TCS %" + 1,TCSSetup."TCS %" + 5));
        TCSAdjJnlDocNo := "Document No.".VALUE;
        TCSAdjAmount := Amount.ASDECIMAL;
        Action50.INVOKE;
      END;
    END;

    LOCAL PROCEDURE CreateTCSAdjusmentJnlLesserTCSApplied@1500034(DocumentNo@1500003 : Code[20];VAR TCSAdjJnlDocNo@1500005 : Code[20];VAR TCSAdjAmount@1500006 : Decimal);
    VAR
      TCSEntry@1500002 : Record 16514;
      TCSAdjustmentJournal@1500004 : TestPage 16524;
    BEGIN
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.FINDFIRST;
      COMMIT;
      WITH TCSAdjustmentJournal DO BEGIN
        OPENEDIT;
        CurrentJnlBatchName.SETVALUE(TaxJournalBatch.Name);
        "Transaction No".SETVALUE(TCSEntry."Entry No.");
        "TDS/TCS % Applied".SETVALUE(LibraryRandom.RandIntInRange(1,TCSSetup."TCS %" - 1));
        TCSAdjJnlDocNo := "Document No.".VALUE;
        TCSAdjAmount := Amount.ASDECIMAL;
        Action50.INVOKE;
      END;
    END;

    LOCAL PROCEDURE CreateCustomerInvDisc@1500017() : Integer;
    VAR
      CustInvoiceDisc@1500000 : Record 19;
      InvDiscPercentage@1500001 : Decimal;
    BEGIN
      InvDiscPercentage := LibraryRandom.RandInt(5);
      CustInvoiceDisc.INIT;
      CustInvoiceDisc.VALIDATE(Code,NodNocHeader."No.");
      CustInvoiceDisc.VALIDATE("Discount %",InvDiscPercentage);
      CustInvoiceDisc.INSERT;
      EXIT(InvDiscPercentage);
    END;

    LOCAL PROCEDURE GenerateCertificateNos@1500047();
    BEGIN
      COMMIT;
      REPORT.RUN(REPORT::"Generate TCS Certificate Nos.");
    END;

    LOCAL PROCEDURE FindGLEntry@1500566(VAR GLEntry@1500003 : Record 17;DocumentNo@1500001 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindTCSEntry@1500025(VAR TCSEntry@1500000 : Record 16514;DocumentNo@1500001 : Code[20]);
    BEGIN
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesInvLine@1500043(VAR SalesInvoiceLine@1500000 : Record 113;DocumentNo@1500001 : Code[20]);
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.FINDFIRST;
    END;

    LOCAL PROCEDURE PayTCS@1500028(JournalBatchName@1500126 : Code[20]);
    VAR
      BankPaymentVoucher@1500127 : TestPage 16577;
      PayTCS@1500128 : TestPage 16514;
    BEGIN
      COMMIT;
      BankPaymentVoucher.OPENEDIT;
      BankPaymentVoucher.CurrentJnlBatchName.SETVALUE(JournalBatchName);
      PayTCS.TRAP;
      BankPaymentVoucher.Action1500034.INVOKE;
      PayTCS.Action1500147.INVOKE;
    END;

    LOCAL PROCEDURE SaveTCSChallanRegisterEntries@1500001(PayTCSDocNo@1500000 : Code[20]);
    VAR
      TCSChallanRegisterEntries@1500002 : Record 16516;
      TCSChallanRegister@1500001 : Report 16516;
    BEGIN
      CLEAR(TCSChallanRegister);
      TCSChallanRegisterEntries.SETRANGE("Pay TCS Document No.",PayTCSDocNo);
      TCSChallanRegisterEntries.FINDFIRST;
      COMMIT;
      TCSChallanRegister.SETTABLEVIEW(TCSChallanRegisterEntries);
      TCSChallanRegister.RUN;
    END;

    LOCAL PROCEDURE UpdateTCSRegisterDetails@1500050(PayTCSDocNo@1500001 : Code[20]);
    BEGIN
      LibraryVariableStorage.Enqueue(PayTCSDocNo);
      COMMIT;
      REPORT.RUN(REPORT::"Update TCS Challan Details");
    END;

    LOCAL PROCEDURE UpdateTCSChallanDetails@1500021(PayTCSDocNo@1500001 : Code[20]);
    VAR
      TCSChallanRegister@1500000 : Record 16516;
      UpdateTCSChallanRegister@1500002 : Report 16522;
      UpdatedTCSAmount@1500003 : Decimal;
    BEGIN
      TCSChallanRegister.SETRANGE("Pay TCS Document No.",PayTCSDocNo);
      TCSChallanRegister.FINDFIRST;
      COMMIT;
      UpdatedTCSAmount := LibraryRandom.RandDec(100,2);
      UpdateTCSChallanRegister.SETTABLEVIEW(TCSChallanRegister);
      UpdateTCSChallanRegister.UpdateChallan(UpdatedTCSAmount,UpdatedTCSAmount,UpdatedTCSAmount,TCSChallanRegister."Entry No.");
      UpdateTCSChallanRegister.USEREQUESTPAGE(FALSE);
      UpdateTCSChallanRegister.RUNMODAL;
    END;

    LOCAL PROCEDURE UpdateTCSAccNo@1500040();
    BEGIN
      TCSSetup.SETRANGE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      TCSSetup.FINDFIRST;
      TCSSetup.VALIDATE("TCS Account No.",LibraryERM.CreateGLAccountNo);
      TCSSetup.MODIFY;
    END;

    LOCAL PROCEDURE UpdateSalesSetupCalcInvDisc@1500016();
    VAR
      SalesReceivablesSetup@1500000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Calc. Inv. Discount",TRUE);
      SalesReceivablesSetup.MODIFY;
    END;

    LOCAL PROCEDURE VerifyTCSEntry@1500078(ExpectedTCSEntryAmounts@1500005 : Record 16514;DocumentNo@1500000 : Code[20];DocumentType@1500001 : Option;DoubleRoundingPrecision@1500004 : Boolean);
    VAR
      TCSEntry@1500002 : Record 16514;
      RoundingPrecision@1500006 : Decimal;
    BEGIN
      TCSEntry.SETRANGE("Document No.",DocumentNo);
      TCSEntry.SETRANGE("Document Type",DocumentType);
      TCSEntry.FINDLAST;

      RoundingPrecision := GLSetup."TCS Rounding Precision";
      IF DoubleRoundingPrecision THEN
        RoundingPrecision := RoundingPrecision * 2;
      Assert.AreNearlyEqual(
        ExpectedTCSEntryAmounts."TCS Amount",TCSEntry."TCS Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("TCS Amount"),TCSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTCSEntryAmounts."eCESS Amount",TCSEntry."eCESS Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("eCESS Amount"),TCSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTCSEntryAmounts."SHE Cess Amount",TCSEntry."SHE Cess Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("SHE Cess Amount"),TCSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTCSEntryAmounts."Surcharge Amount",TCSEntry."Surcharge Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,TCSEntry.FIELDNAME("Surcharge Amount"),TCSEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyGLEntry@1500070(DocumentNo@1500001 : Code[20];Amount@1500002 : Decimal);
    VAR
      GLEntry@1500005 : Record 17;
      CreditAmount@1500008 : Decimal;
    BEGIN
      FindGLEntry(GLEntry,DocumentNo);
      REPEAT
        CreditAmount += GLEntry."Credit Amount"
      UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(CreditAmount,Amount,GLSetup."TCS Rounding Precision",STRSUBSTNO(CreditAmountErr,CreditAmount,Amount));
    END;

    LOCAL PROCEDURE VerifyTCSChallanRegister@1500014(PayTCSDocumentNo@1500000 : Code[20];PostedSalesDocNo@1500001 : Code[20]);
    VAR
      TCSEntry@1500003 : Record 16514;
    BEGIN
      SaveTCSChallanRegisterEntries(PayTCSDocumentNo);
      TCSEntry.SETRANGE("Document No.",PostedSalesDocNo);
      TCSEntry.FINDFIRST;
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('TCS_Challan_Register__Pay_TCS_Document_No__',PayTCSDocumentNo);
      LibraryReportDataset.AssertElementWithValueExists('ABS__Total_Invoice_Amount__',TCSEntry."Invoice Amount");
      LibraryReportDataset.AssertElementWithValueExists('TCS_Challan_Register__Total_TCS_Amount_',TCSEntry."TCS Amount");
    END;

    [ModalPageHandler]
    PROCEDURE GeneralJournalTemplateHandler@1500018(VAR GeneralJournalTemplateHandler@1500129 : TestPage 250);
    VAR
      GeneralJournalTemplateName@1500000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(GeneralJournalTemplateName);
      GeneralJournalTemplateHandler.FILTER.SETFILTER(Name,GeneralJournalTemplateName);
      GeneralJournalTemplateHandler.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE UpdateTCSChallanRegisterRequestPageHandler@1500039(VAR UpdateTCSChallanDetails@1500118 : TestRequestPage 16520);
    VAR
      PayTCSDocumentNo@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(PayTCSDocumentNo);
      UpdateTCSChallanDetails.Control1500001.SETVALUE(PayTCSDocumentNo);
      UpdateTCSChallanDetails.Control1500002.SETVALUE(FORMAT(LibraryRandom.RandInt(1000)));
      UpdateTCSChallanDetails.Control1500004.SETVALUE(WORKDATE);
      UpdateTCSChallanDetails.Control1500007.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20));
      UpdateTCSChallanDetails.Control1500009.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(7,0),1,7));
      UpdateTCSChallanDetails.Control1500010.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      UpdateTCSChallanDetails.Control1500012.SETVALUE(WORKDATE);
      UpdateTCSChallanDetails.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateCertificateNosRequestPageHandler@1500461(VAR GenerateCertificateNos@1500118 : TestRequestPage 16517);
    VAR
      IncomeTaxPeriodSetup@1500000 : Record 16501;
      PartyType@1500123 : ' ,Party,Customer,Vendor';
    BEGIN
      WITH IncomeTaxPeriodSetup DO BEGIN
        SETRANGE("Starting Date",WORKDATE);
        FINDFIRST;
        GenerateCertificateNos.PartyType.SETVALUE(PartyType::Customer);
        GenerateCertificateNos.Control1280005.SETVALUE(NodNocHeader."No.");
        GenerateCertificateNos.Control1280007.SETVALUE(TCSSetup."TCS Type");
        GenerateCertificateNos.StartDate.SETVALUE("Starting Date");
        GenerateCertificateNos.EndDate.SETVALUE("Ending Date");
        GenerateCertificateNos.ReceiptNumber.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(8,0),1,8));
        GenerateCertificateNos.OK.INVOKE;
      END;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@1500501(Text@1500101 : Text;VAR Reply@1500102 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500502(Msg@1560501 : Text);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerTCSChallanRegister@1500060(VAR TCSChallanRegister@1500000 : TestRequestPage 16516);
    BEGIN
      TCSChallanRegister.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    END.
  }
}

