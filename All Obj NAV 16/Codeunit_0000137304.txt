OBJECT Codeunit 137304 SCM Manufacturing Reports
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1013 : Record 82;
      ItemJournalBatch@1012 : Record 233;
      LibraryInventory@1018 : Codeunit 132201;
      LibraryManufacturing@1002 : Codeunit 132202;
      LibrarySales@1006 : Codeunit 130509;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryReportDataset@1019 : Codeunit 131007;
      LibraryVariableStorage@1020 : Codeunit 131004;
      LibraryPatterns@1021 : Codeunit 132212;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1008 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      ProductionOrderErr@1003 : TextConst 'ENU=Production Order No. must exist.';
      RecordErr@1005 : TextConst 'ENU=Record must not be empty.';
      ElementNotFoundErr@1004 : TextConst 'ENU=Element not found for %1';

    [Test]
    [HandlerFunctions(ProdOrderCompAndRoutingRequestPageHandler)]
    PROCEDURE PlannedProdOrderCompRouting@9();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Planned);  // Create Planned Production Order.
      ProdOrderCompAndRoutingReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderCompAndRoutingRequestPageHandler)]
    PROCEDURE FirmPlanProdOrderCompRouting@13();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::"Firm Planned");  // Create Firm Planned Production Order.
      ProdOrderCompAndRoutingReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderCompAndRoutingRequestPageHandler)]
    PROCEDURE ReleasedProdOrderCompRouting@17();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);  // Create Released Production Order.
      ProdOrderCompAndRoutingReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ProdOrderCompAndRoutingRequestPageHandler)]
    PROCEDURE FinishedProdOrderCompRouting@19();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);  // Create Production Order and Refresh.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      ProdOrderCompAndRoutingReport(ProductionOrder.Status::Finished,ProductionOrder."No.");  // Finish Production Order.
    END;

    LOCAL PROCEDURE ProdOrderCompAndRoutingReport@14(ProductionOrderStatus@1000 : Option;ProductionOrderNo@1001 : Code[20]);
    VAR
      ProductionOrder@1002 : Record 5405;
    BEGIN
      // Exercise: Generate the Production Order Component And Routing report.
      SelectProductionOrder(ProductionOrder,ProductionOrderStatus,ProductionOrderNo);
      REPORT.RUN(REPORT::"Prod. Order Comp. and Routing",TRUE,FALSE,ProductionOrder);

      // Verify: Check the value of Production Order No, Production Item, Components, Work Center, Machine Center in the report.
      SelectProductionOrder(ProductionOrder,ProductionOrderStatus,ProductionOrderNo);
      ProductionOrder.FINDFIRST;
      VerifyProductionOrder(ProductionOrder,'No_ProductionOrder','ItemNo_ProdOrderLine');
      VerifyProdOrderComponent(ProductionOrder."No.",ProductionOrder.Status,'ItemNo_PrdOrdrComp');
      VerifyRoutingLine(ProductionOrder."Routing No.",'No_ProdOrderRoutingLine');
    END;

    [Test]
    [HandlerFunctions(ProdOrderJobCardRequestPageHandler)]
    PROCEDURE PlannedProdOrderJobCard@33();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Planned);  // Create Planned Production Order.
      ProdOrderJobCardReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderJobCardRequestPageHandler)]
    PROCEDURE FirmPlanProdOrderJobCard@32();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::"Firm Planned");  // Create Firm Planned Production Order.
      ProdOrderJobCardReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderJobCardRequestPageHandler)]
    PROCEDURE ReleasedProdOrderJobCard@24();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);  // Create Released Production Order.
      ProdOrderJobCardReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ProdOrderJobCardRequestPageHandler)]
    PROCEDURE FinishedProdOrderJobCard@23();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);  // Create Production Order and Refresh.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      ProdOrderJobCardReport(ProductionOrder.Status::Finished,ProductionOrder."No.");  // Finish Production Order.
    END;

    LOCAL PROCEDURE ProdOrderJobCardReport@1(ProductionOrderStatus@1001 : Option;ProductionOrderNo@1000 : Code[20]);
    VAR
      ProductionOrder@1002 : Record 5405;
    BEGIN
      // Exercise: Generate the Production Order Job card report.
      SelectProductionOrder(ProductionOrder,ProductionOrderStatus,ProductionOrderNo);
      REPORT.RUN(REPORT::"Prod. Order - Job Card",TRUE,FALSE,ProductionOrder);

      // Verify: Check the value of Production Order, Production Item and Production Components.
      SelectProductionOrder(ProductionOrder,ProductionOrderStatus,ProductionOrderNo);
      ProductionOrder.FINDFIRST;
      VerifyProductionOrder(ProductionOrder,'No_ProdOrder','SourceNo_ProdOrder');
      VerifyProdOrderComponent(ProductionOrder."No.",ProductionOrder.Status,'ItemNo_ProdOrderComp');
      VerifyRoutingLine(ProductionOrder."Routing No.",'No_ProdOrderRtngLine');
    END;

    [Test]
    [HandlerFunctions(ProdOrderPrecalcTimeRequestPageHandler)]
    PROCEDURE PlannedProdOrderPrecalcTime@48();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Planned);  // Create Planned Production Order.
      ProdOrderPrecalcTimeReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderPrecalcTimeRequestPageHandler)]
    PROCEDURE FirmPlanProdOrderPreCalcTime@47();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::"Firm Planned");  // Create Firm Planned Production Order.
      ProdOrderPrecalcTimeReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderPrecalcTimeRequestPageHandler)]
    PROCEDURE ReleasedProdOrderPrecalcTime@44();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);  // Create Released Production Order.
      ProdOrderPrecalcTimeReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ProdOrderPrecalcTimeRequestPageHandler)]
    PROCEDURE FinishedProdOrderPrecalcTime@39();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);  // Create Production Order and Refresh.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      ProdOrderPrecalcTimeReport(ProductionOrder.Status::Finished,ProductionOrder."No.");  // Finish Production Order.
    END;

    LOCAL PROCEDURE ProdOrderPrecalcTimeReport@7(ProductionOrderStatus@1001 : Option;ProductionOrderNo@1000 : Code[20]);
    VAR
      ProductionOrder@1002 : Record 5405;
    BEGIN
      // Exercise: Generate the Production Order PreCalc. Time report.
      SelectProductionOrder(ProductionOrder,ProductionOrderStatus,ProductionOrderNo);
      REPORT.RUN(REPORT::"Prod. Order - Precalc. Time",TRUE,FALSE,ProductionOrder);

      // Verify: Check the value of Production Order No, Production Item, Work Center, Machine Center in the report.
      SelectProductionOrder(ProductionOrder,ProductionOrderStatus,ProductionOrderNo);
      ProductionOrder.FINDFIRST;
      VerifyProductionOrder(ProductionOrder,'Production_Order__No__','Production_Order__Source_No__');
      VerifyProdOrderComponent(ProductionOrder."No.",ProductionOrder.Status,'Prod__Order_Component__Item_No__');
      VerifyRoutingLine(ProductionOrder."Routing No.",'Prod__Order_Routing_Line__No__');
    END;

    [Test]
    [HandlerFunctions(ProdOrderMatRequisitionRequestPageHandler)]
    PROCEDURE PlannedProdOrderMatRequisition@61();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Planned);  // Create Planned Production Order.
      ProdOrderMatRequisitionReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderMatRequisitionRequestPageHandler)]
    PROCEDURE FirmPlanProdOrdMatRequisition@60();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::"Firm Planned");  // Create Firm Planned Production Order.
      ProdOrderMatRequisitionReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderMatRequisitionRequestPageHandler)]
    PROCEDURE ReleasedProdOrdMatRequisition@59();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);  // Create Released Production Order.
      ProdOrderMatRequisitionReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ProdOrderMatRequisitionRequestPageHandler)]
    PROCEDURE FinishedProdOrdMatRequisition@58();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);  // Create Production Order and Refresh.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      ProdOrderMatRequisitionReport(ProductionOrder.Status::Finished,ProductionOrder."No.");  // Finish Production Order.
    END;

    LOCAL PROCEDURE ProdOrderMatRequisitionReport@10(ProductionOrderStatus@1001 : Option;ProductionOrderNo@1000 : Code[20]);
    VAR
      ProductionOrder@1002 : Record 5405;
    BEGIN
      // Exercise: Generate the Production Order Material requisition report.
      SelectProductionOrder(ProductionOrder,ProductionOrderStatus,ProductionOrderNo);
      REPORT.RUN(REPORT::"Prod. Order - Mat. Requisition",TRUE,FALSE,ProductionOrder);

      // Verify: Check the value of Production Order No, Production Item, Components in the report.
      SelectProductionOrder(ProductionOrder,ProductionOrderStatus,ProductionOrderNo);
      ProductionOrder.FINDFIRST;
      VerifyProductionOrder(ProductionOrder,'No_ProdOrder','SourceNo_ProdOrder');
      VerifyProdOrderComponent(ProductionOrder."No.",ProductionOrder.Status,'ItemNo_ProdOrderComp');
    END;

    [Test]
    [HandlerFunctions(ProdOrderPickingListRequestPageHandler)]
    PROCEDURE PlannedProdOrderPickingList@83();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Planned);  // Create Planned Production Order.
      ProdOrderPickingListReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderPickingListRequestPageHandler)]
    PROCEDURE FirmPlanProdOrderPickingList@82();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::"Firm Planned");  // Create Firm Planned Production Order.
      ProdOrderPickingListReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderPickingListRequestPageHandler)]
    PROCEDURE ReleasedProdOrderPickingList@81();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);  // Create Released Production Order.
      ProdOrderPickingListReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    LOCAL PROCEDURE ProdOrderPickingListReport@15(ProductionOrderStatus@1005 : Option;ProductionOrderNo@1004 : Code[20]);
    VAR
      Item@1001 : Record 27;
      ProdOrderComponent@1000 : Record 5407;
      ProductionOrder@1002 : Record 5405;
    BEGIN
      // Exercise: Generate the Production Order Picking List report.
      SelectProdOrderComponent(ProdOrderComponent,ProductionOrderNo,ProductionOrderStatus);
      Item.SETRANGE("No.",ProdOrderComponent."Item No.");
      REPORT.RUN(REPORT::"Prod. Order - Picking List",TRUE,FALSE,Item);

      // Verify: Check the value of Production Order No, Production Item and Component in the report.
      SelectProductionOrder(ProductionOrder,ProductionOrderStatus,ProductionOrderNo);
      ProductionOrder.FINDFIRST;
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Item',ProdOrderComponent."Item No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('RmngQty_ProdOrderComp',ProdOrderComponent."Remaining Quantity");
      LibraryReportDataset.AssertCurrentRowValue('ProdOrdNo_ProdOrderComp',ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderDetailedCalcRequestPageHandler)]
    PROCEDURE PlannedProdOrderDetailedCalc@99();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Planned);  // Create Planned Production Order.
      ProdOrderDetailedCalcReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderDetailedCalcRequestPageHandler)]
    PROCEDURE FirmPlanProdOrderDetailedCalc@98();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::"Firm Planned");  // Create Firm Planned Production Order.
      ProdOrderDetailedCalcReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderDetailedCalcRequestPageHandler)]
    PROCEDURE ReleasedProdOrderDetailedCalc@97();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);  // Create Released Production Order.
      ProdOrderDetailedCalcReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ProdOrderDetailedCalcRequestPageHandler)]
    PROCEDURE FinishedProdOrderDetailedCalc@96();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);  // Create Production Order and Refresh.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      ProdOrderDetailedCalcReport(ProductionOrder.Status::Finished,ProductionOrder."No.");  // Finish Production Order.
    END;

    LOCAL PROCEDURE ProdOrderDetailedCalcReport@2(ProductionOrderStatus@1001 : Option;ProductionOrderNo@1000 : Code[20]);
    VAR
      ProductionOrder@1002 : Record 5405;
    BEGIN
      // Exercise: Generate the Production Order Detailed Calc. report.
      SelectProductionOrder(ProductionOrder,ProductionOrderStatus,ProductionOrderNo);
      REPORT.RUN(REPORT::"Prod. Order - Detailed Calc.",TRUE,FALSE,ProductionOrder);

      // Verify: Check the value of Production Order No, Production Item, Component, and Routing in the report.
      SelectProductionOrder(ProductionOrder,ProductionOrderStatus,ProductionOrderNo);
      ProductionOrder.FINDFIRST;
      VerifyProductionOrder(ProductionOrder,'No_ProdOrder','SourceNo_ProdOrder');
      VerifyProdOrderComponent(ProductionOrder."No.",ProductionOrder.Status,'ItemNo_ProdOrderComp');
      VerifyRoutingLine(ProductionOrder."Routing No.",'No_ProdOrderRtngLine');
    END;

    [Test]
    [HandlerFunctions(ProdOrderShortageListRequestPageHandler)]
    PROCEDURE PlannedProdOrderShortageList@107();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Planned);  // Create Planned Production Order.
      ProdOrderShortageListReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderShortageListRequestPageHandler)]
    PROCEDURE FirmPlanProdOrderShortageList@106();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::"Firm Planned");  // Create Firm Planned Production Order.
      ProdOrderShortageListReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderShortageListRequestPageHandler)]
    PROCEDURE ReleasedProdOrderShortageList@105();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);  // Create Released Production Order.
      ProdOrderShortageListReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ProdOrderShortageListRequestPageHandler)]
    PROCEDURE FinishedProdOrderShortageList@104();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);  // Create Production Order and Refresh.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      ProdOrderShortageListReport(ProductionOrder.Status::Finished,ProductionOrder."No.");  // Finish Production Order.
    END;

    LOCAL PROCEDURE ProdOrderShortageListReport@16(ProductionOrderStatus@1001 : Option;ProductionOrderNo@1000 : Code[20]);
    VAR
      ProductionOrder@1002 : Record 5405;
    BEGIN
      // Exercise: Generate the Production Order Shortage List report.
      SelectProductionOrder(ProductionOrder,ProductionOrderStatus,ProductionOrderNo);
      REPORT.RUN(REPORT::"Prod. Order - Shortage List",TRUE,FALSE,ProductionOrder);

      // Verify: Check the value of Production Order No, Production Item and Component in the report.
      SelectProductionOrder(ProductionOrder,ProductionOrderStatus,ProductionOrderNo);
      ProductionOrder.FINDFIRST;
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('No_ProdOrder',ProductionOrder."No.");
      VerifyProdOrderComponent(ProductionOrder."No.",ProductionOrder.Status,'ItemNo_ProdOrderComp');
    END;

    [Test]
    [HandlerFunctions(ProdOrderStatisticsRequestPageHandler)]
    PROCEDURE PlannedProdOrderStatistics@118();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Planned);  // Create Planned Production Order.
      ProdOrderStatisticsReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderStatisticsRequestPageHandler)]
    PROCEDURE FirmPlanProdOrderStatistics@117();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::"Firm Planned");  // Create Firm Planned Production Order.
      ProdOrderStatisticsReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ProdOrderStatisticsRequestPageHandler)]
    PROCEDURE ReleasedProdOrderStatistics@116();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);  // Create Released Production Order.
      ProdOrderStatisticsReport(ProductionOrder.Status,ProductionOrder."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ProdOrderStatisticsRequestPageHandler)]
    PROCEDURE FinishedProdOrderStatistics@115();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);  // Create Production Order and Refresh.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");
      ProdOrderStatisticsReport(ProductionOrder.Status::Finished,ProductionOrder."No.");  // Finish Production Order.
    END;

    LOCAL PROCEDURE ProdOrderStatisticsReport@18(ProductionOrderStatus@1001 : Option;ProductionOrderNo@1000 : Code[20]);
    VAR
      ProductionOrder@1002 : Record 5405;
      ProdOrderLine@1010 : Record 5406;
      CostCalculationManagement@1003 : Codeunit 5836;
      ShareOfTotalCapCost@1009 : Decimal;
      ExpMatCost@1008 : Decimal;
      ExpCapDirCost@1007 : Decimal;
      ExpSubDirCost@1006 : Decimal;
      ExpCapOvhdCost@1005 : Decimal;
      ExpMfgOvhdCost@1004 : Decimal;
    BEGIN
      // Exercise: Generate the Production Order Statistics report.
      SelectProductionOrder(ProductionOrder,ProductionOrderStatus,ProductionOrderNo);
      REPORT.RUN(REPORT::"Production Order Statistics",TRUE,FALSE,ProductionOrder);

      // Verify: Check the value of Production Order No, Production Item in the report.
      ProductionOrder.FINDFIRST;
      SelectProdOrderLine(ProdOrderLine,ProductionOrder."No.",ProductionOrder.Status);
      CostCalculationManagement.CalcShareOfTotalCapCost(ProdOrderLine,ShareOfTotalCapCost);
      CostCalculationManagement.CalcProdOrderLineExpCost(ProdOrderLine,ShareOfTotalCapCost,ExpMatCost,
        ExpCapDirCost,ExpSubDirCost,ExpCapOvhdCost,ExpMfgOvhdCost);

      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_ProdOrder',ProductionOrder."No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('ExpCost1',ExpMatCost);
      LibraryReportDataset.AssertCurrentRowValue('ExpCost6',ExpMatCost + ExpCapDirCost + ExpSubDirCost +
        ExpCapOvhdCost + ExpMfgOvhdCost);
    END;

    [Test]
    [HandlerFunctions(ProductionForecastRequestPageHandler)]
    PROCEDURE ProdOrderForecastReport@77();
    VAR
      Item@1002 : Record 27;
      ProductionForecastName@1000 : Record 99000851;
      ProductionForecastEntry@1001 : Record 99000852;
    BEGIN
      // Setup: Create Production Forecast Setup.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryManufacturing.CreateProductionForecastName(ProductionForecastName);
      LibraryManufacturing.CreateProductionForecastEntry(
        ProductionForecastEntry,ProductionForecastName.Name,Item."No.",'',WORKDATE,FALSE);
      UpdateProductionForecastQty(ProductionForecastEntry);

      // Exercise: Generate the Production Forecast report.
      COMMIT;
      ProductionForecastEntry.SETRANGE("Item No.",Item."No.");
      REPORT.RUN(REPORT::"Production Forecast",TRUE,FALSE,ProductionForecastEntry);

      // Verify: Check that Item No exists in the Production Forecast report and verify Forecast Quantity.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ItemNo_ForecastEntry',ProductionForecastEntry."Item No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('ForecastQty_ForecastEntry',ProductionForecastEntry."Forecast Quantity");
    END;

    [Test]
    PROCEDURE ItemProdOrderRefresh@65();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
    BEGIN
      // Setup: Create Parent and Child Items.
      Initialize;
      CreateProdOrderItemsSetup(Item);
      ProdOrderRefreshReport(ProductionOrder."Source Type"::Item,Item."No.");
    END;

    [Test]
    PROCEDURE FamilyProdOrderRefresh@66();
    VAR
      Item@1000 : Record 27;
      Item2@1001 : Record 27;
      RoutingHeader@1002 : Record 99000763;
      Family@1003 : Record 99000773;
      ProductionOrder@1004 : Record 5405;
    BEGIN
      // Setup: Create Parent Items, Routing and Family.
      Initialize;
      CreateProdOrderItemsSetup(Item);
      ClearRouting(Item);
      CreateProdOrderItemsSetup(Item2);
      ClearRouting(Item2);
      CreateRoutingSetup(RoutingHeader);
      CreateFamily(Family,RoutingHeader."No.",Item."No.",Item2."No.");
      ProdOrderRefreshReport(ProductionOrder."Source Type"::Family,Family."No.");
    END;

    [Test]
    PROCEDURE SalesProdOrderRefresh@67();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      ProductionOrder@1003 : Record 5405;
    BEGIN
      // Setup: Create Parent and Child Items, Sales Order.
      Initialize;
      CreateProdOrderItemsSetup(Item);
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",LibraryRandom.RandDec(10,2));
      ProdOrderRefreshReport(ProductionOrder."Source Type"::"Sales Header",SalesHeader."No.");
    END;

    LOCAL PROCEDURE ProdOrderRefreshReport@6(SourceType@1003 : Option;SourceNo@1004 : Code[20]);
    VAR
      ProdOrderComponent@1000 : Record 5407;
      ProductionOrder@1002 : Record 5405;
      ProdOrderLine@1006 : Record 5406;
    BEGIN
      // Create Production Order.
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrder.Status::Released,SourceType,SourceNo,LibraryRandom.RandInt(5));

      // Exercise: Refresh Released Production Order.
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);

      // Verify: Check that corresponding Production Order Line and Production Order Components list has been populated.
      SelectProdOrderLine(ProdOrderLine,ProductionOrder."No.",ProductionOrder.Status::Released);
      Assert.IsTrue(ProdOrderLine.COUNT > 0,RecordErr);
      SelectProdOrderComponent(ProdOrderComponent,ProductionOrder."No.",ProductionOrder.Status::Released);
      Assert.IsTrue(ProdOrderComponent.COUNT > 0,RecordErr);
    END;

    [Test]
    PROCEDURE CalcConsumptionReport@5();
    VAR
      ProductionOrder@1002 : Record 5405;
      ItemJournalBatch2@1004 : Record 233;
      ItemJournalLine@1005 : Record 83;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);

      // Exercise: Run Calculate Consumption report.
      ConsumptionJournalSetup(ItemJournalBatch2);
      ClearJournal(ItemJournalBatch2);
      LibraryManufacturing.CalculateConsumption(
        ProductionOrder."No.",ItemJournalBatch2."Journal Template Name",ItemJournalBatch2.Name);

      // Verify: Check Consumption Journal Lines have been populated after execution of Calc. Consumption report.
      SelectConsumptionLines(ItemJournalLine,ItemJournalBatch2);
      Assert.IsTrue(ItemJournalLine.COUNT > 0,RecordErr);
      ItemJournalLine.SETRANGE("Order Type",ItemJournalLine."Order Type"::Production);
      ItemJournalLine.SETRANGE("Order No.",ProductionOrder."No.");
      Assert.IsTrue(ItemJournalLine.COUNT > 0,ProductionOrderErr);
      VerifyConsumptionJrnlItems(ItemJournalLine,ProductionOrder."No.",ProductionOrder.Status);
    END;

    [Test]
    [HandlerFunctions(CapacityTaskListRequestPageHandler)]
    PROCEDURE WorkCenterCapacityTaskList@50();
    VAR
      ProdOrderRoutingLine@1000 : Record 5409;
      ProductionOrder@1001 : Record 5405;
    BEGIN
      // Setup.
      Initialize;
      ProdCapacityTaskListReport(ProductionOrder,ProdOrderRoutingLine.Type::"Work Center");

      // Verify: Check Production Order No, Routing No and Work Center No exist in the report.
      VerifyCapacityTaskList(ProductionOrder,ProdOrderRoutingLine.Type::"Work Center");
    END;

    [Test]
    [HandlerFunctions(CapacityTaskListRequestPageHandler)]
    PROCEDURE MachineCenterCapacityTaskList@54();
    VAR
      ProdOrderRoutingLine@1000 : Record 5409;
      ProductionOrder@1001 : Record 5405;
    BEGIN
      // Setup.
      Initialize;
      ProdCapacityTaskListReport(ProductionOrder,ProdOrderRoutingLine.Type::"Machine Center");

      // Verify: Check Production Order No, Routing No exist in the report.
      VerifyCapacityTaskList(ProductionOrder,ProdOrderRoutingLine.Type::"Machine Center");
    END;

    [Test]
    [HandlerFunctions(AssemblyBOMsRequestPageHandler)]
    PROCEDURE BOMsReport@28();
    VAR
      Item@1000 : Record 27;
      BOMComponent@1001 : Record 90;
    BEGIN
      // Setup: Create BOM Component Setup.
      Initialize;
      CreateBOMComponentSetup(BOMComponent);

      // Exercise: Generate the BOMs report.
      Item.SETRANGE("No.",BOMComponent."Parent Item No.");
      REPORT.RUN(REPORT::"Assembly BOMs",TRUE,FALSE,Item);

      // Verify: Check parent Item and child Item in the report.
      VerifyBOMItems(BOMComponent,'No_BOMComp','No_Item');
    END;

    [Test]
    [HandlerFunctions(WhereUsedListRequestPageHandler)]
    PROCEDURE WhereUsedListReport@29();
    VAR
      Item@1003 : Record 27;
      BOMComponent@1001 : Record 90;
    BEGIN
      // Setup: Create BOM Component Setup.
      Initialize;
      CreateBOMComponentSetup(BOMComponent);

      // Exercise: Generate the Where-Used List report.
      Item.SETRANGE("No.",BOMComponent."No.");
      REPORT.RUN(REPORT::"Where-Used List",TRUE,FALSE,Item);

      // Verify: Check parent Item and child Item in the report.
      VerifyBOMItems(BOMComponent,'No_Item','ParentItemNo_BOMComponent');
    END;

    [Test]
    [HandlerFunctions(AssemblyBOMRawMaterialsRequestPageHandler)]
    PROCEDURE BOMRawMaterialsReport@31();
    VAR
      Item@1002 : Record 27;
      BOMComponent@1001 : Record 90;
    BEGIN
      // Setup: Create BOM Component Setup.
      Initialize;
      CreateBOMComponentSetup(BOMComponent);

      // Exercise: Generate the BOM Raw Materials report.
      Item.SETRANGE("No.",BOMComponent."No.");
      REPORT.RUN(REPORT::"Assembly BOM - Raw Materials",TRUE,FALSE,Item);

      // Verify: Check child Item on BOM exists in the report.
      Item.FINDFIRST;
      Item.CALCFIELDS(Inventory);
      VerifyBOMItem(Item."No.",'No_Item');
      LibraryReportDataset.AssertCurrentRowValue('Inventory_Item',Item.Inventory);
    END;

    [Test]
    [HandlerFunctions(AssemblyBOMEndItemsRequestPageHandler)]
    PROCEDURE BOMFinishedGoodsReport@94();
    VAR
      Item@1002 : Record 27;
      BOMComponent@1001 : Record 90;
    BEGIN
      // Setup: Create BOM Component Setup.
      Initialize;
      CreateBOMComponentSetup(BOMComponent);

      // Exercise: Generate the BOM Finished Goods report.
      Item.SETRANGE("No.",BOMComponent."Parent Item No.");
      REPORT.RUN(REPORT::"Assembly BOM - End Items",TRUE,FALSE,Item);

      // Verify: Check parent Item on BOM exists in the report.
      Item.FINDFIRST;
      Item.CALCFIELDS(Inventory);
      VerifyBOMItem(BOMComponent."Parent Item No.",'No_Item');
      LibraryReportDataset.AssertCurrentRowValue('Inventory_Item',Item.Inventory);
    END;

    [Test]
    [HandlerFunctions(AssemblyBOMSubassembliesRequestPageHandler)]
    PROCEDURE BOMSubAssembliesReport@38();
    VAR
      Item@1001 : Record 27;
      BOMComponent@1000 : Record 90;
      BOMComponent2@1003 : Record 90;
    BEGIN
      // Setup: Create BOM Component Setup.
      Initialize;
      CreateBOMComponentSetup(BOMComponent);
      LibraryInventory.CreateItem(Item);
      LibraryManufacturing.CreateBOMComponent(BOMComponent2,BOMComponent."No.",BOMComponent2.Type::Item,Item."No.",1,'');

      // Exercise: Generate the BOM - Sub Assemblies report.
      COMMIT;
      Item.SETRANGE("No.",BOMComponent2."Parent Item No.");
      REPORT.RUN(REPORT::"Assembly BOM - Subassemblies",TRUE,FALSE,Item);

      // Verify: Check parent Item on BOM exists in the report.
      Item.FINDFIRST;
      Item.CALCFIELDS(Inventory);
      VerifyBOMItem(BOMComponent2."Parent Item No.",'No_Item');
      LibraryReportDataset.AssertCurrentRowValue('Inventory_Item',Item.Inventory);
    END;

    [Test]
    [HandlerFunctions(QuantityExplosionOfBOMRequestPageHandler)]
    PROCEDURE QuantityExplosionOfBOMReport@36();
    VAR
      Item@1000 : Record 27;
      ProductionBOMLine@1001 : Record 99000772;
    BEGIN
      // Setup: Create Production Order Items Setup.
      Initialize;
      CreateProdOrderItemsSetup(Item);

      // Exercise: Generate the Quantity Explosion Of BOM report.
      COMMIT;
      Item.SETRANGE("No.",Item."No.");
      REPORT.RUN(REPORT::"Quantity Explosion of BOM",TRUE,FALSE,Item);

      // Verify: Check Production BOM component details.
      SelectProdBOMComponents(ProductionBOMLine,Item."Production BOM No.");
      VerifyProdBOMComponents(ProductionBOMLine,ProductionBOMLine."Quantity per");
    END;

    [Test]
    [HandlerFunctions(RoutingSheetRequestPageHandler)]
    PROCEDURE RoutingSheetReport@34();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup: Create Production Order Items Setup.
      Initialize;
      CreateProdOrderItemsSetup(Item);

      // Exercise: Generate the Routing Sheet report.
      COMMIT;
      Item.SETRANGE("No.",Item."No.");
      REPORT.RUN(REPORT::"Routing Sheet",TRUE,FALSE,Item);

      // Verify: Check Routing details.
      LibraryReportDataset.LoadDataSetFile;
      VerifyRoutingLine(Item."Routing No.",'No_RtngLine');
    END;

    [Test]
    [HandlerFunctions(MachineCenterLoadRequestPageHandler)]
    PROCEDURE MachineCenterLoadReport@22();
    VAR
      ProductionOrder@1000 : Record 5405;
      RoutingLine@1002 : Record 99000764;
      WorkCenter@1003 : Record 99000754;
      MachineCenterLoad@1001 : Report 99000784;
      PeriodLength@1004 : DateFormula;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);

      // Exercise: Generate the Machine Center Load report.
      COMMIT;
      RoutingLine.SETRANGE("Routing No.",ProductionOrder."Routing No.");
      RoutingLine.FINDFIRST;
      WorkCenter.SETRANGE("No.",RoutingLine."Work Center No.");
      EVALUATE(PeriodLength,STRSUBSTNO('<%1D>',LibraryRandom.RandInt(5)));  // Random values not important
      MachineCenterLoad.InitializeRequest(WORKDATE,LibraryRandom.RandInt(5),PeriodLength,0);  // Min. Cap. Efficiency important.
      LibraryVariableStorage.Enqueue(WORKDATE);
      LibraryVariableStorage.Enqueue(LibraryRandom.RandInt(5));
      LibraryVariableStorage.Enqueue(PeriodLength);
      LibraryVariableStorage.Enqueue(0);
      REPORT.RUN(REPORT::"Machine Center Load",TRUE,FALSE,WorkCenter);

      // Verify: Check Routinf details.
      LibraryReportDataset.LoadDataSetFile;
      VerifyLoadReport(ProductionOrder."Routing No.",'No_MachineCenter',RoutingLine.Type::"Machine Center");
    END;

    [Test]
    [HandlerFunctions(WorkCenterLoadRequestPageHandler)]
    PROCEDURE WorkCenterLoadReport@21();
    VAR
      ProductionOrder@1000 : Record 5405;
      RoutingLine@1002 : Record 99000764;
      WorkCenter@1003 : Record 99000754;
      WorkCenterGroup@1004 : Record 99000756;
      PeriodLength@1005 : DateFormula;
    BEGIN
      // Setup: Create Production Order Setup.
      Initialize;
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);

      // Exercise: Generate the Work Center Load report.
      COMMIT;
      RoutingLine.SETRANGE("Routing No.",ProductionOrder."Routing No.");
      RoutingLine.FINDFIRST;
      WorkCenter.SETRANGE("No.",RoutingLine."Work Center No.");
      WorkCenter.FINDFIRST;
      WorkCenterGroup.SETRANGE(Code,WorkCenter."Work Center Group Code");
      EVALUATE(PeriodLength,STRSUBSTNO('<%1D>',LibraryRandom.RandInt(5)));
      LibraryVariableStorage.Enqueue(WORKDATE);
      LibraryVariableStorage.Enqueue(LibraryRandom.RandInt(5));
      LibraryVariableStorage.Enqueue(PeriodLength);
      LibraryVariableStorage.Enqueue(0);
      REPORT.RUN(REPORT::"Work Center Load",TRUE,FALSE,WorkCenterGroup);

      // Verify: Check Work Center Group details.
      LibraryReportDataset.LoadDataSetFile;
      VerifyLoadReport(ProductionOrder."Routing No.",'No_WorkCntr',RoutingLine.Type::"Work Center");
    END;

    [Test]
    [HandlerFunctions(QuantityExplosionOfBOMRequestPageHandler)]
    PROCEDURE ComponentsOnQuantityExplosionOfBomReport@64();
    VAR
      Item@1002 : Record 27;
      ChildItem@1003 : Record 27;
      ParentItem@1004 : Record 27;
      SecondChildItem@1000 : Record 27;
      ProductionBOMHeader@1005 : Record 99000771;
      ProdBomNoWithLineTypeProductionBom@1015 : Code[20];
    BEGIN
      // Run the Quantity Explosion of BOM Report. Verify Components.

      // Setup: Create Certified Production Bom for another Production Bom and Assign Second Production Bom to ParentItem.
      Initialize;
      LibraryManufacturing.CreateCertifiedProductionBOM(ProductionBOMHeader,LibraryInventory.CreateItem(ChildItem),
        LibraryRandom.RandInt(10));
      ProdBomNoWithLineTypeProductionBom := CreateCertifiedProductionBomWithType(ProductionBOMHeader."No.",'',
          ChildItem."Base Unit of Measure");
      CreateItem(
        ParentItem,ParentItem."Costing Method"::FIFO,'',
        CreateCertifiedProductionBomWithType(ProdBomNoWithLineTypeProductionBom,LibraryInventory.CreateItem(SecondChildItem),
          SecondChildItem."Base Unit of Measure"),ParentItem."Manufacturing Policy"::"Make-to-Stock");

      // Exercise: Run and Save Quantity Explosion Of Bom Report.
      COMMIT;
      Item.SETRANGE("No.",ParentItem."No.");
      REPORT.RUN(REPORT::"Quantity Explosion of BOM",TRUE,FALSE,Item);

      // Verify: Verify Child Item No. and Production Bom No. on Generated report.
      VerifyComponentsOnGeneratedReport(ParentItem."No.",SecondChildItem."No.");
    END;

    [Test]
    [HandlerFunctions(QuantityExplosionOfBOMRequestPageHandler)]
    PROCEDURE QuantityExplosionOfBOMReportWithUnCertifiedBOMVersion@72();
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionBOMLine@1004 : Record 99000772;
      ProductionBOMNo@1005 : Code[20];
    BEGIN
      // Setup: Create Production Order Items Setup. Create two BOM Versions without Certification and update Quantity Per.
      // Exercise: Run Quantity Explosion Of BOM report.
      ProductionBOMNo :=
        InitSetupForQuantityExplosionOfBOMReport(ProductionBOMHeader.Status::New,LibraryRandom.RandInt(10));

      // Verify: Verify Production BOM component details of Quantity Explosion Of BOM report.
      // Quantity Per should be ProductionBOMLine."Quantity per" when no BOM version certified.
      SelectProdBOMComponents(ProductionBOMLine,ProductionBOMNo);
      VerifyProdBOMComponents(ProductionBOMLine,ProductionBOMLine."Quantity per");
    END;

    [Test]
    [HandlerFunctions(QuantityExplosionOfBOMRequestPageHandler)]
    PROCEDURE QuantityExplosionOfBOMReportWithCertifiedBOMVersion@78();
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionBOMLine@1004 : Record 99000772;
      ProductionBOMNo@1005 : Code[20];
      QtyPer@1003 : Decimal;
    BEGIN
      // Setup: Create Production Order Items Setup. Create two BOM Versions and Certified one of them. Update Quantity Per.
      // Exercise: Run Quantity Explosion Of BOM report.
      QtyPer := LibraryRandom.RandInt(10);
      ProductionBOMNo := InitSetupForQuantityExplosionOfBOMReport(ProductionBOMHeader.Status::Certified,QtyPer);

      // Verify: Verify Production BOM component details of Quantity Explosion Of BOM report.
      // Quantity Per should be certified BOM Version's Quantity Per.
      SelectProdBOMComponents(ProductionBOMLine,ProductionBOMNo);
      VerifyProdBOMComponents(ProductionBOMLine,QtyPer);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ProdOrderShortageListRequestPageHandler)]
    PROCEDURE ReleasedProdOrderShortageListWithMaketoOrderChilditem@49();
    VAR
      ProductionOrder@1000 : Record 5405;
      Item@1001 : Record 27;
      ChildItem@1002 : Record 27;
    BEGIN
      // Verify Make-to-Order child item is not shown on Shortage List report
      Initialize;

      CreateProdOrderItemsSetup(Item);
      FindChildItem(ChildItem,Item."Production BOM No.");
      SetItemMakeToOrder(ChildItem);
      CreateSalesOrder(ChildItem);
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.");

      ASSERTERROR ProdOrderShortageListReport(ProductionOrder.Status,ProductionOrder."No.");
      Assert.ExpectedError(STRSUBSTNO(ElementNotFoundErr,ChildItem."No."));
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      ItemJournalSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE InitSetupForQuantityExplosionOfBOMReport@76(Status@1006 : Option;QtyPer@1005 : Decimal) : Code[20];
    VAR
      Item@1000 : Record 27;
      ProductionBOMVersion@1001 : Record 99000779;
      ProductionBOMHeader@1003 : Record 99000771;
    BEGIN
      // Create Production Order Items Setup. Create two BOM Versions and update Quantity Per.
      Initialize;
      CreateProdOrderItemsSetup(Item);
      CreateProdBOMVersion(ProductionBOMVersion,Item,Status,QtyPer);
      CreateProdBOMVersion(ProductionBOMVersion,Item,ProductionBOMHeader.Status::New,LibraryRandom.RandInt(5));

      // Run Quantity Explosion Of BOM report.
      COMMIT;
      REPORT.RUN(REPORT::"Quantity Explosion of BOM",TRUE,FALSE,Item);

      EXIT(Item."Production BOM No.");
    END;

    LOCAL PROCEDURE ItemJournalSetup@75();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ClearJournal@134(ItemJournalBatch@1001 : Record 233);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CLEAR(ItemJournalLine);
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.DELETEALL;
    END;

    LOCAL PROCEDURE ConsumptionJournalSetup@226(VAR ItemJournalBatch2@1000 : Record 233);
    VAR
      ItemJournalTemplate2@1001 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate2,ItemJournalTemplate2.Type::Consumption);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch2,ItemJournalTemplate2.Type,ItemJournalTemplate2.Name);
    END;

    LOCAL PROCEDURE CreateProductionOrderSetup@43(VAR ProductionOrder@1011 : Record 5405;ProductionOrderStatus@1000 : Option);
    VAR
      Item@1010 : Record 27;
    BEGIN
      // Create Parent and Child Items.
      CreateProdOrderItemsSetup(Item);

      // Create and Refresh Production Order.
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrderStatus,Item."No.");
    END;

    LOCAL PROCEDURE CreateProdOrderItemsSetup@3(VAR Item@1000 : Record 27);
    VAR
      RoutingHeader@1005 : Record 99000763;
      ProductionBOMHeader@1004 : Record 99000771;
      ChildItemNo@1002 : Code[20];
      ChildItemNo2@1001 : Code[20];
    BEGIN
      // Create Child Items.
      ClearJournal(ItemJournalBatch);
      ChildItemNo := CreateChildItemWithInventory;
      ChildItemNo2 := CreateChildItemWithInventory;

      // Create Production BOM.
      LibraryManufacturing.CreateCertifProdBOMWithTwoComp(ProductionBOMHeader,ChildItemNo,ChildItemNo2,100);  // Quantity per Value important.

      // Create Parent Item and attach Routing and Production BOM.
      CreateRoutingSetup(RoutingHeader);
      CreateItem(
        Item,Item."Costing Method"::FIFO,RoutingHeader."No.",ProductionBOMHeader."No.",Item."Manufacturing Policy"::"Make-to-Order");
    END;

    LOCAL PROCEDURE CreateProdBOMVersion@103(VAR ProductionBOMVersion@1000 : Record 99000779;Item@1001 : Record 27;Status@1002 : Option;QtyPer@1003 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionBOMVersion(
        ProductionBOMVersion,Item."Production BOM No.",LibraryUtility.GenerateGUID,Item."Base Unit of Measure");
      UpdateProdBOMVersionLine(Item."Production BOM No.",ProductionBOMVersion."Version Code",QtyPer);
      ProductionBOMVersion.VALIDATE(Status,Status);
      ProductionBOMVersion.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@45(VAR Item@1000 : Record 27;CostingMethod@1004 : Option;RoutingNo@1001 : Code[20];ProductionBOMNo@1003 : Code[20];ItemManufacturingPolicy@1005 : Option);
    BEGIN
      // Random value unimportant for test.
      LibraryManufacturing.CreateItemManufacturing(
        Item,CostingMethod,LibraryRandom.RandDec(50,2),Item."Reordering Policy",
        Item."Flushing Method",RoutingNo,ProductionBOMNo);
      Item.VALIDATE("Manufacturing Policy",ItemManufacturingPolicy);
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRoutingSetup@42(VAR RoutingHeader@1001 : Record 99000763);
    VAR
      WorkCenter@1000 : Record 99000754;
      MachineCenter@1004 : Record 99000758;
      RoutingLine@1006 : Record 99000764;
    BEGIN
      CreateWorkCenter(WorkCenter);
      CreateMachineCenter(MachineCenter,WorkCenter."No.");
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");
      RoutingLine.Type := RoutingLine.Type::"Machine Center";
      CreateRoutingLine(RoutingLine,RoutingHeader,MachineCenter."No.");
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWorkCenter@53(VAR WorkCenter@1004 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);
    END;

    LOCAL PROCEDURE CreateMachineCenter@51(VAR MachineCenter@1002 : Record 99000758;WorkCenterNo@1000 : Code[20]);
    BEGIN
      // Random value important for test.
      LibraryManufacturing.CreateMachineCenterWithCalendar(MachineCenter,WorkCenterNo,LibraryRandom.RandDec(105,1));
    END;

    LOCAL PROCEDURE CreateRoutingLine@41(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random used such that the Next Operation No is greater than the Previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));

      // Random values not important for test.
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,CenterNo,OperationNo,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE CreateCertifiedProductionBomWithType@55(ProductionBomHeaderNo@1001 : Code[20];ItemNo@1000 : Code[20];UnitOfMeasure@1004 : Code[10]) : Code[20];
    VAR
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionBOMLine@1003 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,UnitOfMeasure);
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',
        ProductionBOMLine.Type::"Production BOM",ProductionBomHeaderNo,LibraryRandom.RandInt(10));
      IF ItemNo <> '' THEN
        LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',
          ProductionBOMLine.Type::Item,ItemNo,LibraryRandom.RandInt(10));
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
      EXIT(ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE FindLastOperationNo@40(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
      EXIT('');
    END;

    LOCAL PROCEDURE CreateChildItemWithInventory@12() : Code[20];
    VAR
      Item@1001 : Record 27;
      ItemJournalLine@1002 : Record 83;
    BEGIN
      CreateItem(Item,Item."Costing Method"::FIFO,'','',Item."Manufacturing Policy"::"Make-to-Stock");

      // Create Item Journal to populate Item Quantity.
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandDec(100,2));
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateAndRefreshProdOrder@20(VAR ProductionOrder@1000 : Record 5405;ProductionOrderStatus@1001 : Option;ItemNo@1002 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrderStatus,ProductionOrder."Source Type"::Item,ItemNo,LibraryRandom.RandInt(5));
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@140(Item@1002 : Record 27);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      LibraryPatterns.MAKESalesOrder(
        SalesHeader,SalesLine,Item,'','',LibraryRandom.RandDec(1000,2),
        WORKDATE,LibraryRandom.RandDec(1000,2));
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<-1D>',WORKDATE));
      SalesLine.MODIFY;
    END;

    LOCAL PROCEDURE SelectProductionOrder@25(VAR ProductionOrder@1000 : Record 5405;Status@1001 : Option;No@1002 : Code[20]);
    BEGIN
      ProductionOrder.SETRANGE(Status,Status);
      ProductionOrder.SETRANGE("No.",No);
    END;

    LOCAL PROCEDURE SelectProdOrderComponent@30(VAR ProdOrderComponent@1000 : Record 5407;ProdOrderNo@1002 : Code[20];ProductionOrderStatus@1003 : Option);
    BEGIN
      ProdOrderComponent.SETRANGE(Status,ProductionOrderStatus);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.FINDSET;
    END;

    LOCAL PROCEDURE SelectRoutingLine@35(VAR RoutingLine@1000 : Record 99000764;RoutingNo@1001 : Code[20]);
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      RoutingLine.FINDSET;
    END;

    LOCAL PROCEDURE SelectProdOrderLine@52(VAR ProdOrderLine@1000 : Record 5406;ProdOrderNo@1001 : Code[20];Status@1003 : Option);
    BEGIN
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.FINDSET;
    END;

    LOCAL PROCEDURE UpdateProductionForecastQty@79(VAR ProductionForecastEntry@1000 : Record 99000852);
    BEGIN
      ProductionForecastEntry.VALIDATE("Forecast Quantity",LibraryRandom.RandDec(10,2));
      ProductionForecastEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SelectConsumptionLines@8(VAR ItemJournalLine@1000 : Record 83;ItemJournalBatch2@1001 : Record 233);
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch2."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch2.Name);
      ItemJournalLine.FINDSET;
    END;

    LOCAL PROCEDURE ProdCapacityTaskListReport@27(VAR ProductionOrder@1005 : Record 5405;ProdOrderRoutingLineType@1004 : Option);
    VAR
      ProdOrderRoutingLine@1001 : Record 5409;
    BEGIN
      // Create Production Order Setup.
      CreateProductionOrderSetup(ProductionOrder,ProductionOrder.Status::Released);  // Create Production Order.

      // Exercise: Generate the Capacity Task List report.
      ProdOrderRoutingLine.SETRANGE(Status,ProductionOrder.Status::Released);
      ProdOrderRoutingLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
      ProdOrderRoutingLine.SETRANGE(Type,ProdOrderRoutingLineType);
      REPORT.RUN(REPORT::"Capacity Task List",TRUE,FALSE,ProdOrderRoutingLine);
    END;

    LOCAL PROCEDURE CreateBOMComponentSetup@56(VAR BOMComponent@1000 : Record 90);
    VAR
      Item@1001 : Record 27;
      Item2@1002 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryInventory.CreateItem(Item2);
      LibraryManufacturing.CreateBOMComponent(BOMComponent,Item."No.",BOMComponent.Type::Item,Item2."No.",1,'');
      LibraryPatterns.POSTPositiveAdjustment(Item,'','','',LibraryRandom.RandDec(100,2),WORKDATE,
        LibraryRandom.RandDec(100,2));
      LibraryPatterns.POSTPositiveAdjustment(Item2,'','','',LibraryRandom.RandDec(100,2),WORKDATE,
        LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE ClearRouting@71(VAR Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE("Routing No.",'');
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateFamily@108(VAR Family@1005 : Record 99000773;RoutingNo@1003 : Code[20];ItemNo@1001 : Code[20];ItemNo2@1002 : Code[20]);
    VAR
      FamilyLine@1004 : Record 99000774;
    BEGIN
      // Random values not important for test.
      LibraryManufacturing.CreateFamily(Family);
      Family.VALIDATE("Routing No.",RoutingNo);
      Family.MODIFY(TRUE);
      LibraryManufacturing.CreateFamilyLine(FamilyLine,Family."No.",ItemNo,LibraryRandom.RandDec(5,2));
      LibraryManufacturing.CreateFamilyLine(FamilyLine,Family."No.",ItemNo2,LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE SelectProdBOMComponents@68(VAR ProductionBOMLine@1000 : Record 99000772;ProdBOMNo@1001 : Code[20]);
    BEGIN
      ProductionBOMLine.SETRANGE("Production BOM No.",ProdBOMNo);
      ProductionBOMLine.FINDSET;
    END;

    LOCAL PROCEDURE UpdateProdBOMVersionLine@190(ProductionBOMNo@1000 : Code[20];VersionCode@1001 : Code[20];QtyPer@1005 : Decimal);
    VAR
      ProdBOMHeader@1002 : Record 99000771;
      ProductionBOMLine@1004 : Record 99000772;
      ProductionBOMVersion@1008 : Record 99000779;
      ProductionBOMCopy@1003 : Codeunit 99000768;
    BEGIN
      ProdBOMHeader.GET(ProductionBOMNo);
      ProductionBOMCopy.CopyBOM(ProductionBOMNo,'',ProdBOMHeader,VersionCode);
      ProductionBOMVersion.GET(ProductionBOMNo,VersionCode);
      ProductionBOMVersion.VALIDATE("Unit of Measure Code",ProdBOMHeader."Unit of Measure Code");
      ProductionBOMVersion.MODIFY(TRUE);
      WITH ProductionBOMLine DO BEGIN
        SETRANGE("Version Code",VersionCode);
        FINDSET;
        REPEAT
          VALIDATE("Quantity per",QtyPer);
          MODIFY(TRUE);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE FindChildItem@109(VAR ChildItem@1002 : Record 27;ProductionBOMNo@1000 : Code[20]);
    VAR
      ProductionBOMLine@1001 : Record 99000772;
    BEGIN
      ProductionBOMLine.SETRANGE("Production BOM No.",ProductionBOMNo);
      ProductionBOMLine.FINDFIRST;
      ChildItem.GET(ProductionBOMLine."No.");
    END;

    LOCAL PROCEDURE SetItemMakeToOrder@84(VAR Item@1001 : Record 27);
    BEGIN
      Item.VALIDATE("Manufacturing Policy",Item."Manufacturing Policy"::"Make-to-Order");
      Item.MODIFY;
    END;

    LOCAL PROCEDURE VerifyComponentsOnGeneratedReport@70(ParentItemNo@1000 : Code[20];ChildItemNo@1001 : Code[20]);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('BomCompLevelNo',ChildItemNo);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('No_Item',ParentItemNo);
    END;

    LOCAL PROCEDURE VerifyProductionOrder@62(ProductionOrder@1000 : Record 5405;ProdOrderNoElementName@1001 : Text;ProdOrderSourceNoElementName@1003 : Text);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists(ProdOrderNoElementName,ProductionOrder."No.");
      LibraryReportDataset.AssertElementWithValueExists(ProdOrderSourceNoElementName,ProductionOrder."Source No.");
    END;

    LOCAL PROCEDURE VerifyProdOrderComponent@73(ProductionOrderNo@1000 : Code[20];ProductionOrderStatus@1002 : Option;ElementName@1003 : Text);
    VAR
      ProdOrderComponent@1001 : Record 5407;
    BEGIN
      SelectProdOrderComponent(ProdOrderComponent,ProductionOrderNo,ProductionOrderStatus);
      REPEAT
        LibraryReportDataset.Reset;
        LibraryReportDataset.SetRange(ElementName,ProdOrderComponent."Item No.");
        Assert.IsTrue(LibraryReportDataset.GetNextRow,'Element not found for ' + ProdOrderComponent."Item No.");
      UNTIL ProdOrderComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyRoutingLine@80(ProductionOrderRoutingNo@1000 : Code[20];ElementName@1002 : Text);
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      SelectRoutingLine(RoutingLine,ProductionOrderRoutingNo);
      REPEAT
        LibraryReportDataset.Reset;
        LibraryReportDataset.SetRange(ElementName,RoutingLine."No.");
        Assert.IsTrue(LibraryReportDataset.GetNextRow,'Element not found for ' + RoutingLine."No.");
      UNTIL RoutingLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyLoadReport@186(ProductionOrderRoutingNo@1000 : Code[20];ElementName@1002 : Text;RoutingLineType@1003 : Option);
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      SelectRoutingLine(RoutingLine,ProductionOrderRoutingNo);
      RoutingLine.SETRANGE(Type,RoutingLineType);
      RoutingLine.FINDSET;
      REPEAT
        LibraryReportDataset.Reset;
        LibraryReportDataset.SetRange(ElementName,RoutingLine."No.");
        Assert.IsTrue(LibraryReportDataset.GetNextRow,'Element not found for ' + RoutingLine."No.");
      UNTIL RoutingLine.NEXT = 0;

      RoutingLine.SETFILTER(Type,'<>%1',RoutingLineType);
      RoutingLine.FINDSET;
      REPEAT
        LibraryReportDataset.Reset;
        LibraryReportDataset.SetRange(ElementName,RoutingLine."No.");
        Assert.IsFalse(LibraryReportDataset.GetNextRow,'Element found for ' + RoutingLine."No.");
      UNTIL RoutingLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyConsumptionJrnlItems@11(ItemJournalLine@1000 : Record 83;ProductionOrderNo@1001 : Code[20];ProductionOrderStatus@1003 : Option);
    VAR
      ProdOrderComponent@1002 : Record 5407;
    BEGIN
      SelectProdOrderComponent(ProdOrderComponent,ProductionOrderNo,ProductionOrderStatus);
      REPEAT
        ItemJournalLine.SETRANGE("Item No.",ProdOrderComponent."Item No.");
        Assert.IsTrue(ItemJournalLine.COUNT > 0,RecordErr);
      UNTIL ProdOrderComponent.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyBOMItems@69(BOMComponent@1000 : Record 90;BOMComponentElementNo@1001 : Text;ParentItemElementNo@1002 : Text);
    BEGIN
      VerifyBOMItem(BOMComponent."Parent Item No.",ParentItemElementNo);
      LibraryReportDataset.AssertCurrentRowValue(BOMComponentElementNo,BOMComponent."No.");
    END;

    LOCAL PROCEDURE VerifyBOMItem@92(ItemNo@1000 : Code[20];ItemElementNo@1001 : Text);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange(ItemElementNo,ItemNo);
      Assert.IsTrue(LibraryReportDataset.GetNextRow,'Item not found in report.');
    END;

    LOCAL PROCEDURE VerifyProdBOMComponents@87(VAR ProductionBOMLine@1001 : Record 99000772;QtyPer@1000 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      REPEAT
        LibraryReportDataset.SetRange('BomCompLevelNo',ProductionBOMLine."No.");
        LibraryReportDataset.GetNextRow;
        LibraryReportDataset.AssertCurrentRowValue('BomCompLevelQty',QtyPer);
      UNTIL ProductionBOMLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE VerifyCapacityTaskList@112(ProductionOrder@1001 : Record 5405;RoutingLineType@1006 : Option);
    VAR
      RoutingLine@1000 : Record 99000764;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      RoutingLine.SETRANGE("Routing No.",ProductionOrder."Routing No.");
      RoutingLine.SETRANGE(Type,RoutingLineType);
      RoutingLine.FINDSET;
      REPEAT
        LibraryReportDataset.Reset;
        LibraryReportDataset.SetRange('OPNo_ProdOrderRtngLine',RoutingLine."Operation No.");
        LibraryReportDataset.GetNextRow;
        LibraryReportDataset.AssertCurrentRowValue('PONo_ProdOrderRtngLine',ProductionOrder."No.");
        LibraryReportDataset.AssertCurrentRowValue('RtngNo_ProdOrderRtngLine',ProductionOrder."Routing No.");
        LibraryReportDataset.AssertCurrentRowValue('No_ProdOrderRtngLine',RoutingLine."No.");
      UNTIL RoutingLine.NEXT = 0;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@37(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(
        STRPOS(Question,'Some output is still missing. Do you still want to finish the order?') > 0,
        'Unexpected confirm dialog: ' + Question);
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE QuantityExplosionOfBOMRequestPageHandler@63(VAR QuantityExplosionOfBOM@1000 : TestRequestPage 99000753);
    BEGIN
      QuantityExplosionOfBOM.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ProdOrderCompAndRoutingRequestPageHandler@141(VAR ProdOrderCompAndRouting@1000 : TestRequestPage 5500);
    BEGIN
      ProdOrderCompAndRouting.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ProdOrderJobCardRequestPageHandler@143(VAR ProdOrderJobCard@1000 : TestRequestPage 99000762);
    BEGIN
      ProdOrderJobCard.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ProdOrderPrecalcTimeRequestPageHandler@145(VAR ProdOrderPrecalcTime@1000 : TestRequestPage 99000764);
    BEGIN
      ProdOrderPrecalcTime.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ProdOrderShortageListRequestPageHandler@149(VAR ProdOrderShortageList@1000 : TestRequestPage 99000788);
    BEGIN
      ProdOrderShortageList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ProdOrderMatRequisitionRequestPageHandler@147(VAR ProdOrderMatRequisition@1000 : TestRequestPage 99000765);
    BEGIN
      ProdOrderMatRequisition.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ProdOrderPickingListRequestPageHandler@151(VAR ProdOrderPickingList@1000 : TestRequestPage 99000766);
    BEGIN
      ProdOrderPickingList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ProdOrderDetailedCalcRequestPageHandler@152(VAR ProdOrderDetailedCalc@1000 : TestRequestPage 99000768);
    BEGIN
      ProdOrderDetailedCalc.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ProdOrderStatisticsRequestPageHandler@154(VAR ProdOrderStatistics@1000 : TestRequestPage 99000791);
    BEGIN
      ProdOrderStatistics.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ProductionForecastRequestPageHandler@155(VAR ProductionForecast@1000 : TestRequestPage 99003804);
    BEGIN
      ProductionForecast.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE AssemblyBOMsRequestPageHandler@157(VAR AssemblyBOMs@1000 : TestRequestPage 801);
    BEGIN
      AssemblyBOMs.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE WhereUsedListRequestPageHandler@158(VAR WhereUsedList@1000 : TestRequestPage 809);
    BEGIN
      WhereUsedList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE AssemblyBOMRawMaterialsRequestPageHandler@160(VAR AssemblyBOMRawMaterials@1000 : TestRequestPage 810);
    BEGIN
      AssemblyBOMRawMaterials.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE AssemblyBOMEndItemsRequestPageHandler@161(VAR AssemblyBOMEndItems@1000 : TestRequestPage 812);
    BEGIN
      AssemblyBOMEndItems.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE AssemblyBOMSubassembliesRequestPageHandler@162(VAR AssemblyBOMSubassemblies@1000 : TestRequestPage 811);
    BEGIN
      AssemblyBOMSubassemblies.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RoutingSheetRequestPageHandler@165(VAR RoutingSheet@1000 : TestRequestPage 99000787);
    BEGIN
      RoutingSheet.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE MachineCenterLoadRequestPageHandler@166(VAR MachineCenterLoad@1000 : TestRequestPage 99000784);
    VAR
      StartingDate@1001 : Variant;
      NoOfPeriods@1002 : Variant;
      PeriodLength@1003 : Variant;
      MinCapEfficToPrint@1004 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(NoOfPeriods);
      LibraryVariableStorage.Dequeue(PeriodLength);
      LibraryVariableStorage.Dequeue(MinCapEfficToPrint);

      MachineCenterLoad.Control10.SETVALUE(StartingDate);
      MachineCenterLoad.Control12.SETVALUE(NoOfPeriods);
      MachineCenterLoad.Control11.SETVALUE(PeriodLength);
      MachineCenterLoad.Control2.SETVALUE(MinCapEfficToPrint);
      MachineCenterLoad.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE WorkCenterLoadRequestPageHandler@168(VAR WorkCenterLoad@1000 : TestRequestPage 99000783);
    VAR
      StartingDate@1001 : Variant;
      NoOfPeriods@1002 : Variant;
      PeriodLength@1003 : Variant;
      MinCapEfficToPrint@1004 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(NoOfPeriods);
      LibraryVariableStorage.Dequeue(PeriodLength);
      LibraryVariableStorage.Dequeue(MinCapEfficToPrint);

      WorkCenterLoad.Control1.SETVALUE(StartingDate);
      WorkCenterLoad.Control5.SETVALUE(NoOfPeriods);
      WorkCenterLoad.Control3.SETVALUE(PeriodLength);
      WorkCenterLoad.Control7.SETVALUE(MinCapEfficToPrint);
      WorkCenterLoad.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CapacityTaskListRequestPageHandler@174(VAR CapacityTaskList@1000 : TestRequestPage 99000780);
    BEGIN
      CapacityTaskList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@133(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Manufacturing] [Reports] [SCM]
      Unsupported version tags:
      US: Unable to Compile
      MX: Unable to Compile
      CA: Unable to Compile

      Test Manufacturing Reports:
        1. Run the Production Order Component And Routing Report.
           Verify Production Order details for Planned Production Order.
        2. Run the Production Order Component And Routing Report.
           Verify Production Order details for Firm Planned Production Order.
        3. Run the Production Order Component And Routing Report.
           Verify Production Order details for Released Production Order.
        4. Run the Production Order Component And Routing Report.
           Verify Production Order details for Finished Production Order.
        5. Run the Production Order Job Card Report.
           Verify Production Order details for Planned Production Order.
        6. Run the Production Order Job Card Report.
           Verify Production Order details for Firm Planned Production Order.
        7. Run the Production Order Job Card Report.
           Verify Production Order details for Released Production Order.
        8. Run the Production Order Job Card Report.
           Verify Production Order details for Finished Production Order.
        9. Run the Production Order Precalc Time Report.
           Verify Production Order details for Planned Production Order.
       10. Run the Production Order Precalc Time Report.
           Verify Production Order details for Firm Planned Production Order.
       11. Run the Production Order Precalc Time Report.
           Verify Production Order details for Released Production Order.
       12. Run the Production Order Precalc Time Report.
           Verify Production Order details for Finished Production Order.
       13. Run the Production Order Material Requisition Report.
           Verify Production Order details for Planned Production Order.
       14. Run the Production Order Material Requisition Report.
           Verify Production Order details for Firm Planned Production Order.
       15. Run the Production Order Material Requisition Report.
           Verify Production Order details for Released Production Order.
       16. Run the Production Order Material Requisition Report.
           Verify Production Order details for Finished Production Order.
       17. Run the Production Order Picking List Report.
           Verify Production Order details for Planned Production Order.
       18. Run the Production Order Picking List Report.
           Verify Production Order details for Firm Planned Production Order.
       19. Run the Production Order Picking List Report.
           Verify Production Order details for Released Production Order.
       20. Run the Production Order Detailed Calc. Report.
           Verify Production Order details for Planned Production Order.
       21. Run the Production Order Detailed Calc. Report.
           Verify Production Order details for Firm Planned Production Order.
       22. Run the Production Order Detailed Calc. Report.
           Verify Production Order details for Released Production Order.
       23. Run the Production Order Detailed Calc. Report.
           Verify Production Order details for Finished Production Order.
       24. Run the Production Order Shortage List Report.
           Verify Production Order details for Planned Production Order.
       25. Run the Production Order Shortage List Report.
           Verify Production Order details for Firm Planned Production Order.
       26. Run the Production Order Shortage List Report.
           Verify Production Order details for Released Production Order.
       27. Run the Production Order Shortage List Report.
           Verify Production Order details for Finished Production Order.
       28. Run the Production Order Statistics Report.
           Verify Production Order details for Planned Production Order.
       29. Run the Production Order Statistics Report.
           Verify Production Order details for Firm Planned Production Order.
       30. Run the Production Order Statistics Report.
           Verify Production Order details for Released Production Order.
       31. Run the Production Order Statistics Report.
           Verify Production Order details for Finished Production Order.
       32. Run the Production Order Forecast Report. Verify Production Forecast details.
       33. Run the Production Order Refresh Report for Item. Verify Production Order Line record exist.
       34. Run the Production Order Refresh Report for Family. Verify Production Order Line record exist.
       35. Run the Production Order Refresh Report for Sales Header. Verify Production Order Line record exist.
       36. Run the Calculate Consumption Report. Verify Consumption record exits.
       37. Run the Capacity Task List Report for Work Center. Verify Capacity details.
       38. Run the Capacity Task List Report for Machine Center. Verify Capacity details.
       39. Run the BOMs Report. Verify BOM details.
       40. Run the Where Used List Report. Verify BOM details.
       41. Run the BOM Raw Materials Report. Verify BOM details.
       42. Run the BOM Finished Goods Report. Verify BOM details.
       43. Run the BOM Sub Assemblies Report. Verify BOM details.
       44. Run the Quantity Explosion Of BOM Report. Verify BOM details.
       45. Run the Routing Sheet Report. Verify Routing details.
       46. Run the Machine Center Load Report. Verify Routing details.
       47. Run the Work Center Load Report. Verify Work Center Group Code details.
       48. Run the Quantity Explosion Of BOM Report with un-Certified BOM Version. Verify BOM details.
       49. Run the Quantity Explosion Of BOM Report with Certified BOM Version. Verify BOM details.
       50. Verify Make-to-Order child item is not shown on Shortage List report

        Covers Test Cases:
        -------------------------------------------------------------------
        Test Function Name                         TFS ID
        -------------------------------------------------------------------
        PlannedProdOrderCompRouting                  139495
        FirmPlanProdOrderCompRouting                 139495
        ReleasedProdOrderCompRouting                 139495
        FinishedProdOrderCompRouting                 139495
        PlannedProdOrderJobCard                      139565
        FirmPlanProdOrderJobCard                     139565
        ReleasedProdOrderJobCard                     139565
        FinishedProdOrderJobCard                     139565
        PlannedProdOrderPrecalcTime                  139566
        FirmPlanProdOrderPreCalcTime                 139566
        ReleasedProdOrderPrecalcTime                 139566
        FinishedProdOrderPrecalcTime                 139566
        PlannedProdOrderMatRequisition               139567
        FirmPlanProdOrdMatRequisition                139567
        ReleasedProdOrdMatRequisition                139567
        FinishedProdOrdMatRequisition                139567
        PlannedProdOrderPickingList                  139463
        FirmPlanProdOrderPickingList                 139463
        ReleasedProdOrderPickingList                 139463
        PlannedProdOrderDetailedCalc                 139568
        FirmPlanProdOrderDetailedCalc                139568
        ReleasedProdOrderDetailedCalc                139568
        FinishedProdOrderDetailedCalc                139568
        PlannedProdOrderShortageList                 139469
        FirmPlanProdOrderShortageList                139469
        ReleasedProdOrderShortageList                139469
        FinishedProdOrderShortageList                139469
        PlannedProdOrderStatistics                   139571
        FirmPlanProdOrderStatistics                  139571
        ReleasedProdOrderStatistics                  139571
        FinishedProdOrderStatistics                  139571
        ProdOrderForecastReport                      139572
        ItemProdOrderRefresh                         128932
        FamilyProdOrderRefresh                       128932
        SalesProdOrderRefresh                        128932
        CalcConsumptionReport                        129065
        WorkCenterCapacityTaskList                   139465
        MachineCenterCapacityTaskList                139465
        BOMsReport                                   139417
        WhereUsedListReport                          139421
        BOMRawMaterialsReport                        139422
        BOMFinishedGoodsReport                       139424
        BOMSubAssembliesReport                       139423
        QuantityExplosionOfBOMReport                 139559
        RoutingSheetReport                           139468
        MachineCenterLoadReport                      139570
        WorkCenterLoadReport                         139569

        Covers Test Case for Bug ID: 319861
        -------------------------------------------------------------------
        Test Function Name                             TFS ID
        -------------------------------------------------------------------
        ComponentsOnQuantityExplosionOfBomReport       320012
        Covers Test Case for Merge Bug
        -------------------------------------------------------------------
        Test Function Name                                          TFS ID
        -------------------------------------------------------------------
        QuantityExplosionOfBOMReportWithUnCertifiedBOMVersion       91748
        QuantityExplosionOfBOMReportWithCertifiedBOMVersion         91748

        ReleasedProdOrderShortageListWithMaketoOrderChilditem       105718
    }
    END.
  }
}

