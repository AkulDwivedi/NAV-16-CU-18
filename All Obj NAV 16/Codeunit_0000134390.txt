OBJECT Codeunit 134390 ERM Sales Doc. Reports
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1002 : Codeunit 132201;
      LibraryReportDataset@1000 : Codeunit 131007;
      LibraryVariableStorage@1056 : Codeunit 131004;
      LibraryRandom@1009 : Codeunit 130440;
      Assert@1007 : Codeunit 130000;
      LibraryUtility@1008 : Codeunit 131000;
      LibrarySales@1003 : Codeunit 130509;
      LibraryERM@1010 : Codeunit 131300;
      LibraryPurchase@1006 : Codeunit 130512;
      isInitialized@1001 : Boolean;
      DocumentOrderErrorTxt@1004 : TextConst 'ENU=The documents are not listed according to Posting Date because they were not entered in that order.';
      SameAmountErrorTxt@1011 : TextConst 'ENU=Amount must be same.';
      HeaderDimensionTxt@1012 : TextConst '@@@="%1 = Dimension Code, %2 = Dimension Value Code";ENU=%1 %2';

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateLocalData;
      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(ReportHandlerSalesInvoiceNos)]
    PROCEDURE SalesInvoiceNumberReport@2();
    VAR
      SalesLine@1000 : Record 37;
      SalesHeader@1002 : Record 36;
      PostedInvoiceNo@1001 : Code[20];
    BEGIN
      // Test that the values of Bill-to Customer No.,Bill-to Name,Source Code in Sales Invoice Nos. Report
      // must match in Corresponding Sales Invoice Header Table values.

      // 1. Setup: Create and Post Sales Invoice and find Posted Sales Invoice.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice);
      PostedInvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 2. Exercise: Generate Sales Invoice Nos. Report.
      RunSalesInvoiceNos(PostedInvoiceNo);

      // 3. Verify: Test that the values of Bill-to Customer No.,Bill-to Name,Source Code in Sales Invoice Nos. Report
      // must match in Corresponding Sales Invoice Header Table values.
      LibraryReportDataset.LoadDataSetFile;
      VerifySalesInvoiceNumber(SalesHeader);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ReportHandlerSalesInvoiceNos)]
    PROCEDURE SalesInvoiceNumberWarning@25();
    VAR
      SalesLine@1004 : Record 37;
      SalesHeader@1002 : Record 36;
      PostingDate@1001 : Date;
      PostedInvoiceNo@1000 : Code[20];
    BEGIN
      // Test Warning Message of Sales Invoice Nos. Report.

      // 1. Setup: Create two Sales Invoices with different Posting Dates.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice);
      PostingDate := SalesHeader."Posting Date";
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Invoice);
      PostingDateLessThanPrevious(SalesHeader,PostingDate);
      PostedInvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 2. Exercise: Generate Sales Invoice Nos. Report.
      RunSalesInvoiceNos(PostedInvoiceNo);

      // 3. Verify: Verify Warning Message of Sales Invoice Nos. Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number__Control15',FORMAT(DocumentOrderErrorTxt));
    END;

    [Test]
    [HandlerFunctions(ReportHandlerSalesCrMemoNos)]
    PROCEDURE SalesCreditMemoNumberReport@1();
    VAR
      SalesLine@1000 : Record 37;
      SalesHeader@1002 : Record 36;
      PostedCrMemoNo@1001 : Code[20];
    BEGIN
      // Test that the values of Bill-to Customer No.,Bill-to Name,Source Code in Sales Credit Memo Nos. Report
      // must match in Corresponding Sales Credit Memo Header Table values.

      // 1. Setup: Create and Post Sales Credit Memo and find Posted Sales Credit Memo.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Credit Memo");
      PostedCrMemoNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 2. Exercise: Generate Sales Credit Memo Nos. Report.
      RunSalesCrMemoNos(PostedCrMemoNo);

      // 3. Verify: Verify that the values of Bill-to Customer No.,Bill-to Name,Source Code in Sales Credit Memo Nos. Report
      // must match in Corresponding Sales Credit Memo Header Table values.
      LibraryReportDataset.LoadDataSetFile;
      VerifySalesCreditMemo(SalesHeader);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,ReportHandlerSalesCrMemoNos)]
    PROCEDURE SalesCreditMemoWarning@3();
    VAR
      SalesLine@1002 : Record 37;
      SalesHeader@1000 : Record 36;
      PostingDate@1001 : Date;
      PostedCrMemoNo@1003 : Code[20];
    BEGIN
      // Test Warning Message of Sales Credit Memo Nos Report.

      // 1. Setup: Create two Sales Credit Memos with different Posting Dates.
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Credit Memo");
      PostingDate := SalesHeader."Posting Date";
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Credit Memo");
      PostingDateLessThanPrevious(SalesHeader,PostingDate);
      PostedCrMemoNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // 2. Exercise: Generate Sales Credit Memo Nos. Report.
      RunSalesCrMemoNos(PostedCrMemoNo);

      // 3. Verify: Verify Warning Message of Sales Credit Memo Nos Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ErrorText_Number__Control15',FORMAT(DocumentOrderErrorTxt));
    END;

    [Test]
    [HandlerFunctions(ReportHandlerBlanketSalesOrder)]
    PROCEDURE BlanketSalesOrderWithoutOption@6();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      // Verify Blanket Sales Order Report when no option is set.

      // Setup
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Blanket Order");

      // Exercise: Save Blanket Sales Order Report
      BlanketSalesOrderReport(SalesHeader."No.",FALSE);

      // Verify: Verify Amount on Blanket Sales Order Report when no option is set.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('LineAmountRL_SalesLine',SalesLine."Line Amount");
    END;

    [Test]
    [HandlerFunctions(ReportHandlerBlanketSalesOrder)]
    PROCEDURE BlanketSalesOrderCheckVAT@42();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      // Verify VAT Amount on Blanket Sales Order Report when no option is set.

      // Setup
      Initialize;
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::"Blanket Order");

      // Exercise: Save Blanket Sales Order Report.
      BlanketSalesOrderReport(SalesHeader."No.",FALSE);

      // Verify: Verify VAT Amount on Blanket Sales Order Report when no option is set.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('VATAmount',ROUND(SalesLine."Line Amount" * SalesLine."VAT %" / 100));
    END;

    [Test]
    [HandlerFunctions(ReportHandlerBlanketSalesOrder)]
    PROCEDURE BlanketSalesOrderInternalInfo@61();
    VAR
      DefaultDimension@1001 : Record 352;
      VATPostingSetup@1003 : Record 325;
      SalesHeader@1002 : Record 36;
      SalesLine@1006 : Record 37;
      RowValueSet@1000 : Text[250];
    BEGIN
      // Verify Dimension on Blanket Sales Order Report when Show Internal Information option is True.

      // Setup.
      Initialize;
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      CreateCustomerWithDimension(DefaultDimension,VATPostingSetup."VAT Bus. Posting Group");
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Blanket Order",DefaultDimension."No.");

      // Use Random Number Generator for Quantity.
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem(VATPostingSetup."VAT Prod. Posting Group"),
        LibraryRandom.RandDec(10,2));

      // Exercise: Save Blanket Sales Order Report.
      BlanketSalesOrderReport(SalesHeader."No.",TRUE);

      // Verify: Verify Dimension on Blanket Sales Order Report when Show Internal Information option is True.
      LibraryReportDataset.LoadDataSetFile;
      RowValueSet := STRSUBSTNO(HeaderDimensionTxt,DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
      LibraryReportDataset.AssertElementWithValueExists('DimText',RowValueSet);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerReturnOrderConfirmation)]
    PROCEDURE SalesReturnOrderWithInternal@110();
    VAR
      DefaultDimension@1001 : Record 352;
      VATPostingSetup@1003 : Record 325;
      SalesHeader@1002 : Record 36;
      SalesLine@1006 : Record 37;
    BEGIN
      // Test Dimension on Return Order Confirmation Report when Show Internal Information option as True.

      // 1. Setup: Create Sales Header with Document Type as Return Order and Sales Line.
      Initialize;
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      CreateCustomerWithDimension(DefaultDimension,VATPostingSetup."VAT Bus. Posting Group");
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Return Order",DefaultDimension."No.");
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem(VATPostingSetup."VAT Prod. Posting Group"),
        LibraryRandom.RandDec(10,2));  // Use Random for Quantity.

      // 2. Exercise: Run Return Order Confirmation Report with show Internal Information as True.
      RunReturnOrderConfirmation(SalesHeader,TRUE,FALSE);

      // Verify: Verify Dimension on Return Order Confirmation Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('DimText',
        STRSUBSTNO(HeaderDimensionTxt,DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code"));
    END;

    [Test]
    [HandlerFunctions(ReportHandlerReturnOrderConfirmation)]
    PROCEDURE SalesReturnOrderLogInteraction@19();
    VAR
      VATPostingSetup@1000 : Record 325;
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
      InteractionLogEntry@1003 : Record 5065;
    BEGIN
      // Test Interaction Log Entry after running Return Order Confirmation Report with Log Interaction as True.

      // 1. Setup: Create Sales Header with Document Type as Return Order and Sales Line.
      Initialize;
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibrarySales.CreateSalesHeader(
        SalesHeader,SalesHeader."Document Type"::"Return Order",CreateCustomer(VATPostingSetup."VAT Bus. Posting Group"));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem(VATPostingSetup."VAT Prod. Posting Group"),
        LibraryRandom.RandDec(10,2));  // Use Random for Quantity.

      // 2. Exercise: Run Return Order Confirmation Report with Log Iteraction as True.
      RunReturnOrderConfirmation(SalesHeader,FALSE,TRUE);

      // 3. Verify: Verify Interaction Log Entry.
      InteractionLogEntry.SETRANGE("Document Type",InteractionLogEntry."Document Type"::"Sales Return Order");
      InteractionLogEntry.SETRANGE("Document No.",SalesHeader."No.");
      InteractionLogEntry.FINDFIRST;
      InteractionLogEntry.TESTFIELD("Information Flow",InteractionLogEntry."Information Flow"::Outbound);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerCustomerSummaryAging)]
    PROCEDURE CustomerSummaryAgingWithMultipleSalesOrder@11();
    VAR
      GenJournalBatch@1006 : Record 232;
      Customer@1000 : Record 18;
      SalesLine@1002 : Record 37;
      GenJournalLine@1004 : Record 81;
      CustomerSummaryAging@1010 : Report 105;
      ReportValue@1012 : Variant;
      CustomerNo@1003 : Code[20];
      CustomerNo2@1009 : Code[20];
      Amount@1005 : Decimal;
      Amount2@1007 : Decimal;
      Amount3@1008 : Decimal;
      PostingDate@1001 : Date;
      PostingDate2@1011 : Date;
    BEGIN
      // Check Customer Summary Aging Report with Multiple Posted Sales Order and with partially Payment.

      // Setup: Create and Post Three Sales Order with Due Date. Take difference with 1 Month on Due Date.
      Initialize;
      PostingDate := CalculatePostingDate(WORKDATE);
      PostingDate2 := CalculatePostingDate(PostingDate);
      Amount := CreateAndPostSalesOrder(SalesLine,WORKDATE);
      CustomerNo := SalesLine."Sell-to Customer No.";
      Amount2 := CreateAndPostSalesOrder(SalesLine,PostingDate);
      CustomerNo2 := SalesLine."Sell-to Customer No.";
      Amount3 := CreateAndPostSalesOrder(SalesLine,PostingDate2);

      // Partial Payment of Posted Invoice through General Line with Due Date same as Posted Sales order.
      SelectGenJournalBatch(GenJournalBatch);
      CreateAndModifyGeneralLine(GenJournalLine,GenJournalBatch,CustomerNo,WORKDATE,-Amount);
      CreateAndModifyGeneralLine(GenJournalLine,GenJournalBatch,CustomerNo2,PostingDate,-Amount2 / 2);
      CreateAndModifyGeneralLine(GenJournalLine,GenJournalBatch,SalesLine."Sell-to Customer No.",PostingDate2,-Amount3 / 2);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Run and Save Report for Customer Summary Aging. 1M is required to generate Date for 1 month difference.
      CLEAR(CustomerSummaryAging);
      Customer.SETFILTER("No.",'%1|%2|%3',CustomerNo,CustomerNo2,SalesLine."Sell-to Customer No.");
      CustomerSummaryAging.SETTABLEVIEW(Customer);
      CustomerSummaryAging.InitializeRequest(GenJournalLine."Due Date",'<1M>',FALSE);
      CustomerSummaryAging.RUN;

      // Verify: Verify Saved Report Data.
      LibraryReportDataset.LoadDataSetFile;
      Amount2 := FindDetailedCustomerLedgerEntry(CustomerNo2);
      Amount3 := FindDetailedCustomerLedgerEntry(SalesLine."Sell-to Customer No.");

      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.FindCurrentRowValue('CustBalanceDueLCY_1_',ReportValue);
      Assert.AreNearlyEqual(-Amount2,ReportValue,LibraryERM.GetAmountRoundingPrecision,SameAmountErrorTxt);

      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.FindCurrentRowValue('CustBalanceDueLCY_2_',ReportValue);
      Assert.AreNearlyEqual(-Amount3,ReportValue,LibraryERM.GetAmountRoundingPrecision,SameAmountErrorTxt);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerOrderConfirmation)]
    PROCEDURE SalesLineWithFullQtyToInvoice@31();
    VAR
      Quantity@1000 : Decimal;
    BEGIN
      // Verify VAT and Inv. Discount Amounts on Order Confirmation Report when Quantity equal to Quantity to Invoice.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      VerifyAmountsOnOrderConfirmationTestReport(Quantity,Quantity);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerOrderConfirmation)]
    PROCEDURE SalesLineWithPartialQtyToInvoice@29();
    VAR
      Quantity@1000 : Decimal;
    BEGIN
      // Verify VAT and Inv. Discount Amounts on Order Confirmation Report when Quantity to Invoice Less than Quantity.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);
      VerifyAmountsOnOrderConfirmationTestReport(Quantity,Quantity / LibraryRandom.RandIntInRange(2,5));
    END;

    [Test]
    [HandlerFunctions(ReportHandlerOrderConfirmation)]
    PROCEDURE SalesLineWithZeroQtyToInvoice@28();
    BEGIN
      // Verify VAT and Inv. Discount Amounts on Order Confirmation Report when Quantity to Invoice is Zero.
      Initialize;
      VerifyAmountsOnOrderConfirmationTestReport(LibraryRandom.RandDec(10,2),0);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler,MessageHandler,ReportHandlerArchivedSalesOrder)]
    PROCEDURE VerifyVATAmountOnArchiveSalesOrderReport@32();
    VAR
      SalesHeader@1001 : Record 36;
      SalesHeaderArchive@1006 : Record 5107;
      ArchiveManagement@1000 : Codeunit 5063;
      VATAmount@1002 : Decimal;
    BEGIN
      // 1. Setup: Create Sales Order with Multiple Lines.
      Initialize;
      VATAmount := CreateSalesDocumentWithMultipleLines(SalesHeader);

      // 2. Exercise: Archive the Sales Document and Run Report Archived Sales Order.
      ArchiveManagement.ArchiveSalesDocument(SalesHeader);
      COMMIT;
      SalesHeaderArchive.SETRANGE("No.",SalesHeader."No.");
      REPORT.RUN(REPORT::"Archived Sales Order",TRUE,FALSE,SalesHeaderArchive);

      // Verify: VAT Amount is correct.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('VATAmount_Control134',ROUND(VATAmount,LibraryERM.GetAmountRoundingPrecision));
    END;

    LOCAL PROCEDURE VerifySalesReturnOrderConfirmationWithVATAmountLine@146(LineCount@1002 : Integer);
    VAR
      SalesHeader@1005 : Record 36;
      VATAmount@1001 : ARRAY [10] OF Decimal;
      i@1000 : Integer;
    BEGIN
      // Setup: Create Sales Return Order With Multiple Lines.
      Initialize;
      CreateSalesReturnOrderWithMultipleLines(SalesHeader,VATAmount,LineCount);

      // Exercise: Run Report Return Order Confirmation.
      RunReturnOrderConfirmation(SalesHeader,FALSE,FALSE);

      // Verify: Check VAT Amount on Sales Return Order Confirmation Report.
      LibraryReportDataset.LoadDataSetFile;
      FOR i := 1 TO LineCount DO
        LibraryReportDataset.AssertElementWithValueExists('VATAmtLineVATAmt',VATAmount[i]);
    END;

    LOCAL PROCEDURE FindDetailedCustomerLedgerEntry@13(CustomerNo@1001 : Code[20]) : Decimal;
    VAR
      DetailedCustLedgEntry@1000 : Record 379;
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Document Type",DetailedCustLedgEntry."Document Type"::Payment);
      DetailedCustLedgEntry.SETRANGE("Customer No.",CustomerNo);
      DetailedCustLedgEntry.FINDFIRST;
      EXIT(DetailedCustLedgEntry.Amount);
    END;

    LOCAL PROCEDURE BlanketSalesOrderReport@35(No@1004 : Code[20];ShowInternalInformation@1006 : Boolean);
    VAR
      SalesHeader@1000 : Record 36;
      BlanketSalesOrder@1002 : Report 210;
    BEGIN
      COMMIT; // Required to run report with request page.
      CLEAR(BlanketSalesOrder);
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::"Blanket Order");
      SalesHeader.SETRANGE("No.",No);
      BlanketSalesOrder.SETTABLEVIEW(SalesHeader);

      // 0 is using for No. of Copies.
      BlanketSalesOrder.InitializeRequest(0,ShowInternalInformation,FALSE);
      BlanketSalesOrder.RUN;
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrder@20(VAR SalesLine@1002 : Record 37;DueDate@1008 : Date) Amount : Decimal;
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      // Taken Random values for Quantity and Unit Price.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      SalesHeader.VALIDATE("Due Date",DueDate);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandDec(10,2));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      SalesLine.MODIFY(TRUE);
      Amount := SalesLine."Amount Including VAT";
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocumentWithCurrency@37(VAR SalesHeader@1003 : Record 36;DocumentType@1001 : Option) : Code[10];
    VAR
      SalesLine@1002 : Record 37;
      Currency@1006 : Record 4;
      VATPostingSetup@1000 : Record 325;
      VATIdentifier@1004 : Code[10];
      OldVATPercent@1005 : Decimal;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      UpdateVATPostingSetup(VATPostingSetup,OldVATPercent,0);

      Currency.GET(LibraryERM.CreateCurrencyWithRandomExchRates);
      VATIdentifier := CreateSalesDocumentWithNormalVAT(VATPostingSetup,SalesHeader,SalesLine,DocumentType,Currency.Code);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      UpdateVATPostingSetup(VATPostingSetup,OldVATPercent,OldVATPercent);
      EXIT(VATIdentifier);
    END;

    LOCAL PROCEDURE CreateAndPostPurchDocumentWithCurrency@50(VAR PurchaseHeader@1000 : Record 38;DocumentType@1002 : Option;VATCalType@1003 : Option;VendorCrMemoNo@1005 : Code[35]) : Code[10];
    VAR
      VATPostingSetup@1001 : Record 325;
      VATIdentifier@1007 : Code[10];
      OldVATPercent@1004 : Decimal;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATCalType);
      UpdateVATPostingSetup(VATPostingSetup,OldVATPercent,0);

      VATIdentifier := CreatePurchaseDocumentWithCurrency(VATPostingSetup,PurchaseHeader,DocumentType,VendorCrMemoNo);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      UpdateVATPostingSetup(VATPostingSetup,OldVATPercent,OldVATPercent);
      EXIT(VATIdentifier);
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithCurrency@46(VAR VATPostingSetup@1004 : Record 325;VAR PurchaseHeader@1003 : Record 38;DocumentType@1001 : Option;VendorCrMemoNo@1002 : Code[35]) : Code[10];
    VAR
      Currency@1006 : Record 4;
      PurchaseLine@1007 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor(VATPostingSetup."VAT Bus. Posting Group"));
      Currency.GET(LibraryERM.CreateCurrencyWithRandomExchRates);
      UpdatePurchaseDocument(PurchaseHeader,Currency.Code,VendorCrMemoNo);

      // Use Random Number Generator for Quantity.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem(VATPostingSetup."VAT Prod. Posting Group"),
        LibraryRandom.RandDec(10,2));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDecInRange(10,1000,2));
      PurchaseLine.MODIFY(TRUE);
      EXIT(VATPostingSetup."VAT Identifier");
    END;

    LOCAL PROCEDURE CreateAndModifyGeneralLine@24(VAR GenJournalLine@1004 : Record 81;GenJournalBatch@1005 : Record 232;AccountNo@1010 : Code[20];DueDate@1009 : Date;Amount@1011 : Decimal);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Customer,AccountNo,Amount);
      GenJournalLine.VALIDATE("Due Date",DueDate);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocument@41(VAR SalesHeader@1002 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1000 : Option);
    VAR
      VATPostingSetup@1003 : Record 325;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      CreateSalesDocumentWithNormalVAT(VATPostingSetup,SalesHeader,SalesLine,DocumentType,'');
    END;

    LOCAL PROCEDURE CreateSalesDocumentWithNormalVAT@10(VAR VATPostingSetup@1005 : Record 325;VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;DocumentType@1004 : Option;CurrencyCode@1003 : Code[10]) : Code[10];
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CreateCustomer(VATPostingSetup."VAT Bus. Posting Group"));
      SalesHeader.VALIDATE("Currency Code",CurrencyCode);
      SalesHeader.MODIFY(TRUE);

      // Use Random Number Generator for Quantity.
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem(VATPostingSetup."VAT Prod. Posting Group"),
        LibraryRandom.RandDec(10,2));
      EXIT(VATPostingSetup."VAT Identifier");
    END;

    LOCAL PROCEDURE CreateSalesDocumentWithMultipleLines@36(VAR SalesHeader@1002 : Record 36) : Decimal;
    VAR
      VATPostingSetup@1003 : Record 325;
      SalesLine@1000 : Record 37;
      i@1005 : Integer;
      TotalAmount@1001 : Decimal;
    BEGIN
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibrarySales.CreateSalesHeader(
        SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer(VATPostingSetup."VAT Bus. Posting Group"));
      FOR i := 1 TO LibraryRandom.RandIntInRange(2,5) DO BEGIN
        LibrarySales.CreateSalesLine(
          SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem(VATPostingSetup."VAT Prod. Posting Group"),
          LibraryRandom.RandInt(10));
        TotalAmount += ROUND((SalesLine.Amount * SalesLine."VAT %") / 100);
      END;
      EXIT(TotalAmount);
    END;

    LOCAL PROCEDURE CreateSalesReturnOrderWithMultipleLines@54(VAR SalesHeader@1001 : Record 36;VAR VATAmount@1009 : ARRAY [10] OF Decimal;LineCount@1000 : Integer);
    VAR
      VATBusinessPostingGroup@1002 : Record 323;
      i@1003 : Integer;
    BEGIN
      LibraryERM.CreateVATBusinessPostingGroup(VATBusinessPostingGroup);
      LibrarySales.CreateSalesHeader(
        SalesHeader,SalesHeader."Document Type"::"Return Order",CreateCustomer(VATBusinessPostingGroup.Code));
      FOR i := 1 TO LineCount DO
        VATAmount[i] := CreateSalesLineAndCalcVATAmount(SalesHeader,VATBusinessPostingGroup.Code);
    END;

    LOCAL PROCEDURE CreateSalesLineAndCalcVATAmount@60(SalesHeader@1005 : Record 36;VATBusinessPostingGroupCode@1002 : Code[10]) : Decimal;
    VAR
      SalesLine@1003 : Record 37;
      VATAmountLine@1000 : Record 290;
      VATPostingSetup@1001 : Record 325;
      QtyType@1004 : 'General,Invoicing,Shipping';
    BEGIN
      CreateVATPostingSetup(VATPostingSetup,VATBusinessPostingGroupCode);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,CreateItem(VATPostingSetup."VAT Prod. Posting Group"),
        LibraryRandom.RandInt(10));
      SalesLine.CalcVATAmountLines(QtyType::General,SalesHeader,SalesLine,VATAmountLine);
      EXIT(VATAmountLine."VAT Amount");
    END;

    LOCAL PROCEDURE CreateVATPostingSetup@56(VAR VATPostingSetup@1001 : Record 325;VATBusinessPostingGroupCode@1003 : Code[10]);
    VAR
      VATProductPostingGroup@1000 : Record 324;
    BEGIN
      LibraryERM.CreateVATProductPostingGroup(VATProductPostingGroup);
      LibraryERM.CreateVATPostingSetup(VATPostingSetup,VATBusinessPostingGroupCode,VATProductPostingGroup.Code);
      WITH VATPostingSetup DO BEGIN
        VALIDATE("VAT Identifier",VATProductPostingGroup.Code);
        VALIDATE("VAT %",LibraryRandom.RandInt(20));
        VALIDATE("VAT Calculation Type","VAT Calculation Type"::"Normal VAT");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateCustomer@7(VATBusPostingGroup@1002 : Code[10]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("VAT Bus. Posting Group",VATBusPostingGroup);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateVendor@53(VATBusPostingGroup@1000 : Code[10]) : Code[20];
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("VAT Bus. Posting Group",VATBusPostingGroup);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateItem@9(VATProdPostingGroup@1004 : Code[10]) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateGLAccount@39(VATProdPostingGroup@1004 : Code[10]) : Code[20];
    VAR
      GLAccount@1000 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithDimension@72(VAR DefaultDimension@1000 : Record 352;VATBusPostingGroup@1004 : Code[10]);
    VAR
      Dimension@1003 : Record 348;
      DimensionValue@1001 : Record 349;
      LibraryDimension@1002 : Codeunit 131001;
    BEGIN
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,DATABASE::Customer,CreateCustomer(VATBusPostingGroup),DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE CalculatePostingDate@14(DeltaDate@1001 : Date) : Date;
    BEGIN
      EXIT(CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>',DeltaDate));
    END;

    LOCAL PROCEDURE FindSalesCrMemoHeader@22(VAR SalesCrMemoHeader@1001 : Record 114;PreAssignedDocNo@1000 : Code[20]);
    BEGIN
      SalesCrMemoHeader.SETRANGE("Pre-Assigned No.",PreAssignedDocNo);
      SalesCrMemoHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesInvHeader@18(VAR SalesInvoiceHeader@1001 : Record 112;PreAssignedDocNo@1000 : Code[20]);
    BEGIN
      SalesInvoiceHeader.SETRANGE("Pre-Assigned No.",PreAssignedDocNo);
      SalesInvoiceHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE PostingDateLessThanPrevious@16(VAR SalesHeader@1000 : Record 36;PostingDate@1001 : Date);
    BEGIN
      // Posting Date must be less than previous posting date. Value is important for test.
      SalesHeader.VALIDATE("Posting Date",CALCDATE('<CM>''-''<' + FORMAT(LibraryRandom.RandInt(10)) + 'M>',PostingDate));
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseDocument@55(VAR PurchaseHeader@1000 : Record 38;CurrencyCode@1001 : Code[10];VendorCrMemoNo@1002 : Code[35]);
    BEGIN
      PurchaseHeader.VALIDATE("Currency Code",CurrencyCode);
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",VendorCrMemoNo);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGeneralLedgerSetup@47(PrintVATSpecInLCY@1000 : Boolean) OldPrintVATSpecInLCY : Boolean;
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      OldPrintVATSpecInLCY := GeneralLedgerSetup."Print VAT specification in LCY";
      GeneralLedgerSetup."Print VAT specification in LCY" := PrintVATSpecInLCY;
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateVATPostingSetup@33(VAR VATPostingSetup@1000 : Record 325;VAR OldVATPercent@1001 : Decimal;VATPercent@1002 : Decimal);
    BEGIN
      OldVATPercent := VATPostingSetup."VAT %";
      VATPostingSetup.VALIDATE("VAT %",VATPercent);
      VATPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunSalesCrMemoNos@30(PostedCrMemoNo@1000 : Code[20]);
    VAR
      SalesCrMemoHeader@1002 : Record 114;
      SalesCreditMemoNos@1001 : Report 125;
    BEGIN
      COMMIT;
      CLEAR(SalesCreditMemoNos);
      SalesCrMemoHeader.GET(PostedCrMemoNo);
      SalesCreditMemoNos.SETTABLEVIEW(SalesCrMemoHeader);
      SalesCreditMemoNos.RUN;
    END;

    LOCAL PROCEDURE RunSalesInvoiceNos@15(PostedInvoiceNo@1000 : Code[20]);
    VAR
      SalesInvoiceHeader@1001 : Record 112;
      SalesInvoiceNos@1002 : Report 124;
    BEGIN
      COMMIT; // Required to run report with request page.
      CLEAR(SalesInvoiceNos);
      SalesInvoiceHeader.GET(PostedInvoiceNo);
      SalesInvoiceNos.SETTABLEVIEW(SalesInvoiceHeader);
      SalesInvoiceNos.RUN;
    END;

    LOCAL PROCEDURE RunReturnOrderConfirmation@8(SalesHeader@1001 : Record 36;ShowInternalInformation@1002 : Boolean;LogInteraction@1003 : Boolean);
    VAR
      ReturnOrderConfirmation@1000 : Report 6631;
    BEGIN
      COMMIT; // Required to run report with request page.
      CLEAR(ReturnOrderConfirmation);
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      ReturnOrderConfirmation.SETTABLEVIEW(SalesHeader);
      ReturnOrderConfirmation.InitializeRequest(ShowInternalInformation,LogInteraction);
      ReturnOrderConfirmation.RUN;
    END;

    LOCAL PROCEDURE RunSalesCreditMemo@89(SalesHeaderNo@1000 : Code[20]);
    VAR
      SalesCrMemoHeader@1001 : Record 114;
      SalesCreditMemo@1002 : Report 207;
    BEGIN
      COMMIT;
      CLEAR(SalesCreditMemo);
      SalesCrMemoHeader.SETRANGE("Pre-Assigned No.",SalesHeaderNo);
      SalesCrMemoHeader.FINDFIRST;
      SalesCreditMemo.SETTABLEVIEW(SalesCrMemoHeader);
      SalesCreditMemo.RUN;
    END;

    LOCAL PROCEDURE RunPurchCreditMemo@59(VendorCrMemoNo@1003 : Code[35]);
    VAR
      PurchCrMemoHdr@1001 : Record 124;
      PurchaseCreditMemo@1002 : Report 407;
    BEGIN
      COMMIT;
      CLEAR(PurchaseCreditMemo);
      PurchCrMemoHdr.SETRANGE("Vendor Cr. Memo No.",VendorCrMemoNo);
      PurchCrMemoHdr.FINDFIRST;
      PurchaseCreditMemo.SETTABLEVIEW(PurchCrMemoHdr);
      PurchaseCreditMemo.RUN;
    END;

    LOCAL PROCEDURE SelectGenJournalBatch@12(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      // Select General Journal Batch and clear General Journal Lines to make sure that no line exist before creating
      // General Journal Lines.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch)
    END;

    LOCAL PROCEDURE UpdateSalesLine@34(VAR SalesLine@1000 : Record 37;QtyToInvoice@1001 : Decimal);
    BEGIN
      WITH SalesLine DO BEGIN
        VALIDATE("Unit Price",LibraryRandom.RandDec(1000,2));
        VALIDATE("Qty. to Invoice",QtyToInvoice);
        VALIDATE("Inv. Discount Amount",ROUND("Line Amount" / LibraryRandom.RandInt(5)));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE VerifySalesInvoiceNumber@103(SalesHeader@1000 : Record 36);
    VAR
      SalesInvoiceHeader@1001 : Record 112;
    BEGIN
      FindSalesInvHeader(SalesInvoiceHeader,SalesHeader."No.");
      LibraryReportDataset.AssertElementWithValueExists('SalesInvHeader__Bill_to_Customer_No__',SalesHeader."Bill-to Customer No.");
      LibraryReportDataset.AssertElementWithValueExists('SalesInvHeader__Source_Code_',SalesInvoiceHeader."Source Code");
      LibraryReportDataset.AssertElementWithValueExists('SalesInvHeader__Bill_to_Name_',SalesHeader."Bill-to Name");
    END;

    LOCAL PROCEDURE VerifySalesCreditMemo@44(SalesHeader@1000 : Record 36);
    VAR
      SalesCrMemoHeader@1001 : Record 114;
    BEGIN
      FindSalesCrMemoHeader(SalesCrMemoHeader,SalesHeader."No.");
      LibraryReportDataset.AssertElementWithValueExists('SalesCrMemoHeader__Bill_to_Customer_No__',SalesHeader."Bill-to Customer No.");
      LibraryReportDataset.AssertElementWithValueExists('SalesCrMemoHeader__Source_Code_',SalesCrMemoHeader."Source Code");
      LibraryReportDataset.AssertElementWithValueExists('SalesCrMemoHeader__Bill_to_Name_',SalesHeader."Bill-to Name");
    END;

    LOCAL PROCEDURE VerifySalesLineOnReport@26(SalesLine@1000 : Record 37);
    BEGIN
      LibraryReportDataset.AssertElementWithValueExists('Qty_SalesLine',SalesLine.Quantity);
      LibraryReportDataset.AssertElementWithValueExists('UnitPrice_SalesLine',SalesLine."Unit Price");
      LibraryReportDataset.AssertElementWithValueExists('VATIdentifier_SalesLine',SalesLine."VAT Identifier");
      LibraryReportDataset.AssertElementWithValueExists('SalesLineLineAmt',SalesLine."Line Amount");
    END;

    LOCAL PROCEDURE VerifyAmountsOnOrderConfirmationTestReport@27(Quantity@1003 : Decimal;QuantityToInvoice@1004 : Decimal);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      VATPostingSetup@1002 : Record 325;
    BEGIN
      // Create Sales Order and Update Quantity To Invoice and Inv. Discount Amount.
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,
        CreateCustomer(VATPostingSetup."VAT Bus. Posting Group"));
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",CreateGLAccount(VATPostingSetup."VAT Prod. Posting Group"),Quantity);
      LibraryVariableStorage.Enqueue(SalesHeader."No.");
      UpdateSalesLine(SalesLine,QuantityToInvoice);

      // Exercise: Run Order Confirmation Report.
      COMMIT;
      REPORT.RUN(REPORT::"Order Confirmation",TRUE,FALSE,SalesHeader);

      // Verify: Verify Inv. Discount Amounts on Order Confiramtion Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('NNCSalesLineInvDiscAmt',SalesLine."Inv. Discount Amount");
    END;

    LOCAL PROCEDURE VerifySalesCreditMemoReport@52(VATIdentifier@1001 : Code[10];VATAmount@1002 : Decimal);
    BEGIN
      WITH LibraryReportDataset DO BEGIN
        LoadDataSetFile;
        AssertElementWithValueExists('VATAmtLineVATIdentifier',VATIdentifier);
        AssertElementWithValueExists('VATAmtLineVATAmt',VATAmount);
        AssertElementWithValueExists('VATIdentifier_VATCounterLCY',VATIdentifier);
        AssertElementWithValueExists('VALVATAmountLCY',VATAmount);
      END;
    END;

    LOCAL PROCEDURE VerifyPurchaseCreditMemoReport@65(VATIdentifier@1000 : Code[10];VATAmount@1001 : Decimal);
    BEGIN
      WITH LibraryReportDataset DO BEGIN
        LoadDataSetFile;
        AssertElementWithValueExists('VATAmtLineVATIdentifier_VATCounter',VATIdentifier);
        AssertElementWithValueExists('VATAmountLineVATAmount',VATAmount);
        AssertElementWithValueExists('VATAmtLineVATIdentifier_VATCounterLCY',VATIdentifier);
        AssertElementWithValueExists('VALVATAmountLCY',VATAmount);
      END;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandler@121(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@71(Message@1000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerBlanketSalesOrder@51(VAR BlanketSalesOrder@1000 : TestRequestPage 210);
    BEGIN
      BlanketSalesOrder.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerSalesCrMemoNos@40(VAR SalesCrMemoNos@1000 : TestRequestPage 125);
    BEGIN
      SalesCrMemoNos.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerSalesInvoiceNos@23(VAR SalesInvoiceNos@1000 : TestRequestPage 124);
    BEGIN
      SalesInvoiceNos.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerReturnOrderConfirmation@17(VAR ReturnOrderConfirmation@1000 : TestRequestPage 6631);
    BEGIN
      ReturnOrderConfirmation.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerCustomerSummaryAging@69(VAR CustomerSummaryAging@1000 : TestRequestPage 105);
    BEGIN
      CustomerSummaryAging.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerOrderConfirmation@21(VAR OrderConfirmation@1000 : TestRequestPage 205);
    VAR
      SalesHeaderNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SalesHeaderNo);
      OrderConfirmation."Sales Header".SETFILTER("No.",SalesHeaderNo);
      OrderConfirmation.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerArchivedSalesOrder@45(VAR ArchivedSalesOrder@1000 : TestRequestPage 216);
    BEGIN
      ArchivedSalesOrder.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerSalesCreditMemo@43(VAR SalesCreditMemo@1000 : TestRequestPage 207);
    BEGIN
      SalesCreditMemo.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerPurchCreditMemo@63(VAR PurchaseCreditMemo@1000 : TestRequestPage 407);
    BEGIN
      PurchaseCreditMemo.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Reports] [Sales]
      Test and verify the different values of Reports.
       1. Test that the values of Bill-to Customer No.,Bill-to Name,Source Code in Sales Invoice Nos. Report
          must match in Corresponding Sales Invoice Header Table values.
       2. Test Warning Message of Sales Invoice Nos. Report.
       3. Test that the values of Bill-to Customer No.,Bill-to Name,Source Code in Sales Credit Memo Nos. Report
          must match in Corresponding Sales Credit Memo Header Table values.
       4. Test Warning Message of Sales Credit Memo Nos. Report.
       5. Verify Blanket Sales Order Report when no option is set.
       6. Verify VAT Amount on Blanket Sales Order Report when no option is set.
       7. Verify Dimension on Blanket Sales Order Report when Show Internal Information option is True.
       8. Test Sales Line and VAT Amount Line Values on Return Order Confirmation Report.
       9. Test Dimension on Return Order Confirmation Report when Show Internal Information option as True.
      10. Test Interaction Log Entry after running Return Order Confirmation Report with Log Interaction as True.
      11. Check Customer Summary Aging Report with Multiple Posted Sales Order and with partially Payment.
      12. Verify Inv. Discount Amount on Order Confiramation Report when Quantity equal to Quantity to Invoice.
      13. Verify Inv. Discount Amount on Order Confirmation Report when Quantity to Invoice Less than Quantity.
      14. Verify Inv. Discount Amount on Order Confirmation Report when Quantity to Invoice Less than Quantity.
      15. Verify VAT Amount on Archived Sales Order is correct.
      16. Test that "VAT Amount Specification" and  "VAT Amount Specification in (Local Currency)" in Sales - Credit Memo Report
          should be shown when Currency code is not empty and VAT Amount = 0.
      17. Test that "VAT Amount Specification" and  "VAT Amount Specification in (Local Currency)" in Purchase - Credit Memo Report
          should be shown when Currency code is not empty and VAT Amount = 0.
      18. Verify VAT Amount Specifiction on Sales Return Order Confirmation With Single Line.
      19. Verify VAT Amount Specifiction on Sales Return Order Confirmation With Multiple Lines.

      TFS_TS_ID = 236953
      Cover Test cases:
      ----------------------------------------------------------------
      Test Function Name                                       TFS ID
      ----------------------------------------------------------------
        SalesInvoiceNumberReport,SalesInvoiceNumberWarning       139324
        SalesCreditMemoNumberReport,SalesCreditMemoWarning       139325

      TFS_TS_ID = 242658
      Cover Test cases:
      -------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                           TFS ID
      -------------------------------------------------------------------------------------------------------------------
        BlanketSalesOrderWithoutOption,BlanketSalesOrderInternalInfo,BlanketSalesOrdeInternalInfo  127180, 127181, 127182

      TFS_TS_ID = 238091
      Cover Test cases:
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------
      SalesReturnOrderConfirmation, SalesReturnOrderWithInternal, SalesReturnOrderLogInteraction    122333

      TFS_TS_ID = 265015
      Cover Test cases:
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------
      CustomerSummaryAgingWithMultipleSalesOrder                                                    245830

      Bug_ID = 335872
      Cover Test cases:
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------
      SalesLineWithFullQtyToInvoice,SalesLineWithPartialQtyToInvoice
      SalesLineWithZeroQtyToInvoice

      Bug_ID = 56862
      Cover Test cases:
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------
      VerifyVATAmountOnArchiveSalesOrderReport

      Bug_ID = 356162
      Cover Test cases:
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------
      SaleCreditMemoReport,PurchaseCreditMemoReport

      Bug_ID = 102812
      Cover Test cases:
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------
      SalesReturnOrderConfirmationWithSingleVATAmountLine
      SalesReturnOrderConfirmationWithMultipleVATAmountLines
    }
    END.
  }
}

