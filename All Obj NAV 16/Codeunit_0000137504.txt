OBJECT Codeunit 137504 SCM Warehouse Unit Tests
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibraryUtility@1000 : Codeunit 131000;
      QtyMustNotBeChangedErr@1002 : TextConst 'ENU=%1 must not be changed';
      UpdateInterruptedErr@1003 : TextConst 'ENU=The update has been interrupted';
      LibraryInventory@1102 : Codeunit 132201;
      LibraryItemTracking@1013 : Codeunit 130502;
      LibraryPurchase@1012 : Codeunit 130512;
      LibraryWarehouse@1103 : Codeunit 132204;
      LibraryVariableStorage@1006 : Codeunit 131004;
      LibraryERMCountryData@1100 : Codeunit 131305;
      WhseShptCreatedMsg@1004 : TextConst 'ENU=Warehouse Shipment Header has been created.';
      WarehouseReceiptHeaderCreatedMsg@1007 : TextConst 'ENU=1 Warehouse Receipt Header has been created.';
      TrackingAmtNotMachPickErr@1008 : TextConst 'ENU="Registered Warehouse Pick amount do not match Item Tracking Line amount. "';
      LibraryRandom@1009 : Codeunit 130440;
      TransferLineNotExistErr@1010 : TextConst 'ENU=Transfer Line doesn''t exist.';
      TransferLineShouldnotExistErr@1011 : TextConst 'ENU=Transfer Line shouldn''t exist.';
      CannotCreateBinWithoutLocationErr@1029 : TextConst 'ENU=Location Code must have a value';

    [Test]
    PROCEDURE GetBinContentFetchesContentFromDedicatedBin@1();
    VAR
      Bin@1005 : Record 7354;
      Item@1006 : Record 27;
      BinContent@1002 : Record 7302;
      WhseEntry@1007 : Record 7312;
      WhseWorksheetLine@1001 : Record 7326;
      WhseInternalPutAwayHeaderDummy@1003 : Record 7331;
      WhseWorksheetTemplate@1008 : Record 7328;
      WhseGetBinContent@1000 : Report 7391;
      LocationCode@1004 : Code[10];
    BEGIN
      // VSTF 333341
      Initialize;

      // SETUP: Create bin content on dedicated bin
      LocationCode := MockLocationCode;

      Bin.INIT;
      Bin."Location Code" := LocationCode;
      Bin.Code := LibraryUtility.GenerateGUID;
      Bin.INSERT;

      MockItemWithBaseUOM(Item);

      BinContent."Location Code" := Bin."Location Code";
      BinContent."Bin Code" := Bin.Code;
      BinContent."Item No." := Item."No.";
      BinContent."Unit of Measure Code" := Item."Base Unit of Measure";
      BinContent.Dedicated := TRUE;
      BinContent.INSERT;

      WhseEntry.INIT;
      WhseEntry."Location Code" := BinContent."Location Code";
      WhseEntry."Bin Code" := BinContent."Bin Code";
      WhseEntry."Item No." := BinContent."Item No.";
      WhseEntry."Unit of Measure Code" := BinContent."Unit of Measure Code";
      WhseEntry."Qty. (Base)" := 10;
      WhseEntry.INSERT;

      // make a warehouse worksheet line- for use in the calling of the report
      WhseWorksheetTemplate.SETRANGE(Type,WhseWorksheetTemplate.Type::Movement);
      WhseWorksheetTemplate.FINDFIRST;
      WhseWorksheetLine."Worksheet Template Name" := WhseWorksheetTemplate.Name;

      // EXERCISE: Invoke get bin content on movement worksheet
      BinContent.SETRANGE("Item No.",BinContent."Item No."); // filter on the bin content created only
      WhseGetBinContent.SETTABLEVIEW(BinContent);
      COMMIT;
      WhseGetBinContent.USEREQUESTPAGE(FALSE);
      WhseInternalPutAwayHeaderDummy.INIT;
      WhseGetBinContent.InitializeReport(WhseWorksheetLine,WhseInternalPutAwayHeaderDummy,0);
      WhseGetBinContent.RUN;

      // VERIFY: Make sure the warehouse worksheet line appears with the quantity on the bin content
      WhseWorksheetLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseWorksheetLine.SETRANGE(Quantity,WhseEntry."Qty. (Base)");
      Assert.IsFalse(WhseWorksheetLine.ISEMPTY,'There should be a line created from dedicated bin quantity.');
    END;

    [Test]
    PROCEDURE ItemTrackingLineHasCorrectShipmentDateWhenRegisteringPickFromWhseShipment@7();
    BEGIN
      ItemTrackingLineHasCorrectShipmentDateWhenRegisteringWhseActivity(TRUE,FALSE,0); // 0 is for Sales
    END;

    [Test]
    PROCEDURE ItemTrackingLineHasCorrectShipmentDateWhenRegisteringPickFromAssembly@26();
    BEGIN
      ItemTrackingLineHasCorrectShipmentDateWhenRegisteringWhseActivity(TRUE,FALSE,1); // 1 is for Assembly
    END;

    [Test]
    PROCEDURE ItemTrackingLineHasCorrectShipmentDateWhenRegisteringPickFromProduction@29();
    BEGIN
      ItemTrackingLineHasCorrectShipmentDateWhenRegisteringWhseActivity(TRUE,FALSE,2); // 2 is for Production
    END;

    [Test]
    PROCEDURE ItemTrackingLineHasCorrectShipmentDateWhenRegisteringInvtMvmtFromAssembly@30();
    BEGIN
      ItemTrackingLineHasCorrectShipmentDateWhenRegisteringWhseActivity(FALSE,FALSE,1); // 1 is for Assembly
    END;

    [Test]
    PROCEDURE ItemTrackingLineHasCorrectShipmentDateWhenRegisteringInvtMvmtFromProduction@31();
    BEGIN
      ItemTrackingLineHasCorrectShipmentDateWhenRegisteringWhseActivity(FALSE,FALSE,2); // 2 is for Production
    END;

    [Test]
    PROCEDURE ItemTrackingLineHasCorrectShipmentDateWhenRegisteringInvtPickFromSales@32();
    BEGIN
      ItemTrackingLineHasCorrectShipmentDateWhenRegisteringWhseActivity(FALSE,TRUE,0); // 0 is for Sales
    END;

    [Test]
    PROCEDURE ItemTrackingLineHasCorrectShipmentDateWhenRegisteringInvtPickFromProduction@33();
    BEGIN
      ItemTrackingLineHasCorrectShipmentDateWhenRegisteringWhseActivity(FALSE,TRUE,2); // 2 is for Production
    END;

    LOCAL PROCEDURE ItemTrackingLineHasCorrectShipmentDateWhenRegisteringWhseActivity@2(DPPLocation@1001 : Boolean;InvtPick@1004 : Boolean;DemandType@1003 : 'Sales,Assembly,Production');
    VAR
      ItemLedgerEntry@1002 : Record 32;
      WarehouseActivityHeader@1009 : Record 5766;
      WarehouseActivityLine@1010 : Record 5767;
      ReservationEntry@1014 : Record 337;
      TakeBinCode@1007 : Code[10];
      RefDate@1000 : Date;
    BEGIN
      // VSTF 332220
      Initialize;

      // SETUP: Create entries for inventory, Create pick from warehouse shipment
      TakeBinCode := LibraryUtility.GenerateGUID;
      RefDate := WORKDATE - 4;

      CreateInventory(ItemLedgerEntry,TakeBinCode,DPPLocation);

      CreatePick(DemandType,DPPLocation,InvtPick,WarehouseActivityHeader,ItemLedgerEntry,RefDate,TakeBinCode);

      // EXERCISE: Register pick
      WarehouseActivityLine."Activity Type" := WarehouseActivityHeader.Type;
      WarehouseActivityLine."No." := WarehouseActivityHeader."No.";
      CODEUNIT.RUN(CODEUNIT::"Whse.-Activity-Register",WarehouseActivityLine);

      // VERIFY: Reservation Entry has the same Shipment Date as WarehouseShipmentLine
      ReservationEntry.SETRANGE("Item No.",ItemLedgerEntry."Item No.");
      ReservationEntry.FINDLAST;
      Assert.AreEqual(RefDate,ReservationEntry."Shipment Date",
        'Reservation Entry has the same Shipment Date as WarehouseShipmentLine');
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesHandler)]
    PROCEDURE ItemTrackingLineWithSpecificUOMWhenRegisteringWhseActivityFromTransferOrder@124();
    VAR
      ItemUOM@1001 : Record 5404;
      TransHeader@1006 : Record 5740;
      WhseShptHeader@1000 : Record 7320;
      WhseActivityHdr@1007 : Record 5766;
      LocationCode@1004 : Code[10];
      BinCode@1005 : ARRAY [2] OF Code[20];
      LotNo@1002 : ARRAY [3] OF Code[20];
    BEGIN
      Initialize;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.CreateVATData;

      LibraryVariableStorage.Enqueue(WarehouseReceiptHeaderCreatedMsg);
      VSTF334573CreateInventory(ItemUOM,LocationCode,LotNo,BinCode);

      LibraryVariableStorage.Enqueue(WhseShptCreatedMsg);
      VSTF334573CreateReleaseTransOrder(TransHeader,LocationCode,ItemUOM,LotNo);

      LibraryWarehouse.CreateWhseShipmentFromTO(TransHeader);

      GetWhseShptFromTransfer(WhseShptHeader,TransHeader."No.");

      // Post pick and shipment partially
      VSTF334573CreateRegisterPickWithQtyToHandle(
        WhseActivityHdr,WhseShptHeader,TransHeader."Transfer-from Code",LotNo,BinCode);

      Assert.AreEqual(
        GetWhseRegisteredPickAmount(ItemUOM."Item No."),
        -GetItemTrackingAmount(ItemUOM."Item No."),
        TrackingAmtNotMachPickErr);
    END;

    [Test]
    PROCEDURE TransferLineWithItemToPlanAndOutstandingQty@36();
    VAR
      TransferLine@1000 : Record 5741;
      Item@1001 : Record 27;
    BEGIN
      // [FEATURE] [Item Availability]
      // [SCENARIO 361067.1] Shipping/Receipt Transfer Lines are shown in Availability By Event in case of Outstanding Qty. <> 0
      Initialize;

      // [GIVEN] Item
      MockItem(Item);

      // [GIVEN] Transfer Order with Outstanding Qty <> 0
      MockTransferLine(Item."No.",LibraryRandom.RandDec(100,2));

      // [WHEN] Run Item's Availability By Event
      // [THEN] Transfer Shipment line is shown as Item To Plan Demand
      TransferLine.RESET;
      Assert.IsTrue(TransferLine.FindLinesWithItemToPlan(Item,FALSE,FALSE),TransferLineNotExistErr); // ship

      // [THEN] Tansfer Receipt Line is shown as Item To Plan Supply
      Assert.IsTrue(TransferLine.FindLinesWithItemToPlan(Item,TRUE,FALSE),TransferLineNotExistErr); // receipt
    END;

    [Test]
    PROCEDURE TransferLineWithItemToPlanAndShippedQty@89();
    VAR
      TransferLine@1000 : Record 5741;
      Item@1001 : Record 27;
    BEGIN
      // [FEATURE] [Item Availability]
      // [SCENARIO 361067.2] Receipt Transfer Line is shown in Availability By Event in case of Outstanding Qty. = 0
      Initialize;

      // [GIVEN] Item
      MockItem(Item);

      // [GIVEN] Transfer Order with Outstanding Qty = 0
      MockTransferLine(Item."No.",0);

      // [WHEN] Run Item's Availability By Event
      // [THEN] Transfer Shipment line is not shown as Item To Plan Demand
      TransferLine.RESET;
      Assert.IsFalse(TransferLine.FindLinesWithItemToPlan(Item,FALSE,FALSE),TransferLineShouldnotExistErr); // ship

      // [THEN] Tansfer Receipt Line is shown as Item To Plan Supply
      Assert.IsTrue(TransferLine.FindLinesWithItemToPlan(Item,TRUE,FALSE),TransferLineNotExistErr); // receipt
    END;

    [Test]
    PROCEDURE CheckIfFromServiceLine2ShptLin_BlankQtyToConsume@47();
    VAR
      ServiceLine@1001 : Record 5902;
      WhseCreateSourceDocument@1000 : Codeunit 5750;
    BEGIN
      // [FEATURE] [Service]
      // [SCENARIO 380057] COD 5750 "Whse.-Create Source Document".CheckIfFromServiceLine2ShptLin() returns TRUE in case of "Qty. to Consume" = 0
      Initialize;

      MockServiceLine(ServiceLine);
      Assert.IsTrue(
        WhseCreateSourceDocument.CheckIfFromServiceLine2ShptLin(ServiceLine),
        'Service Line to Shipment Line should be possible');
    END;

    [Test]
    PROCEDURE CheckIfFromServiceLine2ShptLin_QtyToConsume@122();
    VAR
      ServiceLine@1001 : Record 5902;
      WhseCreateSourceDocument@1000 : Codeunit 5750;
    BEGIN
      // [FEATURE] [Service]
      // [SCENARIO 380057] COD 5750 "Whse.-Create Source Document".CheckIfFromServiceLine2ShptLin() returns FALSE in case of "Qty. to Consume" <> 0
      Initialize;

      MockServiceLine(ServiceLine);
      ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity / 2);
      Assert.IsFalse(
        WhseCreateSourceDocument.CheckIfFromServiceLine2ShptLin(ServiceLine),
        'Service Line to Shipment Line should not be possible');
    END;

    LOCAL PROCEDURE Initialize@123();
    BEGIN
      LibraryVariableStorage.Clear;
    END;

    LOCAL PROCEDURE CreateItemWithLotTracking@8() : Code[20];
    VAR
      Item@1000 : Record 27;
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      CLEAR(Item);
      MockItemWithBaseUOM(Item);
      ItemTrackingCode.INIT;
      ItemTrackingCode.Code := LibraryUtility.GenerateGUID;
      ItemTrackingCode."Lot Specific Tracking" := TRUE;
      ItemTrackingCode."Lot Warehouse Tracking" := TRUE;
      ItemTrackingCode.INSERT;
      Item."Item Tracking Code" := ItemTrackingCode.Code;
      Item.MODIFY;
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateInventory@3(VAR ItemLedgerEntry@1002 : Record 32;BinCodeToStore@1006 : Code[10];DPPLocation@1005 : Boolean);
    VAR
      WarehouseEntry2@1001 : Record 7312;
      WarehouseEntry@1000 : Record 7312;
      ItemNo@1003 : Code[20];
      LocationCode@1004 : Code[10];
    BEGIN
      LocationCode := MockCustomLocationCode(NOT DPPLocation,FALSE,FALSE,DPPLocation);
      ItemNo := CreateItemWithLotTracking;

      MockILE(ItemLedgerEntry,ItemNo,LocationCode,10);
      ItemLedgerEntry."Lot No." := LibraryUtility.GenerateGUID;
      ItemLedgerEntry.MODIFY;

      WarehouseEntry2.FINDLAST;
      WarehouseEntry.INIT;
      WarehouseEntry."Entry No." := WarehouseEntry2."Entry No." + 1;
      WarehouseEntry."Item No." := ItemLedgerEntry."Item No.";
      WarehouseEntry."Location Code" := ItemLedgerEntry."Location Code";
      WarehouseEntry."Bin Code" := BinCodeToStore;
      WarehouseEntry."Qty. (Base)" := ItemLedgerEntry.Quantity;
      WarehouseEntry."Lot No." := ItemLedgerEntry."Lot No.";
      WarehouseEntry.INSERT;
    END;

    LOCAL PROCEDURE CreatePick@14(DemandType@1008 : 'Sales,Assembly,Production';DPPLocation@1009 : Boolean;InvtPick@1023 : Boolean;VAR WarehouseActivityHeader@1004 : Record 5766;VAR ItemLedgerEntry@1006 : Record 32;RefDate@1005 : Date;TakeBinCode@1007 : Code[10]);
    VAR
      SalesLine@1002 : Record 37;
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1000 : Record 7321;
      AssemblyHeader@1018 : Record 900;
      AssemblyLine@1013 : Record 901;
      ProdOrder@1022 : Record 5405;
      ProdOrderComponent@1021 : Record 5407;
      WarehouseActivityLine@1003 : Record 5767;
      PlaceBinCode@1010 : Code[10];
      WhseDocType@1012 : Option;
      WhseDocNo@1011 : Code[20];
      SourceType@1017 : Integer;
      SourceSubtype@1016 : Option;
      SourceNo@1015 : Code[20];
      SourceLineNo@1014 : Integer;
      SourceSubLineNo@1019 : Integer;
      PlaceActionType@1024 : Option;
    BEGIN
      PlaceBinCode := LibraryUtility.GenerateGUID;
      CASE DemandType OF
        DemandType::Sales:
          BEGIN
            SalesLine."Document Type" := SalesLine."Document Type"::Order;
            SalesLine."Document No." := LibraryUtility.GenerateGUID;
            SalesLine.Type := SalesLine.Type::Item;
            SalesLine."No." := ItemLedgerEntry."Item No.";
            SalesLine."Location Code" := ItemLedgerEntry."Location Code";
            SalesLine."Quantity (Base)" := ItemLedgerEntry.Quantity;
            SalesLine."Outstanding Qty. (Base)" := SalesLine."Quantity (Base)";
            SalesLine."Shipment Date" := RefDate;

            WarehouseShipmentHeader.INIT;
            WarehouseShipmentHeader."No." := LibraryUtility.GenerateGUID;
            WarehouseShipmentHeader.INSERT;
            WarehouseShipmentLine.INIT;
            WarehouseShipmentLine."No." := WarehouseShipmentHeader."No.";
            WarehouseShipmentLine."Item No." := SalesLine."No.";
            WarehouseShipmentLine."Qty. (Base)" := SalesLine."Quantity (Base)";
            WarehouseShipmentLine."Location Code" := SalesLine."Location Code";
            WarehouseShipmentLine."Bin Code" := PlaceBinCode;
            WarehouseShipmentLine."Source Type" := DATABASE::"Sales Line";
            WarehouseShipmentLine."Source Subtype" := SalesLine."Document Type";
            WarehouseShipmentLine."Source No." := SalesLine."Document No.";
            WarehouseShipmentLine."Source Line No." := SalesLine."Line No.";
            WarehouseShipmentLine."Shipment Date" := SalesLine."Shipment Date";
            WarehouseShipmentLine."Due Date" := SalesLine."Shipment Date" + 2; // different from the Shipment Date
            WarehouseShipmentLine.INSERT;

            WhseDocType := WarehouseActivityLine."Whse. Document Type"::Shipment;
            WhseDocNo := WarehouseShipmentLine."No.";
            SourceType := DATABASE::"Sales Line";
            SourceSubtype := WarehouseShipmentLine."Source Subtype";
            SourceNo := WarehouseShipmentLine."Source No.";
            SourceLineNo := WarehouseShipmentLine."Source Line No.";
            SourceSubLineNo := 0;
          END;
        DemandType::Assembly:
          BEGIN
            AssemblyHeader."Document Type" := AssemblyHeader."Document Type"::Order;
            AssemblyHeader."No." := LibraryUtility.GenerateGUID;
            AssemblyHeader.INSERT;
            AssemblyLine."Document Type" := AssemblyHeader."Document Type";
            AssemblyLine."Document No." := AssemblyHeader."No.";
            AssemblyLine.Type := AssemblyLine.Type::Item;
            AssemblyLine."No." := ItemLedgerEntry."Item No.";
            AssemblyLine."Location Code" := ItemLedgerEntry."Location Code";
            AssemblyLine."Bin Code" := PlaceBinCode;
            AssemblyLine."Quantity (Base)" := ItemLedgerEntry.Quantity;
            AssemblyLine."Remaining Quantity (Base)" := AssemblyLine."Quantity (Base)";
            AssemblyLine."Due Date" := RefDate;
            AssemblyLine.INSERT;

            WhseDocType := WarehouseActivityLine."Whse. Document Type"::Assembly;
            WhseDocNo := AssemblyLine."Document No.";
            SourceType := DATABASE::"Assembly Line";
            SourceSubtype := AssemblyLine."Document Type";
            SourceNo := AssemblyLine."Document No.";
            SourceLineNo := AssemblyLine."Line No.";
            SourceSubLineNo := 0;
          END;
        DemandType::Production:
          BEGIN
            ProdOrder.Status := ProdOrder.Status::Released;
            ProdOrder."No." := LibraryUtility.GenerateGUID;
            ProdOrder.INSERT;
            ProdOrderComponent.INIT;
            ProdOrderComponent.Status := ProdOrder.Status;
            ProdOrderComponent."Prod. Order No." := ProdOrder."No.";
            ProdOrderComponent."Item No." := ItemLedgerEntry."Item No.";
            ProdOrderComponent."Location Code" := ItemLedgerEntry."Location Code";
            ProdOrderComponent."Bin Code" := PlaceBinCode;
            ProdOrderComponent."Quantity (Base)" := ItemLedgerEntry.Quantity;
            ProdOrderComponent."Expected Qty. (Base)" := ProdOrderComponent."Quantity (Base)";
            ProdOrderComponent."Remaining Qty. (Base)" := AssemblyLine."Quantity (Base)";
            ProdOrderComponent."Due Date" := RefDate;
            ProdOrderComponent.INSERT;

            WhseDocType := WarehouseActivityLine."Whse. Document Type"::Production;
            WhseDocNo := ProdOrderComponent."Prod. Order No.";
            SourceType := DATABASE::"Prod. Order Component";
            SourceSubtype := ProdOrderComponent.Status;
            SourceNo := ProdOrderComponent."Prod. Order No.";
            SourceLineNo := ProdOrderComponent."Line No.";
            SourceSubLineNo := ProdOrderComponent."Prod. Order Line No.";
          END;
      END;

      IF DPPLocation THEN
        WarehouseActivityHeader.Type := WarehouseActivityHeader.Type::Pick
      ELSE BEGIN
        IF InvtPick THEN
          WarehouseActivityHeader.Type := WarehouseActivityHeader.Type::"Invt. Pick"
        ELSE
          WarehouseActivityHeader.Type := WarehouseActivityHeader.Type::"Invt. Movement";
      END;
      WarehouseActivityHeader."No." := LibraryUtility.GenerateGUID;
      WarehouseActivityHeader."Registering No. Series" := LibraryUtility.GetGlobalNoSeriesCode;
      WarehouseActivityHeader.INSERT;
      IF WarehouseActivityHeader.Type <> WarehouseActivityHeader.Type::"Invt. Pick" THEN
        CreateWarehouseActivityLine(WarehouseActivityHeader,WarehouseActivityLine."Action Type"::Take,
          ItemLedgerEntry."Location Code",TakeBinCode,ItemLedgerEntry."Item No.",ItemLedgerEntry.Quantity,ItemLedgerEntry."Lot No.",
          WhseDocType,WhseDocNo,SourceType,SourceSubtype,SourceNo,SourceLineNo,SourceSubLineNo);

      IF WarehouseActivityHeader.Type = WarehouseActivityHeader.Type::"Invt. Pick" THEN
        PlaceActionType := WarehouseActivityLine."Action Type"::" "
      ELSE
        PlaceActionType := WarehouseActivityLine."Action Type"::Place;
      CreateWarehouseActivityLine(WarehouseActivityHeader,PlaceActionType,
        ItemLedgerEntry."Location Code",PlaceBinCode,ItemLedgerEntry."Item No.",ItemLedgerEntry.Quantity,ItemLedgerEntry."Lot No.",
        WhseDocType,WhseDocNo,SourceType,SourceSubtype,SourceNo,SourceLineNo,SourceSubLineNo);
    END;

    LOCAL PROCEDURE CreateWarehouseActivityLine@5(VAR WarehouseActivityHeader@1000 : Record 5766;ActionType@1002 : Option;LocationCode@1007 : Code[10];BinCode@1006 : Code[10];ItemNo@1003 : Code[20];QuantityBase@1004 : Decimal;LotNo@1005 : Code[20];WhseDocType@1011 : Option;WhseDocNo@1012 : Code[20];SourceType@1019 : Integer;SourceSubtype@1016 : Option;SourceNo@1017 : Code[20];SourceLineNo@1018 : Integer;SourceSubLineNo@1009 : Integer);
    VAR
      WarehouseActivityLine@1001 : Record 5767;
      WarehouseActivityLine2@1008 : Record 5767;
    BEGIN
      CASE WarehouseActivityHeader.Type OF
        WarehouseActivityHeader.Type::"Put-away":
          WarehouseActivityLine."Activity Type" := WarehouseActivityLine."Activity Type"::"Put-away";
        WarehouseActivityHeader.Type::Pick:
          WarehouseActivityLine."Activity Type" := WarehouseActivityLine."Activity Type"::Pick;
        WarehouseActivityHeader.Type::Movement:
          WarehouseActivityLine."Activity Type" := WarehouseActivityLine."Activity Type"::Movement;
        WarehouseActivityHeader.Type::"Invt. Put-away":
          WarehouseActivityLine."Activity Type" := WarehouseActivityLine."Activity Type"::"Invt. Put-away";
        WarehouseActivityHeader.Type::"Invt. Pick":
          WarehouseActivityLine."Activity Type" := WarehouseActivityLine."Activity Type"::"Invt. Pick";
        WarehouseActivityHeader.Type::"Invt. Movement":
          WarehouseActivityLine."Activity Type" := WarehouseActivityLine."Activity Type"::"Invt. Movement";
      END;
      WarehouseActivityLine."No." := WarehouseActivityHeader."No.";
      WarehouseActivityLine2.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type");
      WarehouseActivityLine2.SETRANGE("No.",WarehouseActivityLine."No.");
      IF WarehouseActivityLine2.FINDLAST THEN
        WarehouseActivityLine."Line No." := WarehouseActivityLine2."Line No." + 10000
      ELSE
        WarehouseActivityLine."Line No." := 10000;
      WarehouseActivityLine."Action Type" := ActionType;
      WarehouseActivityLine."Location Code" := LocationCode;
      WarehouseActivityLine."Bin Code" := BinCode;
      WarehouseActivityLine."Item No." := ItemNo;
      WarehouseActivityLine."Qty. (Base)" := QuantityBase;
      WarehouseActivityLine."Qty. to Handle (Base)" := WarehouseActivityLine."Qty. (Base)";
      WarehouseActivityLine."Lot No." := LotNo;
      WarehouseActivityLine."Whse. Document Type" := WhseDocType;
      WarehouseActivityLine."Whse. Document No." := WhseDocNo;
      WarehouseActivityLine."Source Type" := SourceType;
      WarehouseActivityLine."Source Subtype" := SourceSubtype;
      WarehouseActivityLine."Source No." := SourceNo;
      WarehouseActivityLine."Source Line No." := SourceLineNo;
      WarehouseActivityLine."Source Subline No." := SourceSubLineNo;
      WarehouseActivityLine.INSERT;
    END;

    [Test]
    PROCEDURE VSTF335595NoErrorOnRoundingShouldOccurWhenCreatingWarehouseShipment@4();
    VAR
      ItemUnitOfMeasureBOX@1004 : Record 5404;
      SalesHeader@1007 : Record 36;
      SalesLine@1002 : Record 37;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseShipmentLine@1008 : Record 7321;
      WhseCreateSourceDocument@1005 : Codeunit 5750;
      ItemNo@1000 : Code[20];
      LocationCode@1001 : Code[10];
      Qty@1009 : Decimal;
      QtyBase@1010 : Decimal;
    BEGIN
      // Refer VSTF 335595
      Initialize;

      // SETUP : Create sales
      LocationCode := MockCustomLocationCode(FALSE,TRUE,FALSE,FALSE);
      ItemNo := MockItemNoWithBaseUOM;
      VSTF335595CreateUnitOfMeasure(ItemUnitOfMeasureBOX,ItemNo,LibraryUtility.GenerateGUID,144);

      Qty := 0.13889;
      QtyBase := 20;
      SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
      SalesHeader."No." := LibraryUtility.GenerateGUID;
      SalesHeader.INSERT;
      SalesLine."Document Type" := SalesHeader."Document Type";
      SalesLine."Document No." := SalesHeader."No.";
      SalesLine.Type := SalesLine.Type::Item;
      SalesLine."No." := ItemNo;
      SalesLine."Unit of Measure Code" := ItemUnitOfMeasureBOX.Code;
      SalesLine."Qty. per Unit of Measure" := ItemUnitOfMeasureBOX."Qty. per Unit of Measure";
      SalesLine.Quantity := Qty;
      SalesLine."Outstanding Quantity" := SalesLine.Quantity;
      SalesLine."Quantity (Base)" := QtyBase;
      SalesLine."Outstanding Qty. (Base)" := SalesLine."Quantity (Base)";
      SalesLine."Location Code" := LocationCode;
      SalesLine.INSERT;

      WarehouseShipmentHeader.INIT;
      WarehouseShipmentHeader."No." := LibraryUtility.GenerateGUID;
      WarehouseShipmentHeader."Location Code" := LocationCode;
      WarehouseShipmentHeader.INSERT;

      // EXERCISE : Create shipment from sales line
      WhseCreateSourceDocument.FromSalesLine2ShptLine(WarehouseShipmentHeader,SalesLine);

      // VERIFY : No rounding errors on Quantity
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
      Assert.AreEqual(SalesLine.Quantity,WarehouseShipmentLine.Quantity,
        'Quantity must be same as that of sales line.');
      Assert.AreEqual(SalesLine."Outstanding Quantity",WarehouseShipmentLine."Qty. Outstanding",
        'Outstanding Quantity must be same as that of sales line.');
      Assert.AreEqual(SalesLine."Quantity (Base)",WarehouseShipmentLine."Qty. (Base)",
        'Quantity Base must be same as that of sales line.');
      Assert.AreEqual(SalesLine."Outstanding Qty. (Base)",WarehouseShipmentLine."Qty. Outstanding (Base)",
        'Outstanding Quantity Base must be same as that of sales line.');
    END;

    LOCAL PROCEDURE VSTF335595CreateUnitOfMeasure@12(VAR ItemUnitOfMeasure@1000 : Record 5404;ItemNo@1001 : Code[20];UOMCode@1002 : Code[10];QtyPerUOM@1003 : Decimal);
    BEGIN
      ItemUnitOfMeasure."Item No." := ItemNo;
      ItemUnitOfMeasure.Code := UOMCode;
      ItemUnitOfMeasure."Qty. per Unit of Measure" := QtyPerUOM;
      ItemUnitOfMeasure.INSERT;
    END;

    [Test]
    PROCEDURE RegiserablePickCreatedWithoutRoundingErrors@90();
    VAR
      ItemUnitOfMeasureForSales@1002 : Record 5404;
      WarehouseShipmentHeader@1005 : Record 7320;
      WarehouseShipmentLine@1006 : Record 7321;
      WarehouseActivityLine@1008 : Record 5767;
      WhseShipmentCreatePick@1007 : Report 7318;
      ItemNo@1000 : Code[20];
      LocationCode@1001 : Code[10];
      LotNo@1003 : Code[10];
      Qty@1004 : Decimal;
    BEGIN
      // VSTF 330787
      // SETUP : Create inventory with entries designed to induce the rounding errors
      Initialize;
      VSTF330787CreateInventory(ItemNo,LocationCode,TRUE,ItemUnitOfMeasureForSales,LotNo);

      // SETUP : Create sales, and reservation entries against inventory.
      Qty := 10;
      VSTF330787CreateSalesAndReservationEntriesAgainstInventory(WarehouseShipmentHeader,WarehouseShipmentLine,
        ItemNo,LocationCode,10,ItemUnitOfMeasureForSales,LotNo);

      // EXERCISE: Create pick or inventory pick
      COMMIT;
      WarehouseShipmentLine.SETRANGE("Item No.",WarehouseShipmentLine."Item No.");
      WhseShipmentCreatePick.SetWhseShipmentLine(WarehouseShipmentLine,WarehouseShipmentHeader);
      WhseShipmentCreatePick.SetHideValidationDialog(TRUE);
      WhseShipmentCreatePick.USEREQUESTPAGE(FALSE);
      WhseShipmentCreatePick.RUNMODAL;

      // VERIFY: Qty on pick should be same as demand
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.SETRANGE("Item No.",ItemNo);
      WarehouseActivityLine.FINDSET;
      REPEAT
        Assert.AreEqual(Qty,WarehouseActivityLine.Quantity,'Same quantity in sales and pick.');
        Assert.AreEqual(WarehouseShipmentLine."Unit of Measure Code",
          WarehouseActivityLine."Unit of Measure Code",'Same UOM in sales and pick.');
        WarehouseActivityLine."Qty. to Handle" := WarehouseActivityLine.Quantity;
        WarehouseActivityLine."Qty. to Handle (Base)" := WarehouseActivityLine."Qty. (Base)";
      UNTIL WarehouseActivityLine.NEXT = 0;

      // EXERCISE: Register pick
      CODEUNIT.RUN(CODEUNIT::"Whse.-Activity-Register",WarehouseActivityLine);

      // VERIFY: Pick vanishes
      Assert.IsFalse(WarehouseActivityLine.FIND('-'),'Warehouse pick should have been registered.');
    END;

    LOCAL PROCEDURE VSTF330787CreateInventory@9(VAR ItemNo@1001 : Code[20];VAR LocationCode@1002 : Code[10];DPPLocation@1005 : Boolean;VAR ItemUnitOfMeasureCAS@1006 : Record 5404;VAR LotNo@1008 : Code[10]);
    VAR
      ItemUnitOfMeasureBAG@1007 : Record 5404;
      BinCode@1004 : Code[20];
    BEGIN
      LocationCode := VSTF330787CreateLocation(DPPLocation);
      BinCode := VSTF330787CreateBin(LocationCode);

      ItemNo := CreateItemWithLotTracking;
      VSTF330787CreateItemUnitOfMeasure(ItemUnitOfMeasureBAG,ItemNo,0.45);
      VSTF330787CreateItemUnitOfMeasure(ItemUnitOfMeasureCAS,ItemNo,10.8);

      LotNo := LibraryUtility.GenerateGUID;
      VSTF330787CreateEntry(ItemNo,LocationCode,BinCode,4,LotNo,ItemUnitOfMeasureBAG);
      VSTF330787CreateEntry(ItemNo,LocationCode,BinCode,4,LotNo,ItemUnitOfMeasureBAG);
      VSTF330787CreateEntry(ItemNo,LocationCode,BinCode,10,LotNo,ItemUnitOfMeasureCAS);
    END;

    LOCAL PROCEDURE VSTF334573CreateInventory@50(VAR ItemUOM@1000 : Record 5404;VAR LocationCode@1001 : Code[10];VAR LotNo@1002 : ARRAY [3] OF Code[20];VAR BinCode@1003 : ARRAY [2] OF Code[20]);
    VAR
      PurchaseHeader@1004 : Record 38;
      UnitOfMeasure@1008 : Record 204;
      WarehouseEmployee@1009 : Record 7301;
      ItemNo@1011 : Code[20];
    BEGIN
      LocationCode := CreateWhiteLikeLocationWithPutPickFlags;

      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationCode,FALSE);

      BinCode[1] := CreateBinWithPutPickType(LocationCode);
      BinCode[2] := CreateBinWithPutPickType(LocationCode);

      ItemNo := CreateItemWithTracking;

      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUOM,ItemNo,UnitOfMeasure.Code,8.4);

      VSTF334573CreateAndReleasePurchaseOrder(PurchaseHeader,LocationCode,ItemNo,UnitOfMeasure,LotNo);

      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(PurchaseHeader."No.");

      VSTF334573CreateAndRegisterPutAway(PurchaseHeader."No.",BinCode);
    END;

    LOCAL PROCEDURE VSTF334573CreateAndReleasePurchaseOrder@78(VAR PurchaseHeader@1001 : Record 38;LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];UnitOfMeasure@1004 : Record 204;VAR LotNo@1005 : ARRAY [3] OF Code[20]);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      PurchaseHeader.VALIDATE("Location Code",LocationCode);
      PurchaseHeader.MODIFY;

      CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,20,LocationCode,UnitOfMeasure);
      LotNo[1] := GetItemTrackingLotNo(PurchaseLine);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,15,LocationCode,UnitOfMeasure);
      LotNo[2] := GetItemTrackingLotNo(PurchaseLine);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,15,LocationCode,UnitOfMeasure);
      LotNo[3] := GetItemTrackingLotNo(PurchaseLine);

      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE VSTF334573CreateAndRegisterPutAway@81(PurchaseHeaderNo@1000 : Code[20];BinCode@1001 : ARRAY [2] OF Code[20]);
    BEGIN
      SplitPutAwayLineAndUpdateBin(PurchaseHeaderNo,10,BinCode,20);
      SplitPutAwayLineAndUpdateBin(PurchaseHeaderNo,7,BinCode,15);
      SplitPutAwayLineAndUpdateBin(PurchaseHeaderNo,8,BinCode,15);

      RegisterPutAway(PurchaseHeaderNo);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@59(PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;ItemNo@1002 : Code[20];Qty@1003 : Decimal;LocationCode@1004 : Code[10];UnitOfMeasure@1006 : Record 204);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Qty);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.VALIDATE("Unit of Measure Code",UnitOfMeasure.Code);
      PurchaseLine.MODIFY(TRUE);

      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE GetItemTrackingLotNo@72(PurchaseLine@1000 : Record 39) : Code[20];
    VAR
      ReservationEntry@1001 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Source ID",PurchaseLine."Document No.");
        SETRANGE("Source Ref. No.",PurchaseLine."Line No.");
        SETRANGE("Item No.",PurchaseLine."No.");
        FINDFIRST;
        EXIT("Lot No.");
      END;
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@141(SourceNo@1001 : Code[20]);
    VAR
      WarehouseReceiptHeader@1000 : Record 7316;
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",WarehouseReceiptLine."Source Document"::"Purchase Order");
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE SplitPutAwayLineAndUpdateBin@145(SourceNo@1001 : Code[20];QtyToHandle@1002 : Decimal;BinCode@1003 : ARRAY [2] OF Code[20];Qty@1004 : Decimal);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        FindFirstWhseActivityLine(WarehouseActivityLine,SourceNo,Qty);

        VALIDATE("Qty. to Handle",QtyToHandle);
        VALIDATE("Bin Code",BinCode[1]);
        MODIFY(TRUE);

        SplitLine(WarehouseActivityLine);

        // only one empty exists after split
        SETRANGE(Quantity);
        SETRANGE("Bin Code",'');
        FINDFIRST;

        VALIDATE("Bin Code",BinCode[2]);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE RegisterPutAway@49(SourceNo@1001 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
      WarehouseActivityHeader@1002 : Record 5766;
    BEGIN
      FindFirstWhseActivityLine(WarehouseActivityLine,SourceNo,0);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE FindFirstWhseActivityLine@101(VAR WarehouseActivityLine@1000 : Record 5767;SourceNo@1002 : Code[20];Qty@1001 : Decimal);
    BEGIN
      WITH WarehouseActivityLine DO BEGIN
        SETRANGE("Action Type","Action Type"::Place);
        SETRANGE("Source No.",SourceNo);
        SETRANGE("Source Document","Source Document"::"Purchase Order");
        IF Qty <> 0 THEN
          SETRANGE(Quantity,Qty);
        FINDFIRST;
      END
    END;

    LOCAL PROCEDURE VSTF330787CreateLocation@19(DPPLocation@1001 : Boolean) : Code[10];
    BEGIN
      EXIT(MockCustomLocationCode(TRUE,FALSE,DPPLocation,DPPLocation));
    END;

    LOCAL PROCEDURE FindZone@68(VAR Zone@1002 : Record 7300;LocationCode@1000 : Code[10];BinTypeCode@1001 : Code[20]);
    BEGIN
      Zone.SETRANGE("Location Code",LocationCode);
      Zone.SETRANGE("Bin Type Code",BinTypeCode);
      Zone.SETRANGE("Cross-Dock Bin Zone",FALSE);

      Zone.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateBinWithPutPickType@283(LocationCode@1001 : Code[10]) : Code[20];
    VAR
      Bin@1000 : Record 7354;
      Zone@1007 : Record 7300;
      BinTypeCode@1009 : Code[10];
    BEGIN
      BinTypeCode := LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,TRUE);
      FindZone(Zone,LocationCode,BinTypeCode);
      LibraryWarehouse.CreateBin(Bin,LocationCode,LibraryUtility.GenerateGUID,Zone.Code,BinTypeCode);
      EXIT(Bin.Code);
    END;

    LOCAL PROCEDURE CreateSimpleLocation@82() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateInTransitLocation@183() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      WITH Location DO BEGIN
        GET(CreateSimpleLocation);
        "Use As In-Transit" := TRUE;
        MODIFY;
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE VSTF330787CreateBin@11(LocationCode@1002 : Code[10]) : Code[10];
    VAR
      Bin@1000 : Record 7354;
    BEGIN
      Bin.INIT;
      Bin.Code := LibraryUtility.GenerateGUID;
      Bin."Location Code" := LocationCode;
      Bin.INSERT;
      EXIT(Bin.Code);
    END;

    LOCAL PROCEDURE VSTF330787CreateItemUnitOfMeasure@13(VAR ItemUnitOfMeasure@1000 : Record 5404;ItemNo@1001 : Code[20];QtyPerUOM@1002 : Decimal);
    BEGIN
      CLEAR(ItemUnitOfMeasure);
      ItemUnitOfMeasure."Item No." := ItemNo;
      ItemUnitOfMeasure.Code := LibraryUtility.GenerateGUID;
      ItemUnitOfMeasure."Qty. per Unit of Measure" := QtyPerUOM;
      ItemUnitOfMeasure.INSERT;
    END;

    LOCAL PROCEDURE VSTF330787CreateEntry@10(ItemNo@1002 : Code[20];LocationCode@1003 : Code[10];BinCode@1006 : Code[20];Quantity@1004 : Decimal;LotNo@1005 : Code[20];ItemUnitOfMeasure@1009 : Record 5404);
    VAR
      ItemLedgerEntry@1001 : Record 32;
      WarehouseEntry@1000 : Record 7312;
      WarehouseEntry2@1007 : Record 7312;
      BinContent@1010 : Record 7302;
      BinType@1011 : Record 7303;
    BEGIN
      MockILE(ItemLedgerEntry,ItemNo,LocationCode,Quantity * ItemUnitOfMeasure."Qty. per Unit of Measure");
      ItemLedgerEntry."Lot No." := LotNo;
      ItemLedgerEntry."Unit of Measure Code" := ItemUnitOfMeasure.Code;
      ItemLedgerEntry."Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
      ItemLedgerEntry.MODIFY;

      WarehouseEntry2.FINDLAST;
      WarehouseEntry.INIT;
      WarehouseEntry."Entry No." := WarehouseEntry2."Entry No." + 1;
      WarehouseEntry."Item No." := ItemLedgerEntry."Item No.";
      WarehouseEntry."Location Code" := ItemLedgerEntry."Location Code";
      WarehouseEntry."Bin Code" := BinCode;
      WarehouseEntry.Quantity := Quantity;
      WarehouseEntry."Qty. (Base)" := ItemLedgerEntry.Quantity;
      WarehouseEntry."Lot No." := ItemLedgerEntry."Lot No.";
      WarehouseEntry."Unit of Measure Code" := ItemUnitOfMeasure.Code;
      WarehouseEntry."Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
      WarehouseEntry.INSERT;

      IF NOT BinContent.GET(WarehouseEntry."Location Code",WarehouseEntry."Bin Code",WarehouseEntry."Item No.",
           WarehouseEntry."Variant Code",WarehouseEntry."Unit of Measure Code")
      THEN BEGIN
        BinContent."Location Code" := WarehouseEntry."Location Code";
        BinContent."Bin Code" := WarehouseEntry."Bin Code";
        BinContent."Item No." := WarehouseEntry."Item No.";
        BinContent."Unit of Measure Code" := WarehouseEntry."Unit of Measure Code";
        BinContent."Qty. per Unit of Measure" := WarehouseEntry."Qty. per Unit of Measure";
        BinType.SETRANGE(Pick,TRUE);
        BinType.FINDFIRST;
        BinContent."Bin Type Code" := BinType.Code;
        BinContent.INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateWhiteLikeLocationWithPutPickFlags@65() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      LibraryWarehouse.CreateFullWMSLocation(Location,1);
      Location.VALIDATE("Always Create Put-away Line",TRUE);
      Location.VALIDATE("Always Create Pick Line",TRUE);
      Location.VALIDATE("Bin Capacity Policy",Location."Bin Capacity Policy"::"Never Check Capacity");
      Location.VALIDATE("Use ADCS",FALSE);
      Location.MODIFY(TRUE);

      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateItemWithTracking@171() : Code[20];
    VAR
      Item@1001 : Record 27;
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      ItemTrackingCode."Lot Warehouse Tracking" := TRUE;
      ItemTrackingCode."Lot Transfer Tracking" := TRUE;
      ItemTrackingCode."Lot Purchase Outbound Tracking" := TRUE;
      ItemTrackingCode.MODIFY(TRUE);

      LibraryInventory.CreateTrackedItem(Item,LibraryUtility.GetGlobalNoSeriesCode,'',ItemTrackingCode.Code);

      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE VSTF330787CreateSalesAndReservationEntriesAgainstInventory@23(VAR WarehouseShipmentHeader@1010 : Record 7320;VAR WarehouseShipmentLine@1009 : Record 7321;ItemNo@1001 : Code[20];LocationCode@1000 : Code[10];Quantity@1003 : Decimal;ItemUnitOfMeasure@1004 : Record 5404;LotNo@1006 : Code[10]);
    VAR
      SalesLine@1002 : Record 37;
      ReservationEntry@1005 : Record 337;
      ItemLedgerEntry@1007 : Record 32;
      WhseItemTrackingLine@1008 : Record 6550;
      QtyFromCasILE@1011 : Decimal;
    BEGIN
      SalesLine."Document Type" := SalesLine."Document Type"::Order;
      SalesLine."Document No." := LibraryUtility.GenerateGUID;
      SalesLine.Type := SalesLine.Type::Item;
      SalesLine."No." := ItemNo;
      SalesLine."Location Code" := LocationCode;
      SalesLine.Quantity := Quantity;
      SalesLine."Unit of Measure Code" := ItemUnitOfMeasure.Code;
      SalesLine."Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
      SalesLine."Quantity (Base)" := SalesLine.Quantity * SalesLine."Qty. per Unit of Measure";
      SalesLine."Outstanding Qty. (Base)" := SalesLine."Quantity (Base)";
      SalesLine.INSERT;

      VSTF330787CreateWarehouseShipment(WarehouseShipmentHeader,WarehouseShipmentLine,SalesLine);

      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETFILTER("Unit of Measure Code",'<>%1',ItemUnitOfMeasure.Code);

      ItemLedgerEntry.FINDFIRST;
      ReservationEntry.FINDLAST;
      VSTF330787CreateReservation(ReservationEntry."Entry No." + 1,FALSE,
        DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
        -0.16667,-ItemLedgerEntry.Quantity,ItemUnitOfMeasure."Qty. per Unit of Measure",LotNo);
      VSTF330787CreateReservation(ReservationEntry."Entry No." + 1,TRUE,
        DATABASE::"Item Ledger Entry",0,'',ItemLedgerEntry."Entry No.",
        ItemLedgerEntry.Quantity * ItemLedgerEntry."Qty. per Unit of Measure",ItemLedgerEntry.Quantity,
        ItemLedgerEntry."Qty. per Unit of Measure",LotNo);
      IF WhseItemTrackingLine.FINDLAST THEN;
      VSTF330787CreateWhseItemTrkgLine(WhseItemTrackingLine."Entry No." + 1,WarehouseShipmentLine."Location Code",
        DATABASE::"Warehouse Shipment Line",0,WarehouseShipmentLine."No.",WarehouseShipmentLine."Line No.",
        0.16667,ItemLedgerEntry.Quantity,ItemUnitOfMeasure."Qty. per Unit of Measure",LotNo);

      ItemLedgerEntry.FINDLAST;
      VSTF330787CreateReservation(ReservationEntry."Entry No." + 2,FALSE,
        DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
        -0.16667,-ItemLedgerEntry.Quantity,ItemUnitOfMeasure."Qty. per Unit of Measure",LotNo);
      VSTF330787CreateReservation(ReservationEntry."Entry No." + 2,TRUE,
        DATABASE::"Item Ledger Entry",0,'',ItemLedgerEntry."Entry No.",
        ItemLedgerEntry.Quantity * ItemLedgerEntry."Qty. per Unit of Measure",ItemLedgerEntry.Quantity,
        ItemLedgerEntry."Qty. per Unit of Measure",LotNo);
      VSTF330787CreateWhseItemTrkgLine(WhseItemTrackingLine."Entry No." + 2,WarehouseShipmentLine."Location Code",
        DATABASE::"Warehouse Shipment Line",0,WarehouseShipmentLine."No.",WarehouseShipmentLine."Line No.",
        0.16667,ItemLedgerEntry.Quantity,ItemUnitOfMeasure."Qty. per Unit of Measure",LotNo);

      ItemLedgerEntry.SETRANGE("Unit of Measure Code",ItemUnitOfMeasure.Code);
      ItemLedgerEntry.FINDLAST;
      QtyFromCasILE := 104.4;
      VSTF330787CreateReservation(ReservationEntry."Entry No." + 3,FALSE,
        DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",
        -9.66666,-QtyFromCasILE,ItemUnitOfMeasure."Qty. per Unit of Measure",LotNo);
      VSTF330787CreateReservation(ReservationEntry."Entry No." + 3,TRUE,
        DATABASE::"Item Ledger Entry",0,'',ItemLedgerEntry."Entry No.",
        9.66666,QtyFromCasILE,ItemUnitOfMeasure."Qty. per Unit of Measure",LotNo);
      VSTF330787CreateWhseItemTrkgLine(WhseItemTrackingLine."Entry No." + 3,WarehouseShipmentLine."Location Code",
        DATABASE::"Warehouse Shipment Line",0,WarehouseShipmentLine."No.",WarehouseShipmentLine."Line No.",
        9.66666,QtyFromCasILE,ItemUnitOfMeasure."Qty. per Unit of Measure",LotNo);
    END;

    LOCAL PROCEDURE VSTF330787CreateWarehouseShipment@17(VAR WarehouseShipmentHeader@1001 : Record 7320;VAR WarehouseShipmentLine@1000 : Record 7321;VAR SalesLine@1005 : Record 37);
    BEGIN
      // SETUP : Create whse shipment from demand
      WarehouseShipmentHeader.INIT;
      WarehouseShipmentHeader."No." := LibraryUtility.GenerateGUID;
      WarehouseShipmentHeader.INSERT;
      WarehouseShipmentLine.INIT;
      WarehouseShipmentLine."No." := WarehouseShipmentHeader."No.";
      WarehouseShipmentLine."Item No." := SalesLine."No.";
      WarehouseShipmentLine.Quantity := SalesLine.Quantity;
      WarehouseShipmentLine."Qty. Outstanding" := WarehouseShipmentLine.Quantity;
      WarehouseShipmentLine."Qty. (Base)" := SalesLine."Quantity (Base)";
      WarehouseShipmentLine."Qty. Outstanding (Base)" := WarehouseShipmentLine."Qty. (Base)";
      WarehouseShipmentLine."Unit of Measure Code" := SalesLine."Unit of Measure Code";
      WarehouseShipmentLine."Qty. per Unit of Measure" := SalesLine."Qty. per Unit of Measure";
      WarehouseShipmentLine."Location Code" := SalesLine."Location Code";
      WarehouseShipmentLine."Bin Code" := VSTF330787CreateBin(WarehouseShipmentLine."Location Code");
      WarehouseShipmentLine."Source Type" := DATABASE::"Sales Line";
      WarehouseShipmentLine."Source Subtype" := SalesLine."Document Type";
      WarehouseShipmentLine."Source No." := SalesLine."Document No.";
      WarehouseShipmentLine."Source Line No." := SalesLine."Line No.";
      WarehouseShipmentLine."Shipment Date" := SalesLine."Shipment Date";
      WarehouseShipmentLine.INSERT;
    END;

    LOCAL PROCEDURE VSTF330787CreateReservation@38(EntryNo@1000 : Integer;Positive@1001 : Boolean;SourceType@1002 : Integer;SourceSubType@1003 : Option;SourceID@1004 : Code[20];SourceRefNo@1005 : Integer;Quantity@1006 : Decimal;QuantityBase@1007 : Decimal;QtyPerUOM@1008 : Decimal;LotNo@1009 : Code[10]);
    VAR
      ReservationEntry@1010 : Record 337;
    BEGIN
      ReservationEntry."Entry No." := EntryNo;
      ReservationEntry.Positive := Positive;
      ReservationEntry."Reservation Status" := ReservationEntry."Reservation Status"::Reservation;
      ReservationEntry."Source Type" := SourceType;
      ReservationEntry."Source Subtype" := SourceSubType;
      ReservationEntry."Source ID" := SourceID;
      ReservationEntry."Source Ref. No." := SourceRefNo;
      ReservationEntry.Quantity := Quantity;
      ReservationEntry."Quantity (Base)" := QuantityBase;
      ReservationEntry."Qty. per Unit of Measure" := QtyPerUOM;
      ReservationEntry."Lot No." := LotNo;
      ReservationEntry.INSERT;
    END;

    LOCAL PROCEDURE VSTF330787CreateWhseItemTrkgLine@6(EntryNo@1009 : Integer;LocationCode@1004 : Code[10];SourceType@1008 : Integer;SourceSubType@1007 : Option;SourceID@1006 : Code[20];SourceRefNo@1005 : Integer;Quantity@1010 : Decimal;QuantityBase@1003 : Decimal;QtyPerUOM@1002 : Decimal;LotNo@1001 : Code[10]);
    VAR
      WhseItemTrackingLine@1000 : Record 6550;
    BEGIN
      WhseItemTrackingLine.INIT;
      WhseItemTrackingLine."Entry No." := EntryNo;
      WhseItemTrackingLine."Location Code" := LocationCode;
      WhseItemTrackingLine."Source Type" := SourceType;
      WhseItemTrackingLine."Source Subtype" := SourceSubType;
      WhseItemTrackingLine."Source ID" := SourceID;
      WhseItemTrackingLine."Source Ref. No." := SourceRefNo;
      WhseItemTrackingLine."Quantity (Base)" := QuantityBase;
      WhseItemTrackingLine."Qty. to Handle" := Quantity;
      WhseItemTrackingLine."Qty. to Handle (Base)" := WhseItemTrackingLine."Quantity (Base)";
      WhseItemTrackingLine."Qty. per Unit of Measure" := QtyPerUOM;
      WhseItemTrackingLine."Lot No." := LotNo;
      WhseItemTrackingLine.INSERT;
    END;

    LOCAL PROCEDURE VSTF334573CreateReleaseTransOrder@51(VAR TransHeader@1000 : Record 5740;LocationCode@1001 : Code[10];ItemUOM@1002 : Record 5404;LotNo@1003 : ARRAY [3] OF Code[20]);
    VAR
      TransLine@1004 : Record 5741;
    BEGIN
      CreateTransHeader(TransHeader,LocationCode,CreateSimpleLocation,CreateInTransitLocation);
      CreateTransLine(TransLine,TransHeader,ItemUOM,50);
      CreateReservEntryForTransfer(TransLine,ItemUOM,LotNo[1],42,126);
      CreateReservEntryForTransfer(TransLine,ItemUOM,LotNo[2],24,102);
      CreateReservEntryForTransfer(TransLine,ItemUOM,LotNo[3],20,106);
      LibraryWarehouse.ReleaseTransferOrder(TransHeader);
    END;

    LOCAL PROCEDURE VSTF334573CreateRegisterPickWithQtyToHandle@256(VAR WhseActivityHdr@1006 : Record 5766;WhseShptHeader@1000 : Record 7320;LocationCode@1002 : Code[10];LotNo@1003 : ARRAY [3] OF Code[20];BinCode@1004 : ARRAY [2] OF Code[20]);
    BEGIN
      LibraryWarehouse.CreateWhsePick(WhseShptHeader);
      GetLastActvHdrCreatedNoSrc(WhseActivityHdr,LocationCode,WhseActivityHdr.Type::Pick);

      SetQtyToHandleOnActivityLines(WhseActivityHdr,LotNo[1],BinCode[1],5);
      SetQtyToHandleOnActivityLines(WhseActivityHdr,LotNo[1],BinCode[2],5);
      SetQtyToHandleOnActivityLines(WhseActivityHdr,LotNo[2],BinCode[1],4);
      SetQtyToHandleOnActivityLines(WhseActivityHdr,LotNo[2],BinCode[2],3);
      SetQtyToHandleOnActivityLines(WhseActivityHdr,LotNo[3],BinCode[1],1);
      SetQtyToHandleOnActivityLines(WhseActivityHdr,LotNo[3],BinCode[2],3);
      LibraryWarehouse.RegisterWhseActivity(WhseActivityHdr);
    END;

    LOCAL PROCEDURE CreateTransHeader@86(VAR TransHeader@1000 : Record 5740;TransFromCode@1001 : Code[10];TransToCode@1002 : Code[10];InTransitCode@1003 : Code[10]);
    BEGIN
      WITH TransHeader DO BEGIN
        INIT;
        "Transfer-from Code" := TransFromCode;
        "Transfer-to Code" := TransToCode;
        "In-Transit Code" := InTransitCode;
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateTransLine@35(VAR TransLine@1005 : Record 5741;TransHeader@1000 : Record 5740;ItemUnitOfMeasure@1002 : Record 5404;Qty@1004 : Decimal);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      WITH TransLine DO BEGIN
        "Document No." := TransHeader."No.";
        RecRef.GETTABLE(TransLine);
        "Line No." := LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Line No."));
        VALIDATE("Item No.",ItemUnitOfMeasure."Item No.");
        VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
        ItemUnitOfMeasure.GET("Item No.","Unit of Measure Code");
        "Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
        Quantity := Qty;
        "Quantity (Base)" := Qty * "Qty. per Unit of Measure";
        "Outstanding Quantity" := Quantity;
        "Outstanding Qty. (Base)" := "Quantity (Base)";
        "Receipt Date" := WORKDATE;
        "Transfer-from Code" := TransHeader."Transfer-from Code";
        "Transfer-to Code" := TransHeader."Transfer-to Code";
        "Shipment Date" := WORKDATE;
        "Receipt Date" := WORKDATE;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateReservEntryForTransfer@139(TransLine@1000 : Record 5741;ItemUOM@1001 : Record 5404;LotNo@1002 : Code[20];Qty@1003 : Decimal;Qty2@1005 : Decimal);
    VAR
      ReservEntry@1004 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        FINDLAST;
        INIT;
        "Item No." := ItemUOM."Item No.";
        "Qty. per Unit of Measure" := ItemUOM."Qty. per Unit of Measure";
        "Reservation Status" := "Reservation Status"::Surplus;
        "Source Type" := DATABASE::"Transfer Line";
        "Source ID" := TransLine."Document No.";
        "Source Ref. No." := TransLine."Line No.";
        "Lot No." := LotNo;
        "Item Tracking" := "Item Tracking"::"Lot No.";

        "Location Code" := TransLine."Transfer-from Code";
        Positive := FALSE;
        "Source Subtype" := 0;
        InsertReservEntry(ReservEntry,-Qty,ItemUOM."Qty. per Unit of Measure");
        InsertReservEntry(ReservEntry,-Qty2,ItemUOM."Qty. per Unit of Measure");

        "Location Code" := TransLine."Transfer-to Code";
        Positive := TRUE;
        "Source Subtype" := 1;
        InsertReservEntry(ReservEntry,Qty,ItemUOM."Qty. per Unit of Measure");
        InsertReservEntry(ReservEntry,Qty2,ItemUOM."Qty. per Unit of Measure");
      END;
    END;

    LOCAL PROCEDURE MockItem@66(VAR Item@1000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        INIT;
        "No." := LibraryUtility.GenerateRandomCode(FIELDNO("No."),DATABASE::Item);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockItemNo@37() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      MockItem(Item);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE MockItemWithBaseUOM@55(VAR Item@1000 : Record 27);
    BEGIN
      MockItem(Item);
      Item."Base Unit of Measure" := MockItemUOMCode(Item."No.",1);
      Item.MODIFY;
    END;

    LOCAL PROCEDURE MockItemNoWithBaseUOM@48() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      MockItemWithBaseUOM(Item);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE MockItemUOM@15(VAR ItemUnitOfMeasure@1000 : Record 5404;ItemNo@1003 : Code[20];QtyPerUOM@1001 : Decimal);
    BEGIN
      WITH ItemUnitOfMeasure DO BEGIN
        "Item No." := ItemNo;
        Code := LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::"Item Unit of Measure");
        "Qty. per Unit of Measure" := QtyPerUOM;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockItemUOMCode@63(ItemNo@1003 : Code[20];QtyPerUOM@1001 : Decimal) : Code[10];
    VAR
      ItemUnitOfMeasure@1000 : Record 5404;
    BEGIN
      MockItemUOM(ItemUnitOfMeasure,ItemNo,QtyPerUOM);
      EXIT(ItemUnitOfMeasure.Code);
    END;

    LOCAL PROCEDURE MockLocationCode@27() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      WITH Location DO BEGIN
        INIT;
        Code := LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::Location);
        INSERT;
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE MockCustomLocationCode@67(NewRequirePick@1001 : Boolean;NewRequireShipment@1002 : Boolean;NewBinMandatory@1003 : Boolean;NewDirectedPutAwayAndPick@1004 : Boolean) : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      WITH Location DO BEGIN
        INIT;
        Code := LibraryUtility.GenerateRandomCode(FIELDNO(Code),DATABASE::Location);
        "Require Pick" := NewRequirePick;
        "Require Shipment" := NewRequireShipment;
        "Bin Mandatory" := NewBinMandatory;
        "Directed Put-away and Pick" := NewDirectedPutAwayAndPick;
        INSERT;
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE MockILE@41(VAR ItemLedgerEntry@1000 : Record 32;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Qty@1003 : Decimal);
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        FINDLAST;
        "Entry No." += 1;
        "Item No." := ItemNo;
        "Entry Type" := "Entry Type"::"Positive Adjmt.";
        "Location Code" := LocationCode;
        Quantity := Qty;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockCustomILE@102(VAR ItemLedgerEntry@1003 : Record 32;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];Qty@1000 : Decimal;NewOpen@1007 : Boolean;VariantCode@1004 : Code[10];GlobalDim1Value@1005 : Code[10];GlobalDim2Value@1006 : Code[10]);
    BEGIN
      MockILE(ItemLedgerEntry,ItemNo,LocationCode,Qty);
      WITH ItemLedgerEntry DO BEGIN
        Open := NewOpen;
        "Variant Code" := VariantCode;
        "Global Dimension 1 Code" := GlobalDim1Value;
        "Global Dimension 2 Code" := GlobalDim2Value;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE MockILENo@45(ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Qty@1003 : Decimal) : Integer;
    VAR
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      MockILE(ItemLedgerEntry,ItemNo,LocationCode,Qty);
      EXIT(ItemLedgerEntry."Entry No.");
    END;

    LOCAL PROCEDURE MockTransferLine@40(ItemNo@1000 : Code[20];OutstandingQty@1001 : Decimal);
    VAR
      TransferLine@1002 : Record 5741;
    BEGIN
      WITH TransferLine DO BEGIN
        INIT;
        "Document No." := LibraryUtility.GenerateRandomCode(FIELDNO("Document No."),DATABASE::"Transfer Line");
        "Line No." := 10000;
        "Item No." := ItemNo;
        "Outstanding Qty. (Base)" := OutstandingQty;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockServiceHeader@112() : Code[20];
    VAR
      ServiceHeader@1000 : Record 5900;
    BEGIN
      WITH ServiceHeader DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Order;
        "No." := LibraryUtility.GenerateRandomCode(FIELDNO("No."),DATABASE::"Service Header");
        INSERT(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE MockServiceLine@80(VAR ServiceLine@1000 : Record 5902);
    BEGIN
      WITH ServiceLine DO BEGIN
        INIT;
        "Document Type" := "Document Type"::Order;
        "Document No." := MockServiceHeader;
        "Line No." := 10000;
        Type := Type::Item;
        "No." := MockItemNoWithBaseUOM;
        VALIDATE(Quantity,LibraryRandom.RandIntInRange(100,200));
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE InsertReservEntry@153(VAR ReservEntry@1000 : Record 337;QtyBase@1001 : Decimal;QtyPerUOM@1002 : Decimal);
    BEGIN
      WITH ReservEntry DO BEGIN
        "Entry No." += 1;
        "Quantity (Base)" := QtyBase;
        Quantity := ROUND("Quantity (Base)" / QtyPerUOM,0.00001);
        "Qty. to Handle (Base)" := "Quantity (Base)";
        "Qty. to Invoice (Base)" := "Quantity (Base)";
        INSERT;
      END;
    END;

    LOCAL PROCEDURE GetWhseShptFromTransfer@60(VAR WhseShptHeader@1000 : Record 7320;TransNo@1001 : Code[20]);
    VAR
      WhseShptLine@1002 : Record 7321;
    BEGIN
      WITH WhseShptLine DO BEGIN
        SETRANGE("Source Document","Source Document"::"Outbound Transfer");
        SETRANGE("Source No.",TransNo);
        FINDFIRST;
        WhseShptHeader.GET("No.");
      END;
    END;

    LOCAL PROCEDURE GetLastActvHdrCreatedNoSrc@61(VAR WhseActivityHdr@1000 : Record 5766;LocationCode@1001 : Code[10];ActivityType@1002 : Option);
    BEGIN
      WhseActivityHdr.SETRANGE("Location Code",LocationCode);
      WhseActivityHdr.SETRANGE(Type,ActivityType);
      WhseActivityHdr.FINDLAST;
    END;

    LOCAL PROCEDURE GetWhseRegisteredPickAmount@91(ItemNo@1000 : Code[20]) : Decimal;
    VAR
      RegisteredWhseActivityLine@1001 : Record 5773;
    BEGIN
      WITH RegisteredWhseActivityLine DO BEGIN
        SETCURRENTKEY(
          "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.",
          "Whse. Document No.","Serial No.","Lot No.","Action Type");
        SETRANGE("Activity Type","Activity Type"::Pick);
        SETRANGE("Action Type","Action Type"::Place);
        SETRANGE("Item No.",ItemNo);
        CALCSUMS("Qty. (Base)");

        EXIT("Qty. (Base)");
      END;
    END;

    LOCAL PROCEDURE GetItemTrackingAmount@192(ItemNo@1000 : Code[20]) Sum : Decimal;
    VAR
      ReservationEntry@1001 : Record 337;
    BEGIN
      WITH ReservationEntry DO BEGIN
        SETRANGE("Source Subtype","Source Subtype"::"0");
        SETRANGE("Item No.",ItemNo);
        IF FINDSET THEN
          REPEAT
            Sum += "Qty. to Handle (Base)";
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SetQtyToHandleOnActivityLines@162(WhseActivityHdr@1000 : Record 5766;LotNo@1001 : Code[20];BinCode@1002 : Code[20];QtyToHandle@1004 : Decimal);
    VAR
      WhseActivityLine@1003 : Record 5767;
      QtyTaken@1005 : Decimal;
    BEGIN
      WITH WhseActivityLine DO BEGIN
        SETRANGE("Activity Type",WhseActivityHdr.Type);
        SETRANGE("No.",WhseActivityHdr."No.");
        SETRANGE("Lot No.",LotNo);
        SETRANGE("Bin Code",BinCode);
        FINDSET(TRUE);
        QtyTaken := "Qty. to Handle";
        VALIDATE("Qty. to Handle",QtyToHandle);

        MODIFY(TRUE);

        SETRANGE("Bin Code"); // action type "Place" has another bin code
        NEXT;
        TESTFIELD("Action Type","Action Type"::Place);
        TESTFIELD("Qty. to Handle",QtyTaken);
        VALIDATE("Qty. to Handle",QtyToHandle);
        MODIFY(TRUE);
      END;
    END;

    [Test]
    PROCEDURE InventoryPickWithBlankBinCodeHasTwoLinesFromEachBin@16();
    VAR
      ProdOrderComponent@1000 : Record 5407;
      WarehouseActivityHeader@1005 : Record 5766;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseRequest@1008 : Record 5765;
      DefaultBinCode@1002 : Code[10];
      NonDefaultBinCode@1001 : Code[10];
      QtyOnDefaultBin@1007 : Decimal;
      QtyOnNonDefaultBin@1004 : Decimal;
    BEGIN
      VSTF335757Preconditions(0,ProdOrderComponent,WarehouseRequest,DefaultBinCode,NonDefaultBinCode,
        QtyOnDefaultBin,QtyOnNonDefaultBin); // 0 : Blank source doc bin

      // EXERCISE : Create inventory pick
      VSTF335757CallCreateInvtDoc(WarehouseActivityHeader.Type::"Invt. Pick",ProdOrderComponent,WarehouseRequest);

      // VERIFY : 2 lines one for each bin code
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::"Invt. Pick");
      VSTF335757SetFilterOnWhseActivityLines(ProdOrderComponent,WarehouseActivityLine);
      WarehouseActivityLine.SETRANGE("Bin Code",DefaultBinCode);
      WarehouseActivityLine.FINDFIRST;
      Assert.AreEqual(QtyOnDefaultBin,WarehouseActivityLine.Quantity,'Qty from Default bin is 1st priority.');
      WarehouseActivityLine.SETRANGE("Bin Code",NonDefaultBinCode);
      WarehouseActivityLine.FINDFIRST;
      Assert.AreEqual(ProdOrderComponent."Expected Quantity" - QtyOnDefaultBin,
        WarehouseActivityLine.Quantity,'Qty from NonDefault bin is 2nd priority.')
    END;

    [Test]
    PROCEDURE InventoryPickWithDefaultBinCodeHasTwoLinesFromEachBin@21();
    VAR
      ProdOrderComponent@1000 : Record 5407;
      WarehouseActivityHeader@1005 : Record 5766;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseRequest@1008 : Record 5765;
      DefaultBinCode@1002 : Code[10];
      NonDefaultBinCode@1001 : Code[10];
      QtyOnDefaultBin@1007 : Decimal;
      QtyOnNonDefaultBin@1004 : Decimal;
    BEGIN
      VSTF335757Preconditions(1,ProdOrderComponent,WarehouseRequest,DefaultBinCode,NonDefaultBinCode,
        QtyOnDefaultBin,QtyOnNonDefaultBin); // 1 : Default source doc bin

      // EXERCISE : Create inventory pick
      VSTF335757CallCreateInvtDoc(WarehouseActivityHeader.Type::"Invt. Pick",ProdOrderComponent,WarehouseRequest);

      // VERIFY : 2 lines one for each bin code
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::"Invt. Pick");
      VSTF335757SetFilterOnWhseActivityLines(ProdOrderComponent,WarehouseActivityLine);
      Assert.AreEqual(2,WarehouseActivityLine.COUNT,'2 lines- one from default and one from non default.');
      WarehouseActivityLine.SETRANGE("Bin Code",DefaultBinCode);
      WarehouseActivityLine.FINDFIRST;
      Assert.AreEqual(QtyOnDefaultBin,WarehouseActivityLine.Quantity,'Qty from Default bin is 1st priority.');
      WarehouseActivityLine.SETRANGE("Bin Code",NonDefaultBinCode);
      WarehouseActivityLine.FINDFIRST;
      Assert.AreEqual(ProdOrderComponent."Expected Quantity" - QtyOnDefaultBin,
        WarehouseActivityLine.Quantity,'Qty from NonDefault bin is 2nd priority.')
    END;

    [Test]
    PROCEDURE InventoryPickWithNonDefaultBinCodeHasTwoLinesFromEachBin@22();
    VAR
      ProdOrderComponent@1000 : Record 5407;
      WarehouseActivityHeader@1005 : Record 5766;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseRequest@1008 : Record 5765;
      DefaultBinCode@1002 : Code[10];
      NonDefaultBinCode@1001 : Code[10];
      QtyOnDefaultBin@1007 : Decimal;
      QtyOnNonDefaultBin@1004 : Decimal;
    BEGIN
      VSTF335757Preconditions(2,ProdOrderComponent,WarehouseRequest,DefaultBinCode,NonDefaultBinCode,
        QtyOnDefaultBin,QtyOnNonDefaultBin); // 2 : Non default source doc bin

      // EXERCISE : Create inventory pick
      VSTF335757CallCreateInvtDoc(WarehouseActivityHeader.Type::"Invt. Pick",ProdOrderComponent,WarehouseRequest);

      // VERIFY : 2 lines one for each bin code
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::"Invt. Pick");
      VSTF335757SetFilterOnWhseActivityLines(ProdOrderComponent,WarehouseActivityLine);
      Assert.AreEqual(2,WarehouseActivityLine.COUNT,'2 lines- one from default and one from non default.');
      WarehouseActivityLine.SETRANGE("Bin Code",NonDefaultBinCode);
      WarehouseActivityLine.FINDFIRST;
      Assert.AreEqual(QtyOnNonDefaultBin,WarehouseActivityLine.Quantity,
        'Qty from Non Default bin is 1st priority as it is the source line.');
      WarehouseActivityLine.SETRANGE("Bin Code",DefaultBinCode);
      WarehouseActivityLine.FINDFIRST;
      Assert.AreEqual(ProdOrderComponent."Expected Quantity" - QtyOnNonDefaultBin,
        WarehouseActivityLine.Quantity,'Qty from Default bin is 2nd priority.')
    END;

    [Test]
    PROCEDURE InventoryMovementWithBlankBinCodeCreatesNoDoc@44();
    VAR
      ProdOrderComponent@1000 : Record 5407;
      WarehouseActivityHeader@1005 : Record 5766;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseRequest@1008 : Record 5765;
      DefaultBinCode@1002 : Code[10];
      NonDefaultBinCode@1001 : Code[10];
      QtyOnDefaultBin@1007 : Decimal;
      QtyOnNonDefaultBin@1004 : Decimal;
    BEGIN
      VSTF335757Preconditions(0,ProdOrderComponent,WarehouseRequest,DefaultBinCode,NonDefaultBinCode,
        QtyOnDefaultBin,QtyOnNonDefaultBin); // 0 : Blank source doc bin

      // EXERCISE : Create inventory pick
      VSTF335757CallCreateInvtDoc(WarehouseActivityHeader.Type::"Invt. Movement",ProdOrderComponent,WarehouseRequest);

      // VERIFY : 0 lines one for each bin code
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::"Invt. Movement");
      VSTF335757SetFilterOnWhseActivityLines(ProdOrderComponent,WarehouseActivityLine);
      Assert.IsTrue(WarehouseActivityLine.ISEMPTY,'Place line bin code is blank- no doc is created');
    END;

    [Test]
    PROCEDURE InventoryMovementWithDefaultBinCodeHasOneLineFromNonDefaultBin@43();
    VAR
      ProdOrderComponent@1000 : Record 5407;
      WarehouseActivityHeader@1005 : Record 5766;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseRequest@1008 : Record 5765;
      DefaultBinCode@1002 : Code[10];
      NonDefaultBinCode@1001 : Code[10];
      QtyOnDefaultBin@1007 : Decimal;
      QtyOnNonDefaultBin@1004 : Decimal;
    BEGIN
      VSTF335757Preconditions(1,ProdOrderComponent,WarehouseRequest,DefaultBinCode,NonDefaultBinCode,
        QtyOnDefaultBin,QtyOnNonDefaultBin); // 1 : Default source doc bin

      // EXERCISE : Create inventory pick
      VSTF335757CallCreateInvtDoc(WarehouseActivityHeader.Type::"Invt. Movement",ProdOrderComponent,WarehouseRequest);

      // VERIFY : 1 pair of lines- take from non default and place to default
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::"Invt. Movement");
      VSTF335757SetFilterOnWhseActivityLines(ProdOrderComponent,WarehouseActivityLine);
      Assert.AreEqual(2,WarehouseActivityLine.COUNT,'1 pair of lines- take from non default and place to default');
      WarehouseActivityLine.SETRANGE("Bin Code",NonDefaultBinCode);
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.FINDFIRST;
      Assert.AreEqual(QtyOnNonDefaultBin,WarehouseActivityLine.Quantity,'Full qty from non default bin');
      WarehouseActivityLine.SETRANGE("Bin Code",DefaultBinCode);
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Place);
      WarehouseActivityLine.FINDFIRST;
      Assert.AreEqual(QtyOnNonDefaultBin,WarehouseActivityLine.Quantity,'Same qty as Take on Place line');
    END;

    [Test]
    PROCEDURE InventoryMovementWithNonDefaultBinCodeHasOneLineFromDefaultBin@42();
    VAR
      ProdOrderComponent@1000 : Record 5407;
      WarehouseActivityHeader@1005 : Record 5766;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseRequest@1008 : Record 5765;
      DefaultBinCode@1002 : Code[10];
      NonDefaultBinCode@1001 : Code[10];
      QtyOnDefaultBin@1007 : Decimal;
      QtyOnNonDefaultBin@1004 : Decimal;
    BEGIN
      VSTF335757Preconditions(2,ProdOrderComponent,WarehouseRequest,DefaultBinCode,NonDefaultBinCode,
        QtyOnDefaultBin,QtyOnNonDefaultBin); // 2 : Non default source doc bin

      // EXERCISE : Create inventory pick
      VSTF335757CallCreateInvtDoc(WarehouseActivityHeader.Type::"Invt. Movement",ProdOrderComponent,WarehouseRequest);

      // VERIFY : 1 pair of lines- take from default and place to non default.
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::"Invt. Movement");
      VSTF335757SetFilterOnWhseActivityLines(ProdOrderComponent,WarehouseActivityLine);
      Assert.AreEqual(2,WarehouseActivityLine.COUNT,'1 pair of lines- take from default and place to non default.');
      WarehouseActivityLine.SETRANGE("Bin Code",DefaultBinCode);
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.FINDFIRST;
      Assert.AreEqual(QtyOnDefaultBin,WarehouseActivityLine.Quantity,'Full qty from default bin');
      WarehouseActivityLine.SETRANGE("Bin Code",NonDefaultBinCode);
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Place);
      WarehouseActivityLine.FINDFIRST;
      Assert.AreEqual(QtyOnDefaultBin,WarehouseActivityLine.Quantity,'Same qty as Take on Place line');
    END;

    [Test]
    PROCEDURE NotPossibleToCreateBinWithoutLocation@164();
    VAR
      Bin@1000 : Record 7354;
    BEGIN
      // [SCENARIO 207605] Stan cannot create Bin without Location Code

      Bin.INIT;
      Bin.VALIDATE(Code,LibraryUtility.GenerateGUID);
      ASSERTERROR Bin.INSERT(TRUE);

      Assert.ExpectedError(CannotCreateBinWithoutLocationErr);
    END;

    LOCAL PROCEDURE VSTF335757Preconditions@18(SourceDocBinCode@1006 : 'Blank,Default,NonDefault';VAR ProdOrderComponent@1005 : Record 5407;VAR WarehouseRequest@1009 : Record 5765;VAR DefaultBinCode@1003 : Code[10];VAR NonDefaultBinCode@1002 : Code[10];VAR QtyOnDefaultBin@1007 : Decimal;VAR QtyOnNonDefaultBin@1008 : Decimal);
    VAR
      ProductionOrder@1004 : Record 5405;
      ItemNo@1000 : Code[20];
      LocationCode@1001 : Code[10];
    BEGIN
      // Refer to VSTF 335757
      Initialize;

      // SETUP : Create inventory for new item in 2 bins for Require Pick location.
      ItemNo := MockItemNo;
      LocationCode := MockCustomLocationCode(TRUE,FALSE,TRUE,FALSE);

      QtyOnDefaultBin := 5;
      DefaultBinCode := VSTF335757CreateBinContent(TRUE,ItemNo,LocationCode,QtyOnDefaultBin);
      QtyOnNonDefaultBin := 5;
      NonDefaultBinCode := VSTF335757CreateBinContent(FALSE,ItemNo,LocationCode,QtyOnNonDefaultBin);

      // SETUP : Create prod. order with 7 PCS of component.
      ProductionOrder.Status := ProductionOrder.Status::Released;
      ProductionOrder."No." := LibraryUtility.GenerateGUID;
      ProductionOrder.INSERT;
      ProdOrderComponent.Status := ProductionOrder.Status;
      ProdOrderComponent."Prod. Order No." := ProductionOrder."No.";
      ProdOrderComponent."Item No." := ItemNo;
      ProdOrderComponent."Location Code" := LocationCode;
      ProdOrderComponent."Quantity per" := 1;
      ProdOrderComponent."Expected Quantity" := 7;
      ProdOrderComponent."Expected Qty. (Base)" := 7;
      ProdOrderComponent."Remaining Quantity" := 7;
      ProdOrderComponent."Remaining Qty. (Base)" := 7;
      ProdOrderComponent."Qty. per Unit of Measure" := 1;
      CASE SourceDocBinCode OF
        SourceDocBinCode::Blank:
          ProdOrderComponent."Bin Code" := '';
        SourceDocBinCode::Default:
          ProdOrderComponent."Bin Code" := DefaultBinCode;
        SourceDocBinCode::NonDefault:
          ProdOrderComponent."Bin Code" := NonDefaultBinCode;
      END;
      ProdOrderComponent.INSERT;

      WarehouseRequest."Source Document" := WarehouseRequest."Source Document"::"Prod. Consumption";
      WarehouseRequest."Source Subtype" := ProdOrderComponent.Status;
      WarehouseRequest."Source No." := ProdOrderComponent."Prod. Order No.";
      WarehouseRequest."Location Code" := ProdOrderComponent."Location Code";
    END;

    LOCAL PROCEDURE VSTF335757CreateBinContent@20(Default@1000 : Boolean;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Qty@1006 : Decimal) BinCode : Code[10];
    VAR
      WarehouseEntry@1004 : Record 7312;
      WarehouseEntry2@1008 : Record 7312;
      BinContent@1005 : Record 7302;
    BEGIN
      MockILENo(ItemNo,LocationCode,Qty);

      BinCode := LibraryUtility.GenerateGUID;

      BinContent.INIT;
      BinContent.Default := Default;
      BinContent."Location Code" := LocationCode;
      BinContent."Bin Code" := BinCode;
      BinContent."Item No." := ItemNo;
      BinContent.INSERT;

      WarehouseEntry2.FINDLAST;
      WarehouseEntry.INIT;
      WarehouseEntry."Entry No." := WarehouseEntry2."Entry No." + 1;
      WarehouseEntry."Location Code" := LocationCode;
      WarehouseEntry."Bin Code" := BinCode;
      WarehouseEntry."Item No." := ItemNo;
      WarehouseEntry.Quantity := Qty;
      WarehouseEntry."Qty. (Base)" := Qty;
      WarehouseEntry.INSERT;
    END;

    LOCAL PROCEDURE VSTF335757CallCreateInvtDoc@34(ActivityType@1004 : Option;ProdOrderComponent@1002 : Record 5407;WarehouseRequest@1001 : Record 5765);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
      CreateInvtPickMovement@1000 : Codeunit 7322;
    BEGIN
      CreateInvtPickMovement.SetWhseRequest(WarehouseRequest,TRUE);
      CreateInvtPickMovement.CheckSourceDoc(WarehouseRequest);
      WarehouseActivityHeader.Type := ActivityType;
      WarehouseActivityHeader."No." := LibraryUtility.GenerateGUID;
      WarehouseActivityHeader."Source Type" := DATABASE::"Prod. Order Component";
      WarehouseActivityHeader."Source Subtype" := ProdOrderComponent.Status;
      WarehouseActivityHeader."Source No." := ProdOrderComponent."Prod. Order No.";
      WarehouseActivityHeader."Location Code" := ProdOrderComponent."Location Code";
      IF ActivityType = WarehouseActivityHeader.Type::"Invt. Movement" THEN
        CreateInvtPickMovement.SetInvtMovement(TRUE);
      CreateInvtPickMovement.AutoCreatePickOrMove(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE VSTF335757SetFilterOnWhseActivityLines@28(VAR ProdOrderComponent@1000 : Record 5407;VAR WarehouseActivityLine@1001 : Record 5767);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
      WarehouseActivityLine.SETRANGE("Source Subtype",ProdOrderComponent.Status);
      WarehouseActivityLine.SETRANGE("Source No.",ProdOrderComponent."Prod. Order No.");
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesHandler@157(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLines."Assign Lot No.".INVOKE;
      ItemTrackingLines.OK.INVOKE;
    END;

    [Test]
    PROCEDURE RaiseErrorOnIncreasingQtyToShipOnSalesLineIfPickExists@24();
    BEGIN
      RaiseErrorOnChangingQtyToShipOnSalesLineIfPickExists(TRUE);
    END;

    [Test]
    PROCEDURE RaiseErrorOnDecreasingQtyToShipOnSalesLineIfPickExists@46();
    BEGIN
      RaiseErrorOnChangingQtyToShipOnSalesLineIfPickExists(FALSE);
    END;

    LOCAL PROCEDURE RaiseErrorOnChangingQtyToShipOnSalesLineIfPickExists@39(Increase@1001 : Boolean);
    VAR
      LocationCode@1004 : Code[10];
      ItemNo@1002 : Code[20];
      Qty@1000 : Decimal;
      QtyToShip@1011 : Decimal;
      NewQtyToShip@1006 : Decimal;
      SourceSubtype@1010 : Integer;
      SourceNo@1009 : Code[20];
      SourceLineNo@1008 : Integer;
      FieldName@1007 : Text;
    BEGIN
      // Refer to SICLIY 6636
      Initialize;

      // SETUP : Create new item, make Invt location, make sales and a warehouse activity line.
      RaiseErrorOnChangingQtyIfPickExistsGetQuantities(Qty,QtyToShip,NewQtyToShip,Increase);
      RaiseErrorOnChangingQtyIfPickExistsMakeItemLocation(ItemNo,LocationCode);
      RaiseErrorOnChangingQtyToShipOnSalesLineIfPickExistsMakeSalesLine(ItemNo,LocationCode,
        Qty,QtyToShip,SourceSubtype,SourceNo,SourceLineNo);
      RaiseErrorOnChangingQtyIfPickExistsMakeWhseActivity(ItemNo,LocationCode,Qty,DATABASE::"Sales Line",
        SourceSubtype,SourceNo,SourceLineNo);

      // EXERCISE : Change Qty
      ASSERTERROR RaiseErrorOnChangingQtyToShipOnSalesLineIfPickExistsChangeSalesLine(FieldName,NewQtyToShip,
          SourceSubtype,SourceNo,SourceLineNo);
      // VERIFY : Error message
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(QtyMustNotBeChangedErr,FieldName)) > 0,
        'No change allowed as whse activity line exists.');
    END;

    [Test]
    PROCEDURE RaiseErrorOnIncreasingQtyToReceiveOnPurchLineIfPickExists@71();
    BEGIN
      RaiseErrorOnChangingQtyToReceiveOnPurchLineIfPickExists(TRUE);
    END;

    [Test]
    PROCEDURE RaiseErrorOnDecreasingQtyToReceiveOnPurchLineIfPickExists@70();
    BEGIN
      RaiseErrorOnChangingQtyToReceiveOnPurchLineIfPickExists(FALSE);
    END;

    LOCAL PROCEDURE RaiseErrorOnChangingQtyToReceiveOnPurchLineIfPickExists@69(Increase@1001 : Boolean);
    VAR
      LocationCode@1004 : Code[10];
      ItemNo@1002 : Code[20];
      Qty@1000 : Decimal;
      QtyToReceive@1011 : Decimal;
      NewQtyToReceive@1006 : Decimal;
      SourceSubtype@1010 : Integer;
      SourceNo@1009 : Code[20];
      SourceLineNo@1008 : Integer;
      FieldName@1007 : Text;
    BEGIN
      // Refer to SICLIY 6636
      Initialize;

      // SETUP : Create new item, make Invt location, make sales and a warehouse activity line.
      RaiseErrorOnChangingQtyIfPickExistsGetQuantities(Qty,QtyToReceive,NewQtyToReceive,Increase);
      RaiseErrorOnChangingQtyIfPickExistsMakeItemLocation(ItemNo,LocationCode);
      RaiseErrorOnChangingQtyToReceiveOnPurchLineIfPickExistsMakePurchLine(ItemNo,LocationCode,
        Qty,QtyToReceive,SourceSubtype,SourceNo,SourceLineNo);
      RaiseErrorOnChangingQtyIfPickExistsMakeWhseActivity(ItemNo,LocationCode,Qty,DATABASE::"Purchase Line",
        SourceSubtype,SourceNo,SourceLineNo);

      // EXERCISE : Change Qty
      ASSERTERROR RaiseErrorOnChangingQtyToReceiveOnPurchLineIfPickExistsChangePurchLine(FieldName,NewQtyToReceive,
          SourceSubtype,SourceNo,SourceLineNo);
      // VERIFY : Error message
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(QtyMustNotBeChangedErr,FieldName)) > 0,
        'No change allowed as whse activity line exists.');
    END;

    [Test]
    PROCEDURE RaiseErrorOnIncreasingQtyToShipOnTransferLineIfPickExists@94();
    BEGIN
      RaiseErrorOnChangingQtyToShipOnTransferLineIfPickExists(TRUE);
    END;

    [Test]
    PROCEDURE RaiseErrorOnDecreasingQtyToShipOnTransferLineIfPickExists@93();
    BEGIN
      RaiseErrorOnChangingQtyToShipOnTransferLineIfPickExists(FALSE);
    END;

    LOCAL PROCEDURE RaiseErrorOnChangingQtyToShipOnTransferLineIfPickExists@92(Increase@1001 : Boolean);
    VAR
      LocationCode@1004 : Code[10];
      ItemNo@1002 : Code[20];
      Qty@1000 : Decimal;
      QtyToShip@1011 : Decimal;
      NewQtyToShip@1006 : Decimal;
      SourceNo@1009 : Code[20];
      SourceLineNo@1008 : Integer;
      FieldName@1007 : Text;
    BEGIN
      // Refer to SICLIY 6636
      Initialize;

      // SETUP : Create new item, make Invt location, make sales and a warehouse activity line.
      RaiseErrorOnChangingQtyIfPickExistsGetQuantities(Qty,QtyToShip,NewQtyToShip,Increase);
      RaiseErrorOnChangingQtyIfPickExistsMakeItemLocation(ItemNo,LocationCode);
      RaiseErrorOnChangingQtyToShipOnTransferLineIfPickExistsMakeTransferLine(ItemNo,LocationCode,
        Qty,QtyToShip,SourceNo,SourceLineNo);
      RaiseErrorOnChangingQtyIfPickExistsMakeWhseActivity(ItemNo,LocationCode,Qty,DATABASE::"Transfer Line",
        0,SourceNo,SourceLineNo);

      // EXERCISE : Change Qty
      ASSERTERROR RaiseErrorOnChangingQtyToShipOnTransferLineIfPickExistsChangeTransferLine(FieldName,NewQtyToShip,
          SourceNo,SourceLineNo);
      // VERIFY : Error message
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(QtyMustNotBeChangedErr,FieldName)) > 0,
        'No change allowed as whse activity line exists.');
    END;

    [Test]
    PROCEDURE RaiseErrorOnIncreasingQtyToReceiveOnTransferLineIfPutAwayExists@107();
    BEGIN
      RaiseErrorOnChangingQtyToReceiveOnTransferLineIfPutAwayExists(TRUE);
    END;

    [Test]
    PROCEDURE RaiseErrorOnDecreasingQtyToReceiveOnTransferLineIfPutAwayExists@106();
    BEGIN
      RaiseErrorOnChangingQtyToReceiveOnTransferLineIfPutAwayExists(FALSE);
    END;

    LOCAL PROCEDURE RaiseErrorOnChangingQtyToReceiveOnTransferLineIfPutAwayExists@105(Increase@1001 : Boolean);
    VAR
      LocationCode@1004 : Code[10];
      ItemNo@1002 : Code[20];
      Qty@1000 : Decimal;
      QtyToReceive@1011 : Decimal;
      NewQtyToReceive@1006 : Decimal;
      SourceNo@1009 : Code[20];
      SourceLineNo@1008 : Integer;
      FieldName@1007 : Text;
    BEGIN
      // Refer to SICLIY 6636
      Initialize;

      // SETUP : Create new item, make Invt location, make sales and a warehouse activity line.
      RaiseErrorOnChangingQtyIfPickExistsGetQuantities(Qty,QtyToReceive,NewQtyToReceive,Increase);
      RaiseErrorOnChangingQtyIfPickExistsMakeItemLocation(ItemNo,LocationCode);
      RaiseErrorOnChangingQtyToReceiveOnTransferLineIfPickExistsMakeTransferLine(ItemNo,LocationCode,
        Qty,QtyToReceive,SourceNo,SourceLineNo);
      RaiseErrorOnChangingQtyIfPickExistsMakeWhseActivity(
        ItemNo,LocationCode,Qty,DATABASE::"Transfer Line",1,SourceNo,SourceLineNo);

      // EXERCISE : Change Qty
      ASSERTERROR RaiseErrorOnChangingQtyToReceiveOnTransferLineIfPutAwayExistsChangeTransferLine(
          FieldName,NewQtyToReceive,SourceNo,SourceLineNo);
      // VERIFY : Error message
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,STRSUBSTNO(QtyMustNotBeChangedErr,FieldName)) > 0,
        'No change allowed as whse activity line exists.');
    END;

    LOCAL PROCEDURE RaiseErrorOnChangingQtyIfPickExistsGetQuantities@62(VAR Qty@1002 : Decimal;VAR QtyToShip@1001 : Decimal;VAR NewQtyToShip@1000 : Decimal;Increase@1003 : Boolean);
    BEGIN
      Qty := 5;
      QtyToShip := Qty - 1;
      IF Increase THEN
        NewQtyToShip := Qty
      ELSE
        NewQtyToShip := QtyToShip - 1;
    END;

    LOCAL PROCEDURE RaiseErrorOnChangingQtyIfPickExistsMakeItemLocation@53(VAR ItemNo@1001 : Code[20];VAR LocationCode@1000 : Code[10]);
    BEGIN
      ItemNo := MockItemNo;
      LocationCode := MockCustomLocationCode(TRUE,FALSE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE RaiseErrorOnChangingQtyToShipOnSalesLineIfPickExistsMakeSalesLine@52(ItemNo@1002 : Code[20];LocationCode@1007 : Code[10];Qty@1001 : Decimal;QtyToShip@1000 : Decimal;VAR SourceSubtype@1004 : Integer;VAR SourceNo@1005 : Code[20];VAR SourceLineNo@1006 : Integer);
    VAR
      SalesLine@1003 : Record 37;
      SalesHeader@1008 : Record 36;
    BEGIN
      SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
      SalesHeader."No." := LibraryUtility.GenerateGUID;
      SalesHeader.INSERT;

      SalesLine."Document Type" := SalesLine."Document Type"::Order;
      SalesLine."Document No." := SalesHeader."No.";
      SalesLine.Type := SalesLine.Type::Item;
      SalesLine."No." := ItemNo;
      SalesLine."Location Code" := LocationCode;
      SalesLine.Quantity := Qty;
      SalesLine."Qty. to Ship" := QtyToShip;
      SalesLine.INSERT;

      SourceSubtype := SalesLine."Document Type";
      SourceNo := SalesLine."Document No.";
      SourceLineNo := SalesLine."Line No.";
    END;

    LOCAL PROCEDURE RaiseErrorOnChangingQtyToReceiveOnPurchLineIfPickExistsMakePurchLine@79(ItemNo@1002 : Code[20];LocationCode@1007 : Code[10];Qty@1001 : Decimal;QtyToReceive@1000 : Decimal;VAR SourceSubtype@1004 : Integer;VAR SourceNo@1005 : Code[20];VAR SourceLineNo@1006 : Integer);
    VAR
      PurchaseLine@1003 : Record 39;
      PurchaseHeader@1008 : Record 38;
    BEGIN
      PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::Order;
      PurchaseHeader."No." := LibraryUtility.GenerateGUID;
      PurchaseHeader.INSERT;

      PurchaseLine."Document Type" := PurchaseLine."Document Type"::Order;
      PurchaseLine."Document No." := PurchaseHeader."No.";
      PurchaseLine.Type := PurchaseLine.Type::Item;
      PurchaseLine."No." := ItemNo;
      PurchaseLine."Location Code" := LocationCode;
      PurchaseLine.Quantity := Qty;
      PurchaseLine."Qty. to Receive" := QtyToReceive;
      PurchaseLine.INSERT;

      SourceSubtype := PurchaseLine."Document Type";
      SourceNo := PurchaseLine."Document No.";
      SourceLineNo := PurchaseLine."Line No.";
    END;

    LOCAL PROCEDURE RaiseErrorOnChangingQtyToShipOnTransferLineIfPickExistsMakeTransferLine@96(ItemNo@1002 : Code[20];LocationCode@1007 : Code[10];Qty@1001 : Decimal;QtyToShip@1000 : Decimal;VAR SourceNo@1005 : Code[20];VAR SourceLineNo@1006 : Integer);
    VAR
      TransferLine@1003 : Record 5741;
    BEGIN
      TransferLine.INIT;
      TransferLine."Document No." := LibraryUtility.GenerateGUID;
      TransferLine."Item No." := ItemNo;
      TransferLine."Transfer-from Code" := LocationCode;
      TransferLine.Quantity := Qty;
      TransferLine."Qty. to Ship" := QtyToShip;
      TransferLine.INSERT;

      SourceNo := TransferLine."Document No.";
      SourceLineNo := TransferLine."Line No.";
    END;

    LOCAL PROCEDURE RaiseErrorOnChangingQtyToReceiveOnTransferLineIfPickExistsMakeTransferLine@121(ItemNo@1002 : Code[20];LocationCode@1007 : Code[10];Qty@1001 : Decimal;QtyToReceive@1000 : Decimal;VAR SourceNo@1005 : Code[20];VAR SourceLineNo@1006 : Integer);
    VAR
      TransferLine@1003 : Record 5741;
    BEGIN
      TransferLine.INIT;
      TransferLine."Document No." := LibraryUtility.GenerateGUID;
      TransferLine."Item No." := ItemNo;
      TransferLine."Transfer-to Code" := LocationCode;
      TransferLine.Quantity := Qty;
      TransferLine."Qty. in Transit" := Qty;
      TransferLine."Qty. to Receive" := QtyToReceive;
      TransferLine.INSERT;

      SourceNo := TransferLine."Document No.";
      SourceLineNo := TransferLine."Line No.";
    END;

    LOCAL PROCEDURE RaiseErrorOnChangingQtyIfPickExistsMakeWhseActivity@57(ItemNo@1004 : Code[20];LocationCode@1003 : Code[10];Qty@1002 : Decimal;SourceType@1001 : Integer;SourceSubtype@1007 : Integer;SourceNo@1006 : Code[20];SourceLineNo@1005 : Integer);
    VAR
      WhseActivityLine@1000 : Record 5767;
    BEGIN
      WhseActivityLine.INIT;
      WhseActivityLine."No." := LibraryUtility.GenerateGUID;
      WhseActivityLine."Source Type" := SourceType;
      WhseActivityLine."Source Subtype" := SourceSubtype;
      WhseActivityLine."Source No." := SourceNo;
      WhseActivityLine."Source Line No." := SourceLineNo;
      WhseActivityLine."Item No." := ItemNo;
      WhseActivityLine.Quantity := Qty;
      WhseActivityLine."Location Code" := LocationCode;
      WhseActivityLine.INSERT;
    END;

    LOCAL PROCEDURE RaiseErrorOnChangingQtyToShipOnSalesLineIfPickExistsChangeSalesLine@54(VAR FieldName@1006 : Text;NewQtyToShip@1001 : Decimal;SourceSubtype@1004 : Integer;SourceNo@1003 : Code[20];SourceLineNo@1002 : Integer);
    VAR
      SalesLine@1005 : Record 37;
      SalesOrderSubform@1000 : TestPage 46;
    BEGIN
      SalesOrderSubform.TRAP;
      SalesLine.GET(SourceSubtype,SourceNo,SourceLineNo);
      PAGE.RUN(PAGE::"Sales Order Subform",SalesLine);
      SalesOrderSubform."Qty. to Ship".SETVALUE(NewQtyToShip);
      FieldName := SalesLine.FIELDCAPTION("Qty. to Ship");
    END;

    LOCAL PROCEDURE RaiseErrorOnChangingQtyToReceiveOnPurchLineIfPickExistsChangePurchLine@83(VAR FieldName@1006 : Text;NewQtyToReceive@1001 : Decimal;SourceSubtype@1004 : Integer;SourceNo@1003 : Code[20];SourceLineNo@1002 : Integer);
    VAR
      PurchaseLine@1005 : Record 39;
      PurchaseOrderSubform@1000 : TestPage 54;
    BEGIN
      PurchaseOrderSubform.TRAP;
      PurchaseLine.GET(SourceSubtype,SourceNo,SourceLineNo);
      PAGE.RUN(PAGE::"Purchase Order Subform",PurchaseLine);
      PurchaseOrderSubform."Qty. to Receive".SETVALUE(NewQtyToReceive);
      FieldName := PurchaseLine.FIELDCAPTION("Qty. to Receive");
    END;

    LOCAL PROCEDURE RaiseErrorOnChangingQtyToShipOnTransferLineIfPickExistsChangeTransferLine@99(VAR FieldName@1006 : Text;NewQtyToShip@1001 : Decimal;SourceNo@1003 : Code[20];SourceLineNo@1002 : Integer);
    VAR
      TransferLine@1005 : Record 5741;
      TransferOrderSubform@1000 : TestPage 5741;
    BEGIN
      TransferOrderSubform.TRAP;
      TransferLine.GET(SourceNo,SourceLineNo);
      PAGE.RUN(PAGE::"Transfer Order Subform",TransferLine);
      TransferOrderSubform."Qty. to Ship".SETVALUE(NewQtyToShip);
      FieldName := TransferLine.FIELDCAPTION("Qty. to Ship");
    END;

    LOCAL PROCEDURE RaiseErrorOnChangingQtyToReceiveOnTransferLineIfPutAwayExistsChangeTransferLine@117(VAR FieldName@1006 : Text;NewQtyToReceive@1001 : Decimal;SourceNo@1003 : Code[20];SourceLineNo@1002 : Integer);
    VAR
      TransferLine@1005 : Record 5741;
      TransferOrderSubform@1000 : TestPage 5741;
    BEGIN
      TransferOrderSubform.TRAP;
      TransferLine.GET(SourceNo,SourceLineNo);
      PAGE.RUN(PAGE::"Transfer Order Subform",TransferLine);
      TransferOrderSubform."Qty. to Receive".SETVALUE(NewQtyToReceive);
      FieldName := TransferLine.FIELDCAPTION("Qty. to Receive");
    END;

    [Test]
    [HandlerFunctions(ChangingUOMOnSalesRaisesAvailabilityWarningAvailabilityHandler)]
    PROCEDURE ChangingUOMOnSalesRaisesAvailabilityWarning@25();
    VAR
      Item@1000 : Record 27;
      BaseItemUnitOfMeasure@1001 : Record 5404;
      BigItemUnitOfMeasure@1002 : Record 5404;
      ItemLedgerEntry@1003 : Record 32;
      SalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      SalesOrderSubform@1007 : TestPage 46;
    BEGIN
      // Refer to VSTF SE 207913 - second scenario
      Initialize;

      // SETUP : Create item, with two UOMs, add inventory less than the higher UOM, and make sales for 1 base unit of measure
      MockItem(Item);
      MockItemUOM(BaseItemUnitOfMeasure,Item."No.",1);
      MockItemUOM(BigItemUnitOfMeasure,Item."No.",144);
      Item."Stockout Warning" := Item."Stockout Warning"::Yes;
      Item.MODIFY;

      MockILE(ItemLedgerEntry,Item."No.",'',144 - 20); // less than 1 BigUnitOfMeasure
      ItemLedgerEntry."Qty. per Unit of Measure" := BaseItemUnitOfMeasure."Qty. per Unit of Measure";
      ItemLedgerEntry."Unit of Measure Code" := BaseItemUnitOfMeasure.Code;
      ItemLedgerEntry.MODIFY;

      SalesHeader.INIT;
      SalesHeader."Document Type" := SalesLine."Document Type"::Order;
      SalesHeader."No." := LibraryUtility.GenerateGUID;
      SalesHeader.INSERT;
      SalesLine."Document Type" := SalesHeader."Document Type";
      SalesLine."Document No." := SalesHeader."No.";
      SalesLine.Type := SalesLine.Type::Item;
      SalesLine."No." := Item."No.";
      SalesLine.Quantity := 1;
      SalesLine."Quantity (Base)" := 1;
      SalesLine."Outstanding Quantity" := 1;
      SalesLine."Qty. per Unit of Measure" := BaseItemUnitOfMeasure."Qty. per Unit of Measure";
      SalesLine."Unit of Measure Code" := BaseItemUnitOfMeasure.Code;
      SalesLine.INSERT;

      // EXERCISE : change UOM Code in sales to big uom so that sale qty > inventory.
      // VERIFY : Once the availability page comes, it leads to the error
      SalesOrderSubform.TRAP;
      PAGE.RUN(PAGE::"Sales Order Subform",SalesLine);
      ASSERTERROR SalesOrderSubform."Unit of Measure Code".SETVALUE(BigItemUnitOfMeasure.Code);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,UpdateInterruptedErr) > 0,'');
    END;

    [Test]
    PROCEDURE FilterLinesWithItemToPlan_TestLocationFilter@58();
    VAR
      Item@1001 : Record 27;
      ItemLedgerEntry@1000 : Record 32;
      LocationFilter@1005 : Text;
    BEGIN
      // [FEATURE] [Item Ledger Entry] [Filters] [Location]
      FilterLinesWithItemToPlan(Item);
      LocationFilter := Item.GETFILTER("Location Filter");

      Item.RESET;
      Item.SETFILTER("Location Filter",LocationFilter);
      ItemLedgerEntry.FilterLinesWithItemToPlan(Item,FALSE);
      Assert.AreEqual(1,ItemLedgerEntry.COUNT,'');
    END;

    [Test]
    PROCEDURE FilterLinesWithItemToPlan_TestVariantFilter@85();
    VAR
      Item@1001 : Record 27;
      ItemLedgerEntry@1000 : Record 32;
      VariantFilter@1004 : Text;
    BEGIN
      // [FEATURE] [Item Ledger Entry] [Filters] [Variant]
      FilterLinesWithItemToPlan(Item);
      VariantFilter := Item.GETFILTER("Variant Filter");

      Item.RESET;
      Item.SETFILTER("Variant Filter",VariantFilter);
      ItemLedgerEntry.FilterLinesWithItemToPlan(Item,FALSE);
      Assert.AreEqual(1,ItemLedgerEntry.COUNT,'');
    END;

    [Test]
    PROCEDURE FilterLinesWithItemToPlan_TestGlobalDim1Filter@87();
    VAR
      Item@1001 : Record 27;
      ItemLedgerEntry@1000 : Record 32;
      GlobalDim1Filter@1003 : Text;
    BEGIN
      // [FEATURE] [Item Ledger Entry] [Filters] [Global Dimension 1]
      FilterLinesWithItemToPlan(Item);
      GlobalDim1Filter := Item.GETFILTER("Global Dimension 1 Filter");

      Item.RESET;
      Item.SETFILTER("Global Dimension 1 Filter",GlobalDim1Filter);
      ItemLedgerEntry.FilterLinesWithItemToPlan(Item,FALSE);
      Assert.AreEqual(1,ItemLedgerEntry.COUNT,'');
    END;

    [Test]
    PROCEDURE FilterLinesWithItemToPlan_TestGlobalDim2Filter@88();
    VAR
      Item@1001 : Record 27;
      ItemLedgerEntry@1000 : Record 32;
      GlobalDim2Filter@1002 : Text;
    BEGIN
      // [FEATURE] [Item Ledger Entry] [Filters] [Global Dimension 2]
      FilterLinesWithItemToPlan(Item);
      GlobalDim2Filter := Item.GETFILTER("Global Dimension 2 Filter");

      Item.RESET;
      Item.SETFILTER("Global Dimension 2 Filter",GlobalDim2Filter);
      ItemLedgerEntry.FilterLinesWithItemToPlan(Item,FALSE);
      Assert.AreEqual(1,ItemLedgerEntry.COUNT,'');
    END;

    LOCAL PROCEDURE FilterLinesWithItemToPlan@98(VAR Item@1006 : Record 27);
    VAR
      ItemLedgerEntry@1000 : Record 32;
      LocationCode@1005 : Code[10];
      VariantCode@1004 : Code[10];
      GlobalDim1Value@1003 : Code[10];
      GlobalDim2Value@1001 : Code[10];
    BEGIN
      MockItem(Item);
      LocationCode := LibraryUtility.GenerateGUID;
      VariantCode := LibraryUtility.GenerateGUID;
      GlobalDim1Value := LibraryUtility.GenerateGUID;
      GlobalDim2Value := LibraryUtility.GenerateGUID;

      MockCustomILE(ItemLedgerEntry,Item."No.",LocationCode,1,TRUE,'','','');
      MockCustomILE(ItemLedgerEntry,Item."No.",'',1,TRUE,VariantCode,'','');
      MockCustomILE(ItemLedgerEntry,Item."No.",'',1,TRUE,'',GlobalDim1Value,'');
      MockCustomILE(ItemLedgerEntry,Item."No.",'',1,TRUE,'','',GlobalDim2Value);

      Item.SETFILTER("Location Filter",LocationCode);
      Item.SETFILTER("Variant Filter",VariantCode);
      Item.SETFILTER("Global Dimension 1 Filter",GlobalDim1Value);
      Item.SETFILTER("Global Dimension 2 Filter",GlobalDim2Value);
    END;

    [ModalPageHandler]
    PROCEDURE ChangingUOMOnSalesRaisesAvailabilityWarningAvailabilityHandler@56(VAR CheckAvailability@1000 : TestPage 342);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [SCM] [Warehouse] [UT]
    }
    END.
  }
}

