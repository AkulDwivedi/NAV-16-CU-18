OBJECT Codeunit 134260 Bank Pmt. Appl. Rule UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryRandom@1000 : Codeunit 130440;
      Assert@1002 : Codeunit 130000;
      isInitialized@1001 : Boolean;
      MinPriority@1003 : Integer;
      MaxPriority@1004 : Integer;
      MatchConfidenceOptionsCount@1005 : Integer;
      ConfidenceScoreRange@1006 : Integer;

    LOCAL PROCEDURE Initialize@14();
    VAR
      BankPmtApplRule@1000 : Record 1252;
      RecordRef@1001 : RecordRef;
    BEGIN
      // Lazy Setup.
      BankPmtApplRule.DELETEALL;
      IF isInitialized THEN
        EXIT;

      isInitialized := TRUE;
      ConfidenceScoreRange := 1000;
      MaxPriority := ConfidenceScoreRange - 1;
      MinPriority := 1;
      RecordRef.GETTABLE(BankPmtApplRule);
      MatchConfidenceOptionsCount := GetNumberOfOptions(RecordRef.NUMBER,BankPmtApplRule.FIELDNO("Match Confidence"));
    END;

    [Test]
    PROCEDURE TestInsertingLineUpdatesTheScore@1();
    VAR
      BankPmtApplRule@1000 : Record 1252;
    BEGIN
      Initialize;

      InsertRule(BankPmtApplRule,AnyConfidence);

      Assert.AreEqual(
        CalculateScore(BankPmtApplRule),BankPmtApplRule.Score,'Score was not updated correctly  after inserting a record');
    END;

    [Test]
    PROCEDURE TestRenamingLineUpdatesTheScore@2();
    VAR
      BankPmtApplRule@1000 : Record 1252;
      Score@1001 : Integer;
    BEGIN
      Initialize;

      InsertRule(BankPmtApplRule,AnyConfidence);
      Score := BankPmtApplRule.Score;

      BankPmtApplRule.RENAME(BankPmtApplRule."Match Confidence",BankPmtApplRule.Priority - 1);

      Assert.AreEqual(CalculateScore(BankPmtApplRule),BankPmtApplRule.Score,'Score was not updated after renaming a record');
      Assert.AreNotEqual(Score,BankPmtApplRule.Score,'Score should have been changed by renaming a record');
    END;

    [Test]
    PROCEDURE TestInsertingLinesWithSameConfidenceDifferentPriorities@13();
    VAR
      BankPmtApplRule@1000 : Record 1252;
      BankPmtApplRule2@1001 : Record 1252;
    BEGIN
      Initialize;

      InsertRule(BankPmtApplRule,AnyConfidence);
      InsertRule(BankPmtApplRule2,BankPmtApplRule."Match Confidence");

      Assert.AreEqual(
        CalculateScore(BankPmtApplRule2),BankPmtApplRule2.Score,'Score was not updated correctly after inserting a record');
    END;

    [Test]
    PROCEDURE TestSettingPrioritySmallerThanMinimumValueRaisesAnError@3();
    VAR
      BankPmtApplRule@1000 : Record 1252;
    BEGIN
      Initialize;
      InsertRule(BankPmtApplRule,AnyConfidence);

      ASSERTERROR BankPmtApplRule.VALIDATE(Priority,MinPriority - 1);
      Assert.ExpectedError(STRSUBSTNO('The %1 you entered is invalid',BankPmtApplRule.FIELDCAPTION(Priority)));
    END;

    [Test]
    PROCEDURE TestSettingPriorityLargerThanMaximumValueRaisesAnError@12();
    VAR
      BankPmtApplRule@1000 : Record 1252;
    BEGIN
      Initialize;
      InsertRule(BankPmtApplRule,AnyConfidence);

      ASSERTERROR BankPmtApplRule.VALIDATE(Priority,MaxPriority + 1);
      Assert.ExpectedError(STRSUBSTNO('The %1 you entered is invalid',BankPmtApplRule.FIELDCAPTION(Priority)));
    END;

    [Test]
    PROCEDURE TestSettingPriorityToACorrectValueDoesnotRaiseAnError@19();
    VAR
      BankPmtApplRule@1000 : Record 1252;
      PriorityToSet@1001 : Integer;
    BEGIN
      Initialize;
      BankPmtApplRule.INIT;
      PriorityToSet := LibraryRandom.RandIntInRange(MinPriority,MaxPriority);

      BankPmtApplRule.VALIDATE(Priority,PriorityToSet);

      Assert.AreEqual(PriorityToSet,BankPmtApplRule.Priority,'Priority value was not set correctly');
    END;

    [Test]
    PROCEDURE TestScoreCalculationTest@4();
    VAR
      BankPmtApplRule@1001 : Record 1252;
      I@1000 : Integer;
      PreviousScore@1002 : Integer;
    BEGIN
      Initialize;
      PreviousScore := 0;
      FOR I := 0 TO MatchConfidenceOptionsCount - 1 DO BEGIN
        InsertRule(BankPmtApplRule,I);
        Assert.AreEqual(BankPmtApplRule.Score,CalculateScore(BankPmtApplRule),'Score was not calculate correctly');

        IF I <> 0 THEN
          Assert.IsTrue(
            BankPmtApplRule.Score - PreviousScore > 0,'Score was higher or equal than the score for higher match confidence');
        PreviousScore := BankPmtApplRule.Score;
      END;
    END;

    [Test]
    PROCEDURE TestGetBestMatchScoreNoMatchesFound@21();
    VAR
      TempBankPmtApplRule@1003 : TEMPORARY Record 1252;
      BankPmtApplRule@1000 : Record 1252;
      ParameterBankPmtApplRule@1001 : Record 1252;
      MatchScore@1002 : Integer;
    BEGIN
      Initialize;
      InsertRule(BankPmtApplRule,AnyConfidence);
      BankPmtApplRule.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes);
      BankPmtApplRule.MODIFY(TRUE);

      ParameterBankPmtApplRule.VALIDATE(
        "Doc. No./Ext. Doc. No. Matched",
        ParameterBankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No);

      TempBankPmtApplRule.LoadRules;
      MatchScore := TempBankPmtApplRule.GetBestMatchScore(ParameterBankPmtApplRule);
      Assert.AreEqual(0,MatchScore,'Wrong rule was selected, expected no rules found');
    END;

    [Test]
    PROCEDURE TestGetBestMatchScoreOnEmptyTable@23();
    VAR
      TempBankPmtApplRule@1002 : TEMPORARY Record 1252;
      ParameterBankPmtApplRule@1000 : Record 1252;
      MatchScore@1001 : Integer;
    BEGIN
      Initialize;
      ParameterBankPmtApplRule.VALIDATE(
        "Doc. No./Ext. Doc. No. Matched",ParameterBankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No);

      TempBankPmtApplRule.LoadRules;
      MatchScore := TempBankPmtApplRule.GetBestMatchScore(ParameterBankPmtApplRule);

      Assert.AreEqual(0,MatchScore,'Wrong rule was selected');
    END;

    [Test]
    PROCEDURE TestGetBestMatchScoreOneRowFound@24();
    VAR
      BankPmtApplRule@1000 : Record 1252;
      BankPmtApplRule2@1001 : Record 1252;
      ParameterBankPmtApplRule@1002 : Record 1252;
      TempBankPmtApplRule@1004 : TEMPORARY Record 1252;
      MatchScore@1003 : Integer;
    BEGIN
      Initialize;

      // Setup
      InsertRule(BankPmtApplRule,AnyConfidence);
      BankPmtApplRule.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes);
      BankPmtApplRule.MODIFY(TRUE);

      InsertRule(BankPmtApplRule2,AnyConfidence);
      BankPmtApplRule2.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No);
      BankPmtApplRule2.MODIFY(TRUE);

      ParameterBankPmtApplRule.VALIDATE(
        "Doc. No./Ext. Doc. No. Matched",ParameterBankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No);

      // Execute
      TempBankPmtApplRule.LoadRules;
      MatchScore := TempBankPmtApplRule.GetBestMatchScore(ParameterBankPmtApplRule);

      // Verify
      Assert.AreEqual(BankPmtApplRule2.Score,MatchScore,'Wrong rule was selected');
    END;

    [Test]
    PROCEDURE TestGetBestMatchScoreMultipleRowsFound@25();
    VAR
      BankPmtApplRule@1002 : Record 1252;
      BankPmtApplRule2@1001 : Record 1252;
      BankPmtApplRule3@1003 : Record 1252;
      ParameterBankPmtApplRule@1000 : Record 1252;
      TempBankPmtApplRule@1005 : TEMPORARY Record 1252;
      MatchScore@1004 : Integer;
    BEGIN
      Initialize;

      // Setup
      InsertRule(BankPmtApplRule,BankPmtApplRule."Match Confidence"::High);
      BankPmtApplRule.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes);
      BankPmtApplRule.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes);
      BankPmtApplRule.MODIFY(TRUE);

      // Lower priority rule is inserted first to validate the sorting
      InsertRule(BankPmtApplRule3,BankPmtApplRule."Match Confidence"::Low);
      BankPmtApplRule3.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No);
      BankPmtApplRule3.VALIDATE("Related Party Matched",BankPmtApplRule."Related Party Matched"::Fully);
      BankPmtApplRule3.MODIFY(TRUE);

      InsertRule(BankPmtApplRule2,BankPmtApplRule."Match Confidence"::Medium);
      BankPmtApplRule2.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No);
      BankPmtApplRule2.VALIDATE("Related Party Matched",BankPmtApplRule."Related Party Matched"::"Not Considered");
      BankPmtApplRule2.MODIFY(TRUE);

      ParameterBankPmtApplRule.VALIDATE(
        "Doc. No./Ext. Doc. No. Matched",ParameterBankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No);
      ParameterBankPmtApplRule.VALIDATE(
        "Doc. No./Ext. Doc. No. Matched",ParameterBankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No);

      // Execute
      TempBankPmtApplRule.LoadRules;
      MatchScore := TempBankPmtApplRule.GetBestMatchScore(ParameterBankPmtApplRule);

      // Verify
      Assert.AreEqual(BankPmtApplRule2.Score,MatchScore,
        'Wrong rule was selected, Rule 2 should be selected since it has the highest priority');
    END;

    [Test]
    PROCEDURE TestGetBestMatchScoreSkipRuleIncluded@26();
    VAR
      BankPmtApplRule@1003 : Record 1252;
      BankPmtApplRule2@1002 : Record 1252;
      ParameterBankPmtApplRule@1000 : Record 1252;
      TempBankPmtApplRule@1004 : TEMPORARY Record 1252;
      MatchScore@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      InsertRule(BankPmtApplRule,BankPmtApplRule."Match Confidence"::High);
      BankPmtApplRule.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Not Considered");
      BankPmtApplRule.VALIDATE("Related Party Matched",BankPmtApplRule."Related Party Matched"::"Not Considered");
      BankPmtApplRule.VALIDATE("Amount Incl. Tolerance Matched",BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");
      BankPmtApplRule.MODIFY(TRUE);

      InsertRule(BankPmtApplRule2,BankPmtApplRule."Match Confidence"::Medium);
      BankPmtApplRule2.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes);
      BankPmtApplRule2.VALIDATE("Related Party Matched",BankPmtApplRule."Related Party Matched"::Partially);
      BankPmtApplRule2.VALIDATE("Amount Incl. Tolerance Matched",BankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");
      BankPmtApplRule2.MODIFY(TRUE);

      ParameterBankPmtApplRule.VALIDATE(
        "Doc. No./Ext. Doc. No. Matched",ParameterBankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes);
      ParameterBankPmtApplRule.VALIDATE("Related Party Matched",ParameterBankPmtApplRule."Related Party Matched"::Partially);
      ParameterBankPmtApplRule.VALIDATE(
        "Amount Incl. Tolerance Matched",ParameterBankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      // Execute
      TempBankPmtApplRule.LoadRules;
      Assert.AreEqual(TempBankPmtApplRule.COUNT,2,'Wrong number of rules was found in the rule table');
      MatchScore := TempBankPmtApplRule.GetBestMatchScore(ParameterBankPmtApplRule);

      // Verify
      Assert.AreEqual(BankPmtApplRule.Score,MatchScore,
        'Wrong rule was selected, Rule 1 should be selected since it has the highest priority, Skip fields should be included');
    END;

    [Test]
    PROCEDURE TestGetBestMatchDocumentNoFilterIsSet@7();
    VAR
      BankPmtApplRule@1003 : Record 1252;
      BankPmtApplRule2@1002 : Record 1252;
      ParameterBankPmtApplRule@1000 : Record 1252;
      TempBankPmtApplRule@1004 : TEMPORARY Record 1252;
      MatchScore@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      InsertRule(BankPmtApplRule,BankPmtApplRule."Match Confidence"::High);
      BankPmtApplRule.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No);
      BankPmtApplRule.VALIDATE("Related Party Matched",BankPmtApplRule."Related Party Matched"::"Not Considered");
      BankPmtApplRule.VALIDATE("Amount Incl. Tolerance Matched",BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");
      BankPmtApplRule.MODIFY(TRUE);

      InsertRule(BankPmtApplRule2,BankPmtApplRule."Match Confidence"::Medium);
      BankPmtApplRule2.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes);
      BankPmtApplRule2.VALIDATE("Related Party Matched",BankPmtApplRule."Related Party Matched"::"Not Considered");
      BankPmtApplRule2.VALIDATE("Amount Incl. Tolerance Matched",BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");
      BankPmtApplRule2.MODIFY(TRUE);

      // Parameter must include rule 2, since algorithm uses find first. If filer is not set test will have false positive.
      ParameterBankPmtApplRule.VALIDATE(
        "Doc. No./Ext. Doc. No. Matched",ParameterBankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes);
      ParameterBankPmtApplRule.VALIDATE("Related Party Matched",ParameterBankPmtApplRule."Related Party Matched"::Partially);
      ParameterBankPmtApplRule.VALIDATE(
        "Amount Incl. Tolerance Matched",ParameterBankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      // Execute
      TempBankPmtApplRule.LoadRules;
      MatchScore := TempBankPmtApplRule.GetBestMatchScore(ParameterBankPmtApplRule);

      // Verify
      Assert.AreEqual(BankPmtApplRule2.Score,MatchScore,
        'Wrong rule was selected, Rule 2 should be selected.');
    END;

    [Test]
    PROCEDURE TestGetBestMatchRelatedPartyIdentifiedFilterIsSet@32();
    VAR
      BankPmtApplRule@1003 : Record 1252;
      BankPmtApplRule2@1002 : Record 1252;
      ParameterBankPmtApplRule@1000 : Record 1252;
      TempBankPmtApplRule@1004 : TEMPORARY Record 1252;
      MatchScore@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      InsertRule(BankPmtApplRule,BankPmtApplRule."Match Confidence"::High);
      BankPmtApplRule.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Not Considered");
      BankPmtApplRule.VALIDATE("Related Party Matched",BankPmtApplRule."Related Party Matched"::No);
      BankPmtApplRule.VALIDATE("Amount Incl. Tolerance Matched",BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");
      BankPmtApplRule.MODIFY(TRUE);

      InsertRule(BankPmtApplRule2,BankPmtApplRule."Match Confidence"::Medium);
      BankPmtApplRule2.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Not Considered");
      BankPmtApplRule2.VALIDATE("Related Party Matched",BankPmtApplRule."Related Party Matched"::Partially);
      BankPmtApplRule2.VALIDATE("Amount Incl. Tolerance Matched",BankPmtApplRule."Amount Incl. Tolerance Matched"::"Not Considered");
      BankPmtApplRule2.MODIFY(TRUE);

      // Parameter must include rule 2, since algorithm uses find first. If filer is not set test will have false positive.
      ParameterBankPmtApplRule.VALIDATE(
        "Doc. No./Ext. Doc. No. Matched",ParameterBankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes);
      ParameterBankPmtApplRule.VALIDATE("Related Party Matched",ParameterBankPmtApplRule."Related Party Matched"::Partially);
      ParameterBankPmtApplRule.VALIDATE(
        "Amount Incl. Tolerance Matched",ParameterBankPmtApplRule."Amount Incl. Tolerance Matched"::"One Match");

      // Execute
      TempBankPmtApplRule.LoadRules;
      MatchScore := TempBankPmtApplRule.GetBestMatchScore(ParameterBankPmtApplRule);

      // Verify
      Assert.AreEqual(BankPmtApplRule2.Score,MatchScore,
        'Wrong rule was selected, Rule 1 should be selected.');
    END;

    [Test]
    PROCEDURE TestGetBestMatchAmountInclToleranceFilterIsSet@41();
    VAR
      BankPmtApplRule@1003 : Record 1252;
      BankPmtApplRule2@1002 : Record 1252;
      ParameterBankPmtApplRule@1000 : Record 1252;
      TempBankPmtApplRule@1004 : TEMPORARY Record 1252;
      MatchScore@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      InsertRule(BankPmtApplRule,BankPmtApplRule."Match Confidence"::High);
      BankPmtApplRule.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Not Considered");
      BankPmtApplRule.VALIDATE("Related Party Matched",BankPmtApplRule."Related Party Matched"::"Not Considered");
      BankPmtApplRule.VALIDATE("Amount Incl. Tolerance Matched",BankPmtApplRule."Amount Incl. Tolerance Matched"::"No Matches");
      BankPmtApplRule.MODIFY(TRUE);

      InsertRule(BankPmtApplRule2,BankPmtApplRule."Match Confidence"::Medium);
      BankPmtApplRule2.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Not Considered");
      BankPmtApplRule2.VALIDATE("Related Party Matched",BankPmtApplRule."Related Party Matched"::"Not Considered");
      BankPmtApplRule2.VALIDATE("Amount Incl. Tolerance Matched",BankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");
      BankPmtApplRule2.MODIFY(TRUE);

      // Parameter must include rule 2, since algorithm uses find first. If filer is not set test will have false positive.
      ParameterBankPmtApplRule.VALIDATE(
        "Doc. No./Ext. Doc. No. Matched",ParameterBankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes);
      ParameterBankPmtApplRule.VALIDATE("Related Party Matched",ParameterBankPmtApplRule."Related Party Matched"::Partially);
      ParameterBankPmtApplRule.VALIDATE(
        "Amount Incl. Tolerance Matched",ParameterBankPmtApplRule."Amount Incl. Tolerance Matched"::"Multiple Matches");

      // Execute
      TempBankPmtApplRule.LoadRules;
      MatchScore := TempBankPmtApplRule.GetBestMatchScore(ParameterBankPmtApplRule);

      // Verify
      Assert.AreEqual(BankPmtApplRule2.Score,MatchScore,
        'Wrong rule was selected, Rule 1 should be selected.');
    END;

    [Test]
    PROCEDURE TestCallingGetBestMatchScoreMultipleTimesWithoutReset@5();
    VAR
      BankPmtApplRule@1003 : Record 1252;
      BankPmtApplRule2@1002 : Record 1252;
      ParameterBankPmtApplRule@1000 : Record 1252;
      TempBankPmtApplRule@1004 : TEMPORARY Record 1252;
      MatchScore@1001 : Integer;
    BEGIN
      Initialize;
      InsertRule(BankPmtApplRule,BankPmtApplRule."Match Confidence"::High);
      BankPmtApplRule.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes);
      BankPmtApplRule.MODIFY(TRUE);

      InsertRule(BankPmtApplRule2,BankPmtApplRule2."Match Confidence"::Medium);
      BankPmtApplRule2.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No);
      BankPmtApplRule2.MODIFY(TRUE);

      ParameterBankPmtApplRule.VALIDATE(
        "Doc. No./Ext. Doc. No. Matched",
        ParameterBankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No);

      TempBankPmtApplRule.LoadRules;

      // Execute
      MatchScore := TempBankPmtApplRule.GetBestMatchScore(ParameterBankPmtApplRule);

      // Verify
      Assert.AreEqual(BankPmtApplRule2.Score,MatchScore,
        'Wrong rule was selected, Rule 2 should be selected since it has the highest priority, Skip fields should be included');

      // Execute to match rule 1
      CLEAR(ParameterBankPmtApplRule);
      ParameterBankPmtApplRule.VALIDATE(
        "Doc. No./Ext. Doc. No. Matched",
        ParameterBankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes);

      MatchScore := TempBankPmtApplRule.GetBestMatchScore(ParameterBankPmtApplRule);

      // Verify
      Assert.AreEqual(BankPmtApplRule.Score,MatchScore,
        'Wrong rule was selected, Rule should be selected since it has the highest priority, Skip fields should be included');
    END;

    [Test]
    PROCEDURE TestCallingLoadOnNonTemporaryRecordThrowsError@16();
    VAR
      BankPmtApplRule@1003 : Record 1252;
    BEGIN
      Initialize;
      ASSERTERROR BankPmtApplRule.LoadRules;

      Assert.ExpectedError('Programming error: The LoadRules function can only be called from temporary records');
    END;

    [Test]
    PROCEDURE TestCallingLoadMultipleTimesUpdatesResults@28();
    VAR
      BankPmtApplRule@1003 : Record 1252;
      BankPmtApplRule2@1002 : Record 1252;
      TempBankPmtApplRule@1004 : TEMPORARY Record 1252;
    BEGIN
      Initialize;

      // Setup
      InsertRule(BankPmtApplRule,BankPmtApplRule."Match Confidence"::High);
      BankPmtApplRule.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes);
      BankPmtApplRule.MODIFY(TRUE);

      // Execute
      TempBankPmtApplRule.LoadRules;

      // Verify
      Assert.AreEqual(TempBankPmtApplRule.COUNT,1,'Wrong number of rules has been added');

      // Verify another call updates values
      InsertRule(BankPmtApplRule2,BankPmtApplRule."Match Confidence"::Medium);
      BankPmtApplRule2.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::No);
      BankPmtApplRule2.MODIFY(TRUE);

      TempBankPmtApplRule.LoadRules;
      Assert.AreEqual(TempBankPmtApplRule.COUNT,2,'Wrong number of rules has been added');

      // Verify call can remove values
      CLEAR(BankPmtApplRule);
      BankPmtApplRule.DELETEALL;
      TempBankPmtApplRule.LoadRules;

      Assert.IsTrue(TempBankPmtApplRule.ISEMPTY,'Rules table should be empty');
    END;

    [Test]
    PROCEDURE TestTextMapperScoreOverridesMediumConfidenceRule@34();
    VAR
      BankPmtApplRule@1003 : Record 1252;
    BEGIN
      Initialize;

      InsertRule(BankPmtApplRule,BankPmtApplRule."Match Confidence"::Medium);
      BankPmtApplRule.RENAME(BankPmtApplRule."Match Confidence"::Medium,1);

      Assert.IsTrue(
        BankPmtApplRule.GetTextMapperScore > BankPmtApplRule.Score,
        'Text mapper rule must have higher score than best Medium confidence rule');
    END;

    [Test]
    PROCEDURE TestNotCosideredMatchesDocumentNoMultiple@10();
    VAR
      BankPmtApplRule@1003 : Record 1252;
      ParameterBankPmtApplRule@1000 : Record 1252;
      TempBankPmtApplRule@1004 : TEMPORARY Record 1252;
      MatchScore@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      InsertRule(BankPmtApplRule,BankPmtApplRule."Match Confidence"::High);
      BankPmtApplRule.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Not Considered");
      BankPmtApplRule.MODIFY(TRUE);

      ParameterBankPmtApplRule.VALIDATE(
        "Doc. No./Ext. Doc. No. Matched",ParameterBankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple");
      ParameterBankPmtApplRule.VALIDATE("Related Party Matched",BankPmtApplRule."Related Party Matched");
      ParameterBankPmtApplRule.VALIDATE("Amount Incl. Tolerance Matched",BankPmtApplRule."Amount Incl. Tolerance Matched");

      // Execute
      TempBankPmtApplRule.LoadRules;
      Assert.AreEqual(TempBankPmtApplRule.COUNT,1,'Wrong number of rules was found in the rule table');
      MatchScore := TempBankPmtApplRule.GetBestMatchScore(ParameterBankPmtApplRule);

      // Verify
      Assert.AreEqual(BankPmtApplRule.Score,MatchScore,'Document Matched Multiple should be selected by the Not Considered');
    END;

    [Test]
    PROCEDURE TestDocumentMatchedYesDoesntIncludeMultiple@11();
    VAR
      BankPmtApplRule@1003 : Record 1252;
      ParameterBankPmtApplRule@1000 : Record 1252;
      TempBankPmtApplRule@1004 : TEMPORARY Record 1252;
      MatchScore@1001 : Integer;
    BEGIN
      Initialize;

      // Setup
      InsertRule(BankPmtApplRule,BankPmtApplRule."Match Confidence"::High);
      BankPmtApplRule.VALIDATE("Doc. No./Ext. Doc. No. Matched",BankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::"Yes - Multiple");
      BankPmtApplRule.MODIFY(TRUE);

      ParameterBankPmtApplRule.VALIDATE(
        "Doc. No./Ext. Doc. No. Matched",ParameterBankPmtApplRule."Doc. No./Ext. Doc. No. Matched"::Yes);
      ParameterBankPmtApplRule.VALIDATE("Related Party Matched",BankPmtApplRule."Related Party Matched");
      ParameterBankPmtApplRule.VALIDATE("Amount Incl. Tolerance Matched",BankPmtApplRule."Amount Incl. Tolerance Matched");

      // Execute
      TempBankPmtApplRule.LoadRules;
      Assert.AreEqual(TempBankPmtApplRule.COUNT,1,'Wrong number of rules was found in the rule table');
      MatchScore := TempBankPmtApplRule.GetBestMatchScore(ParameterBankPmtApplRule);

      // Verify
      Assert.AreEqual(0,MatchScore,'Document matched yes should not hit multiple rule');
    END;

    LOCAL PROCEDURE CalculateScore@8(BankPmtApplRule@1000 : Record 1252) : Integer;
    BEGIN
      EXIT((BankPmtApplRule."Match Confidence" + 1) * ConfidenceScoreRange - BankPmtApplRule.Priority);
    END;

    LOCAL PROCEDURE InsertRule@15(VAR BankPmtApplRule@1000 : Record 1252;MatchConfidence@1001 : Option);
    BEGIN
      BankPmtApplRule.INIT;
      BankPmtApplRule."Match Confidence" := MatchConfidence;
      BankPmtApplRule.Priority := LibraryRandom.RandIntInRange(MinPriority + 1,MaxPriority - 1);
      BankPmtApplRule.INSERT(TRUE);
    END;

    LOCAL PROCEDURE AnyConfidence@22() : Integer;
    BEGIN
      EXIT(LibraryRandom.RandIntInRange(0,MatchConfidenceOptionsCount));
    END;

    LOCAL PROCEDURE GetNumberOfOptions@9(TableID@1000 : Integer;FieldNo@1001 : Integer) : Integer;
    VAR
      Field@1003 : Record 2000000041;
      RecordRef@1009 : RecordRef;
      FieldRef@1008 : FieldRef;
      OptionStringCommas@1002 : Text[30];
    BEGIN
      RecordRef.OPEN(TableID);
      FieldRef := RecordRef.FIELD(FieldNo);
      Field.GET(RecordRef.NUMBER,FieldRef.NUMBER);
      IF Field.Type <> Field.Type::Option THEN
        EXIT(0);
      OptionStringCommas := DELCHR(FieldRef.OPTIONSTRING,'=',DELCHR(FieldRef.OPTIONSTRING,'=',','));
      IF (STRLEN(OptionStringCommas) = 0) AND (STRLEN(FieldRef.OPTIONSTRING) = 0) THEN
        EXIT(0);
      EXIT(STRLEN(OptionStringCommas) + 1);
    END;

    BEGIN
    {
      // [FEATURE] [Bank Payment Application] [Rule]
    }
    END.
  }
}

