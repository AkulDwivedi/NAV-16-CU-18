OBJECT Codeunit 137041 SCM Bugfixes Run Modal Errors
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      SalesReceivablesSetup@1006 : Record 311;
      ItemJournalTemplate@1004 : Record 82;
      ItemJournalBatch@1003 : Record 233;
      LibraryUtility@1005 : Codeunit 131000;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryInventory@1002 : Codeunit 132201;
      LibraryDimension@1007 : Codeunit 131001;
      LibrarySales@1009 : Codeunit 130509;
      Assert@1008 : Codeunit 130000;
      isInitialized@1001 : Boolean;

    [Test]
    PROCEDURE StockoutSetupFalseNoWarning@34();
    BEGIN
      // Check Stockout warning does not appear when Stockout setup is FALSE.
      Initialize;
      StockoutWarning(FALSE,FALSE);  // Stockout warning and Drop Shipment.
    END;

    [Test]
    [HandlerFunctions(StockoutPageHandler)]
    PROCEDURE StockoutSetupTrueAndWarning@3();
    BEGIN
      // Check Stockout warning appears when Stockout setup is TRUE.
      Initialize;
      StockoutWarning(TRUE,FALSE);
    END;

    [Test]
    PROCEDURE StockoutDropShipNoWarning@8();
    BEGIN
      // Check Stockout warning does not appear even when Stockout setup is TRUE, with Drop Shipment.
      Initialize;
      StockoutWarning(TRUE,TRUE);
    END;

    LOCAL PROCEDURE StockoutWarning@20(StockoutWarning@1000 : Boolean;DropShip@1001 : Boolean);
    VAR
      TempSalesReceivablesSetup@1004 : TEMPORARY Record 311;
      SalesLine@1003 : Record 37;
      ItemCheckAvail@1002 : Codeunit 311;
    BEGIN
      // Setup.
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup,SalesReceivablesSetup."Credit Warnings"::"No Warning",StockoutWarning);
      CreateSalesOrderCustCrLimit(SalesLine);
      LibraryInventory.UpdateSalesLine(SalesLine,SalesLine.FIELDNO("Drop Shipment"),DropShip);

      // Verify : Check Item Stock Availability without and with Stockout warning.
      Assert.IsFalse(ItemCheckAvail.SalesLineCheck(SalesLine),'');

      // Teardown.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE CreditWarningSetupNoWarning@5();
    BEGIN
      // Check Credit warning does not appear when Credit warning setup is No Warning.
      Initialize;
      StockoutAndCreditWarnings(SalesReceivablesSetup."Credit Warnings"::"No Warning",FALSE,FALSE,TRUE);
    END;

    [Test]
    [HandlerFunctions(CreditLimitPageHandler)]
    PROCEDURE CreditLimitWarning@6();
    BEGIN
      // Check Credit warning appears when Credit warning setup is Both Warnings.
      Initialize;
      StockoutAndCreditWarnings(SalesReceivablesSetup."Credit Warnings"::"Both Warnings",FALSE,FALSE,TRUE);
    END;

    [Test]
    [HandlerFunctions(StockoutPageHandler,CreditLimitPageHandler)]
    PROCEDURE StockAndCreditLimitWarning@10();
    BEGIN
      // Check Stock and Credit warning appears when Stockout setup is TRUE and Credit warning setup is Both Warnings.
      Initialize;
      StockoutAndCreditWarnings(SalesReceivablesSetup."Credit Warnings"::"Both Warnings",TRUE,FALSE,TRUE);
    END;

    [Test]
    [HandlerFunctions(CreditLimitPageHandler)]
    PROCEDURE DropShipCreditLimitWarning@9();
    BEGIN
      // Check Stock and Credit warning when Drop Shipment is True.
      Initialize;
      StockoutAndCreditWarnings(SalesReceivablesSetup."Credit Warnings"::"Both Warnings",TRUE,TRUE,TRUE);  // Drop Shipment-TRUE.
    END;

    [Test]
    [HandlerFunctions(CreditLimitPageHandler,StockoutPageHandler)]
    PROCEDURE DropShipStockCreditWarning@15();
    BEGIN
      // Check Stock and Credit warning when Drop Shipment is True and after Drop Shipment is False.
      Initialize;
      StockoutAndCreditWarnings(SalesReceivablesSetup."Credit Warnings"::"Both Warnings",TRUE,TRUE,FALSE);
    END;

    [Test]
    [HandlerFunctions(StockoutPageHandler)]
    PROCEDURE CreditWarningStockoutWarning@44();
    BEGIN
      // Check Credit warning does not appear when Credit warning setup is No Warning and Stock Out Warning TRUE.
      Initialize;
      StockoutAndCreditWarnings(SalesReceivablesSetup."Credit Warnings"::"No Warning",TRUE,FALSE,FALSE);
    END;

    LOCAL PROCEDURE StockoutAndCreditWarnings@38(CreditWarnings@1000 : Option;StockoutWarning@1001 : Boolean;DropShipBefore@1006 : Boolean;DropShipAfter@1007 : Boolean);
    VAR
      TempSalesReceivablesSetup@1005 : TEMPORARY Record 311;
      SalesLine@1004 : Record 37;
      ItemCheckAvail@1003 : Codeunit 311;
      CustCheckCrLimit@1002 : Codeunit 312;
    BEGIN
      // Setup.
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup,CreditWarnings,StockoutWarning);
      CreateSalesOrderCustCrLimit(SalesLine);
      LibraryInventory.UpdateSalesLine(SalesLine,SalesLine.FIELDNO("Drop Shipment"),DropShipBefore);

      // Verify: Check Item Stock Availability.
      Assert.IsFalse(ItemCheckAvail.SalesLineCheck(SalesLine),'');

      // Exercise: Update Sales Order line with Item Unit Price.
      LibraryInventory.UpdateSalesLine(SalesLine,SalesLine.FIELDNO("Unit Price"),LibraryRandom.RandInt(10));

      // Verify : Check Customer Credit Limit.
      CustCheckCrLimit.SalesLineCheck(SalesLine);

      // Exercise: Update Sales Line with required Drop Shipment value.
      LibraryInventory.UpdateSalesLine(SalesLine,SalesLine.FIELDNO("Drop Shipment"),DropShipAfter);

      // Verify: Check Item Stock Availability with Stockout warning.
      Assert.IsFalse(ItemCheckAvail.SalesLineCheck(SalesLine),'');

      // Teardown.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE StockEqualNoWarning@7();
    VAR
      TempSalesReceivablesSetup@1003 : TEMPORARY Record 311;
      SalesLine@1002 : Record 37;
      Item@1004 : Record 27;
      Customer@1005 : Record 18;
      SalesHeader@1006 : Record 36;
      ItemCheckAvail@1001 : Codeunit 311;
    BEGIN
      // Setup.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup,SalesReceivablesSetup."Credit Warnings"::"Both Warnings",TRUE);
      CreateItemWithInventory(Item,LibraryRandom.RandInt(10));  // Inventory value important for test.
      CreateCustomerWithCreditLimit(Customer,LibraryRandom.RandInt(10));  // Credit Limit greater than Zero important for test.

      // Exercise: Create Sales Order With required Item Quantity.
      Item.CALCFIELDS(Inventory);
      CreateSalesOrder(SalesHeader,SalesLine,Customer."No.",Item."No.",Item.Inventory);

      // Verify : Check Item Stock Availability without any warnings.
      Assert.IsFalse(ItemCheckAvail.SalesLineCheck(SalesLine),'');

      // Teardown.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    PROCEDURE CreditLimitEqualNoWarning@13();
    VAR
      GeneralLedgerSetup@1130 : Record 98;
      TempSalesReceivablesSetup@1008 : TEMPORARY Record 311;
      Item@1004 : Record 27;
      Customer@1002 : Record 18;
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      CustCheckCrLimit@1007 : Codeunit 312;
    BEGIN
      // Setup.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup,SalesReceivablesSetup."Credit Warnings"::"Both Warnings",TRUE);
      CreateItemWithInventory(Item,LibraryRandom.RandInt(10));  // Inventory value important for test.
      CreateCustomerWithCreditLimit(Customer,LibraryRandom.RandInt(10));  // Credit Limit greater than Zero important for test.

      // Create Sales Order With required Item Quantity.
      Item.CALCFIELDS(Inventory);
      CreateSalesOrder(SalesHeader,SalesLine,Customer."No.",Item."No.",Item.Inventory);

      // Exercise: Update Sales Order line with Item Unit Price.
      GeneralLedgerSetup.GET;
      LibraryInventory.UpdateSalesLine(SalesLine,SalesLine.FIELDNO("Unit Price"),Customer."Credit Limit (LCY)" / Item.Inventory);

      // Verify : Check Customer Credit Limit without any warnings.
      CustCheckCrLimit.SalesLineCheck(SalesLine);

      // Teardown.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE NewCustStockEqualNoWarning@36();
    VAR
      TempSalesReceivablesSetup@1003 : TEMPORARY Record 311;
      SalesLine@1002 : Record 37;
      Item@1004 : Record 27;
      Customer2@1007 : Record 18;
      Customer@1005 : Record 18;
      SalesHeader@1006 : Record 36;
      ItemCheckAvail@1001 : Codeunit 311;
    BEGIN
      // Setup.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup,SalesReceivablesSetup."Credit Warnings"::"No Warning",TRUE);
      CreateItemWithInventory(Item,LibraryRandom.RandInt(10));  // Inventory value important for test.
      CreateCustomerWithCreditLimit(Customer,0);
      CreateCustomerWithCreditLimit(Customer2,0);

      // Create Sales Order With required Item Quantity.
      Item.CALCFIELDS(Inventory);
      CreateSalesOrder(SalesHeader,SalesLine,Customer."No.",Item."No.",Item.Inventory);

      // Exercise: Update Sales Order with new Sell to Customer No.
      UpdateSalesHeader(SalesHeader,Customer2."No.");

      // Verify : Check Item Stock Availability without any warnings.
      Assert.IsFalse(ItemCheckAvail.SalesLineCheck(SalesLine),'');

      // Teardown.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(CreditLimitPageHandler,ConfirmHandler)]
    PROCEDURE NewCustCreditWarning@14();
    BEGIN
      // Check for Credit Limit Warning for Old and New customer with different Credit Limit without Shipping details.
      Initialize;
      SalesOrderSellToCustomerNo(SalesReceivablesSetup."Credit Warnings"::"Both Warnings",FALSE);
    END;

    [Test]
    [HandlerFunctions(CreditLimitPageHandler,ConfirmHandler)]
    PROCEDURE NewCustShippingCreditWarning@23();
    BEGIN
      // Check for Credit Limit Warning for Old and New customer with different Credit Limit with Shipping details.
      Initialize;
      SalesOrderSellToCustomerNo(SalesReceivablesSetup."Credit Warnings"::"Both Warnings",TRUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE CustShippingNoCreditWarning@41();
    BEGIN
      // Check for Credit Limit Warning (No Warning) for Old and New customer with different Credit Limit with Shipping details.
      Initialize;
      SalesOrderSellToCustomerNo(SalesReceivablesSetup."Credit Warnings"::"No Warning",TRUE);
    END;

    LOCAL PROCEDURE SalesOrderSellToCustomerNo@40(CreditWarning@1001 : Option;Shipping@1008 : Boolean);
    VAR
      TempSalesReceivablesSetup@1003 : TEMPORARY Record 311;
      SalesLine@1002 : Record 37;
      Customer@1004 : Record 18;
      SalesHeader@1005 : Record 36;
      CustCheckCrLimit@1000 : Codeunit 312;
    BEGIN
      // Setup.
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup,CreditWarning,FALSE);
      CreateSalesOrderDimNoCrLimit(SalesHeader,SalesLine,FALSE);  // Customer 1:Dimension-FALSE.
      CreateNewCustomerForSalesOrder(Customer,Shipping);  // Customer 2:Shipping.

      // Exercise: Update Sales Line with Unit Price.
      LibraryInventory.UpdateSalesLine(SalesLine,SalesLine.FIELDNO("Unit Price"),LibraryRandom.RandInt(10) + 50);
      // Value important.

      // Verify: Check Customer Credit Limit without warning.
      CustCheckCrLimit.SalesLineCheck(SalesLine);
      CLEAR(CustCheckCrLimit);

      // Exercise: Update Sales Header with new Sell to Customer No. and Unit Price.
      UpdateSalesHeader(SalesHeader,Customer."No.");
      UpdateSalesLineUnitPrice(SalesLine);

      // Verify: Check Credit Limit, Bill to Customer No. and Shipping Time.
      CustCheckCrLimit.SalesLineCheck(SalesLine);
      SalesHeader.TESTFIELD("Bill-to Customer No.",Customer."No.");
      IF Shipping THEN
        SalesLine.TESTFIELD("Shipping Time",Customer."Shipping Time");

      // Teardown.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(CreditLimitPageHandler,ConfirmHandler)]
    PROCEDURE NewCustDimensionCreditWarning@28();
    VAR
      TempSalesReceivablesSetup@1003 : TEMPORARY Record 311;
      SalesLine@1002 : Record 37;
      Customer@1004 : Record 18;
      SalesHeader@1005 : Record 36;
      CustCheckCrLimit@1000 : Codeunit 312;
    BEGIN
      // Setup.
      Initialize;
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup,SalesReceivablesSetup."Credit Warnings"::"Both Warnings",FALSE);
      CreateSalesOrderDimNoCrLimit(SalesHeader,SalesLine,TRUE);  // Customer 1:Dimension-TRUE.
      CreateNewCustomerForSalesOrder(Customer,FALSE);  // Customer 2:Shipping-FALSE.

      // Exercise: Update Sales Header with new Sell to Customer No. and Unit Price.
      UpdateSalesHeader(SalesHeader,Customer."No.");
      UpdateSalesLineUnitPrice(SalesLine);

      // Verify: Check Dimension and Credit Limit warning that credit limit exceeds.
      SalesLine.TESTFIELD("Dimension Set ID",0);
      CustCheckCrLimit.SalesLineCheck(SalesLine);

      // Teardown.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    [Test]
    [HandlerFunctions(CreditLimitPageHandler,StockoutPageHandler,ConfirmHandler)]
    PROCEDURE NewCustStockAndCreditWarning@19();
    BEGIN
      // Check for warnings with Shipping and Dimension.
      Initialize;
      SalesOrderShippingAndDimension(TRUE);  // Both Credit Warning and Stockout Warning come up.
    END;

    [Test]
    [HandlerFunctions(StockoutPageHandler,ConfirmHandler)]
    PROCEDURE NewCustShipDimStockWarning@31();
    BEGIN
      // Check for warnings with Shipping and Dimension.
      Initialize;
      SalesOrderShippingAndDimension(FALSE);  // Stockout Warning only comes up.
    END;

    LOCAL PROCEDURE SalesOrderShippingAndDimension@32(CreditWarning@1008 : Boolean);
    VAR
      TempSalesReceivablesSetup@1003 : TEMPORARY Record 311;
      SalesLine@1002 : Record 37;
      Customer@1004 : Record 18;
      SalesHeader@1005 : Record 36;
      Item@1006 : Record 27;
      ItemCheckAvail@1001 : Codeunit 311;
      CustCheckCrLimit@1000 : Codeunit 312;
    BEGIN
      // Setup.
      UpdateSalesReceivablesSetup(TempSalesReceivablesSetup,SalesReceivablesSetup."Credit Warnings"::"Both Warnings",TRUE);
      CreateItemWithInventory(Item,0);  // Inventory value important for test.
      CreateSalesOrderDimNoCrLimit(SalesHeader,SalesLine,TRUE);  // Customer 1:Dimension-TRUE.
      CreateNewCustomerForSalesOrder(Customer,TRUE);  // Customer 2:Shipping-TRUE.

      // Exercise: Update Sales Header with new Sell to Customer No.
      UpdateSalesHeader(SalesHeader,Customer."No.");
      SelectSalesLine(SalesLine,SalesHeader."Document Type"::Order,SalesHeader."No.");
      IF CreditWarning THEN
        LibraryInventory.UpdateSalesLine(SalesLine,SalesLine.FIELDNO("Unit Price"),LibraryRandom.RandInt(10) + 50);
      // Value important.

      // Verify: Check Dimension,Shipping, Item availability and  Credit Limit warning that credit limit exceeds.
      SalesLine.TESTFIELD("Dimension Set ID",0);
      SalesLine.TESTFIELD("Shipping Time",Customer."Shipping Time");
      CustCheckCrLimit.SalesLineCheck(SalesLine);
      Assert.IsFalse(ItemCheckAvail.SalesLineCheck(SalesLine),'');

      // Teardown.
      RestoreSalesReceivableSetup(TempSalesReceivablesSetup);
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      ItemJournalSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ItemJournalSetup@75();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE UpdateSalesReceivablesSetup@26(VAR TempSalesReceivablesSetup@1001 : TEMPORARY Record 311;CreditWarnings@1002 : Option;StockoutWarning@1003 : Boolean);
    BEGIN
      SalesReceivablesSetup.GET;
      TempSalesReceivablesSetup := SalesReceivablesSetup;
      TempSalesReceivablesSetup.INSERT;

      SalesReceivablesSetup.VALIDATE("Credit Warnings",CreditWarnings);
      SalesReceivablesSetup.VALIDATE("Stockout Warning",StockoutWarning);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE RestoreSalesReceivableSetup@47(TempSalesReceivablesSetup@1000 : TEMPORARY Record 311);
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Credit Warnings",TempSalesReceivablesSetup."Credit Warnings");
      SalesReceivablesSetup.VALIDATE("Stockout Warning",TempSalesReceivablesSetup."Stockout Warning");
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderCustCrLimit@11(VAR SalesLine@1000 : Record 37);
    VAR
      Item@1001 : Record 27;
      SalesHeader@1002 : Record 36;
      Customer@1003 : Record 18;
    BEGIN
      CreateItemWithInventory(Item,0);  // Inventory value important for test.
      CreateCustomerWithCreditLimit(Customer,LibraryRandom.RandInt(10));  // Credit Limit important for test.

      // Exercise: Create Sales Order With required Item Quantity.
      CreateSalesOrder(SalesHeader,SalesLine,Customer."No.",Item."No.",LibraryRandom.RandInt(10) + 100);  // Value important.
    END;

    LOCAL PROCEDURE CreateSalesOrder@29(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;CustomerNo@1003 : Code[20];ItemNo@1004 : Code[20];ItemQty@1002 : Integer);
    BEGIN
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,CustomerNo,ItemNo,ItemQty,'',0D);
    END;

    LOCAL PROCEDURE CreateItemWithInventory@12(VAR Item@1000 : Record 27;Inventory@1001 : Integer);
    BEGIN
      LibraryInventory.CreateItem(Item);
      IF Inventory <> 0 THEN
        CreateAndPostItemJournal(Item."No.");
    END;

    LOCAL PROCEDURE CreateAndPostItemJournal@25(ItemNo@1004 : Code[20]);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      // Create Item Journal to populate Item Quantity.
      ClearJournal(ItemJournalBatch);  // Clear Item Journal Template and Journal Batch.
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,LibraryRandom.RandInt(10) + 10);  // Value important for test.
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE ClearJournal@134(ItemJournalBatch@1001 : Record 233);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CLEAR(ItemJournalLine);
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.DELETEALL;
    END;

    LOCAL PROCEDURE CreateCustomerWithCreditLimit@17(VAR Customer@1000 : Record 18;CreditLimit@1001 : Decimal);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Credit Limit (LCY)",CreditLimit);
      Customer.VALIDATE("Prices Including VAT",TRUE);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderDimNoCrLimit@39(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37;Dimension@1005 : Boolean);
    VAR
      Customer@1003 : Record 18;
      Item@1004 : Record 27;
    BEGIN
      CreateItemWithInventory(Item,0);  // Inventory value important for test.
      CreateCustomerWithCreditLimit(Customer,0);  // Create first Customer with no credit limit.
      IF Dimension THEN
        CreateDefaultDimension(Customer."No.");

      // Create Sales Order With required Item Quantity.
      CreateSalesOrder(SalesHeader,SalesLine,Customer."No.",Item."No.",LibraryRandom.RandInt(10) + 100);  // Value important.
    END;

    LOCAL PROCEDURE SelectSalesLine@18(VAR SalesLine@1002 : Record 37;DocumentType@1000 : Option;DocumentNo@1001 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateCustomerShippingTime@24(VAR Customer@1002 : Record 18);
    VAR
      ShippingAgent@1001 : Record 291;
      ShippingAgentServices@1000 : Record 5790;
      ShippingTime@1003 : DateFormula;
    BEGIN
      LibraryInventory.CreateShippingAgent(ShippingAgent);
      EVALUATE(ShippingTime,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>');
      LibraryInventory.CreateShippingAgentService(ShippingAgentServices,ShippingAgent.Code,ShippingTime);
      Customer.VALIDATE("Shipping Agent Code",ShippingAgent.Code);
      Customer.VALIDATE("Shipping Agent Service Code",ShippingAgentServices.Code);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateDefaultDimension@21(CustomerNo@1000 : Code[20]);
    VAR
      DefaultDimension@1003 : Record 352;
      Dimension@1002 : Record 348;
      DimensionValue@1001 : Record 349;
    BEGIN
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionCustomer(DefaultDimension,CustomerNo,Dimension.Code,DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateNewCustomerForSalesOrder@37(VAR Customer@1000 : Record 18;Shipping@1001 : Boolean);
    BEGIN
      CreateCustomerWithCreditLimit(Customer,LibraryRandom.RandInt(10));  // Create a second Customer with random credit limit.
      IF Shipping THEN
        UpdateCustomerShippingTime(Customer);
    END;

    LOCAL PROCEDURE UpdateSalesHeader@27(VAR SalesHeader@1000 : Record 36;SellToCustomerNo@1001 : Code[20]);
    BEGIN
      SalesHeader.VALIDATE("Sell-to Customer No.",SellToCustomerNo);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesLineUnitPrice@35(VAR SalesLine@1000 : Record 37);
    BEGIN
      SelectSalesLine(SalesLine,SalesLine."Document Type"::Order,SalesLine."Document No.");
      LibraryInventory.UpdateSalesLine(SalesLine,SalesLine.FIELDNO("Unit Price"),LibraryRandom.RandInt(10) + 50);
      // Value important.
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@16(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE StockoutPageHandler@1(VAR CheckAvailability@1000 : Page 342;VAR Response@1001 : Action);
    BEGIN
      // Stockout Warning Page Handler: Close Stockout Warning page.
      Response := ACTION::Yes;
    END;

    [ModalPageHandler]
    PROCEDURE CreditLimitPageHandler@2(VAR CheckCreditLimit@1001 : Page 343;VAR Response@1000 : Action);
    BEGIN
      // Credit Warning Page Handler: Close Credit Warning page.
      Response := ACTION::Yes;
    END;

    BEGIN
    {
      // [FEATURE] [Stockout Warning] [Credit Warnings] [Sales]
      Unsupported version tags:
      US: Unable to Execute
      CA: Unable to Execute

      Test for Credit Warning and Stockout Warning Errors:
       1. Create Sales Order. Item inventory is Zero and low Customer credit limit.
          Check that no warning appears for item inventory.
       2. Create Sales Order. Item inventory is Zero and low Customer credit limit.
          Check that warning appears for item inventory.
       3. Create Sales Order with Drop Shipment. Item inventory is Zero and low Customer credit limit.
          Check that no warning appears for item inventory.
       4. Create Sales Order. Item inventory is Zero and low Customer credit limit.
          Check that no warning appears for credit limit.
       5. Create Sales Order. Item inventory is Zero and low Customer credit limit.
          Check that warning appears for credit limit.
       6. Create Sales Order. Item inventory is Zero and low Customer credit limit.
          Check that warning appears for item inventory and credit limit.
       7. Create Sales Order with Drop Shipment. Item inventory is Zero and low Customer credit limit.
          Check that warning appears for credit limit.
       8. Create Sales Order with Drop Shipment and subsequently remove Drop shipment.
          Item inventory is Zero and low Customer credit limit.  Check that warning appears for credit limit and item inventory.
       9. Create Sales Order with Item Qty equal to inventory and low Customer credit limit.
          Check that no warning appears for item inventory.
      10. Create Sales Order with Item Qty equal to inventory and overall price equal to Customer credit limit.
          Check that no warning appears for credit limit.
      11. Create Sales Order with Item inventory and no Customer credit limit.
          Update Sales Order with New Customer No. Check that stock warning does not comes on Sales line.
      12. Create Sales Order. Item inventory is Zero and no Customer credit limit.
          Check that error does not appear for credit limit. Update Sales Order with New Customer No. that has low credit limit.
          Check Bill to Customer. Check error appears for credit limit.
      13. Create Sales Order. Item inventory is Zero and no Customer credit limit. Second Customer has Shipping details.
          Check that error does not appear for credit limit. Update Sales Order with second Customer No. that has low credit limit.
          Check Bill to Customer, Shipping time and that error appears for credit limit.
      14. Create Sales Order with Item inventory zero and Customer with Dimension.
          Update Sales Order with New Customer No. with low credit limit.Check Dimension and that warning appears for credit limit.
      15. Create Sales Order with Item inventory zero and Customer with Dimension. Second Customer has Shipping details.
          Update Sales Order with second Customer No. that has low credit. Check Dimension, Shipping time, Credit and Stockout warning.
      16. Create Sales Order with Item inventory zero and Customer with Dimension. Second Customer has Shipping details.
          Update Sales Order with second Customer No. that has low credit. Check Dimension, Shipping time, Stockout warning.
      17. Create Sales Order. Item inventory is Zero and low Customer credit limit.
          Check that no warning appears for credit limit with Stock Out Warning TRUE.
      18. Create Sales Order. Item inventory is Zero and set Customer credit limit to No Warning. Second Customer has Shipping details.
          Check that error does not appear for credit limit. Update Sales Order with second Customer No. that has low credit limit.
          Check Bill to Customer, Shipping time and that error appears for credit limit.

        Covers Test cases: 219566
      -----------------------------------------------------------------------------------------------------------------
        Test Function Name                 TFS ID
      -----------------------------------------------------------------------------------------------------------------
        StockoutSetupFalseNoWarning
        StockoutSetupTrueAndWarning
        StockoutDropShipNoWarning
        CreditWarningSetupNoWarning
        CreditLimitWarning
        StockAndCreditLimitWarning
        DropShipCreditLimitWarning
        DropShipStockCreditWarning
        StockEqualNoWarning
        CreditLimitEqualNoWarning          135682,121346,121347,135738,135739,135740,121344,121345,135741,135742,135743,
                                           121355,135732,135733,135734,135735,135736,135737
        NewCustStockEqualNoWarning
        NewCustCreditWarning
        NewCustShippingCreditWarning
        NewCustDimensionCreditWarning
        NewCustStockAndCreditWarning
        NewCustShipDimStockWarning         135682,135699,135700,135701,135702,135703,135704,135705,135706,135707,135708,
                                           135709,135710,135711,135712,135713
        Covers Test cases: 230087
      -----------------------------------------------------------------------------------------------------------------
        Test Function Name                 TFS ID
      -----------------------------------------------------------------------------------------------------------------
        CreditWarningStockoutWarning       135750,135751,135752
        CustShippingNoCreditWarning        135714,135715,135716
    }
    END.
  }
}

