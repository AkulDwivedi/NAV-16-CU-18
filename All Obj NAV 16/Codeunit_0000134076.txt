OBJECT Codeunit 134076 ERM Suggest Vendor Payment
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 25=rimd;
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1002 : Codeunit 131300;
      LibrarySales@1020 : Codeunit 130509;
      LibraryPurchase@1006 : Codeunit 130512;
      LibraryUtility@1011 : Codeunit 131000;
      LibraryDimension@1017 : Codeunit 131001;
      LibraryJournals@1016 : Codeunit 131306;
      Assert@1004 : Codeunit 130000;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryVariableStorage@1026 : Codeunit 131004;
      isInitialized@1000 : Boolean;
      AmountErr@1003 : TextConst '@@@="%1=Field Name;%2=Field Value;%3=Gen. Journal Line Template Name;%4=Journal Batch Name;%5=Line No.;";ENU="%1 must be %2 in Gen. Journal Line Template Name=''''%3'''',Journal Batch Name=''''%4'''',Line No.=''''%5''''."';
      SumErr@1007 : TextConst 'ENU=Suggested amount is incorrect.';
      RecordExistsMsg@1008 : TextConst 'ENU=Report shouldn''t suggest any payments.';
      ExpectedErr@1009 : TextConst '@@@="%1=Caption;%2=Table;%3=Field1;%4=Value1;%5=Field2;%6=Value2;%7=Field3;%8=Value3;";ENU="%1 must have a value in %2: %3=%4, %5=%6, %7=%8. It cannot be zero or empty."';
      VerifyMsg@1010 : TextConst 'ENU=The Expected and Actual amount must be equal.';
      ValidateErr@1013 : TextConst '@@@="%1=Field Caption;%2=Field Value;%3=Table;%4=Field;%5=Value;";ENU="%1 must be %2 in %3 %4 = %5."';
      SuggestVendorAmountErr@1018 : TextConst 'ENU=The available amount of suggest vendor payment is always greater then gen. journal line amount.';
      NoOfPaymentErr@1019 : TextConst 'ENU=No of payment is incorrect.';

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE VendorPaymentWithManualCheck@7();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create and Post General Journal Lines and Suggest Vendor Payments with Manual Check.
      Initialize;
      VendorPayment(GenJournalLine."Bank Payment Type"::"Manual Check");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE VendorPaymentWithComputerCheck@19();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create and Post General Journal Lines and Suggest Vendor Payments with Computer Check.
      Initialize;
      VendorPayment(GenJournalLine."Bank Payment Type"::"Computer Check");
    END;

    LOCAL PROCEDURE VendorPayment@4(BankPaymentType@1002 : Option);
    VAR
      GenJournalTemplate@1004 : Record 80;
      GenJournalBatch@1003 : Record 232;
      GenJournalLine@1000 : Record 81;
      BankAccountNo@1001 : Code[20];
    BEGIN
      // Create Setup, Post General Journal Lines, Suggest Vendor Payment and Verify Posted Entries.
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalTemplate.Type::General);
      BankAccountNo := SetupAndCreateGenJournalLines(GenJournalLine,GenJournalBatch);

      // Exercise: Post General Journal Lines and Run Report Suggest Vendor Payment.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalTemplate.Type::Payments);
      SuggestVendorPayment(
        GenJournalBatch,GenJournalLine."Account No.",WORKDATE,FALSE,GenJournalLine."Bal. Account Type"::"Bank Account",BankAccountNo,
        BankPaymentType);

      // Verify: Verify General Journal Lines Amount is same after Posting General journal Lines.
      VerifyGenJournalEntriesAmount(GenJournalLine."Account No.");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE VendorPaymentWithAllVendors@18();
    VAR
      Vendor@1005 : Record 23;
      GenJournalLine@1001 : Record 81;
      GenJournalTemplate@1003 : Record 80;
      GenJournalBatch@1007 : Record 232;
      BankAccountNo@1002 : Code[20];
      VendorNo@1004 : Code[20];
      VendorNo2@1000 : Code[20];
      NoOfLines@1006 : Integer;
    BEGIN
      // Create Setup, Post General Journal Lines, Suggest Vendor Payment for Multi Vendor with Computer Check and Verify Posted Entries.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalTemplate.Type::General);
      BankAccountNo := SetupAndCreateGenJournalLines(GenJournalLine,GenJournalBatch);
      VendorNo := GenJournalLine."Account No.";
      NoOfLines := 2 * LibraryRandom.RandInt(5);  // Use Random Number to generate more than two lines.
      VendorNo2 := CreateVendor(GenJournalLine."Currency Code",Vendor."Application Method"::"Apply to Oldest");
      CreateMultipleGenJournalLine(
        GenJournalLine,GenJournalBatch,NoOfLines,WORKDATE,VendorNo2,
        GenJournalLine."Document Type"::Invoice,-1);

      // Exercise: Post General Journal Lines and Run Report Suggest Vendor Payment.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalTemplate.Type::Payments);
      SuggestVendorPayment(
        GenJournalBatch,VendorNo,WORKDATE,FALSE,GenJournalLine."Bal. Account Type"::"Bank Account",BankAccountNo,
        GenJournalLine."Bank Payment Type"::"Computer Check");
      SuggestVendorPayment(
        GenJournalBatch,VendorNo2,WORKDATE,FALSE,GenJournalLine."Bal. Account Type"::"Bank Account",BankAccountNo,
        GenJournalLine."Bank Payment Type"::"Computer Check");

      // Verify: Verify General Journal Lines Amount is same after Posting General journal Lines.
      VerifyGenJournalEntriesAmount(VendorNo);
      VerifyGenJournalEntriesAmount(VendorNo2);
    END;

    [Test]
    PROCEDURE VendorPaymentWithDiscTrue@60();
    BEGIN
      // Should suggest payment for Invoices, for which discount can be applied.
      VendorPaymentWithDiscounts(TRUE);
    END;

    [Test]
    PROCEDURE VendorPaymentWithDiscFalse@61();
    BEGIN
      // Should not suggest payment for Invoices, for which discount can be applied.
      VendorPaymentWithDiscounts(FALSE);
    END;

    LOCAL PROCEDURE VendorPaymentWithDiscounts@14(FindDiscounts@1000 : Boolean);
    VAR
      GenJournalLine@1002 : Record 81;
      GenJournalTemplate@1008 : Record 80;
      GenJournalBatch@1005 : Record 232;
      Vendor@1003 : Record 23;
      PaymentTerms@1001 : Record 3;
      DiscountedInvoices@1007 : Decimal;
      Result@1004 : Boolean;
    BEGIN
      // Suggest Vendor payments with Discounts.

      // Setup: Create Payment Terms and Vendor, Create Invoices and post them
      Initialize;
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      CreateVendorWithPaymentTerms(Vendor,PaymentTerms.Code);
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalTemplate.Type::General);
      CreateMultipleGenJournalLine(GenJournalLine,GenJournalBatch,LibraryRandom.RandInt(2),CALCDATE('<-1D>',WORKDATE),
        Vendor."No.",GenJournalLine."Document Type"::Invoice,-1);
      DiscountedInvoices := CreateMultipleGenJournalLine(GenJournalLine,GenJournalBatch,LibraryRandom.RandInt(2),WORKDATE,
          Vendor."No.",GenJournalLine."Document Type"::Invoice,-1);
      DiscountedInvoices := DiscountedInvoices * (1 - PaymentTerms."Discount %" / 100);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Run Suggest Vendor Payments report
      // Only Invoices for which discount is applied should be suggested for payment,
      // because of payment due date defined in Payment Terms.
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalTemplate.Type::Payments);
      SuggestVendorPayment(
        GenJournalBatch,Vendor."No.",CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE),FindDiscounts,
        GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,GenJournalLine."Bank Payment Type");

      // Verify: Suggested Amount
      GenJournalLine.SETRANGE("Account No.",Vendor."No.");
      GenJournalLine.SETRANGE("Document Type",GenJournalLine."Document Type"::Payment);
      Result := GenJournalLine.FINDLAST;
      IF FindDiscounts THEN
        Assert.AreEqual(-DiscountedInvoices,GenJournalLine.Amount,SumErr)
      ELSE
        Assert.IsFalse(Result,RecordExistsMsg);
    END;

    [Test]
    PROCEDURE PaymentToInvoiceWithApplyEntry@56();
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      // Apply Payment against the Invoices and show Only Applied Entries.
      Initialize;
      SetApplyIdToDocument(GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,-1);
    END;

    [Test]
    PROCEDURE RefundCreditMemoWithApplyEntry@23();
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      // Apply Refund against the Credit Memo and Show Only Applied Entries.
      Initialize;
      SetApplyIdToDocument(GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Document Type"::Refund,1);
    END;

    LOCAL PROCEDURE SetApplyIdToDocument@20(DocumentType@1009 : Option;DocumentType2@1011 : Option;AmountSign@1010 : Integer);
    VAR
      Vendor@1007 : Record 23;
      GenJournalBatch@1001 : Record 232;
      GenJournalTemplate@1002 : Record 80;
      GenJournalLine@1004 : Record 81;
      VendorNo@1003 : Code[20];
      NumberOfLines@1000 : Integer;
    BEGIN
      // Setup: Create Vendor and General Journal Lines.
      NumberOfLines := 1 + LibraryRandom.RandInt(5);  // Use Random Number to generate more than one line.
      VendorNo := CreateVendor('',Vendor."Application Method"::Manual);
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalTemplate.Type::General);
      CreateMultipleGenJournalLine(GenJournalLine,GenJournalBatch,NumberOfLines,WORKDATE,VendorNo,DocumentType,AmountSign);
      CreateMultipleGenJournalLine(GenJournalLine,GenJournalBatch,1,WORKDATE,VendorNo,DocumentType2,-AmountSign);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Set Applies to ID to all invoices.
      ApplyPaymentToVendor(GenJournalLine."Account No.",NumberOfLines,DocumentType,DocumentType2);

      // Verify: Verify Vendor Ledger Entry.
      VerifyVendorLedgerEntry(VendorNo,NumberOfLines);
    END;

    [Test]
    PROCEDURE AdjustPaymentJournal@16();
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalTemplate@1001 : Record 80;
      GenJournalBatch@1008 : Record 232;
    BEGIN
      // Check Error while posting General Journal Line for Vendor and when External Document No. is not given.

      // Setup: Create General Journal Lines with random values.
      Initialize;
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalTemplate.Type::General);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,WORKDATE,LibraryPurchase.CreateVendorNo,GenJournalLine."Document Type"::Invoice,
        -LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("External Document No.",'');
      GenJournalLine.MODIFY(TRUE);

      // Exercise.
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify error on General Journal posting.
      Assert.AreEqual(
        STRSUBSTNO(ExpectedErr,GenJournalLine.FIELDCAPTION("External Document No."),GenJournalLine.TABLECAPTION,
          GenJournalLine.FIELDCAPTION("Journal Template Name"),GenJournalLine."Journal Template Name",
          GenJournalLine.FIELDCAPTION("Journal Batch Name"),GenJournalLine."Journal Batch Name",
          GenJournalLine.FIELDCAPTION("Line No."),GenJournalLine."Line No."),GETLASTERRORTEXT,VerifyMsg);
    END;

    [Test]
    PROCEDURE PaymentBySuggestVendorPayment@5();
    VAR
      Vendor@1000 : Record 23;
      PaymentTerms@1002 : Record 3;
      GenJournalTemplate@1009 : Record 80;
      GenJournalBatch@1003 : Record 232;
      GenJournalLine@1004 : Record 81;
      InvoiceAmount@1005 : Decimal;
      InvoiceNo@1007 : Code[20];
    BEGIN
      // Test Vendor Ledger Entry after Posting Payment Journal with running Suggest Vendor Payment.

      // 1. Setup: Create Payment Terms with Discount Date and Calc. Pmt. Disc. on Cr. Memos as True, Vendor with Payment Terms Code,
      // Create and Post General Journal Lines with Document Type as Invoice, Payment and Credit Memo.
      Initialize;
      CreatePaymentTermsWithDiscount(PaymentTerms);
      CreateVendorWithPaymentTerms(Vendor,PaymentTerms.Code);
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalTemplate.Type::General);
      InvoiceAmount := LibraryRandom.RandDec(1000,2);  // Use Random for Invoice Amount.
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,WORKDATE,Vendor."No.",GenJournalLine."Document Type"::Invoice,-InvoiceAmount);
      InvoiceNo := GenJournalLine."Document No.";
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,WORKDATE,Vendor."No.",GenJournalLine."Document Type"::Payment,
        InvoiceAmount * LibraryUtility.GenerateRandomFraction);
      ApplyGenJnlLineEntryToInvoice(GenJournalLine,InvoiceNo);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,WORKDATE,Vendor."No.",GenJournalLine."Document Type"::"Credit Memo",
        (InvoiceAmount - GenJournalLine.Amount) / 2); // 2 is required for Partial Amount.
      ApplyGenJnlLineEntryToInvoice(GenJournalLine,InvoiceNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2. Exercise: Run Suggest Vendor Payment and Post the Payment Journal.
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalTemplate.Type::Payments);
      SuggestVendorPayment(
        GenJournalBatch,Vendor."No.",CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE),TRUE,
        GenJournalLine."Bal. Account Type",GenJournalLine."Bal. Account No.",GenJournalLine."Bank Payment Type"::" ");
      FindAndPostPaymentJournalLine(GenJournalBatch);

      // 3. Verify: Verify Remaining Amount on Vendor Ledger Entry.
      VerifyRemainingOnVendorLedger(Vendor."No.");
    END;

    [Test]
    PROCEDURE SuggestVendorPaymentForInvoice@10();
    VAR
      GenJournalBatch@1010 : Record 232;
      GenJournalTemplate@1009 : Record 80;
      GenJournalLine@1008 : Record 81;
      DocumentNo@1003 : Code[20];
      DocumentNo2@1002 : Code[20];
    BEGIN
      // Test Vendor Ledger Entry after Posting Payment Journal with running Suggest Vendor Payment against Invoice.

      // 1. Setup: Create and post General Journal with Document Type as Invoice.
      Initialize;
      DocumentNo := CreateAndPostGeneralJournal(GenJournalLine,GenJournalLine."Document Type"::Invoice);

      // 2. Exercise: Create General Journal Batch for Payment and Run Suggest Vendor Payment with Random Last Payment Date.
      // Post the Payment Journal.
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalTemplate.Type::Payments);
      SuggestVendorPayment(
        GenJournalBatch,GenJournalLine."Account No.",AddRandomDaysToWorkDate,TRUE,GenJournalLine."Account Type"::"G/L Account",
        GenJournalLine."Bal. Account No.",GenJournalLine."Bank Payment Type"::" ");
      DocumentNo2 := FindAndPostPaymentJournalLine(GenJournalBatch);

      // 3. Verify: Verify values on Vendor Ledger Entry after post the Payment Journal.
      VerifyValuesOnVendLedgerEntry(
        GenJournalLine."Document No.",GenJournalLine."Document Type"::Invoice,GenJournalLine."Account No.",GenJournalLine.Amount,
        GenJournalLine.Amount,TRUE,GenJournalLine."On Hold");
      VerifyValuesOnVendLedgerEntry(
        DocumentNo,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account No.",GenJournalLine.Amount / 2,0,FALSE,'');
      VerifyValuesOnVendLedgerEntry(
        DocumentNo2,GenJournalLine."Document Type"::Payment,GenJournalLine."Account No.",-GenJournalLine.Amount / 2,0,FALSE,'');
    END;

    [Test]
    PROCEDURE SuggestVendorPaymentForRefund@22();
    VAR
      GenJournalBatch@1010 : Record 232;
      GenJournalTemplate@1009 : Record 80;
      GenJournalLine@1008 : Record 81;
      DocumentNo@1003 : Code[20];
      DocumentNo2@1004 : Code[20];
    BEGIN
      // Test Vendor Ledger Entry after Posting Payment Journal with running Suggest Vendor Payment against Refund.

      // 1. Setup: Create and post General Journal with Document Type as Refund.
      Initialize;
      DocumentNo := CreateAndPostGeneralJournal(GenJournalLine,GenJournalLine."Document Type"::Refund);

      // 2. Exercise: Create General Journal Batch for Payment and Run Suggest Vendor Payment with Random Last Payment Date.
      // Post the Payment Journal.
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalTemplate.Type::Payments);
      SuggestVendorPayment(
        GenJournalBatch,GenJournalLine."Account No.",AddRandomDaysToWorkDate,TRUE,GenJournalLine."Account Type"::"G/L Account",
        GenJournalLine."Bal. Account No.",GenJournalLine."Bank Payment Type"::" ");
      DocumentNo2 := FindAndPostPaymentJournalLine(GenJournalBatch);

      // 3. Verify: Verify values on Vendor Ledger Entry after post the Payment Journal.
      VerifyValuesOnVendLedgerEntry(
        GenJournalLine."Document No.",GenJournalLine."Document Type"::Refund,GenJournalLine."Account No.",GenJournalLine.Amount,
        GenJournalLine.Amount,TRUE,GenJournalLine."On Hold");
      VerifyValuesOnVendLedgerEntry(
        DocumentNo,GenJournalLine."Document Type"::Refund,GenJournalLine."Account No.",GenJournalLine.Amount / 2,0,FALSE,'');
      VerifyValuesOnVendLedgerEntry(
        DocumentNo2,GenJournalLine."Document Type"::Payment,GenJournalLine."Account No.",-GenJournalLine.Amount / 2,0,FALSE,'');
    END;

    [Test]
    PROCEDURE VendorPaymentForBlockedVendor@24();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      GenJournalBatch@1003 : Record 232;
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Check that no General Journal Line generated After doing Suggest Vendor Payment for a Vendor having Payment Blocked.

      // Setup: Create and Post Purchase Invoice for a Vendor who has Blocked Payment. Take Random Quantity.
      Initialize;
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,CreateVendorWithPaymentBlocked);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,LibraryRandom.RandDec(10,2));
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalBatch."Template Type"::Payments);

      // Exercise: Try to Suggest Vendor Payment for the Vendor for which Payment is Blocked.
      SuggestVendorPayment(
        GenJournalBatch,PurchaseHeader."Buy-from Vendor No.",WORKDATE,FALSE,GenJournalLine."Bal. Account Type"::"G/L Account",
        LibraryERM.CreateGLAccountNo,GenJournalLine."Bank Payment Type"::" ");

      // Verify: Verify that no General Journal Line created for the Vendor having Payment Blocked.
      VerifyJournalLinesNotSuggested(GenJournalBatch."Journal Template Name",GenJournalBatch.Name);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler)]
    PROCEDURE SuggestPaymentForVendorWithDebitBalanceAndPriorityTrue@31();
    BEGIN
      Initialize;
      // [GIVEN] Vendor with Negative Balance
      // [GIVEN] Use Vendor Priority is TRUE
      // [WHEN] Suggest Vendor Payment
      // [THEN] Payment is not suggested
      SuggestPaymentForVendorWithUseVendorPriority(TRUE);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsRequestPageHandler)]
    PROCEDURE SuggestPaymentForVendorWithDebitBalanceAndPriorityFalse@85();
    BEGIN
      Initialize;
      // [GIVEN] Vendor with Negative Balance
      // [GIVEN] Use Vendor Priority is FALSE
      // [WHEN] Suggest Vendor Payment
      // [THEN] Payment is not suggested
      SuggestPaymentForVendorWithUseVendorPriority(FALSE);
    END;

    [Test]
    PROCEDURE GLEntriesWithDimensionValues@37();
    VAR
      Vendor@1004 : Record 23;
      GenJournalLine@1003 : Record 81;
      TempGenJournalLine@1002 : TEMPORARY Record 81;
      VendorNo@1005 : Code[20];
      GLAccountNo@1006 : Code[20];
      ShortcutDimension1Code@1001 : Code[20];
      ShortcutDimension2Code@1000 : Code[20];
    BEGIN
      // Setup: Create & Post General Journal Lines.
      Initialize;
      VendorNo := CreateVendor(Vendor."Currency Code",Vendor."Application Method"::"Apply to Oldest");
      GLAccountNo := LibraryERM.CreateGLAccountNo;
      CreateGeneralJournalWithAccountTypeGLAccount(GenJournalLine,GLAccountNo);
      UpdateGenJournalLine(GenJournalLine,VendorNo);
      ShortcutDimension1Code := GenJournalLine."Shortcut Dimension 1 Code";
      ShortcutDimension2Code := GenJournalLine."Shortcut Dimension 2 Code";
      CopyTempGenJournalLine(GenJournalLine,TempGenJournalLine); // Insert Temp General Journal Line for verification.

      // Exercise: Post General Journal Lines.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verification of GL Entry with Dimension.
      VerifyValuesOnGLEntry(TempGenJournalLine,'','');
      VerifyValuesOnGLEntry(TempGenJournalLine,ShortcutDimension1Code,ShortcutDimension2Code);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsWithDimensionAndBalAccRequestPageHandler,SelectDimensionHandlerOnSuggesvendorPayment)]
    PROCEDURE DimensionAfterSuggestVendorPaymentOnGeneralJournal@33();
    VAR
      GenJournalLine@1001 : Record 81;
      VendorNo@1002 : Code[20];
      GLAccountNo@1000 : Code[20];
    BEGIN
      // 1. Setup: Create and Post General Journal Lines.
      VendorNo := LibraryPurchase.CreateVendorNo;
      GLAccountNo := LibraryERM.CreateGLAccountNo;
      LibraryVariableStorage.Enqueue(VendorNo);
      LibraryVariableStorage.Enqueue(GLAccountNo);
      CreateGeneralJournalWithAccountTypeGLAccount(GenJournalLine,GLAccountNo);
      UpdateGenJournalLine(GenJournalLine,VendorNo);

      // Post General Journal Lines.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2. Suggest Vendor Payment using PageHandler SelectDimensionHandlerOnSuggesvendorPayment.
      SuggestVendorPaymentUsingPage(GenJournalLine);

      // 3. Verify: Verify that General Journal line exist with blank Dimensions.
      VerifyDimensionOnGeneralJournalLine(GenJournalLine,VendorNo,GLAccountNo);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsWithoutBalAccountRequestPageHandler,ClearDimensionHandlerOnSuggesvendorPayment)]
    PROCEDURE DimensionOnPaymnetJournalFromGeneralJournal@45();
    VAR
      GenJournalLine@1003 : Record 81;
      VendorNo@1001 : Code[20];
      ShDim1Code@1000 : Code[20];
      ShDim2Code@1006 : Code[20];
    BEGIN
      // Test the dimension valued posted with invoice are retrived when performing suggest vendor payment.

      // Setup:
      Initialize;

      // Exercise: Create GenJournalLine with Dimesnion and Post it. Run Suggest Vendor Payment.
      VendorNo := CreateGenJnlLineWithVendorBalAcc(GenJournalLine);
      LibraryVariableStorage.Enqueue(VendorNo);
      UpdateDimensionOnGeneralJournalLine(GenJournalLine);
      ShDim1Code := GenJournalLine."Shortcut Dimension 1 Code";
      ShDim2Code := GenJournalLine."Shortcut Dimension 2 Code";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      SetupGenJnlLine(GenJournalLine);
      SuggestVendorPaymentUsingPage(GenJournalLine);

      // Verify:
      VerifyDimensionOnGeneralJournalLineFromInvoice(GenJournalLine,ShDim1Code,ShDim2Code);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsWithAvailableAmtRequestPageHandler)]
    PROCEDURE CheckGenJnlLineWhenSumOfInvoicesGreaterThanLimit@36();
    VAR
      InvoiceAmount@1000 : Decimal;
    BEGIN
      // Verify that after two invoices each smaller than the limit and sum of them is exceeds the limit and after running suggest vendor payment report then one payment exist.
      InvoiceAmount := LibraryRandom.RandIntInRange(15,20);
      CheckGenJnlLineAfterSuggestVendorPayment(LibraryRandom.RandIntInRange(21,25),1,InvoiceAmount);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsWithAvailableAmtRequestPageHandler)]
    PROCEDURE CheckGenJnlLineWhenLimitMoreThanSumOfInvoices@82();
    VAR
      InvoiceAmount@1000 : Decimal;
    BEGIN
      // Verify that after two invoices each smaller than the limit and Sum of them is smaller then limit and after running suggest vendor payment report then two payment exist.
      InvoiceAmount := LibraryRandom.RandIntInRange(15,20);
      CheckGenJnlLineAfterSuggestVendorPayment(LibraryRandom.RandIntInRange(50,100),2,InvoiceAmount);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsWithAvailableAmtRequestPageHandler)]
    PROCEDURE CheckGenJnlLineWhenOneInvoiceBiggerThanLimit@160();
    VAR
      InvoiceAmount@1000 : Decimal;
    BEGIN
      // Verify that after two invoices one is smaller, second is bigger than the limit and after running suggest vendor payment report then one payment exist.
      InvoiceAmount := LibraryRandom.RandIntInRange(200,300);
      CheckGenJnlLineAfterSuggestVendorPayment(LibraryRandom.RandIntInRange(100,200),1,InvoiceAmount);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsWithAvailableAmtRequestPageHandler)]
    PROCEDURE CheckGenJnlLineWhenBothInviceMoreThanLimit@99();
    VAR
      InvoiceAmount@1000 : Decimal;
    BEGIN
      // Verify that after two invoices both are bigger than the limit and after running suggest vendor payment report then no payment exist.
      InvoiceAmount := LibraryRandom.RandIntInRange(400,500);
      CheckGenJnlLineAfterSuggestVendorPayment(LibraryRandom.RandIntInRange(1,10),0,InvoiceAmount);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsWithAvailableAmtRequestPageHandler)]
    PROCEDURE CheckGenJnlLineWithTwoInvoicesWithoutLimit@58();
    VAR
      InvoiceAmount@1000 : Decimal;
    BEGIN
      // Verify that after two invoices are posted and after running suggest vendor payment report without limit and then 2 payment exist.
      InvoiceAmount := LibraryRandom.RandIntInRange(400,500);
      CheckGenJnlLineAfterSuggestVendorPayment(0,2,InvoiceAmount);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsWithDimensionRequestPageHandler,SelectDimensionHandlerOnSuggesvendorPayment)]
    PROCEDURE DimensionOnPaymentJournalFromGenJournalWithSums@100();
    VAR
      GenJournalLine@1003 : Record 81;
      VendorNo@1001 : Code[20];
      ShDim1Code@1000 : Code[20];
      ShDim2Code@1006 : Code[20];
    BEGIN
      // Test the dimension valued posted with invoice are retrived when performing suggest vendor payment with 'Summarize per Vendor' checked.

      // Setup:
      Initialize;

      // Exercise: Create GenJournalLine with Dimesnion and Post it. Create Default dimension for Vendor, Run Suggest Vendor Payment.
      VendorNo := CreateGenJnlLineWithVendorBalAcc(GenJournalLine);
      LibraryVariableStorage.Enqueue(VendorNo);
      UpdateDimensionOnGeneralJournalLine(GenJournalLine);
      ShDim1Code := GenJournalLine."Shortcut Dimension 1 Code";
      ShDim2Code := GenJournalLine."Shortcut Dimension 2 Code";
      UpdateDiffDimensionOnVendor(VendorNo,ShDim1Code,ShDim2Code);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      SetupGenJnlLine(GenJournalLine);
      SuggestVendorPaymentUsingPage(GenJournalLine);

      // Verify:
      VerifyDimensionOnGeneralJournalLineFromInvoice(GenJournalLine,ShDim1Code,ShDim2Code);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsWithDimensionRequestPageHandler,SelectNoDimensionHandlerOnSuggesvendorPayment)]
    PROCEDURE DimensionOnPaymnetJournalSummarizeVendorNoSelection@70();
    BEGIN
      // Test the dimension valued posted with invoice are retrived when performing suggest vendor payment with 'Summarize per Vendor' checked.
      VerifyDimOnGeneralJournalLineSummarizePerVend(FALSE);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsWithDimensionRequestPageHandler,SelectFirstDimensionHandlerOnSuggesvendorPayment)]
    PROCEDURE DimensionOnPaymnetJournalSummarizeVendorOneSelected@51();
    BEGIN
      // Test the dimension valued posted with invoice are retrived when performing suggest vendor payment with 'Summarize per Vendor' checked.
      VerifyDimOnGeneralJournalLineSummarizePerVend(TRUE);
    END;

    [Test]
    PROCEDURE DefaultVendDimUsedWhenNoSelectedDimAndSummarizePerVendor@166();
    VAR
      GenJnlTemplate@1006 : Record 80;
      GenJnlBatch@1005 : Record 232;
      GenJnlLine@1004 : Record 81;
      VendNo@1000 : Code[20];
      DimSetID@1008 : Integer;
    BEGIN
      // [FEATURE] [Default Dimension]
      // [SCENARIO 371674] Default Dimensions should be used for Payment Journal when Suggest Vendor Payments with no selected dimensions and "Summarize Per Vendor" option

      Initialize;
      // [GIVEN] Vendor with Default Dimension Set ID = "X" combined from Global Dimension 1 Code" = "A" and "Global Dimension 2 Code" = "B"
      CreateVendWithDimensions(VendNo,DimSetID);
      // [GIVEN] Posted Invoice
      LibraryJournals.CreateGenJournalLineWithBatch(
        GenJnlLine,GenJnlLine."Document Type"::Invoice,GenJnlLine."Account Type"::Vendor,VendNo,
        -LibraryRandom.RandDec(100,2));
      LibraryERM.PostGeneralJnlLine(GenJnlLine);
      CreateGeneralJournalBatch(GenJnlBatch,GenJnlTemplate.Type::Payments);

      // [WHEN] Run Suggest Vendor Payments with "Summarize Per Vendor" option
      SuggestVendorPayment(
        GenJnlBatch,GenJnlLine."Account No.",WORKDATE,FALSE,
        GenJnlLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,GenJnlLine."Bank Payment Type"::"Computer Check");

      // [THEN] General Journal Line is created with "Dimension Set ID" = "X", "Global Dimension 1 Code" = "A", "Global Dimension 2 Code" = "B"
      VerifyGenJnlLineDimSetID(GenJnlBatch,VendNo,DimSetID);
    END;

    LOCAL PROCEDURE SuggestPaymentForVendorWithUseVendorPriority@89(VendorPriority@1001 : Boolean);
    VAR
      GenJournalLine@1008 : Record 81;
      VendorNo@1002 : Code[20];
      GLAccountNo@1000 : Code[20];
    BEGIN
      // 1. Setup: Create and Post Invoice and Credit Memo Entries for Vendor with Negative Balance.
      VendorNo := LibraryPurchase.CreateVendorNo;
      GLAccountNo := LibraryERM.CreateGLAccountNo;

      LibraryVariableStorage.Enqueue(VendorNo);
      LibraryVariableStorage.Enqueue(GLAccountNo);
      LibraryVariableStorage.Enqueue(VendorPriority);

      CreateInvoiceAndCreditMemoEntryForVendor(GenJournalLine,VendorNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // 2. Exercise: Suggest Vendor Payment using Page. Using Page is because InitializeRequest of Report does not have the option to set value in "Use Vendor Priority" Field.
      SuggestVendorPaymentUsingPage(GenJournalLine);

      // 3. Verify: Verify that Payment is not suggested for the Vendor with Negative Balance.
      VerifyJournalLinesNotSuggested(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name");
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsWithAvailableAmtRequestPageHandler)]
    PROCEDURE SuggestedTotalAmountLCYWithSeveralFCYAndNegativeLines@21();
    VAR
      GenJournalLine@1002 : Record 81;
      VendorNo@1006 : ARRAY [3] OF Code[20];
      CurrencyCode@1000 : ARRAY [3] OF Code[10];
      i@1007 : Integer;
    BEGIN
      // [FEATURE] [Currency]
      // [SCENARIO 372005] Total Amount (LCY) of suggested payments is less or equal than Available Amount (LCY) when using Vendor Priority in case of several FCY Vendors and negative lines
      Initialize;

      FOR i := 1 TO 3 DO BEGIN
        CurrencyCode[i] := LibraryERM.CreateCurrencyWithExchangeRate(WORKDATE,1,1);
        VendorNo[i] := CreateVendorWithPriority;
      END;

      // [GIVEN] Create and post several General Journal Lines:
      // [GIVEN] Vendor1 Invoice Currency1 Amount(LCY)=575
      // [GIVEN] Vendor2 Invoice Currency1 Amount(LCY)=1000
      // [GIVEN] Vendor2 Credit Memo Currency2 Amount(LCY)=-750
      // [GIVEN] Vendor3 Invoice Currency2 Amount(LCY)=400
      // [GIVEN] Vendor3 Invoice Currency2 Amount(LCY)=250
      CreatePostGenJnlLineWithCurrency(VendorNo[1],GenJournalLine."Document Type"::Invoice,CurrencyCode[1],575);
      CreatePostGenJnlLineWithCurrency(VendorNo[2],GenJournalLine."Document Type"::Invoice,CurrencyCode[1],1000);
      CreatePostGenJnlLineWithCurrency(VendorNo[2],GenJournalLine."Document Type"::"Credit Memo",CurrencyCode[2],-750);
      CreatePostGenJnlLineWithCurrency(VendorNo[3],GenJournalLine."Document Type"::Invoice,CurrencyCode[2],400);
      CreatePostGenJnlLineWithCurrency(VendorNo[3],GenJournalLine."Document Type"::Invoice,CurrencyCode[2],250);

      // [WHEN] Run Suggest Vendor Payments with "Use Vendor Priority"=TRUE, "Available Amount (LCY)"=600
      LibraryVariableStorage.Enqueue(STRSUBSTNO('%1|%2|%3',VendorNo[1],VendorNo[2],VendorNo[3]));
      LibraryVariableStorage.Enqueue(600);
      SuggestVendorPaymentUsingPage(GenJournalLine);

      // [THEN] Number of suggested payments = 1 with total Amount(LCY) = 575 < 600
      VerifyAmountDoesNotExceedLimit(GenJournalLine,575,1);
    END;

    [Test]
    PROCEDURE BatchPostPaymentToCreditMemoCustomerNegativeAmount@275();
    VAR
      GenJournalLine@1001 : Record 81;
      Customer@1002 : Record 18;
      CrMemoNo@1003 : Code[20];
      CrMemoAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Payment Applied to Credit Memo] [Sales] [Payment] [Credit Memo] [Application]
      // [SCENARIO 378643] Post Customer Payment with negative amount applied to Credit Memo from Payment Journal
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CrMemoAmount := LibraryRandom.RandIntInRange(50,100);

      // [GIVEN] Posted sales credit memo with Amount = 100
      PostCreditMemoCustomer(GenJournalLine,Customer."No.",-CrMemoAmount);
      CrMemoNo := GenJournalLine."Document No.";

      // [GIVEN] Payment journal with the line applied to credit memo and Amount = -100
      CreatePaymentLineAppliedToCrMemoCustomer(GenJournalLine,Customer."No.",-CrMemoAmount,CrMemoNo);

      // [WHEN] Post payment with Amount = -100 and applied to credit memo
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Error 'Positive must be equal to ''Yes''  in Cust. Ledger Entry' thrown
      Assert.ExpectedError('Positive must be equal to ''Yes''  in Cust. Ledger Entry');
    END;

    [Test]
    PROCEDURE BatchPostPaymentToCreditMemoCustomerPositiveAmount@292();
    VAR
      GenJournalLine@1001 : Record 81;
      Customer@1002 : Record 18;
      CrMemoNo@1003 : Code[20];
      CrMemoAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Payment Applied to Credit Memo] [Sales] [Payment] [Credit Memo] [Application]
      // [SCENARIO 378643] Post Customer Payment with positive amount applied to Credit Memo from Payment Journal
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CrMemoAmount := LibraryRandom.RandIntInRange(50,100);

      // [GIVEN] Payment journal
      // [GIVEN] Posted sales credit memo with Amount = 100
      PostCreditMemoCustomer(GenJournalLine,Customer."No.",-CrMemoAmount);
      CrMemoNo := GenJournalLine."Document No.";

      // [GIVEN] Payment journal with the line applied to credit memo and Amount = 100
      CreatePaymentLineAppliedToCrMemoCustomer(GenJournalLine,Customer."No.",CrMemoAmount,CrMemoNo);

      // [WHEN] Post payment
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Error 'Amount must be negative in Gen. Journal Line' thrown
      Assert.ExpectedError('Amount must be negative in Gen. Journal Line');
    END;

    [Test]
    PROCEDURE BatchPostPaymentToCreditMemoVendorNegativeAmount@290();
    VAR
      GenJournalLine@1003 : Record 81;
      Vendor@1002 : Record 23;
      GLEntry@1006 : Record 17;
      CrMemoNo@1001 : Code[20];
      CrMemoAmount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Payment Applied to Credit Memo] [Payment] [Credit Memo] [Application]
      // [SCENARIO 378643] Post Vendor Payment applied to Credit Memo from Payment Journal
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      CrMemoAmount := LibraryRandom.RandIntInRange(50,100);

      // [GIVEN] Payment journal
      // [GIVEN] Posted purchase credit memo with Amount = 100
      PostCreditMemoVendor(GenJournalLine,Vendor."No.",CrMemoAmount);
      CrMemoNo := GenJournalLine."Document No.";

      // [GIVEN] Payment journal with the line applied to credit memo and Amount = -100
      CreatePaymentLineAppliedToCrMemoVendor(GenJournalLine,Vendor."No.",-CrMemoAmount,CrMemoNo);

      // [WHEN] Post payment "P"
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] GLEntry for "P" has Amount = 100;
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Payment);
      GLEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      GLEntry.FINDFIRST;
      GLEntry.TESTFIELD(Amount,CrMemoAmount);
    END;

    [Test]
    PROCEDURE BatchPostPaymentToCreditMemoVendorPositiveAmount@276();
    VAR
      GenJournalLine@1003 : Record 81;
      Vendor@1002 : Record 23;
      CrMemoNo@1001 : Code[20];
      CrMemoAmount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Payment Applied to Credit Memo] [Payment] [Credit Memo] [Application]
      // [SCENARIO 378643] Post Vendor Payment applied to Credit Memo from Payment Journal
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      CrMemoAmount := LibraryRandom.RandIntInRange(50,100);

      // [GIVEN] Payment journal
      // [GIVEN] Posted purchase credit memo with Amount = 100
      PostCreditMemoVendor(GenJournalLine,Vendor."No.",CrMemoAmount);
      CrMemoNo := GenJournalLine."Document No.";

      // [GIVEN] Payment journal with the line applied to credit memo and Amount = 100
      CreatePaymentLineAppliedToCrMemoVendor(GenJournalLine,Vendor."No.",CrMemoAmount,CrMemoNo);

      // [WHEN] Post payment
      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Error 'Amount must be negative in Gen. Journal Line' thrown
      Assert.ExpectedError('Amount must be negative in Gen. Journal Line');
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      ClearSelectedDim;

      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateAccountInVendorPostingGroups;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateGenJournalTemplate;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AddRandomDaysToWorkDate@25() : Date;
    BEGIN
      EXIT(CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
    END;

    LOCAL PROCEDURE ApplyPaymentToVendor@12(AccountNo@1002 : Code[20];NumberOfLines@1005 : Integer;DocumentType@1003 : Option;DocumentType2@1004 : Option);
    VAR
      VendorLedgerEntry@1001 : Record 25;
      VendorLedgerEntry2@1000 : Record 25;
    BEGIN
      FindVendorLedgerEntry(VendorLedgerEntry,AccountNo,DocumentType2);
      FindVendorLedgerEntry(VendorLedgerEntry2,AccountNo,DocumentType);
      REPEAT
        VendorLedgerEntry2.VALIDATE("Amount to Apply",-VendorLedgerEntry.Amount / NumberOfLines);
        VendorLedgerEntry2.MODIFY(TRUE);
      UNTIL VendorLedgerEntry2.NEXT = 0;
      LibraryERM.SetAppliestoIdVendor(VendorLedgerEntry2);
    END;

    LOCAL PROCEDURE ApplyGenJnlLineEntryToInvoice@30(VAR GenJournalLine@1000 : Record 81;InvoiceNo@1001 : Code[20]);
    BEGIN
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Document Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",InvoiceNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CheckGenJnlLineAfterSuggestVendorPayment@135(Limit@1006 : Decimal;NoOfPayment@1001 : Integer;SecondInvoiceAmount@1008 : Decimal);
    VAR
      GenJournalLine@1005 : Record 81;
      Vendor@1002 : Record 23;
    BEGIN
      // Setup: Create vendor and Create and post Gen journal line with document type invoice.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      CreateAndPostMultipleGenJnlLine(GenJournalLine,Vendor."No.",LibraryRandom.RandIntInRange(15,20),SecondInvoiceAmount);
      LibraryVariableStorage.Enqueue(Vendor."No.");
      LibraryVariableStorage.Enqueue(Limit);

      // Exercise: Run report suggest vendor payment
      SuggestVendorPaymentUsingPage(GenJournalLine);

      // Verify:
      VerifyAmountDoesNotExceedLimit(GenJournalLine,Limit,NoOfPayment);
    END;

    LOCAL PROCEDURE CreateAndPostMultipleGenJnlLine@71(VAR GenJournalLine@1001 : Record 81;VendorNo@1000 : Code[20];FirstInvoiceAmount@1004 : Decimal;SecondInvoiceAmount@1005 : Decimal);
    VAR
      GenJournalTemplate@1003 : Record 80;
      GenJournalBatch@1002 : Record 232;
    BEGIN
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalTemplate.Type::General);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,WORKDATE,VendorNo,GenJournalLine."Document Type"::Invoice,
        -FirstInvoiceAmount);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,WORKDATE,VendorNo,GenJournalLine."Document Type"::Invoice,
        -SecondInvoiceAmount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateCurrency@2() : Code[10];
    VAR
      Currency@1000 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@94(VAR GenJournalBatch@1000 : Record 232;Type@1002 : Option);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      GenJournalTemplate.SETRANGE(Type,Type);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreatePaymentLineAppliedToCrMemoCustomer@297(VAR GenJournalLine@1001 : Record 81;CustomerNo@1003 : Code[20];PaymentAmount@1004 : Decimal;CrMemoNo@1005 : Code[20]);
    VAR
      GenJournalTemplate@1002 : Record 80;
      GenJournalBatch@1000 : Record 232;
    BEGIN
      CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Type::Payments);
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,CustomerNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,PaymentAmount);
      GenJournalLine."Applies-to Doc. Type" := GenJournalLine."Applies-to Doc. Type"::"Credit Memo";
      GenJournalLine."Applies-to Doc. No." := CrMemoNo;
      GenJournalLine.MODIFY;
    END;

    LOCAL PROCEDURE CreatePaymentLineAppliedToCrMemoVendor@298(VAR GenJournalLine@1001 : Record 81;VendorNo@1003 : Code[20];PaymentAmount@1004 : Decimal;CrMemoNo@1005 : Code[20]);
    VAR
      GenJournalTemplate@1002 : Record 80;
      GenJournalBatch@1000 : Record 232;
    BEGIN
      CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Type::Payments);
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,VendorNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,PaymentAmount);
      GenJournalLine."Applies-to Doc. Type" := GenJournalLine."Applies-to Doc. Type"::"Credit Memo";
      GenJournalLine."Applies-to Doc. No." := CrMemoNo;
      GenJournalLine.MODIFY;
    END;

    LOCAL PROCEDURE CreateInvoiceAndCreditMemoEntryForVendor@68(VAR GenJournalLine@1000 : Record 81;VendorNo@1002 : Code[20]);
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      // Take Random Amout for Invoice and Amount greater than Invoice Amount for Credit Memo. Adding 1 to make amount larger than Invoice Amount.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Vendor,VendorNo,-LibraryRandom.RandDec(100,2));
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::"Credit Memo",
        GenJournalLine."Account Type"::Vendor,VendorNo,-GenJournalLine.Amount + 1);
    END;

    LOCAL PROCEDURE CreateItem@28() : Code[20];
    VAR
      Item@1000 : Record 27;
      LibraryInventory@1002 : Codeunit 132201;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandDec(100,2));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateGenJournalBatch@278(VAR GenJournalBatch@1001 : Record 232;GenJournalTemplateType@1002 : Option);
    VAR
      GenJournalTemplate@1000 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.Type := GenJournalTemplateType;
      GenJournalTemplate.MODIFY;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreatePaymentTermsWithDiscount@86(VAR PaymentTerms@1000 : Record 3);
    BEGIN
      // Input any random Due Date, Discount Date Calculation and Discount %.
      LibraryERM.CreatePaymentTerms(PaymentTerms);
      EVALUATE(PaymentTerms."Due Date Calculation",'<' + FORMAT(LibraryRandom.RandInt(10)) + 'M>');
      EVALUATE(PaymentTerms."Discount Date Calculation",'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');
      PaymentTerms.VALIDATE("Due Date Calculation",PaymentTerms."Due Date Calculation");
      PaymentTerms.VALIDATE("Discount Date Calculation",PaymentTerms."Discount Date Calculation");
      PaymentTerms.VALIDATE("Discount %",LibraryRandom.RandDec(99,2));
      PaymentTerms.VALIDATE("Calc. Pmt. Disc. on Cr. Memos",TRUE);
      PaymentTerms.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorWithPriority@53() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      WITH Vendor DO BEGIN
        VALIDATE(Priority,1);
        MODIFY;
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateVendor@6(CurrencyCode@1004 : Code[10];ApplicationMethod@1005 : Option) : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Application Method",ApplicationMethod);
      Vendor.VALIDATE("Currency Code",CurrencyCode);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateVendorWithPaymentBlocked@26() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE(Blocked,Vendor.Blocked::Payment);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateVendorWithPaymentTerms@93(VAR Vendor@1001 : Record 23;PaymentTermsCode@1000 : Code[10]);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Payment Terms Code",PaymentTermsCode);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendWithDimensions@80(VAR VendNo@1002 : Code[20];VAR DimSetID@1003 : Integer);
    VAR
      GLSetup@1001 : Record 98;
    BEGIN
      VendNo := LibraryPurchase.CreateVendorNo;
      GLSetup.GET;
      DimSetID :=
        LibraryDimension.CreateDimSet(
          0,GLSetup."Global Dimension 1 Code",
          CreateDefDimWithFoundDimValue(GLSetup."Global Dimension 1 Code",DATABASE::Vendor,VendNo));
      DimSetID :=
        LibraryDimension.CreateDimSet(
          DimSetID,GLSetup."Global Dimension 2 Code",
          CreateDefDimWithFoundDimValue(GLSetup."Global Dimension 2 Code",DATABASE::Vendor,VendNo));
    END;

    LOCAL PROCEDURE CreateBankAccount@3(CurrencyCode@1002 : Code[10]) : Code[20];
    VAR
      BankAccount@1000 : Record 270;
      BankAccountPostingGroup@1001 : Record 277;
    BEGIN
      BankAccountPostingGroup.FINDFIRST;
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccount.VALIDATE("Currency Code",CurrencyCode);
      BankAccount.VALIDATE("Bank Acc. Posting Group",BankAccountPostingGroup.Code);
      BankAccount.MODIFY(TRUE);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE CreateMultipleGenJournalLine@17(VAR GenJournalLine@1004 : Record 81;GenJournalBatch@1001 : Record 232;NumberOfLines@1003 : Integer;PostingDate@1010 : Date;VendorNo@1000 : Code[20];DocumentType@1005 : Option;AmountSign@1006 : Integer) AmountSum : Integer;
    VAR
      Counter@1002 : Integer;
    BEGIN
      FOR Counter := 1 TO NumberOfLines DO BEGIN
        // Required value for Amount field is not important
        CreateGeneralJournalLine(
          GenJournalLine,GenJournalBatch,PostingDate,VendorNo,DocumentType,AmountSign * LibraryRandom.RandInt(100));
        AmountSum := AmountSum + GenJournalLine.Amount;
      END;
    END;

    LOCAL PROCEDURE CreateAndPostGeneralJournal@40(VAR GenJournalLine@1000 : Record 81;DocumentType@1005 : Option) DocumentNo : Code[20];
    VAR
      Vendor@1001 : Record 23;
      GenJournalTemplate@1002 : Record 80;
      GenJournalBatch@1003 : Record 232;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalTemplate.Type::General);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,WORKDATE,Vendor."No.",DocumentType,-LibraryRandom.RandDec(100,2));
      DocumentNo := GenJournalLine."Document No.";

      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,WORKDATE,Vendor."No.",DocumentType,GenJournalLine.Amount * 2);
      UpdateOnHoldOnGenJournalLine(GenJournalLine,GetOnHold);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@13(VAR GenJournalLine@1007 : Record 81;GenJournalBatch@1002 : Record 232;PostingDate@1005 : Date;VendorNo@1001 : Code[20];DocumentType@1003 : Option;Amount@1004 : Decimal);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      GenJournalLine.VALIDATE("Document No.",GenJournalBatch.Name + FORMAT(GenJournalLine."Line No."));
      GenJournalLine.VALIDATE("External Document No.",GenJournalLine."Document No.");
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePostGenJnlLineRunSuggestVendorPayments@67(VAR GenJournalLine@1000 : Record 81;VAR ShortcutDim1Code@1001 : Code[20]);
    VAR
      VendorNo@1003 : Code[20];
      ShortcutDim2Code@1002 : Code[20];
    BEGIN
      VendorNo := CreateGenJnlLineWithVendorBalAcc(GenJournalLine);
      LibraryVariableStorage.Enqueue(VendorNo);
      UpdateDimensionOnGeneralJournalLine(GenJournalLine);
      ShortcutDim1Code := GenJournalLine."Shortcut Dimension 1 Code";
      ShortcutDim2Code := GenJournalLine."Shortcut Dimension 2 Code";
      UpdateDiffDimensionOnVendor(VendorNo,ShortcutDim1Code,ShortcutDim2Code);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      SetupGenJnlLine(GenJournalLine);
      SuggestVendorPaymentUsingPage(GenJournalLine);
      FindGeneralJournalLines(GenJournalLine);
    END;

    LOCAL PROCEDURE CreatePostGenJnlLineWithCurrency@75(VendorNo@1000 : Code[20];DocumentType@1001 : Option;CurrencyCode@1002 : Code[10];LineAmount@1003 : Decimal);
    VAR
      GenJournalLine@1004 : Record 81;
    BEGIN
      LibraryJournals.CreateGenJournalLineWithBatch(
        GenJournalLine,DocumentType,GenJournalLine."Account Type"::Vendor,VendorNo,-LineAmount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateDefDimWithFoundDimValue@81(DimensionCode@1000 : Code[20];TableID@1002 : Integer;VendorNo@1001 : Code[20]) : Code[20];
    VAR
      DimensionValue@1004 : Record 349;
      DefaultDimension@1003 : Record 352;
    BEGIN
      LibraryDimension.FindDimensionValue(DimensionValue,DimensionCode);
      LibraryDimension.CreateDefaultDimension(
        DefaultDimension,TableID,VendorNo,DimensionValue."Dimension Code",DimensionValue.Code);
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE GetOnHold@27() : Code[3];
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      EXIT(
        COPYSTR(
          LibraryUtility.GenerateRandomCode(GenJournalLine.FIELDNO("On Hold"),DATABASE::"Gen. Journal Line"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Gen. Journal Line",GenJournalLine.FIELDNO("On Hold"))));
    END;

    LOCAL PROCEDURE FindAndPostPaymentJournalLine@52(GenJournalBatch@1001 : Record 232) : Code[20];
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.FINDFIRST;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE FindVendorLedgerEntry@41(VAR VendorLedgerEntry@1000 : Record 25;VendorNo@1001 : Code[20];DocumentType@1002 : Option);
    BEGIN
      VendorLedgerEntry.SETRANGE("Document Type",DocumentType);
      VendorLedgerEntry.SETRANGE("Vendor No.",VendorNo);
      VendorLedgerEntry.FINDSET;
    END;

    LOCAL PROCEDURE PostCreditMemoVendor@279(VAR GenJournalLine@1000 : Record 81;VendorNo@1002 : Code[20];CrMemoAmount@1001 : Decimal);
    VAR
      GenJournalTemplate@1003 : Record 80;
      GenJournalBatch@1004 : Record 232;
    BEGIN
      CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Type::Purchases);
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Account Type"::Vendor,VendorNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,CrMemoAmount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE PostCreditMemoCustomer@283(VAR GenJournalLine@1002 : Record 81;CustomerNo@1001 : Code[20];CrMemoAmount@1000 : Decimal);
    VAR
      GenJournalTemplate@1004 : Record 80;
      GenJournalBatch@1003 : Record 232;
    BEGIN
      CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Type::Sales);
      LibraryJournals.CreateGenJournalLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Account Type"::Customer,CustomerNo,
        GenJournalLine."Bal. Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,CrMemoAmount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE SetupAndCreateGenJournalLines@29(VAR GenJournalLine@1002 : Record 81;GenJournalBatch@1000 : Record 232) BankAccountNo : Code[20];
    VAR
      Vendor@1005 : Record 23;
      VendorNo@1008 : Code[20];
      CurrencyCode@1009 : Code[10];
      NoOfLines@1006 : Integer;
    BEGIN
      // Setup: Create Currency, Bank Account, Vendor and General Journal Lines.
      CurrencyCode := CreateCurrency;
      BankAccountNo := CreateBankAccount(CurrencyCode);

      // Create 2 to 10 Gen. Journal Lines Boundary 2 is important to test Suggest Vendor Payment for multiple lines.
      NoOfLines := 2 * LibraryRandom.RandInt(5);
      VendorNo := CreateVendor(CurrencyCode,Vendor."Application Method"::"Apply to Oldest");
      CreateMultipleGenJournalLine(
        GenJournalLine,GenJournalBatch,NoOfLines,WORKDATE,VendorNo,GenJournalLine."Document Type"::Invoice,-1);
    END;

    LOCAL PROCEDURE SuggestVendorPayment@49(GenJournalBatch@1003 : Record 232;VendorNo@1000 : Code[20];LastPaymentDate@1001 : Date;FindPaymentDiscounts@1002 : Boolean;BalAccountType@1005 : Option;BalAccountNo@1006 : Code[20];BankPaymentType@1007 : Option);
    VAR
      Vendor@1008 : Record 23;
      GenJournalLine@1012 : Record 81;
      SuggestVendorPayments@1009 : Report 393;
    BEGIN
      GenJournalLine.INIT;  // INIT is mandatory for Gen. Journal Line to Set the General Template and General Batch Name.
      GenJournalLine.VALIDATE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.VALIDATE("Journal Batch Name",GenJournalBatch.Name);
      SuggestVendorPayments.SetGenJnlLine(GenJournalLine);

      Vendor.SETRANGE("No.",VendorNo);
      SuggestVendorPayments.SETTABLEVIEW(Vendor);

      // Required Random Value for "Document No." field value is not important.
      SuggestVendorPayments.InitializeRequest(
        LastPaymentDate,FindPaymentDiscounts,0,FALSE,LastPaymentDate,FORMAT(LibraryRandom.RandInt(100)),TRUE,BalAccountType,
        BalAccountNo,BankPaymentType);
      SuggestVendorPayments.USEREQUESTPAGE(FALSE);
      SuggestVendorPayments.RUNMODAL;
    END;

    LOCAL PROCEDURE SuggestVendorPaymentUsingPage@72(VAR GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1002 : Record 232;
      SuggestVendorPayments@1001 : Report 393;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      GenJournalLine.INIT;  // INIT is mandatory for Gen. Journal Line to Set the General Template and General Batch Name.
      GenJournalLine.VALIDATE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.VALIDATE("Journal Batch Name",GenJournalBatch.Name);

      COMMIT;  // Commit required to avoid test failure.
      SuggestVendorPayments.SetGenJnlLine(GenJournalLine);
      SuggestVendorPayments.RUN;
    END;

    LOCAL PROCEDURE UpdateOnHoldOnGenJournalLine@63(VAR GenJournalLine@1000 : Record 81;OnHold@1003 : Code[3]);
    BEGIN
      GenJournalLine.VALIDATE("On Hold",OnHold);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGenJournalLine@42(VAR GenJournalLine@1000 : Record 81;VendorNo@1001 : Code[20]);
    BEGIN
      FindGeneralJournalLines(GenJournalLine);
      GenJournalLine.MODIFYALL("Bal. Account Type",GenJournalLine."Bal. Account Type"::Vendor,TRUE);
      GenJournalLine.MODIFYALL("Bal. Account No.",VendorNo,TRUE);
      UpdateDimensionOnGeneralJournalLine(GenJournalLine);
    END;

    LOCAL PROCEDURE UpdateDimensionOnGeneralJournalLine@59(VAR GenJournalLine@1000 : Record 81);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      DimensionValue@1002 : Record 349;
      DimensionValue2@1001 : Record 349;
    BEGIN
      GeneralLedgerSetup.GET;
      FindGeneralJournalLines(GenJournalLine); // Find General Journal Line to update Dimension on first record.
      LibraryDimension.FindDimensionValue(DimensionValue,GeneralLedgerSetup."Shortcut Dimension 1 Code");
      GenJournalLine.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);
      LibraryDimension.FindDimensionValue(DimensionValue2,GeneralLedgerSetup."Shortcut Dimension 2 Code");
      GenJournalLine.VALIDATE("Shortcut Dimension 2 Code",DimensionValue2.Code);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateDiffDimensionOnVendor@62(VendorNo@1000 : Code[20];GlobalDimValueCode1@1004 : Code[20];GlobalDimValueCode2@1005 : Code[20]);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      DefaultDimension@1001 : Record 352;
    BEGIN
      WITH GeneralLedgerSetup DO BEGIN
        GET;
        LibraryDimension.CreateDefaultDimension(
          DefaultDimension,DATABASE::Vendor,VendorNo,"Shortcut Dimension 1 Code",
          LibraryDimension.FindDifferentDimensionValue("Shortcut Dimension 1 Code",GlobalDimValueCode1));
        LibraryDimension.CreateDefaultDimension(
          DefaultDimension,DATABASE::Vendor,VendorNo,"Shortcut Dimension 2 Code",
          LibraryDimension.FindDifferentDimensionValue("Shortcut Dimension 2 Code",GlobalDimValueCode2));
      END;
    END;

    LOCAL PROCEDURE ClearSelectedDim@169();
    VAR
      SelectedDim@1000 : Record 369;
    BEGIN
      SelectedDim.SETRANGE("User ID",USERID);
      SelectedDim.SETRANGE("Object Type",3);
      SelectedDim.SETRANGE("Object ID",REPORT::"Suggest Vendor Payments");
      SelectedDim.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalWithAccountTypeGLAccount@38(VAR GenJournalLine@1000 : Record 81;GLAccountNo@1002 : Code[20]);
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      // Create General Journal Lines & Take Random Amount for Invoice.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::"G/L Account",GLAccountNo,LibraryRandom.RandDec(100,2));
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::"G/L Account",GLAccountNo,LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("Document No.",INCSTR(GenJournalLine."Document No."));
      GenJournalLine.VALIDATE("External Document No.",GenJournalLine."Document No.");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGenJnlLineWithVendorBalAcc@55(VAR GenJournalLine@1000 : Record 81) : Code[20];
    VAR
      GenJournalTemplate@1005 : Record 80;
      GenJournalBatch@1004 : Record 232;
      Vendor@1002 : Record 23;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,LibraryRandom.RandDecInRange(10,1000,2));
      LibraryPurchase.CreateVendor(Vendor);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::Vendor);
      GenJournalLine.VALIDATE("Bal. Account No.",Vendor."No.");
      GenJournalLine.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE FindGeneralJournalLines@57(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      GenJournalLine.FINDSET;
    END;

    LOCAL PROCEDURE GetDimensionFilterText@69() : Text;
    VAR
      GeneralLedgerSetup@1000 : Record 98;
      DimensionSelectionBuffer@1001 : Record 368;
    BEGIN
      GeneralLedgerSetup.GET;
      DimensionSelectionBuffer.SETFILTER(
        Code,'%1|%2',GeneralLedgerSetup."Shortcut Dimension 1 Code",GeneralLedgerSetup."Shortcut Dimension 2 Code");
      EXIT(DimensionSelectionBuffer.GETFILTER(Code));
    END;

    LOCAL PROCEDURE GetVendDefaultDim@74(VendNo@1001 : Code[20];DimensionCode@1000 : Code[20]) : Code[20];
    VAR
      DefaultDimension@1002 : Record 352;
    BEGIN
      DefaultDimension.GET(DATABASE::Vendor,VendNo,DimensionCode);
      EXIT(DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE CopyTempGenJournalLine@47(GenJournalLine@1000 : Record 81;VAR GenJournalLine2@1001 : Record 81);
    BEGIN
      FindGeneralJournalLines(GenJournalLine);
      REPEAT
        GenJournalLine2 := GenJournalLine;
        GenJournalLine2.INSERT;
      UNTIL GenJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyAmountDoesNotExceedLimit@125(GenJournalLine@1001 : Record 81;Limit@1002 : Integer;NoOfPayment@1004 : Integer);
    VAR
      SuggestVendorGenJnlLine@1000 : Record 81;
    BEGIN
      SuggestVendorGenJnlLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      SuggestVendorGenJnlLine.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      SuggestVendorGenJnlLine.CALCSUMS(Amount);
      IF Limit <> 0 THEN
        Assert.IsTrue(SuggestVendorGenJnlLine.Amount <= Limit,SuggestVendorAmountErr);
      Assert.AreEqual(NoOfPayment,SuggestVendorGenJnlLine.COUNT,NoOfPaymentErr);
    END;

    LOCAL PROCEDURE VerifyGenJournalEntriesAmount@9(VendorNo@1001 : Code[20]);
    VAR
      Currency@1004 : Record 4;
      GenJournalLine@1002 : Record 81;
      VendorLedgerEntry@1000 : Record 25;
      Assert@1005 : Codeunit 130000;
      TotalAmountLCY@1003 : Decimal;
    BEGIN
      GenJournalLine.SETRANGE("Document Type",GenJournalLine."Document Type"::Payment);
      GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Vendor);
      GenJournalLine.SETRANGE("Account No.",VendorNo);
      GenJournalLine.FINDFIRST;
      VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::Invoice);
      VendorLedgerEntry.SETRANGE("Vendor No.",GenJournalLine."Account No.");
      VendorLedgerEntry.FINDSET;
      REPEAT
        VendorLedgerEntry.CALCFIELDS("Amount (LCY)");
        TotalAmountLCY += ABS(VendorLedgerEntry."Amount (LCY)");
      UNTIL VendorLedgerEntry.NEXT = 0;

      Currency.GET(GenJournalLine."Currency Code");
      Assert.AreNearlyEqual(
        TotalAmountLCY,GenJournalLine."Amount (LCY)",Currency."Amount Rounding Precision",
        STRSUBSTNO(AmountErr,GenJournalLine.FIELDCAPTION("Amount (LCY)"),
          TotalAmountLCY,GenJournalLine."Journal Template Name",
          GenJournalLine."Journal Batch Name",GenJournalLine."Line No."));
    END;

    LOCAL PROCEDURE VerifyJournalLinesNotSuggested@39(JournalTemplateName@1001 : Code[10];JournalBatchName@1000 : Code[10]);
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      GenJournalLine.INIT;
      GenJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      Assert.RecordIsEmpty(GenJournalLine);
    END;

    LOCAL PROCEDURE VerifyRemainingOnVendorLedger@106(VendorNo@1001 : Code[20]);
    VAR
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      VendorLedgerEntry.SETRANGE("Vendor No.",VendorNo);
      VendorLedgerEntry.FINDSET;
      REPEAT
        VendorLedgerEntry.CALCFIELDS("Remaining Amount");
        VendorLedgerEntry.TESTFIELD("Remaining Amount",0);
      UNTIL VendorLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyVendorLedgerEntry@1(VendorNo@1002 : Code[20];VendorLedgerEntryCount@1000 : Integer);
    VAR
      VendorLedgerEntry@1001 : Record 25;
    BEGIN
      VendorLedgerEntry.INIT;
      VendorLedgerEntry.SETRANGE("Vendor No.",VendorNo);
      VendorLedgerEntry.SETFILTER("Applies-to ID",'<>''''');
      Assert.RecordCount(VendorLedgerEntry,VendorLedgerEntryCount);
    END;

    LOCAL PROCEDURE VerifyValuesOnVendLedgerEntry@11(DocumentNo@1000 : Code[20];DocumentType@1001 : Option;VendorNo@1006 : Code[20];Amount2@1002 : Decimal;RemainingAmount@1003 : Decimal;Open2@1004 : Boolean;OnHold@1005 : Code[3]);
    VAR
      VendorLedgerEntry@1007 : Record 25;
    BEGIN
      WITH VendorLedgerEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Vendor No.",VendorNo);
        FINDFIRST;
        CALCFIELDS(Amount,"Remaining Amount");
        Assert.AreNearlyEqual(Amount2,Amount,LibraryERM.GetAmountRoundingPrecision,
          STRSUBSTNO(ValidateErr,FIELDCAPTION(Amount),Amount2,TABLECAPTION,FIELDCAPTION("Entry No."),"Entry No."));
        TESTFIELD("Remaining Amount",RemainingAmount);
        TESTFIELD(Open,Open2);
        TESTFIELD("On Hold",OnHold);
      END;
    END;

    LOCAL PROCEDURE VerifyValuesOnGLEntry@43(GenJournalLine@1002 : Record 81;ShortcutDimension1Code@1001 : Code[20];ShortcutDimension2Code@1000 : Code[20]);
    VAR
      GLEntry@1003 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document Type",GLEntry."Document Type"::Invoice);
      GLEntry.SETRANGE(Description,GenJournalLine.Description);
      GLEntry.SETRANGE("Global Dimension 1 Code",ShortcutDimension1Code);
      GLEntry.SETRANGE("Global Dimension 2 Code",ShortcutDimension2Code);
      GLEntry.FINDSET;
      REPEAT
        GLEntry.TESTFIELD("Document Type",GLEntry."Document Type"::Invoice);
        GLEntry.TESTFIELD("Global Dimension 1 Code",ShortcutDimension1Code);
        GLEntry.TESTFIELD("Global Dimension 2 Code",ShortcutDimension2Code);
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDimensionOnGeneralJournalLine@34(GenJournalLine@1001 : Record 81;VendorNo@1002 : Code[20];GLAccountNo@1003 : Code[20]);
    VAR
      GenJournalLine2@1000 : Record 81;
    BEGIN
      GenJournalLine2.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      GenJournalLine2.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      GenJournalLine2.TESTFIELD("Shortcut Dimension 1 Code",'');
      GenJournalLine2.TESTFIELD("Shortcut Dimension 2 Code",'');
      GenJournalLine2.FINDLAST;
      GenJournalLine2.TESTFIELD("Account Type",GenJournalLine2."Account Type"::Vendor);
      GenJournalLine2.TESTFIELD("Account No.",VendorNo);
      GenJournalLine2.TESTFIELD("Bal. Account Type",GenJournalLine2."Bal. Account Type"::"G/L Account");
      GenJournalLine2.TESTFIELD("Bal. Account No.",GLAccountNo);
    END;

    LOCAL PROCEDURE VerifyDimensionOnGeneralJournalLineFromInvoice@54(GenJournalLine@1003 : Record 81;DimValue1Code@1001 : Code[20];DimValue2Code@1000 : Code[20]);
    VAR
      GenJournalLine2@1002 : Record 81;
    BEGIN
      GenJournalLine2.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      GenJournalLine2.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      GenJournalLine2.FINDLAST;
      GenJournalLine2.TESTFIELD("Shortcut Dimension 1 Code",DimValue1Code);
      GenJournalLine2.TESTFIELD("Shortcut Dimension 2 Code",DimValue2Code);
    END;

    LOCAL PROCEDURE VerifyDimOnGeneralJournalLineSummarizePerVend@66(FirstDim@1000 : Boolean);
    VAR
      GenJournalLine@1001 : Record 81;
      ShortcutDim1Code@1003 : Code[20];
      ShortcutDim2Code@1004 : Code[20];
    BEGIN
      Initialize;
      CreatePostGenJnlLineRunSuggestVendorPayments(GenJournalLine,ShortcutDim1Code);
      GetDefaultVendGlobalDimCode(ShortcutDim1Code,ShortcutDim2Code,GenJournalLine."Account No.",FirstDim);
      VerifyDimensionOnGeneralJournalLineFromInvoice(GenJournalLine,ShortcutDim1Code,ShortcutDim2Code);
    END;

    LOCAL PROCEDURE GetDefaultVendGlobalDimCode@105(VAR ShortcutDim1Code@1000 : Code[20];VAR ShortcutDim2Code@1001 : Code[20];AccountNo@1004 : Code[20];FirstDim@1003 : Boolean);
    VAR
      GLSetup@1002 : Record 98;
    BEGIN
      IF FirstDim THEN
        ShortcutDim2Code := ''
      ELSE BEGIN
        GLSetup.GET;
        ShortcutDim1Code := GetVendDefaultDim(AccountNo,GLSetup."Global Dimension 1 Code");
        ShortcutDim2Code := GetVendDefaultDim(AccountNo,GLSetup."Global Dimension 2 Code");
      END;
    END;

    LOCAL PROCEDURE VerifyGenJnlLineDimSetID@101(GenJnlBatch@1000 : Record 232;VendNo@1001 : Code[20];DimSetID@1003 : Integer);
    VAR
      GenJnlLine@1004 : Record 81;
    BEGIN
      GenJnlLine.SETRANGE("Journal Template Name",GenJnlBatch."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",GenJnlBatch.Name);
      GenJnlLine.SETRANGE("Account No.",VendNo);
      GenJnlLine.FINDFIRST;
      Assert.AreEqual(DimSetID,GenJnlLine."Dimension Set ID",GenJnlLine.FIELDCAPTION("Dimension Set ID"));
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@15(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    [RequestPageHandler]
    PROCEDURE SuggestVendorPaymentsRequestPageHandler@32(VAR SuggestVendorPayments@1000 : TestRequestPage 393);
    BEGIN
      SuggestVendorPayments.Vendor.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      SuggestVendorPayments.BalAccountNo.SETVALUE(LibraryVariableStorage.DequeueText);
      SuggestVendorPayments.LastPaymentDate.SETVALUE(WORKDATE);
      SuggestVendorPayments.UseVendorPriority.SETVALUE(LibraryVariableStorage.DequeueBoolean);
      SuggestVendorPayments.StartingDocumentNo.SETVALUE(LibraryRandom.RandInt(10));  // Setting a Random Document No., value is not important.
      SuggestVendorPayments.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE SuggestVendorPaymentsWithDimensionRequestPageHandler@44(VAR SuggestVendorPayments@1000 : TestRequestPage 393);
    BEGIN
      SuggestVendorPayments.Vendor.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      SuggestVendorPayments.LastPaymentDate.SETVALUE(WORKDATE);
      SuggestVendorPayments.SummarizePerVendor.SETVALUE(TRUE);
      SuggestVendorPayments.SummarizePerDimText.ASSISTEDIT;
      SuggestVendorPayments.StartingDocumentNo.SETVALUE(LibraryRandom.RandInt(10));  // Setting a Random Document No., value is not important.
      SuggestVendorPayments.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE SuggestVendorPaymentsWithDimensionAndBalAccRequestPageHandler@73(VAR SuggestVendorPayments@1000 : TestRequestPage 393);
    BEGIN
      SuggestVendorPayments.Vendor.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      SuggestVendorPayments.LastPaymentDate.SETVALUE(WORKDATE);
      SuggestVendorPayments.SummarizePerVendor.SETVALUE(TRUE);
      SuggestVendorPayments.SummarizePerDimText.ASSISTEDIT;
      SuggestVendorPayments.StartingDocumentNo.SETVALUE(LibraryRandom.RandInt(10));  // Setting a Random Document No., value is not important.
      SuggestVendorPayments.BalAccountNo.SETVALUE(LibraryVariableStorage.DequeueText);
      SuggestVendorPayments.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SelectDimensionHandlerOnSuggesvendorPayment@35(VAR DimensionSelectionMultiple@1000 : TestPage 562);
    BEGIN
      DimensionSelectionMultiple.FILTER.SETFILTER(Code,GetDimensionFilterText);
      DimensionSelectionMultiple.FIRST;
      REPEAT
        DimensionSelectionMultiple.Selected.SETVALUE(TRUE);
      UNTIL NOT DimensionSelectionMultiple.NEXT;
      DimensionSelectionMultiple.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SelectNoDimensionHandlerOnSuggesvendorPayment@64(VAR DimensionSelectionMultiple@1000 : TestPage 562);
    BEGIN
      DimensionSelectionMultiple.FILTER.SETFILTER(Code,GetDimensionFilterText);
      DimensionSelectionMultiple.FIRST;
      REPEAT
        DimensionSelectionMultiple.Selected.SETVALUE(FALSE);
      UNTIL NOT DimensionSelectionMultiple.NEXT;
      DimensionSelectionMultiple.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SelectFirstDimensionHandlerOnSuggesvendorPayment@65(VAR DimensionSelectionMultiple@1000 : TestPage 562);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      DimensionSelectionBuffer@1003 : Record 368;
    BEGIN
      GeneralLedgerSetup.GET;
      DimensionSelectionBuffer.SETRANGE(Code,GeneralLedgerSetup."Shortcut Dimension 1 Code");
      DimensionSelectionMultiple.FILTER.SETFILTER(Code,DimensionSelectionBuffer.GETFILTER(Code));
      DimensionSelectionMultiple.FIRST;
      DimensionSelectionMultiple.Selected.SETVALUE(TRUE);
      DimensionSelectionMultiple.OK.INVOKE;
    END;

    LOCAL PROCEDURE SetupGenJnlLine@46(VAR GenJournalLine@1000 : Record 81);
    VAR
      GenJournalTemplate@1001 : Record 80;
      GenJournalBatch@1002 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);

      GenJournalLine.INIT;  // INIT is mandatory for Gen. Journal Line to Set the General Template and General Batch Name.
      GenJournalLine.VALIDATE("Journal Template Name",GenJournalTemplate.Name);
      GenJournalLine.VALIDATE("Journal Batch Name",GenJournalBatch.Name);
    END;

    [RequestPageHandler]
    PROCEDURE SuggestVendorPaymentsWithoutBalAccountRequestPageHandler@48(VAR SuggestVendorPayments@1000 : TestRequestPage 393);
    BEGIN
      SuggestVendorPayments.Vendor.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      SuggestVendorPayments.LastPaymentDate.SETVALUE(WORKDATE);
      SuggestVendorPayments.SummarizePerVendor.SETVALUE(FALSE);
      SuggestVendorPayments.SummarizePerDimText.ASSISTEDIT;
      SuggestVendorPayments.StartingDocumentNo.SETVALUE(LibraryRandom.RandInt(10));  // Setting a Random Document No., value is not important.
      SuggestVendorPayments.BalAccountNo.SETVALUE('');
      SuggestVendorPayments.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ClearDimensionHandlerOnSuggesvendorPayment@50(VAR DimensionSelectionMultiple@1000 : TestPage 562);
    VAR
      GeneralLedgerSetup@1002 : Record 98;
      DimensionSelectionBuffer@1001 : Record 368;
    BEGIN
      GeneralLedgerSetup.GET;
      DimensionSelectionBuffer.SETFILTER(
        Code,'%1|%2',GeneralLedgerSetup."Shortcut Dimension 1 Code",GeneralLedgerSetup."Shortcut Dimension 2 Code");
      DimensionSelectionMultiple.FILTER.SETFILTER(Code,DimensionSelectionBuffer.GETFILTER(Code));
      DimensionSelectionMultiple.FILTER.SETFILTER(Selected,'yes');
      DimensionSelectionMultiple.FIRST;
      REPEAT
        DimensionSelectionMultiple.Selected.SETVALUE(FALSE);
      UNTIL NOT DimensionSelectionMultiple.NEXT;
      DimensionSelectionMultiple.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE SuggestVendorPaymentsWithAvailableAmtRequestPageHandler@178(VAR SuggestVendorPayments@1000 : TestRequestPage 393);
    BEGIN
      SuggestVendorPayments.Vendor.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      SuggestVendorPayments.LastPaymentDate.SETVALUE(WORKDATE);
      SuggestVendorPayments."Available Amount (LCY)".SETVALUE(LibraryVariableStorage.DequeueDecimal);
      SuggestVendorPayments.StartingDocumentNo.SETVALUE(LibraryRandom.RandInt(10));
      SuggestVendorPayments.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Dimension] [Suggest Vendor Payments] [Purchase]

      Unsupported version tags:
      NA: Unable to Execute

      Test for ERM - Suggest Vendor Payment with Currency.
        1. Create and Post General Journal Lines.
        2. Create and Post General Journal Lines and Suggest Vendor Payments with Manual Check.
        3. Create and Post General Journal Lines and Suggest Vendor Payments with Computer Check.
        4. Create and Post General Journal Lines and Suggest Vendor Payments with All Vendors.
        4. Create and Post General Journal Lines and Suggest Vendor Payments with Discounts (without Currency).
        5. Apply Payment Against the invoices and show only Applied Entries.
        6. Apply Refund Against the Credit Memo and show only Applied Entries.
        7. Check Error while posting General Journal Line for Vendor and when External Document No. is not given.
        8. Test Vendor Ledger Entry after Posting Payment Journal with running Suggest Vendor Payment.
        9. Test Vendor Ledger Entry after Posting Payment Journal with running Suggest Vendor Payment against Invoice.
       10. Test Vendor Ledger Entry after Posting Payment Journal with running Suggest Vendor Payment against Refund.
       11. Check that no General Journal Line exists for Vendor with Payment Blocked after doing Suggest Vendor Payment.
       12. Test that Payment is not suggested for Vendor whose balance is Debit Balance and Use Vendor Priority is TRUE in Suggest Vendor Payment Request Page.
       13. Test that Payment is not suggested for Vendor whose balance is Debit Balance and Use Vendor Priority is FALSE in Suggest Vendor Payment Request Page.
       14. Verify that program populate correct Dimensions on running Suggest Vendor Payments on Payment Journal.
       15. Verify that after two invoices each smaller than the limit and sum of them is exceeds the limit and after running suggest vendor payment report then one payment exist.
       16. Verify that after two invoices each smaller than the limit and Sum of them is smaller then limit and after running suggest vendor payment report then two payment exist.
       17. Verify that after two invoices one is smaller, second is bigger than the limit and after running suggest vendor payment report then one payment exist.
       18. Verify that after two invoices both are bigger than the limit and after running suggest vendor payment report then no payment exist.
       19. Verify that after two invoices are posted and after running suggest vendor payment report without limit and then 2 payment exist.
       20. Verify that program populate correct Dimensions on running Suggest Vendor Payments on Payment Journal with Summarize per Vendor with dimensions.

      Covers Test Cases for WI - 20556
        ----------------------------------------------------------------------------------
        Test Function Name                                                  TFS ID
        ----------------------------------------------------------------------------------
        VendorPaymentWithManualCheck                                        8861,8862
        VendorPaymentWithComputerCheck                                      8861,8863 and 8864
        VendorPaymentWithAllVendors                                         8861 and 8865

        ----------------------------------------------------------------------------------
        Test Function Name                                                  TFS ID
        ----------------------------------------------------------------------------------
        VendorPaymentWithDiscTrue                                           130953
        VendorPaymentWithDiscFalse                                          130953

      Covers Test Cases for WI - 233966
        ----------------------------------------------------------------------------------
        Test Function Name                                                  TFS ID
        ----------------------------------------------------------------------------------
        PaymentToInvoiceWithApplyEntry                                      125111,126002,126003,126004
        RefundCreditMemoWithApplyEntry                                      125111,126005,126006,126007

      Covers Test Cases for WI - 239544
        ----------------------------------------------------------------------------------
        Test Function Name                                                  TFS ID
        ----------------------------------------------------------------------------------
        AdjustPaymentJournal                                                125011

      TFS_TS_ID = 243942
      Covers Test cases:
      ----------------------------------------------
      Test Function Name                  TFS ID
      ----------------------------------------------
      PaymentBySuggestVendorPayment   124531, 124532

      TFS_TS_ID = 252941
      Covers Test cases:
      ------------------------------------------------------------------------------------
      Test Function Name                                                     TFS ID
      ------------------------------------------------------------------------------------
      SuggestVendorPaymentForInvoice,SuggestVendorPaymentForRefund           125442

      Covers Test cases: 253541
        ----------------------------------------------
        Test Function Name                  TFS ID
        ----------------------------------------------
        VendorPaymentForBlockedVendor       244274

      Covers Test cases: 282614
        ----------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                  TFS ID
        ----------------------------------------------------------------------------------------------------------------------------
        SuggestPaymentForVendorWithDebitBalanceAndPriorityTrue, SuggestPaymentForVendorWithDebitBalanceAndPriorityFalse     280494

      Covers Test cases: 283054
        ----------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                  TFS ID
        ----------------------------------------------------------------------------------------------------------------------------
        GLEntriesWithDimensionValues,DimensionAfterSuggestVendorPaymentOnGeneralJournal                                     283054

      Covers Test cases: 294081
        ----------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                  TFS ID
        ----------------------------------------------------------------------------------------------------------------------------
       DimensionOnPaymnetJournalFromGeneralJournal                                                                          294081

      BUG ID: 335915
      --------------------------------------------------------------------------------------------------------
      Test Function Name                                                                              TFS ID
      --------------------------------------------------------------------------------------------------------
      CheckGenJnlLineWhenSumOfInvoicesGreaterThanLimit,CheckGenJnlLineWhenLimitMoreThanSumOfInvoices,
      CheckGenJnlLineWhenOneInvoiceBiggerThanLimit,CheckGenJnlLineWhenBothInviceMoreThanLimit,
      CheckGenJnlLineWithTwoInvoicesWithoutLimit

      Covers Test cases: 353215
        ----------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                  TFS ID
        ----------------------------------------------------------------------------------------------------------------------------
       DimensionOnPaymentJournalFromGenJournalWithSums                                                                      353215
    }
    END.
  }
}

