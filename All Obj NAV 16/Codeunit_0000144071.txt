OBJECT Codeunit 144071 ERM TCS and TDS Documents
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AssesseeCode@1500020 : Record 13727;
      CompanyInformation@1500019 : Record 79;
      GeneralLedgerSetup@1500018 : Record 98;
      IncomeTaxAccountingPeriod@1500014 : Record 13724;
      IncomeTaxPeriodSetup@1500021 : Record 16501;
      NodNocHeader@1500017 : Record 13786;
      ServiceTaxEntry@1500016 : Record 16473;
      ServiceTaxGroups@1500015 : Record 16471;
      StructureHeader@1500013 : Record 13792;
      TcsNatureOfCollection@1500012 : Record 16507;
      TdsNatureOfDeduction@1500023 : Record 13726;
      TDSGroup@1500027 : Record 13731;
      TCSSetup@1500010 : Record 16508;
      TDSSetup@1500024 : Record 13728;
      Vendor@1500022 : Record 23;
      Assert@1500001 : Codeunit 130000;
      LibraryERM@1500002 : Codeunit 131300;
      LibrarySetupStorage@1500302 : Codeunit 131009;
      LibraryInventory@1500003 : Codeunit 132201;
      LibraryJournals@1500004 : Codeunit 131306;
      LibraryPurchase@1500025 : Codeunit 130512;
      LibraryRandom@1500005 : Codeunit 130440;
      LibrarySales@1500006 : Codeunit 130509;
      LibraryServiceTax@1500301 : Codeunit 143001;
      LibraryTCS@1500007 : Codeunit 143008;
      LibraryTDS@1500011 : Codeunit 143000;
      LibraryVariableStorage@1500008 : Codeunit 131004;
      LibraryUtility@1500029 : Codeunit 131000;
      LibraryWarehouse@1500030 : Codeunit 132204;
      ServiceTaxAsExciseHelper@1500009 : Codeunit 143003;
      isInitialized@1500303 : Boolean;
      AmountErr@1500000 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=%1 is incorrect in %2.';
      ValueNotFoundErr@1500031 : TextConst 'ENU=No records found.';
      CorrectionType@1500032 : ' ,Deductor,Deductee';
      GeneralJournalTemplateName@1500033 : Code[20];
      CreditAmountErr@1500026 : TextConst '@@@="%1 and %2 = Expected Amount and Actual Amount";ENU=The expected value is %1 and the actual value is %2.';

    [Test]
    PROCEDURE CreateSalesCreditMemo@1500013();
    VAR
      ExpectedTCSEntry@1500135 : Record 16514;
      SalesHeader@1500037 : Record 36;
      DocumentNo@1500040 : Code[20];
    BEGIN
      // [SCENARIO 163784] TCS Calculation for Sales Credit Memo
      // [FEATURE] [TCS] [Sales CreditMemo]

      // [GIVEN] Created TCS setup,NOD/NOC setup,TCS Group,TCS Nature of Collection setup
      Initialize;

      // [WHEN] Create and Post Sales Credit Memo
      CreateSalesOrder(SalesHeader,LibraryInventory.CreateItemNo,SalesHeader."Document Type"::"Credit Memo",FALSE);
      CalcTCSfromBase(ExpectedTCSEntry,SalesHeader."Amount to Customer");
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] G/L Entry and TCS Entry have been created
      VerifyGLEntry(DocumentNo,SalesHeader."Amount to Customer" + ExpectedTCSEntry."Total TCS Including SHE CESS");
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,SalesHeader."Document Type"::"Credit Memo");
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler)]
    PROCEDURE CheckDebitofTCSonCreditMemo@1500014();
    VAR
      GenJournalLine@1500043 : Record 81;
      SalesHeader@1500046 : Record 36;
      ExpectedTCSEntry@1500047 : Record 16514;
      SalesHeaderCrMemo@1500000 : Record 36;
      CreditMemoDocNo@1500053 : Code[20];
      Amountdeb@1500054 : Decimal;
    BEGIN
      // [SCENARIO 163786] Verify if the TCS debited on credit memo for a Sales order
      // [FEATURE][TCS][SALES ORDER]

      // [GIVEN] Created TCS Setup
      Initialize;

      // [WHEN] Step 1: Create and Post Sales Order
      CreateSalesOrder(SalesHeader,LibraryInventory.CreateItemNo,SalesHeader."Document Type"::Order,FALSE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      // Step 2: Create and Post Bank Payment Journal
      CreateBankPaymentJournal(GenJournalLine,FALSE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      // Step 3: Create and Post Sales Credit Memo
      CreateSalesOrder(SalesHeaderCrMemo,LibraryInventory.CreateItemNo,SalesHeaderCrMemo."Document Type"::"Credit Memo",FALSE);
      CalcTCSfromBase(ExpectedTCSEntry,SalesHeaderCrMemo."Amount to Customer");
      CreditMemoDocNo := LibrarySales.PostSalesDocument(SalesHeaderCrMemo,TRUE,TRUE);

      // [THEN] G/L Entry and TCS Entries have been created
      Amountdeb := SalesHeaderCrMemo."Amount to Customer" + ExpectedTCSEntry."Total TCS Including SHE CESS";
      VerifyGLEntry(CreditMemoDocNo,Amountdeb);
      VerifyTCSEntry(ExpectedTCSEntry,CreditMemoDocNo,SalesHeaderCrMemo."Document Type"::"Credit Memo");
    END;

    [Test]
    PROCEDURE CalcTCSCalculationwhereApplicable@1500015();
    VAR
      ExpectedTCSEntry@1500056 : Record 16514;
      SalesHeader@1500061 : Record 36;
      SalesLine@1170000000 : Record 37;
      DocumentNo@1500064 : Code[20];
    BEGIN
      // [SCENARIO 163693] Calculates TCS for Lines where applicable
      // [FEATURE] [TCS][SALES ORDER]

      // [GIVEN] Created TCS Setup
      Initialize;

      // [WHEN] Create and Post Sales Order
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order);
      SalesLine.SETRANGE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      SalesLine.FINDSET;
      CalcTCSfromBase(ExpectedTCSEntry,SalesLine."Line Amount");
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] G/L Entry and TCS Entries have been created
      VerifyGLEntryForDocument(DocumentNo);
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,SalesHeader."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(SalesOrderStatisticsMPH)]
    PROCEDURE CheckStatisticPageForTCSAmount@1500058();
    VAR
      SalesHeader@1500066 : Record 36;
      ExpectedTCSEntry@1500068 : Record 16514;
    BEGIN
      // [SCENARIO 163800] Check Sales Order Statistics Page for TCS Amount
      // [FEATURE] [TCS][SALES CREDIT MEMO]

      // [GIVEN] Created TCS Setup
      Initialize;

      // [WHEN] Create and Post Sales Credit Memo
      CreateSalesOrder(SalesHeader,LibraryInventory.CreateItemNo,SalesHeader."Document Type"::"Credit Memo",FALSE);
      CalcTCSfromBase(ExpectedTCSEntry,SalesHeader."Amount to Customer");

      // [THEN] TCS Amount calculated in Statistics page
      VerifySalesStatistics(SalesHeader,ExpectedTCSEntry."Total TCS Including SHE CESS");
    END;

    [Test]
    PROCEDURE VerifyTCSRounding@1500016();
    VAR
      ExpectedTCSEntry@1500071 : Record 16514;
      SalesHeader@1500073 : Record 36;
      DocumentNo@1500077 : Code[20];
    BEGIN
      // [SCENARIO 163789] Verify TCS rounding precision and amounts
      // [FEATURE] [TCS][SALES CREDIT MEMO]

      // [GIVEN] Created TCS Setup
      Initialize;

      // [WHEN] Creat and Post Sales Credit Memo with TCS Rounding
      CreateSalesOrder(SalesHeader,LibraryInventory.CreateItemNo,SalesHeader."Document Type"::"Credit Memo",FALSE);
      CalcTCSfromBase(ExpectedTCSEntry,SalesHeader."Amount to Customer");
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] TCS amounts are rounded as per setup
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,SalesHeader."Document Type");
    END;

    [Test]
    PROCEDURE CreateSalesOrderwithTCSandOtherTaxes@1500308();
    VAR
      ExpectedTCSEntry@1500471 : Record 16514;
      GLAccount@1500311 : Record 15;
      SalesHeader@1500312 : Record 36;
      DocumentNo@1500310 : Code[20];
    BEGIN
      // [SCENARIO 163797] Check for TCS in Sales Credit Memo when Other Taxes are Included
      // [FEATURE] [Sales Creditmemo With Service Tax]

      // [GIVEN] Created TCS Setup and Service Tax Setup
      Initialize;
      LibraryServiceTax.CreateServiceTaxGroup(ServiceTaxGroups);
      LibraryServiceTax.CreateServiceTaxSetup(ServiceTaxGroups.Code,WORKDATE);
      LibraryServiceTax.CreateServiceTaxStructure(StructureHeader);
      CreateGLAccountWithGenProdPostingSetup(GLAccount);

      // [WHEN] Create Sales Credit Memo
      CreateSalesOrder(SalesHeader,GLAccount."No.",SalesHeader."Document Type"::"Credit Memo",TRUE);
      CalculateServTaxTotal(ServiceTaxEntry,ServiceTaxGroups.Code,WORKDATE,SalesHeader."Amount to Customer");
      CalcTCSfromBase(ExpectedTCSEntry,ServiceTaxEntry."Amount Including Service Tax");
      DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Service Tax Entries and TCS Entries have been created
      VerifyServTaxEntry(ServiceTaxEntry,DocumentNo,SalesHeader."Document Type"::"Credit Memo");
      VerifyTCSEntry(ExpectedTCSEntry,DocumentNo,SalesHeader."Document Type");
    END;

    [Test]
    PROCEDURE CreateGenJnlForTCSRounding@1500004();
    VAR
      ExpectedTCSEntry@1500000 : Record 16514;
      GenJournalLine@1500001 : Record 81;
    BEGIN
      // [SCENARIO 163715] Create and Post Gen. Journal with TCS Rounding.
      // [FEATURE] [TCS Transcations]

      // [GIVEN] Created TCS Setup
      Initialize;

      // [WHEN] Created and Posted General journal with TCS Rounding Precision
      CreateGenJournal(GenJournalLine);
      CalcTCSfromBase(ExpectedTCSEntry,GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] G/L Entries and TCS Entries have been created
      VerifyGLEntryForDocument(GenJournalLine."Document No.");
      VerifyTCSEntry(ExpectedTCSEntry,GenJournalLine."Document No.",GenJournalLine."Document Type");
    END;

    [Test]
    PROCEDURE CheckTCSCalcwithDiffRates@1500006();
    VAR
      GenJournalLine@1500005 : Record 81;
      GenJournalLine2@1500001 : Record 81;
      ExpectedTCSEntry@1500002 : Record 16514;
      ExpectedTCSEntry2@1500003 : Record 16514;
    BEGIN
      // [SCENARIO 163723] TCS Calculation for Different Rates
      // [FEATURE][TCS Transcations]

      // [GIVEN] Created TCS setup,NOD/NOC setup,TCS Group,TCS Nature of Collection setup
      Initialize;

      // [WHEN] Created and Posted General journals with different Setups
      CreateAndPostGenJournalWithDifferentRates(
        GenJournalLine,ExpectedTCSEntry,GenJournalLine2,ExpectedTCSEntry2);

      // [THEN] Verify GL Entry and TCS Entries for different setups
      VerifyGLEntryForDocument(GenJournalLine."Document No.");
      VerifyTCSEntry(ExpectedTCSEntry,GenJournalLine."Document No.",GenJournalLine."Document Type");
      VerifyGLEntryForDocument(GenJournalLine2."Document No.");
      VerifyTCSEntry(ExpectedTCSEntry2,GenJournalLine2."Document No.",
        GenJournalLine2."Document Type");
    END;

    [Test]
    PROCEDURE VerifyGenJnlWithDifferentAssesseCode@1500007();
    VAR
      GenJournalLine@1500000 : Record 81;
      ExpectedTCSEntry@1500001 : Record 16514;
    BEGIN
      // [SCENARIO 163724] Create and Post Gen. Journal with Diferent AssesseCode.
      // [FEATURE] [TCS Transcations]

      // [GIVEN] Created TCS Setup
      Initialize;

      // [WHEN] Created and Posted General journal
      CreateGenJournal(GenJournalLine);
      CalcTCSfromBase(ExpectedTCSEntry,GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] G/L Entries and TCS Entries have been created
      VerifyGLEntryForDocument(GenJournalLine."Document No.");
      VerifyTCSEntry(ExpectedTCSEntry,GenJournalLine."Document No.",GenJournalLine."Document Type");
    END;

    [Test]
    PROCEDURE CreateGenJnlWithForeignCurrency@1500003();
    VAR
      GenJournalLine@1500003 : Record 81;
      ExpectedTCSEntry@1500001 : Record 16514;
      CurrencyCode@1500002 : Code[10];
    BEGIN
      // [SCENARIO 163726] Create and Post Gen. Journal with Foreign Currency.
      // [FEATURE] [TCS Transcations]

      // [GIVEN] Created TCS Setups.
      Initialize;
      CurrencyCode := LibraryERM.CreateCurrencyWithRandomExchRates;
      UpdateCurrencyCodeInCustomer(NodNocHeader."No.",CurrencyCode);

      // [WHEN] Created and Posted General journal with Foreign Currency
      CreateGenJournal(GenJournalLine);
      CalcTCSfromBaseforForeignCurrency(ExpectedTCSEntry,GenJournalLine.Amount,CurrencyCode);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] G/L Entries and TCS Entries have been created
      VerifyGLEntryForDocument(GenJournalLine."Document No.");
      VerifyTCSEntry(ExpectedTCSEntry,GenJournalLine."Document No.",GenJournalLine."Document Type");
    END;

    [Test]
    [HandlerFunctions(PurchOrderStatisticsMPH)]
    PROCEDURE CreateForm27QwithTDSTransaction@1500032();
    VAR
      TDSEntry@1500005 : Record 13729;
      PurchaseHeader@1500000 : Record 38;
      PurchaseLine@1500001 : Record 39;
      Amount@1500004 : Decimal;
      DocumentNo@1500002 : Code[20];
      CurrencyCode@1500006 : Code[10];
    BEGIN
      // [SCENARIO 164279] Create and Post . Purchase Order and Payment Journal for Form27Q
      // [FEATURE] [TDS][Purchase Order][Form 27Q]

      // [GIVEN] Created TDS Setups.
      Initialize;
      CreateTDSSetupWithDifferentRates;
      Amount := LibraryRandom.RandDec(10000,2);

      // [WHEN] Created and Posted Purchase Order and Payment Journal.
      CreatePurchaseDocument(PurchaseHeader,PurchaseLine,Amount,CurrencyCode);
      CalcTDSAmountWithCurrencyExchangeRate(TDSEntry,Amount,CurrencyCode,TRUE);
      VerifyPurchaseOrderStatistics(PurchaseLine,TDSEntry);
      CalcTDSAmountWithCurrencyExchangeRate(TDSEntry,Amount,CurrencyCode,FALSE);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreateBankPaymentJnlAndUpdateChallanDetails(DocumentNo);
      LibraryTDS.GetFormNo(FALSE);

      // [THEN] G/L Entries, TCS Entries and Form 27Q have been created and verified.
      VerifyGLEntryPurchase(DocumentNo,PurchaseHeader."Document Type"::Invoice,TDSEntry."TDS Base Amount");
      VerifyTDSEntryPurchase(TDSEntry,DocumentNo);
      VerifyForm27QEntry(DocumentNo);
    END;

    [Test]
    [HandlerFunctions(Correct26Q27QEntries)]
    PROCEDURE CorrectFormEntries@1500036();
    BEGIN
      // [SCENARIO 164297] Correct Entries in Form 26Q
      // [FEATURE] [Correct 26Q/27Q Entries]

      // [GIVEN] Created Accounting Period Setups.
      InitializeAccPeriod;
      COMMIT;

      // [WHEN] Correct Deductor and Deductee Records in form 26Q/27Q
      CorrectionType := CorrectionType::Deductor;
      LibraryVariableStorage.Enqueue(CorrectionType);
      ASSERTERROR REPORT.RUN(REPORT::"Correct 26Q/27Q Entries");

      // [THEN] Verified Correct 26Q/27Q Entries.
      Assert.ExpectedError(ValueNotFoundErr);

      // [WHEN] Correct Deductor and Deductee Records.
      CorrectionType := CorrectionType::Deductee;
      LibraryVariableStorage.Enqueue(CorrectionType);
      ASSERTERROR REPORT.RUN(REPORT::"Correct 26Q/27Q Entries");

      // [THEN] Verified Correct 26Q/27Q Entries.
      Assert.ExpectedError(ValueNotFoundErr);
    END;

    LOCAL PROCEDURE Initialize@1500300();
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;
      GeneralLedgerSetup.GET;
      CompanyInformation.GET;
      LibraryTDS.CreateDeductoryCodeAndUpdateOnCompanyInformation(CompanyInformation);
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,TRUE);
      isInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE InitializeAccPeriod@1500042();
    BEGIN
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
    END;

    LOCAL PROCEDURE CreateGLAccountWithGenProdPostingSetup@1500317(VAR GLAccount@1500300 : Record 15);
    VAR
      GenProductPostingGroup@1500301 : Record 251;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGenProdPostingGroup(GenProductPostingGroup);
      GLAccount.VALIDATE("Gen. Posting Type",GLAccount."Gen. Posting Type"::Sale);
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GenProductPostingGroup.Code);
      GLAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@1500018(VAR SalesHeader@1500080 : Record 36;ItemNo@1500002 : Code[20];DocumentType@1500081 : Option;ServTax@1500001 : Boolean);
    VAR
      SalesLine@1500085 : Record 37;
      Amount@1500000 : Decimal;
    BEGIN
      Amount := LibraryRandom.RandDec(1000000,2);
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,NodNocHeader."No.");
      IF ServTax THEN BEGIN
        SalesHeader.VALIDATE(Structure,StructureHeader.Code);
        SalesHeader.VALIDATE("Posting Date",WORKDATE);
        SalesHeader.MODIFY(TRUE);
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::"G/L Account",ItemNo,LibraryRandom.RandInt(1));
        SalesLine.VALIDATE("Service Tax Group",ServiceTaxGroups.Code);
      END ELSE BEGIN
        SalesHeader.VALIDATE("Posting Date",WORKDATE);
        SalesHeader.MODIFY(TRUE);
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandInt(1));
      END;
      SalesLine.VALIDATE("Unit Price",Amount);
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      SalesLine.MODIFY(TRUE);
      SalesHeader.CALCFIELDS("Amount to Customer");
    END;

    LOCAL PROCEDURE CreateTCSSetupWithDiffRate@1500005(VAR TCSSetup@1500000 : Record 16508);
    BEGIN
      WITH TCSSetup DO BEGIN
        INIT;
        VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
        VALIDATE("Assessee Code",AssesseeCode.Code);
        VALIDATE("Effective Date",CALCDATE('<+1M>',TODAY));
        VALIDATE("Concessional Code",'');
        VALIDATE("TCS %",LibraryRandom.RandInt(10));
        VALIDATE("TCS Threshold Amount",LibraryRandom.RandDec(100000,2));
        VALIDATE("Surcharge %",LibraryRandom.RandInt(10));
        VALIDATE("Surcharge Threshold Amount",LibraryRandom.RandDec(200000,2));
        VALIDATE("eCESS %",LibraryRandom.RandInt(10));
        VALIDATE("TCS Type",TcsNatureOfCollection."TCS Type");
        VALIDATE("TCS Account No.",LibraryERM.CreateGLAccountNo);
        VALIDATE("No. Series",LibraryERM.CreateNoSeriesCode);
        VALIDATE("SHE Cess %",LibraryRandom.RandInt(10));
        INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE CalcTCSfromBase@1500020(VAR ExpectedTCSEntry@1500093 : Record 16514;Amount@1500095 : Decimal);
    BEGIN
      WITH ExpectedTCSEntry DO BEGIN
        "TCS Base Amount" := Amount;
        "TCS Amount" := LibraryTCS.RoundTCS(TCSSetup."TCS %" * Amount / 100);
        "Surcharge Amount" := LibraryTCS.RoundTCS((TCSSetup."TCS %" * Amount / 100) * (TCSSetup."Surcharge %" / 100));
        "eCESS Amount" := LibraryTCS.RoundTCS(TCSSetup."eCESS %" * ("TCS Amount" + "Surcharge Amount" ) / 100);
        "SHE Cess Amount" := LibraryTCS.RoundTCS(("TCS Amount" + "Surcharge Amount") * TCSSetup."SHE Cess %" / 100);
        "Total TCS Including SHE CESS" := "TCS Amount" + "Surcharge Amount" + "eCESS Amount" + "SHE Cess Amount";
      END;
    END;

    LOCAL PROCEDURE CreateSalesDocument@1500021(VAR SalesHeader@1500096 : Record 36;VAR SalesLine@1500459 : Record 37;DocumentType@1500097 : Option);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,NodNocHeader."No.");
      SalesHeader.VALIDATE("Posting Date",WORKDATE);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(5));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10000,2));
      SalesLine.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(5));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10000,2));
      SalesLine.VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
      SalesLine.MODIFY(TRUE);
      SalesHeader.CALCFIELDS("Amount to Customer");
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@1500031(VAR PurchaseHeader@1500070 : Record 38;VAR PurchaseLine@1500001 : Record 39;Amount@1500002 : Decimal;VAR CurrencyCode@1500000 : Code[10]);
    VAR
      Item@1500007 : Record 27;
    BEGIN
      CurrencyCode := LibraryERM.CreateCurrencyWithExchangeRate(IncomeTaxAccountingPeriod."Starting Date",
          LibraryRandom.RandDec(100,2),LibraryRandom.RandDec(500,2));
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      WITH PurchaseHeader DO BEGIN
        VALIDATE("Vendor Invoice No.","No.");
        VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
        VALIDATE("Currency Code",CurrencyCode);
        VALIDATE("Location Code",'');
        MODIFY(TRUE);
      END;
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItem(Item),1);
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",TdsNatureOfDeduction.Code);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBankPaymentJournal@1500027(VAR GenJournalLine@1500000 : Record 81;TDSType@1500003 : Boolean);
    VAR
      GenJournalTemplate@1500001 : Record 80;
      GenJournalBatch@1500002 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::General);
      GenJournalTemplate.VALIDATE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.MODIFY(TRUE);
      GeneralJournalTemplateName := GenJournalTemplate.Name;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      IF TDSType THEN BEGIN
        TDSGroup.SETRANGE("TDS Group",TDSSetup."TDS Group");
        TDSGroup.FINDFIRST;
        LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,
          GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",TDSGroup."TDS Account",
          GenJournalLine."Bal. Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,0);
        GenJournalLine.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
        GenJournalLine.VALIDATE("T.A.N. No.",CompanyInformation."T.A.N. No.");
        GenJournalLine.VALIDATE("Pay TDS",TRUE);
        GenJournalLine.MODIFY(TRUE);
      END ELSE BEGIN
        LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,
          GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",TCSSetup."TCS Account No.",
          GenJournalLine."Bal. Account Type"::"Bank Account",LibraryERM.CreateBankAccountNo,0);
        GenJournalLine.VALIDATE("Posting Date",WORKDATE);
        GenJournalLine.VALIDATE("T.C.A.N. No.",CompanyInformation."T.C.A.N. No.");
        GenJournalLine.VALIDATE("Pay TCS",TRUE);
        GenJournalLine.MODIFY(TRUE);
        PayTCS(GenJournalBatch.Name);
      END;
    END;

    LOCAL PROCEDURE CalculateServTaxTotal@1500330(VAR ServiceTaxEntry@1500304 : Record 16473;ServTaxGroupCode@1500302 : Code[20];FromDate@1500303 : Date;BaseAmount@1500301 : Decimal);
    VAR
      ServiceTaxSetup@1500300 : Record 16472;
    BEGIN
      ServiceTaxSetup.SETRANGE(Code,ServTaxGroupCode);
      ServiceTaxSetup.SETRANGE("From Date",FromDate);
      ServiceTaxSetup.FINDFIRST;
      WITH ServiceTaxEntry DO BEGIN
        "Service Tax Base Amount" := BaseAmount;
        "Service Tax Amount" :=
          ROUND("Service Tax Base Amount" * ServiceTaxSetup."Service Tax %" / 100,
            GeneralLedgerSetup."Service Tax Rounding Precision");
        "eCess Amount" :=
          ROUND("Service Tax Amount" * ServiceTaxSetup."eCess %" / 100,
            GeneralLedgerSetup."Service Tax Rounding Precision");
        "SHE Cess Amount" :=
          ROUND("Service Tax Amount" * ServiceTaxSetup."SHE Cess %" / 100,
            GeneralLedgerSetup."Service Tax Rounding Precision");
        "Service Tax SBC Amount" :=
          ROUND("Service Tax Base Amount" * ServiceTaxSetup."SB Cess%" / 100,
            GeneralLedgerSetup."Service Tax Rounding Precision");
        "KK Cess Amount" :=
          ROUND("Service Tax Base Amount" * ServiceTaxSetup."KK Cess%" / 100,
            GeneralLedgerSetup."Service Tax Rounding Precision");
        "Amount Including Service Tax" := "Service Tax Base Amount" + "Service Tax Amount" + "eCess Amount" + "SHE Cess Amount" +
          "Service Tax SBC Amount" + KKCessAmount;
      END;
    END;

    LOCAL PROCEDURE CalcTDSAmountsFromBase@1500022(VAR ExpectedTDSEntry@1500001 : Record 13729;TDSSetup@1500002 : Record 13728;TaxBaseAmount@1500003 : Decimal;VendorNo@1500006 : Code[20]);
    VAR
      Vendor@1500004 : Record 23;
    BEGIN
      WITH ExpectedTDSEntry DO BEGIN
        Vendor.SETRANGE("No.",VendorNo);
        Vendor.FINDFIRST;
        "TDS Base Amount" := TaxBaseAmount;
        IF (Vendor."P.A.N. Status" = Vendor."P.A.N. Status"::" ") AND (Vendor."P.A.N. No." <> '') THEN
          "TDS Amount" := TDSSetup."TDS %" / 100 * "TDS Base Amount"
        ELSE
          "TDS Amount" := TDSSetup."Non PAN TDS %" / 100 * "TDS Base Amount";
        "Surcharge Amount" := TDSSetup."Surcharge %" / 100 * "TDS Amount";
        "eCESS Amount" := TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount");
        "SHE Cess Amount" := TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount");
        "Total TDS Including SHE CESS" := "TDS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE CalcTDSAmountWithCurrencyExchangeRate@1500035(VAR TDSEntry@1500000 : Record 13729;Amount@1500001 : Decimal;CurrencyCode@1500003 : Code[10];BeforePost@1500004 : Boolean);
    VAR
      CurrencyExchangeRate@1500002 : Record 330;
    BEGIN
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      CalcTDSAmountsFromBase(TDSEntry,TDSSetup,
        Amount * (CurrencyExchangeRate."Relational Exch. Rate Amount" / CurrencyExchangeRate."Exchange Rate Amount"),Vendor."No.");
      IF BeforePost THEN
        TDSEntry."Total TDS Including SHE CESS" := ROUND(TDSEntry."Total TDS Including SHE CESS" *
            (CurrencyExchangeRate."Exchange Rate Amount" / CurrencyExchangeRate."Relational Exch. Rate Amount"),1);
    END;

    LOCAL PROCEDURE CreateTDSSetupWithDifferentRates@1500040();
    VAR
      CountryRegion@1500000 : Record 9;
      Location@1500001 : Record 14;
    BEGIN
      WITH CompanyInformation DO BEGIN
        VALIDATE("P.A.N. Status","P.A.N. Status"::"Not available");
        VALIDATE("E-Mail",COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20));
        VALIDATE("Location Code",LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location));
        MODIFY(TRUE);
      END;
      LibraryTDS.UpdateTDSNilChallanInGeneralLedgerSetup;
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryERM.CreateCountryRegion(CountryRegion);
      LibraryTDS.CreateForeignVendorWithPANAPPLIED(Vendor,'',CountryRegion.Code);
      LibraryTDS.CreateAssesseeandNODNOCSetup(NodNocHeader,TdsNatureOfDeduction,TDSSetup,Vendor."Country/Region Code",
        Vendor."No.",NodNocHeader.Type::Vendor,IncomeTaxAccountingPeriod."Starting Date");
    END;

    LOCAL PROCEDURE CreateGenJournal@1500001(VAR GenJournalLine@1500003 : Record 81);
    VAR
      GenJournalTemplate@1500000 : Record 80;
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      GeneralLedgerSetup.VALIDATE("TCS Rounding Precision",0.01);
      GeneralLedgerSetup.MODIFY(TRUE);
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::General);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      WITH GenJournalLine DO BEGIN
        LibraryJournals.CreateGenJournalLine(GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,
          "Document Type"::Invoice,"Account Type"::Customer,'',"Bal. Account Type"::"G/L Account",
          LibraryERM.CreateGLAccountNo,LibraryRandom.RandDec(10000,2));
        VALIDATE("Party Type","Party Type"::Customer);
        VALIDATE("Party Code",NodNocHeader."No.");
        VALIDATE("TCS Nature of Collection",TcsNatureOfCollection.Code);
        VALIDATE("T.C.A.N. No.",CompanyInformation."T.C.A.N. No.");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateCurrencyCodeInCustomer@1500002(CustomerNo@1500000 : Code[20];CurrencyCode@1500001 : Code[10]);
    VAR
      Customer@1500003 : Record 18;
    BEGIN
      Customer.GET(CustomerNo);
      Customer.VALIDATE("Currency Code",CurrencyCode);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcTCSfromBaseforForeignCurrency@1500000(VAR ExpectedTCSEntry@1500093 : Record 16514;Amount@1500095 : Decimal;CurrencyCode@1500000 : Code[20]);
    VAR
      CurrencyExchangeRate@1500001 : Record 330;
    BEGIN
      CurrencyExchangeRate.SETRANGE("Currency Code",CurrencyCode);
      CurrencyExchangeRate.FINDFIRST;
      WITH ExpectedTCSEntry DO BEGIN
        "TCS Base Amount" :=
          Amount * (CurrencyExchangeRate."Relational Exch. Rate Amount" / CurrencyExchangeRate."Exchange Rate Amount");
        "TCS Amount" := LibraryTCS.RoundTCS(TCSSetup."TCS %" * Amount / 100);
        "Surcharge Amount" := LibraryTCS.RoundTCS((TCSSetup."TCS %" * Amount / 100) * (TCSSetup."Surcharge %" / 100));
        "eCESS Amount" := LibraryTCS.RoundTCS(TCSSetup."eCESS %" * ("TCS Amount" + "Surcharge Amount" ) / 100);
        "SHE Cess Amount" := LibraryTCS.RoundTCS(("TCS Amount" + "Surcharge Amount") * TCSSetup."SHE Cess %" / 100);
        "Total TCS Including SHE CESS" := "TCS Amount" + "Surcharge Amount" + "eCESS Amount" + "SHE Cess Amount";
      END;
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalWithDifferentRates@1500017(VAR GenJournalLine@1500000 : Record 81;VAR ExpectedTCSEntry@1500001 : Record 16514;VAR GenJournalLine2@1500002 : Record 81;VAR ExpectedTCSEntry2@1500003 : Record 16514);
    BEGIN
      CreateGenJournal(GenJournalLine);
      CalcTCSfromBase(ExpectedTCSEntry,GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateTCSSetupWithDiffRate(TCSSetup);
      CreateGenJournal(GenJournalLine2);
      CalcTCSfromBase(ExpectedTCSEntry2,GenJournalLine2.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
    END;

    LOCAL PROCEDURE CreateBankPaymentJnlAndUpdateChallanDetails@1500019(DocumentNo@1500000 : Code[20]);
    VAR
      GenJournalLine@1500001 : Record 81;
    BEGIN
      CreateBankPaymentJournal(GenJournalLine,TRUE);
      LibraryTDS.PayTDS(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryTDS.UpdateChallanDetails(DocumentNo,GenJournalLine."Document No.",IncomeTaxAccountingPeriod."Starting Date");
    END;

    LOCAL PROCEDURE VerifyServTaxEntry@1500340(ExpectedServTaxEntry@1500300 : Record 16473;DocumentNo@1500301 : Code[20];DocumentType@1500302 : Option);
    VAR
      ServiceTaxEntry@1500303 : Record 16473;
    BEGIN
      WITH ServiceTaxEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Document Type",DocumentType);
        FINDFIRST;
        Assert.AreNearlyEqual(ExpectedServTaxEntry."Service Tax Amount","Service Tax Amount",
          GeneralLedgerSetup."Service Tax Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("Service Tax Amount"),TABLECAPTION));
        Assert.AreNearlyEqual(ExpectedServTaxEntry."Amount Including Service Tax","Amount Including Service Tax",
          GeneralLedgerSetup."Service Tax Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("Amount Including Service Tax"),TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyGLEntry@1500023(DocumentNo@1500106 : Code[20];Amount@1500107 : Decimal);
    VAR
      GLEntry@1500109 : Record 17;
      DebitAmount@1500110 : Decimal;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
      REPEAT
        DebitAmount += GLEntry."Debit Amount";
      UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(DebitAmount,Amount,GeneralLedgerSetup."TCS Rounding Precision",
        STRSUBSTNO(AmountErr,DebitAmount,Amount));
    END;

    LOCAL PROCEDURE VerifyGLEntryForDocument@1500024(DocumentNo@1500111 : Code[20]);
    VAR
      GLEntry@1500114 : Record 17;
      CreditAmount@1500115 : Decimal;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
      REPEAT
        CreditAmount += GLEntry."Credit Amount";
      UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(CreditAmount,GLEntry."Debit Amount",GeneralLedgerSetup."TCS Rounding Precision",
        STRSUBSTNO(AmountErr,CreditAmount,GLEntry."Debit Amount"));
    END;

    LOCAL PROCEDURE VerifyTCSEntry@1500025(ExpectedTCSEntry@1500116 : Record 16514;DocumentNo@1500117 : Code[20];DocumentType@1500118 : Option);
    VAR
      TCSEntry@1500120 : Record 16514;
    BEGIN
      WITH TCSEntry DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        FINDLAST;
        Assert.AreNearlyEqual(ExpectedTCSEntry."TCS Amount","TCS Amount",GeneralLedgerSetup."TCS Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("TCS Amount"),TABLECAPTION));
        Assert.AreNearlyEqual(ExpectedTCSEntry."TCS Base Amount","TCS Base Amount",GeneralLedgerSetup."TCS Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("TCS Base Amount"),TABLECAPTION));
        Assert.AreNearlyEqual(ExpectedTCSEntry."eCESS Amount","eCESS Amount",GeneralLedgerSetup."TCS Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("eCESS Amount"),TABLECAPTION));
        Assert.AreNearlyEqual(ExpectedTCSEntry."SHE Cess Amount","SHE Cess Amount",GeneralLedgerSetup."TCS Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("eCESS Amount"),TABLECAPTION));
        Assert.AreNearlyEqual(ExpectedTCSEntry."Surcharge Amount","Surcharge Amount",GeneralLedgerSetup."TCS Rounding Precision",
          STRSUBSTNO(AmountErr,FIELDNAME("eCESS Amount"),TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifySalesStatistics@1500026(SalesHeader@1500001 : Record 36;Amount@1500122 : Decimal);
    VAR
      SalesLine@1500000 : Record 37;
    BEGIN
      LibraryVariableStorage.Enqueue(Amount);
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.FINDFIRST;
      ServiceTaxAsExciseHelper.OpenSalesOrderStatistics(SalesLine);
    END;

    LOCAL PROCEDURE VerifyPurchaseOrderStatistics@1500012(PurchaseLine@1500001 : Record 39;ExpectedTDSEntry@1500000 : Record 13729);
    BEGIN
      WITH ExpectedTDSEntry DO BEGIN
        CLEAR(LibraryVariableStorage);
        LibraryVariableStorage.Enqueue("Total TDS Including SHE CESS");
        ServiceTaxAsExciseHelper.OpenPurchaseOrderStatistics(PurchaseLine);
      END;
    END;

    LOCAL PROCEDURE VerifyGLEntryPurchase@1500011(DocumentNo@1500001 : Code[20];DocumentType@1500000 : Option;Amount@1500002 : Decimal);
    VAR
      GLEntry@1500004 : Record 17;
      CreditAmount@1500007 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.FINDSET;
      REPEAT
        CreditAmount += ROUND(GLEntry."Credit Amount");
      UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(
        CreditAmount,ROUND(Amount),
        GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(CreditAmountErr,CreditAmount,ROUND(Amount)));
    END;

    LOCAL PROCEDURE VerifyTDSEntryPurchase@1500033(ExpectedTDSEntry@1500000 : Record 13729;DocumentNo@1500001 : Code[20]);
    VAR
      TDSEntry@1500005 : Record 13729;
    BEGIN
      GeneralLedgerSetup.GET;
      TDSEntry.SETRANGE("Document No.",DocumentNo);
      TDSEntry.FINDLAST;
      Assert.AreNearlyEqual(
        ExpectedTDSEntry."TDS Amount",TDSEntry."TDS Amount",GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(CreditAmountErr,TDSEntry.FIELDNAME("TDS Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntry."TDS Base Amount",TDSEntry."TDS Base Amount",
        GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(CreditAmountErr,TDSEntry.FIELDNAME("TDS Base Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntry."eCESS Amount",TDSEntry."eCESS Amount",
        GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(CreditAmountErr,TDSEntry.FIELDNAME("eCESS Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntry."SHE Cess Amount",TDSEntry."SHE Cess Amount",
        GeneralLedgerSetup."TDS Rounding Precision",
        STRSUBSTNO(CreditAmountErr,TDSEntry.FIELDNAME("SHE Cess Amount"),TDSEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyForm27QEntry@1500034(DocumentNo@1500000 : Code[20]);
    VAR
      Form26Q27QEntry@1500001 : Record 16505;
    BEGIN
      WITH Form26Q27QEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        TESTFIELD("Deductee P.A.N. No.",'PANAPPLIED');
      END;
      CompanyInformation.TESTFIELD("P.A.N. No.",'PANNOTREQD');
    END;

    LOCAL PROCEDURE PayTCS@1500028(JournalBatchName@1500126 : Code[20]);
    VAR
      BankPaymentVoucher@1500127 : TestPage 16577;
      PayTCS@1500128 : TestPage 16514;
    BEGIN
      COMMIT;
      BankPaymentVoucher.OPENEDIT;
      BankPaymentVoucher.CurrentJnlBatchName.SETVALUE(JournalBatchName);
      PayTCS.TRAP;
      BankPaymentVoucher.Action1500034.INVOKE;
      PayTCS.Action1500147.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SalesOrderStatisticsMPH@1500030(VAR SalesOrderStatistics@1500130 : TestPage 402);
    VAR
      Value@1500131 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Value);
      SalesOrderStatistics.Control1500015.ASSERTEQUALS(Value);
    END;

    [ModalPageHandler]
    PROCEDURE PurchOrderStatisticsMPH@1500010(VAR PurchaseOrderStatistics@1500000 : TestPage 403);
    VAR
      Value@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Value);
      PurchaseOrderStatistics.Control1500012.ASSERTEQUALS(Value);
    END;

    [ModalPageHandler]
    PROCEDURE GeneralJournalTemplateHandler@1500029(VAR GeneralJournalTemplateHandler@1500129 : TestPage 250);
    BEGIN
      GeneralJournalTemplateHandler.FILTER.SETFILTER(Name,GeneralJournalTemplateName);
      GeneralJournalTemplateHandler.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE Correct26Q27QEntries@1500008(VAR Correct26Q27QEntries@1500001 : TestRequestPage 16502);
    VAR
      value@1500002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(value);
      Correct26Q27QEntries.Control1500002.SETVALUE(IncomeTaxPeriodSetup.Quarter);
      Correct26Q27QEntries.Control1500003.SETVALUE(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
      Correct26Q27QEntries.Control1500004.SETVALUE(value);
      Correct26Q27QEntries.Control1500006.SETVALUE('26Q');
      Correct26Q27QEntries.OK.INVOKE;
    END;

    BEGIN
    END.
  }
}

