OBJECT Codeunit 134413 Test Doc. Exch. Service Setup
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      InvalidUriErr@1001 : TextConst 'ENU=The URI is not valid.';

    [Test]
    PROCEDURE TestDocExchServiceSetupUrlBlank@2();
    VAR
      DocExchServiceSetup@1000 : Record 1275;
    BEGIN
      // Init
      DocExchServiceSetup.INIT;

      // Execute
      DocExchServiceSetup.VALIDATE("Service URL",'');

      // Validate
      Assert.AreEqual('',DocExchServiceSetup."Service URL",'');
    END;

    [Test]
    PROCEDURE TestDocExchServiceSetupUrlInvalidUrl@6();
    VAR
      DocExchServiceSetup@1000 : Record 1275;
    BEGIN
      // Init
      DocExchServiceSetup.INIT;

      // Execute
      ASSERTERROR DocExchServiceSetup.VALIDATE("Service URL",'http://this is an invalid url');

      // Validate
      Assert.ExpectedError(InvalidUriErr);
    END;

    [Test]
    PROCEDURE TestDocExchServiceSetupUrlPositive@14();
    VAR
      DocExchServiceSetup@1000 : Record 1275;
    BEGIN
      // Init
      DocExchServiceSetup.INIT;

      // Execute
      DocExchServiceSetup.VALIDATE("Service URL",'https://microsoft.com');

      // Validate
      Assert.AreEqual('https://microsoft.com',DocExchServiceSetup."Service URL",'');
    END;

    [Test]
    PROCEDURE TestDocExchServiceSetupInsertDefault@16();
    VAR
      DocExchServiceSetup@1001 : Record 1275;
      DocExchServiceSetupCard@1000 : TestPage 1275;
    BEGIN
      // Init
      IF DocExchServiceSetup.GET THEN
        DocExchServiceSetup.DELETE(TRUE);

      // Exectute
      DocExchServiceSetupCard.OPENEDIT;
      Assert.AreEqual('',DocExchServiceSetupCard."Service URL".VALUE,'');
      DocExchServiceSetupCard.SetURLsToDefault.INVOKE;
      DocExchServiceSetupCard.CLOSE;

      // Validate
      DocExchServiceSetup.GET;
      Assert.AreNotEqual('',DocExchServiceSetup."Service URL",'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse)]
    PROCEDURE TestDocExchServiceSetupPagePassword@25();
    VAR
      DocExchServiceSetup@1000 : Record 1275;
      DocExchServiceSetupCard@1001 : TestPage 1275;
      TokenTxt@1003 : Text;
      TokenSecretTxt@1004 : Text;
      ConsumerKeyTxt@1005 : Text;
      ConsumerSecretTxt@1006 : Text;
      DocExchServiceIDTxt@1007 : Text;
    BEGIN
      // Init
      IF DocExchServiceSetup.GET THEN
        DocExchServiceSetup.DELETE(TRUE);
      Assert.IsTrue(DocExchServiceSetup.ISEMPTY,'');

      TokenTxt := FORMAT(CREATEGUID);
      TokenSecretTxt := FORMAT(CREATEGUID);
      ConsumerKeyTxt := FORMAT(CREATEGUID);
      ConsumerSecretTxt := FORMAT(CREATEGUID);
      DocExchServiceIDTxt := FORMAT(CREATEGUID);

      // Execute
      DocExchServiceSetupCard.OPENEDIT;
      DocExchServiceSetupCard.TokenValue.VALUE := TokenTxt;
      DocExchServiceSetupCard.TokenSecret.VALUE := TokenSecretTxt;
      DocExchServiceSetupCard.ConsumerKey.VALUE := ConsumerKeyTxt;
      DocExchServiceSetupCard.ConsumerSecret.VALUE := ConsumerSecretTxt;
      DocExchServiceSetupCard.DocExchTenantID.VALUE := DocExchServiceIDTxt;
      DocExchServiceSetupCard.CLOSE;

      // Verify
      DocExchServiceSetup.GET;
      Assert.IsTrue(DocExchServiceSetup.HasPassword(DocExchServiceSetup.Token),'');
      Assert.IsTrue(DocExchServiceSetup.HasPassword(DocExchServiceSetup."Token Secret"),'');
      Assert.IsTrue(DocExchServiceSetup.HasPassword(DocExchServiceSetup."Consumer Key"),'');
      Assert.IsTrue(DocExchServiceSetup.HasPassword(DocExchServiceSetup."Consumer Secret"),'');
      Assert.IsTrue(DocExchServiceSetup.HasPassword(DocExchServiceSetup."Doc. Exch. Tenant ID"),'');
      Assert.AreEqual(TokenTxt,DocExchServiceSetup.GetPassword(DocExchServiceSetup.Token),'');
      Assert.AreEqual(TokenSecretTxt,DocExchServiceSetup.GetPassword(DocExchServiceSetup."Token Secret"),'');
      Assert.AreEqual(ConsumerKeyTxt,DocExchServiceSetup.GetPassword(DocExchServiceSetup."Consumer Key"),'');
      Assert.AreEqual(ConsumerSecretTxt,DocExchServiceSetup.GetPassword(DocExchServiceSetup."Consumer Secret"),'');
      Assert.AreEqual(DocExchServiceIDTxt,DocExchServiceSetup.GetPassword(DocExchServiceSetup."Doc. Exch. Tenant ID"),'');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue,PageHandlerDocExchServiceSetup)]
    PROCEDURE TestDocExchServiceMgtCheckCredentials@46();
    VAR
      DocExchServiceSetup@1001 : Record 1275;
      DocExchServiceMgt@1000 : Codeunit 1410;
    BEGIN
      // Init
      IF DocExchServiceSetup.DELETE(TRUE) THEN;
      DocExchServiceSetup.INIT;
      DocExchServiceSetup.INSERT(TRUE);

      // Execute
      ASSERTERROR DocExchServiceMgt.CheckCredentials; // triggers a confirm and page.runmodal

      // Verify
      Assert.ExpectedError('The tokens and secret keys must be filled in the Doc. Exch. Service Setup window.');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerFalse)]
    PROCEDURE TestDocExchServiceMgtCheckCredentialsMissing@7();
    VAR
      DocExchServiceSetup@1001 : Record 1275;
      DocExchServiceMgt@1000 : Codeunit 1410;
    BEGIN
      // Init
      IF DocExchServiceSetup.GET THEN
        DocExchServiceSetup.DELETE(TRUE);

      // Execute
      ASSERTERROR DocExchServiceMgt.CheckCredentials;  // triggers a confirm

      // Verify
      Assert.ExpectedError('The tokens and secret keys must be filled in the Doc. Exch. Service Setup window.');
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerFalse@42(Question@1000 : Text[1024];VAR Answer@1001 : Boolean);
    BEGIN
      Answer := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@50(Question@1000 : Text[1024];VAR Answer@1001 : Boolean);
    BEGIN
      Answer := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE PageHandlerDocExchServiceSetup@47(VAR DocExchServiceSetup@1000 : TestPage 1275);
    BEGIN
      DocExchServiceSetup.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Document Exchange Service]
    }
    END.
  }
}

