OBJECT Codeunit 134147 ERM Reverse Register No Error
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1004 : Codeunit 130000;
      LibraryRandom@1003 : Codeunit 130440;
      LibraryERM@1002 : Codeunit 131300;
      AmountError@1001 : TextConst 'ENU=Debit Amount must be %1 in G/L Entry. Entry No.: %2.';
      BalanceError@1005 : TextConst 'ENU=Balance must be 0 for G/L Account: %1.';

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseAfterForceDocBalFalse@2();
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1003 : Record 232;
      GLAccount@1001 : Record 15;
      ReversalEntry@1006 : Record 179;
      GLRegister@1007 : Record 45;
      ForceDocBalance@1010 : Boolean;
    BEGIN
      // Check Balance and Debit Amount after posting General Journal Lines and reversing the entries.

      // Setup: Find General Journal Template and update it, Create a new GL Account. Create and Post General Journal Lines
      // after removing Balance Account No.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      ForceDocBalance := UpdateGenJournalTemplate(GenJournalBatch."Journal Template Name",FALSE);
      LibraryERM.CreateGLAccount(GLAccount);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GLAccount."No.",GenJournalLine."Document No.",LibraryRandom.RandInt(100));
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Bal. Account No.",INCSTR(GenJournalLine."Document No."),-GenJournalLine.Amount);
      RemoveBalanceAccountNo(GenJournalBatch."Journal Template Name",GenJournalBatch.Name);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Reverse posted Transaction.
      GLRegister.FINDLAST;
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseRegister(GLRegister."No.");

      // Verify: Verify the Balance on GL Account and Debit Amount in GL Entry.
      GLAccount.CALCFIELDS(Balance);
      Assert.AreEqual(0,GLAccount.Balance,STRSUBSTNO(BalanceError,GLAccount."No."));
      VerifyDebitAmountInGLEntry(GLAccount."No.",GenJournalLine.Amount);

      // Tear Down: Update the General Journal Template and Block GL Account to clean up setup steps.
      UpdateGenJournalTemplate(GenJournalBatch."Journal Template Name",ForceDocBalance);
    END;

    LOCAL PROCEDURE UpdateGenJournalTemplate@6(GenJournalTemplateName@1001 : Code[10];ForceDocBalance@1000 : Boolean) OriginalForceDocBal : Boolean;
    VAR
      GenJournalTemplate@1002 : Record 80;
    BEGIN
      GenJournalTemplate.GET(GenJournalTemplateName);
      OriginalForceDocBal := GenJournalTemplate."Force Doc. Balance";
      GenJournalTemplate.VALIDATE("Force Doc. Balance",ForceDocBalance);
      GenJournalTemplate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@3(VAR GenJournalLine@1005 : Record 81;GenJournalBatch@1000 : Record 232;AccountNo@1002 : Code[20];DocumentNo@1001 : Code[20];Amount@1003 : Decimal);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::" ",
        GenJournalLine."Account Type"::"G/L Account",AccountNo,Amount);
      IF DocumentNo = '' THEN
        EXIT;
      GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RemoveBalanceAccountNo@15(JournalTemplateName@1003 : Code[10];JournalBatchName@1000 : Code[10]);
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      GenJournalLine.MODIFYALL("Bal. Account No.",'',TRUE);
    END;

    LOCAL PROCEDURE VerifyDebitAmountInGLEntry@5(GLAccountNo@1000 : Code[20];DebitAmount@1005 : Decimal);
    VAR
      GeneralLedgerSetup@1004 : Record 98;
      GLRegister@1002 : Record 45;
      GLEntry@1003 : Record 17;
    BEGIN
      GeneralLedgerSetup.GET;
      GLRegister.FINDLAST;
      GLEntry.SETRANGE("Entry No.",GLRegister."From Entry No.",GLRegister."To Entry No.");
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        DebitAmount,GLEntry."Debit Amount",GeneralLedgerSetup."Inv. Rounding Precision (LCY)",
        STRSUBSTNO(AmountError,DebitAmount,GLEntry."Entry No."));
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@78(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Handler for confirmation messages, always send positive reply.
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    BEGIN
    {
      // [FEATURE] [Reverse] [Force Doc. Balance]
      Test to verify Reverse Register functionality for GL Account.
        1. Verify Balance and Debit Amount after Reversing Register with Force Doc Balance FALSE in General Journal Template.

      Covers Test Cases:
        -----------------------------------------------------------------------
         Test Function Name                               TFS ID
        -----------------------------------------------------------------------
         ReverseAfterForceDocBalFalse           125252, 125253, 125254, 125255.
    }
    END.
  }
}

