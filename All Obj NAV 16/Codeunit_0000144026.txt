OBJECT Codeunit 144026 TCS Validations
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryTCS@1500000 : Codeunit 143008;
      LibrarySetupStorage@1500002 : Codeunit 131009;
      LibraryERM@1500003 : Codeunit 131300;
      LibraryWarehouse@1500004 : Codeunit 132204;
      LibrarySales@1500005 : Codeunit 130509;
      LibraryRandom@1500006 : Codeunit 130440;
      Assert@1500007 : Codeunit 130000;
      LibraryJournals@1500010 : Codeunit 131306;
      isInitialized@1500001 : Boolean;
      LocationTCANNoErr@1500008 : TextConst '@@@="%1 = Location";ENU="T.C.A.N. No. must have a value in Location: Code=%1. It cannot be zero or empty."';
      CompanyInfoTCANNoErr@1500009 : TextConst 'ENU="T.C.A.N. No. must have a value in Company Information: Primary Key=. It cannot be zero or empty."';
      GeneralJournalTCANNoErr@1500011 : TextConst '@@@="%1 and %2 and %3 =  Journal Template Name and Journal Batch Name and Line No.";ENU="T.C.A.N. No. must have a value in Gen. Journal Line: Journal Template Name=%1, Journal Batch Name=%2, Line No.=%3. It cannot be zero or empty."';
      IncomeTaxAccountingErr@1500012 : TextConst 'ENU=There is no Income Tax Accounting Period within the filter.';

    [Test]
    PROCEDURE SalesReturnOrderWithoutIncomeTaxAccountingPeriod@1500003();
    VAR
      NodNocHeader@1500000 : Record 13786;
      TCSSetup@1500001 : Record 16508;
      TcsNatureOfCollection@1500002 : Record 16507;
      AssesseeCode@1500003 : Record 13727;
      Location@1500004 : Record 14;
      SalesHeader@1500005 : Record 36;
      SalesLine@1500006 : Record 37;
    BEGIN
      // [SCENARIO 163742] check if system throws error while posting Sales Return Order when Income Tax accounting period is not defined
      // [FEATURE] [TCS] [SALES RETURN ORDER]

      // [GIVEN] Created TCS Setup
      Initialize;
      CreateTCSWithoutAccountingPeriod(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);

      // [WHEN] Create & Post Sales Return Order
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",NodNocHeader."No.",'',
        LibraryRandom.RandInt(100),Location.Code,WORKDATE);
      UpdateTCSNatureInSalesLine(SalesLine,TcsNatureOfCollection.Code);

      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Expected Error : Income Tax accounting period is not defined
      Assert.ExpectedError(IncomeTaxAccountingErr);
    END;

    [Test]
    PROCEDURE SalesOrderWithoutTCANOnLocation@1500000();
    VAR
      NodNocHeader@1500000 : Record 13786;
      TCSSetup@1500001 : Record 16508;
      TcsNatureOfCollection@1500002 : Record 16507;
      AssesseeCode@1500003 : Record 13727;
      Location@1500004 : Record 14;
      SalesHeader@1500005 : Record 36;
      SalesLine@1500006 : Record 37;
    BEGIN
      // [SCENARIO 163734] check if system throws error while posting Sales Order when TCAN No. is not defined in the Location setup
      // [FEATURE] [TCS] [SALES ORDER]

      // [GIVEN] Created TCS Setup
      Initialize;
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);

      // [WHEN] Create & Post Sales Order
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,NodNocHeader."No.",'',
        LibraryRandom.RandInt(100),Location.Code,WORKDATE);
      UpdateTCSNatureInSalesLine(SalesLine,TcsNatureOfCollection.Code);

      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Expected Error : T.C.A.N. No. must have a value in Location
      Assert.ExpectedError(STRSUBSTNO(LocationTCANNoErr,Location.Code));
    END;

    [Test]
    PROCEDURE SalesOrderWithoutTCANOnCompanyInfo@1500007();
    VAR
      NodNocHeader@1500000 : Record 13786;
      TCSSetup@1500001 : Record 16508;
      TcsNatureOfCollection@1500002 : Record 16507;
      AssesseeCode@1500003 : Record 13727;
      SalesHeader@1500005 : Record 36;
      SalesLine@1500006 : Record 37;
    BEGIN
      // [SCENARIO 163735] check if system throws error while posting Sales Order when TCAN No. is not defined in the Company Information
      // [FEATURE] [TCS] [SALES ORDER]

      // [GIVEN] Created TCS Setup
      Initialize;
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);
      UpdateTCANBlankonCompanyInfo;
      // [WHEN] Create & Post Sales Order
      LibrarySales.CreateSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,NodNocHeader."No.",'',
        LibraryRandom.RandInt(100),'',WORKDATE);
      UpdateTCSNatureInSalesLine(SalesLine,TcsNatureOfCollection.Code);

      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Expected Error : T.C.A.N. No. must have a value in Company information
      Assert.ExpectedError(CompanyInfoTCANNoErr);
    END;

    [Test]
    PROCEDURE GeneralJournalWithoutTCANOnLocationAndCompanyInfo@1500012();
    VAR
      NodNocHeader@1500000 : Record 13786;
      TCSSetup@1500001 : Record 16508;
      TcsNatureOfCollection@1500002 : Record 16507;
      AssesseeCode@1500003 : Record 13727;
      GenJournalLine@1500004 : Record 81;
      Location@1500005 : Record 14;
    BEGIN
      // [SCENARIO 163740] check if system throws error while posting Journal when TCAN No. is set blank in the Location & Company Information
      // [FEATURE] [TCS] [General Journal]

      // [GIVEN] Created TCS Setup
      Initialize;
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);
      LibraryWarehouse.CreateLocation(Location);

      // [WHEN] Create & Post General Journal
      LibraryJournals.CreateGenJournalLineWithBatch(
        GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,
        NodNocHeader."No.",-LibraryRandom.RandDec(1000,2));
      UpdateTCSNatureInGeneralJournal(GenJournalLine,Location.Code,TcsNatureOfCollection.Code,'');

      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Expected Error : T.C.A.N. No. must have a value in Gen. Journal Line
      Assert.ExpectedError(
        STRSUBSTNO(
          GeneralJournalTCANNoErr,GenJournalLine."Journal Template Name",
          GenJournalLine."Journal Batch Name",GenJournalLine."Line No."));
    END;

    [Test]
    PROCEDURE GeneralJournalWithoutTCANOnCompanyInfo@1500027();
    VAR
      NodNocHeader@1500000 : Record 13786;
      TCSSetup@1500001 : Record 16508;
      TcsNatureOfCollection@1500002 : Record 16507;
      AssesseeCode@1500003 : Record 13727;
      GenJournalLine@1500004 : Record 81;
    BEGIN
      // [SCENARIO 163741] check if system throws error while posting Journal when TCAN No. is set blank in the Company Information
      // [FEATURE] [TCS] [General Journal]

      // [GIVEN] Created TCS & TCAN Setup
      Initialize;
      LibraryTCS.CreateInitialSetup(NodNocHeader,TcsNatureOfCollection,TCSSetup,AssesseeCode,TRUE,TRUE,FALSE);
      UpdateTCANBlankonCompanyInfo;

      // [WHEN] Create & Post General Journal
      LibraryJournals.CreateGenJournalLineWithBatch(
        GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,
        NodNocHeader."No.",-LibraryRandom.RandDec(1000,2));
      UpdateTCSNatureInGeneralJournal(GenJournalLine,'',TcsNatureOfCollection.Code,LibraryTCS.CreateTCANNo);

      ASSERTERROR LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [THEN] Expected Error : T.C.A.N. No. must have a value in Company information
      Assert.ExpectedError(CompanyInfoTCANNoErr);
    END;

    LOCAL PROCEDURE Initialize@1500001();
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      CreateDeductoryCodeAndUpdateOnCompanyInfo;
      isInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInfo@1500748();
    VAR
      CompanyInformation@1500000 : Record 79;
      DeductorCategory@1500001 : Record 16498;
    BEGIN
      CompanyInformation.GET;
      LibraryERM.CreateDeductorCategory(DeductorCategory);
      CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTCSWithoutAccountingPeriod@1500008(VAR NodNocHeader@1500006 : Record 13786;VAR TcsNatureOfCollection@1500005 : Record 16507;VAR TCSSetup@1500004 : Record 16508;VAR AssesseeCode@1500003 : Record 13727);
    BEGIN
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      LibraryTCS.CreateTCSNatureCollectionAndTCSSetup(
        TcsNatureOfCollection,TCSSetup,TcsNatureOfCollection."TCS Type"::E,AssesseeCode.Code);
      LibraryTCS.CreateNODNOCSetup(
        NodNocHeader,NodNocHeader.Type::Customer,LibraryTCS.CreateCustomer,AssesseeCode.Code,TcsNatureOfCollection.Code,
        TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE UpdateTCSNatureInSalesLine@1500002(VAR SalesLine@1500000 : Record 37;TCSNatureCode@1500001 : Code[10]);
    BEGIN
      SalesLine.VALIDATE("TCS Nature of Collection",TCSNatureCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTCSNatureInGeneralJournal@1500016(VAR GenJournalLine@1500000 : Record 81;LocationCode@1500002 : Code[10];TCSNatureCode@1500001 : Code[10];TCANNo@1500003 : Code[10]);
    BEGIN
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Customer);
      GenJournalLine.VALIDATE("Party Code",GenJournalLine."Account No.");
      GenJournalLine.VALIDATE("Location Code",LocationCode);
      GenJournalLine.VALIDATE("TCS Nature of Collection",TCSNatureCode);
      GenJournalLine.VALIDATE("T.C.A.N. No.",TCANNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTCANBlankonCompanyInfo@1500005();
    VAR
      CompanyInformation@1500000 : Record 79;
    BEGIN
      CompanyInformation.GET;
      CompanyInformation.VALIDATE("T.C.A.N. No.",'');
      CompanyInformation.MODIFY(TRUE);
    END;

    BEGIN
    END.
  }
}

