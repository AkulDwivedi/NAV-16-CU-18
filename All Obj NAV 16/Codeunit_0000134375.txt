OBJECT Codeunit 134375 ERM Reminders With Min Amount
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1005 : Codeunit 131300;
      LibraryInventory@1004 : Codeunit 132201;
      LibrarySales@1000 : Codeunit 130509;
      LibraryRandom@1001 : Codeunit 130440;
      IsInitialized@1002 : Boolean;
      ExpectedMessage@1003 : TextConst 'ENU=The Credit Memo doesn''t have a Corrected Invoice No. Do you want to continue?';

    [Test]
    PROCEDURE ReminderAboveMinimumAmount@3();
    VAR
      Customer@1002 : Record 18;
      ReminderHeaderNo@1000 : Code[20];
    BEGIN
      // Covers Document TFS_TC_ID = 9054 and 9055.
      // Check that Reminder lines Exist after Posting Sales Invoice with above Minimum Amount.

      // Setup, Create and Suggest Reminder after creating and Posting Sales Invoice.
      ReminderHeaderNo := CreateReminderFromSalesInvoice(Customer,FALSE);

      // Verify: Verify that the Reminder Lines Exists after Suggesting Lines from Reminder Header.
      VerifyReminderLines(ReminderHeaderNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ReminderBelowMinimumAmount@7();
    VAR
      Customer@1005 : Record 18;
      SalesHeader@1003 : Record 36;
      ReminderTerms@1000 : Record 292;
      SalesInvoiceLine@1001 : Record 113;
      ReminderHeaderNo@1009 : Code[20];
    BEGIN
      // Covers Document TFS_TC_ID = 9054 and 9056.
      // Check that Reminder lines Exist after Posting Sales Credit Memo with below Minimum Amount.

      // Setup, Create and Suggest Reminder after creating and Posting Sales Invoice.
      CreateReminderFromSalesInvoice(Customer,FALSE);

      // Exercise: Create a Sales Credit Memo and take Unit Price less than Reminder Terms Minimum Amount to generate Reminder Lines.
      // Post Credit Memo and Create Reminder.
      ReminderTerms.GET(Customer."Reminder Terms Code");
      SalesInvoiceLine.SETRANGE("Sell-to Customer No.",Customer."No.");
      SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::Item);
      SalesInvoiceLine.FINDFIRST;
      CreateSalesCreditMemo(SalesHeader,Customer."No.",ReminderTerms."Minimum Amount (LCY)" - 1,SalesInvoiceLine.Quantity);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      ExecuteUIHandler;
      ReminderHeaderNo := CreateReminder(Customer."No.",FALSE,'',FALSE,TRUE);

      // Verify: Verify that the Reminder Lines Exists after Suggesting Lines from Reminder Header.
      VerifyReminderLines(ReminderHeaderNo);
    END;

    [Test]
    PROCEDURE ReminderOnMinimumAmount@11();
    VAR
      Customer@1002 : Record 18;
      SalesHeader@1001 : Record 36;
      ReminderHeaderNo@1009 : Code[20];
    BEGIN
      // Covers Document TFS_TC_ID = 9054 and 9057.
      // Check that Reminder lines Exist after Posting Sales Invoice on Minimum Amount.

      // Setup, Create and Suggest Reminder after creating and Posting Sales Invoice.
      CreateReminderFromSalesInvoice(Customer,FALSE);

      // Exercise: Create a Sales Invoice with Random Unit Price between 0.001 to 0.099 and Quantity between 1 to 10 to make sure
      // Invoice value always be a decimal Amount less than 1.
      CreateSalesInvoice(SalesHeader,Customer."No.",TRUE,LibraryRandom.RandInt(99) / 1000,LibraryRandom.RandInt(10));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      ReminderHeaderNo := CreateReminder(Customer."No.",FALSE,'',FALSE,TRUE);

      // Verify: Verify that the Reminder Lines Exists after Suggesting Lines from Reminder Header.
      VerifyReminderLines(ReminderHeaderNo);
    END;

    [Test]
    PROCEDURE ReminderFromGeneralJournalLine@15();
    VAR
      Customer@1000 : Record 18;
      ReminderTerms@1001 : Record 292;
      GenJournalLine@1008 : Record 81;
      ReminderHeaderNo@1011 : Code[20];
    BEGIN
      // Covers Document TFS_TC_ID = 9054 and 9058.
      // Check that Reminder lines Exist after Posting General Journal Line.

      // Setup: Create a new Customer without Currency.
      Initialize;
      CreateCustomer(Customer,FALSE);

      // Exercise: Create General Journal Lines for the Customer with an Amount greater than Reminder Terms Minimum Amount.
      // Post the General Journal Lines. Create a Reminder and Suggest Reminder Lines.
      ReminderTerms.GET(Customer."Reminder Terms Code");
      CreateGeneralJournalLine(GenJournalLine,Customer."No.",ReminderTerms."Minimum Amount (LCY)" + LibraryRandom.RandInt(10));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      ReminderHeaderNo := CreateReminder(Customer."No.",TRUE,GenJournalLine."Currency Code",TRUE,FALSE);

      // Verify: Verify that the Reminder Lines Exists after Suggesting Lines from Reminder Header.
      VerifyReminderLines(ReminderHeaderNo);
    END;

    [Test]
    PROCEDURE ReminderWithEarlierDueDate@10();
    VAR
      Customer@1002 : Record 18;
      SalesHeader@1001 : Record 36;
      ReminderTerms@1003 : Record 292;
      ReminderHeaderNo@1011 : Code[20];
    BEGIN
      // Covers Document TFS_TC_ID = 9054 and 9059.
      // Check that Reminder lines Exist after Posting Sales Invoice with earlier Due Date.

      // Setup: Create a new Customer without Currency.
      Initialize;
      CreateCustomer(Customer,FALSE);

      // Exercise: Create a Sales Invoice with Due Date earlier than Order Date and Post It. Take Unit Price greater than
      // Reminder Term Minimum Amount and Random Quantity between 1 to 10, values are not important for Quantity. Create Reminder.
      ReminderTerms.GET(Customer."Reminder Terms Code");
      CreateSalesInvoice(
        SalesHeader,Customer."No.",TRUE,ReminderTerms."Minimum Amount (LCY)" + LibraryRandom.RandInt(10),
        LibraryRandom.RandInt(10));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      ReminderHeaderNo := CreateReminder(Customer."No.",FALSE,'',FALSE,TRUE);

      // Verify: Verify that the Reminder Lines Exists after Suggesting Lines from Reminder Header.
      VerifyReminderLines(ReminderHeaderNo);
    END;

    [Test]
    PROCEDURE ReminderAboveMinimumAmountFCY@18();
    VAR
      Customer@1002 : Record 18;
      ReminderHeaderNo@1011 : Code[20];
    BEGIN
      // Covers Document TFS_TC_ID = 9054 and 9060.
      // Check that Reminder lines Exist after Posting Sales Invoice with FCY and above Minimum Amount.

      // Setup, Create and Suggest Reminder after creating and Posting Sales Invoice.
      ReminderHeaderNo := CreateReminderFromSalesInvoice(Customer,TRUE);

      // Verify: Verify that the Reminder Lines Exists after Suggesting Lines from Reminder Header.
      VerifyReminderLines(ReminderHeaderNo);
    END;

    [Test]
    PROCEDURE ReminderBelowMinimumAmountFCY@16();
    VAR
      Customer@1002 : Record 18;
      SalesHeader@1001 : Record 36;
      ReminderHeaderNo@1011 : Code[20];
    BEGIN
      // Covers Document TFS_TC_ID = 9054 and 9061.
      // Check that Reminder lines Exist after Posting Sales Invoice with FCY and below Minimum Amount.

      // Setup, Create and Suggest Reminder after creating and Posting Sales Invoice.
      ReminderHeaderNo := CreateReminderFromSalesInvoice(Customer,TRUE);

      // Exercise: Create a Sales Invoice with Random Unit Price between 0.001 to 0.099 and Quantity between 1 to 10 to make sure
      // Invoice value always be a decimal Amount less than 1. Post the Invoice and Create Reminder.
      CreateSalesInvoice(SalesHeader,Customer."No.",FALSE,LibraryRandom.RandInt(99) / 1000,LibraryRandom.RandInt(10));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      ReminderHeaderNo := CreateReminder(Customer."No.",FALSE,'',FALSE,TRUE);

      // Verify: Verify that the Reminder Lines Exists after Suggesting Lines from Reminder Header.
      VerifyReminderLines(ReminderHeaderNo);
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateReminderFromSalesInvoice@8(VAR Customer@1005 : Record 18;WithCurrency@1004 : Boolean) : Code[20];
    VAR
      SalesHeader@1002 : Record 36;
      ReminderTerms@1000 : Record 292;
      ReminderHeaderNo@1006 : Code[20];
    BEGIN
      // Setup: Create Customer, Reminder Terms and Reminder Levels.
      Initialize;
      CreateCustomer(Customer,WithCurrency);

      // Exercise: Create Sales Invoice and Post It. Take Unit Price greater than Reminder Terms Minimum Amount.
      // Create and Suggest Reminder Lines.
      ReminderTerms.GET(Customer."Reminder Terms Code");
      CreateSalesInvoice(
        SalesHeader,Customer."No.",FALSE,1 + LibraryRandom.RandInt(10) * ReminderTerms."Minimum Amount (LCY)",
        LibraryRandom.RandInt(10));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      ReminderHeaderNo := CreateReminder(Customer."No.",FALSE,'',FALSE,FALSE);
      EXIT(ReminderHeaderNo);
    END;

    LOCAL PROCEDURE CreateSalesInvoice@31(VAR SalesHeader@1001 : Record 36;CustomerNo@1004 : Code[20];EarlierDueDate@1006 : Boolean;UnitPrice@1005 : Decimal;Quantity@1000 : Decimal);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo);

      // Update a Random Due Date on Sales Header that is before Document Date.
      IF EarlierDueDate THEN BEGIN
        SalesHeader.VALIDATE("Due Date",CALCDATE(FORMAT(-LibraryRandom.RandInt(30)) + 'D',SalesHeader."Document Date"));
        SalesHeader.MODIFY(TRUE);
      END;

      // Create Sales Line with Unit Price.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,Quantity);
      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesCreditMemo@39(VAR SalesHeader@1002 : Record 36;CustomerNo@1004 : Code[20];UnitPrice@1005 : Decimal;Quantity@1000 : Decimal);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      // Create a Sales Header.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustomerNo);

      // Create Sales Line, Update Unit Price and Quantity to Ship on Sales Line.
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,Quantity);
      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.VALIDATE("Qty. to Ship",0);  // Qty to Ship must be zero in Sales Credit Memo.
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateReminder@28(CustomerNo@1005 : Code[20];UseCurrencyOnHeader@1006 : Boolean;CurrencyCode@1007 : Code[10];OverdueEntriesOnly@1001 : Boolean;IncludeEntriesOnHold@1000 : Boolean) : Code[20];
    VAR
      ReminderHeader@1002 : Record 295;
      CustLedgerEntry@1004 : Record 21;
      CustLedgEntryLineFeeOn@1008 : Record 21;
      ReminderMake@1003 : Codeunit 392;
    BEGIN
      // Create Reminder Header and Update Currency Code.
      CreateReminderHeader(ReminderHeader,CustomerNo);
      IF UseCurrencyOnHeader THEN BEGIN
        ReminderHeader.VALIDATE("Currency Code",CurrencyCode);
        ReminderHeader.MODIFY(TRUE);
      END;

      // Suggest Reminder Lines.
      ReminderMake.SuggestLines(ReminderHeader,CustLedgerEntry,OverdueEntriesOnly,IncludeEntriesOnHold,CustLedgEntryLineFeeOn);
      ReminderMake.Code;
      EXIT(ReminderHeader."No.");
    END;

    [Normal]
    LOCAL PROCEDURE CreateCustomer@1(VAR Customer@1000 : Record 18;CurrencyCode@1001 : Boolean);
    BEGIN
      // Create a New Customer and update Reminder Terms.
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Reminder Terms Code",CreateReminderTerms);
      IF CurrencyCode THEN
        Customer.VALIDATE("Currency Code",CreateCurrency);
      Customer.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateReminderTerms@4() : Code[10];
    VAR
      ReminderTerms@1000 : Record 292;
      Counter@1002 : Integer;
    BEGIN
      // Create a new Reminder Term and take Random Minimum Amount Greater than 5.
      LibraryERM.CreateReminderTerms(ReminderTerms);
      ReminderTerms.VALIDATE("Minimum Amount (LCY)",5 * LibraryRandom.RandInt(10));
      ReminderTerms.MODIFY(TRUE);

      // Create Levels for Reminder Term, Creat Random levels greater than 2. Minimum 2 Levels are required.
      FOR Counter := 1 TO 2 * LibraryRandom.RandInt(5) DO
        CreateReminderLevel(ReminderTerms.Code);
      EXIT(ReminderTerms.Code);
    END;

    LOCAL PROCEDURE CreateReminderLevel@2(ReminderTermsCode@1000 : Code[10]);
    VAR
      ReminderLevel@1001 : Record 293;
    BEGIN
      // Create Reminder Level with Grace Period of Five Days and a Random Additional Fee between 1 to 5. Upper Boundary 5 is important.
      LibraryERM.CreateReminderLevel(ReminderLevel,ReminderTermsCode);
      EVALUATE(ReminderLevel."Grace Period",'<5D>');
      ReminderLevel.VALIDATE("Additional Fee (LCY)",LibraryRandom.RandInt(5));
      ReminderLevel.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateReminderHeader@5(VAR ReminderHeader@1000 : Record 295;CustomerNo@1002 : Code[20]);
    BEGIN
      LibraryERM.CreateReminderHeader(ReminderHeader);
      ReminderHeader.VALIDATE("Customer No.",CustomerNo);
      ReminderHeader.VALIDATE("Document Date",CALCDATE('<3M>',WORKDATE));
      ReminderHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@17(VAR GenJournalLine@1001 : Record 81;CustomerNo@1005 : Code[20];Amount@1006 : Decimal);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      // Create General Journal Lines of Invoice Type.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,CustomerNo,Amount);
      GenJournalLine.VALIDATE("Currency Code",CreateCurrency);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCurrency@14() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE VerifyReminderLines@13(ReminderNo@1000 : Code[20]);
    VAR
      ReminderLine@1001 : Record 296;
      Assert@1002 : Codeunit 130000;
    BEGIN
      // Verify that Reminder Lines Exists after Suggesting Reminder Lines from Reminder Header.
      ReminderLine.SETRANGE("Reminder No.",ReminderNo);
      Assert.IsFalse(ReminderLine.ISEMPTY,'Reminder Lines must exist.');
    END;

    LOCAL PROCEDURE ExecuteUIHandler@78();
    BEGIN
      // Generate Dummy message. Required for executing the test case successfully.
      IF CONFIRM(STRSUBSTNO(ExpectedMessage)) THEN ;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@19(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Reminder] [Minimum Amount]
      Unsupported version tags:
      NA: Unable to Compile
      ES: Unable to Execute
      DE: Unable to Execute

      Test Cases to verify the Reminder Lines after suggesting from Reminder Header.
        1. Test to verify the Reminder Lines. Create Reminder From Sales Invoice (Above Minimum Amount).
        2. Test to verify the Reminder Lines. Create Reminder from Sales Invoice, Sales Credit Memo (Below Minimum Amount).
        3. Test to verify the Reminder Lines. Create Reminder From Sales Invoices (On Minimum Amount).
        4. Test to verify the Reminder Lines. Create Reminder From General Journal Line.
        5. Test to verify the Reminder Lines. Create Reminder from Sales Invoice with Early Due Date.
        6. Test to verify the Reminder Lines. Create Reminder From Sales Invoice (Above Minimum Amount) with FCY.
        7. Test to verify the Reminder Lines. Create Reminder From Sales Invoices (Below Minimum Amount) with FCY.

      This test code unit replaces Manual Test Suite (TS6918).

      TS_TFS ID=20751
      Covers Test Cases:
        TFS_TC_ID= 9054: TC6919
        TFS_TC_ID= 9055: TC6920
        TFS_TC_ID= 9056: TC6921
        TFS_TC_ID= 9057: TC6922
        TFS_TC_ID= 9058: TC6923
        TFS_TC_ID= 9059: TC6924
        TFS_TC_ID= 9060: TC6925
        TFS_TC_ID= 9061: TC6926
        TFS_TC_ID= 9062: TC6927
    }
    END.
  }
}

