OBJECT Table 16438 Service Transfer Line
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.49326;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestStatusOpen;
               TestShipped;
               ServiceTransferLine2.RESET;
               ServiceTransferLine2.SETFILTER("Document No.",ServiceTransferHeader."No.");
               IF ServiceTransferLine2.FINDLAST THEN
                 "Line No." := ServiceTransferLine2."Line No." + 10000;
             END;

    OnDelete=BEGIN
               TestStatusOpen;
               TESTFIELD(Shipped,FALSE);
               GSTManagement.DeleteGSTBuffer(DocTransactionType::"Service Transfer",0,"Document No.","Line No.");
             END;

    OnRename=BEGIN
               ERROR(RenameErr,TABLECAPTION);
             END;

    CaptionML=[ENU=Service Transfer Line;
               ENN=Service Transfer Line];
    LookupPageID=Page16386;
    DrillDownPageID=Page16386;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 3   ;   ;Transfer From G/L Account No.;Code20;
                                                   TableRelation="G/L Account" WHERE (Direct Posting=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Shipped,FALSE);
                                                                TestStatusOpen;
                                                                GetServiceTransferHeader;
                                                                GetGLAccountGSTInfo;
                                                                GeneralLedgerSetup.GET;
                                                                "GST Rounding Type" := GeneralLedgerSetup."GST Rounding Type";
                                                                "GST Rounding Precision" := GeneralLedgerSetup."GST Rounding Precision";
                                                                ClearGSTFields;
                                                                "Dimension Set ID" := ServiceTransferHeader."Dimension Set ID";
                                                                DimensionManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Transfer From G/L Account No.;
                                                              ENN=Transfer From G/L Account No.] }
    { 4   ;   ;Transfer To G/L Account No.;Code20 ;TableRelation="G/L Account" WHERE (Direct Posting=CONST(Yes));
                                                   OnValidate=VAR
                                                                GLAccount@1500000 : Record 15;
                                                              BEGIN
                                                                GLAccount.GET("Transfer To G/L Account No.");
                                                                GLAccount.TESTFIELD(Blocked,FALSE);
                                                                TESTFIELD("Receive Control A/C No.");
                                                                "To G/L Account Description" := GLAccount.Name;
                                                              END;

                                                   CaptionML=[ENU=Transfer To G/L Account No.;
                                                              ENN=Transfer To G/L Account No.] }
    { 5   ;   ;Transfer Price      ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Shipped,FALSE);
                                                                TestStatusOpen;
                                                                IF "Transfer Price" < 0 THEN
                                                                  ERROR(TransPriceErr);
                                                                "GST %" := 0;
                                                                IF "Transfer Price" <> xRec."Transfer Price" THEN BEGIN
                                                                  "GST Base Amount" := 0;
                                                                  "Total GST Amount" := 0
                                                                END;
                                                                GSTManagement.DeleteGSTBuffer(DocTransactionType::"Service Transfer",0,"Document No.","Line No.");
                                                              END;

                                                   CaptionML=[ENU=Transfer Price;
                                                              ENN=Transfer Price] }
    { 6   ;   ;Ship Control A/C No.;Code20        ;TableRelation="G/L Account" WHERE (Direct Posting=CONST(Yes));
                                                   CaptionML=[ENU=Ship Control A/C No.;
                                                              ENN=Ship Control A/C No.];
                                                   Editable=No }
    { 7   ;   ;Receive Control A/C No.;Code20     ;TableRelation="G/L Account" WHERE (Direct Posting=CONST(Yes));
                                                   CaptionML=[ENU=Receive Control A/C No.;
                                                              ENN=Receive Control A/C No.];
                                                   Editable=No }
    { 8   ;   ;Shipped             ;Boolean       ;CaptionML=[ENU=Shipped;
                                                              ENN=Shipped];
                                                   Editable=No }
    { 9   ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 10  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 11  ;   ;GST Group Code      ;Code20        ;TableRelation="GST Group".Code WHERE (GST Group Type=FILTER(Service));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Shipped,FALSE);
                                                                CLEAR("SAC Code");
                                                                IF GSTGroup.GET("GST Group Code") AND GSTGroup."Reverse Charge" THEN
                                                                  ERROR(GSTGroupReverseChargeErr,"GST Group Code");
                                                                IF "Total GST Amount" <> 0 THEN
                                                                  ClearGSTFields;
                                                              END;

                                                   CaptionML=[ENU=GST Group Code;
                                                              ENN=GST Group Code] }
    { 12  ;   ;SAC Code            ;Code8         ;TableRelation=HSN/SAC.Code WHERE (GST Group Code=FIELD(GST Group Code));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Shipped,FALSE);
                                                                IF "Total GST Amount" <> 0 THEN
                                                                  ClearGSTFields
                                                              END;

                                                   CaptionML=[ENU=SAC Code;
                                                              ENN=SAC Code] }
    { 13  ;   ;GST Base Amount     ;Decimal       ;CaptionML=[ENU=GST Base Amount;
                                                              ENN=GST Base Amount];
                                                   Editable=No }
    { 14  ;   ;GST %               ;Decimal       ;CaptionML=[ENU=GST %;
                                                              ENN=GST %] }
    { 15  ;   ;Total GST Amount    ;Decimal       ;CaptionML=[ENU=Total GST Amount;
                                                              ENN=Total GST Amount];
                                                   Editable=No }
    { 16  ;   ;GST Rounding Type   ;Option        ;CaptionML=[ENU=GST Rounding Type;
                                                              ENN=GST Rounding Type];
                                                   OptionCaptionML=[ENU=Nearest,Up,Down;
                                                                    ENN=Nearest,Up,Down];
                                                   OptionString=Nearest,Up,Down;
                                                   Editable=No }
    { 17  ;   ;GST Rounding Precision;Decimal     ;CaptionML=[ENU=GST Rounding Precision;
                                                              ENN=GST Rounding Precision];
                                                   Editable=No }
    { 18  ;   ;From G/L Account Description;Text50;CaptionML=[ENU=From G/L Account Description;
                                                              ENN=From G/L Account Description] }
    { 19  ;   ;To G/L Account Description;Text50  ;CaptionML=[ENU=To G/L Account Description;
                                                              ENN=To G/L Account Description] }
    { 20  ;   ;Exempted            ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Shipped,FALSE);
                                                              END;

                                                   CaptionML=[ENU=Exempted;
                                                              ENN=Exempted] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID] }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ServiceTransferHeader@1500000 : Record 16437;
      DimChangeQst@1500004 : TextConst '@@@="%1 = Document No";ENU=You have changed one or more dimensions on the %1, which is already shipped.\\Do you want to keep the changed dimension?;ENN=You have changed one or more dimensions on the %1, which is already shipped.\\Do you want to keep the changed dimension?';
      CancellErr@1500003 : TextConst 'ENU=Cancelled.;ENN=Cancelled.';
      ServiceTransferLine@1500001 : Record 16438;
      ServiceTransferLine2@1500002 : Record 16438;
      RenameErr@1500005 : TextConst '@@@="%1 = Table Name";ENU=You cannot rename a %1.;ENN=You cannot rename a %1.';
      GeneralLedgerSetup@1500011 : Record 98;
      GSTGroup@1500013 : Record 16404;
      DimensionManagement@1500006 : Codeunit 408;
      GSTManagement@1500009 : Codeunit 16401;
      GSTApplicable@1500008 : Boolean;
      DocTransactionType@1500007 : 'Purchase,Sales,Transfer,Service,Service Transfer';
      TransPriceErr@1500010 : TextConst 'ENU=Transfer Price can not be Negative.;ENN=Transfer Price can not be Negative.';
      GSTGroupReverseChargeErr@1500012 : TextConst '@@@="%1 = GST Group Code";ENU=GST Group Code %1 with Reverse Charge cannot be selected for Service Transfers.;ENN=GST Group Code %1 with Reverse Charge cannot be selected for Service Transfers.';

    LOCAL PROCEDURE TestStatusOpen@1500003();
    BEGIN
      TESTFIELD("Document No.");
      ServiceTransferHeader.GET("Document No.");
      ServiceTransferHeader.TESTFIELD(Status,ServiceTransferHeader.Status::Open);
    END;

    PROCEDURE IsShippedDimChanged@1500002() : Boolean;
    BEGIN
      EXIT(("Dimension Set ID" <> xRec."Dimension Set ID") AND
        (Shipped <> FALSE));
    END;

    PROCEDURE ConfirmShippedDimChange@1500004() : Boolean;
    BEGIN
      IF NOT CONFIRM(DimChangeQst,FALSE,TABLECAPTION) THEN
        ERROR(CancellErr);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE TestShipped@1500001();
    BEGIN
      ServiceTransferLine.SETRANGE("Document No.","Document No.");
      ServiceTransferLine.SETRANGE(Shipped,TRUE);
      IF ServiceTransferLine.FINDFIRST THEN
        ServiceTransferLine.TESTFIELD(Shipped,FALSE);
    END;

    LOCAL PROCEDURE GetServiceTransferHeader@1500007();
    BEGIN
      TESTFIELD("Document No.");
      ServiceTransferHeader.GET("Document No.");

      ServiceTransferHeader.TESTFIELD("Shipment Date");
      ServiceTransferHeader.TESTFIELD("Receipt Date");
      ServiceTransferHeader.TESTFIELD("Transfer-from Code");
      ServiceTransferHeader.TESTFIELD("Transfer-to Code");
      ServiceTransferHeader.TESTFIELD("Ship Control Account");
      "Ship Control A/C No." := ServiceTransferHeader."Ship Control Account";
      "Receive Control A/C No." := ServiceTransferHeader."Receive Control Account";
    END;

    LOCAL PROCEDURE GetGLAccountGSTInfo@1500008();
    VAR
      GLAccount@1500000 : Record 15;
    BEGIN
      TESTFIELD("Transfer From G/L Account No.");
      GLAccount.GET("Transfer From G/L Account No.");
      GLAccount.TESTFIELD(Blocked,FALSE);
      "GST Group Code" := GLAccount."GST Group Code";
      IF GSTGroup.GET("GST Group Code") AND GSTGroup."Reverse Charge" THEN
        ERROR(GSTGroupReverseChargeErr,"GST Group Code");
      "SAC Code" := GLAccount."HSN/SAC Code";
      Exempted := GLAccount.Exempted;
      "From G/L Account Description" := GLAccount.Name;
    END;

    PROCEDURE ValidateShortcutDimCode@1500011(FieldNumber@1500002 : Integer;VAR ShortcutDimCode@1500001 : Code[20]);
    BEGIN
      DimensionManagement.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      VerifyItemLineDim;
    END;

    LOCAL PROCEDURE VerifyItemLineDim@1500012();
    BEGIN
      IF IsShippedDimChanged THEN
        ConfirmShippedDimChange;
    END;

    PROCEDURE ShowDimensions@1500013();
    BEGIN
      "Dimension Set ID" :=
        DimensionManagement.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Document No.","Line No."));
      VerifyItemLineDim;
      DimensionManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE CalculateGST@1500000(ServiceTransferHeader@1500000 : Record 16437);
    VAR
      ServiceTransferLine@1500001 : Record 16438;
    BEGIN
      GSTApplicable := GSTManagement.GSTApplicableOnServiceTransfer(ServiceTransferHeader);
      IF GSTApplicable THEN BEGIN
        ServiceTransferLine.SETRANGE("Document No.",ServiceTransferHeader."No.");
        IF ServiceTransferLine.FINDSET THEN
          REPEAT
            ServiceTransferLine.UpdateGSTAmounts(ServiceTransferLine."Transfer Price");
            ServiceTransferLine.MODIFY;
          UNTIL ServiceTransferLine.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateGSTAmounts@1500025(GSTBaseAmount@1500008 : Decimal);
    VAR
      GSTPerStateCode@1500007 : Code[10];
      TotalGST@1500003 : Decimal;
      GSTJurisdiction@1500002 : 'Intrastate,Interstate';
      SourceType@1500000 : 'Vendor,Customer';
    BEGIN
      GetServiceTransferHeader;
      TestShipped;
      TestStatusOpen;
      GSTManagement.DeleteGSTBuffer(DocTransactionType::"Service Transfer",0,"Document No.","Line No.");
      VALIDATE("GST Base Amount",0);
      IF ("Transfer Price" = 0) OR ("SAC Code" = '') OR ("GST Group Code" = '') THEN
        EXIT;
      ServiceTransferHeader.TESTFIELD("Transfer-from State");
      ServiceTransferHeader.TESTFIELD("Transfer-to State");
      GSTPerStateCode :=
        GSTManagement.GetGSTConfiguration(
          SourceType::Customer,ServiceTransferHeader."Transfer-from State",
          ServiceTransferHeader."Transfer-to State",GSTJurisdiction);
      IF GSTPerStateCode = '' THEN
        EXIT;
      TotalGST :=
        GSTManagement.CalculateGSTAmounts(
          "Document No.","Line No.",GSTJurisdiction,GSTPerStateCode,"GST Group Code",
          ServiceTransferHeader."Shipment Date",GSTBaseAmount,DocTransactionType::"Service Transfer",0,'',1,
          0,FALSE,0,'','');
      IF Exempted THEN
        "Total GST Amount" := 0
      ELSE
        "Total GST Amount" := TotalGST;
      IF GSTBaseAmount <> 0 THEN
        "GST %" := "Total GST Amount" / GSTBaseAmount * 100;
      "GST Base Amount" := GSTBaseAmount;
      GSTManagement.DeleteGSTCalculationBuffer(DocTransactionType::"Service Transfer",0,"Document No.","Line No.");
    END;

    LOCAL PROCEDURE ClearGSTFields@1500005();
    BEGIN
      VALIDATE("Total GST Amount",0);
      GSTManagement.DeleteGSTBuffer(DocTransactionType::"Service Transfer",0,"Document No.","Line No.");
    END;

    BEGIN
    END.
  }
}

