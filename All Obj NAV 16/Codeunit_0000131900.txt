OBJECT Codeunit 131900 Library - Marketing
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryUtility@1000 : Codeunit 131000;

    PROCEDURE CreateActivity@27(VAR Activity@1000 : Record 5081);
    BEGIN
      Activity.INIT;
      Activity.VALIDATE(Code,LibraryUtility.GenerateRandomCode(Activity.FIELDNO(Code),DATABASE::Activity));
      Activity.VALIDATE(Description,Activity.Code);  // Validating Code as Description because value is not important.
      Activity.INSERT(TRUE);
    END;

    PROCEDURE CreateActivityStep@36(VAR ActivityStep@1000 : Record 5082;ActivityCode@1001 : Code[10]);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      ActivityStep.INIT;
      ActivityStep.VALIDATE("Activity Code",ActivityCode);
      RecRef.GETTABLE(ActivityStep);
      ActivityStep.VALIDATE("Step No.",LibraryUtility.GetNewLineNo(RecRef,ActivityStep.FIELDNO("Step No.")));
      ActivityStep.INSERT(TRUE);
    END;

    PROCEDURE CreateAttachment@40(VAR Attachment@1000 : Record 5062);
    VAR
      No@1001 : Integer;
    BEGIN
      CLEAR(Attachment);

      IF Attachment.FINDLAST THEN
        No := Attachment."No." + 1;

      Attachment.INIT;
      Attachment."No." := No;
      Attachment.INSERT(TRUE);
    END;

    PROCEDURE CreateBusinessRelation@14(VAR BusinessRelation@1000 : Record 5053);
    BEGIN
      BusinessRelation.INIT;
      BusinessRelation.VALIDATE(Code,LibraryUtility.GenerateRandomCode(BusinessRelation.FIELDNO(Code),DATABASE::"Business Relation"));
      BusinessRelation.VALIDATE(Description,BusinessRelation.Code);  // Validating Code as Description because value is not important.
      BusinessRelation.INSERT(TRUE);
    END;

    PROCEDURE CreateCampaign@1(VAR Campaign@1000 : Record 5071);
    VAR
      MarketingSetup@1001 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      IF MarketingSetup."Campaign Nos." = '' THEN BEGIN
        MarketingSetup.VALIDATE("Campaign Nos.",LibraryUtility.GetGlobalNoSeriesCode);
        MarketingSetup.MODIFY(TRUE);
      END;

      CLEAR(Campaign);
      Campaign.INIT;
      Campaign.INSERT(TRUE);
      Campaign.VALIDATE(Description,Campaign."No.");  // Validating No. as Description because value is not important.
      Campaign.MODIFY(TRUE);
    END;

    PROCEDURE CreateCampaignStatus@2(VAR CampaignStatus@1000 : Record 5073);
    BEGIN
      CampaignStatus.INIT;
      CampaignStatus.VALIDATE(Code,LibraryUtility.GenerateRandomCode(CampaignStatus.FIELDNO(Code),DATABASE::"Campaign Status"));
      CampaignStatus.VALIDATE(Description,CampaignStatus.Code);  // Validating Code as Description because value is not important.
      CampaignStatus.INSERT(TRUE);
    END;

    PROCEDURE CreateCloseOpportunityCode@21(VAR CloseOpportunityCode@1000 : Record 5094);
    BEGIN
      CloseOpportunityCode.INIT;
      CloseOpportunityCode.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(CloseOpportunityCode.FIELDNO(Code),DATABASE::"Close Opportunity Code"));
      // Validating Code as Description because value is not important.
      CloseOpportunityCode.VALIDATE(Description,CloseOpportunityCode.Code);
      CloseOpportunityCode.INSERT(TRUE);
    END;

    PROCEDURE CreateCompanyContact@44(VAR Contact@1000 : Record 5050);
    BEGIN
      CreateContactInternal(Contact,Contact.Type::Company);
    END;

    PROCEDURE CreatePersonContact@45(VAR Contact@1000 : Record 5050);
    BEGIN
      CreateContactInternal(Contact,Contact.Type::Person);
    END;

    PROCEDURE CreateContact@6(VAR Contact@1000 : Record 5050);
    BEGIN
      CreateCompanyContact(Contact);
    END;

    LOCAL PROCEDURE CreateContactInternal@96(VAR Contact@1000 : Record 5050;Type@1003 : Option);
    VAR
      MarketingSetup@1001 : Record 5079;
      SalespersonPurchaser@1002 : Record 13;
    BEGIN
      MarketingSetup.GET;
      IF MarketingSetup."Contact Nos." = '' THEN BEGIN
        MarketingSetup.VALIDATE("Contact Nos.",LibraryUtility.GetGlobalNoSeriesCode);
        MarketingSetup.MODIFY(TRUE);
      END;

      SalespersonPurchaser.FINDFIRST;
      Contact.INIT;
      Contact.INSERT(TRUE);
      Contact.VALIDATE(Name,Contact."No.");  // Validating Name as No. because value is not important.
      Contact.VALIDATE("Salesperson Code",SalespersonPurchaser.Code);
      Contact.VALIDATE(Type,Type);
      Contact.MODIFY(TRUE);
    END;

    PROCEDURE CreateContactAltAddress@10(VAR ContactAltAddress@1000 : Record 5051;ContactNo@1001 : Code[20]);
    BEGIN
      ContactAltAddress.INIT;
      ContactAltAddress.VALIDATE("Contact No.",ContactNo);
      ContactAltAddress.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(ContactAltAddress.FIELDNO(Code),DATABASE::"Contact Alt. Address"));
      ContactAltAddress.INSERT(TRUE);
    END;

    PROCEDURE CreateContactAltAddrDateRange@11(VAR ContactAltAddrDateRange@1000 : Record 5052;ContactNo@1001 : Code[20];StartingDate@1002 : Date);
    BEGIN
      ContactAltAddrDateRange.INIT;
      ContactAltAddrDateRange.VALIDATE("Contact No.",ContactNo);
      ContactAltAddrDateRange.VALIDATE("Starting Date",StartingDate);
      ContactAltAddrDateRange.INSERT(TRUE);
    END;

    PROCEDURE CreateContactBusinessRelation@13(VAR ContactBusinessRelation@1000 : Record 5054;ContactNo@1001 : Code[20];BusinessRelationCode@1002 : Code[10]);
    BEGIN
      ContactBusinessRelation.INIT;
      ContactBusinessRelation.VALIDATE("Contact No.",ContactNo);
      ContactBusinessRelation.VALIDATE("Business Relation Code",BusinessRelationCode);
      ContactBusinessRelation.INSERT(TRUE);
    END;

    PROCEDURE CreateContactIndustryGroup@12(VAR ContactIndustryGroup@1000 : Record 5058;ContactNo@1001 : Code[20];IndustryGroupCode@1002 : Code[10]);
    BEGIN
      ContactIndustryGroup.INIT;
      ContactIndustryGroup.VALIDATE("Contact No.",ContactNo);
      ContactIndustryGroup.VALIDATE("Industry Group Code",IndustryGroupCode);
      ContactIndustryGroup.INSERT(TRUE);
    END;

    PROCEDURE CreateContactJobResponsibility@26(VAR ContactJobResponsibility@1000 : Record 5067;ContactNo@1001 : Code[20];JobResponsibilityCode@1002 : Code[10]);
    BEGIN
      ContactJobResponsibility.INIT;
      ContactJobResponsibility.VALIDATE("Contact No.",ContactNo);
      ContactJobResponsibility.VALIDATE("Job Responsibility Code",JobResponsibilityCode);
      ContactJobResponsibility.INSERT(TRUE);
    END;

    PROCEDURE CreateContactMailingGroup@19(VAR ContactMailingGroup@1000 : Record 5056;ContactNo@1001 : Code[20];MailingGroupCode@1002 : Code[10]);
    BEGIN
      ContactMailingGroup.INIT;
      ContactMailingGroup.VALIDATE("Contact No.",ContactNo);
      ContactMailingGroup.VALIDATE("Mailing Group Code",MailingGroupCode);
      ContactMailingGroup.INSERT(TRUE);
    END;

    PROCEDURE CreateContactWebSource@20(VAR ContactWebSource@1000 : Record 5060;ContactNo@1001 : Code[20];WebSourceCode@1002 : Code[10]);
    BEGIN
      ContactWebSource.INIT;
      ContactWebSource.VALIDATE("Contact No.",ContactNo);
      ContactWebSource.VALIDATE("Web Source Code",WebSourceCode);
      ContactWebSource.INSERT(TRUE);
    END;

    PROCEDURE CreateInteractionGroup@30(VAR InteractionGroup@1000 : Record 5063);
    BEGIN
      InteractionGroup.INIT;
      InteractionGroup.VALIDATE(Code,LibraryUtility.GenerateRandomCode(InteractionGroup.FIELDNO(Code),DATABASE::"Interaction Group"));
      InteractionGroup.VALIDATE(Description,InteractionGroup.Code);  // Validating Code as Description because value is not important.
      InteractionGroup.INSERT(TRUE);
    END;

    PROCEDURE CreateInteractionTemplate@3(VAR InteractionTemplate@1000 : Record 5064);
    VAR
      InteractionGroup@1001 : Record 5063;
    BEGIN
      InteractionGroup.FINDFIRST;
      InteractionTemplate.INIT;
      InteractionTemplate.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(InteractionTemplate.FIELDNO(Code),DATABASE::"Interaction Template"));
      // Validating Code as Description because value is not important.
      InteractionTemplate.VALIDATE(Description,InteractionTemplate.Code);
      InteractionTemplate.VALIDATE("Interaction Group Code",InteractionGroup.Code);
      InteractionTemplate.INSERT(TRUE);
    END;

    PROCEDURE CreateJobResponsibility@17(VAR JobResponsibility@1000 : Record 5066);
    BEGIN
      JobResponsibility.INIT;
      JobResponsibility.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(JobResponsibility.FIELDNO(Code),DATABASE::"Job Responsibility"));
      JobResponsibility.VALIDATE(Description,JobResponsibility.Code);  // Validating Code as Description because value is not important.
      JobResponsibility.INSERT(TRUE);
    END;

    PROCEDURE CreateMailingGroup@15(VAR MailingGroup@1000 : Record 5055);
    BEGIN
      MailingGroup.INIT;
      MailingGroup.VALIDATE(Code,LibraryUtility.GenerateRandomCode(MailingGroup.FIELDNO(Code),DATABASE::"Mailing Group"));
      MailingGroup.VALIDATE(Description,MailingGroup.Code);  // Validating Code as Description because value is not important.
      MailingGroup.INSERT(TRUE);
    END;

    PROCEDURE CreateOpportunity@7(VAR Opportunity@1000 : Record 5092;ContactNo@1002 : Code[20]);
    VAR
      MarketingSetup@1001 : Record 5079;
      SalespersonPurchaser@1003 : Record 13;
      SalesCycle@1004 : Record 5090;
    BEGIN
      MarketingSetup.GET;
      IF MarketingSetup."Opportunity Nos." = '' THEN BEGIN
        MarketingSetup.VALIDATE("Opportunity Nos.",LibraryUtility.GetGlobalNoSeriesCode);
        MarketingSetup.MODIFY(TRUE);
      END;

      SalespersonPurchaser.FINDFIRST;
      SalesCycle.FINDFIRST;
      Opportunity.INIT;
      Opportunity.INSERT(TRUE);
      Opportunity.VALIDATE(Description,Opportunity."No.");  // Validating No. as Description because value is not important.
      Opportunity.VALIDATE("Contact No.",ContactNo);
      Opportunity.VALIDATE("Salesperson Code",SalespersonPurchaser.Code);
      Opportunity.VALIDATE("Sales Cycle Code",SalesCycle.Code);
      Opportunity.MODIFY(TRUE);
    END;

    PROCEDURE CreateQuestionnaireHeader@29(VAR ProfileQuestionnaireHeader@1000 : Record 5087);
    BEGIN
      ProfileQuestionnaireHeader.INIT;
      ProfileQuestionnaireHeader.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(ProfileQuestionnaireHeader.FIELDNO(Code),DATABASE::"Profile Questionnaire Header"));

      // Validating Code as Description because value is not important.
      ProfileQuestionnaireHeader.VALIDATE(Description,ProfileQuestionnaireHeader.Code);
      ProfileQuestionnaireHeader.INSERT(TRUE);
    END;

    PROCEDURE CreateProfileQuestionnaireLine@28(VAR ProfileQuestionnaireLine@1000 : Record 5088;ProfileQuestionnaireCode@1001 : Code[10]);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      ProfileQuestionnaireLine.INIT;
      ProfileQuestionnaireLine.VALIDATE("Profile Questionnaire Code",ProfileQuestionnaireCode);
      RecRef.GETTABLE(ProfileQuestionnaireLine);
      // Use the function GetLastLineNo to get the value of the Line No. field.
      ProfileQuestionnaireLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,ProfileQuestionnaireLine.FIELDNO("Line No.")));
      ProfileQuestionnaireLine.INSERT(TRUE);
    END;

    PROCEDURE CreateRlshpMgtCommentLine@18(VAR RlshpMgtCommentLine@1000 : Record 5061;TableName@1001 : Option;No@1002 : Code[20];SubNo@1003 : Integer);
    VAR
      RecRef@1004 : RecordRef;
    BEGIN
      RlshpMgtCommentLine.INIT;
      RlshpMgtCommentLine.VALIDATE("Table Name",TableName);
      RlshpMgtCommentLine.VALIDATE("No.",No);
      RlshpMgtCommentLine.VALIDATE("Sub No.",SubNo);
      RecRef.GETTABLE(RlshpMgtCommentLine);
      RlshpMgtCommentLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,RlshpMgtCommentLine.FIELDNO("Line No.")));
      RlshpMgtCommentLine.INSERT(TRUE);
    END;

    PROCEDURE CreateRlshpMgtCommentContact@22(VAR RlshpMgtCommentLine@1000 : Record 5061;ContactNo@1001 : Code[20]);
    BEGIN
      CreateRlshpMgtCommentLine(RlshpMgtCommentLine,RlshpMgtCommentLine."Table Name"::Contact,ContactNo,0);
      // Sub No. is 0 for Contact.
    END;

    PROCEDURE CreateRlshpMgtCommentSales@32(VAR RlshpMgtCommentLine@1000 : Record 5061;SalesCycleCode@1001 : Code[10]);
    BEGIN
      CreateRlshpMgtCommentLine(RlshpMgtCommentLine,RlshpMgtCommentLine."Table Name"::"Sales Cycle",SalesCycleCode,0);
      // Sub No. is 0 for Sales Cycle.
    END;

    PROCEDURE CreateSalutation@33(VAR Salutation@1000 : Record 5068);
    BEGIN
      Salutation.INIT;
      Salutation.VALIDATE(Code,LibraryUtility.GenerateRandomCode(Salutation.FIELDNO(Code),DATABASE::Salutation));
      Salutation.VALIDATE(Description,Salutation.Code);  // Validating Code as Description because value is not important.
      Salutation.INSERT(TRUE);
    END;

    PROCEDURE CreateSalutationFormula@34(VAR SalutationFormula@1000 : Record 5069;SalutationCode@1001 : Code[10];LanguageCode@1002 : Code[10];SalutationType@1003 : Option);
    BEGIN
      SalutationFormula.INIT;
      SalutationFormula.VALIDATE("Salutation Code",SalutationCode);
      SalutationFormula.VALIDATE("Language Code",LanguageCode);
      SalutationFormula.VALIDATE("Salutation Type",SalutationType);
      SalutationFormula.INSERT(TRUE);
    END;

    PROCEDURE CreateSalesCycle@23(VAR SalesCycle@1000 : Record 5090);
    BEGIN
      SalesCycle.INIT;
      SalesCycle.VALIDATE(Code,LibraryUtility.GenerateRandomCode(SalesCycle.FIELDNO(Code),DATABASE::"Sales Cycle"));
      SalesCycle.VALIDATE(Description,SalesCycle.Code);
      SalesCycle.INSERT(TRUE);
    END;

    PROCEDURE CreateSalesCycleStage@31(VAR SalesCycleStage@1000 : Record 5091;SalesCycleCode@1001 : Code[10]);
    VAR
      Stage@1002 : Integer;
    BEGIN
      SalesCycleStage.SETRANGE("Sales Cycle Code",SalesCycleCode);
      // Use 1 to Increase Stage.
      IF SalesCycleStage.FINDLAST THEN
        Stage := SalesCycleStage.Stage + 1
      ELSE
        Stage := 1;
      SalesCycleStage.INIT;
      SalesCycleStage.VALIDATE("Sales Cycle Code",SalesCycleCode);
      SalesCycleStage.VALIDATE(Stage,Stage);
      SalesCycleStage.INSERT(TRUE);
    END;

    PROCEDURE CreateSalesHeaderWithContact@39(VAR SalesHeader@1000 : Record 36;SellToContactNo@1001 : Code[20];SellToCustomerTemplateCode@1002 : Code[10]);
    BEGIN
      SalesHeader.INIT;
      SalesHeader.INSERT(TRUE);
      SalesHeader.VALIDATE("Sell-to Contact No.",SellToContactNo);
      SalesHeader.VALIDATE("Sell-to Customer Template Code",SellToCustomerTemplateCode);
      SalesHeader.MODIFY(TRUE);
    END;

    PROCEDURE CreateSalesLineDiscount@9(VAR SalesLineDiscount@1000 : Record 7004;CampaignNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      SalesLineDiscount.INIT;
      SalesLineDiscount.VALIDATE(Type,SalesLineDiscount.Type::Item);
      SalesLineDiscount.VALIDATE(Code,ItemNo);
      SalesLineDiscount.VALIDATE("Sales Type",SalesLineDiscount."Sales Type"::Campaign);
      SalesLineDiscount.VALIDATE("Sales Code",CampaignNo);
      SalesLineDiscount.INSERT(TRUE);
    END;

    PROCEDURE CreateSalesPriceForCampaign@8(VAR SalesPrice@1000 : Record 7002;ItemNo@1002 : Code[20];CampaignNo@1001 : Code[20]);
    BEGIN
      SalesPrice.INIT;
      SalesPrice.VALIDATE("Item No.",ItemNo);
      SalesPrice.VALIDATE("Sales Type",SalesPrice."Sales Type"::Campaign);
      SalesPrice.VALIDATE("Sales Code",CampaignNo);
      SalesPrice.INSERT(TRUE);
    END;

    PROCEDURE CreateSegmentHeader@4(VAR SegmentHeader@1000 : Record 5076);
    VAR
      MarketingSetup@1001 : Record 5079;
    BEGIN
      MarketingSetup.GET;
      IF MarketingSetup."Segment Nos." = '' THEN BEGIN
        MarketingSetup.VALIDATE("Segment Nos.",LibraryUtility.GetGlobalNoSeriesCode);
        MarketingSetup.MODIFY(TRUE);
      END;

      SegmentHeader.INIT;
      SegmentHeader.INSERT(TRUE);
      SegmentHeader.VALIDATE(Description,SegmentHeader."No.");  // Validating No. as Description because value is not important.
      SegmentHeader.MODIFY(TRUE);
    END;

    PROCEDURE CreateSegmentLine@5(VAR SegmentLine@1000 : Record 5077;SegmentHeaderNo@1001 : Code[20]);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      SegmentLine.INIT;
      SegmentLine.VALIDATE("Segment No.",SegmentHeaderNo);
      RecRef.GETTABLE(SegmentLine);
      SegmentLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,SegmentLine.FIELDNO("Line No.")));
      SegmentLine.INSERT(TRUE);
    END;

    PROCEDURE CreateTeam@25(VAR Team@1000 : Record 5083);
    BEGIN
      Team.INIT;
      Team.VALIDATE(Code,LibraryUtility.GenerateRandomCode(Team.FIELDNO(Code),DATABASE::Team));
      Team.INSERT(TRUE);
    END;

    PROCEDURE CreateTeamSalesperson@24(VAR TeamSalesperson@1000 : Record 5084;TeamCode@1001 : Code[10];SalespersonCode@1002 : Code[10]);
    BEGIN
      TeamSalesperson.INIT;
      TeamSalesperson.VALIDATE("Team Code",TeamCode);
      TeamSalesperson.VALIDATE("Salesperson Code",SalespersonCode);
      TeamSalesperson.INSERT(TRUE);
    END;

    PROCEDURE CreateToDo@38(VAR ToDo@1000 : Record 5080);
    BEGIN
      ToDo.INIT;
      ToDo.INSERT(TRUE);
      ToDo.VALIDATE(Description,ToDo."No.");
      ToDo.MODIFY(TRUE);
    END;

    PROCEDURE CreateWebSource@16(VAR WebSource@1000 : Record 5059);
    BEGIN
      WebSource.INIT;
      WebSource.VALIDATE(Code,LibraryUtility.GenerateRandomCode(WebSource.FIELDNO(Code),DATABASE::"Web Source"));
      WebSource.VALIDATE(Description,WebSource.Code);  // Validating Code as Description because value is not important.
      WebSource.INSERT(TRUE);
    END;

    PROCEDURE FindContact@35(VAR Contact@1000 : Record 5050);
    BEGIN
      Contact.FINDSET;
    END;

    PROCEDURE FindCustomerTemplate@37(VAR CustomerTemplate@1000 : Record 5105);
    BEGIN
      CustomerTemplate.FINDFIRST;
    END;

    BEGIN
    {
      Contains all utility functions related to Marketing.
    }
    END.
  }
}

