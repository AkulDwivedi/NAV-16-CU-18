OBJECT Codeunit 134763 Test Sales Post Preview
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibrarySales@1000 : Codeunit 130509;
      LibraryInventory@1001 : Codeunit 132201;
      LibraryRandom@1005 : Codeunit 130440;
      LibrarySetupStorage@1007 : Codeunit 131009;
      GenJnlPostPreview@1008 : Codeunit 19;
      Assert@1006 : Codeunit 130000;
      NoRecordsErr@1004 : TextConst 'ENU=There are no preview records to show.';
      IsInitialized@1009 : Boolean;
      WrongPostPreviewErr@1002 : TextConst 'ENU="Expected empty error from Preview. Actual error: "';

    [Test]
    PROCEDURE TestSalesInvoicePreview@2();
    VAR
      SalesHeader@1000 : Record 36;
      SalesPostYesNo@1004 : Codeunit 81;
      GLPostingPreview@1001 : TestPage 115;
      CustomerEntriesPreview@1002 : TestPage 126;
      AmountToVerify@1005 : Decimal;
      ExpectedQuantity@1003 : Decimal;
    BEGIN
      // [SCENARIO] Preview action on Sales Invoice should have the expected results in the GL Entry Preview page.

      AmountToVerify := LibraryRandom.RandInt(500);
      ExpectedQuantity := LibraryRandom.RandInt(10);

      CreateSalesRecord(SalesHeader,AmountToVerify,ExpectedQuantity,SalesHeader."Document Type"::Invoice);

      // Execute
      GLPostingPreview.TRAP;
      ASSERTERROR SalesPostYesNo.Preview(SalesHeader);
      Assert.AreEqual('',GETLASTERRORTEXT,WrongPostPreviewErr + GETLASTERRORTEXT);
      GLPostingPreviewHandler(GLPostingPreview);

      CustomerEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Cust. Ledger Entry");
      CustEntriesPreviewHandler(CustomerEntriesPreview,SalesHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE TestSalesOrderPreview@1();
    VAR
      SalesHeader@1000 : Record 36;
      SalesPostYesNo@1004 : Codeunit 81;
      GLPostingPreview@1001 : TestPage 115;
      CustomerEntriesPreview@1002 : TestPage 126;
      AmountToVerify@1005 : Decimal;
      ExpectedQuantity@1003 : Decimal;
    BEGIN
      // [SCENARIO] Preview action on Sales Order should have the expected results in the GL Entry Preview page.

      AmountToVerify := LibraryRandom.RandInt(500);
      ExpectedQuantity := LibraryRandom.RandInt(10);

      CreateSalesRecord(SalesHeader,AmountToVerify,ExpectedQuantity,SalesHeader."Document Type"::Order);

      // Execute

      GLPostingPreview.TRAP;
      ASSERTERROR SalesPostYesNo.Preview(SalesHeader);
      Assert.AreEqual('',GETLASTERRORTEXT,WrongPostPreviewErr + GETLASTERRORTEXT);
      GLPostingPreviewHandler(GLPostingPreview);

      // Verify
      CustomerEntriesPreview.TRAP;
      GenJnlPostPreview.ShowEntries(DATABASE::"Cust. Ledger Entry");
      CustEntriesPreviewHandler(CustomerEntriesPreview,SalesHeader."Document Type"::Invoice);
    END;

    [Test]
    PROCEDURE SalesInvoiceOpensPreview@5();
    VAR
      SalesHeader@1000 : Record 36;
      SalesInvoice@1002 : TestPage 43;
      GLPostingPreview@1001 : TestPage 115;
      AmountToVerify@1004 : Decimal;
      ExpectedQuantity@1003 : Decimal;
    BEGIN
      // [SCENARIO] Preview action on Sales Invoice should have the expected results in the GL Entry Preview page.

      AmountToVerify := LibraryRandom.RandInt(500);
      ExpectedQuantity := LibraryRandom.RandInt(10);

      CreateSalesRecord(SalesHeader,AmountToVerify,ExpectedQuantity,SalesHeader."Document Type"::Invoice);

      SalesInvoice.TRAP;
      PAGE.RUN(PAGE::"Sales Invoice",SalesHeader);

      GLPostingPreview.TRAP;
      SalesInvoice.Preview.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE MiniSalesInvoiceOpensPreview@10();
    VAR
      SalesHeader@1000 : Record 36;
      GLPostingPreview@1001 : TestPage 115;
      MiniSalesInvoice@1002 : TestPage 1304;
      AmountToVerify@1004 : Decimal;
      ExpectedQuantity@1003 : Decimal;
    BEGIN
      // [SCENARIO] Preview action on Mini Sales Invoice should have the expected results in the GL Entry Preview page.

      AmountToVerify := LibraryRandom.RandInt(500);
      ExpectedQuantity := LibraryRandom.RandInt(10);

      CreateSalesRecord(SalesHeader,AmountToVerify,ExpectedQuantity,SalesHeader."Document Type"::Invoice);

      MiniSalesInvoice.TRAP;
      PAGE.RUN(PAGE::"Mini Sales Invoice",SalesHeader);

      GLPostingPreview.TRAP;
      MiniSalesInvoice.Action17.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE SalesInvoiceListOpensPreview@20();
    VAR
      SalesHeader@1000 : Record 36;
      GLPostingPreview@1001 : TestPage 115;
      SalesInvoiceList@1002 : TestPage 9301;
      AmountToVerify@1004 : Decimal;
      ExpectedQuantity@1003 : Decimal;
    BEGIN
      // [SCENARIO] Preview action on Sales Invoice List should have the expected results in the GL Entry Preview page.

      AmountToVerify := LibraryRandom.RandInt(500);
      ExpectedQuantity := LibraryRandom.RandInt(10);

      CreateSalesRecord(SalesHeader,AmountToVerify,ExpectedQuantity,SalesHeader."Document Type"::Invoice);

      SalesInvoiceList.TRAP;
      PAGE.RUN(PAGE::"Sales Invoice List",SalesHeader);

      GLPostingPreview.TRAP;
      SalesInvoiceList.Preview.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE MiniSalesInvoiceListOpensPreview@9();
    VAR
      SalesHeader@1000 : Record 36;
      GLPostingPreview@1001 : TestPage 115;
      MiniSalesInvoiceList@1002 : TestPage 1306;
      AmountToVerify@1004 : Decimal;
      ExpectedQuantity@1003 : Decimal;
    BEGIN
      // [SCENARIO] Preview action on Mini Sales Invoice List should have the expected results in the GL Entry Preview page.

      AmountToVerify := LibraryRandom.RandInt(500);
      ExpectedQuantity := LibraryRandom.RandInt(10);

      CreateSalesRecord(SalesHeader,AmountToVerify,ExpectedQuantity,SalesHeader."Document Type"::Invoice);

      MiniSalesInvoiceList.TRAP;
      PAGE.RUN(PAGE::"Mini Sales Invoice List",SalesHeader);

      GLPostingPreview.TRAP;
      MiniSalesInvoiceList.Action21.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE SalesOrderOpensPreview@8();
    VAR
      SalesHeader@1000 : Record 36;
      GLPostingPreview@1001 : TestPage 115;
      SalesOrder@1002 : TestPage 42;
      AmountToVerify@1004 : Decimal;
      ExpectedQuantity@1003 : Decimal;
    BEGIN
      // [SCENARIO] Preview action on Sales Order should have the expected results in the GL Entry Preview page.

      AmountToVerify := LibraryRandom.RandInt(500);
      ExpectedQuantity := LibraryRandom.RandInt(10);

      CreateSalesRecord(SalesHeader,AmountToVerify,ExpectedQuantity,SalesHeader."Document Type"::Order);

      SalesOrder.TRAP;
      PAGE.RUN(PAGE::"Sales Order",SalesHeader);

      GLPostingPreview.TRAP;
      SalesOrder.PreviewPosting.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE SalesOrderListOpensPreview@22();
    VAR
      SalesHeader@1000 : Record 36;
      GLPostingPreview@1001 : TestPage 115;
      SalesOrderList@1002 : TestPage 9305;
      AmountToVerify@1004 : Decimal;
      ExpectedQuantity@1003 : Decimal;
    BEGIN
      // [SCENARIO] Preview action on Sales Order List should have the expected results in the GL Entry Preview page.

      AmountToVerify := LibraryRandom.RandInt(500);
      ExpectedQuantity := LibraryRandom.RandInt(10);

      CreateSalesRecord(SalesHeader,AmountToVerify,ExpectedQuantity,SalesHeader."Document Type"::Order);

      SalesOrderList.TRAP;
      PAGE.RUN(PAGE::"Sales Order List",SalesHeader);

      GLPostingPreview.TRAP;
      SalesOrderList.Action22.INVOKE;

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE SalesReturnOpensPreview@15();
    VAR
      SalesHeader@1000 : Record 36;
      GLPostingPreview@1001 : TestPage 115;
      SalesReturnOrder@1002 : TestPage 6630;
      AmountToVerify@1004 : Decimal;
      ExpectedQuantity@1003 : Decimal;
    BEGIN
      // [SCENARIO] Preview action on Sales Return Order should have the expected results in the GL Entry Preview page.

      AmountToVerify := LibraryRandom.RandInt(500);
      ExpectedQuantity := LibraryRandom.RandInt(10);

      CreateSalesRecord(SalesHeader,AmountToVerify,ExpectedQuantity,SalesHeader."Document Type"::"Return Order");

      SalesReturnOrder.TRAP;
      PAGE.RUN(PAGE::"Sales Return Order",SalesHeader);

      GLPostingPreview.TRAP;
      SalesReturnOrder.Action11.INVOKE; // Preview

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE SalesReturnListOpensPreview@24();
    VAR
      SalesHeader@1000 : Record 36;
      GLPostingPreview@1001 : TestPage 115;
      SalesReturnOrderList@1002 : TestPage 9304;
      AmountToVerify@1004 : Decimal;
      ExpectedQuantity@1003 : Decimal;
    BEGIN
      // [SCENARIO] Preview action on Sales Return Order should have the expected results in the GL Entry Preview page.

      AmountToVerify := LibraryRandom.RandInt(500);
      ExpectedQuantity := LibraryRandom.RandInt(10);

      CreateSalesRecord(SalesHeader,AmountToVerify,ExpectedQuantity,SalesHeader."Document Type"::"Return Order");

      SalesReturnOrderList.TRAP;
      PAGE.RUN(PAGE::"Sales Return Order List",SalesHeader);

      GLPostingPreview.TRAP;
      SalesReturnOrderList.Action14.INVOKE; // Preview

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE SalesCreditMemoOpensPreview@18();
    VAR
      SalesHeader@1000 : Record 36;
      GLPostingPreview@1001 : TestPage 115;
      SalesCreditMemo@1002 : TestPage 44;
      AmountToVerify@1004 : Decimal;
      ExpectedQuantity@1003 : Decimal;
    BEGIN
      // [SCENARIO] Preview action on Sales Credit Memo should have the expected results in the GL Entry Preview page.

      AmountToVerify := LibraryRandom.RandInt(500);
      ExpectedQuantity := LibraryRandom.RandInt(10);

      CreateSalesRecord(SalesHeader,AmountToVerify,ExpectedQuantity,SalesHeader."Document Type"::"Credit Memo");

      SalesCreditMemo.TRAP;
      PAGE.RUN(PAGE::"Sales Credit Memo",SalesHeader);

      GLPostingPreview.TRAP;
      SalesCreditMemo.Action35.INVOKE; // Preview

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE MiniSalesCreditMemoOpensPreview@11();
    VAR
      SalesHeader@1000 : Record 36;
      GLPostingPreview@1001 : TestPage 115;
      MiniSalesCreditMemo@1002 : TestPage 1319;
      AmountToVerify@1004 : Decimal;
      ExpectedQuantity@1003 : Decimal;
    BEGIN
      // [SCENARIO] Preview action on Sales Credit Memo should have the expected results in the GL Entry Preview page.

      AmountToVerify := LibraryRandom.RandInt(500);
      ExpectedQuantity := LibraryRandom.RandInt(10);

      CreateSalesRecord(SalesHeader,AmountToVerify,ExpectedQuantity,SalesHeader."Document Type"::"Credit Memo");

      MiniSalesCreditMemo.TRAP;
      PAGE.RUN(PAGE::"Mini Sales Credit Memo",SalesHeader);

      GLPostingPreview.TRAP;
      MiniSalesCreditMemo.Action17.INVOKE; // Preview

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE SalesCreditMemoListOpensPreview@26();
    VAR
      SalesHeader@1000 : Record 36;
      GLPostingPreview@1001 : TestPage 115;
      SalesCreditMemos@1002 : TestPage 9302;
      AmountToVerify@1004 : Decimal;
      ExpectedQuantity@1003 : Decimal;
    BEGIN
      // [SCENARIO] Preview action on Sales Credit Memo List should have the expected results in the GL Entry Preview page.

      AmountToVerify := LibraryRandom.RandInt(500);
      ExpectedQuantity := LibraryRandom.RandInt(10);

      CreateSalesRecord(SalesHeader,AmountToVerify,ExpectedQuantity,SalesHeader."Document Type"::"Credit Memo");

      SalesCreditMemos.TRAP;
      PAGE.RUN(PAGE::"Sales Credit Memos",SalesHeader);

      GLPostingPreview.TRAP;
      SalesCreditMemos.Action10.INVOKE; // Preview

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE MiniSalesCreditMemoListOpensPreview@12();
    VAR
      SalesHeader@1000 : Record 36;
      GLPostingPreview@1001 : TestPage 115;
      MiniSalesCreditMemos@1002 : TestPage 1317;
      AmountToVerify@1004 : Decimal;
      ExpectedQuantity@1003 : Decimal;
    BEGIN
      // [SCENARIO] Preview action on Mini Sales Credit Memo List should have the expected results in the GL Entry Preview page.

      AmountToVerify := LibraryRandom.RandInt(500);
      ExpectedQuantity := LibraryRandom.RandInt(10);

      CreateSalesRecord(SalesHeader,AmountToVerify,ExpectedQuantity,SalesHeader."Document Type"::"Credit Memo");

      MiniSalesCreditMemos.TRAP;
      PAGE.RUN(PAGE::"Mini Sales Credit Memos",SalesHeader);

      GLPostingPreview.TRAP;
      MiniSalesCreditMemos.Action20.INVOKE; // Preview

      IF NOT GLPostingPreview.FIRST THEN
        ERROR(NoRecordsErr);
      GLPostingPreview.OK.INVOKE;

      // Cleanup
      ASSERTERROR ERROR('');
    END;

    [Test]
    PROCEDURE PartialShippedSalesOrderOpensPreview@13();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
      SalesPostYesNo@1005 : Codeunit 81;
      GLPostingPreview@1003 : TestPage 115;
    BEGIN
      // [SCENARIO 376432] Preview action should work for partial shipped Sales Order

      Initialize;

      // [GIVEN] "Calc. Inv. Discount" is enabled in Sales & Receivables Setup
      LibrarySales.SetCalcInvDiscount(TRUE);

      // [GIVEN] Partial shipped Sales Order
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandIntInRange(2,10));
      SalesLine.VALIDATE("Qty. to Ship",LibraryRandom.RandIntInRange(1,SalesLine.Quantity));
      SalesLine.MODIFY(TRUE);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [WHEN] Open Post Preview
      GLPostingPreview.TRAP;
      ASSERTERROR SalesPostYesNo.Preview(SalesHeader);

      // [THEN] Preview is open
      Assert.AreEqual('',GETLASTERRORTEXT,WrongPostPreviewErr + GETLASTERRORTEXT);
    END;

    [Test]
    PROCEDURE TestPartialSalesOrderPreview@14();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      SalesPostYesNo@1001 : Codeunit 81;
      GLPostingPreview@1000 : TestPage 115;
      ItemNo@1004 : Code[20];
      LotNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Posting Preview]
      // [SCENARIO 378536] Preview action can be opened for Sales Order with FIFO Item, if was before posted partially several times.
      Initialize;

      // [GIVEN] Inventory Setup: Automatic Cost Posting = TRUE, Expected Cost Posting = TRUE
      LibraryInventory.SetAutomaticCostPosting(TRUE);
      LibraryInventory.SetExpectedCostPosting(TRUE);

      // [GIVEN] Item with Lot Tracking and Costing Method FIFO
      ItemNo := CreateItemWithFIFO;
      CreateAndPostItemJournalLine(ItemNo,LibraryRandom.RandDecInRange(10,20,2));

      // [GIVEN] Create Sales Order, Ship and Invoice partially
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandIntInRange(5,10));
      PostPartialQuantity(SalesHeader,TRUE);

      // [GIVEN] Ship Sales Order again partially
      PostPartialQuantity(SalesHeader,FALSE);

      // [WHEN] Open Post Preview
      GLPostingPreview.TRAP;
      ASSERTERROR SalesPostYesNo.Preview(SalesHeader);

      // [THEN] Preview is open
      Assert.AreEqual('',GETLASTERRORTEXT,WrongPostPreviewErr + GETLASTERRORTEXT);
    END;

    LOCAL PROCEDURE Initialize@36();
    BEGIN
      LibrarySetupStorage.Restore;
      IF IsInitialized THEN
        EXIT;
      IsInitialized := TRUE;
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
      LibrarySetupStorage.Save(DATABASE::"Inventory Setup");
    END;

    [Normal]
    PROCEDURE CreateSalesRecord@3(VAR SalesHeader@1000 : Record 36;ItemCost@1001 : Decimal;Quantity@1002 : Decimal;Type@1003 : Integer);
    VAR
      Customer@1004 : Record 18;
      Item@1005 : Record 27;
      SalesLine@1006 : Record 37;
      VATPostingSetup@1007 : Record 325;
      LibraryERM@1008 : Codeunit 131300;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryInventory.CreateItem(Item);
      LibrarySales.CreateSalesHeader(SalesHeader,Type,Customer."No.");

      VATPostingSetup.SETRANGE("VAT Bus. Posting Group",Customer."VAT Bus. Posting Group");
      VATPostingSetup.SETRANGE("VAT Prod. Posting Group",Item."VAT Prod. Posting Group");
      IF NOT VATPostingSetup.FINDFIRST THEN
        LibraryERM.CreateVATPostingSetup(VATPostingSetup,Customer."VAT Bus. Posting Group",Item."VAT Prod. Posting Group");

      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",Quantity);
      SalesLine."Unit Price" := ItemCost;
      SalesLine."Line Amount" := Quantity * SalesLine."Unit Price";
      SalesLine."Amount Including VAT" := SalesLine."Line Amount";
      SalesLine.MODIFY;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateItemWithFIFO@44() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      WITH Item DO BEGIN
        LibraryInventory.CreateItem(Item);
        VALIDATE("Costing Method","Costing Method"::FIFO);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE PostPartialQuantity@17(VAR SalesHeader@1000 : Record 36;Invoice@1002 : Boolean);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        FINDFIRST;
        VALIDATE("Qty. to Ship",1); // specific value needed for test
        MODIFY(TRUE);
      END;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,Invoice);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@54(ItemNo@1000 : Code[20];Quantity@1001 : Decimal) : Code[20];
    VAR
      ItemJournalBatch@1002 : Record 233;
      ItemJournalLine@1003 : Record 83;
    BEGIN
      SelectItemJournalBatch(ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::Purchase,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Unit Amount",LibraryRandom.RandDecInRange(10,100,2));
      ItemJournalLine.MODIFY(TRUE);
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE SelectItemJournalBatch@56(VAR ItemJournalBatch@1001 : Record 233);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(
        ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    PROCEDURE GLPostingPreviewHandler@4(VAR GLPostingPreview@1000 : TestPage 115);
    VAR
      GLEntry@1001 : Record 17;
      CustLedgerEntry@1002 : Record 21;
      ItemLedgerEntry@1003 : Record 32;
      VATEntry@1004 : Record 254;
      DetailedCustLedgEntry@1005 : Record 379;
      ValueEntry@1006 : Record 5802;
    BEGIN
      GLPostingPreview.FIRST;
      VerifyGLPostingPreviewLine(GLPostingPreview,GLEntry.TABLECAPTION,2);

      GLPostingPreview.NEXT;
      VerifyGLPostingPreviewLine(GLPostingPreview,CustLedgerEntry.TABLECAPTION,1);

      GLPostingPreview.NEXT;
      VerifyGLPostingPreviewLine(GLPostingPreview,ItemLedgerEntry.TABLECAPTION,1);

      GLPostingPreview.NEXT;
      VerifyGLPostingPreviewLine(GLPostingPreview,DetailedCustLedgEntry.TABLECAPTION,1);

      GLPostingPreview.NEXT;
      VerifyGLPostingPreviewLine(GLPostingPreview,ValueEntry.TABLECAPTION,1);

      GLPostingPreview.OK.INVOKE;
    END;

    PROCEDURE CustEntriesPreviewHandler@6(VAR CustomerEntriesPreview@1000 : TestPage 126;EntryType@1001 : Integer);
    BEGIN
      CustomerEntriesPreview.FIRST;
      Assert.AreEqual(EntryType,CustomerEntriesPreview."Document Type".ASINTEGER,'Unexpected DocumentType in CustomerEntriesPreview');
      CustomerEntriesPreview.OK.INVOKE;
    END;

    [Normal]
    PROCEDURE VerifyGLPostingPreviewLine@7(GLPostingPreview@1000 : TestPage 115;TableName@1001 : Text;ExpectedEntryCount@1002 : Integer);
    BEGIN
      Assert.AreEqual(TableName,GLPostingPreview."Table Name".VALUE,STRSUBSTNO('A record for Table Name %1 was not found.',TableName));
      Assert.AreEqual(ExpectedEntryCount,GLPostingPreview."No. of Records".ASINTEGER,
        STRSUBSTNO('Table Name %1 Unexpected number of records.',TableName));
    END;

    BEGIN
    {
      // [FEATURE] [Post Preview] [Sales]
    }
    END.
  }
}

