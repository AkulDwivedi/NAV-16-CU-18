OBJECT Codeunit 144040 Serv Tax Split Adv. Pmt.
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE
          END;

  }
  CODE
  {
    VAR
      Assert@1500007 : Codeunit 130000;
      LibraryERM@1500006 : Codeunit 131300;
      LibraryServiceTax@1500005 : Codeunit 143001;
      LibraryRandom@1500003 : Codeunit 130440;
      ReverseServiceTaxHelper@1500002 : Codeunit 143006;
      ServiceTaxVerify@1500004 : Codeunit 143004;
      ReverseChargeTypeOption@1500008 : ' ,Standard,GTA';
      isInitialized@1500000 : Boolean;
      AdvPmtSplitNoPoTBlockedErr@1500001 : TextConst 'ENU=You must set the PoT field to Yes when the service tax reverse charge is different from 100 percent.';
      ReversePaidTaxErr@1500009 : TextConst 'ENU=You cannot reverse %1 No. %2 because the service tax credit has already been utilized against the tax payment.';

    [Test]
    PROCEDURE PostAdvPmtSplit@1500024();
    VAR
      GenJournalLine@1500002 : Record 81;
      LastTransactionNo@1500012 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvPmt(GenJournalLine);

      VerifyAdvPmt(GenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE ReverseAdvPmtSplit@1500049();
    VAR
      GenJournalLine@1500002 : Record 81;
      LastTransactionNo@1500012 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvPmt(GenJournalLine);
      ReverseServiceTaxHelper.ReverseDocument(GenJournalLine."Document No.");

      ServiceTaxVerify.ReversedDocument(GenJournalLine."Document No.",LastTransactionNo);
    END;

    [Test]
    PROCEDURE ReverseAdvRefundSplit@1500069();
    VAR
      GenJournalLine@1500002 : Record 81;
      LastTransactionNo@1500012 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvRefund(GenJournalLine);
      ReverseServiceTaxHelper.ReverseDocument(GenJournalLine."Document No.");

      ServiceTaxVerify.ReversedDocument(GenJournalLine."Document No.",LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE BlockReverseOfAdvPmtPaidToGov@1500068();
    VAR
      GenJournalLine@1500000 : Record 81;
    BEGIN
      Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;

      PostAdvPmt(GenJournalLine);
      PayServiceTax(GenJournalLine);

      ASSERTERROR ReverseServiceTaxHelper.ReverseDocument(GenJournalLine."Document No.");
      Assert.ExpectedError(STRSUBSTNO(ReversePaidTaxErr,GenJournalLine."Document Type",GenJournalLine."Document No."));
    END;

    [Test]
    PROCEDURE PostAdvPmtSplitNoPoT@1500099();
    VAR
      GenJournalLine@1500002 : Record 81;
    BEGIN
      Initialize;

      ASSERTERROR
        ReverseServiceTaxHelper.CreateAndPostAdvancePayment(
          GenJournalLine,FALSE,ReverseServiceTaxHelper.GetReverseChargeServType(ReverseChargeTypeOption::Standard),
          ReverseChargeTypeOption::Standard,LibraryRandom.RandIntInRange(10,90));

      Assert.ExpectedError(AdvPmtSplitNoPoTBlockedErr);
    END;

    [Test]
    PROCEDURE ApplyInvToAdvPmtOffline@1500001();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500012 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvPmt(AdvPmtGenJournalLine);

      PostInvoice(AdvPmtGenJournalLine,InvGenJournalLine);

      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);

      VerifyApplication(AdvPmtGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE UnapplyApplyInvToAdvPmtOffline@1500053();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500012 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvPmt(AdvPmtGenJournalLine);

      PostInvoice(AdvPmtGenJournalLine,InvGenJournalLine);

      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);
      ApplyAfterUnapply(AdvPmtGenJournalLine,InvGenJournalLine);

      VerifyApplication(AdvPmtGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE ApplySmallInvAdvPmtOffline@1500012();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      PartialFactor := GetPartialFactor;

      PostAdvPmt(AdvPmtGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);

      VerifyPartialApplication(AdvPmtGenJournalLine,InvGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE UnapplyApplySmallInvAdvPmtOff@1500057();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      PartialFactor := GetPartialFactor;

      PostAdvPmt(AdvPmtGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);
      ApplyAfterUnapply(AdvPmtGenJournalLine,InvGenJournalLine);

      VerifyPartialApplication(AdvPmtGenJournalLine,InvGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE Apply2InvToAdvPmtOffline@1500019();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      PartialFactor := GetPartialFactor;

      PostAdvPmt(AdvPmtGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,1);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);

      VerifyApplication(AdvPmtGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE UnapplApply2InvToAdvPmtOffline@1500058();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      PartialFactor := GetPartialFactor;

      PostAdvPmt(AdvPmtGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,1);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);
      ApplyAfterUnapply(AdvPmtGenJournalLine,InvGenJournalLine);

      VerifyApplication(AdvPmtGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE Unapply2ApplyInvTo2AdvPmtOff@1500066();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      AdvPmtGenJournalLine2@1500003 : Record 81;
      InvGenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      PartialFactor := 1 + GetPartialFactor;
      AdvPmtGenJournalLine.Amount := LibraryRandom.RandDec(10000,2);

      PostAdvPmt(AdvPmtGenJournalLine);
      PostAdvPmtWithSameSetup(AdvPmtGenJournalLine,AdvPmtGenJournalLine2,PartialFactor);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);
      ApplyOffline(AdvPmtGenJournalLine2,InvGenJournalLine);

      ReverseServiceTaxHelper.UnapplyTwice(InvGenJournalLine."Document No.");

      VerifyUnapply(InvGenJournalLine,ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(AdvPmtGenJournalLine),
        ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(AdvPmtGenJournalLine2),1,LastTransactionNo);
    END;

    [Test]
    PROCEDURE Unapply2ApplyInvAdvRefToAdvPmt@1500071();
    VAR
      AdvRefGenJournalLine@1500002 : Record 81;
      AdvPmtGenJournalLine@1500003 : Record 81;
      InvGenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      PartialFactor := GetPartialFactor;

      PostAdvPmt(AdvPmtGenJournalLine);
      PostAdvRefForAdvPmt(AdvPmtGenJournalLine,AdvRefGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,AdvRefGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,1);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);

      ReverseServiceTaxHelper.UnapplyTwice(AdvPmtGenJournalLine."Document No.");

      VerifyUnapply(InvGenJournalLine,ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(AdvPmtGenJournalLine),
        ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(AdvRefGenJournalLine),-1,LastTransactionNo);
    END;

    [Test]
    PROCEDURE ApplyBigInvToAdvPmtOffline@1500017();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      PartialFactor := 1 + GetPartialFactor;
      AdvPmtGenJournalLine.Amount := LibraryRandom.RandDec(10000,2);

      PostAdvPmt(AdvPmtGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);

      VerifyPartialApplication(AdvPmtGenJournalLine,InvGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE UnapplyApplyBigInvToAdvPmtOff@1500059();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      PartialFactor := 1 + GetPartialFactor;
      AdvPmtGenJournalLine.Amount := LibraryRandom.RandDec(10000,2);

      PostAdvPmt(AdvPmtGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);
      ApplyAfterUnapply(AdvPmtGenJournalLine,InvGenJournalLine);

      VerifyPartialApplication(AdvPmtGenJournalLine,InvGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE ApplyBigInvToAdvPmtAndPmtOff@1500015();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500000 : Record 81;
      PmtGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      PartialFactor := 1 + GetPartialFactor;
      AdvPmtGenJournalLine.Amount := LibraryRandom.RandDec(10000,2);

      PostAdvPmt(AdvPmtGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);
      PostRemainingPmt(AdvPmtGenJournalLine,InvGenJournalLine,PmtGenJournalLine);
      ApplyOffline(PmtGenJournalLine,InvGenJournalLine);

      VerifyApplication(InvGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE UnappApplyBigInvToAdvPmtAndPmt@1500061();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500000 : Record 81;
      PmtGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      PartialFactor := 1 + GetPartialFactor;
      AdvPmtGenJournalLine.Amount := LibraryRandom.RandDec(10000,2);

      PostAdvPmt(AdvPmtGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);
      PostRemainingPmt(AdvPmtGenJournalLine,InvGenJournalLine,PmtGenJournalLine);
      ApplyOffline(PmtGenJournalLine,InvGenJournalLine);
      ApplyAfterUnapply(PmtGenJournalLine,InvGenJournalLine);

      VerifyApplication(InvGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE ApplyInvTo2AdvPmtOffline@1500033();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      AdvPmtGenJournalLine2@1500003 : Record 81;
      InvGenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      PartialFactor := 1 + GetPartialFactor;
      AdvPmtGenJournalLine.Amount := LibraryRandom.RandDec(10000,2);

      PostAdvPmt(AdvPmtGenJournalLine);
      PostAdvPmtWithSameSetup(AdvPmtGenJournalLine,AdvPmtGenJournalLine2,PartialFactor);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);
      ApplyOffline(AdvPmtGenJournalLine2,InvGenJournalLine);

      VerifyApplication(InvGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE UnapplyApplyInvTo2AdvPmtOff@1500064();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      AdvPmtGenJournalLine2@1500003 : Record 81;
      InvGenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      PartialFactor := 1 + GetPartialFactor;
      AdvPmtGenJournalLine.Amount := LibraryRandom.RandDec(10000,2);

      PostAdvPmt(AdvPmtGenJournalLine);
      PostAdvPmtWithSameSetup(AdvPmtGenJournalLine,AdvPmtGenJournalLine2,PartialFactor);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);
      ApplyAfterUnapply(AdvPmtGenJournalLine,InvGenJournalLine);
      ApplyOffline(AdvPmtGenJournalLine2,InvGenJournalLine);

      VerifyApplication(InvGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE ApplyRefundToAdvPmtOffline@1500009();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      AdvRefGenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500012 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvPmt(AdvPmtGenJournalLine);
      PostAdvRefForAdvPmt(AdvPmtGenJournalLine,AdvRefGenJournalLine,1);
      ApplyOffline(AdvPmtGenJournalLine,AdvRefGenJournalLine);

      VerifyCancelation(AdvPmtGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE UnapplyApplyRefundToAdvPmtOff@1500065();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      AdvRefGenJournalLine@1500000 : Record 81;
      LastTransactionNo@1500012 : Integer;
    BEGIN
      LastTransactionNo := Initialize;

      PostAdvPmt(AdvPmtGenJournalLine);
      PostAdvRefForAdvPmt(AdvPmtGenJournalLine,AdvRefGenJournalLine,1);
      ApplyOffline(AdvPmtGenJournalLine,AdvRefGenJournalLine);
      ApplyAfterUnapply(AdvPmtGenJournalLine,AdvRefGenJournalLine);

      VerifyCancelation(AdvPmtGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE ApplyRefundAndInvToAdvPmtOff@1500016();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      AdvRefGenJournalLine@1500000 : Record 81;
      InvGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      PartialFactor := GetPartialFactor;

      PostAdvPmt(AdvPmtGenJournalLine);
      PostAdvRefForAdvPmt(AdvPmtGenJournalLine,AdvRefGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,AdvRefGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,1);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);

      VerifyApplication(InvGenJournalLine,LastTransactionNo);
    END;

    [Test]
    PROCEDURE ApplyRefAndUnappInvToAdvPmtOff@1500067();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      AdvRefGenJournalLine@1500000 : Record 81;
      InvGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      PartialFactor := GetPartialFactor;

      PostAdvPmt(AdvPmtGenJournalLine);
      PostAdvRefForAdvPmt(AdvPmtGenJournalLine,AdvRefGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,AdvRefGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,1);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);
      ApplyAfterUnapply(AdvPmtGenJournalLine,InvGenJournalLine);

      VerifyApplication(InvGenJournalLine,LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PayToGovAdvPmtInvInward@1500006();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;

      PostAdvPmt(AdvPmtGenJournalLine);
      PostInvoice(AdvPmtGenJournalLine,InvGenJournalLine);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);

      PayServiceTax(AdvPmtGenJournalLine);

      VerifyPayToGov(AdvPmtGenJournalLine,LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PayToGovAdvPmtInvOutward@1500039();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;

      PostAdvPmtOutward(AdvPmtGenJournalLine);
      PostInvoice(AdvPmtGenJournalLine,InvGenJournalLine);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);

      PayServiceTax(AdvPmtGenJournalLine);

      VerifyPayToGov(AdvPmtGenJournalLine,LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PayToGovAdvPmt2InvInward@1500023();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      PartialFactor := GetPartialFactor;

      PostAdvPmt(AdvPmtGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,1);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);

      PayServiceTax(AdvPmtGenJournalLine);

      VerifyPayToGov(AdvPmtGenJournalLine,LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PayToGov2AdvPmtInvInward@1500027();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      AdvPmtGenJournalLine2@1500000 : Record 81;
      InvGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      PartialFactor := 1 + GetPartialFactor;
      AdvPmtGenJournalLine.Amount := LibraryRandom.RandDec(10000,2);

      PostAdvPmt(AdvPmtGenJournalLine);
      PostAdvPmtWithSameSetup(AdvPmtGenJournalLine,AdvPmtGenJournalLine2,PartialFactor);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);
      ApplyOffline(AdvPmtGenJournalLine2,InvGenJournalLine);

      PayServiceTax(InvGenJournalLine);

      VerifyPayToGov(InvGenJournalLine,LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PayToGovAdvPmtBigInvInward@1500043();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
      PayToGovDocNo@1500000 : Code[20];
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      PartialFactor := 1 + GetPartialFactor;
      AdvPmtGenJournalLine.Amount := LibraryRandom.RandDec(10000,2);

      PostAdvPmt(AdvPmtGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);

      PayToGovDocNo := PayServiceTax(AdvPmtGenJournalLine);

      VerifyPayToGovPartial(AdvPmtGenJournalLine,InvGenJournalLine,PayToGovDocNo,LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PayToGovAdvPmtSmallInvInward@1500042();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
      PayToGovDocNo@1500000 : Code[20];
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      PartialFactor := GetPartialFactor;

      PostAdvPmt(AdvPmtGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);

      PayToGovDocNo := PayServiceTax(AdvPmtGenJournalLine);

      VerifyPayToGovPartial(AdvPmtGenJournalLine,InvGenJournalLine,PayToGovDocNo,LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE PayToGovAdvPmtAdvRefInvInward@1500045();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      AdvRefGenJournalLine@1500000 : Record 81;
      InvGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      PartialFactor := GetPartialFactor;

      PostAdvPmt(AdvPmtGenJournalLine);
      PostAdvRefForAdvPmt(AdvPmtGenJournalLine,AdvRefGenJournalLine,PartialFactor);
      ApplyOffline(AdvPmtGenJournalLine,AdvRefGenJournalLine);
      PostPartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,1);
      ApplyOffline(AdvPmtGenJournalLine,InvGenJournalLine);

      PayServiceTax(AdvPmtGenJournalLine);

      VerifyPayToGov(InvGenJournalLine,LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE TakeSalesCrAdvPmtInvInward@1500029();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;

      PostAdvPmt(AdvPmtGenJournalLine);
      PostInvoiceWithOnlineApp(AdvPmtGenJournalLine,InvGenJournalLine);
      PayServiceTax(AdvPmtGenJournalLine);

      PostSalesInvAndTakeCredit(InvGenJournalLine,-InvGenJournalLine.Amount);

      VerifyTakeSalesCredit(InvGenJournalLine,LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE TakeSalesCrAdvPmtAdvRefInvInw@1500030();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      AdvRefGenJournalLine@1500000 : Record 81;
      InvGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      PartialFactor := GetPartialFactor;

      PostAdvPmt(AdvPmtGenJournalLine);
      PostAdvRefForAdvPmtWithOnlApp(AdvPmtGenJournalLine,AdvRefGenJournalLine,PartialFactor);
      PostPartialInvoiceWithOnlApp(AdvPmtGenJournalLine,InvGenJournalLine,1);
      PayServiceTax(AdvPmtGenJournalLine);

      PostSalesInvAndTakeCredit(InvGenJournalLine,-InvGenJournalLine.Amount + 1);
      // +1 to make sure Sales Doc amount is bigger than available credit after two partial applications

      VerifyTakeSalesCredit(InvGenJournalLine,LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE TakeSCrAdvPmtBigInvBigSales@1500031();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
      PayToGovDocNo@1500000 : Code[20];
      SalesInvoiceAmt@1500004 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      PartialFactor := 1 + GetPartialFactor;
      AdvPmtGenJournalLine.Amount := LibraryRandom.RandDec(10000,2);

      PostAdvPmtPartialInvoicePayToG(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);

      SalesInvoiceAmt := -InvGenJournalLine.Amount;
      PayToGovDocNo := PostSalesInvAndTakeCredit(InvGenJournalLine,SalesInvoiceAmt);

      VerifyPartialTakeSalesCredit(AdvPmtGenJournalLine,InvGenJournalLine,SalesInvoiceAmt,PayToGovDocNo,LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE TakeSCrAdvPmtBigInvSmallSales@1500037();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
      PayToGovDocNo@1500000 : Code[20];
      SalesInvoiceAmt@1500004 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      PartialFactor := 1 + GetPartialFactor;
      AdvPmtGenJournalLine.Amount := LibraryRandom.RandDec(10000,2);

      PostAdvPmtPartialInvoicePayToG(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);

      SalesInvoiceAmt := AdvPmtGenJournalLine.Amount;
      PayToGovDocNo := PostSalesInvAndTakeCredit(InvGenJournalLine,SalesInvoiceAmt);

      VerifyPartialTakeSalesCredit(AdvPmtGenJournalLine,InvGenJournalLine,SalesInvoiceAmt,PayToGovDocNo,LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE TakeSCAdvPmtSmallInvBigSales@1500035();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
      PayToGovDocNo@1500000 : Code[20];
      SalesInvoiceAmt@1500004 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      PartialFactor := GetPartialFactor;

      PostAdvPmtPartialInvoicePayToG(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);

      SalesInvoiceAmt := ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(AdvPmtGenJournalLine);
      PayToGovDocNo := PostSalesInvAndTakeCredit(AdvPmtGenJournalLine,SalesInvoiceAmt);

      VerifyPartialTakeSalesCredit(AdvPmtGenJournalLine,InvGenJournalLine,SalesInvoiceAmt,PayToGovDocNo,LastTransactionNo);
    END;

    [Test]
    [HandlerFunctions(PayServiceTaxHandler,MessageHandler)]
    PROCEDURE TakeSCAdvPmtSmallInvSmallSales@1500038();
    VAR
      AdvPmtGenJournalLine@1500002 : Record 81;
      InvGenJournalLine@1500003 : Record 81;
      LastTransactionNo@1500012 : Integer;
      PartialFactor@1500001 : Decimal;
      PayToGovDocNo@1500000 : Code[20];
      SalesInvoiceAmt@1500004 : Decimal;
    BEGIN
      LastTransactionNo := Initialize;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      PartialFactor := GetPartialFactor;

      PostAdvPmtPartialInvoicePayToG(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);

      SalesInvoiceAmt := -InvGenJournalLine.Amount;
      PayToGovDocNo := PostSalesInvAndTakeCredit(AdvPmtGenJournalLine,SalesInvoiceAmt);

      VerifyPartialTakeSalesCredit(AdvPmtGenJournalLine,InvGenJournalLine,SalesInvoiceAmt,PayToGovDocNo,LastTransactionNo);
    END;

    LOCAL PROCEDURE Initialize@1500100() : Integer;
    BEGIN
      LibraryRandom.SetSeed(1);

      IF isInitialized THEN
        EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);

      LibraryServiceTax.CreateServiceTaxReturnPeriod;
      ReverseServiceTaxHelper.SetupCompanyInfo;
      COMMIT;
      isInitialized := TRUE;

      EXIT(ReverseServiceTaxHelper.GetLastTransactionNo);
    END;

    LOCAL PROCEDURE ApplyAfterUnapply@1500048(PmtGenJournalLine@1500001 : Record 81;InvGenJournalLine@1500000 : Record 81);
    BEGIN
      ReverseServiceTaxHelper.UnapplyVendorLedgerEntry(InvGenJournalLine."Document No.");
      ApplyOffline(PmtGenJournalLine,InvGenJournalLine);
    END;

    LOCAL PROCEDURE ApplyOffline@1500013(GenJournalLine1@1500000 : Record 81;GenJournalLine2@1500001 : Record 81);
    BEGIN
      ReverseServiceTaxHelper.ApplyAndPostVendorEntry(GenJournalLine1."Document Type",GenJournalLine1."Document No.",
        GenJournalLine2."Document Type",GenJournalLine2."Document No.");
    END;

    LOCAL PROCEDURE CreateAdvPmt@1500054(AdvPmtGenJournalLine@1500000 : Record 81;VAR AdvPmtGenJournalLine2@1500001 : Record 81;DocumentType@1500005 : Option;AdvPmtAmt@1500003 : Decimal);
    VAR
      GenJournalBatch@1500002 : Record 232;
    BEGIN
      ReverseServiceTaxHelper.CreateGenJournalBatch(GenJournalBatch);
      WITH AdvPmtGenJournalLine DO BEGIN
        ReverseServiceTaxHelper.CreateJnlLineWithSTNoSetup(AdvPmtGenJournalLine2,GenJournalBatch,DocumentType,
          "Service Type (Rev. Chrg.)","Account No.",AdvPmtAmt,
          "Posting Date","Service Tax Registration No.","Service Tax Group Code");
        AdvPmtGenJournalLine2.VALIDATE(PoT,TRUE);
        AdvPmtGenJournalLine2.VALIDATE("Serv. Tax on Advance Payment",TRUE);
      END;
      AdvPmtGenJournalLine2.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateInvoice@1500005(AdvPmtGenJournalLine@1500000 : Record 81;VAR InvGenJournalLine@1500001 : Record 81);
    BEGIN
      CreatePartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,1);
    END;

    LOCAL PROCEDURE CreatePartialInvoice@1500021(AdvPmtGenJournalLine@1500000 : Record 81;VAR InvGenJournalLine@1500001 : Record 81;PartialFactor@1500003 : Decimal);
    VAR
      GenJournalBatch@1500002 : Record 232;
      InvoiceAmount@1500004 : Decimal;
    BEGIN
      InvoiceAmount := GetBaseRemAmountFromAdvPmt(AdvPmtGenJournalLine);
      IF PartialFactor <> 1 THEN
        InvoiceAmount := ReverseServiceTaxHelper.RoundServTax(InvoiceAmount * PartialFactor);

      ReverseServiceTaxHelper.CreateGenJournalBatch(GenJournalBatch);
      WITH AdvPmtGenJournalLine DO
        ReverseServiceTaxHelper.CreateJnlLineWithSTNoSetup(
          InvGenJournalLine,GenJournalBatch,"Document Type"::Invoice,"Service Type (Rev. Chrg.)",
          "Account No.",-InvoiceAmount,"Posting Date",
          "Service Tax Registration No.","Service Tax Group Code");
      InvGenJournalLine.VALIDATE(PoT,TRUE);
      InvGenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FillExpectedAmntsAdvPmt@1500018(VAR ExpectedServTaxEntryDetails@1500000 : Record 16474;AdvPmtBaseAmount@1500002 : Decimal;InvBaseAmount@1500001 : Decimal;GenJournalLine@1500009 : Record 81;PaidToGov@1500003 : Boolean);
    VAR
      ServiceTaxSetup@1500007 : Record 16472;
      SplitBaseAmount@1500006 : Decimal;
      PoTServTaxAmount@1500005 : ARRAY [5] OF Decimal;
      RevChrgServTaxAmount@1500012 : ARRAY [5] OF Decimal;
      Percentage@1500008 : Integer;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",
        GenJournalLine."Posting Date");
      Percentage := ReverseServiceTaxHelper.GetRevChrgPercent(GenJournalLine);
      ServiceTaxVerify.CalcServTaxEntryAmounts(InvBaseAmount,
        Percentage,ServiceTaxSetup,SplitBaseAmount,PoTServTaxAmount,FALSE);
      ServiceTaxVerify.CalcServTaxEntryAmounts(AdvPmtBaseAmount,
        Percentage,ServiceTaxSetup,SplitBaseAmount,RevChrgServTaxAmount,TRUE);

      WITH ExpectedServTaxEntryDetails DO BEGIN
        "Service Tax Amount" := PoTServTaxAmount[1] + RevChrgServTaxAmount[1];
        "Service Tax eCess Amount" := PoTServTaxAmount[2] + RevChrgServTaxAmount[2];
        "Service Tax SHE Cess Amount" := PoTServTaxAmount[3] + RevChrgServTaxAmount[3];
        "Service Tax SBC Amount" := PoTServTaxAmount[4] + RevChrgServTaxAmount[4];
        "KK Cess Amount" := PoTServTaxAmount[5] + RevChrgServTaxAmount[5];
        "Remaining Credit" := PoTServTaxAmount[1];
        "Remaining Credit (eCess)" := PoTServTaxAmount[2];
        "Remaining Credit (SHECess)" := PoTServTaxAmount[3];
        "Remaining Credit (KK Cess)" := PoTServTaxAmount[5];
        "Rev. Chrg. Remaining Credit" := RevChrgServTaxAmount[1];
        "Rev. Chrg. Rem. Credit (eCESS)" := RevChrgServTaxAmount[2];
        "Rev. Chrg. Rem. Cr. (SHECess)" := RevChrgServTaxAmount[3];
        "Rev. Chrg. Rem. Credit (KKC)" := RevChrgServTaxAmount[5];
        IF PaidToGov THEN BEGIN
          "Remaining Credit" += "Rev. Chrg. Remaining Credit";
          "Remaining Credit (eCess)" += "Rev. Chrg. Rem. Credit (eCESS)";
          "Remaining Credit (SHECess)" += "Rev. Chrg. Rem. Cr. (SHECess)";
          "Remaining Credit (KK Cess)" += "Rev. Chrg. Rem. Credit (KKC)";
          "Rev. Chrg. Remaining Credit" -= "Rev. Chrg. Remaining Credit";
          "Rev. Chrg. Rem. Credit (eCESS)" -= "Rev. Chrg. Rem. Credit (eCESS)";
          "Rev. Chrg. Rem. Cr. (SHECess)" -= "Rev. Chrg. Rem. Cr. (SHECess)";
          "Rev. Chrg. Rem. Credit (KKC)" -= "Rev. Chrg. Rem. Credit (KKC)";
        END;
      END;
    END;

    LOCAL PROCEDURE GetBaseRemAmountFromAdvPmt@1500028(GenJournalLine@1500000 : Record 81) : Decimal;
    VAR
      ServiceTaxSetup@1500001 : Record 16472;
      RemainingAmt@1500002 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",
        GenJournalLine."Posting Date");
      RemainingAmt :=
        ReverseServiceTaxHelper.GetRemainingAmount(GenJournalLine."Document Type",GenJournalLine."Document No.");
      EXIT(ReverseServiceTaxHelper.GetBaseAmountFromAdvPayment(RemainingAmt,
          ReverseServiceTaxHelper.GetRevChrgPercent(GenJournalLine),ReverseChargeTypeOption::" ",ServiceTaxSetup));
    END;

    LOCAL PROCEDURE GetPartialFactor@1500074() : Decimal;
    BEGIN
      EXIT(LibraryRandom.RandDec(1,1));
    END;

    LOCAL PROCEDURE PayServiceTax@1500026(GenJournalLine@1500001 : Record 81) : Code[20];
    BEGIN
      EXIT(ReverseServiceTaxHelper.PayServiceTax(
          GenJournalLine."Service Tax Registration No.",GenJournalLine."Service Tax Group Code",TRUE));
    END;

    LOCAL PROCEDURE PostAdvPmt@1500002(VAR GenJournalLine@1500001 : Record 81);
    VAR
      Percentage@1500000 : Integer;
    BEGIN
      Percentage := LibraryRandom.RandIntInRange(10,90);
      ReverseServiceTaxHelper.CreateAndPostAdvancePayment(
        GenJournalLine,TRUE,GenJournalLine."Service Type (Rev. Chrg.)"::Inward,
        ReverseChargeTypeOption::Standard,Percentage);
    END;

    LOCAL PROCEDURE PostAdvPmtPartialInvoicePayToG@1500052(VAR AdvPmtGenJournalLine@1500000 : Record 81;VAR InvGenJournalLine@1500001 : Record 81;PartialFactor@1500002 : Decimal);
    BEGIN
      PostAdvPmt(AdvPmtGenJournalLine);
      PostPartialInvoiceWithOnlApp(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      PayServiceTax(AdvPmtGenJournalLine);
    END;

    LOCAL PROCEDURE PostAdvPmtOutward@1500040(VAR GenJournalLine@1500001 : Record 81);
    VAR
      Percentage@1500000 : Integer;
    BEGIN
      Percentage := LibraryRandom.RandIntInRange(10,90);
      ReverseServiceTaxHelper.CreateAndPostAdvancePayment(
        GenJournalLine,TRUE,GenJournalLine."Service Type (Rev. Chrg.)"::Outward,
        ReverseChargeTypeOption::Standard,Percentage);
    END;

    LOCAL PROCEDURE PostAdvPmtWithSameSetup@1500036(AdvPmtGenJournalLine@1500000 : Record 81;VAR AdvPmtGenJournalLine2@1500001 : Record 81;PartialFactor@1500003 : Decimal);
    VAR
      AdvPmtAmount@1500004 : Decimal;
    BEGIN
      AdvPmtAmount := ReverseServiceTaxHelper.RoundAmount(AdvPmtGenJournalLine.Amount * PartialFactor) - AdvPmtGenJournalLine.Amount;
      CreateAdvPmt(AdvPmtGenJournalLine,AdvPmtGenJournalLine2,AdvPmtGenJournalLine."Document Type"::Payment,AdvPmtAmount);
      LibraryERM.PostGeneralJnlLine(AdvPmtGenJournalLine2);
    END;

    LOCAL PROCEDURE PostAdvRefForAdvPmt@1500046(AdvPmtGenJournalLine@1500000 : Record 81;VAR AdvRefGenJournalLine@1500001 : Record 81;PartialFactor@1500003 : Decimal);
    VAR
      AdvRefAmount@1500002 : Decimal;
    BEGIN
      AdvRefAmount := ReverseServiceTaxHelper.RoundServTax((-AdvPmtGenJournalLine.Amount * PartialFactor));
      CreateAdvPmt(AdvPmtGenJournalLine,AdvRefGenJournalLine,AdvPmtGenJournalLine."Document Type"::Refund,AdvRefAmount);
      LibraryERM.PostGeneralJnlLine(AdvRefGenJournalLine);
    END;

    LOCAL PROCEDURE PostAdvRefForAdvPmtWithOnlApp@1500060(AdvPmtGenJournalLine@1500000 : Record 81;VAR AdvRefGenJournalLine@1500001 : Record 81;PartialFactor@1500003 : Decimal);
    VAR
      AdvRefAmount@1500002 : Decimal;
    BEGIN
      AdvRefAmount := ReverseServiceTaxHelper.RoundServTax((-AdvPmtGenJournalLine.Amount * PartialFactor));
      CreateAdvPmt(AdvPmtGenJournalLine,AdvRefGenJournalLine,AdvPmtGenJournalLine."Document Type"::Refund,AdvRefAmount);
      PostWithOnlineApp(AdvRefGenJournalLine,AdvPmtGenJournalLine);
    END;

    LOCAL PROCEDURE PostAdvRefund@1500062(VAR GenJournalLine@1500001 : Record 81);
    VAR
      Percentage@1500000 : Integer;
    BEGIN
      Percentage := LibraryRandom.RandIntInRange(10,90);
      GenJournalLine."Document Type" := GenJournalLine."Document Type"::Refund;
      ReverseServiceTaxHelper.CreateAndPostAdvancePayment(
        GenJournalLine,TRUE,GenJournalLine."Service Type (Rev. Chrg.)"::Inward,
        ReverseChargeTypeOption::Standard,Percentage);
    END;

    LOCAL PROCEDURE PostInvoice@1500008(AdvPmtGenJournalLine@1500000 : Record 81;VAR InvGenJournalLine@1500001 : Record 81);
    BEGIN
      CreateInvoice(AdvPmtGenJournalLine,InvGenJournalLine);
      LibraryERM.PostGeneralJnlLine(InvGenJournalLine);
    END;

    LOCAL PROCEDURE PostInvoiceWithOnlineApp@1500044(AdvPmtGenJournalLine@1500000 : Record 81;VAR InvGenJournalLine@1500001 : Record 81);
    BEGIN
      CreateInvoice(AdvPmtGenJournalLine,InvGenJournalLine);
      PostWithOnlineApp(InvGenJournalLine,AdvPmtGenJournalLine);
    END;

    LOCAL PROCEDURE PostSalesInvAndTakeCredit@1500050(GenJournalLine@1500001 : Record 81;BaseAmount@1500000 : Decimal) PostedSalesInvoiceDocNo : Code[20];
    VAR
      ServiceTaxEntryDetails@1500002 : Record 16474;
    BEGIN
      ServiceTaxEntryDetails."Base Amount" := BaseAmount;
      ServiceTaxEntryDetails."Posting Date" := GenJournalLine."Posting Date";
      ServiceTaxEntryDetails."Service Tax Group Code" := GenJournalLine."Service Tax Group Code";
      ServiceTaxEntryDetails."Service Tax Registration No." := GenJournalLine."Service Tax Registration No.";

      PostedSalesInvoiceDocNo := ReverseServiceTaxHelper.PostEqualAmountSalesDoc(ServiceTaxEntryDetails);
      EXIT(ReverseServiceTaxHelper.PayServiceTax(
          ServiceTaxEntryDetails."Service Tax Registration No.",ServiceTaxEntryDetails."Service Tax Group Code",FALSE));
    END;

    LOCAL PROCEDURE PostPartialInvoice@1500025(AdvPmtGenJournalLine@1500000 : Record 81;VAR InvGenJournalLine@1500001 : Record 81;PartialFactor@1500002 : Decimal);
    BEGIN
      CreatePartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      LibraryERM.PostGeneralJnlLine(InvGenJournalLine);
    END;

    LOCAL PROCEDURE PostPartialInvoiceWithOnlApp@1500051(AdvPmtGenJournalLine@1500000 : Record 81;VAR InvGenJournalLine@1500001 : Record 81;PartialFactor@1500002 : Decimal);
    BEGIN
      CreatePartialInvoice(AdvPmtGenJournalLine,InvGenJournalLine,PartialFactor);
      PostWithOnlineApp(InvGenJournalLine,AdvPmtGenJournalLine);
    END;

    LOCAL PROCEDURE PostRemainingPmt@1500034(AdvPmtGenJournalLine@1500001 : Record 81;InvGenJournalLine@1500000 : Record 81;VAR PmtGenJournalLine@1500003 : Record 81);
    VAR
      ServiceTaxSetup@1500002 : Record 16472;
      PaymentAmt@1500004 : Decimal;
    BEGIN
      WITH InvGenJournalLine DO BEGIN
        ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date");
        PaymentAmt := -ReverseServiceTaxHelper.GetRemainingAmount("Document Type","Document No.");
        PmtGenJournalLine."Document No." :=
          ReverseServiceTaxHelper.PostPayment(
            AdvPmtGenJournalLine."Account No.",PaymentAmt,"Posting Date","Document Type"::Payment);
        PmtGenJournalLine."Document Type" := "Document Type"::Payment;
      END;
    END;

    LOCAL PROCEDURE PostWithOnlineApp@1500047(GenJournalLine@1500000 : Record 81;GenJournalLine2@1500001 : Record 81);
    BEGIN
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine2."Document Type");
      GenJournalLine.VALIDATE("Applies-to Doc. No.",GenJournalLine2."Document No.");
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE VerifyAdvPmt@1500003(GenJournalLine@1500000 : Record 81;LastTransactionNo@1500006 : Integer);
    VAR
      ServiceTaxSetup@1500004 : Record 16472;
      BaseAmount@1500003 : Decimal;
      PoTAmount@1500002 : Decimal;
      RevChrgAmount@1500001 : Decimal;
      Percentage@1500005 : Integer;
      PotSBCandKKC@1500007 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",GenJournalLine."Posting Date");
      ReverseServiceTaxHelper.CalcSplitAmounts(GenJournalLine,BaseAmount,PoTAmount,RevChrgAmount,Percentage,ServiceTaxSetup);
      PotSBCandKKC := ReverseServiceTaxHelper.CalculatePoTSBCandKKCAmount(BaseAmount,(100 - Percentage) / 100,ServiceTaxSetup);

      ServiceTaxVerify.STPayInterimAccBalance(ServiceTaxSetup,0);
      ServiceTaxVerify.STRecInterimAccBalance(ServiceTaxSetup,(RevChrgAmount + PotSBCandKKC) - (PoTAmount - PotSBCandKKC));
      ServiceTaxVerify.STPayAccBalance(ServiceTaxSetup,-RevChrgAmount - PotSBCandKKC);
      ServiceTaxVerify.STRecAccBalance(ServiceTaxSetup,PoTAmount - PotSBCandKKC);

      ServiceTaxVerify.GLEntry(GenJournalLine."Document No.",
        ReverseServiceTaxHelper.GetVendorPostingAccount(GenJournalLine."Account No."),GenJournalLine.Amount);
      ServiceTaxVerify.GLEntry(GenJournalLine."Document No.",
        ReverseServiceTaxHelper.GetBankAccGLPostingAcc(GenJournalLine."Bal. Account No."),-GenJournalLine.Amount);

      VerifySTEntriesAdvPmt(LastTransactionNo,GenJournalLine,BaseAmount,FALSE);
    END;

    LOCAL PROCEDURE VerifyApplication@1500007(AdvPmtGenJournalLine@1500000 : Record 81;LastTransactionNo@1500006 : Integer);
    VAR
      ServiceTaxSetup@1500004 : Record 16472;
      BaseAmount@1500003 : Decimal;
      PoTAmount@1500002 : Decimal;
      RevChrgAmount@1500001 : Decimal;
      Percentage@1500005 : Integer;
    BEGIN
      ServiceTaxSetup.FindOnDate(AdvPmtGenJournalLine."Service Tax Group Code",
        AdvPmtGenJournalLine."Posting Date");
      ReverseServiceTaxHelper.CalcSplitAmounts(AdvPmtGenJournalLine,BaseAmount,PoTAmount,RevChrgAmount,Percentage,ServiceTaxSetup);

      ServiceTaxVerify.STEntriesVsGLBalCrMPmt(LastTransactionNo);

      VerifySTEntriesAdvPmt(LastTransactionNo,AdvPmtGenJournalLine,BaseAmount,FALSE);
    END;

    LOCAL PROCEDURE VerifyCancelation@1500014(AdvPmtGenJournalLine@1500000 : Record 81;LastTransactionNo@1500006 : Integer);
    VAR
      ServiceTaxSetup@1500004 : Record 16472;
    BEGIN
      ServiceTaxSetup.FindOnDate(
        AdvPmtGenJournalLine."Service Tax Group Code",AdvPmtGenJournalLine."Posting Date");
      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,0,0,0);

      ServiceTaxVerify.STEntriesCanceledDocument(LastTransactionNo);
    END;

    LOCAL PROCEDURE VerifyGLEntriesPayToGovUseCred@1500063(PaidAmount@1500005 : Decimal;CreditedAmount@1500002 : Decimal;PostedPaymentDocNo@1500000 : Code[20];ServiceTaxSetup@1500001 : Record 16472);
    BEGIN
      ServiceTaxVerify.GLEntryWithRounding(
        PostedPaymentDocNo,ReverseServiceTaxHelper.GetServTaxRecAcc(ServiceTaxSetup),-CreditedAmount);
      ServiceTaxVerify.GLEntryWithRounding(
        PostedPaymentDocNo,ReverseServiceTaxHelper.GetServTaxPayAcc(ServiceTaxSetup),PaidAmount);
    END;

    LOCAL PROCEDURE VerifyPayToGov@1500032(GenJournalLine@1500000 : Record 81;LastTransactionNo@1500006 : Integer);
    BEGIN
      IF GenJournalLine."Service Type (Rev. Chrg.)" = GenJournalLine."Service Type (Rev. Chrg.)"::Inward THEN
        ServiceTaxVerify.STEntriesVsGLBalCrMPmt(LastTransactionNo)
      ELSE
        ServiceTaxVerify.STEntriesVsGLBalCrMPmtOutward(LastTransactionNo);

      ServiceTaxVerify.STEntriesFullPurchFlow(LastTransactionNo,
        GenJournalLine,ReverseServiceTaxHelper.GetBaseAmountFromGenJnlLine(GenJournalLine),ReverseChargeTypeOption::Standard);
    END;

    LOCAL PROCEDURE VerifyPayToGovPartial@1500055(AdvPmtGenJournalLine@1500003 : Record 81;InvGenJournalLine@1500008 : Record 81;PayToGovDocNo@1500002 : Code[20];LastTransactionNo@1500001 : Integer);
    VAR
      ServiceTaxSetup@1500004 : Record 16472;
      BaseAmount@1500007 : ARRAY [2] OF Decimal;
      PoTAmount@1500006 : ARRAY [2] OF Decimal;
      RevChrgAmount@1500005 : ARRAY [2] OF Decimal;
      Percentage@1500000 : Integer;
      SBCandKKCAmount@1500009 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(AdvPmtGenJournalLine."Service Tax Group Code",
        AdvPmtGenJournalLine."Posting Date");
      ReverseServiceTaxHelper.CalcSplitAmounts(AdvPmtGenJournalLine,BaseAmount[1],PoTAmount[1],RevChrgAmount[1],
        Percentage,ServiceTaxSetup);
      SBCandKKCAmount :=
        ReverseServiceTaxHelper.CalculatePoTSBCandKKCAmount(BaseAmount[1],(100 - Percentage) / 100,ServiceTaxSetup);
      ReverseServiceTaxHelper.CalcSplitAmounts(InvGenJournalLine,BaseAmount[2],PoTAmount[2],RevChrgAmount[2],
        Percentage,ServiceTaxSetup);
      ServiceTaxVerify.GLEntriesForSTPmtEntriesForAmt(RevChrgAmount[1] + SBCandKKCAmount ,ServiceTaxSetup,PayToGovDocNo,
        AdvPmtGenJournalLine."Service Type (Rev. Chrg.)");

      IF BaseAmount[1] > BaseAmount[2] THEN
        VerifySTEntriesAdvPmt(LastTransactionNo,AdvPmtGenJournalLine,BaseAmount[1],TRUE)
      ELSE
        VerifySTEntriesInvoicePartAppl(LastTransactionNo,InvGenJournalLine,BaseAmount[1],BaseAmount[2],TRUE);
    END;

    LOCAL PROCEDURE VerifyPartialApplication@1500011(AdvPmtGenJournalLine@1500000 : Record 81;InvGenJournalLine@1500007 : Record 81;LastTransactionNo@1500006 : Integer);
    VAR
      ServiceTaxSetup@1500004 : Record 16472;
      BaseAmount@1500003 : ARRAY [2] OF Decimal;
      PoTAmount@1500002 : ARRAY [2] OF Decimal;
      RevChrgAmount@1500001 : ARRAY [2] OF Decimal;
      Percentage@1500005 : Integer;
      ApplnRatio@1500008 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(AdvPmtGenJournalLine."Service Tax Group Code",
        AdvPmtGenJournalLine."Posting Date");
      ReverseServiceTaxHelper.CalcSplitAmountsKKC(AdvPmtGenJournalLine,BaseAmount[1],PoTAmount[1],RevChrgAmount[1],
        Percentage,ServiceTaxSetup);
      ReverseServiceTaxHelper.CalcSplitAmountsKKC(InvGenJournalLine,BaseAmount[2],PoTAmount[2],RevChrgAmount[2],
        Percentage,ServiceTaxSetup);
      ApplnRatio := (BaseAmount[1] + PoTAmount[1]) / (BaseAmount[2] + PoTAmount[2]);
      IF BaseAmount[1] > BaseAmount[2] THEN BEGIN
        ServiceTaxVerify.STPayInterimAccBalance(ServiceTaxSetup,0);
        ServiceTaxVerify.STRecInterimAccBalance(ServiceTaxSetup,RevChrgAmount[1] - PoTAmount[1] + PoTAmount[2]);
        ServiceTaxVerify.STPayAccBalance(ServiceTaxSetup,-RevChrgAmount[1]);
        ServiceTaxVerify.STRecAccBalance(ServiceTaxSetup,PoTAmount[1]);
        VerifySTEntriesAdvPmt(LastTransactionNo,AdvPmtGenJournalLine,BaseAmount[1],FALSE);
      END ELSE BEGIN
        ServiceTaxVerify.STPayInterimAccBalance(
          ServiceTaxSetup,ReverseServiceTaxHelper.RoundServTax((-RevChrgAmount[2] ) * (1 - ApplnRatio)));
        ServiceTaxVerify.STRecInterimAccBalance(
          ServiceTaxSetup,ReverseServiceTaxHelper.RoundServTax(RevChrgAmount[2] * (1 - ApplnRatio) + RevChrgAmount[1]));
        ServiceTaxVerify.STPayAccBalance(ServiceTaxSetup,-RevChrgAmount[1]);
        ServiceTaxVerify.STRecAccBalance(
          ServiceTaxSetup,ReverseServiceTaxHelper.RoundServTax(PoTAmount[2] * (1 - ApplnRatio) + PoTAmount[1]));
        VerifySTEntriesInvoicePartAppl(LastTransactionNo,InvGenJournalLine,BaseAmount[1],BaseAmount[2],FALSE);
      END;
    END;

    LOCAL PROCEDURE VerifySTEntriesInvoicePartAppl@1500010(LastTransactionNo@1500000 : Integer;GenJnlLine@1500001 : Record 81;AdvPmtBaseAmount@1500002 : Decimal;InvBaseAmount@1500004 : Decimal;PaidToGov@1500005 : Boolean);
    VAR
      ExpectedServTaxEntry@1500006 : Record 16473;
      ExpectedServTaxEntryDetails@1500003 : Record 16474;
    BEGIN
      ReverseServiceTaxHelper.FillExpectedAmntsSTEntry(GenJnlLine,InvBaseAmount,ExpectedServTaxEntry);

      ServiceTaxVerify.STEntryBalances(LastTransactionNo,ExpectedServTaxEntry);

      FillExpectedAmntsAdvPmt(ExpectedServTaxEntryDetails,AdvPmtBaseAmount,InvBaseAmount,GenJnlLine,PaidToGov);

      ServiceTaxVerify.STEntryDtlsBalancesAndStatuses(LastTransactionNo,ExpectedServTaxEntryDetails);
    END;

    LOCAL PROCEDURE VerifySTEntriesAdvPmt@1500020(LastTransactionNo@1500000 : Integer;GenJnlLine@1500001 : Record 81;BaseAmount@1500002 : Decimal;PaidToGov@1500004 : Boolean);
    VAR
      ExpectedServTaxEntry@1500006 : Record 16473;
      ExpectedServTaxEntryDetails@1500003 : Record 16474;
    BEGIN
      ReverseServiceTaxHelper.FillExpectedAmntsSTEntry(GenJnlLine,BaseAmount,ExpectedServTaxEntry);

      ServiceTaxVerify.STEntryBalances(LastTransactionNo,ExpectedServTaxEntry);

      FillExpectedAmntsAdvPmt(ExpectedServTaxEntryDetails,BaseAmount,BaseAmount,GenJnlLine,PaidToGov);

      ServiceTaxVerify.STEntryDtlsBalancesAndStatuses(LastTransactionNo,ExpectedServTaxEntryDetails);
    END;

    LOCAL PROCEDURE VerifyPartialTakeSalesCredit@1500056(AdvPmtGenJournalLine@1500000 : Record 81;InvGenJournalLine@1500007 : Record 81;SalesBaseAmount@1500009 : Decimal;PayToGovDocNo@1500010 : Code[20];LastTransactionNo@1500006 : Integer);
    VAR
      ServiceTaxSetup@1500004 : Record 16472;
      BaseAmount@1500003 : ARRAY [2] OF Decimal;
      PoTAmount@1500002 : ARRAY [2] OF Decimal;
      RevChrgAmount@1500001 : ARRAY [2] OF Decimal;
      Percentage@1500005 : Integer;
      PaidAmount@1500011 : Decimal;
      CreditedAmount@1500012 : Decimal;
      RemainingAmount@1500013 : Decimal;
    BEGIN
      ServiceTaxSetup.FindOnDate(AdvPmtGenJournalLine."Service Tax Group Code",
        AdvPmtGenJournalLine."Posting Date");
      ReverseServiceTaxHelper.CalcSplitAmountsKKC(AdvPmtGenJournalLine,BaseAmount[1],PoTAmount[1],RevChrgAmount[1],
        Percentage,ServiceTaxSetup);
      ReverseServiceTaxHelper.CalcSplitAmountsKKC(InvGenJournalLine,BaseAmount[2],PoTAmount[2],RevChrgAmount[2],
        Percentage,ServiceTaxSetup);

      PaidAmount := ReverseServiceTaxHelper.CalculateServTaxTotal(SalesBaseAmount,ServiceTaxSetup);
      CreditedAmount := PaidAmount;
      IF BaseAmount[1] > BaseAmount[2] THEN
        RemainingAmount := PoTAmount[1] + RevChrgAmount[1] - CreditedAmount
      ELSE BEGIN
        IF SalesBaseAmount >= BaseAmount[2] THEN
          CreditedAmount := RevChrgAmount[1] + PoTAmount[2];
        RemainingAmount := RevChrgAmount[1] + PoTAmount[2] - CreditedAmount;
      END;

      VerifyGLEntriesPayToGovUseCred(PaidAmount,CreditedAmount,PayToGovDocNo,ServiceTaxSetup);
      ServiceTaxVerify.STEntryDetailsRemainingCredit(LastTransactionNo,RemainingAmount);
    END;

    LOCAL PROCEDURE VerifyTakeSalesCredit@1500041(GenJournalLine@1500000 : Record 81;LastTransactionNo@1500006 : Integer);
    VAR
      ServiceTaxSetup@1500004 : Record 16472;
    BEGIN
      ServiceTaxSetup.FindOnDate(GenJournalLine."Service Tax Group Code",
        GenJournalLine."Posting Date");
      ServiceTaxVerify.ServTaxGLAccountsBalance(ServiceTaxSetup,0,0,0,0);
      ServiceTaxVerify.STEntriesAfterTakeSalesCredit(LastTransactionNo);
    END;

    LOCAL PROCEDURE VerifyUnapply@1500070(InvGenJnlLine@1500000 : Record 81;AppliedAmountBase1@1500007 : Decimal;AppliedAmountBase2@1500009 : Decimal;SecondDocSign@1500004 : Integer;LastTransactionNo@1500006 : Integer);
    VAR
      ServiceTaxSetup@1500008 : Record 16472;
      InvoiceBaseAmount@1500005 : Decimal;
      RevChrgAmount@1500003 : ARRAY [3] OF Decimal;
      PoTAmount@1500002 : ARRAY [3] OF Decimal;
      Percentage@1500001 : Integer;
    BEGIN
      ServiceTaxSetup.FindOnDate(InvGenJnlLine."Service Tax Group Code",InvGenJnlLine."Posting Date");
      ReverseServiceTaxHelper.CalcSplitAmountsKKC(
        InvGenJnlLine,InvoiceBaseAmount,PoTAmount[1],RevChrgAmount[1],Percentage,ServiceTaxSetup);

      InvGenJnlLine.Amount := AppliedAmountBase1;
      ReverseServiceTaxHelper.CalcSplitAmountsKKC(
        InvGenJnlLine,AppliedAmountBase1,PoTAmount[2],RevChrgAmount[2],Percentage,ServiceTaxSetup);
      InvGenJnlLine.Amount := AppliedAmountBase2;
      ReverseServiceTaxHelper.CalcSplitAmountsKKC(
        InvGenJnlLine,AppliedAmountBase2,PoTAmount[3],RevChrgAmount[3],Percentage,ServiceTaxSetup);
      PoTAmount[3] *= SecondDocSign;
      RevChrgAmount[3] *= SecondDocSign;

      ServiceTaxVerify.STPayInterimAccBalance(ServiceTaxSetup,-RevChrgAmount[1]);
      ServiceTaxVerify.STRecInterimAccBalance(ServiceTaxSetup,
        RevChrgAmount[1] - PoTAmount[2] - PoTAmount[3] + RevChrgAmount[2] + RevChrgAmount[3]);
      ServiceTaxVerify.STPayAccBalance(ServiceTaxSetup,-RevChrgAmount[2] - RevChrgAmount[3]);
      ServiceTaxVerify.STRecAccBalance(ServiceTaxSetup,PoTAmount[1] + PoTAmount[2] + PoTAmount[3]);

      ServiceTaxVerify.STEntryDetailsRemainingCredit(LastTransactionNo,PoTAmount[1] + PoTAmount[2] + PoTAmount[3]);
      ServiceTaxVerify.STEntryDetailsRemRevChrgCredit(LastTransactionNo,RevChrgAmount[2] + RevChrgAmount[3]);
    END;

    [ModalPageHandler]
    PROCEDURE PayServiceTaxHandler@1500073(VAR PayServiceTax@1500000 : TestPage 16477);
    BEGIN
      LibraryServiceTax.SetValuesForPaymentUseCreditAvailable(PayServiceTax);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500000(Message@1500000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

