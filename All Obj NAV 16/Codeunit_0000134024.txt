OBJECT Codeunit 134024 ERM Finance Payment Tolerance
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 21=rimd;
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibrarySales@1004 : Codeunit 130509;
      LibraryERM@1003 : Codeunit 131300;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryRandom@1001 : Codeunit 130440;
      LibrarySetupStorage@1008 : Codeunit 131009;
      OptionValue@1007 : Integer;
      isInitialized@1000 : Boolean;
      AmountError@1011 : TextConst 'ENU=%1 and %2 must be same.';
      ConfirmMessageForPayment@1006 : TextConst 'ENU=Do you want to change all open entries for every customer and vendor that are not blocked?';

    [Normal]
    LOCAL PROCEDURE Initialize@8();
    VAR
      SalesReceivablesSetup@1001 : Record 311;
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibrarySales.SetCreditWarningsToNoWarnings;
      LibrarySales.SetApplnBetweenCurrencies(SalesReceivablesSetup."Appln. between Currencies"::All);
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ApplyPaymentToInvoice@37();
    VAR
      GenJournalLine@1000 : Record 81;
      Amount@1001 : Decimal;
    BEGIN
      // Test application of Payment To Invoice by using Set Applies-to ID.

      Initialize;
      Amount := 10 * LibraryRandom.RandDec(1000,2);  // Using Large Random Number for Amount.
      AmountToApplyBySetAppliesToID(GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,Amount,-Amount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ApplyRefundToCreditMemo@38();
    VAR
      GenJournalLine@1002 : Record 81;
      Amount@1001 : Decimal;
    BEGIN
      // Test application of Refund To Credit Memo by using Set Applies-to ID.

      Initialize;
      Amount := 10 * LibraryRandom.RandDec(1000,2);  // Using Large Random Number for Amount.
      AmountToApplyBySetAppliesToID(
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Document Type"::Refund,-Amount,Amount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ApplyInvoiceToPayment@39();
    VAR
      GenJournalLine@1002 : Record 81;
      Amount@1001 : Decimal;
    BEGIN
      // Test application of Invoice To Payment by using Set Applies-to ID.

      Initialize;
      Amount := 10 * LibraryRandom.RandDec(1000,2);  // Using Large Random Number for Amount.
      AmountToApplyBySetAppliesToID(GenJournalLine."Document Type"::Payment,GenJournalLine."Document Type"::Invoice,-Amount,Amount);
    END;

    [Normal]
    LOCAL PROCEDURE AmountToApplyBySetAppliesToID@15(DocumentType@1004 : Option;DocumentType2@1009 : Option;GenJournalLineAmount@1010 : Decimal;GenJournalLineAmount2@1011 : Decimal);
    VAR
      Customer@1002 : Record 18;
      GenJournalLine@1006 : Record 81;
      CustLedgerEntry@1008 : Record 21;
      GLAccountNo@1001 : Code[20];
    BEGIN
      // 1.Setup: Update General Ledger Setup,Create new Customer with Payment Terms,new General Journal Batch and General Journal
      // Template. Create G/L Account and Create and post General Journal Lines of type Invoice,Payment and Credit Memo.
      UpdateGeneralLedgerSetup;
      CreateCustomerWithPaymentTerm(Customer);
      UpdateCustomerPostingGroup(Customer."Customer Posting Group");
      GLAccountNo := LibraryERM.CreateGLAccountNo;
      CreateGeneralJournalLine(
        GenJournalLine,DocumentType,GenJournalLine."Account Type"::Customer,Customer."No.",
        GenJournalLineAmount,GenJournalLine."Bal. Account Type"::"G/L Account",GLAccountNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateGeneralJournalLine(
        GenJournalLine,DocumentType2,GenJournalLine."Account Type"::Customer,Customer."No.",
        GenJournalLineAmount2,GenJournalLine."Bal. Account Type"::"G/L Account",GLAccountNo);

      // 2.Exercise: General Journal Lines of Payment,Refund,Invoice and apply to Invoice,Credit Memo,Payment and Post.
      ApplyAndPostGenJournalLine(CustLedgerEntry,GenJournalLine,DocumentType);

      // 3.Verify: Verify Remaining Amount in Customer Ledger Entry.
      VerifyRemainingAmount(CustLedgerEntry,GenJournalLineAmount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PaymentToleranceWarning)]
    PROCEDURE ApplyPaymentToleranceWarning@5();
    VAR
      GenJournalLine@1002 : Record 81;
      DetailedCustLedgEntry@1003 : Record 379;
      Amount@1001 : Decimal;
    BEGIN
      // Test application of Payment To Invoice by using Set Applies-to ID with Payment Tolerance Warning.

      Initialize;
      Amount := 10 * LibraryRandom.RandDec(1000,2);  // Using Large Random Number for Amount.
      OptionValue := 1;  // Assign Global Variable for Page Handler.
      AmountToApplyToleranceWarning(
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,Amount,-Amount,
        DetailedCustLedgEntry."Document Type"::Payment);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PaymentToleranceWarning)]
    PROCEDURE ApplyRefundToleranceWarning@6();
    VAR
      GenJournalLine@1002 : Record 81;
      DetailedCustLedgEntry@1003 : Record 379;
      Amount@1001 : Decimal;
    BEGIN
      // Test application of Refund To Credit Memo by using Set Applies-to ID with Payment Tolerance Warning.

      Initialize;
      Amount := 10 * LibraryRandom.RandDec(1000,2);  // Using Large Random Number for Amount.
      OptionValue := 1;  // Assign Global Variable for Page Handler.
      AmountToApplyToleranceWarning(
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Document Type"::Refund,-Amount,Amount,
        DetailedCustLedgEntry."Document Type"::Refund);
    END;

    [Normal]
    LOCAL PROCEDURE AmountToApplyToleranceWarning@28(DocumentType@1015 : Option;DocumentType2@1014 : Option;GenJournalLineAmount@1013 : Decimal;GenJournalLineAmount2@1012 : Decimal;DocumentType3@1016 : Option);
    VAR
      Customer@1006 : Record 18;
      GenJournalLine@1003 : Record 81;
      CustLedgerEntry@1002 : Record 21;
      MaxPaymentTolerance@1000 : Decimal;
      GLAccountNo@1001 : Code[20];
    BEGIN
      // 1.Setup: Update General Ledger Setup.Create Customer with Payment Terms,General Journal Batch and General Journal Template.
      // Create a new G/L Account and Create and post General Journal Lines of type Invoice and Credit memo.
      UpdateGeneralLedgerSetup;
      CreateCustomerWithPaymentTerm(Customer);
      UpdateCustomerPostingGroup(Customer."Customer Posting Group");
      GLAccountNo := LibraryERM.CreateGLAccountNo;
      CreateGeneralJournalLine(
        GenJournalLine,DocumentType,GenJournalLine."Account Type"::Customer,Customer."No.",
        GenJournalLineAmount,GenJournalLine."Bal. Account Type"::"G/L Account",GLAccountNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateGeneralJournalLine(
        GenJournalLine,DocumentType2,GenJournalLine."Account Type"::Customer,Customer."No.",
        GenJournalLineAmount2,GenJournalLine."Bal. Account Type"::"G/L Account",GLAccountNo);

      // 2.Exercise: Partially apply General Journal Lines of Payment,Refund and with Payment Tolerance to Invoice,Credit Memo and Post.
      FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Account No.",DocumentType);
      MaxPaymentTolerance := CustLedgerEntry."Max. Payment Tolerance" / 2 ;  // Use for Verify partial Payment Tolerance Amount.
      ApplyAndPostGenJnlLineWarning(CustLedgerEntry,GenJournalLine,GenJournalLineAmount);

      // 3.Verify: Verify Remaining Amount in Customer Ledger. Verify Payment Tolerance and Payment Discount in Detailed Customer Ledger.
      VerifyLedgerEntry(
        CustLedgerEntry,GenJournalLineAmount,DocumentType3,GenJournalLine."Document No.",-MaxPaymentTolerance);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PaymentToleranceWarning)]
    PROCEDURE ApplyPaymentToInvoiceDiscount@13();
    VAR
      Customer@1009 : Record 18;
      GenJournalLine@1006 : Record 81;
      CustLedgerEntry@1005 : Record 21;
      DetailedCustLedgEntry@1007 : Record 379;
      MaxPaymentTolerance@1000 : Decimal;
      GLAccountNo@1001 : Code[20];
    BEGIN
      // Test application of Payment To Invoice by using Set Applies-to ID with Payment Discount and Payment Tolerance Warning
      // Posting Date of Payment with in Payment Discount Grace Period.

      // 1.Setup: Update General Ledger Setup.Create a new Customer with Payment Terms, new General Journal Batch and General Journal
      // Template.Create a new G/L Account and Create and post General Journal Line of type Invoice.
      Initialize;
      UpdateGeneralLedgerSetup;
      UpdatePaymentGracePeriod;
      CreateCustomerWithPaymentTerm(Customer);
      UpdateCustomerPostingGroup(Customer."Customer Posting Group");
      GLAccountNo := LibraryERM.CreateGLAccountNo;
      OptionValue := 1;  // Assign Global Variable for Page Handler.

      // Using Large Random Number for Amount.
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,Customer."No.",
        10 * LibraryRandom.RandDec(1000,2),GenJournalLine."Bal. Account Type"::"G/L Account",GLAccountNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",GLAccountNo,
        GenJournalLine.Amount,GenJournalLine."Bal. Account Type"::Customer,Customer."No.");

      // 2.Exercise: General Journal Line of Payment with Account Type as G/L Account
      // and partially apply with Payment Tolerance to Invoice and post.
      FindCustomerLedgerEntry(CustLedgerEntry,Customer."No.",CustLedgerEntry."Document Type"::Invoice);
      MaxPaymentTolerance := CustLedgerEntry."Max. Payment Tolerance" / 2 ;  // Use for Verify partial Payment Tolerance Amount.
      ApplyAndPostGenJnlLineDiscount(CustLedgerEntry,GenJournalLine);

      // 3.Verify: Verify Remaining Amount in Customer Ledger. Verify Payment Tolerance and Payment Discount in Detailed Customer Ledger.
      VerifyLedgerEntry(
        CustLedgerEntry,GenJournalLine.Amount,DetailedCustLedgEntry."Document Type"::Payment,
        GenJournalLine."Document No.",-MaxPaymentTolerance);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PaymentToleranceWarning)]
    PROCEDURE ApplyToInvoiceWithAppliesToDoc@19();
    VAR
      Customer@1009 : Record 18;
      GenJournalLine@1006 : Record 81;
      CustLedgerEntry@1005 : Record 21;
      DetailedCustLedgEntry@1015 : Record 379;
      GLAccountNo@1001 : Code[20];
      DocumentNo@1000 : Code[20];
      MaxPaymentTolerance@1002 : Decimal;
    BEGIN
      // Test application of Payment To Invoice by using Applies-to Doc. Type and Applies-to Doc. No. with Payment Discount
      // and Payment Tolerance Warning Posting Date of Payment with in Payment Discount Grace Period.

      // 1.Setup: Update General Ledger Setup.Create a new Customer with Payment Terms, new General Journal Batch and
      // General Journal Template. Create G/L Account and Create and post General Journal Line of type Invoice.
      Initialize;
      UpdateGeneralLedgerSetup;
      UpdatePaymentGracePeriod;
      CreateCustomerWithPaymentTerm(Customer);
      UpdateCustomerPostingGroup(Customer."Customer Posting Group");
      GLAccountNo := LibraryERM.CreateGLAccountNo;
      OptionValue := 1;  // Assign Global Variable for Page Handler.

      // Using Large Random Number for Amount.
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,Customer."No.",
        10 * LibraryRandom.RandDec(1000,2),GenJournalLine."Bal. Account Type"::"G/L Account",GLAccountNo);
      DocumentNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"G/L Account",GLAccountNo,
        GenJournalLine.Amount,GenJournalLine."Bal. Account Type"::Customer,Customer."No.");

      // 2.Exercise: General Journal Line of Payment with Account Type as G/L Account and partially applies to Doc No. with
      // Payment Tolerance to Invoice and post.
      FindCustomerLedgerEntry(CustLedgerEntry,Customer."No.",CustLedgerEntry."Document Type"::Invoice);
      MaxPaymentTolerance := CustLedgerEntry."Max. Payment Tolerance" / 2 ;  // Use for Verify partial Payment Tolerance Amount.
      AppliesToDocAndPostGenJnlLine(CustLedgerEntry,GenJournalLine,DocumentNo);

      // 3.Verify: Verify Remaining Amount in Customer Ledger. Verify Payment Tolerance and Payment Discount in Detailed Customer Ledger.
      VerifyLedgerEntry(
        CustLedgerEntry,GenJournalLine.Amount,DetailedCustLedgEntry."Document Type"::Payment,
        GenJournalLine."Document No.",-MaxPaymentTolerance);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PaymentToleranceWarning)]
    PROCEDURE ApplyToInvoiceAfterGracePeriod@22();
    VAR
      Customer@1009 : Record 18;
      GenJournalLine@1006 : Record 81;
      CustLedgerEntry@1005 : Record 21;
      DetailedCustLedgEntry@1015 : Record 379;
      GLAccountNo@1003 : Code[20];
      NewPostingDate@1004 : Date;
      MaxPaymentTolerance@1000 : Decimal;
      GracePeriodDays@1001 : Integer;
      DiscountDays@1002 : Integer;
    BEGIN
      // Test application of Payment To Invoice by using Applies-to Doc. Type and Applies-to Doc. No. without Payment Discount
      // and Payment Tolerance Warning, Posting Date of Payment After Payment Discount Grace Period.

      // 1.Setup: Update and General Ledger Setup,Create a new Customer with Payment Terms, new General Journal Batch and
      // General Journal Template.Create a new G/L Account and Create and post General Journal Lines of type Invoice.
      Initialize;
      UpdateGeneralLedgerSetup;
      GracePeriodDays := UpdatePaymentGracePeriod;
      DiscountDays := CreateCustomerWithPaymentTerm(Customer);
      UpdateCustomerPostingGroup(Customer."Customer Posting Group");
      GLAccountNo := LibraryERM.CreateGLAccountNo;
      OptionValue := 1;  // Assign Global Variable for Page Handler.

      // Using Large Random Number for Amount.
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Account Type"::Customer,Customer."No.",
        10 * LibraryRandom.RandDec(1000,2),GenJournalLine."Bal. Account Type"::"G/L Account",GLAccountNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Using Random Number for Posting Date After Grace Period.
      NewPostingDate := CALCDATE('<' + FORMAT(GracePeriodDays + DiscountDays + LibraryRandom.RandInt(10)) + 'D>',WORKDATE);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::"G/L Account",
        GLAccountNo,GenJournalLine.Amount,GenJournalLine."Bal. Account Type"::Customer,Customer."No.");

      // 2.Exercise: General Journal Lines of Payment as postig date After Payment Discount Grace Period with
      // Account Type as G/L Account and partially apply with Payment Tolerance to Invoice and post.
      FindCustomerLedgerEntry(CustLedgerEntry,Customer."No.",CustLedgerEntry."Document Type"::Invoice);
      MaxPaymentTolerance := CustLedgerEntry."Max. Payment Tolerance" / 2;
      UpdatePostingDateGenJnlLine(GenJournalLine,NewPostingDate);
      ApplyPostGenJnlLineGracePeriod(CustLedgerEntry,GenJournalLine);

      // 3.Verify: Verify Remaining Amount in Customer Ledger.Verify Payment Tolerance in Detailed Customer Ledger Entry.
      VerifyRemainingAmount(CustLedgerEntry,GenJournalLine.Amount);
      VerifyAmountInDetailedLedger(
        DetailedCustLedgEntry."Document Type"::Payment,DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",
        GenJournalLine."Document No.",-MaxPaymentTolerance);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE OverPaymentBothWarningLCY@63();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Over Payment and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",'',GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := Amount + LibraryRandom.RandInt(10);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine2,Customer."No.",'',GenJournalLine2."Document Type"::Payment,-PaymentAmount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Discount",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE OverPaymentDiscountWarningFCY@62();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      RefundAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Over Payment and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Credit Memo and Refund, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::"Credit Memo",-Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      RefundAmount := Amount + LibraryRandom.RandInt(50);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine2,
        Customer."No.",CurrencyCode,GenJournalLine2."Document Type"::Refund,RefundAmount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,FALSE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Refund,
        GenJournalLine2."Document Type"::"Credit Memo",GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Discount",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE OverPaymentToleranceWarningFCY@60();
    VAR
      Currency@1004 : Record 4;
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Over Payment and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      CreateCurrencyWithSetup(Currency);
      RunChangePaymentTolerance(Currency.Code,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(10,2));
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := 2 * Amount + LibraryRandom.RandInt(10);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine2,
        Customer."No.",Currency.Code,GenJournalLine2."Document Type"::Payment,-PaymentAmount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(FALSE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Discount",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE SamePaymentBothWarningLCY@59();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      Amount@1013 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment equal invoce amount and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",'',GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateGenJournalLine(GenJournalLine2,Customer."No.",'',GenJournalLine2."Document Type"::Payment,-Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Discount",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE SamePaymentDiscountWarningFCY@56();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment equal invoce amount and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Credit Memo and Refund, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::"Credit Memo",-Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateGenJournalLine(
        GenJournalLine2,Customer."No.",CurrencyCode,GenJournalLine2."Document Type"::Refund,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,FALSE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Refund,
        GenJournalLine2."Document Type"::"Credit Memo",GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Discount",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE SamePaymentToleranceWarningFCY@52();
    VAR
      Currency@1004 : Record 4;
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment equal invoce amount and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      CreateCurrencyWithSetup(Currency);
      RunChangePaymentTolerance(Currency.Code,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(10,2));
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := 2 * Amount;  // PaymentAmount atleast 2 times than Amount.
      CreateGenJournalLine(
        GenJournalLine2,
        Customer."No.",Currency.Code,GenJournalLine2."Document Type"::Payment,-PaymentAmount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(FALSE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Discount",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE LessPaymentBothWarningLCY@48();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment under invoce amount and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",'',GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := Amount - LibraryRandom.RandInt(10);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine2,Customer."No.",'',GenJournalLine2."Document Type"::Payment,-PaymentAmount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Discount",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PaymentToleranceWarning)]
    PROCEDURE LessPaymentDiscountWarningFCY@47();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      RefundAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment under invoce amount and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Credit Memo and Refund, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(500,2);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::"Credit Memo",-Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      RefundAmount := Amount - LibraryRandom.RandInt(10);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine2,
        Customer."No.",CurrencyCode,GenJournalLine2."Document Type"::Refund,RefundAmount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,FALSE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Refund,
        GenJournalLine2."Document Type"::"Credit Memo",GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Discount",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE LessPaymentToleranceWarningFCY@44();
    VAR
      Currency@1004 : Record 4;
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment under invoce amount and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      CreateCurrencyWithSetup(Currency);
      RunChangePaymentTolerance(Currency.Code,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(10,2));
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := 2 * Amount - LibraryRandom.RandInt(10);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine2,
        Customer."No.",Currency.Code,GenJournalLine2."Document Type"::Payment,-PaymentAmount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(FALSE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Discount",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PaymentToleranceWarning)]
    PROCEDURE UnderDiscDateBothWarningLCY@83();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment under invoce amount and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",'',GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := Amount - ((Amount * PaymentTerms."Discount %") / 100) + GetMaxTolerancePaymentAmount / 2;
      CreateGenJournalLine(
        GenJournalLine2,Customer."No.",'',GenJournalLine2."Document Type"::Payment,-PaymentAmount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,TRUE);
      OptionValue := 0;  // Assign Global Variable for Page Handler.

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Discount",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",ROUND(GetMaxTolerancePaymentAmount / 2,0.01,'='));
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PaymentToleranceWarning)]
    PROCEDURE UnderDiscDateDiscWarningFCY@82();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      RefundAmount@1018 : Decimal;
      MaxPaymentTolerance@1002 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment under invoce amount and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Credit Memo and Refund, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::"Credit Memo",-Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::"Credit Memo",GenJournalLine."Document No.");
      CustLedgerEntry.CALCFIELDS(Amount);
      MaxPaymentTolerance := ABS(CustLedgerEntry."Max. Payment Tolerance");
      RefundAmount := ABS(CustLedgerEntry.Amount) - ABS(CustLedgerEntry."Remaining Pmt. Disc. Possible") + MaxPaymentTolerance;
      CreateGenJournalLine(
        GenJournalLine2,
        Customer."No.",CurrencyCode,GenJournalLine2."Document Type"::Refund,RefundAmount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,FALSE);
      OptionValue := 0;  // Assign Global Variable for Page Handler.

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Refund,
        GenJournalLine2."Document Type"::"Credit Memo",GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Discount",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",-MaxPaymentTolerance);
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UnderDiscDateTolWarningFCY@81();
    VAR
      Currency@1004 : Record 4;
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment under invoce amount and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      CreateCurrencyWithSetup(Currency);
      RunChangePaymentTolerance(Currency.Code,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(10,2));
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := Amount - ((Amount * PaymentTerms."Discount %") / 100) + GetMaxTolerancePaymentAmount;
      CreateGenJournalLine(
        GenJournalLine2,Customer."No.",Currency.Code,GenJournalLine2."Document Type"::Payment,-PaymentAmount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(FALSE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Discount",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",GetMaxTolerancePaymentAmount);
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UnderTolDateBothWarningLCY@43();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1001 : Record 21;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment under invoce amount and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",'',GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := Amount - 2 * LibraryRandom.RandInt(50);
      CreateGenJournalLine(
        GenJournalLine2,
        Customer."No.",'',GenJournalLine2."Document Type"::Payment,-PaymentAmount,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry);

      // 3. Verify: Verify the Ledger Entries.
      VerifyDetldCustomerEntries(GenJournalLine,GenJournalLine2,Amount,PaymentAmount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UnderTolDateDiscWarningFCY@40();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1002 : Record 21;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1001 : Code[10];
      Amount@1013 : Decimal;
      RefundAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment under invoce amount and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Credit Memo and Refund, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::"Credit Memo",-Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      RefundAmount := Amount - 2 * LibraryRandom.RandInt(50);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine2,
        Customer."No.",CurrencyCode,GenJournalLine2."Document Type"::Refund,RefundAmount,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,FALSE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry,GenJournalLine2."Document Type"::Refund,
        GenJournalLine2."Document Type"::"Credit Memo",GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry);

      // 3. Verify: Verify the Ledger Entries.
      VerifyDetldCustomerEntries(GenJournalLine,GenJournalLine2,-Amount,-RefundAmount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE UnderTolDateTolWarningFCY@36();
    VAR
      Currency@1004 : Record 4;
      Customer@1008 : Record 18;
      CustLedgerEntry@1001 : Record 21;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment under invoce amount and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      CreateCurrencyWithSetup(Currency);
      RunChangePaymentTolerance(Currency.Code,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(10,2));
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := 2 * Amount - 2 * LibraryRandom.RandInt(50);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine2,Customer."No.",Currency.Code,
        GenJournalLine2."Document Type"::Payment,-PaymentAmount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(FALSE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry);

      // 3. Verify: Verify the Ledger Entries.
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ToleranceWarningPageHandler)]
    PROCEDURE OverPaymentTolBothWarningLCY@34();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment less what is owed but not within Tolerance and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",'',GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := Amount + LibraryRandom.RandInt(10);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine2,Customer."No.",'',GenJournalLine2."Document Type"::Payment,-PaymentAmount,
        CALCDATE('<1D>',CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE OverPaymentTolDiscWarningFCY@49();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      RefundAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment less what is owed but not within Tolerance and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Credit Memo and Refund, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::"Credit Memo",-Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      RefundAmount := Amount + LibraryRandom.RandInt(10);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine2,Customer."No.",CurrencyCode,GenJournalLine2."Document Type"::Refund,RefundAmount,
        CALCDATE('<1D>',CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,FALSE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Refund,
        GenJournalLine2."Document Type"::"Credit Memo",GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ToleranceWarningPageHandler)]
    PROCEDURE OverPaymentTolAndTolWarningFCY@31();
    VAR
      Currency@1004 : Record 4;
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment less what is owed but not within Tolerance and before Payment Discount Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      CreateCurrencyWithSetup(Currency);
      RunChangePaymentTolerance(Currency.Code,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(10,2));
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := 2 * Amount + LibraryRandom.RandInt(100);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine2,Customer."No.",Currency.Code,GenJournalLine2."Document Type"::Payment,-PaymentAmount,
        CALCDATE('<1D>',CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(FALSE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ToleranceWarningPageHandler)]
    PROCEDURE SamePaymentTolBothWarningLCY@30();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      Amount@1013 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Over Payment and within Payment Tolerance Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",'',GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateGenJournalLine(GenJournalLine2,Customer."No.",'',GenJournalLine2."Document Type"::Payment,-Amount,
        CALCDATE('<1D>',CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,TRUE);
      OptionValue := 0;  // Assign Global Variable for Page Handler.

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE SamePaymentTolDiscWarningFCY@20();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Over Payment and within Payment Tolerance Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Credit Memo and Refund, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::"Credit Memo",-Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::"Credit Memo",GenJournalLine."Document No.");
      CreateGenJournalLine(GenJournalLine2,Customer."No.",CurrencyCode,GenJournalLine2."Document Type"::Refund,Amount,
        CALCDATE('<1D>',CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,FALSE);
      OptionValue := 0;  // Assign Global Variable for Page Handler.

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Refund,
        GenJournalLine2."Document Type"::"Credit Memo",GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ToleranceWarningPageHandler)]
    PROCEDURE SamePaymentTolAndTolWarningFCY@57();
    VAR
      Currency@1003 : Record 4;
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Over Payment and within Payment Tolerance Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      CreateCurrencyWithSetup(Currency);
      RunChangePaymentTolerance(Currency.Code,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(10,2));
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateGenJournalLine(
        GenJournalLine2,Customer."No.",Currency.Code,GenJournalLine2."Document Type"::Payment,-Amount,
        CALCDATE('<1D>',CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(FALSE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ToleranceWarningPageHandler)]
    PROCEDURE LessPaymentTolBothWarningLCY@74();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment equal invoice amount and within Payment Tolerance Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",'',GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := Amount - LibraryRandom.RandInt(5);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine2,Customer."No.",'',GenJournalLine2."Document Type"::Payment,-PaymentAmount,
        CALCDATE('<1D>',CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE LessPaymentTolDiscWarningFCY@73();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      RefundAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment equal invoice amount and within Payment Tolerance Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Credit Memo and Refund, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::"Credit Memo",-Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::"Credit Memo",GenJournalLine."Document No.");
      RefundAmount := Amount - LibraryRandom.RandInt(5);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine2,Customer."No.",CurrencyCode,GenJournalLine2."Document Type"::Refund,RefundAmount,
        CALCDATE('<1D>',CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,FALSE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Refund,
        GenJournalLine2."Document Type"::"Credit Memo",GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ToleranceWarningPageHandler)]
    PROCEDURE LessPaymentTolAndTolWarningFCY@72();
    VAR
      Currency@1003 : Record 4;
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Tolerance with Payment equal invoice amount and within Payment Tolerance Date.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      CreateCurrencyWithSetup(Currency);
      RunChangePaymentTolerance(Currency.Code,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(10,2));
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := 2 * Amount - LibraryRandom.RandInt(5);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine2,Customer."No.",Currency.Code,GenJournalLine2."Document Type"::Payment,-PaymentAmount,
        CALCDATE('<1D>',CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(FALSE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ToleranceWarningPageHandler,PaymentToleranceWarning)]
    PROCEDURE LessToleranceBothWarningLCY@89();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Discount Tolerance and Payment Tolerance with positive amount and Payment Amount
      // less than and with both warnings.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",'',GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := Amount - ((Amount * PaymentTerms."Discount %") / 100) + GetMaxTolerancePaymentAmount / 2;
      CreateGenJournalLine(
        GenJournalLine2,Customer."No.",'',GenJournalLine2."Document Type"::Payment,-PaymentAmount,
        CALCDATE('<1D>',CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",ROUND(GetMaxTolerancePaymentAmount / 2,0.01,'='));
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PaymentToleranceWarning)]
    PROCEDURE LessToleranceDiscWarningFCY@88();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      RefundAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Discount Tolerance and Payment Tolerance with positive amount and Payment Amount
      // less than Amount and with Discount warning.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Credit Memo and Refund, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::"Credit Memo",-Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::"Credit Memo",GenJournalLine."Document No.");
      RefundAmount := Amount - ((Amount * PaymentTerms."Discount %") / 100) + GetMaxTolerancePaymentAmount / 2;
      CreateGenJournalLine(GenJournalLine2,Customer."No.",CurrencyCode,GenJournalLine2."Document Type"::Refund,RefundAmount,
        CALCDATE('<1D>',CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,FALSE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Refund,
        GenJournalLine2."Document Type"::"Credit Memo",GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",-ROUND(GetMaxTolerancePaymentAmount / 2,0.01,'='));
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ToleranceWarningPageHandler)]
    PROCEDURE LessToleranceWithWarningFCY@87();
    VAR
      Currency@1003 : Record 4;
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
      MaxPaymentTolerance@1002 : Decimal;
    BEGIN
      // Test the Payment Discount Tolerance and Payment Tolerance with positive amount and Payment
      // Amount less than Inivoice Amount and with Tolerance warning.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      CreateCurrencyWithSetup(Currency);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::Invoice,GenJournalLine."Document No.");
      CustLedgerEntry.CALCFIELDS(Amount);
      MaxPaymentTolerance := ABS(CustLedgerEntry."Max. Payment Tolerance");
      PaymentAmount := ABS(CustLedgerEntry.Amount) - ABS(CustLedgerEntry."Remaining Pmt. Disc. Possible") + MaxPaymentTolerance;
      CreateGenJournalLine(GenJournalLine2,Customer."No.",Currency.Code,GenJournalLine2."Document Type"::Payment,-PaymentAmount,
        CALCDATE('<1D>',CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(FALSE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",MaxPaymentTolerance);
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ToleranceWarningPageHandler,PaymentToleranceWarning)]
    PROCEDURE PaymentBothWarningWithDiscount@86();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Discount Tolerance and Payment Tolerance with negative amount and Payment Amount
      // less than Inivoice Amount and with both warnings.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",'',GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := Amount - ((Amount * PaymentTerms."Discount %") / 100) - GetMaxTolerancePaymentAmount;
      CreateGenJournalLine(
        GenJournalLine2,Customer."No.",'',GenJournalLine2."Document Type"::Payment,-PaymentAmount,
        CALCDATE('<1D>',CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",-GetMaxTolerancePaymentAmount);
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PaymentToleranceWarning)]
    PROCEDURE DiscountWarningWithDiscount@85();
    VAR
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      RefundAmount@1018 : Decimal;
      MaxPaymentTolerance@1002 : Decimal;
    BEGIN
      // Test the Payment Discount Tolerance and Payment Tolerance with negative amount and Payment Amount
      // less than Inivoice Amount and with both warnings.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Credit Memo and Refund, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::"Credit Memo",-Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,CustLedgerEntry."Document Type"::"Credit Memo",GenJournalLine."Document No.");
      CustLedgerEntry.CALCFIELDS(Amount);
      MaxPaymentTolerance := ABS(CustLedgerEntry."Max. Payment Tolerance");
      RefundAmount := ABS(CustLedgerEntry.Amount) - ABS(CustLedgerEntry."Remaining Pmt. Disc. Possible") - MaxPaymentTolerance;
      CreateGenJournalLine(GenJournalLine2,Customer."No.",CurrencyCode,GenJournalLine2."Document Type"::Refund,RefundAmount,
        CALCDATE('<1D>',CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,FALSE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Refund,
        GenJournalLine2."Document Type"::"Credit Memo",GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",MaxPaymentTolerance);
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ToleranceWarningPageHandler)]
    PROCEDURE PaymentTolWarningWithDiscount@27();
    VAR
      Currency@1003 : Record 4;
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Payment Discount Tolerance and Payment Tolerance with negative amount and Payment Amount
      // less than Inivoice Amount and with both warnings.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Invoice and Payment, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),LibraryRandom.RandDec(5,2));
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      CreateCurrencyWithSetup(Currency);
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := Amount - ((Amount * PaymentTerms."Discount %") / 100) - GetMaxTolerancePaymentAmount / 2;
      CreateGenJournalLine(GenJournalLine2,Customer."No.",Currency.Code,GenJournalLine2."Document Type"::Payment,-PaymentAmount,
        CALCDATE('<1D>',CALCDATE(PaymentTerms."Discount Date Calculation",WORKDATE)));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(FALSE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",-CustLedgerEntry."Original Pmt. Disc. Possible");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",-GetMaxTolerancePaymentAmount / 2);
      VerifyLedgerEntries(GenJournalLine,GenJournalLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE LessPaymentApplicationRounding@90();
    VAR
      Currency@1002 : Record 4;
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      PaymentAmount@1018 : Decimal;
    BEGIN
      // Test the Application Rounding Entry with less Payment Application Rounding and both warnings.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Credit Memo and Refund, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),0);
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      CreateCurrencyWithSetup(Currency);
      ApplicationRoundingInCurrency(Currency);
      RunChangePaymentTolerance(Currency.Code,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(10,2));
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::Invoice,Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      PaymentAmount := LibraryERM.ConvertCurrency(Amount,CurrencyCode,Currency.Code,WORKDATE) - Currency."Appln. Rounding Precision";
      CreateGenJournalLine(
        GenJournalLine2,
        Customer."No.",Currency.Code,GenJournalLine2."Document Type"::Payment,-PaymentAmount,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Payment,
        GenJournalLine2."Document Type"::Invoice,GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Appln. Rounding",-Currency."Appln. Rounding Precision");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE MorePaymentApplicationRounding@67();
    VAR
      Currency@1002 : Record 4;
      Customer@1008 : Record 18;
      CustLedgerEntry@1016 : Record 21;
      CustLedgerEntry2@1001 : Record 21;
      DetailedCustLedgEntry@1017 : Record 379;
      GenJournalLine@1010 : Record 81;
      GenJournalLine2@1012 : Record 81;
      PaymentTerms@1005 : Record 3;
      CurrencyCode@1020 : Code[10];
      Amount@1013 : Decimal;
      RefundAmount@1018 : Decimal;
    BEGIN
      // Test the Application Rounding Entry with more Payment Application Rounding and both warnings.

      // 1. Setup: Change the Sales and Receivable Setup, create Payment Terms, create Customer and Currency, create General Journal Line
      // for Credit Memo and Refund, change warnings in General Ledger Setup.
      Initialize;
      CreatePaymentTerms(PaymentTerms,LibraryRandom.RandInt(10),0);
      CurrencyCode := CreateCustomerWithCurrency(Customer,PaymentTerms.Code);
      CreateCurrencyWithSetup(Currency);
      ApplicationRoundingInCurrency(Currency);
      RunChangePaymentTolerance(Currency.Code,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(10,2));
      Amount := LibraryRandom.RandDec(1000,2);  // Taking Random value for Amount.
      CreateGenJournalLine(
        GenJournalLine,Customer."No.",CurrencyCode,GenJournalLine."Document Type"::"Credit Memo",-Amount,WORKDATE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      RefundAmount := LibraryERM.ConvertCurrency(Amount,CurrencyCode,Currency.Code,WORKDATE) + Currency."Appln. Rounding Precision";
      CreateGenJournalLine(
        GenJournalLine2,
        Customer."No.",Currency.Code,GenJournalLine2."Document Type"::Refund,RefundAmount,
        CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      LibraryERM.PostGeneralJnlLine(GenJournalLine2);
      WarningsInGeneralLedgerSetup(TRUE,TRUE);

      // 2. Exercise: Apply and Post the Customer Ledger Entry.
      ApplyCustomerEntry(
        CustLedgerEntry2,GenJournalLine2."Document Type"::Refund,
        GenJournalLine2."Document Type"::"Credit Memo",GenJournalLine2."Document No.",GenJournalLine."Document No.");
      LibraryERM.PostCustLedgerApplication(CustLedgerEntry2);

      // 3. Verify: Verify the Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      VerifyDetldCustomerLedgerEntry(
        GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Appln. Rounding",-Currency."Appln. Rounding Precision");
    END;

    [Normal]
    LOCAL PROCEDURE AmountToApplyInCustomerLedger@100(VAR CustLedgerEntry@1000 : Record 21;DocumentNo@1001 : Code[20];DocumentType@1002 : Option);
    BEGIN
      // Find Posted Customer Ledger Entries.
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
      CustLedgerEntry.VALIDATE("Amount to Apply",CustLedgerEntry."Remaining Amount");
      CustLedgerEntry.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE ApplicationRoundingInCurrency@113(VAR Currency@1000 : Record 4);
    BEGIN
      Currency.VALIDATE("Appln. Rounding Precision",LibraryUtility.GenerateRandomFraction);
      Currency.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE ApplyAndPostGenJournalLine@18(VAR CustLedgerEntry@1000 : Record 21;GenJournalLine@1001 : Record 81;DocumentType@1002 : Option);
    BEGIN
      FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Account No.",DocumentType);
      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry);
      SetAppliesToIDGenJournalLine(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    [Normal]
    LOCAL PROCEDURE ApplyAndPostGenJnlLineWarning@46(VAR CustLedgerEntry@1000 : Record 21;GenJournalLine@1001 : Record 81;GenJournalLineAmount@1004 : Decimal);
    VAR
      DifferenceAmount@1003 : Decimal;
    BEGIN
      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry);
      SetAppliesToIDGenJournalLine(GenJournalLine);

      // Use for partial Payment Tolerance Warning.
      DifferenceAmount := CustLedgerEntry."Original Pmt. Disc. Possible" + (CustLedgerEntry."Max. Payment Tolerance" / 2);
      PostGeneralJournalLine(GenJournalLine,-(GenJournalLineAmount - DifferenceAmount));
    END;

    [Normal]
    LOCAL PROCEDURE ApplyPostGenJnlLineGracePeriod@61(VAR CustLedgerEntry@1000 : Record 21;GenJournalLine@1001 : Record 81);
    BEGIN
      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry);
      SetAppliesToIDGenJournalLine(GenJournalLine);

      // Use for partial Payment Tolerance Warning.
      PostGeneralJournalLine(GenJournalLine,GenJournalLine.Amount - (CustLedgerEntry."Max. Payment Tolerance" / 2));
    END;

    [Normal]
    LOCAL PROCEDURE ApplyAndPostGenJnlLineDiscount@51(VAR CustLedgerEntry@1000 : Record 21;GenJournalLine@1001 : Record 81);
    VAR
      DifferenceAmount@1003 : Decimal;
    BEGIN
      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry);
      SetAppliesToIDGenJournalLine(GenJournalLine);

      // Use for partial Payment Tolerance Warning.
      DifferenceAmount := CustLedgerEntry."Original Pmt. Disc. Possible" + (CustLedgerEntry."Max. Payment Tolerance" / 2);
      PostGeneralJournalLine(GenJournalLine,GenJournalLine.Amount - DifferenceAmount);
    END;

    LOCAL PROCEDURE ApplyCustomerEntry@75(VAR CustLedgerEntry@1004 : Record 21;DocumentType@1003 : Option;DocumentType2@1006 : Option;DocumentNo@1002 : Code[20];DocumentNo2@1001 : Code[20]);
    VAR
      CustLedgerEntry2@1000 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      CustLedgerEntry.CALCFIELDS("Remaining Amount");
      LibraryERM.SetApplyCustomerEntry(CustLedgerEntry,CustLedgerEntry."Remaining Amount");
      AmountToApplyInCustomerLedger(CustLedgerEntry2,DocumentNo2,DocumentType2);

      // Set Applies-to ID.
      LibraryERM.SetAppliestoIdCustomer(CustLedgerEntry2);
    END;

    [Normal]
    LOCAL PROCEDURE ApplyCustomerLedgerEntry@50(VAR CustLedgerEntry@1000 : Record 21;AmounttoApply@1001 : Decimal);
    BEGIN
      CustLedgerEntry.VALIDATE("Amount to Apply",AmounttoApply);
      CustLedgerEntry.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE AppliesToDocAndPostGenJnlLine@58(VAR CustLedgerEntry@1000 : Record 21;GenJournalLine@1001 : Record 81;AppliesToDocNo@1004 : Code[20]);
    VAR
      DifferenceAmount@1003 : Decimal;
    BEGIN
      ApplyCustomerLedgerEntry(CustLedgerEntry,GenJournalLine.Amount);

      // Use for partial Payment Tolerance Warning.
      DifferenceAmount := CustLedgerEntry."Original Pmt. Disc. Possible" + (CustLedgerEntry."Max. Payment Tolerance" / 2);
      AppliestoDocNoGenJournalLine(GenJournalLine,GenJournalLine.Amount - DifferenceAmount,AppliesToDocNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    [Normal]
    LOCAL PROCEDURE AppliestoDocNoGenJournalLine@33(VAR GenJournalLine@1000 : Record 81;Amount@1001 : Decimal;AppliesToDocNo@1002 : Code[20]);
    BEGIN
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",AppliesToDocNo);
      GenJournalLine.VALIDATE(Amount,Amount);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCurrency@11(VAR Currency@1000 : Record 4);
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      Currency.VALIDATE("Residual Gains Account",Currency."Realized Gains Acc.");
      Currency.VALIDATE("Residual Losses Account",Currency."Realized Losses Acc.");
      Currency.MODIFY(TRUE);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
    END;

    [Normal]
    LOCAL PROCEDURE CreateCurrencyWithSetup@32(VAR Currency@1000 : Record 4);
    BEGIN
      CreateCurrency(Currency);
      UpdateAddCurrencySetup(Currency.Code);
    END;

    [Normal]
    LOCAL PROCEDURE CreateCustomerWithCurrency@55(VAR Customer@1000 : Record 18;PaymentTermsCode@1004 : Code[10]) : Code[10];
    VAR
      Currency@1001 : Record 4;
      LibrarySales@1003 : Codeunit 130509;
    BEGIN
      // Random Value for Payment Tolerance and Maximum Payment Tolerance Amount.
      LibrarySales.CreateCustomer(Customer);
      AttachPaymentTermsCustomer(Customer,PaymentTermsCode);
      CreateCurrencyWithSetup(Currency);
      RunChangePaymentTolerance(Currency.Code,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(10,2));
      EXIT(Currency.Code);
    END;

    [Normal]
    LOCAL PROCEDURE CreateCustomerWithPaymentTerm@2(VAR Customer@1000 : Record 18) DiscountDays : Integer;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      DiscountDays := LibraryRandom.RandInt(5);  // Using Random Value for Days.
      Customer.VALIDATE("Payment Terms Code",CreatePaymentTermsCode(DiscountDays));
      Customer.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateGeneralJournalBatch@21(VAR GenJournalBatch@1001 : Record 232);
    VAR
      GenJournalTemplate@1000 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);

      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      GenJournalBatch.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateGenJournalLine@64(VAR GenJournalLine@1000 : Record 81;AccountNo@1003 : Code[20];CurrencyCode@1007 : Code[10];DocumentType@1001 : Option;Amount@1006 : Decimal;PostingDate@1008 : Date);
    VAR
      GenJournalBatch@1005 : Record 232;
    BEGIN
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,
        GenJournalBatch."Journal Template Name",
        GenJournalBatch.Name,DocumentType,GenJournalLine."Account Type"::Customer,AccountNo,Amount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreateGeneralJournalLine@25(VAR GenJournalLine@1000 : Record 81;DocumentType@1001 : Option;AccountType@1005 : Option;AccountNo@1006 : Code[20];Amount@1003 : Decimal;BalAccountType@1002 : Option;BalAccountNo@1007 : Code[20]);
    VAR
      GenJournalBatch@1004 : Record 232;
    BEGIN
      CreateGeneralJournalBatch(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Bal. Account Type",BalAccountType);
      GenJournalLine.VALIDATE("Bal. Account No.",BalAccountNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE CreatePaymentTermsCode@7(DiscountDateCalculationDays@1000 : Integer) : Code[10];
    VAR
      PaymentTerms@1001 : Record 3;
    BEGIN
      CreatePaymentTerms(PaymentTerms,DiscountDateCalculationDays,LibraryRandom.RandDec(5,2));
      EXIT(PaymentTerms.Code);
    END;

    LOCAL PROCEDURE CreatePaymentTerms@91(VAR PaymentTerms@1000 : Record 3;DiscountDateCalculationDays@1002 : Integer;DiscountPercent@1001 : Decimal);
    BEGIN
      LibraryERM.CreatePaymentTerms(PaymentTerms);
      EVALUATE(PaymentTerms."Due Date Calculation",'<' + FORMAT(LibraryRandom.RandInt(2)) + 'M>');
      EVALUATE(PaymentTerms."Discount Date Calculation",'<' + FORMAT(DiscountDateCalculationDays) + 'D>');

      // Evaluate doesn't call validate trigger.
      PaymentTerms.VALIDATE("Due Date Calculation",PaymentTerms."Due Date Calculation");
      PaymentTerms.VALIDATE("Discount Date Calculation",PaymentTerms."Discount Date Calculation");
      PaymentTerms.VALIDATE("Discount %",DiscountPercent);
      PaymentTerms.VALIDATE("Calc. Pmt. Disc. on Cr. Memos",TRUE);
      PaymentTerms.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindCustomerLedgerEntry@24(VAR CustLedgerEntry@1000 : Record 21;CustomerNo@1001 : Code[20];DocumentType@1002 : Option);
    BEGIN
      CustLedgerEntry.SETRANGE("Document Type",DocumentType);
      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgerEntry.FINDFIRST;
      CustLedgerEntry.CALCFIELDS("Remaining Amount",Amount);
    END;

    [Normal]
    LOCAL PROCEDURE FindDetldCustomerLedgerEntry@76(VAR DetailedCustLedgEntry@1003 : Record 379;DocumentNo@1001 : Code[20];DocumentType@1000 : Option);
    VAR
      CustLedgerEntry@1002 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      DetailedCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
      DetailedCustLedgEntry.FINDSET;
    END;

    [Normal]
    LOCAL PROCEDURE GetMaxTolerancePaymentAmount@84() : Decimal;
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      EXIT(GeneralLedgerSetup."Max. Payment Tolerance Amount");
    END;

    [Normal]
    LOCAL PROCEDURE AttachPaymentTermsCustomer@9(VAR Customer@1000 : Record 18;PaymentTermsCode@1001 : Code[10]);
    BEGIN
      Customer.VALIDATE("Payment Terms Code",PaymentTermsCode);
      Customer.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE PostGeneralJournalLine@29(GenJournalLine@1000 : Record 81;Amount@1001 : Decimal);
    BEGIN
      UpdateGenJournalLine(GenJournalLine,Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    [Normal]
    LOCAL PROCEDURE RunChangePaymentTolerance@10(CurrencyCode@1003 : Code[10];PaymentTolerance@1001 : Decimal;MaxPmtToleranceAmount@1002 : Decimal);
    VAR
      ChangePaymentTolerance@1000 : Report 34;
    BEGIN
      CLEAR(ChangePaymentTolerance);
      ChangePaymentTolerance.InitializeRequest(FALSE,CurrencyCode,PaymentTolerance,MaxPmtToleranceAmount);
      ChangePaymentTolerance.USEREQUESTPAGE(FALSE);
      ChangePaymentTolerance.RUN;
    END;

    LOCAL PROCEDURE SetAppliesToIDGenJournalLine@16(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      GenJournalLine.VALIDATE("Applies-to ID",USERID);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateAddCurrencySetup@42(CurrencyCode@1001 : Code[10]);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      UpdatePaymentToleranceInSetup(
        CurrencyCode,
        '<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',
        GeneralLedgerSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts",
        GeneralLedgerSetup."Pmt. Disc. Tolerance Posting"::"Payment Tolerance Accounts");
    END;

    [Normal]
    LOCAL PROCEDURE UpdateCustomerPostingGroup@12(PostingGroupCode@1000 : Code[10]);
    VAR
      CustomerPostingGroup@1001 : Record 92;
    BEGIN
      CustomerPostingGroup.GET(PostingGroupCode);
      CustomerPostingGroup.VALIDATE("Payment Disc. Debit Acc.",LibraryERM.CreateGLAccountNo);
      CustomerPostingGroup.VALIDATE("Payment Disc. Credit Acc.",LibraryERM.CreateGLAccountNo);
      CustomerPostingGroup.VALIDATE("Payment Tolerance Debit Acc.",LibraryERM.CreateGLAccountNo);
      CustomerPostingGroup.VALIDATE("Payment Tolerance Credit Acc.",LibraryERM.CreateGLAccountNo);
      CustomerPostingGroup.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE UpdateGeneralLedgerSetup@4();
    VAR
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.VALIDATE(
        "Payment Tolerance Posting",GeneralLedgerSetup."Payment Tolerance Posting"::"Payment Tolerance Accounts");
      GeneralLedgerSetup.VALIDATE(
        "Pmt. Disc. Tolerance Posting",GeneralLedgerSetup."Pmt. Disc. Tolerance Posting"::"Payment Discount Accounts");
      GeneralLedgerSetup.VALIDATE("Payment Tolerance Warning",TRUE);
      GeneralLedgerSetup.VALIDATE("Pmt. Disc. Tolerance Warning",TRUE);
      GeneralLedgerSetup.MODIFY(TRUE);

      // Using Random Number for Payment Tolerance Percentage and Maximum Payment Tolerance Amount.
      RunChangePaymentTolerance('',LibraryRandom.RandDec(10,2),LibraryRandom.RandDec(10,2));
    END;

    [Normal]
    LOCAL PROCEDURE UpdateGenJournalLine@26(VAR GenJournalLine@1000 : Record 81;Amount@1001 : Decimal);
    BEGIN
      GenJournalLine.VALIDATE(Amount,Amount);
      GenJournalLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE UpdatePaymentGracePeriod@41() GracePeriodDays : Integer;
    VAR
      GeneralLedgerSetup@1000 : Record 98;
      PaymentDiscountGracePeriod@1001 : DateFormula;
    BEGIN
      GeneralLedgerSetup.GET;
      GracePeriodDays := LibraryRandom.RandInt(5);
      EVALUATE(
        PaymentDiscountGracePeriod,'<' + FORMAT(GracePeriodDays) + 'D>');  // Using Random Number for Days.
      GeneralLedgerSetup.VALIDATE("Payment Discount Grace Period",PaymentDiscountGracePeriod);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePaymentToleranceInSetup@14(CurrencyCode@1000 : Code[10];PaymentDiscountGracePeriod@1002 : Text[10];PaymentTolerancePosting@1005 : Option;PmtDiscTolerancePosting@1006 : Option);
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      EVALUATE(GeneralLedgerSetup."Payment Discount Grace Period",PaymentDiscountGracePeriod);
      GeneralLedgerSetup.VALIDATE("Payment Tolerance Posting",PaymentTolerancePosting);
      GeneralLedgerSetup.VALIDATE("Pmt. Disc. Tolerance Posting",PmtDiscTolerancePosting);

      // As there is no need to run the Adjust Exchange Rate Report so we are not validating the Additional Reporting Currency field.
      GeneralLedgerSetup."Additional Reporting Currency" := CurrencyCode;
      GeneralLedgerSetup.MODIFY(TRUE);
      RunChangePaymentTolerance('',LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(10,2));
    END;

    [Normal]
    LOCAL PROCEDURE UpdatePostingDateGenJnlLine@65(VAR GenJournalLine@1000 : Record 81;PostingDate@1001 : Date);
    BEGIN
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyDetldCustomerEntries@71(GenJournalLine@1000 : Record 81;GenJournalLine2@1001 : Record 81;Amount@1004 : Decimal;PaymentAmount@1005 : Decimal);
    BEGIN
      VerifyAmountInLedgerEntries(GenJournalLine,Amount,-PaymentAmount);
      VerifyAmountInLedgerEntries(GenJournalLine2,-PaymentAmount,PaymentAmount);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyDetldCustomerLedgerEntry@68(GenJournalLine@1000 : Record 81;EntryType@1009 : Option;Amount@1001 : Decimal);
    VAR
      DetailedCustLedgEntry@1005 : Record 379;
    BEGIN
      FindDetldCustomerLedgerEntry(DetailedCustLedgEntry,GenJournalLine."Document No.",GenJournalLine."Document Type");
      VerifyAmountInDetldCustomer(DetailedCustLedgEntry,EntryType,Amount);
    END;

    LOCAL PROCEDURE VerifyRemainingAmount@23(CustLedgerEntry@1001 : Record 21;AmountApplied@1000 : Decimal);
    BEGIN
      CustLedgerEntry.GET(CustLedgerEntry."Entry No.");
      CustLedgerEntry.CALCFIELDS("Remaining Amount",Amount);
      CustLedgerEntry.TESTFIELD("Remaining Amount",CustLedgerEntry.Amount - AmountApplied);
      Assert.AreNotEqual(
        CustLedgerEntry.Amount,
        CustLedgerEntry."Remaining Amount",
        STRSUBSTNO(AmountError,CustLedgerEntry.FIELDCAPTION(Amount),CustLedgerEntry.FIELDCAPTION("Remaining Amount")));
    END;

    [Normal]
    LOCAL PROCEDURE VerifyAmountInDetldCustomer@119(VAR DetailedCustLedgEntry@1000 : Record 379;EntryType@1002 : Option;Amount@1001 : Decimal);
    VAR
      Currency@1003 : Record 4;
    BEGIN
      IF DetailedCustLedgEntry."Currency Code" <> '' THEN
        Currency.GET(DetailedCustLedgEntry."Currency Code");
      Currency.InitRoundingPrecision;
      DetailedCustLedgEntry.SETRANGE("Entry Type",EntryType);
      DetailedCustLedgEntry.FINDFIRST;
      Assert.AreNearlyEqual(
        ROUND(Amount,Currency."Invoice Rounding Precision"),
        DetailedCustLedgEntry.Amount,
        Currency."Amount Rounding Precision",
        STRSUBSTNO(AmountError,ROUND(Amount,Currency."Invoice Rounding Precision"),Amount));
    END;

    [Normal]
    LOCAL PROCEDURE VerifyAmountInDetailedLedger@35(DocumentType@1003 : Option;EntryType@1002 : Option;DocumentNo@1001 : Code[20];Amount@1004 : Decimal);
    VAR
      DetailedCustLedgEntry@1000 : Record 379;
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Document Type",DocumentType);
      DetailedCustLedgEntry.SETRANGE("Document No.",DocumentNo);
      VerifyAmountInDetldCustomer(DetailedCustLedgEntry,EntryType,Amount);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyAmountInLedgerEntries@108(GenJournalLine@1000 : Record 81;Amount@1001 : Decimal;PaymentAmount@1002 : Decimal);
    VAR
      CustLedgerEntry@1003 : Record 21;
      DetailedCustLedgEntry@1004 : Record 379;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,GenJournalLine."Document Type",GenJournalLine."Document No.");
      DetailedCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
      DetailedCustLedgEntry.FINDSET;
      DetailedCustLedgEntry.TESTFIELD("Entry Type",DetailedCustLedgEntry."Entry Type"::"Initial Entry");
      DetailedCustLedgEntry.TESTFIELD(Amount,Amount);

      DetailedCustLedgEntry.NEXT;
      DetailedCustLedgEntry.TESTFIELD("Entry Type",DetailedCustLedgEntry."Entry Type"::Application);
      DetailedCustLedgEntry.TESTFIELD(Amount,PaymentAmount);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyLedgerEntries@69(GenJournalLine@1000 : Record 81;GenJournalLine2@1001 : Record 81);
    VAR
      DetailedCustLedgEntry@1003 : Record 379;
    BEGIN
      VerifyDetldCustomerLedgerEntry(GenJournalLine2,DetailedCustLedgEntry."Entry Type"::"Initial Entry",GenJournalLine2.Amount);
      VerifyDetldCustomerLedgerEntry(GenJournalLine2,DetailedCustLedgEntry."Entry Type"::Application,GenJournalLine.Amount);
      VerifyDetldCustomerLedgerEntry(GenJournalLine,DetailedCustLedgEntry."Entry Type"::"Initial Entry",GenJournalLine.Amount);
      VerifyDetldCustomerLedgerEntry(GenJournalLine,DetailedCustLedgEntry."Entry Type"::Application,-GenJournalLine.Amount);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyLedgerEntry@45(CustLedgerEntry@1000 : Record 21;GenJournalLineAmount@1002 : Decimal;DocumentType@1003 : Option;DocumentNo@1007 : Code[20];MaxPaymentTolerance@1005 : Decimal);
    VAR
      DetailedCustLedgEntry@1001 : Record 379;
    BEGIN
      VerifyRemainingAmount(CustLedgerEntry,GenJournalLineAmount);
      VerifyAmountInDetailedLedger(
        DocumentType,DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",DocumentNo,MaxPaymentTolerance);
      VerifyAmountInDetailedLedger(
        DocumentType,DetailedCustLedgEntry."Entry Type"::"Payment Discount",DocumentNo,
        -CustLedgerEntry."Original Pmt. Disc. Possible");
    END;

    [Normal]
    LOCAL PROCEDURE WarningsInGeneralLedgerSetup@66(PaymentToleranceWarning@1001 : Boolean;PmtDiscToleranceWarning@1002 : Boolean);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.VALIDATE("Payment Tolerance Warning",PaymentToleranceWarning);
      GeneralLedgerSetup.VALIDATE("Pmt. Disc. Tolerance Warning",PmtDiscToleranceWarning);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@17(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := NOT (Question = ConfirmMessageForPayment);
    END;

    [ModalPageHandler]
    PROCEDURE PaymentToleranceWarning@77(VAR PaymentToleranceWarning@1001 : Page 591;VAR Response@1000 : Action);
    BEGIN
      // Modal Page Handler for Payment Tolerance Warning.
      PaymentToleranceWarning.InitializeOption(OptionValue);
      Response := ACTION::Yes
    END;

    [ModalPageHandler]
    PROCEDURE ToleranceWarningPageHandler@79(VAR PaymentDiscToleranceWarning@1001 : Page 599;VAR Response@1000 : Action);
    BEGIN
      // Modal Page Handler for Payment Discount Tolerance Warning.
      PaymentDiscToleranceWarning.InitializeNewPostingAction(0);
      Response := ACTION::Yes
    END;

    BEGIN
    {
      // [FEATURE] [Payment Tolerance] [Sales]
      Check the functionalities of Payment Tolerance.
       1. Test application of Payment To Invoice by using Set Applies-to ID.
       2. Test application of Refund To Credit Memo by using Set Applies-to ID.
       3. Test application of Invoice To Payment by using Set Applies-to ID.
       4. Test application of Payment To Invoice by using Set Applies-to ID with Payment Tolerance Warning.
       5. Test application of Refund To Credit Memo by using Set Applies-to ID with Payment Tolerance Warning.
       6. Test application of Payment To Invoice by using Set Applies-to ID with Payment Discount and Payment Tolerance Warning
          Posting Date of Payment with in Payment Discount Grace Period.
       7. Test application of Payment To Invoice by using Applies-to Doc. Type and Applies-to Doc. No. with Payment Discount
          and Payment Tolerance Warning Posting Date of Payment with in Payment Discount Grace Period.
       8. Test application of Payment To Invoice by using Applies-to Doc. Type and Applies-to Doc. No. without Payment Discount
          and Payment Tolerance Warning, Posting Date of Payment After Payment Discount Grace Period.
       9. Test the Payment Tolerance with Over Payment and before Payment Discount Date.
      10. Test the Payment Tolerance with Payment equal invoce amount and before Payment Discount Date.
      11. Test the Payment Tolerance with Payment under invoce amount and before Payment Discount Date.
      12. Test the Payment Tolerance with Payment under invoce amount and before Payment Discount Date.
      13. Test the Payment Tolerance with Payment less what is owed but not within Tolerance and before Payment Discount Date.
      14. Test the Payment Tolerance with Over Payment and within Payment Tolerance Date.
      15. Test the Payment Tolerance with Payment equal invoice amount and within Payment Tolerance Date.
      16. Test the Payment Tolerance with Payment under invoice amount and within Payment Tolerance Date.
      17. Test the Payment Tolerance and Payment Discount Tolerance with positive tolerance amount and less Payment Amount.
      18. Test the Payment Tolerance and Payment Discount Tolerance with negative tolerance amount and less Payment Amount.
      19. Test the Application Rounding Entry with less Payment Application Rounding and both warnings.
      20. Test the Application Rounding Entry with more Payment Application Rounding and both warnings.

      TFS_TS_ID = 216983
        Cover Test cases:
        -------------------------------------------------------------------------------------------------------
        Test Function Name                                                                               TFS ID
        -------------------------------------------------------------------------------------------------------
        ApplyPaymentToInvoice,ApplyRefundToCreditMemo,ApplyInvoiceToPayment,
        ApplyPaymentToleranceWarning,ApplyRefundToleranceWarning,ApplyPaymentToInvoiceDiscount,
        ApplyToInvoiceWithAppliesToDoc,ApplyToInvoiceAfterGracePeriod                                     124836

      TFS_TS_ID = 216984
        Cover Test cases:
        -------------------------------------------------------------------------------------------------------
        Test Function Name                                                                               TFS ID
        -------------------------------------------------------------------------------------------------------
        OverPaymentBothWarningLCY, OverPaymentDiscountWarningFCY, OverPaymentToleranceWarningFCY
        SamePaymentBothWarningLCY, SamePaymentDiscountWarningFCY, SamePaymentToleranceWarningFCY
        LessPaymentBothWarningLCY, LessPaymentDiscountWarningFCY, LessPaymentToleranceWarningFCY
        UnderDiscDateBothWarningLCY, UnderDiscDateDiscWarningFCY, UnderDiscDateTolWarningFCY
        UnderTolDateBothWarningLCY, UnderTolDateDiscWarningFCY, UnderTolDateTolWarningFCY
        OverPaymentTolBothWarningLCY, OverPaymentTolDiscWarningFCY, OverPaymentTolAndTolWarningFCY
        SamePaymentTolBothWarningLCY, SamePaymentTolDiscWarningFCY, SamePaymentTolAndTolWarningFCY
        LessPaymentTolBothWarningLCY, LessPaymentTolDiscWarningFCY, LessPaymentTolAndTolWarningFCY        126463

      TFS_TS_ID = 217003
        Cover Test cases:
        -------------------------------------------------------------------------------------------------------
        Test Function Name                                                                               TFS ID
        -------------------------------------------------------------------------------------------------------
        LessToleranceBothWarningLCY, LessToleranceDiscWarningFCY, LessToleranceWithWarningFCY
        PaymentBothWarningWithDiscount, DiscountWarningWithDiscount, PaymentTolWarningWithDiscount
        LessPaymentApplicationRounding, MorePaymentApplicationRounding                                    126463
    }
    END.
  }
}

