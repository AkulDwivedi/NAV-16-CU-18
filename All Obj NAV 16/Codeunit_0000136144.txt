OBJECT Codeunit 136144 Service Order Warehouse Pick
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryService@1003 : Codeunit 131902;
      LibrarySales@1002 : Codeunit 130509;
      LibraryWarehouse@1001 : Codeunit 132204;
      LibraryInventory@1004 : Codeunit 132201;
      isInitialized@1000 : Boolean;
      ERR_ShipmentAndWorksheetLinesNotEqual@1006 : TextConst 'ENU=Number of shipment lines are not equal to number of worksheet lines added for warehouse shipment';
      ERR_SourceLineNoMismatchedInShipmentLineAndWorksheetLine@1007 : TextConst 'ENU="""Source Line No."" of shipment line is different from that of worksheet line for warehouse shipment"';
      ERR_NoWorksheetLinesCreated@1008 : TextConst 'ENU=There are no Warehouse Worksheet Lines created.';
      ErrorMessage@1009 : Text[1024];
      ERR_MultipleWhseWorksheetTemplate@1012 : TextConst 'ENU=There exist multiple warehouse worksheet templates for page %1.';
      ERR_Unexpected@1014 : TextConst 'ENU=Unexpected error.';
      PickWorksheetPage@1013 : TextConst 'ENU=Pick Worksheet';

    [Test]
    [HandlerFunctions(HandleRequestPageCreatePick,HandleConfirm,HandleMessage,HandlePickSelectionPage)]
    PROCEDURE TestPickWorksheetCreatePick@22();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1002 : Record 5902;
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1000 : Record 7321;
      WhseWorksheetLine@1005 : Record 7326;
    BEGIN
      DeleteExistingWhsWorksheetPickLines;
      CreatePickWorksheet(ServiceHeader,ServiceLine,WarehouseShipmentHeader,WarehouseShipmentLine,1);
      ReceiveItemStockInWarehouse(ServiceLine,GetWhiteLocation);
      COMMIT;
      GetLatestWhseWorksheetLines(WarehouseShipmentHeader,WhseWorksheetLine);
      REPEAT
        WhseWorksheetLine.VALIDATE("Qty. to Handle",WhseWorksheetLine.Quantity);
        WhseWorksheetLine.MODIFY(TRUE);
      UNTIL WhseWorksheetLine.NEXT <= 0;
      COMMIT;
      CODEUNIT.RUN(CODEUNIT::"Whse. Create Pick",WhseWorksheetLine);
    END;

    [Test]
    [HandlerFunctions(HandlePickSelectionPage)]
    PROCEDURE TestErrorOnRecreatingPickWorksheet@10();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1003 : Record 5902;
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      CreatePickWorksheet(ServiceHeader,ServiceLine,WarehouseShipmentHeader,WarehouseShipmentLine,3);
      ASSERTERROR InvokeGetWarehouseDocument;
      ErrorMessage := ERR_NoWorksheetLinesCreated;
      Assert.AreEqual(ErrorMessage,GETLASTERRORTEXT,ERR_Unexpected);
    END;

    [Test]
    [HandlerFunctions(HandlePickSelectionPage)]
    PROCEDURE TestPickWorksheetGetWarehouseDocuments@5();
    VAR
      ServiceHeader@1004 : Record 5900;
      ServiceLine@1002 : Record 5902;
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1000 : Record 7321;
    BEGIN
      CreatePickWorksheet(ServiceHeader,ServiceLine,WarehouseShipmentHeader,WarehouseShipmentLine,3);
      ValidateWorksheetLinesWithShipmentLines(WarehouseShipmentHeader,WarehouseShipmentLine);
    END;

    [Test]
    [HandlerFunctions(HandlePickSelectionPage)]
    PROCEDURE TestPickWkshtGetWhseDocumentsOnReopenEditRelease@8();
    VAR
      ServiceHeader@1006 : Record 5900;
      ServiceLine@1005 : Record 5902;
      ServiceItemLine@1004 : Record 5901;
      ServiceItem@1010 : Record 5940;
      WarehouseShipmentHeader@1003 : Record 7320;
      WarehouseShipmentLine@1002 : Record 7321;
      WhseShptRelease@1009 : Codeunit 7310;
    BEGIN
      CreatePickWorksheet(ServiceHeader,ServiceLine,WarehouseShipmentHeader,WarehouseShipmentLine,4);
      // reopen service order, add new lines and release again
      LibraryService.ReopenServiceDocument(ServiceHeader);
      CreateServiceItem(ServiceItem,ServiceHeader."Customer No.",LibraryInventory.CreateItemNo);
      CLEAR(ServiceItemLine);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceItem);
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceItem);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      // release warehouse shipment and create pick worksheet again
      LibraryWarehouse.CreateWhseShipmentFromServiceOrder(ServiceHeader);
      WarehouseShipmentHeader.FINDLAST;
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
      WhseShptRelease.Release(WarehouseShipmentHeader);
      InvokeGetWarehouseDocument;
      // Validate result
      ValidateWorksheetLinesWithShipmentLines(WarehouseShipmentHeader,WarehouseShipmentLine);
    END;

    [Test]
    PROCEDURE TestWhsePickRequestOnReleaseWhseShipment@3();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1004 : Record 5902;
      WarehouseShipmentHeader@1001 : Record 7320;
      WarehouseShipmentLine@1000 : Record 7321;
      WhsePickRequest@1002 : Record 7325;
    BEGIN
      CreateAndReleaseWhseShipment(ServiceHeader,ServiceLine,WarehouseShipmentHeader,WarehouseShipmentLine,3);
      WITH WhsePickRequest DO
        GET("Document Type"::Shipment,"Document Subtype"::"0",WarehouseShipmentHeader."No.",GetWhiteLocation);
    END;

    [Normal]
    LOCAL PROCEDURE ValidateWorksheetLinesWithShipmentLines@9(VAR WarehouseShipmentHeader@1002 : Record 7320;VAR WarehouseShipmentLine@1000 : Record 7321);
    VAR
      WhseWorksheetLine@1001 : Record 7326;
    BEGIN
      GetLatestWhseWorksheetLines(WarehouseShipmentHeader,WhseWorksheetLine);
      Assert.AreEqual(WhseWorksheetLine.COUNT,WarehouseShipmentLine.COUNT,
        ERR_ShipmentAndWorksheetLinesNotEqual + ' ' + WarehouseShipmentHeader."No.");
      REPEAT
        Assert.AreEqual(WhseWorksheetLine."Source Line No.",WarehouseShipmentLine."Source Line No.",
          ERR_SourceLineNoMismatchedInShipmentLineAndWorksheetLine + ' ' + WarehouseShipmentHeader."No.");
        WarehouseShipmentLine.NEXT;
      UNTIL WhseWorksheetLine.NEXT = 0;
    END;

    [Normal]
    LOCAL PROCEDURE CreatePickWorksheet@12(VAR ServiceHeader@1004 : Record 5900;VAR ServiceLine@1000 : Record 5902;VAR WarehouseShipmentHeader@1003 : Record 7320;VAR WarehouseShipmentLine@1002 : Record 7321;NumberOfServLines@1001 : Integer);
    BEGIN
      // release warehouse shipment and create pick worksheet again
      CreateAndReleaseWhseShipment(ServiceHeader,ServiceLine,WarehouseShipmentHeader,WarehouseShipmentLine,NumberOfServLines);
      InvokeGetWarehouseDocument;
    END;

    [Normal]
    LOCAL PROCEDURE CreateServiceOrder@52(VAR ServiceHeader@1002 : Record 5900;VAR ServiceLine@1001 : Record 5902;VAR ServiceItemLine@1000 : Record 5901;NumberOfServLines@1006 : Integer);
    VAR
      Item@1004 : Record 27;
      ServiceItem@1003 : Record 5940;
      LineCount@1007 : Integer;
    BEGIN
      IF NumberOfServLines <= 0 THEN
        EXIT;
      LibraryInventory.CreateItem(Item);
      CreateServiceItem(ServiceItem,LibrarySales.CreateCustomerNo,Item."No.");
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      CreateServiceLine(ServiceLine,ServiceHeader,ServiceItem);
      // creating multiple service lines
      IF NumberOfServLines > 1 THEN BEGIN
        CreateServiceItem(ServiceItem,ServiceItem."Customer No.",Item."No.");
        CLEAR(ServiceItemLine);
        LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
        FOR LineCount := 2 TO NumberOfServLines DO
          CreateServiceLine(ServiceLine,ServiceHeader,ServiceItem);
      END;
      CLEAR(ServiceLine);
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Order);
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FIND('-');
    END;

    LOCAL PROCEDURE CreateAndReleaseServiceOrder@4(VAR ServiceHeader@1000 : Record 5900;VAR ServiceLine@1004 : Record 5902;VAR ServiceItemLine@1003 : Record 5901;NumberOfServLines@1001 : Integer);
    BEGIN
      CreateServiceOrder(ServiceHeader,ServiceLine,ServiceItemLine,NumberOfServLines);
      LibraryService.ReleaseServiceDocument(ServiceHeader);
    END;

    [Normal]
    LOCAL PROCEDURE CreateAndReleaseWhseShipment@1(VAR ServiceHeader@1003 : Record 5900;VAR ServiceLine@1004 : Record 5902;VAR WarehouseShipmentHeader@1001 : Record 7320;VAR WarehouseShipmentLine@1000 : Record 7321;NumberOfServLines@1005 : Integer);
    VAR
      WhseShptRelease@1002 : Codeunit 7310;
    BEGIN
      Initialize;
      CreateWarehouseShipment(ServiceHeader,ServiceLine,WarehouseShipmentHeader,WarehouseShipmentLine,NumberOfServLines);
      WhseShptRelease.Release(WarehouseShipmentHeader);
    END;

    [Normal]
    LOCAL PROCEDURE CreateWarehouseShipment@33(VAR ServiceHeader@1004 : Record 5900;VAR ServiceLine@1002 : Record 5902;VAR WarehouseShipmentHeader@1006 : Record 7320;VAR WarehouseShipmentLine@1005 : Record 7321;NumberOfServLines@1007 : Integer);
    VAR
      ServiceItemLine@1003 : Record 5901;
    BEGIN
      CreateAndReleaseServiceOrder(ServiceHeader,ServiceLine,ServiceItemLine,NumberOfServLines);
      LibraryWarehouse.CreateWhseShipmentFromServiceOrder(ServiceHeader);
      WarehouseShipmentHeader.FINDLAST;
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateServiceItem@101(VAR ServiceItem@1000 : Record 5940;CustomerNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      CLEAR(ServiceItem);
      LibraryService.CreateServiceItem(ServiceItem,CustomerNo);
      ServiceItem.VALIDATE("Item No.",ItemNo);
      ServiceItem.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLine@94(VAR ServiceLine@1000 : Record 5902;ServiceHeader@1003 : Record 5900;ServiceItem@1001 : Record 5940);
    VAR
      Item@1002 : Record 27;
      LibraryInventory@1004 : Codeunit 132201;
    BEGIN
      CLEAR(ServiceLine);
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
      ServiceLine.VALIDATE("Service Item No.",ServiceItem."No.");
      ServiceLine.VALIDATE(Quantity,RANDOM(10));  // Use Random For Quantity and Quantity to Consume.
      ServiceLine.VALIDATE("Location Code",GetWhiteLocation);
      ServiceLine.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE DeleteExistingWhsWorksheetPickLines@16();
    VAR
      WhseWorksheetLine@1000 : Record 7326;
      WhseWorksheetTemplate@1001 : Record 7328;
    BEGIN
      WhseWorksheetTemplate.SETRANGE("Page ID",PAGE::"Pick Worksheet");
      Assert.AreEqual(1,WhseWorksheetTemplate.COUNT,STRSUBSTNO(ERR_MultipleWhseWorksheetTemplate,PickWorksheetPage));
      IF WhseWorksheetTemplate.FINDFIRST THEN BEGIN
        WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetTemplate.Name);
        WhseWorksheetLine.DELETEALL;
      END;
    END;

    [Normal]
    LOCAL PROCEDURE GetLatestWhseWorksheetLines@17(VAR WarehouseShipmentHeader@1000 : Record 7320;VAR WhseWorksheetLine@1001 : Record 7326);
    BEGIN
      WhseWorksheetLine.SETRANGE("Whse. Document Type",WhseWorksheetLine."Whse. Document Type"::Shipment);
      WhseWorksheetLine.SETRANGE("Whse. Document No.",WarehouseShipmentHeader."No.");
      WhseWorksheetLine.FIND('-');
    END;

    [Normal]
    LOCAL PROCEDURE GetWhiteLocation@48() : Code[10];
    VAR
      LocationWhite@1000 : Record 14;
    BEGIN
      LocationWhite.SETRANGE("Directed Put-away and Pick",TRUE);
      LocationWhite.FINDFIRST;
      EXIT(LocationWhite.Code);
    END;

    [ConfirmHandler]
    PROCEDURE HandleConfirm@11(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE HandleMessage@2(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE HandlePickSelectionPage@7(VAR PickSelectionTestPage@1000 : TestPage 7343);
    BEGIN
      PickSelectionTestPage.LAST;
      PickSelectionTestPage.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE HandleRequestPageCreatePick@14(VAR CreatePickTestPage@1000 : TestRequestPage 5754);
    BEGIN
      CreatePickTestPage.OK.INVOKE;
    END;

    LOCAL PROCEDURE Initialize@20();
    VAR
      WarehouseEmployee@1000 : Record 7301;
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      CLEAR(ErrorMessage);
      IF isInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,GetWhiteLocation,TRUE);
      COMMIT;
      isInitialized := TRUE;
    END;

    [Normal]
    LOCAL PROCEDURE InvokeGetWarehouseDocument@13();
    VAR
      PickWorksheetTestPage@1000 : TestPage 7345;
    BEGIN
      PickWorksheetTestPage.TRAP;
      PickWorksheetTestPage.OPENEDIT;
      PickWorksheetTestPage."Get Warehouse Documents".INVOKE;
      PickWorksheetTestPage.CLOSE;
    END;

    [Normal]
    LOCAL PROCEDURE ReceiveItemStockInWarehouse@18(VAR ServiceLine@1000 : Record 5902;LocationCode@1001 : Code[10]);
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1005 : Record 39;
      WhseActivityLine@1006 : Record 5767;
      LibraryPurchase@1003 : Codeunit 130512;
      GetSourceDocInbound@1007 : Codeunit 5751;
      WarehouseReceipt@1008 : TestPage 5768;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      WITH ServiceLine DO
        REPEAT
          CLEAR(PurchaseLine);
          IF Type = Type::Item THEN BEGIN
            LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,"No.",Quantity);
            PurchaseLine.VALIDATE("Location Code",LocationCode);
            PurchaseLine.MODIFY(TRUE);
          END;
        UNTIL NEXT <= 0;

      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      WarehouseReceipt.TRAP;
      GetSourceDocInbound.CreateFromPurchOrder(PurchaseHeader);
      WarehouseReceipt."Post Receipt".INVOKE;
      WITH WhseActivityLine DO BEGIN
        SETRANGE("Activity Type","Activity Type"::"Put-away");
        FINDLAST;
        SETRANGE("No.","No.");
        SETRANGE(Breakbulk);
      END;
      CODEUNIT.RUN(CODEUNIT::"Whse.-Act.-Register (Yes/No)",WhseActivityLine);
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [Pick] [Service]
      Test for warehouse shipment pick functionality through warehouse pick worksheet.

      Test scenarios:
      1. Only released whse shipment headers are displayed that are not fully shipped?
      2. If no pick has been created for that header then create pick worksheet lines that
         match the source doc header/lines.
      3. If a pick cannot be created on all the selectd docuements then error thrown.
      3. Repeat scenario (release/ reopen/ add/ release) should work only for added lines.
      4. Play around with location header/ line for source doc.
      5. Play around with location header/ line for Pick work sheet.
      6. Check for multiselection
      7. Make several service order lines, several sales order lines resulting in at least for
         pick worksheet lines trying to grab the same item.
      8. Play around with the qty to handle and verify that the qty to pick is according to the
         revised OLH.
    }
    END.
  }
}

