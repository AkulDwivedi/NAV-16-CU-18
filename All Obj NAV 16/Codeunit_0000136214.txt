OBJECT Codeunit 136214 Marketing Campaign Pricing
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryERM@1040 : Codeunit 131300;
      LibraryInventory@1016 : Codeunit 132201;
      LibraryMarketing@1002 : Codeunit 131900;
      LibrarySales@1006 : Codeunit 130509;
      LibraryVariableStorage@1008 : Codeunit 131004;
      LibraryRandom@1014 : Codeunit 130440;
      IsInitialized@1001 : Boolean;
      PriceDateChangeError@1005 : TextConst 'ENU="If Sales Type = Campaign, then you can only change Starting Date and Ending Date from the Campaign Card."';
      DiscountDateChangeError@1004 : TextConst 'ENU="You can only change the Starting Date and Ending Date from the Campaign Card when Sales Type = Campaign"';
      CustomerCreationMessage@1007 : TextConst 'ENU=record of the Customer has been created.';
      SalesPriceConfirmMessage@1012 : TextConst 'ENU=There are no Sales Prices or Sales Line Discounts currently linked to this %1. Do you still want to activate?';
      SalesPriceError@1010 : TextConst 'ENU=To activate the sales prices and/or line discounts, you must apply the relevant Segment Line(s) to the Campaign and place a check mark in the Campaign Target field on the Segment Line.';
      CampaignActivatedMessage@1011 : TextConst 'ENU=Campaign %1 is now activated.';
      ValueMustNotMatch@1009 : TextConst 'ENU=Value must not match.';
      ValueMustMatch@1013 : TextConst 'ENU=Value must match.';

    [Test]
    PROCEDURE CampaignSalesPriceDateChangeError@1();
    VAR
      Campaign@1000 : Record 5071;
      SalesPrice@1001 : Record 7002;
    BEGIN
      // Verify error when change the date on Campaign Sales Prices.

      // Setup: Create Campaign with Sales Price.
      Initialize;
      CreateAndUpdateCampaign(Campaign);
      LibraryMarketing.CreateSalesPriceForCampaign(SalesPrice,CreateItem,Campaign."No.");

      // Exercise.
      ASSERTERROR ChangeDateOnSalesPricePage(Campaign."No.");

      // Verify: Verify error when change date on Campaign Sales Prices.
      Assert.ExpectedError(PriceDateChangeError);
    END;

    [Test]
    PROCEDURE CampaignSalesLineDiscountDateChangeError@7();
    VAR
      Campaign@1003 : Record 5071;
      SalesLineDiscount@1001 : Record 7004;
    BEGIN
      // Verify error when change the date on Campaign Sales Line Discounts.

      // Setup: Create Campaign with Sales Line Discount.
      Initialize;
      CreateAndUpdateCampaign(Campaign);
      LibraryMarketing.CreateSalesLineDiscount(SalesLineDiscount,Campaign."No.",CreateItem);

      // Exercise.
      ASSERTERROR ChangeDateOnSalesLineDiscountPage(Campaign."No.");

      // Verify: Verify error when change the date on Campaign Sales Line Discounts.
      Assert.ExpectedError(DiscountDateChangeError);
    END;

    [Test]
    PROCEDURE ChangeDateOnSalesPriceAndLineDiscount@5();
    VAR
      Campaign@1005 : Record 5071;
      SalesLineDiscount@1003 : Record 7004;
      SalesPrice@1001 : Record 7002;
      CampaignCard@1006 : TestPage 5086;
      SalesPrices@1002 : TestPage 7002;
      SalesLineDiscounts@1008 : TestPage 7004;
    BEGIN
      // Verify dates on Sales Prices and Sales Line Discounts after changing Campaign dates.

      // Setup: Create Campaign with Sales Price and Line Discount.
      Initialize;
      CreateAndUpdateCampaign(Campaign);
      LibraryMarketing.CreateSalesPriceForCampaign(SalesPrice,CreateItem,Campaign."No.");
      LibraryMarketing.CreateSalesLineDiscount(SalesLineDiscount,Campaign."No.",SalesPrice."Item No.");

      // Exercise.
      ChangeDateOnCampaignCard(CampaignCard,Campaign."No.");

      // Verify: Verify dates on Sales Price and Line Discount.
      SalesPrices.TRAP;
      CampaignCard."Page Sales Prices".INVOKE;
      Assert.AreEqual(CampaignCard."Starting Date".ASDATE,SalesPrices."Starting Date".ASDATE,ValueMustMatch);

      SalesLineDiscounts.TRAP;
      CampaignCard."Page Sales Line Discounts".INVOKE;
      Assert.AreEqual(CampaignCard."Starting Date".ASDATE,SalesLineDiscounts."Starting Date".ASDATE,ValueMustMatch);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SalesOrderPriceWithSegment@2();
    VAR
      Contact@1001 : Record 5050;
      SalesLine@1000 : Record 37;
      SalesPrice@1011 : Record 7002;
      CustomerNo@1036 : Code[20];
    BEGIN
      // Verify price on Sales Order without activating Campaign while Segment is created for the Campaign.

      // Setup: Create Campaign with Sales Price. Create Contact with Customer and create Segment.
      Initialize;
      CreateSalesPriceForCampaign(SalesPrice);
      CreateCustomerForContact(Contact);
      CreateSegment(SalesPrice."Sales Code",Contact."No.");
      CustomerNo := FindContactBusinessRelation(Contact."No.");
      UpdateCustomerPaymentTermsCode(CustomerNo);  // Added fix for G1 Country

      // Exercise.
      CreateSalesOrder(SalesLine,CustomerNo,SalesPrice."Item No.",SalesPrice."Minimum Quantity",SalesPrice."Sales Code");

      // Verify: Verify price on Sales Order.
      Assert.AreNotEqual(SalesPrice."Unit Price",SalesLine."Unit Price",ValueMustNotMatch);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE ActivateCampaignWithoutPrice@3();
    VAR
      Campaign@1002 : Record 5071;
    BEGIN
      // Verify error when activate Campaign having no price and no Segment.

      // Setup: Create Campaign without Sales Price.
      Initialize;
      CreateAndUpdateCampaign(Campaign);
      LibraryVariableStorage.Enqueue(SalesPriceConfirmMessage);  // Enqueue for ConfirmHandler.

      // Exercise.
      ASSERTERROR ActivatePriceLineDiscountPage(Campaign."No.");

      // Verify: Verify error when activate Campaign having no price and no Segment.
      Assert.ExpectedError(SalesPriceError);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ActivateCampaignWithSegmentAndNoPrice@11();
    VAR
      Campaign@1002 : Record 5071;
      Contact@1006 : Record 5050;
    BEGIN
      // Verify Campaign is activated without Agreement when create a Segment for the Campaign.

      // Setup: Create Campaign without Sales Price. Create Segment.
      Initialize;
      CreateAndUpdateCampaign(Campaign);
      LibraryMarketing.CreateContact(Contact);
      CreateSegment(Campaign."No.",Contact."No.");

      // Enqueue for ConfirmHandler and MessageHandler.
      LibraryVariableStorage.Enqueue(SalesPriceConfirmMessage);
      LibraryVariableStorage.Enqueue(STRSUBSTNO(CampaignActivatedMessage,Campaign."No."));

      // Exercise.
      ActivatePriceLineDiscountPage(Campaign."No.");

      // Verify: Verification is done in MessageHandler.
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ActivateCampaignWithLog@6();
    BEGIN
      // Verify Sales Order when Campaign is activated with a logged Segment and Campaign Target is True.
      ActivateCampaignFollowUpSeg(FALSE);
    END;

    [Test]
    PROCEDURE ActivateCampaignWithLogAndCampaignTargetFalse@23();
    VAR
      Contact@1006 : Record 5050;
      SalesPrice@1000 : Record 7002;
    BEGIN
      // Verify error when activate Campaign with logged Segment and Campaign Target is False.

      // Setup: Create Campaign with Sales Price. Create Contact. Create a logged Segment.
      Initialize;
      CreateSalesPriceForCampaign(SalesPrice);
      LibraryMarketing.CreateContact(Contact);
      CreateLoggedSegment(SalesPrice."Sales Code",Contact."No.",FALSE,FALSE);

      // Exercise.
      ASSERTERROR ActivatePriceLineDiscountPage(SalesPrice."Sales Code");

      // Verify: Verify error when activate Campaign with logged Segment and Campaign Target is False.
      Assert.ExpectedError(SalesPriceError);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE ActivateCampaignWithLogWithFollowUpSeg@10();
    BEGIN
      // Verify Sales Order Price when Campaign is activated with a logged Segment and Follow-up Segment is True.
      ActivateCampaignFollowUpSeg(TRUE);
    END;

    LOCAL PROCEDURE ActivateCampaignFollowUpSeg@24(FollowUpSeg@1000 : Boolean);
    VAR
      Contact@1003 : Record 5050;
      SalesLine@1002 : Record 37;
      SalesPrice@1001 : Record 7002;
      CustomerNo@1004 : Code[20];
    BEGIN
      // Setup: Create Campaign with Sales Price. Create Contact with Customer. Create a logged Segment. Activate Campaign Price.
      Initialize;
      CreateSalesPriceForCampaign(SalesPrice);
      CreateCustomerForContact(Contact);
      CreateLoggedSegment(SalesPrice."Sales Code",Contact."No.",TRUE,FollowUpSeg);
      LibraryVariableStorage.Enqueue(STRSUBSTNO(CampaignActivatedMessage,SalesPrice."Sales Code"));  // Enqueue for MessageHandler.
      ActivatePriceLineDiscountPage(SalesPrice."Sales Code");

      CustomerNo := FindContactBusinessRelation(Contact."No.");
      UpdateCustomerPaymentTermsCode(CustomerNo);  // Added fix for G1 Country

      // Exercise: Create Sales Order.
      CreateSalesOrder(SalesLine,CustomerNo,SalesPrice."Item No.",SalesPrice."Minimum Quantity",SalesPrice."Sales Code");

      // Verify: Verify price on Sales Order.
      SalesLine.TESTFIELD("Unit Price",SalesPrice."Unit Price");
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SalesOrderPriceDeleteContactFromSeg@12();
    VAR
      SalesPrice@1011 : Record 7002;
      SalesLine@1000 : Record 37;
    BEGIN
      // Verify Sales Order Price after deleting Contact from Segment.

      // Setup & Exercise: Create Campaign with Sales Price.
      Initialize;
      CreateSalesPriceForCampaign(SalesPrice);
      SalesOrderAfterRemovingContactFromSegment(SalesLine,SalesPrice."Sales Code",SalesPrice."Item No.",SalesPrice."Minimum Quantity");

      // Verify: Verify price on Sales Order.
      Assert.AreNotEqual(SalesPrice."Unit Price",SalesLine."Unit Price",ValueMustNotMatch);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SalesOrderDiscountDeleteContactFromSeg@15();
    VAR
      SalesLine@1000 : Record 37;
      SalesLineDiscount@1011 : Record 7004;
    BEGIN
      // Verify Sales Order Line Discount after deleting Customer for Contact.

      // Setup & Exercise: Create Campaign and Sales Line Discount.
      Initialize;
      CreateSalesLineDiscountForCampaign(SalesLineDiscount);
      SalesOrderAfterRemovingContactFromSegment(
        SalesLine,SalesLineDiscount."Sales Code",SalesLineDiscount.Code,SalesLineDiscount."Minimum Quantity");

      // Verify: Verify Line Discount on Sales Order.
      Assert.AreNotEqual(SalesLine."Line Discount %",SalesLineDiscount."Line Discount %",ValueMustNotMatch);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SalesOrderPriceAddNewContactToSeg@14();
    VAR
      Contact@1001 : Record 5050;
      Contact2@1004 : Record 5050;
      SalesLine@1000 : Record 37;
      SalesLine2@1005 : Record 37;
      SalesPrice@1011 : Record 7002;
      SegmentNo@1002 : Code[20];
    BEGIN
      // Verify Sales Order Price after deleting existing Contact from Segment and adding a new Contact.

      // Setup: Create Campaign with Sales Price. Create Contact with Customer and create Segment. Activate Campaign.
      Initialize;
      CreateSalesPriceForCampaign(SalesPrice);
      CreateCustomerForContact(Contact);
      SegmentNo := CreateSegment(SalesPrice."Sales Code",Contact."No.");
      LibraryVariableStorage.Enqueue(STRSUBSTNO(CampaignActivatedMessage,SalesPrice."Sales Code"));  // Enqueue for MessageHandler.
      ActivatePriceLineDiscountPage(SalesPrice."Sales Code");

      // Remove Contact from Segment. Create and add new Contact to Segment.
      RemoveContactFromSegment(Contact."No.",SegmentNo);
      CreateCustomerForContact(Contact2);
      AddContactsToSegment(Contact2."No.",SegmentNo);

      // Exercise: Create Sales Orders for both Contacts.
      CreateSalesOrder(
        SalesLine,FindContactBusinessRelation(Contact."No."),SalesPrice."Item No.",SalesPrice."Minimum Quantity",
        SalesPrice."Sales Code");
      CreateSalesOrder(
        SalesLine2,FindContactBusinessRelation(Contact2."No."),SalesPrice."Item No.",SalesPrice."Minimum Quantity",
        SalesPrice."Sales Code");

      // Verify: Verify price on Sales Orders.
      Assert.AreNotEqual(SalesPrice."Unit Price",SalesLine."Unit Price",ValueMustNotMatch);
      Assert.AreNotEqual(SalesPrice."Unit Price",SalesLine2."Unit Price",ValueMustNotMatch);
    END;

    [Test]
    PROCEDURE UpdateSalesPriceWorksheet@22();
    VAR
      Item@1002 : Record 27;
      SalesPrice@1000 : Record 7002;
      LibraryCosting@1003 : Codeunit 132200;
    BEGIN
      // Verify price after suggesting Sales Price on Sales Price Worksheet.

      // Setup: Create Campaign and Sales Line Discount. Create Contact with Customer and create Segment. Activate Campaign
      Initialize;
      CreateSalesPriceForCampaign(SalesPrice);
      Item.GET(SalesPrice."Item No.");

      // Exercise: Suggest Sales Price on Worksheet.
      LibraryCosting.SuggestSalesPriceWorksheet(Item,SalesPrice."Sales Code",SalesPrice."Sales Type",0,1);  // Use 0 for PriceLowerLimit  and 1 for UnitPriceFactor.

      // Verify: Verify Sales Price Worksheet for suggested prices.
      VerifySalesPriceWksht(SalesPrice);
    END;

    [Test]
    [HandlerFunctions(MessageHandler,GetSalesPricePageHandler)]
    PROCEDURE GetPriceOnSalesLine@25();
    VAR
      Contact@1001 : Record 5050;
      SalesPrice@1000 : Record 7002;
      SalesHeader@1004 : Record 36;
      SalesLine@1002 : Record 37;
      SalesPriceCalcMgt@1003 : Codeunit 7000;
    BEGIN
      // Verify price after using Get Price on Sales Line.

      // Setup: Create Campaign and Sales Line Discount. Create Contact with Customer and create Segment. Activate Campaign.
      Initialize;
      CreateSalesPriceForCampaign(SalesPrice);
      CreateCustomerForContact(Contact);
      CreateSegment(SalesPrice."Sales Code",Contact."No.");
      LibraryVariableStorage.Enqueue(STRSUBSTNO(CampaignActivatedMessage,SalesPrice."Sales Code"));  // Enqueue for MessageHandler.
      ActivatePriceLineDiscountPage(SalesPrice."Sales Code");

      // Create Sales Order.
      CreateSalesOrder(
        SalesLine,FindContactBusinessRelation(Contact."No."),SalesPrice."Item No.",SalesPrice."Minimum Quantity",
        SalesPrice."Sales Code");
      LibraryVariableStorage.Enqueue(SalesPrice."Unit Price");
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");

      // Exercise: Get Sales Price on Sales Line.
      CLEAR(SalesPriceCalcMgt);
      SalesPriceCalcMgt.GetSalesLinePrice(SalesHeader,SalesLine);

      // Verify: Verify prices on Get Sales Price Page in GetSalesPricePageHandler.
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ActivatePriceLineDiscountPage@76(No@1001 : Code[20]);
    VAR
      CampaignCard@1000 : TestPage 5086;
    BEGIN
      CampaignCard.OPENVIEW;
      CampaignCard.FILTER.SETFILTER("No.",No);
      CampaignCard.ActivateSalesPricesLineDisc.INVOKE;
    END;

    LOCAL PROCEDURE AddContactsToSegment@30(ContactNo@1004 : Code[20];SegmentNo@1003 : Code[20]);
    VAR
      Contact@1002 : Record 5050;
      SegmentHeader@1001 : Record 5076;
      AddContacts@1000 : Report 5198;
    BEGIN
      Contact.SETRANGE("No.",ContactNo);
      SegmentHeader.SETRANGE("No.",SegmentNo);
      AddContacts.SETTABLEVIEW(SegmentHeader);
      AddContacts.SETTABLEVIEW(Contact);
      AddContacts.USEREQUESTPAGE(FALSE);
      AddContacts.RUN;
    END;

    LOCAL PROCEDURE ChangeDateOnSalesPricePage@19(CampaignNo@1002 : Code[20]);
    VAR
      SalesPrices@1000 : TestPage 7002;
    BEGIN
      SalesPrices.OPENEDIT;
      SalesPrices.FILTER.SETFILTER("Sales Type",SalesPrices."Sales Type".GETOPTION(4));  // Take Index 4 for Campaign option.
      SalesPrices.FILTER.SETFILTER("Sales Code",CampaignNo);
      SalesPrices."Starting Date".SETVALUE(CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));  // Use RandInt to change Date.
    END;

    LOCAL PROCEDURE ChangeDateOnSalesLineDiscountPage@20(CampaignNo@1001 : Code[20]);
    VAR
      SalesLineDiscounts@1000 : TestPage 7004;
    BEGIN
      SalesLineDiscounts.OPENEDIT;
      SalesLineDiscounts.FILTER.SETFILTER("Sales Type",SalesLineDiscounts."Sales Type".GETOPTION(4));  // Take Index 4 for Campaign option.
      SalesLineDiscounts.FILTER.SETFILTER("Sales Code",CampaignNo);
      SalesLineDiscounts."Starting Date".SETVALUE(CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));  // Use RandInt to change Date.
    END;

    LOCAL PROCEDURE ChangeDateOnCampaignCard@21(VAR CampaignCard@1000 : TestPage 5086;CampaignNo@1001 : Code[20]);
    BEGIN
      CampaignCard.OPENEDIT;
      CampaignCard.FILTER.SETFILTER("No.",CampaignNo);
      CampaignCard."Starting Date".SETVALUE(CALCDATE('<-' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));  // Use RandInt to change Date.
    END;

    LOCAL PROCEDURE CreateAndUpdateCampaign@65(VAR Campaign@1000 : Record 5071);
    BEGIN
      LibraryMarketing.CreateCampaign(Campaign);
      Campaign.VALIDATE("Starting Date",WORKDATE);
      Campaign.VALIDATE("Ending Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));  // Use RandInt to validate Date.
      Campaign.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerForContact@35(VAR Contact@1000 : Record 5050);
    BEGIN
      LibraryMarketing.CreateContact(Contact);
      LibraryVariableStorage.Enqueue(CustomerCreationMessage);  // Enqueue for MessageHandler.
      Contact.CreateCustomer(GetCustomerTemplateCode);
    END;

    LOCAL PROCEDURE CreateItem@13() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));  // Random value for Unit Price.
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateLogForSegment@18(SegmentNo@1001 : Code[20];FollowUp@1002 : Boolean);
    VAR
      LogSegment@1000 : Report 5185;
    BEGIN
      LogSegment.SetSegmentNo(SegmentNo);
      LogSegment.InitializeRequest(FALSE,FollowUp);
      LogSegment.USEREQUESTPAGE(FALSE);
      LogSegment.RUN;
    END;

    LOCAL PROCEDURE CreateLoggedSegment@46(CampaignNo@1001 : Code[20];ContactNo@1002 : Code[20];CampaignTarget@1003 : Boolean;FollowUp@1004 : Boolean);
    VAR
      SegmentNo@1000 : Code[20];
    BEGIN
      SegmentNo := CreateSegment(CampaignNo,ContactNo);
      UpdateSegmentWithInteractionTemplate(SegmentNo,CampaignTarget);
      CreateLogForSegment(SegmentNo,FollowUp);
    END;

    LOCAL PROCEDURE CreateSalesOrder@40(VAR SalesLine@1001 : Record 37;CustomerNo@1000 : Code[20];ItemNo@1003 : Code[20];Quantity@1004 : Decimal;CampaignNo@1005 : Code[20]);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.VALIDATE("Campaign No.",CampaignNo);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateSalesPriceForCampaign@31(VAR SalesPrice@1000 : Record 7002);
    VAR
      Campaign@1002 : Record 5071;
      Item@1001 : Record 27;
    BEGIN
      // Create Campaign and Sales Price for it.
      CreateAndUpdateCampaign(Campaign);
      Item.GET(CreateItem);
      LibraryMarketing.CreateSalesPriceForCampaign(SalesPrice,Item."No.",Campaign."No.");
      SalesPrice.RENAME(
        SalesPrice."Item No.",SalesPrice."Sales Type",SalesPrice."Sales Code",SalesPrice."Starting Date",SalesPrice."Currency Code",
        SalesPrice."Variant Code",Item."Base Unit of Measure",
        LibraryRandom.RandDec(50,2));  // Use Random value for Minimum Quantity.
      SalesPrice.VALIDATE("Unit Price",LibraryRandom.RandDec(100,2));  // Random value for Unit Price.
      SalesPrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLineDiscountForCampaign@27(VAR SalesLineDiscount@1000 : Record 7004);
    VAR
      Campaign@1002 : Record 5071;
    BEGIN
      // Create Campaign and Sales Line Discount for it.
      CreateAndUpdateCampaign(Campaign);
      LibraryMarketing.CreateSalesLineDiscount(SalesLineDiscount,Campaign."No.",CreateItem);
      SalesLineDiscount.RENAME(
        SalesLineDiscount.Type,SalesLineDiscount.Code,SalesLineDiscount."Sales Type",SalesLineDiscount."Sales Code",
        SalesLineDiscount."Starting Date",SalesLineDiscount."Currency Code",SalesLineDiscount."Variant Code",
        SalesLineDiscount."Unit of Measure Code",LibraryRandom.RandDec(50,2));  // Use Random value for Minimum Quantity.
      SalesLineDiscount.VALIDATE("Line Discount %",LibraryRandom.RandDec(99,2));  // Any Random percentage between 1 and 99.
      SalesLineDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSegment@16(CampaignNo@1002 : Code[20];ContactNo@1003 : Code[20]) : Code[20];
    VAR
      SegmentHeader@1000 : Record 5076;
      SegmentLine@1001 : Record 5077;
    BEGIN
      LibraryMarketing.CreateSegmentHeader(SegmentHeader);
      SegmentHeader.VALIDATE("Campaign No.",CampaignNo);
      SegmentHeader.VALIDATE("Campaign Target",TRUE);
      SegmentHeader.MODIFY(TRUE);

      LibraryMarketing.CreateSegmentLine(SegmentLine,SegmentHeader."No.");
      SegmentLine.VALIDATE("Contact No.",ContactNo);
      SegmentLine.MODIFY(TRUE);
      EXIT(SegmentHeader."No.");
    END;

    LOCAL PROCEDURE GetCustomerTemplateCode@34() : Code[10];
    VAR
      CustomerTemplate@1000 : Record 5105;
      VATPostingSetup@1001 : Record 325;
    BEGIN
      WITH CustomerTemplate DO BEGIN
        SETRANGE("Currency Code",'');
        FINDFIRST;
        IF "VAT Bus. Posting Group" = '' THEN BEGIN
          LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
          VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
          MODIFY(TRUE);
        END;
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE FindContactBusinessRelation@28(ContactNo@1001 : Code[20]) : Code[20];
    VAR
      ContactBusinessRelation@1000 : Record 5054;
    BEGIN
      ContactBusinessRelation.SETRANGE("Contact No.",ContactNo);
      ContactBusinessRelation.FINDFIRST;
      UpdateCustomerPaymentTermsCode(ContactBusinessRelation."No.");  // Added fix for G1 Country
      EXIT(ContactBusinessRelation."No.");
    END;

    LOCAL PROCEDURE RemoveContactFromSegment@17(ContactNo@1002 : Code[20];SegmentNo@1001 : Code[20]);
    VAR
      Contact@1004 : Record 5050;
      SegmentHeader@1003 : Record 5076;
      RemoveContactsReduce@1000 : Report 5197;
    BEGIN
      Contact.SETRANGE("No.",ContactNo);
      SegmentHeader.SETRANGE("No.",SegmentNo);
      RemoveContactsReduce.SETTABLEVIEW(SegmentHeader);
      RemoveContactsReduce.SETTABLEVIEW(Contact);
      RemoveContactsReduce.USEREQUESTPAGE(FALSE);
      RemoveContactsReduce.RUN;
    END;

    LOCAL PROCEDURE SalesOrderAfterRemovingContactFromSegment@29(VAR SalesLine@1005 : Record 37;CampaignNo@1000 : Code[20];ItemNo@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      Contact@1003 : Record 5050;
      SalesHeader@1006 : Record 36;
      SegmentNo@1004 : Code[20];
    BEGIN
      // Create Contact with Customer and create Segment. Activate Campaign.
      CreateCustomerForContact(Contact);
      SegmentNo := CreateSegment(CampaignNo,Contact."No.");
      LibraryVariableStorage.Enqueue(STRSUBSTNO(CampaignActivatedMessage,CampaignNo));  // Enqueue for MessageHandler.
      ActivatePriceLineDiscountPage(CampaignNo);

      // Create Sales Order. Remove Contact from Segment.
      CreateSalesOrder(SalesLine,FindContactBusinessRelation(Contact."No."),ItemNo,Quantity,CampaignNo);
      RemoveContactFromSegment(Contact."No.",SegmentNo);

      // Exercise: Add a new line to Sales Order.
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE UpdateCustomerPaymentTermsCode@1035(CustomerNo@1038 : Code[20]);
    VAR
      Customer@1039 : Record 18;
      PaymentTerms@1040 : Record 3;
    BEGIN
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      Customer.GET(CustomerNo);
      Customer.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSegmentWithInteractionTemplate@8(SegmentNo@1002 : Code[20];CampaignTarget@1003 : Boolean);
    VAR
      InteractionTemplate@1001 : Record 5064;
      SegmentHeader@1000 : Record 5076;
    BEGIN
      LibraryMarketing.CreateInteractionTemplate(InteractionTemplate);
      SegmentHeader.GET(SegmentNo);
      SegmentHeader.VALIDATE("Interaction Template Code",InteractionTemplate.Code);
      SegmentHeader.VALIDATE("Campaign Target",CampaignTarget);
      SegmentHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifySalesPriceWksht@26(SalesPrice@1001 : Record 7002);
    VAR
      SalesPriceWorksheet@1000 : Record 7023;
    BEGIN
      SalesPriceWorksheet.SETRANGE("Sales Type",SalesPrice."Sales Type");
      SalesPriceWorksheet.SETRANGE("Sales Code",SalesPrice."Sales Code");
      SalesPriceWorksheet.FINDFIRST;
      SalesPriceWorksheet.TESTFIELD("Item No.",SalesPrice."Item No.");
      SalesPriceWorksheet.TESTFIELD("Minimum Quantity",SalesPrice."Minimum Quantity");
      SalesPriceWorksheet.TESTFIELD("Current Unit Price",SalesPrice."Unit Price");
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@9(Message@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue Variable.
      Assert.IsTrue(STRPOS(Message,ExpectedMessage) > 0,Message);
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@42(Message@1000 : Text[1024]);
    VAR
      ExpectedMessage@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue Variable.
      Assert.IsTrue(STRPOS(Message,ExpectedMessage) > 0,Message);
    END;

    [ModalPageHandler]
    PROCEDURE GetSalesPricePageHandler@32(VAR GetSalesPrice@1000 : TestPage 7007);
    VAR
      UnitPrice@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(UnitPrice);  // Dequeue Variable.
      Assert.AreEqual(GetSalesPrice."Unit Price".ASDECIMAL,UnitPrice,ValueMustMatch);
      GetSalesPrice.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Campaign] [Marketing]
      Test for Marketing Campaign Pricing:
       1. Verify error when change the date on Campaign Sales Prices.
       2. Verify error when change the date on Campaign Sales Line Discounts.
       3. Verify dates on Sales Prices and Sales Line Discounts after changing Campaign dates.
       4. Verify price on Sales Order without activating Campaign while Segment is created for the Campaign.
       5. Verify error when activate Campaign having no price and no Segment.
       6. Verify Campaign is activated without Agreement when create a Segment for the Campaign.
       7. Verify Sales Order when Campaign is activated with a logged Segment and Campaign Target is True.
       8. Verify error when activate Campaign with logged Segment and Campaign Target is False.
       9. Verify Sales Order Price when Campaign is activated with a logged Segment and Follow-up Segment is True.
      10. Verify Sales Order Price after deleting Contact from Segment.
      11. Verify Sales Order Price after deleting existing Contact from Segment and adding a new Contact.
      12. Verify Sales Order Line Discount after deleting Customer for Contact.
      13. Verify price after suggesting Sales Price on Sales Price Worksheet.
      14. Verify price after using Get Price on Sales Line.

      TFS_TS_ID = 313930
      Cover Test cases:
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      CampaignSalesPriceDateChangeError, CampaignSalesLineDiscountDateChangeError,
      ChangeDateOnSalesPriceAndLineDiscount, SalesOrderPriceWithSegment,
      ActivateCampaignWithoutPrice, ActivateCampaignWithSegmentAndNoPrice,
      ActivateCampaignWithLog, ActivateCampaignWithLogAndCampaignTargetFalse        128225

      TFS_TS_ID = 315327
      Cover Test cases:
      ------------------------------------------------------------------------------------
      Test Function Name                                                            TFS ID
      ------------------------------------------------------------------------------------
      ActivateCampaignWithLogWithFollowUpSeg, SalesOrderPriceAddNewContactToSeg,
      SalesOrderPriceDeleteContactFromSeg, SalesOrderDiscountDeleteContactFromSeg,
      UpdateSalesPriceWorksheet,GetPriceOnSalesLine                                 128225
    }
    END.
  }
}

