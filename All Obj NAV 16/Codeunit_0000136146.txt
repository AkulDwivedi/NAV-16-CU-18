OBJECT Codeunit 136146 Service Item Tracking
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1004 : Codeunit 132201;
      LibraryItemTracking@1020 : Codeunit 130502;
      LibraryPurchase@1019 : Codeunit 130512;
      LibrarySales@1017 : Codeunit 130509;
      LibraryService@1006 : Codeunit 131902;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryWarehouse@1000 : Codeunit 132204;
      LibraryPlanning@1038 : Codeunit 132203;
      LibraryVariableStorage@1039 : Codeunit 131004;
      Assert@1003 : Codeunit 130000;
      LibraryRandom@1042 : Codeunit 130440;
      LibraryERMCountryData@1907 : Codeunit 131305;
      isInitialized@1022 : Boolean;
      AvailabilityMessage@1013 : TextConst 'ENU=There are availability warnings on one or more lines.';
      CorrectionMessage@1012 : TextConst 'ENU=The corrections cannot be saved as excess quantity has been defined.';
      ErrorMustBeSame@1001 : TextConst 'ENU=Error must be same.';
      AvailabilitySerialNo@1021 : Boolean;
      ItemNo@1010 : Code[20];
      LotNo@1018 : Code[20];
      No@1024 : Code[20];
      ServiceItemNo@1023 : Code[20];
      SaleLCY@1015 : Decimal;
      OriginalQuantity@1011 : Decimal;
      ItemTrackingAction@1016 : 'SelectEntries,AssignSerialNo,AssignLotNo,AssignLotManually,AvailabilitySerialNo,AvailabilityLotNo,LookupLotNo,CreateCustomizedSerialNo,AdjustQtyToHandle';
      ActualMessage@1014 : Text[1024];
      GlobalCheckExpirationDate@1008 : Boolean;
      GlobalExpirationDate@1009 : Date;
      ExpirationDate@1005 : Date;
      PartialConsumeError@1036 : TextConst '@@@=%1:Value1;ENU=%1 in %2 for %3 %4, %5: %6, %7:  is currently %8. It must be %9.';
      NumberOfLineEqualError@1034 : TextConst 'ENU=Number of Lines must be same.';
      ValidationError@1033 : TextConst 'ENU=Caption does not match.';
      SkilledResourceCaption@1032 : TextConst '@@@=%1:Value1,%2:Value2;ENU=View - Skilled Resource List - %1 %2';
      QuoteCaption@1031 : TextConst 'ENU=View - Service Quotes';
      OrderCaption@1030 : TextConst 'ENU=View - Service Orders';
      InvoicesCaption@1029 : TextConst 'ENU=View - Service Invoices';
      CreditMemosCaption@1028 : TextConst 'ENU=View - Service Credit Memos';
      PostedServiceShipmentsCaption@1027 : TextConst 'ENU=View - Posted Service Shipments';
      PostedServiceInvoicesCaption@1026 : TextConst 'ENU=View - Posted Service Invoices';
      PostedServiceCreditMemosCaption@1025 : TextConst 'ENU=View - Posted Service Credit Memos';
      CustomizedSN@1007 : Code[20];
      GlobalQty@1035 : Decimal;
      NoBinFoundWithItemErr@1037 : TextConst '@@@="%1 = Code, describing an item number.";ENU=No bin could be found holding the purchased item %1.';
      ItemTrackingQtyErr@1040 : TextConst 'ENU=The Quantity of Item Tracking is not correct.';
      OpenDocumentTrackingErr@1041 : TextConst 'ENU="You cannot change ""Item Tracking Code"" because there is at least one open document that includes this item with specified tracking: Source Type = %1, Document No. = %2."';

    LOCAL PROCEDURE Initialize@49();
    BEGIN
      ClearGlobalVariables;
      LibraryVariableStorage.Clear;
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibrarySales.SetCreditWarningsToNoWarnings;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
    END;

    LOCAL PROCEDURE ClearGlobalVariables@5();
    BEGIN
      ItemNo := '';
      OriginalQuantity := 0;
      AvailabilitySerialNo := FALSE;
      GlobalCheckExpirationDate := FALSE;
      ExpirationDate := 0D;
      No := '';
      ServiceItemNo := '';
      SaleLCY := 0;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ItemAvailabileWithItemTracking@52();
    VAR
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Verify Item is available, when create a Purchase Order for an Item with Item Tracking and Post as Receive.

      // 1. Setup: Create Item with Reserve Optional and Lot No Series attached, Create a Purchase Order, Service Order.
      Initialize;
      AssignItemTrackingAndPostPurchaseOrder(LibraryUtility.GetGlobalNoSeriesCode,'',TRUE,FALSE,ItemTrackingAction::AssignLotNo);
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,ItemNo,OriginalQuantity);
      ItemTrackingAction := ItemTrackingAction::SelectEntries;

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify Availability of Lot No on Item Tracking Page. Verification done on ItemTrackingPageHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostServiceOrderWithItemTracking@97();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Verify Item is available, when create a Purchase Order for an Item with Item Tracking and Post as Receive and Service Order Post Successfully.

      // 1. Setup: Create Item with Reserve Optional and Lot No Series attached, Create a Purchase Order, Service Order.
      Initialize;
      AssignItemTrackingAndPostPurchaseOrder(LibraryUtility.GetGlobalNoSeriesCode,'',TRUE,FALSE,ItemTrackingAction::AssignLotNo);
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,ItemNo,OriginalQuantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ItemTrackingAction := ItemTrackingAction::SelectEntries;

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify Service Order Post without error for Item with Item Tracking.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostServiceInvoiceWithItemTracking@60();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Verify Item is available, when create a Purchase Order for an Item with Item Tracking and Post as Receive and Service Order Post Successfully.

      // 1. Setup: Create Item with Reserve Optional and Lot No Series attached, Create a Purchase Order, Service Order.
      Initialize;
      AssignItemTrackingAndPostPurchaseOrder(LibraryUtility.GetGlobalNoSeriesCode,'',TRUE,FALSE,ItemTrackingAction::AssignLotNo);
      CreateShipToAddressAndUpdateServiceInvoiceLine(ServiceLine,ItemNo,OriginalQuantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ItemTrackingAction := ItemTrackingAction::SelectEntries;

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify Service Order Post without error for Item with Item Tracking.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ConfirmHandlerTrue)]
    PROCEDURE ItemTrackingNumberTypedManuallyWrongLotNo@13();
    VAR
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Verify warning message if manually type wrong Lot No.

      // 1. Setup: Create Item with Reserve Optional and Lot No Series attached, Create a Purchase Order, Service Order.
      Initialize;
      AssignItemTrackingAndPostPurchaseOrder(LibraryUtility.GetGlobalNoSeriesCode,'',TRUE,FALSE,ItemTrackingAction::AssignLotNo);
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,ItemNo,OriginalQuantity);
      ItemTrackingAction := ItemTrackingAction::AssignLotManually;
      LotNo := ServiceLine."Customer No.";  // Value not important, assign Customer No. as LotNo.

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify Availability Warning Message for Lot Number.
      Assert.IsTrue(STRPOS(ActualMessage,AvailabilityMessage) > 0,ErrorMustBeSame);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ConfirmHandlerTrue)]
    PROCEDURE ItemTrackingNumberTypedManuallyOverQuantity@36();
    VAR
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Verify warning message if manually type more than actual Quantity.

      // 1. Setup: Create Item with Reserve Optional and Lot No Series attached, Create a Purchase Order, Service Order.
      Initialize;
      AssignItemTrackingAndPostPurchaseOrder(LibraryUtility.GetGlobalNoSeriesCode,'',TRUE,FALSE,ItemTrackingAction::AssignLotNo);
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,ItemNo,OriginalQuantity);
      ItemTrackingAction := ItemTrackingAction::AssignLotManually;
      LotNo := FindLotNoFromItemLedgerEntry;
      OriginalQuantity := OriginalQuantity + RANDOM(10);  // Using Random value to excess Original Quantity.

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify corrections warning message for excess quantity has been defined.
      Assert.IsTrue(STRPOS(ActualMessage,CorrectionMessage) > 0,ErrorMustBeSame);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingActionsPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandlerTrue)]
    PROCEDURE ItemTrackingNumberTypedManuallyAndSelectEntries@12();
    VAR
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Verify warning message if Change Quantity Assign Item Tracking No. Both Manually and via Select Entries.

      // 1. Setup: Create Item with Reserve Optional and Serial No Series attached, Create a Purchase Order, Service Order.
      Initialize;
      AssignItemTrackingOnPurchaseAndServiceOrder(ServiceLine,0);  // Taken 0 because value is important.
      ItemTrackingAction := ItemTrackingAction::AssignSerialNo;

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify corrections warning message for excess quantity has been defined.
      Assert.IsTrue(STRPOS(ActualMessage,CorrectionMessage) > 0,ErrorMustBeSame);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingActionsPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandlerTrue)]
    PROCEDURE TypedLessQuantityAndUseSelectEntriesForRemainingQuantity@67();
    VAR
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Verify warning message if Less Quantity Assign Item Tracking No. both Manually and via Select Entries.

      // 1. Setup: Create Item with Reserve Optional and Serial No Series attached, Create a Purchase Order, Service Order.
      Initialize;
      AssignItemTrackingOnPurchaseAndServiceOrder(ServiceLine,0);  // Taken 0 because value is important.
      OriginalQuantity := OriginalQuantity / 2;
      ItemTrackingAction := ItemTrackingAction::AssignSerialNo;

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify corrections warning message for less Quantity has been defined.
      Assert.IsTrue(STRPOS(ActualMessage,CorrectionMessage) > 0,ErrorMustBeSame);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedServiceShipmentLinesHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE SerialNoAfterPostingServiceOrder@17();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Verify Serial No. after posting the Service Order.

      // 1. Setup: Create Purchase and Service Order with Item Tracking.
      Initialize;
      AssignItemTrackingOnPurchaseAndServiceOrder(ServiceLine,0);  // Taken 0 because value is important.
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryVariableStorage.Enqueue(FindSerialNoFromItemLedgerEntry);  // Enqueue Serial No.

      // 2. Exercise.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verification is done in 'PostedItemTrackingLinesHandler' page handler.
      OpenServiceShipmentLinesFromPostedServiceShipment(ServiceHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingActionsPageHandler,QuantityToCreatePageHandler,ConfirmHandlerTrue)]
    PROCEDURE WarningForSerialNoWithChangedQuantity@105();
    VAR
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Verify warning message when Change the Quantity and Assign Serial No.

      // 1. Setup: Create Item with Serial No., create and post a Purchase Order, Service Order.
      Initialize;
      AssignItemTrackingAndPostPurchaseOrder('',LibraryUtility.GetGlobalNoSeriesCode,FALSE,TRUE,ItemTrackingAction::AssignSerialNo);
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,ItemNo,OriginalQuantity);
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.
      ItemTrackingAction := ItemTrackingAction::AssignSerialNo;

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify corrections warning message for excess quantity.
      Assert.IsTrue(STRPOS(ActualMessage,CorrectionMessage) > 0,ErrorMustBeSame);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ConfirmHandlerTrue)]
    PROCEDURE WarningWithChangedSerialNo@123();
    VAR
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Verify warning message when Assigning wrong Serial No.

      // 1. Setup: Create Item with Serial No., create and post a Purchase Order, Service Order.
      Initialize;
      AssignItemTrackingAndPostPurchaseOrder('',LibraryUtility.GetGlobalNoSeriesCode,FALSE,TRUE,ItemTrackingAction::AssignSerialNo);
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,ItemNo,OriginalQuantity);
      ItemTrackingAction := ItemTrackingAction::AssignSerialNo;
      LibraryVariableStorage.Enqueue(ServiceLine."Customer No.");  // Value not important, Enqueue Customer No. as Serial No.

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify Availability Warning Message for Serial No.
      Assert.IsTrue(STRPOS(ActualMessage,AvailabilityMessage) > 0,ErrorMustBeSame);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingActionsPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ConfirmHandlerTrue)]
    PROCEDURE WarningForOverQuantityUsingSelectEntries@160();
    VAR
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Verify warning message for excess Quantity with Assign Serial No. using Select Entries on Item Tracking Line.

      // 1. Setup: Create Purchase and Service Order with Item Tracking.
      Initialize;
      AssignItemTrackingOnPurchaseAndServiceOrder(ServiceLine,0);  // Taken 0 because value is important.
      ItemTrackingAction := ItemTrackingAction::AssignSerialNo;

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify corrections warning message for excess quantity.
      Assert.IsTrue(STRPOS(ActualMessage,CorrectionMessage) > 0,ErrorMustBeSame);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE LotNoLookupOnItemTrackingPage@22();
    VAR
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Verify values on Item Tracking Summary page after Lookup on Lot No. field on Item Tracking page.

      // 1. Setup: Create Item with Lot No., Create and Receive a Purchase Order, Service Order.
      Initialize;
      AssignItemTrackingAndPostPurchaseOrder(LibraryUtility.GetGlobalNoSeriesCode,'',TRUE,FALSE,ItemTrackingAction::LookupLotNo);
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,ItemNo,OriginalQuantity);
      ItemTrackingAction := ItemTrackingAction::SelectEntries;
      LotNo := FindLotNoFromItemLedgerEntry;  // Assign Lot No. to global variable.

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify values on Item Tracking Summary page after Lookup on field Lot No on Item Tracking Page. Verification done on 'ItemTrackingPageHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ConfirmHandlerTrue)]
    PROCEDURE AvailabilityWarningAfterLotNoLookupOnItemTrackingPage@68();
    VAR
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Verify Availability Warning Message on Item Tracking page.

      // 1. Setup: Create Item with Lot No., Create and Receive a Purchase Order, Service Order.
      Initialize;
      AssignItemTrackingAndPostPurchaseOrder(LibraryUtility.GetGlobalNoSeriesCode,'',TRUE,FALSE,ItemTrackingAction::AssignLotNo);
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,ItemNo,OriginalQuantity);

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify Availability Warning Message for Lot No.
      Assert.IsTrue(STRPOS(ActualMessage,AvailabilityMessage) > 0,ErrorMustBeSame);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ItemTrackingValuesAfterLotNoLookup@82();
    VAR
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Verify values on Item Tracking Lines page after Lookup on Lot No. field and closing Item Tracking Summary page.

      // 1. Setup: Create Item with Lot No., Create and Receive a Purchase Order, Service Order.
      Initialize;
      AssignItemTrackingAndPostPurchaseOrder(LibraryUtility.GetGlobalNoSeriesCode,'',TRUE,FALSE,ItemTrackingAction::LookupLotNo);
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,ItemNo,OriginalQuantity);
      ItemTrackingAction := ItemTrackingAction::SelectEntries;
      LotNo := FindLotNoFromItemLedgerEntry;  // Assign Lot No. to global variable.

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify values on Item Tracking Lines page after Lookup on field Lot No. and closing Item Tracking Summary page. Verification done on 'ItemTrackingPageHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ConfirmHandlerTrue)]
    PROCEDURE ServiceOrderWithItemTrackingAvailability@35();
    VAR
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Verify Availability Serial No. field must be No on the Item Tracking Lines page after creating a Service Order with Serial No.

      // 1. Setup: Create Item with Serial No., create Service Order and Assign Serial No.
      Initialize;
      ItemNo := CreateItemWithSerialAndLotNo('',LibraryUtility.GetGlobalNoSeriesCode,FALSE,TRUE,FALSE);  // Assign Item No. to global variable and blank value is taken for Lot No.
      OriginalQuantity := 1 + RANDOM(10);  // Random Integer value greater than 1 required for test. Assign it to Global Variable.
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,ItemNo,OriginalQuantity);
      ItemTrackingAction := ItemTrackingAction::AvailabilitySerialNo;
      AvailabilitySerialNo := FALSE;  // Assign to global variable.

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify Availability Serial No. field must be No on the Item Tracking Lines page. Verification done in the 'ItemTrackingPageHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ConfirmHandlerTrue)]
    PROCEDURE ServiceOrderWithItemTrackingAvailabilityWarning@63();
    VAR
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Verify warning message after Assign Serial No.

      // 1. Setup: Create Item with Serial No., create Service Order with Item Tracking.
      Initialize;
      ItemNo := CreateItemWithSerialAndLotNo('',LibraryUtility.GetGlobalNoSeriesCode,FALSE,TRUE,FALSE);  // Assign Item No. to global variable and blank value is taken for Lot No.
      OriginalQuantity := 1 + RANDOM(10);  // Random Integer value greater than 1 required for test. Assign it to Global Variable.
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,ItemNo,OriginalQuantity);
      ItemTrackingAction := ItemTrackingAction::AssignSerialNo;

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify Availability Warning Message Serial No.
      Assert.IsTrue(STRPOS(ActualMessage,AvailabilityMessage) > 0,ErrorMustBeSame);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostServiceOrderWithItemTrackingAvailability@140();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1004 : Record 5902;
    BEGIN
      // Check posting of Service Order with Item Tracking Serial No. without error.

      // 1. Setup: Create Item with Serial No., create Service Order with Item Tracking.
      Initialize;
      AssignItemTrackingAndPostPurchaseOrder('',LibraryUtility.GetGlobalNoSeriesCode,FALSE,TRUE,ItemTrackingAction::AssignSerialNo);
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,ItemNo,OriginalQuantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ItemTrackingAction := ItemTrackingAction::SelectEntries;

      // 2. Exercise.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify Service Order Post without error with Item Tracking.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedServiceShipmentLinesHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE PostServiceOrderWithSerialNoOnWhiteLocation@1();
    VAR
      LocationType@1000 : 'White,Yellow,Orange';
    BEGIN
      // Verify Serial No. after posting the Service Order on a white location with expiration date set to FALSE
      PostOrUndoServiceOrderWithItemTrackingOnLocation(FALSE,TRUE,FALSE,WORKDATE,FALSE,LocationType::White);
    END;

    [Test]
    [HandlerFunctions(EnterCustomizedSNHandler,ItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE PostServiceInvoiceWithSerialNoOnWhiteLocation@61();
    VAR
      LocationType@1000 : 'White,Yellow,Orange';
    BEGIN
      // Verify Serial No. on whse entries after posting a service invoice to White location
      PostServiceInvoiceWithItemTrackingOnLocation(FALSE,TRUE,FALSE,WORKDATE,FALSE,LocationType::White);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedServiceShipmentLinesHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE PostServiceOrderWithSerialNoAndExpirationdateOnWhiteLocation@18();
    VAR
      LocationType@1000 : 'White,Yellow,Orange';
    BEGIN
      // Verify Serial No. after posting the Service Order on a white location with manual expiration date set to TRUE.
      PostOrUndoServiceOrderWithItemTrackingOnLocation(FALSE,TRUE,TRUE,WORKDATE + 20,FALSE,LocationType::White);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedServiceShipmentLinesHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE PostServiceOrderWithSerialNoAndExpiredItemOnWhiteLocation@37();
    VAR
      LocationType@1000 : 'White,Yellow,Orange';
    BEGIN
      // Verify Serial No. after posting the Service Order on a white location with manual expiration date set to True.
      PostOrUndoServiceOrderWithItemTrackingOnLocation(FALSE,TRUE,TRUE,WORKDATE,FALSE,LocationType::White);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedServiceShipmentLinesHandlerForUndoShipment,PostedItemTrackingLinesForUndoShipment,ConfirmationHandler)]
    PROCEDURE UndoServiceOrderWithSerialNoOnWhiteLocation@39();
    VAR
      LocationType@1000 : 'White,Yellow,Orange';
    BEGIN
      // Undo Service Order with item tracking entries, Serial No tracking and No manual expiration date entry
      PostOrUndoServiceOrderWithItemTrackingOnLocation(FALSE,TRUE,FALSE,WORKDATE,TRUE,LocationType::White);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedServiceShipmentLinesHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE PostServiceOrderWithSerialNoOnYellowLocation@9();
    VAR
      LocationType@1000 : 'White,Yellow,Orange';
    BEGIN
      // Verify Serial No. after posting the Service Order on a white location with expiration date set to FALSE
      PostOrUndoServiceOrderWithItemTrackingOnLocation(FALSE,TRUE,FALSE,WORKDATE,FALSE,LocationType::Yellow);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedServiceShipmentLinesHandlerForUndoShipment,PostedItemTrackingLinesForUndoShipment,ConfirmationHandler)]
    PROCEDURE UndoServiceOrderWithSerialNoOnYellowLocation@19();
    VAR
      LocationType@1000 : 'White,Yellow,Orange';
    BEGIN
      // Undo Service Order with item tracking entries, Serial No tracking and No manual expiration date entry
      PostOrUndoServiceOrderWithItemTrackingOnLocation(FALSE,TRUE,FALSE,WORKDATE,TRUE,LocationType::Yellow);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedServiceShipmentLinesHandler,ExpirationDateOnPostedItemTrackingLinesHandler)]
    PROCEDURE ExpirationDateAfterPostingServiceOrder@29();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1004 : Record 5902;
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      // Verify Expiration Date after posting the Service Order.

      // 1. Setup: Create Item with Item Tracking and Expiration Calculation, create and post Purchase Order, Service Order.
      Initialize;
      AssignItemTrackingOnPurchaseAndServiceOrder(ServiceLine,0);  // Taken 0 because value is important.
      FindPurchaseItemLedgerEntry(ItemLedgerEntry);
      ExpirationDate := ItemLedgerEntry."Expiration Date";  // Assign Expiration Date to global variable.
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");

      // 2. Exercise.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verification is done in 'ExpirationDateOnPostedItemTrackingLinesHandler' page handler.
      OpenServiceShipmentLinesFromPostedServiceShipment(ServiceHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE ExpirationDateOnItemLedgerEntry@34();
    VAR
      Item@1003 : Record 27;
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      // Verify Expiration Date on Item Ledger Entry after posting the Purchase Order.

      // 1. Setup.
      Initialize;

      // 2. Exercise: Create and post Purchase Order with Item Tracking and Item with Expiration Calculation.
      AssignItemTrackingAndPostPurchaseOrder('',LibraryUtility.GetGlobalNoSeriesCode,FALSE,TRUE,ItemTrackingAction::AssignSerialNo);
      Item.GET(ItemNo);
      ExpirationDate := CALCDATE(Item."Expiration Calculation",WORKDATE);

      // 3. Verify: Verify Expiration Date on Item Ledger Entry.
      FindPurchaseItemLedgerEntry(ItemLedgerEntry);
      ItemLedgerEntry.TESTFIELD("Expiration Date",ExpirationDate);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedServiceShipmentLinesHandler,ExpirationDateOnPostedItemTrackingLinesHandler,ConfirmHandlerTrue)]
    PROCEDURE ExpirationDateUsingUndoShipmentOnShppedServiceOrder@62();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1004 : Record 5902;
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      // Verify Expiration Date after Undo Shipment on Posted Service Shipment.

      // 1. Setup: Create Item with Item Tracking and Expiration Calculation, create and post Purchase Order, Service Order.
      Initialize;
      AssignItemTrackingOnPurchaseAndServiceOrder(ServiceLine,0);  // Taken 0 because value is important.
      FindPurchaseItemLedgerEntry(ItemLedgerEntry);
      ExpirationDate := ItemLedgerEntry."Expiration Date";  // Assign Expiration Date to global variable.
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 2. Exercise: Undo Shipment on Posted Service Shipment.
      UndoShipment(ServiceHeader."No.");

      // 3. Verify: Verification is done for Expiration Date after Undo Shipment on Posted Service Shipment in 'ExpirationDateOnPostedItemTrackingLinesHandler' page handler.
      OpenServiceShipmentLinesFromPostedServiceShipment(ServiceHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ConsumptionErrorOnServiceOrder@33();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1004 : Record 5902;
      ItemLedgerEntry@1001 : Record 32;
      TrackingSpecification@1003 : Record 336;
    BEGIN
      // Verify error on Service Order while consuming Service Order with Partial Qty. to Consume.

      // 1. Setup: Create Item with Item Tracking and Expiration Calculation, create and post Purchase Order, create Service Order.
      Initialize;
      AssignItemTrackingOnPurchaseAndServiceOrder(ServiceLine,0);  // Taken 0 because value is important.
      UpdateQuantityToConsume(ServiceLine,ServiceLine."Qty. to Ship" / 2);  // Partially consume.
      FindPurchaseItemLedgerEntry(ItemLedgerEntry);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");

      // 2. Exercise: Consume Service Order.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify error message while Qty. to Consume is less than Qty. to Handle (Base) defined on Item Tracking Lines.
      WITH ItemLedgerEntry DO
        Assert.ExpectedError(
          STRSUBSTNO(
            PartialConsumeError,TrackingSpecification.FIELDCAPTION("Qty. to Handle (Base)"),TrackingSpecification.TABLECAPTION,
            FIELDCAPTION("Item No."),"Item No.",FIELDCAPTION("Serial No."),"Serial No.",FIELDCAPTION("Lot No."),ServiceLine.Quantity,
            ServiceLine."Qty. to Consume"));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedServiceShipmentLinesHandler,ExpirationDateOnPostedItemTrackingLinesHandler,ConfirmHandlerTrue)]
    PROCEDURE ExpirationDateUsingUndoConsumptionOnConsumedServiceOrder@85();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1004 : Record 5902;
      ItemLedgerEntry@1001 : Record 32;
      Quantity@1000 : Decimal;
    BEGIN
      // Verify Expiration Date after Undo Consumption on Posted Service Shipment.

      // 1. Setup: Create Item with Item Tracking and Expiration Calculation, create and post Purchase Order, Service Order.
      Initialize;
      Quantity := RANDOM(5);  // Random value is taken to calculate lesser Qty. to Consume. than Quantity.
      AssignItemTrackingOnPurchaseAndServiceOrder(ServiceLine,Quantity);  // Taken 1 because greater Quantity is needed.
      UpdateQuantityToConsume(ServiceLine,ServiceLine."Qty. to Ship" - Quantity);  // Taken lesser Qty. to Consume because value is important.
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");

      FindPurchaseItemLedgerEntry(ItemLedgerEntry);
      ExpirationDate := ItemLedgerEntry."Expiration Date";  // Assign Expiration Date to global variable.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 2. Exercise: Undo Shipment on Posted Service Shipment.
      UndoConsumption(ServiceHeader."No.");

      // Verify: Verify Expiration Date after Undo Consumption on Posted Service Shipment.
      OpenServiceShipmentLinesFromPostedServiceShipment(ServiceHeader."No.");
    END;

    [Test]
    PROCEDURE ShipToAddressOnCustomerDetailsFactBoxServiceOrder@28();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrders@1006 : TestPage 9318;
      ShipToAddressList@1007 : TestPage 301;
    BEGIN
      // Verify Ship To Address page value from Service Order's Customer Details FactBox.

      // 1. Setup: Create Service Order.
      Initialize;
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,FindItem,RANDOM(10));  // Using Random value for Quantity.
      OpenServiceOrdersPage(ServiceOrders,ServiceLine."Document No.");
      ShipToAddressList.TRAP;

      // 2. Exercise: Open Ship To Address List page using Service Order page.
      ServiceOrders."Customer Details FactBox"."Page Ship-to Address List".INVOKE;

      // 3. Verify.
      ShipToAddressList.Name.ASSERTEQUALS(ServiceLine."Customer No.")
    END;

    [Test]
    PROCEDURE ServiceLineListFromCustomerStatisticsFactBoxServiceOrder@26();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrders@1006 : TestPage 9318;
      ServiceLineList@1007 : TestPage 5904;
    BEGIN
      // Verify Service Line List page value opened from Customer Statistics FactBox.

      // 1. Setup: Create Service Order.
      Initialize;
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,FindItem,RANDOM(10));  // Using Random value for Quantity.
      OpenServiceOrdersPage(ServiceOrders,ServiceLine."Document No.");
      ServiceLineList.TRAP;

      // 2. Exercise: Open Service Line List page using Service Order page.
      ServiceOrders."Customer Statistics FactBox"."Outstanding Serv. Orders (LCY)".DRILLDOWN;

      // 3. Verify.
      ServiceLineList."Document No.".ASSERTEQUALS(ServiceLine."Document No.");
      ServiceLineList."No.".ASSERTEQUALS(ServiceLine."No.");
    END;

    [Test]
    PROCEDURE AvailableCreditFromCustomerDetailsFactBoxServiceOrder@23();
    VAR
      Item@1001 : Record 27;
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1004 : Record 5902;
      ServiceOrders@1006 : TestPage 9318;
      AvailableCredit@1007 : TestPage 7177;
    BEGIN
      // Verify Available Credit page value opened from Service Order's Customer Details FactBox.

      // 1. Setup: Create and post Service Order.
      Initialize;
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,LibraryInventory.CreateItem(Item),RANDOM(10));  // Using Random value for Quantity.
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);
      OpenServiceOrdersPage(ServiceOrders,ServiceLine."Document No.");
      AvailableCredit.TRAP;

      // 2. Exercise: Open Available Credit page using Service Order page.
      ServiceOrders."Customer Details FactBox".AvailableCreditLCY.DRILLDOWN;

      // 3. Verify.
      AvailableCredit."Serv Shipped Not Invoiced(LCY)".ASSERTEQUALS(ServiceLine."Amount Including VAT");
    END;

    [Test]
    PROCEDURE ServiceItemOnServiceItemLineFactBoxServiceOrder@48();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1006 : TestPage 5900;
      ServiceItemCard@1007 : TestPage 5980;
    BEGIN
      // Verify Service Item Card page value opened from Service Order's Service Item Line FactBox.

      // 1. Setup: Create Service Order.
      Initialize;
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,FindItem,RANDOM(10));  // Using Random value for Quantity.
      OpenServiceOrderPage(ServiceOrder,ServiceLine."Document No.");
      ServiceItemCard.TRAP;

      // 2. Exercise: Open Service Item Card page using Service Order page.
      ServiceOrder."Service Item Line FactBox"."Service Item No.".DRILLDOWN;

      // 3. Verify.
      ServiceItemCard."No.".ASSERTEQUALS(ServiceLine."Service Item No.");
      ServiceItemCard."Customer No.".ASSERTEQUALS(ServiceLine."Customer No.");
    END;

    [Test]
    [HandlerFunctions(CustomerLedgerEntriesPageHandler)]
    PROCEDURE SalesLcyOnCustomerStatisticsFactBoxServiceOrder@66();
    VAR
      Item@1002 : Record 27;
      ServiceHeader@1000 : Record 5900;
      ServiceLine@1004 : Record 5902;
      ServiceOrders@1006 : TestPage 9318;
      Amount@1001 : Decimal;
    BEGIN
      // Verify Customer Ledger Entries page value opened from Service Order's Customer Statistics FactBox.

      // 1. Setup: Create and post Service Order.
      Initialize;
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,LibraryInventory.CreateItem(Item),RANDOM(10));  // Using Random value for Quantity.
      ServiceLine.VALIDATE("Qty. to Invoice",ServiceLine.Quantity - 1);  // Needed lesser Qty. to Ivoice than Quantity.
      ServiceLine.MODIFY(TRUE);

      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);
      ServiceLine.GET(ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.");
      Amount := ServiceLine."Unit Price" * ServiceLine."Quantity Invoiced";  // Assigned to global variable.
      SaleLCY := Amount - (Amount * ServiceLine."Line Discount %" / 100);
      OpenServiceOrdersPage(ServiceOrders,ServiceLine."Document No.");
      Assert.AreEqual(
        SaleLCY,ServiceOrders."Customer Statistics FactBox"."Sales (LCY)".ASDECIMAL,'Total Sales LCY matches service line amount');

      // 2. Exercise: Open Customer Ledger Entries page using Service Order page.
      No := ServiceHeader."Bill-to Customer No.";
      ServiceOrders."Customer Statistics FactBox"."Sales (LCY)".DRILLDOWN;

      // 3. Verify: Correct filter is set in the CustomerLedger Entries page. This is done in the 'CustomerLedgerEntriesPageHandler' handler
    END;

    [Test]
    [HandlerFunctions(ServiceItemComponentListPageHandler)]
    PROCEDURE ComponentListOnServiceItemLineFactBoxServiceOrder@124();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1006 : TestPage 5900;
    BEGIN
      // Verify Component List page value opened from Service Order's Service Item Line Detail pane.

      // 1. Setup: Create Service Order.
      Initialize;
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,FindItem,RANDOM(10));  // Using Random value for Quantity.
      No := ServiceLine."No.";  // Assinged to global variable.
      OpenServiceOrderPage(ServiceOrder,ServiceLine."Document No.");

      // 2. Exercise: Open Component List page using Service Order page.
      ServiceOrder."Service Item Line FactBox".ComponentList.DRILLDOWN;

      // 3. Verify: Verify Component List page value, done in ServiceItemComponentListPageHandler page handler.
    END;

    [Test]
    [HandlerFunctions(SkilledResourceListPageHandler)]
    PROCEDURE SkilledResourceOnServiceItemLineFactBoxServiceOrder@4();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1006 : TestPage 5900;
    BEGIN
      // Verify caption after opening Skilled Resource List page from Service Order's Service Item Line Detail pane.

      // 1. Setup: Create Service Order.
      Initialize;
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,FindItem,RANDOM(10));  // Using Random value for Quantity.
      ServiceItemNo := ServiceLine."Service Item No.";  // Assinged to global variable.
      OpenServiceOrderPage(ServiceOrder,ServiceLine."Document No.");

      // 2. Exercise: Open Skilled Resource List page using Service Order page.
      ServiceOrder."Service Item Line FactBox".SkilledResources.DRILLDOWN;

      // 3. Verify: Verify Skilled Resources List page caption done in SkilledResourceListPageHandler page handler.
    END;

    [Test]
    PROCEDURE CustomerOnServiceHistSellToFactBoxServiceOrder@3();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1006 : TestPage 5900;
      CustomerCard@1000 : TestPage 21;
    BEGIN
      // Verify Customer Card page value opened through Service Order's Service Hist. Sell-to FactBox.

      // 1. Setup: Create Service Order.
      Initialize;
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,FindItem,RANDOM(10));  // Using Random value for Quantity.
      OpenServiceOrderPage(ServiceOrder,ServiceLine."Document No.");
      CustomerCard.TRAP;

      // 2. Exercise: Open Customer Card page using Service Order page.
      ServiceOrder."Service Hist. Sell-to FactBox"."No.".DRILLDOWN;

      // 3. Verify.
      CustomerCard."No.".ASSERTEQUALS(ServiceLine."Customer No.");
    END;

    [Test]
    PROCEDURE OrderOnServiceHistSellToFactBoxServiceOrder@137();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1006 : TestPage 5900;
      ServiceOrders@1009 : TestPage 9318;
    BEGIN
      // Verify caption of Service Orders page opened through Service Order's Service Hist. Sell-to FactBox.

      // 1. Setup: Create Service Order.
      Initialize;
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,FindItem,RANDOM(10));  // Using Random value for Quantity.
      OpenServiceOrderPage(ServiceOrder,ServiceLine."Document No.");
      ServiceOrders.TRAP;

      // 2. Exercise: Open Service Orders page using Service Order page.
      ServiceOrder."Service Hist. Sell-to FactBox".NoOfOrders.DRILLDOWN;

      // 3. Verify: Verify Service Orders page caption.
      Assert.AreEqual(STRSUBSTNO(OrderCaption),ServiceOrders.CAPTION,ValidationError);
    END;

    [Test]
    PROCEDURE QuoteOnServiceHistSellToFactBoxServiceOrder@170();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1006 : TestPage 5900;
      ServiceQuotes@1009 : TestPage 9317;
    BEGIN
      // Verify caption of Service Quotes page opened through Service Order's Service Hist. Sell-to FactBox.

      // 1. Setup: Create Service Order.
      Initialize;
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,FindItem,RANDOM(10));  // Using Random value for Quantity.
      OpenServiceOrderPage(ServiceOrder,ServiceLine."Document No.");
      ServiceQuotes.TRAP;

      // 2. Exercise: Open Service Quotes page using Service Order page.
      ServiceOrder."Service Hist. Sell-to FactBox".NoOfQuotes.DRILLDOWN;

      // 3. Verify: Verify Service Quotes page caption.
      Assert.AreEqual(STRSUBSTNO(QuoteCaption),ServiceQuotes.CAPTION,ValidationError);
    END;

    [Test]
    PROCEDURE InvoiceOnServiceHistSellToFactBoxServiceOrder@182();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1006 : TestPage 5900;
      ServiceInvoices@1009 : TestPage 9319;
    BEGIN
      // Verify caption of Service Invoices page opened through Service Order's Service Hist. Sell-to FactBox.

      // 1. Setup: Create Service Order.
      Initialize;
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,FindItem,RANDOM(10));  // Using Random value for Quantity.
      OpenServiceOrderPage(ServiceOrder,ServiceLine."Document No.");
      ServiceInvoices.TRAP;

      // 2. Exercise: Open Service Invoices page using Service Order page.
      ServiceOrder."Service Hist. Sell-to FactBox".NoOfInvoices.DRILLDOWN;

      // 3. Verify: Verify Service Inoices page caption.
      Assert.AreEqual(STRSUBSTNO(InvoicesCaption),ServiceInvoices.CAPTION,ValidationError);
    END;

    [Test]
    PROCEDURE CreditMemosOnServiceHistSellToFactBox@190();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1006 : TestPage 5900;
      ServiceCreditMemos@1009 : TestPage 9320;
    BEGIN
      // Verify caption of Service Credit Memos page opened through Service Order's Service Hist. Sell-to FactBox.

      // 1. Setup: Create Service Order.
      Initialize;
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,FindItem,RANDOM(10));  // Using Random value for Quantity.
      OpenServiceOrderPage(ServiceOrder,ServiceLine."Document No.");
      ServiceCreditMemos.TRAP;

      // 2. Exercise: Open Service Credit Memo page using Service Order page.
      ServiceOrder."Service Hist. Sell-to FactBox".NoOfCreditMemos.DRILLDOWN;

      // 3. Verify: Verify Service Credit Memos page caption.
      Assert.AreEqual(STRSUBSTNO(CreditMemosCaption),ServiceCreditMemos.CAPTION,ValidationError);
    END;

    [Test]
    PROCEDURE PostedServiceShipmentsOnServiceHistSellToFactBox@199();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1006 : TestPage 5900;
      PostedServiceShipments@1009 : TestPage 5974;
    BEGIN
      // Verify caption of Posted Service Shipments page opened through Service Order's Service Hist. Sell-to FactBox.

      // 1. Setup: Create Service Order.
      Initialize;
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,FindItem,RANDOM(10));  // Using Random value for Quantity.
      OpenServiceOrderPage(ServiceOrder,ServiceLine."Document No.");
      PostedServiceShipments.TRAP;

      // 2. Exercise: Open Posted Service Shipment page using Service Order page.
      ServiceOrder."Service Hist. Sell-to FactBox".NoOfPostedShipments.DRILLDOWN;

      // 3. Verify: Verify for Posted Service Shipments page caption.
      Assert.AreEqual(STRSUBSTNO(PostedServiceShipmentsCaption),PostedServiceShipments.CAPTION,ValidationError);
    END;

    [Test]
    PROCEDURE PostedServiceInvoicesOnServiceHistSellToFactBox@210();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1006 : TestPage 5900;
      PostedServiceInvoices@1009 : TestPage 5977;
    BEGIN
      // Verify caption of Posted Service Invoices page opened through Service Order's Service Hist. Sell-to FactBox.

      // 1. Setup: Create Service Order.
      Initialize;
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,FindItem,RANDOM(10));  // Using Random value for Quantity.
      OpenServiceOrderPage(ServiceOrder,ServiceLine."Document No.");
      PostedServiceInvoices.TRAP;

      // 2. Exercise: Open Posted Service Invoices page using Service Order page.
      ServiceOrder."Service Hist. Sell-to FactBox".NoOfPostedInvoices.DRILLDOWN;

      // 3. Verify: Verify Posted Service Invoices page caption.
      Assert.AreEqual(STRSUBSTNO(PostedServiceInvoicesCaption),PostedServiceInvoices.CAPTION,ValidationError);
    END;

    [Test]
    PROCEDURE PostedServiceCreditMemosOnServiceHistSellToFactBox@220();
    VAR
      ServiceLine@1004 : Record 5902;
      ServiceOrder@1006 : TestPage 5900;
      PostedServiceCreditMemos@1009 : TestPage 5971;
    BEGIN
      // Verify caption of Posted Service Credit Memos page opened through Service Order's Service Hist. Sell-to FactBox.

      // 1. Setup: Create Service Order.
      Initialize;
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,FindItem,RANDOM(10));  // Using Random value for Quantity.
      OpenServiceOrderPage(ServiceOrder,ServiceLine."Document No.");
      PostedServiceCreditMemos.TRAP;

      // 2. Exercise: Open Posted Service Credit Memos page using Service Order page.
      ServiceOrder."Service Hist. Sell-to FactBox".NoOfPostedCreditMemos.DRILLDOWN;

      // 3. Verify: Verify Posted Service Credit Memos page caption.
      Assert.AreEqual(STRSUBSTNO(PostedServiceCreditMemosCaption),PostedServiceCreditMemos.CAPTION,ValidationError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingAndVerifyItemTrackingQtyPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE CalcPlanInReqWkshForServiceItemWksh@64();
    VAR
      ServiceLine@1004 : Record 5902;
      Item@1000 : Record 27;
    BEGIN
      // Verify Item Tracking Quantity on the Service Item Worksheet after calculating plan in Requisition Worksheet.
      // 1. Setup: Create Item with Maximum Qty. and Serial No Series attached, Create a Purchase Order, Service Order.
      Initialize;

      // Use Random value for Quantity - less than the inventory.
      OriginalQuantity := LibraryRandom.RandInt(10); // Using Random Integer value. Assign it to Global Variable.
      AssignItemTrackingOnServiceOrderWithItem(Item,ServiceLine,LibraryRandom.RandInt(OriginalQuantity));

      // 2. Exercise: Calculate Plan for Requisition Worksheet.
      CalculatePlanForReqWksh(Item);

      LibraryVariableStorage.Enqueue(TRUE); // Enqueue for ItemTrackingAndVerifyItemTrackingQtyPageHandler.
      LibraryVariableStorage.Enqueue(ServiceLine.Quantity); // Enqueue Value for ItemTrackingAndVerifyItemTrackingQtyPageHandler.

      // 3. Verify: Verify the Item Tracking Quantity on Service Item Worksheet in ItemTrackingAndVerifyItemTrackingQtyPageHandler.
      ServiceLine.OpenItemTrackingLines;
    END;

    [HandlerFunctions(ItemTrackingSummaryPageHandler)]
    LOCAL PROCEDURE PostServiceInvoiceWithItemTrackingOnLocation@45(LotSpecificTracking@1010 : Boolean;SerialNoSpecificTracking@1011 : Boolean;ManualExpirationDate@1012 : Boolean;ExpirationDate@1013 : Date;UndoShipment@1015 : Boolean;LocationType@1016 : 'White,Yellow,Orange');
    VAR
      Location@1003 : Record 14;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1004 : Record 5902;
      WarehouseEntry@1014 : Record 7312;
      BinContent@1017 : Record 7302;
      ItemLedgerEntry@1019 : Record 32;
      LibraryService@1006 : Codeunit 131902;
      LocationCode@1001 : Code[10];
      Quantity@1005 : Integer;
      StopLoop@1018 : Boolean;
      LastItemLedgerEntryNo@1020 : Integer;
    BEGIN
      // Verify warehouse entries after posting the Service Invoice
      // 1. Setup: Create Item with Item Tracking, Create and post Purchase Order, Service Order.
      Initialize;

      CASE LocationType OF
        LocationType::White:
          CreateFullWarehouseLocation(Location);
        LocationType::Yellow:
          LibraryService.CreateDefaultYellowLocation(Location);
      END;

      LocationCode := Location.Code;
      Quantity := RANDOM(100);
      GlobalQty := Quantity;
      CreateItemTrackingCode(LotSpecificTracking,SerialNoSpecificTracking,ManualExpirationDate);
      ItemLedgerEntry.FINDLAST;
      LastItemLedgerEntryNo := ItemLedgerEntry."Entry No.";
      AssignItemTrackingAndPostPurchaseOrderOnWhiteLocation(
        '',LibraryUtility.GetGlobalNoSeriesCode,ItemTrackingAction::AssignSerialNo,LocationCode,Quantity,ManualExpirationDate,
        ExpirationDate);
      ItemLedgerEntry.GET(LastItemLedgerEntryNo + 1);
      CustomizedSN := ItemLedgerEntry."Serial No.";
      CreateShipToAddressAndUpdateServiceInvoiceLine(ServiceLine,ItemNo,OriginalQuantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ServiceLine.VALIDATE("Location Code",LocationCode);
      // Find the bin code:
      BinContent.SETRANGE("Location Code",LocationCode);
      BinContent.SETRANGE("Zone Code",'PICK');
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.FINDSET;
      REPEAT
        BinContent.CALCFIELDS(Quantity);
        IF BinContent.Quantity > 0 THEN
          StopLoop := TRUE
        ELSE
          StopLoop := BinContent.NEXT = 0;
      UNTIL StopLoop;
      Assert.IsTrue(BinContent.Quantity > 0,STRSUBSTNO(NoBinFoundWithItemErr,ItemNo));
      ServiceLine.VALIDATE("Bin Code",BinContent."Bin Code");
      IF BinContent.Quantity < ServiceLine.Quantity THEN BEGIN
        GlobalQty := BinContent.Quantity;
        ServiceLine.VALIDATE(Quantity,GlobalQty);
      END;
      ServiceLine.MODIFY(TRUE);
      ItemTrackingAction := ItemTrackingAction::CreateCustomizedSerialNo;
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // EXECUTE: Post the service invoice
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 3. VERIFY: Verify Warehouse Entries
      GetWarehouseEntries(ServiceLine,WarehouseEntry,WarehouseEntry."Entry Type"::"Negative Adjmt.");
      VerifyWarehouseEntry(
        ServiceLine,WarehouseEntry,WarehouseEntry."Entry Type"::"Negative Adjmt.",LotSpecificTracking,SerialNoSpecificTracking,
        ManualExpirationDate,ExpirationDate,UndoShipment);
    END;

    LOCAL PROCEDURE PostOrUndoServiceOrderWithItemTrackingOnLocation@25(LotSpecificTracking@1010 : Boolean;SerialNoSpecificTracking@1011 : Boolean;ManualExpirationDate@1012 : Boolean;ExpirationDate@1013 : Date;UndoShipment@1015 : Boolean;LocationType@1016 : 'White,Yellow,Orange');
    VAR
      Location@1003 : Record 14;
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1004 : Record 5902;
      WarehouseActivityLine@1009 : Record 5767;
      WarehouseEntry@1014 : Record 7312;
      WarehouseShipmentHeader@1008 : Record 7320;
      PostedServiceShipment@1000 : TestPage 5975;
      LocationCode@1001 : Code[10];
      Quantity@1005 : Integer;
    BEGIN
      // Verify Serial No. after posting the Service Order.

      // 1. Setup: Create Item with Item Tracking, Create and post Purchase Order, Service Order.
      Initialize;

      CASE LocationType OF
        LocationType::White:
          CreateFullWarehouseLocation(Location);
        LocationType::Yellow:
          LibraryService.CreateDefaultYellowLocation(Location);
      END;

      LocationCode := Location.Code;
      Quantity := RANDOM(100);
      CreateItemTrackingCode(LotSpecificTracking,SerialNoSpecificTracking,ManualExpirationDate);
      AssignItemTrackingAndPostPurchaseOrderOnWhiteLocation(
        '',LibraryUtility.GetGlobalNoSeriesCode,ItemTrackingAction::AssignSerialNo,LocationCode,Quantity,ManualExpirationDate,
        ExpirationDate);
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,ItemNo,OriginalQuantity);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      ServiceLine.VALIDATE("Location Code",LocationCode);
      ServiceLine.MODIFY(TRUE);
      ItemTrackingAction := ItemTrackingAction::SelectEntries;
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.
      LibraryVariableStorage.Enqueue(FindSerialNoFromItemLedgerEntry); // Enqueue Serial No.

      // EXECUTE: Create Pick, Register Pick and post Warehouse shipment with ship option, Invoice Service order partialy.
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      CreateWarehouseShipmentFromServiceHeader(ServiceHeader);
      WarehouseShipmentHeader.GET(
        LibraryWarehouse.FindWhseShipmentNoBySourceDoc(DATABASE::"Service Line",ServiceHeader."Document Type",ServiceHeader."No."));
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
      RegisterWarehouseActivity(ServiceHeader."No.",WarehouseActivityLine."Activity Type"::Pick);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
      IF UndoShipment THEN
        LibraryService.UndoShipmentLinesByServiceOrderNo(ServiceHeader."No.");

      // 3. VERIFY: Verification is done in 'PostedItemTrackingLinesHandler' page handler.
      GlobalCheckExpirationDate := ManualExpirationDate;
      GlobalExpirationDate := ExpirationDate;
      PostedServiceShipment.OPENVIEW;
      PostedServiceShipment.FILTER.SETFILTER("Order No.",ServiceHeader."No.");

      PostedServiceShipment.ServShipmentItemLines.ServiceShipmentLines.INVOKE;
      FindServiceLinesByHeaderNo(ServiceLine,ServiceHeader);
      VerifyItemLedgerEntryOnPost(
        ServiceLine,LotSpecificTracking,SerialNoSpecificTracking,ManualExpirationDate,ExpirationDate,UndoShipment);
      IF LocationType = LocationType::Yellow THEN BEGIN
        VerifyNoWarehouseEntriesCreated(ServiceLine);
        EXIT;
      END;
      IF FALSE = UndoShipment THEN BEGIN
        GetWarehouseEntries(ServiceLine,WarehouseEntry,WarehouseEntry."Entry Type"::"Negative Adjmt.");
        VerifyWarehouseEntry(
          ServiceLine,WarehouseEntry,WarehouseEntry."Entry Type"::"Negative Adjmt.",LotSpecificTracking,SerialNoSpecificTracking,
          ManualExpirationDate,ExpirationDate,UndoShipment);
      END ELSE BEGIN
        GetWarehouseEntries(ServiceLine,WarehouseEntry,WarehouseEntry."Entry Type"::"Positive Adjmt.");
        VerifyWarehouseEntry(
          ServiceLine,WarehouseEntry,WarehouseEntry."Entry Type"::"Positive Adjmt.",LotSpecificTracking,SerialNoSpecificTracking,
          ManualExpirationDate,ExpirationDate,UndoShipment);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler)]
    PROCEDURE ItemTrackingCodeValidationErrorWhenOpenDocExists@86();
    VAR
      PurchaseHeader@1000 : Record 38;
      Item@1001 : Record 27;
      RecRef@1002 : RecordRef;
    BEGIN
      // Verify error message when validate Item Tracking Code in case of open document with tracking exists
      Initialize;
      AssignItemTracking(PurchaseHeader,LibraryUtility.GetGlobalNoSeriesCode,'',TRUE,FALSE,ItemTrackingAction::AssignLotNo,TRUE);

      Item.GET(ItemNo);
      ASSERTERROR Item.VALIDATE("Item Tracking Code",'');

      RecRef.OPEN(DATABASE::"Purchase Line");
      Assert.ExpectedError(STRSUBSTNO(OpenDocumentTrackingErr,RecRef.CAPTION,PurchaseHeader."No."));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE VerifySerialNoAfterPosingServiceInvoice@92();
    VAR
      ServiceHeader@1002 : Record 5900;
      ServiceLine@1004 : Record 5902;
      ServiceInvoiceLine@1000 : Record 5993;
    BEGIN
      // [SCENARIO 361035] Verify Serial No. in Posted Item Tracking page after posting of Service Invoice
      Initialize;

      // [GIVEN] Create Item with Serial No. Series, post Purchase Order
      AssignItemTrackingAndPostPurchaseOrder('',LibraryUtility.GetGlobalNoSeriesCode,FALSE,TRUE,ItemTrackingAction::AssignSerialNo);

      // [GIVEN] Create Service Invoice
      CreateShipToAddressAndUpdateServiceInvoiceLine(ServiceLine,ItemNo,OriginalQuantity);

      // [GIVEN] Assign Serial No. to Service Line
      ItemTrackingAction := ItemTrackingAction::SelectEntries;
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking in "ItemTrackingPageHandler"

      // [WHEN] Post Service Invoice
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // [THEN] Serial No. is shown on Posted Item Tracking Lines
      LibraryVariableStorage.Enqueue(FindSerialNoFromItemLedgerEntry);  // Enqueue Serial No.
      FindServiceInvoiceLine(ServiceInvoiceLine,ItemNo);
      ServiceInvoiceLine.ShowItemTrackingLines; // Verify Serial No. in "PostedItemTrackingLinesHandler"
    END;

    [Test]
    PROCEDURE ServiceQuoteServiceItemLineDetailsFactBox@109();
    VAR
      ServiceItem@1001 : Record 5940;
      ServiceHeader@1004 : Record 5900;
      ServiceQuote@1000 : TestPage 5964;
      NoOfComponents@1008 : Integer;
      NoOfTroubleShooting@1009 : Integer;
    BEGIN
      // [FEATURE] [Service Quote] [UI]
      // [SCENARIO 123585] Service Item Line Details Factbox shows Service Item No., No. of Components and Troubleshooting in Service Quote
      Initialize;
      // [GIVEN] Service Item X with 2 components, 3 Troubleshooting.
      CreateServiceItemWithComponents(ServiceItem,NoOfComponents,NoOfTroubleShooting,LibrarySales.CreateCustomerNo);
      // [GIVEN] Service Quote for Item X
      CreateServiceDocumentWithLine(
        ServiceHeader,ServiceHeader."Document Type"::Quote,
        ServiceItem."Customer No.",ServiceItem."No.");
      // [WHEN] Service Quote Page is opened
      ServiceQuote.OPENVIEW;
      ServiceQuote.GOTORECORD(ServiceHeader);
      // [THEN] Service Item Line Details in Service Quote Page shows Item X, 2 components, 3 Troubleshooting
      VerifyServiceItemLineDetailsFactBox(ServiceQuote,ServiceItem."No.",NoOfComponents,NoOfTroubleShooting);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingLinesPageHandler,EnterQuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PartiallyPostingWhseShipmentForServiceLineWithItemTracking@55();
    VAR
      Location@1003 : Record 14;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseShipmentLine@1007 : Record 7321;
      WarehouseActivityLine@1009 : Record 5767;
      ServiceHeader@1017 : Record 5900;
      ServiceItem@1019 : Record 5940;
      ServiceItemLine@1020 : Record 5901;
      BinContent@1002 : Record 7302;
      ItemNo@1000 : ARRAY [2] OF Code[20];
      Quantity@1001 : Integer;
      i@1022 : Integer;
    BEGIN
      // [FEATURE] [Warehouse Shipment]
      // [SCENARIO 224086] Remaining quantity in bin becomes equal to 1 when there were N pcs in the bin and warehouse shipment for N - 1 pcs is posted for service line with item tracking and registered pick.
      Initialize;
      Quantity := LibraryRandom.RandIntInRange(5,10);

      // [GIVEN] Lot-tracked item "IL" and serial no.-tracked item "IS". Lot and Serial No. warehouse tracking is enabled.
      CreateFullWarehouseLocation(Location);
      ItemNo[1] := CreateItemWithSerialAndLotNo(LibraryUtility.GetGlobalNoSeriesCode,'',TRUE,FALSE,TRUE); // lot tracked item
      ItemNo[2] := CreateItemWithSerialAndLotNo('',LibraryUtility.GetGlobalNoSeriesCode,FALSE,TRUE,TRUE); // serial no. tracked item

      // [GIVEN] Purchase Order with two item lines and quantity "Q".
      // [GIVEN] Lot "L" is assigned to the line with item "IL", serial nos. "S1".."SQ" are assigned to the line with item "IS".
      // [GIVEN] Whse. Receipt is posted, Put-away is registered.
      CreatePurchaseOrderForLocation(PurchaseHeader,PurchaseLine,Location.Code,ItemNo[1],Quantity);
      LibraryVariableStorage.Enqueue(ItemTrackingAction::AssignLotNo);
      PurchaseLine.OpenItemTrackingLines;
      CreatePurchaseLineWithLocationCode(PurchaseLine,PurchaseHeader,ItemNo[2],Location.Code,Quantity);
      LibraryVariableStorage.Enqueue(ItemTrackingAction::AssignSerialNo);
      PurchaseLine.OpenItemTrackingLines;
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      CreateAndPostWhseReceiptFromPO(PurchaseHeader);
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");

      // [GIVEN] Service Order with two service lines with items "IL" and "IS" and assigned tracking.
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      FOR i := 1 TO ARRAYLEN(ItemNo) DO BEGIN
        LibraryVariableStorage.Enqueue(ItemTrackingAction::SelectEntries);
        CreateServiceLineWithItemTracking(ServiceHeader,ServiceItemLine,ItemNo[i],Location.Code,Quantity);
      END;

      // [GIVEN] Warehouse shipment for the service order.
      // [GIVEN] Registered warehouse pick.
      ServiceHeader.FIND;
      LibraryService.ReleaseServiceDocument(ServiceHeader);
      CreateWarehouseShipmentFromServiceHeader(ServiceHeader);
      WarehouseShipmentHeader.GET(
        LibraryWarehouse.FindWhseShipmentNoBySourceDoc(DATABASE::"Service Line",ServiceHeader."Document Type",ServiceHeader."No."));
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
      RegisterWarehouseActivity(ServiceHeader."No.",WarehouseActivityLine."Activity Type"::Pick);

      // [GIVEN] Qty. to Ship is reduced by 1 pc on both lines in the warehouse shipment.
      // [GIVEN] Qty. to Handle on item tracking for each "IL" and "IS" line is reduced by 1 pc.
      FOR i := 1 TO ARRAYLEN(ItemNo) DO BEGIN
        FindWarehouseShipmentLine(WarehouseShipmentLine,WarehouseShipmentHeader."No.",ItemNo[i]);
        WarehouseShipmentLine.VALIDATE("Qty. to Ship",WarehouseShipmentLine."Qty. to Ship" - 1);
        WarehouseShipmentLine.MODIFY(TRUE);
        LibraryVariableStorage.Enqueue(ItemTrackingAction::AdjustQtyToHandle);
        LibraryVariableStorage.Enqueue(-1);
        WarehouseShipmentLine.OpenItemTrackingLines;
      END;

      // [WHEN] Post the warehouse shipment.
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);

      // [THEN] 1 pc of each "IL" and "IS" items remains in warehouse.
      FOR i := 1 TO 2 DO BEGIN
        BinContent.SETRANGE("Item No.",ItemNo[i]);
        BinContent.FINDFIRST;
        Assert.RecordCount(BinContent,1);
        BinContent.CALCFIELDS(Quantity);
        BinContent.TESTFIELD(Quantity,1);
      END;

      LibraryVariableStorage.AssertEmpty;
    END;

    [Test]
    PROCEDURE ServiceItemTrackingIsManagedByWhse@102();
    VAR
      Location@1001 : Record 14;
      WarehouseShipmentLine@1002 : Record 7321;
      ItemTrackingMgt@1000 : Codeunit 6500;
      ItemNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 224086] Function "ItemTrkgIsManagedByWhse" in codeunit 6500 returns TRUE if whse. shipment line exists for service line with tracked item and location with enabled pick.
      Initialize;

      LibraryWarehouse.CreateLocationWMS(Location,FALSE,FALSE,TRUE,FALSE,FALSE);
      ItemNo := CreateItemWithSerialAndLotNo(LibraryUtility.GetGlobalNoSeriesCode,'',TRUE,FALSE,TRUE);

      WITH WarehouseShipmentLine DO BEGIN
        INIT;
        "No." := LibraryUtility.GenerateGUID;
        "Line No." := LibraryUtility.GetNewRecNo(WarehouseShipmentLine,FIELDNO("Line No."));
        "Source Type" := DATABASE::"Service Line";
        "Source No." := LibraryUtility.GenerateGUID;
        INSERT;

        Assert.IsTrue(
          ItemTrackingMgt.ItemTrkgIsManagedByWhse(
            "Source Type","Source Subtype","Source No.",0,"Source Line No.",Location.Code,ItemNo),
          'Item tracking on service line is not managed by warehouse.');
      END;
    END;

    LOCAL PROCEDURE AssignItemTrackingAndPostPurchaseOrder@14(LotNos@1006 : Code[10];SerialNos@1005 : Code[10];LotSpecificTracking@1003 : Boolean;SerialNoSpecificTracking@1002 : Boolean;ItemTrackingAction2@1004 : Option);
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      AssignItemTracking(PurchaseHeader,LotNos,SerialNos,LotSpecificTracking,SerialNoSpecificTracking,ItemTrackingAction2,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE AssignItemTracking@81(VAR PurchaseHeader@1007 : Record 38;LotNos@1006 : Code[10];SerialNos@1005 : Code[10];LotSpecificTracking@1003 : Boolean;SerialNoSpecificTracking@1002 : Boolean;ItemTrackingAction2@1004 : Option;ModifyTrackingCode@1000 : Boolean);
    VAR
      PurchaseLine@1001 : Record 39;
    BEGIN
      ItemNo := CreateItemWithSerialAndLotNo(LotNos,SerialNos,LotSpecificTracking,SerialNoSpecificTracking,TRUE);  // Assign Item No. to global variable and blank value is taken for Serial No.
      IF ModifyTrackingCode THEN
        ModifyItemTrackingCode(ItemNo);
      OriginalQuantity := 2 * RANDOM(10);  // Random Integer value greater than 1 required for test. Assign it to Global Variable.
      CreatePurchaseOrder(PurchaseHeader);
      FindPurchaseOrderLine(PurchaseLine,PurchaseHeader."No.");
      ItemTrackingAction := ItemTrackingAction2;
      PurchaseLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.
    END;

    LOCAL PROCEDURE AssignItemTrackingAndPostPurchaseOrderWithMaxQtyItem@79(VAR Item@1007 : Record 27;LotNos@1006 : Code[10];SerialNos@1005 : Code[10];LotSpecificTracking@1003 : Boolean;SerialNoSpecificTracking@1002 : Boolean;ItemTrackingAction2@1004 : Option);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Update the Reordering Policy on Item Card.
      ItemNo := CreateItemWithSerialAndLotNo(LotNos,SerialNos,LotSpecificTracking,SerialNoSpecificTracking,FALSE);
      WITH Item DO BEGIN
        GET(ItemNo);
        VALIDATE("Reordering Policy","Reordering Policy"::"Maximum Qty.");
        VALIDATE("Maximum Inventory",LibraryRandom.RandInt(10));
        MODIFY(TRUE);
      END;
      CreatePurchaseOrder(PurchaseHeader);
      FindPurchaseOrderLine(PurchaseLine,PurchaseHeader."No.");
      ItemTrackingAction := ItemTrackingAction2;
      LibraryVariableStorage.Enqueue(FALSE); // Enqueue for ItemTrackingAndVerifyItemTrackingQtyPageHandler.
      PurchaseLine.OpenItemTrackingLines; // Assign Item Tracking on page handler.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE AssignItemTrackingAndPostPurchaseOrderOnWhiteLocation@7(LotNos@1006 : Code[10];SerialNos@1005 : Code[10];ItemTrackingAction2@1004 : Option;LocationCode@1007 : Code[10];Quantity@1008 : Integer;SetExpirationDate@1003 : Boolean;ExpirationDate@1010 : Date);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      WarehouseActivityLine@1009 : Record 5767;
    BEGIN
      ItemNo := CreateItemWithSerialAndLotNoForItemTrackingCode(LotNos,SerialNos,FALSE,TRUE,FALSE); // Assign Item No. to global variable and blank value is taken for Serial No.
      OriginalQuantity := Quantity;  // Random Integer value greater than 1 required for test. Assign it to Global Variable.
      CreatePurchaseOrderForLocation(PurchaseHeader,PurchaseLine,LocationCode,ItemNo,Quantity);
      ItemTrackingAction := ItemTrackingAction2;
      PurchaseLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.
      IF SetExpirationDate THEN
        UpdateReservationEntry(PurchaseLine."No.",ExpirationDate);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      CreateAndPostWhseReceiptFromPO(PurchaseHeader);
      RegisterWarehouseActivity(PurchaseHeader."No.",WarehouseActivityLine."Activity Type"::"Put-away");
    END;

    LOCAL PROCEDURE AssignItemTrackingOnPurchaseAndServiceOrder@41(VAR ServiceLine@1003 : Record 5902;Quantity@1000 : Decimal);
    BEGIN
      AssignItemTrackingAndPostPurchaseOrder('',LibraryUtility.GetGlobalNoSeriesCode,FALSE,TRUE,ItemTrackingAction::AssignSerialNo);
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,ItemNo,OriginalQuantity + Quantity);
      ServiceLine.GET(ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.");
      ItemTrackingAction := ItemTrackingAction::SelectEntries;
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.
    END;

    LOCAL PROCEDURE AssignItemTrackingOnServiceOrderWithItem@75(VAR Item@1001 : Record 27;VAR ServiceLine@1003 : Record 5902;Quantity@1000 : Integer);
    BEGIN
      AssignItemTrackingAndPostPurchaseOrderWithMaxQtyItem(Item,'',
        LibraryUtility.GetGlobalNoSeriesCode,FALSE,TRUE,ItemTrackingAction::AssignSerialNo);
      CreateShipToAddressAndUpdateServiceLine(ServiceLine,Item."No.",Quantity);
      ServiceLine.GET(ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.");
      ItemTrackingAction := ItemTrackingAction::SelectEntries;
      LibraryVariableStorage.Enqueue(FALSE); // Enqueue for ItemTrackingAndVerifyItemTrackingQtyPageHandler.
      ServiceLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.
    END;

    LOCAL PROCEDURE CreateItemWithSerialAndLotNo@138(LotNos@1003 : Code[10];SerialNos@1002 : Code[10];LotSpecificTracking@1005 : Boolean;SerialNoSpecificTracking@1004 : Boolean;CreateNewItemTrackingCode@1000 : Boolean) : Code[20];
    BEGIN
      EXIT(
        CreateItemWithSerialAndLotNoForItemTrackingCode(
          LotNos,SerialNos,LotSpecificTracking,SerialNoSpecificTracking,CreateNewItemTrackingCode));
    END;

    LOCAL PROCEDURE CreateItemWithSerialAndLotNoForItemTrackingCode@20(LotNos@1003 : Code[10];SerialNos@1002 : Code[10];LotSpecificTracking@1006 : Boolean;SerialNoSpecificTracking@1004 : Boolean;CreateNewItemTrackingCode@1000 : Boolean) : Code[20];
    VAR
      Item@1001 : Record 27;
      ExpirationCalculation@1005 : DateFormula;
      ItemTrackingCode@1007 : Code[10];
    BEGIN
      EVALUATE(ExpirationCalculation,'<' + FORMAT(RANDOM(5)) + 'D>');
      LibraryInventory.CreateItem(Item);
      IF CreateNewItemTrackingCode THEN
        ItemTrackingCode := CreateItemTrackingCode(LotSpecificTracking,SerialNoSpecificTracking,FALSE)
      ELSE
        ItemTrackingCode := FindItemTrackingCode(LotSpecificTracking,SerialNoSpecificTracking);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode);
      Item.VALIDATE("Serial Nos.",SerialNos);
      Item.VALIDATE("Lot Nos.",LotNos);
      Item.VALIDATE("Expiration Calculation",ExpirationCalculation);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@128(VAR PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1003 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,OriginalQuantity);
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithLocationCode@115(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38;ItemNo@1002 : Code[20];LocationCode@1004 : Code[10];Qty@1003 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Qty);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceDocument@6(VAR ServiceLine@1000 : Record 5902;CustomerNo@1001 : Code[20];ItemNumber@1004 : Code[20];DocumentType@1006 : Option);
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItem@1002 : Record 5940;
      ServiceItemLine@1005 : Record 5901;
      ServiceItemComponent@1007 : Record 5941;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,CustomerNo);
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNumber);
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemComponent(ServiceItemComponent,ServiceItem."No.",ServiceLine.Type::Item,ServiceLine."No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceDocumentWithLine@103(VAR ServiceHeader@1000 : Record 5900;DocumentType@1001 : Option;CustomerNo@1002 : Code[20];ServiceItemNo@1003 : Code[20]);
    VAR
      ServiceItemLine@1004 : Record 5901;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,DocumentType,CustomerNo);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItemNo);
    END;

    LOCAL PROCEDURE CreateServiceItemWithComponents@122(VAR ServiceItem@1000 : Record 5940;VAR NoOfComponents@1001 : Integer;VAR NoOfTroubleShooting@1010 : Integer;CustomerNo@1003 : Code[20]);
    VAR
      I@1002 : Integer;
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,CustomerNo);

      NoOfComponents := LibraryRandom.RandInt(10);
      FOR I := 1 TO NoOfComponents DO
        CreateServiceItemComponent(ServiceItem."No.",CustomerNo);

      NoOfTroubleShooting := LibraryRandom.RandInt(10);
      FOR I := 1 TO NoOfTroubleShooting DO
        CreateServiceItemTroubleshooting(ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateServiceItemComponent@143(ServiceItemNo@1002 : Code[20];CustomerNo@1003 : Code[20]);
    VAR
      ServiceItemForComponent@1001 : Record 5940;
      ServiceItemComponent@1000 : Record 5941;
    BEGIN
      LibraryService.CreateServiceItem(ServiceItemForComponent,CustomerNo);
      LibraryService.CreateServiceItemComponent(
        ServiceItemComponent,ServiceItemNo,
        ServiceItemComponent.Type::"Service Item",ServiceItemForComponent."No.");
    END;

    LOCAL PROCEDURE CreateServiceItemTroubleshooting@147(ServiceItemNo@1000 : Code[20]);
    VAR
      TroubleshootingHeader@1003 : Record 5943;
      TroubleshootingLine@1002 : Record 5944;
      TroubleshootingSetup@1001 : Record 5945;
    BEGIN
      LibraryService.CreateTroubleshootingHeader(TroubleshootingHeader);
      LibraryService.CreateTroubleshootingLine(TroubleshootingLine,TroubleshootingHeader."No.");
      LibraryService.CreateTroubleshootingSetup(
        TroubleshootingSetup,TroubleshootingSetup.Type::"Service Item",
        ServiceItemNo,TroubleshootingHeader."No.");
    END;

    LOCAL PROCEDURE CreateServiceLineWithItemTracking@125(ServiceHeader@1002 : Record 5900;ServiceItemLine@1008 : Record 5901;ItemNo@1005 : Code[20];LocationCode@1007 : Code[10];Qty@1006 : Decimal);
    VAR
      ServiceItemComponent@1000 : Record 5941;
      ServiceLine@1001 : Record 5902;
    BEGIN
      LibraryService.CreateServiceItemComponent(ServiceItemComponent,ServiceItemLine."Service Item No.",ServiceLine.Type::Item,ItemNo);
      LibraryService.CreateServiceLineWithQuantity(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo,Qty);
      ServiceLine.VALIDATE("Location Code",LocationCode);
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.MODIFY(TRUE);
      ServiceLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateShipToAddressAndUpdateServiceLine@44(VAR ServiceLine@1000 : Record 5902;ItemNumber@1003 : Code[20];Quantity@1006 : Decimal);
    VAR
      Customer@1008 : Record 18;
      ShipToAddress@1001 : Record 222;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateShipToAddress(ShipToAddress,Customer."No.");
      CreateServiceDocument(ServiceLine,Customer."No.",ItemNumber,ServiceLine."Document Type"::Order);
      UpdateServiceLineQuantity(ServiceLine,Quantity);
    END;

    LOCAL PROCEDURE CreateShipToAddressAndUpdateServiceInvoiceLine@57(VAR ServiceLine@1000 : Record 5902;ItemNumber@1003 : Code[20];Quantity@1006 : Decimal);
    VAR
      Customer@1008 : Record 18;
      ShipToAddress@1001 : Record 222;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateShipToAddress(ShipToAddress,Customer."No.");
      CreateServiceDocument(ServiceLine,Customer."No.",ItemNumber,ServiceLine."Document Type"::Invoice);
      UpdateServiceLineQuantity(ServiceLine,Quantity);
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentFromServiceHeader@71(ServiceHeader@1000 : Record 5900);
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromServiceOrder(ServiceHeader);
    END;

    LOCAL PROCEDURE CreateFullWarehouseLocation@70(VAR Location@1000 : Record 14);
    BEGIN
      LibraryService.CreateFullWarehouseLocation(Location,2);  // Value used for number of bin per zone.
    END;

    LOCAL PROCEDURE CreatePurchaseOrderForLocation@42(VAR PurchaseHeader@1006 : Record 38;VAR PurchaseLine@1001 : Record 39;LocationCode@1003 : Code[10];ItemNo@1004 : Code[20];Quantity@1000 : Decimal);
    BEGIN
      // Create Purchase Order with One Item Line. Random values used are not important for test.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      PurchaseHeader.VALIDATE(
        "Vendor Invoice No.",LibraryUtility.GenerateRandomCode(PurchaseHeader.FIELDNO("Vendor Invoice No."),DATABASE::"Purchase Header"));
      PurchaseHeader.MODIFY(TRUE);
      CreatePurchaseLineWithLocationCode(PurchaseLine,PurchaseHeader,ItemNo,LocationCode,Quantity);
    END;

    LOCAL PROCEDURE CreateAndPostWhseReceiptFromPO@116(VAR PurchaseHeader@1000 : Record 38);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      PostWarehouseReceipt(WarehouseReceiptLine."Source Document"::"Purchase Order",PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@10(LotSpecificTracking@1002 : Boolean;SerialNoSpecificTracking@1003 : Boolean;ManualExpirationDateEntry@1001 : Boolean) : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,SerialNoSpecificTracking,LotSpecificTracking);
      ItemTrackingCode.VALIDATE("Man. Expir. Date Entry Reqd.",ManualExpirationDateEntry);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",LotSpecificTracking);
      ItemTrackingCode.VALIDATE("SN Warehouse Tracking",SerialNoSpecificTracking);
      ItemTrackingCode.MODIFY(TRUE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE ModifyItemTrackingCode@80(ItemNo@1000 : Code[20]);
    VAR
      Item@1001 : Record 27;
      ItemTrackingCode@1002 : Record 6502;
    BEGIN
      Item.GET(ItemNo);
      WITH ItemTrackingCode DO BEGIN
        GET(Item."Item Tracking Code");
        VALIDATE("Lot Specific Tracking",FALSE);
        VALIDATE("SN Specific Tracking",FALSE);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE FindPurchaseItemLedgerEntry@148(VAR ItemLedgerEntry@1001 : Record 32);
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Entry Type",ItemLedgerEntry."Entry Type"::Purchase);
      ItemLedgerEntry.FINDLAST;
    END;

    LOCAL PROCEDURE FindItem@43() : Code[20];
    BEGIN
      EXIT(LibraryInventory.CreateItemNo);
    END;

    LOCAL PROCEDURE FindItemTrackingCode@54(LotSpecificTracking@1002 : Boolean;SerialNoSpecificTracking@1003 : Boolean) : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      ItemTrackingCode.SETRANGE("Man. Expir. Date Entry Reqd.",FALSE);
      ItemTrackingCode.SETRANGE("Lot Specific Tracking",LotSpecificTracking);
      ItemTrackingCode.SETRANGE("Lot Sales Inbound Tracking",LotSpecificTracking);
      ItemTrackingCode.SETRANGE("Lot Sales Outbound Tracking",LotSpecificTracking);
      ItemTrackingCode.SETRANGE("SN Specific Tracking",SerialNoSpecificTracking);
      ItemTrackingCode.SETRANGE("SN Sales Inbound Tracking",SerialNoSpecificTracking);
      ItemTrackingCode.SETRANGE("SN Sales Outbound Tracking",SerialNoSpecificTracking);
      ItemTrackingCode.FINDFIRST;
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE FindLotNoFromItemLedgerEntry@51() : Code[20];
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      FindPurchaseItemLedgerEntry(ItemLedgerEntry);
      EXIT(ItemLedgerEntry."Lot No.");
    END;

    LOCAL PROCEDURE FindSerialNoFromItemLedgerEntry@21() : Code[20];
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      FindPurchaseItemLedgerEntry(ItemLedgerEntry);
      EXIT(ItemLedgerEntry."Serial No.");
    END;

    LOCAL PROCEDURE FindPurchaseOrderLine@40(VAR PurchaseLine@1000 : Record 39;DocumentNo@1002 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityNo@88(SourceNo@1002 : Code[20];ActivityType@1003 : Option) : Code[20];
    VAR
      WarehouseActivityLine@1004 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDFIRST;
      EXIT(WarehouseActivityLine."No.");
    END;

    LOCAL PROCEDURE FindWarehouseReceiptNo@56(SourceDocument@1002 : Option;SourceNo@1003 : Code[20]) : Code[20];
    VAR
      WarehouseReceiptLine@1004 : Record 7317;
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
      EXIT(WarehouseReceiptLine."No.");
    END;

    LOCAL PROCEDURE FindWarehouseShipmentLine@134(VAR WarehouseShipmentLine@1002 : Record 7321;WarehouseShipmentNo@1000 : Code[20];ItemNo@1001 : Code[20]);
    BEGIN
      WarehouseShipmentLine.SETRANGE("No.",WarehouseShipmentNo);
      WarehouseShipmentLine.SETRANGE("Item No.",ItemNo);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindServiceInvoiceLine@106(VAR ServiceInvoiceLine@1001 : Record 5993;ItemNo@1002 : Code[20]);
    BEGIN
      WITH ServiceInvoiceLine DO BEGIN
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ItemNo);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@2(SourceDocument@1000 : Option;SourceNo@1001 : Code[20]);
    VAR
      WarehouseReceiptHeader@1002 : Record 7316;
    BEGIN
      WarehouseReceiptHeader.GET(FindWarehouseReceiptNo(SourceDocument,SourceNo));
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@32(SourceNo@1002 : Code[20];Type@1000 : Option);
    VAR
      WarehouseActivityHeader@1003 : Record 5766;
    BEGIN
      WarehouseActivityHeader.SETRANGE(Type,Type);
      WarehouseActivityHeader.SETRANGE("No.",FindWarehouseActivityNo(SourceNo,Type));
      WarehouseActivityHeader.FINDFIRST;
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE OpenServiceShipmentLinesFromPostedServiceShipment@47(OrderNo@1001 : Code[20]);
    VAR
      PostedServiceShipment@1000 : TestPage 5975;
    BEGIN
      PostedServiceShipment.OPENEDIT;
      PostedServiceShipment.FILTER.SETFILTER("Order No.",OrderNo);
      PostedServiceShipment.ServShipmentItemLines.ServiceShipmentLines.INVOKE;
    END;

    LOCAL PROCEDURE OpenServiceOrdersPage@95(VAR ServiceOrders@1002 : TestPage 9318;DocumentNo@1001 : Code[20]);
    BEGIN
      ServiceOrders.OPENVIEW;
      ServiceOrders.FILTER.SETFILTER("No.",DocumentNo);
    END;

    LOCAL PROCEDURE OpenServiceOrderPage@46(VAR ServiceOrder@1002 : TestPage 5900;DocumentNo@1001 : Code[20]);
    BEGIN
      ServiceOrder.OPENVIEW;
      ServiceOrder.FILTER.SETFILTER("No.",DocumentNo);
    END;

    LOCAL PROCEDURE UpdateServiceLineQuantity@96(VAR ServiceLine@1000 : Record 5902;Quantity@1001 : Decimal);
    BEGIN
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateReservationEntry@15(ItemNo@1001 : Code[20];ExpirationDate@1002 : Date);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.MODIFYALL("Expiration Date",ExpirationDate,TRUE);
    END;

    LOCAL PROCEDURE UndoShipment@77(OrderNo@1001 : Code[20]);
    VAR
      ServiceShipmentLine@1000 : Record 5991;
    BEGIN
      ServiceShipmentLine.SETRANGE("Order No.",OrderNo);
      CODEUNIT.RUN(CODEUNIT::"Undo Service Shipment Line",ServiceShipmentLine);
    END;

    LOCAL PROCEDURE UndoConsumption@87(OrderNo@1001 : Code[20]);
    VAR
      ServiceShipmentLine@1000 : Record 5991;
    BEGIN
      ServiceShipmentLine.SETRANGE("Order No.",OrderNo);
      CODEUNIT.RUN(CODEUNIT::"Undo Service Consumption Line",ServiceShipmentLine);
    END;

    LOCAL PROCEDURE UpdateQuantityToConsume@53(VAR ServiceLine@1001 : Record 5902;QtyToConsume@1000 : Decimal);
    BEGIN
      ServiceLine.VALIDATE("Qty. to Consume",QtyToConsume);
      ServiceLine.MODIFY(TRUE);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@27(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      ActualMessage := Question;  // Store Confirm message to verify Confirm string in Tests.
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingActionsPageHandler@84(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      CASE ItemTrackingAction OF
        ItemTrackingAction::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
        ItemTrackingAction::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
      END;
      ItemTrackingLines.OK.INVOKE;
      COMMIT;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@24(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      COMMIT;
      CASE ItemTrackingAction OF
        ItemTrackingAction::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        ItemTrackingAction::AssignLotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
        ItemTrackingAction::SelectEntries:
          BEGIN
            ItemTrackingLines."Select Entries".INVOKE;
            ItemTrackingLines.AvailabilityLotNo.ASSERTEQUALS(TRUE);
          END;
        ItemTrackingAction::AssignLotManually:
          BEGIN
            ItemTrackingLines."Lot No.".SETVALUE(LotNo);
            ItemTrackingLines.Quantity_ItemTracking.SETVALUE(OriginalQuantity);
            ItemTrackingLines."Quantity (Base)".SETVALUE(OriginalQuantity);
          END;
        ItemTrackingAction::AvailabilityLotNo:
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;
            ItemTrackingLines.AvailabilityLotNo.ASSERTEQUALS(TRUE);
          END;
        ItemTrackingAction::AvailabilitySerialNo:
          BEGIN
            ItemTrackingLines."Assign Serial No.".INVOKE;
            ItemTrackingLines.AvailabilitySerialNo.ASSERTEQUALS(AvailabilitySerialNo);
          END;
        ItemTrackingAction::LookupLotNo:
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;
            ItemTrackingLines."Lot No.".LOOKUP;
            ItemTrackingLines."Quantity (Base)".ASSERTEQUALS(OriginalQuantity);
            ItemTrackingLines."Qty. to Handle (Base)".ASSERTEQUALS(OriginalQuantity);
          END;
        ItemTrackingAction::CreateCustomizedSerialNo:
          ItemTrackingLines.CreateCustomizedSN.INVOKE;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingAndVerifyItemTrackingQtyPageHandler@83(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      Verify@1003 : Variant;
      ExpectedItemTrackingQty@1002 : Variant;
      VerifyAction@1001 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(Verify);
      VerifyAction := Verify;
      IF NOT VerifyAction THEN
        CASE ItemTrackingAction OF
          ItemTrackingAction::SelectEntries:
            ItemTrackingLines."Select Entries".INVOKE;
          ItemTrackingAction::AssignSerialNo:
            ItemTrackingLines."Assign Serial No.".INVOKE;
        END
      ELSE BEGIN
        LibraryVariableStorage.Dequeue(ExpectedItemTrackingQty);
        Assert.AreEqual(FORMAT(ExpectedItemTrackingQty),ItemTrackingLines.Quantity_ItemTracking.VALUE,ItemTrackingQtyErr);
      END;
      ItemTrackingLines.OK.INVOKE;
      COMMIT;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@58(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      QtyToHandle@1001 : Decimal;
    BEGIN
      CASE LibraryVariableStorage.DequeueInteger OF
        ItemTrackingAction::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        ItemTrackingAction::AssignLotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
        ItemTrackingAction::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
        ItemTrackingAction::AdjustQtyToHandle:
          BEGIN
            ItemTrackingLines.FIRST;
            EVALUATE(QtyToHandle,ItemTrackingLines."Qty. to Handle (Base)".VALUE);
            ItemTrackingLines."Qty. to Handle (Base)".SETVALUE(QtyToHandle + LibraryVariableStorage.DequeueDecimal);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@65(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.QtyToCreate.SETVALUE(OriginalQuantity);
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE EnterQuantityToCreatePageHandler@110(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedItemTrackingLinesHandler@129(VAR PostedItemTrackingLines@1000 : TestPage 6511);
    BEGIN
      PostedItemTrackingLines."Serial No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      IF GlobalCheckExpirationDate THEN
        PostedItemTrackingLines."Expiration Date".ASSERTEQUALS(GlobalExpirationDate);
    END;

    [ModalPageHandler]
    PROCEDURE PostedServiceShipmentLinesHandler@76(VAR PostedServiceShipmentLines@1000 : TestPage 5970);
    BEGIN
      PostedServiceShipmentLines.ItemTrackingEntries.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@173(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedItemTrackingLinesForUndoShipment@16(VAR PostedItemTrackingLines@1000 : TestPage 6511);
    BEGIN
      PostedItemTrackingLines."Serial No.".ASSERTEQUALS(LibraryVariableStorage.DequeueText);
      Assert.IsTrue(PostedItemTrackingLines.Quantity.ASINTEGER < 0,'Verify that undo entries are positive');
      IF GlobalCheckExpirationDate THEN
        PostedItemTrackingLines."Expiration Date".ASSERTEQUALS(GlobalExpirationDate);
    END;

    [ModalPageHandler]
    PROCEDURE PostedServiceShipmentLinesHandlerForUndoShipment@11(VAR PostedServiceShipmentLines@1000 : TestPage 5970);
    BEGIN
      PostedServiceShipmentLines.FILTER.SETFILTER(Quantity,'<0');
      Assert.IsTrue(PostedServiceShipmentLines.Quantity.ASINTEGER < 0,'Verify that undo shipment entries are positive');
      PostedServiceShipmentLines.ItemTrackingEntries.INVOKE;
    END;

    LOCAL PROCEDURE CalculatePlanForReqWksh@69(Item@1005 : Record 27);
    VAR
      RequisitionWkshName@1001 : Record 245;
      ReqWkshTemplate@1002 : Record 244;
      StartDate@1003 : Date;
      EndDate@1000 : Date;
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::"Req.");
      ReqWkshTemplate.SETRANGE(Recurring,FALSE);
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      StartDate := CALCDATE('<-CM>',WORKDATE);
      EndDate := CALCDATE('<CM>',WORKDATE);
      LibraryPlanning.CalculatePlanForReqWksh(Item,ReqWkshTemplate.Name,RequisitionWkshName.Name,StartDate,EndDate);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmationHandler@8(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntryOnPost@50(VAR ServiceLine@1000 : Record 5902;LotSpecific@1002 : Boolean;SerialNoSpecific@1003 : Boolean;CheckExpirationDate@1004 : Boolean;ExpirationDate@1005 : Date;UndoShipment@1007 : Boolean);
    VAR
      ItemLedgerEntry@1001 : Record 32;
      AggregatedQuantity@1006 : Integer;
      Sign@1008 : Integer;
    BEGIN
      // Verify that the value of the field Quantity of the Item Ledger Entry is equal to the value of the field Qty. to Ship of the
      // relevant Service Line.
      ItemLedgerEntry.SETRANGE("Document Type",ItemLedgerEntry."Document Type"::"Service Shipment");
      ItemLedgerEntry.SETRANGE("Order Type",ItemLedgerEntry."Order Type"::Service);
      ItemLedgerEntry.SETRANGE("Order No.",ServiceLine."Document No.");
      IF UndoShipment THEN BEGIN
        ItemLedgerEntry.SETFILTER(Quantity,'>0');
        Sign := 1;
      END ELSE
        Sign := -1;
      REPEAT
        ItemLedgerEntry.SETRANGE("Order Line No.",ServiceLine."Line No.");
        ItemLedgerEntry.FINDSET;
        AggregatedQuantity := 0;
        REPEAT
          ItemLedgerEntry.TESTFIELD("Item No.",ServiceLine."No.");
          IF CheckExpirationDate AND UndoShipment THEN
            ItemLedgerEntry.TESTFIELD("Expiration Date",ExpirationDate);
          IF SerialNoSpecific THEN BEGIN
            AggregatedQuantity := AggregatedQuantity + ItemLedgerEntry.Quantity;
            ItemLedgerEntry.TESTFIELD(Quantity,Sign);
            Assert.AreNotEqual('',ItemLedgerEntry."Serial No.",'Verify that Serial number in ILE is not empty');
          END;
          IF LotSpecific THEN
            Assert.AreNotEqual('',ItemLedgerEntry."Lot No.",'Verify that Lot number in ILE is not empty');

        UNTIL ItemLedgerEntry.NEXT = 0;
        Assert.AreEqual(
          Sign * ServiceLine.Quantity,AggregatedQuantity,'Verify the sum of ILE quantities matches the quantity shipped');
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceItemLineDetailsFactBox@126(ServiceQuote@1000 : TestPage 5964;ServiceItemNo@1002 : Code[20];NoOfComponents@1003 : Integer;NoOfTroubleShooting@1004 : Integer);
    BEGIN
      ServiceQuote."Service Item Line FactBox"."Service Item No.".ASSERTEQUALS(ServiceItemNo);
      ServiceQuote."Service Item Line FactBox".ComponentList.ASSERTEQUALS(NoOfComponents);
      ServiceQuote."Service Item Line FactBox".Troubleshooting.ASSERTEQUALS(NoOfTroubleShooting);
    END;

    LOCAL PROCEDURE FindServiceLinesByHeaderNo@78(VAR ServiceLine@1001 : Record 5902;ServiceHeader@1000 : Record 5900);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDSET;
    END;

    LOCAL PROCEDURE GetWarehouseEntries@74(VAR ServiceLine@1000 : Record 5902;VAR WarehouseEntry@1001 : Record 7312;EntryType@1002 : Option);
    BEGIN
      WarehouseEntry.SETRANGE("Source Document",WarehouseEntry."Source Document"::"Serv. Order");
      WarehouseEntry.SETRANGE("Source No.",ServiceLine."Document No.");
      WarehouseEntry.SETRANGE("Source Line No.",ServiceLine."Line No.");
      WarehouseEntry.SETRANGE("Entry Type",EntryType);
      WarehouseEntry.FINDSET;
    END;

    LOCAL PROCEDURE VerifyWarehouseEntry@99(VAR ServiceLine@1001 : Record 5902;VAR WarehouseEntry@1000 : Record 7312;EntryType@1003 : Option;LotSpecific@1007 : Boolean;SerialNoSpecific@1006 : Boolean;CheckExpirationDate@1005 : Boolean;ExpirationDate@1002 : Date;UndoShipment@1008 : Boolean);
    VAR
      AggregatedQuantity@1004 : Integer;
      Sign@1009 : Integer;
    BEGIN
      AggregatedQuantity := 0;
      IF UndoShipment THEN
        Sign := 1
      ELSE
        Sign := -1;

      REPEAT
        WarehouseEntry.TESTFIELD("Location Code",ServiceLine."Location Code");
        WarehouseEntry.TESTFIELD("Item No.",ServiceLine."No.");
        WarehouseEntry.TESTFIELD("Entry Type",EntryType);
        IF CheckExpirationDate THEN
          WarehouseEntry.TESTFIELD("Expiration Date",ExpirationDate);
        IF SerialNoSpecific THEN BEGIN
          AggregatedQuantity := AggregatedQuantity + WarehouseEntry.Quantity;
          WarehouseEntry.TESTFIELD(Quantity,Sign);
          Assert.AreNotEqual('',WarehouseEntry."Serial No.",'Verify that Serial number in warehouse entry is not empty');
        END;
        IF LotSpecific THEN
          Assert.AreNotEqual('',WarehouseEntry."Lot No.",'Verify that Lot number in warehouse entry is not empty');

      UNTIL WarehouseEntry.NEXT = 0;
      Assert.AreEqual(
        Sign * ServiceLine.Quantity,AggregatedQuantity,'Verify the sum of Warehouse entry quantities matches the quantity shipped');
    END;

    LOCAL PROCEDURE VerifyNoWarehouseEntriesCreated@90(VAR ServiceLine@1000 : Record 5902);
    VAR
      WarehouseEntry@1002 : Record 7312;
    BEGIN
      WarehouseEntry.SETRANGE("Source Document",WarehouseEntry."Source Document"::"Serv. Order");
      WarehouseEntry.SETRANGE("Source No.",ServiceLine."Document No.");
      WarehouseEntry.SETRANGE("Source Line No.",ServiceLine."Line No.");
      Assert.AreEqual(FALSE,WarehouseEntry.FIND,'No Ware house entries are created');
    END;

    [ModalPageHandler]
    PROCEDURE ExpirationDateOnPostedItemTrackingLinesHandler@31(VAR PostedItemTrackingLines@1000 : TestPage 6511);
    VAR
      LineCount@1001 : Integer;
    BEGIN
      PostedItemTrackingLines.FIRST;
      REPEAT
        PostedItemTrackingLines."Expiration Date".ASSERTEQUALS(ExpirationDate);
        LineCount += 1;
      UNTIL NOT PostedItemTrackingLines.NEXT;
      Assert.AreEqual(OriginalQuantity,LineCount,NumberOfLineEqualError);  // Verify Number of line Tracking Line.
    END;

    [ModalPageHandler]
    PROCEDURE SkilledResourceListPageHandler@30(VAR SkilledResourceList@1000 : TestPage 6023);
    BEGIN
      Assert.AreEqual(STRSUBSTNO(SkilledResourceCaption,ServiceItemNo,ServiceItemNo),SkilledResourceList.CAPTION,ValidationError);
    END;

    [ModalPageHandler]
    PROCEDURE ServiceItemComponentListPageHandler@141(VAR ServiceItemComponentList@1002 : TestPage 5986);
    BEGIN
      ServiceItemComponentList."No.".ASSERTEQUALS(No);
    END;

    [ModalPageHandler]
    PROCEDURE CustomerLedgerEntriesPageHandler@208(VAR CustomerLedgerEntries@1000 : TestPage 25);
    BEGIN
      Assert.AreEqual(No,CustomerLedgerEntries.FILTER.GETFILTER("Customer No."),'Customer No. is set correctly');
    END;

    [ModalPageHandler]
    PROCEDURE EnterCustomizedSNHandler@38(VAR EnterCustomizedSN@1000 : TestPage 6515);
    BEGIN
      EnterCustomizedSN.CustomizedSN.SETVALUE(CustomizedSN);
      EnterCustomizedSN.Increment.SETVALUE(1);
      EnterCustomizedSN.QtyToCreate.SETVALUE(GlobalQty);
      EnterCustomizedSN.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Item Tracking] [Service]
      Test cases related to Service Item Tracking:
       1. Verify Item is available, when create a Purchase Order for an Item with Item Tracking and Post as Receive.
       2. Verify Item is available, when create a Purchase Order for an Item with Item Tracking and Post as Receive and Service Order Post Successfully.
       3. Verify warning message if manually type wrong Lot No.
       4. Verify warning message if manually type more than actual Quantity.
       5. Verify warning message if Change Quantity Assign Item Tracking No. Both Manually and via Select Entries.
       6. Verify warning message if Less Quantity Assign Item Tracking No. Both Manually and via Select Entries.
       7. Verify Serial No after posting the Service Order.
       8. Verify warning message when Change the Quantity and Assign Serial No.
       9. Verify warning message when Assigning wrong Serial No.
      10. Verify warning message for excess Quantity with Assign Serial No. using Select Entries on Item Tracking Line.
      11. Verify values on Item Tracking Summary page after Lookup on Lot No. field on Item Tracking page.
      12. Verify Availability Warning Message on Item Tracking page.
      13. Verify values on Item Tracking Lines page after Lookup on Lot No. field and closing Item Tracking Summary page.
      14. Verify Availability Serial No. field must be No on the Item Tracking Lines page after creating a Service Order with Serial No.
      15. Verify warning message after Assign Serial No.
      16. Check posting of Service Order with Item Tracking Serial No. without error.
      17. Verify Expiration Date after posting the Service Order.
      18. Verify Expiration Date on Item Ledger Entry after posting the Purchase Order.
      19. Verify Expiration Date after Undo Shipment on Posted Service Shipment.
      20. Verify error on Service Order while consuming Service Order with Partial Qty. to Consume.
      21. Verify Expiration Date after Undo Consumption on Posted Service Shipment.
      22. Verify Ship To Address page value from Service Order's Customer Details FactBox.
      23. Verify Service Line List page value opened from Customer Statistics FactBox.
      24. Verify Available Credit page value opened from Service Order's Customer Details FactBox.
      25. Verify Service Item Card page value opened from Service Order's Service Item Line FactBox.
      26. Verify Customer Ledger Entries page value opened from Service Order's Customer Statistics FactBox.
      27. Verify Component List page value opened from Service Order's Service Item Line Detail pane.
      28. Verify caption after opening Skilled Resource List page from Service Order's Service Item Line Detail pane.
      29. Verify Customer Card page value opened through Service Order's Service Hist. Sell-to FactBox.
      30. Verify caption of Service Orders page opened through Service Order's Service Hist. Sell-to FactBox.
      31. Verify caption of Service Quotes page opened through Service Order's Service Hist. Sell-to FactBox.
      32. Verify caption of Service Invoices page opened through Service Order's Service Hist. Sell-to FactBox.
      33. Verify caption of Service Credit Memos page opened through Service Order's Service Hist. Sell-to FactBox.
      34. Verify caption of Posted Service Shipments page opened through Service Order's Service Hist. Sell-to FactBox.
      35. Verify caption of Posted Service Invoices page opened through Service Order's Service Hist. Sell-to FactBox.
      36. Verify caption of Posted Service Credit Memos page opened through Service Order's Service Hist. Sell-to FactBox.
      37. Verify posting of service invoices from location WHITE.
      38. Verify Item Tracking Quantity on the Service Item Worksheet after calculating plan in Requisition Worksheet.
      39. Verify error message when validate Item Tracking Code in case of open document with tracking exist
      40. Verify Serial No. in Posted Item Tracking page after posting of Service Invoice

      Cover Test cases: TFS_TS_ID = 274947
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------
      ItemAvailabileWithItemTracking, PostServiceOrderWithItemTracking                              128110
      ItemTrackingNumberTypedManuallyWrongLotNo,ItemTrackingNumberTypedManuallyOverQuantity         128111
      ItemTrackingNumberTypedManuallyAndSelectEntries,
      TypedLessQuantityAndUseSelectEntriesForRemainingQuantity                               128112,128113

      Cover Test cases: TFS_TS_ID = 278192
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------
      SerialNoAfterPostingServiceOrder, WarningForSerialNoWithChangedQuantity,
      WarningWithChangedSerialNo                                                                    178114
      WarningForOverQuantityUsingSelectEntries                                                      178115

      Cover Test cases: TFS_TS_ID = 278193
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------
      LotNoLookupOnItemTrackingPage, AvailabilityWarningAfterLotNoLookupOnItemTrackingPage,         128121
      ItemTrackingValuesAfterLotNoLookup
      ServiceOrderWithItemTrackingAvailability,ServiceOrderWithItemTrackingAvailabilityWarning      128122
      PostServiceOrderWithItemTrackingAvailability

      Cover Test cases: TFS_TS_ID = 277466
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------
      ExpirationDateAfterPostingServiceOrder, ExpirationDateOnItemLedgerEntry,                      141551
      ExpirationDateUsingUndoShipmentOnShppedServiceOrder, ConsumptionErrorOnServiceOrder,
      ExpirationDateUsingUndoConsumptionOnConsumedServiceOrder,
      ShipToAddressOnCustomerDetailsFactBoxServiceOrder, ServiceLineListFromCustomerStatisticsFactBoxServiceOrder,
      AvailableCreditFromCustomerDetailsFactBoxServiceOrder, ServiceItemOnServiceItemLineFactBoxServiceOrder,
      SalesLcyOnCustomerStatisticsFactBoxServiceOrder, ComponentListOnServiceItemLineFactBoxServiceOrder,
      SkilledResourceOnServiceItemLineFactBoxServiceOrder, CustomerOnServiceHistSellToFactBoxServiceOrder,
      OrderOnServiceHistSellToFactBoxServiceOrder, QuoteOnServiceHistSellToFactBoxServiceOrder,
      InvoiceOnServiceHistSellToFactBoxServiceOrder, CreditMemosOnServiceHistSellToFactBox,
      PostedServiceShipmentsOnServiceHistSellToFactBox, PostedServiceInvoicesOnServiceHistSellToFactBox,
      PostedServiceCreditMemosOnServiceHistSellToFactBox

      Cover Test cases: TFS_TS_ID
      ----------------------------------------------------------------------------------------------------
      Test Function Name                                                                            TFS ID
      ----------------------------------------------------------------------------------------------------

      CalcPlanInReqWkshForServiceItemWksh                                                            49837
      ItemTrackingCodeValidationErrorWhenOpenDocExists                                              101478
      VerifySerialNoAfterPosingServiceInvoice                                                       118129
    }
    END.
  }
}

