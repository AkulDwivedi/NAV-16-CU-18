OBJECT Codeunit 134822 DimFilter Unit Tests
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1002 : Codeunit 130000;
      LibraryDim@1000 : Codeunit 131001;
      LibraryUtility@1017 : Codeunit 131000;
      DimensionMgt@1001 : Codeunit 408;
      LibraryRandom@1016 : Codeunit 130440;
      TestDataSetUp@1004 : Boolean;
      DimCode1@1005 : Code[20];
      DimCode2@1006 : Code[20];
      Text000@1018 : TextConst 'ENU=%1 is not empty';
      DimCode3@1019 : Code[20];
      Text001@1003 : TextConst 'ENU=More than 1 entry exists in %1';
      Text002@1007 : TextConst 'ENU=%1''s are not equal';
      Text003@1008 : TextConst 'ENU=# of iterations are not equal';
      DimCode4@1009 : Code[20];
      Text004@1010 : TextConst 'ENU=# of records is not 2 in %1';
      Text005@1011 : TextConst 'ENU=%1 is empty';
      Text006@1012 : TextConst 'ENU=Number of records is not same in expected and actual table variables.';
      Text007@1013 : TextConst 'ENU=DimFilterChunk length should be 0 for invalid dimension value.';
      DimCode5@1014 : Code[20];
      DimCode6@1015 : Code[20];
      WrongCaptionErr@1021 : TextConst 'ENU=The caption for column %1 is wrong.';

    [Test]
    PROCEDURE TestClearDimSetFilter@17();
    VAR
      TempDimSetEntry@1000 : TEMPORARY Record 480;
    BEGIN
      SetupTestData;
      DimensionMgt.GetDimSetIDsForFilter('','');
      DimensionMgt.GetTempDimSetEntry(TempDimSetEntry);
      Assert.IsFalse(TempDimSetEntry.ISEMPTY,STRSUBSTNO(Text005,TempDimSetEntry.TABLECAPTION));
      DimensionMgt.ClearDimSetFilter;
      DimensionMgt.GetTempDimSetEntry(TempDimSetEntry);
      Assert.IsTrue(TempDimSetEntry.ISEMPTY,STRSUBSTNO(Text005,TempDimSetEntry.TABLECAPTION));
    END;

    [Test]
    PROCEDURE TestGetTempDimSetEntryEmpty@34();
    VAR
      TempDimSetEntry@1002 : TEMPORARY Record 480;
    BEGIN
      // See if returns 0 records if none were added.
      DimensionMgt.ClearDimSetFilter;
      DimensionMgt.GetTempDimSetEntry(TempDimSetEntry);
      Assert.IsTrue(TempDimSetEntry.ISEMPTY,STRSUBSTNO(Text000,TempDimSetEntry.TABLECAPTION));
    END;

    [Test]
    PROCEDURE TestGetTempDimSetEntryNonExist@33();
    VAR
      Dimension@1001 : Record 348;
      DimensionValue@1002 : Record 349;
      TempDimSetEntry@1003 : TEMPORARY Record 480;
    BEGIN
      // Try to add a nonexisting dimvalue
      DimensionMgt.ClearDimSetFilter;
      DimensionMgt.GetDimSetIDsForFilter(
        COPYSTR(LibraryUtility.GenerateRandomCode(Dimension.FIELDNO(Code),DATABASE::Dimension),1,20),
        LibraryUtility.GenerateRandomCode(DimensionValue.FIELDNO(Code),DATABASE::"Dimension Value"));
      DimensionMgt.GetTempDimSetEntry(TempDimSetEntry);
      Assert.IsTrue(TempDimSetEntry.ISEMPTY,STRSUBSTNO(Text000,TempDimSetEntry.TABLECAPTION));
    END;

    [Test]
    PROCEDURE TestGetTempDimSetEntrySingle@1039();
    VAR
      DimensionValue@1001 : Record 349;
      DimSetEntry@1002 : Record 480;
      TempDimSetEntry@1003 : TEMPORARY Record 480;
      Count@1004 : Integer;
    BEGIN
      // Try to add a single DimSetID
      SetupTestData;
      Count := 1;
      AddDimSetIDsToTemp(DimensionValue,DimSetEntry,TempDimSetEntry,DimCode3,Count);
      Assert.AreEqual(0,TempDimSetEntry.NEXT,STRSUBSTNO(Text001,TempDimSetEntry.TABLECAPTION));
      DimSetEntry.TESTFIELD("Dimension Code",DimCode3);
      DimSetEntry.TESTFIELD("Dimension Value Code",DimensionValue.Code);
      Assert.AreEqual(Count,TempDimSetEntry."Dimension Value ID",Text003);
    END;

    [Test]
    PROCEDURE TestGetTempDimSetEntryDuplicat@35();
    VAR
      DimensionValue@1001 : Record 349;
      DimSetEntry@1002 : Record 480;
      TempDimSetEntry@1003 : TEMPORARY Record 480;
      count@1005 : Integer;
    BEGIN
      // Try to add the same DimSetID multiple times (between 2 and 10)
      SetupTestData;
      count := 1 + LibraryRandom.RandInt(9);
      AddDimSetIDsToTemp(DimensionValue,DimSetEntry,TempDimSetEntry,DimCode3,count);
      Assert.AreEqual(0,TempDimSetEntry.NEXT,STRSUBSTNO(Text001,TempDimSetEntry.TABLECAPTION));
      DimSetEntry.TESTFIELD("Dimension Code",DimCode3);
      DimSetEntry.TESTFIELD("Dimension Value Code",DimensionValue.Code);
      Assert.AreEqual(count,TempDimSetEntry."Dimension Value ID",Text003);
    END;

    [Test]
    PROCEDURE TestGetTempDimSetEntryMultiple@36();
    VAR
      DimensionValue@1010 : Record 349;
      DimSetEntry@1003 : Record 480;
      TempDimSetEntry@1002 : TEMPORARY Record 480;
      DimValueCode1@1006 : Code[20];
      DimValueCode2@1007 : Code[20];
      count1@1000 : Integer;
      count2@1005 : Integer;
    BEGIN
      // Try to add different DimSetID's
      SetupTestData;
      count1 := 1 + LibraryRandom.RandInt(9);
      AddDimSetIDsToTemp(DimensionValue,DimSetEntry,TempDimSetEntry,DimCode3,count1);
      DimValueCode1 := DimensionValue.Code;

      count2 := 1 + LibraryRandom.RandInt(9);
      AddDimSetIDsToTemp(DimensionValue,DimSetEntry,TempDimSetEntry,DimCode4,count2);
      DimValueCode2 := DimensionValue.Code;

      Assert.AreEqual(2,TempDimSetEntry.COUNT,STRSUBSTNO(Text004,TempDimSetEntry.TABLECAPTION));

      TempDimSetEntry.FINDFIRST;
      REPEAT
        LibraryDim.FindDimensionSetEntry(DimSetEntry,TempDimSetEntry."Dimension Set ID");
        CASE DimSetEntry."Dimension Code" OF
          DimCode3:
            BEGIN
              DimSetEntry.TESTFIELD("Dimension Value Code",DimValueCode1);
              Assert.AreEqual(count1,TempDimSetEntry."Dimension Value ID",Text003);
            END;
          DimCode4:
            BEGIN
              DimSetEntry.TESTFIELD("Dimension Value Code",DimValueCode2);
              Assert.AreEqual(count2,TempDimSetEntry."Dimension Value ID",Text003);
            END;
        END;
      UNTIL TempDimSetEntry.NEXT = 0;
    END;

    [Test]
    PROCEDURE TestEmptyFilter@1();
    VAR
      ExpectedDimSetEntry@1001 : Record 480;
      TempActualDimSetEntry@1000 : TEMPORARY Record 480;
      ExpectedLastDimSetID@1003 : Integer;
      ActualFirstDimSetID@1004 : Integer;
      ActualLastDimSetID@1005 : Integer;
    BEGIN
      // Empty filter includes all DimSetIDs in Table
      // Compare first and last DimSetIDs from expected and actualcreated by function
      SetupTestData;
      ExpectedDimSetEntry.FINDLAST;
      ExpectedLastDimSetID := ExpectedDimSetEntry."Dimension Set ID";

      CreateTempActualTable(TempActualDimSetEntry,'','');

      TempActualDimSetEntry.FINDFIRST;
      ActualFirstDimSetID := TempActualDimSetEntry."Dimension Set ID";
      TempActualDimSetEntry.FINDLAST;
      ActualLastDimSetID := TempActualDimSetEntry."Dimension Set ID";

      Assert.AreEqual(0,ActualFirstDimSetID,STRSUBSTNO(Text002,ExpectedDimSetEntry.FIELDCAPTION("Dimension Set ID")));
      Assert.AreEqual(
        ExpectedLastDimSetID,ActualLastDimSetID,STRSUBSTNO(Text002,ExpectedDimSetEntry.FIELDCAPTION("Dimension Set ID")));
    END;

    [Test]
    PROCEDURE TestDimCodeEmptyValueFilter@9();
    VAR
      ExpectedDimSetEntry@1001 : Record 480;
      TempActualDimSetEntry@1000 : TEMPORARY Record 480;
    BEGIN
      SetupTestData;
      CreateExpectedTable(ExpectedDimSetEntry,DimCode1,'');
      CreateTempActualTable(TempActualDimSetEntry,DimCode1,'');
    END;

    [Test]
    PROCEDURE TestDimCodeValueFilter@10();
    VAR
      ExpectedDimSetEntry@1001 : Record 480;
      TempActualDimSetEntry@1000 : TEMPORARY Record 480;
      RandomDimValue@1002 : Code[20];
    BEGIN
      SetupTestData;
      RandomDimValue := GetRandomDimValue(DimCode1);
      CreateExpectedTable(ExpectedDimSetEntry,DimCode1,RandomDimValue);
      CreateTempActualTable(TempActualDimSetEntry,DimCode1,RandomDimValue);
      Assert.AreEqual(ExpectedDimSetEntry.COUNT,TempActualDimSetEntry.COUNT,Text006);
    END;

    [Test]
    PROCEDURE TestDimCodeInvalidValueFilter@23();
    VAR
      ExpectedDimSetEntry@1001 : Record 480;
      TempActualDimSetEntry@1000 : TEMPORARY Record 480;
      DimensionValue@1003 : Record 349;
      InvalidDimValue@1002 : Code[250];
    BEGIN
      SetupTestData;
      InvalidDimValue := LibraryUtility.GenerateRandomCode(DimensionValue.FIELDNO(Code),DATABASE::"Dimension Value");
      CreateExpectedTable(ExpectedDimSetEntry,DimCode1,InvalidDimValue);
      CreateTempActualTable(TempActualDimSetEntry,DimCode1,InvalidDimValue);
      Assert.AreEqual(ExpectedDimSetEntry.COUNT,TempActualDimSetEntry.COUNT,Text006);
    END;

    [Test]
    PROCEDURE TestDimCodeSmallerRangeValueF@13();
    VAR
      TempActualDimSetEntry@1000 : TEMPORARY Record 480;
      RandomDimValue@1002 : Code[20];
    BEGIN
      // Filter '..X' behaves as it has blank filter in string
      // so the result is all DimSetIDs without DimCode1 + smaller values than X for DimCode1
      SetupTestData;
      RandomDimValue := GetRandomDimValue(DimCode1);
      CreateTempActualTable(TempActualDimSetEntry,DimCode1,RandomDimValue);
      Assert.IsFalse(CheckTempActualTable(TempActualDimSetEntry,DimCode1,RandomDimValue + '..'),Text006);
    END;

    [Test]
    PROCEDURE TestDimCodeBiggerRangeValueF@14();
    VAR
      ExpectedDimSetEntry@1001 : Record 480;
      TempActualDimSetEntry@1000 : TEMPORARY Record 480;
      RandomDimValue@1002 : Code[20];
    BEGIN
      SetupTestData;
      RandomDimValue := GetRandomDimValue(DimCode1);
      CreateExpectedTable(ExpectedDimSetEntry,DimCode1,RandomDimValue + '..');
      CreateTempActualTable(TempActualDimSetEntry,DimCode1,RandomDimValue + '..');
      Assert.AreEqual(ExpectedDimSetEntry.COUNT,TempActualDimSetEntry.COUNT,Text006);
    END;

    [Test]
    PROCEDURE TestDimCodeValueOrBlankFilter@15();
    VAR
      TempActualDimSetEntry@1000 : TEMPORARY Record 480;
      RandomDimValue@1002 : Code[20];
    BEGIN
      // Filter 'X|''' behaves as it has blank filter in string
      // so the result is all DimSetIDs without DimCode1 + X for DimCode1
      SetupTestData;
      RandomDimValue := GetRandomDimValue(DimCode1);
      CreateTempActualTable(TempActualDimSetEntry,DimCode1,RandomDimValue + '|''''');
      Assert.IsFalse(CheckTempActualTable(TempActualDimSetEntry,DimCode1,'<>' + RandomDimValue),Text006);
    END;

    [Test]
    PROCEDURE TestDimCodeRangeValueFilter@11();
    VAR
      ExpectedDimSetEntry@1001 : Record 480;
      TempActualDimSetEntry@1000 : TEMPORARY Record 480;
      MultipleDimValueFilter@1002 : Text[250];
    BEGIN
      // A..C
      SetupTestData;
      CreateMultipleDimValueFilter(DimCode1,MultipleDimValueFilter,'..');
      CreateExpectedTable(ExpectedDimSetEntry,DimCode1,MultipleDimValueFilter);
      CreateTempActualTable(TempActualDimSetEntry,DimCode1,MultipleDimValueFilter);
      Assert.AreEqual(ExpectedDimSetEntry.COUNT,TempActualDimSetEntry.COUNT,Text006);
    END;

    [Test]
    PROCEDURE TestDimCodeOrValueFilter@12();
    VAR
      ExpectedDimSetEntry@1001 : Record 480;
      TempActualDimSetEntry@1000 : TEMPORARY Record 480;
      MultipleDimValueFilter@1002 : Text[250];
    BEGIN
      // A|B
      SetupTestData;
      CreateMultipleDimValueFilter(DimCode1,MultipleDimValueFilter,'|');
      CreateExpectedTable(ExpectedDimSetEntry,DimCode1,MultipleDimValueFilter);
      CreateTempActualTable(TempActualDimSetEntry,DimCode1,MultipleDimValueFilter);
      Assert.AreEqual(ExpectedDimSetEntry.COUNT,TempActualDimSetEntry.COUNT,Text006);
    END;

    [Test]
    PROCEDURE TestFilterChunkInvalidDim@20();
    VAR
      TempActualDimSetEntry@1002 : TEMPORARY Record 480;
      DimensionValue@1003 : Record 349;
      DimFilterChunk@1001 : Text[1024];
      InvalidDimValue@1000 : Code[250];
    BEGIN
      // Invalid Dimension value should return an empty string
      SetupTestData;
      InvalidDimValue := LibraryUtility.GenerateRandomCode(DimensionValue.FIELDNO(Code),DATABASE::"Dimension Value");
      CreateTempActualTable(TempActualDimSetEntry,DimCode1,InvalidDimValue);
      DimFilterChunk := DimensionMgt.GetNextDimSetFilterChunk(MAXSTRLEN(DimFilterChunk));
      Assert.AreEqual(0,STRLEN(DimFilterChunk),Text007);
    END;

    [Test]
    PROCEDURE TestFilterChunkOneDimValue@21();
    VAR
      TempActualDimSetEntry@1000 : TEMPORARY Record 480;
      DimFilterChunk@1002 : Text[1024];
    BEGIN
      // FilterChunk with one Dimension Set ID.
      // DimCode4 has one dimension value
      // DimFiterChunk should not have a '|'
      SetupTestData;
      CreateTempActualTable(TempActualDimSetEntry,DimCode4,GetRandomDimValue(DimCode4));
      DimFilterChunk := DimensionMgt.GetNextDimSetFilterChunk(MAXSTRLEN(DimFilterChunk));
      Assert.AreEqual(0,STRPOS(DimFilterChunk,'|'),STRSUBSTNO(Text001,TempActualDimSetEntry.TABLECAPTION));
    END;

    [Test]
    PROCEDURE TestFilterChunkTwoDimValue@25();
    VAR
      TempActualDimSetEntry@1001 : TEMPORARY Record 480;
      DimFilterChunk@1000 : Text[1024];
    BEGIN
      // Filter Chunk with two Dimension Set ID
      // DimFilterChunk should have one '|'
      SetupTestData;
      CreateTempActualTable(TempActualDimSetEntry,DimCode5,GetRandomDimValue(DimCode5));
      DimFilterChunk := DimensionMgt.GetNextDimSetFilterChunk(MAXSTRLEN(DimFilterChunk));
      Assert.AreEqual(0,STRPOS(COPYSTR(DimFilterChunk,STRPOS(DimFilterChunk,'|') + 1),'|'),
        STRSUBSTNO(Text001,TempActualDimSetEntry.TABLECAPTION));
    END;

    [Test]
    PROCEDURE TestFilterChunkMultiDimValue@29();
    VAR
      TempActualDimSetEntry@1000 : TEMPORARY Record 480;
      DimFilterChunk@1002 : Text[1024];
    BEGIN
      // DimCode1 has multiple dimension combinations
      // Compare the values in Temp table with FilterChunk
      SetupTestData;
      CreateTempActualTable(TempActualDimSetEntry,DimCode1,GetRandomDimValue(DimCode1));
      DimFilterChunk := DimensionMgt.GetNextDimSetFilterChunk(MAXSTRLEN(DimFilterChunk));
      WHILE DimFilterChunk <> '' DO BEGIN
        CompareTempTableAndFilterChunk(TempActualDimSetEntry,DimFilterChunk);
        DimFilterChunk := DimensionMgt.GetNextDimSetFilterChunk(MAXSTRLEN(DimFilterChunk));
      END;
      Assert.AreEqual(0,TempActualDimSetEntry.COUNT,STRSUBSTNO(Text000,TempActualDimSetEntry.TABLECAPTION));
    END;

    [Test]
    PROCEDURE TestFilterChunkLengthSmaller@22();
    VAR
      TempActualDimSetEntry@1000 : TEMPORARY Record 480;
      DimFilterChunk@1001 : Text[1024];
    BEGIN
      // Checks if DimFilterChunk overflows or not
      SetupTestData;
      CreateTempActualTable(TempActualDimSetEntry,'','');
      DimFilterChunk := DimensionMgt.GetNextDimSetFilterChunk(MAXSTRLEN(DimFilterChunk));
      Assert.IsTrue(STRLEN(DimFilterChunk) <= MAXSTRLEN(DimFilterChunk),'DimFilterChunk is longer than expected.');
    END;

    [Test]
    PROCEDURE TestFilterChunkLengthSmaller2@30();
    VAR
      TempActualDimSetEntry@1000 : TEMPORARY Record 480;
      DimFilterChunk@1001 : Text[1024];
    BEGIN
      // Checks if DimFilterChunk overflows or not
      SetupTestData;
      CreateTempActualTable(TempActualDimSetEntry,'','');
      DimFilterChunk := DimensionMgt.GetNextDimSetFilterChunk(250);
      Assert.IsTrue(STRLEN(DimFilterChunk) <= 250,'DimFilterChunk is longer than expected.');
    END;

    [Test]
    PROCEDURE TestFilterChunkLengthEqual1024@27();
    VAR
      TempActualDimSetEntry@1003 : TEMPORARY Record 480;
      DimFilterChunk@1000 : Text[1024];
      RecordCounter@1001 : Integer;
      DimSetIDStart@1002 : Integer;
    BEGIN
      // Test DimFilterChunk on boundary value
      // Insert records to temp table which will create filterchunk length 1024
      SetupTestData;
      RecordCounter := 93;
      DimSetIDStart := 1000000000;
      DimensionMgt.GetTempDimSetEntry(TempActualDimSetEntry);
      InsertTempRecord(TempActualDimSetEntry,1);

      WHILE RecordCounter > 0 DO BEGIN
        InsertTempRecord(TempActualDimSetEntry,DimSetIDStart);
        DimSetIDStart += 1;
        RecordCounter -= 1;
      END;

      DimFilterChunk := DimensionMgt.GetNextDimSetFilterChunk(MAXSTRLEN(DimFilterChunk));
      // Second DimFilterChunk is empty
      DimFilterChunk := DimensionMgt.GetNextDimSetFilterChunk(MAXSTRLEN(DimFilterChunk));
      Assert.AreEqual(0,STRLEN(DimFilterChunk),'DimFilterChunk is not blank.');
    END;

    [Test]
    PROCEDURE TestFilterChunkLengthBig1024@28();
    VAR
      TempActualDimSetEntry@1003 : TEMPORARY Record 480;
      DimFilterChunk@1002 : Text[1024];
      RecordCounter@1001 : Integer;
      DimSetIDStart@1000 : Integer;
    BEGIN
      // Test DimFilterChunk on boundary value + 1
      SetupTestData;
      RecordCounter := 94;
      DimSetIDStart := 1000000000;
      DimensionMgt.GetTempDimSetEntry(TempActualDimSetEntry);
      InsertTempRecord(TempActualDimSetEntry,1);

      WHILE RecordCounter > 0 DO BEGIN
        InsertTempRecord(TempActualDimSetEntry,DimSetIDStart);
        DimSetIDStart += 1;
        RecordCounter -= 1;
      END;

      DimFilterChunk := DimensionMgt.GetNextDimSetFilterChunk(MAXSTRLEN(DimFilterChunk));
      // Second DimFilterChunk has one value in filter
      DimFilterChunk := DimensionMgt.GetNextDimSetFilterChunk(MAXSTRLEN(DimFilterChunk));
      Assert.AreNotEqual('',DimFilterChunk,'DimFilter Chunk is blank');
      Assert.AreEqual(0,STRPOS(DimFilterChunk,'|'),'DimFilterChunk has more than one Dimension Set ID');
    END;

    [Test]
    PROCEDURE CheckDimensionCombinationsCaptionName@37();
    VAR
      Dimension@1170000000 : Record 348;
      DimensionCombinations@1000 : TestPage 538;
    BEGIN
      // Test Column Name on Page Dimension Combinations

      // Setup : Create the Dimension Values.
      SetupTestData;

      // Exercise: Open Dimension Combinations Page and set Show Column Name.
      DimensionCombinations.OPENEDIT;
      DimensionCombinations.ShowColumnName.SETVALUE(TRUE);
      DimensionCombinations.MatrixForm.NEXT;
      Dimension.GET(DimensionCombinations.MatrixForm.Code.VALUE);
      // Verify : Verify the Value of Field.
      Assert.AreEqual(
        Dimension.Name,DimensionCombinations.MatrixForm.Field2.CAPTION,
        STRSUBSTNO(WrongCaptionErr,DimensionCombinations.MatrixForm.Name));
    END;

    [Test]
    [HandlerFunctions(MyDimValueCombinationsPageHandler)]
    PROCEDURE CheckMyDimValueCombinationCaptionName@8();
    VAR
      MyDimValueCombinations@1001 : Page 9252;
      FirstDimCode@1002 : Code[20];
      SecondDimCode@1003 : Code[20];
    BEGIN
      // Test Column Name on My DimValue Combinations

      // Setup : Create the Dimension Values.
      FirstDimCode := CreateDimension;
      SecondDimCode := CreateDimension;
      CreateDimensionValues(FirstDimCode,2);
      CreateDimensionValues(SecondDimCode,2);

      // Exercise and Verify : Open Page and verify the Value of Field.
      MyDimValueCombinations.Load(FirstDimCode,SecondDimCode,FALSE);
      MyDimValueCombinations.RUNMODAL;
    END;

    LOCAL PROCEDURE SetupTestData@3();
    BEGIN
      DimensionMgt.ClearDimSetFilter;
      IF TestDataSetUp THEN
        EXIT;

      DimCode1 := CreateDimension;
      DimCode2 := CreateDimension;
      DimCode3 := CreateDimension;
      DimCode4 := CreateDimension;
      DimCode5 := CreateDimension;
      DimCode6 := CreateDimension;
      CreateDimensionValues(DimCode1,26);
      CreateDimensionValues(DimCode2,26);
      CreateDimensionValues(DimCode3,1);
      CreateDimensionValues(DimCode4,1);
      CreateDimensionValues(DimCode5,1);
      CreateDimensionValues(DimCode6,2);
      CreateDimensionSetIDs(DimCode1);
      CreateDimensionSetIDs(DimCode2);
      CreateDimensionSetIDs(DimCode3);
      CreateDimensionSetIDs(DimCode4);
      CreateDimensionSetIDs(DimCode6);
      CreateCombDimensionSetIDs(DimCode1,DimCode2);
      CreateCombDimensionSetIDs(DimCode6,DimCode5);

      TestDataSetUp := TRUE;
    END;

    LOCAL PROCEDURE CreateDimension@4() : Code[20];
    VAR
      Dimension@1000 : Record 348;
    BEGIN
      LibraryDim.CreateDimension(Dimension);
      EXIT(Dimension.Code);
    END;

    LOCAL PROCEDURE CreateDimensionValues@5(DimCode@1001 : Code[20];NumberOfDimValues@1004 : Integer);
    VAR
      DimensionValue@1002 : Record 349;
      i@1003 : Integer;
    BEGIN
      FOR i := 1 TO NumberOfDimValues DO
        LibraryDim.CreateDimensionValue(DimensionValue,DimCode);
    END;

    LOCAL PROCEDURE CreateDimensionSetIDs@6(DimCode@1001 : Code[20]);
    VAR
      DimensionValue@1000 : Record 349;
    BEGIN
      DimensionValue.SETFILTER("Dimension Code",'%1',DimCode);
      IF DimensionValue.FINDSET THEN
        REPEAT
          LibraryDim.CreateDimSet(0,DimensionValue."Dimension Code",DimensionValue.Code)
        UNTIL DimensionValue.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateCombDimensionSetIDs@7(BaseDimCode@1001 : Code[20];AddDimCode@1002 : Code[20]);
    VAR
      DimensionValue@1003 : Record 349;
      DimensionSetEntry@1000 : Record 480;
      LastDimSetID@1004 : Integer;
    BEGIN
      DimensionSetEntry.FINDLAST;
      LastDimSetID := DimensionSetEntry."Dimension Set ID";

      DimensionValue.SETFILTER("Dimension Code",'%1',AddDimCode);
      IF DimensionValue.FINDSET THEN
        REPEAT
          DimensionSetEntry.SETFILTER("Dimension Code",'%1',BaseDimCode);
          DimensionSetEntry.SETRANGE("Dimension Set ID",0,LastDimSetID);
          IF DimensionSetEntry.FINDSET THEN
            REPEAT
              LibraryDim.CreateDimSet(DimensionSetEntry."Dimension Set ID",DimensionValue."Dimension Code",DimensionValue.Code);
            UNTIL DimensionSetEntry.NEXT = 0;
        UNTIL DimensionValue.NEXT = 0;
    END;

    LOCAL PROCEDURE GetRandomDimValue@16(DimCode@1000 : Code[20]) : Text[20];
    VAR
      DimensionValue@1001 : Record 349;
    BEGIN
      LibraryDim.FindDimensionValue(DimensionValue,DimCode);
      DimensionValue.NEXT(LibraryRandom.RandInt(DimensionValue.COUNT));
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreateMultipleDimValueFilter@2(DimCode@1001 : Code[20];VAR MultipleDimValueFilter@1007 : Text[250];FilterChoice@1005 : Text[30]);
    VAR
      DimensionValue@1000 : Record 349;
      DimensionValue2@1006 : Record 349;
      FirstDimValue@1002 : Code[20];
      LastDimValue@1003 : Code[20];
    BEGIN
      LibraryDim.FindDimensionValue(DimensionValue,DimCode);
      DimensionValue2.COPY(DimensionValue);

      DimensionValue.NEXT(LibraryRandom.RandInt(DimensionValue.COUNT));
      FirstDimValue := DimensionValue.Code;
      DimensionValue2.NEXT(LibraryRandom.RandInt(DimensionValue2.COUNT));
      LastDimValue := DimensionValue2.Code;

      IF FirstDimValue < LastDimValue THEN
        MultipleDimValueFilter := FirstDimValue + FilterChoice + LastDimValue
      ELSE
        MultipleDimValueFilter := LastDimValue + FilterChoice + FirstDimValue;
    END;

    LOCAL PROCEDURE AddDimSetIDsToTemp@32(VAR DimensionValue@1001 : Record 349;VAR DimSetEntry@1002 : Record 480;VAR TempDimSetEntry@1003 : TEMPORARY Record 480;DimCode@1004 : Code[20];Count@1005 : Integer);
    VAR
      i@1006 : Integer;
    BEGIN
      LibraryDim.FindDimensionValue(DimensionValue,DimCode);
      FOR i := 1 TO Count DO
        DimensionMgt.GetDimSetIDsForFilter(DimCode,DimensionValue.Code);
      DimensionMgt.GetTempDimSetEntry(TempDimSetEntry);
      LibraryDim.FindDimensionSetEntry(DimSetEntry,TempDimSetEntry."Dimension Set ID");
    END;

    LOCAL PROCEDURE InsertTempRecord@24(VAR TempActualDimSetEntry@1002 : TEMPORARY Record 480;DimSetID@1001 : Integer);
    BEGIN
      TempActualDimSetEntry.INIT;
      TempActualDimSetEntry."Dimension Set ID" := DimSetID;
      TempActualDimSetEntry."Dimension Value ID" := 0;
      IF TempActualDimSetEntry.INSERT THEN;
    END;

    LOCAL PROCEDURE CreateExpectedTable@19(VAR ExpectedDimSetEntry@1000 : Record 480;DimCode@1002 : Code[20];DimValueFilter@1001 : Text[1024]);
    BEGIN
      IF DimCode <> '' THEN
        ExpectedDimSetEntry.SETFILTER("Dimension Code",'%1',DimCode);
      IF DimValueFilter <> '' THEN
        ExpectedDimSetEntry.SETFILTER("Dimension Value Code",DimValueFilter);
    END;

    LOCAL PROCEDURE CheckTempActualTable@26(VAR ExpectedDimSetEntry@1000 : Record 480;DimCode@1002 : Code[20];DimValueFilter@1001 : Text[1024]) : Boolean;
    VAR
      DimSetEntry@1003 : Record 480;
    BEGIN
      IF ExpectedDimSetEntry.FINDSET THEN
        REPEAT
          DimSetEntry.SETRANGE("Dimension Set ID",ExpectedDimSetEntry."Dimension Set ID");
          DimSetEntry.SETRANGE("Dimension Code",DimCode);
          IF NOT DimSetEntry.ISEMPTY THEN
            DimSetEntry.SETRANGE("Dimension Value Code",DimValueFilter);
          IF DimSetEntry.FINDFIRST THEN
            EXIT(TRUE);
        UNTIL ExpectedDimSetEntry.NEXT = 0;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CreateTempActualTable@18(VAR TempActualDimSetEntry@1000 : TEMPORARY Record 480;DimCode@1002 : Code[20];DimValueFilter@1001 : Text[250]);
    BEGIN
      DimensionMgt.ClearDimSetFilter;
      DimensionMgt.GetDimSetIDsForFilter(DimCode,DimValueFilter);
      DimensionMgt.GetTempDimSetEntry(TempActualDimSetEntry);
    END;

    LOCAL PROCEDURE CompareTempTableAndFilterChunk@31(VAR TempActualDimSetEntry@1000 : TEMPORARY Record 480;DimFilterChunk@1001 : Text[1024]);
    VAR
      DimSetID@1002 : Integer;
    BEGIN
      // Get values from string one by one
      // Get record from temp table and delete it
      WHILE STRPOS(DimFilterChunk,'|') <> 0 DO BEGIN
        EVALUATE(DimSetID,COPYSTR(DimFilterChunk,1,STRPOS(DimFilterChunk,'|') - 1));
        IF TempActualDimSetEntry.GET(DimSetID) THEN
          TempActualDimSetEntry.DELETE;
        DimFilterChunk := COPYSTR(DimFilterChunk,STRPOS(DimFilterChunk,'|') + 1);
      END;
      // Delete the last value in string
      EVALUATE(DimSetID,DimFilterChunk);
      IF TempActualDimSetEntry.GET(DimSetID) THEN
        TempActualDimSetEntry.DELETE;
    END;

    [ModalPageHandler]
    PROCEDURE MyDimValueCombinationsPageHandler@38(VAR MyDimValueCombinations@1000 : TestPage 9252);
    BEGIN
      MyDimValueCombinations.ShowColumnName.SETVALUE(TRUE);
      Assert.AreEqual(
        FORMAT(MyDimValueCombinations.MatrixForm.Name),MyDimValueCombinations.MatrixForm.Field1.CAPTION,
        STRSUBSTNO(WrongCaptionErr,MyDimValueCombinations.MatrixForm.Name));
    END;

    BEGIN
    {
      // [FEATURE] [Dimension]
      Check the temp table
        Check empty filter
        Check non exist
        Check blank
        check 1,2,3,4 filters
        filter like a..d
        filter like a|d
        filter all the dimension set ids where abc is blank, (no abc)

      Check on filterchunk <1024 >1024 >2048

      Test Cases for Page.

      1.Test Column Name on Page Dimension Combinations.
      2.Test Column Name on My DimValue Combinations.

      Covers Test Cases for WI - 57770
      ------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                  TFS ID
      ------------------------------------------------------------------------------------------------------------
      CheckDimensionCombinationsCaptionName,
      CheckMyDimValueCombinationCaptionName
    }
    END.
  }
}

