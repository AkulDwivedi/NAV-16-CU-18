OBJECT Codeunit 134976 ERM Sales Report
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryUtility@1003 : Codeunit 131000;
      LibrarySales@1004 : Codeunit 130509;
      LibraryERM@1006 : Codeunit 131300;
      LibraryERMCountryData@1031 : Codeunit 131305;
      LibraryReportDataset@1011 : Codeunit 131007;
      LibraryVariableStorage@1020 : Codeunit 131004;
      LibrarySetupStorage@1017 : Codeunit 131009;
      LibraryInventory@1002 : Codeunit 132201;
      LibraryAssembly@1015 : Codeunit 132207;
      LibraryDimension@1016 : Codeunit 131001;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryReportValidation@1023 : Codeunit 131002;
      Assert@1005 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      ColumnTotalLbl@1008 : TextConst 'ENU=Total';
      SuccessfullyReversedMessageMsg@1019 : TextConst 'ENU=The entries were successfully reversed.';
      UnexpectedMessageMsg@1021 : TextConst 'ENU=Unexpected message.';
      TotalCaptionLbl@1022 : TextConst 'ENU=Total (LCY)';
      DocumentNoLbl@1025 : TextConst 'ENU=Cust_Ledger_Entry_Document_No_';
      DueDateLbl@1026 : TextConst 'ENU=Cust_Ledger_Entry_Posting_Date_';
      RemAmountLbl@1027 : TextConst 'ENU=Cust_Ledger_Entry_Remaining_Amount_';
      RowNotFoundMsg@1028 : TextConst 'ENU=Row does not exist.';
      OverdueEntriesLbl@1007 : TextConst 'ENU=Overdue Entries';
      PhoneNoLbl@1029 : TextConst 'ENU=Customer_Phone_No_';
      RowNotFoundErr@1030 : TextConst '@@@="%1=Field Caption,%2=Field Value;";ENU=There is no dataset row corresponding to Element Name %1 with value %2.';
      VALVATAmountLCYTok@1010 : TextConst 'ENU=VALVATAmountLCY';
      VALVATBaseLCYTok@1009 : TextConst 'ENU=VALVATBaseLCY';
      PostedAsmLineDescCapTxt@1012 : TextConst 'ENU=TempPostedAsmLineDesc';
      PostedAsmLineDescriptionCapTxt@1014 : TextConst 'ENU=PostedAsmLineDescription';
      Type@1013 : 'Invoice,Shipment';
      CustSummAging_PrintLineLbl@1018 : TextConst 'ENU=PrintLine';
      CustSummAging_CurrencyLbl@1024 : TextConst 'ENU=Currency2_Code';
      CustSummAging_TotalBalanceLbl@1032 : TextConst 'ENU=LineTotalCustBalance_Control67';

    [Test]
    [HandlerFunctions(RHCustomerTrialBalanceReport)]
    PROCEDURE CustomerTrialBalanceReport@3();
    VAR
      Customer@1001 : Record 18;
      GenJournalLine@1006 : Record 81;
      DebitAmount@1002 : Decimal;
      CreditAmount@1003 : Decimal;
    BEGIN
      // Setup.
      Initialize;

      // Exercise: Post a payment and an invoice and generate Customer Trail Balance Report.
      DebitAmount := LibraryRandom.RandDec(1000,2);
      CreditAmount := -LibraryRandom.RandDec(1000,2);
      PostJournalLines(GenJournalLine,CreateCustomer,DebitAmount,CreditAmount);
      Customer.SETRANGE("No.",GenJournalLine."Account No.");
      Customer.SETFILTER("Date Filter",'%1..%2',CALCDATE('<-CY>',WORKDATE),CALCDATE('<CY>',WORKDATE));
      REPORT.RUN(REPORT::"Customer - Trial Balance",TRUE,FALSE,Customer);

      // Verify Period Debit and Credit Amounts on Trial Balance Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Customer',GenJournalLine."Account No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'No_Customer',GenJournalLine."Account No."));
      LibraryReportDataset.AssertCurrentRowValue('PeriodDebitAmt',DebitAmount);
      LibraryReportDataset.AssertCurrentRowValue('PeriodCreditAmt',ABS(CreditAmount));
    END;

    [Test]
    [HandlerFunctions(RHCustomerOrderDetail)]
    PROCEDURE OrderDetail@16();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      LineAmount@1002 : Decimal;
    BEGIN
      // Create a Sales Order with Currency for New Customer and Verify data showing in Customer Order Detail Report.

      // Setup.
      Initialize;
      CreateSalesOrder(SalesHeader,SalesLine,CreateCurrency,CreateCustomer);
      LineAmount := ROUND(LibraryERM.ConvertCurrency(SalesLine."Line Amount",SalesHeader."Currency Code",'',WORKDATE));

      // Exercise: Generate the Customer Order Detail Report.
      RunCustomerOrderDetailReport(SalesLine."Sell-to Customer No.",TRUE);

      // Verify: Check that the value of Amount in Customer Order Detail equal to the value of Amount in corresponding Sales Line.
      VerifyLineAmtCustomerOrderDetailReport(SalesLine."No.",LineAmount);
    END;

    [Test]
    [HandlerFunctions(RHCustomerOrderDetail)]
    PROCEDURE OrderDetailInLCY@15();
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Create a Sales Order for New Customer and Verify data showing in Customer Order Detail Report.

      // Setup.
      Initialize;
      CreateSalesOrder(SalesHeader,SalesLine,'',CreateCustomer);

      // Exercise: Generate the Customer Order Detail Report.
      RunCustomerOrderDetailReport(SalesLine."Sell-to Customer No.",FALSE);

      // Run Customer Order Detail and Verify Order value showing in Report.
      VerifyLineAmtCustomerOrderDetailReport(SalesLine."No.",SalesLine."Line Amount");
    END;

    [Test]
    [HandlerFunctions(RHCustomerOrderSummary)]
    PROCEDURE OrderSummary@2();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Create a Sales Order for New Customer and Verify value of Balance in Order Summary is equal to the value of Amount
      // in corresponding Sales Line.

      // Setup.
      Initialize;
      CreateSalesOrder(SalesHeader,SalesLine,'',CreateCustomer);

      // Exercise: Generate the Customer Order Summary Report.
      RunCustOrderSummaryReport(SalesLine."Sell-to Customer No.",TRUE);

      // Verify: Check that the value of Balance in Order Summary is equal to the value of Amount in corresponding Sales Line.
      VerifyCustOrderSummary(SalesLine);
    END;

    [Test]
    [HandlerFunctions(RHCustomerOrderSummary)]
    PROCEDURE OrderSummaryLCY@6();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      // Create a Sales Order using Currency for New Customer and Verify value of Balance in Order Summary is equal to the value of Amount
      // in corresponding Sales Line.

      // Setup.
      Initialize;
      CreateSalesOrder(SalesHeader,SalesLine,CreateCurrency,CreateCustomer);

      // Exercise: Generate the Customer Order Summary Report.
      RunCustOrderSummaryReport(SalesLine."Sell-to Customer No.",FALSE);

      // Verify: Check that the value of Balance in Order Summary is equal to the value of Amount in corresponding Sales Line.
      VerifyCustOrderSummary(SalesLine);
    END;

    [Test]
    [HandlerFunctions(CustomerSummaryAgingSimpRequestPageHandler)]
    PROCEDURE SummaryAgingSimp@9();
    VAR
      GenJournalLine@1002 : Record 81;
      Customer@1001 : Record 18;
      InvoiceAmount@1006 : Decimal;
      NoOfDays@1007 : Integer;
    BEGIN
      // Setup: Create Customer, Make and Post Invoice Entry from General Journal Line.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      NoOfDays := 30 * LibraryRandom.RandInt(4);
      InvoiceAmount := LibraryRandom.RandDec(1000,2);
      CreatePostGeneralJournalLine(GenJournalLine,GenJournalLine."Document Type"::Invoice,Customer."No.",'',InvoiceAmount,WORKDATE);
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,Customer."No.",'',InvoiceAmount,
        CALCDATE('<' + FORMAT(-NoOfDays) + 'D>',WORKDATE));

      // Exercise: Generate Customer Summary Aging Simp Report as Output file and save as XML.
      LibraryVariableStorage.Enqueue(WORKDATE);
      LibraryVariableStorage.Enqueue(Customer."No.");
      REPORT.RUN(REPORT::"Customer - Summary Aging Simp.");

      // Verify: Verify Customer Summary Aging Simp Values.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Customer__No__',Customer."No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'No_Customer',Customer."No."));
      LibraryReportDataset.AssertCurrentRowValue('CustBalanceDueLCY_5__Control25',InvoiceAmount);
      LibraryReportDataset.AssertCurrentRowValue('CustBalanceDueLCY_5__Control37',InvoiceAmount);
    END;

    [Test]
    [HandlerFunctions(CustomerTopTenListRequestPageHandler)]
    PROCEDURE TopTenListSalesLCY@11();
    VAR
      GenJournalLine@1000 : Record 81;
      Customer@1002 : Record 18;
      ShowType@1001 : 'Sales (LCY),Balance (LCY)';
      SalesLCY@1004 : Decimal;
    BEGIN
      // Setup: Create Customer, Make and Post Invoice Entry from General Journal Line.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      SalesLCY := GetCustomerSalesLCY + LibraryRandom.RandDec(100,2);
      CreatePostGeneralJournalLine(GenJournalLine,GenJournalLine."Document Type"::Invoice,Customer."No.",'',SalesLCY,WORKDATE);

      // Exercise: Generate Customer Summary Aging Simp Report as Output file and save as XML.
      LibraryVariableStorage.Enqueue(ShowType::"Sales (LCY)");
      LibraryVariableStorage.Enqueue(Customer."No.");
      REPORT.RUN(REPORT::"Customer - Top 10 List");

      // Verify: Verify Customer Top 10 List Report for Sales LCY.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Customer',Customer."No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'No_Customer',Customer."No."));
      LibraryReportDataset.AssertCurrentRowValue('SalesLCY_Customer',SalesLCY);
    END;

    [Test]
    [HandlerFunctions(CustomerTopTenListRequestPageHandler)]
    PROCEDURE TopTenListBalanceLCY@1();
    VAR
      GenJournalLine@1000 : Record 81;
      Customer@1006 : Record 18;
      ShowType@1004 : 'Sales (LCY),Balance (LCY)';
      BalanceLCY@1001 : Decimal;
    BEGIN
      // Setup: Create Customer, Make and Post Invoice Entry from General Journal Line.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      BalanceLCY := GetCustomerBalanceLCY + LibraryRandom.RandDec(100,2);
      CreatePostGeneralJournalLine(GenJournalLine,GenJournalLine."Document Type"::Invoice,Customer."No.",'',BalanceLCY,WORKDATE);

      // Exercise: Generate Customer Summary Aging Simp Report as Output file and save as XML.
      LibraryVariableStorage.Enqueue(ShowType::"Balance (LCY)");
      LibraryVariableStorage.Enqueue(Customer."No.");
      REPORT.RUN(REPORT::"Customer - Top 10 List");

      // Verify: Verify Customer Top 10 List Report for Balance LCY.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Customer',Customer."No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'No_Customer',Customer."No."));
      LibraryReportDataset.AssertCurrentRowValue('BalanceLCY_Customer',BalanceLCY);
    END;

    [Test]
    [HandlerFunctions(CustomerListRequestPageHandler)]
    PROCEDURE CustomerList@30();
    VAR
      Customer@1005 : Record 18;
    BEGIN
      // Check value of Credit Limit LCY in Customer List matches the value of Credit Limit LCY in corresponding Customer.

      // Setup: Create a Customer with Credit Limit LCY field.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Credit Limit (LCY)",LibraryRandom.RandInt(10));
      Customer.MODIFY(TRUE);

      // Exercise: Generate the Customer-List report.
      LibraryVariableStorage.Enqueue(Customer."No.");
      COMMIT;
      REPORT.RUN(REPORT::"Customer - List");

      // Verify: Check that the value of Credit Limit LCY in Customer List is equal to the value of Credit Limit LCY in
      // corresponding Customer.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Customer__No__',Customer."No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'No_Customer',Customer."No."));
      LibraryReportDataset.AssertCurrentRowValue('Customer__Credit_Limit__LCY__',Customer."Credit Limit (LCY)");
    END;

    [Test]
    [HandlerFunctions(CustomerRegisterRequestPageHandler)]
    PROCEDURE CustomerRegister@29();
    VAR
      GenJournalLine@1009 : Record 81;
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      // Check value of Original Amount in Customer Register matches the value of Amount in corresponding General Journal Line without
      // Currency.

      // Setup: Create a Customer and Post General Journal Line with Invoice.
      Initialize;
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,CreateCustomer,'',LibraryRandom.RandDec(100,2),WORKDATE);

      // Excercise: Generate the Customer Register report and Verify Data on it without LCY Amount.
      CustLedgerEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      CustLedgerEntry.FINDLAST;
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(CustLedgerEntry."Entry No.");
      RunAndVerifyCustomerRegister(GenJournalLine."Document No.",GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(CustomerRegisterRequestPageHandler)]
    PROCEDURE CustomerRegisterWithLCY@28();
    VAR
      Currency@1001 : Record 4;
      GenJournalLine@1009 : Record 81;
      CustLedgerEntry@1000 : Record 21;
      OriginalAmountLCY@1004 : Decimal;
    BEGIN
      // Check value of Original Amount in Customer Register matches the value of Amount in corresponding General Journal Line with
      // Currency.

      // Setup: Create a Customer and Post General Journal Line with Invoice.
      Initialize;
      LibraryERM.FindCurrency(Currency);
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,CreateCustomer,Currency.Code,LibraryRandom.RandDec(100,2),
        WORKDATE);
      OriginalAmountLCY :=
        ROUND(LibraryERM.ConvertCurrency(GenJournalLine.Amount,GenJournalLine."Currency Code",'',GenJournalLine."Posting Date"));

      // Excercise: Generate the Customer Register report and Verify Data on it with LCY Amount.
      CustLedgerEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      CustLedgerEntry.FINDLAST;
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(CustLedgerEntry."Entry No.");
      RunAndVerifyCustomerRegister(GenJournalLine."Document No.",OriginalAmountLCY);
    END;

    [Test]
    [HandlerFunctions(CustomerDetailTrialBalanceRequestPageHandler)]
    PROCEDURE CustomerDetailTrialBalance@26();
    VAR
      GenJournalLine@1009 : Record 81;
    BEGIN
      // Check value of Amount in Customer Detail Trial Balance matches the value of Amount in corresponding General Journal Line
      // without Currency.

      // Setup: Create a Customer and Post General Journal Line with Invoice.
      Initialize;
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,CreateCustomer,'',LibraryRandom.RandDec(100,2),WORKDATE);

      // Exercise: Generate the Customer Detail Trial Balance Report.
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(GenJournalLine."Account No.");
      RunAndVerifyCustomerTrialBal(GenJournalLine,GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(CustomerDetailTrialBalanceRequestPageHandler)]
    PROCEDURE CustomerDetailTrialBalanceLCY@25();
    VAR
      Currency@1000 : Record 4;
      GenJournalLine@1009 : Record 81;
      AmountLCY@1001 : Decimal;
    BEGIN
      // Check value of Amount in Customer Detail Trial Balance matches the value of Amount in corresponding General Journal Line
      // With Currency.

      // Setup: Create a Customer and Post General Journal Line with Invoice.
      Initialize;
      LibraryERM.FindCurrency(Currency);
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,CreateCustomer,Currency.Code,LibraryRandom.RandDec(100,2),
        WORKDATE);
      AmountLCY :=
        ROUND(LibraryERM.ConvertCurrency(GenJournalLine.Amount,GenJournalLine."Currency Code",'',GenJournalLine."Posting Date"));

      // Exercise: Generate the Customer Detail Trial Balance Report.
      LibraryVariableStorage.Enqueue(TRUE);
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(FALSE);
      LibraryVariableStorage.Enqueue(GenJournalLine."Account No.");
      RunAndVerifyCustomerTrialBal(GenJournalLine,AmountLCY);
    END;

    [Test]
    [HandlerFunctions(CustomerSummaryAgingRequestPageHandler)]
    PROCEDURE CustomerSummaryAging@24();
    VAR
      GenJournalLine@1009 : Record 81;
    BEGIN
      // Check value of Balance in Customer Summary Aging matches the value of Amount in corresponding General Journal Line
      // without Currency.

      // Setup: Create a Customer and Post General Journal Line with Invoice.
      Initialize;
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,CreateCustomer,'',LibraryRandom.RandDec(100,2),WORKDATE);

      // Generate the Customer Summary Aging Report and Verify without LCY Amount.
      RunAndVerifyCustSummaryAging(GenJournalLine."Account No.",FALSE,GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(CustomerSummaryAgingRequestPageHandler)]
    PROCEDURE CustomerSummaryAgingWithLCY@23();
    VAR
      Currency@1000 : Record 4;
      GenJournalLine@1009 : Record 81;
      AmountLCY@1001 : Decimal;
    BEGIN
      // Check value of Balance in Customer Summary Aging matches the value of Amount in corresponding General Journal Line
      // with Currency.

      // Setup: Create a Customer and Post General Journal Line with Invoice.
      Initialize;
      LibraryERM.FindCurrency(Currency);
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,CreateCustomer,Currency.Code,LibraryRandom.RandDec(100,2),
        WORKDATE);
      AmountLCY :=
        ROUND(LibraryERM.ConvertCurrency(GenJournalLine.Amount,GenJournalLine."Currency Code",'',GenJournalLine."Posting Date"));

      // Generate the Customer Summary Aging Report and Verify with LCY Amount.
      RunAndVerifyCustSummaryAging(GenJournalLine."Account No.",TRUE,AmountLCY);
    END;

    [Test]
    [HandlerFunctions(CustomerDetailedAgingRequestPageHandler)]
    PROCEDURE CustomerDetailedAging@22();
    VAR
      GenJournalLine@1009 : Record 81;
      Customer@1005 : Record 18;
      PaymentTerms@1000 : Record 3;
    BEGIN
      // Check value of Remaining Amount in Customer Detailed Aging matches the value of Amount in corresponding General Journal Line.

      // Setup: Create a Customer and Post General Journal Line with Invoice.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      PaymentTerms.GET(Customer."Payment Terms Code");  // Added fix to make test world ready.
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,CreateCustomer,'',LibraryRandom.RandDec(100,2),WORKDATE);

      // Exercise: Generate the Customer Detailed Aging Report.
      RunCustomerDetailedAging(GenJournalLine);

      // Verify: Check that the value of Remaining Amount in Customer Detailed Aging is equal to the value of Amount in
      // corresponding General Journal Line.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Cust_Ledger_Entry_Posting_Date_',FORMAT(GenJournalLine."Posting Date"));
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Cust_Ledger_Entry_Posting_Date_',FORMAT(GenJournalLine."Posting Date")));
      LibraryReportDataset.AssertCurrentRowValue('Cust_Ledger_Entry_Remaining_Amount_',GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(CustomerItemSalesRequestPageHandler)]
    PROCEDURE CustomerItemSales@37();
    VAR
      SalesHeader@1003 : Record 36;
      SalesInvoiceLine@1007 : Record 113;
      SalesLine@1004 : Record 37;
      PostedDocumentNo@1002 : Code[20];
    BEGIN
      // Check that correct Amount is available on Customer Item Sales Report after posting Sales Order.

      // Setup.
      Initialize;
      PostedDocumentNo := CreateAndPostSalesOrder(SalesHeader,SalesLine);

      // Exercise: Save the Report in XML Format and fetch the Value of Amount Field for Verification.
      LibraryVariableStorage.Enqueue(SalesHeader."Sell-to Customer No.");
      REPORT.RUN(REPORT::"Customer/Item Sales");
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('ValueEntryBuffer__Item_No__',SalesLine."No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'ValueEntryBuffer__Item_No__',SalesLine."No."));
      LibraryReportDataset.AssertCurrentRowValue(
        'ValueEntryBuffer__Sales_Amount__Actual___Control44',SalesLine.Amount);

      // Verify: Verify that correct Amount is available on Posted Sales Invoice Line.
      SalesInvoiceLine.SETRANGE("Document No.",PostedDocumentNo);
      SalesInvoiceLine.SETRANGE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      SalesInvoiceLine.FINDFIRST;
      SalesInvoiceLine.TESTFIELD("Line Amount",SalesLine.Amount);
    END;

    [Test]
    [HandlerFunctions(CustomerSalesListRequestPageHandler)]
    PROCEDURE CustomerSalesListWithAmount@36();
    VAR
      SalesHeader@1003 : Record 36;
      SalesInvoiceHeader@1007 : Record 112;
      SalesLine@1000 : Record 37;
      PostedDocumentNo@1002 : Code[20];
    BEGIN
      // Check that correct Amount is Available on Customer Sales List Report after posting Sales Order.

      // Create and Post Sales Order, Save Customer Sales List Report in XML with Hide Address TRUE.
      Initialize;
      PostedDocumentNo := CreateAndPostSalesOrder(SalesHeader,SalesLine);

      // Exercise.
      LibraryVariableStorage.Enqueue(SalesHeader."Sell-to Customer No.");
      REPORT.RUN(REPORT::"Customer - Sales List");

      // Verify: Verify that Amount Fetched from the Report is matching with Posted Sales Invoice Amount.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Customer__No__',SalesHeader."Sell-to Customer No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Customer__No__',SalesHeader."Sell-to Customer No."));

      SalesInvoiceHeader.GET(PostedDocumentNo);
      SalesInvoiceHeader.CALCFIELDS(Amount);
      LibraryReportDataset.AssertCurrentRowValue('AmtSalesLCY',SalesInvoiceHeader.Amount);
    END;

    [Test]
    [HandlerFunctions(CustomerSalesListRequestPageHandler)]
    PROCEDURE CustomerSalesListWithAddress@35();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1000 : Record 37;
      SalesInvoiceHeader@1007 : Record 112;
      PostedDocumentNo@1002 : Code[20];
    BEGIN
      // Check that correct Address is Available on Customer Sales List Report after posting Sales Order.

      // Create and Post Sales Order, Save Customer Sales List Report in XML with Hide Address FALSE.
      Initialize;
      PostedDocumentNo := CreateAndPostSalesOrder(SalesHeader,SalesLine);

      // Verify: Verify that Address fetched from Report is matching with Address on Posted Sales Invoice.
      LibraryVariableStorage.Enqueue(SalesHeader."Sell-to Customer No.");
      REPORT.RUN(REPORT::"Customer - Sales List");
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Customer_Name',SalesHeader."Sell-to Customer No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Customer_Name',SalesHeader."Sell-to Customer No."));

      // Verify: Verify that Amount Fetched from the Report is matching with Posted Sales Invoice Amount.
      SalesInvoiceHeader.GET(PostedDocumentNo);
      LibraryReportDataset.AssertCurrentRowValue('CustAddr_2_',SalesInvoiceHeader."Sell-to Address");
    END;

    [Test]
    [HandlerFunctions(CustomerDocumentNosRequestPageHandler)]
    PROCEDURE CustomerDocumentNos@34();
    VAR
      CustLedgerEntry@1006 : Record 21;
      SalesHeader@1003 : Record 36;
      SalesInvoiceHeader@1007 : Record 112;
      SalesLine@1004 : Record 37;
      PostedDocumentNo@1002 : Code[20];
    BEGIN
      // Check that Customer Document Nos. Report contains correct Customer after Posting Sales Order.

      // Setup:
      Initialize;
      PostedDocumentNo := CreateAndPostSalesOrder(SalesHeader,SalesLine);

      // Exercise: Save the Report in XML and fetch the value of Customer No. Field for further use.
      CustLedgerEntry.SETRANGE("Document No.",PostedDocumentNo);
      CustLedgerEntry.FINDLAST;
      LibraryVariableStorage.Enqueue(CustLedgerEntry."Customer No.");
      REPORT.RUN(REPORT::"Customer Document Nos.");
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('CustLedgerEntry__Document_No__',PostedDocumentNo);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'CustLedgerEntry__Document_No__',PostedDocumentNo));

      // Verify: Verify that Customer No. fetched from Report is matching with Posted Sales Invoice's Customer.
      SalesInvoiceHeader.GET(PostedDocumentNo);
      LibraryReportDataset.AssertCurrentRowValue('CustLedgerEntry__Customer_No__',SalesInvoiceHeader."Sell-to Customer No.");
    END;

    [Test]
    [HandlerFunctions(StatementReportRequestPageHandler)]
    PROCEDURE OverdueEntriesStatementReport@41();
    VAR
      GenJournalLine@1000 : Record 81;
      Amount@1010 : Decimal;
      PeriodLength@1001 : DateFormula;
    BEGIN
      // Verify Overdue Entries in Statement Report when Print Overdue Entries option is True.

      // Setup: Create and post General Journal Line, apply partial Payment over the Invoice with Random Values.
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);
      PostJournalLines(GenJournalLine,CreateCustomer,Amount,-Amount / 2);
      EVALUATE(PeriodLength,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>');

      // Exercise: Save Statement Report for the Customer Created.
      SaveStatementReport(GenJournalLine."Account No.",WORKDATE,TRUE,FALSE,FALSE,FALSE,PeriodLength);

      // Verify Remaining Amount in Statement Report in Overdue Entries.
      LibraryReportDataset.LoadDataSetFile;
      VerifyOverDueEntry(GenJournalLine."Posting Date",Amount / 2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,StatementReportRequestPageHandler)]
    PROCEDURE ReversedEntriesStatementReport@55();
    VAR
      GenJournalLine@1000 : Record 81;
      Amount@1010 : Decimal;
      PeriodLength@1001 : DateFormula;
    BEGIN
      // Verify Reversed Entries in Statement Report When Print Reversed Entries option is True.

      // Setup: Create and post General Journal Line with Random Values and Reverse the Entry.
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);
      CreatePostGeneralJournalLine(GenJournalLine,GenJournalLine."Document Type"::Invoice,CreateCustomer,'',Amount,GetPostingDate);
      ReverseTransaction(FindGLEntry(GenJournalLine."Document No."));
      EVALUATE(PeriodLength,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>');

      // Exercise: Save Statement Report for the Customer Created.
      SaveStatementReport(GenJournalLine."Account No.",GenJournalLine."Posting Date",FALSE,TRUE,FALSE,FALSE,PeriodLength);

      // Verify: Verify Amount in Statement Report after Entries has been Reversed.
      LibraryReportDataset.LoadDataSetFile;
      VerifyAmountInMultipleRows(GenJournalLine."Document No.",Amount);
    END;

    [Test]
    [HandlerFunctions(StatementReportRequestPageHandler)]
    PROCEDURE UnappliedEntryStatementReport@104();
    VAR
      GenJournalLine@1000 : Record 81;
      Amount@1010 : Decimal;
      PeriodLength@1001 : DateFormula;
    BEGIN
      // Verify Unapplied Entries in Statement Report when Print Unapplied Entries option is True.

      // Setup: Create and post General Journal Line,apply and Unapply Invoice and Payment with Random Values.
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);
      PostJournalLines(GenJournalLine,CreateCustomer,Amount,-Amount);
      UnapplyCustLedgerEntry(GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.");
      EVALUATE(PeriodLength,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>');

      // Exercise: Save Statement Report for the Customer Created.
      SaveStatementReport(GenJournalLine."Account No.",WORKDATE,FALSE,FALSE,TRUE,FALSE,PeriodLength);

      // Verify: Verify Remaining Amount in Statement Report after Entries has been Unapplied.
      LibraryReportDataset.LoadDataSetFile;
      VerifyAmountInMultipleRows(GenJournalLine."Document No.",Amount);
    END;

    [Test]
    [HandlerFunctions(StatementReportRequestPageHandler)]
    PROCEDURE PrintAgingBandStatementReport@63();
    VAR
      GenJournalLine@1000 : Record 81;
      Amount@1010 : Decimal;
      PeriodLength@1001 : DateFormula;
      PostingDate@1002 : Date;
    BEGIN
      // Verify Statement Report when Include Aging Band option is True.

      // Setup: Create and post General Journal Line with Random Value.
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);
      EVALUATE(PeriodLength,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>');
      PostingDate := CALCDATE(PeriodLength,WORKDATE);
      CreatePostGeneralJournalLine(GenJournalLine,GenJournalLine."Document Type"::Invoice,CreateCustomer,'',Amount,PostingDate);

      // Exercise: Save Statement Report for the Customer Created.
      SaveStatementReport(GenJournalLine."Account No.",WORKDATE,FALSE,FALSE,FALSE,TRUE,PeriodLength);

      // Verify Remaining Amount in Statement Report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyRemainAmtInCustLedgEntry(PostingDate,Amount);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,StatementReportRequestPageHandler)]
    PROCEDURE CustomerStatementReport@61();
    VAR
      GenJournalLine@1000 : Record 81;
      Amount@1010 : Decimal;
      PeriodLength@1013 : DateFormula;
      PostingDate@1002 : Date;
    BEGIN
      // Verify Statement Report when Print Overdue Entries, Print Reversed Entries, Print Unapplied Entries and Include Aging Band
      // Option are all set to True.

      // Setup: Create and post General Journal Line, Reverse the Entry, Unapply Payment Over the Invoice with Random Values.
      Initialize;
      Amount := LibraryRandom.RandDec(100,2);
      EVALUATE(PeriodLength,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>');
      PostingDate := CALCDATE(PeriodLength,WORKDATE);
      CreatePostGeneralJournalLine(GenJournalLine,GenJournalLine."Document Type"::Invoice,CreateCustomer,'',Amount,PostingDate);
      ReverseTransaction(FindGLEntry(GenJournalLine."Document No."));
      PostJournalLines(GenJournalLine,GenJournalLine."Account No.",Amount,-Amount);
      UnapplyCustLedgerEntry(GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.");

      // Exercise: Save Statement Report for the Customer Created.
      SaveStatementReport(GenJournalLine."Account No.",WORKDATE,TRUE,TRUE,TRUE,TRUE,PeriodLength);

      // Verify: Verify Amount in Statement Report in Overdue Entries and Amount after Unapplied Entries.
      LibraryReportDataset.LoadDataSetFile;
      VerifyOverDueEntry(GenJournalLine."Posting Date",-Amount);
    END;

    [Test]
    [HandlerFunctions(RHOrderConfirmation)]
    PROCEDURE OrderConfirmationReportWithPostingDateBlankOnSalesOrder@57();
    VAR
      CustInvoiceDisc@1002 : Record 19;
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      SalesReceivablesSetup@1000 : Record 311;
      OrderConfirmation@1009 : Report 205;
      DefaultPostingDate@1010 : Option;
    BEGIN
      // Check Saved Sales Order Report to Verify that program generates report.

      // Setup: Setup Sales and Receivables Setup, Calculate Invoice Discount and Create Sales Order.
      Initialize;
      UpdateSalesReceivablesSetup(DefaultPostingDate,SalesReceivablesSetup."Default Posting Date"::"No Date");
      SetupInvoiceDiscount(CustInvoiceDisc);

      // Create Sales Order and Calculate Invoice Discount.
      CreateSalesOrder(SalesHeader,SalesLine,CreateCurrency,CustInvoiceDisc.Code);
      ModifyUnitPriceInSalesLine(SalesLine,CustInvoiceDisc."Minimum Amount");
      CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",SalesLine);

      // Exercise: Generate Report as external file for Sales Order.
      CLEAR(OrderConfirmation);
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      OrderConfirmation.SETTABLEVIEW(SalesHeader);
      COMMIT;
      OrderConfirmation.RUN;

      // Verify: Verify that Saved files have some data.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('No_SalesHeader',SalesHeader."No.");

      // Tear Down: Cleanup of Setup Done.
      UpdateSalesReceivablesSetup(DefaultPostingDate,DefaultPostingDate);
    END;

    [Test]
    [HandlerFunctions(CustomerSummaryAgingRequestPageHandler)]
    PROCEDURE CustomerSummaryAgingWithShowAmountInLCYTrue@66();
    BEGIN
      // Check the Value of Total(LCY) in Customer Summary Aging Report when Show Amounts In LCY is TRUE.
      CustomerSummaryAgingReport(TRUE);
    END;

    [Test]
    [HandlerFunctions(CustomerSummaryAgingRequestPageHandler)]
    PROCEDURE CustomerSummaryAgingWithShowAmountInLCYFalse@65();
    BEGIN
      // Check the Value of Total(LCY) in Customer Summary Aging Report when Show Amounts In LCY is FALSE.
      CustomerSummaryAgingReport(FALSE);
    END;

    LOCAL PROCEDURE CustomerSummaryAgingReport@64(ShowAmountsInLCY@1001 : Boolean);
    VAR
      Customer@1000 : Record 18;
      Amount@1002 : Decimal;
    BEGIN
      // Setup: Create a Customer and Post General Journal Lines without Currency and with Currency.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      Amount := LibraryRandom.RandDec(1000,2);
      CreateAndPostInvoice(Customer."No.",'',Amount);
      CreateAndPostInvoice(Customer."No.",CreateCurrency,Amount);

      // Exercise: Run the Customer Summary Aging Report.
      RunCustomerSummaryAgingReport(Customer."No.",ShowAmountsInLCY);

      // Verify: Check that the value of Total(LCY) in Customer Summary Aging Report is equal to Customer."Balance (LCY)".
      LibraryReportDataset.LoadDataSetFile;
      VerifyTotalLCYOnCustomerSummaryAgingReport(Customer);
    END;

    [Test]
    [HandlerFunctions(RHCustomerOrderSummary)]
    PROCEDURE CustomerOrderSummaryWithoutCurrencyFilter@46();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      Customer@1000 : Record 18;
    BEGIN
      // Check the Value of Total(LCY) in Customer Order Report when Show Amount LCY is FALSE and Currency Filter is blank.

      // Setup: Create Customer with currency and then create a sales order.
      Initialize;
      CreateCustomerWithCurrencyCode(Customer);
      CreateSalesOrder(SalesHeader,SalesLine,Customer."Currency Code",Customer."No.");

      // Exercise: Run Customer Order Summary Report with currency filter blank and Show Amount LCY is FALSE.
      LibraryVariableStorage.Enqueue(WORKDATE);
      LibraryVariableStorage.Enqueue(FALSE);
      RunCustomerOrderSummaryReport(Customer);

      // Verify: Verify that Totoal (LCY) shows the correct value in local currency and check that currency code does not exist in the report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyTotalLCYOnCustomerOrderSummary(SalesLine."Line Amount" / SalesHeader."Currency Factor");
      ASSERTERROR LibraryReportDataset.AssertElementWithValueExists('',SalesHeader."Currency Code");
    END;

    [Test]
    [HandlerFunctions(RHCustomerOrderSummary)]
    PROCEDURE CustomerOrderSummaryWithCurrencyFilter@44();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      Customer@1000 : Record 18;
    BEGIN
      // Check the Value of Total(LCY) in Customer Order Report when Show Amount LCY is FALSE and Currency Filter is not blank.

      // Setup: Create Customer with currency and then create a sales order.
      Initialize;
      CreateCustomerWithCurrencyCode(Customer);
      CreateSalesOrder(SalesHeader,SalesLine,Customer."Currency Code",Customer."No.");

      // Exercise: Run Customer Order Summary Report with currency filter not blank and Show Amount LCY is FALSE.
      LibraryVariableStorage.Enqueue(WORKDATE);
      LibraryVariableStorage.Enqueue(FALSE);
      Customer.SETRANGE("Currency Filter",SalesHeader."Currency Code");
      RunCustomerOrderSummaryReport(Customer);

      // Verify: Verify that Totoal (LCY) shows the correct value in local currency and check that Currency Code is showing in the report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyTotalLCYOnCustomerOrderSummary(SalesLine."Line Amount" / SalesHeader."Currency Factor");
      LibraryReportDataset.Reset;
      LibraryReportDataset.AssertElementWithValueExists('SalesLineCurrencyFilter',SalesHeader."Currency Code");
    END;

    [Test]
    [HandlerFunctions(CustomerDetailedAgingRequestPageHandler)]
    PROCEDURE CustomerDetailedAgingReportForSorting@47();
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1009 : Record 81;
      GenJournalLinePayment@1004 : Record 81;
    BEGIN
      // Verify that the entries are sorted according to Due Date in Customer Detailed Aging.

      // Setup: Create a Customer and Post General Journal Lines with Random and different Amounts.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,Customer."No.",'',LibraryRandom.RandDec(100,2),WORKDATE);
      CreatePostGeneralJournalLine(
        GenJournalLinePayment,GenJournalLinePayment."Document Type"::Payment,GenJournalLine."Account No.",'',
        2 * -LibraryRandom.RandDec(100,2),CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));

      // Exercise: Run Customer Detailed Aging Report.
      RunCustomerDetailedAging(GenJournalLinePayment);

      // Verify: Check that the entries are sorted according to Due Date in Customer Detailed Aging.
      LibraryReportDataset.LoadDataSetFile;
      VerifyCustomerDetailedAging(GenJournalLine."Document No.",GenJournalLine."Due Date");
      VerifyCustomerDetailedAging(GenJournalLinePayment."Document No.",GenJournalLinePayment."Due Date");
    END;

    [Test]
    [HandlerFunctions(CustomerDetailedAgingRequestPageHandler)]
    PROCEDURE CustomerDetailedAgingReportForDuplicateRow@73();
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1009 : Record 81;
      GenJournalLinePayment@1004 : Record 81;
    BEGIN
      // Verify that the first line in detailed entries displays only once.

      // Setup: Create a Customer and Post General Journal Lines with Random and different Amounts. Run Customer Detailed Aging Report.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,Customer."No.",'',LibraryRandom.RandDec(100,2),WORKDATE);
      CreatePostGeneralJournalLine(
        GenJournalLinePayment,GenJournalLinePayment."Document Type"::Payment,GenJournalLine."Account No.",'',
        2 * -LibraryRandom.RandDec(100,2),CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      RunCustomerDetailedAging(GenJournalLinePayment);
      LibraryReportDataset.SetRange(DocumentNoLbl,'');
      LibraryReportDataset.GetNextRow;

      // Exercise.
      ASSERTERROR LibraryReportDataset.AssertCurrentRowValue(RemAmountLbl,GenJournalLine.Amount);

      // Verify: Check that the first line in detailed entries displays only once.
      Assert.ExpectedError(RowNotFoundMsg);
    END;

    [Test]
    [HandlerFunctions(CustomerDetailedAgingRequestPageHandler)]
    PROCEDURE CustInfoInCustomerDetailedAgingReport@88();
    VAR
      Customer@1000 : Record 18;
      GenJournalLine@1009 : Record 81;
    BEGIN
      // Verify that the Phone No. displayed correctly in Customer Detailed Aging Report.

      // Setup: Create a Customer and Post General Journal Line with Random Amount.
      Initialize;
      Customer.GET(CreateCustomer);
      CreatePostGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,Customer."No.",'',LibraryRandom.RandDec(100,2),WORKDATE);

      // Exercise: Run Customer Detailed Aging Report.
      RunCustomerDetailedAging(GenJournalLine);

      // Verify: Verify that the Phone No. displayed correctly in Customer Detailed Aging.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists(PhoneNoLbl,Customer."Phone No.");
    END;

    [Test]
    [HandlerFunctions(RHCustomerOrderSummary)]
    PROCEDURE TotalValueInCustomerOrderSummaryReport@7();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      SalesLine2@1000 : Record 37;
    BEGIN
      // Verify the value of Total in Customer Order Summary Report is equal to the total value of Amount in corresponding Sales Lines.

      // Setup: Create Customer, create Sales Order with one Sales Line
      Initialize;
      CreateSalesOrder(SalesHeader,SalesLine,'',CreateCustomer);

      // Create one more Sales Line
      LibrarySales.CreateSalesLine(SalesLine2,SalesHeader,SalesLine.Type::Item,SalesLine."No.",LibraryRandom.RandDec(100,2));

      // Exercise: Generate the Customer Order Summary Report.
      RunCustOrderSummaryReport(SalesLine."Sell-to Customer No.",FALSE);

      // Verify: Check that the value of Total in Customer Order Summary is equal to the total value of Amount in corresponding Sales Lines.
      VerifyCustOrderSummaryTotalValue(SalesLine."Sell-to Customer No.",SalesLine."Line Amount" + SalesLine2."Line Amount",FALSE);
    END;

    [Test]
    [HandlerFunctions(RHCustomerOrderSummary)]
    PROCEDURE TotalValueForLCYInCustomerOrderSummaryReport@21();
    VAR
      SalesHeader@1004 : Record 36;
      SalesLine@1003 : Record 37;
      SalesLine2@1000 : Record 37;
      Customer@1001 : Record 18;
    BEGIN
      // Verify the value of Total LCY in Customer Order Summary Report is equal to the total LCY value of Amount in corresponding Sales Lines.

      // Setup: Create Customer with currency code, create Sales Order with one Sales Line
      Initialize;
      CreateCustomerWithCurrencyCode(Customer);
      CreateSalesOrder(SalesHeader,SalesLine,CreateCurrency,Customer."No.");

      // Create one more Sales Line
      LibrarySales.CreateSalesLine(SalesLine2,SalesHeader,SalesLine.Type::Item,SalesLine."No.",LibraryRandom.RandDec(100,2));

      // Exercise: Generate the Customer Order Summary Report.
      RunCustOrderSummaryReport(SalesLine."Sell-to Customer No.",TRUE);

      // Verify: Check that the value of Total LCY in Customer Order Summary is equal to the total LCY value of Amount in corresponding Sales Lines.
      VerifyCustOrderSummaryTotalValue(
        SalesLine."Sell-to Customer No.",ConvertCurrency(SalesLine."Line Amount",SalesHeader."Currency Code") +
        ConvertCurrency(SalesLine2."Line Amount",SalesHeader."Currency Code"),TRUE);
    END;

    [Test]
    [HandlerFunctions(RHCustomerOrderDetail)]
    PROCEDURE CustomerOrderDetailReportWithTotal@39();
    VAR
      CustomerNo@1000 : Code[20];
      ExpectedTotal@1001 : Decimal;
    BEGIN
      // Verify Total displayed correctly in Customer Order Detail Report.

      // Setup: Create a Customer, create one Sales Order with two Lines.
      Initialize;
      CreateSalesOrderWithTwoLines(CustomerNo,ExpectedTotal);

      // Exercise: Generate the Customer Order Detail report.
      RunCustomerOrderDetailReport(CustomerNo,TRUE);

      // Verify: verify Total displayed correctly in Customer Order Detail report.
      VerifyTotalOnCustomerOrderDetailReport(CustomerNo,ExpectedTotal);
    END;

    [Test]
    [HandlerFunctions(RHCustomerOrderSummary)]
    PROCEDURE CustomerOrderSummaryReportWithShowAmountTrue@45();
    VAR
      CustomerNo@1000 : Code[20];
      ExpectedAmount@1001 : Decimal;
    BEGIN
      // Verify Amount of a duration displayed correctly in Customer Order Summary Report.

      // Setup: Create a Customer, create one Sales Order with two Lines.
      Initialize;
      CreateSalesOrderWithTwoLines(CustomerNo,ExpectedAmount);

      // Exercise: Generate the Customer Order Summary report.
      RunCustOrderSummaryReport(CustomerNo,TRUE);

      // Verify: Check that the value of Balance in Order Summary is equal to the value of Amount in corresponding duration.
      VerifyAmountOnCustomerOrderSummaryReport(CustomerNo,ExpectedAmount);
    END;

    [Test]
    [HandlerFunctions(RHCustomerOrderDetail)]
    PROCEDURE CustomerOrderDetailReportWithReleasedDocument@100();
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      CustomerNo@1001 : Code[20];
      ExpectedTotal@1000 : Decimal;
    BEGIN
      // Verify Outstanding Orders and Total for released order displayed correctly in Customer Order Detail Report.

      // Setup: Create a Customer, create one Sales Order with two Lines.
      Initialize;
      CreateSalesOrderWithTwoLines(CustomerNo,ExpectedTotal);

      // Release the Sales Order.
      ReleaseSalesOrder(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);

      // Exercise: Generate the Customer - Order Detail report.
      RunCustomerOrderDetailReport(CustomerNo,TRUE);

      // Verify: Verify Outstanding Orders and Total displayed correctly in Customer Order Detail report.
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.");
      VerifyOutstandingOrdersAndTotalOnCustomerOrderDetailReport(SalesLine,CustomerNo,ExpectedTotal);
    END;

    [Test]
    [HandlerFunctions(RHCustomerOrderSummary)]
    PROCEDURE CustomeOrderSummaryReportWithReleasedDocument@98();
    VAR
      SalesHeader@1003 : Record 36;
      CustomerNo@1001 : Code[20];
      ExpectedAmount@1000 : Decimal;
    BEGIN
      // Verify Amount of a duration displayed correctly in Customer Order Summary Report.

      // Setup: Create a Customer, create one Sales Order with two Lines.
      Initialize;
      CreateSalesOrderWithTwoLines(CustomerNo,ExpectedAmount);

      // Release the Sales Order.
      ReleaseSalesOrder(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);

      // Exercise: Generate the Customer Order Summary report.
      RunCustOrderSummaryReport(CustomerNo,TRUE);

      // Verify: Check that the value of Balance in Order Summary is equal to the value of Amount in corresponding duration.
      VerifyAmountOnCustomerOrderSummaryReport(CustomerNo,ExpectedAmount);
    END;

    [Test]
    [HandlerFunctions(RHSalesInvoice)]
    PROCEDURE LanguageCodeForAssemblyItemsInSalesInvoiceReport@107();
    BEGIN
      // Check the Language Code should be translated for Assembly Component items in Sales Report 206 (Sales - Invoice).
      PostSalesOrderForAssemblyItemsWithLanguageCode(TRUE,Type::Invoice); // Post Ship and Invoice
    END;

    [Test]
    [HandlerFunctions(SalesShipmentReportHandler)]
    PROCEDURE LanguageCodeForAssemblyItemsInSalesShipmentReport@132();
    BEGIN
      // Check the Language Code should be translated for Assembly Component items in Sales Report 208 (Sales - Shipment).
      PostSalesOrderForAssemblyItemsWithLanguageCode(FALSE,Type::Shipment); // Post Ship only
    END;

    LOCAL PROCEDURE UpdateGeneralLedgerSetup@125(VATSpecificationInLCY@1001 : Boolean);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      WITH GeneralLedgerSetup DO BEGIN
        GET;
        "Print VAT specification in LCY" := VATSpecificationInLCY;
        MODIFY(TRUE);
      END;
    END;

    [Test]
    [HandlerFunctions(RHCustomerOrderSummary)]
    PROCEDURE CustomerOrderSummaryLCY@130();
    VAR
      SalesLine@1002 : Record 37;
      SalesHeader@1003 : Record 36;
    BEGIN
      // [FEATURE] [FCY] [Report]
      // [SENARIO 381014] Print "Customer - Order Summary" when sales order has a currency code different from the customer's currency code and different from the LCY.

      // [GIVEN] Customer with LCY
      // [GIVEN] Sales Order with Amount = "X", "Amount (LCY)" = "Y" invoiced in foreign currency
      LibrarySales.CreateFCYSalesDocumentWithItem(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,
        LibrarySales.CreateCustomerNo,LibraryInventory.CreateItemNo,1,'',0D,
        LibraryERM.CreateCurrencyWithRandomExchRates);
      COMMIT;

      // [WHEN] Run "Customer - Order Summary" report with "Print in LCY" option
      RunCustOrderSummaryReport(SalesHeader."Sell-to Customer No.",TRUE);

      // [THEN] Printed Sales Amount is equal to "Y"
      VerifyCustomerOrderSummarySalesAmount(SalesHeader,SalesLine);
    END;

    [Test]
    [HandlerFunctions(RequestPageSalesCreditMemo)]
    PROCEDURE PrintYourReferenceOfPostedSalesCrMemo@131();
    VAR
      PostedCrMemoNo@1002 : Code[20];
      YourReference@1003 : Text[35];
    BEGIN
      // [SCENARIO 382079] Value of "Your Reference" of Posted Sales Cr. Memo have to printed.
      Initialize;

      // [GIVEN] Posted sales credit memo with "Your Reference" = "Ref"
      CreatePostSalesCrMemoWithYourRef(PostedCrMemoNo,YourReference);
      LibraryReportValidation.SetFileName(LibraryUtility.GenerateGUID);
      COMMIT;

      // [WHEN] Print report 207 - "Sales - Credit Memo"
      RunSalesCreditMemoReport(PostedCrMemoNo);

      // [THEN] Caption of "Your reference" contains "Ref"
      VerifyYourReferenceSalesCrMemo(YourReference);
    END;

    LOCAL PROCEDURE Initialize@8();
    BEGIN
      LibrarySetupStorage.Restore;
      LibraryVariableStorage.Clear;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");
    END;

    LOCAL PROCEDURE UpdateSalesSetup@117(InvoiceRounding@1001 : Boolean);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      WITH SalesReceivablesSetup DO BEGIN
        GET;
        VALIDATE("Invoice Rounding",InvoiceRounding);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE ClearGenJournalLine@19(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE CreateAndPostInvoice@52(AccountNo@1005 : Code[20];CurrencyCode@1002 : Code[10];Amount@1003 : Decimal) : Code[20];
    VAR
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1001 : Record 81;
    BEGIN
      ClearGenJournalLine(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,AccountNo,Amount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreateApplyAndPostPayment@148(AccountNo@1005 : Code[20];AppliesToInvoiceNo@1004 : Code[20];CurrencyCode@1002 : Code[10];PmtAmount@1003 : Decimal) : Code[20];
    VAR
      GenJournalBatch@1000 : Record 232;
      GenJournalLine@1001 : Record 81;
    BEGIN
      ClearGenJournalLine(GenJournalBatch);
      WITH GenJournalLine DO BEGIN
        LibraryERM.CreateGeneralJnlLine(
          GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,"Document Type"::Payment,
          "Account Type"::Customer,AccountNo,PmtAmount);
        VALIDATE("Applies-to Doc. Type","Applies-to Doc. Type"::Invoice);
        VALIDATE("Applies-to Doc. No.",AppliesToInvoiceNo);
        VALIDATE("Currency Code",CurrencyCode);
        MODIFY(TRUE);
      END;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrder@38(VAR SalesHeader@1001 : Record 36;VAR SalesLine@1004 : Record 37) : Code[20];
    BEGIN
      // Create Sales Order with Random Quantity.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithQtyToAssemble@110(CustomerNo@1004 : Code[20];ShipmentDate@1005 : Date;ItemNo@1000 : Code[20];Invoice@1002 : Boolean) : Code[20];
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.VALIDATE("Order Date",ShipmentDate);
      SalesHeader.VALIDATE("Shipment Date",ShipmentDate);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Qty. to Assemble to Order",SalesLine.Quantity);
      SalesLine.MODIFY(TRUE);

      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,Invoice));
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@115(VAR ItemJournalLine@1000 : Record 83;EntryType@1004 : Option;ItemNo@1003 : Code[20]);
    VAR
      ItemJournalBatch@1002 : Record 233;
      ItemJournalTemplate@1007 : Record 82;
    BEGIN
      SelectItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Type::Item);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,
        LibraryRandom.RandDec(100,2)); // Use random Quantity.
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAssemblyComponent@114(ParentItemNo@1000 : Code[20]) : Code[20];
    VAR
      AssemblyItem@1001 : Record 27;
      BOMComponent@1002 : Record 90;
    BEGIN
      LibraryAssembly.CreateItem(AssemblyItem,AssemblyItem."Costing Method"::FIFO,AssemblyItem."Replenishment System"::Purchase,'','');
      LibraryAssembly.CreateAssemblyListComponent(
        BOMComponent.Type::Item,AssemblyItem."No.",ParentItemNo,'',
        BOMComponent."Resource Usage Type"::Direct,LibraryRandom.RandDec(2,4),TRUE);
      EXIT(AssemblyItem."No.");
    END;

    LOCAL PROCEDURE CreateAndSetupSalesDocument@153(VAR SalesHeader@1001 : Record 36;DocumentType@1000 : Option);
    VAR
      SalesLine@1005 : Record 37;
      VATPostingSetup@1011 : Record 325;
      GLAccount@1012 : Record 15;
      CurrencyCode@1010 : Code[10];
      ExchangeRate@1008 : Decimal;
      LineQuantity@1007 : Decimal;
      LineUnitPrice@1006 : Decimal;
      VATPercent@1002 : Integer;
    BEGIN
      // Certain values to get rounding error
      LineQuantity := 1;
      LineUnitPrice := 2575872;
      ExchangeRate := 1.284;
      VATPercent := 10;

      // Init setups
      CurrencyCode := LibraryERM.CreateCurrencyWithExchangeRate(WORKDATE,ExchangeRate,ExchangeRate);

      // Cteare and post document
      CreateVATPostingGroup(VATPostingSetup,VATPercent);
      LibrarySales.CreateSalesHeader(
        SalesHeader,DocumentType,CreateCustomerWithVATBusPostingGroup(VATPostingSetup."VAT Bus. Posting Group"));
      WITH SalesHeader DO BEGIN
        VALIDATE("Posting Date",WORKDATE);
        VALIDATE("Currency Code",CurrencyCode);
        MODIFY(TRUE);
      END;

      WITH SalesLine DO BEGIN
        LibrarySales.CreateSalesLine(
          SalesLine,SalesHeader,Type::"G/L Account",
          LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,GLAccount."Gen. Posting Type"::Sale),LineQuantity);
        VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
        VALIDATE("Unit Price",LineUnitPrice);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateCurrency@42() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCustomer@40() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      // Create a new Customer with Address and Application Method : Apply to Oldest.
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE(Address,'Address: ' + Customer."No.");
      Customer.VALIDATE("Phone No.",LibraryUtility.GenerateGUID);
      Customer.VALIDATE("Application Method",Customer."Application Method"::"Apply to Oldest");
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithVATBusPostingGroup@68(VATBusPostingGroupCode@1000 : Code[10]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("VAT Bus. Posting Group",VATBusPostingGroupCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithLanguageCode@123(VAR Customer@1000 : Record 18);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Language Code",GetRandomLanguageCode);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemTranslation@111(ItemNo@1001 : Code[20];LanguageCode@1002 : Code[10]) : Text[50];
    VAR
      ItemTranslation@1000 : Record 30;
    BEGIN
      WITH ItemTranslation DO BEGIN
        INIT;
        VALIDATE("Item No.",ItemNo);
        VALIDATE("Language Code",LanguageCode);
        VALIDATE(Description,ItemNo + LanguageCode);
        INSERT(TRUE);
        EXIT(Description);
      END;
    END;

    LOCAL PROCEDURE CreatePostGeneralJournalLine@31(VAR GenJournalLine@1001 : Record 81;DocumentType@1004 : Option;CustomerNo@1005 : Code[20];CurrencyCode@1003 : Code[10];Amount@1006 : Decimal;PostingDate@1007 : Date);
    VAR
      GenJournalBatch@1000 : Record 232;
      LibraryERM@1002 : Codeunit 131300;
    BEGIN
      ClearGenJournalLine(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Customer,CustomerNo,Amount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateSalesOrder@5(VAR SalesHeader@1004 : Record 36;VAR SalesLine@1003 : Record 37;CurrencyCode@1006 : Code[10];CustomerNo@1002 : Code[20]);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      SalesHeader.VALIDATE("Currency Code",CurrencyCode);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));
    END;

    LOCAL PROCEDURE CreateSalesOrderWithTwoLines@87(VAR CustomerNo@1000 : Code[20];VAR ExpectedAmount@1001 : Decimal);
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine1@1003 : Record 37;
      SalesLine2@1004 : Record 37;
      VATPostingSetup@1005 : Record 325;
      ItemNo@1006 : Code[20];
    BEGIN
      // Line Amount Incl. VAT = Line Amount Excl. VAT * (1 + VAT%).
      // Using hardcode of VAT% to leave out the third decimal places of Line Amount Incl. VAT
      CreateVATPostingGroup(VATPostingSetup,19.6);
      CustomerNo := CreateCustomerWithVATBusPostingGroup(VATPostingSetup."VAT Bus. Posting Group");
      ItemNo := CreateItemWithVATProdPostingGroup(VATPostingSetup."VAT Prod. Posting Group");
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);

      // Outstanding Order = Line Amount Incl. VAT(##0.00) / (1 + VAT%).
      // Using hardcode of Unit Price to leave out the third decimal places of Line Amount Incl. VAT when calculate Outstanding Order with VAT.
      CreateSalesLineWithVAT(SalesHeader,SalesLine1,ItemNo,129);
      CreateSalesLineWithVAT(SalesHeader,SalesLine2,ItemNo,79);
      ExpectedAmount := ROUND(SalesLine1.Amount * SalesLine1."Outstanding Quantity" / SalesLine1.Quantity) +
        ROUND(SalesLine2.Amount * SalesLine2."Outstanding Quantity" / SalesLine2.Quantity);
    END;

    LOCAL PROCEDURE CreateSalesLineWithVAT@89(VAR SalesHeader@1007 : Record 36;VAR SalesLine@1006 : Record 37;ItemNo@1005 : Code[20];UnitPrice@1004 : Decimal);
    BEGIN
      // Using hardcode to make sure the third decimal places of Line Amount Incl. VAT can be left out
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,1);
      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithCurrencyCode@93(VAR Customer@1000 : Record 18);
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.FindCurrency(Currency);
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Currency Code",Currency.Code);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVATPostingGroup@90(VAR VATPostingSetup@1001 : Record 325;VATPercent@1000 : Decimal);
    VAR
      VATProdPostingGroup@1002 : Record 324;
      VATBusinessPostingGroup@1003 : Record 323;
      GLAccount@1004 : Record 15;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateVATProductPostingGroup(VATProdPostingGroup);
      LibraryERM.CreateVATBusinessPostingGroup(VATBusinessPostingGroup);
      LibraryERM.CreateVATPostingSetup(VATPostingSetup,VATBusinessPostingGroup.Code,VATProdPostingGroup.Code);
      WITH VATPostingSetup DO BEGIN
        INIT;
        VALIDATE("VAT Identifier",'VAT' + FORMAT(VATPercent));
        VALIDATE("VAT %",VATPercent);
        VALIDATE("Sales VAT Account",GLAccount."No.");
        VALIDATE("Purchase VAT Account",GLAccount."No.");
        MODIFY(TRUE);
      END;
    END;

    [Normal]
    LOCAL PROCEDURE CreateItemWithVATProdPostingGroup@92(VATProdPostingGroupCode@1000 : Code[10]) : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("VAT Prod. Posting Group",VATProdPostingGroupCode);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreatePostSalesCrMemoWithYourRef@136(VAR PostedCrMemoNo@1000 : Code[20];VAR YourReference@1003 : Text[35]);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1002 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",LibrarySales.CreateCustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandIntInRange(1,10));
      LibraryUtility.FillMaxText(SalesHeader,SalesHeader.FIELDNO("Your Reference"));
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      PostedCrMemoNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      YourReference := SalesHeader."Your Reference";
    END;

    LOCAL PROCEDURE ReleaseSalesOrder@102(VAR SalesHeader@1000 : Record 36;DocumentType@1001 : Option;CustomerNo@1002 : Code[20]);
    BEGIN
      SalesHeader.SETRANGE("Document Type",DocumentType);
      SalesHeader.SETRANGE("Sell-to Customer No.",CustomerNo);
      SalesHeader.FINDFIRST;
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE ConvertCurrency@58(Amount@1000 : Decimal;CurrencyCode@1001 : Code[10]) : Decimal;
    BEGIN
      EXIT(ROUND(LibraryERM.ConvertCurrency(Amount,CurrencyCode,'',WORKDATE)));
    END;

    LOCAL PROCEDURE FindSalesLine@101(VAR SalesLine@1000 : Record 37;DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindGLEntry@56(DocumentNo@1001 : Code[20]) : Integer;
    VAR
      GLEntry@1000 : Record 17;
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDLAST;
      EXIT(GLEntry."Transaction No.");
    END;

    LOCAL PROCEDURE GetCustomerBalanceLCY@14() : Decimal;
    VAR
      Customer@1001 : Record 18;
      TempCustomerAmount@1000 : TEMPORARY Record 266;
    BEGIN
      TempCustomerAmount.INIT;
      Customer.SETFILTER("Balance (LCY)",'>0');
      Customer.FINDSET;
      REPEAT
        Customer.CALCFIELDS("Sales (LCY)","Balance (LCY)");
        TempCustomerAmount.VALIDATE("Amount (LCY)",Customer."Balance (LCY)");
        TempCustomerAmount.VALIDATE("Amount 2 (LCY)",Customer."Sales (LCY)");
        TempCustomerAmount.VALIDATE("Customer No.",Customer."No.");
        TempCustomerAmount.INSERT;
      UNTIL Customer.NEXT = 0;

      TempCustomerAmount.FINDLAST;
      EXIT(TempCustomerAmount."Amount (LCY)");
    END;

    LOCAL PROCEDURE GetCustomerSalesLCY@10() : Decimal;
    VAR
      Customer@1001 : Record 18;
      TempCustomerAmount@1000 : TEMPORARY Record 266;
    BEGIN
      TempCustomerAmount.INIT;
      Customer.SETFILTER("Sales (LCY)",'>0');
      Customer.FINDSET;
      REPEAT
        Customer.CALCFIELDS("Sales (LCY)","Balance (LCY)");
        TempCustomerAmount.VALIDATE("Amount (LCY)",Customer."Sales (LCY)");
        TempCustomerAmount.VALIDATE("Amount 2 (LCY)",Customer."Balance (LCY)");
        TempCustomerAmount.VALIDATE("Customer No.",Customer."No.");
        TempCustomerAmount.INSERT;
      UNTIL Customer.NEXT = 0;

      TempCustomerAmount.FINDLAST;
      EXIT(TempCustomerAmount."Amount (LCY)");
    END;

    LOCAL PROCEDURE GetPostingDate@17() : Date;
    VAR
      DateComprRegister@1000 : Record 87;
    BEGIN
      DateComprRegister.SETCURRENTKEY("Table ID","Ending Date");
      DateComprRegister.SETRANGE("Table ID",DATABASE::"G/L Entry");
      IF DateComprRegister.FINDLAST THEN
        EXIT(CALCDATE('<1D>',DateComprRegister."Ending Date")); // Next Day
      EXIT(WORKDATE);
    END;

    LOCAL PROCEDURE GetRandomLanguageCode@112() : Code[10];
    VAR
      Language@1002 : Record 8;
      RandomNum@1001 : Integer;
    BEGIN
      Language.INIT;
      RandomNum := LibraryRandom.RandIntInRange(1,Language.COUNT);
      Language.NEXT(RandomNum);
      EXIT(Language.Code);
    END;

    LOCAL PROCEDURE LanguageCodeForAssemblyItemsSetup@124(VAR Customer@1005 : Record 18;VAR ParentItem@1003 : Record 27) : Text[50];
    VAR
      ItemJournalLine@1000 : Record 83;
      AssemblyItemNo@1002 : Code[20];
    BEGIN
      // Create Customer with Language Code.
      CreateCustomerWithLanguageCode(Customer);

      // Create Item with Assembly Component. Update Inventory for Assembly Item.
      LibraryAssembly.CreateItem(ParentItem,ParentItem."Costing Method"::FIFO,ParentItem."Replenishment System"::Assembly,'','');
      AssemblyItemNo := CreateAssemblyComponent(ParentItem."No.");
      CreateAndPostItemJournalLine(ItemJournalLine,ItemJournalLine."Entry Type"::"Positive Adjmt.",AssemblyItemNo);

      // Create Item Translation for Assembly Item.
      EXIT(CreateItemTranslation(AssemblyItemNo,Customer."Language Code")); // Return Translation Description for Assembly Item
    END;

    LOCAL PROCEDURE ModifyUnitPriceInSalesLine@82(VAR SalesLine@1000 : Record 37;UnitPrice@1002 : Decimal);
    BEGIN
      SalesLine.VALIDATE("Unit Price",UnitPrice);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostJournalLines@12(VAR GenJournalLine@1000 : Record 81;CustomerNo@1001 : Code[20];DebitAmount@1004 : Decimal;CreditAmount@1005 : Decimal);
    VAR
      GenJournalBatch@1002 : Record 232;
    BEGIN
      ClearGenJournalLine(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Customer,CustomerNo,DebitAmount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Customer,CustomerNo,CreditAmount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE PostSalesOrderForAssemblyItemsWithLanguageCode@127(PostInvoice@1001 : Boolean;Type@1002 : 'Invoice,Shipment');
    VAR
      Customer@1007 : Record 18;
      ParentItem@1004 : Record 27;
      DocumentNo@1000 : Code[20];
      AssemblyItemTranslationDes@1011 : Text[50];
    BEGIN
      // Setup: Create Customer with Language Code. Create Item with Assembly Component. Update Inventory and Create Item Translation for Assembly Item.
      Initialize;
      LibraryERMCountryData.CreateVATData;
      AssemblyItemTranslationDes := LanguageCodeForAssemblyItemsSetup(Customer,ParentItem);

      // Create and Post Sales Order with "Qty to Assemble to Order ".
      DocumentNo := CreateAndPostSalesOrderWithQtyToAssemble(
          Customer."No.",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE),ParentItem."No.",PostInvoice); // Post Ship only

      // Excercise: Run Report 206 (Sales - Invoice) / 208 (Sales - Shipment).
      // Verify: Description for Assembly Item is translated according to Language Code
      CASE Type OF
        Type::Invoice:
          BEGIN
            RunSalesInvoiceReport(DocumentNo,FALSE,FALSE,TRUE); // Show Assembly Components = YES
            VerifyXMLReport(PostedAsmLineDescCapTxt,'  ' + AssemblyItemTranslationDes); // Assembly Item has 2 (blank) indent before Translation Description in report
          END;
        Type::Shipment:
          BEGIN
            RunSalesShipmentReport(DocumentNo,FALSE,FALSE,FALSE,TRUE); // Show Assembly Components = YES
            VerifyXMLReport(PostedAsmLineDescriptionCapTxt,'  ' + AssemblyItemTranslationDes); // Assembly Item has 2 (blank) indent before Translation Description in report
          END;
      END
    END;

    LOCAL PROCEDURE ReverseTransaction@59(TransactionNo@1000 : Integer);
    VAR
      ReversalEntry@1001 : Record 179;
    BEGIN
      LibraryVariableStorage.Enqueue(SuccessfullyReversedMessageMsg);
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseTransaction(TransactionNo);
    END;

    LOCAL PROCEDURE RunAndVerifyCustomerRegister@33(DocumentNo@1006 : Code[20];OriginalAmountLCY@1007 : Decimal);
    BEGIN
      // Exercise: Generate the Customer Register report.
      REPORT.RUN(REPORT::"Customer Register");

      // Verify: Check that the value of Original Amount in Customer Register is equal to the value of Amount in
      // corresponding General Journal Line.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Cust__Ledger_Entry__Document_No__',DocumentNo);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Cust__Ledger_Entry__Document_No__',DocumentNo));
      LibraryReportDataset.AssertCurrentRowValue('CustAmount',OriginalAmountLCY);
    END;

    LOCAL PROCEDURE RunAndVerifyCustomerTrialBal@20(GenJournalLine@1006 : Record 81;AmountLCY@1003 : Decimal);
    BEGIN
      // Exercise: Generate the Customer Detail Trial Balance Report.
      REPORT.RUN(REPORT::"Customer - Detail Trial Bal.");

      // Verify: Check that the value of Amount in Customer Detail Trial Balance is equal to the value of Amount in
      // corresponding General Journal Line.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('DocNo_CustLedgEntry',GenJournalLine."Document No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'DocNo_CustLedgEntry',GenJournalLine."Document No."));
      LibraryReportDataset.AssertCurrentRowValue('CustLedgerEntryAmtLCY',AmountLCY);
      LibraryReportDataset.AssertCurrentRowValue('CustBalanceLCY',AmountLCY);
    END;

    LOCAL PROCEDURE RunCustomerDetailedAging@91(GenJournalLine@1000 : Record 81);
    BEGIN
      // Enqueue values for CustomerDetailedAgingRequestPageHandler.
      LibraryVariableStorage.Enqueue(GenJournalLine."Due Date");
      LibraryVariableStorage.Enqueue(GenJournalLine."Account No.");

      // Run Customer Detailed Aging Report.
      REPORT.RUN(REPORT::"Customer Detailed Aging");
    END;

    LOCAL PROCEDURE RunCustomerSummaryAgingReport@51(CustomerNo@1000 : Code[20];ShowAmountInLCY@1007 : Boolean);
    VAR
      Customer@1002 : Record 18;
      CustomerSummaryAging@1001 : Report 105;
    BEGIN
      Customer.SETRANGE("No.",CustomerNo);
      CustomerSummaryAging.SETTABLEVIEW(Customer);
      CustomerSummaryAging.InitializeRequest(WORKDATE,STRSUBSTNO('<%1M>',LibraryRandom.RandInt(5)),ShowAmountInLCY);
      COMMIT;
      CustomerSummaryAging.RUNMODAL;
    END;

    LOCAL PROCEDURE RunAndVerifyCustSummaryAging@32(CustomerNo@1008 : Code[20];ShowAmountLCY@1007 : Boolean;BalanceLCY@1001 : Decimal);
    BEGIN
      // Exercise: Generate the Customer Summary Aging Report.
      RunCustomerSummaryAgingReport(CustomerNo,ShowAmountLCY);

      // Verify: Check that the value of Balance in Customer Summary Aging is equal to the value of Amount in
      // corresponding General Journal Line.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Customer_No_',CustomerNo);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Customer_No_',CustomerNo));
      LibraryReportDataset.AssertCurrentRowValue('TotalCustBalanceLCY',BalanceLCY);
      LibraryReportDataset.AssertCurrentRowValue('CustBalanceDueLCY_3_',0);
    END;

    LOCAL PROCEDURE RunCustomerOrderDetailReport@83(SellToCustomerNo@1000 : Code[20];ShowAmountInLCY@1001 : Boolean);
    VAR
      Customer@1003 : Record 18;
    BEGIN
      LibraryVariableStorage.Enqueue(ShowAmountInLCY);
      LibraryVariableStorage.Enqueue(FALSE);
      Customer.SETRANGE("No.",SellToCustomerNo);
      COMMIT;  // Due to limitation in page testability, commit is needed in this test case.
      REPORT.RUN(REPORT::"Customer - Order Detail",TRUE,FALSE,Customer);
    END;

    LOCAL PROCEDURE RunCustomerOrderSummaryReport@96(VAR Customer@1000 : Record 18);
    BEGIN
      Customer.SETRANGE("No.",Customer."No.");
      COMMIT; // Due to limitation in page testability, commit is needed in this test case.
      REPORT.RUN(REPORT::"Customer - Order Summary",TRUE,FALSE,Customer);
    END;

    LOCAL PROCEDURE RunCustOrderSummaryReport@54(SellToCustomerNo@1000 : Code[20];ShowAmountLCY@1002 : Boolean);
    VAR
      Customer@1003 : Record 18;
    BEGIN
      LibraryVariableStorage.Enqueue(WORKDATE);
      LibraryVariableStorage.Enqueue(ShowAmountLCY);
      Customer.SETRANGE("No.",SellToCustomerNo);
      COMMIT;  // Due to limitation in page testability, commit is needed in this test case.
      REPORT.RUN(REPORT::"Customer - Order Summary",TRUE,FALSE,Customer);
    END;

    LOCAL PROCEDURE RunSalesQuoteReport@184(No@1017 : Code[20];InternalInfo@1016 : Boolean;Archived@1015 : Boolean;LogInteraction@1014 : Boolean;Print@1013 : Boolean);
    VAR
      SalesHeader@1009 : Record 36;
      SalesQuote@1005 : Report 204;
    BEGIN
      CLEAR(SalesQuote);
      SalesHeader.SETRANGE("No.",No);
      SalesQuote.SETTABLEVIEW(SalesHeader);
      LibraryVariableStorage.Enqueue(0);
      LibraryVariableStorage.Enqueue(InternalInfo);
      LibraryVariableStorage.Enqueue(Archived);
      LibraryVariableStorage.Enqueue(LogInteraction);
      LibraryVariableStorage.Enqueue(Print);

      SalesQuote.InitializeRequest(0,InternalInfo,Archived,LogInteraction,Print);
      COMMIT;
      SalesQuote.RUN;
    END;

    LOCAL PROCEDURE RunSalesShipmentReport@122(No@1005 : Code[20];ShowInternalInformation@1001 : Boolean;LogInteraction@1002 : Boolean;ShowCorrectionLines@1003 : Boolean;ShowAssemblyComponents@1006 : Boolean);
    VAR
      SalesShipmentHeader@1004 : Record 110;
      SalesShipment@1000 : Report 208;
    BEGIN
      CLEAR(SalesShipment);
      SalesShipmentHeader.SETRANGE("No.",No);
      SalesShipment.SETTABLEVIEW(SalesShipmentHeader);
      SalesShipment.InitializeRequest(0,ShowInternalInformation,LogInteraction,ShowCorrectionLines,FALSE,ShowAssemblyComponents); // NewShowLotSN is False
      COMMIT; // Due to limitation in Report Commit is required for this Test case.
      SalesShipment.RUN;
    END;

    LOCAL PROCEDURE RunSalesInvoiceReport@174(No@1017 : Code[20];InternalInfo@1016 : Boolean;LogInteraction@1006 : Boolean;ShowAssemblyComponents@1000 : Boolean);
    VAR
      SalesInvoiceHeader@1009 : Record 112;
      SalesInvoice@1001 : Report 206;
    BEGIN
      CLEAR(SalesInvoice);
      SalesInvoiceHeader.SETRANGE("No.",No);
      SalesInvoice.SETTABLEVIEW(SalesInvoiceHeader);
      SalesInvoice.InitializeRequest(0,InternalInfo,LogInteraction,ShowAssemblyComponents);
      COMMIT;
      SalesInvoice.RUN;
    END;

    LOCAL PROCEDURE RunSalesCreditMemoReport@120(DocumentNo@1001 : Code[20]);
    VAR
      SalesCrMemoHeader@1002 : Record 114;
      SalesCreditMemoReport@1000 : Report 207;
    BEGIN
      SalesCrMemoHeader.SETRANGE("No.",DocumentNo);
      WITH SalesCreditMemoReport DO BEGIN
        SETTABLEVIEW(SalesCrMemoHeader);
        InitializeRequest(0,FALSE,FALSE);
        RUN;
      END;
    END;

    LOCAL PROCEDURE SelectItemJournalBatch@116(VAR ItemJournalBatch@1001 : Record 233;ItemJournalTemplateType@1003 : Option);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplateType);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplateType,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE SaveStatementReport@77(CustomerNo@1005 : Code[20];PostingDate@1009 : Date;PrintOverdueEntries@1000 : Boolean;PrintReversedEntries@1001 : Boolean;PrintUnappliedEntries@1002 : Boolean;IncludeAgingBand@1007 : Boolean;PeriodLength@1008 : DateFormula);
    VAR
      Customer@1004 : Record 18;
      Statement@1003 : Report 116;
      DateChoice@1006 : 'Due Date,Posting Date';
    BEGIN
      CLEAR(Statement);
      Customer.SETRANGE("No.",CustomerNo);

      // Using 1 because Date Filter has to be set for two consecutive Years.
      Statement.SETTABLEVIEW(Customer);
      Statement.InitializeRequest(
        PrintOverdueEntries,TRUE,FALSE,PrintReversedEntries,PrintUnappliedEntries,IncludeAgingBand,
        FORMAT(PeriodLength),DateChoice::"Posting Date",FALSE,DMY2DATE(1,1,DATE2DMY(PostingDate,3)),
        DMY2DATE(31,12,DATE2DMY(CALCDATE('<1Y>',PostingDate),3)));
      COMMIT;
      Statement.RUN;
    END;

    LOCAL PROCEDURE SetupInvoiceDiscount@43(VAR CustInvoiceDisc@1001 : Record 19);
    BEGIN
      // Required random value for Minimum Amount and Discount Pct fields, value is not important.
      LibraryERM.CreateInvDiscForCustomer(CustInvoiceDisc,CreateCustomer,'',LibraryRandom.RandInt(100));
      CustInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandDec(10,2));
      CustInvoiceDisc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@62(VAR OldDefaultPostingDate@1001 : Option;DefaultPostingDate@1002 : Option);
    VAR
      SalesReceivablesSetup@1003 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      OldDefaultPostingDate := SalesReceivablesSetup."Default Posting Date";
      SalesReceivablesSetup.VALIDATE("Default Posting Date",DefaultPostingDate);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UnapplyCustLedgerEntry@105(DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      LibraryERM.FindCustomerLedgerEntry(CustLedgerEntry,DocumentType,DocumentNo);
      LibraryERM.UnapplyCustomerLedgerEntry(CustLedgerEntry);
    END;

    LOCAL PROCEDURE VerifyAmtInDtldCustLedgEntries@103(RowCaption@1002 : Text;RowValue@1003 : Text;Amount@1000 : Decimal);
    BEGIN
      LibraryReportDataset.SetRange(RowCaption,RowValue);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,RowCaption,RowValue));
      LibraryReportDataset.AssertCurrentRowValue('Amt_DtldCustLedgEntries',Amount);
    END;

    LOCAL PROCEDURE VerifyAmountInMultipleRows@76(DocumentNo@1000 : Code[20];Amount@1001 : Decimal);
    BEGIN
      VerifyAmtInDtldCustLedgEntries('DocNo_DtldCustLedgEntries',DocumentNo,Amount);
      VerifyAmtInDtldCustLedgEntries('CustBalance','0',-Amount);
    END;

    LOCAL PROCEDURE VerifyLineAmtCustomerOrderDetailReport@4(SalesLineNo@1000 : Code[20];LineAmount@1003 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_SalesLine',SalesLineNo);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'No_SalesLine',SalesLineNo));
      LibraryReportDataset.AssertCurrentRowValue('SalesOrderAmount',LineAmount);
    END;

    LOCAL PROCEDURE VerifyTotalLCYOnCustomerSummaryAgingReport@49(Customer@1001 : Record 18);
    BEGIN
      Customer.CALCFIELDS("Balance (LCY)");
      LibraryReportDataset.SetRange('Total_LCY_Caption',TotalCaptionLbl);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'Total_LCY_Caption',TotalCaptionLbl));
      LibraryReportDataset.AssertCurrentRowValue('TotalCustBalanceLCY',Customer."Balance (LCY)");
    END;

    LOCAL PROCEDURE VerifyTotalLCYOnCustomerOrderSummary@99(ExpectedTotalLCY@1001 : Decimal);
    BEGIN
      LibraryReportDataset.SetRange('TotalCaption',ColumnTotalLbl);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'TotalCaption',ColumnTotalLbl));
      LibraryReportDataset.AssertCurrentRowValue('SalesOrderAmountLCY',ROUND(ExpectedTotalLCY,0.01));
    END;

    LOCAL PROCEDURE VerifyCustomerDetailedAging@48(DocumentNo@1000 : Code[20];DueDate@1001 : Date);
    BEGIN
      LibraryReportDataset.SetRange(DocumentNoLbl,DocumentNo);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue(DueDateLbl,FORMAT(DueDate));
    END;

    LOCAL PROCEDURE VerifyCustOrderSummary@13(SalesLine@1008 : Record 37);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Cust',SalesLine."Sell-to Customer No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'No_Cust',SalesLine."Sell-to Customer No."));
      LibraryReportDataset.AssertCurrentRowValue('SalesAmtOnOrderLCY1',0);
      LibraryReportDataset.AssertCurrentRowValue('SalesOrderAmountLCY',SalesLine."Line Amount");
    END;

    LOCAL PROCEDURE VerifyOverDueEntry@69(PostingDate@1000 : Date;Amount@1001 : Decimal);
    BEGIN
      LibraryReportDataset.SetRange('OverDueEntries',OverdueEntriesLbl);
      VerifyRemainAmtInCustLedgEntry(PostingDate,Amount);
    END;

    LOCAL PROCEDURE VerifyRemainAmtInCustLedgEntry@86(PostingDate@1000 : Date;Amount@1001 : Decimal);
    BEGIN
      LibraryReportDataset.SetRange('PostDate_CustLedgEntry2',FORMAT(PostingDate));
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,'PostDate_CustLedgEntry2',FORMAT(PostingDate)));
      LibraryReportDataset.AssertCurrentRowValue('RemainAmt_CustLedgEntry2',Amount);
    END;

    LOCAL PROCEDURE VerifyCustOrderSummaryTotalValue@70(CustomerNo@1008 : Code[20];TotalAmount@1005 : Decimal;VerifyLCYTotal@1006 : Boolean);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Cust',CustomerNo);

      IF VerifyLCYTotal THEN
        LibraryReportDataset.AssertElementWithValueExists('TotalSalesAmtOnOrderLCY',TotalAmount)
      ELSE
        LibraryReportDataset.AssertElementWithValueExists('TotalSalesAmtOnOrder',TotalAmount);
    END;

    LOCAL PROCEDURE VerifyAmountOnCustomerOrderSummaryReport@94(CustomerNo@1000 : Code[20];ExpectedAmount@1001 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Cust',CustomerNo);
      LibraryReportDataset.AssertElementWithValueExists('SalesAmtOnOrderLCY2',ExpectedAmount);
    END;

    LOCAL PROCEDURE VerifyTotalOnCustomerOrderDetailReport@97(CustomerNo@1000 : Code[20];ExpectedTotal@1001 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Customer',CustomerNo);
      LibraryReportDataset.AssertElementWithValueExists('TotalAmt_CurrTotalBuff',ExpectedTotal);
    END;

    LOCAL PROCEDURE VerifyOutstandingOrdersAndTotalOnCustomerOrderDetailReport@106(SalesLine@1003 : Record 37;CustomerNo@1001 : Code[20];ExpectedTotal@1000 : Decimal);
    BEGIN
      WITH LibraryReportDataset DO BEGIN
        LoadDataSetFile;
        SetRange('No_Customer',CustomerNo);
        IF NOT GetNextRow THEN
          ERROR(STRSUBSTNO(RowNotFoundErr,'No_Customer',CustomerNo));
        AssertCurrentRowValue('SalesOrderAmount',SalesLine.Amount);
        GetNextRow;
        SalesLine.NEXT;
        AssertCurrentRowValue('SalesOrderAmount',SalesLine.Amount);
        AssertElementWithValueExists('TotalAmt_CurrTotalBuff',ExpectedTotal);
      END;
    END;

    LOCAL PROCEDURE VerifyXMLReport@118(XmlElementCaption@1000 : Text;XmlValue@1001 : Text);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange(XmlElementCaption,XmlValue);
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(RowNotFoundErr,XmlElementCaption,XmlValue));
      LibraryReportDataset.AssertCurrentRowValue(XmlElementCaption,XmlValue);
    END;

    LOCAL PROCEDURE VerifyYourReferenceSalesCrMemo@139(YourReference@1000 : Text[35]);
    BEGIN
      LibraryReportValidation.OpenExcelFile;
      LibraryReportValidation.VerifyCellValue(15,4,YourReference);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@78(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Handler for confirmation messages, always send positive reply.
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@27(Message@1000 : Text[1024]);
    VAR
      ActualMessage@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ActualMessage);
      Assert.AreEqual(Message,FORMAT(ActualMessage),UnexpectedMessageMsg);
    END;

    [RequestPageHandler]
    PROCEDURE CustomerDetailedAgingRequestPageHandler@50(VAR CustomerDetailedAging@1000 : TestRequestPage 106);
    VAR
      CustomerNo@1003 : Variant;
      EndDate@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(EndDate);  // Dequeue variable.
      LibraryVariableStorage.Dequeue(CustomerNo);  // Dequeue variable.
      CustomerDetailedAging."Ending Date".SETVALUE(EndDate);
      CustomerDetailedAging.ShowOpenEntriesOnly.SETVALUE(FALSE);  // Setting Show Open Entries Only boolean.
      CustomerDetailedAging.Customer.SETFILTER("No.",CustomerNo);
      CustomerDetailedAging.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CustomerListRequestPageHandler@108(VAR CustomerList@1000 : TestRequestPage 101);
    VAR
      CustomerNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CustomerNo);
      CustomerList.Customer.SETFILTER("No.",CustomerNo);
      CustomerList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CustomerSummaryAgingSimpRequestPageHandler@80(VAR CustomerSummaryAgingSimp@1000 : TestRequestPage 109);
    VAR
      CustomerNo@1002 : Variant;
      WorkDate@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(WorkDate);
      LibraryVariableStorage.Dequeue(CustomerNo);
      CustomerSummaryAgingSimp.StartingDate.SETVALUE(WorkDate);
      CustomerSummaryAgingSimp.Customer.SETFILTER("No.",CustomerNo);
      CustomerSummaryAgingSimp.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CustomerTopTenListRequestPageHandler@79(VAR CustomerTop10List@1003 : TestRequestPage 111);
    VAR
      CustomerNo@1000 : Variant;
      ShowType@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ShowType);
      LibraryVariableStorage.Dequeue(CustomerNo);
      CustomerTop10List.Show.SETVALUE(ShowType);
      CustomerTop10List.Customer.SETFILTER("No.",CustomerNo);
      CustomerTop10List.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHCustomerTrialBalanceReport@72(VAR CustomerTrialBalance@1000 : TestRequestPage 129);
    BEGIN
      CustomerTrialBalance.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHCustomerOrderDetail@74(VAR CustomerOrderDetail@1000 : TestRequestPage 108);
    VAR
      ShowAmountInLCY@1002 : Variant;
      PrintOnlyPerPage@1003 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ShowAmountInLCY);
      LibraryVariableStorage.Dequeue(PrintOnlyPerPage);
      CustomerOrderDetail.ShowAmountsInLCY.SETVALUE(ShowAmountInLCY);
      CustomerOrderDetail.NewPagePerCustomer.SETVALUE(PrintOnlyPerPage);
      CustomerOrderDetail.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHCustomerOrderSummary@75(VAR CustomerOrderSummary@1000 : TestRequestPage 107);
    VAR
      StartingDate@1003 : Variant;
      ShowAmountLCY@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(ShowAmountLCY);
      CustomerOrderSummary.StartingDate.SETVALUE(StartingDate);
      CustomerOrderSummary.ShwAmtinLCY.SETVALUE(ShowAmountLCY);
      CustomerOrderSummary.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHOrderConfirmation@18(VAR OrderConfirmation@1000 : TestRequestPage 205);
    BEGIN
      OrderConfirmation.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CustomerRegisterRequestPageHandler@60(VAR CustomerRegister@1000 : TestRequestPage 103);
    VAR
      ShowAmountLCY@1001 : Variant;
      EntryNo@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ShowAmountLCY);
      LibraryVariableStorage.Dequeue(EntryNo);
      CustomerRegister.ShowAmountsInLCY.SETVALUE(ShowAmountLCY);
      CustomerRegister."G/L Register".SETFILTER("To Entry No.",FORMAT(EntryNo));
      CustomerRegister.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CustomerDetailTrialBalanceRequestPageHandler@53(VAR CustomerDetailTrialBal@1001 : TestRequestPage 104);
    VAR
      ShowAmountLCY@1000 : Variant;
      SetPrintOnlyOnePerPage@1003 : Variant;
      SetExcludeBalanceOnly@1002 : Variant;
      AccountNo@1004 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ShowAmountLCY);
      LibraryVariableStorage.Dequeue(SetPrintOnlyOnePerPage);
      LibraryVariableStorage.Dequeue(SetExcludeBalanceOnly);
      LibraryVariableStorage.Dequeue(AccountNo);
      CustomerDetailTrialBal.ShowAmountsInLCY.SETVALUE(ShowAmountLCY);
      CustomerDetailTrialBal.NewPageperCustomer.SETVALUE(SetPrintOnlyOnePerPage);
      CustomerDetailTrialBal.ExcludeCustHaveaBalanceOnly.SETVALUE(SetExcludeBalanceOnly);
      CustomerDetailTrialBal.Customer.SETFILTER("No.",AccountNo);
      CustomerDetailTrialBal.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CustomerItemSalesRequestPageHandler@85(VAR CustomerItemSales@1000 : TestRequestPage 113);
    VAR
      SellToCustomerNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(SellToCustomerNo);
      CustomerItemSales.Customer.SETFILTER("No.",SellToCustomerNo);
      CustomerItemSales.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CustomerSalesListRequestPageHandler@84(VAR CustomerSalesList@1000 : TestRequestPage 119);
    VAR
      CustomerNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CustomerNo);
      CustomerSalesList.Customer.SETFILTER("No.",CustomerNo);
      CustomerSalesList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CustomerDocumentNosRequestPageHandler@95(VAR CustomerDocumentNos@1001 : TestRequestPage 128);
    VAR
      CustomerNo@1000 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(CustomerNo);
      CustomerDocumentNos."Cust. Ledger Entry".SETFILTER("Customer No.",CustomerNo);
      CustomerDocumentNos.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE CustomerSummaryAgingRequestPageHandler@81(VAR CustomerSummaryAging@1000 : TestRequestPage 105);
    BEGIN
      CustomerSummaryAging.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE StatementReportRequestPageHandler@71(VAR Statement@1000 : TestRequestPage 116);
    BEGIN
      Statement.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName)
    END;

    LOCAL PROCEDURE VerifySalesInvoiceVATAmountInLCY@134(DocumentNo@1000 : Code[20]);
    VAR
      VATEntry@1001 : Record 254;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.GetLastRow;
      VerifySalesReportVATAmount(VATEntry."Document Type"::Invoice,DocumentNo,-1);
    END;

    [ModalPageHandler]
    PROCEDURE CreateToDoPageHandler@176(VAR CreateToDo@1000 : Page 5097;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::LookupOK;
    END;

    [RequestPageHandler]
    PROCEDURE SalesShipmentReportHandler@350(VAR SalesShipment@1000 : TestRequestPage 208);
    BEGIN
      SalesShipment.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHSalesInvoice@191(VAR SalesInvocie@1000 : TestRequestPage 206);
    BEGIN
      SalesInvocie.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHSalesCreditMemo@113(VAR SalesCreditMemo@1000 : TestRequestPage 207);
    BEGIN
      SalesCreditMemo.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RequestPageSalesCreditMemo@138(VAR SalesCreditMemo@1000 : TestRequestPage 207);
    BEGIN
      SalesCreditMemo.SAVEASEXCEL(LibraryReportValidation.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHSalesQuote@121(VAR SalesQuote@1000 : TestRequestPage 204);
    VAR
      NoOfCopies@1006 : Variant;
      InternalInfo@1005 : Variant;
      Archived@1004 : Variant;
      LogInteraction@1003 : Variant;
      Print@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(NoOfCopies);
      LibraryVariableStorage.Dequeue(InternalInfo);
      LibraryVariableStorage.Dequeue(Archived);
      LibraryVariableStorage.Dequeue(LogInteraction);
      LibraryVariableStorage.Dequeue(Print);

      SalesQuote.NoOfCopies.SETVALUE(NoOfCopies);
      SalesQuote.ShowInternalInfo.SETVALUE(InternalInfo);
      SalesQuote.ArchiveDocument.SETVALUE(Archived);
      SalesQuote.LogInteraction.SETVALUE(LogInteraction);
      SalesQuote.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    LOCAL PROCEDURE VerifySalesCreditMemoVATAmountInLCY@135(DocumentNo@1000 : Code[20]);
    VAR
      VATEntry@1002 : Record 254;
    BEGIN
      WITH LibraryReportDataset DO BEGIN
        LoadDataSetFile;
        MoveToRow(RowCount - 1);
      END;

      VerifySalesReportVATAmount(VATEntry."Document Type"::"Credit Memo",DocumentNo,1);
    END;

    LOCAL PROCEDURE VerifySalesQuoteVATAmountInLCY@128(DocumentNo@1000 : Code[20];VATAmount@1001 : Decimal;VATBaseAmount@1003 : Decimal);
    BEGIN
      VerifySalesInvoiceVATAmountInLCY(DocumentNo);
      LibraryReportDataset.AssertCurrentRowValue(VALVATAmountLCYTok,VATAmount);
      LibraryReportDataset.AssertCurrentRowValue(VALVATBaseLCYTok,VATBaseAmount);
    END;

    LOCAL PROCEDURE VerifySalesReportVATAmount@126(DocumentType@1000 : Option;DocumentNo@1002 : Code[20];Sign@1003 : Integer);
    VAR
      VATEntry@1001 : Record 254;
    BEGIN
      WITH VATEntry DO BEGIN
        SETRANGE(Type,Type::Sale);
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        FINDLAST;
        LibraryReportDataset.AssertCurrentRowValue(VALVATAmountLCYTok,Sign * Amount);
        LibraryReportDataset.AssertCurrentRowValue(VALVATBaseLCYTok,Sign * Base);
      END;
    END;

    LOCAL PROCEDURE VerifyCustomerOrderSummarySalesAmount@197(VAR SalesHeader@1003 : Record 36;VAR SalesLine@1002 : Record 37);
    VAR
      CurrencyExchangeRate@1001 : Record 330;
      ExpectedAmount@1000 : Decimal;
    BEGIN
      ExpectedAmount := CurrencyExchangeRate.ExchangeAmtFCYToLCY(
          WORKDATE,SalesLine."Currency Code",SalesLine."Unit Price",SalesHeader."Currency Factor");

      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Cust',SalesHeader."Sell-to Customer No.");

      Assert.IsTrue(LibraryReportDataset.GetNextRow,STRSUBSTNO(RowNotFoundErr,'No_Cust',SalesHeader."Sell-to Customer No."));
      LibraryReportDataset.AssertCurrentRowValue('SalesOrderAmountLCY',ExpectedAmount);
    END;

    LOCAL PROCEDURE GetSalesQuoteReportVATAmounts@119(VAR VATAmount@1002 : Decimal;VAR VATBaseAmount@1003 : Decimal);
    VAR
      ElementValue@1000 : Variant;
    BEGIN
      WITH LibraryReportDataset DO BEGIN
        LoadDataSetFile;
        GetLastRow;

        FindCurrentRowValue(VALVATAmountLCYTok,ElementValue);
        VATAmount := ElementValue;
        FindCurrentRowValue(VALVATBaseLCYTok,ElementValue);
        VATBaseAmount := ElementValue
      END;
    END;

    BEGIN
    {
      // [FEATURE] [Sales] [Report]
      Unsupported version tags:
      NO: Unable to Execute (TFS ID: 47908)

      Check the functionality of Sales and Customer Report:
      1. Test Customer Trial Balance Report.
      2. Test Customer Order Details Report.
      3. Test Customer Order Details Report for LCY.
      4. Test Customer Order Summary Report.
      5. Test Customer Order Summary Report for LCY.
      6. Test Customer Summary Aging Simp Report.
      7. Test Customer Top 10 List Report with SalesLCY Option.
      8. Test Customer Top 10 List Report with BalanceLCY Option.
      9. Check value of Credit Limit LCY in Customer List matches the value of Credit Limit LCY in corresponding Customer.
      10. Check value of Original Amount in Customer Register matches the value of Amount in corresponding General Journal Line with
          Currency and Without Currency.
      11. Check value of Amount in Customer Detail Trial Balance matches the value of Amount in corresponding General Journal Line with
          Currency and Without Currency.
      12. Check value of Balance in Customer Summary Aging matches the value of Amount in corresponding General Journal Line with
          Currency and Without Currency.
      13. Check value of Remaining Amount in Customer Detailed Aging matches the value of Amount in corresponding General Journal Line.
      14. Check that correct Amount is present on Customer Item Sales Report after posting Sales Order for a Customer.
      15. Check that correct Amount is present on Customer Sales List Report after posting Sales Order for a Customer.
      16. Check that correct Address is present on Customer Sales List Report after posting Sales Order for a Customer.
      17. Check that correct Customer is present on Customer Document Numbers Report after posting Sales Order for a Customer.
      18. Verify Overdue Entries in Statement Report when Print Overdue Entries option is True.
      19. Verify Reversed Entries in Statement Report When Print Reversed Entries option is True.
      20. Verify Unapplied Entries in Statement Report when Print Unapplied Entries option is True.
      21. Verify Statement Report when Include Aging Band option is True.
      22. Verify Statement Report when Print Overdue Entries, Print Reversed Entries, Print Unapplied Entries and Include Aging Band
          Option are all set to True.
      23. Verify Error in Statement Report when Date filter is not specified.
      24. Check Saved Sales Order Report to Verify that program generates report.
      25. Check the Value of Total(LCY) in Customer Summary Aging Report when Show Amount LCY is TRUE.
      26. Check the Value of Total(LCY) in Customer Summary Aging Report when Show Amount LCY is FALSE.
      27. Check the Value of Total(LCY) in Customer Order Report when Show Amount LCY is FALSE and Currency Filter is blank.
      28. Check the Value of Total(LCY) and Currency Code in Customer Order Report when Show Amount LCY is FALSE and Currency Filter is not blank.
      29. Verify that the entries are sorted according to Due Date in Customer Detailed Aging.
      30. Verify that the first line in detailed entries displays only once.
      31. Verify that the Phone No. displayed correctly in Customer Detailed Aging Report.
      32. Verify the value of Total in Customer Order Summary Report is equal to the total value of Amount in corresponding Sales Lines.
      33. Verify the value of Total LCY in Customer Order Summary Report is equal to the total LCY value of Amount in corresponding Sales Lines.
      34. Check the Value of Total in Customer Order Detail Report with rounding.
      35. Check the Amount of a duration in Customer Order Summary Report with rounding.
      36. Check the Value of Outstanding Orders and Total for Released Orders in Customer Order Detail Report with rounding.
      37. Check the Amount of a duration for Released Orders in Customer Order Summary Report with rounding.
      38. Check the Language Code should be translated for Assembly Component items in Sales Report 206 (Sales - Invoice)
      39. Check the Language Code should be translated for Assembly Component items in Sales Report 208 (Sales - Shipment)

        ------------------------------------------------------
          Test Function Name                      TFS ID
        ------------------------------------------------------
        CustomerTrialBalanceReport                XXXXXX
        OrderDetail,OrderDetailInLCY              139319
        OrderSummary,OrderSummaryLCY              139318
        SummaryAgingSimp                          139320
        TopTenListSalesLCY,TopTenListBalanceLCY   139380

        Covers Test Cases for WI - 230089
        -------------------------------------------------------------------------
        Test Function Name                                        TFS ID
        -------------------------------------------------------------------------
        CustomerList                                              139378
        CustomerRegister,CustomerRegisterWithLCY                  139379
        CustomerDetailTrialBalance,CustomerDetailTrialBalanceLCY  139315
        CustomerSummaryAging,CustomerSummaryAgingWithLCY          139316
        CustomerDetailedAging                                     139317

        Covers Test Cases for WI - 230091
        -------------------------------------------------------------------------
        Test Function Name                                        TFS ID
        -------------------------------------------------------------------------
        CustomerItemSales                                         139382
        CustomerSalesListWithAmount,CustomerSalesListWithAddress  139385
        CustomerDocumentNos                                       139431

        Covers Test Cases for WI - 242654
        -------------------------------------------------------------------------------------
        Test Function Name                                                        TFS ID
        -------------------------------------------------------------------------------------
        OverdueEntriesStatementReport, ReversedEntriesStatementReport,           126227, 126228
        UnappliedEntryStatementReport, PrintAgingBandStatementReport,
        CustomerStatementReport, DateFilterErrorStatementReport

        TFS_TS_ID =  264067
        Covers Test Cases:
        --------------------------------------------------------------------------------------
        Test Function Name                                                            TFS ID
        --------------------------------------------------------------------------------------
        OrderConfirmationReportWithPostingDateBlankOnSalesOrder                      255648

        TFS_TS_ID = 294879
        Covers Test Cases:
        --------------------------------------------------------------------------------------------------------
        Test Function Name                                                                            TFS ID
        --------------------------------------------------------------------------------------------------------
        CustomerSummaryAgingWithShowAmountInLCYTrue,CustomerSummaryAgingWithShowAmountInLCYFalse       294877

        TFS_TS_ID = 300679
        Covers Test Cases:
        --------------------------------------------------------------------------------------------------------
        Test Function Name                                                                            TFS ID
        --------------------------------------------------------------------------------------------------------
        CustomerOrderSummaryWithoutCurrencyFilter,                                                    300679
        CustomerOrderSummaryWithCurrencyFilter

        TFS_TS_ID = 324411
        Covers Test Cases:
        --------------------------------------------------------------------------------------------------------
        Test Function Name                                                                            TFS ID
        --------------------------------------------------------------------------------------------------------
        CustomerDetailedAgingReportForSorting, CustInfoInCustomerDetailedAgingReport                   301738
        CustomerDetailedAgingReportForDuplicateRow                                                     304554

        Covers Tests Cases For Sicily Bug
        --------------------------------------------------------------------------------------------------------
        Test Function Name                                                                            TFS ID
        --------------------------------------------------------------------------------------------------------
        TotalValueInCustomerOrderSummaryReport                                                        52470
        TotalValueForLCYInCustomerOrderSummaryReport                                                  52470

        Covers Test cases for Sicily Code Defect
        ------------------------------------------------------------------------------------------------------------
        Test Function                                                                                  TFS ID
        ------------------------------------------------------------------------------------------------------------
        CustomerOrderDetailReportWithTotal                                                             52695
        CustomerOrderSummaryReportWithShowAmountTrue                                                   52695

        Covers Test cases for Sicily Code Defect                                                       TFS ID
        --------------------------------------------------------------------------------------------------------
        CustomerOrderDetailReportWithReleasedDocument                                                  55687
        CustomeOrderSummaryReportWithReleasedDocument                                                  55687

        Covers Tests Cases For NAVSE Bug
        --------------------------------------------------------------------------------------------------------
        Test Function Name                                                                             TFS ID
        --------------------------------------------------------------------------------------------------------
        LanguageCodeForAssemblyItemsInSalesInvoiceReport                                               97724
        LanguageCodeForAssemblyItemsInSalesShipmentReport                                              97724
    }
    END.
  }
}

