OBJECT Codeunit 134804 RED Test Unit for Purch Doc
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1005 : Codeunit 131300;
      LibraryUtility@1000 : Codeunit 131000;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryInventory@1002 : Codeunit 132201;
      LibraryPurchase@1006 : Codeunit 130512;
      LibrarySetupStorage@1014 : Codeunit 131009;
      LibraryVariableStorage@1010 : Codeunit 131004;
      Assert@1040 : Codeunit 130000;
      CalcMethod@1008 : 'Straight-Line,Equal per Period,Days per Period,User-Defined';
      StartDate@1007 : 'Posting Date,Beginning of Period,End of Period,Beginning of Next Period';
      PurchDocType@1012 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Shipment,Posted Invoice,Posted Credit Memo,Posted Return Receipt';
      CopyDocType@1031 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      isInitialized@1003 : Boolean;
      NoDeferralScheduleErr@1004 : TextConst '@@@="%1=The item number of the sales transaction line, %2=The Deferral Template Code";ENU=You must create a deferral schedule because you have specified the deferral code %2 in line %1.';
      ZeroDeferralAmtErr@1019 : TextConst '@@@="%1=The item number of the sales transaction line, %2=The Deferral Template Code";ENU=Deferral amounts cannot be 0. Line: %1, Deferral Template: %2.';
      ConfirmCallOnceErr@1011 : TextConst 'ENU=Confirm should be called once.';
      DeferralLineQst@1009 : TextConst 'ENU=do you want to update the deferral schedules for the lines with this date?';

    [Test]
    PROCEDURE TestPurchaseOrderWithItem@1();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      DeferralTemplateCode@1002 : Code[10];
      ItemNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Deferral Code]
      // [SCENARIO 127770] Annie can apply a deferral template to a Purchse Order
      // [GIVEN] User has assigned a default deferral code to an Item
      Initialize;
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [WHEN] Creating Purchase Line for Item should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [THEN] The Deferral Code was assigned to the Purchase Line
      PurchaseLine.TESTFIELD("Deferral Code",DeferralTemplateCode);

      // [THEN] The deferral schedule was created
      ValidateDeferralSchedule(
        PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.",
        DeferralTemplateCode,PurchaseHeader."Posting Date",PurchaseLine.GetDeferralAmount,2);
    END;

    [Test]
    PROCEDURE TestPurchaseInvoiceWithGLAccount@10();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      GLAccount@1004 : Record 15;
      DeferralTemplateCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [Deferral Code]
      // [SCENARIO 127770] Annie can apply a deferral template to a Purchase Invoice
      // [GIVEN] User has created a deferral template
      DeferralTemplateCode := CreateDeferralCode(CalcMethod::"Straight-Line",StartDate::"Posting Date",3);

      // [GIVEN] User has assigned a default deferral code to a GL Account
      CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Default Deferral Template Code",DeferralTemplateCode);
      GLAccount.MODIFY;

      // [WHEN] Creating Purchase Line for GL Account should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::"G/L Account",GLAccount."No.",SetDateDay(1,WORKDATE));

      // [THEN] The Deferral Code was assigned to the Purchase Line
      PurchaseLine.TESTFIELD("Deferral Code",DeferralTemplateCode);

      // [THEN] The deferral schedule was created
      ValidateDeferralSchedule(
        PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.",
        DeferralTemplateCode,PurchaseHeader."Posting Date",PurchaseLine.GetDeferralAmount,3);
    END;

    [Test]
    PROCEDURE TestPurchaseCreditMemoWithGLAccount@11();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      GLAccount@1004 : Record 15;
      DeferralTemplateCode@1000 : Code[10];
    BEGIN
      // [FEATURE] [Deferral Code]
      // [SCENARIO 127773] Annie can apply a deferral template to a Purchase Credit Memo
      // [GIVEN] User has created a deferral template
      DeferralTemplateCode := CreateDeferralCode(CalcMethod::"Equal per Period",StartDate::"Posting Date",3);

      // [GIVEN] User has assigned a default deferral code to a GL Account
      CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Default Deferral Template Code",DeferralTemplateCode);
      GLAccount.MODIFY;

      // [WHEN] Creating Purchase Line for GL Account should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::"Credit Memo",PurchaseLine.Type::"G/L Account",GLAccount."No.",SetDateDay(1,WORKDATE));

      // [THEN] The Deferral Code was assigned to the Purchase Line
      PurchaseLine.TESTFIELD("Deferral Code",DeferralTemplateCode);

      // [THEN] The deferral schedule was created
      ValidateDeferralSchedule(
        PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.",
        DeferralTemplateCode,PurchaseHeader."Posting Date",PurchaseLine.GetDeferralAmount,3);
    END;

    [Test]
    PROCEDURE TestPurchaseReturnOrderWithItem@12();
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      DeferralHeader@1000 : Record 1701;
      DeferralTemplateCode@1002 : Code[10];
      ItemNo@1005 : Code[20];
      DeferralAmount@1001 : Decimal;
    BEGIN
      // [FEATURE] [Deferral Code] [Returns Deferral Start Date]
      // [SCENARIO 127773] Annie can apply a deferral template to a Purchase Return
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Days per Period",StartDate::"Beginning of Period",4);

      // [WHEN] Creating Purchase Line for Item should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::"Return Order",PurchaseLine.Type::Item,ItemNo,SetDateDay(10,WORKDATE));

      // [THEN] The Deferral Code was assigned to the Purchase Line
      PurchaseLine.TESTFIELD("Deferral Code",DeferralTemplateCode);

      // [THEN] The deferral schedule was created
      DeferralHeader.GET(GetPurchDeferralDocType,'','',
        PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      DeferralHeader.TESTFIELD("Deferral Code",DeferralTemplateCode);
      DeferralHeader.TESTFIELD("Start Date",
        GetStartDate(StartDate::"Beginning of Period",PurchaseHeader."Posting Date"));
      DeferralHeader.TESTFIELD("Amount to Defer",PurchaseLine.GetDeferralAmount);
      DeferralHeader.TESTFIELD("No. of Periods",4);

      // [THEN] Returns Deferral Start Date is set correctly
      ValidateReturnsDeferralStartDate(PurchaseLine."Document Type",
        PurchaseLine."Document No.",PurchaseLine."Line No.",PurchaseLine."Returns Deferral Start Date",DeferralAmount);

      DeferralHeader.TESTFIELD("Amount to Defer",DeferralAmount);
    END;

    [Test]
    PROCEDURE TestPurchaseReturnOrderWithItemReturnStartDate@85();
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      DeferralHeader@1002 : Record 1701;
      DeferralTemplateCode@1000 : Code[10];
      ItemNo@1005 : Code[20];
      DeferralAmount@1001 : Decimal;
    BEGIN
      // [FEATURE] [Deferral Code] [Returns Deferral Start Date]
      // [SCENARIO 127773] Annie can apply a deferral template and update the Purchase Line to use a separate deferral start date
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Days per Period",StartDate::"End of Period",4);

      // [WHEN] Creating Purchase Line for Item should default deferral code and update the Purchase Line Return Deferral Start Date
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::"Return Order",PurchaseLine.Type::Item,ItemNo,SetDateDay(10,WORKDATE));
      PurchaseLine.VALIDATE("Returns Deferral Start Date",SetDateDay(15,WORKDATE));
      PurchaseLine.MODIFY;

      // [THEN] The Deferral Code was assigned to the Purchase Line
      PurchaseLine.TESTFIELD("Deferral Code",DeferralTemplateCode);

      // [THEN] The deferral schedule was created using the Purchase Line Return Deferral Start Date
      DeferralHeader.GET(GetPurchDeferralDocType,'','',
        PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      DeferralHeader.TESTFIELD("Deferral Code",DeferralTemplateCode);
      DeferralHeader.TESTFIELD("Start Date",PurchaseLine."Returns Deferral Start Date");
      DeferralHeader.TESTFIELD("Amount to Defer",PurchaseLine.GetDeferralAmount);
      DeferralHeader.TESTFIELD("No. of Periods",4);

      // [THEN] Returns Deferral Start Date is set correctly
      ValidateReturnsDeferralStartDate(PurchaseLine."Document Type",
        PurchaseLine."Document No.",PurchaseLine."Line No.",PurchaseLine."Returns Deferral Start Date",DeferralAmount);

      DeferralHeader.TESTFIELD("Amount to Defer",DeferralAmount);
    END;

    [Test]
    PROCEDURE TestPurchaseQuoteWithItem@13();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      DeferralTemplateCode@1000 : Code[10];
      ItemNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Deferral Code]
      // [SCENARIO 127770] Deferral template does not default on Quote
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [WHEN] Creating Purchase Line for Item on a Quote, the deferral code should not default
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Quote,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [THEN] The Deferral Code was not assigned to the Purchase Line
      PurchaseLine.TESTFIELD("Deferral Code",'');

      // [THEN] The deferral schedule was not created
      ValidateDeferralScheduleDoesNotExist(
        PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
    END;

    [Test]
    PROCEDURE TestPurchaseBlanketOrderWithItem@14();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      DeferralTemplateCode@1000 : Code[10];
      ItemNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Deferral Code]
      // [SCENARIO 127770] Deferral template does not default on Quote
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [WHEN] Creating Purchase Line for Item on a Quote, the deferral code should not default
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::"Blanket Order",PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [THEN] The Deferral Code was not assigned to the Purchase Line
      PurchaseLine.TESTFIELD("Deferral Code",'');

      // [THEN] The deferral schedule was not created
      ValidateDeferralScheduleDoesNotExist(
        PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
    END;

    [Test]
    PROCEDURE TestPurchaseOrderDeferralSchedule@113();
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      DeferralTemplateCode@1002 : Code[10];
      ItemNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Deferral Code]
      // [SCENARIO 379200] Amount in Deferral Schedule should match days in period when Calc. Method "Days per Period" is used
      // [GIVEN] Deferral Template with Calc. Method "Days per Period"
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Days per Period",StartDate::"Posting Date",4);

      // [WHEN] Create Purchase Line with deferral code
      CreatePurchDocWithLine(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item,ItemNo,
        CALCDATE('<-CM>',WORKDATE) + LibraryRandom.RandInt(10));

      // [THEN] Amount in Deferral Line per each period corresponds to days' count in period
      VerifyDeferralScheduleAmounts(PurchaseLine);
    END;

    [Test]
    PROCEDURE TestChangingPurchaseLineType@64();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      DeferralTemplateCode@1000 : Code[10];
      AccNo@1001 : Code[20];
    BEGIN
      // [FEATURE] [Document Type]
      // [SCENARIO 127770] Changing the Purchase Line Type removes the deferral code
      // [GIVEN] User has created a GL Account and assigned a default deferral code to it
      CreateGLAccountWithDefaultDeferralCode(DeferralTemplateCode,AccNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);

      // [GIVEN] Creating Purchase Line for GL Account defaults deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::"G/L Account",AccNo,SetDateDay(1,WORKDATE));

      // [WHEN] Changing the Purchase Line Type
      PurchaseLine.VALIDATE(Type,PurchaseLine.Type::Item);
      PurchaseLine.MODIFY(TRUE);

      // [THEN] The Deferral Code was removed from the Purchase Line
      PurchaseLine.TESTFIELD("Deferral Code",'');

      // [THEN] The deferral schedule was removed
      ValidateDeferralScheduleDoesNotExist(
        PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
    END;

    [Test]
    PROCEDURE TestChangingPurchaseLineNo@68();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      Item@1002 : Record 27;
      DeferralTemplateCode@1003 : Code[10];
      AccNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [No.]
      // [SCENARIO 127770] Changing Purchase Line No. to an Item that does not have a default deferral code removes deferral schedule
      // [GIVEN] User has created a GL Account and assigned a default deferral code to it
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,AccNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);

      // [GIVEN] Creating Purchase Line for Item defaults deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::Item,AccNo,SetDateDay(1,WORKDATE));

      // [WHEN] Changing the Purchase Line No. to an Item that does not have a default deferral code
      CLEAR(Item);
      CreateItem(Item);
      Item.VALIDATE("Unit Price",500.0);
      Item.MODIFY(TRUE);

      PurchaseLine.VALIDATE("No.",Item."No.");
      PurchaseLine.MODIFY(TRUE);

      // [THEN] The Deferral Code was removed from the Purchase Line
      PurchaseLine.TESTFIELD("Deferral Code",'');

      // [THEN] The deferral schedule was removed
      ValidateDeferralScheduleDoesNotExist(
        PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
    END;

    [Test]
    PROCEDURE TestClearingPurchaseLineDeferralCode@69();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      DeferralTemplateCode@1002 : Code[10];
      AccNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Deferral Code]
      // [SCENARIO 127770] Clearing the Deferral Code on a line removes the deferral schedule
      // [GIVEN] User has created a GL Account and assigned a default deferral code to it
      CreateGLAccountWithDefaultDeferralCode(DeferralTemplateCode,AccNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Creating Purchase Line for GL Account defaults deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Order,PurchaseLine.Type::"G/L Account",AccNo,SetDateDay(1,WORKDATE));

      // [WHEN] Clearing the deferral code from the Purchase Line
      PurchaseLine.VALIDATE("Deferral Code",'');

      // [THEN] The deferral schedule was removed
      ValidateDeferralScheduleDoesNotExist(
        PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.")
    END;

    [Test]
    PROCEDURE TestDeletingPurchaseLine@66();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      DeferralTemplateCode@1002 : Code[10];
      AccNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Delete Line]
      // [SCENARIO 127770] Deleting a Purchase Line removes the deferral schedule
      // [GIVEN] User has created a GL Account and assigned a default deferral code to it
      CreateGLAccountWithDefaultDeferralCode(DeferralTemplateCode,AccNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);

      // [GIVEN] Creating Purchase Line for GL Account defaults deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::"G/L Account",AccNo,SetDateDay(1,WORKDATE));

      // [WHEN] Delete the Purchase Line
      PurchaseLine.DELETE(TRUE);

      // [THEN] The deferral schedule was removed
      ValidateDeferralScheduleDoesNotExist(
        PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
    END;

    [Test]
    PROCEDURE TestCopyOrderWithDeferral@3();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseHeaderDest@1003 : Record 38;
      PurchaseLineDest@1002 : Record 39;
      DeferralHeader@1004 : Record 1701;
      DeferralTemplateCode@1005 : Code[10];
      ItemNo@1006 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document]
      // [SCENARIO 127770] Annie can copy a document and the deferrals are copied
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      Initialize;

      // [GIVEN] Creating Purchase Line for Item should default deferral code - then modify the amounts
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FIND('-');
      ModifyDeferral(PurchaseLine,DeferralHeader."Calc. Method"::"Equal per Period",3,
        PurchaseLine.GetDeferralAmount * 0.8,SetDateDay(15,WORKDATE));

      // [WHEN] Create New purchase invoice document and copy the existing one with recalculate unmarked
      CreatePurchHeaderForVendor(PurchaseHeaderDest,
        PurchaseHeaderDest."Document Type"::Invoice,SetDateDay(1,WORKDATE),PurchaseHeader."Buy-from Vendor No.");
      CopyDoc(PurchaseHeaderDest,PurchaseHeader."Document Type",PurchaseHeader."No.",TRUE,FALSE);

      // [THEN] The deferral schedule was copied from the existing line
      FindPurchLine(PurchaseHeaderDest,PurchaseLineDest);
      PurchaseLineDest.TESTFIELD("Deferral Code",DeferralTemplateCode);
      PurchaseLineDest.TESTFIELD("Returns Deferral Start Date",0D);
      VerifyDeferralsAreEqual(PurchaseLine,PurchaseLineDest);
    END;

    [Test]
    PROCEDURE TestCopyPostedInvoiceWithDeferral@4();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseHeaderDest@1003 : Record 38;
      PurchaseLineDest@1002 : Record 39;
      PurchInvHeader@1004 : Record 122;
      PurchInvLine@1005 : Record 123;
      DeferralTemplateCode@1006 : Code[10];
      ItemNo@1007 : Code[20];
      DocNo@1008 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document]
      // [SCENARIO 127770] Annie can copy a posted document and the deferrals are copied
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      Initialize;

      // [GIVEN] Create and post the purchase invoice with the default deferral
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      PurchInvHeader.GET(DocNo);

      // [WHEN] Create New purchase order document and copy the existing one
      CreatePurchHeaderForVendor(PurchaseHeaderDest,
        PurchaseHeaderDest."Document Type"::Order,SetDateDay(1,WORKDATE),PurchInvHeader."Buy-from Vendor No.");
      CopyDoc(PurchaseHeaderDest,CopyDocType::"Posted Invoice",PurchInvHeader."No.",TRUE,FALSE);

      // [THEN] The deferral schedule was copied from the existing line
      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
      PurchInvLine.FINDFIRST;

      FindPurchLine(PurchaseHeaderDest,PurchaseLineDest);
      IF PurchaseLineDest."No." = '' THEN
        PurchaseLineDest.NEXT;
      PurchaseLineDest.TESTFIELD("Deferral Code",DeferralTemplateCode);
      PurchaseLineDest.TESTFIELD("Returns Deferral Start Date",0D);
      VerifyPostedDeferralsAreEqual(PurchInvLine,PurchaseLineDest);
    END;

    [Test]
    PROCEDURE TestCopyPostedInvoiceWithDeferralToReturnOrder@25();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseHeaderDest@1003 : Record 38;
      PurchaseLineDest@1002 : Record 39;
      PurchInvHeader@1004 : Record 122;
      PurchInvLine@1005 : Record 123;
      DeferralTemplateCode@1006 : Code[10];
      ItemNo@1007 : Code[20];
      DocNo@1008 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document] [Returns Deferral Start Date]
      // [SCENARIO 127770] Annie can copy a posted invoice to a return order
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,
        CalcMethod::"Straight-Line",StartDate::"Beginning of Next Period",2);
      Initialize;

      // [GIVEN] Create and post the purchase invoice with the default deferral
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      PurchInvHeader.GET(DocNo);

      // [WHEN] Create New purchase order document and copy the existing one
      CreatePurchHeaderForVendor(PurchaseHeaderDest,
        PurchaseHeaderDest."Document Type"::"Return Order",SetDateDay(1,WORKDATE),PurchInvHeader."Buy-from Vendor No.");
      CopyDoc(PurchaseHeaderDest,CopyDocType::"Posted Invoice",PurchInvHeader."No.",TRUE,FALSE);

      // [THEN] The deferral schedule was copied from the existing line
      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
      PurchInvLine.FINDFIRST;

      FindPurchLine(PurchaseHeaderDest,PurchaseLineDest);
      IF PurchaseLineDest."No." = '' THEN
        PurchaseLineDest.NEXT;
      PurchaseLineDest.TESTFIELD("Deferral Code",DeferralTemplateCode);

      // [THEN] The Returns Deferral Start Date was assigned a start date based on header posting date
      PurchaseLineDest.TESTFIELD("Returns Deferral Start Date",
        GetStartDate(StartDate::"Beginning of Next Period",PurchaseHeader."Posting Date"));

      VerifyPostedDeferralsAreEqual(PurchInvLine,PurchaseLineDest);
    END;

    [Test]
    PROCEDURE TestCopyOrderWithDeferralToQuote@20();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseHeaderDest@1003 : Record 38;
      PurchaseLineDest@1002 : Record 39;
      DeferralTemplateCode@1004 : Code[10];
      ItemNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document]
      // [SCENARIO 127770] Copy an order with deferrals to a quote does not default the deferrals on a quote
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);
      Initialize;

      // [GIVEN] Creating Purchase Line for Item should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [WHEN] Create New quote document and copy the existing one
      CreatePurchHeaderForVendor(PurchaseHeaderDest,
        PurchaseHeaderDest."Document Type"::Quote,SetDateDay(1,WORKDATE),PurchaseHeader."Buy-from Vendor No.");
      CopyDoc(PurchaseHeaderDest,PurchaseHeader."Document Type",PurchaseHeader."No.",TRUE,FALSE);

      // [THEN] The Deferral Code was not assigned to the Quote Purchase Line
      FindPurchLine(PurchaseHeaderDest,PurchaseLineDest);
      PurchaseLineDest.TESTFIELD("Deferral Code",'');
      PurchaseLineDest.TESTFIELD("Returns Deferral Start Date",0D);

      // [THEN] The deferral schedule was not created
      ValidateDeferralScheduleDoesNotExist(
        PurchaseLineDest."Document Type",PurchaseLineDest."Document No.",PurchaseLineDest."Line No.");
    END;

    [Test]
    PROCEDURE TestCopyQuoteToOrderDefaultsDeferral@30();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseHeaderDest@1003 : Record 38;
      PurchaseLineDest@1002 : Record 39;
      DeferralTemplateCode@1004 : Code[10];
      ItemNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document]
      // [SCENARIO 127770] Annie can copy a Quote to a different type and the deferrals are defaulted from the item
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);
      Initialize;

      // [GIVEN] Creating Purchase Line for Item on Quote does not default the deferral
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Quote,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [WHEN] Create New purchase Order and copy the existing Quote
      CreatePurchHeaderForVendor(PurchaseHeaderDest,
        PurchaseHeaderDest."Document Type"::Order,SetDateDay(1,WORKDATE),PurchaseHeader."Buy-from Vendor No.");
      CopyDoc(PurchaseHeaderDest,PurchaseHeader."Document Type",PurchaseHeader."No.",TRUE,FALSE);

      // [THEN] The Deferral Code was assigned to the Order Purchase Line
      FindPurchLine(PurchaseHeaderDest,PurchaseLineDest);
      PurchaseLineDest.TESTFIELD("Deferral Code",DeferralTemplateCode);
      PurchaseLineDest.TESTFIELD("Returns Deferral Start Date",0D);

      // [THEN] The deferral schedule was created
      ValidateDeferralSchedule(
        PurchaseLineDest."Document Type",PurchaseLineDest."Document No.",PurchaseLineDest."Line No.",
        DeferralTemplateCode,PurchaseHeaderDest."Posting Date",PurchaseLineDest.GetDeferralAmount,3);
    END;

    [Test]
    PROCEDURE TestCopyOrderWithDeferralToReturnOrder@104();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseHeaderDest@1003 : Record 38;
      PurchaseLineDest@1002 : Record 39;
      DeferralTemplateCode@1004 : Code[10];
      ItemNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document] [Returns Deferral Start Date]
      // [SCENARIO 127732] Copy an order with deferrals to a Return Order
      // defaults the Returns Deferral Start Date from the Return Order
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"End of Period",3);
      Initialize;

      // [GIVEN] Creating Purchase Line for Item should default deferral code - order uses day = 1
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [WHEN] Create New purchase document and copy the existing one - Return uses day = 15
      CreatePurchHeaderForVendor(PurchaseHeaderDest,
        PurchaseHeaderDest."Document Type"::"Return Order",SetDateDay(15,WORKDATE),PurchaseHeader."Buy-from Vendor No.");
      CopyDoc(PurchaseHeaderDest,PurchaseHeader."Document Type",PurchaseHeader."No.",FALSE,FALSE);

      // [THEN] The Deferral Code was assigned to the Return Order purchase line
      FindPurchLine(PurchaseHeaderDest,PurchaseLineDest);
      PurchaseLineDest.TESTFIELD("Deferral Code",DeferralTemplateCode);

      // [THEN] The Returns Deferral Start Date was assigned a start date based on header posting date
      PurchaseLineDest.TESTFIELD("Returns Deferral Start Date",
        GetStartDate(StartDate::"End of Period",PurchaseHeader."Posting Date"));
    END;

    [Test]
    PROCEDURE TestCopyReturnOrderWithDeferralToReturnOrder@105();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseHeaderDest@1003 : Record 38;
      PurchaseLineDest@1002 : Record 39;
      DeferralTemplateCode@1004 : Code[10];
      ItemNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Copy Document] [Returns Deferral Start Date]
      // [SCENARIO 127732] Copy Return order with deferrals defaults
      // the Returns Deferral Start Date from the original return order line
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,
        CalcMethod::"Straight-Line",StartDate::"Beginning of Next Period",3);
      Initialize;

      // [GIVEN] Creating Purchase Line for Item should default deferral code - order uses day = 1
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::"Return Order",PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;

      // [WHEN] Create New purchase document and copy the existing one - Return uses day = 15
      CreatePurchHeaderForVendor(PurchaseHeaderDest,
        PurchaseHeaderDest."Document Type"::"Return Order",SetDateDay(15,WORKDATE),PurchaseHeader."Buy-from Vendor No.");
      CopyDoc(PurchaseHeaderDest,PurchaseHeader."Document Type",PurchaseHeader."No.",FALSE,FALSE);

      // [THEN] The Deferral Code was assigned to the Return Order purchase line
      FindPurchLine(PurchaseHeaderDest,PurchaseLineDest);
      PurchaseLineDest.TESTFIELD("Deferral Code",DeferralTemplateCode);

      // [THEN] The Returns Deferral Start Date was assigned from the date on the original return order line
      PurchaseLineDest.TESTFIELD("Returns Deferral Start Date",PurchaseLine."Returns Deferral Start Date");
      PurchaseLineDest.TESTFIELD("Returns Deferral Start Date",
        GetStartDate(StartDate::"Beginning of Next Period",PurchaseHeader."Posting Date"));
    END;

    [Test]
    PROCEDURE TestArchiveOrderWithDeferral@40();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchLineArchive@1002 : Record 5110;
      DeferralHeader@1003 : Record 1701;
      ArchiveManagement@1006 : Codeunit 5063;
      DeferralTemplateCode@1004 : Code[10];
      ItemNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Archive Document]
      // [SCENARIO 127770] When a purchase Order is archived, the deferrals are archived along with it
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Creating Purchase Line for Item should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      ModifyDeferral(PurchaseLine,DeferralHeader."Calc. Method"::"Days per Period",4,
        PurchaseLine.GetDeferralAmount * 0.7,SetDateDay(12,WORKDATE));

      // [WHEN] Document is archive
      ArchiveManagement.StorePurchDocument(PurchaseHeader,FALSE);
      FindPurchLine(PurchaseHeader,PurchaseLine);
      FindPurchLineArchive(PurchaseHeader,PurchLineArchive);

      // [THEN] The deferrals were moved to the archive
      VerifyDeferralArchivesAreEqual(PurchLineArchive,PurchaseLine);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TestDeleteArchiveOrderWithDeferral@38();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchLineArchive@1003 : Record 5110;
      DeferralHeader@1004 : Record 1701;
      ArchiveManagement@1008 : Codeunit 5063;
      DeferralTemplateCode@1005 : Code[10];
      ItemNo@1006 : Code[20];
      DocNo@1007 : Code[20];
      LineNo@1000 : Integer;
    BEGIN
      // [FEATURE] [Delete Archive]
      // [SCENARIO 127770] Deletion of Purchase Order Archive should lead to deletion of archived deferral schedule
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Creating Purchase Line for Item should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      ModifyDeferral(PurchaseLine,DeferralHeader."Calc. Method"::"Days per Period",4,
        PurchaseLine.GetDeferralAmount * 0.7,SetDateDay(12,WORKDATE));

      // [GIVEN] Document is archived
      ArchiveManagement.StorePurchDocument(PurchaseHeader,FALSE);
      FindPurchLineArchive(PurchaseHeader,PurchLineArchive);
      DocNo := PurchLineArchive."Document No.";
      LineNo := PurchLineArchive."Line No.";

      // [GIVEN] Remove the purch Doc
      DeletePurchDoc(PurchaseHeader);

      // [WHEN] Remove the archives
      DeletePurchOrderArchive(DocNo);

      // [THEN] the archived deferral schedule was deleted
      ValidateDeferralArchiveScheduleDoesNotExist(PurchaseHeader."Document Type"::Order,DocNo,LineNo);
    END;

    [Test]
    PROCEDURE TestPostOrderWithDeferral@103();
    VAR
      PurchHeader@1001 : Record 38;
      PurchLine@1006 : Record 39;
      DeferralTemplateCode@1005 : Code[10];
      DocNo@1004 : Code[20];
      AccNo@1003 : Code[20];
      ItemNo@1000 : Code[20];
      AmtToDefer@1002 : Decimal;
    BEGIN
      // [FEATURE] [Post Document] [Orders]
      // [SCENARIO 159878] When a Order is Received & Invoiced, G/L entries post to deferral account
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Create Purchase Order Line for Item
      CreatePurchDocWithLine(PurchHeader,PurchLine,
        PurchHeader."Document Type"::Order,PurchLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      AmtToDefer := PurchLine.GetDeferralAmount;
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [WHEN] Invoice the Purchase Order
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      // [THEN] Deferral code is in Purchase Invoice Line
      // [THEN] Posted Deferral header and Line tables created
      // [THEN] G/L Entries are posted to Deferral Account
      VerifyPostedInvoiceDeferralsAndGL(DocNo,DeferralTemplateCode,AccNo,AmtToDefer,AmtToDefer,1,2,3);
    END;

    [Test]
    PROCEDURE TestPostPartialOrderWithDeferral@106();
    VAR
      PurchHeader@1005 : Record 38;
      PurchLine@1006 : Record 39;
      DeferralTemplateCode@1003 : Code[10];
      DocNo@1002 : Code[20];
      AccNo@1001 : Code[20];
      ItemNo@1004 : Code[20];
      AmtToDefer@1000 : Decimal;
    BEGIN
      // [FEATURE] [Post Document] [Partial Invoice]
      // [SCENARIO 159878] When partial Order is Received-Invoiced, G/L entries post to deferral account for partial amts only
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN]  Create PO Line for Item with partial qtys Received/Invoiced
      CreatePurchDocWithLine(PurchHeader,PurchLine,
        PurchHeader."Document Type"::Order,PurchLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      UpdateQtyToReceiveInvoiceOnPurchLine(PurchLine,5,2,1);
      AmtToDefer := GetInvoiceQtyAmtToDefer(PurchLine,PurchLine.GetDeferralAmount,PurchHeader."Currency Code");

      // [WHEN] Invoice the partial Purchase Order
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      // [THEN] Posted Deferral header and Line tables are for the partial quantities
      // [THEN] G/L Entries are posted to Deferral Account
      VerifyPostedInvoiceDeferralsAndGL(DocNo,DeferralTemplateCode,AccNo,AmtToDefer,AmtToDefer,1,2,3);
    END;

    [Test]
    PROCEDURE TestPostPartialOrderWithCurrencyAndDeferral@194();
    VAR
      PurchHeader@1006 : Record 38;
      PurchLine@1007 : Record 39;
      CurrExchRate@1008 : Record 330;
      DeferralTemplateCode@1003 : Code[10];
      DocNo@1002 : Code[20];
      AccNo@1001 : Code[20];
      ItemNo@1005 : Code[20];
      AmtToDefer@1000 : Decimal;
      AmtToDeferLCY@1004 : Decimal;
    BEGIN
      // [FEATURE] [Post Document] [Partial Invoice]
      // [SCENARIO 159878] When partial order with currency posts, G/L entries post to deferral account
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Create PO Line for Item with partial qtys Received/Invoiced with currency amounts
      CreatePurchDocWithCurrencyAndLine(PurchHeader,PurchLine,
        PurchHeader."Document Type"::Order,PurchLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      UpdateQtyToReceiveInvoiceOnPurchLine(PurchLine,6,3,2);
      AmtToDefer := GetInvoiceQtyAmtToDefer(PurchLine,PurchLine.GetDeferralAmount,PurchHeader."Currency Code");
      AmtToDeferLCY :=
        ROUND(CurrExchRate.ExchangeAmtFCYToLCY(SetDateDay(1,WORKDATE),
            PurchHeader."Currency Code",AmtToDefer,PurchHeader."Currency Factor"));
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [WHEN] Document is posted
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      // [THEN] Posted Deferral header and Line tables are for the partial quantities and appropriate currency
      // [THEN] G/L Entries are posted to Deferral Account
      VerifyPostedInvoiceDeferralsAndGL(DocNo,DeferralTemplateCode,AccNo,AmtToDefer,AmtToDeferLCY,1,2,3);
    END;

    [Test]
    PROCEDURE TestPostPartialOrderTwoLinesWithDeferral@193();
    VAR
      PurchHeader@1006 : Record 38;
      PurchLine@1007 : Record 39;
      Item@1008 : Record 27;
      DeferralTemplateCode@1000 : Code[10];
      AccNo@1001 : Code[20];
      DocNo@1002 : Code[20];
      ItemNo@1005 : Code[20];
      GLSum@1003 : Decimal;
      NonDeferralAmt@1009 : Decimal;
      GLCount@1004 : Integer;
    BEGIN
      // [FEATURE] [Post Document] [Partial Orders]
      // [SCENARIO 159878] When partial PO is posted with multiple lines same type, G/L entries deferral account are combined
      // [GIVEN] User has assigned a default deferral code to two differnt Items
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      CreateItemWithUnitPrice(Item);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);
      Item.VALIDATE("Default Deferral Template Code",DeferralTemplateCode);
      Item.MODIFY(TRUE);
      ItemNo := Item."No.";

      // [GIVEN] Create Purchase Line for Item with partial Received/Invoiced qtys
      CreatePurchDocWithLine(PurchHeader,PurchLine,
        PurchHeader."Document Type"::Order,PurchLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      UpdateQtyToReceiveInvoiceOnPurchLine(PurchLine,5,3,2);

      // [GIVEN] Add the second item to the document that also has partial qtys
      LibraryPurchase.CreatePurchaseLine(PurchLine,PurchHeader,PurchLine.Type::Item,ItemNo,2);
      PurchLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(1000,2));
      PurchLine.MODIFY(TRUE);
      UpdateQtyToReceiveInvoiceOnPurchLine(PurchLine,4,2,1);

      // [WHEN] Invoice the partial PO
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      // [THEN] G/L Entries are combined for the deferral account from both lines
      GLCalcSum(DocNo,AccNo,SetDateDay(1,WORKDATE),PeriodDate(SetDateDay(1,WORKDATE),2),GLCount,GLSum,NonDeferralAmt);
      Assert.AreEqual(3,GLCount,'An incorrect number of lines was posted');
      Assert.AreEqual(0,GLSum,'An incorrect amount was posted');
    END;

    [Test]
    PROCEDURE TestPostPartialOrderWithPartialDeferral@191();
    VAR
      PurchHeader@1008 : Record 38;
      PurchLine@1009 : Record 39;
      GenPostingSetup@1001 : Record 252;
      DeferralHeader@1010 : Record 1701;
      PurchAccount@1002 : Code[20];
      DeferralTemplateCode@1007 : Code[10];
      DocNo@1006 : Code[20];
      AccNo@1005 : Code[20];
      ItemNo@1003 : Code[20];
      AmtToDefer@1004 : Decimal;
      PurchAmount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Post Document] [Partial Orders]
      // [SCENARIO 159878] When an Order is posted with a partial deferral, the purchase accounts is reduced by the deferral and balance posted to first period
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Create PO line with deferral for 70%
      CreatePurchDocWithLine(PurchHeader,PurchLine,
        PurchHeader."Document Type"::Order,PurchLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      UpdateQtyToReceiveInvoiceOnPurchLine(PurchLine,5,1,1);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);
      AmtToDefer := ROUND(PurchLine.GetDeferralAmount * 0.7);
      ModifyDeferral(PurchLine,DeferralHeader."Calc. Method"::"Straight-Line",2,
        AmtToDefer,SetDateDay(1,WORKDATE));
      AmtToDefer := GetInvoiceQtyAmtToDefer(PurchLine,AmtToDefer,PurchHeader."Currency Code");
      PurchAmount := GetInvoiceQtyAmtToDefer(PurchLine,PurchLine.GetDeferralAmount,PurchHeader."Currency Code") - AmtToDefer;
      GenPostingSetup.GET(PurchLine."Gen. Bus. Posting Group",PurchLine."Gen. Prod. Posting Group");
      PurchAccount := GenPostingSetup."Purch. Account";

      // [WHEN] Invoice the partial order
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      // [THEN] G/L Entries for purch account is reduced by amt deferred which is posted directly to deferral account
      VerifyPostedInvoiceDeferralsAndGLWithPurchAmt(DocNo,
        DeferralTemplateCode,AccNo,PurchAccount,AmtToDefer,AmtToDefer,1,2,2,3,PurchAmount);
    END;

    [Test]
    PROCEDURE TestPostPartialOrderWithDeferralMultipleTimes@112();
    VAR
      PurchHeader@1005 : Record 38;
      PurchLine@1006 : Record 39;
      DeferralTemplateCode@1003 : Code[10];
      DocNo@1002 : Code[20];
      AccNo@1001 : Code[20];
      ItemNo@1004 : Code[20];
      AmtToDefer@1000 : Decimal;
    BEGIN
      // [FEATURE] [Post Document] [Partial Invoice]
      // [SCENARIO 159878] When partial Order is Received-Invoiced multiple times, G/L entries post to deferral account
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Create Purchase Line woth partial quantites
      CreatePurchDocWithLine(PurchHeader,PurchLine,
        PurchHeader."Document Type"::Order,PurchLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      UpdateQtyToReceiveInvoiceOnPurchLine(PurchLine,5,1,1);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);
      AmtToDefer := GetInvoiceQtyAmtToDefer(PurchLine,PurchLine.GetDeferralAmount,PurchHeader."Currency Code");

      // [WHEN] Invoice the partial order the first time
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      // [WHEN] The Order Qty to Invoice is updated again
      PurchHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      PurchHeader.MODIFY;
      FindPurchLine(PurchHeader,PurchLine);
      UpdateQtyToReceiveInvoiceOnPurchLine(PurchLine,5,2,2);
      AmtToDefer := GetInvoiceQtyAmtToDefer(PurchLine,PurchLine.GetDeferralAmount,PurchHeader."Currency Code");

      // [WHEN] Invoice the partial order the second time
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      // [THEN] Posted Deferral header and Line tables are for the partial quantities from second order
      // [THEN] G/L Entries are posted to Deferral Account
      VerifyPostedInvoiceDeferralsAndGL(DocNo,DeferralTemplateCode,AccNo,AmtToDefer,AmtToDefer,1,2,3);
    END;

    [Test]
    PROCEDURE TestPostInvoiceWithDeferral@54();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchInvLine@1002 : Record 123;
      DeferralTemplateCode@1003 : Code[10];
      ItemNo@1004 : Code[20];
      AccNo@1005 : Code[20];
      DocNo@1006 : Code[20];
      AmtToDefer@1008 : Decimal;
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127772] When a Purchase Invoice is posted, the general ledger accounts for the deferrals are created
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Creating Purchase Line for Item should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      AmtToDefer := PurchaseLine.GetDeferralAmount;

      // [WHEN] Document is posted
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] The deferrals were moved to the Purchase Invoice Line and Posted Deferral tables
      FindPurchInvoiceLine(PurchInvLine,DocNo);
      PurchInvLine.TESTFIELD("Deferral Code",DeferralTemplateCode);
      ValidatePostedDeferralSchedule(PurchDocType::"Posted Invoice",DocNo,
        PurchInvLine."Line No.",DeferralTemplateCode,SetDateDay(1,WORKDATE),AmtToDefer,AmtToDefer,2);

      // [THEN] The deferrals were posted to GL for 3 periods with zero balance if reversed out correctly
      ValidateGL(DocNo,AccNo,SetDateDay(1,WORKDATE),PeriodDate(SetDateDay(1,WORKDATE),2),3,0);
    END;

    [Test]
    [HandlerFunctions(BatchPostPurchaseInvoicesReportHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE TestPostBatchTwoInvoicesWithDeferralConfirmYes@114();
    VAR
      PurchaseHeader1@1001 : Record 38;
      PurchaseHeader2@1012 : Record 38;
      DeferralTemplateCode@1003 : Code[10];
      ItemNo@1004 : Code[20];
      AccNo@1005 : Code[20];
      DocNo1@1006 : Code[20];
      DocNo2@1010 : Code[20];
      AmtToDefer1@1008 : Decimal;
      AmtToDefer2@1011 : Decimal;
      NewPostDate@1009 : Date;
    BEGIN
      // [FEATURE] [Post Document] [Batch Posting]
      // [SCENARIO 382285] Batch Posting of Deferral Purchase Invoices with updated Posting Date should update deferral schedule with Confirm Yes
      Initialize;

      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Two Purchase Invoices with Posting Date = 01.10.16
      CreatePurchDocument(PurchaseHeader1,AmtToDefer1,DocNo1,PurchaseHeader1."Document Type"::Invoice,ItemNo);
      CreatePurchDocument(PurchaseHeader2,AmtToDefer2,DocNo2,PurchaseHeader2."Document Type"::Invoice,ItemNo);

      SetupBatchPostingReportParameters(NewPostDate,PurchaseHeader1."Posting Date",0,TRUE);
      COMMIT;

      // [WHEN] Purchase Invoices are posted with batch report on 01.11.16 and confirm update on deferral date = Yes
      PurchaseHeader1.SETFILTER("No.",'%1|%2',PurchaseHeader1."No.",PurchaseHeader2."No.");
      REPORT.RUN(REPORT::"Batch Post Purchase Invoices",TRUE,FALSE,PurchaseHeader1);

      // [THEN] Confirm is called once
      Assert.AreEqual(1,LibraryVariableStorage.DequeueInteger,ConfirmCallOnceErr);

      // [THEN] Posting Date of Purchase Invoices is 01.11.16
      VerifyInvoicePostingDate(DocNo1,NewPostDate);
      VerifyInvoicePostingDate(DocNo2,NewPostDate);

      // [THEN] The deferrals are posted according to schedule from 01.11.16
      VerifyInvoicePostedDeferrals(DocNo1,DeferralTemplateCode,AccNo,NewPostDate,AmtToDefer1);
      VerifyInvoicePostedDeferrals(DocNo2,DeferralTemplateCode,AccNo,NewPostDate,AmtToDefer2);
    END;

    [Test]
    [HandlerFunctions(BatchPostPurchaseOrdersReportHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE TestPostBatchTwoOrdersWithDeferralConfirmYes@123();
    VAR
      PurchaseHeader1@1001 : Record 38;
      PurchaseHeader2@1012 : Record 38;
      DeferralTemplateCode@1003 : Code[10];
      ItemNo@1004 : Code[20];
      AccNo@1005 : Code[20];
      DocNo1@1006 : Code[20];
      DocNo2@1010 : Code[20];
      AmtToDefer1@1008 : Decimal;
      AmtToDefer2@1011 : Decimal;
      NewPostDate@1009 : Date;
    BEGIN
      // [FEATURE] [Post Document] [Batch Posting]
      // [SCENARIO 382285] Batch Posting of Deferral Purchase Orders with updated Posting Date should update deferral schedule with Confirm Yes
      Initialize;

      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Two Purchase Orders with Posting Date = 01.10.16 and confirm update on deferral date = Yes
      CreatePurchDocument(PurchaseHeader1,AmtToDefer1,DocNo1,PurchaseHeader1."Document Type"::Order,ItemNo);
      CreatePurchDocument(PurchaseHeader2,AmtToDefer2,DocNo2,PurchaseHeader1."Document Type"::Order,ItemNo);

      SetupBatchPostingReportParameters(NewPostDate,PurchaseHeader1."Posting Date",0,TRUE);
      COMMIT;

      // [WHEN] Purchase Orders are posted with batch report on 01.11.16
      PurchaseHeader1.SETFILTER("No.",'%1|%2',PurchaseHeader1."No.",PurchaseHeader2."No.");
      REPORT.RUN(REPORT::"Batch Post Purchase Orders",TRUE,FALSE,PurchaseHeader1);

      // [THEN] Confirm is called once
      Assert.AreEqual(1,LibraryVariableStorage.DequeueInteger,ConfirmCallOnceErr);

      // [THEN] Posting Date of Purchase Invoices is 01.11.16
      VerifyInvoicePostingDate(DocNo1,NewPostDate);
      VerifyInvoicePostingDate(DocNo2,NewPostDate);

      // [THEN] The deferrals are posted according to schedule from 01.11.16
      VerifyInvoicePostedDeferrals(DocNo1,DeferralTemplateCode,AccNo,NewPostDate,AmtToDefer1);
      VerifyInvoicePostedDeferrals(DocNo2,DeferralTemplateCode,AccNo,NewPostDate,AmtToDefer2);
    END;

    [Test]
    [HandlerFunctions(BatchPostPurchCreditMemosReportHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE TestPostBatchTwoCrMemosWithDeferralConfirmYes@119();
    VAR
      PurchaseHeader1@1001 : Record 38;
      PurchaseHeader2@1012 : Record 38;
      DeferralTemplateCode@1003 : Code[10];
      ItemNo@1004 : Code[20];
      AccNo@1005 : Code[20];
      DocNo1@1006 : Code[20];
      DocNo2@1010 : Code[20];
      AmtToDefer1@1008 : Decimal;
      AmtToDefer2@1011 : Decimal;
      NewPostDate@1009 : Date;
    BEGIN
      // [FEATURE] [Post Document] [Batch Posting]
      // [SCENARIO 382285] Batch Posting of Deferral Purchase Credit Memos with updated Posting Date should update deferral schedule with Confirm Yes
      Initialize;

      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Two Purchase Credit Memos with Posting Date = 01.10.16
      CreatePurchDocument(PurchaseHeader1,AmtToDefer1,DocNo1,PurchaseHeader1."Document Type"::"Credit Memo",ItemNo);
      CreatePurchDocument(PurchaseHeader2,AmtToDefer2,DocNo2,PurchaseHeader2."Document Type"::"Credit Memo",ItemNo);

      SetupBatchPostingReportParameters(NewPostDate,PurchaseHeader1."Posting Date",0,TRUE);
      COMMIT;

      // [WHEN] Purchase Credit Memos are posted with batch report on 01.11.16 and confirm update on deferral date = Yes
      PurchaseHeader1.SETFILTER("No.",'%1|%2',PurchaseHeader1."No.",PurchaseHeader2."No.");
      REPORT.RUN(REPORT::"Batch Post Purch. Credit Memos",TRUE,FALSE,PurchaseHeader1);

      // [THEN] Confirm is called once
      Assert.AreEqual(1,LibraryVariableStorage.DequeueInteger,ConfirmCallOnceErr);

      // [THEN] Posting Date in Posted Credit Memos is 01.11.16
      VerifyCrMemoPostingDate(DocNo1,NewPostDate);
      VerifyCrMemoPostingDate(DocNo2,NewPostDate);

      // [THEN] The deferrals are posted according to schedule from 01.11.16
      VerifyCrMemoPostedDeferrals(DocNo1,DeferralTemplateCode,AccNo,NewPostDate,AmtToDefer1);
      VerifyCrMemoPostedDeferrals(DocNo2,DeferralTemplateCode,AccNo,NewPostDate,AmtToDefer2);
    END;

    [Test]
    [HandlerFunctions(BatchPostPurchaseInvoicesReportHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE TestPostBatchTwoInvoicesWithDeferralConfirmNo@122();
    VAR
      PurchaseHeader1@1001 : Record 38;
      PurchaseHeader2@1012 : Record 38;
      DeferralTemplateCode@1003 : Code[10];
      ItemNo@1004 : Code[20];
      AccNo@1005 : Code[20];
      DocNo1@1006 : Code[20];
      DocNo2@1010 : Code[20];
      AmtToDefer1@1008 : Decimal;
      AmtToDefer2@1011 : Decimal;
      NewPostDate@1009 : Date;
    BEGIN
      // [FEATURE] [Post Document] [Batch Posting]
      // [SCENARIO 382285] Batch Posting of Deferral Purchase Invoices with updated Posting Date should update deferral schedule with Confirm No
      Initialize;

      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Two Purchase Invoices with Posting Date = 01.10.16
      CreatePurchDocument(PurchaseHeader1,AmtToDefer1,DocNo1,PurchaseHeader1."Document Type"::Invoice,ItemNo);
      CreatePurchDocument(PurchaseHeader2,AmtToDefer2,DocNo2,PurchaseHeader2."Document Type"::Invoice,ItemNo);

      SetupBatchPostingReportParameters(NewPostDate,PurchaseHeader1."Posting Date",0,FALSE);
      COMMIT;

      // [WHEN] Purchase Invoices are posted with batch report on 01.11.16 and confirm update on deferral date = Yes
      PurchaseHeader1.SETFILTER("No.",'%1|%2',PurchaseHeader1."No.",PurchaseHeader2."No.");
      REPORT.RUN(REPORT::"Batch Post Purchase Invoices",TRUE,FALSE,PurchaseHeader1);

      // [THEN] Confirm is called once
      Assert.AreEqual(1,LibraryVariableStorage.DequeueInteger,ConfirmCallOnceErr);

      // [THEN] Posting Date of Purchase Invoices is 01.11.16
      VerifyInvoicePostingDate(DocNo1,NewPostDate);
      VerifyInvoicePostingDate(DocNo2,NewPostDate);

      // [THEN] The deferrals are posted according to schedule from 01.10.16
      VerifyInvoicePostedDeferrals(DocNo1,DeferralTemplateCode,AccNo,PurchaseHeader1."Posting Date",AmtToDefer1);
      VerifyInvoicePostedDeferrals(DocNo2,DeferralTemplateCode,AccNo,PurchaseHeader2."Posting Date",AmtToDefer2);
    END;

    [Test]
    [HandlerFunctions(BatchPostPurchaseOrdersReportHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE TestPostBatchTwoOrdersWithDeferralConfirmNo@121();
    VAR
      PurchaseHeader1@1001 : Record 38;
      PurchaseHeader2@1012 : Record 38;
      DeferralTemplateCode@1003 : Code[10];
      ItemNo@1004 : Code[20];
      AccNo@1005 : Code[20];
      DocNo1@1006 : Code[20];
      DocNo2@1010 : Code[20];
      AmtToDefer1@1008 : Decimal;
      AmtToDefer2@1011 : Decimal;
      NewPostDate@1009 : Date;
    BEGIN
      // [FEATURE] [Post Document] [Batch Posting]
      // [SCENARIO 382285] Batch Posting of Deferral Purchase Orders with updated Posting Date should update deferral schedule with Confirm No
      Initialize;

      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Two Purchase Orders with Posting Date = 01.10.16 and confirm update on deferral date = Yes
      CreatePurchDocument(PurchaseHeader1,AmtToDefer1,DocNo1,PurchaseHeader1."Document Type"::Order,ItemNo);
      CreatePurchDocument(PurchaseHeader2,AmtToDefer2,DocNo2,PurchaseHeader1."Document Type"::Order,ItemNo);

      SetupBatchPostingReportParameters(NewPostDate,PurchaseHeader1."Posting Date",0,FALSE);
      COMMIT;

      // [WHEN] Purchase Orders are posted with batch report on 01.11.16
      PurchaseHeader1.SETFILTER("No.",'%1|%2',PurchaseHeader1."No.",PurchaseHeader2."No.");
      REPORT.RUN(REPORT::"Batch Post Purchase Orders",TRUE,FALSE,PurchaseHeader1);

      // [THEN] Confirm is called once
      Assert.AreEqual(1,LibraryVariableStorage.DequeueInteger,ConfirmCallOnceErr);

      // [THEN] Posting Date of Purchase Invoices is 01.11.16
      VerifyInvoicePostingDate(DocNo1,NewPostDate);
      VerifyInvoicePostingDate(DocNo2,NewPostDate);

      // [THEN] The deferrals are posted according to schedule from 01.10.16
      VerifyInvoicePostedDeferrals(DocNo1,DeferralTemplateCode,AccNo,PurchaseHeader1."Posting Date",AmtToDefer1);
      VerifyInvoicePostedDeferrals(DocNo2,DeferralTemplateCode,AccNo,PurchaseHeader2."Posting Date",AmtToDefer2);
    END;

    [Test]
    [HandlerFunctions(BatchPostPurchCreditMemosReportHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE TestPostBatchTwoCrMemosWithDeferralConfirmNo@116();
    VAR
      PurchaseHeader1@1001 : Record 38;
      PurchaseHeader2@1012 : Record 38;
      DeferralTemplateCode@1003 : Code[10];
      ItemNo@1004 : Code[20];
      AccNo@1005 : Code[20];
      DocNo1@1006 : Code[20];
      DocNo2@1010 : Code[20];
      AmtToDefer1@1008 : Decimal;
      AmtToDefer2@1011 : Decimal;
      NewPostDate@1009 : Date;
    BEGIN
      // [FEATURE] [Post Document] [Batch Posting]
      // [SCENARIO 382285] Batch Posting of Deferral Purchase Credit Memos with updated Posting Date should update deferral schedule with Confirm No
      Initialize;

      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Two Purchase Credit Memos with Posting Date = 01.10.16
      CreatePurchDocument(PurchaseHeader1,AmtToDefer1,DocNo1,PurchaseHeader1."Document Type"::"Credit Memo",ItemNo);
      CreatePurchDocument(PurchaseHeader2,AmtToDefer2,DocNo2,PurchaseHeader2."Document Type"::"Credit Memo",ItemNo);

      SetupBatchPostingReportParameters(NewPostDate,PurchaseHeader1."Posting Date",0,FALSE);
      COMMIT;

      // [WHEN] Purchase Credit Memos are posted with batch report on 01.11.16 and confirm update on deferral date = Yes
      PurchaseHeader1.SETFILTER("No.",'%1|%2',PurchaseHeader1."No.",PurchaseHeader2."No.");
      REPORT.RUN(REPORT::"Batch Post Purch. Credit Memos",TRUE,FALSE,PurchaseHeader1);

      // [THEN] Confirm is called once
      Assert.AreEqual(1,LibraryVariableStorage.DequeueInteger,ConfirmCallOnceErr);

      // [THEN] Posting Date in Posted Credit Memos is 01.11.16
      VerifyCrMemoPostingDate(DocNo1,NewPostDate);
      VerifyCrMemoPostingDate(DocNo2,NewPostDate);

      // [THEN] The deferrals are posted according to schedule from 01.11.16
      VerifyCrMemoPostedDeferrals(DocNo1,DeferralTemplateCode,AccNo,PurchaseHeader1."Posting Date",AmtToDefer1);
      VerifyCrMemoPostedDeferrals(DocNo2,DeferralTemplateCode,AccNo,PurchaseHeader2."Posting Date",AmtToDefer2);
    END;

    [Test]
    PROCEDURE TestPostInvoiceWithDeferralDeletesDeferralHdrAndLines@189();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchInvLine@1002 : Record 123;
      DeferralTemplateCode@1003 : Code[10];
      ItemNo@1004 : Code[20];
      DocNo@1006 : Code[20];
      OriginalDocNo@1007 : Code[20];
      AmtToDefer@1008 : Decimal;
      LineNo@1009 : Integer;
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 159878] When a Purchase Invoice is posted, the Deferral Header and Line Records are deleted
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Create Purchase Line for Item
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      AmtToDefer := PurchaseLine.GetDeferralAmount;
      OriginalDocNo := PurchaseHeader."No.";
      LineNo := PurchaseLine."Line No.";

      // [WHEN] Document is posted
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] The deferrals were moved to the Purchase Invoice Line and Posted Deferral tables
      FindPurchInvoiceLine(PurchInvLine,DocNo);
      PurchInvLine.TESTFIELD("Deferral Code",DeferralTemplateCode);
      ValidatePostedDeferralSchedule(PurchDocType::"Posted Invoice",DocNo,
        PurchInvLine."Line No.",DeferralTemplateCode,SetDateDay(1,WORKDATE),AmtToDefer,AmtToDefer,2);

      // [THEN] Deferrals were removed from the Deferral Header and Deferral Line Tables
      VerifyDeferralHeaderLinesRemoved(PurchDocType::Invoice,OriginalDocNo,LineNo);
    END;

    [Test]
    PROCEDURE TestPostInvoiceWithCurrencyAndDeferral@27();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchInvLine@1002 : Record 123;
      CurrExchRate@1003 : Record 330;
      DeferralTemplateCode@1004 : Code[10];
      ItemNo@1005 : Code[20];
      AccNo@1006 : Code[20];
      DocNo@1007 : Code[20];
      AmtToDefer@1008 : Decimal;
      AmtToDeferLCY@1009 : Decimal;
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127772] When a Purchase Invoice with Currency is posted, the deferrals are created
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Create Purchase Invoice with FCY, and Item with default deferral code
      CreatePurchDocWithCurrencyAndLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      AmtToDefer := PurchaseLine.GetDeferralAmount;
      AmtToDeferLCY :=
        ROUND(CurrExchRate.ExchangeAmtFCYToLCY(SetDateDay(1,WORKDATE),
            PurchaseHeader."Currency Code",AmtToDefer,PurchaseHeader."Currency Factor"));

      // [WHEN] Document is posted
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] The deferrals were moved to the Purchase Invoice Line and Posted Deferral tables
      FindPurchInvoiceLine(PurchInvLine,DocNo);
      PurchInvLine.TESTFIELD("Deferral Code",DeferralTemplateCode);
      ValidatePostedDeferralSchedule(PurchDocType::"Posted Invoice",DocNo,
        PurchInvLine."Line No.",DeferralTemplateCode,SetDateDay(1,WORKDATE),AmtToDefer,AmtToDeferLCY,2);

      // [THEN] The deferrals were posted to GL for 3 periods with zero balance if reversed out correctly
      ValidateGL(DocNo,AccNo,SetDateDay(1,WORKDATE),PeriodDate(SetDateDay(1,WORKDATE),2),3,0);
    END;

    [Test]
    PROCEDURE TestPostInvoiceTwoLinesWithDeferral@95();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      Item@1002 : Record 27;
      DeferralTemplateCode@1003 : Code[10];
      ItemNo@1004 : Code[20];
      AccNo@1005 : Code[20];
      DocNo@1006 : Code[20];
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127772] When a Purchase Invoice is posted with multiple lines of the same type,
      // the general ledger accounts for the deferrals are combined when they are created
      // [GIVEN] User has assigned a default deferral code to two differnt Items
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      CreateItemWithUnitPrice(Item);
      Item.VALIDATE("Default Deferral Template Code",DeferralTemplateCode);
      Item.MODIFY(TRUE);
      ItemNo := Item."No.";
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Creating Purchase Line for Item should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [GIVEN] Add the second item to the document
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,2);
      IF Item.GET(ItemNo) THEN BEGIN
        PurchaseLine.VALIDATE("Direct Unit Cost",Item."Unit Cost");
        PurchaseLine.MODIFY(TRUE);
      END;
      PurchaseHeader.CALCFIELDS(Amount);

      // [WHEN] Document is posted
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] The deferrals were posted to GL for 3 periods with zero balance if reversed out correctly
      ValidateGL(DocNo,AccNo,SetDateDay(1,WORKDATE),PeriodDate(SetDateDay(1,WORKDATE),2),3,0);

      // [THEN] G/L Entries for deferral periods are posted according to Deferral Schedule (TFS 378831)
      VerifyGLForDeferralPeriod(DocNo,AccNo,PurchaseHeader.Amount);
    END;

    [Test]
    PROCEDURE TestPostInvoiceWithPartialDeferral@101();
    VAR
      GenPostingSetup@1001 : Record 252;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      PurchInvLine@1006 : Record 123;
      DeferralHeader@1007 : Record 1701;
      DeferralTemplateCode@1008 : Code[10];
      ItemNo@1011 : Code[20];
      AccNo@1010 : Code[20];
      DocNo@1009 : Code[20];
      PurchAccount@1002 : Code[20];
      PurchAmount@1000 : Decimal;
      AmtToDefer@1012 : Decimal;
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127772] When a Purchase Invoice is posted with a partial deferral, the Purchase accounts is reduced by the deferral and balance posted to first period
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Creating Purchase Line for Item should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      AmtToDefer := ROUND(PurchaseLine.GetDeferralAmount * 0.7);
      PurchAmount := PurchaseLine.GetDeferralAmount - AmtToDefer;
      ModifyDeferral(PurchaseLine,DeferralHeader."Calc. Method"::"Straight-Line",2,
        AmtToDefer,SetDateDay(1,WORKDATE));
      GenPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      PurchAccount := GenPostingSetup."Purch. Account";

      // [WHEN] Document is posted
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] The deferrals were moved to the Purchase Invoice Line and Posted Deferral tables
      FindPurchInvoiceLine(PurchInvLine,DocNo);
      PurchInvLine.TESTFIELD("Deferral Code",DeferralTemplateCode);
      ValidatePostedDeferralSchedule(PurchDocType::"Posted Invoice",DocNo,
        PurchInvLine."Line No.",DeferralTemplateCode,SetDateDay(1,WORKDATE),AmtToDefer,AmtToDefer,2);

      // [THEN] The amount not deferred was posted to GL for the Purchase account
      ValidateGLPurchAccount(DocNo,PurchAccount,SetDateDay(1,WORKDATE),PeriodDate(SetDateDay(1,WORKDATE),2),3,PurchAmount);

      // [THEN] The deferrals were posted to GL for 2 periods with zero balance if reversed out correctly
      ValidateGL(DocNo,AccNo,SetDateDay(1,WORKDATE),PeriodDate(SetDateDay(1,WORKDATE),2),2,0);
    END;

    [Test]
    PROCEDURE TestPostInvoiceWithDeferralNoDeferralHeader@87();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      DeferralHeader@1002 : Record 1701;
      DeferralTemplateCode@1003 : Code[10];
      ItemNo@1006 : Code[20];
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127772] When a Purchase Invoice will not post if the deferral header record is not created
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Creating Purchase Line for Item should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      FindDeferralHeader(PurchaseLine,DeferralHeader);
      DeferralHeader.DELETE;

      // [WHEN] Document is posted
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] The error specifying the No and Deferral Code is given
      Assert.ExpectedError(STRSUBSTNO(NoDeferralScheduleErr,ItemNo,DeferralTemplateCode));
    END;

    [Test]
    PROCEDURE TestPostInvoiceWithDeferralDeferralHeaderZero@86();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      DeferralHeader@1002 : Record 1701;
      DeferralTemplateCode@1003 : Code[10];
      ItemNo@1006 : Code[20];
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127772] When a Purchase Invoice will not post if the deferral header Amount To Defer is Zero
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Creating Purchase Line for Item should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      FindDeferralHeader(PurchaseLine,DeferralHeader);
      DeferralHeader."Amount to Defer" := 0;
      DeferralHeader.MODIFY;

      // [WHEN] Document is posted
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] The error specifying the No and Deferral Code is given
      Assert.ExpectedError(STRSUBSTNO(NoDeferralScheduleErr,ItemNo,DeferralTemplateCode));
    END;

    [Test]
    PROCEDURE TestPostInvoiceWithDeferralNoDeferralLines@88();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      DeferralHeader@1002 : Record 1701;
      DeferralLine@1003 : Record 1702;
      DeferralTemplateCode@1004 : Code[10];
      ItemNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127772] When a Purchase Invoice will not post if the deferral schedule does not have any lines
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Creating Purchase Line for Item should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      FindDeferralHeader(PurchaseLine,DeferralHeader);
      RangeDeferralLines(DeferralHeader,DeferralLine);
      DeferralLine.DELETEALL;

      // [WHEN] Document is posted
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] The error specifying the No and Deferral Code is given
      Assert.ExpectedError(STRSUBSTNO(NoDeferralScheduleErr,ItemNo,DeferralTemplateCode));
    END;

    [Test]
    PROCEDURE TestPostInvoiceWithDeferralOneZeroDeferralLine@97();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
      DeferralLine@1002 : Record 1702;
      DeferralHeader@1003 : Record 1701;
      DeferralTemplateCode@1004 : Code[10];
      ItemNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127772] When a Purchase Invoice will not post if one of the deferral schedule lines has a zero amount
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Creating Purchase Line for Item should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      FindDeferralHeader(PurchaseLine,DeferralHeader);
      RangeDeferralLines(DeferralHeader,DeferralLine);
      IF DeferralLine.FINDFIRST THEN BEGIN
        DeferralLine.Amount := 0.0;
        DeferralLine."Amount (LCY)" := 0.0;
        DeferralLine.MODIFY;
      END;

      // [WHEN] Document is posted
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] The error specifying the No and Deferral Code is given
      Assert.ExpectedError(STRSUBSTNO(ZeroDeferralAmtErr,ItemNo,DeferralTemplateCode));
    END;

    [Test]
    PROCEDURE TestPostCreditMemoWithDeferral@47();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchCrMemoLine@1000 : Record 125;
      DeferralTemplateCode@1001 : Code[10];
      ItemNo@1004 : Code[20];
      AccNo@1005 : Code[20];
      DocNo@1006 : Code[20];
      AmtToDefer@1007 : Decimal;
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127772] When a Credit Memo is posted, the general ledger accounts for the deferrals are created
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Creating Purchase Line for Item should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::"Credit Memo",PurchaseLine.Type::Item,ItemNo,SetDateDay(15,WORKDATE));
      AmtToDefer := PurchaseLine.GetDeferralAmount;

      // [WHEN] Document is posted
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] The deferrals were moved to the Purchase Credit Memo and Posted Deferral tables
      FindPurchCrMemoLine(PurchCrMemoLine,DocNo);
      PurchCrMemoLine.TESTFIELD("Deferral Code",DeferralTemplateCode);
      ValidatePostedDeferralSchedule(PurchDocType::"Posted Credit Memo",DocNo,
        PurchCrMemoLine."Line No.",DeferralTemplateCode,SetDateDay(15,WORKDATE),AmtToDefer,AmtToDefer,3);

      // [THEN] The deferrals were posted to GL for 5 periods with zero balance if reversed out correctly
      ValidateGL(DocNo,AccNo,SetDateDay(15,WORKDATE),PeriodDate(SetDateDay(1,WORKDATE),3),5,0);
    END;

    [Test]
    PROCEDURE TestPostCreditMemoWithPartialDeferral@62();
    VAR
      GenPostingSetup@1003 : Record 252;
      PurchaseHeader@1006 : Record 38;
      PurchaseLine@1005 : Record 39;
      PurchCrMemoLine@1004 : Record 125;
      DeferralHeader@1007 : Record 1701;
      GLAccount@1008 : Record 15;
      DeferralTemplateCode@1009 : Code[10];
      ItemNo@1012 : Code[20];
      AccNo@1011 : Code[20];
      DocNo@1010 : Code[20];
      PurchAccount@1000 : Code[20];
      PurchAmount@1002 : Decimal;
      AmtToDefer@1013 : Decimal;
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127772] When a Credit Memo is posted with a partial deferral,
      // the correct Purchase Credit Memo Account is posted to with correct amounts
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Creating Purchase Line for Item should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::"Credit Memo",PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      AmtToDefer := ROUND(PurchaseLine.GetDeferralAmount * 0.7);
      PurchAmount := PurchaseLine.GetDeferralAmount - AmtToDefer;
      ModifyDeferral(PurchaseLine,DeferralHeader."Calc. Method"::"Straight-Line",2,
        AmtToDefer,SetDateDay(1,WORKDATE));

      // [GIVEN] Purchase Credit Memo Account updated
      GenPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      CreateGLAccount(GLAccount);
      PurchAccount := GLAccount."No.";
      GenPostingSetup.VALIDATE("Purch. Credit Memo Account",PurchAccount);
      GenPostingSetup.MODIFY;

      // [WHEN] Document is posted
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] The deferrals were moved to the Purchase Credit Memo and Posted Deferral tables
      FindPurchCrMemoLine(PurchCrMemoLine,DocNo);
      PurchCrMemoLine.TESTFIELD("Deferral Code",DeferralTemplateCode);
      ValidatePostedDeferralSchedule(PurchDocType::"Posted Credit Memo",DocNo,
        PurchCrMemoLine."Line No.",DeferralTemplateCode,SetDateDay(1,WORKDATE),AmtToDefer,AmtToDefer,2);

      // [THEN] The amount not deferred was posted to GL for the Purchase account
      ValidateGLPurchAccount(DocNo,PurchAccount,SetDateDay(1,WORKDATE),PeriodDate(SetDateDay(1,WORKDATE),3),3,PurchAmount);

      // [THEN] The deferrals were posted to GL for 2 periods with zero balance if reversed out correctly
      ValidateGL(DocNo,AccNo,SetDateDay(1,WORKDATE),PeriodDate(SetDateDay(1,WORKDATE),3),2,0);
    END;

    [Test]
    PROCEDURE TestPostReturnOrderWithDeferral@55();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchCrMemoLine@1000 : Record 125;
      DeferralTemplateCode@1003 : Code[10];
      ItemNo@1006 : Code[20];
      AccNo@1005 : Code[20];
      DocNo@1004 : Code[20];
      AmtToDefer@1007 : Decimal;
    BEGIN
      // [FEATURE] [Post Document]
      // [SCENARIO 127772] When a Return Order is posted, the general ledger accounts for the deferrals are created
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",3);
      AccNo := GetDeferralTemplateAccount(DeferralTemplateCode);

      // [GIVEN] Creating Purchase Line for Item should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::"Return Order",PurchaseLine.Type::Item,ItemNo,SetDateDay(15,WORKDATE));
      AmtToDefer := PurchaseLine.GetDeferralAmount;

      // [WHEN] Document is posted
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // [THEN] The deferrals were moved to the Purchase Credit Memo and Posted Deferral tables
      FindPurchCrMemoLine(PurchCrMemoLine,DocNo);
      PurchCrMemoLine.TESTFIELD("Deferral Code",DeferralTemplateCode);
      ValidatePostedDeferralSchedule(PurchDocType::"Posted Credit Memo",DocNo,
        PurchCrMemoLine."Line No.",DeferralTemplateCode,SetDateDay(15,WORKDATE),AmtToDefer,AmtToDefer,3);

      // [THEN] The deferrals were posted to GL for 5 periods with zero balance if reversed out correctly
      ValidateGL(DocNo,AccNo,SetDateDay(15,WORKDATE),PeriodDate(SetDateDay(1,WORKDATE),3),5,0);
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleHandler)]
    PROCEDURE TestOpenPurchaseInvoiceDeferralSchedulePos@65();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchaseInvoice@1001 : TestPage 51;
      DeferralTemplateCode@1004 : Code[10];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] Entering a Purchase Invoice with GL Account allows editing of the deferral code and accessing schedule
      Initialize;
      // [GIVEN] User has created a Purchase Document with one line item for GL Account
      CreatePurchDocAndDeferralTemplateCode(PurchaseHeader,PurchaseLine,DeferralTemplateCode,PurchaseHeader."Document Type"::Invoice);

      // [WHEN] Open the Purchase Invoice as edit with the document
      PurchaseInvoice.OPENEDIT;
      PurchaseInvoice.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseInvoice.PurchLines.FIRST;

      // [THEN] Deferral Code can be entered for GL Account
      PurchaseInvoice.PurchLines."Deferral Code".SETVALUE(DeferralTemplateCode);
      LibraryVariableStorage.Enqueue(PurchaseLine.GetDeferralAmount);

      // [THEN] Deferral Schedule can be opened for GL Account
      PurchaseInvoice.PurchLines.DeferralSchedule.INVOKE;

      PurchaseInvoice.CLOSE;
    END;

    [Test]
    PROCEDURE TestOpenPurchaseInvoiceDeferralScheduleNeg@70();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseInvoice@1001 : TestPage 51;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] Entering a Purchase Invoice with Fixed Asset does not allow editing of the deferral code or accessing schedule
      // [GIVEN] User has created a Purchase Document
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,CreateVendor);

      // [WHEN] Open the Purchase Invoice as edit with the document
      PurchaseInvoice.OPENEDIT;
      PurchaseInvoice.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseInvoice.PurchLines.Type.VALUE(FORMAT(PurchaseLine.Type::"Fixed Asset"));

      // [THEN] Deferral Code and Deferral Schedule menu are not enabled
      Assert.IsFalse(PurchaseInvoice.PurchLines."Deferral Code".ENABLED,'Deferral Code should not be enabled');
      Assert.IsFalse(PurchaseInvoice.PurchLines.DeferralSchedule.ENABLED,'Deferral Schedule should NOT be enabled');

      PurchaseInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(UpdateDeferralSchedulePeriodHandler)]
    PROCEDURE TestOpenPurchaseInvoice@73();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      DeferralHeader@1003 : Record 1701;
      DeferralLine@1004 : Record 1702;
      PurchaseInvoice@1001 : TestPage 51;
      DeferralTemplateCode@1005 : Code[10];
      ItemNo@1008 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] Updating Deferral Schedule period updates the deferral lines
      // [GIVEN] User has created a Purchase Document with one line item for Item that has a default deferral code
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      COMMIT;

      // [GIVEN] Two periods are created
      FindDeferralHeader(PurchaseLine,DeferralHeader);
      RangeDeferralLines(DeferralHeader,DeferralLine);
      Assert.AreEqual(2,DeferralLine.COUNT,'An incorrect number of lines was created');

      // [GIVEN] Open the Purchase Invoice as edit with the document
      PurchaseInvoice.OPENEDIT;
      PurchaseInvoice.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseInvoice.PurchLines.FIRST;

      // [WHEN] Deferral Schedule is updated - happens in the handler function
      LibraryVariableStorage.Enqueue(3);
      PurchaseInvoice.PurchLines.DeferralSchedule.INVOKE;

      // [THEN] Three periods have created three deferral lines
      FindDeferralHeader(PurchaseLine,DeferralHeader);
      RangeDeferralLines(DeferralHeader,DeferralLine);
      Assert.AreEqual(3,DeferralLine.COUNT,'An incorrect number of lines was recalculated');
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleHandler)]
    PROCEDURE TestOpenPurchaseOrderDeferralSchedulePos@74();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseOrder@1001 : TestPage 50;
      DeferralTemplateCode@1004 : Code[10];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] Entering a Purchase Order with GL Account allows editing of the deferral code and accessing schedule
      // [GIVEN] User has created a Purchase Document with one line item for GL Account
      CreatePurchDocAndDeferralTemplateCode(PurchaseHeader,PurchaseLine,DeferralTemplateCode,PurchaseHeader."Document Type"::Order);

      // [WHEN] Open the Purchase Order as edit with the document
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseOrder.PurchLines.FIRST;

      // [THEN] Deferral Code can be entered for GL Account
      PurchaseOrder.PurchLines."Deferral Code".SETVALUE(DeferralTemplateCode);
      LibraryVariableStorage.Enqueue(PurchaseLine.GetDeferralAmount);

      // [THEN] Deferral Schedule can be opened for GL Account
      PurchaseOrder.PurchLines.DeferralSchedule.INVOKE;
      PurchaseOrder.CLOSE;
    END;

    [Test]
    PROCEDURE TestOpenPurchaseOrderDeferralScheduleNeg@67();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1002 : Record 39;
      PurchaseOrder@1001 : TestPage 50;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] Entering a Purchase Order with Fixed Asset does not allow editing of the deferral code or accessing schedule
      // [GIVEN] User has created a Purchase Document
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendor);

      // [WHEN] Open the Purchase Order as edit with the document
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseOrder.PurchLines.Type.VALUE(FORMAT(PurchaseLine.Type::"Fixed Asset"));

      // [THEN] Deferral Code and Deferral Schedule menu are not enabled
      Assert.IsFalse(PurchaseOrder.PurchLines."Deferral Code".ENABLED,'Deferral Code should not be enabled');
      Assert.IsFalse(PurchaseOrder.PurchLines.DeferralSchedule.ENABLED,'Deferral Schedule should NOT be enabled');

      PurchaseOrder.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleHandler)]
    PROCEDURE TestOpenPurchaseCreditMemoDeferralSchedulePos@79();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseCreditMemo@1001 : TestPage 52;
      DeferralTemplateCode@1004 : Code[10];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] Entering a Purchase Credit Memo with GL Account allows editing of the deferral code and accessing schedule
      // [GIVEN] User has created a Purchase Document with one line item for GL Account
      CreatePurchDocAndDeferralTemplateCode(PurchaseHeader,PurchaseLine,DeferralTemplateCode,
        PurchaseHeader."Document Type"::"Credit Memo");

      // [WHEN] Open the Purchase Credit Memo as edit with the document
      PurchaseCreditMemo.OPENEDIT;
      PurchaseCreditMemo.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseCreditMemo.PurchLines.FIRST;

      // [THEN] Deferral Code can be entered for GL Account
      PurchaseCreditMemo.PurchLines."Deferral Code".SETVALUE(DeferralTemplateCode);
      LibraryVariableStorage.Enqueue(PurchaseLine.GetDeferralAmount);

      // [THEN] Deferral Schedule can be opened for GL Account
      PurchaseCreditMemo.PurchLines.DeferralSchedule.INVOKE;

      PurchaseCreditMemo.CLOSE;
    END;

    [Test]
    PROCEDURE TestOpenPurchaseCreditMemoDeferralScheduleNeg@78();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseCreditMemo@1001 : TestPage 52;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] Entering a Purchase Credit Memo with Fixed Asset does not allow editing of the deferral code or accessing schedule
      // [GIVEN] User has created a Purchase Document
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",CreateVendor);

      // [WHEN] Open the Purchase Invoice as edit with the document
      PurchaseCreditMemo.OPENEDIT;
      PurchaseCreditMemo.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseCreditMemo.PurchLines.Type.VALUE(FORMAT(PurchaseLine.Type::"Fixed Asset"));

      // [THEN] Deferral Code and Deferral Schedule menu are not enabled
      Assert.IsFalse(PurchaseCreditMemo.PurchLines."Deferral Code".ENABLED,'Deferral Code should not be enabled');
      Assert.IsFalse(PurchaseCreditMemo.PurchLines.DeferralSchedule.ENABLED,'Deferral Schedule should NOT be enabled');

      PurchaseCreditMemo.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleHandler)]
    PROCEDURE TestOpenPurchaseReturnOrderDeferralSchedulePos@83();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseReturnOrder@1001 : TestPage 6640;
      DeferralTemplateCode@1004 : Code[10];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] Entering a Purchase Return Order with GL Account allows editing of the deferral code and accessing schedule
      // [GIVEN] User has created a Purchase Document with one line item for GL Account
      CreatePurchDocAndDeferralTemplateCode(PurchaseHeader,PurchaseLine,DeferralTemplateCode,
        PurchaseHeader."Document Type"::"Return Order");

      // [WHEN] Open the Purchase Return Order as edit with the document
      PurchaseReturnOrder.OPENEDIT;
      PurchaseReturnOrder.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseReturnOrder.PurchLines.FIRST;

      // [THEN] Deferral Code can be entered for GL Account
      PurchaseReturnOrder.PurchLines."Deferral Code".SETVALUE(DeferralTemplateCode);
      LibraryVariableStorage.Enqueue(PurchaseLine.GetDeferralAmount);

      // [THEN] Deferral Schedule can be opened for GL Account
      PurchaseReturnOrder.PurchLines.DeferralSchedule.INVOKE;
      PurchaseReturnOrder.CLOSE;
    END;

    [Test]
    PROCEDURE TestOpenPurchaseReturnOrderDeferralScheduleNeg@82();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchaseReturnOrder@1001 : TestPage 6640;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] Entering a Purchase Return Order with Fixed Asset does not allow editing of the deferral code or accessing schedule
      // [GIVEN] User has created a Purchase Document
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",CreateVendor);

      // [WHEN] Open the Purchase Return Order as edit with the document
      PurchaseReturnOrder.OPENEDIT;
      PurchaseReturnOrder.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseReturnOrder.PurchLines.Type.VALUE(FORMAT(PurchaseLine.Type::"Fixed Asset"));

      // [THEN] Deferral Code and Deferral Schedule menu are not enabled
      Assert.IsFalse(PurchaseReturnOrder.PurchLines."Deferral Code".ENABLED,'Deferral Code should not be enabled');
      Assert.IsFalse(PurchaseReturnOrder.PurchLines.DeferralSchedule.ENABLED,'Deferral Schedule should NOT be enabled');

      PurchaseReturnOrder.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleViewHandler)]
    PROCEDURE TestOpenPostedPurchaseInvoiceDeferralSchedulePos@80();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchInvHeader@1003 : Record 122;
      PostedPurchaseInvoice@1001 : TestPage 138;
      DeferralTemplateCode@1004 : Code[10];
      ItemNo@1007 : Code[20];
      DocNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] View deferrals for posted invoice
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Create and post the purchase invoice with the default deferral
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      PurchInvHeader.GET(DocNo);

      // [WHEN] Open the Posted Purchase Invoice
      PostedPurchaseInvoice.OPENVIEW;
      PostedPurchaseInvoice.FILTER.SETFILTER("No.",DocNo);
      PostedPurchaseInvoice.PurchInvLines.FIRST;

      // [THEN] Deferral Schedule can be opened for line
      PostedPurchaseInvoice.PurchInvLines.DeferralSchedule.INVOKE;

      PostedPurchaseInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleViewHandler)]
    PROCEDURE TestOpenPostedPurchaseInvoiceDeferralScheduleNeg@96();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchCrMemoHdr@1003 : Record 124;
      PostedPurchaseCreditMemo@1001 : TestPage 140;
      DeferralTemplateCode@1004 : Code[10];
      ItemNo@1006 : Code[20];
      DocNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] View deferrals for posted Credit Memo
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Create and post the Purchase Credit Memo with the default deferral
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::"Credit Memo",PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      PurchCrMemoHdr.GET(DocNo);

      // [WHEN] Open the Posted Purchase Invoice
      PostedPurchaseCreditMemo.OPENVIEW;
      PostedPurchaseCreditMemo.FILTER.SETFILTER("No.",DocNo);
      PostedPurchaseCreditMemo.PurchCrMemoLines.FIRST;

      // [THEN] Deferral Schedule can be opened for line
      PostedPurchaseCreditMemo.PurchCrMemoLines.DeferralSchedule.INVOKE;

      PostedPurchaseCreditMemo.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleHandler)]
    PROCEDURE TestOpenMiniPurchaseInvoiceDeferralSchedulePos@89();
    VAR
      GLAccount@1000 : Record 15;
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      MiniPurchaseInvoice@1001 : TestPage 1354;
      DeferralTemplateCode@1004 : Code[10];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] Entering a Purchase Invoice on the Mini Purchase Invoice with GL Account allows editing of the deferral code and accessing schedule
      // [GIVEN] User has created a Purchase Document with one line item for GL Account
      CreateGLAccount(GLAccount);
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::"G/L Account",GLAccount."No.",SetDateDay(1,WORKDATE));
      DeferralTemplateCode := CreateDeferralCode(CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [WHEN] Open the Purchase Invoice as edit with the document
      MiniPurchaseInvoice.OPENEDIT;
      MiniPurchaseInvoice.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      MiniPurchaseInvoice.PurchLines.FIRST;

      // [THEN] Deferral Code can be entered for GL Account
      MiniPurchaseInvoice.PurchLines."Deferral Code".SETVALUE(DeferralTemplateCode);
      LibraryVariableStorage.Enqueue(PurchaseLine.GetDeferralAmount);

      // [THEN] Deferral Schedule can be opened for GL Account
      MiniPurchaseInvoice.PurchLines.DeferralSchedule.INVOKE;

      MiniPurchaseInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleHandler)]
    PROCEDURE TestOpenMiniPurchaseCreditMemoDeferralSchedulePos@91();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      GLAccount@1003 : Record 15;
      MiniPurchaseCreditMemo@1001 : TestPage 1369;
      DeferralTemplateCode@1004 : Code[10];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] Entering a Credit Memo on the Mini Purchase Credit Memo with GL Account allows editing of the deferral code and accessing schedule
      // [GIVEN] User has created a Purchase Document with one line item for GL Account
      CreateGLAccount(GLAccount);
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::"Credit Memo",PurchaseLine.Type::"G/L Account",GLAccount."No.",SetDateDay(1,WORKDATE));
      DeferralTemplateCode := CreateDeferralCode(CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [WHEN] Open the Purchase Credit Memo as edit with the document
      MiniPurchaseCreditMemo.OPENEDIT;
      MiniPurchaseCreditMemo.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      MiniPurchaseCreditMemo.PurchLines.FIRST;

      // [THEN] Deferral Code can be entered for GL Account
      MiniPurchaseCreditMemo.PurchLines."Deferral Code".SETVALUE(DeferralTemplateCode);
      LibraryVariableStorage.Enqueue(PurchaseLine.GetDeferralAmount);

      // [THEN] Deferral Schedule can be opened for GL Account
      MiniPurchaseCreditMemo.PurchLines.DeferralSchedule.INVOKE;

      MiniPurchaseCreditMemo.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleViewHandler)]
    PROCEDURE TestOpenMiniPostedPurchaseInvoiceDeferralSchedulePos@93();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchInvHeader@1003 : Record 122;
      MiniPostedPurchaseInvoice@1001 : TestPage 1357;
      DeferralTemplateCode@1004 : Code[10];
      ItemNo@1006 : Code[20];
      DocNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] View deferrals for posted invoice through the Mini Posted Purchase Invoice page
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Create and post the Purchase invoice with the default deferral
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Invoice,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      PurchInvHeader.GET(DocNo);

      // [WHEN] Open the Posted Purchase Invoice
      MiniPostedPurchaseInvoice.OPENVIEW;
      MiniPostedPurchaseInvoice.FILTER.SETFILTER("No.",DocNo);
      MiniPostedPurchaseInvoice.PurchInvLines.FIRST;

      // [THEN] Deferral Schedule can be opened for line
      MiniPostedPurchaseInvoice.PurchInvLines.DeferralSchedule.INVOKE;

      MiniPostedPurchaseInvoice.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleViewHandler)]
    PROCEDURE TestOpenMiniPostedPurchaseCreditMemoDeferralSchedulePos@94();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchCrMemoHdr@1003 : Record 124;
      MiniPostedPurchCreditMemo@1001 : TestPage 1372;
      DeferralTemplateCode@1004 : Code[10];
      ItemNo@1006 : Code[20];
      DocNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] View deferrals for posted Credit Memo through the Mini Posted Purchase Credit Memo page
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Create and post the Purchase Credit Memo with the default deferral
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::"Credit Memo",PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      DocNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      PurchCrMemoHdr.GET(DocNo);

      // [WHEN] Open the Posted Purchase Invoice
      MiniPostedPurchCreditMemo.OPENVIEW;
      MiniPostedPurchCreditMemo.FILTER.SETFILTER("No.",DocNo);
      MiniPostedPurchCreditMemo.PurchCrLines.FIRST;

      // [THEN] Deferral Schedule can be opened for line
      MiniPostedPurchCreditMemo.PurchCrLines.DeferralSchedule.INVOKE;

      MiniPostedPurchCreditMemo.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleArchiveHandler)]
    PROCEDURE TestOpenPurchaseOrderArchiveDeferralSchedulePos@81();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1000 : Record 39;
      PurchHeaderArchive@1003 : Record 5109;
      ArchiveManagement@1005 : Codeunit 5063;
      PurchaseOrderArchive@1001 : TestPage 5167;
      DeferralTemplateCode@1004 : Code[10];
      ItemNo@1006 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] View deferrals for Archived Purchase Order
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Creating Purchase Line for Item should default deferral code
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::Order,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));

      // [GIVEN] Document is archived
      ArchiveManagement.StorePurchDocument(PurchaseHeader,FALSE);
      FindPurchOrderArchive(PurchHeaderArchive,PurchaseHeader."No.");

      // [WHEN] Open the Posted Purchase Order Archive
      PurchaseOrderArchive.OPENVIEW;
      PurchaseOrderArchive.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseOrderArchive.FILTER.SETFILTER("Doc. No. Occurrence",'1');
      PurchaseOrderArchive.FILTER.SETFILTER("Version No.",'1');
      PurchaseOrderArchive.PurchLinesArchive.FIRST;

      // [THEN] Deferral Schedule Archive can be opened for line
      PurchaseOrderArchive.PurchLinesArchive.DeferralSchedule.INVOKE;

      PurchaseOrderArchive.CLOSE;
    END;

    [Test]
    [HandlerFunctions(DeferralScheduleArchiveHandler)]
    PROCEDURE TestOpenPurchaseReturnOrderArchiveDeferralSchedulePos@77();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1001 : Record 39;
      PurchHeaderArchive@1003 : Record 5109;
      ArchiveManagement@1005 : Codeunit 5063;
      PurchaseReturnOrderArchive@1000 : TestPage 6644;
      DeferralTemplateCode@1004 : Code[10];
      ItemNo@1006 : Code[20];
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 127771] View archive deferrals for return order
      // [GIVEN] User has assigned a default deferral code to an Item
      CreateItemWithDefaultDeferralCode(DeferralTemplateCode,ItemNo,CalcMethod::"Straight-Line",StartDate::"Posting Date",2);

      // [GIVEN] Create and archive the purchase return order with the default deferral
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        PurchaseHeader."Document Type"::"Return Order",PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      ArchiveManagement.StorePurchDocument(PurchaseHeader,FALSE);
      FindPurchReturnOrderArchive(PurchHeaderArchive,PurchaseHeader."No.");

      // [WHEN] Open the Posted Purchase Invoice
      PurchaseReturnOrderArchive.OPENVIEW;
      PurchaseReturnOrderArchive.FILTER.SETFILTER("No.",PurchaseHeader."No.");
      PurchaseReturnOrderArchive.FILTER.SETFILTER("Doc. No. Occurrence",'1');
      PurchaseReturnOrderArchive.FILTER.SETFILTER("Version No.",'1');
      PurchaseReturnOrderArchive.PurchLinesArchive.FIRST;

      // [THEN] Deferral Schedule Archive can be opened for line
      PurchaseReturnOrderArchive.PurchLinesArchive.DeferralSchedule.INVOKE;

      PurchaseReturnOrderArchive.CLOSE;
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      LibraryVariableStorage.Clear;
      // Setup demo data.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      isInitialized := TRUE;
      COMMIT;
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
    END;

    LOCAL PROCEDURE CreateDeferralCode@49(CalcMethod@1004 : 'Straight-Line,Equal per Period,Days per Period,User-Defined';StartDate@1003 : 'Posting Date,Beginning of Period,End of Period,Beginning of Next Period';NumOfPeriods@1002 : Integer) : Code[10];
    VAR
      DeferralTemplate@1000 : Record 1700;
    BEGIN
      DeferralTemplate.INIT;
      DeferralTemplate."Deferral Code" :=
        LibraryUtility.GenerateRandomCode(DeferralTemplate.FIELDNO("Deferral Code"),DATABASE::"Deferral Template");
      DeferralTemplate."Deferral Account" := LibraryERM.CreateGLAccountNo;
      DeferralTemplate."Calc. Method" := CalcMethod;
      DeferralTemplate."Start Date" := StartDate;
      DeferralTemplate."No. of Periods" := NumOfPeriods;
      DeferralTemplate."Period Description" := 'Deferral Revenue for %4';

      DeferralTemplate.INSERT;
      EXIT(DeferralTemplate."Deferral Code");
    END;

    LOCAL PROCEDURE CreateVendor@7() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateItem@2(VAR Item@1000 : Record 27);
    BEGIN
      LibraryInventory.CreateItem(Item);
    END;

    LOCAL PROCEDURE CreateItemWithUnitPrice@17(VAR Item@1001 : Record 27);
    BEGIN
      LibraryInventory.CreateItemWithUnitPriceAndUnitCost(Item,
        LibraryRandom.RandDec(1000,2),
        LibraryRandom.RandDec(1000,2));
    END;

    LOCAL PROCEDURE CreateItemWithDefaultDeferralCode@42(VAR DefaultDeferralCode@1000 : Code[10];VAR ItemNo@1001 : Code[20];DefaultCalcMethod@1003 : Option;DefaultStartDate@1005 : Option;DefaultNoOfPeriods@1004 : Integer);
    VAR
      Item@1002 : Record 27;
    BEGIN
      DefaultDeferralCode := CreateDeferralCode(DefaultCalcMethod,DefaultStartDate,DefaultNoOfPeriods);

      CreateItemWithUnitPrice(Item);
      Item.VALIDATE("Default Deferral Template Code",DefaultDeferralCode);
      Item.MODIFY(TRUE);
      ItemNo := Item."No.";
    END;

    LOCAL PROCEDURE CreateGLAccountWithDefaultDeferralCode@71(VAR DefaultDeferralCode@1000 : Code[10];VAR No@1001 : Code[20];DefaultCalcMethod@1003 : Option;DefaultStartDate@1005 : Option;DefaultNoOfPeriods@1004 : Integer);
    VAR
      GLAccount@1006 : Record 15;
    BEGIN
      DefaultDeferralCode := CreateDeferralCode(DefaultCalcMethod,DefaultStartDate,DefaultNoOfPeriods);

      CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Default Deferral Template Code",DefaultDeferralCode);
      GLAccount.MODIFY(TRUE);
      No := GLAccount."No.";
    END;

    LOCAL PROCEDURE CreateGLAccount@5(VAR GLAccount@1000 : Record 15);
    VAR
      No@1001 : Code[20];
    BEGIN
      No := LibraryERM.CreateGLAccountWithPurchSetup;
      GLAccount.GET(No);
    END;

    LOCAL PROCEDURE CreatePurchDocWithLine@9(VAR PurchaseHeader@1002 : Record 38;VAR PurchaseLine@1001 : Record 39;DocumentType@1004 : Option;PurchLineType@1005 : ' ,G/L Account,Item,,Fixed Asset,Charge (Item)';No@1003 : Code[20];PostingDate@1007 : Date);
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor);
      PurchaseHeader.VALIDATE("Posting Date",PostingDate);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchLineType,No,2);
      CASE PurchaseLine.Type OF
        PurchaseLine.Type::"G/L Account":
          BEGIN
            PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(1000,2));
            PurchaseLine.MODIFY(TRUE);
          END;
        PurchaseLine.Type::Item:
          IF Item.GET(No) THEN BEGIN
            PurchaseLine.VALIDATE("Direct Unit Cost",Item."Unit Cost");
            PurchaseLine.MODIFY(TRUE)
          END;
      END;
    END;

    LOCAL PROCEDURE CreatePurchHeaderForVendor@22(VAR PurchaseHeader@1000 : Record 38;DocumentType@1001 : Integer;PostingDate@1003 : Date;VendorCode@1002 : Code[20]);
    BEGIN
      CLEAR(PurchaseHeader);
      PurchaseHeader.INIT;
      PurchaseHeader.VALIDATE("Document Type",DocumentType);
      PurchaseHeader.VALIDATE("Buy-from Vendor No.",VendorCode);
      PurchaseHeader.VALIDATE("Posting Date",PostingDate);
      PurchaseHeader.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchDocument@115(VAR PurchaseHeader@1003 : Record 38;VAR AmtToDefer@1000 : Decimal;VAR PostingDocNo@1001 : Code[20];DocumentType@1005 : Option;ItemNo@1006 : Code[20]);
    VAR
      PurchaseLine@1002 : Record 39;
      NoSeriesManagement@1004 : Codeunit 396;
    BEGIN
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        DocumentType,PurchaseLine.Type::Item,ItemNo,SetDateDay(1,WORKDATE));
      AmtToDefer := PurchaseLine.GetDeferralAmount;
      PostingDocNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Posting No. Series",PurchaseHeader."Posting Date",FALSE);
    END;

    LOCAL PROCEDURE DeletePurchDoc@15(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      PurchaseHeader.DELETE(TRUE);
    END;

    LOCAL PROCEDURE SetDateDay@16(Day@1000 : Integer;StartDate@1001 : Date) : Date;
    BEGIN
      // Use the workdate but set to a specific day of that month
      EXIT(DMY2DATE(Day,DATE2DMY(StartDate,2),DATE2DMY(StartDate,3)));
    END;

    LOCAL PROCEDURE DeferralLineSetRange@18(VAR DeferralLine@1000 : Record 1702;DocType@1001 : Integer;DocNo@1002 : Code[20];LineNo@1003 : Integer);
    BEGIN
      DeferralLine.SETRANGE("Deferral Doc. Type",GetPurchDeferralDocType);
      DeferralLine.SETRANGE("Gen. Jnl. Template Name",'');
      DeferralLine.SETRANGE("Gen. Jnl. Batch Name",'');
      DeferralLine.SETRANGE("Document Type",DocType);
      DeferralLine.SETRANGE("Document No.",DocNo);
      DeferralLine.SETRANGE("Line No.",LineNo);
    END;

    LOCAL PROCEDURE ValidateDeferralSchedule@19(DocType@1002 : Integer;DocNo@1001 : Code[20];LineNo@1000 : Integer;DeferralTemplateCode@1005 : Code[10];HeaderPostingDate@1006 : Date;HeaderAmountToDefer@1007 : Decimal;NoOfPeriods@1009 : Integer);
    VAR
      DeferralHeader@1004 : Record 1701;
      DeferralLine@1003 : Record 1702;
      Period@1011 : Integer;
      DeferralAmount@1012 : Decimal;
      PostingDate@1013 : Date;
    BEGIN
      DeferralHeader.GET(GetPurchDeferralDocType,'','',DocType,DocNo,LineNo);
      DeferralHeader.TESTFIELD("Deferral Code",DeferralTemplateCode);
      DeferralHeader.TESTFIELD("Start Date",HeaderPostingDate);
      DeferralHeader.TESTFIELD("Amount to Defer",HeaderAmountToDefer);
      DeferralHeader.TESTFIELD("No. of Periods",NoOfPeriods);

      DeferralLineSetRange(DeferralLine,DocType,DocNo,LineNo);
      CLEAR(DeferralAmount);
      Period := 0;
      IF DeferralLine.FINDSET THEN BEGIN
        REPEAT
          IF Period = 0 THEN
            PostingDate := HeaderPostingDate
          ELSE
            PostingDate := SetDateDay(1,HeaderPostingDate);
          PostingDate := PeriodDate(PostingDate,Period);
          DeferralLine.TESTFIELD("Posting Date",PostingDate);
          DeferralAmount := DeferralAmount + DeferralLine.Amount;
          Period := Period + 1;
        UNTIL DeferralLine.NEXT = 0;
      END;
      DeferralHeader.TESTFIELD("Amount to Defer",DeferralAmount);
    END;

    LOCAL PROCEDURE ValidateDeferralScheduleDoesNotExist@21(DocType@1002 : Integer;DocNo@1001 : Code[20];LineNo@1000 : Integer);
    VAR
      DeferralHeader@1004 : Record 1701;
      DeferralLine@1003 : Record 1702;
    BEGIN
      ASSERTERROR DeferralHeader.GET(GetPurchDeferralDocType,'','',DocType,DocNo,LineNo);

      DeferralLineSetRange(DeferralLine,DocType,DocNo,LineNo);
      ASSERTERROR DeferralLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CopyDoc@23(PurchaseHeader@1000 : Record 38;DocType@1001 : Integer;DocNo@1004 : Code[20];IncludeHeader@1003 : Boolean;RecalculateLines@1002 : Boolean);
    VAR
      CopyPurchaseDoc@1005 : Report 492;
    BEGIN
      CLEAR(CopyPurchaseDoc);
      CopyPurchaseDoc.InitializeRequest(ConvertDocType(DocType),DocNo,IncludeHeader,RecalculateLines);
      CopyPurchaseDoc.SetPurchHeader(PurchaseHeader);
      CopyPurchaseDoc.USEREQUESTPAGE(FALSE);
      CopyPurchaseDoc.RUNMODAL;
    END;

    LOCAL PROCEDURE ConvertDocType@24(DocType@1000 : Integer) : Integer;
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      CASE DocType OF
        PurchaseHeader."Document Type"::Quote:
          EXIT(CopyDocType::Quote);
        PurchaseHeader."Document Type"::"Blanket Order":
          EXIT(CopyDocType::"Blanket Order");
        PurchaseHeader."Document Type"::Order:
          EXIT(CopyDocType::Order);
        PurchaseHeader."Document Type"::Invoice:
          EXIT(CopyDocType::Invoice);
        PurchaseHeader."Document Type"::"Return Order":
          EXIT(CopyDocType::"Return Order");
        PurchaseHeader."Document Type"::"Credit Memo":
          EXIT(CopyDocType::"Credit Memo");
        ELSE
          EXIT(DocType);
      END;
    END;

    LOCAL PROCEDURE ValidateDeferralHeader@28(DeferralHeader@1004 : Record 1701;DeferralCode@1003 : Code[10];AmountToDefer@1002 : Decimal;CalcMethod@1001 : Option;StartDate@1000 : Date;NoOfPeriods@1005 : Integer;ScheduleDesc@1006 : Text[50];CurrencyCode@1007 : Code[10]);
    BEGIN
      DeferralHeader.TESTFIELD("Deferral Code",DeferralCode);
      DeferralHeader.TESTFIELD("Amount to Defer",AmountToDefer);
      DeferralHeader.TESTFIELD("Calc. Method",CalcMethod);
      DeferralHeader.TESTFIELD("Start Date",StartDate);
      DeferralHeader.TESTFIELD("No. of Periods",NoOfPeriods);
      DeferralHeader.TESTFIELD("Schedule Description",ScheduleDesc);
      DeferralHeader.TESTFIELD("Currency Code",CurrencyCode);
    END;

    LOCAL PROCEDURE ValidateDeferralLine@29(DeferralLine@1003 : Record 1702;PostingDate@1002 : Date;Desc@1001 : Text[50];Amt@1000 : Decimal;CurrencyCode@1004 : Code[10]);
    BEGIN
      DeferralLine.TESTFIELD("Posting Date",PostingDate);
      DeferralLine.TESTFIELD(Description,Desc);
      DeferralLine.TESTFIELD(Amount,Amt);
      DeferralLine.TESTFIELD("Currency Code",CurrencyCode);
    END;

    LOCAL PROCEDURE VerifyDeferralsAreEqual@32(PurchaseLineOrig@1001 : Record 39;PurchaseLineDest@1000 : Record 39);
    VAR
      DeferralHeaderOrig@1002 : Record 1701;
      DeferralHeaderDest@1003 : Record 1701;
      DeferralLineOrig@1004 : Record 1702;
      DeferralLineDest@1005 : Record 1702;
    BEGIN
      FindDeferralHeader(PurchaseLineOrig,DeferralHeaderOrig);
      FindDeferralHeader(PurchaseLineDest,DeferralHeaderDest);

      ValidateDeferralHeader(DeferralHeaderDest,
        DeferralHeaderOrig."Deferral Code",
        DeferralHeaderOrig."Amount to Defer",
        DeferralHeaderOrig."Calc. Method",
        DeferralHeaderOrig."Start Date",
        DeferralHeaderOrig."No. of Periods",
        DeferralHeaderOrig."Schedule Description",
        DeferralHeaderOrig."Currency Code");

      RangeDeferralLines(DeferralHeaderDest,DeferralLineDest);
      RangeDeferralLines(DeferralHeaderOrig,DeferralLineOrig);
      REPEAT
        ValidateDeferralLine(DeferralLineDest,DeferralLineOrig."Posting Date",
          DeferralLineOrig.Description,DeferralLineOrig.Amount,DeferralLineOrig."Currency Code");
        DeferralLineDest.NEXT;
      UNTIL DeferralLineOrig.NEXT = 0;
    END;

    LOCAL PROCEDURE FindDeferralHeader@33(PurchaseLine@1000 : Record 39;VAR DeferralHeader@1001 : Record 1701);
    BEGIN
      DeferralHeader.GET(GetPurchDeferralDocType,'','',
        PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
    END;

    LOCAL PROCEDURE RangeDeferralLines@34(DeferralHeader@1000 : Record 1701;VAR DeferralLine@1001 : Record 1702);
    BEGIN
      DeferralLine.SETRANGE("Deferral Doc. Type",DeferralHeader."Deferral Doc. Type");
      DeferralLine.SETRANGE("Gen. Jnl. Template Name",DeferralHeader."Gen. Jnl. Template Name");
      DeferralLine.SETRANGE("Gen. Jnl. Batch Name",DeferralHeader."Gen. Jnl. Batch Name");
      DeferralLine.SETRANGE("Document Type",DeferralHeader."Document Type");
      DeferralLine.SETRANGE("Document No.",DeferralHeader."Document No.");
      DeferralLine.SETRANGE("Line No.",DeferralHeader."Line No.");
      DeferralLine.FIND('-');
    END;

    LOCAL PROCEDURE VerifyPostedDeferralsAreEqual@36(PurchInvLine@1001 : Record 123;PurchaseLine@1000 : Record 39);
    VAR
      PostedDeferralHeader@1002 : Record 1704;
      DeferralHeader@1003 : Record 1701;
      PostedDeferralLine@1004 : Record 1705;
      DeferralLine@1005 : Record 1702;
    BEGIN
      FindPostedDeferralHeader(PurchInvLine,PostedDeferralHeader);
      FindDeferralHeader(PurchaseLine,DeferralHeader);

      ValidateDeferralHeader(DeferralHeader,
        PostedDeferralHeader."Deferral Code",
        PostedDeferralHeader."Amount to Defer",
        PostedDeferralHeader."Calc. Method",
        PostedDeferralHeader."Start Date",
        PostedDeferralHeader."No. of Periods",
        PostedDeferralHeader."Schedule Description",
        PostedDeferralHeader."Currency Code");

      RangeDeferralLines(DeferralHeader,DeferralLine);
      RangePostedDeferralLines(PostedDeferralHeader,PostedDeferralLine);
      REPEAT
        ValidateDeferralLine(DeferralLine,PostedDeferralLine."Posting Date",PostedDeferralLine.Description,
          PostedDeferralLine.Amount,PostedDeferralLine."Currency Code");
        DeferralLine.NEXT;
      UNTIL PostedDeferralLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FindPostedDeferralHeader@35(PurchInvLine@1000 : Record 123;VAR PostedDeferralHeader@1001 : Record 1704);
    BEGIN
      PostedDeferralHeader.GET(GetPurchDeferralDocType,'','',
        CopyDocType::"Posted Invoice",PurchInvLine."Document No.",PurchInvLine."Line No.");
    END;

    LOCAL PROCEDURE RangePostedDeferralLines@31(PostedDeferralHeader@1000 : Record 1704;VAR PostedDeferralLine@1001 : Record 1705);
    BEGIN
      PostedDeferralLine.SETRANGE("Deferral Doc. Type",PostedDeferralHeader."Deferral Doc. Type");
      PostedDeferralLine.SETRANGE("Gen. Jnl. Document No.",PostedDeferralHeader."Gen. Jnl. Document No.");
      PostedDeferralLine.SETRANGE("Account No.",PostedDeferralHeader."Account No.");
      PostedDeferralLine.SETRANGE("Document Type",PostedDeferralHeader."Document Type");
      PostedDeferralLine.SETRANGE("Document No.",PostedDeferralHeader."Document No.");
      PostedDeferralLine.SETRANGE("Line No.",PostedDeferralHeader."Line No.");
      PostedDeferralLine.FIND('-');
    END;

    LOCAL PROCEDURE ModifyDeferral@39(PurchaseLine@1000 : Record 39;CalcMethod@1002 : Option;NoOfPeriods@1003 : Integer;DeferralAmount@1004 : Decimal;StartDate@1005 : Date);
    VAR
      DeferralHeader@1001 : Record 1701;
      DeferralUtilities@1006 : Codeunit 1720;
    BEGIN
      DeferralHeader.GET(GetPurchDeferralDocType,'','',
        PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      DeferralUtilities.SetDeferralRecords(DeferralHeader,GetPurchDeferralDocType,'','',
        PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.",
        CalcMethod,NoOfPeriods,DeferralAmount,StartDate,
        DeferralHeader."Deferral Code",DeferralHeader."Schedule Description",
        PurchaseLine.GetDeferralAmount,TRUE,DeferralHeader."Currency Code");
      DeferralUtilities.CreateDeferralSchedule(DeferralHeader."Deferral Code",DeferralHeader."Deferral Doc. Type",
        DeferralHeader."Gen. Jnl. Template Name",DeferralHeader."Gen. Jnl. Batch Name",
        DeferralHeader."Document Type",DeferralHeader."Document No.",DeferralHeader."Line No.",
        DeferralHeader."Amount to Defer",DeferralHeader."Calc. Method",DeferralHeader."Start Date",
        DeferralHeader."No. of Periods",FALSE,DeferralHeader."Schedule Description",FALSE,DeferralHeader."Currency Code");
    END;

    LOCAL PROCEDURE VerifyDeferralArchivesAreEqual@45(PurchLineArchive@1001 : Record 5110;PurchaseLine@1000 : Record 39);
    VAR
      DeferralHeaderArchive@1002 : Record 5127;
      DeferralHeader@1003 : Record 1701;
      DeferralLineArchive@1004 : Record 5128;
      DeferralLine@1005 : Record 1702;
    BEGIN
      FindDeferralHeaderArchive(PurchLineArchive,DeferralHeaderArchive);
      FindDeferralHeader(PurchaseLine,DeferralHeader);

      ValidateDeferralHeader(DeferralHeader,
        DeferralHeaderArchive."Deferral Code",
        DeferralHeaderArchive."Amount to Defer",
        DeferralHeaderArchive."Calc. Method",
        DeferralHeaderArchive."Start Date",
        DeferralHeaderArchive."No. of Periods",
        DeferralHeaderArchive."Schedule Description",
        DeferralHeaderArchive."Currency Code");

      RangeDeferralLines(DeferralHeader,DeferralLine);
      RangeDeferralLineArchives(DeferralHeaderArchive,DeferralLineArchive);
      REPEAT
        ValidateDeferralLine(DeferralLine,DeferralLineArchive."Posting Date",DeferralLineArchive.Description,
          DeferralLineArchive.Amount,DeferralLineArchive."Currency Code");
        DeferralLine.NEXT;
      UNTIL DeferralLineArchive.NEXT = 0;
    END;

    LOCAL PROCEDURE FindDeferralHeaderArchive@44(PurchaseLineArchive@1000 : Record 5110;VAR DeferralHeaderArchive@1001 : Record 5127);
    BEGIN
      DeferralHeaderArchive.GET(GetPurchDeferralDocType,
        PurchaseLineArchive."Document Type",PurchaseLineArchive."Document No.",
        PurchaseLineArchive."Doc. No. Occurrence",PurchaseLineArchive."Version No.",PurchaseLineArchive."Line No.");
    END;

    LOCAL PROCEDURE RangeDeferralLineArchives@43(DeferralHeaderArchive@1000 : Record 5127;VAR DeferralLineArchive@1001 : Record 5128);
    BEGIN
      DeferralLineArchive.SETRANGE("Deferral Doc. Type",DeferralHeaderArchive."Deferral Doc. Type");
      DeferralLineArchive.SETRANGE("Document Type",DeferralHeaderArchive."Document Type");
      DeferralLineArchive.SETRANGE("Document No.",DeferralHeaderArchive."Document No.");
      DeferralLineArchive.SETRANGE("Line No.",DeferralHeaderArchive."Line No.");
      DeferralLineArchive.SETRANGE("Doc. No. Occurrence",DeferralHeaderArchive."Doc. No. Occurrence");
      DeferralLineArchive.SETRANGE("Version No.",DeferralHeaderArchive."Version No.");
      DeferralLineArchive.FIND('-');
    END;

    LOCAL PROCEDURE FindPurchLine@51(PurchaseHeader@1001 : Record 38;VAR PurchaseLine@1002 : Record 39);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FIND('-');
    END;

    LOCAL PROCEDURE FindPurchLineArchive@52(PurchaseHeader@1001 : Record 38;VAR PurchaseLineArchive@1000 : Record 5110);
    BEGIN
      PurchaseLineArchive.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLineArchive.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLineArchive.SETRANGE("Doc. No. Occurrence",1);
      PurchaseLineArchive.SETRANGE("Version No.",1);
      PurchaseLineArchive.FIND('-');
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@37(Question@1000 : Text[1024]);
    BEGIN
    END;

    LOCAL PROCEDURE FindPurchOrderArchive@53(VAR PurchaseHeaderArchive@1000 : Record 5109;No@1001 : Code[20]);
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      PurchaseHeaderArchive.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseHeaderArchive.SETRANGE("No.",No);
      PurchaseHeaderArchive.FINDFIRST;
    END;

    LOCAL PROCEDURE DeletePurchOrderArchive@48(No@1000 : Code[20]);
    VAR
      PurchHeaderArchive@1002 : Record 5109;
      DeletePurchaseOrderVersions@1001 : Report 5178;
    BEGIN
      FindPurchOrderArchive(PurchHeaderArchive,No);
      DeletePurchaseOrderVersions.USEREQUESTPAGE(FALSE);
      DeletePurchaseOrderVersions.SETTABLEVIEW(PurchHeaderArchive);
      DeletePurchaseOrderVersions.RUN;
    END;

    LOCAL PROCEDURE FindPurchReturnOrderArchive@75(VAR PurchHeaderArchive@1000 : Record 5109;No@1001 : Code[20]);
    VAR
      PurchaseHeader@1002 : Record 38;
    BEGIN
      PurchHeaderArchive.SETRANGE("Document Type",PurchaseHeader."Document Type"::"Return Order");
      PurchHeaderArchive.SETRANGE("No.",No);
      PurchHeaderArchive.FINDFIRST;
    END;

    LOCAL PROCEDURE ValidateDeferralArchiveScheduleDoesNotExist@50(DocType@1002 : Integer;DocNo@1001 : Code[20];LineNo@1000 : Integer);
    VAR
      DeferralHeaderArchive@1004 : Record 5127;
      DeferralLineArchive@1003 : Record 5128;
    BEGIN
      ASSERTERROR DeferralHeaderArchive.GET(GetPurchDeferralDocType,'','',DocType,DocNo,LineNo);

      DeferralLineArchive.SETRANGE("Deferral Doc. Type",GetPurchDeferralDocType);
      DeferralLineArchive.SETRANGE("Document Type",DocType);
      DeferralLineArchive.SETRANGE("Document No.",DocNo);
      DeferralLineArchive.SETRANGE("Line No.",LineNo);
      ASSERTERROR DeferralLineArchive.FINDFIRST;
    END;

    LOCAL PROCEDURE ValidatePostedDeferralSchedule@57(DocType@1002 : Integer;DocNo@1001 : Code[20];LineNo@1000 : Integer;DeferralTemplateCode@1005 : Code[10];HeaderPostingDate@1006 : Date;HeaderAmountToDefer@1007 : Decimal;HeaderAmountToDeferLCY@1008 : Decimal;NoOfPeriods@1009 : Integer);
    VAR
      PostedDeferralHeader@1004 : Record 1704;
      PostedDeferralLine@1003 : Record 1705;
      Period@1011 : Integer;
      DeferralAmount@1012 : Decimal;
      PostingDate@1013 : Date;
    BEGIN
      PostedDeferralHeader.GET(GetPurchDeferralDocType,'','',DocType,DocNo,LineNo);
      PostedDeferralHeader.TESTFIELD("Deferral Code",DeferralTemplateCode);
      PostedDeferralHeader.TESTFIELD("Start Date",HeaderPostingDate);
      PostedDeferralHeader.TESTFIELD("Amount to Defer",HeaderAmountToDefer);
      PostedDeferralHeader.TESTFIELD("Amount to Defer (LCY)",HeaderAmountToDeferLCY);
      PostedDeferralHeader.TESTFIELD("No. of Periods",NoOfPeriods);

      RangePostedDeferralLines(PostedDeferralHeader,PostedDeferralLine);
      CLEAR(DeferralAmount);
      Period := 0;
      IF PostedDeferralLine.FINDSET THEN BEGIN
        REPEAT
          IF Period = 0 THEN
            PostingDate := HeaderPostingDate
          ELSE
            PostingDate := SetDateDay(1,HeaderPostingDate);
          PostingDate := PeriodDate(PostingDate,Period);
          PostedDeferralLine.TESTFIELD("Posting Date",PostingDate);
          DeferralAmount := DeferralAmount + PostedDeferralLine.Amount;
          Period := Period + 1;
        UNTIL PostedDeferralLine.NEXT = 0;
      END;
      PostedDeferralHeader.TESTFIELD("Amount to Defer",DeferralAmount);
    END;

    LOCAL PROCEDURE FindPurchInvoiceLine@56(VAR PurchInvLine@1003 : Record 123;No@1001 : Code[20]);
    BEGIN
      PurchInvLine.SETRANGE("Document No.",No);
      PurchInvLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchCrMemoLine@58(VAR PurchCrMemoLine@1003 : Record 125;No@1001 : Code[20]);
    BEGIN
      PurchCrMemoLine.SETRANGE("Document No.",No);
      PurchCrMemoLine.FINDFIRST;
    END;

    LOCAL PROCEDURE GetDeferralTemplateAccount@59(DeferralTemplateCode@1000 : Code[10]) : Code[20];
    VAR
      DeferralTemplate@1001 : Record 1700;
    BEGIN
      DeferralTemplate.GET(DeferralTemplateCode);
      EXIT(DeferralTemplate."Deferral Account");
    END;

    LOCAL PROCEDURE GetPurchDeferralDocType@126() : Integer;
    VAR
      DeferralUtilities@1000 : Codeunit 1720;
    BEGIN
      EXIT(DeferralUtilities.GetPurchDeferralDocType);
    END;

    LOCAL PROCEDURE GLCalcSum@61(DocNo@1000 : Code[20];AccNo@1005 : Code[20];StartPostDate@1001 : Date;EndPostDate@1004 : Date;VAR RecCount@1002 : Integer;VAR AccAmt@1003 : Decimal;VAR NonDeferralAmt@1007 : Decimal);
    VAR
      GLEntry@1006 : Record 17;
    BEGIN
      CLEAR(AccAmt);
      CLEAR(GLEntry);
      GLEntry.SETRANGE("Document No.",DocNo);
      GLEntry.SETRANGE("G/L Account No.",AccNo);
      GLEntry.SETRANGE("Posting Date",StartPostDate,EndPostDate);
      RecCount := GLEntry.COUNT;
      GLEntry.CALCSUMS(Amount);
      AccAmt := GLEntry.Amount;
      IF GLEntry.FINDFIRST THEN
        NonDeferralAmt := GLEntry.Amount;
    END;

    LOCAL PROCEDURE PeriodDate@60(PostingDate@1000 : Date;Period@1001 : Integer) : Date;
    VAR
      Expr@1002 : Text[50];
    BEGIN
      // Expr := '<' + FORMAT(Period) + 'M>';
      // EXIT(CALCDATE(Expr,PostingDate));
      Expr := FORMAT(Period);
      EXIT(CALCDATE('<' + Expr + 'M>',PostingDate));
    END;

    [ModalPageHandler]
    PROCEDURE DeferralScheduleHandler@72(VAR DeferralSchedule@1000 : TestPage 1702);
    VAR
      AmountToDefer@1001 : Variant;
    BEGIN
      // Modal Page Handler.
      LibraryVariableStorage.Dequeue(AmountToDefer);
      DeferralSchedule."Amount to Defer".ASSERTEQUALS(AmountToDefer);
    END;

    [ModalPageHandler]
    PROCEDURE UpdateDeferralSchedulePeriodHandler@98(VAR DeferralSchedule@1000 : TestPage 1702);
    VAR
      NoOfPeriods@1001 : Variant;
    BEGIN
      // Modal Page Handler.
      LibraryVariableStorage.Dequeue(NoOfPeriods);
      DeferralSchedule."No. of Periods".SETVALUE(NoOfPeriods);
      DeferralSchedule.CalculateSchedule.INVOKE;
      DeferralSchedule.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DeferralScheduleViewHandler@84(VAR DeferralScheduleView@1000 : TestPage 1704);
    BEGIN
      // Modal Page Handler.
      DeferralScheduleView.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE DeferralScheduleArchiveHandler@92(VAR DeferralScheduleArchive@1000 : TestPage 1706);
    BEGIN
      // Modal Page Handler.
      DeferralScheduleArchive.OK.INVOKE;
    END;

    LOCAL PROCEDURE ValidateReturnsDeferralStartDate@90(DocType@1002 : Integer;DocNo@1001 : Code[20];LineNo@1000 : Integer;ReturnsDeferralStartDate@1007 : Date;VAR DeferralAmount@1003 : Decimal);
    VAR
      DeferralLine@1004 : Record 1702;
      Period@1005 : Integer;
      PostingDate@1006 : Date;
    BEGIN
      CLEAR(DeferralAmount);
      DeferralLine.SETRANGE("Deferral Doc. Type",GetPurchDeferralDocType);
      DeferralLine.SETRANGE("Gen. Jnl. Template Name",'');
      DeferralLine.SETRANGE("Gen. Jnl. Batch Name",'');
      DeferralLine.SETRANGE("Document Type",DocType);
      DeferralLine.SETRANGE("Document No.",DocNo);
      DeferralLine.SETRANGE("Line No.",LineNo);
      Period := 0;
      IF DeferralLine.FINDSET THEN BEGIN
        REPEAT
          IF Period = 0 THEN
            PostingDate := ReturnsDeferralStartDate
          ELSE
            PostingDate := SetDateDay(1,ReturnsDeferralStartDate);
          PostingDate := PeriodDate(PostingDate,Period);
          DeferralLine.TESTFIELD("Posting Date",PostingDate);
          DeferralAmount := DeferralAmount + DeferralLine.Amount;
          Period := Period + 1;
        UNTIL DeferralLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetStartDate@6(DeferralStartOption@1002 : Option;StartDate@1000 : Date) AdjustedStartDate : Date;
    VAR
      AccountingPeriod@1001 : Record 50;
      DeferralTemplate@1003 : Record 1700;
    BEGIN
      CASE DeferralStartOption OF
        DeferralTemplate."Start Date"::"Posting Date":
          AdjustedStartDate := StartDate;
        DeferralTemplate."Start Date"::"Beginning of Period":
          BEGIN
            AccountingPeriod.SETRANGE("Starting Date",0D,StartDate);
            IF AccountingPeriod.FINDLAST THEN
              AdjustedStartDate := AccountingPeriod."Starting Date";
          END;
        DeferralTemplate."Start Date"::"End of Period":
          BEGIN
            AccountingPeriod.SETFILTER("Starting Date",'>%1',StartDate);
            IF AccountingPeriod.FINDFIRST THEN
              AdjustedStartDate := CALCDATE('<-1D>',AccountingPeriod."Starting Date");
          END;
        DeferralTemplate."Start Date"::"Beginning of Next Period":
          BEGIN
            AccountingPeriod.SETFILTER("Starting Date",'>%1',StartDate);
            IF AccountingPeriod.FINDFIRST THEN
              AdjustedStartDate := AccountingPeriod."Starting Date";
          END;
      END;
    END;

    LOCAL PROCEDURE CreateCurrency@76() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreatePurchDocWithCurrencyAndLine@26(VAR PurchaseHeader@1002 : Record 38;VAR PurchaseLine@1001 : Record 39;DocumentType@1004 : Option;PurchLineType@1005 : ' ,G/L Account,Item,,Fixed Asset,Charge (Item)';No@1003 : Code[20];PostingDate@1007 : Date);
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,CreateVendor);
      PurchaseHeader.VALIDATE("Currency Code",CreateCurrency);
      PurchaseHeader.VALIDATE("Posting Date",PostingDate);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchLineType,No,2);
      CASE PurchaseLine.Type OF
        PurchaseLine.Type::"G/L Account":
          BEGIN
            PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(1000,2));
            PurchaseLine.MODIFY(TRUE);
          END;
        PurchaseLine.Type::Item:
          IF Item.GET(No) THEN BEGIN
            PurchaseLine.VALIDATE("Direct Unit Cost",Item."Unit Cost");
            PurchaseLine.MODIFY(TRUE)
          END;
      END;
    END;

    LOCAL PROCEDURE ValidateGL@41(DocNo@1000 : Code[20];AccNo@1001 : Code[20];PostingDate@1002 : Date;PeriodDate@1003 : Date;DeferralCount@1005 : Integer;DeferralSum@1006 : Decimal);
    VAR
      GLSum@1007 : Decimal;
      NonDeferralAmt@1004 : Decimal;
      GLCount@1008 : Integer;
    BEGIN
      GLCalcSum(DocNo,AccNo,PostingDate,PeriodDate,GLCount,GLSum,NonDeferralAmt);
      ValidateAccounts(DeferralCount,DeferralSum,GLCount,GLSum);
    END;

    LOCAL PROCEDURE ValidateGLPurchAccount@100(DocNo@1000 : Code[20];PurchAccount@1001 : Code[20];PostingDate@1002 : Date;PeriodDate@1003 : Date;DeferralCount@1005 : Integer;PurchAmount@1006 : Decimal);
    VAR
      GLPurchAmount@1007 : Decimal;
      GLSum@1004 : Decimal;
      GLCount@1008 : Integer;
    BEGIN
      GLCalcSum(DocNo,PurchAccount,PostingDate,PeriodDate,GLCount,GLSum,GLPurchAmount);
      ValidateAccounts(DeferralCount,PurchAmount,GLCount,ABS(GLPurchAmount));
    END;

    LOCAL PROCEDURE ValidateAccounts@110(DeferralCount@1003 : Integer;DeferralAmount@1002 : Decimal;GLCount@1000 : Integer;GLAmt@1001 : Decimal);
    BEGIN
      Assert.AreEqual(DeferralCount,GLCount,'An incorrect number of lines was posted');
      Assert.AreEqual(DeferralAmount,GLAmt,'An incorrect Amount was posted for purchase');
    END;

    LOCAL PROCEDURE CreatePurchDocAndDeferralTemplateCode@46(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;VAR DeferralTemplateCode@1002 : Code[10];DocType@1004 : Option);
    VAR
      GLAccount@1003 : Record 15;
    BEGIN
      CreateGLAccount(GLAccount);
      CreatePurchDocWithLine(PurchaseHeader,PurchaseLine,
        DocType,PurchaseLine.Type::"G/L Account",GLAccount."No.",SetDateDay(1,WORKDATE));
      DeferralTemplateCode := CreateDeferralCode(CalcMethod::"Straight-Line",StartDate::"Posting Date",2);
    END;

    LOCAL PROCEDURE VerifyPostedInvoiceDeferralsAndGL@108(DocNo@1000 : Code[20];DeferralTemplateCode@1003 : Code[10];AccNo@1005 : Code[20];AmtToDefer@1004 : Decimal;AmtToDeferLCY@1008 : Decimal;Day@1007 : Integer;NoOfPeriods@1009 : Integer;GLRecordCount@1010 : Integer);
    VAR
      PurchInvLine@1001 : Record 123;
      GLSum@1006 : Decimal;
      NonDeferralAmt@1011 : Decimal;
      GLCount@1002 : Integer;
    BEGIN
      // The deferrals were moved to the Posted Invoice Line and Posted Deferral tables
      FindPurchInvoiceLine(PurchInvLine,DocNo);
      PurchInvLine.TESTFIELD("Deferral Code",DeferralTemplateCode);
      ValidatePostedDeferralSchedule(PurchDocType::"Posted Invoice",DocNo,
        PurchInvLine."Line No.",DeferralTemplateCode,SetDateDay(Day,WORKDATE),AmtToDefer,AmtToDeferLCY,NoOfPeriods);

      // The correct deferrals were posted to GL
      GLCalcSum(DocNo,AccNo,SetDateDay(Day,WORKDATE),PeriodDate(SetDateDay(Day,WORKDATE),NoOfPeriods),GLCount,GLSum,NonDeferralAmt);
      Assert.AreEqual(GLRecordCount,GLCount,'An incorrect number of lines was posted');
      Assert.AreEqual(0,GLSum,'An incorrect amount was posted');
    END;

    LOCAL PROCEDURE VerifyPostedInvoiceDeferralsAndGLWithPurchAmt@63(DocNo@1000 : Code[20];DeferralTemplateCode@1003 : Code[10];AccNo@1005 : Code[20];PurchAccount@1012 : Code[20];AmtToDefer@1004 : Decimal;AmtToDeferLCY@1008 : Decimal;Day@1007 : Integer;NoOfPeriods@1009 : Integer;GLRecordCount@1010 : Integer;PurchRecordCount@1011 : Integer;PurchAmount@1013 : Decimal);
    VAR
      PurchInvLine@1001 : Record 123;
      GLPurchAmount@1014 : Decimal;
      GLSum@1006 : Decimal;
      NonDeferralAmt@1015 : Decimal;
      GLCount@1002 : Integer;
    BEGIN
      // The deferrals were moved to the Purchase Invoice Line and Posted Deferral tables
      FindPurchInvoiceLine(PurchInvLine,DocNo);
      PurchInvLine.TESTFIELD("Deferral Code",DeferralTemplateCode);
      ValidatePostedDeferralSchedule(PurchDocType::"Posted Invoice",DocNo,
        PurchInvLine."Line No.",DeferralTemplateCode,SetDateDay(Day,WORKDATE),AmtToDefer,AmtToDeferLCY,NoOfPeriods);

      // The amount not deferred was posted to GL for the purchase account
      GLCalcPurchAmount(DocNo,PurchAccount,
        SetDateDay(Day,WORKDATE),PeriodDate(SetDateDay(Day,WORKDATE),NoOfPeriods),GLCount,GLSum,GLPurchAmount);
      Assert.AreEqual(PurchRecordCount,GLCount,'An incorrect number of lines was posted');
      Assert.AreEqual(PurchAmount,ABS(GLPurchAmount),'An incorrect Amount was posted for purchases');

      // The deferrals account was
      GLCalcSum(DocNo,AccNo,SetDateDay(Day,WORKDATE),PeriodDate(SetDateDay(Day,WORKDATE),NoOfPeriods),GLCount,GLSum,NonDeferralAmt);
      Assert.AreEqual(GLRecordCount,GLCount,'An incorrect number of lines was posted');
      Assert.AreEqual(0,GLSum,'An incorrect amount was posted');
    END;

    LOCAL PROCEDURE GLCalcPurchAmount@99(DocNo@1000 : Code[20];AccNo@1005 : Code[20];StartPostDate@1001 : Date;EndPostDate@1004 : Date;VAR RecCount@1002 : Integer;VAR AccAmt@1003 : Decimal;VAR PurchAmt@1006 : Decimal);
    VAR
      GLEntry@1007 : Record 17;
    BEGIN
      CLEAR(AccAmt);
      CLEAR(GLEntry);
      GLEntry.SETRANGE("Document No.",DocNo);
      GLEntry.SETRANGE("G/L Account No.",AccNo);
      GLEntry.SETRANGE("Posting Date",StartPostDate,EndPostDate);
      RecCount := GLEntry.COUNT;
      IF GLEntry.FIND('-') THEN BEGIN
        PurchAmt := GLEntry.Amount;
        REPEAT
          AccAmt := AccAmt + GLEntry.Amount;
        UNTIL GLEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateQtyToReceiveInvoiceOnPurchLine@107(VAR PurchLine@1001 : Record 39;Quantity@1000 : Decimal;QuantityToReceive@1002 : Decimal;QuantityToInvoice@1003 : Decimal);
    BEGIN
      PurchLine.VALIDATE(Quantity,Quantity);
      PurchLine.VALIDATE("Qty. to Receive",QuantityToReceive);
      PurchLine.VALIDATE("Qty. to Invoice",QuantityToInvoice);
      PurchLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetInvoiceQtyAmtToDefer@109(VAR PurchLine@1000 : Record 39;DeferralAmount@1003 : Decimal;CurrencyCode@1001 : Code[20]) : Decimal;
    VAR
      Currency@1002 : Record 4;
    BEGIN
      IF CurrencyCode = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET(CurrencyCode);
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
      EXIT(ROUND(DeferralAmount *
          PurchLine."Qty. to Invoice" / PurchLine.Quantity,Currency."Amount Rounding Precision"));
    END;

    LOCAL PROCEDURE GetCombinedDeferralLines@118(VAR TempPostedDeferralLine@1000 : TEMPORARY Record 1705;DocNo@1002 : Code[20]);
    VAR
      PostedDeferralLine@1001 : Record 1705;
    BEGIN
      PostedDeferralLine.SETRANGE("Document No.",DocNo);
      PostedDeferralLine.FINDSET;
      REPEAT
        TempPostedDeferralLine.SETRANGE("Document No.",DocNo);
        TempPostedDeferralLine.SETRANGE("Posting Date",PostedDeferralLine."Posting Date");
        IF NOT TempPostedDeferralLine.FINDFIRST THEN BEGIN
          TempPostedDeferralLine.INIT;
          TempPostedDeferralLine."Document No." := DocNo;
          TempPostedDeferralLine."Posting Date" := PostedDeferralLine."Posting Date";
          TempPostedDeferralLine.INSERT;
        END;
        TempPostedDeferralLine.Amount += PostedDeferralLine.Amount;
        TempPostedDeferralLine.MODIFY;
      UNTIL PostedDeferralLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SetupBatchPostingReportParameters@124(VAR NewPostingDate@1000 : Date;PostingDate@1003 : Date;ConfirmCnt@1001 : Integer;ConfirmValue@1002 : Boolean);
    BEGIN
      NewPostingDate := CALCDATE('<+1M>',PostingDate);
      LibraryVariableStorage.Enqueue(NewPostingDate);
      LibraryVariableStorage.Enqueue(ConfirmCnt);
      LibraryVariableStorage.Enqueue(ConfirmValue);
    END;

    LOCAL PROCEDURE VerifyDeferralHeaderLinesRemoved@111(DocType@1004 : Option;DocNo@1000 : Code[20];LineNo@1005 : Integer);
    VAR
      DeferralHeader@1001 : Record 1701;
      DeferralLine@1003 : Record 1702;
    BEGIN
      ASSERTERROR DeferralHeader.GET(GetPurchDeferralDocType,'','',DocType,DocNo,LineNo);
      ASSERTERROR LibraryERM.FindDeferralLine(DeferralLine,GetPurchDeferralDocType,'','',DocType,DocNo,LineNo);
    END;

    LOCAL PROCEDURE VerifyGLForDeferralPeriod@117(DocNo@1000 : Code[20];AccNo@1001 : Code[20];PurchAmt@1002 : Decimal);
    VAR
      TempPostedDeferralLine@1003 : TEMPORARY Record 1705;
      GLEntry@1004 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document No.",DocNo);
        SETRANGE("G/L Account No.",AccNo);
        SETRANGE("Gen. Posting Type","Gen. Posting Type"::Purchase);
        CALCSUMS(Amount);
        TESTFIELD(Amount,PurchAmt);

        GetCombinedDeferralLines(TempPostedDeferralLine,DocNo);
        TempPostedDeferralLine.RESET;
        TempPostedDeferralLine.FINDSET;
        SETRANGE("Gen. Posting Type","Gen. Posting Type"::" ");
        REPEAT
          SETRANGE("Posting Date",TempPostedDeferralLine."Posting Date");
          FINDFIRST;
          TESTFIELD(Amount,-TempPostedDeferralLine.Amount);
        UNTIL TempPostedDeferralLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyDeferralScheduleAmounts@120(PurchaseLine@1000 : Record 39);
    VAR
      DeferralHeader@1001 : Record 1701;
      DeferralLine@1002 : Record 1702;
      DeferralAmount@1005 : Decimal;
      CostOfDay@1006 : Decimal;
      PeriodAmt@1007 : Decimal;
      TotalAmt@1008 : Decimal;
      TotalDays@1009 : Integer;
      i@1010 : Integer;
    BEGIN
      DeferralHeader.GET(
        GetPurchDeferralDocType,'','',
        PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      DeferralAmount := PurchaseLine.GetDeferralAmount;
      TotalDays :=
        CALCDATE(STRSUBSTNO('<%1M>',DeferralHeader."No. of Periods"),DeferralHeader."Start Date") - DeferralHeader."Start Date";
      CostOfDay := DeferralAmount / TotalDays;

      DeferralLine.SETRANGE("Document Type",PurchaseLine."Document Type");
      DeferralLine.SETRANGE("Document No.",PurchaseLine."Document No.");
      DeferralLine.FINDSET;
      FOR i := 1 TO DeferralHeader."No. of Periods" DO BEGIN
        PeriodAmt := ROUND((CALCDATE('<CM>',DeferralLine."Posting Date") - DeferralLine."Posting Date" + 1) * CostOfDay);
        DeferralLine.TESTFIELD(Amount,PeriodAmt);
        TotalAmt += DeferralLine.Amount;
        DeferralLine.NEXT;
      END;
      DeferralLine.TESTFIELD(Amount,DeferralAmount - TotalAmt);
    END;

    LOCAL PROCEDURE VerifyInvoicePostedDeferrals@137(DocNo@1003 : Code[20];DeferralTemplateCode@1002 : Code[10];AccNo@1006 : Code[20];NewPostDate@1004 : Date;AmtToDefer@1005 : Decimal);
    VAR
      PurchInvLine@1000 : Record 123;
    BEGIN
      FindPurchInvoiceLine(PurchInvLine,DocNo);
      ValidatePostedDeferralSchedule(
        PurchDocType::"Posted Invoice",DocNo,
        PurchInvLine."Line No.",DeferralTemplateCode,NewPostDate,AmtToDefer,AmtToDefer,2);
      ValidateGL(DocNo,AccNo,SetDateDay(1,WORKDATE),PeriodDate(NewPostDate,2),3,0);
    END;

    LOCAL PROCEDURE VerifyCrMemoPostedDeferrals@142(DocNo@1003 : Code[20];DeferralTemplateCode@1002 : Code[10];AccNo@1006 : Code[20];NewPostDate@1004 : Date;AmtToDefer@1005 : Decimal);
    VAR
      PurchCrMemoLine@1000 : Record 125;
    BEGIN
      FindPurchCrMemoLine(PurchCrMemoLine,DocNo);
      ValidatePostedDeferralSchedule(
        PurchDocType::"Posted Credit Memo",DocNo,
        PurchCrMemoLine."Line No.",DeferralTemplateCode,NewPostDate,AmtToDefer,AmtToDefer,2);
      ValidateGL(DocNo,AccNo,SetDateDay(1,WORKDATE),PeriodDate(NewPostDate,2),3,0);
    END;

    LOCAL PROCEDURE VerifyInvoicePostingDate@130(DocNo@1000 : Code[20];PostingDate@1001 : Date);
    VAR
      PurchInvHeader@1002 : Record 122;
    BEGIN
      PurchInvHeader.GET(DocNo);
      PurchInvHeader.TESTFIELD("Posting Date",PostingDate);
    END;

    LOCAL PROCEDURE VerifyCrMemoPostingDate@131(DocNo@1001 : Code[20];PostingDate@1000 : Date);
    VAR
      PurchCrMemoHdr@1002 : Record 124;
    BEGIN
      PurchCrMemoHdr.GET(DocNo);
      PurchCrMemoHdr.TESTFIELD("Posting Date",PostingDate);
    END;

    [RequestPageHandler]
    PROCEDURE BatchPostPurchaseInvoicesReportHandler@127(VAR BatchPostPurchaseInvoices@1000 : TestRequestPage 497);
    BEGIN
      BatchPostPurchaseInvoices.ReplacePostingDate.SETVALUE(TRUE);
      BatchPostPurchaseInvoices.PostingDate.SETVALUE(LibraryVariableStorage.DequeueDate);
      BatchPostPurchaseInvoices.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE BatchPostPurchaseOrdersReportHandler@129(VAR BatchPostPurchaseOrders@1000 : TestRequestPage 496);
    BEGIN
      BatchPostPurchaseOrders.Receive.SETVALUE(TRUE);
      BatchPostPurchaseOrders.Invoice.SETVALUE(TRUE);
      BatchPostPurchaseOrders.ReplacePostingDate.SETVALUE(TRUE);
      BatchPostPurchaseOrders.PostingDate.SETVALUE(LibraryVariableStorage.DequeueDate);
      BatchPostPurchaseOrders.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE BatchPostPurchCreditMemosReportHandler@125(VAR BatchPostPurchCreditMemos@1000 : TestRequestPage 498);
    BEGIN
      BatchPostPurchCreditMemos.ReplacePostingDate.SETVALUE(TRUE);
      BatchPostPurchCreditMemos.PostingDate.SETVALUE(LibraryVariableStorage.DequeueDate);
      BatchPostPurchCreditMemos.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@136(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Assert.ExpectedMessage(DeferralLineQst,Question);
      LibraryVariableStorage.Enqueue(LibraryVariableStorage.DequeueInteger + 1); // count of handler call's
      Reply := LibraryVariableStorage.DequeueBoolean;
    END;

    BEGIN
    {
      // [FEATURE] [Revenue Expense Deferral] [Purchase]
    }
    END.
  }
}

