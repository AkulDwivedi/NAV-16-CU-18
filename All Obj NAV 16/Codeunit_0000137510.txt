OBJECT Codeunit 137510 SMB Service Item
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            Initialize;
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      LibrarySales@1002 : Codeunit 130509;
      LibraryPurchase@1003 : Codeunit 130512;
      LibraryWarehouse@1001 : Codeunit 132204;

    [Test]
    PROCEDURE TestItem_Type@25();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // EXERCISE
      CreateInvtItem(Item);

      // Check that the inital value is inventory
      Assert.AreEqual(Item.Type,Item.Type::Inventory,'The default Type should be Inventory');

      // Check that it is possible change from inventory to service
      Item.VALIDATE(Type,Item.Type::Service);
      Item.MODIFY(TRUE);
      Assert.AreEqual(Item.Type,Item.Type::Service,'It should be possible to change Type to Service');

      // Check that it is possible change from service to inventory
      Item.VALIDATE(Type,Item.Type::Inventory);
      Item.MODIFY(TRUE);
      Assert.AreEqual(Item.Type,Item.Type::Inventory,'It should be possible to change Type to Inventory');
    END;

    [Test]
    PROCEDURE TestItem_ReplenishmentSystem@38();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // SETUP
      CreateInvtItem(Item);

      // EXERCISE
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::Assembly);
      Item.VALIDATE(Type,Item.Type::Service);
      Item.MODIFY(TRUE);

      // VERIFY
      // Check that the reserve setting is never
      Assert.AreEqual(
        Item."Replenishment System"::Purchase,Item."Replenishment System",
        STRSUBSTNO('%1 must be %2 when Type is %3',
          Item.FIELDNAME("Replenishment System"),Item."Replenishment System"::Purchase,Item.Type::Service));

      // Check that it is not possible change from reserve = standard
      ASSERTERROR Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      AssertRunTime('Type must be equal to','');
    END;

    [Test]
    PROCEDURE TestItem_InventoryPostingGroup@6();
    VAR
      Item@1000 : Record 27;
      InventoryPostingGr@1001 : Record 94;
    BEGIN
      CreateInvtItem(Item);
      InventoryPostingGr.FINDFIRST;
      Item.VALIDATE("Inventory Posting Group",InventoryPostingGr.Code);

      // EXERCISE
      Item.VALIDATE(Type,Item.Type::Service);

      // VERIFY
      Assert.AreEqual(
        Item."Inventory Posting Group",'',
        STRSUBSTNO('%1 must be %2 when Type is %3',
          Item.FIELDNAME("Inventory Posting Group"),'',Item.Type::Service));

      ASSERTERROR Item.VALIDATE("Inventory Posting Group",InventoryPostingGr.Code);
      AssertRunTime('Type must be equal to','');
    END;

    [Test]
    PROCEDURE TestItem_Reserve@15();
    VAR
      Item@1000 : Record 27;
    BEGIN
      CreateInvtItem(Item);
      Item.VALIDATE(Reserve,Item.Reserve::Optional);

      // EXERCISE
      Item.VALIDATE(Type,Item.Type::Service);
      Item.MODIFY(TRUE);

      // VERIFY
      // Check that the reserve setting is never
      Assert.AreEqual(
        Item.Reserve::Never,Item.Reserve,
        STRSUBSTNO('%1 must be %2 when Type is %3',
          Item.FIELDNAME(Reserve),Item.Reserve::Never,Item.Type::Service));

      // Check that it is not possible change from reserve = never
      ASSERTERROR Item.VALIDATE(Reserve,Item.Reserve::Always);
      AssertRunTime('Type must be equal to','');
      ASSERTERROR Item.VALIDATE(Reserve,Item.Reserve::Optional);
      AssertRunTime('Type must be equal to','');
    END;

    [Test]
    PROCEDURE TestItem_ItemTracking@16();
    VAR
      Item@1000 : Record 27;
      ItemTrackingCode@1001 : Record 6502;
    BEGIN
      CreateInvtItem(Item);

      ItemTrackingCode.FINDFIRST;
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode.Code);

      // EXERCISE
      Item.VALIDATE(Type,Item.Type::Service);
      Item.MODIFY(TRUE);

      // Check that item tracking code
      Assert.AreEqual(
        '',Item."Item Tracking Code",
        STRSUBSTNO('%1 must be %2 when Type is %3',
          Item.FIELDNAME("Item Tracking Code"),'',Item.Type::Service));

      // Check that it is not possible set an item tracking code
      ASSERTERROR Item.VALIDATE("Item Tracking Code",ItemTrackingCode.Code);
      AssertRunTime('Type must be equal to','');
    END;

    [Test]
    PROCEDURE TestItem_CostingMethod@17();
    VAR
      Item@1000 : Record 27;
    BEGIN
      CreateInvtItem(Item);
      Item.VALIDATE("Costing Method",Item."Costing Method"::LIFO);

      // EXERCISE
      Item.VALIDATE(Type,Item.Type::Service);
      Item.MODIFY(TRUE);

      // Check that the reserve setting is never
      Assert.AreEqual(
        Item."Costing Method"::FIFO,Item."Costing Method",
        STRSUBSTNO('%1 must be %2 when Type is %3',
          Item.FIELDNAME("Costing Method"),Item."Costing Method"::Standard,Item.Type::Service));

      // Check that it is not possible change from reserve = standard
      ASSERTERROR Item.VALIDATE("Costing Method",Item."Costing Method"::Standard);
      AssertRunTime('Type must be equal to','');
      ASSERTERROR Item.VALIDATE("Costing Method",Item."Costing Method"::Average);
      AssertRunTime('Type must be equal to','');
      ASSERTERROR Item.VALIDATE("Costing Method",Item."Costing Method"::LIFO);
      AssertRunTime('Type must be equal to','');
    END;

    [Test]
    PROCEDURE TestItem_ProdBOM@19();
    VAR
      Item@1001 : Record 27;
      ChildItem@1002 : Record 27;
      ProdBOMHeader@1000 : Record 99000771;
      LibraryMfg@1003 : Codeunit 132202;
    BEGIN
      CreateInvtItem(Item);
      CreateInvtItem(ChildItem);
      LibraryMfg.CreateCertifiedProductionBOM(ProdBOMHeader,ChildItem."No.",1);

      Item.VALIDATE("Production BOM No.",ProdBOMHeader."No.");
      Item.MODIFY(TRUE);
      COMMIT;

      // EXERCISE
      Item.VALIDATE(Type,Item.Type::Service);

      // Check that the Inventory BOM is blank
      Assert.AreEqual(
        '',Item."Production BOM No.",
        STRSUBSTNO('%1 must be %2 when Type is %3',
          Item.FIELDNAME("Production BOM No."),'',Item.Type::Service));

      // Check that it is not possible to have a Production BOM on a Service Item
      ASSERTERROR Item.VALIDATE("Production BOM No.",ProdBOMHeader."No.");
      AssertRunTime('Type must be equal to','');
    END;

    [Test]
    PROCEDURE TestItem_ProdRtng@78();
    VAR
      Item@1001 : Record 27;
      RtngHeader@1000 : Record 99000763;
    BEGIN
      CreateInvtItem(Item);

      RtngHeader.FINDFIRST;
      Item.VALIDATE("Routing No.",RtngHeader."No.");

      // EXERCISE
      Item.VALIDATE(Type,Item.Type::Service);
      Item.MODIFY(TRUE);

      // Check that the reserve setting is never
      Assert.AreEqual(
        '',Item."Routing No.",
        STRSUBSTNO('%1 must be %2 when Type is %3',
          Item.FIELDNAME("Routing No."),'',Item.Type::Service));

      // Check that it is not possible change from reserve = standard
      ASSERTERROR Item.VALIDATE("Routing No.",RtngHeader."No.");
      AssertRunTime('Type must be equal to','');
    END;

    [Test]
    PROCEDURE TestItem_AsmBOM@20();
    VAR
      Item@1001 : Record 27;
      ChildItem@1000 : Record 27;
      BOMComp@1002 : Record 90;
    BEGIN
      CreateInvtItem(ChildItem);
      CreateInvtItem(Item);

      // EXERCISE
      BOMComp.INIT;
      BOMComp.VALIDATE("Parent Item No.",Item."No.");
      BOMComp.VALIDATE(Type,BOMComp.Type::Item);
      BOMComp.VALIDATE("No.",ChildItem."No.");
      BOMComp.INSERT(TRUE);
      COMMIT;

      ASSERTERROR Item.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('Assembly BOM must be equal to','');
      ASSERTERROR ChildItem.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('You cannot change the Type field','');
      ASSERTERROR ChildItem.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');

      BOMComp.DELETE(TRUE);

      Item.VALIDATE(Type,Item.Type::Service);
      Item.MODIFY(TRUE);

      BOMComp.INIT;
      ASSERTERROR BOMComp.VALIDATE("Parent Item No.",Item."No.");
      AssertRunTime('The field Parent Item No.','');
    END;

    [Test]
    PROCEDURE TestItem_ATO@21();
    VAR
      Item@1000 : Record 27;
    BEGIN
      CreateInvtItem(Item);

      Item.VALIDATE("Replenishment System",Item."Replenishment System"::Assembly);
      Item.VALIDATE("Assembly Policy",Item."Assembly Policy"::"Assemble-to-Order");

      // EXERCISE
      Item.VALIDATE(Type,Item.Type::Service);
      Item.MODIFY(TRUE);

      // Check that the reserve setting is never
      Assert.AreEqual(
        Item."Assembly Policy"::"Assemble-to-Stock",Item."Assembly Policy",
        STRSUBSTNO('%1 must be %2 when Type is %3',
          Item.FIELDNAME("Assembly Policy"),Item."Assembly Policy"::"Assemble-to-Stock",Item.Type::Service));
    END;

    [Test]
    PROCEDURE TestItem_Planning@22();
    VAR
      Item@1000 : Record 27;
    BEGIN
      CreateInvtItem(Item);

      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::Order);

      // EXERCISE
      Item.VALIDATE(Type,Item.Type::Service);
      Item.MODIFY(TRUE);

      // Check that the reserve setting is never
      Assert.AreEqual(
        Item."Reordering Policy"::" ",Item."Reordering Policy",
        STRSUBSTNO('%1 must be %2 when Type is %3',
          Item.FIELDNAME("Reordering Policy"),'',Item.Type::Service));

      // Check that it is not possible change from reserve = standard
      ASSERTERROR Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Fixed Reorder Qty.");
      AssertRunTime('Type must be equal to','');
      ASSERTERROR Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Maximum Qty.");
      AssertRunTime('Type must be equal to','');
      ASSERTERROR Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::Order);
      AssertRunTime('Type must be equal to','');
      ASSERTERROR Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      AssertRunTime('Type must be equal to','');
    END;

    [Test]
    [HandlerFunctions(MsgHandler)]
    PROCEDURE TestItem_OrderTracking@75();
    VAR
      Item@1000 : Record 27;
    BEGIN
      CreateInvtItem(Item);

      Item.VALIDATE("Order Tracking Policy",Item."Order Tracking Policy"::"Tracking Only");

      // EXERCISE
      Item.VALIDATE(Type,Item.Type::Service);
      Item.MODIFY(TRUE);

      // Check that the reserve setting is never
      Assert.AreEqual(
        Item."Order Tracking Policy"::None,Item."Order Tracking Policy",
        STRSUBSTNO('%1 must be %2 when Type is %3',
          Item.FIELDNAME("Order Tracking Policy"),Item."Order Tracking Policy"::None,Item.Type::Service));

      // Check that it is not possible change from reserve = standard
      ASSERTERROR Item.VALIDATE("Order Tracking Policy",Item."Order Tracking Policy"::"Tracking Only");
      AssertRunTime('Type must be equal to','');
      ASSERTERROR Item.VALIDATE("Order Tracking Policy",Item."Order Tracking Policy"::"Tracking & Action Msg.");
      AssertRunTime('Type must be equal to','');
    END;

    [Test]
    PROCEDURE TestItem_SKU@23();
    VAR
      Item@1000 : Record 27;
      SKU@1001 : Record 5700;
    BEGIN
      CreateInvtItem(Item);

      // EXERCISE
      SKU.INIT;
      SKU.VALIDATE("Item No.",Item."No.");
      SKU.VALIDATE("Location Code",FindLocation);
      SKU.INSERT(TRUE);

      ASSERTERROR Item.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('Stockkeeping Unit Exists must be equal to','');

      Item.VALIDATE(Type,Item.Type::Service);
      Item.MODIFY(TRUE);

      SKU.INIT;
      ASSERTERROR SKU.VALIDATE("Item No.",Item."No.");
      AssertRunTime('The field Item No.','');
    END;

    [Test]
    PROCEDURE TestItemJnlLine@24();
    VAR
      ItemJnlLine@1000 : Record 83;
      Item@1001 : Record 27;
      EntryType@1002 : Integer;
    BEGIN
      CreateServItem(Item);

      // EXERCISE
      FOR EntryType := 0 TO 10 DO BEGIN
        ItemJnlLine.INIT;
        ASSERTERROR ItemJnlLine.VALIDATE("Item No.",Item."No.");
        AssertRunTime('Type must be equal to','');
      END;
    END;

    [Test]
    PROCEDURE TestServReqJnlLine@60();
    VAR
      InvtItem@1001 : Record 27;
      ServItem@1003 : Record 27;
    BEGIN
      CreateServItem(ServItem);
      CreateInvtItem(InvtItem);

      // EXERCISE
      ASSERTERROR CreateReqLine(ServItem,InvtItem);
      AssertRunTime('The field No. of table Requisition Line','');

      ASSERTERROR CreateReqLine(InvtItem,ServItem);
      AssertRunTime('The field Item No. of table Planning Component','');
    END;

    [Test]
    PROCEDURE TestInvtReqJnlLine@49();
    VAR
      Item@1001 : Record 27;
      ChildItem@1003 : Record 27;
    BEGIN
      CreateInvtItem(Item);
      CreateInvtItem(ChildItem);

      // EXERCISE
      CreateReqLine(Item,ChildItem);

      ASSERTERROR Item.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('You cannot change the Type field','');
      ASSERTERROR Item.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');

      ASSERTERROR ChildItem.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('You cannot change the Type field','');
      ASSERTERROR ChildItem.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');
    END;

    [Test]
    PROCEDURE TestServItem_SalesDoc@26();
    VAR
      Item@1000 : Record 27;
      Cust@1002 : Record 18;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
    BEGIN
      CreateServItem(Item);

      LibrarySales.CreateCustomer(Cust);

      // EXERCISE
      CreateSalesOrder(Cust,SalesHeader,SalesLine,Item);

      ASSERTERROR Item.VALIDATE(Type,Item.Type::Inventory);
      AssertRunTime('You cannot change the Type field','');
      ASSERTERROR Item.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      CheckEntries(Item);

      ASSERTERROR Item.VALIDATE(Type,Item.Type::Inventory);
      AssertRunTime('You cannot change the Type field','');
    END;

    [Test]
    PROCEDURE TestInvtItem_SalesDoc@1();
    VAR
      Item@1000 : Record 27;
      Cust@1003 : Record 18;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      CreateInvtItem(Item);

      LibrarySales.CreateCustomer(Cust);

      // EXERCISE
      CreateSalesOrder(Cust,SalesHeader,SalesLine,Item);

      ASSERTERROR Item.VALIDATE(Type,Item.Type::Inventory);
      AssertRunTime('You cannot change the Type field','');
      ASSERTERROR Item.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      CheckEntries(Item);

      ASSERTERROR Item.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('You cannot change the Type field','');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE TestServItem_LocationSalesDocCust@50();
    VAR
      Item@1004 : Record 27;
      Cust@1003 : Record 18;
      Cust2@1006 : Record 18;
      SalesHeader@1002 : Record 36;
      SalesLine@1007 : Record 37;
      SalesLine2@1001 : Record 37;
    BEGIN
      CreateServItem(Item);

      LibrarySales.CreateCustomer(Cust);

      LibrarySales.CreateCustomer(Cust2);
      Cust2.VALIDATE("Location Code",FindLocation);
      Cust2.MODIFY(TRUE);

      CreateSalesOrder(Cust,SalesHeader,SalesLine,Item);

      // EXERCISE
      SalesHeader.VALIDATE("Sell-to Customer No.",Cust2."No.");
      SalesHeader.MODIFY(TRUE);
      Assert.AreEqual('',SalesLine."Location Code",'');

      SalesLine2.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      CreateInvtItem(Item);

      // Type <> Type::Item
      SalesLine2.VALIDATE(Type,SalesLine.Type::" ");
      SalesLine2.VALIDATE("Location Code",'');
      SalesLine2.VALIDATE("Location Code",Cust2."Location Code");
      Assert.AreEqual(Cust2."Location Code",SalesLine2."Location Code",'');

      // Type = Type::Item, No. = ''
      SalesLine2.VALIDATE(Type,SalesLine2.Type::Item);
      SalesLine2.VALIDATE("No.",'');
      SalesLine2.VALIDATE("Location Code",Cust2."Location Code");
      Assert.AreEqual(Cust2."Location Code",SalesLine2."Location Code",'');
    END;

    [Test]
    PROCEDURE TestServItem_LocationSalesDoc@12();
    VAR
      Item@1004 : Record 27;
      Cust@1003 : Record 18;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      CreateServItem(Item);

      CreateCustWithLocation(Cust);

      // EXERCISE
      CreateSalesOrder(Cust,SalesHeader,SalesLine,Item);

      Assert.AreEqual('',SalesLine."Location Code",'');
      ASSERTERROR SalesLine.VALIDATE("Location Code",Cust."Location Code");
      AssertRunTime('Type must be equal to','');
    END;

    [Test]
    PROCEDURE TestInvtItem_LocationSalesDoc@14();
    VAR
      Item@1004 : Record 27;
      Cust@1003 : Record 18;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      CreateInvtItem(Item);

      CreateCustWithLocation(Cust);

      // EXERCISE
      CreateSalesOrder(Cust,SalesHeader,SalesLine,Item);

      SalesLine.VALIDATE("Location Code",Cust."Location Code");

      Assert.AreEqual(Cust."Location Code",SalesLine."Location Code",'');
    END;

    [Test]
    PROCEDURE TestServItem_LocationMandatorySalesDoc@37();
    VAR
      Item@1004 : Record 27;
      Cust@1003 : Record 18;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      InvtSetup@1006 : Record 313;
      OldInvtSetup@1007 : Record 313;
    BEGIN
      CreateServItem(Item);

      LibrarySales.CreateCustomer(Cust);

      InvtSetup.GET;
      OldInvtSetup := InvtSetup;
      InvtSetup.VALIDATE("Location Mandatory",TRUE);
      InvtSetup.MODIFY;

      // EXERCISE
      CreateSalesOrder(Cust,SalesHeader,SalesLine,Item);

      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      CheckEntries(Item);

      InvtSetup.VALIDATE("Location Mandatory",OldInvtSetup."Location Mandatory");
      InvtSetup.MODIFY;
    END;

    [Test]
    PROCEDURE TestInvtItem_LocationMandatorySalesDoc@36();
    VAR
      Item@1004 : Record 27;
      Cust@1003 : Record 18;
      SalesHeader@1002 : Record 36;
      SalesLine@1001 : Record 37;
      InvtSetup@1006 : Record 313;
      OldInvtSetup@1007 : Record 313;
    BEGIN
      CreateInvtItem(Item);

      LibrarySales.CreateCustomer(Cust);

      InvtSetup.GET;
      OldInvtSetup := InvtSetup;
      InvtSetup.VALIDATE("Location Mandatory",TRUE);
      InvtSetup.MODIFY;

      CreateSalesOrder(Cust,SalesHeader,SalesLine,Item);

      // EXERCISE
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      SalesLine.VALIDATE("Location Code",FindLocation);
      SalesLine.MODIFY(TRUE);

      SalesHeader.FIND;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      CheckEntries(Item);

      InvtSetup.VALIDATE("Location Mandatory",OldInvtSetup."Location Mandatory");
      InvtSetup.MODIFY;
    END;

    [Test]
    PROCEDURE TestServItem_PurchDoc@39();
    VAR
      Item@1000 : Record 27;
      Vend@1002 : Record 23;
      PurchHeader@1003 : Record 38;
      PurchLine@1004 : Record 39;
      LibraryPurch@1001 : Codeunit 130512;
    BEGIN
      CreateServItem(Item);

      LibraryPurch.CreateVendor(Vend);

      // EXERCISE
      CreatePurchOrder(Vend,PurchHeader,PurchLine,Item);

      ASSERTERROR Item.VALIDATE(Type,Item.Type::Inventory);
      AssertRunTime('You cannot change the Type field','');
      ASSERTERROR Item.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');

      LibraryPurch.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      CheckEntries(Item);

      ASSERTERROR Item.VALIDATE(Type,Item.Type::Inventory);
      AssertRunTime('You cannot change the Type field','');
    END;

    [Test]
    PROCEDURE TestInvtItem_PurchDoc@35();
    VAR
      Item@1000 : Record 27;
      Vend@1003 : Record 23;
      PurchHeader@1002 : Record 38;
      PurchLine@1001 : Record 39;
      LibraryPurch@1004 : Codeunit 130512;
    BEGIN
      CreateInvtItem(Item);

      LibraryPurch.CreateVendor(Vend);

      // EXERCISE
      CreatePurchOrder(Vend,PurchHeader,PurchLine,Item);

      ASSERTERROR Item.VALIDATE(Type,Item.Type::Inventory);
      AssertRunTime('You cannot change the Type field','');
      ASSERTERROR Item.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');

      LibraryPurch.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      CheckEntries(Item);

      ASSERTERROR Item.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('You cannot change the Type field','');
    END;

    [Test]
    PROCEDURE TestServItem_LocationPurchDocVend@55();
    VAR
      Item@1004 : Record 27;
      Vend@1003 : Record 23;
      Vend2@1006 : Record 23;
      PurchHeader@1002 : Record 38;
      PurchLine@1001 : Record 39;
      LibraryPurch@1000 : Codeunit 130512;
    BEGIN
      CreateServItem(Item);

      LibraryPurch.CreateVendor(Vend);
      CreateVendWithLocation(Vend2);

      CreatePurchOrder(Vend,PurchHeader,PurchLine,Item);

      // EXERCISE
      PurchHeader.SetHideValidationDialog(TRUE);
      PurchHeader.VALIDATE("Buy-from Vendor No.",Vend2."No.");
      PurchHeader.MODIFY(TRUE);

      // Verify
      PurchLine.FIND;
      Assert.AreEqual('',PurchLine."Location Code",'');
    END;

    [Test]
    PROCEDURE TestServItem_LocationPurchDoc@34();
    VAR
      Item@1004 : Record 27;
      Vend@1003 : Record 23;
      PurchHeader@1002 : Record 38;
      PurchLine@1001 : Record 39;
    BEGIN
      CreateServItem(Item);

      CreateVendWithLocation(Vend);

      // EXERCISE
      CreatePurchOrder(Vend,PurchHeader,PurchLine,Item);

      Assert.AreEqual('',PurchLine."Location Code",'');
      ASSERTERROR PurchLine.VALIDATE("Location Code",Vend."Location Code");
      AssertRunTime('Type must be equal','');
    END;

    [Test]
    PROCEDURE TestInvtItem_LocationPurchDoc@30();
    VAR
      Item@1004 : Record 27;
      Vend@1003 : Record 23;
      PurchHeader@1002 : Record 38;
      PurchLine@1001 : Record 39;
    BEGIN
      CreateInvtItem(Item);

      CreateVendWithLocation(Vend);

      CreatePurchOrder(Vend,PurchHeader,PurchLine,Item);

      // EXERCISE
      PurchLine.VALIDATE("Location Code",Vend."Location Code");

      Assert.AreEqual(Vend."Location Code",PurchLine."Location Code",'');
    END;

    [Test]
    PROCEDURE TestServItem_LocationMandatoryPurchDoc@13();
    VAR
      Item@1004 : Record 27;
      Vend@1003 : Record 23;
      PurchHeader@1002 : Record 38;
      PurchLine@1001 : Record 39;
      InvtSetup@1006 : Record 313;
      OldInvtSetup@1007 : Record 313;
      LibraryPurch@1000 : Codeunit 130512;
    BEGIN
      CreateServItem(Item);

      LibraryPurch.CreateVendor(Vend);

      InvtSetup.GET;
      OldInvtSetup := InvtSetup;
      InvtSetup.VALIDATE("Location Mandatory",TRUE);
      InvtSetup.MODIFY;

      CreatePurchOrder(Vend,PurchHeader,PurchLine,Item);

      // EXERCISE
      LibraryPurch.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      CheckEntries(Item);

      InvtSetup.VALIDATE("Location Mandatory",OldInvtSetup."Location Mandatory");
      InvtSetup.MODIFY;
    END;

    [Test]
    PROCEDURE TestInvtItem_LocationMandatoryPurchDoc@5();
    VAR
      Item@1004 : Record 27;
      Vend@1003 : Record 23;
      PurchHeader@1002 : Record 38;
      PurchLine@1001 : Record 39;
      InvtSetup@1006 : Record 313;
      OldInvtSetup@1007 : Record 313;
      LibraryPurch@1000 : Codeunit 130512;
    BEGIN
      CreateInvtItem(Item);

      LibraryPurch.CreateVendor(Vend);

      InvtSetup.GET;
      OldInvtSetup := InvtSetup;
      InvtSetup.VALIDATE("Location Mandatory",TRUE);
      InvtSetup.MODIFY;

      CreatePurchOrder(Vend,PurchHeader,PurchLine,Item);

      // EXERCISE
      ASSERTERROR LibraryPurch.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      PurchLine.VALIDATE("Location Code",FindLocation);
      PurchLine.MODIFY(TRUE);

      PurchHeader.FIND;
      LibraryPurch.PostPurchaseDocument(PurchHeader,TRUE,TRUE);

      CheckEntries(Item);

      InvtSetup.VALIDATE("Location Mandatory",OldInvtSetup."Location Mandatory");
      InvtSetup.MODIFY;
    END;

    [Test]
    PROCEDURE TestServItem_AsmDoc@28();
    VAR
      Item@1000 : Record 27;
      AsmHeader@1002 : Record 900;
      AsmLine@1001 : Record 901;
    BEGIN
      CreateServItem(Item);

      // EXERCISE
      AsmHeader.INIT;
      ASSERTERROR AsmHeader.VALIDATE("Item No.",Item."No.");
      AssertRunTime('The field Item No. of table Assembly Header','');

      AsmLine.INIT;
      AsmLine.VALIDATE(Type,AsmLine.Type::Item);
      ASSERTERROR AsmLine.VALIDATE("No.",Item."No.");
      AssertRunTime('The field No. of table Assembly Line','');
    END;

    [Test]
    PROCEDURE TestInvtItem_AsmDoc@11();
    VAR
      Item@1000 : Record 27;
    BEGIN
      CreateInvtItem(Item);

      CreateAsmOrder(Item);

      // EXERCISE
      ASSERTERROR Item.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('You cannot change the Type field','');
    END;

    [Test]
    PROCEDURE TestItem_ServDoc@29();
    VAR
      Item@1001 : Record 27;
      ServLine@1000 : Record 5902;
      ServContractLine@1002 : Record 5964;
    BEGIN
      CreateServItem(Item);

      // EXERCISE
      ServLine.INIT;
      ServLine.Type := ServLine.Type::Item;
      ASSERTERROR ServLine.VALIDATE("No.",Item."No.");
      AssertRunTime('The field No. of table Service Line','');

      ServContractLine.INIT;
      ASSERTERROR ServContractLine.VALIDATE("Item No.",Item."No.");
      AssertRunTime('The field Item No. of table Service Contract Line','');

      // Check for Service Line
      Item.VALIDATE(Type,Item.Type::Inventory);
      Item.MODIFY(TRUE);

      ServLine.INIT;
      ServLine.Type := ServLine.Type::Item;
      ServLine."No." := Item."No.";
      ServLine.INSERT;
      COMMIT;

      ASSERTERROR Item.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('You cannot change the Type field','');
      ASSERTERROR Item.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');
      // Check for Service Contract Line
      ServLine.DELETE;

      ServContractLine.INIT;
      ServContractLine."Item No." := Item."No.";
      ServContractLine.INSERT;
      COMMIT;

      ASSERTERROR Item.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('You cannot change the Type field','');
      ASSERTERROR Item.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');
    END;

    [Test]
    PROCEDURE TestItem_JobDoc@31();
    VAR
      Item@1000 : Record 27;
      JobPlanningLine@1001 : Record 1003;
    BEGIN
      CreateServItem(Item);

      // EXERCISE
      Item.VALIDATE(Type,Item.Type::Inventory);
      Item.MODIFY(TRUE);

      JobPlanningLine.INIT;
      JobPlanningLine.Type := JobPlanningLine.Type::Item;
      JobPlanningLine."No." := Item."No.";
      JobPlanningLine.INSERT;
      COMMIT;

      ASSERTERROR Item.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('You cannot change the Type field','');
      ASSERTERROR Item.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');
    END;

    [Test]
    PROCEDURE TestServItem_ProdDoc@56();
    VAR
      Item@1000 : Record 27;
      ProdOrder@1001 : Record 5405;
      ProdOrderLine@1002 : Record 5406;
    BEGIN
      CreateServItem(Item);

      // EXERCISE
      ProdOrder.INIT;
      ProdOrder."Source Type" := ProdOrder."Source Type"::Item;
      ASSERTERROR ProdOrder.VALIDATE("Source No.",Item."No.");
      AssertRunTime('The field Source No. of table Production Order','');

      ProdOrderLine.INIT;
      ASSERTERROR ProdOrderLine.VALIDATE("Item No.",Item."No.");
      AssertRunTime('The field Item No. of table Prod. Order Line','');
    END;

    [Test]
    PROCEDURE TestInvtItem_ProdDoc@32();
    VAR
      Item@1000 : Record 27;
    BEGIN
      CreateInvtItem(Item);

      // EXERCISE
      CreateProdOrder(Item);

      ASSERTERROR Item.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('You cannot change the Type field','');
      ASSERTERROR Item.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');
    END;

    [Test]
    PROCEDURE TestInvtItem_TransferDoc@33();
    VAR
      Item@1000 : Record 27;
    BEGIN
      CreateInvtItem(Item);

      // EXERCISE
      CreateTransOrder(Item);
      COMMIT;

      ASSERTERROR Item.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('You cannot change the Type field','');
      ASSERTERROR Item.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');
    END;

    [Test]
    PROCEDURE TestServItem_TransferDoc@10();
    VAR
      Item@1000 : Record 27;
    BEGIN
      CreateServItem(Item);

      // EXERCISE
      ASSERTERROR CreateTransOrder(Item);
      AssertRunTime('The field Item No.','');
    END;

    [Test]
    PROCEDURE TestItem_Type_Invt_With_ILE@18();
    VAR
      Item@1000 : Record 27;
    BEGIN
      CreateInvtItem(Item);

      // EXERCISE
      CreateAndPostItemJnlLine(Item,1);

      // Check that it is not possible change from inventory to service when inventory <> 0
      ASSERTERROR Item.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('You cannot change the Type field','');

      // Make inventory go to zero
      CreateAndPostItemJnlLine(Item,-1);

      // Check that it is not possible change from inventory to service when inventory = 0
      ASSERTERROR Item.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('You cannot change the Type field','');
    END;

    [Test]
    PROCEDURE TestItem_Type_Service_Posting@4();
    VAR
      Item@1000 : Record 27;
      ItemJnlLine@1003 : Record 83;
      ItemJnlTemplate@1002 : Record 82;
      ItemJnlBatch@1001 : Record 233;
      LibraryInventory@1004 : Codeunit 132201;
    BEGIN
      CreateServItem(Item);

      LibraryInventory.CreateItemJournalTemplate(ItemJnlTemplate);
      LibraryInventory.CreateItemJournalBatch(ItemJnlBatch,ItemJnlTemplate.Name);
      COMMIT;

      // EXERCISE
      // Check that it is not possible to create an an item journal line when type = service
      ASSERTERROR
        LibraryInventory.CreateItemJournalLine(
          ItemJnlLine,ItemJnlTemplate.Name,ItemJnlBatch.Name,ItemJnlLine."Entry Type"::Purchase,Item."No.",1);
      AssertRunTime('Type must be equal to','');

      // Check that it is possible to create an an item journal line when type = inventory
      Item.VALIDATE(Type,Item.Type::Inventory);
      Item.MODIFY(TRUE);

      LibraryInventory.CreateItemJournalLine(
        ItemJnlLine,ItemJnlTemplate.Name,ItemJnlBatch.Name,ItemJnlLine."Entry Type"::Purchase,Item."No.",1);

      // Check that it is not possible to post an item journal line when type = service
      ASSERTERROR Item.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('You cannot change the Type field','');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE PostingUndoReceiptForItemTypeService@43();
    VAR
      Item@1000 : Record 27;
      Vendor@1001 : Record 23;
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1003 : Record 39;
      PurchRcptLine@1005 : Record 121;
      ItemLedgerEntry@1006 : Record 32;
      PurchReceiptNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Purchase] [Undo Receipt]
      // [SCENARIO 212144] Undo Receipt of item with Type = Service can be posted. The resulting item ledger entry should be closed.

      // [GIVEN] Item with Type = Service.
      CreateServItem(Item);
      LibraryPurchase.CreateVendor(Vendor);

      // [GIVEN] Posted purchase receipt for the item.
      CreatePurchOrder(Vendor,PurchaseHeader,PurchaseLine,Item);
      PurchReceiptNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // [WHEN] Undo the receipt.
      FindPurchReceiptLine(PurchRcptLine,PurchReceiptNo,Item."No.");
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);

      // [THEN] The posted receipt is reversed.
      FindPurchReceiptLine(PurchRcptLine,PurchReceiptNo,Item."No.");
      Assert.RecordCount(PurchRcptLine,2);
      PurchRcptLine.CALCSUMS(Quantity);
      PurchRcptLine.TESTFIELD(Quantity,0);

      // [THEN] Reversed item ledger entry is created.
      ItemLedgerEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgerEntry.SETRANGE(Positive,FALSE);
      ItemLedgerEntry.FINDFIRST;
      ItemLedgerEntry.TESTFIELD(Quantity,-1);

      // [THEN] Resulting item ledger entries are closed.
      CheckEntries(Item);
    END;

    LOCAL PROCEDURE CreateInvtItem@48(VAR Item@1000 : Record 27);
    VAR
      LibraryInventory@1001 : Codeunit 132201;
    BEGIN
      LibraryInventory.CreateItem(Item);
      COMMIT;
    END;

    LOCAL PROCEDURE CreateServItem@45(VAR Item@1000 : Record 27);
    VAR
      LibraryInventory@1001 : Codeunit 132201;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE(Type,Item.Type::Service);
      Item.MODIFY(TRUE);
      COMMIT;
    END;

    LOCAL PROCEDURE CreateSalesOrder@8(Cust@1004 : Record 18;VAR SalesHeader@1003 : Record 36;VAR SalesLine@1002 : Record 37;Item@1000 : Record 27);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,Cust."No.");
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",1);
      COMMIT;
    END;

    LOCAL PROCEDURE CreatePurchOrder@41(Vend@1004 : Record 23;VAR PurchHeader@1003 : Record 38;VAR PurchLine@1002 : Record 39;Item@1000 : Record 27);
    VAR
      LibraryPurch@1001 : Codeunit 130512;
    BEGIN
      LibraryPurch.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Order,Vend."No.");
      LibraryPurch.CreatePurchaseLine(PurchLine,PurchHeader,PurchLine.Type::Item,Item."No.",1);
      COMMIT;
    END;

    LOCAL PROCEDURE CreateAsmOrder@97(ChildItem@1001 : Record 27);
    VAR
      ParentItem@1002 : Record 27;
      BOMComp@1000 : Record 90;
      AsmSetup@1003 : Record 905;
      OldAsmSetup@1004 : Record 905;
      AsmHeader@1006 : Record 900;
      LibraryAsm@1005 : Codeunit 132207;
    BEGIN
      CreateInvtItem(ParentItem);

      BOMComp.INIT;
      BOMComp.VALIDATE("Parent Item No.",ParentItem."No.");
      BOMComp.VALIDATE(Type,BOMComp.Type::Item);
      BOMComp.VALIDATE("No.",ChildItem."No.");
      BOMComp.VALIDATE("Quantity per",3);
      BOMComp.INSERT(TRUE);

      AsmSetup.GET;
      OldAsmSetup := AsmSetup;
      AsmSetup."Stockout Warning" := FALSE;
      AsmSetup.MODIFY;
      COMMIT;

      LibraryAsm.CreateAssemblyHeader(AsmHeader,CALCDATE('<+2D>',WORKDATE),ParentItem."No.",'',1,'');

      BOMComp.DELETE(TRUE);
      COMMIT;

      ChildItem.FIND;
      ASSERTERROR ParentItem.VALIDATE(Type,ParentItem.Type::Service);
      AssertRunTime('You cannot change the Type field','');
      ASSERTERROR ChildItem.VALIDATE(Type,ChildItem.Type::Service);
      AssertRunTime('You cannot change the Type field','');
      ASSERTERROR ParentItem.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');
      ASSERTERROR ChildItem.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');

      AsmSetup."Stockout Warning" := OldAsmSetup."Stockout Warning";
      AsmSetup.MODIFY;
    END;

    LOCAL PROCEDURE CreateProdOrder@103(ChildItem@1000 : Record 27);
    VAR
      ParentItem@1003 : Record 27;
      ProdOrder@1001 : Record 5405;
      ProdBOMHeader@1005 : Record 99000771;
      ProdBOMLine@1006 : Record 99000772;
      LibraryMfg@1007 : Codeunit 132202;
    BEGIN
      CreateInvtItem(ParentItem);
      LibraryMfg.CreateCertifiedProductionBOM(ProdBOMHeader,ChildItem."No.",1);
      ParentItem.VALIDATE("Production BOM No.",ProdBOMHeader."No.");
      ParentItem.MODIFY(TRUE);
      COMMIT;

      ASSERTERROR ChildItem.VALIDATE(Type,ChildItem.Type::Service);
      AssertRunTime('You cannot change the Type field','');
      ASSERTERROR ChildItem.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');

      LibraryMfg.CreateProductionOrder(
        ProdOrder,ProdOrder.Status::Released,ProdOrder."Source Type"::Item,ParentItem."No.",1);
      LibraryMfg.RefreshProdOrder(ProdOrder,TRUE,TRUE,TRUE,TRUE,FALSE);

      ProdBOMHeader.GET(ParentItem."Production BOM No.");
      ProdBOMLine.SETRANGE("Production BOM No.",ProdBOMHeader."No.");
      ProdBOMLine.DELETEALL;
      ParentItem.VALIDATE("Production BOM No.",'');
      ParentItem.MODIFY(TRUE);

      COMMIT;
      ASSERTERROR ParentItem.VALIDATE(Type,ParentItem.Type::Service);
      AssertRunTime('You cannot change the Type field','');
      ASSERTERROR ParentItem.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');
    END;

    LOCAL PROCEDURE CreateAndPostItemJnlLine@113(Item@1000 : Record 27;Qty@1001 : Decimal);
    VAR
      ItemJnlLine@1003 : Record 83;
      ItemJnlTemplate@1004 : Record 82;
      ItemJnlBatch@1005 : Record 233;
      LibraryInventory@1002 : Codeunit 132201;
    BEGIN
      LibraryInventory.CreateItemJournalTemplate(ItemJnlTemplate);
      LibraryInventory.CreateItemJournalBatch(ItemJnlBatch,ItemJnlTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJnlLine,ItemJnlTemplate.Name,ItemJnlBatch.Name,ItemJnlLine."Entry Type"::Purchase,Item."No.",Qty);
      COMMIT;

      // Check that it is not possible to change the Type to Service if an Item Journal exists
      ASSERTERROR Item.VALIDATE(Type,Item.Type::Service);
      AssertRunTime('You cannot change the Type field','');

      ASSERTERROR Item.DELETE(TRUE);
      AssertRunTime('You cannot delete Item','');
      LibraryInventory.PostItemJournalLine(ItemJnlTemplate.Name,ItemJnlBatch.Name);
    END;

    LOCAL PROCEDURE CreateReqLine@40(ParentItem@1000 : Record 27;ChildItem@1001 : Record 27);
    VAR
      ReqWkshName@1004 : Record 245;
      ReqLine@1003 : Record 246;
      PlanningComponent@1002 : Record 99000829;
    BEGIN
      ReqWkshName.FINDFIRST;
      ReqLine.INIT;
      ReqLine.VALIDATE("Worksheet Template Name",ReqWkshName."Worksheet Template Name");
      ReqLine.VALIDATE("Journal Batch Name",ReqWkshName.Name);
      ReqLine.VALIDATE(Type,ReqLine.Type::Item);
      ReqLine.VALIDATE("No.",ParentItem."No.");
      ReqLine.INSERT(TRUE);

      PlanningComponent.INIT;
      PlanningComponent.VALIDATE("Worksheet Template Name",ReqLine."Worksheet Template Name");
      PlanningComponent.VALIDATE("Worksheet Batch Name",ReqLine."Journal Batch Name");
      PlanningComponent.VALIDATE("Worksheet Line No.",ReqLine."Line No.");
      PlanningComponent.VALIDATE("Item No.",ChildItem."No.");
      PlanningComponent.INSERT(TRUE);
      COMMIT;
    END;

    LOCAL PROCEDURE CreateTransOrder@73(Item@1000 : Record 27);
    VAR
      FromLocation@1006 : Record 14;
      ToLocation@1005 : Record 14;
      IntransitLocation@1004 : Record 14;
      TransRoute@1003 : Record 5742;
      TransHeader@1002 : Record 5740;
      TransLine@1001 : Record 5741;
    BEGIN
      LibraryWarehouse.CreateLocation(FromLocation);
      LibraryWarehouse.CreateLocation(ToLocation);
      LibraryWarehouse.CreateInTransitLocation(IntransitLocation);

      LibraryWarehouse.CreateAndUpdateTransferRoute(
        TransRoute,FromLocation.Code,ToLocation.Code,IntransitLocation.Code,'','');
      LibraryWarehouse.CreateTransferHeader(TransHeader,FromLocation.Code,ToLocation.Code,IntransitLocation.Code);
      LibraryWarehouse.CreateTransferLine(TransHeader,TransLine,Item."No.",1);
    END;

    LOCAL PROCEDURE CreateVendWithLocation@27(VAR Vend@1000 : Record 23);
    VAR
      LibraryPurch@1001 : Codeunit 130512;
    BEGIN
      LibraryPurch.CreateVendor(Vend);
      Vend.VALIDATE("Location Code",FindLocation);
      Vend.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustWithLocation@42(VAR Cust@1000 : Record 18);
    BEGIN
      LibrarySales.CreateCustomer(Cust);
      Cust.VALIDATE("Location Code",FindLocation);
      Cust.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindLocation@2() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      Location.SETRANGE("Use As In-Transit",FALSE);
      Location.SETRANGE("Bin Mandatory",FALSE);
      Location.FINDFIRST;
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE FindPurchReceiptLine@53(VAR PurchRcptLine@1000 : Record 121;PurchReceiptNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      WITH PurchRcptLine DO BEGIN
        SETRANGE("Document No.",PurchReceiptNo);
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ItemNo);
        FINDSET;
      END;
    END;

    LOCAL PROCEDURE CheckEntries@52(Item@1000 : Record 27);
    VAR
      ValueEntry@1001 : Record 5802;
      ItemLedgEntry@1002 : Record 32;
      ItemApplnEntry@1003 : Record 339;
      PostValueEntryToGL@1004 : Record 5811;
    BEGIN
      Item.FIND;
      Assert.AreEqual(Item.Type = Item.Type::Service,Item."Cost is Adjusted",'The Item should be marked always as Cost is Adjusted');

      // Check value entries
      ValueEntry.SETRANGE("Item No.",Item."No.");
      Assert.IsFalse(ValueEntry.ISEMPTY,'Value Entries should be created if a posting is made');

      ValueEntry.SETRANGE(Inventoriable,TRUE);
      Assert.AreEqual(Item.Type = Item.Type::Service,ValueEntry.ISEMPTY,'All Value Entries should not be marked as Inventoriable');

      // Check item Ledger Entries
      ItemLedgEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgEntry.FINDSET;
      REPEAT
        IF Item.Type = Item.Type::Service THEN BEGIN
          Assert.IsFalse(ItemLedgEntry."Applied Entry to Adjust",'');
          Assert.IsFalse(ItemLedgEntry.Open,'');

          Assert.AreEqual(
            0,ItemLedgEntry."Remaining Quantity",
            'Remaining Quantity on Item Ledger Entry should be zero');

          // Check Item Application Entries
          ItemApplnEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
          Assert.AreEqual(
            Item.Type = Item.Type::Service,ItemApplnEntry.ISEMPTY,
            'There should be no Application Enties');
        END;
      UNTIL ItemLedgEntry.NEXT = 0;

      IF Item.Type = Item.Type::Service THEN BEGIN
        PostValueEntryToGL.SETRANGE("Item No.",Item."No.");
        Assert.AreEqual(
          Item.Type = Item.Type::Service,PostValueEntryToGL.ISEMPTY,
          'The should be no record in Post Value Entry to G/L');
      END;
    END;

    [MessageHandler]
    PROCEDURE MsgHandler@7(MsgText@1000 : Text);
    BEGIN
      MsgText := MsgText;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@44(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    LOCAL PROCEDURE AssertRunTime@3(ExpectedErrorTextContains@1000 : Text;Msg@1001 : Text);
    BEGIN
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ExpectedErrorTextContains) > 0,Msg);
      CLEARLASTERROR;
    END;

    LOCAL PROCEDURE SetNoSeries@9();
    VAR
      NoSeriesLine@1000 : Record 309;
      LibraryERMCountryData@1002 : Codeunit 131305;
      LastMaxNo@1001 : Code[20];
    BEGIN
      WITH NoSeriesLine DO
        IF FIND('-') THEN
          REPEAT
            IF LastMaxNo < "Last No. Used" THEN
              LastMaxNo := "Last No. Used";
          UNTIL NEXT = 0;

      WITH NoSeriesLine DO
        IF FIND('-') THEN
          REPEAT
            "Last No. Used" := LastMaxNo;
            "Ending No." := '';
            "Warning No." := '';
            MODIFY(TRUE);
          UNTIL NEXT = 0;

      LibraryERMCountryData.UpdateSalesReceivablesSetup;
    END;

    LOCAL PROCEDURE Initialize@80();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      SetNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
    END;

    BEGIN
    {
      // [FEATURE] [Item] [Item Type]
    }
    END.
  }
}

