OBJECT Table 16550 Service Tax Opening
{
  OBJECT-PROPERTIES
  {
    Date=24-04-16;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.45778;
  }
  PROPERTIES
  {
    OnInsert=VAR
               CompanyInfo@1500000 : Record 79;
               Location@1500001 : Record 14;
             BEGIN
               LOCKTABLE;
               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");

               IF "Location E.C.C. No." = '' THEN BEGIN
                 IF "Location Code" <> '' THEN BEGIN
                   Location.GET("Location Code");
                   "Location E.C.C. No." := Location."E.C.C. No.";
                 END ELSE BEGIN
                   CompanyInfo.GET;
                   "Location E.C.C. No." := CompanyInfo."E.C.C. No.";
                 END;
               END;
             END;

    CaptionML=[ENU=Service Tax Opening;
               ENN=Service Tax Opening];
    LookupPageID=Page16585;
    DrillDownPageID=Page16585;
  }
  FIELDS
  {
    { 1   ;   ;Journal Batch Name  ;Code10        ;TableRelation="Service Tax Batch";
                                                   CaptionML=[ENU=Journal Batch Name;
                                                              ENN=Journal Batch Name] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 4   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 5   ;   ;Service Tax Group Code;Code20      ;TableRelation="Service Tax Groups";
                                                   OnValidate=BEGIN
                                                                IF "Transaction No." = 0 THEN BEGIN
                                                                  GLSetup.GET;
                                                                  "Service Tax Rounding Precision" := GLSetup."Service Tax Rounding Precision";
                                                                  "Service Tax Rounding Type" := GLSetup."Service Tax Rounding Type";
                                                                END;
                                                                TESTFIELD("Posting Date");
                                                                ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date");
                                                                "Service Tax %" := ServiceTaxSetup."Service Tax %";
                                                                "Service Tax eCess %" := ServiceTaxSetup."eCess %";
                                                                "Service Tax SHE Cess %" := ServiceTaxSetup."SHE Cess %";
                                                                "Service Tax Abatement" := ServiceTaxSetup."Abatement %";
                                                                UpdatePayRecAccounts;
                                                                CalculateServiceTax;
                                                              END;

                                                   CaptionML=[ENU=Service Tax Group Code;
                                                              ENN=Service Tax Group Code];
                                                   Editable=Yes }
    { 6   ;   ;Service Tax Registration No.;Code20;TableRelation="Service Tax Registration Nos.";
                                                   CaptionML=[ENU=Service Tax Registration No.;
                                                              ENN=Service Tax Registration No.] }
    { 7   ;   ;Service Tax Base Amount;Decimal    ;OnValidate=BEGIN
                                                                TESTFIELD("Posting Date");
                                                                TESTFIELD("Service Tax Group Code");
                                                                TESTFIELD("Document Type");
                                                                IF "Entry Type" = "Entry Type"::Opening THEN BEGIN
                                                                  IF (Type = Type::Sale) AND ("Document Type" IN ["Document Type"::Invoice,"Document Type"::Payment]) THEN BEGIN
                                                                    IF "Service Tax Base Amount" > 0 THEN
                                                                      ERROR(Text16507,"Line No.",FIELDCAPTION("Service Tax Base Amount"),Text16511);
                                                                  END;
                                                                  IF (Type = Type::Sale) AND ("Document Type" IN ["Document Type"::"Credit Memo","Document Type"::Refund]) THEN BEGIN
                                                                    IF "Service Tax Base Amount" < 0 THEN
                                                                      ERROR(Text16507,"Line No.",FIELDCAPTION("Service Tax Base Amount"),Text16512);
                                                                  END;
                                                                  IF (Type = Type::Purchase) AND ("Document Type" IN ["Document Type"::Invoice,"Document Type"::Payment]) THEN BEGIN
                                                                    IF "Service Tax Base Amount" < 0 THEN
                                                                      ERROR(Text16507,"Line No.",FIELDCAPTION("Service Tax Base Amount"),Text16512);
                                                                  END;
                                                                  IF (Type = Type::Purchase) AND ("Document Type" IN ["Document Type"::"Credit Memo","Document Type"::Refund]) THEN BEGIN
                                                                    IF "Service Tax Base Amount" > 0 THEN
                                                                      ERROR(Text16507,"Line No.",FIELDCAPTION("Service Tax Base Amount"),Text16511);
                                                                  END;
                                                                END;
                                                                CalculateServiceTax;
                                                                VALIDATE("Amount Received/Paid");
                                                              END;

                                                   CaptionML=[ENU=Service Tax Base Amount;
                                                              ENN=Service Tax Base Amount];
                                                   Editable=Yes }
    { 8   ;   ;Service Tax Amount  ;Decimal       ;CaptionML=[ENU=Service Tax Amount;
                                                              ENN=Service Tax Amount];
                                                   Editable=No }
    { 9   ;   ;Payable/Receivable Amount;Decimal  ;CaptionML=[ENU=Payable/Receivable Amount;
                                                              ENN=Payable/Receivable Amount];
                                                   Editable=No }
    { 10  ;   ;Service Tax %       ;Decimal       ;OnValidate=BEGIN
                                                                CalculateServiceTax;
                                                              END;

                                                   CaptionML=[ENU=Service Tax %;
                                                              ENN=Service Tax %];
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=Yes }
    { 11  ;   ;Service Tax Abatement;Decimal      ;OnValidate=BEGIN
                                                                CalculateServiceTax;
                                                              END;

                                                   CaptionML=[ENU=Service Tax Abatement;
                                                              ENN=Service Tax Abatement];
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=Yes }
    { 12  ;   ;ST Rec./Pay. Account (Interim);Code20;
                                                   TableRelation="G/L Account";
                                                   CaptionML=[ENU=ST Rec./Pay. Account (Interim);
                                                              ENN=ST Rec./Pay. Account (Interim)];
                                                   Editable=No }
    { 13  ;   ;Transaction No.     ;Integer       ;OnValidate=VAR
                                                                ServiceTaxEntry@1500000 : Record 16473;
                                                                GLSetup@1500001 : Record 98;
                                                              BEGIN
                                                                IF "Transaction No." = 0 THEN
                                                                  EXIT;

                                                                IF Type = Type::Sale THEN BEGIN
                                                                  CustLedgEntry.RESET;
                                                                  CustLedgEntry.SETCURRENTKEY("Transaction No.");
                                                                  CustLedgEntry.SETRANGE("Transaction No.","Transaction No.");
                                                                  IF CustLedgEntry.FINDFIRST THEN BEGIN
                                                                    CustLedgEntry.CALCFIELDS("Amount (LCY)","Remaining Amt. (LCY)");
                                                                    "Payable/Receivable Amount" := CustLedgEntry."Amount (LCY)";
                                                                    "Document No." := CustLedgEntry."Document No.";
                                                                    "Posting Date" := CustLedgEntry."Posting Date";
                                                                    "Document Type" := CustLedgEntry."Document Type";
                                                                    "Party Code" := CustLedgEntry."Customer No.";
                                                                    "Serv. Tax on Advance Payment" := CustLedgEntry."Serv. Tax on Advance Payment";
                                                                    "Amount Received/Paid" := -(CustLedgEntry."Amount (LCY)" - CustLedgEntry."Remaining Amt. (LCY)");
                                                                    IF (("Document Type" = "Document Type"::Payment) OR ("Document Type" = "Document Type"::Refund))
                                                                       AND (NOT "Serv. Tax on Advance Payment")
                                                                    THEN
                                                                      ERROR(Text16509);
                                                                  END;
                                                                END;

                                                                IF Type = Type::Purchase THEN BEGIN
                                                                  VendLedgEntry.RESET;
                                                                  VendLedgEntry.SETCURRENTKEY("Transaction No.");
                                                                  VendLedgEntry.SETRANGE("Transaction No.","Transaction No.");
                                                                  IF VendLedgEntry.FINDFIRST THEN BEGIN
                                                                    VendLedgEntry.CALCFIELDS("Amount (LCY)","Remaining Amt. (LCY)");
                                                                    "Payable/Receivable Amount" := VendLedgEntry."Amount (LCY)";
                                                                    "Document No." := VendLedgEntry."Document No.";
                                                                    "Posting Date" := VendLedgEntry."Posting Date";
                                                                    "Document Type" := VendLedgEntry."Document Type";
                                                                    "Party Code" := VendLedgEntry."Vendor No.";
                                                                    "Serv. Tax on Advance Payment" := VendLedgEntry."Serv. Tax on Advance Payment";
                                                                    "Amount Received/Paid" := -(VendLedgEntry."Amount (LCY)" - VendLedgEntry."Remaining Amt. (LCY)");
                                                                    IF (("Document Type" = "Document Type"::Payment) OR ("Document Type" = "Document Type"::Refund))
                                                                       AND (NOT "Serv. Tax on Advance Payment")
                                                                    THEN
                                                                      ERROR(Text16509);
                                                                  END;
                                                                END;

                                                                GLSetup.GET;
                                                                "Service Tax Rounding Precision" := GLSetup."Service Tax Rounding Precision";
                                                                "Service Tax Rounding Type" := GLSetup."Service Tax Rounding Type";

                                                                IF "Entry Type" = "Entry Type"::Opening THEN BEGIN
                                                                  ServiceTaxEntry.SETCURRENTKEY("Document No.","Posting Date","Transaction No.");
                                                                  ServiceTaxEntry.SETRANGE("Transaction No.","Transaction No.");
                                                                  IF ServiceTaxEntry.FINDFIRST THEN
                                                                    ERROR(Text16508,"Line No.","Transaction No.");
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              GLSetup@1500000 : Record 98;
                                                            BEGIN
                                                              IF Type = Type::Sale THEN BEGIN
                                                                CustLedgEntry.RESET;
                                                                CustLedgEntry.SETCURRENTKEY("Transaction No.");
                                                                CustLedgEntry.SETFILTER("Document Type",'%1|%2|%3|%4',CustLedgEntry."Document Type"::Invoice,
                                                                  CustLedgEntry."Document Type"::"Credit Memo",CustLedgEntry."Document Type"::Payment,
                                                                  CustLedgEntry."Document Type"::Refund);
                                                                IF PAGE.RUNMODAL(0,CustLedgEntry) = ACTION::LookupOK THEN
                                                                  VALIDATE("Transaction No.",CustLedgEntry."Transaction No.");
                                                              END;

                                                              IF Type = Type::Purchase THEN BEGIN
                                                                VendLedgEntry.RESET;
                                                                VendLedgEntry.SETCURRENTKEY("Transaction No.");
                                                                VendLedgEntry.SETFILTER("Document Type",'%1|%2|%3|%4',VendLedgEntry."Document Type"::Invoice,
                                                                  VendLedgEntry."Document Type"::"Credit Memo",VendLedgEntry."Document Type"::Payment,
                                                                  VendLedgEntry."Document Type"::Refund);
                                                                IF PAGE.RUNMODAL(0,VendLedgEntry) = ACTION::LookupOK THEN
                                                                  VALIDATE("Transaction No.",VendLedgEntry."Transaction No.");
                                                              END;

                                                              GLSetup.GET;
                                                              "Service Tax Rounding Type" := GLSetup."Service Tax Rounding Precision";
                                                              "Service Tax Rounding Type" := GLSetup."Service Tax Rounding Type";
                                                            END;

                                                   CaptionML=[ENU=Transaction No.;
                                                              ENN=Transaction No.];
                                                   Editable=Yes }
    { 14  ;   ;Service Tax eCess % ;Decimal       ;OnValidate=BEGIN
                                                                CalculateServiceTax;
                                                              END;

                                                   CaptionML=[ENU=Service Tax eCess %;
                                                              ENN=Service Tax eCess %];
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=Yes }
    { 15  ;   ;eCess Amount        ;Decimal       ;CaptionML=[ENU=eCess Amount;
                                                              ENN=eCess Amount];
                                                   Editable=No }
    { 19  ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund];
                                                   Editable=Yes }
    { 21  ;   ;Amount Received/Paid;Decimal       ;OnValidate=BEGIN
                                                                IF ("Amount Received/Paid" <> 0) AND (NOT "Serv. Tax on Advance Payment") THEN
                                                                  CASE Type OF
                                                                    Type::Purchase:
                                                                      BEGIN
                                                                        IF "Document Type" IN ["Document Type"::Invoice,"Document Type"::Payment] THEN BEGIN
                                                                          IF "Amount Received/Paid" < 0 THEN
                                                                            ERROR(Text16501);
                                                                          IF "Amount Received/Paid" > -"Payable/Receivable Amount" THEN
                                                                            ERROR(Text16500);
                                                                        END;
                                                                        IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::Refund] THEN BEGIN
                                                                          IF "Amount Received/Paid" > 0 THEN
                                                                            ERROR(Text16502);
                                                                          IF -"Amount Received/Paid" > "Payable/Receivable Amount" THEN
                                                                            ERROR(Text16500);
                                                                        END;
                                                                      END;
                                                                    Type::Sale:
                                                                      BEGIN
                                                                        IF "Document Type" IN ["Document Type"::Invoice,"Document Type"::Payment] THEN BEGIN
                                                                          IF "Amount Received/Paid" > 0 THEN
                                                                            ERROR(Text16502);
                                                                          IF -"Amount Received/Paid" > "Payable/Receivable Amount" THEN
                                                                            ERROR(Text16500);
                                                                        END;
                                                                        IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::Refund] THEN BEGIN
                                                                          IF "Amount Received/Paid" < 0 THEN
                                                                            ERROR(Text16501);
                                                                          IF "Amount Received/Paid" > -"Payable/Receivable Amount" THEN
                                                                            ERROR(Text16500);
                                                                        END;
                                                                      END;
                                                                  END;

                                                                IF ("Amount Received/Paid" <> 0) AND "Serv. Tax on Advance Payment" THEN
                                                                  CASE Type OF
                                                                    Type::Purchase:
                                                                      BEGIN
                                                                        IF "Document Type" = "Document Type"::Payment THEN BEGIN
                                                                          IF "Amount Received/Paid" < 0 THEN
                                                                            ERROR(Text16501);
                                                                          IF "Amount Received/Paid" > "Payable/Receivable Amount" THEN
                                                                            ERROR(Text16500);
                                                                        END;
                                                                        IF "Document Type" = "Document Type"::Refund THEN BEGIN
                                                                          IF "Amount Received/Paid" > 0 THEN
                                                                            ERROR(Text16502);
                                                                          IF "Amount Received/Paid" > "Payable/Receivable Amount" THEN
                                                                            ERROR(Text16500);
                                                                        END;
                                                                      END;
                                                                    Type::Sale:
                                                                      BEGIN
                                                                        IF "Document Type" = "Document Type"::Payment THEN BEGIN
                                                                          IF "Amount Received/Paid" > 0 THEN
                                                                            ERROR(Text16502);
                                                                          IF "Amount Received/Paid" > "Payable/Receivable Amount" THEN
                                                                            ERROR(Text16500);
                                                                        END;
                                                                        IF "Document Type" = "Document Type"::Refund THEN BEGIN
                                                                          IF "Amount Received/Paid" < 0 THEN
                                                                            ERROR(Text16501);
                                                                          IF "Amount Received/Paid" > "Payable/Receivable Amount" THEN
                                                                            ERROR(Text16500);
                                                                        END;
                                                                      END;
                                                                  END;

                                                                IF ("Payable/Receivable Amount" <> 0) AND (Type = Type::Purchase) THEN BEGIN
                                                                  IF NOT "Serv. Tax on Advance Payment" THEN BEGIN
                                                                    "Remaining Amount" := ROUND(-("Amount Received/Paid" / "Payable/Receivable Amount") * "Service Tax Amount");
                                                                    "Remaining eCess Amount" := ROUND(-("Amount Received/Paid" / "Payable/Receivable Amount" ) * "eCess Amount");
                                                                    "Remaining SHE Cess Amount" := ROUND(-("Amount Received/Paid" / "Payable/Receivable Amount" ) * "SHE Cess Amount");
                                                                  END ELSE BEGIN
                                                                    "Remaining Amount" := ROUND(("Amount Received/Paid" / "Payable/Receivable Amount") * "Service Tax Amount");
                                                                    "Remaining eCess Amount" := ROUND(("Amount Received/Paid" / "Payable/Receivable Amount" ) * "eCess Amount");
                                                                    "Remaining SHE Cess Amount" := ROUND(("Amount Received/Paid" / "Payable/Receivable Amount" ) * "SHE Cess Amount");
                                                                    IF Type = Type::Purchase THEN BEGIN
                                                                      "Remaining Serv. Tax Base Amt" := ROUND(("Amount Received/Paid" / "Payable/Receivable Amount") *
                                                                          "Service Tax Base Amount");
                                                                      "Remaining Serv. Tax Amt" := ROUND(("Amount Received/Paid" / "Payable/Receivable Amount") *
                                                                          "Service Tax Amount");
                                                                      "Remaining Serv. Tax eCess Amt" := ROUND(("Amount Received/Paid" / "Payable/Receivable Amount") *
                                                                          "eCess Amount");
                                                                      "Remaining ST SHE Cess Amt" := ROUND(("Amount Received/Paid" / "Payable/Receivable Amount") *
                                                                          "SHE Cess Amount");
                                                                      "Remaining Serv. Tax Base Amt" := "Service Tax Base Amount" - "Remaining Serv. Tax Base Amt";
                                                                      "Remaining Serv. Tax Amt" := "Service Tax Amount" - "Remaining Serv. Tax Amt";
                                                                      "Remaining Serv. Tax eCess Amt" := "eCess Amount" - "Remaining Serv. Tax eCess Amt";
                                                                      "Remaining ST SHE Cess Amt" := "SHE Cess Amount" - "Remaining ST SHE Cess Amt";
                                                                    END;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "Remaining Amount" := 0;
                                                                  "Remaining eCess Amount" := 0;
                                                                  "Remaining SHE Cess Amount" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Amount Received/Paid;
                                                              ENN=Amount Received/Paid] }
    { 22  ;   ;Remaining Amount    ;Decimal       ;CaptionML=[ENU=Remaining Amount;
                                                              ENN=Remaining Amount] }
    { 23  ;   ;Remaining eCess Amount;Decimal     ;CaptionML=[ENU=Remaining eCess Amount;
                                                              ENN=Remaining eCess Amount] }
    { 24  ;   ;ST Rec./Pay. Account;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=[ENU=ST Rec./Pay. Account;
                                                              ENN=ST Rec./Pay. Account];
                                                   Editable=No }
    { 25  ;   ;Bal. Account Type (Interim);Option ;OnValidate=BEGIN
                                                                IF "Bal. Account Type (Interim)" <> xRec."Bal. Account Type (Interim)" THEN
                                                                  "Bal. Account No. (Interim)" := '';
                                                                IF Type = Type::Purchase THEN BEGIN
                                                                  IF NOT ("Bal. Account Type (Interim)" IN ["Bal. Account Type (Interim)"::"G/L Account",
                                                                                                            "Bal. Account Type (Interim)"::Vendor])
                                                                  THEN
                                                                    ERROR(Text16503);
                                                                END;
                                                                IF Type = Type::Sale THEN BEGIN
                                                                  IF NOT ("Bal. Account Type (Interim)" IN ["Bal. Account Type (Interim)"::"G/L Account",
                                                                                                            "Bal. Account Type (Interim)"::Customer])
                                                                  THEN
                                                                    ERROR(Text16504);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Bal. Account Type (Interim);
                                                              ENN=Bal. Account Type (Interim)];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                                    ENN=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 26  ;   ;Bal. Account No. (Interim);Code20  ;TableRelation=IF (Bal. Account Type (Interim)=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type (Interim)=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type (Interim)=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type (Interim)=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Bal. Account Type (Interim)=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Bal. Account Type (Interim)=CONST(IC Partner)) "IC Partner";
                                                   CaptionML=[ENU=Bal. Account No. (Interim);
                                                              ENN=Bal. Account No. (Interim)] }
    { 27  ;   ;Bal. Account Type   ;Option        ;OnValidate=BEGIN
                                                                IF "Bal. Account Type" <> xRec."Bal. Account Type" THEN
                                                                  "Bal. Account No." := '';
                                                                IF Type = Type::Purchase THEN BEGIN
                                                                  IF NOT ("Bal. Account Type" IN ["Bal. Account Type"::"G/L Account","Bal. Account Type"::Vendor]) THEN
                                                                    ERROR(Text16505);
                                                                END;
                                                                IF Type = Type::Sale THEN BEGIN
                                                                  IF NOT ("Bal. Account Type" IN ["Bal. Account Type"::"G/L Account","Bal. Account Type"::Customer]) THEN
                                                                    ERROR(Text16506);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Bal. Account Type;
                                                              ENN=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                                    ENN=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 28  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Bal. Account Type=CONST(IC Partner)) "IC Partner";
                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENN=Bal. Account No.] }
    { 30  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                            END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,1,1' }
    { 31  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                            END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,1,2' }
    { 32  ;   ;Party Code          ;Code20        ;TableRelation=IF (Type=FILTER(Purchase)) Vendor.No.
                                                                 ELSE IF (Type=FILTER(Sale)) Customer.No.;
                                                   CaptionML=[ENU=Party Code;
                                                              ENN=Party Code] }
    { 33  ;   ;Serv. Tax on Advance Payment;Boolean;
                                                   CaptionML=[ENU=Serv. Tax on Advance Payment;
                                                              ENN=Serv. Tax on Advance Payment];
                                                   Editable=No }
    { 34  ;   ;Remaining Serv. Tax Amt;Decimal    ;OnValidate=BEGIN
                                                                TESTFIELD("Serv. Tax on Advance Payment",TRUE);
                                                              END;

                                                   CaptionML=[ENU=Remaining Serv. Tax Amt;
                                                              ENN=Remaining Serv. Tax Amt] }
    { 35  ;   ;Remaining Serv. Tax eCess Amt;Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Serv. Tax on Advance Payment",TRUE);
                                                              END;

                                                   CaptionML=[ENU=Remaining Serv. Tax eCess Amt;
                                                              ENN=Remaining Serv. Tax eCess Amt] }
    { 36  ;   ;Remaining Serv. Tax Base Amt;Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Serv. Tax on Advance Payment",TRUE);
                                                              END;

                                                   CaptionML=[ENU=Remaining Serv. Tax Base Amt;
                                                              ENN=Remaining Serv. Tax Base Amt] }
    { 37  ;   ;Applied ST Entry No.;Integer       ;TableRelation="Service Tax Entry"."Entry No." WHERE (Document Type=FILTER(Invoice|Credit Memo|Payment|Refund),
                                                                                                        Serv. Tax on Advance Payment=FILTER(No));
                                                   OnValidate=VAR
                                                                ServiceTaxEntry@1500000 : Record 16473;
                                                                ServiceTaxEntry2@1500001 : Record 16473;
                                                                ServiceTaxEntryDtls@1500002 : Record 16474;
                                                              BEGIN
                                                                IF "Applied ST Entry No." <> 0 THEN BEGIN
                                                                  TESTFIELD("Transaction No.",0);
                                                                  ServiceTaxEntry.GET("Applied ST Entry No.");
                                                                  ServiceTaxEntry.TESTFIELD(Adjusted,FALSE);
                                                                  ServiceTaxEntry.TESTFIELD("Serv. Tax on Advance Payment",FALSE);
                                                                  ServiceTaxEntry.TESTFIELD("Reverse Charge",FALSE);
                                                                  ServiceTaxEntry.TESTFIELD("Nature of Services",ServiceTaxEntry."Nature of Services"::" ");
                                                                  ServiceTaxEntry.TESTFIELD("ST Pure Agent",FALSE);

                                                                  ServiceTaxEntryDtls.SETCURRENTKEY("Service Tax Entry No.");
                                                                  ServiceTaxEntryDtls.SETRANGE("Service Tax Entry No.","Applied ST Entry No.");
                                                                  IF ServiceTaxEntryDtls.FIND('-') THEN
                                                                    REPEAT
                                                                      IF ServiceTaxEntry.Type = ServiceTaxEntry.Type::Purchase THEN BEGIN
                                                                        IF (ABS(ServiceTaxEntryDtls."Remaining Credit") < ABS(ServiceTaxEntryDtls."Service Tax Amount")) OR
                                                                           (ABS(ServiceTaxEntryDtls."Remaining Credit (eCess)") < ABS(ServiceTaxEntryDtls."Service Tax eCess Amount")) OR
                                                                           (ABS(ServiceTaxEntryDtls."Remaining Credit (SHECess)") < ABS(ServiceTaxEntryDtls."Service Tax SHE Cess Amount"))
                                                                        THEN
                                                                          ERROR(Text16513);
                                                                      END ELSE
                                                                        IF ServiceTaxEntry.Type = ServiceTaxEntry.Type::Sale THEN BEGIN
                                                                          IF ServiceTaxEntryDtls.Closed OR ServiceTaxEntryDtls."Closed (eCess)" OR ServiceTaxEntryDtls."Closed (SHECess)" THEN
                                                                            ERROR(Text16514);
                                                                        END;
                                                                    UNTIL ServiceTaxEntryDtls.NEXT = 0;

                                                                  "Input Service Distribution" := ServiceTaxEntry."Input Service Distribution";
                                                                  "Location Code" := ServiceTaxEntry."Location Code";
                                                                  Type := ServiceTaxEntry.Type;
                                                                  "Document No." := ServiceTaxEntry."Document No.";
                                                                  "Applied Document No." := ServiceTaxEntry."Document No.";
                                                                  "Applied Posting Date" := ServiceTaxEntry."Posting Date";
                                                                  "Posting Date" := ServiceTaxEntry."Posting Date";
                                                                  "Service Tax Group Code" := ServiceTaxEntry."Service Tax Group Code";
                                                                  "Service Tax Registration No." := ServiceTaxEntry."Service Tax Registration No.";
                                                                  "Service Tax Amount" := ServiceTaxEntry."Service Tax Amount";
                                                                  "Service Tax %" := ServiceTaxEntry."Service Tax %";
                                                                  "Service Tax Abatement" := ServiceTaxEntry."Service Tax Abatement";
                                                                  "Service Tax eCess %" := ServiceTaxEntry."Service Tax eCess %";
                                                                  "eCess Amount" := ServiceTaxEntry."eCess Amount";
                                                                  "Service Tax SHE Cess %" := ServiceTaxEntry."Service Tax SHE Cess %";
                                                                  "SHE Cess Amount" := ServiceTaxEntry."SHE Cess Amount";

                                                                  ServiceTaxSetup.FindOnDate("Service Tax Group Code","Posting Date");
                                                                  UpdatePayRecAccounts;
                                                                  IF Type = Type::Purchase THEN BEGIN
                                                                    "Service Tax Rounding Precision" := ServiceTaxEntry."Service Tax Rounding Precision";
                                                                    "Service Tax Rounding Type" := ServiceTaxEntry."Service Tax Rounding Type";
                                                                  END;
                                                                  "Party Code" := ServiceTaxEntry."Party Code";
                                                                  "Applied ST Base Amount" := ServiceTaxEntry."Service Tax Base Amount";
                                                                  "Applied Service Tax Amount" := ServiceTaxEntry."Service Tax Amount";
                                                                  "Applied eCess Amount" := ServiceTaxEntry."eCess Amount";
                                                                  "Applied SHE Cess Amount" := ServiceTaxEntry."SHE Cess Amount";
                                                                  "Applied Service Tax %" := ServiceTaxEntry."Service Tax %";
                                                                  "Applied Abatement" := ServiceTaxEntry."Service Tax Abatement";
                                                                  "Applied Service Tax eCess %" := ServiceTaxEntry."Service Tax eCess %";
                                                                  "Applied Service Tax SHE Cess %" := ServiceTaxEntry."Service Tax SHE Cess %";
                                                                  "Applied Document Type" := ServiceTaxEntry."Document Type";
                                                                  "Document Type" := ServiceTaxEntry."Document Type";
                                                                  "Serv. Tax on Advance Payment" := ServiceTaxEntry."Serv. Tax on Advance Payment";
                                                                  "Location E.C.C. No." := ServiceTaxEntry."Location E.C.C. No.";
                                                                  "Service Tax Rounding Precision" := ServiceTaxEntry."Service Tax Rounding Precision";
                                                                  "Service Tax Rounding Type" := ServiceTaxEntry."Service Tax Rounding Type";
                                                                  ServiceTaxEntry2.SETCURRENTKEY(Adjusted,"Adjusted Agst Entry No.");
                                                                  ServiceTaxEntry2.SETRANGE(Adjusted,TRUE);
                                                                  ServiceTaxEntry2.SETRANGE("Adjusted Agst Entry No.",ServiceTaxEntry."Entry No.");
                                                                  IF ServiceTaxEntry2.FINDSET THEN BEGIN
                                                                    IF NOT CONFIRM(Text16510,FALSE) THEN
                                                                      ERROR('');
                                                                    REPEAT
                                                                      "Applied Service Tax Amount" := "Applied Service Tax Amount" + ServiceTaxEntry2."Service Tax Amount";
                                                                      "Applied eCess Amount" := "Applied eCess Amount" + ServiceTaxEntry2."eCess Amount";
                                                                      "Applied SHE Cess Amount" := "Applied SHE Cess Amount" + ServiceTaxEntry2."SHE Cess Amount";
                                                                    UNTIL ServiceTaxEntry2.NEXT = 0;
                                                                    "Applied Service Tax %" := ServiceTaxEntry2."Service Tax %";
                                                                    "Applied Abatement" := ServiceTaxEntry2."Service Tax Abatement";
                                                                    "Applied Service Tax eCess %" := ServiceTaxEntry2."Service Tax eCess %";
                                                                    "Applied Service Tax SHE Cess %" := ServiceTaxEntry2."Service Tax SHE Cess %";
                                                                    "Service Tax %" := ServiceTaxEntry2."Service Tax %";
                                                                    "Service Tax Abatement" := ServiceTaxEntry2."Service Tax Abatement";
                                                                    "Service Tax eCess %" := ServiceTaxEntry2."Service Tax eCess %";
                                                                    "Service Tax SHE Cess %" := ServiceTaxEntry2."Service Tax SHE Cess %";
                                                                  END;
                                                                  CalculateServiceTax;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Applied ST Entry No.;
                                                              ENN=Applied ST Entry No.] }
    { 38  ;   ;Entry Type          ;Option        ;CaptionML=[ENU=Entry Type;
                                                              ENN=Entry Type];
                                                   OptionCaptionML=[ENU=Opening,Adjustment;
                                                                    ENN=Opening,Adjustment];
                                                   OptionString=Opening,Adjustment }
    { 39  ;   ;Applied Service Tax Amount;Decimal ;CaptionML=[ENU=Applied Service Tax Amount;
                                                              ENN=Applied Service Tax Amount];
                                                   Editable=No }
    { 40  ;   ;Applied eCess Amount;Decimal       ;CaptionML=[ENU=Applied eCess Amount;
                                                              ENN=Applied eCess Amount];
                                                   Editable=No }
    { 41  ;   ;Applied Service Tax %;Decimal      ;CaptionML=[ENU=Applied Service Tax %;
                                                              ENN=Applied Service Tax %];
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 42  ;   ;Applied Abatement   ;Decimal       ;CaptionML=[ENU=Applied Abatement;
                                                              ENN=Applied Abatement];
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 43  ;   ;Applied Service Tax eCess %;Decimal;CaptionML=[ENU=Applied Service Tax eCess %;
                                                              ENN=Applied Service Tax eCess %];
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 44  ;   ;Applied Document Type;Option       ;CaptionML=[ENU=Applied Document Type;
                                                              ENN=Applied Document Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund];
                                                   Editable=No }
    { 45  ;   ;New Service Tax Amount;Decimal     ;CaptionML=[ENU=New Service Tax Amount;
                                                              ENN=New Service Tax Amount];
                                                   Editable=No }
    { 46  ;   ;New eCess Amount    ;Decimal       ;CaptionML=[ENU=New eCess Amount;
                                                              ENN=New eCess Amount];
                                                   Editable=No }
    { 47  ;   ;Applied ST Base Amount;Decimal     ;CaptionML=[ENU=Applied ST Base Amount;
                                                              ENN=Applied ST Base Amount];
                                                   Editable=No }
    { 48  ;   ;Applied Posting Date;Date          ;CaptionML=[ENU=Applied Posting Date;
                                                              ENN=Applied Posting Date];
                                                   Editable=No }
    { 49  ;   ;Applied Document No.;Code20        ;CaptionML=[ENU=Applied Document No.;
                                                              ENN=Applied Document No.];
                                                   Editable=No }
    { 50  ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ENN=External Document No.] }
    { 51  ;   ;Type                ;Option        ;OnValidate=VAR
                                                                TempServiceTaxOpening@1500000 : TEMPORARY Record 16550;
                                                              BEGIN
                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  TempServiceTaxOpening := Rec;
                                                                  INIT;
                                                                  "Line No." := TempServiceTaxOpening."Line No.";
                                                                  "Journal Batch Name" := TempServiceTaxOpening."Journal Batch Name";
                                                                  Type := TempServiceTaxOpening.Type;
                                                                  "Entry Type" := TempServiceTaxOpening."Entry Type";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENN=Type];
                                                   OptionCaptionML=[ENU=Sale,Purchase,Charge;
                                                                    ENN=Sale,Purchase,Charge];
                                                   OptionString=Sale,Purchase,Charge;
                                                   Editable=Yes }
    { 52  ;   ;New Service Tax %   ;Decimal       ;OnValidate=BEGIN
                                                                "Service Tax %" := "New Service Tax %";
                                                                CalculateServiceTax;
                                                              END;

                                                   CaptionML=[ENU=New Service Tax %;
                                                              ENN=New Service Tax %];
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 53  ;   ;New Ecess %         ;Decimal       ;OnValidate=BEGIN
                                                                "Service Tax eCess %" := "New Ecess %";
                                                                CalculateServiceTax;
                                                              END;

                                                   CaptionML=[ENU=New Ecess %;
                                                              ENN=New Ecess %];
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 54  ;   ;New Abatment %      ;Decimal       ;OnValidate=BEGIN
                                                                "Service Tax Abatement" := "New Abatment %";
                                                                CalculateServiceTax;
                                                              END;

                                                   CaptionML=[ENU=New Abatment %;
                                                              ENN=New Abatment %];
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 55  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=VAR
                                                                Location@1500000 : Record 14;
                                                                CompanyInfo@1500001 : Record 79;
                                                              BEGIN
                                                                IF "Location Code" <> '' THEN BEGIN
                                                                  Location.GET("Location Code");
                                                                  "Service Tax Registration No." := Location."Service Tax Registration No.";
                                                                  "Location E.C.C. No." := Location."E.C.C. No.";
                                                                  "Input Service Distribution" := Location."Input Service Distributor" AND (Type = Type::Purchase);
                                                                END ELSE BEGIN
                                                                  CompanyInfo.GET;
                                                                  "Service Tax Registration No." := CompanyInfo."Service Tax Registration No.";
                                                                  "Location E.C.C. No." := CompanyInfo."E.C.C. No.";
                                                                  "Input Service Distribution" := CompanyInfo."Input Service Distributor" AND (Type = Type::Purchase);
                                                                END;
                                                                VALIDATE("Service Tax Group Code");
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 56  ;   ;Location E.C.C. No. ;Code20        ;TableRelation="E.C.C. Nos.";
                                                   CaptionML=[ENU=Location E.C.C. No.;
                                                              ENN=Location E.C.C. No.];
                                                   Editable=No }
    { 57  ;   ;Service Tax SHE Cess %;Decimal     ;OnValidate=BEGIN
                                                                CalculateServiceTax;
                                                              END;

                                                   CaptionML=[ENU=Service Tax SHE Cess %;
                                                              ENN=Service Tax SHE Cess %];
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=Yes }
    { 58  ;   ;SHE Cess Amount     ;Decimal       ;CaptionML=[ENU=SHE Cess Amount;
                                                              ENN=SHE Cess Amount];
                                                   Editable=No }
    { 59  ;   ;Remaining SHE Cess Amount;Decimal  ;CaptionML=[ENU=Remaining SHE Cess Amount;
                                                              ENN=Remaining SHE Cess Amount] }
    { 60  ;   ;Remaining ST SHE Cess Amt;Decimal  ;OnValidate=BEGIN
                                                                TESTFIELD("Serv. Tax on Advance Payment",TRUE);
                                                              END;

                                                   CaptionML=[ENU=Remaining ST SHE Cess Amt;
                                                              ENN=Remaining ST SHE Cess Amt] }
    { 61  ;   ;Applied SHE Cess Amount;Decimal    ;CaptionML=[ENU=Applied SHE Cess Amount;
                                                              ENN=Applied SHE Cess Amount];
                                                   Editable=No }
    { 62  ;   ;Applied Service Tax SHE Cess %;Decimal;
                                                   CaptionML=[ENU=Applied Service Tax SHE Cess %;
                                                              ENN=Applied Service Tax SHE Cess %];
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 63  ;   ;New SHE Cess Amount ;Decimal       ;CaptionML=[ENU=New SHE Cess Amount;
                                                              ENN=New SHE Cess Amount];
                                                   Editable=No }
    { 64  ;   ;New SHE Cess %      ;Decimal       ;OnValidate=BEGIN
                                                                "Service Tax SHE Cess %" := "New SHE Cess %";
                                                                CalculateServiceTax;
                                                              END;

                                                   CaptionML=[ENU=New SHE Cess %;
                                                              ENN=New SHE Cess %];
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 65  ;   ;Input Service Distribution;Boolean ;CaptionML=[ENU=Input Service Distribution;
                                                              ENN=Input Service Distribution] }
    { 66  ;   ;Service Tax Rounding Precision;Decimal;
                                                   OnValidate=BEGIN
                                                                CalculateServiceTax;
                                                              END;

                                                   CaptionML=[ENU=Service Tax Rounding Precision;
                                                              ENN=Service Tax Rounding Precision] }
    { 67  ;   ;Service Tax Rounding Type;Option   ;OnValidate=BEGIN
                                                                CalculateServiceTax;
                                                              END;

                                                   CaptionML=[ENU=Service Tax Rounding Type;
                                                              ENN=Service Tax Rounding Type];
                                                   OptionCaptionML=[ENU=Nearest,Up,Down;
                                                                    ENN=Nearest,Up,Down];
                                                   OptionString=Nearest,Up,Down }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Journal Batch Name,Line No.             ;Clustered=Yes }
    {    ;Document No.,Posting Date,Service Tax eCess % }
    {    ;Service Tax Registration No.,Service Tax Group Code,Posting Date,Type }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GLSetup@1500026 : Record 98;
      VendLedgEntry@1500000 : Record 25;
      CustLedgEntry@1500001 : Record 21;
      ServiceTaxSetup@1500002 : Record 16472;
      Text16500@1500007 : TextConst 'ENU=Amount Received/Paid cannot be more than total amount payable/receivable.;ENN=Amount Received/Paid cannot be more than total amount payable/receivable.';
      Text16501@1500004 : TextConst 'ENU=Amount Received/Paid should be positive.;ENN=Amount Received/Paid should be positive.';
      Text16502@1500003 : TextConst 'ENU=Amount Received/Paid should be negative.;ENN=Amount Received/Paid should be negative.';
      Text16503@1500008 : TextConst 'ENU=Bal. Account Type (Interim) should be G/L Account or Vendor;ENN=Bal. Account Type (Interim) should be G/L Account or Vendor';
      Text16504@1500009 : TextConst 'ENU=Bal. Account Type (Interim) should be G/L Account or Customer;ENN=Bal. Account Type (Interim) should be G/L Account or Customer';
      Text16505@1500011 : TextConst 'ENU=Bal. Account Type should be G/L Account or Vendor;ENN=Bal. Account Type should be G/L Account or Vendor';
      Text16506@1500010 : TextConst 'ENU=Bal. Account Type should be G/L Account or Customer;ENN=Bal. Account Type should be G/L Account or Customer';
      Text16507@1500016 : TextConst 'ENU="For Line No.=%1, %2 should not be %3.";ENN="For Line No.=%1, %2 should not be %3."';
      Text16508@1500013 : TextConst 'ENU="For Line No.=%1, entry for Transaction No.= %2 already exists.";ENN="For Line No.=%1, entry for Transaction No.= %2 already exists."';
      Text16509@1500012 : TextConst 'ENU=Only Advance Payment/Advance Refund or Invoice/Credit Memo transactions are allowed.;ENN=Only Advance Payment/Advance Refund or Invoice/Credit Memo transactions are allowed.';
      Text16510@1500015 : TextConst 'ENU=Already adjusted, do you wish to continue?;ENN=Already adjusted, do you wish to continue?';
      DimMgt@1500014 : Codeunit 408;
      Text16511@1500005 : TextConst 'ENU=positive;ENN=positive';
      Text16512@1500006 : TextConst 'ENU=negative;ENN=negative';
      Text16513@1500017 : TextConst 'ENU=Entry cannot be adjusted as credit for the entry has been partly/completely utilised.;ENN=Entry cannot be adjusted as credit for the entry has been partly/completely utilised.';
      Text16514@1500019 : TextConst 'ENU=Entry cannot be adjusted as liability for the entry has been party/completely closed.;ENN=Entry cannot be adjusted as liability for the entry has been party/completely closed.';

    LOCAL PROCEDURE CalculateServiceTax@1280002();
    BEGIN
      IF "Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo","Document Type"::Payment,"Document Type"::Refund]
      THEN BEGIN
        IF NOT "Serv. Tax on Advance Payment" THEN BEGIN
          "Service Tax Amount" :=
            RoundServiceTaxAmount((("Service Tax Base Amount" * "Service Tax %" * ((100 - "Service Tax Abatement") / 100)) / 100));
          "eCess Amount" := RoundServiceTaxAmount(("Service Tax Amount" * "Service Tax eCess %") / 100);
          "SHE Cess Amount" := RoundServiceTaxAmount(("Service Tax Amount" * "Service Tax SHE Cess %") / 100);
        END ELSE BEGIN
          IF (1 + (("Service Tax %" * (1 - "Service Tax Abatement" / 100)) / 100) *
              (1 + ("Service Tax eCess %" + "Service Tax SHE Cess %") / 100)) <> 0
          THEN
            "Service Tax Base Amount" :=
              ROUND("Payable/Receivable Amount" / (1 + (("Service Tax %" * (1 - "Service Tax Abatement" / 100)) / 100) *
                                                   (1 + ("Service Tax eCess %" + "Service Tax SHE Cess %") / 100)))
          ELSE
            "Service Tax Base Amount" := 0;
          "Service Tax Amount" := ROUND("Service Tax Base Amount" * "Service Tax %" * (1 - "Service Tax Abatement" / 100) / 100);
          "eCess Amount" := ROUND("Service Tax Amount" * "Service Tax eCess %" / 100);
          "SHE Cess Amount" := ROUND("Service Tax Amount" * "Service Tax SHE Cess %" / 100);

          IF Type = Type::Purchase THEN BEGIN
            IF "Payable/Receivable Amount" <> 0 THEN BEGIN
              "Remaining Serv. Tax Base Amt" :=
                ROUND(-("Amount Received/Paid" / "Payable/Receivable Amount")*"Service Tax Base Amount");
              "Remaining Serv. Tax Amt" := ROUND(-("Amount Received/Paid" / "Payable/Receivable Amount") * "Service Tax Amount");
              "Remaining Serv. Tax eCess Amt" := ROUND(-("Amount Received/Paid" / "Payable/Receivable Amount") * "eCess Amount");
              "Remaining ST SHE Cess Amt" := ROUND(-("Amount Received/Paid" / "Payable/Receivable Amount") * "SHE Cess Amount");
              "Remaining Serv. Tax Base Amt" := "Service Tax Base Amount" - "Remaining Serv. Tax Base Amt";
              "Remaining Serv. Tax Amt" := "Service Tax Amount" - "Remaining Serv. Tax Amt";
              "Remaining Serv. Tax eCess Amt" := "eCess Amount" - "Remaining Serv. Tax eCess Amt";
              "Remaining ST SHE Cess Amt" := "SHE Cess Amount" - "Remaining ST SHE Cess Amt";
            END ELSE BEGIN
              "Remaining Serv. Tax Base Amt" := 0;
              "Remaining Serv. Tax Amt" := 0;
              "Remaining Serv. Tax eCess Amt" := 0;
              "Remaining ST SHE Cess Amt" := 0;
            END;
          END ELSE IF Type = Type::Sale THEN BEGIN
              "Remaining Serv. Tax Base Amt" := "Service Tax Base Amount";
              "Remaining Serv. Tax Amt" := "Service Tax Amount";
              "Remaining Serv. Tax eCess Amt" := "eCess Amount";
              "Remaining ST SHE Cess Amt" := "SHE Cess Amount";
            END;
        END;

        IF (Type = Type::Sale) AND ("Entry Type" = "Entry Type"::Adjustment) THEN BEGIN
          "New Service Tax Amount" :=
            ROUND((("Applied ST Base Amount" * "Service Tax %" * ((100 - "Service Tax Abatement") / 100)) / 100));
          "New eCess Amount" := ROUND(("New Service Tax Amount" * "Service Tax eCess %") / 100);
          "New SHE Cess Amount" := ROUND(("New Service Tax Amount" * "Service Tax SHE Cess %") / 100);
          "Service Tax Amount" := RoundServiceTaxAmount("New Service Tax Amount" - "Applied Service Tax Amount");
          "eCess Amount" := RoundServiceTaxAmount("New eCess Amount" - "Applied eCess Amount");
          "SHE Cess Amount" := RoundServiceTaxAmount("New SHE Cess Amount" - "Applied SHE Cess Amount");
          IF "Applied Document Type" IN ["Applied Document Type"::Invoice,"Applied Document Type"::"Credit Memo"] THEN BEGIN
            IF FullTaxAmount < 0 THEN
              "Document Type" := "Document Type"::Invoice;
            IF FullTaxAmount > 0 THEN
              "Document Type" := "Document Type"::"Credit Memo";
            "Bal. Account Type (Interim)" := "Bal. Account Type (Interim)"::Customer;
            "Bal. Account No. (Interim)" := "Party Code";
          END;
          IF "Applied Document Type" IN ["Applied Document Type"::Payment,"Applied Document Type"::Refund] THEN BEGIN
            IF FullTaxAmount < 0 THEN
              "Document Type" := "Document Type"::Payment;
            IF FullTaxAmount > 0 THEN
              "Document Type" := "Document Type"::Refund;
          END;
        END;

        IF (Type = Type::Purchase) AND ("Entry Type" = "Entry Type"::Adjustment) THEN BEGIN
          "New Service Tax Amount" :=
            ROUND((("Applied ST Base Amount" * "Service Tax %" * ((100 - "Service Tax Abatement") / 100)) / 100));
          "New eCess Amount" := ROUND(("New Service Tax Amount" * "Service Tax eCess %") / 100);
          "New SHE Cess Amount" := ROUND(("New Service Tax Amount" * "Service Tax SHE Cess %") / 100);
          "Service Tax Amount" := RoundServiceTaxAmount("New Service Tax Amount" - "Applied Service Tax Amount");
          "eCess Amount" := RoundServiceTaxAmount("New eCess Amount" - "Applied eCess Amount");
          "SHE Cess Amount" := RoundServiceTaxAmount("New SHE Cess Amount" - "Applied SHE Cess Amount");

          IF "Applied Document Type" IN ["Applied Document Type"::Invoice,"Applied Document Type"::"Credit Memo"] THEN BEGIN
            IF FullTaxAmount > 0 THEN
              "Document Type" := "Document Type"::Invoice;
            IF FullTaxAmount < 0 THEN
              "Document Type" := "Document Type"::"Credit Memo";
            "Bal. Account Type (Interim)" := "Bal. Account Type (Interim)"::Vendor;
            "Bal. Account No. (Interim)" := "Party Code";
          END;
          IF "Applied Document Type" IN ["Applied Document Type"::Payment,"Applied Document Type"::Refund] THEN BEGIN
            IF FullTaxAmount > 0 THEN
              "Document Type" := "Document Type"::Payment;
            IF FullTaxAmount < 0 THEN
              "Document Type" := "Document Type"::Refund;
          END;
        END;

        IF ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) AND (NOT "Serv. Tax on Advance Payment") THEN BEGIN
          IF "Entry Type" = "Entry Type"::Opening THEN BEGIN
            TESTFIELD("Transaction No.",0);
            "Payable/Receivable Amount" := -("Service Tax Base Amount" + FullTaxAmount);
            VALIDATE("Amount Received/Paid",-"Payable/Receivable Amount");
          END ELSE BEGIN
            TESTFIELD("Transaction No.",0);
            "Payable/Receivable Amount" := -("Service Tax Base Amount" + "Service Tax Amount" + "eCess Amount" + "SHE Cess Amount");
            VALIDATE("Amount Received/Paid",-"Payable/Receivable Amount");
          END;
        END;

        IF ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) AND "Serv. Tax on Advance Payment" THEN BEGIN
          IF "Entry Type" = "Entry Type"::Opening THEN BEGIN
            TESTFIELD("Transaction No.");
            IF Type = Type::Sale THEN
              VALIDATE("Amount Received/Paid","Payable/Receivable Amount");
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE RoundServiceTaxAmount@1500003(ServiceTaxAmount@1280000 : Decimal) : Decimal;
    VAR
      ServiceTaxEntry@1500000 : Record 16473;
    BEGIN
      ServiceTaxEntry."Service Tax Rounding Precision" := "Service Tax Rounding Precision";
      ServiceTaxEntry."Service Tax Rounding Type" := "Service Tax Rounding Type";
      EXIT(ServiceTaxEntry.RoundAmount(ServiceTaxAmount));
    END;

    PROCEDURE FullTaxAmount@1500000() : Decimal;
    BEGIN
      EXIT("Service Tax Amount" + "eCess Amount" + "SHE Cess Amount");
    END;

    LOCAL PROCEDURE UpdatePayRecAccounts@1500001();
    BEGIN
      CASE Type OF
        Type::Purchase:
          BEGIN
            "ST Rec./Pay. Account (Interim)" := ServiceTaxSetup.GetRecInterimAccNoByISD("Input Service Distribution");
            "ST Rec./Pay. Account" := ServiceTaxSetup.GetRecAccNoByISD("Input Service Distribution");
          END;
        Type::Sale:
          BEGIN
            "ST Rec./Pay. Account (Interim)" := ServiceTaxSetup.GetPayInterimAccNo;
            "ST Rec./Pay. Account" := ServiceTaxSetup.GetPayAccNo;
          END;
      END;
      "Bal. Account No. (Interim)" := "ST Rec./Pay. Account (Interim)";
      "Bal. Account No." := "ST Rec./Pay. Account";
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@1500004(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE ShowDimensions@26();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2 %3','',"Journal Batch Name","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    BEGIN
    END.
  }
}

