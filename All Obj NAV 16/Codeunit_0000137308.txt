OBJECT Codeunit 137308 SCM Planning Reports
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalTemplate@1013 : Record 82;
      ItemJournalBatch@1012 : Record 233;
      LibraryInventory@1018 : Codeunit 132201;
      LibraryManufacturing@1002 : Codeunit 132202;
      LibraryPlanning@1006 : Codeunit 132203;
      LibraryReportDataset@1024 : Codeunit 131007;
      LibraryUtility@1010 : Codeunit 131000;
      LibrarySales@1014 : Codeunit 130509;
      LibraryPurchase@1017 : Codeunit 130512;
      LibraryWarehouse@1022 : Codeunit 132204;
      ReservationEngineMgt@1019 : Codeunit 99000831;
      LibraryRandom@1001 : Codeunit 130440;
      Assert@1008 : Codeunit 130000;
      isInitialized@1000 : Boolean;
      PlannedReceiptsErr@1005 : TextConst 'ENU=Wrong planned receipts qty.';
      ScheduledReceiptsErr@1016 : TextConst 'ENU=Wrong scheduled receipts qty.';
      ErrMsgRequisition@1004 : TextConst 'ENU=Requisition Line must not exist.';
      ErrMsgDocument@1007 : TextConst 'ENU=Document must not exist.';
      MsgWorksheetNo@1011 : TextConst 'ENU=You are now in worksheet';
      OutputMissingConfirmMessage@1015 : TextConst 'ENU=Some output is still missing. Do you still want to finish the order?';
      RecordShould@1020 : 'Exist,Not Exist';
      RecordExistenceErr@1021 : TextConst 'ENU=%1 record should %2.';

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForPurchaseReorderPolicyLotForLot@65();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityForPurchase(Item."Reordering Policy"::"Lot-for-Lot");
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForPurchaseReorderPolicyFRQ@63();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityForPurchase(Item."Reordering Policy"::"Fixed Reorder Qty.");
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForPurchaseReorderPolicyMQ@104();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityForPurchase(Item."Reordering Policy"::"Maximum Qty.");
    END;

    LOCAL PROCEDURE PlanningAvailabilityForPurchase@103(ReorderingPolicy@1001 : Option);
    VAR
      Item@1000 : Record 27;
      SalesLine@1003 : Record 37;
      PurchaseLine@1008 : Record 39;
      PurchaseHeader@1002 : Record 38;
    BEGIN
      // Setup: Create Item and Sales Order.
      CreateItem(Item,'','',ReorderingPolicy,Item."Replenishment System"::Purchase);
      IF ReorderingPolicy = Item."Reordering Policy"::"Fixed Reorder Qty." THEN
        UpdateItemReorderPointParameters(Item)
      ELSE
        IF ReorderingPolicy = Item."Reordering Policy"::"Maximum Qty." THEN
          UpdateItemMinMaxOrderQty(Item,0,LibraryRandom.RandDec(5,2) + 100);  // Value required.
      CreateSalesOrder(SalesLine,Item."No.");

      // Create Purchase Order with Planning Flexibility - None.
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.");

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Check values - Gross Requirement, Scheduled Receipts, and Projected Balance in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      IF (ReorderingPolicy = Item."Reordering Policy"::"Lot-for-Lot") OR
         (ReorderingPolicy = Item."Reordering Policy"::"Fixed Reorder Qty.")
      THEN
        LibraryReportDataset.AssertElementWithValueExists('ProjectedBalance',PurchaseLine.Quantity - SalesLine.Quantity);

      VerifySalesGrossRequirement(SalesLine);
      Assert.AreEqual(PurchaseLine.Quantity,SelectScheduledReceipts(PurchaseLine."Document No."),ScheduledReceiptsErr);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForFirmPlannedProdOrder@8();
    VAR
      ProductionOrder@1000 : Record 5405;
      Item@1001 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityReport(ProductionOrder.Status::"Firm Planned",Item."Reordering Policy"::"Lot-for-Lot");
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForReleasedProdOrder@30();
    VAR
      ProductionOrder@1012 : Record 5405;
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityReport(ProductionOrder.Status::Released,Item."Reordering Policy"::"Lot-for-Lot");
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForFirmPlannedProdOrderReorderPolicyFRQ@123();
    VAR
      ProductionOrder@1000 : Record 5405;
      Item@1001 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityReport(ProductionOrder.Status::"Firm Planned",Item."Reordering Policy"::"Fixed Reorder Qty.");
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForReleasedProdOrderReorderPolicyFRQ@122();
    VAR
      ProductionOrder@1012 : Record 5405;
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityReport(ProductionOrder.Status::Released,Item."Reordering Policy"::"Fixed Reorder Qty.");
    END;

    LOCAL PROCEDURE PlanningAvailabilityReport@32(ProductionOrderStatus@1000 : Option;ItemReorderingPolicy@1001 : Option);
    VAR
      SalesLine@1010 : Record 37;
      ProductionOrder@1003 : Record 5405;
    BEGIN
      // Create Production Order.
      CreateProductionOrderSetup(ProductionOrder,ProductionOrderStatus,ItemReorderingPolicy);

      // Create Sales Order.
      CreateSalesOrder(SalesLine,ProductionOrder."Source No.");

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(ProductionOrder."Source No.",0D);

      // Verify: Check values - Gross Requirement, Scheduled Receipts, and Projected Balance in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ProjectedBalance',ProductionOrder.Quantity - SalesLine.Quantity);
      VerifySalesGrossRequirement(SalesLine);
      Assert.AreEqual(ProductionOrder.Quantity,SelectScheduledReceipts(ProductionOrder."No."),ScheduledReceiptsErr);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CalcRegenerativePlanWithoutReorderPolicy@6();
    BEGIN
      // Setup: Create Item without Re-order policy. Create Sales Order.
      Initialize;
      CalcPlanWithoutReorderPolicy(TRUE);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CalcNetChangePlanWithoutReorderPolicy@71();
    BEGIN
      // Setup: Create Item without Re-order policy. Create Sales Order.
      Initialize;
      CalcPlanWithoutReorderPolicy(FALSE);
    END;

    LOCAL PROCEDURE CalcPlanWithoutReorderPolicy@70(Regenerative@1002 : Boolean);
    VAR
      Item@1010 : Record 27;
      SalesLine@1008 : Record 37;
      PlanningBuffer@1001 : Record 99000846;
    BEGIN
      // Create Item without Re-order policy. Create Sales Order.
      CreateItem(Item,'','',Item."Reordering Policy"::" ",Item."Replenishment System"::Purchase);
      CreateSalesOrder(SalesLine,Item."No.");

      // Planning Worksheet -> Calculate Regenerative plan Or Calculate Net Change plan.
      IF Regenerative THEN
        LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE)
      ELSE
        LibraryPlanning.CalcNetChangePlanForPlanWksh(Item,WORKDATE,WORKDATE,FALSE);

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify:  Check values - Gross Requirement from Sales Order, but Requisition line is not available in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      VerifySalesGrossRequirement(SalesLine);
      LibraryReportDataset.SetRange('PlanningBuffDocType',PlanningBuffer."Document Type"::"Requisition Line");
      Assert.IsFalse(LibraryReportDataset.GetNextRow,ErrMsgRequisition);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CalcRegenerativePlanWithReorderPolicyAndPurchase@7();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CalcRegenerativePlanAndPlanningAvailability(Item."Replenishment System"::Purchase);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CalcRegenerativePlanWithReorderPolicyAndProduction@16();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CalcRegenerativePlanAndPlanningAvailability(Item."Replenishment System"::"Prod. Order");
    END;

    LOCAL PROCEDURE CalcRegenerativePlanAndPlanningAvailability@9(ItemReplenishmentSystem@1001 : Option);
    VAR
      Item@1009 : Record 27;
      SalesLine@1011 : Record 37;
    BEGIN
      // Create Item with Re-order policy- Lot-for-Lot. Create Sales Order.
      CreateItem(Item,'','',Item."Reordering Policy"::"Lot-for-Lot",ItemReplenishmentSystem);
      CreateSalesOrder(SalesLine,Item."No.");

      // Planning Worksheet -> Calculate Regenerative plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Check values - Gross Requirement from Sales Order, and Planned Receipts from Requisition Line in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      VerifySalesGrossRequirement(SalesLine);
      Assert.AreEqual(CalcItemReorderQty(Item,SalesLine.Quantity,0),SelectPlannedReceipts,PlannedReceiptsErr);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CarryOutActionMessageForPurchaseOrder@10();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CarryOutActionMessageAndPlanningAvailability(Item."Replenishment System"::Purchase);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CarryOutActionMessageForProductionOrder@5();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CarryOutActionMessageAndPlanningAvailability(Item."Replenishment System"::"Prod. Order");
    END;

    LOCAL PROCEDURE CarryOutActionMessageAndPlanningAvailability@1(ItemReplenishmentSystem@1001 : Option);
    VAR
      Item@1009 : Record 27;
      SalesLine@1011 : Record 37;
    BEGIN
      // Create Item with Re-order policy- Lot-for-Lot and required replenishment. Create Sales Order.
      CreateItem(Item,'','',Item."Reordering Policy"::"Lot-for-Lot",ItemReplenishmentSystem);
      CreateSalesOrder(SalesLine,Item."No.");

      // Planning Worksheet -> Calculate Regenerative plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Carry-Out Action Message.
      CarryOutActionMessageForRegenPlan(Item."No.");

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Check values - Gross Requirement from Sales Order, and Scheduled Receipts from newly created Purchase or Production Order, in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      VerifySalesGrossRequirement(SalesLine);
      VerifyRefOrder(Item);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CarryOutActionMessageAndDeletePurchaseOrder@17();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CarryOutActionMessageAndDeleteOrder(Item."Replenishment System"::Purchase);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CarryOutActionMessageAndDeleteProductionOrder@13();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CarryOutActionMessageAndDeleteOrder(Item."Replenishment System"::"Prod. Order");
    END;

    LOCAL PROCEDURE CarryOutActionMessageAndDeleteOrder@11(ItemReplenishmentSystem@1001 : Option);
    VAR
      Item@1009 : Record 27;
      SalesLine@1011 : Record 37;
      PlanningBuffer@1005 : Record 99000846;
    BEGIN
      // Create Item with Re-order policy - Lot-for-Lot and required replenishment. Create Sales Order.
      CreateItem(Item,'','',Item."Reordering Policy"::"Lot-for-Lot",ItemReplenishmentSystem);
      CreateSalesOrder(SalesLine,Item."No.");

      // Planning Worksheet -> Calculate Regenerative plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Carry-Out Action Message.
      CarryOutActionMessageForRegenPlan(Item."No.");

      // Delete Purchase or Production Order.
      DeleteOrder(Item);

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Check value - Gross Requirement from Sales Order, but newly created Purchase or Production Order are not available in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      VerifySalesGrossRequirement(SalesLine);
      LibraryReportDataset.SetRange('PlanningBuffDocType',PlanningBuffer."Document Type"::"Purchase Order");
      Assert.IsFalse(LibraryReportDataset.GetNextRow,ErrMsgDocument);

      LibraryReportDataset.SetRange('PlanningBuffDocType',PlanningBuffer."Document Type"::"Firm Planned Prod. Order");
      Assert.IsFalse(LibraryReportDataset.GetNextRow,ErrMsgDocument);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CarryOutActionMsgPurchaseReorderPolicyLotForLot@39();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CarryOutActionMessageForDiffReplenishmentReorderPolicy(
        Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::Purchase);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CarryOutActionMsgProductionReorderPolicyLotForLot@44();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CarryOutActionMessageForDiffReplenishmentReorderPolicy(
        Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::"Prod. Order");
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CarryOutActionMsgPurchaseReorderPolicyOrder@55();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CarryOutActionMessageForDiffReplenishmentReorderPolicy(Item."Reordering Policy"::Order,Item."Replenishment System"::Purchase);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CarryOutActionMsgProductionReorderPolicyOrder@50();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CarryOutActionMessageForDiffReplenishmentReorderPolicy(
        Item."Reordering Policy"::Order,Item."Replenishment System"::"Prod. Order");
    END;

    LOCAL PROCEDURE CarryOutActionMessageForDiffReplenishmentReorderPolicy@48(ItemReorderingPolicy@1003 : Option;ItemReplenishmentSystem@1004 : Option);
    VAR
      Item@1000 : Record 27;
      SalesLine@1001 : Record 37;
      SalesLine2@1002 : Record 37;
    BEGIN
      // Create Item with required re-order policy and required replenishment system and create two Sales Order.
      CreateItem(Item,'','',ItemReorderingPolicy,ItemReplenishmentSystem);
      CreateSalesOrder(SalesLine,Item."No.");
      CreateSalesOrder(SalesLine2,Item."No.");

      // Planning Worksheet -> Calculate Regenerative plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Carry-Out Action Message.
      CarryOutActionMessageForRegenPlan(Item."No.");

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Verify Sales Order entries and Scheduled Receipts in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('PlanningBuffDocNo',SalesLine."Document No.");
      LibraryReportDataset.AssertElementWithValueExists('PlanningBuffDocNo',SalesLine2."Document No.");
      IF ItemReorderingPolicy = Item."Reordering Policy"::"Lot-for-Lot" THEN
        LibraryReportDataset.AssertElementWithValueExists('PlngBuffScheduledReceipts',SalesLine.Quantity +
          SalesLine2.Quantity)
      ELSE
        VerifyScheduledReceiptsForPolicyOrder(Item);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CalcRegenerativePlanForFirmPlannedOrder@60();
    VAR
      Item@1000 : Record 27;
      ProductionOrder@1001 : Record 5405;
    BEGIN
      // Setup: Create Item, create and refresh Production Order.
      Initialize;
      CreateItem(Item,'','',Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::"Prod. Order");
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.");

      // Planning Worksheet -> Calculate Regenerative plan. Cancels Production Order.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Exercise: Generate the Planning Availability Report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Check value - Scheduled Receipts and Planned Receipts in the Planning Availability Report are Zero.
      Assert.AreEqual(0,SelectPlannedReceipts,PlannedReceiptsErr);
      Assert.AreEqual(0,SelectScheduledReceipts(ProductionOrder."No."),ScheduledReceiptsErr);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForFirmPlannedWithNewBOMVersion@56();
    VAR
      ProductionBOMVersion@1000 : Record 99000779;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityForFirmPlannedOrdersWithBOMVersion(ProductionBOMVersion.Status::New,FALSE,FALSE);  // Calculate Regenerative Plan - False, BOM Version Item - False.
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CalcRegenerativePlanForFirmPlannedWithNewBOMVersion@49();
    VAR
      ProductionBOMVersion@1000 : Record 99000779;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityForFirmPlannedOrdersWithBOMVersion(ProductionBOMVersion.Status::New,TRUE,FALSE);  // Calculate Regenerative Plan - True, BOM Version Item - False.
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForFirmPlannedProdItemWithCertifiedBOMVersion@38();
    VAR
      ProductionBOMVersion@1000 : Record 99000779;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityForFirmPlannedOrdersWithBOMVersion(ProductionBOMVersion.Status::Certified,FALSE,FALSE);  // Calculate Regenerative Plan - False, BOM Version Item - False.
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForFirmPlannedBOMItemWithCertifiedBOMVersion@25();
    VAR
      ProductionBOMVersion@1000 : Record 99000779;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityForFirmPlannedOrdersWithBOMVersion(ProductionBOMVersion.Status::Certified,FALSE,TRUE);  // Calculate Regenerative Plan - False, BOM Version Item - True.
    END;

    LOCAL PROCEDURE PlanningAvailabilityForFirmPlannedOrdersWithBOMVersion@31(Status@1003 : Option;CalculateRegenerativePlan@1002 : Boolean;BOMVersionItem@1005 : Boolean);
    VAR
      Item@1009 : Record 27;
      Item2@1004 : Record 27;
      PurchaseHeader@1007 : Record 38;
      PurchaseHeader2@1011 : Record 38;
      PurchaseLine@1006 : Record 39;
      PurchaseLine2@1008 : Record 39;
      PurchaseLine3@1010 : Record 39;
      ProductionOrder@1000 : Record 5405;
      ItemNo@1001 : Code[20];
    BEGIN
      // Create Item. Create Production BOM and Version, Create and Refresh Production Order.
      CreateItem(Item,'','',Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::"Prod. Order");
      ItemNo := Item."No.";

      // Create Purchase Order with two Lines.
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine2,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandDec(5,2));  // Random Quantity for Purchase Line.
      CreateItem(Item2,'','',Item2."Reordering Policy"::"Lot-for-Lot",Item2."Replenishment System"::Purchase);

      IF BOMVersionItem THEN BEGIN
        CreatePurchaseOrder(PurchaseHeader2,PurchaseLine3,Item2."No.");
        ItemNo := Item2."No.";
      END;

      CreateProductionBOMWithVersion(Item."Base Unit of Measure",Item2."No.",Status);
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.");

      // Exercise: Generate the Planning Availability Report with Calculated Regenerative plan as required.
      IF CalculateRegenerativePlan THEN
        LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);
      RunPlanningAvailabilityReport(ItemNo,0D);

      // Verify: Check values- Scheduled Receipts from Production Order and Projected Balance in the Planning Availability Report.
      LibraryReportDataset.LoadDataSetFile;
      IF BOMVersionItem THEN
        Assert.AreEqual(PurchaseLine3.Quantity,SelectScheduledReceipts(PurchaseLine3."Document No."),ScheduledReceiptsErr)
      ELSE
        VerifyPurchaseAndFirmPlannedValues(PurchaseLine,PurchaseLine2,ProductionOrder,CalculateRegenerativePlan);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CalcRegenerativePlanForFirmPlannedWithSales@33();
    VAR
      Item@1001 : Record 27;
      SalesLine@1000 : Record 37;
      ProductionOrder@1002 : Record 5405;
    BEGIN
      // Setup: Create Item, create and refresh Firm Planned Production Order and create Sales Order.
      Initialize;
      CreateItem(Item,'','',Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::"Prod. Order");
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.");
      CreateSalesOrder(SalesLine,ProductionOrder."Source No.");

      // Exercise: Generate the Planning Availability Report after Calculate Regenerative plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Check value - Gross Requirement, Projected Balance and Planned receipts from Requisition Line in the Planning Availability Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ProjectedBalance',-SalesLine.Quantity);
      VerifySalesGrossRequirement(SalesLine);
      Assert.AreEqual(CalcItemReorderQty(Item,SalesLine.Quantity,0),SelectPlannedReceipts,PlannedReceiptsErr);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CalcNetChangePlanWithReorderPolicyFRQAndPurchase@76();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CalcNetChangePlanAndPlanningAvailability(Item."Replenishment System"::Purchase);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CalcNetChangePlanWithReorderPolicyFRQAndProduction@74();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CalcNetChangePlanAndPlanningAvailability(Item."Replenishment System"::"Prod. Order");
    END;

    LOCAL PROCEDURE CalcNetChangePlanAndPlanningAvailability@73(ItemReplenishmentSystem@1001 : Option);
    VAR
      Item@1009 : Record 27;
      SalesLine@1011 : Record 37;
    BEGIN
      // Create Item with Re-order policy- Fixed Re-order Qty. Create Sales Order.
      CreateItem(Item,'','',Item."Reordering Policy"::"Fixed Reorder Qty.",ItemReplenishmentSystem);
      UpdateItemReorderPointParameters(Item);
      CreateSalesOrder(SalesLine,Item."No.");

      // Planning Worksheet -> Calculate Net Change Plan.
      LibraryPlanning.CalcNetChangePlanForPlanWksh(Item,WORKDATE,WORKDATE,FALSE);

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Check values - Gross Requirement from Sales Order, and Planned Receipts from Requisition Line in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      VerifySalesGrossRequirement(SalesLine);
      Assert.AreEqual(SalesLine.Quantity + CalcItemReorderQty(Item,SalesLine.Quantity,0),SelectPlannedReceipts,PlannedReceiptsErr);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForFirmPlannedNewBOMVersionReorderPolicyFRQ@72();
    VAR
      ProductionBOMVersion@1000 : Record 99000779;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityForFirmPlannedOrdersWithBOMVersionAndItemReorderPolicyFRQ(ProductionBOMVersion.Status::New,FALSE,FALSE);  // Calculate Net Change Plan - False, BOM Version Item - False.
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CalcRegenerativePlanForFirmPlannedNewBOMVersionReorderPolicyFRQ@68();
    VAR
      ProductionBOMVersion@1000 : Record 99000779;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityForFirmPlannedOrdersWithBOMVersionAndItemReorderPolicyFRQ(ProductionBOMVersion.Status::New,TRUE,FALSE);  // Calculate Net Change Plan - True, BOM Version Item - False.
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForFirmPlannedProdItemCertifiedBOMVersionReorderPolicyFRQ@61();
    VAR
      ProductionBOMVersion@1000 : Record 99000779;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityForFirmPlannedOrdersWithBOMVersionAndItemReorderPolicyFRQ(
        ProductionBOMVersion.Status::Certified,FALSE,FALSE);  // Calculate Net Change Plan - False, BOM Version Item - False.
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForFirmPlannedBOMItemCertifiedBOMVersionReorderPolicyFRQ@24();
    VAR
      ProductionBOMVersion@1000 : Record 99000779;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityForFirmPlannedOrdersWithBOMVersionAndItemReorderPolicyFRQ(ProductionBOMVersion.Status::Certified,FALSE,TRUE);  // Calculate Net Change Plan - False, BOM Version Item - True.
    END;

    LOCAL PROCEDURE PlanningAvailabilityForFirmPlannedOrdersWithBOMVersionAndItemReorderPolicyFRQ@18(Status@1003 : Option;CalculateNetChangePlan@1002 : Boolean;BOMVersionItem@1005 : Boolean);
    VAR
      Item@1009 : Record 27;
      Item2@1004 : Record 27;
      PurchaseHeader@1007 : Record 38;
      PurchaseHeader2@1011 : Record 38;
      PurchaseLine@1006 : Record 39;
      PurchaseLine2@1008 : Record 39;
      PurchaseLine3@1010 : Record 39;
      ProductionOrder@1000 : Record 5405;
      ItemNo@1001 : Code[20];
    BEGIN
      // Create Item. Create Production BOM and Version, Create and Refresh Production Order.
      CreateItem(Item,'','',Item."Reordering Policy"::"Fixed Reorder Qty.",Item."Replenishment System"::"Prod. Order");
      UpdateItemReorderPointParameters(Item);
      ItemNo := Item."No.";

      // Create Purchase Order with two Lines.
      CreatePurchaseOrder(PurchaseHeader,PurchaseLine,Item."No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine2,PurchaseHeader,PurchaseLine.Type::Item,Item."No.",LibraryRandom.RandDec(5,2));  // Random Quantity for Purchase Line.
      CreateItem(Item2,'','',Item2."Reordering Policy"::"Fixed Reorder Qty.",Item2."Replenishment System"::Purchase);
      UpdateItemReorderPointParameters(Item2);

      IF BOMVersionItem THEN BEGIN
        CreatePurchaseOrder(PurchaseHeader2,PurchaseLine3,Item2."No.");
        ItemNo := Item2."No.";
      END;

      CreateProductionBOMWithVersion(Item."Base Unit of Measure",Item2."No.",Status);
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.");

      // Exercise: Generate the Planning Availability Report with Calculate Net Change plan as required.
      IF CalculateNetChangePlan THEN
        LibraryPlanning.CalcNetChangePlanForPlanWksh(Item,WORKDATE,WORKDATE,FALSE);
      RunPlanningAvailabilityReport(ItemNo,0D);

      // Verify: Check values- Scheduled Receipts from Production Order and Projected Balance in the Planning Availability Report.
      LibraryReportDataset.LoadDataSetFile;
      IF BOMVersionItem THEN
        Assert.AreEqual(PurchaseLine3.Quantity,SelectScheduledReceipts(PurchaseLine3."Document No."),ScheduledReceiptsErr)
      ELSE
        VerifyPurchaseAndFirmPlannedValuesForFRQItem(PurchaseLine,PurchaseLine2,ProductionOrder);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityReportForProdWithRoutingAndMultipleSalesReorderPolicyLFL@92();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityReportForProdWithRoutingAndMultipleSales(Item."Reordering Policy"::"Lot-for-Lot");
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityReportForProdWithRoutingAndMultipleSalesReorderPolicyMQ@118();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityReportForProdWithRoutingAndMultipleSales(Item."Reordering Policy"::"Maximum Qty.");
    END;

    LOCAL PROCEDURE PlanningAvailabilityReportForProdWithRoutingAndMultipleSales@127(ReorderingPolicy@1000 : Option);
    VAR
      Item@1004 : Record 27;
      ProductionOrder@1003 : Record 5405;
      SalesLine@1002 : Record 37;
      SalesLine2@1001 : Record 37;
    BEGIN
      // Create Item with Production BOM and Routing, create two Sales Order and Firm Planned Production Order.
      CreateSalesOrdersWithFirmPlannedProd(Item,ProductionOrder,SalesLine,SalesLine2,ReorderingPolicy);
      IF ReorderingPolicy = Item."Reordering Policy"::"Maximum Qty." THEN
        UpdateItemMinMaxOrderQty(Item,0,LibraryRandom.RandDec(5,2) + 100);  // Value required.

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Check values - Gross Requirement,Production scheduled Receipts, Projected Balance in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyGrossReqAndProjectedBalanceForMultipleSales(SalesLine,SalesLine2,ProductionOrder);
      Assert.AreEqual(ProductionOrder.Quantity,SelectScheduledReceipts(ProductionOrder."No."),ScheduledReceiptsErr);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CalcRegenerativePlanForProdWithRoutingAndMultipleSalesReorderPolicyLFL@91();
    VAR
      Item@1002 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CalcRegenerativePlanForProdWithRoutingAndMultipleSales(Item."Reordering Policy"::"Lot-for-Lot");
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CalcRegenerativePlanForProdWithRoutingAndMultipleSalesReorderPolicyMQ@117();
    VAR
      Item@1002 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CalcRegenerativePlanForProdWithRoutingAndMultipleSales(Item."Reordering Policy"::"Maximum Qty.");
    END;

    LOCAL PROCEDURE CalcRegenerativePlanForProdWithRoutingAndMultipleSales@128(ReorderingPolicy@1000 : Option);
    VAR
      Item@1004 : Record 27;
      ProductionOrder@1003 : Record 5405;
      SalesLine@1002 : Record 37;
      SalesLine2@1001 : Record 37;
    BEGIN
      // Create Item with Production BOM and Routing, create two Sales Order and Firm Planned Production Order.
      CreateSalesOrdersWithFirmPlannedProd(Item,ProductionOrder,SalesLine,SalesLine2,ReorderingPolicy);
      IF ReorderingPolicy = Item."Reordering Policy"::"Maximum Qty." THEN
        UpdateItemMinMaxOrderQty(Item,0,LibraryRandom.RandDec(5,2) + 100);  // Value required.

      // Planning Worksheet -> Calculate Regenerative plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Check values - Gross Requirement,Projected Balance,Planned Receipts from Requisition Line in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyGrossReqAndProjectedBalanceForMultipleSales(SalesLine,SalesLine2,ProductionOrder);
      IF ReorderingPolicy = Item."Reordering Policy"::"Maximum Qty." THEN
        Assert.AreEqual(ProductionOrder.Quantity,SelectScheduledReceipts(ProductionOrder."No."),ScheduledReceiptsErr)
      ELSE
        Assert.AreEqual(SalesLine.Quantity + SalesLine2.Quantity - SelectScheduledReceipts(ProductionOrder."No."),
          SelectPlannedReceipts,PlannedReceiptsErr);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CarryOutActionMsgForProdWithRoutingAndMultipleSalesReorderPolicyLFL@90();
    VAR
      Item@1002 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CarryOutActionMsgForProdWithRoutingAndMultipleSales(Item."Reordering Policy"::"Lot-for-Lot");
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CarryOutActionMsgForProdWithRoutingAndMultipleSalesReorderPolicyMQ@2();
    VAR
      Item@1002 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      CarryOutActionMsgForProdWithRoutingAndMultipleSales(Item."Reordering Policy"::"Maximum Qty.");
    END;

    LOCAL PROCEDURE CarryOutActionMsgForProdWithRoutingAndMultipleSales@129(ReorderingPolicy@1000 : Option);
    VAR
      Item@1005 : Record 27;
      ProductionOrder@1004 : Record 5405;
      SalesLine@1003 : Record 37;
      SalesLine2@1002 : Record 37;
    BEGIN
      // Create Item with Production BOM and Routing, create two Sales Order and Firm Planned Production Order.
      CreateSalesOrdersWithFirmPlannedProd(Item,ProductionOrder,SalesLine,SalesLine2,ReorderingPolicy);
      IF ReorderingPolicy = Item."Reordering Policy"::"Maximum Qty." THEN
        UpdateItemMinMaxOrderQty(Item,0,LibraryRandom.RandDec(5,2) + 100);  // Value required.

      // Planning Worksheet -> Calculate Regenerative plan. Carry-Out Action Message.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);
      CarryOutActionMessageForRegenPlan(Item."No.");

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Check values - Gross Requirements, Scheduled Receipts, Projected Balance in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyGrossReqAndProjectedBalanceForMultipleSales(SalesLine,SalesLine2,ProductionOrder);
      LibraryReportDataset.Reset;
      IF ReorderingPolicy = Item."Reordering Policy"::"Maximum Qty." THEN
        LibraryReportDataset.AssertElementWithValueExists('PlngBuffScheduledReceipts',
          SelectScheduledReceipts(ProductionOrder."No."));
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityReportForProdOrderWithBOMHierarchy@89();
    BEGIN
      // Setup: Create Item with Order attributes. Create Production BOM and Routing with BOM hierarchy, create Sales Order and Firm Planned Production Order.
      Initialize;
      PlanningAvailabilityReportForProdOrderSetup(TRUE);  // BOM Hierarchy- TRUE;
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityReportForProdItemWithoutRouting@85();
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityReportForProdOrderSetup(FALSE);
    END;

    LOCAL PROCEDURE PlanningAvailabilityReportForProdOrderSetup@113(BOMHierarchy@1000 : Boolean);
    VAR
      Item@1003 : Record 27;
      ProductionOrder@1002 : Record 5405;
      SalesLine@1001 : Record 37;
    BEGIN
      IF BOMHierarchy THEN
        CreateSalesOrderWithFirmPlannedProdAndBOMHierarchy(Item,SalesLine,ProductionOrder)
      ELSE
        CreateSalesOrderWtihProdOrderWithoutRouting(Item,SalesLine,ProductionOrder);

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Check values - Gross Requirement, Projected Balance in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ProjectedBalance',ProductionOrder.Quantity - SalesLine.Quantity);
      VerifySalesGrossRequirement(SalesLine);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityReportIncludesProductionForecast@139();
    VAR
      Item@1000 : Record 27;
      ProductionForecastEntry@1004 : Record 99000852;
      ProductionForecastName@1005 : Record 99000851;
      ManufacturingSetup@1001 : Record 99000765;
      EventDate@1006 : Date;
      CurrentProductionForecast@1015 : Code[10];
    BEGIN
      // 1) Setup: Create a production forecast entry for an item with a Production BOM
      Initialize;
      ManufacturingSetup.GET;
      CurrentProductionForecast := ManufacturingSetup."Current Production Forecast";
      CreateItemWithProductionBOM(Item);
      CreateForecastEntry(ProductionForecastEntry,ProductionForecastName,Item,EventDate);

      // 2) Exercise
      RunPlanningAvailabilityReport(Item."No.",EventDate);

      // 3) Verify
      VerifyProductionForecastGrossRequirement(ProductionForecastEntry);

      // 4) Cleanup
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Current Production Forecast",CurrentProductionForecast);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CalcRegenerativePlanForProdOrderWithBOMHierarchy@88();
    BEGIN
      // Setup: Create Item with Order attributes. Create Production BOM and Routing with BOM hierarchy, create Sales Order and Firm Planned Production Order.
      Initialize;
      CalcRegenerativePlanForProdOrderSetup(TRUE);  // BOM Hierarchy- TRUE;
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CalcRegenerativePlanForProdItemWithoutRouting@84();
    BEGIN
      // Setup.
      Initialize;
      CalcRegenerativePlanForProdOrderSetup(FALSE);
    END;

    LOCAL PROCEDURE CalcRegenerativePlanForProdOrderSetup@111(BOMHierarchy@1000 : Boolean);
    VAR
      Item@1003 : Record 27;
      ProductionOrder@1002 : Record 5405;
      SalesLine@1001 : Record 37;
    BEGIN
      IF BOMHierarchy THEN
        CreateSalesOrderWithFirmPlannedProdAndBOMHierarchy(Item,SalesLine,ProductionOrder)
      ELSE
        CreateSalesOrderWtihProdOrderWithoutRouting(Item,SalesLine,ProductionOrder);

      // Planning Worksheet -> Calculate Regenerative plan
      LibraryPlanning.CalcRegenPlanForPlanWksh(
        Item,WORKDATE,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5) + 30) + 'D>',WORKDATE));

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Check values - Gross Requirement,Projected Balance,Planned Receipts from Requisition Line in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('ProjectedBalance',-SalesLine.Quantity);
      VerifySalesGrossRequirement(SalesLine);
      Assert.AreEqual(CalcItemReorderQty(Item,SalesLine.Quantity,0),SelectPlannedReceipts,PlannedReceiptsErr);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CarryOutActionMsgForProdOrderWithBOMHierarchy@86();
    BEGIN
      // Setup: Create Item with Order attributes. Create Production BOM and Routing with BOM hierarchy, create Sales Order and Firm Planned Production Order.
      Initialize;
      CarryOutActionMessageForProductionSetup(TRUE);  // BOM Hierarchy - TRUE.
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE CarryOutActionMsgForProdItemWithoutRouting@82();
    BEGIN
      // Setup.
      Initialize;
      CarryOutActionMessageForProductionSetup(FALSE);
    END;

    LOCAL PROCEDURE CarryOutActionMessageForProductionSetup@107(BOMHierarchy@1000 : Boolean);
    VAR
      Item@1004 : Record 27;
      ProductionOrder@1003 : Record 5405;
      SalesLine@1002 : Record 37;
    BEGIN
      IF BOMHierarchy THEN
        CreateSalesOrderWithFirmPlannedProdAndBOMHierarchy(Item,SalesLine,ProductionOrder)
      ELSE
        CreateSalesOrderWtihProdOrderWithoutRouting(Item,SalesLine,ProductionOrder);

      // Planning Worksheet -> Calculate Regenerative plan. Carry-Out Action Message.
      LibraryPlanning.CalcRegenPlanForPlanWksh(
        Item,WORKDATE,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5) + 30) + 'D>',WORKDATE));
      CarryOutActionMessageForRegenPlan(Item."No.");

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Check values - Gross Requirement, Scheduled Receipts,Projected Balance in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      VerifySalesGrossRequirement(SalesLine);
      ProductionOrder.GET(ProductionOrder.Status,ProductionOrder."No.");
      Assert.AreEqual(ProductionOrder.Quantity,SelectScheduledReceipts(ProductionOrder."No."),ScheduledReceiptsErr);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityAfterSalesPostAndCalcRegenPlanReorderPolicyFRQ@116();
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityAfterSalesPostReorderPolicyFRQ(FALSE);  // Carry Out Action Message - False.
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityAfterSalesPostAndCarryOutActionMsgReorderPolicyFRQ@115();
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityAfterSalesPostReorderPolicyFRQ(TRUE);  // Carry Out Action Message - True.
    END;

    LOCAL PROCEDURE PlanningAvailabilityAfterSalesPostReorderPolicyFRQ@114(CarryOutActionMessage@1001 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesLine@1003 : Record 37;
    BEGIN
      // Create Item and Sales Order.
      CreateItem(Item,'','',Item."Reordering Policy"::"Fixed Reorder Qty.",Item."Replenishment System"::Purchase);
      UpdateItemReorderQty(Item);
      CreateAndPostSalesOrder(SalesLine,Item."No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);
      IF CarryOutActionMessage THEN
        CarryOutActionMessageForRegenPlan(Item."No.");

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Check values - Planned Receipts, Scheduled Receipts and Projected Balance in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyMultiplePurchaseReceipts(SalesLine,Item."Reorder Quantity",CarryOutActionMessage);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityAfterSalesPostAndCalcPlanReqWkhstReorderPolicyFRQ@112();
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityAfterSalesPostReqWkshtReorderPolicyFRQ(FALSE);  // Carry Out Action Message - False.
    END;

    [Test]
    [HandlerFunctions(MsgHandler,PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityAfterSalesPostReqWkhstCarryOutActionMsgReorderPolicyFRQ@110();
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityAfterSalesPostReqWkshtReorderPolicyFRQ(TRUE);  // Carry Out Action Message - True.
    END;

    LOCAL PROCEDURE PlanningAvailabilityAfterSalesPostReqWkshtReorderPolicyFRQ@109(CarryOutActionMessage@1001 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesLine@1003 : Record 37;
      RequisitionWkshName@1004 : Record 245;
      RequisitionLine@1006 : Record 246;
    BEGIN
      // Create Item and Sales Order.
      CreateItem(Item,'','',Item."Reordering Policy"::"Fixed Reorder Qty.",Item."Replenishment System"::Purchase);
      UpdateItemReorderQty(Item);
      CreateAndPostSalesOrder(SalesLine,Item."No.");

      // Create Requisition Worksheet.
      CalcPlanForRequisitionWorksheet(RequisitionWkshName,Item);

      IF CarryOutActionMessage THEN BEGIN
        SelectRequisitionLineForReqWksht(RequisitionLine,RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name);
        REPEAT
          RequisitionLine.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
          UpdateActionMessageRequisitionLine(RequisitionLine);
        UNTIL RequisitionLine.NEXT = 0;
        LibraryPlanning.CarryOutReqWksh(RequisitionLine,WORKDATE,WORKDATE,WORKDATE,WORKDATE,'');
      END;

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Check values - Planned Receipts, Scheduled Receipts and Projected Balance in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      VerifyMultiplePurchaseReceipts(SalesLine,Item."Reorder Quantity",CarryOutActionMessage);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForSalesWithProdOrderAndCalcPlanReqWkhstReorderPolicyFRQ@125();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityForSalesWithProdOrder(Item."Reordering Policy"::"Fixed Reorder Qty.");
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForSalesWithProdOrderAndCalcPlanReqWkhstReorderPolicyMQ@120();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityForSalesWithProdOrder(Item."Reordering Policy"::"Maximum Qty.");
    END;

    LOCAL PROCEDURE PlanningAvailabilityForSalesWithProdOrder@119(ReorderingPolicy@1007 : Option);
    VAR
      Item@1000 : Record 27;
      SalesLine@1003 : Record 37;
      ProductionOrder@1002 : Record 5405;
      RequisitionWkshName@1004 : Record 245;
    BEGIN
      // Create Fixed Reorder Qty or Maximum Qty Item with Sales and Production Order.
      CreateItem(Item,'','',ReorderingPolicy,Item."Replenishment System"::Purchase);
      CreateSalesOrder(SalesLine,Item."No.");
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.");

      // Create Requisition Worksheet.
      CalcPlanForRequisitionWorksheet(RequisitionWkshName,Item);

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(Item."No.",0D);

      // Verify: Check values - Sales Requirement and Production Scheduled Receipts, and Planned Receipts in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      VerifySalesGrossRequirement(SalesLine);
      Assert.AreEqual(ProductionOrder.Quantity,SelectScheduledReceipts(ProductionOrder."No."),ScheduledReceiptsErr);
      Assert.AreEqual(SalesLine.Quantity - ProductionOrder.Quantity,SelectPlannedReceipts,PlannedReceiptsErr);
    END;

    [Test]
    [HandlerFunctions(PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForFirmPlannedToReleasedProdOrderReorderPolicyLotForLot@133();
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityReportForProdOrderStatusUpdate(ProductionOrder.Status::"Firm Planned");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,PlanningAvailabilityRequestPageHandler)]
    PROCEDURE PlanningAvailabilityForReleasedToFinishedProdOrderReorderPolicyLotForLot@132();
    VAR
      ProductionOrder@1012 : Record 5405;
    BEGIN
      // Setup.
      Initialize;
      PlanningAvailabilityReportForProdOrderStatusUpdate(ProductionOrder.Status::Released);
    END;

    LOCAL PROCEDURE PlanningAvailabilityReportForProdOrderStatusUpdate@131(ProductionOrderStatus@1000 : Option);
    VAR
      SalesLine@1010 : Record 37;
      ProductionOrder@1003 : Record 5405;
      Item@1001 : Record 27;
      NewReleasedProdOrderNo@1002 : Code[20];
    BEGIN
      // Create Firm Planned or Released Production Order as required with planning flexibility - None.
      CreateProductionOrderSetup(ProductionOrder,ProductionOrderStatus,Item."Reordering Policy"::"Lot-for-Lot");

      // Change status of the Production Order, Firm Planned -> Released, or Released -> Finished.
      IF ProductionOrderStatus = ProductionOrder.Status::"Firm Planned" THEN
        NewReleasedProdOrderNo :=
          LibraryManufacturing.ChangeStatusFirmPlanToReleased(
            ProductionOrder."No.",ProductionOrder.Status::"Firm Planned",ProductionOrder.Status::Released)
      ELSE
        LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // Create Sales Order.
      CreateSalesOrder(SalesLine,ProductionOrder."Source No.");

      // Planning Worksheet -> Calculate Regenerative plan
      Item.GET(ProductionOrder."Source No.");
      LibraryPlanning.CalcRegenPlanForPlanWksh(
        Item,WORKDATE,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5) + 30) + 'D>',WORKDATE));

      // Exercise: Generate the Planning Availability report.
      RunPlanningAvailabilityReport(ProductionOrder."Source No.",0D);

      // Verify: Check values - Gross Requirement, Prod. Scheduled Receipts, and Planned Receipts in the Planning Availability report.
      LibraryReportDataset.LoadDataSetFile;
      IF ProductionOrderStatus = ProductionOrder.Status::"Firm Planned" THEN BEGIN
        VerifySalesGrossRequirement(SalesLine);
        ProductionOrder.GET(ProductionOrder.Status::Released,NewReleasedProdOrderNo);
        Assert.AreEqual(ProductionOrder.Quantity,SelectScheduledReceipts(ProductionOrder."No."),ScheduledReceiptsErr);
        Assert.AreEqual(SalesLine.Quantity - ProductionOrder.Quantity,SelectPlannedReceipts,PlannedReceiptsErr);
      END ELSE BEGIN
        VerifySalesGrossRequirement(SalesLine);
        Assert.AreEqual(SalesLine.Quantity,SelectPlannedReceipts,PlannedReceiptsErr);
      END;
    END;

    [Test]
    PROCEDURE ReplanCycleDoesNotDuplicateSupply@23();
    VAR
      Item@1000 : Record 27;
    BEGIN
      // [FEATURE] [Planning] [Calculate Plan - Plan Wksh] [Reservation]
      // [SCENARIO] No planning worksheet infinite cycle appears if reservation on supply deleted manually.

      // [GIVEN] Demand from Production order component on an Item with SKU having Order reordering policy.
      Initialize;
      CreateItemAndSKU(Item);
      CreateProductionOrderWithComponent(Item."No.",Item.GETFILTER("Location Filter"));
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);
      // [GIVEN] Calc supply, carry out.
      CarryOutActionMessageForRegenPlan(Item."No.");
      // [GIVEN] Partly post supply, then cancel reservation.
      PurchReceiptAndCancelReservation(Item."No.");
      // [GIVEN] Calc supply, carry out, but not post.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);
      CarryOutActionMessageForRegenPlan(Item."No.");

      // [WHEN] Calculating regenerative plan.
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,WORKDATE,WORKDATE);

      // [THEN] No requisition worksheet suggested.
      VerifyActionLinesExists(Item."No.",RecordShould::"Not Exist");
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      RequisitionWkshName@1001 : Record 245;
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      RequisitionWkshName.DELETEALL;

      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      NoSeriesSetup;
      ItemJournalSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE NoSeriesSetup@46();
    VAR
      PurchasesPayablesSetup@1001 : Record 312;
      SalesReceivablesSetup@1002 : Record 311;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);

      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemJournalSetup@75();
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItem@45(VAR Item@1000 : Record 27;RoutingNo@1001 : Code[20];ProductionBOMNo@1003 : Code[20];ReorderPolicy@1002 : Option;ReplenishmentSystem@1005 : Option);
    BEGIN
      LibraryManufacturing.CreateItemManufacturing(
        Item,Item."Costing Method"::FIFO,0,ReorderPolicy,Item."Flushing Method",RoutingNo,ProductionBOMNo);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemAndSKU@165(VAR Item@1000 : Record 27);
    VAR
      Location@1001 : Record 14;
      SKU@1002 : Record 5700;
    BEGIN
      CreateItem(Item,'','',Item."Reordering Policy"::Order,Item."Replenishment System"::Purchase);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      WITH Item DO BEGIN
        LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(SKU,Location.Code,"No.",'');
        SKU.VALIDATE("Reordering Policy",SKU."Reordering Policy"::Order);
        SKU.MODIFY(TRUE);
        SETRANGE("No.","No.");
        SETRANGE("Location Filter",Location.Code);
      END;
    END;

    [Normal]
    LOCAL PROCEDURE CreateItemWithProductionBOM@136(VAR Item@1000 : Record 27);
    VAR
      ItemComponent@1001 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      ProductionBOMLine@1003 : Record 99000772;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::"Prod. Order");
      Item.MODIFY(TRUE);

      LibraryInventory.CreateItem(ItemComponent);
      Item.VALIDATE("Replenishment System",Item."Replenishment System"::Purchase);
      Item.MODIFY(TRUE);

      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemComponent."No.",LibraryRandom.RandInt(20));
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
      Item.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@15(VAR SalesLine@1000 : Record 37;ItemNo@1002 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,LibraryRandom.RandDec(10,2) + 10);  // Take Random Quantity.
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrder@108(VAR SalesLine@1000 : Record 37;ItemNo@1001 : Code[20]);
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      CreateSalesOrder(SalesLine,ItemNo);
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesLine."Document No.");
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateProductionOrderWithComponent@161(ItemNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    VAR
      ProductionOrder@1003 : Record 5405;
      ProductionBOMHeader@1005 : Record 99000771;
      Item@1004 : Record 27;
    BEGIN
      LibraryManufacturing.CreateCertifiedProductionBOM(ProductionBOMHeader,ItemNo,1); // Quantity per = 1.
      CreateItem(Item,'',ProductionBOMHeader."No.",Item."Reordering Policy"::"Lot-for-Lot",Item."Replenishment System"::"Prod. Order");
      CreateAndRefreshProdOrderWithLocation(ProductionOrder,ProductionOrder.Status::Released,Item."No.",LocationCode);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@29(VAR PurchaseHeader@1003 : Record 38;VAR PurchaseLine@1000 : Record 39;ItemNo@1001 : Code[20]);
    BEGIN
      LibraryPurchase.CreatePurchaseDocumentWithItem(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order,'',ItemNo,LibraryRandom.RandDec(5,2),'',0D);
      UpdatePurchasePlanningFlexibility(PurchaseLine);
    END;

    LOCAL PROCEDURE UpdatePurchasePlanningFlexibility@19(VAR PurchaseLine@1000 : Record 39);
    BEGIN
      PurchaseLine.VALIDATE("Planning Flexibility",PurchaseLine."Planning Flexibility"::None);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE RunPlanningAvailabilityReport@28(ItemNo@1000 : Code[20];Date@1003 : Date);
    VAR
      PlanningBuffer@1002 : Record 99000846;
    BEGIN
      PlanningBuffer.SETRANGE("Item No.",ItemNo);
      IF Date <> 0D THEN
        PlanningBuffer.SETRANGE(Date,Date);
      COMMIT;
      REPORT.RUN(REPORT::"Planning Availability",TRUE,FALSE,PlanningBuffer);
    END;

    LOCAL PROCEDURE CreateProductionOrderSetup@43(VAR ProductionOrder@1011 : Record 5405;ProductionOrderStatus@1000 : Option;ItemReorderingPolicy@1002 : Option);
    VAR
      Item@1010 : Record 27;
      ProductionBOMHeader@1001 : Record 99000771;
    BEGIN
      // Create Parent and Child Items.
      CreateProdOrderItemsSetup(Item,ProductionBOMHeader,ItemReorderingPolicy);

      // Create and Refresh Production Order.
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrderStatus,Item."No.");

      // Update Production Order - Planning Flexibility to None.
      UpdateProductionPlanningFlexibility(ProductionOrder."No.");
    END;

    LOCAL PROCEDURE CreateProdOrderItemsSetup@3(VAR Item@1000 : Record 27;VAR ProductionBOMHeader@1001 : Record 99000771;ReorderingPolicy@1002 : Option);
    VAR
      RoutingHeader@1005 : Record 99000763;
    BEGIN
      // Create Child Items.
      CreateCertifiedProductionBOM(ProductionBOMHeader);

      // Create Parent Item and attach Routing and Production BOM.
      CreateRoutingSetup(RoutingHeader);
      CreateItem(Item,RoutingHeader."No.",ProductionBOMHeader."No.",ReorderingPolicy,Item."Replenishment System"::"Prod. Order");
    END;

    LOCAL PROCEDURE CreateRoutingSetup@42(VAR RoutingHeader@1001 : Record 99000763);
    VAR
      WorkCenter@1000 : Record 99000754;
      MachineCenter@1004 : Record 99000758;
      RoutingLine@1006 : Record 99000764;
    BEGIN
      CreateWorkCenter(WorkCenter);
      CreateMachineCenter(MachineCenter,WorkCenter."No.");
      LibraryManufacturing.CreateRoutingHeader(RoutingHeader,RoutingHeader.Type::Serial);
      CreateRoutingLine(RoutingLine,RoutingHeader,WorkCenter."No.");
      RoutingLine.Type := RoutingLine.Type::"Machine Center";
      CreateRoutingLine(RoutingLine,RoutingHeader,MachineCenter."No.");
      RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
      RoutingHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWorkCenter@53(VAR WorkCenter@1004 : Record 99000754);
    BEGIN
      LibraryManufacturing.CreateWorkCenterWithCalendar(WorkCenter);
    END;

    LOCAL PROCEDURE CreateCertifiedProductionBOM@69(VAR ProductionBOMHeader@1000 : Record 99000771);
    VAR
      ChildItemNo@1002 : Code[20];
      ChildItemNo2@1001 : Code[20];
    BEGIN
      ChildItemNo := CreateChildItemWithInventory;
      ChildItemNo2 := CreateChildItemWithInventory;

      // Create Production BOM.
      LibraryManufacturing.CreateCertifProdBOMWithTwoComp(ProductionBOMHeader,ChildItemNo,ChildItemNo2,100);  // Quantity per Value important.
    END;

    LOCAL PROCEDURE CreateProductionBOMWithVersion@59(ItemBaseUnitOfMeasure@1006 : Code[10];ChildItemNo@1009 : Code[20];Status@1008 : Option);
    VAR
      ProductionBOMHeader@1004 : Record 99000771;
      ProductionBomVersion@1003 : Record 99000779;
    BEGIN
      // Create Production BOM.
      CreateCertifiedProductionBOM(ProductionBOMHeader);
      CreateProductionBOMVersion(ProductionBomVersion,ProductionBOMHeader,ItemBaseUnitOfMeasure,ChildItemNo);
      UpdateProductionBOMVersionStatus(ProductionBomVersion,Status);
    END;

    LOCAL PROCEDURE CreateProductionBOMVersion@106(VAR ProductionBOMVersion@1000 : Record 99000779;ProductionBOMHeader@1001 : Record 99000771;ItemBaseUnitOfMeasure@1002 : Code[10];ItemNo@1004 : Code[20]);
    VAR
      ProductionBOMLine@1003 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMVersion(ProductionBOMVersion,ProductionBOMHeader."No.",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ProductionBOMVersion.FIELDNO("Version Code"),DATABASE::"Production BOM Version"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Production BOM Version",ProductionBOMVersion.FIELDNO("Version Code"))),
        ItemBaseUnitOfMeasure);
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,ProductionBOMVersion."Version Code",ProductionBOMLine.Type::Item,ItemNo,
        LibraryRandom.RandInt(10) + 10);  // Random Quantity.
    END;

    LOCAL PROCEDURE UpdateProductionBOMVersionStatus@105(ProductionBomVersion@1000 : Record 99000779;Status@1001 : Option);
    BEGIN
      ProductionBomVersion.VALIDATE(Status,Status);
      ProductionBomVersion.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMachineCenter@51(VAR MachineCenter@1002 : Record 99000758;WorkCenterNo@1000 : Code[20]);
    BEGIN
      // Random value important for test.
      LibraryManufacturing.CreateMachineCenterWithCalendar(MachineCenter,WorkCenterNo,LibraryRandom.RandDec(105,1));
    END;

    LOCAL PROCEDURE CreateRoutingLine@41(VAR RoutingLine@1003 : Record 99000764;RoutingHeader@1000 : Record 99000763;CenterNo@1002 : Code[20]);
    VAR
      OperationNo@1001 : Code[10];
    BEGIN
      // Random used such that the Next Operation No is greater than the Previous Operation No.
      OperationNo := FindLastOperationNo(RoutingHeader."No.") + FORMAT(LibraryRandom.RandInt(5));

      // Random values not important for test.
      LibraryManufacturing.CreateRoutingLineSetup(
        RoutingLine,RoutingHeader,CenterNo,OperationNo,LibraryRandom.RandDec(5,2),LibraryRandom.RandDec(5,2));
    END;

    LOCAL PROCEDURE FindLastOperationNo@40(RoutingNo@1000 : Code[20]) : Code[10];
    VAR
      RoutingLine@1001 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      IF RoutingLine.FINDLAST THEN
        EXIT(RoutingLine."Operation No.");
      EXIT('');
    END;

    LOCAL PROCEDURE CreateChildItemWithInventory@12() : Code[20];
    VAR
      Item@1001 : Record 27;
      ItemJournalLine@1002 : Record 83;
    BEGIN
      CreateItem(Item,'','',Item."Reordering Policy"::" ",Item."Replenishment System"::Purchase);

      // Create Item Journal to populate Item Quantity.
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandDec(5,2));
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateAndRefreshProdOrder@20(VAR ProductionOrder@1000 : Record 5405;ProductionOrderStatus@1001 : Option;ItemNo@1002 : Code[20]);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(
        ProductionOrder,ProductionOrderStatus,ProductionOrder."Source Type"::Item,ItemNo,LibraryRandom.RandDec(5,2));
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndRefreshProdOrderWithLocation@137(VAR ProductionOrder@1000 : Record 5405;ProductionOrderStatus@1001 : Option;ItemNo@1002 : Code[20];LocationCode@1003 : Code[10]);
    BEGIN
      WITH ProductionOrder DO BEGIN
        LibraryManufacturing.CreateProductionOrder(
          ProductionOrder,ProductionOrderStatus,"Source Type"::Item,ItemNo,LibraryRandom.RandDec(5,2));
        VALIDATE("Location Code",LocationCode);
        MODIFY(TRUE);
      END;
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE UpdateProductionPlanningFlexibility@27(ProductionOrderNo@1000 : Code[20]);
    VAR
      ProdOrderLine@1001 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrderNo);
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.VALIDATE("Planning Flexibility",ProdOrderLine."Planning Flexibility"::None);
      ProdOrderLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CarryOutActionMessageForRegenPlan@83(ItemNo@1000 : Code[20]);
    VAR
      RequisitionLine@1001 : Record 246;
    BEGIN
      AcceptActionMessage(ItemNo);
      SelectRequisitionLineForItem(RequisitionLine,ItemNo);
      LibraryPlanning.CarryOutActionMsgPlanWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE AcceptActionMessage@14(ItemNo@1001 : Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
    BEGIN
      SelectRequisitionLineForItem(RequisitionLine,ItemNo);
      REPEAT
        IF RequisitionLine."Ref. Order Type" = RequisitionLine."Ref. Order Type"::Purchase THEN
          RequisitionLine.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
        UpdateActionMessageRequisitionLine(RequisitionLine);
      UNTIL RequisitionLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SelectRequisitionLineForItem@64(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : Code[20]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.FINDSET;
    END;

    LOCAL PROCEDURE SelectPurchaseLine@47(VAR PurchaseLine@1000 : Record 39;ItemNo@1001 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("No.",ItemNo);
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.FINDSET;
    END;

    LOCAL PROCEDURE SelectProductionOrder@52(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20]);
    BEGIN
      ProductionOrder.SETRANGE("Source No.",ItemNo);
      ProductionOrder.SETRANGE(Status,ProductionOrder.Status::"Firm Planned");
      ProductionOrder.FINDSET;
    END;

    LOCAL PROCEDURE DeleteOrder@34(Item@1000 : Record 27);
    VAR
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1001 : Record 39;
      ProductionOrder@1002 : Record 5405;
    BEGIN
      // If Item Replenishment System = Purchase, then delete Purchase Order. If Item Replenishment System = Prod. Order, then delete Production Order.
      IF Item."Replenishment System" = Item."Replenishment System"::Purchase THEN BEGIN
        SelectPurchaseLine(PurchaseLine,Item."No.");
        PurchaseHeader.SETRANGE("No.",PurchaseLine."Document No.");
        PurchaseHeader.FINDFIRST;
        PurchaseHeader.DELETE(TRUE);
      END ELSE BEGIN
        SelectProductionOrder(ProductionOrder,Item."No.");
        ProductionOrder.DELETE(TRUE);
      END;
    END;

    LOCAL PROCEDURE SelectScheduledReceipts@77(DocumentNo@1000 : Code[20]) : Decimal;
    BEGIN
      LibraryReportDataset.SetRange('PlanningBuffDocNo',DocumentNo);
      EXIT(LibraryReportDataset.Sum('PlngBuffScheduledReceipts'));
    END;

    LOCAL PROCEDURE SelectPlannedReceipts@62() : Decimal;
    VAR
      PlanningBuffer@1001 : Record 99000846;
    BEGIN
      LibraryReportDataset.SetRange('PlanningBuffDocType',FORMAT(PlanningBuffer."Document Type"::"Requisition Line"));
      EXIT(LibraryReportDataset.Sum('PlngBuffPlannedReceipts'));
    END;

    LOCAL PROCEDURE UpdateItemReorderPointParameters@100(VAR Item@1000 : Record 27);
    BEGIN
      UpdateItemMinMaxOrderQty(Item,LibraryRandom.RandDec(5,2),0);  // Value required.
      Item.VALIDATE("Order Multiple",Item."Minimum Order Quantity");
      UpdateItemReorderQty(Item);
    END;

    LOCAL PROCEDURE UpdateItemReorderQty@67(VAR Item@1000 : Record 27);
    BEGIN
      Item.VALIDATE("Reorder Quantity",100 + LibraryRandom.RandDec(5,2));  // Large value required.
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrdersWithFirmPlannedProd@96(VAR Item@1000 : Record 27;VAR ProductionOrder@1002 : Record 5405;VAR SalesLine@1003 : Record 37;VAR SalesLine2@1007 : Record 37;ReorderingPolicy@1001 : Option);
    VAR
      ProductionBOMHeader@1005 : Record 99000771;
    BEGIN
      // Create Item and two Sales Order. Create Firm Planned Production Order.
      CreateProdOrderItemsSetup(Item,ProductionBOMHeader,ReorderingPolicy);
      CreateSalesOrder(SalesLine,Item."No.");
      CreateSalesOrder(SalesLine2,Item."No.");
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.");
    END;

    LOCAL PROCEDURE CreateSalesOrderWithFirmPlannedProdAndBOMHierarchy@95(VAR Item@1000 : Record 27;VAR SalesLine@1001 : Record 37;VAR ProductionOrder@1002 : Record 5405);
    VAR
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionBOMHeader2@1004 : Record 99000771;
      ProductionBOMVersion@1005 : Record 99000779;
      ProductionBOMLine@1006 : Record 99000772;
    BEGIN
      // Create Item with Order attributes and New BOM Version, Update Item Order Policy. Create two Production BOM Lines Of Item and Production BOM Type.
      CreateProdOrderItemsSetup(Item,ProductionBOMHeader,Item."Reordering Policy"::"Lot-for-Lot");
      UpdateItemMinMaxOrderQty(Item,LibraryRandom.RandDec(10,2),LibraryRandom.RandDec(10,2) + 100);
      CreateCertifiedProductionBOM(ProductionBOMHeader2);
      CreateProductionBOMVersion(ProductionBOMVersion,ProductionBOMHeader,Item."Base Unit of Measure",Item."No.");
      LibraryManufacturing.CreateProductionBOMLine(
        ProductionBOMHeader,ProductionBOMLine,ProductionBOMVersion."Version Code",ProductionBOMLine.Type::"Production BOM",
        ProductionBOMHeader2."No.",LibraryRandom.RandInt(10) + 10);
      UpdateProductionBOMVersionStatus(ProductionBOMVersion,ProductionBOMVersion.Status::"Under Development");
      CreateSalesOrder(SalesLine,Item."No.");
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.");
    END;

    LOCAL PROCEDURE CreateSalesOrderWtihProdOrderWithoutRouting@94(VAR Item@1000 : Record 27;VAR SalesLine@1001 : Record 37;VAR ProductionOrder@1002 : Record 5405);
    VAR
      ProductionBOMHeader@1003 : Record 99000771;
    BEGIN
      // Create Item with Production BOM No. with deleted Routing No., Update item Order Policy. Create Sales Order and Firm Planned Production Order.
      CreateProdOrderItemsSetup(Item,ProductionBOMHeader,Item."Reordering Policy"::"Lot-for-Lot");
      Item.VALIDATE("Routing No.",'');
      UpdateItemMinMaxOrderQty(Item,LibraryRandom.RandDec(10,2),LibraryRandom.RandDec(10,2) + 100);
      CreateSalesOrder(SalesLine,Item."No.");
      CreateAndRefreshProdOrder(ProductionOrder,ProductionOrder.Status::"Firm Planned",Item."No.");
    END;

    LOCAL PROCEDURE UpdateItemMinMaxOrderQty@97(VAR Item@1000 : Record 27;MinimumOrderQuantity@1001 : Decimal;MaximumOrderQuantity@1002 : Decimal);
    BEGIN
      Item.VALIDATE("Minimum Order Quantity",MinimumOrderQuantity);
      Item.VALIDATE("Maximum Order Quantity",MaximumOrderQuantity);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateRequisitionWorksheetName@273(VAR ReqWkshTemplate@1002 : Record 244;VAR RequisitionWkshName@1001 : Record 245);
    BEGIN
      ReqWkshTemplate.SETRANGE(Type,ReqWkshTemplate.Type::"Req.");
      RequisitionWkshName.SETRANGE(Recurring,FALSE);
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
    END;

    LOCAL PROCEDURE SelectRequisitionLineForReqWksht@121(VAR RequisitionLine@1000 : Record 246;WorksheetTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    BEGIN
      RequisitionLine.SETRANGE("Worksheet Template Name",WorksheetTemplateName);
      RequisitionLine.SETRANGE("Journal Batch Name",JournalBatchName);
      RequisitionLine.FINDSET;
    END;

    LOCAL PROCEDURE UpdateActionMessageRequisitionLine@124(VAR RequisitionLine@1000 : Record 246);
    BEGIN
      RequisitionLine.VALIDATE("Accept Action Message",TRUE);
      RequisitionLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcPlanForRequisitionWorksheet@134(VAR RequisitionWkshName@1001 : Record 245;Item@1000 : Record 27);
    VAR
      ReqWkshTemplate@1002 : Record 244;
    BEGIN
      CreateRequisitionWorksheetName(ReqWkshTemplate,RequisitionWkshName);
      LibraryPlanning.CalculatePlanForReqWksh(Item,ReqWkshTemplate.Name,RequisitionWkshName.Name,WORKDATE,WORKDATE);
    END;

    [Normal]
    LOCAL PROCEDURE CalcItemReorderQty@251(Item@1000 : Record 27;GrossRequirement@1001 : Decimal;InitialScheduledReceipts@1003 : Decimal) PlannedReceipts : Decimal;
    BEGIN
      PlannedReceipts := 0;
      IF GrossRequirement < InitialScheduledReceipts THEN
        EXIT(PlannedReceipts);

      IF GrossRequirement - InitialScheduledReceipts < Item."Minimum Order Quantity" THEN
        PlannedReceipts := Item."Minimum Order Quantity"
      ELSE
        PlannedReceipts := GrossRequirement - InitialScheduledReceipts;

      IF (PlannedReceipts > Item."Maximum Order Quantity") AND (Item."Maximum Order Quantity" > 0) THEN
        PlannedReceipts := Item."Maximum Order Quantity";

      IF Item."Reorder Quantity" > 0 THEN
        PlannedReceipts := Item."Reorder Quantity";

      IF Item."Order Multiple" <> 0 THEN
        PlannedReceipts := Item."Order Multiple" * (ROUND(PlannedReceipts / Item."Order Multiple",1,'<') + 1);

      EXIT(PlannedReceipts);
    END;

    LOCAL PROCEDURE PurchReceiptAndCancelReservation@79(ItemNo@1000 : Code[20]);
    VAR
      PurchaseLine@1002 : Record 39;
      PurchaseHeader@1003 : Record 38;
      ReservationEntry@1004 : Record 337;
    BEGIN
      SelectPurchaseLine(PurchaseLine,ItemNo);
      WITH PurchaseLine DO BEGIN
        VALIDATE("Qty. to Receive",Quantity / 2);
        MODIFY;
        PurchaseHeader.GET("Document Type","Document No.");
        LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      END;

      FindReservEntry(ReservationEntry,PurchaseLine);
      ReservationEngineMgt.CancelReservation(ReservationEntry);
    END;

    LOCAL PROCEDURE FindReservEntry@145(VAR ReservationEntry@1000 : Record 337;PurchaseLine@1001 : Record 39);
    VAR
      PurchLineReserve@1002 : Codeunit 99000834;
    BEGIN
      ReservationEngineMgt.InitFilterAndSortingLookupFor(ReservationEntry,TRUE);
      PurchLineReserve.FilterReservFor(ReservationEntry,PurchaseLine);
      ReservationEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifySalesGrossRequirement@54(SalesLine@1000 : Record 37);
    BEGIN
      LibraryReportDataset.SetRange('PlanningBuffDocNo',SalesLine."Document No.");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('PlngBuffGrossRequirement',SalesLine.Quantity);
    END;

    LOCAL PROCEDURE VerifyRefOrder@87(Item@1000 : Record 27);
    VAR
      PurchaseLine@1001 : Record 39;
      ProductionOrder@1002 : Record 5405;
    BEGIN
      // Verify Purchase Order if Item Replenishment System = Purchase, or verify Production Order if Item Replenishment System = Prod. Order.
      IF Item."Replenishment System" = Item."Replenishment System"::Purchase THEN BEGIN
        SelectPurchaseLine(PurchaseLine,Item."No.");
        Assert.AreEqual(PurchaseLine.Quantity,SelectScheduledReceipts(PurchaseLine."Document No."),
          ScheduledReceiptsErr);
      END ELSE BEGIN
        SelectProductionOrder(ProductionOrder,Item."No.");
        Assert.AreEqual(ProductionOrder.Quantity,SelectScheduledReceipts(ProductionOrder."No."),
          ScheduledReceiptsErr);
      END;
    END;

    LOCAL PROCEDURE VerifyScheduledReceiptsForPolicyOrder@36(Item@1000 : Record 27);
    BEGIN
      // Verify Purchase Order or Production Order details based on replenishment.
      IF Item."Replenishment System" = Item."Replenishment System"::Purchase THEN
        VerifyPurchaseSchedReceiptsPolicyOrder(Item."No.")
      ELSE
        VerifyProductionSchedReceiptsPolicyOrder(Item."No.");
    END;

    LOCAL PROCEDURE VerifyPurchaseSchedReceiptsPolicyOrder@35(ItemNo@1000 : Code[20]);
    VAR
      Item@1005 : Record 27;
    BEGIN
      // Verify values of multiple Purchase Lines from a single Purchase Order for multiple Sales Order.
      Item.GET(ItemNo);
      Item.CALCFIELDS("Qty. on Purch. Order");
      LibraryReportDataset.SetRange('PlanningBuffItemNo',Item."No.");
      Assert.AreEqual(Item."Qty. on Purch. Order",LibraryReportDataset.Sum('PlngBuffScheduledReceipts'),ScheduledReceiptsErr);
    END;

    LOCAL PROCEDURE VerifyProductionSchedReceiptsPolicyOrder@37(ItemNo@1000 : Code[20]);
    VAR
      Item@1007 : Record 27;
    BEGIN
      // Verify values from multiple Production Order for multiple Sales Order.
      Item.GET(ItemNo);
      Item.CALCFIELDS("Qty. on Prod. Order");
      LibraryReportDataset.SetRange('PlanningBuffItemNo',Item."No.");
      Assert.AreEqual(Item."Qty. on Prod. Order",LibraryReportDataset.Sum('PlngBuffScheduledReceipts'),ScheduledReceiptsErr);
    END;

    LOCAL PROCEDURE VerifyPurchaseAndFirmPlannedValues@21(PurchaseLine@1001 : Record 39;PurchaseLine2@1002 : Record 39;ProductionOrder@1003 : Record 5405;CalculateRegenerativePlan@1000 : Boolean);
    BEGIN
      IF CalculateRegenerativePlan THEN BEGIN
        LibraryReportDataset.AssertElementWithValueExists('ProjectedBalance',PurchaseLine.Quantity);
        LibraryReportDataset.AssertElementWithValueExists('ProjectedBalance',PurchaseLine.Quantity + PurchaseLine2.Quantity);
      END ELSE BEGIN
        Assert.AreEqual(ProductionOrder.Quantity,SelectScheduledReceipts(ProductionOrder."No."),ScheduledReceiptsErr);
        LibraryReportDataset.Reset;
        VerifyMultipleProjectedBalances(PurchaseLine,PurchaseLine2,ProductionOrder);
      END;
      VerifyMultipleSchedReceipts(PurchaseLine,PurchaseLine2);
    END;

    LOCAL PROCEDURE VerifyPurchaseAndFirmPlannedValuesForFRQItem@78(PurchaseLine@1001 : Record 39;PurchaseLine2@1002 : Record 39;ProductionOrder@1003 : Record 5405);
    BEGIN
      VerifyMultipleProjectedBalances(PurchaseLine,PurchaseLine2,ProductionOrder);
      VerifyMultipleSchedReceipts(PurchaseLine,PurchaseLine2);
      Assert.AreEqual(ProductionOrder.Quantity,SelectScheduledReceipts(ProductionOrder."No."),ScheduledReceiptsErr);
    END;

    LOCAL PROCEDURE VerifyMultipleProjectedBalances@81(PurchaseLine@1002 : Record 39;PurchaseLine2@1001 : Record 39;ProductionOrder@1000 : Record 5405);
    BEGIN
      LibraryReportDataset.AssertElementWithValueExists('ProjectedBalance',ProductionOrder.Quantity);
      LibraryReportDataset.AssertElementWithValueExists('ProjectedBalance',ProductionOrder.Quantity + PurchaseLine.Quantity);
      LibraryReportDataset.AssertElementWithValueExists('ProjectedBalance',ProductionOrder.Quantity + PurchaseLine.Quantity +
        PurchaseLine2.Quantity);
    END;

    LOCAL PROCEDURE VerifyMultipleSchedReceipts@80(PurchaseLine@1001 : Record 39;PurchaseLine2@1000 : Record 39);
    BEGIN
      LibraryReportDataset.AssertElementWithValueExists('PlngBuffScheduledReceipts',PurchaseLine.Quantity);
      Assert.AreEqual(PurchaseLine.Quantity + PurchaseLine2.Quantity,
        SelectScheduledReceipts(PurchaseLine."Document No."),ScheduledReceiptsErr);
    END;

    LOCAL PROCEDURE VerifyGrossReqAndProjectedBalanceForMultipleSales@98(SalesLine@1000 : Record 37;SalesLine2@1001 : Record 37;ProductionOrder@1002 : Record 5405);
    VAR
      SchedReceipts@1003 : Decimal;
    BEGIN
      SchedReceipts := SelectScheduledReceipts(ProductionOrder."No.");
      LibraryReportDataset.Reset;
      LibraryReportDataset.AssertElementWithValueExists('ProjectedBalance',
        SchedReceipts - SalesLine.Quantity - SalesLine2.Quantity);
      VerifySalesGrossRequirement(SalesLine);
      VerifySalesGrossRequirement(SalesLine2);
    END;

    LOCAL PROCEDURE VerifyMultiplePurchaseReceipts@101(SalesLine@1000 : Record 37;ItemReorderQuantity@1001 : Decimal;CarryOutActionMessage@1002 : Boolean);
    BEGIN
      IF CarryOutActionMessage THEN BEGIN
        LibraryReportDataset.AssertElementWithValueExists('PlngBuffScheduledReceipts',SalesLine.Quantity);
        LibraryReportDataset.AssertElementWithValueExists('PlngBuffScheduledReceipts',ItemReorderQuantity);
      END ELSE BEGIN
        LibraryReportDataset.AssertElementWithValueExists('ProjectedBalance',ItemReorderQuantity);
        Assert.AreEqual(SalesLine.Quantity + ItemReorderQuantity,SelectPlannedReceipts,PlannedReceiptsErr);
      END;
    END;

    LOCAL PROCEDURE VerifyActionLinesExists@93(ItemNo@1000 : Code[20];RecordShould@1001 : 'Exist,Not Exist');
    VAR
      RequisitionLine@1002 : Record 246;
    BEGIN
      WITH RequisitionLine DO BEGIN
        SETRANGE(Type,Type::Item);
        SETRANGE("No.",ItemNo);
        Assert.AreEqual(ISEMPTY,RecordShould = RecordShould::"Not Exist",
          STRSUBSTNO(RecordExistenceErr,TABLECAPTION,RecordShould));
      END;
    END;

    LOCAL PROCEDURE AreSameMessages@130(Message@1001 : Text[1024];Message2@1000 : Text[1024]) : Boolean;
    BEGIN
      EXIT(STRPOS(Message,Message2) > 0);
    END;

    [MessageHandler]
    PROCEDURE MsgHandler@102(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,MsgWorksheetNo) > 0,Message);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@126(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(AreSameMessages(ConfirmMessage,OutputMissingConfirmMessage),ConfirmMessage);
      Reply := TRUE;
    END;

    LOCAL PROCEDURE CreateForecastEntry@140(VAR ProductionForecastEntry@1000 : Record 99000852;VAR ProductionForecastName@1001 : Record 99000851;Item@1002 : Record 27;VAR EventDate@1007 : Date);
    VAR
      ManufacturingSetup@1003 : Record 99000765;
    BEGIN
      LibraryManufacturing.CreateProductionForecastName(ProductionForecastName);

      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Current Production Forecast",ProductionForecastName.Name);
      ManufacturingSetup.MODIFY(TRUE);

      EventDate := GenerateRandomDateNextYear;
      LibraryManufacturing.CreateProductionForecastEntry(
        ProductionForecastEntry,ProductionForecastName.Name,Item."No.",'',EventDate,FALSE);
      ProductionForecastEntry.VALIDATE("Forecast Quantity (Base)",LibraryRandom.RandInt(50));
      ProductionForecastEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GenerateRandomDateNextYear@141() : Date;
    BEGIN
      EXIT(CALCDATE('<-CY + 1Y>',WORKDATE) + LibraryRandom.RandInt(365) - 1);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyProductionForecastGrossRequirement@143(ProductionForecastEntry@1001 : Record 99000852);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('PlanningBuffDocNo',ProductionForecastEntry."Production Forecast Name");
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.AssertCurrentRowValue('PlngBuffGrossRequirement',ProductionForecastEntry."Forecast Quantity (Base)");
    END;

    [RequestPageHandler]
    PROCEDURE PlanningAvailabilityRequestPageHandler@172(VAR PlanningAvailability@1000 : TestRequestPage 99001048);
    BEGIN
      PlanningAvailability.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [Reports] [SCM]
      Test Manufacturing - Planning Reports:
        1. Create Sales Order Setup. Create Purchase Order (Item Reorder Policy - Lot-for-Lot), and verify Planning Availability report.
        2. Create Sales Order Setup. Create Purchase Order (Item Reorder Policy - Fixed Reorder Quantity), and verify Planning Availability report.
        3. Create Sales Order Setup. Create Purchase Order (Item Reorder Policy - Max. Quantity), and verify Planning Availability report.
        4. Create Sales Order Setup. Create Firm Planned Production Order, and verify Planning Availability report.
        5. Create Sales Order Setup. Create Released Production Order, and verify Planning Availability report.
        6. Create Sales Order Setup. Create Firm Planned Production Order for FRQ Item, and verify Planning Availability report.
        7. Create Sales Order Setup. Create Released Production Order for FRQ item, and verify Planning Availability report.
        8. Create Item without Re-order Policy. and Sales Order Setup. Calc. Regenerative Plan and verify Planning Availability report.
        9. Create Item without Re-order Policy. and Sales Order Setup. Calc. Net Change Plan and verify Planning Availability report.
       10. Create Item - Re-order Policy - Lot-for-Lot, and Sales Order Setup. Calculate Regenerative Plan for replenishment- Prod. Order, and verify Planning Availability report.
       11. Create Item - Re-order Policy - Lot-for-Lot, and Sales Order Setup. Calculate Regenerative Plan for replenishment- Purchase, and verify Planning Availability report.
       12. Create Item - Lot-for-Lot, and Sales Order Setup. Calculate Regenerative Plan and Carry Out Action Message for replenishment- Purchase Order, and verify Planning Availability report.
       13. Create Item - Lot-for-Lot, and Sales Order Setup. Calculate Regenerative Plan and Carry Out Action Message for replenishment- Production Order, and verify Planning Availability report.
       14. Create Sales Order Setup. Calculate Regenerative Plan, Carry Out Action Message - replenishment- Purchase Order. Delete Purchase Order and verify Planning Availability report.
       15. Create Sales Order Setup. Calculate Regenerative Plan, Carry Out Action Message - replenishment- Production. Delete Production Order and verify Planning Availability report.
       16. Create Item - Re-order Policy - Lot-for-Lot, and Two Sales Order. Calculate Regenerative Plan and Carry Out Action Message for replenishment- Purchase Order, and verify Planning Availability report.
       17. Create Item - Re-order Policy - Lot-for-Lot, and Two Sales Order. Calculate Regenerative Plan and Carry Out Action Message for replenishment- Production Order, and verify Planning Availability report.
       18. Create Item - Re-order Policy - Order, and Two Sales Order. Calculate Regenerative Plan and Carry Out Action Message for replenishment- Purchase Order, and verify Planning Availability report.
       19. Create Item - Re-order Policy - Order, and Two Sales Order. Calculate Regenerative Plan and Carry Out Action Message for replenishment- Production Order, and verify Planning Availability report.
       20. Create Firm Planned Production Order for Item Without BOM. Calculate Regenerative Plan and verify Planning Availability report for Parent Item. Empty Requisition Line suggests Prod. order cancelled.
       21. Create Purchase Order. Create Production BOM with Version New. Create Firm Planned Production Order and verify Planning Availability Report for Parent Item.
       22. Create Purchase Order. Create Production BOM with Version New. Create Firm Planned Production Order, Calculate Regenerative Plan and verify Planning Availability Report for Parent Item.
       23. Create Purchase Order. Create Production BOM with Version Certified. Create Firm Planned Production Order and verify Planning Availability Report for Parent Item.
       24. Create Purchase Order. Create Production BOM with Version Certified. Create Firm Planned Production Order and verify Planning Availability Report for Child Item.
       25. Create Firm Planned Production Order for Item Without BOM. Calculate Regenerative Plan Create Sales Order and verify Planning Availability Report for Parent Item.
       26. Create Sales Order Setup (Item - Re-order Policy - Fixed Reorder Qty). Calculate Net Change Plan for replenishment- Purchase Order, and verify Planning Availability report.
       27. Create Sales Order Setup (Item - Re-order Policy - Fixed Reorder Qty). Calculate Net Change Plan for replenishment- Prod. Order, and verify Planning Availability report.
       28. Create Purchase Order (Item - Re-order Policy - Fixed Reorder Qty). Create Production BOM with Version New. Create Firm Planned Production Order and verify Planning Availability Report for Parent Item.
       29. Create Purchase Order (Item - Re-order Policy - Fixed Reorder Qty). Create Production BOM with Version New. Create Firm Planned Production Order, Calculate Net Change Plan and verify Planning Availability Report for Parent Item.
       30. Create Purchase Order (Item - Re-order Policy - Fixed Reorder Qty). Create Production BOM with Version Certified. Create Firm Planned Production Order and verify Planning Availability Report for Parent Item.
       31. Create Purchase Order (Item - Re-order Policy - Fixed Reorder Qty). Create Production BOM with Version Certified. Create Firm Planned Production Order and verify Planning Availability Report for Child Item.
       32. Create Item with Production with BOM and Routing (Item - Re-order Policy - Lot for Lot). Create two Sales Order and verify Planning Availability report.
       33. Create Item with Production with BOM and Routing (Item - Re-order Policy - Max. Quantity). Create two Sales Order and verify Planning Availability report.
       34. Create Item with Production with BOM and Routing (Item - Re-order Policy - Lot for Lot). Create two Sales Order. Calculate Regenerative Plan and verify Planning Availability report.
       35. Create Item with Production with BOM and Routing (Item - Re-order Policy - Max. Quantity). Create two Sales Order. Calculate Regenerative Plan and verify Planning Availability report.
       36. Create Item with Production with BOM and Routing (Item - Re-order Policy - Lot for Lot). Create two Sales Order.
           Calculate Regenerative Plan and Carry Out Action Message for replenishment- Production Order and verify Planning Availability report.
       37. Create Item with Production with BOM and Routing (Item - Re-order Policy - Max. Quantity). Create two Sales Order.
           Calculate Regenerative Plan and Carry Out Action Message for replenishment- Production Order and verify Planning Availability report.
       38. Create Item with New BOM Version, Update Item Order Policy and verify Planning Availability report.
       39. Create Item with Production BOM but without Routing, Create Item  with Sales and Prod Order and verify Planning Availability report.
       40. Create Item with New BOM Version, Update Item Order Policy. Calculate Regenerative Plan and verify Planning Availability report.
       41. Create Item with Production BOM but without Routing, Create Item  with Sales and Prod Order.Calculate Regenerative Plan and verify Planning Availability report.
       42. Create Item with New BOM Version, Update Item Order Policy. Calculate Regenerative Plan and Carry Out Action Message for replenishment and verify Planning Availability report.
       43. Create Item with Production BOM but without Routing, Create Item  with Sales and Prod Order.Calculate Regenerative Plan and Carry Out Action Message for replenishment and verify Planning Availability report.
       44. Create Sales Order Setup and Post Sales Order (Item - Re-order Policy - Fixed Reorder Qty). Calculate Regenerative Plan and verify Planning Availability report.
       45. Create Sales Order Setup and Post Sales Order (Item - Re-order Policy - Fixed Reorder Qty). Calculate Regenerative Plan, Carry Out Action message and verify Planning Availability report.
       46. Create Sales Order Setup and Post Sales Order (Item - Re-order Policy - Fixed Reorder Qty). Calculate Plan from Requisition Worksheet and verify Planning Availability report.
       47. Create Sales Order Setup and Post Sales Order (Item - Re-order Policy - Fixed Reorder Qty). Calculate Plan from Requisition Worksheet, Carry Out Action message and verify Planning Availability report.
       48. Create Sales and Production Order Setup (Item - Re-order Policy - Fixed Reorder Qty). Calculate Plan from Requisition Worksheet and verify Planning Availability report.
       49. Create Sales and Production Order Setup (Item - Re-order Policy - Maximum Qty). Calculate Plan from Requisition Worksheet and verify Planning Availability report.
       50. Create Sales and Firm Planned Production Order Setup (Item - Re-order Policy - Lot-for-Lot) with Planning flexibility - None. Change Prod Order status to Released. Calculate Plan and verify Planning Availability report.
       51. Create Sales and Released Production Order Setup (Item - Re-order Policy - Lot-for-Lot) with Planning flexibility - None. Change Prod Order status to Finished. Calculate Plan and verify Planning Availability report.

        Covers Test Cases:
        ----------------------------------------------------------------------------
        Test Function Name                                             TFS ID
        ----------------------------------------------------------------------------
        PlanningAvailabilityForPurchaseReorderPolicyLotForLot          121578,121677
        PlanningAvailabilityForFirmPlannedProdOrder                    121578,121677
        PlanningAvailabilityForReleasedProdOrder                       121578,121677
        CalcRegenerativePlanWithoutReorderPolicy                       121578,121677
        CalcRegenerativePlanWithReorderPolicyAndPurchase               121578,121677
        CalcRegenerativePlanWithReorderPolicyAndProduction             121578,121677
        CarryOutActionMessageForPurchaseOrder                          121578,121677
        CarryOutActionMessageForProductionOrder                        121578,121677
        CarryOutActionMessageAndDeletePurchaseOrder                    121578,121677
        CarryOutActionMessageAndDeleteProductionOrder                  121578,121677
        CarryOutActionMsgPurchaseReorderPolicyLotForLot                121578,121677
        CarryOutActionMsgProductionReorderPolicyLotForLot              121578,121677
        CarryOutActionMsgPurchaseReorderPolicyOrder                    121581,121674
        CarryOutActionMsgProductionReorderPolicyOrder                  121581,121674

        Covers Test Cases:
        ------------------------------------------------------------------------------------------------
        Test Function Name                                                                TFS ID
        ------------------------------------------------------------------------------------------------
        CalcRegenerativePlanForFirmPlannedOrder                                           121582,121673
        PlanningAvailabilityForFirmPlannedWithNewBOMVersion                               121582,121673
        CalcRegenerativePlanForFirmPlannedWithNewBOMVersion                               121582,121673
        PlanningAvailabilityForFirmPlannedProdItemWithCertifiedBOMVersion                 121582,121673
        PlanningAvailabilityForFirmPlannedBOMItemWithCertifiedBOMVersion                  121582,121673
        CalcRegenerativePlanForFirmPlannedWithSales                                       121582,121673

        Covers Test Cases:
        -------------------------------------------------------------------------------------------------
        Test Function Name                                                                TFS ID
        -------------------------------------------------------------------------------------------------
        PlanningAvailabilityForPurchaseReorderPolicyFRQ                                   121579,121676
        CalcNetChangePlanWithoutReorderPolicy                                             121579,121676
        CalcNetChangePlanWithReorderPolicyFRQAndPurchase                                  121579,121676
        CalcNetChangePlanWithReorderPolicyFRQAndProduction                                121579,121676
        PlanningAvailabilityForFirmPlannedNewBOMVersionReorderPolicyFRQ                   121579,121676
        CalcRegenerativePlanForFirmPlannedNewBOMVersionReorderPolicyFRQ                   121579,121676
        PlanningAvailabilityForFirmPlannedProdItemCertifiedBOMVersionReorderPolicyFRQ     121579,121676
        PlanningAvailabilityForFirmPlannedBOMItemCertifiedBOMVersionReorderPolicyFRQ      121579,121676

        Covers Test Cases:
        -------------------------------------------------------------------------------------------------
        Test Function Name                                                                TFS ID
        -------------------------------------------------------------------------------------------------
        PlanningAvailabilityReportForProdWithRoutingAndMultipleSalesReorderPolicyLFL      121580,121675
        CalcRegenerativePlanForProdWithRoutingAndMultipleSalesReorderPolicyLFL            121580,121675
        CarryOutActionMsgForProdWithRoutingAndMultipleSalesReorderPolicyLFL               121580,121675
        PlanningAvailabilityReportForProdOrderWithBOMHierarchy                            121580,121675
        PlanningAvailabilityReportForProdItemWithoutRouting                               121580,121675
        CalcRegenerativePlanForProdOrderWithBOMHierarchy                                  121580,121675
        CalcRegenerativePlanForProdItemWithoutRouting                                     121580,121675
        CarryOutActionMsgForProdOrderWithBOMHierarchy                                     121580,121675
        CarryOutActionMsgForProdItemWithoutRouting                                        121580,121675

        Covers Test Cases:
        -------------------------------------------------------------------------------------------------------
        Test Function Name                                                                TFS ID
        -------------------------------------------------------------------------------------------------------
        PlanningAvailabilityAfterSalesPostAndCalcRegenPlanReorderPolicyFRQ                121583,127891,127899
        PlanningAvailabilityAfterSalesPostAndCarryOutActionMsgReorderPolicyFRQ            121583,127891,127899
        PlanningAvailabilityAfterSalesPostAndCalcPlanReqWkhstReorderPolicyFRQ             121583,127891,127899
        PlanningAvailabilityAfterSalesPostReqWkhstCarryOutActionMsgReorderPolicyFRQ       121583,127891,127899

        Covers Test Cases:
        -------------------------------------------------------------------------------------------------------
        Test Function Name                                                                TFS ID
        -------------------------------------------------------------------------------------------------------
        PlanningAvailabilityForPurchaseReorderPolicyMQ                                    123511,121585,121584
        PlanningAvailabilityReportForProdWithRoutingAndMultipleSalesReorderPolicyMQ       123511,121585,121584
        CalcRegenerativePlanForProdWithRoutingAndMultipleSalesReorderPolicyMQ             123511,121585,121584
        CarryOutActionMsgForProdWithRoutingAndMultipleSalesReorderPolicyMQ                123511,121585,121584

        Covers Test Cases:
        -------------------------------------------------------------------------------------------------------
        Test Function Name                                                                 TFS ID
        -------------------------------------------------------------------------------------------------------
        PlanningAvailabilityForFirmPlannedProdOrderReorderPolicyFRQ                        121671
        PlanningAvailabilityForReleasedProdOrderReorderPolicyFRQ                           121671
        PlanningAvailabilityForSalesWithProdOrderAndCalcPlanReqWkhstReorderPolicyFRQ       121671
        PlanningAvailabilityForSalesWithProdOrderAndCalcPlanReqWkhstReorderPolicyMQ        121671
        PlanningAvailabilityForFirmPlannedToReleasedProdOrderReorderPolicyLotForLot        121672
        PlanningAvailabilityForReleasedToFinishedProdOrderReorderPolicyLotForLot           121672

        Covers Test Cases:
        -------------------------------------------------------------------------------------------------------
        Test Function Name                                                                 TFS ID
        -------------------------------------------------------------------------------------------------------
        ReplanCycleDoesNotDuplicateSupply                                                  361505
    }
    END.
  }
}

