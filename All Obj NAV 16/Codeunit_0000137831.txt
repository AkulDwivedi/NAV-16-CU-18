OBJECT Codeunit 137831 SCM - Warehouse UT
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibraryUtility@1000 : Codeunit 131000;
      NothingToHandleErr@1002 : TextConst 'ENU=Nothing to handle.';
      LibraryInventory@1003 : Codeunit 132201;
      LibraryWarehouse@1004 : Codeunit 132204;
      TransferRouteErr@1005 : TextConst 'ENU=You must specify a Transfer Route';
      LibraryRandom@1006 : Codeunit 130440;

    [Test]
    PROCEDURE BWTestNoPickCreatedWithSalesLotNotAvailableOtherLotAvailable@11();
    VAR
      BinContent@1000 : Record 7302;
      WarehouseRequest@1006 : Record 5765;
      WhseActivityLine@1005 : Record 5767;
      Lot1Code@1002 : Code[10];
      Lot2Code@1001 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 6788
      // SETUP : Create items, inventory and sales order
      CreateSetupForLotBW(BinContent);

      Lot1Code := LibraryUtility.GenerateGUID;
      Lot2Code := LibraryUtility.GenerateGUID;

      // Inventory 10 of Lot1, Sell 2 (2 of Lot2)
      CreateInventoryForLot(BinContent,Lot1Code,10,0D);
      CreateSales(WarehouseRequest,BinContent."Item No.",BinContent."Location Code",2);
      CreateSalesItemTracking(WarehouseRequest."Source No.",Lot2Code,2);

      // EXERCISE : Create the pick
      CreateInventoryPickFromWarehouseRequest(WarehouseRequest);

      // VERIFY : No pick is made
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::"Invt. Pick");
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      Assert.IsTrue(WhseActivityLine.ISEMPTY,'No inventory pick to be made.');
    END;

    [Test]
    PROCEDURE BWTestFullPickCreatedWithSalesLotParialAvailableOtherLotAvailable@2();
    VAR
      BinContent@1000 : Record 7302;
      WarehouseRequest@1006 : Record 5765;
      WhseActivityLine@1005 : Record 5767;
      Lot1Code@1001 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 6788
      // SETUP : Create items, inventory and sales order
      CreateSetupForLotBW(BinContent);

      Lot1Code := LibraryUtility.GenerateGUID;

      // Inventory 5 of Lot, Sell 5 (2 of Lot)
      CreateInventoryForLot(BinContent,Lot1Code,5,0D);
      CreateSales(WarehouseRequest,BinContent."Item No.",BinContent."Location Code",5);
      CreateSalesItemTracking(WarehouseRequest."Source No.",Lot1Code,2);

      // EXERCISE : Create the pick
      CreateInventoryPickFromWarehouseRequest(WarehouseRequest);

      // VERIFY : Full pick is made but 1 line with qty 2 and lot 1 and another without lot
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::"Invt. Pick");
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",Lot1Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(2,WhseActivityLine.Quantity,'2 PCS of specified lot was asked for.');
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(3,WhseActivityLine.Quantity,'3 PCS of unspecified lot was asked for.');
    END;

    [Test]
    PROCEDURE BWTestPartialPickCreatedWithSalesLotNotAvailableOtherLotAvailable@5();
    VAR
      BinContent@1000 : Record 7302;
      WarehouseRequest@1006 : Record 5765;
      WhseActivityLine@1005 : Record 5767;
      Lot1Code@1002 : Code[10];
      Lot2Code@1001 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 6788
      // SETUP : Create items, inventory and sales order
      CreateSetupForLotBW(BinContent);

      Lot1Code := LibraryUtility.GenerateGUID;
      Lot2Code := LibraryUtility.GenerateGUID;

      // Inventory 5 of Lot1, Sell 7 (3 of Lot2)
      CreateInventoryForLot(BinContent,Lot1Code,5,0D);
      CreateSales(WarehouseRequest,BinContent."Item No.",BinContent."Location Code",7);
      CreateSalesItemTracking(WarehouseRequest."Source No.",Lot2Code,3);

      // EXERCISE : Create the pick
      CreateInventoryPickFromWarehouseRequest(WarehouseRequest);

      // VERIFY : Pick is made only for unspecified lot
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::"Invt. Pick");
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",Lot2Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(0,WhseActivityLine.Quantity,'3 PCS of specified lot was asked for but not available.');
      WhseActivityLine.SETRANGE("Lot No.",Lot1Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(0,WhseActivityLine.Quantity,'0 PCS of available inventory lot was not asked for.');
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(4,WhseActivityLine.Quantity,'4 PCS of unspecified lot was asked for.');
    END;

    [Test]
    PROCEDURE BWTestPartialPickCreatedWithSalesLotPartialAvailableOtherLotPartialAvailable@13();
    VAR
      BinContent@1000 : Record 7302;
      WarehouseRequest@1006 : Record 5765;
      WhseActivityLine@1005 : Record 5767;
      Lot1Code@1002 : Code[10];
      Lot2Code@1001 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 6788
      // SETUP : Create items, inventory and sales order
      CreateSetupForLotBW(BinContent);

      Lot1Code := LibraryUtility.GenerateGUID;
      Lot2Code := LibraryUtility.GenerateGUID;

      // Inventory 1 of Lot1 & 3 of Lot2, Sell 7 (3 of Lot1)
      CreateInventoryForLot(BinContent,Lot1Code,1,0D);
      CreateInventoryForLot(BinContent,Lot2Code,3,0D);
      CreateSales(WarehouseRequest,BinContent."Item No.",BinContent."Location Code",7);
      CreateSalesItemTracking(WarehouseRequest."Source No.",Lot1Code,3);

      // EXERCISE : Create the pick
      CreateInventoryPickFromWarehouseRequest(WarehouseRequest);

      // VERIFY : Pick is made only for unspecified lot
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::"Invt. Pick");
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",Lot1Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(1,WhseActivityLine.Quantity,'3 PCS of specified lot was asked for but 1 available.');
      WhseActivityLine.SETRANGE("Lot No.",Lot2Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(0,WhseActivityLine.Quantity,'0 PCS of available inventory lot was not asked for.');
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(3,WhseActivityLine.Quantity,'4 PCS of unspecified lot was asked for but 3 available');
    END;

    [Test]
    PROCEDURE BWTestPartialPickCreatedWithSalesLotAvailablePartialReservedOnInventory@15();
    VAR
      BinContent@1006 : Record 7302;
      WarehouseRequest@1005 : Record 5765;
      WhseActivityLine@1003 : Record 5767;
      Lot1Code@1002 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 6788
      // SETUP : Create items, inventory and sales order
      CreateSetupForLotBW(BinContent);

      Lot1Code := LibraryUtility.GenerateGUID;

      // Inventory 4 of Lot, Sell 5 of Lot - 3 reserved against purchase)
      CreateInventoryForLot(BinContent,Lot1Code,4,0D);
      CreateSales(WarehouseRequest,BinContent."Item No.",BinContent."Location Code",5);
      CreateSalesItemTracking(WarehouseRequest."Source No.",Lot1Code,5);
      CreateSalesReservationAgainstPurchase(WarehouseRequest."Source No.",3,Lot1Code);

      // EXERCISE : Create the pick
      CreateInventoryPickFromWarehouseRequest(WarehouseRequest);

      // VERIFY : Pick is made only for unspecified lot
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::"Invt. Pick");
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",Lot1Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(2,WhseActivityLine.Quantity,'2 PCS of specified lot was asked for.');
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(0,WhseActivityLine.Quantity,'0 PCS of unspecified lot was asked for, but 2 available.');
    END;

    [Test]
    PROCEDURE BWTestPartialPickCreatedWithSalesLotPartialAvailablePartialReservedOnInventory@7();
    VAR
      BinContent@1006 : Record 7302;
      WarehouseRequest@1005 : Record 5765;
      WhseActivityLine@1003 : Record 5767;
      Lot1Code@1002 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 6788
      // SETUP : Create items, inventory and sales order
      CreateSetupForLotBW(BinContent);

      Lot1Code := LibraryUtility.GenerateGUID;

      // Inventory 5 of Lot, Sell 9 (5 of Lot - 3 reserved against purchase))
      CreateInventoryForLot(BinContent,Lot1Code,5,0D);
      CreateSales(WarehouseRequest,BinContent."Item No.",BinContent."Location Code",9);
      CreateSalesItemTracking(WarehouseRequest."Source No.",Lot1Code,5);
      CreateSalesReservationAgainstPurchase(WarehouseRequest."Source No.",3,Lot1Code);

      // EXERCISE : Create the pick
      CreateInventoryPickFromWarehouseRequest(WarehouseRequest);

      // VERIFY : Pick is made only for unspecified lot
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::"Invt. Pick");
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",Lot1Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(2,WhseActivityLine.Quantity,'2 PCS of specified lot was asked for.');
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(3,WhseActivityLine.Quantity,'4 PCS of unspecified lot was asked for, but 3 available.');
    END;

    [Test]
    PROCEDURE BWTestPartialPickCreatedWithSalesLotPartialAvailablePartialReservedTwiceOnInventory@8();
    VAR
      BinContent@1006 : Record 7302;
      WarehouseRequest@1005 : Record 5765;
      WhseActivityLine@1003 : Record 5767;
      Lot1Code@1002 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 6788
      // SETUP : Create items, inventory and sales order
      CreateSetupForLotBW(BinContent);

      Lot1Code := LibraryUtility.GenerateGUID;

      // Inventory 5 of Lot, Sell 9 (5 of Lot - 4 reserved against 2 purchases))
      CreateInventoryForLot(BinContent,Lot1Code,5,0D);
      CreateSales(WarehouseRequest,BinContent."Item No.",BinContent."Location Code",9);
      CreateSalesItemTracking(WarehouseRequest."Source No.",Lot1Code,5);
      CreateSalesReservationAgainstPurchase(WarehouseRequest."Source No.",1,Lot1Code);
      CreateSalesReservationAgainstPurchase(WarehouseRequest."Source No.",2,Lot1Code);

      // EXERCISE : Create the pick
      CreateInventoryPickFromWarehouseRequest(WarehouseRequest);

      // VERIFY : Pick is made only for unspecified lot
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::"Invt. Pick");
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",Lot1Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(2,WhseActivityLine.Quantity,'2 {5 - (1 + 2)} PCS of specified lot was asked for.');
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(3,WhseActivityLine.Quantity,'4 PCS of unspecified lot was asked for, but 3 available.');
    END;

    [Test]
    PROCEDURE BWTestPartialPickCreatedWithSalesLotsPartialAvailablePartialReservedTwiceOnInventory@19();
    VAR
      BinContent@1006 : Record 7302;
      WarehouseRequest@1005 : Record 5765;
      WhseActivityLine@1003 : Record 5767;
      Lot1Code@1002 : Code[10];
      Lot2Code@1000 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 6788
      // SETUP : Create items, inventory and sales order
      CreateSetupForLotBW(BinContent);

      Lot1Code := LibraryUtility.GenerateGUID;
      Lot2Code := LibraryUtility.GenerateGUID;

      // Inventory (2 of Lot1, 3 of Lot2), Sell 9 (2 of Lot1 with 1 reserved, 3 of Lot2 with 1 reserved)
      CreateInventoryForLot(BinContent,Lot1Code,2,0D);
      CreateInventoryForLot(BinContent,Lot2Code,3,0D);
      CreateSales(WarehouseRequest,BinContent."Item No.",BinContent."Location Code",9);
      CreateSalesItemTracking(WarehouseRequest."Source No.",Lot1Code,2);
      CreateSalesItemTracking(WarehouseRequest."Source No.",Lot2Code,3);
      CreateSalesReservationAgainstPurchase(WarehouseRequest."Source No.",1,Lot2Code);
      CreateSalesReservationAgainstPurchase(WarehouseRequest."Source No.",1,Lot1Code);

      // EXERCISE : Create the pick
      CreateInventoryPickFromWarehouseRequest(WarehouseRequest);

      // VERIFY : Pick is made only for unspecified lot
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::"Invt. Pick");
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",Lot1Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(1,WhseActivityLine.Quantity,'1 {2 - 1} PCS of specified lot was asked for.');
      WhseActivityLine.SETRANGE("Lot No.",Lot2Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(2,WhseActivityLine.Quantity,'2 {3 - 1} PCS of specified lot was asked for.');
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(2,WhseActivityLine.Quantity,'4 PCS of unspecified lot was asked for, but 2 available.');
    END;

    [Test]
    PROCEDURE WMSTestNoPickCreatedWithSalesLotNotAvailableOtherLotAvailable@16();
    VAR
      BinContent@1000 : Record 7302;
      WarehouseShipmentLine@1006 : Record 7321;
      Lot1Code@1002 : Code[10];
      Lot2Code@1001 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 27137
      // SETUP : Create items, inventory, sales shipment
      CreateSetupForLotWMS(BinContent);

      Lot1Code := LibraryUtility.GenerateGUID;
      Lot2Code := LibraryUtility.GenerateGUID;

      // Inventory 10 of Lot1, Sell 2 (2 of Lot2)
      CreateInventoryForLot(BinContent,Lot1Code,10,0D);
      CreateSalesShipment(WarehouseShipmentLine,BinContent."Item No.",BinContent."Location Code",2);
      CreateSalesItemTracking(WarehouseShipmentLine."Source No.",Lot2Code,2);

      // EXERCISE : Create the pick
      ASSERTERROR CreateWarehousePickFromShipment(WarehouseShipmentLine);

      // VERIFY : Nothing to handle error
      Assert.ExpectedError(NothingToHandleErr);
    END;

    [Test]
    PROCEDURE WMSTestFullPickCreatedWithSalesLotParialAvailableOtherLotAvailable@62();
    VAR
      BinContent@1000 : Record 7302;
      WarehouseShipmentLine@1006 : Record 7321;
      WhseActivityLine@1005 : Record 5767;
      Lot1Code@1001 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 6788
      // SETUP : Create items, inventory and sales order
      CreateSetupForLotWMS(BinContent);

      Lot1Code := LibraryUtility.GenerateGUID;

      // Inventory 5 of Lot, Sell 5 (2 of Lot)
      CreateInventoryForLot(BinContent,Lot1Code,5,0D);
      CreateSalesShipment(WarehouseShipmentLine,BinContent."Item No.",BinContent."Location Code",5);
      CreateSalesItemTracking(WarehouseShipmentLine."Source No.",Lot1Code,2);

      // EXERCISE : Create the pick
      CreateWarehousePickFromShipment(WarehouseShipmentLine);

      // VERIFY : Full pick is made but 1 line with qty 2 and lot 1 and another without lot
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::Pick);
      WhseActivityLine.SETRANGE("Action Type",WhseActivityLine."Action Type"::Take);
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",Lot1Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(2,WhseActivityLine.Quantity,'2 PCS of specified lot was asked for.');
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(3,WhseActivityLine.Quantity,'3 PCS of unspecified lot was asked for.');
    END;

    [Test]
    PROCEDURE WMSTestPartialPickCreatedWithSalesLotNotAvailableOtherLotAvailable@67();
    VAR
      BinContent@1000 : Record 7302;
      WarehouseShipmentLine@1006 : Record 7321;
      WhseActivityLine@1005 : Record 5767;
      Lot1Code@1002 : Code[10];
      Lot2Code@1001 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 6788
      // SETUP : Create items, inventory and sales order
      CreateSetupForLotWMS(BinContent);

      Lot1Code := LibraryUtility.GenerateGUID;
      Lot2Code := LibraryUtility.GenerateGUID;

      // Inventory 5 of Lot1, Sell 7 (3 of Lot2)
      CreateInventoryForLot(BinContent,Lot1Code,5,0D);
      CreateSalesShipment(WarehouseShipmentLine,BinContent."Item No.",BinContent."Location Code",7);
      CreateSalesItemTracking(WarehouseShipmentLine."Source No.",Lot2Code,3);

      // EXERCISE : Create the pick
      CreateWarehousePickFromShipment(WarehouseShipmentLine);

      // VERIFY : Pick is made only for unspecified lot
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::Pick);
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",Lot2Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(0,WhseActivityLine.Quantity,'3 PCS of specified lot was asked for but not available.');
      WhseActivityLine.SETRANGE("Lot No.",Lot1Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(0,WhseActivityLine.Quantity,'0 PCS of available inventory lot was not asked for.');
      WhseActivityLine.SETRANGE("Action Type",WhseActivityLine."Action Type"::Take);
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(4,WhseActivityLine.Quantity,'4 PCS of unspecified lot was asked for.');
    END;

    [Test]
    PROCEDURE WMSTestPartialPickCreatedWithSalesLotPartialAvailableOtherLotPartialAvailable@70();
    VAR
      BinContent@1000 : Record 7302;
      WarehouseShipmentLine@1006 : Record 7321;
      WhseActivityLine@1005 : Record 5767;
      Lot1Code@1002 : Code[10];
      Lot2Code@1001 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 6788
      // SETUP : Create items, inventory and sales order
      CreateSetupForLotWMS(BinContent);

      Lot1Code := LibraryUtility.GenerateGUID;
      Lot2Code := LibraryUtility.GenerateGUID;

      // Inventory 1 of Lot1 & 3 of Lot2, Sell 7 (3 of Lot1)
      CreateInventoryForLot(BinContent,Lot1Code,1,0D);
      CreateInventoryForLot(BinContent,Lot2Code,3,0D);
      CreateSalesShipment(WarehouseShipmentLine,BinContent."Item No.",BinContent."Location Code",7);
      CreateSalesItemTracking(WarehouseShipmentLine."Source No.",Lot1Code,3);

      // EXERCISE : Create the pick
      CreateWarehousePickFromShipment(WarehouseShipmentLine);

      // VERIFY : Pick is made only for unspecified lot
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::Pick);
      WhseActivityLine.SETRANGE("Action Type",WhseActivityLine."Action Type"::Take);
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",Lot1Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(1,WhseActivityLine.Quantity,'3 PCS of specified lot was asked for but 1 available.');
      WhseActivityLine.SETRANGE("Action Type");
      WhseActivityLine.SETRANGE("Lot No.",Lot2Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(0,WhseActivityLine.Quantity,'0 PCS of available inventory lot was not asked for.');
      WhseActivityLine.SETRANGE("Action Type",WhseActivityLine."Action Type"::Take);
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(3,WhseActivityLine.Quantity,'4 PCS of unspecified lot was asked for but 3 available');
    END;

    [Test]
    PROCEDURE WMSTestPartialPickCreatedWithSalesLotAvailablePartialReservedOnInventory@85();
    VAR
      BinContent@1006 : Record 7302;
      WarehouseShipmentLine@1005 : Record 7321;
      WhseActivityLine@1003 : Record 5767;
      Lot1Code@1002 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 6788
      // SETUP : Create items, inventory and sales order
      CreateSetupForLotWMS(BinContent);

      Lot1Code := LibraryUtility.GenerateGUID;

      // Inventory 4 of Lot, Sell 5 of Lot - 3 reserved against purchase)
      CreateInventoryForLot(BinContent,Lot1Code,4,0D);
      CreateSalesShipment(WarehouseShipmentLine,BinContent."Item No.",BinContent."Location Code",5);
      CreateSalesItemTracking(WarehouseShipmentLine."Source No.",Lot1Code,5);
      CreateSalesReservationAgainstPurchase(WarehouseShipmentLine."Source No.",3,Lot1Code);

      // EXERCISE : Create the pick
      CreateWarehousePickFromShipment(WarehouseShipmentLine);

      // VERIFY : Pick is made only for unspecified lot
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::Pick);
      WhseActivityLine.SETRANGE("Action Type",WhseActivityLine."Action Type"::Take);
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",Lot1Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(2,WhseActivityLine.Quantity,'2 PCS of specified lot was asked for.');
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(0,WhseActivityLine.Quantity,'0 PCS of unspecified lot was asked for, but 2 available.');
    END;

    [Test]
    PROCEDURE WMSTestPartialPickCreatedWithSalesLotPartialAvailablePartialReservedOnInventory@96();
    VAR
      BinContent@1006 : Record 7302;
      WarehouseShipmentLine@1005 : Record 7321;
      WhseActivityLine@1003 : Record 5767;
      Lot1Code@1002 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 6788
      // SETUP : Create items, inventory and sales order
      CreateSetupForLotWMS(BinContent);

      Lot1Code := LibraryUtility.GenerateGUID;

      // Inventory 5 of Lot, Sell 9 (5 of Lot - 4 reserved against 2 purchases))
      CreateInventoryForLot(BinContent,Lot1Code,5,0D);
      CreateSalesShipment(WarehouseShipmentLine,BinContent."Item No.",BinContent."Location Code",9);
      CreateSalesItemTracking(WarehouseShipmentLine."Source No.",Lot1Code,5);
      CreateSalesReservationAgainstPurchase(WarehouseShipmentLine."Source No.",3,Lot1Code);

      // EXERCISE : Create the pick
      CreateWarehousePickFromShipment(WarehouseShipmentLine);

      // VERIFY : Pick is made only for unspecified lot
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::Pick);
      WhseActivityLine.SETRANGE("Action Type",WhseActivityLine."Action Type"::Take);
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",Lot1Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(2,WhseActivityLine.Quantity,'2 PCS of specified lot was asked for.');
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(3,WhseActivityLine.Quantity,'4 PCS of unspecified lot was asked for, but 3 available.');
    END;

    [Test]
    PROCEDURE WMSTestPartialPickCreatedWithSalesLotPartialAvailablePartialReservedTwiceOnInventory@22();
    VAR
      BinContent@1006 : Record 7302;
      WarehouseShipmentLine@1005 : Record 7321;
      WhseActivityLine@1003 : Record 5767;
      Lot1Code@1002 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 6788
      // SETUP : Create items, inventory and sales order
      CreateSetupForLotWMS(BinContent);

      Lot1Code := LibraryUtility.GenerateGUID;

      // Inventory 5 of Lot, Sell 9 (5 of Lot - 3 reserved against purchase))
      CreateInventoryForLot(BinContent,Lot1Code,5,0D);
      CreateSalesShipment(WarehouseShipmentLine,BinContent."Item No.",BinContent."Location Code",9);
      CreateSalesItemTracking(WarehouseShipmentLine."Source No.",Lot1Code,5);
      CreateSalesReservationAgainstPurchase(WarehouseShipmentLine."Source No.",2,Lot1Code);
      CreateSalesReservationAgainstPurchase(WarehouseShipmentLine."Source No.",1,Lot1Code);

      // EXERCISE : Create the pick
      CreateWarehousePickFromShipment(WarehouseShipmentLine);

      // VERIFY : Pick is made only for unspecified lot
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::Pick);
      WhseActivityLine.SETRANGE("Action Type",WhseActivityLine."Action Type"::Take);
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",Lot1Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(2,WhseActivityLine.Quantity,'2 PCS {5 - (2 + 1)} of specified lot was asked for.');
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(3,WhseActivityLine.Quantity,'4 PCS of unspecified lot was asked for, but 3 available.');
    END;

    [Test]
    PROCEDURE WMSTestPartialPickCreatedWithSalesLotsPartialAvailablePartialReservedTwiceOnInventory@24();
    VAR
      BinContent@1006 : Record 7302;
      WarehouseShipmentLine@1005 : Record 7321;
      WhseActivityLine@1003 : Record 5767;
      Lot1Code@1002 : Code[10];
      Lot2Code@1000 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 6788
      // SETUP : Create items, inventory and sales order
      CreateSetupForLotWMS(BinContent);

      Lot1Code := LibraryUtility.GenerateGUID;
      Lot2Code := LibraryUtility.GenerateGUID;

      // Inventory (2 of Lot1, 3 of Lot2), Sell 9 (2 of Lot1 with 1 reserved, 3 of Lot2 with 1 reserved))
      CreateInventoryForLot(BinContent,Lot1Code,2,0D);
      CreateInventoryForLot(BinContent,Lot2Code,3,0D);
      CreateSalesShipment(WarehouseShipmentLine,BinContent."Item No.",BinContent."Location Code",9);
      CreateSalesItemTracking(WarehouseShipmentLine."Source No.",Lot1Code,2);
      CreateSalesItemTracking(WarehouseShipmentLine."Source No.",Lot2Code,3);
      CreateSalesReservationAgainstPurchase(WarehouseShipmentLine."Source No.",1,Lot1Code);
      CreateSalesReservationAgainstPurchase(WarehouseShipmentLine."Source No.",1,Lot2Code);

      // EXERCISE : Create the pick
      CreateWarehousePickFromShipment(WarehouseShipmentLine);

      // VERIFY : Pick is made only for unspecified lot
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::Pick);
      WhseActivityLine.SETRANGE("Action Type",WhseActivityLine."Action Type"::Take);
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",Lot1Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(1,WhseActivityLine.Quantity,'1 PCS {2 - 1} of specified lot was asked for.');
      WhseActivityLine.SETRANGE("Lot No.",Lot2Code);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(2,WhseActivityLine.Quantity,'2 PCS {3 - 1} of specified lot was asked for.');
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(2,WhseActivityLine.Quantity,'4 PCS of unspecified lot was asked for, but 2 available.');
    END;

    [Test]
    PROCEDURE BWPickCreatedForLaterExpiryLotIfFirstExpiryLotIsReservedSecondSalesQtyLess@20();
    VAR
      BinContent@1004 : Record 7302;
      WarehouseRequest@1003 : Record 5765;
      WhseActivityLine@1002 : Record 5767;
      Item@1007 : Record 27;
      Location@1006 : Record 14;
      Bin@1005 : Record 7354;
      OlderLot@1001 : Code[10];
      NewerLot@1000 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 27491
      // SETUP : Create items, inventory and sales order
      CreateItemWithLotTracking(Item);
      CreateInventoryPickLocation(Location);
      Location."Pick According to FEFO" := TRUE;
      Location.INSERT;
      CreateBin(Bin,Location.Code);
      CreateBinContent(BinContent,Location.Code,Bin.Code,Item."No.");

      OlderLot := LibraryUtility.GenerateGUID;
      NewerLot := LibraryUtility.GenerateGUID;

      // Inventory (20 of older, 10 of newer)
      CreateInventoryForLot(BinContent,OlderLot,7,CALCDATE('<1M>',WORKDATE));
      CreateInventoryForLot(BinContent,NewerLot,3,CALCDATE('<2M>',WORKDATE));

      // Create sales of 20 for older lot. Reserve against it.
      CreateSales(WarehouseRequest,BinContent."Item No.",BinContent."Location Code",7);
      CreateSalesItemTracking(WarehouseRequest."Source No.",OlderLot,7);
      CreateSalesReservationAgainstILE(WarehouseRequest."Source No.",7,OlderLot);

      // Create new sales for 10 PCS- no lot assigned.
      CreateSales(WarehouseRequest,BinContent."Item No.",BinContent."Location Code",3);

      // EXERCISE : Create the pick
      CreateInventoryPickFromWarehouseRequest(WarehouseRequest);

      // VERIFY : Pick is made for newer lot only
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::"Invt. Pick");
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(0,WhseActivityLine.Quantity,'Although no lot has been asked for, FEFO should assign lot.');
      WhseActivityLine.SETRANGE("Lot No.",OlderLot);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(0,WhseActivityLine.Quantity,'Older lot is already reserved. Should not make a pick.');
      WhseActivityLine.SETRANGE("Lot No.",NewerLot);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(3,WhseActivityLine.Quantity,'FEFO should determine the newer lot for pick.');
    END;

    [Test]
    PROCEDURE BWPickCreatedForLaterExpiryLotIfFirstExpiryLotIsReservedSecondSalesQtyMore@23();
    VAR
      BinContent@1004 : Record 7302;
      WarehouseRequest@1003 : Record 5765;
      WhseActivityLine@1002 : Record 5767;
      Item@1007 : Record 27;
      Location@1006 : Record 14;
      Bin@1005 : Record 7354;
      OlderLot@1001 : Code[10];
      NewerLot@1000 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 27491
      // SETUP : Create items, inventory and sales order
      CreateItemWithLotTracking(Item);
      CreateInventoryPickLocation(Location);
      Location."Pick According to FEFO" := TRUE;
      Location.INSERT;
      CreateBin(Bin,Location.Code);
      CreateBinContent(BinContent,Location.Code,Bin.Code,Item."No.");

      OlderLot := LibraryUtility.GenerateGUID;
      NewerLot := LibraryUtility.GenerateGUID;

      // Inventory (20 of older, 10 of newer)
      CreateInventoryForLot(BinContent,OlderLot,7,CALCDATE('<1M>',WORKDATE));
      CreateInventoryForLot(BinContent,NewerLot,3,CALCDATE('<2M>',WORKDATE));

      // Create sales of 20 for older lot. Reserve against it.
      CreateSales(WarehouseRequest,BinContent."Item No.",BinContent."Location Code",3);
      CreateSalesItemTracking(WarehouseRequest."Source No.",OlderLot,3);
      CreateSalesReservationAgainstILE(WarehouseRequest."Source No.",3,OlderLot);

      // Create new sales for 10 PCS- no lot assigned.
      CreateSales(WarehouseRequest,BinContent."Item No.",BinContent."Location Code",7);

      // EXERCISE : Create the pick
      CreateInventoryPickFromWarehouseRequest(WarehouseRequest);

      // VERIFY : Pick is made for newer lot only
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::"Invt. Pick");
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(0,WhseActivityLine.Quantity,'Although no lot has been asked for, FEFO should assign lot.');
      WhseActivityLine.SETRANGE("Lot No.",OlderLot);
      WhseActivityLine.CALCSUMS(Quantity);
      ASSERTERROR Assert.AreEqual(4,WhseActivityLine.Quantity,'Older lot of 7 has 3 reserved. Rest should appear as per FEFO.');
      Assert.ExpectedError('Assert.AreEqual'); // Due to Sicily 27491.
      WhseActivityLine.SETRANGE("Lot No.",NewerLot);
      WhseActivityLine.CALCSUMS(Quantity);
      ASSERTERROR Assert.AreEqual(3,WhseActivityLine.Quantity,'FEFO should determine the newer lot for pick.');
      Assert.ExpectedError('Assert.AreEqual'); // Due to Sicily 27491.
    END;

    [Test]
    PROCEDURE WMSPickCreatedForLaterExpiryLotIfFirstExpiryLotIsReservedSecondSalesQtyLess@28();
    VAR
      BinContent@1004 : Record 7302;
      WarehouseShipmentLine@1003 : Record 7321;
      WhseActivityLine@1002 : Record 5767;
      Item@1007 : Record 27;
      Location@1006 : Record 14;
      Bin@1005 : Record 7354;
      OlderLot@1001 : Code[10];
      NewerLot@1000 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 27491
      // SETUP : Create items, inventory and sales order
      CreateItemWithLotTracking(Item);
      CreateWarehousePickLocation(Location);
      Location."Pick According to FEFO" := TRUE;
      Location.INSERT;
      CreateBin(Bin,Location.Code);
      CreateBinContent(BinContent,Location.Code,Bin.Code,Item."No.");

      OlderLot := LibraryUtility.GenerateGUID;
      NewerLot := LibraryUtility.GenerateGUID;

      // Inventory (20 of older, 10 of newer)
      CreateInventoryForLot(BinContent,OlderLot,7,CALCDATE('<1M>',WORKDATE));
      CreateInventoryForLot(BinContent,NewerLot,3,CALCDATE('<2M>',WORKDATE));

      // Create sales of 20 for older lot. Reserve against it.
      CreateSalesShipment(WarehouseShipmentLine,BinContent."Item No.",BinContent."Location Code",7);
      CreateSalesItemTracking(WarehouseShipmentLine."Source No.",OlderLot,7);
      CreateSalesReservationAgainstILE(WarehouseShipmentLine."Source No.",7,OlderLot);

      // Create new sales for 10 PCS- no lot assigned.
      CreateSalesShipment(WarehouseShipmentLine,BinContent."Item No.",BinContent."Location Code",3);

      // EXERCISE : Create the pick
      CreateWarehousePickFromShipment(WarehouseShipmentLine);

      // VERIFY : Pick is made for newer lot only
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::Pick);
      WhseActivityLine.SETRANGE("Action Type",WhseActivityLine."Action Type"::Take);
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(0,WhseActivityLine.Quantity,'Although no lot has been asked for, FEFO should assign lot.');
      WhseActivityLine.SETRANGE("Lot No.",OlderLot);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(0,WhseActivityLine.Quantity,'Older lot is already reserved. Should not make a pick.');
      WhseActivityLine.SETRANGE("Lot No.",NewerLot);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(3,WhseActivityLine.Quantity,'FEFO should determine the newer lot for pick.');
    END;

    [Test]
    PROCEDURE WMSPickCreatedForLaterExpiryLotIfFirstExpiryLotIsReservedSecondSalesQtyMore@27();
    VAR
      BinContent@1004 : Record 7302;
      WarehouseShipmentLine@1003 : Record 7321;
      WhseActivityLine@1002 : Record 5767;
      Item@1007 : Record 27;
      Location@1006 : Record 14;
      Bin@1005 : Record 7354;
      OlderLot@1001 : Code[10];
      NewerLot@1000 : Code[10];
    BEGIN
      // Refer to VSTF SICILY 27491
      // SETUP : Create items, inventory and sales order
      CreateItemWithLotTracking(Item);
      CreateWarehousePickLocation(Location);
      Location."Pick According to FEFO" := TRUE;
      Location.INSERT;
      CreateBin(Bin,Location.Code);
      CreateBinContent(BinContent,Location.Code,Bin.Code,Item."No.");

      OlderLot := LibraryUtility.GenerateGUID;
      NewerLot := LibraryUtility.GenerateGUID;

      // Inventory (20 of older, 10 of newer)
      CreateInventoryForLot(BinContent,OlderLot,7,CALCDATE('<1M>',WORKDATE));
      CreateInventoryForLot(BinContent,NewerLot,3,CALCDATE('<2M>',WORKDATE));

      // Create sales of 20 for older lot. Reserve against it.
      CreateSalesShipment(WarehouseShipmentLine,BinContent."Item No.",BinContent."Location Code",3);
      CreateSalesItemTracking(WarehouseShipmentLine."Source No.",OlderLot,3);
      CreateSalesReservationAgainstILE(WarehouseShipmentLine."Source No.",3,OlderLot);

      // Create new sales for 10 PCS- no lot assigned.
      CreateSalesShipment(WarehouseShipmentLine,BinContent."Item No.",BinContent."Location Code",7);

      // EXERCISE : Create the pick
      CreateWarehousePickFromShipment(WarehouseShipmentLine);

      // VERIFY : Pick is made for newer lot only
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Activity Type",WhseActivityLine."Activity Type"::Pick);
      WhseActivityLine.SETRANGE("Action Type",WhseActivityLine."Action Type"::Take);
      WhseActivityLine.SETRANGE("Item No.",BinContent."Item No.");
      WhseActivityLine.SETRANGE("Lot No.",'');
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(0,WhseActivityLine.Quantity,'Although no lot has been asked for, FEFO should assign lot.');
      WhseActivityLine.SETRANGE("Lot No.",OlderLot);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(4,WhseActivityLine.Quantity,'Older lot of 7 has 3 reserved. Rest should appear as per FEFO.');
      WhseActivityLine.SETRANGE("Lot No.",NewerLot);
      WhseActivityLine.CALCSUMS(Quantity);
      Assert.AreEqual(3,WhseActivityLine.Quantity,'FEFO should determine the newer lot for pick.');
    END;

    [Test]
    PROCEDURE UpdateSKULocationWithTransferError@29();
    VAR
      Location1@1001 : Record 14;
      Location2@1002 : Record 14;
      StockkeepingUnit@1004 : Record 5700;
      TransferRoute@1003 : Record 5742;
      Item@1000 : Record 27;
    BEGIN
      // [FEATURE] [Stockkeeping Unit] [Transfer Replenishment]
      // [SCENARIO 127315] Verify error message appears when validating "Location Code" to value from "Transfer-from Code".

      // [GIVEN] Stockkeeping Units with "Location Code" = "X" and "Transfer-from Code" = "Y".
      LibraryWarehouse.CreateLocation(Location1);
      LibraryWarehouse.CreateLocation(Location2);

      Item.INIT;
      Item."No." := LibraryUtility.GenerateGUID;
      Item.INSERT;

      LibraryWarehouse.CreateTransferRoute(TransferRoute,Location2.Code,Location1.Code);
      LibraryInventory.CreateStockkeepingUnitForLocationAndVariant(StockkeepingUnit,Location1.Code,Item."No.",'');
      StockkeepingUnit.VALIDATE("Transfer-from Code",Location2.Code);
      StockkeepingUnit.MODIFY(TRUE);

      // [WHEN] Validate "Location Code" with "Y"
      ASSERTERROR StockkeepingUnit.VALIDATE("Location Code",Location2.Code);

      // [THEN] Error message appears.
      Assert.ExpectedError(TransferRouteErr);
    END;

    [Test]
    PROCEDURE QtyPerUOMIsCopiedToReversedWhseEntryFromOriginalEntry@31();
    VAR
      ItemJournalLine@1001 : Record 83;
      WarehouseEntry@1002 : Record 7312;
      WarehouseJournalLine@1005 : Record 7311;
      WhseUndoQuantity@1003 : Codeunit 7320;
      LocationCode@1000 : Code[10];
      BinCode@1006 : Code[20];
      NextLineNo@1004 : Integer;
    BEGIN
      // [FEATURE] [Warehouse Entry] [UT]
      // [SCENARIO 381994] Function InsertTempWhseJnlLine in codeunit 7320 creates reversed Warehouse Journal Line to Warehouse Entry keeping absolute values of its quantity and base quantity.

      // [GIVEN] WMS Location set up for directed put-away and pick.
      // [GIVEN] Warehouse Entry "WE" with Quantity "Q", Quantity (base) "QB" and Qty. per Unit of Measure "QUOM".
      MockWMSLocation(LocationCode,BinCode);
      MockWhseEntry(WarehouseEntry,LocationCode,BinCode);
      MockItemJnlLine(ItemJournalLine,LocationCode,BinCode);

      // [WHEN] Call InsertTempWhseJnlLine function in codeunit 7320.
      WhseUndoQuantity.InsertTempWhseJnlLine(
        ItemJournalLine,WarehouseEntry."Source Type",WarehouseEntry."Source Subtype",
        WarehouseEntry."Source No.",WarehouseEntry."Source Line No.",0,WarehouseJournalLine,NextLineNo);

      // [THEN] New warehouse journal line has "Qty. per Unit of Measure" = "QUOM".
      // [THEN] Quantity = -"Q".
      // [THEN] Quantity (Base) = -"QB".
      WarehouseJournalLine.TESTFIELD("Qty. per Unit of Measure",WarehouseEntry."Qty. per Unit of Measure");
      WarehouseJournalLine.TESTFIELD(Quantity,-WarehouseEntry.Quantity);
      WarehouseJournalLine.TESTFIELD("Qty. (Base)",-WarehouseEntry."Qty. (Base)");
    END;

    LOCAL PROCEDURE CreateItemWithLotTracking@21(VAR Item@1001 : Record 27);
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      ItemTrackingCode.INIT;
      ItemTrackingCode.Code := LibraryUtility.GenerateGUID;
      ItemTrackingCode."Lot Specific Tracking" := TRUE;
      ItemTrackingCode."Lot Warehouse Tracking" := TRUE;
      ItemTrackingCode.INSERT;

      CLEAR(Item);
      Item."No." := LibraryUtility.GenerateGUID;
      Item."Item Tracking Code" := ItemTrackingCode.Code;
      Item.INSERT;
    END;

    LOCAL PROCEDURE CreateSetupForLotBW@1(VAR BinContent@1004 : Record 7302);
    VAR
      Item@1000 : Record 27;
      Location@1002 : Record 14;
      Bin@1003 : Record 7354;
    BEGIN
      CreateItemWithLotTracking(Item);
      CreateInventoryPickLocation(Location);
      Location.INSERT;
      CreateBin(Bin,Location.Code);
      CreateBinContent(BinContent,Location.Code,Bin.Code,Item."No.");
    END;

    LOCAL PROCEDURE CreateSetupForLotWMS@26(VAR BinContent@1004 : Record 7302);
    VAR
      Item@1000 : Record 27;
      Location@1002 : Record 14;
      Bin@1003 : Record 7354;
    BEGIN
      CreateItemWithLotTracking(Item);
      CreateWarehousePickLocation(Location);
      Location.INSERT;
      CreateBin(Bin,Location.Code);
      CreateBinContent(BinContent,Location.Code,Bin.Code,Item."No.");
    END;

    LOCAL PROCEDURE CreateBasicLocation@18(VAR Location@1000 : Record 14);
    BEGIN
      CLEAR(Location);
      Location.Code := LibraryUtility.GenerateGUID;
      Location."Bin Mandatory" := TRUE;
    END;

    LOCAL PROCEDURE CreateInventoryPickLocation@3(VAR Location@1000 : Record 14);
    BEGIN
      CreateBasicLocation(Location);
      Location."Require Pick" := TRUE;
    END;

    LOCAL PROCEDURE CreateWarehousePickLocation@17(VAR Location@1000 : Record 14);
    BEGIN
      CreateBasicLocation(Location);
      Location."Require Shipment" := TRUE;
      Location."Require Pick" := TRUE;
    END;

    LOCAL PROCEDURE CreateBin@4(VAR Bin@1000 : Record 7354;LocationCode@1001 : Code[10]);
    BEGIN
      CLEAR(Bin);
      Bin."Location Code" := LocationCode;
      Bin.Code := LibraryUtility.GenerateGUID;
      Bin.INSERT;
    END;

    LOCAL PROCEDURE CreateZone@38(LocationCode@1001 : Code[10]) : Code[10];
    VAR
      Zone@1002 : Record 7300;
    BEGIN
      WITH Zone DO BEGIN
        INIT;
        "Location Code" := LocationCode;
        Code := LibraryUtility.GenerateGUID;
        INSERT;
        EXIT(Code);
      END;
    END;

    LOCAL PROCEDURE CreateBinContent@6(VAR BinContent@1000 : Record 7302;LocationCode@1001 : Code[10];BinCode@1002 : Code[20];ItemNo@1003 : Code[20]);
    BEGIN
      CLEAR(BinContent);
      BinContent."Location Code" := LocationCode;
      BinContent."Bin Code" := BinCode;
      BinContent."Item No." := ItemNo;
      BinContent.INSERT;
    END;

    LOCAL PROCEDURE CreateInventoryForLot@9(BinContent@1000 : Record 7302;LotNo@1002 : Code[10];Quantity@1001 : Decimal;ExpirationDate@1007 : Date);
    VAR
      WarehouseEntry@1003 : Record 7312;
      WarehouseEntry2@1004 : Record 7312;
      ItemLedgerEntry@1006 : Record 32;
      ItemLedgerEntry2@1005 : Record 32;
    BEGIN
      WarehouseEntry2.FINDLAST;
      WarehouseEntry.INIT;
      WarehouseEntry."Entry No." := WarehouseEntry2."Entry No." + 1;
      WarehouseEntry."Location Code" := BinContent."Location Code";
      WarehouseEntry."Bin Code" := BinContent."Bin Code";
      WarehouseEntry."Item No." := BinContent."Item No.";
      WarehouseEntry."Lot No." := LotNo;
      WarehouseEntry.Quantity := Quantity;
      WarehouseEntry."Qty. (Base)" := Quantity;
      WarehouseEntry."Expiration Date" := ExpirationDate;
      WarehouseEntry.INSERT;

      ItemLedgerEntry2.FINDLAST;
      ItemLedgerEntry.INIT;
      ItemLedgerEntry."Entry No." := ItemLedgerEntry2."Entry No." + 1;
      ItemLedgerEntry."Item No." := BinContent."Item No.";
      ItemLedgerEntry."Location Code" := BinContent."Location Code";
      ItemLedgerEntry."Lot No." := LotNo;
      ItemLedgerEntry.Quantity := Quantity;
      ItemLedgerEntry.Positive := ItemLedgerEntry.Quantity > 0;
      ItemLedgerEntry."Expiration Date" := ExpirationDate;
      ItemLedgerEntry.Open := TRUE;
      ItemLedgerEntry."Remaining Quantity" := ItemLedgerEntry.Quantity;
      ItemLedgerEntry.INSERT;
    END;

    LOCAL PROCEDURE CreateItemTrackingEntry@41(VAR SalesLine@1002 : Record 37;LotCode@1001 : Code[10];LotQtyToShip@1000 : Decimal);
    VAR
      ReservationEntry@1004 : Record 337;
      ReservationEntry2@1003 : Record 337;
    BEGIN
      IF ReservationEntry2.FINDLAST THEN;
      ReservationEntry.INIT;
      ReservationEntry."Entry No." := ReservationEntry2."Entry No." + 1;
      ReservationEntry.Positive := FALSE;
      ReservationEntry."Source Type" := DATABASE::"Sales Line";
      ReservationEntry."Source Subtype" := SalesLine."Document Type";
      ReservationEntry."Source ID" := SalesLine."Document No.";
      ReservationEntry."Source Ref. No." := SalesLine."Line No.";
      ReservationEntry."Item No." := SalesLine."No.";
      ReservationEntry."Location Code" := SalesLine."Location Code";
      ReservationEntry."Reservation Status" := ReservationEntry."Reservation Status"::Surplus;
      ReservationEntry."Lot No." := LotCode;
      ReservationEntry."Quantity (Base)" := -LotQtyToShip;
      ReservationEntry.Quantity := -LotQtyToShip;
      ReservationEntry."Qty. to Handle (Base)" := -LotQtyToShip;
      ReservationEntry."Shipment Date" := WORKDATE;
      ReservationEntry.INSERT;
    END;

    LOCAL PROCEDURE CreateReservationEntry@10(VAR SalesLine@1002 : Record 37;LotCode@1005 : Code[10];LotQtyToShip@1004 : Decimal;ResvAgainstSourceType@1007 : Integer;ResvAgainstSourceSubtype@1008 : Option;ResvAgainstSourceID@1009 : Code[20];ResvAgainstSourceRefNo@1010 : Integer);
    VAR
      ReservationEntry@1001 : Record 337;
    BEGIN
      CreateItemTrackingEntry(SalesLine,LotCode,LotQtyToShip);
      ReservationEntry.FINDLAST;
      ReservationEntry."Reservation Status" := ReservationEntry."Reservation Status"::Reservation;
      ReservationEntry."Expected Receipt Date" := ReservationEntry."Shipment Date";
      ReservationEntry.MODIFY;

      ReservationEntry.Positive := TRUE;
      ReservationEntry."Source Type" := ResvAgainstSourceType;
      ReservationEntry."Source Subtype" := ResvAgainstSourceSubtype;
      ReservationEntry."Source ID" := ResvAgainstSourceID;
      ReservationEntry."Source Ref. No." := ResvAgainstSourceRefNo;
      ReservationEntry."Quantity (Base)" := LotQtyToShip;
      ReservationEntry.Quantity := LotQtyToShip;
      ReservationEntry."Qty. to Handle (Base)" := LotQtyToShip;
      ReservationEntry."Shipment Date" := ReservationEntry."Expected Receipt Date";
      ReservationEntry."Expected Receipt Date" := ReservationEntry."Shipment Date";
      ReservationEntry.INSERT;
    END;

    LOCAL PROCEDURE CreateSales@12(VAR WarehouseRequest@1007 : Record 5765;ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];QtyToShip@1002 : Decimal);
    VAR
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
    BEGIN
      SalesHeader.INIT;
      SalesHeader."Document Type" := SalesHeader."Document Type"::Order;
      SalesHeader."No." := LibraryUtility.GenerateGUID;
      SalesHeader.INSERT;

      SalesLine."Document Type" := SalesHeader."Document Type";
      SalesLine."Document No." := SalesHeader."No.";
      SalesLine.Type := SalesLine.Type::Item;
      SalesLine."No." := ItemNo;
      SalesLine."Location Code" := LocationCode;
      SalesLine.Quantity := QtyToShip;
      SalesLine."Outstanding Quantity" := QtyToShip;
      SalesLine."Qty. to Ship" := QtyToShip;
      SalesLine."Quantity (Base)" := QtyToShip;
      SalesLine."Outstanding Qty. (Base)" := QtyToShip;
      SalesLine."Qty. to Ship (Base)" := QtyToShip;
      SalesLine.INSERT;

      CLEAR(WarehouseRequest);
      WarehouseRequest.Type := WarehouseRequest.Type::Outbound;
      WarehouseRequest."Location Code" := LocationCode;
      WarehouseRequest."Source Type" := DATABASE::"Sales Line";
      WarehouseRequest."Source Subtype" := SalesLine."Document Type";
      WarehouseRequest."Source No." := SalesLine."Document No.";
      WarehouseRequest."Source Document" := WarehouseRequest."Source Document"::"Sales Order";
      WarehouseRequest.INSERT;
    END;

    LOCAL PROCEDURE FindSalesLine@55(VAR SalesLine@1000 : Record 37;SalesNo@1001 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
      SalesLine.SETRANGE("Document No.",SalesNo);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateSalesItemTracking@54(SalesNo@1002 : Code[20];LotCode@1001 : Code[10];QtyToTrack@1000 : Decimal);
    VAR
      SalesLine@1003 : Record 37;
    BEGIN
      FindSalesLine(SalesLine,SalesNo);
      CreateItemTrackingEntry(SalesLine,LotCode,QtyToTrack);
    END;

    LOCAL PROCEDURE ReduceOrDeleteQtyOnReservationEntry@33(VAR SalesLine@1004 : Record 37;QtyToReserve@1001 : Decimal;LotCode@1000 : Code[10]);
    VAR
      ReservationEntry@1003 : Record 337;
    BEGIN
      // Before creating reservation, reduce the quantity in the Reservation Entries so that a new reservation pair can be made.
      IF LotCode <> '' THEN BEGIN
        ReservationEntry.SETRANGE("Reservation Status",ReservationEntry."Reservation Status"::Surplus);
        ReservationEntry.SETRANGE(Positive,FALSE);
        ReservationEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
        ReservationEntry.SETRANGE("Source Subtype",SalesLine."Document Type"::Order);
        ReservationEntry.SETRANGE("Source ID",SalesLine."Document No.");
        ReservationEntry.SETRANGE("Lot No.",LotCode);
        ReservationEntry.FINDFIRST;
        Assert.IsTrue(ABS(ReservationEntry.Quantity) >= QtyToReserve,'Enough quantity of the lot must be already tracked.');
        ReservationEntry."Quantity (Base)" += QtyToReserve;
        ReservationEntry.Quantity += QtyToReserve;
        ReservationEntry."Qty. to Handle (Base)" += QtyToReserve;
        IF ABS(ReservationEntry."Quantity (Base)") <= 0 THEN
          ReservationEntry.DELETE
        ELSE
          ReservationEntry.MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateSalesReservationAgainstPurchase@14(SalesNo@1005 : Code[20];QtyToReserve@1003 : Decimal;LotCode@1002 : Code[10]);
    VAR
      SalesLine@1000 : Record 37;
      PurchaseLine@1004 : Record 39;
    BEGIN
      FindSalesLine(SalesLine,SalesNo);
      ReduceOrDeleteQtyOnReservationEntry(SalesLine,QtyToReserve,LotCode);

      CreateReservationEntry(SalesLine,LotCode,QtyToReserve,
        DATABASE::"Purchase Line",PurchaseLine."Document Type"::Order,'',0);
    END;

    LOCAL PROCEDURE CreateSalesReservationAgainstILE@25(SalesNo@1005 : Code[20];QtyToReserve@1003 : Decimal;LotCode@1002 : Code[10]);
    VAR
      SalesLine@1000 : Record 37;
      ItemLedgerEntry@1004 : Record 32;
    BEGIN
      FindSalesLine(SalesLine,SalesNo);
      ReduceOrDeleteQtyOnReservationEntry(SalesLine,QtyToReserve,LotCode);

      ItemLedgerEntry.SETRANGE("Lot No.",LotCode);
      ItemLedgerEntry.FINDFIRST;
      CreateReservationEntry(SalesLine,LotCode,QtyToReserve,
        DATABASE::"Item Ledger Entry",0,'',ItemLedgerEntry."Entry No.");
    END;

    LOCAL PROCEDURE CreateSalesShipment@30(VAR WarehouseShipmentLine@1007 : Record 7321;ItemNo@1004 : Code[20];LocationCode@1003 : Code[10];QtyToShip@1002 : Decimal);
    VAR
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseRequest@1005 : Record 5765;
      ShipmentBin@1008 : Record 7354;
    BEGIN
      CreateSales(WarehouseRequest,ItemNo,LocationCode,QtyToShip);

      WarehouseShipmentHeader.INIT;
      WarehouseShipmentHeader."No." := LibraryUtility.GenerateGUID;
      WarehouseShipmentHeader."Location Code" := LocationCode;
      WarehouseShipmentHeader.INSERT;

      WarehouseShipmentLine.INIT;
      WarehouseShipmentLine."No." := WarehouseShipmentHeader."No.";
      WarehouseShipmentLine."Source Type" := WarehouseRequest."Source Type";
      WarehouseShipmentLine."Source Subtype" := WarehouseRequest."Source Subtype";
      WarehouseShipmentLine."Source No." := WarehouseRequest."Source No.";
      WarehouseShipmentLine."Source Document" := WarehouseRequest."Source Document";
      WarehouseShipmentLine."Location Code" := LocationCode;
      CreateBin(ShipmentBin,LocationCode);
      WarehouseShipmentLine."Bin Code" := ShipmentBin.Code;
      WarehouseShipmentLine."Item No." := ItemNo;
      WarehouseShipmentLine.Quantity := QtyToShip;
      WarehouseShipmentLine."Qty. (Base)" := QtyToShip;
      WarehouseShipmentLine."Qty. Outstanding" := QtyToShip;
      WarehouseShipmentLine."Qty. Outstanding (Base)" := QtyToShip;
      WarehouseShipmentLine.INSERT;
    END;

    LOCAL PROCEDURE CreateInventoryPickFromWarehouseRequest@77(WarehouseRequest@1000 : Record 5765);
    VAR
      WhseActivityHeader@1001 : Record 5766;
      CreateInventoryPickMovement@1002 : Codeunit 7322;
    BEGIN
      WhseActivityHeader.Type := WhseActivityHeader.Type::"Invt. Pick";
      WhseActivityHeader."Location Code" := WarehouseRequest."Location Code";

      CreateInventoryPickMovement.SetWhseRequest(WarehouseRequest,TRUE);
      CreateInventoryPickMovement.CheckSourceDoc(WarehouseRequest);
      CreateInventoryPickMovement.AutoCreatePickOrMove(WhseActivityHeader);
    END;

    LOCAL PROCEDURE CreateWarehousePickFromShipment@51(WarehouseShipmentLine@1000 : Record 7321) WhsePickNo : Code[20];
    VAR
      WhseWkshLine@1002 : Record 7326;
      ItemTrackingMgt@1001 : Codeunit 6500;
      CreatePick@1003 : Codeunit 7312;
      FirstWhseDocNo@1005 : Code[20];
    BEGIN
      WITH WarehouseShipmentLine DO BEGIN
        ItemTrackingMgt.InitItemTrkgForTempWkshLine(
          WhseWkshLine."Whse. Document Type"::Shipment,"No.","Line No.",
          "Source Type","Source Subtype","Source No.","Source Line No.",0);
        CreatePick.SetValues('',1,0,1,0,0,FALSE,FALSE,FALSE,FALSE);
        CreatePick.SetWhseShipment(WarehouseShipmentLine,1,'','','');
        CreatePick.SetTempWhseItemTrkgLine("No.",DATABASE::"Warehouse Shipment Line",'',0,"Line No.","Location Code");
        CreatePick.CreateTempLine("Location Code","Item No.",'','','',"Bin Code",1,Quantity,"Qty. (Base)");
        CreatePick.CreateWhseDocument(FirstWhseDocNo,WhsePickNo,TRUE);
      END;
    END;

    LOCAL PROCEDURE MockWMSLocation@37(VAR LocationCode@1003 : Code[10];VAR BinCode@1004 : Code[20]);
    VAR
      Location@1002 : Record 14;
      Bin@1000 : Record 7354;
      ZoneCode@1001 : Code[10];
    BEGIN
      CreateBasicLocation(Location);
      ZoneCode := CreateZone(Location.Code);
      CreateBin(Bin,Location.Code);
      Bin."Zone Code" := ZoneCode;
      Bin.MODIFY;

      Location."Directed Put-away and Pick" := TRUE;
      Location."Adjustment Bin Code" := Bin.Code;
      Location.INSERT;

      LocationCode := Location.Code;
      BinCode := Bin.Code;
    END;

    LOCAL PROCEDURE MockItemJnlLine@44(VAR ItemJournalLine@1001 : Record 83;LocationCode@1000 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      WITH ItemJournalLine DO BEGIN
        INIT;
        "Location Code" := LocationCode;
        "Bin Code" := BinCode;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockWhseEntry@32(VAR WarehouseEntry@1000 : Record 7312;LocationCode@1001 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      WITH WarehouseEntry DO BEGIN
        INIT;
        "Entry No." := LibraryUtility.GetNewRecNo(WarehouseEntry,FIELDNO("Entry No."));
        "Entry Type" := "Entry Type"::"Negative Adjmt.";
        "Source Type" := DATABASE::"Sales Line";
        "Source Subtype" := 1;
        "Location Code" := LocationCode;
        "Bin Code" := BinCode;
        Quantity := -LibraryRandom.RandInt(10);
        "Qty. per Unit of Measure" := LibraryRandom.RandIntInRange(2,5);
        "Qty. (Base)" := Quantity * "Qty. per Unit of Measure";
        INSERT;
      END;
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [SCM]
    }
    END.
  }
}

