OBJECT Codeunit 144055 e-TDS
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GLSetup@1500010 : Record 98;
      IncomeTaxAccountingPeriod@1500012 : Record 13724;
      IncomeTaxPeriodSetup@1500013 : Record 16501;
      NODNOCHeader@1500014 : Record 13786;
      TDSNatureDeduction@1500015 : Record 13726;
      TDSSetup@1500016 : Record 13728;
      CompanyInformation@1500021 : Record 79;
      LibraryRandom@1500000 : Codeunit 130440;
      LibraryERM@1500001 : Codeunit 131300;
      LibraryPurchase@1500002 : Codeunit 130512;
      LibraryTDS@1500003 : Codeunit 143000;
      LibraryVariableStorage@1500008 : Codeunit 131004;
      LibraryUtility@1500019 : Codeunit 131000;
      Assert@1500004 : Codeunit 130000;
      AmountErr@1500005 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=%1 is incorrect in %2.';
      CreditAmountErr@1500007 : TextConst '@@@="%1 and %2 = Amount and Amount";ENU=The expected value is %1 and the actual value is %2.';
      ExpectedPayTDSErr@1500009 : TextConst '@@@="%1 = Text";ENU=There are no TDS entries for Account No. %1.';
      LibrarySetupStorage@1500017 : Codeunit 131009;
      ServiceTaxWithTDSHelper@1500022 : Codeunit 143005;
      GeneralJournalTemplateName@1500006 : Code[10];
      isInitialized@1500011 : Boolean;
      PrintCheckErr@1500018 : TextConst 'ENU=Void the check as tds amount has to be recalculated';
      GenerateETDSErr@1500024 : TextConst 'ENU=You must print Form 26Q before you generate the e-TDS statement.';

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler)]
    PROCEDURE VerifyPayTDSError@1500000();
    VAR
      GenJnlLine@1500000 : Record 81;
      GenJnlTemplate@1500006 : Record 80;
      BankPaymentVoucherPage@1500007 : TestPage 16577;
    BEGIN
      // [SCENARIO 64568] Check if the program is calculating TDS payment to Government Authorities currently in Bank Payment Voucher
      // [FEATURE] [TDS] [BANK PAYMENT VOUCHER]

      // [GIVEN] Created TDS Setup
      Initialize;

      // [WHEN] Create Bank Payment Voucher line, Invoke Pay TDS action
      CreateBankPaymentLineForPayTDS(
        GenJnlLine,GenJnlTemplate."Sub Type"::"Bank Payment Voucher",GenJnlLine."Document Type"::Payment,
        LibraryERM.CreateGLAccountNo,LibraryTDS.CreateTANNo);
      COMMIT;
      GeneralJournalTemplateName := GenJnlLine."Journal Template Name";
      BankPaymentVoucherPage.OPENEDIT;
      BankPaymentVoucherPage.CurrentJnlBatchName.SETVALUE(GenJnlLine."Journal Batch Name");
      ASSERTERROR BankPaymentVoucherPage.TDS.INVOKE;

      // [THEN] Error that TDS Entries do not exist is thrown
      Assert.ExpectedError(STRSUBSTNO(ExpectedPayTDSErr,GenJnlLine."Account No."));
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler)]
    PROCEDURE VerifyPayTDSAmountInInvoiceAndPayment@1500006();
    VAR
      GenJnlTemplate@1500006 : Record 80;
      GenJnlLineInv@1500000 : Record 81;
      GenJnlLinePaymnt@1500003 : Record 81;
      GenJnlLinePayTDS@1500012 : Record 81;
      ExpectedTDSEntry@1500002 : Record 13729;
      TDSAccount@1500004 : Code[20];
    BEGIN
      // [SCENARIO 64568] Check if the program is calculating TDS payment to Government Authorities currently in Bank Payment Voucher
      // [FEATURE] [TDS] [GENERAL JOURNAL/BANK PAYMENT VOUCHER]

      // [GIVEN] Created TDS Setup
      Initialize;
      TDSAccount := UpdateTDSAccNo(TDSSetup);

      // [WHEN] Create and Post Invoice Document using General Journal, Create Payment Document and get amount for Pay TDS action
      CreateJournalDocs(
        GenJnlLineInv,NODNOCHeader."No.",TDSNatureDeduction.Code,GenJnlLineInv."Bal. Account Type"::"G/L Account",
        GenJnlTemplate."Sub Type"::" ",GenJnlLineInv."Document Type"::Invoice);
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,-GenJnlLineInv.Amount);
      LibraryERM.PostGeneralJnlLine(GenJnlLineInv);
      CreateBankPaymentLineForPayTDS(
        GenJnlLinePaymnt,GenJnlTemplate."Sub Type"::"Bank Payment Voucher",GenJnlLinePaymnt."Document Type"::Payment,
        TDSAccount,GenJnlLineInv."T.A.N. No.");
      GeneralJournalTemplateName := GenJnlLinePaymnt."Journal Template Name";
      GetBankPaymentVoucherAmountAfterPayTDS(GenJnlLinePaymnt."Journal Batch Name");

      // [THEN] TDS Entry has been created and Amount populated after invoking PAY TDS action in Bank Payment Voucher
      GenJnlLinePayTDS.SETRANGE("Document No.",GenJnlLinePaymnt."Document No.");
      GenJnlLinePayTDS.FINDFIRST;
      VerifyTDSEntry(ExpectedTDSEntry,GenJnlLineInv."Document No.",GenJnlLineInv."Document Type",FALSE);
      Assert.AreNearlyEqual(ExpectedTDSEntry."Total TDS Including SHE CESS",GenJnlLinePayTDS.Amount,
        GLSetup."TDS Rounding Precision",AmountErr);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseInvItem@1500019();
    VAR
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500002 : Record 39;
      ExpectedPurchaseLine@1500001 : Record 39;
      Amount@1500004 : Decimal;
    BEGIN
      // [SCENARIO 64540] Calculating TDS related amount successfully in case of filling in rounded figure: Purchase Invoice with Item line
      // [FEATURE] [TDS] [PURCHASE INVOICE]

      // [GIVEN] Created TDS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create Purchase Invoice with Item
      CreatePurchaseDoc(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",PurchaseLine.Type::Item,Amount,
        TDSNatureDeduction.Code);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmounts(ExpectedPurchaseLine,PurchaseLine.Amount,TDSSetup);

      // [THEN] TDS amounts has been calculated
      VerifyTDSAmountsPurchaseDoc(ExpectedPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseInvGLAcc@1500034();
    VAR
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500002 : Record 39;
      ExpectedPurchaseLine@1500001 : Record 39;
      Amount@1500004 : Decimal;
    BEGIN
      // [SCENARIO 64540] Calculating TDS related amount successfully in case of filling in rounded figure: Purchase Invoice with G/L Account line
      // [FEATURE] [TDS] [PURCHASE INVOICE]

      // [GIVEN] Created TDS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create Purchase Invoice with G/L Account
      CreatePurchaseDoc(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",PurchaseLine.Type::"G/L Account",Amount,
        TDSNatureDeduction.Code);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmounts(ExpectedPurchaseLine,PurchaseLine.Amount,TDSSetup);

      // [THEN] TDS amounts has been calculated
      VerifyTDSAmountsPurchaseDoc(ExpectedPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseInvFixedAsset@1500014();
    VAR
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500002 : Record 39;
      ExpectedPurchaseLine@1500001 : Record 39;
      Amount@1500004 : Decimal;
    BEGIN
      // [SCENARIO 64540] Calculating TDS related amount successfully in case of filling in rounded figure: Purchase Invoice with Fixed Asset line
      // [FEATURE] [TDS] [PURCHASE INVOICE]

      // [GIVEN] Created TDS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create Purchase Invoice with Fixed Asset
      CreatePurchaseDoc(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",PurchaseLine.Type::"Fixed Asset",Amount,
        TDSNatureDeduction.Code);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmounts(ExpectedPurchaseLine,PurchaseLine.Amount,TDSSetup);

      // [THEN] TDS Amounts has been calculated
      VerifyTDSAmountsPurchaseDoc(ExpectedPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountPurchaseInvChargeItem@1500018();
    VAR
      PurchaseHeader@1500003 : Record 38;
      PurchaseLine@1500002 : Record 39;
      ExpectedPurchaseLine@1500001 : Record 39;
      Amount@1500004 : Decimal;
    BEGIN
      // [SCENARIO 64540] Calculating TDS related amount successfully in case of filling in rounded figure: Purchase Invoice with Charge(Item) line
      // [FEATURE] [TDS] [PURCHASE INVOICE]

      // [GIVEN] Created TDS Setup
      Initialize;
      Amount := LibraryRandom.RandDec(1000,2);

      // [WHEN] Create Purchase Invoice with Charge(Item)
      CreatePurchaseDoc(
        PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Invoice,NODNOCHeader."No.",PurchaseLine.Type::"Charge (Item)",
        Amount,TDSNatureDeduction.Code);
      PurchaseLine.CalculateTDS(PurchaseHeader);
      CalcExpectedTDSAmounts(ExpectedPurchaseLine,PurchaseLine.Amount,TDSSetup);

      // [THEN] TDS Amounts vhas been calculated
      VerifyTDSAmountsPurchaseDoc(ExpectedPurchaseLine,PurchaseLine,FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountSameNODDiffEffectiveDatesGenJnl@1500009();
    VAR
      AssesseeCode@1500007 : Record 13727;
      TDSNatureDeduction@1500006 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      ExpectedJnlLine1@1500002 : Record 81;
      ExpectedJnlLine2@1500004 : Record 81;
      TDSSetup1@1500001 : Record 13728;
      TDSSetup2@1500009 : Record 13728;
      GenJnlLine1@1500008 : Record 81;
      GenJnlLine2@1500003 : Record 81;
      GenJnlTemplate@1500010 : Record 80;
      Amount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 64541] Calculating TDS related amount successfully with different rates for same NOD with different effective dates
      // [FEATURE] [TDS] [GENERAL JOURNAL]

      // [GIVEN] Created two TDS Setup with different effective dates and values
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      Amount := LibraryRandom.RandDec(1000,2);
      CreateTDSNatureDeduction(TDSNatureDeduction);
      CreateTDSSetUpWithDiffEffectiveDates(TDSSetup1,TDSNatureDeduction.Code,AssesseeCode.Code,'',WORKDATE);
      CreateTDSSetUpWithDiffEffectiveDates(TDSSetup2,TDSNatureDeduction.Code,AssesseeCode.Code,'',CALCDATE('<+1D>',WORKDATE));
      CreateNODNOCSetup(
        NODNOCHeader,NODNOCHeader.Type::Vendor,ServiceTaxWithTDSHelper.CreateVendorWithPANNo,AssesseeCode.Code,'',
        TDSNatureDeduction.Code,TRUE,TRUE);

      // [WHEN] Create two lines in Gen. Jnl. with different Posting Dates
      CreateMultipleJnlLinesWithTDSAndDiffPostingDates(
        GenJnlLine1,GenJnlLine2,GenJnlTemplate.Type::General,NODNOCHeader."No.",TDSNatureDeduction.Code,Amount);
      CalcExpectedTDSAmountsJournalLine(ExpectedJnlLine1,GenJnlLine1.Amount,TDSSetup1);
      CalcExpectedTDSAmountsJournalLine(ExpectedJnlLine2,GenJnlLine2.Amount,TDSSetup2);

      // [THEN] TDS Amounts has been calculated
      VerifyTDSAmountsJnlDoc(ExpectedJnlLine1,GenJnlLine1."Document Type",GenJnlLine1."Document No.",FALSE);
      VerifyTDSAmountsJnlDoc(ExpectedJnlLine2,GenJnlLine2."Document Type",GenJnlLine2."Document No.",FALSE);
    END;

    [Test]
    PROCEDURE VerifyTDSAmountSameNODDiffEffectiveDatesPurchJnl@1500016();
    VAR
      AssesseeCode@1500007 : Record 13727;
      TDSNatureDeduction@1500006 : Record 13726;
      NODNOCHeader@1500005 : Record 13786;
      ExpectedJnlLine1@1500002 : Record 81;
      ExpectedJnlLine2@1500004 : Record 81;
      TDSSetup1@1500001 : Record 13728;
      TDSSetup2@1500009 : Record 13728;
      GenJnlLine1@1500008 : Record 81;
      GenJnlLine2@1500003 : Record 81;
      GenJnlTemplate@1500010 : Record 80;
      Amount@1500000 : Decimal;
    BEGIN
      // [SCENARIO 64541] Calculating TDS related amount successfully with different rates for same NOD with different effective dates
      // [FEATURE] [TDS] [PURCHASE JOURNAL]

      // [GIVEN] Created two TDS Setup with different effective dates and values
      CreateIncomeTaxAccountingPeriod;
      LibraryERM.CreateAssesseeCode(AssesseeCode);
      Amount := LibraryRandom.RandDec(1000,2);
      CreateTDSNatureDeduction(TDSNatureDeduction);
      CreateTDSSetUpWithDiffEffectiveDates(TDSSetup1,TDSNatureDeduction.Code,AssesseeCode.Code,'',WORKDATE);
      CreateTDSSetUpWithDiffEffectiveDates(TDSSetup2,TDSNatureDeduction.Code,AssesseeCode.Code,'',CALCDATE('<+1D>',WORKDATE));
      CreateNODNOCSetup(
        NODNOCHeader,NODNOCHeader.Type::Vendor,ServiceTaxWithTDSHelper.CreateVendorWithPANNo,AssesseeCode.Code,'',
        TDSNatureDeduction.Code,TRUE,TRUE);

      // [WHEN] Create two lines in Gen. Jnl. with different Posting Dates
      CreateMultipleJnlLinesWithTDSAndDiffPostingDates(
        GenJnlLine1,GenJnlLine2,GenJnlTemplate.Type::Purchases,NODNOCHeader."No.",TDSNatureDeduction.Code,Amount);
      CalcExpectedTDSAmountsJournalLine(ExpectedJnlLine1,GenJnlLine1.Amount,TDSSetup1);
      CalcExpectedTDSAmountsJournalLine(ExpectedJnlLine2,GenJnlLine2.Amount,TDSSetup2);

      // [THEN] TDS Amounts has been calculated
      VerifyTDSAmountsJnlDoc(ExpectedJnlLine1,GenJnlLine1."Document Type",GenJnlLine1."Document No.",FALSE);
      VerifyTDSAmountsJnlDoc(ExpectedJnlLine2,GenJnlLine2."Document Type",GenJnlLine2."Document No.",FALSE);
    END;

    [Test]
    [HandlerFunctions(VoidCheckPageHandler)]
    PROCEDURE VerifyTDSEntryTransNoVoidingCheckLedgerEntry@1500008();
    VAR
      GenJnlTemplate@1500003 : Record 80;
      GenJnlLine@1500001 : Record 81;
      GLEntry@1500002 : Record 17;
      ExpectedTDSEntries@1500004 : Record 13729;
      PostedDocNo@1500000 : Code[20];
    BEGIN
      // [SCENARIO 65483] Verify the program populates Transaction No in TDS Entry after voiding the Check Ledger Entry
      // [FEATURE] [TDS] [BANK PAYMENT VOUCHER]

      // [GIVEN] Created TDS Setup
      Initialize;

      // [WHEN] Create and Post Bank Payment Voucher Line, Void Check from Check Ledger Entry with Void Check only option and calculate Expected TDS Amounts after voiding check
      PostedDocNo :=
        CreateAndPostJnlLineWithCheckDetails(GenJnlTemplate,GenJnlLine,TDSSetup,NODNOCHeader."No.",TDSNatureDeduction.Code);
      VoidCheck(PostedDocNo);
      CalcTDSAmountsFromBase(ExpectedTDSEntries,TDSSetup,-GenJnlLine.Amount);

      // [THEN] GL and TDS Entries has been created after voiding Check
      GLEntry.SETRANGE("Document No.",PostedDocNo);
      GLEntry.FINDFIRST;
      VerifyGLEntry(GLEntry."Document Type"::Payment,PostedDocNo,GenJnlLine.Amount);
      VerifyTDSEntry(ExpectedTDSEntries,PostedDocNo,GLEntry."Document Type",FALSE);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,CheckRequstPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE MultipleBankPaymentLinesWithTDSAndCheckPrint@1500001();
    VAR
      GenJnlLine@1500003 : Record 81;
      TDSEntry@1500005 : Record 13729;
      BatchName@1500000 : Code[10];
    BEGIN
      // [SCENARIO 64288] Verify TDS entry when transaction is entered in multiple batch and also consider threshold limit & check printing.
      // [FEATURE] [TDS] [BANK PAYMENT VOUCHER]

      // [GIVEN] Created TDS Setup
      Initialize;
      UpdateThresholdAmount(TDSSetup,LibraryRandom.RandDecInRange(50000,60000,2));
      UpdateNODNOCLines(NODNOCHeader."No.",'',FALSE,FALSE);

      // [WHEN] Step 1: Create Template, Multiple Batch and Bank Payment Voucher Lines
      BatchName := CreateBankPaymentVoucherMultipleBatch(GenJnlLine);
      // Step 2: Preview and Print Check with lines in multiple batches
      PreviewAndPrintCheckMultipleBatchTDS(GenJnlLine);
      // Step 3 : Delete lines for one batch and Perview and Print for another Batch
      DeleteBankPaymentVoucher(GenJnlLine."Journal Template Name",BatchName);
      PreviewAndPrintCheckSingleBatchTDS(GenJnlLine);

      // [THEN] GL Entries has been created
      VerifyGLEntry(GenJnlLine."Document Type"::Payment,GenJnlLine."Document No.",GenJnlLine.Amount);
      TDSEntry.SETRANGE("Document No.",GenJnlLine."Document No.");
      TDSEntry.FINDFIRST;
      TDSEntry.TESTFIELD("Total TDS Including SHE CESS",0);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,GeneralJournalTemplateHandler)]
    PROCEDURE TDSAdjustmentWithDiffBuyFromPayToVendor@1500004();
    VAR
      NODHeader@1500000 : Record 13786;
      GenJnlLine@1500004 : Record 81;
      PurchaseHeader@1500002 : Record 38;
      ExpectedTDSEntry@1500006 : Record 13729;
      TDSAdjJnlDocNo@1500010 : Code[20];
      PostedDocNo@1500005 : Code[20];
      TDSAccount@1500001 : Code[20];
      Amount@1500003 : Decimal;
      DocType@1500007 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
    BEGIN
      // [SCENARIO 64565] Check if the program is adjusting TDS entries correctly in TDS Adjustment Journal window when post a purchase order with the different vendor for Buy-from Vendor and Pay-to Vendor
      // [FEATURE] [TDS] [PURCHASE ORDER]

      // [GIVEN] Created TDS Setup
      Initialize;
      CreateIncomeTaxAccountingPeriod;
      Amount := LibraryRandom.RandDec(10000,2);
      CreateNODNOCSetup(
        NODHeader,NODHeader.Type::Vendor,ServiceTaxWithTDSHelper.CreateVendorWithPANNo,NODNOCHeader."Assesse Code",'',
        TDSNatureDeduction.Code,TRUE,TRUE);
      TDSAccount := UpdateTDSAccNo(TDSSetup);

      // [WHEN] Step 1: Create and Post Purchase Order
      PostedDocNo := CreateAndPostPurchaseDocWithPayToVendor(PurchaseHeader,ExpectedTDSEntry,NODHeader."No.",Amount);
      VerifyGLEntry(DocType::Invoice,PostedDocNo,Amount);
      VerifyTDSEntry(ExpectedTDSEntry,PostedDocNo,PurchaseHeader."Document Type"::Invoice,FALSE);
      // Step 2: Create and Post TDS Adjustment Journal
      CreateAndPostTDSAdjustmentJournal(TDSAdjJnlDocNo,NODHeader."No.");
      // Step 3: Invoke PAY TDS in Payment Journal
      PayTDS(GenJnlLine,TDSAccount);

      // [THEN] Payment Amount is populated with adjusted TDS Amount
      VerifyTDSAdjustmentEntry(PostedDocNo,GenJnlLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler)]
    PROCEDURE UpdateTDSAndChallanRegister@1500005();
    VAR
      ChallanRegister@1500001 : Record 16504;
      GenJnlLinePayment@1500003 : Record 81;
      ExpectedTDSAmount@1500002 : Decimal;
      PostedDocNo@1500006 : Code[20];
      ChallanNo@1500007 : Code[20];
      DocType@1500000 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
    BEGIN
      // [SCENARIO 64569] Check if system is updating TDS Register details for a specific TDS Document number and updating Challan Register(Interest Amount)
      // [FEATURE] [TDS] [GENERAL JOURNAL/BANK PAYMENT VOUCHER]

      // [GIVEN] Created TDS Setup
      Initialize;
      UpdateNODNOCLines(NODNOCHeader."No.",'',TRUE,TRUE);

      // [WHEN] Create and Post Invoice With Bank Payment document using PAY TDS, Update TDS and Challan Register
      PostedDocNo := CreateAndPostGenJnlLineInvWithPaymentByPayTDS(GenJnlLinePayment);
      ChallanNo := UpdateChallanDetails(PostedDocNo,GenJnlLinePayment."Document No.",DocType::Invoice);
      RunUpdateChallanRegister(ChallanNo,LibraryRandom.RandDec(1000,2));
      ExpectedTDSAmount := LibraryRandom.RandDec(2000,2);
      RunUpdateChallanRegister(ChallanNo,ExpectedTDSAmount);

      // [THEN] Challan Register updated and verified
      ChallanRegister.SETRANGE("Challan No.",ChallanNo);
      ChallanRegister.FINDFIRST;
      Assert.AreNearlyEqual(ExpectedTDSAmount,ChallanRegister."TDS Interest Amount",GLSetup."TDS Rounding Precision",
        AmountErr);
    END;

    [Test]
    [HandlerFunctions(GeneralJournalTemplateHandler,GenerateETDSRequestPageHandler)]
    PROCEDURE ETDSGenerationErrorBeforeForm26QPreview@1500015();
    VAR
      GenJnlLinePayment@1500001 : Record 81;
      PostedDocNo@1500000 : Code[20];
      ChallanNo@1500002 : Code[20];
      DocType@1500003 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
    BEGIN
      // [SCENARIO 164292] Check if the program is generating e-TDS before generating Form 26Q
      // [FEATURE] [TDS TRANSACTION]

      // [GIVEN] Created TDS Setup
      Initialize;

      // [WHEN] Create and Post Payment against Invoice using PAY TDS, Update TDS and Challan Register,Generate ETDS before previewing Form 26Q
      PostedDocNo := CreateAndPostGenJnlLineInvWithPaymentByPayTDS(GenJnlLinePayment);
      ChallanNo := UpdateChallanDetails(PostedDocNo,GenJnlLinePayment."Document No.",DocType::Invoice);
      RunUpdateChallanRegister(ChallanNo,LibraryRandom.RandDec(1000,2));
      ASSERTERROR GenerateETDS(TRUE);

      // [THEN] Error for previewing Form 26Q before generating ETDS has been thrown
      Assert.ExpectedError(GenerateETDSErr);
    END;

    LOCAL PROCEDURE Initialize@123();
    BEGIN
      LibrarySetupStorage.Restore;
      IF isInitialized THEN
        EXIT;

      GLSetup.GET;
      CompanyInformation.GET;
      CreateDeductoryCodeAndUpdateOnCompanyInformation;
      LibraryTDS.CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriod."No.",1);
      LibraryTDS.CreateAssesseeandNODNOCSetup(
        NODNOCHeader,TDSNatureDeduction,TDSSetup,'',ServiceTaxWithTDSHelper.CreateVendorWithPANNo,NODNOCHeader.Type::Vendor,
        IncomeTaxAccountingPeriod."Starting Date");
      isInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"Company Information");
    END;

    LOCAL PROCEDURE CreateNODNOCSetup@8(VAR NODNOCHeader@1040 : Record 13786;Type@1041 : Option;No@1042 : Code[20];AssesseeCode@1043 : Code[10];ConcessionCode@1500000 : Code[10];CodeContractor@1044 : Code[10];ThresholdOverlook@1500001 : Boolean;SurchargeOverlook@1500002 : Boolean);
    VAR
      NODNOCLines@1046 : Record 13785;
    BEGIN
      LibraryERM.CreateNODNOCHeader(NODNOCHeader,Type,No);
      NODNOCHeader.VALIDATE("Assesse Code",AssesseeCode);
      NODNOCHeader.MODIFY(TRUE);
      LibraryERM.CreateNODNOCLines(NODNOCLines,NODNOCHeader,CodeContractor);
      UpdateNODNOCLines(NODNOCHeader."No.",ConcessionCode,ThresholdOverlook,SurchargeOverlook);
    END;

    LOCAL PROCEDURE CreatePurchaseDoc@9(VAR PurchaseHeader@1047 : Record 38;VAR PurchaseLine@1500000 : Record 39;DocumentType@1500001 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';VendorNo@1048 : Code[20];LineType@1049 : Option;Amount@1050 : Decimal;CodeContractor@1051 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      PurchaseHeader.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      PurchaseHeader.VALIDATE("Location Code",'');
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,LineType,'',1);
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseDocWithPayToVendor@1500020(VAR PurchaseHeader@1047 : Record 38;VAR PurchaseLine@1500000 : Record 39;VendorNo@1048 : Code[20];PayToVendor@1500002 : Code[20];Amount@1050 : Decimal;CodeContractor@1051 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      PurchaseHeader.VALIDATE("Pay-to Vendor No.",PayToVendor);
      PurchaseHeader.VALIDATE("Location Code",'');
      PurchaseHeader.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,'',1);
      PurchaseLine.VALIDATE("Direct Unit Cost",Amount);
      PurchaseLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocWithPayToVendor@1500056(VAR PurchaseHdr@1500006 : Record 38;VAR ExpectedTDSEntry@1500002 : Record 13729;PayToVendorNo@1500003 : Code[20];Amount@1500004 : Decimal) : Code[20];
    VAR
      PurchaseLine@1500001 : Record 39;
      DocumentNo@1500005 : Code[20];
    BEGIN
      CreatePurchaseDocWithPayToVendor(PurchaseHdr,PurchaseLine,NODNOCHeader."No.",PayToVendorNo,Amount,TDSNatureDeduction.Code);
      PurchaseLine.CalculateTDS(PurchaseHdr);
      CalcTDSAmountsFromBase(ExpectedTDSEntry,TDSSetup,Amount);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHdr,TRUE,TRUE);
      EXIT(DocumentNo);
    END;

    LOCAL PROCEDURE CalcExpectedTDSAmounts@1500017(VAR ExpectedPurchaseLine@1500000 : Record 39;TDSBaseAmt@1500001 : Decimal;TDSSetup@1500005 : Record 13728);
    BEGIN
      WITH ExpectedPurchaseLine DO BEGIN
        "TDS %" := TDSSetup."TDS %";
        "Surcharge %" := TDSSetup."Surcharge %";
        "eCESS % on TDS" := TDSSetup."eCESS %";
        "SHE Cess % On TDS" := TDSSetup."SHE Cess %";
        "TDS Base Amount" := TDSBaseAmt;
        "TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."TDS %" / 100 * "TDS Base Amount"));
        "Surcharge Amount" := LibraryTDS.RoundTDS((TDSSetup."Surcharge %" / 100 * "TDS Amount"));
        "eCESS on TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount")));
        "SHE Cess on TDS Amount" := LibraryTDS.RoundTDS((TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount")));
        "Total TDS Including SHE CESS" :=
          LibraryTDS.RoundTDS("TDS Amount" + "eCESS on TDS Amount" + "SHE Cess on TDS Amount" + "Surcharge Amount");
      END;
    END;

    LOCAL PROCEDURE CreateIncomeTaxAccountingPeriod@25();
    VAR
      IncomeTaxAccountingPeriod@1000 : Record 13724;
    BEGIN
      LibraryERM.CreateIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      IncomeTaxAccountingPeriod.VALIDATE("Starting Date",WORKDATE);
      IncomeTaxAccountingPeriod.VALIDATE("Ending Date",CALCDATE('<CQ>',IncomeTaxAccountingPeriod."Starting Date"));
      IncomeTaxAccountingPeriod.MODIFY(TRUE);
      CreateIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."No.");
    END;

    LOCAL PROCEDURE CreateDeductoryCodeAndUpdateOnCompanyInformation@19();
    VAR
      DeductorCategory@1000 : Record 16498;
    BEGIN
      CompanyInformation.GET;
      LibraryERM.CreateDeductorCategory(DeductorCategory);
      CompanyInformation.VALIDATE("Deductor Category",DeductorCategory.Code);
      CompanyInformation.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTDSNatureDeduction@1500007(VAR TDSNatureDeduction@1055 : Record 13726);
    BEGIN
      LibraryERM.CreateTDSNatureDeduction(TDSNatureDeduction);
      TDSNatureDeduction.VALIDATE("TDS Group",TDSNatureDeduction."TDS Group"::Contractor);
      TDSNatureDeduction.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTDSSetUpWithDiffEffectiveDates@1500010(VAR TDSSetup@1060 : Record 13728;TDSNatureDeductionCode@1061 : Code[10];AssesseeCode@1062 : Code[10];ConcessionCode@1500000 : Code[10];EffectiveDate@1500001 : Date);
    BEGIN
      LibraryERM.CreateTDSSetup(TDSSetup,TDSNatureDeductionCode,AssesseeCode,EffectiveDate,ConcessionCode);
      TDSSetup.VALIDATE("TDS %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("Non PAN TDS %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("Surcharge %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("eCESS %",LibraryRandom.RandInt(5));
      TDSSetup.VALIDATE("SHE Cess %",LibraryRandom.RandInt(5));
      TDSSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateMultipleJnlLinesWithTDSAndDiffPostingDates@1500013(VAR GeneralJnlLine1@1500006 : Record 81;VAR GeneralJnlLine2@1500007 : Record 81;GenJnlTemplateType@1500008 : Option;VendorNo@1500003 : Code[20];NODCode@1500005 : Code[10];Amount@1500004 : Decimal);
    VAR
      GenJnlTemplate@1500000 : Record 80;
      GenJournalBatch@1500001 : Record 232;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJnlTemplate);
      GenJnlTemplate.VALIDATE(Type,GenJnlTemplateType);
      GenJnlTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJnlTemplate.Name);
      CreateJnlLinesWithTDSAndDiffPostingDates(
        GeneralJnlLine1,GeneralJnlLine1."Document Type"::Invoice,GenJournalBatch,VendorNo,Amount,NODCode,WORKDATE);
      CreateJnlLinesWithTDSAndDiffPostingDates(
        GeneralJnlLine2,GeneralJnlLine2."Document Type"::Invoice,GenJournalBatch,VendorNo,Amount,NODCode,CALCDATE('<+1D>',WORKDATE));
    END;

    LOCAL PROCEDURE CreateJnlLinesWithTDSAndDiffPostingDates@1500027(VAR GenJournalLine@1003 : Record 81;DocumentType@1500003 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';GenJournalBatch@1500004 : Record 232;VendorNo@1500002 : Code[20];Amount@1500001 : Decimal;CodeContractor@1500000 : Code[10];EffectiveDate@1500005 : Date);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.VALIDATE("Posting Date",EffectiveDate);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcExpectedTDSAmountsJournalLine@1500022(VAR ExpectedJnlLines@1500000 : Record 81;TDSBaseAmt@1500001 : Decimal;TDSSetup@1500005 : Record 13728);
    BEGIN
      WITH ExpectedJnlLines DO BEGIN
        "TDS/TCS %" := TDSSetup."TDS %";
        "Surcharge %" := TDSSetup."Surcharge %";
        "eCESS %" := TDSSetup."eCESS %";
        "SHE Cess % on TDS/TCS" := TDSSetup."SHE Cess %";
        "TDS/TCS Base Amount" := TDSBaseAmt;
        "TDS/TCS Amount" := LibraryTDS.RoundTDS((TDSSetup."TDS %" / 100 * "TDS/TCS Base Amount"));
        "Surcharge Amount" := LibraryTDS.RoundTDS((TDSSetup."Surcharge %" / 100 * "TDS/TCS Amount"));
        "eCESS on TDS/TCS Amount" := LibraryTDS.RoundTDS((TDSSetup."eCESS %" / 100 * ("TDS/TCS Amount" + "Surcharge Amount")));
        "SHE Cess on TDS/TCS Amount" := LibraryTDS.RoundTDS((TDSSetup."SHE Cess %" / 100 * ("TDS/TCS Amount" + "Surcharge Amount")));
      END;
    END;

    LOCAL PROCEDURE CreateJournalDocs@1500028(VAR GenJournalLine@1500000 : Record 81;VendorNo@1500001 : Code[20];CodeContractor@1500003 : Code[10];BalAccType@1500004 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner';SubType@1500005 : ' ,Cash Receipt Voucher,Cash Payment Voucher,Bank Receipt Voucher,Bank Payment Voucher,Contra Voucher,Journal Voucher';DocType@1500008 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund');
    VAR
      GenJournalBatch@1500006 : Record 232;
      GenJournalTemplate@1500007 : Record 80;
      Amount@1500002 : Decimal;
    BEGIN
      CASE DocType OF
        DocType::Invoice:
          Amount := -LibraryRandom.RandDec(10000,2);
        DocType::Payment:
          Amount := LibraryRandom.RandDec(10000,2);
      END;
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::General);
      GenJournalTemplate.VALIDATE("Sub Type",SubType);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocType,
        GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      GenJournalLine.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      CASE BalAccType OF
        BalAccType::"Bank Account":
          BEGIN
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
            GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
          END;
        BalAccType::"G/L Account":
          BEGIN
            GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
            GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
          END;
      END;
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcTDSAmountsFromBase@1500087(VAR ExpectedTDSEntries@1500001 : Record 13729;TDSSetup@1500000 : Record 13728;TaxBaseAmount@1500003 : Decimal);
    BEGIN
      WITH ExpectedTDSEntries DO BEGIN
        "TDS Base Amount" := TaxBaseAmount;
        "TDS Amount" := LibraryTDS.RoundTDS(TDSSetup."TDS %" / 100 * "TDS Base Amount");
        "Surcharge Amount" := LibraryTDS.RoundTDS(TDSSetup."Surcharge %" / 100 * "TDS Amount");
        "eCESS Amount" := LibraryTDS.RoundTDS(TDSSetup."eCESS %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "SHE Cess Amount" := LibraryTDS.RoundTDS(TDSSetup."SHE Cess %" / 100 * ("TDS Amount" + "Surcharge Amount"));
        "Total TDS Including SHE CESS" := "TDS Amount" + "eCESS Amount" + "SHE Cess Amount" + "Surcharge Amount";
      END;
    END;

    LOCAL PROCEDURE CreateAndPostJnlLineWithCheckDetails@1500011(VAR GenJnlTemplate@1500004 : Record 80;VAR GenJnlLine@1500002 : Record 81;TDSSetup@1500006 : Record 13728;VendorNo@1500001 : Code[20];NODCode@1500003 : Code[10]) : Code[20];
    VAR
      ExpectedTDSEntries@1500005 : Record 13729;
      DocumentNo@1500007 : Code[20];
    BEGIN
      CreateJournalDocs(
        GenJnlLine,VendorNo,NODCode,GenJnlLine."Bal. Account Type"::"Bank Account",
        GenJnlTemplate."Sub Type"::"Bank Payment Voucher",GenJnlLine."Document Type"::Payment);
      GenJnlLine.VALIDATE("Bank Payment Type",GenJnlLine."Bank Payment Type"::"Manual Check");
      GenJnlLine.VALIDATE("Cheque No.",'1001');
      GenJnlLine.VALIDATE("Cheque Date",IncomeTaxAccountingPeriod."Starting Date");
      GenJnlLine.MODIFY(TRUE);
      DocumentNo := GenJnlLine."Document No.";
      CalcTDSAmountsFromBase(ExpectedTDSEntries,TDSSetup,GenJnlLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJnlLine);
      EXIT(DocumentNo);
    END;

    LOCAL PROCEDURE CreateBankPaymentLineForPayTDS@1500030(VAR GenJournalLine@1500000 : Record 81;SubType@1500005 : Option;DocType@1500008 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';AccNo@1500001 : Code[20];TANNo@1500003 : Code[10]);
    VAR
      GenJournalBatch@1500006 : Record 232;
      GenJournalTemplate@1500007 : Record 80;
    BEGIN
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::General);
      GenJournalTemplate.VALIDATE("Sub Type",SubType);
      GenJournalTemplate.MODIFY(TRUE);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocType,
        GenJournalLine."Account Type"::"G/L Account",AccNo,0);
      GenJournalLine.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
      GenJournalLine.VALIDATE("T.A.N. No.",TANNo);
      GenJournalLine.VALIDATE("Pay TDS",TRUE);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostGenJnlLineInvWithPaymentByPayTDS@1500012(VAR GenJnlLinePaymnt@1500006 : Record 81) : Code[20];
    VAR
      GenJournalLineInv@1500004 : Record 81;
      GenJnlTemplate@1500001 : Record 80;
      DocumentNo@1500000 : Code[20];
      TDSAccount@1500003 : Code[20];
    BEGIN
      TDSAccount := UpdateTDSAccNo(TDSSetup);
      CreateJournalDocs(
        GenJournalLineInv,NODNOCHeader."No.",TDSNatureDeduction.Code,GenJournalLineInv."Bal. Account Type"::"G/L Account",
        GenJnlTemplate."Sub Type"::" ",GenJournalLineInv."Document Type"::Invoice);
      DocumentNo := GenJournalLineInv."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLineInv);
      CreateBankPaymentLineForPayTDS(
        GenJnlLinePaymnt,GenJnlTemplate."Sub Type"::"Bank Payment Voucher",GenJnlLinePaymnt."Document Type"::Payment,
        TDSAccount,GenJournalLineInv."T.A.N. No.");
      GeneralJournalTemplateName := GenJnlLinePaymnt."Journal Template Name";
      GetBankPaymentVoucherAmountAfterPayTDS(GenJnlLinePaymnt."Journal Batch Name");
      LibraryERM.PostGeneralJnlLine(GenJnlLinePaymnt);
      EXIT(DocumentNo);
    END;

    LOCAL PROCEDURE CreateIncomeTaxPeriodSetup@22(IncomeTaxAccountingPeriodNo@1000 : Integer);
    VAR
      IncomeTaxPeriodSetup@1001 : Record 16501;
    BEGIN
      LibraryERM.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,IncomeTaxPeriodSetup.Quarter::Q1);
      IncomeTaxPeriodSetup."Starting Date" := WORKDATE;
      IncomeTaxPeriodSetup."Ending Date" := CALCDATE('<CQ>',WORKDATE);
      IncomeTaxPeriodSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBankPaymentVoucherLineDrAmt@1500002(VAR GenJournalLine@1003 : Record 81;DocumentType@1500003 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';GenJournalBatch@1500004 : Record 232;VendorNo@1500002 : Code[20];Amount@1500001 : Decimal;CodeContractor@1500000 : Code[10]);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      GenJournalLine.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      GenJournalLine.VALIDATE("Party Type",GenJournalLine."Party Type"::Vendor);
      GenJournalLine.VALIDATE("Party Code",VendorNo);
      GenJournalLine.VALIDATE("TDS Nature of Deduction",CodeContractor);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBankPaymentVoucherLineCrAmt@1500039(VAR GenJournalLine@1003 : Record 81;DocumentType@1500003 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';GenJournalBatch@1500004 : Record 232;VendorNo@1500002 : Code[20];Amount@1500001 : Decimal);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::"Bank Account",VendorNo,Amount);
      GenJournalLine.VALIDATE("Posting Date",IncomeTaxAccountingPeriod."Starting Date");
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBankPaymentVoucherMultipleBatch@1500068(VAR GenJnlLine@1500006 : Record 81) : Code[10];
    VAR
      GenJnlTemplate@1500004 : Record 80;
      GenJournalBatch@1500003 : Record 232;
      GenJournalBatch1@1500001 : Record 232;
      AmountLine1@1500008 : Decimal;
      AmountLine2@1500007 : Decimal;
      AmountLine3@1500002 : Decimal;
      DocumentType@1500000 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
      DocumentNo@1500009 : Code[20];
    BEGIN
      AmountLine1 := LibraryRandom.RandDecInRange(20000,21000,2);
      AmountLine2 := LibraryRandom.RandDecInRange(35000,36000,2);
      AmountLine3 := LibraryRandom.RandDecInRange(10000,11000,2);

      // Created new template and batch
      LibraryERM.CreateGenJournalTemplate(GenJnlTemplate);
      GenJnlTemplate.VALIDATE(Type,GenJnlTemplate.Type::General);
      GenJnlTemplate.VALIDATE("Sub Type",GenJnlTemplate."Sub Type"::"Bank Payment Voucher");
      GenJnlTemplate.MODIFY(TRUE);
      GeneralJournalTemplateName := GenJnlTemplate.Name;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJnlTemplate.Name);

      // Created new  multiple lines for created Batch
      CreateBankPaymentVoucherLineDrAmt(
        GenJnlLine,DocumentType::Payment,GenJournalBatch,NODNOCHeader."No.",AmountLine1,TDSNatureDeduction.Code);
      DocumentNo := GenJnlLine."Document No.";
      CreateBankPaymentVoucherLineDrAmt(
        GenJnlLine,DocumentType::Payment,GenJournalBatch,NODNOCHeader."No.",AmountLine2,TDSNatureDeduction.Code);
      CreateBankPaymentVoucherLineCrAmt(
        GenJnlLine,DocumentType::Payment,GenJournalBatch,LibraryERM.CreateBankAccountNo,-(AmountLine1 + AmountLine2));
      GenJnlLine.MODIFYALL("Document No.",DocumentNo);

      // Create new batch and create single with Bank Payment Type
      LibraryERM.CreateGenJournalBatch(GenJournalBatch1,GenJnlTemplate.Name);
      CreateBankPaymentVoucherLineDrAmt(
        GenJnlLine,DocumentType::Payment,GenJournalBatch1,NODNOCHeader."No.",AmountLine3,TDSNatureDeduction.Code);
      GenJnlLine.VALIDATE("Bal. Account Type",GenJnlLine."Bal. Account Type"::"Bank Account");
      GenJnlLine.VALIDATE("Bal. Account No.",LibraryERM.CreateBankAccountNo);
      GenJnlLine.VALIDATE("Bank Payment Type",GenJnlLine."Bank Payment Type"::"Computer Check");
      GenJnlLine.MODIFY(TRUE);
      EXIT(GenJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostTDSAdjustmentJournal@1500408(VAR TDSAdjustmentDocNo@1500003 : Code[20];PartyCode@1500302 : Code[20]);
    VAR
      TaxJournalTemplate@1500303 : Record 16585;
      TaxJournalBatch@1500304 : Record 16586;
      TDSEntry@1500305 : Record 13729;
      TDSEntry1@1500006 : Record 13729;
      TDSAdjustmentJournal@1500306 : TestPage 13791;
      TDSAdjAmount@1500005 : Decimal;
      DocType@1500000 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';
    BEGIN
      LibraryTDS.CreateTaxJournalTemplateTDSAdj(TaxJournalTemplate);
      LibraryTDS.CreateTaxJournalBatchTDSAdj(TaxJournalBatch,TaxJournalTemplate.Name);
      TDSEntry.SETRANGE("Party Code",PartyCode);
      TDSEntry.FINDFIRST;
      COMMIT;
      WITH TDSAdjustmentJournal DO BEGIN
        OPENEDIT;
        CurrentJnlBatchName.SETVALUE(TaxJournalBatch.Name);
        "Transaction No".SETVALUE(TDSEntry."Entry No.");
        "Surcharge % Applied".SETVALUE(LibraryRandom.RandIntInRange(6,10));
        TDSAdjustmentDocNo := "Document No.".VALUE;
        TDSAdjAmount := Amount.ASDECIMAL;
        Post.INVOKE;
      END;
      VerifyGLEntry(DocType::" ",TDSAdjustmentDocNo,TDSAdjAmount);
      TDSEntry1.SETRANGE("Party Code",PartyCode);
      TDSEntry1.FINDFIRST;
      TDSEntry1.TESTFIELD("Total TDS Including SHE CESS",TDSEntry."Total TDS Including SHE CESS" + TDSAdjAmount);
      TDSEntry1.SETRANGE("Document No.",TDSAdjustmentDocNo);
      TDSEntry1.FINDFIRST;
      TDSEntry1.TESTFIELD("Surcharge Amount",0);
    END;

    LOCAL PROCEDURE DeleteBankPaymentVoucher@1500085(TemplateName@1500002 : Code[10];BatchName@1500000 : Code[10]);
    VAR
      GenJnlLine@1500001 : Record 81;
    BEGIN
      GenJnlLine.SETRANGE("Journal Template Name",TemplateName);
      GenJnlLine.SETRANGE("Journal Batch Name",BatchName);
      GenJnlLine.FINDFIRST;
      GenJnlLine.DELETEALL;
    END;

    LOCAL PROCEDURE FindGLEntry@14(VAR GLEntry@1067 : Record 17;DocumentType@1068 : Option;DocumentNo@1069 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document Type",DocumentType);
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
    END;

    LOCAL PROCEDURE GenerateETDS@1500426(Resident@1500000 : Boolean) FileName : Text;
    VAR
      FileManagement@1500001 : Codeunit 419;
      GenerateeTDS@1500201 : TestPage 16507;
    BEGIN
      FileName := FileManagement.ServerTempFileName('.txt');
      LibraryVariableStorage.Enqueue(FileName);
      COMMIT;
      GenerateeTDS.OPENEDIT;
      GenerateeTDS.FormNo.SETVALUE(GetFormNo(Resident));
      GenerateeTDS.eTDS.INVOKE;
    END;

    LOCAL PROCEDURE GetFormNo@1500031(Resident@1500000 : Boolean) : Integer;
    VAR
      BatchHeader@1500001 : Record 16503;
    BEGIN
      IF Resident THEN
        EXIT(BatchHeader."Form No."::"26Q");
      EXIT(BatchHeader."Form No."::"27Q");
    END;

    [ModalPageHandler]
    PROCEDURE GeneralJournalTemplateHandler@44(VAR GeneralJournalTemplateHandler@1000 : TestPage 250);
    BEGIN
      GeneralJournalTemplateHandler.FILTER.SETFILTER(Name,GeneralJournalTemplateName);
      GeneralJournalTemplateHandler.OK.INVOKE;
    END;

    LOCAL PROCEDURE GetBankPaymentVoucherAmountAfterPayTDS@1500045(JournalBatchName@1500000 : Code[20]);
    VAR
      PayTDS@1500002 : TestPage 13788;
      BankPaymentVoucherPage@1500001 : TestPage 16577;
    BEGIN
      COMMIT;
      BankPaymentVoucherPage.OPENVIEW;
      BankPaymentVoucherPage.CurrentJnlBatchName.SETVALUE(JournalBatchName);
      PayTDS.TRAP;
      BankPaymentVoucherPage.TDS.INVOKE;
      PayTDS.Pay.INVOKE;
    END;

    LOCAL PROCEDURE PayTDS@1500060(VAR GenJnlLine@1500003 : Record 81;TDSAccNo@1500002 : Code[20]);
    VAR
      GenJnlTemplate@1500001 : Record 80;
    BEGIN
      CreateBankPaymentLineForPayTDS(
        GenJnlLine,GenJnlTemplate."Sub Type"::"Bank Payment Voucher",GenJnlLine."Document Type"::Payment,
        TDSAccNo,CompanyInformation."T.A.N. No.");
      GeneralJournalTemplateName := GenJnlLine."Journal Template Name";
      GetBankPaymentVoucherAmountAfterPayTDS(GenJnlLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE PreviewAndPrintCheckMultipleBatchTDS@1500063(GenJnlLine@1500000 : Record 81);
    VAR
      BankAccount@1500003 : Record 270;
      CheckPreview@1500002 : TestPage 404;
      PaymentJournal@1500001 : TestPage 16577;
      CheckPreviewAmountVal@1500004 : Decimal;
    BEGIN
      CheckPreview.TRAP;
      PaymentJournal.OPENEDIT;
      PaymentJournal.CurrentJnlBatchName.SETVALUE(GenJnlLine."Journal Batch Name");
      PaymentJournal."Page Check Preview".INVOKE;

      CheckPreviewAmountVal := CheckPreview.CheckAmount.ASDECIMAL;
      GenJnlLine.TESTFIELD("Total TDS/TCS Incl. SHE CESS",GenJnlLine.Amount - CheckPreviewAmountVal);

      BankAccount.GET(GenJnlLine."Bal. Account No.");
      BankAccount."Last Check No." := '1';
      BankAccount.MODIFY(TRUE);
      LibraryVariableStorage.Enqueue(BankAccount."No.");
      LibraryVariableStorage.Enqueue(BankAccount."Last Check No.");
      PaymentJournal.Action1500042.INVOKE;
      ASSERTERROR PaymentJournal.Post.INVOKE;
      Assert.ExpectedError(PrintCheckErr);
    END;

    LOCAL PROCEDURE PreviewAndPrintCheckSingleBatchTDS@1500069(GenJnlLine@1500000 : Record 81);
    VAR
      BankAccount@1500003 : Record 270;
      GenJnlLine1@1500004 : Record 81;
      CheckManagement@1500002 : Codeunit 367;
      PaymentJournal@1500001 : TestPage 16577;
    BEGIN
      GenJnlLine1.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      GenJnlLine1.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      GenJnlLine1.SETRANGE("Bank Payment Type",GenJnlLine1."Bank Payment Type"::"Computer Check");
      GenJnlLine1.FINDFIRST;
      GenJnlLine1.TESTFIELD("Check Printed",TRUE);
      CheckManagement.VoidCheck(GenJnlLine1);

      BankAccount.GET(GenJnlLine."Bal. Account No.");
      BankAccount."Last Check No." := '1';
      BankAccount.MODIFY(TRUE);

      PaymentJournal.OPENEDIT;
      PaymentJournal.CurrentJnlBatchName.SETVALUE(GenJnlLine."Journal Batch Name");
      LibraryVariableStorage.Enqueue(BankAccount."No.");
      LibraryVariableStorage.Enqueue(BankAccount."Last Check No.");
      PaymentJournal.Action1500042.INVOKE;
      PaymentJournal.Post.INVOKE;
    END;

    LOCAL PROCEDURE RunUpdateChallanRegister@1500217(ChallanNo@1501000 : Code[20];UpdatedTDSAmount@1500001 : Decimal);
    VAR
      ChallanRegister@1500201 : Record 16504;
      UpdateChallanRegister@1500203 : Report 16503;
    BEGIN
      ChallanRegister.SETRANGE("Challan No.",ChallanNo);
      COMMIT;
      UpdateChallanRegister.SETTABLEVIEW(ChallanRegister);
      UpdateChallanRegister.UpdateChallan(UpdatedTDSAmount,UpdatedTDSAmount,UpdatedTDSAmount,1);
      UpdateChallanRegister.USEREQUESTPAGE(FALSE);
      UpdateChallanRegister.RUNMODAL;
    END;

    LOCAL PROCEDURE UpdateNODNOCLines@15(VendorNo@1070 : Code[20];ConcessionCode@1500000 : Code[10];ThresholdOverlook@1500001 : Boolean;SurchargeOverlook@1500002 : Boolean);
    VAR
      NODNOCLines@1500003 : Record 13785;
    BEGIN
      NODNOCLines.SETRANGE("No.",VendorNo);
      NODNOCLines.SETRANGE(Type,NODNOCLines.Type::Vendor);
      NODNOCLines.FINDFIRST;
      NODNOCLines.MODIFYALL("Concessional Code",ConcessionCode);
      NODNOCLines.MODIFYALL("Threshold Overlook",ThresholdOverlook);
      NODNOCLines.MODIFYALL("Surcharge Overlook",SurchargeOverlook);
    END;

    LOCAL PROCEDURE UpdateThresholdAmount@1500071(TDSSetup@1500002 : Record 13728;Amount@1500000 : Decimal);
    VAR
      TDSGroup@1500001 : Record 13731;
    BEGIN
      TDSGroup.SETRANGE("TDS Group",TDSSetup."TDS Group");
      TDSGroup.FINDFIRST;
      TDSGroup.VALIDATE("TDS Threshold Amount",Amount);
      TDSGroup.MODIFY;
    END;

    LOCAL PROCEDURE UpdateTDSAccNo@1500040(TDSSetup@1500002 : Record 13728) : Code[20];
    VAR
      TDSGroup@1500001 : Record 13731;
      TDSAccount@1500003 : Code[20];
    BEGIN
      TDSAccount := LibraryERM.CreateGLAccountNo;
      TDSGroup.SETRANGE("TDS Group",TDSSetup."TDS Group");
      TDSGroup.FINDFIRST;
      TDSGroup.VALIDATE("TDS Account",TDSAccount);
      TDSGroup.MODIFY;
      EXIT(TDSAccount);
    END;

    LOCAL PROCEDURE UpdateChallanDetails@1500036(DocumentNo@1500001 : Code[20];PaymentDocNo@1500005 : Code[20];DocumentType@1500000 : Option) : Code[9];
    VAR
      TDSEntry@1500002 : Record 13729;
      UpdateChallanDetails@1500003 : Report 13721;
      ChallanNo@1500004 : Code[5];
    BEGIN
      WITH TDSEntry DO BEGIN
        SETFILTER("Document No.",DocumentNo);
        SETRANGE("Document Type",DocumentType);
        FINDFIRST;
        ChallanNo := FORMAT(LibraryRandom.RandInt(1000));
        UpdateChallanDetails.InitializeRequest(PaymentDocNo,ChallanNo,IncomeTaxAccountingPeriod."Starting Date",
          LibraryUtility.GenerateGUID,COPYSTR(LibraryUtility.GenerateGUID,1,7),LibraryUtility.GenerateGUID,
          IncomeTaxAccountingPeriod."Starting Date",1);
        UpdateChallanDetails.USEREQUESTPAGE(FALSE);
        UpdateChallanDetails.RUN;
      END;
      EXIT(ChallanNo);
    END;

    LOCAL PROCEDURE VerifyTDSAmountsPurchaseDoc@1500078(VAR ExpectedPurchaseLine@1500005 : Record 39;PurchaseLine@1500007 : Record 39;DoubleRoundingPrecision@1500004 : Boolean);
    VAR
      PurchLine@1500000 : Record 39;
      RoundingPrecision@1500006 : Decimal;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchaseLine."Document Type");
      PurchLine.SETRANGE("Document No.",PurchaseLine."Document No.");
      PurchLine.FINDFIRST;

      RoundingPrecision := GLSetup."TDS Rounding Precision";
      IF DoubleRoundingPrecision THEN
        RoundingPrecision := RoundingPrecision * 2;
      Assert.AreEqual(
        ExpectedPurchaseLine."TDS %",PurchLine."TDS %",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("TDS %"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLine."TDS Amount",PurchLine."TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("TDS Amount"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLine."TDS Base Amount",PurchLine."TDS Base Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("TDS Base Amount"),PurchLine.TABLECAPTION));
      Assert.AreEqual(
        ExpectedPurchaseLine."eCESS % on TDS",PurchLine."eCESS % on TDS",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("eCESS % on TDS"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLine."eCESS on TDS Amount",PurchLine."eCESS on TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("eCESS on TDS Amount"),PurchLine.TABLECAPTION));
      Assert.AreEqual(
        ExpectedPurchaseLine."SHE Cess % On TDS",PurchLine."SHE Cess % On TDS",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("SHE Cess % On TDS"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLine."SHE Cess on TDS Amount",PurchLine."SHE Cess on TDS Amount",GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("SHE Cess on TDS Amount"),PurchLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedPurchaseLine."Total TDS Including SHE CESS",PurchLine."Total TDS Including SHE CESS",
        GLSetup."TDS Rounding Precision",
        STRSUBSTNO(AmountErr,PurchLine.FIELDNAME("Total TDS Including SHE CESS"),PurchLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyTDSAmountsJnlDoc@1500024(ExpectedJnlLine@1500005 : Record 81;DocumentType@1500007 : Option;DocumentNo@1500001 : Code[20];DoubleRoundingPrecision@1500004 : Boolean);
    VAR
      GenJnlLine@1500000 : Record 81;
      RoundingPrecision@1500006 : Decimal;
    BEGIN
      GenJnlLine.SETRANGE("Document Type",DocumentType);
      GenJnlLine.SETRANGE("Document No.",DocumentNo);
      GenJnlLine.FINDFIRST;

      RoundingPrecision := GLSetup."TDS Rounding Precision";
      IF DoubleRoundingPrecision THEN
        RoundingPrecision := RoundingPrecision * 2;
      Assert.AreEqual(
        ExpectedJnlLine."TDS/TCS %",GenJnlLine."TDS/TCS %",
        STRSUBSTNO(AmountErr,GenJnlLine.FIELDNAME("TDS/TCS %"),GenJnlLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedJnlLine."TDS/TCS Amount",GenJnlLine."TDS/TCS Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,GenJnlLine.FIELDNAME("TDS/TCS Amount"),GenJnlLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedJnlLine."TDS/TCS Base Amount",GenJnlLine."TDS/TCS Base Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,GenJnlLine.FIELDNAME("TDS/TCS Base Amount"),GenJnlLine.TABLECAPTION));
      Assert.AreEqual(
        ExpectedJnlLine."eCESS %",GenJnlLine."eCESS %",
        STRSUBSTNO(AmountErr,GenJnlLine.FIELDNAME("eCESS %"),GenJnlLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedJnlLine."eCESS on TDS/TCS Amount",GenJnlLine."eCESS on TDS/TCS Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,GenJnlLine.FIELDNAME("eCESS on TDS/TCS Amount"),GenJnlLine.TABLECAPTION));
      Assert.AreEqual(
        ExpectedJnlLine."SHE Cess % on TDS/TCS",GenJnlLine."SHE Cess % on TDS/TCS",
        STRSUBSTNO(AmountErr,GenJnlLine.FIELDNAME("SHE Cess % on TDS/TCS"),GenJnlLine.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedJnlLine."SHE Cess on TDS/TCS Amount",GenJnlLine."SHE Cess on TDS/TCS Amount",RoundingPrecision,
        STRSUBSTNO(AmountErr,GenJnlLine.FIELDNAME("SHE Cess on TDS/TCS Amount"),GenJnlLine.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyGLEntry@17(DocumentType@1500000 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';DocumentNo@1072 : Code[20];Amount@1073 : Decimal);
    VAR
      GLEntry@1074 : Record 17;
      CreditAmount@1075 : Decimal;
    BEGIN
      FindGLEntry(GLEntry,DocumentType,DocumentNo);
      REPEAT
        CreditAmount += GLEntry."Credit Amount"
      UNTIL GLEntry.NEXT = 0;
      Assert.AreNearlyEqual(CreditAmount,Amount,GLSetup."TDS Rounding Precision",STRSUBSTNO(CreditAmountErr,CreditAmount,Amount));
    END;

    LOCAL PROCEDURE VerifyTDSEntry@1500003(ExpectedTDSEntryAmounts@1500005 : Record 13729;DocumentNo@1500000 : Code[20];DocumentType@1500001 : Option;DoubleRoundingPrecision@1500004 : Boolean);
    VAR
      TDSEntry@1500002 : Record 13729;
      RoundingPrecision@1500006 : Decimal;
    BEGIN
      TDSEntry.SETRANGE("Document No.",DocumentNo);
      TDSEntry.SETRANGE("Document Type",DocumentType);
      TDSEntry.FINDLAST;

      RoundingPrecision := GLSetup."TDS Rounding Precision";
      IF DoubleRoundingPrecision THEN
        RoundingPrecision := RoundingPrecision * 2;
      Assert.AreNearlyEqual(
        ExpectedTDSEntryAmounts."TDS Amount",TDSEntry."TDS Amount",
        RoundingPrecision,
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("TDS Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntryAmounts."TDS Base Amount",TDSEntry."TDS Base Amount",
        RoundingPrecision,
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("TDS Base Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntryAmounts."eCESS Amount",TDSEntry."eCESS Amount",
        RoundingPrecision,
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("eCESS Amount"),TDSEntry.TABLECAPTION));
      Assert.AreNearlyEqual(
        ExpectedTDSEntryAmounts."SHE Cess Amount",TDSEntry."SHE Cess Amount",
        RoundingPrecision,
        STRSUBSTNO(AmountErr,TDSEntry.FIELDNAME("SHE Cess Amount"),TDSEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyTDSAdjustmentEntry@1500075(PostedPONo@1500000 : Code[20];PaymentDocNo@1500001 : Code[20]);
    VAR
      TDSEntry@1500003 : Record 13729;
      GenJnlLine@1500002 : Record 81;
    BEGIN
      TDSEntry.SETRANGE("Document No.",PostedPONo);
      TDSEntry.FINDFIRST;
      GenJnlLine.SETRANGE("Document No.",PaymentDocNo);
      GenJnlLine.FINDFIRST;
      Assert.AreNearlyEqual(TDSEntry."Total TDS Including SHE CESS",GenJnlLine.Amount,GLSetup."TDS Rounding Precision",
        AmountErr);
    END;

    LOCAL PROCEDURE VoidCheck@1500021(DocumentNo@1500000 : Code[20]);
    VAR
      CheckLedgerEntry@1500003 : Record 272;
      CheckManagement@1500004 : Codeunit 367;
      ConfirmFinancialVoid@1500002 : Page 695;
      VoidType@1500001 : 'Unapply and void check,Void check only';
    BEGIN
      LibraryVariableStorage.Enqueue(VoidType::"Void check only");
      CheckLedgerEntry.SETRANGE("Document No.",DocumentNo);
      CheckLedgerEntry.FINDFIRST;
      CheckManagement.FinancialVoidCheck(CheckLedgerEntry);
      ConfirmFinancialVoid.SetCheckLedgerEntry(CheckLedgerEntry);
    END;

    [ModalPageHandler]
    PROCEDURE VoidCheckPageHandler@53(VAR ConfirmFinancialVoid@1000 : Page 695;VAR Response@1001 : Action);
    VAR
      VoidTypeVariant@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(VoidTypeVariant);
      ConfirmFinancialVoid.InitializeRequest(IncomeTaxAccountingPeriod."Starting Date",VoidTypeVariant);
      Response := ACTION::Yes
    END;

    [RequestPageHandler]
    PROCEDURE CheckRequstPageHandler@1500100(VAR CheckRequestPage@1000 : TestRequestPage 1401);
    VAR
      LastCheckNo@1500001 : Variant;
      BankAccountNo@1500002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(BankAccountNo);
      LibraryVariableStorage.Dequeue(LastCheckNo);
      CheckRequestPage.BankAccount.SETVALUE(FORMAT(BankAccountNo));
      CheckRequestPage.LastCheckNo.SETVALUE(FORMAT(LastCheckNo));
      CheckRequestPage.OneCheckPerVendorPerDocumentNo.SETVALUE(TRUE);
      CheckRequestPage.ReprintChecks.SETVALUE(TRUE);
      CheckRequestPage.SAVEASPDF(FORMAT(CREATEGUID));
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@1500101(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500102(Message@1000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE GenerateETDSRequestPageHandler@1500490(VAR GenerateeTDS@1500104 : TestRequestPage 16508);
    VAR
      FileName@1500107 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(FileName);
      GenerateeTDS.FileName.SETVALUE(FileName);
      GenerateeTDS.TANLocation.SETVALUE(CompanyInformation."T.A.N. No.");
      GenerateeTDS.ReportFrequency.SETVALUE(IncomeTaxPeriodSetup.Quarter);
      GenerateeTDS.FinancialYear.SETVALUE(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
      GenerateeTDS.FullName.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(30,0),1,30));
      GenerateeTDS.Designation.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20));
      GenerateeTDS.PrintingDate.SETVALUE(WORKDATE);
      GenerateeTDS.NameOfReturnPreparationUtility.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(30,0),1,30));
      GenerateeTDS.Email.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(30,0),1,30));
      GenerateeTDS.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,2000000000));
      GenerateeTDS."PAN No.".SETVALUE(CompanyInformation."P.A.N. No.");
      GenerateeTDS.OK.INVOKE;
    END;

    BEGIN
    END.
  }
}

