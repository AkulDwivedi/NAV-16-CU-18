OBJECT Codeunit 137293 SCM Inventory Miscellaneous
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1006 : Codeunit 130000;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryInventory@1003 : Codeunit 132201;
      LibraryItemTracking@1029 : Codeunit 130502;
      LibraryManufacturing@1008 : Codeunit 132202;
      LibraryPlanning@1005 : Codeunit 132203;
      LibrarySales@1013 : Codeunit 130509;
      LibraryWarehouse@1004 : Codeunit 132204;
      LibraryRandom@1001 : Codeunit 130440;
      LibraryVariableStorage@1033 : Codeunit 131004;
      LibraryReportValidation@1034 : Codeunit 131002;
      isInitialized@1000 : Boolean;
      AutomaticReservationConfirmMsg@1015 : TextConst 'ENU=Automatic reservation is not possible.';
      ItemFilterTok@1009 : TextConst '@@@="%1=Field value,%2=Field value";ENU=%1|%2';
      HandlingErr@1028 : TextConst 'ENU=Nothing to handle.';
      GlobalItemNo@1010 : Code[20];
      GlobalItemNo2@1011 : Code[20];
      GlobalLocationCode@1012 : Code[10];
      GlobalDocumentNo@1014 : Code[20];
      NothingToCreateMsg@1021 : TextConst 'ENU=There is nothing to create.';
      PickActivitiesMsg@1020 : TextConst 'ENU=Number of Invt. Pick activities created: 1 out of a total of 1.';
      TransferOrderDeleteMsg@1022 : TextConst '@@@=%1 - Transfer Order No.;ENU=The transfer order %1 has been deleted.';
      TransferOrderShippingNotErr@1043 : TextConst 'ENU=Transfer order should not be completely shipped.';
      TransferOrderShippingErr@1023 : TextConst 'ENU=Transfer order should be completely shipped.';
      TransferOrderReceiptErr@1042 : TextConst 'ENU=Transfer order should not be completely received.';
      TransferOrderReceiptLineErr@1044 : TextConst 'ENU=Transfer line should be completely received.';
      TransferOrderReceiptLineNotErr@1031 : TextConst 'ENU=Transfer line is not completely received.';
      GlobalDocumentNo2@1027 : Code[20];
      GlobalQuantity@1026 : Decimal;
      GlobalQuantity2@1025 : Decimal;
      GlobalMessageCounter@1017 : Integer;
      WorksheetMsg@1024 : TextConst 'ENU=You are now in worksheet';
      WrongNumberOfOrdersToPrintErr@1032 : TextConst 'ENU=Wrong number of transfer orders to print';

    [Test]
    PROCEDURE PlanningLinesForDemandLocation@1();
    VAR
      Location@1008 : Record 14;
    BEGIN
      // Verify Planning Lines for demand location after posting Item Journal and Calculate Regenerative Plan.
      Initialize;
      CreateLocation(Location,FALSE,FALSE,FALSE,FALSE);
      RequisitionLineWithItemJournal(Location.Code,Location.Code);
    END;

    [Test]
    PROCEDURE PlanningLinesForNonDemandLocation@29();
    VAR
      ParentItem@1004 : Record 27;
      Location@1008 : Record 14;
      Location2@1009 : Record 14;
      ManufacturingSetup@1002 : Record 99000765;
      ProductionBOMLine@1001 : Record 99000772;
      RequisitionLine@1005 : Record 246;
      SalesReceivablesSetup@1000 : Record 311;
      Quantity@1006 : Decimal;
    BEGIN
      // Verify Planning Lines for non demand location after posting Item Journal and Calculate Regenerative Plan.

      // Setup: Update Sales Receivables Setup and Manufacturing Setup. Create two locations. Create Parent Item and Child Item with Variants. Post Negative Adjmt. for Parent Item.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);  // Use Random value for Quantity.
      SetupSalesAndManufacturingSetup(SalesReceivablesSetup,ManufacturingSetup);

      CreateLocation(Location,FALSE,FALSE,FALSE,FALSE);
      CreateLocation(Location2,FALSE,FALSE,FALSE,FALSE);

      CreateItem(ParentItem,ParentItem."Replenishment System"::"Prod. Order");
      CreateDemandAsNegativeAdjustment(ParentItem,Location.Code,Quantity);
      FindProductionBOMLine(ProductionBOMLine,ParentItem."Production BOM No.");

      // Exercise: Calculate Regenerative Plan.
      RunCalculateRegenerativePlan(STRSUBSTNO('%1|%2',ParentItem."No.",ProductionBOMLine."No."),Location2.Code);

      // Verify: Verify Calculated Planning Lines.
      FindRequisitionLine(RequisitionLine,ParentItem."No.",Location2.Code);
      Assert.RecordIsEmpty(RequisitionLine);
      FindRequisitionLine(RequisitionLine,ProductionBOMLine."No.",Location2.Code);
      Assert.RecordIsEmpty(RequisitionLine);

      // Tear Down.
      UpdateManufacturingSetup(ManufacturingSetup."Combined MPS/MRP Calculation",ManufacturingSetup."Default Safety Lead Time");
      UpdateSalesSetup(SalesReceivablesSetup."Credit Warnings",SalesReceivablesSetup."Stockout Warning");
    END;

    [Test]
    PROCEDURE PlanningLinesForBlankLocation@30();
    VAR
      Location@1008 : Record 14;
    BEGIN
      // Verify Planning Lines for blank location after posting Item Journal and Calculate Regenerative Plan.
      Initialize;
      CreateLocation(Location,FALSE,FALSE,FALSE,FALSE);
      RequisitionLineWithItemJournal(Location.Code,'');  // Use blank for Location Code.
    END;

    LOCAL PROCEDURE RequisitionLineWithItemJournal@2(LocationCode@1000 : Code[10];LocationCode2@1001 : Code[10]);
    VAR
      ParentItem@1008 : Record 27;
      ManufacturingSetup@1007 : Record 99000765;
      ProductionBOMLine@1006 : Record 99000772;
      SalesReceivablesSetup@1005 : Record 311;
      Quantity@1003 : Decimal;
    BEGIN
      // Setup: Update Sales Receivables Setup and Manufacturing Setup. Create Parent Item and Child Item with Variants. Post Negative Adjmt. for Parent Item.
      Quantity := LibraryRandom.RandInt(10);  // Use Random value for Quantity.
      SetupSalesAndManufacturingSetup(SalesReceivablesSetup,ManufacturingSetup);

      CreateItem(ParentItem,ParentItem."Replenishment System"::"Prod. Order");
      CreateDemandAsNegativeAdjustment(ParentItem,LocationCode,Quantity);
      FindProductionBOMLine(ProductionBOMLine,ParentItem."Production BOM No.");

      // Exercise: Calculate Regenerative Plan.
      RunCalculateRegenerativePlan(STRSUBSTNO('%1|%2',ParentItem."No.",ProductionBOMLine."No."),LocationCode2);

      // Verify: Verify Calculated Planning Lines.
      VerifyRequisitionLine(ParentItem."No.",LocationCode,Quantity,'');  // Use blank value for Variant Code.
      VerifyRequisitionLine(ProductionBOMLine."No.",LocationCode,Quantity,ProductionBOMLine."Variant Code");

      // Tear Down.
      UpdateManufacturingSetup(ManufacturingSetup."Combined MPS/MRP Calculation",ManufacturingSetup."Default Safety Lead Time");
      UpdateSalesSetup(SalesReceivablesSetup."Credit Warnings",SalesReceivablesSetup."Stockout Warning");
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE PlanningLinesForDemandLocationWithPoductionForcast@15();
    VAR
      Location@1008 : Record 14;
    BEGIN
      // Verify Planning Lines for demand location after creating Production Forecast and Calculate Regenerative Plan.
      Initialize;
      CreateLocation(Location,FALSE,FALSE,FALSE,FALSE);
      RequisitionLineWithForecast(Location.Code,Location.Code);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE PlanningLinesForNonDemandLocationWithPoductionForcast@26();
    VAR
      ParentItem@1004 : Record 27;
      Location@1008 : Record 14;
      Location2@1009 : Record 14;
      ManufacturingSetup@1002 : Record 99000765;
      ProductionBOMLine@1005 : Record 99000772;
      RequisitionLine@1012 : Record 246;
      SalesReceivablesSetup@1000 : Record 311;
      Quantity@1001 : Decimal;
    BEGIN
      // Verify Planning Lines for non demand location after creating Production Forecast and Calculate Regenerative Plan.

      // Setup: Update Sales Receivables Setup and Manufacturing Setup. Create two locations. Create Parent Item and Child Item with Variant. Create Production Forecast for Parent Item.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);  // Use Random value for Quantity.
      SetupSalesAndManufacturingSetup(SalesReceivablesSetup,ManufacturingSetup);

      CreateLocation(Location,FALSE,FALSE,FALSE,FALSE);
      CreateLocation(Location2,FALSE,FALSE,FALSE,FALSE);

      CreateItem(ParentItem,ParentItem."Replenishment System"::"Prod. Order");
      CreateDemandAsForecast(ParentItem,Location.Code,Quantity);
      FindProductionBOMLine(ProductionBOMLine,ParentItem."Production BOM No.");
      AssignGlobalVariables(ParentItem."No.",ProductionBOMLine."No.",Location2.Code);

      // Exercise: Calculate Regenerative Plan.
      OpenPlanWkshPageForCalcRegenPlan(CreateRequisitionWorksheetName(PAGE::"Planning Worksheet"));

      // Verify: Verify Calculated Planning Lines.
      FindRequisitionLine(RequisitionLine,ParentItem."No.",Location2.Code);
      Assert.RecordIsEmpty(RequisitionLine);
      FindRequisitionLine(RequisitionLine,ProductionBOMLine."No.",Location2.Code);
      Assert.RecordIsEmpty(RequisitionLine);

      // Tear Down.
      UpdateForecastOnManufacturingSetup(
        ManufacturingSetup."Current Production Forecast",ManufacturingSetup."Use Forecast on Locations");
      UpdateManufacturingSetup(ManufacturingSetup."Combined MPS/MRP Calculation",ManufacturingSetup."Default Safety Lead Time");
      UpdateSalesSetup(SalesReceivablesSetup."Credit Warnings",SalesReceivablesSetup."Stockout Warning");
    END;

    [Test]
    [HandlerFunctions(CalculatePlanPlanWkshRequestPageHandler)]
    PROCEDURE PlanningLinesForBlankLocationWithPoductionForcast@27();
    VAR
      Location@1008 : Record 14;
    BEGIN
      // Verify Planning Lines for blank location after creating Production Forecast and Calculate Regenerative Plan.

      Initialize;
      CreateLocation(Location,FALSE,FALSE,FALSE,FALSE);
      RequisitionLineWithForecast(Location.Code,'');  // Use blank for Location Code.
    END;

    LOCAL PROCEDURE RequisitionLineWithForecast@9(LocationCode@1000 : Code[10];LocationCode2@1001 : Code[10]);
    VAR
      ParentItem@1008 : Record 27;
      ManufacturingSetup@1007 : Record 99000765;
      ProductionBOMLine@1006 : Record 99000772;
      SalesReceivablesSetup@1005 : Record 311;
      Quantity@1002 : Decimal;
    BEGIN
      // Setup: Update Sales Receivables Setup and Manufacturing Setup. Create two locations. Create Parent Item and Child Item with Variant. Create Production Forecast for Parent Item.
      Quantity := LibraryRandom.RandInt(10);  // Use Random value for Quantity.
      SetupSalesAndManufacturingSetup(SalesReceivablesSetup,ManufacturingSetup);

      CreateItem(ParentItem,ParentItem."Replenishment System"::"Prod. Order");
      CreateDemandAsForecast(ParentItem,LocationCode,Quantity);
      FindProductionBOMLine(ProductionBOMLine,ParentItem."Production BOM No.");
      AssignGlobalVariables(ParentItem."No.",ProductionBOMLine."No.",LocationCode2);

      // Exercise: Calculate Regenerative Plan.
      OpenPlanWkshPageForCalcRegenPlan(CreateRequisitionWorksheetName(PAGE::"Planning Worksheet"));

      // Verify: Verify Calculated Planning Lines.
      VerifyRequisitionLine(ParentItem."No.",LocationCode,Quantity,'');  // Use blank value for Variant Code.
      VerifyRequisitionLine(ProductionBOMLine."No.",LocationCode,Quantity,ProductionBOMLine."Variant Code");

      // Tear Down.
      UpdateForecastOnManufacturingSetup(
        ManufacturingSetup."Current Production Forecast",ManufacturingSetup."Use Forecast on Locations");
      UpdateManufacturingSetup(ManufacturingSetup."Combined MPS/MRP Calculation",ManufacturingSetup."Default Safety Lead Time");
      UpdateSalesSetup(SalesReceivablesSetup."Credit Warnings",SalesReceivablesSetup."Stockout Warning");
    END;

    [Test]
    PROCEDURE NotCompletelyShippedOnPostTransferOrder@197();
    VAR
      Item@1002 : Record 27;
      ItemJournalLine@1005 : Record 83;
      Location@1004 : Record 14;
      TransferHeader@1001 : Record 5740;
      TransferLine@1006 : Record 5741;
      Quantity@1000 : Decimal;
      Delta@1003 : Decimal;
    BEGIN
      // [FEATURE] [Transfer Order]
      // [SCENARIO 378398] Field "Completely Shipped" in Tranfer Header should be FALSE when line with partly shipped exist.
      Initialize;

      // [GIVEN] Create Item and Location.
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateLocation(Location);
      LibraryInventory.UpdateInventoryPostingSetup(Location);

      // [GIVEN] Create and post Item Journal Line for having item in inventory.
      Delta := LibraryRandom.RandInt(99);
      Quantity := LibraryRandom.RandIntInRange(Delta + 1,200);
      PostItemJournalLine(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Location.Code,Quantity,FALSE);

      // [WHEN] Post partly shipping in transfer order.
      CreateTransferHeaderAndTransferLineWithChangedQtytoShip(
        TransferHeader,TransferLine,Item."No.",Location.Code,Quantity,Quantity - Delta);
      LibraryInventory.PostTransferHeader(TransferHeader,TRUE,FALSE);
      TransferHeader.CALCFIELDS("Completely Shipped");

      // [THEN] "Completely Shipped" field in Tranfer Header should be FALSE.
      Assert.IsFalse(TransferHeader."Completely Shipped",TransferOrderShippingNotErr);
    END;

    [Test]
    PROCEDURE CompletelyShippedOnPostTransferOrder@174();
    VAR
      Item@1001 : Record 27;
      ItemJournalLine@1005 : Record 83;
      Location@1002 : Record 14;
      TransferHeader@1003 : Record 5740;
      TransferLine@1006 : Record 5741;
      Quantity@1000 : Decimal;
      Delta@1004 : Decimal;
    BEGIN
      // [FEATURE] [Transfer Order]
      // [SCENARIO 378398] Field "Completely Shipped" in Tranfer Header should be TRUE when all lines in it are completely shipped.
      Initialize;

      // [GIVEN] Create Item and Location.
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateLocation(Location);
      LibraryInventory.UpdateInventoryPostingSetup(Location);

      // [GIVEN] Create and post Item Journal Line for having item in inventory.
      Delta := LibraryRandom.RandInt(99);
      Quantity := LibraryRandom.RandIntInRange(Delta + 1,200);
      PostItemJournalLine(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Location.Code,Quantity,FALSE);

      // [WHEN] Post completely shipping in transfer order.
      CreateTransferHeaderAndTransferLine(TransferHeader,TransferLine,Item."No.",Location.Code,Quantity);
      LibraryInventory.PostTransferHeader(TransferHeader,TRUE,FALSE);
      TransferHeader.CALCFIELDS("Completely Shipped");

      // [THEN] "Completely Shipped" field in Tranfer Header should be TRUE.
      Assert.IsTrue(TransferHeader."Completely Shipped",TransferOrderShippingErr);
    END;

    [Test]
    PROCEDURE CompletelyReceivedOnPostTransferOrder@214();
    VAR
      Item@1003 : ARRAY [2] OF Record 27;
      ItemJournalLine@1007 : Record 83;
      Location@1004 : Record 14;
      TransferLine@1002 : ARRAY [2] OF Record 5741;
      TransferHeader@1001 : Record 5740;
      Quantity@1000 : Decimal;
      Delta@1005 : Decimal;
    BEGIN
      // [FEATURE] [Transfer Order]
      // [SCENARIO 378398] Field "Completely Received" in Tranfer Header should be FALSE whenever the Transfer Order isn't post completely.
      Initialize;

      // [GIVEN] Create Location.
      LibraryWarehouse.CreateLocation(Location);
      LibraryInventory.UpdateInventoryPostingSetup(Location);

      // [GIVEN] Create Item1 and Item2.
      LibraryInventory.CreateItem(Item[1]);
      LibraryInventory.CreateItem(Item[2]);

      // [GIVEN] Create and post Item Journal Line for having items in inventory.
      Delta := LibraryRandom.RandInt(99);
      Quantity := LibraryRandom.RandIntInRange(Delta + 1,200);
      PostItemJournalLine(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item[1]."No.",Location.Code,Quantity,FALSE);
      PostItemJournalLine(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item[2]."No.",Location.Code,Quantity,FALSE);

      // [GIVEN] Post shipping and receipt in transfer order partly for line with Item2 and completely for line with Item1.
      CreateAndPostShippingAndReceiptInTransferOrderWithTwoLines(
        TransferHeader,TransferLine,Item,Location.Code,Quantity,Quantity - Delta);

      // [GIVEN] "Completely Received" field in Tranfer Header should be FALSE.
      Assert.IsFalse(TransferHeader."Completely Received",TransferOrderReceiptErr);
    END;

    [Test]
    PROCEDURE CompletelyReceivedOnPostTransferOrderLines@118();
    VAR
      Item@1003 : ARRAY [2] OF Record 27;
      ItemJournalLine@1007 : Record 83;
      Location@1004 : Record 14;
      TransferLine@1002 : ARRAY [2] OF Record 5741;
      TransferHeader@1001 : Record 5740;
      Quantity@1000 : Decimal;
      Delta@1005 : Decimal;
    BEGIN
      // [FEATURE] [Transfer Order]
      // [SCENARIO 378398] Field "Completely Received" in Tranfer Line should be TRUE when received quantity equal to quantity in Tranfer Line.
      Initialize;

      // [GIVEN] Create Location.
      LibraryWarehouse.CreateLocation(Location);
      LibraryInventory.UpdateInventoryPostingSetup(Location);

      // [GIVEN] Create Item1 and Item2.
      LibraryInventory.CreateItem(Item[1]);
      LibraryInventory.CreateItem(Item[2]);

      // [GIVEN] Create and post Item Journal Line for having items in inventory.
      Delta := LibraryRandom.RandInt(99);
      Quantity := LibraryRandom.RandIntInRange(Delta + 1,200);
      PostItemJournalLine(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item[1]."No.",Location.Code,Quantity,FALSE);
      PostItemJournalLine(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item[2]."No.",Location.Code,Quantity,FALSE);

      // [GIVEN] Post shipping and receipt in transfer order completely for line with Item1 and partly for line with Item2.
      CreateAndPostShippingAndReceiptInTransferOrderWithTwoLines(
        TransferHeader,TransferLine,Item,Location.Code,Quantity,Quantity - Delta);

      // [GIVEN] "Completely Received" field in Tranfer Line should be TRUE.
      Assert.IsTrue(TransferLine[1]."Completely Received",TransferOrderReceiptLineErr);
    END;

    [Test]
    PROCEDURE NotCompletelyReceivedOnPostTransferOrderLines@110();
    VAR
      Item@1005 : Record 27;
      ItemJournalLine@1001 : Record 83;
      Location@1004 : Record 14;
      TransferLine@1002 : Record 5741;
      Quantity@1000 : Decimal;
      Delta@1003 : Decimal;
    BEGIN
      // [FEATURE] [Transfer Order]
      // [SCENARIO 378398] Field "Completely Received" in Tranfer Line should be FALSE when received quantity isn't equal to quantity in Tranfer Line.
      Initialize;

      // [GIVEN] Create Item and Location.
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateLocation(Location);
      LibraryInventory.UpdateInventoryPostingSetup(Location);

      // [GIVEN] Create and post Item Journal Line for having item in inventory.
      Delta := LibraryRandom.RandInt(99);
      Quantity := LibraryRandom.RandIntInRange(Delta + 1,200);
      PostItemJournalLine(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Location.Code,Quantity,FALSE);

      // [GIVEN] Post shipping and receipt in transfer order partly for line with Item.
      CreateAndPostShippingAndReceiptInTransferOrder(TransferLine,Item."No.",Location.Code,Quantity,Quantity - Delta);

      // [GIVEN] "Completely Received" field in Tranfer Line should be FALSE.
      Assert.IsFalse(TransferLine."Completely Received",TransferOrderReceiptLineNotErr);
    END;

    [Test]
    [HandlerFunctions(PickSelectionHandler)]
    PROCEDURE GetWarehouseDocumentOnPickWorksheet@133();
    VAR
      Customer@1000 : Record 18;
      Location@1003 : Record 14;
      SalesLine@1002 : Record 37;
      Quantity@1005 : Decimal;
    BEGIN
      // Verify Pick Worksheet after Get Warehouse Documents functionality.

      // Setup: Create initial setup for Pick Worksheet.
      Initialize;
      Quantity := LibraryRandom.RandInt(100);  // Use Random value for Quantity.
      CreateFullWarehouseSetup(Location);
      GlobalDocumentNo :=
        CreateInitialSetupForPickWorksheet(SalesLine,CreateCustomer('',Customer.Reserve::Never),Location.Code,Quantity);  // Assign in global variable.

      // Exercise: Invoke Get Warehouse Documents from Pick Worksheet.
      GetWarehouseDocumentFromPickWorksheet;

      // Verify: Verify Pick Worksheet Line.
      VerifyPickWorksheet(SalesLine,SalesLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(PickSelectionHandler,MessageHandler,AutomaticReservationConfirmHandler,CreatePickHandler)]
    PROCEDURE ReserverdQuantityOnSalesOrderAfterPick@28();
    VAR
      Customer@1000 : Record 18;
      Location@1003 : Record 14;
      SalesHeader@1008 : Record 36;
      SalesLine@1006 : Record 37;
      CustomerNo@1001 : Code[20];
      Quantity@1004 : Decimal;
      QuantityToHandle@1005 : Decimal;
    BEGIN
      // Verify Reserved Quantity on Sales Line after creating Pick from Pick Worksheet when Customer has Reserve as Always.

      // Setup: Create initial setup for Pick Worksheet. Get Warehouse Document and create Pick. Create Sales Order.
      Initialize;
      Quantity := LibraryRandom.RandInt(100);  // Use Random value for Quantity.
      CreateFullWarehouseSetup(Location);

      // Create Setup for Pick Worksheet, Get Warehous document and Create Pick.
      CustomerNo := CreateCustomer(Location.Code,Customer.Reserve::Always);
      GlobalDocumentNo := CreateInitialSetupForPickWorksheet(SalesLine,CustomerNo,Location.Code,Quantity);  // Assign in global variable.
      QuantityToHandle := Quantity - SalesLine.Quantity;
      CreatePickFromPickWorksheet;

      CreateSalesOrder(SalesLine,CustomerNo,SalesLine."No.",Location.Code,1);  // Quantity is not important.
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.ReopenSalesDocument(SalesHeader);

      // Exercise: Enter Quantity on Sales Order page.
      OpenSalesOrderToEnterQuantity(SalesHeader."No.",Quantity);

      // Verify: Verify Reserved Quantity on Sales Line.
      SalesLine.CALCFIELDS("Reserved Quantity");
      SalesLine.TESTFIELD("Reserved Quantity",QuantityToHandle);
    END;

    [Test]
    [HandlerFunctions(PickSelectionHandler,MessageHandler,CreatePickHandler,AutomaticReservationConfirmHandler)]
    PROCEDURE PickWorksheetWithReservation@31();
    VAR
      Customer@1000 : Record 18;
      Location@1003 : Record 14;
      SalesHeader@1008 : Record 36;
      SalesLine@1006 : Record 37;
      WarehouseShipmentHeader@1001 : Record 7320;
      Quantity@1004 : Decimal;
      QuantityToHandle@1005 : Decimal;
      CustomerNo@1002 : Code[20];
    BEGIN
      // Verify Pick Worksheet Line after Get Warehouse Documents functionality when Customer has Reserve as Always.

      // Setup: Create initial setup for Pick Worksheet. Get Warehouse Document and Create Pick. Create and release Sales Order and Warehouse Shipment.
      Initialize;
      Quantity := LibraryRandom.RandInt(100);  // Use Random value for Quantity.
      CreateFullWarehouseSetup(Location);

      // Create Setup for Pick Worksheet, Get Warehous document and Create Pick.
      CustomerNo := CreateCustomer(Location.Code,Customer.Reserve::Always);
      CreateInitialSetupForPickWorksheet(SalesLine,CustomerNo,Location.Code,Quantity);
      QuantityToHandle := Quantity - SalesLine.Quantity;
      CreatePickFromPickWorksheet;

      // Create Sales Order, Release Order and Warehouse Shipment.
      CreateSalesOrder(SalesLine,CustomerNo,SalesLine."No.",Location.Code,1);  // Quantity is not important.
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.ReopenSalesDocument(SalesHeader);
      OpenSalesOrderToEnterQuantity(SalesHeader."No.",Quantity);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      CreateAndReleaseWarehouseShipmentFromSalesOrder(WarehouseShipmentHeader,SalesLine);
      GlobalDocumentNo := WarehouseShipmentHeader."No.";  // Assign in global variable.

      // Exercise: Invoke Get Warehouse Documents from Pick Worksheet.
      GetWarehouseDocumentFromPickWorksheet;

      // Verify: Verify Pick Worksheet Line.
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",Location.Code);
      VerifyPickWorksheet(SalesLine,QuantityToHandle);
    END;

    [Test]
    PROCEDURE MultipleWarehouseShipmentFromSalesOrder@147();
    VAR
      Location@1002 : Record 14;
      Location2@1006 : Record 14;
      SalesHeader@1005 : Record 36;
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      // Verify multiple Warehouse Shipments created from Sales Order.

      // Setup: Create and release Sales Order with multiple lines.
      Initialize;
      CreateLocation(Location,TRUE,TRUE,FALSE,FALSE);
      CreateLocation(Location2,TRUE,TRUE,FALSE,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location2.Code,FALSE);

      CreateSalesOrderWithMultipleLines(SalesHeader,Location.Code,Location2.Code);

      // Exercise: Create Warehouse Shipment.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // Verify: Verify created Warehouse Shipments.
      FindWhseShipmentNo(SalesHeader."No.",Location.Code);
      FindWhseShipmentNo(SalesHeader."No.",Location2.Code);
    END;

    [Test]
    PROCEDURE WarehouseShipmentFromSalesOrder@56();
    VAR
      Location@1002 : Record 14;
      Location2@1006 : Record 14;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
      WarehouseEmployee@1000 : Record 7301;
    BEGIN
      // Verify Warehouse Shipment is created from Sales Order after adding a new Sales Line.

      // Setup: Create and release Sales Order with multiple lines and create Warehouse Shipment. Add new Sales Line.
      Initialize;
      CreateLocation(Location,TRUE,TRUE,FALSE,FALSE);
      CreateLocation(Location2,TRUE,TRUE,FALSE,FALSE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location2.Code,FALSE);

      CreateSalesOrderWithMultipleLines(SalesHeader,Location.Code,Location2.Code);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      LibrarySales.ReopenSalesDocument(SalesHeader);
      FindSalesLine(SalesLine,SalesHeader."Document Type",SalesHeader."No.",Location2.Code);
      CreateAndUpdateSalesLine(SalesLine,SalesHeader,SalesLine."No.",LibraryRandom.RandDec(100,2),Location2.Code);
      LibrarySales.ReleaseSalesDocument(SalesHeader);

      // Exercise: Create Warehouse Shipment.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      // Verify: Verify created Warehouse Shipments.
      FindWhseShipmentNo(SalesHeader."No.",Location2.Code);
    END;

    [Test]
    [HandlerFunctions(PickActivitiesMessageHandler)]
    PROCEDURE PickFromTransferOrder@24();
    VAR
      Item@1001 : Record 27;
      TransferLine@1005 : Record 5741;
      WarehouseRequest@1000 : Record 5765;
    BEGIN
      // Verify Inventory Pick created from Transfer Order.

      // Setup: Create Transfer Order.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateInitialSetupForTransferOrder(TransferLine,Item."No.",TRUE,FALSE,FALSE,FALSE);

      // Exercise: Create Inventory Pick.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Outbound Transfer",TransferLine."Document No.",FALSE,TRUE,FALSE);

      // Verify: Verify Inventory Pick created from Transfer Order.
      VerifyInventoryPutAwayPick(
        TransferLine."Document No.",TransferLine."Transfer-from Code",TransferLine."Item No.",TransferLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(PickActivitiesMessageHandler)]
    PROCEDURE RecreatePickFromTransferOrder@32();
    VAR
      Item@1001 : Record 27;
      TransferLine@1006 : Record 5741;
      WarehouseRequest@1000 : Record 5765;
    BEGIN
      // Verify Inventory Pick is not created again from Transfer Order if it is already created.

      // Setup: Create Transfer Order and create Inventory Pick.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateInitialSetupForTransferOrder(TransferLine,Item."No.",TRUE,FALSE,FALSE,FALSE);

      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Outbound Transfer",TransferLine."Document No.",FALSE,TRUE,FALSE);

      // Exercise: Re-create Inventory Pick.
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Outbound Transfer",TransferLine."Document No.",FALSE,TRUE,FALSE);

      // Verify: Verification done in PickActivitiesMessageHandler.
    END;

    [Test]
    [HandlerFunctions(TransferOrderMessageHandler)]
    PROCEDURE PutAwayFromTransferOrder@45();
    VAR
      Item@1000 : Record 27;
      TransferHeader@1001 : Record 5740;
      TransferLine@1004 : Record 5741;
      WarehouseReceiptHeader@1003 : Record 7316;
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      // Verify Inventory Put-away created from Transfer Order.

      // Setup: Create and Ship Transfer Order. Create Warehouse Receipt.
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateInitialSetupForTransferOrder(TransferLine,Item."No.",FALSE,FALSE,TRUE,TRUE);

      TransferHeader.GET(TransferLine."Document No.");
      GlobalDocumentNo := TransferHeader."No.";  // Assign in Global variable.
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);
      LibraryWarehouse.CreateWhseReceiptFromTO(TransferHeader);
      SelectWarehouseReceiptLine(WarehouseReceiptLine,TransferHeader."No.",WarehouseReceiptLine."Source Document"::"Inbound Transfer");
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");

      // Exercise: Post Warehouse Receipt.
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify: Verify Inventory Put-away created from Transfer Order.
      VerifyInventoryPutAwayPick(TransferHeader."No.",TransferLine."Transfer-to Code",TransferLine."Item No.",TransferLine.Quantity);
    END;

    [Test]
    PROCEDURE TransferLineDimension@41();
    VAR
      DefaultDimension@1002 : Record 352;
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      Location@1004 : Record 14;
      TransferLine@1003 : Record 5741;
      Quantity@1005 : Decimal;
    BEGIN
      // Verify Dimension on Transfer Line.

      // Setup: Create Item with Dimension and Post Item Journal Line.
      Initialize;
      Quantity := LibraryRandom.RandDec(100,2);  // Use Random value for Quantity.
      CreateItem(Item,Item."Costing Method"::FIFO);
      UpdateItemDimension(DefaultDimension,Item."No.");
      CreateLocation(Location,FALSE,FALSE,FALSE,FALSE);
      PostItemJournalLine(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Location.Code,Quantity,FALSE);

      // Exercise.
      CreateAndReleaseTransferOrder(TransferLine,Item."No.",Location.Code,FALSE,FALSE,Quantity);

      // Verify: Verify Dimension on Transfer Line.
      VerifyDimensionOnTransferLine(DefaultDimension,TransferLine."Dimension Set ID");
    END;

    [Test]
    PROCEDURE LocationOutboundWhseHandlingTime@53();
    VAR
      Customer@1003 : Record 18;
      Item@1001 : Record 27;
      Location@1000 : Record 14;
      SalesLine@1002 : Record 37;
    BEGIN
      // Verify Planned Shipment Date on Sales Line after setting the Outbound Whse. Handling Time on Location.

      // Setup: Create and modify Location for Outbound Whse. Handling Time and Create Item.
      Initialize;
      CreateAndModifyLocation(Location);
      CreateItem(Item,Item."Replenishment System"::Purchase);

      // Exercise.
      CreateSalesOrder(
        SalesLine,CreateCustomer(Location.Code,Customer.Reserve::Optional),Item."No.",Location.Code,LibraryRandom.RandDec(10,2));  // Use Random value for Quantity.

      // Verify.
      SalesLine.TESTFIELD("Planned Shipment Date",CALCDATE(Location."Outbound Whse. Handling Time",SalesLine."Shipment Date"));
    END;

    [Test]
    [HandlerFunctions(PickActivitiesMessageHandler,ItemTrackingLinesPageHandler)]
    PROCEDURE AssignTrackingToInventoryPickAndPost@49();
    VAR
      TransferLine@1005 : Record 5741;
      WarehouseActivityHeader@1003 : Record 5766;
      LotNo@1000 : Code[20];
    BEGIN
      // Verify Tracking on Posted Inventory Pick when Tracking is assigned on Inventory Pick.

      // Setup: Post Item with tracking. Create and release Transfer Order. Create Inventory Pick. Assign Tracking to Inventory Pick.
      Initialize;
      LotNo := LibraryUtility.GenerateGUID; // for ItemTrackingLinesPageHandler
      LibraryVariableStorage.Enqueue(LotNo);
      CreateWarehouseActivityHeader(WarehouseActivityHeader,TransferLine,LotNo);

      // Exercise: Post Inventory Pick.
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);

      // Verify: Verify Posted Inventory Pick created from Transfer Order.
      VerifyPostedInventoryPick(
        TransferLine."Document No.",TransferLine."Transfer-from Code",TransferLine."Item No.",TransferLine.Quantity,LotNo);
      LibraryVariableStorage.AssertEmpty;
    END;

    [Test]
    [HandlerFunctions(PickActivitiesMessageHandler,ItemTrackingLinesPageHandler)]
    PROCEDURE AssignTrackingToTransferOrderAndPostInventoryPick@55();
    VAR
      TransferLine@1005 : Record 5741;
      WarehouseRequest@1000 : Record 5765;
      WarehouseActivityHeader@1003 : Record 5766;
      WarehouseActivityLine@1002 : Record 5767;
      Direction@1004 : 'Outbound,Inbound';
      LotNo@1001 : Code[20];
    BEGIN
      // Verify Tracking on Posted Inventory Pick when Tracking is assigned on Transfer Order.

      // Setup: Post Item with Tracking. Create and release Transfer Order. Assign Tracking to Transfer Order. Create Inventory Pick.
      Initialize;
      LotNo := LibraryUtility.GenerateGUID;
      LibraryVariableStorage.Enqueue(LotNo); // for ItemTrackingLinesPageHandler
      LibraryVariableStorage.Enqueue(LotNo); // for ItemTrackingLinesPageHandler
      CreateInitialSetupForTransferOrder(TransferLine,CreateLotTrackedItem,TRUE,TRUE,FALSE,FALSE);
      TransferLine.OpenItemTrackingLines(Direction::Outbound);
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Outbound Transfer",TransferLine."Document No.",FALSE,TRUE,FALSE);
      FindWarehouseActivityNo(WarehouseActivityLine,TransferLine."Document No.",WarehouseActivityLine."Activity Type"::"Invt. Pick");
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);

      // Exercise: Post Inventory Pick.
      LibraryWarehouse.PostInventoryActivity(WarehouseActivityHeader,FALSE);

      // Verify: Verify Posted Inventory Pick created from Transfer Order.
      VerifyPostedInventoryPick(
        TransferLine."Document No.",TransferLine."Transfer-from Code",TransferLine."Item No.",TransferLine.Quantity,LotNo);
      LibraryVariableStorage.AssertEmpty;
    END;

    [Test]
    PROCEDURE SalesOrderOutboundWhseHandlingTime@8();
    VAR
      Customer@1003 : Record 18;
      Item@1001 : Record 27;
      Location@1000 : Record 14;
      SalesHeader@1004 : Record 36;
      SalesLine@1002 : Record 37;
      HandlingTime@1005 : DateFormula;
    BEGIN
      // Verify Planned Delivery Date and Planned Shipment Date on Sales Line after setting the Outbound Whse. Handling Time on Location Card and Sales Order.

      // Setup: Create and modify Location for Outbound Whse. Handling Time and Create Item.
      Initialize;
      CreateAndModifyLocation(Location);
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateSalesOrder(
        SalesLine,CreateCustomer(Location.Code,Customer.Reserve::Optional),Item."No.",Location.Code,LibraryRandom.RandDec(10,2));  // Use Random value for Quantity.
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");

      // Exercise.
      EVALUATE(HandlingTime,'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');  // Use Random value for Outbound Whse. Handling Time.
      SalesHeader.VALIDATE("Outbound Whse. Handling Time",HandlingTime);
      SalesHeader.MODIFY(TRUE);
      SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");

      // Verify.
      SalesLine.TESTFIELD("Planned Delivery Date",CALCDATE(Location."Outbound Whse. Handling Time",SalesLine."Shipment Date"));
      SalesLine.TESTFIELD("Planned Shipment Date",CALCDATE(SalesHeader."Outbound Whse. Handling Time",SalesLine."Shipment Date"));
    END;

    [Test]
    [HandlerFunctions(CalculatePlanReqWkshRequestPageHandler)]
    PROCEDURE RequisitionLineForItemWithSKU@60();
    VAR
      Location@1000 : Record 14;
      RequisitionLine@1008 : Record 246;
      StockkeepingUnit@1007 : Record 5700;
      Quantity@1009 : Decimal;
    BEGIN
      // Verify Requisition Line is created for Transfer when Item involved in Sales Order has SKU parameters set.

      // Setup.
      Initialize;
      Quantity := LibraryRandom.RandDec(10,2);  // Use Random value for Quantity.
      LibraryWarehouse.CreateLocation(Location);
      SetupForRequisitionWorksheet(StockkeepingUnit,Location.Code,Quantity);

      // Exercise: Open Requisition Worksheet for Calculate Plan and Carry Out Action Message.
      OpenReqWkshPageForCalcPlanAndCarryOutAction(CreateRequisitionWorksheetName(PAGE::"Req. Worksheet"),FALSE);

      // Verify: Verify Quantity on Requisition Line which is created for Transfer.
      FindRequisitionLine(RequisitionLine,StockkeepingUnit."Item No.",Location.Code);
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD("Replenishment System",StockkeepingUnit."Replenishment System");
      RequisitionLine.TESTFIELD(Quantity,Quantity);
    END;

    [Test]
    [HandlerFunctions(CalculatePlanReqWkshRequestPageHandler,CarryOutActionMsgRequestPageHandler,WorksheetNoMessageHandler)]
    PROCEDURE TransferOrderCreatedFromRequisitionWorksheet@85();
    VAR
      Location@1001 : Record 14;
      StockkeepingUnit@1008 : Record 5700;
      Quantity@1009 : Decimal;
    BEGIN
      // Verify Tranfer Order is created using Requisition Worksheet when Item involved in Sales Order has SKU parameters set.

      // Setup.
      Initialize;
      LibraryWarehouse.CreateLocation(Location);
      Quantity := LibraryRandom.RandDec(10,2);  // Use Random value for Quantity.
      SetupForRequisitionWorksheet(StockkeepingUnit,Location.Code,Quantity);

      // Exercise: Open Requisition Worksheet for Calculate Plan and Carry Out Action Message.
      OpenReqWkshPageForCalcPlanAndCarryOutAction(CreateRequisitionWorksheetName(PAGE::"Req. Worksheet"),TRUE);

      // Verify: Verify that Transfer Order is created and verify Quantity on Transfer Line.
      VerifyTransferOrder(StockkeepingUnit."Transfer-from Code",Location.Code,StockkeepingUnit."Item No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,AvailablePurchaseLinesPageHandler)]
    PROCEDURE ReservationOnSalesOrderWithMultipleLines@76();
    VAR
      Item@1001 : Record 27;
      PurchaseLine@1002 : Record 39;
      PurchaseLine2@1003 : Record 39;
      SalesLine@1004 : Record 37;
      WarehouseEmployee@1008 : Record 7301;
      LocationCode@1000 : Code[10];
    BEGIN
      // Verify Reservation On Sales Order With Multiple Lines.

      // Setup: Create Location, Purchase Orders and sales Order.
      Initialize;
      LocationCode := CreateLocationWithBin;
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationCode,FALSE);
      CreateAndReleasePurchaseOrder(PurchaseLine,Item."No.",LocationCode,LibraryRandom.RandDec(10,2));  // Use random for Quantity.
      CreateAndReleasePurchaseOrder(PurchaseLine2,Item."No.",LocationCode,LibraryRandom.RandDec(10,2));  // Use random for Quantity.

      // Assign values in global variables to verify in 'AvailablePurchaseLinesPageHandler'.
      GlobalDocumentNo := PurchaseLine."Document No.";
      GlobalDocumentNo2 := PurchaseLine2."Document No.";
      GlobalQuantity := PurchaseLine.Quantity;
      GlobalQuantity2 := PurchaseLine2.Quantity;
      CreateAndModifySalesOrder(SalesLine,LocationCode,Item."No.");

      // Exercise: Open Reservation page from Sales Order to Drilldown Total Quantity.
      OpenSalesOrderToReserve(SalesLine."Document No.");

      // Verification done in AvailablePurchaseLinesPageHandler.
    END;

    [Test]
    PROCEDURE CreatePickErrorWithoutRegisterPutAway@72();
    VAR
      WarehouseReceiptLine@1008 : Record 7317;
      WarehouseShipmentHeader@1000 : Record 7320;
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      // Verify handling error when PutAway is created but not Registered.

      // Setup: Create Location and Warehouse Employee, Wharehouse Receipt and Warehouse Shipment.
      Initialize;
      CreateWhseReceiptAndWhseShipmentWithBin(WarehouseReceiptLine,WarehouseShipmentLine);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");

      // Exercise.
      ASSERTERROR LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify handling error when PutAway is created but not Registered.
      Assert.ExpectedError(HandlingErr);
    END;

    [Test]
    PROCEDURE BinCodeOnWarehouseActivityLine@94();
    VAR
      WarehouseReceiptLine@1002 : Record 7317;
      WarehouseShipmentLine@1003 : Record 7321;
      WarehouseShipmentHeader@1000 : Record 7320;
      BinCode@1004 : Code[20];
    BEGIN
      // Verify Bin Code on created Pick after Put Away is Registered.

      // Setup: Create Warehouse Receipt and Warehouse Shipment, Register Put Away.
      Initialize;
      CreateWhseReceiptAndWhseShipmentWithBin(WarehouseReceiptLine,WarehouseShipmentLine);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      BinCode := RegisterWarehouseActivitywithBin(WarehouseReceiptLine."Source No.");

      // Exercise.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify Bin Code on Warehouse Pick.
      VerifyBinOnWarehousePick(WarehouseShipmentLine."Location Code",BinCode,WarehouseShipmentLine."Bin Code");
    END;

    [Test]
    PROCEDURE BinContentBeforeShippingSalesOrder@59();
    VAR
      WarehouseReceiptLine@1004 : Record 7317;
      WarehouseShipmentLine@1003 : Record 7321;
      WarehouseShipmentHeader@1001 : Record 7320;
      BinCode@1000 : Code[20];
    BEGIN
      // Verify Bin Content after Put Away is Registered but before posting Sales Order.

      // Setup: Create Warehouse Receipt and Warehouse Shipment, Register Put Away.
      Initialize;
      CreateWhseReceiptAndWhseShipmentWithBin(WarehouseReceiptLine,WarehouseShipmentLine);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      BinCode := RegisterWarehouseActivitywithBin(WarehouseReceiptLine."Source No.");

      // Exercise.
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);

      // Verify: Verify Bin Content before Shipping Sales Order.
      VerifyBinContent(BinCode,WarehouseReceiptLine.Quantity);
    END;

    [Test]
    PROCEDURE CarryOutActionMessageCombinesTransfersWithCombineTransferOrdersOption@84();
    VAR
      FromLocation@1000 : Record 14;
      FromLocation2@1008 : Record 14;
      ToLocation@1001 : Record 14;
      TransferRoute@1002 : Record 5742;
      Item@1003 : ARRAY [3] OF Record 27;
      TempTransferHeaderToPrint@1015 : TEMPORARY Record 5740;
      ReorderQty@1006 : Decimal;
      ItemFilter@1005 : Text;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Combine Transfer Orders]
      // [SCENARIO 130474] Transfer orders with the same from- and to- locations are combined when carrying out requisition plan with "Combine Transfer Orders" option

      // [GIVEN] 3 locations: L1, L2, L3
      CreateLocation(FromLocation,FALSE,FALSE,FALSE,FALSE);
      CreateLocation(FromLocation2,FALSE,FALSE,FALSE,FALSE);
      CreateLocation(ToLocation,FALSE,FALSE,FALSE,FALSE);

      CreateAndModifyTransferRoute(TransferRoute,FromLocation.Code,ToLocation.Code);
      CreateAndModifyTransferRoute(TransferRoute,FromLocation2.Code,ToLocation.Code);

      ReorderQty := LibraryRandom.RandDec(100,2);
      // [GIVEN] Item I1 with SKU on location L3, replenished by transfer from location L1
      CreateItemWithFixedReorderSKU(Item[1],ToLocation.Code,FromLocation.Code,ReorderQty * 2,ReorderQty);
      // [GIVEN] Item I2 with SKU on location L3, replenished by transfer from location L1
      CreateItemWithFixedReorderSKU(Item[2],ToLocation.Code,FromLocation.Code,ReorderQty * 2,ReorderQty);
      // [GIVEN] Item I3 with SKU on location L3, replenished by transfer from location L2
      CreateItemWithFixedReorderSKU(Item[3],ToLocation.Code,FromLocation2.Code,ReorderQty * 2,ReorderQty);

      ItemFilter := STRSUBSTNO('%1|%2|%3',Item[1]."No.",Item[2]."No.",Item[3]."No.");
      // [GIVEN] Calculate regenerative plan
      RunCalculateRegenerativePlan(ItemFilter,ToLocation.Code);
      // [WHEN] Carry out requisition messages with "Combine Transfer Orders" = TRUE
      CarryOutRequisitionLines(ItemFilter,TRUE,TempTransferHeaderToPrint);

      // [THEN] 2 transfer orders are prepared for printing
      Assert.AreEqual(2,TempTransferHeaderToPrint.COUNT,WrongNumberOfOrdersToPrintErr);
    END;

    [Test]
    PROCEDURE CarryOutActionMessageDoesNotCombineTransfersNoCombineTransferOrdersOption@104();
    VAR
      FromLocation@1008 : Record 14;
      FromLocation2@1007 : Record 14;
      ToLocation@1006 : Record 14;
      TransferRoute@1005 : Record 5742;
      Item@1004 : ARRAY [3] OF Record 27;
      TempTransferHeaderToPrint@1001 : TEMPORARY Record 5740;
      ReorderQty@1009 : Decimal;
      ItemFilter@1002 : Text;
    BEGIN
      // [FEATURE] [Planning Worksheet] [Combine Transfer Orders]
      // [SCENARIO 130474] Transfer orders with the same from- and to- locations are not combined when carrying out requisition plan without "Combine Transfer Orders" option

      // [GIVEN] 3 locations: L1, L2, L3
      CreateLocation(FromLocation,FALSE,FALSE,FALSE,FALSE);
      CreateLocation(FromLocation2,FALSE,FALSE,FALSE,FALSE);
      CreateLocation(ToLocation,FALSE,FALSE,FALSE,FALSE);

      CreateAndModifyTransferRoute(TransferRoute,FromLocation.Code,ToLocation.Code);
      CreateAndModifyTransferRoute(TransferRoute,FromLocation2.Code,ToLocation.Code);

      ReorderQty := LibraryRandom.RandDec(100,2);
      // [GIVEN] Item I1 with SKU on location L3, replenished by transfer from location L1
      CreateItemWithFixedReorderSKU(Item[1],ToLocation.Code,FromLocation.Code,ReorderQty * 2,ReorderQty);
      // [GIVEN] Item I2 with SKU on location L3, replenished by transfer from location L1
      CreateItemWithFixedReorderSKU(Item[2],ToLocation.Code,FromLocation.Code,ReorderQty * 2,ReorderQty);
      // [GIVEN] Item I3 with SKU on location L3, replenished by transfer from location L2
      CreateItemWithFixedReorderSKU(Item[3],ToLocation.Code,FromLocation2.Code,ReorderQty * 2,ReorderQty);

      ItemFilter := STRSUBSTNO('%1|%2|%3',Item[1]."No.",Item[2]."No.",Item[3]."No.");
      // [GIVEN] Calculate regenerative plan
      RunCalculateRegenerativePlan(ItemFilter,ToLocation.Code);
      // [WHEN] Carry out requisition messages with "Combine Transfer Orders" = FALSE
      CarryOutRequisitionLines(ItemFilter,FALSE,TempTransferHeaderToPrint);

      // [THEN] 3 transfer orders are prepared for printing
      Assert.AreEqual(3,TempTransferHeaderToPrint.COUNT,WrongNumberOfOrdersToPrintErr);
    END;

    [Test]
    [HandlerFunctions(CreateInvtPutawayPickMvmtRPH,MessageHandler,TransferReceiptReportDataHandler)]
    PROCEDURE PrintInboundTransfer@102();
    VAR
      Item@1002 : Record 27;
      TransferLine@1003 : Record 5741;
      TransferHeader@1005 : Record 5740;
      WarehouseActivityHeader@1007 : Record 5766;
      Location@1000 : Record 14;
      FileManagement@1001 : Codeunit 419;
      ReceiptFileName@1006 : Text;
    BEGIN
      // [FEATURE] [Transfer Order] [Warehouse] [Put-away] [Report]
      // [SCENARIO 375628] Post and print Inbound Transfer Warehouse Activity

      // [GIVEN] Warehouse Put-away Activity Header obtained from transfer shipment
      Initialize;
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateInitialSetupForTransferOrder(TransferLine,Item."No.",FALSE,FALSE,FALSE,TRUE);
      TransferHeader.GET(TransferLine."Document No.");
      Location.GET(TransferHeader."Transfer-to Code");
      Location.VALIDATE("Require Put-away",TRUE);
      Location.MODIFY(TRUE);
      LibraryInventory.PostTransferHeader(TransferHeader,TRUE,FALSE);
      TransferHeader.CreateInvtPutAwayPick;
      WarehouseActivityHeader.SETRANGE("Location Code",TransferHeader."Transfer-to Code");
      WarehouseActivityHeader.FINDFIRST;
      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);

      // Arguments for TransferReceiptReportDataHandler
      ReceiptFileName := FileManagement.ServerTempFileName('xlsx');
      LibraryVariableStorage.Enqueue(TransferHeader."Transfer-from Code");
      LibraryVariableStorage.Enqueue(ReceiptFileName);

      // [WHEN] Post and Print Acitivity
      LibraryWarehouse.PostAndPrintInventoryActivity(WarehouseActivityHeader,FALSE,TRUE);

      // [THEN] Report output file created
      LibraryReportValidation.SetFullFileName(ReceiptFileName);
      LibraryReportValidation.VerifyCellValueByRef('G',17,1,FindReceiptNoByLocation(TransferHeader."Transfer-from Code"));
      LibraryVariableStorage.AssertEmpty;
    END;

    [Test]
    [HandlerFunctions(PickActivitiesMessageHandler,ItemTrackingLinesPageHandler,TransferShipmentReportDataHandler)]
    PROCEDURE PrintOutboundTransfer@103();
    VAR
      TransferLine@1005 : Record 5741;
      TransferHeader@1001 : Record 5740;
      WarehouseActivityHeader@1003 : Record 5766;
      FileManagement@1002 : Codeunit 419;
      LotNo@1000 : Code[20];
      ShipmentFileName@1006 : Text;
    BEGIN
      // [FEATURE] [Transfer Order] [Warehouse] [Pick] [Report]
      // [SCENARIO 375628] Post and print Outbound Transfer Warehouse Activity

      // [GIVEN] Warehouse Pick Activity Header obtained from transfer shipment
      Initialize;
      LotNo := LibraryUtility.GenerateGUID; // for ItemTrackingLinesPageHandler
      LibraryVariableStorage.Enqueue(LotNo);
      CreateWarehouseActivityHeader(WarehouseActivityHeader,TransferLine,LotNo);
      TransferHeader.GET(TransferLine."Document No.");

      // Arguments for TransferShipmentReportDataHandler
      ShipmentFileName := FileManagement.ServerTempFileName('xlsx');
      LibraryVariableStorage.Enqueue(TransferHeader."Transfer-from Code");
      LibraryVariableStorage.Enqueue(ShipmentFileName);

      // [WHEN] Post and Print Acitivity
      LibraryWarehouse.PostAndPrintInventoryActivity(WarehouseActivityHeader,FALSE,TRUE);

      // [THEN] Report output file created
      LibraryReportValidation.SetFullFileName(ShipmentFileName);
      LibraryReportValidation.VerifyCellValueByRef('I',24,1,FindShipmentNoByLocation(TransferHeader."Transfer-from Code"));
      LibraryVariableStorage.AssertEmpty;
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      ClearGlobalVariable;
      LibraryVariableStorage.Clear;
      CLEAR(LibraryReportValidation);

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE AssignGlobalVariables@19(ItemNo@1000 : Code[20];ItemNo2@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      GlobalItemNo := ItemNo;  // Assign in global variable.
      GlobalItemNo2 := ItemNo2;  // Assign in global variable.
      GlobalLocationCode := LocationCode;  // Assign in global variable.
    END;

    LOCAL PROCEDURE OpenPlanWkshPageForCalcRegenPlan@99(Name@1001 : Code[10]);
    VAR
      PlanningWorksheet@1000 : TestPage 99000852;
    BEGIN
      COMMIT;
      PlanningWorksheet.OPENEDIT;
      PlanningWorksheet.CurrentWkshBatchName.SETVALUE(Name);
      PlanningWorksheet.CalculateRegenerativePlan.INVOKE;  // Open report on Handler CalculatePlanPlanWkshRequestPageHandler.
      PlanningWorksheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE OpenReqWkshPageForCalcPlanAndCarryOutAction@65(Name@1001 : Code[10];CarryOutAction@1002 : Boolean);
    VAR
      ReqWorksheet@1000 : TestPage 291;
    BEGIN
      COMMIT;
      ReqWorksheet.OPENEDIT;
      ReqWorksheet.CurrentJnlBatchName.SETVALUE(Name);
      ReqWorksheet.CalculatePlan.INVOKE;  // Open report on Handler CalculatePlanReqWkshRequestPageHandler.
      IF CarryOutAction THEN
        ReqWorksheet.CarryOutActionMessage.INVOKE;  // Open report on Handler CarryOutActionMsgRequestPageHandler.
      ReqWorksheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE CarryOutRequisitionLines@117(ItemNoFilter@1001 : Text;CombineTransferOrders@1000 : Boolean;VAR TempTransferHeader@1002 : TEMPORARY Record 5740);
    VAR
      RequisitionLine@1006 : Record 246;
      CarryOutAction@1003 : Codeunit 99000813;
      SourceType@1005 : 'Purchase,Transfer,Production,Assembly';
      Choice@1004 : ' ,Make Trans. Orders,Make Trans. Orders & Print,Copy to Req. Wksh';
    BEGIN
      CarryOutAction.SetSplitTransferOrders(NOT CombineTransferOrders);
      CarryOutAction.SetTryParameters(
        SourceType::Transfer,Choice::"Make Trans. Orders & Print",
        RequisitionLine."Worksheet Template Name",RequisitionLine."Journal Batch Name");

      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETFILTER("No.",ItemNoFilter);
      RequisitionLine.MODIFYALL("Accept Action Message",TRUE);
      RequisitionLine.FINDSET;
      REPEAT
        CarryOutAction.RUN(RequisitionLine);
      UNTIL RequisitionLine.NEXT = 0;

      CarryOutAction.GetTransferOrdersToPrint(TempTransferHeader);
    END;

    LOCAL PROCEDURE ClearGlobalVariable@18();
    BEGIN
      // Clear Global variables.
      GlobalItemNo := '';
      GlobalItemNo2 := '';
      GlobalLocationCode := '';
      GlobalMessageCounter := 0;
      GlobalDocumentNo := '';
      GlobalDocumentNo2 := '';
      GlobalQuantity := 0;
      GlobalQuantity2 := 0;
    END;

    LOCAL PROCEDURE CreateBin@86(LocationCode@1000 : Code[10]) : Code[20];
    VAR
      Bin@1001 : Record 7354;
    BEGIN
      LibraryWarehouse.CreateBin(Bin,LocationCode,LibraryUtility.GenerateGUID,'','');  // Use blank value for Zone Code and Bin Type Code.
      EXIT(Bin.Code);
    END;

    LOCAL PROCEDURE CreateAndCertifyProductionBOM@77(VAR ProductionBOMHeader@1000 : Record 99000771;BaseUnitOfMeasure@1003 : Code[10];No@1004 : Code[20];VariantCode@1006 : Code[10]);
    VAR
      ProductionBOMLine@1002 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitOfMeasure);
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,No,1);  // Use blank value for Version Code and 1 for Quantity per.
      ProductionBOMLine.VALIDATE("Variant Code",VariantCode);
      ProductionBOMLine.MODIFY(TRUE);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndModifyLocation@64(VAR Location@1000 : Record 14);
    BEGIN
      CreateLocation(Location,FALSE,FALSE,FALSE,FALSE);
      EVALUATE(Location."Outbound Whse. Handling Time",'<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>');  // Use Random value for Outbound Whse. Handling Time.
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndModifySalesOrder@88(VAR SalesLine@1002 : Record 37;LocationCode@1000 : Code[10];ItemNo@1001 : Code[20]);
    VAR
      Customer@1003 : Record 18;
    BEGIN
      CreateSalesOrder(SalesLine,CreateCustomer(LocationCode,Customer.Reserve::Optional),ItemNo,LocationCode,1);  // Use 1 for Quantity since it is not important.
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));  // Add Random Days to Shipment date.
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndModifyTransferRoute@44(VAR TransferRoute@1000 : Record 5742;TransferFrom@1006 : Code[10];TransferTo@1004 : Code[10]);
    VAR
      InTransitLocation@1008 : Record 14;
      ShippingAgent@1003 : Record 291;
      ShippingAgentServices@1002 : Record 5790;
      ShippingTime@1001 : DateFormula;
    BEGIN
      LibraryWarehouse.CreateInTransitLocation(InTransitLocation);
      LibraryInventory.CreateShippingAgent(ShippingAgent);
      EVALUATE(ShippingTime,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>');  // Use Random value for Shipping Time.
      LibraryInventory.CreateShippingAgentService(ShippingAgentServices,ShippingAgent.Code,ShippingTime);
      LibraryWarehouse.CreateAndUpdateTransferRoute(
        TransferRoute,TransferFrom,TransferTo,InTransitLocation.Code,ShippingAgent.Code,ShippingAgentServices.Code);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@256(VAR PurchaseLine@1004 : Record 39;ItemNo@1001 : Code[20];LocationCode@1003 : Code[10];Quantity@1006 : Decimal);
    VAR
      PurchaseHeader@1005 : Record 38;
      Vendor@1000 : Record 23;
      LibraryPurchase@1002 : Codeunit 130512;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);  // Integer value is required for Quantity.
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrder@12(VAR SalesLine@1004 : Record 37;CustomerNo@1002 : Code[20];ItemNo@1001 : Code[20];LocationCode@1003 : Code[10];Quantity@1008 : Decimal);
    VAR
      SalesHeader@1005 : Record 36;
    BEGIN
      CreateSalesOrder(SalesLine,CustomerNo,ItemNo,LocationCode,Quantity);
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrder@79(VAR TransferLine@1001 : Record 5741;ItemNo@1012 : Code[20];LocationCode@1006 : Code[10];RequireReceive@1005 : Boolean;RequirePutaway@1004 : Boolean;Quantity@1007 : Decimal);
    VAR
      Location@1000 : Record 14;
      Location2@1008 : Record 14;
      TransferHeader@1003 : Record 5740;
    BEGIN
      CreateLocationWithPostingSetup(Location,FALSE,FALSE,RequireReceive,RequirePutaway);
      LibraryWarehouse.CreateInTransitLocation(Location2);
      LibraryWarehouse.CreateTransferHeader(TransferHeader,LocationCode,Location.Code,Location2.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE CreateAndPostShippingAndReceiptInTransferOrder@111(VAR TransferLine@1006 : Record 5741;ItemNo@1004 : Code[20];LocationCode@1003 : Code[10];Quantity@1000 : Decimal;QtytoReceive@1001 : Decimal);
    VAR
      TransferHeader@1005 : Record 5740;
    BEGIN
      CreateTransferHeaderAndTransferLineWithChangedQtytoShip(TransferHeader,TransferLine,ItemNo,LocationCode,Quantity,QtytoReceive);
      LibraryInventory.PostTransferHeader(TransferHeader,TRUE,FALSE);
      SetQtyToReceiveInTransferLine(TransferLine,QtytoReceive);
      LibraryInventory.PostTransferHeader(TransferHeader,FALSE,TRUE);
      TransferLine.FIND;
    END;

    LOCAL PROCEDURE CreateAndPostShippingAndReceiptInTransferOrderWithTwoLines@115(VAR TransferHeader@1005 : Record 5740;VAR TransferLine@1002 : ARRAY [2] OF Record 5741;Item@1004 : ARRAY [2] OF Record 27;LocationCode@1003 : Code[10];Quantity@1000 : Decimal;QtytoReceive@1001 : Decimal);
    BEGIN
      CreateTransferHeaderAndTransferLineWithChangedQtytoShip(
        TransferHeader,TransferLine[2],Item[2]."No.",LocationCode,Quantity,QtytoReceive);
      LibraryInventory.CreateTransferLine(TransferHeader,TransferLine[1],Item[1]."No.",Quantity);
      LibraryInventory.PostTransferHeader(TransferHeader,TRUE,FALSE);
      SetQtyToReceiveInTransferLine(TransferLine[2],QtytoReceive);
      SetQtyToReceiveInTransferLine(TransferLine[1],Quantity);
      LibraryInventory.PostTransferHeader(TransferHeader,FALSE,TRUE);
      TransferLine[1].FIND;
    END;

    LOCAL PROCEDURE CreateAndReleaseWarehouseShipmentFromSalesOrder@137(VAR WarehouseShipmentHeader@1002 : Record 7320;SalesLine@1001 : Record 37);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      WarehouseShipmentHeader.GET(FindWhseShipmentNo(SalesHeader."No.",SalesLine."Location Code"));
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE CreateAndUpdateProductionForecast@119(VAR ProductionForecastEntry@1000 : Record 99000852;Name@1003 : Code[10];Date@1001 : Date;ItemNo@1004 : Code[20];LocationCode@1005 : Code[10];Quantity@1002 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionForecastEntry(ProductionForecastEntry,Name,ItemNo,'',Date,FALSE);
      ProductionForecastEntry.VALIDATE("Location Code",LocationCode);
      ProductionForecastEntry.VALIDATE("Forecast Quantity (Base)",Quantity);
      ProductionForecastEntry.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateProductionBOM@16(VAR ParentItem@1006 : Record 27;ChildItemNo@1000 : Code[20];VariantCode@1003 : Code[10]);
    VAR
      ProductionBOMHeader@1001 : Record 99000771;
    BEGIN
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ParentItem."Base Unit of Measure",ChildItemNo,VariantCode);
      UpdateItem(ParentItem,ProductionBOMHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndUpdateSalesLine@67(VAR SalesLine@1000 : Record 37;SalesHeader@1004 : Record 36;ItemNo@1001 : Code[20];Quantity@1002 : Decimal;LocationCode@1003 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndUpdateStockKeepingUnit@81(VAR StockkeepingUnit@1004 : Record 5700;Item@1000 : Record 27;LocationCode@1002 : Code[10];TransferFromCode@1001 : Code[10]);
    VAR
      CreatePerOption@1003 : 'Location,Variant,Location & Variant';
    BEGIN
      Item.SETRANGE("Location Filter",LocationCode);
      LibraryInventory.CreateStockKeepingUnit(Item,CreatePerOption::Location,FALSE,FALSE);  // Use False for Item InInventory Only and Replace Previous SKUs fields.
      StockkeepingUnit.GET(LocationCode,Item."No.",'');  // Use blank value for Variant Code.
      StockkeepingUnit.VALIDATE("Replenishment System",StockkeepingUnit."Replenishment System"::Transfer);
      StockkeepingUnit.VALIDATE("Transfer-from Code",TransferFromCode);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@7(VAR ItemJournalLine@1003 : Record 83;EntryType@1004 : Option;ItemNo@1002 : Code[20];LocationCode@1000 : Code[10];Quantity@1005 : Decimal);
    VAR
      ItemJournalBatch@1001 : Record 233;
    BEGIN
      SelectAndClearItemJournalBatch(ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithFixedReorderSKU@127(VAR Item@1000 : Record 27;LocationCode@1003 : Code[10];TransferFromCode@1002 : Code[10];ReorderPoint@1004 : Decimal;ReorderQty@1005 : Decimal);
    VAR
      SKU@1001 : Record 5700;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateAndUpdateStockKeepingUnit(SKU,Item,LocationCode,TransferFromCode);
      UpdateSKUReorderingPolicy(SKU,SKU."Reordering Policy"::"Fixed Reorder Qty.",ReorderPoint,ReorderQty);
    END;

    LOCAL PROCEDURE CreateLocationWithBin@87() : Code[10];
    VAR
      Location@1000 : Record 14;
    BEGIN
      CreateLocation(Location,TRUE,TRUE,TRUE,TRUE);
      Location.VALIDATE("Bin Mandatory",TRUE);
      Location.MODIFY(TRUE);
      EXIT(Location.Code);
    END;

    LOCAL PROCEDURE CreateCustomer@35(LocationCode@1001 : Code[10];Reserve@1002 : Option) : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Location Code",LocationCode);
      Customer.VALIDATE(Reserve,Reserve);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateDemandAsNegativeAdjustment@22(VAR ParentItem@1000 : Record 27;LocationCode@1001 : Code[10];Quantity@1003 : Decimal);
    VAR
      ChildItem@1006 : Record 27;
      ItemVariant@1005 : Record 5401;
      ItemVariant2@1004 : Record 5401;
    BEGIN
      CreateItem(ChildItem,ChildItem."Replenishment System"::Purchase);
      LibraryInventory.CreateItemVariant(ItemVariant,ChildItem."No.");
      LibraryInventory.CreateItemVariant(ItemVariant2,ChildItem."No.");
      UpdateItemWithBOMAndPostItemJournal(ParentItem,ChildItem."No.",LocationCode,ItemVariant.Code,Quantity);
    END;

    LOCAL PROCEDURE CreateDemandAsForecast@23(VAR ParentItem@1002 : Record 27;LocationCode@1001 : Code[10];Quantity@1003 : Decimal);
    VAR
      ChildItem@1007 : Record 27;
      ItemVariant@1006 : Record 5401;
      ItemVariant2@1005 : Record 5401;
      ProductionForecastEntry@1009 : Record 99000852;
    BEGIN
      CreateItem(ChildItem,ChildItem."Replenishment System"::Purchase);
      LibraryInventory.CreateItemVariant(ItemVariant,ChildItem."No.");
      LibraryInventory.CreateItemVariant(ItemVariant2,ChildItem."No.");
      CreateAndUpdateProductionBOM(ParentItem,ChildItem."No.",ItemVariant.Code);
      CreateProductionForecastSetup(ProductionForecastEntry,ParentItem."No.",LocationCode,Quantity);
    END;

    LOCAL PROCEDURE CreateFullWarehouseSetup@33(VAR Location@1000 : Record 14);
    VAR
      WarehouseEmployee@1001 : Record 7301;
    BEGIN
      WarehouseEmployee.DELETEALL(TRUE);
      LibraryWarehouse.CreateFullWMSLocation(Location,2);  // Value used for number of bin per zone.
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,Location.Code,TRUE);
    END;

    LOCAL PROCEDURE CreateInitialSetupForPickWorksheet@134(VAR SalesLine@1001 : Record 37;CustomerNo@1003 : Code[20];LocationCode@1004 : Code[10];Quantity@1005 : Decimal) : Code[20];
    VAR
      PurchaseLine@1000 : Record 39;
      WarehouseShipmentHeader@1002 : Record 7320;
    BEGIN
      CreateWarehouseReceiptFromPurchaseOrder(PurchaseLine,LocationCode,Quantity);
      PostWarehouseReceipt(PurchaseLine."Document No.");
      RegisterWarehouseActivity(PurchaseLine."Document No.");
      CreateAndReleaseSalesOrder(SalesLine,CustomerNo,PurchaseLine."No.",PurchaseLine."Location Code",Quantity / 2);  // Take half of Purchase Quantity.
      CreateAndReleaseWarehouseShipmentFromSalesOrder(WarehouseShipmentHeader,SalesLine);
      EXIT(WarehouseShipmentHeader."No.");
    END;

    LOCAL PROCEDURE CreateInitialSetupForTransferOrder@74(VAR TransferLine@1000 : Record 5741;ItemNo@1005 : Code[20];RequirePick@1006 : Boolean;Tracking@1007 : Boolean;RequireReceive@1009 : Boolean;RequirePutaway@1008 : Boolean);
    VAR
      ItemJournalLine@1004 : Record 83;
      Location@1002 : Record 14;
      Quantity@1003 : Decimal;
    BEGIN
      Quantity := LibraryRandom.RandInt(100);  // Use Integer Random value for Lot Tracked Item Quantity.
      CreateLocationWithPostingSetup(Location,FALSE,RequirePick,FALSE,FALSE);
      PostItemJournalLine(ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Location.Code,Quantity,Tracking);
      CreateAndReleaseTransferOrder(TransferLine,ItemNo,Location.Code,RequireReceive,RequirePutaway,Quantity);
    END;

    LOCAL PROCEDURE CreateItem@14(VAR Item@1000 : Record 27;ReplenishmentSystem@1001 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);

      // Lot-for-Lot Planning parameters.
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Reordering Policy",Item."Reordering Policy"::"Lot-for-Lot");
      Item.VALIDATE("Include Inventory",TRUE);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocation@25(VAR Location@1000 : Record 14;RequireShipment@1001 : Boolean;RequirePick@1002 : Boolean;RequireReceive@1004 : Boolean;RequirePutaway@1003 : Boolean);
    BEGIN
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      Location.VALIDATE("Require Shipment",RequireShipment);
      Location.VALIDATE("Require Pick",RequirePick);
      Location.VALIDATE("Require Receive",RequireReceive);
      Location.VALIDATE("Require Put-away",RequirePutaway);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocationWithPostingSetup@66(VAR Location@1000 : Record 14;RequireShipment@1004 : Boolean;RequirePick@1003 : Boolean;RequireReceive@1002 : Boolean;RequirePutaway@1001 : Boolean);
    BEGIN
      CreateLocation(Location,RequireShipment,RequirePick,RequireReceive,RequirePutaway);
    END;

    LOCAL PROCEDURE CreateLotTrackedItem@54() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateTrackedItem(Item,'','',CreateLotTrackingCode);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateLotTrackingCode@51() : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,TRUE);
      ItemTrackingCode.VALIDATE("Lot Warehouse Tracking",TRUE);
      ItemTrackingCode.MODIFY(TRUE);
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreatePickFromPickWorksheet@39();
    VAR
      PickWorksheet@1000 : TestPage 7345;
    BEGIN
      GetWarehouseDocumentFromPickWorksheet;
      PickWorksheet.OPENEDIT;
      COMMIT;
      PickWorksheet.CreatePick.INVOKE;
      PickWorksheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateProductionForecastSetup@120(VAR ProductionForecastEntry@1005 : Record 99000852;ParentItemNo@1002 : Code[20];LocationCode@1000 : Code[10];Quantity@1001 : Decimal);
    VAR
      ProductionForecastName@1003 : Record 99000851;
    BEGIN
      // Calculate Forecast Date earlier than WORKDATE using Ranndom value.
      LibraryManufacturing.CreateProductionForecastName(ProductionForecastName);
      UpdateForecastOnManufacturingSetup(ProductionForecastName.Name,TRUE);
      CreateAndUpdateProductionForecast(
        ProductionForecastEntry,ProductionForecastName.Name,CALCDATE('<' + FORMAT(-LibraryRandom.RandInt(20)) + 'D>',WORKDATE),
        ParentItemNo,LocationCode,Quantity);
    END;

    LOCAL PROCEDURE CreateRequisitionWorksheetName@50(PageID@1001 : Integer) : Code[10];
    VAR
      RequisitionWkshName@1002 : Record 245;
      ReqWkshTemplate@1000 : Record 244;
    BEGIN
      ReqWkshTemplate.SETRANGE("Page ID",PageID);
      ReqWkshTemplate.FINDFIRST;
      LibraryPlanning.CreateRequisitionWkshName(RequisitionWkshName,ReqWkshTemplate.Name);
      EXIT(RequisitionWkshName.Name);
    END;

    LOCAL PROCEDURE CreateSalesOrder@43(VAR SalesLine@1005 : Record 37;CustomerNo@1001 : Code[20];ItemNo@1002 : Code[20];LocationCode@1004 : Code[10];Quantity@1003 : Decimal);
    VAR
      SalesHeader@1006 : Record 36;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      CreateAndUpdateSalesLine(SalesLine,SalesHeader,ItemNo,Quantity,LocationCode);
    END;

    LOCAL PROCEDURE CreateSalesOrderWithMultipleLines@73(VAR SalesHeader@1000 : Record 36;LocationCode@1001 : Code[10];LocationCode2@1002 : Code[10]);
    VAR
      Customer@1006 : Record 18;
      SalesLine@1005 : Record 37;
      Item@1004 : Record 27;
    BEGIN
      // Create and release Sales Order with multiple lines with Random Quantity.
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateSalesOrder(
        SalesLine,CreateCustomer('',Customer.Reserve::Never),Item."No.",LocationCode,LibraryRandom.RandDec(100,2));  // Use blank value for Location Code.
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      CreateAndUpdateSalesLine(SalesLine,SalesHeader,Item."No.",LibraryRandom.RandDec(100,2),LocationCode2);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateTransferHeaderAndTransferLine@128(VAR TransferHeader@1005 : Record 5740;VAR TransferLine@1001 : Record 5741;ItemNo@1004 : Code[20];LocationCode@1003 : Code[10];Quantity@1002 : Decimal);
    VAR
      Location@1006 : ARRAY [2] OF Record 14;
    BEGIN
      CreateLocationWithPostingSetup(Location[1],FALSE,FALSE,FALSE,FALSE);
      LibraryWarehouse.CreateInTransitLocation(Location[2]);
      LibraryInventory.CreateTransferHeader(TransferHeader,LocationCode,Location[1].Code,Location[2].Code);
      LibraryInventory.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateTransferHeaderAndTransferLineWithChangedQtytoShip@131(VAR TransferHeader@1004 : Record 5740;VAR TransferLine@1003 : Record 5741;ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];Quantity@1000 : Decimal;QtytoShip@1006 : Decimal);
    BEGIN
      CreateTransferHeaderAndTransferLine(TransferHeader,TransferLine,ItemNo,LocationCode,Quantity);
      TransferLine.VALIDATE("Qty. to Ship",QtytoShip);
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptFromPurchaseOrder@70(VAR PurchaseLine@1001 : Record 39;LocationCode@1004 : Code[10];Quantity@1005 : Decimal);
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1003 : Record 38;
    BEGIN
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateAndReleasePurchaseOrder(PurchaseLine,Item."No.",LocationCode,Quantity);
      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseLine."Document No.");
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateAndModifyWarehouseReceiptLine@90(VAR WarehouseReceiptLine@1000 : Record 7317;PurchaseHeader@1002 : Record 38;LocationCode@1004 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      SelectWarehouseReceiptLine(WarehouseReceiptLine,PurchaseHeader."No.",WarehouseReceiptLine."Source Document"::"Purchase Order");
      WarehouseReceiptLine.VALIDATE("Bin Code",CreateBin(LocationCode));
      WarehouseReceiptLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndModifyWarehouseShipmentLine@89(VAR WarehouseShipmentLine@1002 : Record 7321;SalesHeader@1000 : Record 36;LocationCode@1001 : Code[10]);
    BEGIN
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      SelectWarehouseShipmentLine(WarehouseShipmentLine,SalesHeader."No.",WarehouseShipmentLine."Source Document"::"Sales Order");
      WarehouseShipmentLine.VALIDATE("Bin Code",CreateBin(LocationCode));
      WarehouseShipmentLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWhseReceiptAndWhseShipmentWithBin@95(VAR WarehouseReceiptLine@1005 : Record 7317;VAR WarehouseShipmentLine@1001 : Record 7321);
    VAR
      Customer@1012 : Record 18;
      Item@1010 : Record 27;
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1008 : Record 39;
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      WarehouseReceiptHeader@1000 : Record 7316;
      WarehouseShipmentHeader@1006 : Record 7320;
      WarehouseEmployee@1004 : Record 7301;
      LocationCode@1013 : Code[10];
    BEGIN
      // Create Location and Warehouse Employee.
      LocationCode := CreateLocationWithBin;
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationCode,FALSE);

      // Create and Post Warehouse Receipt.
      CreateAndReleasePurchaseOrder(PurchaseLine,Item."No.",LocationCode,LibraryRandom.RandDec(10,2));  // Use random for Quantity.
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      CreateAndModifyWarehouseReceiptLine(WarehouseReceiptLine,PurchaseHeader,LocationCode);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Create Warehouse Shipment Line.
      CreateAndReleaseSalesOrder(
        SalesLine,CreateCustomer(LocationCode,Customer.Reserve::Optional),Item."No.",LocationCode,LibraryRandom.RandDec(10,2));  // Take half of Purchase Quantity.
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      CreateAndModifyWarehouseShipmentLine(WarehouseShipmentLine,SalesHeader,LocationCode);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
    END;

    LOCAL PROCEDURE CreateWarehouseActivityHeader@154(VAR WarehouseActivityHeader@1002 : Record 5766;VAR TransferLine@1000 : Record 5741;LotNo@1005 : Code[20]);
    VAR
      WarehouseRequest@1003 : Record 5765;
      WarehouseActivityLine@1001 : Record 5767;
    BEGIN
      CreateInitialSetupForTransferOrder(TransferLine,CreateLotTrackedItem,TRUE,TRUE,FALSE,FALSE);
      LibraryWarehouse.CreateInvtPutPickMovement(
        WarehouseRequest."Source Document"::"Outbound Transfer",TransferLine."Document No.",FALSE,TRUE,FALSE);
      FindWarehouseActivityNo(WarehouseActivityLine,TransferLine."Document No.",WarehouseActivityLine."Activity Type"::"Invt. Pick");
      WarehouseActivityLine.VALIDATE("Lot No.",LotNo);
      WarehouseActivityLine.MODIFY(TRUE);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE SetQtyToReceiveInTransferLine@123(VAR TransferLine@1000 : Record 5741;Quantity@1001 : Decimal);
    BEGIN
      TransferLine.FIND;
      TransferLine.VALIDATE("Qty. to Receive",Quantity);
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindRequisitionLine@3(VAR RequisitionLine@1000 : Record 246;No@1001 : Code[20];LocationCode@1002 : Code[10]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",No);
      RequisitionLine.SETRANGE("Location Code",LocationCode);
    END;

    LOCAL PROCEDURE FindProductionBOMLine@17(VAR ProductionBOMLine@1000 : Record 99000772;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      ProductionBOMLine.SETRANGE("Production BOM No.",ProductionBOMNo);
      ProductionBOMLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesLine@78(VAR SalesLine@1000 : Record 37;DocumentType@1001 : Option;DocumentNo@1002 : Code[20];LocationCode@1003 : Code[10]);
    BEGIN
      SalesLine.SETRANGE("Document Type",DocumentType);
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE("Location Code",LocationCode);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityNo@20(VAR WarehouseActivityLine@1000 : Record 5767;SourceNo@1002 : Code[20];ActivityType@1003 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Activity Type",ActivityType);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseReceiptLine@58(VAR WarehouseReceiptLine@1000 : Record 7317;SourceDocument@1002 : Option;SourceNo@1003 : Code[20]);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWhseShipmentNo@47(SourceNo@1000 : Code[20];LocationCode@1003 : Code[10]) : Code[20];
    VAR
      WarehouseShipmentLine@1002 : Record 7321;
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",WarehouseShipmentLine."Source Document"::"Sales Order");
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.SETRANGE("Location Code",LocationCode);
      WarehouseShipmentLine.FINDFIRST;
      EXIT(WarehouseShipmentLine."No.");
    END;

    LOCAL PROCEDURE FindShipmentNoByLocation@106(LocationCode@1000 : Code[10]) : Code[20];
    VAR
      TransferShipmentHeader@1001 : Record 5744;
    BEGIN
      TransferShipmentHeader.SETRANGE("Transfer-from Code",LocationCode);
      TransferShipmentHeader.FINDFIRST;
      EXIT(TransferShipmentHeader."No.");
    END;

    LOCAL PROCEDURE FindReceiptNoByLocation@107(LocationCode@1001 : Code[10]) : Code[20];
    VAR
      TransferReceiptHeader@1000 : Record 5746;
    BEGIN
      TransferReceiptHeader.SETRANGE("Transfer-from Code",LocationCode);
      TransferReceiptHeader.FINDFIRST;
      EXIT(TransferReceiptHeader."No.");
    END;

    LOCAL PROCEDURE GetWarehouseDocumentFromPickWorksheet@38();
    VAR
      PickWorksheet@1000 : TestPage 7345;
    BEGIN
      PickWorksheet.OPENEDIT;
      PickWorksheet."Get Warehouse Documents".INVOKE;
      PickWorksheet.OK.INVOKE;
    END;

    LOCAL PROCEDURE OpenSalesOrderToEnterQuantity@46(No@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      SalesOrder@1000 : TestPage 42;
    BEGIN
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",No);
      SalesOrder.SalesLines.Quantity.SETVALUE(Quantity);
      SalesOrder.OK.INVOKE;
    END;

    LOCAL PROCEDURE OpenSalesOrderToReserve@91(No@1000 : Code[20]);
    VAR
      SalesOrder@1001 : TestPage 42;
    BEGIN
      COMMIT;
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",No);
      SalesOrder.SalesLines.Reserve.INVOKE;
    END;

    LOCAL PROCEDURE PostItemJournalLine@34(EntryType@1001 : Option;ItemNo@1002 : Code[20];LocationCode@1000 : Code[10];Quantity@1003 : Decimal;Tracking@1005 : Boolean);
    VAR
      ItemJournalLine@1004 : Record 83;
    BEGIN
      CreateItemJournalLine(ItemJournalLine,EntryType,ItemNo,LocationCode,Quantity);
      IF Tracking THEN
        ItemJournalLine.OpenItemTrackingLines(FALSE);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE PostWarehouseReceipt@141(SourceNo@1001 : Code[20]);
    VAR
      WarehouseReceiptHeader@1000 : Record 7316;
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      FindWarehouseReceiptLine(WarehouseReceiptLine,WarehouseReceiptLine."Source Document"::"Purchase Order",SourceNo);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@142(SourceNo@1001 : Code[20]);
    VAR
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityNo(WarehouseActivityLine,SourceNo,WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE RegisterWarehouseActivitywithBin@112(SourceNo@1001 : Code[20]) : Code[20];
    VAR
      WarehouseActivityHeader@1002 : Record 5766;
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityNo(WarehouseActivityLine,SourceNo,WarehouseActivityLine."Activity Type"::"Put-away");
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Place);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.VALIDATE("Bin Code",CreateBin(WarehouseActivityLine."Location Code"));
      WarehouseActivityLine.MODIFY(TRUE);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
      EXIT(WarehouseActivityLine."Bin Code");
    END;

    LOCAL PROCEDURE RunCalculateRegenerativePlan@10(ItemFilter@1000 : Text;LocationCode@1002 : Code[10]);
    VAR
      Item@1003 : Record 27;
    BEGIN
      Item.SETFILTER("No.",ItemFilter);
      Item.VALIDATE("Location Filter",LocationCode);
      LibraryPlanning.CalcRegenPlanForPlanWksh(Item,CALCDATE('<-CM>',WORKDATE),CALCDATE('<CM>',WORKDATE));  // Dates based on WORKDATE.
    END;

    LOCAL PROCEDURE SelectAndClearItemJournalBatch@21(VAR ItemJournalBatch@1001 : Record 233);
    VAR
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalBatch."Template Type"::Item,ItemJournalTemplate.Name);
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
    END;

    LOCAL PROCEDURE SelectWarehouseReceiptLine@93(VAR WarehouseReceiptLine@1000 : Record 7317;SourceNo@1001 : Code[20];SourceDocument@1002 : Option);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectWarehouseShipmentLine@96(VAR WarehouseShipmentLine@1000 : Record 7321;SourceNo@1001 : Code[20];SourceDocument@1002 : Option);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",SourceDocument);
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SetupForRequisitionWorksheet@92(VAR StockkeepingUnit@1000 : Record 5700;LocationCode@1002 : Code[10];Quantity@1001 : Decimal);
    VAR
      Customer@1008 : Record 18;
      Item@1007 : Record 27;
      Location@1006 : Record 14;
      SalesLine@1004 : Record 37;
      TransferRoute@1003 : Record 5742;
    BEGIN
      // Create Transfer Route, create Item and StockKeeping Unit. Create Sales Order.
      LibraryWarehouse.CreateLocation(Location);
      CreateAndModifyTransferRoute(TransferRoute,Location.Code,LocationCode);
      CreateItem(Item,Item."Replenishment System"::Purchase);
      CreateAndUpdateStockKeepingUnit(StockkeepingUnit,Item,LocationCode,Location.Code);
      CreateSalesOrder(SalesLine,CreateCustomer(Location.Code,Customer.Reserve::Optional),Item."No.",LocationCode,Quantity);
      AssignGlobalVariables(Item."No.",'',LocationCode);
    END;

    LOCAL PROCEDURE SetupSalesAndManufacturingSetup@37(VAR SalesReceivablesSetup@1000 : Record 311;VAR ManufacturingSetup@1001 : Record 99000765);
    VAR
      DefaultSafetyLeadTime@1002 : DateFormula;
    BEGIN
      SalesReceivablesSetup.GET;
      UpdateSalesSetup(SalesReceivablesSetup."Credit Warnings"::"No Warning",FALSE);

      ManufacturingSetup.GET;
      EVALUATE(DefaultSafetyLeadTime,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>');  // Use Random value for Safety Lead Time.
      UpdateManufacturingSetup(TRUE,DefaultSafetyLeadTime);
    END;

    LOCAL PROCEDURE UpdateForecastOnManufacturingSetup@116(CurrentProductionForecast@1001 : Code[10];UseForecastOnLocations@1002 : Boolean);
    VAR
      ManufacturingSetup@1000 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Current Production Forecast",CurrentProductionForecast);
      ManufacturingSetup.VALIDATE("Use Forecast on Locations",UseForecastOnLocations);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItem@6(VAR Item@1000 : Record 27;ProductionBOMNo@1001 : Code[20]);
    BEGIN
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemDimension@42(VAR DefaultDimension@1005 : Record 352;ItemNo@1002 : Code[20]);
    VAR
      Dimension@1000 : Record 348;
      DimensionValue@1004 : Record 349;
      LibraryDimension@1001 : Codeunit 131001;
    BEGIN
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.CreateDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,ItemNo,Dimension.Code,DimensionValue.Code);
    END;

    LOCAL PROCEDURE UpdateItemWithBOMAndPostItemJournal@82(VAR ParentItem@1006 : Record 27;ChildItemNo@1000 : Code[20];LocationCode@1004 : Code[10];VariantCode@1007 : Code[10];Quantity@1002 : Decimal);
    VAR
      ItemJournalLine@1003 : Record 83;
      ProductionBOMHeader@1001 : Record 99000771;
    BEGIN
      CreateAndCertifyProductionBOM(ProductionBOMHeader,ParentItem."Base Unit of Measure",ChildItemNo,VariantCode);
      UpdateItem(ParentItem,ProductionBOMHeader."No.");
      PostItemJournalLine(ItemJournalLine."Entry Type"::"Negative Adjmt.",ParentItem."No.",LocationCode,Quantity,FALSE);
    END;

    LOCAL PROCEDURE UpdateManufacturingSetup@125(CombinedMPSMRPCalculation@1002 : Boolean;DefaultSafetyLeadTime@1000 : DateFormula);
    VAR
      ManufacturingSetup@1001 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      ManufacturingSetup.VALIDATE("Combined MPS/MRP Calculation",CombinedMPSMRPCalculation);
      ManufacturingSetup.VALIDATE("Default Safety Lead Time",DefaultSafetyLeadTime);
      ManufacturingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesSetup@5(CreditWarnings@1002 : Option;StockoutWarning@1001 : Boolean);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Credit Warnings",CreditWarnings);
      SalesReceivablesSetup.VALIDATE("Stockout Warning",StockoutWarning);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSKUReorderingPolicy@114(VAR SKU@1000 : Record 5700;ReorderingPolicy@1001 : Option;ReorderPoint@1002 : Decimal;ReorderQty@1003 : Decimal);
    BEGIN
      WITH SKU DO BEGIN
        VALIDATE("Reordering Policy",ReorderingPolicy);
        VALIDATE("Reorder Point",ReorderPoint);
        VALIDATE("Reorder Quantity",ReorderQty);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE VerifyDimensionOnTransferLine@48(DefaultDimension@1000 : Record 352;DimensionSetID@1002 : Integer);
    VAR
      DimensionSetEntry@1001 : Record 480;
    BEGIN
      DimensionSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
      DimensionSetEntry.FINDFIRST;
      DimensionSetEntry.TESTFIELD("Dimension Code",DefaultDimension."Dimension Code");
      DimensionSetEntry.TESTFIELD("Dimension Value Code",DefaultDimension."Dimension Value Code");
    END;

    LOCAL PROCEDURE VerifyInventoryPutAwayPick@52(SourceNo@1002 : Code[20];LocationCode@1003 : Code[10];ItemNo@1001 : Code[20];Quantity@1006 : Decimal);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Location Code",LocationCode);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.TESTFIELD("Item No.",ItemNo);
      WarehouseActivityLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyPickWorksheet@136(SalesLine@1001 : Record 37;QtyToHandle@1002 : Decimal);
    VAR
      WhseWorksheetLine@1000 : Record 7326;
    BEGIN
      WhseWorksheetLine.SETRANGE("Item No.",SalesLine."No.");
      WhseWorksheetLine.FINDFIRST;
      WhseWorksheetLine.TESTFIELD(Quantity,SalesLine.Quantity);
      WhseWorksheetLine.TESTFIELD("Qty. to Handle",QtyToHandle);
      WhseWorksheetLine.TESTFIELD("Destination No.",SalesLine."Sell-to Customer No.");
    END;

    LOCAL PROCEDURE VerifyPostedInventoryPick@69(SourceNo@1002 : Code[20];LocationCode@1003 : Code[10];ItemNo@1001 : Code[20];Quantity@1006 : Decimal;LotNo@1004 : Code[20]);
    VAR
      PostedInvtPickLine@1000 : Record 7343;
    BEGIN
      PostedInvtPickLine.SETRANGE("Source No.",SourceNo);
      PostedInvtPickLine.SETRANGE("Location Code",LocationCode);
      PostedInvtPickLine.FINDFIRST;
      PostedInvtPickLine.TESTFIELD("Item No.",ItemNo);
      PostedInvtPickLine.TESTFIELD(Quantity,Quantity);
      PostedInvtPickLine.TESTFIELD("Lot No.",LotNo);
    END;

    LOCAL PROCEDURE VerifyRequisitionLine@13(No@1003 : Code[20];LocationCode@1002 : Code[10];Quantity@1001 : Decimal;VariantCode@1000 : Code[10]);
    VAR
      RequisitionLine@1004 : Record 246;
    BEGIN
      FindRequisitionLine(RequisitionLine,No,LocationCode);
      RequisitionLine.FINDFIRST;
      RequisitionLine.TESTFIELD(Quantity,Quantity);
      RequisitionLine.TESTFIELD("Variant Code",VariantCode);
    END;

    LOCAL PROCEDURE VerifyTransferOrder@75(TransferFromCode@1000 : Code[10];TransferToCode@1001 : Code[10];ItemNo@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      TransferHeader@1004 : Record 5740;
      TransferLine@1005 : Record 5741;
    BEGIN
      TransferHeader.SETRANGE("Transfer-from Code",TransferFromCode);
      TransferHeader.SETRANGE("Transfer-to Code",TransferToCode);
      TransferHeader.FINDFIRST;
      TransferLine.SETRANGE("Document No.",TransferHeader."No.");
      TransferLine.SETRANGE("Item No.",ItemNo);
      TransferLine.FINDFIRST;
      TransferLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyBinOnWarehousePick@98(LocationCode@1003 : Code[10];TakeBinCode@1001 : Code[20];PlaceBinCode@1002 : Code[20]);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      WarehouseActivityLine.SETRANGE("Location Code",LocationCode);
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.TESTFIELD("Bin Code",TakeBinCode);
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Place);
      WarehouseActivityLine.FINDFIRST;
      WarehouseActivityLine.TESTFIELD("Bin Code",PlaceBinCode);
    END;

    LOCAL PROCEDURE VerifyBinContent@97(BinCode@1001 : Code[20];Quantity@1002 : Decimal);
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      BinContent.SETRANGE("Bin Code",BinCode);
      BinContent.FINDFIRST;
      BinContent.CALCFIELDS(Quantity);
      BinContent.TESTFIELD(Quantity,Quantity);
    END;

    [ConfirmHandler]
    PROCEDURE AutomaticReservationConfirmHandler@63(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,AutomaticReservationConfirmMsg) > 0,ConfirmMessage);
      Reply := FALSE;
    END;

    [ModalPageHandler]
    PROCEDURE AvailablePurchaseLinesPageHandler@138(VAR AvailablePurchaseLines@1000 : TestPage 501);
    BEGIN
      AvailablePurchaseLines.FILTER.SETFILTER("Document No.",GlobalDocumentNo);
      AvailablePurchaseLines."Outstanding Qty. (Base)".ASSERTEQUALS(GlobalQuantity);
      AvailablePurchaseLines.FILTER.SETFILTER("Document No.",GlobalDocumentNo2);
      AvailablePurchaseLines."Outstanding Qty. (Base)".ASSERTEQUALS(GlobalQuantity2);
    END;

    [RequestPageHandler]
    PROCEDURE CalculatePlanPlanWkshRequestPageHandler@108(VAR CalculatePlanPlanWksh@1000 : TestRequestPage 99001017);
    BEGIN
      // Calculate Regenerative Plan for a month using page. Setting Starting and Ending Date to the Start and End Date of the month.
      CalculatePlanPlanWksh.Item.SETFILTER("No.",STRSUBSTNO(ItemFilterTok,GlobalItemNo,GlobalItemNo2));
      CalculatePlanPlanWksh.Item.SETFILTER("Location Filter",GlobalLocationCode);
      CalculatePlanPlanWksh.StartingDate.SETVALUE(CALCDATE('<-CM>',WORKDATE));  // Date based on WORKDATE.
      CalculatePlanPlanWksh.EndingDate.SETVALUE(CALCDATE('<CM>',WORKDATE));  // Date based on WORKDATE.
      CalculatePlanPlanWksh.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CalculatePlanReqWkshRequestPageHandler@61(VAR CalculatePlanReqWksh@1000 : TestRequestPage 699);
    BEGIN
      // Calculate Regenerative Plan for a month using page. Setting Starting and Ending Date to the Start and End Date of the year.
      CalculatePlanReqWksh.Item.SETFILTER("No.",GlobalItemNo);
      CalculatePlanReqWksh.Item.SETFILTER("Location Filter",GlobalLocationCode);
      CalculatePlanReqWksh.StartingDate.SETVALUE(CALCDATE('<-CY>',WORKDATE));  // Date based on WORKDATE.
      CalculatePlanReqWksh.EndingDate.SETVALUE(CALCDATE('<CY>',WORKDATE));  // Date based on WORKDATE.
      CalculatePlanReqWksh.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CarryOutActionMsgRequestPageHandler@68(VAR CarryOutActionMsgReq@1000 : TestRequestPage 493);
    BEGIN
      CarryOutActionMsgReq.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE CreatePickHandler@144(VAR CreatePick@1000 : TestRequestPage 5754);
    BEGIN
      CreatePick.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingLinesPageHandler@83(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLines."Lot No.".SETVALUE(LibraryVariableStorage.DequeueText);
      ItemTrackingLines."Quantity (Base)".SETVALUE(ItemTrackingLines.Quantity3.ASINTEGER);
      ItemTrackingLines.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE PickActivitiesMessageHandler@36(Message@1000 : Text[1024]);
    BEGIN
      GlobalMessageCounter += 1;
      CASE GlobalMessageCounter OF
        1:
          Assert.IsTrue(STRPOS(Message,PickActivitiesMsg) > 0,Message);
        2:
          Assert.IsTrue(STRPOS(Message,NothingToCreateMsg) > 0,Message)
      END;
    END;

    [ModalPageHandler]
    PROCEDURE PickSelectionHandler@146(VAR PickSelection@1000 : TestPage 7343);
    BEGIN
      PickSelection.FILTER.SETFILTER("Document No.",GlobalDocumentNo);
      PickSelection.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@100(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation."Total Quantity".DRILLDOWN;
    END;

    [MessageHandler]
    PROCEDURE TransferOrderMessageHandler@40(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,STRSUBSTNO(TransferOrderDeleteMsg,GlobalDocumentNo)) > 0,Message)
    END;

    [MessageHandler]
    PROCEDURE WorksheetNoMessageHandler@71(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,WorksheetMsg) > 0,Message);
    END;

    [ReportHandler]
    PROCEDURE TransferShipmentReportDataHandler@184(VAR TransferShipment@1000 : Report 5704);
    VAR
      TransferShipmentHeader@1001 : Record 5744;
    BEGIN
      TransferShipmentHeader.GET(FindShipmentNoByLocation(COPYSTR(LibraryVariableStorage.DequeueText,1,20)));
      TransferShipmentHeader.SETRECFILTER;
      TransferShipment.SETTABLEVIEW(TransferShipmentHeader);
      TransferShipment.SAVEASEXCEL(LibraryVariableStorage.DequeueText);
    END;

    [ReportHandler]
    PROCEDURE TransferReceiptReportDataHandler@101(VAR TransferReceipt@1000 : Report 5705);
    VAR
      TransferReceiptHeader@1001 : Record 5746;
    BEGIN
      TransferReceiptHeader.GET(FindReceiptNoByLocation(COPYSTR(LibraryVariableStorage.DequeueText,1,20)));
      TransferReceiptHeader.SETRECFILTER;
      TransferReceipt.SETTABLEVIEW(TransferReceiptHeader);
      TransferReceipt.SAVEASEXCEL(LibraryVariableStorage.DequeueText);
    END;

    [RequestPageHandler]
    PROCEDURE CreateInvtPutawayPickMvmtRPH@130(VAR CreateInvtPutawayPickMvmt@1000 : TestRequestPage 7323);
    BEGIN
      CreateInvtPutawayPickMvmt.CreateInventorytPutAway.SETVALUE(TRUE);
      CreateInvtPutawayPickMvmt.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@80(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [SCM]
      Miscellaneous Test for SCM Inventory:
        1. Verify Planning Lines for demand location after posting Item Journal and Calculate Regenerative Plan.
        2. Verify Planning Lines for non demand location after posting Item Journal and Calculate Regenerative Plan.
        3. Verify Planning Lines for blank location after posting Item Journal and Calculate Regenerative Plan.
        4. Verify Planning Lines for demand location after creating Production Forecast and Calculate Regenerative Plan.
        5. Verify Planning Lines for non demand location after creating Production Forecast and Calculate Regenerative Plan.
        6. Verify Planning Lines for blank location after creating Production Forecast and Calculate Regenerative Plan.
        7. Verify Pick Worksheet after Get Warehouse Documents functionality.
        8. Verify Reserved Quantity on Sales Line after creating Pick from Pick Worksheet when Customer has Reserve as Always.
        9. Verify Pick Worksheet Line after Get Warehouse Documents functionality when Customer has Reserve as Always.
       10. Verify multiple Warehouse Shipments created from Sales Order.
       11. Verify Warehouse Shipment is created from Sales Order after adding a new Sales Line.
       12. Verify Inventory Pick created from Transfer Order.
       13. Verify Inventory Pick is not created again from Transfer Order if it is already created.
       14. Verify Inventory Put-away created from Transfer Order.
       15. Verify Dimension on Transfer Line.
       16. Verify Planned Shipment Date on Sales Line after setting the Outbound Whse. Handling Time on Location.
       17. Verify Tracking on Posted Inventory Pick when Tracking is assigned on Inventory Pick.
       18. Verify Tracking on Posted Inventory Pick when Tracking is assigned on Transfer Order.
       19. Verify Planned Delivery Date and Planned Shipment Date on Sales Line after setting the Outbound Whse. Handling Time on Location Card and Sales Order.
       20. Verify Requisition Line is created for Transfer when Item involved in Sales Order has SKU parameters set.
       21. Verify Tranfer Order created using Requisition Worksheet when Item involved in Sales Order has SKU parameters set.
       22  Verify Reservation On Sales Order With Multiple Lines.
       23. Verify handling error when Put Away is created but not Registered.
       24. Verify Bin Code on created Pick after Put Away is Registered.
       25. Verify Bin Content after Put Away is Registered but before posting Sales Order.

      Covers Test cases: for WI - 287232
      --------------------------------------------------------------------------------------
      Test Function Name                                                             TFS ID
      --------------------------------------------------------------------------------------
      PlanningLinesForDemandLocation, PlanningLinesForNonDemandLocation,
      PlanningLinesForBlankLocation                                                  125194
      PlanningLinesForDemandLocationWithPoductionForcast,
      PlanningLinesForNonDemandLocationWithPoductionForcast,
      PlanningLinesForBlankLocationWithPoductionForcast                              125195

      Covers Test cases: for WI - 287254
      --------------------------------------------------------------------------------------
      Test Function Name                                                             TFS ID
      --------------------------------------------------------------------------------------
      GetWarehouseDocumentOnPickWorksheet, ReserverdQuantityOnSalesOrderAfterPick,
      PickWorksheetWithReservation                                                    127553
      MultipleWarehouseShipmentFromSalesOrder, WarehouseShipmentFromSalesOrder        127561
      PickFromTransferOrder,RecreatePickFromTransferOrder                             127556

      Covers Test cases: for WI - 287255
      --------------------------------------------------------------------------------------
      Test Function Name                                                              TFS ID
      --------------------------------------------------------------------------------------
      PutAwayFromTransferOrder                                                        127609
      TransferLineDimension                                                           127623
      LocationOutboundWhseHandlingTime                                                127649
      AssignTrackingToInventoryPickAndPost                                            127665
      AssignTrackingToTransferOrderAndPostInventoryPick                               127666

      Covers Test cases: for WI - 243258
      ---------------------------------------------------------------------------------------
      Test Function Name                                                              TFS ID
      ---------------------------------------------------------------------------------------
      SalesOrderOutboundWhseHandlingTime                                              135565
      RequisitionLineForItemWithSKU,TransferOrderCreatedFromRequisitionWorksheet      135602

      Covers Test cases: for WI - 290944
      ---------------------------------------------------------------------------------------
      Test Function Name                                                              TFS ID
      ---------------------------------------------------------------------------------------
      ReservationOnSalesOrderWithMultipleLines,CreatePickErrorWithoutRegisterPutAway
      BinCodeOnWarehouseActivityLine,BinContentBeforeShippingSalesOrder               229525
    }
    END.
  }
}

