OBJECT Codeunit 134389 ERM Customer Statistics
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1005 : Codeunit 130000;
      LibraryInventory@1003 : Codeunit 132201;
      LibrarySales@1001 : Codeunit 130509;
      LibraryERM@1011 : Codeunit 131300;
      LibraryRandom@1000 : Codeunit 130440;
      IsInitialized@1002 : Boolean;
      BalanceDue@1009 : Decimal;
      Flag@1010 : Boolean;
      OverDueBalanceErr@1004 : TextConst 'ENU=Customer OverDue Balance is not correct';
      WrongBillToCustErr@1006 : TextConst 'ENU=Incorrect Bill-to Customer value';

    [Test]
    PROCEDURE OverdueAmountForNewCustomer@8();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      // Check that Overdue Amount is zero on Customer Statistics Page for Customer.

      // Setup.
      Initialize;

      // Exercise.
      LibrarySales.CreateCustomer(Customer);

      // Verify: Verify that Overdue Amount is 0 on Customer Statistics Page.
      VerifyOverdueBalanceForCustomer(Customer."No.",0);

      // Tear Down: Delete earlier created Customer.
      Customer.DELETE(TRUE);
    END;

    [Test]
    PROCEDURE CustomerStatisticsAmountOverdue@16();
    VAR
      Customer@1000 : Record 18;
      SalesHeader@1001 : Record 36;
      OverdueAmount@1005 : Decimal;
      OldWorkDate@1002 : Date;
    BEGIN
      // Check Overdue Amount on Customer Statistics Page for Customer.

      // Setup: Create Sales Invoice for Customer.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      OverdueAmount := CreateSalesInvoice(SalesHeader,Customer."No.",WORKDATE);
      OldWorkDate := WORKDATE;  // Need to preserve Old WorkDate.
      WORKDATE := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',WORKDATE);  // Set Random WorkDate to verify result.

      // Exercise.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Overdue Amount on Customer Statistics Page.
      VerifyOverdueBalanceForCustomer(SalesHeader."Sell-to Customer No.",OverdueAmount);

      // Tear Down: Restore Old WorkDate.
      WORKDATE := OldWorkDate;
    END;

    [Test]
    PROCEDURE CustomerStatisticsAmountNotOverdue@48();
    VAR
      PaymentTerms@1006 : Record 3;
      SalesHeader@1001 : Record 36;
    BEGIN
      // Check that Amount that is not overdue must not show on Customer Statistics Page.

      // Setup: Create Sales Invoice for Customer.
      Initialize;
      FindPaymentTerms(PaymentTerms);
      CreateSalesInvoice(SalesHeader,CreateCustomerWithPaymentTerms(PaymentTerms.Code),WORKDATE);

      // Exercise.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify that Amount Overdue is not updated as it is not due.
      VerifyOverdueBalanceForCustomer(SalesHeader."Sell-to Customer No.",0);
    END;

    [Test]
    [HandlerFunctions(NoSeriesListPageHandler,CheckCreditLimitPageHandler)]
    PROCEDURE CustomerAmountOverdueWarning@75();
    VAR
      SalesHeader@1001 : Record 36;
      SalesReceivablesSetup@1008 : Record 311;
      OldCreditWarnings@1009 : Option;
      InvoiceNo@1010 : Code[20];
    BEGIN
      // Check Overdue Amount appears on Credit Limit Warning page.

      // Setup: Update Sales and Receivables Setup.
      Initialize;
      UpdateSalesReceivableSetup(OldCreditWarnings,SalesReceivablesSetup."Credit Warnings"::"Overdue Balance");
      BalanceDue := CreateAndPostSalesInvoice(SalesHeader);  // Assign Overdue Amount in global variable.
      Flag := TRUE;  // Assign value in page handler.

      // Exercise: Open Sales Invoice Page to invoke Credit Limit Warning Page for overdue amount.
      InvoiceNo := OpenSalesInvoicePage(SalesHeader."Sell-to Customer No.");

      // Verify: Verify Overdue Amount on Credit Limit Warning Page. Verification done in CheckCreditLimitPageHandler.

      // Tear Down: Delete the new Sales Invoice created and rollback Credit Warnings value in Sales & Receivables Setup.
      SalesHeader.GET(SalesHeader."Document Type"::Invoice,InvoiceNo);
      SalesHeader.DELETE(TRUE);
      UpdateSalesReceivableSetup(OldCreditWarnings,OldCreditWarnings);
    END;

    [Test]
    [HandlerFunctions(NoSeriesListPageHandler,CheckCreditLimitPageHandler)]
    PROCEDURE OverdueAmountForCustomerAfterWarning@27();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1003 : Record 37;
      SalesReceivablesSetup@1008 : Record 311;
      OldCreditWarnings@1009 : Option;
      OverdueAmount@1000 : Decimal;
      InvoiceNo@1002 : Code[20];
    BEGIN
      // Check Overdue Amount on Customer Statistics Page after posting two Sales Invoice on different Dates.

      // Setup: Update Sales and Receivables Setup.
      Initialize;
      UpdateSalesReceivableSetup(OldCreditWarnings,SalesReceivablesSetup."Credit Warnings"::"Overdue Balance");
      OverdueAmount := CreateAndPostSalesInvoice(SalesHeader);

      // Create another Sales Invoice using Page and handle Credit Limit Warning page, take Random Quantity for new Invoice.
      InvoiceNo := OpenSalesInvoicePage(SalesHeader."Sell-to Customer No.");
      SalesHeader.GET(SalesHeader."Document Type"::Invoice,InvoiceNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,CreateItemWithUnitPrice,LibraryRandom.RandDec(10,2));

      // Exercise.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify.
      VerifyOverdueBalanceForCustomer(SalesHeader."Sell-to Customer No.",OverdueAmount);

      // Tear Down: Rollback Credit Warnings value in Sales & Receivables Setup.
      UpdateSalesReceivableSetup(OldCreditWarnings,OldCreditWarnings);
    END;

    [Test]
    PROCEDURE FactBoxSalesLineForItem@1();
    VAR
      SalesLine@1001 : Record 37;
      ItemNo@1007 : Code[20];
    BEGIN
      // Verify program show values in Fact Box Sales Line Details of Sales Order when Type is Item in Sales Order Line.

      // Setup.
      Initialize;
      ItemNo := CreateItemWithUnitPrice;
      CreateSalesOrderAndVerifyFactBox(SalesLine.Type::Item,ItemNo,ItemNo);
    END;

    [Test]
    PROCEDURE FactBoxSalesLineResource@5();
    VAR
      Resource@1003 : Record 156;
      SalesLine@1001 : Record 37;
      LibraryResource@1000 : Codeunit 130511;
    BEGIN
      // Verify program do not show any values in Fact Box Sales Line Details of Sales Order when Type is Resource in Sales Order Line.

      // Setup.
      Initialize;
      LibraryResource.FindResource(Resource);
      CreateSalesOrderAndVerifyFactBox(SalesLine.Type::Resource,Resource."No.",'');  // Using '' to verify Item No field on Fact Box.
    END;

    [Test]
    PROCEDURE FactBoxSalesLineGLAccount@6();
    VAR
      GLAccount@1005 : Record 15;
      SalesLine@1001 : Record 37;
    BEGIN
      // Verify program do not show any values in Fact Box Sales Line Details of Sales Order when Type is G/L Account in Sales Order Line.

      // Setup.
      Initialize;
      LibraryERM.FindGLAccount(GLAccount);
      CreateSalesOrderAndVerifyFactBox(SalesLine.Type::"G/L Account",GLAccount."No.",'');  // Using '' to verify Item No field on Fact Box.
    END;

    [Test]
    PROCEDURE CheckFilterOnCustStatsByCurrLinesFromCustList@10();
    VAR
      Customer@1000 : Record 18;
      Currency@1003 : Record 4;
      CustStatsByCurrLines@1004 : TestPage 486;
      BalanceLCY@1001 : Decimal;
      BalanceFCY@1002 : Decimal;
    BEGIN
      // Test that while opening the page CustStatsByCurrLines from the customer list, proper filter can be applied on that page.

      // Setup: Create Customer and Sales Document with or without currency and post it.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      BalanceLCY := CreateAndPostSalesDocument(Customer."No.",'');
      FindCurrency(Currency);
      BalanceFCY := CreateAndPostSalesDocument(Customer."No.",Currency.Code);

      // Exercise: Invoke page CustStatsByCurrLines from customer list page.
      InvokeCustStatsByCurrLinesFromCustomerList(CustStatsByCurrLines,Customer."No.");

      // Verify: Verfiy that proper filter can be applied on the page CustStatsByCurrLines and also verified the field Customer Balance.
      VerifyFiltersOnCustStatsByCurrLinesPage(CustStatsByCurrLines,'',BalanceLCY);
      VerifyFiltersOnCustStatsByCurrLinesPage(CustStatsByCurrLines,Currency.Code,BalanceFCY);
    END;

    [Test]
    PROCEDURE CheckFilterOnCustStatsByCurrLinesFromCustCard@17();
    VAR
      Customer@1000 : Record 18;
      Currency@1003 : Record 4;
      CustStatsByCurrLines@1004 : TestPage 486;
      BalanceLCY@1001 : Decimal;
      BalanceFCY@1002 : Decimal;
    BEGIN
      // Test that while opening the page CustStatsByCurrLines from the customer card, proper filter can be applied on that page.

      // Setup: Create Customer and Sales Document with or without currency and post it.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      BalanceLCY := CreateAndPostSalesDocument(Customer."No.",'');
      FindCurrency(Currency);
      BalanceFCY := CreateAndPostSalesDocument(Customer."No.",Currency.Code);

      // Exercise: Invoke page CustStatsByCurrLines from customer card page.
      InvokeCustStatsByCurrLinesFromCustomerCard(CustStatsByCurrLines,Customer."No.");

      // Verify: Verfiy that proper filter can be applied on the page CustStatsByCurrLines and also verified the field Customer Balance.
      VerifyFiltersOnCustStatsByCurrLinesPage(CustStatsByCurrLines,'',BalanceLCY);
      VerifyFiltersOnCustStatsByCurrLinesPage(CustStatsByCurrLines,Currency.Code,BalanceFCY);
    END;

    [Test]
    PROCEDURE CheckOverDueBalanceForCustomer@13();
    VAR
      Customer@1000 : Record 18;
      OldWorkDate@1008 : Date;
      PaymentAmountLCY@1001 : Decimal;
      InvoiceAmountLCY@1002 : Decimal;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 210533] Check Over Due Balance on Customer after changing Work date greater than Payment Date.

      // Setup: Post Sales Invoice and make partial payment.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      InvoiceAmountLCY := CreateAndPostSalesDocument(Customer."No.",'');
      PaymentAmountLCY := PostPartialPaymentForCustomer(Customer."No.",InvoiceAmountLCY);

      // Exercise: Change Work date after Posting Payment.
      OldWorkDate := WORKDATE;
      WORKDATE := CALCDATE(STRSUBSTNO('<%1D>',LibraryRandom.RandInt(10)),WORKDATE);

      // Verify: Verifing Over Due Balance on Customer Statistics.
      Assert.AreEqual(Customer.CalcOverdueBalance,ROUND(InvoiceAmountLCY - PaymentAmountLCY),OverDueBalanceErr);

      // Tear Down: Restore Old WorkDate.
      WORKDATE := OldWorkDate;
    END;

    [Test]
    PROCEDURE UTCheckEmptyBilltoCustomer@26();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      // [SCENARIO 121705] Customer.GetBillToCustomerNo returns "No." if "Bill-to Customer No." is blank
      Customer."No." := 'A';
      Customer."Bill-to Customer No." := '';

      Assert.AreEqual(Customer."No.",Customer.GetBillToCustomerNo,WrongBillToCustErr);
    END;

    [Test]
    PROCEDURE UTCheckNotEmptyBilltoCustomer@28();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      // [SCENARIO 121705] Customer.GetBillToCustomerNo returns "Bill-to Customer No." if "Bill-to Customer No." is not blank
      Customer."No." := 'A';
      Customer."Bill-to Customer No." := 'B';

      Assert.AreEqual(Customer."Bill-to Customer No.",Customer.GetBillToCustomerNo,WrongBillToCustErr);
    END;

    [Test]
    PROCEDURE CustomerSalesHistBilltoFactBox@24();
    VAR
      Customer@1000 : Record 18;
      SalesHistBilltoFactBox@1001 : TestPage 9081;
    BEGIN
      // [SCENARIO 121705] Sales Hist. Bill-to FactBox is opened for Bill-to Customer No.
      Initialize;

      // [GIVEN] Setup new Customer with Bill-to Customer No.
      CreateCustomerWithBilltoCust(Customer);

      SalesHistBilltoFactBox.TRAP;

      // [WHEN] Open Sales Hist. Bill-to FactBox
      PAGE.RUN(PAGE::"Sales Hist. Bill-to FactBox",Customer);

      // [THEN] FactBox is opened for Bill-to Customer No.
      SalesHistBilltoFactBox."No.".ASSERTEQUALS(Customer."Bill-to Customer No.");
    END;

    [Test]
    PROCEDURE CustomerServiceHistBilltoFactBox@25();
    VAR
      Customer@1000 : Record 18;
      ServiceHistBilltoFactBox@1001 : TestPage 9086;
    BEGIN
      // [SCENARIO 121705] Service Hist. Bill-to FactBox is opened for Bill-to Customer No.
      Initialize;

      // [GIVEN] Setup new Customer with Bill-to Customer No.
      CreateCustomerWithBilltoCust(Customer);

      ServiceHistBilltoFactBox.TRAP;

      // [WHEN] Open Service Hist. Bill-to FactBox
      PAGE.RUN(PAGE::"Service Hist. Bill-to FactBox",Customer);

      // [THEN] FactBox is opened for Bill-to Customer No.
      ServiceHistBilltoFactBox."No.".ASSERTEQUALS(Customer."Bill-to Customer No.");
    END;

    [Test]
    PROCEDURE CustomerStatNotEditable@31();
    VAR
      CustomerStatistics@1002 : TestPage 151;
      CustomerList@1001 : TestPage 22;
      CustomerNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 223267] Page Customer Statistic must be not editable
      Initialize;

      // [GIVEN] Customer
      CustomerNo := LibrarySales.CreateCustomerNo;

      // [WHEN] Open "Customer Statistics"
      CustomerList.OPENVIEW;
      CustomerList.FILTER.SETFILTER("No.",CustomerNo);
      CustomerStatistics.TRAP;
      CustomerList."Page Customer Statistics".INVOKE;

      // [THEN] Page "Customer Statistics" is not editable
      Assert.IsFalse(CustomerStatistics.EDITABLE,'Page "Customer Statistics" must be not editable');
    END;

    LOCAL PROCEDURE Initialize@7();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      ClearGlobalVariables;
      IF IsInitialized THEN
        EXIT;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ClearGlobalVariables@118();
    BEGIN
      BalanceDue := 0;
      Flag := FALSE;
    END;

    LOCAL PROCEDURE CreateAndPostSalesInvoice@45(VAR SalesHeader@1002 : Record 36) LineAmount : Decimal;
    VAR
      PaymentTerms@1003 : Record 3;
      PostingDate@1000 : Date;
    BEGIN
      // Calculate Posting Date according to Customer's Payment Terms Due Date, create and post Sales Invoice on the calculated date.
      FindPaymentTerms(PaymentTerms);
      PostingDate :=
        CALCDATE(
          '<-' + FORMAT(LibraryRandom.RandInt(10)) + 'D>',
          CALCDATE('<-' + FORMAT(PaymentTerms."Due Date Calculation") + '>',WORKDATE));
      LineAmount := CreateSalesInvoice(SalesHeader,CreateCustomerWithPaymentTerms(PaymentTerms.Code),PostingDate);
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateSalesOrderAndVerifyFactBox@14(Type@1000 : Option;No@1001 : Code[20];ItemNo@1002 : Code[20]);
    VAR
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      SalesInfoPaneMgt@1007 : Codeunit 7171;
      SalesOrder@1005 : TestPage 42;
    BEGIN
      CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CreateCustomer,WORKDATE);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,Type,No,LibraryRandom.RandDec(10,2));  // Using Random for Quantity.

      // Exercise.
      OpenSalesOrderAndFindLine(SalesOrder,SalesHeader."No.",No,Type);

      // Verify: Verify Item No, Availability, Substitutions, Sales Prices, Sales Line Discounts on Sale Line Fact Box.
      VerifySalesLineFactBox(
        SalesOrder,ItemNo,SalesInfoPaneMgt.CalcAvailability(SalesLine),SalesInfoPaneMgt.CalcNoOfSubstitutions(SalesLine),
        SalesInfoPaneMgt.CalcNoOfSalesPrices(SalesLine),SalesInfoPaneMgt.CalcNoOfSalesLineDisc(SalesLine));
    END;

    LOCAL PROCEDURE CreateCustomer@20() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateCustomerWithBilltoCust@29(VAR Customer@1000 : Record 18);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Bill-to Customer No.",CreateCustomer);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerWithPaymentTerms@56(PaymentTermsCode@1000 : Code[10]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      Customer.GET(CreateCustomer);
      Customer.VALIDATE("Payment Terms Code",PaymentTermsCode);
      Customer.MODIFY(TRUE);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateItemWithUnitPrice@3() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateSalesHeader@2(VAR SalesHeader@1000 : Record 36;DocumentType@1001 : Option;SellToCustomerNo@1002 : Code[20];PostingDate@1003 : Date);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,SellToCustomerNo);
      SalesHeader.VALIDATE("Posting Date",PostingDate);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesInvoice@74(VAR SalesHeader@1000 : Record 36;CustomerNo@1002 : Code[20];PostingDate@1003 : Date) : Decimal;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      // Create Sales Invoice with Random Quantity.
      CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo,PostingDate);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,CreateItemWithUnitPrice,LibraryRandom.RandDec(10,2));
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      SalesHeader.CALCFIELDS("Amount Including VAT");
      EXIT(SalesHeader."Amount Including VAT");
    END;

    LOCAL PROCEDURE CreateAndPostSalesDocument@15(CustomerNo@1000 : Code[20];CurrencyCode@1002 : Code[10]) : Decimal;
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice,CustomerNo,WORKDATE);
      SalesHeader.VALIDATE("Currency Code",CurrencyCode);
      SalesHeader.MODIFY(TRUE);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,CreateItemWithUnitPrice,LibraryRandom.RandDec(10,2));
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      EXIT(SalesLine."Amount Including VAT");
    END;

    LOCAL PROCEDURE FindCurrency@11(VAR Currency@1000 : Record 4);
    BEGIN
      Currency.SETRANGE("Invoice Rounding Precision",LibraryERM.GetAmountRoundingPrecision);
      LibraryERM.FindCurrency(Currency);
    END;

    LOCAL PROCEDURE FindPaymentTerms@36(VAR PaymentTerms@1000 : Record 3);
    BEGIN
      PaymentTerms.SETFILTER("Due Date Calculation",'<>0D');  // Find Payment Terms having Due Date Calculation more than Zero Days.
      PaymentTerms.FINDFIRST;
    END;

    LOCAL PROCEDURE FindDocumentNo@22(CustomerNo@1001 : Code[20]) : Code[20];
    VAR
      SalesInvHeader@1000 : Record 112;
    BEGIN
      SalesInvHeader.SETRANGE("Sell-to Customer No.",CustomerNo);
      SalesInvHeader.FINDFIRST;
      EXIT(SalesInvHeader."No.");
    END;

    LOCAL PROCEDURE InvokeCustStatsByCurrLinesFromCustomerList@18(VAR CustStatsByCurrLines@1001 : TestPage 486;CustomerNo@1000 : Code[20]);
    VAR
      CustomerList@1002 : TestPage 22;
    BEGIN
      CustomerList.OPENVIEW;
      CustomerList.FILTER.SETFILTER("No.",CustomerNo);
      CustStatsByCurrLines.TRAP;
      CustomerList."Page Cust. Stats. by Curr. Lines".INVOKE;
    END;

    LOCAL PROCEDURE InvokeCustStatsByCurrLinesFromCustomerCard@21(VAR CustStatsByCurrLines@1001 : TestPage 486;CustomerNo@1000 : Code[20]);
    VAR
      CustomerCard@1002 : TestPage 21;
    BEGIN
      CustomerCard.OPENVIEW;
      CustomerCard.FILTER.SETFILTER("No.",CustomerNo);
      CustStatsByCurrLines.TRAP;
      CustomerCard."Page Cust. Stats. by Curr. Lines".INVOKE;
    END;

    LOCAL PROCEDURE OpenSalesOrderAndFindLine@4(VAR SalesOrder@1000 : TestPage 42;DocumentNo@1004 : Code[20];No@1001 : Code[20];Type@1002 : Option);
    BEGIN
      SalesOrder.OPENVIEW;
      SalesOrder.FILTER.SETFILTER("No.",DocumentNo);
      SalesOrder.SalesLines.FILTER.SETFILTER(Type,FORMAT(Type));
      SalesOrder.SalesLines.FILTER.SETFILTER("No.",No);
    END;

    LOCAL PROCEDURE OpenSalesInvoicePage@51(SellToCustomerNo@1001 : Code[20]) : Code[20];
    VAR
      SalesInvoice@1000 : TestPage 43;
    BEGIN
      SalesInvoice.OPENNEW;
      SalesInvoice."No.".ASSISTEDIT;
      SalesInvoice."Sell-to Customer No.".SETVALUE(SellToCustomerNo);
      EXIT(SalesInvoice."No.".VALUE);
    END;

    LOCAL PROCEDURE PostPartialPaymentForCustomer@49(CustomerNo@1008 : Code[20];InvoiceAmountLCY@1007 : Decimal) : Decimal;
    VAR
      GenJournalBatch@1003 : Record 232;
      GenJournalLine@1002 : Record 81;
      GLAccount@1000 : Record 15;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGLAccount(GLAccount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Customer,CustomerNo,-(InvoiceAmountLCY / LibraryRandom.RandIntInRange(2,4)));
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",FindDocumentNo(CustomerNo));
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      EXIT(-GenJournalLine.Amount);
    END;

    LOCAL PROCEDURE UpdateSalesReceivableSetup@43(VAR OldCreditWarnings@1002 : Option;CreditWarnings@1001 : Option);
    VAR
      SalesReceivablesSetup@1000 : Record 311;
    BEGIN
      SalesReceivablesSetup.GET;
      OldCreditWarnings := SalesReceivablesSetup."Credit Warnings";
      SalesReceivablesSetup.VALIDATE("Credit Warnings",CreditWarnings);
      SalesReceivablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyFiltersOnCustStatsByCurrLinesPage@23(CustStatsByCurrLines@1000 : TestPage 486;CurrencyCode@1001 : Code[10];CustomerBalance@1002 : Decimal);
    BEGIN
      CustStatsByCurrLines.FILTER.SETFILTER(Code,CurrencyCode);
      CustStatsByCurrLines."Customer Balance".ASSERTEQUALS(CustomerBalance);
    END;

    LOCAL PROCEDURE VerifyOverdueBalanceForCustomer@19(No@1000 : Code[20];BalanceDueLCY@1001 : Decimal);
    VAR
      CustomerList@1003 : TestPage 22;
      CustomerStatistics@1002 : TestPage 151;
    BEGIN
      CustomerList.OPENVIEW;
      CustomerList.FILTER.SETFILTER("No.",No);
      CustomerStatistics.TRAP;
      CustomerList."Page Customer Statistics".INVOKE;
      CustomerStatistics."Balance Due (LCY)".ASSERTEQUALS(BalanceDueLCY);
    END;

    LOCAL PROCEDURE VerifySalesLineFactBox@9(SalesOrder@1000 : TestPage 42;ItemNo@1001 : Code[20];Availability@1002 : Decimal;Substitutions@1003 : Integer;SalesPrices@1004 : Integer;SalesLineDiscounts@1005 : Integer);
    BEGIN
      SalesOrder."Sales Line FactBox".ItemNo.ASSERTEQUALS(ItemNo);
      SalesOrder."Sales Line FactBox"."Item Availability".ASSERTEQUALS(Availability);
      SalesOrder."Sales Line FactBox".Substitutions.ASSERTEQUALS(Substitutions);
      SalesOrder."Sales Line FactBox".SalesPrices.ASSERTEQUALS(SalesPrices);
      SalesOrder."Sales Line FactBox".SalesLineDiscounts.ASSERTEQUALS(SalesLineDiscounts);
      SalesOrder.CLOSE;
    END;

    [ModalPageHandler]
    PROCEDURE CheckCreditLimitPageHandler@12(VAR CheckCreditLimit@1000 : TestPage 343);
    BEGIN
      IF Flag THEN
        CheckCreditLimit."Balance Due (LCY)".ASSERTEQUALS(BalanceDue);
      CheckCreditLimit.Yes.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE NoSeriesListPageHandler@91(VAR NoSeriesList@1000 : TestPage 571);
    BEGIN
      NoSeriesList.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Customer] [Statistics] [UI]
      // [FEATURE] [Statistics] [Sales]
      Codeunit for Customer Related Test Cases.
        1. Test that Overdue Amount is zero on Customer Statistics Page for Customer.
        2. Test Overdue Amount on Customer Statistics Page for Customer.
        3. Test that Amount that is not overdue must not show on Customer Statistics Page.
        4. Test Overdue Amount appears on Credit Limit Warning page.
        5. Test Overdue Amount on Customer Statistics Page after posting two Sales Invoice on different Dates.
        6. Verify program do not show any values in Fact Box Sales Line Details of Sales Order when Type is other than Item in Sales Order Line.
        7. Test that while opening the page CustStatsByCurrLines from the customer list, proper filter can be applied on that page.
        8. Test that while opening the page CustStatsByCurrLines from the customer Card, proper filter can be applied on that page.
        9. Test that Customer having over due balance on Customer statistics page.

      Covers Test Cases: TFS_TS_ID: 273849
      ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                                                                  TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      OverdueAmountForNewCustomer, CustomerStatisticsAmountOverdue, CustomerStatisticsAmountNotOverdue, CustomerAmountOverdueWarning, OverdueAmountForCustomerAfterWarning  272911

      Covers Test Cases: TFS_TS_ID: 285361
      ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                                                                                  TFS ID
      ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      FactBoxSalesLineForItem,FactBoxSalesLineResource,FactBoxSalesLineGLAccount                                                                                            282962

      Covers Test Cases: Bug_ID: 313006
      ------------------------------------------------------------------------------------------------------
        Test Function Name
      ------------------------------------------------------------------------------------------------------
      CheckFilterOnCustStatsByCurrLinesFromCustList,CheckFilterOnCustStatsByCurrLinesFromCustCard                                                                                         282962

      Covers Test Cases: Bug_ID: 48038
      ------------------------------------------------------------------------------------------------------
        Test Function Name
      ------------------------------------------------------------------------------------------------------
      CheckOverDueBalanceForCustomer
    }
    END.
  }
}

