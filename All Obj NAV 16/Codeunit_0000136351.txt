OBJECT Codeunit 136351 UT T Job Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      LibraryRandom@1006 : Codeunit 130440;
      LibraryJob@1001 : Codeunit 131920;
      LibraryInventory@1002 : Codeunit 132201;
      LibraryUtility@1003 : Codeunit 131000;
      IsInitialized@1005 : Boolean;

    [Test]
    PROCEDURE TestInitialization@3();
    VAR
      JobTask@1000 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      JobJournalLine@1002 : Record 210;
    BEGIN
      Initialize;
      SetUp(JobTask,JobPlanningLine,JobJournalLine);

      // Verify that "Job Planning Line No." is initialized correctly.
      Assert.AreEqual(0,JobJournalLine."Job Planning Line No.",'Job Planning Line No. is not 0 by default.');

      // Verify that "Remaining Qty." is initialized correctly.
      Assert.AreEqual(0,JobJournalLine."Remaining Qty.",'Remaining Qty. is not 0 by default.');

      TearDown(JobTask,JobPlanningLine,JobJournalLine);
    END;

    [Test]
    PROCEDURE TestFieldLineType@10();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      JobJournalLine@1000 : Record 210;
    BEGIN
      Initialize;
      SetUp(JobTask,JobPlanningLine,JobJournalLine);

      // Verify that "Line Type" is set to the correct value when a "Job Planning Line No." is set.
      JobJournalLine.VALIDATE("Line Type",0);
      JobJournalLine.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
      Assert.AreEqual(JobPlanningLine."Line Type",JobJournalLine."Line Type" - 1,
        'Line type is not set correctly when Job Planning Line No. is defined.');

      // Verify that "Line Type" can't be changed if a "Job Planning Line No." is defined.
      ASSERTERROR JobJournalLine.VALIDATE("Line Type",0);

      TearDown(JobTask,JobPlanningLine,JobJournalLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE TestFieldJobPlanningLineNo@4();
    VAR
      JobTask@1004 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
      JobJournalLine@1002 : Record 210;
      TestJobPlanningLine@1000 : Record 1003;
      JobJournalLine2@1001 : Record 210;
    BEGIN
      Initialize;
      SetUp(JobTask,JobPlanningLine,JobJournalLine);

      // Verify that you cannot set a Job Planning Line with a wrong Job No., Job Task No., Type or No. (Test of one is enough).
      TestJobPlanningLine.INIT;
      TestJobPlanningLine."Job No." := JobJournalLine."Job No.";
      TestJobPlanningLine."Job Task No." := JobJournalLine."Job Task No.";
      TestJobPlanningLine."Line No." := 1;
      TestJobPlanningLine.Type := JobJournalLine.Type;
      TestJobPlanningLine."No." := JobJournalLine."No.";
      TestJobPlanningLine."Usage Link" := TRUE;
      TestJobPlanningLine.INSERT;

      JobJournalLine.VALIDATE("Job Planning Line No.",TestJobPlanningLine."Line No."); // Prove that it works.
      JobJournalLine.VALIDATE("Job Planning Line No.",0);

      TestJobPlanningLine.GET(JobTask."Job No.",JobTask."Job Task No.",1);
      TestJobPlanningLine."No." := 'TEST';
      TestJobPlanningLine.MODIFY;
      ASSERTERROR JobJournalLine.VALIDATE("Job Planning Line No.",TestJobPlanningLine."Line No.");
      // Prove that it does not work anymore.

      TearDown(JobTask,JobPlanningLine,JobJournalLine);

      SetUp(JobTask,JobPlanningLine,JobJournalLine);

      // Verify that "Job Planning Line No." (and "Remaining Qty.") is blanked when the No. changes.
      JobJournalLine.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
      JobJournalLine.TESTFIELD("Job Planning Line No.");
      JobJournalLine.VALIDATE("No.",'');
      Assert.AreEqual(0,JobJournalLine."Job Planning Line No.",'Job Planning Line No. is not 0 when No. changes.');
      Assert.AreEqual(0,JobJournalLine."Remaining Qty.",'Remaining Qty. is not 0 when No. changes.');

      // Remaining test for this field are found in test function TestFieldRemainingQty.

      TearDown(JobTask,JobPlanningLine,JobJournalLine);

      SetUp(JobTask,JobPlanningLine,JobJournalLine);

      // Validate that function does not throw message when no Job Planning Line is linked before linking.
      JobJournalLine.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
      JobJournalLine.MODIFY;

      // Validate that function throws a message when another Job Planning Line is linked before linking.
      LibraryJob.CreateJobJournalLine(JobJournalLine2."Line Type"::Schedule,JobTask,JobJournalLine2);
      JobJournalLine2.VALIDATE(Type,JobPlanningLine.Type);
      JobJournalLine2.VALIDATE("No.",JobPlanningLine."No.");
      JobJournalLine2.MODIFY;

      ASSERTERROR JobJournalLine2.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");

      TearDown(JobTask,JobPlanningLine,JobJournalLine);
    END;

    [Test]
    PROCEDURE TestFieldRemainingQty@5();
    VAR
      JobTask@1004 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
      JobJournalLine@1002 : Record 210;
      QtyDelta@1001 : Decimal;
      OldRemainingQty@1000 : Decimal;
    BEGIN
      Initialize;
      SetUp(JobTask,JobPlanningLine,JobJournalLine);

      // Verify that "Remaining Qty." can't be set if not "Job Planning Line No." is set.
      ASSERTERROR JobJournalLine.VALIDATE("Remaining Qty.",LibraryRandom.RandInt(ROUND(JobJournalLine.Quantity,1)));

      TearDown(JobTask,JobPlanningLine,JobJournalLine);

      SetUp(JobTask,JobPlanningLine,JobJournalLine);

      // Verify that "Remaining Qty." is set correctly when a "Job Planning Line No." is defined.
      JobJournalLine.TESTFIELD("Job Planning Line No.",0);
      JobJournalLine.TESTFIELD("Remaining Qty.",0);
      JobJournalLine.TESTFIELD(Quantity,0);
      JobJournalLine.VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
      Assert.AreEqual(JobPlanningLine."Remaining Qty.",JobJournalLine."Remaining Qty.",'Remaining Qty. is not set correctly');
      Assert.AreEqual(JobPlanningLine."Remaining Qty. (Base)",JobJournalLine."Remaining Qty. (Base)",
        'Remaining Qty. (Base) is not set correctly');

      // Verify that "Remaining Qty." changes correctly when Quantity is changed.
      OldRemainingQty := JobJournalLine."Remaining Qty.";
      QtyDelta := LibraryRandom.RandInt(ROUND(JobJournalLine."Remaining Qty.",1));
      JobJournalLine.VALIDATE(Quantity,JobJournalLine.Quantity + QtyDelta);
      Assert.AreEqual(OldRemainingQty - QtyDelta,JobJournalLine."Remaining Qty.",
        'Remaining Qty. is not updated correctly');
      // Test only valid because no Unit Of Measure Code is defined:
      JobJournalLine.TESTFIELD("Qty. per Unit of Measure",1);
      Assert.AreEqual(JobJournalLine."Remaining Qty.",JobJournalLine."Remaining Qty. (Base)",
        'Remaining Qty. (Base) is not updated correctly');

      TearDown(JobTask,JobPlanningLine,JobJournalLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerTrue)]
    PROCEDURE ApplyUsageForJobJnlLineWithBlankLineType@8();
    VAR
      Job@1000 : Record 167;
      JobTask@1003 : Record 1001;
      JobJournalLine@1004 : Record 210;
      JobPlanningLine@1005 : Record 1003;
      JobLedgEntry@1002 : Record 169;
      JobLinkUsage@1001 : Codeunit 1026;
    BEGIN
      // [FEATURE] [Apply Usage Link]
      // [SCENARIO 374943] No Job Planning Lines are created when apply usage for Job with "Apply Usage Link" and Job Journal Line with blank "Line Type"

      Initialize;
      // [GIVEN] Job with "Apply Usage Link" = Yes
      CreateJobWithApplyUsageLink(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      // [GIVEN] Job Journal Line with blank "Line Type"
      LibraryJob.CreateJobJournalLine(JobJournalLine."Line Type"::" ",JobTask,JobJournalLine);
      // [GIVEN] Job Ledger entry with random Item and Quantity
      CreateJobLedgEntry(JobLedgEntry,JobTask);

      // [WHEN] Apply Usage for Job Journal Line and Job Ledger Entry
      JobLinkUsage.ApplyUsage(JobLedgEntry,JobJournalLine);

      // [THEN] No Job Planning Lines are created
      JobPlanningLine.INIT;
      JobPlanningLine.SETRANGE("Job No.",Job."No.");
      Assert.RecordIsEmpty(JobPlanningLine);
    END;

    [Test]
    PROCEDURE PlanLineUnitCostAndUnitPriceRemainsWhenApplyUsage@9();
    VAR
      JobTask@1004 : Record 1001;
      JobPlanningLine@1003 : Record 1003;
      JobLedgerEntry@1002 : Record 169;
      JobJournalLine@1001 : Record 210;
      Item@1007 : Record 27;
      JobLinkUsage@1000 : Codeunit 1026;
      PlanLineUnitCost@1009 : Decimal;
      PlanLineUnitPrice@1008 : Decimal;
    BEGIN
      // [FEATURE] [Apply Usage Link]
      // [SCENARIO 375866] Job Planning Line fields "Unit Cost (LCY)" and "Unit Price" remains when post Job Journal with Apply Usage Link and Quantity changing
      Initialize;
      SetUp(JobTask,JobPlanningLine,JobJournalLine);

      // [GIVEN] Item with "Unit Cost" = 10, "Unit Price" = 20.
      Item.GET(JobPlanningLine."No.");
      PlanLineUnitCost := Item."Unit Cost" * 2;
      PlanLineUnitPrice := Item."Unit Price" * 2;

      // [GIVEN] Job Planning Line with Item: "Usage Link" = TRUE, Quantity = 1,  "Unit Cost" = 100, "Unit Price" = 200.
      JobPlanningLine.VALIDATE("Unit Cost (LCY)",PlanLineUnitCost);
      JobPlanningLine.VALIDATE("Unit Price",PlanLineUnitPrice);
      JobPlanningLine.MODIFY;

      // [WHEN] Post Job Journal Line linked to Planning Line and Quantity = 2.
      JobJournalLine.VALIDATE(Quantity,JobPlanningLine.Quantity * 2);
      JobJournalLine."Job Planning Line No." := JobPlanningLine."Line No.";
      JobLedgerEntry.INIT;
      JobLedgerEntry.VALIDATE("Job No.",JobTask."Job No.");
      JobLedgerEntry.VALIDATE("Job Task No.",JobTask."Job Task No.");
      JobLinkUsage.ApplyUsage(JobLedgerEntry,JobJournalLine);

      // [THEN] Job Planning Line Quantity = 2, "Unit Cost (LCY)" = 100, "Unit Price" = 200
      JobPlanningLine.FIND;
      Assert.AreEqual(JobJournalLine.Quantity,JobPlanningLine.Quantity,JobPlanningLine.FIELDCAPTION(Quantity));
      Assert.AreEqual(PlanLineUnitCost,JobPlanningLine."Unit Cost (LCY)",JobPlanningLine.FIELDCAPTION("Unit Cost (LCY)"));
      Assert.AreEqual(PlanLineUnitPrice,JobPlanningLine."Unit Price",JobPlanningLine.FIELDCAPTION("Unit Price"));
    END;

    [Test]
    PROCEDURE BlankJobJnlLineDiscAmountLCYWhenValidateJobUnitPriceWithZeroValue@14();
    VAR
      JobTask@1003 : Record 1001;
      JobPlanningLine@1002 : Record 1003;
      JobJnlLine@1000 : Record 210;
    BEGIN
      // [SCENARIO 378016] "Line Discount Amount (LCY)" should be blank when validate "Unit Price" with zero value in Job Journal Line

      Initialize;
      SetUp(JobTask,JobPlanningLine,JobJnlLine);
      JobJnlLine.VALIDATE("Line Discount Amount (LCY)",LibraryRandom.RandDec(200,2));

      JobJnlLine.VALIDATE("Unit Price (LCY)",0);

      JobJnlLine.TESTFIELD("Line Discount Amount (LCY)",0);
    END;

    [Test]
    PROCEDURE BlankPurchJobLineAmountLCYWhenValidateJobUnitPriceWithZeroValue@13();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      JobJnlLine@1000 : Record 210;
      PurchLine@1003 : Record 39;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 378016] "Job Line Amount (LCY)" should be blank when validate "Job Unit Price" with zero value in Purchase Line

      Initialize;
      SetUp(JobTask,JobPlanningLine,JobJnlLine);

      MockPurchLineWithJobAmounts(PurchLine,JobTask);

      PurchLine.VALIDATE("Job Unit Price",0);

      PurchLine.TESTFIELD("Job Line Amount (LCY)",0);
    END;

    [Test]
    PROCEDURE BlankPurchJobLineDiscAmountLCYWhenValidateJobUnitPriceWithZeroValue@19();
    VAR
      JobTask@1002 : Record 1001;
      JobPlanningLine@1001 : Record 1003;
      JobJnlLine@1000 : Record 210;
      PurchLine@1003 : Record 39;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 378016] "Job Line Disc. Amount (LCY)" should be blank when validate "Job Unit Price" with zero value in Purchase Line

      Initialize;
      SetUp(JobTask,JobPlanningLine,JobJnlLine);

      MockPurchLineWithJobAmounts(PurchLine,JobTask);

      PurchLine.VALIDATE("Job Unit Price",0);

      PurchLine.TESTFIELD("Job Line Disc. Amount (LCY)",0);
    END;

    LOCAL PROCEDURE Initialize@6();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateGeneralPostingSetup;

      IsInitialized := TRUE;
    END;

    LOCAL PROCEDURE SetUp@1(VAR JobTask@1003 : Record 1001;VAR JobPlanningLine@1002 : Record 1003;VAR JobJournalLine@1001 : Record 210);
    VAR
      Job@1000 : Record 167;
    BEGIN
      CreateJobWithApplyUsageLink(Job);
      LibraryJob.CreateJobTask(Job,JobTask);
      LibraryJob.CreateJobPlanningLine(JobPlanningLine."Line Type"::Schedule,JobPlanningLine.Type::Item,JobTask,JobPlanningLine);
      JobPlanningLine.VALIDATE(Quantity,LibraryRandom.RandInt(1000));
      JobPlanningLine.MODIFY;
      LibraryJob.CreateJobJournalLine(JobJournalLine."Line Type"::Schedule,JobTask,JobJournalLine);
      JobJournalLine.VALIDATE(Type,JobPlanningLine.Type);
      JobJournalLine.VALIDATE("No.",JobPlanningLine."No.");
      JobJournalLine.MODIFY;
    END;

    LOCAL PROCEDURE TearDown@2(VAR JobTask@1002 : Record 1001;VAR JobPlanningLine@1001 : Record 1003;VAR JobJournalLine@1000 : Record 210);
    VAR
      Job@1003 : Record 167;
    BEGIN
      JobJournalLine.SETRANGE("Job No.",Job."No.");
      JobJournalLine.DELETEALL(TRUE);
      JobJournalLine.RESET;

      JobPlanningLine.SETRANGE("Job No.",Job."No.");
      JobPlanningLine.DELETEALL(TRUE);
      JobPlanningLine.RESET;

      JobTask.SETRANGE("Job No.",Job."No.");
      JobTask.DELETEALL(TRUE);
      JobTask.RESET;

      Job.SETRANGE("No.",JobTask."Job No.");
      Job.DELETEALL(TRUE);
      Job.RESET;
    END;

    LOCAL PROCEDURE CreateJobWithApplyUsageLink@12(VAR Job@1000 : Record 167);
    BEGIN
      LibraryJob.CreateJob(Job);
      Job.VALIDATE("Apply Usage Link",TRUE);
      Job.MODIFY;
    END;

    LOCAL PROCEDURE CreateJobLedgEntry@17(VAR JobLedgEntry@1000 : Record 169;JobTask@1001 : Record 1001);
    BEGIN
      WITH JobLedgEntry DO BEGIN
        INIT;
        "Job No." := JobTask."Job No.";
        "Job Task No." := JobTask."Job Task No.";
        Type := Type::Item;
        "No." := LibraryJob.FindConsumable(Type);
        "Quantity (Base)" := LibraryRandom.RandDec(100,2);
        "Qty. per Unit of Measure" := 1;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockPurchLineWithJobAmounts@18(VAR PurchLine@1000 : Record 39;JobTask@1002 : Record 1001);
    VAR
      PurchHeader@1001 : Record 38;
    BEGIN
      PurchHeader.INIT;
      PurchHeader."Document Type" := PurchHeader."Document Type"::Invoice;
      PurchHeader.INSERT(TRUE);

      PurchLine.INIT;
      PurchLine."Document Type" := PurchHeader."Document Type";
      PurchLine."Document No." := PurchHeader."No.";
      PurchLine."Line No." := LibraryUtility.GetNewRecNo(PurchLine,PurchLine.FIELDNO("Line No."));
      PurchLine.Type := PurchLine.Type::Item;
      PurchLine."No." := LibraryInventory.CreateItemNo;
      PurchLine."Job No." := JobTask."Job No.";
      PurchLine."Job Task No." := JobTask."Job Task No.";
      PurchLine.Quantity := LibraryRandom.RandDec(200,2);
      PurchLine."Job Unit Price" := LibraryRandom.RandDec(200,2);
      PurchLine."Job Total Price" := LibraryRandom.RandDec(200,2);
      PurchLine."Job Line Amount (LCY)" := LibraryRandom.RandDec(200,2);
      PurchLine."Job Line Discount %" := LibraryRandom.RandInt(100);
      PurchLine."Job Line Disc. Amount (LCY)" := LibraryRandom.RandDec(200,2);
      PurchLine.INSERT;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@7(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerTrue@15(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Job] [UT]

      This unit test codeunit tests all fields added during implementation of feature 92820 - Planning and Execution Jobs and Service:

      "Job Planning Line No."
      "Remaining Qty."

      In order to make the unit test orthogonal (i.e. independent) to other functionalities and tests,
      data will be purely artificial (i.e. not real data created by other functionalities such as posting routines and the like).

      Code snippets:
      IF NOT CONFIRM('%1',TRUE,VAR) THEN ERROR('');
    }
    END.
  }
}

