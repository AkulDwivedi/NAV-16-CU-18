OBJECT Codeunit 134410 ERM Bank Data Conv. Setup ATDD
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1006 : Codeunit 130000;
      LibraryUtility@1007 : Codeunit 131000;
      UnsecureUriErr@1000 : TextConst 'ENU=The URI is not secure.';
      InvalidUriErr@1002 : TextConst 'ENU=The URI is not valid.';
      PasswordDoesNotMatchErr@1005 : TextConst 'ENU=The password from the database does not match the one that was introduced.';
      EncryptionIsNotActiveErr@1004 : TextConst 'ENU=The encryption was not activated.';
      EncryptionIsActiveErr@1003 : TextConst 'ENU=The encryption is activated and it should not be.';
      HandlerResponse@1008 : Boolean;

    [Test]
    PROCEDURE UserCanStoreHisAMCSetupInformation@1();
    VAR
      BankDataConvServiceSetup@1000 : Record 1260;
      PasswordAMC@1002 : Text;
      UserNameAMC@1003 : Text[50];
    BEGIN
      // [FEATURE] [Password]
      // [SCENARIO 1] As a an Administrator I will store the User ID and Password obtained from the AMC Service site into Dynamics Nav,
      // this is used to enable bank data file conversion to happen from DynamicsNav.
      // [GIVEN] A User ID and password obtained from the AMC service site.
      // [WHEN] Username and Password is entered into the Bank Data Conv. Service Setup
      // [THEN] The AMC Integration would be able to obtain User ID and Password to make use of the AMC Service, the Service URL was
      // automaticaly prepopulated
      Initialize;

      // Setup: Clear the existing setup
      IF BankDataConvServiceSetup.GET THEN
        BankDataConvServiceSetup.DELETE;

      // Setup: Optain username and password
      UserNameAMC :=
        LibraryUtility.GenerateRandomCode(BankDataConvServiceSetup.FIELDNO("User Name"),DATABASE::"Bank Data Conv. Service Setup");
      PasswordAMC := GenerateRandomPassword;

      // Execute: Save username and password in service setup
      BankDataConvServiceSetup.INIT;
      BankDataConvServiceSetup.VALIDATE("User Name",UserNameAMC);
      BankDataConvServiceSetup.SavePassword(PasswordAMC);
      BankDataConvServiceSetup.INSERT;
      BankDataConvServiceSetup.SetURLsToDefault;

      // Validate
      ValidateSetup(UserNameAMC,PasswordAMC);
    END;

    [Test]
    PROCEDURE UserCanChangeHisAMCPassword@2();
    VAR
      BankDataConvServiceSetup@1003 : Record 1260;
      PasswordAMC@1001 : Text;
      UserNameAMC@1000 : Text[50];
    BEGIN
      // [FEATURE] [Password]
      // [SCENARIO 2] As a an Administrator I will update the User ID and Password obtained from the AMC Service site into Dynamics Nav,
      // this is used to enable bank data file conversion to happen from DynamicsNav.
      // [GIVEN] A new User ID and password obtained from the AMC service site and an existing Bank Data Conv. Service Setup.
      // [WHEN] The new Username and Password is entered into the existing Bank Data Conv. Service Setup
      // [THEN] The AMC Integration would be able to obtain the updated User ID and Password to make use of the AMC Service, the
      // Service URL will remain unchanged.
      Initialize;

      // Setup: Optain username and password
      UserNameAMC :=
        LibraryUtility.GenerateRandomCode(BankDataConvServiceSetup.FIELDNO("User Name"),DATABASE::"Bank Data Conv. Service Setup");
      PasswordAMC := GenerateRandomPassword;

      // Execute: Save username and password in service setup
      BankDataConvServiceSetup.GET;
      BankDataConvServiceSetup.VALIDATE("User Name",UserNameAMC);
      BankDataConvServiceSetup.SavePassword(PasswordAMC);
      BankDataConvServiceSetup.MODIFY;

      // Validate
      ValidateSetup(UserNameAMC,PasswordAMC);
    END;

    [Test]
    PROCEDURE UserCanChangeTheAMCSetupURL@3();
    VAR
      BankDataConvServiceSetup@1003 : Record 1260;
      PasswordAMC@1001 : Text;
      SignupAMC@1000 : Text[250];
    BEGIN
      // [FEATURE] [URL]
      // [SCENARIO 3] As a an Administrator I will be able to update the Sign-up URL for the AMC service,
      // this is used to enable bank data file conversion to happen from DynamicsNav.
      // [GIVEN] A Sign-up URL and an existing Bank Data Conv. Service Setup.
      // [WHEN] The Sign-up URL is entered into the existing Bank Data Conv. Service Setup
      // [THEN] The Sign-up URL is save to make it simple to do the AMC Sign-up, User ID and Password
      // will remain unchanged.
      Initialize;

      // Setup: Optain username and SignupURL
      BankDataConvServiceSetup.GET;
      PasswordAMC := BankDataConvServiceSetup.GetPassword;
      SignupAMC :=
        LibraryUtility.GenerateRandomCode(BankDataConvServiceSetup.FIELDNO("Signup URL"),DATABASE::"Bank Data Conv. Service Setup");

      // Execute: Save username and password in service setup
      BankDataConvServiceSetup.GET;
      BankDataConvServiceSetup.VALIDATE("Signup URL",SignupAMC);
      BankDataConvServiceSetup.MODIFY;

      // Validate
      BankDataConvServiceSetup.GET;
      Assert.AreEqual(PasswordAMC,BankDataConvServiceSetup.GetPassword,'Password invalid');
      Assert.AreEqual(SignupAMC,BankDataConvServiceSetup."Signup URL",'Sign-up invalid');
    END;

    [Test]
    PROCEDURE UserCanChangeTheAMCServiceURL@16();
    VAR
      BankDataConvServiceSetup@1002 : Record 1260;
      PasswordAMC@1001 : Text;
      ServiceURLAMC@1000 : Text[250];
    BEGIN
      // [FEATURE] [URL]
      // [SCENARIO 4] As a an Administrator I will be able to update the Service URL for the AMC service,
      // this is used to enable bank data file conversion to happen from DynamicsNav.
      // [GIVEN] A Service URL and an existing Bank Data Conv. Service Setup.
      // [WHEN] The Service URL is entered into the existing Bank Data Conv. Service Setup
      // [THEN] The AMC Integration would be able to get the changed Service URL and use it to connect to the AMC service, User ID and Password
      // will remain unchanged.
      Initialize;

      // Setup: Optain password and Service URL
      BankDataConvServiceSetup.GET;
      PasswordAMC := BankDataConvServiceSetup.GetPassword;

      ServiceURLAMC := GenerateRandomUrl(TRUE);

      // Execute: Save username and password in service setup
      BankDataConvServiceSetup.GET;
      BankDataConvServiceSetup.VALIDATE("Service URL",ServiceURLAMC);
      BankDataConvServiceSetup.MODIFY;

      // Validate
      BankDataConvServiceSetup.GET;
      Assert.AreEqual(PasswordAMC,BankDataConvServiceSetup.GetPassword,'Password invalid');
      Assert.AreEqual(ServiceURLAMC,BankDataConvServiceSetup."Service URL",'Service URL invalid');
    END;

    [Test]
    PROCEDURE UserCanChangeTheAMCServiceURLToBeBlank@8();
    VAR
      BankDataConvServiceSetup@1001 : Record 1260;
      ServiceURLAMC@1000 : Text[250];
    BEGIN
      // [FEATURE] [URL]
      // [SCENARIO 8] As an Administrator I will be able to update the Service URL for the AMC service as BLANK.
      // [GIVEN] An existing Bank Data Conv. Service Setup.
      // [WHEN] The existng Service URL is deleted
      // [THEN] The field validation does not fail on a BLANK value in the Service URL field.
      Initialize;

      // Setup: Create a valid Bank Data Conv. Setup record
      ServiceURLAMC := GenerateRandomUrl(TRUE);
      BankDataConvServiceSetup.GET;
      BankDataConvServiceSetup.VALIDATE("Service URL",ServiceURLAMC);
      BankDataConvServiceSetup.MODIFY;

      // Execute: Reset the Service URL to a BLANK
      BankDataConvServiceSetup.VALIDATE("Service URL",'');
      BankDataConvServiceSetup.MODIFY;

      // Validate: That the BLANK is saved
      BankDataConvServiceSetup.GET;
      Assert.AreEqual('',BankDataConvServiceSetup."Service URL",'Service URL is not set to empty');
    END;

    [Test]
    PROCEDURE UserCanEnterOnlySecureURLAsTheAMCServiceURL@7();
    VAR
      BankDataConvServiceSetup@1001 : Record 1260;
      ServiceURLAMC@1000 : Text[250];
    BEGIN
      // [FEATURE] [URL]
      // [SCENARIO 9] As an Administrator I will only be able to create and update the Service URL for the AMC service that is secure.
      // [GIVEN] A new Bank Data Conv. Service Setup.
      // [WHEN] A unsecure URL is entered in the Service URL field of the Bank Data Conv. Service Setup
      // [THEN] Error is thrown.
      Initialize;
      // Setup: Generate a random unsecure URL
      ServiceURLAMC := GenerateRandomUrl(FALSE);

      // Execute: Set the Service URL to the generated unsecure URL
      BankDataConvServiceSetup.GET;
      ASSERTERROR BankDataConvServiceSetup.VALIDATE("Service URL",ServiceURLAMC);

      // Validate: Exception is thrown
      Assert.ExpectedError(UnsecureUriErr);
    END;

    [Test]
    PROCEDURE UserCanEnterOnlyValidURLAsTheAMCServiceURL@23();
    VAR
      BankDataConvServiceSetup@1001 : Record 1260;
      ServiceURLAMC@1000 : Text[250];
    BEGIN
      // [FEATURE] [URL]
      // [SCENARIO 10] As an Administrator I will be able to update the Service URL for the AMC service as BLANK.
      // [GIVEN] An new Bank Data Conv. Service Setup.
      // [WHEN] An invalid URL is entered in the Service URL field of the Bank Data Conv. Service Setup
      // [THEN] Error is thrown.
      Initialize;

      // Setup: Generate a random text URL
      ServiceURLAMC := COPYSTR(LibraryUtility.GenerateRandomText(5),1,5);

      // Execute: Set the Service URL to the generated text which will result in an invalid URL
      BankDataConvServiceSetup.GET;
      ASSERTERROR BankDataConvServiceSetup.VALIDATE("Service URL",ServiceURLAMC);

      // Validate: Exception is thrown
      Assert.ExpectedError(InvalidUriErr);
    END;

    [Test]
    PROCEDURE UserCanChangeTheAMCSupportURL@6();
    VAR
      BankDataConvServiceSetup@1002 : Record 1260;
      PasswordAMC@1001 : Text;
      SupportURLAMC@1000 : Text[250];
    BEGIN
      // [FEATURE] [URL]
      // [SCENARIO 5] As an Administrator I will be able to update the Support URL for the AMC service,
      // this is used to enable bank data file conversion to show contact information in case of connection issues.
      // [GIVEN] A Support URL and an existing Bank Data Conv. Service Setup.
      // [WHEN] The Support URL is entered into the existing Bank Data Conv. Service Setup
      // [THEN] The AMC Integration would be able to get the changed Support URL and use it to connect to the AMC service error
      // information, User ID and Password will remain unchanged.
      Initialize;

      // Setup: Optain username and Support URL
      BankDataConvServiceSetup.GET;
      PasswordAMC := BankDataConvServiceSetup.GetPassword;
      SupportURLAMC :=
        LibraryUtility.GenerateRandomCode(BankDataConvServiceSetup.FIELDNO("Service URL"),DATABASE::"Bank Data Conv. Service Setup");

      // Execute: Save username and password in service setup
      BankDataConvServiceSetup.GET;
      BankDataConvServiceSetup.VALIDATE("Support URL",SupportURLAMC);
      BankDataConvServiceSetup.MODIFY;

      // Validate
      BankDataConvServiceSetup.GET;
      Assert.AreEqual(PasswordAMC,BankDataConvServiceSetup.GetPassword,'Password invalid');
      Assert.AreEqual(SupportURLAMC,BankDataConvServiceSetup."Support URL",'Support URL invalid');
    END;

    [Test]
    PROCEDURE UserCanDeleteTheAMCSetupInformation@5();
    VAR
      BankDataConvServiceSetup@1003 : Record 1260;
      ServicePassword@1001 : Record 1261;
      PasswordKey@1000 : GUID;
    BEGIN
      // [FEATURE] [Password]
      // [SCENARIO 6] As a an Administrator I will remove the service setup to prevent use of hte AMC serive
      // [GIVEN] An existing Bank Data Conv. Service Setup.
      // [WHEN] Delete of existing Bank Data Conv. Service Setup
      // [THEN] The AMC Integration would NOT be able to obtain the updated User ID and Password to make use of the AMC Service
      Initialize;

      // Execute: Save username and password in service setup
      BankDataConvServiceSetup.GET;
      PasswordKey := BankDataConvServiceSetup."Password Key";
      BankDataConvServiceSetup.DELETE(TRUE);

      // Validate
      Assert.IsFalse(BankDataConvServiceSetup.GET,'Setup should not exist');
      Assert.IsFalse(ServicePassword.GET(PasswordKey),'Password should not exist');
    END;

    [Test]
    PROCEDURE UserCanSeeThatAPasswordExist@9();
    VAR
      BankDataConvServiceSetup@1003 : Record 1260;
    BEGIN
      // [FEATURE] [Password]
      // [SCENARIO 7] As a an Administrator I can see that a password exist
      // [GIVEN] An existing Bank Data Conv. Service Setup.
      // [WHEN] Open Bank Data Conv. Service Setup
      // [THEN] Password should show ******
      Initialize;

      // Execute: Save username and password in service setup
      BankDataConvServiceSetup.GET;

      // Validate: The HasPassword used by UI
      Assert.IsTrue(BankDataConvServiceSetup.HasPassword,'Password should exist');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo)]
    PROCEDURE StorePasswordWithoutEncryption@15();
    VAR
      BankDataConvServiceSetupRec@1000 : Record 1260;
      BankDataConvServiceSetup@1001 : TestPage 1260;
    BEGIN
      // [FEATURE] [Password]
      // [SCENARIO 11] The user enters a new password.
      // [GIVEN] There is no password set for the conversion service.
      // [WHEN] The user enters a new password.
      // [THEN] The password will be stored in clear text.

      // Setup
      IF ENCRYPTIONKEYEXISTS THEN
        DELETEENCRYPTIONKEY;

      BankDataConvServiceSetup.OPENEDIT;
      BankDataConvServiceSetup.Password.SETVALUE('');

      // Execute
      BankDataConvServiceSetup.Password.SETVALUE('Random Words');
      BankDataConvServiceSetup.OK.INVOKE;

      // Verify
      Assert.IsFalse(ENCRYPTIONENABLED,EncryptionIsActiveErr);

      BankDataConvServiceSetupRec.GET;
      Assert.AreEqual('Random Words',BankDataConvServiceSetupRec.GetPassword,PasswordDoesNotMatchErr);
    END;

    [Test]
    PROCEDURE StorePasswordWithEncryption@13();
    VAR
      BankDataConvServiceSetupRec@1000 : Record 1260;
      ServicePassword@1002 : Record 1261;
      BankDataConvServiceSetup@1001 : TestPage 1260;
      InStream@1003 : InStream;
      PasswordText@1004 : Text;
    BEGIN
      // [FEATURE] [Password]
      // [SCENARIO 12] The user enters a new password.
      // [GIVEN] There is no password set for the conversion service.
      // [WHEN] The user enters a new password.
      // [THEN] The password will be stored encrypted.

      // Setup
      IF ENCRYPTIONKEYEXISTS THEN
        DELETEENCRYPTIONKEY;

      BankDataConvServiceSetup.OPENEDIT;
      BankDataConvServiceSetup.Password.SETVALUE('');
      CREATEENCRYPTIONKEY;

      // Execute
      BankDataConvServiceSetup.Password.SETVALUE('Random Words 2');
      BankDataConvServiceSetup.OK.INVOKE;

      // Verify
      BankDataConvServiceSetupRec.GET;

      ServicePassword.GET(BankDataConvServiceSetupRec."Password Key");

      WITH ServicePassword DO BEGIN
        CALCFIELDS(Value);
        Value.CREATEINSTREAM(InStream);
        InStream.READ(PasswordText);
      END;

      Assert.AreNotEqual(PasswordText,BankDataConvServiceSetupRec.GetPassword,'Encrypted password in the DB should not be the same');
      Assert.AreEqual('Random Words 2',BankDataConvServiceSetupRec.GetPassword,PasswordDoesNotMatchErr);
      Assert.IsTrue(ENCRYPTIONENABLED,EncryptionIsNotActiveErr);

      // Clean-up
      DELETEENCRYPTIONKEY;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYesNo)]
    PROCEDURE StorePasswordWithoutEncryptionAndCheckConfirmDialog@20();
    VAR
      BankDataConvServiceSetupRec@1000 : Record 1260;
      BankDataConvServiceSetup@1001 : TestPage 1260;
      DataEncryptionManagement@1002 : TestPage 9905;
    BEGIN
      // [FEATURE] [Password]
      // [SCENARIO 13] The user enters a new password and a confirmation dialog appears.
      // [GIVEN] There is no password set for the conversion service.
      // [WHEN] The user enters a new password.
      // [THEN] The password will be stored in clear text and a confirmation dialog appears.

      // Setup
      HandlerResponse := TRUE;
      IF ENCRYPTIONKEYEXISTS THEN
        DELETEENCRYPTIONKEY;

      DataEncryptionManagement.TRAP;
      BankDataConvServiceSetup.OPENEDIT;
      BankDataConvServiceSetup.Password.SETVALUE('');

      // Execute
      BankDataConvServiceSetup.Password.SETVALUE('Random Words 3');

      BankDataConvServiceSetup.OK.INVOKE;

      DataEncryptionManagement.OK.INVOKE;

      // Verify
      Assert.IsFalse(ENCRYPTIONENABLED,EncryptionIsActiveErr);

      BankDataConvServiceSetupRec.GET;
      Assert.AreEqual('Random Words 3',BankDataConvServiceSetupRec.GetPassword,PasswordDoesNotMatchErr);

      Assert.IsTrue(HandlerResponse,'The Confirm Dialog about the encryption was not shown the second time.');
    END;

    [Test]
    PROCEDURE BankDataConvSetupIsCreatedIfItDoesNotExist@42();
    VAR
      BankDataConvServiceSetupRec@1001 : Record 1260;
      BankDataConvServiceSetup@1000 : TestPage 1260;
    BEGIN
      // [FEATURE] [URL]
      // [SCENARIO 14] As an admin, when I open the conv setup page I can see the default URLs.
      // [GIVEN] There is no conversion setup record.
      // [WHEN] The user opens the conversion setup page.
      // [THEN] The defaul URLs are in place.

      // Setup
      BankDataConvServiceSetupRec.DELETEALL;

      // Exercise
      BankDataConvServiceSetup.OPENEDIT;
      BankDataConvServiceSetup.OK.INVOKE;

      // Validate
      BankDataConvServiceSetupRec.GET;
      ValidateDefaultURLs(BankDataConvServiceSetupRec);
    END;

    [Test]
    PROCEDURE BankDataConvSetupURLAreReset@50();
    VAR
      BankDataConvServiceSetupRec@1001 : Record 1260;
      BankDataConvServiceSetup@1000 : TestPage 1260;
    BEGIN
      // [FEATURE] [URL]
      // [SCENARIO 15] As an admin, when I delete the URLs and use the action to set the defaults, I can see the original URLs.
      // [GIVEN] There is a default conversion setup record.
      // [WHEN] The user opens the conversion setup page, deletes the URLs and then invokes the Set Default URLs action.
      // [THEN] The defaul URLs are in place.

      // Setup
      BankDataConvServiceSetupRec.DELETEALL;

      // Exercise
      BankDataConvServiceSetup.OPENEDIT;
      BankDataConvServiceSetup."Signup URL".SETVALUE('');
      BankDataConvServiceSetup."Service URL".SETVALUE('');
      BankDataConvServiceSetup."Support URL".SETVALUE('');
      BankDataConvServiceSetup.SetURLsToDefault.INVOKE;
      BankDataConvServiceSetup.OK.INVOKE;

      // Validate
      BankDataConvServiceSetupRec.GET;
      ValidateDefaultURLs(BankDataConvServiceSetupRec);
    END;

    [Test]
    PROCEDURE PageInEditAllFieldsEditable@35();
    VAR
      BankDataConvServiceSetup@1000 : TestPage 1260;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 16] As an admin, when open Bank Data Conv. Setup in edit all fields should be editable.
      // [GIVEN] There is a default conversion setup record.
      // [WHEN] The user opens the conversion setup page in edit mode.
      // [THEN] All fields editable.

      // Exercise
      BankDataConvServiceSetup.OPENEDIT;

      // Verify
      Assert.IsTrue(BankDataConvServiceSetup."User Name".EDITABLE,'User Name field should be editable');
      Assert.IsTrue(BankDataConvServiceSetup.Password.EDITABLE,'Password field should be editable');
      Assert.IsTrue(BankDataConvServiceSetup."Signup URL".EDITABLE,'Signup URL field should be editable');
      Assert.IsTrue(BankDataConvServiceSetup."Service URL".EDITABLE,'Service URL field should be editable');
      Assert.IsTrue(BankDataConvServiceSetup."Support URL".EDITABLE,'Suport URL field should be editable');

      // Clean-up
      BankDataConvServiceSetup.OK.INVOKE;
    END;

    [Test]
    PROCEDURE PageInViewAllFieldsReadOnly@19();
    VAR
      BankDataConvServiceSetup@1000 : TestPage 1260;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 17] As an admin, when open Bank Data Conv. Setup in view all fields should be read only.
      // [GIVEN] There is a default conversion setup record.
      // [WHEN] The user opens the conversion setup page in view mode.
      // [THEN] All fields read only.

      // Exercise
      BankDataConvServiceSetup.OPENVIEW;

      // Verify
      Assert.IsFalse(BankDataConvServiceSetup."User Name".EDITABLE,'User Name field should not be editable');
      Assert.IsFalse(BankDataConvServiceSetup.Password.EDITABLE,'Password field should not be editable');
      Assert.IsFalse(BankDataConvServiceSetup."Signup URL".EDITABLE,'Signup URL field should not be editable');
      Assert.IsFalse(BankDataConvServiceSetup."Service URL".EDITABLE,'Service URL field should not be editable');
      Assert.IsFalse(BankDataConvServiceSetup."Support URL".EDITABLE,'Suport URL field should not be editable');

      // Clean-up
      BankDataConvServiceSetup.OK.INVOKE;
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      BankDataConvServiceSetup@1002 : Record 1260;
    BEGIN
      BankDataConvServiceSetup.DELETEALL;
      BankDataConvServiceSetup.INIT;
      BankDataConvServiceSetup.VALIDATE("User Name",
        LibraryUtility.GenerateRandomCode(BankDataConvServiceSetup.FIELDNO("User Name"),DATABASE::"Bank Data Conv. Service Setup"));
      BankDataConvServiceSetup.SavePassword(GenerateRandomPassword);
      BankDataConvServiceSetup.INSERT;
      BankDataConvServiceSetup.SetURLsToDefault;
    END;

    LOCAL PROCEDURE ValidateSetup@12(ExpectedUserName@1000 : Text[50];ExpectedPassword@1001 : Text);
    VAR
      BankDataConvServiceSetup@1002 : Record 1260;
    BEGIN
      BankDataConvServiceSetup.GET;
      Assert.AreEqual(ExpectedUserName,BankDataConvServiceSetup."User Name",'User Name invalid');
      Assert.AreEqual(ExpectedPassword,BankDataConvServiceSetup.GetPassword,'Password invalid');
      ValidateDefaultURLs(BankDataConvServiceSetup);
    END;

    LOCAL PROCEDURE ValidateDefaultURLs@55(BankDataConvServiceSetup@1000 : Record 1260);
    BEGIN
      Assert.AreEqual('http://www.amcbanking.dk/nav/register',BankDataConvServiceSetup."Signup URL",'Sign-up invalid');
      Assert.AreEqual('https://nav.amcbanking.com/nav02',BankDataConvServiceSetup."Service URL",'Service URL invalid');
      Assert.AreEqual('http://www.amcbanking.dk/nav/support',BankDataConvServiceSetup."Support URL",'Service URL invalid');
    END;

    LOCAL PROCEDURE GenerateRandomUrl@10(Secure@1001 : Boolean) : Text[250];
    VAR
      BankDataConvServiceSetup@1003 : Record 1260;
      RandomCode@1000 : Code[250];
      Prefix@1002 : Text[8];
    BEGIN
      IF Secure THEN
        Prefix := 'https://'
      ELSE
        Prefix := 'http://';

      RandomCode :=
        LibraryUtility.GenerateRandomCode(BankDataConvServiceSetup.FIELDNO("Service URL"),DATABASE::"Bank Data Conv. Service Setup");

      RandomCode := Prefix + RandomCode;

      EXIT(RandomCode);
    END;

    LOCAL PROCEDURE GenerateRandomPassword@14() : Text;
    BEGIN
      EXIT(LibraryUtility.GenerateRandomText(251));
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerNo@11(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYesNo@25(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Reply := HandlerResponse;
      HandlerResponse := NOT HandlerResponse;
    END;

    BEGIN
    {
      // [FEATURE] [Bank Data Conversion]
    }
    END.
  }
}

