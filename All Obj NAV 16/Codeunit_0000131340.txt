OBJECT Codeunit 131340 Library - Cost Accounting
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1007 : Codeunit 130000;
      LibraryUtility@1002 : Codeunit 131000;
      LibraryERM@1000 : Codeunit 131300;
      LibraryDimension@1004 : Codeunit 131001;
      LibraryRandom@1003 : Codeunit 130440;
      AllocSourceID@1006 : TextConst 'ENU=AS%1';
      AllocValuesNotMatchingErr@1009 : TextConst 'ENU="Amount = %1, CostEntryAmount = %2, Percent = %3, TotalAmount = %4, AllocatedCost = %5, Percent * TotalAmount = %6."';
      GetCostTypesFromGLErr@1012 : TextConst 'ENU=Mapping G/L Accounts to Chart of Cost Types Causes Inconsistency.';
      GLAccountFilterDefinition@1005 : TextConst 'ENU=%1..%2';
      IncorrectGLAccountNo@1011 : TextConst 'ENU=The G/L Account No. %1 is aligned to Cost Type No. %2 although G/L Account No. %3 was expected.';
      IncorrectPercentValueErr@1008 : TextConst 'ENU=For the Allocation Source %1, the Allocation Target %2  has its Percent field set to %3, although the expected value was %4, when values are rounded to 0.1 percision.';
      NoRecordsInFilterErr@1001 : TextConst 'ENU=There are no records within the filters specified for table %1. The filters are: %2.';
      NumberOfRecordsNotMatchingErr@1010 : TextConst 'ENU=The number of records %1 of %2 do not match the the number of recods %3 of %4.';
      CostEntriesCountErr@1014 : TextConst 'ENU=Incorrect number of cost entries.';
      ExpectedValueIsDifferentErr@1013 : TextConst 'ENU=Expected value of %1 field is different than the actual one.';

    PROCEDURE AllocateCostsFromTo@43(VAR CostAllocation@1006 : TestRequestPage 1131;FromLevel@1001 : Integer;ToLevel@1002 : Integer;AllocDate@1003 : Date;AllocGroup@1005 : Code[10];CostBudgetName@1004 : Code[10]);
    BEGIN
      CostAllocation."From Alloc. Level".SETVALUE(FromLevel);
      CostAllocation."To Alloc. Level".SETVALUE(ToLevel);
      CostAllocation."Allocation Date".SETVALUE(AllocDate);
      CostAllocation.Group.SETVALUE(AllocGroup);
      CostAllocation."Budget Name".SETVALUE(CostBudgetName);
    END;

    PROCEDURE CheckAllocTargetSharePercent@147(CostAllocationSource@1000 : Record 1106);
    VAR
      CostAllocationTarget@1001 : Record 1107;
      CurrentValue@1003 : Decimal;
      ExpectedValue@1002 : Decimal;
    BEGIN
      CostAllocationSource.CALCFIELDS("Total Share");
      CostAllocationTarget.SETFILTER(ID,'%1',CostAllocationSource.ID);
      IF CostAllocationTarget.FINDSET THEN BEGIN
        REPEAT
          CurrentValue := ROUND(CostAllocationTarget.Percent,0.1,'=');
          ExpectedValue := ROUND(100 * CostAllocationTarget.Share / CostAllocationSource."Total Share",0.1,'=');
          Assert.AreEqual(
            CurrentValue,ExpectedValue,
            STRSUBSTNO(IncorrectPercentValueErr,CostAllocationSource.ID,CostAllocationTarget."Line No.",CurrentValue,ExpectedValue));
        UNTIL CostAllocationTarget.NEXT = 0;
      END ELSE
        ERROR(STRSUBSTNO(NoRecordsInFilterErr,CostAllocationTarget.TABLECAPTION,CostAllocationTarget.GETFILTERS));
    END;

    PROCEDURE CheckBlockedDimCombination@74();
    VAR
      DimensionCombination@1000 : Record 350;
    BEGIN
      DimensionCombination.SETFILTER("Dimension 1 Code",'%1|%2',CostCenterDimension,CostObjectDimension);
      DeleteBlockedDimCombinations(DimensionCombination);

      CLEAR(DimensionCombination);
      DimensionCombination.SETFILTER("Dimension 2 Code",'%1|%2',CostCenterDimension,CostObjectDimension);
      DeleteBlockedDimCombinations(DimensionCombination);
    END;

    PROCEDURE CheckBlockedDimensionValues@73(AccountNo@1000 : Code[20]);
    VAR
      DimensionValue@1001 : Record 349;
      DefaultDimension@1002 : Record 352;
    BEGIN
      // Un-block any blocked default dimension values for an account

      LibraryDimension.FindDefaultDimension(DefaultDimension,DATABASE::"G/L Account",AccountNo);
      IF DefaultDimension.FINDSET THEN
        REPEAT
          DimensionValue.GET(DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
          IF DimensionValue.Blocked THEN BEGIN
            DimensionValue.VALIDATE(Blocked,FALSE);
            DimensionValue.MODIFY(TRUE);
          END;
        UNTIL DefaultDimension.NEXT = 0;
    END;

    PROCEDURE CheckCostJnlLineConsistency@58(VAR CostJournalLine@1000 : Record 1101);
    VAR
      CostCenter@1001 : Record 1112;
    BEGIN
      IF (CostJournalLine."Cost Center Code" = '') AND (CostJournalLine."Cost Object Code" = '') THEN BEGIN
        // either Cost Center or Cost Object must be set in order to post
        CreateCostCenter(CostCenter);
        CostJournalLine.VALIDATE("Cost Center Code",CostCenter.Code);
      END;

      IF (CostJournalLine."Bal. Cost Center Code" = '') AND (CostJournalLine."Bal. Cost Object Code" = '') THEN BEGIN
        // either Bal. Cost Center or Bal. Cost Object must be set in order to post
        CreateCostCenter(CostCenter);
        CostJournalLine.VALIDATE("Bal. Cost Center Code",CostCenter.Code);
      END;

      IF (CostJournalLine."Cost Center Code" <> '') AND (CostJournalLine."Cost Object Code" <> '') THEN
        // only one of Cost Center or Cost Object must be set in order to post
        CostJournalLine.VALIDATE("Cost Object Code",'');

      IF (CostJournalLine."Bal. Cost Center Code" <> '') AND (CostJournalLine."Bal. Cost Object Code" <> '') THEN
        // only one of Bal. Cost Center or Bal. Cost Object fields must be set in order to post
        CostJournalLine.VALIDATE("Bal. Cost Object Code",'');

      CostJournalLine.MODIFY(TRUE);
    END;

    PROCEDURE ClearCostJournalLines@33(CostJournalBatch@1000 : Record 1102);
    VAR
      CostJournalLine@1001 : Record 1101;
    BEGIN
      CostJournalLine.SETRANGE("Journal Template Name",CostJournalBatch."Journal Template Name");
      CostJournalLine.SETRANGE("Journal Batch Name",CostJournalBatch.Name);
      CostJournalLine.DELETEALL(TRUE);
    END;

    PROCEDURE CopyCABudgetToCABudget@47(VAR CopyCAToCARP@1000 : TestRequestPage 1134;SourceCostBudget@1001 : Code[10];TargetCostBudget@1002 : Code[10];AmtMultiplicationRatio@1003 : Decimal;DateFormula@1004 : Text[30];NoOfCopies@1005 : Integer);
    BEGIN
      CopyCAToCARP."Budget Name".SETVALUE(TargetCostBudget);
      CopyCAToCARP."Amount multiplication factor".SETVALUE(AmtMultiplicationRatio);
      CopyCAToCARP."Date Change Formula".SETVALUE(DateFormula);
      CopyCAToCARP."No. of Copies".SETVALUE(NoOfCopies);
      CopyCAToCARP."Cost Budget Entry".SETFILTER("Budget Name",SourceCostBudget);
    END;

    PROCEDURE CopyCABudgetToGLBudget@48(VAR CopyCAToGLRP@1000 : TestRequestPage 1136;SourceCostBudget@1001 : Code[10];TargetCostBudget@1002 : Code[10];AmtMultiplicationRatio@1003 : Decimal;DateFormula@1004 : Text[30];NoOfCopies@1005 : Integer);
    BEGIN
      CopyCAToGLRP."Allocation Target Budget Name".SETVALUE(TargetCostBudget);
      CopyCAToGLRP."Amount multiplication factor".SETVALUE(AmtMultiplicationRatio);
      CopyCAToGLRP."Date Change Formula".SETVALUE(DateFormula);
      CopyCAToGLRP."No. of Copies".SETVALUE(NoOfCopies);
      CopyCAToGLRP."Cost Budget Entry".SETFILTER("Budget Name",SourceCostBudget);
    END;

    PROCEDURE CopyGLBudgetToCABudget@51(VAR CopyGLToCARP@1002 : TestRequestPage 1135;SourceGLBudget@1001 : Code[10];TargetCostBudget@1000 : Code[10]);
    BEGIN
      CopyGLToCARP."Budget Name".SETVALUE(TargetCostBudget);
      CopyGLToCARP."G/L Budget Entry".SETFILTER("Budget Name",SourceGLBudget);
    END;

    PROCEDURE CostCenterDimension@72() : Code[20];
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      CostAccountingSetup.GET;
      EXIT(CostAccountingSetup."Cost Center Dimension");
    END;

    PROCEDURE CostObjectDimension@71() : Code[20];
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      CostAccountingSetup.GET;
      EXIT(CostAccountingSetup."Cost Object Dimension");
    END;

    PROCEDURE CreateAllocSource@41(VAR CostAllocationSource@1000 : Record 1106;TypeOfID@1003 : 'Auto Generated,Custom');
    VAR
      CostType@1002 : Record 1103;
    BEGIN
      FindCostType(CostType);

      CostAllocationSource.INIT;
      IF TypeOfID = TypeOfID::Custom THEN
        CostAllocationSource.VALIDATE(ID,(LastAllocSourceID + STRSUBSTNO(AllocSourceID,CostAllocationSource.COUNT)));
      CostAllocationSource.VALIDATE(Level,LibraryRandom.RandInt(10));
      CostAllocationSource.VALIDATE("Credit to Cost Type",CostType."No.");
      CostAllocationSource.INSERT(TRUE);
    END;

    PROCEDURE CreateAllocSourceWithCCenter@40(VAR CostAllocationSource@1001 : Record 1106;TypeOfID@1000 : Option);
    BEGIN
      CreateAllocSource(CostAllocationSource,TypeOfID);
      UpdateAllocSourceWithCCenter(CostAllocationSource);
    END;

    PROCEDURE CreateAllocSourceWithCObject@39(VAR CostAllocationSource@1001 : Record 1106;TypeOfID@1000 : Option);
    BEGIN
      CreateAllocSource(CostAllocationSource,TypeOfID);
      UpdateAllocSourceWithCObject(CostAllocationSource);
    END;

    PROCEDURE CreateAllocTarget@38(VAR CostAllocationTarget@1000 : Record 1107;CostAllocationSource@1003 : Record 1106;Share@1005 : Decimal;Base@1004 : Option;AllocationType@1001 : Option);
    VAR
      LineNo@1002 : Integer;
    BEGIN
      LineNo := LastAllocTargetID(CostAllocationSource) + 1;

      CostAllocationTarget.INIT;
      CostAllocationTarget.VALIDATE(ID,CostAllocationSource.ID);
      CostAllocationTarget.VALIDATE("Line No.",LineNo);
      CostAllocationTarget.VALIDATE("Target Cost Type",CostAllocationSource."Credit to Cost Type");
      CostAllocationTarget.VALIDATE(Base,Base);
      CostAllocationTarget.VALIDATE("Allocation Target Type",AllocationType);
      CostAllocationTarget.INSERT(TRUE);

      // The Share field cannot be updated unless the Allocation Target exists.
      CLEAR(CostAllocationTarget);
      CostAllocationTarget.GET(CostAllocationSource.ID,LineNo);
      CostAllocationTarget.VALIDATE(Share,Share);
      CostAllocationTarget.MODIFY(TRUE);
    END;

    PROCEDURE CreateAllocTargetWithCCenter@137(VAR CostAllocationTarget@1004 : Record 1107;CostAllocationSource@1002 : Record 1106;Share@1003 : Decimal;Base@1001 : Option;AllocationType@1000 : Option);
    BEGIN
      CreateAllocTarget(CostAllocationTarget,CostAllocationSource,Share,Base,AllocationType);
      UpdateAllocTargetWithCCenter(CostAllocationTarget);
    END;

    PROCEDURE CreateAllocTargetWithCObject@37(VAR CostAllocationTarget@1004 : Record 1107;CostAllocationSource@1002 : Record 1106;Share@1003 : Decimal;Base@1001 : Option;AllocationType@1000 : Option);
    BEGIN
      CreateAllocTarget(CostAllocationTarget,CostAllocationSource,Share,Base,AllocationType);
      UpdateAllocTargetWithCObject(CostAllocationTarget);
    END;

    PROCEDURE CreateBalanceSheetGLAccount@24(VAR GLAccount@1000 : Record 15);
    VAR
      CostAccountingSetup@1002 : Record 1108;
      AlignGLAccount@1003 : Option;
    BEGIN
      CostAccountingSetup.GET;
      AlignGLAccount := CostAccountingSetup."Align G/L Account";
      CostAccountingSetup.VALIDATE("Align G/L Account",CostAccountingSetup."Align G/L Account"::"No Alignment");
      CostAccountingSetup.MODIFY(TRUE);

      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.TESTFIELD("Cost Type No.",'');
      GLAccount.VALIDATE("Income/Balance",GLAccount."Income/Balance"::"Balance Sheet");
      GLAccount.MODIFY(TRUE);

      CostAccountingSetup.GET;
      CostAccountingSetup.VALIDATE("Align G/L Account",AlignGLAccount);
      CostAccountingSetup.MODIFY(TRUE);
    END;

    PROCEDURE CreateCostBudgetEntry@44(VAR CostBudgetEntry@1004 : Record 1109;CostBudgetName@1000 : Code[10]);
    VAR
      CostType@1002 : Record 1103;
      CostCenter@1003 : Record 1112;
    BEGIN
      FindCostType(CostType);
      FindCostCenter(CostCenter);

      CostBudgetEntry.INIT;
      CostBudgetEntry.VALIDATE(Date,WORKDATE);
      CostBudgetEntry.VALIDATE("Budget Name",CostBudgetName);
      CostBudgetEntry.VALIDATE("Cost Type No.",CostType."No.");
      CostBudgetEntry.VALIDATE("Cost Center Code",CostCenter.Code);
      CostBudgetEntry.VALIDATE(Amount,LibraryRandom.RandDec(100,2));
      CostBudgetEntry.INSERT(TRUE);
    END;

    PROCEDURE CreateCostBudgetName@53(VAR CostBudgetName@1000 : Record 1110);
    BEGIN
      CostBudgetName.INIT;
      CostBudgetName.VALIDATE(
        Name,LibraryUtility.GenerateRandomCode(CostBudgetName.FIELDNO(Description),DATABASE::"Cost Budget Name"));
      CostBudgetName.VALIDATE(Description,CostBudgetName.Name);
      CostBudgetName.INSERT(TRUE);
    END;

    PROCEDURE CreateCostCenter@22(VAR CostCenter@1000 : Record 1112);
    BEGIN
      CostCenter.INIT;
      CostCenter.VALIDATE(Code,LibraryUtility.GenerateRandomCode(CostCenter.FIELDNO(Code),DATABASE::"Cost Center"));
      CostCenter.VALIDATE("Line Type",CostCenter."Line Type"::"Cost Center");
      CostCenter.INSERT(TRUE);
    END;

    PROCEDURE CreateCostCenterFromDimension@25(VAR CostCenter@1000 : Record 1112);
    VAR
      CostAccountingSetup@1001 : Record 1108;
      DimensionValue@1003 : Record 349;
    BEGIN
      CostAccountingSetup.GET;
      SetAlignment(
        CostAccountingSetup.FIELDNO("Align Cost Center Dimension"),CostAccountingSetup."Align Cost Center Dimension"::Automatic);
      LibraryDimension.CreateDimensionValue(DimensionValue,CostAccountingSetup."Cost Center Dimension");
      CostCenter.GET(DimensionValue.Code);
    END;

    PROCEDURE CreateCostJournalBatch@55(VAR CostJournalBatch@1000 : Record 1102;CostJournalTemplateName@1001 : Code[10]);
    BEGIN
      CreateCostJnlBatchWithDelOpt(CostJournalBatch,CostJournalTemplateName,TRUE);
    END;

    PROCEDURE CreateCostJournalTemplate@60(VAR CostJournalTemplate@1000 : Record 1100);
    BEGIN
      CostJournalTemplate.INIT;
      CostJournalTemplate.VALIDATE(
        Name,LibraryUtility.GenerateRandomCode(CostJournalTemplate.FIELDNO(Name),DATABASE::"Cost Journal Template"));
      CostJournalTemplate.INSERT(TRUE);
    END;

    PROCEDURE CreateCostJnlBatchWithDelOpt@57(VAR CostJournalBatch@1001 : Record 1102;CostJournalTemplateName@1000 : Code[10];DeleteAfterPosting@1002 : Boolean);
    BEGIN
      CostJournalBatch.INIT;
      CostJournalBatch.VALIDATE("Journal Template Name",CostJournalTemplateName);
      CostJournalBatch.VALIDATE("Delete after Posting",DeleteAfterPosting);
      CostJournalBatch.VALIDATE(Name,LibraryUtility.GenerateRandomCode(CostJournalBatch.FIELDNO(Name),DATABASE::"Cost Journal Batch"));
      CostJournalBatch.VALIDATE(Description,CostJournalBatch.Name);  // Validating Name as Description because value is not important.
      IF CostJournalBatch.INSERT(TRUE) THEN ;
    END;

    PROCEDURE CreateCostJournalLine@5(VAR CostJournalLine@1000 : Record 1101;CostJournalTemplateName@1004 : Code[10];CostJournalBatchName@1005 : Code[10]);
    VAR
      CostType@1002 : Record 1103;
      BalCostType@1001 : Record 1103;
    BEGIN
      FindCostType(CostType);
      FindCostType(BalCostType);

      CreateCostJournalLineBasic(
        CostJournalLine,CostJournalTemplateName,CostJournalBatchName,WORKDATE,CostType."No.",BalCostType."No.");

      CheckCostJnlLineConsistency(CostJournalLine);
    END;

    PROCEDURE CreateCostJournalLineBasic@42(VAR CostJournalLine@1000 : Record 1101;CostJournalTemplateName@1004 : Code[10];CostJournalBatchName@1005 : Code[10];PostingDate@1007 : Date;CostTypeNo@1006 : Code[20];BalCostTypeNo@1008 : Code[20]);
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      CostJournalLine.INIT;
      CostJournalLine.VALIDATE("Journal Template Name",CostJournalTemplateName);
      CostJournalLine.VALIDATE("Journal Batch Name",CostJournalBatchName);
      RecRef.GETTABLE(CostJournalLine);
      CostJournalLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,CostJournalLine.FIELDNO("Line No.")));
      CostJournalLine.INSERT(TRUE);

      CostJournalLine.VALIDATE("Posting Date",PostingDate);
      CostJournalLine.VALIDATE("Document No.",CostTypeNo);
      CostJournalLine.VALIDATE("Cost Type No.",CostTypeNo);
      CostJournalLine.VALIDATE("Bal. Cost Type No.",BalCostTypeNo);
      CostJournalLine.VALIDATE(Amount,LibraryRandom.RandInt(1000));
      CostJournalLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateCostObject@12(VAR CostObject@1000 : Record 1113);
    BEGIN
      CostObject.INIT;
      CostObject.VALIDATE(Code,LibraryUtility.GenerateRandomCode(CostObject.FIELDNO(Code),DATABASE::"Cost Object"));
      CostObject.VALIDATE("Line Type",CostObject."Line Type"::"Cost Object");
      CostObject.INSERT(TRUE);
    END;

    PROCEDURE CreateCostObjectFromDimension@15(VAR CostObject@1003 : Record 1113);
    VAR
      CostAccountingSetup@1002 : Record 1108;
      DimensionValue@1000 : Record 349;
    BEGIN
      CostAccountingSetup.GET;
      SetAlignment(
        CostAccountingSetup.FIELDNO("Align Cost Object Dimension"),CostAccountingSetup."Align Cost Object Dimension"::Automatic);
      LibraryDimension.CreateDimensionValue(DimensionValue,CostAccountingSetup."Cost Object Dimension");
      CostObject.GET(DimensionValue.Code);
    END;

    [Normal]
    PROCEDURE CreateCostType@10(VAR CostType@1000 : Record 1103);
    BEGIN
      CreateCostTypeWithGLRange(CostType,FALSE);
    END;

    PROCEDURE CreateCostTypeNoGLRange@29(VAR CostType@1000 : Record 1103);
    BEGIN
      CostType.INIT;
      CostType.VALIDATE("No.",LibraryUtility.GenerateRandomCode(CostType.FIELDNO("No."),DATABASE::"Cost Type"));
      CostType.VALIDATE(Type,CostType.Type::"Cost Type");
      CostType.VALIDATE("Combine Entries",CostType."Combine Entries"::None);
      CostType.INSERT(TRUE);
    END;

    PROCEDURE CreateCostTypeWithCombine@19(VAR CostType@1000 : Record 1103;CombineEntries@1001 : Option);
    BEGIN
      CreateCostTypeWithGLRange(CostType,TRUE);
      CostType.VALIDATE("Combine Entries",CombineEntries);
      CostType.MODIFY(TRUE);
    END;

    PROCEDURE CreateCostTypeWithGLRange@11(VAR CostType@1000 : Record 1103;MultipleGLAccounts@1004 : Boolean);
    VAR
      CostAccountingSetup@1005 : Record 1108;
      GLAccount@1001 : Record 15;
      GLAccountFilter@1003 : Text[50];
      Index@1002 : Integer;
    BEGIN
      SetAlignment(CostAccountingSetup.FIELDNO("Align G/L Account"),CostAccountingSetup."Align G/L Account"::Automatic);
      CreateIncomeStmtGLAccount(GLAccount);
      CostType.GET(GLAccount."Cost Type No.");
      CostType.TESTFIELD("G/L Account Range",GLAccount."No.");
      GLAccount.TESTFIELD("Cost Type No.",CostType."No.");

      IF MultipleGLAccounts THEN BEGIN
        SetAlignment(CostAccountingSetup.FIELDNO("Align G/L Account"),CostAccountingSetup."Align G/L Account"::"No Alignment");

        FOR Index := 1 TO LibraryRandom.RandInt(5) DO BEGIN
          CLEAR(GLAccount);
          CreateIncomeStmtGLAccount(GLAccount);
        END;

        GLAccountFilter := STRSUBSTNO(GLAccountFilterDefinition,CostType."G/L Account Range",GLAccount."No.");
        Assert.AreEqual(MAXSTRLEN(CostType."G/L Account Range"),MAXSTRLEN(GLAccountFilter),'Passing filter must fit field length');
        CostType.VALIDATE("G/L Account Range",GLAccountFilter);
        CostType.MODIFY(TRUE);
      END;
    END;

    PROCEDURE CreateIncomeStmtGLAccount@27(VAR GLAccount@1000 : Record 15);
    VAR
      CostType@1001 : Record 1103;
    BEGIN
      LibraryERM.CreateGLAccount(GLAccount);
      GLAccount.VALIDATE("Income/Balance",GLAccount."Income/Balance"::"Income Statement");
      GLAccount.MODIFY(TRUE);

      IF CostType.GET(GLAccount."Cost Type No.") THEN
        IF CostType."G/L Account Range" <> GLAccount."No." THEN BEGIN
          IF CostType."G/L Account Range" = '' THEN BEGIN
            CostType.VALIDATE("G/L Account Range",GLAccount."No.");
            CostType.MODIFY(TRUE);
          END ELSE
            ERROR(STRSUBSTNO(IncorrectGLAccountNo,CostType."G/L Account Range",CostType."No.",GLAccount."No."));
        END;
    END;

    PROCEDURE CreateJnlLine@70(VAR GenJournalLine@1000 : Record 81;AccountNo@1002 : Code[20]);
    VAR
      GenJournalBatch@1001 : Record 232;
    BEGIN
      SetupGeneralJnlBatch(GenJournalBatch);

      // Create General Journal Line.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"G/L Account",AccountNo,LibraryRandom.RandDec(1000,2));

      // Update journal line to avoid Posting errors
      GenJournalLine.VALIDATE("Gen. Posting Type",GenJournalLine."Gen. Posting Type"::" ");
      GenJournalLine.VALIDATE("Gen. Bus. Posting Group",'');
      GenJournalLine.VALIDATE("Gen. Prod. Posting Group",'');
      GenJournalLine.MODIFY(TRUE);
    END;

    PROCEDURE DeleteAllCostTypeEntries@14();
    VAR
      CostType@1000 : Record 1103;
    BEGIN
      IF CostType.ISEMPTY THEN
        EXIT;

      CostType.DELETEALL(TRUE);
    END;

    PROCEDURE DeleteCostBudgetRegEntries@45();
    VAR
      CostBudgetRegister@1000 : Record 1111;
    BEGIN
      IF CostBudgetRegister.FINDFIRST THEN
        DeleteCostBudgetRegEntriesFrom(CostBudgetRegister."No.");
    END;

    PROCEDURE DeleteCostBudgetRegEntriesFrom@52(StartEntry@1001 : Integer);
    VAR
      CostBudgetRegister@1003 : Record 1111;
      DeleteCostBudgetEntries@1002 : Report 1139;
    BEGIN
      IF CostBudgetRegister.FINDLAST THEN BEGIN
        DeleteCostBudgetEntries.InitializeRequest(StartEntry,CostBudgetRegister."No.");
        DeleteCostBudgetEntries.USEREQUESTPAGE := FALSE;
        DeleteCostBudgetEntries.RUNMODAL;
      END;
    END;

    PROCEDURE DeleteCostRegisterEntries@13();
    VAR
      CostRegister@1003 : Record 1105;
    BEGIN
      IF CostRegister.FINDFIRST THEN
        DeleteCostRegisterEntriesFrom(CostRegister."No.");
    END;

    PROCEDURE DeleteCostRegisterEntriesFrom@17(StartEntry@1000 : Integer);
    VAR
      CostRegister@1003 : Record 1105;
      DeleteCostEntries@1002 : Report 1130;
    BEGIN
      IF CostRegister.FINDLAST THEN BEGIN
        DeleteCostEntries.InitializeRequest(StartEntry,CostRegister."No.");
        DeleteCostEntries.USEREQUESTPAGE := FALSE;
        DeleteCostEntries.RUNMODAL;
      END;
    END;

    PROCEDURE DeleteBlockedDimCombinations@68(VAR DimensionCombination@1001 : Record 350);
    BEGIN
      IF DimensionCombination.FINDSET THEN
        REPEAT
          IF DimensionCombination."Combination Restriction" = DimensionCombination."Combination Restriction"::Blocked THEN
            DimensionCombination.DELETE(TRUE);
        UNTIL DimensionCombination.NEXT = 0;
    END;

    PROCEDURE FindAllocSource@36(VAR CostAllocationSource@1000 : Record 1106);
    BEGIN
      CostAllocationSource.SETFILTER("Credit to Cost Type",'<>%1','');
      CostAllocationSource.SETFILTER("Cost Center Code",'<>%1','');

      IF CostAllocationSource.ISEMPTY THEN BEGIN
        CostAllocationSource.SETRANGE("Cost Center Code");
        CostAllocationSource.SETFILTER("Cost Object Code",'<>%1','');
      END;

      IF CostAllocationSource.ISEMPTY THEN
        ERROR(STRSUBSTNO(NoRecordsInFilterErr,CostAllocationSource.TABLECAPTION,CostAllocationSource.GETFILTERS));

      CostAllocationSource.NEXT(LibraryRandom.RandInt(CostAllocationSource.COUNT));
    END;

    PROCEDURE FindCostType@8(VAR CostType@1000 : Record 1103);
    BEGIN
      GetAllCostTypes(CostType);
      IF CostType.ISEMPTY THEN
        ERROR(STRSUBSTNO(NoRecordsInFilterErr,CostType.TABLECAPTION,CostType.GETFILTERS));

      CostType.NEXT(LibraryRandom.RandInt(CostType.COUNT));
    END;

    PROCEDURE FindCostTypeLinkedToGLAcc@49(VAR CostType@1000 : Record 1103);
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      GLAccount.SETFILTER("Cost Type No.",'<>%1','');
      IF GLAccount.ISEMPTY THEN
        ERROR(STRSUBSTNO(NoRecordsInFilterErr,GLAccount.TABLECAPTION,GLAccount.GETFILTERS));

      GLAccount.FINDSET;
      GLAccount.NEXT(LibraryRandom.RandInt(GLAccount.COUNT));
      CostType.GET(GLAccount."Cost Type No.");
    END;

    PROCEDURE FindCostTypeWithCostCenter@16(VAR CostType@1000 : Record 1103);
    BEGIN
      GetAllCostTypes(CostType);
      CostType.SETFILTER("Cost Center Code",'<>%1','');
      CostType.SETFILTER("Cost Object Code",'%1','');
      IF CostType.ISEMPTY THEN
        ERROR(STRSUBSTNO(NoRecordsInFilterErr,CostType.TABLECAPTION,CostType.GETFILTERS));

      CostType.NEXT(LibraryRandom.RandInt(CostType.COUNT));
    END;

    PROCEDURE FindCostCenter@2(VAR CostCenter@1000 : Record 1112);
    BEGIN
      CostCenter.SETFILTER("Line Type",FORMAT(CostCenter."Line Type"::"Cost Center"));
      CostCenter.SETFILTER(Blocked,'%1',FALSE);
      CostCenter.SETFILTER("Net Change",'<>%1',0);
      CostCenter.SETFILTER("Balance at Date",'<>%1',0);
      IF CostCenter.ISEMPTY THEN
        ERROR(STRSUBSTNO(NoRecordsInFilterErr,CostCenter.TABLECAPTION,CostCenter.GETFILTERS));

      CostCenter.NEXT(LibraryRandom.RandInt(CostCenter.COUNT));
    END;

    PROCEDURE FindCostJournalBatch@6(VAR CostJournalBatch@1000 : Record 1102;CostJournalTemplateName@1002 : Code[10]);
    BEGIN
      FindCostJnlBatchWithDelOption(CostJournalBatch,CostJournalTemplateName,TRUE);
    END;

    PROCEDURE FindCostJnlBatchWithDelOption@56(VAR CostJournalBatch@1000 : Record 1102;CostJournalTemplateName@1002 : Code[10];DeleteAfterPosting@1001 : Boolean);
    BEGIN
      CostJournalBatch.SETRANGE("Journal Template Name",CostJournalTemplateName);
      CostJournalBatch.SETRANGE("Delete after Posting",DeleteAfterPosting);
      IF CostJournalBatch.ISEMPTY THEN
        CreateCostJournalBatch(CostJournalBatch,CostJournalTemplateName)
      ELSE
        CostJournalBatch.FINDFIRST;
    END;

    PROCEDURE FindCostJournalTemplate@21(VAR CostJournalTemplate@1000 : Record 1100);
    BEGIN
      CostJournalTemplate.FINDFIRST;
    END;

    PROCEDURE FindCostObject@4(VAR CostObject@1000 : Record 1113);
    BEGIN
      CostObject.SETFILTER("Line Type",FORMAT(CostObject."Line Type"::"Cost Object"));
      CostObject.SETFILTER(Blocked,'%1',FALSE);
      CostObject.SETFILTER("Net Change",'<>%1',0);
      CostObject.SETFILTER("Balance at Date",'<>%1',0);
      IF CostObject.ISEMPTY THEN
        ERROR(STRSUBSTNO(NoRecordsInFilterErr,CostObject.TABLECAPTION,CostObject.GETFILTERS));

      CostObject.NEXT(LibraryRandom.RandInt(CostObject.COUNT));
    END;

    PROCEDURE FindGLAccLinkedToCostType@30(VAR GLAccount@1000 : Record 15);
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);
      GLAccount.SETFILTER("Cost Type No.",'<>%1','');
      IF GLAccount.ISEMPTY THEN
        ERROR(STRSUBSTNO(NoRecordsInFilterErr,GLAccount.TABLECAPTION,GLAccount.GETFILTERS));

      GLAccount.NEXT(LibraryRandom.RandInt(GLAccount.COUNT));
    END;

    PROCEDURE FindGLAccountsByCostType@7(VAR GLAccount@1001 : Record 15;GLAccountRange@1000 : Text[50]);
    BEGIN
      GLAccount.SETFILTER("No.",GLAccountRange);
      IF GLAccount.ISEMPTY THEN
        ERROR(STRSUBSTNO(NoRecordsInFilterErr,GLAccount.TABLECAPTION,GLAccount.GETFILTERS));

      GLAccount.FINDSET;
    END;

    PROCEDURE FindIncomeStmtGLAccount@18(VAR GLAccount@1000 : Record 15);
    BEGIN
      GetAllIncomeStmtGLAccounts(GLAccount);
      GLAccount.NEXT(LibraryRandom.RandInt(GLAccount.COUNT));
    END;

    PROCEDURE GetAllCostTypes@9(VAR CostType@1000 : Record 1103);
    BEGIN
      CostType.INIT;
      CostType.SETFILTER(Type,FORMAT(CostType.Type::"Cost Type"));
      CostType.SETFILTER("G/L Account Range",'<>%1','');
      IF CostType.ISEMPTY THEN
        ERROR(STRSUBSTNO(NoRecordsInFilterErr,CostType.TABLECAPTION,CostType.GETFILTERS));
      CostType.FINDSET;
    END;

    PROCEDURE GetAllIncomeStmtGLAccounts@23(VAR GLAccount@1000 : Record 15);
    BEGIN
      LibraryERM.FindGLAccount(GLAccount);
      GLAccount.SETFILTER("Income/Balance",FORMAT(GLAccount."Income/Balance"::"Income Statement"));
      IF GLAccount.ISEMPTY THEN
        ERROR(STRSUBSTNO(NoRecordsInFilterErr,GLAccount.TABLECAPTION,GLAccount.GETFILTERS));
      GLAccount.FINDSET;
    END;

    PROCEDURE GetAllocTargetEntryAmount@46(VAR CostAllocationTarget@1004 : Record 1107;TotalAmount@1003 : Decimal;TableNumber@1005 : Integer;KeyFieldNumber@1002 : Integer;AmountFieldNumber@1010 : Integer;FromValue@1008 : Integer;ToValue@1009 : Integer) TotalDebitValue : Decimal;
    VAR
      AmountFieldRef@1011 : FieldRef;
      KeyFieldRef@1007 : FieldRef;
      RecordRef@1006 : RecordRef;
      AllocatedCost@1012 : Decimal;
      EntryAmount@1001 : Decimal;
      FieldRefAmount@1000 : Decimal;
    BEGIN
      RecordRef.OPEN(TableNumber);
      KeyFieldRef := RecordRef.FIELD(KeyFieldNumber);
      KeyFieldRef.SETRANGE(FromValue,(ToValue - 1));
      RecordRef.FINDSET;

      IF RecordRef.ISEMPTY THEN
        ERROR(STRSUBSTNO(NoRecordsInFilterErr,RecordRef.NAME,RecordRef.GETFILTERS));

      IF RecordRef.COUNT <> CostAllocationTarget.COUNT THEN
        ERROR(
          STRSUBSTNO(
            NumberOfRecordsNotMatchingErr,RecordRef.COUNT,RecordRef.NAME,CostAllocationTarget.COUNT,CostAllocationTarget.TABLECAPTION));

      AmountFieldRef := RecordRef.FIELD(AmountFieldNumber);

      REPEAT
        // To avoid the rounding errors, approximate the decimal numbers by cutting out the fractional part.
        FieldRefAmount := AmountFieldRef.VALUE;
        EntryAmount := ROUND(FieldRefAmount,1);
        AllocatedCost := ROUND(TotalAmount * (CostAllocationTarget.Percent / 100),1);

        IF EntryAmount <> AllocatedCost THEN
          IF -EntryAmount <> AllocatedCost THEN
            ERROR(
              STRSUBSTNO(
                AllocValuesNotMatchingErr,FieldRefAmount,EntryAmount,CostAllocationTarget.Percent,
                TotalAmount,AllocatedCost,(CostAllocationTarget.Percent * TotalAmount)));

        TotalDebitValue := TotalDebitValue + FieldRefAmount;
        CostAllocationTarget.NEXT;
      UNTIL RecordRef.NEXT = 0;

      EXIT(TotalDebitValue);
    END;

    PROCEDURE InitializeCASetup@54();
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      CostAccountingSetup.GET;
      CostAccountingSetup.VALIDATE("Align G/L Account",CostAccountingSetup."Align G/L Account"::Automatic);
      CostAccountingSetup.VALIDATE("Align Cost Center Dimension",CostAccountingSetup."Align Cost Center Dimension"::Automatic);
      CostAccountingSetup.VALIDATE("Align Cost Object Dimension",CostAccountingSetup."Align Cost Object Dimension"::Automatic);
      CostAccountingSetup.VALIDATE("Auto Transfer from G/L",FALSE);
      IF CostAccountingSetup."Last Allocation ID" = '' THEN
        CostAccountingSetup.VALIDATE("Last Allocation ID",'A0');
      IF CostAccountingSetup."Last Allocation Doc. No." = '' THEN
        CostAccountingSetup.VALIDATE("Last Allocation Doc. No.",'ALLOC0');
      CostAccountingSetup.MODIFY(TRUE);

      InitializeCASourceCodes;
    END;

    PROCEDURE InitializeCASourceCodes@59();
    VAR
      SourceCodeSetup@1000 : Record 242;
      SourceCode@1002 : Record 230;
      Modified@1001 : Boolean;
    BEGIN
      SourceCodeSetup.GET;

      IF SourceCodeSetup."G/L Entry to CA" = '' THEN BEGIN
        LibraryERM.CreateSourceCode(SourceCode);
        SourceCodeSetup.VALIDATE("G/L Entry to CA",SourceCode.Code);
        Modified := TRUE;
      END;
      IF SourceCodeSetup."Cost Journal" = '' THEN BEGIN
        LibraryERM.CreateSourceCode(SourceCode);
        SourceCodeSetup.VALIDATE("Cost Journal",SourceCode.Code);
        Modified := TRUE;
      END;
      IF SourceCodeSetup."Cost Allocation" = '' THEN BEGIN
        LibraryERM.CreateSourceCode(SourceCode);
        SourceCodeSetup.VALIDATE("Cost Allocation",SourceCode.Code);
        Modified := TRUE;
      END;

      IF Modified THEN
        SourceCodeSetup.MODIFY(TRUE);
    END;

    PROCEDURE LastAllocSourceID@50() : Code[10];
    VAR
      CostAccountingSetup@1000 : Record 1108;
    BEGIN
      CostAccountingSetup.GET;
      EXIT(CostAccountingSetup."Last Allocation ID");
    END;

    PROCEDURE LastAllocTargetID@35(CostAllocationSource@1000 : Record 1106) : Integer;
    VAR
      CostAllocationTarget@1001 : Record 1107;
    BEGIN
      CostAllocationTarget.SETFILTER(ID,'%1',CostAllocationSource.ID);
      IF CostAllocationTarget.FINDLAST THEN
        EXIT(CostAllocationTarget."Line No.");

      EXIT(0);
    END;

    PROCEDURE PostCostJournalLine@20(CostJournalLine@1000 : Record 1101);
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"CA Jnl.-Post Batch",CostJournalLine);
    END;

    PROCEDURE PostGenJournalLine@67(AccountNo@1000 : Code[20]);
    VAR
      GenJournalLine@1001 : Record 81;
    BEGIN
      CreateJnlLine(GenJournalLine,AccountNo);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    PROCEDURE SetAlignment@26(FieldNo@1000 : Integer;FieldOptionValue@1001 : Option);
    VAR
      CostAccountingSetup@1002 : Record 1108;
      Field@1005 : Record 2000000041;
      RecordRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      CostAccountingSetup.GET;
      RecordRef.GETTABLE(CostAccountingSetup);
      FieldRef := RecordRef.FIELD(FieldNo);
      Field.GET(RecordRef.NUMBER,FieldRef.NUMBER);
      IF Field.Type = Field.Type::Option THEN BEGIN
        FieldRef.VALIDATE(FieldOptionValue);
        RecordRef.MODIFY(TRUE);
      END;
    END;

    PROCEDURE SetAutotransferFromGL@32(Autotransfer@1000 : Boolean);
    VAR
      CostAccountingSetup@1001 : Record 1108;
    BEGIN
      CostAccountingSetup.GET;
      CostAccountingSetup.VALIDATE("Auto Transfer from G/L",Autotransfer);
      CostAccountingSetup.MODIFY(TRUE);
    END;

    PROCEDURE SetDefaultDimension@66(GLAccountNo@1000 : Code[20]);
    VAR
      CostCenter@1003 : Record 1112;
      DimValue@1002 : Record 349;
      DefaultDimension@1001 : Record 352;
    BEGIN
      IF NOT DefaultDimension.GET(DATABASE::"G/L Account",GLAccountNo,CostCenterDimension) THEN BEGIN
        LibraryDimension.FindDimensionValue(DimValue,CostCenterDimension);
        LibraryDimension.CreateDefaultDimensionGLAcc(DefaultDimension,GLAccountNo,DimValue."Dimension Code",DimValue.Code);
      END;

      // Make sure corresponding cost center exists
      IF NOT CostCenter.GET(DefaultDimension."Dimension Value Code") THEN BEGIN
        CostCenter.INIT;
        CostCenter.VALIDATE(Code,DefaultDimension."Dimension Value Code");
        CostCenter.VALIDATE("Line Type",CostCenter."Line Type"::"Cost Center");
        CostCenter.INSERT(TRUE);
      END;

      CheckBlockedDimensionValues(GLAccountNo); // check for blocked default dimension values, which prevent posting
      CheckBlockedDimCombination; // check for blocked dimension combinations, which prevent posting
    END;

    PROCEDURE SetupGeneralJnlBatch@78(VAR GenJournalBatch@1000 : Record 232);
    VAR
      GLAccount@1002 : Record 15;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      CreateBalanceSheetGLAccount(GLAccount);
      GenJournalBatch.VALIDATE("Bal. Account No.",GLAccount."No.");
      GenJournalBatch.MODIFY(TRUE);

      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    PROCEDURE SetupGLAccount@65(VAR GLAccount@1000 : Record 15);
    BEGIN
      FindGLAccLinkedToCostType(GLAccount);
      SetDefaultDimension(GLAccount."No.");
    END;

    PROCEDURE TransferBudgetToActual@148(VAR TransferToActual@1000 : TestRequestPage 1137;BudgetName@1001 : Code[10];DateRange@1002 : Text[30]);
    BEGIN
      TransferToActual."Cost Budget Entry".SETFILTER("Budget Name",BudgetName);
      TransferToActual."Cost Budget Entry".SETFILTER(Date,DateRange);
    END;

    PROCEDURE TransferGLEntries@28();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Transfer GL Entries to CA");
    END;

    PROCEDURE UpdateAllocSourceWithCCenter@34(VAR CostAllocationSource@1000 : Record 1106);
    VAR
      CostCenter@1001 : Record 1112;
    BEGIN
      FindCostCenter(CostCenter);
      CostAllocationSource.VALIDATE("Cost Center Code",CostCenter.Code);
      CostAllocationSource.MODIFY(TRUE);
    END;

    PROCEDURE UpdateAllocSourceWithCObject@31(VAR CostAllocationSource@1000 : Record 1106);
    VAR
      CostObject@1001 : Record 1113;
    BEGIN
      FindCostObject(CostObject);
      CostAllocationSource.VALIDATE("Cost Object Code",CostObject.Code);
      CostAllocationSource.MODIFY(TRUE);
    END;

    PROCEDURE UpdateAllocTargetWithCCenter@131(VAR CostAllocationTarget@1005 : Record 1107);
    VAR
      CostCenter@1004 : Record 1112;
    BEGIN
      FindCostCenter(CostCenter);
      CostAllocationTarget.VALIDATE("Target Cost Center",CostCenter.Code);
      CostAllocationTarget.MODIFY(TRUE);
    END;

    PROCEDURE UpdateAllocTargetWithCObject@132(VAR CostAllocationTarget@1005 : Record 1107);
    VAR
      CostObject@1004 : Record 1113;
    BEGIN
      FindCostObject(CostObject);
      CostAllocationTarget.VALIDATE("Target Cost Object",CostObject.Code);
      CostAllocationTarget.MODIFY(TRUE);
    END;

    [Normal]
    PROCEDURE UpdateCostTypeWithCostCenter@1(VAR CostType@1000 : Record 1103);
    VAR
      CostCenter@1001 : Record 1112;
    BEGIN
      FindCostCenter(CostCenter);
      CostType.VALIDATE("Cost Center Code",CostCenter.Code);
      CostType.MODIFY(TRUE);
    END;

    [Normal]
    PROCEDURE UpdateCostTypeWithCostObject@3(VAR CostType@1000 : Record 1103);
    VAR
      CostObject@1001 : Record 1113;
    BEGIN
      FindCostObject(CostObject);
      CostType.VALIDATE("Cost Object Code",CostObject.Code);
      CostType.MODIFY(TRUE);
    END;

    PROCEDURE ValidateEntriesTransfered@64();
    VAR
      GLRegister@1000 : Record 45;
      GLEntry@1002 : Record 17;
      CostRegister@1001 : Record 1105;
      CostEntry@1003 : Record 1104;
      GLAccount@1004 : Record 15;
    BEGIN
      GLRegister.FINDLAST;
      GLEntry.GET(GLRegister."From Entry No.");
      CostRegister.SETFILTER(Source,FORMAT(CostRegister.Source::"Transfer from G/L"));
      CostRegister.FINDLAST;
      CostEntry.GET(CostRegister."From Cost Entry No.");
      GLAccount.GET(CostEntry."G/L Account");

      // Validate Cost Register Entry
      Assert.AreEqual(1,CostRegister."No. of Entries",
        STRSUBSTNO(ExpectedValueIsDifferentErr,CostRegister.FIELDNAME("No. of Entries")));
      Assert.AreEqual(0,CostRegister."To Cost Entry No." - CostRegister."From Cost Entry No.",CostEntriesCountErr);
      Assert.AreEqual(GLEntry.Amount,CostRegister."Debit Amount",
        STRSUBSTNO(ExpectedValueIsDifferentErr,CostRegister.FIELDNAME("Debit Amount")));

      // Validate Cost Entry
      Assert.AreEqual(GLEntry.Amount,CostEntry.Amount,STRSUBSTNO(ExpectedValueIsDifferentErr,CostEntry.FIELDNAME(Amount)));
      Assert.AreEqual(GLEntry."Entry No.",CostEntry."G/L Entry No.",
        STRSUBSTNO(ExpectedValueIsDifferentErr,CostEntry.FIELDNAME("G/L Entry No.")));
      Assert.AreEqual(GLAccount."Cost Type No.",CostEntry."Cost Type No.",
        STRSUBSTNO(ExpectedValueIsDifferentErr,CostEntry.FIELDNAME("Cost Type No.")));
      Assert.AreEqual(GLEntry."G/L Account No.",CostEntry."G/L Account",
        STRSUBSTNO(ExpectedValueIsDifferentErr,CostEntry.FIELDNAME("G/L Account")));
      Assert.AreEqual(GLEntry."Document No.",CostEntry."Document No.",
        STRSUBSTNO(ExpectedValueIsDifferentErr,CostEntry.FIELDNAME("Document No.")));
      Assert.AreEqual(FALSE,CostEntry.Allocated,STRSUBSTNO(ExpectedValueIsDifferentErr,CostEntry.FIELDNAME(Allocated)));
    END;

    PROCEDURE ValidateGLAccountCostTypeRef@63(CostTypeNo@1001 : Code[20]);
    VAR
      CostType@1003 : Record 1103;
      GLAccount@1002 : Record 15;
    BEGIN
      // The Cost Type has the G/L Account Range filled in.
      CostType.GET(CostTypeNo);
      CostType.TESTFIELD("G/L Account Range");

      // The G/L Accounts have the Cost Type No. filled in.
      FindGLAccountsByCostType(GLAccount,CostType."G/L Account Range");
      REPEAT
        GLAccount.TESTFIELD("Cost Type No.",CostType."No.");
      UNTIL GLAccount.NEXT = 0;
    END;

    PROCEDURE ValidateGLAccountIsIncomeStmt@62(VAR CostType@1000 : Record 1103);
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      REPEAT
        FindGLAccountsByCostType(GLAccount,CostType."G/L Account Range");
        REPEAT
          GLAccount.TESTFIELD("Income/Balance",GLAccount."Income/Balance"::"Income Statement");
        UNTIL GLAccount.NEXT = 0;
      UNTIL CostType.NEXT = 0;
    END;

    PROCEDURE VerifyCostTypeIntegrity@69();
    VAR
      CostType@1000 : Record 1103;
      GLAccount@1001 : Record 15;
    BEGIN
      GetAllCostTypes(CostType);
      REPEAT
        GLAccount.SETFILTER("No.",CostType."G/L Account Range");
        IF GLAccount.COUNT > 1 THEN BEGIN
          GLAccount.FINDSET;
          REPEAT
            IF GLAccount."Cost Type No." <> CostType."No." THEN
              ERROR(GetCostTypesFromGLErr);
          UNTIL GLAccount.NEXT = 0;
        END;
      UNTIL CostType.NEXT = 0;
    END;

    BEGIN
    {
      Feature: 92842 - Cost Accounting.
      Test Brief: http://vstfnav/Sites/DynamicsNAV7/Document Repository/Test Briefs and TDS/92842 - TDS - Cost Accounting.docx
    }
    END.
  }
}

