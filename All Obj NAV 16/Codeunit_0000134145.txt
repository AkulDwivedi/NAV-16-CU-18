OBJECT Codeunit 134145 ERM Reverse Diff Amount Type
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryRandom@1002 : Codeunit 130440;
      LibraryERM@1001 : Codeunit 131300;
      AmountError@1004 : TextConst 'ENU="%1 must be %2 in %3 %4=%5."';
      EqualAmountError@1005 : TextConst 'ENU=Amount must be Zero.';

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseDebitAmountLCY@1();
    BEGIN
      // Create and Post General Journal Line for G/L Account. Reverse Transaction from G/L Entries and Verify Debit Amount
      // in G/L Entry and Balance for G/L Account.
      ReverseDebitAmount('');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseDebitAmountFCY@6();
    BEGIN
      // Create and Post General Journal Line for G/L Account with Currency. Reverse Transaction from G/L Entries and Verify Debit Amount
      // in G/L Entry and Balance for G/L Account.
      ReverseDebitAmount(CreateCurrency);
    END;

    LOCAL PROCEDURE ReverseDebitAmount@15(CurrencyCode@1001 : Code[10]);
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      ReverseDifferentAmount(GenJournalLine,LibraryRandom.RandDec(10,2),CurrencyCode);

      // Verify: Verify Reversal Credit Entry in G/L Entry and Balance for G/L Account.
      VerifyBalanceAndDebitAmount(GenJournalLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseCreditAmountLCY@12();
    BEGIN
      // Create and Post General Journal Line for G/L Account. Reverse Transaction from G/L Entries and Verify Credit Amount
      // in G/L Entry and Balance for G/L Account.
      ReverseCreditAmount('');
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE ReverseCreditAmountFCY@5();
    BEGIN
      // Create and Post General Journal Line for G/L Account with Currency. Reverse Transaction from G/L Entries and Verify Credit Amount
      // in G/L Entry and Balance for G/L Account.
      ReverseCreditAmount(CreateCurrency);
    END;

    LOCAL PROCEDURE ReverseCreditAmount@17(CurrencyCode@1001 : Code[10]);
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      ReverseDifferentAmount(GenJournalLine,-LibraryRandom.RandDec(10,2),CurrencyCode);

      // Verify: Verify Reversal Credit Entry in G/L Entry and Balance for G/L Account.
      VerifyBalanceAndCreditAmount(GenJournalLine);
    END;

    LOCAL PROCEDURE ReverseDifferentAmount@10(VAR GenJournalLine@1000 : Record 81;Amount@1006 : Decimal;CurrencyCode@1007 : Code[10]);
    VAR
      GLEntry@1004 : Record 17;
      ReversalEntry@1002 : Record 179;
    BEGIN
      // Setup: Create and Post General Journal Line for G/L Account.
      CreateGeneralJournalLine(GenJournalLine,Amount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      FindGLEntry(GLEntry,GenJournalLine."Document No.",GenJournalLine."Account No.");

      // Exercise: Reverse G/L Entry Transactions.
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseTransaction(GLEntry."Transaction No.");
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@19(VAR GenJournalLine@1005 : Record 81;Amount@1003 : Decimal);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::" ",GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,Amount);
    END;

    LOCAL PROCEDURE CalculateAccountBalance@4(GLAccountNo@1000 : Code[20]) : Decimal;
    VAR
      GLEntry@1001 : Record 17;
    BEGIN
      GLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      GLEntry.CALCSUMS(Amount);
      EXIT(GLEntry.Amount);
    END;

    LOCAL PROCEDURE CreateCurrency@14() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE FindGLEntry@3(VAR GLEntry@1000 : Record 17;DocumentNo@1001 : Code[20];AccountNo@1002 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.SETRANGE("G/L Account No.",AccountNo);
      GLEntry.FINDLAST;
    END;

    LOCAL PROCEDURE VerifyBalanceAndDebitAmount@2(GenJournalLine@1000 : Record 81);
    VAR
      GeneralLedgerSetup@1003 : Record 98;
      GLEntry@1002 : Record 17;
    BEGIN
      GeneralLedgerSetup.GET;
      FindGLEntry(GLEntry,GenJournalLine."Document No.",GenJournalLine."Account No.");
      Assert.AreNearlyEqual(
        -GenJournalLine."Amount (LCY)",GLEntry."Debit Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,GLEntry.FIELDCAPTION("Debit Amount"),-GenJournalLine."Amount (LCY)",
          GLEntry.TABLECAPTION,GLEntry.FIELDCAPTION("Entry No."),GLEntry."Entry No."));
      Assert.AreEqual(0,CalculateAccountBalance(GenJournalLine."Account No."),EqualAmountError);
    END;

    LOCAL PROCEDURE VerifyBalanceAndCreditAmount@9(GenJournalLine@1002 : Record 81);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
      GLEntry@1001 : Record 17;
    BEGIN
      GeneralLedgerSetup.GET;
      FindGLEntry(GLEntry,GenJournalLine."Document No.",GenJournalLine."Account No.");
      Assert.AreNearlyEqual(
        GenJournalLine."Amount (LCY)",GLEntry."Credit Amount",GeneralLedgerSetup."Amount Rounding Precision",
        STRSUBSTNO(AmountError,GLEntry.FIELDCAPTION("Credit Amount"),GenJournalLine."Amount (LCY)",
          GLEntry.TABLECAPTION,GLEntry.FIELDCAPTION("Entry No."),GLEntry."Entry No."));
      Assert.AreEqual(0,CalculateAccountBalance(GenJournalLine."Account No."),EqualAmountError);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@78(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Handler for confirmation messages, always send positive reply.
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@7(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    BEGIN
    {
      // [FEATURE] [Reverse]
      Unsupported version tags:
      ES: Unable to Execute

      Test Reverse feature on Debit and Credit Amount for G/L Account Entries.
      1. Test Reverse Entry for Debit Amount field in LCY Currency.
      2. Test Reverse Entry for Credit Amount field in LCY Currency.
      3. Test Reverse Entry for Debit Amount field in FCY Currency.
      4. Test Reverse Entry for Credit Amount field in FCY Currency.

      Covers Test Cases:
      ------------------------------------------------------
          Test Function Name                      TFS ID
      ------------------------------------------------------
        ReverseDebitAmountLCY         125237,125238
        ReverseCreditAmountLCY        125240,125241
        ReverseDebitAmountFCY         125243,125244
        ReverseCreditAmountFCY        125243,125244,125246.
    }
    END.
  }
}

