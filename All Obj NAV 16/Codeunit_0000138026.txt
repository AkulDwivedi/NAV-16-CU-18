OBJECT Codeunit 138026 SMB Simplify UI Purch. Cr.Memo
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibraryUtility@1004 : Codeunit 131000;
      LibraryVariableStorage@1025 : Codeunit 131004;
      LibrarySmallBusiness@1009 : Codeunit 132213;
      isInitialized@1000 : Boolean;
      SelectVendErr@1007 : TextConst 'ENU=You must select an existing vendor.';
      HelloWordTxt@1003 : TextConst 'ENU=Hello World';

    LOCAL PROCEDURE Initialize@4();
    VAR
      ConfigTemplateHeader@1000 : Record 8618;
      InventorySetup@1001 : Record 313;
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;

      ConfigTemplateHeader.SETRANGE("Table ID",DATABASE::Vendor);
      ConfigTemplateHeader.DELETEALL(TRUE);

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;

      InventorySetup.GET;
      InventorySetup."Automatic Cost Posting" := FALSE;
      InventorySetup.MODIFY;

      isInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(CurrencyHandler)]
    PROCEDURE Currency@24();
    VAR
      Vend@1000 : Record 23;
      Item@1001 : Record 27;
      CurrExchRate@1003 : Record 330;
      PurchHeader@1002 : Record 38;
      MiniPurchCrMemo@1004 : TestPage 1369;
      OldValue@1005 : Decimal;
    BEGIN
      Initialize;

      CurrExchRate.FINDFIRST;

      LibrarySmallBusiness.CreateVendor(Vend);
      Vend.VALIDATE("Currency Code",CurrExchRate."Currency Code");
      Vend.MODIFY(TRUE);

      LibrarySmallBusiness.CreateItem(Item);

      MiniPurchCrMemo.OPENNEW;
      MiniPurchCrMemo."Buy-from Vendor Name".SETVALUE(Vend.Name);

      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::"Credit Memo");
      PurchHeader.SETRANGE("Buy-from Vendor No.",Vend."No.");
      PurchHeader.FINDFIRST;
      OldValue := PurchHeader."Currency Factor";

      // Exercise
      MiniPurchCrMemo."Currency Code".ASSISTEDIT;
      MiniPurchCrMemo.CLOSE;

      // Verify
      PurchHeader.FIND;
      Assert.AreNotEqual(OldValue,PurchHeader."Currency Factor",'');
    END;

    [Test]
    PROCEDURE ResponsibilityCenters@21();
    VAR
      Vend@1000 : Record 23;
      Item@1001 : Record 27;
      UserSetup@1005 : Record 91;
      ResponsibilityCenter@1006 : Record 5714;
      PurchHeader@1002 : Record 38;
      MiniPurchCrMemo@1004 : TestPage 1369;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateVendor(Vend);
      LibrarySmallBusiness.CreateItem(Item);
      CreateNewRespCenter(ResponsibilityCenter);

      UserSetup.INIT;
      UserSetup."User ID" := USERID;
      UserSetup.VALIDATE("Purchase Resp. Ctr. Filter",ResponsibilityCenter.Code);
      IF NOT UserSetup.INSERT THEN
        UserSetup.MODIFY;

      MiniPurchCrMemo.OPENNEW;
      MiniPurchCrMemo."Buy-from Vendor Name".SETVALUE(Vend.Name);
      MiniPurchCrMemo.CLOSE;

      PurchHeader.SETRANGE("Buy-from Vendor No.",Vend."No.");
      PurchHeader.FINDFIRST;

      Assert.AreEqual(ResponsibilityCenter.Code,PurchHeader."Responsibility Center",'');

      CreateNewRespCenter(ResponsibilityCenter);
      UserSetup.VALIDATE("Purchase Resp. Ctr. Filter",ResponsibilityCenter.Code);
      UserSetup.MODIFY;

      WITH MiniPurchCrMemo DO BEGIN
        OPENEDIT;
        Assert.IsFalse(GOTORECORD(PurchHeader),'');
        CLOSE;
      END;
    END;

    [Test]
    PROCEDURE ExtendedText@12();
    VAR
      Vend@1000 : Record 23;
      Item@1001 : Record 27;
      ExtendedTextHeader@1002 : Record 279;
      ExtendedTextLine@1003 : Record 280;
      PurchLine@1005 : Record 39;
      MiniPurchCrMemo@1004 : TestPage 1369;
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateVendor(Vend);
      LibrarySmallBusiness.CreateItem(Item);

      ExtendedTextHeader.INIT;
      ExtendedTextHeader.VALIDATE("Table Name",ExtendedTextHeader."Table Name"::Item);
      ExtendedTextHeader.VALIDATE("No.",Item."No.");
      ExtendedTextHeader.VALIDATE("Purchase Invoice",TRUE);
      ExtendedTextHeader.INSERT(TRUE);

      ExtendedTextLine.INIT;
      ExtendedTextLine.VALIDATE("Table Name",ExtendedTextHeader."Table Name");
      ExtendedTextLine.VALIDATE("No.",ExtendedTextHeader."No.");
      ExtendedTextLine.VALIDATE("Language Code",ExtendedTextHeader."Language Code");
      ExtendedTextLine.VALIDATE("Text No.",ExtendedTextHeader."Text No.");
      ExtendedTextLine.VALIDATE("Line No.",1);
      ExtendedTextLine.VALIDATE(Text,HelloWordTxt);
      ExtendedTextLine.INSERT(TRUE);

      MiniPurchCrMemo.OPENNEW;
      MiniPurchCrMemo."Buy-from Vendor Name".SETVALUE(Vend.Name);

      MiniPurchCrMemo.PurchLines.NEW;
      MiniPurchCrMemo.PurchLines."No.".SETVALUE(Item."No.");
      MiniPurchCrMemo.PurchLines.InsertExtTextsAction.INVOKE;

      // Verify
      PurchLine.SETCURRENTKEY("Document Type","Document No.","Line No.");
      PurchLine.SETRANGE("Buy-from Vendor No.",Vend."No.");
      PurchLine.FINDSET;
      Assert.AreEqual(PurchLine."No.",Item."No.",'');

      PurchLine.SETRANGE("Buy-from Vendor No.");
      PurchLine.NEXT;
      Assert.AreEqual(PurchLine."No.",'','');
      Assert.AreNotEqual(0,PurchLine."Attached to Line No.",'');
      Assert.AreEqual(PurchLine.Description,FORMAT(HelloWordTxt),'');
    END;

    [Test]
    PROCEDURE ExistingVend@1();
    VAR
      Vend@1000 : Record 23;
      PurchCreditMemo@1001 : TestPage 1369;
    BEGIN
      Initialize;

      CreateVend(Vend);

      // Exercise: Select existing Vend.
      PurchCreditMemo.OPENNEW;
      PurchCreditMemo."Buy-from Vendor Name".SETVALUE(Vend.Name);

      // Verify.
      VerifyPurchCreditMemoAgainstVend(PurchCreditMemo,Vend,Vend.Name);
      VerifyPurchCreditMemoAgainstBillToVend(PurchCreditMemo,Vend);
    END;

    [Test]
    [HandlerFunctions(ChangeBuyToPayToVendConfirmHandler)]
    PROCEDURE UpdateVendNameWithExistingVendName@3();
    VAR
      Vend1@1003 : Record 23;
      Vend@1000 : Record 23;
      PurchCreditMemo@1001 : TestPage 1369;
    BEGIN
      Initialize;
      CreateVend(Vend);
      CreateVend(Vend1);

      // Exercise: Select existing Vend.
      PurchCreditMemo.OPENNEW;
      PurchCreditMemo.PurchLines.FIRST;
      PurchCreditMemo."Buy-from Vendor Name".SETVALUE(Vend.Name);
      // Enqueue for ChangeSellToBillToVendConfirmHandler that is called twice
      // for Buy-from and bill-to
      AnswerYesToAllConfirmDialogs;
      PurchCreditMemo."Buy-from Vendor Name".SETVALUE(Vend1.Name);

      // Verify.
      VerifyPurchCreditMemoAgainstVend(PurchCreditMemo,Vend1,Vend1.Name);
    END;

    [Test]
    PROCEDURE NewVendExpectError@19();
    VAR
      Vend@1000 : Record 23;
      ConfigTemplateHeader@1002 : Record 8618;
      PurchCreditMemo@1001 : TestPage 1369;
      VendName@1003 : Text[50];
    BEGIN
      Initialize;

      LibrarySmallBusiness.CreateVendorTemplate(ConfigTemplateHeader);

      // Exercise.
      VendName := LibraryUtility.GenerateRandomCode(Vend.FIELDNO(Name),DATABASE::Vendor);

      PurchCreditMemo.OPENNEW;
      PurchCreditMemo.PurchLines.FIRST;

      // Verify
      ASSERTERROR PurchCreditMemo."Buy-from Vendor Name".SETVALUE(VendName);
    END;

    [Test]
    [HandlerFunctions(VendListPageHandler)]
    PROCEDURE VendorsWithSameName@26();
    VAR
      Vend@1000 : Record 23;
      PurchCreditMemo@1001 : TestPage 1369;
    BEGIN
      Initialize;

      CreateTwoVendorsSameName(Vend);

      // Exercise: Select existing Vend - second one in the page handler
      LibraryVariableStorage.Enqueue(Vend.Name); // for the Vend list page handler
      PurchCreditMemo.OPENNEW;
      PurchCreditMemo."Buy-from Vendor Name".SETVALUE(Vend.Name);

      // Verify.
      VerifyPurchCreditMemoAgainstVend(PurchCreditMemo,Vend,Vend.Name);
    END;

    [Test]
    [HandlerFunctions(VendListCancelPageHandler)]
    PROCEDURE VendorsWithSameNameCancelSelect@6();
    VAR
      Vend@1000 : Record 23;
      PurchCreditMemo@1001 : TestPage 1369;
    BEGIN
      Initialize;

      CreateTwoVendorsSameName(Vend);

      // Exercise: Select existing Vend - second one in the page handler
      LibraryVariableStorage.Enqueue(Vend.Name); // for the Vend list page handler
      PurchCreditMemo.OPENNEW;
      ASSERTERROR PurchCreditMemo."Buy-from Vendor Name".SETVALUE(Vend.Name);
      Assert.ExpectedError(SelectVendErr);
    END;

    [Test]
    PROCEDURE DueDateAutoFilled@33();
    VAR
      Vend@1001 : Record 23;
      PurchCreditMemo@1000 : TestPage 1369;
    BEGIN
      Initialize;

      CreateVend(Vend);
      Vend."Payment Terms Code" := '';
      Vend.MODIFY;

      PurchCreditMemo.OPENNEW;
      PurchCreditMemo."Buy-from Vendor Name".SETVALUE(Vend.Name);

      Assert.AreEqual(PurchCreditMemo."Payment Terms Code".VALUE,'','Payment Terms Code should be empty by default');
      Assert.AreEqual(PurchCreditMemo."Due Date".ASDATE,PurchCreditMemo."Document Date".ASDATE,'Due Date incorrectly calculated.');
    END;

    [Test]
    PROCEDURE DueDateUpdatedWithPaymentTermsChange@25();
    VAR
      Vend@1001 : Record 23;
      PaymentTerms@1002 : Record 3;
      PurchCreditMemo@1000 : TestPage 1369;
      ExpectedDueDate@1003 : Date;
    BEGIN
      Initialize;

      CreateVend(Vend);

      PurchCreditMemo.OPENNEW;
      PurchCreditMemo."Buy-from Vendor Name".SETVALUE(Vend.Name);

      PaymentTerms.GET(Vend."Payment Terms Code");
      PurchCreditMemo."Payment Terms Code".SETVALUE(PaymentTerms.Code);
      ExpectedDueDate := CALCDATE(PaymentTerms."Due Date Calculation",PurchCreditMemo."Document Date".ASDATE);
      Assert.AreEqual(PurchCreditMemo."Due Date".ASDATE,ExpectedDueDate,'Due Date incorrectly calculated.');
    END;

    [Test]
    PROCEDURE ExpectedRcptDatePresentOnPurchCreditMemo@15();
    VAR
      PurchCreditMemo@1000 : TestPage 1369;
      PostedPurchCreditMemo@1002 : TestPage 1372;
    BEGIN
      Initialize;

      PurchCreditMemo.OPENNEW;
      Assert.IsTrue(PurchCreditMemo."Expected Receipt Date".ENABLED,
        FORMAT('Shipment Date should be present on Purch Credit Memo'));

      PostedPurchCreditMemo.OPENVIEW;
      Assert.IsTrue(PurchCreditMemo."Expected Receipt Date".ENABLED,
        FORMAT('Shipment Date should be present on Posted Purch Credit Memo'));
    END;

    LOCAL PROCEDURE CreateTwoVendorsSameName@17(VAR Vend@1000 : Record 23);
    VAR
      Vend1@1001 : Record 23;
    BEGIN
      CreateVend(Vend1);
      CreateVend(Vend);
      Vend.VALIDATE(Name,Vend1.Name);
      Vend.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyPurchCreditMemoAgainstVend@44(PurchCreditMemo@1000 : TestPage 1369;Vend@1001 : Record 23;NewVendName@1002 : Text[50]);
    BEGIN
      PurchCreditMemo."Buy-from Vendor Name".ASSERTEQUALS(NewVendName);
      PurchCreditMemo."Buy-from Address".ASSERTEQUALS(Vend.Address);
      PurchCreditMemo."Buy-from City".ASSERTEQUALS(Vend.City);
      PurchCreditMemo."Buy-from Post Code".ASSERTEQUALS(Vend."Post Code");
    END;

    LOCAL PROCEDURE VerifyPurchCreditMemoAgainstBillToVend@23(PurchCreditMemo@1000 : TestPage 1369;Vend@1001 : Record 23);
    BEGIN
      PurchCreditMemo."Pay-to Vendor No.".ASSERTEQUALS(Vend."No.");
      PurchCreditMemo."Pay-to Address".ASSERTEQUALS(Vend.Address);
      PurchCreditMemo."Pay-to City".ASSERTEQUALS(Vend.City);
      PurchCreditMemo."Pay-to Post Code".ASSERTEQUALS(Vend."Post Code");
    END;

    [ModalPageHandler]
    PROCEDURE VendListPageHandler@35(VAR VendList@1000 : TestPage 1331);
    VAR
      VendName@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(VendName);
      VendList.FILTER.SETFILTER(Name,VendName);
      VendList.LAST;
      VendList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE VendListCancelPageHandler@9(VAR VendList@1000 : TestPage 1331);
    BEGIN
      VendList.Cancel.INVOKE;
    END;

    LOCAL PROCEDURE CreateVend@7(VAR Vend@1000 : Record 23);
    BEGIN
      LibrarySmallBusiness.CreateVendor(Vend);
      Vend.VALIDATE(Name,LibraryUtility.GenerateRandomCode(Vend.FIELDNO(Name),DATABASE::Vendor));
      Vend.VALIDATE(Address,LibraryUtility.GenerateRandomCode(Vend.FIELDNO(Address),DATABASE::Vendor));
      Vend.VALIDATE("Address 2",LibraryUtility.GenerateRandomCode(Vend.FIELDNO("Address 2"),DATABASE::Vendor));
      Vend.VALIDATE(City,LibraryUtility.GenerateRandomCode(Vend.FIELDNO(City),DATABASE::Vendor));
      Vend.VALIDATE("Post Code",LibraryUtility.GenerateRandomCode(Vend.FIELDNO("Post Code"),DATABASE::Vendor));
      Vend.MODIFY;
    END;

    [ConfirmHandler]
    PROCEDURE ChangeBuyToPayToVendConfirmHandler@13(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      VarReply@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(VarReply);
      Reply := VarReply;
    END;

    LOCAL PROCEDURE AnswerYesToAllConfirmDialogs@29();
    VAR
      I@1000 : Integer;
    BEGIN
      ASSERTERROR BEGIN
        FOR I := 1 TO 10 DO
          LibraryVariableStorage.Enqueue(TRUE);
        COMMIT;
        ERROR('');
      END
    END;

    [ModalPageHandler]
    PROCEDURE CurrencyHandler@36(VAR ChangeExchRate@1000 : TestPage 511);
    VAR
      OldValue@1001 : Decimal;
    BEGIN
      EVALUATE(OldValue,ChangeExchRate.RefExchRate.VALUE);
      ChangeExchRate.RefExchRate.SETVALUE(OldValue + 1);
      ChangeExchRate.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateNewRespCenter@28(VAR ResponsibilityCenter@1000 : Record 5714);
    VAR
      NewCode@1001 : Code[10];
    BEGIN
      ResponsibilityCenter.INIT;
      NewCode := LibraryUtility.GenerateRandomCode(ResponsibilityCenter.FIELDNO(Code),DATABASE::"Responsibility Center");
      ResponsibilityCenter.VALIDATE(Code,NewCode);
      ResponsibilityCenter.INSERT;
    END;

    BEGIN
    {
      // [FEATURE] [Credit Memo] [SMB] [Purchase] [UI]
    }
    END.
  }
}

