OBJECT Codeunit 136126 Service Resource Skill
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryService@1000 : Codeunit 131902;
      Assert@1002 : Codeunit 130000;
      IsInitialized@1001 : Boolean;
      ErrorResourceSkillFound@1003 : TextConst 'ENU=%1 must not exist.';
      ErroResourceSkillChanged@1005 : TextConst 'ENU=Skill Code must not be same.';

    [Normal]
    LOCAL PROCEDURE Initialize@1();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      // Lazy Setup.
      IF IsInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    [HandlerFunctions(ConfirmServiceItem)]
    PROCEDURE AssignSkillCodesOnServiceItem@4();
    VAR
      ResourceSkill@1000 : Record 5956;
      ServiceItem@1006 : Record 5940;
      ServiceItemGroup@1004 : Record 5904;
      SkillCode@1002 : Code[10];
    BEGIN
      // Covers document number TC141402 - refer to TFS ID 172907.
      // The Test Case assign the Resource Skill in Service Item through Service Item Group.

      // Setup: Create a new Service Item, Create Service Item Group and modify the Service Item.
      Initialize;
      LibraryService.CreateServiceItem(ServiceItem,'');
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      AttachItemGroupToServiceItem(ServiceItem,ServiceItemGroup.Code);
      SkillCode := CreateResourceSkill(ServiceItem."No.",ResourceSkill.Type::"Service Item");

      // Exercise: Create the Resource Skill for Service Item Group.
      CreateResourceSkillsItemGroup(SkillCode,ServiceItemGroup.Code);

      // Verify: Verify the Resource Skill of Service Item with Service Item Group.
      VerifyResourceSkill(ServiceItem."No.",ServiceItemGroup.Code,ResourceSkill.Type::"Service Item");
    END;

    [Test]
    [HandlerFunctions(ConfirmServiceItem)]
    PROCEDURE AssignSkillCodesOnItem@6();
    VAR
      Item@1004 : Record 27;
      ResourceSkill@1003 : Record 5956;
      ServiceItemGroup@1000 : Record 5904;
      LibraryInventory@1001 : Codeunit 132201;
      SkillCode@1002 : Code[10];
    BEGIN
      // Covers document number TC141402 - refer to TFS ID 172907.
      // The Test Case assign the Resource Skill in Item through Service Item Group.

      // Setup: Create a Service Item Group, create an Item, modify the Item and create the Resource Skill for Item.
      Initialize;
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      LibraryInventory.CreateItem(Item);
      AttachServiceItemGroupOnItem(Item,ServiceItemGroup.Code);

      // Exercise: Create the Resource Skill for Item and Service Item Group.
      SkillCode := CreateResourceSkill(Item."No.",ResourceSkill.Type::Item);
      CreateResourceSkillsItemGroup(SkillCode,ServiceItemGroup.Code);

      // Verify: Verify the Resource Skill of Item with Service Item Group.
      VerifyResourceSkill(Item."No.",ServiceItemGroup.Code,ResourceSkill.Type::Item);
    END;

    [Test]
    PROCEDURE ChangeSkillCodeOnItem@22();
    VAR
      Item@1000 : Record 27;
      ResourceSkill@1003 : Record 5956;
      LibraryInventory@1001 : Codeunit 132201;
      SkillCode@1002 : Code[10];
    BEGIN
      // Covers document number TC141402 - refer to TFS ID 172907.
      // The Test Case checks that the Resource Skill is modified on Item.

      // Setup: Create a new Item.
      Initialize;
      LibraryInventory.CreateItem(Item);

      // Exercise: Change the Resource Skill on Item.
      SkillCode := CreateResourceSkill(Item."No.",ResourceSkill.Type::Item);
      RenameResourceSkill(Item."No.",SkillCode);

      // Verify: Verify the Resource Skill has changed on Item.
      VerifyResourceSkillChange(Item."No.",SkillCode);
    END;

    [Test]
    [HandlerFunctions(ConfirmServiceItem)]
    PROCEDURE DeleteServiceItem@24();
    VAR
      Item@1001 : Record 27;
      ResourceSkill@1005 : Record 5956;
      ServiceItem@1003 : Record 5940;
      ServiceItemGroup@1000 : Record 5904;
      LibraryInventory@1004 : Codeunit 132201;
    BEGIN
      // Covers document number TC141402 - refer to TFS ID 172907.
      // The Test Case checks the deletion of Service Item from Resource Skill.

      // Setup: Create a new Service Item Group, Create a new Item and modify the Item, Create Resource Skill on Item, create a new
      // Service Item and modify the Service Item with Item No.
      Initialize;
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      LibraryInventory.CreateItem(Item);
      AttachServiceItemGroupOnItem(Item,ServiceItemGroup.Code);
      CreateResourceSkill(Item."No.",ResourceSkill.Type::Item);
      LibraryService.CreateServiceItem(ServiceItem,'');
      AttachItemToServiceItem(ServiceItem,Item."No.");

      // Exercise: Delete the Service Item.
      ServiceItem.DELETE(TRUE);

      // Verify: Verify the Service Item in Resource Skill.
      VerifyResourceSkillDelete(ServiceItem."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmServiceItem,StringMenuHandlerWithAll)]
    PROCEDURE DeleteServiceItemGroupCode@18();
    VAR
      Item@1000 : Record 27;
      ResourceSkill@1005 : Record 5956;
      ServiceItem@1003 : Record 5940;
      ServiceItemGroup@1006 : Record 5904;
      LibraryInventory@1001 : Codeunit 132201;
    BEGIN
      // Covers document number TC141402 - refer to TFS ID 172907.
      // The Test Case checks the deletion of Resource Skill from Service Item Group without deleting the Resource Skill from item and
      // Service Item.

      // Setup: Create a new Item, find Skill Code, create Service Item Group, create Resource Skill, modify the Item with Service
      // Item Group, Create Service Item and modify the Service Item with Item.
      Initialize;
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      CreateResourceSkill(ServiceItemGroup.Code,ResourceSkill.Type::"Service Item Group");
      AttachServiceItemGroupOnItem(Item,ServiceItemGroup.Code);
      LibraryService.CreateServiceItem(ServiceItem,'');
      AttachItemToServiceItem(ServiceItem,Item."No.");

      // Exercise: Delete the Service Item Group from Item.
      AttachServiceItemGroupOnItem(Item,'');

      // Verify: Verify that Service Item Group must be blank in Item.
      Item.TESTFIELD("Service Item Group",'');
    END;

    [Normal]
    LOCAL PROCEDURE CreateResourceSkillsItemGroup@5(SkillCode2@1002 : Code[10];ServiceItemGroupCode@1000 : Code[10]);
    VAR
      SkillCode@1003 : Record 5955;
      ResourceSkill@1001 : Record 5956;
      LibraryResource@1006 : Codeunit 130511;
      Counter@1005 : Integer;
    BEGIN
      // Creating Resource Skill and Skill Codes.
      CLEAR(ResourceSkill);
      LibraryResource.CreateResourceSkill(ResourceSkill,ResourceSkill.Type::"Service Item Group",ServiceItemGroupCode,SkillCode2);

      // Use RANDOM for creating Resource Skill between 1 to 5.
      FOR Counter := 1 TO 1 + RANDOM(4) DO BEGIN
        CLEAR(ResourceSkill);
        CLEAR(SkillCode);
        LibraryResource.CreateSkillCode(SkillCode);
        LibraryResource.CreateResourceSkill(
          ResourceSkill,ResourceSkill.Type::"Service Item Group",ServiceItemGroupCode,SkillCode.Code);
      END;
    END;

    [Normal]
    LOCAL PROCEDURE CreateResourceSkill@3(No@1000 : Code[20];Type@1003 : Option) : Code[10];
    VAR
      ResourceSkill@1001 : Record 5956;
      SkillCode@1002 : Record 5955;
      LibraryResource@1004 : Codeunit 130511;
    BEGIN
      FindSkillCode(SkillCode);
      LibraryResource.CreateResourceSkill(ResourceSkill,Type,No,SkillCode.Code);
      EXIT(SkillCode.Code);
    END;

    [Normal]
    LOCAL PROCEDURE FindSkillForServiceItemGroup@25(VAR ResourceSkill@1000 : Record 5956;ServiceItemGroup@1003 : Code[10]);
    BEGIN
      ResourceSkill.SETRANGE(Type,ResourceSkill.Type::"Service Item Group");
      ResourceSkill.SETRANGE("No.",ServiceItemGroup);
      ResourceSkill.FINDSET;
    END;

    [Normal]
    LOCAL PROCEDURE FindResourceSkillForItem@37(VAR ResourceSkill@1000 : Record 5956;No@1004 : Code[20];Type@1001 : Option);
    BEGIN
      ResourceSkill.SETRANGE(Type,Type);
      ResourceSkill.SETRANGE("No.",No);
      ResourceSkill.FINDSET;
    END;

    [Normal]
    LOCAL PROCEDURE FindSkillCode@12(VAR SkillCode@1000 : Record 5955);
    BEGIN
      SkillCode.FINDFIRST;
    END;

    [Normal]
    LOCAL PROCEDURE AttachServiceItemGroupOnItem@7(VAR Item@1000 : Record 27;ServiceItemGroupCode@1001 : Code[10]);
    BEGIN
      Item.VALIDATE("Service Item Group",ServiceItemGroupCode);
      Item.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE RenameResourceSkill@32(ItemNo@1004 : Code[20];Code@1000 : Code[10]);
    VAR
      SkillCode@1001 : Record 5955;
      ResourceSkill@1003 : Record 5956;
    BEGIN
      ResourceSkill.GET(ResourceSkill.Type::Item,ItemNo,Code);
      SkillCode.INIT;
      SkillCode.SETFILTER(Code,'<> %1',ResourceSkill."Skill Code");
      SkillCode.FINDFIRST;

      ResourceSkill.RENAME(ResourceSkill.Type::Item,ItemNo,SkillCode.Code);
    END;

    [Normal]
    LOCAL PROCEDURE AttachItemToServiceItem@26(VAR ServiceItem@1000 : Record 5940;ItemNo@1001 : Code[20]);
    BEGIN
      ServiceItem.VALIDATE("Item No.",ItemNo);
      ServiceItem.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE AttachItemGroupToServiceItem@2(VAR ServiceItem@1000 : Record 5940;ServiceItemGroupCode@1003 : Code[10]);
    BEGIN
      ServiceItem.VALIDATE("Service Item Group Code",ServiceItemGroupCode);
      ServiceItem.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyResourceSkillChange@36(ItemNo@1001 : Code[20];SkillCode@1000 : Code[10]);
    VAR
      ResourceSkill@1002 : Record 5956;
    BEGIN
      ResourceSkill.SETRANGE(Type,ResourceSkill.Type::Item);
      ResourceSkill.SETRANGE("No.",ItemNo);
      ResourceSkill.FINDFIRST;
      Assert.AreNotEqual(ResourceSkill."Skill Code",SkillCode,ErroResourceSkillChanged);
    END;

    [Normal]
    LOCAL PROCEDURE VerifyResourceSkillDelete@10(ServiceItemNo@1000 : Code[20]);
    VAR
      ResourceSkill@1001 : Record 5956;
    BEGIN
      ResourceSkill.SETRANGE(Type,ResourceSkill.Type::"Service Item");
      ResourceSkill.SETRANGE("No.",ServiceItemNo);
      Assert.IsFalse(ResourceSkill.FINDFIRST,STRSUBSTNO(ErrorResourceSkillFound,ResourceSkill.TABLECAPTION));
    END;

    [Normal]
    LOCAL PROCEDURE VerifyResourceSkill@8(ItemNo@1003 : Code[20];ServiceItemGroup@1002 : Code[10];Type@1004 : Option);
    VAR
      ResourceSkill@1001 : Record 5956;
      ResourceSkill2@1000 : Record 5956;
    BEGIN
      FindSkillForServiceItemGroup(ResourceSkill2,ServiceItemGroup);
      FindResourceSkillForItem(ResourceSkill,ItemNo,Type);
      REPEAT
        ResourceSkill.TESTFIELD("Skill Code",ResourceSkill2."Skill Code");
        ResourceSkill2.NEXT;
      UNTIL ResourceSkill.NEXT = 0;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmServiceItem@13(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [StrMenuHandler]
    PROCEDURE StringMenuHandlerWithAll@21(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instructions@1002 : Text[1024]);
    BEGIN
      Choice := 1;
    END;

    BEGIN
    {
      // [FEATURE] [Resource Skill] [Service]
      Unsupported version tags:
      NA: Unable to Compile

      1. Test assigning the Skill Code to Service Item through Service Item Group.
      2. Test assigning the Skill Code to Item through Service Item Group.
      3. Test changing the Skill Code from an Item.
      4. Delete the Service Item after assigning the Skill Code.
      5. Delete Service Item Group Code after assigning Skill Code to Item and Service Item.

      TFS_TS_ID = 172907
      Covered Test cases:
        TFS_TC_ID=141402
    }
    END.
  }
}

