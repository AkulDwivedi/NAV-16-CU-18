OBJECT Codeunit 137038 SCM Transfers
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryRandom@1001 : Codeunit 130440;
      LibraryManufacturing@1003 : Codeunit 132202;
      LibraryWarehouse@1004 : Codeunit 132204;
      LibraryInventory@1005 : Codeunit 132201;
      LibraryPlanning@1006 : Codeunit 132203;
      LibraryPurchase@1010 : Codeunit 130512;
      LibrarySales@1017 : Codeunit 130509;
      LibraryVariableStorage@1007 : Codeunit 131004;
      LibraryCosting@1011 : Codeunit 132200;
      LibraryDimension@1013 : Codeunit 131001;
      LibrarySetupStorage@1020 : Codeunit 131009;
      LibraryUtility@1002 : Codeunit 131000;
      Assert@1018 : Codeunit 130000;
      LocationCode@1009 : ARRAY [5] OF Code[10];
      SourceDocument@1021 : ',S. Order,S. Invoice,S. Credit Memo,S. Return Order,P. Order,P. Invoice,P. Credit Memo,P. Return Order,Inb. Transfer,Outb. Transfer,Prod. Consumption,Item Jnl.,Phys. Invt. Jnl.,Reclass. Jnl.,Consumption Jnl.,Output Jnl.,BOM Jnl.,Serv. Order,Job Jnl.,Assembly Consumption,Assembly Order';
      isInitialized@1000 : Boolean;
      ErrNoOfLinesMustBeEqual@1019 : TextConst 'ENU=No. of Line Must Be Equal.';
      TransferOrderCountErr@1008 : TextConst 'ENU=Wrong Transfer Order''s count';
      ItemIsNotOnInventoryErr@1012 : TextConst '@@@={Locked};ENU=Item %1 is not in inventory.';
      UpdateFromHeaderLinesQst@1015 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?';
      UpdateLineDimQst@1014 : TextConst 'ENU=You have changed one or more dimensions on the';
      TransferOrderSubpageNotUpdatedErr@1016 : TextConst 'ENU=Transfer Order subpage is not updated.';

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SalesOrderCalcNetChange@3();
    VAR
      SalesHeader@1000 : Record 36;
      RequisitionLine@1007 : Record 246;
      ItemNo@1001 : ARRAY [4] OF Code[20];
    BEGIN
      // Setup  : Update Sales Setup. Create Transfer setup
      Initialize;
      UpdateSalesReceivablesSetup;
      CreateTransferSetup(SalesHeader,ItemNo,TRUE);

      // Execute : Create Planning Worksheet and Calculate Net Change Plan.
      CreateReqLine(RequisitionLine);
      CalculateNetChangePlan(RequisitionLine,SalesHeader."Shipment Date",ItemNo);

      // Verify : Verify Seven Requisition Lines Exist in Planning Worksheet.
      // One Item Line for Item4 and Item1 each.Two Item Lines for Item3 and three Item lines for Item2.
      VerifyNumberOfRequisitionLine(ItemNo,7);

      // Execute : Carry Out Action Message in Planning Worksheet.
      CarryOutActionMsgPlanSetup(RequisitionLine,ItemNo);

      // Verify : Verify no Requisition Lines Exist in Planning Worksheet after Carry Out Action Message in Requisition Worksheet.
      VerifyNumberOfRequisitionLine(ItemNo,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE PurchOrdCalcNetChange@14();
    VAR
      SalesHeader@1005 : Record 36;
      PurchaseHeader@1012 : Record 38;
      RequisitionLine@1007 : Record 246;
      ItemNo@1001 : ARRAY [4] OF Code[20];
    BEGIN
      // Setup  : Update Sales Setup. Create Transfer setup.
      Initialize;
      UpdateSalesReceivablesSetup;
      CreateTransferSetup(SalesHeader,ItemNo,TRUE);

      // Create and Update Purchase Order for ItemNo2 with LocationCode4.
      CreatePurchaseOrder(PurchaseHeader,ItemNo[2],LibraryRandom.RandInt(10));
      UpdatePurchaseLine(PurchaseHeader,LocationCode[4]);

      // Execute : Create Planning Worksheet and Calculate Net Change Plan.
      CreateReqLine(RequisitionLine);
      CalculateNetChangePlan(RequisitionLine,SalesHeader."Shipment Date",ItemNo);

      // Verify : Verify ItemNo exist Planning Worksheet.
      VerifyItemNoExistInReqLine(ItemNo[1]);

      // Execute : Carry Out Action Message in Planning Worksheet.
      CarryOutActionMsgPlanSetup(RequisitionLine,ItemNo);

      // Verify : Verify no Requisition Lines Exist in Planning Worksheet after Carry Out Action Message in Requisition Worksheet.
      VerifyNumberOfRequisitionLine(ItemNo,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TransferOrdCalcNetChange@20();
    VAR
      SalesHeader@1005 : Record 36;
      ItemJournalLine@1001 : Record 83;
      TransferLine@1002 : Record 5741;
      RequisitionLine@1007 : Record 246;
      ItemNo@1003 : ARRAY [4] OF Code[20];
    BEGIN
      // Setup  : Update Sales Setup. Create Transfer setup.
      Initialize;
      UpdateSalesReceivablesSetup;
      CreateTransferSetup(SalesHeader,ItemNo,TRUE);

      // Create and Post Item Journal Line with Entry Type as Positive Adjustment.
      CreateAndPostItemJrnl(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo[3],LibraryRandom.RandInt(10) + 10);

      // Update Reordering Policy in SKU and Create Transfer Order.
      UpdateReorderingPolicy(LocationCode[4],ItemNo[2]);
      UpdateReorderingPolicy(LocationCode[2],ItemNo[2]);
      CreateTransferOrder(
        TransferLine,LocationCode[4],LocationCode[2],ItemNo[2],CALCDATE('<-1Y>',SalesHeader."Order Date"),
        LibraryRandom.RandInt(5));

      // Execute : Create Planning Worksheet and Calculate Net Change Plan.
      CreateReqLine(RequisitionLine);
      CalculateNetChangePlan(RequisitionLine,SalesHeader."Shipment Date",ItemNo);

      // Verify : Verify Seven Requisition Lines Exist in Planning Worksheet.
      // One Item Line for Item4 and Item1 each.Two Item Lines for Item3 and Three Item lines for Item2.
      VerifyNumberOfRequisitionLine(ItemNo,7);

      // Execute : Carry Out Action Message in Planning Worksheet.
      CarryOutActionMsgPlanSetup(RequisitionLine,ItemNo);

      // Verify : Verify no Requisition Lines Exist in Planning Worksheet after Carry Out Action Message in Requisition Worksheet.
      VerifyNumberOfRequisitionLine(ItemNo,0);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE TransferPurchOrdeCalcNetChange@2();
    VAR
      SalesHeader@1004 : Record 36;
      TransferLine@1002 : Record 5741;
      PurchaseHeader@1006 : Record 38;
      RequisitionLine@1001 : Record 246;
      ItemNo@1003 : ARRAY [4] OF Code[20];
    BEGIN
      // Setup  : Update Sales Setup. Create Transfer setup.
      Initialize;
      UpdateSalesReceivablesSetup;
      CreateTransferSetup(SalesHeader,ItemNo,FALSE);

      // Create Transfer Order.
      CreateTransferOrder(
        TransferLine,LocationCode[1],LocationCode[4],ItemNo[4],CALCDATE('<3D>',WORKDATE),LibraryRandom.RandInt(5));

      // Create and Update Purchase Order for ItemNo2 with LocationCode4.
      CreatePurchaseOrder(PurchaseHeader,ItemNo[2],TransferLine.Quantity);
      UpdatePurchaseLine(PurchaseHeader,LocationCode[3]);

      // Execute : Create Planning Worksheet and Calculate Net Change Plan.
      CreateReqLine(RequisitionLine);
      CalculateNetChangePlan(RequisitionLine,TransferLine."Receipt Date",ItemNo);

      // Verify : Verify 8 req. lines are generated:
      // One Prod. Order for top item.
      // One Prod. Order and one Transfer Order for subassembly.
      // Cancel Purchase for end component, recreate Purchase Order for end component in different location, 2 Transfer Orders to bring the end component at the top item prod. location.
      // One Purchase Order for subassembly end component, at the subassembly prod. location.
      VerifyNumberOfRequisitionLine(ItemNo,8);
      VerifyReqLineActMessageCancel(ItemNo[2]);

      // Execute : Carry Out Action Message in Planning Worksheet for Order Type Purchase.
      RequisitionLine.SETRANGE("Ref. Order Type",RequisitionLine."Ref. Order Type"::Purchase);
      RequisitionLine.FINDSET;
      CarryOutActionMsgPlanSetup(RequisitionLine,ItemNo);

      // Verify : Verify 5 Requisition Lines are left in Planning Worksheet after purchase order messages have been carried out.
      VerifyNumberOfRequisitionLine(ItemNo,5);
    END;

    [Test]
    [HandlerFunctions(CarryOutActionMsgPlanHandler)]
    PROCEDURE PlanningCombineTransfersSplit@29();
    VAR
      LocationCode@1001 : ARRAY [3] OF Code[10];
    BEGIN
      // Verify Transfer Orders are combined when planning transfer lines are splitted
      PlanningCombineTransfers(LocationCode,TRUE);

      VerifyTransferOrderCount(LocationCode[1],LocationCode[2],1);
      VerifyTransferOrderCount(LocationCode[1],LocationCode[3],1);
    END;

    [Test]
    [HandlerFunctions(CarryOutActionMsgPlanHandler)]
    PROCEDURE PlanningNotCombineTransfersSplit@33();
    VAR
      LocationCode@1001 : ARRAY [3] OF Code[10];
    BEGIN
      // Verify Transfer Orders are not combined when planning transfer lines are splitted
      PlanningCombineTransfers(LocationCode,FALSE);

      VerifyTransferOrderCount(LocationCode[1],LocationCode[2],2);
      VerifyTransferOrderCount(LocationCode[1],LocationCode[3],2);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes)]
    PROCEDURE TransferChangeTransferTo@37();
    VAR
      TransferHeader@1004 : Record 5740;
      TransferLine@1002 : Record 5741;
    BEGIN
      // [FEATURE] [Transfer Order]
      // [SCENARIO] Can Change "Transfer-to Code" for Transfer Order if it contains description line.

      // [GIVEN] Transfer Order with description line.
      Initialize;
      CreateUpdateLocations;
      CreateTransferRoutes;

      LibraryInventory.CreateTransferHeader(TransferHeader,LocationCode[1],LocationCode[4],LocationCode[5]);
      LibraryInventory.CreateTransferLine(
        TransferHeader,TransferLine,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(5));
      LibraryInventory.CreateTransferLine(TransferHeader,TransferLine,'',0);

      // [WHEN] Change "Transfer-to Code" in Transfer Header.
      TransferHeader.VALIDATE("Transfer-to Code",LocationCode[2]);

      // [THEN] Transfer Line with description "Transfer-to Code" remains empty.
      TransferLine.TESTFIELD("Transfer-to Code",'');
    END;

    [Test]
    PROCEDURE TransferOrdApplyToILE@46();
    VAR
      Item@1004 : Record 27;
      ItemJournalLine@1001 : Record 83;
      TransferLine@1002 : Record 5741;
      TransferHeader@1003 : Record 5740;
    BEGIN
      // [FEATURE] [Transfer] [Cost Application]
      // [SCENARIO] Field "Appl.-to Item Entry" is available for Transfer Order Lines.

      // [GIVEN] Item "I" available on Location "A", stock is positively adjusted by ILE no. "N"
      Initialize;
      CreateUpdateLocations;

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Costing Method",Item."Costing Method"::Standard);
      Item.MODIFY;

      CreateTransferRoutes;
      CreateAndPostItemJrnlWithLocationAndCost(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandIntInRange(10,20),
        LibraryRandom.RandIntInRange(10,20),LocationCode[4]);

      // [GIVEN] Create Transfer Order for Item "I" from Location "A" to Location "B". Apply to ILE "N".
      CreateTransferOrder(
        TransferLine,LocationCode[4],LocationCode[2],Item."No.",WORKDATE,LibraryRandom.RandInt(5));
      TransferLine.VALIDATE("Appl.-to Item Entry",FindLastILENo(Item."No."));
      TransferLine.MODIFY;

      // [WHEN] Ship Transfer Order.
      TransferHeader.GET(TransferLine."Document No.");
      LibraryInventory.PostTransferHeader(TransferHeader,TRUE,FALSE);

      // [THEN] Item Application Entry is created to ILE "N".
      VerifyItemApplicationEntry(Item."No.",TransferLine."Appl.-to Item Entry");
    END;

    [Test]
    PROCEDURE TransferOrdApplyToILECalcCost@49();
    VAR
      Item@1004 : Record 27;
      ItemJournalLine@1001 : Record 83;
      TransferLine@1002 : Record 5741;
      TransferHeader@1003 : Record 5740;
      ItemLedgerEntry@1006 : Record 32;
      LastCost@1005 : Decimal;
    BEGIN
      // [FEATURE] [Transfer] [Cost Application] [Adjust Cost Item Entries]
      // [SCENARIO] Average cost Item is not adjusted when used transfer order with fixed application.

      // [GIVEN] Item "I" available on Location "A", stock is positively adjusted by 2 ILE: "1" of cost "X" and "2" of cost "Y"
      Initialize;
      CreateUpdateLocations;

      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Costing Method",Item."Costing Method"::Average);
      Item.MODIFY;

      CreateTransferRoutes;
      CreateAndPostItemJrnlWithLocationAndCost(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandIntInRange(10,20),
        LibraryRandom.RandIntInRange(10,20),LocationCode[4]);
      LastCost := LibraryRandom.RandIntInRange(30,40);
      CreateAndPostItemJrnlWithLocationAndCost(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LibraryRandom.RandIntInRange(10,20),
        LastCost,LocationCode[4]);

      // [GIVEN] Create Transfer Order for Item "I" from Location "A" to Location "B". Apply to ILE "N".
      CreateTransferOrder(
        TransferLine,LocationCode[4],LocationCode[2],Item."No.",WORKDATE,LibraryRandom.RandInt(5));
      TransferLine.VALIDATE("Applies-to Entry (Ship)",FindLastILENo(Item."No."));
      TransferLine.MODIFY;

      // [GIVEN] Post Transfer Order.
      TransferHeader.GET(TransferLine."Document No.");
      LibraryInventory.PostTransferHeader(TransferHeader,TRUE,TRUE);

      // [WHEN] Adjust Cost - Item Entries
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // [THEN] Item Entries of Posted Transfer Order have cost "Y" of ILE "2".
      VerifyItemApplicationEntryCost(Item."No.",ItemLedgerEntry."Entry Type"::Transfer,LastCost);
    END;

    [Test]
    PROCEDURE QtyToShipUpdatedManuallyOnNonWMSLocation@8();
    VAR
      Location@1000 : Record 14;
      WMSLocation@1001 : Record 14;
      Item@1002 : Record 27;
      TransferHeader@1003 : Record 5740;
      TransferLine@1004 : Record 5741;
      TransferOrder@1008 : TestPage 5740;
      Qty@1006 : Decimal;
    BEGIN
      // [FEATURE] [Transfer]
      // [SCENARIO 377487] "Qty. to Ship" in transfer order can be updated when transferring from a non-WMS location and a warehouse receipt exists in the destination location

      // [GIVEN] Location "L1" without WMS setup
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);
      // [GIVEN] Location "L2" with warehouse receipt requirement
      LibraryWarehouse.CreateLocationWMS(WMSLocation,FALSE,FALSE,FALSE,TRUE,FALSE);

      Qty := LibraryRandom.RandIntInRange(100,200);
      CreateItemWithPositiveInventory(Item,Location.Code,Qty * 2);

      // [GIVEN] Create transfer order from "L1" to "L2". Quantity = "Q", set "Qty. to Ship" = "Q" / 2
      CreateTransferOrderNoRoute(TransferHeader,TransferLine,Location.Code,WMSLocation.Code,Item."No.",Qty * 2);

      // [GIVEN] Post transfer shipment
      TransferLine.VALIDATE("Qty. to Ship",Qty);
      TransferLine.MODIFY(TRUE);
      LibraryInventory.PostTransferHeader(TransferHeader,TRUE,FALSE);

      // [GIVEN] Create warehouse receipt on location "L2" from transfer order
      LibraryWarehouse.CreateWhseReceiptFromTO(TransferHeader);

      TransferOrder.OPENEDIT;
      TransferOrder.GOTORECORD(TransferHeader);
      // [WHEN] Change "Qty. to Ship" in transfer order line
      Qty := LibraryRandom.RandInt(TransferLine."Qty. to Ship" - 1);
      TransferOrder.TransferLines."Qty. to Ship".SETVALUE(Qty);
      TransferOrder.OK.INVOKE;

      // [THEN] New value is accepted
      TransferLine.FIND;
      TransferLine.TESTFIELD("Qty. to Ship",Qty);
    END;

    [Test]
    PROCEDURE QtyToReceiveUpdatedManuallyOnNonWMSLocation@43();
    VAR
      Location@1000 : Record 14;
      WMSLocation@1001 : Record 14;
      Item@1002 : Record 27;
      TransferHeader@1003 : Record 5740;
      TransferLine@1004 : Record 5741;
      TransferOrder@1010 : TestPage 5740;
      Qty@1008 : Decimal;
    BEGIN
      // [FEATURE] [Transfer]
      // [SCENARIO 377487] "Qty. to Receive" in transfer order can be updated when transferring to a non-WMS location and a warehouse shipment exists in the source location

      // [GIVEN] Location "L1" with warehouse shipment requirement
      LibraryWarehouse.CreateLocationWMS(WMSLocation,FALSE,FALSE,FALSE,FALSE,TRUE);
      // [GIVEN] Location "L2" without WMS setup
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(Location);

      Qty := LibraryRandom.RandIntInRange(100,200);
      CreateItemWithPositiveInventory(Item,WMSLocation.Code,Qty * 2);

      // [GIVEN] Create transfer order from "L1" to "L2". Quantity = "Q"
      CreateTransferOrderNoRoute(TransferHeader,TransferLine,WMSLocation.Code,Location.Code,Item."No.",Qty * 2);
      // [GIVEN] Create warehouse shipment from transfer order, set "Qty. to Ship" = "Q" / 2 and post shipment
      CreateAndPostWhseShipmentFromTransferOrder(TransferHeader,Qty);

      TransferOrder.OPENEDIT;
      TransferOrder.GOTORECORD(TransferHeader);
      // [WHEN] Change "Qty. to Receive" in transfer order line
      Qty := LibraryRandom.RandInt(TransferLine."Quantity Shipped" - 1);
      TransferOrder.TransferLines."Qty. to Receive".SETVALUE(Qty);
      TransferOrder.OK.INVOKE;

      // [THEN] New value is accepted
      TransferLine.FIND;
      TransferLine.TESTFIELD("Qty. to Receive",Qty);
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE ChangeTransferLineItemNoAfterPostingError_Post@39();
    VAR
      TransferHeader@1001 : Record 5740;
      TransferLine@1003 : ARRAY [2] OF Record 5741;
      TransferOrder@1000 : TestPage 5740;
      NewItemNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Transfer Order]
      // [SCENARIO 378688] TransferLine."Item No." can be changed after posting error ("Post" action)
      Initialize;

      // [GIVEN] Transfer order with two lines: item "A", item "B" (items are not available on stock)
      PrepareSimpleTransferOrderWithTwoLines(TransferHeader,TransferLine);
      // [GIVEN] Try post (ship). An error occurs: "Item "A" is not in inventory."
      TransferOrder.OPENEDIT;
      TransferOrder.GOTORECORD(TransferHeader);
      ASSERTERROR TransferOrder.Post.INVOKE;
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(STRSUBSTNO(ItemIsNotOnInventoryErr,TransferLine[1]."Item No."));
      // [GIVEN] Enter a new "Item No." into first transfer line: item "C"
      NewItemNo := LibraryInventory.CreateItemNo;
      TransferOrder.TransferLines."Item No.".SETVALUE(NewItemNo);

      // [WHEN] Move to the second transfer line
      TransferOrder.TransferLines.GOTORECORD(TransferLine[2]);

      // [THEN] No error is occurred and first transfer line's "Item No." = "C"
      TransferLine[1].FIND;
      Assert.AreEqual(NewItemNo,TransferLine[1]."Item No.",TransferLine[1].FIELDCAPTION("Item No."));
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE ChangeTransferLineItemNoAfterPostingError_PostAndPrint@51();
    VAR
      TransferHeader@1001 : Record 5740;
      TransferLine@1003 : ARRAY [2] OF Record 5741;
      TransferOrder@1000 : TestPage 5740;
      NewItem1No@1004 : Code[20];
    BEGIN
      // [FEATURE] [Transfer Order]
      // [SCENARIO 378688] TransferLine."Item No." can be changed after posting error ("Post And Print" action)
      Initialize;

      // [GIVEN] Transfer order with two lines: item "A", item "B" (items are not available on stock)
      PrepareSimpleTransferOrderWithTwoLines(TransferHeader,TransferLine);
      // [GIVEN] Try post (ship). An error occurs: "Item "A" is not in inventory."
      TransferOrder.OPENEDIT;
      TransferOrder.GOTORECORD(TransferHeader);
      ASSERTERROR TransferOrder.PostAndPrint.INVOKE;
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(STRSUBSTNO(ItemIsNotOnInventoryErr,TransferLine[1]."Item No."));
      // [GIVEN] Enter a new "Item No." into first transfer line: item "C"
      NewItem1No := LibraryInventory.CreateItemNo;
      TransferOrder.TransferLines."Item No.".SETVALUE(NewItem1No);

      // [WHEN] Move to the second transfer line
      TransferOrder.TransferLines.GOTORECORD(TransferLine[2]);

      // [THEN] No error is occurred and first transfer line's "Item No." = "C"
      TransferLine[1].FIND;
      Assert.AreEqual(NewItem1No,TransferLine[1]."Item No.",TransferLine[1].FIELDCAPTION("Item No."));
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE SecondTansferOrderPostAfterPostingError_Post@50();
    VAR
      TransferHeader@1001 : Record 5740;
      TransferLine@1000 : ARRAY [2] OF Record 5741;
      TransferOrder@1002 : TestPage 5740;
    BEGIN
      // [FEATURE] [Transfer Order]
      // [SCENARIO 378688] Second "Post" of transfer order gets the same error as the first one: "Item X is not in inventory."
      Initialize;

      // [GIVEN] Transfer order with a new item "X" (not available on stock)
      PrepareSimpleTransferOrderWithTwoLines(TransferHeader,TransferLine);
      // [GIVEN] Try post (ship). An error occurs: "Item "X" is not in inventory."
      TransferOrder.OPENEDIT;
      TransferOrder.GOTORECORD(TransferHeader);
      ASSERTERROR TransferOrder.Post.INVOKE;
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(STRSUBSTNO(ItemIsNotOnInventoryErr,TransferLine[1]."Item No."));

      // [WHEN] Try post again (ship).
      ASSERTERROR TransferOrder.Post.INVOKE;

      // [THEN] The same error occurs: "Item "X" is not in inventory."
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(STRSUBSTNO(ItemIsNotOnInventoryErr,TransferLine[1]."Item No."));
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE SecondTansferOrderPostAfterPostingError_PostAndPrint@57();
    VAR
      TransferHeader@1001 : Record 5740;
      TransferLine@1003 : ARRAY [2] OF Record 5741;
      TransferOrder@1002 : TestPage 5740;
    BEGIN
      // [FEATURE] [Transfer Order]
      // [SCENARIO 378688] Second "Post And Print" of transfer order gets the same error as the first one: "Item X is not in inventory."
      Initialize;

      // [GIVEN] Transfer order with a new item "X" (not available on stock)
      PrepareSimpleTransferOrderWithTwoLines(TransferHeader,TransferLine);
      // [GIVEN] Try post (ship). An error occurs: "Item "X" is not in inventory."
      TransferOrder.OPENEDIT;
      TransferOrder.GOTORECORD(TransferHeader);
      ASSERTERROR TransferOrder.PostAndPrint.INVOKE;
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(STRSUBSTNO(ItemIsNotOnInventoryErr,TransferLine[1]."Item No."));

      // [WHEN] Try post again (ship).
      ASSERTERROR TransferOrder.PostAndPrint.INVOKE;

      // [THEN] The same error occurs: "Item "X" is not in inventory."
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(STRSUBSTNO(ItemIsNotOnInventoryErr,TransferLine[1]."Item No."));
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE SecondTansferOrderPostFromListPageAfterPostingError_Post@63();
    VAR
      TransferHeader@1001 : Record 5740;
      TransferLine@1003 : ARRAY [2] OF Record 5741;
      TransferList@1002 : TestPage 5742;
    BEGIN
      // [FEATURE] [Transfer Order]
      // [SCENARIO 378688] Second "Post" of transfer order (from Transfer List page) gets the same error as the first one: "Item X is not in inventory."
      Initialize;

      // [GIVEN] Transfer order with a new item "X" (not available on stock)
      PrepareSimpleTransferOrderWithTwoLines(TransferHeader,TransferLine);
      // [GIVEN] Try post (ship) from "Transfer List" page. An error occurs: "Item "X" is not in inventory."
      TransferList.OPENEDIT;
      TransferList.GOTORECORD(TransferHeader);
      ASSERTERROR TransferList.Post.INVOKE;
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(STRSUBSTNO(ItemIsNotOnInventoryErr,TransferLine[1]."Item No."));

      // [WHEN] Try post again (ship).
      ASSERTERROR TransferList.Post.INVOKE;

      // [THEN] The same error occurs: "Item "X" is not in inventory."
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(STRSUBSTNO(ItemIsNotOnInventoryErr,TransferLine[1]."Item No."));
    END;

    [Test]
    [HandlerFunctions(StrMenuHandler)]
    PROCEDURE SecondTansferOrderPostFromListPageAfterPostingError_PostAndPrint@54();
    VAR
      TransferHeader@1001 : Record 5740;
      TransferLine@1003 : ARRAY [2] OF Record 5741;
      TransferList@1002 : TestPage 5742;
    BEGIN
      // [FEATURE] [Transfer Order]
      // [SCENARIO 378688] Second "Post And Print" of transfer order (from Transfer List page) gets the same error as the first one: "Item X is not in inventory."
      Initialize;

      // [GIVEN] Transfer order with a new item "X" (not available on stock)
      PrepareSimpleTransferOrderWithTwoLines(TransferHeader,TransferLine);
      // [GIVEN] Try post (ship) from "Transfer List" page. An error occurs: "Item "X" is not in inventory."
      TransferList.OPENEDIT;
      TransferList.GOTORECORD(TransferHeader);
      ASSERTERROR TransferList.PostAndPrint.INVOKE;
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(STRSUBSTNO(ItemIsNotOnInventoryErr,TransferLine[1]."Item No."));

      // [WHEN] Try post again (ship).
      ASSERTERROR TransferList.PostAndPrint.INVOKE;

      // [THEN] The same error occurs: "Item "X" is not in inventory."
      Assert.ExpectedErrorCode('Dialog');
      Assert.ExpectedError(STRSUBSTNO(ItemIsNotOnInventoryErr,TransferLine[1]."Item No."));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerForTransferHeaderDimUpdate)]
    PROCEDURE PartlyShippedLineDimChangeFromHeaderGlobalDimConfirmYes@58();
    VAR
      TransferHeader@1000 : Record 5740;
      TransferLine@1001 : Record 5741;
      DimensionValue@1002 : Record 349;
    BEGIN
      // [FEATURE] [Transfer] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Transfer Header Shortcut Dimension 1 Code change causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Transfer Order with partly shipped line
      CreatePartlyShipTransferOrder(TransferHeader,TransferLine);
      CreateGlobal1DimensionValue(DimensionValue);

      // [GIVEN] Transfer Header Shortcut Dimension 1 Code is being changed to "NewDimValue"
      // [GIVEN] Answer Yes to confirm lines dimension update (first confirmation)
      LibraryVariableStorage.Enqueue(TRUE); // to reply Yes on second confirmation
      TransferHeader.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);

      // [WHEN] Answer Yes on shipped line update confirmation
      // The reply is inside the handler ConfirmHandlerForTransferHeaderDimUpdate

      // [THEN] Transfer Line dimension set contains "NewDimValue"
      TransferLine.FIND;
      VerifyDimensionOnDimSet(TransferLine."Dimension Set ID",DimensionValue);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerForTransferHeaderDimUpdate)]
    PROCEDURE PartlyShippedLineDimChangeFromHeaderGlobalDimConfirmNo@52();
    VAR
      TransferHeader@1000 : Record 5740;
      TransferLine@1001 : Record 5741;
      DimensionValue@1002 : Record 349;
      SavedDimSetID@1003 : Integer;
    BEGIN
      // [FEATURE] [Transfer] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Transfer Header Shortcut Dimension 1 Code change causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Transfer Order with partly shipped line
      CreatePartlyShipTransferOrder(TransferHeader,TransferLine);
      SavedDimSetID := TransferLine."Dimension Set ID";
      CreateGlobal1DimensionValue(DimensionValue);

      // [GIVEN] Transfer Header Shortcut Dimension 1 Code is being changed to "NewDimValue"
      // [GIVEN] Answer Yes to confirm lines dimension update (first confirmation)
      LibraryVariableStorage.Enqueue(FALSE); // to reply No on second confirmation
      ASSERTERROR TransferHeader.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);

      // [WHEN] Answer Yes on shipped line update confirmation
      // The reply is inside the handler ConfirmHandlerForTransferHeaderDimUpdate

      // [THEN] Transfer Line dimension set contains "NewDimValue"
      TransferLine.FIND;
      TransferLine.TESTFIELD("Dimension Set ID",SavedDimSetID);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerForTransferHeaderDimUpdate,EditDimensionSetEntriesHandler)]
    PROCEDURE PartlyShippedLineDimChangeFromHeaderDimSetPageConfirmYes@65();
    VAR
      TransferHeader@1000 : Record 5740;
      TransferLine@1001 : Record 5741;
      DimensionValue@1002 : Record 349;
      TransferOrder@1003 : TestPage 5740;
    BEGIN
      // [FEATURE] [Transfer] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Transfer Header Shortcut Dimension 1 Code change causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Transfer Order with partly shipped line
      CreatePartlyShipTransferOrder(TransferHeader,TransferLine);
      LibraryDimension.CreateDimWithDimValue(DimensionValue);

      // [GIVEN] Transfer Header Shortcut Dimension 1 Code is being changed to "NewDimValue"
      // [GIVEN] Answer Yes to confirm lines dimension update (first confirmation)
      LibraryVariableStorage.Enqueue(DimensionValue."Dimension Code");
      LibraryVariableStorage.Enqueue(DimensionValue.Code);
      LibraryVariableStorage.Enqueue(TRUE); // to reply Yes on second confirmation
      TransferOrder.OPENEDIT;
      TransferOrder.FILTER.SETFILTER("No.",TransferHeader."No.");
      TransferOrder.Dimensions.INVOKE;

      // [WHEN] Answer Yes on shipped line update confirmation
      // The reply is inside the handler ConfirmHandlerForTransferHeaderDimUpdate

      // [THEN] Transfer Line dimension set contains "NewDimValue"
      TransferLine.FIND;
      VerifyDimensionOnDimSet(TransferLine."Dimension Set ID",DimensionValue);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerForTransferHeaderDimUpdate,EditDimensionSetEntriesHandler)]
    PROCEDURE PartlyShippedLineDimChangeFromHeaderDimSetPageConfirmNo@60();
    VAR
      TransferHeader@1000 : Record 5740;
      TransferLine@1001 : Record 5741;
      DimensionValue@1002 : Record 349;
      TransferOrder@1005 : TestPage 5740;
      SavedDimSetID@1003 : Integer;
    BEGIN
      // [FEATURE] [Transfer] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Transfer Header Shortcut Dimension 1 Code change causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Transfer Order with partly shipped line
      CreatePartlyShipTransferOrder(TransferHeader,TransferLine);
      SavedDimSetID := TransferLine."Dimension Set ID";
      LibraryDimension.CreateDimWithDimValue(DimensionValue);

      // [GIVEN] Transfer Header Shortcut Dimension 1 Code is being changed to "NewDimValue"
      // [GIVEN] Answer Yes to confirm lines dimension update (first confirmation)
      LibraryVariableStorage.Enqueue(DimensionValue."Dimension Code");
      LibraryVariableStorage.Enqueue(DimensionValue.Code);
      LibraryVariableStorage.Enqueue(FALSE); // to reply No on second confirmation
      TransferOrder.OPENEDIT;
      TransferOrder.FILTER.SETFILTER("No.",TransferHeader."No.");
      ASSERTERROR TransferOrder.Dimensions.INVOKE;

      // [WHEN] Answer Yes on shipped line update confirmation
      // The reply is inside the handler ConfirmHandlerForTransferHeaderDimUpdate

      // [THEN] Transfer Line dimension set contains "NewDimValue"
      TransferLine.FIND;
      TransferLine.TESTFIELD("Dimension Set ID",SavedDimSetID);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes)]
    PROCEDURE PartlyShippedLineDimChangeFromLineGlobalDimConfirmYes@84();
    VAR
      TransferHeader@1000 : Record 5740;
      TransferLine@1001 : Record 5741;
      DimensionValue@1002 : Record 349;
    BEGIN
      // [FEATURE] [Transfer] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Transfer Header Shortcut Dimension 1 Code change causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Transfer Order with partly shipped line
      CreatePartlyShipTransferOrder(TransferHeader,TransferLine);
      CreateGlobal1DimensionValue(DimensionValue);

      // [GIVEN] Transfer Header Shortcut Dimension 1 Code is being changed to "NewDimValue"
      LibraryVariableStorage.Enqueue(TRUE); // to reply Yes on second confirmation
      TransferLine.FIND;
      TransferLine.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);

      // [WHEN] Answer Yes on shipped line update confirmation

      // [THEN] Transfer Line dimension set contains "NewDimValue"
      VerifyDimensionOnDimSet(TransferLine."Dimension Set ID",DimensionValue);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo)]
    PROCEDURE PartlyShippedLineDimChangeFromLineGlobalDimConfirmNo@83();
    VAR
      TransferHeader@1000 : Record 5740;
      TransferLine@1001 : Record 5741;
      DimensionValue@1002 : Record 349;
      SavedDimSetID@1003 : Integer;
    BEGIN
      // [FEATURE] [Transfer] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Transfer Header Shortcut Dimension 1 Code change causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Transfer Order with partly shipped line
      CreatePartlyShipTransferOrder(TransferHeader,TransferLine);
      SavedDimSetID := TransferLine."Dimension Set ID";
      CreateGlobal1DimensionValue(DimensionValue);

      // [GIVEN] Transfer Header Shortcut Dimension 1 Code is being changed to "NewDimValue"
      TransferLine.FIND;
      ASSERTERROR TransferLine.VALIDATE("Shortcut Dimension 1 Code",DimensionValue.Code);

      // [WHEN] Answer Yes on shipped line update confirmation

      // [THEN] Transfer Line dimension set contains "NewDimValue"
      TransferLine.TESTFIELD("Dimension Set ID",SavedDimSetID);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,EditDimensionSetEntriesHandler)]
    PROCEDURE PartlyShippedLineDimChangeFromLineDimSetPageConfirmYes@80();
    VAR
      TransferHeader@1000 : Record 5740;
      TransferLine@1001 : Record 5741;
      DimensionValue@1002 : Record 349;
      TransferOrder@1003 : TestPage 5740;
    BEGIN
      // [FEATURE] [Transfer] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Transfer Header Shortcut Dimension 1 Code change causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Transfer Order with partly shipped line
      CreatePartlyShipTransferOrder(TransferHeader,TransferLine);
      LibraryDimension.CreateDimWithDimValue(DimensionValue);

      // [GIVEN] Transfer Header Shortcut Dimension 1 Code is being changed to "NewDimValue"
      LibraryVariableStorage.Enqueue(DimensionValue."Dimension Code");
      LibraryVariableStorage.Enqueue(DimensionValue.Code);
      TransferOrder.OPENEDIT;
      TransferOrder.FILTER.SETFILTER("No.",TransferHeader."No.");
      TransferOrder.TransferLines.Dimensions.INVOKE;

      // [WHEN] Answer Yes on shipped line update confirmation

      // [THEN] Transfer Line dimension set contains "NewDimValue"
      TransferLine.FIND;
      VerifyDimensionOnDimSet(TransferLine."Dimension Set ID",DimensionValue);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerNo,EditDimensionSetEntriesHandler)]
    PROCEDURE PartlyShippedLineDimChangeFromLineDimSetPageConfirmNo@79();
    VAR
      TransferHeader@1000 : Record 5740;
      TransferLine@1001 : Record 5741;
      DimensionValue@1002 : Record 349;
      TransferOrder@1005 : TestPage 5740;
      SavedDimSetID@1003 : Integer;
    BEGIN
      // [FEATURE] [Transfer] [Dimension] [Partial Posting]
      // [SCENARIO 378707] Transfer Header Shortcut Dimension 1 Code change causes confirmation for partly shipped line
      Initialize;

      // [GIVEN] Transfer Order with partly shipped line
      CreatePartlyShipTransferOrder(TransferHeader,TransferLine);
      SavedDimSetID := TransferLine."Dimension Set ID";
      LibraryDimension.CreateDimWithDimValue(DimensionValue);

      // [GIVEN] Transfer Header Shortcut Dimension 1 Code is being changed to "NewDimValue"
      LibraryVariableStorage.Enqueue(DimensionValue."Dimension Code");
      LibraryVariableStorage.Enqueue(DimensionValue.Code);
      TransferOrder.OPENEDIT;
      TransferOrder.FILTER.SETFILTER("No.",TransferHeader."No.");
      ASSERTERROR TransferOrder.TransferLines.Dimensions.INVOKE;

      // [WHEN] Answer Yes on shipped line update confirmation

      // [THEN] Transfer Line dimension set contains "NewDimValue"
      TransferLine.FIND;
      TransferLine.TESTFIELD("Dimension Set ID",SavedDimSetID);
    END;

    [Test]
    PROCEDURE RequireReceiveCreatesInbdWhseRequestForShippedTransfer@78();
    VAR
      Location@1002 : Record 14;
      TransferHeader@1003 : ARRAY [2] OF Record 5740;
      WarehouseRequest@1005 : Record 5765;
    BEGIN
      // [FEATURE] [Warehouse Request] [Warehouse Receipt]
      // [SCENARIO 381426] Warehouse Request is created for shipped not received Transfer Order when "Require Receipt" is set on destination Location. The status of the Whse. Request matches the status of the Transfer Order.
      Initialize;

      // [GIVEN] Item with inventory on Location "L1".
      // [GIVEN] Two partially shipped not received Transfer Orders "T1", "T2" from "L1" to Location "L2".
      CreateTwoPartlyShipTransferOrders(TransferHeader,TRUE);

      // [GIVEN] "T2" is re-opened.
      LibraryWarehouse.ReopenTransferOrder(TransferHeader[2]);

      // [WHEN] Turn on "Require Receipt" on "L2".
      Location.GET(TransferHeader[1]."Transfer-to Code");
      Location.VALIDATE("Require Receive",TRUE);

      // [THEN] Warehouse Request with "Released" status is created for "T1".
      WarehouseRequest.GET(
        WarehouseRequest.Type::Inbound,Location.Code,DATABASE::"Transfer Line",1,TransferHeader[1]."No.");
      WarehouseRequest.TESTFIELD("Document Status",TransferHeader[1].Status::Released);

      // [THEN] Warehouse Request with "Open" status is created for "T2".
      WarehouseRequest.GET(
        WarehouseRequest.Type::Inbound,Location.Code,DATABASE::"Transfer Line",1,TransferHeader[2]."No.");
      WarehouseRequest.TESTFIELD("Document Status",TransferHeader[2].Status::Open);
    END;

    [Test]
    PROCEDURE RequirePutAwayCreatesInbdWhseRequestForShippedTransfer@87();
    VAR
      Location@1002 : Record 14;
      TransferHeader@1001 : ARRAY [2] OF Record 5740;
      WarehouseRequest@1000 : Record 5765;
    BEGIN
      // [FEATURE] [Warehouse Request] [Inventory Put-away]
      // [SCENARIO 381426] Warehouse Request is created for shipped not received Transfer Order when "Require Put-away" is set on destination Location. The status of the Whse. Request matches the status of the Transfer Order.
      Initialize;

      // [GIVEN] Item with inventory on Location "L1".
      // [GIVEN] Two partially shipped not received Transfer Orders "T1", "T2" from "L1" to Location "L2".
      CreateTwoPartlyShipTransferOrders(TransferHeader,TRUE);

      // [GIVEN] "T2" is re-opened.
      LibraryWarehouse.ReopenTransferOrder(TransferHeader[2]);

      // [WHEN] Turn on "Require Put-away" on "L2".
      Location.GET(TransferHeader[1]."Transfer-to Code");
      Location.VALIDATE("Require Put-away",TRUE);

      // [THEN] Warehouse Request with "Released" status is created for "T1".
      WarehouseRequest.GET(
        WarehouseRequest.Type::Inbound,Location.Code,DATABASE::"Transfer Line",1,TransferHeader[1]."No.");
      WarehouseRequest.TESTFIELD("Document Status",TransferHeader[1].Status::Released);

      // [THEN] Warehouse Request with "Open" status is created for "T2".
      WarehouseRequest.GET(
        WarehouseRequest.Type::Inbound,Location.Code,DATABASE::"Transfer Line",1,TransferHeader[2]."No.");
      WarehouseRequest.TESTFIELD("Document Status",TransferHeader[2].Status::Open);
    END;

    [Test]
    PROCEDURE RequireReceiveDoesNotCreateInbdWhseRequestForNotStartedTransfer@90();
    VAR
      Location@1002 : Record 14;
      TransferHeader@1001 : ARRAY [2] OF Record 5740;
      WarehouseRequest@1000 : Record 5765;
    BEGIN
      // [FEATURE] [Warehouse Request]
      // [SCENARIO 381426] No Warehouse Request is created for not shipped Transfer Order when "Require Receipt" is set on destination Location.
      Initialize;

      // [GIVEN] Item with inventory on Location "L1".
      // [GIVEN] Not shipped Transfer Order "T" from "L1" to Location "L2".
      CreateTwoPartlyShipTransferOrders(TransferHeader,FALSE);

      // [WHEN] Turn on "Require Receipt" on "L2".
      Location.GET(TransferHeader[1]."Transfer-to Code");
      Location.VALIDATE("Require Receive",TRUE);

      // [THEN] No Warehouse Request is created.
      WarehouseRequest.INIT;
      WarehouseRequest.SETRANGE("Location Code",Location.Code);
      Assert.RecordIsEmpty(WarehouseRequest);
    END;

    [Test]
    PROCEDURE TransferCanBeReceivedWithNoWhseHandlingWhenRequireReceiptTurnedOnAndOff@94();
    VAR
      Location@1002 : Record 14;
      TransferHeader@1001 : Record 5740;
      TransferLine@1003 : Record 5741;
      TransferReceiptHeader@1000 : Record 5746;
    BEGIN
      // [FEATURE] [Warehouse Request]
      // [SCENARIO 381426] Transfer Order can be received with no warehouse handling when "Require Receipt" is turned on and then off on destination Location.
      Initialize;

      // [GIVEN] Item with inventory on Location "L1".
      // [GIVEN] Partly shipped Transfer Order "T" from "L1" to Location "L2".
      CreatePartlyShipTransferOrder(TransferHeader,TransferLine);

      // [GIVEN] "Require Receipt" on "L2" is turned on. This created Warehouse Request.
      Location.GET(TransferHeader."Transfer-to Code");
      Location.VALIDATE("Require Receive",TRUE);
      Location.MODIFY(TRUE);

      // [GIVEN] "Require Receipt" on "L2" is turned off.
      Location.VALIDATE("Require Receive",FALSE);
      Location.MODIFY(TRUE);

      // [WHEN] Post "T" with Receive option.
      LibraryWarehouse.PostTransferOrder(TransferHeader,FALSE,TRUE);

      // [THEN] Transfer Receipt to "L2" is posted.
      TransferReceiptHeader.INIT;
      TransferReceiptHeader.SETRANGE("Transfer-to Code",Location.Code);
      Assert.RecordIsNotEmpty(TransferReceiptHeader);
    END;

    [Test]
    PROCEDURE TransferOrderSubpageUpdatedAfterShipmentDateUpdatedOnHeader@73();
    VAR
      TransferOrder@1000 : TestPage 5740;
      ShipmentDateOnHeader@1002 : Date;
      ShipmentDateOnLine@1003 : Date;
    BEGIN
      // [SCENARIO 380067] Shipment Date on Transfer Order subpage is updated after Shipment Date on the header page is updated directly.
      Initialize;
      UpdateSalesReceivablesSetup;

      // [GIVEN] Transfer Order with a new line on the subpage.
      CreateTransferOrderAndInitializeNewTransferLine(TransferOrder,'');

      // [WHEN] Update Shipment Date on Transfer Order header page.
      TransferOrder."Shipment Date".SETVALUE(LibraryRandom.RandDate(10));

      // [THEN] Shipment Date on the subpage is updated and becomes equal to Shipment Date on the header page.
      EVALUATE(ShipmentDateOnHeader,TransferOrder."Shipment Date".VALUE);
      EVALUATE(ShipmentDateOnLine,TransferOrder.TransferLines."Shipment Date".VALUE);
      Assert.AreEqual(ShipmentDateOnHeader,ShipmentDateOnLine,TransferOrderSubpageNotUpdatedErr);
    END;

    [Test]
    PROCEDURE TransferOrderSubpageUpdatedAfterShippingTimeUpdatedOnHeader@70();
    VAR
      TransferOrder@1000 : TestPage 5740;
      ShippingTime@1001 : DateFormula;
    BEGIN
      // [SCENARIO 380067] Receipt Date on Transfer Order subpage is updated after Receipt Date on the header page is updated through new Shipping Time.
      Initialize;
      UpdateSalesReceivablesSetup;

      // [GIVEN] Transfer Order with a new line on the subpage.
      CreateTransferOrderAndInitializeNewTransferLine(TransferOrder,'');

      // [WHEN] Update Shipping Time on Transfer Order header page.
      EVALUATE(ShippingTime,STRSUBSTNO('<%1D>',LibraryRandom.RandInt(10)));
      TransferOrder."Shipping Time".SETVALUE(ShippingTime);

      // [THEN] Receipt Date on the subpage is updated and becomes equal to Receipt Date on the header page.
      VerifyTransferReceiptDate(TransferOrder);
    END;

    [Test]
    PROCEDURE TransferOrderSubpageUpdatedAfterReceiptDateUpdatedOnHeader@77();
    VAR
      TransferOrder@1000 : TestPage 5740;
    BEGIN
      // [SCENARIO 380067] Receipt Date on Transfer Order subpage is updated after Receipt Date on the header page is updated directly.
      Initialize;
      UpdateSalesReceivablesSetup;

      // [GIVEN] Transfer Order with a new line on the subpage.
      CreateTransferOrderAndInitializeNewTransferLine(TransferOrder,'');

      // [WHEN] Update Receipt Date on Transfer Order header page.
      TransferOrder."Receipt Date".SETVALUE(LibraryRandom.RandDate(10));

      // [THEN] Receipt Date on the subpage is updated and becomes equal to Receipt Date on the header page.
      VerifyTransferReceiptDate(TransferOrder);
    END;

    [Test]
    PROCEDURE TransferOrderSubpageUpdatedAfterOutboundWhseTimeUpdatedOnHeader@68();
    VAR
      TransferOrder@1000 : TestPage 5740;
      OutboundWhseHandlingTime@1003 : DateFormula;
    BEGIN
      // [SCENARIO 380067] Receipt Date on Transfer Order subpage is updated after Receipt Date on the header page is updated through new Outbound Whse. Handling Time.
      Initialize;
      UpdateSalesReceivablesSetup;

      // [GIVEN] Transfer Order with a new line on the subpage.
      CreateTransferOrderAndInitializeNewTransferLine(TransferOrder,'');

      // [WHEN] Update Outbound Whse. Handling Time on Transfer Order header page.
      EVALUATE(OutboundWhseHandlingTime,STRSUBSTNO('<%1D>',LibraryRandom.RandInt(10)));
      TransferOrder."Outbound Whse. Handling Time".SETVALUE(OutboundWhseHandlingTime);

      // [THEN] Receipt Date on the subpage is updated and becomes equal to Receipt Date on the header page.
      VerifyTransferReceiptDate(TransferOrder);
    END;

    [Test]
    PROCEDURE TransferOrderSubpageUpdatedAfterInboundWhseTimeUpdatedOnHeader@86();
    VAR
      TransferOrder@1000 : TestPage 5740;
      InboundWhseHandlingTime@1003 : DateFormula;
    BEGIN
      // [SCENARIO 380067] Receipt Date on Transfer Order subpage is updated after Receipt Date on the header page is updated through new Inbound Whse. Handling Time.
      Initialize;
      UpdateSalesReceivablesSetup;

      // [GIVEN] Transfer Order with a new line on the subpage.
      CreateTransferOrderAndInitializeNewTransferLine(TransferOrder,'');

      // [WHEN] Update Inbound Whse. Handling Time on Transfer Order header page.
      EVALUATE(InboundWhseHandlingTime,STRSUBSTNO('<%1D>',LibraryRandom.RandInt(10)));
      TransferOrder."Inbound Whse. Handling Time".SETVALUE(InboundWhseHandlingTime);

      // [THEN] Receipt Date on the subpage is updated and becomes equal to Receipt Date on the header page.
      VerifyTransferReceiptDate(TransferOrder);
    END;

    [Test]
    PROCEDURE TransferOrderSubpageUpdatedAfterShippingAgentUpdatedOnHeader@89();
    VAR
      TransferOrder@1000 : TestPage 5740;
      ShippingAgentCode@1004 : Code[10];
      ShippingAgentServiceCode@1005 : Code[10];
    BEGIN
      // [SCENARIO 380067] Receipt Date on Transfer Order subpage is updated after Receipt Date on the header page is updated through new Shipping Agent Code.
      Initialize;
      UpdateSalesReceivablesSetup;

      // [GIVEN] Shipping Agent with Shipping Agent Service.
      CreateShippingAgentCodeAndService(ShippingAgentCode,ShippingAgentServiceCode);

      // [GIVEN] Transfer Order with a new line on the subpage.
      CreateTransferOrderAndInitializeNewTransferLine(TransferOrder,'');

      // [WHEN] Update Shipping Agent Code on Transfer Order header page.
      TransferOrder."Shipping Agent Code".SETVALUE(ShippingAgentCode);

      // [THEN] Receipt Date on the subpage is updated and becomes equal to Receipt Date on the header page.
      VerifyTransferReceiptDate(TransferOrder);
    END;

    [Test]
    PROCEDURE TransferOrderSubpageUpdatedAfterShippingAgentServiceUpdatedOnHeader@107();
    VAR
      TransferOrder@1000 : TestPage 5740;
      ShippingAgentCode@1004 : Code[10];
      ShippingAgentServiceCode@1005 : Code[10];
    BEGIN
      // [SCENARIO 380067] Receipt Date on Transfer Order subpage is updated after Receipt Date on the header page is updated through new Shipping Agent Service Code.
      Initialize;
      UpdateSalesReceivablesSetup;

      // [GIVEN] Shipping Agent with Shipping Agent Service.
      CreateShippingAgentCodeAndService(ShippingAgentCode,ShippingAgentServiceCode);

      // [GIVEN] Transfer Order with Shipping Agent and a new line on the subpage.
      CreateTransferOrderAndInitializeNewTransferLine(TransferOrder,ShippingAgentCode);

      // [WHEN] Update Shipping Agent Service Code on Transfer Order header page.
      TransferOrder."Shipping Agent Service Code".SETVALUE(ShippingAgentServiceCode);

      // [THEN] Receipt Date on the subpage is updated and becomes equal to Receipt Date on the header page.
      VerifyTransferReceiptDate(TransferOrder);
    END;

    [Test]
    PROCEDURE ExistedInbdRequestUpdatedWhenCalledFromTransferOrder@92();
    VAR
      TransferHeader@1000 : Record 5740;
      WarehouseRequest@1002 : Record 5765;
      WhseTransferRelease@1001 : Codeunit 5773;
    BEGIN
      // [FEATURE] [Warehouse Request] [UT]
      // [SCENARIO 381426] Existed inbound warehouse request is updated when CreateInboundWhseRequest function in Codeunit 5773 is called from Transfer Order.
      Initialize;

      // [GIVEN] Transfer Order "T".
      MockTransferOrder(TransferHeader);

      // [GIVEN] Inbound warehouse request for "T".
      MockWhseRequest(WarehouseRequest.Type::Inbound,TransferHeader."Transfer-to Code",TransferHeader."No.");

      // [GIVEN] Creation of warehouse request is set to be invoked from the transfer order ("Release" button clicked on page).
      WhseTransferRelease.SetCallFromTransferOrder(TRUE);

      // [WHEN] Create inbound warehouse request for "T".
      WhseTransferRelease.InitializeWhseRequest(WarehouseRequest,TransferHeader,TransferHeader.Status);
      WhseTransferRelease.CreateInboundWhseRequest(WarehouseRequest,TransferHeader);

      // [THEN] Existed inbound warehouse request for "T" is updated.
      TransferHeader.CALCFIELDS("Completely Received");
      WITH WarehouseRequest DO BEGIN
        FilterWhseRequest(
          WarehouseRequest,Type::Inbound,TransferHeader."Transfer-to Code",1,TransferHeader."No.");
        FINDFIRST;
        VerifyWhseRequest(
          WarehouseRequest,TransferHeader,SourceDocument::"Inb. Transfer",TransferHeader."Completely Received",
          "Shipment Date",TransferHeader."Receipt Date");
      END;
    END;

    [Test]
    PROCEDURE NewInbdRequestIsNotCreatedWhenCalledFromTransferOrder@95();
    VAR
      TransferHeader@1002 : Record 5740;
      WarehouseRequest@1001 : Record 5765;
      WhseTransferRelease@1000 : Codeunit 5773;
    BEGIN
      // [FEATURE] [Warehouse Request] [UT]
      // [SCENARIO 381426] New inbound warehouse request is not created when CreateInboundWhseRequest function in Codeunit 5773 is called from Transfer Order.
      Initialize;

      // [GIVEN] Transfer Order "T".
      MockTransferOrder(TransferHeader);

      // [GIVEN] No inbound warehouse requests exist for "T".
      // [GIVEN] Creation of warehouse request is set to be invoked from the transfer order ("Release" button clicked on page).
      WhseTransferRelease.SetCallFromTransferOrder(TRUE);

      // [WHEN] Create inbound warehouse request for "T".
      WhseTransferRelease.InitializeWhseRequest(WarehouseRequest,TransferHeader,TransferHeader.Status);
      WhseTransferRelease.CreateInboundWhseRequest(WarehouseRequest,TransferHeader);

      // [THEN] Inbound warehouse request for "T" is not created.
      FilterWhseRequest(
        WarehouseRequest,WarehouseRequest.Type::Inbound,TransferHeader."Transfer-to Code",1,TransferHeader."No.");
      Assert.RecordIsEmpty(WarehouseRequest);
    END;

    [Test]
    PROCEDURE ExistedInbdRequestForTransferUpdatedWhenCalledIndirectly@97();
    VAR
      TransferHeader@1002 : Record 5740;
      WarehouseRequest@1001 : Record 5765;
      WhseTransferRelease@1000 : Codeunit 5773;
    BEGIN
      // [FEATURE] [Warehouse Request] [UT]
      // [SCENARIO 381426] Existed inbound warehouse request is updated when CreateInboundWhseRequest function in Codeunit 5773 is called indirectly.
      Initialize;

      // [GIVEN] Transfer Order "T".
      MockTransferOrder(TransferHeader);

      // [GIVEN] Inbound warehouse request for "T".
      MockWhseRequest(WarehouseRequest.Type::Inbound,TransferHeader."Transfer-to Code",TransferHeader."No.");

      // [GIVEN] Creation of warehouse request is set to be invoked not from the transfer order (i.e. on posting the transfer shipment).
      WhseTransferRelease.SetCallFromTransferOrder(FALSE);

      // [WHEN] Create inbound warehouse request for "T".
      WhseTransferRelease.InitializeWhseRequest(WarehouseRequest,TransferHeader,TransferHeader.Status);
      WhseTransferRelease.CreateInboundWhseRequest(WarehouseRequest,TransferHeader);

      // [THEN] Existed inbound warehouse request for "T" is updated.
      TransferHeader.CALCFIELDS("Completely Received");
      WITH WarehouseRequest DO BEGIN
        FilterWhseRequest(
          WarehouseRequest,Type::Inbound,TransferHeader."Transfer-to Code",1,TransferHeader."No.");
        FINDFIRST;
        VerifyWhseRequest(
          WarehouseRequest,TransferHeader,SourceDocument::"Inb. Transfer",TransferHeader."Completely Received",
          "Shipment Date",TransferHeader."Receipt Date");
      END;
    END;

    [Test]
    PROCEDURE NewInbdRequestForTransferIsCreatedWhenCalledIndirectly@98();
    VAR
      TransferHeader@1002 : Record 5740;
      WarehouseRequest@1001 : Record 5765;
      WhseTransferRelease@1000 : Codeunit 5773;
    BEGIN
      // [FEATURE] [Warehouse Request] [UT]
      // [SCENARIO 381426] New inbound warehouse request is created when CreateInboundWhseRequest function in Codeunit 5773 is called indirectly if inbound request does not exist.
      Initialize;

      // [GIVEN] Transfer Order "T".
      MockTransferOrder(TransferHeader);

      // [GIVEN] No inbound warehouse requests exist for "T".
      // [GIVEN] Creation of warehouse request is set to be invoked not from the transfer order (i.e. on posting the transfer shipment).
      WhseTransferRelease.SetCallFromTransferOrder(FALSE);

      // [WHEN] Create inbound warehouse request for "T".
      WhseTransferRelease.InitializeWhseRequest(WarehouseRequest,TransferHeader,TransferHeader.Status);
      WhseTransferRelease.CreateInboundWhseRequest(WarehouseRequest,TransferHeader);

      // [THEN] New inbound warehouse request for "T" is created.
      TransferHeader.CALCFIELDS("Completely Received");
      WITH WarehouseRequest DO BEGIN
        FilterWhseRequest(
          WarehouseRequest,Type::Inbound,TransferHeader."Transfer-to Code",1,TransferHeader."No.");
        FINDFIRST;
        VerifyWhseRequest(
          WarehouseRequest,TransferHeader,SourceDocument::"Inb. Transfer",TransferHeader."Completely Received",
          0D,TransferHeader."Receipt Date");
      END;
    END;

    [Test]
    PROCEDURE ExistedOutbdRequestForTransferUpdated@142();
    VAR
      TransferHeader@1002 : Record 5740;
      WarehouseRequest@1001 : Record 5765;
      WhseTransferRelease@1000 : Codeunit 5773;
    BEGIN
      // [FEATURE] [Warehouse Request] [UT]
      // [SCENARIO 381426] Existed outbound warehouse request is updated when CreateOutboundWhseRequest function in Codeunit 5773 is called.
      Initialize;

      // [GIVEN] Transfer Order "T".
      MockTransferOrder(TransferHeader);

      // [GIVEN] Outbound warehouse request for "T".
      MockWhseRequest(WarehouseRequest.Type::Outbound,TransferHeader."Transfer-from Code",TransferHeader."No.");

      // [WHEN] Create outbound warehouse request for "T".
      WhseTransferRelease.InitializeWhseRequest(WarehouseRequest,TransferHeader,TransferHeader.Status);
      WhseTransferRelease.CreateOutboundWhseRequest(WarehouseRequest,TransferHeader);

      // [THEN] Existed outbound warehouse request for "T" is updated.
      TransferHeader.CALCFIELDS("Completely Shipped");
      WITH WarehouseRequest DO BEGIN
        FilterWhseRequest(
          WarehouseRequest,Type::Outbound,TransferHeader."Transfer-from Code",0,TransferHeader."No.");
        FINDFIRST;
        VerifyWhseRequest(
          WarehouseRequest,TransferHeader,SourceDocument::"Outb. Transfer",TransferHeader."Completely Shipped",
          "Shipment Date","Expected Receipt Date");
      END;
    END;

    [Test]
    PROCEDURE NewOutbdRequestForTransferCreated@141();
    VAR
      TransferHeader@1002 : Record 5740;
      WarehouseRequest@1001 : Record 5765;
      WhseTransferRelease@1000 : Codeunit 5773;
    BEGIN
      // [FEATURE] [Warehouse Request] [UT]
      // [SCENARIO 381426] New outbound warehouse request is created when CreateOutboundWhseRequest function in Codeunit 5773 is called if outbound request does not exist.
      Initialize;

      // [GIVEN] Transfer Order "T".
      MockTransferOrder(TransferHeader);

      // [GIVEN] No outbound warehouse requests exist for "T".

      // [WHEN] Create outbound warehouse request for "T".
      WhseTransferRelease.InitializeWhseRequest(WarehouseRequest,TransferHeader,TransferHeader.Status);
      WhseTransferRelease.CreateOutboundWhseRequest(WarehouseRequest,TransferHeader);

      // [THEN] New outbound warehouse request for "T" is created.
      TransferHeader.CALCFIELDS("Completely Shipped");
      WITH WarehouseRequest DO BEGIN
        FilterWhseRequest(
          WarehouseRequest,Type::Outbound,TransferHeader."Transfer-from Code",0,TransferHeader."No.");
        FINDFIRST;
        VerifyWhseRequest(
          WarehouseRequest,TransferHeader,SourceDocument::"Outb. Transfer",TransferHeader."Completely Shipped",
          "Shipment Date",0D);
      END;
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1059 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      LibrarySetupStorage.Restore;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      LibrarySetupStorage.Save(DATABASE::"Sales & Receivables Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE PlanningCombineTransfers@42(VAR LocationCode@1005 : ARRAY [3] OF Code[10];Combine@1007 : Boolean);
    VAR
      RequisitionLine@1001 : Record 246;
    BEGIN
      Initialize;
      CreateTransferRouteSetup(LocationCode);
      MockReqTransferOrderLines(RequisitionLine,LocationCode);
      RunRequisitionCarryOutReport(RequisitionLine,Combine);
    END;

    LOCAL PROCEDURE UpdateSalesReceivablesSetup@34();
    BEGIN
      LibrarySales.SetCreditWarningsToNoWarnings;
      LibrarySales.SetStockoutWarning(FALSE);
    END;

    LOCAL PROCEDURE PrepareSimpleTransferOrderWithTwoLines@62(VAR TransferHeader@1001 : Record 5740;VAR TransferLine@1002 : ARRAY [2] OF Record 5741);
    VAR
      Location@1000 : ARRAY [3] OF Record 14;
      i@1003 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(Location) DO
        LibraryWarehouse.CreateLocation(Location[i]);
      Location[3].VALIDATE("Use As In-Transit",TRUE);
      Location[3].MODIFY;

      LibraryWarehouse.CreateTransferHeader(TransferHeader,Location[1].Code,Location[2].Code,Location[3].Code);
      FOR i := 1 TO ARRAYLEN(TransferLine) DO
        LibraryWarehouse.CreateTransferLine(
          TransferHeader,TransferLine[i],LibraryInventory.CreateItemNo,LibraryRandom.RandIntInRange(10,20));
    END;

    LOCAL PROCEDURE CreateItem@48(VAR Item@1000 : Record 27);
    BEGIN
      // Random values used are not important for test.
      LibraryManufacturing.CreateItemManufacturing(
        Item,Item."Costing Method",LibraryRandom.RandDec(50,2) + LibraryRandom.RandDec(10,2),
        Item."Reordering Policy"::Order,Item."Flushing Method",'','');
      Item.VALIDATE("Manufacturing Policy",Item."Manufacturing Policy"::"Make-to-Order");
      Item.VALIDATE("Order Tracking Policy",Item."Order Tracking Policy"::"Tracking Only");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateLocations@116(VAR LocationFromCode@1000 : Code[10];VAR LocationToCode@1001 : Code[10]);
    VAR
      LocationFrom@1002 : Record 14;
      LocationTo@1003 : Record 14;
    BEGIN
      LocationFromCode := LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationFrom);
      LocationToCode := LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationTo);
    END;

    LOCAL PROCEDURE CreateUpdateLocations@7();
    VAR
      Location@1000 : Record 14;
      HandlingTime@1002 : DateFormula;
      HandlingTime2@1001 : DateFormula;
      k@1003 : Integer;
    BEGIN
      // Values Used are important for Test.
      EVALUATE(HandlingTime,'<1D>');
      EVALUATE(HandlingTime2,'<0D>');

      FOR k := 1 TO 5 DO BEGIN
        LibraryWarehouse.CreateLocation(Location);
        LocationCode[k] := Location.Code;
      END;

      // Update Locations.
      FOR k := 2 TO 4 DO
        UpdateLocation(LocationCode[k],FALSE,HandlingTime2,HandlingTime2);

      UpdateLocation(LocationCode[1],FALSE,HandlingTime,HandlingTime2);
      UpdateLocation(LocationCode[5],TRUE,HandlingTime2,HandlingTime2);
    END;

    LOCAL PROCEDURE CreateUpdateStockKeepUnit@32(VAR StockkeepingUnit@1000 : Record 5700;ItemNo@1001 : ARRAY [4] OF Code[20]);
    VAR
      Item@1003 : Record 27;
      SKUCreationMethod@1002 : 'Location,Variant,Location & Variant';
    BEGIN
      Item.SETRANGE("No.",ItemNo[1],ItemNo[4]);
      Item.SETRANGE("Location Filter",LocationCode[1],LocationCode[4]);
      LibraryInventory.CreateStockKeepingUnit(Item,SKUCreationMethod::Location,FALSE,FALSE);

      // Update Replenishment System in Stock Keeping Unit.
      UpdateStockKeepingUnit(LocationCode[1],ItemNo[4],StockkeepingUnit."Replenishment System"::"Prod. Order",'','');
      UpdateStockKeepingUnit(LocationCode[4],ItemNo[4],StockkeepingUnit."Replenishment System"::Purchase,'','');
      UpdateStockKeepingUnit(LocationCode[1],ItemNo[3],StockkeepingUnit."Replenishment System"::Transfer,'',LocationCode[2]);
      UpdateStockKeepingUnit(LocationCode[2],ItemNo[3],StockkeepingUnit."Replenishment System"::"Prod. Order",'','');
      UpdateStockKeepingUnit(LocationCode[3],ItemNo[3],StockkeepingUnit."Replenishment System"::Purchase,'','');
      UpdateStockKeepingUnit(LocationCode[4],ItemNo[3],StockkeepingUnit."Replenishment System"::Purchase,'','');
      UpdateStockKeepingUnit(LocationCode[1],ItemNo[2],StockkeepingUnit."Replenishment System"::Transfer,'',LocationCode[2]);
      UpdateStockKeepingUnit(LocationCode[2],ItemNo[2],StockkeepingUnit."Replenishment System"::Transfer,'',LocationCode[4]);
      UpdateStockKeepingUnit(LocationCode[3],ItemNo[2],StockkeepingUnit."Replenishment System"::Purchase,'','');
      UpdateStockKeepingUnit(
        LocationCode[4],ItemNo[2],StockkeepingUnit."Replenishment System"::Purchase,LibraryPurchase.CreateVendorNo,'');
      UpdateStockKeepingUnit(LocationCode[1],ItemNo[1],StockkeepingUnit."Replenishment System"::Purchase,'','');
      UpdateStockKeepingUnit(LocationCode[2],ItemNo[1],StockkeepingUnit."Replenishment System"::Purchase,'','');
      UpdateStockKeepingUnit(LocationCode[3],ItemNo[1],StockkeepingUnit."Replenishment System"::Purchase,'','');
      UpdateStockKeepingUnit(
        LocationCode[4],ItemNo[1],StockkeepingUnit."Replenishment System"::Purchase,LibraryPurchase.CreateVendorNo,'');
    END;

    LOCAL PROCEDURE CreateProdBOM@5(VAR ProductionBOMHeader@1000 : Record 99000771;ItemNo@1005 : Code[20];ItemNo2@1006 : Code[20];BaseUnitofMeasure@1002 : Code[10];MultipleBOMLine@1007 : Boolean);
    VAR
      ProductionBOMLine@1003 : Record 99000772;
    BEGIN
      LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,BaseUnitofMeasure);
      LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo,1);
      IF MultipleBOMLine THEN
        LibraryManufacturing.CreateProductionBOMLine(ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,ItemNo2,1);
      ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
      ProductionBOMHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateShippingAgentCodeAndService@47(VAR ShippingAgentCode@1000 : Code[10];VAR ShippingAgentServiceCode@1001 : Code[10]);
    VAR
      ShippingAgent@1002 : Record 291;
      ShippingAgentServices@1003 : Record 5790;
      ShippingTime@1004 : DateFormula;
    BEGIN
      LibraryInventory.CreateShippingAgent(ShippingAgent);
      EVALUATE(ShippingTime,STRSUBSTNO('<%1D>',LibraryRandom.RandInt(10)));
      LibraryInventory.CreateShippingAgentService(ShippingAgentServices,ShippingAgent.Code,ShippingTime);
      ShippingAgentCode := ShippingAgent.Code;
      ShippingAgentServiceCode := ShippingAgentServices.Code;
    END;

    LOCAL PROCEDURE CreateShippingAgentServices@9(VAR ShippingAgent@1002 : Record 291;VAR ShippingAgentServicesCode@1004 : ARRAY [6] OF Code[10]);
    VAR
      ShippingAgentServices@1003 : Record 5790;
      ShippingTime@1000 : DateFormula;
      j@1001 : Integer;
    BEGIN
      LibraryInventory.CreateShippingAgent(ShippingAgent);

      FOR j := 1 TO 6 DO BEGIN
        EVALUATE(ShippingTime,'<' + FORMAT(j) + 'D>');
        LibraryInventory.CreateShippingAgentService(ShippingAgentServices,ShippingAgent.Code,ShippingTime);
        ShippingAgentServicesCode[j] := ShippingAgentServices.Code;
      END;
    END;

    LOCAL PROCEDURE CreateSalesOrder@13(VAR SalesHeader@1001 : Record 36;ItemNo@1004 : Code[20];Quantity@1003 : Decimal);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      // Random values used are not important for test.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@27(VAR PurchaseHeader@1006 : Record 38;ItemNo@1004 : Code[20];Quantity@1001 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Create Purchase Order with One Item Line. Random values used are not important for test.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
    END;

    LOCAL PROCEDURE CreateTransferRoutes@15();
    VAR
      TransferRoute@1000 : Record 5742;
      ShippingAgent@1001 : Record 291;
      ShippingAgentServicesCode@1002 : ARRAY [6] OF Code[10];
      i@1004 : Integer;
      j@1005 : Integer;
      k@1003 : Integer;
    BEGIN
      CreateShippingAgentServices(ShippingAgent,ShippingAgentServicesCode);

      // Transfer Route for LocationCode
      k := 1;
      FOR i := 1 TO 4 DO
        FOR j := i + 1 TO 4 DO BEGIN
          LibraryWarehouse.CreateTransferRoute(TransferRoute,LocationCode[i],LocationCode[j]);
          UpdateTransferRoutes(TransferRoute,ShippingAgentServicesCode[k],ShippingAgent.Code);
          LibraryWarehouse.CreateTransferRoute(TransferRoute,LocationCode[j],LocationCode[i]);
          UpdateTransferRoutes(TransferRoute,ShippingAgentServicesCode[k],ShippingAgent.Code);
          k := k + 1;
        END;
    END;

    LOCAL PROCEDURE CreateReqLine@76(VAR RequisitionLine@1001 : Record 246);
    VAR
      RequisitionWkshName@1002 : Record 245;
    BEGIN
      RequisitionWkshName.SETRANGE("Template Type",RequisitionWkshName."Template Type"::Planning);
      RequisitionWkshName.FINDFIRST;
      ClearReqWkshBatch(RequisitionWkshName);

      RequisitionLine.INIT;
      RequisitionLine.VALIDATE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
      RequisitionLine.VALIDATE("Journal Batch Name",RequisitionWkshName.Name);
    END;

    LOCAL PROCEDURE CreateAndPostItemJrnl@21(EntryType@1002 : Option;ItemNo@1004 : Code[20];Qty@1005 : Decimal);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      CreateItemJrnl(ItemJournalLine,EntryType,ItemNo,Qty);
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateAndPostItemJrnlWithLocationAndCost@44(EntryType@1002 : Option;ItemNo@1004 : Code[20];Qty@1005 : Decimal;Cost@1001 : Decimal;LocationCode@1000 : Code[10]);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      CreateItemJrnl(ItemJournalLine,EntryType,ItemNo,Qty);
      WITH ItemJournalLine DO BEGIN
        VALIDATE("Location Code",LocationCode);
        VALIDATE("Unit Cost",Cost);
        MODIFY(TRUE);
      END;
      LibraryInventory.PostItemJournalLine(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");
    END;

    LOCAL PROCEDURE CreateAndPostWhseShipmentFromTransferOrder@91(TransferHeader@1000 : Record 5740;QtyToShip@1002 : Decimal);
    VAR
      WarehouseShipmentHeader@1003 : Record 7320;
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      IF TransferHeader.Status = TransferHeader.Status::Open THEN
        LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);

      WarehouseShipmentLine.SETRANGE("Source Type",DATABASE::"Transfer Line");
      WarehouseShipmentLine.SETRANGE("Source No.",TransferHeader."No.");
      WarehouseShipmentLine.FINDFIRST;
      WarehouseShipmentLine.VALIDATE("Qty. to Ship",QtyToShip);
      WarehouseShipmentLine.MODIFY(TRUE);

      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
    END;

    LOCAL PROCEDURE CreateItemJrnl@81(VAR ItemJournalLine@1006 : Record 83;EntryType@1002 : Option;ItemNo@1004 : Code[20];Qty@1005 : Decimal);
    VAR
      ItemJournalTemplate@1001 : Record 82;
      ItemJournalBatch@1000 : Record 233;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Qty);
    END;

    LOCAL PROCEDURE CreateItemWithPositiveInventory@103(VAR Item@1000 : Record 27;LocationCode@1001 : Code[10];Qty@1002 : Decimal);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      LibraryInventory.CreateItem(Item);
      CreateAndPostItemJrnlWithLocationAndCost(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",Qty,LibraryRandom.RandIntInRange(10,20),LocationCode);
    END;

    LOCAL PROCEDURE CreateTransferOrderAndInitializeNewTransferLine@71(VAR TransferOrder@1000 : TestPage 5740;ShippingAgentCode@1005 : Code[10]);
    VAR
      TransferHeader@1004 : Record 5740;
      LocationFrom@1003 : Record 14;
      LocationTo@1002 : Record 14;
      LocationInTransit@1001 : Record 14;
    BEGIN
      LibraryWarehouse.CreateLocation(LocationFrom);
      LibraryWarehouse.CreateLocation(LocationTo);
      LibraryWarehouse.CreateInTransitLocation(LocationInTransit);
      LibraryWarehouse.CreateTransferHeader(TransferHeader,LocationFrom.Code,LocationTo.Code,LocationInTransit.Code);
      TransferHeader.VALIDATE("Shipping Agent Code",ShippingAgentCode);
      TransferHeader.MODIFY(TRUE);

      TransferOrder.OPENEDIT;
      TransferOrder.FILTER.SETFILTER("No.",TransferHeader."No.");
      TransferOrder.TransferLines.NEW;
      TransferOrder.TransferLines."Item No.".SETVALUE(LibraryInventory.CreateItemNo);
    END;

    LOCAL PROCEDURE CreateTransferOrder@28(VAR TransferLine@1005 : Record 5741;TransferfromCode@1001 : Code[10];TransfertoCode@1002 : Code[10];ItemNo@1003 : Code[20];ReceiptDate@1006 : Date;Quantity@1004 : Decimal);
    VAR
      TransferHeader@1000 : Record 5740;
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,TransferfromCode,TransfertoCode,LocationCode[5]);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      TransferLine.VALIDATE("Receipt Date",ReceiptDate);
      TransferLine.VALIDATE("Planning Flexibility",TransferLine."Planning Flexibility"::None);
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateTransferOrderNoRoute@96(VAR TransferHeader@1007 : Record 5740;VAR TransferLine@1004 : Record 5741;FromLocationCode@1000 : Code[10];ToLocationCode@1001 : Code[10];ItemNo@1005 : Code[20];Qty@1006 : Decimal);
    VAR
      InTransitLocation@1002 : Record 14;
    BEGIN
      LibraryWarehouse.CreateInTransitLocation(InTransitLocation);
      LibraryInventory.CreateTransferHeader(TransferHeader,FromLocationCode,ToLocationCode,InTransitLocation.Code);
      LibraryInventory.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Qty);
    END;

    LOCAL PROCEDURE CreateTransferRouteSetup@40(VAR LocationCode@1001 : ARRAY [3] OF Code[10]);
    VAR
      TransferRoute@1000 : Record 5742;
      Location@1004 : Record 14;
      i@1003 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(LocationCode) DO BEGIN
        LibraryWarehouse.CreateLocation(Location);
        LocationCode[i] := Location.Code;
      END;
      LibraryWarehouse.CreateInTransitLocation(Location);

      WITH TransferRoute DO BEGIN
        INIT;
        VALIDATE("Transfer-from Code",LocationCode[1]);
        VALIDATE("Transfer-to Code",LocationCode[2]);
        VALIDATE("In-Transit Code",Location.Code);
        INSERT;
        VALIDATE("Transfer-to Code",LocationCode[3]);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CreateTransferSetup@18(VAR SalesHeader@1006 : Record 36;VAR ItemNo@1000 : ARRAY [4] OF Code[20];CreateSalesOrderExist@1001 : Boolean);
    VAR
      Item@1009 : Record 27;
      ProductionBOMHeader@1002 : Record 99000771;
      StockkeepingUnit@1003 : Record 5700;
      i@1005 : Integer;
    BEGIN
      // Create and Update Five Location.
      // Create Items and  Production BOMs.Attach BOM to Item.
      CreateUpdateLocations;
      FOR i := 1 TO 4 DO BEGIN
        CreateItem(Item);
        ItemNo[i] := Item."No.";
      END;

      CreateProdBOM(ProductionBOMHeader,ItemNo[1],'',Item."Base Unit of Measure",FALSE);
      UpdateItem(ItemNo[3],ProductionBOMHeader."No.");
      CreateProdBOM(ProductionBOMHeader,ItemNo[2],ItemNo[3],Item."Base Unit of Measure",TRUE);
      UpdateItem(ItemNo[4],ProductionBOMHeader."No.");

      // Create Transfer Routes.
      // Create Stock keeping Unit for each Item at each Location.
      CreateTransferRoutes;
      CreateUpdateStockKeepUnit(StockkeepingUnit,ItemNo);

      // Create and Update Sales Order.
      IF CreateSalesOrderExist THEN BEGIN
        CreateSalesOrder(SalesHeader,Item."No.",LibraryRandom.RandInt(10));
        UpdateSalesLine(SalesHeader,LocationCode[1]);
      END;
    END;

    LOCAL PROCEDURE CreatePartlyShipTransferOrder@61(VAR TransferHeader@1003 : Record 5740;VAR TransferLine@1002 : Record 5741);
    VAR
      LocationFromCode@1001 : Code[10];
      LocationToCode@1000 : Code[10];
    BEGIN
      CreateLocations(LocationFromCode,LocationToCode);
      CreateAndPostPartiallyShippedTransferOrder(TransferHeader,TransferLine,LocationFromCode,LocationToCode,TRUE);
    END;

    LOCAL PROCEDURE CreateTwoPartlyShipTransferOrders@120(VAR TransferHeader@1001 : ARRAY [2] OF Record 5740;Ship@1002 : Boolean);
    VAR
      TransferLine@1000 : Record 5741;
      LocationFromCode@1004 : Code[10];
      LocationToCode@1003 : Code[10];
    BEGIN
      CreateLocations(LocationFromCode,LocationToCode);
      CreateAndPostPartiallyShippedTransferOrder(TransferHeader[1],TransferLine,LocationFromCode,LocationToCode,Ship);
      CreateAndPostPartiallyShippedTransferOrder(TransferHeader[2],TransferLine,LocationFromCode,LocationToCode,Ship);
    END;

    LOCAL PROCEDURE CreateAndPostPartiallyShippedTransferOrder@93(VAR TransferHeader@1006 : Record 5740;VAR TransferLine@1005 : Record 5741;LocationFromCode@1000 : Code[10];LocationToCode@1001 : Code[10];Ship@1004 : Boolean);
    VAR
      Item@1003 : Record 27;
      Qty@1002 : Decimal;
    BEGIN
      Qty := LibraryRandom.RandIntInRange(100,200);
      CreateItemWithPositiveInventory(Item,LocationFromCode,Qty * 2);

      CreateTransferOrderNoRoute(TransferHeader,TransferLine,LocationFromCode,LocationToCode,Item."No.",Qty * 2);
      UpdatePartialQuantityToShip(TransferLine);

      LibraryWarehouse.PostTransferOrder(TransferHeader,Ship,FALSE);
    END;

    LOCAL PROCEDURE CreateGlobal1DimensionValue@72(VAR DimensionValue@1000 : Record 349) : Code[20];
    VAR
      GLSetup@1001 : Record 98;
    BEGIN
      GLSetup.GET;
      LibraryDimension.CreateDimensionValue(DimensionValue,GLSetup."Global Dimension 1 Code");
      EXIT(DimensionValue.Code);
    END;

    LOCAL PROCEDURE CarryOutActionMsgPlanSetup@23(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : ARRAY [4] OF Code[20]);
    BEGIN
      // Update Vendor No in Requisition Worksheet and Carry Out Action Message.
      GenerateRequisitionWorksheet(RequisitionLine,ItemNo);
      RequisitionCarryOutActMessage(ItemNo);
    END;

    LOCAL PROCEDURE MockReqTransferOrderLines@41(VAR RequisitionLine@1002 : Record 246;LocationCode@1000 : ARRAY [3] OF Code[10]);
    VAR
      Item@1005 : Record 27;
      i@1003 : Integer;
    BEGIN
      CreateReqLine(RequisitionLine);
      LibraryInventory.CreateItem(Item);

      WITH RequisitionLine DO BEGIN
        "Accept Action Message" := TRUE;
        "Action Message" := "Action Message"::New;
        "Transfer-from Code" := LocationCode[1];
        Type := Type::Item;
        "No." := Item."No.";
        "Ref. Order Type" := "Ref. Order Type"::Transfer;
        "Transfer Shipment Date" := WORKDATE;
        "Due Date" := WORKDATE;
        Quantity := LibraryRandom.RandDec(100,2);

        FOR i := 1 TO 4 DO BEGIN
          "Line No." += 10000;
          "Location Code" := LocationCode[3 - i MOD 2]; // 2,3,2,3
          INSERT;
        END;
      END;
    END;

    LOCAL PROCEDURE MockTransferOrder@99(VAR TransferHeader@1000 : Record 5740);
    VAR
      TransferLine@1001 : Record 5741;
    BEGIN
      WITH TransferHeader DO BEGIN
        INIT;
        "No." := LibraryUtility.GenerateRandomCode(FIELDNO("No."),DATABASE::"Transfer Header");
        "Transfer-from Code" := LibraryUtility.GenerateGUID;
        "Transfer-to Code" := LibraryUtility.GenerateGUID;
        Status := Status::Open;
        "External Document No." := LibraryUtility.GenerateGUID;
        "Shipment Method Code" := LibraryUtility.GenerateGUID;
        "Shipping Agent Code" := LibraryUtility.GenerateGUID;
        "Shipping Advice" := "Shipping Advice"::Complete;
        "Shipment Date" := LibraryRandom.RandDate(10);
        "Receipt Date" := LibraryRandom.RandDateFromInRange(WORKDATE,11,20);
        INSERT;
      END;

      WITH TransferLine DO BEGIN
        INIT;
        "Document No." := TransferHeader."No.";
        "Transfer-from Code" := TransferHeader."Transfer-from Code";
        "Transfer-to Code" := TransferHeader."Transfer-to Code";
        Quantity := LibraryRandom.RandInt(10);
        "Quantity Shipped" := LibraryRandom.RandInt(10);
        "Quantity Received" := LibraryRandom.RandInt(10);
        "Completely Shipped" := ("Quantity Shipped" = Quantity);
        "Completely Received" := ("Quantity Received" = Quantity);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockWhseRequest@104(RequestType@1001 : Option;LocCode@1003 : Code[10];SourceNo@1002 : Code[20]);
    VAR
      WarehouseRequest@1000 : Record 5765;
    BEGIN
      WITH WarehouseRequest DO BEGIN
        INIT;
        Type := RequestType;
        "Location Code" := LocCode;
        "Source Type" := DATABASE::"Transfer Line";
        "Source Subtype" := ABS(RequestType - 1);
        "Source No." := SourceNo;
        "Shipment Date" := WORKDATE;
        "Expected Receipt Date" := WORKDATE;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE FilterWhseRequest@105(VAR WarehouseRequest@1000 : Record 5765;RequestType@1001 : Option;LocCode@1002 : Code[10];SourceSubtype@1003 : Option;SourceNo@1004 : Code[20]);
    BEGIN
      WITH WarehouseRequest DO BEGIN
        SETRANGE(Type,RequestType);
        SETRANGE("Location Code",LocCode);
        SETRANGE("Source Type",DATABASE::"Transfer Line");
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source No.",SourceNo);
      END;
    END;

    LOCAL PROCEDURE CalculateNetChangePlan@85(VAR RequisitionLine@1001 : Record 246;StartDate@1007 : Date;ItemNo@1003 : ARRAY [4] OF Code[20]);
    VAR
      Item@1002 : Record 27;
      CalculatePlanPlanWksh@1000 : Report 99001017;
    BEGIN
      Item.SETRANGE("No.",ItemNo[1],ItemNo[4]);
      CalculatePlanPlanWksh.SetTemplAndWorksheet(
        RequisitionLine."Worksheet Template Name",RequisitionLine."Journal Batch Name",TRUE);
      CalculatePlanPlanWksh.SETTABLEVIEW(Item);
      CalculatePlanPlanWksh.InitializeRequest(StartDate,CALCDATE('<30D>',StartDate),FALSE);
      CalculatePlanPlanWksh.USEREQUESTPAGE(FALSE);
      CalculatePlanPlanWksh.RUNMODAL;
      IF NOT RequisitionLine.FINDFIRST THEN
        RequisitionLine.SetUpNewLine(RequisitionLine);
    END;

    LOCAL PROCEDURE GenerateRequisitionWorksheet@82(VAR RequisitionLine@1000 : Record 246;ItemNo@1005 : ARRAY [4] OF Code[20]);
    VAR
      RequisitionWkshName@1010 : Record 245;
      CarryOutActionMsgPlan@1001 : Report 99001020;
      NewProdOrderChoice@1004 : ' ,Planned,Firm Planned,Firm Planned & Print,Copy to Req. Wksh';
      NewPurchOrderChoice@1003 : ' ,Make Purch. Orders,Make Purch. Orders & Print,Copy to Req. Wksh';
      NewTransOrderChoice@1002 : ' ,Make Trans. Orders,Make Trans. Orders & Print,Copy to Req. Wksh';
      NewAsmOrderChioce@1006 : ' ,Make Assembly Orders,Make Assembly Orders & Print';
    BEGIN
      // Update Accept Action Message in Planning Worksheet.
      UpdatePlanningWorkSheet(RequisitionLine,ItemNo);

      RequisitionWkshName.SETRANGE("Template Type",RequisitionWkshName."Template Type"::"Req.");
      RequisitionWkshName.FINDFIRST;
      CarryOutActionMsgPlan.SetReqWkshLine(RequisitionLine);
      CarryOutActionMsgPlan.InitializeRequest2(
        NewProdOrderChoice::Planned,
        NewPurchOrderChoice::"Copy to Req. Wksh",
        NewTransOrderChoice::"Copy to Req. Wksh",
        NewAsmOrderChioce::" ",
        RequisitionWkshName."Worksheet Template Name",RequisitionWkshName.Name,RequisitionWkshName."Worksheet Template Name",
        RequisitionWkshName.Name);
      CarryOutActionMsgPlan.SETTABLEVIEW(RequisitionLine);
      CarryOutActionMsgPlan.USEREQUESTPAGE(FALSE);
      CarryOutActionMsgPlan.RUN;
    END;

    LOCAL PROCEDURE UpdateLocation@1(Code@1002 : Code[10];UseAsInTransit@1001 : Boolean;OutboundWhseHandlingTime@1003 : DateFormula;InboundWhseHandlingTime@1004 : DateFormula);
    VAR
      Location@1000 : Record 14;
    BEGIN
      Location.GET(Code);
      Location.VALIDATE("Use As In-Transit",UseAsInTransit);
      Location.VALIDATE("Outbound Whse. Handling Time",OutboundWhseHandlingTime);
      Location.VALIDATE("Inbound Whse. Handling Time",InboundWhseHandlingTime);
      Location.MODIFY(TRUE);
      LibraryInventory.UpdateInventoryPostingSetup(Location);
    END;

    LOCAL PROCEDURE UpdateItem@26(ItemNo@1000 : Code[20];ProductionBOMNo@1001 : Code[20]);
    VAR
      Item@1002 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      Item.VALIDATE("Production BOM No.",ProductionBOMNo);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateTransferRoutes@11(VAR TransferRoute@1000 : Record 5742;ShippingAgentServiceCode@1001 : Code[10];ShippingAgentCode@1002 : Code[10]);
    BEGIN
      TransferRoute.VALIDATE("In-Transit Code",LocationCode[5]);
      TransferRoute.VALIDATE("Shipping Agent Code",ShippingAgentCode);
      TransferRoute.VALIDATE("Shipping Agent Service Code",ShippingAgentServiceCode);
      TransferRoute.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateStockKeepingUnit@17(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20];ReplenishmentSystem@1003 : Option;VendorNo@1004 : Code[20];TransferfromCode@1005 : Code[10]);
    VAR
      StockkeepingUnit@1002 : Record 5700;
    BEGIN
      FindStockKeepingUnit(StockkeepingUnit,LocationCode,ItemNo);
      StockkeepingUnit.VALIDATE("Replenishment System",ReplenishmentSystem);
      StockkeepingUnit.VALIDATE("Transfer-from Code",TransferfromCode);
      StockkeepingUnit.VALIDATE("Vendor No.",VendorNo);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateReorderingPolicy@22(LocationCode@1000 : Code[10];ItemNo@1001 : Code[20]);
    VAR
      StockkeepingUnit@1002 : Record 5700;
    BEGIN
      FindStockKeepingUnit(StockkeepingUnit,LocationCode,ItemNo);
      StockkeepingUnit.VALIDATE("Reordering Policy",StockkeepingUnit."Reordering Policy"::"Lot-for-Lot");
      StockkeepingUnit.VALIDATE("Include Inventory",TRUE);
      StockkeepingUnit.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesLine@12(SalesHeader@1001 : Record 36;LocationCode@1002 : Code[10]);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDSET;
      REPEAT
        SalesLine.VALIDATE("Location Code",LocationCode);
        SalesLine.MODIFY(TRUE);
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdatePartialQuantityToShip@59(TransferLine@1000 : Record 5741);
    VAR
      LibraryUtility@1002 : Codeunit 131000;
    BEGIN
      TransferLine.VALIDATE("Qty. to Ship",TransferLine.Quantity * LibraryUtility.GenerateRandomFraction);
      TransferLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseLine@24(PurchaseHeader@1001 : Record 38;LocationCode@1002 : Code[10]);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDSET;
      REPEAT
        PurchaseLine.VALIDATE("Location Code",LocationCode);
        PurchaseLine.VALIDATE("Expected Receipt Date",CALCDATE('<CM>',PurchaseHeader."Order Date"));
        PurchaseLine.MODIFY(TRUE);
      UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdatePlanningWorkSheet@25(VAR RequisitionLine@1000 : Record 246;ItemNo@1001 : ARRAY [4] OF Code[20]);
    BEGIN
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",ItemNo[1],ItemNo[4]);
      RequisitionLine.FINDSET;
      REPEAT
        RequisitionLine.VALIDATE("Accept Action Message",TRUE);
        RequisitionLine.MODIFY(TRUE);
      UNTIL RequisitionLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FindStockKeepingUnit@36(VAR StockkeepingUnit@1000 : Record 5700;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20]);
    BEGIN
      StockkeepingUnit.SETRANGE("Location Code",LocationCode);
      StockkeepingUnit.SETRANGE("Item No.",ItemNo);
      StockkeepingUnit.FINDFIRST;
    END;

    LOCAL PROCEDURE RequisitionCarryOutActMessage@16(ItemNo@1003 : ARRAY [4] OF Code[20]);
    VAR
      RequisitionLine@1000 : Record 246;
      Vendor@1002 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      RequisitionLine.SETRANGE(Type,RequisitionLine.Type::Item);
      RequisitionLine.SETRANGE("No.",ItemNo[1],ItemNo[4]);
      RequisitionLine.FINDSET;
      REPEAT
        RequisitionLine.VALIDATE("Vendor No.",Vendor."No.");
        RequisitionLine.MODIFY(TRUE);
      UNTIL RequisitionLine.NEXT = 0;
      LibraryPlanning.CarryOutAMSubcontractWksh(RequisitionLine);
    END;

    LOCAL PROCEDURE RunRequisitionCarryOutReport@30(RequisitionLine@1000 : Record 246;CombineTransfers@1002 : Boolean);
    VAR
      CarryOutActionMsgPlan@1001 : Report 99001020;
    BEGIN
      COMMIT;
      LibraryVariableStorage.Enqueue(CombineTransfers);
      CarryOutActionMsgPlan.SetReqWkshLine(RequisitionLine);
      CarryOutActionMsgPlan.USEREQUESTPAGE(TRUE);
      CarryOutActionMsgPlan.RUNMODAL;
    END;

    LOCAL PROCEDURE ClearReqWkshBatch@45(RequisitionWkshName@1000 : Record 245);
    VAR
      RequisitionLine@1001 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
      RequisitionLine.SETRANGE("Journal Batch Name",RequisitionWkshName.Name);
      RequisitionLine.DELETEALL;
    END;

    LOCAL PROCEDURE FindLastILENo@55(ItemNo@1000 : Code[20]) : Integer;
    VAR
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        FINDLAST;
        EXIT("Entry No.");
      END;
    END;

    LOCAL PROCEDURE VerifyNumberOfRequisitionLine@35(ItemNo@1002 : ARRAY [4] OF Code[20];NoOfLines@1000 : Integer);
    VAR
      RequisitionLine@1001 : Record 246;
      RequisitionWkshName@1170 : Record 245;
    BEGIN
      RequisitionWkshName.SETRANGE("Template Type",RequisitionWkshName."Template Type"::Planning);
      RequisitionWkshName.FINDFIRST;

      RequisitionLine.SETRANGE("Worksheet Template Name",RequisitionWkshName."Worksheet Template Name");
      RequisitionLine.SETRANGE("No.",ItemNo[1],ItemNo[4]);
      Assert.AreEqual(NoOfLines,RequisitionLine.COUNT,ErrNoOfLinesMustBeEqual);
    END;

    LOCAL PROCEDURE VerifyItemNoExistInReqLine@19(ItemNo@1000 : Code[20]);
    VAR
      RequisitionLine@1004 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyReqLineActMessageCancel@6(ItemNo@1000 : Code[20]);
    VAR
      RequisitionLine@1004 : Record 246;
    BEGIN
      RequisitionLine.SETRANGE("Action Message",RequisitionLine."Action Message"::Cancel);
      RequisitionLine.SETRANGE("No.",ItemNo);
      RequisitionLine.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyTransferOrderCount@38(LocationFromCode@1000 : Code[10];LocationToCode@1001 : Code[10];ExpectedCount@1003 : Integer);
    VAR
      TransferHeader@1002 : Record 5740;
    BEGIN
      WITH TransferHeader DO BEGIN
        SETRANGE("Transfer-from Code",LocationFromCode);
        SETRANGE("Transfer-to Code",LocationToCode);
        Assert.AreEqual(ExpectedCount,COUNT,TransferOrderCountErr);
      END;
    END;

    LOCAL PROCEDURE VerifyTransferReceiptDate@69(VAR TransferOrder@1000 : TestPage 5740);
    VAR
      ReceiptDateOnHeader@1002 : Date;
      ReceiptDateOnLine@1001 : Date;
    BEGIN
      EVALUATE(ReceiptDateOnHeader,TransferOrder."Receipt Date".VALUE);
      EVALUATE(ReceiptDateOnLine,TransferOrder.TransferLines."Receipt Date".VALUE);
      Assert.AreEqual(ReceiptDateOnHeader,ReceiptDateOnLine,TransferOrderSubpageNotUpdatedErr);
    END;

    LOCAL PROCEDURE VerifyItemApplicationEntry@67(ItemNo@1000 : Code[20];AppliedToEntryNo@1001 : Integer);
    VAR
      ItemApplicationEntry@1002 : Record 339;
    BEGIN
      WITH ItemApplicationEntry DO BEGIN
        SETRANGE("Item Ledger Entry No.",FindLastILENo(ItemNo));
        FINDLAST;
        SETRANGE("Item Ledger Entry No.","Outbound Item Entry No.");
        FINDLAST;
        TESTFIELD("Inbound Item Entry No.",AppliedToEntryNo);
        TESTFIELD("Cost Application",TRUE);
      END;
    END;

    LOCAL PROCEDURE VerifyItemApplicationEntryCost@64(ItemNo@1000 : Code[20];EntryType@1003 : Option;ExpectedCost@1001 : Decimal);
    VAR
      ItemLedgerEntry@1004 : Record 32;
    BEGIN
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Entry Type",EntryType);
        FINDSET;
        REPEAT
          CALCFIELDS("Cost Amount (Actual)");
          TESTFIELD("Cost Amount (Actual)",(ExpectedCost * Quantity));
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyDimensionOnDimSet@75(DimSetID@1001 : Integer;DimensionValue@1002 : Record 349);
    VAR
      TempDimensionSetEntry@1000 : TEMPORARY Record 480;
      DimMgt@1003 : Codeunit 408;
    BEGIN
      DimMgt.GetDimensionSet(TempDimensionSetEntry,DimSetID);
      TempDimensionSetEntry.SETRANGE("Dimension Code",DimensionValue."Dimension Code");
      TempDimensionSetEntry.FINDFIRST;
      TempDimensionSetEntry.TESTFIELD("Dimension Value Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE VerifyWhseRequest@124(WarehouseRequest@1000 : Record 5765;TransferHeader@1001 : Record 5740;SourceDoc@1002 : Option;IsCompletelyHandled@1003 : Boolean;ShipmentDate@1004 : Date;ReceiptDate@1005 : Date);
    BEGIN
      WITH WarehouseRequest DO BEGIN
        TESTFIELD("Source Document",SourceDoc);
        TESTFIELD("Document Status",TransferHeader.Status);
        TESTFIELD("External Document No.",TransferHeader."External Document No.");
        TESTFIELD("Completely Handled",IsCompletelyHandled);
        TESTFIELD("Shipment Method Code",TransferHeader."Shipment Method Code");
        TESTFIELD("Shipping Agent Code",TransferHeader."Shipping Agent Code");
        TESTFIELD("Destination Type","Destination Type"::Location);
        TESTFIELD("Destination No.","Location Code");
        TESTFIELD("Shipment Date",ShipmentDate);
        TESTFIELD("Expected Receipt Date",ReceiptDate);
      END;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@10(Message@1000 : Text[1024]);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE CarryOutActionMsgPlanHandler@31(VAR CarryOutActionMsgPlan@1000 : TestRequestPage 99001020);
    VAR
      Variant@1002 : Variant;
      TransOrderChoice@1001 : ' ,Make Trans. Orders,Make Trans. Orders & Print,Copy to Req. Wksh';
    BEGIN
      LibraryVariableStorage.Dequeue(Variant);
      CarryOutActionMsgPlan.TransOrderChoice.SETVALUE(TransOrderChoice::"Make Trans. Orders");
      CarryOutActionMsgPlan.CombineTransferOrders.SETVALUE(Variant);
      CarryOutActionMsgPlan.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@53(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerNo@88(Question@1000 : Text;VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerForTransferHeaderDimUpdate@66(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      CASE TRUE OF
        Question = UpdateFromHeaderLinesQst:
          Reply := TRUE;
        STRPOS(Question,UpdateLineDimQst) <> 0:
          Reply := LibraryVariableStorage.DequeueBoolean;
      END;
    END;

    [ModalPageHandler]
    PROCEDURE EditDimensionSetEntriesHandler@74(VAR EditDimensionSetEntries@1000 : TestPage 480);
    BEGIN
      EditDimensionSetEntries.NEW;
      EditDimensionSetEntries."Dimension Code".SETVALUE(LibraryVariableStorage.DequeueText);
      EditDimensionSetEntries.DimensionValueCode.SETVALUE(LibraryVariableStorage.DequeueText);
      EditDimensionSetEntries.OK.INVOKE;
    END;

    [StrMenuHandler]
    PROCEDURE StrMenuHandler@56(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := 1; // Ship
    END;

    BEGIN
    {
      // [FEATURE] [Planning] [SCM] [Transfer Order]
      Unsupported version tags:
      US: Unable to Execute
      CA: Unable to Execute
      IT: Unable to Execute

      Test for Transfers:
        1. Create Sales Order. Calculate Net Change Plan and Carry Out Action Message in Planning Worksheet.
        2. Create Purchase Order. Calculate Net Change Plan and Carry Out Action Message in Planning Worksheet.
        3. Create Transfer Order. Calculate Net Change Plan and Carry Out Action Message in Planning Worksheet.
        4. Create Transfer Order,Purchase Order. Calculate Net Change Plan and Carry Out Action Message in Planning Worksheet.
        5. Verify Transfer Orders are combined when planning transfer lines are splitted
        6. Verify Transfer Orders are not combined when planning transfer lines are splitted

        Covers Test cases:
        --------------------------------------------------------------------------------------
        Test Function Name                TFS ID
        --------------------------------------------------------------------------------------
        CreateSalesOrderCalcNetChange     127743,135674,185278
        CreatePurchOrdCalcNetChange       127744,185279,135675
        CreateTransferOrdCalcNetChange    126570,135676,185011
        TransferPurchOrdeCalcNetChange    121559,135678,184482,127745,135679,185280

        PlanningCombineTransfersSplit,
        PlanningNotCombineTransfersSplit                104962
    }
    END.
  }
}

