OBJECT Codeunit 134332 ERM Copy Purch/Sales Doc
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1010 : Codeunit 130000;
      LibraryRandom@1005 : Codeunit 130440;
      LibrarySales@1004 : Codeunit 130509;
      LibraryPurchase@1003 : Codeunit 130512;
      LibraryERM@1007 : Codeunit 131300;
      LibraryInventory@1008 : Codeunit 132201;
      LibraryService@1001 : Codeunit 131902;
      LibrarySetupStorage@1013 : Codeunit 131009;
      LibraryUtility@1009 : Codeunit 131000;
      LibraryWarehouse@1014 : Codeunit 132204;
      SalesDocType@1002 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Shipment,Posted Invoice,Posted Return Receipt,Posted Credit Memo';
      PurchDocType@1006 : 'Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';
      IsInitialized@1000 : Boolean;
      OneLineShouldBeCopiedErr@1011 : TextConst 'ENU=One line should be copied.';
      InvoiceRoundingAccountErr@1012 : TextConst 'ENU=Invoice Rounding Account must have a value';

    [Test]
    PROCEDURE CopyPurchOrdCopyHeadRecalcLine@1();
    VAR
      Item@1008 : Record 27;
      OriginalPurchLine@1006 : Record 39;
      DestinationPurchLine@1005 : Record 39;
      PurchaseLineDiscount@1004 : Record 7014;
      OriginalPurchHeader@1000 : Record 38;
      DestinationPurchHeader@1001 : Record 38;
      OriginalDocType@1002 : Option;
      DestinationDocType@1003 : Option;
      ItemCost@1007 : Integer;
      ItemPrice@1009 : Integer;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO] Purchase Document is copied with options CopyHeader = TRUE and RecalculateLine = TRUE
      Initialize;
      PrepareTest(Item,OriginalDocType,DestinationDocType,ItemCost,ItemPrice);

      // Create original purch document without discount specified.
      CreateOneItemPurchDocWithItem(OriginalPurchHeader,Item,OriginalDocType);

      // Prepare destination document type
      DestinationPurchHeader.INIT;
      DestinationPurchHeader.VALIDATE("Document Type",DestinationDocType);
      DestinationPurchHeader.INSERT(TRUE);

      CreateVendorItemDiscount(PurchaseLineDiscount,OriginalPurchHeader."Buy-from Vendor No.",Item);

      // 2. Exercise
      RunCopyPurchaseDoc(
        OriginalPurchHeader."No.",DestinationPurchHeader,
        MapperPurchaseHeaders(OriginalPurchHeader."Document Type"),TRUE,TRUE);

      // 3. Validation
      DestinationPurchHeader.GET(DestinationPurchHeader."Document Type",DestinationPurchHeader."No.");
      VerifyPurchaseHeadersAreEqual(OriginalPurchHeader,DestinationPurchHeader);
      DestinationPurchHeader.TESTFIELD("Quote No.",'');

      // Assumes only one line of each type exists in the purchase order.
      FindFirstLineOfPurchaseDocument(OriginalPurchHeader,OriginalPurchLine);
      FindFirstLineOfPurchaseDocument(DestinationPurchHeader,DestinationPurchLine);

      ValidatePurchaseLine(DestinationPurchLine,
        OriginalPurchLine.Quantity,
        ItemCost,
        PurchaseLineDiscount."Line Discount %");
    END;

    [Test]
    PROCEDURE CopyPurchOrdCopyHead@6();
    VAR
      OriginalPurchHeader@1000 : Record 38;
      DestinationPurchHeader@1001 : Record 38;
      Item@1006 : Record 27;
      PurchaseLineDiscount@1008 : Record 7014;
      OriginalDocType@1003 : Option;
      DestinationDocType@1002 : Option;
      ItemCost@1004 : Integer;
      ItemPrice@1005 : Integer;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO] Purchase Document is copied with options CopyHeader = TRUE and RecalculateLine = FALSE
      Initialize;
      PrepareTest(Item,OriginalDocType,DestinationDocType,ItemCost,ItemPrice);

      // Create original purch document without discount specified.
      CreateOneItemPurchDocWithItem(OriginalPurchHeader,Item,OriginalDocType);

      // Create destination purchase header
      CreatePurchHeader(DestinationPurchHeader,DestinationDocType);

      // Order date should be today otherwise the discount we created won't be able to apply
      DestinationPurchHeader.VALIDATE("Order Date",WORKDATE);
      DestinationPurchHeader.MODIFY(TRUE);

      CreateVendorItemDiscount(PurchaseLineDiscount,OriginalPurchHeader."Buy-from Vendor No.",Item);

      // 2. Exercise
      RunCopyPurchaseDoc(
        OriginalPurchHeader."No.",DestinationPurchHeader,
        MapperPurchaseHeaders(OriginalPurchHeader."Document Type"),TRUE,FALSE);

      // 3. Validation
      DestinationPurchHeader.GET(DestinationPurchHeader."Document Type",DestinationPurchHeader."No.");
      VerifyPurchaseHeadersAreEqual(OriginalPurchHeader,DestinationPurchHeader);

      // Quantity, unit cost and discount should be same as original although now a discount exists for this item and vendor.
      VerifyPurchaseLinesAreEqual(OriginalPurchHeader,DestinationPurchHeader);
    END;

    [Test]
    PROCEDURE CopyPurchOrdRecalcLine@11();
    VAR
      OriginalPurchHeader@1000 : Record 38;
      DestinationPurchHeader@1001 : Record 38;
      PurchaseLineDiscount@1007 : Record 7014;
      Item@1008 : Record 27;
      DestinationInvoiceVendor@1006 : Record 23;
      DestinationPurchLine@1010 : Record 39;
      OriginalPurchLine@1011 : Record 39;
      OriginalDocType@1003 : Option;
      DestinationDocType@1002 : Option;
      ItemCost@1004 : Integer;
      ItemPrice@1005 : Integer;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO] Purchase Document is copied with options CopyHeader = FALSE and RecalculateLine = TRUE
      Initialize;
      PrepareTest(Item,OriginalDocType,DestinationDocType,ItemCost,ItemPrice);

      CreateOneItemPurchDocWithItem(OriginalPurchHeader,Item,OriginalDocType);

      LibraryPurchase.CreateVendor(DestinationInvoiceVendor);

      // If Copy Purch Document is ran with IncludeHeader=False is mandatory to have the same vendor in original and destination doc.
      CreatePurchHeaderForVendor(DestinationPurchHeader,DestinationDocType,DestinationInvoiceVendor."No.");

      // Order date should be today otherwise the discount we will create won't apply
      DestinationPurchHeader.VALIDATE("Order Date",WORKDATE);
      DestinationPurchHeader.MODIFY(TRUE);

      CreateVendorItemDiscount(PurchaseLineDiscount,DestinationInvoiceVendor."No.",Item);

      // 2. Exercise
      RunCopyPurchaseDoc(
        OriginalPurchHeader."No.",DestinationPurchHeader,
        MapperPurchaseHeaders(OriginalPurchHeader."Document Type"),FALSE,TRUE);

      // 3. Validation
      // Validate the line is right (don't care about the header because it has not been copied).
      // Line prices should be recalculated according to the new vendor prices considering the discount.
      // Refresh new purchase header after the copy
      DestinationPurchHeader.GET(DestinationPurchHeader."Document Type",DestinationPurchHeader."No.");

      // Assumes only one line of each type exists in the purchase order.
      FindFirstLineOfPurchaseDocument(OriginalPurchHeader,OriginalPurchLine);
      FindFirstLineOfPurchaseDocument(DestinationPurchHeader,DestinationPurchLine);

      ValidatePurchaseLine(DestinationPurchLine,
        OriginalPurchLine.Quantity,
        ItemCost,
        PurchaseLineDiscount."Line Discount %");
    END;

    [Test]
    PROCEDURE CopyPurchOrdWithInvRoundingLine@134();
    VAR
      OriginalPurchHeader@1001 : Record 38;
      DestinationPurchHeader@1000 : Record 38;
      PurchLine@1002 : Record 39;
      InvRoundingAccNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Invoice Rounding] [Purchase]
      // [SCENARIO 140138] Copy Document should not skip a purchase line that has Item's "No." equal to "Invoice Rounding Account"
      Initialize;
      LibraryPurchase.SetInvoiceRounding(TRUE);

      // [GIVEN] Order "1001" with two lines:
      // [GIVEN] The 1st line of Type "Item", where "No." is "IRA"
      CreateOneItemPurchDoc(OriginalPurchHeader,OriginalPurchHeader."Document Type"::Order);
      // [GIVEN] Vendor with Vendor Posting Group, where "Invoice Rounding Account" = "IRA"
      FindFirstLineOfPurchaseDocument(OriginalPurchHeader,PurchLine);
      InvRoundingAccNo := PurchLine."No.";
      SetPurchInvoiceRoundingAccount(OriginalPurchHeader."Vendor Posting Group",CreatePurchGLAccNo(InvRoundingAccNo));
      // [GIVEN] The 2nd line of Type "G/L Account", where "No." is "IRA"
      LibraryPurchase.CreatePurchaseLine(PurchLine,OriginalPurchHeader,PurchLine.Type::"G/L Account",InvRoundingAccNo,1);
      PurchLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(10,2));
      PurchLine.MODIFY(TRUE);

      // [WHEN] Copy Document "1001" to new Order "1002"
      CreatePurchHeaderForVendor(
        DestinationPurchHeader,DestinationPurchHeader."Document Type"::Order,OriginalPurchHeader."Buy-from Vendor No.");
      RunCopyPurchaseDoc(
        OriginalPurchHeader."No.",DestinationPurchHeader,
        MapperPurchaseHeaders(OriginalPurchHeader."Document Type"),FALSE,FALSE);

      // [THEN] Order "1002" contains one line, where "Type" is "Item", where "No." is "IRA"
      PurchLine.SETRANGE("Document Type",DestinationPurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",DestinationPurchHeader."No.");
      PurchLine.SETRANGE("No.",InvRoundingAccNo);
      Assert.AreEqual(1,PurchLine.COUNT,OneLineShouldBeCopiedErr);
      PurchLine.FINDFIRST;
      PurchLine.TESTFIELD(Type,PurchLine.Type::Item);
    END;

    [Test]
    PROCEDURE CopyPurchOrdFailsWithBlankInvRndAcc@115();
    VAR
      OriginalPurchHeader@1001 : Record 38;
      DestinationPurchHeader@1000 : Record 38;
      PurchLine@1002 : Record 39;
      Vendor@1003 : Record 23;
      OldGLAccountNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Invoice Rounding] [Purchase]
      // [SCENARIO] Copy Document should fail trying to copy a line of Type "G/L Account" when "Invoice Rounding Account" is not defined
      Initialize;
      LibraryPurchase.SetInvoiceRounding(TRUE);

      // [GIVEN] Vendor with Vendor Posting Group, where "Invoice Rounding Account" is blank
      LibraryPurchase.CreateVendor(Vendor);
      OldGLAccountNo := SetPurchInvoiceRoundingAccount(Vendor."Vendor Posting Group",'');

      // [GIVEN] Order "1001" with one line of Type "G/L Account"
      LibraryPurchase.CreatePurchHeader(
        OriginalPurchHeader,OriginalPurchHeader."Document Type"::Order,Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(
        PurchLine,OriginalPurchHeader,PurchLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithPurchSetup,1);

      // [WHEN] Copy Document "1001" to new Order "1002"
      CreatePurchHeaderForVendor(
        DestinationPurchHeader,DestinationPurchHeader."Document Type"::Order,OriginalPurchHeader."Buy-from Vendor No.");
      ASSERTERROR
        RunCopyPurchaseDoc(
          OriginalPurchHeader."No.",DestinationPurchHeader,
          MapperPurchaseHeaders(OriginalPurchHeader."Document Type"),FALSE,FALSE);

      // [THEN] Error message is thrown: "Invoice Rounding Account" must have a value
      Assert.ExpectedError(InvoiceRoundingAccountErr);

      // Tear Down
      SetPurchInvoiceRoundingAccount(Vendor."Vendor Posting Group",OldGLAccountNo);
    END;

    [Test]
    PROCEDURE CopyPurchOrdWithBlankInvRndAcc@149();
    VAR
      OriginalPurchHeader@1001 : Record 38;
      DestinationPurchHeader@1000 : Record 38;
      PurchLine@1002 : Record 39;
      Vendor@1003 : Record 23;
      OldGLAccountNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Invoice Rounding] [Purchase]
      // [SCENARIO] Copy Document should copy a line of Type "G/L Account" and blank "No." when "Invoice Rounding Account" is not defined
      Initialize;

      // [GIVEN] Vendor with Vendor Posting Group, where "Invoice Rounding Account" is blank
      LibraryPurchase.CreateVendor(Vendor);
      OldGLAccountNo := SetPurchInvoiceRoundingAccount(Vendor."Vendor Posting Group",'');

      // [GIVEN] Order "1001" with one line of Type "G/L Account", where "No." is blank
      LibraryPurchase.CreatePurchHeader(
        OriginalPurchHeader,OriginalPurchHeader."Document Type"::Order,Vendor."No.");
      LibraryPurchase.CreatePurchaseLine(PurchLine,OriginalPurchHeader,PurchLine.Type::"G/L Account",'',0);
      PurchLine."No." := '';
      PurchLine.MODIFY;

      // [WHEN] Copy Document "1001" to new Order "1002"
      CreatePurchHeaderForVendor(
        DestinationPurchHeader,DestinationPurchHeader."Document Type"::Order,OriginalPurchHeader."Buy-from Vendor No.");
      RunCopyPurchaseDoc(
        OriginalPurchHeader."No.",DestinationPurchHeader,
        MapperPurchaseHeaders(OriginalPurchHeader."Document Type"),FALSE,FALSE);

      // [THEN] One line is copied
      PurchLine.SETRANGE("Document Type",DestinationPurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",DestinationPurchHeader."No.");
      Assert.AreEqual(1,PurchLine.COUNT,OneLineShouldBeCopiedErr);
      PurchLine.FINDFIRST;
      PurchLine.TESTFIELD("No.",'');

      // Tear Down
      SetPurchInvoiceRoundingAccount(Vendor."Vendor Posting Group",OldGLAccountNo);
    END;

    [Test]
    PROCEDURE CopyPurchOrd@14();
    VAR
      OriginalPurchHeader@1000 : Record 38;
      DestinationPurchHeader@1001 : Record 38;
      OriginalDocType@1002 : Option;
      DestinationDocType@1003 : Option;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO] Purchase Document is copied with options CopyHeader = FALSE and RecalculateLine = FALSE
      Initialize;

      DestinationDocType := LibraryRandom.RandInt(6) - 1;
      OriginalDocType := LibraryRandom.RandInt(6) - 1;

      CreateOneItemPurchDoc(OriginalPurchHeader,OriginalDocType);

      // If Copy Purch Document is ran with IncludeHeader=False is mandatory to have the same vendor in original and destination doc.
      CreatePurchHeaderForVendor(DestinationPurchHeader,DestinationDocType,OriginalPurchHeader."Buy-from Vendor No.");

      // 2. Exercise
      RunCopyPurchaseDoc(
        OriginalPurchHeader."No.",DestinationPurchHeader,
        MapperPurchaseHeaders(OriginalPurchHeader."Document Type"),FALSE,FALSE);

      // 3. Validation
      // Validate the line is price is the same as in original document because recalculate lines was not enabled.
      DestinationPurchHeader.GET(DestinationPurchHeader."Document Type",DestinationPurchHeader."No.");
      VerifyPurchaseLinesAreEqual(OriginalPurchHeader,DestinationPurchHeader);
    END;

    [Test]
    PROCEDURE CopySalesOrdCopyHeadRecalcLine@22();
    VAR
      Item@1008 : Record 27;
      OriginalSalesLine@1006 : Record 37;
      DestinationSalesLine@1005 : Record 37;
      SalesLineDiscount@1004 : Record 7004;
      OriginalSalesHeader@1000 : Record 36;
      DestinationSalesHeader@1001 : Record 36;
      OriginalDocType@1002 : Option;
      DestinationDocType@1003 : Option;
      ItemCost@1007 : Integer;
      ItemPrice@1009 : Integer;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO] Sales Document is copied with options CopyHeader = TRUE and RecalculateLine = TRUE
      Initialize;
      PrepareTest(Item,OriginalDocType,DestinationDocType,ItemCost,ItemPrice);

      // Create original Sales document without discount specified.
      CreateOneItemSalesDocWithItem(OriginalSalesHeader,Item,OriginalDocType);

      // Prepare destination document type
      DestinationSalesHeader.INIT;
      DestinationSalesHeader.VALIDATE("Document Type",DestinationDocType);
      DestinationSalesHeader.INSERT(TRUE);

      CreateCustomerItemDiscount(SalesLineDiscount,OriginalSalesHeader."Sell-to Customer No.",Item);

      // 2. Exercise
      RunCopySalesDoc(
        OriginalSalesHeader."No.",DestinationSalesHeader,
        MapperSalesHeaders(OriginalSalesHeader."Document Type"),TRUE,TRUE);

      // 3. Validation
      DestinationSalesHeader.GET(DestinationSalesHeader."Document Type",DestinationSalesHeader."No.");
      VerifySalesHeadersAreEqual(OriginalSalesHeader,DestinationSalesHeader);
      DestinationSalesHeader.TESTFIELD("Quote No.",'');

      // Assumes only one line of each type exists in the Sales order.
      FindFirstLineOfSalesDocument(OriginalSalesHeader,OriginalSalesLine);
      FindFirstLineOfSalesDocument(DestinationSalesHeader,DestinationSalesLine);

      ValidateSalesLine(DestinationSalesLine,
        OriginalSalesLine.Quantity,
        ItemPrice,
        SalesLineDiscount."Line Discount %");
    END;

    [Test]
    PROCEDURE CopySalesOrdCopyHead@21();
    VAR
      OriginalSalesHeader@1000 : Record 36;
      DestinationSalesHeader@1001 : Record 36;
      Item@1006 : Record 27;
      SalesLineDiscount@1008 : Record 7004;
      OriginalDocType@1003 : Option;
      DestinationDocType@1002 : Option;
      ItemCost@1004 : Integer;
      ItemPrice@1005 : Integer;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO] Sales Document is copied with options CopyHeader = TRUE and RecalculateLine = FALSE
      Initialize;
      PrepareTest(Item,OriginalDocType,DestinationDocType,ItemCost,ItemPrice);

      // Create original Sales document without discount specified.
      CreateOneItemSalesDocWithItem(OriginalSalesHeader,Item,OriginalDocType);

      // Create destination Sales header
      CreateSalesHeader(DestinationSalesHeader,DestinationDocType);

      // Order date should be today otherwise the discount we created won't be able to apply
      DestinationSalesHeader.VALIDATE("Order Date",WORKDATE);
      DestinationSalesHeader.MODIFY(TRUE);

      CreateCustomerItemDiscount(SalesLineDiscount,OriginalSalesHeader."Sell-to Customer No.",Item);

      // 2. Exercise
      RunCopySalesDoc(
        OriginalSalesHeader."No.",DestinationSalesHeader,
        MapperSalesHeaders(OriginalSalesHeader."Document Type"),TRUE,FALSE);

      // 3. Validation
      DestinationSalesHeader.GET(DestinationSalesHeader."Document Type",DestinationSalesHeader."No.");
      VerifySalesHeadersAreEqual(OriginalSalesHeader,DestinationSalesHeader);

      // Quantity, unit price and discount should be same as original although now a discount exists for this item and vendor.
      VerifySalesLinesAreEqual(OriginalSalesHeader,DestinationSalesHeader);
    END;

    [Test]
    PROCEDURE CopySalesOrdRecalcLine@20();
    VAR
      OriginalSalesHeader@1000 : Record 36;
      DestinationSalesHeader@1001 : Record 36;
      SalesLineDiscount@1007 : Record 7004;
      Item@1008 : Record 27;
      Customer@1006 : Record 18;
      DestinationSalesLine@1010 : Record 37;
      OriginalSalesLine@1011 : Record 37;
      OriginalDocType@1003 : Option;
      DestinationDocType@1002 : Option;
      ItemCost@1004 : Integer;
      ItemPrice@1005 : Integer;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO] Sales Document is copied with options CopyHeader = FALSE and RecalculateLine = TRUE
      Initialize;
      PrepareTest(Item,OriginalDocType,DestinationDocType,ItemCost,ItemPrice);

      CreateOneItemSalesDocWithItem(OriginalSalesHeader,Item,OriginalDocType);

      // Create 2nd customer to invoice
      LibrarySales.CreateCustomer(Customer);

      // If Copy Sales Document is ran with IncludeHeader=False is mandatory to have the same vendor in original and destination doc.
      CreateSalesHeaderForCustomer(DestinationSalesHeader,DestinationDocType,Customer."No.");

      // Order date should be today otherwise the discount we will create won't apply
      DestinationSalesHeader.VALIDATE("Order Date",WORKDATE);
      DestinationSalesHeader.MODIFY(TRUE);

      CreateCustomerItemDiscount(SalesLineDiscount,Customer."No.",Item);

      // 2. Exercise
      RunCopySalesDoc(
        OriginalSalesHeader."No.",DestinationSalesHeader,
        MapperSalesHeaders(OriginalSalesHeader."Document Type"),FALSE,TRUE);

      // 3. Validation
      // Validate the line is right (don't care about the header because it has not been copied).
      // Line prices should be recalculated according to the new vendor prices considering the discount.
      // Refresh new Sales header after the copy
      DestinationSalesHeader.GET(DestinationSalesHeader."Document Type",DestinationSalesHeader."No.");

      // Assumes only one line of each type exists in the Sales order.
      FindFirstLineOfSalesDocument(OriginalSalesHeader,OriginalSalesLine);
      FindFirstLineOfSalesDocument(DestinationSalesHeader,DestinationSalesLine);

      ValidateSalesLine(DestinationSalesLine,
        OriginalSalesLine.Quantity,
        ItemPrice,
        SalesLineDiscount."Line Discount %");
    END;

    [Test]
    PROCEDURE CopySalesOrdWithInvRoundingLine@153();
    VAR
      OriginalSalesHeader@1001 : Record 36;
      DestinationSalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      InvRoundingAccNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Invoice Rounding] [Sales]
      // [SCENARIO 140138] Copy Document should not skip a sales line that has Item's "No." equal to "Invoice Rounding Account"
      Initialize;

      // [GIVEN] Order "1001" with two lines:
      // [GIVEN] The 1st line of Type "Item", where "No." is "IRA"
      CreateOneItemSalesDoc(OriginalSalesHeader,OriginalSalesHeader."Document Type"::Order);
      // [GIVEN] Vendor with Customer Posting Group, where "Invoice Rounding Account" = "IRA"
      FindFirstLineOfSalesDocument(OriginalSalesHeader,SalesLine);
      InvRoundingAccNo := SalesLine."No.";
      SetSalesInvoiceRoundingAccount(OriginalSalesHeader."Customer Posting Group",CreateSalesGLAccNo(InvRoundingAccNo));
      // [GIVEN] The 2nd line of Type "G/L Account", where "No." is "IRA"
      LibrarySales.CreateSalesLine(SalesLine,OriginalSalesHeader,SalesLine.Type::"G/L Account",InvRoundingAccNo,1);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));
      SalesLine.MODIFY(TRUE);

      // [WHEN] Copy Document "1001" to new Order "1002"
      CreateSalesHeaderForCustomer(
        DestinationSalesHeader,DestinationSalesHeader."Document Type"::Order,OriginalSalesHeader."Sell-to Customer No.");
      RunCopySalesDoc(
        OriginalSalesHeader."No.",DestinationSalesHeader,
        MapperSalesHeaders(OriginalSalesHeader."Document Type"),FALSE,FALSE);

      // [THEN] Order "1002" contains one line, where "Type" is "Item", where "No." is "IRA"
      SalesLine.SETRANGE("Document Type",DestinationSalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",DestinationSalesHeader."No.");
      SalesLine.SETRANGE("No.",InvRoundingAccNo);
      Assert.AreEqual(1,SalesLine.COUNT,OneLineShouldBeCopiedErr);
      SalesLine.FINDFIRST;
      SalesLine.TESTFIELD(Type,SalesLine.Type::Item);
    END;

    [Test]
    PROCEDURE CopySalesOrdFailsWithBlankInvRndAcc@155();
    VAR
      OriginalSalesHeader@1001 : Record 36;
      DestinationSalesHeader@1000 : Record 36;
      SalesLine@1002 : Record 37;
      Customer@1003 : Record 18;
      OldGLAccountNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Invoice Rounding] [Sales]
      // [SCENARIO] Copy Document should fail trying to copy a line of Type "G/L Account" when "Invoice Rounding Account" is not defined
      Initialize;

      // [GIVEN] Customer with Customer Posting Group, where "Invoice Rounding Account" is blank
      LibrarySales.CreateCustomer(Customer);
      OldGLAccountNo := SetSalesInvoiceRoundingAccount(Customer."Customer Posting Group",'');

      // [GIVEN] Order "1001" with one line of Type "G/L Account"
      LibrarySales.CreateSalesHeader(
        OriginalSalesHeader,OriginalSalesHeader."Document Type"::Order,Customer."No.");
      LibrarySales.CreateSalesLine(
        SalesLine,OriginalSalesHeader,SalesLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,1);

      // [WHEN] Copy Document "1001" to new Order "1002"
      CreateSalesHeaderForCustomer(
        DestinationSalesHeader,DestinationSalesHeader."Document Type"::Order,OriginalSalesHeader."Sell-to Customer No.");
      ASSERTERROR
        RunCopySalesDoc(
          OriginalSalesHeader."No.",DestinationSalesHeader,
          MapperSalesHeaders(OriginalSalesHeader."Document Type"),FALSE,FALSE);

      // [THEN] Error message is thrown: "Invoice Rounding Account" must have a value
      Assert.ExpectedError(InvoiceRoundingAccountErr);

      // Tear Down
      SetSalesInvoiceRoundingAccount(Customer."Customer Posting Group",OldGLAccountNo);
    END;

    [Test]
    PROCEDURE CopySalesOrdWithBlankInvRndAcc@152();
    VAR
      OriginalSalesHeader@1007 : Record 36;
      DestinationSalesHeader@1006 : Record 36;
      SalesLine@1005 : Record 37;
      Customer@1004 : Record 18;
      OldGLAccountNo@1000 : Code[20];
    BEGIN
      // [FEATURE] [Invoice Rounding] [Sales]
      // [SCENARIO] Copy Document should copy a line of Type "G/L Account" and blank "No." when "Invoice Rounding Account" is not defined
      Initialize;

      // [GIVEN] Customer with Customer Posting Group, where "Invoice Rounding Account" is blank
      LibrarySales.CreateCustomer(Customer);
      OldGLAccountNo := SetSalesInvoiceRoundingAccount(Customer."Customer Posting Group",'');

      // [GIVEN] Order "1001" with one line of Type "G/L Account", where "No." is blank
      LibrarySales.CreateSalesHeader(
        OriginalSalesHeader,OriginalSalesHeader."Document Type"::Order,Customer."No.");
      LibrarySales.CreateSalesLine(SalesLine,OriginalSalesHeader,SalesLine.Type::"G/L Account",'',0);
      SalesLine."No." := '';
      SalesLine.MODIFY;

      // [WHEN] Copy Document "1001" to new Order "1002"
      CreateSalesHeaderForCustomer(
        DestinationSalesHeader,DestinationSalesHeader."Document Type"::Order,OriginalSalesHeader."Sell-to Customer No.");
      RunCopySalesDoc(
        OriginalSalesHeader."No.",DestinationSalesHeader,
        MapperSalesHeaders(OriginalSalesHeader."Document Type"),FALSE,FALSE);

      // [THEN] One line is copied
      SalesLine.SETRANGE("Document Type",DestinationSalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",DestinationSalesHeader."No.");
      Assert.AreEqual(1,SalesLine.COUNT,OneLineShouldBeCopiedErr);
      SalesLine.FINDFIRST;
      SalesLine.TESTFIELD("No.",'');

      // Tear Down
      SetSalesInvoiceRoundingAccount(Customer."Customer Posting Group",OldGLAccountNo);
    END;

    [Test]
    PROCEDURE CopySalesOrd@19();
    VAR
      OriginalSalesHeader@1000 : Record 36;
      DestinationSalesHeader@1001 : Record 36;
      OriginalDocType@1002 : Option;
      DestinationDocType@1003 : Option;
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO] Sales Document is copied with options CopyHeader = FALSE and RecalculateLine = FALSE
      Initialize;

      DestinationDocType := LibraryRandom.RandInt(6) - 1;
      OriginalDocType := LibraryRandom.RandInt(6) - 1;

      CreateOneItemSalesDoc(OriginalSalesHeader,OriginalDocType);

      // If Copy Sales Document is ran with IncludeHeader=False is mandatory to have the same customer in original and destination doc.
      CreateSalesHeaderForCustomer(DestinationSalesHeader,DestinationDocType,OriginalSalesHeader."Sell-to Customer No.");

      // 2. Exercise
      RunCopySalesDoc(
        OriginalSalesHeader."No.",DestinationSalesHeader,
        MapperSalesHeaders(OriginalSalesHeader."Document Type"),FALSE,FALSE);

      // 3. Validation
      // Validate the line is price is the same as in original document because recalculate lines was not enabled.
      DestinationSalesHeader.GET(DestinationSalesHeader."Document Type",DestinationSalesHeader."No.");
      VerifySalesLinesAreEqual(OriginalSalesHeader,DestinationSalesHeader);
    END;

    [Test]
    PROCEDURE CopyPostedSalesOrderToDoc@15();
    VAR
      SalesHeader@1000 : Record 36;
      SalesInvHeader@1003 : Record 112;
      SalesInvLine@1001 : Record 113;
      DestinationSalesHeader@1004 : Record 36;
    BEGIN
      // [FEATURE] [Sales] [Extended Text]
      // [SCENARIO 375365] Extended text lines should be copied to Document from Posted Sales Order preserving the original order.
      Initialize;

      // [GIVEN] Posted Sales Order with 2 lines of extended text divided by an empty line.
      CreateSalesDocWithExtLines(SalesHeader,SalesHeader."Document Type"::Order);
      SetSalesInvoiceRoundingAccount(SalesHeader."Customer Posting Group",LibraryERM.CreateGLAccountWithSalesSetup);
      SalesInvHeader.GET(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));

      // [WHEN] Copy Sales Document.
      CreateSalesHeaderForCustomer(
        DestinationSalesHeader,DestinationSalesHeader."Document Type"::Invoice,SalesHeader."Sell-to Customer No.");
      RunCopySalesDoc(
        SalesInvHeader."No.",DestinationSalesHeader,SalesDocType::"Posted Invoice",FALSE,FALSE);

      // [THEN] Copied Sales Document gets 2 lines of extended text divided by an empty line.
      SalesInvLine.SETRANGE("Document No.",SalesInvHeader."No.");
      VerifyCopiedSalesLines(
        SalesInvLine,SalesInvLine.FIELDNO(Type),SalesInvLine.FIELDNO(Description),
        DestinationSalesHeader."Document Type",DestinationSalesHeader."No.");
    END;

    [Test]
    PROCEDURE CopyShippedSalesOrderToDoc@47();
    VAR
      SalesHeader@1000 : Record 36;
      SalesShipmentHeader@1003 : Record 110;
      SalesShipmentLine@1001 : Record 111;
      DestinationSalesHeader@1004 : Record 36;
    BEGIN
      // [FEATURE] [Sales] [Extended Text]
      // [SCENARIO 375365] Extended text lines should be copied to Document from Shipped Sales Order preserving the original order.
      Initialize;

      // [GIVEN] Shipped Sales Order with 2 lines of extended text divided by an empty line.
      CreateSalesDocWithExtLines(SalesHeader,SalesHeader."Document Type"::Order);
      SalesShipmentHeader.GET(LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE));

      // [WHEN] Copy Sales Document.
      CreateSalesHeaderForCustomer(
        DestinationSalesHeader,DestinationSalesHeader."Document Type"::Invoice,SalesHeader."Sell-to Customer No.");
      RunCopySalesDoc(
        SalesShipmentHeader."No.",DestinationSalesHeader,SalesDocType::"Posted Shipment",FALSE,FALSE);

      // [THEN] Copied Sales Document gets 2 lines of extended text divided by an empty line.
      SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.");
      VerifyCopiedSalesLines(
        SalesShipmentLine,SalesShipmentLine.FIELDNO(Type),SalesShipmentLine.FIELDNO(Description),
        DestinationSalesHeader."Document Type",DestinationSalesHeader."No.");
    END;

    [Test]
    PROCEDURE CopyPostedSalesCrMToDoc@54();
    VAR
      SalesHeader@1000 : Record 36;
      SalesCrMemoHeader@1003 : Record 114;
      SalesCrMemoLine@1001 : Record 115;
      DestinationSalesHeader@1004 : Record 36;
    BEGIN
      // [FEATURE] [Sales] [Extended Text]
      // [SCENARIO 375365] Extended text lines should be copied to Document from Posted Sales Credit Memo preserving the original order.
      Initialize;

      // [GIVEN] Posted Sales Credit Memo with 2 lines of extended text divided by an empty line.
      CreateSalesDocWithExtLines(SalesHeader,SalesHeader."Document Type"::"Credit Memo");
      SetSalesInvoiceRoundingAccount(SalesHeader."Customer Posting Group",LibraryERM.CreateGLAccountWithSalesSetup);
      SalesCrMemoHeader.GET(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));

      // [WHEN] Copy Sales Document.
      CreateSalesHeaderForCustomer(
        DestinationSalesHeader,DestinationSalesHeader."Document Type"::Invoice,SalesHeader."Sell-to Customer No.");
      RunCopySalesDoc(
        SalesCrMemoHeader."No.",DestinationSalesHeader,SalesDocType::"Posted Credit Memo",FALSE,FALSE);

      // [THEN] Copied Sales Document gets 2 lines of extended text divided by an empty line.
      SalesCrMemoLine.SETRANGE("Document No.",SalesCrMemoHeader."No.");
      VerifyCopiedSalesLines(
        SalesCrMemoLine,SalesCrMemoLine.FIELDNO(Type),SalesCrMemoLine.FIELDNO(Description),
        DestinationSalesHeader."Document Type",DestinationSalesHeader."No.");
    END;

    [Test]
    PROCEDURE CopyPostedSalesReturnOrderToDoc@60();
    VAR
      SalesHeader@1000 : Record 36;
      ReturnReceiptHeader@1003 : Record 6660;
      ReturnReceiptLine@1001 : Record 6661;
      DestinationSalesHeader@1004 : Record 36;
    BEGIN
      // [FEATURE] [Sales] [Extended Text]
      // [SCENARIO 375365] Extended text lines should be copied to Document from Posted Sales Return Order preserving the original order.
      Initialize;

      // [GIVEN] Posted Sales Return Order with 2 lines of extended text divided by an empty line.
      CreateSalesDocWithExtLines(SalesHeader,SalesHeader."Document Type"::"Return Order");
      ReturnReceiptHeader.GET(LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE));

      // [WHEN] Copy Sales Document.
      CreateSalesHeaderForCustomer(
        DestinationSalesHeader,DestinationSalesHeader."Document Type"::Invoice,SalesHeader."Sell-to Customer No.");
      RunCopySalesDoc(
        ReturnReceiptHeader."No.",DestinationSalesHeader,SalesDocType::"Posted Return Receipt",FALSE,FALSE);

      // [THEN] Copied Sales Document gets 2 lines of extended text divided by an empty line.
      ReturnReceiptLine.SETRANGE("Document No.",ReturnReceiptHeader."No.");
      VerifyCopiedSalesLines(
        ReturnReceiptLine,ReturnReceiptLine.FIELDNO(Type),ReturnReceiptLine.FIELDNO(Description),
        DestinationSalesHeader."Document Type",DestinationSalesHeader."No.");
    END;

    [Test]
    PROCEDURE CopyPostedPurchaseOrderToDoc@82();
    VAR
      PurchHeader@1000 : Record 38;
      PurchInvHeader@1003 : Record 122;
      PurchInvLine@1001 : Record 123;
      DestinationPurchHeader@1004 : Record 38;
    BEGIN
      // [FEATURE] [Purchase] [Extended Text]
      // [SCENARIO 375365] Extended text lines should be copied to Document from Posted Purchase Order preserving the original order.
      Initialize;

      // [GIVEN] Posted Purchase Order with 2 lines with extended text divided by an empty line.
      CreatePurchDocWithExtLines(PurchHeader,PurchHeader."Document Type"::Order);
      PurchInvHeader.GET(LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE));

      // [WHEN] Copy Purchase Document.
      CreatePurchHeaderForVendor(
        DestinationPurchHeader,DestinationPurchHeader."Document Type"::Invoice,PurchHeader."Buy-from Vendor No.");
      RunCopyPurchaseDoc(
        PurchInvHeader."No.",DestinationPurchHeader,PurchDocType::"Posted Invoice",FALSE,FALSE);

      // [THEN] Copied Purchase Document gets 2 lines of extended text divided by an empty line.
      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
      VerifyCopiedPurchLines(
        PurchInvLine,PurchInvLine.FIELDNO(Type),PurchInvLine.FIELDNO(Description),
        DestinationPurchHeader."Document Type",DestinationPurchHeader."No.");
    END;

    [Test]
    PROCEDURE CopyReceiptPurchaseOrderToDoc@81();
    VAR
      PurchHeader@1006 : Record 38;
      PurchRcptHeader@1004 : Record 120;
      PurchRcptLine@1000 : Record 121;
      DestinationPurchHeader@1003 : Record 38;
    BEGIN
      // [FEATURE] [Purchase] [Extended Text]
      // [SCENARIO 375365] Extended text lines should be copied to Document from Receipt Purchase Order preserving the original order.
      Initialize;

      // [GIVEN] Receipt Purchase Order with 2 lines with extended text divided by an empty line.
      CreatePurchDocWithExtLines(PurchHeader,PurchHeader."Document Type"::Order);
      PurchRcptHeader.GET(LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,FALSE));

      // [WHEN] Copy Purchase Document.
      CreatePurchHeaderForVendor(
        DestinationPurchHeader,DestinationPurchHeader."Document Type"::Invoice,PurchHeader."Buy-from Vendor No.");
      RunCopyPurchaseDoc(
        PurchRcptHeader."No.",DestinationPurchHeader,PurchDocType::"Posted Receipt",FALSE,FALSE);

      // [THEN] Copied Purchase Document gets 2 lines of extended text divided by an empty line.
      PurchRcptLine.SETRANGE("Document No.",PurchRcptHeader."No.");
      VerifyCopiedPurchLines(
        PurchRcptLine,PurchRcptLine.FIELDNO(Type),PurchRcptLine.FIELDNO(Description),
        DestinationPurchHeader."Document Type",DestinationPurchHeader."No.");
    END;

    [Test]
    PROCEDURE CopyPostedPurchaseCrMToDoc@80();
    VAR
      PurchHeader@1006 : Record 38;
      PurchCrMemoHdr@1004 : Record 124;
      PurchCrMemoLine@1000 : Record 125;
      DestinationPurchHeader@1003 : Record 38;
    BEGIN
      // [FEATURE] [Purchase] [Extended Text]
      // [SCENARIO 375365] Extended text lines should be copied to Document from Posted Purchase Credit Memo preserving the original order.
      Initialize;

      // [GIVEN] Posted Purchase Credit Memo with 2 lines with extended text divided by an empty line.
      CreatePurchDocWithExtLines(PurchHeader,PurchHeader."Document Type"::"Credit Memo");
      PurchCrMemoHdr.GET(LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE));

      // [WHEN] Copy Purchase Document.
      CreatePurchHeaderForVendor(
        DestinationPurchHeader,DestinationPurchHeader."Document Type"::Invoice,PurchHeader."Buy-from Vendor No.");
      RunCopyPurchaseDoc(
        PurchCrMemoHdr."No.",DestinationPurchHeader,PurchDocType::"Posted Credit Memo",FALSE,FALSE);

      // [THEN] Copied Purchase Document gets 2 lines of extended text divided by an empty line.
      PurchCrMemoLine.SETRANGE("Document No.",PurchCrMemoHdr."No.");
      VerifyCopiedPurchLines(
        PurchCrMemoLine,PurchCrMemoLine.FIELDNO(Type),PurchCrMemoLine.FIELDNO(Description),
        DestinationPurchHeader."Document Type",DestinationPurchHeader."No.");
    END;

    [Test]
    PROCEDURE CopyPostedPurchaseReturnOrderToDoc@79();
    VAR
      PurchHeader@1006 : Record 38;
      ReturnShipmentHeader@1004 : Record 6650;
      ReturnShipmentLine@1000 : Record 6651;
      DestinationPurchHeader@1003 : Record 38;
    BEGIN
      // [FEATURE] [Purchase] [Extended Text]
      // [SCENARIO 375365] Extended text lines should be copied to Document from Posted Purchase Return Order preserving the original order.
      Initialize;

      // [GIVEN] Posted Purchase Return Order with 2 lines with extended text divided by an empty line.
      CreatePurchDocWithExtLines(PurchHeader,PurchHeader."Document Type"::"Return Order");
      ReturnShipmentHeader.GET(LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,FALSE));

      // [WHEN] Copy Purchase Document.
      CreatePurchHeaderForVendor(
        DestinationPurchHeader,DestinationPurchHeader."Document Type"::Invoice,PurchHeader."Buy-from Vendor No.");
      RunCopyPurchaseDoc(
        ReturnShipmentHeader."No.",DestinationPurchHeader,PurchDocType::"Posted Return Shipment",FALSE,FALSE);

      // [THEN] Copied Purchase Document gets 2 lines of extended text divided by an empty line.
      ReturnShipmentLine.SETRANGE("Document No.",ReturnShipmentHeader."No.");
      VerifyCopiedPurchLines(
        ReturnShipmentLine,ReturnShipmentLine.FIELDNO(Type),ReturnShipmentLine.FIELDNO(Description),
        DestinationPurchHeader."Document Type",DestinationPurchHeader."No.");
    END;

    [Test]
    PROCEDURE CopyPostedSalesInvoiceDescriptionItemLine@37();
    VAR
      SalesHeader@1003 : Record 36;
      CustomerNo@1002 : Code[20];
      PostedDocNo@1001 : Code[20];
      Description@1000 : Text[50];
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 378530] Copy posted Sales Invoice description line with Type = Item
      Initialize;

      // [GIVEN] Posted Sales Order with two lines:
      // [GIVEN] Line1: Type = "Item", No="1000", Description = "Bicycle"
      // [GIVEN] Line2: Type = "Item", No="", Description = "Description Line"
      PostedDocNo := CreatePostSalesDocWithItemDescriptionLine(CustomerNo,Description);
      // [GIVEN] Create a new Sales Order.
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);

      // [WHEN] Run CopyDocument. Use posted Invoice. "Include Header" = TRUE, "Recalculate Lines" = FALSE
      RunCopySalesDoc(PostedDocNo,SalesHeader,SalesDocType::"Posted Invoice",TRUE,FALSE);

      // [THEN] Item description line has been copied: Type = "", No="", Description = "Description Line"
      VerifySalesDescriptionLineExists(SalesHeader,Description);
    END;

    [Test]
    PROCEDURE CopyPostedPurchInvoiceDescriptionItemLine@45();
    VAR
      PurchaseHeader@1003 : Record 38;
      VendorNo@1000 : Code[20];
      PostedDocNo@1002 : Code[20];
      Description@1001 : Text[50];
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 378530] Copy posted Purchase Invoice description line with Type = Item
      Initialize;

      // [GIVEN] Posted Purchase Order with two lines:
      // [GIVEN] Line1: Type = "Item", No="1000", Description = "Bicycle"
      // [GIVEN] Line2: Type = "Item", No="", Description = "Description Line"
      PostedDocNo := CreatePostPurchDocWithItemDescriptionLine(VendorNo,Description);
      // [GIVEN] Create a new Purchase Order.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);

      // [WHEN] Run CopyDocument. Use posted Invoice. "Include Header" = TRUE, "Recalculate Lines" = FALSE
      RunCopyPurchaseDoc(PostedDocNo,PurchaseHeader,PurchDocType::"Posted Invoice",TRUE,FALSE);

      // [THEN] Item description line has been copied: Type = "", No="", Description = "Description Line"
      VerifyPurchDescriptionLineExists(PurchaseHeader,Description);
    END;

    [Test]
    PROCEDURE ShiptoAddrOfCompanyAfterCopySalesInvToCrMemo@36();
    VAR
      SalesHeader@1001 : Record 36;
      PostedSalesDocNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 381712] Ship-to address of Credit Memo have to contains Ship-to Address of Company after copying Sales Invoice to Credit Memo
      Initialize;

      // [GIVEN] Company Information with "Ship-to Address" = "SA"
      UpdateShiptoAddrOfCompany;

      // [GIVEN] Posted Sales Invoice "PSI"
      PostedSalesDocNo := CreatePostSalesDocWithShiptoAddr(SalesHeader."Document Type"::Invoice,LibrarySales.CreateCustomerNo,'');

      // [GIVEN] New Credit Memo "CM"
      CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo");

      // [WHEN] Run copy sales document - "PSI" -> "CM"
      RunCopySalesDoc(PostedSalesDocNo,SalesHeader,SalesDocType::"Posted Invoice",TRUE,FALSE);

      // [THEN] Ship-to address fields of "CM" are equal to "SA"
      VerifyShiptoAddressInSalesDocToCompanyInfo(SalesHeader);
    END;

    [Test]
    PROCEDURE ShiptoAddrOfCustomerAfterCopyCrMemoToSalesInv@119();
    VAR
      Customer@1002 : Record 18;
      SalesHeader@1001 : Record 36;
      PostedSalesDocNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 381712] Ship-to address of Sales Invoice have to contains Address of Customer after copying Credit Memo to Sales Invoice
      Initialize;

      // [GIVEN] Customer with address = "A"
      CreateCustomerWithShiptoAddr(Customer);

      // [GIVEN] Company Info with Ship-to Address
      UpdateShiptoAddrOfCompany;

      // [GIVEN] Posted Sales Credit Memo = "PCM"
      PostedSalesDocNo := CreatePostSalesDocWithShiptoAddr(SalesHeader."Document Type"::"Credit Memo",Customer."No.",'');

      // [GIVEN] New Sales Invoice = "SI"
      CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice);

      // [WHEN] Run copy sales document - "PCM" -> "SI"
      RunCopySalesDoc(PostedSalesDocNo,SalesHeader,SalesDocType::"Posted Credit Memo",TRUE,FALSE);

      // [THEN] Ship-to address fields of "SI" are equal to "A"
      VerifyShiptoAddressSalesDocToCustomerAddress(SalesHeader,Customer."No.");
    END;

    [Test]
    PROCEDURE ShiptoAddrSalesInvAfterPostInvCopyCrMemo@192();
    VAR
      Customer@1000 : Record 18;
      SalesHeader@1001 : Record 36;
      ShiptoAddressCode@1002 : Code[10];
      PostedSalesDocNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 381712] Ship-to address of Sales Invoice have to contains Ship-to address original invoice after copying from credit memo
      Initialize;

      // [GIVEN] Customer with "Ship-to Address" = "SA"
      ShiptoAddressCode := CreateCustomerWithShiptoAddr(Customer);

      // [GIVEN] Posted sales invoice "PSI1" with "Ship-to Code" = "SA"
      PostedSalesDocNo := CreatePostSalesDocWithShiptoAddr(SalesHeader."Document Type"::Invoice,Customer."No.",ShiptoAddressCode);

      // [GIVEN] Copied and posted credit memo "PCM" from invoice "PSI1"; "PSI1" -> "PCM"
      CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo");
      RunCopySalesDoc(PostedSalesDocNo,SalesHeader,SalesDocType::"Posted Invoice",TRUE,FALSE);
      SalesHeader.GET(SalesHeader."Document Type"::"Credit Memo",SalesHeader."No.");
      PostedSalesDocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [GIVEN] New sales invoice "SI"
      CLEAR(SalesHeader);
      CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice);

      // [WHEN] Run copy sales document - "PCM" -> "SI"
      RunCopySalesDoc(PostedSalesDocNo,SalesHeader,SalesDocType::"Posted Credit Memo",TRUE,FALSE);

      // [THEN] "Ship-to Code" and Ship-to Address field of "SI" are equal to "SA"
      VerifyShiptoAddressSalesDocToShiptoAddress(SalesHeader,Customer."No.");
    END;

    [Test]
    PROCEDURE ShiptoAddrSalesInvAfterPostInvWithoutShiptoAddrCopyCrMemo@106();
    VAR
      Customer@1000 : Record 18;
      SalesHeader@1001 : Record 36;
      PostedSalesDocNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Sales]
      // [SCENARIO 381712] Ship-to address of Sales Invoice have to contains address of Customer if Ship-to address of original invoice is empty after copying from credit memo
      Initialize;

      // [GIVEN] Customer with "Ship-to Address" = "SA" and Address = "A"
      CreateCustomerWithShiptoAddr(Customer);

      // [GIVEN] Posted sales invoice "PSI1" with "Ship-to Code" = <empty>
      PostedSalesDocNo := CreatePostSalesDocWithShiptoAddr(SalesHeader."Document Type"::Invoice,Customer."No.",'');

      // [GIVEN] Copied and posted credit memo "PCM" from invoice "PSI1"; "PSI1" -> "PCM"
      CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo");
      RunCopySalesDoc(PostedSalesDocNo,SalesHeader,SalesDocType::"Posted Invoice",TRUE,FALSE);
      SalesHeader.GET(SalesHeader."Document Type"::"Credit Memo",SalesHeader."No.");
      PostedSalesDocNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // [GIVEN] New sales invoice "SI"
      CLEAR(SalesHeader);
      CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Invoice);

      // [WHEN] Run copy sales document - "PCM" -> "SI"
      RunCopySalesDoc(PostedSalesDocNo,SalesHeader,SalesDocType::"Posted Credit Memo",TRUE,FALSE);

      // [THEN] "Ship-to Code" and Ship-to Address field of "SI" are equal to "A"
      VerifyShiptoAddressSalesDocToCustomerAddress(SalesHeader,Customer."No.");
    END;

    [Test]
    PROCEDURE SalesCrMemo_GetPstdDocLinesToRev_TwoDocs_GLAccounts@97();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1006 : Record 37;
      CustomerNo@1000 : Code[20];
      GLAccountNo@1002 : ARRAY [2] OF Code[20];
      InvoiceNo@1003 : ARRAY [2] OF Code[20];
    BEGIN
      // [FEATURE] [Sales] [Credit Memo] [Get Posted Document Lines to Reverse] [G/L Account]
      // [SCENARIO 382275] Sales Credit Memo "Get Posted Document Lines to Reverse" from two Invoices (G/L Account)
      Initialize;
      CustomerNo := LibrarySales.CreateCustomerNo;

      // [GIVEN] Posted sales invoice "I1" with line "Type" = "G/L Account", "No." = "GLAcc1"
      // [GIVEN] Posted sales invoice "I2" with line "Type" = "G/L Account", "No." = "GLAcc2"
      CreatePostSalesOrderWithGLAccount(InvoiceNo[1],GLAccountNo[1],CustomerNo);
      CreatePostSalesOrderWithGLAccount(InvoiceNo[2],GLAccountNo[2],CustomerNo);
      // [GIVEN] A new sales credit memo
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustomerNo);

      // [WHEN] Perform "Get Posted Document Lines to Reverse" action (select all lines, press OK)
      CopyPostedSalesInvoiceLines(SalesHeader);

      // [THEN] There are 4 lines have been created in sales credit memo:
      // [THEN] Line1: "Type" = "", "No." = "", "Description" = "Invoice No. I1"
      // [THEN] Line2: "Type" = "G/L Account", "No." = "GLAcc1"
      // [THEN] Line3: "Type" = "", "No." = "", "Description" = "Invoice No. I2"
      // [THEN] Line4: "Type" = "G/L Account", "No." = "GLAcc2"
      FindFirstLineOfSalesDocument(SalesHeader,SalesLine);
      Assert.RecordCount(SalesLine,4);
      VerifySalesInvoiceDescription(SalesLine,InvoiceNo[1],GLAccountNo[1]);
      VerifySalesInvoiceDescription(SalesLine,InvoiceNo[2],GLAccountNo[2]);
    END;

    [Test]
    PROCEDURE SalesCrMemo_GetPstdDocLinesToRev_TwoDocs_Items@107();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1006 : Record 37;
      CustomerNo@1000 : Code[20];
      ItemNo@1002 : ARRAY [2] OF Code[20];
      InvoiceNo@1003 : ARRAY [2] OF Code[20];
      ShipmentNo@1004 : ARRAY [2] OF Code[20];
    BEGIN
      // [FEATURE] [Sales] [Credit Memo] [Get Posted Document Lines to Reverse] [Item]
      // [SCENARIO 382275] Sales Credit Memo "Get Posted Document Lines to Reverse" from two Invoices (Item)
      Initialize;
      CustomerNo := LibrarySales.CreateCustomerNo;

      // [GIVEN] Posted sales invoice "I1" and shipment "S1" with line "Type" = "Item", "No." = "ITEM1"
      // [GIVEN] Posted sales invoice "I2" and shipment "S2" with line "Type" = "Item", "No." = "ITEM2"
      CreatePostSalesOrderWithItem(InvoiceNo[1],ShipmentNo[1],ItemNo[1],CustomerNo);
      CreatePostSalesOrderWithItem(InvoiceNo[2],ShipmentNo[2],ItemNo[2],CustomerNo);
      // [GIVEN] A new sales credit mMemo
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustomerNo);

      // [WHEN] Perform "Get Posted Document Lines to Reverse" action (select all lines, press OK)
      CopyPostedSalesInvoiceLines(SalesHeader);

      // [THEN] There are 6 lines have been created in sales credit memo:
      // [THEN] Line1: "Type" = "", "No." = "", "Description" = "Invoice No. I1"
      // [THEN] Line2: "Type" = "", "No." = "", "Description" = "Inv. No. I1 - Shpt. No. S1"
      // [THEN] Line3: "Type" = "Item", "No." = "ITEM1"
      // [THEN] Line4: "Type" = "", "No." = "", "Description" = "Invoice No. I2"
      // [THEN] Line5: "Type" = "", "No." = "", "Description" = "Inv. No. I2 - Shpt. No. S2"
      // [THEN] Line6: "Type" = "Item", "No." = "ITEM2"
      FindFirstLineOfSalesDocument(SalesHeader,SalesLine);
      Assert.RecordCount(SalesLine,6);
      VerifySalesInvoiceShipmentDescription(SalesLine,InvoiceNo[1],ShipmentNo[1],ItemNo[1]);
      VerifySalesInvoiceShipmentDescription(SalesLine,InvoiceNo[2],ShipmentNo[2],ItemNo[2]);
    END;

    [Test]
    PROCEDURE SalesCrMemo_GetPstdDocLinesToRev_TwoDocs_GLAccountItem@65();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1006 : Record 37;
      CustomerNo@1000 : Code[20];
      GLAccountNo@1002 : Code[20];
      ItemNo@1005 : Code[20];
      InvoiceNo@1003 : ARRAY [2] OF Code[20];
      ShipmentNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Sales] [Credit Memo] [Get Posted Document Lines to Reverse] [G/L Account] [Item]
      // [SCENARIO 382275] Sales Credit Memo "Get Posted Document Lines to Reverse" from two Invoices (G/L Account, Item)
      Initialize;
      CustomerNo := LibrarySales.CreateCustomerNo;

      // [GIVEN] Posted sales invoice "I1" with line "Type" = "G/L Account", "No." = "GLAcc"
      // [GIVEN] Posted sales invoice "I2" and shipment "S2" with line "Type" = "Item", "No." = "ITEM"
      CreatePostSalesOrderWithGLAccount(InvoiceNo[1],GLAccountNo,CustomerNo);
      CreatePostSalesOrderWithItem(InvoiceNo[2],ShipmentNo,ItemNo,CustomerNo);
      // [GIVEN] A new sales credit memo
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustomerNo);

      // [WHEN] Perform "Get Posted Document Lines to Reverse" action (select all lines, press OK)
      CopyPostedSalesInvoiceLines(SalesHeader);

      // [THEN] There are 5 lines have been created in sales credit memo:
      // [THEN] Line1: "Type" = "", "No." = "", "Description" = "Invoice No. I1"
      // [THEN] Line2: "Type" = "G/L Account", "No." = "GLAcc"
      // [THEN] Line3: "Type" = "", "No." = "", "Description" = "Invoice No. I2"
      // [THEN] Line4: "Type" = "", "No." = "", "Description" = "Inv. No. I2 - Shpt. No. S2"
      // [THEN] Line5: "Type" = "Item", "No." = "ITEM"
      FindFirstLineOfSalesDocument(SalesHeader,SalesLine);
      Assert.RecordCount(SalesLine,5);
      VerifySalesInvoiceDescription(SalesLine,InvoiceNo[1],GLAccountNo);
      VerifySalesInvoiceShipmentDescription(SalesLine,InvoiceNo[2],ShipmentNo,ItemNo);
    END;

    [Test]
    PROCEDURE SalesCrMemo_GetPstdDocLinesToRev_TwoDocs_ItemGLAccount@61();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1006 : Record 37;
      CustomerNo@1000 : Code[20];
      GLAccountNo@1002 : Code[20];
      ItemNo@1005 : Code[20];
      InvoiceNo@1003 : ARRAY [2] OF Code[20];
      ShipmentNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Sales] [Credit Memo] [Get Posted Document Lines to Reverse] [G/L Account] [Item]
      // [SCENARIO 382275] Sales Credit Memo "Get Posted Document Lines to Reverse" from two Invoices (Item, G/L Account)
      Initialize;
      CustomerNo := LibrarySales.CreateCustomerNo;

      // [GIVEN] Posted sales invoice "I1" and shipment "S1" with line "Type" = "Item", "No." = "ITEM"
      // [GIVEN] Posted sales invoice "I2" with line "Type" = "G/L Account", "No." = "GLAcc"
      CreatePostSalesOrderWithItem(InvoiceNo[1],ShipmentNo,ItemNo,CustomerNo);
      CreatePostSalesOrderWithGLAccount(InvoiceNo[2],GLAccountNo,CustomerNo);
      // [GIVEN] A new sales credit memo
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustomerNo);

      // [WHEN] Perform "Get Posted Document Lines to Reverse" action (select all lines, press OK)
      CopyPostedSalesInvoiceLines(SalesHeader);

      // [THEN] There are 5 lines have been created in sales credit memo:
      // [THEN] Line1: "Type" = "", "No." = "", "Description" = "Invoice No. I1"
      // [THEN] Line2: "Type" = "", "No." = "", "Description" = "Inv. No. I1 - Shpt. No. S1"
      // [THEN] Line3: "Type" = "Item", "No." = "ITEM"
      // [THEN] Line4: "Type" = "", "No." = "", "Description" = "Invoice No. I2"
      // [THEN] Line5: "Type" = "G/L Account", "No." = "GLAcc"
      FindFirstLineOfSalesDocument(SalesHeader,SalesLine);
      Assert.RecordCount(SalesLine,5);
      VerifySalesInvoiceShipmentDescription(SalesLine,InvoiceNo[1],ShipmentNo,ItemNo);
      VerifySalesInvoiceDescription(SalesLine,InvoiceNo[2],GLAccountNo);
    END;

    [Test]
    PROCEDURE SalesCrMemo_GetPstdDocLinesToRev_ThreeDocs_GLAccountItemGLAccount@69();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1006 : Record 37;
      CustomerNo@1000 : Code[20];
      GLAccountNo@1002 : ARRAY [2] OF Code[20];
      ItemNo@1005 : Code[20];
      InvoiceNo@1003 : ARRAY [3] OF Code[20];
      ShipmentNo@1004 : Code[20];
    BEGIN
      // [FEATURE] [Sales] [Credit Memo] [Get Posted Document Lines to Reverse] [G/L Account] [Item]
      // [SCENARIO 382275] Sales Credit Memo "Get Posted Document Lines to Reverse" from three Invoices (G/L Account, Item, G/L Account)
      Initialize;
      CustomerNo := LibrarySales.CreateCustomerNo;

      // [GIVEN] Posted sales invoice "I1" with line "Type" = "G/L Account", "No." = "GLAcc1"
      // [GIVEN] Posted sales invoice "I2" and shipment "S1" with line "Type" = "Item", "No." = "ITEM"
      // [GIVEN] Posted sales invoice "I3" with line "Type" = "G/L Account", "No." = "GLAcc2"
      CreatePostSalesOrderWithGLAccount(InvoiceNo[1],GLAccountNo[1],CustomerNo);
      CreatePostSalesOrderWithItem(InvoiceNo[2],ShipmentNo,ItemNo,CustomerNo);
      CreatePostSalesOrderWithGLAccount(InvoiceNo[3],GLAccountNo[2],CustomerNo);
      // [GIVEN] A new sales credit memo
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustomerNo);

      // [WHEN] Perform "Get Posted Document Lines to Reverse" action (select all lines, press OK)
      CopyPostedSalesInvoiceLines(SalesHeader);

      // [THEN] There are 7 lines have been created in sales credit memo:
      // [THEN] Line1: "Type" = "", "No." = "", "Description" = "Invoice No. I1"
      // [THEN] Line2: "Type" = "G/L Account", "No." = "GLAcc1"
      // [THEN] Line3: "Type" = "", "No." = "", "Description" = "Invoice No. I2"
      // [THEN] Line4: "Type" = "", "No." = "", "Description" = "Inv. No. I2 - Shpt. No. S1"
      // [THEN] Line5: "Type" = "Item", "No." = "ITEM"
      // [THEN] Line6: "Type" = "", "No." = "", "Description" = "Invoice No. I3"
      // [THEN] Line7: "Type" = "G/L Account", "No." = "GLAcc2"
      FindFirstLineOfSalesDocument(SalesHeader,SalesLine);
      Assert.RecordCount(SalesLine,7);
      VerifySalesInvoiceDescription(SalesLine,InvoiceNo[1],GLAccountNo[1]);
      VerifySalesInvoiceShipmentDescription(SalesLine,InvoiceNo[2],ShipmentNo,ItemNo);
      VerifySalesInvoiceDescription(SalesLine,InvoiceNo[3],GLAccountNo[2]);
    END;

    [Test]
    PROCEDURE SalesCrMemo_GetPstdDocLinesToRev_ThreeDocs_ItemGLAccountItem@63();
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1006 : Record 37;
      CustomerNo@1000 : Code[20];
      GLAccountNo@1002 : Code[20];
      ItemNo@1005 : ARRAY [2] OF Code[20];
      InvoiceNo@1003 : ARRAY [3] OF Code[20];
      ShipmentNo@1004 : ARRAY [2] OF Code[20];
    BEGIN
      // [FEATURE] [Sales] [Credit Memo] [Get Posted Document Lines to Reverse] [G/L Account] [Item]
      // [SCENARIO 382275] Sales Credit Memo "Get Posted Document Lines to Reverse" from three Invoices (Item, G/L Account, Item)
      Initialize;
      CustomerNo := LibrarySales.CreateCustomerNo;

      // [GIVEN] Posted sales invoice "I1" and shipment "S1" with line "Type" = "Item", "No." = "ITEM1"
      // [GIVEN] Posted sales invoice "I2" with line "Type" = "G/L Account", "No." = "GLAcc"
      // [GIVEN] Posted sales invoice "I3" and shipment "S2" with line "Type" = "Item", "No." = "ITEM2"
      CreatePostSalesOrderWithItem(InvoiceNo[1],ShipmentNo[1],ItemNo[1],CustomerNo);
      CreatePostSalesOrderWithGLAccount(InvoiceNo[2],GLAccountNo,CustomerNo);
      CreatePostSalesOrderWithItem(InvoiceNo[3],ShipmentNo[2],ItemNo[2],CustomerNo);
      // [GIVEN] A new sales credit memo
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",CustomerNo);

      // [WHEN] Perform "Get Posted Document Lines to Reverse" action (select all lines, press OK)
      CopyPostedSalesInvoiceLines(SalesHeader);

      // [THEN] There are 8 lines have been created in sales credit memo:
      // [THEN] Line1: "Type" = "", "No." = "", "Description" = "Invoice No. I1"
      // [THEN] Line2: "Type" = "", "No." = "", "Description" = "Inv. No. I1 - Shpt. No. S1"
      // [THEN] Line3: "Type" = "Item", "No." = "ITEM1"
      // [THEN] Line4: "Type" = "", "No." = "", "Description" = "Invoice No. I2"
      // [THEN] Line5: "Type" = "G/L Account", "No." = "GLAcc"
      // [THEN] Line6: "Type" = "", "No." = "", "Description" = "Invoice No. I3"
      // [THEN] Line7: "Type" = "", "No." = "", "Description" = "Inv. No. I3 - Shpt. No. S2"
      // [THEN] Line8: "Type" = "Item", "No." = "ITEM2"
      FindFirstLineOfSalesDocument(SalesHeader,SalesLine);
      Assert.RecordCount(SalesLine,8);
      VerifySalesInvoiceShipmentDescription(SalesLine,InvoiceNo[1],ShipmentNo[1],ItemNo[1]);
      VerifySalesInvoiceDescription(SalesLine,InvoiceNo[2],GLAccountNo);
      VerifySalesInvoiceShipmentDescription(SalesLine,InvoiceNo[3],ShipmentNo[2],ItemNo[2]);
    END;

    [Test]
    PROCEDURE PurchaseCrMemo_GetPstdDocLinesToRev_TwoDocs_GLAccounts@70();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1006 : Record 39;
      VendorNo@1000 : Code[20];
      GLAccountNo@1002 : ARRAY [2] OF Code[20];
      InvoiceNo@1003 : ARRAY [2] OF Code[20];
    BEGIN
      // [FEATURE] [Purchase] [Credit Memo] [Get Posted Document Lines to Reverse] [G/L Account]
      // [SCENARIO 382275] Purchase Credit Memo "Get Posted Document Lines to Reverse" from two Invoices (G/L Account)
      Initialize;
      VendorNo := LibraryPurchase.CreateVendorNo;

      // [GIVEN] Posted purchase invoice "I1" and receipt "R1" with line "Type" = "G/L Account", "No." = "GLAcc1"
      // [GIVEN] Posted purchase invoice "I2" and receipt "R2" with line "Type" = "G/L Account", "No." = "GLAcc2"
      CreatePostPurchaseOrderWithGLAccount(InvoiceNo[1],GLAccountNo[1],VendorNo);
      CreatePostPurchaseOrderWithGLAccount(InvoiceNo[2],GLAccountNo[2],VendorNo);
      // [GIVEN] A new purchase credit memo
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",VendorNo);

      // [WHEN] Perform "Get Posted Document Lines to Reverse" action (select all lines, press OK)
      CopyPostedPurchaseInvoiceLines(PurchaseHeader);

      // [THEN] There are 4 lines have been created in purchase credit memo:
      // [THEN] Line1: "Type" = "", "No." = "", "Description" = "Invoice No. I1"
      // [THEN] Line2: "Type" = "G/L Account", "No." = "GLAcc1"
      // [THEN] Line3: "Type" = "", "No." = "", "Description" = "Invoice No. I2"
      // [THEN] Line4: "Type" = "G/L Account", "No." = "GLAcc2"
      FindFirstLineOfPurchaseDocument(PurchaseHeader,PurchaseLine);
      Assert.RecordCount(PurchaseLine,4);
      VerifyPurchaseInvoiceDescription(PurchaseLine,InvoiceNo[1],GLAccountNo[1]);
      VerifyPurchaseInvoiceDescription(PurchaseLine,InvoiceNo[2],GLAccountNo[2]);
    END;

    [Test]
    PROCEDURE PurchaseCrMemo_GetPstdDocLinesToRev_TwoDocs_Items@83();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1006 : Record 39;
      VendorNo@1000 : Code[20];
      ItemNo@1002 : ARRAY [2] OF Code[20];
      InvoiceNo@1003 : ARRAY [2] OF Code[20];
      ReceiptNo@1004 : ARRAY [2] OF Code[20];
    BEGIN
      // [FEATURE] [Purchase] [Credit Memo] [Get Posted Document Lines to Reverse] [Item]
      // [SCENARIO 382275] Purchase Credit Memo "Get Posted Document Lines to Reverse" from two Invoices (Item)
      Initialize;
      VendorNo := LibraryPurchase.CreateVendorNo;

      // [GIVEN] Posted purchase invoice "I1" with line "Type" = "Item", "No." = "ITEM1"
      // [GIVEN] Posted purchase invoice "I2" with line "Type" = "Item", "No." = "ITEM2"
      CreatePostPurchaseOrderWithItem(InvoiceNo[1],ReceiptNo[1],ItemNo[1],VendorNo);
      CreatePostPurchaseOrderWithItem(InvoiceNo[2],ReceiptNo[2],ItemNo[2],VendorNo);
      // [GIVEN] A new purchase credit memo
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",VendorNo);

      // [WHEN] Perform "Get Posted Document Lines to Reverse" action (select all lines, press OK)
      CopyPostedPurchaseInvoiceLines(PurchaseHeader);

      // [THEN] There are 6 lines have been created in purchase credit memo:
      // [THEN] Line1: "Type" = "", "No." = "", "Description" = "Invoice No. I1"
      // [THEN] Line2: "Type" = "", "No." = "", "Description" = "Inv. No. I1 - Rcpt. No. R1"
      // [THEN] Line3: "Type" = "Item", "No." = "ITEM1"
      // [THEN] Line4: "Type" = "", "No." = "", "Description" = "Invoice No. I2"
      // [THEN] Line5: "Type" = "", "No." = "", "Description" = "Inv. No. I2 - Rcpt. No. R2"
      // [THEN] Line6: "Type" = "Item", "No." = "ITEM2"
      FindFirstLineOfPurchaseDocument(PurchaseHeader,PurchaseLine);
      Assert.RecordCount(PurchaseLine,6);
      VerifyPurchaseInvoiceReceiptDescription(PurchaseLine,InvoiceNo[1],ReceiptNo[1],ItemNo[1]);
      VerifyPurchaseInvoiceReceiptDescription(PurchaseLine,InvoiceNo[2],ReceiptNo[2],ItemNo[2]);
    END;

    [Test]
    PROCEDURE PurchaseCrMemo_GetPstdDocLinesToRev_TwoDocs_GLAccountItem@67();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1006 : Record 39;
      VendorNo@1000 : Code[20];
      GLAccountNo@1002 : Code[20];
      ItemNo@1004 : Code[20];
      InvoiceNo@1003 : ARRAY [2] OF Code[20];
      ReceiptNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Purchase] [Credit Memo] [Get Posted Document Lines to Reverse] [G/L Account] [Item]
      // [SCENARIO 382275] Purchase Credit Memo "Get Posted Document Lines to Reverse" from two Invoices (G/L Account, Item)
      Initialize;
      VendorNo := LibraryPurchase.CreateVendorNo;

      // [GIVEN] Posted purchase invoice "I1" with line "Type" = "G/L Account", "No." = "GLAcc"
      // [GIVEN] Posted purchase invoice "I2" and receipt "R1" with line "Type" = "Item", "No." = "ITEM"
      CreatePostPurchaseOrderWithGLAccount(InvoiceNo[1],GLAccountNo,VendorNo);
      CreatePostPurchaseOrderWithItem(InvoiceNo[2],ReceiptNo,ItemNo,VendorNo);
      // [GIVEN] A new purchase credit memo
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",VendorNo);

      // [WHEN] Perform "Get Posted Document Lines to Reverse" action (select all lines, press OK)
      CopyPostedPurchaseInvoiceLines(PurchaseHeader);

      // [THEN] There are 5 lines have been created in purchase credit memo:
      // [THEN] Line1: "Type" = "", "No." = "", "Description" = "Invoice No. I1"
      // [THEN] Line2: "Type" = "G/L Account", "No." = "GLAcc"
      // [THEN] Line3: "Type" = "", "No." = "", "Description" = "Invoice No. I2"
      // [THEN] Line4: "Type" = "", "No." = "", "Description" = "Inv. No. I2 - Rcpt. No. R1"
      // [THEN] Line5: "Type" = "Item", "No." = "ITEM"
      FindFirstLineOfPurchaseDocument(PurchaseHeader,PurchaseLine);
      Assert.RecordCount(PurchaseLine,5);
      VerifyPurchaseInvoiceDescription(PurchaseLine,InvoiceNo[1],GLAccountNo);
      VerifyPurchaseInvoiceReceiptDescription(PurchaseLine,InvoiceNo[2],ReceiptNo,ItemNo);
    END;

    [Test]
    PROCEDURE PurchaseCrMemo_GetPstdDocLinesToRev_TwoDocs_ItemGLAccount@73();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1006 : Record 39;
      VendorNo@1000 : Code[20];
      GLAccountNo@1002 : Code[20];
      ItemNo@1004 : Code[20];
      InvoiceNo@1003 : ARRAY [2] OF Code[20];
      ReceiptNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Purchase] [Credit Memo] [Get Posted Document Lines to Reverse] [G/L Account] [Item]
      // [SCENARIO 382275] Purchase Credit Memo "Get Posted Document Lines to Reverse" from two Invoices (Item, G/L Account)
      Initialize;
      VendorNo := LibraryPurchase.CreateVendorNo;

      // [GIVEN] Posted purchase invoice "I1" and receipt "R1" with line "Type" = "Item", "No." = "ITEM"
      // [GIVEN] Posted purchase invoice "I2" with line "Type" = "G/L Account", "No." = "GLAcc"
      CreatePostPurchaseOrderWithItem(InvoiceNo[1],ReceiptNo,ItemNo,VendorNo);
      CreatePostPurchaseOrderWithGLAccount(InvoiceNo[2],GLAccountNo,VendorNo);
      // [GIVEN] A new purchase credit memo
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",VendorNo);

      // [WHEN] Perform "Get Posted Document Lines to Reverse" action (select all lines, press OK)
      CopyPostedPurchaseInvoiceLines(PurchaseHeader);

      // [THEN] There are 5 lines have been created in purchase credit memo:
      // [THEN] Line1: "Type" = "", "No." = "", "Description" = "Invoice No. I1"
      // [THEN] Line2: "Type" = "", "No." = "", "Description" = "Inv. No. I1 - Rcpt. No. R1"
      // [THEN] Line3: "Type" = "Item", "No." = "ITEM"
      // [THEN] Line4: "Type" = "", "No." = "", "Description" = "Invoice No. I2"
      // [THEN] Line5: "Type" = "G/L Account", "No." = "GLAcc"
      FindFirstLineOfPurchaseDocument(PurchaseHeader,PurchaseLine);
      Assert.RecordCount(PurchaseLine,5);
      VerifyPurchaseInvoiceReceiptDescription(PurchaseLine,InvoiceNo[1],ReceiptNo,ItemNo);
      VerifyPurchaseInvoiceDescription(PurchaseLine,InvoiceNo[2],GLAccountNo);
    END;

    [Test]
    PROCEDURE PurchaseCrMemo_GetPstdDocLinesToRev_ThreeDocs_GLAccountItemGLAccount@76();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1006 : Record 39;
      VendorNo@1000 : Code[20];
      GLAccountNo@1002 : ARRAY [2] OF Code[20];
      ItemNo@1004 : Code[20];
      InvoiceNo@1003 : ARRAY [3] OF Code[20];
      ReceiptNo@1005 : Code[20];
    BEGIN
      // [FEATURE] [Purchase] [Credit Memo] [Get Posted Document Lines to Reverse] [G/L Account] [Item]
      // [SCENARIO 382275] Purchase Credit Memo "Get Posted Document Lines to Reverse" from three Invoices (G/L Account, Item, G/L Account)
      Initialize;
      VendorNo := LibraryPurchase.CreateVendorNo;

      // [GIVEN] Posted purchase invoice "I1" with line "Type" = "G/L Account", "No." = "GLAcc1"
      // [GIVEN] Posted purchase invoice "I2" and receipt "R1" with line "Type" = "Item", "No." = "ITEM"
      // [GIVEN] Posted purchase invoice "I3" with line "Type" = "G/L Account", "No." = "GLAcc2"
      CreatePostPurchaseOrderWithGLAccount(InvoiceNo[1],GLAccountNo[1],VendorNo);
      CreatePostPurchaseOrderWithItem(InvoiceNo[2],ReceiptNo,ItemNo,VendorNo);
      CreatePostPurchaseOrderWithGLAccount(InvoiceNo[3],GLAccountNo[2],VendorNo);
      // [GIVEN] A new purchase credit memo
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",VendorNo);

      // [WHEN] Perform "Get Posted Document Lines to Reverse" action (select all lines, press OK)
      CopyPostedPurchaseInvoiceLines(PurchaseHeader);

      // [THEN] There are 7 lines have been created in purchase credit memo:
      // [THEN] Line1: "Type" = "", "No." = "", "Description" = "Invoice No. I1"
      // [THEN] Line2: "Type" = "G/L Account", "No." = "GLAcc1"
      // [THEN] Line3: "Type" = "", "No." = "", "Description" = "Invoice No. I2"
      // [THEN] Line4: "Type" = "", "No." = "", "Description" = "Inv. No. I2 - Rcpt. No. R1"
      // [THEN] Line5: "Type" = "Item", "No." = "ITEM"
      // [THEN] Line6: "Type" = "", "No." = "", "Description" = "Invoice No. I3"
      // [THEN] Line7: "Type" = "G/L Account", "No." = "GLAcc2"
      FindFirstLineOfPurchaseDocument(PurchaseHeader,PurchaseLine);
      Assert.RecordCount(PurchaseLine,7);
      VerifyPurchaseInvoiceDescription(PurchaseLine,InvoiceNo[1],GLAccountNo[1]);
      VerifyPurchaseInvoiceReceiptDescription(PurchaseLine,InvoiceNo[2],ReceiptNo,ItemNo);
      VerifyPurchaseInvoiceDescription(PurchaseLine,InvoiceNo[3],GLAccountNo[2]);
    END;

    [Test]
    PROCEDURE PurchaseCrMemo_GetPstdDocLinesToRev_ThreeDocs_ItemGLAccountItem@85();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1006 : Record 39;
      VendorNo@1000 : Code[20];
      GLAccountNo@1002 : Code[20];
      ItemNo@1004 : ARRAY [2] OF Code[20];
      InvoiceNo@1003 : ARRAY [3] OF Code[20];
      ReceiptNo@1005 : ARRAY [2] OF Code[20];
    BEGIN
      // [FEATURE] [Purchase] [Credit Memo] [Get Posted Document Lines to Reverse] [G/L Account] [Item]
      // [SCENARIO 382275] Purchase Credit Memo "Get Posted Document Lines to Reverse" from three Invoices (Item, G/L Account, Item)
      Initialize;
      VendorNo := LibraryPurchase.CreateVendorNo;

      // [GIVEN] Posted purchase invoice "I1" and receipt "R1" with line "Type" = "Item", "No." = "ITEM1"
      // [GIVEN] Posted purchase invoice "I2" with line "Type" = "G/L Account", "No." = "GLAcc"
      // [GIVEN] Posted purchase invoice "I3" and receipt "R2" with line "Type" = "Item", "No." = "ITEM2"
      CreatePostPurchaseOrderWithItem(InvoiceNo[1],ReceiptNo[1],ItemNo[1],VendorNo);
      CreatePostPurchaseOrderWithGLAccount(InvoiceNo[2],GLAccountNo,VendorNo);
      CreatePostPurchaseOrderWithItem(InvoiceNo[3],ReceiptNo[2],ItemNo[2],VendorNo);
      // [GIVEN] A new purchase credit memo
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",VendorNo);

      // [WHEN] Perform "Get Posted Document Lines to Reverse" action (select all lines, press OK)
      CopyPostedPurchaseInvoiceLines(PurchaseHeader);

      // [THEN] There are 8 lines have been created in purchase credit memo:
      // [THEN] Line1: "Type" = "", "No." = "", "Description" = "Invoice No. I1"
      // [THEN] Line2: "Type" = "", "No." = "", "Description" = "Inv. No. I1 - Rcpt. No. R1"
      // [THEN] Line3: "Type" = "Item", "No." = "ITEM1"
      // [THEN] Line4: "Type" = "", "No." = "", "Description" = "Invoice No. I2"
      // [THEN] Line5: "Type" = "G/L Account", "No." = "GLAcc"
      // [THEN] Line6: "Type" = "", "No." = "", "Description" = "Invoice No. I3"
      // [THEN] Line7: "Type" = "", "No." = "", "Description" = "Inv. No. I3 - Rcpt. No. R2"
      // [THEN] Line8: "Type" = "Item", "No." = "ITEM2"
      FindFirstLineOfPurchaseDocument(PurchaseHeader,PurchaseLine);
      Assert.RecordCount(PurchaseLine,8);
      VerifyPurchaseInvoiceReceiptDescription(PurchaseLine,InvoiceNo[1],ReceiptNo[1],ItemNo[1]);
      VerifyPurchaseInvoiceDescription(PurchaseLine,InvoiceNo[2],GLAccountNo);
      VerifyPurchaseInvoiceReceiptDescription(PurchaseLine,InvoiceNo[3],ReceiptNo[2],ItemNo[2]);
    END;

    [Test]
    PROCEDURE CheckPriceIncludingVATFieldWhenCopySalesShptLineWithDiffersFromFalseUT@100();
    VAR
      ToSalesHeader@1000 : Record 36;
      FromSalesShptLine@1002 : Record 111;
      CopyDocumentMgt@1003 : Codeunit 6620;
      DummyInt@1004 : Integer;
      DummyBool@1005 : Boolean;
    BEGIN
      // [FEATURE] [Sales] [Shipment] [Prices Incl. VAT] [UT]
      // [SCENARIO 211714] If "Prices Including VAT" value of Sales Shipment Line is FALSE and in destination Sales Document it is TRUE, then it cannot be copied to Sales Document

      Initialize;

      CreateSalesHeaderWithPricesInclVAT(ToSalesHeader,TRUE);
      MockSalesShptLineWithPricesInclVAT(FromSalesShptLine,FALSE);
      FromSalesShptLine.SETRECFILTER;

      ASSERTERROR CopyDocumentMgt.CopySalesShptLinesToDoc(ToSalesHeader,FromSalesShptLine,DummyInt,DummyBool);
      Assert.ExpectedError('Prices Including VAT must be equal to ''Yes''');
    END;

    [Test]
    PROCEDURE CheckPriceIncludingVATFieldWhenCopySalesShptLineWithDiffersFromTrueUT@101();
    VAR
      ToSalesHeader@1005 : Record 36;
      FromSalesShptLine@1003 : Record 111;
      CopyDocumentMgt@1002 : Codeunit 6620;
      DummyInt@1001 : Integer;
      DummyBool@1000 : Boolean;
    BEGIN
      // [FEATURE] [Sales] [Shipment] [Prices Incl. VAT] [UT]
      // [SCENARIO 211714] If "Prices Including VAT" value of Sales Shipment Line is TRUE and in destination Sales Document it is FALSE, then it cannot be copied to Sales Document

      Initialize;

      CreateSalesHeaderWithPricesInclVAT(ToSalesHeader,FALSE);
      MockSalesShptLineWithPricesInclVAT(FromSalesShptLine,TRUE);
      FromSalesShptLine.SETRECFILTER;

      ASSERTERROR CopyDocumentMgt.CopySalesShptLinesToDoc(ToSalesHeader,FromSalesShptLine,DummyInt,DummyBool);
      Assert.ExpectedError('Prices Including VAT must be equal to ''No''');
    END;

    [Test]
    PROCEDURE ShiptoAddressPurchOrderAfterCopyFromPurchOrder@71();
    VAR
      FromPurchaseHeader@1000 : Record 38;
      ToPurchaseHeader@1001 : Record 38;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 212724] Ship-to address should be copied to Purchase Order from original Purchase Order with Location = '' after copying
      Initialize;

      // [GIVEN] A purchase order "PO1" with "Ship-to Address" = 'Lenina St.', "Ship-to Address 2" = 'Bld. 3, App. 45'
      // [GIVEN] "Ship-to City" = 'Moscow', "Ship-to Country/Region Code" = 'RU'
      // [GIVEN] "Ship-to County" = 'Moscowia', "Ship-to Post Code" = '123456'
      // [GIVEN] "Ship-to Name" = 'Main Address', "Ship-to Name 2" = 'Secondary Address'
      // [GIVEN] "Location Code" = '', "Ship-to Contact" = 'Ivanov Ivan'
      // [GIVEN] "Inbound Whse. Handling Time" = '4D'
      LibraryPurchase.CreatePurchHeader(FromPurchaseHeader,FromPurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      UpdateShiptoAddrOfPurchOrder(FromPurchaseHeader,'');

      // [GIVEN] A purchase order "PO2"
      LibraryPurchase.CreatePurchHeader(
        ToPurchaseHeader,ToPurchaseHeader."Document Type"::Order,FromPurchaseHeader."Buy-from Vendor No.");

      // [WHEN] Copying "PO1" to "PO2"
      RunCopyPurchaseDoc(FromPurchaseHeader."No.",ToPurchaseHeader,PurchDocType::Order,TRUE,FALSE);

      // [THEN] "PO2"."Ship-to Address" = 'Lenina St.', "PO2"."Ship-to Address 2" = 'Bld. 3, App. 45'
      // [THEN] "PO2"."Ship-to City" = 'Moscow', "PO2"."Ship-to Country/Region Code" = 'RU'
      // [THEN] "PO2"."Ship-to County" = 'Moscowia', "PO2"."Ship-to Post Code" = '123456'
      // [THEN] "PO2"."Ship-to Name" = 'Main Address', "PO2"."Ship-to Name 2" = 'Secondary Address'
      // [THEN] "PO2"."Location Code" = '', "PO2"."Ship-to Contact" = 'Ivanov Ivan'
      // [THEN] "PO2"."Inbound Whse. Handling Time" = '4D'
      VerifyShiptoAddressPurchaseOrder(FromPurchaseHeader,ToPurchaseHeader);
    END;

    [Test]
    PROCEDURE ShiptoAddressPurchOrderAfterCopyFromPurchOrderWithLocation@86();
    VAR
      FromPurchaseHeader@1000 : Record 38;
      ToPurchaseHeader@1001 : Record 38;
      Location@1002 : Record 14;
    BEGIN
      // [FEATURE] [Purchase]
      // [SCENARIO 212724] Ship-to address should be copied to Purchase Order from original Purchase Order with Location <> '' after copying
      Initialize;

      // [GIVEN] A purchase order "PO1" with "Ship-to Address" = 'Lenina St.', "Ship-to Address 2" = 'Bld. 3, App. 45'
      // [GIVEN] "Ship-to City" = 'Moscow', "Ship-to Country/Region Code" = 'RU'
      // [GIVEN] "Ship-to County" = 'Moscowia', "Ship-to Post Code" = '123456'
      // [GIVEN] "Ship-to Name" = 'Main Address', "Ship-to Name 2" = 'Secondary Address'
      // [GIVEN] "Location Code" = 'Warehouse 1', "Ship-to Contact" = 'Ivanov Ivan'
      // [GIVEN] "Inbound Whse. Handling Time" = '4D'
      LibraryPurchase.CreatePurchHeader(FromPurchaseHeader,FromPurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      UpdateShiptoAddrOfPurchOrder(FromPurchaseHeader,LibraryWarehouse.CreateLocation(Location));

      // [GIVEN] A purchase order "PO2"
      LibraryPurchase.CreatePurchHeader(
        ToPurchaseHeader,ToPurchaseHeader."Document Type"::Order,FromPurchaseHeader."Buy-from Vendor No.");

      // [WHEN] Copying "PO1" to "PO2"
      RunCopyPurchaseDoc(FromPurchaseHeader."No.",ToPurchaseHeader,PurchDocType::Order,TRUE,FALSE);

      // [THEN] "PO2"."Ship-to Address" = 'Lenina St.', "PO2"."Ship-to Address 2" = 'Bld. 3, App. 45'
      // [THEN] "PO2"."Ship-to City" = 'Moscow', "PO2"."Ship-to Country/Region Code" = 'RU'
      // [THEN] "PO2"."Ship-to County" = 'Moscowia', "PO2"."Ship-to Post Code" = '123456'
      // [THEN] "PO2"."Ship-to Name" = 'Main Address', "PO2"."Ship-to Name 2" = 'Secondary Address'
      // [THEN] "PO2"."Location Code" = 'Warehouse 1', "PO2"."Ship-to Contact" = 'Ivanov Ivan'
      // [THEN] "PO2"."Inbound Whse. Handling Time" = '4D'
      VerifyShiptoAddressPurchaseOrder(FromPurchaseHeader,ToPurchaseHeader);
    END;

    [Test]
    PROCEDURE CheckPriceIncludingVATFieldWhenCopyPurchRcptLineWithDiffersFromFalseUT@244();
    VAR
      ToPurchaseHeader@1001 : Record 38;
      FromPurchRcptLine@1006 : Record 121;
      CopyDocumentMgt@1003 : Codeunit 6620;
      DummyInt@1004 : Integer;
      DummyBool@1005 : Boolean;
    BEGIN
      // [FEATURE] [Purchase] [Receipt] [Prices Incl. VAT] [UT]
      // [SCENARIO 216846] If "Prices Including VAT" value of Purchase Receipt Line is FALSE and in destination Purchase Document it is TRUE, then it cannot be copied to Purchase Document

      Initialize;

      CreatePurchHeaderWithPricesInclVAT(ToPurchaseHeader,TRUE);
      MockPurchRcptLineWithPricesInclVAT(FromPurchRcptLine,FALSE);

      ASSERTERROR CopyDocumentMgt.CopyPurchRcptLinesToDoc(ToPurchaseHeader,FromPurchRcptLine,DummyInt,DummyBool);
      Assert.ExpectedError('Prices Including VAT must be equal to ''Yes''');
    END;

    [Test]
    PROCEDURE CheckPriceIncludingVATFieldWhenCopyPurchRcptLineWithDiffersFromTrueUT@243();
    VAR
      ToPurchaseHeader@1004 : Record 38;
      FromPurchRcptLine@1003 : Record 121;
      CopyDocumentMgt@1002 : Codeunit 6620;
      DummyInt@1001 : Integer;
      DummyBool@1000 : Boolean;
    BEGIN
      // [FEATURE] [Purchase] [Receipt] [Prices Incl. VAT] [UT]
      // [SCENARIO 216846] If "Prices Including VAT" value of Purchase Receipt Line is TRUE and in destination Purchase Document it is FALSE, then it cannot be copied to Purchase Document

      Initialize;

      CreatePurchHeaderWithPricesInclVAT(ToPurchaseHeader,FALSE);
      MockPurchRcptLineWithPricesInclVAT(FromPurchRcptLine,TRUE);

      ASSERTERROR CopyDocumentMgt.CopyPurchRcptLinesToDoc(ToPurchaseHeader,FromPurchRcptLine,DummyInt,DummyBool);
      Assert.ExpectedError('Prices Including VAT must be equal to ''No''');
    END;

    [Test]
    PROCEDURE CheckPriceIncludingVATFieldWhenCopyPurchInvLineWithDiffersFromFalseUT@261();
    VAR
      ToPurchaseHeader@1001 : Record 38;
      FromPurchInvLine@1006 : Record 123;
      CopyDocumentMgt@1003 : Codeunit 6620;
      DummyInt@1004 : Integer;
      DummyBool@1005 : Boolean;
    BEGIN
      // [FEATURE] [Purchase] [Invoice] [Prices Incl. VAT] [UT]
      // [SCENARIO 216846] If "Prices Including VAT" value of Purchase Receipt Line is FALSE and in destination Purchase Document it is TRUE, then it cannot be copied to Purchase Document

      Initialize;

      CreatePurchHeaderWithPricesInclVAT(ToPurchaseHeader,TRUE);
      MockPurchInvLineWithPricesInclVAT(FromPurchInvLine,FALSE);

      ASSERTERROR CopyDocumentMgt.CopyPurchInvLinesToDoc(ToPurchaseHeader,FromPurchInvLine,DummyInt,DummyBool);
      Assert.ExpectedError('Prices Including VAT must be equal to ''Yes''');
    END;

    [Test]
    PROCEDURE CheckPriceIncludingVATFieldWhenCopyPurchInvtLineWithDiffersFromTrueUT@259();
    VAR
      ToPurchaseHeader@1004 : Record 38;
      FromPurchInvLine@1003 : Record 123;
      CopyDocumentMgt@1002 : Codeunit 6620;
      DummyInt@1001 : Integer;
      DummyBool@1000 : Boolean;
    BEGIN
      // [FEATURE] [Purchase] [Invoice] [Prices Incl. VAT] [UT]
      // [SCENARIO 216846] If "Prices Including VAT" value of Purchase Receipt Line is TRUE and in destination Purchase Document it is FALSE, then it cannot be copied to Purchase Document

      Initialize;

      CreatePurchHeaderWithPricesInclVAT(ToPurchaseHeader,FALSE);
      MockPurchInvLineWithPricesInclVAT(FromPurchInvLine,TRUE);

      ASSERTERROR CopyDocumentMgt.CopyPurchInvLinesToDoc(ToPurchaseHeader,FromPurchInvLine,DummyInt,DummyBool);
      Assert.ExpectedError('Prices Including VAT must be equal to ''No''');
    END;

    [Test]
    PROCEDURE CheckPriceIncludingVATFieldWhenCopyPurchCrMemoLineWithDiffersFromFalseUT@272();
    VAR
      ToPurchaseHeader@1001 : Record 38;
      FromPurchCrMemoLine@1006 : Record 125;
      CopyDocumentMgt@1003 : Codeunit 6620;
      DummyInt@1004 : Integer;
      DummyBool@1005 : Boolean;
    BEGIN
      // [FEATURE] [Purchase] [Credit Memo] [Prices Incl. VAT] [UT]
      // [SCENARIO 216846] If "Prices Including VAT" value of Purchase Credit Memo Line is FALSE and in destination Purchase Document it is TRUE, then it cannot be copied to Purchase Document

      Initialize;

      CreatePurchHeaderWithPricesInclVAT(ToPurchaseHeader,TRUE);
      MockPurchCrMemoLineWithPricesInclVAT(FromPurchCrMemoLine,FALSE);

      ASSERTERROR CopyDocumentMgt.CopyPurchCrMemoLinesToDoc(ToPurchaseHeader,FromPurchCrMemoLine,DummyInt,DummyBool);
      Assert.ExpectedError('Prices Including VAT must be equal to ''Yes''');
    END;

    [Test]
    PROCEDURE CheckPriceIncludingVATFieldWhenCopyPurchCrMemoLineWithDiffersFromTrueUT@271();
    VAR
      ToPurchaseHeader@1004 : Record 38;
      FromPurchCrMemoLine@1003 : Record 125;
      CopyDocumentMgt@1002 : Codeunit 6620;
      DummyInt@1001 : Integer;
      DummyBool@1000 : Boolean;
    BEGIN
      // [FEATURE] [Purchase] [Credit Memo] [Prices Incl. VAT] [UT]
      // [SCENARIO 216846] If "Prices Including VAT" value of Purchase Credit Memo Line is TRUE and in destination Purchase Document it is FALSE, then it cannot be copied to Purchase Document

      Initialize;

      CreatePurchHeaderWithPricesInclVAT(ToPurchaseHeader,FALSE);
      MockPurchCrMemoLineWithPricesInclVAT(FromPurchCrMemoLine,TRUE);

      ASSERTERROR CopyDocumentMgt.CopyPurchCrMemoLinesToDoc(ToPurchaseHeader,FromPurchCrMemoLine,DummyInt,DummyBool);
      Assert.ExpectedError('Prices Including VAT must be equal to ''No''');
    END;

    [Test]
    PROCEDURE CheckPriceIncludingVATFieldWhenCopyReturnShptLineWithDiffersFromFalseUT@263();
    VAR
      ToPurchaseHeader@1001 : Record 38;
      FromReturnShipmentLine@1006 : Record 6651;
      CopyDocumentMgt@1003 : Codeunit 6620;
      DummyInt@1004 : Integer;
      DummyBool@1005 : Boolean;
    BEGIN
      // [FEATURE] [Purchase] [Return] [Shipment] [Prices Incl. VAT] [UT]
      // [SCENARIO 216846] If "Prices Including VAT" value of Return Shipment Line is FALSE and in destination Purchase Document it is TRUE, then it cannot be copied to Purchase Document

      Initialize;

      CreatePurchHeaderWithPricesInclVAT(ToPurchaseHeader,TRUE);
      MockReturnShptLineWithPricesInclVAT(FromReturnShipmentLine,FALSE);

      ASSERTERROR CopyDocumentMgt.CopyPurchReturnShptLinesToDoc(ToPurchaseHeader,FromReturnShipmentLine,DummyInt,DummyBool);
      Assert.ExpectedError('Prices Including VAT must be equal to ''Yes''');
    END;

    [Test]
    PROCEDURE CheckPriceIncludingVATFieldWhenCopyReturnShptLineWithDiffersFromTrueUT@255();
    VAR
      ToPurchaseHeader@1004 : Record 38;
      FromReturnShipmentLine@1003 : Record 6651;
      CopyDocumentMgt@1002 : Codeunit 6620;
      DummyInt@1001 : Integer;
      DummyBool@1000 : Boolean;
    BEGIN
      // [FEATURE] [Purchase] [Return] [Shipment] [Prices Incl. VAT] [UT]
      // [SCENARIO 216846] If "Prices Including VAT" value of Purchase Credit Memo Line is TRUE and in destination Purchase Document it is FALSE, then it cannot be copied to Purchase Document

      Initialize;

      CreatePurchHeaderWithPricesInclVAT(ToPurchaseHeader,FALSE);
      MockReturnShptLineWithPricesInclVAT(FromReturnShipmentLine,TRUE);

      ASSERTERROR CopyDocumentMgt.CopyPurchReturnShptLinesToDoc(ToPurchaseHeader,FromReturnShipmentLine,DummyInt,DummyBool);
      Assert.ExpectedError('Prices Including VAT must be equal to ''No''');
    END;

    LOCAL PROCEDURE Initialize@3();
    VAR
      LibraryERMCountryData@1000 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      IF IsInitialized THEN
        EXIT;

      LibrarySales.SetCreditWarningsToNoWarnings;
      LibrarySales.SetStockoutWarning(FALSE);
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibrarySetupStorage.Save(DATABASE::"Purchases & Payables Setup");
      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE SetRandomValues@24(VAR ItemCost@1000 : Integer;VAR ItemPrice@1006 : Integer;VAR DestinationDocType@1001 : Option;VAR OriginalDocType@1002 : Option);
    VAR
      PurchaseHeader@1005 : Record 38;
      RecordRef@1004 : RecordRef;
      NumOfDocTypes@1003 : Integer;
    BEGIN
      RecordRef.GETTABLE(PurchaseHeader);
      NumOfDocTypes := GetNumberOfOptions(RecordRef.NUMBER,PurchaseHeader.FIELDNO("Document Type"));

      ItemCost := LibraryRandom.RandInt(100);
      ItemPrice := LibraryRandom.RandInt(100);
      DestinationDocType := LibraryRandom.RandInt(NumOfDocTypes) - 1;
      OriginalDocType := LibraryRandom.RandInt(NumOfDocTypes) - 1;
    END;

    LOCAL PROCEDURE RunCopyPurchaseDoc@9(DocumentNo@1003 : Code[20];NewPurchHeader@1002 : Record 38;DocType@1005 : Option;IncludeHeader@1000 : Boolean;RecalculateLines@1001 : Boolean);
    VAR
      CopyPurchDoc@1004 : Report 492;
    BEGIN
      CLEAR(CopyPurchDoc);
      CopyPurchDoc.InitializeRequest(DocType,DocumentNo,IncludeHeader,RecalculateLines);
      CopyPurchDoc.SetPurchHeader(NewPurchHeader);
      CopyPurchDoc.USEREQUESTPAGE(FALSE);
      CopyPurchDoc.RUNMODAL;
    END;

    LOCAL PROCEDURE RunCopySalesDoc@27(DocumentNo@1003 : Code[20];NewSalesHeader@1002 : Record 36;DocType@1005 : Option;IncludeHeader@1000 : Boolean;RecalculateLines@1001 : Boolean);
    VAR
      CopySalesDoc@1004 : Report 292;
    BEGIN
      CLEAR(CopySalesDoc);
      CopySalesDoc.InitializeRequest(DocType,DocumentNo,IncludeHeader,RecalculateLines);
      CopySalesDoc.SetSalesHeader(NewSalesHeader);
      CopySalesDoc.USEREQUESTPAGE(FALSE);
      CopySalesDoc.RUNMODAL;
    END;

    LOCAL PROCEDURE CopyPostedSalesInvoiceLines@44(VAR SalesHeader@1001 : Record 36);
    VAR
      SalesInvoiceLine@1002 : Record 113;
      CopyDocMgt@1000 : Codeunit 6620;
      LinesNotCopied@1003 : Integer;
      MissingExCostRevLink@1004 : Boolean;
    BEGIN
      SalesInvoiceLine.SETRANGE("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      CopyDocMgt.SetProperties(FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,FALSE);
      CopyDocMgt.CopySalesInvLinesToDoc(
        SalesHeader,SalesInvoiceLine,LinesNotCopied,MissingExCostRevLink);
    END;

    LOCAL PROCEDURE CopyPostedPurchaseInvoiceLines@52(VAR PurchaseHeader@1001 : Record 38);
    VAR
      PurchInvLine@1002 : Record 123;
      CopyDocMgt@1000 : Codeunit 6620;
      LinesNotCopied@1003 : Integer;
      MissingExCostRevLink@1004 : Boolean;
    BEGIN
      PurchInvLine.SETRANGE("Buy-from Vendor No.",PurchaseHeader."Buy-from Vendor No.");
      CopyDocMgt.SetProperties(FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,FALSE);
      CopyDocMgt.CopyPurchInvLinesToDoc(
        PurchaseHeader,PurchInvLine,LinesNotCopied,MissingExCostRevLink);
    END;

    LOCAL PROCEDURE CreatePostSalesDocWithItemDescriptionLine@56(VAR CustomerNo@1004 : Code[20];VAR Description@1005 : Text[50]) : Code[20];
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,
        LibraryInventory.CreateItemNo,LibraryRandom.RandIntInRange(2,5));
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type,SalesLine."No.",0);
      SalesLine.VALIDATE("No.",'');
      SalesLine.MODIFY;
      LibraryUtility.FillMaxText(SalesLine,SalesLine.FIELDNO(Description));
      SalesLine.FIND;

      CustomerNo := SalesHeader."Sell-to Customer No.";
      Description := SalesLine.Description;
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreatePostPurchDocWithItemDescriptionLine@50(VAR VendorNo@1005 : Code[20];VAR Description@1004 : Text[50]) : Code[20];
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,
        LibraryInventory.CreateItemNo,LibraryRandom.RandIntInRange(2,5));
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type,PurchaseLine."No.",0);
      PurchaseLine.VALIDATE("No.",'');
      PurchaseLine.MODIFY;
      LibraryUtility.FillMaxText(PurchaseLine,PurchaseLine.FIELDNO(Description));
      PurchaseLine.FIND;

      VendorNo := PurchaseHeader."Buy-from Vendor No.";
      Description := PurchaseLine.Description;
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreatePostSalesOrderWithGLAccount@98(VAR InvoiceNo@1004 : Code[20];VAR GLAccountNo@1002 : Code[20];CustomerNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDecInRange(1000,2000,2));
      SalesLine.MODIFY(TRUE);
      GLAccountNo := SalesLine."No.";
      InvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreatePostSalesOrderWithItem@104(VAR InvoiceNo@1004 : Code[20];VAR ShipmentNo@1005 : Code[20];VAR ItemNo@1002 : Code[20];CustomerNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,CustomerNo);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDecInRange(1000,2000,2));
      SalesLine.MODIFY(TRUE);
      ItemNo := SalesLine."No.";
      ShipmentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
      InvoiceNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreatePostPurchaseOrderWithGLAccount@62(VAR InvoiceNo@1004 : Code[20];VAR GLAccountNo@1002 : Code[20];VendorNo@1001 : Code[20]);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1003 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithPurchSetup,LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDecInRange(1000,2000,2));
      PurchaseLine.MODIFY(TRUE);
      GLAccountNo := PurchaseLine."No.";
      InvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreatePostPurchaseOrderWithItem@66(VAR InvoiceNo@1004 : Code[20];VAR ReceiptNo@1005 : Code[20];VAR ItemNo@1002 : Code[20];VendorNo@1001 : Code[20]);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1003 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandInt(10));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDecInRange(1000,2000,2));
      PurchaseLine.MODIFY(TRUE);
      ItemNo := PurchaseLine."No.";
      ReceiptNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      InvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateOneItemPurchDoc@7(VAR PurchHeader@1000 : Record 38;DocType@1001 : Option);
    VAR
      Item@1002 : Record 27;
    BEGIN
      // Create a new purchase doc with only one item.
      LibraryInventory.CreateItem(Item);
      CreateOneItemPurchDocWithItem(PurchHeader,Item,DocType);
    END;

    LOCAL PROCEDURE CreateOneItemSalesDoc@41(VAR SalesHeader@1000 : Record 36;DocType@1001 : Option);
    VAR
      Item@1002 : Record 27;
    BEGIN
      // Create a new purchase doc with only one item.
      LibraryInventory.CreateItem(Item);
      CreateOneItemSalesDocWithItem(SalesHeader,Item,DocType);
    END;

    LOCAL PROCEDURE CreateOneItemPurchDocWithItem@18(VAR PurchHeader@1000 : Record 38;Item@1004 : Record 27;DocType@1001 : Option);
    VAR
      Vendor@1002 : Record 23;
      PurchLine@1003 : Record 39;
    BEGIN
      // No currency code to simplify "Direct unit cost" validation.
      Vendor.SETFILTER("Currency Code",'''''');
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchHeader,DocType,Vendor."No.");

      // Set the workdate of the document to Today, so discounts can be applied
      PurchHeader.VALIDATE("Order Date",WORKDATE);
      PurchHeader.MODIFY(TRUE);

      LibraryPurchase.CreatePurchaseLine(PurchLine,PurchHeader,PurchLine.Type::Item,Item."No.",
        LibraryRandom.RandInt(100));
      PurchLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(100));
      PurchLine.VALIDATE("Receipt Line No.",PurchLine."Line No.");
      PurchLine.VALIDATE("Receipt No.",PurchLine."Document No.");
      PurchLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateOneItemSalesDocWithItem@23(VAR SalesHeader@1000 : Record 36;Item@1004 : Record 27;DocType@1001 : Option);
    VAR
      Customer@1002 : Record 18;
      SalesLine@1003 : Record 37;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibrarySales.CreateSalesHeader(SalesHeader,DocType,Customer."No.");

      // Set the workdate of the document to Today, so discounts can be applied
      SalesHeader.VALIDATE("Order Date",WORKDATE);
      SalesHeader.MODIFY(TRUE);

      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,Item."No.",
        LibraryRandom.RandInt(100));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandInt(100));
      SalesLine.VALIDATE("Shipment Line No.",SalesLine."Line No.");
      SalesLine.VALIDATE("Shipment No.",SalesLine."Document No.");
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchGLAccNo@42(GLAccountNo@1000 : Code[20]) : Code[20];
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      GLAccount.GET(LibraryERM.CreateGLAccountWithPurchSetup);
      GLAccount.RENAME(GLAccountNo);
      EXIT(GLAccountNo)
    END;

    LOCAL PROCEDURE CreateSalesGLAccNo@43(GLAccountNo@1000 : Code[20]) : Code[20];
    VAR
      GLAccount@1001 : Record 15;
    BEGIN
      GLAccount.GET(LibraryERM.CreateGLAccountWithSalesSetup);
      GLAccount.RENAME(GLAccountNo);
      EXIT(GLAccountNo)
    END;

    LOCAL PROCEDURE CreatePurchDocWithExtLines@122(VAR PurchHeader@1000 : Record 38;DocumentType@1003 : Option);
    VAR
      PurchLine@1001 : Record 39;
      TransferExtendedText@1002 : Codeunit 378;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchHeader,DocumentType,LibraryPurchase.CreateVendorNo);
      LibraryPurchase.CreatePurchaseLine(PurchLine,PurchHeader,PurchLine.Type::Item,CreateItemWithExtText,
        LibraryRandom.RandInt(100));
      PurchLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(100));
      PurchLine.MODIFY(TRUE);
      TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE);
      TransferExtendedText.InsertPurchExtText(PurchLine);
      FindLastLineOfPurchaseDocument(PurchHeader,PurchLine);
      InsertEmptyPurchLine(PurchHeader."Document Type",PurchHeader."No.",PurchLine."Line No." - 1);
    END;

    LOCAL PROCEDURE CreateSalesDocWithExtLines@121(VAR SalesHeader@1000 : Record 36;DocumentType@1001 : Option);
    VAR
      SalesLine@1002 : Record 37;
      TransferExtendedText@1003 : Codeunit 378;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,LibrarySales.CreateCustomerNo);
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,CreateItemWithExtText,
        LibraryRandom.RandInt(100));
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandInt(100));
      SalesLine.MODIFY(TRUE);
      TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,TRUE);
      TransferExtendedText.InsertSalesExtText(SalesLine);
      FindLastLineOfSalesDocument(SalesHeader,SalesLine);
      InsertEmptySalesLine(SalesHeader."Document Type",SalesHeader."No.",SalesLine."Line No." - 1);
    END;

    LOCAL PROCEDURE CreatePurchHeaderWithPricesInclVAT@249(VAR PurchaseHeader@1000 : Record 38;PricesInclVAT@1001 : Boolean);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      PurchaseHeader.VALIDATE("Prices Including VAT",PricesInclVAT);
      PurchaseHeader.MODIFY;
    END;

    LOCAL PROCEDURE MockPurchCrMemoLineWithPricesInclVAT@273(VAR PurchCrMemoLine@1001 : Record 125;PricesInclVAT@1002 : Boolean);
    VAR
      PurchCrMemoHdr@1000 : Record 124;
    BEGIN
      PurchCrMemoHdr.INIT;
      PurchCrMemoHdr."No." := LibraryUtility.GenerateGUID;
      PurchCrMemoHdr."Prices Including VAT" := PricesInclVAT;
      PurchCrMemoHdr."Pay-to Vendor No." := LibraryPurchase.CreateVendorNo;
      PurchCrMemoHdr.INSERT;

      PurchCrMemoLine.INIT;
      PurchCrMemoLine."Document No." := PurchCrMemoHdr."No.";
      PurchCrMemoLine.INSERT;
      PurchCrMemoLine.SETRECFILTER;
    END;

    LOCAL PROCEDURE MockPurchInvLineWithPricesInclVAT@262(VAR PurchInvLine@1001 : Record 123;PricesInclVAT@1002 : Boolean);
    VAR
      PurchInvHeader@1000 : Record 122;
    BEGIN
      PurchInvHeader.INIT;
      PurchInvHeader."No." := LibraryUtility.GenerateGUID;
      PurchInvHeader."Prices Including VAT" := PricesInclVAT;
      PurchInvHeader."Pay-to Vendor No." := LibraryPurchase.CreateVendorNo;
      PurchInvHeader.INSERT;

      PurchInvLine.INIT;
      PurchInvLine."Document No." := PurchInvHeader."No.";
      PurchInvLine.INSERT;
      PurchInvLine.SETRECFILTER;
    END;

    LOCAL PROCEDURE MockPurchRcptLineWithPricesInclVAT@252(VAR PurchRcptLine@1001 : Record 121;PricesInclVAT@1002 : Boolean);
    VAR
      PurchRcptHeader@1000 : Record 120;
      PurchaseHeader@1003 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      PurchaseHeader."Prices Including VAT" := PricesInclVAT;
      PurchaseHeader.MODIFY;

      PurchRcptHeader.INIT;
      PurchRcptHeader."No." := LibraryUtility.GenerateGUID;
      PurchRcptHeader."Order No." := PurchaseHeader."No.";
      PurchRcptHeader."Pay-to Vendor No." := LibraryPurchase.CreateVendorNo;
      PurchRcptHeader.INSERT;

      PurchRcptLine.INIT;
      PurchRcptLine."Document No." := PurchRcptHeader."No.";
      PurchRcptLine.INSERT;
      PurchRcptLine.SETRECFILTER;
    END;

    LOCAL PROCEDURE MockReturnShptLineWithPricesInclVAT@265(VAR ReturnShipmentLine@1001 : Record 6651;PricesInclVAT@1002 : Boolean);
    VAR
      ReturnShipmentHeader@1000 : Record 6650;
      PurchaseHeader@1003 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",LibraryPurchase.CreateVendorNo);
      PurchaseHeader."Prices Including VAT" := PricesInclVAT;
      PurchaseHeader.MODIFY;

      ReturnShipmentHeader.INIT;
      ReturnShipmentHeader."No." := LibraryUtility.GenerateGUID;
      ReturnShipmentHeader."Return Order No." := PurchaseHeader."No.";
      ReturnShipmentHeader."Pay-to Vendor No." := LibraryPurchase.CreateVendorNo;
      ReturnShipmentHeader.INSERT;

      ReturnShipmentLine.INIT;
      ReturnShipmentLine."Document No." := ReturnShipmentHeader."No.";
      ReturnShipmentLine.INSERT;
      ReturnShipmentLine.SETRECFILTER;
    END;

    LOCAL PROCEDURE CreateSalesHeaderWithPricesInclVAT@102(VAR SalesHeader@1000 : Record 36;PricesInclVAT@1001 : Boolean);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      SalesHeader.VALIDATE("Prices Including VAT",PricesInclVAT);
      SalesHeader.MODIFY;
    END;

    LOCAL PROCEDURE MockSalesShptLineWithPricesInclVAT@103(VAR SalesShipmentLine@1001 : Record 111;PricesInclVAT@1002 : Boolean);
    VAR
      SalesShipmentHeader@1000 : Record 110;
    BEGIN
      SalesShipmentHeader.INIT;
      SalesShipmentHeader."No." := LibraryUtility.GenerateGUID;
      SalesShipmentHeader."Prices Including VAT" := PricesInclVAT;
      SalesShipmentHeader.INSERT;

      SalesShipmentLine.INIT;
      SalesShipmentLine."Document No." := SalesShipmentHeader."No.";
      SalesShipmentLine.INSERT;
    END;

    LOCAL PROCEDURE CreatePurchHeader@8(VAR PurchaseHeader@1000 : Record 38;DocumentType@1001 : Option);
    BEGIN
      PurchaseHeader.INIT;
      PurchaseHeader.VALIDATE("Document Type",DocumentType);
      PurchaseHeader.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesHeader@39(VAR SalesHeader@1000 : Record 36;DocumentType@1001 : Option);
    BEGIN
      SalesHeader.INIT;
      SalesHeader.VALIDATE("Document Type",DocumentType);
      SalesHeader.INSERT(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchHeaderForVendor@10(VAR PurchaseHeader@1000 : Record 38;DocumentType@1001 : Option;VendorCode@1002 : Code[20]);
    BEGIN
      CreatePurchHeader(PurchaseHeader,DocumentType);

      // If Copy Purch Document is ran with IncludeHeader=False is mandatory to have the same vendor in original and destination doc.
      PurchaseHeader.VALIDATE("Buy-from Vendor No.",VendorCode);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesHeaderForCustomer@40(VAR SalesHeader@1000 : Record 36;DocumentType@1001 : Option;CustomerCode@1002 : Code[20]);
    BEGIN
      CreateSalesHeader(SalesHeader,DocumentType);

      // If Copy Sales Document is ran with IncludeHeader=False is mandatory to have the same vendor in original and destination doc.
      SalesHeader.VALIDATE("Sell-to Customer No.",CustomerCode);
      SalesHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCopiableItem@25(VAR Item@1000 : Record 27;ItemCost@1001 : Integer;ItemPrice@1002 : Integer);
    BEGIN
      // Create an item and set the last item cost, so when copying the lines we'll have a cost to retrieve (otherwise is 0).
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Last Direct Cost",ItemCost);
      Item.VALIDATE("Unit Price",ItemPrice);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorItemDiscount@5(VAR PurchaseLineDiscount@1001 : Record 7014;VendorCode@1002 : Code[20];Item@1003 : Record 27);
    BEGIN
      // Create a random discount without item quantity limitation (to be sure it is applied when recalculating lines)
      LibraryERM.CreateLineDiscForVendor(PurchaseLineDiscount,
        Item."No.",VendorCode,WORKDATE,'','',
        Item."Base Unit of Measure",0);
      PurchaseLineDiscount.VALIDATE("Line Discount %",LibraryRandom.RandInt(100));
      PurchaseLineDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomerItemDiscount@26(VAR SalesLineDiscount@1001 : Record 7004;CustomerCode@1002 : Code[20];Item@1003 : Record 27);
    BEGIN
      // Create a random discount without item quantity limitation (to be sure it is applied when recalculating lines)
      LibraryERM.CreateLineDiscForCustomer(SalesLineDiscount,
        SalesLineDiscount.Type::Item,Item."No.",SalesLineDiscount."Sales Type"::Customer,CustomerCode,WORKDATE,'','',
        Item."Base Unit of Measure",0);
      SalesLineDiscount.VALIDATE("Line Discount %",LibraryRandom.RandInt(100));
      SalesLineDiscount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithExtText@53() : Code[20];
    VAR
      Item@1000 : Record 27;
      ExtendedTextHeader@1001 : Record 279;
      ExtendedTextLine@1002 : Record 280;
    BEGIN
      LibraryInventory.CreateItem(Item);
      LibraryService.CreateExtendedTextHeaderItem(ExtendedTextHeader,Item."No.");
      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      UpdateTextInExtendedTextLine(ExtendedTextLine,Item."No.");
      LibraryService.CreateExtendedTextLineItem(ExtendedTextLine,ExtendedTextHeader);
      UpdateTextInExtendedTextLine(ExtendedTextLine,Item."No.");
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreatePostSalesDocWithShiptoAddr@110(DocumentType@1002 : Option;CustomerNo@1003 : Code[20];ShiptoCode@1004 : Code[10]) : Code[20];
    VAR
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      UpdateShiptoAddrSalesHeader(SalesHeader);
      SalesHeader.VALIDATE("Ship-to Code",ShiptoCode);
      LibrarySales.CreateSalesLine(
        SalesLine,SalesHeader,SalesLine.Type::Item,LibraryInventory.CreateItemNo,LibraryRandom.RandIntInRange(1,10));
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateCustomerWithShiptoAddr@120(VAR Customer@1004 : Record 18) : Code[10];
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      UpdateAddrOfCustomer(Customer);
      EXIT(CreateShiptoAddrCustomer(Customer."No."));
    END;

    LOCAL PROCEDURE CreateShiptoAddrCustomer@176(CustomerNo@1000 : Code[20]) : Code[10];
    VAR
      ShipToAddress@1001 : Record 222;
    BEGIN
      LibrarySales.CreateShipToAddress(ShipToAddress,CustomerNo);
      LibraryUtility.FillMaxText(ShipToAddress,ShipToAddress.FIELDNO(Name));
      ShipToAddress.GET(CustomerNo,ShipToAddress.Code);
      LibraryUtility.FillMaxText(ShipToAddress,ShipToAddress.FIELDNO("Name 2"));
      ShipToAddress.GET(CustomerNo,ShipToAddress.Code);
      LibraryUtility.FillMaxText(ShipToAddress,ShipToAddress.FIELDNO(Address));
      ShipToAddress.GET(CustomerNo,ShipToAddress.Code);
      LibraryUtility.FillMaxText(ShipToAddress,ShipToAddress.FIELDNO("Address 2"));
      ShipToAddress.GET(CustomerNo,ShipToAddress.Code);
      LibraryUtility.FillMaxText(ShipToAddress,ShipToAddress.FIELDNO(County));
      ShipToAddress.GET(CustomerNo,ShipToAddress.Code);
      ShipToAddress.VALIDATE("Post Code",CreatePostCode);
      ShipToAddress.MODIFY;
      EXIT(ShipToAddress.Code);
    END;

    LOCAL PROCEDURE CreatePostCode@163() : Code[20];
    VAR
      PostCode@1000 : Record 225;
    BEGIN
      LibraryERM.CreatePostCode(PostCode);
      LibraryUtility.FillMaxText(PostCode,PostCode.FIELDNO(County));
      EXIT(PostCode.Code);
    END;

    LOCAL PROCEDURE UpdateTextInExtendedTextLine@77(VAR ExtendedTextLine@1000 : Record 280;Text@1001 : Code[20]);
    BEGIN
      ExtendedTextLine.VALIDATE(Text,Text);
      ExtendedTextLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE InsertEmptyPurchLine@156(DocumentType@1002 : Option;DocumentNo@1000 : Code[20];LineNo@1003 : Integer);
    VAR
      PurchLine@1001 : Record 39;
    BEGIN
      PurchLine.INIT;
      PurchLine."Document Type" := DocumentType;
      PurchLine."Document No." := DocumentNo;
      PurchLine."Line No." := LineNo;
      PurchLine.INSERT;
      LibraryUtility.FillMaxText(PurchLine,PurchLine.FIELDNO(Description));
    END;

    LOCAL PROCEDURE InsertEmptySalesLine@91(DocumentType@1002 : Option;DocumentNo@1000 : Code[20];LineNo@1003 : Integer);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.INIT;
      SalesLine."Document Type" := DocumentType;
      SalesLine."Document No." := DocumentNo;
      SalesLine.Type := SalesLine.Type::" ";
      SalesLine."Line No." := LineNo;
      SalesLine.INSERT;
      LibraryUtility.FillMaxText(SalesLine,SalesLine.FIELDNO(Description));
    END;

    LOCAL PROCEDURE SetPurchInvoiceRoundingAccount@137(VendorPostingGroupCode@1000 : Code[10];GLAccountNo@1003 : Code[20]) OldGLAccountNo : Code[20];
    VAR
      VendorPostingGroup@1001 : Record 93;
    BEGIN
      VendorPostingGroup.GET(VendorPostingGroupCode);
      OldGLAccountNo := VendorPostingGroup."Invoice Rounding Account";
      VendorPostingGroup.VALIDATE("Invoice Rounding Account",GLAccountNo);
      VendorPostingGroup.MODIFY;
    END;

    LOCAL PROCEDURE SetSalesInvoiceRoundingAccount@154(CustomerPostingGroupCode@1000 : Code[10];GLAccountNo@1003 : Code[20]) OldGLAccountNo : Code[20];
    VAR
      CustomerPostingGroup@1001 : Record 92;
    BEGIN
      CustomerPostingGroup.GET(CustomerPostingGroupCode);
      OldGLAccountNo := CustomerPostingGroup."Invoice Rounding Account";
      CustomerPostingGroup.VALIDATE("Invoice Rounding Account",GLAccountNo);
      CustomerPostingGroup.MODIFY;
    END;

    LOCAL PROCEDURE UpdateShiptoAddrOfCompany@55();
    VAR
      CompanyInformation@1000 : Record 79;
    BEGIN
      CompanyInformation.GET;
      LibraryUtility.FillMaxText(CompanyInformation,CompanyInformation.FIELDNO("Ship-to Name"));
      CompanyInformation.GET;
      LibraryUtility.FillMaxText(CompanyInformation,CompanyInformation.FIELDNO("Ship-to Name 2"));
      CompanyInformation.GET;
      LibraryUtility.FillMaxText(CompanyInformation,CompanyInformation.FIELDNO("Ship-to Address"));
      CompanyInformation.GET;
      LibraryUtility.FillMaxText(CompanyInformation,CompanyInformation.FIELDNO("Ship-to Address 2"));
      CompanyInformation.GET;
      LibraryUtility.FillMaxText(CompanyInformation,CompanyInformation.FIELDNO("Ship-to Contact"));
      CompanyInformation.GET;
      CompanyInformation.VALIDATE("Ship-to Post Code",CreatePostCode);
      CompanyInformation.MODIFY;
    END;

    LOCAL PROCEDURE UpdateShiptoAddrSalesHeader@111(VAR SalesHeader@1000 : Record 36);
    BEGIN
      LibraryUtility.FillMaxText(SalesHeader,SalesHeader.FIELDNO("Ship-to Name"));
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      LibraryUtility.FillMaxText(SalesHeader,SalesHeader.FIELDNO("Ship-to Name 2"));
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      LibraryUtility.FillMaxText(SalesHeader,SalesHeader.FIELDNO("Ship-to Address"));
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      LibraryUtility.FillMaxText(SalesHeader,SalesHeader.FIELDNO("Ship-to Address 2"));
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      LibraryUtility.FillMaxText(SalesHeader,SalesHeader.FIELDNO("Ship-to Contact"));
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      SalesHeader.VALIDATE("Ship-to Post Code",CreatePostCode);
      SalesHeader.MODIFY;
    END;

    LOCAL PROCEDURE UpdateAddrOfCustomer@178(VAR Customer@1000 : Record 18);
    BEGIN
      LibraryUtility.FillMaxText(Customer,Customer.FIELDNO(Name));
      Customer.GET(Customer."No.");
      LibraryUtility.FillMaxText(Customer,Customer.FIELDNO("Name 2"));
      Customer.GET(Customer."No.");
      LibraryUtility.FillMaxText(Customer,Customer.FIELDNO(Address));
      Customer.GET(Customer."No.");
      LibraryUtility.FillMaxText(Customer,Customer.FIELDNO("Address 2"));
      Customer.GET(Customer."No.");
      LibraryUtility.FillMaxText(Customer,Customer.FIELDNO(Contact));
      Customer.GET(Customer."No.");
      Customer.VALIDATE("Post Code",CreatePostCode);
      Customer.MODIFY;
    END;

    LOCAL PROCEDURE UpdateShiptoAddrOfPurchOrder@94(VAR PurchaseHeader@1000 : Record 38;LocationCode@1001 : Code[10]);
    BEGIN
      LibraryUtility.FillMaxText(PurchaseHeader,PurchaseHeader.FIELDNO("Ship-to Address"));
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      LibraryUtility.FillMaxText(PurchaseHeader,PurchaseHeader.FIELDNO("Ship-to Address 2"));
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      LibraryUtility.FillMaxText(PurchaseHeader,PurchaseHeader.FIELDNO("Ship-to City"));
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      LibraryUtility.FillMaxText(PurchaseHeader,PurchaseHeader.FIELDNO("Ship-to Country/Region Code"));
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      LibraryUtility.FillMaxText(PurchaseHeader,PurchaseHeader.FIELDNO("Ship-to County"));
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      LibraryUtility.FillMaxText(PurchaseHeader,PurchaseHeader.FIELDNO("Ship-to Name"));
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      LibraryUtility.FillMaxText(PurchaseHeader,PurchaseHeader.FIELDNO("Ship-to Name 2"));
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      LibraryUtility.FillMaxText(PurchaseHeader,PurchaseHeader.FIELDNO("Ship-to Post Code"));
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      LibraryUtility.FillMaxText(PurchaseHeader,PurchaseHeader.FIELDNO("Ship-to Contact"));
      PurchaseHeader.GET(PurchaseHeader."Document Type",PurchaseHeader."No.");
      EVALUATE(PurchaseHeader."Inbound Whse. Handling Time",STRSUBSTNO('<%1D>',LibraryRandom.RandIntInRange(5,10)));
      PurchaseHeader."Location Code" := LocationCode;
      PurchaseHeader.MODIFY;
    END;

    LOCAL PROCEDURE FindFirstLineOfPurchaseDocument@4(PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindFirstLineOfSalesDocument@30(SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindLastLineOfPurchaseDocument@48(PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDLAST;
    END;

    LOCAL PROCEDURE FindLastLineOfSalesDocument@46(SalesHeader@1000 : Record 36;VAR SalesLine@1001 : Record 37);
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.FINDLAST;
    END;

    LOCAL PROCEDURE GetNumberOfOptions@2(TableID@1000 : Integer;FieldNo@1001 : Integer) : Integer;
    VAR
      Field@1003 : Record 2000000041;
      RecordRef@1009 : RecordRef;
      FieldRef@1008 : FieldRef;
      OptionStringCommas@1002 : Text[30];
    BEGIN
      RecordRef.OPEN(TableID);
      FieldRef := RecordRef.FIELD(FieldNo);
      Field.GET(RecordRef.NUMBER,FieldRef.NUMBER);
      IF Field.Type <> Field.Type::Option THEN
        EXIT(0);
      OptionStringCommas := DELCHR(FieldRef.OPTIONSTRING,'=',DELCHR(FieldRef.OPTIONSTRING,'=',','));
      IF (STRLEN(OptionStringCommas) = 0) AND (STRLEN(FieldRef.OPTIONSTRING) = 0) THEN
        EXIT(0);
      EXIT(STRLEN(OptionStringCommas) + 1);
    END;

    LOCAL PROCEDURE MapperPurchaseHeaders@12(PurchHeaderDocType@1000 : Option) ReportDocType : Integer;
    VAR
      PurchHeader@1001 : Record 38;
    BEGIN
      CASE PurchHeaderDocType OF
        PurchHeader."Document Type"::Quote:
          ReportDocType := PurchDocType::Quote;
        PurchHeader."Document Type"::Order:
          ReportDocType := PurchDocType::Order;
        PurchHeader."Document Type"::Invoice:
          ReportDocType := PurchDocType::Invoice;
        PurchHeader."Document Type"::"Credit Memo":
          ReportDocType := PurchDocType::"Credit Memo";
        PurchHeader."Document Type"::"Blanket Order":
          ReportDocType := PurchDocType::"Blanket Order";
        PurchHeader."Document Type"::"Return Order":
          ReportDocType := PurchDocType::"Return Order";
      END;
    END;

    LOCAL PROCEDURE MapperSalesHeaders@32(SalesHeaderDocType@1000 : Option) ReportDocType : Integer;
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      CASE SalesHeaderDocType OF
        SalesHeader."Document Type"::Quote:
          ReportDocType := SalesDocType::Quote;
        SalesHeader."Document Type"::Order:
          ReportDocType := SalesDocType::Order;
        SalesHeader."Document Type"::Invoice:
          ReportDocType := SalesDocType::Invoice;
        SalesHeader."Document Type"::"Credit Memo":
          ReportDocType := SalesDocType::"Credit Memo";
        SalesHeader."Document Type"::"Blanket Order":
          ReportDocType := SalesDocType::"Blanket Order";
        SalesHeader."Document Type"::"Return Order":
          ReportDocType := SalesDocType::"Return Order";
      END;
    END;

    LOCAL PROCEDURE PrepareTest@33(VAR Item@1006 : Record 27;VAR OriginalDocType@1002 : Option;VAR DestinationDocType@1001 : Option;VAR ItemCost@1000 : Integer;VAR ItemPrice@1003 : Integer);
    BEGIN
      SetRandomValues(ItemCost,ItemPrice,DestinationDocType,OriginalDocType);
      CreateCopiableItem(Item,ItemCost,ItemPrice);
    END;

    LOCAL PROCEDURE VerifyPurchaseHeadersAreEqual@16(OriginalPurchHeader@1000 : Record 38;CopiedPurchHeader@1002 : Record 38);
    BEGIN
      OriginalPurchHeader.TESTFIELD("Buy-from Vendor No.",CopiedPurchHeader."Buy-from Vendor No.");
      OriginalPurchHeader.TESTFIELD(Amount,CopiedPurchHeader.Amount);
    END;

    LOCAL PROCEDURE VerifySalesHeadersAreEqual@28(OriginalSalesHeader@1000 : Record 36;CopiedSalesHeader@1002 : Record 36);
    BEGIN
      OriginalSalesHeader.TESTFIELD("Sell-to Customer No.",CopiedSalesHeader."Sell-to Customer No.");
      OriginalSalesHeader.TESTFIELD(Amount,CopiedSalesHeader.Amount);
    END;

    LOCAL PROCEDURE VerifyPurchaseLinesAreEqual@17(PurchHeaderOriginal@1000 : Record 38;PurchHeaderCopied@1002 : Record 38);
    VAR
      OriginalPurchLine@1001 : Record 39;
      DestinationPurchLine@1003 : Record 39;
    BEGIN
      // Assumes only one line of each type exists in the purchase order.
      FindFirstLineOfPurchaseDocument(PurchHeaderOriginal,OriginalPurchLine);
      FindFirstLineOfPurchaseDocument(PurchHeaderCopied,DestinationPurchLine);

      ValidatePurchaseLine(DestinationPurchLine,
        OriginalPurchLine.Quantity,
        OriginalPurchLine."Direct Unit Cost",
        OriginalPurchLine."Line Discount %");
    END;

    LOCAL PROCEDURE VerifySalesLinesAreEqual@29(SalesHeaderOriginal@1000 : Record 36;SalesHeaderCopied@1002 : Record 36);
    VAR
      OriginalSalesLine@1001 : Record 37;
      DestinationSalesLine@1003 : Record 37;
    BEGIN
      // Assumes only one line of each type exists in the sales order.
      FindFirstLineOfSalesDocument(SalesHeaderOriginal,OriginalSalesLine);
      FindFirstLineOfSalesDocument(SalesHeaderCopied,DestinationSalesLine);

      ValidateSalesLine(DestinationSalesLine,
        OriginalSalesLine.Quantity,
        OriginalSalesLine."Unit Price",
        OriginalSalesLine."Line Discount %");
    END;

    LOCAL PROCEDURE ValidatePurchaseLine@13(PurchLine@1004 : Record 39;Quantity@1001 : Integer;DirectUnitCost@1002 : Integer;LineDiscount@1003 : Integer);
    BEGIN
      PurchLine.TESTFIELD(Quantity,Quantity);
      PurchLine.TESTFIELD("Direct Unit Cost",DirectUnitCost);
      PurchLine.TESTFIELD("Line Discount %",LineDiscount);
      PurchLine.TESTFIELD("Receipt Line No.",0);
      PurchLine.TESTFIELD("Receipt No.",'');
    END;

    LOCAL PROCEDURE ValidateSalesLine@31(SalesLine@1004 : Record 37;Quantity@1001 : Integer;UnitPrice@1002 : Integer;LineDiscount@1003 : Integer);
    BEGIN
      SalesLine.TESTFIELD(Quantity,Quantity);
      SalesLine.TESTFIELD("Unit Price",UnitPrice);
      SalesLine.TESTFIELD("Line Discount %",LineDiscount);
      SalesLine.TESTFIELD("Shipment Line No.",0);
      SalesLine.TESTFIELD("Shipment No.",'');
    END;

    LOCAL PROCEDURE VerifyCopiedSalesLines@34(CopiedDocument@1007 : Variant;TypeFieldNo@1001 : Integer;DescriptionFieldNo@1002 : Integer;SalesDocType@1003 : Option;SalesDocNo@1004 : Code[20]);
    VAR
      SalesLine@1005 : Record 37;
      Value@1006 : Variant;
      RecRef@1000 : RecordRef;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesDocType);
      SalesLine.SETRANGE("Document No.",SalesDocNo);
      SalesLine.FINDSET;
      SalesLine.NEXT;
      RecRef.GETTABLE(CopiedDocument);
      RecRef.FINDSET;
      REPEAT
        Value := RecRef.FIELD(TypeFieldNo).VALUE;
        SalesLine.TESTFIELD(Type,Value);
        Value := RecRef.FIELD(DescriptionFieldNo).VALUE;
        SalesLine.TESTFIELD(Description,Value);
        RecRef.NEXT;
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyCopiedPurchLines@35(CopiedDocument@1007 : Variant;TypeFieldNo@1005 : Integer;DescriptionFieldNo@1004 : Integer;PurchDocType@1003 : Option;PurchDocNo@1002 : Code[20]);
    VAR
      PurchLine@1000 : Record 39;
      Value@1001 : Variant;
      RecRef@1006 : RecordRef;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchDocType);
      PurchLine.SETRANGE("Document No.",PurchDocNo);
      PurchLine.FINDSET;
      PurchLine.NEXT;
      RecRef.GETTABLE(CopiedDocument);
      RecRef.FINDSET;
      REPEAT
        Value := RecRef.FIELD(TypeFieldNo).VALUE;
        PurchLine.TESTFIELD(Type,Value);
        Value := RecRef.FIELD(DescriptionFieldNo).VALUE;
        PurchLine.TESTFIELD(Description,Value);
        RecRef.NEXT;
      UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifySalesDescriptionLineExists@58(SalesHeader@1001 : Record 36;ExpectedDescription@1004 : Text[50]);
    VAR
      DummySalesLine@1000 : Record 37;
    BEGIN
      WITH DummySalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        SETRANGE(Type,Type::" ");
        SETRANGE("No.",'');
        SETRANGE(Description,ExpectedDescription);
        Assert.RecordIsNotEmpty(DummySalesLine);
      END;
    END;

    LOCAL PROCEDURE VerifyPurchDescriptionLineExists@51(PurchaseHeader@1001 : Record 38;ExpectedDescription@1004 : Text[50]);
    VAR
      DummyPurchaseLine@1000 : Record 39;
    BEGIN
      WITH DummyPurchaseLine DO BEGIN
        SETRANGE("Document Type",PurchaseHeader."Document Type");
        SETRANGE("Document No.",PurchaseHeader."No.");
        SETRANGE(Type,Type::" ");
        SETRANGE("No.",'');
        SETRANGE(Description,ExpectedDescription);
        Assert.RecordIsNotEmpty(DummyPurchaseLine);
      END;
    END;

    LOCAL PROCEDURE VerifyShiptoAddressInSalesDocToCompanyInfo@84(SalesHeader@1001 : Record 36);
    VAR
      CompanyInformation@1000 : Record 79;
      ShiptoAddr@1002 : ARRAY [9] OF Text;
    BEGIN
      CompanyInformation.GET;
      ShiptoAddr[1] := CompanyInformation."Ship-to Name";
      ShiptoAddr[2] := CompanyInformation."Ship-to Name 2";
      ShiptoAddr[3] := CompanyInformation."Ship-to Address";
      ShiptoAddr[4] := CompanyInformation."Ship-to Address 2";
      ShiptoAddr[5] := CompanyInformation."Ship-to City";
      ShiptoAddr[6] := CompanyInformation."Ship-to Post Code";
      ShiptoAddr[7] := CompanyInformation."Ship-to County";
      ShiptoAddr[8] := CompanyInformation."Ship-to Country/Region Code";
      ShiptoAddr[9] := CompanyInformation."Ship-to Contact";
      VerifyShiptoAddrSalesDoc(SalesHeader,ShiptoAddr);
    END;

    LOCAL PROCEDURE VerifyShiptoAddressSalesDocToCustomerAddress@141(SalesHeader@1000 : Record 36;CustomerNo@1001 : Code[20]);
    VAR
      Customer@1002 : Record 18;
      ShiptoAddr@1003 : ARRAY [9] OF Text;
    BEGIN
      Customer.SETRANGE("No.",CustomerNo);
      Customer.FINDFIRST;
      ShiptoAddr[1] := Customer.Name;
      ShiptoAddr[2] := Customer."Name 2";
      ShiptoAddr[3] := Customer.Address;
      ShiptoAddr[4] := Customer."Address 2";
      ShiptoAddr[5] := Customer.City;
      ShiptoAddr[6] := Customer."Post Code";
      ShiptoAddr[7] := Customer.County;
      ShiptoAddr[8] := Customer."Country/Region Code";
      ShiptoAddr[9] := Customer.Contact;
      VerifyShiptoAddrSalesDoc(SalesHeader,ShiptoAddr);
    END;

    LOCAL PROCEDURE VerifyShiptoAddressSalesDocToShiptoAddress@57(SalesHeader@1000 : Record 36;CustomerNo@1001 : Code[20]);
    VAR
      ShipToAddress@1002 : Record 222;
      ShiptoAddr@1003 : ARRAY [9] OF Text;
    BEGIN
      ShipToAddress.SETRANGE("Customer No.",CustomerNo);
      ShipToAddress.FINDFIRST;
      ShiptoAddr[1] := ShipToAddress.Name;
      ShiptoAddr[2] := ShipToAddress."Name 2";
      ShiptoAddr[3] := ShipToAddress.Address;
      ShiptoAddr[4] := ShipToAddress."Address 2";
      ShiptoAddr[5] := ShipToAddress.City;
      ShiptoAddr[6] := ShipToAddress."Post Code";
      ShiptoAddr[7] := ShipToAddress.County;
      ShiptoAddr[8] := ShipToAddress."Country/Region Code";
      ShiptoAddr[9] := ShipToAddress.Contact;
      VerifyShiptoAddrSalesDoc(SalesHeader,ShiptoAddr);
    END;

    LOCAL PROCEDURE VerifyShiptoAddrSalesDoc@151(SalesHeader@1000 : Record 36;ShiptoAddr@1001 : ARRAY [9] OF Text);
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
      SalesHeader.TESTFIELD("Ship-to Name",ShiptoAddr[1]);
      SalesHeader.TESTFIELD("Ship-to Name 2",ShiptoAddr[2]);
      SalesHeader.TESTFIELD("Ship-to Address",ShiptoAddr[3]);
      SalesHeader.TESTFIELD("Ship-to Address 2",ShiptoAddr[4]);
      SalesHeader.TESTFIELD("Ship-to City",ShiptoAddr[5]);
      SalesHeader.TESTFIELD("Ship-to Post Code",ShiptoAddr[6]);
      SalesHeader.TESTFIELD("Ship-to County",ShiptoAddr[7]);
      SalesHeader.TESTFIELD("Ship-to Country/Region Code",ShiptoAddr[8]);
      SalesHeader.TESTFIELD("Ship-to Contact",ShiptoAddr[9]);
    END;

    LOCAL PROCEDURE VerifySalesLineAndStepNext@105(VAR SalesLine@1000 : Record 37;ExpectedType@1001 : Option;ExpectedNo@1002 : Code[20];ExpectedDescription@1003 : Text;StepNext@1004 : Boolean);
    BEGIN
      WITH SalesLine DO BEGIN
        Assert.AreEqual(ExpectedType,Type,FIELDCAPTION(Type));
        Assert.AreEqual(ExpectedNo,"No.",FIELDCAPTION("No."));
        Assert.ExpectedMessage(ExpectedDescription,Description);
        IF StepNext THEN
          NEXT;
      END;
    END;

    LOCAL PROCEDURE VerifySalesDescriptionLine@59(VAR SalesLine@1000 : Record 37;ExpectedDescription@1003 : Text);
    BEGIN
      VerifySalesLineAndStepNext(SalesLine,SalesLine.Type::" ",'',ExpectedDescription,TRUE);
    END;

    LOCAL PROCEDURE VerifySalesCombinedDescriptionLine@95(VAR SalesLine@1000 : Record 37;ExpectedDescription1@1003 : Text;ExpectedDescription2@1001 : Text);
    BEGIN
      VerifySalesLineAndStepNext(SalesLine,SalesLine.Type::" ",'',ExpectedDescription1,FALSE);
      VerifySalesLineAndStepNext(SalesLine,SalesLine.Type::" ",'',ExpectedDescription2,TRUE);
    END;

    LOCAL PROCEDURE VerifySalesInvoiceDescription@64(VAR SalesLine@1000 : Record 37;InvoiceNo@1002 : Code[20];GLAccountNo@1001 : Code[20]);
    BEGIN
      VerifySalesDescriptionLine(SalesLine,InvoiceNo);
      VerifySalesLineAndStepNext(SalesLine,SalesLine.Type::"G/L Account",GLAccountNo,SalesLine."No.",TRUE);
    END;

    LOCAL PROCEDURE VerifySalesInvoiceShipmentDescription@68(VAR SalesLine@1000 : Record 37;InvoiceNo@1002 : Code[20];ShipmentNo@1003 : Code[20];ItemNo@1001 : Code[20]);
    BEGIN
      VerifySalesDescriptionLine(SalesLine,InvoiceNo);
      VerifySalesCombinedDescriptionLine(SalesLine,InvoiceNo,ShipmentNo);
      VerifySalesLineAndStepNext(SalesLine,SalesLine.Type::Item,ItemNo,SalesLine."No.",TRUE);
    END;

    LOCAL PROCEDURE VerifyPurchaseLineAndStepNext@112(VAR PurchaseLine@1000 : Record 39;ExpectedType@1001 : Option;ExpectedNo@1002 : Code[20];ExpectedDescription@1003 : Text;StepNext@1004 : Boolean);
    BEGIN
      WITH PurchaseLine DO BEGIN
        Assert.AreEqual(ExpectedType,Type,FIELDCAPTION(Type));
        Assert.AreEqual(ExpectedNo,"No.",FIELDCAPTION("No."));
        Assert.ExpectedMessage(ExpectedDescription,Description);
        IF StepNext THEN
          NEXT;
      END;
    END;

    LOCAL PROCEDURE VerifyPurchaseDescriptionLine@89(VAR PurchaseLine@1000 : Record 39;ExpectedDescription@1003 : Text);
    BEGIN
      VerifyPurchaseLineAndStepNext(PurchaseLine,PurchaseLine.Type::" ",'',ExpectedDescription,TRUE);
    END;

    LOCAL PROCEDURE VerifyPurchaseCombinedDescriptionLine@99(VAR PurchaseLine@1000 : Record 39;ExpectedDescription1@1003 : Text;ExpectedDescription2@1001 : Text);
    BEGIN
      VerifyPurchaseLineAndStepNext(PurchaseLine,PurchaseLine.Type::" ",'',ExpectedDescription1,FALSE);
      VerifyPurchaseLineAndStepNext(PurchaseLine,PurchaseLine.Type::" ",'',ExpectedDescription2,TRUE);
    END;

    LOCAL PROCEDURE VerifyPurchaseInvoiceDescription@92(VAR PurchaseLine@1000 : Record 39;InvoiceNo@1002 : Code[20];GLAccountNo@1001 : Code[20]);
    BEGIN
      VerifyPurchaseDescriptionLine(PurchaseLine,InvoiceNo);
      VerifyPurchaseLineAndStepNext(PurchaseLine,PurchaseLine.Type::"G/L Account",GLAccountNo,PurchaseLine."No.",TRUE);
    END;

    LOCAL PROCEDURE VerifyPurchaseInvoiceReceiptDescription@38(VAR PurchaseLine@1000 : Record 39;InvoiceNo@1002 : Code[20];ReceiptNo@1003 : Code[20];ItemNo@1001 : Code[20]);
    BEGIN
      VerifyPurchaseDescriptionLine(PurchaseLine,InvoiceNo);
      VerifyPurchaseCombinedDescriptionLine(PurchaseLine,InvoiceNo,ReceiptNo);
      VerifyPurchaseLineAndStepNext(PurchaseLine,PurchaseLine.Type::Item,ItemNo,PurchaseLine."No.",TRUE);
    END;

    LOCAL PROCEDURE VerifyShiptoAddressPurchaseOrder@75(FromPurchaseHeader@1000 : Record 38;ToPurchaseHeader@1001 : Record 38);
    BEGIN
      ToPurchaseHeader.GET(ToPurchaseHeader."Document Type",ToPurchaseHeader."No.");
      ToPurchaseHeader.TESTFIELD("Ship-to Address",FromPurchaseHeader."Ship-to Address");
      ToPurchaseHeader.TESTFIELD("Ship-to Address 2",FromPurchaseHeader."Ship-to Address 2");
      ToPurchaseHeader.TESTFIELD("Ship-to City",FromPurchaseHeader."Ship-to City");
      ToPurchaseHeader.TESTFIELD("Ship-to Country/Region Code",FromPurchaseHeader."Ship-to Country/Region Code");
      ToPurchaseHeader.TESTFIELD("Ship-to County",FromPurchaseHeader."Ship-to County");
      ToPurchaseHeader.TESTFIELD("Ship-to Name",FromPurchaseHeader."Ship-to Name");
      ToPurchaseHeader.TESTFIELD("Ship-to Name 2",FromPurchaseHeader."Ship-to Name 2");
      ToPurchaseHeader.TESTFIELD("Ship-to Post Code",FromPurchaseHeader."Ship-to Post Code");
      ToPurchaseHeader.TESTFIELD("Ship-to Contact",FromPurchaseHeader."Ship-to Contact");
      ToPurchaseHeader.TESTFIELD("Inbound Whse. Handling Time",FromPurchaseHeader."Inbound Whse. Handling Time");
      ToPurchaseHeader.TESTFIELD("Location Code",FromPurchaseHeader."Location Code");
    END;

    BEGIN
    {
      // [FEATURE] [Copy Document]
    }
    END.
  }
}

