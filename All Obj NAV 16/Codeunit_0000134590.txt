OBJECT Codeunit 134590 Mandatory Fields Tests
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1001 : Codeunit 130000;
      LibrarySales@1002 : Codeunit 130509;
      LibraryPurchase@1003 : Codeunit 130512;
      UnexpectedShowMandatoryValueTxt@1004 : TextConst 'ENU=Unexpected value of ShowMandatory property.';

    [Test]
    PROCEDURE MandatoryFieldsOnItem@1();
    VAR
      ItemCard@1000 : TestPage 30;
    BEGIN
      ItemCard.OPENNEW;
      Assert.IsTrue(ItemCard.Description.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(ItemCard."Base Unit of Measure".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(ItemCard."Gen. Prod. Posting Group".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(ItemCard."VAT Prod. Posting Group".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(ItemCard."Inventory Posting Group".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      ItemCard.CLOSE;
    END;

    [Test]
    PROCEDURE MandatoryFieldsOnCustomer@3();
    VAR
      CustomerCard@1000 : TestPage 21;
    BEGIN
      CustomerCard.OPENNEW;
      Assert.IsTrue(CustomerCard.Name.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(CustomerCard."Gen. Bus. Posting Group".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(CustomerCard."VAT Bus. Posting Group".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(CustomerCard."Customer Posting Group".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(CustomerCard."Payment Terms Code".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      CustomerCard.CLOSE;
    END;

    [Test]
    PROCEDURE MandatoryFieldsOnVendor@6();
    VAR
      VendorCard@1000 : TestPage 26;
    BEGIN
      VendorCard.OPENNEW;
      Assert.IsTrue(VendorCard.Name.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(VendorCard."Gen. Bus. Posting Group".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(VendorCard."VAT Bus. Posting Group".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(VendorCard."Vendor Posting Group".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      VendorCard.CLOSE;
    END;

    [Test]
    PROCEDURE MandatoryFieldsOnSalesDocuments@5();
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      VerifyMandatoryFieldsOnSalesInvoice(Customer);
      VerifyMandatoryFieldsOnSalesOrder(Customer);
      VerifyMandatoryFieldsOnSalesReturnOrder(Customer);
      VerifyMandatoryFieldsOnSalesQuote(Customer);
      VerifyMandatoryFieldsOnSalesCreditMemo(Customer);
    END;

    [Test]
    PROCEDURE MandatoryFieldsOnPurchaseDocuments@10();
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      VerifyMandatoryFieldsOnPurchaseInvoice(Vendor);
      VerifyMandatoryFieldsOnPurchaseOrder(Vendor);
      VerifyMandatoryFieldsOnPurchaseCreditMemo(Vendor);
    END;

    [Test]
    PROCEDURE MandatoryFieldsOnReminder@13();
    VAR
      Customer@1000 : Record 18;
      ReminderLine@1002 : Record 296;
      ReminderTerms@1003 : Record 292;
      Reminder@1001 : TestPage 434;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Reminder.OPENNEW;
      Assert.IsTrue(Reminder."Customer No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(Reminder."Reminder Terms Code".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Reminder."Customer No.".SETVALUE(Customer."No.");
      ReminderTerms.FINDFIRST;
      Reminder."Reminder Terms Code".SETVALUE(ReminderTerms.Code);
      Reminder.ReminderLines.NEW;
      Assert.IsTrue(Reminder.ReminderLines.Type.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(Reminder.ReminderLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(Reminder.ReminderLines."Document Type".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(Reminder.ReminderLines."Document No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Reminder.ReminderLines.Type.SETVALUE(ReminderLine.Type::"Customer Ledger Entry");
      Assert.IsFalse(Reminder.ReminderLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(Reminder.ReminderLines."Document Type".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(Reminder.ReminderLines."Document No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Reminder.ReminderLines.Type.SETVALUE(ReminderLine.Type::"G/L Account");
      Assert.IsTrue(Reminder.ReminderLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(Reminder.ReminderLines."Document Type".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(Reminder.ReminderLines."Document No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Reminder.CLOSE;
    END;

    [Test]
    PROCEDURE MandatoryFieldsOnFinanceChargeMemo@22();
    VAR
      Customer@1000 : Record 18;
      FinanceChargeMemoLine@1002 : Record 303;
      FinanceChargeTerms@1003 : Record 5;
      FinanceChargeMemo@1001 : TestPage 446;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      FinanceChargeMemo.OPENNEW;
      Assert.IsTrue(FinanceChargeMemo."Customer No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(FinanceChargeMemo."Fin. Charge Terms Code".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      FinanceChargeMemo."Customer No.".SETVALUE(Customer."No.");
      FinanceChargeTerms.FINDFIRST;
      FinanceChargeMemo."Fin. Charge Terms Code".SETVALUE(FinanceChargeTerms.Code);
      FinanceChargeMemo.FinChrgMemoLines.NEW;
      Assert.IsTrue(FinanceChargeMemo.FinChrgMemoLines.Type.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(FinanceChargeMemo.FinChrgMemoLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(FinanceChargeMemo.FinChrgMemoLines."Document Type".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(FinanceChargeMemo.FinChrgMemoLines."Document No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      FinanceChargeMemo.FinChrgMemoLines.Type.SETVALUE(FinanceChargeMemoLine.Type::"Customer Ledger Entry");
      Assert.IsFalse(FinanceChargeMemo.FinChrgMemoLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(FinanceChargeMemo.FinChrgMemoLines."Document Type".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(FinanceChargeMemo.FinChrgMemoLines."Document No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      FinanceChargeMemo.FinChrgMemoLines.Type.SETVALUE(FinanceChargeMemoLine.Type::"G/L Account");
      Assert.IsTrue(FinanceChargeMemo.FinChrgMemoLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(FinanceChargeMemo.FinChrgMemoLines."Document Type".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(FinanceChargeMemo.FinChrgMemoLines."Document No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      FinanceChargeMemo.CLOSE;
    END;

    [Test]
    PROCEDURE MandatoryFieldsOnCompanyInformation@4();
    VAR
      CompanyInformation@1000 : TestPage 1;
    BEGIN
      CompanyInformation.OPENEDIT;
      Assert.IsTrue(CompanyInformation.Name.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(CompanyInformation.Address.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(CompanyInformation."Post Code".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(CompanyInformation.City.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(CompanyInformation."Country/Region Code".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(CompanyInformation."Bank Name".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(CompanyInformation."Bank Branch No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(CompanyInformation."Bank Account No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(CompanyInformation.IBAN.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);

      // if you set Bank Branch No. and Bank Account No., IBAN is no longer mandatory
      CompanyInformation."Bank Branch No.".SETVALUE('0123');
      CompanyInformation."Bank Account No.".SETVALUE('3176000000');
      Assert.IsFalse(CompanyInformation.IBAN.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);

      // if you set IBAN, Bank Branch No. and Bank Account No. are no longer mandatory
      CompanyInformation."Bank Branch No.".SETVALUE('');
      CompanyInformation."Bank Account No.".SETVALUE('');
      CompanyInformation.IBAN.SETVALUE('DK44 0123 3176 0000 00');
      Assert.IsFalse(CompanyInformation."Bank Branch No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(CompanyInformation."Bank Account No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      CompanyInformation.CLOSE;
    END;

    LOCAL PROCEDURE VerifyMandatoryFieldsOnSalesInvoice@8(Customer@1000 : Record 18);
    VAR
      SalesLine@1002 : Record 37;
      SalesInvoice@1001 : TestPage 43;
    BEGIN
      SetExternalDocNoMandatory(TRUE);
      SalesInvoice.OPENNEW;
      Assert.IsTrue(SalesInvoice."Sell-to Customer No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(SalesInvoice."External Document No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesInvoice."Sell-to Customer No.".SETVALUE(Customer."No.");
      SalesInvoice.SalesLines.NEW;
      Assert.IsFalse(SalesInvoice.SalesLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(SalesInvoice.SalesLines.Quantity.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(SalesInvoice.SalesLines."Unit Price".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesInvoice.SalesLines.Type.SETVALUE(SalesLine.Type::Item);
      Assert.IsTrue(SalesInvoice.SalesLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(SalesInvoice.SalesLines.Quantity.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(SalesInvoice.SalesLines."Unit Price".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesInvoice.CLOSE;

      // verify that external document number is not mandatory if you specify so in the setup
      SetExternalDocNoMandatory(FALSE);
      SalesInvoice.OPENNEW;
      Assert.IsFalse(SalesInvoice."External Document No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesInvoice.CLOSE;
    END;

    LOCAL PROCEDURE VerifyMandatoryFieldsOnSalesOrder@9(Customer@1000 : Record 18);
    VAR
      SalesLine@1002 : Record 37;
      InventorySetup@1003 : Record 313;
      SalesOrder@1001 : TestPage 42;
    BEGIN
      SetExternalDocNoMandatory(TRUE);
      SalesOrder.OPENNEW;
      Assert.IsTrue(SalesOrder."Sell-to Customer No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(SalesOrder."External Document No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesOrder."Sell-to Customer No.".SETVALUE(Customer."No.");
      SalesOrder.SalesLines.NEW;
      Assert.IsFalse(SalesOrder.SalesLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(SalesOrder.SalesLines.Quantity.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(SalesOrder.SalesLines."Unit Price".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(SalesOrder.SalesLines."Location Code".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      InventorySetup.GET;
      InventorySetup."Location Mandatory" := TRUE;
      InventorySetup.MODIFY;
      SalesOrder.SalesLines.Type.SETVALUE(SalesLine.Type::Item);
      Assert.IsTrue(SalesOrder.SalesLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(SalesOrder.SalesLines.Quantity.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(SalesOrder.SalesLines."Unit Price".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(SalesOrder.SalesLines."Location Code".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesOrder.CLOSE;

      // verify that external document number is not mandatory if you specify so in the setup
      SetExternalDocNoMandatory(FALSE);
      SalesOrder.OPENNEW;
      Assert.IsFalse(SalesOrder."External Document No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesOrder.CLOSE;
    END;

    LOCAL PROCEDURE VerifyMandatoryFieldsOnSalesReturnOrder@2(Customer@1000 : Record 18);
    VAR
      SalesLine@1002 : Record 37;
      SalesReturnOrder@1001 : TestPage 6630;
    BEGIN
      SalesReturnOrder.OPENNEW;
      Assert.IsTrue(SalesReturnOrder."Sell-to Customer No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesReturnOrder."Sell-to Customer No.".SETVALUE(Customer."No.");
      SalesReturnOrder.SalesLines.NEW;
      Assert.IsFalse(SalesReturnOrder.SalesLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(SalesReturnOrder.SalesLines.Quantity.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(SalesReturnOrder.SalesLines."Unit Price".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesReturnOrder.SalesLines.Type.SETVALUE(SalesLine.Type::Item);
      Assert.IsTrue(SalesReturnOrder.SalesLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(SalesReturnOrder.SalesLines.Quantity.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(SalesReturnOrder.SalesLines."Unit Price".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesReturnOrder.CLOSE;
    END;

    LOCAL PROCEDURE VerifyMandatoryFieldsOnSalesQuote@12(Customer@1000 : Record 18);
    VAR
      SalesLine@1002 : Record 37;
      SalesQuote@1001 : TestPage 41;
    BEGIN
      SalesQuote.OPENNEW;
      Assert.IsTrue(SalesQuote."Sell-to Customer No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesQuote."Sell-to Customer No.".SETVALUE(Customer."No.");
      SalesQuote.SalesLines.NEW;
      Assert.IsFalse(SalesQuote.SalesLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(SalesQuote.SalesLines.Quantity.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(SalesQuote.SalesLines."Unit Price".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesQuote.SalesLines.Type.SETVALUE(SalesLine.Type::Item);
      Assert.IsTrue(SalesQuote.SalesLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(SalesQuote.SalesLines.Quantity.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(SalesQuote.SalesLines."Unit Price".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesQuote.CLOSE;
    END;

    LOCAL PROCEDURE VerifyMandatoryFieldsOnSalesCreditMemo@14(Customer@1000 : Record 18);
    VAR
      SalesLine@1002 : Record 37;
      SalesCreditMemo@1001 : TestPage 44;
    BEGIN
      SetExternalDocNoMandatory(TRUE);
      SalesCreditMemo.OPENNEW;
      Assert.IsTrue(SalesCreditMemo."Sell-to Customer No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(SalesCreditMemo."External Document No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesCreditMemo."Sell-to Customer No.".SETVALUE(Customer."No.");
      SalesCreditMemo.SalesLines.NEW;
      Assert.IsFalse(SalesCreditMemo.SalesLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(SalesCreditMemo.SalesLines.Quantity.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(SalesCreditMemo.SalesLines."Unit Price".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesCreditMemo.SalesLines.Type.SETVALUE(SalesLine.Type::Item);
      Assert.IsTrue(SalesCreditMemo.SalesLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(SalesCreditMemo.SalesLines.Quantity.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(SalesCreditMemo.SalesLines."Unit Price".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesCreditMemo.CLOSE;

      // verify that external document number is not mandatory if you specify so in the setup
      SetExternalDocNoMandatory(FALSE);
      SalesCreditMemo.OPENNEW;
      Assert.IsFalse(SalesCreditMemo."External Document No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      SalesCreditMemo.CLOSE;
    END;

    LOCAL PROCEDURE VerifyMandatoryFieldsOnPurchaseInvoice@15(Vendor@1000 : Record 23);
    VAR
      PurchaseLine@1002 : Record 39;
      PurchaseInvoice@1001 : TestPage 51;
    BEGIN
      SetVendorInvoiceNoMandatory(TRUE);
      PurchaseInvoice.OPENNEW;
      Assert.IsTrue(PurchaseInvoice."Buy-from Vendor No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(PurchaseInvoice."Vendor Invoice No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      PurchaseInvoice."Buy-from Vendor No.".SETVALUE(Vendor."No.");
      PurchaseInvoice.PurchLines.NEW;
      Assert.IsFalse(PurchaseInvoice.PurchLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(PurchaseInvoice.PurchLines.Quantity.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(PurchaseInvoice.PurchLines."Direct Unit Cost".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      PurchaseInvoice.PurchLines.Type.SETVALUE(PurchaseLine.Type::Item);
      Assert.IsTrue(PurchaseInvoice.PurchLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(PurchaseInvoice.PurchLines.Quantity.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(PurchaseInvoice.PurchLines."Direct Unit Cost".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      PurchaseInvoice.CLOSE;

      // verify that external document number is not mandatory if you specify so in the setup
      SetVendorInvoiceNoMandatory(FALSE);
      PurchaseInvoice.OPENNEW;
      Assert.IsFalse(PurchaseInvoice."Vendor Invoice No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      PurchaseInvoice.CLOSE;
    END;

    LOCAL PROCEDURE VerifyMandatoryFieldsOnPurchaseOrder@16(Vendor@1000 : Record 23);
    VAR
      PurchaseLine@1002 : Record 39;
      PurchaseOrder@1001 : TestPage 50;
    BEGIN
      SetVendorInvoiceNoMandatory(TRUE);
      PurchaseOrder.OPENNEW;
      Assert.IsTrue(PurchaseOrder."Buy-from Vendor No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(PurchaseOrder."Vendor Invoice No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      PurchaseOrder."Buy-from Vendor No.".SETVALUE(Vendor."No.");
      PurchaseOrder.PurchLines.NEW;
      Assert.IsFalse(PurchaseOrder.PurchLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(PurchaseOrder.PurchLines.Quantity.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(PurchaseOrder.PurchLines."Direct Unit Cost".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      PurchaseOrder.PurchLines.Type.SETVALUE(PurchaseLine.Type::Item);
      Assert.IsTrue(PurchaseOrder.PurchLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(PurchaseOrder.PurchLines.Quantity.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(PurchaseOrder.PurchLines."Direct Unit Cost".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      PurchaseOrder.CLOSE;

      // verify that external document number is not mandatory if you specify so in the setup
      SetVendorInvoiceNoMandatory(FALSE);
      PurchaseOrder.OPENNEW;
      Assert.IsFalse(PurchaseOrder."Vendor Invoice No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      PurchaseOrder.CLOSE;
    END;

    LOCAL PROCEDURE VerifyMandatoryFieldsOnPurchaseCreditMemo@17(Vendor@1000 : Record 23);
    VAR
      PurchaseLine@1002 : Record 39;
      PurchaseCreditMemo@1001 : TestPage 52;
    BEGIN
      SetVendorInvoiceNoMandatory(TRUE);
      PurchaseCreditMemo.OPENNEW;
      Assert.IsTrue(PurchaseCreditMemo."Buy-from Vendor No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(PurchaseCreditMemo."Vendor Cr. Memo No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      PurchaseCreditMemo."Buy-from Vendor No.".SETVALUE(Vendor."No.");
      PurchaseCreditMemo.PurchLines.NEW;
      Assert.IsFalse(PurchaseCreditMemo.PurchLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(PurchaseCreditMemo.PurchLines.Quantity.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsFalse(PurchaseCreditMemo.PurchLines."Direct Unit Cost".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      PurchaseCreditMemo.PurchLines.Type.SETVALUE(PurchaseLine.Type::Item);
      Assert.IsTrue(PurchaseCreditMemo.PurchLines."No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(PurchaseCreditMemo.PurchLines.Quantity.SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(PurchaseCreditMemo.PurchLines."Direct Unit Cost".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      Assert.IsTrue(PurchaseCreditMemo."Vendor Cr. Memo No.".SHOWMANDATORY,UnexpectedShowMandatoryValueTxt);
      PurchaseCreditMemo.CLOSE;
    END;

    LOCAL PROCEDURE SetVendorInvoiceNoMandatory@7(VendorInvoiceNoMandatory@1000 : Boolean);
    VAR
      PurchasesPayablesSetup@1001 : Record 312;
    BEGIN
      PurchasesPayablesSetup.FINDFIRST;
      PurchasesPayablesSetup."Ext. Doc. No. Mandatory" := VendorInvoiceNoMandatory;
      PurchasesPayablesSetup.MODIFY;
    END;

    LOCAL PROCEDURE SetExternalDocNoMandatory@11(ExternalDocNoMandatory@1000 : Boolean);
    VAR
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      SalesReceivablesSetup.FINDFIRST;
      SalesReceivablesSetup."Ext. Doc. No. Mandatory" := ExternalDocNoMandatory;
      SalesReceivablesSetup.MODIFY;
    END;

    BEGIN
    {
      // [FEATURE] [Show Mandatory] [UI]
    }
    END.
  }
}

