OBJECT Codeunit 137015 SCM Pick Worksheet
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ErrorDifferentQty@1004 : TextConst 'ENU=Quantity on pick worksheet line different from expected.';
      LibraryInventory@1006 : Codeunit 132201;
      LibraryPurchase@1010 : Codeunit 130512;
      LibrarySales@1011 : Codeunit 130509;
      LibraryWarehouse@1009 : Codeunit 132204;
      LibraryVariableStorage@1000 : Codeunit 131004;
      LibraryRandom@1002 : Codeunit 130440;
      LibrarySetupStorage@1012 : Codeunit 131009;
      Assert@1005 : Codeunit 130000;
      ErrorDifferentQtyToHandle@1003 : TextConst 'ENU=Quantity to Handle on pick worksheet line different from expected.';
      ErrorDifferentAvailQty@1008 : TextConst 'ENU=Quantity Available to Pick on pick worksheet line different from expected.';
      ErrorDifferentQtyOnPickLine@1015 : TextConst 'ENU=Quantity to Handle on pick line different from expected.';
      IsInitialized@1007 : Boolean;
      AdjmtBinCodeErr@1001 : TextConst 'ENU=Adjustment Bin must be equal to ''No''';

    [Test]
    PROCEDURE WMSTC17TC19@13();
    VAR
      Item@1004 : Record 27;
      Location@1003 : Record 14;
      WhseWorksheetTemplate@1006 : Record 7328;
      WhseWorksheetName@1007 : Record 7327;
      WhseWorksheetLine@1001 : Record 7326;
      WhseActivityLine@1005 : Record 5767;
      Shipment1No@1002 : Code[20];
      Shipment2No@1000 : Code[20];
    BEGIN
      // Setup.
      Initialize;
      GetPickWksheetTemplate(WhseWorksheetTemplate);
      SetupLocation(Location,WhseWorksheetTemplate.Name,TRUE,TRUE,TRUE);
      WhseWorksheetLine.DELETEALL;
      LibraryInventory.CreateItem(Item);
      CreatePurchase(Item."No.",Location.Code,10,10);
      Shipment1No := CreateSales(Item."No.",Location.Code,5,TRUE,TRUE,FALSE,0);
      Shipment2No := CreateSales(Item."No.",Location.Code,3,FALSE,TRUE,FALSE,0);

      // Exercise.
      GetPickWksheetName(WhseWorksheetName);
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment1No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,5,5,10);

      // Exercise.
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment2No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,5,5,7);
      PickWorkSheetValidateLine(WhseWorksheetLine,20000,3,3,5);

      // Exercise.
      CreatePickFromWksh(WhseWorksheetLine,20000,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        Location.Code,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);
      CreatePickFromWksh(WhseWorksheetLine,10000,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        Location.Code,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);

      // Validate.
      ValidatePick(WhseActivityLine."Action Type"::Take,Shipment1No,5);
      ValidatePick(WhseActivityLine."Action Type"::Place,Shipment1No,5);
      ValidatePick(WhseActivityLine."Action Type"::Take,Shipment2No,3);
      ValidatePick(WhseActivityLine."Action Type"::Place,Shipment2No,3);
    END;

    [Test]
    PROCEDURE WMSTC18TC20@7();
    VAR
      Item@1004 : Record 27;
      Location@1003 : Record 14;
      WhseWorksheetTemplate@1007 : Record 7328;
      WhseWorksheetName@1006 : Record 7327;
      WhseWorksheetLine@1001 : Record 7326;
      WhseActivityLine@1005 : Record 5767;
      Shipment1No@1002 : Code[20];
      Shipment2No@1000 : Code[20];
    BEGIN
      // Setup.
      Initialize;
      GetPickWksheetTemplate(WhseWorksheetTemplate);
      SetupLocation(Location,WhseWorksheetTemplate.Name,TRUE,TRUE,TRUE);
      WhseWorksheetLine.DELETEALL;
      LibraryInventory.CreateItem(Item);
      CreatePurchase(Item."No.",Location.Code,10,8);
      Shipment1No := CreateSales(Item."No.",Location.Code,5,TRUE,TRUE,FALSE,0);
      Shipment2No := CreateSales(Item."No.",Location.Code,3,FALSE,TRUE,FALSE,0);

      // Exercise.
      GetPickWksheetName(WhseWorksheetName);
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment1No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,5,5,8);

      // Exercise.
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment2No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,5,5,5);
      PickWorkSheetValidateLine(WhseWorksheetLine,20000,3,3,3);

      // Exercise.
      CreatePickFromWksh(WhseWorksheetLine,20000,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        Location.Code,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);
      CreatePickFromWksh(WhseWorksheetLine,10000,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        Location.Code,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);

      // Validate.
      ValidatePick(WhseActivityLine."Action Type"::Take,Shipment1No,5);
      ValidatePick(WhseActivityLine."Action Type"::Place,Shipment1No,5);
      ValidatePick(WhseActivityLine."Action Type"::Take,Shipment2No,3);
      ValidatePick(WhseActivityLine."Action Type"::Place,Shipment2No,3);
    END;

    [Test]
    PROCEDURE WMSTC21@15();
    VAR
      Item@1004 : Record 27;
      Location@1003 : Record 14;
      WhseWorksheetTemplate@1007 : Record 7328;
      WhseWorksheetName@1002 : Record 7327;
      WhseWorksheetLine@1001 : Record 7326;
      WhseActivityLine@1005 : Record 5767;
      Shipment2No@1000 : Code[20];
      Shipment3No@1006 : Code[20];
    BEGIN
      // Setup.
      Initialize;
      GetPickWksheetTemplate(WhseWorksheetTemplate);
      SetupLocation(Location,WhseWorksheetTemplate.Name,TRUE,TRUE,TRUE);
      WhseWorksheetLine.DELETEALL;
      LibraryInventory.CreateItem(Item);
      CreatePurchase(Item."No.",Location.Code,10,9);
      CreateSales(Item."No.",Location.Code,5,FALSE,TRUE,TRUE,2);
      Shipment2No := CreateSales(Item."No.",Location.Code,1,FALSE,TRUE,FALSE,0);
      Shipment3No := CreateSales(Item."No.",Location.Code,3,FALSE,TRUE,FALSE,0);

      // Exercise.
      GetPickWksheetName(WhseWorksheetName);
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment2No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,1,1,4);

      // Exercise.
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment3No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,1,1,1);
      PickWorkSheetValidateLine(WhseWorksheetLine,20000,3,3,3);

      // Exercise.
      CreatePickFromWksh(WhseWorksheetLine,20000,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        Location.Code,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);
      CreatePickFromWksh(WhseWorksheetLine,10000,WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        Location.Code,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);

      // Validate.
      ValidatePick(WhseActivityLine."Action Type"::Take,Shipment2No,1);
      ValidatePick(WhseActivityLine."Action Type"::Place,Shipment2No,1);
      ValidatePick(WhseActivityLine."Action Type"::Take,Shipment3No,3);
      ValidatePick(WhseActivityLine."Action Type"::Place,Shipment3No,3);
    END;

    [Test]
    PROCEDURE WMSTC22@16();
    VAR
      Item@1004 : Record 27;
      Location@1003 : Record 14;
      WhseWorksheetTemplate@1006 : Record 7328;
      WhseWorksheetName@1005 : Record 7327;
      WhseWorksheetLine@1001 : Record 7326;
      Shipment1No@1002 : Code[20];
      Shipment2No@1000 : Code[20];
    BEGIN
      // Setup.
      Initialize;
      GetPickWksheetTemplate(WhseWorksheetTemplate);
      SetupLocation(Location,WhseWorksheetTemplate.Name,TRUE,TRUE,TRUE);
      WhseWorksheetLine.DELETEALL;
      LibraryInventory.CreateItem(Item);
      CreatePurchase(Item."No.",Location.Code,10,10);
      Shipment1No := CreateSales(Item."No.",Location.Code,5,TRUE,TRUE,FALSE,0);
      Shipment2No := CreateSales(Item."No.",Location.Code,3,FALSE,TRUE,FALSE,0);

      // Exercise.
      GetPickWksheetName(WhseWorksheetName);
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment1No);
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment2No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,5,5,7);
      PickWorkSheetValidateLine(WhseWorksheetLine,20000,3,3,5);

      // Exercise.
      PickWorksheetUpdateQtyToHandle(WhseWorksheetLine,20000,2);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,5,5,8);
      PickWorkSheetValidateLine(WhseWorksheetLine,20000,3,2,5);
    END;

    [Test]
    PROCEDURE WMSTC23@17();
    VAR
      Item@1004 : Record 27;
      Location@1003 : Record 14;
      WhseWorksheetTemplate@1006 : Record 7328;
      WhseWorksheetName@1005 : Record 7327;
      WhseWorksheetLine@1001 : Record 7326;
      Shipment1No@1002 : Code[20];
      Shipment2No@1000 : Code[20];
    BEGIN
      // Setup.
      Initialize;
      GetPickWksheetTemplate(WhseWorksheetTemplate);
      SetupLocation(Location,WhseWorksheetTemplate.Name,TRUE,TRUE,TRUE);
      WhseWorksheetLine.DELETEALL;
      LibraryInventory.CreateItem(Item);
      CreatePurchase(Item."No.",Location.Code,10,8);
      Shipment1No := CreateSales(Item."No.",Location.Code,5,TRUE,TRUE,FALSE,0);
      Shipment2No := CreateSales(Item."No.",Location.Code,3,FALSE,TRUE,FALSE,0);

      // Exercise.
      GetPickWksheetName(WhseWorksheetName);
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment1No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,5,5,8);

      // Exercise.
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment2No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,5,5,5);
      PickWorkSheetValidateLine(WhseWorksheetLine,20000,3,3,3);

      // Exercise.
      PickWorksheetUpdateQtyToHandle(WhseWorksheetLine,20000,2);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,5,5,6);
      PickWorkSheetValidateLine(WhseWorksheetLine,20000,3,2,3);
    END;

    [Test]
    PROCEDURE WMSTC24@20();
    VAR
      Item@1004 : Record 27;
      Location@1003 : Record 14;
      WhseWorksheetTemplate@1005 : Record 7328;
      WhseWorksheetName@1002 : Record 7327;
      WhseWorksheetLine@1001 : Record 7326;
      Shipment3No@1006 : Code[20];
      Shipment4No@1000 : Code[20];
    BEGIN
      // Setup.
      Initialize;
      GetPickWksheetTemplate(WhseWorksheetTemplate);
      SetupLocation(Location,WhseWorksheetTemplate.Name,TRUE,TRUE,TRUE);
      WhseWorksheetLine.DELETEALL;
      LibraryInventory.CreateItem(Item);
      CreatePurchase(Item."No.",Location.Code,10,9);
      CreateSales(Item."No.",Location.Code,5,FALSE,TRUE,TRUE,2);
      CreateSales(Item."No.",Location.Code,4,TRUE,FALSE,FALSE,0);
      Shipment3No := CreateSales(Item."No.",Location.Code,5,FALSE,TRUE,FALSE,0);
      Shipment4No := CreateSales(Item."No.",Location.Code,8,FALSE,TRUE,FALSE,0);
      CreateSales(Item."No.",Location.Code,8,FALSE,TRUE,FALSE,0);

      // Exercise.
      GetPickWksheetName(WhseWorksheetName);
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment3No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,5,0,0);

      // Exercise.
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment4No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,5,0,0);
      PickWorkSheetValidateLine(WhseWorksheetLine,20000,8,0,0);
    END;

    [Test]
    PROCEDURE WMSTC25@21();
    VAR
      Item@1004 : Record 27;
      Location@1003 : Record 14;
      WhseWorksheetTemplate@1006 : Record 7328;
      WhseWorksheetName@1005 : Record 7327;
      WhseWorksheetLine@1001 : Record 7326;
      Shipment3No@1000 : Code[20];
      Shipment4No@1002 : Code[20];
    BEGIN
      // Setup.
      Initialize;
      GetPickWksheetTemplate(WhseWorksheetTemplate);
      SetupLocation(Location,WhseWorksheetTemplate.Name,TRUE,TRUE,TRUE);
      WhseWorksheetLine.DELETEALL;
      LibraryInventory.CreateItem(Item);
      CreatePurchase(Item."No.",Location.Code,10,9);
      CreateSales(Item."No.",Location.Code,5,FALSE,TRUE,TRUE,3);
      CreateSales(Item."No.",Location.Code,1,TRUE,FALSE,FALSE,0);
      Shipment3No := CreateSales(Item."No.",Location.Code,4,FALSE,TRUE,FALSE,0);
      Shipment4No := CreateSales(Item."No.",Location.Code,2,FALSE,TRUE,FALSE,0);
      CreateSales(Item."No.",Location.Code,2,FALSE,TRUE,FALSE,0);

      // Exercise.
      GetPickWksheetName(WhseWorksheetName);
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment3No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,4,3,3);

      // Exercise.
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment4No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,4,3,3);
      PickWorkSheetValidateLine(WhseWorksheetLine,20000,2,0,0);
    END;

    [Test]
    PROCEDURE WMSTC26@22();
    VAR
      Item@1004 : Record 27;
      Location@1003 : Record 14;
      WhseWorksheetTemplate@1005 : Record 7328;
      WhseWorksheetName@1002 : Record 7327;
      WhseWorksheetLine@1001 : Record 7326;
      Shipment2No@1000 : Code[20];
      Shipment3No@1006 : Code[20];
    BEGIN
      // Setup.
      Initialize;
      GetPickWksheetTemplate(WhseWorksheetTemplate);
      SetupLocation(Location,WhseWorksheetTemplate.Name,TRUE,TRUE,TRUE);
      WhseWorksheetLine.DELETEALL;
      LibraryInventory.CreateItem(Item);
      CreatePurchase(Item."No.",Location.Code,10,9);
      CreateSales(Item."No.",Location.Code,5,FALSE,TRUE,TRUE,2);
      Shipment2No := CreateSales(Item."No.",Location.Code,5,FALSE,TRUE,FALSE,0);
      Shipment3No := CreateSales(Item."No.",Location.Code,8,FALSE,TRUE,FALSE,0);

      // Exercise.
      GetPickWksheetName(WhseWorksheetName);
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment2No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,5,4,4);

      // Exercise.
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment3No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,5,4,4);
      PickWorkSheetValidateLine(WhseWorksheetLine,20000,8,0,0);
    END;

    [Test]
    PROCEDURE GREENTC1@30();
    VAR
      Item@1004 : Record 27;
      Location@1003 : Record 14;
      WhseWorksheetTemplate@1005 : Record 7328;
      WhseWorksheetName@1002 : Record 7327;
      WhseWorksheetLine@1001 : Record 7326;
      Shipment2No@1000 : Code[20];
      Shipment3No@1006 : Code[20];
    BEGIN
      // Setup.
      Initialize;
      GetPickWksheetTemplate(WhseWorksheetTemplate);
      SetupLocation(Location,WhseWorksheetTemplate.Name,FALSE,TRUE,FALSE);
      WhseWorksheetLine.DELETEALL;
      LibraryInventory.CreateItem(Item);
      CreatePurchase(Item."No.",Location.Code,10,10);
      CreateSales(Item."No.",Location.Code,5,FALSE,TRUE,TRUE,2);
      Shipment2No := CreateSales(Item."No.",Location.Code,2,FALSE,TRUE,FALSE,0);
      Shipment3No := CreateSales(Item."No.",Location.Code,3,FALSE,TRUE,FALSE,0);

      // Exercise.
      GetPickWksheetName(WhseWorksheetName);
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment2No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,2,2,5);

      // Exercise.
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment3No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,2,2,2);
      PickWorkSheetValidateLine(WhseWorksheetLine,20000,3,3,3);
    END;

    [Test]
    PROCEDURE GREENTC2@31();
    VAR
      Item@1004 : Record 27;
      Location@1003 : Record 14;
      WhseWorksheetTemplate@1005 : Record 7328;
      WhseWorksheetName@1002 : Record 7327;
      WhseWorksheetLine@1001 : Record 7326;
      Shipment2No@1000 : Code[20];
      Shipment3No@1006 : Code[20];
    BEGIN
      // Setup.
      Initialize;
      GetPickWksheetTemplate(WhseWorksheetTemplate);
      SetupLocation(Location,WhseWorksheetTemplate.Name,FALSE,TRUE,FALSE);
      WhseWorksheetLine.DELETEALL;
      LibraryInventory.CreateItem(Item);
      CreatePurchase(Item."No.",Location.Code,10,10);
      CreateSales(Item."No.",Location.Code,5,FALSE,TRUE,TRUE,2);
      Shipment2No := CreateSales(Item."No.",Location.Code,6,FALSE,TRUE,FALSE,0);
      Shipment3No := CreateSales(Item."No.",Location.Code,3,FALSE,TRUE,FALSE,0);

      // Exercise.
      GetPickWksheetName(WhseWorksheetName);
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment2No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,6,5,5);

      // Exercise.
      PickWorksheetGetSourceDocument(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,Location.Code,0,Shipment3No);

      // Validate.
      PickWorkSheetValidateLine(WhseWorksheetLine,10000,6,5,5);
      PickWorkSheetValidateLine(WhseWorksheetLine,20000,3,0,0);
    END;

    [Test]
    PROCEDURE GetBinBlank@11();
    VAR
      WhseWorksheetTemplate@1002 : Record 7328;
      WhseWorksheetLine@1000 : Record 7326;
      Location@1001 : Record 14;
    BEGIN
      // [FEATURE] [Whse. Worksheet Line]
      // [SCENARIO 378631] Procedure "GetBin" of "Whse. Worksheet Line" table should clear global variable Bin if Bin code is blank
      Initialize;

      // [GIVEN] Location "L" with Adjustment Bin Code "X"
      GetPickWksheetTemplate(WhseWorksheetTemplate);
      SetupLocation(Location,WhseWorksheetTemplate.Name,TRUE,FALSE,FALSE);

      // [GIVEN] Run CheckBin for Location "L" and Bin "X"
      ASSERTERROR WhseWorksheetLine.CheckBin(Location.Code,Location."Adjustment Bin Code",FALSE);

      // [GIVEN] Catch Error "Adjustment Bin must be equal to 'No'"
      Assert.ExpectedError(AdjmtBinCodeErr);

      // [WHEN] Run CheckBin again with Location "X" and Bin blank
      WhseWorksheetLine.CheckBin(Location.Code,'',FALSE);

      // [THEN] No error is thrown
    END;

    [Test]
    [HandlerFunctions(PickSelectionPageHandler)]
    PROCEDURE PickWorksheetQtyToHandleValidatedWithReservAndNonPickableAllocation@2();
    VAR
      Item@1000 : Record 27;
      Location@1001 : Record 14;
      WarehouseActivityLine@1002 : Record 5767;
      WarehouseActivityHeader@1003 : Record 5766;
      Bin@1004 : Record 7354;
      WhseWorksheetLine@1005 : Record 7326;
      PurchaseQty@1006 : Decimal;
      SalesQty@1007 : Decimal;
    BEGIN
      // [FEATURE] [Pick Worksheet]
      // [SCENARIO 204644] It should be possible to set "Qty. to Handle" in the pick worksheet when item is reserved for the line's source document, and stock is partially allocated in a non-pickable bin
      Initialize;

      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateFullWMSLocation(Location,1);

      // [GIVEN] Create a warehouse receipt for 20 pcs of item "I" on a location with "Directed Put-away and Pick"
      PurchaseQty := LibraryRandom.RandIntInRange(20,50);
      // [GIVEN] Register a put-away for 10 pcs of item "I"
      CreatePurchase(Item."No.",Location.Code,PurchaseQty,PurchaseQty / 2);

      WarehouseActivityLine.SETRANGE("Location Code",Location.Code);
      WarehouseActivityLine.SETRANGE("Item No.",Item."No.");
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Place);
      WarehouseActivityLine.FINDFIRST;

      // [GIVEN] Put-away remaining 10 pcs into a put-away bin (non-pickable)
      Bin.SETRANGE("Location Code",Location.Code);
      Bin.SETRANGE("Bin Type Code",LibraryWarehouse.SelectBinType(FALSE,FALSE,TRUE,FALSE));
      Bin.FINDFIRST;

      WarehouseActivityLine.VALIDATE("Zone Code",Bin."Zone Code");
      WarehouseActivityLine.VALIDATE("Bin Code",Bin.Code);
      WarehouseActivityLine.MODIFY(TRUE);
      WarehouseActivityHeader.GET(WarehouseActivityLine."Activity Type",WarehouseActivityLine."No.");
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);

      SalesQty := PurchaseQty - LibraryRandom.RandInt(10);
      // [GIVEN] Create a sales order for 15 pcs of item "I" and reserve, do not post
      CreateSales(Item."No.",Location.Code,SalesQty,TRUE,FALSE,FALSE,0);
      // [GIVEN] Create another sales order for 5 pcs of item "I", reserve, release and create a warehouse shipment "WS"
      CreateSales(Item."No.",Location.Code,PurchaseQty - SalesQty,TRUE,TRUE,FALSE,0);

      // [GIVEN] In the pick worksheet, run "Get Warehouse Documents" and choose the shipment "WS" as a source
      LibraryVariableStorage.Enqueue(Location.Code);
      GetSingleWhsePickDoc(WhseWorksheetLine,Location.Code);

      // [WHEN] In the created pick worksheet lines, set "Qty. to Handle" = 5
      WhseWorksheetLine.VALIDATE("Qty. to Handle",WhseWorksheetLine.Quantity);

      // [THEN] Quantity is validated successfully
      WhseWorksheetLine.TESTFIELD("Qty. to Handle (Base)",WhseWorksheetLine."Qty. (Base)");
    END;

    [Test]
    [HandlerFunctions(PickSelectionPageHandler)]
    PROCEDURE AvailableToPickWithReservationAndPickedNotShippedLines@29();
    VAR
      Item@1000 : Record 27;
      Location@1001 : Record 14;
      WhseWorksheetLine@1005 : Record 7326;
      PurchaseHeader@1008 : Record 38;
      PurchaseLine@1009 : Record 39;
      PurchaseQty@1003 : Decimal;
      SalesQty@1002 : Decimal;
    BEGIN
      // [FEATURE] [Pick Worksheet] [Reservation]
      // [SCENARIO 204644] "Available Qty. to Pick" should be 0 in the pick worksheet when all stock is either reserved or pick, but not yet shipped
      Initialize;

      ResetDefaultSafetyLeadTime;

      // [GIVEN] Item "I"
      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateFullWMSLocation(Location,1);

      // [GIVEN] Post inventory of 10 pcs of item "I"
      PurchaseQty := LibraryRandom.RandIntInRange(20,50);
      CreatePurchase(Item."No.",Location.Code,PurchaseQty,PurchaseQty);

      // [GIVEN] Create a purchase order for 15 pcs of item "I"
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      CreatePurchaseLineWithLocation(PurchaseLine,PurchaseHeader,Item."No.",PurchaseQty * 1.5,Location.Code);

      // [GIVEN] Sales order for 25 pcs item "I". Reserve all 25 pcs, create a warehouse shipment and pick. Do not register.
      SalesQty := PurchaseQty * 2.5;
      CreateSales(Item."No.",Location.Code,SalesQty,TRUE,TRUE,TRUE,0);

      // [GIVEN] Open the pick worksheet and set "Qty. to Handle" = 15 (quantity not yet on pick lines)
      LibraryVariableStorage.Enqueue(Location.Code);
      GetSingleWhsePickDoc(WhseWorksheetLine,Location.Code);

      WhseWorksheetLine.SetCurrentFieldNo(WhseWorksheetLine.FIELDNO("Qty. to Handle"));
      WhseWorksheetLine.VALIDATE("Qty. to Handle",WhseWorksheetLine."Qty. Outstanding");

      // [WHEN] Calculate available quantity to pic on the pick worksheet line
      // [THEN] Quantity available to pick is 0
      Assert.AreEqual(0,WhseWorksheetLine.AvailableQtyToPick,ErrorDifferentQty);
    END;

    [Test]
    PROCEDURE PickWhenSalesReservationIsSplitOnInventory@24();
    VAR
      Item@1000 : Record 27;
      Location@1012 : Record 14;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      WhseReceiptHeader@1004 : Record 7316;
      WhseActivityLine@1006 : Record 5767;
      SalesHeader@1008 : Record 36;
      SalesLine@1009 : Record 37;
      WhseShipmentHeader@1011 : Record 7320;
      BaseQty@1003 : Decimal;
    BEGIN
      // [FEATURE] [Reservation]
      // [SCENARIO 305229] It should be possible to pick an item for a sales order when the sales document is reserved against the inventory, and reservation of each line is split on several item ledger entries

      LibraryInventory.CreateItem(Item);
      LibraryWarehouse.CreateFullWMSLocation(Location,2);

      // [GIVEN] Post stock of item "I" in two parts: 1 piece and 2 pcs
      BaseQty := LibraryRandom.RandInt(10);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,LibraryPurchase.CreateVendorNo);
      CreatePurchaseLineWithLocation(PurchaseLine,PurchaseHeader,Item."No.",BaseQty,Location.Code);
      CreatePurchaseLineWithLocation(PurchaseLine,PurchaseHeader,Item."No.",BaseQty * 2,Location.Code);

      CreateWarehouseReceiptFromPurchOrder(WhseReceiptHeader,PurchaseHeader);
      LibraryWarehouse.PostWhseReceipt(WhseReceiptHeader);

      RegisterWhseActivity(
        WhseActivityLine."Activity Type"::"Put-away",DATABASE::"Purchase Line",
        WhseActivityLine."Source Document"::"Purchase Order",PurchaseHeader."No.",0,'','');

      // [GIVEN] Create a sales order for item "I" with two lines: 2 pcs and 1 piece
      // [GIVEN] Reserve both sales lines
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,LibrarySales.CreateCustomerNo);
      CreateSalesLineWithLocation(SalesLine,SalesHeader,Item."No.",BaseQty * 2,Location.Code);
      LibrarySales.AutoReserveSalesLine(SalesLine);

      CreateSalesLineWithLocation(SalesLine,SalesHeader,Item."No.",BaseQty,Location.Code);
      LibrarySales.AutoReserveSalesLine(SalesLine);

      // [GIVEN] Release the sales order and create warehouse shipment
      CreateWarehouseShipmentFromSalesOrder(WhseShipmentHeader,SalesHeader);

      // [WHEN] Create pick from warehouse shipment
      LibraryWarehouse.CreatePick(WhseShipmentHeader);

      // [THEN] Total quantity in the pick is 3
      WhseActivityLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WhseActivityLine.SETRANGE("Source Document",WhseActivityLine."Source Document"::"Sales Order");
      WhseActivityLine.SETRANGE("Whse. Document No.",WhseShipmentHeader."No.");
      WhseActivityLine.SETRANGE("Action Type",WhseActivityLine."Action Type"::Take);
      WhseActivityLine.CALCSUMS(Quantity);
      WhseActivityLine.TESTFIELD(Quantity,BaseQty * 3);
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Initialize setup.
      LibrarySetupStorage.Restore;

      IF IsInitialized THEN
        EXIT;

      // Setup Demonstration data.
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibrarySetupStorage.Save(DATABASE::"Manufacturing Setup");

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Normal]
    LOCAL PROCEDURE CreateSales@25(ItemNo@1000 : Code[20];Location@1001 : Code[10];Quantity@1002 : Decimal;Reserve@1003 : Boolean;CreateShipment@1004 : Boolean;CreatePick@1005 : Boolean;QtyToRegister@1006 : Decimal) : Code[20];
    VAR
      SalesHeader@1015 : Record 36;
      SalesLine@1014 : Record 37;
      WhseShipmentHeader@1013 : Record 7320;
      WhseActivityLine@1010 : Record 5767;
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::Order,'');
      CreateSalesLineWithLocation(SalesLine,SalesHeader,ItemNo,Quantity,Location);

      IF Reserve THEN
        LibrarySales.AutoReserveSalesLine(SalesLine);

      IF CreateShipment THEN BEGIN
        CreateWarehouseShipmentFromSalesOrder(WhseShipmentHeader,SalesHeader);

        IF CreatePick THEN BEGIN
          LibraryWarehouse.CreatePick(WhseShipmentHeader);

          IF QtyToRegister <> 0 THEN
            RegisterWhseActivity(
              WhseActivityLine."Activity Type"::Pick,37,
              WhseActivityLine."Source Document"::"Sales Order",SalesHeader."No.",QtyToRegister,'','');
        END;
      END;

      EXIT(WhseShipmentHeader."No.");
    END;

    [Normal]
    LOCAL PROCEDURE CreatePurchase@36(ItemNo@1006 : Code[20];Location@1005 : Code[10];Quantity@1004 : Decimal;QtyToRegister@1000 : Decimal);
    VAR
      PurchaseHeader@1007 : Record 38;
      PurchaseLine@1003 : Record 39;
      WhseActivityLine@1001 : Record 5767;
      WhseReceiptHeader@1008 : Record 7316;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      CreatePurchaseLineWithLocation(PurchaseLine,PurchaseHeader,ItemNo,Quantity,Location);

      CreateWarehouseReceiptFromPurchOrder(WhseReceiptHeader,PurchaseHeader);
      LibraryWarehouse.PostWhseReceipt(WhseReceiptHeader);

      RegisterWhseActivity(
        WhseActivityLine."Activity Type"::"Put-away",39,WhseActivityLine."Source Document"::"Purchase Order",
        PurchaseHeader."No.",QtyToRegister,'',GetBin(Location,FALSE,FALSE,TRUE,TRUE));
    END;

    LOCAL PROCEDURE PickWorksheetGetSourceDocument@1(WkshTemplateName@1001 : Code[10];Name@1003 : Code[10];Location@1002 : Code[10];DocType@1004 : Option;DocNo@1005 : Code[20]);
    VAR
      WhsePickRqst@1006 : Record 7325;
      GetOutboundSourceDocuments@1007 : Report 7304;
    BEGIN
      GetOutboundSourceDocuments.SetPickWkshName(WkshTemplateName,Name,Location);
      WhsePickRqst.SETRANGE("Document Type",DocType);
      WhsePickRqst.SETRANGE("Document No.",DocNo);
      WhsePickRqst.FINDFIRST;
      GetOutboundSourceDocuments.SetHideDialog(TRUE);
      GetOutboundSourceDocuments.USEREQUESTPAGE(FALSE);
      GetOutboundSourceDocuments.SETTABLEVIEW(WhsePickRqst);
      GetOutboundSourceDocuments.RUNMODAL;
    END;

    LOCAL PROCEDURE PickWorkSheetValidateLine@3(WhseWorksheetLine@1000 : Record 7326;LineNo@1004 : Integer;Qty@1001 : Decimal;QtyToHandle@1002 : Decimal;QtyAvailToPick@1003 : Decimal);
    BEGIN
      WhseWorksheetLine.SETRANGE("Line No.",LineNo);
      WhseWorksheetLine.FINDFIRST;
      Assert.AreEqual(Qty,WhseWorksheetLine.Quantity,ErrorDifferentQty);
      Assert.AreEqual(QtyToHandle,WhseWorksheetLine."Qty. to Handle",ErrorDifferentQtyToHandle);
      Assert.AreEqual(QtyAvailToPick,WhseWorksheetLine.AvailableQtyToPick,ErrorDifferentAvailQty);
    END;

    LOCAL PROCEDURE PickWorksheetUpdateQtyToHandle@4(WhseWorksheetLine@1002 : Record 7326;LineNo@1000 : Integer;QtyToHandle@1001 : Decimal);
    BEGIN
      WhseWorksheetLine.SETRANGE("Line No.",LineNo);
      WhseWorksheetLine.FINDFIRST;
      WhseWorksheetLine.SetCurrentFieldNo(WhseWorksheetLine.FIELDNO("Qty. to Handle"));
      WhseWorksheetLine.VALIDATE("Qty. to Handle",QtyToHandle);
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePickFromWksh@99(VAR WhseWorksheetLine@1000 : Record 7326;LineNo@1014 : Integer;WkshTemplateName@1015 : Code[10];Name@1016 : Code[10];LocationCode@1017 : Code[10];AssignedID@1013 : Code[10];MaxNoOfLines@1012 : Integer;MaxNoOfSourceDoc@1011 : Integer;SortPick@1010 : ' ,Item,Document,Shelf/Bin No.,Due Date,Ship-To,Bin Ranking';PerShipTo@1009 : Boolean;PerItem@1008 : Boolean;PerZone@1007 : Boolean;PerBin@1006 : Boolean;PerWhseDoc@1005 : Boolean;PerDate@1004 : Boolean;PrintPick@1003 : Boolean);
    VAR
      WhseWorksheetLine2@1002 : Record 7326;
      CreatePick@1001 : Report 5754;
    BEGIN
      WhseWorksheetLine2 := WhseWorksheetLine;
      WhseWorksheetLine2.SETRANGE("Worksheet Template Name",WkshTemplateName);
      WhseWorksheetLine2.SETRANGE(Name,Name);
      WhseWorksheetLine2.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine2.SETRANGE("Line No.",LineNo);

      CreatePick.InitializeReport(
        AssignedID,MaxNoOfLines,MaxNoOfSourceDoc,SortPick,PerShipTo,PerItem,
        PerZone,PerBin,PerWhseDoc,PerDate,PrintPick,FALSE,FALSE);
      CreatePick.USEREQUESTPAGE(FALSE);
      CreatePick.SetWkshPickLine(WhseWorksheetLine2);
      CreatePick.RUNMODAL;
      CLEAR(CreatePick);

      WhseWorksheetLine := WhseWorksheetLine2;
    END;

    LOCAL PROCEDURE CreatePurchaseLineWithLocation@46(VAR PurchaseLine@1000 : Record 39;PurchaseHeader@1001 : Record 38;ItemNo@1002 : Code[20];Qty@1003 : Decimal;LocationCode@1004 : Code[10]);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Qty);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalesLineWithLocation@48(VAR SalesLine@1000 : Record 37;SalesHeader@1001 : Record 36;ItemNo@1002 : Code[20];Qty@1003 : Decimal;LocationCode@1004 : Code[10]);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Qty);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateWarehouseReceiptFromPurchOrder@56(VAR WhseReceiptHeader@1000 : Record 7316;VAR PurchaseHeader@1001 : Record 38);
    VAR
      WhseReceiptLine@1002 : Record 7317;
    BEGIN
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);

      WhseReceiptLine.SETRANGE("Source Document",WhseReceiptLine."Source Document"::"Purchase Order");
      WhseReceiptLine.SETRANGE("Source No.",PurchaseHeader."No.");
      WhseReceiptLine.FINDFIRST;

      WhseReceiptHeader.GET(WhseReceiptLine."No.");
    END;

    LOCAL PROCEDURE CreateWarehouseShipmentFromSalesOrder@52(VAR WhseShipmentHeader@1000 : Record 7320;VAR SalesHeader@1001 : Record 36);
    VAR
      WhseShipmentLine@1002 : Record 7321;
    BEGIN
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      WhseShipmentLine.SETRANGE("Source Document",WhseShipmentLine."Source Document"::"Sales Order");
      WhseShipmentLine.SETRANGE("Source No.",SalesHeader."No.");
      WhseShipmentLine.FINDFIRST;
      WhseShipmentHeader.GET(WhseShipmentLine."No.");
      LibraryWarehouse.ReleaseWarehouseShipment(WhseShipmentHeader);
    END;

    LOCAL PROCEDURE GetSingleWhsePickDoc@27(VAR WhseWorksheetLine@1002 : Record 7326;LocationCode@1000 : Code[10]);
    VAR
      WhseWorksheetTemplate@1001 : Record 7328;
      WhseWorksheetName@1003 : Record 7327;
      GetSourceDocOutbound@1004 : Codeunit 5752;
    BEGIN
      LibraryWarehouse.SelectWhseWorksheetTemplate(WhseWorksheetTemplate,WhseWorksheetTemplate.Type::Pick);
      LibraryWarehouse.CreateWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);

      GetSourceDocOutbound.GetSingleWhsePickDoc(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationCode);
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetTemplate.Name);
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.FINDFIRST;
    END;

    LOCAL PROCEDURE ValidatePick@19(LineType@1000 : 'Take,Place';ShipmentNo@1003 : Code[20];ExpectedQty@1001 : Decimal);
    VAR
      WhseActivityLine@1002 : Record 5767;
    BEGIN
      CLEAR(WhseActivityLine);
      WhseActivityLine.SETRANGE("Source Type",37);
      WhseActivityLine.SETRANGE("Source Document",WhseActivityLine."Source Document"::"Sales Order");
      WhseActivityLine.SETRANGE("Whse. Document No.",ShipmentNo);
      WhseActivityLine.SETRANGE("Action Type",LineType);
      WhseActivityLine.FINDFIRST;
      Assert.AreEqual(ExpectedQty,WhseActivityLine.Quantity,ErrorDifferentQtyOnPickLine);
    END;

    [Normal]
    LOCAL PROCEDURE SetupLocation@6(VAR Location@1000 : Record 14;WorksheetTemplateName@1005 : Code[20];IsDirected@1001 : Boolean;ShipmentRequired@1002 : Boolean;BinMandatory@1003 : Boolean);
    VAR
      Bin@1004 : Record 7354;
    BEGIN
      Location.INIT;
      IF NOT IsDirected THEN BEGIN
        Location.SETRANGE("Bin Mandatory",BinMandatory);
        Location.SETRANGE("Require Shipment",ShipmentRequired);
        Location.SETRANGE("Require Receive",TRUE);
        Location.SETRANGE("Require Pick",TRUE);
        Location.SETRANGE("Require Put-away",TRUE);
        Location.SETRANGE("Directed Put-away and Pick",IsDirected);
        IF NOT Location.FINDFIRST THEN BEGIN
          LibraryWarehouse.CreateLocation(Location);
          Location.VALIDATE("Require Put-away",TRUE);
          Location.VALIDATE("Require Pick",TRUE);
          Location.VALIDATE("Require Receive",ShipmentRequired);
          Location.VALIDATE("Require Shipment",ShipmentRequired);
          Location.VALIDATE("Bin Mandatory",BinMandatory);
          Location.MODIFY(TRUE);
          CreateBin(Bin,Location.Code,'RECEIPT','','');
          CreateBin(Bin,Location.Code,WorksheetTemplateName,'','');
          CreateBin(Bin,Location.Code,'SHIPMENT','','');
        END;
      END ELSE BEGIN
        Location.SETRANGE("Directed Put-away and Pick",IsDirected);
        Location.FINDFIRST;
      END;
      Location.VALIDATE("Always Create Pick Line",FALSE);
      Location.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBin@18(VAR Bin@1000 : Record 7354;LocationCode@1001 : Text[10];BinCode@1002 : Text[20];ZoneCode@1003 : Text[10];BinTypeCode@1004 : Text[10]);
    BEGIN
      CLEAR(Bin);
      Bin.INIT;
      Bin.VALIDATE("Location Code",LocationCode);
      Bin.VALIDATE(Code,BinCode);
      Bin.VALIDATE("Zone Code",ZoneCode);
      Bin.VALIDATE("Bin Type Code",BinTypeCode);
      Bin.INSERT(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE RegisterWhseActivity@14(ActivityType@1005 : ',Put-away,Pick,Movement,Invt. Put-away,Invt. Pick';SourceType@1000 : Integer;SourceDocument@1003 : Option;SourceNo@1004 : Code[20];QtyToHandle@1006 : Decimal;TakeBinCode@1007 : Code[10];PlaceBinCode@1008 : Code[10]);
    VAR
      WhseActivityLine@1001 : Record 5767;
      WhseActivityHeader@1002 : Record 5766;
    BEGIN
      CLEAR(WhseActivityLine);
      WhseActivityLine.RESET;
      WhseActivityLine.SETRANGE("Source Type",SourceType);
      WhseActivityLine.SETRANGE("Source Document",SourceDocument);
      WhseActivityLine.SETRANGE("Source No.",SourceNo);
      WhseActivityLine.FINDSET;
      REPEAT
        IF QtyToHandle <> 0 THEN
          WhseActivityLine.VALIDATE("Qty. to Handle",QtyToHandle);
        IF (WhseActivityLine."Action Type" = WhseActivityLine."Action Type"::Take) AND (TakeBinCode <> '') THEN BEGIN
          WhseActivityLine."Bin Code" := TakeBinCode;
        END ELSE
          IF (WhseActivityLine."Action Type" = WhseActivityLine."Action Type"::Place) AND (PlaceBinCode <> '') THEN
            WhseActivityLine."Bin Code" := PlaceBinCode;

        WhseActivityLine.MODIFY;
      UNTIL WhseActivityLine.NEXT = 0;

      CLEAR(WhseActivityHeader);
      WhseActivityHeader.SETRANGE(Type,ActivityType);
      WhseActivityHeader.SETRANGE("No.",WhseActivityLine."No.");
      WhseActivityHeader.FINDFIRST;
      IF (ActivityType = ActivityType::"Put-away") OR (ActivityType = ActivityType::Pick) THEN BEGIN
        LibraryWarehouse.RegisterWhseActivity(WhseActivityHeader);
      END ELSE
        LibraryWarehouse.PostInventoryActivity(WhseActivityHeader,FALSE);
    END;

    LOCAL PROCEDURE ResetDefaultSafetyLeadTime@32();
    VAR
      ManufacturingSetup@1000 : Record 99000765;
    BEGIN
      ManufacturingSetup.GET;
      EVALUATE(ManufacturingSetup."Default Safety Lead Time",'<0D>');
      ManufacturingSetup.MODIFY(TRUE);
    END;

    [Normal]
    LOCAL PROCEDURE GetPickWksheetTemplate@10(VAR WhseWorksheetTemplate@1000 : Record 7328);
    BEGIN
      WhseWorksheetTemplate.SETRANGE(Type,WhseWorksheetTemplate.Type::Pick);
      WhseWorksheetTemplate.FINDFIRST;
    END;

    [Normal]
    LOCAL PROCEDURE GetPickWksheetName@26(VAR WhseWorksheetName@1000 : Record 7327);
    BEGIN
      WhseWorksheetName.SETRANGE("Template Type",WhseWorksheetName."Template Type"::Pick);
      WhseWorksheetName.FINDFIRST;
    END;

    [Normal]
    LOCAL PROCEDURE GetBin@28(LocationCode@1005 : Code[10];Receive@1001 : Boolean;Ship@1002 : Boolean;Putaway@1003 : Boolean;Pick@1004 : Boolean) : Code[10];
    VAR
      Bin@1000 : Record 7354;
    BEGIN
      Bin.SETRANGE("Location Code",LocationCode);
      Bin.SETRANGE("Bin Type Code",LibraryWarehouse.SelectBinType(Receive,Ship,Putaway,Pick));
      IF Bin.FINDFIRST THEN
        EXIT(Bin.Code);

      EXIT('');
    END;

    [ModalPageHandler]
    PROCEDURE PickSelectionPageHandler@35(VAR PickSelection@1000 : Page 7343;VAR Response@1002 : Action);
    VAR
      WhsePickRequest@1001 : Record 7325;
    BEGIN
      WhsePickRequest.SETRANGE("Location Code",LibraryVariableStorage.DequeueText);
      WhsePickRequest.FINDFIRST;
      PickSelection.SETRECORD(WhsePickRequest);
      Response := ACTION::LookupOK;
    END;

    BEGIN
    {
      // [FEATURE] [Warehouse] [Pick] [SCM]
    }
    END.
  }
}

