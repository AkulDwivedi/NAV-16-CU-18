OBJECT Codeunit 132208 Library - Trees
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Normal;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryAssembly@1000 : Codeunit 132207;
      LibraryERM@1006 : Codeunit 131300;
      LibraryInventory@1003 : Codeunit 132201;
      LibraryManufacturing@1002 : Codeunit 132202;
      LibraryPurchase@1005 : Codeunit 130512;
      LibraryRandom@1001 : Codeunit 130440;
      SupplyType@1004 : 'Inventory,Purchase,Prod. Order';

    [Normal]
    PROCEDURE AddOverhead@38(VAR TempItem@1001 : TEMPORARY Record 27;VAR TempResource@1002 : TEMPORARY Record 156;VAR TempWorkCenter@1000 : TEMPORARY Record 99000754;VAR TempMachineCenter@1004 : TEMPORARY Record 99000758);
    VAR
      Resource@1003 : Record 156;
      WorkCenter@1005 : Record 99000754;
      MachineCenter@1006 : Record 99000758;
    BEGIN
      IF TempItem.FINDSET THEN
        REPEAT
          LibraryAssembly.ModifyItem(TempItem."No.",TRUE,LibraryRandom.RandInt(5),LibraryRandom.RandInt(5));
        UNTIL TempItem.NEXT = 0;

      IF TempResource.FINDSET THEN
        REPEAT
          Resource.GET(TempResource."No.");
          Resource.VALIDATE("Indirect Cost %",LibraryRandom.RandInt(5));
          Resource.MODIFY(TRUE);
        UNTIL TempResource.NEXT = 0;

      IF TempWorkCenter.FINDSET THEN
        REPEAT
          WorkCenter.GET(TempWorkCenter."No.");
          WorkCenter.VALIDATE("Indirect Cost %",LibraryRandom.RandInt(5));
          WorkCenter.VALIDATE("Overhead Rate",LibraryRandom.RandInt(5));
          WorkCenter.MODIFY(TRUE);
        UNTIL TempWorkCenter.NEXT = 0;

      IF TempMachineCenter.FINDSET THEN
        REPEAT
          MachineCenter.GET(TempMachineCenter."No.");
          MachineCenter.VALIDATE("Indirect Cost %",LibraryRandom.RandInt(5));
          MachineCenter.VALIDATE("Overhead Rate",LibraryRandom.RandInt(5));
          MachineCenter.MODIFY(TRUE);
        UNTIL TempMachineCenter.NEXT = 0;
    END;

    [Normal]
    PROCEDURE AddCostToRouting@32(VAR TempWorkCenter@1000 : TEMPORARY Record 99000754;VAR TempMachineCenter@1001 : TEMPORARY Record 99000758);
    VAR
      WorkCenter@1002 : Record 99000754;
      MachineCenter@1003 : Record 99000758;
    BEGIN
      IF TempWorkCenter.FINDSET THEN
        REPEAT
          WorkCenter.GET(TempWorkCenter."No.");
          WorkCenter.VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(5));
          WorkCenter.MODIFY(TRUE);
        UNTIL TempWorkCenter.NEXT = 0;

      IF TempMachineCenter.FINDSET THEN
        REPEAT
          MachineCenter.GET(TempMachineCenter."No.");
          MachineCenter.VALIDATE("Direct Unit Cost",LibraryRandom.RandInt(5));
          MachineCenter.MODIFY(TRUE);
        UNTIL TempMachineCenter.NEXT = 0;
    END;

    [Normal]
    PROCEDURE AddSubcontracting@20(VAR TempWorkCenter@1000 : TEMPORARY Record 99000754);
    VAR
      WorkCenter@1001 : Record 99000754;
      Vendor@1002 : Record 23;
    BEGIN
      IF TempWorkCenter.FINDSET THEN BEGIN
        TempWorkCenter.NEXT(RANDOM(TempWorkCenter.COUNT));
        WorkCenter.GET(TempWorkCenter."No.");
        LibraryPurchase.CreateSubcontractor(Vendor);
        WorkCenter.VALIDATE("Subcontractor No.",Vendor."No.");
        WorkCenter.MODIFY(TRUE);
      END;
    END;

    [Normal]
    PROCEDURE AddScrapForItems@31(VAR TempItem@1000 : TEMPORARY Record 27);
    VAR
      Item@1001 : Record 27;
    BEGIN
      IF TempItem.FINDSET THEN
        REPEAT
          Item.GET(TempItem."No.");
          Item.VALIDATE("Scrap %",LibraryRandom.RandInt(10));
          Item.MODIFY(TRUE);
        UNTIL TempItem.NEXT = 0;
    END;

    [Normal]
    PROCEDURE AddScrapForRoutings@51(VAR TempItem@1000 : TEMPORARY Record 27);
    VAR
      RoutingHeader@1001 : Record 99000763;
      RoutingLine@1002 : Record 99000764;
    BEGIN
      IF TempItem.FINDSET THEN
        REPEAT
          IF RoutingHeader.GET(TempItem."Routing No.") THEN BEGIN
            RoutingHeader.VALIDATE(Status,RoutingHeader.Status::"Under Development");
            RoutingHeader.MODIFY(TRUE);
            RoutingLine.SETRANGE("Routing No.",RoutingHeader."No.");
            IF RoutingLine.FINDSET THEN
              REPEAT
                RoutingLine.VALIDATE("Scrap Factor %",LibraryRandom.RandInt(10));
                RoutingLine.MODIFY(TRUE);
              UNTIL RoutingLine.NEXT = 0;
            RoutingHeader.VALIDATE(Status,RoutingHeader.Status::Certified);
            RoutingHeader.MODIFY(TRUE);
          END;
        UNTIL TempItem.NEXT = 0;
    END;

    [Normal]
    PROCEDURE AddScrapForProdBOM@53(VAR TempItem@1000 : TEMPORARY Record 27);
    VAR
      ProdBOMHeader@1001 : Record 99000771;
      ProdBOMLine@1002 : Record 99000772;
    BEGIN
      IF TempItem.FINDSET THEN
        REPEAT
          IF ProdBOMHeader.GET(TempItem."Production BOM No.") THEN BEGIN
            ProdBOMHeader.VALIDATE(Status,ProdBOMHeader.Status::"Under Development");
            ProdBOMHeader.MODIFY(TRUE);
            ProdBOMLine.SETRANGE("Production BOM No.",ProdBOMHeader."No.");
            ProdBOMLine.SETRANGE(Type,ProdBOMLine.Type::Item);
            IF ProdBOMLine.FINDSET THEN
              REPEAT
                ProdBOMLine.VALIDATE("Scrap %",LibraryRandom.RandInt(10));
                ProdBOMLine.MODIFY(TRUE);
              UNTIL ProdBOMLine.NEXT = 0;
            ProdBOMHeader.VALIDATE(Status,ProdBOMHeader.Status::Certified);
            ProdBOMHeader.MODIFY(TRUE);
          END;
        UNTIL TempItem.NEXT = 0;
    END;

    [Normal]
    PROCEDURE AddScrapForMachineCenters@55(VAR TempMachineCenter@1000 : TEMPORARY Record 99000758);
    VAR
      MachineCenter@1001 : Record 99000758;
    BEGIN
      IF TempMachineCenter.FINDSET THEN
        REPEAT
          MachineCenter.GET(TempMachineCenter."No.");
          MachineCenter.VALIDATE("Scrap %",LibraryRandom.RandInt(10));
          MachineCenter.VALIDATE("Fixed Scrap Quantity",LibraryRandom.RandInt(10));
          MachineCenter.MODIFY(TRUE);
        UNTIL TempMachineCenter.NEXT = 0;
    END;

    [Normal]
    PROCEDURE AddTreeVariants@2(ParentItemNo@1000 : Code[20]);
    VAR
      Item@1001 : Record 27;
      ProdBOMLine@1004 : Record 99000772;
      ProdBOMHeader@1005 : Record 99000771;
      BOMComponent@1003 : Record 90;
      ItemVariant@1002 : Record 5401;
    BEGIN
      Item.GET(ParentItemNo);
      CASE Item."Replenishment System" OF
        Item."Replenishment System"::Assembly:
          BEGIN
            BOMComponent.SETRANGE("Parent Item No.",Item."No.");
            BOMComponent.SETRANGE(Type,BOMComponent.Type::Item);
            IF BOMComponent.FINDSET THEN
              REPEAT
                LibraryInventory.CreateItemVariant(ItemVariant,BOMComponent."No.");
                BOMComponent.VALIDATE("Variant Code",ItemVariant.Code);
                BOMComponent.MODIFY;
                AddTreeVariants(BOMComponent."No.");
              UNTIL BOMComponent.NEXT = 0;
          END;
        Item."Replenishment System"::"Prod. Order":
          BEGIN
            ProdBOMHeader.GET(Item."Production BOM No.");
            ProdBOMHeader.VALIDATE(Status,ProdBOMHeader.Status::New);
            ProdBOMHeader.MODIFY;
            ProdBOMLine.SETRANGE("Production BOM No.",Item."Production BOM No.");
            ProdBOMLine.SETRANGE(Type,ProdBOMLine.Type::Item);
            IF ProdBOMLine.FINDSET THEN
              REPEAT
                LibraryInventory.CreateItemVariant(ItemVariant,ProdBOMLine."No.");
                ProdBOMLine.VALIDATE("Variant Code",ItemVariant.Code);
                ProdBOMLine.MODIFY(TRUE);
                AddTreeVariants(ProdBOMLine."No.");
              UNTIL ProdBOMLine.NEXT = 0;
            ProdBOMHeader.VALIDATE(Status,ProdBOMHeader.Status::Certified);
            ProdBOMHeader.MODIFY;
          END;
      END;
    END;

    PROCEDURE CreateMixedTree@94(VAR Item@1001 : Record 27;TopItemReplSystem@1006 : Option;CostingMethod@1005 : Option;TreeDepth@1000 : Integer;NoOfComps@1007 : Integer;NoOfRoutingLines@1011 : Integer);
    VAR
      BOMComponent@1008 : Record 90;
      Item1@1009 : Record 27;
      Item2@1004 : Record 27;
      ProdBOMHeader@1002 : Record 99000771;
      ProdBOMLine@1003 : Record 99000772;
    BEGIN
      // Create top item and its assembly / prod BOM.
      LibraryAssembly.CreateItem(Item,CostingMethod,TopItemReplSystem,'','');
      Item.VALIDATE("Lot Size",LibraryRandom.RandInt(10));
      Item.MODIFY(TRUE);

      IF TopItemReplSystem = Item."Replenishment System"::"Prod. Order" THEN BEGIN
        LibraryAssembly.CreateRouting(Item,NoOfRoutingLines);
        LibraryAssembly.CreateBOM(Item,NoOfComps);
      END ELSE
        LibraryAssembly.CreateAssemblyList(Item."Costing Method"::Standard,Item."No.",TRUE,NoOfComps,NoOfComps,NoOfComps,1,'','');

      // Recurrence exit condition.
      IF TreeDepth = 0 THEN
        EXIT;

      // Create left branch of sub tree.
      CreateMixedTree(Item1,Item."Replenishment System"::"Prod. Order",CostingMethod,TreeDepth - 1,NoOfComps,NoOfRoutingLines);
      Item1.FIND;

      // Create right branch of sub tree.
      CreateMixedTree(Item2,Item."Replenishment System"::Assembly,CostingMethod,TreeDepth - 1,NoOfComps,NoOfRoutingLines);
      Item2.FIND;

      // Connect the 2 sub trees to the parent item.
      CASE Item."Replenishment System" OF
        Item."Replenishment System"::"Prod. Order":
          BEGIN
            ProdBOMHeader.GET(Item."Production BOM No.");
            ProdBOMHeader.VALIDATE(Status,ProdBOMHeader.Status::"Under Development");
            ProdBOMHeader.MODIFY(TRUE);
            LibraryManufacturing.CreateProductionBOMLine(
              ProdBOMHeader,ProdBOMLine,'',ProdBOMLine.Type::Item,Item1."No.",LibraryRandom.RandInt(5));
            LibraryManufacturing.CreateProductionBOMLine(
              ProdBOMHeader,ProdBOMLine,'',ProdBOMLine.Type::Item,Item2."No.",LibraryRandom.RandInt(5));
            ProdBOMHeader.VALIDATE(Status,ProdBOMHeader.Status::Certified);
            ProdBOMHeader.MODIFY(TRUE);
          END;
        Item."Replenishment System"::Assembly:
          BEGIN
            LibraryAssembly.CreateAssemblyListComponent(
              BOMComponent.Type::Item,Item1."No.",Item."No.",'',BOMComponent."Resource Usage Type"::Direct,
              LibraryRandom.RandInt(5),TRUE);
            LibraryAssembly.CreateAssemblyListComponent(
              BOMComponent.Type::Item,Item2."No.",Item."No.",'',BOMComponent."Resource Usage Type"::Direct,
              LibraryRandom.RandInt(5),TRUE);
          END;
      END;
    END;

    [Normal]
    PROCEDURE CreateNodeSupply@4(ParentItemNo@1000 : Code[20];LocationCode@1006 : Code[10];DueDate@1010 : Date;SourceType@1009 : Option;Qty@1001 : Decimal;BottleneckFactor@1004 : Decimal;DirectAvailFactor@1005 : Decimal);
    VAR
      MfgSetup@1007 : Record 99000765;
      BOMComponent@1002 : Record 90;
      DirectAvailability@1003 : Decimal;
    BEGIN
      MfgSetup.GET;
      BOMComponent.SETRANGE("Parent Item No.",ParentItemNo);
      BOMComponent.SETRANGE(Type,BOMComponent.Type::Item);

      IF BOMComponent.FINDSET THEN
        REPEAT
          BOMComponent.CALCFIELDS("Assembly BOM");
          IF BOMComponent."Assembly BOM" THEN BEGIN
            DirectAvailability := Qty * BottleneckFactor * DirectAvailFactor;
            CreateNodeSupply(
              BOMComponent."No.",LocationCode,CALCDATE('<-' + FORMAT(MfgSetup."Default Safety Lead Time") + '>',DueDate),SourceType,
              (Qty * BottleneckFactor - DirectAvailability) * BOMComponent."Quantity per",1,DirectAvailFactor);

            IF DirectAvailability > 0 THEN BEGIN
              CreateSupply(
                BOMComponent."No.",BOMComponent."Variant Code",LocationCode,
                CALCDATE('<-' + FORMAT(MfgSetup."Default Safety Lead Time") + '>',DueDate),SourceType,
                DirectAvailability * BOMComponent."Quantity per");
              // Create un-available supply: by variant, location.
              CreateSupply(
                BOMComponent."No.",'',LocationCode,CALCDATE('<-' + FORMAT(MfgSetup."Default Safety Lead Time") + '>',DueDate),
                SourceType,(DirectAvailability + 1) * BOMComponent."Quantity per");
              CreateSupply(
                BOMComponent."No.",BOMComponent."Variant Code",'',
                CALCDATE('<-' + FORMAT(MfgSetup."Default Safety Lead Time") + '>',DueDate),SourceType,
                (DirectAvailability + 1) * BOMComponent."Quantity per");
            END;
          END ELSE BEGIN
            CreateSupply(
              BOMComponent."No.",BOMComponent."Variant Code",LocationCode,
              CALCDATE('<-' + FORMAT(MfgSetup."Default Safety Lead Time") + '>',DueDate),SourceType,Qty * BOMComponent."Quantity per");
            // Create  un-available supply: by variant, location.
            CreateSupply(
              BOMComponent."No.",'',LocationCode,CALCDATE('<-' + FORMAT(MfgSetup."Default Safety Lead Time") + '>',DueDate),
              SourceType,(Qty + 1) * BOMComponent."Quantity per");
            CreateSupply(
              BOMComponent."No.",BOMComponent."Variant Code",'',
              CALCDATE('<-' + FORMAT(MfgSetup."Default Safety Lead Time") + '>',DueDate),SourceType,
              (Qty + 1) * BOMComponent."Quantity per");
          END;

        UNTIL BOMComponent.NEXT = 0;
    END;

    [Normal]
    PROCEDURE CreateSupply@5(ItemNo@1000 : Code[20];VariantCode@1002 : Code[10];LocationCode@1001 : Code[10];DueDate@1003 : Date;ItemSupplyType@1005 : Option;Qty@1004 : Decimal);
    VAR
      ItemJournalTemplate@1008 : Record 82;
      ItemJournalBatch@1006 : Record 233;
      ItemJournalLine@1007 : Record 83;
      PurchaseHeader@1009 : Record 38;
      PurchaseLine@1010 : Record 39;
      ProductionOrder@1011 : Record 5405;
      ProdOrderLine@1012 : Record 5406;
    BEGIN
      CASE ItemSupplyType OF
        SupplyType::Inventory:
          BEGIN
            LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
            LibraryInventory.SelectItemJournalBatchName(
              ItemJournalBatch,ItemJournalBatch."Template Type"::Item,ItemJournalTemplate.Name);
            LibraryInventory.CreateItemJournalLine(
              ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,
              ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Qty);

            ItemJournalLine.VALIDATE("Location Code",LocationCode);
            ItemJournalLine.VALIDATE("Variant Code",VariantCode);
            ItemJournalLine.VALIDATE("Posting Date",DueDate);
            ItemJournalLine.MODIFY(TRUE);

            LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
          END;
        SupplyType::Purchase:
          BEGIN
            LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
            LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Qty);
            PurchaseLine.VALIDATE("Location Code",LocationCode);
            PurchaseLine.VALIDATE("Variant Code",VariantCode);
            PurchaseLine.VALIDATE("Expected Receipt Date",DueDate);
            PurchaseLine.MODIFY(TRUE);
          END;
        SupplyType::"Prod. Order":
          BEGIN
            LibraryManufacturing.CreateProductionOrder(
              ProductionOrder,ProductionOrder.Status::Released,ProductionOrder."Source Type"::Item,ItemNo,Qty);
            ProductionOrder.VALIDATE("Due Date",DueDate);
            ProductionOrder.VALIDATE("Location Code",LocationCode);
            ProductionOrder.MODIFY(TRUE);

            LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,FALSE,FALSE,FALSE);
            ProdOrderLine.SETRANGE(Status,ProductionOrder.Status);
            ProdOrderLine.SETRANGE("Prod. Order No.",ProductionOrder."No.");
            IF ProdOrderLine.FINDFIRST THEN BEGIN
              ProdOrderLine.VALIDATE("Variant Code",VariantCode);
              ProdOrderLine.MODIFY(TRUE);
            END;
          END;
      END;
    END;

    [Normal]
    PROCEDURE GetTreeCost@92(VAR RolledUpMaterialCost@1011 : Decimal;VAR RolledUpCapacityCost@1010 : Decimal;VAR RolledUpCapOvhd@1013 : Decimal;VAR RolledUpMfgOvhd@1025 : Decimal;VAR SglLevelMaterialCost@1020 : Decimal;VAR SglLevelCapCost@1021 : Decimal;VAR SglLevelCapOvhd@1022 : Decimal;VAR SglLevelMfgOvhd@1027 : Decimal;Item@1000 : Record 27) : Decimal;
    VAR
      RoutingLine@1009 : Record 99000764;
      MachineCenter@1023 : Record 99000758;
      WorkCenter@1024 : Record 99000754;
      BOMComponent@1003 : Record 90;
      ProdBOMLine@1005 : Record 99000772;
      Item1@1006 : Record 27;
      Resource@1007 : Record 156;
      LotSize@1004 : Decimal;
      ResLotSize@1026 : Decimal;
      Overhead@1015 : Decimal;
      IndirectCost@1016 : Decimal;
      TreeCost@1008 : Decimal;
      UnitCost@1012 : Decimal;
      LocalRolledUpMaterialCost@1017 : Decimal;
      LocalRolledUpCapCost@1018 : Decimal;
      LocalRolledUpCapOvhd@1019 : Decimal;
      LocalRolledUpMfgOvhd@1029 : Decimal;
      LocalCost@1014 : Decimal;
      RoundingPrecision@1002 : Decimal;
    BEGIN
      IF Item."Lot Size" = 0 THEN
        LotSize := 1
      ELSE
        LotSize := Item."Lot Size";

      CASE Item."Replenishment System" OF
        Item."Replenishment System"::Assembly:
          BEGIN
            BOMComponent.SETRANGE("Parent Item No.",Item."No.");
            BOMComponent.SETRANGE(Type,BOMComponent.Type::Item);
            IF BOMComponent.FINDSET THEN
              REPEAT
                Item1.GET(BOMComponent."No.");
                LocalRolledUpMaterialCost := 0;
                LocalRolledUpCapCost := 0;
                LocalRolledUpCapOvhd := 0;
                LocalRolledUpMfgOvhd := 0;
                LocalCost := 0;
                TreeCost +=
                  BOMComponent."Quantity per" *
                  GetTreeCost(
                    LocalRolledUpMaterialCost,LocalRolledUpCapCost,LocalRolledUpCapOvhd,LocalRolledUpMfgOvhd,LocalCost,LocalCost,
                    LocalCost,LocalCost,Item1);
                SglLevelMaterialCost += BOMComponent."Quantity per" * Item1."Unit Cost";
                RolledUpMaterialCost += BOMComponent."Quantity per" * LocalRolledUpMaterialCost;
                RolledUpCapacityCost += BOMComponent."Quantity per" * LocalRolledUpCapCost;
                RolledUpCapOvhd += BOMComponent."Quantity per" * LocalRolledUpCapOvhd;
                RolledUpMfgOvhd += BOMComponent."Quantity per" * LocalRolledUpMfgOvhd;
              UNTIL BOMComponent.NEXT = 0;

            BOMComponent.SETRANGE(Type,BOMComponent.Type::Resource);
            IF BOMComponent.FINDSET THEN
              REPEAT
                Resource.GET(BOMComponent."No.");

                IF (BOMComponent."Resource Usage Type" = BOMComponent."Resource Usage Type"::Fixed) AND (Item."Lot Size" <> 0) THEN
                  ResLotSize := Item."Lot Size"
                ELSE
                  ResLotSize := 1;

                LibraryAssembly.GetCostInformation(
                  UnitCost,Overhead,IndirectCost,BOMComponent.Type::Resource,BOMComponent."No.",'','');
                TreeCost += BOMComponent."Quantity per" * UnitCost / ResLotSize;
                SglLevelCapCost += BOMComponent."Quantity per" * (UnitCost - Overhead) / ResLotSize;
                SglLevelCapOvhd += BOMComponent."Quantity per" * Overhead / ResLotSize;
                RolledUpCapacityCost += BOMComponent."Quantity per" * (UnitCost - Overhead) / ResLotSize;
                RolledUpCapOvhd += BOMComponent."Quantity per" * Overhead / ResLotSize;
              UNTIL BOMComponent.NEXT = 0;

            RolledUpMfgOvhd +=
              (RolledUpMaterialCost + RolledUpCapacityCost + RolledUpCapOvhd + RolledUpMfgOvhd) *
              Item."Indirect Cost %" / 100 + Item."Overhead Rate";
            SglLevelMfgOvhd += Item."Single-Level Mfg. Ovhd Cost";
            RolledUpCapacityCost -= Item."Single-Level Subcontrd. Cost";
          END;
        Item."Replenishment System"::"Prod. Order":
          BEGIN
            ProdBOMLine.SETRANGE("Production BOM No.",Item."Production BOM No.");
            ProdBOMLine.SETRANGE(Type,ProdBOMLine.Type::Item);
            IF ProdBOMLine.FINDSET THEN
              REPEAT
                Item1.GET(ProdBOMLine."No.");
                LocalRolledUpMaterialCost := 0;
                LocalRolledUpCapCost := 0;
                LocalRolledUpCapOvhd := 0;
                LocalRolledUpMfgOvhd := 0;
                LocalCost := 0;
                TreeCost +=
                  ProdBOMLine."Quantity per" *
                  GetTreeCost(
                    LocalRolledUpMaterialCost,LocalRolledUpCapCost,LocalRolledUpCapOvhd,LocalRolledUpMfgOvhd,LocalCost,LocalCost,
                    LocalCost,LocalCost,Item1);
                SglLevelMaterialCost += ProdBOMLine."Quantity per" * Item1."Unit Cost";
                RolledUpMaterialCost += ProdBOMLine."Quantity per" * LocalRolledUpMaterialCost;
                RolledUpCapacityCost += ProdBOMLine."Quantity per" * LocalRolledUpCapCost;
                RolledUpCapOvhd += ProdBOMLine."Quantity per" * LocalRolledUpCapOvhd;
                RolledUpMfgOvhd += ProdBOMLine."Quantity per" * LocalRolledUpMfgOvhd;
              UNTIL ProdBOMLine.NEXT = 0;

            RoutingLine.SETRANGE("Routing No.",Item."Routing No.");
            RoutingLine.SETRANGE(Type,RoutingLine.Type::"Work Center");
            IF RoutingLine.FINDSET THEN
              REPEAT
                WorkCenter.GET(RoutingLine."No.");
                RolledUpCapacityCost += (RoutingLine."Run Time" + RoutingLine."Setup Time" / LotSize) * WorkCenter."Direct Unit Cost";
                RolledUpCapOvhd +=
                  (RoutingLine."Run Time" + RoutingLine."Setup Time" / LotSize) *
                  (WorkCenter."Unit Cost" - WorkCenter."Direct Unit Cost");
                SglLevelCapCost += (RoutingLine."Run Time" + RoutingLine."Setup Time" / LotSize) * WorkCenter."Direct Unit Cost";
                SglLevelCapOvhd +=
                  (RoutingLine."Run Time" + RoutingLine."Setup Time" / LotSize) *
                  (WorkCenter."Unit Cost" - WorkCenter."Direct Unit Cost");
              UNTIL RoutingLine.NEXT = 0;

            RoutingLine.SETRANGE(Type,RoutingLine.Type::"Machine Center");
            IF RoutingLine.FINDSET THEN
              REPEAT
                MachineCenter.GET(RoutingLine."No.");
                RolledUpCapacityCost +=
                  (RoutingLine."Run Time" + RoutingLine."Setup Time" / LotSize) * MachineCenter."Direct Unit Cost";
                RolledUpCapOvhd +=
                  (RoutingLine."Run Time" + RoutingLine."Setup Time" / LotSize) *
                  (MachineCenter."Unit Cost" - MachineCenter."Direct Unit Cost");
                SglLevelCapCost += (RoutingLine."Run Time" + RoutingLine."Setup Time" / LotSize) * MachineCenter."Direct Unit Cost";
                SglLevelCapOvhd +=
                  (RoutingLine."Run Time" + RoutingLine."Setup Time" / LotSize) *
                  (MachineCenter."Unit Cost" - MachineCenter."Direct Unit Cost");
              UNTIL RoutingLine.NEXT = 0;

            RolledUpMfgOvhd +=
              (RolledUpMaterialCost + RolledUpCapacityCost + RolledUpCapOvhd + RolledUpMfgOvhd) *
              Item."Indirect Cost %" / 100 + Item."Overhead Rate";
            SglLevelMfgOvhd += Item."Single-Level Mfg. Ovhd Cost";
            RolledUpCapacityCost -= Item."Single-Level Subcontrd. Cost";
          END;
        Item."Replenishment System"::Purchase:
          BEGIN
            LibraryAssembly.GetCostInformation(UnitCost,Overhead,IndirectCost,BOMComponent.Type::Item,Item."No.",'','');
            SglLevelMaterialCost := UnitCost;
            RolledUpMaterialCost := UnitCost;
            EXIT(UnitCost);
          END;
      END;

      RoundingPrecision := LibraryERM.GetUnitAmountRoundingPrecision;
      RolledUpMaterialCost := ROUND(RolledUpMaterialCost,RoundingPrecision);
      RolledUpCapacityCost := ROUND(RolledUpCapacityCost,RoundingPrecision);
      RolledUpCapOvhd := ROUND(RolledUpCapOvhd,RoundingPrecision);
      RolledUpMfgOvhd := ROUND(RolledUpMfgOvhd,RoundingPrecision);
      SglLevelMaterialCost := ROUND(SglLevelMaterialCost,RoundingPrecision);
      SglLevelCapCost := ROUND(SglLevelCapCost,RoundingPrecision);
      SglLevelCapOvhd := ROUND(SglLevelCapOvhd,RoundingPrecision);
      SglLevelMfgOvhd := ROUND(SglLevelMfgOvhd,RoundingPrecision);

      EXIT(ROUND(TreeCost * (1 + Item."Indirect Cost %" / 100) + Item."Overhead Rate",RoundingPrecision));
    END;

    [Normal]
    PROCEDURE GetTree@91(VAR TempItem@1001 : TEMPORARY Record 27;VAR TempResource@1002 : TEMPORARY Record 156;VAR TempWorkCenter@1029 : TEMPORARY Record 99000754;VAR TempMachineCenter@1030 : TEMPORARY Record 99000758;Item@1000 : Record 27);
    VAR
      RoutingLine@1009 : Record 99000764;
      MachineCenter@1023 : Record 99000758;
      WorkCenter@1024 : Record 99000754;
      BOMComponent@1003 : Record 90;
      ProdBOMLine@1005 : Record 99000772;
      Item1@1006 : Record 27;
      Resource@1007 : Record 156;
    BEGIN
      TempItem := Item;
      TempItem.INSERT;

      CASE Item."Replenishment System" OF
        Item."Replenishment System"::Assembly:
          BEGIN
            BOMComponent.SETRANGE("Parent Item No.",Item."No.");
            BOMComponent.SETRANGE(Type,BOMComponent.Type::Item);
            IF BOMComponent.FINDSET THEN
              REPEAT
                Item1.GET(BOMComponent."No.");
                GetTree(TempItem,TempResource,TempWorkCenter,TempMachineCenter,Item1);
              UNTIL BOMComponent.NEXT = 0;

            BOMComponent.SETRANGE(Type,BOMComponent.Type::Resource);
            IF BOMComponent.FINDSET THEN
              REPEAT
                Resource.GET(BOMComponent."No.");
                TempResource := Resource;
                TempResource.INSERT;
              UNTIL BOMComponent.NEXT = 0;
          END;
        Item."Replenishment System"::"Prod. Order":
          BEGIN
            ProdBOMLine.SETRANGE("Production BOM No.",Item."Production BOM No.");
            ProdBOMLine.SETRANGE(Type,ProdBOMLine.Type::Item);
            IF ProdBOMLine.FINDSET THEN
              REPEAT
                Item1.GET(ProdBOMLine."No.");
                GetTree(TempItem,TempResource,TempWorkCenter,TempMachineCenter,Item1);
              UNTIL ProdBOMLine.NEXT = 0;

            RoutingLine.SETRANGE("Routing No.",Item."Routing No.");
            RoutingLine.SETRANGE(Type,RoutingLine.Type::"Work Center");
            IF RoutingLine.FINDSET THEN
              REPEAT
                WorkCenter.GET(RoutingLine."No.");
                TempWorkCenter := WorkCenter;
                TempWorkCenter.INSERT;
              UNTIL RoutingLine.NEXT = 0;

            RoutingLine.SETRANGE(Type,RoutingLine.Type::"Machine Center");
            IF RoutingLine.FINDSET THEN
              REPEAT
                MachineCenter.GET(RoutingLine."No.");
                TempMachineCenter := MachineCenter;
                TempMachineCenter.INSERT;
              UNTIL RoutingLine.NEXT = 0;
          END;
      END;
    END;

    [Normal]
    PROCEDURE GetTreeCostWithScrap@33(VAR RolledUpScrapAmount@1001 : Decimal;VAR SingleLevelScrapAmount@1002 : Decimal;Item@1000 : Record 27);
    VAR
      RoutingLine@1009 : Record 99000764;
      MachineCenter@1023 : Record 99000758;
      WorkCenter@1024 : Record 99000754;
      BOMComponent@1003 : Record 90;
      ProdBOMLine@1005 : Record 99000772;
      Item1@1006 : Record 27;
      Resource@1007 : Record 156;
      LotSize@1004 : Decimal;
      Overhead@1015 : Decimal;
      IndirectCost@1016 : Decimal;
      UnitCost@1012 : Decimal;
      LocalRolledUpScrapAmount@1017 : Decimal;
      RoutingScrapPercentage@1011 : Decimal;
      ProcessedScrapPercentage@1013 : Decimal;
      LocalCost@1008 : Decimal;
    BEGIN
      LocalCost := 0;
      CASE Item."Replenishment System" OF
        Item."Replenishment System"::Assembly:
          BEGIN
            BOMComponent.SETRANGE("Parent Item No.",Item."No.");
            BOMComponent.SETRANGE(Type,BOMComponent.Type::Item);
            IF BOMComponent.FINDSET THEN
              REPEAT
                Item1.GET(BOMComponent."No.");
                LocalRolledUpScrapAmount := 0;
                GetTreeCostWithScrap(LocalRolledUpScrapAmount,LocalCost,Item1);
                RolledUpScrapAmount += BOMComponent."Quantity per" * LocalRolledUpScrapAmount;
              UNTIL BOMComponent.NEXT = 0;

            BOMComponent.SETRANGE(Type,BOMComponent.Type::Resource);
            IF BOMComponent.FINDSET THEN
              REPEAT
                Resource.GET(BOMComponent."No.");

                IF (BOMComponent."Resource Usage Type" = BOMComponent."Resource Usage Type"::Fixed) AND (Item."Lot Size" <> 0) THEN
                  LotSize := Item."Lot Size"
                ELSE
                  LotSize := 1;

                LibraryAssembly.GetCostInformation(
                  UnitCost,Overhead,IndirectCost,BOMComponent.Type::Resource,BOMComponent."No.",'','');
                RolledUpScrapAmount += BOMComponent."Quantity per" * UnitCost / LotSize;
              UNTIL BOMComponent.NEXT = 0;
          END;
        Item."Replenishment System"::"Prod. Order":
          BEGIN
            RoutingLine.SETRANGE("Routing No.",Item."Routing No.");
            RoutingScrapPercentage := GetCombinedScrapPercentage(RoutingLine);

            ProdBOMLine.SETRANGE("Production BOM No.",Item."Production BOM No.");
            ProdBOMLine.SETRANGE(Type,ProdBOMLine.Type::Item);
            IF ProdBOMLine.FINDSET THEN
              REPEAT
                Item1.GET(ProdBOMLine."No.");
                LocalRolledUpScrapAmount := 0;
                GetTreeCostWithScrap(LocalRolledUpScrapAmount,LocalCost,Item1);
                RolledUpScrapAmount +=
                  ProdBOMLine."Quantity per" *
                  RoutingScrapPercentage * LocalRolledUpScrapAmount * (1 + Item."Scrap %" / 100) * (1 + ProdBOMLine."Scrap %" / 100);

                IF Item1."Replenishment System" = Item1."Replenishment System"::Purchase THEN
                  SingleLevelScrapAmount +=
                    ProdBOMLine."Quantity per" *
                    RoutingScrapPercentage * Item1."Unit Cost" * (Item."Scrap %" / 100) * (ProdBOMLine."Scrap %" / 100);
              UNTIL ProdBOMLine.NEXT = 0;

            ProcessedScrapPercentage := 1;
            IF RoutingLine.FINDSET THEN
              REPEAT
                IF RoutingLine.Type = RoutingLine.Type::"Work Center" THEN BEGIN
                  WorkCenter.GET(RoutingLine."No.");
                  RolledUpScrapAmount +=
                    (RoutingLine."Run Time" *
                     RoutingScrapPercentage / ProcessedScrapPercentage + RoutingLine."Setup Time" / Item."Lot Size") *
                    WorkCenter."Unit Cost" * (1 + Item."Scrap %" / 100);
                END ELSE BEGIN
                  MachineCenter.GET(RoutingLine."No.");
                  RolledUpScrapAmount +=
                    (RoutingLine."Run Time" *
                     RoutingScrapPercentage / ProcessedScrapPercentage + RoutingLine."Setup Time" / Item."Lot Size") *
                    MachineCenter."Unit Cost" * (1 + Item."Scrap %" / 100);
                END;
                ProcessedScrapPercentage *= 1 + RoutingLine."Scrap Factor %" / 100;
              UNTIL RoutingLine.NEXT = 0;
          END;
        Item."Replenishment System"::Purchase:
          RolledUpScrapAmount := Item."Unit Cost";
      END;

      RolledUpScrapAmount := ROUND(RolledUpScrapAmount,LibraryERM.GetUnitAmountRoundingPrecision);
    END;

    [Normal]
    LOCAL PROCEDURE GetCombinedScrapPercentage@49(VAR RoutingLine@1000 : Record 99000764) : Decimal;
    VAR
      ScrapPercentage@1001 : Decimal;
    BEGIN
      ScrapPercentage := 1;
      IF RoutingLine.FINDSET THEN
        REPEAT
          ScrapPercentage *= 1 + RoutingLine."Scrap Factor %" / 100;
        UNTIL RoutingLine.NEXT = 0;

      EXIT(ScrapPercentage);
    END;

    PROCEDURE GetQtyPerInTree@1(VAR QtyPerParent@1003 : Decimal;VAR QtyPerTopItem@1002 : Decimal;ParentItemNo@1000 : Code[20];CompItemNo@1001 : Code[20]);
    VAR
      Item1@1007 : Record 27;
      Item@1006 : Record 27;
      BOMComponent@1005 : Record 90;
      ProdBOMLine@1004 : Record 99000772;
      RecQtyPerTopItem@1008 : Decimal;
    BEGIN
      Item.GET(ParentItemNo);
      CASE Item."Replenishment System" OF
        Item."Replenishment System"::Assembly:
          BEGIN
            BOMComponent.SETRANGE("Parent Item No.",ParentItemNo);
            BOMComponent.SETRANGE(Type,BOMComponent.Type::Item);
            IF BOMComponent.FINDSET THEN
              REPEAT
                Item1.GET(BOMComponent."No.");
                IF Item1."No." = CompItemNo THEN BEGIN
                  QtyPerParent := BOMComponent."Quantity per";
                  QtyPerTopItem *= BOMComponent."Quantity per";
                  EXIT;
                END;
                RecQtyPerTopItem := BOMComponent."Quantity per" * QtyPerTopItem;
                GetQtyPerInTree(QtyPerParent,RecQtyPerTopItem,Item1."No.",CompItemNo);
              UNTIL BOMComponent.NEXT = 0;
          END;
        Item."Replenishment System"::"Prod. Order":
          BEGIN
            ProdBOMLine.SETRANGE("Production BOM No.",Item."Production BOM No.");
            ProdBOMLine.SETRANGE(Type,ProdBOMLine.Type::Item);
            IF ProdBOMLine.FINDSET THEN
              REPEAT
                Item1.GET(ProdBOMLine."No.");
                IF Item1."No." = CompItemNo THEN BEGIN
                  QtyPerParent := ProdBOMLine."Quantity per";
                  QtyPerTopItem *= ProdBOMLine."Quantity per";
                  EXIT;
                END;
                RecQtyPerTopItem := ProdBOMLine."Quantity per" * QtyPerTopItem;
                GetQtyPerInTree(QtyPerParent,RecQtyPerTopItem,Item1."No.",CompItemNo);
              UNTIL ProdBOMLine.NEXT = 0;
          END;
        Item."Replenishment System"::Purchase:
          IF Item."No." = CompItemNo THEN
            EXIT;
      END;
    END;

    BEGIN
    END.
  }
}

