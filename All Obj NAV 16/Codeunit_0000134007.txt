OBJECT Codeunit 134007 ERM Apply Unapply Vendor
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Permissions=TableData 25=rimd;
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryERM@1002 : Codeunit 131300;
      LibraryPurchase@1008 : Codeunit 130512;
      LibraryFiscalYear@1009 : Codeunit 131302;
      LibraryInventory@1018 : Codeunit 132201;
      LibraryPmtDiscSetup@1028 : Codeunit 131303;
      LibrarySetupStorage@1015 : Codeunit 131009;
      LibraryVariableStorage@1019 : Codeunit 131004;
      LibraryRandom@1001 : Codeunit 130440;
      IsInitialized@1000 : Boolean;
      AdditionalCurrencyErr@1005 : TextConst '@@@=<Locked>;ENU=Additional Currency Amount must be %1.';
      TotalAmountErr@1004 : TextConst '@@@=<Locked>;ENU=Total Amount must be %1 in %2 table for %3 field : %4.';
      UnappliedErr@1006 : TextConst '@@@=<Locked>;ENU=%1 must be %2 in %3.';
      AmountErr@1007 : TextConst '@@@=<Locked>;ENU=%1 must be %2 in %3.';
      UnapplyExchangeRateErr@1010 : TextConst '@@@=<Locked>;ENU=You cannot unapply the entry with the posting date %1, because the exchange rate for the additional reporting currency has been changed.';
      MessageDoNotMatchErr@1011 : TextConst 'ENU=Error Message must be same.';
      DateCompressUnapplyErr@1012 : TextConst '@@@=<Locked>;ENU=The entry cannot be unapplied, because the %1 has been compressed.';
      ApplicationEntryErr@1013 : TextConst '@@@="%1 = FIELD Caption, %2 = FIELD Value";ENU=%1 %2 does not have an application entry.';
      UnapplyErr@1014 : TextConst '@@@="%1 = FIELD Caption, %2 = Table Caption,%3 = Field Caption,%4 = Field Value";ENU="%1 must be equal to ''Application''  in %2: %3=%4. Current value is ''Initial Entry''."';
      DetailedVendorLedgerErr@1016 : TextConst 'ENU=Detailed Vendor Ledger Entry Must Found.';
      GeneralJournalErr@1017 : TextConst 'ENU=General Journal Line Must Exist.';
      NegativeAmountErr@1045 : TextConst 'ENU=Amount must be positive in General Journal Line.';
      WrongFieldErr@1022 : TextConst '@@@=<Locked>;ENU=Wrong value of field %1 in table %2.';
      UnnecessaryVATEntriesFoundErr@1023 : TextConst 'ENU=Unnecessary VAT Entries found.';
      PaymentMethodCodeErr@1024 : TextConst '@@@=<Locked>;ENU="Open must be equal to ''Yes''  in Vendor Ledger Entry: Entry No.=%1. Current value is ''No''."';
      NonzeroACYErr@1025 : TextConst 'ENU=Non-zero Additional-Currency Amount in G/L Entry.';
      GLEntryCntErr@1027 : TextConst 'ENU=Wrong count of created G/L Entries.';
      DimBalanceErr@1026 : TextConst 'ENU=Wrong balance by Dimension.';
      NoEntriesAppliedErr@1029 : TextConst 'ENU=Cannot post because you did not specify which entry to apply. You must specify an entry in the Applies-to ID field for one or more open entries.';

    [Test]
    PROCEDURE ApplyUnapplyVendorPayment@11();
    VAR
      GenJournalLine@1000 : Record 81;
      NoOfLines@1002 : Integer;
      Amount@1003 : Decimal;
    BEGIN
      // Verify Additional Currency, Remaining Amount and Entries unapplied after Applying and then Unapplying Payment Entries for Vendor.

      // Setup: Update General Ledger Setup and take Random Amount greater than 100 (Standard Value)
      Initialize;
      NoOfLines := 2 * LibraryRandom.RandInt(2);
      Amount := -100 * LibraryRandom.RandInt(10);
      LibraryERM.SetAddReportingCurrency(CreateCurrency(0));
      ApplyUnapplyVendorEntries(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,NoOfLines,Amount,
        -Amount / NoOfLines);

      // Verify: Verify Remaining Amount, Unapplied Entries and Additional Currency Amount after unapplying entries.
      VerifyRemainingAmount(GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.");
      VerifyUnappliedEntries(GenJournalLine."Document No.",GenJournalLine."Account No.");
      VerifyAdditionalCurrencyAmount(GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE ApplyUnapplyApplyVendorPayment@34();
    VAR
      GenJournalLine@1000 : Record 81;
      NoOfLines@1002 : Integer;
      Amount@1003 : Decimal;
    BEGIN
      // Verify Additional Currency Amount, Detailed Vendor Ledger Entry after Unapplying, Applying Payment Entries Again for Vendor.

      // Setup: Update General Ledger Setup and take Random Amount greater than 100 (Standard Value)
      Initialize;
      NoOfLines := 2 * LibraryRandom.RandInt(2);
      Amount := -100 * LibraryRandom.RandInt(10);
      LibraryERM.SetAddReportingCurrency(CreateCurrency(0));
      ApplyUnapplyVendorEntries(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,NoOfLines,Amount,
        -Amount / NoOfLines);

      // Verify: Verify Detailed Ledger Entries and Additional Currency Amount after Re-applying Entries.
      VerifyDetailedLedgerEntry(GenJournalLine."Document No.",GenJournalLine."Account No.");
      VerifyAdditionalCurrencyAmount(GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE ApplyUnapplyVendorRefund@12();
    VAR
      GenJournalLine@1000 : Record 81;
      NoOfLines@1002 : Integer;
      Amount@1003 : Decimal;
    BEGIN
      // Verify Additional Currency, Remaining Amount and Entries unapplied after Applying and then Unapplying Payment Entries for Vendor.

      // Setup: Update General Ledger Setup and take Random Amount greater than 100 (Standard Value)
      Initialize;
      NoOfLines := 2 * LibraryRandom.RandInt(2);
      Amount := 100 * LibraryRandom.RandInt(10);
      LibraryERM.SetAddReportingCurrency(CreateCurrency(0));
      ApplyUnapplyVendorEntries(
        GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Document Type"::Refund,NoOfLines,Amount,
        -Amount / NoOfLines);

      // Verify: Verify Remaining Amount, Unapplied Entries and Additional Currency Amount after unapplying entries.
      VerifyRemainingAmount(GenJournalLine."Document Type"::Refund,GenJournalLine."Document No.");
      VerifyUnappliedEntries(GenJournalLine."Document No.",GenJournalLine."Account No.");
      VerifyAdditionalCurrencyAmount(GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE ApplyUnapplyApplyVendorRefund@20();
    VAR
      GenJournalLine@1000 : Record 81;
      NoOfLines@1002 : Integer;
      Amount@1003 : Decimal;
    BEGIN
      // Verify Additional Currency Amount, Detailed Vendor Ledger Entry after Unapplying, Applying Payment Entries Again for Vendor.

      // Setup: Update General Ledger Setup and take Random Amount greater than 100 (Standard Value)
      Initialize;
      NoOfLines := 2 * LibraryRandom.RandInt(2);
      Amount := 100 * LibraryRandom.RandInt(10);
      LibraryERM.SetAddReportingCurrency(CreateCurrency(0));
      ApplyUnapplyVendorEntries(
        GenJournalLine,GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Document Type"::Refund,NoOfLines,Amount,
        -Amount / NoOfLines);

      // Verify: Verify Detailed Ledger Entries and Additional Currency Amount after Re-applying Entries.
      VerifyDetailedLedgerEntry(GenJournalLine."Document No.",GenJournalLine."Account No.");
      VerifyAdditionalCurrencyAmount(GenJournalLine."Document No.");
    END;

    [Test]
    PROCEDURE RoundingAmtOnInvoice@2();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Application Rounding Amount on Vendor Ledger Entry After Posting Invoice and Payment with Different
      // Currency before Unapply.
      RoundingAmtOnVendorEntries(
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,-LibraryRandom.RandDecInRange(100,200,2));
    END;

    [Test]
    PROCEDURE RoundingAmtOnCrMemo@27();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Application Rounding Amount on Vendor Ledger Entry After Posting Credit Memo and Refund with Different
      // Currency before Unapply.
      RoundingAmtOnVendorEntries(
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Document Type"::Refund,LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE RoundingAmtOnVendorEntries@39(DocumentType@1004 : Option;DocumentType2@1005 : Option;Amount@1006 : Decimal);
    VAR
      DetailedVendorLedgEntry@1003 : Record 380;
      GenJournalLine@1002 : Record 81;
      AppRounding@1000 : Decimal;
    BEGIN
      // Setup: Create Invoice and Payment General Line with Different Currency.
      Initialize;
      AppRounding := LibraryRandom.RandDec(10,2);
      CreateGenLineAndApply(GenJournalLine,DocumentType,DocumentType2,AppRounding,Amount);

      // Verify: Verify Vendor Ledger Entry for Application Rounding Amount before Unapply.
      VerifyApplnRoundingVendLedger(
        DetailedVendorLedgEntry."Entry Type"::"Appln. Rounding",GenJournalLine."Document No.",AppRounding,
        GenJournalLine."Account No.");
    END;

    [Test]
    PROCEDURE RoundingAmtOnUnappliedInvoice@21();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Application Rounding Amount and Unapplied Entries on Detailed Vendor Ledger Entry After Posting Invoice
      // and Payment with Different Currency After Unapply.
      RoundingAmtOnUnappliedEntries(
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,-LibraryRandom.RandDecInRange(100,200,2));
    END;

    [Test]
    PROCEDURE RoundingAmtOnUnappliedCrMemo@24();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Application Rounding Amount on Vendor Ledger Entry After Posting Credit Memo and Refund with Different
      // Currency After Unapply.
      RoundingAmtOnUnappliedEntries(
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Document Type"::Refund,LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE RoundingAmtOnUnappliedEntries@41(DocumentType@1000 : Option;DocumentType2@1001 : Option;Amount@1002 : Decimal);
    VAR
      DetailedVendorLedgEntry@1006 : Record 380;
      GenJournalLine@1005 : Record 81;
      AppRounding@1003 : Decimal;
    BEGIN
      // Setup: Create Invoice and Payment General Line with Different Currency.
      Initialize;
      AppRounding := LibraryRandom.RandDec(10,2);
      CreateGenLineAndApply(GenJournalLine,DocumentType,DocumentType2,AppRounding,Amount);
      UnapplyVendorLedgerEntry(GenJournalLine."Document Type",GenJournalLine."Document No.");

      // Verify: Verify Vendor Ledger Entry for Application Roudning And Unapplied Entries after Unapply.
      VerifyApplnRoundingVendLedger(
        DetailedVendorLedgEntry."Entry Type"::"Appln. Rounding",GenJournalLine."Document No.",AppRounding,
        GenJournalLine."Account No.");
      VerifyUnappliedEntries(GenJournalLine."Document No.",GenJournalLine."Account No.");
    END;

    [Test]
    PROCEDURE UnapplyPaymentCheckSourceCode@49();
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Test that correct Source Code updated on Detailed Vendor Ledger Entry after Unapply Payment from Vendor Ledger Entry.
      // Use Random Number Generator for Amount.
      Initialize;
      ApplyUnapplyAndCheckSourceCode(
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,-LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE UnapplyRefundCheckSourceCode@57();
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Test that correct Source Code updated on Detailed Vendor Ledger Entry after Unapply Refund from Vendor Ledger Entry.
      // Use Random Number Generator for Amount.
      Initialize;
      ApplyUnapplyAndCheckSourceCode(
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Document Type"::Refund,LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE ApplyUnapplyAndCheckSourceCode@78(DocumentType@1005 : Option;DocumentType2@1006 : Option;Amount@1004 : Decimal);
    VAR
      SourceCode@1000 : Record 230;
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Setup: Create Source Code, update Source Code Setup, create and post General Journal Lines.
      LibraryERM.CreateSourceCode(SourceCode);
      SetUnapplPurchEntryApplnSourceCode(SourceCode.Code);
      ApplyUnapplyVendorEntries(GenJournalLine,DocumentType,DocumentType2,1,Amount,-Amount);

      // Verify: Verify correct Source Code updated on Detailed Vendor Ledger Entry.
      VerifySourceCodeDtldCustLedger(DocumentType2,GenJournalLine."Document No.",SourceCode.Code);
    END;

    [Test]
    [HandlerFunctions(MessageHandler)]
    PROCEDURE SuggestVendorPmtAfterUnapply@10();
    VAR
      GenJournalLine@1002 : Record 81;
      BankAccount@1003 : Record 270;
      Amount@1004 : Decimal;
    BEGIN
      // Test that the Suggest Vendor Payment Batch Job works the same way with unapplied entries.

      // Setup: Create Bank Account, create and post General Journal Lines.
      // Use Random Number Generator for Amount.
      Initialize;
      Amount := LibraryRandom.RandDec(100,2);
      LibraryERM.CreateBankAccount(BankAccount);
      ApplyUnapplyVendorEntries(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,1,-Amount,Amount / 2);

      // Exercise.
      SuggestVendorPayment(GenJournalLine,BankAccount."No.");

      // Verify: Verify correct Amount updated on General Journal Line after running Suggest Vendor Payment Batch Job.
      VerifyGenJournalEntry(GenJournalLine,Amount - GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE ChangeExchRateUnapplyPayment@52();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check that Payment cannot be Unapplied after Exchange Rate has been changed.
      // Use Random Nunber Generator for Amount.
      Initialize;
      ChangeExchRateUnapply(
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,-LibraryRandom.RandInt(500));
    END;

    [Test]
    PROCEDURE ChangeExchRateUnapplyRefund@68();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check that Refund cannot be Unapplied after Exchange Rate has been changed.
      // Use Random Nunber Generator for Amount.
      Initialize;
      ChangeExchRateUnapply(
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Document Type"::Refund,LibraryRandom.RandInt(500));
    END;

    LOCAL PROCEDURE ChangeExchRateUnapply@65(DocumentType@1003 : Option;DocumentType2@1004 : Option;Amount@1007 : Decimal);
    VAR
      GenJournalLine@1000 : Record 81;
      DetailedVendorLedgEntry@1002 : Record 380;
      VendEntryApplyPostedEntries@1006 : Codeunit 227;
      PostingDate@1005 : Date;
    BEGIN
      // Setup: Update General Ledger Setup, Create and post General Journal Lines.
      LibraryERM.SetAddReportingCurrency(CreateCurrency(0));
      PostingDate := CALCDATE('<' + FORMAT(LibraryRandom.RandInt(10)) + 'M>',WORKDATE);
      CreatePostApplyGenJournalLine(GenJournalLine,DocumentType,DocumentType2,Amount,WORKDATE);
      CreateNewExchangeRate(PostingDate);
      FindDetailedLedgerEntry(
        DetailedVendorLedgEntry,DetailedVendorLedgEntry."Entry Type"::Application,GenJournalLine."Document No.",
        GenJournalLine."Account No.");

      // Exercise: Unapply Payment/Refund from Vendor Ledger Entry.
      ASSERTERROR VendEntryApplyPostedEntries.PostUnApplyVendor(DetailedVendorLedgEntry,GenJournalLine."Document No.",PostingDate);

      // Verify: Verify error on Unapply after Exchange Rate has been changed.
      Assert.AreEqual(STRSUBSTNO(UnapplyExchangeRateErr,WORKDATE),GETLASTERRORTEXT,MessageDoNotMatchErr);
    END;

    [Test]
    PROCEDURE ChangeDocumentNoUnapplyPayment@23();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Document No can be change when Unapply Payment from Vendor Ledger Entry.
      // Use Random Nunber Generator for Amount.
      Initialize;
      ChangeDocumentNoAndUnapply(
        GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,-LibraryRandom.RandInt(500));
    END;

    [Test]
    PROCEDURE ChangeDocumentNoUnapplyRefund@26();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Document No can be change when Unapply Refund from Vendor Ledger Entry.
      // Use Random Nunber Generator for Amount.
      Initialize;
      ChangeDocumentNoAndUnapply(
        GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Document Type"::Refund,LibraryRandom.RandInt(500));
    END;

    LOCAL PROCEDURE ChangeDocumentNoAndUnapply@25(DocumentType@1003 : Option;DocumentType2@1004 : Option;Amount@1007 : Decimal);
    VAR
      GenJournalLine@1000 : Record 81;
      DetailedVendorLedgEntry@1002 : Record 380;
      VendEntryApplyPostedEntries@1006 : Codeunit 227;
      DocumentNo@1009 : Code[20];
    BEGIN
      // Setup: Create and post General Journal Lines.
      CreatePostApplyGenJournalLine(GenJournalLine,DocumentType,DocumentType2,Amount,WORKDATE);
      FindDetailedLedgerEntry(
        DetailedVendorLedgEntry,DetailedVendorLedgEntry."Entry Type"::Application,GenJournalLine."Document No.",
        GenJournalLine."Account No.");
      DocumentNo := GenJournalLine."Account No.";

      // Exercise: Change Document No and Unapply Payment/Refund from Vendor Ledger Entry.
      VendEntryApplyPostedEntries.PostUnApplyVendor(
        DetailedVendorLedgEntry,GenJournalLine."Account No.",GenJournalLine."Posting Date");

      // Verify: Check Detailed Vendor Ledger Entry with updated Document No exist after Unapply.
      FindDetailedLedgerEntry(DetailedVendorLedgEntry,DetailedVendorLedgEntry."Entry Type"::Application,DocumentNo,DocumentNo);
    END;

    [Test]
    [HandlerFunctions(DateCompressConfirmHandler)]
    PROCEDURE UnapplyDateCompressVendLedger@30();
    VAR
      GenJournalLine@1000 : Record 81;
      VendorLedgerEntry@1004 : Record 25;
      DetailedVendorLedgEntry@1002 : Record 380;
      DateComprRegister@1001 : Record 87;
      VendEntryApplyPostedEntries@1006 : Codeunit 227;
      FirstPostingDate@1003 : Date;
    BEGIN
      // Check error when Unapplying Vendor Ledger entry which have been Date Compressed.

      // Setup: Create and post General Journal Lines, find Closed Fiscal Year, Date Compress the Vendor Ledger Entry.
      Initialize;
      FirstPostingDate := LibraryFiscalYear.GetFirstPostingDate(TRUE);
      LibraryFiscalYear.CheckPostingDate(FirstPostingDate);
      CreatePostApplyGenJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Invoice,GenJournalLine."Document Type"::Payment,
        -LibraryRandom.RandDec(100,2),FirstPostingDate);
      DateCompressForVendor(GenJournalLine,FirstPostingDate,DateComprRegister."Period Length"::Day);
      FindDetailedLedgerEntry(
        DetailedVendorLedgEntry,DetailedVendorLedgEntry."Entry Type"::Application,'',GenJournalLine."Account No.");

      // Exercise: Unapply Vendor Ledger Entry Which have been Date Compress.
      ASSERTERROR VendEntryApplyPostedEntries.PostUnApplyVendor(
          DetailedVendorLedgEntry,GenJournalLine."Account No.",GenJournalLine."Posting Date");

      // Verify: Verify error when Unapplying Vendor Ledger entry which have been Date Compress.
      Assert.AreEqual(STRSUBSTNO(DateCompressUnapplyErr,VendorLedgerEntry.TABLECAPTION),GETLASTERRORTEXT,MessageDoNotMatchErr);
    END;

    [Test]
    PROCEDURE UnapplyInvFromVendorLedger@36();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Unapply Invoice from Vendor Ledger Entry and verify error message.
      // Use Random Number Generator for Amount.
      Initialize;
      UnapplyFromVendorLedger(GenJournalLine."Document Type"::Invoice,-LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE UnapplyPaymentVendorLedger@42();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Unapply Payment from Vendor Ledger Entry and verify error message.
      // Use Random Number Generator for Amount.
      Initialize;
      UnapplyFromVendorLedger(GenJournalLine."Document Type"::Payment,LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE UnapplyCrMemoVendorLedger@43();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Unapply Credit Memo from Vendor Ledger Entry and verify error message.
      // Use Random Number Generator for Amount.
      Initialize;
      UnapplyFromVendorLedger(GenJournalLine."Document Type"::"Credit Memo",LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE UnapplyRefundVendorLedger@44();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Unapply Refund from Vendor Ledger Entry and verify error message.
      // Use Random Number Generator for Amount.
      Initialize;
      UnapplyFromVendorLedger(GenJournalLine."Document Type"::Refund,-LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE UnapplyFromVendorLedger@31(DocumentType@1005 : Option;Amount@1008 : Decimal);
    VAR
      GenJournalLine@1000 : Record 81;
      Vendor@1001 : Record 23;
      VendorLedgerEntry@1002 : Record 25;
      DetailedVendorLedgEntry@1006 : Record 380;
      VendEntryApplyPostedEntries@1004 : Codeunit 227;
    BEGIN
      // Setup: Create Vendor, Create and post General Journal  Line.
      LibraryPurchase.CreateVendor(Vendor);
      CreateAndPostGenJournalLine(GenJournalLine,Vendor."No.",DocumentType,Amount,'',WORKDATE);
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,GenJournalLine."Document No.");

      // Exercise: Unapply Document from Vendor Ledger Entry.
      ASSERTERROR VendEntryApplyPostedEntries.UnApplyVendLedgEntry(VendorLedgerEntry."Entry No.");

      // Verify: Verify error when Unapplying Document from Vendor Ledger Entry.
      Assert.AreEqual(
        STRSUBSTNO(ApplicationEntryErr,DetailedVendorLedgEntry.FIELDCAPTION("Vendor Ledger Entry No."),
          VendorLedgerEntry."Entry No."),GETLASTERRORTEXT,MessageDoNotMatchErr);
    END;

    [Test]
    PROCEDURE UnapplyInvDtldVendorLedger@45();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Unapply Invoice from Detailed Vendor Ledger Entry and verify error message.
      // Use Random Number Generator for Amount.
      Initialize;
      UnapplyFromDtldVendorLedger(GenJournalLine."Document Type"::Invoice,-LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE UnapplyPaymentDtldVendorLedger@46();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Unapply Payment from Detailed Vendor Ledger Entry and verify error message.
      // Use Random Number Generator for Amount.
      Initialize;
      UnapplyFromDtldVendorLedger(GenJournalLine."Document Type"::Payment,LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE UnapplyCrMemoDtVendorLedger@47();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Unapply Credit Memo from Detailed Vendor Ledger Entry and verify error message.
      // Use Random Number Generator for Amount.
      Initialize;
      UnapplyFromDtldVendorLedger(GenJournalLine."Document Type"::"Credit Memo",LibraryRandom.RandDec(100,2));
    END;

    [Test]
    PROCEDURE UnapplyRefundDtldVendorLedger@48();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Unapply Refund from Detailed Vendor Ledger Entry and verify error message.
      // Use Random Number Generator for Amount.
      Initialize;
      UnapplyFromDtldVendorLedger(GenJournalLine."Document Type"::Refund,-LibraryRandom.RandDec(100,2));
    END;

    LOCAL PROCEDURE UnapplyFromDtldVendorLedger@33(DocumentType@1005 : Option;Amount@1008 : Decimal);
    VAR
      GenJournalLine@1000 : Record 81;
      Vendor@1001 : Record 23;
      DetailedVendorLedgEntry@1006 : Record 380;
      VendEntryApplyPostedEntries@1004 : Codeunit 227;
    BEGIN
      // Setup: Create Vendor, Create and post General Journal  Line.
      LibraryPurchase.CreateVendor(Vendor);
      CreateAndPostGenJournalLine(GenJournalLine,Vendor."No.",DocumentType,Amount,'',WORKDATE);
      FindDetailedLedgerEntry(
        DetailedVendorLedgEntry,DetailedVendorLedgEntry."Entry Type"::"Initial Entry",GenJournalLine."Document No.",
        GenJournalLine."Account No.");

      // Exercise: Unapply Document from Detailed Vendor Ledger Entry.
      ASSERTERROR VendEntryApplyPostedEntries.UnApplyDtldVendLedgEntry(DetailedVendorLedgEntry);

      // Verify: Verify error when Unapplying Document from Detailed Vendor Ledger Entry.
      Assert.AreEqual(
        STRSUBSTNO(
          UnapplyErr,DetailedVendorLedgEntry.FIELDCAPTION("Entry Type"),DetailedVendorLedgEntry.TABLECAPTION,
          DetailedVendorLedgEntry.FIELDCAPTION("Entry No."),DetailedVendorLedgEntry."Entry No."),GETLASTERRORTEXT,
        MessageDoNotMatchErr);
    END;

    [Test]
    [HandlerFunctions(ApplyVendorEntriesPageHandler)]
    PROCEDURE RemainingAmtOnVendorLedgerEntryWithoutCurrency@38();
    VAR
      GenJournalLine@1005 : Record 81;
      PurchaseHeader@1001 : Record 38;
      Vendor@1000 : Record 23;
      VendorLedgerEntry@1002 : Record 25;
      PostedDocumentNo@1004 : Code[20];
      Amount@1009 : Decimal;
      PaymentTolerance@1006 : Decimal;
    BEGIN
      // Check Remaining Amount on Vendor Ledger Entry after Creating and Posting Purchase Invoice without Currency and Apply with Partial Payment.

      // Setup: Create and Post Purchase Invoice, Create a Vendor Payment and apply it to posted Invoice.
      Initialize;
      LibraryPmtDiscSetup.ClearAdjustPmtDiscInVATSetup;
      LibraryPmtDiscSetup.SetAdjustForPaymentDisc(TRUE);
      PaymentTolerance := LibraryRandom.RandDec(10,2);  // Using Random value for Payment Tolerance.
      SetPaymentTolerancePct(PaymentTolerance);
      LibraryPurchase.CreateVendor(Vendor);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,Vendor."No.");
      CreateAndModifyPurchaseLine(PurchaseHeader);
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreateGeneralJournalLine(GenJournalLine,1,Vendor."No.",GenJournalLine."Document Type"::Payment,0);  // Taken 1 and 0 to create only one General Journal line with zero amount.
      Amount := OpenGeneralJournalPage(GenJournalLine."Document No.",GenJournalLine."Document Type");

      // Exericse.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Remaining Amount on Vendor Ledger Entry.
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,PurchaseHeader."Document Type",PostedDocumentNo);
      VendorLedgerEntry.CALCFIELDS("Remaining Amount");
      VendorLedgerEntry.TESTFIELD("Remaining Amount",-Amount);
    END;

    [Test]
    PROCEDURE RemainingAmtOnVendorLedgerEntryWithCurrency@16();
    VAR
      GenJournalLine@1005 : Record 81;
      PurchaseHeader@1004 : Record 38;
      Vendor@1008 : Record 23;
      VendorLedgerEntry@1003 : Record 25;
      PostedDocumentNo@1001 : Code[20];
      Amount@1000 : Decimal;
      PaymentTolerance@1006 : Decimal;
    BEGIN
      // Check Remaining Amount on Vendor Ledger Entry after Creating and Posting Purchase Invoice with Currency and Apply with Partial Payment.

      // Setup: Create and Post Purchase Invoice with Currency, Create a Vendor Payment without Currency and apply it to posted Invoice after modifying Payment Amount.
      Initialize;
      LibraryPmtDiscSetup.ClearAdjustPmtDiscInVATSetup;
      LibraryPmtDiscSetup.SetAdjustForPaymentDisc(TRUE);
      PaymentTolerance := LibraryRandom.RandDec(10,2);  // Using Random value for Payment Tolerance.
      SetPaymentTolerancePct(PaymentTolerance);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CreateCurrency(LibraryRandom.RandDec(10,2)));
      Vendor.MODIFY(TRUE);
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,Vendor."No.");
      Amount := CreateAndModifyPurchaseLine(PurchaseHeader);
      Amount := LibraryERM.ConvertCurrency(Amount,PurchaseHeader."Currency Code",'',WORKDATE);
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreateGeneralJournalLine(GenJournalLine,1,Vendor."No.",GenJournalLine."Document Type"::Payment,0);  // Taken 1 and 0 to create only one General Journal line with zero amount.
      UpdateGenJournalLine(GenJournalLine,'',PostedDocumentNo,Amount);

      // Exericse.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Verify: Verify Remaining Amount on Customer Ledger Entry.
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,PurchaseHeader."Document Type",PostedDocumentNo);
      VendorLedgerEntry.CALCFIELDS("Remaining Amount");
      VendorLedgerEntry.TESTFIELD("Remaining Amount",0);  // Taken 0 for Remaining Amount as after application it must be zero due to Currency's Appln. Rounding Precision.
    END;

    [Test]
    PROCEDURE PurchaseOrderUsingPaymentMethodWithBalanceAccount@81();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      Vendor@1005 : Record 23;
      VendorLedgerEntry@1004 : Record 25;
      DocumentNo@1007 : Code[20];
    BEGIN
      // Check General Ledger, Vendor Ledger and Detailed Vendor ledger entries after Posting Purchase Order with Currency and Payment method with a balance account.

      // Setup: Modify General Ledger setup for Appln. Rounding Precision and Create Vendor with Currency and with Payment method with a balance account.
      Initialize;
      SetApplnRoundingPrecision(LibraryRandom.RandDec(10,2));  // Taken Random value for Rounding Precision.
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CreateCurrency(0));  // Taken 0 value for Rounding Precision.
      Vendor.VALIDATE("Payment Method Code",FindPaymentMethodWithBalanceAccount);
      Vendor.MODIFY(TRUE);

      // Exercise: Create and post Purchase Order with Random Quantity and Direct Unit Cost.
      DocumentNo :=
        CreateAndPostPurchaseDocument(
          PurchaseLine,WORKDATE,Vendor."No.",LibraryInventory.CreateItemNo,PurchaseHeader."Document Type"::Order,
          LibraryRandom.RandDec(10,2),LibraryRandom.RandDec(100,2));

      // Verify: Verify GL, Vendor and Detailed Vendor ledger entries.
      VerifyEntriesAfterPostingPurchaseDocument(VendorLedgerEntry."Document Type"::Payment,DocumentNo,DocumentNo,Vendor."No.");
    END;

    [Test]
    PROCEDURE ModifyPaymentMethodCodeInVendLedgEntryClosed@159();
    VAR
      Vendor@1004 : Record 23;
      PurchHeader@1000 : Record 38;
      PurchLine@1001 : Record 39;
      DocumentNo@1007 : Code[20];
    BEGIN
      // Setup.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Payment Method Code",FindPaymentMethodWithBalanceAccount);
      Vendor.MODIFY(TRUE);

      // Exercise: Create and post Sales Order.
      DocumentNo :=
        CreateAndPostPurchaseDocument(
          PurchLine,WORKDATE,Vendor."No.",LibraryInventory.CreateItemNo,PurchHeader."Document Type"::Order,
          LibraryRandom.RandDec(10,2),LibraryRandom.RandDec(100,2));

      // Verify: Try to modify Payment Method Code in Customer Ledger Entry.
      VerifyErrorAfterModifyPaymentMethod(DocumentNo);
    END;

    [Test]
    PROCEDURE PurchaseDocumentUsingApplicationMethodApplyToOldest@82();
    VAR
      Item@1006 : Record 27;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      Vendor@1003 : Record 23;
      VendorLedgerEntry@1002 : Record 25;
      DocumentNo@1000 : Code[20];
      DocumentNo2@1007 : Code[20];
    BEGIN
      // Check General Ledger, Vendor Ledger and Detailed Vendor ledger entries after posting Purchase documents with Currency and Apply to Oldest Application Method.

      // Setup: Modify General Ledger setup for Appln. Rounding Precision and Create Vendor with Currency and with Apply to Oldest Application Method, Create and post Purchase Invoice with Random Quantity and Direct Unit Cost.
      Initialize;
      SetApplnRoundingPrecision(LibraryRandom.RandDec(10,2));  // Taken Random value for Rounding Precision.
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",CreateCurrency(LibraryRandom.RandDec(10,2)));  // Taken Random value for Rounding Precision.
      Vendor.VALIDATE("Application Method",Vendor."Application Method"::"Apply to Oldest");
      Vendor.MODIFY(TRUE);
      LibraryInventory.CreateItem(Item);
      DocumentNo :=
        CreateAndPostPurchaseDocument(
          PurchaseLine,WORKDATE,Vendor."No.",Item."No.",PurchaseHeader."Document Type"::Invoice,LibraryRandom.RandDec(10,2),
          LibraryRandom.RandDec(100,2));

      // Exercise: Create and post Purchase Credit Memo.
      DocumentNo2 :=
        CreateAndPostPurchaseDocument(
          PurchaseLine,WORKDATE,Vendor."No.",Item."No.",PurchaseHeader."Document Type"::"Credit Memo",PurchaseLine.Quantity,
          PurchaseLine."Direct Unit Cost");

      // Verify: Verify GL, Vendor and Detailed Vendor ledger entries.
      VerifyEntriesAfterPostingPurchaseDocument(VendorLedgerEntry."Document Type"::"Credit Memo",DocumentNo,DocumentNo2,Vendor."No.");
    END;

    [Test]
    [HandlerFunctions(UnapplyVendorEntriesPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE ApplyUnapplyDifferentDocumentTypesToPayment@72();
    VAR
      VendorLedgerEntry@1006 : Record 25;
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1003 : Record 81;
      VendEntryApplyPostedEntries@1001 : Codeunit 227;
      Amount@1004 : Decimal;
    BEGIN
      // Verify Program populates correct Document Type value on G/L entry window after doing un application on Vendor when adjust for payment discount is involved.

      // Setup: Post Invocie, Credit Memo and Payment Line.
      Initialize;
      LibraryPmtDiscSetup.SetAdjustForPaymentDisc(TRUE);
      SelectGenJournalBatch(GenJournalBatch);
      Amount := LibraryRandom.RandDec(1000,2);  // Using Random value for Amount.
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Vendor,CreateVendor,-Amount);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::"Credit Memo",
        GenJournalLine."Account Type"::Vendor,GenJournalLine."Account No.",Amount / 2);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Vendor,GenJournalLine."Account No.",GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      ApplyAndPostMultipleVendorEntries(GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.",Amount / 2);
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.");

      // Exercise: Unapply Vendor Entries.
      VendEntryApplyPostedEntries.UnApplyVendLedgEntry(VendorLedgerEntry."Entry No.");

      // Verify: Verfiy Document Type should be Payment in G/L Entry.
      VerifyUnapplyGLEntry(VendorLedgerEntry."Document No.");
    END;

    [Test]
    [HandlerFunctions(ApplyVendorEntriesPageHandler)]
    PROCEDURE ApplyAndUnapplyPaymentJournal@87();
    VAR
      PurchaseHeader@1007 : Record 38;
      GenJournalLine@1005 : Record 81;
      VATPostingSetup@1000 : Record 325;
      OldAdjustforPaymentDiscount@1001 : Boolean;
    BEGIN
      // Verify VAT Amount on G/L Entry after Unappling Payment from Vendor Ledger Entry.

      // Setup: Modify General Ledger Setup,VAT Posting Setup and Create Vendor With Payment Terms.Post Purchase Invoice and Payment Line.
      Initialize;
      LibraryPmtDiscSetup.SetAdjustForPaymentDisc(TRUE);
      LibraryPmtDiscSetup.SetPmtTolerance(LibraryRandom.RandDec(100,2));
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT");
      OldAdjustforPaymentDiscount := SetAdjustForPaymentDiscInVATPostingSetup(VATPostingSetup,TRUE);
      CreateAndPostPurchaseOrder(PurchaseHeader,VATPostingSetup);
      CreateGeneralJournalLine(GenJournalLine,1,PurchaseHeader."Buy-from Vendor No.",GenJournalLine."Document Type"::Payment,0);  // Taken 1 and 0 to create only one General Journal line with zero amount.
      OpenGeneralJournalPage(GenJournalLine."Document No.",GenJournalLine."Document Type");  // Open General Journal Page and apply to above Posted Purchase Invoice.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Unapply Vendor Entries.
      UnapplyVendorLedgerEntry(GenJournalLine."Document Type",GenJournalLine."Document No.");

      // Verify: Verify VAT Amount on G/L Entry.
      VerifyVATAmountOnGLEntry(GenJournalLine);

      // TearDown: Cleanup of setup done.
      SetAdjustForPaymentDiscInVATPostingSetup(VATPostingSetup,OldAdjustforPaymentDiscount);
    END;

    [Test]
    [HandlerFunctions(VendorLedgerEntriesPageHandler,ApplyVendorEntriesPageHandler)]
    PROCEDURE AmountToApplyAfterApplyToEntryForInvoice@86();
    VAR
      Item@1006 : Record 27;
      GenJournalLine@1005 : Record 81;
      PurchaseHeader@1004 : Record 38;
      PurchaseLine@1003 : Record 39;
      Vendor@1002 : Record 23;
      DocumentNo@1000 : Code[20];
    BEGIN
      // Verify Amount To Apply on Vendor Ledger Entries after Invoking Apply Vendor Entries for Invoice.

      // Setup: Post Invoice and Payment for Vendor.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      DocumentNo :=
        CreateAndPostPurchaseDocument(
          PurchaseLine,WORKDATE,Vendor."No.",LibraryInventory.CreateItem(Item),PurchaseHeader."Document Type"::Order,
          LibraryRandom.RandDec(10,2),LibraryRandom.RandDec(1000,2));
      CreateGeneralJournalLine(GenJournalLine,1,Vendor."No.",GenJournalLine."Document Type"::Payment,
        LibraryRandom.RandDec(100,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryVariableStorage.Enqueue(FALSE); // Do not invoke set applies to ID action

      // Exercise: Run Page Vendor Ledger Entries to invoke Apply Vendor Entries.
      RunVendorLedgerEntries(Vendor."No.",DocumentNo);

      // Verify: Verify Amount To Apply on Vendor Ledger Entries for Document Type Invoice.
      VerifyAmountToApplyOnVendorLedgerEntries(DocumentNo,PurchaseHeader."Document Type"::Invoice);
    END;

    [Test]
    [HandlerFunctions(VendorLedgerEntriesPageHandler,ApplyVendorEntriesPageHandler)]
    PROCEDURE AmountToApplyAfterApplyToEntryForPayment@80();
    VAR
      Item@1002 : Record 27;
      GenJournalLine@1001 : Record 81;
      PurchaseHeader@1005 : Record 38;
      PurchaseLine@1004 : Record 39;
      Vendor@1003 : Record 23;
    BEGIN
      // Verify Amount To Apply on Vendor Ledger Entries after Invoking Apply Vendor Entries for Payment.

      // Setup: Post Invoice and Payment for Vendor.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      CreateAndPostPurchaseDocument(
        PurchaseLine,WORKDATE,Vendor."No.",LibraryInventory.CreateItem(Item),PurchaseHeader."Document Type"::Invoice,
        LibraryRandom.RandDec(10,2),LibraryRandom.RandDec(1000,2));
      CreateGeneralJournalLine(GenJournalLine,1,Vendor."No.",GenJournalLine."Document Type"::Payment,
        LibraryRandom.RandDec(100,2));
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryVariableStorage.Enqueue(FALSE); // Do not invoke set applies to ID action

      // Exercise: Run Page Vendor Ledger Entries to invoke Apply Vendor Entries.
      RunVendorLedgerEntries(Vendor."No.",GenJournalLine."Document No.");

      // Verify: Verify Amount To Apply on Vendor Ledger Entries for Document Type Payment.
      VerifyAmountToApplyOnVendorLedgerEntries(GenJournalLine."Document No.",GenJournalLine."Document Type"::Payment);
    END;

    [Test]
    [HandlerFunctions(ApplyingVendorEntriesPageHandler)]
    PROCEDURE CheckAmountOnApplyVendorEntriesPage@93();
    VAR
      GenJournalLine@1001 : Record 81;
      DummyGeneralJournal@1004 : TestPage 39;
    BEGIN
      // Verify that Apply Vendor Entry Page Shows Correct value when payment is applied under due date.

      // Setup: Create and post Gen journal line for two Invoice and two Credit Memo. and Create One Payment Line.
      Initialize;
      CreateGeneralJournalLine(
        GenJournalLine,2,CreateVendor,GenJournalLine."Document Type"::Invoice,-LibraryRandom.RandIntInRange(100,200));
      ModifyGenJournalLine(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateGenJnlLineWithDoctTypeCreditMemo(GenJournalLine);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      CreateGeneralJournalLine(GenJournalLine,1,GenJournalLine."Account No.",GenJournalLine."Document Type"::Payment,
        GetTotalAppliedAmount(GenJournalLine."Account No.",GenJournalLine."Posting Date"));
      ModifyGenJournalLine(GenJournalLine);

      // Exercise: Apply Set Applies To ID and Amount Apply.
      SetAppliesToIDAndAmountToApply(GenJournalLine."Account No.",GenJournalLine."Document No.");

      // Verify: Verification done in ApplyingVendorEntriesPageHandler.
      OpenGenJournalPage(DummyGeneralJournal,GenJournalLine."Document No.",GenJournalLine."Document Type");
      DummyGeneralJournal."Apply Entries".INVOKE;
    END;

    [Test]
    PROCEDURE ApplyUnapplyPurchInvoicesWithDimVals@95();
    BEGIN
      // Verify that Dimension Set ID and Global Dimension values are correct after unapply of Vendor Ledger Entries with different Dimension Set IDs.
      Initialize;
      ApplyUnapplyVendEntriesWithMiscDimSetIDs(
        LibraryRandom.RandIntInRange(3,10));
    END;

    [Test]
    [HandlerFunctions(ApplyVendorEntriesPageHandlerControlValuesVerification)]
    PROCEDURE RoundingAndBalanceAmountOnPaymentApplication@123();
    VAR
      GenJournalLine@1005 : Record 81;
    BEGIN
      // Verify Application Rounding and Balance amounts on Payment application
      RunRoundingAndBalanceAmountOnApplicationTest(GenJournalLine."Document Type"::Payment);
    END;

    [Test]
    [HandlerFunctions(ApplyVendorEntriesPageHandlerControlValuesVerification)]
    PROCEDURE RoundingAndBalanceAmountOnRefundApplication@120();
    VAR
      GenJournalLine@1005 : Record 81;
    BEGIN
      // Verify Application Rounding and Balance amounts on Refund application
      RunRoundingAndBalanceAmountOnApplicationTest(GenJournalLine."Document Type"::Refund);
    END;

    [Test]
    PROCEDURE SetAppliesToCrMemoDocNoForRefund@107();
    VAR
      Vendor@1002 : Record 23;
      GenJnlLine@1001 : Record 81;
      VendLedgEntry@1003 : Record 25;
    BEGIN
      // Verify that "Applies To Doc. No." can be validated with "Credit Memo" for Refund journal line.

      // Setup: Post credit memo and create empty refund line without customer and amount.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      CreateGeneralJournalLine(
        GenJnlLine,1,Vendor."No.",GenJnlLine."Document Type"::"Credit Memo",LibraryRandom.RandDec(100,2));
      LibraryERM.PostGeneralJnlLine(GenJnlLine);
      LibraryERM.FindVendorLedgerEntry(
        VendLedgEntry,VendLedgEntry."Document Type"::"Credit Memo",GenJnlLine."Document No.");

      CreateGeneralJournalLine(GenJnlLine,1,'',GenJnlLine."Document Type"::Refund,0);

      // Exercise: Set open Credit Memo No. for "Applies To Doc. No".
      GenJnlLine.VALIDATE("Applies-to Doc. No.",VendLedgEntry."Document No.");
      GenJnlLine.MODIFY(TRUE);

      // Verify: Customer No. and "Applies To Doc. Type" are filled correctly.
      Assert.AreEqual(
        VendLedgEntry."Vendor No.",GenJnlLine."Account No.",
        STRSUBSTNO(WrongFieldErr,GenJnlLine.FIELDCAPTION("Account No."),GenJnlLine.TABLECAPTION));
    END;

    [Test]
    [HandlerFunctions(VendorLedgerEntriesPageHandler,ApplyAndVerifyVendorEntriesPageHandler)]
    PROCEDURE AppliedAmountDifferentCurrencies@190();
    VAR
      GenJournalBatch@1007 : Record 232;
      GenJournalLine@1005 : Record 81;
      Vendor@1000 : Record 23;
      CurrencyCode@1003 : Code[10];
      ExchangeRateAmount@1001 : Decimal;
      InvoiceAmount@1004 : Decimal;
      PaymentAmount@1008 : Decimal;
    BEGIN
      // Verify Applied Amount on Apply Entries Page when applying entries in different currencies

      // Setup
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      SelectGenJournalBatch(GenJournalBatch);
      ExchangeRateAmount := LibraryRandom.RandDecInRange(10,50,2);
      CurrencyCode := LibraryERM.CreateCurrencyWithExchangeRate(WORKDATE,ExchangeRateAmount,ExchangeRateAmount);
      PaymentAmount := LibraryRandom.RandDecInRange(100,1000,2);
      InvoiceAmount := PaymentAmount * LibraryRandom.RandIntInRange(3,5);

      // Exercise
      CreateAndPostGenJnlLineWithCurrency(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Invoice,
        Vendor."No.",'',-InvoiceAmount);
      CreateAndPostGenJnlLineWithCurrency(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::"Credit Memo",
        Vendor."No.",'',PaymentAmount);
      CreateAndPostGenJnlLineWithCurrency(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Payment,
        Vendor."No.",CurrencyCode,PaymentAmount);

      LibraryVariableStorage.Enqueue(PaymentAmount);
      LibraryVariableStorage.Enqueue(InvoiceAmount);
      LibraryVariableStorage.Enqueue(ExchangeRateAmount);

      // Verify: verification in page handler
      RunVendorLedgerEntries(Vendor."No.",GenJournalLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(UnapplyVendorEntriesPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE ConsistentUnapplyInvoiceToPayment@180();
    VAR
      PurchLine@1001 : Record 39;
      GenJournalLine@1003 : Record 81;
      VendLedgerEntry@1007 : Record 25;
      VendEntryApplyPostedEntries@1011 : Codeunit 227;
      VendorNo@1009 : Code[20];
      ItemNo@1002 : Code[20];
      AdditionalCurrencyCode@1005 : Code[10];
      ForeignCurrencyCode@1006 : Code[10];
      DocumentNo@1008 : Code[20];
      InvoiceDate@1010 : Date;
    BEGIN
      // [SCENARIO] Apply / Unapply Payment in additional currency to Invoice in foreigh currency with certain exchange rates

      // [GIVEN] No VAT setup, Foreign Currency and Additional Currency.
      Initialize;
      SetupSpecificExchRates(ForeignCurrencyCode,AdditionalCurrencyCode,InvoiceDate);
      CreateVendorAndItem(VendorNo,ItemNo,ForeignCurrencyCode);
      LibraryERM.SetAddReportingCurrency(AdditionalCurrencyCode);

      // [GIVEN] Posted Purchase Invoice for Customer with foreigh currency
      DocumentNo :=
        CreateAndPostPurchaseDocument(
          PurchLine,InvoiceDate,VendorNo,ItemNo,PurchLine."Document Type"::Invoice,1,5000);
      // [GIVEN] Payment in ACY applied to Purchase Invoice
      PostApplyPaymentForeignCurrency(
        GenJournalLine,VendorNo,AdditionalCurrencyCode,4132.91,
        GenJournalLine."Applies-to Doc. Type"::Invoice,DocumentNo);

      // [WHEN] Invoice unapplied from payment
      LibraryERM.FindVendorLedgerEntry(
        VendLedgerEntry,VendLedgerEntry."Document Type"::Payment,GenJournalLine."Document No.");
      VendEntryApplyPostedEntries.UnApplyVendLedgEntry(VendLedgerEntry."Entry No.");

      // [THEN] Reversal G/L Entries have zero ACY Amounts
      VerifyACYInGLEntriesOnUnapplication(0,VendLedgerEntry."Document Type"::Payment,GenJournalLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(UnapplyVendorEntriesPageHandler,ConfirmHandler,MessageHandler)]
    PROCEDURE ApplyUnapplySeveralInvAndPmtWithDifferentDimValues@113();
    VAR
      GenJournalBatch@1004 : Record 232;
      GenJournalLine@1003 : Record 81;
      Vendor@1011 : Record 23;
      VendLedgEntry@1005 : Record 25;
      GLEntry@1014 : Record 17;
      LibraryPmtDiscSetup@1012 : Codeunit 131303;
      VendEntryApplyPostedEntries@1009 : Codeunit 227;
      InvDimSetIDs@1008 : ARRAY [10] OF Integer;
      PmtDimSetIDs@1010 : ARRAY [10] OF Integer;
      Amounts@1007 : ARRAY [10] OF Decimal;
      DiscountedAmounts@1006 : ARRAY [10] OF Decimal;
      DiscountPercent@1015 : Integer;
      NoOfDocuments@1000 : Integer;
      LastGLEntryNo@1013 : Integer;
      i@1001 : Integer;
    BEGIN
      // [SCENARIO 121881] Verify balance by dimensions = 0 after Apply/Unapply several Payments to Invoices with different dimensions
      Initialize;

      // [GIVEN] Last "G/L Entry" = LastGLEntryNo
      GLEntry.FINDLAST;
      LastGLEntryNo := GLEntry."Entry No.";

      // [GIVEN] Vendor with possible discount
      DiscountPercent := LibraryRandom.RandIntInRange(1,10);
      LibraryPmtDiscSetup.SetAdjustForPaymentDisc(TRUE);
      CreateVendorWithGivenPaymentTerm(Vendor,CreatePaymentTermsWithGivenDiscount(DiscountPercent));

      NoOfDocuments := LibraryRandom.RandIntInRange(3,10);
      FOR i := 1 TO NoOfDocuments DO BEGIN
        Amounts[i] := 100 * LibraryRandom.RandIntInRange(1,100);
        DiscountedAmounts[i] := Amounts[i] * (100 - DiscountPercent) / 100;
      END;

      // [GIVEN] Post "N" Invoices with different dimensions "InvDims[i]" and amounts "Amounts[i]"
      SelectGenJournalBatch(GenJournalBatch);
      CreatePostGenJnlLinesWithDimSetIDs(
        GenJournalLine,GenJournalBatch,InvDimSetIDs,NoOfDocuments,
        Vendor."No.",GenJournalLine."Document Type"::Invoice,Amounts,-1);

      // [GIVEN] Create "N" Gen. Journal Lines with different dimensions "PmtDims[i]" and "Document Type" = Payment
      CreateGenJnlLinesWithDimSetIDs(
        GenJournalLine,GenJournalBatch,PmtDimSetIDs,NoOfDocuments,
        Vendor."No.",GenJournalLine."Document Type"::Payment,DiscountedAmounts,1);

      // [GIVEN] Set Gen. Journal Lines "Applies-to ID" and select customer Invoices Ledger Entries
      ApplyVendLedgerEntriesToID(Vendor."No.",GenJournalLine."Document No.",DiscountedAmounts);

      // [GIVEN] Post Gen. Journal Lines
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [WHEN] Unapply "N" Invoices Ledger Entries
      FOR i := 1 TO NoOfDocuments DO BEGIN
        FindClosedInvLedgerEntry(VendLedgEntry,Vendor."No.");
        VendEntryApplyPostedEntries.UnApplyVendLedgEntry(VendLedgEntry."Entry No.");
      END;

      // [THEN] Count of created "G/L Entries" with "Entry No." > LastGLEntryNo is "N" * (2 (Inv) + 3 (Apply) + 2 (UnApply))
      GLEntry.SETFILTER("Entry No.",'>%1',LastGLEntryNo);
      Assert.AreEqual(NoOfDocuments * (2 + 3 + 2),GLEntry.COUNT,GLEntryCntErr);

      // [THEN] Balance by "InvDims[i]" and "PmtDims[i]" = 0 for the "Entry No." > LastGLEntryNo
      FOR i := 1 TO NoOfDocuments DO BEGIN
        Assert.AreEqual(0,CalcBalanceByDimension(GLEntry,InvDimSetIDs[i]),DimBalanceErr);
        Assert.AreEqual(0,CalcBalanceByDimension(GLEntry,PmtDimSetIDs[i]),DimBalanceErr);
      END;

      // [THEN] Balance by "InvDims[i]" = 0 for the Invoice "G/L Entries" with "Entry No." in [LastGLEntryNo + 1,LastGLEntryNo + 2 * "N"]
      GLEntry.SETRANGE("Entry No.",LastGLEntryNo + 1,LastGLEntryNo + 2 * NoOfDocuments);
      FOR i := 1 TO NoOfDocuments DO
        Assert.AreEqual(0,CalcBalanceByDimension(GLEntry,InvDimSetIDs[i]),DimBalanceErr);

      // [THEN] Balance by "InvDims[i]" = 0, by "PmtDims[i]" = 0 for the Apply "G/L Entries" with "Entry No." in [LastGLEntryNo + 2 * "N" + 1,LastGLEntryNo + (2 + 3) * "N"]
      GLEntry.SETRANGE("Entry No.",LastGLEntryNo + 2 * NoOfDocuments + 1,LastGLEntryNo + (2 + 3) * NoOfDocuments);
      FOR i := 1 TO NoOfDocuments DO BEGIN
        Assert.AreEqual(0,CalcBalanceByDimension(GLEntry,InvDimSetIDs[i]),DimBalanceErr);
        Assert.AreEqual(0,CalcBalanceByDimension(GLEntry,PmtDimSetIDs[i]),DimBalanceErr);
      END;

      // [THEN] Balance by "InvDims[i]" = 0, by "PmtDims[i]" = 0 for the UnApply "G/L Entries" with "Entry No." in [LastGLEntryNo + (2 + 3) * "N" + 1,LastGLEntryNo + (2 + 3 + 2) * "N"]
      GLEntry.SETRANGE("Entry No.",LastGLEntryNo + (2 + 3) * NoOfDocuments + 1,LastGLEntryNo + (2 + 3 + 2) * NoOfDocuments);
      FOR i := 1 TO NoOfDocuments DO BEGIN
        Assert.AreEqual(0,CalcBalanceByDimension(GLEntry,InvDimSetIDs[i]),DimBalanceErr);
        Assert.AreEqual(0,CalcBalanceByDimension(GLEntry,PmtDimSetIDs[i]),DimBalanceErr);
      END;
    END;

    [Test]
    PROCEDURE NoVATEntriesWhenUnapplyZeroDiscEntryWithAdjForPmtDisc@111();
    VAR
      PurchLine@1006 : Record 39;
      GenJnlLine@1003 : Record 81;
      VendLedgEntry@1004 : Record 25;
      PostedDocumentNo@1005 : Code[20];
      EmptyDocumentType@1002 : Option;
    BEGIN
      // Verify that no VAT are entries creates when unapplies the entry without discount but with "Adjust For Payment Discount"

      // Setup: Set "Adjust For Payment Discount" option.
      Initialize;
      LibraryPmtDiscSetup.SetAdjustForPaymentDisc(TRUE);
      EmptyDocumentType := 0;

      // Exercise: Find and modify Reverse Charge VAT posting setup with "Adjust For Payment Disc." and post invoice.
      PostedDocumentNo :=
        CreatePostPurchInvWithReverseChargeVATAdjForPmtDisc(PurchLine);
      LibraryERM.FindVendorLedgerEntry(VendLedgEntry,VendLedgEntry."Document Type"::Invoice,PostedDocumentNo);
      VendLedgEntry.CALCFIELDS("Amount (LCY)");

      // Exercise: Post and apply document with empty type.
      CreateGenJnlLineWithPostingGroups(GenJnlLine,PurchLine."Pay-to Vendor No.",EmptyDocumentType,
        -VendLedgEntry."Amount (LCY)",PurchLine);
      GenJnlLine.VALIDATE("Applies-to Doc. Type",GenJnlLine."Applies-to Doc. Type"::Invoice);
      GenJnlLine.VALIDATE("Applies-to Doc. No.",PostedDocumentNo);
      GenJnlLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJnlLine);

      // Exericse: Unapply the empty document application.
      LibraryERM.FindVendorLedgerEntry(VendLedgEntry,EmptyDocumentType,GenJnlLine."Document No.");
      LibraryERM.UnapplyVendorLedgerEntry(VendLedgEntry);

      // Verify: Make sure that no entries have been created on unapplication.
      VerifyNoVATEntriesOnUnapplication(EmptyDocumentType,GenJnlLine."Document No.");

      // Tear Down: Return back the old value of "Adjust For Payment Discount".
      LibraryPmtDiscSetup.ClearAdjustPmtDiscInVATSetup;
    END;

    [Test]
    PROCEDURE ApplyPaymentToInvoiceCreditMemoWithPaymentDisc@127();
    VAR
      VendorLedgerEntry@1006 : Record 25;
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1003 : Record 81;
      Amount@1004 : Decimal;
      RemainingAmount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Payment Discount]
      // [SCENARIO 364591] Application of Payment to Invoice and Credit Memo with Payment Discount
      Initialize;
      SelectGenJournalBatch(GenJournalBatch);

      // [GIVEN] Posted Purchase Invoice with Amount "X", Payment Discount Amount = "D".
      Amount := LibraryRandom.RandDec(1000,2);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Vendor,CreateVendor,-Amount);

      // [GIVEN] Posted Purchase Credit Memo with Amount "Y" < "X"
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::"Credit Memo",
        GenJournalLine."Account Type"::Vendor,GenJournalLine."Account No.",LibraryRandom.RandDecInDecimalRange(1,Amount,2));

      // [GIVEN] Posted Payment with Amount "Z" = "X" - "Y"
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::Vendor,GenJournalLine."Account No.",Amount - GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [WHEN] Payment is applied to both Invoice and Credit Memo
      ApplyAndPostMultipleVendorEntries(GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.",GenJournalLine.Amount);
      VendorLedgerEntry.SETRANGE("Vendor No.",GenJournalLine."Account No.");

      // [THEN] Vendor Ledger Entries for Invoice and Credit Memo are closed and "Remaining Pmt. Disc. Possible" = 0
      VerifyVLEPaymentDisc(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,FALSE,0,0);
      RemainingAmount := -VendorLedgerEntry."Original Pmt. Disc. Possible";
      VerifyVLEPaymentDisc(VendorLedgerEntry,VendorLedgerEntry."Document Type"::"Credit Memo",FALSE,0,0);
      // [THEN] Vendor Ledger Entries for Payment is Opened. "Remaining Amount" = "D".
      VerifyVLEPaymentDisc(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Payment,TRUE,0,RemainingAmount);
    END;

    [Test]
    PROCEDURE ApplyRefundToCreditMemoInvoiceWithPaymentDisc@128();
    VAR
      VendorLedgerEntry@1006 : Record 25;
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1003 : Record 81;
      Amount@1004 : Decimal;
      RemainingAmount@1000 : Decimal;
    BEGIN
      // [FEATURE] [Payment Discount]
      // [SCENARIO 364591] Application of Refund to Credit Memo and Invoice with Payment Discount
      Initialize;
      SelectGenJournalBatch(GenJournalBatch);

      // [GIVEN] Posted Purchase Credit Memo with Amount "X", "Payment Discount Amount" = "D".
      Amount := LibraryRandom.RandDec(1000,2);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::"Credit Memo",
        GenJournalLine."Account Type"::Vendor,CreateVendor,Amount);

      // [GIVEN] Posted Purchase Invoice with Amount "Y" < "X"
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::Vendor,GenJournalLine."Account No.",-LibraryRandom.RandDecInDecimalRange(1,Amount,2));

      // [GIVEN] Posted Refund with Amount "Z" = "X" - "Y"
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,GenJournalLine."Document Type"::Refund,
        GenJournalLine."Account Type"::Vendor,GenJournalLine."Account No.",-Amount - GenJournalLine.Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [WHEN] Payment is applied to both Credit Memo and Invoice
      ApplyAndPostMultipleVendorEntries(GenJournalLine."Document Type"::Refund,GenJournalLine."Document No.",GenJournalLine.Amount);
      VendorLedgerEntry.SETRANGE("Vendor No.",GenJournalLine."Account No.");

      // [THEN] Vendor Ledger Entries for Credit Memo and Invoice are closed and "Remaining Pmt. Disc. Possible" = 0
      VerifyVLEPaymentDisc(VendorLedgerEntry,VendorLedgerEntry."Document Type"::"Credit Memo",FALSE,0,0);
      RemainingAmount := -VendorLedgerEntry."Original Pmt. Disc. Possible";
      VerifyVLEPaymentDisc(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,FALSE,0,0);
      // [THEN] Vendor Ledger Entries for Refund is Opened. "Remaining Amount" = "D".
      VerifyVLEPaymentDisc(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Refund,TRUE,0,RemainingAmount);
    END;

    [Test]
    PROCEDURE ErrorMessageOnApplyWithoutAplliesToID@4();
    VAR
      VendLedgerEntry@1006 : Record 25;
      GenJournalBatch@1002 : Record 232;
      GenJournalLine@1003 : Record 81;
      GenJournalTemplate@1001 : Record 80;
      VendEntryApplyPostedEntries@1005 : Codeunit 227;
      Amount@1004 : Decimal;
      VendorNo@1000 : Code[20];
      DocNo@1008 : Code[20];
    BEGIN
      // [SCENARIO 380040] During application, if there is no "Applies-to ID", then "The application could not be posted, because no entry
      // [SCENARIO] has been selected to be applied / for none of the open entries the "Applies-to ID" has been specfied." error message should appear

      Initialize;

      // [GIVEN] Vendor VVV
      VendorNo := LibraryPurchase.CreateVendorNo;

      // [GIVEN] Gen. Journal Batch GJB with two lines
      // [GIVEN] Gen. Journal Line JL1: an invoice for Vendor VVV with "Document No" = 123 and "Amount" = -1000
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      Amount := LibraryRandom.RandDec(1000,2);
      LibraryERM.CreateGeneralJnlLineWithBalAcc(
        GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,GenJournalLine."Document Type"::Invoice,
        GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,
        GenJournalLine."Bal. Account Type"::Vendor,VendorNo,Amount);
      DocNo := GenJournalLine."Document No.";

      // [GIVEN] Gen. Journal Line JL2: a payment for Vendor VVV with "Document No" = 123 (same as JL1) and "Amount" = 1000
      LibraryERM.CreateGeneralJnlLineWithBalAcc(
        GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,
        GenJournalLine."Bal. Account Type"::Vendor,VendorNo,-Amount);
      GenJournalLine.VALIDATE("Document No.",DocNo);
      GenJournalLine.MODIFY(TRUE);

      // [GIVEN] Batch GJB posted
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // [WHEN] Apply Payment to Invoice
      LibraryERM.FindVendorLedgerEntry(VendLedgerEntry,VendLedgerEntry."Document Type"::Payment,DocNo);
      ASSERTERROR VendEntryApplyPostedEntries.Apply(VendLedgerEntry,DocNo,WORKDATE);

      // [THEN] The following message appears: Cannot post because you did not specify which entry to apply. You must specify an entry in the Applies-to ID field for one or more open entries.
      Assert.ExpectedError(NoEntriesAppliedErr);
    END;

    LOCAL PROCEDURE Initialize@14();
    VAR
      LibraryERMCountryData@1010 : Codeunit 131305;
    BEGIN
      LibrarySetupStorage.Restore;
      LibraryVariableStorage.Clear;
      IF IsInitialized THEN
        EXIT;

      LibraryPurchase.SetInvoiceRounding(FALSE);
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateAccountInVendorPostingGroups;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.RemoveBlankGenJournalTemplate;
      LibraryERMCountryData.UpdateLocalData;
      IsInitialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      LibrarySetupStorage.Save(DATABASE::"Purchases & Payables Setup");
      LibrarySetupStorage.Save(DATABASE::"Source Code Setup");
    END;

    LOCAL PROCEDURE SetupSpecificExchRates@181(VAR ForeignCurrencyCode@1002 : Code[10];VAR AdditionalCurrencyCode@1000 : Code[10];VAR DocumentDate@1001 : Date);
    BEGIN
      DocumentDate := CALCDATE('<-' + FORMAT(LibraryRandom.RandIntInRange(10,20)) + 'D>',WORKDATE);
      ForeignCurrencyCode := CreateCurrencyAndExchangeRate(100,46.0862,DocumentDate);
      AdditionalCurrencyCode := CreateCurrencyAndExchangeRate(100,55.7551,DocumentDate);
      CreateExchangeRate(AdditionalCurrencyCode,100,50,WORKDATE);
    END;

    LOCAL PROCEDURE PostApplyPaymentForeignCurrency@182(VAR GenJournalLine@1000 : Record 81;VendorNo@1006 : Code[20];CurrencyCode@1001 : Code[10];PaymentAmount@1002 : Decimal;AppliedDocumentType@1003 : Option;AppliedDocumentNo@1004 : Code[20]);
    BEGIN
      WITH GenJournalLine DO BEGIN
        CreateGeneralJournalLine(GenJournalLine,1,VendorNo,"Document Type"::Payment,0);
        VALIDATE("Currency Code",CurrencyCode);
        VALIDATE(Amount,PaymentAmount);
        VALIDATE("Applies-to Doc. Type",AppliedDocumentType);
        VALIDATE("Applies-to Doc. No.",AppliedDocumentNo);
        VALIDATE("Bal. Account Type","Bal. Account Type"::"Bank Account");
        VALIDATE("Bal. Account No.",CreateBankAccountWithCurrency(CurrencyCode));
        MODIFY(TRUE);
        LibraryERM.PostGeneralJnlLine(GenJournalLine);
      END;
    END;

    LOCAL PROCEDURE CreateVendorAndItem@183(VAR VendorNo@1000 : Code[20];VAR ItemNo@1001 : Code[20];ForeignCurrencyCode@1002 : Code[10]);
    VAR
      GeneralPostingSetup@1004 : Record 252;
      VATPostingSetup@1005 : Record 325;
      Vendor@1003 : Record 23;
    BEGIN
      LibraryERM.FindGeneralPostingSetupInvtFull(GeneralPostingSetup);
      CreateVATPostingSetup(VATPostingSetup,0);

      ItemNo :=
        CreateItemWithPostingSetup(
          GeneralPostingSetup."Gen. Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      VendorNo :=
        CreateVendorWithPostingSetup(
          GeneralPostingSetup."Gen. Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      WITH Vendor DO BEGIN
        GET(VendorNo);
        VALIDATE("Currency Code",ForeignCurrencyCode);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE RunRoundingAndBalanceAmountOnApplicationTest@102(DocumentType@1004 : Option);
    VAR
      Currency@1002 : Record 4;
      Vendor@1000 : Record 23;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1003 : Record 39;
      GenJournalLine@1005 : Record 81;
      Item@1006 : Record 27;
      LineAmount@1007 : Decimal;
      CurrencyFactor@1008 : Decimal;
      ApplicationRoundingPrecision@1009 : Decimal;
    BEGIN
      // Verify Application Rounding and Balance amounts
      // Setup.
      ApplicationRoundingPrecision := 1;
      LineAmount := 99;
      // prime numbers are required to obtain non-whole number after currency conversion
      CurrencyFactor := 7 / 3;
      SetApplnRoundingPrecision(ApplicationRoundingPrecision);
      LibraryERM.CreateCurrency(Currency);
      Currency.VALIDATE("Invoice Rounding Precision",0.01);
      Currency.MODIFY(TRUE);
      LibraryERM.CreateExchangeRate(Currency.Code,WORKDATE,CurrencyFactor,CurrencyFactor);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Currency Code",Currency.Code);
      Vendor.MODIFY(TRUE);

      // Excercise
      CreateAndPostPurchaseDocument(
        PurchaseLine,WORKDATE,Vendor."No.",LibraryInventory.CreateItem(Item),PurchaseHeader."Document Type"::Invoice,
        1,LineAmount);
      LineAmount := PurchaseLine."Amount Including VAT";

      CreateGeneralJournalLine(
        GenJournalLine,1,Vendor."No.",DocumentType,
        1 * ROUND(LineAmount / CurrencyFactor,ApplicationRoundingPrecision,'<'));
      GenJournalLine.VALIDATE("Currency Code",'');
      GenJournalLine.MODIFY(TRUE);

      // Verify is done in page handler
      LibraryVariableStorage.Enqueue(ROUND(LineAmount / CurrencyFactor,Currency."Invoice Rounding Precision"));
      LibraryVariableStorage.Enqueue(-GenJournalLine.Amount);
      CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Apply",GenJournalLine);
    END;

    LOCAL PROCEDURE ApplyAndPostMultipleVendorEntries@56(DocumentType@1002 : Option;DocumentNo@1003 : Code[20];AmountToApply@1004 : Decimal);
    VAR
      GLRegister@1005 : Record 45;
      ApplyingVendorLedgerEntry@1001 : Record 25;
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      SetApplyVendorEntry(ApplyingVendorLedgerEntry,DocumentType,DocumentNo,AmountToApply);
      GLRegister.FINDLAST;
      VendorLedgerEntry.SETRANGE("Entry No.",GLRegister."From Entry No.",GLRegister."To Entry No.");
      VendorLedgerEntry.SETRANGE("Applying Entry",FALSE);
      VendorLedgerEntry.FINDSET;
      REPEAT
        VendorLedgerEntry.CALCFIELDS("Remaining Amount");
        VendorLedgerEntry.VALIDATE("Amount to Apply",VendorLedgerEntry."Remaining Amount");
        VendorLedgerEntry.MODIFY(TRUE);
      UNTIL VendorLedgerEntry.NEXT = 0;
      SetAppliesToIDAndPostEntry(VendorLedgerEntry,ApplyingVendorLedgerEntry);
    END;

    LOCAL PROCEDURE ApplyUnapplyVendorEntries@15(VAR GenJournalLine@1010 : Record 81;DocumentType@1000 : Option;DocumentType2@1004 : Option;NoOfLines@1003 : Integer;Amount@1005 : Decimal;Amount2@1002 : Decimal) DocumentNo : Code[20];
    VAR
      Vendor@1001 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);

      // Create Journal Lines according to the options selected and post them.
      CreateGeneralJournalLine(GenJournalLine,1,Vendor."No.",DocumentType,Amount);
      DocumentNo := GenJournalLine."Document No.";
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      CreateGeneralJournalLine(GenJournalLine,NoOfLines,GenJournalLine."Account No.",DocumentType2,Amount2);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Apply and Unapply Vendor Entries as per the option selected.
      ApplyVendorLedgerEntry(DocumentType2,DocumentType,GenJournalLine."Document No.",DocumentNo);
      UnapplyVendorLedgerEntry(DocumentType2,GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE ApplyVendorLedgerEntry@3(DocumentType@1001 : Option;DocumentType2@1005 : Option;DocumentNo@1003 : Code[20];DocumentNo2@1000 : Code[20]);
    VAR
      VendorLedgerEntry@1004 : Record 25;
      VendorLedgerEntry2@1002 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo);
      VendorLedgerEntry.CALCFIELDS("Remaining Amount");
      LibraryERM.SetApplyVendorEntry(VendorLedgerEntry,VendorLedgerEntry."Remaining Amount");
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry2,DocumentType2,DocumentNo2);
      VendorLedgerEntry2.FINDSET;
      REPEAT
        VendorLedgerEntry2.CALCFIELDS("Remaining Amount");
        VendorLedgerEntry2.VALIDATE("Amount to Apply",VendorLedgerEntry2."Remaining Amount");
        VendorLedgerEntry2.MODIFY(TRUE);
      UNTIL VendorLedgerEntry2.NEXT = 0;
      SetAppliesToIDAndPostEntry(VendorLedgerEntry2,VendorLedgerEntry);
    END;

    LOCAL PROCEDURE CreateGenLineAndApply@32(VAR GenJournalLine@1000 : Record 81;DocumentType@1001 : Option;DocumentType2@1007 : Option;AppRounding@1003 : Decimal;Amount@1010 : Decimal);
    VAR
      Vendor@1004 : Record 23;
      PurchasesPayablesSetup@1002 : Record 312;
      DocumentNo@1006 : Code[20];
    BEGIN
      // Setup: Create Invoice and Payment General Line with Different Currency without Rounding Precision.
      UpdatePurchaseAndPayableSetup(PurchasesPayablesSetup."Appln. between Currencies"::All);
      LibraryPurchase.CreateVendor(Vendor);
      CreateAndPostGenJournalLine(GenJournalLine,Vendor."No.",DocumentType,Amount,CreateCurrency(0),WORKDATE);
      DocumentNo := GenJournalLine."Document No.";
      CreateAndPostGenJournalLine(
        GenJournalLine,Vendor."No.",DocumentType2,-GenJournalLine.Amount - AppRounding,CreateCurrency(AppRounding),WORKDATE);

      // Exericse.
      ApplyVendorLedgerEntry(DocumentType2,DocumentType,GenJournalLine."Document No.",DocumentNo);
    END;

    LOCAL PROCEDURE CreateCurrency@8(ApplnRoundingPrecision@1000 : Decimal) : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      PrepareCurrency(Currency,ApplnRoundingPrecision);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateCurrencyAndExchangeRate@184(Rate@1002 : Decimal;RelationalRate@1003 : Decimal;FromDate@1004 : Date) : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      PrepareCurrency(Currency,0);
      CreateExchangeRate(Currency.Code,Rate,RelationalRate,FromDate);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE PrepareCurrency@185(VAR Currency@1000 : Record 4;ApplnRoundingPrecision@1001 : Decimal);
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.SetCurrencyGainLossAccounts(Currency);
      WITH Currency DO BEGIN
        VALIDATE("Residual Gains Account","Realized Gains Acc.");
        VALIDATE("Residual Losses Account","Realized Losses Acc.");
        VALIDATE("Appln. Rounding Precision",ApplnRoundingPrecision);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@13(VAR GenJournalLine@1007 : Record 81;NoOfLine@1005 : Integer;VendorNo@1001 : Code[20];DocumentType@1003 : Option;Amount@1004 : Decimal);
    VAR
      GenJournalBatch@1002 : Record 232;
      Counter@1006 : Integer;
    BEGIN
      SelectGenJournalBatch(GenJournalBatch);
      FOR Counter := 1 TO NoOfLine DO
        LibraryERM.CreateGeneralJnlLine(
          GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
          GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
    END;

    LOCAL PROCEDURE CreateGenJnlLineWithDoctTypeCreditMemo@109(VAR GenJournalLine@1000 : Record 81);
    VAR
      Counter@1001 : Integer;
    BEGIN
      FOR Counter := 1 TO 2 DO
        LibraryERM.CreateGeneralJnlLine(
          GenJournalLine,GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name",
          GenJournalLine."Document Type"::"Credit Memo",GenJournalLine."Account Type"::Vendor,GenJournalLine."Account No.",
          LibraryRandom.RandIntInRange(50,80));
      ModifyGenJournalLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateItem@90(VATProductPostingGroup@1000 : Code[10]) : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("VAT Prod. Posting Group",VATProductPostingGroup);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemWithPostingSetup@136(GenProdPostingGroup@1002 : Code[10];VATProductPostingGroup@1000 : Code[10]) : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroup);
      Item.VALIDATE("VAT Prod. Posting Group",VATProductPostingGroup);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateAndPostGenJournalLine@28(VAR GenJournalLine@1000 : Record 81;VendorNo@1009 : Code[20];DocumentType@1010 : Option;Amount@1011 : Decimal;CurrencyCode@1012 : Code[10];PostingDate@1001 : Date);
    BEGIN
      // Apply and Unapply General Journal Lines for Payment and Invoice. Take a Random Amount greater than 100 (Standard Value).
      CreateGeneralJournalLine(GenJournalLine,1,VendorNo,DocumentType,Amount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocument@54(VAR PurchaseLine@1001 : Record 39;PostingDate@1007 : Date;VendorNo@1003 : Code[20];ItemNo@1004 : Code[20];DocumentType@1002 : Option;Quantity@1005 : Decimal;DirectUnitCost@1006 : Decimal) PostedDocumentNo : Code[20];
    VAR
      PurchaseHeader@1000 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      WITH PurchaseHeader DO BEGIN
        VALIDATE("Vendor Invoice No.","No.");
        VALIDATE("Vendor Cr. Memo No.","No.");
        VALIDATE("Posting Date",PostingDate);
        MODIFY(TRUE);
      END;
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      UpdateDirectUnitCostOnPurchaseLine(PurchaseLine,DirectUnitCost);
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE SetUnapplPurchEntryApplnSourceCode@50(UnappliedPurchEntryAppln@1000 : Code[10]);
    VAR
      SourceCodeSetup@1002 : Record 242;
    BEGIN
      SourceCodeSetup.GET;
      SourceCodeSetup.VALIDATE("Unapplied Purch. Entry Appln.",UnappliedPurchEntryAppln);
      SourceCodeSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateNewExchangeRate@53(PostingDate@1000 : Date);
    VAR
      GeneralLedgerSetup@1001 : Record 98;
      CurrencyExchangeRate@1002 : Record 330;
    BEGIN
      // Use Random Number Generator for Exchange Rate.
      GeneralLedgerSetup.GET;
      CurrencyExchangeRate.SETRANGE("Currency Code",GeneralLedgerSetup."Additional Reporting Currency");
      CurrencyExchangeRate.FINDFIRST;
      LibraryERM.CreateExchRate(CurrencyExchangeRate,GeneralLedgerSetup."Additional Reporting Currency",PostingDate);
      CurrencyExchangeRate.VALIDATE("Exchange Rate Amount",LibraryRandom.RandInt(100));
      CurrencyExchangeRate.VALIDATE("Adjustment Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Relational Exch. Rate Amount",CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.VALIDATE("Relational Adjmt Exch Rate Amt",CurrencyExchangeRate."Exchange Rate Amount");
      CurrencyExchangeRate.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateExchangeRate@186(CurrencyCode@1003 : Code[10];Rate@1004 : Decimal;RelationalRate@1005 : Decimal;FromDate@1000 : Date);
    VAR
      CurrencyExchangeRate@1002 : Record 330;
    BEGIN
      WITH CurrencyExchangeRate DO BEGIN
        LibraryERM.CreateExchRate(CurrencyExchangeRate,CurrencyCode,FromDate);
        VALIDATE("Exchange Rate Amount",Rate);
        VALIDATE("Adjustment Exch. Rate Amount",Rate);
        VALIDATE("Relational Exch. Rate Amount",RelationalRate);
        VALIDATE("Relational Adjmt Exch Rate Amt",RelationalRate);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreatePostApplyGenJournalLine@29(VAR GenJournalLine@1000 : Record 81;DocumentType@1001 : Option;DocumentType2@1002 : Option;Amount@1003 : Decimal;PostingDate@1004 : Date);
    VAR
      Vendor@1005 : Record 23;
      DocumentNo@1006 : Code[20];
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      CreateAndPostGenJournalLine(GenJournalLine,Vendor."No.",DocumentType,Amount,'',PostingDate);
      DocumentNo := GenJournalLine."Document No.";
      CreateAndPostGenJournalLine(GenJournalLine,Vendor."No.",DocumentType2,-Amount,'',PostingDate);
      ApplyVendorLedgerEntry(DocumentType2,DocumentType,GenJournalLine."Document No.",DocumentNo);
    END;

    LOCAL PROCEDURE CreateAndPostGenJnlLineWithCurrency@210(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1004 : Record 232;DocumentType@1003 : Option;AccountNo@1006 : Code[20];CurrencyCode@1005 : Code[10];Amount@1002 : Decimal);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Vendor,AccountNo,Amount);
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreateAndModifyPurchaseLine@74(PurchaseHeader@1002 : Record 38) : Decimal;
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Create Purchase line using Random Quantity and Amount.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",CreateZeroVATPostingGLAccount,
        LibraryRandom.RandDec(10,2));
      UpdateDirectUnitCostOnPurchaseLine(PurchaseLine,LibraryRandom.RandDec(100,2));
      UpdateGeneralPostingSetup(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      EXIT(PurchaseLine."Line Amount");
    END;

    LOCAL PROCEDURE CreateVendor@66() : Code[20];
    VAR
      Vendor@1001 : Record 23;
      LibraryPurchase@1000 : Codeunit 130512;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Payment Terms Code",GetPaymentTerms);
      Vendor.VALIDATE("Application Method",Vendor."Application Method"::Manual);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateVendorWithPostingSetup@134(GenBusPostingGroupCode@1002 : Code[10];VATBusPostingGroupCode@1003 : Code[10]) : Code[20];
    VAR
      Vendor@1001 : Record 23;
      LibraryPurchase@1000 : Codeunit 130512;
    BEGIN
      WITH Vendor DO BEGIN
        LibraryPurchase.CreateVendor(Vendor);
        VALIDATE("Gen. Bus. Posting Group",GenBusPostingGroupCode);
        VALIDATE("VAT Bus. Posting Group",VATBusPostingGroupCode);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreatePaymentTermsWithDiscount@99(VAR PaymentTerms@1003 : Record 3);
    VAR
      LibraryERM@1001 : Codeunit 131300;
    BEGIN
      // Input any random Due Date and Discount Date Calculation.
      LibraryERM.CreatePaymentTerms(PaymentTerms);
      EVALUATE(PaymentTerms."Due Date Calculation",STRSUBSTNO('<%1M>',LibraryRandom.RandInt(10)));
      EVALUATE(PaymentTerms."Discount Date Calculation",STRSUBSTNO('<%1D>',FORMAT(LibraryRandom.RandInt(10))));
      PaymentTerms.VALIDATE("Due Date Calculation");
      PaymentTerms.VALIDATE("Discount Date Calculation");
      PaymentTerms.VALIDATE("Discount %",LibraryRandom.RandInt(10));
      PaymentTerms.VALIDATE("Calc. Pmt. Disc. on Cr. Memos",TRUE);
      PaymentTerms.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendorWithPaymentTerms@97(VATBusinessPostingGroup@1003 : Code[10]) : Code[20];
    VAR
      PaymentTerms@1002 : Record 3;
      Vendor@1000 : Record 23;
      LibraryPurchase@1001 : Codeunit 130512;
    BEGIN
      CreatePaymentTermsWithDiscount(PaymentTerms);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("VAT Bus. Posting Group",VATBusinessPostingGroup);
      Vendor.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateBankAccountWithCurrency@188(CurrencyCode@1000 : Code[10]) : Code[20];
    VAR
      BankAccount@1001 : Record 270;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      WITH BankAccount DO BEGIN
        VALIDATE("Currency Code",CurrencyCode);
        MODIFY;
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateVATPostingSetup@189(VAR VATPostingSetup@1000 : Record 325;VATPercent@1001 : Decimal);
    VAR
      VATBusinessPostingGroup@1002 : Record 323;
      VATProductPostingGroup@1003 : Record 324;
    BEGIN
      WITH LibraryERM DO BEGIN
        CreateVATBusinessPostingGroup(VATBusinessPostingGroup);
        CreateVATProductPostingGroup(VATProductPostingGroup);
        CreateVATPostingSetup(VATPostingSetup,VATBusinessPostingGroup.Code,VATProductPostingGroup.Code);
      END;
      WITH VATPostingSetup DO BEGIN
        VALIDATE("VAT %",VATPercent);
        VALIDATE("Sales VAT Account",LibraryERM.CreateGLAccountNo);
        VALIDATE("Purchase VAT Account",LibraryERM.CreateGLAccountNo);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrder@96(VAR PurchaseHeader@1000 : Record 38;VATPostingSetup@1001 : Record 325) : Code[20];
    VAR
      PurchaseLine@1002 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateVendorWithPaymentTerms(VATPostingSetup."VAT Bus. Posting Group"));
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem(VATPostingSetup."VAT Prod. Posting Group"),
        LibraryRandom.RandInt(5));
      UpdateGeneralPostingSetup(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      UpdateDirectUnitCostOnPurchaseLine(PurchaseLine,LibraryRandom.RandDecInRange(10,1000,2));
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreatePostPurchInvWithReverseChargeVATAdjForPmtDisc@133(VAR PurchLine@1000 : Record 39) : Code[20];
    VAR
      GeneralPostingSetup@1002 : Record 252;
      VATPostingSetup@1003 : Record 325;
      PurchHeader@1001 : Record 38;
      ItemNo@1004 : Code[20];
      VendNo@1005 : Code[20];
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryERM.FindVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Reverse Charge VAT");
      VATPostingSetup.VALIDATE("Adjust for Payment Discount",TRUE);
      VATPostingSetup.MODIFY(TRUE);
      VendNo :=
        CreateVendorWithPostingSetup(GeneralPostingSetup."Gen. Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
      ItemNo :=
        CreateItemWithPostingSetup(GeneralPostingSetup."Gen. Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      LibraryPurchase.CreatePurchHeader(PurchHeader,PurchHeader."Document Type"::Invoice,VendNo);
      LibraryPurchase.CreatePurchaseLine(PurchLine,PurchHeader,PurchLine.Type::Item,ItemNo,LibraryRandom.RandInt(100));
      UpdateDirectUnitCostOnPurchaseLine(PurchLine,LibraryRandom.RandDec(100,2));
      EXIT(LibraryPurchase.PostPurchaseDocument(PurchHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE DateCompressForVendor@35(GenJournalLine@1005 : Record 81;StartingDate@1003 : Date;PeriodLength@1002 : Option);
    VAR
      VendorLedgerEntry@1000 : Record 25;
      DateCompressVendorLedger@1001 : Report 398;
    BEGIN
      // Run the Date Compress Vendor Ledger Report with a closed Accounting Period.
      VendorLedgerEntry.SETRANGE("Vendor No.",GenJournalLine."Account No.");
      DateCompressVendorLedger.SETTABLEVIEW(VendorLedgerEntry);
      DateCompressVendorLedger.InitializeRequest(StartingDate,GenJournalLine."Posting Date",PeriodLength,'',FALSE,FALSE,FALSE,'');
      DateCompressVendorLedger.USEREQUESTPAGE(FALSE);
      DateCompressVendorLedger.RUN;
    END;

    LOCAL PROCEDURE CreateZeroVATPostingGLAccount@76() : Code[20];
    VAR
      GLAccount@1000 : Record 15;
      VATPostingSetup@1003 : Record 325;
    BEGIN
      LibraryERM.FindZeroVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");
      EXIT(LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup,GLAccount."Gen. Posting Type"::Purchase));
    END;

    LOCAL PROCEDURE FindDetailedLedgerEntry@6(VAR DetailedVendorLedgEntry@1000 : Record 380;EntryType@1001 : Option;DocumentNo@1002 : Code[20];VendorNo@1003 : Code[20]);
    BEGIN
      DetailedVendorLedgEntry.SETRANGE("Entry Type",EntryType);
      DetailedVendorLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedVendorLedgEntry.SETRANGE("Vendor No.",VendorNo);
      DetailedVendorLedgEntry.FINDSET;
    END;

    LOCAL PROCEDURE FindGLEntries@67(VAR GLEntry@1000 : Record 17;DocumentNo@1001 : Code[20]);
    BEGIN
      GLEntry.SETRANGE("Document No.",DocumentNo);
      GLEntry.FINDSET;
    END;

    LOCAL PROCEDURE FindPaymentMethodWithBalanceAccount@98() : Code[10];
    VAR
      PaymentMethod@1001 : Record 289;
    BEGIN
      PaymentMethod.SETFILTER("Bal. Account No.",'<>''''');
      PaymentMethod.FINDFIRST;
      EXIT(PaymentMethod.Code);
    END;

    LOCAL PROCEDURE FindClosedInvLedgerEntry@121(VAR VendorLedgerEntry@1000 : Record 25;VendorNo@1001 : Code[20]);
    BEGIN
      WITH VendorLedgerEntry DO BEGIN
        SETRANGE("Vendor No.",VendorNo);
        SETRANGE("Document Type","Document Type"::Invoice);
        SETRANGE(Open,FALSE);
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE GetPaymentTerms@64() : Code[10];
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      PaymentTerms.VALIDATE("Calc. Pmt. Disc. on Cr. Memos",TRUE);
      PaymentTerms.MODIFY(TRUE);
      EXIT(PaymentTerms.Code);
    END;

    LOCAL PROCEDURE GetTotalAppliedAmount@145(VendorNo@1000 : Code[20];PostingDate@1001 : Date) : Decimal;
    VAR
      VendorLedgerEntry@1002 : Record 25;
      Vendor@1005 : Record 23;
      DiscountAmount@1003 : Decimal;
    BEGIN
      WITH VendorLedgerEntry DO BEGIN
        SETRANGE("Vendor No.",VendorNo);
        SETRANGE("Posting Date",PostingDate);
        FINDSET;
        REPEAT
          DiscountAmount += "Original Pmt. Disc. Possible";
        UNTIL NEXT = 0;
        Vendor.GET(VendorNo);
        Vendor.CALCFIELDS("Balance (LCY)");
        EXIT(Vendor."Balance (LCY)" + DiscountAmount);
      END;
    END;

    LOCAL PROCEDURE ModifyGenJournalLine@104(VAR GenJournalLine@1000 : Record 81);
    BEGIN
      WITH GenJournalLine DO BEGIN
        VALIDATE("Document No.",INCSTR("Document No."));
        VALIDATE("External Document No.","Document No.");
        VALIDATE("Posting Date",CALCDATE('<1Y>',WORKDATE));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE OpenGeneralJournalPage@55(DocumentNo@1001 : Code[20];DocumentType@1002 : Option) Amount : Decimal;
    VAR
      DummyGeneralJournal@1000 : TestPage 39;
    BEGIN
      OpenGenJournalPage(DummyGeneralJournal,DocumentNo,DocumentType);
      LibraryVariableStorage.Enqueue(TRUE); // Invoke set applies to ID action.
      DummyGeneralJournal."Apply Entries".INVOKE;
      Amount := LibraryRandom.RandDec(10,2);  // Used Random value to make difference in General Journal line Amount.
      DummyGeneralJournal.Amount.SETVALUE(DummyGeneralJournal.Amount.ASDECIMAL - Amount);
      DummyGeneralJournal.OK.INVOKE;
    END;

    LOCAL PROCEDURE OpenGenJournalPage@119(DummyGeneralJournal@1002 : TestPage 39;DocumentNo@1001 : Code[20];DocumentType@1000 : Option);
    BEGIN
      DummyGeneralJournal.OPENEDIT;
      DummyGeneralJournal.FILTER.SETFILTER("Document No.",DocumentNo);
      DummyGeneralJournal.FILTER.SETFILTER("Document Type",FORMAT(DocumentType));
    END;

    LOCAL PROCEDURE RunVendorLedgerEntries@94(VendorNo@1000 : Code[20];DocumentNo@1001 : Code[20]);
    VAR
      VendorLedgerEntry@1003 : Record 25;
    BEGIN
      VendorLedgerEntry.SETRANGE("Vendor No.",VendorNo);
      VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
      PAGE.RUN(PAGE::"Vendor Ledger Entries",VendorLedgerEntry);
    END;

    LOCAL PROCEDURE SetAdjustForPaymentDiscInVATPostingSetup@92(VAR VATPostingSetup@1002 : Record 325;AdjustForPaymentDiscount@1000 : Boolean) : Boolean;
    VAR
      OldAdjustForPaymentDiscount@1001 : Boolean;
    BEGIN
      OldAdjustForPaymentDiscount := VATPostingSetup."Adjust for Payment Discount";
      VATPostingSetup.VALIDATE("Adjust for Payment Discount",AdjustForPaymentDiscount);
      VATPostingSetup.MODIFY(TRUE);
      EXIT(OldAdjustForPaymentDiscount);
    END;

    LOCAL PROCEDURE SelectGenJournalBatch@73(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE SetApplyVendorEntry@60(VAR VendorLedgerEntry@1000 : Record 25;DocumentType@1001 : Option;DocumentNo@1002 : Code[20];AmountToApply@1003 : Decimal);
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo);
      LibraryERM.SetApplyVendorEntry(VendorLedgerEntry,AmountToApply);
    END;

    LOCAL PROCEDURE SetAppliesToIDAndPostEntry@58(VAR VendorLedgerEntry@1000 : Record 25;VendorLedgerEntry2@1001 : Record 25);
    BEGIN
      LibraryERM.SetAppliestoIdVendor(VendorLedgerEntry);
      LibraryERM.PostVendLedgerApplication(VendorLedgerEntry2);
    END;

    LOCAL PROCEDURE SetAppliesToIDAndAmountToApply@100(VendorNo@1000 : Code[20];DocumentNo@1002 : Code[20]);
    VAR
      VendorLedgerEntry@1001 : Record 25;
    BEGIN
      WITH VendorLedgerEntry DO BEGIN
        SETRANGE("Vendor No.",VendorNo);
        SETRANGE("Applying Entry",FALSE);
        FINDSET;
        REPEAT
          VALIDATE("Applies-to ID",DocumentNo);
          CALCFIELDS("Remaining Amount");
          VALIDATE("Amount to Apply","Remaining Amount");
          MODIFY(TRUE);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SuggestVendorPayment@40(VAR GenJournalLine@1000 : Record 81;BankAccountNo@1001 : Code[20]);
    VAR
      Vendor@1002 : Record 23;
      SuggestVendorPayments@1004 : Report 393;
      BalanceAccountType@1003 : 'G/L Account,Customer,Vendor,Bank Account';
    BEGIN
      SuggestVendorPayments.SetGenJnlLine(GenJournalLine);
      Vendor.SETRANGE("No.",GenJournalLine."Account No.");
      SuggestVendorPayments.SETTABLEVIEW(Vendor);
      SuggestVendorPayments.InitializeRequest(
        WORKDATE,FALSE,0,FALSE,WORKDATE,GenJournalLine."Account No.",TRUE,BalanceAccountType::"Bank Account",BankAccountNo,
        GenJournalLine."Bank Payment Type"::"Manual Check");
      SuggestVendorPayments.USEREQUESTPAGE(FALSE);
      SuggestVendorPayments.RUNMODAL;
    END;

    LOCAL PROCEDURE UpdateDirectUnitCostOnPurchaseLine@69(VAR PurchaseLine@1000 : Record 39;DirectUnitCost@1001 : Decimal);
    BEGIN
      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseAndPayableSetup@9(ApplnbetweenCurrencies@1001 : Option);
    VAR
      PurchasesPayablesSetup@1000 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Appln. between Currencies",ApplnbetweenCurrencies);
      PurchasesPayablesSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UnapplyVendorLedgerEntry@5(DocumentType@1001 : Option;DocumentNo@1004 : Code[20]);
    VAR
      VendorLedgerEntry@1002 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo);
      VendorLedgerEntry.SETRANGE(Open,FALSE);
      VendorLedgerEntry.FINDLAST;
      LibraryERM.UnapplyVendorLedgerEntry(VendorLedgerEntry);
    END;

    LOCAL PROCEDURE UpdateGenJournalLine@79(VAR GenJournalLine@1000 : Record 81;CurrencyCode@1001 : Code[10];AppliestoDocNo@1002 : Code[20];Amount@1003 : Decimal);
    BEGIN
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",AppliestoDocNo);
      GenJournalLine.VALIDATE(Amount,Amount + LibraryRandom.RandDec(5,2));  // Modify Amount using Random value.
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetPaymentTolerancePct@63(PaymentTolerance@1001 : Decimal);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.VALIDATE("Payment Tolerance %",PaymentTolerance);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateGeneralPostingSetup@61(GenBusPostingGroup@1002 : Code[10];GenProdPostingGroup@1003 : Code[10]);
    VAR
      GeneralPostingSetup@1000 : Record 252;
    BEGIN
      GeneralPostingSetup.GET(GenBusPostingGroup,GenProdPostingGroup);
      LibraryERM.SetGeneralPostingSetupPurchPmtDiscAccounts(GeneralPostingSetup);
      LibraryERM.SetGeneralPostingSetupSalesPmtDiscAccounts(GeneralPostingSetup);
      GeneralPostingSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE SetApplnRoundingPrecision@125(ApplnRoundingPrecision@1000 : Decimal);
    VAR
      GeneralLedgerSetup@1001 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.VALIDATE("Appln. Rounding Precision",ApplnRoundingPrecision);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CalcBalanceByDimension@144(VAR GLEntry@1001 : Record 17;DimSetID@1000 : Integer) Result : Integer;
    BEGIN
      Result := 0;
      WITH GLEntry DO BEGIN
        SETRANGE("Dimension Set ID",DimSetID);
        IF FINDSET THEN
          REPEAT
            Result += Amount;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyAdditionalCurrencyAmount@7(DocumentNo@1001 : Code[20]);
    VAR
      GeneralLedgerSetup@1006 : Record 98;
      GLEntry@1000 : Record 17;
      Currency@1003 : Record 4;
      AdditionalCurrencyAmount@1005 : Decimal;
    BEGIN
      GeneralLedgerSetup.GET;
      Currency.GET(GeneralLedgerSetup."Additional Reporting Currency");
      FindGLEntries(GLEntry,DocumentNo);
      REPEAT
        AdditionalCurrencyAmount := LibraryERM.ConvertCurrency(GLEntry.Amount,'',Currency.Code,WORKDATE);
        Assert.AreNearlyEqual(
          AdditionalCurrencyAmount,GLEntry."Additional-Currency Amount",Currency."Amount Rounding Precision",
          STRSUBSTNO(AdditionalCurrencyErr,AdditionalCurrencyAmount));
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyEntriesAfterPostingPurchaseDocument@83(DocumentType@1001 : Option;DocumentNo@1002 : Code[20];DocumentNo2@1003 : Code[20];VendorNo@1004 : Code[20]);
    VAR
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,DocumentNo);
      VendorLedgerEntry.TESTFIELD(Open,FALSE);
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo2);
      VendorLedgerEntry.TESTFIELD(Open,FALSE);
      VerifyGLEntries(DocumentNo2);
      VerifyDetailedLedgerEntry(DocumentNo2,VendorNo);
    END;

    LOCAL PROCEDURE VerifyErrorAfterModifyPaymentMethod@151(DocumentNo@1000 : Code[20]);
    VAR
      VendLedgerEntry@1001 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendLedgerEntry,VendLedgerEntry."Document Type"::Invoice,DocumentNo);
      ASSERTERROR VendLedgerEntry.VALIDATE("Payment Method Code",'');
      Assert.ExpectedError(
        STRSUBSTNO(PaymentMethodCodeErr,VendLedgerEntry."Entry No."));
    END;

    LOCAL PROCEDURE VerifyRemainingAmount@22(DocumentType@1003 : Option;DocumentNo@1002 : Code[20]);
    VAR
      VendorLedgerEntry@1001 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo);
      REPEAT
        VendorLedgerEntry.CALCFIELDS("Remaining Amount",Amount);
        VendorLedgerEntry.TESTFIELD("Remaining Amount",VendorLedgerEntry.Amount);
      UNTIL VendorLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyDetailedLedgerEntry@17(DocumentNo@1003 : Code[20];VendorNo@1000 : Code[20]);
    VAR
      DetailedVendorLedgEntry@1001 : Record 380;
      TotalAmount@1002 : Decimal;
    BEGIN
      FindDetailedLedgerEntry(DetailedVendorLedgEntry,DetailedVendorLedgEntry."Entry Type"::Application,DocumentNo,VendorNo);
      REPEAT
        TotalAmount += DetailedVendorLedgEntry.Amount;
      UNTIL DetailedVendorLedgEntry.NEXT = 0;
      Assert.AreEqual(
        0,TotalAmount,
        STRSUBSTNO(
          TotalAmountErr,0,DetailedVendorLedgEntry.TABLECAPTION,DetailedVendorLedgEntry.FIELDCAPTION("Entry Type"),
          DetailedVendorLedgEntry."Entry Type"));
    END;

    LOCAL PROCEDURE VerifyApplnRoundingVendLedger@19(EntryType@1000 : Option;DocumentNo@1001 : Code[20];Amount@1003 : Decimal;VendorNo@1004 : Code[20]);
    VAR
      DetailedVendorLedgEntry@1002 : Record 380;
    BEGIN
      FindDetailedLedgerEntry(DetailedVendorLedgEntry,EntryType,DocumentNo,VendorNo);
      Assert.AreEqual(
        Amount,DetailedVendorLedgEntry.Amount,
        STRSUBSTNO(AmountErr,DetailedVendorLedgEntry.FIELDCAPTION(Amount),Amount,DetailedVendorLedgEntry.TABLECAPTION));
    END;

    LOCAL PROCEDURE VerifyUnappliedEntries@18(DocumentNo@1002 : Code[20];VendorNo@1001 : Code[20]);
    VAR
      DetailedVendorLedgEntry@1000 : Record 380;
    BEGIN
      FindDetailedLedgerEntry(DetailedVendorLedgEntry,DetailedVendorLedgEntry."Entry Type"::Application,DocumentNo,VendorNo);
      REPEAT
        Assert.IsTrue(
          DetailedVendorLedgEntry.Unapplied,
          STRSUBSTNO(
            UnappliedErr,DetailedVendorLedgEntry.FIELDCAPTION(Unapplied),DetailedVendorLedgEntry.Unapplied,
            DetailedVendorLedgEntry.TABLECAPTION));
      UNTIL DetailedVendorLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifySourceCodeDtldCustLedger@84(DocumentType@1001 : Option;DocumentNo@1002 : Code[20];SourceCode@1003 : Code[10]);
    VAR
      DetailedVendorLedgEntry@1000 : Record 380;
    BEGIN
      DetailedVendorLedgEntry.SETRANGE("Document No.",DocumentNo);
      DetailedVendorLedgEntry.SETRANGE("Document Type",DocumentType);
      DetailedVendorLedgEntry.SETRANGE("Source Code",SourceCode);
      Assert.IsTrue(DetailedVendorLedgEntry.FINDFIRST,DetailedVendorLedgerErr);
    END;

    LOCAL PROCEDURE VerifyGenJournalEntry@51(GenJournalLine@1000 : Record 81;Amount@1001 : Decimal);
    VAR
      GenJournalLine2@1002 : Record 81;
    BEGIN
      GenJournalLine2.SETRANGE("Document Type",GenJournalLine."Document Type"::Payment);
      GenJournalLine2.SETRANGE("Account No.",GenJournalLine."Account No.");
      Assert.IsTrue(GenJournalLine2.FINDFIRST,GeneralJournalErr);
      Assert.IsTrue(Amount > 0,NegativeAmountErr);
    END;

    LOCAL PROCEDURE VerifyGLEntries@59(DocumentNo@1002 : Code[20]);
    VAR
      GLEntry@1000 : Record 17;
      TotalAmount@1001 : Decimal;
    BEGIN
      FindGLEntries(GLEntry,DocumentNo);
      REPEAT
        TotalAmount += GLEntry.Amount;
      UNTIL GLEntry.NEXT = 0;
      Assert.AreEqual(
        0,TotalAmount,STRSUBSTNO(TotalAmountErr,0,GLEntry.TABLECAPTION,GLEntry.FIELDCAPTION("Document No."),GLEntry."Document No."));
    END;

    LOCAL PROCEDURE VerifyUnapplyGLEntry@75(DocumentNo@1000 : Code[20]);
    VAR
      GLEntry@1001 : Record 17;
      SourceCodeSetup@1002 : Record 242;
    BEGIN
      SourceCodeSetup.GET;
      GLEntry.SETRANGE("Source Code",SourceCodeSetup."Unapplied Purch. Entry Appln.");
      FindGLEntries(GLEntry,DocumentNo);
      REPEAT
        GLEntry.TESTFIELD("Document Type",GLEntry."Document Type"::Payment);
      UNTIL GLEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyVATAmountOnGLEntry@62(GenJournalLine@1001 : Record 81);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      FindGLEntries(GLEntry,GenJournalLine."Document No.");
      Assert.AreNearlyEqual(
        GenJournalLine."VAT Amount",GLEntry."VAT Amount",LibraryERM.GetInvoiceRoundingPrecisionLCY,
        STRSUBSTNO(AmountErr,GLEntry."VAT Amount"));
    END;

    LOCAL PROCEDURE VerifyAmountToApplyOnVendorLedgerEntries@103(DocumentNo@1001 : Code[20];DocumentType@1002 : Option);
    VAR
      VendorLedgerEntry@1003 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,DocumentType,DocumentNo);
      VendorLedgerEntry.TESTFIELD("Amount to Apply",0);
    END;

    LOCAL PROCEDURE ApplyUnapplyVendEntriesWithMiscDimSetIDs@106(NoOfLines@1000 : Integer);
    VAR
      Vendor@1008 : Record 23;
      LibraryPmtDiscSetup@1007 : Codeunit 131303;
      DimSetIDs@1006 : ARRAY [10] OF Integer;
      DiscountPercent@1005 : Integer;
      Amounts@1004 : ARRAY [10] OF Decimal;
      DiscountedAmounts@1003 : ARRAY [10] OF Decimal;
      DocNo@1002 : Code[20];
      i@1001 : Integer;
    BEGIN
      // Setup
      LibraryPmtDiscSetup.SetAdjustForPaymentDisc(TRUE);
      DiscountPercent := LibraryRandom.RandIntInRange(1,10);
      CreateVendorWithGivenPaymentTerm(Vendor,CreatePaymentTermsWithGivenDiscount(DiscountPercent));

      FOR i := 1 TO NoOfLines DO BEGIN
        Amounts[i] := 100 * LibraryRandom.RandIntInRange(1,100);
        DiscountedAmounts[i] := Amounts[i] * (100 - DiscountPercent) / 100;
      END;

      // Exercise
      DocNo := ApplyUnapplyWithDimSetIDs(NoOfLines,Vendor."No.",DimSetIDs,Amounts,DiscountedAmounts);

      // Exercise and Verify
      FOR i := 1 TO NoOfLines DO
        Amounts[i] -= DiscountedAmounts[i];

      VerifyGLEntriesWithDimSetIDs(DocNo,Amounts,DimSetIDs,NoOfLines);
    END;

    LOCAL PROCEDURE CreatePaymentTermsWithGivenDiscount@114(DiscountPercent@1000 : Integer) : Code[10];
    VAR
      PaymentTerms@1001 : Record 3;
    BEGIN
      LibraryERM.CreatePaymentTermsDiscount(PaymentTerms,TRUE);
      PaymentTerms.VALIDATE("Discount %",DiscountPercent);
      PaymentTerms.MODIFY(TRUE);
      EXIT(PaymentTerms.Code);
    END;

    LOCAL PROCEDURE CreateVendorWithGivenPaymentTerm@117(VAR Vendor@1000 : Record 23;PaymentTermsCode@1001 : Code[10]);
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Payment Terms Code",PaymentTermsCode);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE VerifyGLEntriesWithDimSetIDs@124(DocumentNo@1002 : Code[20];Amounts@1003 : ARRAY [10] OF Decimal;DimSetIDs@1004 : ARRAY [10] OF Integer;DimSetArrLen@1001 : Integer);
    VAR
      GLEntry@1000 : Record 17;
      Index@1006 : Integer;
      Sum@1005 : Decimal;
    BEGIN
      WITH GLEntry DO BEGIN
        SETCURRENTKEY("Transaction No.");
        SETRANGE("Document No.",DocumentNo);
        FINDLAST;
        SETRANGE("Transaction No.","Transaction No.");
        Assert.RecordCount(GLEntry,DimSetArrLen + 1);
        FINDSET;
        FOR Index := 1 TO DimSetArrLen DO BEGIN
          Assert.AreEqual(DimSetIDs[1],"Dimension Set ID",FIELDCAPTION("Dimension Set ID"));
          Assert.AreEqual(Amounts[Index],Amount,FIELDCAPTION(Amount));
          Sum += Amounts[Index];
          NEXT;
        END;
        Assert.AreEqual(DimSetIDs[1],"Dimension Set ID",FIELDCAPTION("Dimension Set ID"));
        Assert.AreEqual(-Sum,Amount,FIELDCAPTION(Amount));
      END;
    END;

    LOCAL PROCEDURE VerifyNoVATEntriesOnUnapplication@161(DocType@1000 : Option;DocNo@1001 : Code[20]);
    VAR
      VATEntry@1002 : Record 254;
    BEGIN
      WITH VATEntry DO BEGIN
        SETRANGE("Document Type",DocType);
        SETRANGE("Document No.",DocNo);
        SETRANGE("Transaction No.",GetTransactionNoFromUnappliedDtldEntry(DocType,DocNo));
        Assert.IsTrue(ISEMPTY,UnnecessaryVATEntriesFoundErr);
      END;
    END;

    LOCAL PROCEDURE VerifyACYInGLEntriesOnUnapplication@200(ExpectedACY@1003 : Decimal;DocType@1000 : Option;DocNo@1001 : Code[20]);
    VAR
      GLEntry@1002 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document Type",DocType);
        SETRANGE("Document No.",DocNo);
        SETRANGE("Transaction No.",GetTransactionNoFromUnappliedDtldEntry(DocType,DocNo));
        FINDSET;
        REPEAT
          Assert.AreEqual(ExpectedACY,"Additional-Currency Amount",NonzeroACYErr);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE VerifyVLEPaymentDisc@142(VAR VendorLedgerEntry@1000 : Record 25;DocType@1001 : Option;VendLedgerEntryIsOpen@1002 : Boolean;RemPaymentDiscPossible@1003 : Decimal;RemainingAmount@1004 : Decimal);
    BEGIN
      WITH VendorLedgerEntry DO BEGIN
        SETRANGE("Document Type",DocType);
        FINDFIRST;
        Assert.AreEqual(VendLedgerEntryIsOpen,Open,FIELDCAPTION(Open));
        Assert.AreEqual(
          RemPaymentDiscPossible,"Remaining Pmt. Disc. Possible",
          FIELDCAPTION("Remaining Pmt. Disc. Possible"));
        CALCFIELDS("Remaining Amount");
        Assert.AreEqual(RemainingAmount,"Remaining Amount",FIELDCAPTION("Remaining Amount"));
      END;
    END;

    LOCAL PROCEDURE ApplyUnapplyWithDimSetIDs@122(NoOfLines@1000 : Integer;VendorNo@1001 : Code[20];VAR DimSetIDs@1002 : ARRAY [10] OF Integer;Amounts@1003 : ARRAY [10] OF Decimal;DiscountedAmounts@1004 : ARRAY [10] OF Decimal) : Code[20];
    VAR
      GenJournalBatch@1005 : Record 232;
      GenJournalLine@1006 : Record 81;
      BankAccount@1009 : Record 270;
      TotalDiscountedAmount@1007 : Decimal;
      i@1008 : Integer;
    BEGIN
      SelectGenJournalBatch(GenJournalBatch);
      CreatePostGenJnlLinesWithDimSetIDs(
        GenJournalLine,GenJournalBatch,DimSetIDs,NoOfLines,
        VendorNo,GenJournalLine."Document Type"::Invoice,Amounts,-1);

      CreateGenJnlLinesWithGivenDimSetIDs(
        GenJournalLine,GenJournalBatch,DimSetIDs,NoOfLines,
        VendorNo,GenJournalLine."Document Type"::Payment,DiscountedAmounts);

      ApplyVendLedgerEntriesToID(VendorNo,GenJournalLine."Document No.",DiscountedAmounts);

      FOR i := 1 TO NoOfLines DO
        TotalDiscountedAmount += DiscountedAmounts[i];

      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,
        VendorNo,-TotalDiscountedAmount);
      BankAccount.SETRANGE(Blocked,FALSE);
      BankAccount.FINDFIRST;
      WITH GenJournalLine DO BEGIN
        VALIDATE("Account Type","Account Type"::"Bank Account");
        VALIDATE("Account No.",BankAccount."No.");
        VALIDATE("Bal. Account No.",'');
        MODIFY(TRUE);
      END;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      UnapplyVendLedgerEntry(GenJournalLine."Document Type"::Payment,GenJournalLine."Document No.");
      EXIT(GenJournalLine."Document No.");
    END;

    LOCAL PROCEDURE GetTransactionNoFromUnappliedDtldEntry@162(DocType@1000 : Option;DocNo@1001 : Code[20]) : Integer;
    VAR
      DtldVendLedgEntry@1002 : Record 380;
    BEGIN
      WITH DtldVendLedgEntry DO BEGIN
        SETRANGE("Document Type",DocType);
        SETRANGE("Document No.",DocNo);
        SETRANGE(Unapplied,TRUE);
        FINDLAST;
        EXIT("Transaction No.");
      END;
    END;

    LOCAL PROCEDURE UnapplyVendLedgerEntry@129(DocumentType@1001 : Option;DocumentNo@1002 : Code[20]);
    VAR
      VendLedgerEntry@1000 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendLedgerEntry,DocumentType,DocumentNo);
      LibraryERM.UnapplyVendorLedgerEntry(VendLedgerEntry);
    END;

    LOCAL PROCEDURE CreatePostGenJnlLinesWithDimSetIDs@115(VAR GenJournalLine@1006 : Record 81;GenJournalBatch@1005 : Record 232;VAR DimSetIDs@1004 : ARRAY [10] OF Integer;NumOfDocuments@1003 : Integer;VendorNo@1002 : Code[20];DocumentType@1001 : Option;Amounts@1000 : ARRAY [10] OF Decimal;SignFactor@1007 : Integer);
    VAR
      i@1008 : Integer;
    BEGIN
      FOR i := 1 TO NumOfDocuments DO BEGIN
        CreateGenJnlLineWithDimSetID(GenJournalLine,GenJournalBatch,DimSetIDs[i],VendorNo,DocumentType,Amounts[i] * SignFactor);
        LibraryERM.PostGeneralJnlLine(GenJournalLine);
      END;
    END;

    LOCAL PROCEDURE CreateGenJnlLinesWithDimSetIDs@116(VAR GenJournalLine@1005 : Record 81;GenJournalBatch@1004 : Record 232;VAR DimSetIDs@1003 : ARRAY [10] OF Integer;NumOfDocuments@1006 : Integer;VendorNo@1002 : Code[20];DocumentType@1001 : Option;Amounts@1000 : ARRAY [10] OF Decimal;SignFactor@1008 : Integer);
    VAR
      i@1007 : Integer;
    BEGIN
      FOR i := 1 TO NumOfDocuments DO
        CreateGenJnlLineWithDimSetID(GenJournalLine,GenJournalBatch,DimSetIDs[i],VendorNo,DocumentType,Amounts[i] * SignFactor);
    END;

    LOCAL PROCEDURE CreateGenJnlLineWithDimSetID@105(VAR GenJournalLine@1007 : Record 81;GenJournalBatch@1001 : Record 232;VAR DimSetID@1006 : Integer;VendorNo@1002 : Code[20];DocumentType@1000 : Option;Amount@1003 : Decimal);
    VAR
      DimVal@1010 : Record 349;
      LibraryDimension@1009 : Codeunit 131001;
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      LibraryDimension.CreateDimensionValue(DimVal,LibraryERM.GetGlobalDimensionCode(1));
      WITH GenJournalLine DO BEGIN
        VALIDATE("Applies-to ID","Document No.");
        VALIDATE("Shortcut Dimension 1 Code",DimVal.Code);
        MODIFY(TRUE);
        DimSetID := "Dimension Set ID";
      END;
    END;

    LOCAL PROCEDURE CreateGenJnlLinesWithGivenDimSetIDs@141(VAR GenJournalLine@1007 : Record 81;GenJournalBatch@1001 : Record 232;DimSetIDs@1006 : ARRAY [10] OF Integer;NoOfLines@1005 : Integer;VendorNo@1002 : Code[20];DocumentType@1000 : Option;Amounts@1003 : ARRAY [10] OF Decimal);
    VAR
      DimMgt@1012 : Codeunit 408;
      Counter@1008 : Integer;
    BEGIN
      FOR Counter := 1 TO NoOfLines DO BEGIN
        LibraryERM.CreateGeneralJnlLine(
          GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
          GenJournalLine."Account Type"::Vendor,VendorNo,Amounts[Counter]);
        WITH GenJournalLine DO BEGIN
          VALIDATE("Bal. Account No.",'');
          VALIDATE("Applies-to ID","Document No.");
          VALIDATE("Dimension Set ID",DimSetIDs[Counter]);
          DimMgt.UpdateGlobalDimFromDimSetID(
            "Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
          MODIFY(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE CreateGenJnlLineWithPostingGroups@110(VAR GenJnlLine@1004 : Record 81;VendorNo@1002 : Code[20];DocumentType@1001 : Option;Amount@1000 : Decimal;PurchLine@1003 : Record 39);
    BEGIN
      CreateGeneralJournalLine(GenJnlLine,1,VendorNo,DocumentType,Amount);
      WITH GenJnlLine DO BEGIN
        VALIDATE("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::Purchase);
        VALIDATE("Bal. Gen. Bus. Posting Group",PurchLine."Gen. Bus. Posting Group");
        VALIDATE("Bal. Gen. Prod. Posting Group",PurchLine."Gen. Prod. Posting Group");
        VALIDATE("Bal. VAT Bus. Posting Group",PurchLine."VAT Bus. Posting Group");
        VALIDATE("Bal. VAT Prod. Posting Group",PurchLine."VAT Prod. Posting Group");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE ApplyVendLedgerEntriesToID@135(VendorNo@1003 : Code[20];AppliesToID@1000 : Code[50];AmountsToApply@1001 : ARRAY [10] OF Decimal);
    VAR
      VendLedgerEntry@1002 : Record 25;
      i@1004 : Integer;
    BEGIN
      WITH VendLedgerEntry DO BEGIN
        SETRANGE("Vendor No.",VendorNo);
        IF FINDSET THEN
          REPEAT
            i += 1;
            VALIDATE("Applying Entry",TRUE);
            VALIDATE("Applies-to ID",AppliesToID);
            VALIDATE("Amount to Apply",-AmountsToApply[i]);
            MODIFY(TRUE);
          UNTIL NEXT = 0;
      END;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@89(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    [ConfirmHandler]
    PROCEDURE DateCompressConfirmHandler@37(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ModalPageHandler]
    PROCEDURE ApplyVendorEntriesPageHandler@71(VAR ApplyVendorEntries@1000 : TestPage 233);
    VAR
      SetAppliesToIDValue@1002 : Variant;
      SetAppliesToID@1001 : Boolean;
    BEGIN
      LibraryVariableStorage.Dequeue(SetAppliesToIDValue);
      SetAppliesToID := SetAppliesToIDValue;  // Assign Variant to Boolean.
      IF SetAppliesToID THEN
        ApplyVendorEntries.ActionSetAppliesToID.INVOKE;
      ApplyVendorEntries.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE UnapplyVendorEntriesPageHandler@88(VAR UnapplyVendorEntries@1000 : TestPage 624);
    BEGIN
      UnapplyVendorEntries.Unapply.INVOKE;
    END;

    [PageHandler]
    PROCEDURE VendorLedgerEntriesPageHandler@91(VAR VendorLedgerEntries@1000 : TestPage 29);
    BEGIN
      VendorLedgerEntries.ActionApplyEntries.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ApplyingVendorEntriesPageHandler@108(VAR ApplyVendorEntries@1000 : TestPage 233);
    BEGIN
      ApplyVendorEntries.ControlBalance.ASSERTEQUALS(0);
    END;

    [ModalPageHandler]
    PROCEDURE ApplyAndVerifyVendorEntriesPageHandler@131(VAR ApplyVendorEntries@1000 : TestPage 233);
    VAR
      QueueValue@1003 : Variant;
      PaymentAmount@1008 : Decimal;
      InvoiceAmount@1007 : Decimal;
      ExchangeRate@1006 : Decimal;
    BEGIN
      WITH LibraryVariableStorage DO BEGIN
        Dequeue(QueueValue);
        PaymentAmount := QueueValue;
        Dequeue(QueueValue);
        InvoiceAmount := QueueValue;
        Dequeue(QueueValue);
        ExchangeRate := QueueValue;
      END;

      WITH ApplyVendorEntries DO BEGIN
        // verify invoice entry
        ActionSetAppliesToID.INVOKE; // apply entry
        AppliedAmount.ASSERTEQUALS(ROUND(-InvoiceAmount * ExchangeRate,LibraryERM.GetAmountRoundingPrecision));
        ActionSetAppliesToID.INVOKE; // unapply

        // verify cr. memo entry
        NEXT;
        ActionSetAppliesToID.INVOKE; // apply next entry
        AppliedAmount.ASSERTEQUALS(ROUND(PaymentAmount * ExchangeRate,LibraryERM.GetAmountRoundingPrecision));

        OK.INVOKE;
      END;
    END;

    [ModalPageHandler]
    PROCEDURE ApplyVendorEntriesPageHandlerControlValuesVerification@118(VAR ApplyVendorEntries@1000 : TestPage 233);
    VAR
      Value@1001 : Variant;
      PurchaseLineAmountLCY@1002 : Decimal;
      JournalLineAmount@1003 : Decimal;
      PageControlValue@1004 : Decimal;
    BEGIN
      LibraryVariableStorage.Dequeue(Value);
      PurchaseLineAmountLCY := Value;
      LibraryVariableStorage.Dequeue(Value);
      JournalLineAmount := Value;
      ApplyVendorEntries.ActionSetAppliesToID.INVOKE;

      EVALUATE(PageControlValue,ApplyVendorEntries.ApplnRounding.VALUE);
      Assert.AreEqual(
        PurchaseLineAmountLCY + JournalLineAmount,PageControlValue,ApplyVendorEntries.ApplnRounding.CAPTION);

      EVALUATE(PageControlValue,ApplyVendorEntries.ControlBalance.VALUE);
      Assert.AreEqual(
        0,PageControlValue,ApplyVendorEntries.ControlBalance.CAPTION);

      ApplyVendorEntries.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Apply] [Unapply] [Purchase]
      Unsupported version tags:
      NA: Unable to Execute
      ES: Unable to Execute

      Test for ERM - Check Additional Currency Amount, Remaining Amount with Apply and Unapply Vendor Ledger Entry.
        1. Verify Remaining Amount, Entries Unapplied and Additional Currency Amount after Applying and Unapplying Payment on Invoice for Vendor.
        2. Verify Amount on Detailed Vendor Ledger Entry and Additional Currency Amount in G/L Entry after Applying, Unapplying then again Applying Payment on Invoice for a Vendor.
        3. Verify Remaining Amount, Entries Unapplied and Additional Currency Amount after Applying and Unapplying Refund on Credit Memo for Vendor.
        4. Verify Amount on Detailed Vendor Ledger Entry and Additional Currency Amount in G/L Entry after Applying, Unapplying then again Applying Refund on Credit Memo for a Vendor.
        5. Check Application Rounding Amount on Vendor Ledger Entry After Posting Invoice and Payment with Different Currency before Unapply.
        6. Check Application Rounding Amount and Unapplied Entries on Detailed Vendor Ledger Entry After Posting Invoice and Payment with Different Currency After Unapply.
        7. Check Application Rounding Amount on Vendor Ledger Entry After Posting Credit Memo and Refund with Different Currency before Unapply.
        8. Check Application Rounding Amount on Vendor Ledger Entry After Posting Credit Memo and Refund with Different Currency before Unapply.
        9. Test that correct Source Code updated on Detailed Vendor Ledger Entry after Unapply Payment from Vendor Ledger Entry.
        10.Test that correct Source Code updated on Detailed Vendor Ledger Entry after Unapply Refund from Vendor Ledger Entry.
        11.Test that the Suggest Vendor Payment Batch Job works the same way with unapplied entries.
        12.Check that Payment cannot be Unapplied after Exchange Rate has been changed.
        13.Check that Refund cannot be Unapplied after Exchange Rate has been changed.
        14.Check Document No can be change when Unapply Payment from Vendor Ledger Entry.
        15.Check Document No can be change when Unapply Refund from Vendor Ledger Entry.
        16.Check error when Unapplying Vendor Ledger entry which have been Date Compressed.
        17.Unapply Invoice from Vendor Ledger Entry and verify error message.
        18.Unapply Payment from Vendor Ledger Entry and verify error message.
        19.Unapply Credit Memo from Vendor Ledger Entry and verify error message.
        20.Unapply Refund from Vendor Ledger Entry and verify error message.
        21.Unapply Invoice from Detailed Vendor Ledger Entry and verify error message.
        22.Unapply Payment from Detailed Vendor Ledger Entry and verify error message.
        23.Unapply Credit Memo from Detailed Vendor Ledger Entry and verify error message.
        24.Unapply Refund from Detailed Vendor Ledger Entry and verify error message.
        25.Check Remaining Amount on Vendor Ledger Entry after Creating and Posting Purchase Invoice without Currency and Apply with Partial Payment.
        26.Check Remaining Amount on Vendor Ledger Entry after Creating and Posting Purchase Invoice with Currency and Apply with Partial Payment.
        27.Check General Ledger, Vendor Ledger and Detailed Vendor ledger entries after Posting Purchase Order with Currency and Payment method with a balance account.
        28.Check General Ledger, Vendor Ledger and Detailed Vendor ledger entries after posting Purchase documents with Currency and Apply to Oldest Application Method.
        29.Verify Program populates correct Document Type value on G/L entry window after doing un application on Vendor when adjust for payment discount is involved
        30.Verify VAT Amount on G/L Entry after Un applying Payment from Vendor Ledger Entry.
        31.Verify Amount To Apply on Vendor Ledger Entries after Invoking Apply Vendor Entries for Invoice.
        32.Verify Amount To Apply on Vendor Ledger Entries after Invoking Apply Vendor Entries for Payment.
        33.Verify that Apply Vendor Entry Page Shows Correct value when payment is applied under due date.
        34.Verify that Dimension Set ID and Global Dimension values are correct after unapply of Vendor Ledger Entries with different Dimension Set IDs.
        35.Apply / Unapply Payment in additional currency to Invoice in foreigh currency with certain exchange rates

        Covers Test Cases for WI - 21566
        ------------------------------------------------------------
        Test Function Name               TFS ID
        ------------------------------------------------------------
        ApplyUnapplyVendorPayment         31065 to 31073
        ApplyUnapplyApplyVendorPayment    31065 to 31073
        ApplyUnapplyVendorRefund          31074 to 31083
        ApplyUnapplyApplyVendorRefund     31074 to 31083

        Covers Test Cases for WI - 236504
        ------------------------------------------------------------
        Test Function Name               TFS ID
        ------------------------------------------------------------
        RoundingAmtOnInvoice              124211 to 124214, 124216 to 124221
        RoundingAmtOnUnappliedInvoice     124211 to 124214, 124216 to 124221
        RoundingAmtOnCrMemo               124211, 124222 to 124230
        RoundingAmtOnUnappliedCrMemo      124211, 124222 to 124230

        Covers Test Cases for WI - 237579
        ------------------------------------------------------------
        Test Function Name               TFS ID
        ------------------------------------------------------------
        UnapplyPaymentCheckSourceCode      123768, 123772
        UnapplyRefundCheckSourceCode       123768, 123773

        Covers Test Cases for WI - 237580
        ------------------------------------------------------------
        Test Function Name               TFS ID
        ------------------------------------------------------------
        SuggestVendorPmtAfterUnapply     123774, 123775, 123776

        Covers Test Cases for WI - 236505
        ------------------------------------------------------------
        Test Function Name               TFS ID
        ------------------------------------------------------------
        ChangeExchRateUnapplyPayment      123747, 123748
        ChangeExchRateUnapplyRefund       123747, 123748

        Covers Test Cases for WI - 237430
        ------------------------------------------------------------
        Test Function Name               TFS ID
        ------------------------------------------------------------
        ChangeDocumentNoUnapplyPayment   123760, 123763
        ChangeDocumentNoUnapplyRefund    123760, 123764

        Covers Test Cases for WI - 237852
        ------------------------------------------------------------
        Test Function Name               TFS ID
        ------------------------------------------------------------
        UnapplyDateCompressVendLedger    123795, 123796

        Covers Test Cases for WI - 237853
        ------------------------------------------------------------
        Test Function Name               TFS ID
        ------------------------------------------------------------
        UnapplyInvFromVendorLedger         125831, 125832
        UnapplyPaymentVendorLedger         125831, 125834
        UnapplyCrMemoVendorLedger          125831, 125836
        UnapplyRefundVendorLedger          125831, 125838
        UnapplyInvDtldVendorLedger         125831, 125833
        UnapplyPaymentDtldVendorLedger     125831, 125835
        UnapplyCrMemoDtVendorLedger        125831, 125837
        UnapplyRefundDtldVendorLedger      125831, 124176

        Covers Test Cases for WI - 264911
        -------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                               TFS ID
        -------------------------------------------------------------------------------------------------------------------------
        RemainingAmtOnVendorLedgerEntryWithoutCurrency, RemainingAmtOnVendorLedgerEntryWithCurrency       259888

        Covers Test Cases for WI - 268235
        -------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                                      TFS ID
        -------------------------------------------------------------------------------------------------------------------------
        PurchaseOrderUsingPaymentMethodWithBalanceAccount, PurchaseDocumentUsingApplicationMethodApplyToOldest   265763,265764

        Covers Test Cases for WI - 268235
        -------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                               TFS ID
        -------------------------------------------------------------------------------------------------------------------------
        ApplyUnapplyDifferentDocumentTypesToPayment                                                       282612

        Covers Test Cases for WI - 287487
        -------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                               TFS ID
        -------------------------------------------------------------------------------------------------------------------------
        ApplyAndUnapplyPaymentJournal                                                                    287257

        Covers Test Cases for Bug ID - 326479
        -------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                               TFS ID
        -------------------------------------------------------------------------------------------------------------------------
        AmountToApplyAfterApplyToEntryForInvoice,AmountToApplyAfterApplyToEntryForPayment                326480

        BUG ID 50474
        -------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                               TFS ID
        -------------------------------------------------------------------------------------------------------------------------
        CheckAmountOnApplyVendorEntriesPage

        BUG ID 46294
        -------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                               TFS ID
        -------------------------------------------------------------------------------------------------------------------------
        ApplyUnapplyPurchInvoicesWithDimVals                                                             46294

      Covers Test Cases for RFH - 358519
      -------------------------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                 TFS ID
      -------------------------------------------------------------------------------------------------------------------------
      SetAppliesToCrMemoDocNoForRefund                                                                   358519

      NoVATEntriesWhenUnapplyZeroDiscEntryWithAdjForPmtDisc                                              358839
      AppliedAmountDifferentCurrencies                                                                   358752

        BUG ID 360396
        -------------------------------------------------------------------------------------------------------------------------
        Test Function Name                                                                               TFS ID
        -------------------------------------------------------------------------------------------------------------------------
        ConsistentUnapplyInvoiceToPayment                                                                360396
      AppliedAmountDifferentCurrencies

      NoVATEntriesWhenUnapplyZeroDiscEntryWithAdjForPmtDisc                                                               103781
    }
    END.
  }
}

