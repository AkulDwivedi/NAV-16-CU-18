OBJECT Codeunit 144001 ERM Excise
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryInventory@1500000 : Codeunit 132201;
      LibraryERM@1500001 : Codeunit 131300;
      LibraryERMCountryData@1500013 : Codeunit 131305;
      LibraryPurchase@1500002 : Codeunit 130512;
      LibrarySales@1500113 : Codeunit 130509;
      LibraryLocation@1500014 : Codeunit 132209;
      LibraryRandom@1500003 : Codeunit 130440;
      Assert@1500005 : Codeunit 130000;
      LibraryVariableStorage@1500006 : Codeunit 131004;
      ServiceTaxAsExciseHelper@1500011 : Codeunit 143003;
      LibraryTDS@1500015 : Codeunit 143000;
      LibraryUtility@1500009 : Codeunit 131000;
      ReverseServiceTaxHelper@1500016 : Codeunit 143006;
      isInitialized@1500004 : Boolean;
      ValueNotEqualErr@1500007 : TextConst 'ENU=%1 in entry %2  is not equal to %3 in entry %4';
      UndoReceiptQst@1500008 : TextConst 'ENU=Do you really want to undo the selected Receipt lines?';
      FieldErr@1500012 : TextConst 'ENU=%1 is wrong in %2';
      SalesLineFieldErrorTok@1500010 : TextConst 'ENU="%1 cannot be more than %2 in Sales Line Document Type=''%3'',Document No.=''%4'',Line No.=''%5''."';
      AmountNotEqualErr@1500017 : TextConst 'ENU=" Amounts are not Equal"';

    [Test]
    [HandlerFunctions(ConfirmHandler)]
    PROCEDURE PurchaseOrderWithUndoReceipt@1500000();
    VAR
      PurchaseHeader@1500004 : Record 38;
      DocumentNo@1500003 : Code[20];
    BEGIN
      // Setup: Create Purchase Order,Posting Purchase Order and Undo Receipt.
      Initialize;
      CreatePurchaseOrder(PurchaseHeader);

      // Exrecise:Post Purchase Order & Undo Receipt
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      UndoPurchaseReceiptLine(DocumentNo);

      // Verify: Verify RG 23 C PartII Entry;
      VerifyRG23CPartIIEntry(DocumentNo)
    END;

    [Test]
    PROCEDURE PurchaseInvoiceWithForeignVendor@1500102();
    VAR
      ExcisePostingSetup@1500001 : Record 13711;
      ItemNo@1500005 : Code[20];
      LocationCode@1500000 : Code[10];
    BEGIN
      PostPurchaseInvoiceExciseScenario(LocationCode,ItemNo,ExcisePostingSetup);
    END;

    [Test]
    PROCEDURE SalesOrderFromTradingLocation@1500113();
    VAR
      GLEntry@1500006 : Record 17;
      ExcisePostingSetup@1500002 : Record 13711;
      DocumentNo@1500003 : Code[20];
      LocationCode@1500001 : Code[10];
      CustomerNo@1500000 : Code[20];
      ItemNo@1500008 : Code[20];
      SalesLineAmount@1500005 : Decimal;
    BEGIN
      // Setup:
      PostPurchaseInvoiceExciseScenario(LocationCode,ItemNo,ExcisePostingSetup);

      // Exrecise: Create and post sales order
      DocumentNo := CreatePostSalesDocument(LocationCode,'CST',ItemNo,'C',SalesLineAmount,CustomerNo,'');

      // Verify: Verify Excise G/L Entry;
      VerifyDocumentGLEntry(GLEntry."Document Type"::Invoice,DocumentNo,CustomerNo,SalesLineAmount);
    END;

    [Test]
    PROCEDURE SalesOrderFromTradingLocationWithExciseAmount@1500117();
    VAR
      GLEntry@1500006 : Record 17;
      ExcisePostingSetup@1500002 : Record 13711;
      DocumentNo@1500003 : Code[20];
      LocationCode@1500001 : Code[10];
      CustomerNo@1500000 : Code[20];
      ItemNo@1500008 : Code[20];
      SalesLineAmount@1500005 : Decimal;
    BEGIN
      // Setup:
      PostPurchaseInvoiceExciseScenario(LocationCode,ItemNo,ExcisePostingSetup);

      // Exrecise: Create and post sales order
      DocumentNo :=
        CreatePostSalesDocument(
          LocationCode,'Excise/TAX',ItemNo,'C',SalesLineAmount,CustomerNo,
          ExcisePostingSetup."Excise Bus. Posting Group");

      // Verify: Verify Excise G/L Entry;
      VerifyDocumentGLEntry(GLEntry."Document Type"::Invoice,DocumentNo,CustomerNo,SalesLineAmount);
    END;

    [Test]
    PROCEDURE PartialReceiptTradingLocation@1500016();
    VAR
      ExcisePostingSetup@1500008 : Record 13711;
      PurchaseLine@1500007 : Record 39;
      Location@1500005 : Record 14;
      Item@1500004 : Record 27;
      State@1500003 : Record 13762;
      PurchInvLine@1500001 : Record 123;
      TaxPercent@1500000 : Decimal;
    BEGIN
      // [GIVEN] Trading location and Excise setup
      Initialize;
      PrepareReceiptShipmentScenario(Item,Location,ExcisePostingSetup,State,TaxPercent);

      // [WHEN] Partial receipt uses Excise structure.
      PostPartialReceipt(
        PurchaseLine,PurchInvLine,Location.Code,Item."No.",ExcisePostingSetup."Excise Bus. Posting Group",State.Code);

      // [THEN] RG 23 D Entry must have Excise amount based on Quantity Received.
      VerifyRG23DEntry(PurchaseLine,ExcisePostingSetup);
    END;

    [Test]
    PROCEDURE PartialReceiptFullShipmentFromTradingLocation@1500028();
    VAR
      ExcisePostingSetup@1500008 : Record 13711;
      PurchaseLine@1500007 : Record 39;
      PurchInvLine@1500010 : Record 123;
      SalesLine@1500006 : Record 37;
      SalesInvoiceLine@1500011 : Record 113;
      Location@1500005 : Record 14;
      Item@1500004 : Record 27;
      State@1500003 : Record 13762;
      ExciseRoundingPrecision@1500001 : Decimal;
      TaxPercent@1500000 : Decimal;
      Factor@1500009 : Integer;
    BEGIN
      Initialize;
      // [GIVEN] Identical shipment for partial receipt for Item with a Tax Group and trading location with a certain state .
      PrepareFullShipmentScenario(Item,Location,ExcisePostingSetup,State,TaxPercent,Factor,ExciseRoundingPrecision);
      // [GIVEN] Partial receipt uses Excise structure.
      PostPartialReceipt(
        PurchaseLine,PurchInvLine,Location.Code,Item."No.",ExcisePostingSetup."Excise Bus. Posting Group",State.Code);

      // [WHEN] Partial shipment Sales Order ships the same quantity as PO receipt
      PostPartialShipment(SalesLine,SalesInvoiceLine,PurchaseLine,ExcisePostingSetup."Excise Bus. Posting Group",State.Code,Factor);

      // [THEN] Full Excise amount must be posted for SO. Tax amount must base on SO order Excise amount and SO amount
      VerifyShipmentEntries(SalesInvoiceLine,PurchInvLine,ExcisePostingSetup,TaxPercent);

      // Tear down
      SetupExciseRoundingPrecision(ExciseRoundingPrecision);
    END;

    [Test]
    PROCEDURE PartialReceiptPartialShipmentFromTradingLocation@1500020();
    VAR
      ExcisePostingSetup@1500009 : Record 13711;
      PurchaseLine@1500008 : Record 39;
      PurchInvLine@1500010 : Record 123;
      SalesLine@1500007 : Record 37;
      SalesInvoiceLine@1500011 : Record 113;
      Location@1500006 : Record 14;
      Item@1500005 : Record 27;
      State@1500004 : Record 13762;
      ExciseRoundingPrecision@1500002 : Decimal;
      TaxPercent@1500001 : Decimal;
      Factor@1500000 : Integer;
    BEGIN
      Initialize;
      // [GIVEN] Partial shipment for partial receipt for Item with a Tax Group and trading location with a certain state .
      PreparePartialShipmentScenario(Item,Location,ExcisePostingSetup,State,TaxPercent,Factor,ExciseRoundingPrecision);
      // [GIVEN] Partial receipt uses Excise structure.
      PostPartialReceipt(
        PurchaseLine,PurchInvLine,Location.Code,Item."No.",ExcisePostingSetup."Excise Bus. Posting Group",State.Code);

      // [WHEN] Partial shipment Sales Order ships a part of quantity of PO receipt
      PostPartialShipment(SalesLine,SalesInvoiceLine,PurchaseLine,ExcisePostingSetup."Excise Bus. Posting Group",State.Code,Factor);

      // [THEN] A part of Excise amount must be posted for SO. Tax amount must base on SO order Excise amount and SO amount
      VerifyShipmentEntries(SalesInvoiceLine,PurchInvLine,ExcisePostingSetup,TaxPercent);

      // Tear down
      SetupExciseRoundingPrecision(ExciseRoundingPrecision);
    END;

    [Test]
    [HandlerFunctions(PurchaseOrderStatisticsMPH)]
    PROCEDURE PartialReceiptFullShipmentRemainingReceiptPurchaseStatistics@1500013();
    VAR
      ExcisePostingSetup@1500009 : Record 13711;
      PurchaseLine@1500008 : Record 39;
      PurchInvLine@1500010 : Record 123;
      SalesLine@1500007 : Record 37;
      SalesInvoiceLine@1500003 : Record 113;
      ExciseRoundingPrecision@1500002 : Decimal;
      TaxPercent@1500001 : Decimal;
    BEGIN
      // [GIVEN] Posted partial receipt and indentical shipment
      InitializeReceiptShipmentScenario(
        ExcisePostingSetup,TaxPercent,1,ExciseRoundingPrecision,
        PurchaseLine,PurchInvLine,SalesLine,SalesInvoiceLine);

      // [WHEN] PO updated to post remaining quantity.
      UpdatePurchaseOrder(PurchaseLine);

      // [THEN] Statistics must show excise based on remaining Quantity to Receive
      VerifyPurchaseOrderStatistics(PurchaseLine,ExcisePostingSetup);

      // Tear down
      SetupExciseRoundingPrecision(ExciseRoundingPrecision);
    END;

    [Test]
    PROCEDURE PartialReceiptFullShipmentRemainingReceiptSalesStatistics@1500015();
    VAR
      ExcisePostingSetup@1500009 : Record 13711;
      PurchaseLine@1500008 : Record 39;
      PurchInvLine@1500010 : Record 123;
      SalesLine@1500007 : Record 37;
      SalesInvoiceLine@1500003 : Record 113;
      ExciseRoundingPrecision@1500002 : Decimal;
      TaxPercent@1500001 : Decimal;
    BEGIN
      // [GIVEN] Posted partial receipt and indentical shipment
      InitializeReceiptShipmentScenario(
        ExcisePostingSetup,TaxPercent,1,ExciseRoundingPrecision,
        PurchaseLine,PurchInvLine,SalesLine,SalesInvoiceLine);
      // [GIVEN] PO updated to post remaining quantity.
      UpdatePurchaseOrder(PurchaseLine);

      // [WHEN] Updated PO posted
      PostPurchaseOrder(PurchaseLine,PurchInvLine);

      // [THEN] SO Statistics must show Excise amount based on Quantity Received - Quantity Shipped
      // VerifySalesOrderStatistics(SalesLine,PurchInvLine,ExcisePostingSetup,TaxPercent);
      VerifyShipmentEntries(SalesInvoiceLine,PurchInvLine,ExcisePostingSetup,TaxPercent);

      // Tear down
      SetupExciseRoundingPrecision(ExciseRoundingPrecision);
    END;

    [Test]
    PROCEDURE PartialReceiptFullShipmentRemainingReceiptShipment@1500006();
    VAR
      ExcisePostingSetup@1500009 : Record 13711;
      PurchaseLine@1500008 : Record 39;
      PurchInvLine@1500010 : Record 123;
      SalesLine@1500007 : Record 37;
      SalesInvoiceLine@1500011 : Record 113;
      ExciseRoundingPrecision@1500002 : Decimal;
      TaxPercent@1500001 : Decimal;
    BEGIN
      // [GIVEN] Posted partial receipt and indentical shipment
      InitializeReceiptShipmentScenario(
        ExcisePostingSetup,TaxPercent,1,ExciseRoundingPrecision,
        PurchaseLine,PurchInvLine,SalesLine,SalesInvoiceLine);
      // [GIVEN] PO updated to post remaining quantity.
      UpdatePurchaseOrder(PurchaseLine);
      // [GIVEN] Updated PO posted
      PostPurchaseOrder(PurchaseLine,PurchInvLine);

      // [THEN] Excise and Tax amounts must base on remained SO order quantity.
      VerifyShipmentEntries(SalesInvoiceLine,PurchInvLine,ExcisePostingSetup,TaxPercent);

      // Tear down
      SetupExciseRoundingPrecision(ExciseRoundingPrecision);
    END;

    [Test]
    PROCEDURE PartialReceiptPartialShipmentRemainingReceiptExceededShipment@1500045();
    VAR
      ExcisePostingSetup@1500009 : Record 13711;
      PurchaseLine@1500008 : Record 39;
      PurchInvLine@1500010 : Record 123;
      SalesLine@1500007 : Record 37;
      SalesInvoiceLine@1500011 : Record 113;
      ExciseRoundingPrecision@1500002 : Decimal;
      TaxPercent@1500001 : Decimal;
    BEGIN
      // [GIVEN] Posted partial receipt, and partial shipment
      InitializeReceiptShipmentScenario(
        ExcisePostingSetup,TaxPercent,LibraryRandom.RandIntInRange(2,5),ExciseRoundingPrecision,
        PurchaseLine,PurchInvLine,SalesLine,SalesInvoiceLine);
      // [GIVEN] PO updated to post remaining quantity.
      UpdatePurchaseOrder(PurchaseLine);
      // [GIVEN] Updated PO posted
      PostPurchaseOrder(PurchaseLine,PurchInvLine);

      // [WHEN] Try to post SO with Qty to Invoice greater than PO's Quantity Invoiced
      ASSERTERROR PostSalesOrder(SalesLine,SalesInvoiceLine);

      // [THEN] Error on field "Qty. to Invoice" will be thrown
      // Assert.ExpectedError(GetSalesLineFieldErrorText(SalesLine,PurchaseLine));

      // Tear down
      SetupExciseRoundingPrecision(ExciseRoundingPrecision);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE VerifyReversalOfPLAWithPurchaseOrderAndTaxJournal@1500008();
    VAR
      Location@1500000 : Record 14;
      Vendor@1500001 : Record 23;
      ReversalEntry@1500002 : Record 179;
      Type@1500004 : 'Charges,Sales Tax,Excise,Other Taxes,Service Tax';
      ItemCode@1500003 : Code[20];
      StructureCode@1500006 : Code[20];
    BEGIN
      // [SCENARIO BUG 167069]  Excise - PLA Amounts Should be reverse from Posted PLA Entires
      // [FEATURE] [PLA Transaction]

      // [GIVEN] Created Excise Setup with Vendor Item and Location & Structure
      Initialize;
      ItemCode := ServiceTaxAsExciseHelper.CreateExciseSetupWithItemVendorAndLocation(Vendor,Location);
      StructureCode := ServiceTaxAsExciseHelper.CreateStructure(Type::Excise);

      // [WHEN] Create and Post Purchase Order & Tax journal
      CreateAndPostPurchaseOrderWithStructure(Vendor."No.",ItemCode,StructureCode);
      CreateAndPostTaxJournal(Location."E.C.C. No.");

      // [WHEN] Reverse PLA Entry
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseTransaction(ReverseServiceTaxHelper.GetLastTransactionNo);

      // [THEN] PLA Entry has been reversed
      VerifyReversedPLAEntry;
    END;

    [Test]
    [HandlerFunctions(ConfirmHandlerYes,MessageHandler)]
    PROCEDURE VerifyCENVATCreditUpdateOfExciseRG23Part2forECCNo@1500021();
    VAR
      TaxJournalLine@1500002 : Record 16587;
      GLEntry@1500003 : Record 17;
    BEGIN
      // [SCENARIO 163586] Check if the program is updating opening balance of CENVAT credit and components of excise in RG 23 A part II for specific ECC No.
      // [FEATURE] [Excise/RG23APartII Transaction]

      // [GIVEN] Created Excise Setup
      Initialize;

      // [WHEN] Create and Post Tax Journal with Excise Details
      CreateAndPostTaxJournalWithExcise(TaxJournalLine);

      // [THEN] Excise Entries and RG23PartII entries have been created
      GLEntry.FINDLAST;
      // VerifyExciseEntry(GLEntry."Document No.",TaxJournalLine.Amount);
      // VerifyRG23APartIIEntry(GLEntry."Document No.");
    END;

    LOCAL PROCEDURE Initialize@1500001();
    BEGIN
      LibraryRandom.SetSeed(1);  // Use Random Number Generator to generate the seed for RANDOM function.
      LibraryVariableStorage.Clear;
      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE PostPurchaseInvoiceExciseScenario@1500132(VAR LocationCode@1500000 : Code[10];VAR ItemNo@1500001 : Code[20];VAR ExcisePostingSetup@1500003 : Record 13711);
    VAR
      PurchaseHeader@1500004 : Record 38;
      Excise@1500002 : Decimal;
      CurrencyFactor@1500005 : Decimal;
      BCDAmount@1500006 : Decimal;
      DocumentNo@1500007 : Code[20];
    BEGIN
      Initialize;
      Excise :=  LibraryRandom.RandDecInRange(10,20,2);
      CreateExcisePostingSetup(ExcisePostingSetup,Excise);
      CurrencyFactor := 1 / LibraryRandom.RandDec(100,2);
      BCDAmount := LibraryRandom.RandDecInRange(10,20,2);

      // Exrecise: Create and Post purchase invoice.
      CreatePurchaseDocumentWithExciseSetup(
        PurchaseHeader,
        ExcisePostingSetup,
        PurchaseHeader."Document Type"::Invoice,
        CurrencyFactor,
        BCDAmount,
        ItemNo);
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,FALSE,TRUE);

      LocationCode := PurchaseHeader."Location Code";

      // Verify: Verify RG 23 D Entry;
      VerifyRG23DEntryExciseBCD(DocumentNo,CurrencyFactor,Excise,BCDAmount);
    END;

    LOCAL PROCEDURE InitializeReceiptShipmentScenario@1500022(VAR ExcisePostingSetup@1500004 : Record 13711;VAR TaxPercent@1500002 : Decimal;Factor@1500001 : Integer;VAR ExciseRoundingPrecision@1500000 : Decimal;VAR PurchaseLine@1500003 : Record 39;VAR PurchInvLine@1500005 : Record 123;VAR SalesLine@1500006 : Record 37;VAR SalesInvoiceLine@1500008 : Record 113);
    VAR
      Item@1500010 : Record 27;
      Location@1500009 : Record 14;
      State@1500007 : Record 13762;
    BEGIN
      Initialize;
      // Setup new Excise Rounding Precision and store old one to further tear down
      ExciseRoundingPrecision := SetupExciseRoundingPrecision(0.1);

      // Setup Item, Location and Taxes
      PrepareReceiptShipmentScenario(Item,Location,ExcisePostingSetup,State,TaxPercent);

      // Partial receipt using Excise structure.
      // Quantity to Receive < Quantity
      PostPartialReceipt(
        PurchaseLine,PurchInvLine,Location.Code,Item."No.",ExcisePostingSetup."Excise Bus. Posting Group",State.Code);
      // Partial shipment Sales Order ships a part of quantity of PO receipt
      // Quantity to Ship = Quantity Received / {Given} Factor
      PostPartialShipment(
        SalesLine,SalesInvoiceLine,PurchaseLine,ExcisePostingSetup."Excise Bus. Posting Group",State.Code,Factor);
    END;

    LOCAL PROCEDURE PreparePartialShipmentScenario@1500026(VAR Item@1500004 : Record 27;VAR Location@1500002 : Record 14;VAR ExcisePostingSetup@1500005 : Record 13711;VAR State@1500000 : Record 13762;VAR TaxPercent@1500013 : Decimal;VAR Factor@1500001 : Integer;VAR ExciseRoundingPrecision@1500003 : Decimal);
    BEGIN
      Factor := LibraryRandom.RandIntInRange(2,5);
      ExciseRoundingPrecision := SetupExciseRoundingPrecision(0.1);
      PrepareReceiptShipmentScenario(Item,Location,ExcisePostingSetup,State,TaxPercent);
    END;

    LOCAL PROCEDURE PrepareFullShipmentScenario@1500042(VAR Item@1500004 : Record 27;VAR Location@1500002 : Record 14;VAR ExcisePostingSetup@1500005 : Record 13711;VAR State@1500000 : Record 13762;VAR TaxPercent@1500013 : Decimal;VAR Factor@1500003 : Integer;VAR ExciseRoundingPrecision@1500001 : Decimal);
    BEGIN
      Factor := 1;
      ExciseRoundingPrecision := SetupExciseRoundingPrecision(0.1);
      PrepareReceiptShipmentScenario(Item,Location,ExcisePostingSetup,State,TaxPercent);
    END;

    LOCAL PROCEDURE PrepareReceiptShipmentScenario@1500043(VAR Item@1500004 : Record 27;VAR Location@1500002 : Record 14;VAR ExcisePostingSetup@1500005 : Record 13711;VAR State@1500000 : Record 13762;VAR TaxPercent@1500013 : Decimal);
    BEGIN
      TaxPercent := LibraryRandom.RandIntInRange(10,20);

      CreateBEDExcisePostingSetup(ExcisePostingSetup,LibraryRandom.RandIntInRange(10,20));
      WITH ServiceTaxAsExciseHelper DO BEGIN
        CreateStateWithCForm(State);
        SetupItemLocationAndTaxes(
          Item,Location,ExcisePostingSetup,FindStateFormCode(State.Code),State.Code,TaxPercent);
      END;
    END;

    LOCAL PROCEDURE CreateBEDExcisePostingSetup@1500040(VAR ExcisePostingSetup@1500000 : Record 13711;ExciseAmount@1500001 : Decimal);
    BEGIN
      WITH ExcisePostingSetup DO BEGIN
        LibraryERM.CreateExcisePostingSetup(
          ExcisePostingSetup,"BED Calculation Type"::"Excise %",ExciseAmount,FALSE);
        // Will include BCD Amount only to BED Amount.
        // BED Amount is a part of Excise.
        "Cenvat Cr. Receivable(Trading)" := ServiceTaxAsExciseHelper.CreateGLAccount;
        "Cenvat Cr. Receivable Account" := ServiceTaxAsExciseHelper.CreateGLAccount;
        "Cenvat Transfered(Trading)" := ServiceTaxAsExciseHelper.CreateGLAccount;
        "eCess %" := LibraryRandom.RandInt(10);
        "eCess Calculation Formula" := 'BED AMOUNT';
        "SHE Cess %" := LibraryRandom.RandInt(10);
        "SHE Cess Calculation Formula" := 'BED AMOUNT';
        "Setoff available" := TRUE;
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateCustomer@1500029(VAR Customer@1500000 : Record 18;TaxLiable@1500004 : Boolean;ExciseBusPostingGroup@1500001 : Code[10];StateCode@1500002 : Code[10]) : Code[20];
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      WITH Customer DO BEGIN
        VALIDATE("Tax Liable",TaxLiable);
        VALIDATE("Excise Bus. Posting Group",ExciseBusPostingGroup);
        VALIDATE("State Code",StateCode);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateExcisePostingSetup@1500213(VAR ExcisePostingSetup@1500000 : Record 13711;ExciseAmount@1500001 : Decimal);
    BEGIN
      WITH ExcisePostingSetup DO BEGIN
        LibraryERM.CreateExcisePostingSetup(
          ExcisePostingSetup,"BED Calculation Type"::"Excise %",ExciseAmount,FALSE);
        // Will include BCD Amount only to BED Amount.
        // BED Amount is a part of Excise.
        "BED Calculation Formula" := 'BCD AMOUNT';
        "AED(TTA) Calculation Type" := "AED(TTA) Calculation Type"::"Excise %";
        "AED(GSI) Calculation Type" := "AED(GSI) Calculation Type"::"Excise %";
        "Cenvat Cr. Receivable(Trading)" := ServiceTaxAsExciseHelper.CreateGLAccount;
        "Cenvat Transfered(Trading)" := ServiceTaxAsExciseHelper.CreateGLAccount;
         "Setoff available" := TRUE;
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateGeneralPostingSetup@1500120(GenBusPostingGroup@1500000 : Code[10];VendorNo@1500004 : Code[20]);
    VAR
      GeneralPostingSetup@1500003 : Record 252;
      Vendor@1500002 : Record 23;
      VendorPostingGroup@1500005 : Record 93;
      GLAccount@1500006 : Record 15;
    BEGIN
      Vendor.GET(VendorNo);
      VendorPostingGroup.GET(Vendor."Vendor Posting Group");
      GLAccount.GET(VendorPostingGroup."Invoice Rounding Account");
      LibraryERM.CreateGeneralPostingSetup(
        GeneralPostingSetup,
        GenBusPostingGroup,
        GLAccount."Gen. Prod. Posting Group");
    END;

    LOCAL PROCEDURE CreateItem@1500003(VAR Item@1500000 : Record 27;GenProdPostingGroup@1500003 : Code[10];ExciseProdPostingGroup@1500001 : Code[10];CapitalItem@1500002 : Boolean) : Code[20];
    BEGIN
      LibraryInventory.CreateItem(Item);
      WITH Item DO BEGIN
        VALIDATE("Excise Prod. Posting Group",ExciseProdPostingGroup);
        VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroup);
        VALIDATE("Capital Item",CapitalItem);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateItemWithoutTaxGroup@1500215(ExciseProdPostingGroup@1500001 : Code[10];CapitalItem@1500002 : Boolean) : Code[20];
    VAR
      GeneralPostingSetup@1500004 : Record 252;
      Item@1500005 : Record 27;
    BEGIN
      GeneralPostingSetup.SETFILTER("Direct Cost Applied Account",'<>%1','');
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Excise Prod. Posting Group",ExciseProdPostingGroup);
      Item.VALIDATE("Capital Item",CapitalItem);
      Item.VALIDATE("Tax Group Code",'');
      Item.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreatePurchaseDocumentWithExciseSetup@1500115(VAR PurchaseHeader@1500000 : Record 38;ExcisePostingSetup@1500009 : Record 13711;DocumentType@1500002 : Option;CurrencyFactor@1500008 : Decimal;BCDAmount@1500006 : Decimal;VAR ItemNo@1500001 : Code[20]);
    VAR
      PurchaseLine@1500003 : Record 39;
      StructureHeader@1500010 : Record 13792;
      GeneralPostingSetup@1500011 : Record 252;
      ExciseNoSeries@1500005 : Record 16500;
      LocationCode@1500007 : Code[10];
    BEGIN
      CreateStructureCVDEnabled(StructureHeader);
      LocationCode :=
        LibraryLocation.CreateTradingLocation(
          ServiceTaxAsExciseHelper.CreateECCNoAndSeries(ExciseNoSeries.Type::RG23D,LibraryERM.CreateNoSeriesCode));
      ItemNo := CreateItemWithoutTaxGroup(ExcisePostingSetup."Excise Prod. Posting Group",FALSE);

      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,
        DocumentType,
        CreateVendorForeign(
          ExcisePostingSetup."Excise Bus. Posting Group",
          CurrencyFactor,
          LocationCode));
      PurchaseHeader.VALIDATE(Structure,StructureHeader.Code);
      PurchaseHeader.MODIFY(TRUE);

      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,
        PurchaseHeader,
        PurchaseLine.Type::Item,
        ItemNo,
        LibraryRandom.RandDecInRange(1000,2000,2));

      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDecInRange(10,20,2));
      PurchaseLine.VALIDATE("BCD Amount",BCDAmount);
      PurchaseLine.MODIFY(TRUE);

      CalculatePurchaseLines(PurchaseHeader);
      // Create Inventory Posting Setup for new item
      ServiceTaxAsExciseHelper.CreateInventoryPostingSetup(PurchaseLine."No.",LocationCode);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseOrderWithStructure@1500044(VendorNo@1500001 : Code[20];ItemCode@1500004 : Code[20];StructureCode@1500002 : Code[20]);
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      PurchaseHeader.VALIDATE(Structure,COPYSTR(StructureCode,1,10));
      PurchaseHeader.MODIFY(TRUE);
      CreatePurchaseLine(PurchaseHeader,ItemCode);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateTaxJournalTemplateAndBatch@1500018(VAR TaxJnlTemplateName@1500002 : Code[10]) : Code[10];
    VAR
      TaxJournalTemplate@1500001 : Record 16585;
      TaxJournalBatch@1500000 : Record 16586;
    BEGIN
      LibraryTDS.CreateTaxJournalTemplateTDSAdj(TaxJournalTemplate);
      TaxJournalTemplate.VALIDATE(Type,TaxJournalTemplate.Type::Excise);
      TaxJournalTemplate.MODIFY(TRUE);
      TaxJnlTemplateName := TaxJournalTemplate.Name;
      LibraryTDS.CreateTaxJournalBatchTDSAdj(TaxJournalBatch,TaxJournalTemplate.Name);
      EXIT(TaxJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndPostTaxJournal@1500408(EccNo@1500001 : Code[20]);
    VAR
      TaxJournal@1500000 : TestPage 16351;
      TemplateName@1500002 : Code[10];
      TaxJnlTemplateName@1500003 : Code[10];
    BEGIN
      TemplateName := CreateTaxJournalTemplateAndBatch(TaxJnlTemplateName);
      WITH TaxJournal DO BEGIN
        OPENEDIT;
        CurrentJnlBatchName.SETVALUE(TemplateName);
        "Posting Date".SETVALUE(WORKDATE);
        "Document Type".SETVALUE(1);
        "Account No.".SETVALUE(ServiceTaxAsExciseHelper.CreatePLAAccAndUpdateGLSetup);
        "Bal. Account No.".SETVALUE(LibraryERM.CreateGLAccountNo);
        "PLA BED Amount".SETVALUE(LibraryRandom.RandDec(2000,2));
        "PLA CESS Amount".SETVALUE(LibraryRandom.RandDec(50,1));
        "PLA SHE Cess Amount".SETVALUE(LibraryRandom.RandDec(30,1));
        "E.C.C. No.".SETVALUE(EccNo);
        Action50.INVOKE;
      END;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateTaxJournalLinesWithExciseDetails@1500074(VAR TaxJournalLine@1500000 : Record 16587);
    VAR
      RecRef@1500004 : RecordRef;
      BatchName@1500002 : Code[10];
      AccountNo@1500001 : Code[20];
      TaxJnlTemplateName@1500003 : Code[10];
    BEGIN
      BatchName := CreateTaxJournalTemplateAndBatch(TaxJnlTemplateName);
      AccountNo := LibraryERM.CreateGLAccountNo;
      WITH TaxJournalLine DO BEGIN
        INIT;
        VALIDATE("Journal Template Name",TaxJnlTemplateName);
        VALIDATE("Journal Batch Name",BatchName);
        RecRef.GETTABLE(TaxJournalLine);
        VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Line No.")));
        INSERT(TRUE);
        VALIDATE("Posting Date",WORKDATE);
        VALIDATE("Document No.",LibraryUtility.GenerateRandomCode(FIELDNO("Document No."),DATABASE::"Tax Journal Line"));
        VALIDATE("Account Type","Account Type"::"G/L Account");
        VALIDATE("Account No.",AccountNo);
        VALIDATE("E.C.C. No.",ServiceTaxAsExciseHelper.CreateECCNoAndSeries(2,LibraryERM.CreateNoSeriesCode));
        VALIDATE("Excise Charge",TRUE);
        VALIDATE("Excise Record","Excise Record"::RG23A);
        VALIDATE("BED Amount",LibraryRandom.RandDec(1000,2));
        VALIDATE("eCess Amount",LibraryRandom.RandDec(200,2));
        VALIDATE("SHE Cess Amount",LibraryRandom.RandDec(100,2));
        VALIDATE("Bal. Account Type","Bal. Account Type"::"G/L Account");
        VALIDATE("Bal. Account No.",AccountNo);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateAndPostTaxJournalWithExcise@1500039(VAR TaxJournalLine@1500010 : Record 16587);
    VAR
      TaxJournalManagement@1500000 : Codeunit 16508;
    BEGIN
      CreateTaxJournalLinesWithExciseDetails(TaxJournalLine);
      TaxJournalManagement.PostTaxJournal(TaxJournalLine);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@1500004(VAR PurchaseHeader@1500000 : Record 38;ItemNo@1500002 : Code[20]);
    VAR
      PurchaseLine@1500001 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandInt(5));
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDec(1000,2));
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseOrder@1500005(VAR PurchaseHeader@1500000 : Record 38);
    VAR
      GeneralPostingSetup@1500007 : Record 252;
      ExcisePostingSetup@1500006 : Record 13711;
      StructureDetails@1500001 : Record 13793;
      Item@1500002 : Record 27;
    BEGIN
      FindExcisePostingSetup(ExcisePostingSetup);
      FindGeneralPostingSetup(GeneralPostingSetup);

      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,
        PurchaseHeader."Document Type"::Order,
        CreateVendor(
          GeneralPostingSetup."Gen. Bus. Posting Group",
          ExcisePostingSetup."Excise Bus. Posting Group"));
      PurchaseHeader.VALIDATE(
        Structure,
        ServiceTaxAsExciseHelper.CreateStructure(StructureDetails.Type::Excise));
      PurchaseHeader.MODIFY(TRUE);

      CreateItem(Item,GeneralPostingSetup."Gen. Prod. Posting Group",ExcisePostingSetup."Excise Prod. Posting Group",TRUE);
      CreatePurchaseLine(PurchaseHeader,Item."No.");
    END;

    LOCAL PROCEDURE CreatePostSalesDocument@1500121(LocationCode@1500004 : Code[10];StructureCode@1500003 : Code[20];ItemNo@1500005 : Code[20];FormCode@1500006 : Code[10];VAR SalesLineAmount@1500008 : Decimal;VAR CustomerNo@1500009 : Code[20];ExciseBusPostingGroup@1500010 : Code[10]) : Code[20];
    VAR
      SalesHeader@1500000 : Record 36;
      SalesLine@1500001 : Record 37;
      Customer@1500002 : Record 18;
      StateForms@1500007 : Record 13767;
      GeneralLedgerSetup@1500011 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Location Code",LocationCode);
      Customer.VALIDATE("Excise Bus. Posting Group",ExciseBusPostingGroup);
      Customer.MODIFY(TRUE);
      CustomerNo := Customer."No.";

      WITH SalesHeader DO BEGIN
        LibrarySales.CreateSalesHeader(SalesHeader,"Document Type"::Order,Customer."No.");
        VALIDATE(Structure,StructureCode);
        VALIDATE("Location Code",LocationCode);
        FindStateForm(StateForms,FormCode);
        VALIDATE(State,StateForms.State);
        VALIDATE("Form Code",StateForms."Form Code");
        MODIFY(TRUE);
      END;

      WITH SalesLine DO BEGIN
        LibrarySales.CreateSalesLine(
          SalesLine,SalesHeader,Type::Item,ItemNo,LibraryRandom.RandDecInRange(10,20,2));
        VALIDATE("Unit Price",LibraryRandom.RandDecInRange(100,200,2));
        MODIFY(TRUE);
        CalculateStructures(SalesHeader);
        AdjustStructureAmounts(SalesHeader);
        UpdateSalesLines(SalesHeader);
        CalculateTCS(SalesHeader);
        GET("Document Type","Document No.","Line No.");
        SalesLineAmount :=
          "Line Amount" + "Charges To Customer";
      END;
      EXIT(LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE CreateStructureCVDEnabled@1500131(VAR StructureHeader@1500000 : Record 13792);
    VAR
      StructureDetails@1500003 : Record 13793;
    BEGIN
      LibraryERM.CreateStructureHeader(StructureHeader);
      WITH StructureDetails DO BEGIN
        LibraryERM.CreateStructureDetails(StructureDetails,StructureHeader.Code,1,Type::Excise,'',''); // Value 1 for Calculation Order Field.
        VALIDATE(CVD,TRUE);
        VALIDATE("CVD Payable to Third Party",TRUE);
        VALIDATE("CVD Third Party Code",ServiceTaxAsExciseHelper.CreateGLAccount);
        VALIDATE("Include Base",TRUE);
        VALIDATE("Include Line Discount",TRUE);
        VALIDATE("Include Invoice Discount",TRUE);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateVendor@1500057(GenBusPostingGroup@1500000 : Code[10];ExciseBusPostingGroup@1500001 : Code[10]) : Code[20];
    VAR
      Vendor@1500002 : Record 23;
    BEGIN
      WITH Vendor DO BEGIN
        LibraryPurchase.CreateVendor(Vendor);
        VALIDATE("Excise Bus. Posting Group",ExciseBusPostingGroup);
        VALIDATE("Gen. Bus. Posting Group",GenBusPostingGroup);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateVendorWithState@1500007(VAR Vendor@1500000 : Record 23;TaxLiable@1500002 : Boolean;ExciseBusPostingGroup@1500001 : Code[10];StateCode@1500003 : Code[10]) : Code[20];
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      WITH Vendor DO BEGIN
        VALIDATE("Excise Bus. Posting Group",ExciseBusPostingGroup);
        VALIDATE("Tax Liable",TaxLiable);
        VALIDATE("State Code",StateCode);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateVendorForeign@1500112(ExciseBusPostingGroup@1500001 : Code[10];CurrencyFactor@1500002 : Decimal;LocationCode@1500004 : Code[10]) : Code[20];
    VAR
      Vendor@1500000 : Record 23;
      GeneralPostingSetup@1500003 : Record 252;
    BEGIN
      GeneralPostingSetup.SETFILTER("Direct Cost Applied Account",'<>%1','');
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      WITH Vendor DO BEGIN
        GET(CreateVendor(GeneralPostingSetup."Gen. Bus. Posting Group",ExciseBusPostingGroup));
        VALIDATE(
          "Currency Code",
          LibraryERM.CreateCurrencyWithExchangeRate(CALCDATE('<-1Y>',WORKDATE),CurrencyFactor,CurrencyFactor));
        VALIDATE("Location Code",LocationCode);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE FindExcisePostingSetup@1500108(VAR ExcisePostingSetup@1500000 : Record 13711);
    BEGIN
      ExcisePostingSetup.SETRANGE("BED Calculation Type",ExcisePostingSetup."BED Calculation Type"::"Excise %");
      LibraryERM.FindExcisePostingSetup(ExcisePostingSetup);
    END;

    LOCAL PROCEDURE FindStateForm@1500116(VAR StateForms@1500000 : Record 13767;FormCode@1500001 : Code[10]);
    BEGIN
      StateForms.SETRANGE("Form Code",FormCode);
      StateForms.FINDFIRST;
    END;

    LOCAL PROCEDURE FindGeneralPostingSetup@1500036(VAR GeneralPostingSetup@1500000 : Record 252);
    BEGIN
      GeneralPostingSetup.SETFILTER("Direct Cost Applied Account",'<>%1','');
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
    END;

    LOCAL PROCEDURE FindPurchInvLine@1500052(VAR PurchInvLine@1500000 : Record 123;DocumentNo@1500001 : Code[20]);
    BEGIN
      PurchInvLine.SETRANGE("Document No.",DocumentNo);
      PurchInvLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesInvoiceLine@1500067(VAR SalesInvoiceLine@1500000 : Record 113;DocumentNo@1500001 : Code[20]);
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindTaxGLAccountNo@1500051(LocationCode@1500000 : Code[10]) : Code[20];
    VAR
      State@1500001 : Record 13762;
      Location@1500002 : Record 14;
    BEGIN
      Location.GET(LocationCode);
      State.GET(Location."State Code");
      EXIT(State."CST Account (Sales)");
    END;

    LOCAL PROCEDURE FindGLEntryDocumentNo@1500053() : Code[20];
    VAR
      GLEntry@1500511 : Record 17;
    BEGIN
      GLEntry.FINDLAST;
      EXIT(GLEntry."Document No.");
    END;

    PROCEDURE GetSalesLineFieldErrorText@1500047(SalesLine@1500000 : Record 37;PurchaseLine@1500001 : Record 39) : Text;
    BEGIN
      WITH SalesLine DO
        EXIT(
          STRSUBSTNO(
            SalesLineFieldErrorTok,
            FIELDCAPTION("Qty. to Invoice"),
            PurchaseLine."Quantity Invoiced" - "Quantity Invoiced",
            "Document Type",
            "Document No.",
            "Line No."));
    END;

    LOCAL PROCEDURE PostPartialReceipt@1500017(VAR PurchaseLine@1500003 : Record 39;VAR PurchInvLine@1500008 : Record 123;LocationCode@1500007 : Code[10];ItemNo@1500001 : Code[20];ExciseBusPostingSetup@1500004 : Code[10];StateCode@1500006 : Code[10]);
    VAR
      PurchaseHeader@1500000 : Record 38;
      StructureDetails@1500005 : Record 13793;
      Vendor@1500002 : Record 23;
      DocumentNo@1500009 : Code[20];
    BEGIN
      CreateVendorWithState(Vendor,TRUE,ExciseBusPostingSetup,StateCode);

      WITH PurchaseHeader DO BEGIN
        LibraryPurchase.CreatePurchHeader(PurchaseHeader,"Document Type"::Order,Vendor."No.");
        VALIDATE("Location Code",LocationCode);
        VALIDATE(
          Structure,
          ServiceTaxAsExciseHelper.CreateStructure(StructureDetails.Type::Excise));
        MODIFY(TRUE);
      END;

      WITH PurchaseLine DO BEGIN
        LibraryPurchase.CreatePurchaseLine(
          PurchaseLine,PurchaseHeader,Type::Item,ItemNo,LibraryRandom.RandIntInRange(100,200));
        VALIDATE("Direct Unit Cost",LibraryRandom.RandDecInRange(10,20,2));
        VALIDATE("Qty. to Receive",Quantity / LibraryRandom.RandIntInRange(2,5));
        MODIFY(TRUE);

        CalculatePurchaseLines(PurchaseHeader);

        DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
        FindPurchInvLine(PurchInvLine,DocumentNo);
        GET("Document Type","Document No.","Line No.");
      END;
    END;

    LOCAL PROCEDURE PostPartialShipment@1500032(VAR SalesLine@1500000 : Record 37;VAR SalesInvoiceLine@1500006 : Record 113;PurchaseLine@1500002 : Record 39;ExciseBusPostingGroup@1500009 : Code[10];StateCode@1500005 : Code[10];Factor@1500011 : Decimal);
    VAR
      SalesHeader@1500001 : Record 36;
      Customer@1500003 : Record 18;
      StructureDetails@1500007 : Record 13793;
      DocumentNo@1500004 : Code[20];
    BEGIN
      CreateCustomer(Customer,TRUE,ExciseBusPostingGroup,StateCode);

      WITH SalesHeader DO BEGIN
        LibrarySales.CreateSalesHeader(SalesHeader,"Document Type"::Order,Customer."No.");
        VALIDATE(Structure,ServiceTaxAsExciseHelper.CreateStructure(StructureDetails.Type::Excise));
        VALIDATE("Location Code",PurchaseLine."Location Code");
        VALIDATE("Form Code",ServiceTaxAsExciseHelper.FindStateFormCode(State));
        MODIFY(TRUE);
      END;

      WITH SalesLine DO BEGIN
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,Type::Item,PurchaseLine."No.",PurchaseLine.Quantity);
        VALIDATE("Unit Price",PurchaseLine."Direct Unit Cost" * Factor);
        VALIDATE("Qty. to Ship",PurchaseLine."Quantity Received" / Factor);
        MODIFY(TRUE);

        DocumentNo := LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
        GET("Document Type","Document No.","Line No.");
        FindSalesInvoiceLine(SalesInvoiceLine,DocumentNo);
      END;
    END;

    LOCAL PROCEDURE PostPurchaseOrder@1500041(PurchaseLine@1500003 : Record 39;VAR PurchInvLine@1500001 : Record 123);
    VAR
      PurchaseHeader@1500000 : Record 38;
    BEGIN
      PurchaseHeader.GET(PurchaseLine."Document Type",PurchaseLine."Document No.");
      FindPurchInvLine(
        PurchInvLine,
        LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE PostSalesOrder@1500025(SalesLine@1500003 : Record 37;VAR SalesInvoiceLine@1500001 : Record 113);
    VAR
      SalesHeader@1500000 : Record 36;
    BEGIN
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      FindSalesInvoiceLine(
        SalesInvoiceLine,
        LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE));
    END;

    LOCAL PROCEDURE SetupExciseRoundingPrecision@1500046(ExciseRoundingPrecision@1500001 : Decimal) OldRoundingPrecision : Decimal;
    VAR
      GLSetup@1500000 : Record 98;
    BEGIN
      WITH GLSetup DO BEGIN
        GET;
        OldRoundingPrecision := "Excise Rounding Precision";
        VALIDATE("Excise Rounding Precision",ExciseRoundingPrecision);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CalculatePurchaseLines@1500014(VAR PurchaseHeader@1500001 : Record 38);
    VAR
      PurchaseLine@1500000 : Record 39;
    BEGIN
      PurchaseLine.CalculateStructures(PurchaseHeader);
      PurchaseLine.AdjustStructureAmounts(PurchaseHeader);
      PurchaseLine.UpdatePurchLines(PurchaseHeader);
    END;

    LOCAL PROCEDURE CalcExciseAmount@1500027(UnitCost@1500000 : Decimal;QtyToShipReceive@1500003 : Decimal;ExcisePostingSetup@1500001 : Record 13711;Factor@1500004 : Decimal) : Decimal;
    VAR
      Excise@1500002 : Decimal;
    BEGIN
      Excise := QtyToShipReceive / Factor * UnitCost;
      Excise := Excise * ExcisePostingSetup."BED %" / 100;
      Excise += Excise * (ExcisePostingSetup."eCess %" + ExcisePostingSetup."SHE Cess %") / 100;
      EXIT(Excise);
    END;

    LOCAL PROCEDURE CalcTaxAmount@1500024(LineAmount@1500000 : Decimal;Excise@1500003 : Decimal;TaxPercent@1500001 : Decimal) : Decimal;
    VAR
      GLSetup@1500002 : Record 98;
    BEGIN
      GLSetup.GET;
      EXIT(ROUND((LineAmount + Excise) * TaxPercent / 100,GLSetup."VAT Rounding Precision"));
    END;

    LOCAL PROCEDURE UndoPurchaseReceiptLine@1500009(DocumentNo@1500000 : Code[20]);
    VAR
      PurchaseRcptLine@1500001 : Record 121;
    BEGIN
      PurchaseRcptLine.SETRANGE("Document No.",DocumentNo);
      PurchaseRcptLine.FINDFIRST;

      LibraryVariableStorage.Enqueue(UndoReceiptQst);  // Enqueue Value for Confirm Handler.
      CODEUNIT.RUN(CODEUNIT::"Undo Purchase Receipt Line",PurchaseRcptLine);
    END;

    LOCAL PROCEDURE UpdatePurchaseOrder@1500012(VAR PurchaseLine@1500000 : Record 39);
    VAR
      PurchaseHeader@1500001 : Record 38;
    BEGIN
      WITH PurchaseLine DO BEGIN
        PurchaseHeader.GET("Document Type","Document No.");
        PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
        PurchaseHeader.MODIFY(TRUE);
        CalculatePurchaseLines(PurchaseHeader);
        UpdateExciseAmount;
      END;
    END;

    [ModalPageHandler]
    PROCEDURE PurchaseOrderStatisticsMPH@1500019(VAR PurchaseOrderStatistics@1500000 : TestPage 403);
    VAR
      Value@1500001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(Value);
      PurchaseOrderStatistics.InvoicingExciseAmount.ASSERTEQUALS(Value); // verify Excise Amount on Invoicing Tab
    END;

    LOCAL PROCEDURE VerifyPurchaseOrderStatistics@1500033(PurchaseLine@1500000 : Record 39;ExcisePostingSetup@1500001 : Record 13711);
    BEGIN
      WITH PurchaseLine DO
        LibraryVariableStorage.Enqueue(
          ServiceTaxAsExciseHelper.RoundExciseAmount(
            CalcExciseAmount("Direct Unit Cost","Qty. to Receive",ExcisePostingSetup,1)));

      ServiceTaxAsExciseHelper.OpenPurchaseOrderStatistics(PurchaseLine);
    END;

    PROCEDURE VerifySalesOrderStatistics@1500034(VAR SalesLine@1500000 : Record 37;PurchInvLine@1500001 : Record 123;ExcisePostingSetup@1500002 : Record 13711;TaxPercent@1500003 : Decimal);
    VAR
      ExciseAmount@1500004 : Decimal;
    BEGIN
      ExciseAmount := CalcExciseAmount(SalesLine."Unit Price",PurchInvLine.Quantity,ExcisePostingSetup,1);
      LibraryVariableStorage.Enqueue(ServiceTaxAsExciseHelper.RoundExciseAmount(ExciseAmount));
      LibraryVariableStorage.Enqueue(
        CalcTaxAmount(SalesLine."Unit Price" * PurchInvLine.Quantity,ExciseAmount,TaxPercent));
      ServiceTaxAsExciseHelper.OpenSalesOrderStatistics(SalesLine);
    END;

    PROCEDURE VerifyRG23APartIIEntry@1500030(DocumentNo@1500000 : Code[20]);
    VAR
      RG23APartII@1500001 : Record 13720;
    BEGIN
      WITH RG23APartII DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        Assert.RecordCount(RG23APartII,2);
      END;
    END;

    LOCAL PROCEDURE VerifyRG23CPartIIEntry@1500010(DocumentNo@1500000 : Code[20]);
    VAR
      RG23CPartII@1500001 : Record 13722;
      BEDCreditAmount@1500002 : Decimal;
      BEDDebitAmount@1500003 : Decimal;
    BEGIN
      WITH RG23CPartII DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;
        BEDCreditAmount := "BED Credit";
        FINDLAST;
        BEDDebitAmount := "BED Debit";
        Assert.AreEqual(
          BEDCreditAmount,
          BEDDebitAmount,
          STRSUBSTNO(ValueNotEqualErr,FIELDCAPTION("BED Debit"),"Entry No.",FIELDCAPTION("BED Credit"),TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyRG23DEntry@1500002(PurchaseLine@1500000 : Record 39;ExcisePostingSetup@1500003 : Record 13711);
    VAR
      RG23D@1500001 : Record 16537;
      ExciseAmount@1500002 : Decimal;
    BEGIN
      WITH PurchaseLine DO
        ExciseAmount :=
          CalcExciseAmount("Direct Unit Cost","Quantity Received",ExcisePostingSetup,1);

      WITH RG23D DO BEGIN
        SETRANGE("Item No.",PurchaseLine."No.");
        FINDFIRST;

        Assert.AreEqual(
          ExciseAmount,
          Amount,
          STRSUBSTNO(FieldErr,FIELDCAPTION(Amount),TABLECAPTION));
        Assert.AreEqual(
          ExciseAmount / PurchaseLine."Quantity Received",
          "Excise Amt Per Unit",
          STRSUBSTNO(FieldErr,FIELDCAPTION("Excise Amt Per Unit"),TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyRG23DEntryExciseBCD@1500208(DocumentNo@1500008 : Code[20];CurrencyFactor@1500007 : Decimal;Excise@1500006 : Decimal;BCDAmount@1500005 : Decimal);
    VAR
      RG23D@1500001 : Record 16537;
    BEGIN
      WITH RG23D DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        FINDFIRST;

        Assert.AreEqual(
          BCDAmount * Excise / 100 / CurrencyFactor,
          "Excise Amt Per Unit",
          STRSUBSTNO(FieldErr,FIELDCAPTION("Excise Amt Per Unit"),TABLECAPTION));
        Assert.AreEqual(
          BCDAmount / CurrencyFactor,
          "Excise Base Amt Per Unit",
          STRSUBSTNO(FieldErr,FIELDCAPTION("Excise Base Amt Per Unit"),TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyGLEntry@1500023(DocumentNo@1500002 : Code[20];GLAccountNo@1500000 : Code[20];ExpectedAmount@1500003 : Decimal);
    VAR
      GLEntry@1500001 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document Type","Document Type"::Invoice);
        SETRANGE("G/L Account No.",GLAccountNo);
        SETRANGE("Document No.",DocumentNo);
        IF FINDFIRST THEN
          Assert.AreEqual(-ExpectedAmount,Amount,STRSUBSTNO(FieldErr,FIELDCAPTION(Amount),TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyDocumentGLEntry@1500203(DocumentType@1500004 : Option;DocumentNo@1500002 : Code[20];SourceNo@1500000 : Code[20];ExpectedAmount@1500003 : Decimal);
    VAR
      GLEntry@1500001 : Record 17;
    BEGIN
      WITH GLEntry DO BEGIN
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Source No.",SourceNo);
        FINDLAST;

        Assert.AreEqual(ExpectedAmount,Amount,STRSUBSTNO(FieldErr,FIELDCAPTION(Amount),TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE VerifyTaxEntry@1500037(DocumentNo@1500002 : Code[20];ExpectedAmount@1500003 : Decimal);
    VAR
      TaxEntry@1500001 : Record 13700;
    BEGIN
      WITH TaxEntry DO BEGIN
        SETRANGE("Document Type","Document Type"::Invoice);
        SETRANGE("Document No.",DocumentNo);
        IF FINDFIRST THEN
          Assert.AreEqual(ExpectedAmount,Amount,STRSUBSTNO(FieldErr,FIELDCAPTION(Amount),TABLECAPTION));
      END;
    END;

    PROCEDURE VerifyExciseEntry@1500055(DocumentNo@1500002 : Code[20];ExpectedAmount@1500003 : Decimal);
    VAR
      ExciseEntry@1500001 : Record 13712;
    BEGIN
      WITH ExciseEntry DO BEGIN
        SETRANGE("Document No.",DocumentNo);
        IF FINDFIRST THEN BEGIN
          Assert.RecordCount(ExciseEntry,2);
          Assert.AreEqual(ExpectedAmount,Amount,STRSUBSTNO(FieldErr,FIELDCAPTION(Amount),TABLECAPTION));
        END;
      END;
    END;

    LOCAL PROCEDURE VerifyShipmentEntries@1500031(SalesInvoiceLine@1500004 : Record 113;PurchInvLine@1500003 : Record 123;ExcisePostingSetup@1500002 : Record 13711;TaxPercent@1500006 : Decimal);
    VAR
      ExpectedTaxAmount@1500005 : Decimal;
      ExciseAmount@1500007 : Decimal;
    BEGIN
      ExciseAmount :=
        CalcExciseAmount(
          PurchInvLine."Direct Unit Cost",
          PurchInvLine.Quantity,
          ExcisePostingSetup,
          PurchInvLine.Quantity / SalesInvoiceLine.Quantity);
      // Verify Excise G/L Entry
      VerifyGLEntry(
        SalesInvoiceLine."Document No.",
        ExcisePostingSetup."Cenvat Transfered(Trading)",
        ServiceTaxAsExciseHelper.RoundExciseAmount(ExciseAmount));
      // Verify Tax G/L Entry
      ExpectedTaxAmount := CalcTaxAmount(SalesInvoiceLine."Unit Price" * SalesInvoiceLine.Quantity,ExciseAmount,TaxPercent);
      VerifyGLEntry(SalesInvoiceLine."Document No.",FindTaxGLAccountNo(SalesInvoiceLine."Location Code"),ExpectedTaxAmount);
      // Verify Tax Entry
      VerifyTaxEntry(SalesInvoiceLine."Document No.",-ExpectedTaxAmount);
    END;

    LOCAL PROCEDURE VerifyReversedPLAEntry@1500077();
    VAR
      PLAEntry@1500000 : Record 13723;
    BEGIN
      PLAEntry.SETRANGE("Document No.",FindGLEntryDocumentNo);
      PLAEntry.FINDFIRST;
      PLAEntry.CALCFIELDS("Remaining BED","Remaining Cess","Remaining SHE Cess");
      Assert.AreEqual(0,PLAEntry."Remaining BED",AmountNotEqualErr);
      Assert.AreEqual(0,PLAEntry."Remaining Cess",AmountNotEqualErr);
      Assert.AreEqual(0,PLAEntry."Remaining SHE Cess",AmountNotEqualErr);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@1500011(Question@1500000 : Text[1024];VAR Reply@1500001 : Boolean);
    VAR
      ExpectedMessage@1500005 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      Assert.IsTrue(STRPOS(Question,ExpectedMessage) > 0,Question);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandlerYes@1500062(Question@1500001 : Text;VAR Reply@1500000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500100(Message@1500101 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
        1. Create and Post Purchase Order & 100% Excise credit in RG 23 C Part II entry through Undo Receipt.

        Covers Test cases: 283219
        ---------------------------------------------------------------------------------
        Test Function Name                                                         TFS ID
        ---------------------------------------------------------------------------------
        PurchaseOrderWithUndoReceipt                                               283219

        PurchaseInvoiceWithForeignVendor                                           358995
        SalesOrderFromTradingLocation                                              358995
        SalesOrderFromTradingLocationWithExciseAmount                              358995

        PartialReceiptTradingLocation                                              359905
        PartialReceiptFullShipmentFromTradingLocation                              359905
        PartialReceiptPartialShipmentFromTradingLocation                           359905
        PartialReceiptFullShipmentRemainingReceiptPurchaseStatistics               359905
        PartialReceiptFullShipmentRemainingReceiptSalesStatistics                  360112
        PartialReceiptFullShipmentRemainingReceiptShipment                         360112
        PartialReceiptPartialShipmentRemainingReceiptExceededShipment              360112
    }
    END.
  }
}

