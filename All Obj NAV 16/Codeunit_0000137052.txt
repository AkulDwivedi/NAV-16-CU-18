OBJECT Codeunit 137052 SCM RTAM Item Tracking
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemJournalBatch@1011 : Record 233;
      ItemJournalTemplate@1009 : Record 82;
      OutputItemJournalTemplate@1020 : Record 82;
      OutputItemJournalBatch@1019 : Record 233;
      ConsumptionItemJournalTemplate@1036 : Record 82;
      ConsumptionItemJournalBatch@1034 : Record 233;
      LocationGreen@1015 : Record 14;
      LocationBlue@1030 : Record 14;
      LocationBlue2@1053 : Record 14;
      LocationSilver@1045 : Record 14;
      LocationIntransit@1038 : Record 14;
      ItemTrackingCodeSerialSpecific@1005 : Record 6502;
      ItemTrackingCodeLotSpecific@1018 : Record 6502;
      Assert@1002 : Codeunit 130000;
      LibraryInventory@1016 : Codeunit 132201;
      LibraryItemTracking@1047 : Codeunit 130502;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryPurchase@1004 : Codeunit 130512;
      LibrarySales@1024 : Codeunit 130509;
      LibraryWarehouse@1003 : Codeunit 132204;
      LibraryCosting@1032 : Codeunit 132200;
      LibraryManufacturing@1017 : Codeunit 132202;
      LibraryRandom@1006 : Codeunit 130440;
      LibraryService@1013 : Codeunit 131902;
      LibraryVariableStorage@1014 : Codeunit 131004;
      isInitialized@1000 : Boolean;
      VerifyQtyToHandle@1012 : Boolean;
      CreateNewLotNo@1007 : Boolean;
      Partial@1029 : Boolean;
      CancelReservationCurrentLine@1031 : Boolean;
      UpdateSerialNo@1060 : Boolean;
      UpdateLotNo@1062 : Boolean;
      AssignTracking@1035 : 'None,SerialNo,LotNo';
      ItemTrackingAction@1050 : 'None,AvailabilitySerialNo,AvailabilityLotNo';
      TrackingQuantity@1023 : Decimal;
      Description@1027 : Text[50];
      Comment@1028 : Text[80];
      ReservationsCancelQst@1025 : TextConst 'ENU=Do you want to cancel all reservations';
      ItemTrackingSerialNumberErr@1001 : TextConst 'ENU=Variant  cannot be fully applied';
      SerialNumberErr@1033 : TextConst 'ENU=You must assign a serial number';
      ConsumptionMissingQst@1022 : TextConst 'ENU=Some consumption is still missing. Do you still want to finish the order?';
      MessageCounter@1042 : Integer;
      SignFactor@1037 : Integer;
      NumberOfLineEqualErr@1039 : TextConst 'ENU=Number of Lines must be same.';
      DocumentNo@1040 : Code[20];
      SynchronizeItemTrackingQst@1041 : TextConst 'ENU=Do you want to synchronize item tracking on the line with item tracking on the related drop shipment sales order line?';
      AvailabilityWarningsMsg@1043 : TextConst 'ENU=There are availability warnings on one or more lines.';
      SerialNumberRequiredErr@1044 : TextConst '@@@="%1 = Item No.";ENU=You must assign a serial number for item %1.';
      WarrantyDateErr@1049 : TextConst 'ENU=Warranty Date must have a value in Tracking Specification';
      LotNumberRequiredErr@1048 : TextConst '@@@="%1 = Item No.";ENU=You must assign a lot number for item %1';
      QtyToHandleErr@1046 : TextConst '@@@="%1 = Item No.";ENU=Qty. to Handle (Base) in Tracking Specification for Item No. %1';
      QuantityHandledErr@1061 : TextConst 'ENU=Quantity Handled (Base) must be equal to ''0''  in Tracking Specification';
      SomeOutputMissingMsg@1026 : TextConst 'ENU=Some output is still missing';
      ItemLedgerEntrySummaryTypeTxt@1052 : TextConst 'ENU=Item Ledger Entry';
      TransferLineSummaryTypeTxt@1051 : TextConst 'ENU=Transfer Line, Inbound';
      GlobalItemNo@1008 : Code[20];
      TrackingAlreadyExistMsg@1056 : TextConst 'ENU=Tracking specification with Serial No';
      VariantFullyAppliedErr@1055 : TextConst '@@@="%1 = Variant Code";ENU=Item No. %1 Variant  cannot be fully applied';
      AlreadyOnInventoryErr@1054 : TextConst 'ENU=already on inventory.';
      CombinedShipmentsMsg@1057 : TextConst 'ENU=The shipments are now combined and the number of invoices created is 1.';
      CombinedReturnReceiptMsg@1058 : TextConst 'ENU=The return receipts are now combined and the number of credit memos created is 1.';
      SerialNumberPossibleValuesErr@1059 : TextConst 'ENU="must be -1, 0 or 1 "';
      ItemLedgerEntryFilterTxt@1069 : TextConst 'ENU=Sales Shipment|Sales Invoice|Sales Return Receipt|Sales Credit Memo|Purchase Receipt|Purchase Invoice|Purchase Return Shipment|Purchase Credit Memo|Transfer Shipment|Transfer Receipt|Service Shipment|Service Invoice|Service Credit Memo|Posted Assembly';
      ItemLedgerEntryFilteringErr@1070 : TextConst 'ENU=Filter was not set to Item Ledger Entries correctly.';

    [Test]
    [HandlerFunctions(ItemTrackingPurchasePageHandler,QuantityToCreatePageHandler)]
    PROCEDURE WhseReceiptForPartialWhsePutAwaySerialNo@1();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
      WarehouseReceiptLine@1004 : Record 7317;
      WarehouseReceiptHeader@1005 : Record 7316;
      WarehouseActivityLine@1007 : Record 5767;
      Quantity@1003 : Integer;
    BEGIN
      // Setup: Create Purchase Order, Warehouse Receipt and Partial Qty to Receive.
      Initialize;
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,TRUE,AssignTracking::None,0,TRUE);  // Partial Receipt-True and Tracking Quantity not required.
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationGreen.Code,Quantity,1);  // No. of Lines value required.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWhseReceiptHeaderForPurchase(WarehouseReceiptHeader,PurchaseHeader."No.");
      UpdateQtyToReceiveOnWhseReceiptLine(WarehouseReceiptLine,PurchaseHeader."No.",Item."No.",Quantity - 1);  // Partial Quantity Value.
      WarehouseReceiptLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingPurchasePageHandler .

      // Exercise: Post and Register Warehouse Activity.
      PostWhseReceiptAndRegisterWarehouseActivity(
        WarehouseReceiptHeader,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order");

      // Verify: Verify Quantity to Handle on Tracking line on Page Handler.
      SetGlobalValue(Item."No.",FALSE,TRUE,TRUE,AssignTracking::None,0,FALSE);  // Verify Qty To Handle-True.
      VerifyTrackingOnWarehouseReceipt(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPurchasePageHandler,QuantityToCreatePageHandler,SerialPostedLinesPageHandler,SerialNoListPageHandler)]
    PROCEDURE PostedPurchaseInvWhsePutAwaySerialNo@57();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
      WarehouseReceiptLine@1004 : Record 7317;
      WarehouseReceiptHeader@1005 : Record 7316;
      WarehouseActivityLine@1007 : Record 5767;
      Quantity@1003 : Integer;
    BEGIN
      // Setup: Create Purchase Order, Warehouse Receipt, Partial Qty to Receive, Warehouse Receipt Post, Register Warehouse Activity and again Warehouse Receipt Post.
      Initialize;
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,TRUE,AssignTracking::None,0,TRUE);  // Partial Receipt-True and Tracking Quantity not required.

      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationGreen.Code,Quantity,1);  // No. of Lines value required.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWhseReceiptHeaderForPurchase(WarehouseReceiptHeader,PurchaseHeader."No.");
      UpdateQtyToReceiveOnWhseReceiptLine(WarehouseReceiptLine,PurchaseHeader."No.",Item."No.",Quantity - 1);  // Partial Quantity Value.
      WarehouseReceiptLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingPurchasePageHandler.
      PostWhseReceiptAndRegisterWarehouseActivity(
        WarehouseReceiptHeader,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order");
      PostWhseReceiptAndRegisterWarehouseActivity(
        WarehouseReceiptHeader,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order");

      // Exercise: Post Purchase Order with Invoice Option.
      PostPurchaseDocument(PurchaseHeader."Document Type"::Order,PurchaseHeader."No.",FALSE,TRUE);

      // Verify: Verify Serial No comment on Posted Purchase Order on Page Handler.
      VerifyTrackingOnPostedPurchaseInvoice(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPurchasePageHandler,QuantityToCreatePageHandler,SerialPostedLinesPageHandler,SerialNoListPageHandler)]
    PROCEDURE PostedPurchaseInvFullWhsePutAwaySerialNoLotNo@69();
    BEGIN
      // Setup.
      Initialize;
      WhsePutAwaySerialNoLotNo(ItemTrackingCodeSerialSpecific.Code,AssignTracking::SerialNo);  // Tracking Code for Serial No,Assign Serial as True,Assign Tracking as Serial No.
    END;

    [Test]
    [HandlerFunctions(LotItemTrackingPageHandler,LotPostedLinesPageHandler,LotNoListPageHandler)]
    PROCEDURE PostedPurchaseInvFullWhsePutAwayLotNo@98();
    BEGIN
      // Setup.
      Initialize;
      WhsePutAwaySerialNoLotNo(ItemTrackingCodeLotSpecific.Code,AssignTracking::LotNo);  // Tracking Code for Lot No Assign Serial as False,Assign Tracking as Lot No.
    END;

    LOCAL PROCEDURE WhsePutAwaySerialNoLotNo@101(ItemTrackingCode@1001 : Code[10];AssignTrackingValue@1007 : Option);
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
      WarehouseReceiptHeader@1005 : Record 7316;
      WarehouseActivityLine@1003 : Record 5767;
      WarehouseReceiptLine@1006 : Record 7317;
      Quantity@1004 : Integer;
    BEGIN
      Quantity := LibraryRandom.RandInt(10);  // Using Random Value for Quantity.
      CreateItem(Item,ItemTrackingCode,Item."Costing Method"::FIFO);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTrackingValue,0,TRUE);  // Create New Lot No -True and Tracking Quantity not required.
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationGreen.Code,Quantity,1);  // No. of Lines value required.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      SelectWarehouseReceiptLine(WarehouseReceiptLine,PurchaseHeader."No.",WarehouseReceiptLine."Source Document"::"Purchase Order");
      WarehouseReceiptLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingPurchasePageHandler/LotItemTrackingPageHandler.
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
      PostWhseReceiptAndRegisterWarehouseActivity(
        WarehouseReceiptHeader,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order");

      // Exercise: Post Purchase Order with Invoice Option.
      PostPurchaseDocument(PurchaseHeader."Document Type"::Order,PurchaseHeader."No.",FALSE,TRUE);

      // Verify: Verify Serial No or Lot No comment on Posted Purchase Order on Page Handler.
      VerifyTrackingOnPostedPurchaseInvoice(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPurchasePageHandler,QuantityToCreatePageHandler)]
    PROCEDURE WhseReceiptForMultiLinePartialWhsePutAwaySerialNoLotNo@141();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
      WarehouseReceiptLine@1004 : Record 7317;
      WarehouseReceiptHeader@1005 : Record 7316;
      WarehouseActivityLine@1001 : Record 5767;
      Quantity@1007 : Integer;
    BEGIN
      // Setup: Create Purchase Order with Multiple Lines, Warehouse Receipt and Partial Qty to Receive.
      Initialize;
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,TRUE,AssignTracking::None,0,TRUE);  // Create New Lot No -True, Receipt Partial -True and Tracking Quantity not required.
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationGreen.Code,Quantity,3);  // No. of Lines value required.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWhseReceiptHeaderForPurchase(WarehouseReceiptHeader,PurchaseHeader."No.");
      UpdateQtyToReceiveOnWhseReceiptLine(WarehouseReceiptLine,PurchaseHeader."No.",Item."No.",Quantity - 1);  // Partial Quantity Value.
      AssignTrackingMultipleWhseReceiptLines(PurchaseHeader."No.",WarehouseReceiptLine."Source Document"::"Purchase Order");  // Assign Tracking on Page Handler ItemTrackingPurchasePageHandler.

      // Exercise: Assign Serial No and Lot No on Multiple Warehouse Receipt line, Post and Register Warehouse Activity.
      PostWhseReceiptAndRegisterWarehouseActivity(
        WarehouseReceiptHeader,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order");

      // Verify: Verify Quantity to Handle on Tracking line on Page Handler.
      SetGlobalValue(Item."No.",TRUE,TRUE,TRUE,AssignTracking::None,0,FALSE);  // Verify Qty To Handle -True.
      VerifyTrackingOnWarehouseReceipt(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPurchasePageHandler,QuantityToCreatePageHandler,SerialPostedLinesPageHandler,SerialNoListPageHandler)]
    PROCEDURE PostedPurchaseInvMultiLineWhsePutAwaySerialNoLotNo@183();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
      WarehouseReceiptLine@1004 : Record 7317;
      WarehouseReceiptHeader@1005 : Record 7316;
      WarehouseActivityLine@1001 : Record 5767;
      Quantity@1007 : Integer;
    BEGIN
      // Setup: Create Purchase Order with Multiple Lines, Warehouse Receipt, Partial Qty to Receive, Warehouse Receipt Post, Register Warehouse Activity and again Warehouse Receipt Post.
      Initialize;
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,TRUE,AssignTracking::None,0,TRUE);  // Create New Lot No -True, Receipt Partial -True and Tracking Quantity not required.
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationGreen.Code,Quantity,3);  // No. of Lines value required.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWhseReceiptHeaderForPurchase(WarehouseReceiptHeader,PurchaseHeader."No.");
      UpdateQtyToReceiveOnWhseReceiptLine(WarehouseReceiptLine,PurchaseHeader."No.",Item."No.",Quantity - 1);
      AssignTrackingMultipleWhseReceiptLines(PurchaseHeader."No.",WarehouseReceiptLine."Source Document"::"Purchase Order");  // Assign Tracking on Page Handler ItemTrackingPurchasePageHandler.
      PostWhseReceiptAndRegisterWarehouseActivity(
        WarehouseReceiptHeader,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order");
      PostWhseReceiptAndRegisterWarehouseActivity(
        WarehouseReceiptHeader,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order");

      // Exercise: Post Purchase Order with Invoice Option.
      PostPurchaseDocument(PurchaseHeader."Document Type"::Order,PurchaseHeader."No.",FALSE,TRUE);

      // Verify: Verify Serial No comment on Posted Purchase Order on Page Handler.
      VerifyTrackingOnPostedPurchaseInvoice(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(LotItemTrackingPageHandler,LotPostedLinesPageHandler,LotNoListPageHandler)]
    PROCEDURE PostedPurchaseInvMultiLineFullWhsePutAwayLotNo@173();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
      WarehouseReceiptHeader@1005 : Record 7316;
      WarehouseReceiptLine@1003 : Record 7317;
      WarehouseActivityLine@1001 : Record 5767;
      Quantity@1004 : Integer;
    BEGIN
      // Setup: Create Purchase Order with Multiple Lines, Warehouse Receipt, Warehouse Receipt Post, Register Warehouse Activity.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);  // Using Random Value for Quantity.
      CreateItem(Item,ItemTrackingCodeLotSpecific.Code,Item."Costing Method"::FIFO);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::LotNo,0,TRUE);  // Assign Lot No -True, Assign Tracking as Lot No,Tracking Quantity not required.
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationGreen.Code,Quantity,3);  // No. of Lines value required.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWhseReceiptHeaderForPurchase(WarehouseReceiptHeader,PurchaseHeader."No.");
      AssignTrackingMultipleWhseReceiptLines(PurchaseHeader."No.",WarehouseReceiptLine."Source Document"::"Purchase Order");  // Assign Tracking on Page Handler LotItemTrackingPageHandler.
      PostWhseReceiptAndRegisterWarehouseActivity(
        WarehouseReceiptHeader,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order");

      // Exercise: Post Purchase Order with Invoice Option.
      PostPurchaseDocument(PurchaseHeader."Document Type"::Order,PurchaseHeader."No.",FALSE,TRUE);

      // Verify: Verify Lot No comment on Posted Purchase Order on Page Handler.
      VerifyTrackingOnPostedPurchaseInvoice(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSalesPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,SerialPostedLinesPageHandler,SerialNoListPageHandler)]
    PROCEDURE PostedSalesInvForFullWarehouseShipmentSerialNo@13();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1005 : Record 36;
      WarehouseShipmentHeader@1007 : Record 7320;
      WarehouseActivityLine@1010 : Record 5767;
      WarehouseShipmentLine@1003 : Record 7321;
      SalesLine@1002 : Record 37;
      ItemJournalLine@1004 : Record 83;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item, Sales Order,Create Warehouse Shipment from Sales Order, add tracking and Post Shipment.
      Initialize;
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,0,TRUE);  // Tracking Quantity not required.
      Quantity := LibraryRandom.RandInt(10);  // Using Random Value for Quantity.
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationGreen.Code,Quantity,0,FALSE,AssignTracking::SerialNo);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationGreen.Code,Quantity);
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);

      AssignTrackingOnWarehouseShipmentLine(
        WarehouseShipmentLine,SalesHeader."No.",WarehouseActivityLine."Source Document"::"Sales Order");  // Assign Tracking on Page Handler ItemTrackingSalesPageHandler.
      CreatePickFromWarehouseShipment(
        WarehouseShipmentHeader,SalesHeader."No.",WarehouseActivityLine."Source Document"::"Sales Order");
      RegisterWarehouseActivityAndPostWhseShipment(
        WarehouseShipmentHeader,SalesHeader."No.",WarehouseActivityLine."Source Document"::"Sales Order");

      // Exercise: Post Sales Order with Invoice Option.
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",FALSE,TRUE);

      // Verify: Verify Tracking line for Posted Sales Invoice on Page Handler.
      VerifyTrackingOnPostedSalesInvoice(SalesHeader."No.",FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSalesPageHandler,QuantityToCreatePageHandler,PickSelectionPageHandler,ItemTrackingSummaryPageHandler,SerialPostedLinesPageHandler,SerialNoListPageHandler)]
    PROCEDURE PostedSalesShipmentForPartialWhseShipmentSerialNoLotNo@103();
    BEGIN
      // Setup.
      Initialize;
      WhseShipmentSerialNoLotNo(FALSE);  // Invoice-False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSalesPageHandler,QuantityToCreatePageHandler,PickSelectionPageHandler,ItemTrackingSummaryPageHandler,SerialPostedLinesPageHandler,SerialNoListPageHandler)]
    PROCEDURE PostedSalesInvForPartialWhseShipmentSerialLotNo@154();
    BEGIN
      // Setup.
      Initialize;
      WhseShipmentSerialNoLotNo(TRUE);  // Invoice-True.
    END;

    [Test]
    [HandlerFunctions(LotItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PostingSalesShipmentDeletesWhseItemTrackingLine@44();
    VAR
      WarehouseShipmentHeader@1004 : Record 7320;
      WhseItemTrackingLine@1006 : Record 6550;
      ItemNo@1008 : Code[20];
      SourceDocType@1009 : Option;
      SourceDocNo@1010 : Code[20];
    BEGIN
      // [FEATURE] [Lot Warehouse Tracking] [Whse. Item Tracking Line]
      // [SCENARIO 380081] Whse. Item Tracking Line should be deleted after source Whse. Shipment is posted.
      Initialize;

      // [GIVEN] Lot-tracked Item. "Lot Warehouse Tracking" switch in Item Tracking Code is on.
      // [GIVEN] Positive inventory on Location that requires Shipment and Pick.
      // [GIVEN] Released Sales Order, Shipment and Pick.
      CreateLotTrackedPositiveAdjmtAndSalesWithShipmentAndPick(WarehouseShipmentHeader,SourceDocType,SourceDocNo,ItemNo);

      // [WHEN] Register Pick and post Shipment.
      RegisterWarehouseActivityAndPostWhseShipment(WarehouseShipmentHeader,SourceDocNo,SourceDocType);

      // [THEN] Whse. Item Tracking Line is deleted.
      WhseItemTrackingLine.INIT;
      WhseItemTrackingLine.SETRANGE("Item No.",ItemNo);
      Assert.RecordIsEmpty(WhseItemTrackingLine);
    END;

    LOCAL PROCEDURE WhseShipmentSerialNoLotNo@37(Invoice@1004 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1005 : Record 36;
      WarehouseShipmentHeader@1007 : Record 7320;
      WarehouseActivityLine@1010 : Record 5767;
      SalesLine@1002 : Record 37;
      WarehouseShipmentLine@1003 : Record 7321;
      ItemJournalLine@1006 : Record 83;
      Quantity@1001 : Decimal;
    BEGIN
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test.

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,TRUE,AssignTracking::None,1,TRUE);  // Create New Lot No -True, Partial Shipment-True and Tracking Quantity required.

      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationGreen.Code,Quantity,0,FALSE,AssignTracking::SerialNo);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationGreen.Code,Quantity);
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingSalesPageHandler.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeader."No.",WarehouseActivityLine."Source Document"::"Sales Order");
      LibraryWarehouse.ReleaseWarehouseShipment(WarehouseShipmentHeader);

      DocumentNo := WarehouseShipmentHeader."No.";  // Assign Global variable for Page Handler.
      CreatePickFromPickWorksheet(LocationGreen.Code,Quantity - 1);  // Partial Quantity.
      RegisterWarehouseActivity(SalesHeader."No.",WarehouseActivityLine."Source Document"::"Sales Order");

      AssignTrackingOnWarehouseShipmentLine(
        WarehouseShipmentLine,SalesHeader."No.",WarehouseActivityLine."Source Document"::"Sales Order");  // Assign Tracking on Page Handler ItemTrackingSalesPageHandler.
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");

      // Exercise: Post Warehouse shipment or Post Sales Order.
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
      IF Invoice THEN
        PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",FALSE,TRUE);  // Invoice.

      // Verify: Verify Tracking line for Posted Sales Shipment and Posted Sales Invoice on Page Handler.
      IF Invoice THEN
        VerifyTrackingOnPostedSalesInvoice(SalesHeader."No.",FALSE)
      ELSE
        VerifyTrackingOnPostedSalesShipment(SalesHeader."No.",Quantity - 1);  // Value required.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSalesPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,SerialPostedLinesPageHandler,SerialNoListPageHandler)]
    PROCEDURE PostedSalesInvForMultiLineShipmentSerialLotNo@29();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      ItemJournalLine@1002 : Record 83;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item and Sales order with multiple line.
      Initialize;
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      Quantity := 3 * LibraryRandom.RandInt(10);  // Value required for Test.

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::None,0,TRUE);  // Create New Lot No -True and Tracking Quantity not required.

      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,Quantity,0,FALSE,AssignTracking::SerialNo);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,Quantity / 3);  // Partial Quantity.
      CreateSalesLine(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,Quantity / 3);  // Partial Quantity.
      CreateSalesLine(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,Quantity / 3);  // Partial Quantity.
      LibrarySales.ReleaseSalesDocument(SalesHeader);
      AssignTrackingOnSalesLines(SalesHeader."No.");  // Assign Tracking on Multiple Line on Page Handler ItemTrackingSalesPageHandler.

      // Exercise: Post Sales Order.
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,TRUE);

      // Verify: Verify Tracking line for Posted Sales Invoice on Page Handler.
      VerifyTrackingOnPostedSalesInvoice(SalesHeader."No.",TRUE);
    END;

    [Test]
    [HandlerFunctions(LotItemTrackingPageHandler,ItemTrackingSummaryPageHandler,LotPostedLinesPageHandler,LotNoListPageHandler)]
    PROCEDURE PostedSalesInvForPartialShipmentLotNo@73();
    VAR
      Quantity@1001 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test.
      PartialShipmentLotNo(Quantity,Quantity,Quantity / 2);  // Positive Adjustment Qty, Sales Order Quantity, Qty to Ship.
    END;

    [Test]
    [HandlerFunctions(LotItemTrackingPageHandler,ItemTrackingSummaryPageHandler,LotPostedLinesPageHandler,LotNoListPageHandler)]
    PROCEDURE PostedSalesInvForAvailablePartialShipmentLotNo@58();
    VAR
      Quantity@1001 : Decimal;
    BEGIN
      // Setup.
      Initialize;
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test.
      PartialShipmentLotNo(Quantity,Quantity + LibraryRandom.RandInt(10),Quantity);  // Positive Adjustment Qty, Sales Order Quantity, Qty to Ship.
    END;

    LOCAL PROCEDURE PartialShipmentLotNo@68(PositiveQuantity@1001 : Decimal;Quantity@1003 : Decimal;QtyToShip@1004 : Decimal);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      ItemJournalLine@1002 : Record 83;
    BEGIN
      // Create Item and Sales order with Partial Quantity.
      CreateItem(Item,ItemTrackingCodeLotSpecific.Code,Item."Costing Method"::FIFO);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,0,TRUE);  // Tracking Quantity Not required.

      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,PositiveQuantity,0,FALSE,AssignTracking::LotNo);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,Quantity);
      UpdateSalesLineAndReleaseOrder(SalesHeader,SalesLine,QtyToShip);  // Partial Quantity.
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler LotItemTrackingPageHandler.

      // Exercise.
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,TRUE);

      // Verify: Verify Tracking line for Posted Sales Invoice on Page Handler.
      VerifyTrackingOnPostedSalesInvoice(SalesHeader."No.",FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSalesPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,SerialPostedLinesPageHandler,SerialNoListPageHandler)]
    PROCEDURE PostedSalesInvForPartialShipmentSerialNoLotNo@7();
    BEGIN
      // Setup.
      Initialize;
      ShipmentSerialNoLotNo(FALSE);  // Complete Invoice -False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSalesPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,SerialPostedLinesPageHandler,SerialNoListPageHandler)]
    PROCEDURE PostedSalesInvForMultiPartialShipmentSerialNoLotNo@84();
    BEGIN
      // Setup.
      Initialize;
      ShipmentSerialNoLotNo(TRUE);  // Complete Invoice -True.
    END;

    LOCAL PROCEDURE ShipmentSerialNoLotNo@79(CompleteInvoice@1002 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      ItemJournalLine@1004 : Record 83;
      Quantity@1003 : Decimal;
      Quantity2@1001 : Decimal;
    BEGIN
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test.
      Quantity2 := 2 * Quantity ;  // Different Value required for Test.

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,TRUE,AssignTracking::SerialNo,Quantity - 1,TRUE);  // Create New Lot No -True, Partial Shipment-True,Assign Tracking as Serial No and Tracking Quantity required.

      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,Quantity,Quantity2,TRUE,AssignTracking::SerialNo);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,Quantity + Quantity2);
      UpdateSalesLineAndReleaseOrder(SalesHeader,SalesLine,Quantity2 + 1);  // Partial Quantity.
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingSalesPageHandler.

      IF CompleteInvoice THEN BEGIN
        SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::None,Quantity - 1,FALSE);  // Partial Quantity -False.
        PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,TRUE);
        SelectSalesLine(SalesLine,SalesHeader."No.");
        UpdateQtyToShipOnSalesLine(SalesLine,Quantity - 1);  // Update Qty to ship.
        SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingSalesPageHandler.
      END;

      // Exercise: Post Sales Order Ship and invoice.
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,TRUE);

      // Verify: Verify Tracking line for Posted Sales Invoice on Page Handler.
      VerifyTrackingOnPostedSalesInvoice(SalesHeader."No.",FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSalesPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ReservationPageHandler,NegativeAdjustmentConfirmHandler)]
    PROCEDURE SalesOrderReservedSerialLotNoError@18();
    BEGIN
      // Setup.
      Initialize;
      SalesOrderReservationSerialLotNo(TRUE);  // Reserve -True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSalesPageHandler,ConfirmHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ReservationPageHandler)]
    PROCEDURE SalesOrderCancelReservationSerialLotNo@26();
    BEGIN
      // Setup.
      Initialize;
      SalesOrderReservationSerialLotNo(FALSE);  // Reserve -False.
    END;

    LOCAL PROCEDURE SalesOrderReservationSerialLotNo@27(Reserve@1008 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      SalesHeader2@1006 : Record 36;
      SalesLine2@1005 : Record 37;
      ItemJournalLine@1004 : Record 83;
      Quantity@1001 : Decimal;
    BEGIN
      // Create Item, create and Post Item Journal, create Sales order with tracking and create another Sales order and reserve.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test.

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::None,0,TRUE);  // Create New Lot No -True and Tracking Quantity not required.

      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,Quantity,0,FALSE,AssignTracking::SerialNo);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,Quantity / 2);  // Partial Qty.
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingSalesPageHandler.

      CreateAndReleaseSalesOrder(SalesHeader2,SalesLine2,Item."No.",LocationBlue.Code,Quantity);
      SalesLine2.ShowReservation;  // Reserve from Current Line on Page Handler ReservationPageHandler.

      // Exercise & Verify: Post Sales Order/cancel reservation and post Sales Order. Verify Error message/Quantity on Posted Sales Invoice Line.
      PostSalesOrderAndVerifyLine(SalesHeader,SalesHeader2,Item."No.",Quantity / 2,Reserve);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSalesPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ReservationPageHandler,NegativeAdjustmentConfirmHandler)]
    PROCEDURE SalesOrderReservedForOutboundOrderError@113();
    BEGIN
      // Setup.
      Initialize;
      SalesOrderReservedForOutboundOrder(TRUE);  // Reserve -True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSalesPageHandler,ConfirmHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ReservationPageHandler)]
    PROCEDURE SalesOrderCancelReservationForOutboundOrder@71();
    BEGIN
      // Setup.
      Initialize;
      SalesOrderReservedForOutboundOrder(FALSE);  // Reserve -True.
    END;

    LOCAL PROCEDURE SalesOrderReservedForOutboundOrder@72(Reserve@1008 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      SalesHeader2@1006 : Record 36;
      SalesLine2@1005 : Record 37;
      ItemJournalLine@1004 : Record 83;
      Quantity@1001 : Decimal;
    BEGIN
      // Create Item, create and Post Item Journal, create Sales order with reserve and create another Sales order with tracking.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test.

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::None,0,TRUE);  // Create New Lot No -True and Tracking Quantity not required.

      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,Quantity,0,FALSE,AssignTracking::SerialNo);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,Quantity / 2);  // Partial Qty.
      SalesLine.ShowReservation;  // Reserve on Page Handler ReservationPageHandler.

      CreateAndReleaseSalesOrder(SalesHeader2,SalesLine2,Item."No.",LocationBlue.Code,Quantity);
      SalesLine2.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingSalesPageHandler.

      // Exercise: Post Sales Order/Cancel reservation and post Sales Order. Verify Error message/Quantity on Posted Sales Invoice Line.
      PostSalesOrderAndVerifyLine(SalesHeader2,SalesHeader,Item."No.",Quantity,Reserve);
    END;

    [Test]
    [HandlerFunctions(LotItemTrackingPageHandler,ItemTrackingSummaryPageHandler,LotPostedLinesPageHandler,LotNoListPageHandler)]
    PROCEDURE PostedSalesInvoiceLineDifferentLots@95();
    VAR
      Item@1000 : Record 27;
      SalesHeader@1005 : Record 36;
      SalesLine@1006 : Record 37;
      ItemJournalLine@1002 : Record 83;
      Quantity@1003 : Decimal;
      Quantity2@1001 : Decimal;
    BEGIN
      // Setup: Create Item and Sales order with Partial Quantity.
      Initialize;
      CreateItem(Item,ItemTrackingCodeLotSpecific.Code,Item."Costing Method"::FIFO);
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test.
      Quantity2 := 2 * Quantity;  // Different Value required for Test.

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,TRUE,AssignTracking::None,1,TRUE);  // Partial Shipment-True,Assign Serial And Lot-True and Tracking Quantity required.

      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,Quantity,Quantity2,TRUE,AssignTracking::LotNo);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,Quantity + Quantity2);
      UpdateSalesLineAndReleaseOrder(SalesHeader,SalesLine,Quantity2 + 1);  // Partial Quantity.
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler LotItemTrackingPageHandler.

      // Exercise: Post Sales Order Ship and invoice.
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,TRUE);

      // Verify: Verify Tracking line for Posted Sales Invoice on Page Handler.
      VerifyTrackingOnPostedSalesInvoice(SalesHeader."No.",FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSalesPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ReservationPageHandler)]
    PROCEDURE SalesOrderReserveSerialNoWithInventoryError@10();
    BEGIN
      // Setup.
      Initialize;
      SalesOrderReserveSerialNoWithDiffInventory(TRUE);  // Reserve -True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSalesPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,ReservationPageHandler)]
    PROCEDURE SalesOrderCancelReserveSerialNoWithoutInventoryError@97();
    BEGIN
      // Setup.
      Initialize;
      SalesOrderReserveSerialNoWithDiffInventory(FALSE);  // Reserve -False.
    END;

    LOCAL PROCEDURE SalesOrderReserveSerialNoWithDiffInventory@99(Reserve@1009 : Boolean);
    VAR
      Item@1000 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      SalesHeader2@1006 : Record 36;
      SalesLine2@1005 : Record 37;
      ItemJournalLine@1004 : Record 83;
      Quantity@1001 : Decimal;
      Quantity2@1008 : Decimal;
    BEGIN
      // Create Item, create and Post Item Journal, create Sales order with tracking and create another Sales order with reserve.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test.
      Quantity2 := 2 * Quantity;  // Value required for Test.

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::None,0,TRUE);  // Create New Lot No -True and Tracking Quantity not required.

      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,Quantity,Quantity2,TRUE,AssignTracking::SerialNo);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,Quantity + 1);  // Different Value required for Test.
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingSalesPageHandler.

      CreateAndReleaseSalesOrder(SalesHeader2,SalesLine2,Item."No.",LocationBlue.Code,Quantity2 / 2);  // Value required for Test.
      SalesLine2.ShowReservation;  // Reserve from Current Line on Page Handler ReservationPageHandler.

      // Exercise: Post Sales Order/Add Item tracking and Post both Sales Order.
      IF Reserve THEN
        ASSERTERROR PostSalesDocument(SalesHeader2."Document Type",SalesHeader2."No.",TRUE,FALSE)
      ELSE BEGIN
        SalesLine2.OpenItemTrackingLines;  // Assign Tracking on Page Handler.
        PostSalesDocument(SalesHeader2."Document Type",SalesHeader2."No.",TRUE,TRUE);
        PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,TRUE);
      END;

      // Verify: Verify Error message/Quantity on Posted Sales Invoice Line.
      IF Reserve THEN
        Assert.IsTrue(STRPOS(GETLASTERRORTEXT,SerialNumberErr) > 0,GETLASTERRORTEXT)
      ELSE BEGIN
        VerifyPostedSalesInvoiceLine(SalesHeader2."No.",Item."No.",Quantity2 / 2);
        VerifyPostedSalesInvoiceLine(SalesHeader."No.",Item."No.",Quantity + 1);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE PurchOrderPartialInvoiceWithMethodSpecific@90();
    BEGIN
      // Setup.
      Initialize;
      PurchOrderWithMethodSpecificLotNo(FALSE);  // Complete Invoice-False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE PurchOrderCompleteInvoiceWithMethodSpecific@115();
    BEGIN
      // Setup.
      Initialize;
      PurchOrderWithMethodSpecificLotNo(TRUE);  // Complete Invoice -True.
    END;

    LOCAL PROCEDURE PurchOrderWithMethodSpecificLotNo@123(CompleteInvoice@1004 : Boolean);
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
      ItemLedgerEntry@1005 : Record 32;
      PurchRcptHeader@1006 : Record 120;
      Quantity@1003 : Integer;
      Quantity2@1001 : Integer;
      DirectUnitCost@1013 : Decimal;
    BEGIN
      // Create Item, Purchase Order with Tracking line,Post Purchase Order with Receipt Option and  Post Partial Invoice.
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test.
      Quantity2 := 2 * Quantity;
      DirectUnitCost := LibraryRandom.RandDec(10,2);
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::Specific);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0,FALSE);  // Create New Lot No -True, Partial Receipt-True, Assign Tracking as Serial No and Tracking Quantity not required.

      CreateAndReleasePurchaseOrderWithTracking(PurchaseHeader,Item."No.",LocationBlue.Code,Quantity + Quantity2,1);  // No. of Lines value required.
      PostPurchaseDocument(PurchaseHeader."Document Type"::Order,PurchaseHeader."No.",TRUE,FALSE);  // Receive only.

      SetGlobalValue(Item."No.",FALSE,FALSE,TRUE,AssignTracking::None,Quantity2,FALSE);  // Partial Receipt-True and Tracking Quantity required.
      ReopenPurchaseOrder(PurchaseHeader);
      UpdatePurchaseLineAndReleaseOrder(PurchaseHeader,DirectUnitCost,Quantity);  // Update Direct Unit Cost and Qty to Invoice.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Assign Tracking on Page Handler ItemTrackingPageHandler.

      // Exercise: Post Purchase Order with Invoice Option/Change Direct Unit Cost and again Post Purchase Order with Invoice Option.
      PostPurchaseDocument(PurchaseHeader."Document Type"::Order,PurchaseHeader."No.",FALSE,TRUE);  // Invoice.
      IF CompleteInvoice THEN
        UpdateAndPostPurchaseOrder(PurchaseHeader,DirectUnitCost + 1,Quantity2);

      // Verify: Verify Cost Amount (Actual) on Item Ledger Entry.
      FindPurchRcptHeader(PurchRcptHeader,PurchaseHeader."No.");
      SelectItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Document Type"::"Purchase Receipt",PurchRcptHeader."No.",Item."No.");
      VerifyItemLedgerEntry(ItemLedgerEntry,DirectUnitCost);
      IF CompleteInvoice THEN BEGIN
        ItemLedgerEntry.FINDLAST;
        VerifyItemLedgerEntry(ItemLedgerEntry,DirectUnitCost + 1);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPartialPageHandler)]
    PROCEDURE PostedSalesInvoiceWithMethodSpecific@116();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
      SalesHeader@1010 : Record 36;
      SalesLine@1011 : Record 37;
      SalesShipmentHeader@1004 : Record 110;
      ItemLedgerEntry@1005 : Record 32;
      Quantity@1003 : Integer;
      Quantity2@1001 : Integer;
      DirectUnitCost@1013 : Decimal;
    BEGIN
      // [FEATURE] [Adjust Cost Item Entries]
      // [SCENARIO] Check Cost on ILE after receive Purchase Order with Tracking, then invoice in two steps (with different costs), then post Sales Order with Tracking, then run Adjust Cost.

      // [GIVEN] Create Item, Purchase Order with Tracking line,Post Purchase Order with Receipt Option and Post Partial Invoice.Create Sales Order and Post it.
      Initialize;
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test.
      Quantity2 := 2 * Quantity;
      DirectUnitCost := LibraryRandom.RandDec(10,2);
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::Specific);

      // [GIVEN] Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0,FALSE);  // Create New Lot No -True, Partial Receipt-True, Assign Tracking as Serial No and Tracking Quantity not required.
      CreateAndReleasePurchaseOrderWithTracking(PurchaseHeader,Item."No.",LocationBlue.Code,Quantity + Quantity2,1);  // No. of Lines value required.
      PostPurchaseDocument(PurchaseHeader."Document Type"::Order,PurchaseHeader."No.",TRUE,FALSE);  // Receive only.

      SetGlobalValue(Item."No.",FALSE,FALSE,TRUE,AssignTracking::None,Quantity2,FALSE);  // Partial Receipt-True and Tracking Quantity is required.
      ReopenPurchaseOrder(PurchaseHeader);
      UpdatePurchaseLineAndPost(PurchaseHeader,DirectUnitCost,Quantity);  // Partial Invoice.

      UpdateAndPostPurchaseOrder(PurchaseHeader,DirectUnitCost + 1,Quantity2);
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,Quantity,FALSE);  // Tracking Quantity is required.
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,Quantity);
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingPageHandler.
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,TRUE);

      // [WHEN] Run Adjust Cost Item Entries
      LibraryCosting.AdjustCostItemEntries(Item."No.",'');

      // [THEN] Verify Cost Amount (Actual) on Item Ledger Entry.
      FindSalesShipmentHeader(SalesShipmentHeader,SalesHeader."No.");
      SelectItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Document Type"::"Sales Shipment",SalesShipmentHeader."No.",Item."No.");
      VerifyItemLedgerEntry(ItemLedgerEntry,-(DirectUnitCost + 1));  // Negative value for Sales.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,PostedLinesPageHandler,ConsumptionMissingConfirmHandler)]
    PROCEDURE ProductionOrderWithTrackingAndMultipleOutputSerialNoLotNo@54();
    BEGIN
      // [FEATURE] [Item Tracking] [Production]
      // [SCENARIO] Create Released Production Order with serial tracked Item and Post Output in two steps, then finish Production Order, then verify item tracking lines are correct.

      // Setup.
      Initialize;
      ProductionOrderWithOutputSerialNoLotNo(TRUE);  // Multiple Output Line as True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,PostedLinesPageHandler,ConsumptionMissingConfirmHandler)]
    PROCEDURE ProductionOrderWithTrackingAndOutputSerialNoLotNo@146();
    BEGIN
      // [FEATURE] [Item Tracking] [Production]
      // [SCENARIO] Create Released Production Order with serial tracked Item and Post Output, then finish Production Order, then verify item tracking lines are correct.

      // Setup.
      Initialize;
      ProductionOrderWithOutputSerialNoLotNo(FALSE);  // Multiple Output Line as False.
    END;

    LOCAL PROCEDURE ProductionOrderWithOutputSerialNoLotNo@74(MultipleOutputLine@1003 : Boolean);
    VAR
      Item@1000 : Record 27;
      Item2@1004 : Record 27;
      Item3@1005 : Record 27;
      ProductionOrder@1001 : Record 5405;
      Quantity@1002 : Decimal;
    BEGIN
      // Create Item with Tracking Code, Child Item setup, Create Released Production Order and Post Output.
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test. More than one Quantity.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      CreateAndCertifyProdBOMWithMultipleComponent(Item,Item2,Item3,ItemTrackingCodeSerialSpecific.Code,TRUE);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0,FALSE);  // Create New Lot No -True, Assign Tracking as Serial No and Tracking Quantity not required.
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LocationBlue.Code,Quantity);
      IF MultipleOutputLine THEN BEGIN
        CreateAndPostOutputJournal(ProductionOrder."No.",Quantity - 1,TRUE);  // Partial Qty,Tracking as True, Assign Tracking on Page Handler ItemTrackingPageHandler.
        CreateAndPostOutputJournal(ProductionOrder."No.",1,TRUE);  // Partial Qty, Tracking as True, Assign Tracking on Page Handler ItemTrackingPageHandler.
      END ELSE
        CreateAndPostOutputJournal(ProductionOrder."No.",Quantity,TRUE);  // Tracking as True, Assign Tracking on Page Handler ItemTrackingPageHandler.

      // Exercise: Change Status of Production Order Released to Finished.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // Verify: Verify Tracking line on Finished Production Order on Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,Quantity,FALSE);  // Assign Tracking as Serial No and Tracking Quantity.
      OpenItemTrackingLinesForProduction(ProductionOrder."No.");  // Open Item Tracking Lines and Verify on Page Handler PostedLinesPageHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,PostedLinesPageHandler,ConsumptionMissingConfirmHandler)]
    PROCEDURE ProductionOrderWithTrackingSerialNoLotNo@151();
    VAR
      Item@1000 : Record 27;
      Item2@1005 : Record 27;
      Item3@1004 : Record 27;
      ProductionOrder@1001 : Record 5405;
      Quantity@1002 : Decimal;
      ProductionOrderNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Item Tracking] [Production]
      // [SCENARIO] Create Firm Planned Production Order with serial tracked Item, assign tracking, release Production Order, then post Output, then finish Production Order, then verify item tracking lines are correct.

      // [GIVEN] Create Item with Tracking Code, Child Item Setup, Create Released Production Order with Tracking and Post Output.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);  // Using Random Value.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      CreateAndCertifyProdBOMWithMultipleComponent(Item,Item2,Item3,ItemTrackingCodeSerialSpecific.Code,TRUE);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0,FALSE);  // Create New Lot No -True, Assign Tracking as Serial No and Tracking Quantity not required.
      CreateAndRefreshFirmPlannedProductionOrder(ProductionOrder,Item."No.",LocationBlue.Code,Quantity);
      OpenItemTrackingLinesForProduction(ProductionOrder."No.");  // Assign Tracking on Page Handler ItemTrackingPageHandler.
      ProductionOrderNo :=
        LibraryManufacturing.ChangeStatusFirmPlanToReleased(
          ProductionOrder."No.",ProductionOrder.Status::"Firm Planned",ProductionOrder.Status::Released);
      CreateAndPostOutputJournal(ProductionOrderNo,Quantity,FALSE);  // Tracking As False.

      // [WHEN] Change Status of Production Order Released to Finished.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrderNo);

      // [THEN] Verify Tracking line on Finished Production Order on Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,Quantity,FALSE);  // Assign Tracking as Serial No and Tracking Quantity.
      OpenItemTrackingLinesForProduction(ProductionOrderNo);  // Open Item Tracking Lines and Verify on Page Handler PostedLinesPageHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedLinesPageHandler)]
    PROCEDURE ProductionOrderTrackingOnComponentSerialNoLotNo@40();
    BEGIN
      // [FEATURE] [Item Tracking] [Production]
      // [SCENARIO] Create Released Production Order with Tracking on Components, Post Consumption and Output, finish Produciton Order, verify Item Tracking lines.

      // Setup.
      Initialize;
      ProductionOrderWithConsumptionAndOutputSerialNoLotNo(TRUE,FALSE);  // Tracking On Component as True, and Tracking On Consumption as False.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedLinesPageHandler)]
    PROCEDURE ProductionOrderTrackingOnConsumptionSerialNoLotNo@163();
    BEGIN
      // [FEATURE] [Item Tracking] [Production]
      // [SCENARIO] Create Released Production Order, Post Consumption with Tracking and Output, finish Produciton Order, verify Item Tracking lines.

      // Setup.
      Initialize;
      ProductionOrderWithConsumptionAndOutputSerialNoLotNo(FALSE,TRUE);  // Tracking On Component as False, and Tracking On Consumption as True.
    END;

    LOCAL PROCEDURE ProductionOrderWithConsumptionAndOutputSerialNoLotNo@122(TrackingOnComponent@1006 : Boolean;TrackingOnConsumption@1005 : Boolean);
    VAR
      Item@1000 : Record 27;
      Item2@1002 : Record 27;
      Item3@1003 : Record 27;
      ProductionOrder@1001 : Record 5405;
      ItemJournalLine@1007 : Record 83;
      Quantity@1004 : Decimal;
    BEGIN
      // Create Item with Tracking Code, Child Item Setup, Create Released Production Order with Tracking, Post Output and Consumption with Tracking.
      Quantity := LibraryRandom.RandInt(10);  // Using Random Value.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      CreateAndCertifyProdBOMWithMultipleComponent(Item,Item2,Item3,ItemTrackingCodeLotSpecific.Code,TRUE);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::None,0,FALSE);  // Create New Lot No -True and Tracking Quantity not required.
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item2."No.",LocationBlue.Code,Quantity,0,FALSE,AssignTracking::LotNo);
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item3."No.",LocationBlue.Code,Quantity,0,FALSE,AssignTracking::SerialNo);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0,FALSE);  // Create New Lot No -True, Assign Tracking as Serial No and Tracking Quantity not required.
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LocationBlue.Code,Quantity);
      OpenItemTrackingLinesForProduction(ProductionOrder."No.");  // Assign Tracking on Page Handler ItemTrackingPageHandler.

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::None,0,FALSE);  // Create New Lot No -True, Assign Tracking as None and Tracking Quantity not required.
      IF TrackingOnComponent THEN BEGIN
        OpenItemTrackingLinesForProdOrderComponent(ProductionOrder.Status,ProductionOrder."No.",Item2."No.");  // Assign Tracking on Page Handler ItemTrackingPageHandler.
        OpenItemTrackingLinesForProdOrderComponent(ProductionOrder.Status,ProductionOrder."No.",Item3."No.");  // Assign Tracking on Page Handler ItemTrackingPageHandler.
      END;
      CreateAndPostConsumptionJournal(ProductionOrder."No.",TrackingOnConsumption);
      CreateAndPostOutputJournal(ProductionOrder."No.",Quantity,FALSE);  // Tracking as False.

      // Exercise: Change Status of Production Order Released to Finished.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // Verify: Verify Tracking line on Finished Production Order and Production Order Component on Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,Quantity,FALSE);  // Assign Tracking as Serial No and Tracking Quantity.
      OpenItemTrackingLinesForProduction(ProductionOrder."No.");  // Open Item Tracking Lines and Verify on Page Handler PostedLinesPageHandler.
      VerifyTrackingOnProdOrderComponent(ProductionOrder."No.",Item3."No.");
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::LotNo,Quantity,FALSE);  // Assign Tracking as Lot No and Tracking Quantity.
      VerifyTrackingOnProdOrderComponent(ProductionOrder."No.",Item2."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedLinesPageHandler)]
    PROCEDURE ProductionOrderWithWhseShipmentConsumptionAndOutputSerialNoLotNo@191();
    VAR
      Item@1000 : Record 27;
      Item2@1002 : Record 27;
      Item3@1003 : Record 27;
      ProductionOrder@1001 : Record 5405;
      WarehouseActivityLine@1008 : Record 5767;
      WarehouseActivityHeader@1009 : Record 5766;
      ItemJournalLine@1005 : Record 83;
      Quantity@1004 : Decimal;
    BEGIN
      // [FEATURE] [Item Tracking] [Production]
      // [SCENARIO] Verify Tracking line after: create Released Production Order, create Warehouse Pick from it, Post Output and Consumption with Tracking, finish Production Order.

      // [GIVEN] Create Item with Tracking Code, Child Item Setup, Create Released Production Order, Create Warehouse Pick from Production Order, Post Output and Consumption with Tracking.
      Initialize;
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test. More than one Quantity.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      CreateAndCertifyProdBOMWithMultipleComponent(Item,Item2,Item3,ItemTrackingCodeLotSpecific.Code,TRUE);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::None,0,FALSE);  // Create New Lot No -True, Assign Tracking as None and Tracking Quantity not required.
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item2."No.",LocationGreen.Code,Quantity,0,FALSE,AssignTracking::LotNo);
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item3."No.",LocationGreen.Code,Quantity,0,FALSE,AssignTracking::SerialNo);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0,FALSE);  // Create New Lot No -True, Assign Tracking as Serial No and Tracking Quantity not required.
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LocationGreen.Code,Quantity);
      LibraryWarehouse.CreateWhsePickFromProduction(ProductionOrder);
      FindWarehouseActivityHeader(
        WarehouseActivityHeader,ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption");
      UpdateQtyToHandleOnWarehouseActivityLine(
        WarehouseActivityHeader,ProductionOrder."No.",WarehouseActivityLine."Source Document"::"Prod. Consumption",Quantity - 1);
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
      CreateAndPostOutputJournal(ProductionOrder."No.",Quantity,TRUE);  // Tracking as True, Assign Tracking on Page Handler ItemTrackingPageHandler.

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,0,FALSE);  // Assign Tracking as None and Tracking Quantity not required.
      CreateAndPostConsumptionJournal(ProductionOrder."No.",TRUE);  // Tracking as True, Assign Tracking on Page Handler ItemTrackingPageHandler.

      // [WHEN] Change Status of Production Order Released to Finished.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      // [THEN] Verify Tracking line on Finished Production Order and Production Order Component on Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,Quantity,FALSE);  // Assign Tracking as Serial No and Tracking Quantity.
      OpenItemTrackingLinesForProduction(ProductionOrder."No.");  // Open Item Tracking Lines and Verify on Page Handler PostedLinesPageHandler.
      VerifyTrackingOnProdOrderComponent(ProductionOrder."No.",Item3."No.");
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::LotNo,Quantity,FALSE);  // Assign Tracking as Lot No and Tracking Quantity.
      VerifyTrackingOnProdOrderComponent(ProductionOrder."No.",Item2."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE WhsePickFromTransferOrderSerialNo@178();
    VAR
      Item@1000 : Record 27;
      TransferHeader@1010 : Record 5740;
      TransferLine@1011 : Record 5741;
      WarehouseShipmentLine@1002 : Record 7321;
      ItemJournalLine@1003 : Record 83;
      Quantity@1001 : Decimal;
    BEGIN
      // Setup: Create Item with Tracking Code, Create and Post Item Journal and Create Transfer Order.
      Initialize;
      Quantity := LibraryRandom.RandInt(10);  // Using Random Value.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationGreen.Code,Quantity,0,FALSE,AssignTracking::SerialNo);
      CreateAndReleaseTransferOrder(TransferHeader,TransferLine,LocationGreen.Code,LocationBlue.Code,Item."No.",Quantity);

      // Exercise: Create Warehouse Shipment from Transfer Order.
      LibraryWarehouse.CreateWhseShipmentFromTO(TransferHeader);

      // Verify: Verify Warehouse Shipment line.
      SelectWarehouseShipmentLine(
        WarehouseShipmentLine,TransferHeader."No.",WarehouseShipmentLine."Source Document"::"Outbound Transfer");
      WarehouseShipmentLine.TESTFIELD("Item No.",Item."No.");
      WarehouseShipmentLine.TESTFIELD(Quantity,TransferLine.Quantity);
      WarehouseShipmentLine.TESTFIELD("Location Code",LocationGreen.Code);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,SalesListPageHandler,SynchronizeItemTrackingConfirmHandler,PostedLinesPageHandler)]
    PROCEDURE PurchaseOrderWithDropShipmentSerialNoLotNo@87();
    VAR
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      Item@1000 : Record 27;
      PurchaseHeader@1005 : Record 38;
    BEGIN
      // Setup: Create Item with Tracking Code, Create Sales Order with Purchasing Code, Create Purchase Order and Drop Shipment.
      Initialize;
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",'',LibraryRandom.RandInt(10));
      UpdatePurchasingCodeOnSalesLine(SalesLine);
      DocumentNo := SalesHeader."No.";  // Assign Global Variable for page handler.

      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      UpdateSellToCustomerOnPurchaseHeader(PurchaseHeader,SalesHeader."Sell-to Customer No.");
      LibraryPurchase.GetDropShipment(PurchaseHeader);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,SalesLine.Quantity,FALSE);  // Create New Lot No -True, Assign Tracking as Serial No and Tracking Quantity.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Assign Tracking line on page handler ItemTrackingPageHandler.
      SalesHeader.FIND;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Exercise: Post Purchase Order.
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",TRUE,TRUE);

      // Verify: Verify Serial and Lot No in Posted Sales Invoice and Purchase Invoice.
      VerifyTrackingOnPostedSalesInvoice(SalesHeader."No.",FALSE);
      VerifyTrackingOnPostedPurchaseInvoice(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedLinesPageHandler)]
    PROCEDURE PurchaseReturnSerialNoLotNo@75();
    VAR
      PurchaseHeader@1002 : Record 38;
      WarehouseReceiptHeader@1003 : Record 7316;
      WarehouseActivityLine@1004 : Record 5767;
      Item@1001 : Record 27;
      WarehouseShipmentHeader@1008 : Record 7320;
      ReturnShipmentHeader@1007 : Record 6650;
      ItemLedgerEntry@1010 : Record 32;
      PurchRcptHeader@1012 : Record 120;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with Tracking Code, Create and Post Purchase Order with Tracking, Post Warehouse Receipt.
      Initialize;
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test. More than one Quantity.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0,FALSE);  // Create New Lot No -True, Assign Tracking as Serial No and Tracking Quantity not required.
      CreateAndReleasePurchaseOrderWithTracking(PurchaseHeader,Item."No.",LocationGreen.Code,Quantity,1);  // No. of Lines value required.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      FindWhseReceiptHeaderForPurchase(WarehouseReceiptHeader,PurchaseHeader."No.");
      PostWhseReceiptAndRegisterWarehouseActivity(
        WarehouseReceiptHeader,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order");

      // Exercise: Post Purchase Order.
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",FALSE,TRUE);

      // Verify: Verify Tracking line on Posted Purchase Receipt Line.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,Quantity,FALSE);
      VerifyTrackingOnPostedPurchaseReceipt(PurchaseHeader."No.");

      // Create Purchase Return Order with Tracking, Post Warehouse Shipment.
      FindPurchRcptHeader(PurchRcptHeader,PurchaseHeader."No.");
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,0,FALSE);  // Assign Global variable for Page Handler.
      CreateAndReleasePurchaseReturnOrder(PurchaseHeader,Item."No.",LocationGreen.Code,Quantity / 2,1);  // Partial Quantity, No. of Lines value required.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Assign Tracking on Page HandlerItemTrackingPageHandler.
      LibraryWarehouse.CreateWhseShipmentFromPurchaseReturnOrder(PurchaseHeader);
      CreatePickFromWarehouseShipment(
        WarehouseShipmentHeader,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Return Order");
      RegisterWarehouseActivityAndPostWhseShipment(
        WarehouseShipmentHeader,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Return Order");

      // Exercise: Post Purchase Return Order.
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",FALSE,TRUE);

      // Verify: Verify Serial and Lot No in Item Ledger Entry.
      FindReturnShipmentHeader(ReturnShipmentHeader,PurchaseHeader."No.");
      VerifySerialAndLotNoOnItemLedgerEntry(
        Item."No.",ItemLedgerEntry."Document Type"::"Purchase Return Shipment",ReturnShipmentHeader."No.",
        ItemLedgerEntry."Document Type"::"Purchase Receipt",PurchRcptHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedLinesPageHandler)]
    PROCEDURE SalesReturnSerialNoLotNo@114();
    VAR
      SalesHeader@1002 : Record 36;
      WarehouseReceiptHeader@1003 : Record 7316;
      WarehouseActivityLine@1004 : Record 5767;
      SalesLine@1006 : Record 37;
      Item@1001 : Record 27;
      ItemLedgerEntry@1010 : Record 32;
      SalesShipmentLine@1007 : Record 111;
      ReturnReceiptHeader@1013 : Record 6660;
      WarehouseShipmentHeader@1008 : Record 7320;
      ItemJournalLine@1005 : Record 83;
      Quantity@1000 : Decimal;
    BEGIN
      // Setup: Create Item with Tracking Code, Create and Post Sales Order with Tracking, Post Warehouse Shipment.
      Initialize;
      Quantity := 2 * LibraryRandom.RandInt(10);  // Value required for Test. More than one Quantity.
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::None,0,FALSE);  // Create New Lot No -True, Assign Tracking as None and Tracking Quantity not required.
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationGreen.Code,Quantity,0,FALSE,AssignTracking::SerialNo);

      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationGreen.Code,Quantity);
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingPageHandler.
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      CreatePickFromWarehouseShipment(
        WarehouseShipmentHeader,SalesHeader."No.",WarehouseActivityLine."Source Document"::"Sales Order");
      RegisterWarehouseActivityAndPostWhseShipment(
        WarehouseShipmentHeader,SalesHeader."No.",WarehouseActivityLine."Source Document"::"Sales Order");

      // Exercise: Post Sales Order.
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",FALSE,TRUE);

      // Verify: Verify Tracking line on Posted Sales Shipment.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,SalesLine.Quantity,FALSE);
      SelectSalesShipmentLine(SalesShipmentLine,SalesHeader."No.");
      SalesShipmentLine.ShowItemTrackingLines;  // Verify Item Tracking line on Page handler PostedLinesPageHandler.
      DocumentNo := SalesShipmentLine."Document No.";  // Assign Global variable for Page Handler.

      // Create and Post Sales Return Order with Tracking, Post Warehouse Receipt and Assign Global variable for Page Handler.
      CreateAndReleaseSalesReturnOrder(SalesHeader,SalesLine,Item."No.",LocationGreen.Code,1);  // Partial Quantity required for Test.
      SetGlobalValue(Item."No.",FALSE,TRUE,TRUE,AssignTracking::None,0,FALSE);  // Partial -True, Verify Qty To Handle -True and Tracking Quantity not required.
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler.
      LibraryWarehouse.CreateWhseReceiptFromSalesReturnOrder(SalesHeader);
      FindWhseReceiptHeaderForSalesReturn(WarehouseReceiptHeader,SalesHeader."No.");
      PostWhseReceiptAndRegisterWarehouseActivity(
        WarehouseReceiptHeader,SalesHeader."No.",WarehouseActivityLine."Source Document"::"Sales Return Order");

      // Exercise: Post Sales Return Order.
      PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",FALSE,TRUE);

      // Verify: Verify Serial and Lot No in Item Ledger Entry.
      FindReturnReceiptHeader(ReturnReceiptHeader,SalesHeader."No.");
      VerifySerialAndLotNoOnItemLedgerEntry(
        Item."No.",ItemLedgerEntry."Document Type"::"Sales Return Receipt",ReturnReceiptHeader."No.",
        ItemLedgerEntry."Document Type"::"Sales Shipment",SalesShipmentLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,PostedLinesPageHandler)]
    PROCEDURE PurchaseTrackingInboundSerialNo@104();
    VAR
      PurchaseHeader@1009 : Record 38;
      Item@1004 : Record 27;
      ItemTrackingCode@1010 : Record 6502;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Setup: Create Item with Tracking Code for SN Purchase Inbound Tracking, Create Purchase Order.
      Initialize;
      CreateItemTrackingCode(ItemTrackingCode,ItemTrackingCode.FIELDNO("SN Purchase Inbound Tracking"),TRUE);
      CreateItem(Item,ItemTrackingCode.Code,Item."Costing Method"::FIFO);
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10),1);  // No. of Lines value required.
      SelectPurchaseLine(PurchaseLine,PurchaseHeader."No.");

      // Exercise: Post Purchase Order without Tracking.
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Error message.
      Assert.ExpectedError(STRSUBSTNO(SerialNumberRequiredErr,Item."No."));

      // Exercise: Assign Tracking and Post Purchase Order. Global variable for Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,PurchaseLine.Quantity,FALSE);  // Assign Tracking as Serial No and Tracking Quantity.
      PurchaseLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingPageHandler.
      PurchaseHeader.FIND;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Tracking and No of Line on Posted Purchase Invoive.
      VerifyTrackingOnPostedPurchaseInvoice(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,PostedLinesPageHandler)]
    PROCEDURE PurchaseTrackingInboundAndOutboundSerialNo@187();
    BEGIN
      // Setup.
      Initialize;
      PurchaseDocumentWithTrackingInboundAndOutboundSerialNo(TRUE);  // SN Purchase Inbound Tracking as True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,PostedLinesPageHandler)]
    PROCEDURE PurchaseTrackingOutboundSerialNo@196();
    BEGIN
      // Setup.
      Initialize;
      PurchaseDocumentWithTrackingInboundAndOutboundSerialNo(FALSE);  // SN Purchase Inbound Tracking as False.
    END;

    LOCAL PROCEDURE PurchaseDocumentWithTrackingInboundAndOutboundSerialNo@144(SNPurchaseInboundTracking@1000 : Boolean);
    VAR
      PurchaseHeader@1009 : Record 38;
      Item@1004 : Record 27;
      ItemTrackingCode@1010 : Record 6502;
      PurchaseLine@1003 : Record 39;
    BEGIN
      // Create Item with Tracking Code for SN Purchase Outbound Tracking or SN Purchase Inbound Tracking", Create and Post Purchase Order, Create Return Order.
      CreateItemTrackingCode(ItemTrackingCode,ItemTrackingCode.FIELDNO("SN Purchase Outbound Tracking"),TRUE);
      IF SNPurchaseInboundTracking THEN
        UpdateItemTrackingCode(ItemTrackingCode,ItemTrackingCode.FIELDNO("SN Purchase Inbound Tracking"),TRUE);
      CreateItem(Item,ItemTrackingCode.Code,Item."Costing Method"::FIFO);
      IF  NOT SNPurchaseInboundTracking THEN BEGIN
        CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10),1);  // No. of Lines value required.
        LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      END;
      CreateAndReleasePurchaseReturnOrder(PurchaseHeader,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10),1);  // No. of Lines value required.
      SelectPurchaseLine(PurchaseLine,PurchaseHeader."No.");

      // Exercise: Post Purchase Return Order without Tracking.
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Error message.
      Assert.ExpectedError(STRSUBSTNO(SerialNumberRequiredErr,Item."No."));

      // Exercise: Assign Tracking and Post Purchase Return Order. Global variable for Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,PurchaseLine.Quantity,FALSE);  // Assign Tracking as Serial No and Tracking Quantity not required.
      PurchaseLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingPageHandler.
      PurchaseHeader.FIND;
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Verify: Verify Tracking and No of Line on Posted Return Shipment.
      VerifyTrackingOnPostedReturnShipment(PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,PostedLinesPageHandler)]
    PROCEDURE SalesTrackingOutboundSerialNo@202();
    VAR
      SalesHeader@1009 : Record 36;
      SalesLine@1005 : Record 37;
      Item@1004 : Record 27;
      ItemTrackingCode@1010 : Record 6502;
    BEGIN
      // Setup: Create Item with Tracking Code for SN Sales Outbound Tracking,Create Sales Order.
      Initialize;
      CreateItemTrackingCode(ItemTrackingCode,ItemTrackingCode.FIELDNO("SN Sales Outbound Tracking"),TRUE);
      CreateItem(Item,ItemTrackingCode.Code,Item."Costing Method"::FIFO);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10));

      // Exercise: Post Sales Order without Tracking.
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Error message.
      Assert.ExpectedError(STRSUBSTNO(SerialNumberRequiredErr,Item."No."));

      // Exercise: Assign Tracking and Post Sales Order. Global variable for Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,SalesLine.Quantity,FALSE);  // Assign Tracking as Serial No and Tracking Quantity not required.
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingPageHandler.
      SalesHeader.FIND;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Tracking and No of Line on Posted Sales Invoice.
      VerifyTrackingOnPostedSalesInvoice(SalesHeader."No.",FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,PostedLinesPageHandler)]
    PROCEDURE SalesTrackingInboundAndOutboundSerialNo@209();
    BEGIN
      // Setup.
      Initialize;
      SalesDocumentWithTrackingInboundAndOutboundSerialNo(TRUE);  // SN Sales Outbound Tracking as True;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,PostedLinesPageHandler)]
    PROCEDURE SalesTrackingInboundSerialNo@216();
    BEGIN
      // Setup.
      Initialize;
      SalesDocumentWithTrackingInboundAndOutboundSerialNo(FALSE);  // SN Sales Outbound Tracking as False;
    END;

    LOCAL PROCEDURE SalesDocumentWithTrackingInboundAndOutboundSerialNo@149(SNSalesOutboundTracking@1000 : Boolean);
    VAR
      SalesHeader@1009 : Record 36;
      SalesLine@1005 : Record 37;
      Item@1004 : Record 27;
      ItemTrackingCode@1010 : Record 6502;
    BEGIN
      // Create Item with Tracking Code for SN Sales Outbound Tracking or SN Sales Inbound Tracking, Create and Post Sales Order, Create Sales Return Order.
      CreateItemTrackingCode(ItemTrackingCode,ItemTrackingCode.FIELDNO("SN Sales Inbound Tracking"),TRUE);
      IF SNSalesOutboundTracking THEN
        UpdateItemTrackingCode(ItemTrackingCode,ItemTrackingCode.FIELDNO("SN Sales Outbound Tracking"),TRUE);
      CreateItem(Item,ItemTrackingCode.Code,Item."Costing Method"::FIFO);

      IF NOT SNSalesOutboundTracking THEN BEGIN
        CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10));
        LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);
      END;
      CreateAndReleaseSalesReturnOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10));

      // Exercise: Post Sales Return Order without Tracking.
      ASSERTERROR LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Error message.
      Assert.ExpectedError(STRSUBSTNO(SerialNumberRequiredErr,Item."No."));

      // Exercise: Assign Tracking and Post Sales Return Order. Global variable for Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,SalesLine.Quantity,FALSE);  // Assign Tracking as Serial and Tracking Quantity not required.
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingPageHandler.
      SalesHeader.FIND;
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // Verify: Verify Tracking and No of Line on Posted Return Receipt.
      VerifyTrackingOnPostedReturnReceipt(SalesHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE PositiveAdjmtTrackingInboundSerialNo@109();
    VAR
      ItemTrackingCode@1000 : Record 6502;
      ItemJournalLine@1001 : Record 83;
    BEGIN
      // Setup.
      Initialize;
      PositiveAndNegativeAdjmtTrackingSerialNo(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemTrackingCode.FIELDNO("SN Pos. Adjmt. Inb. Tracking"),1);  // 1 for Sign Factor as Positive.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE PositiveAdjmtTrackingOutboundSerialNo@160();
    VAR
      ItemTrackingCode@1000 : Record 6502;
      ItemJournalLine@1001 : Record 83;
    BEGIN
      // Setup.
      Initialize;
      PositiveAndNegativeAdjmtTrackingSerialNo(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemTrackingCode.FIELDNO("SN Pos. Adjmt. Outb. Tracking"),-1);  // -1 for Sign Factor as Negative.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE NegativeAdjmtTrackingInboundSerialNo@171();
    VAR
      ItemTrackingCode@1000 : Record 6502;
      ItemJournalLine@1001 : Record 83;
    BEGIN
      // Setup.
      Initialize;
      PositiveAndNegativeAdjmtTrackingSerialNo(
        ItemJournalLine."Entry Type"::"Negative Adjmt.",ItemTrackingCode.FIELDNO("SN Neg. Adjmt. Inb. Tracking"),-1);  // -1 for Sign Factor as Negative.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE NegativeAdjmtTrackingOutboundSerialNo@177();
    VAR
      ItemTrackingCode@1000 : Record 6502;
      ItemJournalLine@1001 : Record 83;
    BEGIN
      // Setup.
      Initialize;
      PositiveAndNegativeAdjmtTrackingSerialNo(
        ItemJournalLine."Entry Type"::"Negative Adjmt.",ItemTrackingCode.FIELDNO("SN Neg. Adjmt. Outb. Tracking"),1);  // 1 for Sign Factor as Positive.
    END;

    LOCAL PROCEDURE PositiveAndNegativeAdjmtTrackingSerialNo@110(EntryType@1004 : Option;FieldNo@1002 : Integer;SignFactor@1005 : Integer);
    VAR
      Item@1001 : Record 27;
      ItemTrackingCode@1000 : Record 6502;
      Quantity@1006 : Decimal;
    BEGIN
      // Create Item with Tracking Code for SN Positive/Negative adjustment Inbound/Outbound Tracking, Create Item Journal Line.
      Quantity := LibraryRandom.RandInt(10);
      CreateItemTrackingCode(ItemTrackingCode,FieldNo,TRUE);
      CreateItem(Item,ItemTrackingCode.Code,Item."Costing Method"::FIFO);
      CreateItemJournaLine(EntryType,Item."No.",LocationBlue.Code,SignFactor * Quantity,0,FALSE);
      COMMIT;  // Commit required for Test.

      // Exercise: Post Item Journal Line without Tracking.
      ASSERTERROR LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // Verify: Verify Error message.
      Assert.ExpectedError(STRSUBSTNO(SerialNumberRequiredErr,Item."No."));

      // Exercise: Assign Tracking and Post Item journal line.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0,FALSE);  // Assign Tracking as SerialNo and Tracking Quantity not required.
      AssignTrackingOnItemJournalLines(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);  // Assign Item Tracking Line on Page Handler ItemTrackingPageHandler.
      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);

      // Verify: Verify Serial No and Number of line on Item Ledger Entry.
      VerifySerialNoOnItemLedgerEntry(Item."No.",Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,PostedLinesPageHandler)]
    PROCEDURE PurchaseWithWarehouseTrackingSerialNo@205();
    VAR
      Item@1001 : Record 27;
      ItemTrackingCode@1000 : Record 6502;
      WarehouseSetup@1002 : Record 5769;
      PurchaseHeader@1004 : Record 38;
      WarehouseReceiptHeader@1005 : Record 7316;
      WarehouseReceiptLine@1006 : Record 7317;
      WarehouseActivityLine@1007 : Record 5767;
    BEGIN
      // Setup: Create Item with Tracking Code for SN Specific Tracking and SN Warehouse Tracking. Create Purchase Order and Create Warehouse Receipt from Purchase Order.
      Initialize;
      WarehouseSetup.GET;
      UpdatePostingPolicyOnWarehouseSetup(
        WarehouseSetup."Receipt Posting Policy"::"Stop and show the first posting error",
        WarehouseSetup."Shipment Posting Policy"::"Stop and show the first posting error");
      CreateItemTrackingCode(ItemTrackingCode,ItemTrackingCode.FIELDNO("SN Specific Tracking"),TRUE);
      UpdateItemTrackingCode(ItemTrackingCode,ItemTrackingCode.FIELDNO("SN Warehouse Tracking"),TRUE);
      CreateItem(Item,ItemTrackingCode.Code,Item."Costing Method"::FIFO);

      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationGreen.Code,LibraryRandom.RandInt(10),1);  // No. of Lines value required.
      LibraryWarehouse.CreateWhseReceiptFromPO(PurchaseHeader);
      SelectWarehouseReceiptLine(WarehouseReceiptLine,PurchaseHeader."No.",WarehouseReceiptLine."Source Document"::"Purchase Order");
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");

      // Exercise: Post Warehouse Receipt without Tracking.
      ASSERTERROR  LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);

      // Verify: Verify Error message.
      Assert.ExpectedError(STRSUBSTNO(SerialNumberRequiredErr,Item."No."));

      // Exercise: Assign Tracking on Warehouse Receipt Line, Post Warehouse Receipt and Register Warehouse Activity. Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0,FALSE);  // Assign Tracking as SerialNo and Tracking Quantity not required.
      WarehouseReceiptLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingPageHandler.
      PostWhseReceiptAndRegisterWarehouseActivity(
        WarehouseReceiptHeader,PurchaseHeader."No.",WarehouseActivityLine."Source Document"::"Purchase Order");

      // Verify: Verify Tracking line on Posted Purchase Receipt.Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,WarehouseReceiptLine.Quantity,FALSE);  // Assign Tracking as SerialNo and Tracking Quantity not required.
      VerifyTrackingOnPostedPurchaseReceipt(PurchaseHeader."No.");

      // Tear Down.
      UpdatePostingPolicyOnWarehouseSetup(WarehouseSetup."Receipt Posting Policy",WarehouseSetup."Shipment Posting Policy");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE TransferOrderWithTransferTrackingSerialNoError@132();
    VAR
      Item@1001 : Record 27;
      ItemTrackingCode@1000 : Record 6502;
      TransferHeader@1012 : Record 5740;
      TransferLine@1013 : Record 5741;
      ItemJournalLine@1002 : Record 83;
    BEGIN
      // Setup: Create Item with Tracking Code for SN Transfer Tracking, Create Transfer Order.
      Initialize;
      CreateItemTrackingCode(ItemTrackingCode,ItemTrackingCode.FIELDNO("SN Transfer Tracking"),TRUE);
      CreateItem(Item,ItemTrackingCode.Code,Item."Costing Method"::FIFO);
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,LibraryRandom.RandInt(100),0,FALSE,
        AssignTracking::SerialNo);
      CreateAndReleaseTransferOrder(
        TransferHeader,TransferLine,LocationBlue.Code,LocationGreen.Code,Item."No.",LibraryRandom.RandInt(10));

      // Exercise: Create Warehouse Shipment from Transfer Order.
      ASSERTERROR LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);

      // Verify: Verify Error message.
      Assert.ExpectedError(STRSUBSTNO(SerialNumberRequiredErr,Item."No."));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedLinesWarrantyDatePageHandler)]
    PROCEDURE SalesOrderWithWarrantyDateFormulaAndSerialNo@150();
    VAR
      Item@1001 : Record 27;
      ItemJournalLine@1002 : Record 83;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      DateFormulaVariable@1005 : DateFormula;
    BEGIN
      // Setup: Create Item with Tracking Code for SN Specific Tracking with Warranty Date Formula, Create and Post Item Journal. Create and Post Sales Order.
      Initialize;
      EVALUATE(DateFormulaVariable,'<1M>');
      UpdateItemTrackingCode(
        ItemTrackingCodeSerialSpecific,ItemTrackingCodeSerialSpecific.FIELDNO("Warranty Date Formula"),DateFormulaVariable);
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10) + 10,0,FALSE,
        AssignTracking::SerialNo);

      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10));
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingPageHandler.

      // Exercise: Post Sales Order with Tracking.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // Verify: Verify Tracking Entries and Warranty Date on Posted Sales Shipment on Page Handler PostedLinesWarrantyDatePageHandler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,SalesLine.Quantity,FALSE);
      VerifyTrackingOnPostedSalesShipment(SalesHeader."No.",SalesLine.Quantity);

      // Tear Down.
      UpdateItemTrackingCode(ItemTrackingCodeSerialSpecific,ItemTrackingCodeSerialSpecific.FIELDNO("Warranty Date Formula"),'');
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE SalesOrderWithWarrantyDateRequiredAndSerialNoError@143();
    VAR
      Item@1001 : Record 27;
      ItemJournalLine@1002 : Record 83;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
    BEGIN
      // Setup: Create Item with Tracking Code for SN Specific Tracking with "Man. Warranty Date Entry Reqd.", Create and Post Item Journal. Create and Post Sales Order.
      Initialize;
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10) + 10,0,FALSE,
        AssignTracking::SerialNo);

      UpdateItemTrackingCode(
        ItemTrackingCodeSerialSpecific,ItemTrackingCodeSerialSpecific.FIELDNO("Man. Warranty Date Entry Reqd."),TRUE);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10));
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingPageHandler.

      // Exercise: Post Sales Order with Tracking.
      ASSERTERROR  LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // Verify: Verify Error message.
      Assert.ExpectedError(WarrantyDateErr);

      // Tear Down.
      UpdateItemTrackingCode(
        ItemTrackingCodeSerialSpecific,ItemTrackingCodeSerialSpecific.FIELDNO("Man. Warranty Date Entry Reqd."),FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,PostedLinesWarrantyDatePageHandler)]
    PROCEDURE SalesOrderWithWarrantyDateRequiredAndSerialNo@135();
    VAR
      Item@1001 : Record 27;
      ItemJournalLine@1002 : Record 83;
      SalesHeader@1003 : Record 36;
      SalesLine@1004 : Record 37;
      ReservationEntry@1005 : Record 337;
    BEGIN
      // Setup: Create Item with Tracking Code for SN Specific Tracking with "Man. Warranty Date Entry Reqd.", Create and Post Item Journal. Create and Post Sales Order.
      Initialize;
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10) + 10,0,FALSE,
        AssignTracking::SerialNo);
      UpdateItemTrackingCode(
        ItemTrackingCodeSerialSpecific,ItemTrackingCodeSerialSpecific.FIELDNO("Man. Warranty Date Entry Reqd."),TRUE);

      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10));
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler.
      UpdateWarrantyDateOnReservationEntry(ReservationEntry,Item."No.",DATABASE::"Sales Line",SalesHeader."No.");

      // Exercise: Post Sales Order with Tracking.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // Verify: Verify Tracking Entries and Warranty Date on Posted Sales Shipment on Page Handler PostedLinesWarrantyDatePageHandler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,SalesLine.Quantity,FALSE);
      VerifyTrackingOnPostedSalesShipment(SalesHeader."No.",SalesLine.Quantity);

      // Tear Down.
      UpdateItemTrackingCode(
        ItemTrackingCodeSerialSpecific,ItemTrackingCodeSerialSpecific.FIELDNO("Man. Warranty Date Entry Reqd."),FALSE);
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,StrMenuHandler,ItemTrackingPageHandler)]
    PROCEDURE ReserveLotNoOnPurchaseOrderFromTransferOrderPostingError@128();
    BEGIN
      // Setup.
      Initialize;
      ReserveLotAndSerialNoOnPurchaseOrderFromTransferOrderWithPosting(ItemTrackingCodeLotSpecific.Code,AssignTracking::LotNo);  // Tracking Code for Lot No,Assign Tracking as Lot No.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,StrMenuHandler,ItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE ReserveSerialNoOnPurchaseOrderFromTransferOrderPostingError@172();
    BEGIN
      // Setup.
      Initialize;
      ReserveLotAndSerialNoOnPurchaseOrderFromTransferOrderWithPosting(ItemTrackingCodeSerialSpecific.Code,AssignTracking::SerialNo);  // Tracking Code for Serial No,Assign Tracking as Serial No.
    END;

    LOCAL PROCEDURE ReserveLotAndSerialNoOnPurchaseOrderFromTransferOrderWithPosting@168(ItemTrackingCode@1002 : Code[10];AssignTrackingValue@1000 : Option);
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1006 : Record 38;
      TransferHeader@1007 : Record 5740;
      TransferLine@1008 : Record 5741;
      PurchaseLine@1009 : Record 39;
    BEGIN
      // Create Item with Tracking Code for Lot / Serial Specific, Create Purchase Order and Transfer Order, Reserve from Purchase Order.
      CreateItem(Item,ItemTrackingCode,Item."Costing Method"::FIFO);

      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTrackingValue,0,FALSE);  // Assign Tracking and Tracking Quantity not required.
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10) + 10,1);  // No. of Lines value required.
      CreateAndReleaseTransferOrder(
        TransferHeader,TransferLine,LocationBlue.Code,LocationGreen.Code,Item."No.",LibraryRandom.RandInt(10));

      // Exercise: Reserve Transfer to Purchase.
      TransferLine.ShowReservation;  // Reservation on Page Handler ReservationPageHandler.

      // Verify : Verify Reserved Quantity on Purchase Line.
      SelectPurchaseLine(PurchaseLine,PurchaseHeader."No.");
      PurchaseLine.CALCFIELDS("Reserved Quantity");
      PurchaseLine.TESTFIELD("Reserved Quantity",TransferLine.Quantity);

      // Exercise: Assign Tracking on Purchase line, Post Purchase and Transfer Order.
      PurchaseLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingPageHandler.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      ASSERTERROR LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);

      // Verify: Verify Error message.
      IF AssignTrackingValue = AssignTracking::LotNo THEN
        Assert.ExpectedError(STRSUBSTNO(LotNumberRequiredErr,Item."No."))
      ELSE
        Assert.ExpectedError(STRSUBSTNO(SerialNumberRequiredErr,Item."No."));
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,StrMenuHandler,ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ReserveLotNoOnPurchaseOrderFromTransferOrder@127();
    BEGIN
      // Setup.
      Initialize;
      ReserveLotAndSerialNoOnPurchaseOrderFromTransferOrder(ItemTrackingCodeLotSpecific.Code,AssignTracking::LotNo);  // Tracking Code for Lot No,Assign Tracking as Lot No.
    END;

    [Test]
    [HandlerFunctions(ReservationPageHandler,StrMenuHandler,ItemTrackingPageQtyToHandleHandler,ItemTrackingSummaryPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE ReserveSerialNoOnPurchaseOrderFromTransferOrder@198();
    BEGIN
      // Setup.
      Initialize;
      ReserveLotAndSerialNoOnPurchaseOrderFromTransferOrder(ItemTrackingCodeSerialSpecific.Code,AssignTracking::SerialNo);  // Tracking Code for Serial No,Assign Tracking as Serial No.
    END;

    LOCAL PROCEDURE ReserveLotAndSerialNoOnPurchaseOrderFromTransferOrder@197(ItemTrackingCode@1002 : Code[10];AssignTrackingValue@1000 : Option);
    VAR
      Item@1001 : Record 27;
      PurchaseHeader@1006 : Record 38;
      TransferHeader@1007 : Record 5740;
      TransferLine@1008 : Record 5741;
      Direction@1011 : 'Outbound,Inbound';
    BEGIN
      // Setup: Create Item with Tracking Code for Lot / Serial Specific, Create Purchase Order and Transfer Order, Reserve from Purchase Order.
      CreateItem(Item,ItemTrackingCode,Item."Costing Method"::FIFO);

      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTrackingValue,0,FALSE);  // Assign Tracking and Tracking Quantity not required.
      CreateAndReleasePurchaseOrder(PurchaseHeader,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10) + 10,1);  // No. of Lines value required.
      CreateAndReleaseTransferOrder(
        TransferHeader,TransferLine,LocationBlue.Code,LocationGreen.Code,Item."No.",LibraryRandom.RandInt(10));

      TransferLine.ShowReservation;  // Reservation on Page Handler ReservationPageHandler.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Assign Tracking on Page Handler ItemTrackingPageHandler for Lot No and ItemTrackingPageQtyToHandleHandler for Serial No.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,0,FALSE);  // Assign Tracking as NONE.
      TransferLine.OpenItemTrackingLines(Direction::Outbound);  // Assign Ship Tracking on Page Handler ItemTrackingPageHandler for Lot No and ItemTrackingPageQtyToHandleHandler for Serial No.

      // Exercise: Post -Ship Transfer Order with Tracking.
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);

      // Verify: Verify Receipt Tracking Entries on Transfer Order.
      SetGlobalValue(Item."No.",FALSE,TRUE,FALSE,AssignTracking::None,TransferLine.Quantity,FALSE);  // Tracking Quantity;
      TransferLine.OpenItemTrackingLines(Direction::Inbound);  // Verify Receipt Tracking on Page Handler ItemTrackingPageHandler for Lot No and ItemTrackingPageQtyToHandleHandler for Serial No.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingProductionPageHandler,ItemTrackingListPageHandler,ReservationPageHandler,ItemTrackingSummaryPageHandler,AvailabilityWarningsConfirmHandler)]
    PROCEDURE ReserveLotNoOnProdOrderFromSalesOrderPartialOutputPostingError@125();
    BEGIN
      // Setup.
      Initialize;
      ReserveLotAndSerialNoOnProdOrderFromSalesOrderPartialOutputPosting(ItemTrackingCodeLotSpecific.Code,AssignTracking::LotNo);  // Tracking Code for Lot No,Assign Tracking as Lot No.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingProductionSerialNoPageHandler,ItemTrackingListPageHandler,ReservationPageHandler,ItemTrackingSummaryPageHandler,AvailabilityWarningsConfirmHandler,QuantityToCreatePageHandler)]
    PROCEDURE ReserveSerialNoOnProdOrderFromSalesOrderPartialOutputPostingError@199();
    BEGIN
      // Setup.
      Initialize;
      ReserveLotAndSerialNoOnProdOrderFromSalesOrderPartialOutputPosting(ItemTrackingCodeSerialSpecific.Code,AssignTracking::SerialNo);  // Tracking Code for Serial No,Assign Tracking as Serial No.
    END;

    LOCAL PROCEDURE ReserveLotAndSerialNoOnProdOrderFromSalesOrderPartialOutputPosting@195(ItemTrackingCode@1005 : Code[10];AssignTrackingValue@1003 : Option);
    VAR
      Item@1001 : Record 27;
      Item2@1010 : Record 27;
      ItemJournalLine@1002 : Record 83;
      SalesLine@1004 : Record 37;
      ProductionOrder@1011 : Record 5405;
      Quantity@1000 : Decimal;
    BEGIN
      // Create Item with Tracking Code for Lot / Serial Specific Tracking, Create Sales and Production Order, Reserve Sales.
      Quantity := LibraryRandom.RandInt(10) + 20;  // Large Value required.
      CreateSalesProductionSetup(Item,Item2,SalesLine,ProductionOrder,Quantity,LocationBlue.Code,ItemTrackingCode,AssignTrackingValue);

      OpenItemTrackingLinesForProdOrderComponent(ProductionOrder.Status::Released,ProductionOrder."No.",Item2."No.");  // Assign Item Tracking Line on Page Handler ItemTrackingProductionPageHandler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTrackingValue,0,FALSE);  // Assign Tracking.
      OpenItemTrackingLinesForProduction(ProductionOrder."No.");  // Assign Tracking on Page Handler ItemTrackingProductionPageHandler.
      DocumentNo := ProductionOrder."No.";  // Assign Global Variable.
      SetGlobalValue(Item."No.",FALSE,FALSE,TRUE,AssignTracking::None,SalesLine.Quantity ,FALSE);  // Partial -True and Tracking Quantity.

      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingProductionPageHandler.
      SalesLine.ShowReservation;  // Reserve current line -Production Order on Page Handler ReservationPageHandler.

      // Verify: Verify Reserved Quantity on Sales line.
      SalesLine.CALCFIELDS("Reserved Quantity");
      IF AssignTrackingValue = AssignTracking::LotNo THEN
        SalesLine.TESTFIELD("Reserved Quantity",SalesLine.Quantity)
      ELSE
        SalesLine.TESTFIELD("Reserved Quantity",1);  // Value requried for Specific Serial No.

      // Exercise: Create Output Journal and Update Output Quantity.
      CreateOutputJournalWithExlpodeRouting(ProductionOrder."No.");
      UpdateOutputQuantityOnItemJournalLine(
        ItemJournalLine,OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name,Quantity / 2);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingProductionPageHandler,ItemTrackingListPageHandler,ReservationPageHandler,ItemTrackingSummaryPageHandler,AvailabilityWarningsConfirmHandler)]
    PROCEDURE ReserveLotNoOnProdOrderFromSalesOrderAndSalesWithPartialTrackingPostingError@119();
    BEGIN
      // [FEATURE] [Item Tracking] [Sales]
      // [SCENARIO] Verify Error message when trying to ship Sales Order with Partial Lot specific Tracking, after create Sales and Production Order, Reserve Sales, Post Output and Consumption.

      // Setup.
      Initialize;
      ReserveLotNoOnProdOrderFromSalesOrder(TRUE);  // Post Sales Order as True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingProductionPageHandler,ItemTrackingListPageHandler,ReservationPageHandler,ItemTrackingSummaryPageHandler,ItemLedgerEntriesPageHandler,AvailabilityWarningsConfirmHandler)]
    PROCEDURE ReserveLotNoOnProdOrderFromSalesOrderReservedQuantity@105();
    BEGIN
      // [FEATURE] [Item Tracking] [Sales]
      // [SCENARIO] Verify Reservation on ILE after Create Sales and Production Order, Reserve Sales, Post Output and Consumption, finish Production Order.

      // Setup.
      Initialize;
      ReserveLotNoOnProdOrderFromSalesOrder(FALSE);  // Post Sales Order as False.
    END;

    LOCAL PROCEDURE ReserveLotNoOnProdOrderFromSalesOrder@208(PostSalesOrder@1000 : Boolean);
    VAR
      Item@1001 : Record 27;
      Item2@1010 : Record 27;
      SalesLine@1004 : Record 37;
      ProductionOrder@1011 : Record 5405;
      ReservationEntries@1015 : TestPage 497;
      Quantity@1005 : Decimal;
    BEGIN
      // Setup: Create Item with Tracking Code for Lot Specific Tracking, Create Sales and Production Order, Reserve Sales,Post Output and Consumption, finish Production Order.
      Quantity := LibraryRandom.RandInt(10) + 20;  // Large Value required.
      CreateSalesProductionSetup(
        Item,Item2,SalesLine,ProductionOrder,Quantity,LocationBlue.Code,ItemTrackingCodeLotSpecific.Code,AssignTracking::LotNo);

      OpenItemTrackingLinesForProdOrderComponent(ProductionOrder.Status::Released,ProductionOrder."No.",Item2."No.");  // Assign Item Tracking Line on Page Handler ItemTrackingProductionPageHandler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::LotNo,0,FALSE);  // Assign Tracking as LotNo.
      OpenItemTrackingLinesForProduction(ProductionOrder."No.");  // Assign Tracking on Page Handler ItemTrackingProductionPageHandler.
      DocumentNo := ProductionOrder."No.";  // Assign Global Variable.
      SetGlobalValue(Item."No.",FALSE,FALSE,TRUE,AssignTracking::None,SalesLine.Quantity - 1,FALSE);  // Partial as True and Tracking Quantity.

      SalesLine.OpenItemTrackingLines;  // Assign Partial Tracking on Page Handler ItemTrackingProductionPageHandler.
      SalesLine.ShowReservation;  // Reserve current line-Production Order on Page Handler ReservationPageHandler.

      SetGlobalValue(Item."No.",FALSE,FALSE,TRUE,AssignTracking::None,SalesLine.Quantity,FALSE);  // Partial as True and Tracking Quantity.
      CreateOutputJournalWithExlpodeRouting(ProductionOrder."No.");
      AssignTrackingOnItemJournalLines(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
      UpdateQuantityAndPostOutputJournal(SalesLine.Quantity,FALSE);  // Partial Quantity.

      CreateAndPostConsumptionJournal(ProductionOrder."No.",FALSE);
      OpenItemTrackingLinesForProduction(ProductionOrder."No.");  // Assign Partial Tracking on Page Handler ItemTrackingProductionPageHandler.
      LibraryManufacturing.ChangeStatusReleasedToFinished(ProductionOrder."No.");

      IF PostSalesOrder THEN BEGIN
        // Exercise: Post Sales Order with Partial Tracking.
        ASSERTERROR PostSalesDocument(SalesLine."Document Type",SalesLine."Document No.",TRUE,FALSE);

        // Verify: Verify Error message.
        Assert.ExpectedError(STRSUBSTNO(QtyToHandleErr,Item."No."));
      END ELSE BEGIN
        // Exercise: Drill down Reserved Quantity.
        ReservationEntries.TRAP;
        OpenReservedQuantityOnSalesOrder(SalesLine."Document No.");

        // Verify: Verify Reservation on Item Ledger Entry on Page Handler ItemLedgerEntriesPageHandler.
        ReservationEntries.ReservedFrom.LOOKUP;
      END;
    END;

    [Test]
    [HandlerFunctions(AvailabilityItemTrackingPageHandler)]
    PROCEDURE PurchaseOrderWithItemTrackingLotNoAvailability@189();
    VAR
      Item@1002 : Record 27;
      ItemTrackingCode@1003 : Record 6502;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify Availability Lot No. field must be Yes on the Item Tracking Lines page after creating a Purchase Order with Lot No.

      // 1. Setup: Create Item with Lot No., Create a Purchase Order and assign Lot No.
      Initialize;
      CreateItemTrackingCode(ItemTrackingCode,ItemTrackingCode.FIELDNO("Lot Specific Tracking"),TRUE);
      CreateItem(Item,ItemTrackingCode.Code,Item."Costing Method"::FIFO);

      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,Item."No.",'',1 + LibraryRandom.RandInt(10));  // Random Integer value greater than 1 required for test.
      SelectPurchaseLine(PurchaseLine,PurchaseHeader."No.");
      ItemTrackingAction := ItemTrackingAction::AvailabilityLotNo;

      // 2. Exercise.
      PurchaseLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify Availability Lot No. field must be Yes on the Item Tracking Lines page. Verification done in the 'ItemTrackingPageHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(AvailabilityItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE PurchaseOrderWithItemTrackingSerialNoAvailability@188();
    VAR
      Item@1003 : Record 27;
      ItemTrackingCode@1002 : Record 6502;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Verify warning message when assigning wrong Serial No.

      // 1. Setup: Create Item with Serial No., create Purchase Order with Item Tracking.
      Initialize;
      CreateItemTrackingCode(ItemTrackingCode,ItemTrackingCode.FIELDNO("SN Specific Tracking"),TRUE);
      CreateItem(Item,ItemTrackingCode.Code,Item."Costing Method"::FIFO);
      CreateNewLotNo := TRUE;  // Assign to global variable.
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,Item."No.",'',1 + LibraryRandom.RandInt(10));  // Random Integer value greater than 1 required for test.
      SelectPurchaseLine(PurchaseLine,PurchaseHeader."No.");
      ItemTrackingAction := ItemTrackingAction::AvailabilitySerialNo;

      // 2. Exercise.
      PurchaseLine.OpenItemTrackingLines;  // Assign Item Tracking on page handler.

      // 3. Verify: Verify Availability Serial No. field must be Yes on the Item Tracking Lines page. Verification done in the 'ItemTrackingPageHandler' page handler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingProductionSerialNoPageHandler,ItemTrackingListPageHandler,ReservationPageHandler,ItemTrackingSummaryPageHandler,AvailabilityWarningsConfirmHandler,QuantityToCreatePageHandler)]
    PROCEDURE ReserveSerialNoOnProdOrderFromSalesOrderAndSalesWithPartialTrackingPostingError@210();
    BEGIN
      // Setup.
      Initialize;
      ReserveSerialNoOnProdOrderFromSalesOrder(TRUE);  // Partial Tracking as True.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingProductionSerialNoPageHandler,ItemTrackingListPageHandler,ReservationPageHandler,ItemTrackingSummaryPageHandler,AvailabilityWarningsConfirmHandler,QuantityToCreatePageHandler,PostedLinesPageHandler)]
    PROCEDURE ReserveSerialNoOnProdOrderFromSalesOrderAndSalesWithTrackingPosting@203();
    BEGIN
      // Setup.
      Initialize;
      ReserveSerialNoOnProdOrderFromSalesOrder(FALSE);  // Partial Tracking as False.
    END;

    LOCAL PROCEDURE ReserveSerialNoOnProdOrderFromSalesOrder@174(PartialTracking@1002 : Boolean);
    VAR
      Item@1001 : Record 27;
      Item2@1010 : Record 27;
      SalesLine@1004 : Record 37;
      ProductionOrder@1011 : Record 5405;
      Quantity@1005 : Decimal;
    BEGIN
      // Create Item with Tracking Code for Lot Specific Tracking, Create Sales and Production Order, Reserve Sales,Post Output and Consumption.
      Quantity := LibraryRandom.RandInt(10) + 20;  // Large Value required.
      CreateSalesProductionSetup(
        Item,Item2,SalesLine,ProductionOrder,Quantity,LocationBlue.Code,ItemTrackingCodeSerialSpecific.Code,AssignTracking::SerialNo);

      OpenItemTrackingLinesForProdOrderComponent(ProductionOrder.Status::Released,ProductionOrder."No.",Item2."No.");  // Assign Item Tracking Line on Page Handler ItemTrackingProductionSerialNoPageHandler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0,FALSE);  // Assign Tracking as LotNo.
      OpenItemTrackingLinesForProduction(ProductionOrder."No.");  // Assign Tracking on Page Handler ItemTrackingProductionSerialNoPageHandler.
      DocumentNo := ProductionOrder."No.";  // Assign Global Variable.
      SetGlobalValue(Item."No.",FALSE,FALSE,TRUE,AssignTracking::None,SalesLine.Quantity - 1,FALSE);  // Partial as True and Tracking Quantity.

      SalesLine.OpenItemTrackingLines;  // Assign Partial Tracking on Page Handler ItemTrackingProductionSerialNoPageHandler.
      SalesLine.ShowReservation;  // Reserve current line-Production Order on Page Handler ReservationPageHandler.

      SetGlobalValue(Item."No.",FALSE,TRUE,TRUE,AssignTracking::None,Quantity - SalesLine.Quantity,FALSE);  // Partial as True and Tracking Quantity.
      CreateOutputJournalWithExlpodeRouting(ProductionOrder."No.");
      AssignTrackingOnItemJournalLines(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
      UpdateQuantityAndPostOutputJournal(SalesLine.Quantity,FALSE);  // Partial Quantity.

      IF PartialTracking THEN BEGIN
        // Exercise: Post Sales Order with Partial Tracking.
        ASSERTERROR PostSalesDocument(SalesLine."Document Type",SalesLine."Document No.",TRUE,TRUE);

        // Verify: Verify Error message.
        Assert.ExpectedError(STRSUBSTNO(QtyToHandleErr,Item."No."));
      END ELSE BEGIN
        // Exercise:
        DeleteReservationEntry(Item."No.",DATABASE::"Sales Line",SalesLine."Document No.");  // Delete Tracking on Sales line.
        SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,0,FALSE);
        SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingProductionSerialNoPageHandler.
        PostSalesDocument(SalesLine."Document Type",SalesLine."Document No.",TRUE,TRUE);

        // Verify: Verify Tracking line on Post Sales Invoice.
        SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,SalesLine.Quantity,FALSE);  // Assign Tracking as Serial No and Tracking Quantity.
        VerifyTrackingOnPostedSalesInvoice(SalesLine."Document No.",FALSE);  // Verify on Page handler PostedLinesPageHandler.
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ReservationPageHandler,ItemTrackingSummaryPageHandler,QuantityToCreatePageHandler,ItemLedgerEntriesPositiveAdjmtPageHandler,PostedLinesPageHandler)]
    PROCEDURE ReserveSerialNoOnItemLedgerEntryFromSalesOrder@221();
    VAR
      Item@1006 : Record 27;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
      ItemJournalLine@1001 : Record 83;
    BEGIN
      // Setup: Create Item, create and Post Item Journal, Create Sales order and Reserve with Item Ledger Entry.
      Initialize;
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,0,FALSE);

      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10) + 10,0,FALSE,
        AssignTracking::SerialNo);
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10));

      // Exercise: Reserve Sales to Item Ledger Entry.
      SalesLine.ShowReservation;  // Reserve Sales to Item Ledger Entry on Page Handler ReservationPageHandler.

      // Verify: Verify Reservation on Item Ledger Entry on Page Handler ItemLedgerEntriesPositiveAdjmtPageHandler.
      VerifyReservedQuantity(SalesLine);

      // Exercise: Assign Item Tracking on Sales Line and Post.
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingPageHandler.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);

      // Verify: Verify Tracking line on Post Sales Shipment.
      VerifyTrackingOnPostedSalesShipment(SalesHeader."No.",SalesLine.Quantity);  // Verify on Page Handler PostedLinesPageHandler
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,ReservationAvailablePageHandler)]
    PROCEDURE ReserveOnTransferOrderFromProdOrderComponentAvailableLotNo@220();
    BEGIN
      // Setup.
      Initialize;
      AvailableReserveLotAndSerialNoOnTransferOrderFromProdOrderComponent(ItemTrackingCodeLotSpecific.Code,AssignTracking::LotNo);  // Tracking Code for Lot No,Assign Tracking as Lot No.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,QuantityToCreatePageHandler,ReservationAvailablePageHandler)]
    PROCEDURE ReserveOnTransferOrderFromProdOrderComponentAvailableSerialNo@219();
    BEGIN
      // Setup.
      Initialize;
      AvailableReserveLotAndSerialNoOnTransferOrderFromProdOrderComponent(
        ItemTrackingCodeSerialSpecific.Code,AssignTracking::SerialNo);  // Tracking Code for Serial No,Assign Tracking as Serial No.
    END;

    LOCAL PROCEDURE AvailableReserveLotAndSerialNoOnTransferOrderFromProdOrderComponent@218(ItemTrackingCode@1019 : Code[10];AssignTrackingValue@1018 : Option);
    VAR
      Item@1006 : Record 27;
      Item2@1009 : Record 27;
      TransferHeader@1011 : Record 5740;
      TransferLine@1012 : Record 5741;
      ProductionOrder@1014 : Record 5405;
      ProdOrderComponent@1017 : Record 5407;
    BEGIN
      // Create Item, Create and Post Item Journal, Create Transfer Order and Production Order.
      CreateTransferOrderSetup(Item,Item2,TransferHeader,TransferLine,ItemTrackingCode,AssignTrackingValue);
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10) + 30);
      UpdateDueDateOnReleasedProductionOrder(ProductionOrder);

      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",Item2."No.");

      // Exercise and Verify: Reservation on Production Order Component.Verify Available Reservation line on Page Handler ReservationAvailablePageHandler.
      ProdOrderComponent.ShowReservation;  // Verify on Page Handler ReservationAvailablePageHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingProductionPageHandler,ItemTrackingSummaryPageHandler,ItemTrackingListPageHandler,ReservationPageHandler,AvailabilityWarningsAndReserveConfirmHandler)]
    PROCEDURE ReserveLotNoOnTransferOrderFromConsumption@217();
    BEGIN
      // Setup.
      Initialize;
      ReserveLotAndSerialNoOnTransferOrderFromConsumption(ItemTrackingCodeLotSpecific.Code,AssignTracking::LotNo);  // Tracking Code for Lot No,Assign Tracking as Lot No.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingProductionPageHandler,ItemTrackingSummaryPageHandler,QuantityToCreatePageHandler,ItemTrackingListPageHandler,ReservationPageHandler,NegativeAdjustmentConfirmHandler)]
    PROCEDURE ReserveSerialNoOnTransferOrderFromConsumption@214();
    BEGIN
      // Setup.
      Initialize;
      ReserveLotAndSerialNoOnTransferOrderFromConsumption(ItemTrackingCodeSerialSpecific.Code,AssignTracking::SerialNo);  // Tracking Code for Serial No,Assign Tracking as Serial No.
    END;

    LOCAL PROCEDURE ReserveLotAndSerialNoOnTransferOrderFromConsumption@212(ItemTrackingCode@1019 : Code[10];AssignTrackingValue@1018 : Option);
    VAR
      Item@1006 : Record 27;
      Item2@1009 : Record 27;
      TransferHeader@1011 : Record 5740;
      TransferLine@1012 : Record 5741;
      ProductionOrder@1014 : Record 5405;
      ProdOrderComponent@1017 : Record 5407;
    BEGIN
      // Create Item, Create and Post Item Journal, Create Transfer Order and Production Order.
      CreateTransferOrderSetup(Item,Item2,TransferHeader,TransferLine,ItemTrackingCode,AssignTrackingValue);
      CreateAndRefreshReleasedProductionOrder(ProductionOrder,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10) + 30);
      UpdateDueDateOnReleasedProductionOrder(ProductionOrder);

      DocumentNo := TransferHeader."No.";  // Assign Global Variable.
      SetGlobalValue(Item2."No.",FALSE,FALSE,TRUE,AssignTracking::None,ProductionOrder.Quantity,FALSE);  // Partial as True and Tracking Quantity.
      IF AssignTrackingValue = AssignTracking::LotNo THEN
        ItemTrackingAction := ItemTrackingAction::AvailabilityLotNo
      ELSE
        ItemTrackingAction := ItemTrackingAction::AvailabilitySerialNo;
      OpenItemTrackingLinesForProdOrderComponent(ProductionOrder.Status,ProductionOrder."No.",Item2."No.");
      FindProdOrderComponent(ProdOrderComponent,ProductionOrder.Status,ProductionOrder."No.",Item2."No.");

      // Exercise: Reserve Production Order Component to Transfer Order and Post Transfer Order.
      ProdOrderComponent.ShowReservation;  // Reservation on Page Handler ReservationPageHandler.
      LibraryWarehouse.PostTransferOrder(TransferHeader,FALSE,TRUE);

      // Verify: Verify Reserved Quantity on Production Order Component.
      VerifyReservedQuantityProdOrderComponent(ProdOrderComponent,TransferLine.Quantity,AssignTrackingValue);

      // Exercise: Calculate Consumption.
      LibraryInventory.ClearItemJournal(ConsumptionItemJournalTemplate,ConsumptionItemJournalBatch);
      LibraryManufacturing.CalculateConsumption(
        ProductionOrder."No.",ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);

      // Verify: Verify Tracking line on Consumption Item Journal.
      SetGlobalValue(Item2."No.",FALSE,TRUE,FALSE,AssignTracking::None,ProductionOrder.Quantity,FALSE);  // VerifyQtyToHandle as True.
      VerifyTrackingOnConsumptionItemJournal;  // Verify on Page Handler ItemTrackingProductionPageHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSerialNoPageHandler,QuantityToCreatePageHandler,TrackingAlreadyExistMessageHandler)]
    PROCEDURE PurchaseOrderWithSameSerialNo@238();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
    BEGIN
      // Setup: Create Item With Tracking Code Serial Specific, Create Purchase Order and assign Tracking.
      Initialize;
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0,FALSE);  // New Lot No -True,Assign Tracking as Serial No.
      CreateAndReleasePurchaseOrderWithTracking(PurchaseHeader,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10) + 10,1);  // Using Large random value for Quantity, No. of Lines value required.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,0,FALSE);  // Assign Tracking as None.
      ItemTrackingAction := ItemTrackingAction::AvailabilitySerialNo;  // Assign Global Variable for Page Handler.

      // Exercise: Change Serial No as duplicate on Page Handler.
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Change Identical Tracking on Page Handler ItemTrackingSerialNoPageHandler.

      // Verify: Verify Message on Message Handler on TrackingAlreadyExistMessageHandler
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSerialNoPageHandler,QuantityToCreatePageHandler,TrackingAlreadyExistMessageHandler,AvailabilityConfirmHandler)]
    PROCEDURE SalesOrderWithSameSerialNo@237();
    VAR
      Item@1002 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Setup: Create Item With Tracking Code Serial Specific, Create Sales Order and assign Tracking.
      Initialize;
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0,FALSE);  // New Lot No -True,Assign Tracking as Serial No.
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationGreen.Code,LibraryRandom.RandInt(10) + 10);  // Using Large random value for Quantity.
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingSerialNoPageHandler.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,0,FALSE);  // Assign Tracking as None.
      ItemTrackingAction := ItemTrackingAction::AvailabilitySerialNo;  // Assign Global Variable for Page Handler.

      // Exercise: Change Serial No as duplicate on Page Handler.
      SalesLine.OpenItemTrackingLines;  // Change Identical Tracking on Page Handler ItemTrackingSerialNoPageHandler.

      // Verify: Verify Message on Message Handler TrackingAlreadyExistMessageHandler.
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSerialNoPageHandler,QuantityToCreatePageHandler,PostedLinesPageHandler)]
    PROCEDURE PurchaseOrdersWithSameSerialNoOnInventoryPostingError@236();
    VAR
      Item@1002 : Record 27;
      PurchaseHeader@1000 : Record 38;
      PurchaseHeader2@1001 : Record 38;
      PurchaseLine@1005 : Record 39;
    BEGIN
      // Setup: Create Item With Tracking Code Serial Specific, Create Two Purchase Order and assign Tracking.
      Initialize;
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0,FALSE);  // New Lot No -True,Assign Tracking as Serial No.
      CreateAndReleasePurchaseOrderWithTracking(PurchaseHeader,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10) + 10,1);  // Using Large random value for Quantity, No. of Lines value required.
      CreateAndReleasePurchaseOrderWithTracking(PurchaseHeader2,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10) + 10,1);  // Using Large random value for Quantity, No. of Lines value required.

      DocumentNo := PurchaseHeader."No.";  // Assign Global Variable for Page Handler.
      SetGlobalValue(Item."No.",FALSE,FALSE,TRUE,AssignTracking::None,0,FALSE);  // Partial as True.
      AssignTrackingOnPurchaseLine(PurchaseHeader2."No.");  // Assign Change Identical Tracking as Previous Purchase Order Tracking on Page Handler ItemTrackingSerialNoPageHandler.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Exercise: Post Purchase Order with Identical Tracking.
      ASSERTERROR LibraryPurchase.PostPurchaseDocument(PurchaseHeader2,TRUE,TRUE);

      // Verify: Verify Error Message.
      Assert.ExpectedError(AlreadyOnInventoryErr);

      // Exercise: Delete Tracking,Assign Tracking and post Purchase Order.
      DeleteReservationEntry(Item."No.",DATABASE::"Purchase Line",PurchaseHeader2."No.");
      SelectPurchaseLine(PurchaseLine,PurchaseHeader2."No.");
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,PurchaseLine.Quantity,FALSE);  // New Lot No -True,Assign Tracking as Serial No and Tracking Quantity.
      AssignTrackingOnPurchaseLine(PurchaseHeader2."No.");
      PostPurchaseDocument(PurchaseHeader2."Document Type",PurchaseHeader2."No.",TRUE,TRUE);

      // Verify: Verify Tracking and No of Line on Posted Purchase Invoive.
      VerifyTrackingOnPostedPurchaseInvoice(PurchaseHeader2."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSerialNoPageHandler,QuantityToCreatePageHandler,AvailabilityWarningsConfirmHandler)]
    PROCEDURE SalesOrderWithoutSerialNoOnInventoryPostingError@235();
    VAR
      Item@1002 : Record 27;
      SalesHeader@1000 : Record 36;
      SalesLine@1001 : Record 37;
    BEGIN
      // Setup: Create Item With Tracking Code Serial Specific, Create Sales Order and assign Tracking.
      Initialize;
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);

      // Assign Global variable for Page Handler.
      SetGlobalValue(Item."No.",TRUE,FALSE,FALSE,AssignTracking::SerialNo,0,FALSE);  // New Lot No -True,Assign Tracking as Serial No.
      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10));
      SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler ItemTrackingSerialNoPageHandler.

      // Exercise: Post Sales Order.
      ASSERTERROR  PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,FALSE);

      // Verify: Verify Error Message.
      Assert.ExpectedError(STRSUBSTNO(VariantFullyAppliedErr,Item."No."));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler,CombinedShipmentsMessageHandler,PostedLinesPageHandler)]
    PROCEDURE PostedSalesInvForCombinedShipmentWithSerialNo@234();
    VAR
      Customer@1000 : Record 18;
      Item@1001 : Record 27;
      Item2@1008 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      ItemJournalLine@1004 : Record 83;
      SalesHeader2@1006 : Record 36;
      SalesLine2@1005 : Record 37;
      SalesShipmentHeader@1007 : Record 110;
      SalesInvoiceHeader@1009 : Record 112;
    BEGIN
      // Setup: Create Item With Tracking Code Serial Specific, Create Customer, Create two Sales Order and assign Tracking and Post with Ship option.
      Initialize;
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      CreateItem(Item2,ItemTrackingCodeSerialSpecific.Code,Item2."Costing Method"::FIFO);
      CreateCustomerWithCombineShipments(Customer);  // Create Customer require for Combine Shipments.
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10) + 10,0,FALSE,
        AssignTracking::SerialNo);  // Using Large random value for Quantity.
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item2."No.",LocationBlue.Code,LibraryRandom.RandInt(10) + 10,0,FALSE,
        AssignTracking::SerialNo);  // Using Large random value for Quantity.

      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,0,FALSE);
      CreateAndPostSalesOrderWithTracking(
        SalesHeader,SalesLine,Customer."No.",Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10));
      CreateAndPostSalesOrderWithTracking(
        SalesHeader2,SalesLine2,Customer."No.",Item2."No.",LocationBlue.Code,LibraryRandom.RandInt(10));

      // Exercise: Combine Sales Shipments and Post Invoice.
      SalesHeader2.SETRANGE("Sell-to Customer No.",Customer."No.");
      SalesShipmentHeader.SETRANGE("Sell-to Customer No.",Customer."No.");
      LibrarySales.CombineShipments(SalesHeader2,SalesShipmentHeader,WORKDATE,WORKDATE,FALSE,TRUE,FALSE,FALSE);

      // Verify: Verify Tracking line on Posted Sales Invoive Line.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,SalesLine.Quantity,FALSE);  // Tracking Quantity required.
      SalesInvoiceHeader.SETRANGE("Sell-to Customer No.",Customer."No.");
      SalesInvoiceHeader.FINDFIRST;

      VerifyTrackingOnSalesInvoiceLine(SalesInvoiceHeader."No.",Item."No.");
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,SalesLine2.Quantity,FALSE);  // Tracking Quantity required.
      VerifyTrackingOnSalesInvoiceLine(SalesInvoiceHeader."No.",Item2."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,CombinedReturnReceiptMessageHandler,PostedLinesPageHandler)]
    PROCEDURE PostedSalesCrMemoForCombinedReceiptWithSerialNo@175();
    VAR
      Customer@1000 : Record 18;
      Item@1001 : Record 27;
      Item2@1008 : Record 27;
      SalesHeader@1002 : Record 36;
      SalesLine@1003 : Record 37;
      SalesHeader2@1006 : Record 36;
      SalesLine2@1005 : Record 37;
      ReturnReceiptHeader@1007 : Record 6660;
      SalesCrMemoHeader@1009 : Record 114;
    BEGIN
      // Setup: Create Item With Tracking Code Serial Specific, Create Customer, Create two Sales Return Order and assign Tracking and Post with Receive option.
      Initialize;
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      CreateItem(Item2,ItemTrackingCodeSerialSpecific.Code,Item2."Costing Method"::FIFO);
      CreateCustomerWithCombineShipments(Customer);  // Create Customer require for Combine Return Receipt.

      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0,FALSE);
      CreateAndPostSalesReturnOrderWithTracking(
        SalesHeader,SalesLine,Customer."No.",Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10));
      CreateAndPostSalesReturnOrderWithTracking(
        SalesHeader2,SalesLine2,Customer."No.",Item2."No.",LocationBlue.Code,LibraryRandom.RandInt(10));

      // Exercise: Combine Sales Return Receipt and Post Invoice.
      SalesHeader2.SETRANGE("Sell-to Customer No.",Customer."No.");
      ReturnReceiptHeader.SETRANGE("Sell-to Customer No.",Customer."No.");
      LibrarySales.CombineReturnReceipts(SalesHeader2,ReturnReceiptHeader,WORKDATE,WORKDATE,FALSE,TRUE);

      // Verify: Verify Tracking line on Posted Sales Credit Memo Line.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,SalesLine.Quantity,FALSE);  // Tracking Quantity required.
      SalesCrMemoHeader.SETRANGE("Sell-to Customer No.",Customer."No.");
      SalesCrMemoHeader.FINDFIRST;

      VerifyTrackingOnSalesCrMemoLine(SalesCrMemoHeader."No.",Item."No.");
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,SalesLine2.Quantity,FALSE);  // Tracking Quantity required.
      VerifyTrackingOnSalesCrMemoLine(SalesCrMemoHeader."No.",Item2."No.");
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE VSTF307923_PostFractionOfSerialNo@250();
    VAR
      Item@1000 : Record 27;
      ItemJournalLine@1001 : Record 83;
      ReservationEntry@1002 : Record 337;
    BEGIN
      // Posting of fractional quantity of serial number
      Initialize;

      // SETUP: Create item with serial no. and post a fractional quantity
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
      AssignTracking := AssignTracking::SerialNo;  // Assign Global variable for Page Handler.
      CreateItemJournaLine(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",'',1,0,FALSE);
      AssignTrackingOnItemJournalLines(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);  // Assign Item Tracking Line on Page Handler.

      ItemJournalLine.SETRANGE("Item No.",Item."No.");
      ItemJournalLine.FINDLAST;
      ItemJournalLine.Quantity := 0.5;
      ItemJournalLine."Invoiced Quantity" := 0.5;
      ItemJournalLine."Quantity (Base)" := 0.5;
      ItemJournalLine."Invoiced Qty. (Base)" := 0.5;
      ItemJournalLine.MODIFY;

      ReservationEntry.SETRANGE("Item No.",Item."No.");
      ReservationEntry.FINDLAST;
      ReservationEntry.Quantity := ItemJournalLine.Quantity;
      ReservationEntry."Quantity (Base)" := ItemJournalLine."Quantity (Base)";
      ReservationEntry."Qty. to Handle (Base)" := ReservationEntry."Quantity (Base)";
      ReservationEntry."Qty. to Invoice (Base)" := ReservationEntry."Quantity (Base)";
      ReservationEntry.MODIFY;

      // EXERCISE: post the item journal line
      // VERIFY: catch the error message
      ASSERTERROR LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,SerialNumberPossibleValuesErr) > 0,'');
      CLEARLASTERROR;
      AssignTracking := AssignTracking::None;  // Assign Global variable for Page Handler.
    END;

    [Test]
    PROCEDURE VSTF307923_QtyToHandle@248();
    VAR
      TrackingSpecification@1000 : Record 336;
    BEGIN
      // Unit test - Posting of serial numbers in fractions should not be allowed.
      Initialize;

      // SETUP: Create a Tracking Specification record
      TrackingSpecification.INIT;
      TrackingSpecification."Serial No." :=
        LibraryUtility.GenerateRandomCode(TrackingSpecification.FIELDNO("Serial No."),DATABASE::"Tracking Specification");
      TrackingSpecification."Quantity (Base)" := 1;

      // EXERCISE: Validate the Quantity to Handle to a fraction
      // VERIFY: Catch the error message
      ASSERTERROR TrackingSpecification.VALIDATE("Qty. to Handle (Base)",0.5); // fractionalize Qty to Handle
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,SerialNumberPossibleValuesErr) > 0,'');
      CLEARLASTERROR;
    END;

    [Test]
    PROCEDURE VSTF307923_QtyToInvoice@249();
    VAR
      TrackingSpecification@1000 : Record 336;
    BEGIN
      // Unit test - Posting of serial numbers in fractions should not be allowed.

      Initialize;

      // SETUP: Create a Tracking Specification record
      TrackingSpecification.INIT;
      TrackingSpecification."Serial No." :=
        LibraryUtility.GenerateRandomCode(TrackingSpecification.FIELDNO("Serial No."),DATABASE::"Tracking Specification");
      TrackingSpecification."Quantity (Base)" := -1;
      TrackingSpecification."Qty. to Handle (Base)" := -1;

      // EXERCISE: Validate the Quantity to Invoice to a fraction
      // VERIFY: Catch the error message
      ASSERTERROR TrackingSpecification.VALIDATE("Qty. to Invoice (Base)",-0.5); // fractionalize Qty to Invoice
      Assert.IsTrue(STRPOS(GETLASTERRORTEXT,SerialNumberPossibleValuesErr) > 0,'');
      CLEARLASTERROR;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSerialNoPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE SalesOrderWithSerialItemTracking@252();
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      // Setup: Create Customer. Create Item. Create Item Journal Line with Serial Item Tracking.
      // Create and Ship the Sales Order with Serial Item Tracking.
      Initialize;
      InitSetupForUpdateItemTrackingLines(SalesLine,ItemTrackingCodeSerialSpecific.Code,FALSE,AssignTracking::SerialNo); // Using large random value.

      // Exercise: Update the Serial No on Item Tracking Lines.
      // Verify: Verify the error message when update the Serial No by ASSISTEDIT.
      UpdateSerialNo := TRUE;
      VerifyErrorMsgByUpdateItemTrackingLines(SalesLine);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE SalesOrderWithLotItemTracking@253();
    VAR
      SalesLine@1004 : Record 37;
    BEGIN
      // Setup: Create Customer. Create Item. Create multiple Item Journal Lines with Lot Item Tracking.
      // Create and Ship the Sales Order with Lot Item Tracking.
      Initialize;
      InitSetupForUpdateItemTrackingLines(SalesLine,ItemTrackingCodeLotSpecific.Code,TRUE,AssignTracking::LotNo);

      // Exercise: Update the Lot No on Item Tracking Lines.
      // Verify: Verify the error message when update the Lot No by ASSISTEDIT.
      UpdateLotNo := TRUE;
      VerifyErrorMsgByUpdateItemTrackingLines(SalesLine);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingSerialNoPageHandler,QuantityToCreatePageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE VSTF359616_ItemWithSerialNoAndMultipleUoM@255();
    VAR
      Item@1001 : Record 27;
      ItemJournalLine@1005 : Record 83;
      ItemUnitOfMeasure@1003 : Record 5404;
      ItemTrackingCodeSerialWMSSpecific@1007 : Record 6502;
      UnitOfMeasure@1004 : Record 204;
      Customer@1002 : Record 18;
      SalesHeader@1006 : Record 36;
      SalesLine@1000 : Record 37;
    BEGIN
      // Setup: Create Customer. Create Item with 2 unit of measures, PCS and BOX (3 PCS)  and SN tracking
      // Create and Ship the Sales Order with BOX

      Initialize;

      // Create item with PCS and BOX, Serial No. tracking
      CreateItemTrackingCode(
        ItemTrackingCodeSerialWMSSpecific,ItemTrackingCodeSerialWMSSpecific.FIELDNO("SN Specific Tracking"),TRUE);
      ItemTrackingCodeSerialWMSSpecific.VALIDATE("SN Warehouse Tracking" ,TRUE);
      ItemTrackingCodeSerialWMSSpecific.MODIFY;
      CreateItem(Item,ItemTrackingCodeSerialWMSSpecific.Code,Item."Costing Method"::FIFO);
      LibraryInventory.CreateUnitOfMeasureCode(UnitOfMeasure);
      LibraryInventory.CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",UnitOfMeasure.Code,3);

      // Post inventory with serial numbers in base UOM
      CreateAndPostItemJournalLine(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationSilver.Code,
        LibraryRandom.RandIntInRange(10,20),LibraryRandom.RandIntInRange(10,20),FALSE,AssignTracking::SerialNo);

      // Create and post sales order with 1 BOX
      LibrarySales.CreateCustomer(Customer);
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::Order,Item."No.",LocationSilver.Code,1,Customer."No.",TRUE);
      SalesLine.VALIDATE("Unit of Measure Code",UnitOfMeasure.Code);
      SalesLine.VALIDATE(Quantity,1);
      SalesLine.MODIFY;
      SalesLine.OpenItemTrackingLines;  // Assign Item Tracking on Page Handler.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler)]
    PROCEDURE PostingTrackedSalesReturnOrderWithBlankUnitCost@256();
    VAR
      Item@1007 : Record 27;
      SalesHeader@1005 : Record 36;
      SalesLine@1004 : Record 37;
      ItemLedgerEntry@1000 : Record 32;
    BEGIN
      // [FEATURE] [Sales Return Order] [Item Tracking]
      // [SCENARIO 375644] Posting Tracked Sales Return Order with zero Unit Cost should not fill "Cost Amount (Actual)" of Item Ledger Entry
      Initialize;

      // [GIVEN] Item with SN tracking
      CreateItem(Item,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);

      // [GIVEN] Tracked Sales Rerun Order for Item with Unit Cost = 0 and Unit Price = "X"
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::SerialNo,0,FALSE);
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",
        Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10),CreateCustomer,FALSE);
      SalesLine.VALIDATE("Unit Price",LibraryRandom.RandDec(10,2));
      SalesLine.MODIFY(TRUE);
      SalesLine.OpenItemTrackingLines;  // Assign Item Tracking on Page Handler.

      // [WHEN] Post Sales Return Order
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,TRUE);

      // [THEN] Item Ledger Entry is created where Cost Amount (Actual) = 0
      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Item No.",Item."No.");
        FINDFIRST;
        CALCFIELDS("Cost Amount (Actual)");
        TESTFIELD("Cost Amount (Actual)",0);
      END;
    END;

    [Test]
    PROCEDURE ItemLedgerEntryPageLongDocTypeFilter@257();
    VAR
      ItemLedgerEntries@1001 : TestPage 38;
    BEGIN
      // [FEATURE] [Item Ledger Entries] [Filter] [UT]
      // [SCENARIO 375688] It should be possible to set >250 symbols long filter on "Document Type" in Item Ledger Entries page
      ItemLedgerEntries.OPENEDIT;
      ItemLedgerEntries.FILTER.SETFILTER("Document Type",ItemLedgerEntryFilterTxt);
      Assert.AreEqual(
        FORMAT(ItemLedgerEntryFilterTxt),ItemLedgerEntries.FILTER.GETFILTER("Document Type"),ItemLedgerEntryFilteringErr);
    END;

    [Test]
    PROCEDURE CopyItemTrackingFromSalesShipmentLineToInvoiceLine@266();
    VAR
      FromSalesLine@1001 : Record 37;
      ToSalesLine@1002 : Record 37;
      ItemEntryRelation@1004 : Record 6507;
      ReservationEntry@1005 : Record 337;
      ItemTrackingManagement@1000 : Codeunit 6500;
      ItemNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Item Tracking] [UT]
      // [SCENARIO 379129] Item Tracking field in Reservation Entry for Sales Invoice Line should be filled with Lot Tracking option when Item Tracking is copied from another Sales Line.

      // [GIVEN] Source and destination Sales Lines.
      ItemNo := LibraryUtility.GenerateGUID;

      MockSalesLine(FromSalesLine,FromSalesLine."Document Type"::Order,ItemNo,'');
      MockSalesLine(ToSalesLine,ToSalesLine."Document Type"::Invoice,ItemNo,LibraryUtility.GenerateGUID);

      // [GIVEN] Item Entry Relation with "Lot No." and "Serial No." not empty.
      MockItemEntryRelation(ItemEntryRelation,DATABASE::"Sales Shipment Line",ToSalesLine."Shipment No.");

      // [GIVEN] Tracking Specification.
      MockTrackingSpecificationFromItemEntryRelation(ItemEntryRelation,ItemNo);

      // [WHEN] Call CopyHandledItemTrkgToInvLine procedure from Item Tracking Management.
      ItemTrackingManagement.CopyHandledItemTrkgToInvLine(FromSalesLine,ToSalesLine);

      // [THEN] "Item Tracking" option field in Reservation Entry created by the call of the procedure contains "Lot and Serial No." value.
      WITH ReservationEntry DO BEGIN
        FilterReservationEntryBySource(
          ReservationEntry,0,ToSalesLine."Document Type",ToSalesLine."Document No.",FORMAT(ToSalesLine."Line No."));
        FINDFIRST;
        TESTFIELD("Item Tracking","Item Tracking"::"Lot and Serial No.");
      END;
    END;

    [Test]
    PROCEDURE CopyItemTrackingFromPurchReturnLineToCrMemoLine@279();
    VAR
      FromPurchaseLine@1001 : Record 39;
      ToPurchaseLine@1002 : Record 39;
      ItemEntryRelation@1004 : Record 6507;
      ReservationEntry@1005 : Record 337;
      ItemTrackingManagement@1000 : Codeunit 6500;
      ItemNo@1003 : Code[20];
    BEGIN
      // [FEATURE] [Item Tracking] [UT]
      // [SCENARIO 379129] Item Tracking field in Reservation Entry for Purch. Cr. Memo Line should be filled with Lot Tracking option when Item Tracking is copied from another Purchase Line.

      // [GIVEN] Source and destination Purchase Lines.
      ItemNo := LibraryUtility.GenerateGUID;

      MockPurchaseLine(FromPurchaseLine,FromPurchaseLine."Document Type"::"Return Order",ItemNo,'');
      MockPurchaseLine(ToPurchaseLine,ToPurchaseLine."Document Type"::"Credit Memo",ItemNo,LibraryUtility.GenerateGUID);

      // [GIVEN] Item Entry Relation with "Lot No." and "Serial No." not empty.
      MockItemEntryRelation(ItemEntryRelation,DATABASE::"Return Shipment Line",ToPurchaseLine."Return Shipment No.");

      // [GIVEN] Tracking Specification.
      MockTrackingSpecificationFromItemEntryRelation(ItemEntryRelation,ItemNo);

      // [WHEN] Call CopyHandledItemTrkgToInvLine2 procedure from Item Tracking Management.
      ItemTrackingManagement.CopyHandledItemTrkgToInvLine2(FromPurchaseLine,ToPurchaseLine);

      // [THEN] "Item Tracking" option field in Reservation Entry created by the call of the procedure contains "Lot and Serial No." value.
      WITH ReservationEntry DO BEGIN
        FilterReservationEntryBySource(
          ReservationEntry,0,ToPurchaseLine."Document Type",ToPurchaseLine."Document No.",FORMAT(ToPurchaseLine."Line No."));
        FINDFIRST;
        TESTFIELD("Item Tracking","Item Tracking"::"Lot and Serial No.");
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,GetShipmentLinesPageHandler,DeleteLinesWithTrackingConfirmHandlerTrue)]
    PROCEDURE DeleteSalesInvoiceWithTrackedLines@258();
    VAR
      Customer@1003 : Record 18;
      Item@1002 : Record 27;
      ItemJournalLine@1001 : Record 83;
      SalesHeaderOrder@1000 : Record 36;
      SalesHeaderInvoice@1005 : Record 36;
      SalesLineOrder@1004 : Record 37;
      SalesLineInvoice@1006 : Record 37;
      ReservationEntry@1008 : Record 337;
      SalesInvoiceNo@1007 : Code[20];
    BEGIN
      // [FEATURE] [Item Tracking] [Sales Invoice]
      // [SCENARIO 379129] Sales Invoice can be deleted with all its lines and tracking which were created from the posted Sales Shipment with Lot Tracking.

      Initialize;
      LibrarySales.CreateCustomer(Customer);

      // [GIVEN] Item with Lot Tracking Code, posted positive Item Journal Line with Lot Item Tracking.
      CreateItem(Item,ItemTrackingCodeLotSpecific.Code,Item."Costing Method"::FIFO);
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,
        LibraryRandom.RandIntInRange(10,20),LibraryRandom.RandIntInRange(10,20),FALSE,AssignTracking::LotNo);

      // [GIVEN] Shipped Sales Order with Lot Item Tracking.
      CreateAndPostSalesOrderWithTracking(
        SalesHeaderOrder,SalesLineOrder,Customer."No.",Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10));

      // [GIVEN] Sales Invoice with lines copied from Sales Shipment by GetShipmentLines function.
      LibrarySales.CreateSalesHeader(SalesHeaderInvoice,SalesHeaderInvoice."Document Type"::Invoice,Customer."No.");
      SalesInvoiceNo := SalesHeaderInvoice."No.";
      SalesLineInvoice."Document Type" := SalesHeaderInvoice."Document Type";
      SalesLineInvoice."Document No." := SalesHeaderInvoice."No.";
      LibrarySales.GetShipmentLines(SalesLineInvoice);

      // [WHEN] Delete Sales Invoice Header.
      SalesHeaderInvoice.DELETE(TRUE);

      // [THEN] Sales Invoice is deleted successfully with all its lines.
      SalesHeaderInvoice.SETRANGE("Document Type",SalesHeaderInvoice."Document Type"::Invoice);
      SalesHeaderInvoice.SETRANGE("No.",SalesInvoiceNo);
      Assert.RecordIsEmpty(SalesHeaderInvoice);

      // [THEN] Item Tracking for Sales Invoice is deleted.
      WITH ReservationEntry DO BEGIN
        FilterReservationEntryBySource(
          ReservationEntry,DATABASE::"Sales Header",SalesHeaderInvoice."Document Type"::Invoice,SalesInvoiceNo,'');
        Assert.RecordIsEmpty(ReservationEntry);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ItemTrackingSummaryPageHandler,GetReturnShipmentLinesPageHandler,DeleteLinesWithTrackingConfirmHandlerTrue)]
    PROCEDURE DeletePurchCrMemoWithTrackedLines@263();
    VAR
      Vendor@1003 : Record 23;
      Item@1002 : Record 27;
      ItemJournalLine@1001 : Record 83;
      PurchaseHeaderReturnOrder@1000 : Record 38;
      PurchaseHeaderCreditMemo@1005 : Record 38;
      PurchaseLineReturnOrder@1004 : Record 39;
      PurchaseLineCreditMemo@1006 : Record 39;
      ReservationEntry@1008 : Record 337;
      PurchCreditMemoNo@1007 : Code[20];
    BEGIN
      // [FEATURE] [Item Tracking] [Purch. Credit Memo]
      // [SCENARIO 379129] Purch. Credit Memo can be deleted with all its lines and tracking which were created from the posted Return Shipment with Lot Tracking.

      Initialize;
      LibraryPurchase.CreateVendor(Vendor);

      // [GIVEN] Item with Lot Tracking Code, posted positive Item Journal Line with Lot Item Tracking.
      CreateItem(Item,ItemTrackingCodeLotSpecific.Code,Item."Costing Method"::FIFO);
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,
        LibraryRandom.RandIntInRange(10,20),LibraryRandom.RandIntInRange(10,20),FALSE,AssignTracking::LotNo);

      // [GIVEN] Shipped Purch. Return Order with Lot Item Tracking.
      CreateAndPostPurchReturnOrderWithTracking(
        PurchaseHeaderReturnOrder,PurchaseLineReturnOrder,Vendor."No.",Item."No.",LocationBlue.Code,LibraryRandom.RandInt(10));

      // [GIVEN] Purch. Credit Memo with lines copied from Return Shipment by GetReturnShipmentLines function.
      LibraryPurchase.CreatePurchHeader(PurchaseHeaderCreditMemo,PurchaseHeaderCreditMemo."Document Type"::"Credit Memo",Vendor."No.");
      PurchCreditMemoNo := PurchaseHeaderCreditMemo."No.";
      PurchaseLineCreditMemo."Document Type" := PurchaseHeaderCreditMemo."Document Type";
      PurchaseLineCreditMemo."Document No." := PurchaseHeaderCreditMemo."No.";
      GetReturnShipmentLines(PurchaseLineCreditMemo);

      // [WHEN] Delete Purch. Credit Memo Header.
      PurchaseHeaderCreditMemo.DELETE(TRUE);

      // [THEN] Purch. Credit Memo is deleted successfully with all its lines and tracking.
      PurchaseHeaderCreditMemo.SETRANGE("Document Type",PurchaseHeaderCreditMemo."Document Type"::"Credit Memo");
      PurchaseHeaderCreditMemo.SETRANGE("No.",PurchCreditMemoNo);
      Assert.RecordIsEmpty(PurchaseHeaderCreditMemo);

      // [THEN] Item Tracking for Purch. Credit Memo is deleted.
      WITH ReservationEntry DO BEGIN
        FilterReservationEntryBySource(
          ReservationEntry,DATABASE::"Purchase Header",PurchaseHeaderCreditMemo."Document Type"::"Credit Memo",PurchCreditMemoNo,'');
        Assert.RecordIsEmpty(ReservationEntry);
      END;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingAssignSerialPageHandler,QuantityToCreateOKPageHandler,SalesListDocPageHandler,SynchronizeItemTrackingConfirmHandler)]
    PROCEDURE PurchaseOrderWithDropShipmentSerialNo@77();
    VAR
      Item@1000 : Record 27;
      Purchasing@1004 : Record 5721;
      PurchaseHeader@1002 : Record 38;
      ItemTrackingCode@1003 : Record 6502;
      CustomerNo@1001 : Code[20];
    BEGIN
      // [SCENARIO 380496] Service Items generated are equipped with Serial Numbers when two Sales Orders are applied to the same Drop Shipment Purchase Order.
      Initialize;

      CreatePurchasingCode(Purchasing);
      CreateItemTrackingCode(ItemTrackingCode,ItemTrackingCode.FIELDNO("SN Specific Tracking"),TRUE);
      CustomerNo := CreateCustomer;

      // [GIVEN] Item with Tracking Code
      CreateItem(Item,ItemTrackingCode.Code,Item."Costing Method"::FIFO);

      // [GIVEN] Item registered as Service Item
      UpdateItemWithServiceItem(Item,CreateServiceItemGroup);

      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      UpdateSellToCustomerOnPurchaseHeader(PurchaseHeader,CustomerNo);

      // [GIVEN] 2 Sales Orders with Drop Shipment option
      // [GIVEN] Purchase Order is linked to 2 sales orders for the Item.
      CreateDropShippmentSalesOrderWithItemTracking(PurchaseHeader,Item."No.",Purchasing.Code);
      CreateDropShippmentSalesOrderWithItemTracking(PurchaseHeader,Item."No.",Purchasing.Code);

      // [WHEN] Post Purchase Order
      PostPurchaseDocument(PurchaseHeader."Document Type",PurchaseHeader."No.",TRUE,FALSE);

      // [THEN] Service Items generated have got Serial Numbers
      VerifyServiceItemSerialNoIsNotEmpty(Item."No.");
    END;

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      ClearGlobals;

      // Lazy Setup.
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;

      NoSeriesSetup;
      CreateLocationSetup;
      ItemTrackingCodeSetup;
      ItemJournalSetup;
      OutputJournalSetup;
      ConsumptionJournalSetup;

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE InitSetupForUpdateItemTrackingLines@254(VAR SalesLine@1000 : Record 37;ItemTrackingCode@1001 : Code[10];MultipleLines@1004 : Boolean;AssignTracking@1005 : Option);
    VAR
      Customer@1006 : Record 18;
      Item@1007 : Record 27;
      ItemJournalLine@1009 : Record 83;
      SalesHeader@1008 : Record 36;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      CreateItem(Item,ItemTrackingCode,Item."Costing Method"::FIFO);
      CreateAndPostItemJournalLine(ItemJournalLine."Entry Type"::"Positive Adjmt.",Item."No.",LocationBlue.Code,
        LibraryRandom.RandIntInRange(10,20),LibraryRandom.RandIntInRange(10,20),MultipleLines,AssignTracking); // Using large random value.
      CreateAndPostSalesOrderWithTracking(SalesHeader,SalesLine,Customer."No.",Item."No.",LocationBlue.Code,
        LibraryRandom.RandInt(10)); // Random value is small than the item inventory.
    END;

    LOCAL PROCEDURE ClearGlobals@50();
    BEGIN
      CLEAR(GlobalItemNo);
      CLEAR(CreateNewLotNo);
      CLEAR(VerifyQtyToHandle);
      CLEAR(AssignTracking);
      SignFactor := 1;  // Assign Sign Factor as Positive 1.
      CLEAR(Partial);
      CLEAR(TrackingQuantity);
      CLEAR(Description);
      CLEAR(Comment);
      CLEAR(CancelReservationCurrentLine);
      CLEAR(MessageCounter);
      CLEAR(DocumentNo);
      CLEAR(ItemTrackingAction);
      CLEAR(UpdateSerialNo);
      CLEAR(UpdateLotNo);
    END;

    LOCAL PROCEDURE NoSeriesSetup@31();
    VAR
      PurchasesPayablesSetup@1005 : Record 312;
      WarehouseSetup@1002 : Record 5769;
      SalesReceivablesSetup@1001 : Record 311;
    BEGIN
      PurchasesPayablesSetup.GET;
      PurchasesPayablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Receipt Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Return Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Return Shpt. Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.VALIDATE("Posted Credit Memo Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      PurchasesPayablesSetup.MODIFY(TRUE);

      SalesReceivablesSetup.GET;
      SalesReceivablesSetup.VALIDATE("Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Posted Invoice Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Posted Shipment Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Return Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Posted Return Receipt Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.VALIDATE("Posted Credit Memo Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      SalesReceivablesSetup.MODIFY(TRUE);

      LibraryWarehouse.NoSeriesSetup(WarehouseSetup);
    END;

    LOCAL PROCEDURE CreateLocationSetup@15();
    VAR
      WarehouseEmployee@1000 : Record 7301;
      Bin@1001 : Record 7354;
    BEGIN
      // Location -Blue.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationBlue);
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationBlue2);

      // Location -Green.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationGreen);
      LocationGreen.VALIDATE("Require Put-away",TRUE);
      LocationGreen.VALIDATE("Require Receive",TRUE);
      LocationGreen.VALIDATE("Require Pick",TRUE);
      LocationGreen.VALIDATE("Require Shipment",TRUE);
      LocationGreen.MODIFY(TRUE);

      // Location -Intransit.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationIntransit);
      LocationIntransit.VALIDATE("Use As In-Transit",TRUE);
      LocationIntransit.MODIFY(TRUE);

      // Location -Silver.
      LibraryWarehouse.CreateLocationWithInventoryPostingSetup(LocationSilver);
      LocationSilver.VALIDATE("Bin Mandatory",TRUE);
      LocationSilver.MODIFY(TRUE);
      LibraryWarehouse.CreateBin(Bin,LocationSilver.Code,LocationSilver.Code,'','');

      LibraryWarehouse.CreateWarehouseEmployee(WarehouseEmployee,LocationGreen.Code,FALSE);
    END;

    LOCAL PROCEDURE ItemTrackingCodeSetup@20();
    BEGIN
      CreateItemTrackingCode(ItemTrackingCodeSerialSpecific,ItemTrackingCodeSerialSpecific.FIELDNO("SN Specific Tracking"),TRUE);  // Tracking for SN Specific Tracking.
      CreateItemTrackingCode(ItemTrackingCodeLotSpecific,ItemTrackingCodeLotSpecific.FIELDNO("Lot Specific Tracking"),TRUE);  // Tracking for Lot Specific Tracking.
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@140(VAR ItemTrackingCode@1000 : Record 6502;FieldNo@1002 : Integer;Value@1001 : Boolean);
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,FALSE);
      UpdateItemTrackingCode(ItemTrackingCode,FieldNo,Value);
    END;

    LOCAL PROCEDURE ItemJournalSetup@5();
    BEGIN
      CLEAR(ItemJournalTemplate);
      ItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.VALIDATE("No. Series",LibraryUtility.GetGlobalNoSeriesCode);
      ItemJournalTemplate.MODIFY(TRUE);

      CLEAR(ItemJournalBatch);
      ItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type,ItemJournalTemplate.Name);
      ItemJournalBatch.VALIDATE("No. Series",'');
      ItemJournalBatch.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OutputJournalSetup@81();
    BEGIN
      CLEAR(OutputItemJournalTemplate);
      OutputItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(OutputItemJournalTemplate,OutputItemJournalTemplate.Type::Output);

      CLEAR(OutputItemJournalBatch);
      OutputItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(
        OutputItemJournalBatch,OutputItemJournalTemplate.Type,OutputItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE ConsumptionJournalSetup@138();
    BEGIN
      CLEAR(ConsumptionItemJournalTemplate);
      ConsumptionItemJournalTemplate.INIT;
      LibraryInventory.SelectItemJournalTemplateName(ConsumptionItemJournalTemplate,ConsumptionItemJournalTemplate.Type::Consumption);

      CLEAR(ConsumptionItemJournalBatch);
      ConsumptionItemJournalBatch.INIT;
      LibraryInventory.SelectItemJournalBatchName(
        ConsumptionItemJournalBatch,ConsumptionItemJournalTemplate.Type,ConsumptionItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE SetGlobalValue@36(ItemNo@1000 : Code[20];NewLotNo@1001 : Boolean;VerifyQtyToHandle2@1002 : Boolean;Partial2@1003 : Boolean;AssignTracking2@1008 : Option;TrackingQuantity2@1004 : Decimal;GlobalComments@1006 : Boolean);
    BEGIN
      GlobalItemNo := ItemNo;
      CreateNewLotNo := NewLotNo;
      VerifyQtyToHandle := VerifyQtyToHandle2;
      Partial := Partial2;
      AssignTracking := AssignTracking2;
      TrackingQuantity := TrackingQuantity2;

      IF GlobalComments THEN
        SetGlobalDescriptionAndComments;
    END;

    LOCAL PROCEDURE SetGlobalDescriptionAndComments@8();
    VAR
      SerialNoInformation@1000 : Record 6504;
      ItemTrackingComment@1001 : Record 6506;
    BEGIN
      Description :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(SerialNoInformation.FIELDNO(Description),DATABASE::"Serial No. Information"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Serial No. Information",SerialNoInformation.FIELDNO(Description)));
      Comment :=
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ItemTrackingComment.FIELDNO(Comment),DATABASE::"Item Tracking Comment"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Item Tracking Comment",ItemTrackingComment.FIELDNO(Comment)));
    END;

    LOCAL PROCEDURE CreateItem@2(VAR Item@1000 : Record 27;ItemTrackingCode@1001 : Code[10];CostingMethod@1002 : Option);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode);  // Assign Tracking Code.
      Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.VALIDATE("Costing Method",CostingMethod);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@42(VAR PurchaseHeader@1000 : Record 38;DocumentType@1001 : Option);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,'');
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);  // For Posting of Purchase Order.
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",LibraryUtility.GenerateGUID);  // For Posting of Purchase Return Order.
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrder@39(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal;NoOfLine@1006 : Integer);
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order);
      CreatePurchaseLinesAndReleaseDocument(PurchaseHeader,ItemNo,LocationCode,Quantity,NoOfLine);
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseReturnOrder@56(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal;NoOfLine@1006 : Integer);
    BEGIN
      CreatePurchaseHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order");
      CreatePurchaseLinesAndReleaseDocument(PurchaseHeader,ItemNo,LocationCode,Quantity,NoOfLine);
    END;

    LOCAL PROCEDURE CreatePurchaseLinesAndReleaseDocument@96(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal;NoOfLine@1006 : Integer);
    VAR
      PurchaseLine@1004 : Record 39;
      Counter@1005 : Integer;
    BEGIN
      FOR Counter := 1 TO NoOfLine DO
        CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,LocationCode,Quantity);

      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@14(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1004 : Record 39;ItemNo@1003 : Code[20];LocationCode@1002 : Code[10];Quantity@1001 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,Quantity);
      PurchaseLine.VALIDATE("Location Code",LocationCode);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemJournaLine@17(EntryType@1007 : Option;ItemNo@1002 : Code[20];LocationCode@1000 : Code[10];Quantity@1003 : Decimal;Quantity2@1006 : Decimal;MultipleLines@1004 : Boolean);
    VAR
      ItemJournalLine@1001 : Record 83;
      DocumentNo@1005 : Code[20];
    BEGIN
      LibraryInventory.ClearItemJournal(ItemJournalTemplate,ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity);
      UpdateItemJournalLine(ItemJournalLine,LibraryUtility.GenerateGUID,LocationCode);
      IF MultipleLines THEN BEGIN
        DocumentNo := ItemJournalLine."Document No.";
        LibraryInventory.CreateItemJournalLine(
          ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,EntryType,ItemNo,Quantity2);
        UpdateItemJournalLine(ItemJournalLine,DocumentNo,LocationCode);
      END;
    END;

    LOCAL PROCEDURE UpdateItemJournalLine@16(VAR ItemJournalLine@1000 : Record 83;DocumentNo@1001 : Code[20];LocationCode@1002 : Code[10]);
    VAR
      Bin@1003 : Record 7354;
    BEGIN
      ItemJournalLine.VALIDATE("Document No.",DocumentNo);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      IF LocationCode = LocationSilver.Code THEN BEGIN
        LibraryWarehouse.FindBin(Bin,LocationCode,'',1);
        ItemJournalLine.VALIDATE("Bin Code",Bin.Code);
      END;
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostItemJournalLine@63(EntryType@1006 : Option;ItemNo@1004 : Code[20];LocationCode@1003 : Code[10];Quantity@1002 : Decimal;Quantity2@1001 : Decimal;MultipleLines@1000 : Boolean;AssignTracking2@1005 : Option);
    BEGIN
      AssignTracking := AssignTracking2;  // Assign Global variable for Page Handler.
      CreateItemJournaLine(EntryType,ItemNo,LocationCode,Quantity,Quantity2,MultipleLines);
      AssignTrackingOnItemJournalLines(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);  // Assign Item Tracking Line on Page Handler.

      LibraryInventory.PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
      AssignTracking := AssignTracking::None;  // Assign Global variable for Page Handler.
    END;

    LOCAL PROCEDURE AssignTrackingMultipleWhseReceiptLines@3(SourceNo@1001 : Code[20];SourceDocument@1000 : Option);
    VAR
      WarehouseReceiptLine@1002 : Record 7317;
    BEGIN
      FilterWarehouseReceiptLine(WarehouseReceiptLine,SourceNo,SourceDocument);
      WarehouseReceiptLine.FINDSET;
      REPEAT
        WarehouseReceiptLine.OpenItemTrackingLines;  // Open Tracking on Page Handler.
      UNTIL WarehouseReceiptLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FindWhseReceiptHeaderForPurchase@192(VAR WarehouseReceiptHeader@1000 : Record 7316;SourceNo@1002 : Code[20]);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
    BEGIN
      FindWarehouseReceiptHeader(WarehouseReceiptHeader,SourceNo,WarehouseReceiptLine."Source Document"::"Purchase Order");
    END;

    LOCAL PROCEDURE FindWhseReceiptHeaderForSalesReturn@19(VAR WarehouseReceiptHeader@1000 : Record 7316;SourceNo@1002 : Code[20]);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
    BEGIN
      FindWarehouseReceiptHeader(WarehouseReceiptHeader,SourceNo,WarehouseReceiptLine."Source Document"::"Sales Return Order");
    END;

    LOCAL PROCEDURE FindWarehouseReceiptHeader@190(VAR WarehouseReceiptHeader@1000 : Record 7316;SourceNo@1002 : Code[20];SourceDocument@1003 : Option);
    VAR
      WarehouseReceiptLine@1001 : Record 7317;
    BEGIN
      SelectWarehouseReceiptLine(WarehouseReceiptLine,SourceNo,SourceDocument);
      WarehouseReceiptHeader.GET(WarehouseReceiptLine."No.");
    END;

    LOCAL PROCEDURE FilterWarehouseReceiptLine@25(VAR WarehouseReceiptLine@1001 : Record 7317;SourceNo@1000 : Code[20];SourceDocument@1002 : Option);
    BEGIN
      WarehouseReceiptLine.SETRANGE("Source Document",SourceDocument);
      WarehouseReceiptLine.SETRANGE("Source No.",SourceNo);
    END;

    LOCAL PROCEDURE FindWarehouseActivityLine@6(VAR WarehouseActivityLine@1000 : Record 5767;SourceNo@1001 : Code[20];SourceDocument@1002 : Option);
    BEGIN
      WarehouseActivityLine.SETRANGE("Source No.",SourceNo);
      WarehouseActivityLine.SETRANGE("Source Document",SourceDocument);
      WarehouseActivityLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindWarehouseActivityHeader@9(VAR WarehouseActivityHeader@1001 : Record 5766;SourceNo@1002 : Code[20];SourceDocument@1003 : Option);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceNo,SourceDocument);
      WarehouseActivityHeader.SETRANGE("No.",WarehouseActivityLine."No.");
      WarehouseActivityHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchInvHeader@38(VAR PurchInvHeader@1000 : Record 122;OrderNo@1001 : Code[20]);
    BEGIN
      PurchInvHeader.SETRANGE("Order No.",OrderNo);
      PurchInvHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE PostPurchaseDocument@145(DocumentType@1004 : Option;No@1000 : Code[20];Receive@1001 : Boolean;Invoice@1002 : Boolean);
    VAR
      PurchaseHeader@1003 : Record 38;
    BEGIN
      PurchaseHeader.GET(DocumentType,No);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,Receive,Invoice);
    END;

    LOCAL PROCEDURE UpdateQtyToReceiveOnWhseReceiptLine@24(VAR WarehouseReceiptLine@1000 : Record 7317;SourceNo@1001 : Code[20];ItemNo@1003 : Code[20];QtyToReceive@1002 : Decimal);
    BEGIN
      FilterWarehouseReceiptLine(WarehouseReceiptLine,SourceNo,WarehouseReceiptLine."Source Document"::"Purchase Order");
      WarehouseReceiptLine.SETRANGE("Item No.",ItemNo);
      WarehouseReceiptLine.FINDSET;
      REPEAT
        WarehouseReceiptLine.VALIDATE("Qty. to Receive",QtyToReceive);
        WarehouseReceiptLine.MODIFY(TRUE);
      UNTIL WarehouseReceiptLine.NEXT = 0;
    END;

    LOCAL PROCEDURE RegisterWarehouseActivity@32(SourceNo@1001 : Code[20];SourceDocument@1002 : Option);
    VAR
      WarehouseActivityHeader@1000 : Record 5766;
    BEGIN
      FindWarehouseActivityHeader(WarehouseActivityHeader,SourceNo,SourceDocument);
      LibraryWarehouse.AutoFillQtyInventoryActivity(WarehouseActivityHeader);
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE PostWhseReceiptAndRegisterWarehouseActivity@48(WarehouseReceiptHeader@1000 : Record 7316;SourceNo@1001 : Code[20];SourceDocument@1002 : Option);
    BEGIN
      LibraryWarehouse.PostWhseReceipt(WarehouseReceiptHeader);
      RegisterWarehouseActivity(SourceNo,SourceDocument);
    END;

    LOCAL PROCEDURE RegisterWarehouseActivityAndPostWhseShipment@181(WarehouseShipmentHeader@1000 : Record 7320;SourceNo@1001 : Code[20];SourceDocument@1002 : Option);
    BEGIN
      RegisterWarehouseActivity(SourceNo,SourceDocument);
      LibraryWarehouse.PostWhseShipment(WarehouseShipmentHeader,FALSE);
    END;

    LOCAL PROCEDURE CreateSalesOrder@162(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1004 : Record 37;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      // Create Sales Order.
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,ItemNo,LocationCode,Quantity,CreateCustomer,FALSE);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesOrder@89(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1004 : Record 37;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      // Create Sales Order and Release Order.
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,ItemNo,LocationCode,Quantity,CreateCustomer,TRUE);
    END;

    LOCAL PROCEDURE CreateAndReleaseSalesReturnOrder@134(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1004 : Record 37;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      // Create Sales Return Order and Release.
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",ItemNo,LocationCode,Quantity,CreateCustomer,TRUE);
    END;

    LOCAL PROCEDURE CreateSalesDocument@85(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1004 : Record 37;DocumentType@1005 : Option;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal;CustomerNo@1007 : Code[20];Release@1006 : Boolean);
    BEGIN
      LibrarySales.CreateSalesHeader(SalesHeader,DocumentType,CustomerNo);
      SalesHeader.VALIDATE("External Document No.",LibraryUtility.GenerateGUID);
      SalesHeader.MODIFY(TRUE);
      CreateSalesLine(SalesHeader,SalesLine,ItemNo,LocationCode,Quantity);
      IF Release THEN
        LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE CreateSalesLine@91(VAR SalesHeader@1000 : Record 36;VAR SalesLine@1005 : Record 37;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ItemNo,Quantity);
      SalesLine.VALIDATE("Location Code",LocationCode);
      SalesLine.VALIDATE("Shipment Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5) + 5) + 'D>',WORKDATE));
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FilterWarehouseShipmentLine@102(VAR WarehouseShipmentLine@1000 : Record 7321;SourceNo@1001 : Code[20];SourceDocument@1002 : Option);
    BEGIN
      WarehouseShipmentLine.SETRANGE("Source Document",SourceDocument);
      WarehouseShipmentLine.SETRANGE("Source No.",SourceNo);
    END;

    LOCAL PROCEDURE FindWarehouseShipmentHeader@107(VAR WarehouseShipmentHeader@1000 : Record 7320;SourceNo@1002 : Code[20];SourceDocument@1004 : Option);
    VAR
      WarehouseShipmentLine@1001 : Record 7321;
    BEGIN
      SelectWarehouseShipmentLine(WarehouseShipmentLine,SourceNo,SourceDocument);
      WarehouseShipmentHeader.GET(WarehouseShipmentLine."No.");
    END;

    LOCAL PROCEDURE FindSalesInvoiceHeader@120(VAR SalesInvoiceHeader@1000 : Record 112;OrderNo@1001 : Code[20]);
    BEGIN
      SalesInvoiceHeader.SETRANGE("Order No.",OrderNo);
      SalesInvoiceHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateWhseWorksheetName@53(VAR WhseWorksheetName@1002 : Record 7327;LocationCode@1001 : Code[10]);
    VAR
      WhseWorksheetTemplate@1000 : Record 7328;
    BEGIN
      WhseWorksheetTemplate.SETRANGE(Type,WhseWorksheetTemplate.Type::Pick);
      WhseWorksheetTemplate.FINDFIRST;
      LibraryWarehouse.CreateWhseWorksheetName(WhseWorksheetName,WhseWorksheetTemplate.Name,LocationCode);
    END;

    LOCAL PROCEDURE FindWhseWorksheetLine@67(VAR WhseWorksheetLine@1000 : Record 7326;WhseWorksheetName@1001 : Record 7327;LocationCode@1002 : Code[10]);
    BEGIN
      WhseWorksheetLine.SETRANGE("Worksheet Template Name",WhseWorksheetName."Worksheet Template Name");
      WhseWorksheetLine.SETRANGE(Name,WhseWorksheetName.Name);
      WhseWorksheetLine.SETRANGE("Location Code",LocationCode);
      WhseWorksheetLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateWhseWorksheetLine@49(VAR WhseWorksheetLine@1000 : Record 7326;QtyToHandle@1001 : Decimal);
    BEGIN
      WhseWorksheetLine.SetCurrentFieldNo(WhseWorksheetLine.FIELDNO("Qty. to Handle"));
      WhseWorksheetLine.VALIDATE("Qty. to Handle",QtyToHandle);
      WhseWorksheetLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePickFromPickWorksheet@59(LocationCode@1000 : Code[10];QtyToHandle@1004 : Decimal);
    VAR
      WhseWorksheetName@1001 : Record 7327;
      WhseWorksheetLine@1003 : Record 7326;
      GetSourceDocOutbound@1002 : Codeunit 5752;
    BEGIN
      CreateWhseWorksheetName(WhseWorksheetName,LocationCode);
      GetSourceDocOutbound.GetSingleWhsePickDoc(WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,LocationCode);
      FindWhseWorksheetLine(WhseWorksheetLine,WhseWorksheetName,LocationGreen.Code);
      UpdateWhseWorksheetLine(WhseWorksheetLine,QtyToHandle);
      LibraryWarehouse.CreatePickFromPickWorksheet(
        WhseWorksheetLine,WhseWorksheetLine."Line No.",WhseWorksheetName."Worksheet Template Name",WhseWorksheetName.Name,
        LocationCode,'',0,0,0,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE);
    END;

    LOCAL PROCEDURE UpdateQtyToShipOnSalesLine@78(VAR SalesLine@1000 : Record 37;QtyToShip@1001 : Decimal);
    BEGIN
      SalesLine.VALIDATE("Qty. to Ship",QtyToShip);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateSalesLineAndReleaseOrder@156(VAR SalesHeader@1000 : Record 36;SalesLine@1001 : Record 37;QtyToShip@1002 : Decimal);
    BEGIN
      UpdateQtyToShipOnSalesLine(SalesLine,QtyToShip);
      LibrarySales.ReleaseSalesDocument(SalesHeader);
    END;

    LOCAL PROCEDURE UpdateSerialNoInformationAndComments@43(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      SerialNoInformationList@1002 : TestPage 6509;
      ItemTrackingComments@1001 : TestPage 6506;
    BEGIN
      // Update Description on Serial No information list and add Comments for Serial No.
      SerialNoInformationList.TRAP;
      ItemTrackingLines.Reclass_SerialNoInfoCard.INVOKE;
      ItemTrackingComments.TRAP;
      SerialNoInformationList.Description.SETVALUE(Description);
      SerialNoInformationList."Page Item Tracking Comments".INVOKE;
      ItemTrackingComments.Date.SETVALUE(WORKDATE);
      ItemTrackingComments.Comment.SETVALUE(Comment);
      ItemTrackingLines.OK.INVOKE;
    END;

    LOCAL PROCEDURE PostSalesDocument@62(DocumentType@1004 : Option;No@1001 : Code[20];Ship@1002 : Boolean;Invoice@1003 : Boolean);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.GET(DocumentType,No);
      LibrarySales.PostSalesDocument(SalesHeader,Ship,Invoice);
    END;

    LOCAL PROCEDURE SelectItemLedgerEntry@186(VAR ItemLedgerEntry@1000 : Record 32;DocumentType@1003 : Option;DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    BEGIN
      ItemLedgerEntry.SETRANGE("Document Type",DocumentType);
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdatePurchaseLineAndReleaseOrder@121(VAR PurchaseHeader@1001 : Record 38;DirectUnitCost@1002 : Decimal;QtyToInvoice@1003 : Decimal);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      SelectPurchaseLine(PurchaseLine,PurchaseHeader."No.");
      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.VALIDATE("Qty. to Invoice",QtyToInvoice);
      PurchaseLine.MODIFY(TRUE);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE ReopenPurchaseOrder@30(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseHeader."No.");
      LibraryPurchase.ReopenPurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE ReopenAndUpdatePurchaseOrder@130(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      ReopenPurchaseOrder(PurchaseHeader);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",LibraryUtility.GenerateGUID);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePurchaseLineAndPost@41(VAR PurchaseHeader@1000 : Record 38;DirectUnitCost@1002 : Decimal;Quantity@1003 : Decimal);
    BEGIN
      UpdatePurchaseLineAndReleaseOrder(PurchaseHeader,DirectUnitCost,Quantity);
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");
      PostPurchaseDocument(PurchaseHeader."Document Type"::Order,PurchaseHeader."No.",FALSE,TRUE);  // Invoice
    END;

    LOCAL PROCEDURE FindPurchRcptHeader@182(VAR PurchRcptHeader@1000 : Record 120;OrderNo@1001 : Code[20]);
    BEGIN
      PurchRcptHeader.SETRANGE("Order No.",OrderNo);
      PurchRcptHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindSalesShipmentHeader@206(VAR SalesShipmentHeader@1000 : Record 110;OrderNo@1001 : Code[20]);
    BEGIN
      SalesShipmentHeader.SETRANGE("Order No.",OrderNo);
      SalesShipmentHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE PostSalesOrderAndVerifyLine@136(VAR SalesHeader@1001 : Record 36;VAR SalesHeader2@1002 : Record 36;ItemNo@1004 : Code[20];Quantity@1003 : Decimal;Reserve@1000 : Boolean);
    VAR
      SalesLine@1005 : Record 37;
    BEGIN
      // Post Sales Order/cancel reservation and post Sales Order.
      IF Reserve THEN BEGIN
        ASSERTERROR PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,FALSE);
        Assert.IsTrue(STRPOS(GETLASTERRORTEXT,ItemTrackingSerialNumberErr) > 0,GETLASTERRORTEXT);
      END ELSE BEGIN
        CancelReservationCurrentLine := TRUE;  // Assign Global variable for Page Handler.
        SelectSalesLine(SalesLine,SalesHeader2."No.");
        SalesLine.ShowReservation;  // Cancel Reservation from Current Line.
        PostSalesDocument(SalesHeader."Document Type",SalesHeader."No.",TRUE,TRUE);
        VerifyPostedSalesInvoiceLine(SalesHeader."No.",ItemNo,Quantity);
      END;
    END;

    LOCAL PROCEDURE UpdateAndPostPurchaseOrder@51(VAR PurchaseHeader@1000 : Record 38;DirectUnitCost@1002 : Decimal;Quantity@1003 : Decimal);
    BEGIN
      ReopenAndUpdatePurchaseOrder(PurchaseHeader);
      UpdatePurchaseLineAndPost(PurchaseHeader,DirectUnitCost,Quantity);
    END;

    LOCAL PROCEDURE SelectSalesLine@46(VAR SalesLine@1000 : Record 37;DocumentNo@1001 : Code[20]);
    BEGIN
      SalesLine.SETRANGE("Document No.",DocumentNo);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectPurchaseLine@47(VAR PurchaseLine@1000 : Record 39;DocumentNo@1001 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectWarehouseReceiptLine@93(VAR WarehouseReceiptLine@1000 : Record 7317;SourceNo@1001 : Code[20];SourceDocument@1002 : Option);
    BEGIN
      FilterWarehouseReceiptLine(WarehouseReceiptLine,SourceNo,SourceDocument);
      WarehouseReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectWarehouseShipmentLine@108(VAR WarehouseShipmentLine@1000 : Record 7321;SourceNo@1002 : Code[20];SourceDocument@1003 : Option);
    BEGIN
      FilterWarehouseShipmentLine(WarehouseShipmentLine,SourceNo,SourceDocument);
      WarehouseShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectPurchInvLine@35(VAR PurchInvLine@1000 : Record 123;OrderNo@1001 : Code[20]);
    VAR
      PurchInvHeader@1002 : Record 122;
    BEGIN
      FindPurchInvHeader(PurchInvHeader,OrderNo);
      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
      PurchInvLine.SETRANGE(Type,PurchInvLine.Type::Item);
      PurchInvLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectSalesInvoiceLine@64(VAR SalesInvoiceLine@1001 : Record 113;OrderNo@1002 : Code[20]);
    VAR
      SalesInvoiceHeader@1000 : Record 112;
    BEGIN
      FindSalesInvoiceHeader(SalesInvoiceHeader,OrderNo);
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::Item);
      SalesInvoiceLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectSalesShipmentLine@76(VAR SalesShipmentLine@1001 : Record 111;OrderNo@1002 : Code[20]);
    VAR
      SalesShipmentHeader@1000 : Record 110;
    BEGIN
      FindSalesShipmentHeader(SalesShipmentHeader,OrderNo);
      SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.");
      SalesShipmentLine.SETRANGE(Type,SalesShipmentLine.Type::Item);
      SalesShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE AssignTrackingOnPurchaseLine@118(DocumentNo@1001 : Code[20]);
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      SelectPurchaseLine(PurchaseLine,DocumentNo);
      PurchaseLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler.
    END;

    LOCAL PROCEDURE AssignTrackingOnSalesLines@133(DocumentNo@1001 : Code[20]);
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SelectSalesLine(SalesLine,DocumentNo);
      REPEAT
        SalesLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler.
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AssignTrackingOnItemJournalLines@22(JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      SelectItemJournalLine(ItemJournalLine,JournalTemplateName,JournalBatchName);
      REPEAT
        ItemJournalLine.OpenItemTrackingLines(FALSE);  // Assign Tracking on Page Handler.
      UNTIL ItemJournalLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AssignTrackingOnWarehouseShipmentLine@28(VAR WarehouseShipmentLine@1000 : Record 7321;SourceNo@1001 : Code[20];SourceDocument@1002 : Option);
    BEGIN
      SelectWarehouseShipmentLine(WarehouseShipmentLine,SourceNo,SourceDocument);
      WarehouseShipmentLine.OpenItemTrackingLines;  // Assign Tracking on Page Handler.
    END;

    LOCAL PROCEDURE CreateAndRefreshReleasedProductionOrder@83(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      // Create Released Production Order and Refresh.
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::Released,ItemNo,LocationCode,Quantity);
    END;

    LOCAL PROCEDURE CreateAndRefreshFirmPlannedProductionOrder@179(VAR ProductionOrder@1000 : Record 5405;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      // Create Firm Planned Production Order and Refresh.
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::"Firm Planned",ItemNo,LocationCode,Quantity);
    END;

    LOCAL PROCEDURE CreateAndRefreshProductionOrder@185(VAR ProductionOrder@1000 : Record 5405;Status@1004 : Option;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal);
    BEGIN
      LibraryManufacturing.CreateProductionOrder(ProductionOrder,Status,ProductionOrder."Source Type"::Item,ItemNo,Quantity);
      ProductionOrder.VALIDATE("Location Code",LocationCode);
      ProductionOrder.MODIFY(TRUE);
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndPostOutputJournal@86(ProductionOrderNo@1001 : Code[20];Quantity@1002 : Decimal;Tracking@1003 : Boolean);
    BEGIN
      CreateOutputJournalWithExlpodeRouting(ProductionOrderNo);
      UpdateQuantityAndPostOutputJournal(Quantity,Tracking);
    END;

    LOCAL PROCEDURE CreateOutputJournalWithExlpodeRouting@155(ProductionOrderNo@1002 : Code[20]);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(OutputItemJournalTemplate,OutputItemJournalBatch);
      LibraryManufacturing.CreateOutputJournal(ItemJournalLine,OutputItemJournalTemplate,OutputItemJournalBatch,'',ProductionOrderNo);
      LibraryInventory.OutputJnlExplRoute(ItemJournalLine);
    END;

    LOCAL PROCEDURE UpdateQuantityAndPostOutputJournal@65(OutputQuantity@1001 : Decimal;TrackingLine@1002 : Boolean);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      UpdateOutputQuantityOnItemJournalLine(
        ItemJournalLine,OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name,OutputQuantity);
      IF TrackingLine THEN
        ItemJournalLine.OpenItemTrackingLines(FALSE);  // Assign Item Tracking on Page Handler.
      LibraryInventory.PostItemJournalLine(OutputItemJournalBatch."Journal Template Name",OutputItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateAndCertifyProdBOMWithMultipleComponent@100(VAR Item@1004 : Record 27;VAR Item2@1001 : Record 27;VAR Item3@1002 : Record 27;ItemTrackingCode@1007 : Code[10];MultipleComponent@1005 : Boolean);
    VAR
      ProductionBOMHeader@1003 : Record 99000771;
      ProductionBOMLine@1006 : Record 99000772;
    BEGIN
      CreateItem(Item2,ItemTrackingCode,Item."Costing Method"::FIFO);
      IF MultipleComponent THEN BEGIN
        CreateItem(Item3,ItemTrackingCodeSerialSpecific.Code,Item."Costing Method"::FIFO);
        LibraryManufacturing.CreateCertifProdBOMWithTwoComp(ProductionBOMHeader,Item2."No.",Item3."No.",1);  // Use One for Quantity per.
      END ELSE BEGIN
        LibraryManufacturing.CreateProductionBOMHeader(ProductionBOMHeader,Item."Base Unit of Measure");
        LibraryManufacturing.CreateProductionBOMLine(
          ProductionBOMHeader,ProductionBOMLine,'',ProductionBOMLine.Type::Item,Item2."No.",1);
        ProductionBOMHeader.VALIDATE(Status,ProductionBOMHeader.Status::Certified);
        ProductionBOMHeader.MODIFY(TRUE);
      END;
      Item.VALIDATE("Production BOM No.",ProductionBOMHeader."No.");
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OpenItemTrackingLinesForProduction@80(ProdOrderNo@1001 : Code[20]);
    VAR
      ProdOrderLine@1000 : Record 5406;
    BEGIN
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderLine.FINDFIRST;
      ProdOrderLine.OpenItemTrackingLines;  // Open Item Tracking Lines on Page Handler.
    END;

    LOCAL PROCEDURE FindProdOrderComponent@111(VAR ProdOrderComponent@1000 : Record 5407;Status@1001 : Option;ProdOrderNo@1002 : Code[20];ItemNo@1003 : Code[20]);
    BEGIN
      ProdOrderComponent.SETRANGE(Status,Status);
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      ProdOrderComponent.FINDFIRST;
    END;

    LOCAL PROCEDURE OpenItemTrackingLinesForProdOrderComponent@126(Status@1002 : Option;ProdOrderNo@1001 : Code[20];ItemNo@1000 : Code[20]);
    VAR
      ProdOrderComponent@1003 : Record 5407;
    BEGIN
      FindProdOrderComponent(ProdOrderComponent,Status,ProdOrderNo,ItemNo);
      ProdOrderComponent.OpenItemTrackingLines;  // Open Tracking Line on Page Handler.
    END;

    LOCAL PROCEDURE CreateAndPostConsumptionJournal@142(ProductionOrderNo@1000 : Code[20];TrackingLine@1001 : Boolean);
    VAR
      ItemJournalLine@1002 : Record 83;
    BEGIN
      LibraryInventory.ClearItemJournal(ConsumptionItemJournalTemplate,ConsumptionItemJournalBatch);
      LibraryManufacturing.CalculateConsumption(
        ProductionOrderNo,ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      IF TrackingLine THEN BEGIN
        SelectItemJournalLine(ItemJournalLine,ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
        REPEAT
          ItemJournalLine.OpenItemTrackingLines(FALSE);  // Assign Tracking Line on Page Handler.
        UNTIL ItemJournalLine.NEXT = 0;
      END;
      LibraryInventory.PostItemJournalLine(ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateQtyToHandleOnWarehouseActivityLine@184(VAR WarehouseActivityHeader@1003 : Record 5766;SourceNo@1002 : Code[20];SourceDocument@1001 : Option;Quantity@1004 : Decimal);
    VAR
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      FindWarehouseActivityLine(WarehouseActivityLine,SourceNo,SourceDocument);
      REPEAT
        WarehouseActivityLine.VALIDATE("Qty. to Handle",Quantity);
        WarehouseActivityLine.MODIFY(TRUE);
      UNTIL WarehouseActivityLine.NEXT = 0;
      LibraryWarehouse.RegisterWhseActivity(WarehouseActivityHeader);
    END;

    LOCAL PROCEDURE SelectItemJournalLine@211(VAR ItemJournalLine@1000 : Record 83;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10]);
    BEGIN
      ItemJournalLine.SETRANGE("Journal Template Name",JournalTemplateName);
      ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
      ItemJournalLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdatePurchasingCodeOnSalesLine@200(VAR SalesLine@1000 : Record 37);
    VAR
      Purchasing@1001 : Record 5721;
    BEGIN
      CreatePurchasingCode(Purchasing);
      SalesLine.VALIDATE("Purchasing Code",Purchasing.Code);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchasingCode@201(VAR Purchasing@1000 : Record 5721);
    BEGIN
      LibraryPurchase.CreatePurchasingCode(Purchasing);
      Purchasing.VALIDATE("Drop Shipment",TRUE);
      Purchasing.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemTrackingCode@94(VAR ItemTrackingCode@1000 : Record 6502;FieldNo@1001 : Integer;Value@1002 : Variant);
    VAR
      RecRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      // Update Item Tracking Code based on Field and its corresponding value.
      RecRef.GETTABLE(ItemTrackingCode);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
      RecRef.SETTABLE(ItemTrackingCode);
      ItemTrackingCode.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePickFromWarehouseShipment@148(VAR WarehouseShipmentHeader@1000 : Record 7320;SourceNo@1002 : Code[20];SourceDocument@1001 : Option);
    BEGIN
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SourceNo,SourceDocument);
      LibraryWarehouse.CreatePick(WarehouseShipmentHeader);
    END;

    LOCAL PROCEDURE UpdateSellToCustomerOnPurchaseHeader@159(VAR PurchaseHeader@1000 : Record 38;SellToCustomerNo@1001 : Code[20]);
    BEGIN
      PurchaseHeader.VALIDATE("Sell-to Customer No.",SellToCustomerNo);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindReturnShipmentHeader@242(VAR ReturnShipmentHeader@1000 : Record 6650;ReturnOrderNo@1001 : Code[20]);
    BEGIN
      ReturnShipmentHeader.SETRANGE("Return Order No.",ReturnOrderNo);
      ReturnShipmentHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE FindReturnReceiptHeader@271(VAR ReturnReceiptHeader@1001 : Record 6660;ReturnOrderNo@1000 : Code[20]);
    BEGIN
      ReturnReceiptHeader.SETRANGE("Return Order No.",ReturnOrderNo);
      ReturnReceiptHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectReturnShipmentLine@228(VAR ReturnShipmentLine@1001 : Record 6651;ReturnOrderNo@1002 : Code[20]);
    VAR
      ReturnShipmentHeader@1000 : Record 6650;
    BEGIN
      FindReturnShipmentHeader(ReturnShipmentHeader,ReturnOrderNo);
      ReturnShipmentLine.SETRANGE("Document No.",ReturnShipmentHeader."No.");
      ReturnShipmentLine.SETRANGE(Type,ReturnShipmentLine.Type::Item);
      ReturnShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE SelectReturnReceiptLine@229(VAR ReturnReceiptLine@1001 : Record 6661;ReturnOrderNo@1002 : Code[20]);
    VAR
      ReturnReceiptHeader@1000 : Record 6660;
    BEGIN
      FindReturnReceiptHeader(ReturnReceiptHeader,ReturnOrderNo);
      ReturnReceiptLine.SETRANGE("Document No.",ReturnReceiptHeader."No.");
      ReturnReceiptLine.SETRANGE(Type,ReturnReceiptLine.Type::Item);
      ReturnReceiptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateAndReleaseTransferOrder@170(VAR TransferHeader@1000 : Record 5740;VAR TransferLine@1001 : Record 5741;FromLocation@1003 : Code[10];ToLocation@1002 : Code[10];ItemNo@1004 : Code[20];Quantity@1005 : Decimal);
    BEGIN
      LibraryWarehouse.CreateTransferHeader(TransferHeader,FromLocation,ToLocation,LocationIntransit.Code);
      LibraryWarehouse.CreateTransferLine(TransferHeader,TransferLine,ItemNo,Quantity);
      TransferLine.VALIDATE("Shipment Date",CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>',WORKDATE));
      TransferLine.MODIFY(TRUE);
      LibraryWarehouse.ReleaseTransferOrder(TransferHeader);
    END;

    LOCAL PROCEDURE UpdatePostingPolicyOnWarehouseSetup@176(ReceiptPostingPolicy@1001 : Option;ShipmentPostingPolicy@1002 : Option);
    VAR
      WarehouseSetup@1000 : Record 5769;
    BEGIN
      WarehouseSetup.GET;
      WarehouseSetup.VALIDATE("Receipt Posting Policy",ReceiptPostingPolicy);
      WarehouseSetup.VALIDATE("Shipment Posting Policy",ShipmentPostingPolicy);
      WarehouseSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE FindReservationEntry@153(VAR ReservationEntry@1000 : Record 337;ItemNo@1001 : Code[20];SourceType@1002 : Integer;SourceID@1003 : Code[20]);
    BEGIN
      ReservationEntry.SETRANGE("Item No.",ItemNo);
      ReservationEntry.SETRANGE("Source Type",SourceType);
      ReservationEntry.SETRANGE("Source ID",SourceID);
      ReservationEntry.SETRANGE("Reservation Status",ReservationEntry."Reservation Status"::Surplus);
      ReservationEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE FilterReservationEntryBySource@276(VAR ReservationEntry@1000 : Record 337;SourceType@1001 : Integer;SourceSubtype@1002 : Option;SourceID@1003 : Code[20];SourceRefNo@1004 : Text[100]);
    BEGIN
      WITH ReservationEntry DO BEGIN
        INIT;
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",SourceSubtype);
        SETRANGE("Source ID",SourceID);
        SETFILTER("Source Ref. No.",SourceRefNo);
      END;
    END;

    LOCAL PROCEDURE UpdateWarrantyDateOnReservationEntry@152(VAR ReservationEntry@1000 : Record 337;ItemNo@1001 : Code[20];SourceType@1002 : Integer;SourceID@1003 : Code[20]);
    BEGIN
      FindReservationEntry(ReservationEntry,ItemNo,SourceType,SourceID);
      REPEAT
        ReservationEntry.VALIDATE("Warranty Date",WORKDATE);
        ReservationEntry.MODIFY(TRUE);
      UNTIL ReservationEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateOutputQuantityOnItemJournalLine@204(VAR ItemJournalLine@1000 : Record 83;JournalTemplateName@1003 : Code[10];JournalBatchName@1002 : Code[10];OutPutQuantity@1001 : Decimal);
    BEGIN
      SelectItemJournalLine(ItemJournalLine,JournalTemplateName,JournalBatchName);
      ItemJournalLine.VALIDATE("Output Quantity",OutPutQuantity);
      ItemJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE OpenReservedQuantityOnSalesOrder@222(SalesHeaderNo@1001 : Code[20]);
    VAR
      SalesOrder@1000 : TestPage 42;
    BEGIN
      SalesOrder.OPENEDIT;
      SalesOrder.FILTER.SETFILTER("No.",SalesHeaderNo);
      SalesOrder.SalesLines."Reserved Quantity".DRILLDOWN;  // Open Page Reservation Entries.
    END;

    LOCAL PROCEDURE CreateSalesProductionSetup@167(VAR Item@1000 : Record 27;VAR Item2@1001 : Record 27;VAR SalesLine@1006 : Record 37;VAR ProductionOrder@1008 : Record 5405;Quantity@1005 : Decimal;LocationCode@1007 : Code[10];ItemTrackingCode@1010 : Code[10];AssignTrackingValue@1009 : Option);
    VAR
      Item3@1002 : Record 27;
      SalesHeader@1003 : Record 36;
      ItemJournalLine@1004 : Record 83;
    BEGIN
      CreateItem(Item,ItemTrackingCode,Item."Costing Method"::FIFO);
      CreateAndCertifyProdBOMWithMultipleComponent(Item,Item2,Item3,ItemTrackingCode,FALSE);  // Multiple Component as False.
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item2."No.",LocationCode,Quantity,0,FALSE,AssignTrackingValue);

      CreateSalesOrder(SalesHeader,SalesLine,Item."No.",LocationCode,LibraryRandom.RandInt(10) + 10);  // Large value required.
      CreateAndRefreshProductionOrder(ProductionOrder,ProductionOrder.Status::Released,Item."No.",LocationCode,Quantity);
    END;

    LOCAL PROCEDURE DeleteReservationEntry@215(ItemNo@1003 : Code[20];SourceType@1002 : Integer;SourceID@1001 : Code[20]);
    VAR
      ReservationEntry@1000 : Record 337;
    BEGIN
      FindReservationEntry(ReservationEntry,ItemNo,SourceType,SourceID);
      ReservationEntry.DELETEALL;
    END;

    LOCAL PROCEDURE UpdateDueDateOnReleasedProductionOrder@244(VAR ProductionOrder@1001 : Record 5405);
    VAR
      ReleasedProductionOrder@1000 : TestPage 99000831;
    BEGIN
      ReleasedProductionOrder.OPENEDIT;
      ReleasedProductionOrder.FILTER.SETFILTER("No.",ProductionOrder."No.");
      ReleasedProductionOrder."Due Date".SETVALUE(CALCDATE('<' + FORMAT(LibraryRandom.RandInt(5) + 10) + 'D>',WORKDATE));
      LibraryManufacturing.RefreshProdOrder(ProductionOrder,FALSE,TRUE,TRUE,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateTransferOrderSetup@233(VAR Item@1011 : Record 27;VAR Item2@1007 : Record 27;VAR TransferHeader@1004 : Record 5740;VAR TransferLine@1003 : Record 5741;ItemTrackingCode@1009 : Code[10];AssignTrackingValue@1010 : Option);
    VAR
      Item3@1006 : Record 27;
      ItemJournalLine@1005 : Record 83;
      Direction@1000 : 'Outbound,Inbound';
    BEGIN
      CreateItem(Item,ItemTrackingCode,Item."Costing Method"::FIFO);
      CreateAndCertifyProdBOMWithMultipleComponent(Item,Item2,Item3,ItemTrackingCode,FALSE);

      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item2."No.",LocationBlue.Code,LibraryRandom.RandInt(10) + 10,0,FALSE,
        AssignTrackingValue);  // Value required.
      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",Item2."No.",LocationBlue2.Code,LibraryRandom.RandInt(10) + 10,0,
        FALSE,AssignTrackingValue);  // Value required.

      CreateAndReleaseTransferOrder(
        TransferHeader,TransferLine,LocationBlue2.Code,LocationBlue.Code,Item2."No.",LibraryRandom.RandInt(10) + 5);  // Value required.
      SetGlobalValue(Item."No.",FALSE,FALSE,FALSE,AssignTracking::None,0,FALSE);  // Assign Tracking as NONE.
      TransferLine.OpenItemTrackingLines(Direction::Outbound);  // Assign Ship Tracking on Page Handler ItemTrackingProductionPageHandler.
      LibraryWarehouse.PostTransferOrder(TransferHeader,TRUE,FALSE);
    END;

    LOCAL PROCEDURE CreateAndPostSalesOrderWithTracking@240(VAR SalesHeader@1004 : Record 36;VAR SalesLine@1003 : Record 37;CustomerNo@1005 : Code[20];ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];Quantity@1000 : Decimal);
    BEGIN
      // Create Sales Order and Post with Ship Option.
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,ItemNo,LocationCode,Quantity,CustomerNo,TRUE);
      SalesLine.OpenItemTrackingLines;  // Assign Item Tracking on Page Handler.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE)
    END;

    LOCAL PROCEDURE CreateAndPostSalesReturnOrderWithTracking@239(VAR SalesHeader@1004 : Record 36;VAR SalesLine@1003 : Record 37;CustomerNo@1005 : Code[20];ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];Quantity@1000 : Decimal);
    BEGIN
      // Create Sales Return Order and Post with Receive Option.
      CreateSalesDocument(
        SalesHeader,SalesLine,SalesHeader."Document Type"::"Return Order",ItemNo,LocationCode,Quantity,CustomerNo,TRUE);
      SalesLine.OpenItemTrackingLines;  // Assign Item Tracking on Page Handler.
      LibrarySales.PostSalesDocument(SalesHeader,TRUE,FALSE)
    END;

    LOCAL PROCEDURE CreateAndPostPurchReturnOrderWithTracking@265(VAR PurchaseHeader@1004 : Record 38;VAR PurchaseLine@1003 : Record 39;VendorNo@1005 : Code[20];ItemNo@1002 : Code[20];LocationCode@1001 : Code[10];Quantity@1000 : Decimal);
    BEGIN
      // Create Purch. Return Order and Post with Ship Option.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::"Return Order",VendorNo);
      PurchaseHeader.VALIDATE("Vendor Cr. Memo No.",LibraryUtility.GenerateGUID);
      PurchaseHeader.MODIFY(TRUE);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine,ItemNo,LocationCode,Quantity);
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);

      PurchaseLine.OpenItemTrackingLines;  // Assign Item Tracking on Page Handler.
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE)
    END;

    LOCAL PROCEDURE CreateCustomerWithCombineShipments@264(VAR Customer@1000 : Record 18);
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      Customer.VALIDATE("Combine Shipments",TRUE);
      Customer.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCustomer@1120() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE CreateAndReleasePurchaseOrderWithTracking@245(VAR PurchaseHeader@1000 : Record 38;ItemNo@1001 : Code[20];LocationCode@1002 : Code[10];Quantity@1003 : Decimal;NoOfLine@1006 : Integer);
    BEGIN
      CreateAndReleasePurchaseOrder(PurchaseHeader,ItemNo,LocationCode,Quantity,NoOfLine);
      AssignTrackingOnPurchaseLine(PurchaseHeader."No.");  // Assign Tracking on Page Handler.
    END;

    LOCAL PROCEDURE CreateLotTrackedPositiveAdjmtAndSalesWithShipmentAndPick@45(VAR WarehouseShipmentHeader@1008 : Record 7320;VAR SourceDocType@1009 : Option;VAR SourceDocNo@1010 : Code[20];VAR ItemNo@1007 : Code[20]);
    VAR
      Item@1006 : Record 27;
      ItemTrackingCode@1005 : Record 6502;
      ItemJournalLine@1004 : Record 83;
      SalesHeader@1003 : Record 36;
      SalesLine@1002 : Record 37;
      WarehouseActivityLine@1000 : Record 5767;
    BEGIN
      CreateItemTrackingCode(ItemTrackingCode,ItemTrackingCode.FIELDNO("Lot Specific Tracking"),TRUE);
      UpdateItemTrackingCode(ItemTrackingCode,ItemTrackingCode.FIELDNO("Lot Warehouse Tracking"),TRUE);
      CreateItem(Item,ItemTrackingCode.Code,Item."Costing Method"::FIFO);
      ItemNo := Item."No.";
      SetGlobalValue(ItemNo,FALSE,FALSE,FALSE,AssignTracking::None,0,TRUE);

      CreateAndPostItemJournalLine(
        ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,LocationGreen.Code,
        LibraryRandom.RandIntInRange(10,20),0,FALSE,AssignTracking::LotNo);

      CreateAndReleaseSalesOrder(SalesHeader,SalesLine,ItemNo,LocationGreen.Code,LibraryRandom.RandInt(10));
      SalesLine.OpenItemTrackingLines;
      LibraryWarehouse.CreateWhseShipmentFromSO(SalesHeader);
      FindWarehouseShipmentHeader(WarehouseShipmentHeader,SalesHeader."No.",WarehouseActivityLine."Source Document"::"Sales Order");
      CreatePickFromWarehouseShipment(
        WarehouseShipmentHeader,SalesHeader."No.",WarehouseActivityLine."Source Document"::"Sales Order");

      SourceDocType := WarehouseActivityLine."Source Document"::"Sales Order";
      SourceDocNo := SalesHeader."No.";
    END;

    LOCAL PROCEDURE CreateDropShippmentSalesOrderWithItemTracking@293(PurchaseHeader@1003 : Record 38;ItemNo@1005 : Code[20];PurchasingCode@1006 : Code[10]);
    VAR
      SalesHeader@1001 : Record 36;
      SalesLine@1000 : Record 37;
      PurchaseLine@1002 : Record 39;
    BEGIN
      CreateSalesDocument(SalesHeader,SalesLine,SalesHeader."Document Type"::Order,
        ItemNo,'',2,PurchaseHeader."Sell-to Customer No.",TRUE);
      UpdateSalesLineWithPurchasingCode(SalesLine,PurchasingCode);

      LibraryVariableStorage.Enqueue(SalesHeader."No."); // for SalesListEnqPageHandler
      LibraryPurchase.GetDropShipment(PurchaseHeader);

      FindPurchaseLineFromSalesLine(PurchaseLine,PurchaseHeader."No.",SalesLine);
      PurchaseLine.OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE CreateServiceItemGroup@106() : Code[10];
    VAR
      ServiceItemGroup@1001 : Record 5904;
    BEGIN
      // Create Service Item Group with the field Create Service Item as TRUE, to automatically register Items as Service Items on
      // Shipping through Sales Orders or Sales Invoices.
      LibraryService.CreateServiceItemGroup(ServiceItemGroup);
      ServiceItemGroup.VALIDATE("Create Service Item",TRUE);
      ServiceItemGroup.MODIFY(TRUE);
      EXIT(ServiceItemGroup.Code);
    END;

    LOCAL PROCEDURE FindPurchaseLineFromSalesLine@284(VAR PurchaseLine@1000 : Record 39;DocumentNo@1002 : Code[20];SalesLine@1001 : Record 37);
    BEGIN
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.SETRANGE("No.",SalesLine."No.");
      PurchaseLine.SETRANGE("Sales Order No.",SalesLine."Document No.");
      PurchaseLine.SETRANGE("Sales Order Line No.",SalesLine."Line No.");
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateSalesLineWithPurchasingCode@291(VAR SalesLine@1000 : Record 37;PurchacingCode@1002 : Code[10]);
    BEGIN
      SalesLine.VALIDATE("Purchasing Code",PurchacingCode);
      SalesLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateItemWithServiceItem@278(VAR Item@1000 : Record 27;ServiceItemGroup@1001 : Code[10]);
    BEGIN
      Item.VALIDATE("Service Item Group",ServiceItemGroup);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE MockSalesLine@269(VAR SalesLine@1000 : Record 37;DocumentType@1001 : Option;ItemNo@1002 : Code[20];ShipmentNo@1003 : Code[20]);
    BEGIN
      WITH SalesLine DO BEGIN
        INIT;
        "Document Type" := DocumentType;
        "Document No." := LibraryUtility.GenerateGUID;
        Type := Type::Item;
        "No." := ItemNo;
        "Shipment No." := ShipmentNo;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockPurchaseLine@282(VAR PurchaseLine@1000 : Record 39;DocumentType@1001 : Option;ItemNo@1002 : Code[20];ShipmentNo@1003 : Code[20]);
    BEGIN
      WITH PurchaseLine DO BEGIN
        INIT;
        "Document Type" := DocumentType;
        "Document No." := LibraryUtility.GenerateGUID;
        Type := Type::Item;
        "No." := ItemNo;
        "Return Shipment No." := ShipmentNo;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockItemEntryRelation@270(VAR ItemEntryRelation@1000 : Record 6507;SourceType@1001 : Integer;SourceID@1003 : Code[20]);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      WITH ItemEntryRelation DO BEGIN
        INIT;
        RecRef.GETTABLE(ItemEntryRelation);
        "Item Entry No." := LibraryUtility.GetNewLineNo(RecRef,FIELDNO("Item Entry No."));
        "Source Type" := SourceType;
        "Source ID" := SourceID;
        "Lot No." := LibraryUtility.GenerateGUID;
        "Serial No." := LibraryUtility.GenerateGUID;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE MockTrackingSpecificationFromItemEntryRelation@273(ItemEntryRelation@1001 : Record 6507;ItemNo@1002 : Code[20]);
    VAR
      TrackingSpecification@1000 : Record 336;
    BEGIN
      WITH TrackingSpecification DO BEGIN
        INIT;
        "Entry No." := ItemEntryRelation."Item Entry No.";
        "Item No." := ItemNo;
        "Lot No." := ItemEntryRelation."Lot No.";
        "Serial No." := ItemEntryRelation."Serial No.";
        "Quantity (Base)" := LibraryRandom.RandIntInRange(11,20);
        "Quantity Invoiced (Base)" := LibraryRandom.RandInt(10); // document is not fully invoiced
        INSERT;
      END;
    END;

    LOCAL PROCEDURE GetReturnShipmentLines@281(VAR PurchaseLine@1000 : Record 39);
    VAR
      PurchGetReturnShipments@1001 : Codeunit 6648;
    BEGIN
      CLEAR(PurchGetReturnShipments);
      PurchGetReturnShipments.RUN(PurchaseLine);
    END;

    LOCAL PROCEDURE SetValueSerialAndLotNoOnItemTrackingLines@268(VAR ItemTrackingLines@1000 : TestPage 6510;SerialNo@1001 : Code[20];LotNo@1002 : Code[20]);
    BEGIN
      ItemTrackingLines."Serial No.".SETVALUE(SerialNo);
      ItemTrackingLines."Lot No.".SETVALUE(LotNo);
    END;

    LOCAL PROCEDURE SelectEntriesOnItemTrackingLines@275(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      ItemTrackingLines."Select Entries".INVOKE;  // Open Item Tracking Summary for Select Line.
      ItemTrackingLines.OK.INVOKE;
    END;

    LOCAL PROCEDURE VerifyTrackingOnPostedPurchaseInvoice@21(OrderNo@1001 : Code[20]);
    VAR
      PurchInvLine@1003 : Record 123;
    BEGIN
      // Verify Tracking line.
      SelectPurchInvLine(PurchInvLine,OrderNo);
      PurchInvLine.ShowItemTrackingLines;  // Open item tracking line for Verify.
    END;

    LOCAL PROCEDURE VerifyTrackingOnWarehouseReceipt@34(PurchaseHeaderNo@1001 : Code[20]);
    VAR
      WarehouseReceiptLine@1003 : Record 7317;
    BEGIN
      // Verify Tracking line.
      SelectWarehouseReceiptLine(WarehouseReceiptLine,PurchaseHeaderNo,WarehouseReceiptLine."Source Document"::"Purchase Order");
      WarehouseReceiptLine.OpenItemTrackingLines;  // Open item tracking line for Verify.
    END;

    LOCAL PROCEDURE VerifyTrackingOnPostedSalesInvoice@124(OrderNo@1000 : Code[20];LastLine@1002 : Boolean);
    VAR
      SalesInvoiceLine@1004 : Record 113;
    BEGIN
      // Verify Tracking line.
      SelectSalesInvoiceLine(SalesInvoiceLine,OrderNo);
      IF LastLine THEN  // Find Last record in Posted Sales Invoice lines and verify accordingly.
        SalesInvoiceLine.FINDLAST;
      SalesInvoiceLine.ShowItemTrackingLines;  // Open item tracking line for Verify.
    END;

    LOCAL PROCEDURE VerifyTrackingOnPostedSalesShipment@66(OrderNo@1000 : Code[20];Quantity@1003 : Decimal);
    VAR
      SalesShipmentLine@1004 : Record 111;
    BEGIN
      SelectSalesShipmentLine(SalesShipmentLine,OrderNo);
      SalesShipmentLine.TESTFIELD(Quantity,Quantity);
      SalesShipmentLine.ShowItemTrackingLines;  // Open item tracking line for Verify.
    END;

    LOCAL PROCEDURE VerifyPostedSalesInvoiceLine@117(OrderNo@1000 : Code[20];ItemNo@1003 : Code[20];Quantity@1004 : Decimal);
    VAR
      SalesInvoiceLine@1002 : Record 113;
    BEGIN
      SelectSalesInvoiceLine(SalesInvoiceLine,OrderNo);
      SalesInvoiceLine.TESTFIELD("No.",ItemNo);
      SalesInvoiceLine.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntry@193(VAR ItemLedgerEntry@1000 : Record 32;CostAmountActual@1001 : Decimal);
    BEGIN
      ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
      ItemLedgerEntry.TESTFIELD("Cost Amount (Actual)",CostAmountActual);
      ItemLedgerEntry.TESTFIELD("Serial No.");  // Serial No. exist.
    END;

    LOCAL PROCEDURE VerifyTrackingOnProdOrderComponent@169(ProductionOrderNo@1001 : Code[20];ItemNo@1002 : Code[20]);
    VAR
      ProductionOrder@1000 : Record 5405;
    BEGIN
      SignFactor := -1;  // Assign Sign Factor for Page Handler.
      OpenItemTrackingLinesForProdOrderComponent(ProductionOrder.Status::Finished,ProductionOrderNo,ItemNo);  // Open Item Tracking Lines and Verify on Page Handler PostedLinesPageHandler.
    END;

    LOCAL PROCEDURE VerifySerialAndLotNoOnItemLedgerEntry@262(ItemNo@1001 : Code[20];DocumentType@1002 : Option;DocumentNo@1003 : Code[20];DocumentType2@1004 : Option;DocumentNo2@1005 : Code[20]);
    VAR
      ItemLedgerEntry@1000 : Record 32;
      ItemLedgerEntry2@1006 : Record 32;
    BEGIN
      SelectItemLedgerEntry(ItemLedgerEntry,DocumentType,DocumentNo,ItemNo);
      REPEAT
        SelectItemLedgerEntry(ItemLedgerEntry2,DocumentType2,DocumentNo2,ItemNo);
        ItemLedgerEntry2.SETRANGE("Serial No.",ItemLedgerEntry."Serial No.");
        ItemLedgerEntry2.FINDFIRST;
        ItemLedgerEntry2.TESTFIELD("Lot No.",ItemLedgerEntry."Lot No.");
      UNTIL ItemLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyTrackingOnPostedReturnShipment@226(ReturnOrderNo@1000 : Code[20]);
    VAR
      ReturnShipmentLine@1001 : Record 6651;
    BEGIN
      // Verify Tracking line.
      SelectReturnShipmentLine(ReturnShipmentLine,ReturnOrderNo);
      ReturnShipmentLine.ShowItemTrackingLines;  // Open Item Tracking page for verify.
    END;

    LOCAL PROCEDURE VerifyTrackingOnPostedReturnReceipt@227(ReturnOrderNo@1001 : Code[20]);
    VAR
      ReturnReceiptLine@1000 : Record 6661;
    BEGIN
      // Verify Tracking line.
      SelectReturnReceiptLine(ReturnReceiptLine,ReturnOrderNo);
      ReturnReceiptLine.ShowItemTrackingLines;  // Open Item Tracking page for verify.
    END;

    LOCAL PROCEDURE VerifySerialNoOnItemLedgerEntry@161(ItemNo@1001 : Code[20];Quantity@1003 : Integer);
    VAR
      ItemLedgerEntry@1000 : Record 32;
      LineCount@1002 : Integer;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.FINDSET;
      REPEAT
        ItemLedgerEntry.TESTFIELD("Serial No.");
        LineCount += 1;
      UNTIL ItemLedgerEntry.NEXT = 0;
      Assert.AreEqual(Quantity,LineCount,NumberOfLineEqualErr);  // Verify Number of Item Ledger Entry line.
    END;

    LOCAL PROCEDURE VerifyTrackingOnPostedPurchaseReceipt@180(OrderNo@1002 : Code[20]);
    VAR
      PurchRcptHeader@1000 : Record 120;
      PurchRcptLine@1001 : Record 121;
    BEGIN
      FindPurchRcptHeader(PurchRcptHeader,OrderNo);
      PurchRcptLine.SETRANGE("Document No.",PurchRcptHeader."No.");
      PurchRcptLine.SETRANGE(Type,PurchRcptLine.Type::Item);
      PurchRcptLine.FINDFIRST;
      PurchRcptLine.ShowItemTrackingLines;  // Open Item Tracking Lines and Verify on Page Handler PostedLinesPageHandler.
    END;

    LOCAL PROCEDURE VerifyItemLedgerEntries@224(VAR ItemLedgerEntries@1000 : TestPage 38;EntryType@1001 : Option;Quantity@1002 : Decimal);
    BEGIN
      ItemLedgerEntries."Entry Type".ASSERTEQUALS(EntryType);
      ItemLedgerEntries."Item No.".ASSERTEQUALS(GlobalItemNo);
      ItemLedgerEntries.Quantity.ASSERTEQUALS(Quantity);
    END;

    LOCAL PROCEDURE VerifyReservedQuantity@232(SalesLine@1000 : Record 37);
    BEGIN
      SalesLine.CALCFIELDS("Reserved Quantity");
      SalesLine.TESTFIELD("Reserved Quantity",SalesLine.Quantity);
      VerifyReservedItemLedgerEntry(SalesLine."Document No.",SalesLine."Reserved Quantity");
    END;

    LOCAL PROCEDURE VerifyReservedQuantityProdOrderComponent@274(ProdOrderComponent@1000 : Record 5407;ReservedQuantity@1001 : Decimal;AssignTrackingValue@1002 : Option);
    BEGIN
      ProdOrderComponent.CALCFIELDS("Reserved Quantity");
      IF AssignTrackingValue = AssignTracking::LotNo THEN
        ProdOrderComponent.TESTFIELD("Reserved Quantity",ReservedQuantity)
      ELSE
        ProdOrderComponent.TESTFIELD("Reserved Quantity",1);  // One for Serial No.
    END;

    LOCAL PROCEDURE VerifyTrackingOnConsumptionItemJournal@285();
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      SelectItemJournalLine(ItemJournalLine,ConsumptionItemJournalTemplate.Name,ConsumptionItemJournalBatch.Name);
      DocumentNo := ItemJournalLine."Document No.";  // Assign Global Variable.
      ItemJournalLine.OpenItemTrackingLines(FALSE);  // Verify Tracking on Page Handler ItemTrackingProductionPageHandler.
    END;

    LOCAL PROCEDURE VerifyTrackingOnSalesInvoiceLine@277(DocumentNo@1000 : Code[20];ItemNo@1001 : Code[20]);
    VAR
      SalesInvoiceLine@1002 : Record 113;
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.SETRANGE(Type,SalesInvoiceLine.Type::Item);
      SalesInvoiceLine.SETRANGE("No.",ItemNo);
      SalesInvoiceLine.FINDFIRST;
      SalesInvoiceLine.ShowItemTrackingLines;  // Verify Tracking on Page Handler PostedLinesPageHandler.
    END;

    LOCAL PROCEDURE VerifyTrackingOnSalesCrMemoLine@292(DocumentNo@1000 : Code[20];ItemNo@1001 : Code[20]);
    VAR
      SalesCrMemoLine@1003 : Record 115;
    BEGIN
      SalesCrMemoLine.SETRANGE("Document No.",DocumentNo);
      SalesCrMemoLine.SETRANGE(Type,SalesCrMemoLine.Type::Item);
      SalesCrMemoLine.SETRANGE("No.",ItemNo);
      SalesCrMemoLine.FINDFIRST;
      SalesCrMemoLine.ShowItemTrackingLines;  // Verify Tracking on Page Handler PostedLinesPageHandler.
    END;

    LOCAL PROCEDURE VerifyReservedItemLedgerEntry@260(DocumentNo@1001 : Code[20];ReservedQuantity@1002 : Decimal);
    VAR
      ReservationEntries@1000 : TestPage 497;
      Count@1003 : Integer;
    BEGIN
      ReservationEntries.TRAP;
      OpenReservedQuantityOnSalesOrder(DocumentNo);
      FOR Count := 1 TO ReservedQuantity DO
        ReservationEntries.ReservedFrom.LOOKUP;  // Verify Reservation on Item Ledger Entry on Page Handler ItemLedgerEntriesPositiveAdjmtPageHandler.
    END;

    LOCAL PROCEDURE VerifyErrorMsgByUpdateItemTrackingLines@259(SalesLine@1000 : Record 37);
    BEGIN
      ASSERTERROR SalesLine.OpenItemTrackingLines;
      Assert.ExpectedError(QuantityHandledErr);
    END;

    LOCAL PROCEDURE VerifyServiceItemSerialNoIsNotEmpty@283(ItemNo@1000 : Code[20]);
    VAR
      ServiceItem@1003 : Record 5940;
    BEGIN
      ServiceItem.SETRANGE("Item No.",ItemNo);
      ServiceItem.FINDSET;
      REPEAT
        ServiceItem.TESTFIELD("Serial No.");
      UNTIL ServiceItem.NEXT = 0;
    END;

    [ModalPageHandler]
    PROCEDURE AvailabilityItemTrackingPageHandler@194(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      COMMIT;
      CASE ItemTrackingAction OF
        ItemTrackingAction::AvailabilityLotNo:
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;
            ItemTrackingLines.AvailabilityLotNo.ASSERTEQUALS(TRUE);
          END;
        ItemTrackingAction::AvailabilitySerialNo:
          BEGIN
            ItemTrackingLines."Assign Serial No.".INVOKE;
            ItemTrackingLines.AvailabilitySerialNo.ASSERTEQUALS(TRUE);
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPurchasePageHandler@11(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      SerialNoInformation@1001 : Record 6504;
    BEGIN
      // Assign Serial and Lot no based on requirments.
      IF NOT VerifyQtyToHandle THEN BEGIN
        ItemTrackingLines."Assign Serial No.".INVOKE;  // Open Enter Quantity to Create for create Serial No or with Lot No.
        ItemTrackingLines.LAST;
        IF Partial THEN
          ItemTrackingLines."Qty. to Handle (Base)".SETVALUE(0);  // Value to partially track the items.
        LibraryItemTracking.CreateSerialNoInformation(SerialNoInformation,GlobalItemNo,'',ItemTrackingLines."Serial No.".VALUE);
        UpdateSerialNoInformationAndComments(ItemTrackingLines);
        EXIT;
      END;

      // Verify: Qty to Handle- Tracking on unit quantity.
      ItemTrackingLines.LAST;
      ItemTrackingLines."Qty. to Handle (Base)".ASSERTEQUALS(1);  // For Serial No tracking - as per standard, Quantity (Base) must be -1,0,1 when Serial No. is stated.
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSalesPageHandler@33(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      SerialNoInformation@1001 : Record 6504;
    BEGIN
      // Assign Serial and Lot no based on requirments.
      IF AssignTracking = AssignTracking::SerialNo THEN BEGIN
        ItemTrackingLines."Assign Serial No.".INVOKE;  // Open Enter Quantity to Create for Create Serial No or with Lot No.
        ItemTrackingLines.LAST;
        LibraryItemTracking.CreateSerialNoInformation(SerialNoInformation,GlobalItemNo,'',ItemTrackingLines."Serial No.".VALUE);
        UpdateSerialNoInformationAndComments(ItemTrackingLines);
        EXIT;
      END;
      ItemTrackingLines."Select Entries".INVOKE;  // Open Item Tracking Summary for Select Line.

      IF Partial THEN BEGIN
        ItemTrackingLines.FIRST;
        WHILE TrackingQuantity > 0 DO BEGIN
          TrackingQuantity -= 1;
          ItemTrackingLines."Qty. to Handle (Base)".SETVALUE(0);  // Value to partially track the Items.
          ItemTrackingLines.NEXT;
        END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@23(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      // Assign Serial and Lot no based on requirments.
      CASE AssignTracking OF
        AssignTracking::SerialNo:
          BEGIN
            ItemTrackingLines."Assign Serial No.".INVOKE;  // Open Enter Quantity to Create Page for Create Serial No or with Lot No.
            EXIT;
          END;
        AssignTracking::LotNo:
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;  // Assign Lot No.
            EXIT;
          END;
      END;

      IF Partial AND (TrackingQuantity <> 0) THEN BEGIN
        ItemTrackingLines.LAST;
        WHILE TrackingQuantity > 0 DO BEGIN
          TrackingQuantity -= 1;
          ItemTrackingLines."Qty. to Invoice (Base)".SETVALUE(0);  // Value to partially track the Items for Invoice.
          ItemTrackingLines.PREVIOUS;
        END;
        EXIT;
      END;

      IF Partial AND VerifyQtyToHandle THEN BEGIN  // Using For Return Order.
        SelectItemLedgerEntry(ItemLedgerEntry,ItemLedgerEntry."Document Type"::"Sales Shipment",DocumentNo,GlobalItemNo);
        SetValueSerialAndLotNoOnItemTrackingLines(ItemTrackingLines,ItemLedgerEntry."Serial No.",ItemLedgerEntry."Lot No.");
        ItemTrackingLines."Quantity (Base)".SETVALUE(1);
        EXIT;
      END;

      IF VerifyQtyToHandle THEN BEGIN  // Using For Transfer Receipt.
        ItemTrackingLines."Qty. to Handle (Base)".ASSERTEQUALS(TrackingQuantity);
        EXIT;
      END;

      IF UpdateLotNo THEN BEGIN // Using for Sales Order
        ItemTrackingLines."Lot No.".ASSISTEDIT; // Open Item Tracking Summary for update line.
        EXIT;
      END;

      SelectEntriesOnItemTrackingLines(ItemTrackingLines);  // Open Item Tracking Summary for Select Line.
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSerialNoPageHandler@241(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      ReservationEntry@1004 : Record 337;
      SerialNo@1002 : Code[20];
      LotNo@1003 : Code[20];
    BEGIN
      // Assign Serial no based on requirments.
      IF AssignTracking = AssignTracking::SerialNo THEN BEGIN
        ItemTrackingLines."Assign Serial No.".INVOKE;  // Open Enter Quantity to Create Page for Create Serial No or with Lot No.
        EXIT;
      END;

      IF Partial THEN BEGIN
        FindReservationEntry(ReservationEntry,GlobalItemNo,DATABASE::"Purchase Line",DocumentNo);
        ItemTrackingLines.LAST;
        SetValueSerialAndLotNoOnItemTrackingLines(ItemTrackingLines,ReservationEntry."Serial No.",ReservationEntry."Lot No.");
        EXIT;
      END;

      IF ItemTrackingAction = ItemTrackingAction::AvailabilitySerialNo THEN BEGIN
        ItemTrackingLines.FIRST;
        SerialNo := ItemTrackingLines."Serial No.".VALUE;
        LotNo := ItemTrackingLines."Lot No.".VALUE;
        ItemTrackingLines.LAST;
        SetValueSerialAndLotNoOnItemTrackingLines(ItemTrackingLines,SerialNo,LotNo);
        EXIT;
      END;

      IF UpdateSerialNo THEN BEGIN
        ItemTrackingLines."Serial No.".ASSISTEDIT; // Open Item Tracking Summary for update line.
        EXIT;
      END;

      SelectEntriesOnItemTrackingLines(ItemTrackingLines);  // Open Item Tracking Summary for Select Line.
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingProductionPageHandler@231(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      ReservationEntry@1002 : Record 337;
    BEGIN
      // Assign Serial and Lot no based on requirments.
      CASE AssignTracking OF
        AssignTracking::SerialNo:
          BEGIN
            ItemTrackingLines."Assign Serial No.".INVOKE;  // Open Enter Quantity to Create Page for Create Serial No or with Lot No.
            EXIT;
          END;
        AssignTracking::LotNo:
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;  // Assign Lot No.
            EXIT;
          END;
      END;

      IF Partial THEN BEGIN  // For Lot No.
        CASE ItemTrackingAction OF
          ItemTrackingAction::AvailabilityLotNo:
            BEGIN
              FindReservationEntry(ReservationEntry,GlobalItemNo,DATABASE::"Transfer Line",DocumentNo);
              ItemTrackingLines."Lot No.".SETVALUE(ReservationEntry."Lot No.");
              ItemTrackingLines."Quantity (Base)".SETVALUE(TrackingQuantity);
            END;
          ItemTrackingAction::AvailabilitySerialNo:
            BEGIN
              FindReservationEntry(ReservationEntry,GlobalItemNo,DATABASE::"Transfer Line",DocumentNo);
              REPEAT
                ItemTrackingLines."Serial No.".SETVALUE(ReservationEntry."Serial No.");
                ItemTrackingLines."Quantity (Base)".SETVALUE(1);  // 1 For Serial No.
                ItemTrackingLines.NEXT;
              UNTIL ReservationEntry.NEXT = 0;
            END;
          ItemTrackingAction::None:
            BEGIN
              FindReservationEntry(ReservationEntry,GlobalItemNo,DATABASE::"Prod. Order Line",DocumentNo);
              ItemTrackingLines."Lot No.".SETVALUE(ReservationEntry."Lot No.");
              ItemTrackingLines."Quantity (Base)".SETVALUE(TrackingQuantity);
            END;
        END;
        EXIT;
      END;
      IF VerifyQtyToHandle THEN BEGIN
        CASE ItemTrackingAction OF
          ItemTrackingAction::AvailabilityLotNo:
            BEGIN
              FindReservationEntry(ReservationEntry,GlobalItemNo,DATABASE::"Prod. Order Component",DocumentNo);
              ItemTrackingLines."Lot No.".ASSERTEQUALS(ReservationEntry."Lot No.");
              ItemTrackingLines."Quantity (Base)".ASSERTEQUALS(TrackingQuantity);
            END;
          ItemTrackingAction::AvailabilitySerialNo:
            BEGIN
              ItemTrackingLines.FIRST;
              FindReservationEntry(ReservationEntry,GlobalItemNo,DATABASE::"Prod. Order Component",DocumentNo);
              REPEAT
                ItemTrackingLines."Serial No.".ASSERTEQUALS(ReservationEntry."Serial No.");
                ItemTrackingLines."Quantity (Base)".ASSERTEQUALS(1);
                ItemTrackingLines.NEXT;
              UNTIL ReservationEntry.NEXT = 0;
            END;
        END;
        EXIT;
      END;

      SelectEntriesOnItemTrackingLines(ItemTrackingLines);  // Open Item Tracking Summary for Select Line.
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingProductionSerialNoPageHandler@213(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      ReservationEntry@1002 : Record 337;
    BEGIN
      // Assign Serial and Lot no based on requirments.
      CASE AssignTracking OF
        AssignTracking::SerialNo:
          BEGIN
            ItemTrackingLines."Assign Serial No.".INVOKE;  // Open Enter Quantity to Create Page for Create Serial No or with Lot No.
            EXIT;
          END;
        AssignTracking::LotNo:
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;  // Assign Lot No.
            EXIT;
          END;
      END;

      IF Partial AND VerifyQtyToHandle THEN BEGIN
        ItemTrackingLines.FIRST;
        WHILE TrackingQuantity > 0 DO BEGIN
          TrackingQuantity -= 1;
          ItemTrackingLines."Quantity (Base)".SETVALUE(0);  // Set Quantity (Base) as Zero.
          ItemTrackingLines.NEXT;
        END;
        EXIT;
      END;

      IF Partial THEN BEGIN
        FindReservationEntry(ReservationEntry,GlobalItemNo,DATABASE::"Prod. Order Line",DocumentNo);
        WHILE TrackingQuantity > 0 DO BEGIN
          TrackingQuantity -= 1;
          ItemTrackingLines.NEW;
          ItemTrackingLines."Serial No.".SETVALUE(ReservationEntry."Serial No.");
          ItemTrackingLines."Quantity (Base)".SETVALUE(1);
          ReservationEntry.NEXT;
        END;
        EXIT;
      END;

      SelectEntriesOnItemTrackingLines(ItemTrackingLines);  // Open Item Tracking Summary for Select Line.
    END;

    [ModalPageHandler]
    PROCEDURE LotItemTrackingPageHandler@92(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      LotNoInformation@1003 : Record 6505;
      LotNoInformationList@1001 : TestPage 6508;
      ItemTrackingComments@1002 : TestPage 6506;
    BEGIN
      // Assign Lot no based on requirments.
      IF AssignTracking = AssignTracking::LotNo THEN BEGIN
        ItemTrackingLines."Assign Lot No.".INVOKE;  // Assign Lot No.
        ItemTrackingLines.LAST;
        LibraryItemTracking.CreateLotNoInformation(LotNoInformation,GlobalItemNo,'',ItemTrackingLines."Lot No.".VALUE);
        LotNoInformationList.TRAP;
        ItemTrackingLines.Reclass_LotNoInfoCard.INVOKE;

        ItemTrackingComments.TRAP;
        LotNoInformationList.Description.SETVALUE(Description);
        LotNoInformationList."Page Item Tracking Comments".INVOKE;
        ItemTrackingComments.Date.SETVALUE(WORKDATE);
        ItemTrackingComments.Comment.SETVALUE(Comment);
        ItemTrackingLines.OK.INVOKE;
        EXIT;
      END;

      ItemTrackingLines."Select Entries".INVOKE;  // Open Item Tracking Summary for Select Line.

      // Select Lot no based on requirments.
      IF Partial THEN BEGIN
        ItemTrackingLines.FIRST;
        ItemTrackingLines."Qty. to Handle (Base)".SETVALUE(TrackingQuantity);
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageQtyToHandleHandler@207(VAR ItemTrackingLines@1000 : TestPage 6510);
    VAR
      LineCount@1002 : Integer;
    BEGIN
      // Assign Serial and Lot no based on requirments.
      CASE AssignTracking OF
        AssignTracking::SerialNo:
          BEGIN
            ItemTrackingLines."Assign Serial No.".INVOKE;  // Open Enter Quantity to Create Page for Create Serial No or with Lot No.
            EXIT;
          END;
        AssignTracking::LotNo:
          BEGIN
            ItemTrackingLines."Assign Lot No.".INVOKE;  // Assign Lot No.
            EXIT;
          END;
      END;

      IF VerifyQtyToHandle THEN BEGIN  // Using For Transfer Receipt.
        ItemTrackingLines.LAST;
        REPEAT
          ItemTrackingLines."Qty. to Handle (Base)".ASSERTEQUALS(1);  // For Serial No.
          LineCount += 1;
        UNTIL NOT ItemTrackingLines.PREVIOUS;
        Assert.AreEqual(TrackingQuantity,LineCount,NumberOfLineEqualErr);  // Verify Number of line Tracking Line.
        EXIT;
      END;

      SelectEntriesOnItemTrackingLines(ItemTrackingLines);  // Open Item Tracking Summary for Select Line.
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPartialPageHandler@147(VAR ItemTrackingSummary@1000 : TestPage 6500);
    VAR
      TrackingQuantity2@1001 : Decimal;
    BEGIN
      // For Partial Tracking Set all Selected Quantity as 0.
      IF TrackingQuantity <> 0 THEN BEGIN
        ItemTrackingSummary.FIRST;
        TrackingQuantity2 := TrackingQuantity;
        WHILE TrackingQuantity2 > 0 DO BEGIN
          TrackingQuantity2 -= 1;
          ItemTrackingSummary."Selected Quantity".SETVALUE(0);  // Set Value to partially track the Items.
          ItemTrackingSummary.NEXT;
        END;

        // For Partial Tracking Set Selected Quantity as 1.
        ItemTrackingSummary.LAST;
        WHILE TrackingQuantity > 0 DO BEGIN
          TrackingQuantity -= 1;
          ItemTrackingSummary."Selected Quantity".SETVALUE(1);  // Set Value to partially track the Items.
          ItemTrackingSummary.PREVIOUS;
        END;
      END;

      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@61(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@12(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.CreateNewLotNo.SETVALUE(CreateNewLotNo);
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SerialPostedLinesPageHandler@60(VAR PostedItemTrackingLines@1000 : TestPage 6511);
    BEGIN
      PostedItemTrackingLines.LAST;
      PostedItemTrackingLines."Serial No.".LOOKUP;  // Open Serial No Information List for verify.
    END;

    [ModalPageHandler]
    PROCEDURE PostedLinesPageHandler@139(VAR PostedItemTrackingLines@1000 : TestPage 6511);
    VAR
      LineCount@1001 : Integer;
    BEGIN
      // Verify Quantity and Number of Line on Tracking Page.
      CASE AssignTracking OF
        AssignTracking::SerialNo:
          BEGIN
            PostedItemTrackingLines.FIRST;
            REPEAT
              PostedItemTrackingLines.Quantity.ASSERTEQUALS(SignFactor);  // Using SignFactor for Negative Value- Consumption.
              LineCount += 1;
            UNTIL NOT PostedItemTrackingLines.NEXT;
            Assert.AreEqual(TrackingQuantity,LineCount,NumberOfLineEqualErr);  // Verify Number of line Tracking Line.
          END;
        AssignTracking::LotNo:
          PostedItemTrackingLines.Quantity.ASSERTEQUALS(TrackingQuantity * SignFactor);
      END;
    END;

    [ModalPageHandler]
    PROCEDURE PostedLinesWarrantyDatePageHandler@158(VAR PostedItemTrackingLines@1000 : TestPage 6511);
    VAR
      LineCount@1001 : Integer;
    BEGIN
      // Verify Quantity and Number of Line on Tracking Page.
      PostedItemTrackingLines.FIRST;
      REPEAT
        PostedItemTrackingLines.Quantity.ASSERTEQUALS(1);
        PostedItemTrackingLines."Warranty Date".ASSERTEQUALS(
          CALCDATE(ItemTrackingCodeSerialSpecific."Warranty Date Formula",WORKDATE));
        LineCount += 1;
      UNTIL NOT PostedItemTrackingLines.NEXT;
      Assert.AreEqual(TrackingQuantity,LineCount,NumberOfLineEqualErr);  // Verify Number of line Tracking Line.
    END;

    [ModalPageHandler]
    PROCEDURE LotPostedLinesPageHandler@129(VAR PostedItemTrackingLines@1000 : TestPage 6511);
    BEGIN
      PostedItemTrackingLines.LAST;
      PostedItemTrackingLines."Lot No.".LOOKUP;  // Open Lot No Information List for verify.
    END;

    [ModalPageHandler]
    PROCEDURE SerialNoListPageHandler@70(VAR SerialNoInformationList@1000 : TestPage 6509);
    VAR
      ItemTrackingComments@1001 : TestPage 6506;
    BEGIN
      // Verify Item Tracking for Serial.
      ItemTrackingComments.TRAP;
      SerialNoInformationList.Description.ASSERTEQUALS(Description);
      SerialNoInformationList."Page Item Tracking Comments".INVOKE;
      ItemTrackingComments.Date.ASSERTEQUALS(WORKDATE);
      ItemTrackingComments.Comment.ASSERTEQUALS(Comment);
    END;

    [ModalPageHandler]
    PROCEDURE LotNoListPageHandler@131(VAR LotNoInformationList@1000 : TestPage 6508);
    VAR
      ItemTrackingComments@1001 : TestPage 6506;
    BEGIN
      // Verify Item Tracking for Lot.
      ItemTrackingComments.TRAP;
      LotNoInformationList.Description.ASSERTEQUALS(Description);
      LotNoInformationList."Page Item Tracking Comments".INVOKE;
      ItemTrackingComments.Date.ASSERTEQUALS(WORKDATE);
      ItemTrackingComments.Comment.ASSERTEQUALS(Comment);
    END;

    [ModalPageHandler]
    PROCEDURE PickSelectionPageHandler@52(VAR PickSelection@1000 : Page 7343;VAR Response@1001 : Action);
    VAR
      WhsePickRequest@1002 : Record 7325;
    BEGIN
      // Create Pick.
      WhsePickRequest.SETRANGE("Location Code",LocationGreen.Code);
      WhsePickRequest.SETRANGE("Document No.",DocumentNo);
      WhsePickRequest.FINDFIRST;
      PickSelection.SETRECORD(WhsePickRequest);
      Response := ACTION::LookupOK;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationPageHandler@55(VAR Reservation@1000 : TestPage 498);
    BEGIN
      IF NOT CancelReservationCurrentLine THEN BEGIN
        Reservation."Reserve from Current Line".INVOKE;  // Reserve.
        Reservation.OK.INVOKE;
        EXIT;
      END;
      Reservation.CancelReservationCurrentLine.INVOKE;  // Cancel Reservation.
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ReservationAvailablePageHandler@223(VAR Reservation@1000 : TestPage 498);
    BEGIN
      Reservation.FIRST;
      Reservation."Summary Type".ASSERTEQUALS(ItemLedgerEntrySummaryTypeTxt);
      Reservation.NEXT;
      Reservation."Summary Type".ASSERTEQUALS(TransferLineSummaryTypeTxt);
      Reservation.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SalesListPageHandler@88(VAR SalesList@1000 : TestPage 45);
    BEGIN
      SalesList.FILTER.SETFILTER("No.",DocumentNo);
      SalesList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemLedgerEntriesPageHandler@166(VAR ItemLedgerEntries@1000 : TestPage 38);
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      VerifyItemLedgerEntries(ItemLedgerEntries,ItemLedgerEntry."Entry Type"::Output,TrackingQuantity);
    END;

    [ModalPageHandler]
    PROCEDURE ItemLedgerEntriesPositiveAdjmtPageHandler@225(VAR ItemLedgerEntries@1000 : TestPage 38);
    VAR
      ItemLedgerEntry@1001 : Record 32;
    BEGIN
      VerifyItemLedgerEntries(ItemLedgerEntries,ItemLedgerEntry."Entry Type"::"Positive Adjmt.",1);  // One for Serial No.
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingListPageHandler@164(VAR ItemTrackingList@1000 : TestPage 6507);
    BEGIN
      ItemTrackingList.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GetShipmentLinesPageHandler@267(VAR GetShipmentLines@1000 : TestPage 5708);
    BEGIN
      GetShipmentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE GetReturnShipmentLinesPageHandler@280(VAR GetReturnShipmentLines@1000 : TestPage 6648);
    BEGIN
      GetReturnShipmentLines.OK.INVOKE;
    END;

    [MessageHandler]
    PROCEDURE TrackingAlreadyExistMessageHandler@243(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,TrackingAlreadyExistMsg) > 0,Message);
    END;

    [MessageHandler]
    PROCEDURE CombinedShipmentsMessageHandler@246(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,CombinedShipmentsMsg) > 0,Message);
    END;

    [MessageHandler]
    PROCEDURE CombinedReturnReceiptMessageHandler@247(Message@1000 : Text[1024]);
    BEGIN
      Assert.IsTrue(STRPOS(Message,CombinedReturnReceiptMsg) > 0,Message);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@82(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,ReservationsCancelQst) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE NegativeAdjustmentConfirmHandler@251(ConfirmMessage@1000 : Text[1024];VAR Reply@1003 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConsumptionMissingConfirmHandler@137(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,ConsumptionMissingQst) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE SynchronizeItemTrackingConfirmHandler@157(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,SynchronizeItemTrackingQst) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE AvailabilityWarningsConfirmHandler@112(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      MessageCounter += 1;
      CASE MessageCounter OF
        1:
          Assert.IsTrue(STRPOS(ConfirmMessage,AvailabilityWarningsMsg) > 0,ConfirmMessage);
        2:
          Assert.IsTrue(STRPOS(ConfirmMessage,LibraryInventory.GetReservConfirmText) > 0,ConfirmMessage);
        3:
          Assert.IsTrue(STRPOS(ConfirmMessage,SomeOutputMissingMsg) > 0,ConfirmMessage);
      END;
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE AvailabilityWarningsAndReserveConfirmHandler@230(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      MessageCounter += 1;
      CASE MessageCounter OF
        1,3:
          Assert.IsTrue(STRPOS(ConfirmMessage,AvailabilityWarningsMsg) > 0,ConfirmMessage);
        2:
          Assert.IsTrue(STRPOS(ConfirmMessage,LibraryInventory.GetReservConfirmText) > 0,ConfirmMessage);
      END;
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE AvailabilityConfirmHandler@261(ConfirmMessage@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Assert.IsTrue(STRPOS(ConfirmMessage,AvailabilityWarningsMsg) > 0,ConfirmMessage);
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE DeleteLinesWithTrackingConfirmHandlerTrue@272(ConfirmMessage@1000 : Text[1024];VAR Reply@1003 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [StrMenuHandler]
    PROCEDURE StrMenuHandler@165(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instructions@1002 : Text[1024]);
    BEGIN
      Choice := 1;  // Outbound.
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingAssignSerialPageHandler@287(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      // Assign Serial
      ItemTrackingLines."Assign Serial No.".INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreateOKPageHandler@286(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE SalesListDocPageHandler@288(VAR SalesList@1000 : TestPage 45);
    BEGIN
      SalesList.FILTER.SETFILTER("No.",LibraryVariableStorage.DequeueText);
      SalesList.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Item Tracking] [SCM]
      Unsupported version tags:
      DK: Unable to Execute

      Test SCM RTAM.
       1. Verify Warehouse Receipt Tracking line for assign Serial number at partial Warehouse put-away.
       2. Verify Posted Purchase Invoice line for assign Serial number at partial Warehouse put-away.
       3. Verify Posted Purchase Invoice line for assign Serial/Lot number at full put-away.
       4. Verify Posted Purchase Invoice line for assign Lot numbers at full warehouse put-away.
       5. Verify Warehouse Receipt Tracking line for assign Serial/Lot to multiple Purchase Lines at partial Warehouse put-away.
       6. Verify Posted Purchase Invoice line for assign Serial/Lot to multiple Purchase lines at partial Warehouse put-away.
       7. Verify Posted Purchase Invoice line for assign Lot to multiple Purchase lines at full Warehouse put-away.
       8. Verify Posted Sales Invoice line for select a serial number for full Warehouse Shipment.
       9. Verify Posted Sales Shipment Line for select serial/Lot number for partial Warehouse Shipment.
      10. Verify Posted Sales Invoice Line for select serial/Lot number for partial Warehouse Shipment.
      11. Verify Posted Sales Invoice Line for select serial/Lot number for multiple Sales lines for full Shipment.
      12. Verify Posted Sales Invoice Line for Select Lot number for partial Shipment.
      13. Verify Posted Sales Invoice Line for Select Lot number for partial Shipment only partial available.
      14. Verify Posted Sales Invoice Line for Select serial/Lot number for partial Shipment.
      15. Verify Posted Sales Invoice Line for Select serial/Lot number for multiple partial Shipment.
      16. Verify Error message for serial/Lot number not available after Reserved.
      17. Verify Posted Sales Invoice Line for Select serial/Lot number available after cancel Reservation.
      18. Verify Error message for serial/Lot number available in inventory but reserved for outbound order
      19. Verify Posted Sales Invoice Line for Select serial/Lot number available in inventory but reserved for outbound order after cancel Reservation.
      20. Verify Posted Sales Invoice Line for Item available in different Lots only.
      21. Verify Error message for Reserve serial number in inventory.
      22. Verify Posted Sales Invoice Line for Reserve serial number in inventory and cancel Reservation.
      23. Verify Item Ledger Entry for serial/lot number using method specific for partial Invoice.
      24. Verify Item Ledger Entry for serial/lot number using method specific for Complete Invoice.
      25. Verify Item Ledger Entry for serial/lot number using method specific and Post Sales order using Partial Quantity.
      26. Verify Finished Production Tracking line for Serial/lot, Production Order with Post multiple Partial Output with Tracking.
      27. Verify Finished Production Tracking line for Serial/lot, Production Order with Post Full Output with Tracking.
      28  Verify Finished Production Tracking line for Serial/lot, Production Order with Tracking.
      29. Verify Finished Production and Component Tracking line for Serial and Lot, Production Order with Tracking on Component, Post Output and Consumption.
      30. Verify Finished Production and Component Tracking line for Serial and Lot, Production Order Post Output and Consumption with Tracking.
      31. Verify Finished Production and Component Tracking line for Serial and Lot, Production Order, Create Pick from Production,Post Output and Consumption with Tracking.
      32. Verify Warehouse Shipment line, Create Warehouse shipment from Transfer Order.
      33. Verify Posted Sales and Purchase Invoice line for Serial/Lot, Using Drop Shipment.
      34. Verify Item Ledger Entry for Serial/Lot for Purchase Return.
      35. Verify Item Ledger Entry for Serial/Lot for Sales Return.
      36. Verify Posted Purchase Invoive Line for Serial No with Purchase Tracking Inbound required.
      37. Verify Posted Return Shipment Line for Serial No with Purchase Tracking Inbound and Outbound required.
      38. Verify Posted Return Shipment Line for Serial No with Purchase Tracking Outbound required.
      39. Verify Posted Sales Invoive Line for Serial No with Sales Tracking Outbound required.
      40. Verify Posted Return Receipt Line for Serial No with Sales Tracking Outbound and Inbound required.
      41. Verify Posted Return Receipt Line for Serial No with Sales Tracking Inbound required.
      42. Verify Item Ledger Entry for Serial No with Positive adjustment Tracking Inbound required.
      43. Verify Item Ledger Entry for Serial No with Positive adjustment Tracking Outbound required.
      44. Verify Item Ledger Entry for Serial No with Negative adjustment Tracking Inbound required.
      45. Verify Item Ledger Entry for Serial No with Negative adjustment Tracking Outbound required.
      46. Verify Posted Purchase Receipt for Serial No with warehouse Tracking required.
      47. Verify Error message when post Transfer Order without Tracking with Transfer Tracking required.
      48. Verify Posted Sales Shipment for Serial No, SN Specific Tracking with Warranty Date Formula.
      49. Verify Error Message for Serial No, SN Specific Tracking with "Man. Warranty Date Entry Reqd.".
      50. Verify Posted Sales Shipment for Serial No, SN Specific Tracking with "Man. Warranty Date Entry Reqd.".
      51. Verify Error message for Lot No, Reserve lot numbers from Purchase Order to Transfer Order, Post Transfer Order without Tracking.
      52. Verify Error message for Serial No, Reserve Serial numbers from Purchase Order to Transfer Order, Post Transfer Order without Tracking.
      53. Verify Receipt Tracking Entries on Transfer Order for Lot No, Reserve lot numbers from Purchase Order to Transfer Order.
      54. Verify Receipt Tracking Entries on Transfer Order for Serial No, Reserve Serial numbers from Purchase Order to Transfer Order.
      55. Verify error message for Lot No, Reserve Lot numbers from Production Order to Sales Order and Partial Post Output.
      56. Verify error message for Serial No, Reserve Serial numbers from Production Order to Sales Order and Partial Post Output.
      57. Verify error message for Lot No, Reserve Lot numbers from Production Order to Sales Order and Partial Post Output and Post Sales Order with Partial Tracking.
      58. Verify Item Ledger entry for Lot No, Reserve Lot numbers from Production Order to Sales Order.
      59. Verify Availability Lot No. field must be Yes on the Item Tracking Lines page after creating a Purchase Order with Lot No.
      60. Verify Availability Serial No. field must be Yes on the Item Tracking Lines page after creating a Purchase Order with Serial No.
      61. Verify error message for Serial No, Reserve Serial numbers from Production Order to Sales Order and Partial Post Output and Post Sales Order with Partial Tracking.
      62. Verify Posted Sales Invoice Line for Serial No, Reserve Serial numbers from Production Order to Sales Order.
      63. Verify Posted Sales Shipment line for Serial No, Reserve Serial numbers from ILE to Sales Order.
      64. Verify Available Reserve line for Lot No, Reserve Lot No from Transfer order to Production Order Component.
      65. Verify Available Reserve line for Serial No, Reserve Serial No from Transfer order to Production Order Component.
      66. Verify Tracking line on Consumption Item Journal line for Lot No, Reserve Lot No from Transfer Order to Consumption.
      67. Verify Tracking line on Consumption Item Journal line for Serial No, Reserve Serial No from Transfer Order to Consumption.
      68. Verify message for Serial No, Purchase Order with two identical Serial No.
      69. Verify message for Serial No, Sales Order with two identical Serial No.
      70. Verify Error message for Serial No, Purchase Order with same Serial No in inventory cannot be posted.
      71. Verify Error message for Serial No, Sales Order with Serial No with non-inventory cannot be posted.
      72. Verify Posted Sales Invoice for Serial No, Using Combined Shipment.
      73. Verify Posted Sales Credit Memo for Serial No, Using Combined Receipt.
      74. Verify Transfer Order shipment / receipt with partial posting.
      75. Verify Error message when update Serial No by ASSISTEDIT button on Sales Order.
      76. Verify Error message when update Lot No by ASSISTEDIT button on Sales Order.

        Covers Test cases :
        ------------------------------------------------------------------------------
         Test Function                                                       TFS ID
        ------------------------------------------------------------------------------
        WhseReceiptForPartialWhsePutAwaySerialNo                             265770
        PostedPurchaseInvWhsePutAwaySerialNo                                 265770
        PostedPurchaseInvFullWhsePutAwaySerialNoLotNo                        265770
        PostedPurchaseInvFullWhsePutAwayLotNo                                265770
        WhseReceiptForMultiLinePartialWhsePutAwaySerialNoLotNo               265770
        PostedPurchaseInvMultiLineWhsePutAwaySerialNoLotNo                   265770
        PostedPurchaseInvMultiLineFullWhsePutAwayLotNo                       265770
        PostedSalesInvForFullWarehouseShipmentSerialNo                       265772
        PostedSalesShipmentForPartialWhseShipmentSerialNoLotNo               265772
        PostedSalesInvForPartialWhseShipmentSerialLotNo                      265772
        PostedSalesInvForMultiLineShipmentSerialLotNo                        265772
        PostedSalesInvForPartialShipmentLotNo                                265772
        PostedSalesInvForAvailablePartialShipmentLotNo                       268067
        PostedSalesInvForPartialShipmentSerialNoLotNo                        265772
        PostedSalesInvForMultiPartialShipmentSerialNoLotNo                   265772
        SalesOrderReservedSerialLotNoError                                   268067
        SalesOrderCancelReservationSerialLotNo                               268067
        SalesOrderReservedForOutboundOrderError                              268067
        SalesOrderCancelReservationForOutboundOrder                          268067
        PostedSalesInvoiceLineDifferentLots                                  268067
        SalesOrderReserveSerialNoWithInventoryError                          268067
        SalesOrderCancelReserveSerialNoWithOutInventoryError                 268067
        PurchOrderPartialInvoiceWithMethodSpecific                           268067
        PurchOrderCompleteInvoiceWithMethodSpecific                          268067
        PostedSalesInvoiceWithMethodSpecific                                 268067

        Covers Test cases :
        ------------------------------------------------------------------------------
         Test Function                                                       TFS ID
        ------------------------------------------------------------------------------
        ProductionOrderWithTrackingAndMultipleOutputSerialNoLotNo            126131
        ProductionOrderWithTrackingAndOutputSerialNoLotNo                    126131
        ProductionOrderWithTrackingSerialNoLotNo                             126131
        ProductionOrderTrackingOnComponentSerialNoLotNo                      121569
        ProductionOrderTrackingOnConsumptionSerialNoLotNo                    121569
        ProductionOrderWithWhseShipmentConsumptionAndOutputSerialNoLotNo     121569
        WhsePickFromTransferOrderSerialNo                                    121570

        Covers Test cases :
        ------------------------------------------------------------------------------
         Test Function                                                       TFS ID
        ------------------------------------------------------------------------------
        PurchaseOrderWithDropShipmentSerialNoLotNo                      121566,121567
        PurchaseReturnSerialNoLotNo                                          121568
        SalesReturnSerialNoLotNo                                             126126
        PurchaseTrackingInboundSerialNo                                      126134
        PurchaseTrackingInboundAndOutboundSerialNo                           126134
        PurchaseTrackingOutboundSerialNo                                     126134
        SalesTrackingOutboundSerialNo                                        126135
        SalesTrackingInboundAndOutboundSerialNo                              126135
        SalesTrackingInboundSerialNo                                         126135

        Covers Test cases :
        ------------------------------------------------------------------------------
         Test Function                                                       TFS ID
        ------------------------------------------------------------------------------
        PositiveAdjmtTrackingInboundSerialNo                                 126136
        PositiveAdjmtTrackingOutboundSerialNo                                126136
        NegativeAdjmtTrackingInboundSerialNo                                 126136
        NegativeAdjmtTrackingOutboundSerialNo                                126136
        PurchaseWithWarehouseTrackingSerialNo                                126137
        TransferOrderWithTransferTrackingSerialNoError                       126138

        Covers Test cases :
        --------------------------------------------------------------------------------------
         Test Function                                                                TFS ID
        --------------------------------------------------------------------------------------
        SalesOrderWithWarrantyDateFormulaAndSerialNo                                  126139
        SalesOrderWithWarrantyDateRequiredAndSerialNoError                            126139
        SalesOrderWithWarrantyDateRequiredAndSerialNo                                 126139
        ReserveLotNoOnPurchaseOrderFromTransferOrderPostingError                      126141
        ReserveLotNoOnPurchaseOrderFromTransferOrder                                  126141
        ReserveLotNoOnProdOrderFromSalesOrderPartialOutputPostingError                121572
        ReserveLotNoOnProdOrderFromSalesOrderAndSalesWithPartialTrackingPostingError  121572
        ReserveLotNoOnProdOrderFromSalesOrderReservedQuantity                         121572

        Covers Test cases :
        ------------------------------------------------------------------------------
         Test Function                                                       TFS ID
        ------------------------------------------------------------------------------
        PurchaseOrderWithItemTrackingLotNoAvailability                       128122
        PurchaseOrderWithItemTrackingSerialNoAvailability                    128122

        Covers Test cases :
        -------------------------------------------------------------------------------------------------------
         Test Function                                                                         TFS ID
        -------------------------------------------------------------------------------------------------------
        ReserveSerialNoOnPurchaseOrderFromTransferOrderPostingError                     121573,128817,129264
        ReserveSerialNoOnPurchaseOrderFromTransferOrder                                 121573,128817,129264
        ReserveSerialNoOnProdOrderFromSalesOrderPartialOutputPostingError               126144,128817,129264
        ReserveSerialNoOnProdOrderFromSalesOrderAndSalesWithPartialTrackingPostingError 126144,128817,129264
        ReserveSerialNoOnProdOrderFromSalesOrderAndSalesWithTrackingPosting             126144,128817,129264
        ReserveSerialNoOnItemLedgerEntryFromSalesOrder                                  126143,128817,129264
        ReserveOnTransferOrderFromProdOrderComponentAvailableLotNo                      126142,128817,129264
        ReserveOnTransferOrderFromProdOrderComponentAvailableSerialNo                   121574,128817,129264
        ReserveLotNoOnTransferOrderFromConsumption                                      126142,128817,129264
        ReserveSerialNoOnTransferOrderFromConsumption                                   121574,128817,129264

        Covers Test cases :
        ------------------------------------------------------------------------------
         Test Function                                                       TFS ID
        ------------------------------------------------------------------------------
        PurchaseOrderWithSameSerialNo                                        129265
        SalesOrderWithSameSerialNo                                           129265
        PurchaseOrdersWithSameSerialNoOnInventoryPostingError                129265
        SalesOrderWithoutSerialNoOnInventoryPostingError                     129265
        PostedSalesInvForCombinedShipmentWithSerialNo                        129267
        PostedSalesCrMemoForCombinedReceiptWithSerialNo                      129267

        Covers Test cases :
        ------------------------------------------------------------------------------
         Test Function                                                       TFS ID
        ------------------------------------------------------------------------------
        SalesOrderWithSerialItemTracking                                     91856
        SalesOrderWithLotItemTraking                                         91856
    }
    END.
  }
}

