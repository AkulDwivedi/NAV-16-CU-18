OBJECT Table 37 Sales Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.49326,NAVIN9.00.00.49326,TFS225680;
  }
  PROPERTIES
  {
    Permissions=TableData 16531=ri;
    OnInsert=BEGIN
               TestStatusOpen;
               GetSalesHeader;
               IF SalesHeader."Free Supply" THEN
                 TESTFIELD("Price Inclusive of Tax",FALSE);
               IF "Price Inclusive of Tax" THEN BEGIN
                 SalesHeader.TESTFIELD("VAT Exempted",FALSE);
                 SalesHeader.TESTFIELD("Export or Deemed Export",FALSE);
               END;

               IF Quantity <> 0 THEN
                 ReserveSalesLine.VerifyQuantity(Rec,xRec);
               LOCKTABLE;
               SalesHeader."No." := '';
               IF Type = Type::Item THEN
                 IF SalesHeader.InventoryPickConflict("Document Type","Document No.",SalesHeader."Shipping Advice") THEN
                   ERROR(Text056,SalesHeader."Shipping Advice");
               IF ("Deferral Code" <> '') AND (GetDeferralAmount <> 0) THEN
                 UpdateDeferralAmounts;
             END;

    OnModify=BEGIN
               GetSalesHeader;
               IF SalesHeader."Free Supply" THEN
                 TESTFIELD("Price Inclusive of Tax",FALSE);
               IF "Price Inclusive of Tax" THEN BEGIN
                 SalesHeader.TESTFIELD("VAT Exempted",FALSE);
                 SalesHeader.TESTFIELD("Export or Deemed Export",FALSE);
               END;
               IF ("Document Type" = "Document Type"::"Blanket Order") AND
                  ((Type <> xRec.Type) OR ("No." <> xRec."No."))
               THEN BEGIN
                 SalesLine2.RESET;
                 SalesLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 SalesLine2.SETRANGE("Blanket Order No.","Document No.");
                 SalesLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF SalesLine2.FINDSET THEN
                   REPEAT
                     SalesLine2.TESTFIELD(Type,Type);
                     SalesLine2.TESTFIELD("No.","No.");
                   UNTIL SalesLine2.NEXT = 0;
               END;

               IF ((Quantity <> 0) OR (xRec.Quantity <> 0)) AND ItemExists(xRec."No.") AND NOT FullReservedQtyIsForAsmToOrder THEN
                 ReserveSalesLine.VerifyChange(Rec,xRec);
             END;

    OnDelete=VAR
               CapableToPromise@1000 : Codeunit 99000886;
               JobCreateInvoice@1002 : Codeunit 1002;
               SalesCommentLine@1003 : Record 44;
               SalesLineDetailBuffer@1500000 : Record 16583;
               DetailTaxEntryBuffer@1500001 : Record 16480;
               TransactionType@1500002 : 'Purchase,Sale';
             BEGIN
               TestStatusOpen;
               IF NOT StatusCheckSuspended AND (SalesHeader.Status = SalesHeader.Status::Released) AND
                  (Type IN [Type::"G/L Account",Type::"Charge (Item)",Type::Resource])
               THEN
                 VALIDATE(Quantity,0);

               IF (Quantity <> 0) AND ItemExists("No.") THEN BEGIN
                 ReserveSalesLine.DeleteLine(Rec);
                 CALCFIELDS("Reserved Qty. (Base)");
                 TESTFIELD("Reserved Qty. (Base)",0);
                 IF "Shipment No." = '' THEN
                   TESTFIELD("Qty. Shipped Not Invoiced",0);
                 IF "Return Receipt No." = '' THEN
                   TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                 WhseValidateSourceLine.SalesLineDelete(Rec);
               END;

               IF ("Document Type" = "Document Type"::Order) AND (Quantity <> "Quantity Invoiced") THEN
                 TESTFIELD("Prepmt. Amt. Inv.","Prepmt Amt Deducted");

               CleanSpecialOrderFieldsAndCheckAssocPurchOrder;
               NonstockItemMgt.DelNonStockSales(Rec);

               IF "Document Type" = "Document Type"::"Blanket Order" THEN BEGIN
                 SalesLine2.RESET;
                 SalesLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 SalesLine2.SETRANGE("Blanket Order No.","Document No.");
                 SalesLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF SalesLine2.FINDFIRST THEN
                   SalesLine2.TESTFIELD("Blanket Order Line No.",0);
               END;

               IF Type = Type::Item THEN BEGIN
                 ATOLink.DeleteAsmFromSalesLine(Rec);
                 DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
               END;

               IF Type = Type::"Charge (Item)" THEN
                 DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");

               CapableToPromise.RemoveReqLines("Document No.","Line No.",0,FALSE);

               IF "Line No." <> 0 THEN BEGIN
                 SalesLine2.RESET;
                 SalesLine2.SETRANGE("Document Type","Document Type");
                 SalesLine2.SETRANGE("Document No.","Document No.");
                 SalesLine2.SETRANGE("Attached to Line No.","Line No.");
                 SalesLine2.SETFILTER("Line No.",'<>%1',"Line No.");
                 SalesLine2.DELETEALL(TRUE);
               END;

               GetSalesHeader;

               SalesLineDetailBuffer.RESET;
               SalesLineDetailBuffer.SETRANGE("Document Type","Document Type");
               SalesLineDetailBuffer.SETRANGE("Document No.","Document No.");
               SalesLineDetailBuffer.SETRANGE("Document Line No.","Line No.");
               SalesLineDetailBuffer.DELETEALL;

               StrOrderDetails.RESET;
               StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
               StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Sale);
               StrOrderDetails.SETRANGE("Document Type","Document Type");
               StrOrderDetails.SETRANGE("Document No.","Document No.");
               StrOrderDetails.SETRANGE("Document Line No.","Line No.");
               StrOrderDetails.SETRANGE("Price Inclusive of Tax",TRUE);
               StrOrderDetails.DELETEALL;

               StrOrderLine.SETRANGE(Type,StrOrderLine.Type::Sale);
               StrOrderLine.SETRANGE("Document Type","Document Type");
               StrOrderLine.SETRANGE("Document No.","Document No.");
               StrOrderLine.SETRANGE("Line No.","Line No.");
               StrOrderLine.DELETEALL;

               IF "Job Contract Entry No." <> 0 THEN
                 JobCreateInvoice.DeleteSalesLine(Rec);

               SalesCommentLine.SETRANGE("Document Type","Document Type");
               SalesCommentLine.SETRANGE("No.","Document No.");
               SalesCommentLine.SETRANGE("Document Line No.","Line No.");
               IF NOT SalesCommentLine.ISEMPTY THEN
                 SalesCommentLine.DELETEALL;
               IF ("Line No." <> 0) AND ("Attached to Line No." = 0) THEN BEGIN
                 SalesLine2.COPY(Rec);
                 IF SalesLine2.FIND('<>') THEN BEGIN
                   SalesLine2.VALIDATE("Recalculate Invoice Disc.",TRUE);
                   SalesLine2.MODIFY;
                 END;
               END;

               IF "Deferral Code" <> '' THEN
                 DeferralUtilities.DeferralCodeOnDelete(
                   DeferralUtilities.GetSalesDeferralDocType,'','',
                   "Document Type","Document No.","Line No.");
               IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN BEGIN
                 GenJnlLine.RESET;
                 GenJnlLine.SETFILTER("Journal Template Name",'%1','');
                 GenJnlLine.SETFILTER("Journal Batch Name",'%1','');
                 GenJnlLine.SETRANGE("Document No.","Document No.");
                 GenJnlLine.DELETEALL(TRUE);
               END;

               DetailTaxEntryBuffer.RESET;
               DetailTaxEntryBuffer.SETRANGE("Document Type","Document Type");
               DetailTaxEntryBuffer.SETRANGE("Document No.","Document No.");
               DetailTaxEntryBuffer.SETRANGE("Line No.","Line No.");
               DetailTaxEntryBuffer.SETRANGE("Transaction Type",DetailTaxEntryBuffer."Transaction Type"::Sale);
               DetailTaxEntryBuffer.DELETEALL;
               GSTManagement.DeleteGSTBuffer(TransactionType::Sale,"Document Type","Document No.","Line No.");
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=[ENU=Sales Line;
               ENN=Sales Line];
    LookupPageID=Page516;
    DrillDownPageID=Page516;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ENN=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 5   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                GetSalesHeader;

                                                                TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Shipment No.",'');

                                                                TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Receipt No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                CheckAssocPurchOrder(FIELDCAPTION(Type));

                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  CASE xRec.Type OF
                                                                    Type::Item:
                                                                      BEGIN
                                                                        ATOLink.DeleteAsmFromSalesLine(Rec);
                                                                        IF Quantity <> 0 THEN BEGIN
                                                                          SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
                                                                          CALCFIELDS("Reserved Qty. (Base)");
                                                                          TESTFIELD("Reserved Qty. (Base)",0);
                                                                          ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                          WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                        END;
                                                                      END;
                                                                    Type::"Fixed Asset":
                                                                      IF Quantity <> 0 THEN
                                                                        SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
                                                                    Type::"Charge (Item)":
                                                                      DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  END;
                                                                  IF xRec."Deferral Code" <> '' THEN
                                                                    DeferralUtilities.RemoveOrSetDeferralSchedule('',
                                                                      DeferralUtilities.GetSalesDeferralDocType,'','',
                                                                      xRec."Document Type",xRec."Document No.",xRec."Line No.",
                                                                      xRec.GetDeferralAmount,xRec."Posting Date",'',xRec."Currency Code",TRUE);
                                                                END;
                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                TempSalesLine := Rec;
                                                                INIT;
                                                                IF xRec."Line Amount" <> 0 THEN
                                                                  "Recalculate Invoice Disc." := TRUE;

                                                                Type := TempSalesLine.Type;
                                                                "System-Created Entry" := TempSalesLine."System-Created Entry";

                                                                IF Type = Type::Item THEN
                                                                  "Allow Item Charge Assignment" := TRUE
                                                                ELSE
                                                                  "Allow Item Charge Assignment" := FALSE;
                                                                IF Type = Type::Item THEN BEGIN
                                                                  IF SalesHeader.InventoryPickConflict("Document Type","Document No.",SalesHeader."Shipping Advice") THEN
                                                                    ERROR(Text056,SalesHeader."Shipping Advice");
                                                                  IF SalesHeader.WhseShpmntConflict("Document Type","Document No.",SalesHeader."Shipping Advice") THEN
                                                                    ERROR(Text052,SalesHeader."Shipping Advice");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENN=Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)";
                                                                    ENN=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)"];
                                                   OptionString=[ ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST(G/L Account),
                                                                          System-Created Entry=CONST(No)) "G/L Account" WHERE (Direct Posting=CONST(Yes),
                                                                                                                               Account Type=CONST(Posting),
                                                                                                                               Blocked=CONST(No))
                                                                                                                               ELSE IF (Type=CONST(G/L Account),
                                                                                                                                        System-Created Entry=CONST(Yes)) "G/L Account"
                                                                                                                                        ELSE IF (Type=CONST(Item)) Item
                                                                                                                                        ELSE IF (Type=CONST(Resource)) Resource
                                                                                                                                        ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                                        ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   OnValidate=VAR
                                                                SalesLine@1500000 : Record 37;
                                                                PrepaymentMgt@1002 : Codeunit 441;
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                CheckItemAvailable(FIELDNO("No."));
                                                                SalesSetup.GET;
                                                                IF (xRec."No." <> "No.") AND (Quantity <> 0) THEN BEGIN
                                                                  TESTFIELD("Qty. to Asm. to Order (Base)",0);
                                                                  CALCFIELDS("Reserved Qty. (Base)");
                                                                  TESTFIELD("Reserved Qty. (Base)",0);
                                                                  IF Type = Type::Item THEN
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;

                                                                TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Shipment No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Receipt No.",'');

                                                                IF "No." = '' THEN
                                                                  ATOLink.DeleteAsmFromSalesLine(Rec);
                                                                CheckAssocPurchOrder(FIELDCAPTION("No."));
                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                TempSalesLine := Rec;
                                                                INIT;
                                                                IF xRec."Line Amount" <> 0 THEN
                                                                  "Recalculate Invoice Disc." := TRUE;
                                                                Type := TempSalesLine.Type;
                                                                "No." := TempSalesLine."No.";
                                                                IF "No." = '' THEN
                                                                  EXIT;
                                                                IF Type <> Type::" " THEN
                                                                  Quantity := TempSalesLine.Quantity;

                                                                "System-Created Entry" := TempSalesLine."System-Created Entry";
                                                                GetSalesHeader;
                                                                InitHeaderDefaults(SalesHeader);
                                                                CALCFIELDS("Substitution Available");

                                                                "Promised Delivery Date" := SalesHeader."Promised Delivery Date";
                                                                "Requested Delivery Date" := SalesHeader."Requested Delivery Date";
                                                                "Invoice Type" := SalesHeader."Invoice Type";
                                                                "Shipment Date" :=
                                                                  CalendarMgmt.CalcDateBOC(
                                                                    '',
                                                                    SalesHeader."Shipment Date",
                                                                    CalChange."Source Type"::Location,
                                                                    "Location Code",
                                                                    '',
                                                                    CalChange."Source Type"::"Shipping Agent",
                                                                    "Shipping Agent Code",
                                                                    "Shipping Agent Service Code",
                                                                    FALSE);
                                                                UpdateDates;

                                                                CASE Type OF
                                                                  Type::" ":
                                                                    BEGIN
                                                                      StdTxt.GET("No.");
                                                                      Description := StdTxt.Description;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                  Type::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("No.");
                                                                      GLAcc.CheckGLAcc;
                                                                      IF NOT "System-Created Entry" THEN
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      Description := GLAcc.Name;
                                                                      "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := GLAcc."Tax Group Code";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                      "Service Tax Group" := GLAcc."Service Tax Group Code";
                                                                      IF SalesHeader."Location Code" <> '' THEN BEGIN
                                                                        GetLocation(SalesHeader."Location Code");
                                                                        "Service Tax Registration No." := Location."Service Tax Registration No.";
                                                                      END ELSE BEGIN
                                                                        GetCompanyInformation;
                                                                        "Service Tax Registration No." := CompanyInfo."Service Tax Registration No.";
                                                                      END;
                                                                      "Excise Prod. Posting Group" := GLAcc."Excise Prod. Posting Group";
                                                                      "Capital Item" := GLAcc."Capital Item";
                                                                      UpdateGSTPlaceOfSupply(GLAcc."HSN/SAC Code",GLAcc."GST Group Code",GLAcc.Exempted);
                                                                      InitDeferralCode;
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetItem;
                                                                      Item.TESTFIELD(Blocked,FALSE);
                                                                      Item.TESTFIELD("Gen. Prod. Posting Group");
                                                                      IF Item.Type = Item.Type::Inventory THEN BEGIN
                                                                        Item.TESTFIELD("Inventory Posting Group");
                                                                        "Posting Group" := Item."Inventory Posting Group";
                                                                      END;
                                                                      Description := Item.Description;
                                                                      "Description 2" := Item."Description 2";
                                                                      GetUnitCost;
                                                                      "Allow Invoice Disc." := Item."Allow Invoice Disc.";
                                                                      "Units per Parcel" := Item."Units per Parcel";
                                                                      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := Item."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := Item."Tax Group Code";
                                                                      "Item Category Code" := Item."Item Category Code";
                                                                      "Product Group Code" := Item."Product Group Code";
                                                                      Nonstock := Item."Created From Nonstock Item";
                                                                      "Profit %" := Item."Profit %";
                                                                      "Allow Item Charge Assignment" := TRUE;
                                                                      PrepaymentMgt.SetSalesPrepaymentPct(Rec,SalesHeader."Posting Date");
                                                                      "Excise Prod. Posting Group" := Item."Excise Prod. Posting Group";
                                                                      "Excise Accounting Type" := Item."Excise Accounting Type";
                                                                      "Capital Item" := Item."Capital Item";
                                                                      "Assessable Value" := Item."Assessable Value";
                                                                      IF "Free Supply" THEN
                                                                        "Line Discount %" := 100;

                                                                      IF SalesHeader."Language Code" <> '' THEN
                                                                        GetItemTranslation;
                                                                      IF Item.Reserve = Item.Reserve::Optional THEN
                                                                        Reserve := SalesHeader.Reserve
                                                                      ELSE
                                                                        Reserve := Item.Reserve;
                                                                      "Unit of Measure Code" := Item."Sales Unit of Measure";
                                                                      UpdateGSTPlaceOfSupply(Item."HSN/SAC Code",Item."GST Group Code",Item.Exempted);
                                                                      VALIDATE("Price Inclusive of Tax",Item."Price Inclusive of Tax");
                                                                      InitDeferralCode;
                                                                    END;
                                                                  Type::Resource:
                                                                    BEGIN
                                                                      Res.GET("No.");
                                                                      Res.TESTFIELD(Blocked,FALSE);
                                                                      Res.TESTFIELD("Gen. Prod. Posting Group");
                                                                      Description := Res.Name;
                                                                      "Description 2" := Res."Name 2";
                                                                      "Unit of Measure Code" := Res."Base Unit of Measure";
                                                                      "Unit Cost (LCY)" := Res."Unit Cost";
                                                                      "Gen. Prod. Posting Group" := Res."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := Res."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := Res."Tax Group Code";
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                      FindResUnitCost;
                                                                      UpdateGSTPlaceOfSupply(Res."HSN/SAC Code",Res."GST Group Code",Res.Exempted);
                                                                      InitDeferralCode;
                                                                    END;
                                                                  Type::"Fixed Asset":
                                                                    BEGIN
                                                                      FA.GET("No.");
                                                                      FA.TESTFIELD(Inactive,FALSE);
                                                                      FA.TESTFIELD(Blocked,FALSE);
                                                                      UpdateGSTPlaceOfSupply(FA."HSN/SAC Code",FA."GST Group Code",FA.Exempted);
                                                                      GetFAPostingGroup;
                                                                      Description := FA.Description;
                                                                      "Description 2" := FA."Description 2";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                      "Tax Group Code" := FA."Tax Group Code";
                                                                      "Excise Prod. Posting Group" := FA."Excise Prod. Posting Group";
                                                                      "Excise Accounting Type" := FA."Excise Accounting Type";
                                                                      "VAT Prod. Posting Group" := FA."VAT Product Posting Group";
                                                                    END;
                                                                  Type::"Charge (Item)":
                                                                    BEGIN
                                                                      ItemCharge.GET("No.");
                                                                      Description := ItemCharge.Description;
                                                                      "Gen. Prod. Posting Group" := ItemCharge."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := ItemCharge."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := ItemCharge."Tax Group Code";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                      "Excise Prod. Posting Group" := ItemCharge."Excise Prod. Posting Group";
                                                                      "Capital Item" := ItemCharge."Capital Item";
                                                                      "Item Charge Entry" := TRUE;
                                                                      UpdateGSTPlaceOfSupply(ItemCharge."HSN/SAC Code",ItemCharge."GST Group Code",ItemCharge.Exempted);
                                                                    END;
                                                                END;
                                                                IF NOT (Type IN [Type::" ",Type::"Fixed Asset"]) THEN
                                                                  VALIDATE("VAT Prod. Posting Group");

                                                                UpdatePrepmtSetupFields;
                                                                IF Type <> Type::" " THEN BEGIN
                                                                  VALIDATE("Unit of Measure Code");
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    InitOutstanding;
                                                                    IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                      InitQtyToReceive
                                                                    ELSE
                                                                      InitQtyToShip;
                                                                    InitQtyToAsm;
                                                                    UpdateWithWarehouseShip;
                                                                  END;
                                                                  UpdateUnitPrice(FIELDNO("No."));
                                                                END;

                                                                IF NOT ISTEMPORARY THEN
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID3(Type),"No.",
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Responsibility Center","Responsibility Center");

                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  IF Type = Type::Item THEN
                                                                    IF (Quantity <> 0) AND ItemExists(xRec."No.") THEN BEGIN
                                                                      ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                      WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                    END;
                                                                  GetDefaultBin;
                                                                  AutoAsmToOrder;
                                                                  DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  IF Type = Type::"Charge (Item)" THEN
                                                                    DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                END;
                                                                UpdateItemCrossRef;
                                                                GetStandardDeduction(SalesHeader);
                                                                "Assessable Value" := Item."Assessable Value" * "Qty. per Unit of Measure" ;
                                                                "Invoice Type" := SalesHeader."Invoice Type";
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=VAR
                                                                SalesHeader2@1500001 : Record 36;
                                                                ReturnRcptline@1500000 : Record 6661;
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                CheckHeaderLocation;
                                                                CheckAssocPurchOrder(FIELDCAPTION("Location Code"));
                                                                IF "Location Code" <> '' THEN
                                                                  IF IsServiceItem THEN
                                                                    Item.TESTFIELD(Type,Item.Type::Inventory);
                                                                IF xRec."Location Code" <> "Location Code" THEN BEGIN
                                                                  IF NOT FullQtyIsForAsmToOrder THEN BEGIN
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)","Qty. to Asm. to Order (Base)");
                                                                  END;
                                                                  TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                  TESTFIELD("Shipment No.",'');
                                                                  TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                END;

                                                                GetSalesHeader;
                                                                "Shipment Date" :=
                                                                  CalendarMgmt.CalcDateBOC(
                                                                    '',
                                                                    SalesHeader."Shipment Date",
                                                                    CalChange."Source Type"::Location,
                                                                    "Location Code",
                                                                    '',
                                                                    CalChange."Source Type"::"Shipping Agent",
                                                                    "Shipping Agent Code",
                                                                    "Shipping Agent Service Code",
                                                                    FALSE);

                                                                CheckItemAvailable(FIELDNO("Location Code"));

                                                                IF NOT "Drop Shipment" THEN BEGIN
                                                                  IF "Location Code" = '' THEN BEGIN
                                                                    IF InvtSetup.GET THEN
                                                                      "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                  END ELSE
                                                                    IF Location.GET("Location Code") THEN
                                                                      "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                END ELSE
                                                                  EVALUATE("Outbound Whse. Handling Time",'<0D>');

                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  InitItemAppl(TRUE);
                                                                  GetDefaultBin;
                                                                  InitQtyToAsm;
                                                                  AutoAsmToOrder;
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    IF NOT "Drop Shipment" THEN
                                                                      UpdateWithWarehouseShip;
                                                                    IF NOT FullReservedQtyIsForAsmToOrder THEN
                                                                      ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                  END;
                                                                END;

                                                                UpdateDates;

                                                                IF (Type = Type::Item) AND ("No." <> '') THEN
                                                                  GetUnitCost;

                                                                TaxAreaUpdate;
                                                                "Service Tax Registration No." := ServiceTaxMgt.GetServiceTaxRegNoForLocation("Location Code");
                                                                SalesHeader2.RESET;
                                                                SalesHeader2.SETRANGE("No.","Document No.");
                                                                SalesHeader2.SETRANGE("Document Type","Document Type");
                                                                SalesHeader2.SETRANGE("Re-Dispatch",TRUE);
                                                                IF SalesHeader2.FINDFIRST THEN BEGIN
                                                                  ReturnRcptline.RESET;
                                                                  ReturnRcptline.SETRANGE("Document No.",SalesHeader2."Return Re-Dispatch Rcpt. No.");
                                                                  ReturnRcptline.SETRANGE("Line No.","Return Rcpt Line No.");
                                                                  IF ReturnRcptline.FINDFIRST THEN
                                                                    IF "No." = ReturnRcptline."No." THEN
                                                                      IF "Location Code" <> ReturnRcptline."Location Code" THEN
                                                                        ERROR(Text16501);
                                                                END;

                                                                CheckWMS;

                                                                IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                  ValidateReturnReasonCode(FIELDNO("Location Code"));
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 8   ;   ;Posting Group       ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ENN=Posting Group];
                                                   Editable=No }
    { 10  ;   ;Shipment Date       ;Date          ;OnValidate=VAR
                                                                CheckDateConflict@1000 : Codeunit 99000815;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                IF CurrFieldNo <> 0 THEN
                                                                  AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                IF "Shipment Date" <> 0D THEN BEGIN
                                                                  IF CurrFieldNo IN [
                                                                                     FIELDNO("Planned Shipment Date"),
                                                                                     FIELDNO("Planned Delivery Date"),
                                                                                     FIELDNO("Shipment Date"),
                                                                                     FIELDNO("Shipping Time"),
                                                                                     FIELDNO("Outbound Whse. Handling Time"),
                                                                                     FIELDNO("Requested Delivery Date")]
                                                                  THEN
                                                                    CheckItemAvailable(FIELDNO("Shipment Date"));

                                                                  IF ("Shipment Date" < WORKDATE) AND (Type <> Type::" ") THEN
                                                                    IF NOT (HideValidationDialog OR HasBeenShown) AND GUIALLOWED THEN BEGIN
                                                                      MESSAGE(
                                                                        Text014,
                                                                        FIELDCAPTION("Shipment Date"),"Shipment Date",WORKDATE);
                                                                      HasBeenShown := TRUE;
                                                                    END;
                                                                END;

                                                                AutoAsmToOrder;
                                                                IF (xRec."Shipment Date" <> "Shipment Date") AND
                                                                   (Quantity <> 0) AND
                                                                   NOT StatusCheckSuspended
                                                                THEN
                                                                  CheckDateConflict.SalesLineCheck(Rec,CurrFieldNo <> 0);

                                                                IF NOT PlannedShipmentDateCalculated THEN
                                                                  "Planned Shipment Date" := CalcPlannedShptDate(FIELDNO("Shipment Date"));
                                                                IF NOT PlannedDeliveryDateCalculated THEN
                                                                  "Planned Delivery Date" := CalcPlannedDeliveryDate(FIELDNO("Shipment Date"));
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipment Date;
                                                              ENN=Shipment Date] }
    { 11  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENN=Description 2] }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=[ENU=Unit of Measure;
                                                              ENN=Unit of Measure] }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                                SalesHeader2@1500001 : Record 36;
                                                                ReturnRcptLine@1500000 : Record 6661;
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;

                                                                CheckAssocPurchOrder(FIELDCAPTION(Quantity));

                                                                IF "Shipment No." <> '' THEN
                                                                  CheckShipmentRelation
                                                                ELSE
                                                                  IF "Return Receipt No." <> '' THEN
                                                                    CheckRetRcptRelation;

                                                                "Quantity (Base)" := CalcBaseQty(Quantity);

                                                                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                                                                  IF (Quantity * "Return Qty. Received" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Return Qty. Received")) AND ("Return Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Return Qty. Received")));
                                                                  IF ("Quantity (Base)" * "Return Qty. Received (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Return Qty. Received (Base)")) AND ("Return Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text003,FIELDCAPTION("Return Qty. Received (Base)")));
                                                                END ELSE BEGIN
                                                                  IF (Quantity * "Quantity Shipped" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Quantity Shipped")) AND ("Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Quantity Shipped")));
                                                                  IF ("Quantity (Base)" * "Qty. Shipped (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Qty. Shipped (Base)")) AND ("Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text003,FIELDCAPTION("Qty. Shipped (Base)")));
                                                                END;

                                                                IF (Type = Type::"Charge (Item)") AND (CurrFieldNo <> 0) THEN BEGIN
                                                                  IF (Quantity = 0) AND ("Qty. to Assign" <> 0) THEN
                                                                    FIELDERROR("Qty. to Assign",STRSUBSTNO(Text009,FIELDCAPTION(Quantity),Quantity));
                                                                  IF (Quantity * "Qty. Assigned" < 0) OR (ABS(Quantity) < ABS("Qty. Assigned")) THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Qty. Assigned")));
                                                                END;

                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
                                                                  InitOutstanding;
                                                                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                    InitQtyToReceive
                                                                  ELSE
                                                                    InitQtyToShip;
                                                                  InitQtyToAsm;
                                                                  SetDefaultQuantity;
                                                                END;

                                                                CheckItemAvailable(FIELDNO(Quantity));

                                                                IF (Quantity * xRec.Quantity < 0) OR (Quantity = 0) THEN
                                                                  InitItemAppl(FALSE);

                                                                IF Type = Type::Item THEN BEGIN
                                                                  UpdateUnitPrice(FIELDNO(Quantity));
                                                                  IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
                                                                    ReserveSalesLine.VerifyQuantity(Rec,xRec);
                                                                    IF NOT "Drop Shipment" THEN
                                                                      UpdateWithWarehouseShip;
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                    IF ("Quantity (Base)" * xRec."Quantity (Base)" <= 0) AND ("No." <> '') THEN BEGIN
                                                                      GetItem;
                                                                      IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT IsShipment THEN
                                                                        GetUnitCost;
                                                                    END;
                                                                  END;
                                                                  VALIDATE("Qty. to Assemble to Order");
                                                                  IF (Quantity = "Quantity Invoiced") AND (CurrFieldNo <> 0) THEN
                                                                    CheckItemChargeAssgnt;
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                                END ELSE
                                                                  VALIDATE("Line Discount %");

                                                                IF (xRec.Quantity <> Quantity) AND (Quantity = 0) AND
                                                                   ((Amount <> 0) OR ("Amount Including VAT" <> 0) OR ("VAT Base Amount" <> 0))
                                                                THEN BEGIN
                                                                  Amount := 0;
                                                                  "Amount Including VAT" := 0;
                                                                  "VAT Base Amount" := 0;
                                                                END;
                                                                IF (xRec.Quantity <> Quantity) AND (Quantity = 0) AND (("Amount To Customer" <> 0) OR IsServiceTaxExist(Rec)) THEN BEGIN
                                                                  "Service Tax Amount" := 0;
                                                                  "Service Tax eCess Amount" := 0;
                                                                  "Service Tax SHE Cess Amount" := 0;
                                                                  "Amount To Customer" := 0;
                                                                  "Service Tax Base" := 0;
                                                                  "Service Tax SBC Amount" := 0;
                                                                  "Service Tax SBC %" := 0;
                                                                  "KK Cess%" := 0;
                                                                  "KK Cess Amount" := 0;
                                                                END;

                                                                UpdatePrePaymentAmounts;

                                                                TaxAreaUpdate;
                                                                ChkQtyUpdatioAfterDDPLA;

                                                                SalesHeader2.RESET;
                                                                SalesHeader2.SETRANGE("No.","Document No.");
                                                                SalesHeader2.SETRANGE("Document Type","Document Type");
                                                                SalesHeader2.SETRANGE("Re-Dispatch",TRUE);
                                                                IF SalesHeader2.FINDFIRST THEN BEGIN
                                                                  ReturnRcptLine.RESET;
                                                                  ReturnRcptLine.SETRANGE("Document No.",SalesHeader2."Return Re-Dispatch Rcpt. No.");
                                                                  ReturnRcptLine.SETRANGE("Line No.","Return Rcpt Line No.");
                                                                  IF ReturnRcptLine.FINDFIRST THEN
                                                                    IF Quantity > ReturnRcptLine."Qty. to be Re-Dispatched" THEN
                                                                      ERROR(Text16502);
                                                                END;

                                                                CheckWMS;

                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                VALIDATE("Reserved Qty. (Base)");
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENN=Quantity];
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;Outstanding Quantity;Decimal       ;CaptionML=[ENU=Outstanding Quantity;
                                                              ENN=Outstanding Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 17  ;   ;Qty. to Invoice     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Qty. to Invoice" = MaxQtyToInvoice THEN
                                                                  InitQtyToInvoice
                                                                ELSE
                                                                  "Qty. to Invoice (Base)" := CalcBaseQty("Qty. to Invoice");
                                                                IF ("Qty. to Invoice" * Quantity < 0) OR
                                                                   (ABS("Qty. to Invoice") > ABS(MaxQtyToInvoice))
                                                                THEN
                                                                  ERROR(
                                                                    Text005,
                                                                    MaxQtyToInvoice);
                                                                IF ("Qty. to Invoice (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Qty. to Invoice (Base)") > ABS(MaxQtyToInvoiceBase))
                                                                THEN
                                                                  ERROR(
                                                                    Text006,
                                                                    MaxQtyToInvoiceBase);
                                                                "VAT Difference" := 0;
                                                                CalcInvDiscToInvoice;
                                                                CalcPrepaymentToDeduct;
                                                              END;

                                                   CaptionML=[ENU=Qty. to Invoice;
                                                              ENN=Qty. to Invoice];
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Qty. to Ship        ;Decimal       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                GetLocation("Location Code");
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   (NOT "Drop Shipment")
                                                                THEN BEGIN
                                                                  IF Location."Require Shipment" AND
                                                                     ("Qty. to Ship" <> 0)
                                                                  THEN
                                                                    CheckWarehouse;
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;

                                                                IF "Qty. to Ship" = "Outstanding Quantity" THEN
                                                                  InitQtyToShip
                                                                ELSE BEGIN
                                                                  "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
                                                                  CheckServItemCreation;
                                                                  InitQtyToInvoice;
                                                                END;
                                                                IF ((("Qty. to Ship" < 0) XOR (Quantity < 0)) AND (Quantity <> 0) AND ("Qty. to Ship" <> 0)) OR
                                                                   (ABS("Qty. to Ship") > ABS("Outstanding Quantity")) OR
                                                                   (((Quantity < 0) XOR ("Outstanding Quantity" < 0)) AND (Quantity <> 0) AND ("Outstanding Quantity" <> 0))
                                                                THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    "Outstanding Quantity");
                                                                IF ((("Qty. to Ship (Base)" < 0) XOR ("Quantity (Base)" < 0)) AND ("Qty. to Ship (Base)" <> 0) AND ("Quantity (Base)" <> 0)) OR
                                                                   (ABS("Qty. to Ship (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                   ((("Quantity (Base)" < 0) XOR ("Outstanding Qty. (Base)" < 0)) AND ("Quantity (Base)" <> 0) AND ("Outstanding Qty. (Base)" <> 0))
                                                                THEN
                                                                  ERROR(
                                                                    Text008,
                                                                    "Outstanding Qty. (Base)");

                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Qty. to Ship" < 0) THEN
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);

                                                                ATOLink.UpdateQtyToAsmFromSalesLine(Rec);
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Qty. to Ship;
                                                              ENN=Qty. to Ship];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Unit Price          ;Decimal       ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                IF NOT "Price Inclusive of Tax" THEN
                                                                  TestStatusOpen;
                                                                VALIDATE("Line Discount %");
                                                                ChkQtyUpdatioAfterDDPLA;
                                                              END;

                                                   CaptionML=[ENU=Unit Price;
                                                              ENN=Unit Price];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Unit Price")) }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;OnValidate=BEGIN
                                                                IF (CurrFieldNo = FIELDNO("Unit Cost (LCY)")) AND
                                                                   ("Unit Cost (LCY)" <> xRec."Unit Cost (LCY)")
                                                                THEN
                                                                  CheckAssocPurchOrder(FIELDCAPTION("Unit Cost (LCY)"));

                                                                IF (CurrFieldNo = FIELDNO("Unit Cost (LCY)")) AND
                                                                   (Type = Type::Item) AND ("No." <> '') AND ("Quantity (Base)" <> 0)
                                                                THEN BEGIN
                                                                  TestJobPlanningLine;
                                                                  GetItem;
                                                                  IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT IsShipment THEN BEGIN
                                                                    IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                      ERROR(
                                                                        Text037,
                                                                        FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),
                                                                        Item."Costing Method",FIELDCAPTION(Quantity));
                                                                    ERROR(
                                                                      Text038,
                                                                      FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),
                                                                      Item."Costing Method",FIELDCAPTION(Quantity));
                                                                  END;
                                                                END;

                                                                GetSalesHeader;
                                                                IF SalesHeader."Currency Code" <> '' THEN BEGIN
                                                                  Currency.TESTFIELD("Unit-Amount Rounding Precision");
                                                                  "Unit Cost" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        GetDate,SalesHeader."Currency Code",
                                                                        "Unit Cost (LCY)",SalesHeader."Currency Factor"),
                                                                      Currency."Unit-Amount Rounding Precision")
                                                                END ELSE
                                                                  "Unit Cost" := "Unit Cost (LCY)";
                                                              END;

                                                   CaptionML=[ENU=Unit Cost (LCY);
                                                              ENN=Unit Cost (LCY)];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              ENN=VAT %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                IF NOT "Price Inclusive of Tax" THEN
                                                                  TestStatusOpen;
                                                                IF "Free Supply" THEN
                                                                  "Line Discount %" := 100;
                                                                IF NOT "Price Inclusive of Tax" THEN
                                                                "Line Discount Amount" :=
                                                                    ROUND(ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") * "Line Discount %" / 100,
                                                                      Currency."Amount Rounding Precision")
                                                                ELSE
                                                                  "Line Discount Amount" := ROUND(ROUND(Quantity * "Unit Price Incl. of Tax",Currency."Amount Rounding Precision") *
                                                                    "Line Discount %" / 100,Currency."Amount Rounding Precision");
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Line Discount %;
                                                              ENN=Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 28  ;   ;Line Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                GetSalesHeader;
                                                                "Line Discount Amount" := ROUND("Line Discount Amount",Currency."Amount Rounding Precision");
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                TESTFIELD(Quantity);
                                                                IF xRec."Line Discount Amount" <> "Line Discount Amount" THEN
                                                                   IF NOT "Price Inclusive of Tax" THEN
                                                                     IF ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") <> 0 THEN
                                                                       "Line Discount %" :=
                                                                         ROUND(
                                                                           "Line Discount Amount" / ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") * 100,
                                                                        0.00001)
                                                                     ELSE
                                                                      "Line Discount %" := 0
                                                                   ELSE
                                                                     IF ROUND(Quantity * "Unit Price Incl. of Tax",Currency."Amount Rounding Precision") <> 0 THEN
                                                                      "Line Discount %" :=
                                                                        ROUND(
                                                                          "Line Discount Amount" / ROUND(Quantity * "Unit Price Incl. of Tax",Currency."Amount Rounding Precision") * 100,
                                                                          0.00001)
                                                                     ELSE
                                                                       "Line Discount %" := 0;
                                                                 "Inv. Discount Amount" := 0;
                                                                 "Inv. Disc. Amount to Invoice" := 0;
                                                                 UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Line Discount Amount;
                                                              ENN=Line Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 29  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        ROUND(Amount + "VAT Base Amount" * "VAT %" / 100,Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    IF Amount <> 0 THEN
                                                                      FIELDERROR(Amount,
                                                                        STRSUBSTNO(
                                                                          Text009,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      SalesHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      "VAT Base Amount" := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        Amount +
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                                                                          "VAT Base Amount","Quantity (Base)",SalesHeader."Currency Factor");
                                                                      IF "VAT Base Amount" <> 0 THEN
                                                                        "VAT %" :=
                                                                          ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;

                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Amount Including VAT;Decimal       ;OnValidate=BEGIN
                                                                "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      Amount :=
                                                                        ROUND(
                                                                          "Amount Including VAT" /
                                                                          (1 + (1 - SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                                                                          Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      Amount := 0;
                                                                      "VAT Base Amount" := 0;
                                                                    END;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      SalesHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      Amount :=
                                                                        SalesTaxCalculate.ReverseCalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                                                                          "Amount Including VAT","Quantity (Base)",SalesHeader."Currency Factor");
                                                                      IF Amount <> 0 THEN
                                                                        "VAT %" :=
                                                                          ROUND(100 * ("Amount Including VAT" - Amount) / Amount,0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" := Amount;
                                                                    END;
                                                                END;

                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ENN=Amount Including VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Allow Invoice Disc." <> xRec."Allow Invoice Disc.") AND
                                                                   (NOT "Allow Invoice Disc.")
                                                                THEN BEGIN
                                                                  "Inv. Discount Amount" := 0;
                                                                  "Inv. Disc. Amount to Invoice" := 0;
                                                                  UpdateAmounts;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              ENN=Allow Invoice Disc.] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ENN=Gross Weight];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ENN=Net Weight];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ENN=Units per Parcel];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ENN=Unit Volume];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                                ItemTrackingLines@1001 : Page 6510;
                                                              BEGIN
                                                                IF "Appl.-to Item Entry" <> 0 THEN BEGIN
                                                                  AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD(Quantity);
                                                                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                                                                    IF Quantity > 0 THEN
                                                                      FIELDERROR(Quantity,Text030);
                                                                  END ELSE BEGIN
                                                                    IF Quantity < 0 THEN
                                                                      FIELDERROR(Quantity,Text029);
                                                                  END;
                                                                  ItemLedgEntry.GET("Appl.-to Item Entry");
                                                                  ItemLedgEntry.TESTFIELD(Positive,TRUE);
                                                                  IF ItemLedgEntry.TrackingExists THEN
                                                                    ERROR(Text040,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-to Item Entry"));
                                                                  IF ABS("Qty. to Ship (Base)") > ItemLedgEntry.Quantity THEN
                                                                    ERROR(ShippingMoreUnitsThanReceivedErr,ItemLedgEntry.Quantity,ItemLedgEntry."Document No.");

                                                                  VALIDATE("Unit Cost (LCY)",CalcUnitCost(ItemLedgEntry));

                                                                  "Location Code" := ItemLedgEntry."Location Code";
                                                                  IF NOT ItemLedgEntry.Open THEN
                                                                    MESSAGE(Text042,"Appl.-to Item Entry");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-to Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ENN=Appl.-to Item Entry] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                                ATOLink.UpdateAsmDimFromSalesLine(Rec);
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                                ATOLink.UpdateAsmDimFromSalesLine(Rec);
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 42  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Item THEN
                                                                  UpdateUnitPrice(FIELDNO("Customer Price Group"));
                                                              END;

                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENN=Customer Price Group];
                                                   Editable=No }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=[ENU=Job No.;
                                                              ENN=Job No.];
                                                   Editable=No }
    { 52  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Resource THEN BEGIN
                                                                  TestStatusOpen;
                                                                  IF WorkType.GET("Work Type Code") THEN
                                                                    VALIDATE("Unit of Measure Code",WorkType."Unit of Measure Code");
                                                                  UpdateUnitPrice(FIELDNO("Work Type Code"));
                                                                  VALIDATE("Unit Price");
                                                                  FindResUnitCost;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Work Type Code;
                                                              ENN=Work Type Code] }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;CaptionML=[ENU=Recalculate Invoice Disc.;
                                                              ENN=Recalculate Invoice Disc.];
                                                   Editable=No }
    { 57  ;   ;Outstanding Amount  ;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF SalesHeader."Currency Code" <> '' THEN
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Outstanding Amount",SalesHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND("Outstanding Amount",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Outstanding Amount;
                                                              ENN=Outstanding Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 58  ;   ;Qty. Shipped Not Invoiced;Decimal  ;CaptionML=[ENU=Qty. Shipped Not Invoiced;
                                                              ENN=Qty. Shipped Not Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 59  ;   ;Shipped Not Invoiced;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF SalesHeader."Currency Code" <> '' THEN
                                                                  "Shipped Not Invoiced (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Shipped Not Invoiced",SalesHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Shipped Not Invoiced (LCY)" :=
                                                                    ROUND("Shipped Not Invoiced",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Shipped Not Invoiced;
                                                              ENN=Shipped Not Invoiced];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Quantity Shipped    ;Decimal       ;AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Quantity Shipped;
                                                              ENN=Quantity Shipped];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=[ENU=Quantity Invoiced;
                                                              ENN=Quantity Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 63  ;   ;Shipment No.        ;Code20        ;CaptionML=[ENU=Shipment No.;
                                                              ENN=Shipment No.];
                                                   Editable=No }
    { 64  ;   ;Shipment Line No.   ;Integer       ;CaptionML=[ENU=Shipment Line No.;
                                                              ENN=Shipment Line No.];
                                                   Editable=No }
    { 67  ;   ;Profit %            ;Decimal       ;CaptionML=[ENU=Profit %;
                                                              ENN=Profit %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 68  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENN=Bill-to Customer No.];
                                                   Editable=No }
    { 69  ;   ;Inv. Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                CalcInvDiscToInvoice;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Inv. Discount Amount;
                                                              ENN=Inv. Discount Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 71  ;   ;Purchase Order No.  ;Code20        ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Purchase Order No." <> "Purchase Order No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Purchase Order No.;
                                                              ENN=Purchase Order No.];
                                                   Editable=No }
    { 72  ;   ;Purch. Order Line No.;Integer      ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                                 Document No.=FIELD(Purchase Order No.));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Purch. Order Line No." <> "Purch. Order Line No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Purch. Order Line No.;
                                                              ENN=Purch. Order Line No.];
                                                   Editable=No }
    { 73  ;   ;Drop Shipment       ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Order);
                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Job No.",'');
                                                                TESTFIELD("Qty. to Asm. to Order (Base)",0);

                                                                IF "Drop Shipment" THEN
                                                                  TESTFIELD("Special Order",FALSE);

                                                                CheckAssocPurchOrder(FIELDCAPTION("Drop Shipment"));

                                                                IF "Special Order" THEN
                                                                  Reserve := Reserve::Never
                                                                ELSE
                                                                  IF "Drop Shipment" THEN BEGIN
                                                                    Reserve := Reserve::Never;
                                                                    VALIDATE(Quantity,Quantity);
                                                                    IF "Drop Shipment" THEN BEGIN
                                                                      EVALUATE("Outbound Whse. Handling Time",'<0D>');
                                                                      EVALUATE("Shipping Time",'<0D>');
                                                                      UpdateDates;
                                                                      "Bin Code" := '';
                                                                    END;
                                                                  END ELSE
                                                                    SetReserveWithoutPurchasingCode;

                                                                CheckItemAvailable(FIELDNO("Drop Shipment"));

                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                IF (xRec."Drop Shipment" <> "Drop Shipment") AND (Quantity <> 0) THEN BEGIN
                                                                  IF NOT "Drop Shipment" THEN BEGIN
                                                                    InitQtyToAsm;
                                                                    AutoAsmToOrder;
                                                                    UpdateWithWarehouseShip
                                                                  END ELSE
                                                                    InitQtyToShip;
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                  IF NOT FullReservedQtyIsForAsmToOrder THEN
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Drop Shipment;
                                                              ENN=Drop Shipment];
                                                   Editable=Yes }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 75  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENN=Gen. Prod. Posting Group] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ENN=VAT Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENN=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Type] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Sales Line"."Line No." WHERE (Document Type=FIELD(Document Type),
                                                                                                Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ENN=Attached to Line No.];
                                                   Editable=No }
    { 81  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              ENN=Exit Point] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 84  ;   ;Tax Category        ;Code10        ;CaptionML=[ENU=Tax Category;
                                                              ENN=Tax Category] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=Tax Area Code] }
    { 86  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ENN=Tax Liable] }
    { 87  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                                ValidateTaxGroupCode;
                                                              END;

                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENN=Tax Group Code] }
    { 88  ;   ;VAT Clause Code     ;Code10        ;TableRelation="VAT Clause";
                                                   CaptionML=[ENU=VAT Clause Code;
                                                              ENN=VAT Clause Code] }
    { 89  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 90  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                "VAT Difference" := 0;
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                "VAT Clause Code" := VATPostingSetup."VAT Clause Code";
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    "VAT %" := 0;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      TESTFIELD(Type,Type::"G/L Account");
                                                                      VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                      TESTFIELD("No.",VATPostingSetup."Sales VAT Account");
                                                                    END;
                                                                END;
                                                                IF SalesHeader."Prices Including VAT" AND (Type IN [Type::Item,Type::Resource]) THEN
                                                                  "Unit Price" :=
                                                                    ROUND(
                                                                      "Unit Price" * (100 + "VAT %") / (100 + xRec."VAT %"),
                                                                      Currency."Unit-Amount Rounding Precision");
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENN=VAT Prod. Posting Group] }
    { 91  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code];
                                                   Editable=No }
    { 92  ;   ;Outstanding Amount (LCY);Decimal   ;CaptionML=[ENU=Outstanding Amount (LCY);
                                                              ENN=Outstanding Amount (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 93  ;   ;Shipped Not Invoiced (LCY);Decimal ;CaptionML=[ENU=Shipped Not Invoiced (LCY);
                                                              ENN=Shipped Not Invoiced (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 95  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                        Source Ref. No.=FIELD(Line No.),
                                                                                                        Source Type=CONST(37),
                                                                                                        Source Subtype=FIELD(Document Type),
                                                                                                        Reservation Status=CONST(Reservation)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Reserved Quantity;
                                                              ENN=Reserved Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 96  ;   ;Reserve             ;Option        ;OnValidate=BEGIN
                                                                IF Reserve <> Reserve::Never THEN BEGIN
                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD("No.");
                                                                END;
                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                IF (Reserve = Reserve::Never) AND ("Reserved Qty. (Base)" > 0) THEN
                                                                  TESTFIELD("Reserved Qty. (Base)",0);

                                                                IF "Drop Shipment" OR "Special Order" THEN
                                                                  TESTFIELD(Reserve,Reserve::Never);
                                                                IF xRec.Reserve = Reserve::Always THEN BEGIN
                                                                  GetItem;
                                                                  IF Item.Reserve = Item.Reserve::Always THEN
                                                                    TESTFIELD(Reserve,Reserve::Always);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Reserve;
                                                              ENN=Reserve];
                                                   OptionCaptionML=[ENU=Never,Optional,Always;
                                                                    ENN=Never,Optional,Always];
                                                   OptionString=Never,Optional,Always }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF "Blanket Order No." = '' THEN
                                                                  "Blanket Order Line No." := 0
                                                                ELSE
                                                                  VALIDATE("Blanket Order Line No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Quantity Shipped",0);
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Blanket Order No.;
                                                              ENN=Blanket Order No.] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Sales Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                Document No.=FIELD(Blanket Order No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF "Blanket Order Line No." <> 0 THEN BEGIN
                                                                  SalesLine2.GET("Document Type"::"Blanket Order","Blanket Order No.","Blanket Order Line No.");
                                                                  SalesLine2.TESTFIELD(Type,Type);
                                                                  SalesLine2.TESTFIELD("No.","No.");
                                                                  SalesLine2.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
                                                                  SalesLine2.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
                                                                  VALIDATE("Variant Code",SalesLine2."Variant Code");
                                                                  VALIDATE("Location Code",SalesLine2."Location Code");
                                                                  VALIDATE("Unit of Measure Code",SalesLine2."Unit of Measure Code");
                                                                  VALIDATE("Unit Price",SalesLine2."Unit Price");
                                                                  VALIDATE("Line Discount %",SalesLine2."Line Discount %");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Blanket Order Line No.;
                                                              ENN=Blanket Order Line No.] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[ENU=VAT Base Amount;
                                                              ENN=VAT Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ENN=Unit Cost];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ENN=System-Created Entry];
                                                   Editable=No }
    { 103 ;   ;Line Amount         ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type);
                                                                TESTFIELD(Quantity);
                                                                TESTFIELD("Unit Price");
                                                                GetSalesHeader;
                                                                "Line Amount" := ROUND("Line Amount",Currency."Amount Rounding Precision");
                                                                VALIDATE(
                                                                  "Line Discount Amount",ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Amount");
                                                              END;

                                                   CaptionML=[ENU=Line Amount;
                                                              ENN=Line Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Line Amount")) }
    { 104 ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              ENN=VAT Difference];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 105 ;   ;Inv. Disc. Amount to Invoice;Decimal;
                                                   CaptionML=[ENU=Inv. Disc. Amount to Invoice;
                                                              ENN=Inv. Disc. Amount to Invoice];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;VAT Identifier      ;Code10        ;CaptionML=[ENU=VAT Identifier;
                                                              ENN=VAT Identifier];
                                                   Editable=No }
    { 107 ;   ;IC Partner Ref. Type;Option        ;OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN
                                                                  "IC Partner Ref. Type" := "IC Partner Ref. Type"::"G/L Account";
                                                                IF "IC Partner Ref. Type" <> xRec."IC Partner Ref. Type" THEN
                                                                  "IC Partner Reference" := '';
                                                                IF "IC Partner Ref. Type" = "IC Partner Ref. Type"::"Common Item No." THEN BEGIN
                                                                  IF Item."No." <> "No." THEN
                                                                    Item.GET("No.");
                                                                  Item.TESTFIELD("Common Item No.");
                                                                  "IC Partner Reference" := Item."Common Item No.";
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=[ENU=IC Partner Ref. Type;
                                                              ENN=IC Partner Ref. Type];
                                                   OptionCaptionML=[ENU=" ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.";
                                                                    ENN=" ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No."];
                                                   OptionString=[ ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.] }
    { 108 ;   ;IC Partner Reference;Code20        ;OnLookup=VAR
                                                              ICGLAccount@1000 : Record 410;
                                                              ItemCrossReference@1001 : Record 5717;
                                                            BEGIN
                                                              IF "No." <> '' THEN
                                                                CASE "IC Partner Ref. Type" OF
                                                                  "IC Partner Ref. Type"::"G/L Account":
                                                                    BEGIN
                                                                      IF ICGLAccount.GET("IC Partner Reference") THEN;
                                                                      IF PAGE.RUNMODAL(PAGE::"IC G/L Account List",ICGLAccount) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ICGLAccount."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::Item:
                                                                    BEGIN
                                                                      IF Item.GET("IC Partner Reference") THEN;
                                                                      IF PAGE.RUNMODAL(PAGE::"Item List",Item) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",Item."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::"Cross Reference":
                                                                    BEGIN
                                                                      ItemCrossReference.RESET;
                                                                      ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                                                                      ItemCrossReference.SETFILTER(
                                                                        "Cross-Reference Type",'%1|%2',
                                                                        ItemCrossReference."Cross-Reference Type"::Customer,
                                                                        ItemCrossReference."Cross-Reference Type"::" ");
                                                                      ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',"Sell-to Customer No.",'');
                                                                      IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ItemCrossReference."Cross-Reference No.");
                                                                    END;
                                                                END;
                                                            END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=[ENU=IC Partner Reference;
                                                              ENN=IC Partner Reference] }
    { 109 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdatePrepmtSetupFields;

                                                                IF Type <> Type::" " THEN
                                                                  UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment %;
                                                              ENN=Prepayment %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 110 ;   ;Prepmt. Line Amount ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                PrePaymentLineAmountEntered := TRUE;
                                                                TESTFIELD("Line Amount");
                                                                IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text044,"Prepmt. Amt. Inv."));
                                                                IF "Prepmt. Line Amount" > "Line Amount" THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,"Line Amount"));
                                                                IF "System-Created Entry" THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,0));
                                                                VALIDATE("Prepayment %",ROUND("Prepmt. Line Amount" * 100 / "Line Amount",0.00001));
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Line Amount;
                                                              ENN=Prepmt. Line Amount];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Line Amount")) }
    { 111 ;   ;Prepmt. Amt. Inv.   ;Decimal       ;CaptionML=[ENU=Prepmt. Amt. Inv.;
                                                              ENN=Prepmt. Amt. Inv.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Amt. Inv.")) }
    { 112 ;   ;Prepmt. Amt. Incl. VAT;Decimal     ;CaptionML=[ENU=Prepmt. Amt. Incl. VAT;
                                                              ENN=Prepmt. Amt. Incl. VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;Prepayment Amount   ;Decimal       ;CaptionML=[ENU=Prepayment Amount;
                                                              ENN=Prepayment Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 114 ;   ;Prepmt. VAT Base Amt.;Decimal      ;CaptionML=[ENU=Prepmt. VAT Base Amt.;
                                                              ENN=Prepmt. VAT Base Amt.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 115 ;   ;Prepayment VAT %    ;Decimal       ;CaptionML=[ENU=Prepayment VAT %;
                                                              ENN=Prepayment VAT %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 116 ;   ;Prepmt. VAT Calc. Type;Option      ;CaptionML=[ENU=Prepmt. VAT Calc. Type;
                                                              ENN=Prepmt. VAT Calc. Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENN=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 117 ;   ;Prepayment VAT Identifier;Code10   ;CaptionML=[ENU=Prepayment VAT Identifier;
                                                              ENN=Prepayment VAT Identifier];
                                                   Editable=No }
    { 118 ;   ;Prepayment Tax Area Code;Code20    ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Area Code;
                                                              ENN=Prepayment Tax Area Code] }
    { 119 ;   ;Prepayment Tax Liable;Boolean      ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Liable;
                                                              ENN=Prepayment Tax Liable] }
    { 120 ;   ;Prepayment Tax Group Code;Code10   ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Prepayment Tax Group Code;
                                                              ENN=Prepayment Tax Group Code] }
    { 121 ;   ;Prepmt Amt to Deduct;Decimal       ;OnValidate=BEGIN
                                                                IF "Prepmt Amt to Deduct" > "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text045,"Prepmt. Amt. Inv." - "Prepmt Amt Deducted"));

                                                                IF "Prepmt Amt to Deduct" > "Qty. to Invoice" * "Unit Price" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text045,"Qty. to Invoice" * "Unit Price"));

                                                                IF ("Prepmt. Amt. Inv." - "Prepmt Amt to Deduct" - "Prepmt Amt Deducted") >
                                                                   (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Unit Price"
                                                                THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text044,
                                                                      "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" - (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Unit Price"));
                                                              END;

                                                   CaptionML=[ENU=Prepmt Amt to Deduct;
                                                              ENN=Prepmt Amt to Deduct];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt to Deduct")) }
    { 122 ;   ;Prepmt Amt Deducted ;Decimal       ;CaptionML=[ENU=Prepmt Amt Deducted;
                                                              ENN=Prepmt Amt Deducted];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt Deducted")) }
    { 123 ;   ;Prepayment Line     ;Boolean       ;CaptionML=[ENU=Prepayment Line;
                                                              ENN=Prepayment Line];
                                                   Editable=No }
    { 124 ;   ;Prepmt. Amount Inv. Incl. VAT;Decimal;
                                                   CaptionML=[ENU=Prepmt. Amount Inv. Incl. VAT;
                                                              ENN=Prepmt. Amount Inv. Incl. VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 129 ;   ;Prepmt. Amount Inv. (LCY);Decimal  ;CaptionML=[ENU=Prepmt. Amount Inv. (LCY);
                                                              ENN=Prepmt. Amount Inv. (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 130 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type,Type::"G/L Account");
                                                                  GetSalesHeader;
                                                                  SalesHeader.TESTFIELD("Sell-to IC Partner Code",'');
                                                                  SalesHeader.TESTFIELD("Bill-to IC Partner Code",'');
                                                                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"G/L Account");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=IC Partner Code;
                                                              ENN=IC Partner Code] }
    { 132 ;   ;Prepmt. VAT Amount Inv. (LCY);Decimal;
                                                   CaptionML=[ENU=Prepmt. VAT Amount Inv. (LCY);
                                                              ENN=Prepmt. VAT Amount Inv. (LCY)];
                                                   Editable=No }
    { 135 ;   ;Prepayment VAT Difference;Decimal  ;CaptionML=[ENU=Prepayment VAT Difference;
                                                              ENN=Prepayment VAT Difference];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 136 ;   ;Prepmt VAT Diff. to Deduct;Decimal ;CaptionML=[ENU=Prepmt VAT Diff. to Deduct;
                                                              ENN=Prepmt VAT Diff. to Deduct];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 137 ;   ;Prepmt VAT Diff. Deducted;Decimal  ;CaptionML=[ENU=Prepmt VAT Diff. Deducted;
                                                              ENN=Prepmt VAT Diff. Deducted];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 900 ;   ;Qty. to Assemble to Order;Decimal  ;OnValidate=VAR
                                                                SalesLineReserve@1000 : Codeunit 99000832;
                                                              BEGIN
                                                                WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);

                                                                "Qty. to Asm. to Order (Base)" := CalcBaseQty("Qty. to Assemble to Order");

                                                                IF "Qty. to Asm. to Order (Base)" <> 0 THEN BEGIN
                                                                  TESTFIELD("Drop Shipment",FALSE);
                                                                  TESTFIELD("Special Order",FALSE);
                                                                  IF "Qty. to Asm. to Order (Base)" < 0 THEN
                                                                    FIELDERROR("Qty. to Assemble to Order",STRSUBSTNO(Text009,FIELDCAPTION("Quantity (Base)"),"Quantity (Base)"));
                                                                  TESTFIELD("Appl.-to Item Entry",0);

                                                                  CASE "Document Type" OF
                                                                    "Document Type"::"Blanket Order",
                                                                    "Document Type"::Quote:
                                                                      IF ("Quantity (Base)" = 0) OR ("Qty. to Asm. to Order (Base)" <= 0) OR SalesLineReserve.ReservEntryExist(Rec) THEN
                                                                        TESTFIELD("Qty. to Asm. to Order (Base)",0)
                                                                      ELSE
                                                                        IF "Quantity (Base)" <> "Qty. to Asm. to Order (Base)" THEN
                                                                          FIELDERROR("Qty. to Assemble to Order",STRSUBSTNO(Text031,0,"Quantity (Base)"));
                                                                    "Document Type"::Order:
                                                                      ;
                                                                    ELSE
                                                                      TESTFIELD("Qty. to Asm. to Order (Base)",0);
                                                                  END;
                                                                END;

                                                                CheckItemAvailable(FIELDNO("Qty. to Assemble to Order"));
                                                                IF NOT (CurrFieldNo IN [FIELDNO(Quantity),FIELDNO("Qty. to Assemble to Order")]) THEN
                                                                  GetDefaultBin;
                                                                AutoAsmToOrder;
                                                              END;

                                                   AccessByPermission=TableData 90=R;
                                                   CaptionML=[ENU=Qty. to Assemble to Order;
                                                              ENN=Qty. to Assemble to Order];
                                                   DecimalPlaces=0:5 }
    { 901 ;   ;Qty. to Asm. to Order (Base);Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Assemble to Order","Qty. to Asm. to Order (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Asm. to Order (Base);
                                                              ENN=Qty. to Asm. to Order (Base)];
                                                   DecimalPlaces=0:5 }
    { 902 ;   ;ATO Whse. Outstanding Qty.;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding" WHERE (Source Type=CONST(37),
                                                                                                                       Source Subtype=FIELD(Document Type),
                                                                                                                       Source No.=FIELD(Document No.),
                                                                                                                       Source Line No.=FIELD(Line No.),
                                                                                                                       Assemble to Order=FILTER(Yes)));
                                                   AccessByPermission=TableData 90=R;
                                                   CaptionML=[ENU=ATO Whse. Outstanding Qty.;
                                                              ENN=ATO Whse. Outstanding Qty.];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 903 ;   ;ATO Whse. Outstd. Qty. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(37),
                                                                                                                              Source Subtype=FIELD(Document Type),
                                                                                                                              Source No.=FIELD(Document No.),
                                                                                                                              Source Line No.=FIELD(Line No.),
                                                                                                                              Assemble to Order=FILTER(Yes)));
                                                   AccessByPermission=TableData 90=R;
                                                   CaptionML=[ENU=ATO Whse. Outstd. Qty. (Base);
                                                              ENN=ATO Whse. Outstd. Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   CaptionML=[ENU=Job Task No.;
                                                              ENN=Job Task No.];
                                                   Editable=No }
    { 1002;   ;Job Contract Entry No.;Integer     ;OnValidate=VAR
                                                                JobPlanningLine@1001 : Record 1003;
                                                              BEGIN
                                                                JobPlanningLine.SETCURRENTKEY("Job Contract Entry No.");
                                                                JobPlanningLine.SETRANGE("Job Contract Entry No.","Job Contract Entry No.");
                                                                JobPlanningLine.FINDFIRST;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,JobPlanningLine."Job No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Contract Entry No.;
                                                              ENN=Job Contract Entry No.];
                                                   Editable=No }
    { 1300;   ;Posting Date        ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Header"."Posting Date" WHERE (Document Type=FIELD(Document Type),
                                                                                                           No.=FIELD(Document No.)));
                                                   CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 1700;   ;Deferral Code       ;Code10        ;TableRelation="Deferral Template"."Deferral Code";
                                                   OnValidate=BEGIN
                                                                GetSalesHeader;
                                                                DeferralPostDate := SalesHeader."Posting Date";

                                                                DeferralUtilities.DeferralCodeOnValidate(
                                                                  "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
                                                                  "Document Type","Document No.","Line No.",
                                                                  GetDeferralAmount,DeferralPostDate,
                                                                  Description,SalesHeader."Currency Code");

                                                                IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                  "Returns Deferral Start Date" :=
                                                                    DeferralUtilities.GetDeferralStartDate(DeferralUtilities.GetSalesDeferralDocType,
                                                                      "Document Type","Document No.","Line No.","Deferral Code",SalesHeader."Posting Date");
                                                              END;

                                                   CaptionML=[ENU=Deferral Code;
                                                              ENN=Deferral Code] }
    { 1702;   ;Returns Deferral Start Date;Date   ;OnValidate=VAR
                                                                DeferralHeader@1000 : Record 1701;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                IF DeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',"Document Type","Document No.","Line No.") THEN
                                                                  DeferralUtilities.CreateDeferralSchedule("Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
                                                                    "Document Type","Document No.","Line No.",GetDeferralAmount,
                                                                    DeferralHeader."Calc. Method","Returns Deferral Start Date",
                                                                    DeferralHeader."No. of Periods",TRUE,
                                                                    DeferralHeader."Schedule Description",FALSE,
                                                                    SalesHeader."Currency Code");
                                                              END;

                                                   CaptionML=[ENU=Returns Deferral Start Date;
                                                              ENN=Returns Deferral Start Date] }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                IF "Variant Code" <> '' THEN
                                                                  TESTFIELD(Type,Type::Item);
                                                                TestStatusOpen;
                                                                CheckAssocPurchOrder(FIELDCAPTION("Variant Code"));

                                                                IF xRec."Variant Code" <> "Variant Code" THEN BEGIN
                                                                  TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                  TESTFIELD("Shipment No.",'');

                                                                  TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                  InitItemAppl(FALSE);
                                                                END;

                                                                CheckItemAvailable(FIELDNO("Variant Code"));

                                                                IF Type = Type::Item THEN BEGIN
                                                                  GetUnitCost;
                                                                  UpdateUnitPrice(FIELDNO("Variant Code"));
                                                                END;

                                                                GetDefaultBin;
                                                                InitQtyToAsm;
                                                                AutoAsmToOrder;
                                                                IF (xRec."Variant Code" <> "Variant Code") AND (Quantity <> 0) THEN BEGIN
                                                                  IF NOT FullReservedQtyIsForAsmToOrder THEN
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;

                                                                UpdateItemCrossRef;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ENN=Variant Code] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=IF (Document Type=FILTER(Order|Invoice),
                                                                     Quantity=FILTER(>=0),
                                                                     Qty. to Asm. to Order (Base)=CONST(0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                            Item No.=FIELD(No.),
                                                                                                                                            Variant Code=FIELD(Variant Code))
                                                                                                                                            ELSE IF (Document Type=FILTER(Return Order|Credit Memo),
                                                                                                                                                     Quantity=FILTER(<0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                                          Item No.=FIELD(No.),
                                                                                                                                                                                                          Variant Code=FIELD(Variant Code))
                                                                                                                                                                                                          ELSE Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WMSManagement@1001 : Codeunit 7302;
                                                              BEGIN
                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  IF NOT IsInbound AND ("Quantity (Base)" <> 0) AND ("Qty. to Asm. to Order (Base)" = 0) THEN
                                                                    WMSManagement.FindBinContent("Location Code","Bin Code","No.","Variant Code",'')
                                                                  ELSE
                                                                    WMSManagement.FindBin("Location Code","Bin Code",'');
                                                                END;

                                                                IF "Drop Shipment" THEN
                                                                  CheckAssocPurchOrder(FIELDCAPTION("Bin Code"));

                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Location Code");

                                                                IF (Type = Type::Item) AND ("Bin Code" <> '') THEN BEGIN
                                                                  TESTFIELD("Drop Shipment",FALSE);
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                  CheckWarehouse;
                                                                END;
                                                                ATOLink.UpdateAsmBinCodeFromSalesLine(Rec);
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1002 : Codeunit 7302;
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
                                                                BinCode := WMSManagement.BinContentLookUp("Location Code","No.","Variant Code",'',"Bin Code")
                                                              ELSE
                                                                BinCode := WMSManagement.BinLookUp("Location Code","No.","Variant Code",'');

                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ENN=Bin Code] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENN=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5405;   ;Planned             ;Boolean       ;CaptionML=[ENU=Planned;
                                                              ENN=Planned];
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item),
                                                                     No.=FILTER(<>'')) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                     ELSE IF (Type=CONST(Resource),
                                                                              No.=FILTER(<>'')) "Resource Unit of Measure".Code WHERE (Resource No.=FIELD(No.))
                                                                              ELSE "Unit of Measure";
                                                   OnValidate=VAR
                                                                UnitOfMeasureTranslation@1000 : Record 5402;
                                                                ResUnitofMeasure@1001 : Record 205;
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Qty. Shipped (Base)",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Qty. Received (Base)",0);
                                                                IF "Unit of Measure Code" <> xRec."Unit of Measure Code" THEN BEGIN
                                                                  TESTFIELD("Shipment No.",'');
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                END;

                                                                CheckAssocPurchOrder(FIELDCAPTION("Unit of Measure Code"));

                                                                IF "Unit of Measure Code" = '' THEN
                                                                  "Unit of Measure" := ''
                                                                ELSE BEGIN
                                                                  IF NOT UnitOfMeasure.GET("Unit of Measure Code") THEN
                                                                    UnitOfMeasure.INIT;
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                  GetSalesHeader;
                                                                  IF SalesHeader."Language Code" <> '' THEN BEGIN
                                                                    UnitOfMeasureTranslation.SETRANGE(Code,"Unit of Measure Code");
                                                                    UnitOfMeasureTranslation.SETRANGE("Language Code",SalesHeader."Language Code");
                                                                    IF UnitOfMeasureTranslation.FINDFIRST THEN
                                                                      "Unit of Measure" := UnitOfMeasureTranslation.Description;
                                                                  END;
                                                                END;
                                                                DistIntegration.EnterSalesItemCrossRef(Rec);
                                                                CASE Type OF
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetItem;
                                                                      GetUnitCost;
                                                                      UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
                                                                      CheckItemAvailable(FIELDNO("Unit of Measure Code"));
                                                                      "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
                                                                      "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
                                                                      "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
                                                                      "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
                                                                      IF (xRec."Unit of Measure Code" <> "Unit of Measure Code") AND (Quantity <> 0) THEN
                                                                        WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                      IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN
                                                                        InitItemAppl(FALSE);
                                                                    END;
                                                                  Type::Resource:
                                                                    BEGIN
                                                                      IF "Unit of Measure Code" = '' THEN BEGIN
                                                                        GetResource;
                                                                        "Unit of Measure Code" := Resource."Base Unit of Measure";
                                                                      END;
                                                                      ResUnitofMeasure.GET("No.","Unit of Measure Code");
                                                                      "Qty. per Unit of Measure" := ResUnitofMeasure."Qty. per Unit of Measure";
                                                                      UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
                                                                      FindResUnitCost;
                                                                    END;
                                                                  Type::"G/L Account",Type::"Fixed Asset",Type::"Charge (Item)",Type::" ":
                                                                    "Qty. per Unit of Measure" := 1;
                                                                END;
                                                                VALIDATE(Quantity);
                                                                "Assessable Value" := Item."Assessable Value" * "Qty. per Unit of Measure" ;
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENN=Unit of Measure Code] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                                UpdateUnitPrice(FIELDNO("Quantity (Base)"));
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ENN=Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 5416;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=[ENU=Outstanding Qty. (Base);
                                                              ENN=Outstanding Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5417;   ;Qty. to Invoice (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Invoice","Qty. to Invoice (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Invoice (Base);
                                                              ENN=Qty. to Invoice (Base)];
                                                   DecimalPlaces=0:5 }
    { 5418;   ;Qty. to Ship (Base) ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Ship","Qty. to Ship (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship (Base);
                                                              ENN=Qty. to Ship (Base)];
                                                   DecimalPlaces=0:5 }
    { 5458;   ;Qty. Shipped Not Invd. (Base);Decimal;
                                                   CaptionML=[ENU=Qty. Shipped Not Invd. (Base);
                                                              ENN=Qty. Shipped Not Invd. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5460;   ;Qty. Shipped (Base) ;Decimal       ;CaptionML=[ENU=Qty. Shipped (Base);
                                                              ENN=Qty. Shipped (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=[ENU=Qty. Invoiced (Base);
                                                              ENN=Qty. Invoiced (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5495;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                 Source Ref. No.=FIELD(Line No.),
                                                                                                                 Source Type=CONST(37),
                                                                                                                 Source Subtype=FIELD(Document Type),
                                                                                                                 Reservation Status=CONST(Reservation)));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure");
                                                                CALCFIELDS("Reserved Quantity");
                                                                Planned := "Reserved Quantity" = "Outstanding Quantity";
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Reserved Qty. (Base);
                                                              ENN=Reserved Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=FA Posting Date;
                                                              ENN=FA Posting Date] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                GetFAPostingGroup;
                                                              END;

                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              ENN=Depreciation Book Code] }
    { 5605;   ;Depr. until FA Posting Date;Boolean;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=Depr. until FA Posting Date;
                                                              ENN=Depr. until FA Posting Date] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                "Use Duplication List" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              ENN=Duplicate in Depreciation Book] }
    { 5613;   ;Use Duplication List;Boolean       ;OnValidate=BEGIN
                                                                "Duplicate in Depreciation Book" := '';
                                                              END;

                                                   AccessByPermission=TableData 5600=R;
                                                   CaptionML=[ENU=Use Duplication List;
                                                              ENN=Use Duplication List] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.");
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Center];
                                                   Editable=No }
    { 5701;   ;Out-of-Stock Substitution;Boolean  ;CaptionML=[ENU=Out-of-Stock Substitution;
                                                              ENN=Out-of-Stock Substitution];
                                                   Editable=No }
    { 5702;   ;Substitution Available;Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Item Substitution" WHERE (Type=CONST(Item),
                                                                                                No.=FIELD(No.),
                                                                                                Substitute Type=CONST(Item)));
                                                   CaptionML=[ENU=Substitution Available;
                                                              ENN=Substitution Available];
                                                   Editable=No }
    { 5703;   ;Originally Ordered No.;Code20      ;TableRelation=IF (Type=CONST(Item)) Item;
                                                   AccessByPermission=TableData 5715=R;
                                                   CaptionML=[ENU=Originally Ordered No.;
                                                              ENN=Originally Ordered No.] }
    { 5704;   ;Originally Ordered Var. Code;Code10;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(Originally Ordered No.));
                                                   AccessByPermission=TableData 5715=R;
                                                   CaptionML=[ENU=Originally Ordered Var. Code;
                                                              ENN=Originally Ordered Var. Code] }
    { 5705;   ;Cross-Reference No. ;Code20        ;OnValidate=VAR
                                                                ReturnedCrossRef@1000 : Record 5717;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                "Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
                                                                ReturnedCrossRef.INIT;
                                                                IF "Cross-Reference No." <> '' THEN BEGIN
                                                                  DistIntegration.ICRLookupSalesItem(Rec,ReturnedCrossRef);
                                                                  IF "No." <> ReturnedCrossRef."Item No." THEN
                                                                    VALIDATE("No.",ReturnedCrossRef."Item No.");
                                                                  IF ReturnedCrossRef."Variant Code" <> '' THEN
                                                                    VALIDATE("Variant Code",ReturnedCrossRef."Variant Code");

                                                                  IF ReturnedCrossRef."Unit of Measure" <> '' THEN
                                                                    VALIDATE("Unit of Measure Code",ReturnedCrossRef."Unit of Measure");
                                                                END;

                                                                "Unit of Measure (Cross Ref.)" := ReturnedCrossRef."Unit of Measure";
                                                                "Cross-Reference Type" := ReturnedCrossRef."Cross-Reference Type";
                                                                "Cross-Reference Type No." := ReturnedCrossRef."Cross-Reference Type No.";
                                                                "Cross-Reference No." := ReturnedCrossRef."Cross-Reference No.";

                                                                IF ReturnedCrossRef.Description <> '' THEN
                                                                  Description := ReturnedCrossRef.Description;

                                                                UpdateUnitPrice(FIELDNO("Cross-Reference No."));
                                                                UpdateICPartner;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CrossReferenceNoLookUp;
                                                            END;

                                                   AccessByPermission=TableData 5717=R;
                                                   CaptionML=[ENU=Cross-Reference No.;
                                                              ENN=Cross-Reference No.] }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   AccessByPermission=TableData 5717=R;
                                                   CaptionML=[ENU=Unit of Measure (Cross Ref.);
                                                              ENN=Unit of Measure (Cross Ref.)] }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=[ENU=Cross-Reference Type;
                                                              ENN=Cross-Reference Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bar Code";
                                                                    ENN=" ,Customer,Vendor,Bar Code"];
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=[ENU=Cross-Reference Type No.;
                                                              ENN=Cross-Reference Type No.] }
    { 5709;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENN=Item Category Code] }
    { 5710;   ;Nonstock            ;Boolean       ;AccessByPermission=TableData 5718=R;
                                                   CaptionML=[ENU=Nonstock;
                                                              ENN=Nonstock];
                                                   Editable=No }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD(Type,Type::Item);
                                                                CheckAssocPurchOrder(FIELDCAPTION(Type));

                                                                IF PurchasingCode.GET("Purchasing Code") THEN BEGIN
                                                                  "Drop Shipment" := PurchasingCode."Drop Shipment";
                                                                  "Special Order" := PurchasingCode."Special Order";
                                                                  IF "Drop Shipment" OR "Special Order" THEN BEGIN
                                                                    TESTFIELD("Qty. to Asm. to Order (Base)",0);
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)",0);
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);

                                                                    IF (Quantity <> 0) AND (Quantity = "Quantity Shipped") THEN
                                                                      ERROR(SalesLineCompletelyShippedErr);
                                                                    Reserve := Reserve::Never;
                                                                    VALIDATE(Quantity,Quantity);
                                                                    IF "Drop Shipment" THEN BEGIN
                                                                      EVALUATE("Outbound Whse. Handling Time",'<0D>');
                                                                      EVALUATE("Shipping Time",'<0D>');
                                                                      UpdateDates;
                                                                      "Bin Code" := '';
                                                                    END;
                                                                  END ELSE
                                                                    SetReserveWithoutPurchasingCode;
                                                                END ELSE BEGIN
                                                                  "Drop Shipment" := FALSE;
                                                                  "Special Order" := FALSE;
                                                                  SetReserveWithoutPurchasingCode;
                                                                END;

                                                                IF ("Purchasing Code" <> xRec."Purchasing Code") AND
                                                                   (NOT "Drop Shipment") AND
                                                                   ("Drop Shipment" <> xRec."Drop Shipment")
                                                                THEN BEGIN
                                                                  IF "Location Code" = '' THEN BEGIN
                                                                    IF InvtSetup.GET THEN
                                                                      "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                  END ELSE
                                                                    IF Location.GET("Location Code") THEN
                                                                      "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                  IF ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
                                                                    "Shipping Time" := ShippingAgentServices."Shipping Time"
                                                                  ELSE BEGIN
                                                                    GetSalesHeader;
                                                                    "Shipping Time" := SalesHeader."Shipping Time";
                                                                  END;
                                                                  UpdateDates;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Purchasing Code;
                                                              ENN=Purchasing Code] }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENN=Product Group Code] }
    { 5713;   ;Special Order       ;Boolean       ;AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Special Order;
                                                              ENN=Special Order];
                                                   Editable=No }
    { 5714;   ;Special Order Purchase No.;Code20  ;TableRelation=IF (Special Order=CONST(Yes)) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Special Order Purchase No.;
                                                              ENN=Special Order Purchase No.] }
    { 5715;   ;Special Order Purch. Line No.;Integer;
                                                   TableRelation=IF (Special Order=CONST(Yes)) "Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                                 Document No.=FIELD(Special Order Purchase No.));
                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[ENU=Special Order Purch. Line No.;
                                                              ENN=Special Order Purch. Line No.] }
    { 5749;   ;Whse. Outstanding Qty.;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding" WHERE (Source Type=CONST(37),
                                                                                                                       Source Subtype=FIELD(Document Type),
                                                                                                                       Source No.=FIELD(Document No.),
                                                                                                                       Source Line No.=FIELD(Line No.)));
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Whse. Outstanding Qty.;
                                                              ENN=Whse. Outstanding Qty.];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5750;   ;Whse. Outstanding Qty. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(37),
                                                                                                                              Source Subtype=FIELD(Document Type),
                                                                                                                              Source No.=FIELD(Document No.),
                                                                                                                              Source Line No.=FIELD(Line No.)));
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Whse. Outstanding Qty. (Base);
                                                              ENN=Whse. Outstanding Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;CaptionML=[ENU=Completely Shipped;
                                                              ENN=Completely Shipped];
                                                   Editable=No }
    { 5790;   ;Requested Delivery Date;Date       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Requested Delivery Date" <> xRec."Requested Delivery Date") AND
                                                                   ("Promised Delivery Date" <> 0D)
                                                                THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    FIELDCAPTION("Requested Delivery Date"),
                                                                    FIELDCAPTION("Promised Delivery Date"));

                                                                IF "Requested Delivery Date" <> 0D THEN
                                                                  VALIDATE("Planned Delivery Date","Requested Delivery Date")
                                                                ELSE BEGIN
                                                                  GetSalesHeader;
                                                                  VALIDATE("Shipment Date",SalesHeader."Shipment Date");
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Requested Delivery Date;
                                                              ENN=Requested Delivery Date] }
    { 5791;   ;Promised Delivery Date;Date        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Promised Delivery Date" <> 0D THEN
                                                                  VALIDATE("Planned Delivery Date","Promised Delivery Date")
                                                                ELSE
                                                                  VALIDATE("Requested Delivery Date");
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Promised Delivery Date;
                                                              ENN=Promised Delivery Date] }
    { 5792;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Drop Shipment" THEN
                                                                  DateFormularZero("Shipping Time",FIELDNO("Shipping Time"),FIELDCAPTION("Shipping Time"));
                                                                UpdateDates;
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Shipping Time;
                                                              ENN=Shipping Time] }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Drop Shipment" THEN
                                                                  DateFormularZero("Outbound Whse. Handling Time",
                                                                    FIELDNO("Outbound Whse. Handling Time"),FIELDCAPTION("Outbound Whse. Handling Time"));
                                                                UpdateDates;
                                                              END;

                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ENN=Outbound Whse. Handling Time] }
    { 5794;   ;Planned Delivery Date;Date         ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Planned Delivery Date" <> 0D THEN BEGIN
                                                                  PlannedDeliveryDateCalculated := TRUE;

                                                                  IF FORMAT("Shipping Time") <> '' THEN
                                                                    VALIDATE("Planned Shipment Date",CalcPlannedDeliveryDate(FIELDNO("Planned Delivery Date")))
                                                                  ELSE
                                                                    VALIDATE("Planned Shipment Date",CalcPlannedShptDate(FIELDNO("Planned Delivery Date")));

                                                                  IF "Planned Shipment Date" > "Planned Delivery Date" THEN
                                                                    "Planned Delivery Date" := "Planned Shipment Date";
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Planned Delivery Date;
                                                              ENN=Planned Delivery Date] }
    { 5795;   ;Planned Shipment Date;Date         ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Planned Shipment Date" <> 0D THEN BEGIN
                                                                  PlannedShipmentDateCalculated := TRUE;

                                                                  IF FORMAT("Outbound Whse. Handling Time") <> '' THEN
                                                                    VALIDATE(
                                                                      "Shipment Date",
                                                                      CalendarMgmt.CalcDateBOC2(
                                                                        FORMAT("Outbound Whse. Handling Time"),
                                                                        "Planned Shipment Date",
                                                                        CalChange."Source Type"::Location,
                                                                        "Location Code",
                                                                        '',
                                                                        CalChange."Source Type"::"Shipping Agent",
                                                                        "Shipping Agent Code",
                                                                        "Shipping Agent Service Code",
                                                                        FALSE))
                                                                  ELSE
                                                                    VALIDATE(
                                                                      "Shipment Date",
                                                                      CalendarMgmt.CalcDateBOC(
                                                                        FORMAT(FORMAT('')),
                                                                        "Planned Shipment Date",
                                                                        CalChange."Source Type"::"Shipping Agent",
                                                                        "Shipping Agent Code",
                                                                        "Shipping Agent Service Code",
                                                                        CalChange."Source Type"::Location,
                                                                        "Location Code",
                                                                        '',
                                                                        FALSE));
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Planned Shipment Date;
                                                              ENN=Planned Shipment Date] }
    { 5796;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENN=Shipping Agent Code] }
    { 5797;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Shipping Agent Service Code" <> xRec."Shipping Agent Service Code" THEN
                                                                  EVALUATE("Shipping Time",'<>');

                                                                IF "Drop Shipment" THEN BEGIN
                                                                  EVALUATE("Shipping Time",'<0D>');
                                                                  UpdateDates;
                                                                END ELSE
                                                                  IF ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
                                                                    "Shipping Time" := ShippingAgentServices."Shipping Time"
                                                                  ELSE BEGIN
                                                                    GetSalesHeader;
                                                                    "Shipping Time" := SalesHeader."Shipping Time";
                                                                  END;

                                                                IF ShippingAgentServices."Shipping Time" <> xRec."Shipping Time" THEN
                                                                  VALIDATE("Shipping Time","Shipping Time");
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ENN=Shipping Agent Service Code] }
    { 5800;   ;Allow Item Charge Assignment;Boolean;
                                                   InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                CheckItemChargeAssgnt;
                                                              END;

                                                   AccessByPermission=TableData 5800=R;
                                                   CaptionML=[ENU=Allow Item Charge Assignment;
                                                              ENN=Allow Item Charge Assignment] }
    { 5801;   ;Qty. to Assign      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Sales)"."Qty. to Assign" WHERE (Document Type=FIELD(Document Type),
                                                                                                                            Document No.=FIELD(Document No.),
                                                                                                                            Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. to Assign;
                                                              ENN=Qty. to Assign];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5802;   ;Qty. Assigned       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Sales)"."Qty. Assigned" WHERE (Document Type=FIELD(Document Type),
                                                                                                                           Document No.=FIELD(Document No.),
                                                                                                                           Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. Assigned;
                                                              ENN=Qty. Assigned];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5803;   ;Return Qty. to Receive;Decimal     ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   ("Return Qty. to Receive" <> 0) AND
                                                                   (NOT "Drop Shipment")
                                                                THEN
                                                                  CheckWarehouse;

                                                                IF "Return Qty. to Receive" = Quantity - "Return Qty. Received" THEN
                                                                  InitQtyToReceive
                                                                ELSE BEGIN
                                                                  "Return Qty. to Receive (Base)" := CalcBaseQty("Return Qty. to Receive");
                                                                  InitQtyToInvoice;
                                                                END;
                                                                IF ("Return Qty. to Receive" * Quantity < 0) OR
                                                                   (ABS("Return Qty. to Receive") > ABS("Outstanding Quantity")) OR
                                                                   (Quantity * "Outstanding Quantity" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text020,
                                                                    "Outstanding Quantity");
                                                                IF ("Return Qty. to Receive (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Return Qty. to Receive (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                   ("Quantity (Base)" * "Outstanding Qty. (Base)" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text021,
                                                                    "Outstanding Qty. (Base)");

                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Return Qty. to Receive" > 0) THEN
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                              END;

                                                   AccessByPermission=TableData 6660=R;
                                                   CaptionML=[ENU=Return Qty. to Receive;
                                                              ENN=Return Qty. to Receive];
                                                   DecimalPlaces=0:5 }
    { 5804;   ;Return Qty. to Receive (Base);Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Return Qty. to Receive","Return Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=[ENU=Return Qty. to Receive (Base);
                                                              ENN=Return Qty. to Receive (Base)];
                                                   DecimalPlaces=0:5 }
    { 5805;   ;Return Qty. Rcd. Not Invd.;Decimal ;CaptionML=[ENU=Return Qty. Rcd. Not Invd.;
                                                              ENN=Return Qty. Rcd. Not Invd.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5806;   ;Ret. Qty. Rcd. Not Invd.(Base);Decimal;
                                                   CaptionML=[ENU=Ret. Qty. Rcd. Not Invd.(Base);
                                                              ENN=Ret. Qty. Rcd. Not Invd.(Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5807;   ;Return Rcd. Not Invd.;Decimal      ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF SalesHeader."Currency Code" <> '' THEN
                                                                  "Return Rcd. Not Invd. (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Return Rcd. Not Invd.",SalesHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Return Rcd. Not Invd. (LCY)" :=
                                                                    ROUND("Return Rcd. Not Invd.",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Return Rcd. Not Invd.;
                                                              ENN=Return Rcd. Not Invd.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 5808;   ;Return Rcd. Not Invd. (LCY);Decimal;CaptionML=[ENU=Return Rcd. Not Invd. (LCY);
                                                              ENN=Return Rcd. Not Invd. (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5809;   ;Return Qty. Received;Decimal       ;AccessByPermission=TableData 6660=R;
                                                   CaptionML=[ENU=Return Qty. Received;
                                                              ENN=Return Qty. Received];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5810;   ;Return Qty. Received (Base);Decimal;CaptionML=[ENU=Return Qty. Received (Base);
                                                              ENN=Return Qty. Received (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5811;   ;Appl.-from Item Entry;Integer      ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF "Appl.-from Item Entry" <> 0 THEN BEGIN
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                                  VALIDATE("Unit Cost (LCY)",CalcUnitCost(ItemLedgEntry));
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-from Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-from Item Entry;
                                                              ENN=Appl.-from Item Entry];
                                                   MinValue=0 }
    { 5909;   ;BOM Item No.        ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=BOM Item No.;
                                                              ENN=BOM Item No.] }
    { 6600;   ;Return Receipt No.  ;Code20        ;CaptionML=[ENU=Return Receipt No.;
                                                              ENN=Return Receipt No.];
                                                   Editable=No }
    { 6601;   ;Return Receipt Line No.;Integer    ;CaptionML=[ENU=Return Receipt Line No.;
                                                              ENN=Return Receipt Line No.];
                                                   Editable=No }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   OnValidate=BEGIN
                                                                ValidateReturnReasonCode(FIELDNO("Return Reason Code"));
                                                              END;

                                                   CaptionML=[ENU=Return Reason Code;
                                                              ENN=Return Reason Code] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ENN=Allow Line Disc.] }
    { 7002;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Item THEN
                                                                  UpdateUnitPrice(FIELDNO("Customer Disc. Group"))
                                                              END;

                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENN=Customer Disc. Group] }
    { 13701;  ;Tax Amount          ;Decimal       ;CaptionML=[ENU=Tax Amount;
                                                              ENN=Tax Amount];
                                                   DecimalPlaces=0:4;
                                                   Editable=No }
    { 13702;  ;Excise Bus. Posting Group;Code10   ;TableRelation="Excise Bus. Posting Group";
                                                   CaptionML=[ENU=Excise Bus. Posting Group;
                                                              ENN=Excise Bus. Posting Group] }
    { 13703;  ;Excise Prod. Posting Group;Code10  ;TableRelation="Excise Prod. Posting Group";
                                                   CaptionML=[ENU=Excise Prod. Posting Group;
                                                              ENN=Excise Prod. Posting Group] }
    { 13708;  ;Excise Amount       ;Decimal       ;CaptionML=[ENU=Excise Amount;
                                                              ENN=Excise Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13711;  ;Amount Including Excise;Decimal    ;CaptionML=[ENU=Amount Including Excise;
                                                              ENN=Amount Including Excise];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13712;  ;Excise Base Amount  ;Decimal       ;CaptionML=[ENU=Excise Base Amount;
                                                              ENN=Excise Base Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13715;  ;Excise Accounting Type;Option      ;CaptionML=[ENU=Excise Accounting Type;
                                                              ENN=Excise Accounting Type];
                                                   OptionCaptionML=[ENU=With CENVAT,Without CENVAT;
                                                                    ENN=With CENVAT,Without CENVAT];
                                                   OptionString=With CENVAT,Without CENVAT }
    { 13719;  ;Excise Base Quantity;Decimal       ;CaptionML=[ENU=Excise Base Quantity;
                                                              ENN=Excise Base Quantity] }
    { 13721;  ;Tax %               ;Decimal       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax %;
                                                              ENN=Tax %];
                                                   DecimalPlaces=0:2;
                                                   Editable=No }
    { 13722;  ;Amount Including Tax;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type);
                                                                TESTFIELD(Quantity);
                                                                TESTFIELD("Unit Price");

                                                                GetSalesHeader;
                                                                // "Amount Including Tax" := ROUND("Amount Including Tax",Currency."Amount Rounding Precision");
                                                                IF "Amount Added to Tax Base" <> 0 THEN BEGIN
                                                                  "Tax Liable" := SalesHeader."Tax Liable";
                                                                  "Tax Base Amount" := "Amount Added to Tax Base";
                                                                END ELSE BEGIN
                                                                  "Tax Liable" := FALSE;
                                                                  "Tax Base Amount" := ROUND("Line Amount" - "Inv. Discount Amount",
                                                                      Currency."Amount Rounding Precision");
                                                                  Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                                                                  IF "TCS Nature of Collection" = '' THEN
                                                                    "Amount To Customer" := ROUND("Line Amount" - "Inv. Discount Amount" + "Excise Amount" + "Charges To Customer" -
                                                                        "Bal. TDS/TCS Including SHECESS" + "Service Tax Amount" + "Service Tax eCess Amount" +
                                                                        "Service Tax SHE Cess Amount" + "Service Tax SBC Amount" + "KK Cess Amount",
                                                                        Currency."Amount Rounding Precision")
                                                                  ELSE
                                                                    "Amount To Customer" :=
                                                                      ROUND("Line Amount" - "Inv. Discount Amount" + "Excise Amount" + "Charges To Customer" -
                                                                        "Bal. TDS/TCS Including SHECESS" + "Service Tax Amount" + "Service Tax eCess Amount" +
                                                                        "Service Tax SHE Cess Amount" + "Service Tax SBC Amount" + "KK Cess Amount",
                                                                        Currency."Amount Rounding Precision");
                                                                END;

                                                                IF "Tax Base Amount" = 0 THEN
                                                                  "Tax %" := 0;
                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=[ENU=Amount Including Tax;
                                                              ENN=Amount Including Tax];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13724;  ;Amount Added to Excise Base;Decimal;CaptionML=[ENU=Amount Added to Excise Base;
                                                              ENN=Amount Added to Excise Base];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13725;  ;Amount Added to Tax Base;Decimal   ;CaptionML=[ENU=Amount Added to Tax Base;
                                                              ENN=Amount Added to Tax Base];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13727;  ;Tax Base Amount     ;Decimal       ;CaptionML=[ENU=Tax Base Amount;
                                                              ENN=Tax Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13734;  ;Surcharge %         ;Decimal       ;CaptionML=[ENU=Surcharge %;
                                                              ENN=Surcharge %];
                                                   Editable=No }
    { 13735;  ;Surcharge Amount    ;Decimal       ;CaptionML=[ENU=Surcharge Amount;
                                                              ENN=Surcharge Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13736;  ;Concessional Code   ;Code10        ;TableRelation="Concessional Codes";
                                                   CaptionML=[ENU=Concessional Code;
                                                              ENN=Concessional Code] }
    { 13742;  ;Assessee Code       ;Code10        ;TableRelation="Assessee Code";
                                                   CaptionML=[ENU=Assessee Code;
                                                              ENN=Assessee Code];
                                                   Editable=No }
    { 13743;  ;TDS/TCS %           ;Decimal       ;CaptionML=[ENU=TDS/TCS %;
                                                              ENN=TDS/TCS %];
                                                   Editable=No }
    { 13746;  ;Bal. TDS/TCS Including SHECESS;Decimal;
                                                   CaptionML=[ENU=Bal. TDS/TCS Including SHECESS;
                                                              ENN=Bal. TDS/TCS Including SHECESS];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13749;  ;Claim Deferred Excise;Boolean      ;CaptionML=[ENU=Claim Deferred Excise;
                                                              ENN=Claim Deferred Excise] }
    { 13750;  ;Capital Item        ;Boolean       ;CaptionML=[ENU=Capital Item;
                                                              ENN=Capital Item];
                                                   Editable=No }
    { 13755;  ;BED Amount          ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."BED Amount" <> "BED Amount" THEN BEGIN
                                                                  TESTFIELD(MRP,FALSE);
                                                                  TESTFIELD("Price Inclusive of Tax",FALSE);
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=BED Amount;
                                                              ENN=BED Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13758;  ;AED(GSI) Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."AED(GSI) Amount" <> "AED(GSI) Amount" THEN BEGIN
                                                                  TESTFIELD(MRP,FALSE);
                                                                  TESTFIELD("Price Inclusive of Tax",FALSE);
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=AED(GSI) Amount;
                                                              ENN=AED(GSI) Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13759;  ;SED Amount          ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."SED Amount" <> "SED Amount" THEN BEGIN
                                                                  TESTFIELD(MRP,FALSE);
                                                                  TESTFIELD("Price Inclusive of Tax",FALSE);
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=SED Amount;
                                                              ENN=SED Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13769;  ;SAED Amount         ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."SAED Amount" <> "SAED Amount" THEN BEGIN
                                                                  TESTFIELD(MRP,FALSE);
                                                                  TESTFIELD("Price Inclusive of Tax",FALSE);
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=SAED Amount;
                                                              ENN=SAED Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13770;  ;CESS Amount         ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."CESS Amount" <> "CESS Amount" THEN BEGIN
                                                                  TESTFIELD(MRP,FALSE);
                                                                  TESTFIELD("Price Inclusive of Tax",FALSE);
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=CESS Amount;
                                                              ENN=CESS Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13771;  ;NCCD Amount         ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."NCCD Amount" <> "NCCD Amount" THEN BEGIN
                                                                  TESTFIELD(MRP,FALSE);
                                                                  TESTFIELD("Price Inclusive of Tax",FALSE);
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=NCCD Amount;
                                                              ENN=NCCD Amount];
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13772;  ;eCess Amount        ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."eCess Amount" <> "eCess Amount" THEN BEGIN
                                                                  TESTFIELD(MRP,FALSE);
                                                                  TESTFIELD("Price Inclusive of Tax",FALSE);
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=eCess Amount;
                                                              ENN=eCess Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13796;  ;Form Code           ;Code10        ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   OnLookup=VAR
                                                              StateForm@1280000 : Record 13767;
                                                            BEGIN
                                                              StateForm.SETRANGE(State,State);
                                                              StateForm.SETRANGE("Transit Document",FALSE);
                                                              IF StateForm.FINDFIRST THEN
                                                                IF PAGE.RUNMODAL(PAGE::"State Forms",StateForm) = ACTION::LookupOK THEN
                                                                  "Form Code" := StateForm."Form Code";
                                                              VALIDATE("Form Code");
                                                            END;

                                                   CaptionML=[ENU=Form Code;
                                                              ENN=Form Code] }
    { 13797;  ;Form No.            ;Code10        ;CaptionML=[ENU=Form No.;
                                                              ENN=Form No.] }
    { 13798;  ;State               ;Code10        ;TableRelation=State;
                                                   CaptionML=[ENU=State;
                                                              ENN=State] }
    { 13799;  ;TDS/TCS Amount      ;Decimal       ;CaptionML=[ENU=TDS/TCS Amount;
                                                              ENN=TDS/TCS Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16340;  ;Amount To Customer  ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type);
                                                                TESTFIELD(Quantity);
                                                                TESTFIELD("Unit Price");
                                                                "Amount To Customer" := ROUND("Amount To Customer",Currency."Amount Rounding Precision");
                                                                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=[ENU=Amount To Customer;
                                                              ENN=Amount To Customer];
                                                   Editable=No }
    { 16342;  ;Charges To Customer ;Decimal       ;CaptionML=[ENU=Charges To Customer;
                                                              ENN=Charges To Customer];
                                                   Editable=No }
    { 16343;  ;TDS/TCS Base Amount ;Decimal       ;CaptionML=[ENU=TDS/TCS Base Amount;
                                                              ENN=TDS/TCS Base Amount];
                                                   Editable=No }
    { 16363;  ;Surcharge Base Amount;Decimal      ;CaptionML=[ENU=Surcharge Base Amount;
                                                              ENN=Surcharge Base Amount];
                                                   Editable=No }
    { 16367;  ;Temp TDS/TCS Base   ;Decimal       ;CaptionML=[ENU=Temp TDS/TCS Base;
                                                              ENN=Temp TDS/TCS Base] }
    { 16377;  ;Service Tax Group   ;Code20        ;TableRelation="Service Tax Groups".Code;
                                                   OnValidate=BEGIN
                                                                "Service Tax Registration No." := ServiceTaxMgt.GetServiceTaxRegNoForLocation("Location Code");
                                                                UpdateTaxAmounts;
                                                                UpdateGSTAmounts("GST Base Amount");
                                                              END;

                                                   CaptionML=[ENU=Service Tax Group;
                                                              ENN=Service Tax Group] }
    { 16379;  ;Service Tax Base    ;Decimal       ;CaptionML=[ENU=Service Tax Base;
                                                              ENN=Service Tax Base] }
    { 16380;  ;Service Tax Amount  ;Decimal       ;CaptionML=[ENU=Service Tax Amount;
                                                              ENN=Service Tax Amount] }
    { 16381;  ;Service Tax Registration No.;Code20;TableRelation="Service Tax Registration Nos.".Code;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Service Tax Group");
                                                              END;

                                                   CaptionML=[ENU=Service Tax Registration No.;
                                                              ENN=Service Tax Registration No.] }
    { 16383;  ;eCESS % on TDS/TCS  ;Decimal       ;CaptionML=[ENU=eCESS % on TDS/TCS;
                                                              ENN=eCESS % on TDS/TCS];
                                                   Editable=No }
    { 16384;  ;eCESS on TDS/TCS Amount;Decimal    ;CaptionML=[ENU=eCESS on TDS/TCS Amount;
                                                              ENN=eCESS on TDS/TCS Amount];
                                                   Editable=No }
    { 16385;  ;Total TDS/TCS Incl. SHE CESS;Decimal;
                                                   CaptionML=[ENU=Total TDS/TCS Incl. SHE CESS;
                                                              ENN=Total TDS/TCS Incl. SHE CESS];
                                                   Editable=No }
    { 16386;  ;Per Contract        ;Boolean       ;CaptionML=[ENU=Per Contract;
                                                              ENN=Per Contract] }
    { 16391;  ;Service Tax eCess Amount;Decimal   ;CaptionML=[ENU=Service Tax eCess Amount;
                                                              ENN=Service Tax eCess Amount] }
    { 16452;  ;ADET Amount         ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."ADET Amount" <> "ADET Amount" THEN BEGIN
                                                                  TESTFIELD(MRP,FALSE);
                                                                  TESTFIELD("Price Inclusive of Tax",FALSE);
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=ADET Amount;
                                                              ENN=ADET Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16455;  ;AED(TTA) Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."AED(TTA) Amount" <> "AED(TTA) Amount" THEN BEGIN
                                                                  TESTFIELD(MRP,FALSE);
                                                                  TESTFIELD("Price Inclusive of Tax",FALSE);
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=AED(TTA) Amount;
                                                              ENN=AED(TTA) Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16456;  ;Free Supply         ;Boolean       ;CaptionML=[ENU=Free Supply;
                                                              ENN=Free Supply] }
    { 16459;  ;ADE Amount          ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."ADE Amount" <> "ADE Amount" THEN BEGIN
                                                                  TESTFIELD(MRP,FALSE);
                                                                  TESTFIELD("Price Inclusive of Tax",FALSE);
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=ADE Amount;
                                                              ENN=ADE Amount];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16490;  ;Assessable Value    ;Decimal       ;CaptionML=[ENU=Assessable Value;
                                                              ENN=Assessable Value] }
    { 16491;  ;VAT Type            ;Option        ;CaptionML=[ENU=VAT Type;
                                                              ENN=VAT Type];
                                                   OptionCaptionML=[ENU=" ,Item,Capital Goods";
                                                                    ENN=" ,Item,Capital Goods"];
                                                   OptionString=[ ,Item,Capital Goods] }
    { 16494;  ;SHE Cess Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."ADET Amount" <> "SHE Cess Amount" THEN BEGIN
                                                                  TESTFIELD(MRP,FALSE);
                                                                  TESTFIELD("Price Inclusive of Tax",FALSE);
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=SHE Cess Amount;
                                                              ENN=SHE Cess Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16496;  ;Service Tax SHE Cess Amount;Decimal;CaptionML=[ENU=Service Tax SHE Cess Amount;
                                                              ENN=Service Tax SHE Cess Amount] }
    { 16500;  ;Direct Debit To PLA / RG;Boolean   ;OnValidate=BEGIN
                                                                CheckECCNo;
                                                                IF xRec."Direct Debit To PLA / RG" AND (NOT "Direct Debit To PLA / RG") AND
                                                                   ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice])
                                                                THEN BEGIN
                                                                  GenJnlLine.RESET;
                                                                  GenJnlLine.SETFILTER("Journal Template Name",'%1','');
                                                                  GenJnlLine.SETFILTER("Journal Batch Name",'%1','');
                                                                  GenJnlLine.SETRANGE("Document No.","Document No.");
                                                                  GenJnlLine.DELETEALL(TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Direct Debit To PLA / RG;
                                                              ENN=Direct Debit To PLA / RG] }
    { 16502;  ;TCS Nature of Collection;Code10    ;TableRelation="TCS Nature Of Collection";
                                                   OnValidate=BEGIN
                                                                GetSalesHeader;
                                                                IF TCSNOC.GET("TCS Nature of Collection") THEN
                                                                  "TCS Type" := TCSNOC."TCS Type"
                                                                ELSE
                                                                  "TCS Type" := "TCS Type"::" ";
                                                                IF GSTManagement.CheckGSTStrucure(SalesHeader.Structure) THEN BEGIN
                                                                  SalesHeader.TESTFIELD("Applies-to Doc. No.",'');
                                                                  SalesHeader.TESTFIELD("Applies-to ID",'');
                                                                END;

                                                                InitTCS(Rec);
                                                              END;

                                                   OnLookup=VAR
                                                              NatureOfCollection@1500001 : Record 16507;
                                                              TempNatureOfCollection@1500000 : TEMPORARY Record 16507;
                                                            BEGIN
                                                              NOCLine.RESET;
                                                              NOCLine.SETRANGE(Type,NODLines.Type::Customer);
                                                              NOCLine.SETRANGE("No.","Sell-to Customer No.");
                                                              IF NOCLine.FIND('-') THEN
                                                                REPEAT
                                                                  NatureOfCollection.GET(NOCLine."NOD/NOC");
                                                                  TempNatureOfCollection := NatureOfCollection;
                                                                  TempNatureOfCollection.INSERT;
                                                                UNTIL NOCLine.NEXT = 0;

                                                              IF PAGE.RUNMODAL(PAGE::"TCS Nature of Collections",TempNatureOfCollection) = ACTION::LookupOK THEN
                                                                "TCS Nature of Collection" := TempNatureOfCollection.Code;
                                                              VALIDATE("TCS Nature of Collection");
                                                            END;

                                                   CaptionML=[ENU=TCS Nature of Collection;
                                                              ENN=TCS Nature of Collection] }
    { 16503;  ;TCS Type            ;Option        ;CaptionML=[ENU=TCS Type;
                                                              ENN=TCS Type];
                                                   OptionCaptionML=[ENU=" ,A,B,C,D,E,F,G,H,I";
                                                                    ENN=" ,A,B,C,D,E,F,G,H,I"];
                                                   OptionString=[ ,A,B,C,D,E,F,G,H,I] }
    { 16504;  ;Standard Deduction %;Decimal       ;CaptionML=[ENU=Standard Deduction %;
                                                              ENN=Standard Deduction %];
                                                   Editable=No }
    { 16505;  ;Standard Deduction Amount;Decimal  ;CaptionML=[ENU=Standard Deduction Amount;
                                                              ENN=Standard Deduction Amount];
                                                   Editable=No }
    { 16519;  ;Supplementary       ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT Supplementary THEN
                                                                  "Source Document No." := '';
                                                              END;

                                                   CaptionML=[ENU=Supplementary;
                                                              ENN=Supplementary] }
    { 16520;  ;Source Document Type;Option        ;OnValidate=BEGIN
                                                                IF "Source Document Type" <> xRec."Source Document Type" THEN
                                                                  "Source Document No." := '';
                                                              END;

                                                   CaptionML=[ENU=Source Document Type;
                                                              ENN=Source Document Type];
                                                   OptionCaptionML=[ENU=Posted Invoice,Posted Credit Memo;
                                                                    ENN=Posted Invoice,Posted Credit Memo];
                                                   OptionString=Posted Invoice,Posted Credit Memo }
    { 16521;  ;Source Document No. ;Code20        ;TableRelation=IF (Source Document Type=FILTER(Posted Invoice)) "Sales Invoice Header".No.
                                                                 ELSE IF (Source Document Type=FILTER(Posted Credit Memo)) "Sales Cr.Memo Header".No.;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Supplementary);
                                                              END;

                                                   CaptionML=[ENU=Source Document No.;
                                                              ENN=Source Document No.] }
    { 16524;  ;ADC VAT Amount      ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."ADC VAT Amount" <> "ADC VAT Amount" THEN BEGIN
                                                                  TESTFIELD(MRP,FALSE);
                                                                  TESTFIELD("Price Inclusive of Tax",FALSE);
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=ADC VAT Amount;
                                                              ENN=ADC VAT Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16525;  ;CIF Amount          ;Decimal       ;CaptionML=[ENU=CIF Amount;
                                                              ENN=CIF Amount] }
    { 16526;  ;BCD Amount          ;Decimal       ;CaptionML=[ENU=BCD Amount;
                                                              ENN=BCD Amount] }
    { 16527;  ;CVD                 ;Boolean       ;CaptionML=[ENU=CVD;
                                                              ENN=CVD] }
    { 16528;  ;Process Carried Out ;Code10        ;TableRelation="Process Carried Out".Code;
                                                   CaptionML=[ENU=Process Carried Out;
                                                              ENN=Process Carried Out] }
    { 16529;  ;Identification Mark ;Text30        ;CaptionML=[ENU=Identification Mark;
                                                              ENN=Identification Mark] }
    { 16530;  ;Re-Dispatch         ;Boolean       ;CaptionML=[ENU=Re-Dispatch;
                                                              ENN=Re-Dispatch];
                                                   Editable=No }
    { 16531;  ;Return Rcpt Line No.;Integer       ;CaptionML=[ENU=Return Rcpt Line No.;
                                                              ENN=Return Rcpt Line No.];
                                                   Editable=No }
    { 16532;  ;Qty. to be Re-Dispatched;Decimal   ;CaptionML=[ENU=Qty. to be Re-Dispatched;
                                                              ENN=Qty. to be Re-Dispatched] }
    { 16533;  ;Return Re-Dispatch Rcpt. No.;Code20;CaptionML=[ENU=Return Re-Dispatch Rcpt. No.;
                                                              ENN=Return Re-Dispatch Rcpt. No.] }
    { 16534;  ;SHE Cess % on TDS/TCS;Decimal      ;CaptionML=[ENU=SHE Cess % on TDS/TCS;
                                                              ENN=SHE Cess % on TDS/TCS];
                                                   Editable=No }
    { 16535;  ;SHE Cess on TDS/TCS Amount;Decimal ;CaptionML=[ENU=SHE Cess on TDS/TCS Amount;
                                                              ENN=SHE Cess on TDS/TCS Amount];
                                                   Editable=No }
    { 16537;  ;MRP Price           ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=MRP Price;
                                                              ENN=MRP Price];
                                                   MinValue=0;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 16538;  ;MRP                 ;Boolean       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=MRP;
                                                              ENN=MRP];
                                                   Editable=No }
    { 16539;  ;Abatement %         ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Abatement %;
                                                              ENN=Abatement %];
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 16540;  ;PIT Structure       ;Code10        ;TableRelation="Structure Header";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Line No." <> 0 THEN BEGIN
                                                                  GetSalesHeader;
                                                                  InsertStrOrdDetail(SalesHeader,Rec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=PIT Structure;
                                                              ENN=PIT Structure] }
    { 16541;  ;Price Inclusive of Tax;Boolean     ;OnValidate=VAR
                                                                StrOrderDetails@1500000 : Record 13794;
                                                                StrOrderLines@1500001 : Record 13795;
                                                                SaleLineDetailBuffer@1500002 : Record 16583;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                GetSalesHeader;
                                                                TESTFIELD(Type,Type::Item);
                                                                IF "Price Inclusive of Tax" THEN BEGIN
                                                                  VALIDATE("Line Discount %");
                                                                  SalesHeader.TESTFIELD("Free Supply",FALSE);
                                                                END;
                                                                IF NOT "Price Inclusive of Tax" THEN BEGIN
                                                                  "PIT Structure" := '';
                                                                  StrOrderDetails.RESET;
                                                                  StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                                                                  StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Sale);
                                                                  StrOrderDetails.SETRANGE("Document Type","Document Type");
                                                                  StrOrderDetails.SETRANGE("Document No.","Document No.");
                                                                  StrOrderDetails.SETRANGE("Document Line No.","Line No.");
                                                                  StrOrderDetails.SETRANGE("Price Inclusive of Tax",TRUE);
                                                                  StrOrderDetails.DELETEALL;

                                                                  StrOrderLines.RESET;
                                                                  StrOrderLines.SETCURRENTKEY("Document Type","Document No.",Type);
                                                                  StrOrderLines.SETRANGE(Type,StrOrderLines.Type::Sale);
                                                                  StrOrderLines.SETRANGE("Document Type","Document Type");
                                                                  StrOrderLines.SETRANGE("Document No.","Document No.");
                                                                  StrOrderLines.SETRANGE("Line No.","Line No.");
                                                                  StrOrderLines.SETRANGE("Price Inclusive of Tax",TRUE);
                                                                  StrOrderLines.DELETEALL;

                                                                  SaleLineDetailBuffer.RESET;
                                                                  SaleLineDetailBuffer.SETRANGE(Type,StrOrderLines.Type::Sale);
                                                                  SaleLineDetailBuffer.SETRANGE("Document Type","Document Type");
                                                                  SaleLineDetailBuffer.SETRANGE("Document No.","Document No.");
                                                                  SaleLineDetailBuffer.SETRANGE("Line No.","Line No.");
                                                                  SaleLineDetailBuffer.DELETEALL;

                                                                  InitExciseAmount;
                                                                  "Amount Added to Excise Base" := 0;
                                                                  "Excise Base Amount" := 0;
                                                                  "Amount Added to Tax Base" := 0;
                                                                  "Tax Base Amount" := 0;
                                                                  "Charges To Customer" := 0;
                                                                  "Unit Price" := 0;
                                                                  "Line Amount" := 0;
                                                                  "Unit Price Incl. of Tax" := 0;
                                                                  "Outstanding Amount" := 0;
                                                                  "Outstanding Amount (LCY)" := 0;
                                                                  "Amount To Customer UPIT" := 0;
                                                                  VALIDATE("Line Discount %");
                                                                  VALIDATE(Quantity);
                                                                  UpdateTaxAmounts;
                                                                  UpdateGSTAmounts("GST Base Amount");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Price Inclusive of Tax;
                                                              ENN=Price Inclusive of Tax] }
    { 16542;  ;Unit Price Incl. of Tax;Decimal    ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Price Inclusive of Tax" THEN
                                                                  VALIDATE("Line Discount %");
                                                              END;

                                                   CaptionML=[ENU=Unit Price Incl. of Tax;
                                                              ENN=Unit Price Incl. of Tax];
                                                   MinValue=0;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 16543;  ;Excise Base Variable;Decimal       ;CaptionML=[ENU=Excise Base Variable;
                                                              ENN=Excise Base Variable];
                                                   Editable=No }
    { 16544;  ;Tax Base Variable   ;Decimal       ;CaptionML=[ENU=Tax Base Variable;
                                                              ENN=Tax Base Variable];
                                                   Editable=No }
    { 16545;  ;Amount To Customer UPIT;Decimal    ;CaptionML=[ENU=Amount To Customer UPIT;
                                                              ENN=Amount To Customer UPIT];
                                                   Editable=No }
    { 16546;  ;UPIT Rounding Inserted;Boolean     ;CaptionML=[ENU=UPIT Rounding Inserted;
                                                              ENN=UPIT Rounding Inserted] }
    { 16547;  ;Total UPIT Amount   ;Decimal       ;CaptionML=[ENU=Total UPIT Amount;
                                                              ENN=Total UPIT Amount] }
    { 16548;  ;Inv Discount Fixed  ;Decimal       ;CaptionML=[ENU=Inv Discount Fixed;
                                                              ENN=Inv Discount Fixed] }
    { 16549;  ;Inv Discount Variable;Decimal      ;CaptionML=[ENU=Inv Discount Variable;
                                                              ENN=Inv Discount Variable] }
    { 16550;  ;Custom eCess Amount ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."Custom eCess Amount" <> "Custom eCess Amount" THEN BEGIN
                                                                  TESTFIELD(MRP,FALSE);
                                                                  TESTFIELD("Price Inclusive of Tax",FALSE);
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Custom eCess Amount;
                                                              ENN=Custom eCess Amount] }
    { 16551;  ;Custom SHECess Amount;Decimal      ;OnValidate=BEGIN
                                                                IF xRec."Custom SHECess Amount" <> "Custom SHECess Amount" THEN BEGIN
                                                                  TESTFIELD(MRP,FALSE);
                                                                  TESTFIELD("Price Inclusive of Tax",FALSE);
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Custom SHECess Amount;
                                                              ENN=Custom SHECess Amount] }
    { 16552;  ;Excise Effective Rate;Decimal      ;CaptionML=[ENU=Excise Effective Rate;
                                                              ENN=Excise Effective Rate] }
    { 16553;  ;Item Charge Entry   ;Boolean       ;CaptionML=[ENU=Item Charge Entry;
                                                              ENN=Item Charge Entry] }
    { 16554;  ;Tot. Serv Tax Amount (Intm);Decimal;CaptionML=[ENU=Tot. Serv Tax Amount (Intm);
                                                              ENN=Tot. Serv Tax Amount (Intm)] }
    { 16555;  ;S. Tax Base Amount (Intm);Decimal  ;CaptionML=[ENU=S. Tax Base Amount (Intm);
                                                              ENN=S. Tax Base Amount (Intm)] }
    { 16556;  ;S. Tax Amount (Intm);Decimal       ;CaptionML=[ENU=S. Tax Amount (Intm);
                                                              ENN=S. Tax Amount (Intm)];
                                                   Editable=No }
    { 16557;  ;S. Tax eCess Amount (Intm);Decimal ;CaptionML=[ENU=S. Tax eCess Amount (Intm);
                                                              ENN=S. Tax eCess Amount (Intm)];
                                                   Editable=No }
    { 16558;  ;S. Tax SHE Cess Amount (Intm);Decimal;
                                                   CaptionML=[ENU=S. Tax SHE Cess Amount (Intm);
                                                              ENN=S. Tax SHE Cess Amount (Intm)];
                                                   Editable=No }
    { 16559;  ;Amt. Incl. Service Tax (Intm);Decimal;
                                                   CaptionML=[ENU=Amt. Incl. Service Tax (Intm);
                                                              ENN=Amt. Incl. Service Tax (Intm)];
                                                   Editable=No }
    { 16560;  ;Service Tax SBC %   ;Decimal       ;CaptionML=[ENU=Service Tax SBC %;
                                                              ENN=Service Tax SBC %];
                                                   Editable=No }
    { 16561;  ;Service Tax SBC Amount;Decimal     ;CaptionML=[ENU=Service Tax SBC Amount;
                                                              ENN=Service Tax SBC Amount];
                                                   Editable=No }
    { 16562;  ;Service Tax SBC Amount (Intm);Decimal;
                                                   CaptionML=[ENU=Service Tax SBC Amount(Intm);
                                                              ENN=Service Tax SBC Amount(Intm)];
                                                   Editable=No }
    { 16563;  ;KK Cess%            ;Decimal       ;CaptionML=[ENU=KK Cess%;
                                                              ENN=KK Cess%];
                                                   Editable=No }
    { 16564;  ;KK Cess Amount      ;Decimal       ;CaptionML=[ENU=KK Cess Amount;
                                                              ENN=KK Cess Amount];
                                                   Editable=No }
    { 16565;  ;KK Cess Amount (Intm);Decimal      ;CaptionML=[ENU=KK Cess Amount (Intm);
                                                              ENN=KK Cess Amount (Intm)];
                                                   Editable=No }
    { 16601;  ;GST Place of Supply ;Option        ;OnValidate=VAR
                                                                SalesHeaderRec@1500000 : Record 36;
                                                              BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Quantity Invoiced",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                   IF "GST Place of Supply" = "GST Place of Supply"::"Ship-to Address" THEN BEGIN
                                                                     SalesHeaderRec.GET("Document Type","Document No.");
                                                                     SalesHeaderRec.TESTFIELD("Ship-to Code");
                                                                   END;
                                                              END;

                                                   CaptionML=[ENU=GST Place of Supply;
                                                              ENN=GST Place of Supply];
                                                   OptionCaptionML=[ENU=" ,Bill-to Address,Ship-to Address,Location Address";
                                                                    ENN=" ,Bill-to Address,Ship-to Address,Location Address"];
                                                   OptionString=[ ,Bill-to Address,Ship-to Address,Location Address] }
    { 16602;  ;GST Group Code      ;Code20        ;TableRelation="GST Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF GSTGroup.GET("GST Group Code") THEN BEGIN
                                                                  IF GSTGroup."Reverse Charge" THEN
                                                                    ERROR(GSTGroupReverseChargeErr,"GST Group Code");
                                                                  "GST Place of Supply" := GSTGroup."GST Place Of Supply";
                                                                  "GST Group Type" := GSTGroup."GST Group Type";
                                                                END;
                                                                IF "GST Place of Supply" = "GST Place of Supply"::" " THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  "GST Place of Supply" := SalesSetup."GST Dependency Type";
                                                                END;
                                                                "HSN/SAC Code" := '';
                                                              END;

                                                   CaptionML=[ENU=GST Group Code;
                                                              ENN=GST Group Code] }
    { 16603;  ;GST Group Type      ;Option        ;CaptionML=[ENU=GST Group Type;
                                                              ENN=GST Group Type];
                                                   OptionCaptionML=[ENU=Goods,Service;
                                                                    ENN=Goods,Service];
                                                   OptionString=Goods,Service;
                                                   Editable=No }
    { 16604;  ;GST Base Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF "GST Base Amount" = 0 THEN BEGIN
                                                                    "GST %" := 0;
                                                                    "Total GST Amount" := 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=GST Base Amount;
                                                              ENN=GST Base Amount];
                                                   Editable=No }
    { 16605;  ;GST %               ;Decimal       ;CaptionML=[ENU=GST %;
                                                              ENN=GST %];
                                                   Editable=No }
    { 16606;  ;Total GST Amount    ;Decimal       ;CaptionML=[ENU=Total GST Amount;
                                                              ENN=Total GST Amount];
                                                   Editable=No }
    { 16607;  ;HSN/SAC Code        ;Code8         ;TableRelation=HSN/SAC.Code WHERE (GST Group Code=FIELD(GST Group Code));
                                                   OnValidate=VAR
                                                                SalesHeader3@1500000 : Record 36;
                                                                CustLedgerEntry@1500001 : Record 21;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                SalesHeader3.GET("Document Type","Document No.");
                                                                IF SalesHeader3."Applies-to Doc. No." <> '' THEN BEGIN
                                                                   CustLedgerEntry.SETRANGE("Document Type",SalesHeader3."Applies-to Doc. Type");
                                                                   CustLedgerEntry.SETRANGE("Document No.",SalesHeader3."Applies-to Doc. No.");
                                                                   CustLedgerEntry.FINDFIRST;
                                                                   IF CustLedgerEntry."HSN/SAC Code" <> "HSN/SAC Code" THEN
                                                                     ERROR(HSNErr);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=HSN/SAC Code;
                                                              ENN=HSN/SAC Code] }
    { 16608;  ;GST Jurisdiction Type;Option       ;CaptionML=[ENU=GST Jurisdiction Type;
                                                              ENN=GST Jurisdiction Type];
                                                   OptionCaptionML=[ENU=Intrastate,Interstate;
                                                                    ENN=Intrastate,Interstate];
                                                   OptionString=Intrastate,Interstate;
                                                   Editable=No }
    { 16609;  ;Invoice Type        ;Option        ;CaptionML=[ENU=Invoice Type;
                                                              ENN=Invoice Type];
                                                   OptionCaptionML=[ENU=" ,Bill of Supply,Export,Supplementary,Debit Note,Non-GST,Taxable";
                                                                    ENN=" ,Bill of Supply,Export,Supplementary,Debit Note,Non-GST,Taxable"];
                                                   OptionString=[ ,Bill of Supply,Export,Supplementary,Debit Note,Non-GST,Taxable];
                                                   Editable=No }
    { 16610;  ;Exempted            ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Quantity Invoiced",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                GetSalesHeader;
                                                                IF (SalesHeader."Applies-to Doc. No." <> '') OR (SalesHeader."Applies-to ID" <> '') THEN
                                                                  ERROR(AppliesToDocErr);
                                                              END;

                                                   CaptionML=[ENU=Exempted;
                                                              ENN=Exempted] }
  }
  KEYS
  {
    {    ;Document Type,Document No.,Line No.     ;SumIndexFields=Amount,Amount Including VAT,Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY),Amount To Customer;
                                                   Clustered=Yes }
    {    ;Document No.,Line No.,Document Type      }
    {    ;Document Type,Type,No.,Variant Code,Drop Shipment,Location Code,Shipment Date;
                                                   SumIndexFields=Outstanding Qty. (Base) }
    {    ;Document Type,Bill-to Customer No.,Currency Code;
                                                   SumIndexFields=Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY),Return Rcd. Not Invd. (LCY) }
    { No ;Document Type,Type,No.,Variant Code,Drop Shipment,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Location Code,Shipment Date;
                                                   SumIndexFields=Outstanding Qty. (Base) }
    { No ;Document Type,Bill-to Customer No.,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Currency Code;
                                                   SumIndexFields=Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY) }
    {    ;Document Type,Blanket Order No.,Blanket Order Line No. }
    {    ;Document Type,Document No.,Location Code }
    {    ;Document Type,Shipment No.,Shipment Line No. }
    {    ;Type,No.,Variant Code,Drop Shipment,Location Code,Document Type,Shipment Date;
                                                   MaintainSQLIndex=No }
    {    ;Document Type,Sell-to Customer No.,Shipment No.;
                                                   SumIndexFields=Outstanding Amount (LCY) }
    {    ;Job Contract Entry No.                   }
    {    ;Document Type,Document No.,Qty. Shipped Not Invoiced }
    {    ;Document Type,Document No.,Direct Debit To PLA / RG,Excise Prod. Posting Group,Type,No.;
                                                   SumIndexFields=BED Amount,AED(GSI) Amount,SED Amount,SAED Amount,CESS Amount,NCCD Amount,eCess Amount,ADET Amount,AED(TTA) Amount,ADE Amount,ADC VAT Amount,SHE Cess Amount }
    {    ;Document Type,Document No.,Type,No.     ;SumIndexFields=Qty. to Invoice }
    {    ;Document Type,Document No.,Type,Price Inclusive of Tax;
                                                   SumIndexFields=Amount To Customer UPIT,Amount To Customer }
    {    ;Document Type,Document No.,Type,GST Group Code }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete the order line because it is associated with purchase order %1 line %2.;ENN=You cannot delete the order line because it is associated with purchase order %1 line %2.';
      Text001@1001 : TextConst 'ENU=You cannot rename a %1.;ENN=You cannot rename a %1.';
      Text002@1002 : TextConst 'ENU=You cannot change %1 because the order line is associated with purchase order %2 line %3.;ENN=You cannot change %1 because the order line is associated with purchase order %2 line %3.';
      Text003@1003 : TextConst 'ENU=must not be less than %1;ENN=must not be less than %1';
      Text005@1004 : TextConst 'ENU=You cannot invoice more than %1 units.;ENN=You cannot invoice more than %1 units.';
      Text006@1005 : TextConst 'ENU=You cannot invoice more than %1 base units.;ENN=You cannot invoice more than %1 base units.';
      Text007@1006 : TextConst 'ENU=You cannot ship more than %1 units.;ENN=You cannot ship more than %1 units.';
      Text008@1007 : TextConst 'ENU=You cannot ship more than %1 base units.;ENN=You cannot ship more than %1 base units.';
      Text009@1008 : TextConst 'ENU=" must be 0 when %1 is %2";ENN=" must be 0 when %1 is %2"';
      Text011@1010 : TextConst 'ENU=Automatic reservation is not possible.\Do you want to reserve items manually?;ENN=Automatic reservation is not possible.\Do you want to reserve items manually?';
      Text014@1013 : TextConst 'ENU=%1 %2 is before work date %3;ENN=%1 %2 is before work date %3';
      Text016@1040 : TextConst 'ENU="%1 is required for %2 = %3.";ENN="%1 is required for %2 = %3."';
      Text017@1044 : TextConst 'ENU=\The entered information may be disregarded by warehouse operations.;ENN=\The entered information may be disregarded by warehouse operations.';
      Text020@1019 : TextConst 'ENU=You cannot return more than %1 units.;ENN=You cannot return more than %1 units.';
      Text021@1020 : TextConst 'ENU=You cannot return more than %1 base units.;ENN=You cannot return more than %1 base units.';
      Text026@1025 : TextConst 'ENU=You cannot change %1 if the item charge has already been posted.;ENN=You cannot change %1 if the item charge has already been posted.';
      CurrExchRate@1030 : Record 330;
      SalesHeader@1031 : Record 36;
      SalesLine2@1032 : Record 37;
      TempSalesLine@1033 : Record 37;
      GLAcc@1035 : Record 15;
      Item@1036 : Record 27;
      Resource@1400 : Record 156;
      Currency@1037 : Record 4;
      ItemTranslation@1038 : Record 30;
      Res@1043 : Record 156;
      ResCost@1045 : Record 202;
      WorkType@1046 : Record 200;
      VATPostingSetup@1048 : Record 325;
      StdTxt@1049 : Record 7;
      GenBusPostingGrp@1050 : Record 250;
      GenProdPostingGrp@1051 : Record 251;
      ReservEntry@1052 : Record 337;
      UnitOfMeasure@1054 : Record 204;
      FA@1056 : Record 5600;
      ShippingAgentServices@1057 : Record 5790;
      NonstockItem@1058 : Record 5718;
      PurchasingCode@1059 : Record 5721;
      SKU@1060 : Record 5700;
      ItemCharge@1061 : Record 5800;
      ItemChargeAssgntSales@1062 : Record 5809;
      InvtSetup@1063 : Record 313;
      Location@1064 : Record 14;
      ReturnReason@1089 : Record 6635;
      ATOLink@1016 : Record 904;
      SalesSetup@1065 : Record 311;
      GLSetup@1500343 : Record 98;
      GSTGroup@1500047 : Record 16404;
      SalesHeader1@1500011 : Record 36;
      TempRG23DRemainder@1500053 : TEMPORARY Record 16537;
      TempRG23DConsumedInCurrDoc@1500052 : TEMPORARY Record 16537;
      InvtBuffer@1500050 : ARRAY [2] OF TEMPORARY Record 307;
      Reservation@1066 : Page 498;
      PriceCalcMgt@1071 : Codeunit 7000;
      ResFindUnitCost@1073 : Codeunit 220;
      CustCheckCreditLimit@1074 : Codeunit 312;
      ItemCheckAvail@1075 : Codeunit 311;
      SalesTaxCalculate@1076 : Codeunit 398;
      ReservMgt@1077 : Codeunit 99000845;
      ReservEngineMgt@1078 : Codeunit 99000831;
      ReserveSalesLine@1079 : Codeunit 99000832;
      UOMMgt@1080 : Codeunit 5402;
      AddOnIntegrMgt@1081 : Codeunit 5403;
      DimMgt@1082 : Codeunit 408;
      ItemSubstitutionMgt@1085 : Codeunit 5701;
      DistIntegration@1086 : Codeunit 5702;
      NonstockItemMgt@1087 : Codeunit 5703;
      WhseValidateSourceLine@1088 : Codeunit 5777;
      TransferExtendedText@1100 : Codeunit 378;
      JobPostLine@1097 : Codeunit 1001;
      DeferralUtilities@1026 : Codeunit 1720;
      ServiceTaxMgt@1500010 : Codeunit 16471;
      GSTManagement@1500045 : Codeunit 16401;
      GSTApplicationManagement@1500042 : Codeunit 16403;
      FullAutoReservation@1092 : Boolean;
      StatusCheckSuspended@1094 : Boolean;
      HasBeenShown@1018 : Boolean;
      PlannedShipmentDateCalculated@1012 : Boolean;
      PlannedDeliveryDateCalculated@1070 : Boolean;
      Text028@1098 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;ENN=You cannot change the %1 when the %2 has been filled in.';
      ItemCategory@1099 : Record 5722;
      Text029@1021 : TextConst 'ENU=must be positive;ENN=must be positive';
      Text030@1042 : TextConst 'ENU=must be negative;ENN=must be negative';
      Text031@1093 : TextConst 'ENU=You must either specify %1 or %2.;ENN=You must either specify %1 or %2.';
      CalendarMgmt@1101 : Codeunit 7600;
      CalChange@1102 : Record 7602;
      Text034@1084 : TextConst 'ENU=The value of %1 field must be a whole number for the item included in the service item group if the %2 field in the Service Item Groups window contains a check mark.;ENN=The value of %1 field must be a whole number for the item included in the service item group if the %2 field in the Service Item Groups window contains a check mark.';
      Text035@1083 : TextConst 'ENU="Warehouse ";ENN="Warehouse "';
      Text036@1090 : TextConst 'ENU="Inventory ";ENN="Inventory "';
      HideValidationDialog@1109 : Boolean;
      Text037@1009 : TextConst 'ENU=You cannot change %1 when %2 is %3 and %4 is positive.;ENN=You cannot change %1 when %2 is %3 and %4 is positive.';
      Text038@1014 : TextConst 'ENU=You cannot change %1 when %2 is %3 and %4 is negative.;ENN=You cannot change %1 when %2 is %3 and %4 is negative.';
      Text039@1034 : TextConst 'ENU=%1 units for %2 %3 have already been returned. Therefore, only %4 units can be returned.;ENN=%1 units for %2 %3 have already been returned. Therefore, only %4 units can be returned.';
      Text040@1039 : TextConst 'ENU=You must use form %1 to enter %2, if item tracking is used.;ENN=You must use form %1 to enter %2, if item tracking is used.';
      Text042@1055 : TextConst 'ENU=When posting the Applied to Ledger Entry %1 will be opened first;ENN=When posting the Applied to Ledger Entry %1 will be opened first';
      ShippingMoreUnitsThanReceivedErr@1047 : TextConst 'ENU=You cannot ship more than the %1 units that you have received for document no. %2.;ENN=You cannot ship more than the %1 units that you have received for document no. %2.';
      Text044@1103 : TextConst 'ENU=cannot be less than %1;ENN=cannot be less than %1';
      Text045@1104 : TextConst 'ENU=cannot be more than %1;ENN=cannot be more than %1';
      Text046@1105 : TextConst 'ENU=You cannot return more than the %1 units that you have shipped for %2 %3.;ENN=You cannot return more than the %1 units that you have shipped for %2 %3.';
      Text047@1106 : TextConst 'ENU=must be positive when %1 is not 0.;ENN=must be positive when %1 is not 0.';
      TrackingBlocked@1107 : Boolean;
      Text048@1108 : TextConst 'ENU=You cannot use item tracking on a %1 created from a %2.;ENN=You cannot use item tracking on a %1 created from a %2.';
      Text049@1139 : TextConst 'ENU=cannot be %1.;ENN=cannot be %1.';
      Text051@1141 : TextConst 'ENU=You cannot use %1 in a %2.;ENN=You cannot use %1 in a %2.';
      PrePaymentLineAmountEntered@1015 : Boolean;
      Text052@1022 : TextConst 'ENU=You cannot add an item line because an open warehouse shipment exists for the sales header and Shipping Advice is %1.\\You must add items as new lines to the existing warehouse shipment or change Shipping Advice to Partial.;ENN=You cannot add an item line because an open warehouse shipment exists for the sales header and Shipping Advice is %1.\\You must add items as new lines to the existing warehouse shipment or change Shipping Advice to Partial.';
      Text053@1017 : TextConst 'ENU=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?;ENN=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?';
      Text054@1023 : TextConst 'ENU=Cancelled.;ENN=Cancelled.';
      Text055@1024 : TextConst '@@@=Quantity Invoiced must not be greater than the sum of Qty. Assigned and Qty. to Assign.;ENU=%1 must not be greater than the sum of %2 and %3.;ENN=%1 must not be greater than the sum of %2 and %3.';
      Text056@1011 : TextConst 'ENU=You cannot add an item line because an open inventory pick exists for the Sales Header and because Shipping Advice is %1.\\You must first post or delete the inventory pick or change Shipping Advice to Partial.;ENN=You cannot add an item line because an open inventory pick exists for the Sales Header and because Shipping Advice is %1.\\You must first post or delete the inventory pick or change Shipping Advice to Partial.';
      Text057@1027 : TextConst 'ENU=must have the same sign as the shipment;ENN=must have the same sign as the shipment';
      Text058@1028 : TextConst 'ENU=The quantity that you are trying to invoice is greater than the quantity in shipment %1.;ENN=The quantity that you are trying to invoice is greater than the quantity in shipment %1.';
      Text059@1029 : TextConst 'ENU=must have the same sign as the return receipt;ENN=must have the same sign as the return receipt';
      Text060@1041 : TextConst 'ENU=The quantity that you are trying to invoice is greater than the quantity in return receipt %1.;ENN=The quantity that you are trying to invoice is greater than the quantity in return receipt %1.';
      NODLines@1280000 : Record 13785;
      StrOrderLine@1280006 : Record 13795;
      Text13700@1500000 : TextConst 'ENU=BED AMOUNT;ENN=BED AMOUNT';
      Text13701@1500001 : TextConst 'ENU=AED AMOUNT;ENN=AED AMOUNT';
      Text13702@1500002 : TextConst 'ENU=SED AMOUNT;ENN=SED AMOUNT';
      Text13703@1500003 : TextConst 'ENU=SAED AMOUNT;ENN=SAED AMOUNT';
      Text13704@1500004 : TextConst 'ENU=CESS AMOUNT;ENN=CESS AMOUNT';
      Text13705@1500005 : TextConst 'ENU=NCCD AMOUNT;ENN=NCCD AMOUNT';
      Text13706@1500006 : TextConst 'ENU=ECESS AMOUNT;ENN=ECESS AMOUNT';
      Text13707@1500007 : TextConst 'ENU=ADET AMOUNT;ENN=ADET AMOUNT';
      Text13708@1500008 : TextConst 'ENU=LINE AMOUNT;ENN=LINE AMOUNT';
      Text13709@1500009 : TextConst 'ENU=ADE AMOUNT;ENN=ADE AMOUNT';
      GenJnlLine@1500014 : Record 81;
      CFactor@1500013 : Decimal;
      Text16351@1500015 : TextConst 'ENU=To change the Quantity remove the check mark from Direct Debit To PLA.;ENN=To change the Quantity remove the check mark from Direct Debit To PLA.';
      TCSBaseLCY@1500020 : Decimal;
      NOCLine@1500019 : Record 13785;
      TCSNOC@1500018 : Record 16507;
      TCSBuffer@1500017 : ARRAY [2] OF TEMPORARY Record 16509;
      TCSSetup@1500016 : Record 16508;
      BEDAmt@1500030 : Decimal;
      "AED(GSI)Amt"@1500029 : Decimal;
      "AED(TTA)Amt"@1500028 : Decimal;
      SEDAmt@1500027 : Decimal;
      SAEDAmt@1500026 : Decimal;
      CESSAmt@1500025 : Decimal;
      NCCDAmt@1500024 : Decimal;
      eCessAmt@1500023 : Decimal;
      ADETAmt@1500022 : Decimal;
      ADEAmt@1500021 : Decimal;
      Text16500@1500031 : TextConst 'ENU=Item %1 is short by %2 quantity in RG 23 D. Please adjust the quantity to proceed.;ENN=Item %1 is short by %2 quantity in RG 23 D. Please adjust the quantity to proceed.';
      SHECessAmt@1500038 : Decimal;
      Text13710@1500039 : TextConst 'ENU=SHE CESS AMOUNT;ENN=SHE CESS AMOUNT';
      CompanyInfo@1500032 : Record 79;
      CompanyInfoRead@1500033 : Boolean;
      Text13711@1500051 : TextConst 'ENU=ASSESSABLE VALUE;ENN=ASSESSABLE VALUE';
      Text16501@1500036 : TextConst 'ENU=ADC VAT AMOUNT;ENN=ADC VAT AMOUNT';
      Text16502@1500035 : TextConst 'ENU=BCD AMOUNT;ENN=BCD AMOUNT';
      Text16503@1500034 : TextConst 'ENU=CIF AMOUNT;ENN=CIF AMOUNT';
      ADCVATAmt@1500037 : Decimal;
      Text16504@1500040 : TextConst 'ENU="One of the Structure detail should have Include PIT Calculation = Yes for Document Type = %1,  Document No. = %2,  Line No. = %3 for Price Inclusive of Tax = Yes.";ENN="One of the Structure detail should have Include PIT Calculation = Yes for Document Type = %1,  Document No. = %2,  Line No. = %3 for Price Inclusive of Tax = Yes."';
      StrOrderDetails@1500041 : Record 13794;
      Text16507@1500043 : TextConst 'ENU=CUST. ECESS AMOUNT;ENN=CUST. ECESS AMOUNT';
      Text16506@1500044 : TextConst 'ENU=CUST. SHECESS AMOUNT;ENN=CUST. SHECESS AMOUNT';
      Text16508@1500086 : TextConst 'ENU=To view Excise Detail the Structure should include Excise.;ENN=To view Excise Detail the Structure should include Excise.';
      AssessableValueCalc@1500046 : Boolean;
      ExecuteDetailRg23D@1500065 : Boolean;
      SalesLineCompletelyShippedErr@1053 : TextConst 'ENU=You cannot change the purchasing code for a sales line that has been completely shipped.;ENN=You cannot change the purchasing code for a sales line that has been completely shipped.';
      SalesSetupRead@1067 : Boolean;
      DeferralPostDate@1069 : Date;
      GSTDependencyTypeErr@1500012 : TextConst 'ENU=You must enter "Bill-to Address" or "Ship-to Address" as GST Dependency Type value in Sales & Receivables Setup;ENN=You must enter "Bill-to Address" or "Ship-to Address" as GST Dependency Type value in Sales & Receivables Setup';
      HSNErr@1500048 : TextConst 'ENU=You must select the same HSN as it is there in the Applies-to Doc. No.;ENN=You must select the same HSN as it is there in the Applies-to Doc. No.';
      DiffStructureErr@1500049 : TextConst 'ENU=Structure on header and Line should be same.;ENN=Structure on header and Line should be same.';
      GSTGroupEqualErr@1500077 : TextConst '@@@="%1 = Payment Entry No,%2 = Document Type , %3 = Document No";ENU=GST Group Code and TCS must be same in Advance Payment Entry No. %1 and Document Type %2, Document No %3.;ENN=GST Group Code and TCS must be same in Advance Payment Entry No. %1 and Document Type %2, Document No %3.';
      FreightLineDescriptionTxt@1068 : TextConst 'ENU=Freight Amount;ENN=Freight Amount';
      AppliesToDocErr@1500054 : TextConst 'ENU=You must remove Applies-to Doc No. before modifying Exempted value;ENN=You must remove Applies-to Doc No. before modifying Exempted value';
      GSTGroupReverseChargeErr@1500055 : TextConst '@@@="%1 = GST Group Code";ENU=GST Group Code %1 with Reverse Charge cannot be selected for Sales transactions.;ENN=GST Group Code %1 with Reverse Charge cannot be selected for Sales transactions.';

    PROCEDURE InitOutstanding@16();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        "Outstanding Quantity" := Quantity - "Return Qty. Received";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Return Qty. Received (Base)";
        "Return Qty. Rcd. Not Invd." := "Return Qty. Received" - "Quantity Invoiced";
        "Ret. Qty. Rcd. Not Invd.(Base)" := "Return Qty. Received (Base)" - "Qty. Invoiced (Base)";
      END ELSE BEGIN
        "Outstanding Quantity" := Quantity - "Quantity Shipped";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Shipped (Base)";
        "Qty. Shipped Not Invoiced" := "Quantity Shipped" - "Quantity Invoiced";
        "Qty. Shipped Not Invd. (Base)" := "Qty. Shipped (Base)" - "Qty. Invoiced (Base)";
      END;
      CALCFIELDS("Reserved Quantity");
      Planned := "Reserved Quantity" = "Outstanding Quantity";
      "Completely Shipped" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
      InitOutstandingAmount;
    END;

    PROCEDURE InitOutstandingAmount@17();
    VAR
      AmountInclVAT@1000 : Decimal;
    BEGIN
      IF Quantity = 0 THEN BEGIN
        "Outstanding Amount" := 0;
        "Outstanding Amount (LCY)" := 0;
        "Shipped Not Invoiced" := 0;
        "Shipped Not Invoiced (LCY)" := 0;
        "Return Rcd. Not Invd." := 0;
        "Return Rcd. Not Invd. (LCY)" := 0;
      END ELSE BEGIN
        GetSalesHeader;
        AmountInclVAT := "Amount Including VAT";
        VALIDATE(
          "Outstanding Amount",
          ROUND(
            AmountInclVAT * "Outstanding Quantity" / Quantity,
            Currency."Amount Rounding Precision"));
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          VALIDATE(
            "Return Rcd. Not Invd.",
            ROUND(
              AmountInclVAT * "Return Qty. Rcd. Not Invd." / Quantity,
              Currency."Amount Rounding Precision"))
        ELSE
          VALIDATE(
            "Shipped Not Invoiced",
            ROUND(
              AmountInclVAT * "Qty. Shipped Not Invoiced" / Quantity,
              Currency."Amount Rounding Precision"));
      END;
    END;

    PROCEDURE InitQtyToShip@15();
    BEGIN
      GetSalesSetup;
      IF (SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Remainder) OR
         ("Document Type" = "Document Type"::Invoice)
      THEN BEGIN
        "Qty. to Ship" := "Outstanding Quantity";
        "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
      END ELSE
        IF "Qty. to Ship" <> 0 THEN
          "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");

      CheckServItemCreation;

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToReceive@5803();
    BEGIN
      GetSalesSetup;
      IF (SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Remainder) OR
         ("Document Type" = "Document Type"::"Credit Memo")
      THEN BEGIN
        "Return Qty. to Receive" := "Outstanding Quantity";
        "Return Qty. to Receive (Base)" := "Outstanding Qty. (Base)";
      END ELSE
        IF "Return Qty. to Receive" <> 0 THEN
          "Return Qty. to Receive (Base)" := CalcBaseQty("Return Qty. to Receive");

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToInvoice@13();
    BEGIN
      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;
      CalcInvDiscToInvoice;
      IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN
        CalcPrepaymentToDeduct;
    END;

    LOCAL PROCEDURE InitItemAppl@40(OnlyApplTo@1000 : Boolean);
    BEGIN
      "Appl.-to Item Entry" := 0;
      IF NOT OnlyApplTo THEN
        "Appl.-from Item Entry" := 0;
    END;

    PROCEDURE MaxQtyToInvoice@18() : Decimal;
    BEGIN
      IF "Prepayment Line" THEN
        EXIT(1);
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT("Return Qty. Received" + "Return Qty. to Receive" - "Quantity Invoiced");

      EXIT("Quantity Shipped" + "Qty. to Ship" - "Quantity Invoiced");
    END;

    PROCEDURE MaxQtyToInvoiceBase@19() : Decimal;
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT("Return Qty. Received (Base)" + "Return Qty. to Receive (Base)" - "Qty. Invoiced (Base)");

      EXIT("Qty. Shipped (Base)" + "Qty. to Ship (Base)" - "Qty. Invoiced (Base)");
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE SelectItemEntry@8(CurrentFieldNo@1000 : Integer);
    VAR
      ItemLedgEntry@1001 : Record 32;
      SalesLine3@1002 : Record 37;
    BEGIN
      ItemLedgEntry.SETRANGE("Item No.","No.");
      IF "Location Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code","Location Code");
      ItemLedgEntry.SETRANGE("Variant Code","Variant Code");

      IF CurrentFieldNo = FIELDNO("Appl.-to Item Entry") THEN BEGIN
        ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
        ItemLedgEntry.SETRANGE(Positive,TRUE);
        ItemLedgEntry.SETRANGE(Open,TRUE);
      END ELSE BEGIN
        ItemLedgEntry.SETCURRENTKEY("Item No.",Positive);
        ItemLedgEntry.SETRANGE(Positive,FALSE);
        ItemLedgEntry.SETFILTER("Shipped Qty. Not Returned",'<0');
      END;
      IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN BEGIN
        SalesLine3 := Rec;
        IF CurrentFieldNo = FIELDNO("Appl.-to Item Entry") THEN
          SalesLine3.VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.")
        ELSE
          SalesLine3.VALIDATE("Appl.-from Item Entry",ItemLedgEntry."Entry No.");
        CheckItemAvailable(CurrentFieldNo);
        Rec := SalesLine3;
      END;
    END;

    PROCEDURE SetSalesHeader@24(NewSalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader := NewSalesHeader;

      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        SalesHeader.TESTFIELD("Currency Factor");
        Currency.GET(SalesHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE GetSalesHeader@1();
    BEGIN
      TESTFIELD("Document No.");
      IF ("Document Type" <> SalesHeader."Document Type") OR ("Document No." <> SalesHeader."No.") THEN BEGIN
        SalesHeader.GET("Document Type","Document No.");
        IF SalesHeader."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          SalesHeader.TESTFIELD("Currency Factor");
          Currency.GET(SalesHeader."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
      END;
    END;

    LOCAL PROCEDURE GetItem@9();
    BEGIN
      TESTFIELD("No.");
      IF "No." <> Item."No." THEN
        Item.GET("No.");
    END;

    LOCAL PROCEDURE GetResource@49();
    BEGIN
      TESTFIELD("No.");
      IF "No." <> Resource."No." THEN
        Resource.GET("No.");
    END;

    LOCAL PROCEDURE UpdateUnitPrice@2(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF (CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0) THEN
        EXIT;

      GetSalesHeader;
      TESTFIELD("Qty. per Unit of Measure");

      CASE Type OF
        Type::Item,Type::Resource:
          BEGIN
            PriceCalcMgt.FindSalesLineLineDisc(SalesHeader,Rec);
            PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,CalledByFieldNo);
          END;
      END;
      VALIDATE("Unit Price");
    END;

    LOCAL PROCEDURE FindResUnitCost@5();
    BEGIN
      ResCost.INIT;
      ResCost.Code := "No.";
      ResCost."Work Type Code" := "Work Type Code";
      ResFindUnitCost.RUN(ResCost);
      VALIDATE("Unit Cost (LCY)",ResCost."Unit Cost" * "Qty. per Unit of Measure");
    END;

    PROCEDURE UpdatePrepmtSetupFields@102();
    VAR
      GenPostingSetup@1001 : Record 252;
      GLAcc@1000 : Record 15;
    BEGIN
      IF ("Prepayment %" <> 0) AND (Type <> Type::" ") THEN BEGIN
        TESTFIELD("Document Type","Document Type"::Order);
        TESTFIELD("No.");
        IF CurrFieldNo = FIELDNO("Prepayment %") THEN
          IF "System-Created Entry" THEN
            FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,0));
        IF "System-Created Entry" THEN
          "Prepayment %" := 0;
        GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
        IF GenPostingSetup."Sales Prepayments Account" <> '' THEN BEGIN
          GLAcc.GET(GenPostingSetup."Sales Prepayments Account");
          VATPostingSetup.GET("VAT Bus. Posting Group",GLAcc."VAT Prod. Posting Group");
          VATPostingSetup.TESTFIELD("VAT Calculation Type","VAT Calculation Type");
        END ELSE
          CLEAR(VATPostingSetup);
        "Prepayment VAT %" := VATPostingSetup."VAT %";
        "Prepmt. VAT Calc. Type" := VATPostingSetup."VAT Calculation Type";
        "Prepayment VAT Identifier" := VATPostingSetup."VAT Identifier";
        IF "Prepmt. VAT Calc. Type" IN
           ["Prepmt. VAT Calc. Type"::"Reverse Charge VAT","Prepmt. VAT Calc. Type"::"Sales Tax"]
        THEN
          "Prepayment VAT %" := 0;
        "Prepayment Tax Group Code" := GLAcc."Tax Group Code";
      END;
    END;

    PROCEDURE UpdateAmounts@3();
    VAR
      RemLineAmountToInvoice@1000 : Decimal;
      VATBaseAmount@1003 : Decimal;
      LineAmountChanged@1002 : Boolean;
      GSTPer@1500000 : Decimal;
    BEGIN
      IF Type = Type::" " THEN
        EXIT;
      GetSalesHeader;
      VATBaseAmount := "VAT Base Amount";
      "Recalculate Invoice Disc." := TRUE;

      IF "Line Amount" <> xRec."Line Amount" THEN BEGIN
        "VAT Difference" := 0;
        LineAmountChanged := TRUE;
      END;
      IF "Line Amount" <> ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Discount Amount" THEN BEGIN
        "Line Amount" := ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Discount Amount";
        "VAT Difference" := 0;
        LineAmountChanged := TRUE;
      END;

      GSTPer := 0;
      IF "Price Inclusive of Tax" AND ("Line Discount %" <> 0) AND (GSTManagement.IsGSTApplicable(SalesHeader.Structure)) THEN BEGIN
        GetGSTPercentage("Document Type","Document No.","Line No.",GSTPer);
        "Line Amount" := ROUND((Quantity * "Unit Price Incl. of Tax") - "Line Discount Amount")/
          (GSTPer + 100) * 100;
      END;


      UpdateTaxAmounts;
      UpdateVATAmounts;
      UpdateGSTAmounts("GST Base Amount");
      IF NOT "Prepayment Line" THEN BEGIN
        IF "Prepayment %" <> 0 THEN BEGIN
          IF Quantity < 0 THEN
            FIELDERROR(Quantity,STRSUBSTNO(Text047,FIELDCAPTION("Prepayment %")));
          IF "Unit Price" < 0 THEN
            FIELDERROR("Unit Price",STRSUBSTNO(Text047,FIELDCAPTION("Prepayment %")));
        END;
        IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN BEGIN
          "Prepayment VAT Difference" := 0;
          IF NOT PrePaymentLineAmountEntered THEN
            "Prepmt. Line Amount" := ROUND("Line Amount" * "Prepayment %" / 100,Currency."Amount Rounding Precision");
          IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
            FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text049,"Prepmt. Amt. Inv."));
          PrePaymentLineAmountEntered := FALSE;
          IF "Prepmt. Line Amount" <> 0 THEN BEGIN
            RemLineAmountToInvoice :=
              ROUND("Line Amount" * (Quantity - "Quantity Invoiced") / Quantity,Currency."Amount Rounding Precision");
            IF RemLineAmountToInvoice < ("Prepmt. Line Amount" - "Prepmt Amt Deducted") THEN
              FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,RemLineAmountToInvoice + "Prepmt Amt Deducted"));
          END;
        END ELSE
          IF (CurrFieldNo <> 0) AND ("Line Amount" <> xRec."Line Amount") AND
             ("Prepmt. Amt. Inv." <> 0) AND ("Prepayment %" = 100)
          THEN BEGIN
            IF "Line Amount" < xRec."Line Amount" THEN
              FIELDERROR("Line Amount",STRSUBSTNO(Text044,xRec."Line Amount"));
            FIELDERROR("Line Amount",STRSUBSTNO(Text045,xRec."Line Amount"));
          END;
      END;
      InitOutstandingAmount;
      IF (CurrFieldNo <> 0) AND
         NOT ((Type = Type::Item) AND (CurrFieldNo = FIELDNO("No.")) AND (Quantity <> 0) AND
              // a write transaction may have been started
              ("Qty. per Unit of Measure" <> xRec."Qty. per Unit of Measure")) AND // ...continued condition
         ("Document Type" <= "Document Type"::Invoice) AND
         (("Outstanding Amount" + "Shipped Not Invoiced") > 0) AND
         (CurrFieldNo <> FIELDNO("Blanket Order No.")) AND
         (CurrFieldNo <> FIELDNO("Blanket Order Line No."))
      THEN
        CustCheckCreditLimit.SalesLineCheck(Rec);

      IF Type = Type::"Charge (Item)" THEN
        UpdateItemChargeAssgnt;

      CalcPrepaymentToDeduct;
      IF VATBaseAmount <> "VAT Base Amount" THEN
        LineAmountChanged := TRUE;

      IF LineAmountChanged THEN BEGIN
        UpdateDeferralAmounts;
        LineAmountChanged := FALSE;
      END;
    END;

    LOCAL PROCEDURE UpdateVATAmounts@38();
    VAR
      SalesLine2@1000 : Record 37;
      TotalLineAmount@1005 : Decimal;
      TotalInvDiscAmount@1004 : Decimal;
      TotalAmount@1001 : Decimal;
      TotalAmountInclVAT@1002 : Decimal;
      TotalQuantityBase@1003 : Decimal;
    BEGIN
      GetSalesHeader;
      SalesLine2.SETRANGE("Document Type","Document Type");
      SalesLine2.SETRANGE("Document No.","Document No.");
      SalesLine2.SETFILTER("Line No.",'<>%1',"Line No.");
      IF "Line Amount" = 0 THEN
        IF xRec."Line Amount" >= 0 THEN
          SalesLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          SalesLine2.SETFILTER(Amount,'<%1',0)
      ELSE
        IF "Line Amount" > 0 THEN
          SalesLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          SalesLine2.SETFILTER(Amount,'<%1',0);
      SalesLine2.SETRANGE("VAT Identifier","VAT Identifier");
      SalesLine2.SETRANGE("Tax Group Code","Tax Group Code");

      IF "Line Amount" = "Inv. Discount Amount" THEN BEGIN
        Amount := 0;
        "VAT Base Amount" := 0;
        "Amount Including VAT" := 0;
      END ELSE BEGIN
        TotalLineAmount := 0;
        TotalInvDiscAmount := 0;
        TotalAmount := 0;
        TotalAmountInclVAT := 0;
        TotalQuantityBase := 0;
        IF ("VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax") OR
           (("VAT Calculation Type" IN
             ["VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT"]) AND ("VAT %" <> 0))
        THEN
          IF NOT SalesLine2.ISEMPTY THEN BEGIN
            SalesLine2.CALCSUMS("Line Amount","Inv. Discount Amount",Amount,"Amount Including VAT","Quantity (Base)");
            TotalLineAmount := SalesLine2."Line Amount";
            TotalInvDiscAmount := SalesLine2."Inv. Discount Amount";
            TotalAmount := SalesLine2.Amount;
            TotalAmountInclVAT := SalesLine2."Amount Including VAT";
            TotalQuantityBase := SalesLine2."Quantity (Base)";
          END;

        IF SalesHeader."Prices Including VAT" THEN
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount :=
                  ROUND(
                    (TotalLineAmount - TotalInvDiscAmount + "Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
                    Currency."Amount Rounding Precision") -
                  TotalAmount;
                "VAT Base Amount" :=
                  ROUND(
                    Amount * (1 - SalesHeader."VAT Base Discount %" / 100),
                    Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalLineAmount + "Line Amount" -
                  ROUND(
                    (TotalAmount + Amount) * (SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT - TotalInvDiscAmount - "Inv. Discount Amount";
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                SalesHeader.TESTFIELD("VAT Base Discount %",0);
                Amount :=
                  SalesTaxCalculate.ReverseCalculateTax(
                    "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                    TotalAmountInclVAT + "Amount Including VAT",TotalQuantityBase + "Quantity (Base)",
                    SalesHeader."Currency Factor") -
                  TotalAmount;
                IF Amount <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - Amount) / Amount,0.00001)
                ELSE
                  "VAT %" := 0;
                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
              END;
          END
        ELSE
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" :=
                  ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    (TotalAmount + Amount) * (1 - SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT;
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
                "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount";
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    SalesTaxCalculate.CalculateTax(
                      "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                      TotalAmount + Amount,TotalQuantityBase + "Quantity (Base)",
                      SalesHeader."Currency Factor"),Currency."Amount Rounding Precision") -
                  TotalAmountInclVAT;
                IF "VAT Base Amount" <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                ELSE
                  "VAT %" := 0;
              END;
          END;
      END;
    END;

    LOCAL PROCEDURE CheckItemAvailable@4(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF Reserve = Reserve::Always THEN
        EXIT;

      IF "Shipment Date" = 0D THEN BEGIN
        GetSalesHeader;
        IF SalesHeader."Shipment Date" <> 0D THEN
          VALIDATE("Shipment Date",SalesHeader."Shipment Date")
        ELSE
          VALIDATE("Shipment Date",WORKDATE);
      END;

      IF ((CalledByFieldNo = CurrFieldNo) OR (CalledByFieldNo = FIELDNO("Shipment Date"))) AND GUIALLOWED AND
         ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
         (Type = Type::Item) AND ("No." <> '') AND
         ("Outstanding Quantity" > 0) AND
         ("Job Contract Entry No." = 0) AND
         NOT (Nonstock OR "Special Order")
      THEN BEGIN
        IF ItemCheckAvail.SalesLineCheck(Rec) THEN
          ItemCheckAvail.RaiseUpdateInterruptedError;
      END;
    END;

    PROCEDURE ShowReservation@10();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD(Reserve);
      CLEAR(Reservation);
      Reservation.SetSalesLine(Rec);
      Reservation.RUNMODAL;
    END;

    PROCEDURE ShowReservationEntries@21(Modal@1000 : Boolean);
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,TRUE);
      ReserveSalesLine.FilterReservFor(ReservEntry,Rec);
      IF Modal THEN
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      ELSE
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    PROCEDURE AutoReserve@11();
    VAR
      QtyToReserve@1000 : Decimal;
      QtyToReserveBase@1001 : Decimal;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");

      ReserveSalesLine.ReservQuantity(Rec,QtyToReserve,QtyToReserveBase);
      IF QtyToReserveBase <> 0 THEN BEGIN
        ReservMgt.SetSalesLine(Rec);
        TESTFIELD("Shipment Date");
        ReservMgt.AutoReserve(FullAutoReservation,'',"Shipment Date",QtyToReserve,QtyToReserveBase);
        FIND;
        IF NOT FullAutoReservation THEN BEGIN
          COMMIT;
          IF CONFIRM(Text011,TRUE) THEN BEGIN
            ShowReservation;
            FIND;
          END;
        END;
      END;
    END;

    PROCEDURE AutoAsmToOrder@82();
    BEGIN
      ATOLink.UpdateAsmFromSalesLine(Rec);
    END;

    LOCAL PROCEDURE GetDate@22() : Date;
    BEGIN
      IF SalesHeader."Posting Date" <> 0D THEN
        EXIT(SalesHeader."Posting Date");
      EXIT(WORKDATE);
    END;

    PROCEDURE CalcPlannedDeliveryDate@92(CurrFieldNo@1000 : Integer) : Date;
    BEGIN
      IF "Shipment Date" = 0D THEN
        EXIT("Planned Delivery Date");

      CASE CurrFieldNo OF
        FIELDNO("Shipment Date"):
          EXIT(CalendarMgmt.CalcDateBOC(
              FORMAT("Shipping Time"),
              "Planned Shipment Date",
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              CalChange."Source Type"::Customer,
              "Sell-to Customer No.",
              '',
              TRUE));
        FIELDNO("Planned Delivery Date"):
          EXIT(CalendarMgmt.CalcDateBOC2(
              FORMAT("Shipping Time"),
              "Planned Delivery Date",
              CalChange."Source Type"::Customer,
              "Sell-to Customer No.",
              '',
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              TRUE))
      END;
    END;

    PROCEDURE CalcPlannedShptDate@93(CurrFieldNo@1000 : Integer) : Date;
    BEGIN
      IF "Shipment Date" = 0D THEN
        EXIT("Planned Shipment Date");

      CASE CurrFieldNo OF
        FIELDNO("Shipment Date"):
          EXIT(CalendarMgmt.CalcDateBOC(
              FORMAT("Outbound Whse. Handling Time"),
              "Shipment Date",
              CalChange."Source Type"::Location,
              "Location Code",
              '',
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              TRUE));
        FIELDNO("Planned Delivery Date"):
          EXIT(CalendarMgmt.CalcDateBOC(
              FORMAT(''),
              "Planned Delivery Date",
              CalChange."Source Type"::Customer,
              "Sell-to Customer No.",
              '',
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              TRUE));
      END;
    END;

    PROCEDURE CalcShipmentDate@111() : Date;
    BEGIN
      IF "Planned Shipment Date" = 0D THEN
        EXIT("Shipment Date");

      IF FORMAT("Outbound Whse. Handling Time") <> '' THEN
        EXIT(
          CalendarMgmt.CalcDateBOC2(
            FORMAT("Outbound Whse. Handling Time"),
            "Planned Shipment Date",
            CalChange."Source Type"::Location,
            "Location Code",
            '',
            CalChange."Source Type"::"Shipping Agent",
            "Shipping Agent Code",
            "Shipping Agent Service Code",
            FALSE));

      EXIT(
        CalendarMgmt.CalcDateBOC(
          FORMAT(FORMAT('')),
          "Planned Shipment Date",
          CalChange."Source Type"::"Shipping Agent",
          "Shipping Agent Code",
          "Shipping Agent Service Code",
          CalChange."Source Type"::Location,
          "Location Code",
          '',
          FALSE));
    END;

    PROCEDURE SignedXX@20(Value@1000 : Decimal) : Decimal;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote,
        "Document Type"::Order,
        "Document Type"::Invoice,
        "Document Type"::"Blanket Order":
          EXIT(-Value);
        "Document Type"::"Return Order",
        "Document Type"::"Credit Memo":
          EXIT(Value);
      END;
    END;

    LOCAL PROCEDURE BlanketOrderLookup@23();
    BEGIN
      SalesLine2.RESET;
      SalesLine2.SETCURRENTKEY("Document Type",Type,"No.");
      SalesLine2.SETRANGE("Document Type","Document Type"::"Blanket Order");
      SalesLine2.SETRANGE(Type,Type);
      SalesLine2.SETRANGE("No.","No.");
      SalesLine2.SETRANGE("Bill-to Customer No.","Bill-to Customer No.");
      SalesLine2.SETRANGE("Sell-to Customer No.","Sell-to Customer No.");
      IF PAGE.RUNMODAL(PAGE::"Sales Lines",SalesLine2) = ACTION::LookupOK THEN BEGIN
        SalesLine2.TESTFIELD("Document Type","Document Type"::"Blanket Order");
        "Blanket Order No." := SalesLine2."Document No.";
        VALIDATE("Blanket Order Line No.",SalesLine2."Line No.");
      END;
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."));
      VerifyItemLineDim;
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      ATOLink.UpdateAsmDimFromSalesLine(Rec);
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      Job@1000 : Record 167;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD("Quantity (Base)");
      IF "Job Contract Entry No." <> 0 THEN
        ERROR(Text048,TABLECAPTION,Job.TABLECAPTION);
      ReserveSalesLine.CallItemTracking(Rec);
    END;

    PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20]);
    VAR
      SourceCodeSetup@1006 : Record 242;
      TableID@1007 : ARRAY [10] OF Integer;
      No@1008 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      GetSalesHeader;
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup.Sales,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
          SalesHeader."Dimension Set ID",DATABASE::Customer);
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      ATOLink.UpdateAsmDimFromSalesLine(Rec);
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      VerifyItemLineDim;
    END;

    PROCEDURE LookupShortcutDimCode@28(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    PROCEDURE ShowItemSub@30();
    BEGIN
      CLEAR(SalesHeader);
      TestStatusOpen;
      ItemSubstitutionMgt.ItemSubstGet(Rec);
      IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,TRUE) THEN
        TransferExtendedText.InsertSalesExtText(Rec);
    END;

    PROCEDURE ShowNonstock@32();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.",'');
      IF PAGE.RUNMODAL(PAGE::"Nonstock Item List",NonstockItem) = ACTION::LookupOK THEN BEGIN
        NonstockItem.TESTFIELD("Item Category Code");
        ItemCategory.GET(NonstockItem."Item Category Code");
        ItemCategory.TESTFIELD("Def. Gen. Prod. Posting Group");
        ItemCategory.TESTFIELD("Def. Inventory Posting Group");

        "No." := NonstockItem."Entry No.";
        NonstockItemMgt.NonStockSales(Rec);
        VALIDATE("No.","No.");
        VALIDATE("Unit Price",NonstockItem."Unit Price");
      END;
    END;

    LOCAL PROCEDURE GetSalesSetup@100();
    BEGIN
      IF NOT SalesSetupRead THEN
        SalesSetup.GET;
      SalesSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetFAPostingGroup@6();
    VAR
      LocalGLAcc@1000 : Record 15;
      FASetup@1001 : Record 5603;
      FAPostingGr@1002 : Record 5606;
      FADeprBook@1003 : Record 5612;
    BEGIN
      IF (Type <> Type::"Fixed Asset") OR ("No." = '') THEN
        EXIT;
      IF "Depreciation Book Code" = '' THEN BEGIN
        FASetup.GET;
        "Depreciation Book Code" := FASetup."Default Depr. Book";
        IF NOT FADeprBook.GET("No.","Depreciation Book Code") THEN
          "Depreciation Book Code" := '';
        IF "Depreciation Book Code" = '' THEN
          EXIT;
      END;
      FADeprBook.GET("No.","Depreciation Book Code");
      FADeprBook.TESTFIELD("FA Posting Group");
      FAPostingGr.GET(FADeprBook."FA Posting Group");
      FAPostingGr.TESTFIELD("Acq. Cost Acc. on Disposal");
      LocalGLAcc.GET(FAPostingGr."Acq. Cost Acc. on Disposal");
      LocalGLAcc.CheckGLAcc;
      LocalGLAcc.TESTFIELD("Gen. Prod. Posting Group");
      "Posting Group" := FADeprBook."FA Posting Group";
      "Gen. Prod. Posting Group" := LocalGLAcc."Gen. Prod. Posting Group";
      "Tax Group Code" := LocalGLAcc."Tax Group Code";
      VALIDATE("VAT Prod. Posting Group",LocalGLAcc."VAT Prod. Posting Group");
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.GET(DATABASE::"Sales Line",FieldNumber);
      EXIT(Field."Field Caption");
    END;

    LOCAL PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    VAR
      SalesHeader2@1102601000 : Record 36;
    BEGIN
      IF SalesHeader2.GET("Document Type","Document No.") THEN;
      IF SalesHeader2."Prices Including VAT" THEN
        EXIT('2,1,' + GetFieldCaption(FieldNumber))
      ELSE
        EXIT('2,0,' + GetFieldCaption(FieldNumber));
    END;

    LOCAL PROCEDURE GetSKU@5806() : Boolean;
    BEGIN
      IF (SKU."Location Code" = "Location Code") AND
         (SKU."Item No." = "No.") AND
         (SKU."Variant Code" = "Variant Code")
      THEN
        EXIT(TRUE);
      IF SKU.GET("Location Code","No.","Variant Code") THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE GetUnitCost@5808();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      GetItem;
      "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
      IF GetSKU THEN
        VALIDATE("Unit Cost (LCY)",SKU."Unit Cost" * "Qty. per Unit of Measure")
      ELSE
        VALIDATE("Unit Cost (LCY)",Item."Unit Cost" * "Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE CalcUnitCost@5809(ItemLedgEntry@1000 : Record 32) : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
      UnitCost@1004 : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
        IF IsServiceItem THEN BEGIN
          CALCSUMS("Cost Amount (Non-Invtbl.)");
          UnitCost := "Cost Amount (Non-Invtbl.)" / ItemLedgEntry.Quantity;
        END ELSE BEGIN
          CALCSUMS("Cost Amount (Actual)","Cost Amount (Expected)");
          UnitCost :=
            ("Cost Amount (Expected)" + "Cost Amount (Actual)") / ItemLedgEntry.Quantity;
        END;
      END;

      EXIT(ABS(UnitCost * "Qty. per Unit of Measure"));
    END;

    PROCEDURE ShowItemChargeAssgnt@5801();
    VAR
      ItemChargeAssgnts@1000 : Page 5814;
      AssignItemChargeSales@1001 : Codeunit 5807;
      ItemChargeAssgntLineAmt@1002 : Decimal;
    BEGIN
      GET("Document Type","Document No.","Line No.");
      TESTFIELD(Type,Type::"Charge (Item)");
      TESTFIELD("No.");
      TESTFIELD(Quantity);

      GetSalesHeader;
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");
      IF ("Inv. Discount Amount" = 0) AND
         ("Line Discount Amount" = 0) AND
         (NOT SalesHeader."Prices Including VAT")
      THEN
        ItemChargeAssgntLineAmt := "Line Amount"
      ELSE
        IF SalesHeader."Prices Including VAT" THEN
          ItemChargeAssgntLineAmt :=
            ROUND(("Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
              Currency."Amount Rounding Precision")
        ELSE
          ItemChargeAssgntLineAmt := "Line Amount" - "Inv. Discount Amount";
      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntSales.SETRANGE("Item Charge No.","No.");
      IF NOT ItemChargeAssgntSales.FINDLAST THEN BEGIN
        ItemChargeAssgntSales."Document Type" := "Document Type";
        ItemChargeAssgntSales."Document No." := "Document No.";
        ItemChargeAssgntSales."Document Line No." := "Line No.";
        ItemChargeAssgntSales."Item Charge No." := "No.";
        ItemChargeAssgntSales."Unit Cost" :=
          ROUND(ItemChargeAssgntLineAmt / Quantity,
            Currency."Unit-Amount Rounding Precision");
      END;

      ItemChargeAssgntLineAmt :=
        ROUND(
          ItemChargeAssgntLineAmt * ("Qty. to Invoice" / Quantity),
          Currency."Amount Rounding Precision");

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        AssignItemChargeSales.CreateDocChargeAssgn(ItemChargeAssgntSales,"Return Receipt No.")
      ELSE
        AssignItemChargeSales.CreateDocChargeAssgn(ItemChargeAssgntSales,"Shipment No.");
      CLEAR(AssignItemChargeSales);
      COMMIT;

      ItemChargeAssgnts.Initialize(Rec,ItemChargeAssgntLineAmt);
      ItemChargeAssgnts.RUNMODAL;
      CALCFIELDS("Qty. to Assign");
    END;

    PROCEDURE UpdateItemChargeAssgnt@5807();
    VAR
      ShareOfVAT@1000 : Decimal;
      TotalQtyToAssign@1001 : Decimal;
      TotalAmtToAssign@1002 : Decimal;
    BEGIN
      IF "Document Type" = "Document Type"::"Blanket Order" THEN
        EXIT;

      CALCFIELDS("Qty. Assigned","Qty. to Assign");
      IF ABS("Quantity Invoiced") > ABS(("Qty. Assigned" + "Qty. to Assign")) THEN
        ERROR(Text055,FIELDCAPTION("Quantity Invoiced"),FIELDCAPTION("Qty. Assigned"),FIELDCAPTION("Qty. to Assign"));

      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntSales.CALCSUMS("Qty. to Assign");
      TotalQtyToAssign := ItemChargeAssgntSales."Qty. to Assign";
      IF (CurrFieldNo <> 0) AND (Amount <> xRec.Amount) AND
         NOT ((Quantity <> xRec.Quantity) AND (TotalQtyToAssign = 0))
      THEN BEGIN
        ItemChargeAssgntSales.SETFILTER("Qty. Assigned",'<>0');
        IF NOT ItemChargeAssgntSales.ISEMPTY THEN
          ERROR(Text026,
            FIELDCAPTION(Amount));
        ItemChargeAssgntSales.SETRANGE("Qty. Assigned");
      END;

      IF ItemChargeAssgntSales.FINDSET THEN BEGIN
        GetSalesHeader;
        TotalAmtToAssign := CalcTotalAmtToAssign(TotalQtyToAssign);
        REPEAT
          ShareOfVAT := 1;
          IF SalesHeader."Prices Including VAT" THEN
            ShareOfVAT := 1 + "VAT %" / 100;
          IF Quantity <> 0 THEN
            IF ItemChargeAssgntSales."Unit Cost" <> ROUND(
                 ("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                 Currency."Unit-Amount Rounding Precision")
            THEN
              ItemChargeAssgntSales."Unit Cost" :=
                ROUND(("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                  Currency."Unit-Amount Rounding Precision");
          IF TotalQtyToAssign <> 0 THEN BEGIN
            ItemChargeAssgntSales."Amount to Assign" :=
              ROUND(ItemChargeAssgntSales."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
                Currency."Amount Rounding Precision");
            TotalQtyToAssign -= ItemChargeAssgntSales."Qty. to Assign";
            TotalAmtToAssign -= ItemChargeAssgntSales."Amount to Assign";
          END;
          ItemChargeAssgntSales.MODIFY;
        UNTIL ItemChargeAssgntSales.NEXT = 0;
        CALCFIELDS("Qty. to Assign");
      END;
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5802(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      ItemChargeAssgntSales.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",DocType);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",DocNo);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",DocLineNo);
      IF NOT ItemChargeAssgntSales.ISEMPTY THEN
        ItemChargeAssgntSales.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DeleteChargeChargeAssgnt@5804(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      IF DocType <> "Document Type"::"Blanket Order" THEN
        IF "Quantity Invoiced" <> 0 THEN BEGIN
          CALCFIELDS("Qty. Assigned");
          TESTFIELD("Qty. Assigned","Quantity Invoiced");
        END;
      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type",DocType);
      ItemChargeAssgntSales.SETRANGE("Document No.",DocNo);
      ItemChargeAssgntSales.SETRANGE("Document Line No.",DocLineNo);
      IF NOT ItemChargeAssgntSales.ISEMPTY THEN
        ItemChargeAssgntSales.DELETEALL;
    END;

    LOCAL PROCEDURE CheckItemChargeAssgnt@5800();
    VAR
      ItemChargeAssgntSales@1000 : Record 5809;
    BEGIN
      ItemChargeAssgntSales.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.","Line No.");
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      IF ItemChargeAssgntSales.FINDSET THEN BEGIN
        TESTFIELD("Allow Item Charge Assignment");
        REPEAT
          ItemChargeAssgntSales.TESTFIELD("Qty. to Assign",0);
        UNTIL ItemChargeAssgntSales.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE TestStatusOpen@33();
    BEGIN
      IF StatusCheckSuspended THEN
        EXIT;
      GetSalesHeader;
      IF NOT "System-Created Entry" THEN
        IF Type <> Type::" " THEN
          SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
    END;

    PROCEDURE SuspendStatusCheck@39(Suspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := Suspend;
    END;

    PROCEDURE UpdateVATOnLines@36(QtyType@1000 : 'General,Invoicing,Shipping';VAR SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37;VAR VATAmountLine@1003 : Record 290);
    VAR
      TempVATAmountLineRemainder@1004 : TEMPORARY Record 290;
      Currency@1005 : Record 4;
      NewAmount@1006 : Decimal;
      NewAmountIncludingVAT@1007 : Decimal;
      NewVATBaseAmount@1008 : Decimal;
      VATAmount@1009 : Decimal;
      VATDifference@1010 : Decimal;
      InvDiscAmount@1011 : Decimal;
      LineAmountToInvoice@1012 : Decimal;
      LineAmountToInvoiceDiscounted@1013 : Decimal;
      DeferralAmount@1014 : Decimal;
    BEGIN
      IF QtyType = QtyType::Shipping THEN
        EXIT;
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");

      TempVATAmountLineRemainder.DELETEALL;

      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        LOCKTABLE;
        IF FINDSET THEN
          REPEAT
            IF NOT ZeroAmountLine(QtyType) THEN BEGIN
              DeferralAmount := GetDeferralAmount;
              VATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0);
              IF VATAmountLine.Modified THEN BEGIN
                IF NOT TempVATAmountLineRemainder.GET(
                     "VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0)
                THEN BEGIN
                  TempVATAmountLineRemainder := VATAmountLine;
                  TempVATAmountLineRemainder.INIT;
                  TempVATAmountLineRemainder.INSERT;
                END;

                IF QtyType = QtyType::General THEN
                  LineAmountToInvoice := "Line Amount"
                ELSE
                  LineAmountToInvoice :=
                    ROUND("Line Amount" * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");

                IF "Allow Invoice Disc." THEN BEGIN
                  IF (VATAmountLine."Inv. Disc. Base Amount" = 0) OR (LineAmountToInvoice = 0) THEN
                    InvDiscAmount := 0
                  ELSE BEGIN
                    LineAmountToInvoiceDiscounted :=
                      VATAmountLine."Invoice Discount Amount" * LineAmountToInvoice /
                      VATAmountLine."Inv. Disc. Base Amount";
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" + LineAmountToInvoiceDiscounted;
                    InvDiscAmount :=
                      ROUND(
                        TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" - InvDiscAmount;
                  END;
                  IF QtyType = QtyType::General THEN BEGIN
                    "Inv. Discount Amount" := InvDiscAmount;
                    CalcInvDiscToInvoice;
                  END ELSE
                    "Inv. Disc. Amount to Invoice" := InvDiscAmount;
                END ELSE
                  InvDiscAmount := 0;

                IF QtyType = QtyType::General THEN
                  IF SalesHeader."Prices Including VAT" THEN BEGIN
                    IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount" = 0) OR
                       ("Line Amount" = 0)
                    THEN BEGIN
                      VATAmount := 0;
                      NewAmountIncludingVAT := 0;
                    END ELSE BEGIN
                      VATAmount :=
                        TempVATAmountLineRemainder."VAT Amount" +
                        VATAmountLine."VAT Amount" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                      NewAmountIncludingVAT :=
                        TempVATAmountLineRemainder."Amount Including VAT" +
                        VATAmountLine."Amount Including VAT" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                    END;
                    NewAmount :=
                      ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision") -
                      ROUND(VATAmount,Currency."Amount Rounding Precision");
                    NewVATBaseAmount :=
                      ROUND(
                        NewAmount * (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision");
                  END ELSE BEGIN
                    IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
                      VATAmount := "Line Amount" - "Inv. Discount Amount";
                      NewAmount := 0;
                      NewVATBaseAmount := 0;
                    END ELSE BEGIN
                      NewAmount := "Line Amount" - "Inv. Discount Amount";
                      NewVATBaseAmount :=
                        ROUND(
                          NewAmount * (1 - SalesHeader."VAT Base Discount %" / 100),
                          Currency."Amount Rounding Precision");
                      IF VATAmountLine."VAT Base" = 0 THEN
                        VATAmount := 0
                      ELSE
                        VATAmount :=
                          TempVATAmountLineRemainder."VAT Amount" +
                          VATAmountLine."VAT Amount" * NewAmount / VATAmountLine."VAT Base";
                    END;
                    NewAmountIncludingVAT := NewAmount + ROUND(VATAmount,Currency."Amount Rounding Precision");
                  END
                ELSE BEGIN
                  IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount") = 0 THEN
                    VATDifference := 0
                  ELSE
                    VATDifference :=
                      TempVATAmountLineRemainder."VAT Difference" +
                      VATAmountLine."VAT Difference" * (LineAmountToInvoice - InvDiscAmount) /
                      (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                  IF LineAmountToInvoice = 0 THEN
                    "VAT Difference" := 0
                  ELSE
                    "VAT Difference" := ROUND(VATDifference,Currency."Amount Rounding Precision");
                END;
                IF QtyType = QtyType::General THEN BEGIN
                  Amount := NewAmount;
                  "Amount Including VAT" := ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                  "VAT Base Amount" := NewVATBaseAmount;
                END;
                InitOutstanding;
                IF Type = Type::"Charge (Item)" THEN
                  UpdateItemChargeAssgnt;
                MODIFY;
                IF ("Deferral Code" <> '') AND (DeferralAmount <> GetDeferralAmount) THEN
                  UpdateDeferralAmounts;

                TempVATAmountLineRemainder."Amount Including VAT" :=
                  NewAmountIncludingVAT - ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                TempVATAmountLineRemainder."VAT Amount" := VATAmount - NewAmountIncludingVAT + NewAmount;
                TempVATAmountLineRemainder."VAT Difference" := VATDifference - "VAT Difference";
                TempVATAmountLineRemainder.MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalcVATAmountLines@35(QtyType@1000 : 'General,Invoicing,Shipping';VAR SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37;VAR VATAmountLine@1003 : Record 290);
    VAR
      PrevVatAmountLine@1007 : Record 290;
      Currency@1004 : Record 4;
      SalesTaxCalculate@1005 : Codeunit 398;
      TotalVATAmount@1011 : Decimal;
      QtyToHandle@1006 : Decimal;
      RoundingLineInserted@1010 : Boolean;
    BEGIN
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");

      VATAmountLine.DELETEALL;

      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        IF FINDSET THEN
          REPEAT
            IF NOT ZeroAmountLine(QtyType) THEN BEGIN
              IF (Type = Type::"G/L Account") AND NOT "Prepayment Line" THEN
                RoundingLineInserted := ("No." = GetCPGInvRoundAcc(SalesHeader)) OR RoundingLineInserted;
              IF "VAT Calculation Type" IN
                 ["VAT Calculation Type"::"Reverse Charge VAT","VAT Calculation Type"::"Sales Tax"]
              THEN
                "VAT %" := 0;
              IF NOT VATAmountLine.GET(
                   "VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0)
              THEN BEGIN
                VATAmountLine.INIT;
                VATAmountLine."VAT Identifier" := "VAT Identifier";
                VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
                VATAmountLine."Tax Group Code" := "Tax Group Code";
                VATAmountLine."VAT %" := "VAT %";
                VATAmountLine.Modified := TRUE;
                VATAmountLine.Positive := "Line Amount" >= 0;
                VATAmountLine.INSERT;
              END;
              CASE QtyType OF
                QtyType::General:
                  BEGIN
                    VATAmountLine.Quantity := VATAmountLine.Quantity + "Quantity (Base)";
                    VATAmountLine."Line Amount" := VATAmountLine."Line Amount" + "Line Amount";
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + "Line Amount";
                    VATAmountLine."Invoice Discount Amount" :=
                      VATAmountLine."Invoice Discount Amount" + "Inv. Discount Amount";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
                QtyType::Invoicing:
                  BEGIN
                    CASE TRUE OF
                      ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
                      (NOT SalesHeader.Ship) AND SalesHeader.Invoice AND (NOT "Prepayment Line"):
                        BEGIN
                          IF "Shipment No." = '' THEN BEGIN
                            QtyToHandle := GetAbsMin("Qty. to Invoice","Qty. Shipped Not Invoiced");
                            VATAmountLine.Quantity :=
                              VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Qty. Shipped Not Invd. (Base)");
                          END ELSE BEGIN
                            QtyToHandle := "Qty. to Invoice";
                            VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                          END;
                        END;
                      ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                      (NOT SalesHeader.Receive) AND SalesHeader.Invoice:
                        BEGIN
                          IF "Return Receipt No." = '' THEN BEGIN
                            QtyToHandle := GetAbsMin("Qty. to Invoice","Return Qty. Rcd. Not Invd.");
                            VATAmountLine.Quantity :=
                              VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Ret. Qty. Rcd. Not Invd.(Base)");
                          END ELSE BEGIN
                            QtyToHandle := "Qty. to Invoice";
                            VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                          END;
                        END;
                      ELSE
                        BEGIN
                        QtyToHandle := "Qty. to Invoice";
                        VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                      END;
                    END;
                    VATAmountLine."Line Amount" :=
                      VATAmountLine."Line Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF SalesHeader."Invoice Discount Calculation" <> SalesHeader."Invoice Discount Calculation"::Amount THEN
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" +
                        ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision")
                    ELSE
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" + "Inv. Disc. Amount to Invoice";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
                QtyType::Shipping:
                  BEGIN
                    IF "Document Type" IN
                       ["Document Type"::"Return Order","Document Type"::"Credit Memo"]
                    THEN BEGIN
                      QtyToHandle := "Return Qty. to Receive";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Return Qty. to Receive (Base)";
                    END ELSE BEGIN
                      QtyToHandle := "Qty. to Ship";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Ship (Base)";
                    END;
                    VATAmountLine."Line Amount" :=
                      VATAmountLine."Line Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + GetLineAmountToHandle(QtyToHandle);
                    VATAmountLine."Invoice Discount Amount" :=
                      VATAmountLine."Invoice Discount Amount" +
                      ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision");
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
                QtyType::Shipping:
                  BEGIN
                    IF "Document Type" IN
                       ["Document Type"::"Return Order","Document Type"::"Credit Memo"]
                    THEN BEGIN
                      QtyToHandle := "Return Qty. to Receive";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Return Qty. to Receive (Base)";
                    END ELSE BEGIN
                      QtyToHandle := "Qty. to Ship";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Ship (Base)";
                    END;
                  END;
              END;
              TotalVATAmount := TotalVATAmount + "Amount Including VAT" - Amount;
            END;
          UNTIL NEXT = 0;
      END;

      WITH VATAmountLine DO
        IF FINDSET THEN
          REPEAT
            IF (PrevVatAmountLine."VAT Identifier" <> "VAT Identifier") OR
               (PrevVatAmountLine."VAT Calculation Type" <> "VAT Calculation Type") OR
               (PrevVatAmountLine."Tax Group Code" <> "Tax Group Code") OR
               (PrevVatAmountLine."Use Tax" <> "Use Tax")
            THEN
              PrevVatAmountLine.INIT;
            IF SalesHeader."Prices Including VAT" THEN BEGIN
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT Base" :=
                      ROUND(
                        ("Line Amount" - "Invoice Discount Amount") / (1 + "VAT %" / 100),
                        Currency."Amount Rounding Precision") - "VAT Difference";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        ("Line Amount" - "Invoice Discount Amount" - "VAT Base" - "VAT Difference") *
                        (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "VAT Base" + "VAT Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE BEGIN
                      PrevVatAmountLine := VATAmountLine;
                      PrevVatAmountLine."VAT Amount" :=
                        ("Line Amount" - "Invoice Discount Amount" - "VAT Base" - "VAT Difference") *
                        (1 - SalesHeader."VAT Base Discount %" / 100);
                      PrevVatAmountLine."VAT Amount" :=
                        PrevVatAmountLine."VAT Amount" -
                        ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    END;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Base" :=
                      ROUND(
                        SalesTaxCalculate.ReverseCalculateTax(
                          SalesHeader."Tax Area Code","Tax Group Code",SalesHeader."Tax Liable",
                          SalesHeader."Posting Date","Amount Including VAT",Quantity,SalesHeader."Currency Factor"),
                        Currency."Amount Rounding Precision");
                    "VAT Amount" := "VAT Difference" + "Amount Including VAT" - "VAT Base";
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                  END;
              END;
            END ELSE
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        "VAT Base" * "VAT %" / 100 * (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount" + "VAT Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE
                      IF NOT "Includes Prepayment" THEN BEGIN
                        PrevVatAmountLine := VATAmountLine;
                        PrevVatAmountLine."VAT Amount" :=
                          "VAT Base" * "VAT %" / 100 * (1 - SalesHeader."VAT Base Discount %" / 100);
                        PrevVatAmountLine."VAT Amount" :=
                          PrevVatAmountLine."VAT Amount" -
                          ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                      END;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Amount" :=
                      SalesTaxCalculate.CalculateTax(
                        SalesHeader."Tax Area Code","Tax Group Code",SalesHeader."Tax Liable",
                        SalesHeader."Posting Date","VAT Base",Quantity,SalesHeader."Currency Factor");
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "VAT Base" + "VAT Amount";
                  END;
              END;

            IF RoundingLineInserted THEN
              TotalVATAmount := TotalVATAmount - "VAT Amount";
            "Calculated VAT Amount" := "VAT Amount" - "VAT Difference";
            MODIFY;
          UNTIL NEXT = 0;

      IF RoundingLineInserted AND (TotalVATAmount <> 0) THEN
        IF VATAmountLine.GET(SalesLine."VAT Identifier",SalesLine."VAT Calculation Type",
             SalesLine."Tax Group Code",FALSE,SalesLine."Line Amount" >= 0)
        THEN BEGIN
          VATAmountLine."VAT Amount" := VATAmountLine."VAT Amount" + TotalVATAmount;
          VATAmountLine."Amount Including VAT" := VATAmountLine."Amount Including VAT" + TotalVATAmount;
          VATAmountLine."Calculated VAT Amount" := VATAmountLine."Calculated VAT Amount" + TotalVATAmount;
          VATAmountLine.MODIFY;
        END;
    END;

    PROCEDURE GetCPGInvRoundAcc@71(VAR SalesHeader@1000 : Record 36) : Code[20];
    VAR
      Cust@1002 : Record 18;
      CustTemplate@1003 : Record 5105;
      CustPostingGroup@1004 : Record 92;
    BEGIN
      GetSalesSetup;
      IF SalesSetup."Invoice Rounding" THEN
        IF Cust.GET(SalesHeader."Bill-to Customer No.") THEN
          CustPostingGroup.GET(Cust."Customer Posting Group")
        ELSE
          IF CustTemplate.GET(SalesHeader."Sell-to Customer Template Code") THEN
            CustPostingGroup.GET(CustTemplate."Customer Posting Group");

      EXIT(CustPostingGroup."Invoice Rounding Account");
    END;

    LOCAL PROCEDURE CalcInvDiscToInvoice@37();
    VAR
      OldInvDiscAmtToInv@1000 : Decimal;
    BEGIN
      GetSalesHeader;
      OldInvDiscAmtToInv := "Inv. Disc. Amount to Invoice";
      IF Quantity = 0 THEN
        VALIDATE("Inv. Disc. Amount to Invoice",0)
      ELSE
        VALIDATE(
          "Inv. Disc. Amount to Invoice",
          ROUND(
            "Inv. Discount Amount" * "Qty. to Invoice" / Quantity,
            Currency."Amount Rounding Precision"));

      IF OldInvDiscAmtToInv <> "Inv. Disc. Amount to Invoice" THEN BEGIN
        "Amount Including VAT" := "Amount Including VAT" - "VAT Difference";
        "VAT Difference" := 0;
      END;
    END;

    PROCEDURE UpdateWithWarehouseShip@41();
    BEGIN
      IF Type = Type::Item THEN
        CASE TRUE OF
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity >= 0):
            IF Location.RequireShipment("Location Code") THEN
              VALIDATE("Qty. to Ship",0)
            ELSE
              VALIDATE("Qty. to Ship","Outstanding Quantity");
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity < 0):
            IF Location.RequireReceive("Location Code") THEN
              VALIDATE("Qty. to Ship",0)
            ELSE
              VALIDATE("Qty. to Ship","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0):
            IF Location.RequireReceive("Location Code") THEN
              VALIDATE("Return Qty. to Receive",0)
            ELSE
              VALIDATE("Return Qty. to Receive","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0):
            IF Location.RequireShipment("Location Code") THEN
              VALIDATE("Return Qty. to Receive",0)
            ELSE
              VALIDATE("Return Qty. to Receive","Outstanding Quantity");
        END;
      SetDefaultQuantity;
    END;

    LOCAL PROCEDURE CheckWarehouse@46();
    VAR
      Location2@1002 : Record 14;
      WhseSetup@1000 : Record 5769;
      ShowDialog@1001 : ' ,Message,Error';
      DialogText@1003 : Text[50];
    BEGIN
      GetLocation("Location Code");
      IF "Location Code" = '' THEN BEGIN
        WhseSetup.GET;
        Location2."Require Shipment" := WhseSetup."Require Shipment";
        Location2."Require Pick" := WhseSetup."Require Pick";
        Location2."Require Receive" := WhseSetup."Require Receive";
        Location2."Require Put-away" := WhseSetup."Require Put-away";
      END ELSE
        Location2 := Location;

      DialogText := Text035;
      IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
         Location2."Directed Put-away and Pick"
      THEN BEGIN
        ShowDialog := ShowDialog::Error;
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0)) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0))
        THEN
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
        ELSE
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"));
      END ELSE BEGIN
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Sales Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Shipment" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Shipment" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
          ELSE BEGIN
            DialogText := Text036;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Pick"));
          END;
        END;

        IF (("Document Type" = "Document Type"::Order) AND (Quantity < 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Sales Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Receive" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Receive" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"))
          ELSE BEGIN
            DialogText := Text036;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Put-away"));
          END;
        END;
      END;

      CASE ShowDialog OF
        ShowDialog::Message:
          MESSAGE(Text016 + Text017,DialogText,FIELDCAPTION("Line No."),"Line No.");
        ShowDialog::Error:
          ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
      END;

      HandleDedicatedBin(TRUE);
    END;

    LOCAL PROCEDURE UpdateDates@43();
    BEGIN
      IF CurrFieldNo = 0 THEN BEGIN
        PlannedShipmentDateCalculated := FALSE;
        PlannedDeliveryDateCalculated := FALSE;
      END;
      IF "Promised Delivery Date" <> 0D THEN
        VALIDATE("Promised Delivery Date")
      ELSE
        IF "Requested Delivery Date" <> 0D THEN
          VALIDATE("Requested Delivery Date")
        ELSE
          VALIDATE("Shipment Date");
    END;

    PROCEDURE GetItemTranslation@42();
    BEGIN
      GetSalesHeader;
      IF ItemTranslation.GET("No.","Variant Code",SalesHeader."Language Code") THEN BEGIN
        Description := ItemTranslation.Description;
        "Description 2" := ItemTranslation."Description 2";
      END;
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    PROCEDURE PriceExists@44() : Boolean;
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        GetSalesHeader;
        EXIT(PriceCalcMgt.SalesLinePriceExists(SalesHeader,Rec,TRUE));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE LineDiscExists@45() : Boolean;
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        GetSalesHeader;
        EXIT(PriceCalcMgt.SalesLineLineDiscExists(SalesHeader,Rec,TRUE));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE RowID1@47() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(ItemTrackingMgt.ComposeRowID(DATABASE::"Sales Line","Document Type",
          "Document No.",'',0,"Line No."));
    END;

    LOCAL PROCEDURE UpdateItemCrossRef@48();
    BEGIN
      DistIntegration.EnterSalesItemCrossRef(Rec);
      UpdateICPartner;
    END;

    LOCAL PROCEDURE GetDefaultBin@50();
    VAR
      WMSManagement@1000 : Codeunit 7302;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT;

      "Bin Code" := '';
      IF "Drop Shipment" THEN
        EXIT;

      IF ("Location Code" <> '') AND ("No." <> '') THEN BEGIN
        GetLocation("Location Code");
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN BEGIN
          IF ("Qty. to Assemble to Order" > 0) OR IsAsmToOrderRequired THEN
            IF GetATOBin(Location,"Bin Code") THEN
              EXIT;

          WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code");
          HandleDedicatedBin(FALSE);
        END;
      END;
    END;

    PROCEDURE GetATOBin@89(Location@1001 : Record 14;VAR BinCode@1002 : Code[20]) : Boolean;
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      IF NOT Location."Require Shipment" THEN
        BinCode := Location."Asm.-to-Order Shpt. Bin Code";
      IF BinCode <> '' THEN
        EXIT(TRUE);

      IF AsmHeader.GetFromAssemblyBin(Location,BinCode) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE IsInbound@97() : Boolean;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote,"Document Type"::"Blanket Order":
          EXIT("Quantity (Base)" < 0);
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          EXIT("Quantity (Base)" > 0);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE HandleDedicatedBin@70(IssueWarning@1001 : Boolean);
    VAR
      WhseIntegrationMgt@1002 : Codeunit 7317;
    BEGIN
      IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
        WhseIntegrationMgt.CheckIfBinDedicatedOnSrcDoc("Location Code","Bin Code",IssueWarning);
    END;

    LOCAL PROCEDURE CheckAssocPurchOrder@51(TheFieldCaption@1000 : Text[250]);
    BEGIN
      IF TheFieldCaption = '' THEN BEGIN // If sales line is being deleted
        IF "Purch. Order Line No." <> 0 THEN
          ERROR(
            Text000,
            "Purchase Order No.",
            "Purch. Order Line No.");
        IF "Special Order Purch. Line No." <> 0 THEN
          ERROR(
            Text000,
            "Special Order Purchase No.",
            "Special Order Purch. Line No.");
      END;
      IF "Purch. Order Line No." <> 0 THEN
        ERROR(
          Text002,
          TheFieldCaption,
          "Purchase Order No.",
          "Purch. Order Line No.");
      IF "Special Order Purch. Line No." <> 0 THEN
        ERROR(
          Text002,
          TheFieldCaption,
          "Special Order Purchase No.",
          "Special Order Purch. Line No.");
    END;

    PROCEDURE CrossReferenceNoLookUp@53();
    VAR
      ItemCrossReference@1000 : Record 5717;
      ICGLAcc@1001 : Record 410;
    BEGIN
      CASE Type OF
        Type::Item:
          BEGIN
            GetSalesHeader;
            ItemCrossReference.RESET;
            ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
            ItemCrossReference.SETFILTER(
              "Cross-Reference Type",'%1|%2',
              ItemCrossReference."Cross-Reference Type"::Customer,
              ItemCrossReference."Cross-Reference Type"::" ");
            ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',SalesHeader."Sell-to Customer No.",'');
            IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN BEGIN
              VALIDATE("Cross-Reference No.",ItemCrossReference."Cross-Reference No.");
              PriceCalcMgt.FindSalesLineLineDisc(SalesHeader,Rec);
              PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,FIELDNO("Cross-Reference No."));
              VALIDATE("Unit Price");
            END;
          END;
        Type::"G/L Account",Type::Resource:
          BEGIN
            GetSalesHeader;
            SalesHeader.TESTFIELD("Sell-to IC Partner Code");
            IF PAGE.RUNMODAL(PAGE::"IC G/L Account List") = ACTION::LookupOK THEN
              "Cross-Reference No." := ICGLAcc."No.";
          END;
      END;
    END;

    LOCAL PROCEDURE CheckServItemCreation@52();
    VAR
      ServItemGroup@1000 : Record 5904;
    BEGIN
      IF CurrFieldNo = 0 THEN
        EXIT;
      IF Type <> Type::Item THEN
        EXIT;
      Item.GET("No.");
      IF Item."Service Item Group" = '' THEN
        EXIT;
      IF ServItemGroup.GET(Item."Service Item Group") THEN
        IF ServItemGroup."Create Service Item" THEN
          IF "Qty. to Ship (Base)" <> ROUND("Qty. to Ship (Base)",1) THEN
            ERROR(
              Text034,
              FIELDCAPTION("Qty. to Ship (Base)"),
              ServItemGroup.FIELDCAPTION("Create Service Item"));
    END;

    PROCEDURE ItemExists@54(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item2@1001 : Record 27;
    BEGIN
      IF Type = Type::Item THEN
        IF NOT Item2.GET(ItemNo) THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE IsShipment@55() : Boolean;
    BEGIN
      EXIT(SignedXX("Quantity (Base)") < 0);
    END;

    LOCAL PROCEDURE GetAbsMin@56(QtyToHandle@1000 : Decimal;QtyHandled@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(QtyHandled) < ABS(QtyToHandle) THEN
        EXIT(QtyHandled);

      EXIT(QtyToHandle);
    END;

    PROCEDURE SetHideValidationDialog@57(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE CheckApplFromItemLedgEntry@157(VAR ItemLedgEntry@1000 : Record 32);
    VAR
      ItemTrackingLines@1003 : Page 6510;
      QtyNotReturned@1002 : Decimal;
      QtyReturned@1004 : Decimal;
    BEGIN
      IF "Appl.-from Item Entry" = 0 THEN
        EXIT;

      IF "Shipment No." <> '' THEN
        EXIT;

      TESTFIELD(Type,Type::Item);
      TESTFIELD(Quantity);
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        IF Quantity < 0 THEN
          FIELDERROR(Quantity,Text029);
      END ELSE BEGIN
        IF Quantity > 0 THEN
          FIELDERROR(Quantity,Text030);
      END;

      ItemLedgEntry.GET("Appl.-from Item Entry");
      ItemLedgEntry.TESTFIELD(Positive,FALSE);
      ItemLedgEntry.TESTFIELD("Item No.","No.");
      ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");
      IF ItemLedgEntry.TrackingExists THEN
        ERROR(Text040,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-from Item Entry"));

      IF ABS("Quantity (Base)") > -ItemLedgEntry.Quantity THEN
        ERROR(
          Text046,
          -ItemLedgEntry.Quantity,ItemLedgEntry.FIELDCAPTION("Document No."),
          ItemLedgEntry."Document No.");

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        IF ABS("Outstanding Qty. (Base)") > -ItemLedgEntry."Shipped Qty. Not Returned" THEN BEGIN
          QtyNotReturned := ItemLedgEntry."Shipped Qty. Not Returned";
          QtyReturned := ItemLedgEntry.Quantity - ItemLedgEntry."Shipped Qty. Not Returned";
          IF "Qty. per Unit of Measure" <> 0 THEN BEGIN
            QtyNotReturned :=
              ROUND(ItemLedgEntry."Shipped Qty. Not Returned" / "Qty. per Unit of Measure",0.00001);
            QtyReturned :=
              ROUND(
                (ItemLedgEntry.Quantity - ItemLedgEntry."Shipped Qty. Not Returned") /
                "Qty. per Unit of Measure",0.00001);
          END;
          ERROR(
            Text039,
            -QtyReturned,ItemLedgEntry.FIELDCAPTION("Document No."),
            ItemLedgEntry."Document No.",-QtyNotReturned);
        END;
    END;

    PROCEDURE CalcPrepaymentToDeduct@63();
    BEGIN
      IF ("Qty. to Invoice" <> 0) AND ("Prepmt. Amt. Inv." <> 0) THEN BEGIN
        GetSalesHeader;
        IF ("Prepayment %" = 100) AND NOT IsFinalInvoice THEN
          "Prepmt Amt to Deduct" := GetLineAmountToHandle("Qty. to Invoice")
        ELSE
          "Prepmt Amt to Deduct" :=
            ROUND(
              ("Prepmt. Amt. Inv." - "Prepmt Amt Deducted") *
              "Qty. to Invoice" / (Quantity - "Quantity Invoiced"),Currency."Amount Rounding Precision")
      END ELSE
        "Prepmt Amt to Deduct" := 0
    END;

    PROCEDURE IsFinalInvoice@116() : Boolean;
    BEGIN
      EXIT("Qty. to Invoice" = Quantity - "Quantity Invoiced");
    END;

    PROCEDURE GetLineAmountToHandle@117(QtyToHandle@1002 : Decimal) : Decimal;
    VAR
      LineAmount@1001 : Decimal;
      LineDiscAmount@1000 : Decimal;
    BEGIN
      IF "Line Discount %" = 100 THEN
        EXIT(0);

      GetSalesHeader;
      LineAmount := ROUND(QtyToHandle * "Unit Price",Currency."Amount Rounding Precision");
      LineDiscAmount :=
        ROUND(
          LineAmount * "Line Discount %" / 100,Currency."Amount Rounding Precision");
      EXIT(LineAmount - LineDiscAmount);
    END;

    PROCEDURE SetHasBeenShown@59();
    BEGIN
      HasBeenShown := TRUE;
    END;

    LOCAL PROCEDURE TestJobPlanningLine@60();
    BEGIN
      IF "Job Contract Entry No." = 0 THEN
        EXIT;
      JobPostLine.TestSalesLine(Rec);
    END;

    PROCEDURE BlockDynamicTracking@58(SetBlock@1000 : Boolean);
    BEGIN
      TrackingBlocked := SetBlock;
      ReserveSalesLine.Block(SetBlock);
    END;

    PROCEDURE InitQtyToShip2@7();
    BEGIN
      "Qty. to Ship" := "Outstanding Quantity";
      "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";

      ATOLink.UpdateQtyToAsmFromSalesLine(Rec);

      CheckServItemCreation;

      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;

      CalcInvDiscToInvoice;
      CalcPrepaymentToDeduct;
    END;

    PROCEDURE ShowLineComments@61();
    VAR
      SalesCommentLine@1000 : Record 44;
      SalesCommentSheet@1001 : Page 67;
    BEGIN
      TESTFIELD("Document No.");
      TESTFIELD("Line No.");
      SalesCommentLine.SETRANGE("Document Type","Document Type");
      SalesCommentLine.SETRANGE("No.","Document No.");
      SalesCommentLine.SETRANGE("Document Line No.","Line No.");
      SalesCommentSheet.SETTABLEVIEW(SalesCommentLine);
      SalesCommentSheet.RUNMODAL;
    END;

    PROCEDURE SetDefaultQuantity@62();
    BEGIN
      GetSalesSetup;
      IF SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Blank THEN BEGIN
        IF ("Document Type" = "Document Type"::Order) OR ("Document Type" = "Document Type"::Quote) THEN BEGIN
          "Qty. to Ship" := 0;
          "Qty. to Ship (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          "Return Qty. to Receive" := 0;
          "Return Qty. to Receive (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
      END;
    END;

    LOCAL PROCEDURE SetReserveWithoutPurchasingCode@118();
    BEGIN
      GetItem;
      IF Item.Reserve = Item.Reserve::Optional THEN BEGIN
        GetSalesHeader;
        Reserve := SalesHeader.Reserve;
      END ELSE
        Reserve := Item.Reserve;
    END;

    PROCEDURE UpdatePrePaymentAmounts@64();
    VAR
      ShipmentLine@1000 : Record 111;
      SalesOrderLine@1001 : Record 37;
      SalesOrderHeader@1002 : Record 36;
    BEGIN
      IF ("Document Type" <> "Document Type"::Invoice) OR ("Prepayment %" = 0) THEN
        EXIT;

      IF NOT ShipmentLine.GET("Shipment No.","Shipment Line No.") THEN BEGIN
        "Prepmt Amt to Deduct" := 0;
        "Prepmt VAT Diff. to Deduct" := 0;
      END ELSE BEGIN
        IF SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,ShipmentLine."Order No.",ShipmentLine."Order Line No.") THEN BEGIN
          IF ("Prepayment %" = 100) AND (Quantity <> SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced") THEN
            "Prepmt Amt to Deduct" := "Line Amount"
          ELSE
            "Prepmt Amt to Deduct" :=
              ROUND((SalesOrderLine."Prepmt. Amt. Inv." - SalesOrderLine."Prepmt Amt Deducted") *
                Quantity / (SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced"),Currency."Amount Rounding Precision");
          "Prepmt VAT Diff. to Deduct" := "Prepayment VAT Difference" - "Prepmt VAT Diff. Deducted";
          SalesOrderHeader.GET(SalesOrderHeader."Document Type"::Order,SalesOrderLine."Document No.");
        END ELSE BEGIN
          "Prepmt Amt to Deduct" := 0;
          "Prepmt VAT Diff. to Deduct" := 0;
        END;
      END;

      GetSalesHeader;
      SalesHeader.TESTFIELD("Prices Including VAT",SalesOrderHeader."Prices Including VAT");
      IF SalesHeader."Prices Including VAT" THEN BEGIN
        "Prepmt. Amt. Incl. VAT" := "Prepmt Amt to Deduct";
        "Prepayment Amount" :=
          ROUND(
            "Prepmt Amt to Deduct" / (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
      END ELSE BEGIN
        "Prepmt. Amt. Incl. VAT" :=
          ROUND(
            "Prepmt Amt to Deduct" * (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
        "Prepayment Amount" := "Prepmt Amt to Deduct";
      END;
      "Prepmt. Line Amount" := "Prepmt Amt to Deduct";
      "Prepmt. Amt. Inv." := "Prepmt. Line Amount";
      "Prepmt. VAT Base Amt." := "Prepayment Amount";
      "Prepmt. Amount Inv. Incl. VAT" := "Prepmt. Amt. Incl. VAT";
      "Prepmt Amt Deducted" := 0;
    END;

    PROCEDURE ZeroAmountLine@65(QtyType@1000 : 'General,Invoicing,Shipping') : Boolean;
    BEGIN
      IF Type = Type::" " THEN
        EXIT(TRUE);
      IF Quantity = 0 THEN
        EXIT(TRUE);
      IF "Unit Price" = 0 THEN
        EXIT(TRUE);
      IF QtyType = QtyType::Invoicing THEN
        IF "Qty. to Invoice" = 0 THEN
          EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE FilterLinesWithItemToPlan@69(VAR Item@1000 : Record 27;DocumentType@1001 : Option);
    BEGIN
      RESET;
      SETCURRENTKEY("Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code","Shipment Date");
      SETRANGE("Document Type",DocumentType);
      SETRANGE(Type,Type::Item);
      SETRANGE("No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Outstanding Qty. (Base)",'<>0');
    END;

    PROCEDURE FindLinesWithItemToPlan@66(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      EXIT(FIND('-'));
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      EXIT(NOT ISEMPTY);
    END;

    LOCAL PROCEDURE DateFormularZero@73(VAR DateFormularValue@1001 : DateFormula;CalledByFieldNo@1002 : Integer;CalledByFieldCaption@1003 : Text[250]);
    VAR
      DateFormularZero@1000 : DateFormula;
    BEGIN
      EVALUATE(DateFormularZero,'<0D>');
      IF (DateFormularValue <> DateFormularZero) AND (CalledByFieldNo = CurrFieldNo) THEN
        ERROR(Text051,CalledByFieldCaption,FIELDCAPTION("Drop Shipment"));
      EVALUATE(DateFormularValue,'<0D>');
    END;

    LOCAL PROCEDURE InitQtyToAsm@76();
    BEGIN
      IF NOT IsAsmToOrderAllowed THEN BEGIN
        "Qty. to Assemble to Order" := 0;
        "Qty. to Asm. to Order (Base)" := 0;
        EXIT;
      END;

      IF ((xRec."Qty. to Asm. to Order (Base)" = 0) AND IsAsmToOrderRequired AND ("Qty. Shipped (Base)" = 0)) OR
         ((xRec."Qty. to Asm. to Order (Base)" <> 0) AND
          (xRec."Qty. to Asm. to Order (Base)" = xRec."Quantity (Base)")) OR
         ("Qty. to Asm. to Order (Base)" > "Quantity (Base)")
      THEN BEGIN
        "Qty. to Assemble to Order" := Quantity;
        "Qty. to Asm. to Order (Base)" := "Quantity (Base)";
      END;
    END;

    PROCEDURE AsmToOrderExists@72(VAR AsmHeader@1000 : Record 900) : Boolean;
    VAR
      ATOLink@1001 : Record 904;
    BEGIN
      IF NOT ATOLink.AsmExistsForSalesLine(Rec) THEN
        EXIT(FALSE);
      EXIT(AsmHeader.GET(ATOLink."Assembly Document Type",ATOLink."Assembly Document No."));
    END;

    PROCEDURE FullQtyIsForAsmToOrder@74() : Boolean;
    BEGIN
      IF "Qty. to Asm. to Order (Base)" = 0 THEN
        EXIT(FALSE);
      EXIT("Quantity (Base)" = "Qty. to Asm. to Order (Base)");
    END;

    LOCAL PROCEDURE FullReservedQtyIsForAsmToOrder@75() : Boolean;
    BEGIN
      IF "Qty. to Asm. to Order (Base)" = 0 THEN
        EXIT(FALSE);
      CALCFIELDS("Reserved Qty. (Base)");
      EXIT("Reserved Qty. (Base)" = "Qty. to Asm. to Order (Base)");
    END;

    PROCEDURE QtyBaseOnATO@86() : Decimal;
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      IF AsmToOrderExists(AsmHeader) THEN
        EXIT(AsmHeader."Quantity (Base)");
      EXIT(0);
    END;

    PROCEDURE QtyAsmRemainingBaseOnATO@90() : Decimal;
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      IF AsmToOrderExists(AsmHeader) THEN
        EXIT(AsmHeader."Remaining Quantity (Base)");
      EXIT(0);
    END;

    PROCEDURE QtyToAsmBaseOnATO@88() : Decimal;
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      IF AsmToOrderExists(AsmHeader) THEN
        EXIT(AsmHeader."Quantity to Assemble (Base)");
      EXIT(0);
    END;

    PROCEDURE IsAsmToOrderAllowed@77() : Boolean;
    BEGIN
      IF NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order","Document Type"::Order]) THEN
        EXIT(FALSE);
      IF Quantity < 0 THEN
        EXIT(FALSE);
      IF Type <> Type::Item THEN
        EXIT(FALSE);
      IF "No." = '' THEN
        EXIT(FALSE);
      IF "Drop Shipment" OR "Special Order" THEN
        EXIT(FALSE);
      EXIT(TRUE)
    END;

    PROCEDURE IsAsmToOrderRequired@81() : Boolean;
    BEGIN
      IF (Type <> Type::Item) OR ("No." = '') THEN
        EXIT(FALSE);
      GetItem;
      IF GetSKU THEN
        EXIT(SKU."Assembly Policy" = SKU."Assembly Policy"::"Assemble-to-Order");
      EXIT(Item."Assembly Policy" = Item."Assembly Policy"::"Assemble-to-Order");
    END;

    PROCEDURE CheckAsmToOrder@85(AsmHeader@1001 : Record 900);
    BEGIN
      TESTFIELD("Qty. to Assemble to Order",AsmHeader.Quantity);
      TESTFIELD("Document Type",AsmHeader."Document Type");
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.",AsmHeader."Item No.");
      TESTFIELD("Location Code",AsmHeader."Location Code");
      TESTFIELD("Unit of Measure Code",AsmHeader."Unit of Measure Code");
      TESTFIELD("Variant Code",AsmHeader."Variant Code");
      TESTFIELD("Shipment Date",AsmHeader."Due Date");
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        AsmHeader.CALCFIELDS("Reserved Qty. (Base)");
        AsmHeader.TESTFIELD("Reserved Qty. (Base)",AsmHeader."Remaining Quantity (Base)");
      END;
      TESTFIELD("Qty. to Asm. to Order (Base)",AsmHeader."Quantity (Base)");
      IF "Outstanding Qty. (Base)" < AsmHeader."Remaining Quantity (Base)" THEN
        AsmHeader.FIELDERROR("Remaining Quantity (Base)",STRSUBSTNO(Text045,AsmHeader."Remaining Quantity (Base)"));
    END;

    LOCAL PROCEDURE ShowAsmToOrder@79();
    VAR
      ATOLink@1000 : Record 904;
    BEGIN
      ATOLink.ShowAsm(Rec);
    END;

    PROCEDURE ShowAsmToOrderLines@80();
    VAR
      ATOLink@1000 : Record 904;
    BEGIN
      ATOLink.ShowAsmToOrderLines(Rec);
    END;

    PROCEDURE FindOpenATOEntry@96(LotNo@1003 : Code[20];SerialNo@1004 : Code[20]) : Integer;
    VAR
      PostedATOLink@1002 : Record 914;
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      TESTFIELD("Document Type","Document Type"::Order);
      IF PostedATOLink.FindLinksFromSalesLine(Rec) THEN
        REPEAT
          ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Posted Assembly");
          ItemLedgEntry.SETRANGE("Document No.",PostedATOLink."Assembly Document No.");
          ItemLedgEntry.SETRANGE("Document Line No.",0);
          ItemLedgEntry.SETRANGE("Serial No.",SerialNo);
          ItemLedgEntry.SETRANGE("Lot No.",LotNo);
          ItemLedgEntry.SETRANGE(Open,TRUE);
          IF ItemLedgEntry.FINDFIRST THEN
            EXIT(ItemLedgEntry."Entry No.");
        UNTIL PostedATOLink.NEXT = 0;
    END;

    PROCEDURE RollUpAsmCost@83();
    BEGIN
      ATOLink.RollUpCost(Rec);
    END;

    PROCEDURE RollupAsmPrice@84();
    BEGIN
      GetSalesHeader;
      ATOLink.RollUpPrice(SalesHeader,Rec);
    END;

    LOCAL PROCEDURE UpdateICPartner@78();
    VAR
      ICPartner@1000 : Record 413;
      ItemCrossReference@1001 : Record 5717;
    BEGIN
      IF SalesHeader."Send IC Document" AND
         (SalesHeader."IC Direction" = SalesHeader."IC Direction"::Outgoing) AND
         (SalesHeader."Bill-to IC Partner Code" <> '')
      THEN
        CASE Type OF
          Type::" ",Type::"Charge (Item)":
            BEGIN
              "IC Partner Ref. Type" := Type;
              "IC Partner Reference" := "No.";
            END;
          Type::"G/L Account":
            BEGIN
              "IC Partner Ref. Type" := Type;
              "IC Partner Reference" := GLAcc."Default IC Partner G/L Acc. No";
            END;
          Type::Item:
            BEGIN
              IF SalesHeader."Sell-to IC Partner Code" <> '' THEN
                ICPartner.GET(SalesHeader."Sell-to IC Partner Code")
              ELSE
                ICPartner.GET(SalesHeader."Bill-to IC Partner Code");
              CASE ICPartner."Outbound Sales Item No. Type" OF
                ICPartner."Outbound Sales Item No. Type"::"Common Item No.":
                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Common Item No.");
                ICPartner."Outbound Sales Item No. Type"::"Internal No.",
                ICPartner."Outbound Sales Item No. Type"::"Cross Reference":
                  BEGIN
                    IF ICPartner."Outbound Sales Item No. Type" = ICPartner."Outbound Sales Item No. Type"::"Internal No." THEN
                      VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::Item)
                    ELSE
                      VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Cross Reference");
                    ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Customer);
                    ItemCrossReference.SETRANGE("Cross-Reference Type No.","Sell-to Customer No.");
                    ItemCrossReference.SETRANGE("Item No.","No.");
                    ItemCrossReference.SETRANGE("Variant Code","Variant Code");
                    ItemCrossReference.SETRANGE("Unit of Measure","Unit of Measure Code");
                    IF ItemCrossReference.FINDFIRST THEN
                      "IC Partner Reference" := ItemCrossReference."Cross-Reference No."
                    ELSE
                      "IC Partner Reference" := "No.";
                  END;
              END;
            END;
          Type::"Fixed Asset":
            BEGIN
              "IC Partner Ref. Type" := "IC Partner Ref. Type"::" ";
              "IC Partner Reference" := '';
            END;
          Type::Resource:
            BEGIN
              Resource.GET("No.");
              "IC Partner Ref. Type" := "IC Partner Ref. Type"::"G/L Account";
              "IC Partner Reference" := Resource."IC Partner Purch. G/L Acc. No.";
            END;
        END;
    END;

    PROCEDURE OutstandingInvoiceAmountFromShipment@12(SellToCustomerNo@1000 : Code[20]) : Decimal;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETCURRENTKEY("Document Type","Sell-to Customer No.","Shipment No.");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
      SalesLine.SETRANGE("Sell-to Customer No.",SellToCustomerNo);
      SalesLine.SETFILTER("Shipment No.",'<>%1','');
      SalesLine.CALCSUMS("Outstanding Amount (LCY)");
      EXIT(SalesLine."Outstanding Amount (LCY)");
    END;

    LOCAL PROCEDURE CheckShipmentRelation@94();
    VAR
      SalesShptLine@1001 : Record 111;
    BEGIN
      SalesShptLine.GET("Shipment No.","Shipment Line No.");
      IF (Quantity * SalesShptLine."Qty. Shipped Not Invoiced") < 0 THEN
        FIELDERROR("Qty. to Invoice",Text057);
      IF ABS(Quantity) > ABS(SalesShptLine."Qty. Shipped Not Invoiced") THEN
        ERROR(Text058,SalesShptLine."Document No.");
    END;

    LOCAL PROCEDURE CheckRetRcptRelation@95();
    VAR
      ReturnRcptLine@1000 : Record 6661;
    BEGIN
      ReturnRcptLine.GET("Return Receipt No.","Return Receipt Line No.");
      IF (Quantity * (ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced")) < 0 THEN
        FIELDERROR("Qty. to Invoice",Text059);
      IF ABS(Quantity) > ABS(ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced") THEN
        ERROR(Text060,ReturnRcptLine."Document No.");
    END;

    LOCAL PROCEDURE VerifyItemLineDim@87();
    BEGIN
      IF IsShippedReceivedItemDimChanged THEN
        ConfirmShippedReceivedItemDimChange;
    END;

    PROCEDURE IsShippedReceivedItemDimChanged@113() : Boolean;
    BEGIN
      EXIT(("Dimension Set ID" <> xRec."Dimension Set ID") AND (Type = Type::Item) AND
        (("Qty. Shipped Not Invoiced" <> 0) OR ("Return Rcd. Not Invd." <> 0)));
    END;

    PROCEDURE ConfirmShippedReceivedItemDimChange@114() : Boolean;
    BEGIN
      IF NOT CONFIRM(Text053,TRUE,TABLECAPTION) THEN
        ERROR(Text054);

      EXIT(TRUE);
    END;

    PROCEDURE InitType@91();
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        SalesHeader.GET("Document Type","Document No.");
        IF (SalesHeader.Status = SalesHeader.Status::Released) AND
           (xRec.Type IN [xRec.Type::Item,xRec.Type::"Fixed Asset"])
        THEN
          Type := Type::" "
        ELSE
          Type := xRec.Type;
      END;
    END;

    PROCEDURE UpdateTaxAmounts@1280001();
    VAR
      IndianSalesTaxCalculate@1280000 : Codeunit 13704;
      ServiceTaxSetup@1280002 : Record 16472;
      LineTaxAmount@1500000 : Decimal;
      StandardDeductionAmount@1500001 : Decimal;
      ItemChargeAssgntSales2@1500003 : Record 5809;
      DetailedTaxEntryBuffer@1500005 : Record 16480;
      TotalTaxAmount@1500002 : Decimal;
      TotalStdDeductionAmt@1500004 : Decimal;
    BEGIN
      TaxAreaUpdate;
      IF (Quantity = 0 ) OR ("Unit Price" = 0) THEN BEGIN
        "Amount Added to Tax Base" := 0;
        "Amount Added to Excise Base" := 0;
        "Service Tax Base" := 0;
      END;

      IF "Amount Added to Excise Base" <> 0 THEN
        "Excise Base Amount" := "Amount Added to Excise Base";
      UpdateExciseAmount;
      IF "Amount Added to Tax Base" <> 0 THEN BEGIN
        "Tax Liable" := SalesHeader."Tax Liable";
        "Tax Base Amount" := "Amount Added to Tax Base";
      END ELSE BEGIN
        "Tax Liable" := FALSE;
        "Tax Base Amount" := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
        IF "TCS Nature of Collection" = '' THEN
          "Amount To Customer" :=
            ROUND("Line Amount" + "Excise Amount" - "Inv. Discount Amount" + "Charges To Customer" -
              "Bal. TDS/TCS Including SHECESS" + "Service Tax Amount" + "Service Tax eCess Amount" +
              "Service Tax SHE Cess Amount" + "Service Tax SBC Amount" + "KK Cess Amount",
              Currency."Amount Rounding Precision")
        ELSE
          "Amount To Customer" := ROUND("Line Amount" + "Excise Amount" - "Inv. Discount Amount" + "Charges To Customer" +
              "Bal. TDS/TCS Including SHECESS" + "Service Tax Amount" + "Service Tax eCess Amount" +
              "Service Tax SHE Cess Amount" + "Service Tax SBC Amount" + "KK Cess Amount",
              Currency."Amount Rounding Precision")
      END;

      IndianSalesTaxCalculate.SetCurrency("Currency Code" <> '');
      LineTaxAmount := IndianSalesTaxCalculate.CalculateTax(
          "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
          "Tax Base Amount",Quantity,SalesHeader."Currency Factor","Form Code","Tax %");
      TotalTaxAmount := 0;
      TotalStdDeductionAmt := 0;
      IF LineTaxAmount <> 0 THEN
        IF Type <> Type::"Charge (Item)" THEN
          IndianSalesTaxCalculate.GetStandardDeductionAmt(Rec,StandardDeductionAmount,LineTaxAmount)
        ELSE BEGIN
          DetailedTaxEntryBuffer.RESET;
          DetailedTaxEntryBuffer.SETRANGE("Document Type","Document Type");
          DetailedTaxEntryBuffer.SETRANGE("Document No.","Document No.");
          DetailedTaxEntryBuffer.SETRANGE("Line No.","Line No.");
          DetailedTaxEntryBuffer.DELETEALL;

          ItemChargeAssgntSales2.RESET;
          ItemChargeAssgntSales2.SETRANGE("Document Type","Document Type");
          ItemChargeAssgntSales2.SETRANGE("Document No.","Document No.");
          ItemChargeAssgntSales2.SETRANGE("Document Line No.","Line No.");
          ItemChargeAssgntSales2.SETFILTER("Qty. to Assign",'<>0');
          IF ItemChargeAssgntSales2.FINDSET THEN BEGIN
            REPEAT
              IndianSalesTaxCalculate.GetItemChargeStdDedAmt(Rec,StandardDeductionAmount,
                LineTaxAmount,ItemChargeAssgntSales2);
              TotalTaxAmount += LineTaxAmount;
              TotalStdDeductionAmt += StandardDeductionAmount;
            UNTIL ItemChargeAssgntSales2.NEXT = 0;
            LineTaxAmount := TotalTaxAmount;
            StandardDeductionAmount := TotalStdDeductionAmt;
          END ELSE
            IndianSalesTaxCalculate.GetStandardDeductionAmt(Rec,StandardDeductionAmount,LineTaxAmount);
        END
        ;
      "Amount Including Tax" := ROUND("Tax Base Amount" + LineTaxAmount,Currency."Amount Rounding Precision");
      IF "Tax Base Amount" = 0 THEN
        "Tax %" := 0;
      IF "Standard Deduction %" <> 0 THEN
        "Standard Deduction Amount" := ("Tax Base Amount" * "Standard Deduction %" / 100)
      ELSE
        "Standard Deduction Amount" := 0 ;

      IF SalesHeader."Export or Deemed Export" OR SalesHeader."VAT Exempted" THEN BEGIN
        "Tax %" := 0;
        "Tax Amount" := 0;
      END ELSE
        "Tax Amount" := ROUND(LineTaxAmount - StandardDeductionAmount,Currency."Amount Rounding Precision");
      "Amount Including Tax" := "Tax Base Amount" + "Tax Amount";

      ServiceTaxSetup.RESET;
      ServiceTaxSetup.SETRANGE(Code,"Service Tax Group");
      IF SalesHeader."Posting Date" = 0D THEN
        ServiceTaxSetup.SETRANGE("From Date",0D,WORKDATE)
      ELSE
        ServiceTaxSetup.SETRANGE("From Date",0D,SalesHeader."Posting Date");
      IF ServiceTaxSetup.FINDLAST THEN BEGIN
        IF (NOT SalesHeader."ST Pure Agent") AND (SalesHeader."Nature of Services" = SalesHeader."Nature of Services"::" ")
        THEN BEGIN
          "Service Tax Amount" :=
            ROUND((("Service Tax Base" *
                    ServiceTaxSetup."Service Tax %" * ((100 - ServiceTaxSetup."Abatement %") / 100)) / 100));
          "Service Tax eCess Amount" := ROUND(("Service Tax Amount" * ServiceTaxSetup."eCess %") / 100);
          "Service Tax SHE Cess Amount" := ROUND(("Service Tax Amount" * ServiceTaxSetup."SHE Cess %") / 100);
          "Service Tax SBC Amount" :=
            ROUND((("Service Tax Base" *
                    ServiceTaxSetup."SB Cess%" * ((100 - ServiceTaxSetup."Abatement %") / 100)) / 100));
           "Service Tax SBC %" := ServiceTaxSetup."SB Cess%";
          "KK Cess Amount" :=
            ROUND((("Service Tax Base" *
                    ServiceTaxSetup."KK Cess%" * ((100 - ServiceTaxSetup."Abatement %") / 100)) / 100));
           "KK Cess%" := ServiceTaxSetup."KK Cess%";
        END ELSE BEGIN
          "Service Tax Amount" := 0;
          "Service Tax eCess Amount" := 0;
          "Service Tax SHE Cess Amount" := 0;
          "Service Tax SBC Amount" := 0;
          "Service Tax SBC %" := 0;
          "KK Cess%" := 0;
          "KK Cess Amount":= 0;
        END;
      END ELSE BEGIN
        "Service Tax Amount" := 0;
        "Service Tax eCess Amount" := 0;
        "Service Tax SHE Cess Amount" := 0;
        "Service Tax SBC Amount" := 0;
        "Service Tax SBC %" := 0;
        "KK Cess%" := 0;
        "KK Cess Amount" := 0;
      END;
    END;

    LOCAL PROCEDURE TaxAreaUpdate@1280005();
    VAR
      SalesSetup@1280000 : Record 311;
      TaxLocation@1280001 : Record 13761;
      BilltoCust@1280002 : Record 18;
      ShiptoAddr@1280003 : Record 222;
      TaxGroup@1280004 : Record 321;
    BEGIN
      SalesSetup.GET;
      GetSalesHeader;
      IF TaxGroup.GET("Tax Group Code") THEN;
      TaxLocation.SETRANGE("Dispatch / Receiving Location","Location Code");
      IF SalesSetup."Tax Dependency Type" = SalesSetup."Tax Dependency Type"::"Bill To Customer" THEN
        IF SalesHeader."Bill-to Customer No." <> '' THEN BEGIN
          BilltoCust.GET(SalesHeader."Bill-to Customer No.");
          State := BilltoCust."State Code";
          TaxLocation.SETRANGE("Customer / Vendor Location",BilltoCust."State Code");
          TaxLocation.SETRANGE(Type,TaxLocation.Type::Customer);
          IF TaxGroup."VAT Applicable" THEN
            TaxLocation.SETRANGE("VAT Applicable",TRUE);
          IF TaxLocation.FINDFIRST THEN
            "Tax Area Code" := TaxLocation."Tax Area Code";
        END;
      IF SalesSetup."Tax Dependency Type" = SalesSetup."Tax Dependency Type"::"Ship To Customer" THEN BEGIN
        IF SalesHeader."Ship-to Code" <> '' THEN BEGIN
          ShiptoAddr.GET(SalesHeader."Sell-to Customer No.",SalesHeader."Ship-to Code");
          TaxLocation.SETRANGE("Customer / Vendor Location",ShiptoAddr.State);
          TaxLocation.SETRANGE(Type,TaxLocation.Type::Customer);
          IF TaxGroup."VAT Applicable" THEN
            TaxLocation.SETRANGE("VAT Applicable",TRUE);
          IF TaxLocation.FINDFIRST THEN
            "Tax Area Code" := TaxLocation."Tax Area Code";
        END ELSE
          IF SalesHeader."Sell-to Customer No." <> '' THEN BEGIN
            BilltoCust.GET(SalesHeader."Sell-to Customer No.");
            State := BilltoCust."State Code";
            TaxLocation.SETRANGE("Customer / Vendor Location",BilltoCust."State Code");
            TaxLocation.SETRANGE(Type,TaxLocation.Type::Customer);
            IF TaxGroup."VAT Applicable" THEN
              TaxLocation.SETRANGE("VAT Applicable",TRUE);
            IF TaxLocation.FINDFIRST THEN
              "Tax Area Code" := TaxLocation."Tax Area Code";
          END;
      END;
    END;

    PROCEDURE CalculateStructures@1280007(VAR SalesHeader@1280004 : Record 36);
    VAR
      SalesLine@1280008 : Record 37;
      StrOrderDetails@1280007 : Record 13794;
      StrOrderLineDetails@1280006 : Record 13795;
      StrOrderLines@1280005 : Record 13795;
      TotalAmount@1280003 : Decimal;
      TotalLines@1280002 : Decimal;
      BaseAmount@1280001 : Decimal;
      OriginalCurrencyFactor@1280108 : Decimal;
    BEGIN
      CheckHeaderAndLineLocation(SalesHeader);
      WITH SalesHeader DO BEGIN
        Currency.Initialize("Currency Code");
        IF "Currency Code" <> '' THEN BEGIN
          TESTFIELD("Currency Factor");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;

        IF "Currency Factor" <> 0 THEN
          CFactor := "Currency Factor"
        ELSE
          CFactor := 1;
        OriginalCurrencyFactor := CFactor;
        TempRG23DRemainder.DELETEALL;
        TempRG23DConsumedInCurrDoc.DELETEALL;
        ExecuteDetailRg23D := ((NOT Ship) AND (NOT Invoice)) OR Invoice;
        StrOrderLines.LOCKTABLE;
        StrOrderLineDetails.LOCKTABLE;
        StrOrderLines.RESET;
        StrOrderLines.SETCURRENTKEY("Document Type","Document No.",Type);
        StrOrderLines.SETRANGE(Type,StrOrderLines.Type::Sale);
        StrOrderLines.SETRANGE("Document Type","Document Type");
        StrOrderLines.SETRANGE("Document No.","No.");
        StrOrderLines.SETRANGE("Price Inclusive of Tax",FALSE);
        IF NOT Trading THEN
          StrOrderLines.SETRANGE("Manually Changed",FALSE);
        IF StrOrderLines.FINDFIRST THEN
          StrOrderLines.DELETEALL(TRUE);

        IF GSTManagement.IsGSTApplicable(Structure) THEN
          GSTManagement.SalesPostValidations(SalesHeader);

        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETFILTER(Type,'%1|%2|%3',SalesLine.Type::Item,SalesLine.Type::"Fixed Asset",SalesLine.Type::Resource);
        SalesLine.SETRANGE("Price Inclusive of Tax",FALSE);
        IF SalesLine.FIND('-') THEN
          REPEAT
            TotalAmount := TotalAmount + (SalesLine.Quantity * SalesLine."Unit Price");
          UNTIL SalesLine.NEXT = 0;

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE("Price Inclusive of Tax",FALSE);
        IF SalesLine.FIND('-') THEN BEGIN
          TotalLines := SalesLine.COUNT;
          REPEAT
            IF (SalesLine.Quantity <> 0) AND (SalesLine."Unit Price" <> 0) THEN BEGIN
              WITH SalesLine DO BEGIN
                "Amount Added to Excise Base" := 0;
                "Amount Added to Tax Base" := 0;
                "VAT Base Amount" := 0;
                AssessableValueCalc := CheckAssessableValue(SalesHeader);
                CVD := FALSE;
                StrOrderDetails.RESET;
                StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Sale);
                StrOrderDetails.SETRANGE("Document Type","Document Type");
                StrOrderDetails.SETRANGE("Document No.","Document No.");
                StrOrderDetails.SETRANGE("Document Line No.",0);
                IF StrOrderDetails.FIND('-') THEN
                  REPEAT
                    IF NOT StrOrderDetails.LCY THEN
                      CFactor := 1;
                    StrOrderLineDetails.RESET;
                    StrOrderLineDetails.SETRANGE(Type,StrOrderLineDetails.Type::Sale);
                    StrOrderLineDetails.SETRANGE("Calculation Order",StrOrderDetails."Calculation Order");
                    StrOrderLineDetails.SETRANGE("Document Type","Document Type");
                    StrOrderLineDetails.SETRANGE("Document No.","Document No.");
                    StrOrderLineDetails.SETRANGE("Structure Code",Structure);
                    StrOrderLineDetails.SETRANGE("Item No.","No.");
                    StrOrderLineDetails.SETRANGE("Line No.","Line No.");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
                    IF NOT StrOrderLineDetails.FINDFIRST THEN BEGIN
                      StrOrderLineDetails.INIT;
                      StrOrderLineDetails.Type := StrOrderDetails.Type;
                      StrOrderLineDetails."Document Type" := StrOrderDetails."Document Type";
                      StrOrderLineDetails."Document No." := StrOrderDetails."Document No.";
                      StrOrderLineDetails."Structure Code" := StrOrderDetails."Structure Code";
                      StrOrderLineDetails."Item No." := "No.";
                      StrOrderLineDetails."Line No." := "Line No.";
                      StrOrderLineDetails."Calculation Order" := StrOrderDetails."Calculation Order";
                      StrOrderLineDetails."Tax/Charge Type" := StrOrderDetails."Tax/Charge Type";
                      StrOrderLineDetails."Tax/Charge Group" := StrOrderDetails."Tax/Charge Group";
                      StrOrderLineDetails."Tax/Charge Code" := StrOrderDetails."Tax/Charge Code";
                      StrOrderLineDetails."Calculation Type" := StrOrderDetails."Calculation Type";
                      StrOrderLineDetails."Calculation Value" := StrOrderDetails."Calculation Value";
                      StrOrderLineDetails."Quantity Per" := StrOrderDetails."Quantity Per";
                      StrOrderLineDetails."Loading on Inventory" := StrOrderDetails."Loading on Inventory";
                      StrOrderLineDetails."% Loading on Inventory" := StrOrderDetails."% Loading on Inventory";
                      StrOrderLineDetails."Header/Line" := StrOrderDetails."Header/Line";
                      StrOrderLineDetails."Include Base" := StrOrderDetails."Include Base";
                      StrOrderLineDetails."Include Line Discount" := StrOrderDetails."Include Line Discount";
                      StrOrderLineDetails."Include Invoice Discount" := StrOrderDetails."Include Invoice Discount";
                      StrOrderLineDetails."Payable to Third Party" := StrOrderDetails."Payable to Third Party";
                      StrOrderLineDetails.LCY := StrOrderDetails.LCY;
                      StrOrderLineDetails."Available for VAT input" := StrOrderDetails."Available for VAT Input";
                      StrOrderLineDetails.CVD := StrOrderDetails.CVD;
                      IF StrOrderDetails."Payable to Third Party" THEN
                        StrOrderDetails.TESTFIELD("Third Party Code");
                      StrOrderLineDetails."Third Party Code" := StrOrderDetails."Third Party Code";
                      IF ((StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges) OR
                          (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Other Taxes"))
                      THEN
                        StrOrderDetails.TESTFIELD("Account No.");
                      StrOrderLineDetails."Account No." := StrOrderDetails."Account No.";
                      StrOrderLineDetails."Base Formula" := StrOrderDetails."Base Formula";
                      IF StrOrderLineDetails."Base Formula" <> '' THEN
                        BaseAmount := EvaluateExpressioninStructures(TRUE,StrOrderLineDetails."Base Formula",SalesLine,StrOrderDetails)
                      ELSE
                        BaseAmount := 0;

                      IF StrOrderDetails."Include Base" THEN
                        BaseAmount := BaseAmount + Quantity * "Unit Price";
                      IF StrOrderDetails."Include Line Discount" THEN
                        BaseAmount := BaseAmount - "Line Discount Amount";
                      IF StrOrderDetails."Include Invoice Discount" THEN
                        BaseAmount := BaseAmount - "Inv. Discount Amount";


                      IF (Type <> Type::"Charge (Item)") AND (Type <> Type::"G/L Account") THEN
                        IF ((StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges) OR
                            (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Other Taxes"))
                        THEN BEGIN
                          IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::"Fixed Value" THEN BEGIN
                            IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges THEN
                              StrOrderDetails.TESTFIELD("Charge Basis");
                            IF StrOrderDetails."Charge Basis" = StrOrderDetails."Charge Basis"::Amount THEN BEGIN
                              StrOrderLineDetails."Base Amount" := Quantity * "Unit Price";
                              StrOrderLineDetails.Amount :=
                                (StrOrderDetails."Calculation Value" * CFactor) * (Quantity * "Unit Price") / TotalAmount;
                            END;
                            IF StrOrderDetails."Charge Basis" = StrOrderDetails."Charge Basis"::Equally THEN BEGIN
                              StrOrderLineDetails."Base Amount" := 0;
                              StrOrderLineDetails.Amount := (StrOrderDetails."Calculation Value" * CFactor) / TotalLines;
                            END;
                          END;
                          IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::Percentage THEN BEGIN
                            StrOrderLineDetails."Base Amount" := BaseAmount;
                            StrOrderLineDetails.Amount := StrOrderDetails."Calculation Value" * BaseAmount / 100;
                          END;
                          IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::"Amount Per Qty" THEN BEGIN
                            StrOrderLineDetails."Base Amount" := 0;
                            StrOrderLineDetails.Amount :=
                              (StrOrderDetails."Calculation Value" * CFactor) * Quantity / StrOrderDetails."Quantity Per";
                          END;
                        END;
                      IF Type IN [Type::"Charge (Item)",Type::"G/L Account"] THEN
                        IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Excise THEN
                          IF Trading THEN BEGIN
                            IF ExecuteDetailRg23D THEN BEGIN
                              CVD := GetBaseAmount(BaseAmount,SalesLine);
                              "Amount Added to Excise Base" := BaseAmount;
                              UpdateTaxAmounts;
                              StrOrderLineDetails."Base Amount" := "Excise Base Amount";
                              StrOrderLineDetails.Amount := "Excise Amount";
                            END;
                          END ELSE BEGIN
                            "Amount Added to Excise Base" := BaseAmount;
                            CVD := StrOrderDetails.CVD;
                            IF CVD AND ("CIF Amount" + "BCD Amount" <> 0) THEN
                              "Amount Added to Excise Base" := ("CIF Amount" + "BCD Amount") * Quantity;
                            IF AssessableValueCalc AND (NOT CVD) THEN BEGIN
                              "Amount Added to Excise Base" := "Assessable Value" * Quantity;
                              "Excise Base Amount" := "Assessable Value" * Quantity;
                            END;
                            UpdateTaxAmounts;
                            StrOrderLineDetails."Base Amount" := "Excise Base Amount";
                            StrOrderLineDetails.Amount := "Excise Amount";
                          END;
                      IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::GST THEN BEGIN
                        "GST Base Amount" := BaseAmount;
                        ValidateGSTRegistration;
                        UpdateGSTAmounts("GST Base Amount");
                        StrOrderLineDetails."Base Amount" := "GST Base Amount";
                        StrOrderLineDetails.Amount :="Total GST Amount";
                      END;
                      IF Type IN [Type::Item,Type::"Fixed Asset"] THEN
                        IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Excise THEN
                          IF Trading THEN BEGIN
                            IF ExecuteDetailRg23D THEN BEGIN
                              CVD := GetBaseAmount(BaseAmount,SalesLine);
                              IF NOT MRP THEN
                                "Amount Added to Excise Base" := BaseAmount
                              ELSE
                                TESTFIELD(MRP,FALSE);
                              UpdateTaxAmounts;
                              StrOrderLineDetails."Base Amount" := "Excise Base Amount";
                              StrOrderLineDetails.Amount := "Excise Amount";
                            END;
                          END ELSE BEGIN
                            IF NOT MRP THEN
                              "Amount Added to Excise Base" := BaseAmount
                            ELSE BEGIN
                              IF StrOrderDetails.CVD THEN
                                TESTFIELD(MRP,FALSE);
                              "Amount Added to Excise Base" := CalcAmountAddedToExciseBase(SalesLine);
                            END;
                            CVD := StrOrderDetails.CVD;
                            IF CVD AND ("CIF Amount" + "BCD Amount" <> 0) THEN
                              "Amount Added to Excise Base" := ("CIF Amount" + "BCD Amount") * Quantity;
                            IF AssessableValueCalc AND (NOT CVD) AND (NOT MRP) THEN BEGIN
                              "Amount Added to Excise Base" := "Assessable Value" * Quantity;
                              "Excise Base Amount" := "Assessable Value" * Quantity;
                            END;
                            UpdateTaxAmounts;
                            StrOrderLineDetails."Base Amount" := "Excise Base Amount";
                            StrOrderLineDetails.Amount := "Excise Amount";
                          END;
                      IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Sales Tax" THEN BEGIN
                        "Amount Added to Tax Base" := ROUND(BaseAmount,Currency."Amount Rounding Precision");
                        UpdateTaxAmounts;
                        StrOrderLineDetails."Base Amount" := "Tax Base Amount";
                        StrOrderLineDetails.Amount := "Amount Including Tax" - "Tax Base Amount";
                      END;
                      IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Service Tax" THEN BEGIN
                        IF "Transaction No. Serv. Tax" <> 0 THEN
                          "Service Tax Base" := ROUND(BaseAmount)
                        ELSE
                          "Service Tax Base" := ROUND(BaseAmount,Currency."Amount Rounding Precision");
                        UpdateTaxAmounts;
                        StrOrderLineDetails."Base Amount" := "Service Tax Base";
                        StrOrderLineDetails.Amount := ROUND("Service Tax Amount" + "Service Tax eCess Amount" +
                            "Service Tax SHE Cess Amount" + "Service Tax SBC Amount" + "KK Cess Amount");
                      END;
                      IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::GST THEN BEGIN
                        "GST Base Amount" := BaseAmount;
                        ValidateGSTRegistration;
                        UpdateGSTAmounts("GST Base Amount");
                        StrOrderLineDetails."Base Amount" := "GST Base Amount";
                        StrOrderLineDetails.Amount := "Total GST Amount";
                      END;
                      IF "Free Supply" THEN BEGIN
                        IF ((StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges) OR
                            (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Other Taxes"))
                        THEN
                          StrOrderDetails.TESTFIELD("Third Party Code")
                      END;
                      IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Sales Tax" THEN
                        TESTFIELD("Free Supply",FALSE);

                      CFactor := OriginalCurrencyFactor;

                      IF "Currency Code" <> '' THEN
                        Currency.GET("Currency Code");

                      StrOrderLineDetails."Amount (LCY)" := StrOrderLineDetails.Amount / CFactor;
                      StrOrderLineDetails.INSERT;
                    END ELSE
                      IF StrOrderLineDetails."Manually Changed" THEN BEGIN
                        IF ((Type <> Type::"Charge (Item)") AND
                            (Type <> Type::"G/L Account"))
                        THEN
                          IF (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges) OR
                             (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Other Taxes")
                          THEN BEGIN
                            IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::"Fixed Value" THEN BEGIN
                              IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges THEN
                                StrOrderDetails.TESTFIELD("Charge Basis");
                              IF StrOrderDetails."Charge Basis" = StrOrderDetails."Charge Basis"::Amount THEN
                                StrOrderLineDetails.Amount := StrOrderLineDetails."Calculation Value" * CFactor;
                              IF StrOrderDetails."Charge Basis" = StrOrderDetails."Charge Basis"::Equally THEN BEGIN
                                StrOrderLineDetails."Base Amount" := 0;
                                StrOrderLineDetails.Amount := StrOrderLineDetails."Calculation Value" * CFactor;
                              END;
                            END;
                            IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::Percentage THEN BEGIN
                              StrOrderLineDetails."Base Amount" := BaseAmount;
                              StrOrderLineDetails.Amount := StrOrderDetails."Calculation Value" * BaseAmount / 100;
                            END;
                            IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::"Amount Per Qty" THEN BEGIN
                              StrOrderLineDetails."Base Amount" := 0;
                              StrOrderLineDetails.Amount := (StrOrderDetails."Calculation Value" * CFactor) * Quantity /
                                StrOrderDetails."Quantity Per";
                            END;

                            CFactor := OriginalCurrencyFactor;

                            StrOrderLineDetails."Amount (LCY)" := StrOrderLineDetails.Amount / CFactor;
                            StrOrderLineDetails.MODIFY;
                          END;
                      END;
                  UNTIL StrOrderDetails.NEXT = 0;
              END;
            END ELSE BEGIN
              SalesLine."Amount Added to Tax Base" := 0;
              SalesLine."Tax Base Amount" := 0;
              SalesLine."Tax Amount" := 0;
              SalesLine."GST Base Amount" := 0;
              SalesLine."Total GST Amount" := 0;
              SalesLine."GST %" := 0;
            END;
            SalesLine.MODIFY;
          UNTIL SalesLine.NEXT = 0;
          StrOrderLineDetails.RoundAmounts(
            SalesHeader."Document Type",SalesHeader."No.",CFactor,Currency."Amount Rounding Precision");
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateExciseAmount@1280014();
    VAR
      ExciseProdPostingGrp@1280001 : Record 13710;
      ItemUOM@1280000 : Record 5404;
      ExcisePostingSetup@1280002 : Record 13711;
    BEGIN
      GetSalesHeader;
      IF "Amount Added to Excise Base" <> 0 THEN BEGIN
        "Excise Base Amount" := "Amount Added to Excise Base";
        IF ExciseProdPostingGrp.GET("Excise Prod. Posting Group") THEN BEGIN
          IF ExciseProdPostingGrp."Unit of Measure Code" <> '' THEN BEGIN
            IF Type = Type::Item THEN BEGIN
              IF ItemUOM.GET("No.",ExciseProdPostingGrp."Unit of Measure Code") THEN BEGIN
                "Excise Base Quantity" := ROUND("Quantity (Base)" / ItemUOM."Qty. per Unit of Measure");
              END ELSE
                "Excise Base Quantity" := 0;
            END ELSE
              IF Type = Type::"Fixed Asset" THEN
                "Excise Base Quantity" := Quantity;
          END ELSE
            "Excise Base Quantity" := "Quantity (Base)";
        END;

        ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
        ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
        IF SalesHeader."Posting Date" <> 0D THEN
          ExcisePostingSetup.SETRANGE("From Date",0D,SalesHeader."Posting Date")
        ELSE
          ExcisePostingSetup.SETRANGE("From Date",0D,WORKDATE);
        IF ExcisePostingSetup.FINDLAST THEN BEGIN
          CASE ExcisePostingSetup."BED Calculation Type" OF
            ExcisePostingSetup."BED Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "BED Amount" := 0
                ELSE
                  IF ExcisePostingSetup."BED Calculation Formula" <> '' THEN
                    "BED Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."BED Calculation Formula",Rec) *
                      ExcisePostingSetup."BED %" / 100
                  ELSE
                    "BED Amount" := ExcisePostingSetup."BED %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."BED Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "BED Amount" := ExcisePostingSetup."BED Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."BED Calculation Type"::"% of Accessable Value":
              "BED Amount" := ExcisePostingSetup."BED %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."BED Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "BED Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "BED Amount" := (ExcisePostingSetup."BED %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."BED Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."BED Calculation Type"::"% of MRP":
              BEGIN
                IF Quantity = 0 THEN
                  "BED Amount" := 0
                ELSE
                  IF MRP THEN
                    "BED Amount" := (ExcisePostingSetup."BED %" * CalcAmountAddedToExciseBase(Rec) / 100)
                  ELSE
                    "BED Amount" := 0;
              END;
          END;
          CASE ExcisePostingSetup."SED Calculation Type" OF
            ExcisePostingSetup."SED Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "SED Amount" := 0
                ELSE
                  IF ExcisePostingSetup."SED Calculation Formula" <> '' THEN
                    "SED Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."SED Calculation Formula",Rec) *
                      ExcisePostingSetup."SED %" / 100
                  ELSE
                    IF ExcisePostingSetup."SED Calculation Formula" = '' THEN
                      "SED Amount" := ExcisePostingSetup."SED %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."SED Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "SED Amount" := ExcisePostingSetup."SED Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."SED Calculation Type"::"% of Accessable Value":
              "SED Amount" := ExcisePostingSetup."SED %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."SED Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "SED Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "SED Amount" := (ExcisePostingSetup."SED %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."SED Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."SED Calculation Type"::"% of MRP":
              BEGIN
                IF Quantity = 0 THEN
                  "SED Amount" := 0
                ELSE
                  IF MRP THEN
                    "SED Amount" := (ExcisePostingSetup."SED %" * CalcAmountAddedToExciseBase(Rec) / 100)
                  ELSE
                    "SED Amount" := 0;
              END;
          END;
          CASE ExcisePostingSetup."AED(GSI) Calculation Type" OF
            ExcisePostingSetup."AED(GSI) Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "AED(GSI) Amount" := 0
                ELSE
                  IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" <> '' THEN
                    "AED(GSI) Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."AED(GSI/TTA) Calc. Formula",Rec) *
                      ExcisePostingSetup."AED(GSI) %" / 100
                  ELSE
                    IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" = '' THEN
                      "AED(GSI) Amount" := ExcisePostingSetup."AED(GSI) %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."AED(GSI) Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "AED(GSI) Amount" := ExcisePostingSetup."AED(GSI) Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."AED(GSI) Calculation Type"::"% of Accessable Value":
              "AED(GSI) Amount" := ExcisePostingSetup."AED(GSI) %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."AED(GSI) Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "AED(GSI) Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "AED(GSI) Amount" := (ExcisePostingSetup."AED(GSI) %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."AED(GSI) Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."AED(GSI) Calculation Type"::"% of MRP":
              BEGIN
                IF Quantity = 0 THEN
                  "AED(GSI) Amount" := 0
                ELSE
                  IF MRP THEN
                    "AED(GSI) Amount" :=
                      (ExcisePostingSetup."AED(GSI) %" * CalcAmountAddedToExciseBase(Rec) / 100)
                  ELSE
                    "AED(GSI) Amount" := 0;
              END;
          END;
          CASE ExcisePostingSetup."NCCD Calculation Type" OF
            ExcisePostingSetup."NCCD Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "NCCD Amount" := 0
                ELSE
                  IF ExcisePostingSetup."NCCD Calculation Formula" <> '' THEN
                    "NCCD Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."NCCD Calculation Formula",Rec) *
                      ExcisePostingSetup."NCCD %" / 100
                  ELSE
                    IF ExcisePostingSetup."NCCD Calculation Formula" = '' THEN
                      "NCCD Amount" := ExcisePostingSetup."NCCD %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."NCCD Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "NCCD Amount" := ExcisePostingSetup."NCCD Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."NCCD Calculation Type"::"% of Accessable Value":
              "NCCD Amount" := ExcisePostingSetup."NCCD %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."NCCD Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "NCCD Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "NCCD Amount" := (ExcisePostingSetup."NCCD %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."NCCD Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."NCCD Calculation Type"::"% of MRP":
              BEGIN
                IF Quantity = 0 THEN
                  "NCCD Amount" := 0
                ELSE
                  IF MRP THEN
                    "NCCD Amount" := (ExcisePostingSetup."NCCD %" * CalcAmountAddedToExciseBase(Rec) / 100)
                  ELSE
                    "NCCD Amount" := 0;
              END;
          END;
          CASE ExcisePostingSetup."AED(TTA) Calculation Type" OF
            ExcisePostingSetup."AED(TTA) Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "AED(TTA) Amount" := 0
                ELSE
                  IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" <> '' THEN
                    "AED(TTA) Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."AED(GSI/TTA) Calc. Formula",Rec) *
                      ExcisePostingSetup."AED(TTA) %" / 100
                  ELSE
                    IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" = '' THEN
                      "AED(TTA) Amount" := ExcisePostingSetup."AED(TTA) %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."AED(TTA) Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "AED(TTA) Amount" := ExcisePostingSetup."AED(TTA) Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."AED(TTA) Calculation Type"::"% of Accessable Value":
              "AED(TTA) Amount" := ExcisePostingSetup."AED(TTA) %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."AED(TTA) Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "AED(TTA) Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "AED(TTA) Amount" := (ExcisePostingSetup."AED(TTA) %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."AED(TTA) Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."AED(TTA) Calculation Type"::"% of MRP":
              BEGIN
                IF Quantity = 0 THEN
                  "AED(TTA) Amount" := 0
                ELSE
                  IF MRP THEN
                    "AED(TTA) Amount" :=
                      (ExcisePostingSetup."AED(TTA) %" * CalcAmountAddedToExciseBase(Rec) / 100)
                  ELSE
                    "AED(TTA) Amount" := 0;
              END;
          END;
          CASE ExcisePostingSetup."SAED Calculation Type" OF
            ExcisePostingSetup."SAED Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "SAED Amount" := 0
                ELSE
                  IF ExcisePostingSetup."SAED Calculation Formula" <> '' THEN
                    "SAED Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."SAED Calculation Formula",Rec)
                      * ExcisePostingSetup."SAED %" / 100
                  ELSE
                    IF ExcisePostingSetup."SED Calculation Formula" = '' THEN
                      "SAED Amount" := ExcisePostingSetup."SAED %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."SAED Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "SAED Amount" := ExcisePostingSetup."SAED Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."SAED Calculation Type"::"% of Accessable Value":
              "SAED Amount" := ExcisePostingSetup."SAED %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."SAED Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "SAED Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "SAED Amount" := (ExcisePostingSetup."SAED %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."SAED Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."SAED Calculation Type"::"% of MRP":
              BEGIN
                IF Quantity = 0 THEN
                  "SAED Amount" := 0
                ELSE
                  IF MRP THEN
                    "SAED Amount" := (ExcisePostingSetup."SAED %" * CalcAmountAddedToExciseBase(Rec) / 100)
                  ELSE
                    "SAED Amount" := 0;
              END;
          END;
          CASE ExcisePostingSetup."ADE Calculation Type" OF
            ExcisePostingSetup."ADE Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "ADE Amount" := 0
                ELSE
                  IF ExcisePostingSetup."ADE Calculation Formula" <> '' THEN
                    "ADE Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."ADE Calculation Formula",Rec) *
                      ExcisePostingSetup."ADE %" / 100
                  ELSE
                    IF ExcisePostingSetup."ADE Calculation Formula" = '' THEN
                      "ADE Amount" := ExcisePostingSetup."ADE %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."ADE Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "ADE Amount" := ExcisePostingSetup."ADE Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."ADE Calculation Type"::"% of Accessable Value":
              "ADE Amount" := ExcisePostingSetup."ADE %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."ADE Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "ADE Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "ADE Amount" := (ExcisePostingSetup."ADE %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."ADE Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."ADE Calculation Type"::"% of MRP":
              BEGIN
                IF Quantity = 0 THEN
                  "ADE Amount" := 0
                ELSE
                  IF MRP THEN
                    "ADE Amount" := (ExcisePostingSetup."ADE %" * CalcAmountAddedToExciseBase(Rec) / 100)
                  ELSE
                    "ADE Amount" := 0;
              END;
          END;
          CASE ExcisePostingSetup."ADET Calculation Type" OF
            ExcisePostingSetup."ADET Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "ADET Amount" := 0
                ELSE
                  IF ExcisePostingSetup."ADET Calculation Formula" <> '' THEN
                    "ADET Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."ADET Calculation Formula",Rec) *
                      ExcisePostingSetup."ADET %" / 100
                  ELSE
                    IF ExcisePostingSetup."ADET Calculation Formula" = '' THEN
                      "ADET Amount" := ExcisePostingSetup."ADET %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."ADET Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "ADET Amount" := ExcisePostingSetup."ADET Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."ADET Calculation Type"::"% of Accessable Value":
              "ADET Amount" := ExcisePostingSetup."ADET %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."ADET Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "ADET Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "ADET Amount" := (ExcisePostingSetup."ADET %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."ADET Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."ADET Calculation Type"::"% of MRP":
              BEGIN
                IF Quantity = 0 THEN
                  "ADET Amount" := 0
                ELSE
                  IF MRP THEN
                    "ADET Amount" := (ExcisePostingSetup."ADET %" * CalcAmountAddedToExciseBase(Rec) / 100)
                  ELSE
                    "ADET Amount" := 0;
              END;
          END;
          CASE ExcisePostingSetup."CESS Calculation Type" OF
            ExcisePostingSetup."CESS Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "CESS Amount" := 0
                ELSE
                  IF ExcisePostingSetup."CESS Calculation Formula" <> '' THEN
                    "CESS Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."CESS Calculation Formula",Rec) *
                      ExcisePostingSetup."CESS %" / 100
                  ELSE
                    IF ExcisePostingSetup."CESS Calculation Formula" = '' THEN
                      "CESS Amount" := ExcisePostingSetup."CESS %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."CESS Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "CESS Amount" := ExcisePostingSetup."CESS Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."CESS Calculation Type"::"% of Accessable Value":
              "CESS Amount" := ExcisePostingSetup."CESS %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."CESS Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "CESS Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "CESS Amount" := (ExcisePostingSetup."CESS %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."CESS Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."CESS Calculation Type"::"% of MRP":
              BEGIN
                IF Quantity = 0 THEN
                  "CESS Amount" := 0
                ELSE
                  IF MRP THEN
                    "CESS Amount" := (ExcisePostingSetup."CESS %" * CalcAmountAddedToExciseBase(Rec) / 100)
                  ELSE
                    "CESS Amount" := 0;
              END;
          END;
          CASE ExcisePostingSetup."eCess Calculation Type" OF
            ExcisePostingSetup."eCess Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "eCess Amount" := 0
                ELSE
                  IF ExcisePostingSetup."eCess Calculation Formula" <> '' THEN
                    "eCess Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."eCess Calculation Formula",Rec) *
                      ExcisePostingSetup."eCess %" / 100
                  ELSE
                    IF ExcisePostingSetup."eCess Calculation Formula" = '' THEN
                      "eCess Amount" := ExcisePostingSetup."eCess %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."eCess Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "eCess Amount" := ExcisePostingSetup."eCess Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."eCess Calculation Type"::"% of Accessable Value":
              "eCess Amount" := ExcisePostingSetup."eCess %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."eCess Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "eCess Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "eCess Amount" := (ExcisePostingSetup."eCess %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."eCess Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."eCess Calculation Type"::"% of MRP":
              BEGIN
                IF Quantity = 0 THEN
                  "eCess Amount" := 0
                ELSE
                  IF MRP THEN
                    "eCess Amount" :=
                      (ExcisePostingSetup."eCess %" * CalcAmountAddedToExciseBase(Rec) / 100)
                  ELSE
                    "eCess Amount" := 0;
              END;
          END;
          CASE ExcisePostingSetup."SHE Cess Calculation Type" OF
            ExcisePostingSetup."SHE Cess Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "SHE Cess Amount" := 0
                ELSE
                  IF ExcisePostingSetup."SHE Cess Calculation Formula" <> '' THEN
                    "SHE Cess Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."SHE Cess Calculation Formula",Rec) *
                      ExcisePostingSetup."SHE Cess %" / 100
                  ELSE
                    IF ExcisePostingSetup."SHE Cess Calculation Formula" = '' THEN
                      "SHE Cess Amount" := ExcisePostingSetup."SHE Cess %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."SHE Cess Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "SHE Cess Amount" := ExcisePostingSetup."SHE Cess Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."SHE Cess Calculation Type"::"% of Accessable Value":
              "SHE Cess Amount" := ExcisePostingSetup."SHE Cess %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."SHE Cess Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "SHE Cess Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "SHE Cess Amount" := (ExcisePostingSetup."SHE Cess %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."SHE Cess Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."SHE Cess Calculation Type"::"% of MRP":
              BEGIN
                IF Quantity = 0 THEN
                  "SHE Cess Amount" := 0
                ELSE
                  IF MRP THEN
                    "SHE Cess Amount" :=
                      (ExcisePostingSetup."SHE Cess %" * CalcAmountAddedToExciseBase(Rec) / 100)
                  ELSE
                    "SHE Cess Amount" := 0;
              END;
          END;
          IF CVD THEN BEGIN
            CASE ExcisePostingSetup."Custom eCess Calculation Type" OF
              ExcisePostingSetup."Custom eCess Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN
                    "Custom eCess Amount" := 0
                  ELSE
                    IF ExcisePostingSetup."Custom eCess Calc. Formula" <> '' THEN
                      "Custom eCess Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."Custom eCess Calc. Formula",Rec) *
                        ExcisePostingSetup."Custom eCess %" / 100
                    ELSE
                      IF ExcisePostingSetup."Custom eCess Calc. Formula" = '' THEN
                        "Custom eCess Amount" := ExcisePostingSetup."Custom eCess %" * "Excise Base Amount" / 100;
                END;
              ExcisePostingSetup."Custom eCess Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "Custom eCess Amount" := ExcisePostingSetup."Custom eCess Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."Custom eCess Calculation Type"::"% of Accessable Value":
                "Custom eCess Amount" := ExcisePostingSetup."Custom eCess %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."Custom eCess Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN
                    "Custom eCess Amount" := 0
                  ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    "Custom eCess Amount" := (ExcisePostingSetup."Custom eCess %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."Custom eCess Amount Per Unit" * "Excise Base Quantity");
                  END;
                END;
            END;

            CASE ExcisePostingSetup."Custom SHECess Calc. Type" OF
              ExcisePostingSetup."Custom SHECess Calc. Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN
                    "Custom SHECess Amount" := 0
                  ELSE
                    IF ExcisePostingSetup."Custom SHECess Calc. Formula" <> '' THEN
                      "Custom SHECess Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."Custom SHECess Calc. Formula",Rec) *
                        ExcisePostingSetup."Custom SHECess %" / 100
                    ELSE
                      IF ExcisePostingSetup."Custom SHECess Calc. Formula" = '' THEN
                        "Custom SHECess Amount" := ExcisePostingSetup."Custom SHECess %" * "Excise Base Amount" / 100;
                END;
              ExcisePostingSetup."Custom SHECess Calc. Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "Custom SHECess Amount" := ExcisePostingSetup."Custom SHECess Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."Custom SHECess Calc. Type"::"% of Accessable Value":
                "Custom SHECess Amount" := ExcisePostingSetup."Custom SHECess %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."Custom SHECess Calc. Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN
                    "Custom SHECess Amount" := 0
                  ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    "Custom SHECess Amount" := (ExcisePostingSetup."Custom SHECess %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."Custom SHECess Amount Per Unit" * "Excise Base Quantity");
                  END;
                END;
            END;

            CASE ExcisePostingSetup."ADC VAT Calculation Type" OF
              ExcisePostingSetup."ADC VAT Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN
                    "ADC VAT Amount" := 0
                  ELSE
                    IF ExcisePostingSetup."ADC VAT Calculation Formula" <> '' THEN
                      "ADC VAT Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."ADC VAT Calculation Formula",Rec) *
                        ExcisePostingSetup."ADC VAT %" / 100
                    ELSE
                      IF ExcisePostingSetup."ADC VAT Calculation Formula" = '' THEN
                        "ADC VAT Amount" := ExcisePostingSetup."ADC VAT %" * "Excise Base Amount" / 100;
                END;
              ExcisePostingSetup."ADC VAT Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "ADC VAT Amount" := ExcisePostingSetup."ADC VAT Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."ADC VAT Calculation Type"::"% of Accessable Value":
                "ADC VAT Amount" := ExcisePostingSetup."ADC VAT %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."ADC VAT Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN
                    "ADC VAT Amount" := 0
                  ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    "ADC VAT Amount" := (ExcisePostingSetup."ADC VAT %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."ADC VAT Amount Per Unit" * "Excise Base Quantity");
                  END;
                END;
              ExcisePostingSetup."ADC VAT Calculation Type"::"% of MRP":
                BEGIN
                  IF Quantity = 0 THEN
                    "ADC VAT Amount" := 0
                  ELSE
                    IF MRP THEN
                      "ADC VAT Amount" :=
                        (ExcisePostingSetup."ADC VAT %" * CalcAmountAddedToExciseBase(Rec) / 100)
                    ELSE
                      "ADC VAT Amount" := 0;
                END;
            END;
          END ELSE
            "ADC VAT Amount" := 0;
        END ELSE
          InitExciseAmount;
      END ELSE
        InitExciseAmount;

      // Calculate Excise Effective %
      "Excise Amount" := "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
        "eCess Amount" + "ADET Amount" + "AED(TTA) Amount" + "ADE Amount" + "SHE Cess Amount";

      ExcisePostingSetup.RESET;
      ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
      ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
      IF ExcisePostingSetup.FINDLAST THEN
        WITH ExcisePostingSetup DO BEGIN
          IF ("BED %" <> 0) AND ("BED Calculation Type" = "BED Calculation Type"::"% of Accessable Value") THEN BEGIN
            IF ("Assessable Value" <> 0) AND (Quantity <> 0) THEN
              "Excise Effective Rate" := "Excise Amount" / ("Assessable Value" * Quantity) * 100;
          END
          ELSE
            IF ("BED %" <> 0) AND (("BED Calculation Type" = "BED Calculation Type"::"% of MRP") OR
                                   ("BED Calculation Type" = "BED Calculation Type"::"Excise %"))
            THEN BEGIN
              IF "Excise Base Amount" <> 0 THEN
                "Excise Effective Rate" := "Excise Amount" / "Excise Base Amount" * 100;
            END;
          IF ("BED %" <> 0) AND ("BED Calculation Type" = "BED Calculation Type"::"Excise %") AND (NOT CVD) AND
             ("BED Calculation Formula" = Text13708)
          THEN
            "Excise Effective Rate" := 0;
        END;

      IF "Price Inclusive of Tax" AND ("Currency Code" = '') THEN BEGIN
        "BED Amount" := RoundExciseAmt("BED Amount");
        "AED(GSI) Amount" := RoundExciseAmt("AED(GSI) Amount");
        "AED(TTA) Amount" := RoundExciseAmt("AED(TTA) Amount");
        "SED Amount" := RoundExciseAmt("SED Amount");
        "SAED Amount" := RoundExciseAmt("SAED Amount");
        "CESS Amount" := RoundExciseAmt("CESS Amount");
        "NCCD Amount" := RoundExciseAmt("NCCD Amount");
        "eCess Amount" := RoundExciseAmt("eCess Amount");
        "SHE Cess Amount" := RoundExciseAmt("SHE Cess Amount");
        "ADET Amount" := RoundExciseAmt("ADET Amount");
        "ADE Amount" := RoundExciseAmt("ADE Amount");
        "ADC VAT Amount" := RoundExciseAmt("ADC VAT Amount");
      END ELSE
        IF "Price Inclusive of Tax" AND ("Currency Code" <> '') THEN BEGIN
          "BED Amount" := ROUND("BED Amount");
          "AED(GSI) Amount" := ROUND("AED(GSI) Amount");
          "AED(TTA) Amount" := ROUND("AED(TTA) Amount");
          "SED Amount" := ROUND("SED Amount");
          "SAED Amount" := ROUND("SAED Amount");
          "CESS Amount" := ROUND("CESS Amount");
          "NCCD Amount" := ROUND("NCCD Amount");
          "eCess Amount" := ROUND("eCess Amount");
          "SHE Cess Amount" := ROUND("SHE Cess Amount");
          "ADET Amount" := ROUND("ADET Amount");
          "ADE Amount" := ROUND("ADE Amount");
          "ADC VAT Amount" := ROUND("ADC VAT Amount");
        END;

      "Excise Amount" := "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
        "eCess Amount" + "ADET Amount" + "AED(TTA) Amount" + "ADE Amount" + "ADC VAT Amount" + "SHE Cess Amount";
      "Amount Including Excise" := "Excise Base Amount" + "Excise Amount";

      IF SalesHeader.Trading THEN BEGIN
        "BED Amount" := BEDAmt;
        "AED(GSI) Amount" := "AED(GSI)Amt";
        "AED(TTA) Amount" := "AED(TTA)Amt";
        "SED Amount" := SEDAmt;
        "SAED Amount" := SAEDAmt;
        "CESS Amount" := CESSAmt;
        "NCCD Amount" := NCCDAmt;
        "eCess Amount" := eCessAmt;
        "SHE Cess Amount" := SHECessAmt;
        "ADET Amount" := ADETAmt;
        "ADE Amount" := ADEAmt;
        "ADC VAT Amount" := ADCVATAmt;

        "Excise Amount" := "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "NCCD Amount" +
          "eCess Amount" + "ADET Amount" + "AED(TTA) Amount" + "ADE Amount" + "ADC VAT Amount" + "SHE Cess Amount";
        IF NOT ExcisePostingSetup."Setoff available" THEN
          "Excise Amount" := "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "NCCD Amount" +
            "ADET Amount" + "AED(TTA) Amount" + "ADE Amount" + "ADC VAT Amount";
        "Amount Including Excise" := "Excise Base Amount" + "Excise Amount";
      END;
      UpdateSalesLineBuffer;
    END;

    LOCAL PROCEDURE InitExciseAmount@1280003();
    BEGIN
      IF CheckManualChangedLines THEN
        EXIT;

      "Excise Amount" := 0;
      "BED Amount" := 0;
      "AED(GSI) Amount" := 0;
      "AED(TTA) Amount" := 0;
      "SED Amount" := 0;
      "SAED Amount" := 0;
      "CESS Amount" := 0;
      "NCCD Amount" := 0;
      "eCess Amount" := 0;
      "ADET Amount" := 0;
      "ADE Amount" := 0;
      "SHE Cess Amount" := 0;
      "Custom eCess Amount" := 0;
      "Custom SHECess Amount" := 0;
      "ADC VAT Amount" := 0;
    END;

    LOCAL PROCEDURE EvaluateExpression@1280004(IsTestExpression@1280016 : Boolean;Expression@1280000 : Code[250];SalesLine@1280001 : Record 37) : Decimal;
    VAR
      SalesLine1@1280002 : Record 37;
      Result@1280003 : Decimal;
      CallLevel@1280004 : Integer;
      Parantheses@1280005 : Integer;
      IsExpression@1280006 : Boolean;
      Operators@1280007 : Text[8];
      OperatorNo@1280008 : Integer;
      IsFilter@1280009 : Boolean;
      i@1280010 : Integer;
      RightResult@1280011 : Decimal;
      LeftResult@1280012 : Decimal;
      RightOperand@1280013 : Text[250];
      LeftOperand@1280014 : Text[250];
      Operator@1280015 : Char;
      DivisionError@1280018 : Boolean;
    BEGIN
      Result := 0;
      CallLevel := CallLevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);

      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpression(IsTestExpression,LeftOperand,SalesLine);
          RightResult := EvaluateExpression(IsTestExpression,RightOperand,SalesLine);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpression(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),SalesLine1)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF NOT IsFilter THEN BEGIN
              IF Expression = Text13700 THEN
                Result := Result + SalesLine."BED Amount"
              ELSE
                IF Expression = Text13701 THEN
                  Result := Result + SalesLine."AED(GSI) Amount" + SalesLine."AED(TTA) Amount"
                ELSE
                  IF Expression = Text13702 THEN
                    Result := Result + SalesLine."SED Amount"
                  ELSE
                    IF Expression = Text13703 THEN
                      Result := Result + SalesLine."SAED Amount"
                    ELSE
                      IF Expression = Text13704 THEN
                        Result := Result + SalesLine."CESS Amount"
                      ELSE
                        IF Expression = Text13705 THEN
                          Result := Result + SalesLine."NCCD Amount"
                        ELSE
                          IF Expression = Text13706 THEN
                            Result := Result + SalesLine."eCess Amount"
                          ELSE
                            IF Expression = Text13707 THEN
                              Result := Result + SalesLine."ADET Amount"
                            ELSE
                              IF Expression = Text13708 THEN
                                Result := Result + SalesLine."Line Amount"
                              ELSE
                                IF Expression = Text13709 THEN
                                  Result := Result + SalesLine."ADE Amount"
                                ELSE
                                  IF Expression = Text13710 THEN
                                    Result := Result + SalesLine."SHE Cess Amount"
                                  ELSE
                                    IF Expression = Text16501 THEN
                                      Result := Result + SalesLine."ADC VAT Amount"
                                    ELSE
                                      IF Expression = Text16502 THEN
                                        Result := Result + SalesLine."BCD Amount" * SalesLine.Quantity
                                      ELSE
                                        IF Expression = Text16503 THEN
                                          Result := Result + SalesLine."CIF Amount" * SalesLine.Quantity
                                        ELSE
                                          IF Expression = Text16507 THEN
                                            Result := Result + SalesLine."Custom eCess Amount"
                                          ELSE
                                            IF Expression = Text16506 THEN
                                              Result := Result + SalesLine."Custom SHECess Amount"
                                            ELSE
                                              IF Expression = Text13711 THEN
                                                Result := Result + SalesLine."Assessable Value" * SalesLine.Quantity;
            END;
          END;
      END;
      CallLevel := CallLevel - 1;
      EXIT(Result);
    END;

    LOCAL PROCEDURE EvaluateExpressioninStructures@1280002(IsTestExpression@1280016 : Boolean;Expression@1280000 : Code[250];SalesLine@1280001 : Record 37;VAR StructureOrderDetails@1280019 : Record 13794) : Decimal;
    VAR
      StrOrderLineDetails2@1280002 : Record 13795;
      StructureOrderDetails1@1280021 : Record 13794;
      Result@1280003 : Decimal;
      CallLevel@1280004 : Integer;
      Parantheses@1280005 : Integer;
      IsExpression@1280006 : Boolean;
      Operators@1280007 : Text[8];
      OperatorNo@1280008 : Integer;
      IsFilter@1280009 : Boolean;
      i@1280010 : Integer;
      RightResult@1280011 : Decimal;
      LeftResult@1280012 : Decimal;
      RightOperand@1280013 : Text[250];
      LeftOperand@1280014 : Text[250];
      Operator@1280015 : Char;
      DivisionError@1280018 : Boolean;
      Exp@1280020 : Integer;
    BEGIN
      Result := 0;
      CallLevel := CallLevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpressioninStructures(IsTestExpression,LeftOperand,SalesLine,StructureOrderDetails);
          RightResult := EvaluateExpressioninStructures(IsTestExpression,RightOperand,SalesLine,StructureOrderDetails);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpressioninStructures(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),SalesLine,
                StructureOrderDetails)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 10) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsTestExpression THEN BEGIN
                EVALUATE(Exp,Expression);
                StructureOrderDetails1.SETRANGE(Type,StructureOrderDetails1.Type::Sale);
                StructureOrderDetails1.SETRANGE("Document Type",StructureOrderDetails."Document Type");
                StructureOrderDetails1.SETRANGE("Document No.",StructureOrderDetails."Document No.");
                StructureOrderDetails1.SETRANGE("Structure Code",StructureOrderDetails."Structure Code");
                StructureOrderDetails1.SETRANGE("Calculation Order",Exp);
                IF StructureOrderDetails1.FINDFIRST THEN BEGIN
                  StrOrderLineDetails2.RESET;
                  StrOrderLineDetails2.SETCURRENTKEY("Document Type","Document No.",Type);
                  StrOrderLineDetails2.SETRANGE("Document Type",StructureOrderDetails1."Document Type");
                  StrOrderLineDetails2.SETRANGE("Document No.",StructureOrderDetails1."Document No.");
                  StrOrderLineDetails2.SETRANGE("Item No.",SalesLine."No.");
                  StrOrderLineDetails2.SETRANGE("Line No.",SalesLine."Line No.");
                  StrOrderLineDetails2.SETRANGE("Structure Code",StructureOrderDetails1."Structure Code");
                  StrOrderLineDetails2.SETRANGE("Tax/Charge Code",StructureOrderDetails1."Tax/Charge Code");
                  EVALUATE(Exp,Expression);
                  StrOrderLineDetails2.SETRANGE("Calculation Order",Exp);
                  IF StrOrderLineDetails2.FINDFIRST THEN
                    Result := Result + StrOrderLineDetails2.Amount;
                END ELSE
                  EVALUATE(Result,Expression);
              END;
          END;
      END;
      CallLevel := CallLevel - 1;
      EXIT(Result);
    END;

    PROCEDURE AdjustStructureAmounts@1280006(VAR SalesHeader@1280004 : Record 36);
    VAR
      SalesLine@1280005 : Record 37;
      StrOrderDetails@1280000 : Record 13794;
      StrOrderLineDetails@1280001 : Record 13795;
      StrOrderLines@1280008 : Record 13795;
      CFactor@1280007 : Decimal;
      StructureAmount@1280009 : Decimal;
      DiffAmount@1280010 : Decimal;
      Adjusted@1500000 : Boolean;
    BEGIN
      WITH SalesHeader DO BEGIN
        StrOrderDetails.RESET;
        StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
        StrOrderDetails.SETRANGE("Document Type","Document Type");
        StrOrderDetails.SETRANGE("Document No.","No.");
        StrOrderDetails.SETRANGE("Structure Code",Structure);
        StrOrderDetails.SETFILTER(
          "Tax/Charge Type",
          '%1|%2',
          StrOrderDetails."Tax/Charge Type"::Charges,
          StrOrderDetails."Tax/Charge Type"::"Other Taxes");
        StrOrderDetails.SETRANGE("Calculation Type",StrOrderDetails."Calculation Type"::"Fixed Value");
        StrOrderDetails.SETRANGE("Price Inclusive of Tax",FALSE);
        IF StrOrderDetails.FIND('-') THEN
          REPEAT
            CLEAR(StructureAmount);
            StrOrderLines.RESET;
            StrOrderLines.SETCURRENTKEY(
              "Document Type","Document No.","Calculation Order",Type,"Structure Code","Tax/Charge Type","Tax/Charge Group",
              "Tax/Charge Code","Calculation Type");

            StrOrderLines.SETRANGE("Document Type","Document Type");
            StrOrderLines.SETRANGE("Document No.","No.");
            StrOrderLines.SETRANGE(Type,StrOrderLineDetails.Type::Sale);
            StrOrderLines.SETRANGE("Structure Code",Structure);
            StrOrderLines.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
            StrOrderLines.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
            StrOrderLines.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
            StrOrderLines.SETRANGE("Calculation Type",StrOrderDetails."Calculation Type");
            StrOrderLines.SETRANGE("Price Inclusive of Tax",FALSE);
            IF StrOrderLines.FIND('-') THEN
              REPEAT
                StructureAmount := StructureAmount + StrOrderLines.Amount;
              UNTIL StrOrderLines.NEXT = 0;

            IF "Currency Factor" <> 0 THEN
              CFactor := "Currency Factor"
            ELSE
              CFactor := 1;

            IF NOT StrOrderDetails.LCY THEN
              CFactor := 1;

            Adjusted := FALSE;
            IF StrOrderDetails."Calculation Value" <> StructureAmount THEN BEGIN
              DiffAmount := (StrOrderDetails."Calculation Value" * CFactor) - StructureAmount;
              StrOrderLines.RESET;
              StrOrderLines.SETCURRENTKEY(
                "Document Type","Document No.","Calculation Order",Type,"Structure Code","Tax/Charge Type","Tax/Charge Group",
                "Tax/Charge Code","Calculation Type");

              StrOrderLines.SETRANGE(Type,StrOrderLineDetails.Type::Sale);
              StrOrderLines.SETRANGE("Document Type","Document Type");
              StrOrderLines.SETRANGE("Document No.","No.");
              StrOrderLines.SETRANGE("Structure Code",Structure);
              StrOrderLines.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
              StrOrderLines.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
              StrOrderLines.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
              StrOrderLines.SETRANGE("Calculation Type",StrOrderDetails."Calculation Type");
              StrOrderLines.SETRANGE("Price Inclusive of Tax",FALSE);
              IF StrOrderLines.FIND('-') THEN
                // IF GLAcc.GET(StrOrderLines."Item No.") THEN
                // EXIT;
                // StrOrderLines.Amount := StrOrderLines.Amount + DiffAmount;
                // StrOrderLines."Amount (LCY)" := StrOrderLines."Amount (LCY)" + DiffAmount/CFactor;
                // StrOrderLines.MODIFY;
                REPEAT
                  IF SalesLine.GET(StrOrderLines."Document Type",StrOrderLines."Document No.",StrOrderLines."Line No.") THEN BEGIN
                    IF SalesLine.Type <> SalesLine.Type::"G/L Account" THEN BEGIN
                      IF (StrOrderDetails."Calculation Value" <> 0) AND (NOT StrOrderLines."Manually Changed") THEN BEGIN
                        StrOrderLines.Amount := ROUND(StrOrderLines.Amount + DiffAmount);
                        StrOrderLines."Amount (LCY)" := ROUND(StrOrderLines."Amount (LCY)" + DiffAmount / CFactor);
                        StrOrderLines.MODIFY;
                        Adjusted := TRUE;
                      END;
                    END;
                  END;
                UNTIL (StrOrderLines.NEXT = 0) OR Adjusted;
            END;
          UNTIL StrOrderDetails.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateSalesLines@1280008(VAR SalesHeader@1280004 : Record 36);
    VAR
      SalesLine@1280005 : Record 37;
      StrOrderDetails@1280000 : Record 13794;
      StrOrderLineDetails@1280001 : Record 13795;
      Currency@1280009 : Record 4;
      ChargesToCustomer@1280010 : Decimal;
    BEGIN
      WITH SalesHeader DO BEGIN
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE
          Currency.GET("Currency Code");

        SalesLine.LOCKTABLE;
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETFILTER(Type,'%1|%2|%3|%4|%5',SalesLine.Type::Item,SalesLine.Type::"G/L Account",SalesLine.Type::"Fixed Asset",
          SalesLine.Type::Resource,SalesLine.Type::"Charge (Item)");
        SalesLine.SETRANGE("Price Inclusive of Tax",FALSE);
        IF SalesLine.FIND('-') THEN
          REPEAT
            IF SalesLine.Quantity <> 0 THEN
              WITH SalesLine DO BEGIN
                ChargesToCustomer := 0;
                StrOrderDetails.RESET;
                StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                StrOrderDetails.SETRANGE("Document Type","Document Type");
                StrOrderDetails.SETRANGE("Document No.","Document No.");
                StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Sale);
                StrOrderDetails.SETRANGE("Price Inclusive of Tax","Price Inclusive of Tax");
                StrOrderDetails.SETRANGE("Document Line No.",0);
                IF StrOrderDetails.FIND('-') THEN
                  REPEAT
                    StrOrderLineDetails.RESET;
                    StrOrderLineDetails.SETRANGE(Type,StrOrderLineDetails.Type::Sale);
                    StrOrderLineDetails.SETRANGE("Calculation Order",StrOrderDetails."Calculation Order");
                    StrOrderLineDetails.SETRANGE("Document Type","Document Type");
                    StrOrderLineDetails.SETRANGE("Document No.","Document No.");
                    StrOrderLineDetails.SETRANGE("Structure Code",Structure);
                    StrOrderLineDetails.SETRANGE("Item No.","No.");
                    StrOrderLineDetails.SETRANGE("Line No.","Line No.");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
                    StrOrderLineDetails.SETRANGE("Price Inclusive of Tax","Price Inclusive of Tax");
                    IF StrOrderLineDetails.FIND('-') THEN
                      REPEAT
                        IF NOT StrOrderDetails."Payable to Third Party" THEN
                          IF NOT (StrOrderDetails."Tax/Charge Type" IN [StrOrderDetails."Tax/Charge Type"::"Sales Tax",
                                                                        StrOrderDetails."Tax/Charge Type"::Excise,
                                                                        StrOrderDetails."Tax/Charge Type"::"Service Tax",
                                                                        StrOrderDetails."Tax/Charge Type"::GST])
                          THEN
                            ChargesToCustomer :=
                              ChargesToCustomer + ROUND(StrOrderLineDetails.Amount,Currency."Amount Rounding Precision");
                      UNTIL StrOrderLineDetails.NEXT = 0;
                  UNTIL StrOrderDetails.NEXT = 0;
                "Charges To Customer" := ChargesToCustomer;
                IF "TCS Nature of Collection" = '' THEN
                  "Amount To Customer" := "Line Amount" - "Inv. Discount Amount" + "Excise Amount" + "Tax Amount" + "Total GST Amount" +
                    "Charges To Customer" - "Bal. TDS/TCS Including SHECESS" +
                    "Service Tax Amount" + "Service Tax eCess Amount" + "Service Tax SHE Cess Amount" +
                    "Service Tax SBC Amount" + "KK Cess Amount"
                ELSE
                  "Amount To Customer" :=
                    "Line Amount" - "Inv. Discount Amount" + "Excise Amount" + "Tax Amount" + "Total GST Amount" +
                    "Charges To Customer" + "Bal. TDS/TCS Including SHECESS" +
                    "Service Tax Amount" + "Service Tax eCess Amount" + "Service Tax SHE Cess Amount" +
                    "Service Tax SBC Amount" + "KK Cess Amount";
                MODIFY;
              END;
          UNTIL SalesLine.NEXT = 0;
      END;
    END;

    PROCEDURE CheckECCNo@1500001();
    BEGIN
      GetSalesHeader;
      IF SalesHeader."Location Code" <> '' THEN BEGIN
        GetLocation(SalesHeader."Location Code");
        Location.TESTFIELD("E.C.C. No.");
      END;
    END;

    PROCEDURE ChkQtyUpdatioAfterDDPLA@1500002();
    BEGIN
      IF (xRec.Quantity <> Quantity) AND (xRec.Quantity <> 0) AND "Direct Debit To PLA / RG" AND
         ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice])
      THEN BEGIN
        GenJnlLine.RESET;
        GenJnlLine.SETFILTER("Journal Template Name",'%1','');
        GenJnlLine.SETFILTER("Journal Batch Name",'%1','');
        GenJnlLine.SETRANGE("Document No.","Document No.");
        IF GenJnlLine.FINDFIRST THEN
          ERROR(Text16351);
      END;
    END;

    PROCEDURE UpdateStruOrdLineDetails@1500003();
    VAR
      StructureDetail@1500001 : Record 13793;
      StrOrderLineDetails@1500000 : Record 13795;
    BEGIN
      GetSalesHeader;
      SalesHeader.TESTFIELD(Structure);
      StructureDetail.SETRANGE(Code,SalesHeader.Structure);
      StructureDetail.SETRANGE(Type,StructureDetail.Type::Excise);
      IF StructureDetail.FINDFIRST THEN BEGIN
        StrOrderLineDetails.GET(StrOrderLineDetails.Type::Sale,StructureDetail."Calculation Order",
          "Document Type","Document No.","No.","Line No.",StructureDetail.Type,'','EXCISE');
        StrOrderLineDetails."Manually Changed" := TRUE;
        StrOrderLineDetails.Amount := "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" +
          "CESS Amount" + "NCCD Amount" + "eCess Amount" + "ADET Amount" + "AED(TTA) Amount" + "ADE Amount" + "ADC VAT Amount" +
          "SHE Cess Amount";
        IF SalesHeader."Currency Factor" <> 0 THEN
          CFactor := SalesHeader."Currency Factor"
        ELSE
          CFactor := 1;
        IF SalesHeader."Currency Code" <> '' THEN
          Currency.GET(SalesHeader."Currency Code");
        StrOrderLineDetails."Amount (LCY)" := ROUND(StrOrderLineDetails.Amount / CFactor,Currency."Amount Rounding Precision");
        StrOrderLineDetails.Amount := ROUND(StrOrderLineDetails.Amount,Currency."Amount Rounding Precision");
        StrOrderLineDetails.MODIFY(TRUE);
      END;
    END;

    PROCEDURE UpdateGenJnlLine@1500004();
    VAR
      ExciseCenvatClaim@1500000 : Record 16584;
    BEGIN
      ExciseCenvatClaim.RESET;
      ExciseCenvatClaim.SETRANGE("Journal Template Name",'');
      ExciseCenvatClaim.SETRANGE("Journal Batch Name",'');
      ExciseCenvatClaim.SETRANGE("Document No.","Document No.");
      IF ExciseCenvatClaim.FINDFIRST THEN BEGIN
        ExciseCenvatClaim."BED Amount" := 0;
        ExciseCenvatClaim."AED(GSI) Amount" := 0;
        ExciseCenvatClaim."SED Amount" := 0;
        ExciseCenvatClaim."SAED Amount" := 0;
        ExciseCenvatClaim."CESS Amount" := 0;
        ExciseCenvatClaim."NCCD Amount" := 0;
        ExciseCenvatClaim."eCess Amount" := 0;
        ExciseCenvatClaim."ADET Amount" := 0;
        ExciseCenvatClaim."ADE Amount" := 0;
        ExciseCenvatClaim."AED(TTA) Amount" := 0;
        ExciseCenvatClaim."SHE Cess Amount" := 0;
        ExciseCenvatClaim."ADC VAT Amount" := 0;
        ExciseCenvatClaim.MODIFY;
      END;
    END;

    PROCEDURE CalculateTCS@1500010(SalesHeader@1500026 : Record 36);
    VAR
      SalesLine@1500022 : Record 37;
      SalesLine2@1500024 : Record 37;
      StructOrderLine@1500021 : Record 13795;
      TCSEntry@1500020 : Record 16514;
      TCSSetup@1500019 : Record 16508;
      NOCLine@1500018 : Record 13785;
      CustLedgEntry@1500017 : Record 21;
      DateFilterCalc@1500016 : Codeunit 358;
      TCSAmount@1500025 : Decimal;
      SurchargeAmount@1500046 : Decimal;
      SurchargeBaseAmount@1500047 : Decimal;
      AccPeriodFilter@1500015 : Text[30];
      FiscalYear@1500014 : Boolean;
      OrderAmount@1500048 : Decimal;
      OrderTCSAmount@1500049 : Decimal;
      ContractAmount@1500010 : Decimal;
      ContractTCSAmount@1500009 : Decimal;
      PrevInvoiceAmount@1500007 : Decimal;
      InvoiceAmount@1500006 : Decimal;
      PaymentAmount@1500005 : Decimal;
      PrevTCSAmount@1500012 : Decimal;
      PrevSurchargeAmount@1500011 : Decimal;
      PrevContractAmount@1500002 : Decimal;
      TotalGSTAmount@1500003 : Decimal;
      CalcTCS@1500001 : Boolean;
      InsertBuffer@1500000 : Boolean;
      AppliedAmount@1500077 : Decimal;
    BEGIN
      IF SalesHeader."Assessee Code" = '' THEN
        EXIT;
      "Per Contract" := FALSE;

      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        SETFILTER(Type,'%1|%2|%3',Type::"G/L Account",Type::Item,Type::"Charge (Item)");
        IF FIND('-') THEN
          REPEAT
            IF ("TCS Nature of Collection" <> '') AND (AccPeriodFilter = '') THEN
              DateFilterCalc.CreateTCSAccountingDateFilter(AccPeriodFilter,FiscalYear,SalesHeader."Posting Date",0);
            InitTCS(SalesLine);
            TCSBuffer[1].DELETEALL;
            TCSAmount := 0;
            SurchargeAmount := 0;
            OrderAmount := 0;
            OrderTCSAmount := 0;
            AppliedAmount := 0;
            CLEAR(CustLedgEntry);
            IF GSTManagement.IsGSTApplicable(SalesHeader.Structure) AND (SalesHeader."Applies-to Doc. No." <> '') THEN
              CheckTCSwithGSTValidation(SalesHeader);

            NOCLine.RESET;
            NOCLine.SETRANGE(Type,NOCLine.Type::Customer);
            NOCLine.SETRANGE("No.","Sell-to Customer No.");
            NOCLine.SETRANGE("NOD/NOC","TCS Nature of Collection");
            IF NOCLine.FINDFIRST THEN BEGIN
              "Concessional Code" := NOCLine."Concessional Code";
              TCSSetup.RESET;
              TCSSetup.SETRANGE("TCS Nature of Collection","TCS Nature of Collection");
              TCSSetup.SETRANGE("Assessee Code","Assessee Code");
              TCSSetup.SETRANGE("TCS Type","TCS Type");
              TCSSetup.SETRANGE("Effective Date",0D,SalesHeader."Posting Date");
              TCSSetup.SETRANGE("Concessional Code",NOCLine."Concessional Code");

              IF TCSSetup.FINDLAST THEN BEGIN
                StructOrderLine.RESET;
                StructOrderLine.SETCURRENTKEY(Type,"Document Type","Document No.","Item No.","Line No.");
                StructOrderLine.SETRANGE(Type,StructOrderLine.Type::Sale);
                StructOrderLine.SETRANGE("Document Type","Document Type");
                StructOrderLine.SETRANGE("Document No.","Document No.");
                StructOrderLine.SETRANGE("Item No.","No.");
                StructOrderLine.SETRANGE("Line No.","Line No.");
                StructOrderLine.CALCSUMS("Amount (LCY)",Amount);
                IF (GSTManagement.IsGSTApplicable(SalesHeader.Structure) AND (NOT SalesLine2."Price Inclusive of Tax") AND
                  ("Currency Code"<>'')) THEN
                  TCSBaseLCY := "Line Amount" - "Inv. Discount Amount" + StructOrderLine.Amount
                ELSE
                  TCSBaseLCY := "Line Amount" - "Inv. Discount Amount" + StructOrderLine."Amount (LCY)";
                IF "Currency Code" <> '' THEN
                  TCSBaseLCY := ROUND(
                      CurrExchRate.ExchangeAmtFCYToLCY(
                        SalesHeader."Posting Date","Currency Code",
                        ABS(TCSBaseLCY),SalesHeader."Currency Factor"));

                TCSEntry.RESET;
                TCSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TCS Type","Assessee Code","Document Type");
                TCSEntry.SETRANGE("Party Type",TCSEntry."Party Type"::Customer);
                TCSEntry.SETRANGE("Party Code","Sell-to Customer No.");
                TCSEntry.SETFILTER("Posting Date",AccPeriodFilter);
                TCSEntry.SETRANGE("TCS Type","TCS Type");
                TCSEntry.SETRANGE("Assessee Code","Assessee Code");
                TCSEntry.SETRANGE("Document Type",TCSEntry."Document Type"::Invoice);
                TCSEntry.CALCSUMS("Invoice Amount","Service Tax Including eCess");
                InvoiceAmount := ABS(TCSEntry."Invoice Amount") + ABS(TCSEntry."Service Tax Including eCess");

                TCSEntry.SETRANGE("Document Type",TCSEntry."Document Type"::Payment);
                TCSEntry.CALCSUMS("Invoice Amount","Service Tax Including eCess");
                PaymentAmount := ABS(TCSEntry."Invoice Amount") + ABS(TCSEntry."Service Tax Including eCess");

                IF InvoiceAmount > PaymentAmount THEN
                  PrevInvoiceAmount := InvoiceAmount
                ELSE
                  PrevInvoiceAmount := PaymentAmount;

                TCSEntry.SETRANGE("Document Type");
                TCSEntry.CALCSUMS("TCS Amount","Surcharge Amount");
                PrevTCSAmount := ABS(TCSEntry."TCS Amount");
                PrevSurchargeAmount := ABS(TCSEntry."Surcharge Amount");

                TCSEntry.RESET;
                TCSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TCS Type","Assessee Code",Applied,"Per Contract"
                  );
                TCSEntry.SETRANGE("Party Type",TCSEntry."Party Type"::Customer);
                TCSEntry.SETRANGE("Party Code","Sell-to Customer No.");
                TCSEntry.SETFILTER("Posting Date",AccPeriodFilter);
                TCSEntry.SETRANGE("TCS Type","TCS Type");
                TCSEntry.SETRANGE("Assessee Code","Assessee Code");
                TCSEntry.SETRANGE(Applied,FALSE);
                TCSEntry.SETRANGE("Per Contract",TRUE);
                TCSEntry.CALCSUMS("Invoice Amount","Service Tax Including eCess");
                PrevContractAmount := ABS(TCSEntry."Invoice Amount") + ABS(TCSEntry."Service Tax Including eCess");
                SalesLine2.RESET;
                SalesLine2.SETRANGE("Document Type","Document Type");
                SalesLine2.SETRANGE("Document No.","Document No.");
                SalesLine2.SETRANGE("TCS Type","TCS Type");
                SalesLine2.SETRANGE("TCS Nature of Collection","TCS Nature of Collection");
                SalesLine2.SETRANGE("Assessee Code","Assessee Code");
                SalesLine2.SETFILTER("Line No.",'<%1',"Line No.");
                SalesLine2.SETFILTER(
                  Type,'%1|%2|%3',SalesLine2.Type::"G/L Account",SalesLine2.Type::Item,SalesLine2.Type::"Charge (Item)");
                IF SalesLine2.FIND('-') THEN
                  REPEAT
                    TotalGSTAmount := 0;
                    IF (GSTManagement.IsGSTApplicable(SalesHeader.Structure) AND
                        (NOT SalesLine2."Price Inclusive of Tax")) THEN
                      TotalGSTAmount := SalesLine2."Total GST Amount";
                    OrderAmount += SalesLine2."Line Amount" - SalesLine2."Inv. Discount Amount" +
                      SalesLine2."Service Tax Amount" + SalesLine2."Service Tax eCess Amount" +
                      SalesLine2."Service Tax SHE Cess Amount" + SalesLine2."Service Tax SBC Amount" +
                      SalesLine2."KK Cess Amount" + TotalGSTAmount;
                    OrderTCSAmount := OrderTCSAmount + SalesLine2."Total TDS/TCS Incl. SHE CESS";
                    IF "Per Contract" THEN BEGIN
                      ContractAmount := ContractAmount + SalesLine2."TDS/TCS Base Amount";
                      ContractTCSAmount := ContractTCSAmount + SalesLine2."Total TDS/TCS Incl. SHE CESS";
                    END;
                  UNTIL SalesLine2.NEXT = 0;
                IF "Currency Code" <> '' THEN
                  OrderAmount := ROUND(
                      CurrExchRate.ExchangeAmtFCYToLCY(
                        SalesHeader."Posting Date","Currency Code",
                        OrderAmount,SalesHeader."Currency Factor"));

                InsertBuffer := FALSE;
                CalcTCS := FALSE;

                "Surcharge Base Amount" := TCSBaseLCY;
                "TDS/TCS %" := TCSSetup."TCS %";
                "Surcharge %" := TCSSetup."Surcharge %";
                "eCESS % on TDS/TCS" := TCSSetup."eCESS %";
                "SHE Cess % on TDS/TCS" := TCSSetup."SHE Cess %";
                IF (SalesHeader."Applies-to Doc. No." = '') AND (SalesHeader."Applies-to ID" = '') THEN BEGIN
                  IF NOCLine."Threshold Overlook" THEN BEGIN
                    "TDS/TCS Base Amount" := TCSBaseLCY;
                    IF (PrevInvoiceAmount + OrderAmount) > TCSSetup."Surcharge Threshold Amount" THEN
                      PrevSurchargeAmount := 0
                    ELSE
                      IF (NOT NOCLine."Surcharge Overlook") AND
                         ((PrevInvoiceAmount + OrderAmount + TCSBaseLCY) > TCSSetup."Surcharge Threshold Amount")
                      THEN BEGIN
                        "Surcharge Base Amount" := "Surcharge Base Amount" + PrevInvoiceAmount + OrderAmount;
                        InsertBuffer := TRUE;
                      END ELSE
                        IF NOT NOCLine."Surcharge Overlook" THEN
                          "Surcharge %" := 0;
                  END ELSE
                    IF (PrevInvoiceAmount + OrderAmount) > TCSSetup."TCS Threshold Amount" THEN BEGIN
                      "TDS/TCS Base Amount" := TCSBaseLCY - ContractAmount;
                      IF (PrevInvoiceAmount + OrderAmount) > TCSSetup."Surcharge Threshold Amount" THEN BEGIN
                        PrevSurchargeAmount := 0;
                      END ELSE
                        IF (PrevInvoiceAmount + OrderAmount + TCSBaseLCY) > TCSSetup."Surcharge Threshold Amount" THEN BEGIN
                          "Surcharge Base Amount" := "Surcharge Base Amount" + PrevInvoiceAmount + OrderAmount;
                          InsertBuffer := TRUE;
                        END ELSE
                          IF NOT NOCLine."Surcharge Overlook" THEN
                            "Surcharge %" := 0;
                    END ELSE
                      IF ((PrevInvoiceAmount + OrderAmount + TCSBaseLCY) > TCSSetup."TCS Threshold Amount") AND
                         (TCSSetup."Contract Amount" <> 0)
                      THEN BEGIN
                        "TDS/TCS Base Amount" := (PrevInvoiceAmount + TCSBaseLCY) - PrevContractAmount + OrderAmount - ContractAmount;

                        IF NOCLine."Surcharge Overlook" THEN
                          "Surcharge Base Amount" += (PrevInvoiceAmount - PrevContractAmount + OrderAmount - ContractAmount)
                        ELSE
                          IF (PrevInvoiceAmount + OrderAmount + TCSBaseLCY) > TCSSetup."Surcharge Threshold Amount" THEN
                            "Surcharge Base Amount" += PrevInvoiceAmount - PrevContractAmount + OrderAmount
                          ELSE
                            IF NOT ((PrevInvoiceAmount + OrderAmount) > TCSSetup."Surcharge Threshold Amount") THEN
                              "Surcharge %" := 0;

                        InsertBuffer := TRUE;
                        CalcTCS := TRUE;
                      END ELSE
                        IF ((TCSBaseLCY + OrderAmount) > TCSSetup."Contract Amount") AND
                           (TCSSetup."Contract Amount" <> 0)
                        THEN BEGIN
                          "Per Contract" := TRUE;
                          "TDS/TCS Base Amount" := TCSBaseLCY + OrderAmount - ContractAmount;

                          IF NOCLine."Surcharge Overlook" THEN
                            "Surcharge Base Amount" := ABS("Surcharge Base Amount" + OrderAmount - ContractAmount)
                          ELSE
                            IF NOT (TCSBaseLCY > TCSSetup."Surcharge Threshold Amount") THEN
                              "Surcharge %" := 0;
                        END ELSE
                          IF (PrevInvoiceAmount + OrderAmount + TCSBaseLCY ) > TCSSetup."TCS Threshold Amount" THEN BEGIN
                            "TDS/TCS Base Amount" := PrevInvoiceAmount + TCSBaseLCY + OrderAmount;

                            SalesLine2.RESET;
                            SalesLine2.SETRANGE("Document Type","Document Type");
                            SalesLine2.SETRANGE("Document No.","Document No.");
                            SalesLine2.SETRANGE("TCS Type","TCS Type");
                            SalesLine2.SETRANGE("TCS Nature of Collection","TCS Nature of Collection");
                            SalesLine2.SETRANGE("Assessee Code","Assessee Code");
                            SalesLine2.SETFILTER("Line No.",'<%1',"Line No.");
                            IF SalesLine2.FINDSET THEN
                              REPEAT
                                SalesLine2."TDS/TCS Base Amount" := 0;
                                SalesLine2.MODIFY;
                              UNTIL SalesLine2.NEXT = 0;
                            IF NOCLine."Surcharge Overlook" THEN
                              "Surcharge Base Amount" := ABS(PrevInvoiceAmount + OrderAmount + "Surcharge Base Amount")
                            ELSE
                              IF (PrevInvoiceAmount + OrderAmount) > TCSSetup."Surcharge Threshold Amount" THEN BEGIN
                                PrevSurchargeAmount := 0;
                              END ELSE
                                IF (PrevInvoiceAmount + OrderAmount + TCSBaseLCY) > TCSSetup."Surcharge Threshold Amount" THEN
                                  "Surcharge Base Amount" := PrevInvoiceAmount + OrderAmount + "Surcharge Base Amount"
                                ELSE
                                  "Surcharge %" := 0;

                            InsertBuffer := TRUE;
                            CalcTCS := TRUE;
                          END ELSE BEGIN
                            "TDS/TCS Base Amount" := TCSBaseLCY;
                            "TDS/TCS %" := 0;
                            "eCESS % on TDS/TCS" := 0;
                            "SHE Cess % on TDS/TCS" := 0;
                            "Surcharge %" := 0;
                            "Surcharge Amount" := 0;
                            "TDS/TCS Amount" := 0;
                          END;
                END ELSE
                  IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN BEGIN
                    TCSEntry.RESET;
                    TCSEntry.SETCURRENTKEY("Document No.","Posting Date");
                    IF SalesHeader."Applies-to Doc. No." <> '' THEN
                      TCSEntry.SETRANGE("Document No.",SalesHeader."Applies-to Doc. No.")
                    ELSE BEGIN
                      CustLedgEntry.RESET;
                      CustLedgEntry.SETRANGE("Applies-to ID",SalesHeader."Applies-to ID");
                      CustLedgEntry.SETRANGE("TCS Nature of Collection","TCS Nature of Collection");
                      CustLedgEntry.SETRANGE("TCS Type","TCS Type");
                      IF CustLedgEntry.FINDFIRST THEN
                        TCSEntry.SETRANGE("Document No.",CustLedgEntry."Document No.")
                    END;
                    IF TCSEntry.FIND('+') THEN
                      IF NOT TCSEntry."TCS Paid" THEN BEGIN
                        "TDS/TCS Base Amount" := TCSBaseLCY;
                        "TDS/TCS %" := TCSEntry."TCS %";
                        "eCESS % on TDS/TCS" := TCSEntry."eCESS %";
                        "SHE Cess % on TDS/TCS" := TCSEntry."SHE Cess %";
                        "Surcharge %" := TCSEntry."Surcharge %";
                        "Surcharge Amount" := TCSEntry."Surcharge Amount";
                        "TDS/TCS Amount" := TCSEntry."TCS Amount";
                      END ELSE BEGIN
                        "TDS/TCS Base Amount" := TCSBaseLCY;
                        "TDS/TCS %" := 0;
                        "eCESS % on TDS/TCS" := 0;
                        "SHE Cess % on TDS/TCS" := 0;
                        "Surcharge %" := 0;
                        "Surcharge Amount" := 0;
                        "TDS/TCS Amount" := 0;
                      END;
                  END ELSE BEGIN
                    IF GSTManagement.IsGSTApplicable(SalesHeader.Structure) AND (SalesHeader."Applies-to Doc. No." <>'') THEN BEGIN
                      CLEAR(CustLedgEntry);
                      GetAppliedDoc(CustLedgEntry,SalesHeader."Bill-to Customer No.",SalesHeader."Applies-to Doc. No.");
                      CheckTCSValidaion(SalesHeader,CustLedgEntry."Entry No.");
                      IF CustLedgEntry.COUNT <> 0 THEN
                        AppliedAmount := GetGSTAppliedDocAmount(
                          "TCS Nature of Collection","GST Group Code",SalesHeader."Applies-to Doc. No.",CustLedgEntry."GST Group Code",
                          TRUE,SalesHeader."Bill-to Customer No.");

                    END ELSE
                      AppliedAmount :=
                        GetGSTAppliedDocAmount(
                          "TCS Nature of Collection","GST Group Code",
                          SalesHeader."Applies-to Doc. No.",'',FALSE,SalesHeader."Bill-to Customer No.");
                    IF AppliedAmount <> 0 THEN BEGIN
                      IF (TCSBaseLCY + OrderAmount) >= ABS(AppliedAmount) THEN BEGIN
                      IF TCSSetup."Contract Amount" <> 0 THEN BEGIN
                        IF PrevTCSAmount = 0 THEN
                          "TDS/TCS Base Amount" := PrevInvoiceAmount + TCSBaseLCY -
                              ABS(AppliedAmount)
                        ELSE
                          IF PrevContractAmount <> 0 THEN
                            "TDS/TCS Base Amount" := TCSBaseLCY -
                                ABS(AppliedAmount) +
                              (PrevInvoiceAmount - PrevContractAmount)
                          ELSE
                            "TDS/TCS Base Amount" := TCSBaseLCY -
                                ABS(AppliedAmount);
                        IF PrevSurchargeAmount = 0 THEN
                          "Surcharge Base Amount" := PrevInvoiceAmount + TCSBaseLCY -
                              ABS(AppliedAmount)
                        ELSE
                          IF PrevContractAmount <> 0 THEN
                            "Surcharge Base Amount" := TCSBaseLCY -
                                ABS(AppliedAmount) +
                              (PrevInvoiceAmount - PrevContractAmount)
                          ELSE
                            "Surcharge Base Amount" := TCSBaseLCY -
                                ABS(AppliedAmount);
                      END ELSE BEGIN
                        IF PrevTCSAmount = 0 THEN
                          "TDS/TCS Base Amount" := PrevInvoiceAmount + TCSBaseLCY -
                              ABS(AppliedAmount) + OrderAmount
                        ELSE
                            IF OrderTCSAmount = 0 THEN
                              "TDS/TCS Base Amount" := OrderAmount + TCSBaseLCY -  ABS(AppliedAmount)
                            ELSE BEGIN
                              IF OrderAmount >= ABS(AppliedAmount) THEN
                                "TDS/TCS Base Amount" := TCSBaseLCY;
                            END;

                        IF PrevSurchargeAmount = 0 THEN
                          "Surcharge Base Amount" := PrevInvoiceAmount + TCSBaseLCY -
                              ABS(AppliedAmount)
                        ELSE
                          "Surcharge Base Amount" := TCSBaseLCY -
                              ABS(AppliedAmount);
                      END;
                        "Temp TDS/TCS Base" := TCSBaseLCY - ABS(AppliedAmount);
                      END;
                    END ELSE BEGIN
                      "TDS/TCS Base Amount" := TCSBaseLCY;
                      "Surcharge Base Amount" := TCSBaseLCY;
                    END;
                  END;
                IF InsertBuffer THEN BEGIN
                  Rec := SalesLine;
                  InsertGenTCSBuffer(FALSE);
                  TCSEntry.RESET;
                  TCSEntry.SETCURRENTKEY("Party Type","Party Code","Posting Date","TCS Type","Assessee Code",Applied);
                  TCSEntry.SETRANGE("Party Type",TCSEntry."Party Type"::Customer);
                  TCSEntry.SETRANGE("Party Code","Sell-to Customer No.");
                  TCSEntry.SETFILTER("Posting Date",AccPeriodFilter);
                  TCSEntry.SETRANGE("TCS Type","TCS Type");
                  TCSEntry.SETRANGE("Assessee Code","Assessee Code");
                  TCSEntry.SETRANGE(Applied,FALSE);
                  IF TCSEntry.FIND('-') THEN
                    REPEAT
                      InsertTCSBuffer(TCSEntry,SalesHeader."Posting Date","Surcharge %" <> 0,FALSE);
                    UNTIL TCSEntry.NEXT = 0;
                END;

                IF TCSBaseLCY <> 0 THEN BEGIN
                  IF TCSBuffer[1].FIND('+') THEN BEGIN
                    REPEAT
                      TCSAmount :=
                        TCSAmount + (TCSBuffer[1]."TCS Base Amount" - TCSBuffer[1]."Contract TCS Ded. Base Amount") *
                        TCSBuffer[1]."TCS %" / 100;
                      SurchargeBaseAmount := SurchargeBaseAmount + (TCSBuffer[1]."TCS %" *
                                                                    (TCSBuffer[1]."Surcharge Base Amount" -
                                                                     TCSBuffer[1]."Contract TCS Ded. Base Amount") / 100);
                      SurchargeAmount := SurchargeAmount + (TCSBuffer[1]."TCS %" *
                                                            (TCSBuffer[1]."Surcharge Base Amount" -
                                                             TCSBuffer[1]."Contract TCS Ded. Base Amount") / 100) *
                        (TCSBuffer[1]."Surcharge %" / 100);
                    UNTIL TCSBuffer[1].NEXT(-1) = 0;

                    IF TCSBaseLCY < 0 THEN BEGIN
                      "TDS/TCS Amount" := -RoundTCSAmount(TCSAmount);
                      "Surcharge Amount" := -RoundTCSAmount(SurchargeAmount);
                    END ELSE BEGIN
                      "TDS/TCS Amount" := RoundTCSAmount(TCSAmount);
                      "Surcharge Amount" := RoundTCSAmount(SurchargeAmount);
                    END;

                    IF "TDS/TCS Base Amount" <> 0 THEN
                      "TDS/TCS %" := ABS(ROUND(TCSAmount * 100 / "TDS/TCS Base Amount"));
                    IF SurchargeBaseAmount <> 0 THEN
                      "Surcharge %" := ABS(ROUND(SurchargeAmount * 100 / SurchargeBaseAmount));
                  END ELSE BEGIN
                    "TDS/TCS Amount" := RoundTCSAmount("TDS/TCS %" * "TDS/TCS Base Amount" / 100);
                    "Surcharge Amount" := RoundTCSAmount(("TDS/TCS %" * "Surcharge Base Amount" / 100) * ("Surcharge %" / 100));
                  END;

                  "eCESS on TDS/TCS Amount" := RoundTCSAmount(("TDS/TCS Amount" + "Surcharge Amount") * "eCESS % on TDS/TCS" / 100);
                  "SHE Cess on TDS/TCS Amount" :=
                    RoundTCSAmount(("TDS/TCS Amount" + "Surcharge Amount") * "SHE Cess % on TDS/TCS" / 100
                      );
                  "Total TDS/TCS Incl. SHE CESS" := "TDS/TCS Amount" + "Surcharge Amount" + "eCESS on TDS/TCS Amount" +
                    "SHE Cess on TDS/TCS Amount";
                  IF "Currency Code" <> '' THEN
                    UpdateAmountBasedOnCurrency;
                END;
              END;
            END;
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE RoundTCSAmount@1500009(TCSAmount@1280000 : Decimal) : Decimal;
    VAR
      GLSetup@1280003 : Record 98;
      TCSRoundingDirection@1280002 : Text[1];
      TCSRoundingPrecision@1280001 : Decimal;
    BEGIN
      GLSetup.GET;
      CASE GLSetup."TCS Rounding Type" OF
        GLSetup."TCS Rounding Type"::Nearest:
          TCSRoundingDirection := '=';
        GLSetup."TCS Rounding Type"::Up:
          TCSRoundingDirection := '>';
        GLSetup."TCS Rounding Type"::Down:
          TCSRoundingDirection := '<';
      END;

      IF GLSetup."TCS Rounding Precision" <> 0 THEN
        TCSRoundingPrecision := GLSetup."TCS Rounding Precision"
      ELSE
        TCSRoundingPrecision := 1;

      EXIT(ROUND(TCSAmount,TCSRoundingPrecision,TCSRoundingDirection));
    END;

    LOCAL PROCEDURE InsertTCSBuffer@1500008(TCSEntry@1280000 : Record 16514;PostingDate@1280001 : Date;CalculateSurcharge@1280002 : Boolean;CalcTCS@1280003 : Boolean);
    BEGIN
      WITH TCSEntry DO BEGIN
        TCSBuffer[1]."TCS Nature of Collection" := "TCS Nature of Collection";
        TCSBuffer[1]."Assessee Code" := "Assessee Code";
        TCSBuffer[1]."Party Code" := "Party Code";
        TCSBuffer[1]."Party Type" := "Party Type";
        IF CalcTCS THEN BEGIN
          TCSBuffer[1]."TCS Base Amount" := "Invoice Amount" + "Service Tax Including eCess";
          IF "Per Contract" THEN
            TCSBuffer[1]."Contract TCS Ded. Base Amount" := "Invoice Amount" + "Service Tax Including eCess";
        END ELSE
          TCSBuffer[1]."TCS Base Amount" := 0;
        IF CalculateSurcharge THEN BEGIN
          TCSBuffer[1]."Surcharge Base Amount" := "Invoice Amount" + "Service Tax Including eCess";
          IF "Per Contract" THEN
            TCSBuffer[1]."Contract TCS Ded. Base Amount" := "Invoice Amount" + "Service Tax Including eCess";
        END ELSE
          TCSBuffer[1]."Surcharge Base Amount" := 0;

        TCSSetup.RESET;
        TCSSetup.SETRANGE("TCS Nature of Collection","TCS Nature of Collection");
        TCSSetup.SETRANGE("Assessee Code","Assessee Code");
        TCSSetup.SETRANGE("Effective Date",0D,PostingDate);

        NOCLine.RESET;
        NOCLine.SETRANGE(Type,"Party Type");
        NOCLine.SETRANGE("No.","Party Code");
        NOCLine.SETRANGE("NOD/NOC","TCS Nature of Collection");
        IF NOCLine.FIND('-') THEN
          TCSSetup.SETRANGE("Concessional Code",NOCLine."Concessional Code");
        IF TCSSetup.FINDLAST THEN BEGIN
          TCSBuffer[1]."TCS %" := TCSSetup."TCS %";
          TCSBuffer[1]."Surcharge %" := TCSSetup."Surcharge %";
        END;
        UpdateTCSBuffer;
      END;
    END;

    LOCAL PROCEDURE UpdateTCSBuffer@1500007();
    BEGIN
      TCSBuffer[2] := TCSBuffer[1];
      IF TCSBuffer[2].FIND THEN BEGIN
        TCSBuffer[2]."TCS Base Amount" += TCSBuffer[1]."TCS Base Amount";
        TCSBuffer[2]."Surcharge Base Amount" += TCSBuffer[1]."Surcharge Base Amount";
        TCSBuffer[2]."Contract TCS Ded. Base Amount" += TCSBuffer[1]."Contract TCS Ded. Base Amount";
        TCSBuffer[2].MODIFY;
      END ELSE
        TCSBuffer[1].INSERT;
    END;

    LOCAL PROCEDURE InsertGenTCSBuffer@1500006(Applied@1280000 : Boolean);
    BEGIN
      CLEAR(TCSBuffer[1]);
      TCSBuffer[1]."TCS Nature of Collection" := "TCS Nature of Collection";
      TCSBuffer[1]."Assessee Code" := "Assessee Code";
      TCSBuffer[1]."Party Code" := "Sell-to Customer No.";
      TCSBuffer[1]."Party Type" := TCSBuffer[1]."Party Type"::Customer;
      IF Applied THEN BEGIN
        TCSBuffer[1]."TCS Base Amount" := ABS("Temp TDS/TCS Base");
        TCSBuffer[1]."Surcharge Base Amount" := ABS("Temp TDS/TCS Base");
      END ELSE BEGIN
        TCSBuffer[1]."TCS Base Amount" := "TDS/TCS Base Amount";
        TCSBuffer[1]."Surcharge Base Amount" := "TDS/TCS Base Amount";
      END;
      TCSBuffer[1]."TCS %" := "TDS/TCS %";
      TCSBuffer[1]."Surcharge %" := "Surcharge %";
      UpdateTCSBuffer;
    END;

    LOCAL PROCEDURE InitTCS@1500005(VAR SalesLine@1500000 : Record 37);
    BEGIN
      WITH SalesLine DO BEGIN
        "TDS/TCS Base Amount" := 0;
        "TDS/TCS %" := 0;
        "Surcharge %" := 0;
        "eCESS % on TDS/TCS" := 0;
        "SHE Cess % on TDS/TCS" := 0;
        "TDS/TCS Amount" := 0;
        "Surcharge Amount" := 0;
        "eCESS on TDS/TCS Amount" := 0;
        "SHE Cess on TDS/TCS Amount" := 0;
        "Total TDS/TCS Incl. SHE CESS" := 0;
        {"Tot TDS/TCS Incl. SHECESS(LCY)" := 0;
        "TDS/TCS Amount (LCY)" := 0;
        "Surcharge Amount (LCY)" := 0;
        "TDS/TCS Incl. Surcharge (LCY)" := 0;
        "eCESS on TDS/TCS Amount (LCY)" := 0;
        "SHE Cess on TDS/TCS Amt (LCY)" := 0; }
        "Bal. TDS/TCS Including SHECESS" := 0;
      END;
    END;

    PROCEDURE CheckManualChangedLines@1500011() : Boolean;
    VAR
      StrOrderLines@1500000 : Record 13795;
    BEGIN
      StrOrderLines.RESET;
      StrOrderLines.SETCURRENTKEY("Document Type","Document No.",Type);
      StrOrderLines.SETRANGE(Type,StrOrderLines.Type::Sale);
      StrOrderLines.SETRANGE("Document Type","Document Type");
      StrOrderLines.SETRANGE("Document No.","Document No.");
      StrOrderLines.SETRANGE("Line No.","Line No.");
      StrOrderLines.SETRANGE("Item No.","No.");
      StrOrderLines.SETRANGE("Manually Changed",TRUE);
      EXIT(StrOrderLines.FINDFIRST);
    END;

    PROCEDURE GetBaseAmount@1500031(VAR Amt@1500000 : Decimal;SalesLine@1500003 : Record 37) CVDEntry : Boolean;
    VAR
      DetailRG23D@1500401 : Record 16533;
      RG23D@1500402 : Record 16537;
      TempRG23D@1500404 : TEMPORARY Record 16537;
      QuantityInCurrLine@1500405 : Decimal;
      QtyInCurrLineAlreadyAdjusted@1500406 : Decimal;
      RefQuantity@1500407 : Decimal;
      AllQtyInCurrLineAdjusted@1500408 : Boolean;
      RG23DEntryNo@1500410 : Integer;
      CurrencyFactor@1500415 : Decimal;
      AmountFactor@1500001 : Decimal;
    BEGIN
      WITH SalesLine DO BEGIN
        GetSalesHeader;
        IF (SalesHeader."Currency Code" <> '') AND (SalesHeader."Currency Factor" <> 0) THEN
          CurrencyFactor := SalesHeader."Currency Factor"
        ELSE
          CurrencyFactor := 1;
        TESTFIELD(Type,Type::Item);

        BEDAmt := 0;
        "AED(GSI)Amt" := 0;
        "AED(TTA)Amt" := 0;
        SEDAmt := 0;
        SAEDAmt := 0;
        CESSAmt := 0;
        NCCDAmt := 0;
        eCessAmt := 0;
        SHECessAmt := 0;
        ADETAmt := 0;
        ADEAmt := 0;
        Amt := 0;
        ADCVATAmt := 0;

        IF ("Quantity Shipped" <> 0) OR ("Return Qty. Received" <> 0) OR ("Shipment No." <> '') OR
           ("Return Receipt No." <> '')
        THEN BEGIN
          DetailRG23D.RESET;
          IF ("Quantity Shipped" <> 0) OR ("Return Qty. Received" <> 0) THEN BEGIN
            DetailRG23D.SETRANGE("Document Type","Document Type");
            DetailRG23D.SETRANGE("Order No.","Document No.");
            DetailRG23D.SETRANGE("Line No.","Line No.");
          END ELSE
            IF "Shipment No." <> '' THEN BEGIN
              DetailRG23D.SETRANGE("Document Type",DetailRG23D."Document Type"::Order);
              DetailRG23D.SETRANGE("Document No.","Shipment No.");
              DetailRG23D.SETRANGE("Line No.","Shipment Line No.");
            END ELSE
              IF "Return Receipt No." <> '' THEN BEGIN
                DetailRG23D.SETRANGE("Document Type",DetailRG23D."Document Type"::"Return Order");
                DetailRG23D.SETRANGE("Document No.","Return Receipt No.");
                DetailRG23D.SETRANGE("Line No.","Return Receipt Line No.");
              END;
          IF DetailRG23D.FINDSET THEN
            REPEAT
              RG23D.GET(DetailRG23D."RG 23 D Entry No.");
              Location.CheckTradingLocation("Location Code");
              IF NOT CVDEntry THEN
                CVDEntry := RG23D.CVD;
              Amt += ABS(RG23D."Excise Base Amt Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              BEDAmt += ABS(RG23D."BED Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              "AED(GSI)Amt" += ABS(RG23D."AED(GSI) Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              "AED(TTA)Amt" += ABS(RG23D."AED(TTA) Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              SEDAmt += ABS(RG23D."SED Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              SAEDAmt += ABS(RG23D."SAED Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              CESSAmt += ABS(RG23D."CESS Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              NCCDAmt += ABS(RG23D."NCCD Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              eCessAmt += ABS(RG23D."eCess Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              SHECessAmt += ABS(RG23D."SHE Cess Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              ADETAmt += ABS(RG23D."ADET Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              ADEAmt += ABS(RG23D."ADE Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
              ADCVATAmt += ABS(RG23D."ADC VAT Amount Per Unit") * ABS(DetailRG23D.Quantity) * CurrencyFactor;
            UNTIL DetailRG23D.NEXT = 0;
        END;
        IF ("Shipment No." = '') AND ("Return Receipt No." = '') THEN BEGIN
          IF Quantity - "Quantity Shipped" - "Return Qty. Received" <> 0 THEN BEGIN
            QuantityInCurrLine := Quantity - "Quantity Shipped" - "Return Qty. Received";
            QtyInCurrLineAlreadyAdjusted := 0;
            GetSalesHeader;
            RG23D.RESET;
            RG23D.SETCURRENTKEY("Item No.","Posting Date","Transaction Type",Type,"Location Code");
            RG23D.SETRANGE("Item No.","No.");
            IF SalesHeader."Document Type" IN
               [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice]
            THEN
              RG23D.SETRANGE("Transaction Type",RG23D."Transaction Type"::Purchase)
            ELSE BEGIN
              RG23D.SETRANGE("Document No.",SalesHeader."Applies-to Doc. No.");
              RG23D.SETRANGE("Transaction Type",RG23D."Transaction Type"::Sale);
            END;
            RG23D.SETRANGE("Location Code","Location Code");
            RG23D.SETRANGE(Closed,FALSE);
            IF RG23D.FINDSET THEN
              REPEAT
                RefQuantity := 0;
                IF SalesHeader."Document Type" IN
                   [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice]
                THEN
                  RG23DEntryNo := RG23D."Entry No."
                ELSE
                  RG23DEntryNo := RG23D."Ref. Entry No.";
                IF NOT TempRG23DConsumedInCurrDoc.GET(RG23DEntryNo) THEN BEGIN
                  IF TempRG23DRemainder.GET(RG23DEntryNo) THEN BEGIN
                    RefQuantity := TempRG23DRemainder.Quantity;
                    TempRG23DRemainder.Quantity :=
                      TempRG23DRemainder.Quantity - (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);

                    IF TempRG23DRemainder.Quantity <= 0 THEN BEGIN
                      TempRG23DConsumedInCurrDoc.TRANSFERFIELDS(TempRG23DRemainder);
                      TempRG23DConsumedInCurrDoc.INSERT;
                      TempRG23DRemainder.DELETE;
                    END ELSE BEGIN
                      RefQuantity := (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);
                      TempRG23DRemainder.Quantity := TempRG23DRemainder.Quantity - RefQuantity;
                      TempRG23DRemainder.MODIFY;
                      AllQtyInCurrLineAdjusted := TRUE;
                    END;
                  END ELSE BEGIN
                    IF SalesHeader."Document Type" IN
                       [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice]
                    THEN BEGIN
                      RG23D.CALCFIELDS("Remaining Quantity");
                      TempRG23D.TRANSFERFIELDS(RG23D);
                      TempRG23D.Quantity := RG23D."Remaining Quantity";
                    END ELSE BEGIN
                      TempRG23D.TRANSFERFIELDS(RG23D);
                      TempRG23D.Quantity := ABS(RG23D.Quantity);
                    END;
                    RefQuantity := TempRG23D.Quantity;
                    TempRG23D.Quantity :=
                      TempRG23D.Quantity - (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);

                    IF TempRG23D.Quantity <= 0 THEN BEGIN
                      TempRG23DConsumedInCurrDoc.TRANSFERFIELDS(RG23D);
                      TempRG23DConsumedInCurrDoc.INSERT;
                    END ELSE BEGIN
                      AllQtyInCurrLineAdjusted := TRUE;
                      RefQuantity := (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);
                      TempRG23DRemainder.TRANSFERFIELDS(RG23D);
                      TempRG23DRemainder.Quantity := RG23D."Remaining Quantity" - RefQuantity;
                      TempRG23DRemainder.INSERT;
                    END;
                  END;

                  QtyInCurrLineAlreadyAdjusted := QtyInCurrLineAlreadyAdjusted + RefQuantity;
                  IF NOT CVDEntry THEN
                    CVDEntry := RG23D.CVD;

                  // We cann't post more than referenced quantity
                  IF "Qty. to Invoice" > RefQuantity THEN
                    FIELDERROR("Qty. to Invoice",STRSUBSTNO(Text045,RefQuantity));
                  AmountFactor := "Qty. to Invoice" * CurrencyFactor;
                  Amt += ABS(RG23D."Excise Base Amt Per Unit") * AmountFactor;
                  BEDAmt += ABS(RG23D."BED Amount Per Unit") * AmountFactor;
                  "AED(GSI)Amt" += ABS(RG23D."AED(GSI) Amount Per Unit") * AmountFactor;
                  "AED(TTA)Amt" += ABS(RG23D."AED(TTA) Amount Per Unit") * AmountFactor;
                  SEDAmt += ABS(RG23D."SED Amount Per Unit") * AmountFactor;
                  SAEDAmt += ABS(RG23D."SAED Amount Per Unit") * AmountFactor;
                  CESSAmt += ABS(RG23D."CESS Amount Per Unit") * AmountFactor;
                  NCCDAmt += ABS(RG23D."NCCD Amount Per Unit") * AmountFactor;
                  eCessAmt += ABS(RG23D."eCess Amount Per Unit") * AmountFactor;
                  SHECessAmt += ABS(RG23D."SHE Cess Amount Per Unit") * AmountFactor;
                  ADETAmt += ABS(RG23D."ADET Amount Per Unit") * AmountFactor;
                  ADEAmt += ABS(RG23D."ADE Amount Per Unit") * AmountFactor;
                  ADCVATAmt += ABS(RG23D."ADC VAT Amount Per Unit") * AmountFactor;
                END;
              UNTIL (RG23D.NEXT = 0) OR AllQtyInCurrLineAdjusted OR (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted = 0);
          END;
        END;
      END;
    END;

    PROCEDURE GetBaseAmtForReturnOrder@1500018(SalesLine@1500002 : Record 37;VAR Amt@1500003 : Decimal;VAR CVDEntry@1500010 : Boolean) : Boolean;
    BEGIN
    END;

    PROCEDURE GetEntryNo@1500014() : Integer;
    BEGIN
    END;

    PROCEDURE InitDetailRG23D@1500013(SalesHeader@1102601009 : Record 36);
    VAR
      SalesLine@1102601001 : Record 37;
      DetailRG23D@1102601000 : Record 16533;
      RG23D@1102601008 : Record 16537;
      TempRG23D@1102601007 : TEMPORARY Record 16537;
      QuantityInCurrLine@1102601006 : Decimal;
      QtyInCurrLineAlreadyAdjusted@1102601005 : Decimal;
      RefQuantity@1102601004 : Decimal;
      AllQtyInCurrLineAdjusted@1102601003 : Boolean;
      EntryNo@1102601002 : Integer;
      TempRG23DInvtCheck@1102601010 : TEMPORARY Record 16537;
    BEGIN
      //WITH SalesHeader DO BEGIN
        IF NOT SalesHeader.Trading THEN
          EXIT;

        IF ((SalesHeader."Document Type" IN [SalesHeader."Document Type"::Order,
                                             SalesHeader."Document Type"::Invoice]) AND (NOT SalesHeader.Ship)) OR
           ((SalesHeader."Document Type" IN [SalesHeader."Document Type"::"Return Order",
                                             SalesHeader."Document Type"::"Credit Memo"]) AND (NOT SalesHeader.Receive))
        THEN
          EXIT;

        IF InitDetailRG23DReturn(SalesHeader) THEN
          EXIT;

        TempRG23DRemainder.DELETEALL;
        TempRG23DConsumedInCurrDoc.DELETEALL;
        InvtBuffer[1].DELETEALL;
        TempRG23DInvtCheck.DELETEALL;

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        IF SalesLine.FINDSET THEN
          REPEAT
            WITH SalesLine DO
              IF "Shipment No." = '' THEN
                IF "Qty. to Ship" <> 0 THEN BEGIN
                  CLEAR(InvtBuffer[1]);
                  InvtBuffer[1]."Item No." := "No.";
                  InvtBuffer[1].Quantity := -"Qty. to Ship";
                  InvtBuffer[2] := InvtBuffer[1];
                  IF InvtBuffer[2].FIND THEN BEGIN
                    InvtBuffer[2].Quantity := InvtBuffer[2].Quantity + InvtBuffer[1].Quantity;
                    InvtBuffer[2].MODIFY;
                  END ELSE
                    InvtBuffer[1].INSERT;

                  QuantityInCurrLine := "Qty. to Ship";
                  QtyInCurrLineAlreadyAdjusted := 0;
                  AllQtyInCurrLineAdjusted := FALSE;
                  RG23D.RESET;
                  RG23D.SETCURRENTKEY("Item No.","Posting Date","Transaction Type",Type,"Location Code");
                  RG23D.SETRANGE("Item No.","No.");
                  RG23D.SETRANGE("Transaction Type",RG23D."Transaction Type"::Purchase);
                  RG23D.SETRANGE("Location Code","Location Code");
                  RG23D.SETRANGE(Closed,FALSE);
                  IF RG23D.FINDSET THEN
                    REPEAT
                      RefQuantity := 0;
                      RG23D.CALCFIELDS("Remaining Quantity");
                      IF NOT TempRG23DInvtCheck.GET(RG23D."Entry No.") THEN BEGIN
                        TempRG23DInvtCheck."Entry No." := RG23D."Entry No.";
                        TempRG23DInvtCheck.INSERT;
                        CLEAR(InvtBuffer[1]);
                        InvtBuffer[1]."Item No." := "No.";
                        InvtBuffer[1].Quantity := RG23D."Remaining Quantity";
                        InvtBuffer[2] := InvtBuffer[1];
                        IF InvtBuffer[2].FIND THEN BEGIN
                          InvtBuffer[2].Quantity := InvtBuffer[2].Quantity + InvtBuffer[1].Quantity;
                          InvtBuffer[2].MODIFY;
                        END ELSE
                          InvtBuffer[1].INSERT;
                      END;
                      IF NOT TempRG23DConsumedInCurrDoc.GET(RG23D."Entry No.") THEN BEGIN
                        IF TempRG23DRemainder.GET(RG23D."Entry No.") THEN BEGIN
                          RefQuantity := TempRG23DRemainder.Quantity;
                          TempRG23DRemainder.Quantity :=
                            TempRG23DRemainder.Quantity - (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);

                          IF TempRG23DRemainder.Quantity <= 0 THEN BEGIN
                            TempRG23DConsumedInCurrDoc.TRANSFERFIELDS(TempRG23DRemainder);
                            TempRG23DConsumedInCurrDoc.INSERT;
                            TempRG23DRemainder.DELETE;
                          END ELSE BEGIN
                            RefQuantity := (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);
                            TempRG23DRemainder.Quantity := TempRG23DRemainder.Quantity - RefQuantity;
                            TempRG23DRemainder.MODIFY;
                            AllQtyInCurrLineAdjusted := TRUE;
                          END;
                        END ELSE BEGIN
                          TempRG23D.TRANSFERFIELDS(RG23D);
                          TempRG23D.Quantity := RG23D."Remaining Quantity";
                          RefQuantity := TempRG23D.Quantity;
                          TempRG23D.Quantity :=
                            TempRG23D.Quantity - (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);

                          IF TempRG23D.Quantity <= 0 THEN BEGIN
                            TempRG23DConsumedInCurrDoc.TRANSFERFIELDS(RG23D);
                            TempRG23DConsumedInCurrDoc.INSERT;
                          END ELSE BEGIN
                            AllQtyInCurrLineAdjusted := TRUE;
                            RefQuantity := (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);
                            TempRG23DRemainder.TRANSFERFIELDS(RG23D);
                            TempRG23DRemainder.Quantity := RG23D."Remaining Quantity" - RefQuantity;
                            TempRG23DRemainder.INSERT;
                          END;
                        END;
                        QtyInCurrLineAlreadyAdjusted := QtyInCurrLineAlreadyAdjusted + RefQuantity;

                        DetailRG23D.RESET;
                        IF DetailRG23D.FINDLAST THEN
                          EntryNo := DetailRG23D."Entry No." + 1
                        ELSE
                          EntryNo := 1;

                        DetailRG23D.INIT;
                        DetailRG23D."Entry No." := EntryNo;
                        DetailRG23D."Document Type" := "Document Type";
                        DetailRG23D."Order No." := "Document No.";
                        DetailRG23D."Line No." := "Line No.";
                        DetailRG23D.Quantity := -RefQuantity;
                        DetailRG23D."RG 23 D Entry No." := RG23D."Entry No.";
                        DetailRG23D."Transaction Type" := DetailRG23D."Transaction Type"::Sale;
                        DetailRG23D.INSERT(TRUE);
                      END;
                    UNTIL (RG23D.NEXT = 0) OR AllQtyInCurrLineAdjusted OR (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted = 0);
                END;
          UNTIL SalesLine.NEXT = 0;
        IF InvtBuffer[1].FIND('+') THEN
          REPEAT
            IF InvtBuffer[1].Quantity < 0 THEN
              ERROR(Text16500,InvtBuffer[1]."Item No.",ABS(InvtBuffer[1].Quantity));
          UNTIL InvtBuffer[1].NEXT(-1) = 0;
      //END;
    END;

    PROCEDURE CheckAvailableQty@1500012(DocNo@1500004 : Code[20]);
    BEGIN
    END;

    PROCEDURE CheckAvailableQtyForReturn@1500016(DocNo@1500004 : Code[20]);
    BEGIN
    END;

    PROCEDURE GetRefEntryNo@1500019(VAR RG23D@1500000 : Record 16537) : Integer;
    BEGIN
    END;

    PROCEDURE GetCompanyInformation@1500017();
    BEGIN
      IF NOT CompanyInfoRead THEN BEGIN
        CompanyInfo.GET;
        CompanyInfoRead := TRUE;
      END;
    END;

    PROCEDURE GetStandardDeduction@1500020(VAR SalesHeader@1500000 : Record 36);
    VAR
      TaxDetail@1500004 : Record 322;
      TaxAreaLine@1500003 : Record 319;
      TaxArea@1500002 : Record 318;
      StrOrderDetails@1500001 : Record 13794;
    BEGIN
      "Standard Deduction %" := 0;
      StrOrderDetails.RESET;
      StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
      StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Sale);
      StrOrderDetails.SETRANGE("Document Type","Document Type");
      StrOrderDetails.SETRANGE("Document No.","Document No.");
      IF "Price Inclusive of Tax" THEN
        StrOrderDetails.SETRANGE("Document Line No.","Line No.")
      ELSE
        StrOrderDetails.SETRANGE("Document Line No.",0);
      StrOrderDetails.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type"::"Sales Tax");
      IF StrOrderDetails.FINDFIRST THEN BEGIN
        IF "Tax Area Code" = '' THEN
          EXIT;
        TaxArea.SETRANGE(Code,"Tax Area Code");
        IF TaxArea.FINDFIRST THEN
          TaxAreaLine.SETFILTER("Tax Area",TaxArea.Code);

        IF TaxAreaLine.FINDSET THEN
          REPEAT
            TaxDetail.SETFILTER("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
            TaxDetail.SETRANGE("Tax Group Code","Tax Group Code");
            TaxDetail.SETFILTER("Effective Date",'<=%1',SalesHeader."Posting Date");
            TaxDetail.SETFILTER("Form Code",'%1',"Form Code");
            IF TaxDetail.FINDLAST THEN
              "Standard Deduction %" := TaxDetail."Standard Deduction %"
          UNTIL TaxAreaLine.NEXT = 0;
      END;
    END;

    PROCEDURE GetSalesPriceExclusiveTaxes@1500023(VAR SalesHeader@1500014 : Record 36);
    VAR
      SalesLine@1500013 : Record 37;
      StructureDetails@1500012 : Record 13793;
      StrOrderDetails@1500011 : Record 13794;
      StrOrderLineDetails@1500010 : Record 13795;
      StrOrderLines@1500009 : Record 13795;
      BaseAmount@1500008 : Decimal;
      CFactor@1500007 : Decimal;
      BaseAmountFixed@1500006 : Decimal;
      BaseAmountVariable@1500005 : Decimal;
      SalesLineBuffer@1500004 : Record 16583;
      FixedAmt@1500003 : Decimal;
      VariableAmt@1500002 : Decimal;
      CalcInvDis@1500001 : Codeunit 60;
      I@1500000 : Integer;
    BEGIN
      WITH SalesHeader DO BEGIN
        StrOrderLines.LOCKTABLE;
        StrOrderLineDetails.LOCKTABLE;
        CALCFIELDS("Price Inclusive of Taxes");
        FOR I := 1 TO 2 DO BEGIN
          StrOrderLines.RESET;
          StrOrderLines.SETCURRENTKEY("Document Type","Document No.",Type);
          StrOrderLines.SETRANGE(Type,StrOrderLines.Type::Sale);
          StrOrderLines.SETRANGE("Document Type","Document Type");
          StrOrderLines.SETRANGE("Document No.","No.");
          StrOrderLines.SETRANGE("Price Inclusive of Tax",TRUE);
          IF NOT Trading THEN
            StrOrderLines.SETRANGE("Manually Changed",FALSE);
          IF StrOrderLines.FINDFIRST THEN
            StrOrderLines.DELETEALL(TRUE);

          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type","Document Type");
          SalesLine.SETRANGE("Document No.","No.");
          SalesLine.SETRANGE("Price Inclusive of Tax",TRUE);
          IF SalesLine.FIND('-') THEN BEGIN
            IF "Calc. Inv. Discount (%)" AND (I = 2) THEN BEGIN
              CalcInvDis.CalculateWithSalesHeaderPIT(SalesHeader,SalesLine);
              SalesLine.RESET;
              SalesLine.SETRANGE("Document Type","Document Type");
              SalesLine.SETRANGE("Document No.","No.");
              SalesLine.SETRANGE("Price Inclusive of Tax",TRUE);
              IF SalesLine.FIND('-') THEN;
            END;
            REPEAT
              SalesLine.TESTFIELD("PIT Structure");
              StructureDetails.RESET;
              StructureDetails.SETRANGE(Code,SalesLine."PIT Structure");
              StructureDetails.SETRANGE("Include PIT Calculation",TRUE);
              IF NOT StructureDetails.FINDFIRST THEN
                ERROR(Text16504,SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
              IF SalesLine.Quantity <> 0 THEN
                WITH SalesLine DO BEGIN
                  SalesHeader.TESTFIELD("Free Supply",FALSE);
                  SalesHeader.TESTFIELD(Trading,FALSE);
                  "Amount Added to Excise Base" := 0;
                  "Amount Added to Tax Base" := 0;
                  "VAT Base Amount" := 0;
                  "Excise Base Variable" := 0;
                  "Tax Base Variable" := 0;
                  IF (NOT SalesHeader."Calc. Inv. Discount (%)") OR (I = 1) THEN BEGIN
                    "Inv Discount Fixed" := 0;
                    "Inv Discount Variable" := 0;
                  END;
                  TESTFIELD(CVD,FALSE);
                  TESTFIELD("Unit Price Incl. of Tax");
                  "Total UPIT Amount" := "Unit Price Incl. of Tax" * Quantity;
                  GetStandardDeduction(SalesHeader);
                  StrOrderDetails.RESET;
                  StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                  StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Sale);
                  StrOrderDetails.SETRANGE("Document Type","Document Type");
                  StrOrderDetails.SETRANGE("Document No.","Document No.");
                  StrOrderDetails.SETRANGE("Document Line No.","Line No.");
                  StrOrderDetails.SETRANGE("Include PIT Calculation",TRUE);
                  IF StrOrderDetails.FINDSET THEN
                    REPEAT
                      IF SalesHeader."Price Inclusive of Taxes" THEN
                        StructureDetails.TESTFIELD(CVD,FALSE);
                      BaseAmountFixed := 0;
                      BaseAmountVariable := 0;
                      BaseAmount := 0;
                      StrOrderLineDetails.RESET;
                      StrOrderLineDetails.SETRANGE(Type,StrOrderLineDetails.Type::Sale);
                      StrOrderLineDetails.SETRANGE("Calculation Order",StrOrderDetails."Calculation Order");
                      StrOrderLineDetails.SETRANGE("Document Type","Document Type");
                      StrOrderLineDetails.SETRANGE("Document No.","Document No.");
                      StrOrderLineDetails.SETRANGE("Structure Code",Structure);
                      StrOrderLineDetails.SETRANGE("Item No.","No.");
                      StrOrderLineDetails.SETRANGE("Line No.","Line No.");
                      StrOrderLineDetails.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
                      StrOrderLineDetails.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
                      StrOrderLineDetails.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
                      IF NOT StrOrderLineDetails.FINDFIRST THEN BEGIN
                        StrOrderLineDetails.INIT;
                        StrOrderLineDetails.Type := StrOrderDetails.Type;
                        StrOrderLineDetails."Document Type" := StrOrderDetails."Document Type";
                        StrOrderLineDetails."Document No." := StrOrderDetails."Document No.";
                        StrOrderLineDetails."Structure Code" := StrOrderDetails."Structure Code";
                        StrOrderLineDetails."Item No." := "No.";
                        StrOrderLineDetails."Line No." := "Line No.";
                        StrOrderLineDetails."Calculation Order" := StrOrderDetails."Calculation Order";
                        StrOrderLineDetails."Tax/Charge Type" := StrOrderDetails."Tax/Charge Type";
                        StrOrderLineDetails."Tax/Charge Group" := StrOrderDetails."Tax/Charge Group";
                        StrOrderLineDetails."Tax/Charge Code" := StrOrderDetails."Tax/Charge Code";
                        StrOrderLineDetails."Calculation Type" := StrOrderDetails."Calculation Type";
                        StrOrderLineDetails."Calculation Value" := StrOrderDetails."Calculation Value";
                        StrOrderLineDetails."Quantity Per" := StrOrderDetails."Quantity Per";
                        StrOrderLineDetails."Loading on Inventory" := StrOrderDetails."Loading on Inventory";
                        StrOrderLineDetails."% Loading on Inventory" := StrOrderDetails."% Loading on Inventory";
                        StrOrderLineDetails."Header/Line" := StrOrderDetails."Header/Line";
                        StrOrderLineDetails."Include Base" := StrOrderDetails."Include Base";
                        StrOrderLineDetails."Include Line Discount" := StrOrderDetails."Include Line Discount";
                        StrOrderLineDetails."Include Invoice Discount" := StrOrderDetails."Include Invoice Discount";
                        StrOrderLineDetails."Payable to Third Party" := StrOrderDetails."Payable to Third Party";
                        StrOrderLineDetails.LCY := StrOrderDetails.LCY;
                        StrOrderLineDetails."Available for VAT input" := StrOrderDetails."Available for VAT Input";
                        StrOrderLineDetails.CVD := StrOrderDetails.CVD;
                        StrOrderLineDetails."Price Inclusive of Tax" := StrOrderDetails."Price Inclusive of Tax";
                        StrOrderLineDetails."Include PIT Calculation" := StrOrderDetails."Include PIT Calculation";
                        IF StrOrderDetails."Payable to Third Party" THEN
                          StrOrderDetails.TESTFIELD("Third Party Code");
                        StrOrderLineDetails."Third Party Code" := StrOrderDetails."Third Party Code";
                        IF ((StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges) OR
                            (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Other Taxes"))
                        THEN
                          StrOrderDetails.TESTFIELD("Account No.");
                        StrOrderLineDetails."Account No." := StrOrderDetails."Account No.";
                        StrOrderLineDetails."Base Formula" := StrOrderDetails."Base Formula";
                        IF StrOrderLineDetails."Base Formula" <> '' THEN BEGIN
                          EvaluateExpressionPIT(TRUE,StrOrderLineDetails."Base Formula",SalesLine,StrOrderDetails,
                            BaseAmountFixed);
                          EvaluateExpressionPITVariable(TRUE,StrOrderLineDetails."Base Formula",SalesLine,StrOrderDetails,
                            BaseAmountVariable);
                        END ELSE BEGIN
                          BaseAmountFixed := 0;
                          BaseAmountVariable := 0;
                        END;

                        IF StrOrderDetails."Include Base" THEN
                          BaseAmountVariable := BaseAmountVariable + Quantity;
                        IF StrOrderDetails."Include Line Discount" THEN
                          BaseAmountFixed := BaseAmountFixed - "Line Discount Amount";
                        IF StrOrderDetails."Include Invoice Discount" THEN BEGIN
                          BaseAmountFixed := BaseAmountFixed + "Inv Discount Fixed";
                          BaseAmountVariable := BaseAmountVariable - "Inv Discount Variable";
                        END;

                        IF SalesHeader."Currency Factor" <> 0 THEN
                          CFactor := SalesHeader."Currency Factor"
                        ELSE
                          CFactor := 1;

                        IF NOT StrOrderDetails.LCY THEN
                          CFactor := 1;

                        IF Type = Type::Item THEN
                          IF ((StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges) OR
                              (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Other Taxes"))
                          THEN BEGIN
                            IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::"Fixed Value" THEN BEGIN
                              StrOrderLineDetails."Fixed Base Amount" := 0;
                              StrOrderLineDetails."Fixed Amount" := (StrOrderDetails."Calculation Value" * CFactor);
                            END;
                            IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::Percentage THEN BEGIN
                              StrOrderLineDetails."Fixed Base Amount" := BaseAmountFixed;
                              StrOrderLineDetails."Variable Base Amount" := BaseAmountVariable;
                              StrOrderLineDetails."Variable Amount" := (StrOrderDetails."Calculation Value" * CFactor) *
                                BaseAmountVariable / 100;
                              StrOrderLineDetails."Fixed Amount" := (StrOrderDetails."Calculation Value" * CFactor) *
                                BaseAmountFixed / 100;
                            END;
                            IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::"Amount Per Qty" THEN BEGIN
                              StrOrderLineDetails."Fixed Base Amount" := 0;
                              StrOrderLineDetails."Fixed Amount" :=
                                (StrOrderDetails."Calculation Value" * CFactor) * Quantity / StrOrderDetails."Quantity Per";
                            END;
                          END;

                        IF Type IN [Type::Item] THEN
                          IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Excise THEN BEGIN
                            IF Trading THEN BEGIN
                              IF ExecuteDetailRg23D THEN BEGIN
                                CVD := GetBaseAmount(BaseAmountFixed,SalesLine);
                                IF NOT MRP THEN
                                  "Amount Added to Excise Base" := BaseAmountFixed
                                ELSE
                                  "Amount Added to Excise Base" := CalcAmountAddedToExciseBase(SalesLine);
                                "Excise Base Variable" := BaseAmountVariable;
                                IF "Amount Added to Excise Base" <> 0 THEN
                                  "Excise Base Amount" := "Amount Added to Excise Base";
                                UpdateTaxAmountsPIT(SalesLine,StrOrderLineDetails);
                                StrOrderLineDetails."Fixed Base Amount" := "Amount Added to Excise Base";
                                StrOrderLineDetails."Variable Base Amount" := BaseAmountVariable;
                              END;
                            END ELSE BEGIN
                              IF NOT MRP THEN
                                "Amount Added to Excise Base" := BaseAmountFixed
                              ELSE
                                "Amount Added to Excise Base" := CalcAmountAddedToExciseBase(SalesLine);
                              "Excise Base Variable" := BaseAmountVariable;
                              CVD := StrOrderDetails.CVD;
                              IF CVD AND ("CIF Amount" + "BCD Amount" <> 0) THEN BEGIN
                                "Amount Added to Excise Base" := "CIF Amount" + "BCD Amount";
                                BaseAmountFixed := "CIF Amount" + "BCD Amount";
                              END;
                              IF "Amount Added to Excise Base" <> 0 THEN
                                "Excise Base Amount" := "Amount Added to Excise Base";
                              UpdateTaxAmountsPIT(SalesLine,StrOrderLineDetails);
                              StrOrderLineDetails."Fixed Base Amount" := BaseAmountFixed;
                              StrOrderLineDetails."Variable Base Amount" := BaseAmountVariable;
                            END;
                            StrOrderLineDetails."Fixed Amount" := 0;
                            StrOrderLineDetails."Variable Amount" := 0;
                            SalesLineBuffer.RESET;
                            SalesLineBuffer.SETRANGE("Document Type","Document Type");
                            SalesLineBuffer.SETRANGE("Document No.","Document No.");
                            SalesLineBuffer.SETRANGE("Document Line No." ,"Line No.");
                            SalesLineBuffer.SETRANGE(Type,StrOrderLineDetails."Tax/Charge Type");
                            IF SalesLineBuffer.FINDSET THEN
                              REPEAT
                                StrOrderLineDetails."Fixed Amount" := StrOrderLineDetails."Fixed Amount" +
                                  SalesLineBuffer."Fixed Amount";
                                StrOrderLineDetails."Variable Amount" := StrOrderLineDetails."Variable Amount" +
                                  SalesLineBuffer."Variable Amount";
                              UNTIL SalesLineBuffer.NEXT = 0;
                          END;

                        IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Sales Tax" THEN BEGIN
                          "Amount Added to Tax Base" := ROUND(BaseAmountFixed,Currency."Amount Rounding Precision");
                          "Tax Base Variable" := BaseAmountVariable;
                          UpdateTaxAmountsPIT(SalesLine,StrOrderLineDetails);
                          StrOrderLineDetails."Base Amount" := "Tax Base Amount";
                          StrOrderLineDetails.Amount := "Amount Including Tax" - "Tax Base Amount";

                          StrOrderLineDetails."Fixed Amount" := 0;
                          StrOrderLineDetails."Variable Amount" := 0;
                          SalesLineBuffer.RESET;
                          SalesLineBuffer.SETRANGE("Document Type","Document Type");
                          SalesLineBuffer.SETRANGE("Document No.","Document No.");
                          SalesLineBuffer.SETRANGE("Document Line No.","Line No.");
                          SalesLineBuffer.SETRANGE(Type,StrOrderLineDetails."Tax/Charge Type");
                          IF SalesLineBuffer.FINDSET THEN
                            REPEAT
                              StrOrderLineDetails."Fixed Amount" := StrOrderLineDetails."Fixed Amount" +
                                SalesLineBuffer."Fixed Amount";
                              StrOrderLineDetails."Variable Amount" := StrOrderLineDetails."Variable Amount" +
                                SalesLineBuffer."Variable Amount";
                            UNTIL SalesLineBuffer.NEXT = 0;
                        END;

                        IF "Currency Factor" <> 0 THEN
                          CFactor := "Currency Factor"
                        ELSE
                          CFactor := 1;

                        IF "Currency Code" <> '' THEN
                          Currency.GET("Currency Code");

                        StrOrderLineDetails.INSERT;
                      END;
                    UNTIL StrOrderDetails.NEXT = 0;

                  FixedAmt := 0;
                  VariableAmt := 0;
                  FixedAmt := "Unit Price Incl. of Tax" * Quantity;
                  VariableAmt := Quantity;
                  StrOrderLineDetails.RESET;
                  StrOrderLineDetails.SETCURRENTKEY(Type,"Document Type","Document No.","Structure Code","Item No.","Line No.");
                  StrOrderLineDetails.SETRANGE(Type,StrOrderLineDetails.Type::Sale);
                  StrOrderLineDetails.SETRANGE("Document Type","Document Type");
                  StrOrderLineDetails.SETRANGE("Document No.","Document No.");
                  StrOrderLineDetails.SETRANGE("Structure Code","PIT Structure");
                  StrOrderLineDetails.SETRANGE("Item No.","No.");
                  StrOrderLineDetails.SETRANGE("Line No.","Line No.");
                  StrOrderLineDetails.CALCSUMS("Fixed Amount","Variable Amount");
                  FixedAmt -= StrOrderLineDetails."Fixed Amount";
                  VariableAmt += StrOrderLineDetails."Variable Amount";
                  "Unit Price" := 0;
                  IF VariableAmt <> 0 THEN BEGIN
                    "Unit Price" := ROUND(FixedAmt / VariableAmt,GetRoundingPrecisionUnitPrice);
                    IF "Unit Price" < 0 THEN
                      FIELDERROR("Unit Price");
                    ValidateUnitPrice;
                    ChkQtyUpdatioAfterDDPLA;
                  END;
                END;
              SalesLine.MODIFY;
            UNTIL SalesLine.NEXT = 0;
            IF I = 2 THEN BEGIN
              IF "Calc. Inv. Discount (%)" THEN
                CalcInvDis.CalculateWithSalesHeader(SalesHeader,SalesLine);
              CalculateStructuresPIT(SalesHeader);
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE EvaluateExpressionPIT@1500022(IsTestExpression@1500004 : Boolean;Expression@1500003 : Code[250];SalesLine@1500002 : Record 37;VAR StructureOrderDetails@1500001 : Record 13794;VAR BaseAmountFixed@1500000 : Decimal) : Decimal;
    VAR
      StrOrderLineDetails2@1500021 : Record 13795;
      StructureOrderDetails1@1500020 : Record 13794;
      Result@1500019 : Decimal;
      CallLevel@1500018 : Integer;
      Parantheses@1500017 : Integer;
      IsExpression@1500016 : Boolean;
      Operators@1500015 : Text[8];
      OperatorNo@1500014 : Integer;
      IsFilter@1500013 : Boolean;
      i@1500012 : Integer;
      RightResult@1500011 : Decimal;
      LeftResult@1500010 : Decimal;
      RightOperand@1500009 : Text[250];
      LeftOperand@1500008 : Text[250];
      Operator@1500007 : Char;
      DivisionError@1500006 : Boolean;
      Exp@1500005 : Integer;
    BEGIN
      Result := 0;
      CallLevel := CallLevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpressionPIT(IsTestExpression,LeftOperand,SalesLine,StructureOrderDetails,BaseAmountFixed);
          RightResult := EvaluateExpressionPIT(IsTestExpression,RightOperand,SalesLine,StructureOrderDetails,BaseAmountFixed);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpressionPIT(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),SalesLine,
                StructureOrderDetails,BaseAmountFixed)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 10) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsTestExpression THEN BEGIN
                EVALUATE(Exp,Expression);
                StructureOrderDetails1.SETRANGE(Type,StructureOrderDetails1.Type::Sale);
                StructureOrderDetails1.SETRANGE("Document Type",StructureOrderDetails."Document Type");
                StructureOrderDetails1.SETRANGE("Document No.",StructureOrderDetails."Document No.");
                StructureOrderDetails1.SETRANGE("Structure Code",StructureOrderDetails."Structure Code");
                StructureOrderDetails1.SETRANGE("Calculation Order",Exp);
                StructureOrderDetails1.SETRANGE("Document Line No.",StructureOrderDetails."Document Line No.");
                IF StructureOrderDetails1.FINDFIRST THEN BEGIN
                  StrOrderLineDetails2.RESET;
                  StrOrderLineDetails2.SETCURRENTKEY("Document Type","Document No.",Type);
                  StrOrderLineDetails2.SETRANGE("Document Type",StructureOrderDetails1."Document Type");
                  StrOrderLineDetails2.SETRANGE("Document No.",StructureOrderDetails1."Document No.");
                  StrOrderLineDetails2.SETRANGE("Item No.",SalesLine."No.");
                  StrOrderLineDetails2.SETRANGE("Line No.",SalesLine."Line No.");
                  StrOrderLineDetails2.SETRANGE("Structure Code",StructureOrderDetails1."Structure Code");
                  StrOrderLineDetails2.SETRANGE("Tax/Charge Code",StructureOrderDetails1."Tax/Charge Code");
                  EVALUATE(Exp,Expression);
                  StrOrderLineDetails2.SETRANGE("Calculation Order",Exp);
                  IF StrOrderLineDetails2.FINDFIRST THEN
                    Result := Result + StrOrderLineDetails2."Fixed Amount";
                END ELSE
                  EVALUATE(Result,Expression);
              END;
          END;
      END;
      CallLevel := CallLevel - 1;
      BaseAmountFixed := Result;
      EXIT(Result);
    END;

    LOCAL PROCEDURE EvaluateExpressionPITVariable@1500037(IsTestExpression@1500004 : Boolean;Expression@1500003 : Code[250];SalesLine@1500002 : Record 37;VAR StructureOrderDetails@1500001 : Record 13794;VAR BaseAmountVariable@1500000 : Decimal) : Decimal;
    VAR
      StrOrderLineDetails2@1500021 : Record 13795;
      StructureOrderDetails1@1500020 : Record 13794;
      Result@1500019 : Decimal;
      CallLevel@1500018 : Integer;
      Parantheses@1500017 : Integer;
      IsExpression@1500016 : Boolean;
      Operators@1500015 : Text[8];
      OperatorNo@1500014 : Integer;
      IsFilter@1500013 : Boolean;
      i@1500012 : Integer;
      RightResult@1500011 : Decimal;
      LeftResult@1500010 : Decimal;
      RightOperand@1500009 : Text[250];
      LeftOperand@1500008 : Text[250];
      Operator@1500007 : Char;
      DivisionError@1500006 : Boolean;
      Exp@1500005 : Integer;
    BEGIN
      Result := 0;
      CallLevel := CallLevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpressionPITVariable(IsTestExpression,LeftOperand,SalesLine,StructureOrderDetails,BaseAmountVariable)
            ;
          RightResult := EvaluateExpressionPITVariable(IsTestExpression,RightOperand,SalesLine,StructureOrderDetails,
              BaseAmountVariable);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpressionPITVariable(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),SalesLine,
                StructureOrderDetails,BaseAmountVariable)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 10) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsTestExpression THEN BEGIN
                EVALUATE(Exp,Expression);
                StructureOrderDetails1.SETRANGE(Type,StructureOrderDetails1.Type::Sale);
                StructureOrderDetails1.SETRANGE("Document Type",StructureOrderDetails."Document Type");
                StructureOrderDetails1.SETRANGE("Document No.",StructureOrderDetails."Document No.");
                StructureOrderDetails1.SETRANGE("Structure Code",StructureOrderDetails."Structure Code");
                StructureOrderDetails1.SETRANGE("Document Line No.",StructureOrderDetails."Document Line No.");
                StructureOrderDetails1.SETRANGE("Calculation Order",Exp);
                IF StructureOrderDetails1.FINDFIRST THEN BEGIN
                  StrOrderLineDetails2.RESET;
                  StrOrderLineDetails2.SETCURRENTKEY("Document Type","Document No.",Type);
                  StrOrderLineDetails2.SETRANGE("Document Type",StructureOrderDetails1."Document Type");
                  StrOrderLineDetails2.SETRANGE("Document No.",StructureOrderDetails1."Document No.");
                  StrOrderLineDetails2.SETRANGE("Item No.",SalesLine."No.");
                  StrOrderLineDetails2.SETRANGE("Line No.",SalesLine."Line No.");
                  StrOrderLineDetails2.SETRANGE("Structure Code",StructureOrderDetails1."Structure Code");
                  StrOrderLineDetails2.SETRANGE("Tax/Charge Code",StructureOrderDetails1."Tax/Charge Code");
                  EVALUATE(Exp,Expression);
                  StrOrderLineDetails2.SETRANGE("Calculation Order",Exp);
                  IF StrOrderLineDetails2.FINDFIRST THEN
                    Result := Result + StrOrderLineDetails2."Variable Amount";
                END ELSE
                  EVALUATE(Result,Expression);
              END;
          END;
      END;
      CallLevel := CallLevel - 1;
      BaseAmountVariable := Result;
      EXIT(Result);
    END;

    PROCEDURE UpdateExciseAmountPIT@1500030(SalesLine@1500001 : Record 37);
    VAR
      ExciseProdPostingGrp@1500004 : Record 13710;
      ItemUOM@1500003 : Record 5404;
      ExcisePostingSetup@1500002 : Record 13711;
      SalesLineBuffer@1500000 : Record 16583;
    BEGIN
      GetSalesHeader;
      IF ("Amount Added to Excise Base" <> 0) OR ("Excise Base Variable" <> 0) THEN BEGIN
        "Excise Base Amount" := "Amount Added to Excise Base";
        IF ExciseProdPostingGrp.GET("Excise Prod. Posting Group") THEN BEGIN
          IF ExciseProdPostingGrp."Unit of Measure Code" <> '' THEN BEGIN
            IF Type = Type::Item THEN BEGIN
              IF ItemUOM.GET("No.",ExciseProdPostingGrp."Unit of Measure Code") THEN BEGIN
                "Excise Base Quantity" := ROUND("Quantity (Base)" / ItemUOM."Qty. per Unit of Measure");
              END ELSE
                "Excise Base Quantity" := 0;
            END ELSE
              IF Type = Type::"Fixed Asset" THEN
                "Excise Base Quantity" := Quantity;
          END ELSE
            "Excise Base Quantity" := "Quantity (Base)";
        END;

        ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
        ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
        IF SalesHeader."Posting Date" <> 0D THEN
          ExcisePostingSetup.SETRANGE("From Date",0D,SalesHeader."Posting Date")
        ELSE
          ExcisePostingSetup.SETRANGE("From Date",0D,WORKDATE);
        IF ExcisePostingSetup.FINDLAST THEN BEGIN
          SalesLineBuffer.RESET;
          SalesLineBuffer.SETRANGE("Document Type","Document Type");
          SalesLineBuffer.SETRANGE("Document No.","Document No.");
          SalesLineBuffer.SETRANGE("Document Line No.","Line No.");
          SalesLineBuffer.SETRANGE(Type,SalesLineBuffer.Type::Excise);
          SalesLineBuffer.SETRANGE("Component Code",1);
          IF SalesLineBuffer.FINDFIRST THEN BEGIN
            CASE ExcisePostingSetup."BED Calculation Type" OF
              ExcisePostingSetup."BED Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF ExcisePostingSetup."BED Calculation Formula" <> '' THEN BEGIN
                      SalesLineBuffer."Fixed Amount" :=
                        (EvaluateExpressionFixed(TRUE,ExcisePostingSetup."BED Calculation Formula",Rec) *
                         ExcisePostingSetup."BED %" / 100);
                      SalesLineBuffer."Variable Amount" :=
                        EvaluateExpressionVariable(TRUE,ExcisePostingSetup."BED Calculation Formula",Rec) *
                        ExcisePostingSetup."BED %" / 100;
                    END ELSE BEGIN
                      SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."BED %" * "Excise Base Amount" / 100);
                      SalesLineBuffer."Variable Amount" := ExcisePostingSetup."BED %" * "Excise Base Variable" / 100;
                    END;
                END;
              ExcisePostingSetup."BED Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."BED Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."BED Calculation Type"::"% of Accessable Value":
                SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."BED %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."BED Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."BED %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."BED Amount Per Unit" * "Excise Base Quantity");
                    SalesLineBuffer."Variable Amount" := ExcisePostingSetup."BED %" * "Excise Base Variable" / 100;
                  END;
                END;
              ExcisePostingSetup."BED Calculation Type"::"% of MRP":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END
                  ELSE
                    IF MRP THEN
                      SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."BED %" * CalcAmountAddedToExciseBase(SalesLine) / 100)
                    ELSE
                      SalesLineBuffer."Fixed Amount" := 0;
                END;
            END;
            IF SalesHeader.Trading THEN BEGIN
              SalesLineBuffer."Fixed Amount" := BEDAmt;
              SalesLineBuffer."Variable Amount" := 0;
            END;
            SalesLineBuffer.MODIFY;
          END;

          SalesLineBuffer.SETRANGE("Component Code",4);
          IF SalesLineBuffer.FINDFIRST THEN BEGIN
            CASE ExcisePostingSetup."SED Calculation Type" OF
              ExcisePostingSetup."SED Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF ExcisePostingSetup."SED Calculation Formula" <> '' THEN BEGIN
                      SalesLineBuffer."Fixed Amount" := EvaluateExpressionFixed(TRUE,ExcisePostingSetup."SED Calculation Formula",Rec) *
                        ExcisePostingSetup."SED %" / 100;
                      SalesLineBuffer."Variable Amount" :=
                        EvaluateExpressionVariable(TRUE,ExcisePostingSetup."SED Calculation Formula",Rec) *
                        ExcisePostingSetup."SED %" / 100;
                    END ELSE
                      IF ExcisePostingSetup."SED Calculation Formula" = '' THEN BEGIN
                        SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."SED %" * "Excise Base Amount" / 100);
                        SalesLineBuffer."Variable Amount" := ExcisePostingSetup."SED %" * "Excise Base Variable" / 100;
                      END;
                END;
              ExcisePostingSetup."SED Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."SED Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."SED Calculation Type"::"% of Accessable Value":
                SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."SED %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."SED Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."SED %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."SED Amount Per Unit" * "Excise Base Quantity");
                    SalesLineBuffer."Variable Amount" := (ExcisePostingSetup."SED %" * "Excise Base Variable" / 100);
                  END;
                END;
              ExcisePostingSetup."SED Calculation Type"::"% of MRP":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF MRP THEN
                      SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."SED %" * CalcAmountAddedToExciseBase(SalesLine)/ 100)
                    ELSE
                      SalesLineBuffer."Fixed Amount" := 0;
                END;
            END;
            IF SalesHeader.Trading THEN BEGIN
              SalesLineBuffer."Fixed Amount" := SEDAmt;
              SalesLineBuffer."Variable Amount" := 0;
            END;
            SalesLineBuffer.MODIFY;
          END;

          SalesLineBuffer.SETRANGE("Component Code",2);
          IF SalesLineBuffer.FINDFIRST THEN BEGIN
            CASE ExcisePostingSetup."AED(GSI) Calculation Type" OF
              ExcisePostingSetup."AED(GSI) Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" <> '' THEN BEGIN
                      SalesLineBuffer."Fixed Amount" :=
                        EvaluateExpressionFixed(TRUE,ExcisePostingSetup."AED(GSI/TTA) Calc. Formula",Rec) *
                        ExcisePostingSetup."AED(GSI) %" / 100;
                      SalesLineBuffer."Variable Amount" :=
                        EvaluateExpressionVariable(TRUE,ExcisePostingSetup."AED(GSI/TTA) Calc. Formula",Rec) *
                        ExcisePostingSetup."AED(GSI) %" / 100;
                    END ELSE
                      IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" = '' THEN BEGIN
                        SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."AED(GSI) %" * "Excise Base Amount" / 100);
                        SalesLineBuffer."Variable Amount" := ExcisePostingSetup."AED(GSI) %" * "Excise Base Variable" / 100;
                      END;
                END;
              ExcisePostingSetup."AED(GSI) Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."AED(GSI) Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."AED(GSI) Calculation Type"::"% of Accessable Value":
                SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."AED(GSI) %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."AED(GSI) Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."AED(GSI) %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."AED(GSI) Amount Per Unit" * "Excise Base Quantity");
                    SalesLineBuffer."Variable Amount" := (ExcisePostingSetup."AED(GSI) %" * "Excise Base Variable" / 100);
                  END;
                END;
              ExcisePostingSetup."AED(GSI) Calculation Type"::"% of MRP":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF MRP THEN
                      SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."AED(GSI) %" * CalcAmountAddedToExciseBase(SalesLine) / 100)
                    ELSE
                      SalesLineBuffer."Fixed Amount" := 0;
                END;
            END;
            IF SalesHeader.Trading THEN BEGIN
              SalesLineBuffer."Fixed Amount" := "AED(GSI)Amt";
              SalesLineBuffer."Variable Amount" := 0;
            END;
            SalesLineBuffer.MODIFY;
          END;

          SalesLineBuffer.SETRANGE("Component Code",7);
          IF SalesLineBuffer.FINDFIRST THEN BEGIN
            CASE ExcisePostingSetup."NCCD Calculation Type" OF
              ExcisePostingSetup."NCCD Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF ExcisePostingSetup."NCCD Calculation Formula" <> '' THEN BEGIN
                      SalesLineBuffer."Fixed Amount" :=
                        EvaluateExpressionFixed(TRUE,ExcisePostingSetup."NCCD Calculation Formula",Rec) *
                        ExcisePostingSetup."NCCD %" / 100;
                      SalesLineBuffer."Variable Amount" :=
                        EvaluateExpressionVariable(TRUE,ExcisePostingSetup."NCCD Calculation Formula",Rec) *
                        ExcisePostingSetup."NCCD %" / 100;
                    END ELSE
                      IF ExcisePostingSetup."NCCD Calculation Formula" = '' THEN BEGIN
                        SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."NCCD %" * "Excise Base Amount" / 100);
                        SalesLineBuffer."Variable Amount" := ExcisePostingSetup."NCCD %" * "Excise Base Variable" / 100;
                      END;
                END;
              ExcisePostingSetup."NCCD Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."NCCD Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."NCCD Calculation Type"::"% of Accessable Value":
                SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."NCCD %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."NCCD Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."NCCD %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."NCCD Amount Per Unit" * "Excise Base Quantity");
                    SalesLineBuffer."Variable Amount" := (ExcisePostingSetup."NCCD %" * "Excise Base Variable" / 100);
                  END;
                END;
              ExcisePostingSetup."NCCD Calculation Type"::"% of MRP":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF MRP THEN
                      SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."NCCD %" * CalcAmountAddedToExciseBase(SalesLine) / 100)
                    ELSE
                      SalesLineBuffer."Fixed Amount" := 0;
                END;
            END;
            IF SalesHeader.Trading THEN BEGIN
              SalesLineBuffer."Fixed Amount" := NCCDAmt;
              SalesLineBuffer."Variable Amount" := 0;
            END;
            SalesLineBuffer.MODIFY;
          END;

          SalesLineBuffer.SETRANGE("Component Code",3);
          IF SalesLineBuffer.FINDFIRST THEN BEGIN
            CASE ExcisePostingSetup."AED(TTA) Calculation Type" OF
              ExcisePostingSetup."AED(TTA) Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" <> '' THEN BEGIN
                      SalesLineBuffer."Fixed Amount" :=
                        EvaluateExpressionFixed(TRUE,ExcisePostingSetup."AED(GSI/TTA) Calc. Formula",Rec) *
                        ExcisePostingSetup."AED(TTA) %" / 100;
                      SalesLineBuffer."Variable Amount" :=
                        EvaluateExpressionVariable(TRUE,ExcisePostingSetup."AED(GSI/TTA) Calc. Formula",Rec) *
                        ExcisePostingSetup."AED(TTA) %" / 100;
                    END ELSE
                      IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" = '' THEN BEGIN
                        SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."AED(TTA) %" * "Excise Base Amount" / 100);
                        SalesLineBuffer."Variable Amount" := ExcisePostingSetup."AED(TTA) %" * "Excise Base Variable" / 100;
                      END;
                END;
              ExcisePostingSetup."AED(TTA) Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."AED(TTA) Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."AED(TTA) Calculation Type"::"% of Accessable Value":
                SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."AED(TTA) %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."AED(TTA) Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."AED(TTA) %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."AED(TTA) Amount Per Unit" * "Excise Base Quantity");
                    SalesLineBuffer."Variable Amount" := (ExcisePostingSetup."AED(TTA) %" * "Excise Base Variable" / 100);
                  END;
                END;
              ExcisePostingSetup."AED(TTA) Calculation Type"::"% of MRP":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF MRP THEN
                      SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."AED(TTA) %" * CalcAmountAddedToExciseBase(SalesLine) / 100)
                    ELSE
                      SalesLineBuffer."Fixed Amount" := 0;
                END;
            END;
            IF SalesHeader.Trading THEN BEGIN
              SalesLineBuffer."Fixed Amount" := "AED(TTA)Amt";
              SalesLineBuffer."Variable Amount" := 0;
            END;
            SalesLineBuffer.MODIFY;
          END;

          SalesLineBuffer.SETRANGE("Component Code",5);
          IF SalesLineBuffer.FINDFIRST THEN BEGIN
            CASE ExcisePostingSetup."SAED Calculation Type" OF
              ExcisePostingSetup."SAED Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF ExcisePostingSetup."SAED Calculation Formula" <> '' THEN BEGIN
                      SalesLineBuffer."Fixed Amount" :=
                        EvaluateExpressionFixed(TRUE,ExcisePostingSetup."SAED Calculation Formula",Rec) *
                        ExcisePostingSetup."SAED %" / 100;
                      SalesLineBuffer."Variable Amount" :=
                        EvaluateExpressionVariable(TRUE,ExcisePostingSetup."SAED Calculation Formula",Rec) *
                        ExcisePostingSetup."SAED %" / 100;
                    END ELSE
                      IF ExcisePostingSetup."SAED Calculation Formula" = '' THEN BEGIN
                        SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."SAED %" * "Excise Base Amount" / 100);
                        SalesLineBuffer."Variable Amount" := ExcisePostingSetup."SAED %" * "Excise Base Variable" / 100;
                      END;
                END;
              ExcisePostingSetup."SAED Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."SAED Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."SAED Calculation Type"::"% of Accessable Value":
                SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."SAED %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."SAED Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."SAED %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."SAED Amount Per Unit" * "Excise Base Quantity");
                    SalesLineBuffer."Variable Amount" := (ExcisePostingSetup."SAED %" * "Excise Base Variable" / 100);
                  END;
                END;
              ExcisePostingSetup."SAED Calculation Type"::"% of MRP":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF MRP THEN
                      SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."SAED %" * CalcAmountAddedToExciseBase(SalesLine) / 100)
                    ELSE
                      SalesLineBuffer."Fixed Amount" := 0;
                END;
            END;
            IF SalesHeader.Trading THEN BEGIN
              SalesLineBuffer."Fixed Amount" := SAEDAmt;
              SalesLineBuffer."Variable Amount" := 0;
            END;
            SalesLineBuffer.MODIFY;
          END;

          SalesLineBuffer.SETRANGE("Component Code",9);
          IF SalesLineBuffer.FINDFIRST THEN BEGIN
            CASE ExcisePostingSetup."ADE Calculation Type" OF
              ExcisePostingSetup."ADE Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF ExcisePostingSetup."ADE Calculation Formula" <> '' THEN BEGIN
                      SalesLineBuffer."Fixed Amount" := EvaluateExpressionFixed(TRUE,ExcisePostingSetup."ADE Calculation Formula",Rec) *
                        ExcisePostingSetup."ADE %" / 100;
                      SalesLineBuffer."Variable Amount" :=
                        EvaluateExpressionVariable(TRUE,ExcisePostingSetup."ADE Calculation Formula",Rec) *
                        ExcisePostingSetup."ADE %" / 100;
                    END ELSE
                      IF ExcisePostingSetup."ADE Calculation Formula" = '' THEN BEGIN
                        SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."ADE %" * "Excise Base Amount" / 100);
                        SalesLineBuffer."Variable Amount" := ExcisePostingSetup."ADE %" * "Excise Base Variable" / 100;
                      END;
                END;
              ExcisePostingSetup."ADE Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."ADE Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."ADE Calculation Type"::"% of Accessable Value":
                SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."ADE %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."ADE Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."ADE %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."ADE Amount Per Unit" * "Excise Base Quantity");
                    SalesLineBuffer."Variable Amount" := (ExcisePostingSetup."ADE %" * "Excise Base Variable" / 100);
                  END;
                END;
              ExcisePostingSetup."ADE Calculation Type"::"% of MRP":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF MRP THEN
                      SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."ADE %" * CalcAmountAddedToExciseBase(SalesLine) / 100)
                    ELSE
                      SalesLineBuffer."Fixed Amount" := 0;
                END;
            END;
            IF SalesHeader.Trading THEN BEGIN
              SalesLineBuffer."Fixed Amount" := ADEAmt;
              SalesLineBuffer."Variable Amount" := 0;
            END;
            SalesLineBuffer.MODIFY;
          END;

          SalesLineBuffer.SETRANGE("Component Code",8);
          IF SalesLineBuffer.FINDFIRST THEN BEGIN
            CASE ExcisePostingSetup."ADET Calculation Type" OF
              ExcisePostingSetup."ADET Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF ExcisePostingSetup."ADET Calculation Formula" <> '' THEN BEGIN
                      SalesLineBuffer."Fixed Amount" := EvaluateExpressionFixed(TRUE,ExcisePostingSetup."ADET Calculation Formula",Rec) *
                        ExcisePostingSetup."ADET %" / 100;
                      SalesLineBuffer."Variable Amount" :=
                        EvaluateExpressionVariable(TRUE,ExcisePostingSetup."ADET Calculation Formula",Rec) *
                        ExcisePostingSetup."ADET %" / 100;
                    END ELSE
                      IF ExcisePostingSetup."ADET Calculation Formula" = '' THEN BEGIN
                        SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."ADET %" * "Excise Base Amount" / 100);
                        SalesLineBuffer."Variable Amount" := ExcisePostingSetup."ADET %" * "Excise Base Variable" / 100;
                      END;
                END;
              ExcisePostingSetup."ADET Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."ADET Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."ADET Calculation Type"::"% of Accessable Value":
                SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."ADET %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."ADET Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."ADET %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."ADET Amount Per Unit" * "Excise Base Quantity");
                    SalesLineBuffer."Variable Amount" := (ExcisePostingSetup."ADET %" * "Excise Base Variable" / 100);
                  END;
                END;
              ExcisePostingSetup."ADET Calculation Type"::"% of MRP":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF MRP THEN
                      SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."ADET %" * CalcAmountAddedToExciseBase(SalesLine) / 100)
                    ELSE
                      SalesLineBuffer."Fixed Amount" := 0;
                END;
            END;
            IF SalesHeader.Trading THEN BEGIN
              SalesLineBuffer."Fixed Amount" := ADETAmt;
              SalesLineBuffer."Variable Amount" := 0;
            END;
            SalesLineBuffer.MODIFY;
          END;

          SalesLineBuffer.SETRANGE("Component Code",6);
          IF SalesLineBuffer.FINDFIRST THEN BEGIN
            CASE ExcisePostingSetup."CESS Calculation Type" OF
              ExcisePostingSetup."CESS Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF ExcisePostingSetup."CESS Calculation Formula" <> '' THEN BEGIN
                      SalesLineBuffer."Fixed Amount" := EvaluateExpressionFixed(TRUE,ExcisePostingSetup."CESS Calculation Formula",Rec) *
                        ExcisePostingSetup."CESS %" / 100;
                      SalesLineBuffer."Variable Amount" :=
                        EvaluateExpressionVariable(TRUE,ExcisePostingSetup."CESS Calculation Formula",Rec) *
                        ExcisePostingSetup."CESS %" / 100;
                    END ELSE
                      IF ExcisePostingSetup."CESS Calculation Formula" = '' THEN BEGIN
                        SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."CESS %" * "Excise Base Amount" / 100);
                        SalesLineBuffer."Variable Amount" := ExcisePostingSetup."CESS %" * "Excise Base Variable" / 100;
                      END
                END;
              ExcisePostingSetup."CESS Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."CESS Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."CESS Calculation Type"::"% of Accessable Value":
                SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."CESS %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."CESS Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."CESS %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."CESS Amount Per Unit" * "Excise Base Quantity");
                    SalesLineBuffer."Variable Amount" := (ExcisePostingSetup."CESS %" * "Excise Base Variable" / 100);
                  END;
                END;
              ExcisePostingSetup."CESS Calculation Type"::"% of MRP":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF MRP THEN
                      SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."CESS %" * CalcAmountAddedToExciseBase(SalesLine) / 100)
                    ELSE
                      SalesLineBuffer."Fixed Amount" := 0;
                END;
            END;
            IF SalesHeader.Trading THEN BEGIN
              SalesLineBuffer."Fixed Amount" := CESSAmt;
              SalesLineBuffer."Variable Amount" := 0;
            END;
            SalesLineBuffer.MODIFY;
          END;

          SalesLineBuffer.SETRANGE("Component Code",10);
          IF SalesLineBuffer.FINDFIRST THEN BEGIN
            CASE ExcisePostingSetup."eCess Calculation Type" OF
              ExcisePostingSetup."eCess Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF ExcisePostingSetup."eCess Calculation Formula" <> '' THEN BEGIN
                      SalesLineBuffer."Fixed Amount" := EvaluateExpressionFixed(TRUE,ExcisePostingSetup."eCess Calculation Formula",Rec) *
                        ExcisePostingSetup."eCess %" / 100;
                      SalesLineBuffer."Variable Amount" :=
                        EvaluateExpressionVariable(TRUE,ExcisePostingSetup."eCess Calculation Formula",Rec) *
                        ExcisePostingSetup."eCess %" / 100;
                    END ELSE
                      IF ExcisePostingSetup."eCess Calculation Formula" = '' THEN BEGIN
                        SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."eCess %" * "Excise Base Amount" / 100);
                        SalesLineBuffer."Variable Amount" := ExcisePostingSetup."eCess %" * "Excise Base Variable" / 100;
                      END;
                END;
              ExcisePostingSetup."eCess Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."eCess Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."eCess Calculation Type"::"% of Accessable Value":
                SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."eCess %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."eCess Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."eCess %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."eCess Amount Per Unit" * "Excise Base Quantity");
                    SalesLineBuffer."Variable Amount" := (ExcisePostingSetup."eCess %" * "Excise Base Variable" / 100);
                  END;
                END;
              ExcisePostingSetup."eCess Calculation Type"::"% of MRP":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF MRP THEN
                      SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."eCess %" * CalcAmountAddedToExciseBase(SalesLine) / 100)
                    ELSE
                      SalesLineBuffer."Fixed Amount" := 0;
                END;
            END;
            IF SalesHeader.Trading THEN BEGIN
              SalesLineBuffer."Fixed Amount" := eCessAmt;
              SalesLineBuffer."Variable Amount" := 0;
            END;
            SalesLineBuffer.MODIFY;
          END;

          SalesLineBuffer.SETRANGE("Component Code",12);
          IF SalesLineBuffer.FINDFIRST THEN BEGIN
            CASE ExcisePostingSetup."SHE Cess Calculation Type" OF
              ExcisePostingSetup."SHE Cess Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF ExcisePostingSetup."SHE Cess Calculation Formula" <> '' THEN BEGIN
                      SalesLineBuffer."Fixed Amount" :=
                        EvaluateExpressionFixed(TRUE,ExcisePostingSetup."SHE Cess Calculation Formula",Rec) *
                        ExcisePostingSetup."SHE Cess %" / 100;
                      SalesLineBuffer."Variable Amount" :=
                        EvaluateExpressionVariable(TRUE,ExcisePostingSetup."SHE Cess Calculation Formula",Rec) *
                        ExcisePostingSetup."SHE Cess %" / 100;
                    END ELSE
                      IF ExcisePostingSetup."SHE Cess Calculation Formula" = '' THEN BEGIN
                        SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."SHE Cess %" * "Excise Base Amount" / 100);
                        SalesLineBuffer."Variable Amount" := ExcisePostingSetup."SHE Cess %" * "Excise Base Variable" / 100;
                      END;
                END;
              ExcisePostingSetup."SHE Cess Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."SHE Cess Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."SHE Cess Calculation Type"::"% of Accessable Value":
                SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."SHE Cess %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."SHE Cess Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."SHE Cess %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."SHE Cess Amount Per Unit" * "Excise Base Quantity");
                    SalesLineBuffer."Variable Amount" := (ExcisePostingSetup."SHE Cess %" * "Excise Base Variable" / 100);
                  END;
                END;
              ExcisePostingSetup."SHE Cess Calculation Type"::"% of MRP":
                BEGIN
                  IF Quantity = 0 THEN BEGIN
                    SalesLineBuffer."Fixed Amount" := 0;
                    SalesLineBuffer."Variable Amount" := 0;
                  END ELSE
                    IF MRP THEN
                      SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."SHE Cess %" * CalcAmountAddedToExciseBase(SalesLine) / 100)
                    ELSE
                      SalesLineBuffer."Fixed Amount" := 0;
                END;
            END;
            IF SalesHeader.Trading THEN BEGIN
              SalesLineBuffer."Fixed Amount" := SHECessAmt;
              SalesLineBuffer."Variable Amount" := 0;
            END;
            SalesLineBuffer.MODIFY;
          END;

          IF CVD THEN BEGIN
            SalesLineBuffer.RESET;
            SalesLineBuffer.SETRANGE("Document Type","Document Type");
            SalesLineBuffer.SETRANGE("Document No.","Document No.");
            SalesLineBuffer.SETRANGE("Document Line No." ,"Line No.");
            SalesLineBuffer.SETRANGE(Type,SalesLineBuffer.Type::Excise);
            SalesLineBuffer.SETRANGE("Component Code",11);
            IF SalesLineBuffer.FINDFIRST THEN BEGIN
              CASE ExcisePostingSetup."ADC VAT Calculation Type" OF
                ExcisePostingSetup."ADC VAT Calculation Type"::"Excise %":
                  BEGIN
                    IF Quantity = 0 THEN BEGIN
                      SalesLineBuffer."Fixed Amount" := 0;
                      SalesLineBuffer."Variable Amount" := 0;
                    END ELSE
                      IF ExcisePostingSetup."ADC VAT Calculation Formula" <> '' THEN BEGIN
                        SalesLineBuffer."Fixed Amount" :=
                          EvaluateExpressionFixed(TRUE,ExcisePostingSetup."ADC VAT Calculation Formula",Rec) *
                          ExcisePostingSetup."ADC VAT %" / 100;
                        SalesLineBuffer."Variable Amount" :=
                          EvaluateExpressionVariable(TRUE,ExcisePostingSetup."ADC VAT Calculation Formula",Rec) *
                          ExcisePostingSetup."ADC VAT %" / 100;
                      END ELSE
                        IF ExcisePostingSetup."ADC VAT Calculation Formula" = '' THEN BEGIN
                          SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."ADC VAT %" * "Excise Base Amount" / 100);
                          SalesLineBuffer."Variable Amount" := ExcisePostingSetup."ADC VAT %" * "Excise Base Variable" / 100;
                        END;
                  END;
                ExcisePostingSetup."ADC VAT Calculation Type"::"Amount/Unit":
                  BEGIN
                    TESTFIELD("Excise Base Quantity");
                    SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."ADC VAT Amount Per Unit" * "Excise Base Quantity";
                  END;
                ExcisePostingSetup."ADC VAT Calculation Type"::"% of Accessable Value":
                  SalesLineBuffer."Fixed Amount" := ExcisePostingSetup."ADC VAT %" * "Assessable Value" * Quantity / 100;
                ExcisePostingSetup."ADC VAT Calculation Type"::"Excise %+Amount/Unit":
                  BEGIN
                    IF Quantity = 0 THEN BEGIN
                      SalesLineBuffer."Fixed Amount" := 0;
                      SalesLineBuffer."Variable Amount" := 0;
                    END ELSE BEGIN
                      TESTFIELD("Excise Base Quantity");
                      SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."ADC VAT %" * "Excise Base Amount" / 100) +
                        (ExcisePostingSetup."ADC VAT Amount Per Unit" * "Excise Base Quantity");
                      SalesLineBuffer."Variable Amount" := (ExcisePostingSetup."ADC VAT %" * "Excise Base Variable" / 100);
                    END;
                  END;
                ExcisePostingSetup."ADC VAT Calculation Type"::"% of MRP":
                  BEGIN
                    IF Quantity = 0 THEN BEGIN
                      SalesLineBuffer."Fixed Amount" := 0;
                      SalesLineBuffer."Variable Amount" := 0;
                    END ELSE
                      IF MRP THEN
                        SalesLineBuffer."Fixed Amount" := (ExcisePostingSetup."ADC VAT %" * CalcAmountAddedToExciseBase(SalesLine) / 100)
                      ELSE
                        SalesLineBuffer."Fixed Amount" := 0;
                  END;
              END;
              IF SalesHeader.Trading THEN BEGIN
                SalesLineBuffer."Fixed Amount" := ADCVATAmt;
                SalesLineBuffer."Variable Amount" := 0;
              END;
              SalesLineBuffer.MODIFY;
            END;
          END;
        END ELSE
          InitExciseAmount;
      END ELSE
        InitExciseAmount;
    END;

    LOCAL PROCEDURE InsertSalesLineBuffer@1500035(SalesLine@1500004 : Record 37;TaxType@1500002 : 'Charges,Sales Tax,Excise,Other Taxes,Service Tax');
    VAR
      SaleslineBuffer@1500000 : Record 16583;
      DutyCode@1500005 : Record 16562;
      LineNoBuffer@1500001 : Integer;
    BEGIN
      LineNoBuffer := 0;
      IF TaxType = TaxType::"Sales Tax" THEN
        EXIT;
      SaleslineBuffer.RESET;
      SaleslineBuffer.SETRANGE("Document Type",SalesLine."Document Type");
      SaleslineBuffer.SETRANGE("Document No.",SalesLine."Document No.");
      SaleslineBuffer.SETRANGE("Document Line No.",SalesLine."Line No.");
      SaleslineBuffer.SETRANGE(Type,TaxType);
      IF SaleslineBuffer.FINDLAST THEN
        LineNoBuffer := LineNoBuffer + 10000
      ELSE
        LineNoBuffer := 10000;
      DutyCode.RESET;
      IF DutyCode.FINDSET THEN
        REPEAT
          SaleslineBuffer.INIT;
          SaleslineBuffer."Document Type" := SalesLine."Document Type";
          SaleslineBuffer."Document No." := SalesLine."Document No.";
          SaleslineBuffer."Document Line No." := SalesLine."Line No.";
          SaleslineBuffer.Type := TaxType;
          SaleslineBuffer."Line No." := LineNoBuffer;
          IF TaxType = TaxType::Excise THEN
            SaleslineBuffer."Component Code" := DutyCode."Duty Code No."
          ELSE
            DutyCode.FINDLAST;
          LineNoBuffer := LineNoBuffer + 10000;
          SaleslineBuffer.INSERT;
        UNTIL DutyCode.NEXT = 0;
    END;

    LOCAL PROCEDURE EvaluateExpressionFixed@1500050(IsTestExpression@1500003 : Boolean;Expression@1500002 : Code[250];SalesLine@1500001 : Record 37) : Decimal;
    VAR
      SalesLine1@1500018 : Record 37;
      Result@1500017 : Decimal;
      CallLevel@1500016 : Integer;
      Parantheses@1500015 : Integer;
      IsExpression@1500014 : Boolean;
      Operators@1500013 : Text[8];
      OperatorNo@1500012 : Integer;
      IsFilter@1500011 : Boolean;
      i@1500010 : Integer;
      RightResult@1500009 : Decimal;
      LeftResult@1500008 : Decimal;
      RightOperand@1500007 : Text[250];
      LeftOperand@1500006 : Text[250];
      Operator@1500005 : Char;
      DivisionError@1500004 : Boolean;
      SalesLineBuffer@1500000 : Record 16583;
    BEGIN
      Result := 0;
      CallLevel := CallLevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);

      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpressionFixed(IsTestExpression,LeftOperand,SalesLine);
          RightResult := EvaluateExpressionFixed(IsTestExpression,RightOperand,SalesLine);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpressionFixed(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),SalesLine1)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF NOT IsFilter THEN BEGIN
              SalesLineBuffer.RESET;
              SalesLineBuffer.SETRANGE("Document Type","Document Type");
              SalesLineBuffer.SETRANGE("Document No.","Document No.");
              SalesLineBuffer.SETRANGE("Document Line No.","Line No.");
              SalesLineBuffer.SETRANGE(Type,SalesLineBuffer.Type::Excise);
              IF Expression = Text13700 THEN BEGIN // BED Amount
                SalesLineBuffer.SETRANGE("Component Code",1);
                IF SalesLineBuffer.FIND('-') THEN
                  Result := Result + SalesLineBuffer."Fixed Amount";
              END ELSE
                IF Expression = Text13701 THEN BEGIN  // AED (GSI), AED TTA
                  SalesLineBuffer.SETFILTER("Component Code",'%1|%2',2,3);
                  IF SalesLineBuffer.FIND('-') THEN
                    REPEAT
                      Result := Result + SalesLineBuffer."Fixed Amount";
                    UNTIL SalesLineBuffer.NEXT = 0;
                END ELSE
                  IF Expression = Text13702 THEN BEGIN // SED
                    SalesLineBuffer.SETRANGE("Component Code",4);
                    IF SalesLineBuffer.FIND('-') THEN
                      Result := Result + SalesLineBuffer."Fixed Amount";
                  END ELSE
                    IF Expression = Text13703 THEN BEGIN // SAED
                      SalesLineBuffer.SETRANGE("Component Code",5);
                      IF SalesLineBuffer.FIND('-') THEN
                        Result := Result + SalesLineBuffer."Fixed Amount";
                    END ELSE
                      IF Expression = Text13704 THEN BEGIN // Cess
                        SalesLineBuffer.SETRANGE("Component Code",6);
                        IF SalesLineBuffer.FIND('-') THEN
                          Result := Result + SalesLineBuffer."Fixed Amount";
                      END ELSE
                        IF Expression = Text13705 THEN BEGIN // NCCD
                          SalesLineBuffer.SETRANGE("Component Code",7);
                          IF SalesLineBuffer.FIND('-') THEN
                            Result := Result + SalesLineBuffer."Fixed Amount";
                        END ELSE
                          IF Expression = Text13706 THEN BEGIN // Ecess
                            SalesLineBuffer.SETRANGE("Component Code",10);
                            IF SalesLineBuffer.FIND('-') THEN
                              Result := Result + SalesLineBuffer."Fixed Amount";
                          END ELSE
                            IF Expression = Text13707 THEN BEGIN // ADET
                              SalesLineBuffer.SETRANGE("Component Code",8);
                              IF SalesLineBuffer.FIND('-') THEN
                                Result := Result + SalesLineBuffer."Fixed Amount";
                            END ELSE
                              IF Expression = Text13708 THEN BEGIN // Line Amount
                                Result := Result - SalesLine."Line Discount Amount"
                              END ELSE
                                IF Expression = Text13709 THEN BEGIN // ADE
                                  SalesLineBuffer.SETRANGE("Component Code",9);
                                  IF SalesLineBuffer.FIND('-') THEN
                                    Result := Result + SalesLineBuffer."Fixed Amount";
                                END ELSE
                                  IF Expression = Text13710 THEN BEGIN // SHECess
                                    SalesLineBuffer.SETRANGE("Component Code",12);
                                    IF SalesLineBuffer.FIND('-') THEN
                                      Result := Result + SalesLineBuffer."Fixed Amount";
                                  END ELSE
                                    IF Expression = Text13711 THEN BEGIN // Assessable Value
                                      Result := Result + SalesLine."Assessable Value";
                                    END ELSE
                                      IF Expression = Text16501 THEN BEGIN
                                        SalesLineBuffer.SETRANGE("Component Code",11);
                                        IF SalesLineBuffer.FIND('-') THEN
                                          Result := Result + SalesLineBuffer."Fixed Amount";
                                      END ELSE
                                        IF Expression = Text16502 THEN BEGIN
                                          Result := Result + SalesLine."BCD Amount";
                                        END ELSE
                                          IF Expression = Text16503 THEN
                                            Result := Result + SalesLine."CIF Amount";
            END;
          END;
      END;
      CallLevel := CallLevel - 1;
      EXIT(Result);
    END;

    LOCAL PROCEDURE EvaluateExpressionVariable@1500033(IsTestExpression@1500003 : Boolean;Expression@1500002 : Code[250];SalesLine@1500001 : Record 37) : Decimal;
    VAR
      SalesLine1@1500018 : Record 37;
      Result@1500017 : Decimal;
      CallLevel@1500016 : Integer;
      Parantheses@1500015 : Integer;
      IsExpression@1500014 : Boolean;
      Operators@1500013 : Text[8];
      OperatorNo@1500012 : Integer;
      IsFilter@1500011 : Boolean;
      i@1500010 : Integer;
      RightResult@1500009 : Decimal;
      LeftResult@1500008 : Decimal;
      RightOperand@1500007 : Text[250];
      LeftOperand@1500006 : Text[250];
      Operator@1500005 : Char;
      DivisionError@1500004 : Boolean;
      SalesLineBuffer@1500000 : Record 16583;
    BEGIN
      Result := 0;
      CallLevel := CallLevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);

      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpressionVariable(IsTestExpression,LeftOperand,SalesLine);
          RightResult := EvaluateExpressionVariable(IsTestExpression,RightOperand,SalesLine);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpressionVariable(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),SalesLine1)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF NOT IsFilter THEN BEGIN
              SalesLineBuffer.RESET;
              SalesLineBuffer.SETRANGE("Document Type","Document Type");
              SalesLineBuffer.SETRANGE("Document No.","Document No.");
              SalesLineBuffer.SETRANGE("Document Line No.","Line No.");
              SalesLineBuffer.SETRANGE(Type,SalesLineBuffer.Type::Excise);
              IF Expression = Text13700 THEN BEGIN // BED Amount
                SalesLineBuffer.SETRANGE("Component Code",1);
                IF SalesLineBuffer.FIND('-') THEN
                  Result := Result + SalesLineBuffer."Variable Amount";
              END ELSE
                IF Expression = Text13701 THEN BEGIN  // AED (GSI), AED TTA
                  SalesLineBuffer.SETFILTER("Component Code",'%1|%2',2,3);
                  IF SalesLineBuffer.FIND('-') THEN
                    REPEAT
                      Result := Result + SalesLineBuffer."Variable Amount";
                    UNTIL SalesLineBuffer.NEXT = 0;
                END ELSE
                  IF Expression = Text13702 THEN BEGIN // SED
                    SalesLineBuffer.SETRANGE("Component Code",4);
                    IF SalesLineBuffer.FIND('-') THEN
                      Result := Result + SalesLineBuffer."Variable Amount";
                  END ELSE
                    IF Expression = Text13703 THEN BEGIN // SAED
                      SalesLineBuffer.SETRANGE("Component Code",5);
                      IF SalesLineBuffer.FIND('-') THEN
                        Result := Result + SalesLineBuffer."Variable Amount";
                    END ELSE
                      IF Expression = Text13704 THEN BEGIN // Cess
                        SalesLineBuffer.SETRANGE("Component Code",6);
                        IF SalesLineBuffer.FIND('-') THEN
                          Result := Result + SalesLineBuffer."Variable Amount";
                      END ELSE
                        IF Expression = Text13705 THEN BEGIN // NCCD
                          SalesLineBuffer.SETRANGE("Component Code",7);
                          IF SalesLineBuffer.FIND('-') THEN
                            Result := Result + SalesLineBuffer."Variable Amount";
                        END ELSE
                          IF Expression = Text13706 THEN BEGIN // Ecess
                            SalesLineBuffer.SETRANGE("Component Code",10);
                            IF SalesLineBuffer.FIND('-') THEN
                              Result := Result + SalesLineBuffer."Variable Amount";
                          END ELSE
                            IF Expression = Text13707 THEN BEGIN // ADET
                              SalesLineBuffer.SETRANGE("Component Code",8);
                              IF SalesLineBuffer.FIND('-') THEN
                                Result := Result + SalesLineBuffer."Variable Amount";
                            END ELSE
                              IF Expression = Text13708 THEN BEGIN // Line Amount
                                Result := Result + SalesLine.Quantity
                              END ELSE
                                IF Expression = Text13709 THEN BEGIN // ADE
                                  SalesLineBuffer.SETRANGE("Component Code",9);
                                  IF SalesLineBuffer.FIND('-') THEN
                                    Result := Result + SalesLineBuffer."Variable Amount";
                                END ELSE
                                  IF Expression = Text13710 THEN BEGIN // SHECess
                                    SalesLineBuffer.SETRANGE("Component Code",12);
                                    IF SalesLineBuffer.FIND('-') THEN
                                      Result := Result + SalesLineBuffer."Variable Amount";
                                  END ELSE
                                    IF Expression = Text13711 THEN BEGIN // Assessable Value
                                      Result := Result + 0;
                                    END ELSE
                                      IF Expression = Text16501 THEN BEGIN
                                        SalesLineBuffer.SETRANGE("Component Code",11);
                                        IF SalesLineBuffer.FIND('-') THEN
                                          Result := Result + SalesLineBuffer."Variable Amount";
                                      END ELSE
                                        IF Expression = Text16502 THEN BEGIN
                                          Result := Result + 0;
                                        END ELSE
                                          IF Expression = Text16503 THEN
                                            Result := Result + 0;
            END;
          END;
      END;
      CallLevel := CallLevel - 1;
      EXIT(Result);
    END;

    PROCEDURE CalculateStructuresPIT@1500100(VAR SalesHeader@1500007 : Record 36);
    VAR
      SalesLine@1500013 : Record 37;
      StrOrderDetails@1500012 : Record 13794;
      StrOrderLineDetails@1500011 : Record 13795;
      StrOrderLines@1500010 : Record 13795;
      SalesLineBuffer@1500009 : Record 16583;
      BaseAmount@1500008 : Decimal;
      CFactor@1500006 : Decimal;
      i@1500005 : Integer;
      FixedAmt@1500004 : Decimal;
      VariableAmt@1500003 : Decimal;
      CalcInvDis@1500000 : Codeunit 60;
      AdjustedAmt@1500014 : Decimal;
      DiffAdjustmentAmt@1500015 : Decimal;
      TransactionType@1500001 : 'Purchase,Sale';
      GSTPer@1500002 : Decimal;
      PITBaseAmount@15000018 : Decimal;
    BEGIN
      WITH SalesHeader DO BEGIN
        StrOrderLines.LOCKTABLE;
        StrOrderLineDetails.LOCKTABLE;

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE("Price Inclusive of Tax",TRUE);
        IF SalesLine.FIND('-') THEN BEGIN
          REPEAT
            IF (SalesLine.Quantity <> 0) AND (SalesLine."Unit Price" <> 0) THEN
              FOR i := 1 TO 3 DO BEGIN
                WITH SalesLine DO BEGIN
                  StrOrderLines.RESET;
                  StrOrderLines.SETCURRENTKEY("Document Type","Document No.",Type);
                  StrOrderLines.SETRANGE(Type,StrOrderLines.Type::Sale);
                  StrOrderLines.SETRANGE("Document Type","Document Type");
                  StrOrderLines.SETRANGE("Document No.","Document No.");
                  StrOrderLines.SETRANGE("Line No.","Line No.");
                  StrOrderLines.SETRANGE("Price Inclusive of Tax",TRUE);
                  IF NOT Trading THEN
                    StrOrderLines.SETRANGE("Manually Changed",FALSE);
                  IF StrOrderLines.FINDFIRST THEN
                    StrOrderLines.DELETEALL(TRUE);
                  "Amount Added to Excise Base" := 0;
                  "Amount Added to Tax Base" := 0;
                  "VAT Base Amount" := 0;
                  CVD := FALSE;
                  IF ("Line Discount %" <> 0) AND GSTManagement.IsGSTApplicable(Structure) THEN
                    "Amount To Customer UPIT" := "Amount To Customer" + "Line Discount Amount"
                  ELSE
                    "Amount To Customer UPIT" := Quantity * "Unit Price";
                  StrOrderDetails.RESET;
                  StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                  StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Sale);
                  StrOrderDetails.SETRANGE("Document Type","Document Type");
                  StrOrderDetails.SETRANGE("Document No.","Document No.");
                  StrOrderDetails.SETRANGE("Document Line No.","Line No.");
                  IF StrOrderDetails.FINDSET THEN
                    REPEAT
                      StrOrderLineDetails.RESET;
                      StrOrderLineDetails.SETRANGE(Type,StrOrderLineDetails.Type::Sale);
                      StrOrderLineDetails.SETRANGE("Calculation Order",StrOrderDetails."Calculation Order");
                      StrOrderLineDetails.SETRANGE("Document Type","Document Type");
                      StrOrderLineDetails.SETRANGE("Document No.","Document No.");
                      StrOrderLineDetails.SETRANGE("Structure Code",Structure);
                      StrOrderLineDetails.SETRANGE("Item No.","No.");
                      StrOrderLineDetails.SETRANGE("Line No.","Line No.");
                      StrOrderLineDetails.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
                      StrOrderLineDetails.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
                      StrOrderLineDetails.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
                      IF NOT StrOrderLineDetails.FIND('-') THEN BEGIN
                        StrOrderLineDetails.INIT;
                        StrOrderLineDetails.Type := StrOrderDetails.Type;
                        StrOrderLineDetails."Document Type" := StrOrderDetails."Document Type";
                        StrOrderLineDetails."Document No." := StrOrderDetails."Document No.";
                        StrOrderLineDetails."Structure Code" := StrOrderDetails."Structure Code";
                        StrOrderLineDetails."Item No." := "No.";
                        StrOrderLineDetails."Line No." := "Line No.";
                        StrOrderLineDetails."Calculation Order" := StrOrderDetails."Calculation Order";
                        StrOrderLineDetails."Tax/Charge Type" := StrOrderDetails."Tax/Charge Type";
                        StrOrderLineDetails."Tax/Charge Group" := StrOrderDetails."Tax/Charge Group";
                        StrOrderLineDetails."Tax/Charge Code" := StrOrderDetails."Tax/Charge Code";
                        StrOrderLineDetails."Calculation Type" := StrOrderDetails."Calculation Type";
                        StrOrderLineDetails."Calculation Value" := StrOrderDetails."Calculation Value";
                        StrOrderLineDetails."Quantity Per" := StrOrderDetails."Quantity Per";
                        StrOrderLineDetails."Loading on Inventory" := StrOrderDetails."Loading on Inventory";
                        StrOrderLineDetails."% Loading on Inventory" := StrOrderDetails."% Loading on Inventory";
                        StrOrderLineDetails."Header/Line" := StrOrderDetails."Header/Line";
                        StrOrderLineDetails."Include Base" := StrOrderDetails."Include Base";
                        StrOrderLineDetails."Include Line Discount" := StrOrderDetails."Include Line Discount";
                        StrOrderLineDetails."Include Invoice Discount" := StrOrderDetails."Include Invoice Discount";
                        StrOrderLineDetails."Payable to Third Party" := StrOrderDetails."Payable to Third Party";
                        StrOrderLineDetails.LCY := StrOrderDetails.LCY;
                        StrOrderLineDetails."Available for VAT input" := StrOrderDetails."Available for VAT Input";
                        StrOrderLineDetails.CVD := StrOrderDetails.CVD;
                        StrOrderLineDetails."Price Inclusive of Tax" := StrOrderDetails."Price Inclusive of Tax";
                        StrOrderLineDetails."Include PIT Calculation" := StrOrderDetails."Include PIT Calculation";
                        IF StrOrderDetails."Payable to Third Party" THEN
                          StrOrderDetails.TESTFIELD("Third Party Code");
                        StrOrderLineDetails."Third Party Code" := StrOrderDetails."Third Party Code";
                        IF ((StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges) OR
                            (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Other Taxes"))
                        THEN
                          StrOrderDetails.TESTFIELD("Account No.");
                        StrOrderLineDetails."Account No." := StrOrderDetails."Account No.";
                        StrOrderLineDetails."Base Formula" := StrOrderDetails."Base Formula";
                        IF StrOrderLineDetails."Base Formula" <> '' THEN
                          BaseAmount :=
                            EvaluateExpressioninStructures(TRUE,StrOrderLineDetails."Base Formula",SalesLine,StrOrderDetails)
                        ELSE
                          BaseAmount := 0;

                        IF StrOrderDetails."Include Base" THEN
                          BaseAmount := BaseAmount + Quantity * "Unit Price";
                        IF StrOrderDetails."Include Line Discount" THEN
                          BaseAmount := BaseAmount - "Line Discount Amount";
                        IF StrOrderDetails."Include Invoice Discount" THEN
                          BaseAmount := BaseAmount - "Inv. Discount Amount";

                        IF SalesHeader."Currency Factor" <> 0 THEN
                          CFactor := SalesHeader."Currency Factor"
                        ELSE
                          CFactor := 1;

                        IF NOT StrOrderDetails.LCY THEN
                          CFactor := 1;

                        IF Type = Type::Item THEN
                          IF ((StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges) OR
                              (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Other Taxes"))
                          THEN BEGIN
                            IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::"Fixed Value" THEN BEGIN
                              StrOrderLineDetails."Base Amount" := 0;
                              StrOrderLineDetails.Amount := (StrOrderDetails."Calculation Value" * CFactor);
                            END;
                            IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::Percentage THEN BEGIN
                              StrOrderLineDetails."Base Amount" := BaseAmount;
                              StrOrderLineDetails.Amount := (StrOrderDetails."Calculation Value" * CFactor) * BaseAmount / 100;
                            END;
                            IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::"Amount Per Qty" THEN BEGIN
                              StrOrderLineDetails."Base Amount" := 0;
                              StrOrderLineDetails.Amount :=
                                (StrOrderDetails."Calculation Value" * CFactor) * Quantity / StrOrderDetails."Quantity Per";
                            END;
                          END;
                        IF Type IN [Type::Item] THEN
                          IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Excise THEN
                            IF Trading THEN BEGIN
                              IF ExecuteDetailRg23D THEN BEGIN
                                CVD := GetBaseAmount(BaseAmount,SalesLine);
                                IF NOT MRP THEN
                                  "Amount Added to Excise Base" := BaseAmount
                                ELSE
                                  "Amount Added to Excise Base" := CalcAmountAddedToExciseBase(SalesLine);
                                UpdateTaxAmounts;
                                StrOrderLineDetails."Base Amount" := "Excise Base Amount";
                                StrOrderLineDetails.Amount := "Excise Amount";
                              END;
                            END ELSE BEGIN
                              IF NOT MRP THEN
                                "Amount Added to Excise Base" := BaseAmount
                              ELSE
                                "Amount Added to Excise Base" := CalcAmountAddedToExciseBase(SalesLine);
                              CVD := StrOrderDetails.CVD;
                              IF CVD AND ("CIF Amount" + "BCD Amount" <> 0) THEN
                                "Amount Added to Excise Base" := "CIF Amount" + "BCD Amount";
                              UpdateTaxAmounts;
                              StrOrderLineDetails."Base Amount" := "Excise Base Amount";
                              StrOrderLineDetails.Amount := "Excise Amount";
                            END;
                        IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Sales Tax" THEN BEGIN
                          "Amount Added to Tax Base" := ROUND(BaseAmount,Currency."Amount Rounding Precision");
                          UpdateTaxAmounts;
                          StrOrderLineDetails."Base Amount" := "Tax Base Amount";
                          StrOrderLineDetails.Amount := "Amount Including Tax" - "Tax Base Amount";
                        END;
                        IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Service Tax" THEN BEGIN
                          "Service Tax Base" := ROUND(BaseAmount,Currency."Amount Rounding Precision");
                          UpdateTaxAmounts;
                          StrOrderLineDetails."Base Amount" := "Service Tax Base";
                          StrOrderLineDetails.Amount := ROUND("Service Tax Amount" + "Service Tax eCess Amount" +
                              "Service Tax SHE Cess Amount" + "Service Tax SBC Amount" + "KK Cess Amount");
                        END;
                        GSTPer := 0;
                        PITBaseAmount := 0;
                        IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::GST THEN BEGIN
                            IF StrOrderDetails."Include Line Discount" THEN
                              PITBaseAmount := "Line Discount Amount";
                            IF StrOrderDetails."Include Invoice Discount" THEN
                              PITBaseAmount := PITBaseAmount + SalesLine."Inv. Discount Amount";
                            GetGSTPercentage("Document Type","Document No.","Line No.",GSTPer);
                            "GST Base Amount" := (Quantity * "Unit Price Incl. of Tax" - PITBaseAmount) / (GSTPer + 100) * 100;
                          UpdateGSTAmounts("GST Base Amount");
                          StrOrderLineDetails."Base Amount" := "GST Base Amount";
                          StrOrderLineDetails.Amount := "Total GST Amount";
                        END;
                        SalesLineBuffer.RESET;
                        SalesLineBuffer.SETRANGE("Document Type","Document Type");
                        SalesLineBuffer.SETRANGE("Document No.","Document No.");
                        SalesLineBuffer.SETRANGE("Document Line No.","Line No.");
                        SalesLineBuffer.SETRANGE(Type,StrOrderLineDetails."Tax/Charge Type");
                        IF SalesLineBuffer.FINDSET THEN
                          REPEAT
                            StrOrderLineDetails."Fixed Amount" := StrOrderLineDetails."Fixed Amount" +
                              SalesLineBuffer."Fixed Amount";
                            StrOrderLineDetails."Variable Amount" := StrOrderLineDetails."Variable Amount" +
                              SalesLineBuffer."Variable Amount";
                          UNTIL SalesLineBuffer.NEXT = 0;

                        IF "Currency Factor" <> 0 THEN
                          CFactor := "Currency Factor"
                        ELSE
                          CFactor := 1;

                        IF "Currency Code" <> '' THEN
                          Currency.GET("Currency Code");

                        StrOrderLineDetails."Amount (LCY)" := StrOrderLineDetails.Amount / CFactor;
                        StrOrderLineDetails.INSERT
                      END;
                      IF StrOrderLineDetails."Include PIT Calculation" THEN
                        "Amount To Customer UPIT" += StrOrderLineDetails.Amount;
                    UNTIL StrOrderDetails.NEXT = 0;
                END;
                SalesLine.MODIFY;
                IF i < 3 THEN BEGIN
                  FixedAmt := 0;
                  VariableAmt := 0;
                  AdjustedAmt := 0;
                  DiffAdjustmentAmt := 0;
                  FixedAmt := SalesLine."Unit Price Incl. of Tax" * SalesLine.Quantity;
                  VariableAmt := SalesLine.Quantity;
                  StrOrderLineDetails.RESET;
                  StrOrderLineDetails.SETCURRENTKEY(Type,"Document Type","Document No.","Structure Code","Item No.","Line No.");
                  StrOrderLineDetails.SETRANGE(Type,StrOrderLineDetails.Type::Sale);
                  StrOrderLineDetails.SETRANGE("Document Type",SalesLine."Document Type");
                  StrOrderLineDetails.SETRANGE("Document No.",SalesLine."Document No.");
                  StrOrderLineDetails.SETRANGE("Structure Code",SalesLine."PIT Structure");
                  StrOrderLineDetails.SETRANGE("Item No.",SalesLine."No.");
                  StrOrderLineDetails.SETRANGE("Line No.",SalesLine."Line No.");
                  StrOrderLineDetails.SETRANGE("Include PIT Calculation",TRUE);
                  IF StrOrderLineDetails.FIND('-') THEN
                    REPEAT
                      FixedAmt -= StrOrderLineDetails.Amount;
                      AdjustedAmt := AdjustedAmt + StrOrderLineDetails.Amount;
                    UNTIL StrOrderLineDetails.NEXT = 0;

                  SalesLine."Unit Price" := 0;
                  IF VariableAmt <> 0 THEN BEGIN
                    SalesLine."Unit Price" := ROUND(FixedAmt / VariableAmt,GetRoundingPrecisionUnitPrice);
                    IF SalesLine."Unit Price" < 0 THEN
                      SalesLine.FIELDERROR("Unit Price");
                    IF (i = 2) AND (FixedAmt <> 0) AND (SalesLine.Quantity <> 0) THEN BEGIN
                      AdjustedAmt := AdjustedAmt + (SalesLine."Unit Price" * SalesLine.Quantity);
                      FixedAmt := SalesLine."Unit Price Incl. of Tax" * SalesLine.Quantity;
                      DiffAdjustmentAmt := ((FixedAmt - AdjustedAmt) / SalesLine.Quantity) *
                        (SalesLine."Unit Price" * SalesLine.Quantity) / (FixedAmt );
                        SalesLine."Unit Price" := ROUND(SalesLine."Unit Price" - DiffAdjustmentAmt,GetRoundingPrecisionUnitPrice);
                      IF SalesLine."Unit Price" < 0 THEN
                        SalesLine.FIELDERROR("Unit Price");
                    END;
                    SalesLine.ValidateUnitPrice;
                    SalesLine.ChkQtyUpdatioAfterDDPLA;
                    SalesLine.MODIFY;
                    IF "Calc. Inv. Discount (%)" THEN
                      CalcInvDis.CalculateWithSalesHeader(SalesHeader,SalesLine);
                    SalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
                  END;
                END;
              END;
          UNTIL SalesLine.NEXT = 0;
          IF "Calc. Inv. Discount (%)" THEN
            CalcInvDis.CalculateWithSalesHeader(SalesHeader,SalesLine);
        END;
      END;
    END;

    PROCEDURE InsertStrOrdDetail@1500021(SalesHeader@1500004 : Record 36;VAR SaleLines@1500001 : Record 37);
    VAR
      StrOrderDetails@1500003 : Record 13794;
      StrOrderLines@1500002 : Record 13795;
      StrDetails@1500000 : Record 13793;
    BEGIN
      WITH SalesHeader DO BEGIN
        IF "Price Inclusive of Tax" = FALSE THEN
          EXIT;
        StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
        StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Sale);
        StrOrderDetails.SETRANGE("Document Type","Document Type");
        StrOrderDetails.SETRANGE("Document No.","No.");
        StrOrderDetails.SETRANGE("Document Line No.",SaleLines."Line No.");
        StrOrderDetails.SETRANGE("Price Inclusive of Tax",TRUE);
        IF StrOrderDetails.FINDFIRST THEN
          StrOrderDetails.DELETEALL;

        StrOrderLines.SETCURRENTKEY("Document Type","Document No.",Type);
        StrOrderLines.SETRANGE(Type,StrOrderLines.Type::Sale);
        StrOrderLines.SETRANGE("Document Type","Document Type");
        StrOrderLines.SETRANGE("Document No.","No.");
        StrOrderLines.SETRANGE("Line No.",SaleLines."Line No.");
        StrOrderLines.SETRANGE("Price Inclusive of Tax",TRUE);
        IF StrOrderLines.FINDFIRST THEN
          StrOrderLines.DELETEALL;

        WITH SaleLines DO BEGIN
          "Amount Added to Excise Base" := 0;
          "Amount Added to Tax Base" := 0;
          "Excise Amount" := 0;
          "VAT Base Amount" := 0;
          VALIDATE("Tax Liable",FALSE);
          UpdateAmounts;
          MODIFY;
        END;

        IF SaleLines."PIT Structure" <> '' THEN BEGIN
          StrDetails.SETRANGE(Code,SaleLines."PIT Structure");
          IF StrDetails.FINDSET THEN
            REPEAT
              IF StrDetails."Include PIT Calculation" AND StrDetails."Payable to Third Party" THEN
                StrDetails.TESTFIELD("Payable to Third Party",FALSE);
              StrOrderDetails.Type := StrOrderDetails.Type::Sale;
              StrOrderDetails."Document Type" := "Document Type";
              StrOrderDetails."Document No." := "No.";
              StrOrderDetails."Document Line No." := SaleLines."Line No.";
              StrOrderDetails."Structure Code" := SaleLines."PIT Structure";
              StrOrderDetails."Calculation Order" := StrDetails."Calculation Order";
              StrOrderDetails."Tax/Charge Type" := StrDetails.Type;
              StrOrderDetails."Tax/Charge Group" := StrDetails."Tax/Charge Group";
              StrOrderDetails."Tax/Charge Code" := StrDetails."Tax/Charge Code";
              StrOrderDetails."Calculation Type" := StrDetails."Calculation Type";
              StrOrderDetails."Calculation Value" := StrDetails."Calculation Value";
              StrOrderDetails."Quantity Per" := StrDetails."Quantity Per";
              StrOrderDetails."Loading on Inventory" := StrDetails."Loading on Inventory";
              StrOrderDetails."% Loading on Inventory" := StrDetails."% Loading on Inventory";
              StrOrderDetails."Payable to Third Party" := StrDetails."Payable to Third Party";
              StrOrderDetails."Account No." := StrDetails."Account No.";
              StrOrderDetails."Base Formula" := StrDetails."Base Formula";
              StrOrderDetails."Include Base" := StrDetails."Include Base";
              StrOrderDetails."Include Line Discount" := StrDetails."Include Line Discount";
              StrOrderDetails."Include Invoice Discount" := StrDetails."Include Invoice Discount";
              StrOrderDetails."Charge Basis" := StrDetails."Charge Basis";
              StrOrderDetails."Header/Line" := StrDetails."Header/Line";
              StrOrderDetails."Available for VAT Input" := StrDetails."Available for VAT Input";
              StrOrderDetails.CVD := StrDetails.CVD;
              StrOrderDetails."Price Inclusive of Tax" := SaleLines."Price Inclusive of Tax";
              StrOrderDetails."Include PIT Calculation" := StrDetails."Include PIT Calculation";
              StrOrderDetails.INSERT;
            UNTIL StrDetails.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE InitStrOrdDetail@1500041(SalesHeader@1500004 : Record 36);
    VAR
      StrOrderDetails@1500003 : Record 13794;
      SaleLines@1500001 : Record 37;
      StrDetails@1500000 : Record 13793;
    BEGIN
      WITH SalesHeader DO BEGIN
        SaleLines.SETRANGE("Document Type","Document Type");
        SaleLines.SETRANGE("Document No.","No.");
        SaleLines.SETFILTER(Type,'<>%1',SaleLines.Type::" ");
        SaleLines.SETRANGE("Price Inclusive of Tax",TRUE);
        IF SaleLines.FINDSET THEN
          REPEAT
            StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
            StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Sale);
            StrOrderDetails.SETRANGE("Document Type","Document Type");
            StrOrderDetails.SETRANGE("Document No.","No.");
            StrOrderDetails.SETRANGE("Document Line No.",SaleLines."Line No.");
            StrOrderDetails.SETRANGE("Price Inclusive of Tax",TRUE);
            IF NOT StrOrderDetails.FINDFIRST THEN BEGIN
              SaleLines."Amount Added to Excise Base" := 0;
              SaleLines."Amount Added to Tax Base" := 0;
              SaleLines."Excise Amount" := 0;
              SaleLines."VAT Base Amount" := 0;
              SaleLines.VALIDATE("Tax Liable",FALSE);
              SaleLines.UpdateAmounts;
              SaleLines.MODIFY;

              StrDetails.RESET;
              StrDetails.SETRANGE(Code,SaleLines."PIT Structure");
              IF StrDetails.FINDSET THEN
                REPEAT
                  IF StrDetails."Include PIT Calculation" AND StrDetails."Payable to Third Party" THEN
                    StrDetails.TESTFIELD("Payable to Third Party",FALSE);
                  StrOrderDetails.Type := StrOrderDetails.Type::Sale;
                  StrOrderDetails."Document Type" := "Document Type";
                  StrOrderDetails."Document No." := "No.";
                  StrOrderDetails."Document Line No." := SaleLines."Line No.";
                  StrOrderDetails."Structure Code" := SaleLines."PIT Structure";
                  StrOrderDetails."Calculation Order" := StrDetails."Calculation Order";
                  StrOrderDetails."Tax/Charge Type" := StrDetails.Type;
                  StrOrderDetails."Tax/Charge Group" := StrDetails."Tax/Charge Group";
                  StrOrderDetails."Tax/Charge Code" := StrDetails."Tax/Charge Code";
                  StrOrderDetails."Calculation Type" := StrDetails."Calculation Type";
                  StrOrderDetails."Calculation Value" := StrDetails."Calculation Value";
                  StrOrderDetails."Quantity Per" := StrDetails."Quantity Per";
                  StrOrderDetails."Loading on Inventory" := StrDetails."Loading on Inventory";
                  StrOrderDetails."% Loading on Inventory" := StrDetails."% Loading on Inventory";
                  StrOrderDetails."Payable to Third Party" := StrDetails."Payable to Third Party";
                  StrOrderDetails."Account No." := StrDetails."Account No.";
                  StrOrderDetails."Base Formula" := StrDetails."Base Formula";
                  StrOrderDetails."Include Base" := StrDetails."Include Base";
                  StrOrderDetails."Include Line Discount" := StrDetails."Include Line Discount";
                  StrOrderDetails."Include Invoice Discount" := StrDetails."Include Invoice Discount";
                  StrOrderDetails."Charge Basis" := StrDetails."Charge Basis";
                  StrOrderDetails."Header/Line" := StrDetails."Header/Line";
                  StrOrderDetails."Available for VAT Input" := StrDetails."Available for VAT Input";
                  StrOrderDetails.CVD := StrDetails.CVD;
                  StrOrderDetails."Price Inclusive of Tax" := SaleLines."Price Inclusive of Tax";
                  StrOrderDetails."Include PIT Calculation" := StrDetails."Include PIT Calculation";
                  StrOrderDetails.INSERT;
                UNTIL StrDetails.NEXT = 0;
            END;
          UNTIL SaleLines.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateSalesLineBuffer@1500025();
    VAR
      SaleslineBuffer@1500001 : Record 16583;
      DutyCode@1500000 : Record 16562;
    BEGIN
      DutyCode.RESET;
      IF DutyCode.FINDSET THEN
        REPEAT
          SaleslineBuffer.RESET;
          SaleslineBuffer.SETRANGE("Document Type","Document Type");
          SaleslineBuffer.SETRANGE("Document No.","Document No.");
          SaleslineBuffer.SETRANGE("Document Line No.","Line No.");
          SaleslineBuffer.SETRANGE(Type,SaleslineBuffer.Type::Excise);
          SaleslineBuffer.SETRANGE("Component Code",DutyCode."Duty Code No.");
          IF SaleslineBuffer.FINDFIRST THEN BEGIN
            IF DutyCode."Duty Code No." = 1 THEN
              SaleslineBuffer."Actual Amount Forward" := "BED Amount";
            IF DutyCode."Duty Code No." = 2 THEN
              SaleslineBuffer."Actual Amount Forward" := "AED(GSI) Amount";
            IF DutyCode."Duty Code No." = 3 THEN
              SaleslineBuffer."Actual Amount Forward" := "AED(TTA) Amount";
            IF DutyCode."Duty Code No." = 4 THEN
              SaleslineBuffer."Actual Amount Forward" := "SED Amount";
            IF DutyCode."Duty Code No." = 5 THEN
              SaleslineBuffer."Actual Amount Forward" := "SAED Amount";
            IF DutyCode."Duty Code No." = 6 THEN
              SaleslineBuffer."Actual Amount Forward" := "CESS Amount";
            IF DutyCode."Duty Code No." = 7 THEN
              SaleslineBuffer."Actual Amount Forward" := "NCCD Amount";
            IF DutyCode."Duty Code No." = 8 THEN
              SaleslineBuffer."Actual Amount Forward" := "ADET Amount";
            IF DutyCode."Duty Code No." = 9 THEN
              SaleslineBuffer."Actual Amount Forward" := "ADE Amount";
            IF DutyCode."Duty Code No." = 10 THEN
              SaleslineBuffer."Actual Amount Forward" := "eCess Amount";
            IF DutyCode."Duty Code No." = 11 THEN
              SaleslineBuffer."Actual Amount Forward" := "ADC VAT Amount";
            IF DutyCode."Duty Code No." = 12 THEN
              SaleslineBuffer."Actual Amount Forward" := "SHE Cess Amount";
            SaleslineBuffer.MODIFY(TRUE);
          END;
        UNTIL DutyCode.NEXT = 0;
    END;

    LOCAL PROCEDURE GetRoundingPrecisionUnitPrice@1500024() Precision : Decimal;
    VAR
      GenLedgSetup@1500000 : Record 98;
      Currency@1500001 : Record 4;
      LoopCount@1500002 : Integer;
    BEGIN
      IF "Currency Code" = '' THEN BEGIN
        GenLedgSetup.GET;
        IF GenLedgSetup."Unit-Amount Rounding Precision" <> 0 THEN
          Precision := GenLedgSetup."Unit-Amount Rounding Precision"
        ELSE BEGIN
          EVALUATE(LoopCount,COPYSTR(GenLedgSetup."Unit-Amount Decimal Places",STRPOS(GenLedgSetup."Unit-Amount Decimal Places",':') +
              1));
          Precision := 1;
          REPEAT
            LoopCount -= 1;
            Precision := (1 * Precision) / 10
          UNTIL LoopCount = 0;
        END;
      END ELSE BEGIN
        Currency.GET("Currency Code");
        IF Currency."Unit-Amount Rounding Precision" <> 0 THEN
          Precision := Currency."Unit-Amount Rounding Precision"
        ELSE BEGIN
          EVALUATE(LoopCount,COPYSTR(Currency."Unit-Amount Decimal Places",STRPOS(Currency."Unit-Amount Decimal Places",':') + 1));
          Precision := 1;
          REPEAT
            LoopCount -= 1;
            Precision := (1 * Precision) / 10
          UNTIL LoopCount = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE RoundExciseAmt@1280016(ExciseDutyAmount@1500001 : Decimal) : Decimal;
    VAR
      GLSetup@1500003 : Record 98;
      ExciseRoundingDirection@1500002 : Text[1];
      ExciseRoundingPrecision@1500000 : Decimal;
    BEGIN
      GLSetup.GET;
      CASE GLSetup."Excise Rounding Type" OF
        GLSetup."Excise Rounding Type"::Nearest:
          ExciseRoundingDirection := '=';
        GLSetup."Excise Rounding Type"::Up:
          ExciseRoundingDirection := '>';
        GLSetup."Excise Rounding Type"::Down:
          ExciseRoundingDirection := '<';
      END;
      IF GLSetup."Excise Rounding Precision" <> 0 THEN
        ExciseRoundingPrecision := GLSetup."Excise Rounding Precision"
      ELSE
        ExciseRoundingPrecision := 0.01;
      EXIT(ROUND(ExciseDutyAmount,ExciseRoundingPrecision,ExciseRoundingDirection));
    END;

    PROCEDURE UpdateTaxAmountsPIT@1500027(SalesLine@1500004 : Record 37;StrOrdLineDetail@1500002 : Record 13795);
    VAR
      SaleslineBuffer@1500001 : Record 16583;
      IndianSalesTaxCalculate@1500000 : Codeunit 13704;
      StandardDeductionAmount@1500006 : Decimal;
      LineTaxAmount@1500005 : Decimal;
    BEGIN
      WITH SalesLine DO BEGIN
        SaleslineBuffer.RESET;
        SaleslineBuffer.SETRANGE("Document Type","Document Type");
        SaleslineBuffer.SETRANGE("Document No.","Document No.");
        SaleslineBuffer.SETRANGE("Document Line No.","Line No.");
        SaleslineBuffer.SETRANGE(Type,StrOrdLineDetail."Tax/Charge Type");
        IF SaleslineBuffer.FINDSET THEN
          SaleslineBuffer.DELETEALL;
        InsertSalesLineBuffer(SalesLine,StrOrdLineDetail."Tax/Charge Type");
        InsertSalesTaxLineBuffer(SalesLine,StrOrdLineDetail."Tax/Charge Type");
        IF StrOrdLineDetail."Tax/Charge Type" = StrOrdLineDetail."Tax/Charge Type"::Excise THEN
          UpdateExciseAmountPIT(SalesLine);

        TaxAreaUpdate;
        IF ("Amount Added to Tax Base" <> 0) OR ("Tax Base Variable" <> 0) THEN
          "Tax Liable" := SalesHeader."Tax Liable";

        SaleslineBuffer.RESET;
        SaleslineBuffer.SETRANGE("Document Type","Document Type");
        SaleslineBuffer.SETRANGE("Document No.","Document No.");
        SaleslineBuffer.SETRANGE("Document Line No.","Line No.");
        SaleslineBuffer.SETRANGE(Type,SaleslineBuffer.Type::"Sales Tax");
        IF SaleslineBuffer.FINDFIRST THEN
          REPEAT
            StandardDeductionAmount := 0;

            IndianSalesTaxCalculate.GetStdDeductionFixedPIT(
              Rec,SaleslineBuffer."Tax Jurisdiction Code","Amount Added to Tax Base",StandardDeductionAmount,LineTaxAmount);

            SaleslineBuffer."Fixed Amount" := LineTaxAmount - StandardDeductionAmount;
            SaleslineBuffer."Standard Deduction Fixed Amt" := StandardDeductionAmount;

            StandardDeductionAmount := 0;

            IndianSalesTaxCalculate.GetStdDeductionVarPIT(
              Rec,SaleslineBuffer."Tax Jurisdiction Code","Tax Base Variable",StandardDeductionAmount,LineTaxAmount);

            SaleslineBuffer."Variable Amount" := LineTaxAmount - StandardDeductionAmount;
            SaleslineBuffer."Standard Deduction Var Amt" := StandardDeductionAmount;

            IF SalesHeader."Export or Deemed Export" OR SalesHeader."VAT Exempted" THEN BEGIN
              SaleslineBuffer."Fixed Amount" := 0;
              SaleslineBuffer."Variable Amount" := 0;
            END;
            SaleslineBuffer.MODIFY(TRUE);
          UNTIL SaleslineBuffer.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateSalesLinesPIT@1500038(VAR SalesHeader@1500000 : Record 36);
    VAR
      SalesLine@1500010 : Record 37;
      StrOrderDetails@1500009 : Record 13794;
      StrOrderLineDetails@1500008 : Record 13795;
      Currency@1500006 : Record 4;
      ChargesToCustomer@1500001 : Decimal;
    BEGIN
      WITH SalesHeader DO BEGIN
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE
          Currency.GET("Currency Code");

        SalesLine.LOCKTABLE;
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETFILTER(Type,'%1|%2|%3|%4|%5',SalesLine.Type::Item,SalesLine.Type::"G/L Account",SalesLine.Type::"Fixed Asset",
          SalesLine.Type::Resource,SalesLine.Type::"Charge (Item)");
        SalesLine.SETRANGE("Price Inclusive of Tax",TRUE);
        IF SalesLine.FINDSET THEN
          REPEAT
            IF SalesLine."Line Amount" <> 0 THEN
              WITH SalesLine DO BEGIN
                ChargesToCustomer := 0;
                StrOrderDetails.RESET;
                StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                StrOrderDetails.SETRANGE("Document Type","Document Type");
                StrOrderDetails.SETRANGE("Document No.","Document No.");
                StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Sale);
                StrOrderDetails.SETRANGE("Price Inclusive of Tax","Price Inclusive of Tax");
                StrOrderDetails.SETRANGE("Document Line No.","Line No.");
                IF StrOrderDetails.FINDSET THEN
                  REPEAT
                    StrOrderLineDetails.RESET;
                    StrOrderLineDetails.SETRANGE(Type,StrOrderLineDetails.Type::Sale);
                    StrOrderLineDetails.SETRANGE("Calculation Order",StrOrderDetails."Calculation Order");
                    StrOrderLineDetails.SETRANGE("Document Type","Document Type");
                    StrOrderLineDetails.SETRANGE("Document No.","Document No.");
                    StrOrderLineDetails.SETRANGE("Structure Code","PIT Structure");
                    StrOrderLineDetails.SETRANGE("Item No.","No.");
                    StrOrderLineDetails.SETRANGE("Line No.","Line No.");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
                    StrOrderLineDetails.SETRANGE("Price Inclusive of Tax","Price Inclusive of Tax");
                    IF StrOrderLineDetails.FINDSET THEN
                      REPEAT
                        IF NOT StrOrderDetails."Payable to Third Party" THEN
                          IF NOT (StrOrderDetails."Tax/Charge Type" IN [StrOrderDetails."Tax/Charge Type"::"Sales Tax",
                                                                        StrOrderDetails."Tax/Charge Type"::Excise,
                                                                        StrOrderDetails."Tax/Charge Type"::"Service Tax"])
                          THEN
                            ChargesToCustomer :=
                              ChargesToCustomer + ROUND(StrOrderLineDetails.Amount,Currency."Amount Rounding Precision");
                      UNTIL StrOrderLineDetails.NEXT = 0;
                  UNTIL StrOrderDetails.NEXT = 0;
                IF SalesHeader."Price Inclusive of Taxes" THEN
                  "Charges To Customer" := 0
                ELSE
                "Charges To Customer" := ChargesToCustomer;
                IF "TCS Nature of Collection" = '' THEN
                  "Amount To Customer" := "Line Amount" - "Inv. Discount Amount" + "Excise Amount" + "Tax Amount" +
                    "Charges To Customer" - "Bal. TDS/TCS Including SHECESS" +
                    "Service Tax Amount" + "Service Tax eCess Amount" + "Service Tax SHE Cess Amount" +
                    "Service Tax SBC Amount" + "KK Cess Amount"
                ELSE
                  "Amount To Customer" := "Line Amount" - "Inv. Discount Amount" + "Excise Amount" + "Tax Amount" +
                    "Charges To Customer" + "Bal. TDS/TCS Including SHECESS" +
                    "Service Tax Amount" + "Service Tax eCess Amount" + "Service Tax SHE Cess Amount" +
                    "Service Tax SBC Amount" + "KK Cess Amount";
                MODIFY;
              END;
          UNTIL SalesLine.NEXT = 0;
      END;
    END;

    PROCEDURE ValidateUnitPrice@1500032();
    BEGIN
      IF "Free Supply" THEN
        "Line Discount %" := 100;
      IF NOT "Price Inclusive of Tax" THEN
        "Line Discount Amount" := ROUND(ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") * "Line Discount %" / 100,
            Currency."Amount Rounding Precision")
      ELSE
        "Line Discount Amount" := ROUND(ROUND(Quantity * "Unit Price Incl. of Tax",Currency."Amount Rounding Precision") *
            "Line Discount %" / 100,Currency."Amount Rounding Precision");
      "Inv. Discount Amount" := 0;
      "Inv. Disc. Amount to Invoice" := 0;
      UpdateAmounts;
    END;

    PROCEDURE CalcVATAmountLinesPIT@1500036(QtyType@1500003 : 'General,Invoicing,Shipping';VAR SalesHeader@1500002 : Record 36;VAR SalesLine@1500001 : Record 37;VAR VATAmountLine@1500000 : Record 290);
    VAR
      Currency@1500010 : Record 4;
      SalesSetup@1500007 : Record 311;
      SalesLine2@1500006 : Record 37;
      RoundingLineInserted@1500005 : Boolean;
      TotalVATAmount@1500004 : Decimal;
    BEGIN
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");

      VATAmountLine.DELETEALL;

      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        SETFILTER(Type,'>0');
        SETFILTER(Quantity,'<>0');
        SalesSetup.GET;
        IF SalesSetup."Invoice Rounding" THEN BEGIN
          SalesLine2.COPYFILTERS(SalesLine);
          RoundingLineInserted := COUNT <> SalesLine2.COUNT;
        END;
        IF FIND('-') THEN
          REPEAT
            IF "VAT Calculation Type" IN
               ["VAT Calculation Type"::"Reverse Charge VAT","VAT Calculation Type"::"Sales Tax"]
            THEN
              "VAT %" := 0;
            IF NOT VATAmountLine.GET(
                 "VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0)
            THEN BEGIN
              VATAmountLine.INIT;
              VATAmountLine."VAT Identifier" := "VAT Identifier";
              VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
              VATAmountLine."Tax Group Code" := "Tax Group Code";
              VATAmountLine."VAT %" := "VAT %";
              VATAmountLine.Modified := TRUE;
              VATAmountLine.Positive := "Line Amount" >= 0;
              VATAmountLine.INSERT;
            END;
            VATAmountLine.Quantity := VATAmountLine.Quantity + "Quantity (Base)";
            IF "Price Inclusive of Tax" THEN BEGIN
              VATAmountLine."Line Amount Fixed" := VATAmountLine."Line Amount Fixed" + "Line Discount Amount";
              VATAmountLine."Line Amount Variable" := VATAmountLine."Line Amount Variable" + Quantity;
              IF "Allow Invoice Disc." THEN BEGIN
                VATAmountLine."Inv. Disc. Base Amount Fixed" :=
                  VATAmountLine."Inv. Disc. Base Amount Fixed" - "Line Discount Amount";
                VATAmountLine."Inv. Disc. Base Amt Variable" :=
                  VATAmountLine."Inv. Disc. Base Amt Variable" + Quantity;
              END;
            END ELSE BEGIN
              VATAmountLine."Line Amount Fixed" := VATAmountLine."Line Amount Fixed" + "Line Amount";
              IF "Allow Invoice Disc." THEN
                VATAmountLine."Inv. Disc. Base Amount Fixed" :=
                  VATAmountLine."Inv. Disc. Base Amount Fixed" + "Line Amount";
            END;
            VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
            VATAmountLine.MODIFY;
            IF RoundingLineInserted THEN
              TotalVATAmount := TotalVATAmount + "Amount Including VAT" - Amount + "VAT Difference";
          UNTIL NEXT = 0;
        SETRANGE(Type);
        SETRANGE(Quantity);
      END;
    END;

    PROCEDURE UpdateVATOnLinesPIT@1500039(QtyType@1500005 : 'General,Invoicing,Shipping';VAR SalesHeader@1500004 : Record 36;VAR SalesLine@1500003 : Record 37;VAR VATAmountLine@1500002 : Record 290);
    VAR
      TempVATAmountLineRemainder@1500017 : TEMPORARY Record 290;
      Currency@1500016 : Record 4;
      InvDiscAmount@1500007 : Decimal;
      LineAmountToInvoice@1500006 : Decimal;
      InvDiscAmountVar@1500001 : Decimal;
      LineAmountToInvoiceVar@1500000 : Decimal;
    BEGIN
      IF QtyType = QtyType::Shipping THEN
        EXIT;
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");

      TempVATAmountLineRemainder.DELETEALL;

      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        SETFILTER(Type,'>0');
        SETFILTER(Quantity,'<>0');
        CASE QtyType OF
          QtyType::Invoicing:
            SETFILTER("Qty. to Invoice",'<>0');
          QtyType::Shipping:
            SETFILTER("Qty. to Ship",'<>0');
        END;
        LOCKTABLE;
        IF FIND('-') THEN
          REPEAT
            VATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0);
            IF VATAmountLine.Modified THEN BEGIN
              IF NOT TempVATAmountLineRemainder.GET(
                   "VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0)
              THEN BEGIN
                TempVATAmountLineRemainder := VATAmountLine;
                TempVATAmountLineRemainder.INIT;
                TempVATAmountLineRemainder.INSERT;
              END;

              IF "Price Inclusive of Tax" THEN BEGIN
                IF QtyType = QtyType::General THEN
                  LineAmountToInvoice := -"Line Discount Amount"
                ELSE
                  LineAmountToInvoice :=
                    -"Line Discount Amount" * "Qty. to Invoice" / Quantity;

                IF QtyType = QtyType::General THEN
                  LineAmountToInvoiceVar := Quantity
                ELSE
                  LineAmountToInvoiceVar :=
                    Quantity * "Qty. to Invoice" / Quantity;

                IF "Allow Invoice Disc." THEN BEGIN
                  IF VATAmountLine."Inv. Disc. Base Amount Fixed" = 0 THEN
                    InvDiscAmount := 0
                  ELSE BEGIN
                    TempVATAmountLineRemainder."Invoice Discount Amount Fixed" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount Fixed" +
                      VATAmountLine."Invoice Discount Amount Fixed" * LineAmountToInvoice /
                      VATAmountLine."Inv. Disc. Base Amount Fixed";
                    InvDiscAmount :=
                      TempVATAmountLineRemainder."Invoice Discount Amount Fixed";
                    TempVATAmountLineRemainder."Invoice Discount Amount Fixed" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount Fixed" - InvDiscAmount;
                  END;

                  IF VATAmountLine."Inv. Disc. Base Amt Variable" = 0 THEN
                    InvDiscAmountVar := 0
                  ELSE BEGIN
                    TempVATAmountLineRemainder."Invoice Discount Amt Variable" :=
                      TempVATAmountLineRemainder."Invoice Discount Amt Variable" +
                      VATAmountLine."Invoice Discount Amt Variable" * LineAmountToInvoiceVar /
                      VATAmountLine."Inv. Disc. Base Amt Variable";
                    InvDiscAmountVar :=
                      TempVATAmountLineRemainder."Invoice Discount Amt Variable";
                    TempVATAmountLineRemainder."Invoice Discount Amt Variable" :=
                      TempVATAmountLineRemainder."Invoice Discount Amt Variable" - InvDiscAmountVar;
                  END;
                  IF QtyType = QtyType::General THEN BEGIN
                    "Inv Discount Fixed" := InvDiscAmount;
                    "Inv Discount Variable" := InvDiscAmountVar;
                  END ELSE
                    "Inv. Disc. Amount to Invoice" := InvDiscAmount;
                END ELSE BEGIN
                  InvDiscAmount := 0;
                  InvDiscAmountVar := 0;
                END;
              END ELSE BEGIN
                IF QtyType = QtyType::General THEN
                  LineAmountToInvoice := "Line Amount"
                ELSE
                  LineAmountToInvoice :=
                    "Line Amount" * "Qty. to Invoice" / Quantity;

                IF "Allow Invoice Disc." THEN BEGIN
                  IF VATAmountLine."Inv. Disc. Base Amount Fixed" = 0 THEN
                    InvDiscAmount := 0
                  ELSE BEGIN
                    TempVATAmountLineRemainder."Invoice Discount Amount Fixed" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount Fixed" +
                      VATAmountLine."Invoice Discount Amount Fixed" * LineAmountToInvoice /
                      VATAmountLine."Inv. Disc. Base Amount Fixed";
                    InvDiscAmount :=
                      TempVATAmountLineRemainder."Invoice Discount Amount Fixed";
                    TempVATAmountLineRemainder."Invoice Discount Amount Fixed" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount Fixed" - InvDiscAmount;
                  END;

                  IF QtyType = QtyType::General THEN BEGIN
                    "Inv Discount Fixed" := InvDiscAmount;
                  END ELSE
                    "Inv. Disc. Amount to Invoice" := InvDiscAmount;
                END ELSE
                  InvDiscAmount := 0;
              END;
              InitOutstanding;
              MODIFY;
              TempVATAmountLineRemainder.MODIFY;
            END;
          UNTIL NEXT = 0;
        SETRANGE(Type);
        SETRANGE(Quantity);
        SETRANGE("Qty. to Invoice");
        SETRANGE("Qty. to Ship");
      END;
    END;

    PROCEDURE ShowStrOrderDetailsPIT@1500000();
    VAR
      StructureOrderDetail@1500001 : Record 13794;
      StrOrderDetailsPITForm@1500000 : Page 16467;
      SalesHeaderRec@1500002 : Record 36;
    BEGIN
      SalesHeaderRec.RESET;
      SalesHeaderRec.GET("Document Type","Document No.");
      InitStrOrdDetail(SalesHeaderRec);
      COMMIT;
      StructureOrderDetail.RESET;
      StructureOrderDetail.SETRANGE(Type,StructureOrderDetail.Type::Sale);
      StructureOrderDetail.SETRANGE("Document Type","Document Type");
      StructureOrderDetail.SETRANGE("Document No.","Document No.");
      StructureOrderDetail.SETRANGE("Document Line No.","Line No.");
      StructureOrderDetail.SETRANGE("Price Inclusive of Tax",TRUE);
      StrOrderDetailsPITForm.SETTABLEVIEW(StructureOrderDetail);
      StrOrderDetailsPITForm.RUNMODAL;
    END;

    PROCEDURE GetExcisePostingSetup@1500015();
    VAR
      SalesHeader2@1500002 : Record 36;
      ExcisePostingSetup2@1500003 : Record 13711;
      ExcisePostingSetupForm@1500000 : Page 13710;
      StructureDetails@1500001 : Record 13793;
    BEGIN
      SalesHeader2.GET("Document Type","Document No.");
      IF SalesHeader2.Structure <> '' THEN BEGIN
        StructureDetails.SETRANGE(Code,SalesHeader2.Structure);
        StructureDetails.SETRANGE(Type,StructureDetails.Type::Excise);
        IF StructureDetails.FINDFIRST THEN BEGIN
          ExcisePostingSetup2.RESET;
          ExcisePostingSetup2.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
          ExcisePostingSetup2.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
          ExcisePostingSetup2.SETRANGE("From Date",0D,SalesHeader2."Posting Date");
          IF ExcisePostingSetup2.FINDLAST THEN
            ExcisePostingSetup2.MARK := TRUE;
          ExcisePostingSetup2.MARKEDONLY(TRUE);
          ExcisePostingSetupForm.EDITABLE := FALSE;
          ExcisePostingSetupForm.SETTABLEVIEW(ExcisePostingSetup2);
          ExcisePostingSetupForm.RUNMODAL;
        END ELSE
          ERROR(Text16508);
      END ELSE
        ERROR(Text16508);
    END;

    PROCEDURE ValidateTaxGroupCode@1500029();
    VAR
      TaxAreaLine2@1500000 : Record 319;
      TaxJurisdiction2@1500001 : Record 320;
      Taxdetail@1500002 : Record 322;
    BEGIN
      TaxAreaLine2.RESET;
      TaxAreaLine2.SETCURRENTKEY("Tax Area","Calculation Order");
      TaxAreaLine2.SETRANGE("Tax Area","Tax Area Code");
      IF TaxAreaLine2.FINDFIRST THEN BEGIN
        TaxJurisdiction2.GET(TaxAreaLine2."Tax Jurisdiction Code");
        Taxdetail.RESET;
        Taxdetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine2."Tax Jurisdiction Code");
        Taxdetail.SETFILTER("Tax Group Code",'%1',"Tax Group Code");
        IF NOT TaxJurisdiction2."Forms Not Applicable" THEN
          Taxdetail.SETRANGE("Form Code","Form Code")
        ELSE
          Taxdetail.SETRANGE("Forms Not Applicable",TRUE);
        IF Taxdetail.FINDLAST THEN
          "Standard Deduction %" := Taxdetail."Standard Deduction %";
      END;
    END;

    LOCAL PROCEDURE InsertSalesTaxLineBuffer@1500034(SalesLine@1500004 : Record 37;TaxType@1500002 : 'Charges,Sales Tax,Excise,Other Taxes,Service Tax');
    VAR
      SaleslineBuffer@1500000 : Record 16583;
      TaxAreaLine@1500003 : Record 319;
      LineNoBuffer@1500001 : Integer;
    BEGIN
      LineNoBuffer := 0;
      IF TaxType = TaxType::Excise THEN
        EXIT;
      SaleslineBuffer.RESET;
      SaleslineBuffer.SETRANGE("Document Type",SalesLine."Document Type");
      SaleslineBuffer.SETRANGE("Document No.",SalesLine."Document No.");
      SaleslineBuffer.SETRANGE("Document Line No.",SalesLine."Line No.");
      SaleslineBuffer.SETRANGE(Type,TaxType);
      IF SaleslineBuffer.FINDLAST THEN
        LineNoBuffer := LineNoBuffer + 10000
      ELSE
        LineNoBuffer := 10000;

      TaxAreaLine.RESET;
      TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
      TaxAreaLine.SETRANGE("Tax Area",SalesLine."Tax Area Code");
      IF TaxAreaLine.FINDSET THEN
        REPEAT
          SaleslineBuffer.INIT;
          SaleslineBuffer."Document Type" := SalesLine."Document Type";
          SaleslineBuffer."Document No." := SalesLine."Document No.";
          SaleslineBuffer."Document Line No." := SalesLine."Line No.";
          SaleslineBuffer.Type := TaxType;
          SaleslineBuffer."Line No." := LineNoBuffer;
          SaleslineBuffer."Component Code" := TaxAreaLine."Calculation Order";
          SaleslineBuffer."Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
          LineNoBuffer := LineNoBuffer + 10000;
          SaleslineBuffer.INSERT;
        UNTIL TaxAreaLine.NEXT = 0;
    END;

    PROCEDURE CheckAssessableValue@1500026(SalesHeader@1500000 : Record 36) : Boolean;
    VAR
      ExcisePostingSetup@1500003 : Record 13711;
      AssessableValue@1500002 : Boolean;
    BEGIN
      WITH SalesHeader DO BEGIN
        ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
        ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
        IF "Posting Date" <> 0D THEN
          ExcisePostingSetup.SETRANGE("From Date",0D,"Posting Date")
        ELSE
          ExcisePostingSetup.SETRANGE("From Date",0D,WORKDATE);
        IF ExcisePostingSetup.FINDLAST THEN
          AssessableValue := ExcisePostingSetup."BED Calculation Type" =
            ExcisePostingSetup."BED Calculation Type"::"% of Accessable Value";
        EXIT(AssessableValue);
      END;
    END;

    PROCEDURE InitRG23DSplitingBuffer@1500500(SalesHeader@1102601009 : Record 36);
    VAR
      SalesLine@1500333 : Record 37;
      DetailRG23D@1500334 : Record 16533;
      RG23DSplitingBuffer@1500335 : Record 16531;
      TempDetailRG23D@1500336 : TEMPORARY Record 16533;
      TempDetailRG23DRemainder@1500337 : TEMPORARY Record 16533;
      TempDetailRG23DConsInCurrDoc@1500338 : TEMPORARY Record 16533;
      QuantityInCurrLine@1500339 : Decimal;
      QtyInCurrLineAlreadyAdjusted@1500340 : Decimal;
      RefQuantity@1500341 : Decimal;
      AllQtyInCurrLineAdjusted@1500342 : Boolean;
      EntryNo@1500343 : Integer;
    BEGIN
      WITH SalesHeader DO BEGIN
        IF NOT Trading THEN
          EXIT;
        IF NOT Invoice THEN
          EXIT;
        IF (Structure = '') OR NOT CheckExciseStructure(Structure) THEN
          EXIT;
        TempDetailRG23DRemainder.DELETEALL;
        TempDetailRG23DConsInCurrDoc.DELETEALL;

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        IF SalesLine.FINDSET THEN
          REPEAT
            WITH SalesLine DO
              IF "Qty. to Invoice" <> 0 THEN BEGIN
                QuantityInCurrLine := "Qty. to Invoice";
                QtyInCurrLineAlreadyAdjusted := 0;
                AllQtyInCurrLineAdjusted := FALSE;
                DetailRG23D.RESET;
                DetailRG23D.SETCURRENTKEY("Document Type","Order No.","Document No.","Line No.");
                DetailRG23D.SETRANGE("Transaction Type",DetailRG23D."Transaction Type"::Sale);
                DetailRG23D.SETRANGE(Undo,FALSE);
                IF ("Shipment No." = '') AND ("Return Receipt No." = '') THEN BEGIN
                  DetailRG23D.SETRANGE("Document Type","Document Type");
                  DetailRG23D.SETRANGE("Order No.","Document No.");
                  DetailRG23D.SETRANGE("Line No.","Line No.");
                END ELSE
                  IF "Shipment No." <> '' THEN BEGIN
                    DetailRG23D.SETRANGE("Document Type",DetailRG23D."Document Type"::Order);
                    DetailRG23D.SETRANGE("Document No.","Shipment No.");
                    DetailRG23D.SETRANGE("Line No.","Shipment Line No.");
                  END ELSE
                    IF "Return Receipt No." <> '' THEN BEGIN
                      DetailRG23D.SETRANGE("Document Type",DetailRG23D."Document Type"::"Return Order");
                      DetailRG23D.SETRANGE("Document No.","Return Receipt No.");
                      DetailRG23D.SETRANGE("Line No.","Return Receipt Line No.");
                    END;
                DetailRG23D.SETRANGE("Completely Invoiced",FALSE);
                IF DetailRG23D.FINDSET THEN
                  REPEAT
                    RefQuantity := 0;
                    IF NOT TempDetailRG23DConsInCurrDoc.GET(DetailRG23D."Entry No.") THEN BEGIN
                      IF TempDetailRG23DRemainder.GET(DetailRG23D."Entry No.") THEN BEGIN
                        RefQuantity := TempDetailRG23DRemainder.Quantity;
                        TempDetailRG23DRemainder.Quantity :=
                          TempDetailRG23DRemainder.Quantity - (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);

                        IF TempDetailRG23DRemainder.Quantity <= 0 THEN BEGIN
                          TempDetailRG23DConsInCurrDoc.TRANSFERFIELDS(TempDetailRG23DRemainder);
                          TempDetailRG23DConsInCurrDoc.INSERT;
                          TempDetailRG23DRemainder.DELETE;
                        END ELSE BEGIN
                          RefQuantity := (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);
                          TempDetailRG23DRemainder.Quantity := TempDetailRG23DRemainder.Quantity - RefQuantity;
                          TempDetailRG23DRemainder.MODIFY;
                          AllQtyInCurrLineAdjusted := TRUE;
                        END;
                      END ELSE BEGIN
                        TempDetailRG23D.TRANSFERFIELDS(DetailRG23D);
                        TempDetailRG23D.Quantity := ABS(DetailRG23D.Quantity) - ABS(DetailRG23D."Quantity Invoiced");
                        RefQuantity := TempDetailRG23D.Quantity;
                        TempDetailRG23D.Quantity :=
                          TempDetailRG23D.Quantity - (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);

                        IF TempDetailRG23D.Quantity <= 0 THEN BEGIN
                          TempDetailRG23DConsInCurrDoc.TRANSFERFIELDS(DetailRG23D);
                          TempDetailRG23DConsInCurrDoc.INSERT;
                        END ELSE BEGIN
                          AllQtyInCurrLineAdjusted := TRUE;
                          RefQuantity := (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);
                          TempDetailRG23DRemainder.TRANSFERFIELDS(DetailRG23D);
                          TempDetailRG23DRemainder.Quantity := TempDetailRG23D.Quantity - RefQuantity;
                          TempDetailRG23DRemainder.INSERT;
                        END;
                      END;
                      QtyInCurrLineAlreadyAdjusted := QtyInCurrLineAlreadyAdjusted + RefQuantity;

                      RG23DSplitingBuffer.RESET;
                      IF RG23DSplitingBuffer.FINDLAST THEN
                        EntryNo := RG23DSplitingBuffer."Entry No." + 1
                      ELSE
                        EntryNo := 1;

                      RG23DSplitingBuffer.INIT;
                      RG23DSplitingBuffer."Entry No." := EntryNo;
                      RG23DSplitingBuffer."RG 23 D Entry No." := DetailRG23D."RG 23 D Entry No.";
                      RG23DSplitingBuffer."Detail RG 23 D Entry No." := DetailRG23D."Entry No.";
                      RG23DSplitingBuffer."Document Type" := "Document Type";
                      RG23DSplitingBuffer."Document No." := "Document No.";
                      RG23DSplitingBuffer."Line No." := "Line No.";
                      IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
                        RG23DSplitingBuffer.Quantity := -RefQuantity
                      ELSE
                        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                          RG23DSplitingBuffer.Quantity := RefQuantity;
                      RG23DSplitingBuffer."Posted Document No." := DetailRG23D."Document No.";
                      RG23DSplitingBuffer."Posted Document Line No." := DetailRG23D."Document Line No.";
                      RG23DSplitingBuffer."Transaction Type" := DetailRG23D."Transaction Type";
                      RG23DSplitingBuffer.INSERT;

                      IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
                        DetailRG23D."Quantity Invoiced" += -RefQuantity
                      ELSE
                        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                          DetailRG23D."Quantity Invoiced" += RefQuantity;
                      DetailRG23D."Completely Invoiced" := DetailRG23D.Quantity = DetailRG23D."Quantity Invoiced";
                      DetailRG23D.MODIFY;
                    END;
                  UNTIL (DetailRG23D.NEXT = 0) OR AllQtyInCurrLineAdjusted OR (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted = 0);
              END;
          UNTIL SalesLine.NEXT = 0;
      END;
    END;

    PROCEDURE InitDetailRG23DReturn@1500501(SalesHeader@1102601009 : Record 36) : Boolean;
    VAR
      SalesLine@1500366 : Record 37;
      DetailRG23D@1500367 : Record 16533;
      RG23D@1500368 : Record 16537;
      RG23DPurch@1500369 : Record 16537;
      TempRG23D@1500370 : TEMPORARY Record 16537;
      QuantityInCurrLine@1500371 : Decimal;
      QtyInCurrLineAlreadyAdjusted@1500372 : Decimal;
      RefQuantity@1500373 : Decimal;
      AllQtyInCurrLineAdjusted@1500374 : Boolean;
      EntryNo@1500375 : Integer;
      TempRG23DInvtCheck@1500376 : TEMPORARY Record 16537;
    BEGIN
      WITH SalesHeader DO BEGIN
        IF ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) OR
           (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND (NOT Receive))
        THEN
          EXIT(FALSE);

        TempRG23DRemainder.DELETEALL;
        TempRG23DConsumedInCurrDoc.DELETEALL;
        InvtBuffer[1].DELETEALL;
        TempRG23DInvtCheck.DELETEALL;

        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        IF SalesLine.FINDSET THEN
          REPEAT
            WITH SalesLine DO
              IF "Return Receipt No." = '' THEN
                IF "Return Qty. to Receive" <> 0 THEN BEGIN
                  CLEAR(InvtBuffer[1]);
                  InvtBuffer[1]."Item No." := "No.";
                  InvtBuffer[1].Quantity := -"Return Qty. to Receive";
                  InvtBuffer[2] := InvtBuffer[1];
                  IF InvtBuffer[2].FIND THEN BEGIN
                    InvtBuffer[2].Quantity := InvtBuffer[2].Quantity + InvtBuffer[1].Quantity;
                    InvtBuffer[2].MODIFY;
                  END ELSE
                    InvtBuffer[1].INSERT;

                  QuantityInCurrLine := "Return Qty. to Receive";
                  QtyInCurrLineAlreadyAdjusted := 0;
                  AllQtyInCurrLineAdjusted := FALSE;
                  RG23D.RESET;
                  RG23D.SETCURRENTKEY("Item No.","Posting Date","Transaction Type",Type,"Location Code");
                  RG23D.SETRANGE("Item No.","No.");
                  RG23D.SETRANGE("Document No.",SalesHeader."Applies-to Doc. No.");
                  RG23D.SETRANGE(Type,RG23D.Type::Invoice);
                  RG23D.SETRANGE("Transaction Type",RG23D."Transaction Type"::Sale);
                  RG23D.SETRANGE("Location Code","Location Code");
                  IF RG23D.FINDSET THEN
                    REPEAT
                      IF NOT TempRG23DInvtCheck.GET(RG23D."Entry No.") THEN BEGIN
                        TempRG23DInvtCheck."Entry No." := RG23D."Entry No.";
                        TempRG23DInvtCheck.INSERT;
                        CLEAR(InvtBuffer[1]);
                        InvtBuffer[1]."Item No." := "No.";
                        InvtBuffer[1].Quantity := ABS(RG23D.Quantity);
                        InvtBuffer[2] := InvtBuffer[1];
                        IF InvtBuffer[2].FIND THEN BEGIN
                          InvtBuffer[2].Quantity := InvtBuffer[2].Quantity + InvtBuffer[1].Quantity;
                          InvtBuffer[2].MODIFY;
                        END ELSE
                          InvtBuffer[1].INSERT;
                      END;
                      RG23DPurch.GET(RG23D."Ref. Entry No.");
                      RG23DPurch.CALCFIELDS("Remaining Quantity");
                      IF RG23DPurch.Quantity <> RG23DPurch."Remaining Quantity" THEN BEGIN
                        RefQuantity := 0;
                        IF NOT TempRG23DConsumedInCurrDoc.GET(RG23D."Entry No.") THEN BEGIN
                          IF TempRG23DRemainder.GET(RG23D."Entry No.") THEN BEGIN
                            RefQuantity := TempRG23DRemainder.Quantity;
                            TempRG23DRemainder.Quantity :=
                              ABS(TempRG23DRemainder.Quantity) - (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);

                            IF TempRG23DRemainder.Quantity <= 0 THEN BEGIN
                              TempRG23DConsumedInCurrDoc.TRANSFERFIELDS(TempRG23DRemainder);
                              TempRG23DConsumedInCurrDoc.INSERT;
                              TempRG23DRemainder.DELETE;
                            END ELSE BEGIN
                              RefQuantity := (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);
                              TempRG23DRemainder.Quantity := TempRG23DRemainder.Quantity - RefQuantity;
                              TempRG23DRemainder.MODIFY;
                              AllQtyInCurrLineAdjusted := TRUE;
                            END;
                          END ELSE BEGIN
                            TempRG23D.TRANSFERFIELDS(RG23D);
                            TempRG23D.Quantity := ABS(TempRG23D.Quantity);
                            RefQuantity := TempRG23D.Quantity;
                            TempRG23D.Quantity :=
                              ABS(TempRG23D.Quantity) - (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);

                            IF TempRG23D.Quantity <= 0 THEN BEGIN
                              TempRG23DConsumedInCurrDoc.TRANSFERFIELDS(RG23D);
                              TempRG23DConsumedInCurrDoc.INSERT;
                            END ELSE BEGIN
                              AllQtyInCurrLineAdjusted := TRUE;
                              RefQuantity := (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);
                              TempRG23DRemainder.TRANSFERFIELDS(RG23D);
                              TempRG23DRemainder.Quantity := ABS(RG23D.Quantity) - RefQuantity;
                              TempRG23DRemainder.INSERT;
                            END;
                          END;
                          QtyInCurrLineAlreadyAdjusted := ABS(QtyInCurrLineAlreadyAdjusted + RefQuantity);

                          DetailRG23D.RESET;
                          IF DetailRG23D.FINDLAST THEN
                            EntryNo := DetailRG23D."Entry No." + 1
                          ELSE
                            EntryNo := 1;

                          DetailRG23D.INIT;
                          DetailRG23D."Entry No." := EntryNo;
                          DetailRG23D."Document Type" := "Document Type";
                          DetailRG23D."Order No." := "Document No.";
                          DetailRG23D."Line No." := "Line No.";
                          DetailRG23D.Quantity := RefQuantity;
                          DetailRG23D."RG 23 D Entry No." := RG23D."Ref. Entry No.";
                          DetailRG23D."Transaction Type" := DetailRG23D."Transaction Type"::Sale;
                          DetailRG23D.INSERT(TRUE);
                        END;
                      END;
                    UNTIL (RG23D.NEXT = 0) OR AllQtyInCurrLineAdjusted OR (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted = 0);
                END;
          UNTIL SalesLine.NEXT = 0;
        IF InvtBuffer[1].FIND('+') THEN
          REPEAT
            IF InvtBuffer[1].Quantity < 0 THEN
              ERROR(Text16500,InvtBuffer[1]."Item No.",ABS(InvtBuffer[1].Quantity));
          UNTIL InvtBuffer[1].NEXT(-1) = 0;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE GetExcseAmountsStats@1102601000(VAR SalesLine@1102601000 : Record 37;SalesLineQty@1500003 : Decimal);
    VAR
      RG23D@1500402 : Record 16537;
      TempRG23D@1500404 : TEMPORARY Record 16537;
      StructureDetails@1500416 : Record 13793;
      QuantityInCurrLine@1500405 : Decimal;
      QtyInCurrLineAlreadyAdjusted@1500406 : Decimal;
      RefQuantity@1500407 : Decimal;
      AllQtyInCurrLineAdjusted@1500408 : Boolean;
      RG23DEntryNo@1500410 : Integer;
      CurrencyFactor@1500415 : Decimal;
    BEGIN
      IF SalesLineQty = 0 THEN
        EXIT;
      WITH SalesLine DO BEGIN
        GetSalesHeader;
        IF (NOT SalesHeader.Trading) OR (SalesHeader.Structure = '') THEN
          EXIT;

        StructureDetails.RESET;
        StructureDetails.SETRANGE(Code,SalesHeader.Structure);
        StructureDetails.SETRANGE(Type,StructureDetails.Type::Excise);
        IF StructureDetails.ISEMPTY THEN
          EXIT;

        IF (SalesHeader."Currency Code" <> '') AND (SalesHeader."Currency Factor" <> 0) THEN
          CurrencyFactor := SalesHeader."Currency Factor"
        ELSE
          CurrencyFactor := 1;
        TESTFIELD(Type,Type::Item);

        BEDAmt := 0;
        "AED(GSI)Amt" := 0;
        "AED(TTA)Amt" := 0;
        SEDAmt := 0;
        SAEDAmt := 0;
        CESSAmt := 0;
        NCCDAmt := 0;
        eCessAmt := 0;
        SHECessAmt := 0;
        ADETAmt := 0;
        ADEAmt := 0;
        ADCVATAmt := 0;

        QuantityInCurrLine := SalesLineQty;
        QtyInCurrLineAlreadyAdjusted := 0;
        RG23D.RESET;
        RG23D.SETCURRENTKEY("Item No.","Posting Date","Transaction Type",Type,"Location Code");
        RG23D.SETRANGE("Item No.","No.");
        IF SalesHeader."Document Type" IN
           [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice]
        THEN
          RG23D.SETRANGE("Transaction Type",RG23D."Transaction Type"::Purchase)
        ELSE BEGIN
          RG23D.SETRANGE("Document No.",SalesHeader."Applies-to Doc. No.");
          RG23D.SETRANGE("Transaction Type",RG23D."Transaction Type"::Sale);
        END;
        RG23D.SETRANGE("Location Code","Location Code");
        RG23D.SETRANGE(Closed,FALSE);
        IF RG23D.FINDSET THEN
          REPEAT
            RefQuantity := 0;
            IF SalesHeader."Document Type" IN
               [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice]
            THEN
              RG23DEntryNo := RG23D."Entry No."
            ELSE
              RG23DEntryNo := RG23D."Ref. Entry No.";
            IF NOT TempRG23DConsumedInCurrDoc.GET(RG23DEntryNo) THEN BEGIN
              IF TempRG23DRemainder.GET(RG23DEntryNo) THEN BEGIN
                RefQuantity := TempRG23DRemainder.Quantity;
                TempRG23DRemainder.Quantity :=
                  TempRG23DRemainder.Quantity - (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);

                IF TempRG23DRemainder.Quantity <= 0 THEN BEGIN
                  TempRG23DConsumedInCurrDoc.TRANSFERFIELDS(TempRG23DRemainder);
                  TempRG23DConsumedInCurrDoc.INSERT;
                  TempRG23DRemainder.DELETE;
                END ELSE BEGIN
                  RefQuantity := (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);
                  TempRG23DRemainder.Quantity := TempRG23DRemainder.Quantity - RefQuantity;
                  TempRG23DRemainder.MODIFY;
                  AllQtyInCurrLineAdjusted := TRUE;
                END;
              END ELSE BEGIN
                IF SalesHeader."Document Type" IN
                   [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice]
                THEN BEGIN
                  RG23D.CALCFIELDS("Remaining Quantity");
                  TempRG23D.TRANSFERFIELDS(RG23D);
                  TempRG23D.Quantity := RG23D."Remaining Quantity";
                END ELSE BEGIN
                  TempRG23D.TRANSFERFIELDS(RG23D);
                  TempRG23D.Quantity := ABS(RG23D.Quantity);
                END;
                RefQuantity := TempRG23D.Quantity;
                TempRG23D.Quantity :=
                  TempRG23D.Quantity - (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);

                IF TempRG23D.Quantity <= 0 THEN BEGIN
                  TempRG23DConsumedInCurrDoc.TRANSFERFIELDS(RG23D);
                  TempRG23DConsumedInCurrDoc.INSERT;
                END ELSE BEGIN
                  AllQtyInCurrLineAdjusted := TRUE;
                  RefQuantity := (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted);
                  TempRG23DRemainder.TRANSFERFIELDS(RG23D);
                  TempRG23DRemainder.Quantity := RG23D."Remaining Quantity" - RefQuantity;
                  TempRG23DRemainder.INSERT;
                END;
              END;

              QtyInCurrLineAlreadyAdjusted := QtyInCurrLineAlreadyAdjusted + RefQuantity;
              BEDAmt += ABS(RG23D."BED Amount Per Unit") * RefQuantity * CurrencyFactor;
              "AED(GSI)Amt" += ABS(RG23D."AED(GSI) Amount Per Unit") * RefQuantity * CurrencyFactor;
              "AED(TTA)Amt" += ABS(RG23D."AED(TTA) Amount Per Unit") * RefQuantity * CurrencyFactor;
              SEDAmt += ABS(RG23D."SED Amount Per Unit") * RefQuantity * CurrencyFactor;
              SAEDAmt += ABS(RG23D."SAED Amount Per Unit") * RefQuantity * CurrencyFactor;
              CESSAmt += ABS(RG23D."CESS Amount Per Unit") * RefQuantity * CurrencyFactor;
              NCCDAmt += ABS(RG23D."NCCD Amount Per Unit") * RefQuantity * CurrencyFactor;
              eCessAmt += ABS(RG23D."eCess Amount Per Unit") * RefQuantity * CurrencyFactor;
              SHECessAmt += ABS(RG23D."SHE Cess Amount Per Unit") * RefQuantity * CurrencyFactor;
              ADETAmt += ABS(RG23D."ADET Amount Per Unit") * RefQuantity * CurrencyFactor;
              ADEAmt += ABS(RG23D."ADE Amount Per Unit") * RefQuantity * CurrencyFactor;
              ADCVATAmt += ABS(RG23D."ADC VAT Amount Per Unit") * RefQuantity * CurrencyFactor;
            END;
          UNTIL (RG23D.NEXT = 0) OR AllQtyInCurrLineAdjusted OR (QuantityInCurrLine - QtyInCurrLineAlreadyAdjusted = 0);

        "BED Amount" := BEDAmt;
        "AED(GSI) Amount" := "AED(GSI)Amt";
        "AED(TTA) Amount" := "AED(TTA)Amt";
        "SED Amount" := SEDAmt;
        "SAED Amount" := SAEDAmt;
        "CESS Amount" := CESSAmt;
        "NCCD Amount" := NCCDAmt;
        "eCess Amount" := eCessAmt;
        "SHE Cess Amount" := SHECessAmt;
        "ADET Amount" := ADETAmt;
        "ADE Amount" := ADEAmt;
        "ADC VAT Amount" := ADCVATAmt;
      END;
    END;

    LOCAL PROCEDURE CheckWMS@98();
    BEGIN
      IF CurrFieldNo <> 0 THEN
        CheckLocationOnWMS;
    END;

    PROCEDURE CheckLocationOnWMS@101();
    VAR
      DialogText@1001 : Text;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        DialogText := Text035;
        IF "Quantity (Base)" <> 0 THEN
          CASE "Document Type" OF
            "Document Type"::Invoice:
              IF "Shipment No." = '' THEN
                IF Location.GET("Location Code") AND Location."Directed Put-away and Pick" THEN BEGIN
                  DialogText += Location.GetRequirementText(Location.FIELDNO("Require Shipment"));
                  ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
                END;
            "Document Type"::"Credit Memo":
              IF "Return Receipt No." = '' THEN
                IF Location.GET("Location Code") AND Location."Directed Put-away and Pick" THEN BEGIN
                  DialogText += Location.GetRequirementText(Location.FIELDNO("Require Receive"));
                  ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
                END;
          END;
      END;
    END;

    PROCEDURE IsServiceItem@68() : Boolean;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(FALSE);
      IF "No." = '' THEN
        EXIT(FALSE);
      GetItem;
      EXIT(Item.Type = Item.Type::Service);
    END;

    LOCAL PROCEDURE CalcAmountAddedToExciseBase@1500045(SalesLine@1500000 : Record 37) : Decimal;
    BEGIN
      WITH SalesLine DO
        EXIT("MRP Price" * Quantity * (1 - "Abatement %" / 100));
    END;

    LOCAL PROCEDURE IsServiceTaxExist@1500054(SalesLine@1500000 : Record 37) : Boolean;
    BEGIN
      EXIT((SalesLine."Service Tax Amount" <> 0) OR (SalesLine."Service Tax SBC Amount" <> 0) OR (SalesLine."KK Cess Amount" <> 0))
    END;

    LOCAL PROCEDURE ValidateReturnReasonCode@99(CallingFieldNo@1000 : Integer);
    BEGIN
      IF CallingFieldNo = 0 THEN
        EXIT;
      IF "Return Reason Code" = '' THEN
        UpdateUnitPrice(CallingFieldNo);

      IF ReturnReason.GET("Return Reason Code") THEN BEGIN
        IF (CallingFieldNo <> FIELDNO("Location Code")) AND (ReturnReason."Default Location Code" <> '') THEN
          VALIDATE("Location Code",ReturnReason."Default Location Code");
        IF ReturnReason."Inventory Value Zero" THEN
          VALIDATE("Unit Cost (LCY)",0)
        ELSE
          IF "Unit Price" = 0 THEN
            UpdateUnitPrice(CallingFieldNo);
      END;
    END;

    PROCEDURE HasTypeToFillMandatotyFields@103() : Boolean;
    BEGIN
      EXIT(Type <> Type::" ");
    END;

    PROCEDURE GetDeferralAmount@104() DeferralAmount : Decimal;
    BEGIN
      IF "VAT Base Amount" <> 0 THEN
        DeferralAmount := "VAT Base Amount"
      ELSE
        DeferralAmount := "Line Amount" - "Inv. Discount Amount";
    END;

    LOCAL PROCEDURE UpdateDeferralAmounts@105();
    VAR
      AdjustStartDate@1000 : Boolean;
    BEGIN
      GetSalesHeader;
      DeferralPostDate := SalesHeader."Posting Date";
      AdjustStartDate := TRUE;
      IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
        IF "Returns Deferral Start Date" = 0D THEN
          "Returns Deferral Start Date" := SalesHeader."Posting Date";
        DeferralPostDate := "Returns Deferral Start Date";
        AdjustStartDate := FALSE;
      END;

      DeferralUtilities.RemoveOrSetDeferralSchedule(
        "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
        "Document Type","Document No.","Line No.",
        GetDeferralAmount,DeferralPostDate,Description,SalesHeader."Currency Code",AdjustStartDate);
    END;

    PROCEDURE ShowDeferrals@106(PostingDate@1000 : Date;CurrencyCode@1001 : Code[10]) : Boolean;
    BEGIN
      EXIT(DeferralUtilities.OpenLineScheduleEdit(
          "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
          "Document Type","Document No.","Line No.",
          GetDeferralAmount,PostingDate,Description,CurrencyCode));
    END;

    LOCAL PROCEDURE InitHeaderDefaults@107(SalesHeader@1000 : Record 36);
    BEGIN
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Quote THEN BEGIN
        IF (SalesHeader."Sell-to Customer No." = '') AND
           (SalesHeader."Sell-to Customer Template Code" = '')
        THEN
          ERROR(
            Text031,
            SalesHeader.FIELDCAPTION("Sell-to Customer No."),
            SalesHeader.FIELDCAPTION("Sell-to Customer Template Code"));
        IF (SalesHeader."Bill-to Customer No." = '') AND
           (SalesHeader."Bill-to Customer Template Code" = '')
        THEN
          ERROR(
            Text031,
            SalesHeader.FIELDCAPTION("Bill-to Customer No."),
            SalesHeader.FIELDCAPTION("Bill-to Customer Template Code"));
      END ELSE
        SalesHeader.TESTFIELD("Sell-to Customer No.");

      "Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
      "Currency Code" := SalesHeader."Currency Code";
      IF NOT IsServiceItem THEN
        "Location Code" := SalesHeader."Location Code";
      "Service Tax Registration No." := ServiceTaxMgt.GetServiceTaxRegNoForLocation("Location Code");
      "Customer Price Group" := SalesHeader."Customer Price Group";
      "Customer Disc. Group" := SalesHeader."Customer Disc. Group";
      "Allow Line Disc." := SalesHeader."Allow Line Disc.";
      "Transaction Type" := SalesHeader."Transaction Type";
      "Transport Method" := SalesHeader."Transport Method";
      "Bill-to Customer No." := SalesHeader."Bill-to Customer No.";
      "Gen. Bus. Posting Group" := SalesHeader."Gen. Bus. Posting Group";
      "VAT Bus. Posting Group" := SalesHeader."VAT Bus. Posting Group";
      "Exit Point" := SalesHeader."Exit Point";
      Area := SalesHeader.Area;
      "Transaction Specification" := SalesHeader."Transaction Specification";
      "Tax Area Code" := SalesHeader."Tax Area Code";
      "Tax Liable" := SalesHeader."Tax Liable";
      IF NOT "System-Created Entry" AND ("Document Type" = "Document Type"::Order) AND (Type <> Type::" ") THEN
        "Prepayment %" := SalesHeader."Prepayment %";
      "Prepayment Tax Area Code" := SalesHeader."Tax Area Code";
      "Prepayment Tax Liable" := SalesHeader."Tax Liable";
      "Responsibility Center" := SalesHeader."Responsibility Center";
                                                                "Assessee Code" := SalesHeader."Assessee Code";
                                                                "Form Code" := SalesHeader."Form Code";
                                                                "Form No." := SalesHeader."Form No.";
                                                                "Excise Bus. Posting Group" := SalesHeader."Excise Bus. Posting Group";
                                                                "Free Supply" := SalesHeader."Free Supply";

      "Shipping Agent Code" := SalesHeader."Shipping Agent Code";
      "Shipping Agent Service Code" := SalesHeader."Shipping Agent Service Code";
      "Outbound Whse. Handling Time" := SalesHeader."Outbound Whse. Handling Time";
      "Shipping Time" := SalesHeader."Shipping Time";
    END;

    LOCAL PROCEDURE InitDeferralCode@108();
    BEGIN
      IF "Document Type" IN
         ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Credit Memo","Document Type"::"Return Order"]
      THEN
        CASE Type OF
          Type::"G/L Account":
            VALIDATE("Deferral Code",GLAcc."Default Deferral Template Code");
          Type::Item:
            VALIDATE("Deferral Code",Item."Default Deferral Template Code");
          Type::Resource:
            VALIDATE("Deferral Code",Res."Default Deferral Template Code");
        END;
    END;

    PROCEDURE DefaultDeferralCode@109();
    BEGIN
      CASE Type OF
        Type::"G/L Account":
          BEGIN
            GLAcc.GET("No.");
            InitDeferralCode;
          END;
        Type::Item:
          BEGIN
            GetItem;
            InitDeferralCode;
          END;
        Type::Resource:
          BEGIN
            Res.GET("No.");
            InitDeferralCode;
          END;
      END;
    END;

    PROCEDURE IsCreditDocType@110() : Boolean;
    BEGIN
      EXIT("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]);
    END;

    LOCAL PROCEDURE CheckExciseStructure@1500028(StructureCode@1500001 : Code[10]) : Boolean;
    VAR
      StructureDetails@1500002 : Record 13793;
    BEGIN
      WITH StructureDetails DO BEGIN
        SETRANGE(Code,StructureCode);
        SETRANGE(Type,Type::Excise);
        EXIT(NOT ISEMPTY);
      END;
    END;

    LOCAL PROCEDURE IsFullyInvoiced@124() : Boolean;
    BEGIN
      EXIT(("Qty. Shipped Not Invd. (Base)" = 0) AND ("Qty. Shipped (Base)" = "Quantity (Base)"))
    END;

    LOCAL PROCEDURE CleanSpecialOrderFieldsAndCheckAssocPurchOrder@125();
    BEGIN
      IF ("Special Order Purch. Line No." <> 0) AND IsFullyInvoiced THEN
        IF CleanPurchaseLineSpecialOrderFields THEN BEGIN
          "Special Order Purchase No." := '';
          "Special Order Purch. Line No." := 0;
        END;
      CheckAssocPurchOrder('');
    END;

    LOCAL PROCEDURE CleanPurchaseLineSpecialOrderFields@119() : Boolean;
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      IF PurchaseLine.GET(PurchaseLine."Document Type"::Order,"Special Order Purchase No.","Special Order Purch. Line No.") THEN BEGIN
        IF PurchaseLine."Qty. Received (Base)" < "Qty. Shipped (Base)" THEN
          EXIT(FALSE);

        PurchaseLine."Special Order" := FALSE;
        PurchaseLine."Special Order Sales No." := '';
        PurchaseLine."Special Order Sales Line No." := 0;
        PurchaseLine.MODIFY;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckHeaderLocation@1500200();
    BEGIN
       GetSalesHeader;
      IF NOT GSTManagement.IsGSTApplicable(SalesHeader.Structure) THEN
        EXIT;
       IF "Job No." = '' THEN
       TESTFIELD("Location Code",SalesHeader."Location Code");
    END;

    PROCEDURE UpdateGSTAmounts@1500040(GSTBaseAmount@1500009 : Decimal);
    VAR
      ItemChargeAssignmentSales@1500005 : Record 5809;
      Customer@1500002 : Record 18;
      ShiptoAddress@1500006 : Record 222;
      GSTManagement@1500008 : Codeunit 16401;
      GSTPerStateCode@1500007 : Code[10];
      GSTJurisdiction@1500004 : 'Intrastate,Interstate';
      TotalGST@1500003 : Decimal;
      TransactionType@1500000 : 'Purchase,Sale';
      SourceType@1500001 : 'Vendor,Customer';
      Item@1500010 : Boolean;
      UnitPrice@1500011 : Decimal;
    BEGIN
      IF "Line No." = 0 THEN
        EXIT;

      GLSetup.GET;
      GetSalesHeader;
      Currency.Initialize("Currency Code");
      GSTManagement.DeleteGSTBuffer(TransactionType::Sale,"Document Type","Document No.","Line No.");
      GSTManagement.DeleteGSTCalculationBuffer(TransactionType::Sale,"Document Type","Document No.","Line No.");
      VALIDATE("GST Base Amount",0);
      IF SalesHeader1."No." = '' THEN
        SalesHeader1.COPY(SalesHeader);
      IF NOT GSTManagement.IsGSTApplicable(SalesHeader1.Structure) THEN
        EXIT;
      IF "Unit Price" = 0 THEN EXIT;
      IF "Price Inclusive of Tax" THEN
        UnitPrice := "Unit Price Incl. of Tax"
      ELSE
        UnitPrice := "Unit Price";
      IF Type = Type::Item THEN
        Item := TRUE;
      Customer.GET(SalesHeader1."Sell-to Customer No.");
      IF SalesHeader1."GST Customer Type" = SalesHeader1."GST Customer Type"::" " THEN
        EXIT;
      IF "GST Place of Supply" = "GST Place of Supply"::" " THEN
        EXIT;
      IF SalesHeader1."GST Customer Type" IN [SalesHeader1."GST Customer Type"::"Deemed Export",
                                              SalesHeader1."GST Customer Type"::Export,
                                              SalesHeader1."GST Customer Type"::"SEZ Development",
                                              SalesHeader1."GST Customer Type"::"SEZ Unit"] THEN
        CASE "GST Place of Supply" OF
          "GST Place of Supply"::"Ship-to Address":
              IF SalesHeader1."GST Ship-to State Code" <> '' THEN
                EXIT;
          "GST Place of Supply"::"Bill-to Address":
              IF SalesHeader1."GST Bill-to State Code" <> '' THEN
                EXIT;
        END;
      IF ("Free Supply") AND (StrOrderLine."Base Amount" = 0) THEN
        GSTBaseAmount := Quantity * "Unit Price";

      TESTFIELD("Location Code",SalesHeader1."Location Code");
      IF Location.GET("Location Code") THEN;
      IF SalesHeader1."GST Customer Type" IN [SalesHeader1."GST Customer Type"::Export,
                                              SalesHeader1."GST Customer Type"::"Deemed Export",
                                              SalesHeader1."GST Customer Type"::"SEZ Development",
                                              SalesHeader1."GST Customer Type"::"SEZ Unit"] THEN
        GSTPerStateCode :=
          GSTManagement.GetGSTConfiguration(SourceType::Customer,SalesHeader1."Location State Code",'',GSTJurisdiction)
      ELSE
        GSTPerStateCode :=
          GSTManagement.GetGSTConfiguration(
            SourceType::Customer,SalesHeader1."Location State Code",GetPlaceOfSupplyStateCode(Rec),GSTJurisdiction);
      IF GSTPerStateCode = '' THEN
        EXIT;
      IF SalesHeader1."Currency Code" <> '' THEN BEGIN
        Currency.TESTFIELD("Amount Rounding Precision");
        GSTBaseAmount :=
          ROUND(
            GSTBaseAmount,Currency."Amount Rounding Precision")
      END;
      IF (Type <> Type::"Charge (Item)") THEN
        TotalGST :=
          GSTManagement.CalculateGSTAmounts(
            "Document No.","Line No.",GSTJurisdiction,GSTPerStateCode,"GST Group Code",
            SalesHeader1."Posting Date",GSTBaseAmount,TransactionType::Sale,"Document Type",
            "Currency Code",SalesHeader1."Currency Factor",UnitPrice,Item,Quantity,"Unit of Measure Code","No.")
      ELSE BEGIN
        ItemChargeAssignmentSales.SETRANGE("Document Type","Document Type");
        ItemChargeAssignmentSales.SETRANGE("Document No.","Document No.");
        ItemChargeAssignmentSales.SETRANGE("Document Line No.","Line No.");
        ItemChargeAssignmentSales.SETFILTER("Qty. to Assign",'<>0');
        IF ItemChargeAssignmentSales.FINDSET THEN BEGIN
          REPEAT
            TotalGST :=
              TotalGST + GSTManagement.GetSaleItemChargeInputGSTCredit(
                SalesHeader1,Rec,ItemChargeAssignmentSales,
                GSTPerStateCode,GSTJurisdiction,"Currency Code",SalesHeader1."Currency Factor",UnitPrice);
            GSTManagement.DeleteGSTCalculationBuffer(TransactionType::Sale,"Document Type","Document No.","Line No.");
          UNTIL ItemChargeAssignmentSales.NEXT = 0;
        END ELSE
          TotalGST :=
            GSTManagement.CalculateGSTAmounts(
              "Document No.","Line No.",GSTJurisdiction,GSTPerStateCode,"GST Group Code",
              SalesHeader1."Posting Date",GSTBaseAmount,TransactionType::Sale,"Document Type",
              "Currency Code",SalesHeader1."Currency Factor",UnitPrice,Item,Quantity,"Unit of Measure Code","No.");
      END;
      IF SalesHeader1."GST Customer Type" = SalesHeader1."GST Customer Type"::Exempted THEN
        TotalGST := 0;
      "Total GST Amount" := TotalGST;

      GLSetup.GET;
      IF GSTBaseAmount <> 0 THEN
        "GST %" := "Total GST Amount" / GSTBaseAmount * 100;

      "GST Base Amount" := GSTBaseAmount;
      "GST Jurisdiction Type" := GSTJurisdiction;
      "Invoice Type" := SalesHeader."Invoice Type";
      GSTManagement.DeleteGSTCalculationBuffer(TransactionType::Sale,"Document Type","Document No.","Line No.");
    END;

    LOCAL PROCEDURE UpdateGSTPlaceOfSupply@1500044(HSNSACCode@1500001 : Code[8];GSTGroupCode@1500000 : Code[20];GSTExempted@1500002 : Boolean);
    BEGIN
      "HSN/SAC Code" := HSNSACCode;
      "GST Group Code" := GSTGroupCode;
      Exempted := GSTExempted;
      SalesSetup.GET;
      "GST Place of Supply" := SalesSetup."GST Dependency Type";
      IF GSTGroup.GET(GSTGroupCode) THEN BEGIN
        IF GSTGroup."Reverse Charge" THEN
          ERROR(GSTGroupReverseChargeErr,GSTGroupCode);
        "GST Group Type" := GSTGroup."GST Group Type";
        IF GSTGroup."GST Place Of Supply" <> GSTGroup."GST Place Of Supply"::" " THEN
        "GST Place of Supply" := GSTGroup."GST Place Of Supply";
      END;
    END;

    PROCEDURE GetCurrentSalesHeader@1500042(SalesHeaderRec@1500000 : Record 36);
    BEGIN
      SalesHeader1 := SalesHeaderRec;
    END;

    PROCEDURE GetPlaceOfSupplyStateCode@1500043(SalesLine@1500004 : Record 37) : Code[10];
    VAR
      Location@1500002 : Record 14;
      ShiptoAddress@1500003 : Record 222;
      Customer@1500001 : Record 18;
      PlaceofSupplyStateCode@1500000 : Code[10];
    BEGIN
      SalesSetup.GET;
      WITH SalesLine DO BEGIN
        GetSalesHeader;
        SalesHeader.GET("Document Type","Document No.");
        CASE "GST Place of Supply" OF
          "GST Place of Supply"::"Bill-to Address":
              PlaceofSupplyStateCode := SalesHeader."GST Bill-to State Code";
          "GST Place of Supply"::"Ship-to Address":
              PlaceofSupplyStateCode := SalesHeader."GST Ship-to State Code";
          "GST Place of Supply"::"Location Address":
              PlaceofSupplyStateCode := SalesHeader."Location State Code";
          "GST Place of Supply"::" ":
              IF SalesSetup."GST Dependency Type" = SalesSetup."GST Dependency Type"::"Bill-to Address" THEN
                PlaceofSupplyStateCode := SalesHeader."GST Bill-to State Code"
              ELSE IF SalesSetup."GST Dependency Type" = SalesSetup."GST Dependency Type"::"Ship-to Address" THEN
                PlaceofSupplyStateCode := SalesHeader."GST Ship-to State Code"
        END;
      END;
      EXIT(PlaceofSupplyStateCode);
    END;

    PROCEDURE ValidateGSTRegistration@1500052();
    VAR
      ShiptoAddress@1500002 : Record 222;
      Customer@1500001 : Record 18;
      SalesHeader1@1500003 : Record 36;
    BEGIN
      SalesHeader1.GET("Document Type","Document No.");
      Customer.GET("Bill-to Customer No.");
      CASE "GST Place of Supply" OF
        "GST Place of Supply"::"Bill-to Address":
          BEGIN
            CASE SalesHeader1."GST Customer Type" OF
              SalesHeader1."GST Customer Type"::Registered:
                Customer.TESTFIELD("GST Registration No.");
              SalesHeader1."GST Customer Type"::Unregistered:
               SalesHeader1.TESTFIELD("GST Bill-to State Code");
            END;
        END;
        "GST Place of Supply"::"Ship-to Address":
         BEGIN
           Customer.GET("Bill-to Customer No.");
           ShiptoAddress.GET("Bill-to Customer No.",SalesHeader1."Ship-to Code");
           CASE SalesHeader1."GST Customer Type" OF
             SalesHeader1."GST Customer Type"::Registered:
                 BEGIN
               ShiptoAddress.TESTFIELD(ShiptoAddress."GST Registration No.");
                  SalesHeader1.TESTFIELD("GST Ship-to State Code");
                 END;
             SalesHeader1."GST Customer Type"::Unregistered:
               BEGIN
                SalesHeader1.TESTFIELD("GST Ship-to State Code");
                ShiptoAddress.TESTFIELD("GST Registration No.",'');
              END;
               SalesHeader1."GST Customer Type"::Export:
             ShiptoAddress.TESTFIELD("GST Registration No.",'');
          END;
         END;
      END;
    END;

    PROCEDURE CheckHeaderAndLineLocation@1500047(SalesHeader@1500001 : Record 36);
    VAR
      SalesLine@1500000 : Record 37;
    BEGIN
      IF NOT GSTManagement.IsGSTApplicable(SalesHeader.Structure) THEN
        EXIT;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
      SalesLine.SETFILTER("Location Code",'<>%1',SalesHeader."Location Code");
      IF SalesLine.FINDFIRST THEN
        SalesLine.TESTFIELD("Location Code",SalesHeader."Location Code");
    END;

    LOCAL PROCEDURE CheckStructureOnHeader@1500046(SalesHeader@1500000 : Record 36);
    BEGIN
      IF SalesHeader.Structure <> "PIT Structure" THEN
        ERROR(DiffStructureErr);
    END;

    LOCAL PROCEDURE GetAppliedDoc@1500061(VAR CustLedgerEntry@1500001 : Record 21;CustomerNo@1500000 : Code[20];ApplicationDocNo@1500002 : Code[20]);
    BEGIN
      CustLedgerEntry.SETCURRENTKEY("Customer No.","Applies-to ID","Document No.");
      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgerEntry.SETRANGE("Document No.",ApplicationDocNo);
      CustLedgerEntry.SETFILTER("Amount to Apply",'<>%1',0);
      IF CustLedgerEntry.FINDFIRST THEN
    END;

    LOCAL PROCEDURE CheckTCSValidaion@1500062(SalesHeader@1500001 : Record 36;CustEntryNo@1500004 : Integer);
    VAR
      SalesLine@1500005 : Record 37;
      CustLedgerEntry@1500006 : Record 21;
    BEGIN
      GetAppliedDoc(CustLedgerEntry,SalesHeader."Bill-to Customer No.",SalesHeader."Applies-to Doc. No.");
      IF CustLedgerEntry.FINDFIRST THEN BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      IF CustLedgerEntry."TCS Nature of Collection" <> '' THEN
        SalesLine.SETRANGE("TCS Nature of Collection",CustLedgerEntry."TCS Nature of Collection");
      IF CustLedgerEntry."GST Group Code" <> '' THEN
        SalesLine.SETRANGE("GST Group Code",CustLedgerEntry."GST Group Code");
      IF NOT SalesLine.FINDFIRST THEN
        ERROR(
          STRSUBSTNO(
          GSTGroupEqualErr,CustEntryNo,
          FORMAT(SalesHeader."Document Type"),SalesHeader."No."));
      END;
    END;

    LOCAL PROCEDURE GetGSTAppliedDocAmount@1500063(TCSNatureofCollection@1500001 : Code[10];GSTGroupCode@1500002 : Code[20];AppliedDocNo@1500003 : Code[20];AppliedGSTGroupCode@1500004 : Code[20];GSTGroup@1500005 : Boolean;CustomerNo@1500000 : Code[20]) : Decimal;
    VAR
      CustLedgerEntry@1500006 : Record 21;
    BEGIN
      CustLedgerEntry.RESET;
      CustLedgerEntry.SETCURRENTKEY("Customer No.","Applies-to ID","Document No.");
      CustLedgerEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgerEntry.SETRANGE("Document No.",AppliedDocNo);
      CustLedgerEntry.SETRANGE("TCS Nature of Collection",TCSNatureofCollection);
      CustLedgerEntry.SETFILTER("Amount to Apply",'<>%1',0);
      IF (GSTGroup) AND (AppliedGSTGroupCode <> '') THEN
        CustLedgerEntry.SETRANGE("GST Group Code",GSTGroupCode);
      IF CustLedgerEntry.FINDFIRST THEN
        CustLedgerEntry.CALCFIELDS("Remaining Amt. (LCY)");
      EXIT(CustLedgerEntry."Remaining Amt. (LCY)" + CustLedgerEntry."Total TDS/TCS Incl SHE CESS");
    END;

    LOCAL PROCEDURE UpdateAmountBasedOnCurrency@1500049();
    BEGIN
      "TDS/TCS Amount" :=
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            SalesHeader."Posting Date","Currency Code",
            "TDS/TCS Amount",SalesHeader."Currency Factor"),
          Currency."Amount Rounding Precision");
      "Surcharge Amount" :=
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            SalesHeader."Posting Date","Currency Code",
            "Surcharge Amount",SalesHeader."Currency Factor"),
          Currency."Amount Rounding Precision");
      "eCESS on TDS/TCS Amount" :=
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            SalesHeader."Posting Date","Currency Code",
            "eCESS on TDS/TCS Amount",SalesHeader."Currency Factor"),
          Currency."Amount Rounding Precision");
      "SHE Cess on TDS/TCS Amount" :=
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            SalesHeader."Posting Date","Currency Code",
            "SHE Cess on TDS/TCS Amount",SalesHeader."Currency Factor"),
          Currency."Amount Rounding Precision");
      "Total TDS/TCS Incl. SHE CESS" :=
        ROUND(
          CurrExchRate.ExchangeAmtLCYToFCY(
            SalesHeader."Posting Date","Currency Code",
            "Total TDS/TCS Incl. SHE CESS",SalesHeader."Currency Factor"),
          Currency."Amount Rounding Precision");
      "Bal. TDS/TCS Including SHECESS" := "Total TDS/TCS Incl. SHE CESS";
    END;

    PROCEDURE InsertFreightLine@121(VAR FreightAmount@1000 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      IF FreightAmount <= 0 THEN BEGIN
        FreightAmount := 0;
        EXIT;
      END;

      SalesSetup.GET;
      SalesSetup.TESTFIELD("Freight G/L Acc. No.");

      TESTFIELD("Document Type");
      TESTFIELD("Document No.");

      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","Document No.");

      SalesLine.SETRANGE(Type,SalesLine.Type::"G/L Account");
      SalesLine.SETRANGE("No.",SalesSetup."Freight G/L Acc. No.");
      IF SalesLine.FINDFIRST THEN BEGIN
        SalesLine.VALIDATE(Quantity,1);
        SalesLine.VALIDATE("Unit Price",FreightAmount);
        SalesLine.MODIFY;
      END ELSE BEGIN
        SalesLine.SETRANGE(Type);
        SalesLine.SETRANGE("No.");
        IF SalesLine.FINDLAST THEN;
        SalesLine."Line No." += 10000;

        SalesLine.INIT;
        SalesLine.VALIDATE(Type,SalesLine.Type::"G/L Account");
        SalesLine.VALIDATE("No.",SalesSetup."Freight G/L Acc. No.");
        SalesLine.VALIDATE(Description,FreightLineDescriptionTxt);
        SalesLine.VALIDATE(Quantity,1);
        SalesLine.VALIDATE("Unit Price",FreightAmount);
        SalesLine.INSERT;
      END;
    END;

    LOCAL PROCEDURE CheckTCSwithGSTValidation@15000065(SalesHeader@1500001 : Record 36);
    VAR
      CustLedgerEntry@1500002 : Record 21;
      SalesLine@1500003 : Record 37;
    BEGIN
      CustLedgerEntry.SETCURRENTKEY("Customer No.","Applies-to ID","Document No.");
      CustLedgerEntry.SETRANGE("Customer No.",SalesHeader."Bill-to Customer No.");
      CustLedgerEntry.SETRANGE("Document No.",SalesHeader."Applies-to Doc. No.");
      CustLedgerEntry.SETFILTER("Amount to Apply",'<>%1',0);
      IF CustLedgerEntry.FINDFIRST THEN BEGIN
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        IF CustLedgerEntry."TCS Nature of Collection" <> '' THEN
          SalesLine.SETRANGE("TCS Nature of Collection",CustLedgerEntry."TCS Nature of Collection");
        IF NOT SalesLine.FINDFIRST THEN
          SalesLine.TESTFIELD("TCS Nature of Collection");
      END;
    END;

    LOCAL PROCEDURE CalcTotalAmtToAssign@152(TotalQtyToAssign@1000 : Decimal) TotalAmtToAssign : Decimal;
    BEGIN
      TotalAmtToAssign := ("Line Amount" - "Inv. Discount Amount") * TotalQtyToAssign / Quantity;
      IF SalesHeader."Prices Including VAT" THEN
        TotalAmtToAssign := TotalAmtToAssign / (1 + "VAT %" / 100) - "VAT Difference";

      TotalAmtToAssign := ROUND(TotalAmtToAssign,Currency."Amount Rounding Precision");
    END;

    PROCEDURE GetGSTPercentage@15000067(DocumentType@1500000 : Option;DocumentNo@1500001 : Code[20];LineNo@1500002 : Integer;VAR GSTPer@1500003 : Decimal);
    VAR
      DetailedGSTEntryBuffer@1500004 : Record 16412;
    BEGIN
      WITH DetailedGSTEntryBuffer DO BEGIN
        SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
        SETRANGE("Document Type",DocumentType);
        SETRANGE("Document No.",DocumentNo);
        SETRANGE("Line No.",LineNo);
        IF FINDSET THEN
          REPEAT
            GSTPer += "GST %";
          UNTIL NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

