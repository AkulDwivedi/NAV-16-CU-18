OBJECT Codeunit 144047 e-TDS Transactions
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1500013 : Codeunit 130000;
      LibraryERM@1500000 : Codeunit 131300;
      LibraryPurchase@1500002 : Codeunit 130512;
      LibraryUtility@1500003 : Codeunit 131000;
      LibraryTDS@1500006 : Codeunit 143000;
      LibraryWarehouse@1500007 : Codeunit 132204;
      LibraryVariableStorage@1500009 : Codeunit 131004;
      LibraryReportDataset@1500011 : Codeunit 131007;
      LibraryTextFileValidation@1500012 : Codeunit 131003;
      LibraryRandom@1500014 : Codeunit 130440;
      RowMustNotExistErr@1501000 : TextConst 'ENU=Row must not exist.';
      ValueNotFoundErr@1501001 : TextConst 'ENU=Value Not Found.';
      Vendor@1500001 : Record 23;
      PANNo@1500004 : Code[10];
      ReportFrequencyErr@1500016 : TextConst 'ENU=Select Report Frequency.';
      FinancialYearErr@1500015 : TextConst 'ENU=Select Financial Year.';
      FullNameErr@1500010 : TextConst 'ENU=Enter Person Name.';
      DesignationErr@1500008 : TextConst 'ENU=Enter Designation.';
      PrintDateErr@1500005 : TextConst 'ENU=Enter Printing Date.';
      PANNoEmptyErr@1500017 : TextConst 'ENU=Select P.A.N. No.';
      FileNameErr@1500018 : TextConst 'ENU=Please enter the file name.';
      TANNoEmptyErr@1500019 : TextConst 'ENU=Select T.A.N. No.';
      NameofReturnUtilityErr@1500020 : TextConst 'ENU=Enter Name of the Return Preparation Utility.';
      ReportFrequency@1500021 : ' ,Q1,Q2,Q3,Q4';
      FinancialYear@1500022 : Code[6];
      FullName@1500023 : Text;
      Designation@1500024 : Code[20];
      PrintingDate@1500025 : Date;
      eTDSFileName@1500026 : Text;
      TANNo@1500027 : Code[10];
      NameOfReturnPreparationUtility@1500028 : Code[3];

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateCertificateNosRequestPageHandler,ConfirmHandler,MessageHandler,Form26QRequestPageHandler)]
    PROCEDURE Form26QWithTransporterFalse@1500400();
    VAR
      GeneralLedgerSetup@1500014 : Record 98;
      IncomeTaxAccountingPeriod@1500025 : Record 13724;
      TDSNatureOfDeduction@1500015 : Record 13726;
      ConcessionalCode@1500016 : Code[10];
      OldWorkDate@1500018 : Date;
    BEGIN
      // Test to verify Concessional Code on Form 26 Q Preview.

      // Setup: Create setup for Income Tax Accounting Period.
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);

      // Exercise: Run Form 26Q Report.
      ConcessionalCode := CreateSetupAndRunFormReport(
        IncomeTaxAccountingPeriod,'',LibraryRandom.RandDec(1000,2),LibraryRandom.RandDec(1000,2),
        TDSNatureOfDeduction."TDS Group"::Contractor,FALSE,REPORT::"Form 26Q");

      // Verify: Verify Consessional Code on Form 26Q Preview.
      VerifyValuesOnForm26QPreview(ConcessionalCode,TDSNatureOfDeduction."TDS Group"::Contractor);

      // Tear Down.
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateCertificateNosRequestPageHandler,ConfirmHandler,MessageHandler,Form26QRequestPageHandler,GenerateeTDSRequestPageHandler)]
    PROCEDURE Form26QWithTransporterTrue@1500401();
    VAR
      GeneralLedgerSetup@1500019 : Record 98;
      IncomeTaxAccountingPeriod@1500020 : Record 13724;
      TDSNatureOfDeduction@1500021 : Record 13726;
      ConcessionalCode@1500022 : Code[10];
      ExportedFileName@1500023 : Text;
      OldWorkDate@1500024 : Date;
    BEGIN
      // Test to verify Concessional Code on Generate e-TDS Text file.

      // Setup: Create setup for Income Tax Accounting Period and Form 26 Q Report. Run Form 26 Q Report.
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      ConcessionalCode := CreateSetupAndRunFormReport(
        IncomeTaxAccountingPeriod,'',LibraryRandom.RandDec(1000,2),LibraryRandom.RandDec(1000,2),
        TDSNatureOfDeduction."TDS Group"::Contractor,TRUE,REPORT::"Form 26Q");

      // Exercise: Generate e-TDS.
      ExportedFileName := GenerateeTDSUsingPage(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",TRUE);

      // Verify: Verify Consessional Code on Exported file of e-TDS of Form 26Q.
      VerifyExportedFile(ExportedFileName,'L',2,80);

      // Tear Down.
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateCertificateNosRequestPageHandler,ConfirmHandler,MessageHandler,Form26QRequestPageHandler,GenerateeTDSRequestPageHandler)]
    PROCEDURE Form26QWithLessAndGreaterthanThreshouldAmount@1500402();
    VAR
      GeneralLedgerSetup@1500025 : Record 98;
      IncomeTaxAccountingPeriod@1500026 : Record 13724;
      NODNOCHeader@1500027 : Record 13786;
      TDSNatureOfDeduction@1500028 : Record 13726;
      TDSNatureOfDeduction2@1500029 : Record 13726;
      ConcessionalCode@1500030 : Code[10];
      PostedDocumentNo@1500031 : Code[20];
      ExportedFileName@1500032 : Text;
      NODNOCLines@1500249 : Record 13785;
      NODNOCLines2@1500250 : Record 13785;
      OldWorkDate@1500033 : Date;
    BEGIN
      // Test to verify Consessional Code on Exported file of e-TDS of Form 26Q when Purchase Documents Posted With Less and greaterthan Threhould Amount.

      // Setup: Create setup for Income Tax Accounting Period and Post Purchase orders with below and Threshould amounts.
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      ConcessionalCode := SetupTDSNatureWithNODNOC(
        NODNOCHeader,TDSNatureOfDeduction,TDSNatureOfDeduction2,'',
        TRUE,FALSE,LibraryRandom.RandInt(5),0,TDSNatureOfDeduction."TDS Group"::Contractor,NODNOCLines,NODNOCLines2);
      PostedDocumentNo := PostPurchaseDocWithAndWithoutTDSAmount(
        NODNOCHeader."No.",GetThresholdAmount(TDSNatureOfDeduction."TDS Group"::Contractor) + LibraryRandom.RandDec(10,2),
          GetThresholdAmount(TDSNatureOfDeduction."TDS Group"::Contractor) - LibraryRandom.RandDec(10,2),
          TDSNatureOfDeduction.Code,TDSNatureOfDeduction2.Code,NODNOCLines,NODNOCLines2);

      // Update Challan Details, GeneratecertificateNos and run Form 26 Q.
      UpdateChallanDetailsAfterTDSPayment(PostedDocumentNo,TDSNatureOfDeduction."TDS Group");
      RunGenerateCertificateNos(NODNOCHeader."No.",TDSNatureOfDeduction."TDS Group",IncomeTaxAccountingPeriod."Starting Date");
      EnqueueValuesInFormReqPageHandlers(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
      REPORT.RUN(REPORT::"Form 26Q");

      // Exercise: Generate e-TDS.
      ExportedFileName := GenerateeTDSUsingPage(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",TRUE);

      // Verify: Verify Consessional Code on Exported file of e-TDS of Form 26Q when Purchase Documents Posted With Less and greaterthan Threhould Amount.
      VerifyExportedFile(ExportedFileName,'Y',5,12);

      // Tear Down.
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,ConfirmHandler,MessageHandler,GenerateCertificateNosRequestPageHandler,Form26QRequestPageHandler)]
    PROCEDURE Form26QWithTDSAdjustmentJournal@1500403();
    VAR
      GeneralLedgerSetup@1500036 : Record 98;
      IncomeTaxAccountingPeriod@1500037 : Record 13724;
      NODNOCHeader@1500038 : Record 13786;
      NODNOCHeader2@1500039 : Record 13786;
      TaxJournalTemplate@1500040 : Record 16585;
      TDSNatureOfDeduction@1500041 : Record 13726;
      TDSNatureOfDeduction2@1500042 : Record 13726;
      ConcessionalCode@1500043 : Code[10];
      PostedDocumentNo@1500044 : Code[20];
      TaxJournalTemplateName@1500045 : Code[10];
      OldWorkDate@1500046 : Date;
      NODNOCLines@1500249 : Record 13785;
      NODNOCLines2@1500250 : Record 13785;
    BEGIN
      // Test to verify TDS Zero percent entry does not exist after TDS Adjustment Journal.

      // Setup: Create setup for Income Tax Accounting Period and Post Purchase orders with TDS Amount and Post TDS Adjustment Journal for one Purchase Invoice.
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      SetupTDSNatureWithNODNOC(
        NODNOCHeader,TDSNatureOfDeduction,TDSNatureOfDeduction2,'',TRUE,FALSE,
        LibraryRandom.RandInt(5),LibraryRandom.RandInt(5),TDSNatureOfDeduction."TDS Group"::Contractor,NODNOCLines,NODNOCLines2);
      CreateNODNOCSetup(NODNOCHeader2,CreateVendor(FALSE,'',FindCountryRegionCode),
        NODNOCHeader."Assesse Code",TDSNatureOfDeduction.Code,TDSNatureOfDeduction2.Code,TRUE,TDSNatureOfDeduction."TDS Group"::Contractor,NODNOCLines,NODNOCLines2,NODNOCLines."Nature of Remittance",NODNOCLines2."Nature of Remittance");
      CreateAndPostPurchaseDoc(NODNOCHeader."No.",LibraryRandom.RandDec(1000,2),TDSNatureOfDeduction.Code,NODNOCLines);
      TaxJournalTemplateName := CreateAndPostTDSAdjustmentJournal(NODNOCHeader."No.");
      PostedDocumentNo := CreateAndPostPurchaseDoc(
        NODNOCHeader2."No.",LibraryRandom.RandDec(1000,2),TDSNatureOfDeduction2.Code,NODNOCLines);
      UpdateChallanDetailsAfterTDSPayment(PostedDocumentNo,TDSNatureOfDeduction2."TDS Group");
      RunGenerateCertificateNos(NODNOCHeader2."No.",
        TDSNatureOfDeduction."TDS Group"::Contractor,IncomeTaxAccountingPeriod."Starting Date");
      EnqueueValuesInFormReqPageHandlers(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");

      // Exercise: Run Form 26Q Report.
      REPORT.RUN(REPORT::"Form 26Q");

      // Verify: Verify TDS Zero Percent Entry will not exist for TDS Adjusted Vendor.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Form_26Q_27Q_Entry__Deductee_Name_',NODNOCHeader."No.");
      Assert.IsFalse(LibraryReportDataset.GetNextRow,RowMustNotExistErr);

      // Tear Down.
      TaxJournalTemplate.GET(TaxJournalTemplateName);
      TaxJournalTemplate.DELETE(TRUE);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateCertificateNosRequestPageHandler,ConfirmHandler,MessageHandler,Form27QRequestPageHandler)]
    PROCEDURE Form27QWithLessAndGreaterthanThreshouldAmount@1500404();
    VAR
      PurchaseHeader@1500047 : Record 38;
      TDSNatureOfDeduction@1500048 : Record 13726;
      TDSNatureOfDeduction2@1500049 : Record 13726;
      NODNOCHeader@1500050 : Record 13786;
      IncomeTaxAccountingPeriod@1500051 : Record 13724;
      GeneralLedgerSetup@1500052 : Record 98;
      PostedDocumentNo@1500053 : Code[20];
      OldWorkDate@1500054 : Date;
      NODNOCLines@1500249 : Record 13785;
      NODNOCLines2@1500250 : Record 13785;
    BEGIN
      // Test to verify Consessional Code on Exported file of e-TDS of Form 27Q when Purchase Documents Posted With Less and greaterthan Threhould Amount.

      // Setup: Create setup for Income Tax Accounting Period and Post Purchase orders with below and Threshould amounts.
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      SetupTDSNatureWithNODNOC(
        NODNOCHeader,TDSNatureOfDeduction,TDSNatureOfDeduction2,CreateCurrencyWithExchangeRate,
        FALSE,FALSE,LibraryRandom.RandInt(5),0,TDSNatureOfDeduction."TDS Group"::"Payable to Non Residents",NODNOCLines,NODNOCLines2);
      PostedDocumentNo := PostPurchaseDocWithAndWithoutTDSAmount(NODNOCHeader."No.",
        GetThresholdAmount(TDSNatureOfDeduction."TDS Group"::"Payable to Non Residents") + LibraryRandom.RandDec(5,2),
          GetThresholdAmount(TDSNatureOfDeduction."TDS Group"::"Payable to Non Residents") - LibraryRandom.RandDec(5,2),
          TDSNatureOfDeduction.Code,TDSNatureOfDeduction2.Code,NODNOCLines,NODNOCLines2);
      UpdateChallanDetailsAfterTDSPayment(PostedDocumentNo,TDSNatureOfDeduction."TDS Group");
      RunGenerateCertificateNos(NODNOCHeader."No.",TDSNatureOfDeduction."TDS Group",IncomeTaxAccountingPeriod."Starting Date");
      EnqueueValuesInFormReqPageHandlers(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");

      // Exercise: Run Form 27Q Report.
      REPORT.RUN(REPORT::"Form 27Q");

      // Verify: Verify TDS Zero Percent Entry will not exist for lessthan Threshould Amount .
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('Form_26Q_27Q_Entry__Deductee_Name_',NODNOCHeader."No.");
      LibraryReportDataset.GetNextRow;
      ASSERTERROR LibraryReportDataset.AssertElementWithValueExists('ABS__Invoice_Amount__',0);

      // Tear Down.
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateCertificateNosRequestPageHandler,ConfirmHandler,MessageHandler,Form27QRequestPageHandler)]
    PROCEDURE Form27QWithConcessionalCode@1500405();
    VAR
      GeneralLedgerSetup@1500060 : Record 98;
      NODNOCHeader@1500061 : Record 13786;
      IncomeTaxAccountingPeriod@1500054 : Record 13724;
      TDSNatureOfDeduction@1500055 : Record 13726;
      ConcessionalCode@1500056 : Code[10];
      OldWorkDate@1500057 : Date;
    BEGIN
      // Test to verify Concessional Code on Form 27 Q Preview.

      // Setup: Create setup for Income Tax Accounting Period.
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);

      // Exercise: Run Form 27Q Report.
      ConcessionalCode := CreateSetupAndRunFormReport(
        IncomeTaxAccountingPeriod,CreateCurrencyWithExchangeRate,
        LibraryRandom.RandDec(1000,2),LibraryRandom.RandDec(1000,2),
        TDSNatureOfDeduction."TDS Group"::"Payable to Non Residents",FALSE,REPORT::"Form 27Q");

      // Verify: Verify Consessional Code on Form 27Q Preview.
      VerifyValuesOnForm27QPreview(ConcessionalCode,TDSNatureOfDeduction."TDS Group"::"Payable to Non Residents");

      // Tear Down.
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateCertificateNosRequestPageHandler,ConfirmHandler,MessageHandler,Form27QRequestPageHandler,GenerateeTDSRequestPageHandler)]
    PROCEDURE Form27QWithLessAndGreaterthanThreshouldAmounteTDS@1500407();
    VAR
      PurchaseHeader@1500047 : Record 38;
      TDSNatureOfDeduction@1500048 : Record 13726;
      TDSNatureOfDeduction2@1500049 : Record 13726;
      NODNOCHeader@1500050 : Record 13786;
      IncomeTaxAccountingPeriod@1500051 : Record 13724;
      GeneralLedgerSetup@1500052 : Record 98;
      PostedDocumentNo@1500053 : Code[20];
      OldWorkDate@1500054 : Date;
      NODNOCLines@1500249 : Record 13785;
      NODNOCLines2@1500250 : Record 13785;
      ExportedFileName@1500000 : Text;
    BEGIN
      // Test to verify Consessional Code on Exported file of e-TDS of Form 27Q when Purchase Documents Posted With Less and greaterthan Threhould Amount.

      // Setup: Create setup for Income Tax Accounting Period and Post Purchase orders with below and Threshould amounts.
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      SetupTDSNatureWithNODNOC(
        NODNOCHeader,TDSNatureOfDeduction,TDSNatureOfDeduction2,CreateCurrencyWithExchangeRate,
        FALSE,FALSE,LibraryRandom.RandInt(5),0,TDSNatureOfDeduction."TDS Group"::"Payable to Non Residents",NODNOCLines,NODNOCLines2);
      PostedDocumentNo := PostPurchaseDocWithAndWithoutTDSAmount(NODNOCHeader."No.",
        GetThresholdAmount(TDSNatureOfDeduction."TDS Group"::"Payable to Non Residents") + LibraryRandom.RandDec(5,2),
          GetThresholdAmount(TDSNatureOfDeduction."TDS Group"::"Payable to Non Residents") - LibraryRandom.RandDec(5,2),
          TDSNatureOfDeduction.Code,TDSNatureOfDeduction2.Code,NODNOCLines,NODNOCLines2);
      UpdateChallanDetailsAfterTDSPayment(PostedDocumentNo,TDSNatureOfDeduction."TDS Group");
      RunGenerateCertificateNos(NODNOCHeader."No.",TDSNatureOfDeduction."TDS Group",IncomeTaxAccountingPeriod."Starting Date");
      EnqueueValuesInFormReqPageHandlers(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");

      // Exercise: Run Form 27Q Report.
      REPORT.RUN(REPORT::"Form 27Q");

      // Exercise: Generate e-TDS.
      ExportedFileName := GenerateeTDSUsingPage(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",FALSE);

      // Verify: Verify Consessional Code on Exported file of e-TDS of Form 26Q when Purchase Documents Posted With Less and greaterthan Threhould Amount.
      VerifyExportedFile(ExportedFileName,'Y',5,12);

      // Tear Down.
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,Form26QRequestPageHandlerFieldValidation)]
    PROCEDURE Form26QFieldReportFrequencyValidation@1500059();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500001 : Date;
    BEGIN
      // [SCENARIO 163904] throws an error while running the 26 Q reports when Report Frequency is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;
      UpdateForm26QandeTDSFieldValues(1,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");

      // [WHEN] Run Report Form26Q
      ASSERTERROR REPORT.RUN(REPORT::"Form 26Q");

      // [THEN] Expected Error : Report Frequency is left blank
      Assert.ExpectedError(ReportFrequencyErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,Form26QRequestPageHandlerFieldValidation)]
    PROCEDURE Form26QFieldFinancialYearValidation@1500000();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      GeneralLedgerSetup@1500003 : Record 98;
      OldWorkDate@1500001 : Date;
    BEGIN
      // [SCENARIO 163904] throws an error while running the 26 Q reports when Financial Year is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;
      UpdateForm26QandeTDSFieldValues(2,'');

      // [WHEN] Run Report Form26Q
      ASSERTERROR REPORT.RUN(REPORT::"Form 26Q");

      // [THEN] Expected Error : Financial Year is left blank
      Assert.ExpectedError(FinancialYearErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,Form26QRequestPageHandlerFieldValidation)]
    PROCEDURE Form26QFieldFullNameValidation@1500070();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      GeneralLedgerSetup@1500003 : Record 98;
      OldWorkDate@1500001 : Date;
    BEGIN
      // [SCENARIO 163904] throws an error while running the 26 Q reports when Full Name is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;
      UpdateForm26QandeTDSFieldValues(3,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");

      // [WHEN] Run Report Form26Q
      ASSERTERROR REPORT.RUN(REPORT::"Form 26Q");

      // [THEN] Expected Error : Full Name is left blank
      Assert.ExpectedError(FullNameErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,Form26QRequestPageHandlerFieldValidation)]
    PROCEDURE Form26QFieldDesignationValidation@1500072();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      GeneralLedgerSetup@1500003 : Record 98;
      OldWorkDate@1500001 : Date;
    BEGIN
      // [SCENARIO 163904] throws an error while running the 26 Q reports when Designation is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;
      UpdateForm26QandeTDSFieldValues(4,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");

      // [WHEN] Run Report Form26Q
      ASSERTERROR REPORT.RUN(REPORT::"Form 26Q");

      // [THEN] Expected Error : Designation is left blank
      Assert.ExpectedError(DesignationErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,Form26QRequestPageHandlerFieldValidation)]
    PROCEDURE Form26QFieldPANValidation@1500071();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      GeneralLedgerSetup@1500003 : Record 98;
      OldWorkDate@1500001 : Date;
    BEGIN
      // [SCENARIO 163904] throws an error while running the 26 Q reports when PAN is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;
      UpdateForm26QandeTDSFieldValues(6,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");

      // [WHEN] Run Report Form26Q
      ASSERTERROR REPORT.RUN(REPORT::"Form 26Q");

      // [THEN] Expected Error : PAN is left blank
      Assert.ExpectedError(PANNoEmptyErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,Form26QRequestPageHandlerFieldValidation)]
    PROCEDURE Form26QFieldPrintingDateValidation@1500069();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      GeneralLedgerSetup@1500003 : Record 98;
      OldWorkDate@1500001 : Date;
    BEGIN
      // [SCENARIO 163904] throws an error while running the 26 Q reports when Prinitng Date is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;
      UpdateForm26QandeTDSFieldValues(5,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");

      // [WHEN] Run Report Form26Q
      ASSERTERROR REPORT.RUN(REPORT::"Form 26Q");

      // [THEN] Expected Error : Printing Date is left blank
      Assert.ExpectedError(PrintDateErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,Form27QRequestPageHandlerFieldValidation)]
    PROCEDURE Form27QFieldReportFrequencyValidation@1500012();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      GeneralLedgerSetup@1500003 : Record 98;
      OldWorkDate@1500001 : Date;
    BEGIN
      // [SCENARIO 163689] throws an error while running the 27 Q reports when Report Frequency is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;
      UpdateForm26QandeTDSFieldValues(1,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");

      // [WHEN] Run Report Form27Q
      ASSERTERROR REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Expected Error : Report Frequency is left blank
      Assert.ExpectedError(ReportFrequencyErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,Form27QRequestPageHandlerFieldValidation)]
    PROCEDURE Form27QFieldFinancialYearValidation@1500011();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      GeneralLedgerSetup@1500003 : Record 98;
      OldWorkDate@1500001 : Date;
    BEGIN
      // [SCENARIO 163689] throws an error while running the 27 Q reports when Financial Year is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;
      UpdateForm26QandeTDSFieldValues(2,'');

      // [WHEN] Run Report Form27Q
      ASSERTERROR REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Expected Error : Financial Year is left blank
      Assert.ExpectedError(FinancialYearErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,Form27QRequestPageHandlerFieldValidation)]
    PROCEDURE Form27QFieldFullNameValidation@1500009();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      GeneralLedgerSetup@1500003 : Record 98;
      OldWorkDate@1500001 : Date;
    BEGIN
      // [SCENARIO 163689] throws an error while running the 27 Q reports when Full Name is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;
      UpdateForm26QandeTDSFieldValues(3,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");

      // [WHEN] Run Report Form27Q
      ASSERTERROR REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Expected Error : Full Name is left blank
      Assert.ExpectedError(FullNameErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,Form27QRequestPageHandlerFieldValidation)]
    PROCEDURE Form27QFieldDesignationValidation@1500008();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      GeneralLedgerSetup@1500003 : Record 98;
      OldWorkDate@1500001 : Date;
    BEGIN
      // [SCENARIO 163689] throws an error while running the 27 Q reports when Designation is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;
      UpdateForm26QandeTDSFieldValues(4,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");

      // [WHEN] Run Report Form27Q
      ASSERTERROR REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Expected Error : Designation is left blank
      Assert.ExpectedError(DesignationErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,Form27QRequestPageHandlerFieldValidation)]
    PROCEDURE Form27QFieldPANValidation@1500005();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      GeneralLedgerSetup@1500003 : Record 98;
      OldWorkDate@1500001 : Date;
    BEGIN
      // [SCENARIO 163689] throws an error while running the 27 Q reports when PAN is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;
      UpdateForm26QandeTDSFieldValues(6,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");

      // [WHEN] Run Report Form27Q
      ASSERTERROR REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Expected Error : PAN is left blank
      Assert.ExpectedError(PANNoEmptyErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,Form27QRequestPageHandlerFieldValidation)]
    PROCEDURE Form27QFieldPrintingDateValidation@1500001();
    VAR
      IncomeTaxAccountingPeriod@1500000 : Record 13724;
      GeneralLedgerSetup@1500003 : Record 98;
      OldWorkDate@1500001 : Date;
    BEGIN
      // [SCENARIO 163689] throws an error while running the 27 Q reports when Prinitng Date is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;
      UpdateForm26QandeTDSFieldValues(5,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");

      // [WHEN] Run Report Form27Q
      ASSERTERROR REPORT.RUN(REPORT::"Form 27Q");

      // [THEN] Expected Error : Printing Date is left blank
      Assert.ExpectedError(PrintDateErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor26QFieldFileNameValidation@1500006();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163909] throws an error while Generate e-TDS when File Name is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,TRUE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",7);

      // [THEN] Expected Error : File Name is left blank
      Assert.ExpectedError(FileNameErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor26QFieldTANValidation@1500022();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163909] throws an error while Generate e-TDS when TAN is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,TRUE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",8);

      // [THEN] Expected Error : TAN is left blank
      Assert.ExpectedError(TANNoEmptyErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor26QFieldReportFrequencyValidation@1500004();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163909] throws an error while Generate e-TDS when Report Frequency is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,TRUE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",1);

      // [THEN] Expected Error : Report Frequency is left blank
      Assert.ExpectedError(ReportFrequencyErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor26QFieldFinancialYearValidation@1500015();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163909] throws an error while Generate e-TDS when Financial Year is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,TRUE,'',2);

      // [THEN] Expected Error : Financial Year is left blank
      Assert.ExpectedError(FinancialYearErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor26QFieldFullNameValidation@1500024();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163909] throws an error while Generate e-TDS when Full Name is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,TRUE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",3);

      // [THEN] Expected Error : Full Name is left blank
      Assert.ExpectedError(FullNameErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor26QFieldDesignationValidation@1500025();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163909] throws an error while Generate e-TDS when Designation is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,TRUE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",4);

      // [THEN] Expected Error : Desgination is left blank
      Assert.ExpectedError(DesignationErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor26QFieldPANValidation@1500033();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163909] throws an error while Generate e-TDS when PAN is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,TRUE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",6);

      // [THEN] Expected Error : PAN is left blank
      Assert.ExpectedError(PANNoEmptyErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor26QFieldPrintingDateValidation@1500034();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163909] throws an error while Generate e-TDS when Printing Date is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,TRUE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",5);

      // [THEN] Expected Error : Printing Date is left blank
      Assert.ExpectedError(PrintDateErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor26QFieldReturnPreparationValidation@1500035();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163909] throws an error while Generate e-TDS when Name of Return Preparation Utility is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,TRUE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",9);

      // [THEN] Expected Error : Name of Return Preparation Utility is left blank
      Assert.ExpectedError(NameofReturnUtilityErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor27QFieldFileNameValidation@1500032();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163910] throws an error while Generate e-TDS when File Name is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,FALSE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",7);

      // [THEN] Expected Error : File Name is left blank
      Assert.ExpectedError(FileNameErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor27QFieldTANValidation@1500029();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163910] throws an error while Generate e-TDS when TAN is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,FALSE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",8);

      // [THEN] Expected Error : TAN is left blank
      Assert.ExpectedError(TANNoEmptyErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor27QFieldReportFrequencyValidation@1500028();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163910] throws an error while Generate e-TDS when Report Frequency is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,FALSE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",1);

      // [THEN] Expected Error : Report Frequency is left blank
      Assert.ExpectedError(ReportFrequencyErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor27QFieldFinancialYearValidation@1500027();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163910] throws an error while Generate e-TDS when Financial Year is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,FALSE,'',2);

      // [THEN] Expected Error : Financial Year is left blank
      Assert.ExpectedError(FinancialYearErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor27QFieldFullNameValidation@1500023();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163910] throws an error while Generate e-TDS when Full Name is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,FALSE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",3);

      // [THEN] Expected Error : Full Name is left blank
      Assert.ExpectedError(FullNameErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor27QFieldDesignationValidation@1500021();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163910] throws an error while Generate e-TDS when Designation is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,FALSE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",4);

      // [THEN] Expected Error : Desgination is left blank
      Assert.ExpectedError(DesignationErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor27QFieldPANValidation@1500020();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163910] throws an error while Generate e-TDS when PAN is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,FALSE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",6);

      // [THEN] Expected Error : PAN is left blank
      Assert.ExpectedError(PANNoEmptyErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor27QFieldPrintingDateValidation@1500019();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163910] throws an error while Generate e-TDS when Printing Date is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,FALSE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",5);

      // [THEN] Expected Error : Printing Date is left blank
      Assert.ExpectedError(PrintDateErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    [Test]
    [HandlerFunctions(CreateTDSTCSFiscalYearRequestPageHandler,GenerateeTDSRequestPageHandlerFieldValidation)]
    PROCEDURE GenerateTDSfor27QFieldReturnPreparationValidation@1500018();
    VAR
      IncomeTaxAccountingPeriod@1500003 : Record 13724;
      GeneralLedgerSetup@1500002 : Record 98;
      OldWorkDate@1500000 : Date;
    BEGIN
      // [SCENARIO 163910] throws an error while Generate e-TDS when Name of Return Preparation Utility is left blank.
      // [FEATURE] [GENERATE e-TDS]

      // [GIVEN] Created Income Tax Accounting Period
      Initialize;
      GeneralLedgerSetup.GET;
      OldWorkDate := CreateSetupForIncomeTaxAccountingPeriod(IncomeTaxAccountingPeriod);
      COMMIT;

      // [WHEN] Run Report Generate e-TDS form
      GenerateeTDSUsingPagefor26Q(eTDSFileName,FALSE,IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS",9);

      // [THEN] Expected Error : Name of Return Preparation Utility is left blank
      Assert.ExpectedError(NameofReturnUtilityErr);
      RollbackChangesMadeToDataBase(IncomeTaxAccountingPeriod,GeneralLedgerSetup."TDS Nil Challan Nos.",OldWorkDate);
    END;

    LOCAL PROCEDURE Initialize@1500406();
    BEGIN
      LibraryRandom.SetSeed(1);
      LibraryVariableStorage.Clear;
      CLEAR(LibraryTextFileValidation);
    END;

    LOCAL PROCEDURE CreateAndPostTDSAdjustmentJournal@1500408(PartyCode@1500302 : Code[20]) : Code[10];
    VAR
      TaxJournalTemplate@1500303 : Record 16585;
      TaxJournalBatch@1500304 : Record 16586;
      TDSEntry@1500305 : Record 13729;
      TDSAdjustmentJournal@1500306 : TestPage 13791;
    BEGIN
      CreateTaxJournalTemplate(TaxJournalTemplate);
      CreateTaxJournalBatch(TaxJournalBatch,TaxJournalTemplate.Name);
      TDSEntry.SETRANGE("Party Code",PartyCode);
      TDSEntry.FINDFIRST;
      COMMIT;
      WITH TDSAdjustmentJournal DO BEGIN
        OPENEDIT;
        CurrentJnlBatchName.SETVALUE(TaxJournalBatch.Name);
        "Transaction No".SETVALUE(TDSEntry."Entry No.");
        "TDS/TCS Base Amount Applied".SETVALUE(0);
        "TDS/TCS % Applied".SETVALUE(0);
        "eCESS % Applied".SETVALUE(0);
        "SHE Cess % Applied".SETVALUE(0);
        Post.INVOKE;
      END;
      EXIT(TaxJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateCurrencyWithExchangeRate@1500708() : Code[10];
    VAR
      Currency@1500703 : Record 4;
      CurrencyExchangeRate@1500704 : Record 330;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateExchRate(CurrencyExchangeRate,Currency.Code,WORKDATE);
      WITH CurrencyExchangeRate DO BEGIN
        VALIDATE("Exchange Rate Amount",LibraryRandom.RandDec(10,2));
        VALIDATE("Relational Exch. Rate Amount","Exchange Rate Amount" * LibraryRandom.RandDec(10,2));
        MODIFY(TRUE);
      END;
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateSetupAndRunFormReport@1500409(VAR IncomeTaxAccountingPeriod@1500289 : Record 13724;CurrencyCode@1500290 : Code[10];Amount@1500291 : Decimal;Amount2@1500292 : Decimal;TDSNatureOfDeductionTDSGroup@1500293 : Option;Transporter@1500294 : Boolean;ReportID@1500297 : Integer) ConcessionalCode : Code[10];
    VAR
      NODNOCHeader@1500298 : Record 13786;
      TDSNatureOfDeduction@1500299 : Record 13726;
      TDSNatureOfDeduction2@1500300 : Record 13726;
      PostedDocumentNo@1500301 : Code[20];
      NODNOCLines@1500249 : Record 13785;
      NODNOCLines2@1500250 : Record 13785;
    BEGIN
      ConcessionalCode := SetupTDSNatureWithNODNOC(
        NODNOCHeader,TDSNatureOfDeduction,TDSNatureOfDeduction2,CurrencyCode,
        TRUE,Transporter,LibraryRandom.RandInt(5),0,TDSNatureOfDeductionTDSGroup,NODNOCLines,NODNOCLines2);
      PostedDocumentNo := PostPurchaseDocWithAndWithoutTDSAmount(
        NODNOCHeader."No.",Amount,Amount2,TDSNatureOfDeduction.Code,TDSNatureOfDeduction2.Code,NODNOCLines,NODNOCLines2);
      UpdateChallanDetailsAfterTDSPayment(PostedDocumentNo,TDSNatureOfDeduction."TDS Group");
      RunGenerateCertificateNos(NODNOCHeader."No.",TDSNatureOfDeduction."TDS Group",IncomeTaxAccountingPeriod."Starting Date");
      EnqueueValuesInFormReqPageHandlers(IncomeTaxAccountingPeriod."Financial Year for eTDS/TCS");
      PANNo := LibraryUtility.GenerateRandomCode(Vendor.FIELDNO("P.A.N. No."),DATABASE::Vendor);
      LibraryTDS.Form26QForm27QReportFieldsValidation;
      REPORT.RUN(ReportID);
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDoc@1500410(VendorNo@1500275 : Code[20];DirectUnitCost@1500457 : Decimal;TDSNatureOfDeduction@1500879 : Code[10];NODNOCLine@1500249 : Record 13785) PostedDocumentNo : Code[20];
    VAR
      PurchaseHeader@1500287 : Record 38;
      PurchaseLine@1500288 : Record 39;
      NoSeriesManagement@1500289 : Codeunit 396;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);
      PurchaseHeader.VALIDATE("Vendor Invoice No.",PurchaseHeader."No.");
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",FindGLAccountNo,LibraryRandom.RandDec(10,2));
      WITH PurchaseLine DO BEGIN
        VALIDATE("Direct Unit Cost",DirectUnitCost);
        VALIDATE("TDS Nature of Deduction",TDSNatureOfDeduction);
        VALIDATE("Nature of Remittance",NODNOCLine."Nature of Remittance");
        VALIDATE("Act Applicable",NODNOCLine."Act Applicable");
        MODIFY(TRUE);
      END;
      PostedDocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@1500411(VAR GenJournalLine@1500257 : Record 81;GLAccountNo@1500258 : Code[20];Amount@1500259 : Decimal;AccountType@1500000 : Option;LocationCode@1500001 : Code[10]);
    VAR
      GenJournalBatch@1500278 : Record 232;
      GenJournalTemplate@1500002 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
          GenJournalTemplate.SETRANGE("Sub Type",GenJournalTemplate."Sub Type"::"Bank Payment Voucher");
      GenJournalTemplate.FINDFIRST;
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalBatch.VALIDATE("Location Code",LocationCode);
      GenJournalBatch.MODIFY(TRUE);
      WITH GenJournalLine DO BEGIN
        LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,
        "Document Type"::Payment,AccountType,GLAccountNo,Amount);
        VALIDATE("Document No.",LibraryUtility.GenerateRandomCode(FIELDNO("Document No."),DATABASE::"Gen. Journal Line"));
        VALIDATE("Bal. Account Type", "Bal. Account Type"::"Bank Account");
        VALIDATE("Bal. Account No.",FindBankAccount);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateIncomeTaxAccPeriod@1500412(VAR IncomeTaxAccountingPeriod@1500253 : Record 13724) PreviousIncomeTaxPeriodStartingDate : Date;
    VAR
      CreateTDSTCSFiscalYear@1500000 : Report 13717;
      IncomeTaxPeriodSetup@1500256 : Record 16501;
    BEGIN
      COMMIT;
      REPORT.RUN(REPORT::"Create TDS/TCS Fiscal Year");
      IncomeTaxAccountingPeriod.FINDLAST;
      CreateIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."No.",WORKDATE);
    END;

    LOCAL PROCEDURE CreateIncomeTaxPeriodSetup@1500413(IncomeTaxAccountingPeriodNo@1500249 : Integer;StartingDate@1500250 : Date);
    VAR
      IncomeTaxPeriodSetup@1500251 : Record 16501;
    BEGIN
      WITH IncomeTaxPeriodSetup DO BEGIN
        LibraryTDS.CreateIncomeTaxPeriod(IncomeTaxPeriodSetup,IncomeTaxAccountingPeriodNo,Quarter::Q1);
        "Starting Date" := StartingDate;
        VALIDATE("Ending Date",
          CALCDATE(STRSUBSTNO('<%1M>',LibraryRandom.RandIntInRange(3,4)),StartingDate));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateNODNOCSetup@1500414(VAR NODNOCHeader@1500241 : Record 13786;No@1500242 : Code[20];AssesseeCode@1500245 : Code[10];TDSNatureOfDeductionCode@1500246 : Code[10];TDSNatureOfDeductionCode2@1500247 : Code[10];ThresholdOverlook@1500248 : Boolean;TDSNatureOfDeductionGroup@1500179 : Option;VAR NODNOCLines@1500249 : Record 13785;VAR NODNOCLines2@1500250 : Record 13785;NatureOfRemittanceCode@1500006 : Code[10];NatureOfRemittanceCode2@1500001 : Code[10]) ConcessionalCode : Code[10];
    VAR
      ActApplicable@1500252 : Option;
      TDSNatureOfDeduction@1500253 : Record 13726;
      TDSSetup@1500002 : Record 13728;
    BEGIN
      IF TDSNatureOfDeductionGroup = TDSNatureOfDeduction."TDS Group"::"Payable to Non Residents" THEN
        ActApplicable := TDSSetup."Act Applicable"::IT;
      LibraryTDS.CreateNODNOCHeader(NODNOCHeader,NODNOCHeader.Type::Vendor,No,AssesseeCode);
      LibraryTDS.CreateNODNOCLines(NODNOCLines,NODNOCHeader,TDSNatureOfDeductionCode,TRUE,NatureOfRemittanceCode,ActApplicable);
      LibraryTDS.CreateNODNOCLines(NODNOCLines2,NODNOCHeader,TDSNatureOfDeductionCode2,TRUE,NatureOfRemittanceCode2,ActApplicable);
      UpdateNODNOCLines(NODNOCLines,NODNOCHeader.Type::Vendor,ThresholdOverlook,NatureOfRemittanceCode);
      ConcessionalCode := UpdateNODNOCLines(NODNOCLines2,NODNOCHeader.Type::Vendor,ThresholdOverlook,NatureOfRemittanceCode2);
    END;

    LOCAL PROCEDURE CreateTDSNatureDeductionAndTDS@1500415(VAR TDSNatureDeduction@1500236 : Record 13726;TDSGroup@1500237 : Option;AssesseeCode@1500238 : Code[10];TDSPercentage@1500239 : Integer;VAR NatureOfRemittanceCode@1500006 : Code[10];TDSNatureOfDeductionGroup@1500179 : Option);
    VAR
      TDSSetup@1500240 : Record 13728;
    BEGIN
      TDSNatureDeduction.GET(LibraryTDS.CreateTDSNatureDeduction(TDSGroup));
      CreateTDSSetup(TDSSetup,TDSNatureDeduction.Code,AssesseeCode,WORKDATE,TDSPercentage,NatureOfRemittanceCode,TDSNatureOfDeductionGroup);
    END;

    LOCAL PROCEDURE CreateTDSSetup@1500416(VAR TDSSetup@1500229 : Record 13728;TDSNatureDeductionCode@1500230 : Code[10];AssesseeCode@1500234 : Code[10];EffectiveDate@1500231 : Date;TDSPercentage@1500232 : Decimal;VAR NatureOfRemittanceCode@1500006 : Code[10];TDSNatureOfDeductionGroup@1500179 : Option);
    VAR
      NatureOfRemittance@1500251 : Record 13783;
      CountryRegionCode@1500007 : Code[10];
      ActApplicable@1500004 : Option;
      TDSNatureOfDeduction@1500253 : Record 13726;
    BEGIN
      IF TDSNatureOfDeductionGroup = TDSNatureOfDeduction."TDS Group"::"Payable to Non Residents" THEN BEGIN
        LibraryTDS.CreateNatureOfRemittance(NatureOfRemittance);
        NatureOfRemittanceCode := NatureOfRemittance.Code;
        ActApplicable := TDSSetup."Act Applicable"::IT;
        CountryRegionCode := FindCountryRegionCode;
      END;
      WITH TDSSetup DO BEGIN
        LibraryTDS.CreateTDSSetup(TDSSetup,TDSNatureDeductionCode,AssesseeCode,EffectiveDate,'A',NatureOfRemittanceCode,ActApplicable,CountryRegionCode);
        VALIDATE("TDS %",TDSPercentage);
        VALIDATE("Non PAN TDS %",TDSPercentage);
        VALIDATE("Surcharge %",LibraryRandom.RandInt(5));
        VALIDATE("eCESS %",LibraryRandom.RandInt(5));
        VALIDATE("SHE Cess %",LibraryRandom.RandInt(5));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateVendor@1500417(Transporter@1500000 : Boolean;CurrencyCode@1500225 : Code[10];CountryCode@1500001 : Code[10]) : Code[20];
    VAR
      GeneralPostingSetup@1500226 : Record 252;
      Vendor@1500227 : Record 23;
    BEGIN
      GeneralPostingSetup.SETFILTER("Purch. Account",'<>''''');
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      WITH Vendor DO BEGIN
        LibraryPurchase.CreateVendor(Vendor);
        VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
        VALIDATE("P.A.N. No.",'ACFPH4256B'); // Valid P.A.N. No.
        VALIDATE(Transporter,Transporter);
        VALIDATE("Currency Code",CurrencyCode);
        VALIDATE("Country/Region Code",CountryCode);
        MODIFY(TRUE);
        EXIT("No.");
      END;
    END;

    LOCAL PROCEDURE CreateNoseries@1500418() : Code[10];
    VAR
      NoSeries@1501000 : Record 308;
      NoSeriesLine@1501001 : Record 309;
    BEGIN
      LibraryUtility.CreateNoSeries(NoSeries,TRUE,TRUE,FALSE);
      LibraryUtility.CreateNoSeriesLine(NoSeriesLine,NoSeries.Code,'00001','99999');  // Required 5 Digits for Starting No.and Ending No.'s.
      EXIT(NoSeries.Code);
    END;

    LOCAL PROCEDURE CreateSetupForIncomeTaxAccountingPeriod@1500419(VAR IncomeTaxAccountingPeriod@1500224 : Record 13724) OldWorkDate : Date;
    BEGIN
      UpdateGeneralLedgerSetup(CreateNoseries);
      OldWorkDate := WORKDATE;
      CreateIncomeTaxAccPeriod(IncomeTaxAccountingPeriod);
      WORKDATE := IncomeTaxAccountingPeriod."Starting Date";
      SetupDeductoryCode;
    END;

    LOCAL PROCEDURE CreateTaxJournalTemplate@1500420(VAR TaxJournalTemplate@1500222 : Record 16585);
    BEGIN
      WITH TaxJournalTemplate DO BEGIN
        INIT;
        VALIDATE(
          Name,COPYSTR(
            LibraryUtility.GenerateRandomCode(FIELDNO(Name),DATABASE::"Tax Journal Template"),1,
            LibraryUtility.GetFieldLength(DATABASE::"Tax Journal Template",FIELDNO(Name))));
        VALIDATE(Description,TaxJournalTemplate.Name);
        INSERT(TRUE);
        VALIDATE(Type,TaxJournalTemplate.Type::"TDS Adjustments");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateTaxJournalBatch@1500421(VAR TaxJournalBatch@1500220 : Record 16586;JournalTemplateName@1500221 : Code[10]);
    BEGIN
      WITH TaxJournalBatch DO BEGIN
        INIT;
        VALIDATE("Journal Template Name",JournalTemplateName);
        VALIDATE(
          Name,COPYSTR(
            LibraryUtility.GenerateRandomCode(TaxJournalBatch.FIELDNO(Name),DATABASE::"Tax Journal Batch"),1,
            LibraryUtility.GetFieldLength(DATABASE::"Tax Journal Batch",TaxJournalBatch.FIELDNO(Name))));
        VALIDATE(Description,TaxJournalBatch.Name);
        INSERT(TRUE);
        VALIDATE("No. Series",CreateNoseries);
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE EnqueueValuesinGenerateCertNosReqPageHandler@1500422(VendorNo@1500215 : Code[20];TDSGroupCode@1500216 : Option;StartingDate@1500217 : Date);
    VAR
      IncomeTaxPeriodSetup@1500219 : Record 16501;
    BEGIN
      WITH IncomeTaxPeriodSetup DO BEGIN
        SETRANGE("Starting Date",StartingDate);
        FINDFIRST;
        LibraryVariableStorage.Enqueue(VendorNo);
        LibraryVariableStorage.Enqueue(TDSGroupCode);
        LibraryVariableStorage.Enqueue("Starting Date");
        LibraryVariableStorage.Enqueue("Ending Date");
      END;
    END;

    LOCAL PROCEDURE FindBankAccount@1500423() : Code[20];
    VAR
      BankAccount@1500214 : Record 270;
    BEGIN
      BankAccount.SETFILTER("Currency Code",'');
      LibraryERM.FindBankAccount(BankAccount);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE FindGLAccountNo@1500424() : Code[20];
    VAR
      GLAccount@1500212 : Record 15;
      GeneralPostingSetup@1500213 : Record 252;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryERM.FindGLAccount(GLAccount);
      GLAccount.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      GLAccount.MODIFY(TRUE);
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE FindCountryRegionCode@1500030() : Code[10];
    VAR
      CountryRegion@1500000 : Record 9;
    BEGIN
      CountryRegion.FINDFIRST;
      EXIT(CountryRegion.Code);
    END;

    LOCAL PROCEDURE GetFormNo@1500031(Resident@1500000 : Boolean) : Integer;
    VAR
      BatchHeader@1500001 : Record 16503;
    BEGIN
      IF Resident THEN
        EXIT(BatchHeader."Form No."::"26Q");
      EXIT(BatchHeader."Form No."::"27Q");
    END;

    LOCAL PROCEDURE GetTDSPayableAccount@1500425(TDSGroupCode@1500000 : Option) : Code[20];
    VAR
      TDSGroup@1500001 : Record 13731;
    BEGIN
      TDSGroup.SETRANGE("TDS Group",TDSGroupCode);
      TDSGroup.FINDFIRST;
      EXIT(TDSGroup."TDS Account");
    END;

    LOCAL PROCEDURE GenerateeTDSUsingPage@1500426(FinancialYearForeTDSTCS@1500200 : Code[6];Resident@1500000 : Boolean) FileName : Text;
    VAR
      CompanyInformation@1500206 : Record 79;
      GenerateeTDS@1500201 : TestPage 16507;
      FileManagement@1500202 : Codeunit 419;
    BEGIN
      CompanyInformation.GET;
      LibraryVariableStorage.Enqueue(CompanyInformation."T.A.N. No.");
      LibraryVariableStorage.Enqueue(FinancialYearForeTDSTCS);
      FileName := FileManagement.ServerTempFileName('.txt');
      LibraryVariableStorage.Enqueue(FileName);
      GenerateeTDS.OPENEDIT;
      GenerateeTDS.FormNo.SETVALUE(GetFormNo(Resident));
      GenerateeTDS.eTDS.INVOKE;
    END;

    LOCAL PROCEDURE GenerateeTDSUsingPagefor26Q@1500007(VAR FileName@1500001 : Text;Resident@1500000 : Boolean;FinancialYearValue@1500002 : Code[6];FieldNumber@1500003 : Integer);
    VAR
      FileManagement@1500004 : Codeunit 419;
      GenerateeTDS@1500201 : TestPage 16507;
    BEGIN
      FileName := FileManagement.ServerTempFileName('.txt');
      UpdateForm26QandeTDSFieldValues(FieldNumber,FinancialYearValue);
      GenerateeTDS.OPENEDIT;
      GenerateeTDS.FormNo.SETVALUE(GetFormNo(Resident));
      ASSERTERROR GenerateeTDS.eTDS.INVOKE;
    END;

    LOCAL PROCEDURE GetThresholdAmount@1500427(TDSGroupCode@1500198 : Option) : Decimal;
    VAR
      TDSGroup@1500199 : Record 13731;
    BEGIN
      WITH TDSGroup DO BEGIN
        SETRANGE("TDS Group",TDSGroupCode);
        FINDFIRST;
        VALIDATE("TDS Threshold Amount",LibraryRandom.RandDecInRange(1000,1500,2));
        MODIFY(TRUE);
        EXIT("TDS Threshold Amount");
      END;
    END;

    LOCAL PROCEDURE PayTDS@1500003(PostedDocumentNo@1500000 : Code[20];PostedDocumentType@1500001 : Option;TDSNatureOfDeduction@1500002 : Option);
    VAR
      GenJournalLine@1500005 : Record 81;
      CompanyInformation@1500189 : Record 79;
    BEGIN
      WITH GenJournalLine DO BEGIN
        CreateGeneralJournalLine(
          GenJournalLine,GetTDSPayableAccount(TDSNatureOfDeduction),0,"Account Type"::"G/L Account",'');
        CompanyInformation.GET;
        VALIDATE("T.A.N. No.",CompanyInformation."T.A.N. No.");
        VALIDATE("Pay TDS",TRUE);
        MODIFY(TRUE);
        PostBankPaymentVoucherAfterPayTDS("Journal Batch Name");
      END;
    END;

    LOCAL PROCEDURE PostBankPaymentVoucherAfterPayTDS@1500428(JournalBatchName@1500307 : Code[10]);
    VAR
      BankPaymentVoucher@1500308 : TestPage 16577;
      PayTDS@1500309 : TestPage 13788;
    BEGIN
      COMMIT;
      BankPaymentVoucher.OPENEDIT;
      BankPaymentVoucher.CurrentJnlBatchName.SETVALUE(JournalBatchName);
      PayTDS.TRAP;
      BankPaymentVoucher.TDS.INVOKE;
      PayTDS.Pay.INVOKE;
      BankPaymentVoucher.Post.INVOKE;
    END;

    LOCAL PROCEDURE PostPurchaseDocWithAndWithoutTDSAmount@1500429(NODNOCHeaderNo@1500182 : Code[20];Amount@1500183 : Decimal;Amount2@1500184 : Decimal;TDSNatureOfDeductionCode@1500185 : Code[10];TDSNatureOfDeduction2Code@1500186 : Code[10];NODNOCLine@1500249 : Record 13785;NODNOCLine2@1500000 : Record 13785) PostedDocumentNo : Code[20];
    BEGIN
      PostedDocumentNo := CreateAndPostPurchaseDoc(NODNOCHeaderNo,Amount,TDSNatureOfDeductionCode,NODNOCLine);
      CreateAndPostPurchaseDoc(NODNOCHeaderNo,Amount2,TDSNatureOfDeduction2Code,NODNOCLine2);
    END;

    LOCAL PROCEDURE SetupDeductoryCode@1500430();
    VAR
      DeductorCategory@1000 : Record 16498;
      CompanyInformation@1001 : Record 79;
    BEGIN
      WITH CompanyInformation DO BEGIN
        GET;
        IF DeductorCategory.FINDFIRST THEN
          VALIDATE("Deductor Category",DeductorCategory.Code)
        ELSE BEGIN
          LibraryTDS.CreateDeductorCategory(DeductorCategory);
          VALIDATE("Deductor Category",DeductorCategory.Code);
        END;
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE SetupTDSNatureWithNODNOC@1500431(VAR NODNOCHeader@1500170 : Record 13786;VAR TDSNatureOfDeduction@1500171 : Record 13726;VAR TDSNatureOfDeduction2@1500173 : Record 13726;Currencycode@1500175 : Code[10];ThreshouldAmount@1500176 : Boolean;Transporter@1500177 : Boolean;TDSPercentage@1500180 : Integer;TDSPercentage2@1500178 : Integer;TDSNatureOfDeductionCode@1500179 : Option;VAR NODNOCLines@1500249 : Record 13785;VAR NODNOCLines2@1500250 : Record 13785) ConcessionalCode : Code[10];
    VAR
      NatureOfRemittanceCode@1500006 : Code[10];
      NatureOfRemittanceCode2@1500007 : Code[10];
      AssesseeCode@1500181 : Code[10];
    BEGIN
      AssesseeCode := LibraryTDS.CreateAssesseeCode;
      CreateTDSNatureDeductionAndTDS(TDSNatureOfDeduction,TDSNatureOfDeductionCode,AssesseeCode,TDSPercentage,NatureOfRemittanceCode,TDSNatureOfDeductionCode);
      CreateTDSNatureDeductionAndTDS(TDSNatureOfDeduction2,TDSNatureOfDeductionCode,AssesseeCode,TDSPercentage2,NatureOfRemittanceCode2,TDSNatureOfDeductionCode);
      ConcessionalCode := CreateNODNOCSetup(
        NODNOCHeader,CreateVendor(Transporter,Currencycode,FindCountryRegionCode),AssesseeCode,
        TDSNatureOfDeduction.Code,TDSNatureOfDeduction2.Code,ThreshouldAmount,TDSNatureOfDeductionCode,NODNOCLines,NODNOCLines2,NatureOfRemittanceCode,NatureOfRemittanceCode2);
    END;

    LOCAL PROCEDURE UpdateChallanDetails@1500432(DocumentNo@1500001 : Code[20];DocumentType@1500000 : Option);
    VAR
      TDSEntry@1500002 : Record 13729;
      UpdateChallanDetails@1500003 : Report 13721;
    BEGIN
      TDSEntry.SETFILTER("Document No.",DocumentNo);
      TDSEntry.FINDLAST;
      UpdateChallanDetails.InitializeRequest(TDSEntry."Pay TDS Document No.",FORMAT(LibraryRandom.RandInt(1000)),WORKDATE,
        LibraryUtility.GenerateGUID,COPYSTR(LibraryUtility.GenerateGUID,1,7),LibraryUtility.GenerateGUID,WORKDATE,1);
      UpdateChallanDetails.USEREQUESTPAGE(FALSE);
      UpdateChallanDetails.RUN;
    END;

    LOCAL PROCEDURE UpdateNODNOCLines@1500433(VAR NODNOCLines@1500167 : Record 13785;Type@1500168 : Option;ThresholdOverlook@1500169 : Boolean;NatureOfRemittanceCode@1500170 : Code[10]) : Code[10];
    BEGIN
      WITH NODNOCLines DO BEGIN
        SETRANGE("No.","No.");
        SETRANGE(Type,Type);
        SETRANGE("Nature of Remittance",NatureOfRemittanceCode);
        FINDFIRST;
        VALIDATE("Concessional Code",'A');
        MODIFYALL("Concessional Code",'A');
        MODIFYALL("Threshold Overlook",ThresholdOverlook);
        EXIT("Concessional Code");
      END;
    END;

    LOCAL PROCEDURE UpdateGeneralLedgerSetup@1500434(TDSNilChallanNos@1500165 : Code[10]);
    VAR
      GeneralLedgerSetup@1500166 : Record 98;
    BEGIN
      WITH GeneralLedgerSetup DO BEGIN
        GET;
        VALIDATE("TDS Nil Challan Nos.",TDSNilChallanNos);
        VALIDATE("Nil Pay TDS Document Nos.","TDS Nil Challan Nos.");
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE UpdateForm26QandeTDSFieldValues@1500010(FieldNumber@1500000 : Integer;FinancialYearValue@1500001 : Code[6]);
    VAR
      CompanyInformation@1500002 : Record 79;
    BEGIN
      CompanyInformation.GET;
      ReportFrequency := ReportFrequency::Q1;
      FinancialYear := FinancialYearValue;
      FullName := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(20,0),1,20);
      Designation := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10);
      PrintingDate := WORKDATE;
      NameOfReturnPreparationUtility := COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,3);
      TANNo := CompanyInformation."T.A.N. No.";
      CASE FieldNumber OF
        1:
          ReportFrequency := ReportFrequency::" ";
        2:
          FinancialYear := '';
        3:
          FullName := '';
        4:
          Designation := '';
        5:
          PrintingDate := 0D;
        6:
          PANNo := '';
        7:
          eTDSFileName := '';
        8:
          TANNo := '';
        9:
          NameOfReturnPreparationUtility := '';
      END;
    END;

    LOCAL PROCEDURE UpdateChallanDetailsAfterTDSPayment@1500435(PostedDocumentNo@1500160 : Code[20];TDSNatureOfDeduction@1500161 : Option);
    VAR
      PurchaseHeader@1500162 : Record 38;
    BEGIN
      PayTDS(PostedDocumentNo,PurchaseHeader."Document Type"::Invoice,TDSNatureOfDeduction);
      UpdateChallanDetails(PostedDocumentNo,PurchaseHeader."Document Type"::Invoice);
    END;

    LOCAL PROCEDURE VerifyValuesOnForm26QPreview@1500436(ConsessionalCode@1500156 : Code[10];TDSGroupCode@1500157 : Option);
    VAR
      TDSGroup@1500158 : Record 13731;
    BEGIN
      TDSGroup.SETRANGE("TDS Group",TDSGroupCode);
      TDSGroup.FINDFIRST;
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Challan_Register___TDS_Interest_Amount_',0);
      //LibraryReportDataset.AssertElementWithValueExists('Challan_Register__TDS_Section_',FORMAT(TDSGroup."TDS Section"));
      LibraryReportDataset.AssertElementWithValueExists('Challan_Register__TDS_Others_',0);
      LibraryReportDataset.AssertElementWithValueExists('Form_26Q_27Q_Entry__Concessional_Code_',ConsessionalCode);
    END;

    LOCAL PROCEDURE VerifyValuesOnForm27QPreview@1500437(ConsessionalCode@1500153 : Code[10];TDSGroupCode@1500154 : Option);
    VAR
      TDSGroup@1500155 : Record 13731;
    BEGIN
      TDSGroup.SETRANGE("TDS Group",TDSGroupCode);
      TDSGroup.FINDFIRST;
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Form_26Q_27Q_Entry__TDS_Amount_',0);
      LibraryReportDataset.AssertElementWithValueExists('Form_26Q_27Q_Entry__TDS_Section_',FORMAT(TDSGroup."TDS Section"));
      LibraryReportDataset.AssertElementWithValueExists('Challan_Register___TDS_Interest_Amount_',0);
      LibraryReportDataset.AssertElementWithValueExists('Form_26Q_27Q_Entry__Concessional_Code_',ConsessionalCode);
    END;

    LOCAL PROCEDURE VerifyExportedFile@1500438(FileName@1500140 : Text;ConcessionalCode@1500141 : Code[10];LineNo@1500142 : Integer;StartingPosition@1500147 : Integer);
    VAR
      ActualValue@1500148 : Text;
    BEGIN
      ActualValue := LibraryTextFileValidation.ReadValueFromLine(FileName,LineNo,StartingPosition,1);
      Assert.AreEqual(ConcessionalCode,ActualValue,ValueNotFoundErr);
    END;

    LOCAL PROCEDURE RollbackIncomeTaxPeriodSetup@1500439(StartingDate@1500150 : Date);
    VAR
      IncomeTaxPeriodSetup@1500151 : Record 16501;
    BEGIN
      IncomeTaxPeriodSetup.SETRANGE("Starting Date",StartingDate);
      IncomeTaxPeriodSetup.FINDFIRST;
      IncomeTaxPeriodSetup.DELETE(TRUE);
    END;

    LOCAL PROCEDURE RollbackChangesMadeToDataBase@1500440(IncomeTaxAccountingPeriod@1500133 : Record 13724;TDSNilChallanNos@1500134 : Code[10];OldWorkDate@1500135 : Date);
    VAR
      TaxJournalBatch@1500136 : Record 16586;
      TaxJournalTemplate@1500137 : Record 16585;
      ChallanRegister@1500000 : Record 16504;
      BatchHeader@1500001 : Record 16503;
      TDSEntry@1500002 : Record 13729;
      Form2627Entry@1500003 : Record 16505;
    BEGIN
      RollbackIncomeTaxPeriodSetup(IncomeTaxAccountingPeriod."Starting Date");
      UpdateGeneralLedgerSetup(TDSNilChallanNos);

      IncomeTaxAccountingPeriod.DELETE(TRUE);
      ChallanRegister.DELETEALL;
      BatchHeader.DELETEALL;
      TDSEntry.DELETEALL;
      Form2627Entry.DELETEALL;
      COMMIT;

      WORKDATE := OldWorkDate;
    END;

    LOCAL PROCEDURE RunGenerateCertificateNos@1500441(NODNOCHeaderNo@1500130 : Code[20];TDSNatureDeductionTDSGroup@1500131 : Option;StartingDate@1500132 : Date);
    BEGIN
      EnqueueValuesinGenerateCertNosReqPageHandler(NODNOCHeaderNo,TDSNatureDeductionTDSGroup,StartingDate);
      COMMIT;
      REPORT.RUN(REPORT::"Generate Certificate Nos.");
    END;

    LOCAL PROCEDURE EnqueueValuesInFormReqPageHandlers@1500442(FinancialYearForeTDSTCS@1500124 : Code[6]);
    VAR
      CompanyInformation@1500125 : Record 79;
    BEGIN
      CompanyInformation.GET;
      LibraryVariableStorage.Enqueue(CompanyInformation."T.A.N. No.");
      LibraryVariableStorage.Enqueue(FinancialYearForeTDSTCS);
    END;

    [RequestPageHandler]
    PROCEDURE CreateTDSTCSFiscalYearRequestPageHandler@1500503(VAR CreateTDSTCSFiscalYear@1500100 : TestRequestPage 13717);
    BEGIN
      CreateTDSTCSFiscalYear.StartingDate.SETVALUE(WORKDATE);
      CreateTDSTCSFiscalYear.EndingDate.SETVALUE(CALCDATE('<1Y>',WORKDATE));
      CreateTDSTCSFiscalYear.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateCertificateNosRequestPageHandler@1500461(VAR GenerateCertificateNos@1500118 : TestRequestPage 13720);
    VAR
      Party@1500119 : Variant;
      TDSGroupCode@1500120 : Variant;
      StartingDate@1500121 : Variant;
      EndingDate@1500122 : Variant;
      PartyType@1500123 : ' ,Party,Customer,Vendor';
    BEGIN
      LibraryVariableStorage.Dequeue(Party);
      LibraryVariableStorage.Dequeue(TDSGroupCode);
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(EndingDate);
      GenerateCertificateNos.PartyType.SETVALUE(PartyType::Vendor);
      GenerateCertificateNos.Party.SETVALUE(Party);
      GenerateCertificateNos.TDSGroup.SETVALUE(TDSGroupCode);
      GenerateCertificateNos.StartingDate.SETVALUE(StartingDate);
      GenerateCertificateNos.EndingDate.SETVALUE(EndingDate);
      GenerateCertificateNos.ReceiptNumber.SETVALUE('ABCDEFGH');
      GenerateCertificateNos.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE Form26QRequestPageHandler@1500445(VAR Form26Q@1500113 : TestRequestPage 16505);
    VAR
      TANLocation@1500114 : Variant;
      FinancialYear@1500115 : Variant;
      ReportFrequency@1500116 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      LibraryVariableStorage.Dequeue(TANLocation);
      LibraryVariableStorage.Dequeue(FinancialYear);
      Form26Q.TANLocation.SETVALUE(TANLocation);
      Form26Q.ReportFrequency.SETVALUE(ReportFrequency::Q1);
      Form26Q.FinancialYear.SETVALUE(FinancialYear);
      Form26Q.FullName.SETVALUE('Abcd');
      Form26Q.Designation.SETVALUE('MNOP');
      Form26Q.PrintingDate.SETVALUE(WORKDATE);
      Form26Q.MobileNo.SETVALUE(1234567891);
      Form26Q."PAN No.".SETVALUE(PANNo);
      Form26Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE Form26QRequestPageHandlerFieldValidation@1500026(VAR Form26Q@1500113 : TestRequestPage 16505);
    BEGIN
      Form26Q.TANLocation.SETVALUE(TANNo);
      Form26Q.ReportFrequency.SETVALUE(ReportFrequency);
      Form26Q.FinancialYear.SETVALUE(FinancialYear);
      Form26Q.FullName.SETVALUE(FullName);
      Form26Q.Designation.SETVALUE(Designation);
      Form26Q.PrintingDate.SETVALUE(PrintingDate);
      Form26Q.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,999999999));
      Form26Q."PAN No.".SETVALUE(PANNo);
      Form26Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE Form27QRequestPageHandler@1500489(VAR Form27Q@1500109 : TestRequestPage 16511);
    VAR
      TANLocation@1500110 : Variant;
      FinancialYear@1500111 : Variant;
      ReportFrequency@1500112 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      LibraryVariableStorage.Dequeue(TANLocation);
      LibraryVariableStorage.Dequeue(FinancialYear);
      Form27Q.TANLocation.SETVALUE(TANLocation);
      Form27Q.ReportFrequency.SETVALUE(ReportFrequency::Q1);
      Form27Q.FinancialYear.SETVALUE(FinancialYear);
      Form27Q.FullName.SETVALUE('ABCD');
      Form27Q.Designation.SETVALUE('EFGH');
      Form27Q.PrintingDate.SETVALUE(WORKDATE);
      Form27Q.MobileNo.SETVALUE(1234567891);
      Form27Q."PAN No.".SETVALUE(PANNo);
      Form27Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE Form27QRequestPageHandlerFieldValidation@1500014(VAR Form27Q@1500113 : TestRequestPage 16511);
    BEGIN
      Form27Q.TANLocation.SETVALUE(TANNo);
      Form27Q.ReportFrequency.SETVALUE(ReportFrequency);
      Form27Q.FinancialYear.SETVALUE(FinancialYear);
      Form27Q.FullName.SETVALUE(FullName);
      Form27Q.Designation.SETVALUE(Designation);
      Form27Q.PrintingDate.SETVALUE(PrintingDate);
      Form27Q.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(1000000000,999999999));
      Form27Q."PAN No.".SETVALUE(PANNo);
      Form27Q.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE GenerateeTDSRequestPageHandler@1500490(VAR GenerateeTDS@1500104 : TestRequestPage 16508);
    VAR
      TANLocation@1500105 : Variant;
      FinancialYear@1500106 : Variant;
      FileName@1500107 : Variant;
      ReportFrequency@1500108 : ' ,Q1,Q2,Q3,Q4';
    BEGIN
      LibraryVariableStorage.Dequeue(TANLocation);
      LibraryVariableStorage.Dequeue(FinancialYear);
      LibraryVariableStorage.Dequeue(FileName);
      GenerateeTDS.FileName.SETVALUE(FileName);
      GenerateeTDS.TANLocation.SETVALUE(TANLocation);
      GenerateeTDS.ReportFrequency.SETVALUE(ReportFrequency::Q1);
      GenerateeTDS.FinancialYear.SETVALUE(FinancialYear);
      GenerateeTDS.FullName.SETVALUE(TANLocation);
      GenerateeTDS.Designation.SETVALUE(TANLocation);
      GenerateeTDS.PrintingDate.SETVALUE(WORKDATE);
      GenerateeTDS.NameOfReturnPreparationUtility.SETVALUE(TANLocation);
      GenerateeTDS.Email.SETVALUE(TANLocation);
      GenerateeTDS.MobileNo.SETVALUE(1234567893);
      GenerateeTDS."PAN No.".SETVALUE(PANNo);
      GenerateeTDS.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE GenerateeTDSRequestPageHandlerFieldValidation@1500002(VAR GenerateeTDS@1500104 : TestRequestPage 16508);
    BEGIN
      GenerateeTDS.FileName.SETVALUE(eTDSFileName);
      GenerateeTDS.ReportFrequency.SETVALUE(ReportFrequency);
      GenerateeTDS.FinancialYear.SETVALUE(FinancialYear);
      GenerateeTDS.TANLocation.SETVALUE(TANNo);
      GenerateeTDS.FullName.SETVALUE(FullName);
      GenerateeTDS.Designation.SETVALUE(Designation);
      GenerateeTDS.PrintingDate.SETVALUE(PrintingDate);
      GenerateeTDS.NameOfReturnPreparationUtility.SETVALUE(NameOfReturnPreparationUtility);
      GenerateeTDS.Email.SETVALUE(COPYSTR(LibraryUtility.GenerateRandomAlphabeticText(10,0),1,10));
      GenerateeTDS.MobileNo.SETVALUE(LibraryRandom.RandIntInRange(100000000,99999999));
      GenerateeTDS."PAN No.".SETVALUE(PANNo);
      GenerateeTDS.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@1500501(Text@1500101 : Text;VAR Reply@1500102 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1500502(Msg@1560501 : Text);
    BEGIN
    END;

    BEGIN
    END.
  }
}

