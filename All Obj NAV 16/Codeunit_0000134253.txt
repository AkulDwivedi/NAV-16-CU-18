OBJECT Codeunit 134253 Match Bank Rec. Scenarios
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Assert@1003 : Codeunit 130000;
      LibraryRandom@1000 : Codeunit 130440;
      LibraryERM@1005 : Codeunit 131300;
      LibraryERMCountryData@1008 : Codeunit 131305;
      LibraryUtility@1004 : Codeunit 131000;
      LibrarySales@1006 : Codeunit 130509;
      LibraryVariableStorage@1002 : Codeunit 131004;
      isInitialized@1001 : Boolean;

    [Test]
    PROCEDURE AddToMatchPartialBRL@4();
    VAR
      BankAccReconciliationLine@1003 : Record 274;
      BankAccReconciliation@1000 : Record 273;
      BankAccReconciliationPage@1001 : TestPage 379;
      Amount@1002 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      SetupManualMatch(BankAccReconciliation,BankAccReconciliationPage,Amount,1.5);
      BankAccReconciliationPage.MatchManually.INVOKE;
      BankAccReconciliationLine.SETRANGE("Statement Type",BankAccReconciliation."Statement Type");
      BankAccReconciliationLine.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      BankAccReconciliationLine.FINDFIRST;

      // Exercise: Add to Match.
      BankAccReconciliationPage.ApplyBankLedgerEntries.LAST;
      BankAccReconciliationPage.MatchManually.INVOKE;

      // Verify.
      VerifyOneToManyMatch(BankAccReconciliation,BankAccReconciliationLine."Statement Line No.",2,2 * Amount);
    END;

    [Test]
    PROCEDURE AddToMatchPartialBLE@12();
    VAR
      BankAccReconciliationLine@1003 : Record 274;
      BankAccReconciliation@1000 : Record 273;
      BankAccReconciliationPage@1001 : TestPage 379;
      Amount@1002 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      SetupManualMatch(BankAccReconciliation,BankAccReconciliationPage,Amount,2.5);
      BankAccReconciliationPage.MatchManually.INVOKE;
      BankAccReconciliationLine.SETRANGE("Statement Type",BankAccReconciliation."Statement Type");
      BankAccReconciliationLine.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      BankAccReconciliationLine.FINDFIRST;

      // Exercise: Add to Match.
      BankAccReconciliationPage.ApplyBankLedgerEntries.LAST;
      BankAccReconciliationPage.MatchManually.INVOKE;

      // Verify.
      VerifyOneToManyMatch(BankAccReconciliation,BankAccReconciliationLine."Statement Line No.",2,2 * Amount);
    END;

    [Test]
    PROCEDURE ReplaceMatch@5();
    VAR
      BankAccReconciliation@1000 : Record 273;
      BankAccReconciliationLine@1018 : Record 274;
      BankAccReconciliationPage@1001 : TestPage 379;
      Amount@1002 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      SetupManualMatch(BankAccReconciliation,BankAccReconciliationPage,Amount,1);
      BankAccReconciliationPage.MatchManually.INVOKE;
      BankAccReconciliationLine.SETRANGE("Statement Type",BankAccReconciliation."Statement Type");
      BankAccReconciliationLine.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      BankAccReconciliationLine.FINDLAST;

      // Exercise: Replace Match.
      BankAccReconciliationPage.StmtLine.GOTORECORD(BankAccReconciliationLine);
      BankAccReconciliationPage.ApplyBankLedgerEntries.FIRST;
      BankAccReconciliationPage.MatchManually.INVOKE;

      // Verify.
      VerifyOneToManyMatch(BankAccReconciliation,BankAccReconciliationLine."Statement Line No.",1,Amount);
      BankAccReconciliationLine.FINDFIRST;
      VerifyOneToManyMatch(BankAccReconciliation,BankAccReconciliationLine."Statement Line No.",0,0);
      VerifyBalance(BankAccReconciliationPage,BankAccReconciliation."Bank Account No.");
    END;

    [Test]
    PROCEDURE RemoveManyToMany@30();
    VAR
      BankAccReconciliation@1000 : Record 273;
      BankAccReconciliationLine@1018 : Record 274;
      BankAccReconciliationPage@1001 : TestPage 379;
      Amount@1002 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      SetupManualMatch(BankAccReconciliation,BankAccReconciliationPage,Amount,1);
      BankAccReconciliationPage.MatchManually.INVOKE;
      BankAccReconciliationPage.StmtLine.LAST;
      BankAccReconciliationPage.ApplyBankLedgerEntries.LAST;
      BankAccReconciliationPage.MatchManually.INVOKE;

      // Exercise: Remove Match.
      BankAccReconciliationPage.StmtLine.FIRST;
      BankAccReconciliationPage.ApplyBankLedgerEntries.LAST;
      BankAccReconciliationPage.RemoveMatch.INVOKE;

      // Verify.
      BankAccReconciliationLine.SETRANGE("Statement Type",BankAccReconciliation."Statement Type");
      BankAccReconciliationLine.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      BankAccReconciliationLine.FINDLAST;
      VerifyOneToManyMatch(BankAccReconciliation,BankAccReconciliationLine."Statement Line No.",0,0);
      BankAccReconciliationLine.FINDFIRST;
      VerifyOneToManyMatch(BankAccReconciliation,BankAccReconciliationLine."Statement Line No.",0,0);
      VerifyBalance(BankAccReconciliationPage,BankAccReconciliation."Bank Account No.");
    END;

    [Test]
    [HandlerFunctions(TransferToGenJnlReqPageHandler,GenJnlPageHandler)]
    PROCEDURE TransferToGenJnl@2();
    VAR
      GenJournalTemplate@1004 : Record 80;
      GenJournalBatch@1003 : Record 232;
      BankAccReconciliation@1000 : Record 273;
      BankAccReconciliationPage@1001 : TestPage 379;
      Amount@1002 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      SetupManualMatch(BankAccReconciliation,BankAccReconciliationPage,Amount,1.5);
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);

      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
      GenJournalBatch."Bal. Account Type" := GenJournalBatch."Bal. Account Type"::"Bank Account";
      GenJournalBatch."Bal. Account No." := BankAccReconciliation."Bank Account No.";
      GenJournalBatch.MODIFY;

      // For running the report:
      LibraryVariableStorage.Enqueue(GenJournalBatch."Journal Template Name");
      LibraryVariableStorage.Enqueue(GenJournalBatch.Name);
      // For page validation:
      LibraryVariableStorage.Enqueue(GenJournalBatch.Name);
      LibraryVariableStorage.Enqueue(BankAccReconciliation."Bank Account No.");

      // Exercise: Transfer to Gen Jnl.
      COMMIT;
      BankAccReconciliationPage.Action24.INVOKE;

      // Verify: In the page handler.
    END;

    [Test]
    PROCEDURE FilterMatchedEntries@6();
    VAR
      BankAccReconciliation@1000 : Record 273;
      BankAccReconciliationPage@1001 : TestPage 379;
      Amount@1002 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      SetupManualMatch(BankAccReconciliation,BankAccReconciliationPage,Amount,1);

      // Exercise: Filter.
      BankAccReconciliationPage.NotMatched.INVOKE;

      // Verify.
      Assert.AreEqual('<>0',BankAccReconciliationPage.StmtLine.FILTER.GETFILTER(Difference),'Wrong filter.');
      Assert.AreEqual('''''',BankAccReconciliationPage.ApplyBankLedgerEntries.FILTER.GETFILTER("Statement No."),'Wrong filter.');
      Assert.AreEqual('0',BankAccReconciliationPage.ApplyBankLedgerEntries.FILTER.GETFILTER("Statement Line No."),'Wrong filter.');
    END;

    [Test]
    PROCEDURE RemoveFilters@18();
    VAR
      BankAccReconciliation@1000 : Record 273;
      BankAccReconciliationPage@1001 : TestPage 379;
      Amount@1002 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      SetupManualMatch(BankAccReconciliation,BankAccReconciliationPage,Amount,1);

      // Exercise: Filter.
      BankAccReconciliationPage.NotMatched.INVOKE;
      BankAccReconciliationPage.All.INVOKE;

      // Verify.
      Assert.AreEqual('',BankAccReconciliationPage.StmtLine.FILTER.GETFILTER(Difference),'Wrong filter.');
      Assert.AreEqual('',BankAccReconciliationPage.ApplyBankLedgerEntries.FILTER.GETFILTER("Statement No."),'Wrong filter.');
      Assert.AreEqual('',BankAccReconciliationPage.ApplyBankLedgerEntries.FILTER.GETFILTER("Statement Line No."),'Wrong filter.');
    END;

    [Test]
    [HandlerFunctions(MatchRecLinesReqPageHandler,MessageHandler,ConfirmHandler)]
    PROCEDURE PostMatch@8();
    VAR
      BankAccReconciliation@1000 : Record 273;
      BankAccReconciliationPage@1001 : TestPage 379;
      Amount@1002 : Decimal;
    BEGIN
      Initialize;

      // Setup.
      SetupManualMatch(BankAccReconciliation,BankAccReconciliationPage,Amount,1);
      COMMIT;
      BankAccReconciliationPage.MatchAutomatically.INVOKE;
      BankAccReconciliationPage.StatementEndingBalance.SETVALUE(BankAccReconciliationPage.StmtLine.TotalBalance.ASDECIMAL);

      // Exercise: Add to Match.
      BankAccReconciliationPage.Post.INVOKE;

      // Verify.
      VerifyPosting(BankAccReconciliation,2);
    END;

    [Test]
    PROCEDURE GLEntryPaymentDocTypeAfterPostPmtReconJnlWithGLAccAndPositiveAmount@7();
    VAR
      BankAccReconciliation@1000 : Record 273;
      GLEntry@1002 : Record 17;
      GLAccountNo@1001 : Code[20];
    BEGIN
      // [SCENARIO 374756] GLEntry."Document Type"=Payment after posting Payment Reconciliation Journal with GLAccount and positive Statement Amount
      Initialize;

      // [GIVEN] Payment Reconciliation Journal with GLAccount and positive amount
      GLAccountNo := LibraryERM.CreateGLAccountNo;
      CreateBankAccReconLineWithGLAcc(BankAccReconciliation,GLAccountNo,0.01);

      // [WHEN] Post Reconciliation Journal
      LibraryERM.PostBankAccReconciliation(BankAccReconciliation);

      // [THEN] Posted GLEntry."Document Type" = Payment
      VerifyGLEntryDocType(GLAccountNo,BankAccReconciliation."Statement No.",GLEntry."Document Type"::Payment);
    END;

    [Test]
    PROCEDURE GLEntryPaymentDocTypeAfterPostPmtReconJnlWithGLAccAndNegativeAmount@29();
    VAR
      BankAccReconciliation@1000 : Record 273;
      GLEntry@1002 : Record 17;
      GLAccountNo@1001 : Code[20];
    BEGIN
      // [SCENARIO 374756] GLEntry."Document Type"=Payment after posting Payment Reconciliation Journal with GLAccount and negative Statement Amount
      Initialize;

      // [GIVEN] Payment Reconciliation Journal with GLAccount and negative amount
      GLAccountNo := LibraryERM.CreateGLAccountNo;
      CreateBankAccReconLineWithGLAcc(BankAccReconciliation,GLAccountNo,-0.01);

      // [WHEN] Post Reconciliation Journal
      LibraryERM.PostBankAccReconciliation(BankAccReconciliation);

      // [THEN] Posted GLEntry."Document Type" = Payment
      VerifyGLEntryDocType(GLAccountNo,BankAccReconciliation."Statement No.",GLEntry."Document Type"::Payment);
    END;

    LOCAL PROCEDURE Initialize@15();
    BEGIN
      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.UpdateLocalData;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdateLocalPostingSetup;
      LibraryVariableStorage.Clear;
      isInitialized := TRUE;
    END;

    LOCAL PROCEDURE CreateBankAccReconLineWithGLAcc@17(VAR BankAccReconciliation@1002 : Record 273;GLAccountNo@1000 : Code[20];StmtAmount@1004 : Decimal);
    VAR
      BankAccount@1001 : Record 270;
      BankAccReconciliationLine@1003 : Record 274;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      LibraryERM.CreateBankAccReconciliation(
        BankAccReconciliation,BankAccount."No.",BankAccReconciliation."Statement Type"::"Payment Application");
      LibraryERM.CreateBankAccReconciliationLn(BankAccReconciliationLine,BankAccReconciliation);
      WITH BankAccReconciliationLine DO BEGIN
        VALIDATE("Transaction Date",WORKDATE);
        VALIDATE("Account Type","Account Type"::"G/L Account");
        VALIDATE("Account No.",GLAccountNo);
        VALIDATE(Description,"Account No.");
        VALIDATE("Statement Amount",StmtAmount);
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE CreateBankAccReconciliation@3(VAR BankAccReconciliation@1000 : Record 273;BankAccountNo@1001 : Code[20]);
    BEGIN
      BankAccReconciliation.INIT;
      BankAccReconciliation.VALIDATE("Bank Account No.",BankAccountNo);
      BankAccReconciliation.VALIDATE("Statement No.",
        LibraryUtility.GenerateRandomCode(BankAccReconciliation.FIELDNO("Statement No."),DATABASE::"Bank Acc. Reconciliation"));
      BankAccReconciliation.VALIDATE("Statement Date",WORKDATE);
      BankAccReconciliation.INSERT(TRUE);
    END;

    LOCAL PROCEDURE SetupManualMatch@10(VAR BankAccReconciliation@1007 : Record 273;VAR BankAccReconciliationPage@1005 : TestPage 379;VAR ExpectedAmount@1009 : Decimal;MatchFactor@1010 : Decimal);
    VAR
      BankAccReconciliationLine@1008 : Record 274;
      BankAccount@1004 : Record 270;
      GenJournalLine@1003 : Record 81;
      GenJournalTemplate@1002 : Record 80;
      GenJournalBatch@1001 : Record 232;
      Customer@1000 : Record 18;
      count@1006 : Integer;
    BEGIN
      ExpectedAmount := LibraryRandom.RandDec(100,2);

      LibraryERM.CreateBankAccount(BankAccount);
      LibrarySales.CreateCustomer(Customer);
      LibraryERM.CreateGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);

      FOR count := 1 TO 2 DO BEGIN
        LibraryERM.CreateGeneralJnlLine(GenJournalLine,GenJournalTemplate.Name,GenJournalBatch.Name,
          GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Customer,Customer."No.",-ExpectedAmount);
        GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
        GenJournalLine.VALIDATE("Bal. Account No.",BankAccount."No.");
        GenJournalLine.MODIFY(TRUE);
      END;
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      CreateBankAccReconciliation(BankAccReconciliation,BankAccount."No.");
      FOR count := 1 TO 2 DO BEGIN
        LibraryERM.CreateBankAccReconciliationLn(BankAccReconciliationLine,BankAccReconciliation);
        BankAccReconciliationLine.VALIDATE(Type,BankAccReconciliationLine.Type::"Bank Account Ledger Entry");
        BankAccReconciliationLine.VALIDATE("Statement Amount",MatchFactor * ExpectedAmount);
        BankAccReconciliationLine.MODIFY(TRUE);
      END;

      BankAccReconciliationPage.OPENEDIT;
      BankAccReconciliationPage.GOTORECORD(BankAccReconciliation);
      BankAccReconciliationPage.StmtLine.FIRST;
      BankAccReconciliationPage.ApplyBankLedgerEntries.FIRST;
    END;

    LOCAL PROCEDURE VerifyOneToManyMatch@21(BankAccReconciliation@1001 : Record 273;ExpRecLineNo@1004 : Integer;ExpBankEntryMatches@1005 : Integer;ExpAmount@1002 : Decimal);
    VAR
      BankAccountLedgerEntry@1000 : Record 271;
      BankAccReconciliationLine@1003 : Record 274;
    BEGIN
      BankAccReconciliationLine.GET(
        BankAccReconciliation."Statement Type",
        BankAccReconciliation."Bank Account No.",
        BankAccReconciliation."Statement No.",
        ExpRecLineNo);
      Assert.AreEqual(ExpAmount,BankAccReconciliationLine."Applied Amount",'Wrong applied amt.');
      Assert.AreEqual(ExpBankEntryMatches,BankAccReconciliationLine."Applied Entries",'Wrong no. of applied entries.');

      BankAccountLedgerEntry.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      BankAccountLedgerEntry.SETRANGE("Statement Status",BankAccountLedgerEntry."Statement Status"::"Bank Acc. Entry Applied");
      BankAccountLedgerEntry.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      BankAccountLedgerEntry.SETRANGE("Statement Line No.",ExpRecLineNo);
      BankAccountLedgerEntry.SETRANGE(Open,TRUE);
      Assert.AreEqual(ExpBankEntryMatches,BankAccountLedgerEntry.COUNT,'Wrong no of applied entries.');
    END;

    LOCAL PROCEDURE VerifyBalance@1(VAR BankAccReconciliationPage@1000 : TestPage 379;BankAccNo@1001 : Code[20]);
    VAR
      BankAccount@1002 : Record 270;
    BEGIN
      BankAccount.GET(BankAccNo);
      BankAccount.CALCFIELDS(Balance,"Total on Checks");
      Assert.AreEqual(BankAccount.Balance,BankAccReconciliationPage.ApplyBankLedgerEntries.Balance.ASDECIMAL,'Wrong acc. balance');
      Assert.AreEqual(BankAccount."Total on Checks",BankAccReconciliationPage.ApplyBankLedgerEntries.CheckBalance.ASDECIMAL,
        'Wrong check balance');
      Assert.AreEqual(BankAccount.Balance + BankAccount."Total on Checks",
        BankAccReconciliationPage.ApplyBankLedgerEntries.BalanceToReconcile.ASDECIMAL,'Wrong remaining balance');
    END;

    LOCAL PROCEDURE VerifyPosting@19(BankAccReconciliation@1000 : Record 273;ExpEntriesNo@1003 : Integer);
    VAR
      BankAccountLedgerEntry@1001 : Record 271;
      BankAccountStatement@1002 : Record 275;
    BEGIN
      BankAccountStatement.GET(BankAccReconciliation."Bank Account No.",BankAccReconciliation."Statement No.");
      BankAccountLedgerEntry.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      BankAccountLedgerEntry.SETRANGE("Statement Status",BankAccountLedgerEntry."Statement Status"::Closed);
      BankAccountLedgerEntry.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      BankAccountLedgerEntry.SETRANGE("Remaining Amount",0);
      BankAccountLedgerEntry.SETRANGE(Open,FALSE);
      Assert.AreEqual(ExpEntriesNo,BankAccountLedgerEntry.COUNT,'Wrong no of bank entries.');

      BankAccountLedgerEntry.RESET;
      BankAccountLedgerEntry.SETRANGE("Bank Account No.",BankAccReconciliation."Statement No.");
      BankAccountLedgerEntry.SETRANGE(Open,TRUE);
      Assert.IsTrue(BankAccountLedgerEntry.ISEMPTY,'There should be no entries left.');

      ASSERTERROR BankAccReconciliation.FIND;
    END;

    LOCAL PROCEDURE VerifyGLEntryDocType@25(GLAccountNo@1001 : Code[20];DocumentNo@1002 : Code[20];ExpectedDocType@1003 : Option);
    VAR
      DummyGLEntry@1000 : Record 17;
    BEGIN
      DummyGLEntry.SETRANGE("G/L Account No.",GLAccountNo);
      DummyGLEntry.SETRANGE("Document No.",DocumentNo);
      DummyGLEntry.SETRANGE("Document Type",ExpectedDocType);
      Assert.RecordIsNotEmpty(DummyGLEntry);
    END;

    [RequestPageHandler]
    PROCEDURE TransferToGenJnlReqPageHandler@9(VAR TransBankRecToGenJnl@1001 : TestRequestPage 1497);
    VAR
      TemplateName@1000 : Variant;
      BatchName@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(TemplateName);
      LibraryVariableStorage.Dequeue(BatchName);
      TransBankRecToGenJnl.Control2.SETVALUE(TemplateName);
      TransBankRecToGenJnl.Control3.SETVALUE(BatchName);
      TransBankRecToGenJnl.OK.INVOKE;
    END;

    [PageHandler]
    PROCEDURE GenJnlPageHandler@14(VAR GeneralJournal@1000 : TestPage 39);
    VAR
      GenJnlLine@1003 : Record 81;
      BatchName@1001 : Variant;
      BankAccNo@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(BatchName);
      LibraryVariableStorage.Dequeue(BankAccNo);
      GeneralJournal.CurrentJnlBatchName.ASSERTEQUALS(BatchName);
      GeneralJournal."Bal. Account Type".ASSERTEQUALS(GenJnlLine."Bal. Account Type"::"Bank Account");
      GeneralJournal."Bal. Account No.".ASSERTEQUALS(BankAccNo);
    END;

    [RequestPageHandler]
    PROCEDURE MatchRecLinesReqPageHandler@16(VAR MatchBankAccReconciliation@1001 : TestRequestPage 1252);
    BEGIN
      MatchBankAccReconciliation.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@23(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@28(Message@1000 : Text[1024]);
    BEGIN
    END;

    BEGIN
    {
      // [FEATURE] [Bank Reconciliation]
    }
    END.
  }
}

