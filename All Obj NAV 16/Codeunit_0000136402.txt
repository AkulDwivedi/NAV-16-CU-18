OBJECT Codeunit 136402 Resource Batch Jobs
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Assert@1008 : Codeunit 130000;
      LibraryFiscalYear@1007 : Codeunit 131302;
      LibraryResource@1011 : Codeunit 130511;
      LibraryUtility@1004 : Codeunit 131000;
      IsInitialized@1001 : Boolean;
      StartDate@1002 : Date;
      EndDate@1003 : Date;
      EndingDateError@1005 : TextConst 'ENU=Ending Date must be specified.';
      ResourceRegisterError@1009 : TextConst 'ENU=Resource Register must be deleted for %1 %2 .';
      UnknownError@1006 : TextConst 'ENU=Unknown Error';

    LOCAL PROCEDURE Initialize@4();
    VAR
      LibraryService@1000 : Codeunit 131902;
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Clear global variable.
      CLEAR(StartDate);
      CLEAR(EndDate);

      IF IsInitialized THEN
        EXIT;

      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [Test]
    PROCEDURE SuggestPriceChangeResource@1();
    VAR
      Resource@1000 : Record 156;
      SuggestResPriceChgRes@1001 : Report 1191;
      UnitPriceFactor@1002 : Decimal;
    BEGIN
      // Test Resource Price Change after running Suggest Res. Price Chg. Res. Batch Job.

      // 1. Setup: Create Resource with Unit Price.
      Initialize;
      CreateResourceWithUnitPrice(Resource);
      UnitPriceFactor := RANDOM(10) + LibraryUtility.GenerateRandomFraction;  // Use Random because value is not important.

      // 2. Exercise: Run Suggest Res. Price Chg. Res. Batch Job.
      CLEAR(SuggestResPriceChgRes);
      Resource.SETRANGE("No.",Resource."No.");
      SuggestResPriceChgRes.SETTABLEVIEW(Resource);
      SuggestResPriceChgRes.InitializeRequest(0,UnitPriceFactor,'',TRUE);
      SuggestResPriceChgRes.USEREQUESTPAGE(FALSE);
      SuggestResPriceChgRes.RUN;

      // 3. Verify: Verify New Unit Price on Resource Price Change.
      VerifyResourcePriceChange(Resource."No.",0,Resource."Unit Price" * UnitPriceFactor);
    END;

    [Test]
    PROCEDURE SuggestPriceChangePrice@2();
    VAR
      Resource@1000 : Record 156;
      UnitPriceFactor@1002 : Decimal;
      UnitPrice@1003 : Decimal;
    BEGIN
      // Test Resource Price Change after running Suggest Res. Price Chg. Price Batch Job.

      // 1. Setup: Create Resource and Resource Price with Unit Price.
      Initialize;
      CreateResourceWithUnitPrice(Resource);
      UnitPrice := CreateResourcePrice(Resource."No.");
      UnitPriceFactor := RANDOM(10) + LibraryUtility.GenerateRandomFraction;  // Use Random because value is not important.

      // 2. Exercise: Run Suggest Res. Price Chg. Price Batch Job.
      RunSuggestResPriceChgPrice(Resource."No.",UnitPriceFactor);

      // 3. Verify: Verify New Unit Price and Current Unit Price on Resource Price Change.
      VerifyResourcePriceChange(Resource."No.",UnitPrice,UnitPrice * UnitPriceFactor);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE ImplementResourcePriceChange@9();
    VAR
      Resource@1000 : Record 156;
      ResourcePriceChange@1001 : Record 335;
      ImplementResPriceChange@1008 : Report 1193;
      UnitPriceFactor@1002 : Decimal;
      UnitPrice@1009 : Decimal;
    BEGIN
      // Test Resource Price after running Implement Res. Price Change Batch Job.

      // 1. Setup: Create Resource and Resource Price with Unit Price.
      Initialize;
      CreateResourceWithUnitPrice(Resource);
      UnitPrice := CreateResourcePrice(Resource."No.");
      UnitPriceFactor := RANDOM(10) + LibraryUtility.GenerateRandomFraction;  // Use Random because value is not important.

      // 2. Exercise: Run Suggest Res. Price Chg. Price and Implement Res. Price Change Batch Jobs.
      RunSuggestResPriceChgPrice(Resource."No.",UnitPriceFactor);
      CLEAR(ImplementResPriceChange);
      ResourcePriceChange.SETRANGE(Type,ResourcePriceChange.Type::Resource);
      ResourcePriceChange.SETRANGE(Code,Resource."No.");
      ImplementResPriceChange.SETTABLEVIEW(ResourcePriceChange);
      ImplementResPriceChange.USEREQUESTPAGE(FALSE);
      ImplementResPriceChange.RUN;

      // 3. Verify: Verify Unit Price on Resource Price.
      VerifyResourcePrice(Resource."No.",UnitPrice * UnitPriceFactor);
    END;

    [Test]
    PROCEDURE AdjustResourceCostsPrice@11();
    VAR
      Selection@1000 : 'Direct Unit Cost,Indirect Cost %,Unit Cost,Profit %,Unit Price';
    BEGIN
      // Test Direct Unit Cost after running Adjust Resource Costs Prices Batch Job with Direct Unit Cost.
      Initialize;
      RunAdjustCostPriceBatchJobAndValidateData(Selection::"Direct Unit Cost",'',0.0);
    END;

    [Test]
    [HandlerFunctions(DateCompressResourceLedgerHandler,ConfirmMessageHandlerTRUE,DimensionSelectionHandler)]
    PROCEDURE DateCompressWithoutStartEndDate@10();
    VAR
      Resource@1000 : Record 156;
    BEGIN
      // Test Functionality of Date Compress Resource Ledger without Start date and End Date.

      // 1. Setup: Create Resource.
      Initialize;
      CreateResourceWithUnitPrice(Resource);

      // 2. Exercise: Run Date Compress Resource Ledger report without start date and end date.
      StartDate := 0D;
      EndDate := 0D;
      COMMIT;  // Commit needs before run Date Compress Resource Ledger report.
      ASSERTERROR DateCompressResourceJournal(Resource."No.");

      // 3. Verify: Check expected ERROR must be come for End date.
      Assert.AreEqual(STRSUBSTNO(EndingDateError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(DateCompressResourceLedgerHandler,ConfirmMessageHandlerTRUE,MessageHandler,DimensionSelectionHandler)]
    PROCEDURE DateCompressWithStartEndDate@13();
    VAR
      Resource@1003 : Record 156;
    BEGIN
      // Test Functionality of Date Compress Resource Ledger with Start date and End date.

      // 1. Setup: Create Resource, Resource Journal Line and Post.
      Initialize;
      CreateResourceWithUnitPrice(Resource);
      CreateAndPostResourceJournalLine(Resource."No.");

      // 2. Exercise: Run Date Compress Resource Ledger report with start date and end date.
      DateCompressResourceJournal(Resource."No.");

      // 3. Verify: Check Resource Ledger Entry with Resource.
      VerifyResourceLedgerEntry(Resource."No.");
    END;

    [Test]
    [HandlerFunctions(DateCompressResourceLedgerHandler,MessageHandler,DimensionSelectionHandler,ConfirmMessageHandlerTRUE)]
    PROCEDURE DeleteEmptyResourceRegisters@6();
    VAR
      Resource@1000 : Record 156;
      ResourceRegister@1002 : Record 240;
      JournalBatchName@1001 : Code[20];
    BEGIN
      // Check Resource Register deleted after running Delete Empty Resource Registers Batch job.

      // 1. Setup: Create Resource, Resource Journal Line and Post.
      Initialize;
      CreateResourceWithUnitPrice(Resource);
      JournalBatchName := CreateAndPostResourceJournalLine(Resource."No.");

      // Run Date Compress Resource Ledger report with start date and end date.
      DateCompressResourceJournal(Resource."No.");

      // 2. Exercise: Run Delete Empty Resource Registers Batch job.
      RunDeleteEmptyResourceRegisters;

      // 3. Verify: Resource Register must be deleted after run Delete Empty Resource Ledger report.
      Assert.IsFalse(
        FindResourceRegister(JournalBatchName),
        STRSUBSTNO(ResourceRegisterError,ResourceRegister.FIELDCAPTION("Journal Batch Name"),JournalBatchName));
    END;

    [Test]
    PROCEDURE AdjustResourceUnitPrice@3();
    VAR
      RoundingMethod@1001 : Record 42;
      Selection@1000 : 'Direct Unit Cost,Indirect Cost %,Unit Cost,Profit %,Unit Price';
    BEGIN
      // Test Unit Price after running Adjust Resource Costs Prices Batch Job with Unit Price.
      Initialize;
      RoundingMethod.FINDFIRST;
      RunAdjustCostPriceBatchJobAndValidateData(Selection::"Unit Price",RoundingMethod.Code,RoundingMethod.Precision);
    END;

    LOCAL PROCEDURE RunAdjustCostPriceBatchJobAndValidateData@5(Selection@1001 : 'Direct Unit Cost,Indirect Cost %,Unit Cost,Profit %,Unit Price';RoundingMethod@1005 : Code[10];Precision@1006 : Decimal);
    VAR
      Resource@1004 : Record 156;
      Resource2@1003 : Record 156;
      AdjustResourceCostsPrices@1002 : Report 1195;
      UnitPriceFactor@1000 : Decimal;
    BEGIN
      // 1. Setup: Create Resource with Unit Price.
      CreateResourceWithUnitPrice(Resource);
      UnitPriceFactor := RANDOM(10) + LibraryUtility.GenerateRandomFraction;  // Use Random because value is not important.

      // 2. Exercise: Run Adjust Resource Costs Prices Batch Job with Unit Price.
      CLEAR(AdjustResourceCostsPrices);
      Resource.SETRANGE("No.",Resource."No.");
      AdjustResourceCostsPrices.SETTABLEVIEW(Resource);
      AdjustResourceCostsPrices.InitializeRequest(Selection,UnitPriceFactor,RoundingMethod);
      AdjustResourceCostsPrices.USEREQUESTPAGE(FALSE);
      AdjustResourceCostsPrices.RUN;

      // 3. Verify: Verify Unit Price on Resource.
      Resource2.GET(Resource."No.");
      IF Selection = Selection::"Direct Unit Cost" THEN
        Resource2.TESTFIELD("Direct Unit Cost",Resource."Direct Unit Cost" * UnitPriceFactor)
      ELSE
        Resource2.TESTFIELD("Unit Price",ROUND(Resource."Unit Price" * UnitPriceFactor,Precision));
    END;

    LOCAL PROCEDURE CreateResourcePrice@110(ResourceNo@1001 : Code[20]) : Decimal;
    VAR
      ResourcePrice@1000 : Record 201;
    BEGIN
      LibraryResource.CreateResourcePrice(ResourcePrice,ResourcePrice.Type::Resource,ResourceNo,'','');
      ResourcePrice.VALIDATE("Unit Price",RANDOM(100) + LibraryUtility.GenerateRandomFraction);  // Use Random because value is not important.
      ResourcePrice.MODIFY(TRUE);
      EXIT(ResourcePrice."Unit Price");
    END;

    LOCAL PROCEDURE CreateAndPostResourceJournalLine@14(ResourceNo@1007 : Code[20]) : Code[20];
    VAR
      ResJournalBatch@1001 : Record 236;
      ResJournalLine@1002 : Record 207;
      ResJournalTemplate@1000 : Record 206;
    BEGIN
      LibraryFiscalYear.CreateFiscalYear;
      StartDate := LibraryFiscalYear.GetLastPostingDate(TRUE);
      EndDate := LibraryFiscalYear.GetLastPostingDate(TRUE);

      LibraryResource.CreateResourceJournalTemplate(ResJournalTemplate);
      LibraryResource.CreateResourceJournalBatch(ResJournalBatch,ResJournalTemplate.Name);
      LibraryResource.CreateResJournalLine(ResJournalLine,ResJournalTemplate.Name,ResJournalBatch.Name);
      ResJournalLine.VALIDATE("Posting Date",LibraryFiscalYear.GetLastPostingDate(TRUE));
      ResJournalLine.VALIDATE("Resource No.",ResourceNo);
      ResJournalLine.VALIDATE(Quantity,RANDOM(10) + LibraryUtility.GenerateRandomFraction);  // Value is not important here.
      ResJournalLine.MODIFY(TRUE);
      LibraryResource.PostResourceJournalLine(ResJournalLine);
      LibraryFiscalYear.CloseFiscalYear;
      EXIT(ResJournalBatch.Name);
    END;

    LOCAL PROCEDURE CreateResourceWithUnitPrice@86(VAR Resource@1000 : Record 156);
    BEGIN
      LibraryResource.CreateResourceNew(Resource);
    END;

    LOCAL PROCEDURE DateCompressResourceJournal@16(ResourceNo@1000 : Code[20]);
    VAR
      ResLedgerEntry@1002 : Record 203;
      DateCompressResourceLedger@1001 : Report 1198;
    BEGIN
      COMMIT; // required for CH
      CLEAR(DateCompressResourceLedger);
      ResLedgerEntry.SETRANGE("Resource No.",ResourceNo);
      DateCompressResourceLedger.SETTABLEVIEW(ResLedgerEntry);
      DateCompressResourceLedger.RUN;
    END;

    LOCAL PROCEDURE FindResourceRegister@32(JournalBatchName@1000 : Code[20]) : Boolean;
    VAR
      ResourceRegister@1001 : Record 240;
    BEGIN
      ResourceRegister.SETRANGE("Journal Batch Name",JournalBatchName);
      EXIT(ResourceRegister.FINDFIRST);
    END;

    LOCAL PROCEDURE RunDeleteEmptyResourceRegisters@72();
    VAR
      DeleteEmptyResRegisters@1001 : Report 1199;
    BEGIN
      DeleteEmptyResRegisters.USEREQUESTPAGE(FALSE);
      DeleteEmptyResRegisters.RUN;
    END;

    LOCAL PROCEDURE RunSuggestResPriceChgPrice@139(Code@1003 : Code[20];UnitPriceFactor@1002 : Decimal);
    VAR
      ResourcePrice@1001 : Record 201;
      SuggestResPriceChgPrice@1000 : Report 1192;
    BEGIN
      CLEAR(SuggestResPriceChgPrice);
      ResourcePrice.SETRANGE(Type,ResourcePrice.Type::Resource);
      ResourcePrice.SETRANGE(Code,Code);
      SuggestResPriceChgPrice.SETTABLEVIEW(ResourcePrice);
      SuggestResPriceChgPrice.InitializeRequest(0,UnitPriceFactor,'',TRUE);
      SuggestResPriceChgPrice.USEREQUESTPAGE(FALSE);
      SuggestResPriceChgPrice.RUN;
    END;

    LOCAL PROCEDURE VerifyResourceLedgerEntry@84(ResourceNo@1000 : Code[20]);
    VAR
      ResLedgerEntry@1002 : Record 203;
      SourceCodeSetup@1001 : Record 242;
    BEGIN
      SourceCodeSetup.GET;
      ResLedgerEntry.SETRANGE("Resource No.",ResourceNo);
      ResLedgerEntry.SETRANGE("Source Code",SourceCodeSetup."Compress Res. Ledger");
      ResLedgerEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyResourcePrice@12(Code@1001 : Code[20];UnitPrice@1002 : Decimal);
    VAR
      ResourcePrice@1000 : Record 201;
    BEGIN
      ResourcePrice.SETRANGE(Type,ResourcePrice.Type::Resource);
      ResourcePrice.SETRANGE(Code,Code);
      ResourcePrice.FINDFIRST;
      ResourcePrice.TESTFIELD("Unit Price",UnitPrice);
    END;

    LOCAL PROCEDURE VerifyResourcePriceChange@25(Code@1003 : Code[20];CurrentUnitPrice@1001 : Decimal;NewUnitPrice@1002 : Decimal);
    VAR
      ResourcePriceChange@1000 : Record 335;
    BEGIN
      ResourcePriceChange.SETRANGE(Type,ResourcePriceChange.Type::Resource);
      ResourcePriceChange.SETRANGE(Code,Code);
      ResourcePriceChange.FINDFIRST;
      ResourcePriceChange.TESTFIELD("Current Unit Price",CurrentUnitPrice);
      ResourcePriceChange.TESTFIELD("New Unit Price",NewUnitPrice);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandler@27(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
    END;

    [RequestPageHandler]
    PROCEDURE DateCompressResourceLedgerHandler@26(VAR DateCompressResourceLedger@1000 : TestRequestPage 1198);
    BEGIN
      DateCompressResourceLedger.StartingDate.SETVALUE(StartDate);
      DateCompressResourceLedger.EndingDate.SETVALUE(EndDate);
      DateCompressResourceLedger.RetainDimensions.ASSISTEDIT;
      DateCompressResourceLedger.OK.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandlerTRUE@33(Question@1001 : Text[1024];VAR Reply@1000 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@44(Message@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE DimensionSelectionHandler@67(VAR DimensionSelectionMultiple@1000 : TestPage 562);
    BEGIN
      // Set Dimension Selection Multiple for all the rows.
      DimensionSelectionMultiple.FIRST;
      REPEAT
        DimensionSelectionMultiple.Selected.SETVALUE(TRUE);
      UNTIL NOT DimensionSelectionMultiple.NEXT;
      DimensionSelectionMultiple.OK.INVOKE;
    END;

    BEGIN
    {
      // [FEATURE] [Resource]
      Test Resource Batch Jobs:
       1. Test Resource Price Change after running Suggest Res. Price Chg. Res. Batch Job.
       2. Test Resource Price Change after running Suggest Res. Price Chg. Price Batch Job.
       3. Test Resource Price after running Implement Res. Price Change Batch Job.
       4. Test Direct Unit Cost after running Adjust Resource Costs Prices Batch Job with Direct Unit Cost.
       5. Test Functionality of Date Compress Resource Ledger without Start date and End Date.
       6. Test Functionality of Date Compress Resource Ledger with Start date and End Date.
       7. Check Resource Register deleted after run Delete Empty Resource Registers Batch job.
       8. Test Unit Price after running Adjust Resource Costs Prices Batch Job with Unit Price.

      TFS_TS_ID = 234552
      Cover Test cases:
      ----------------------------------------------
      Test Function Name                     TFS ID
      ----------------------------------------------
      SuggestPriceChangeResource             129026
      SuggestPriceChangePrice                129027
      ImplementResourcePriceChange           129028
      AdjustResourceCostsPrice               129029

      TFS_TS_ID = 264730
      Cover Test cases:
      -----------------------------------------------
      Test Function Name                    TFS ID
      -----------------------------------------------
      DateCompressWithoutStartEndDate       129030
      DateCompressWithStartEndDate          129030

      TFS_TS_ID = 265574
      Cover Test cases:
      -----------------------------------------------
      Test Function Name                    TFS ID
      -----------------------------------------------
      DeleteEmptyResourceRegisters          129031

      TFS_TS_ID = 268010
      Cover Test cases:
      -----------------------------------------------
      Test Function Name                    TFS ID
      -----------------------------------------------
      AdjustResourceUnitPrice               129296
    }
    END.
  }
}

