OBJECT Codeunit 134140 ERM Bank Acc Ledger Reversal
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1001 : Codeunit 131300;
      LibraryPurchase@1008 : Codeunit 130512;
      LibraryReportDataset@1004 : Codeunit 131007;
      LibraryUtility@1000 : Codeunit 131000;
      LibraryVariableStorage@1002 : Codeunit 131004;
      LibraryRandom@1003 : Codeunit 130440;
      LibraryERMCountryData@1009 : Codeunit 131305;
      isInitialized@1010 : Boolean;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BankLedgerEntryWithCustomer@17();
    VAR
      GenJournalLine@1000 : Record 81;
      Customer@1003 : Record 18;
      LibrarySales@1002 : Codeunit 130509;
    BEGIN
      // Create and post General Journal Line using Random Values with Document Type Payment and Refund for Customer.

      // Setup: Create Customer.
      Initialize;
      LibrarySales.CreateCustomer(Customer);

      // Create and post General Journal Line and Reverse Bank Ledger Entry for Customer.
      CreateAndReverseBankLedgerEntry(
        GenJournalLine."Account Type"::Customer,Customer."No.",GenJournalLine."Document Type"::Payment,
        GenJournalLine."Document Type"::Refund,-LibraryRandom.RandDec(5,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BankLedgerEntryWithVendor@18();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create and post General Journal Line using Random Values with Document Type Payment and Refund for Vendor.

      // Setup: Create Vendor.
      Initialize;

      // Create and post General Journal Line and Reverse Bank Ledger Entry for Vendor.
      CreateAndReverseBankLedgerEntry(
        GenJournalLine."Account Type"::Vendor,CreateVendor,GenJournalLine."Document Type"::Payment,
        GenJournalLine."Document Type"::Refund,LibraryRandom.RandDec(5,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE BankLedgerEntryWithGLAccount@19();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create and post General Journal Line using Random Values with Document Type Blank for GL Account.

      // Setup : Create GL Account.
      Initialize;

      // Create and post General Journal Line and Reverse Bank Ledger Entry for GL Account.
      CreateAndReverseBankLedgerEntry(
        GenJournalLine."Account Type"::"G/L Account",LibraryERM.CreateGLAccountNo,GenJournalLine."Document Type"::" ",
        GenJournalLine."Document Type"::" ",LibraryRandom.RandDec(5,2));
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler)]
    PROCEDURE TransferAndReverseBankAccounts@2();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Create and post General Journal Line using Random Values with Document Type Blank for Bank Account.

      // Setup.
      Initialize;

      // Create and post General Journal Line and Reverse Bank Ledger Entry for Bank Account.
      CreateAndReverseBankLedgerEntry(
        GenJournalLine."Account Type"::"Bank Account",CreateBankAccount,GenJournalLine."Document Type"::" ",
        GenJournalLine."Document Type"::" ",LibraryRandom.RandDec(5,2));
    END;

    [Test]
    [HandlerFunctions(BankAccountListReqPageHandler)]
    PROCEDURE BankAccountListReport@54();
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Verify No. and Balance on Bank Account List Report.

      // Setup: Create Bank Account and post Gen. Jnl. Line with Bank Account No. as Bal. Account.
      Initialize;
      CreateBankAccountAndPostGenJnlLine(GenJournalLine,'',FALSE);
      LibraryVariableStorage.Enqueue(GenJournalLine."Bal. Account No.");  // Enqueue values for BankAccountListReqPageHandler.

      // Exercise.
      REPORT.RUN(REPORT::"Bank Account - List");

      // Verify: Verify No. and Balance on Bank Account List Report.
      VerifyBankAccountListReport(GenJournalLine."Bal. Account No.",-GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(BankAccountListReqPageHandler)]
    PROCEDURE BankAccountListReportWithCurrency@52();
    VAR
      Currency@1003 : Record 4;
      GenJournalLine@1002 : Record 81;
      Amount@1001 : Decimal;
    BEGIN
      // Verify No. and Balance on Bank Account List Report with Currency.

      // Setup: Create Bank Account with Currency and post Gen. Jnl. Line with Bank Account No. as Bal. Account.
      Initialize;
      Currency.GET(CreateCurrency);
      CreateBankAccountAndPostGenJnlLine(GenJournalLine,Currency.Code,TRUE);
      LibraryVariableStorage.Enqueue(GenJournalLine."Bal. Account No.");  // Enqueue values for BankAccountListReqPageHandler.
      Amount := LibraryERM.ConvertCurrency(GenJournalLine.Amount,Currency.Code,'',WORKDATE);

      // Exercise.
      REPORT.RUN(REPORT::"Bank Account - List");

      // Verify: Verify No. and Balance on Bank Account List Report.
      VerifyBankAccountListReport(GenJournalLine."Bal. Account No.",-Amount);
    END;

    [Test]
    [HandlerFunctions(BankAccountRegisterReqPageHandler)]
    PROCEDURE BankAccountRegisterReport@44();
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Verify Bank Account No. and Amount on Bank Account Register Report.

      // Setup: Create Bank Account, create and post Gen. Jnl. Line with Bank Account No. as Bal. Account.
      Initialize;
      CreateBankAccountAndPostGenJnlLine(GenJournalLine,'',FALSE);

      // Exercise.
      REPORT.RUN(REPORT::"Bank Account Register");

      // Verify: Verify Bank Account No. and Amount on Bank Account Register Report.
      VerifyBankAccountRegisterReport(GenJournalLine."Bal. Account No.",GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(BankAccountRegisterReqPageHandler)]
    PROCEDURE BankAccountRegisterReportWithCurrency@60();
    VAR
      Currency@1003 : Record 4;
      GenJournalLine@1002 : Record 81;
      Amount@1004 : Decimal;
    BEGIN
      // Verify Bank Account No. and Amount on Bank Account Register Report with Currency.

      // Setup: Create Bank Account with Currency and post Gen. Jnl. Line with Bank Account No. as Bal. Account.
      Initialize;
      Currency.GET(CreateCurrency);
      CreateBankAccountAndPostGenJnlLine(GenJournalLine,Currency.Code,TRUE);
      Amount := LibraryERM.ConvertCurrency(GenJournalLine.Amount,Currency.Code,'',WORKDATE);

      // Exercise.
      REPORT.RUN(REPORT::"Bank Account Register");

      // Verify: Verify Bank Account No. and Amount on Bank Account Register Report.
      VerifyBankAccountRegisterReport(GenJournalLine."Bal. Account No.",Amount);
    END;

    [Test]
    [HandlerFunctions(BankAccDetailTrialBalReqPageHandler)]
    PROCEDURE BankAccDetailTrialBalReport@42();
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Verify Bank Account No., Amount, Document No. and Document Type on Bank Acc. Detail Trial Bal Report.

      // Setup: Create Bank Account and post Gen. Jnl. Line with Bank Account No. as Bal. Account.
      Initialize;
      CreateBankAccountAndPostGenJnlLine(GenJournalLine,'',FALSE);

      // Exercise.
      REPORT.RUN(REPORT::"Bank Acc. - Detail Trial Bal.");

      // Verify: Verify Bank Account No., Amount, Document No. and Document Type on Bank Acc. Detail Trial Bal Report.
      VerifyBankAccDetailTrialBalReport(GenJournalLine,-1);  // -1 for SignFactor.
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,MessageHandler,BankAccDetailTrialBalReqPageHandler)]
    PROCEDURE BankAccDetailTrialBalReportWithReverseEntries@53();
    VAR
      GenJournalLine@1002 : Record 81;
    BEGIN
      // Verify Bank Account No., Amount, Document No. and Document Type on Bank Acc. Detail Trial Bal Report with reversed entries.

      // Setup: Create Bank Account and post Gen. Jnl. Line with Bank Account No. as Bal. Account. Reverse Bank Account Ledger Entries.
      Initialize;
      CreateBankAccountAndPostGenJnlLine(GenJournalLine,'',TRUE);
      ReverseBankLedgerEntry;
      COMMIT;  // Required to run the report.

      // Exercise.
      REPORT.RUN(REPORT::"Bank Acc. - Detail Trial Bal.");

      // Verify: Verify Bank Account No., Amount, Document No. and Document Type on Bank Acc. Detail Trial Bal Report.
      VerifyBankAccDetailTrialBalReport(GenJournalLine,1);  // 1 for SignFactor.
    END;

    [Test]
    [HandlerFunctions(BankAccountLabelReqPageHandler)]
    PROCEDURE BankAccountLabel36x70mm3Columns@16();
    VAR
      LabelFormat@1014 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Check Bank Account Label Report with Label Format 36 x 70 mm (3 columns).
      Initialize;
      BankAccountLabelReport(LabelFormat::"36 x 70 mm (3 columns)",3);
    END;

    [Test]
    [HandlerFunctions(BankAccountLabelReqPageHandler)]
    PROCEDURE BankAccount37x70mm3Columns@28();
    VAR
      LabelFormat@1014 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Check Bank Account Label Report with Label Format 37 x 70 mm (3 columns).
      Initialize;
      BankAccountLabelReport(LabelFormat::"37 x 70 mm (3 columns)",3);
    END;

    [Test]
    [HandlerFunctions(BankAccountLabelReqPageHandler)]
    PROCEDURE BankAccount36x105mm2Columns@33();
    VAR
      LabelFormat@1014 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Check Bank Account Label Report with Label Format 36 x 105 mm (2 columns).
      Initialize;
      BankAccountLabelReport(LabelFormat::"36 x 105 mm (2 columns)",2);
    END;

    [Test]
    [HandlerFunctions(BankAccountLabelReqPageHandler)]
    PROCEDURE BankAccount37x105mm2Columns@31();
    VAR
      LabelFormat@1014 : '36 x 70 mm (3 columns),37 x 70 mm (3 columns),36 x 105 mm (2 columns),37 x 105 mm (2 columns)';
    BEGIN
      // Check Bank Account Label Report with Label Format 37 x 105 mm (2 columns).
      Initialize;
      BankAccountLabelReport(LabelFormat::"37 x 105 mm (2 columns)",2);
    END;

    LOCAL PROCEDURE BankAccountLabelReport@36(LabelFormat@1014 : Option;NumberOfColumns@1000 : Integer);
    VAR
      BankAccount@1003 : Record 270;
      BankAccount2@1015 : Record 270;
      BankAccount3@1016 : Record 270;
      BankAccountLabels@1001 : Report 1405;
    BEGIN
      // Setup: Create Three Bank Account with Complete Address.
      CreateBankAccountWithAddress(BankAccount);
      CreateBankAccountWithAddress(BankAccount2);
      CreateBankAccountWithAddress(BankAccount3);

      // Exercise.
      COMMIT;
      CLEAR(BankAccountLabels);
      BankAccount.SETFILTER("No.",'%1|%2|%3',BankAccount."No.",BankAccount2."No.",BankAccount3."No.");
      BankAccountLabels.SETTABLEVIEW(BankAccount);
      LibraryVariableStorage.Enqueue(LabelFormat);
      BankAccountLabels.RUN;

      // Verify: Verify All Bank Account with Different Label Format.
      LibraryReportDataset.LoadDataSetFile;
      VerifyLabels(BankAccount,1,NumberOfColumns);
      VerifyLabels(BankAccount2,2,NumberOfColumns);
      VerifyLabels(BankAccount3,3,NumberOfColumns);
    END;

    LOCAL PROCEDURE Initialize@8();
    BEGIN
      LibraryVariableStorage.Clear;
      IF isInitialized THEN
        EXIT;
      LibraryERMCountryData.UpdateLocalPostingSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE CalculateBankLedgerEntryAmount@9(DocumentNo@1001 : Code[20]) : Decimal;
    VAR
      BankAccountLedgerEntry@1000 : Record 271;
      BankAccountLedgerEntryAmt@1004 : Decimal;
    BEGIN
      BankAccountLedgerEntry.SETRANGE("Document No.",DocumentNo);
      BankAccountLedgerEntry.SETFILTER("Reversed Entry No.",'<>0');
      BankAccountLedgerEntry.FINDSET;
      REPEAT
        BankAccountLedgerEntryAmt += BankAccountLedgerEntry.Amount;
      UNTIL BankAccountLedgerEntry.NEXT = 0;
      EXIT(BankAccountLedgerEntryAmt);
    END;

    LOCAL PROCEDURE CreateBankAccountAndPostGenJnlLine@59(VAR GenJournalLine@1002 : Record 81;CurrencyCode@1001 : Code[10];ReportBooleanOption@1004 : Boolean);
    VAR
      BankAccount@1000 : Record 270;
      GenJournalBatch@1003 : Record 232;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccount.VALIDATE("Currency Code",CurrencyCode);
      BankAccount.MODIFY(TRUE);
      SelectGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,GenJournalLine."Document Type"::Payment,GenJournalLine."Account Type"::Vendor,CreateVendor,
        LibraryRandom.RandInt(100),BankAccount."No.");  // Using Random value for Amount.
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryVariableStorage.Enqueue(ReportBooleanOption);  // Enqueue value for various Request Page Handlers.
    END;

    LOCAL PROCEDURE CreateBankAccount@3() : Code[20];
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      LibraryERM.CreateBankAccount(BankAccount);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE CreateBankAccountWithAddress@37(VAR BankAccount@1000 : Record 270);
    VAR
      PostCode@1003 : Record 225;
      CountryRegion@1001 : Record 9;
    BEGIN
      LibraryERM.CreatePostCode(PostCode);  // Creation of Post Code is required to avoid special characters in existing ones.
      CountryRegion.FINDFIRST;
      LibraryERM.CreateBankAccount(BankAccount);
      BankAccount.VALIDATE(
        Address,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO(Address),DATABASE::"Bank Account"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Bank Account",BankAccount.FIELDNO(Address))));
      BankAccount.VALIDATE(
        "Address 2",
        COPYSTR(
          LibraryUtility.GenerateRandomCode(BankAccount.FIELDNO("Address 2"),DATABASE::"Bank Account"),1,
          LibraryUtility.GetFieldLength(DATABASE::"Bank Account",BankAccount.FIELDNO("Address 2"))));
      BankAccount.VALIDATE("Country/Region Code",CountryRegion.Code);
      BankAccount.VALIDATE("Post Code",PostCode.Code);
      BankAccount.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateCurrency@27() : Code[10];
    VAR
      Currency@1001 : Record 4;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@12(VAR GenJournalLine@1000 : Record 81;GenJournalBatch@1001 : Record 232;DocumentType@1003 : Option;AccountType@1004 : Option;AccountNo@1005 : Code[20];Amount@1006 : Decimal;BalAccountNo@1002 : Code[20]);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,AccountType,AccountNo,Amount);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"Bank Account");
      GenJournalLine.VALIDATE("Bal. Account No.",BalAccountNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateVendor@94() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE FindBankAccount@15() : Code[20];
    VAR
      BankAccount@1000 : Record 270;
    BEGIN
      LibraryERM.FindBankAccount(BankAccount);
      EXIT(BankAccount."No.");
    END;

    LOCAL PROCEDURE CreateAndReverseBankLedgerEntry@5(AccountType@1001 : Option;AccountNo@1002 : Code[20];DocumentType@1004 : Option;DocumentType2@1005 : Option;Amount@1003 : Decimal);
    VAR
      GenJournalLine@1000 : Record 81;
      GenJournalBatch@1007 : Record 232;
      Assert@1010 : Codeunit 130000;
      Amount2@1006 : Decimal;
    BEGIN
      SelectGenJournalBatch(GenJournalBatch);
      CreateGeneralJournalLine(GenJournalLine,GenJournalBatch,DocumentType,AccountType,AccountNo,Amount,FindBankAccount);
      Amount2 := GenJournalLine.Amount;
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalBatch,DocumentType2,AccountType,GenJournalLine."Account No.",-Amount,FindBankAccount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      Amount2 += GenJournalLine.Amount;

      // Exercise: Reverse Bank Ledger Entry from GL Register.
      ReverseBankLedgerEntry;

      // Verify: Verify Bank Ledger Entries Amount.
      Assert.AreEqual(Amount2,CalculateBankLedgerEntryAmount(GenJournalLine."Document No."),'Amount must be equal');
    END;

    LOCAL PROCEDURE ReverseBankLedgerEntry@56();
    VAR
      GLRegister@1003 : Record 45;
      ReversalEntry@1000 : Record 179;
    BEGIN
      GLRegister.FINDLAST;
      ReversalEntry.SetHideDialog(TRUE);
      ReversalEntry.ReverseRegister(GLRegister."No.");
    END;

    LOCAL PROCEDURE SelectGenJournalBatch@30(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      // Select General Journal Batch and clear General Journal Lines to make sure that no line exist before creating General Journal Lines.
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch)
    END;

    LOCAL PROCEDURE VerifyBankAccountListReport@63(BankAccountNo@1000 : Code[20];Amount@1001 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Bank_Account__No__',BankAccountNo);
      LibraryReportDataset.AssertElementWithValueExists('BankAccBalance',Amount);
    END;

    LOCAL PROCEDURE VerifyBankAccountRegisterReport@11(BankAccountNo@1000 : Code[20];Amount@1001 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Bank_Account_Ledger_Entry__Bank_Account_No__',BankAccountNo);
      LibraryReportDataset.AssertElementWithValueExists('Bank_Account_Ledger_Entry___Credit_Amount__LCY__',Amount);
    END;

    LOCAL PROCEDURE VerifyBankAccDetailTrialBalReport@65(GenJournalLine@1000 : Record 81;SignFactor@1001 : Integer);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('No_BankAccount',GenJournalLine."Bal. Account No.");
      LibraryReportDataset.AssertElementWithValueExists('DocNo_BankAccLedg',GenJournalLine."Document No.");
      LibraryReportDataset.AssertElementWithValueExists('DocType_BankAccLedg',FORMAT(GenJournalLine."Document Type"::Payment));
      LibraryReportDataset.AssertElementWithValueExists('Amount_BankAccLedg',SignFactor * GenJournalLine.Amount);
    END;

    LOCAL PROCEDURE VerifyLabels@6(BankAccount@1000 : Record 270;Index@1005 : Integer;NumberOfColumns@1006 : Integer);
    VAR
      CountryRegion@1001 : Record 9;
      FormatAddress@1002 : Codeunit 365;
      PostCodeCity@1003 : Text[90];
      County@1004 : Text[50];
      Column@1007 : Integer;
    BEGIN
      Column := ((Index - 1) MOD NumberOfColumns) + 1;
      LibraryReportDataset.AssertElementWithValueExists(STRSUBSTNO('BankAccAddr_%1__1_',Column),BankAccount."No.");
      LibraryReportDataset.AssertElementWithValueExists(STRSUBSTNO('BankAccAddr_%1__2_',Column),BankAccount.Address);
      LibraryReportDataset.AssertElementWithValueExists(STRSUBSTNO('BankAccAddr_%1__3_',Column),BankAccount."Address 2");

      CountryRegion.GET(BankAccount."Country/Region Code");
      FormatAddress.FormatPostCodeCity(
        PostCodeCity,County,BankAccount.City,BankAccount."Post Code",BankAccount.County,CountryRegion.Code);
      LibraryReportDataset.AssertElementWithValueExists(STRSUBSTNO('BankAccAddr_%1__4_',Column),PostCodeCity);
      LibraryReportDataset.AssertElementWithValueExists(STRSUBSTNO('BankAccAddr_%1__5_',Column),CountryRegion.Name);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@78(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      // Handler for confirmation messages, always send positive reply.
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE BankAccountListReqPageHandler@34(VAR BankAccountList@1000 : TestRequestPage 1402);
    VAR
      No@1001 : Variant;
      ShowBalanceInLCY@1002 : Variant;
    BEGIN
      // Dequeue variables.
      LibraryVariableStorage.Dequeue(ShowBalanceInLCY);
      LibraryVariableStorage.Dequeue(No);
      BankAccountList."Bank Account".SETFILTER("No.",No);
      BankAccountList.Control1.SETVALUE(ShowBalanceInLCY);  // Setting Show Balance In LCY.
      BankAccountList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE BankAccountLabelReqPageHandler@98(VAR BankAccountLabels@1000 : TestRequestPage 1405);
    VAR
      LabelFormat@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(LabelFormat);  // Dequeue variable.
      BankAccountLabels.Control1.SETVALUE(LabelFormat);  // Setting Label Format.
      BankAccountLabels.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE BankAccountRegisterReqPageHandler@122(VAR BankAccountRegister@1000 : TestRequestPage 1403);
    VAR
      ShowBalanceInLCY@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ShowBalanceInLCY);  // Dequeue variable
      BankAccountRegister.Control1.SETVALUE(ShowBalanceInLCY);  // Setting Show Balance In LCY.
      BankAccountRegister.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE BankAccDetailTrialBalReqPageHandler@57(VAR BankAccDetailTrialBal@1000 : TestRequestPage 1404);
    VAR
      IncludeReversedEntries@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(IncludeReversedEntries);  // Dequeue variable
      BankAccDetailTrialBal.Control1.SETVALUE(IncludeReversedEntries);  // Setting Include Reversed Entries.
      BankAccDetailTrialBal.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@1(Message@1000 : Text[1024]);
    BEGIN
      // Message Handler.
    END;

    BEGIN
    {
      // [FEATURE] [Reverse] [Bank Ledger Entry]
      Test Reversal of Bank Ledger Entry for Customer,Vendor,GL Account and Bank Account.
        1. Test Reversal of Bank Ledger Entry for Customer.
        2. Test Reversal of Bank Ledger Entry for Vendor.
        3. Test Reversal of Bank Ledger Entry for General Ledger Account.
        4. Test Reversal of Bank Ledger Entry for Bank Account.
        5. Verify No. and Balance on Bank Account List Report.
        6. Verify No. and Balance on Bank Account List Report with Currency.
        7. Verify No., Address, Post Code and City on Bank Account Labels Report.
        8. Verify Bank Account No. and Amount on Bank Account Register Report.
        9. Verify Bank Account No. and Amount on Bank Account Register Report with Currency.
       10. Verify Bank Account No., Amount, Document No. and Document Type on Bank Acc. Detail Trial Bal Report.
       11. Verify Bank Account No., Amount, Document No. and Document Type on Bank Acc. Detail Trial Bal Report with reversed entries.

      Covers Test Cases:
        ----------------------------------------------------------------
        Test Function Name             TFS ID
        ----------------------------------------------------------------
        BankLedgerEntryWithCustomer    124539,124540,124541,124542,124543,124544
        BankLedgerEntryWithVendor      124539,124540,124541,124542,124545,124546
        BankLedgerEntryWithGLAccount   124539,124540,124541,124542,124547,124548
        TransferAndReverseBankAccounts 124558,124559,124560,124561,124562,124563,124564,124565,124566,124567,124568

      TS_TFS ID=324398
       -----------------------------------------------------------------------------------------------------
       Test Function Name                                                                   Test TFS ID
       -----------------------------------------------------------------------------------------------------
       BankAccountListReport, BankAccountListReportWithCurrency                             139582
       BankAccountRegisterReport, BankAccountRegisterReportWithCurrency                     139583
       BankAccDetailTrialBalReport,BankAccDetailTrialBalReportWithReverseEntries            139362
       BankAccountLabel36x70mm3Columns,BankAccount37x70mm3Columns
       BankAccount36x105mm2Columns,BankAccount37x105mm2Columns                              139584
    }
    END.
  }
}

