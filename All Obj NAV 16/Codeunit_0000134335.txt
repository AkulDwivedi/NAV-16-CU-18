OBJECT Codeunit 134335 ERM Purch. Doc. Reports
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            isInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1004 : Codeunit 131300;
      LibraryInventory@1010 : Codeunit 132201;
      LibraryPurchase@1005 : Codeunit 130512;
      LibraryUtility@1006 : Codeunit 131000;
      LibraryReportDataset@1033 : Codeunit 131007;
      LibraryVariableStorage@1019 : Codeunit 131004;
      LibraryRandom@1002 : Codeunit 130440;
      LibrarySetupStorage@1011 : Codeunit 131009;
      Assert@1001 : Codeunit 130000;
      LibraryReportValidation@1003 : Codeunit 131002;
      isInitialized@1000 : Boolean;
      ValidationErr@1008 : TextConst '@@@="%1 = Caption, %2 = Value";ENU=%1 must be %2 in Report.';
      InteractionLogEntryExistErr@1017 : TextConst 'ENU=Interaction Log Entry must exist.';
      UndefinedDateErr@1040 : TextConst 'ENU=You cannot base a date calculation on an undefined date.';
      BalanceOnCaptionTxt@1018 : TextConst '@@@="%1 = Work date";ENU=Balance on %1';
      AgedBy@1028 : TextConst 'ENU=Aged by %1';
      DimensionValueTxt@1020 : TextConst '@@@="%1 = Dimension Code, %2 = Dimension Value Code";ENU=%1 - %2';
      AgingBy@1030 : 'Due Date,Posting Date,Document Date';
      HeadingType@1029 : 'Date Interval,Number of Days';
      UndoReceiptMsg@1031 : TextConst 'ENU=Do you really want to undo the selected Receipt lines?';
      UndoPurchRetOrderMsg@1032 : TextConst 'ENU=Do you really want to undo the selected Return Shipment lines?';
      MustBeEqualErr@1034 : TextConst '@@@="%1 = Expected Amount %2 = Actual Amount.";ENU=%1 must be equal to %2.';
      NoDatasetRowErr@1035 : TextConst '@@@="%1 = Element Name, %2 = Value";ENU=There is no dataset row corresponding to Element Name %1 with value %2';
      NumberOfRowsErr@1007 : TextConst 'ENU=Number of rows must match.';

    [Test]
    [HandlerFunctions(ReportHandlerPurchaseReceipt)]
    PROCEDURE PurchaseReceiptNoOption@31();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      NoSeriesManagement@1003 : Codeunit 396;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Check Purchase Receipt with No Option Selected.

      // Setup: Create and Post Purchase Order.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,'',CreateItem,'');
      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      DocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Receiving No. Series",WORKDATE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise.
      SavePurchaseReceipt(DocumentNo,FALSE,FALSE,FALSE);

      // Verify: Verify Saved Report Data.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Qty_PurchRcptLine',PurchaseLine.Quantity);
      LibraryReportDataset.AssertElementWithValueExists('UOM_PurchRcptLine',PurchaseLine."Unit of Measure");
      LibraryReportDataset.AssertElementWithValueExists('PaytoVenNo_PurchRcptHeader',PurchaseHeader."Pay-to Vendor No.");
    END;

    [Test]
    [HandlerFunctions(ReportHandlerPurchaseReceipt)]
    PROCEDURE PurchaseReceiptInternalInfo@14();
    VAR
      DefaultDimension@1006 : Record 352;
      PurchaseHeader@1000 : Record 38;
      NoSeriesManagement@1003 : Codeunit 396;
      DocumentNo@1002 : Code[20];
      ExpectedDimensionValue@1007 : Text[120];
    BEGIN
      // Check Purchase Receipt with Show Internal Information Option.

      // Setup: Create and Post Purchase Order.
      Initialize;
      CreateItemWithDimension(DefaultDimension);
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,'',DefaultDimension."No.",'');
      ExpectedDimensionValue := STRSUBSTNO('%1 - %2',DefaultDimension."Dimension Code",DefaultDimension."Dimension Value Code");
      DocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Receiving No. Series",WORKDATE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise.
      SavePurchaseReceipt(DocumentNo,TRUE,FALSE,FALSE);

      // Verify: Verify Saved Report Data.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('DimText1',ExpectedDimensionValue);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerPurchaseReceipt)]
    PROCEDURE PurchaseReceiptLogEntry@11();
    VAR
      InteractionLogEntry@1008 : Record 5065;
      PurchaseHeader@1000 : Record 38;
      NoSeriesManagement@1001 : Codeunit 396;
      DocumentNo@1002 : Code[20];
    BEGIN
      // Check Purchase Receipt with Log Entry Option.

      // Setup: Create and Post Purchase Order.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,'',CreateItem,'');
      DocumentNo := NoSeriesManagement.GetNextNo(PurchaseHeader."Receiving No. Series",WORKDATE,FALSE);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise.
      SavePurchaseReceipt(DocumentNo,FALSE,TRUE,FALSE);

      // Verify: Verify Interaction Log Entry with Posted Receipt.
      InteractionLogEntry.SETRANGE("Document Type",InteractionLogEntry."Document Type"::"Purch. Rcpt.");
      InteractionLogEntry.SETRANGE("Document No.",DocumentNo);
      Assert.IsTrue(InteractionLogEntry.FINDFIRST,InteractionLogEntryExistErr);
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ReportHandlerPurchaseReceipt)]
    PROCEDURE UndoPurchReceiptReportWithCorrectionLine@60();
    VAR
      PurchaseLine@1000 : Record 39;
      PurchRcptLine@1002 : Record 121;
    BEGIN
      // Verify Purchase Receipt Report after undo Receipt with Show Correction Lines.

      // Setup: Create Purchase Order, post and undo Purchase Receipt.
      Initialize;
      CreateAndPostPurchaseDocument(PurchaseLine,PurchaseLine."Document Type"::Order);
      FindReceiptLine(PurchRcptLine,PurchaseLine."No.");
      LibraryVariableStorage.Enqueue(UndoReceiptMsg);  // Enqueue value for ConfirmHandler.
      UndoPurchaseReceiptLines(PurchaseLine."No.");

      // Exercise.
      SavePurchaseReceipt(PurchRcptLine."Document No.",FALSE,FALSE,TRUE);

      // Verify: Verify Purchase Receipt Report with Show Correction Line.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('Qty_PurchRcptLine',PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorPaymentReceipt)]
    PROCEDURE VendorPaymentReceipt@12();
    VAR
      GenJournalLine@1010 : Record 81;
      DocumentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Vendor - Payment Receipt]
      // [SCENARIO] Vendor Payment Receipt Report for payment and invoice in LCY

      // [GIVEN] Purchase Invoice Payment Discount LCY = "D", Payment Tolerance LCY = "T"
      // [GIVEN] Applied Payment with Amount LCY = "P" > Invoice Amount
      Initialize;
      DocumentNo := SetupAndPostVendorPmtTolerance(GenJournalLine,'');

      // [WHEN] Run Vendor Payment Receipt Report
      SaveVendorPaymentReceipt(GenJournalLine);

      // [THEN] 'NegPmtDiscInvCurrVendLedgEntry1' = Payment Discount LCY = "D"
      // [THEN] 'NegPmtTolInvCurrVendLedgEntry1' = Payment Tolerance LCY = "T"
      // [THEN] 'NegOriginalAmt_VendLedgEntry' = Payment Amount LCY = "P"
      // [THEN] 'NegRemainingAmt' Payment Amount Not Allocated LCY = Payment Remaining Amount LCY
      // Verify: Verify Different fields data on Saved Report.
      VerifyVendorPaymentReceiptReport(DocumentNo,GenJournalLine."Document No.",GenJournalLine.Amount);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorPaymentReceipt)]
    PROCEDURE VendorPaymentReceiptFCYPaymentLCYInvoice@99();
    VAR
      GenJournalLine@1010 : Record 81;
      DocumentNo@1002 : Code[20];
    BEGIN
      // [FEATURE] [Vendor - Payment Receipt]
      // [SCENARIO 371840] Vendor Payment Receipt Report for payment with LCY, invoice in FCY
      Initialize;

      // [GIVEN] Purchase Invoice in FCY with Payment Discount LCY = "D", Payment Tolerance LCY = "T"
      // [GIVEN] Applied Payment in LCY with Amount LCY = "P" > Invoice Amount
      DocumentNo :=
        SetupAndPostVendorPmtTolerance(
          GenJournalLine,
          LibraryERM.CreateCurrencyWithExchangeRate(
            WORKDATE,LibraryRandom.RandIntInRange(2,4),LibraryRandom.RandIntInRange(2,4)));

      // [WHEN] Run Vendor Payment Receipt Report
      SaveVendorPaymentReceipt(GenJournalLine);

      // [THEN] 'NegPmtDiscInvCurrVendLedgEntry1' = Payment Discount LCY = "D"
      // [THEN] 'NegPmtTolInvCurrVendLedgEntry1' = Payment Tolerance LCY = "T"
      // [THEN] 'NegOriginalAmt_VendLedgEntry' = Payment Amount LCY = "P"
      // [THEN] 'NegRemainingAmt' Payment Amount Not Allocated LCY = Payment Remaining Amount LCY
      VerifyVendorPaymentReceiptReport(DocumentNo,GenJournalLine."Document No.",GenJournalLine.Amount);
    END;

    [Test]
    PROCEDURE SummaryAgingNoOption@41();
    VAR
      VendorSummaryAging@1001 : Report 305;
    BEGIN
      // Check Vendor Summary Aging Report without any option selected.

      // Setup.
      Initialize;

      // Exercise: Try to Save Vendor Summary Aging without any option.
      CLEAR(VendorSummaryAging);
      VendorSummaryAging.InitializeRequest(0D,'',FALSE);
      ASSERTERROR VendorSummaryAging.SAVEASEXCEL('Test');

      // Verify: Verify Error raised during save Vendor Summary Aging Report.
      Assert.ExpectedError(UndefinedDateErr);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorSummaryAging)]
    PROCEDURE SummaryAgingPostingDate@39();
    VAR
      GenJournalLine@1010 : Record 81;
    BEGIN
      // Check Vendor Summary Aging Report with Posting Date.

      // Setup: Post Invoice Entry for Vendor on WORKDATE.
      Initialize;
      CreatePostGeneralJournalLine(GenJournalLine,LibraryPurchase.CreateVendorNo,'','0D');

      // Exercise: Save Vendor Summary Aging Report with Posting Date.
      SaveVendorSummaryAging(GenJournalLine."Account No.",GenJournalLine."Posting Date",FORMAT(0D),FALSE);

      // Verify: Verify Saved Report Data.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('TotalVendAmtDueLCY',GenJournalLine.Amount);
      LibraryReportDataset.AssertElementWithValueExists('VendBalanceDueLCY_1_',0);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorSummaryAging)]
    PROCEDURE SummaryAgingPeriodLength@38();
    VAR
      GenJournalLine@1010 : Record 81;
    BEGIN
      // Check Vendor Summary Aging Report with Period Length.

      // Setup: Post Invoice Entry for Vendor on WORKDATE.
      Initialize;
      CreatePostGeneralJournalLine(GenJournalLine,LibraryPurchase.CreateVendorNo,'','0D');

      // Save and Verify Vendor Summary Aging Report with Period Length.
      SaveAndVerifySummaryAging(GenJournalLine,FALSE);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorSummaryAging)]
    PROCEDURE SummaryAgingCurrency@36();
    VAR
      GenJournalLine@1010 : Record 81;
    BEGIN
      // Check Vendor Summary Aging Report with Currency.

      // Setup: Post Invoice Entry for Vendor on WORKDATE with Currency Attached.
      Initialize;
      CreatePostGeneralJournalLine(GenJournalLine,LibraryPurchase.CreateVendorNo,CreateCurrencyAndExchangeRate,'0D');

      // Save and Verify Vendor Summary Aging Report with Currency.
      SaveAndVerifySummaryAging(GenJournalLine,TRUE);
    END;

    [Test]
    PROCEDURE OrderSummaryNoOption@35();
    VAR
      VendorOrderSummary@1001 : Report 307;
    BEGIN
      // Check Vendor Order Summary Report with out any Option Selected.

      // Setup.
      Initialize;

      // Exercise: Try to Save Vendor Summary Aging without any option.
      CLEAR(VendorOrderSummary);
      ASSERTERROR VendorOrderSummary.SAVEASEXCEL('Test');

      // Verify: Verify Error raised during save Vendor Order Summary Report.
      Assert.ExpectedError(UndefinedDateErr);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorOrderSummary)]
    PROCEDURE OrderSummaryPostingDate@33();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1008 : Record 39;
      AmountOnOrder2@1005 : Variant;
      OrderAmount@1004 : Variant;
    BEGIN
      // Check Vendor Order Summary Report with Posting Date

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,'','','');
      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");

      // Exercise: Save Vendor Order Summary without Currency.
      SaveVendorOrderSummary(PurchaseHeader."Buy-from Vendor No.",PurchaseHeader."Posting Date",FALSE);

      // Verify: Verify Saved Report Data with Customized Formula.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('PurchAmtOnOrder3',0);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.FindCurrentRowValue('PurchAmtOnOrder2',AmountOnOrder2);
      Assert.AreNearlyEqual(AmountOnOrder2,PurchaseLine."Line Amount",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationErr,'Total',PurchaseLine."Line Amount"));
      LibraryReportDataset.FindCurrentRowValue('PurchOrderAmount',OrderAmount);
      Assert.AreNearlyEqual(OrderAmount,PurchaseLine."Line Amount",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(ValidationErr,'Total (LCY)',PurchaseLine."Line Amount"));
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorOrderSummary)]
    PROCEDURE OrderSummaryCurrency@32();
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine@1008 : Record 39;
      Currency@1006 : Record 4;
      ActualAmountLCY@1005 : Variant;
      ActualAmountOnOrder2@1004 : Variant;
      AmountLCY@1007 : Decimal;
    BEGIN
      // Check Vendor Order Summary Report with Currency.

      // Setup: Create Purchase Document with Currency.
      Initialize;
      LibraryERM.FindCurrency(Currency);
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,Currency.Code,'','');
      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      AmountLCY := ROUND(LibraryERM.ConvertCurrency(PurchaseLine."Line Amount",Currency.Code,'',PurchaseHeader."Posting Date"));

      // Exercise: Save Vendor Order Summary with Currency.
      SaveVendorOrderSummary(PurchaseHeader."Buy-from Vendor No.",PurchaseHeader."Posting Date",TRUE);

      // Verify: Verify Saved Report Data with Customized Formula.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('PurchAmtOnOrder3',0);
      LibraryReportDataset.GetNextRow;
      LibraryReportDataset.FindCurrentRowValue('PurchAmtOnOrder2',ActualAmountOnOrder2);
      Assert.AreNearlyEqual(ActualAmountOnOrder2,PurchaseLine."Line Amount",LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(MustBeEqualErr,PurchaseLine."Line Amount",'Total'));
      LibraryReportDataset.FindCurrentRowValue('PurchOrderAmountLCY',ActualAmountLCY);
      Assert.AreNearlyEqual(ActualAmountLCY,AmountLCY,LibraryERM.GetAmountRoundingPrecision,
        STRSUBSTNO(MustBeEqualErr,AmountLCY,'Total (LCY)'));
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorOrderDetail)]
    PROCEDURE OrderDetailReport@17();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      ActualOutstandingOrders@1003 : Variant;
    BEGIN
      // Check Vendor Order Detail Report with default option.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,'',CreateItem,'');
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;

      // Exercise: Save Vendor Order Details Report with option Amount LCY FALSE.
      SaveOrderDetailReport(PurchaseHeader."Buy-from Vendor No.",FALSE);

      // Verify: Verify Report values.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('PurchOrderHeaderNo',PurchaseHeader."No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(NoDatasetRowErr,'PurchOrderHeaderNo',PurchaseHeader."No."));
      WITH PurchaseLine DO BEGIN
        LibraryReportDataset.AssertCurrentRowValue('Quantity_PurchaseLine',Quantity);
        LibraryReportDataset.AssertCurrentRowValue('OutstandingQty_PurchLine',"Outstanding Quantity");
        LibraryReportDataset.AssertCurrentRowValue('DirectUnitCost_PurchLine',"Direct Unit Cost");
        LibraryReportDataset.FindCurrentRowValue('PurchOrderAmount',ActualOutstandingOrders);
        Assert.AreNearlyEqual("Outstanding Amt. Ex. VAT (LCY)",ActualOutstandingOrders,LibraryERM.GetAmountRoundingPrecision,
          STRSUBSTNO(MustBeEqualErr,"Outstanding Amt. Ex. VAT (LCY)",'Outstanding Orders'));
      END;
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorOrderDetail)]
    PROCEDURE OrderDetailReportAmountLCY@28();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      ActualOutstandingOrders@1003 : Variant;
    BEGIN
      // Check Vendor Order Detail Report with Amount LCY.

      // Setup.
      Initialize;
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateCurrencyAndExchangeRate,CreateItem,'');
      PurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type"::Order);
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.FINDFIRST;

      // Exercise: Save Vendor Order Details Report with option Amount LCY TRUE.
      SaveOrderDetailReport(PurchaseHeader."Buy-from Vendor No.",TRUE);

      // Verify: Verify Report values.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('PurchOrderHeaderNo',PurchaseHeader."No.");
      IF NOT LibraryReportDataset.GetNextRow THEN
        ERROR(STRSUBSTNO(NoDatasetRowErr,'PurchOrderHeaderNo',PurchaseHeader."No."));
      WITH PurchaseLine DO BEGIN
        LibraryReportDataset.AssertCurrentRowValue('Quantity_PurchaseLine',Quantity);
        LibraryReportDataset.AssertCurrentRowValue('OutstandingQty_PurchLine',"Outstanding Quantity");
        LibraryReportDataset.AssertCurrentRowValue('DirectUnitCost_PurchLine',"Unit Cost (LCY)");
        LibraryReportDataset.FindCurrentRowValue('PurchOrderAmount',ActualOutstandingOrders);
        Assert.AreNearlyEqual("Outstanding Amt. Ex. VAT (LCY)",ActualOutstandingOrders,LibraryERM.GetAmountRoundingPrecision,
          STRSUBSTNO(MustBeEqualErr,"Outstanding Amt. Ex. VAT (LCY)",'Outstanding Orders'));
      END;
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorDetailTrialBalance)]
    PROCEDURE DetailTrialBalance@7();
    VAR
      PurchaseHeader@1000 : Record 38;
      VendorLedgerEntry@1002 : Record 25;
      PostedInvoiceNo@1001 : Code[20];
    BEGIN
      // Check Vendor Detail Trial Balance Report.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,'',CreateItem,'');
      PostedInvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise: Save Vendor Detail Trial Balance Report with default option.
      SaveVendorDetailTrialBalReport(PurchaseHeader."Buy-from Vendor No.",FALSE,FALSE,WORKDATE);

      // Verify: Verify Report all different values.
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,PostedInvoiceNo);
      VendorLedgerEntry.CALCFIELDS(Amount,"Remaining Amount");
      LibraryReportDataset.LoadDataSetFile;
      WITH VendorLedgerEntry DO BEGIN
        LibraryReportDataset.AssertElementWithValueExists('VendAmount',Amount);
        LibraryReportDataset.AssertElementWithValueExists('VendRemainAmount',"Remaining Amount");
        LibraryReportDataset.AssertElementWithValueExists('VendBalanceLCY',Amount);
        LibraryReportDataset.AssertElementWithValueExists('EntryNo_VendorLedgerEntry',"Entry No.");
      END;
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorDetailTrialBalance)]
    PROCEDURE DetailTrialBalanceAmountLCY@16();
    VAR
      PurchaseHeader@1000 : Record 38;
      VendorLedgerEntry@1002 : Record 25;
      PostedInvoiceNo@1001 : Code[20];
    BEGIN
      // Check Vendor Detail Trial Balance Report for LCY fields.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,'',CreateItem,'');
      PostedInvoiceNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise: Save Vendor Detail Trial Balance Report with option Show Amount in LCY = TRUE.
      SaveVendorDetailTrialBalReport(PurchaseHeader."Buy-from Vendor No.",TRUE,FALSE,WORKDATE);

      // Verify: Verify LCY fields.
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,PostedInvoiceNo);
      VendorLedgerEntry.CALCFIELDS("Amount (LCY)","Remaining Amt. (LCY)");
      LibraryReportDataset.LoadDataSetFile;
      WITH VendorLedgerEntry DO BEGIN
        LibraryReportDataset.AssertElementWithValueExists('VendAmount',"Amount (LCY)");
        LibraryReportDataset.AssertElementWithValueExists('VendRemainAmount',"Remaining Amt. (LCY)");
        LibraryReportDataset.AssertElementWithValueExists('VendBalanceLCY',"Amount (LCY)");
        LibraryReportDataset.AssertElementWithValueExists('DocNo_VendLedgerEntry',"Document No.");
      END;
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorDetailTrialBalance)]
    PROCEDURE DetailTrialBalanceExclBalance@4();
    VAR
      PurchaseHeader@1000 : Record 38;
      DocumentNo@1001 : Code[20];
    BEGIN
      // Check Vendor Detail Trial Balance Report for Option Exclude Vendors That Have a Balance Only.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Invoice,'',CreateItem,'');
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise: Save Vendor Detail Trial Balance Report with option Exclude Vendor Balance Only = TRUE.
      // Using Random for Random Date.
      SaveVendorDetailTrialBalReport(
        PurchaseHeader."Buy-from Vendor No.",FALSE,TRUE,CALCDATE('<' + FORMAT(LibraryRandom.RandInt(2)) + 'M>',WORKDATE));

      // Verify: Verify Error in Detail Trial Balance Report when Exclude G/L Account that have Balance Only.
      LibraryReportDataset.LoadDataSetFile;
      ASSERTERROR LibraryReportDataset.AssertElementWithValueExists('',DocumentNo);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorItemCatalog)]
    PROCEDURE VendorItemCatalog@5();
    VAR
      ItemVendor@1004 : Record 99;
      PurchasePrice@1001 : Record 7012;
      Vendor@1000 : Record 23;
    BEGIN
      // Check Vendor Item Catalog report.

      // Setup.
      Initialize;
      LibraryPurchase.CreateVendor(Vendor);
      CreatePurchasePrice(PurchasePrice,Vendor."No.");
      CreateItemVendor(ItemVendor,PurchasePrice."Item No.",Vendor."No.");

      // Exercise: Save Vendor Item Catalog Report.
      SaveVendorItemCatalog(Vendor."No.");

      // Verify: Verify all fields of Item Catalog Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('StartingDt_PurchPrice',FORMAT(PurchasePrice."Starting Date"));
      LibraryReportDataset.AssertElementWithValueExists('DrctUnitCost_PurchPrice',PurchasePrice."Direct Unit Cost");
      LibraryReportDataset.AssertElementWithValueExists('ItemVendLeadTimeCal',FORMAT(ItemVendor."Lead Time Calculation"));
      LibraryReportDataset.AssertElementWithValueExists('ItemVendVendorItemNo',ItemVendor."Vendor Item No.");
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorPurchaseList)]
    PROCEDURE PurchaseListShowAddress@6();
    BEGIN
      // Create New Vendor and verify Vendor Address showing while Hide Address detail = FALSE on Request page.
      Initialize;
      VendorPurchaseList(FALSE);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorPurchaseList)]
    PROCEDURE PurchaseListHideAddress@34();
    BEGIN
      // Create New Vendor and verify whether Vendor Address not showing while Hide Address detail = TRUE on Request page.
      Initialize;
      ASSERTERROR VendorPurchaseList(TRUE);
      Assert.ExpectedError('No row found');
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorPurchaseList)]
    PROCEDURE PurchaseListAmountLCY@21();
    BEGIN
      // Verify Vendor Purchase List Report include only those entry where Purchase Amount is greater than 0.
      Initialize;
      ASSERTERROR VendorPurchaseListAmountLCY(0.1);  // Using 0.1 because Report generate only for greater then O Amount Entry.
      Assert.ExpectedError('No row found');
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorPurchaseList)]
    PROCEDURE PurchaseListIncludeZeroAmount@101();
    BEGIN
      // Verify Vendor Purchase List Report include all entries.
      Initialize;
      VendorPurchaseListAmountLCY(0);  // Using 0 because Report generate for all entries including O Amount.
    END;

    [Test]
    PROCEDURE VendorBalanceToDateNoOption@47();
    VAR
      VendorBalanceToDate@1004 : Report 321;
    BEGIN
      // Check Vendor Balance To Date without any option selected.

      // Setup.
      Initialize;
      CLEAR(VendorBalanceToDate);
      VendorBalanceToDate.InitializeRequest(FALSE,FALSE,FALSE);

      // Exercise: Try to Save Vendor Balance to Date Report.
      ASSERTERROR VendorBalanceToDate.SAVEASEXCEL('Test');

      // Verify: Verify Error which is Raised during Save without any option selected.
      Assert.AssertNoFilter;
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorBalanceToDate)]
    PROCEDURE VendorBalanceToDateVendorNo@46();
    VAR
      PurchaseHeader@1002 : Record 38;
      VendorLedgerEntry@1001 : Record 25;
      DocumentNo@1009 : Code[20];
    BEGIN
      // Check Vendor Balance To Date with Vendor No.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,'',CreateItem,'');
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,DocumentNo);
      VendorLedgerEntry.CALCFIELDS("Original Amount");

      // Save and Verify Vendor Balance to Date Report.
      SaveVendorBalanceToDate(PurchaseHeader,FALSE,FALSE);
      VerifyVendorBalanceToDate(PurchaseHeader."Buy-from Vendor No.",DocumentNo);
      WITH VendorLedgerEntry DO
        LibraryReportDataset.AssertElementWithValueExists('OriginalAmt',"Original Amount");
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorBalanceToDate)]
    PROCEDURE VendorBalanceToDateFCY@84();
    VAR
      PurchaseHeader@1002 : Record 38;
      VendorLedgerEntry@1001 : Record 25;
      DocumentNo@1009 : Code[20];
    BEGIN
      // Check Vendor Balance To Date with Currency.

      // Setup.
      Initialize;
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateCurrencyAndExchangeRate,CreateItem,'');
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,DocumentNo);
      VendorLedgerEntry.CALCFIELDS("Original Amount");

      // Save and Verify Report Vendor Balance to Date.
      SaveVendorBalanceToDate(PurchaseHeader,FALSE,FALSE);
      VerifyVendorBalanceToDate(PurchaseHeader."Buy-from Vendor No.",DocumentNo);
      LibraryReportDataset.AssertElementWithValueExists('CurrTotalBufferCurrCode',PurchaseHeader."Currency Code");
      WITH VendorLedgerEntry DO
        LibraryReportDataset.AssertElementWithValueExists('OriginalAmt',"Original Amount");
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorBalanceToDate)]
    PROCEDURE VendorBalanceToDateAmountLCY@44();
    VAR
      PurchaseHeader@1002 : Record 38;
      VendorLedgerEntry@1001 : Record 25;
      DocumentNo@1009 : Code[20];
    BEGIN
      // Check Vendor Balance To Date with Currency.

      // Setup.
      Initialize;
      CreatePurchaseDocument(
        PurchaseHeader,PurchaseHeader."Document Type"::Order,CreateCurrencyAndExchangeRate,CreateItem,'');
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,DocumentNo);
      VendorLedgerEntry.CALCFIELDS("Original Amt. (LCY)");

      // Save and Verify Report Vendor Balance to Date.
      SaveVendorBalanceToDate(PurchaseHeader,TRUE,FALSE);
      VerifyVendorBalanceToDate(PurchaseHeader."Buy-from Vendor No.",DocumentNo);
      WITH VendorLedgerEntry DO
        LibraryReportDataset.AssertElementWithValueExists('OriginalAmt',"Original Amt. (LCY)");

      ASSERTERROR LibraryReportDataset.AssertElementWithValueExists('',PurchaseHeader."Currency Code");
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorBalanceToDate)]
    PROCEDURE VendorBalanceToDateUnapplied@43();
    VAR
      GenJournalLine@1005 : Record 81;
      PurchaseHeader@1002 : Record 38;
      DocumentNo@1009 : Code[20];
      LineAmount@1004 : Decimal;
    BEGIN
      // Check Vendor Balance To Date with Unapplied Entries.

      // Setup.
      Initialize;
      LineAmount := CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,'',CreateItem,'');
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Apply Posted Invoice. Take Less Line Amount for Payment.
      ApplyPaymentFromGenJournalLine(GenJournalLine,PurchaseHeader."Buy-from Vendor No.",LineAmount / 2,DocumentNo);

      // Save and Verify Report Vendor Balance to Date.
      SaveVendorBalanceToDate(PurchaseHeader,FALSE,TRUE);
      VerifyVendorBalanceToDate(PurchaseHeader."Buy-from Vendor No.",DocumentNo);
      WITH GenJournalLine DO BEGIN
        LibraryReportDataset.AssertElementWithValueExists('DocType_DtldVendLedEnt',FORMAT("Document Type"));
        LibraryReportDataset.AssertElementWithValueExists('Amt',ROUND(LineAmount / 2));
      END;
    END;

    [Test]
    PROCEDURE PurchaseStatisticsError@51();
    VAR
      PurchaseStatistics@1000 : Report 312;
      PeriodLength@1001 : DateFormula;
    BEGIN
      // Check Error Message on Purchase Statistics Report with Blank Period Length and Starting Date.

      // Setup.
      Initialize;
      CLEAR(PurchaseStatistics);
      EVALUATE(PeriodLength,'');  // Make Period Length Blank.

      // Exercise: Take Blank Starting Date and Period Length.
      ASSERTERROR PurchaseStatistics.InitializeRequest(PeriodLength,0D);

      // Verify: Verify Error Message appeared.
      Assert.ExpectedError(UndefinedDateErr);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorPurchaseStatistics)]
    PROCEDURE PurchaseStatistics@70();
    VAR
      GenJournalLine@1000 : Record 81;
      Counter@1001 : Integer;
      Amount@1002 : ARRAY [5] OF Decimal;
      VendorNo@1003 : Code[20];
    BEGIN
      // Check Purchase Statistics Report with Data in all columns.

      // Setup: Post Invoice Entry for Vendor on different Posting Dates to populate data in all columns.
      Initialize;
      VendorNo := CreateAndUpdateVendor;
      FOR Counter := 1 TO 5 DO BEGIN
        CreatePostGeneralJournalLine(GenJournalLine,VendorNo,'','<-' + FORMAT(Counter) + 'M>');
        Amount[Counter] := -GenJournalLine.Amount;
      END;

      // Exercise: Take Starting Date less than WORKDATE and Save Purchase Statistics Report.
      SavePurchaseStatistics(GenJournalLine."Account No.",CALCDATE('<-' + FORMAT(Counter) + 'M>',WORKDATE));

      // Verify: Verify Amounts in the Report.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('VendPurchLCY_5_',Amount[1]);
      LibraryReportDataset.AssertElementWithValueExists('VendPurchLCY_4_',Amount[2]);
      LibraryReportDataset.AssertElementWithValueExists('VendPurchLCY_3_',Amount[3]);
      LibraryReportDataset.AssertElementWithValueExists('VendPurchLCY_2_',Amount[4]);
      LibraryReportDataset.AssertElementWithValueExists('VendPurchLCY_1_',Amount[5]);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorPurchaseStatistics)]
    PROCEDURE PurchaseStatisticsInvDiscount@49();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      Vendor@1003 : Record 23;
    BEGIN
      // Check Invoice Discount on Purchase Statistics Report.

      // Setup: Create and Post Purchase Order after calculating Invoice Discount.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,'',CreateItem,CreateAndUpdateVendor);
      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      CODEUNIT.RUN(CODEUNIT::"Purch.-Calc.Discount",PurchaseLine);
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Exercise: Take Starting Date as WORKDATE and Save Purchase Statistics Report.
      SavePurchaseStatistics(PurchaseHeader."Buy-from Vendor No.",WORKDATE);

      // Verify: Verify Invoice Discount Amount.
      Vendor.GET(PurchaseHeader."Buy-from Vendor No.");
      Vendor.CALCFIELDS("Inv. Discounts (LCY)");
      LibraryReportDataset.LoadDataSetFile;
      WITH Vendor DO
        LibraryReportDataset.AssertElementWithValueExists('VendInvDiscAmountLCY_1_',"Inv. Discounts (LCY)");
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorPurchaseStatistics)]
    PROCEDURE PurchaseStatisticsPmtDiscount@54();
    VAR
      GenJournalLine@1003 : Record 81;
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1002 : Record 39;
      Vendor@1005 : Record 23;
    BEGIN
      // Check Payment Discount on Purchase Statistics Report.

      // Setup:  Create and Post Purchase order for Vendor and Make a Payment for it.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,'',CreateItem,CreateAndUpdateVendor);
      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      CreateGeneralJournalLine(
        GenJournalLine,GenJournalLine."Document Type"::Payment,PurchaseHeader."Buy-from Vendor No.",PurchaseLine."Line Amount");
      LibraryERM.PostGeneralJnlLine(GenJournalLine);

      // Exercise: Take Starting Date as WORKDATE and Save Purchase Statistics Report.
      SavePurchaseStatistics(PurchaseHeader."Buy-from Vendor No.",WORKDATE);

      // Verify: Verify Payment Discount Amount.
      Vendor.GET(GenJournalLine."Account No.");
      Vendor.CALCFIELDS("Pmt. Discounts (LCY)");
      LibraryReportDataset.LoadDataSetFile;
      WITH Vendor DO
        LibraryReportDataset.AssertElementWithValueExists('VendPaymentDiscLCY_1_',"Pmt. Discounts (LCY)");
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorPurchaseStatistics)]
    PROCEDURE PurchaseStatisticsPmtTolerance@50();
    VAR
      GenJournalLine@1003 : Record 81;
      Vendor@1009 : Record 23;
    BEGIN
      // Check Payment tolerance on Purchase Statistics Report.

      // Setup.
      Initialize;
      SetupAndPostVendorPmtTolerance(GenJournalLine,'');

      // Exercise.
      SavePurchaseStatistics(GenJournalLine."Account No.",WORKDATE);

      // Verify: Verify Payment Tolerance Amount.
      Vendor.GET(GenJournalLine."Account No.");
      Vendor.CALCFIELDS("Pmt. Tolerance (LCY)");
      LibraryReportDataset.LoadDataSetFile;
      WITH Vendor DO
        LibraryReportDataset.AssertElementWithValueExists('VendPaymentTolLcy_1_',"Pmt. Tolerance (LCY)");
    END;

    [Test]
    [HandlerFunctions(ReportHandlerAgedAccountPayable)]
    PROCEDURE AgedAccountsPayableDueDate@56();
    VAR
      GenJournalLine@1000 : Record 81;
      Counter@1008 : Integer;
      VendorNo@1002 : Code[20];
      Amount@1001 : ARRAY [5] OF Decimal;
    BEGIN
      // Check Aged Accounts Payable Report with Aging By Due Date option.

      // Setup: Create Vendor and Post Multiple General Journal Lines with Custom Posting Dates.
      Initialize;
      VendorNo := CreateAndUpdateVendor;
      FOR Counter := 1 TO 5 DO BEGIN
        CreatePostGeneralJournalLine(GenJournalLine,VendorNo,'','<-' + FORMAT(Counter - 1) + 'M>');
        Amount[Counter] := GenJournalLine.Amount;
      END;

      // Exercise: Save Aged Accounts Payable Report with Aging By Due Date option.
      SaveAgedAccountsPayable(VendorNo,AgingBy::"Due Date",FALSE,FALSE,HeadingType::"Date Interval");

      // Verify: Verify Report Data for all columns.
      LibraryReportDataset.LoadDataSetFile;

      LibraryReportDataset.AssertElementWithValueExists('SelectAgeByDuePostngDocDt',STRSUBSTNO(AgedBy,FORMAT(AgingBy::"Due Date")));
      LibraryReportDataset.AssertElementWithValueExists('GrandTotalVLE1RemAmtLCY',Amount[1]);
      LibraryReportDataset.AssertElementWithValueExists('GrandTotalVLE2RemAmtLCY',Amount[2]);
      LibraryReportDataset.AssertElementWithValueExists('GrandTotalVLE3RemAmtLCY',Amount[3]);
      LibraryReportDataset.AssertElementWithValueExists('GrandTotalVLE4RemAmtLCY',Amount[4]);
      LibraryReportDataset.AssertElementWithValueExists('GrandTotalVLE5RemAmtLCY',Amount[5]);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerAgedAccountPayable)]
    PROCEDURE AgedAccountsPayablePostingDate@58();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Aged Accounts Payable Report with Aging By Posting Date option.

      // Setup: Create and Post General Journal Lines for Vendor. Save Report with Aging By: Document Date.
      Initialize;
      SetupSaveAgedAccountsPayable(GenJournalLine,'',AgingBy::"Posting Date",FALSE,FALSE,HeadingType::"Date Interval");

      // Verify: Verify Report Data.
      LibraryReportDataset.LoadDataSetFile;
      WITH GenJournalLine DO BEGIN
        LibraryReportDataset.AssertElementWithValueExists('AgedVendLedgEnt2RemAmtLCY',Amount);
        LibraryReportDataset.AssertElementWithValueExists('GrandTotalVLE2RemAmtLCY',Amount);
      END;
      LibraryReportDataset.AssertElementWithValueExists('SelectAgeByDuePostngDocDt',
        STRSUBSTNO(AgedBy,FORMAT(AgingBy::"Posting Date")));
    END;

    [Test]
    [HandlerFunctions(ReportHandlerAgedAccountPayable)]
    PROCEDURE AgedAccountsPayableDocDate@64();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Aged Accounts Payable Report with Aging By Document Date option.

      // Setup: Create and Post General Journal Lines for Vendor. Save Report with Aging By: Document Date.
      Initialize;
      SetupSaveAgedAccountsPayable(GenJournalLine,'',AgingBy::"Document Date",FALSE,FALSE,HeadingType::"Date Interval");

      // Verify: Verify Values.
      LibraryReportDataset.LoadDataSetFile;
      WITH GenJournalLine DO BEGIN
        LibraryReportDataset.AssertElementWithValueExists('AgedVendLedgEnt2RemAmtLCY',Amount);
        LibraryReportDataset.AssertElementWithValueExists('GrandTotalVLE2RemAmtLCY',Amount);
      END;
      LibraryReportDataset.AssertElementWithValueExists('SelectAgeByDuePostngDocDt',
        STRSUBSTNO(AgedBy,FORMAT(AgingBy::"Document Date")));
    END;

    [Test]
    [HandlerFunctions(ReportHandlerAgedAccountPayable)]
    PROCEDURE AgedAccountsPayableAmountLCY@67();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Aged Accounts Payable Report with Print Amounts in LCY option TRUE.

      // Setup: Post Invoice with Currency for Vendor. Save Report with Print Amounts in LCY option TRUE.
      Initialize;
      SetupSaveAgedAccountsPayable(
        GenJournalLine,CreateCurrencyAndExchangeRate,AgingBy::"Due Date",TRUE,FALSE,HeadingType::"Date Interval");

      // Verify: Verify Report Values.
      LibraryReportDataset.LoadDataSetFile;
      WITH GenJournalLine DO BEGIN
        LibraryReportDataset.AssertElementWithValueExists('AgedVendLedgEnt2RemAmtLCY',"Amount (LCY)");
        LibraryReportDataset.AssertElementWithValueExists('GrandTotalVLE2RemAmtLCY',"Amount (LCY)");
      END;
    END;

    [Test]
    [HandlerFunctions(ReportHandlerAgedAccountPayable)]
    PROCEDURE AgedAccountsPayablePrintDetail@61();
    VAR
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Aged Accounts Payable Report with Print Details option TRUE.

      // Setup: Create Currency and Post General Journal Lines using it. Save Aged Accounts Payable Report with Print Details TRUE.
      Initialize;
      SetupSaveAgedAccountsPayable(
        GenJournalLine,CreateCurrencyAndExchangeRate,AgingBy::"Due Date",FALSE,TRUE,HeadingType::"Date Interval");

      // Verify: Verify Report Values.
      LibraryReportDataset.LoadDataSetFile;
      WITH GenJournalLine DO BEGIN
        LibraryReportDataset.AssertElementWithValueExists('AgedVendLedgEnt2RemAmt',Amount);
        LibraryReportDataset.AssertElementWithValueExists('GrandTotalVLE2RemAmtLCY',"Amount (LCY)");
        LibraryReportDataset.AssertElementWithValueExists('TempCurrency2Code',"Currency Code");
      END;
    END;

    [Test]
    [HandlerFunctions(ReportHandlerAgedAccountPayable)]
    PROCEDURE AgedAccountsPayableHeadingType@86();
    VAR
      GeneralLedgerSetup@1007 : Record 98;
      GenJournalLine@1000 : Record 81;
    BEGIN
      // Check Aged Accounts Payable Report with Heading Type: Number of Days option.

      // Setup: Create and Post General Journal Lines for Vendor. Save Aged Accounts Payable Report with Heading Type= Number of Days.
      Initialize;
      GeneralLedgerSetup.GET;
      SetupSaveAgedAccountsPayable(GenJournalLine,'',AgingBy::"Due Date",FALSE,FALSE,HeadingType::"Number of Days");

      // Verify: Verify Values.
      LibraryReportDataset.LoadDataSetFile;
      WITH GenJournalLine DO BEGIN
        LibraryReportDataset.AssertElementWithValueExists('VendLedgEntryEndingDtAmt',Amount);
        LibraryReportDataset.AssertElementWithValueExists('VLEEndingDateRemAmtLCY',Amount);
        LibraryReportDataset.AssertElementWithValueExists('AgedVendLedgEnt2RemAmtLCY',Amount);
      END;
      LibraryReportDataset.AssertElementWithValueExists('CurrCode_TempVenLedgEntryLoop',GeneralLedgerSetup."LCY Code");
    END;

    [Test]
    [HandlerFunctions(ReportHandlerBlanketPurchaseOrder)]
    PROCEDURE BlanketPurchaseOrder@145();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
    BEGIN
      // Check Blanket Purchase Order Report.

      // Setup:
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::"Blanket Order",'',CreateItem,'');
      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");

      // Exercise: Save Blanket Purchase Order Report withount any option selected.
      SaveBlanketPurchaseOrder(PurchaseHeader."No.",PurchaseHeader."Document Type",FALSE,FALSE);

      // Verify:
      LibraryReportDataset.LoadDataSetFile;
      WITH PurchaseLine DO BEGIN
        LibraryReportDataset.AssertElementWithValueExists('Quantity_PurchLine',Quantity);
        LibraryReportDataset.AssertElementWithValueExists('UOM_PurchLine',"Unit of Measure");
      END;
    END;

    [Test]
    [HandlerFunctions(ReportHandlerBlanketPurchaseOrder)]
    PROCEDURE BlanketPurchaseOrderDimension@85();
    VAR
      PurchaseHeader@1000 : Record 38;
      DefaultDimension@1006 : Record 352;
    BEGIN
      // Check Dimension Value after saving Blanket Purchase Order Report.

      // Setup.
      Initialize;
      CreateItemWithDimension(DefaultDimension);
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::"Blanket Order",'',DefaultDimension."No.",'');

      // Exercise: Save Blanket Purchase Order Report with Show Internal Information TRUE.
      SaveBlanketPurchaseOrder(PurchaseHeader."No.",PurchaseHeader."Document Type",TRUE,FALSE);

      // Verify: Verify Dimension on Blanket Purchase Order.
      LibraryReportDataset.LoadDataSetFile;
      WITH DefaultDimension DO
        LibraryReportDataset.AssertElementWithValueExists('DimText1',
          STRSUBSTNO(DimensionValueTxt,"Dimension Code","Dimension Value Code"));
    END;

    [Test]
    [HandlerFunctions(ReportHandlerBlanketPurchaseOrder)]
    PROCEDURE BlanketPurchaseOrderLogEntry@75();
    VAR
      PurchaseHeader@1000 : Record 38;
      InteractionLogEntry@1001 : Record 5065;
    BEGIN
      // Check Interaction Log Entry after saving Blanket Purchase Order Report.

      // Setup.
      Initialize;
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::"Blanket Order",'',CreateItem,'');

      // Exercise: Save Blanket Purchase Order Report with Log Interaction TRUE.
      SaveBlanketPurchaseOrder(PurchaseHeader."No.",PurchaseHeader."Document Type",FALSE,TRUE);

      // Verify.
      VerifyInteractionLogEntry(InteractionLogEntry."Document Type"::"Purch. Blnkt. Ord.",PurchaseHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmHandler,ReportHandlerPurchaseReturnShipment)]
    PROCEDURE UndoPurchRetShptReportWithCorrectionLine@62();
    VAR
      PurchaseLine@1000 : Record 39;
      ReturnShipmentLine@1002 : Record 6651;
    BEGIN
      // Verify Purchase Return Shipment Report after undo Return Shipment with Show Correction Lines.

      // Setup: Create Purchase Return Order, post and undo Purchase Return Shipment.
      Initialize;
      CreateAndPostPurchaseDocument(PurchaseLine,PurchaseLine."Document Type"::"Return Order");
      FindReturnShipmentLine(ReturnShipmentLine,PurchaseLine."No.");
      LibraryVariableStorage.Enqueue(UndoPurchRetOrderMsg);  // Enqueue value for ConfirmHandler.
      UndoReturnShipment(PurchaseLine."No.");

      // Exercise.
      SavePurchaseRetShipment(ReturnShipmentLine."Document No.");

      // Verify: Verify Purchase Return Shipment Report with Show Correction Line.
      VerifyPurchRtnShipReport(PurchaseLine);
    END;

    [Test]
    [HandlerFunctions(SuggestVendorPaymentsWithAvailableAmtRequestPageHandler)]
    PROCEDURE SuggestVendorPaymentforCreditMemoLine@45();
    VAR
      Vendor@1000 : Record 23;
      GenJournalLine@1001 : Record 81;
      GenJournalBatch@1002 : Record 232;
      GenJournalTemplate@1003 : Record 80;
      Amount@1006 : Decimal;
    BEGIN
      // Verify that general journal line exists with credit memo after running the suggest vendor payment report.

      // Setup: Create and post general journal line with document type invoice and credit memo.
      Initialize;
      Amount := LibraryRandom.RandIntInRange(10,50);
      LibraryPurchase.CreateVendor(Vendor);
      CreateGeneralJournalBatch(GenJournalBatch,GenJournalTemplate.Type::General);
      CreateGeneralJurnlLine(GenJournalLine,GenJournalBatch,WORKDATE,Vendor."No.",
        GenJournalLine."Document Type"::Invoice,-(Amount + LibraryRandom.RandIntInRange(10,50)));
      CreateGeneralJurnlLine(GenJournalLine,GenJournalBatch,WORKDATE,Vendor."No.",
        GenJournalLine."Document Type"::"Credit Memo",Amount);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
      LibraryVariableStorage.Enqueue(Vendor."No.");

      // Exercise: Run report suggest vendor payment
      SuggestVendorPaymentUsingPage(GenJournalLine);

      // Verify: Verifying that general journal line exist with credit memo.
      VerifyGenJnlLineWithCreditMemo(GenJournalLine,-Amount);
    END;

    [Test]
    [HandlerFunctions(PurchaseQuoteRequestPageHandler)]
    PROCEDURE CheckLinesonPurchaseQuoteReport@3();
    VAR
      PurchaseHeader@1001 : Record 38;
      PurchaseLine@1003 : Record 39;
    BEGIN
      // Verify that purchase quote report shows line where type is blank.

      // Setup: Create purchase quote with type blank.
      Initialize;
      CreatePurchaseQuoteWithMultipleLine(PurchaseHeader);
      LibraryVariableStorage.Enqueue(PurchaseHeader."No.");

      // Exercise: Run Purchase-Quote report.
      PurchaseHeader.SETRANGE("No.",PurchaseHeader."No.");
      COMMIT;
      REPORT.RUN(REPORT::"Purchase - Quote",TRUE,FALSE,PurchaseHeader);

      // Verify: Verifying that both line exists on report.
      LibraryReportValidation.DownloadFile;
      LibraryReportValidation.OpenFile;
      LibraryReportValidation.SetRange(PurchaseLine.FIELDCAPTION(Description),PurchaseHeader."No.");
      Assert.AreEqual(2,LibraryReportValidation.CountRows,NumberOfRowsErr);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorOrderSummary)]
    PROCEDURE VendorOrderSummaryWithDurationAmount@83();
    VAR
      VendorNo@1000 : Code[20];
      ExpectedAmount@1001 : Decimal;
    BEGIN
      // Setup: Create a Vendor, create one Purchase Order with two Lines.
      Initialize;
      CreatePurchaseOrderWithTwoLines(VendorNo,ExpectedAmount);

      // Exercise: Generate the Vendor Order Summary report.
      SaveVendorOrderSummary(VendorNo,WORKDATE,FALSE);

      // Verify: verify Total showed corretly on Vendor Order Summary report.
      VerifyAmountOnVendorOrderSummaryReport(VendorNo,ExpectedAmount);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorOrderSummary)]
    PROCEDURE VendorOrderSummaryWithReleasedDocument@93();
    VAR
      PurchaseHeader@1003 : Record 38;
      VendorNo@1001 : Code[20];
      ExpectedAmount@1000 : Decimal;
    BEGIN
      // Setup: Create a Vendor, create one Purchase Order with two Lines.
      Initialize;
      CreatePurchaseOrderWithTwoLines(VendorNo,ExpectedAmount);

      // Release Purchase Order.
      ReleasePurchaseOrder(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);

      // Exercise: Generate the Vendor Order Summary report.
      SaveVendorOrderSummary(VendorNo,WORKDATE,FALSE);

      // Verify: verify Total showed corretly on Vendor Order Summary report.
      VerifyAmountOnVendorOrderSummaryReport(VendorNo,ExpectedAmount);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorOrderDetail)]
    PROCEDURE VendorOrderDetailWithReleasedDocument@95();
    VAR
      PurchaseHeader@1003 : Record 38;
      PurchaseLine@1002 : Record 39;
      VendorNo@1001 : Code[20];
      ExpectedAmount@1000 : Decimal;
    BEGIN
      // Setup: Create a Vendor, create one Purchase Order with two Lines.
      Initialize;
      CreatePurchaseOrderWithTwoLines(VendorNo,ExpectedAmount);

      // Release Purchase Order.
      ReleasePurchaseOrder(PurchaseHeader,PurchaseHeader."Document Type"::Order,VendorNo);

      // Exercise: Generate the Vendor Order Detail report.
      SaveOrderDetailReport(VendorNo,FALSE);

      // Verify: Verify Outstanding Orders and Total showed corretly on Vendor Order Detail report.
      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
      VerifyOutstandingOrdersAndTotalOnVendorOrderDetailReport(PurchaseLine,VendorNo,ExpectedAmount);
    END;

    [Test]
    [HandlerFunctions(RHVendorBalanceToDate)]
    PROCEDURE VendorBalanceToDateClosedEntryAppliedUnappliedAppliedOutOfPeriod@113();
    VAR
      VendorLedgerEntry@1000 : Record 25;
      Amount@1002 : Decimal;
    BEGIN
      // [SCENARIO 378237] Vendor Balance To Date for Entry where unapplication and then application are out of Ending Date
      Initialize;

      // [GIVEN] Vendor with payment of Amount = 150
      MockVendorLedgerEntry(VendorLedgerEntry,LibraryPurchase.CreateVendorNo,LibraryRandom.RandDec(100,2),WORKDATE);

      // [GIVEN] Closed Vendor Ledger Entry on 31.12.15 with Amount = -100
      // [GIVEN] Application dtld. vend. ledger entries of Amount = 100 applied on 31.12.15 and unapplied on 01.01.16
      // [GIVEN] Application dtld. vend. ledger entry with Amount = 100 on 01.01.16
      Amount := -LibraryRandom.RandDec(100,2);
      MockApplyUnapplyScenario(VendorLedgerEntry."Vendor No.",WORKDATE,WORKDATE + 1,WORKDATE + 1,Amount);

      // [WHEN] Save Vendor Balance To Data report on 31.12.15 with Include Unapplied Entries = No
      RunVendorBalanceToDateWithVendor(VendorLedgerEntry."Vendor No.",FALSE,WORKDATE);

      // [THEN] Payment Entry of 150 is printed, -100 is not printed, Total Amount = 150
      VerifyVendorBalanceToDateDoesNotExist(VendorLedgerEntry."Vendor No.",VendorLedgerEntry.Amount,Amount);
    END;

    [Test]
    [HandlerFunctions(RHVendorBalanceToDate)]
    PROCEDURE VendorBalanceToDateClosedEntryAppliedUnappliedAppliedOutOfPeriodIncludeUnapplied@195();
    VAR
      VendorLedgerEntry@1000 : Record 25;
      Amount@1002 : Decimal;
    BEGIN
      // [SCENARIO 378237] Vendor Balance To Date for closed Entry with zero balance inside period and application after Ending Date
      Initialize;

      // [GIVEN] Vendor with payment of Amount = 150
      MockVendorLedgerEntry(VendorLedgerEntry,LibraryPurchase.CreateVendorNo,LibraryRandom.RandDec(100,2),WORKDATE);

      // [GIVEN] Closed Vendor Ledger Entry on 31.12.15 with Amount = -100
      // [GIVEN] Application dtld. vend. ledger entries of Amount = 100 applied on 31.12.15 and unapplied on 01.01.16
      // [GIVEN] Application dtld. vend. ledger entry with Amount = 100 on 01.01.16
      Amount := -LibraryRandom.RandDec(100,2);
      MockApplyUnapplyScenario(VendorLedgerEntry."Vendor No.",WORKDATE,WORKDATE + 1,WORKDATE + 1,Amount);

      // [WHEN] Save Vendor Balance To Data report on 31.12.15 with Include Unapplied Entries = Yes
      RunVendorBalanceToDateWithVendor(VendorLedgerEntry."Vendor No.",TRUE,WORKDATE);

      // [THEN] Payment Entry of 150 is printed, -100 is printed with 0 balance, Total Amount = 150
      VerifyVendorBalanceToDateTwoEntriesExist(
        VendorLedgerEntry."Vendor No.",VendorLedgerEntry.Amount,Amount,VendorLedgerEntry.Amount);
    END;

    [Test]
    [HandlerFunctions(RHVendorBalanceToDate)]
    PROCEDURE VendorBalanceToDateClosedEntryAppliedInPeriodUnappliedAppliedOutOfPeriod@109();
    VAR
      VendorLedgerEntry@1000 : Record 25;
      Amount@1002 : Decimal;
    BEGIN
      // [SCENARIO 378848] Vendor Balance To Date for unapplied entry inside period and application after Ending Date
      Initialize;

      // [GIVEN] Vendor with payment of Amount = 150
      MockVendorLedgerEntry(VendorLedgerEntry,LibraryPurchase.CreateVendorNo,LibraryRandom.RandDec(100,2),WORKDATE);

      // [GIVEN] Closed Vendor Ledger Entry on 31.12.15 with Amount = -100
      // [GIVEN] Application dtld. vend. ledger entries of Amount = 100 applied on 31.12.15 and unapplied on 31.12.15
      // [GIVEN] Application dtld. vend. ledger entry with Amount = 100 on 01.01.16
      Amount := -LibraryRandom.RandDec(100,2);
      MockApplyUnapplyScenario(VendorLedgerEntry."Vendor No.",WORKDATE,WORKDATE,WORKDATE + 1,Amount);

      // [WHEN] Save Vendor Balance To Data report on 31.12.15 with Include Unapplied Entries = No
      RunVendorBalanceToDateWithVendor(VendorLedgerEntry."Vendor No.",FALSE,WORKDATE);

      // [THEN] Payment Entry of 150 is printed, -100 is printed, Total Amount = 50
      VerifyVendorBalanceToDateTwoEntriesExist(
        VendorLedgerEntry."Vendor No.",VendorLedgerEntry.Amount,Amount,VendorLedgerEntry.Amount + Amount);
    END;

    [Test]
    [HandlerFunctions(RHVendorBalanceToDate)]
    PROCEDURE VendorBalanceToDateClosedEntryWithinPeriod@152();
    VAR
      VendorLedgerEntry@1000 : Record 25;
      PmtAmount@1001 : Decimal;
    BEGIN
      // [SCENARIO 211599] Vendor Balance To Date for closed Entry inside period
      Initialize;

      // [GIVEN] Vendor with payment of Amount = 150
      PmtAmount := -LibraryRandom.RandDec(100,2);
      MockVendorLedgerEntry(VendorLedgerEntry,LibraryPurchase.CreateVendorNo,PmtAmount,WORKDATE);

      // [GIVEN] Closed Vendor Ledger Entry on 30.12.15 with Amount = -100

      MockVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Vendor No.",LibraryRandom.RandDec(100,2),WORKDATE - 1);

      // [GIVEN] Application dtld. vend. ledger entry with Amount = 100 on 31.12.15
      MockDtldVendLedgEntry(VendorLedgerEntry."Vendor No.",VendorLedgerEntry."Entry No.",-VendorLedgerEntry.Amount,FALSE,WORKDATE);
      UpdateOpenOnVendLedgerEntry(VendorLedgerEntry."Entry No.");

      // [WHEN] Save Vendor Balance To Data report on 31.12.15 with Include Unapplied Entries = No
      RunVendorBalanceToDateWithVendor(VendorLedgerEntry."Vendor No.",FALSE,WORKDATE);

      // [THEN] Payment Entry of 150 is printed, -100 is not printed, Total Amount = 150
      VerifyVendorBalanceToDateDoesNotExist(VendorLedgerEntry."Vendor No.",PmtAmount,VendorLedgerEntry.Amount);
    END;

    [Test]
    [HandlerFunctions(ReportHandlerVendorDetailTrialBalance)]
    PROCEDURE VendorDetailTrialBalance_EntryNoCaption@107();
    BEGIN
      // [FEATURE] [Vendor] [Detail Trial Balance]
      // [SCENARIO 379230] REP 304 "Vendor - Detail Trial Balance" prints "Entry No." column caption
      Initialize;

      // [WHEN] Run REP 304 "Vendor - Detail Trial Balance"
      SaveVendorDetailTrialBalReport(LibraryPurchase.CreateVendorNo,FALSE,FALSE,WORKDATE);

      // [THEN] "Entry No." column caption is shown
      LibraryReportDataset.LoadParametersFile;
      LibraryReportDataset.AssertParameterValueExists('EntryNo_VendorLedgerEntryCaption','Entry No.');
    END;

    [Test]
    PROCEDURE ArchivedPurchaseOrderReportWithPricesInclVATAndTwoLines@102();
    VAR
      VATPostingSetup@1005 : ARRAY [2] OF Record 325;
      PurchaseHeader@1002 : Record 38;
      TotalBaseAmount@1003 : Decimal;
      TotalVATAmount@1004 : Decimal;
    BEGIN
      // [FEATURE] [Archive] [Prices Incl. VAT] [Order]
      // [SCENARIO 381574] Report 416 "Archived Purchase Order" correctly prints total vat base/amount in case of "Prices Including VAT" = TRUE and two lines with different VAT Setup
      Initialize;

      // [GIVEN] Purchase order with "Prices Including VAT" = TRUE, two lines with different VAT Setup
      CreatePurchaseOrderWithTwoVATSetupLines(VATPostingSetup,PurchaseHeader,TotalBaseAmount,TotalVATAmount);
      // [GIVEN] Archive purchase order
      ArchivePurchaseDocument(PurchaseHeader);

      // [WHEN] Print archived purchase order (REP 416 "Archived Purchase Order")
      RunArchivedPurchaseOrderReport(PurchaseHeader);

      // [THEN] Report correctly prints total VAT Amount and Total VAT Base Amount
      VerifyArchiveDocExcelTotalVATBaseAmount('AJ',52,TotalVATAmount,TotalBaseAmount);

      // Tear Down
      VATPostingSetup[1].DELETE(TRUE);
      VATPostingSetup[2].DELETE(TRUE);
    END;

    [Test]
    PROCEDURE ArchivedPurchaseOrderReportInCaseOfInvoiceDiscountAmount@186();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      InvDiscountAmount@1003 : Decimal;
    BEGIN
      // [FEATURE] [Archive] [Invoice Discount] [Order]
      // [SCENARIO 201417] Report 416 "Archived Purchase Order" correctly prints totals in case of Invoice Discount
      Initialize;

      // [GIVEN] Purchase Order with "Line Amount" = 1000, "Invoice Discount Amount" = 200, "VAT %" = 25
      CreatePurchaseDocWithItemAndVATSetup(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::Order);
      InvDiscountAmount := ROUND(PurchaseLine.Amount / 3);
      ApplyInvDiscBasedOnAmt(PurchaseHeader,InvDiscountAmount);
      // [GIVEN] Archive the purchase order
      ArchivePurchaseDocument(PurchaseHeader);

      // [WHEN] Print archived purchase order (REP 416 "Archived Purchase Order")
      RunArchivedPurchaseOrderReport(PurchaseHeader);

      // [THEN] Subtotal Amount = 1000, Invoice Discount Amount = -200, Total Excl. VAT = 800, VAT Amount = 200, Total Incl. VAT = 1000
      PurchaseLine.FIND;
      VerifyArchiveOrderExcelTotalsWithDiscount(
        'AJ',49,PurchaseLine."Line Amount",InvDiscountAmount,PurchaseLine."VAT Base Amount",
        PurchaseLine."Amount Including VAT" - PurchaseLine.Amount,PurchaseLine."Amount Including VAT");
    END;

    [Test]
    PROCEDURE ArchivedPurchaseReturnOrderReportInCaseOfInvoiceDiscountAmount@115();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      InvDiscountAmount@1003 : Decimal;
    BEGIN
      // [FEATURE] [Archive] [Invoice Discount] [Return Order]
      // [SCENARIO 201417] Report 417 "Arch.Purch. Return Order" correctly prints totals in case of Invoice Discount
      Initialize;

      // [GIVEN] Purchase Return Order with "Line Amount" = 1000, "Invoice Discount Amount" = 200, "VAT %" = 25
      CreatePurchaseDocWithItemAndVATSetup(PurchaseHeader,PurchaseLine,PurchaseHeader."Document Type"::"Return Order");
      InvDiscountAmount := ROUND(PurchaseLine.Amount / 3);
      ApplyInvDiscBasedOnAmt(PurchaseHeader,InvDiscountAmount);
      // [GIVEN] Archive the purchase return order
      ArchivePurchaseDocument(PurchaseHeader);

      // [WHEN] Print archived purchase rturn order (REP 417 "Arch.Purch. Return Order")
      RunArchivedPurchaseReturnOrderReport(PurchaseHeader);

      // [THEN] Subtotal Amount = 1000, Invoice Discount Amount = -200, Total = 800
      PurchaseLine.FIND;
      VerifyArchiveRetOrderExcelTotalsWithDiscount(
        'AC',49,PurchaseLine."Line Amount",InvDiscountAmount,PurchaseLine."VAT Base Amount");
    END;

    LOCAL PROCEDURE Initialize@8();
    VAR
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      LibraryVariableStorage.Clear;
      CLEAR(LibraryReportValidation);
      LibrarySetupStorage.Restore;

      IF isInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateGeneralLedgerSetup;
      LibraryERMCountryData.CreateGeneralPostingSetupData;
      LibraryERMCountryData.UpdateGeneralPostingSetup;
      LibraryERMCountryData.UpdatePurchasesPayablesSetup;
      LibraryERMCountryData.UpdateLocalData;
      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");

      isInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE ApplyPaymentFromGenJournalLine@55(VAR GenJournalLine@1004 : Record 81;VendorNo@1001 : Code[20];Amount@1002 : Decimal;DocumentNo@1003 : Code[20]);
    BEGIN
      CreateGeneralJournalLine(GenJournalLine,GenJournalLine."Document Type"::Payment,VendorNo,Amount);
      GenJournalLine.VALIDATE("Applies-to Doc. Type",GenJournalLine."Applies-to Doc. Type"::Invoice);
      GenJournalLine.VALIDATE("Applies-to Doc. No.",DocumentNo);
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE ClearGenJournalLine@30(VAR GenJournalBatch@1000 : Record 232);
    BEGIN
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
    END;

    LOCAL PROCEDURE CreateTwoVATPostingSetups@155(VAR VATPostingSetup@1000 : ARRAY [2] OF Record 325);
    VAR
      DummyGLAccount@1001 : Record 15;
    BEGIN
      LibraryERM.CreateVATPostingSetupWithAccounts(
        VATPostingSetup[1],VATPostingSetup[1]."VAT Calculation Type"::"Normal VAT",LibraryRandom.RandIntInRange(10,30));
      VATPostingSetup[1].VALIDATE("VAT %",LibraryRandom.RandIntInRange(10,30));
      VATPostingSetup[1].MODIFY(TRUE);
      DummyGLAccount."VAT Bus. Posting Group" := VATPostingSetup[1]."VAT Bus. Posting Group";
      DummyGLAccount."VAT Prod. Posting Group" := VATPostingSetup[1]."VAT Prod. Posting Group";
      VATPostingSetup[2].GET(
        VATPostingSetup[1]."VAT Bus. Posting Group",
        LibraryERM.CreateRelatedVATPostingSetup(DummyGLAccount));
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithTwoVATSetupLines@135(VAR VATPostingSetup@1004 : ARRAY [2] OF Record 325;VAR PurchaseHeader@1002 : Record 38;VAR TotalBaseAmount@1006 : Decimal;VAR TotalVATAmount@1007 : Decimal);
    VAR
      GLAccount@1003 : Record 15;
      PurchaseLine@1001 : Record 39;
      i@1000 : Integer;
    BEGIN
      CreateTwoVATPostingSetups(VATPostingSetup);
      LibraryPurchase.CreatePurchHeader(
        PurchaseHeader,PurchaseHeader."Document Type"::Order,
        LibraryPurchase.CreateVendorWithVATBusPostingGroup(VATPostingSetup[1]."VAT Bus. Posting Group"));
      PurchaseHeader.VALIDATE("Prices Including VAT",TRUE);
      PurchaseHeader.MODIFY(TRUE);

      FOR i := 1 TO ARRAYLEN(VATPostingSetup) DO BEGIN
        LibraryPurchase.CreatePurchaseLine(
          PurchaseLine,PurchaseHeader,PurchaseLine.Type::"G/L Account",
          LibraryERM.CreateGLAccountWithVATPostingSetup(VATPostingSetup[i],GLAccount."Gen. Posting Type"::Purchase),1);
        PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDecInRange(1000,2000,2));
        PurchaseLine.MODIFY(TRUE);
        TotalBaseAmount += PurchaseLine.Amount;
        TotalVATAmount += PurchaseLine."Amount Including VAT" - PurchaseLine.Amount;
      END;
    END;

    LOCAL PROCEDURE CreatePurchaseDocWithItemAndVATSetup@198(VAR PurchaseHeader@1002 : Record 38;VAR PurchaseLine@1001 : Record 39;DocumentType@1005 : Option);
    VAR
      VATPostingSetup@1004 : Record 325;
      GeneralPostingSetup@1003 : Record 252;
      Item@1000 : Record 27;
    BEGIN
      LibraryERM.CreateVATPostingSetupWithAccounts(
        VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT",LibraryRandom.RandIntInRange(10,30));
      VATPostingSetup.VALIDATE("VAT %",LibraryRandom.RandIntInRange(10,30));
      VATPostingSetup.MODIFY(TRUE);
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      LibraryInventory.CreateItemWithPostingSetup(
        Item,GeneralPostingSetup."Gen. Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");

      CreatePurchaseDocument(
        PurchaseHeader,DocumentType,'',Item."No.",
        LibraryPurchase.CreateVendorWithVATBusPostingGroup(VATPostingSetup."VAT Bus. Posting Group"));
      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndPostPurchaseDocument@76(VAR PurchaseLine@1000 : Record 39;DocumentType@1002 : Option);
    VAR
      PurchaseHeader@1001 : Record 38;
    BEGIN
      CreatePurchaseDocument(PurchaseHeader,DocumentType,'',CreateItem,'');
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);
      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");
    END;

    LOCAL PROCEDURE CreateAndUpdateVendor@59() : Code[20];
    VAR
      PaymentTerms@1002 : Record 3;
      Vendor@1000 : Record 23;
    BEGIN
      LibraryERM.GetDiscountPaymentTerm(PaymentTerms);
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Payment Terms Code",PaymentTerms.Code);
      Vendor.VALIDATE("Invoice Disc. Code",CreateVendorInvoiceDiscount(Vendor."No."));
      Vendor.VALIDATE("Application Method",Vendor."Application Method"::"Apply to Oldest");
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateCurrencyAndExchangeRate@22() : Code[10];
    VAR
      Currency@1001 : Record 4;
      LibraryERM@1000 : Codeunit 131300;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      LibraryERM.CreateRandomExchangeRate(Currency.Code);
      EXIT(Currency.Code);
    END;

    LOCAL PROCEDURE CreateGeneralJournalLine@68(VAR GenJournalLine@1006 : Record 81;DocumentType@1005 : Option;VendorNo@1004 : Code[20];Amount@1001 : Decimal);
    VAR
      GenJournalBatch@1000 : Record 232;
    BEGIN
      ClearGenJournalLine(GenJournalBatch);
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
    END;

    LOCAL PROCEDURE CreateItem@9() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Last Direct Cost",LibraryRandom.RandDec(100,2));   // Using RANDOM value for Last Direct Cost.
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemVendor@23(VAR ItemVendor@1000 : Record 99;ItemNo@1002 : Code[20];VendorNo@1001 : Code[20]);
    BEGIN
      // Using Random value for Lead Time Calculation.
      LibraryInventory.CreateItemVendor(ItemVendor,VendorNo,ItemNo);
      ItemVendor.VALIDATE(
        "Vendor Item No.",LibraryUtility.GenerateRandomCode(ItemVendor.FIELDNO("Vendor Item No."),DATABASE::"Item Vendor"));
      EVALUATE(ItemVendor."Lead Time Calculation",'<' + FORMAT(LibraryRandom.RandInt(5)) + 'D>');
      ItemVendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateItemWithDimension@110(VAR DefaultDimension@1003 : Record 352);
    VAR
      Dimension@1001 : Record 348;
      DimensionValue@1002 : Record 349;
      LibraryDimension@1004 : Codeunit 131001;
    BEGIN
      LibraryDimension.FindDimension(Dimension);
      LibraryDimension.FindDimensionValue(DimensionValue,Dimension.Code);
      LibraryDimension.CreateDefaultDimensionItem(DefaultDimension,CreateItem,DimensionValue."Dimension Code",DimensionValue.Code);
    END;

    LOCAL PROCEDURE CreatePaymentTerms@2() : Code[10];
    VAR
      PaymentTerms@1000 : Record 3;
    BEGIN
      // Take Random Values of Discount %.
      LibraryERM.CreatePaymentTerms(PaymentTerms);
      PaymentTerms.VALIDATE("Discount %",LibraryRandom.RandDec(10,2));
      PaymentTerms.VALIDATE("Calc. Pmt. Disc. on Cr. Memos",TRUE);
      PaymentTerms.MODIFY(TRUE);
      EXIT(PaymentTerms.Code);
    END;

    LOCAL PROCEDURE CreatePostGeneralJournalLine@20(VAR GenJournalLine@1001 : Record 81;VendorNo@1006 : Code[20];CurrencyCode@1003 : Code[10];DateInterval@1004 : Text[10]);
    VAR
      PeriodDifference@1002 : DateFormula;
    BEGIN
      // Create and Post General Journal Lines with Random Amount and Updated Custom Posting Date.
      EVALUATE(PeriodDifference,DateInterval);
      CreateGeneralJournalLine(GenJournalLine,GenJournalLine."Document Type"::Invoice,VendorNo,-LibraryRandom.RandDec(100,2));
      GenJournalLine.VALIDATE("Currency Code",CurrencyCode);
      GenJournalLine.VALIDATE("Posting Date",CALCDATE(PeriodDifference,GenJournalLine."Posting Date"));
      GenJournalLine.MODIFY(TRUE);
      LibraryERM.PostGeneralJnlLine(GenJournalLine);
    END;

    LOCAL PROCEDURE CreatePurchaseDocument@112(VAR PurchaseHeader@1002 : Record 38;DocumentType@1001 : Option;CurrencyCode@1003 : Code[10];ItemNo@1004 : Code[20];VendorNo@1005 : Code[20]) : Decimal;
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      // Create Purchase Document with Random Quantity and Direct Unit Cost for Item.
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,DocumentType,VendorNo);
      PurchaseHeader.VALIDATE("Currency Code",CurrencyCode);
      PurchaseHeader.MODIFY(TRUE);
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandInt(10));  // Use Random Value.
      PurchaseLine.VALIDATE("Direct Unit Cost",LibraryRandom.RandDecInRange(1000,2000,2));
      PurchaseLine.MODIFY(TRUE);
      EXIT(PurchaseLine."Line Amount");
    END;

    LOCAL PROCEDURE CreatePurchaseOrderWithTwoLines@88(VAR VendorNo@1000 : Code[20];VAR ExpectedAmount@1001 : Decimal);
    VAR
      PurchaseHeader@1002 : Record 38;
      PurchaseLine1@1003 : Record 39;
      PurchaseLine2@1004 : Record 39;
      DirectUnitCost@1005 : Decimal;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      VendorNo := PurchaseHeader."Buy-from Vendor No.";

      // Generate a number with Second decimal places is 3 or 4.
      // Outstanding Orders = Line Amount Incl. VAT(##0.00) / (1 + VAT%).
      // Total((##0.00)) = Round(Sum(Line Amount Incl. VAT / (1 + VAT%))
      // Using hardcode of Quantity to let the third decimal places of Line Amount Incl. VAT can be truncated when calculating Outstanding Orders.
      // So when verify Total = Sum(Outstanding Orders) after creating two Purchase Lines, the issue can be Reproduced.
      DirectUnitCost := LibraryRandom.RandDec(100,1) + LibraryRandom.RandIntInRange(3,4) / 100;
      CreatePurchaseLine(PurchaseHeader,PurchaseLine1,DirectUnitCost,1);
      CreatePurchaseLine(PurchaseHeader,PurchaseLine2,DirectUnitCost,1);
      ExpectedAmount := ROUND(PurchaseLine1.Amount * PurchaseLine1."Outstanding Quantity" / PurchaseLine1.Quantity) +
        ROUND(PurchaseLine2.Amount * PurchaseLine2."Outstanding Quantity" / PurchaseLine2.Quantity);
    END;

    LOCAL PROCEDURE CreatePurchaseLine@89(VAR PurchaseHeader@1000 : Record 38;VAR PurchaseLine@1001 : Record 39;DirectUnitCost@1002 : Decimal;Quantity@1003 : Decimal);
    BEGIN
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItem,Quantity);
      PurchaseLine.VALIDATE("Direct Unit Cost",DirectUnitCost);
      PurchaseLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchasePrice@10(VAR PurchasePrice@1001 : Record 7012;VendorNo@1002 : Code[20]);
    VAR
      Item@1000 : Record 27;
      LibraryCosting@1003 : Codeunit 132200;
    BEGIN
      Item.GET(CreateItem);
      LibraryCosting.CreatePurchasePrice(PurchasePrice,VendorNo,Item."No.",WORKDATE,'','',Item."Base Unit of Measure",0);
      PurchasePrice.VALIDATE("Direct Unit Cost",Item."Last Direct Cost");
      PurchasePrice.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePurchaseQuoteWithMultipleLine@96(VAR PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseLine@1003 : Record 39;
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Quote,'');
      PreparePurchLineWithBlankType(PurchaseLine,PurchaseHeader);
      AddPurchLine(PurchaseLine);
      AddPurchLine(PurchaseLine);
    END;

    LOCAL PROCEDURE CreateVendorInvoiceDiscount@57(VendorNo@1001 : Code[20]) : Code[20];
    VAR
      VendorInvoiceDisc@1000 : Record 24;
    BEGIN
      // Take blank Currency and Random Minimum Amount and Integer Discount Percent. Integer Value important for test.
      LibraryERM.CreateInvDiscForVendor(VendorInvoiceDisc,VendorNo,'',LibraryRandom.RandDec(5,2));
      VendorInvoiceDisc.VALIDATE("Discount %",LibraryRandom.RandDec(5,2));
      VendorInvoiceDisc.MODIFY(TRUE);
      EXIT(VendorInvoiceDisc.Code);
    END;

    LOCAL PROCEDURE CreateVendorWithPmtTerms@18() : Code[20];
    VAR
      Vendor@1000 : Record 23;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);
      Vendor.VALIDATE("Payment Terms Code",CreatePaymentTerms);
      Vendor.MODIFY(TRUE);
      EXIT(Vendor."No.");
    END;

    LOCAL PROCEDURE CreateGeneralJournalBatch@15(VAR GenJournalBatch@1000 : Record 232;Type@1002 : Option);
    VAR
      GenJournalTemplate@1001 : Record 80;
    BEGIN
      GenJournalTemplate.SETRANGE(Recurring,FALSE);
      GenJournalTemplate.SETRANGE(Type,Type);
      LibraryERM.FindGenJournalTemplate(GenJournalTemplate);
      LibraryERM.CreateGenJournalBatch(GenJournalBatch,GenJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateGeneralJurnlLine@24(VAR GenJournalLine@1007 : Record 81;GenJournalBatch@1002 : Record 232;PostingDate@1005 : Date;VendorNo@1001 : Code[20];DocumentType@1003 : Option;Amount@1004 : Decimal);
    BEGIN
      LibraryERM.CreateGeneralJnlLine(
        GenJournalLine,GenJournalBatch."Journal Template Name",GenJournalBatch.Name,DocumentType,
        GenJournalLine."Account Type"::Vendor,VendorNo,Amount);
      GenJournalLine.VALIDATE("Document No.",GenJournalBatch.Name + FORMAT(GenJournalLine."Line No."));
      GenJournalLine.VALIDATE("External Document No.",GenJournalLine."Document No.");
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",LibraryERM.CreateGLAccountNo);
      GenJournalLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE AddPurchLine@87(VAR PurchaseLine@1000 : Record 39);
    BEGIN
      PurchaseLine."Line No." := PurchaseLine."Line No." + 10000;
      PurchaseLine.INSERT;
    END;

    LOCAL PROCEDURE ReleasePurchaseOrder@97(VAR PurchaseHeader@1000 : Record 38;DocumentType@1002 : Option;VendorNo@1001 : Code[20]);
    BEGIN
      PurchaseHeader.SETRANGE("Document Type",DocumentType);
      PurchaseHeader.SETRANGE("Buy-from Vendor No.",VendorNo);
      PurchaseHeader.FINDFIRST;
      LibraryPurchase.ReleasePurchaseDocument(PurchaseHeader);
    END;

    LOCAL PROCEDURE ArchivePurchaseDocument@192(PurchaseHeader@1001 : Record 38);
    VAR
      ArchiveManagement@1000 : Codeunit 5063;
    BEGIN
      ArchiveManagement.StorePurchDocument(PurchaseHeader,FALSE);
    END;

    LOCAL PROCEDURE ApplyInvDiscBasedOnAmt@197(VAR PurchaseHeader@1000 : Record 38;InvDiscountAmount@1002 : Decimal);
    VAR
      PurchCalcDiscByType@1001 : Codeunit 66;
    BEGIN
      PurchCalcDiscByType.ApplyInvDiscBasedOnAmt(InvDiscountAmount,PurchaseHeader);
    END;

    LOCAL PROCEDURE FindPurchaseLine@52(VAR PurchaseLine@1000 : Record 39;DocumentType@1002 : Option;DocumentNo@1001 : Code[20]);
    BEGIN
      PurchaseLine.SETRANGE("Document Type",DocumentType);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      PurchaseLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindReceiptLine@69(VAR PurchRcptLine@1000 : Record 121;No@1001 : Code[20]);
    BEGIN
      PurchRcptLine.SETRANGE("No.",No);
      PurchRcptLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindReturnShipmentLine@79(VAR ReturnShipmentLine@1000 : Record 6651;No@1002 : Code[20]);
    BEGIN
      ReturnShipmentLine.SETRANGE("No.",No);
      ReturnShipmentLine.FINDFIRST;
    END;

    LOCAL PROCEDURE FindPurchaseHeaderArchive@179(VAR PurchaseHeaderArchive@1000 : Record 5109;PurchaseHeader@1001 : Record 38);
    BEGIN
      WITH PurchaseHeaderArchive DO BEGIN
        SETRANGE("Document Type",PurchaseHeader."Document Type");
        SETRANGE("No.",PurchaseHeader."No.");
        FINDFIRST;
      END;
    END;

    LOCAL PROCEDURE PreparePurchLineWithBlankType@74(VAR PurchaseLine@1001 : Record 39;PurchaseHeader@1000 : Record 38);
    BEGIN
      PurchaseLine.INIT;
      PurchaseLine."Document Type" := PurchaseHeader."Document Type"::Quote;
      PurchaseLine."Document No." := PurchaseHeader."No.";
      PurchaseLine.Description := PurchaseHeader."No.";
    END;

    LOCAL PROCEDURE SuggestVendorPaymentUsingPage@72(VAR GenJournalLine@1000 : Record 81);
    VAR
      GenJournalBatch@1002 : Record 232;
      SuggestVendorPayments@1001 : Report 393;
    BEGIN
      GenJournalBatch.SETFILTER("No. Series",'<>%1','');
      LibraryERM.SelectGenJnlBatch(GenJournalBatch);
      LibraryERM.ClearGenJournalLines(GenJournalBatch);
      GenJournalLine.INIT;  // INIT is mandatory for Gen. Journal Line to Set the General Template and General Batch Name.
      GenJournalLine.VALIDATE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.VALIDATE("Journal Batch Name",GenJournalBatch.Name);

      COMMIT;  // Commit required to avoid test failure.
      SuggestVendorPayments.SetGenJnlLine(GenJournalLine);
      SuggestVendorPayments.RUN;
    END;

    LOCAL PROCEDURE MockApplyUnapplyScenario@138(VendorNo@1000 : Code[20];ApplnDate1@1001 : Date;UnapplDate@1002 : Date;ApplnDate2@1003 : Date;Amount@1005 : Decimal);
    VAR
      VendorLedgerEntry@1006 : Record 25;
    BEGIN
      MockVendorLedgerEntry(VendorLedgerEntry,VendorNo,Amount,WORKDATE);
      MockDtldVendLedgEntry(VendorNo,VendorLedgerEntry."Entry No.",-Amount,TRUE,ApplnDate1);
      MockDtldVendLedgEntry(VendorNo,VendorLedgerEntry."Entry No.",Amount,TRUE,UnapplDate);
      MockDtldVendLedgEntry(VendorNo,VendorLedgerEntry."Entry No.",-Amount,FALSE,ApplnDate2);
      UpdateOpenOnVendLedgerEntry(VendorLedgerEntry."Entry No.");
    END;

    LOCAL PROCEDURE MockVendorLedgerEntry@104(VAR VendorLedgerEntry@1000 : Record 25;VendorNo@1001 : Code[20];EntryAmount@1002 : Decimal;PostingDate@1003 : Date);
    BEGIN
      WITH VendorLedgerEntry DO BEGIN
        INIT;
        "Entry No." := LibraryUtility.GetNewRecNo(VendorLedgerEntry,FIELDNO("Entry No."));
        "Vendor No." := VendorNo;
        "Posting Date" := PostingDate;
        Amount := EntryAmount;
        Open := TRUE;
        INSERT;
        MockInitialDtldVendLedgEntry(VendorNo,"Entry No.",EntryAmount,PostingDate);
      END;
    END;

    LOCAL PROCEDURE MockInitialDtldVendLedgEntry@53(VendorNo@1001 : Code[20];VendLedgEntryNo@1004 : Integer;EntryAmount@1003 : Decimal;PostingDate@1000 : Date);
    VAR
      DetailedVendorLedgEntry@1002 : Record 380;
    BEGIN
      MockDtldVLE(
        DetailedVendorLedgEntry,
        VendorNo,VendLedgEntryNo,DetailedVendorLedgEntry."Entry Type"::"Initial Entry",EntryAmount,FALSE,PostingDate);
    END;

    LOCAL PROCEDURE MockDtldVendLedgEntry@137(VendorNo@1005 : Code[20];VendLedgEntryNo@1000 : Integer;EntryAmount@1004 : Decimal;UnappliedEntry@1001 : Boolean;PostingDate@1003 : Date);
    VAR
      DetailedVendorLedgEntry@1002 : Record 380;
    BEGIN
      MockDtldVLE(
        DetailedVendorLedgEntry,
        VendorNo,VendLedgEntryNo,DetailedVendorLedgEntry."Entry Type"::Application,EntryAmount,UnappliedEntry,PostingDate);
    END;

    LOCAL PROCEDURE MockDtldVLE@94(VAR DetailedVendorLedgEntry@1007 : Record 380;VendorNo@1005 : Code[20];VendLedgEntryNo@1000 : Integer;EntryType@1006 : Option;EntryAmount@1004 : Decimal;UnappliedEntry@1001 : Boolean;PostingDate@1003 : Date);
    BEGIN
      WITH DetailedVendorLedgEntry DO BEGIN
        INIT;
        "Entry No." := LibraryUtility.GetNewRecNo(DetailedVendorLedgEntry,FIELDNO("Entry No."));
        "Vendor No." := VendorNo;
        "Entry Type" := EntryType;
        "Posting Date" := PostingDate;
        "Vendor Ledger Entry No." := VendLedgEntryNo;
        Amount := EntryAmount;
        Unapplied := UnappliedEntry;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE SaveAgedAccountsPayable@71(No@1013 : Code[20];AgingBy@1007 : Option;PrintAmountLCY@1001 : Boolean;PrintDetails@1004 : Boolean;HeadingType@1005 : Option);
    VAR
      Vendor@1002 : Record 23;
      AgedAccountsPayable@1003 : Report 322;
      DatePeriod@1000 : DateFormula;
    BEGIN
      // Taking Date Period 1M to generate columns with One Month difference and New Page Per Vendor option as FALSE.
      LibraryVariableStorage.Enqueue(AgingBy);
      LibraryVariableStorage.Enqueue(PrintAmountLCY);
      LibraryVariableStorage.Enqueue(PrintDetails);
      LibraryVariableStorage.Enqueue(HeadingType);

      CLEAR(AgedAccountsPayable);
      Vendor.SETRANGE("No.",No);
      AgedAccountsPayable.SETTABLEVIEW(Vendor);
      EVALUATE(DatePeriod,'<1M>');
      AgedAccountsPayable.InitializeRequest(WORKDATE,AgingBy,DatePeriod,PrintAmountLCY,PrintDetails,HeadingType,FALSE);
      AgedAccountsPayable.RUN;
    END;

    LOCAL PROCEDURE SaveAndVerifySummaryAging@29(GenJournalLine@1006 : Record 81;AmountLCY@1009 : Boolean);
    VAR
      DatePeriod@1004 : DateFormula;
    BEGIN
      // Exercise: Save Vendor Summary Aging Report with Currency.
      EVALUATE(DatePeriod,'<' + FORMAT(LibraryRandom.RandInt(5)) + 'M>');
      SaveVendorSummaryAging(GenJournalLine."Account No.",GenJournalLine."Posting Date",FORMAT(DatePeriod),AmountLCY);

      // Verify: Verify Saved Report Data.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('TotalVendAmtDueLCY',GenJournalLine."Amount (LCY)");
      LibraryReportDataset.AssertElementWithValueExists('VendBalanceDueLCY_3_',0);
      LibraryReportDataset.AssertElementWithValueExists('TotalVendAmtDueLCY',GenJournalLine."Amount (LCY)");
    END;

    LOCAL PROCEDURE SaveBlanketPurchaseOrder@63(No@1001 : Code[20];DocumentType@1003 : Option;ShowInternalInfo@1004 : Boolean;LogInteraction@1005 : Boolean);
    VAR
      PurchaseHeader@1000 : Record 38;
      BlanketPurchaseOrder@1002 : Report 410;
    BEGIN
      COMMIT; // Required to run report with request page.
      CLEAR(BlanketPurchaseOrder);
      PurchaseHeader.SETRANGE("Document Type",DocumentType);
      PurchaseHeader.SETRANGE("No.",No);
      BlanketPurchaseOrder.SETTABLEVIEW(PurchaseHeader);
      BlanketPurchaseOrder.InitializeRequest(0,ShowInternalInfo,LogInteraction);  // Passing zero for No. of copies.
      BlanketPurchaseOrder.RUN;
    END;

    LOCAL PROCEDURE SaveOrderDetailReport@27(No@1003 : Code[20];ShowAmountInLCY@1002 : Boolean);
    VAR
      Vendor@1001 : Record 23;
      VendorOrderDetail@1000 : Report 308;
    BEGIN
      COMMIT; // Required to run report with request page.
      CLEAR(VendorOrderDetail);
      Vendor.SETRANGE("No.",No);
      VendorOrderDetail.SETTABLEVIEW(Vendor);
      VendorOrderDetail.InitializeRequest(ShowAmountInLCY,FALSE);
      VendorOrderDetail.RUN;
    END;

    LOCAL PROCEDURE SavePurchaseListReport@40(No@1000 : Code[20];No2@1005 : Code[20];MinAmtLCY@1003 : Decimal;HideAddress@1004 : Boolean);
    VAR
      Vendor@1002 : Record 23;
      VendorPurchaseList@1001 : Report 309;
    BEGIN
      LibraryVariableStorage.Enqueue(MinAmtLCY);
      LibraryVariableStorage.Enqueue(HideAddress);

      COMMIT; // Required to run report with request page.
      CLEAR(VendorPurchaseList);
      Vendor.SETFILTER("No.",'%1|%2',No,No2);
      VendorPurchaseList.SETTABLEVIEW(Vendor);
      VendorPurchaseList.RUN;
    END;

    LOCAL PROCEDURE SavePurchaseReceipt@13(No@1002 : Code[20];ShowInternalInfo@1003 : Boolean;LogInteraction@1004 : Boolean;ShowCorrectionLine@1005 : Boolean);
    VAR
      PurchRcptHeader@1001 : Record 120;
      PurchaseReceipt@1000 : Report 408;
    BEGIN
      COMMIT; // Required to run report with request page.
      CLEAR(PurchaseReceipt);
      PurchRcptHeader.SETRANGE("No.",No);
      PurchaseReceipt.SETTABLEVIEW(PurchRcptHeader);
      PurchaseReceipt.InitializeRequest(0,ShowInternalInfo,LogInteraction,ShowCorrectionLine);
      PurchaseReceipt.RUN;
    END;

    LOCAL PROCEDURE SavePurchaseRetShipment@81(No@1002 : Code[20]);
    VAR
      ReturnShipmentHeader@1001 : Record 6650;
      PurchaseReturnShipment@1000 : Report 6636;
    BEGIN
      COMMIT; // Required to run report with request page.
      CLEAR(PurchaseReturnShipment);
      ReturnShipmentHeader.SETRANGE("No.",No);
      PurchaseReturnShipment.SETTABLEVIEW(ReturnShipmentHeader);
      PurchaseReturnShipment.InitializeRequest(0,FALSE,TRUE,FALSE);
      PurchaseReturnShipment.RUN;
    END;

    LOCAL PROCEDURE SavePurchaseStatistics@66(No@1000 : Code[20];PostingDate@1004 : Date);
    VAR
      Vendor@1001 : Record 23;
      PurchaseStatistics@1002 : Report 312;
      PeriodLength@1003 : DateFormula;
    BEGIN
      COMMIT; // Required to run report with request page.
      EVALUATE(PeriodLength,'<1M>');  // Taking 1 Month as period length to gap Dates with 1 Month. Value required for test.
      CLEAR(PurchaseStatistics);
      Vendor.SETRANGE("No.",No);
      PurchaseStatistics.SETTABLEVIEW(Vendor);
      PurchaseStatistics.InitializeRequest(PeriodLength,PostingDate);
      PurchaseStatistics.RUN;
    END;

    LOCAL PROCEDURE SaveVendorDetailTrialBalReport@19(No@1002 : Code[20];PrintAmountsInLCY@1003 : Boolean;ExcludeBalanceOnly@1004 : Boolean;PostingDate@1005 : Date);
    VAR
      Vendor@1001 : Record 23;
      VendorDetailTrialBalance@1000 : Report 304;
    BEGIN
      COMMIT; // Required to run report with request page.
      CLEAR(VendorDetailTrialBalance);
      Vendor.SETRANGE("No.",No);
      Vendor.SETRANGE("Date Filter",PostingDate);
      VendorDetailTrialBalance.SETTABLEVIEW(Vendor);
      VendorDetailTrialBalance.InitializeRequest(PrintAmountsInLCY,FALSE,ExcludeBalanceOnly);  // Set FALSE for Print Only Per Page.
      VendorDetailTrialBalance.RUN;
    END;

    LOCAL PROCEDURE SaveVendorItemCatalog@80(VendorNo@1000 : Code[20]);
    VAR
      Vendor@1002 : Record 23;
      VendorItemCatalog@1001 : Report 320;
    BEGIN
      COMMIT;
      CLEAR(VendorItemCatalog);
      Vendor.SETRANGE("No.",VendorNo);
      VendorItemCatalog.SETTABLEVIEW(Vendor);
      VendorItemCatalog.RUN;
    END;

    LOCAL PROCEDURE SaveVendorOrderSummary@26(No@1002 : Code[20];PostingDate@1003 : Date;AmountLCY@1005 : Boolean);
    VAR
      Vendor@1001 : Record 23;
      VendorOrderSummary@1000 : Report 307;
    BEGIN
      LibraryVariableStorage.Enqueue(PostingDate);
      LibraryVariableStorage.Enqueue(AmountLCY);

      COMMIT; // Required to run report with request page.
      CLEAR(VendorOrderSummary);
      Vendor.SETRANGE("No.",No);
      VendorOrderSummary.SETTABLEVIEW(Vendor);
      VendorOrderSummary.RUN;
    END;

    LOCAL PROCEDURE SaveVendorPaymentReceipt@119(GenJournalLine@1000 : Record 81);
    VAR
      VendorLedgerEntry@1002 : Record 25;
      VendorPaymentReceipt@1001 : Report 411;
    BEGIN
      COMMIT; // Required to run report with request page.
      CLEAR(VendorPaymentReceipt);
      VendorLedgerEntry.SETRANGE("Document Type",GenJournalLine."Document Type");
      VendorLedgerEntry.SETRANGE("Document No.",GenJournalLine."Document No.");
      VendorPaymentReceipt.SETTABLEVIEW(VendorLedgerEntry);
      VendorPaymentReceipt.RUN;
    END;

    LOCAL PROCEDURE SaveVendorSummaryAging@25(AccountNo@1002 : Code[20];PostingDate@1003 : Date;DatePeriod@1004 : Text[10];AmountLCY@1005 : Boolean);
    VAR
      Vendor@1000 : Record 23;
      VendorSummaryAging@1001 : Report 305;
    BEGIN
      LibraryVariableStorage.Enqueue(PostingDate);
      LibraryVariableStorage.Enqueue(DatePeriod);
      LibraryVariableStorage.Enqueue(AmountLCY);

      COMMIT; // Required to run report with request page.
      CLEAR(VendorSummaryAging);
      Vendor.SETRANGE("No.",AccountNo);
      VendorSummaryAging.SETTABLEVIEW(Vendor);
      VendorSummaryAging.RUN;
    END;

    LOCAL PROCEDURE SaveVendorBalanceToDate@48(PurchaseHeader@1012 : Record 38;AmountLCY@1002 : Boolean;Unapplied@1003 : Boolean);
    VAR
      Vendor@1001 : Record 23;
      VendorBalanceToDate@1004 : Report 321;
    BEGIN
      LibraryVariableStorage.Enqueue(AmountLCY);
      LibraryVariableStorage.Enqueue(Unapplied);

      // Exercise.
      COMMIT; // Required to run report with request page.
      CLEAR(VendorBalanceToDate);
      Vendor.SETRANGE("No.",PurchaseHeader."Buy-from Vendor No.");
      Vendor.SETRANGE("Date Filter",PurchaseHeader."Posting Date");
      VendorBalanceToDate.SETTABLEVIEW(Vendor);
      VendorBalanceToDate.InitializeRequest(AmountLCY,FALSE,Unapplied);
      VendorBalanceToDate.RUN;
    END;

    LOCAL PROCEDURE RunVendorBalanceToDateWithVendor@103(VendorNo@1000 : Code[20];Unapplied@1001 : Boolean;EndingDate@1004 : Date);
    VAR
      Vendor@1002 : Record 23;
      VendorBalanceToDate@1003 : Report 321;
    BEGIN
      COMMIT;
      CLEAR(VendorBalanceToDate);
      Vendor.SETRANGE("No.",VendorNo);
      Vendor.SETRANGE("Date Filter",EndingDate);
      VendorBalanceToDate.SETTABLEVIEW(Vendor);
      VendorBalanceToDate.InitializeRequest(FALSE,FALSE,Unapplied);
      VendorBalanceToDate.RUN;
    END;

    LOCAL PROCEDURE RunArchivedPurchaseOrderReport@187(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseHeaderArchive@1001 : Record 5109;
    BEGIN
      FindPurchaseHeaderArchive(PurchaseHeaderArchive,PurchaseHeader);
      REPORT.SAVEASEXCEL(REPORT::"Archived Purchase Order",LibraryReportValidation.GetFileName,PurchaseHeaderArchive);
    END;

    LOCAL PROCEDURE RunArchivedPurchaseReturnOrderReport@123(PurchaseHeader@1000 : Record 38);
    VAR
      PurchaseHeaderArchive@1001 : Record 5109;
    BEGIN
      FindPurchaseHeaderArchive(PurchaseHeaderArchive,PurchaseHeader);
      REPORT.SAVEASEXCEL(REPORT::"Arch.Purch. Return Order",LibraryReportValidation.GetFileName,PurchaseHeaderArchive);
    END;

    LOCAL PROCEDURE SetupAndPostVendorPmtTolerance@121(VAR GenJournalLine@1004 : Record 81;CurrencyCode@1002 : Code[10]) DocumentNo : Code[20];
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      Amount@1013 : Decimal;
      DiscountAmount@1016 : Decimal;
      PmtTolerance@1019 : Decimal;
    BEGIN
      PmtTolerance := LibraryRandom.RandDec(10,2);  // Using Random value for Payment Tolerance.
      UpdateGeneralLedgerSetup(PmtTolerance);
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,CurrencyCode,CreateItem,CreateVendorWithPmtTerms);
      FindPurchaseLine(PurchaseLine,PurchaseHeader."Document Type",PurchaseHeader."No.");

      // Calculate Payment Tolerance and Payment Discount Amount.
      PmtTolerance := ROUND(PurchaseLine."Amount Including VAT" * PmtTolerance / 100);
      Amount := PurchaseLine."Line Amount" + ROUND(PurchaseLine."Line Amount" * PurchaseLine."VAT %" / 100);
      DiscountAmount := ROUND(Amount * PurchaseHeader."Payment Discount %" / 100);
      Amount := Amount - DiscountAmount;
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);

      // Make Payment for Vendor, Apply it on Invoice and Post it.
      ApplyPaymentFromGenJournalLine(GenJournalLine,PurchaseHeader."Buy-from Vendor No.",Amount - PmtTolerance,DocumentNo);
    END;

    LOCAL PROCEDURE SetupSaveAgedAccountsPayable@90(VAR GenJournalLine@1004 : Record 81;CurrencyCode@1005 : Code[10];AgingBy@1000 : Option;PrintAmountLCY@1001 : Boolean;PrintDetails@1002 : Boolean;HeadingType@1003 : Option);
    BEGIN
      // Setup:  Post Invoice Entry for Vendor. Take Posting Date One Month earlier than WORKDATE to generate data for Report.
      CreatePostGeneralJournalLine(GenJournalLine,CreateAndUpdateVendor,CurrencyCode,'<-1M>');

      // Exercise: Save Aged Accounts Payable Report as per the option selected.
      SaveAgedAccountsPayable(GenJournalLine."Account No.",AgingBy,PrintAmountLCY,PrintDetails,HeadingType);
    END;

    LOCAL PROCEDURE UndoPurchaseReceiptLines@73(No@1000 : Code[20]);
    VAR
      PurchRcptLine@1001 : Record 121;
    BEGIN
      FindReceiptLine(PurchRcptLine,No);
      LibraryPurchase.UndoPurchaseReceiptLine(PurchRcptLine);
    END;

    LOCAL PROCEDURE UndoReturnShipment@78(No@1000 : Code[20]);
    VAR
      ReturnShipmentLine@1002 : Record 6651;
    BEGIN
      FindReturnShipmentLine(ReturnShipmentLine,No);
      LibraryPurchase.UndoReturnShipmentLine(ReturnShipmentLine);
    END;

    LOCAL PROCEDURE UpdateGeneralLedgerSetup@1(PaymentTolerance@1001 : Decimal);
    VAR
      GeneralLedgerSetup@1000 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      GeneralLedgerSetup.VALIDATE("Payment Tolerance %",PaymentTolerance);
      GeneralLedgerSetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateOpenOnVendLedgerEntry@130(EntryNo@1000 : Integer);
    VAR
      VendorLedgerEntry@1001 : Record 25;
    BEGIN
      WITH VendorLedgerEntry DO BEGIN
        GET(EntryNo);
        CALCFIELDS(Amount);
        Open := Amount <> 0;
        MODIFY;
      END;
    END;

    LOCAL PROCEDURE VendorPurchaseList@42(HideAddress@1000 : Boolean);
    VAR
      Vendor@1003 : Record 23;
    BEGIN
      // Setup.
      LibraryPurchase.CreateVendorWithVATRegNo(Vendor);
      Vendor.VALIDATE(Address,Vendor.Name);
      Vendor.VALIDATE("Address 2",Vendor.Address);
      Vendor.MODIFY(TRUE);

      // Exercise: Save Vendor Purchase List Report.
      SavePurchaseListReport(Vendor."No.",Vendor."No.",0,HideAddress);

      // Verify: Verify Vendor Information.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('VendNo',Vendor."No.");
      LibraryReportDataset.AssertElementWithValueExists('VendName',Vendor.Name);
      LibraryReportDataset.AssertElementWithValueExists('VendVATRegNo',Vendor."VAT Registration No.");
      LibraryReportDataset.AssertElementWithValueExists('VendAddr3',Vendor.Address);
    END;

    LOCAL PROCEDURE VendorPurchaseListAmountLCY@106(AmountLCY@1005 : Decimal);
    VAR
      PurchaseHeader@1002 : Record 38;
      Vendor@1000 : Record 23;
      VendorLedgerEntry@1003 : Record 25;
      DocumentNo@1004 : Code[20];
    BEGIN
      // Setup.
      LibraryPurchase.CreateVendor(Vendor);
      CreatePurchaseDocument(PurchaseHeader,PurchaseHeader."Document Type"::Order,'',CreateItem,'');
      DocumentNo := LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,TRUE);
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,DocumentNo);

      // Exercise: Save Purchase List Report for different Amount.
      SavePurchaseListReport(PurchaseHeader."Buy-from Vendor No.",Vendor."No.",AmountLCY,FALSE);

      // Verify: Verify Vendor Purchase (LCY) Amount.
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.AssertElementWithValueExists('AmtPurchLCY',-VendorLedgerEntry."Purchase (LCY)");
      LibraryReportDataset.AssertElementWithValueExists('VendNo',Vendor."No.")
    END;

    LOCAL PROCEDURE VerifyInteractionLogEntry@161(DocumentType@1000 : Option;DocumentNo@1001 : Code[20]);
    VAR
      InteractionLogEntry@1002 : Record 5065;
    BEGIN
      InteractionLogEntry.SETRANGE("Document Type",DocumentType);
      InteractionLogEntry.SETRANGE("Document No.",DocumentNo);
      InteractionLogEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyPurchRtnShipReport@219(PurchaseLine@1000 : Record 39);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      WITH PurchaseLine DO
        LibraryReportDataset.AssertElementWithValueExists('Qty_ReturnShipmentLine',Quantity);
    END;

    LOCAL PROCEDURE VerifyVendorBalanceToDate@108(VendorNo@1012 : Code[20];DocumentNo@1007 : Code[20]);
    VAR
      VendorLedgerEntry@1002 : Record 25;
    BEGIN
      // Verify: Verify Saved Report Data.
      VendorLedgerEntry.SETFILTER("Vendor No.",VendorNo);
      VendorLedgerEntry.SETFILTER("Document No.",DocumentNo);
      VendorLedgerEntry.FINDFIRST;

      LibraryReportDataset.LoadDataSetFile;
      WITH VendorLedgerEntry DO BEGIN
        LibraryReportDataset.AssertElementWithValueExists('DocType_VendLedgEntry3',FORMAT("Document Type"));
        LibraryReportDataset.AssertElementWithValueExists('DocNo_VendLedgEntry3',"Document No.");
      END;
      LibraryReportDataset.AssertElementWithValueExists('StrNoVenGetMaxDtFilter',STRSUBSTNO(BalanceOnCaptionTxt,WORKDATE));
    END;

    LOCAL PROCEDURE VerifyGenJnlLineWithCreditMemo@136(GenJournalLine@1000 : Record 81;Amount@1002 : Decimal);
    VAR
      SuggestVendorGenJnlLine@1001 : Record 81;
    BEGIN
      SuggestVendorGenJnlLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      SuggestVendorGenJnlLine.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      SuggestVendorGenJnlLine.SETRANGE("Applies-to Doc. Type",SuggestVendorGenJnlLine."Applies-to Doc. Type"::"Credit Memo");
      SuggestVendorGenJnlLine.FINDFIRST;
      SuggestVendorGenJnlLine.TESTFIELD(Amount,Amount);
    END;

    LOCAL PROCEDURE VerifyAmountOnVendorOrderSummaryReport@91(VendorNo@1000 : Code[20];ExpectedAmount@1001 : Decimal);
    VAR
      ActualAmount@1002 : Decimal;
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Vendor',VendorNo);
      ActualAmount := LibraryReportDataset.Sum('PurchAmtOnOrder2');
      Assert.AreEqual(ExpectedAmount,ROUND(ActualAmount),STRSUBSTNO(MustBeEqualErr,ExpectedAmount,ROUND(ActualAmount)));
    END;

    LOCAL PROCEDURE VerifyOutstandingOrdersAndTotalOnVendorOrderDetailReport@82(PurchaseLine@1003 : Record 39;VendorNo@1001 : Code[20];ExpectedTotal@1000 : Decimal);
    BEGIN
      WITH LibraryReportDataset DO BEGIN
        LoadDataSetFile;
        SetRange('No_Vendor',VendorNo);
        IF NOT GetNextRow THEN
          ERROR(STRSUBSTNO(NoDatasetRowErr,'No_Vendor',VendorNo));
        AssertCurrentRowValue('PurchOrderAmount',PurchaseLine.Amount);
        GetNextRow;
        PurchaseLine.NEXT;
        AssertCurrentRowValue('PurchOrderAmount',PurchaseLine.Amount);
        AssertElementWithValueExists('TotalAmtCurrTotalBuffer',ExpectedTotal);
      END;
    END;

    LOCAL PROCEDURE VerifyVendorPaymentReceiptReport@125(InvoiceNo@1001 : Code[20];PaymentNo@1002 : Code[20];PaymentAmount@1003 : Decimal);
    VAR
      VendorLedgerEntry@1000 : Record 25;
    BEGIN
      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Invoice,InvoiceNo);
      LibraryReportDataset.LoadDataSetFile;

      LibraryReportDataset.AssertElementWithValueExists('DocNo_VendLedgEntry1',InvoiceNo);
      LibraryReportDataset.AssertElementWithValueExists('NegPmtDiscInvCurrVendLedgEntry1',-VendorLedgerEntry."Pmt. Disc. Rcd.(LCY)");
      LibraryReportDataset.AssertElementWithValueExists('NegPmtTolInvCurrVendLedgEntry1',-VendorLedgerEntry."Pmt. Tolerance (LCY)");

      LibraryReportDataset.AssertElementWithValueExists('NegOriginalAmt_VendLedgEntry',-PaymentAmount);

      LibraryERM.FindVendorLedgerEntry(VendorLedgerEntry,VendorLedgerEntry."Document Type"::Payment,PaymentNo);
      VendorLedgerEntry.CALCFIELDS("Remaining Amt. (LCY)");
      LibraryReportDataset.AssertElementWithValueExists('NegRemainingAmt',VendorLedgerEntry."Remaining Amt. (LCY)");
    END;

    LOCAL PROCEDURE VerifyVendorBalanceToDateTwoEntriesExist@98(VendorNo@1000 : Code[20];PmtAmount@1002 : Decimal;Amount@1001 : Decimal;TotalAmount@1003 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Vendor',VendorNo);
      LibraryReportDataset.AssertElementWithValueExists('OriginalAmt',PmtAmount);
      LibraryReportDataset.AssertElementWithValueExists('OriginalAmt',Amount);
      LibraryReportDataset.AssertElementWithValueExists('CurrTotalBufferTotalAmt',TotalAmount);
    END;

    LOCAL PROCEDURE VerifyVendorBalanceToDateDoesNotExist@117(VendorNo@1000 : Code[20];PmtAmount@1002 : Decimal;Amount@1001 : Decimal);
    BEGIN
      LibraryReportDataset.LoadDataSetFile;
      LibraryReportDataset.SetRange('No_Vendor',VendorNo);
      LibraryReportDataset.AssertElementWithValueExists('OriginalAmt',PmtAmount);
      LibraryReportDataset.AssertElementWithValueNotExist('OriginalAmt',Amount);
      LibraryReportDataset.AssertElementWithValueExists('CurrTotalBufferTotalAmt',PmtAmount);
    END;

    LOCAL PROCEDURE VerifyArchiveDocExcelTotalVATBaseAmount@181(ColumnName@1000 : Text;RowNo@1001 : Integer;TotalVATAmount@1002 : Decimal;TotalBaseAmount@1003 : Decimal);
    BEGIN
      LibraryReportValidation.OpenExcelFile;
      LibraryReportValidation.VerifyCellValueByRef(ColumnName,RowNo,1,LibraryReportValidation.FormatDecimalValue(TotalVATAmount));
      LibraryReportValidation.VerifyCellValueByRef(ColumnName,RowNo + 1,1,LibraryReportValidation.FormatDecimalValue(TotalBaseAmount));
    END;

    LOCAL PROCEDURE VerifyArchiveOrderExcelTotalsWithDiscount@105(ColumnName@1001 : Text;RowNo@1000 : Integer;Amount@1002 : Decimal;InvDicountAmount@1003 : Decimal;ExclVATAmount@1004 : Decimal;VATAmount@1005 : Decimal;InclVATAmount@1006 : Decimal);
    BEGIN
      LibraryReportValidation.OpenExcelFile;
      LibraryReportValidation.VerifyCellValueByRef(ColumnName,RowNo,1,LibraryReportValidation.FormatDecimalValue(Amount));
      LibraryReportValidation.VerifyCellValueByRef(
        ColumnName,RowNo + 1,1,LibraryReportValidation.FormatDecimalValue(-InvDicountAmount));
      LibraryReportValidation.VerifyCellValueByRef(ColumnName,RowNo + 2,1,LibraryReportValidation.FormatDecimalValue(ExclVATAmount));
      LibraryReportValidation.VerifyCellValueByRef(ColumnName,RowNo + 3,1,LibraryReportValidation.FormatDecimalValue(VATAmount));
      LibraryReportValidation.VerifyCellValueByRef(ColumnName,RowNo + 4,1,LibraryReportValidation.FormatDecimalValue(InclVATAmount));
    END;

    LOCAL PROCEDURE VerifyArchiveRetOrderExcelTotalsWithDiscount@129(ColumnName@1001 : Text;RowNo@1000 : Integer;Amount@1002 : Decimal;InvDicountAmount@1003 : Decimal;ExclVATAmount@1004 : Decimal);
    BEGIN
      LibraryReportValidation.OpenExcelFile;
      LibraryReportValidation.VerifyCellValueByRef(ColumnName,RowNo,1,LibraryReportValidation.FormatDecimalValue(Amount));
      LibraryReportValidation.VerifyCellValueByRef(
        ColumnName,RowNo + 1,1,LibraryReportValidation.FormatDecimalValue(-InvDicountAmount));
      LibraryReportValidation.VerifyCellValueByRef(ColumnName,RowNo + 2,1,LibraryReportValidation.FormatDecimalValue(ExclVATAmount));
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmHandler@65(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    VAR
      ExpectedMessage@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(ExpectedMessage);  // Dequeue variable.
      Assert.IsTrue(STRPOS(Question,ExpectedMessage) > 0,Question);
      Reply := TRUE;
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerPurchaseReceipt@77(VAR PurchaseReceipt@1000 : TestRequestPage 408);
    BEGIN
      PurchaseReceipt.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerVendorPaymentReceipt@116(VAR VendorPaymentReceipt@1000 : TestRequestPage 411);
    BEGIN
      VendorPaymentReceipt.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerVendorSummaryAging@165(VAR VendorSummaryAging@1000 : TestRequestPage 305);
    VAR
      StartingDate@1003 : Variant;
      AmountLCY@1001 : Variant;
      DatePeriod@1002 : Variant;
      DatePeriodFormula@1004 : DateFormula;
    BEGIN
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(DatePeriod);
      EVALUATE(DatePeriodFormula,DatePeriod);
      LibraryVariableStorage.Dequeue(AmountLCY);
      VendorSummaryAging.Control1.SETVALUE(StartingDate);
      VendorSummaryAging.Control2.SETVALUE(DatePeriodFormula);
      VendorSummaryAging.Control3.SETVALUE(AmountLCY);
      VendorSummaryAging.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerVendorOrderSummary@206(VAR VendorOrderSummary@1000 : TestRequestPage 307);
    VAR
      StartingDate@1002 : Variant;
      AmountLCY@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(StartingDate);
      LibraryVariableStorage.Dequeue(AmountLCY);
      VendorOrderSummary.StartingDate.SETVALUE(StartingDate);
      VendorOrderSummary.AmountsinLCY.SETVALUE(AmountLCY);
      VendorOrderSummary.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerVendorOrderDetail@253(VAR VendorOrderDetail@1000 : TestRequestPage 308);
    BEGIN
      VendorOrderDetail.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerVendorDetailTrialBalance@207(VAR VendorDetailTrialBalance@1000 : TestRequestPage 304);
    BEGIN
      VendorDetailTrialBalance.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerVendorItemCatalog@213(VAR VendorItemCatalog@1000 : TestRequestPage 320);
    BEGIN
      VendorItemCatalog.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerVendorPurchaseList@211(VAR VendorPurchaseList@1000 : TestRequestPage 309);
    VAR
      MinAmtLCY@1002 : Variant;
      HideAddress@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(MinAmtLCY);
      LibraryVariableStorage.Dequeue(HideAddress);
      VendorPurchaseList.Control3.SETVALUE(MinAmtLCY);
      VendorPurchaseList.Control5.SETVALUE(HideAddress);
      VendorPurchaseList.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerVendorBalanceToDate@216(VAR VendorBalanceToDate@1000 : TestRequestPage 321);
    VAR
      AmountLCY@1001 : Variant;
      Unapplied@1002 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(AmountLCY);
      LibraryVariableStorage.Dequeue(Unapplied);
      VendorBalanceToDate.ShowAmountsInLCY.SETVALUE(AmountLCY);
      VendorBalanceToDate.Control4.SETVALUE(Unapplied);
      VendorBalanceToDate.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerVendorPurchaseStatistics@217(VAR PurchaseStatistics@1000 : TestRequestPage 312);
    BEGIN
      PurchaseStatistics.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerAgedAccountPayable@220(VAR AgedAccountsPayable@1000 : TestRequestPage 322);
    VAR
      AgingBy@1004 : Variant;
      PrintAmountLCY@1003 : Variant;
      PrintDetails@1002 : Variant;
      HeadingType@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(AgingBy);
      LibraryVariableStorage.Dequeue(PrintAmountLCY);
      LibraryVariableStorage.Dequeue(PrintDetails);
      LibraryVariableStorage.Dequeue(HeadingType);
      AgedAccountsPayable.Control3.SETVALUE(AgingBy);
      AgedAccountsPayable.Control9.SETVALUE(PrintAmountLCY);
      AgedAccountsPayable.Control11.SETVALUE(PrintDetails);
      AgedAccountsPayable.Control15.SETVALUE(HeadingType);
      AgedAccountsPayable.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerBlanketPurchaseOrder@223(VAR BlanketPurchaseOrder@1000 : TestRequestPage 410);
    BEGIN
      BlanketPurchaseOrder.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE ReportHandlerPurchaseReturnShipment@226(VAR PurchaseReturnShipment@1000 : TestRequestPage 6636);
    BEGIN
      PurchaseReturnShipment.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE SuggestVendorPaymentsWithAvailableAmtRequestPageHandler@178(VAR SuggestVendorPayments@1000 : TestRequestPage 393);
    VAR
      VendorNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(VendorNo);
      SuggestVendorPayments.Vendor.SETFILTER("No.",VendorNo);
      SuggestVendorPayments.LastPaymentDate.SETVALUE(WORKDATE);
      SuggestVendorPayments.OK.INVOKE;
    END;

    [RequestPageHandler]
    PROCEDURE PurchaseQuoteRequestPageHandler@92(VAR PurchaseQuote@1000 : TestRequestPage 404);
    VAR
      PurchaseHeaderNo@1001 : Variant;
    BEGIN
      LibraryVariableStorage.Dequeue(PurchaseHeaderNo);
      LibraryReportValidation.SetFileName(PurchaseHeaderNo);
      PurchaseQuote.SAVEASEXCEL(LibraryReportValidation.GetFileName);
    END;

    [RequestPageHandler]
    PROCEDURE RHVendorBalanceToDate@37(VAR VendorBalanceToDate@1000 : TestRequestPage 321);
    BEGIN
      VendorBalanceToDate.SAVEASXML(LibraryReportDataset.GetParametersFileName,LibraryReportDataset.GetFileName);
    END;

    BEGIN
    {
      // [FEATURE] [Reports] [Purchase]
      Test - Various Purchase Reports.
       1. Check Purchase Receipt with No Option Selected.
       2. Check Purchase Receipt with Show Internal Information Option.
       3. Check Purchase Receipt with Log Entry Option.
       4. Check Vendor Payment Receipt Report.
       5. Check Vendor Summary Aging Report without any Option Selected.
       6. Check Vendor Summary Aging Report with Posting Date.
       7. Check Vendor Summary Aging Report with Period Length.
       8. Check Vendor Summary Aging Report with Currency.
       9. Check Vendor Order Summary Report with out any Option Selected.
      10. Check Vendor Order Summary Report with Posting Date.
      11. Check Vendor Order Summary Report with Currency.
      12. Check Vendor Order Detail Report with all available Options.
      13. Check Vendor Detail Trial Balance Report with all available Options.
      14. Check Vendor Item Catalog Report with all available Options.
      15. Check Vendor Purchase List Report with all available Options.
      16. Check Vendor Balance To Date without any option selected.
      17. Check Vendor Balance To Date with Vendor No.
      18. Check Vendor Balance To Date with Currency.
      19. Check Vendor Balance To Date with Unapplied Entries.
      20. Check Purchase Statistics Report with different options.
      21. Check Aged Accounts Payable Report with different options.
      22. Check Blanket Purchase Order Report with different options.
      23. Verify Purchase Receipt Report after undo Receipt with Show Correction Lines.
      24. Verify Purchase Return Shipment Report after undo Return Shipment with Show Correction Lines.
      25. Verify that general journal line exists with credit memo after running the suggest vendor payment report.
      26. Verify that purchase quote report shows line where type is blank.
      27. Check Vendor Order Summary Report with Amount of a duration.
      28. Check the Amount of a duration on Vendor Order Summary Report for Released Orders.
      29. Check the Outstanding Orders and Total on Vendor Order Detail Report for Released Orders.

      Covers Test Cases for WI - 245276
      ---------------------------------------------------------------------------
      Test Function Name                                                  TFS ID
      ---------------------------------------------------------------------------
      PurchaseReceiptNoOption,PurchaseReceiptInternalInfo
      PurchaseReceiptLogEntry                                             139348
      VendorPaymentReceipt                                                139397

      Covers Test Cases for WI - 250543
      ---------------------------------------------------------------------------
      Test Function Name                                                  TFS ID
      ---------------------------------------------------------------------------
      SummaryAgingNoOption,SummaryAgingPostingDate
      SummaryAgingPeriodLength,SummaryAgingCurrency                       139333
      OrderSummaryNoOption,OrderSummaryPostingDate
      OrderSummaryCurrency                                                139334

      Covers Test Cases for WI - 245238
      ---------------------------------------------------------------------------
      Test Function Name                                                  TFS ID
      ---------------------------------------------------------------------------
      OrderDetailReport,OrderDetailReportAmountLCY                        139335
      DetailTrialBalance,DetailTrialBalanceAmountLCY
      DetailTrialBalanceExclBalance                                       139332
      VendorItemCatalog                                                   139337
      PurchaseListShowAddress,PurchaseListHideAddress
      PurchaseListAmountLCY,PurchaseListIncludeZeroAmount                 139336

      Covers Test Cases for WI - 250544
      ---------------------------------------------------------------------------
      Test Function Name                                                  TFS ID
      ---------------------------------------------------------------------------
      VendorBalanceToDateNoOption,VendorBalanceToDateVendorNo
      VendorBalanceToDateAmountLCY,VendorBalanceToDateUnapplied           139338

      Covers Test Cases for WI - 250556
      --------------------------------------------------------------------------------------------------
      Test Function Name                                                                    TFS ID
      --------------------------------------------------------------------------------------------------
      PurchaseStatisticsError, PurchaseStatistics, PurchaseStatisticsInvDiscount            139392
      PurchaseStatisticsPmtDiscount, PurchaseStatisticsPmtTolerance                         139392
      AgedAccountsPayableDueDate, AgedAccountsPayablePostingDate                            139395
      AgedAccountsPayableDocDate, AgedAccountsPayableAmountLCY                              139395
      AgedAccountsPayablePrintDetail, AgedAccountsPayableHeadingType                        139395
      BlanketPurchaseOrder, BlanketPurchaseOrderDimension, BlanketPurchaseOrderLogEntry     139396

      Covers Test Cases for WI - 298794
      --------------------------------------------------------------------------------------------------
      Test Function Name                                                                    TFS ID
      --------------------------------------------------------------------------------------------------
      UndoPurchReceiptReportWithCorrectionLine                                               128292

      Covers Test Cases for WI - 308887
      --------------------------------------------------------------------------------------------------
      Test Function Name                                                                    TFS ID
      --------------------------------------------------------------------------------------------------
      UndoPurchRetShptReportWithCorrectionLine                                               128292

      BUG ID: 7964
      --------------------------------------------------------------------------------------------------------
      Test Function Name                                                                              TFS ID
      --------------------------------------------------------------------------------------------------------
      SuggestVendorPaymentforCreditMemoLine

      BUG ID: 48611
      --------------------------------------------------------------------------------------------------------
      Test Function Name                                                                              TFS ID
      --------------------------------------------------------------------------------------------------------
      CheckLinesonPurchaseQuoteReport

      Covers Test cases for Sicily Code Defect
      --------------------------------------------------------------------------------------------------
      Test Function Name                                                                    TFS ID
      --------------------------------------------------------------------------------------------------
      VendorOrderSummaryWithDurationAmount                                                  52695

      Covers Test cases for Sicily Code Defect
      --------------------------------------------------------------------------------------------------
      Test Function Name                                                                    TFS ID
      --------------------------------------------------------------------------------------------------
      VendorOrderSummaryWithReleasedDocument                                                55687
      VendorOrderDetailWithReleasedDocument                                                 55687
    }
    END.
  }
}

