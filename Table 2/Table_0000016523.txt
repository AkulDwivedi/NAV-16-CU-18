OBJECT Table 16523 VAT Settlement
{
  OBJECT-PROPERTIES
  {
    Date=23-09-13;
    Time=12:00:00 PM;
    Version List=NAVIN7.10;
  }
  PROPERTIES
  {
    DataCaptionFields=State Code,Starting Date;
    OnInsert=BEGIN
               CalcOutputVAT;
               CheckSettled;
             END;

    OnModify=BEGIN
               TESTFIELD(Settlement,FALSE);
               TESTFIELD(Type,Type::Original);
               CalcOutputVAT;
               CheckSettled;
             END;

    CaptionML=[ENU=VAT Settlement;
               ENN=VAT Settlement];
    LookupPageID=Page16544;
  }
  FIELDS
  {
    { 1   ;   ;State Code          ;Code10        ;TableRelation=State;
                                                   CaptionML=[ENU=State Code;
                                                              ENN=State Code] }
    { 2   ;   ;Starting Date       ;Date          ;OnValidate=VAR
                                                                TaxPeriod@1500000 : DateFormula;
                                                              BEGIN
                                                                TESTFIELD("State Code");
                                                                IF "Starting Date" = 0D THEN BEGIN
                                                                  "Ending Date" := 0D;
                                                                  EXIT;
                                                                END;

                                                                IF Type = Type::Original THEN BEGIN
                                                                  VATSettlement.SETRANGE("State Code","State Code");
                                                                  VATSettlement.SETRANGE(Settlement,TRUE);
                                                                  VATSettlement.SETRANGE(Type,Type::Original);
                                                                  IF VATSettlement.FIND('+') THEN
                                                                    TESTFIELD("Starting Date",VATSettlement."Ending Date" + 1);
                                                                END;

                                                                State2.GET("State Code");
                                                                TaxJurisdiction.SETRANGE("State Code","State Code");
                                                                TaxJurisdiction.SETRANGE("Tax Type",TaxJurisdiction."Tax Type"::VAT);
                                                                IF TaxJurisdiction.FIND('-') THEN BEGIN
                                                                  TaxPeriod := State2."Tax Period";
                                                                  REPEAT
                                                                    State2.TESTFIELD("Tax Period");
                                                                    State2.TESTFIELD("Tax Period",TaxPeriod);
                                                                  UNTIL TaxJurisdiction.NEXT = 0;
                                                                END;
                                                                State2.TESTFIELD("Tax Period");
                                                                "Ending Date" := CALCDATE(State2."Tax Period",DMY2DATE(1,DATE2DMY("Starting Date",2),DATE2DMY("Starting Date",3))) - 1;
                                                              END;

                                                   CaptionML=[ENU=Starting Date;
                                                              ENN=Starting Date];
                                                   NotBlank=Yes }
    { 3   ;   ;Ending Date         ;Date          ;CaptionML=[ENU=Ending Date;
                                                              ENN=Ending Date];
                                                   Editable=No }
    { 4   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENN=Type];
                                                   OptionCaptionML=[ENU=Original,Revised;
                                                                    ENN=Original,Revised];
                                                   OptionString=Original,Revised;
                                                   Editable=No }
    { 5   ;   ;Revision No.        ;Integer       ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::Revised);
                                                              END;

                                                   CaptionML=[ENU=Revision No.;
                                                              ENN=Revision No.];
                                                   BlankZero=Yes }
    { 6   ;   ;Output VAT Amount   ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Balance Amount","Output VAT Amount" + "VAT Adjustment Amount" + "Input VAT Credit (Domestic)" +
                                                                  "VAT Receivable Amount");
                                                              END;

                                                   CaptionML=[ENU=Output VAT Amount;
                                                              ENN=Output VAT Amount] }
    { 7   ;   ;VAT Adjustment Amount;Decimal      ;OnValidate=BEGIN
                                                                VALIDATE("Balance Amount","Output VAT Amount" + "VAT Adjustment Amount" + "Input VAT Credit (Domestic)" +
                                                                  "VAT Receivable Amount");
                                                              END;

                                                   CaptionML=[ENU=VAT Adjustment Amount;
                                                              ENN=VAT Adjustment Amount] }
    { 8   ;   ;Input VAT Credit (Domestic);Decimal;OnValidate=BEGIN
                                                                VALIDATE("Balance Amount","Output VAT Amount" + "VAT Adjustment Amount" + "Input VAT Credit (Domestic)" +
                                                                  "VAT Receivable Amount");
                                                              END;

                                                   CaptionML=[ENU=Input VAT Credit (Domestic);
                                                              ENN=Input VAT Credit (Domestic)] }
    { 9   ;   ;VAT Receivable Amount;Decimal      ;OnValidate=BEGIN
                                                                VALIDATE("Balance Amount","Output VAT Amount" + "VAT Adjustment Amount" + "Input VAT Credit (Domestic)" +
                                                                  "VAT Receivable Amount");
                                                              END;

                                                   CaptionML=[ENU=VAT Receivable Amount;
                                                              ENN=VAT Receivable Amount] }
    { 10  ;   ;VAT Prev. Period Amount;Decimal    ;OnValidate=BEGIN
                                                                VALIDATE("VAT Prev. Period C/F Amount","VAT Prev. Period Amount" -
                                                                  ("VAT Prev. Period Refund Amount" + "VAT Prev. Period Setoff Amount" +
                                                                   "CST Prev. Period Setoff Amount"));
                                                              END;

                                                   CaptionML=[ENU=VAT Prev. Period Amount;
                                                              ENN=VAT Prev. Period Amount] }
    { 12  ;   ;VAT Prev. Period Refund Amount;Decimal;
                                                   OnValidate=VAR
                                                                TmpDate@1500002 : Date;
                                                                TmpAmount@1500000 : Decimal;
                                                                InitAmount@1500001 : Boolean;
                                                              BEGIN
                                                                State2.GET("State Code");
                                                                TaxJurisdiction.SETRANGE("Tax Type",TaxJurisdiction."Tax Type"::VAT);
                                                                TaxJurisdiction.SETRANGE("State Code","State Code");
                                                                TaxJurisdiction.FIND('-');
                                                                State2.TESTFIELD("Specified Period for Refund");

                                                                TmpDate :=
                                                                  CALCDATE(
                                                                    STRSUBSTNO('-%1',State2."Specified Period for Refund"),
                                                                    "Starting Date");
                                                                VATSettlement.SETRANGE("State Code","State Code");
                                                                // VATSettlement.SETFILTER("Starting Date",'>=%1', TmpDate);
                                                                // VATSettlement.SETFILTER("Starting Date",'<%1',"Starting Date");
                                                                VATSettlement.SETFILTER("Starting Date",'>=%1&<%2',TmpDate,"Starting Date");
                                                                IF VATSettlement.FIND('-') THEN
                                                                  // IF VATSettlement."Starting Date" <> TmpDate THEN BEGIN
                                                                  // TmpAmount := 0;
                                                                  // InitAmount := TRUE;
                                                                  // END;

                                                                  REPEAT
                                                                    IF ((VATSettlement."VAT Prev. Period C/F Amount" + VATSettlement."VAT Payable C/F Amount") < TmpAmount)
                                                                       OR (NOT InitAmount)
                                                                    THEN BEGIN
                                                                      TmpAmount := (VATSettlement."VAT Prev. Period C/F Amount" + VATSettlement."VAT Payable C/F Amount");
                                                                      InitAmount := TRUE;
                                                                    END
                                                                  UNTIL VATSettlement.NEXT = 0;

                                                                IF "VAT Prev. Period Refund Amount" > TmpAmount THEN
                                                                  ERROR(Text16500,TmpAmount);

                                                                VALIDATE("VAT Prev. Period C/F Amount","VAT Prev. Period Amount" -
                                                                  ("VAT Prev. Period Refund Amount" + "VAT Prev. Period Setoff Amount" +
                                                                   "CST Prev. Period Setoff Amount"));
                                                              END;

                                                   CaptionML=[ENU=VAT Prev. Period Refund Amount;
                                                              ENN=VAT Prev. Period Refund Amount] }
    { 14  ;   ;VAT Prev. Period Setoff Amount;Decimal;
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Payable Amount","Balance Amount" - "VAT Prev. Period Setoff Amount");
                                                                VALIDATE("VAT Prev. Period C/F Amount","VAT Prev. Period Amount" -
                                                                  ("VAT Prev. Period Refund Amount" + "VAT Prev. Period Setoff Amount" +
                                                                   "CST Prev. Period Setoff Amount"));
                                                              END;

                                                   CaptionML=[ENU=VAT Prev. Period Setoff Amount;
                                                              ENN=VAT Prev. Period Setoff Amount] }
    { 15  ;   ;Balance Amount      ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("VAT Payable Amount","Balance Amount" - "VAT Prev. Period Setoff Amount");
                                                              END;

                                                   CaptionML=[ENU=Balance Amount;
                                                              ENN=Balance Amount] }
    { 16  ;   ;VAT Payable Amount  ;Decimal       ;OnValidate=BEGIN
                                                                IF "VAT Payable Amount" < 0 THEN
                                                                  VALIDATE("VAT Payable C/F Amount",-"VAT Payable Amount" -
                                                                    ("VAT Payable Refund Amount" + "VAT Payable Setoff Amount"))
                                                                ELSE
                                                                  VALIDATE("VAT Payable C/F Amount",0);

                                                                IF "VAT Payable Amount" > 0 THEN
                                                                  "Net VAT Payable Amount" := "VAT Payable Amount" - "VAT ITC Exp. Payable Setoff"
                                                                ELSE
                                                                  "Net VAT Payable Amount" := 0;
                                                              END;

                                                   CaptionML=[ENU=VAT Payable Amount;
                                                              ENN=VAT Payable Amount] }
    { 18  ;   ;VAT Payable Refund Amount;Decimal  ;OnValidate=VAR
                                                                TmpDate@1500002 : Date;
                                                                TmpAmount@1500000 : Decimal;
                                                                InitAmount@1500001 : Boolean;
                                                              BEGIN
                                                                TaxJurisdiction.SETRANGE("Tax Type",TaxJurisdiction."Tax Type"::VAT);
                                                                TaxJurisdiction.SETRANGE("State Code","State Code");
                                                                TaxJurisdiction.FIND('-');
                                                                State2.GET("State Code");
                                                                State2.TESTFIELD("Specified Period for Refund");
                                                                TmpDate :=
                                                                  CALCDATE(
                                                                    STRSUBSTNO('-%1',State2."Specified Period for Refund"),
                                                                    "Ending Date");

                                                                // VATSettlement.SETRANGE("State Code","State Code");
                                                                // VATSettlement.SETFILTER("Starting Date",'>=%1',TmpDate);
                                                                // VATSettlement.SETFILTER("Starting Date",'<%1',CALCDATE(STRSUBSTNO('-%1',State2."Tax Period"),"Ending Date"));
                                                                // IF VATSettlement.FIND('-') THEN BEGIN
                                                                // IF TmpDate <> VATSettlement."Starting Date" THEN BEGIN
                                                                // TmpAmount := 0;
                                                                // InitAmount := TRUE;
                                                                // END;
                                                                // REPEAT
                                                                // IF ((VATSettlement."VAT Prev. Period C/F Amount" + VATSettlement."VAT Payable C/F Amount") < TmpAmount)
                                                                //  OR (NOT InitAmount) THEN BEGIN
                                                                //  TmpAmount := (VATSettlement."VAT Prev. Period C/F Amount" + VATSettlement."VAT Payable C/F Amount");
                                                                //  InitAmount := TRUE;
                                                                // END;
                                                                // UNTIL VATSettlement.NEXT = 0;
                                                                // END;

                                                                VATSettlement.SETRANGE("State Code","State Code");
                                                                VATSettlement.SETFILTER("Ending Date",'>=%1&<=%2',TmpDate,"Ending Date");
                                                                IF VATSettlement.FIND('-') THEN
                                                                  // IF TmpDate <> VATSettlement."Starting Date" THEN BEGIN
                                                                  // TmpAmount := 0;
                                                                  // InitAmount := TRUE;
                                                                  // END;
                                                                  REPEAT
                                                                    IF ((VATSettlement."VAT Prev. Period C/F Amount" + VATSettlement."VAT Payable C/F Amount") < TmpAmount)
                                                                       OR (NOT InitAmount)
                                                                    THEN BEGIN
                                                                      TmpAmount := (VATSettlement."VAT Prev. Period C/F Amount" + VATSettlement."VAT Payable C/F Amount");
                                                                      InitAmount := TRUE;
                                                                    END;
                                                                  UNTIL VATSettlement.NEXT = 0;

                                                                IF ("VAT Prev. Period C/F Amount" + -"VAT Payable Amount") < TmpAmount THEN
                                                                  TmpAmount := ("VAT Prev. Period C/F Amount" + -"VAT Payable Amount");

                                                                IF "VAT Payable Refund Amount" > TmpAmount THEN
                                                                  ERROR(Text16500,TmpAmount);

                                                                IF "VAT Payable Amount" < 0 THEN
                                                                  VALIDATE("VAT Payable C/F Amount",-"VAT Payable Amount" -
                                                                    ("VAT Payable Refund Amount" + "VAT Payable Setoff Amount"))
                                                                ELSE
                                                                  VALIDATE("VAT Payable C/F Amount",0);
                                                              END;

                                                   CaptionML=[ENU=VAT Payable Refund Amount;
                                                              ENN=VAT Payable Refund Amount] }
    { 20  ;   ;VAT Payable Setoff Amount;Decimal  ;OnValidate=BEGIN
                                                                IF "VAT Payable Amount" < 0 THEN
                                                                  VALIDATE("VAT Payable C/F Amount",-"VAT Payable Amount" -
                                                                    ("VAT Payable Refund Amount" + "VAT Payable Setoff Amount"))
                                                                ELSE
                                                                  VALIDATE("VAT Payable C/F Amount",0);
                                                                "Net CST Payable Amount" := "CST Payable Amount" - "CST ITC Exp. Payable Setoff" - "VAT Payable Setoff Amount" -
                                                                  "CST Prev. Period Setoff Amount";
                                                              END;

                                                   CaptionML=[ENU=VAT Payable Setoff Amount;
                                                              ENN=VAT Payable Setoff Amount] }
    { 21  ;   ;VAT Prev. Period C/F Amount;Decimal;CaptionML=[ENU=VAT Prev. Period C/F Amount;
                                                              ENN=VAT Prev. Period C/F Amount] }
    { 22  ;   ;VAT Payable B/F Amount;Decimal     ;OnValidate=BEGIN
                                                                IF "VAT Payable Amount" < 0 THEN
                                                                  VALIDATE("VAT Payable C/F Amount",-"VAT Payable Amount" -
                                                                    ("VAT Payable Refund Amount" + "VAT Payable Setoff Amount"))
                                                                ELSE
                                                                  VALIDATE("VAT Payable C/F Amount",0);
                                                              END;

                                                   CaptionML=[ENU=VAT Payable B/F Amount;
                                                              ENN=VAT Payable B/F Amount] }
    { 23  ;   ;VAT Payable C/F Amount;Decimal     ;CaptionML=[ENU=VAT Payable C/F Amount;
                                                              ENN=VAT Payable C/F Amount] }
    { 24  ;   ;CST Payable Amount  ;Decimal       ;OnValidate=BEGIN
                                                                "Net CST Payable Amount" := "CST Payable Amount" - "CST ITC Exp. Payable Setoff" - "VAT Payable Setoff Amount" -
                                                                  "CST Prev. Period Setoff Amount";
                                                              END;

                                                   CaptionML=[ENU=CST Payable Amount;
                                                              ENN=CST Payable Amount] }
    { 25  ;   ;Input VAT Credit (Exports);Decimal ;OnValidate=BEGIN
                                                                // "VAT Input Cr. Exp. C/F Amount" := "Input VAT Credit (Exports)" -
                                                                // "VAT Input Cr. Exp. Refund" -
                                                                // "VAT ITC Exp. Payable Setoff" -
                                                                // "CST ITC Exp. Payable Setoff";

                                                                "VAT Input Cr. Exp. C/F Amount" := "Input VAT Credit (Exports)" + "VAT Input Cr. Exp. B/F Amount" -
                                                                  "VAT Input Cr. Exp. Refund" -
                                                                  "VAT ITC Exp. Payable Setoff" -
                                                                  "CST ITC Exp. Payable Setoff";
                                                              END;

                                                   CaptionML=[ENU=Input VAT Credit (Exports);
                                                              ENN=Input VAT Credit (Exports)] }
    { 26  ;   ;VAT Input Cr. Exp. Refund;Decimal  ;OnValidate=BEGIN
                                                                // "VAT Input Cr. Exp. C/F Amount" := "Input VAT Credit (Exports)" -
                                                                // "VAT Input Cr. Exp. Refund" -
                                                                // "VAT ITC Exp. Payable Setoff" -
                                                                // "CST ITC Exp. Payable Setoff";

                                                                "VAT Input Cr. Exp. C/F Amount" := "Input VAT Credit (Exports)" + "VAT Input Cr. Exp. B/F Amount" -
                                                                  "VAT Input Cr. Exp. Refund" -
                                                                  "VAT ITC Exp. Payable Setoff" -
                                                                  "CST ITC Exp. Payable Setoff";
                                                              END;

                                                   CaptionML=[ENU=VAT Input Cr. Exp. Refund;
                                                              ENN=VAT Input Cr. Exp. Refund] }
    { 27  ;   ;VAT ITC Exp. Payable Setoff;Decimal;OnValidate=BEGIN
                                                                // "VAT Input Cr. Exp. C/F Amount" := "Input VAT Credit (Exports)" -
                                                                // "VAT Input Cr. Exp. Refund" -
                                                                // "VAT ITC Exp. Payable Setoff" -
                                                                // "CST ITC Exp. Payable Setoff";
                                                                // IF "VAT Payable Amount" > 0 THEN
                                                                // "Net VAT Payable Amount" := "VAT Payable Amount" - "VAT ITC Exp. Payable Setoff"
                                                                // ELSE
                                                                // "Net VAT Payable Amount" := 0;

                                                                "VAT Input Cr. Exp. C/F Amount" := "Input VAT Credit (Exports)" + "VAT Input Cr. Exp. B/F Amount" -
                                                                  "VAT Input Cr. Exp. Refund" -
                                                                  "VAT ITC Exp. Payable Setoff" -
                                                                  "CST ITC Exp. Payable Setoff";
                                                                IF "VAT Payable Amount" > 0 THEN
                                                                  "Net VAT Payable Amount" := "VAT Payable Amount" - "VAT ITC Exp. Payable Setoff"
                                                                ELSE
                                                                  "Net VAT Payable Amount" := 0;
                                                              END;

                                                   CaptionML=[ENU=VAT ITC Exp. Payable Setoff;
                                                              ENN=VAT ITC Exp. Payable Setoff] }
    { 28  ;   ;CST ITC Exp. Payable Setoff;Decimal;OnValidate=BEGIN
                                                                // "VAT Input Cr. Exp. C/F Amount" := "Input VAT Credit (Exports)" -
                                                                // "VAT Input Cr. Exp. Refund" -
                                                                // "VAT ITC Exp. Payable Setoff" -
                                                                // "CST ITC Exp. Payable Setoff";
                                                                // "Net CST Payable Amount" := "CST Payable Amount" - "CST ITC Exp. Payable Setoff" - "VAT Payable Setoff Amount" -
                                                                // "CST Prev. Period Setoff Amount";

                                                                "VAT Input Cr. Exp. C/F Amount" := "Input VAT Credit (Exports)" + "VAT Input Cr. Exp. B/F Amount" -
                                                                  "VAT Input Cr. Exp. Refund" -
                                                                  "VAT ITC Exp. Payable Setoff" -
                                                                  "CST ITC Exp. Payable Setoff";
                                                                "Net CST Payable Amount" := "CST Payable Amount" - "CST ITC Exp. Payable Setoff" - "VAT Payable Setoff Amount" -
                                                                  "CST Prev. Period Setoff Amount";
                                                              END;

                                                   CaptionML=[ENU=CST ITC Exp. Payable Setoff;
                                                              ENN=CST ITC Exp. Payable Setoff] }
    { 29  ;   ;VAT Input Cr. Exp. C/F Amount;Decimal;
                                                   CaptionML=[ENU=VAT Input Cr. Exp. C/F Amount;
                                                              ENN=VAT Input Cr. Exp. C/F Amount] }
    { 30  ;   ;Net VAT Payable Amount;Decimal     ;CaptionML=[ENU=Net VAT Payable Amount;
                                                              ENN=Net VAT Payable Amount] }
    { 31  ;   ;Net CST Payable Amount;Decimal     ;CaptionML=[ENU=Net CST Payable Amount;
                                                              ENN=Net CST Payable Amount] }
    { 32  ;   ;Settlement          ;Boolean       ;CaptionML=[ENU=Settlement;
                                                              ENN=Settlement] }
    { 33  ;   ;VAT Input Cr. Exp. B/F Amount;Decimal;
                                                   CaptionML=[ENU=VAT Input Cr. Exp. B/F Amount;
                                                              ENN=VAT Input Cr. Exp. B/F Amount] }
    { 34  ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 35  ;   ;CST Prev. Period Setoff Amount;Decimal;
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prev. Period C/F Amount","VAT Prev. Period Amount" -
                                                                  ("VAT Prev. Period Refund Amount" + "VAT Prev. Period Setoff Amount" +
                                                                   "CST Prev. Period Setoff Amount"));
                                                                "Net CST Payable Amount" := "CST Payable Amount" - "CST ITC Exp. Payable Setoff" - "VAT Payable Setoff Amount" -
                                                                  "CST Prev. Period Setoff Amount";
                                                              END;

                                                   CaptionML=[ENU=CST Prev. Period Setoff Amount;
                                                              ENN=CST Prev. Period Setoff Amount] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID] }
  }
  KEYS
  {
    {    ;State Code,Starting Date,Ending Date,Type,Revision No.;
                                                   Clustered=Yes }
    {    ;State Code,Starting Date,Ending Date,Settlement;
                                                   SumIndexFields=VAT Payable Refund Amount,VAT Payable Setoff Amount,VAT Payable C/F Amount }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      TaxJurisdiction@1500000 : Record 320;
      VATSettlement@1500001 : Record 16523;
      Text16500@1500002 : TextConst 'ENU=Refund amount should not be greater than %1.;ENN=Refund amount should not be greater than %1.';
      SourceCodeSetup@1500005 : Record 242;
      State2@1500006 : Record 13762;
      Text16501@1500007 : TextConst 'ENU=VAT Settlement process already completed for this period.\Please select Revised option in Type field and enter a new Revision no.;ENN=VAT Settlement process already completed for this period.\Please select Revised option in Type field and enter a new Revision no.';
      Text16502@1500003 : TextConst 'ENU=VAT Settlement posted successfully.;ENN=VAT Settlement posted successfully.';
      Text16503@1500004 : TextConst 'ENU=VAT Settlement reversed successfully.;ENN=VAT Settlement reversed successfully.';
      DimMgt@1500008 : Codeunit 408;

    PROCEDURE CalcOutputVAT@1500000();
    VAR
      DetailedTaxEntry@1500000 : Record 16522;
    BEGIN
      DetailedTaxEntry.SETCURRENTKEY(Settlement,"Tax Type","State Code","Entry Type",Deferment,"Posting Date",Positive);
      DetailedTaxEntry.SETRANGE(Settlement,FALSE);
      DetailedTaxEntry.SETRANGE("Tax Type",DetailedTaxEntry."Tax Type"::VAT);
      DetailedTaxEntry.SETRANGE("State Code","State Code");
      DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::"Initial Entry");
      DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
      DetailedTaxEntry.SETRANGE(Deferment,FALSE);
      DetailedTaxEntry.SETRANGE("Posting Date","Starting Date","Ending Date");
      DetailedTaxEntry.CALCSUMS("Input Credit/Output Tax Amount");
      VALIDATE("Output VAT Amount",ROUND(-DetailedTaxEntry."Input Credit/Output Tax Amount"));
    END;

    PROCEDURE CalcVATAdjustment@1500001();
    VAR
      DetailedTaxEntry@1500000 : Record 16522;
    BEGIN
      DetailedTaxEntry.SETCURRENTKEY(Settlement,"Tax Type","State Code","Entry Type",Deferment,"Posting Date");
      DetailedTaxEntry.SETRANGE(Settlement,FALSE);
      DetailedTaxEntry.SETRANGE("State Code","State Code");
      DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::Adjustment);
      DetailedTaxEntry.SETRANGE(Deferment,FALSE);
      DetailedTaxEntry.SETRANGE("Posting Date","Starting Date","Ending Date");
      DetailedTaxEntry.SETRANGE("Export or Deemed Export",FALSE);
      DetailedTaxEntry.CALCSUMS("Input Credit/Output Tax Amount");
      VALIDATE("VAT Adjustment Amount",ROUND(-DetailedTaxEntry."Input Credit/Output Tax Amount"));
    END;

    PROCEDURE CalcInputTaxCreditDomestic@1500002();
    VAR
      DetailedTaxEntry@1500000 : Record 16522;
    BEGIN
      DetailedTaxEntry.SETCURRENTKEY(Settlement,"Tax Type","State Code","Entry Type",Deferment,"Posting Date");
      DetailedTaxEntry.SETRANGE(Settlement,FALSE);
      // DetailedTaxEntry.SETRANGE("Tax Type",DetailedTaxEntry."Tax Type"::VAT);
      DetailedTaxEntry.SETRANGE("State Code","State Code");
      DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::"Initial Entry");
      DetailedTaxEntry.SETRANGE(Deferment,FALSE);
      DetailedTaxEntry.SETRANGE("Posting Date","Starting Date","Ending Date");
      DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Purchase);
      DetailedTaxEntry.SETRANGE("Export or Deemed Export",FALSE);
      DetailedTaxEntry.CALCSUMS("Input Credit/Output Tax Amount");
      VALIDATE("Input VAT Credit (Domestic)",ROUND(-DetailedTaxEntry."Input Credit/Output Tax Amount"));
    END;

    PROCEDURE CalcVATReceivable@1500004();
    VAR
      DetailedTaxEntry@1500000 : Record 16522;
    BEGIN
      DetailedTaxEntry.SETCURRENTKEY(Settlement,"Tax Type","State Code","Entry Type",Deferment,"Posting Date");
      DetailedTaxEntry.SETRANGE(Settlement,FALSE);
      DetailedTaxEntry.SETRANGE("Tax Type",DetailedTaxEntry."Tax Type"::VAT);
      DetailedTaxEntry.SETRANGE("State Code","State Code");
      DetailedTaxEntry.SETRANGE(Deferment,TRUE);
      DetailedTaxEntry.SETRANGE("Posting Date","Starting Date","Ending Date");
      DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Purchase);
      DetailedTaxEntry.SETRANGE("Export or Deemed Export",FALSE);
      DetailedTaxEntry.CALCSUMS("Input Credit/Output Tax Amount");
      VALIDATE("VAT Receivable Amount",ROUND(-DetailedTaxEntry."Input Credit/Output Tax Amount"));
    END;

    PROCEDURE CalcVATReceivableCFAmount@1500003();
    VAR
      VATSettlement@1500000 : Record 16523;
    BEGIN
      VATSettlement.SETRANGE("State Code","State Code");
      VATSettlement.SETRANGE("Ending Date","Starting Date" - 1);
      IF VATSettlement.FINDLAST THEN
        VALIDATE("VAT Prev. Period Amount",VATSettlement."VAT Prev. Period C/F Amount" + VATSettlement."VAT Payable C/F Amount");
    END;

    PROCEDURE CalcInputTaxCreditExports@1500005();
    VAR
      DetailedTaxEntry@1500000 : Record 16522;
    BEGIN
      VATSettlement.SETRANGE("State Code","State Code");
      VATSettlement.SETRANGE("Ending Date","Starting Date" - 1);
      IF VATSettlement.FIND('+') THEN
        VALIDATE("VAT Input Cr. Exp. B/F Amount",VATSettlement."VAT Input Cr. Exp. C/F Amount");

      DetailedTaxEntry.SETCURRENTKEY(Settlement,"Tax Type","State Code","Entry Type",Deferment,"Posting Date");
      DetailedTaxEntry.SETRANGE(Settlement,FALSE);
      DetailedTaxEntry.SETRANGE("State Code","State Code");
      DetailedTaxEntry.SETRANGE(Deferment,FALSE);
      DetailedTaxEntry.SETRANGE("Posting Date","Starting Date","Ending Date");
      DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Purchase);
      DetailedTaxEntry.SETFILTER("Entry Type",'%1|%2',DetailedTaxEntry."Entry Type"::"Initial Entry",
        DetailedTaxEntry."Entry Type"::Adjustment);
      DetailedTaxEntry.SETRANGE("Export or Deemed Export",TRUE);
      DetailedTaxEntry.CALCSUMS("Input Credit/Output Tax Amount");
      VALIDATE("Input VAT Credit (Exports)",ROUND(DetailedTaxEntry."Input Credit/Output Tax Amount"));
    END;

    PROCEDURE CalcCSTPayable@1500011();
    VAR
      DetailedTaxEntry@1500000 : Record 16522;
    BEGIN
      DetailedTaxEntry.SETCURRENTKEY(Settlement,"Tax Type","State Code","Entry Type",Deferment,"Posting Date");
      DetailedTaxEntry.SETRANGE(Settlement,FALSE);
      DetailedTaxEntry.SETRANGE("Tax Type",DetailedTaxEntry."Tax Type"::CST);
      DetailedTaxEntry.SETRANGE("State Code","State Code");
      DetailedTaxEntry.SETRANGE(Deferment,FALSE);
      DetailedTaxEntry.SETRANGE("Posting Date","Starting Date","Ending Date");
      DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
      DetailedTaxEntry.CALCSUMS("Input Credit/Output Tax Amount");
      VALIDATE("CST Payable Amount",ROUND(-DetailedTaxEntry."Input Credit/Output Tax Amount"));
    END;

    PROCEDURE DrilldownCSTPayable@1500015();
    VAR
      DetailedTaxEntry@1500000 : Record 16522;
    BEGIN
      DetailedTaxEntry.SETCURRENTKEY(Settlement,"Tax Type","State Code","Entry Type",Deferment,"Posting Date");
      DetailedTaxEntry.SETRANGE(Settlement,FALSE);
      DetailedTaxEntry.SETRANGE("Tax Type",DetailedTaxEntry."Tax Type"::CST);
      DetailedTaxEntry.SETRANGE("State Code","State Code");
      DetailedTaxEntry.SETRANGE(Deferment,FALSE);
      DetailedTaxEntry.SETRANGE("Posting Date","Starting Date","Ending Date");
      DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
      PAGE.RUNMODAL(0,DetailedTaxEntry);
    END;

    PROCEDURE DrilldownVATReceivableRefund@1500012();
    BEGIN
      TaxJurisdiction.SETRANGE("Tax Type",TaxJurisdiction."Tax Type"::VAT);
      TaxJurisdiction.SETRANGE("State Code","State Code");
      TaxJurisdiction.FIND('-');
      State2.GET("State Code");
      State2.TESTFIELD("Specified Period for Refund");
      VATSettlement.SETRANGE("State Code","State Code");
      VATSettlement.SETFILTER("Starting Date",'>=%1',
        CALCDATE(
          STRSUBSTNO('-%1',State2."Specified Period for Refund"),
          "Starting Date"));
      VATSettlement.SETFILTER("Starting Date",'<%1',"Starting Date");
      PAGE.RUNMODAL(0,VATSettlement);
    END;

    PROCEDURE DrilldownVATPayableRefund@1500014();
    BEGIN
      TaxJurisdiction.SETRANGE("Tax Type",TaxJurisdiction."Tax Type"::VAT);
      TaxJurisdiction.SETRANGE("State Code","State Code");
      TaxJurisdiction.FIND('-');

      State2.GET("State Code");
      State2.TESTFIELD("Specified Period for Refund");
      VATSettlement.SETRANGE("State Code","State Code");
      VATSettlement.SETFILTER("Starting Date",'>=%1',
        CALCDATE(
          STRSUBSTNO('-%1',State2."Specified Period for Refund"),
          "Ending Date"));
      VATSettlement.SETFILTER("Starting Date",'<=%1',"Ending Date");
      PAGE.RUNMODAL(0,VATSettlement);
    END;

    PROCEDURE DrilldownOutputVAT@1500010();
    VAR
      DetailedTaxEntry@1500000 : Record 16522;
    BEGIN
      DetailedTaxEntry.SETCURRENTKEY(Settlement,"Tax Type","State Code","Entry Type",Deferment,"Posting Date",Positive);
      DetailedTaxEntry.SETRANGE(Settlement,FALSE);
      DetailedTaxEntry.SETRANGE("Tax Type",DetailedTaxEntry."Tax Type"::VAT);
      DetailedTaxEntry.SETRANGE("State Code","State Code");
      DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::"Initial Entry");
      DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
      DetailedTaxEntry.SETRANGE(Deferment,FALSE);
      DetailedTaxEntry.SETRANGE("Posting Date","Starting Date","Ending Date");
      PAGE.RUNMODAL(0,DetailedTaxEntry);
    END;

    PROCEDURE DrilldownVATAdjustment@1500007();
    VAR
      DetailedTaxEntry@1500000 : Record 16522;
    BEGIN
      DetailedTaxEntry.SETCURRENTKEY(Settlement,"Tax Type","State Code","Entry Type",Deferment,"Posting Date");
      DetailedTaxEntry.SETRANGE(Settlement,FALSE);
      DetailedTaxEntry.SETRANGE("State Code","State Code");
      DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::Adjustment);
      DetailedTaxEntry.SETRANGE(Deferment,FALSE);
      DetailedTaxEntry.SETRANGE("Export or Deemed Export",FALSE);
      DetailedTaxEntry.SETRANGE("Posting Date","Starting Date","Ending Date");
      PAGE.RUNMODAL(0,DetailedTaxEntry);
    END;

    PROCEDURE DrilldownInputTaxCreditDmst@1500009();
    VAR
      DetailedTaxEntry@1500000 : Record 16522;
    BEGIN
      DetailedTaxEntry.SETCURRENTKEY(Settlement,"Tax Type","State Code","Entry Type",Deferment,"Posting Date");
      DetailedTaxEntry.SETRANGE(Settlement,FALSE);
      // DetailedTaxEntry.SETRANGE("Tax Type",DetailedTaxEntry."Tax Type"::VAT);
      DetailedTaxEntry.SETRANGE("State Code","State Code");
      DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::"Initial Entry");
      DetailedTaxEntry.SETRANGE(Deferment,FALSE);
      DetailedTaxEntry.SETRANGE("Posting Date","Starting Date","Ending Date");
      DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Purchase);
      DetailedTaxEntry.SETRANGE("Export or Deemed Export",FALSE);
      PAGE.RUNMODAL(0,DetailedTaxEntry);
    END;

    PROCEDURE DrilldownVATReceivable@1500013();
    VAR
      DetailedTaxEntry@1500000 : Record 16522;
    BEGIN
      DetailedTaxEntry.SETCURRENTKEY(Settlement,"Tax Type","State Code","Entry Type",Deferment,"Posting Date");
      DetailedTaxEntry.SETRANGE(Settlement,FALSE);
      DetailedTaxEntry.SETRANGE("Tax Type",DetailedTaxEntry."Tax Type"::VAT);
      DetailedTaxEntry.SETRANGE("State Code","State Code");
      DetailedTaxEntry.SETRANGE(Deferment,TRUE);
      DetailedTaxEntry.SETRANGE("Posting Date","Starting Date","Ending Date");
      DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Purchase);
      DetailedTaxEntry.SETRANGE("Export or Deemed Export",FALSE);
      PAGE.RUNMODAL(0,DetailedTaxEntry);
    END;

    PROCEDURE DrillDownVATReceivableCF@1500006();
    VAR
      VATSettlement@1500000 : Record 16523;
    BEGIN
      VATSettlement.SETRANGE("State Code","State Code");
      VATSettlement.SETRANGE("Ending Date","Starting Date" - 1);
      IF VATSettlement.FINDLAST THEN
        PAGE.RUNMODAL(16542,VATSettlement);
    END;

    PROCEDURE DrilldownVATPayableCF@1500020();
    VAR
      VATSettlement@1500000 : Record 16523;
    BEGIN
      VATSettlement.SETRANGE("State Code","State Code");
      VATSettlement.SETRANGE("Ending Date","Starting Date" - 1);
      IF VATSettlement.FINDLAST THEN
        PAGE.RUNMODAL(16542,VATSettlement);
    END;

    PROCEDURE DrilldownInputTaxCreditExports@1500018();
    VAR
      DetailedTaxEntry@1500000 : Record 16522;
    BEGIN
      DetailedTaxEntry.SETCURRENTKEY(Settlement,"Tax Type","State Code","Entry Type",Deferment,"Posting Date");
      DetailedTaxEntry.SETRANGE(Settlement,FALSE);
      DetailedTaxEntry.SETRANGE("State Code","State Code");
      DetailedTaxEntry.SETFILTER("Entry Type",'%1|%2',DetailedTaxEntry."Entry Type"::"Initial Entry",
        DetailedTaxEntry."Entry Type"::Adjustment);
      DetailedTaxEntry.SETRANGE(Deferment,FALSE);
      DetailedTaxEntry.SETRANGE("Posting Date","Starting Date","Ending Date");
      DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Purchase);
      DetailedTaxEntry.SETRANGE("Export or Deemed Export",TRUE);
      PAGE.RUNMODAL(0,DetailedTaxEntry);
    END;

    PROCEDURE PostSettlement@1500021(Undo@1500001 : Boolean);
    VAR
      GenJnlPostLine@1500002 : Codeunit 12;
      GenJnlLine@1500000 : Record 81;
      DimMgt@1500005 : Codeunit 408;
      GLSetup@1500006 : Record 98;
    BEGIN
      CLEAR(GenJnlPostLine);
      TESTFIELD(Type,Type::Original);
      TESTFIELD("Document No.");
      SourceCodeSetup.GET;
      State2.GET("State Code");

      GLSetup.GET;
      // PostOutputVAT

      IF "Output VAT Amount" <> 0 THEN BEGIN
        State2.TESTFIELD("VAT Payable Account No.");
        State2.TESTFIELD("Tax Account (Sales)");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."Tax Account (Sales)");
        GenJnlLine.VALIDATE("Bal. Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Bal. Account No.",State2."VAT Payable Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,"Output VAT Amount")
        ELSE
          GenJnlLine.VALIDATE(Amount,-"Output VAT Amount");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RUN(GenJnlLine);
      END;

      // PostVATAdjustment
      IF "VAT Adjustment Amount" <> 0 THEN BEGIN
        State2.TESTFIELD("VAT Payable Account No.");
        State2.TESTFIELD("Tax Account (Purchases)");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."VAT Payable Account No.");
        GenJnlLine.VALIDATE("Bal. Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Bal. Account No.",State2."Tax Account (Purchases)");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,-"VAT Adjustment Amount")
        ELSE
          GenJnlLine.VALIDATE(Amount,"VAT Adjustment Amount");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RUN(GenJnlLine);
      END;

      // PostInputVATCredit
      IF "Input VAT Credit (Domestic)" <> 0 THEN BEGIN
        State2.TESTFIELD("VAT Payable Account No.");
        State2.TESTFIELD("Tax Account (Purchases)");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."VAT Payable Account No.");
        GenJnlLine.VALIDATE("Bal. Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Bal. Account No.",State2."Tax Account (Purchases)");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,-"Input VAT Credit (Domestic)")
        ELSE
          GenJnlLine.VALIDATE(Amount,"Input VAT Credit (Domestic)");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RUN(GenJnlLine);
      END;

      // PostVATReceivable
      IF "VAT Receivable Amount" <> 0 THEN BEGIN
        State2.TESTFIELD("VAT Payable Account No.");
        State2.TESTFIELD("VAT Deferred Account No.");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."VAT Payable Account No.");
        GenJnlLine.VALIDATE("Bal. Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Bal. Account No.",State2."VAT Deferred Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,-"VAT Receivable Amount")
        ELSE
          GenJnlLine.VALIDATE(Amount,"VAT Receivable Amount");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;

      // CarryForwardFromPrevPeriod
      IF "VAT Prev. Period Amount" <> 0 THEN BEGIN
        State2.TESTFIELD("Excess Cr. C/F Account No.");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."Excess Cr. C/F Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,-"VAT Prev. Period Amount")
        ELSE
          GenJnlLine.VALIDATE(Amount,"VAT Prev. Period Amount");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;

      // PostVATRefund
      IF "VAT Prev. Period Refund Amount" <> 0 THEN BEGIN
        State2.TESTFIELD("VAT Refund Account No.");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."VAT Refund Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,"VAT Prev. Period Refund Amount")
        ELSE
          GenJnlLine.VALIDATE(Amount,-"VAT Prev. Period Refund Amount");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");
        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;

      // PostSetoffAgainstVAT
      IF "VAT Prev. Period Setoff Amount" <> 0 THEN BEGIN
        State2.TESTFIELD("VAT Payable Account No.");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."VAT Payable Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,"VAT Prev. Period Setoff Amount")
        ELSE
          GenJnlLine.VALIDATE(Amount,-"VAT Prev. Period Setoff Amount");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;

      IF "CST Prev. Period Setoff Amount" <> 0 THEN BEGIN
        State2.TESTFIELD("VAT Payable Account No.");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."VAT Payable Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,"CST Prev. Period Setoff Amount")
        ELSE
          GenJnlLine.VALIDATE(Amount,-"CST Prev. Period Setoff Amount");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;

      // PostCarryForward
      IF "VAT Prev. Period C/F Amount" <> 0 THEN BEGIN
        State2.TESTFIELD("Excess Cr. C/F Account No.");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."Excess Cr. C/F Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,"VAT Prev. Period C/F Amount")
        ELSE
          GenJnlLine.VALIDATE(Amount,-"VAT Prev. Period C/F Amount");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;

      // PostVATPayable
      IF "VAT Payable Amount" < 0 THEN BEGIN
        State2.TESTFIELD("VAT Payable Account No.");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."VAT Payable Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,"VAT Payable Amount")
        ELSE
          GenJnlLine.VALIDATE(Amount,-"VAT Payable Amount");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;

      // PostCSTRefund
      IF "VAT Payable Refund Amount" <> 0 THEN BEGIN
        State2.TESTFIELD("VAT Refund Account No.");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."VAT Refund Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,"VAT Payable Refund Amount")
        ELSE
          GenJnlLine.VALIDATE(Amount,-"VAT Payable Refund Amount");

        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;

      // PostSetoffAgainstCSTPayable
      IF "VAT Payable Setoff Amount" <> 0 THEN BEGIN
        State2.TESTFIELD("VAT Payable Account No.");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."VAT Payable Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,"VAT Payable Setoff Amount")
        ELSE
          GenJnlLine.VALIDATE(Amount,-"VAT Payable Setoff Amount");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;

      // PostCSTCarryForward
      IF "VAT Payable C/F Amount" <> 0 THEN BEGIN
        State2.TESTFIELD("Excess Cr. C/F Account No.");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."Excess Cr. C/F Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,"VAT Payable C/F Amount")
        ELSE
          GenJnlLine.VALIDATE(Amount,-"VAT Payable C/F Amount");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;

      // PostCSTPayable
      IF "CST Payable Amount" <> 0 THEN BEGIN
        State2.TESTFIELD("VAT Payable Account No.");
        State2.TESTFIELD("CST Account (Sales)");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."CST Account (Sales)");
        GenJnlLine.VALIDATE("Bal. Account Type",GenJnlLine."Bal. Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Bal. Account No.",State2."VAT Payable Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,"CST Payable Amount")
        ELSE
          GenJnlLine.VALIDATE(Amount,-"CST Payable Amount");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;

      // PostInputVATCrExport
      IF "Input VAT Credit (Exports)" <> 0 THEN BEGIN
        State2.TESTFIELD("Tax Account (Purchases)");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."Tax Account (Purchases)");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,-"Input VAT Credit (Exports)")
        ELSE
          GenJnlLine.VALIDATE(Amount,"Input VAT Credit (Exports)");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;

      IF "VAT Input Cr. Exp. B/F Amount" <> 0 THEN BEGIN
        State2.TESTFIELD("Excess Cr. C/F Account No.");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."Excess Cr. C/F Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,-"VAT Input Cr. Exp. B/F Amount")
        ELSE
          GenJnlLine.VALIDATE(Amount,"VAT Input Cr. Exp. B/F Amount");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;

      // Refund
      IF "VAT Input Cr. Exp. Refund" <> 0 THEN BEGIN
        State2.TESTFIELD("VAT Refund Account No.");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."VAT Refund Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,"VAT Input Cr. Exp. Refund")
        ELSE
          GenJnlLine.VALIDATE(Amount,-"VAT Input Cr. Exp. Refund");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;

      // SetoffAgainstVATPayable
      IF "VAT ITC Exp. Payable Setoff" <> 0 THEN BEGIN
        State2.TESTFIELD("VAT Payable Account No.");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."VAT Payable Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,"VAT ITC Exp. Payable Setoff")
        ELSE
          GenJnlLine.VALIDATE(Amount,-"VAT ITC Exp. Payable Setoff");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;

      // SetoffAgainstCSTPayable
      IF "CST ITC Exp. Payable Setoff" <> 0 THEN BEGIN
        State2.TESTFIELD("VAT Payable Account No.");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."VAT Payable Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,"CST ITC Exp. Payable Setoff")
        ELSE
          GenJnlLine.VALIDATE(Amount,-"CST ITC Exp. Payable Setoff");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;

      // CarryForward
      IF "VAT Input Cr. Exp. C/F Amount" <> 0 THEN BEGIN
        State2.TESTFIELD("Excess Cr. C/F Account No.");
        GenJnlLine.INIT;
        GenJnlLine.VALIDATE("Journal Template Name",'');
        GenJnlLine.VALIDATE("Journal Batch Name",'');
        GenJnlLine.VALIDATE("Source Code",SourceCodeSetup."VAT Settlement");
        GenJnlLine.VALIDATE("Posting Date","Ending Date");
        GenJnlLine.VALIDATE("Document No.","Document No.");
        GenJnlLine.VALIDATE("Account Type",GenJnlLine."Account Type"::"G/L Account");
        GenJnlLine.VALIDATE("Account No.",State2."Excess Cr. C/F Account No.");
        IF Undo = FALSE THEN
          GenJnlLine.VALIDATE(Amount,"VAT Input Cr. Exp. C/F Amount")
        ELSE
          GenJnlLine.VALIDATE(Amount,-"VAT Input Cr. Exp. C/F Amount");
        GenJnlLine."Dimension Set ID" := "Dimension Set ID";

        DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",GenJnlLine."Shortcut Dimension 1 Code",
          GenJnlLine."Shortcut Dimension 1 Code");

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      END;
      IF NOT Undo THEN
        MESSAGE(Text16502)
      ELSE
        MESSAGE(Text16503);
    END;

    LOCAL PROCEDURE CheckSettled@1500008();
    VAR
      DetailedTaxEntry@1500000 : Record 16522;
    BEGIN
      IF Type = Type::Revised THEN
        EXIT;
      DetailedTaxEntry.SETRANGE("State Code","State Code");
      DetailedTaxEntry.SETRANGE(Settlement,TRUE);
      DetailedTaxEntry.SETRANGE("Posting Date","Starting Date","Ending Date");
      IF DetailedTaxEntry.FINDFIRST THEN
        ERROR(Text16501);
    END;

    PROCEDURE AllowUndo@1500017(StateCode@1500001 : Code[20];StartDate@1500002 : Date);
    VAR
      VATSettlement2@1500000 : Record 16523;
    BEGIN
      VATSettlement2.RESET;
      VATSettlement2.SETRANGE("State Code",StateCode);
      VATSettlement2.SETFILTER("Starting Date",'>%1',StartDate);
      VATSettlement2.SETRANGE(Type,VATSettlement2.Type::Original);
      VATSettlement2.SETRANGE(Settlement,TRUE);
      IF VATSettlement2.FINDFIRST THEN
        VATSettlement2.TESTFIELD(Settlement,FALSE);
    END;

    PROCEDURE AllowPost@1500016(StateCode@1500001 : Code[20];StartDate@1500002 : Date);
    VAR
      VATSettlement2@1500000 : Record 16523;
    BEGIN
      VATSettlement2.RESET;
      VATSettlement2.SETRANGE("State Code",StateCode);
      VATSettlement2.SETFILTER("Starting Date",'<%1',StartDate);
      VATSettlement2.SETRANGE(Settlement,FALSE);
      VATSettlement2.SETRANGE(Type,VATSettlement2.Type::Original);
      IF VATSettlement2.FINDFIRST THEN
        VATSettlement2.TESTFIELD(Settlement,TRUE);
    END;

    PROCEDURE ShowDimensions@32();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"Document No."));
    END;

    BEGIN
    END.
  }
}

