OBJECT Table 16324 Delivery Challan Line
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.49326;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Delivery Challan Line;
               ENN=Delivery Challan Line];
    LookupPageID=Page16328;
    DrillDownPageID=Page16442;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 2   ;   ;Document Line No.   ;Integer       ;CaptionML=[ENU=Document Line No.;
                                                              ENN=Document Line No.] }
    { 6   ;   ;Parent Item No.     ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Parent Item No.;
                                                              ENN=Parent Item No.] }
    { 8   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              ENN=Item No.] }
    { 9   ;   ;Unit of Measure     ;Code10        ;TableRelation="Unit of Measure";
                                                   CaptionML=[ENU=Unit of Measure;
                                                              ENN=Unit of Measure];
                                                   Editable=No }
    { 10  ;   ;Prod. BOM Quantity  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Component"."Expected Quantity" WHERE (Status=CONST(Released),
                                                                                                                      Prod. Order No.=FIELD(Production Order No.),
                                                                                                                      Prod. Order Line No.=FIELD(Production Order Line No.),
                                                                                                                      Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Prod. BOM Quantity;
                                                              ENN=Prod. BOM Quantity];
                                                   DecimalPlaces=2:5 }
    { 11  ;   ;Quantity To Send    ;Decimal       ;CaptionML=[ENU=Quantity To Send;
                                                              ENN=Quantity To Send] }
    { 12  ;   ;Quantity (Base)     ;Decimal       ;CaptionML=[ENU=Quantity (Base);
                                                              ENN=Quantity (Base)] }
    { 13  ;   ;Quantity To Send (Base);Decimal    ;CaptionML=[ENU=Quantity To Send (Base);
                                                              ENN=Quantity To Send (Base)] }
    { 14  ;   ;Description         ;Text30        ;CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 15  ;   ;Position            ;Code10        ;CaptionML=[ENU=Position;
                                                              ENN=Position] }
    { 16  ;   ;Position 2          ;Code10        ;CaptionML=[ENU=Position 2;
                                                              ENN=Position 2] }
    { 17  ;   ;Position 3          ;Code10        ;CaptionML=[ENU=Position 3;
                                                              ENN=Position 3] }
    { 18  ;   ;Production Lead Time;DateFormula   ;CaptionML=[ENU=Production Lead Time;
                                                              ENN=Production Lead Time] }
    { 19  ;   ;Routing Link Code   ;Code10        ;TableRelation="Routing Link";
                                                   CaptionML=[ENU=Routing Link Code;
                                                              ENN=Routing Link Code] }
    { 20  ;   ;Scrap %             ;Decimal       ;CaptionML=[ENU=Scrap %;
                                                              ENN=Scrap %];
                                                   DecimalPlaces=0:5;
                                                   MaxValue=100;
                                                   BlankNumbers=BlankNeg }
    { 21  ;   ;Variant Code        ;Code10        ;CaptionML=[ENU=Variant Code;
                                                              ENN=Variant Code] }
    { 28  ;   ;Starting Date       ;Date          ;CaptionML=[ENU=Starting Date;
                                                              ENN=Starting Date] }
    { 29  ;   ;Ending Date         ;Date          ;CaptionML=[ENU=Ending Date;
                                                              ENN=Ending Date] }
    { 40  ;   ;Length              ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Length;
                                                              ENN=Length];
                                                   DecimalPlaces=0:5 }
    { 41  ;   ;Width               ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Width;
                                                              ENN=Width];
                                                   DecimalPlaces=0:5 }
    { 42  ;   ;Weight              ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Weight;
                                                              ENN=Weight];
                                                   DecimalPlaces=0:5 }
    { 43  ;   ;Depth               ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Depth;
                                                              ENN=Depth];
                                                   DecimalPlaces=0:5 }
    { 44  ;   ;Calculation Formula ;Option        ;OnValidate=BEGIN
                                                                CASE "Calculation Formula" OF
                                                                  "Calculation Formula"::" ":
                                                                    "Prod. BOM Quantity" := "Quantity per";
                                                                  "Calculation Formula"::Length:
                                                                    "Prod. BOM Quantity" := ROUND(Length * "Quantity per",0.00001);
                                                                  "Calculation Formula"::"Length * Width":
                                                                    "Prod. BOM Quantity" := ROUND(Length * Width * "Quantity per",0.00001);
                                                                  "Calculation Formula"::"Length * Width * Depth":
                                                                    "Prod. BOM Quantity" := ROUND(Length * Width * Depth * "Quantity per",0.00001);
                                                                  "Calculation Formula"::Weight:
                                                                    "Prod. BOM Quantity" := ROUND(Weight * "Quantity per",0.00001);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Calculation Formula;
                                                              ENN=Calculation Formula];
                                                   OptionCaptionML=[ENU=" ,Length,Length * Width,Length * Width * Depth,Weight";
                                                                    ENN=" ,Length,Length * Width,Length * Width * Depth,Weight"];
                                                   OptionString=[ ,Length,Length * Width,Length * Width * Depth,Weight] }
    { 45  ;   ;Quantity per        ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Calculation Formula");
                                                              END;

                                                   CaptionML=[ENU=Quantity per;
                                                              ENN=Quantity per];
                                                   DecimalPlaces=0:5 }
    { 46  ;   ;Company Location    ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No),
                                                                                 Subcontracting Location=CONST(No));
                                                   CaptionML=[ENU=Company Location;
                                                              ENN=Company Location] }
    { 47  ;   ;Vendor Location     ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No),
                                                                                 Subcontracting Location=CONST(Yes));
                                                   CaptionML=[ENU=Vendor Location;
                                                              ENN=Vendor Location] }
    { 48  ;   ;Production Order No.;Code20        ;CaptionML=[ENU=Production Order No.;
                                                              ENN=Production Order No.] }
    { 49  ;   ;Production Order Line No.;Integer  ;CaptionML=[ENU=Production Order Line No.;
                                                              ENN=Production Order Line No.] }
    { 50  ;   ;Line Type           ;Option        ;CaptionML=[ENU=Line Type;
                                                              ENN=Line Type];
                                                   OptionCaptionML=[ENU=Production,Purchase;
                                                                    ENN=Production,Purchase];
                                                   OptionString=Production,Purchase }
    { 51  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENN=Gen. Prod. Posting Group] }
    { 52  ;   ;Quantity at Vendor Location;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Ledger Entry"."Remaining Quantity" WHERE (Item No.=FIELD(Item No.),
                                                                                                                   Location Code=FIELD(Vendor Location)));
                                                   CaptionML=[ENU=Quantity at Vendor Location;
                                                              ENN=Quantity at Vendor Location] }
    { 53  ;   ;Total Scrap Quantity;Decimal       ;OnValidate=BEGIN
                                                                CALCFIELDS("Prod. BOM Quantity");
                                                              END;

                                                   CaptionML=[ENU=Total Scrap Quantity;
                                                              ENN=Total Scrap Quantity] }
    { 54  ;   ;Deliver Challan No. ;Code10        ;CaptionML=[ENU=Deliver Challan No.;
                                                              ENN=Deliver Challan No.] }
    { 55  ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 56  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              ENN=Quantity] }
    { 57  ;   ;Remaining Quantity  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Ledger Entry"."Remaining Quantity" WHERE (Entry Type=CONST(Transfer),
                                                                                                                   Location Code=FIELD(Vendor Location),
                                                                                                                   External Document No.=FIELD(Deliver Challan No.),
                                                                                                                   Item No.=FIELD(Item No.),
                                                                                                                   Subcon Order No.=FIELD(Document No.)));
                                                   CaptionML=[ENU=Remaining Quantity;
                                                              ENN=Remaining Quantity] }
    { 58  ;   ;Components in Rework Qty.;Decimal  ;CaptionML=[ENU=Components in Rework Qty.;
                                                              ENN=Components in Rework Qty.] }
    { 59  ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 60  ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=[ENU=Vendor No.;
                                                              ENN=Vendor No.] }
    { 61  ;   ;Process Description ;Text30        ;CaptionML=[ENU=Process Description;
                                                              ENN=Process Description] }
    { 62  ;   ;Prod. Order Comp. Line No.;Integer ;CaptionML=[ENU=Prod. Order Comp. Line No.;
                                                              ENN=Prod. Order Comp. Line No.] }
    { 63  ;   ;Excise Bus. Posting Group;Code10   ;TableRelation="Excise Bus. Posting Group";
                                                   CaptionML=[ENU=Excise Bus. Posting Group;
                                                              ENN=Excise Bus. Posting Group];
                                                   Editable=No }
    { 64  ;   ;Excise Prod. Posting Group;Code10  ;TableRelation="Excise Prod. Posting Group";
                                                   CaptionML=[ENU=Excise Prod. Posting Group;
                                                              ENN=Excise Prod. Posting Group];
                                                   Editable=No }
    { 65  ;   ;SSI                 ;Boolean       ;CaptionML=[ENU=SSI;
                                                              ENN=SSI] }
    { 66  ;   ;Amount Including Excise;Decimal    ;CaptionML=[ENU=Amount Including Excise;
                                                              ENN=Amount Including Excise];
                                                   AutoFormatType=1 }
    { 67  ;   ;Excise Amount       ;Decimal       ;CaptionML=[ENU=Excise Amount;
                                                              ENN=Excise Amount];
                                                   AutoFormatType=1 }
    { 68  ;   ;Excise Base Amount  ;Decimal       ;CaptionML=[ENU=Excise Base Amount;
                                                              ENN=Excise Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 69  ;   ;AED(GSI) % / Amount ;Decimal       ;CaptionML=[ENU=AED(GSI) % / Amount;
                                                              ENN=AED(GSI) % / Amount] }
    { 70  ;   ;SED % / Amount      ;Decimal       ;CaptionML=[ENU=SED % / Amount;
                                                              ENN=SED % / Amount] }
    { 71  ;   ;BED Amount          ;Decimal       ;CaptionML=[ENU=BED Amount;
                                                              ENN=BED Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 72  ;   ;AED(GSI) Amount     ;Decimal       ;CaptionML=[ENU=AED(GSI) Amount;
                                                              ENN=AED(GSI) Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 73  ;   ;SED Amount          ;Decimal       ;CaptionML=[ENU=SED Amount;
                                                              ENN=SED Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 74  ;   ;SAED % / Amount     ;Decimal       ;CaptionML=[ENU=SAED % / Amount;
                                                              ENN=SAED % / Amount] }
    { 75  ;   ;CESS % / Amount     ;Decimal       ;CaptionML=[ENU=CESS % / Amount;
                                                              ENN=CESS % / Amount] }
    { 76  ;   ;NCCD % / Amount     ;Decimal       ;CaptionML=[ENU=NCCD % / Amount;
                                                              ENN=NCCD % / Amount] }
    { 77  ;   ;eCess % / Amount    ;Decimal       ;CaptionML=[ENU=eCess % / Amount;
                                                              ENN=eCess % / Amount] }
    { 78  ;   ;SAED Amount         ;Decimal       ;CaptionML=[ENU=SAED Amount;
                                                              ENN=SAED Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 79  ;   ;CESS Amount         ;Decimal       ;CaptionML=[ENU=CESS Amount;
                                                              ENN=CESS Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 80  ;   ;NCCD Amount         ;Decimal       ;CaptionML=[ENU=NCCD Amount;
                                                              ENN=NCCD Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 81  ;   ;eCess Amount        ;Decimal       ;CaptionML=[ENU=eCess Amount;
                                                              ENN=eCess Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 82  ;   ;Amount Added to Excise Base;Decimal;CaptionML=[ENU=Amount Added to Excise Base;
                                                              ENN=Amount Added to Excise Base];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 83  ;   ;Debit Note Created  ;Boolean       ;CaptionML=[ENU=Debit Note Created;
                                                              ENN=Debit Note Created] }
    { 84  ;   ;Return Date         ;Date          ;CaptionML=[ENU=Return Date;
                                                              ENN=Return Date] }
    { 85  ;   ;Debit Note Excise Amount;Decimal   ;CaptionML=[ENU=Debit Note Excise Amount;
                                                              ENN=Debit Note Excise Amount] }
    { 86  ;   ;Last Date           ;Date          ;CaptionML=[ENU=Last Date;
                                                              ENN=Last Date];
                                                   Editable=No }
    { 89  ;   ;AED(TTA) Amount     ;Decimal       ;CaptionML=[ENU=AED(TTA) Amount;
                                                              ENN=AED(TTA) Amount];
                                                   Editable=No }
    { 90  ;   ;ADET Amount         ;Decimal       ;CaptionML=[ENU=ADET Amount;
                                                              ENN=ADET Amount];
                                                   Editable=No }
    { 91  ;   ;ADE Amount          ;Decimal       ;CaptionML=[ENU=ADE Amount;
                                                              ENN=ADE Amount];
                                                   Editable=No }
    { 92  ;   ;SHE Cess Amount     ;Decimal       ;CaptionML=[ENU=SHE Cess Amount;
                                                              ENN=SHE Cess Amount];
                                                   Editable=No }
    { 93  ;   ;ADC VAT Amount      ;Decimal       ;CaptionML=[ENU=ADC VAT Amount;
                                                              ENN=ADC VAT Amount];
                                                   Editable=No }
    { 94  ;   ;Job Work Return Period;Integer     ;CaptionML=[ENU=Job Work Return Period;
                                                              ENN=Job Work Return Period];
                                                   Editable=No }
    { 95  ;   ;Excise Liability Created;Decimal   ;CaptionML=[ENU=Excise Liability Created;
                                                              ENN=Excise Liability Created];
                                                   Editable=No }
    { 96  ;   ;Excise Debit to Vendor;Boolean     ;CaptionML=[ENU=Excise Debit to Vendor;
                                                              ENN=Excise Debit to Vendor] }
    { 98  ;   ;Excise Amount Remaining;Decimal    ;CaptionML=[ENU=Excise Amount Remaining;
                                                              ENN=Excise Amount Remaining];
                                                   Editable=No }
    { 100 ;   ;Identification Mark ;Text20        ;CaptionML=[ENU=Identification Mark;
                                                              ENN=Identification Mark];
                                                   Editable=No }
    { 101 ;   ;Excise Amount (Total);Decimal      ;CaptionML=[ENU=Excise Amount (Total);
                                                              ENN=Excise Amount (Total)];
                                                   Editable=No }
    { 102 ;   ;GST Group Code      ;Code20        ;TableRelation="GST Group";
                                                   CaptionML=[ENU=GST Group Code;
                                                              ENN=GST Group Code] }
    { 103 ;   ;HSN/SAC Code        ;Code8         ;TableRelation=HSN/SAC.Code WHERE (GST Group Code=FIELD(GST Group Code));
                                                   CaptionML=[ENU=HSN/SAC Code;
                                                              ENN=HSN/SAC Code] }
    { 104 ;   ;GST Base Amount     ;Decimal       ;CaptionML=[ENU=GST Base Amount;
                                                              ENN=GST Base Amount] }
    { 105 ;   ;Total GST Amount    ;Decimal       ;CaptionML=[ENU=Total GST Amount;
                                                              ENN=Total GST Amount] }
    { 106 ;   ;GST Liability Created;Decimal      ;CaptionML=[ENU=GST Liability Created;
                                                              ENN=GST Liability Created] }
    { 107 ;   ;GST Last Date       ;Date          ;CaptionML=[ENU=GST Last Date;
                                                              ENN=GST Last Date] }
    { 109 ;   ;GST Amount Remaining;Decimal       ;CaptionML=[ENU=GST Amount Remaining;
                                                              ENN=GST Amount Remaining] }
    { 110 ;   ;Job Work Return Period (GST);Integer;
                                                   CaptionML=[ENU=Job Work Return Period (GST);
                                                              ENN=Job Work Return Period (GST)] }
    { 111 ;   ;GST Credit          ;Option        ;CaptionML=[ENU=GST Credit;
                                                              ENN=GST Credit];
                                                   OptionCaptionML=[ENU=Availment,Non-Availment;
                                                                    ENN=Availment,Non-Availment];
                                                   OptionString=Availment,Non-Availment }
    { 112 ;   ;Exempted            ;Boolean       ;CaptionML=[ENU=Exempted;
                                                              ENN=Exempted] }
    { 113 ;   ;GST Jurisdiction Type;Option       ;CaptionML=[ENU=GST Jurisdiction Type;
                                                              ENN=GST Jurisdiction Type];
                                                   OptionCaptionML=[ENU=Intrastate,Interstate;
                                                                    ENN=Intrastate,Interstate];
                                                   OptionString=Intrastate,Interstate;
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID] }
  }
  KEYS
  {
    {    ;Deliver Challan No.,Line No.            ;SumIndexFields=Excise Amount,BED Amount,AED(GSI) Amount,SED Amount,SAED Amount,CESS Amount,NCCD Amount,eCess Amount,AED(TTA) Amount,ADET Amount,ADE Amount,SHE Cess Amount,ADC VAT Amount;
                                                   Clustered=Yes }
    {    ;Production Order No.,Production Order Line No.,Prod. Order Comp. Line No.;
                                                   SumIndexFields=Excise Amount,BED Amount,AED(GSI) Amount,SED Amount,SAED Amount,CESS Amount,NCCD Amount,eCess Amount,AED(TTA) Amount,ADET Amount,ADE Amount,SHE Cess Amount,ADC VAT Amount }
    {    ;Deliver Challan No.,Item No.             }
    {    ;Item No.                                 }
    {    ;Document No.,Document Line No.,Production Order No.,Production Order Line No.,Prod. Order Comp. Line No. }
    {    ;Vendor No.,Document No.,Document Line No.,Production Order No.,Production Order Line No.,Prod. Order Comp. Line No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text101@1280000 : TextConst 'ENU="Item Ledger entry no %1 is not adjusted yet; Excise details are not available.";ENN="Item Ledger entry no %1 is not adjusted yet; Excise details are not available."';
      GSTManagement@1500007 : Codeunit 16401;
      Exciseamount@1280008 : Decimal;
      AEDAmount@1280007 : Decimal;
      BEDAmount@1280006 : Decimal;
      SEDAmount@1280005 : Decimal;
      SAEDAmount@1280004 : Decimal;
      CESSAmount@1280003 : Decimal;
      NCCDAmount@1280002 : Decimal;
      Duty4Amount@1280001 : Decimal;
      ExProdPostingGroup@1280009 : Code[10];
      ExBusinessPostingGroup@1280010 : Code[10];
      "AED(TTA)Amount"@1500000 : Decimal;
      ADETAmount@1500001 : Decimal;
      ADEAmount@1500002 : Decimal;
      SHECessAmount@1500003 : Decimal;
      ADCVATAmount@1500004 : Decimal;
      LiabilityErr@1500006 : TextConst '@@@=Liability Document No. %1 already exists.;ENU=Liability Document No. %1 already exists.;ENN=Liability Document No. %1 already exists.';
      LoopCount@1500005 : Integer;
      CostErr@1500008 : TextConst '@@@="%1 = Unit Cost";ENU=UnitCost should not be empty in %1.;ENN=UnitCost should not be empty in %1.';
      GSTStateErr@1500009 : TextConst '@@@="%1 = Code";ENU=GST cannot calculate this document %1.;ENN=GST cannot calculate this document %1.';

    PROCEDURE UpdateExciseAmount@1280001(ItemLedgerEntry@1280015 : Record 32);
    VAR
      ItemapplicationEntry@1280011 : Record 339;
      ItemLedgerEntry2@1280010 : Record 32;
      ValueEntry@1280013 : Record 5802;
      ExciseEntry@1280014 : Record 13712;
      Vendor@1280002 : Record 23;
    BEGIN
      Exciseamount := 0;
      BEDAmount := 0;
      AEDAmount := 0;
      SEDAmount := 0;
      SAEDAmount := 0;
      CESSAmount := 0;
      NCCDAmount := 0;
      Duty4Amount := 0;
      "AED(TTA)Amount" := 0;
      ADETAmount := 0;
      ADEAmount := 0;
      SHECessAmount := 0;
      ADCVATAmount := 0;
      LoopCount := 0;
      ExBusinessPostingGroup := '';
      ExProdPostingGroup := '';
      ItemapplicationEntry.SETRANGE("Inbound Item Entry No.",ItemLedgerEntry."Entry No.");
      IF ItemapplicationEntry.FIND('-') THEN
        REPEAT
          ItemLedgerEntry2.SETRANGE("Entry No.",ItemapplicationEntry."Transferred-from Entry No.");
          IF ItemLedgerEntry2.FINDFIRST THEN BEGIN
            IF ItemLedgerEntry2."Entry Type" = ItemLedgerEntry2."Entry Type"::Transfer THEN
              UpdateExciseAmount(ItemLedgerEntry2);
            ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgerEntry2."Entry No.");
            ValueEntry.SETFILTER("Invoiced Quantity",'<>0');
            IF ValueEntry.FINDSET THEN
              REPEAT
                ExciseEntry.RESET;
                ExciseEntry.SETRANGE(Type,ExciseEntry.Type::Purchase);
                ExciseEntry.SETRANGE("Document No.",ValueEntry."Document No.");
                ExciseEntry.SETRANGE("Posting Date",ValueEntry."Posting Date");
                ExciseEntry.SETFILTER("Item No.",ValueEntry."Item No.");
                IF ExciseEntry.FINDFIRST THEN
                  IF ExciseEntry.Quantity <> 0 THEN BEGIN
                    Exciseamount += (ExciseEntry.Amount / ExciseEntry.Quantity);
                    BEDAmount += (ExciseEntry."BED Amount" / ExciseEntry.Quantity);
                    AEDAmount += (ExciseEntry."AED(GSI) Amount" / ExciseEntry.Quantity);
                    SEDAmount += (ExciseEntry."SED Amount" / ExciseEntry.Quantity);
                    SAEDAmount += (ExciseEntry."SAED Amount" / ExciseEntry.Quantity);
                    CESSAmount += (ExciseEntry."CESS Amount" / ExciseEntry.Quantity);
                    NCCDAmount += (ExciseEntry."NCCD Amount" / ExciseEntry.Quantity);
                    Duty4Amount += (ExciseEntry."eCess Amount" / ExciseEntry.Quantity);
                    "AED(TTA)Amount" += (ExciseEntry."AED(TTA) Amount" / ExciseEntry.Quantity);
                    ADETAmount += (ExciseEntry."ADET Amount" / ExciseEntry.Quantity);
                    ADEAmount += (ExciseEntry."ADE Amount" / ExciseEntry.Quantity);
                    SHECessAmount += (ExciseEntry."SHE Cess Amount" / ExciseEntry.Quantity);
                    ADCVATAmount += (ExciseEntry."ADC VAT Amount" / ExciseEntry.Quantity);
                    ExBusinessPostingGroup := ExciseEntry."Excise Bus. Posting Group";
                    ExProdPostingGroup := ExciseEntry."Excise Prod. Posting Group";
                    Vendor.GET(ExciseEntry."Sell-to/Buy-from No.");
                    SSI := Vendor.SSI;
                    LoopCount := LoopCount + 1;
                  END;
              UNTIL ValueEntry.NEXT = 0;
          END;
        UNTIL ItemapplicationEntry.NEXT = 0
      ELSE
        ERROR(Text101,ItemLedgerEntry."Entry No.");
    END;

    PROCEDURE UpdateChallanLine@1280000(ChallanLine@1280000 : Record 16324);
    BEGIN
      CALCFIELDS("Remaining Quantity");
      IF LoopCount = 0 THEN
        LoopCount := 1;

      "Excise Amount (Total)" := ROUND((Exciseamount * Quantity) / LoopCount);
      "BED Amount" := ROUND((BEDAmount * "Remaining Quantity") / LoopCount);
      "AED(GSI) Amount" := ROUND((AEDAmount * "Remaining Quantity") / LoopCount);
      "SED Amount" := ROUND((SEDAmount * "Remaining Quantity") / LoopCount);
      "SAED Amount" := ROUND((SAEDAmount * "Remaining Quantity") / LoopCount);
      "CESS Amount" := ROUND((CESSAmount * "Remaining Quantity") / LoopCount);
      "NCCD Amount" := ROUND((NCCDAmount * "Remaining Quantity") / LoopCount);
      "eCess Amount" := ROUND((Duty4Amount * "Remaining Quantity") / LoopCount);
      "AED(TTA) Amount" := ROUND(("AED(TTA)Amount" * "Remaining Quantity") / LoopCount);
      "ADET Amount" := ROUND((ADETAmount * "Remaining Quantity") / LoopCount);
      "ADE Amount" := ROUND((ADEAmount * "Remaining Quantity") / LoopCount);
      "SHE Cess Amount" := ROUND((SHECessAmount * "Remaining Quantity") / LoopCount);
      "ADC VAT Amount" := ROUND((ADCVATAmount * "Remaining Quantity") / LoopCount);
      "Excise Amount" :=
        ("BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" +
         "CESS Amount" + "NCCD Amount" + "eCess Amount" + "AED(TTA) Amount" +
         "ADET Amount" + "ADE Amount" + "SHE Cess Amount" + "ADC VAT Amount");
      "Excise Amount Remaining" := "Excise Amount" - "Excise Liability Created";
      "Excise Bus. Posting Group" := ExBusinessPostingGroup;
      "Excise Prod. Posting Group" := ExProdPostingGroup;
      SSI := SSI;
      MODIFY;
    END;

    PROCEDURE FillExciseLiability@1500000("Liability Date"@1500001 : Date;LiabilityDocNo@1500003 : Code[20]);
    VAR
      DeliveryChallanLine@1500000 : Record 16324;
      ExciseLiabilityLine@1500002 : Record 13732;
      ExciseLiabilityLine2@1500004 : Record 13732;
      PostedExciseLiabilityLine@1500006 : Record 13733;
    BEGIN
      PostedExciseLiabilityLine.RESET;
      PostedExciseLiabilityLine.SETRANGE("Liability Document No.",LiabilityDocNo);
      IF PostedExciseLiabilityLine.FINDFIRST THEN
        ERROR(LiabilityErr,LiabilityDocNo);
      DeliveryChallanLine.COPYFILTERS(Rec);
      IF DeliveryChallanLine.FINDSET THEN
        REPEAT
          ExciseLiabilityLine.INIT;
          ExciseLiabilityLine."Liability Document No." := LiabilityDocNo;
          ExciseLiabilityLine2.RESET;
          ExciseLiabilityLine2.SETRANGE("Liability Document No.",LiabilityDocNo);
          IF ExciseLiabilityLine2.FINDLAST THEN
            ExciseLiabilityLine."Liability Document Line No." := ExciseLiabilityLine2."Liability Document Line No." + 10000
          ELSE
            ExciseLiabilityLine."Liability Document Line No." := 10000;
          ExciseLiabilityLine."Liability Date" := "Liability Date";
          ExciseLiabilityLine.TRANSFERFIELDS(DeliveryChallanLine);
          ExciseLiabilityLine.INSERT;
        UNTIL DeliveryChallanLine.NEXT = 0;

      PAGE.RUN(PAGE::"Excise Liability Line");
    END;

    PROCEDURE PostedExciseLiability@1500002();
    VAR
      PostedExciseLiabilityLine@1500000 : Record 13733;
    BEGIN
      PostedExciseLiabilityLine.RESET;
      PostedExciseLiabilityLine.SETRANGE("Deliver Challan No.","Deliver Challan No.");
      PostedExciseLiabilityLine.SETRANGE("Line No.","Line No.");
      PAGE.RUN(PAGE::"Posted Excise Liability Line",PostedExciseLiabilityLine);
    END;

    PROCEDURE ShowDimensions@1500001();
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Deliver Challan No.","Line No."));
    END;

    PROCEDURE UpdateGSTChallanLine@1500004(Item@1500001 : Record 27);
    VAR
      Location@1500010 : Record 14;
      Vendor@1500009 : Record 23;
      CompanyInformation@1500007 : Record 79;
      GSTPerStateCode@1500006 : Code[10];
      GSTJurisdiction@1500005 : 'Intrastate,Interstate';
      TransactionType@1500004 : 'Purchase,Sales,Transfer,Service,Service Transfer,Production';
      SourceType@1500003 : 'Vendor,Customer';
      UnitCost@1500000 : Decimal;
    BEGIN
      CALCFIELDS("Remaining Quantity");
      "HSN/SAC Code" := Item."HSN/SAC Code";
      "GST Group Code" := Item."GST Group Code";
      "GST Credit" := Item."GST Credit";
      Exempted := Item.Exempted;
      CompanyInformation.GET;
      CompanyInformation.TESTFIELD("GST Registration No.");
      IF Location.GET("Company Location") THEN;
      IF Vendor.GET("Vendor No.") THEN;
      Location.TESTFIELD("State Code");
      GSTPerStateCode :=
        GSTManagement.GetGSTConfiguration(
          SourceType::Customer,Location."State Code",Vendor."State Code",GSTJurisdiction);

      IF GSTPerStateCode = '' THEN
        ERROR(GSTStateErr,"Document No.");

      UnitCost :=
        GetUnitCost("Production Order No.","Production Order Line No.","Item No.");

      IF UnitCost = 0 THEN
        ERROR(CostErr,"Item No.");

      "GST Jurisdiction Type" := GSTJurisdiction;
      "GST Base Amount" := UnitCost * "Remaining Quantity";
      "Total GST Amount" :=
        GSTManagement.CalculateGSTAmounts(
          "Deliver Challan No.","Line No.",GSTJurisdiction,GSTPerStateCode,"GST Group Code",
          "GST Last Date","GST Base Amount",TransactionType::Production,0,'',1,UnitCost,TRUE,
          Quantity,"Unit of Measure","Item No.");

      IF "GST Base Amount" <> 0 THEN
        TESTFIELD("Total GST Amount");

      MODIFY;
    END;

    PROCEDURE FillGSTLiability@1500005(LiabilityDate@1500001 : Date;LiabilityDocNo@1500003 : Code[20]);
    VAR
      DeliveryChallanLine@1500015 : Record 16324;
      GSTLiabilityLine@1500014 : Record 16424;
      GSTLiabilityLine2@1500013 : Record 16424;
      PostedGSTLiabilityLine@1500012 : Record 16425;
      UnitCost@1500000 : Decimal;
    BEGIN
      PostedGSTLiabilityLine.RESET;
      PostedGSTLiabilityLine.SETRANGE("Liability Document No.",LiabilityDocNo);
      IF PostedGSTLiabilityLine.FINDFIRST THEN
        ERROR(LiabilityErr,LiabilityDocNo);
      DeleteGSTliability;

      DeliveryChallanLine.COPYFILTERS(Rec);
      IF DeliveryChallanLine.FINDSET THEN
        REPEAT
          DeliveryChallanLine.CALCFIELDS("Remaining Quantity");
          GSTLiabilityLine.INIT;
          GSTLiabilityLine."Liability Document No." := LiabilityDocNo;
          GSTLiabilityLine2.RESET;
          GSTLiabilityLine2.SETRANGE("Liability Document No.",LiabilityDocNo);
          IF GSTLiabilityLine2.FINDLAST THEN
            GSTLiabilityLine."Liability Document Line No." := GSTLiabilityLine2."Liability Document Line No." + 10000
          ELSE
            GSTLiabilityLine."Liability Document Line No." := 10000;
          GSTLiabilityLine."Liability Date" := LiabilityDate;
          GSTLiabilityLine."Posting Date" := WORKDATE;
          GSTLiabilityLine.TRANSFERFIELDS(DeliveryChallanLine);
          UnitCost :=
            GetUnitCost(DeliveryChallanLine."Production Order No.",DeliveryChallanLine."Production Order Line No.",
              DeliveryChallanLine."Item No.");
          IF UnitCost = 0 THEN
            ERROR(CostErr,DeliveryChallanLine."Item No.");

          GSTLiabilityLine."GST Base Amount" := UnitCost * DeliveryChallanLine."Remaining Quantity";
          GSTLiabilityLine."GST Amount" := UpdateDetailedGSTEntryBuffer(DeliveryChallanLine,GSTLiabilityLine."GST Base Amount");
          IF GSTLiabilityLine."GST Base Amount" <> 0 THEN
            GSTLiabilityLine.TESTFIELD("GST Base Amount");
          GSTLiabilityLine.INSERT;
        UNTIL DeliveryChallanLine.NEXT = 0;

      PAGE.RUN(PAGE::"GST Liability Line");
    END;

    LOCAL PROCEDURE DeleteGSTliability@1500006();
    VAR
      DeliveryChallanLine@1500000 : Record 16324;
      GSTLiabilityLine@1500001 : Record 16424;
    BEGIN
      DeliveryChallanLine.COPYFILTERS(Rec);
      IF DeliveryChallanLine.FINDSET THEN
        REPEAT
          GSTLiabilityLine.DELETEALL;
        UNTIL DeliveryChallanLine.NEXT = 0;
    END;

    PROCEDURE PostedGSTLiability@1500007();
    VAR
      PostedGSTLiabilityLine@1500000 : Record 16425;
    BEGIN
      PostedGSTLiabilityLine.RESET;
      PostedGSTLiabilityLine.SETRANGE("Deliver Challan No.","Deliver Challan No.");
      PostedGSTLiabilityLine.SETRANGE("Line No.","Line No.");
      PAGE.RUN(PAGE::"Posted GST Liability",PostedGSTLiabilityLine);
    END;

    PROCEDURE GetUnitCost@1500003(ProdOrderNo@1500002 : Code[20];ProdOrderLineNo@1500001 : Integer;ItemNo@1500000 : Code[20]) : Decimal;
    VAR
      ProdOrderComponent@1500003 : Record 5407;
    BEGIN
      ProdOrderComponent.SETRANGE("Prod. Order No.",ProdOrderNo);
      ProdOrderComponent.SETRANGE("Prod. Order Line No.",ProdOrderLineNo);
      ProdOrderComponent.SETRANGE("Item No.",ItemNo);
      IF ProdOrderComponent.FINDFIRST THEN
        EXIT(ProdOrderComponent."Unit Cost");
    END;

    LOCAL PROCEDURE UpdateDetailedGSTEntryBuffer@1500010(DeliveryChallanLine@1500000 : Record 16324;Amount@1500001 : Decimal) : Decimal;
    VAR
      DetailedGSTEntryBuffer@1500003 : Record 16412;
      TotalGST@1500004 : Decimal;
      Sign@15000011 : Integer;
    BEGIN
      Sign := -1;
      DetailedGSTEntryBuffer.RESET;
      DetailedGSTEntryBuffer.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Line No.");
      DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::Production);
      DetailedGSTEntryBuffer.SETRANGE("Document No.",DeliveryChallanLine."Deliver Challan No.");
      DetailedGSTEntryBuffer.SETRANGE(Type,DetailedGSTEntryBuffer.Type::Item);
      DetailedGSTEntryBuffer.SETRANGE("No.",DeliveryChallanLine."Item No.");
      DetailedGSTEntryBuffer.SETRANGE("Line No.",DeliveryChallanLine."Line No.");
      IF DetailedGSTEntryBuffer.FINDSET THEN
        REPEAT
          DetailedGSTEntryBuffer."GST Base Amount" := Sign * Amount;
          DetailedGSTEntryBuffer."Delivery Challan Amount" := DetailedGSTEntryBuffer."GST Amount";
          IF DetailedGSTEntryBuffer."GST %" <> 0 THEN
            DetailedGSTEntryBuffer."GST Amount" :=
              Sign * GSTManagement.RoundGSTAmount(Amount * DetailedGSTEntryBuffer."GST %" / 100,'');
          DetailedGSTEntryBuffer.Quantity := Sign * DeliveryChallanLine."Remaining Quantity";
          TotalGST += DetailedGSTEntryBuffer."GST Amount";
          DetailedGSTEntryBuffer.MODIFY;
        UNTIL DetailedGSTEntryBuffer.NEXT = 0;
      EXIT(TotalGST);
    END;

    BEGIN
    END.
  }
}

