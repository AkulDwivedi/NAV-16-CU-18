OBJECT Table 16587 Tax Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=24-04-16;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.45778;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               LOCKTABLE;
               TaxJnlTemplate.GET("Journal Template Name");
               TaxJnlBatch.GET("Journal Template Name","Journal Batch Name");

               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
             END;

    OnDelete=VAR
               VATAdjustmentBuffer@1500000 : Record 16481;
             BEGIN
               VATAdjustmentBuffer.RESET;
               VATAdjustmentBuffer.SETRANGE("Journal Template Name","Journal Template Name");
               VATAdjustmentBuffer.SETRANGE("Journal Batch Name","Journal Batch Name");
               VATAdjustmentBuffer.SETRANGE("Line No.","Line No.");
               VATAdjustmentBuffer.DELETEALL;
             END;

    CaptionML=[ENU=Tax Journal Line;
               ENN=Tax Journal Line];
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="Tax Journal Template";
                                                   CaptionML=[ENU=Journal Template Name;
                                                              ENN=Journal Template Name] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 3   ;   ;Account Type        ;Option        ;OnValidate=BEGIN
                                                                IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) AND
                                                                   ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor])
                                                                THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                VALIDATE("Account No.",'');
                                                              END;

                                                   CaptionML=[ENU=Account Type;
                                                              ENN=Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account;
                                                                    ENN=G/L Account,Customer,Vendor,Bank Account];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account }
    { 4   ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Account Type=CONST(Bank Account)) "Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Account No." = '' THEN BEGIN
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    DATABASE::Job,'',
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Campaign,'');
                                                                  IF xRec."Account No." <> '' THEN BEGIN
                                                                    "Tax Area Code" := '';
                                                                    "Tax Liable" := FALSE;
                                                                    "Tax Group Code" := '';
                                                                    VALIDATE(PLA,FALSE);
                                                                  END;
                                                                  EXIT;
                                                                END;

                                                                CASE "Account Type" OF
                                                                  "Account Type"::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("Account No.");
                                                                      CheckGLAcc;
                                                                      GLSetup.GET;
                                                                      IF GLSetup."PLA Account" = "Account No." THEN
                                                                        PLA := TRUE;
                                                                      ReplaceInfo := "Bal. Account No." = '';
                                                                      IF NOT ReplaceInfo THEN BEGIN
                                                                        TaxJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                        ReplaceInfo := TaxJnlBatch."Bal. Account No." <> '';
                                                                      END;
                                                                      IF ReplaceInfo THEN
                                                                        Description := GLAcc.Name;

                                                                      "Tax Area Code" := GLAcc."Tax Area Code";
                                                                      "Tax Liable" := GLAcc."Tax Liable";
                                                                      "Tax Group Code" := GLAcc."Tax Group Code";
                                                                    END;
                                                                  "Account Type"::Customer:
                                                                    BEGIN
                                                                      Cust.GET("Account No.");
                                                                      Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      Description := Cust.Name;
                                                                      "Salespers./Purch. Code" := Cust."Salesperson Code";
                                                                    END;
                                                                  "Account Type"::Vendor:
                                                                    BEGIN
                                                                      Vend.GET("Account No.");
                                                                      Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      Description := Vend.Name;
                                                                      "Salespers./Purch. Code" := Vend."Purchaser Code";
                                                                    END;
                                                                  "Account Type"::"Bank Account":
                                                                    BEGIN
                                                                      BankAcc.GET("Account No.");
                                                                      BankAcc.TESTFIELD(Blocked,FALSE);
                                                                      ReplaceInfo := "Bal. Account No." = '';
                                                                      IF NOT ReplaceInfo THEN BEGIN
                                                                        TaxJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                        ReplaceInfo := TaxJnlBatch."Bal. Account No." <> '';
                                                                      END;
                                                                      IF ReplaceInfo THEN
                                                                        Description := BankAcc.Name;
                                                                    END;
                                                                END;

                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,'',
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,'');
                                                              END;

                                                   CaptionML=[ENU=Account No.;
                                                              ENN=Account No.] }
    { 5   ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                IF "Posting Date" < xRec."Posting Date" THEN
                                                                  ERROR(Text16508,"Posting Date",xRec."Posting Date");
                                                                VALIDATE("Document Date","Posting Date");
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date];
                                                   ClosingDates=Yes }
    { 6   ;   ;Document Type       ;Option        ;OnValidate=BEGIN
                                                                IF "Account No." <> '' THEN
                                                                  CASE "Account Type" OF
                                                                    "Account Type"::Customer:
                                                                      BEGIN
                                                                        Cust.GET("Account No.");
                                                                        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      END;
                                                                    "Account Type"::Vendor:
                                                                      BEGIN
                                                                        Vend.GET("Account No.");
                                                                        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      END;
                                                                  END;
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Account Type"::Customer:
                                                                      BEGIN
                                                                        Cust.GET("Bal. Account No.");
                                                                        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      END;
                                                                    "Account Type"::Vendor:
                                                                      BEGIN
                                                                        Vend.GET("Bal. Account No.");
                                                                        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 7   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 8   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 11  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account No." = '' THEN BEGIN
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    DATABASE::Job,'',
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Campaign,'');
                                                                  EXIT;
                                                                END;

                                                                CASE "Bal. Account Type" OF
                                                                  "Bal. Account Type"::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("Bal. Account No.");
                                                                      CheckGLAcc;
                                                                      GLSetup.GET;
                                                                      IF GLSetup."PLA Account" = "Bal. Account No." THEN
                                                                        PLA := TRUE;
                                                                      IF "Account No." = '' THEN
                                                                        Description := GLAcc.Name;
                                                                    END;
                                                                  "Bal. Account Type"::Customer:
                                                                    BEGIN
                                                                      Cust.GET("Bal. Account No.");
                                                                      Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      IF "Account No." = '' THEN
                                                                        Description := Cust.Name;
                                                                    END;
                                                                  "Bal. Account Type"::Vendor:
                                                                    BEGIN
                                                                      Vend.GET("Bal. Account No.");
                                                                      Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      IF "Account No." = '' THEN
                                                                        Description := Vend.Name;
                                                                    END;
                                                                  "Bal. Account Type"::"Bank Account":
                                                                    BEGIN
                                                                      BankAcc.GET("Bal. Account No.");
                                                                      BankAcc.TESTFIELD(Blocked,FALSE);
                                                                      IF "Account No." = '' THEN
                                                                        Description := BankAcc.Name;
                                                                    END;
                                                                END;

                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DATABASE::Job,'',
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,'');
                                                              END;

                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENN=Bal. Account No.] }
    { 13  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   AutoFormatType=1 }
    { 14  ;   ;Debit Amount        ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Debit Amount" := ROUND("Debit Amount",Currency."Amount Rounding Precision");
                                                                Amount := "Debit Amount";
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Debit Amount;
                                                              ENN=Debit Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 15  ;   ;Credit Amount       ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Credit Amount" := ROUND("Credit Amount",Currency."Amount Rounding Precision");
                                                                Amount := -"Credit Amount";
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Credit Amount;
                                                              ENN=Credit Amount];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 17  ;   ;Balance (LCY)       ;Decimal       ;CaptionML=[ENU=Balance (LCY);
                                                              ENN=Balance (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 24  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 25  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 26  ;   ;Salespers./Purch. Code;Code10      ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,'',
                                                                  DATABASE::Campaign,'');
                                                              END;

                                                   CaptionML=[ENU=Salespers./Purch. Code;
                                                              ENN=Salespers./Purch. Code] }
    { 29  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              ENN=Source Code];
                                                   Editable=No }
    { 30  ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ENN=System-Created Entry];
                                                   Editable=No }
    { 51  ;   ;Journal Batch Name  ;Code10        ;TableRelation="Tax Journal Batch".Name WHERE (Journal Template Name=FIELD(Journal Template Name));
                                                   CaptionML=[ENU=Journal Batch Name;
                                                              ENN=Journal Batch Name] }
    { 52  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENN=Reason Code] }
    { 63  ;   ;Bal. Account Type   ;Option        ;OnValidate=BEGIN
                                                                IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) AND
                                                                   ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor])
                                                                THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                VALIDATE("Bal. Account No.",'');
                                                              END;

                                                   CaptionML=[ENU=Bal. Account Type;
                                                              ENN=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account;
                                                                    ENN=G/L Account,Customer,Vendor,Bank Account];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account }
    { 76  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENN=Document Date];
                                                   ClosingDates=Yes }
    { 77  ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ENN=External Document No.] }
    { 80  ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Posting No. Series;
                                                              ENN=Posting No. Series] }
    { 82  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=Tax Area Code] }
    { 83  ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              ENN=Tax Liable] }
    { 84  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENN=Tax Group Code] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 13701;  ;Source Curr. Excise Amount;Decimal ;CaptionML=[ENU=Source Curr. Excise Amount;
                                                              ENN=Source Curr. Excise Amount];
                                                   Editable=No }
    { 13702;  ;Source Curr. Tax Amount;Decimal    ;CaptionML=[ENU=Source Curr. Tax Amount;
                                                              ENN=Source Curr. Tax Amount];
                                                   Editable=No }
    { 13703;  ;State Code          ;Code10        ;CaptionML=[ENU=State Code;
                                                              ENN=State Code] }
    { 13706;  ;Excise Bus. Posting Group;Code10   ;CaptionML=[ENU=Excise Bus. Posting Group;
                                                              ENN=Excise Bus. Posting Group] }
    { 13707;  ;Excise Prod. Posting Group;Code10  ;CaptionML=[ENU=Excise Prod. Posting Group;
                                                              ENN=Excise Prod. Posting Group] }
    { 13708;  ;Excise Amount       ;Decimal       ;CaptionML=[ENU=Excise Amount;
                                                              ENN=Excise Amount];
                                                   Editable=No }
    { 13716;  ;TDS/TCS Amount      ;Decimal       ;CaptionML=[ENU=TDS/TCS Amount;
                                                              ENN=TDS/TCS Amount];
                                                   Editable=No }
    { 13718;  ;Tax Amount          ;Decimal       ;CaptionML=[ENU=Tax Amount;
                                                              ENN=Tax Amount];
                                                   DecimalPlaces=0:4 }
    { 13719;  ;Excise Accounting Type;Option      ;CaptionML=[ENU=Excise Accounting Type;
                                                              ENN=Excise Accounting Type];
                                                   OptionCaptionML=[ENU=With CENVAT,Without CENVAT;
                                                                    ENN=With CENVAT,Without CENVAT];
                                                   OptionString=With CENVAT,Without CENVAT }
    { 13721;  ;PLA eCess Amount    ;Decimal       ;OnValidate=BEGIN
                                                                IF ExciseCenvatClaim.GET("Journal Template Name","Journal Batch Name","Line No.") THEN;
                                                                IF NOT PLA THEN BEGIN
                                                                  // IF ABS("PLA eCess Amount" + ExciseCenvatClaim."RG 23 A PART II eCess Amount" +
                                                                  //   ExciseCenvatClaim."RG 23 C PART II eCess Amount" + ExciseCenvatClaim."ST eCESS Amount") >
                                                                  // ABS("eCess Amount")
                                                                  // THEN
                                                                  // ERROR(Text13702);
                                                                  IF "PLA eCess Amount" <> 0 THEN
                                                                    ExciseValidation.CalcExcise("E.C.C. No.","PLA eCess Amount",Text13705);
                                                                END ELSE
                                                                  VALIDATE(
                                                                    Amount,"PLA BED Amount" + "PLA AED(GSI) Amount" + "PLA SED Amount" + "PLA SAED Amount" + "PLA CESS Amount" +
                                                                    "PLA NCCD Amount" + "PLA eCess Amount" + "PLA AED(TTA) Amount" + "PLA ADET Amount" + "PLA Excise Charge Amount" +
                                                                    "PLA ADE Amount" + "PLA SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=PLA eCess Amount;
                                                              ENN=PLA eCess Amount] }
    { 13726;  ;PLA SAED Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF ExciseCenvatClaim.GET("Journal Template Name","Journal Batch Name","Line No.") THEN;
                                                                IF NOT PLA THEN BEGIN
                                                                  // IF ABS("PLA SAED Amount" + ExciseCenvatClaim."RG 23 A PART II SAED Amount" + ExciseCenvatClaim."RG 23 C PART II SAED Amount" +
                                                                  //   ExciseCenvatClaim."ST SAED Amount") >   ABS("SAED Amount")
                                                                  // THEN
                                                                  // ERROR(Text13702);
                                                                  IF "PLA SAED Amount" <> 0 THEN
                                                                    ExciseValidation.CalcExcise("E.C.C. No.","PLA SAED Amount",Text13708);
                                                                END ELSE
                                                                  VALIDATE(
                                                                    Amount,"PLA BED Amount" + "PLA AED(GSI) Amount" + "PLA SED Amount" + "PLA SAED Amount" + "PLA CESS Amount" +
                                                                    "PLA NCCD Amount" + "PLA eCess Amount" + "PLA AED(TTA) Amount" + "PLA ADET Amount" + "PLA Excise Charge Amount" +
                                                                    "PLA ADE Amount" + "PLA SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=PLA SAED Amount;
                                                              ENN=PLA SAED Amount] }
    { 13729;  ;PLA CESS Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF ExciseCenvatClaim.GET("Journal Template Name","Journal Batch Name","Line No.") THEN;
                                                                IF NOT PLA THEN BEGIN
                                                                  // IF ABS("PLA CESS Amount" + ExciseCenvatClaim."RG 23 A PART II CESS Amount" +
                                                                  //   ExciseCenvatClaim."RG 23 C PART II CESS Amount") > ABS("CESS Amount") THEN
                                                                  // ERROR(Text13702);
                                                                  IF "PLA CESS Amount" <> 0 THEN
                                                                    ExciseValidation.CalcExcise("E.C.C. No.","PLA CESS Amount" + ExciseCenvatClaim."RG 23 A PART II CESS Amount" +
                                                                      ExciseCenvatClaim."RG 23 C PART II CESS Amount",
                                                                      Text13711);
                                                                END ELSE
                                                                  VALIDATE(
                                                                    Amount,"PLA BED Amount" + "PLA AED(GSI) Amount" + "PLA SED Amount" + "PLA SAED Amount" + "PLA CESS Amount" +
                                                                    "PLA NCCD Amount" + "PLA eCess Amount" + "PLA AED(TTA) Amount" + "PLA ADET Amount" + "PLA Excise Charge Amount" +
                                                                    "PLA ADE Amount" + "PLA SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=PLA CESS Amount;
                                                              ENN=PLA CESS Amount] }
    { 13732;  ;PLA NCCD Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF ExciseCenvatClaim.GET("Journal Template Name","Journal Batch Name","Line No.") THEN;
                                                                IF NOT PLA THEN BEGIN
                                                                  // IF ABS("PLA NCCD Amount" + ExciseCenvatClaim."RG 23 A PART II NCCD Amount" + ExciseCenvatClaim."RG 23 C PART II NCCD Amount" +
                                                                  //   ExciseCenvatClaim."ST NCCD Amount") >   ABS("NCCD Amount")
                                                                  // THEN
                                                                  // ERROR(Text13702);
                                                                  IF "PLA NCCD Amount" <> 0 THEN
                                                                    ExciseValidation.CalcExcise("E.C.C. No.","PLA NCCD Amount",Text13714);
                                                                END ELSE
                                                                  VALIDATE(
                                                                    Amount,"PLA BED Amount" + "PLA AED(GSI) Amount" + "PLA SED Amount" + "PLA SAED Amount" + "PLA CESS Amount" +
                                                                    "PLA NCCD Amount" + "PLA eCess Amount" + "PLA AED(TTA) Amount" + "PLA ADET Amount" + "PLA Excise Charge Amount" +
                                                                    "PLA ADE Amount" + "PLA SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=PLA NCCD Amount;
                                                              ENN=PLA NCCD Amount] }
    { 13736;  ;PLA                 ;Boolean       ;OnValidate=BEGIN
                                                                IF PLA THEN
                                                                  "Excise Charge" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=PLA;
                                                              ENN=PLA] }
    { 13737;  ;Tax %               ;Decimal       ;CaptionML=[ENU=Tax %;
                                                              ENN=Tax %] }
    { 13744;  ;Tax Base Amount     ;Decimal       ;CaptionML=[ENU=Tax Base Amount;
                                                              ENN=Tax Base Amount] }
    { 13747;  ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 13750;  ;Source Curr. Tax Base Amount;Decimal;
                                                   CaptionML=[ENU=Source Curr. Tax Base Amount;
                                                              ENN=Source Curr. Tax Base Amount];
                                                   Editable=No }
    { 13753;  ;Tax Amount (LCY)    ;Decimal       ;CaptionML=[ENU=Tax Amount (LCY);
                                                              ENN=Tax Amount (LCY)] }
    { 13754;  ;Tax Base Amount (LCY);Decimal      ;CaptionML=[ENU=Tax Base Amount (LCY);
                                                              ENN=Tax Base Amount (LCY)] }
    { 13758;  ;TDS Nature of Deduction;Code10     ;TableRelation="TDS Nature of Deduction";
                                                   OnValidate=VAR
                                                                CompanyInfo@1280000 : Record 79;
                                                                Location@1500000 : Record 14;
                                                              BEGIN
                                                                "TCS Nature of Collection" := '';
                                                                "TCS Type" := "TCS Type"::" ";
                                                                "T.C.A.N. No." := '';
                                                                TDSNOD.MODIFYALL(Mark,FALSE);
                                                                NODLines.RESET;
                                                                CASE "Party Type" OF
                                                                  "Party Type"::Vendor:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Vendor);
                                                                  "Party Type"::Customer:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Customer);
                                                                  "Party Type"::Party:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Party);
                                                                END;
                                                                NODLines.SETRANGE("No.","Party Code");
                                                                NODLines.SETRANGE("NOD/NOC","TDS Nature of Deduction");
                                                                IF (NOT NODLines.FIND('-')) AND ("TDS Nature of Deduction" <> '') THEN
                                                                  FIELDERROR("TDS Nature of Deduction",Text13701);

                                                                IF TDSNOD.GET("TDS Nature of Deduction") THEN BEGIN
                                                                  "TDS Category" := TDSNOD.Category;
                                                                  "TDS Group" := TDSNOD."TDS Group";
                                                                END ELSE BEGIN
                                                                  "TDS Category" := "TDS Category"::" ";
                                                                  "TDS Group" := "TDS Group"::" ";
                                                                END;
                                                                CompanyInfo.GET;
                                                                "T.A.N. No." := CompanyInfo."T.A.N. No.";
                                                                IF "Location Code" <> '' THEN BEGIN
                                                                  Location.GET("Location Code");
                                                                  "T.A.N. No." := Location."T.A.N. No.";
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              NODLines.RESET;
                                                              CASE "Party Type" OF
                                                                "Party Type"::Vendor:
                                                                  NODLines.SETRANGE(Type,NODLines.Type::Vendor);
                                                                "Party Type"::Customer:
                                                                  NODLines.SETRANGE(Type,NODLines.Type::Customer);
                                                                "Party Type"::Party:
                                                                  NODLines.SETRANGE(Type,NODLines.Type::Party);
                                                              END;
                                                              NODLines.SETRANGE("No.","Party Code");
                                                              NODLines.SETFILTER("TDS Group",'<>%1',NODLines."TDS Group"::Others);
                                                              IF NODLines.FIND('-') THEN
                                                                REPEAT
                                                                  TDSNOD.RESET;
                                                                  TDSNOD.SETRANGE(Code,NODLines."NOD/NOC");
                                                                  IF TDSNOD.FINDFIRST THEN
                                                                    TDSNOD.MODIFYALL(Mark,TRUE);
                                                                  COMMIT;
                                                                UNTIL NODLines.NEXT = 0;

                                                              TDSNOD.RESET;
                                                              TDSNOD.SETRANGE(Mark,TRUE);

                                                              IF PAGE.RUNMODAL(PAGE::"TDS Nature of Deductions",TDSNOD) = ACTION::LookupOK THEN BEGIN
                                                                NODLines.RESET;
                                                                CASE "Party Type" OF
                                                                  "Party Type"::Vendor:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Vendor);
                                                                  "Party Type"::Customer:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Customer);
                                                                  "Party Type"::Party:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Party);
                                                                END;
                                                                NODLines.SETRANGE("No.","Party Code");
                                                                NODLines.SETRANGE("NOD/NOC",TDSNOD.Code);
                                                                NODLines.SETFILTER("TDS Group",'<>%1',NODLines."TDS Group"::Others);
                                                                IF (NOT NODLines.FIND('-')) AND (TDSNOD.Code <> '') THEN
                                                                  FIELDERROR("TDS Nature of Deduction",Text13701);
                                                                "TDS Nature of Deduction" := TDSNOD.Code;
                                                              END;

                                                              VALIDATE("TDS Nature of Deduction");
                                                            END;

                                                   CaptionML=[ENU=TDS Nature of Deduction;
                                                              ENN=TDS Nature of Deduction] }
    { 13759;  ;Assessee Code       ;Code10        ;TableRelation="Assessee Code";
                                                   CaptionML=[ENU=Assessee Code;
                                                              ENN=Assessee Code];
                                                   Editable=No }
    { 13760;  ;TDS/TCS %           ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."TDS/TCS %" > 0 THEN BEGIN
                                                                  IF "Debit Amount" <> 0 THEN
                                                                    TDSAmt := "Debit Amount"
                                                                  ELSE
                                                                    TDSAmt := "Credit Amount";

                                                                  IF "Bal. TDS/TCS Including SHECESS" <> 0 THEN
                                                                    TDSAmt := "Bal. TDS/TCS Including SHECESS";
                                                                  "Bal. TDS/TCS Including SHECESS" := ROUND("TDS/TCS %" * TDSAmt / xRec."TDS/TCS %",Currency."Amount Rounding Precision");
                                                                  "TDS/TCS Amount" := ROUND("TDS/TCS %" * TDSAmt / xRec."TDS/TCS %",Currency."Amount Rounding Precision");
                                                                END ELSE BEGIN
                                                                  "Bal. TDS/TCS Including SHECESS" := ROUND(("TDS/TCS %" * (1 + "Surcharge %" / 100)) * Amount / 100,
                                                                      Currency."Amount Rounding Precision");
                                                                  "TDS/TCS Amount" := ROUND("TDS/TCS %" * Amount / 100,Currency."Amount Rounding Precision");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=TDS/TCS %;
                                                              ENN=TDS/TCS %];
                                                   Editable=No }
    { 13761;  ;TDS/TCS Amt Incl Surcharge;Decimal ;CaptionML=[ENU=TDS/TCS Amt Incl Surcharge;
                                                              ENN=TDS/TCS Amt Incl Surcharge];
                                                   Editable=No }
    { 13763;  ;Bal. TDS/TCS Including SHECESS;Decimal;
                                                   CaptionML=[ENU=Bal. TDS/TCS Including SHECESS;
                                                              ENN=Bal. TDS/TCS Including SHECESS];
                                                   Editable=No }
    { 13764;  ;Party Type          ;Option        ;InitValue=[ ];
                                                   CaptionML=[ENU=Party Type;
                                                              ENN=Party Type];
                                                   OptionCaptionML=[ENU=" ,Party,Customer,Vendor";
                                                                    ENN=" ,Party,Customer,Vendor"];
                                                   OptionString=[ ,Party,Customer,Vendor];
                                                   BlankNumbers=DontBlank }
    { 13765;  ;Party Code          ;Code20        ;TableRelation=IF (Party Type=FILTER(Party)) Party.Code
                                                                 ELSE IF (Party Type=FILTER(Vendor)) Vendor.No.
                                                                 ELSE IF (Party Type=FILTER(Customer)) Customer.No.;
                                                   OnValidate=BEGIN
                                                                CASE "Party Type" OF
                                                                  "Party Type"::Vendor:
                                                                    BEGIN
                                                                      VALIDATE("Account Type","Account Type"::Vendor);
                                                                      VALIDATE("Account No.","Party Code");
                                                                    END;
                                                                  "Party Type"::Customer:
                                                                    BEGIN
                                                                      VALIDATE("Account Type","Account Type"::Customer);
                                                                      VALIDATE("Account No.","Party Code");
                                                                    END;
                                                                END;
                                                                IF NODHeader.GET("Party Type","Party Code") THEN BEGIN
                                                                  VALIDATE("Assessee Code",NODHeader."Assesse Code");
                                                                  VALIDATE("TDS Nature of Deduction",'');
                                                                END ELSE BEGIN
                                                                  VALIDATE("Assessee Code",'');
                                                                  VALIDATE("TDS Nature of Deduction",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Party Code;
                                                              ENN=Party Code] }
    { 13766;  ;BED Amount          ;Decimal       ;OnValidate=BEGIN
                                                                IF "Excise Charge" THEN
                                                                  VALIDATE(Amount,
                                                                    "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
                                                                    "eCess Amount" + "AED(TTA) Amount" + "ADET Amount" + "ADE Amount" + "Excise Charge Amount" + "ADC VAT Amount" +
                                                                    "SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=BED Amount;
                                                              ENN=BED Amount] }
    { 13767;  ;AED(GSI) Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Excise Charge" THEN
                                                                  VALIDATE(Amount,
                                                                    "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
                                                                    "eCess Amount" + "AED(TTA) Amount" + "ADET Amount" + "ADE Amount" + "Excise Charge Amount" + "ADC VAT Amount" +
                                                                    "SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=AED(GSI) Amount;
                                                              ENN=AED(GSI) Amount] }
    { 13768;  ;SED Amount          ;Decimal       ;OnValidate=BEGIN
                                                                IF "Excise Charge" THEN
                                                                  VALIDATE(Amount,
                                                                    "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
                                                                    "eCess Amount" + "AED(TTA) Amount" + "ADET Amount" + "ADE Amount" + "Excise Charge Amount" + "ADC VAT Amount" +
                                                                    "SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=SED Amount;
                                                              ENN=SED Amount] }
    { 13769;  ;SAED Amount         ;Decimal       ;OnValidate=BEGIN
                                                                IF "Excise Charge" THEN
                                                                  VALIDATE(Amount,
                                                                    "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
                                                                    "eCess Amount" + "AED(TTA) Amount" + "ADET Amount" + "ADE Amount" + "Excise Charge Amount" + "ADC VAT Amount" +
                                                                    "SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=SAED Amount;
                                                              ENN=SAED Amount] }
    { 13770;  ;CESS Amount         ;Decimal       ;OnValidate=BEGIN
                                                                IF "Excise Charge" THEN
                                                                  VALIDATE(Amount,
                                                                    "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
                                                                    "eCess Amount" + "AED(TTA) Amount" + "ADET Amount" + "ADE Amount" + "Excise Charge Amount" + "ADC VAT Amount" +
                                                                    "SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=CESS Amount;
                                                              ENN=CESS Amount] }
    { 13771;  ;NCCD Amount         ;Decimal       ;OnValidate=BEGIN
                                                                IF "Excise Charge" THEN
                                                                  VALIDATE(Amount,
                                                                    "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
                                                                    "eCess Amount" + "AED(TTA) Amount" + "ADET Amount" + "ADE Amount" + "Excise Charge Amount" + "ADC VAT Amount" +
                                                                    "SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=NCCD Amount;
                                                              ENN=NCCD Amount] }
    { 13772;  ;eCess Amount        ;Decimal       ;OnValidate=BEGIN
                                                                IF "Excise Charge" THEN
                                                                  VALIDATE(Amount,
                                                                    "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
                                                                    "eCess Amount" + "AED(TTA) Amount" + "ADET Amount" + "ADE Amount" + "Excise Charge Amount" + "ADC VAT Amount" +
                                                                    "SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=eCess Amount;
                                                              ENN=eCess Amount] }
    { 13773;  ;Form Code           ;Code10        ;TableRelation="Form Codes";
                                                   CaptionML=[ENU=Form Code;
                                                              ENN=Form Code] }
    { 13774;  ;Form No.            ;Code10        ;TableRelation="Tax Forms Details";
                                                   CaptionML=[ENU=Form No.;
                                                              ENN=Form No.] }
    { 13786;  ;TDS Category        ;Option        ;CaptionML=[ENU=TDS Category;
                                                              ENN=TDS Category];
                                                   OptionCaptionML=[ENU=" ,A,C,S";
                                                                    ENN=" ,A,C,S"];
                                                   OptionString=[ ,A,C,S] }
    { 13787;  ;Surcharge %         ;Decimal       ;CaptionML=[ENU=Surcharge %;
                                                              ENN=Surcharge %];
                                                   Editable=No }
    { 13788;  ;Surcharge Amount    ;Decimal       ;CaptionML=[ENU=Surcharge Amount;
                                                              ENN=Surcharge Amount];
                                                   Editable=No }
    { 13789;  ;Concessional Code   ;Code10        ;TableRelation="Concessional Codes";
                                                   CaptionML=[ENU=Concessional Code;
                                                              ENN=Concessional Code];
                                                   Editable=No }
    { 13791;  ;PLA AED(GSI) Amount ;Decimal       ;OnValidate=BEGIN
                                                                IF ExciseCenvatClaim.GET("Journal Template Name","Journal Batch Name","Line No.") THEN;
                                                                IF NOT PLA THEN BEGIN
                                                                  // IF ABS("PLA AED(GSI) Amount" + ExciseCenvatClaim."RG 23A PART II AED(GSI) Amount" +
                                                                  //   ExciseCenvatClaim."RG 23C PART II AED(GSI) Amount" +
                                                                  //   ExciseCenvatClaim."ST AED(GSI) Amount") > ABS("AED(GSI) Amount")
                                                                  // THEN
                                                                  // ERROR(Text13702);
                                                                  IF "PLA AED(GSI) Amount" <> 0 THEN
                                                                    ExciseValidation.CalcExcise("E.C.C. No.","PLA AED(GSI) Amount",Text13717);
                                                                END ELSE
                                                                  VALIDATE(Amount,
                                                                    "PLA BED Amount" + "PLA AED(GSI) Amount" + "PLA SED Amount" + "PLA SAED Amount" + "PLA CESS Amount" +
                                                                    "PLA NCCD Amount" + "PLA eCess Amount" + "PLA AED(TTA) Amount" + "PLA ADET Amount" + "PLA Excise Charge Amount" +
                                                                    "PLA ADE Amount" + "PLA SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=PLA AED(GSI) Amount;
                                                              ENN=PLA AED(GSI) Amount] }
    { 13794;  ;PLA BED Amount      ;Decimal       ;OnValidate=BEGIN
                                                                IF ExciseCenvatClaim.GET("Journal Template Name","Journal Batch Name","Line No.") THEN;

                                                                IF NOT PLA THEN BEGIN
                                                                  // IF ABS("PLA BED Amount" + ExciseCenvatClaim."RG 23 A PART II BED Amount" + ExciseCenvatClaim."RG 23 C PART II BED Amount" +
                                                                  //   ExciseCenvatClaim."ST BED Amount") > ABS("BED Amount")
                                                                  // THEN
                                                                  // ERROR(Text13702);
                                                                  IF "PLA BED Amount" <> 0 THEN
                                                                    ExciseValidation.CalcExcise("E.C.C. No.","PLA BED Amount",Text13720);
                                                                END ELSE
                                                                  VALIDATE(Amount,
                                                                    "PLA BED Amount" + "PLA AED(GSI) Amount" + "PLA SED Amount" + "PLA SAED Amount" + "PLA CESS Amount" +
                                                                    "PLA NCCD Amount" + "PLA eCess Amount" + "PLA AED(TTA) Amount" + "PLA ADET Amount" + "PLA Excise Charge Amount" +
                                                                    "PLA ADE Amount" + "PLA SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=PLA BED Amount;
                                                              ENN=PLA BED Amount] }
    { 13797;  ;PLA SED Amount      ;Decimal       ;OnValidate=BEGIN
                                                                IF ExciseCenvatClaim.GET("Journal Template Name","Journal Batch Name","Line No.") THEN;
                                                                IF NOT PLA THEN BEGIN
                                                                  // IF ABS("PLA SED Amount" + ExciseCenvatClaim."RG 23 A PART II SED Amount" + ExciseCenvatClaim."RG 23 C PART II SED Amount" +
                                                                  //   ExciseCenvatClaim."ST SED Amount") > ABS("SED Amount")
                                                                  // THEN
                                                                  // ERROR(Text13702);
                                                                  IF "PLA SED Amount" <> 0 THEN
                                                                    ExciseValidation.CalcExcise("E.C.C. No.","PLA SED Amount",Text13723);
                                                                END ELSE
                                                                  VALIDATE(Amount,
                                                                    "PLA BED Amount" + "PLA AED(GSI) Amount" + "PLA SED Amount" + "PLA SAED Amount" + "PLA CESS Amount" +
                                                                    "PLA NCCD Amount" + "PLA eCess Amount" + "PLA AED(TTA) Amount" + "PLA ADET Amount" + "PLA Excise Charge Amount" +
                                                                    "PLA ADE Amount" + "PLA SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=PLA SED Amount;
                                                              ENN=PLA SED Amount] }
    { 16303;  ;TDS Entry           ;Boolean       ;CaptionML=[ENU=TDS Entry;
                                                              ENN=TDS Entry] }
    { 16305;  ;TDS/TCS % Applied   ;Decimal       ;OnValidate=BEGIN
                                                                IF "Work Tax" THEN
                                                                  FIELDERROR("TDS/TCS % Applied");
                                                                "TDS/TCS Adjusted" := TRUE;
                                                                "Balance TDS/TCS Amount" := "TDS/TCS % Applied" * "TDS/TCS Base Amount" / 100;
                                                                "Surcharge Base Amount" := "Balance TDS/TCS Amount";

                                                                IF ("Surcharge % Applied" = 0) AND (NOT "Surcharge Adjusted") THEN BEGIN
                                                                  "Surcharge % Applied" := "Surcharge %";
                                                                  "Balance Surcharge Amount" := "Surcharge %" * "Balance TDS/TCS Amount" / 100;
                                                                END ELSE
                                                                  "Balance Surcharge Amount" := RoundTDSAmount("Balance TDS/TCS Amount" * "Surcharge % Applied" / 100);

                                                                IF ("eCESS % Applied" = 0) AND (NOT "TDS/TCS eCess Adjusted") THEN BEGIN
                                                                  "eCESS % Applied" := "eCESS %";
                                                                  "Balance eCESS on TDS/TCS Amt" := "eCESS %" * ("Balance TDS/TCS Amount" + "Balance Surcharge Amount") / 100;
                                                                END ELSE
                                                                  "Balance eCESS on TDS/TCS Amt" := RoundTDSAmount(("Balance TDS/TCS Amount" + "Balance Surcharge Amount") *
                                                                      "eCESS % Applied" / 100);

                                                                IF ("SHE Cess % Applied" = 0) AND (NOT "TDS/TCS SHE Cess Adjusted") THEN BEGIN
                                                                  "SHE Cess % Applied" := "SHE Cess % on TDS/TCS";
                                                                  "Bal. SHE Cess on TDS/TCS Amt" := "SHE Cess % on TDS/TCS" * ("Balance TDS/TCS Amount" + "Balance Surcharge Amount") / 100;
                                                                END ELSE
                                                                  "Bal. SHE Cess on TDS/TCS Amt" := RoundTDSAmount(("Balance TDS/TCS Amount" + "Balance Surcharge Amount") *
                                                                      "SHE Cess % Applied" / 100);

                                                                IF ("TDS/TCS % Applied" = 0) AND "TDS/TCS Adjusted" THEN BEGIN
                                                                  VALIDATE("Surcharge % Applied",0);
                                                                  VALIDATE("eCESS % Applied",0);
                                                                  VALIDATE("SHE Cess % Applied",0);
                                                                END;

                                                                "Balance TDS/TCS Amount" := RoundTDSAmount("Balance TDS/TCS Amount");
                                                                "Balance Surcharge Amount" := RoundTDSAmount("Balance Surcharge Amount");
                                                                "Balance eCESS on TDS/TCS Amt" := RoundTDSAmount("Balance eCESS on TDS/TCS Amt");
                                                                "Bal. SHE Cess on TDS/TCS Amt" := RoundTDSAmount("Bal. SHE Cess on TDS/TCS Amt");

                                                                IF "TDS Nature of Deduction" <> '' THEN BEGIN
                                                                  IF "Debit Amount" < RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                       "Bal. SHE Cess on TDS/TCS Amt")
                                                                  THEN BEGIN
                                                                    Amount := (RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                                 "Bal. SHE Cess on TDS/TCS Amt") - "Debit Amount");
                                                                    "Bal. TDS/TCS Including SHECESS" :=
                                                                      ABS(RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                          "Bal. SHE Cess on TDS/TCS Amt"));
                                                                  END ELSE BEGIN
                                                                    Amount := -("Debit Amount" - RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" +
                                                                                  "Balance eCESS on TDS/TCS Amt" + "Bal. SHE Cess on TDS/TCS Amt"));
                                                                    "Bal. TDS/TCS Including SHECESS" := ABS(RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" +
                                                                          "Balance eCESS on TDS/TCS Amt" + "Bal. SHE Cess on TDS/TCS Amt"));
                                                                  END;
                                                                END ELSE
                                                                  IF "TCS Nature of Collection" <> '' THEN BEGIN
                                                                    IF "Debit Amount" < RoundTCSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                         "Bal. SHE Cess on TDS/TCS Amt")
                                                                    THEN BEGIN
                                                                      Amount := (RoundTCSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                                   "Bal. SHE Cess on TDS/TCS Amt") - "Debit Amount");
                                                                      "Total TDS/TCS Incl. SHE CESS" :=
                                                                        ABS(RoundTCSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                            "Bal. SHE Cess on TDS/TCS Amt"));
                                                                      "Bal. TDS/TCS Including SHECESS" :=
                                                                        ABS(RoundTCSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                            "Bal. SHE Cess on TDS/TCS Amt"));
                                                                    END ELSE BEGIN
                                                                      Amount := -("Debit Amount" - RoundTCSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" +
                                                                                    "Balance eCESS on TDS/TCS Amt" + "Bal. SHE Cess on TDS/TCS Amt"));
                                                                      "Total TDS/TCS Incl. SHE CESS" :=
                                                                        ABS(RoundTCSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                            "Bal. SHE Cess on TDS/TCS Amt"));
                                                                      "Bal. TDS/TCS Including SHECESS" :=
                                                                        ABS(RoundTCSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                            "Bal. SHE Cess on TDS/TCS Amt"));
                                                                    END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=TDS/TCS % Applied;
                                                              ENN=TDS/TCS % Applied] }
    { 16306;  ;TDS/TCS Invoice No. ;Code20        ;CaptionML=[ENU=TDS/TCS Invoice No.;
                                                              ENN=TDS/TCS Invoice No.];
                                                   Editable=No }
    { 16307;  ;TDS/TCS Base Amount ;Decimal       ;CaptionML=[ENU=TDS/TCS Base Amount;
                                                              ENN=TDS/TCS Base Amount];
                                                   Editable=No }
    { 16308;  ;Challan No.         ;Code20        ;CaptionML=[ENU=Challan No.;
                                                              ENN=Challan No.] }
    { 16309;  ;Challan Date        ;Date          ;CaptionML=[ENU=Challan Date;
                                                              ENN=Challan Date] }
    { 16310;  ;Adjustment          ;Boolean       ;CaptionML=[ENU=Adjustment;
                                                              ENN=Adjustment];
                                                   Editable=No }
    { 16311;  ;TDS/TCS Transaction No.;Integer    ;CaptionML=[ENU=TDS/TCS Transaction No.;
                                                              ENN=TDS/TCS Transaction No.];
                                                   Editable=No }
    { 16313;  ;E.C.C. No.          ;Code20        ;TableRelation="E.C.C. Nos.";
                                                   CaptionML=[ENU=E.C.C. No.;
                                                              ENN=E.C.C. No.] }
    { 16353;  ;Balance Surcharge Amount;Decimal   ;CaptionML=[ENU=Balance Surcharge Amount;
                                                              ENN=Balance Surcharge Amount];
                                                   Editable=No }
    { 16357;  ;Surcharge % Applied ;Decimal       ;OnValidate=VAR
                                                                BalanceTDS@1280000 : Decimal;
                                                              BEGIN
                                                                IF "Work Tax" THEN
                                                                  FIELDERROR("Surcharge % Applied");

                                                                IF ("TDS/TCS % Applied" = 0) AND (NOT "TDS/TCS Adjusted") THEN
                                                                  BalanceTDS := "TDS/TCS Base Amount" * "TDS/TCS %" / 100
                                                                ELSE
                                                                  BalanceTDS := "TDS/TCS Base Amount" * "TDS/TCS % Applied" / 100;

                                                                "Surcharge Adjusted" := TRUE;
                                                                "Balance Surcharge Amount" := "Surcharge % Applied" * BalanceTDS / 100;

                                                                IF ("eCESS % Applied" = 0) AND (NOT "TDS/TCS eCess Adjusted") THEN
                                                                  "Balance eCESS on TDS/TCS Amt" := ("Balance Surcharge Amount" + BalanceTDS) * "eCESS %" / 100
                                                                ELSE
                                                                  "Balance eCESS on TDS/TCS Amt" := RoundTDSAmount(("Balance Surcharge Amount" + BalanceTDS) * "eCESS % Applied" / 100);

                                                                IF ("SHE Cess % Applied" = 0) AND (NOT "TDS/TCS SHE Cess Adjusted") THEN
                                                                  "Bal. SHE Cess on TDS/TCS Amt" := ("Balance Surcharge Amount" + BalanceTDS) * "SHE Cess % on TDS/TCS" / 100
                                                                ELSE
                                                                  "Bal. SHE Cess on TDS/TCS Amt" := RoundTDSAmount(("Balance Surcharge Amount" + BalanceTDS) * "SHE Cess % Applied" / 100);

                                                                "Balance TDS/TCS Amount" := RoundTDSAmount(BalanceTDS);
                                                                "Balance Surcharge Amount" := RoundTDSAmount("Balance Surcharge Amount");
                                                                "Balance eCESS on TDS/TCS Amt" := RoundTDSAmount("Balance eCESS on TDS/TCS Amt");
                                                                "Bal. SHE Cess on TDS/TCS Amt" := RoundTDSAmount("Bal. SHE Cess on TDS/TCS Amt");

                                                                IF "Debit Amount" < RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                     "Bal. SHE Cess on TDS/TCS Amt")
                                                                THEN BEGIN
                                                                  Amount := RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                      "Bal. SHE Cess on TDS/TCS Amt") - "Debit Amount";
                                                                  "Bal. TDS/TCS Including SHECESS" :=
                                                                    ABS(RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                        "Bal. SHE Cess on TDS/TCS Amt"));
                                                                END ELSE BEGIN
                                                                  Amount := -("Debit Amount" - RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" +
                                                                                "Balance eCESS on TDS/TCS Amt" + "Bal. SHE Cess on TDS/TCS Amt"));
                                                                  "Bal. TDS/TCS Including SHECESS" :=
                                                                    ABS(RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                        "Bal. SHE Cess on TDS/TCS Amt"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Surcharge % Applied;
                                                              ENN=Surcharge % Applied] }
    { 16358;  ;Surcharge Base Amount;Decimal      ;CaptionML=[ENU=Surcharge Base Amount;
                                                              ENN=Surcharge Base Amount];
                                                   Editable=No }
    { 16359;  ;TDS Group           ;Option        ;CaptionML=[ENU=TDS Group;
                                                              ENN=TDS Group];
                                                   OptionCaptionML=[ENU=" ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others";
                                                                    ENN=" ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others"];
                                                   OptionString=[ ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others];
                                                   Editable=No }
    { 16362;  ;Balance TDS/TCS Amount;Decimal     ;CaptionML=[ENU=Balance TDS/TCS Amount;
                                                              ENN=Balance TDS/TCS Amount];
                                                   Editable=No }
    { 16363;  ;Temp TDS/TCS Base   ;Decimal       ;CaptionML=[ENU=Temp TDS/TCS Base;
                                                              ENN=Temp TDS/TCS Base] }
    { 16366;  ;Excise Charge       ;Boolean       ;OnValidate=BEGIN
                                                                IF "Excise Charge" = TRUE THEN BEGIN
                                                                  TESTFIELD(PLA,FALSE);
                                                                  TESTFIELD("Account Type","Account Type"::"G/L Account");
                                                                  TESTFIELD("Bal. Account Type","Bal. Account Type"::"G/L Account");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Excise Charge;
                                                              ENN=Excise Charge] }
    { 16367;  ;Excise Charge Amount;Decimal       ;OnValidate=BEGIN
                                                                IF "Excise Charge" THEN BEGIN
                                                                  TESTFIELD("Excise Record","Excise Record"::" ");
                                                                  VALIDATE(Amount,
                                                                    "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
                                                                    "eCess Amount" + "AED(TTA) Amount" + "ADET Amount" + "ADE Amount" + "Excise Charge Amount" + "ADC VAT Amount" +
                                                                    "SHE Cess Amount");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Excise Charge Amount;
                                                              ENN=Excise Charge Amount] }
    { 16368;  ;PLA Excise Charge Amount;Decimal   ;OnValidate=BEGIN
                                                                IF NOT PLA THEN BEGIN
                                                                  IF ABS("PLA Excise Charge Amount") > ABS("Excise Charge Amount") THEN
                                                                    ERROR(Text13702);
                                                                END ELSE
                                                                  VALIDATE(Amount,
                                                                    "PLA BED Amount" + "PLA AED(GSI) Amount" + "PLA SED Amount" + "PLA SAED Amount" + "PLA CESS Amount" +
                                                                    "PLA NCCD Amount" + "PLA eCess Amount" + "PLA AED(TTA) Amount" + "PLA ADET Amount" + "PLA Excise Charge Amount" +
                                                                    "PLA ADE Amount" + "PLA SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=PLA Excise Charge Amount;
                                                              ENN=PLA Excise Charge Amount] }
    { 16369;  ;Excise Record       ;Option        ;OnValidate=BEGIN
                                                                IF "Excise Charge" THEN
                                                                  IF "Excise Record" <> "Excise Record"::" " THEN
                                                                    TESTFIELD("Excise Charge Amount",0);
                                                              END;

                                                   CaptionML=[ENU=Excise Record;
                                                              ENN=Excise Record];
                                                   OptionCaptionML=[ENU=" ,RG23A,RG23C";
                                                                    ENN=" ,RG23A,RG23C"];
                                                   OptionString=[ ,RG23A,RG23C];
                                                   BlankZero=Yes }
    { 16374;  ;Deferred            ;Boolean       ;OnValidate=BEGIN
                                                                IF Deferred THEN
                                                                  TESTFIELD("ADC VAT Amount",0);
                                                              END;

                                                   CaptionML=[ENU=Deferred;
                                                              ENN=Deferred] }
    { 16383;  ;eCESS %             ;Decimal       ;CaptionML=[ENU=eCESS %;
                                                              ENN=eCESS %];
                                                   Editable=No }
    { 16384;  ;eCESS on TDS/TCS Amount;Decimal    ;CaptionML=[ENU=eCESS on TDS/TCS Amount;
                                                              ENN=eCESS on TDS/TCS Amount];
                                                   Editable=No }
    { 16385;  ;Total TDS/TCS Incl. SHE CESS;Decimal;
                                                   CaptionML=[ENU=Total TDS/TCS Incl. SHE CESS;
                                                              ENN=Total TDS/TCS Incl. SHE CESS];
                                                   Editable=No }
    { 16386;  ;eCESS Base Amount   ;Decimal       ;CaptionML=[ENU=eCESS Base Amount;
                                                              ENN=eCESS Base Amount] }
    { 16387;  ;eCESS % Applied     ;Decimal       ;OnValidate=VAR
                                                                BalanceTDS@1280000 : Decimal;
                                                                BalanceSurcharge@1280001 : Decimal;
                                                              BEGIN
                                                                IF "Work Tax" THEN
                                                                  FIELDERROR("eCESS % Applied");
                                                                IF ("TDS/TCS % Applied" = 0) AND (NOT "TDS/TCS Adjusted") THEN BEGIN
                                                                  BalanceTDS := "TDS/TCS Base Amount" * "TDS/TCS %" / 100
                                                                END ELSE
                                                                  BalanceTDS := "TDS/TCS Base Amount" * "TDS/TCS % Applied" / 100;

                                                                IF ("Surcharge % Applied" = 0) AND (NOT "Surcharge Adjusted") THEN
                                                                  BalanceSurcharge := BalanceTDS * "Surcharge %" / 100
                                                                ELSE
                                                                  BalanceSurcharge := BalanceTDS * "Surcharge % Applied" / 100;

                                                                "TDS/TCS eCess Adjusted" := TRUE;
                                                                "Balance eCESS on TDS/TCS Amt" := (BalanceTDS + BalanceSurcharge) * "eCESS % Applied" / 100;

                                                                IF ("SHE Cess % Applied" = 0) AND (NOT "TDS/TCS SHE Cess Adjusted") THEN
                                                                  "Bal. SHE Cess on TDS/TCS Amt" := (BalanceTDS + BalanceSurcharge) * "SHE Cess % on TDS/TCS" / 100
                                                                ELSE
                                                                  "Bal. SHE Cess on TDS/TCS Amt" := (BalanceTDS + BalanceSurcharge) * "SHE Cess % Applied" / 100;

                                                                "Balance TDS/TCS Amount" := RoundTDSAmount(BalanceTDS);
                                                                "Balance Surcharge Amount" := RoundTDSAmount(BalanceSurcharge);
                                                                "Balance eCESS on TDS/TCS Amt" := RoundTDSAmount("Balance eCESS on TDS/TCS Amt");
                                                                "Bal. SHE Cess on TDS/TCS Amt" := RoundTDSAmount("Bal. SHE Cess on TDS/TCS Amt");

                                                                IF "Debit Amount" < RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                     "Bal. SHE Cess on TDS/TCS Amt")
                                                                THEN BEGIN
                                                                  Amount := (RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                               "Bal. SHE Cess on TDS/TCS Amt") - "Debit Amount");
                                                                  "Bal. TDS/TCS Including SHECESS" :=
                                                                    ABS(RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                        "Bal. SHE Cess on TDS/TCS Amt"));
                                                                END ELSE BEGIN
                                                                  Amount :=
                                                                    -("Debit Amount" - RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                        "Bal. SHE Cess on TDS/TCS Amt"));
                                                                  "Bal. TDS/TCS Including SHECESS" :=
                                                                    ABS(RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                        "Bal. SHE Cess on TDS/TCS Amt"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=eCESS % Applied;
                                                              ENN=eCESS % Applied] }
    { 16388;  ;Balance eCESS on TDS/TCS Amt;Decimal;
                                                   CaptionML=[ENU=Balance eCESS on TDS/TCS Amt;
                                                              ENN=Balance eCESS on TDS/TCS Amt] }
    { 16389;  ;Per Contract        ;Boolean       ;CaptionML=[ENU=Per Contract;
                                                              ENN=Per Contract] }
    { 16390;  ;Capital Item        ;Boolean       ;CaptionML=[ENU=Capital Item;
                                                              ENN=Capital Item] }
    { 16391;  ;Item No.            ;Code20        ;CaptionML=[ENU=Item No.;
                                                              ENN=Item No.] }
    { 16452;  ;ADET Amount         ;Decimal       ;OnValidate=BEGIN
                                                                IF "Excise Charge" THEN
                                                                  VALIDATE(Amount,
                                                                    "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
                                                                    "eCess Amount" + "AED(TTA) Amount" + "ADET Amount" + "Excise Charge Amount" + "ADE Amount" + "ADC VAT Amount" +
                                                                    "SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=ADET Amount;
                                                              ENN=ADET Amount];
                                                   AutoFormatType=1 }
    { 16453;  ;PLA ADET Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF ExciseCenvatClaim.GET("Journal Template Name","Journal Batch Name","Line No.") THEN;
                                                                IF NOT PLA THEN BEGIN
                                                                  // IF ABS("PLA ADET Amount" + ExciseCenvatClaim."RG 23 A Part II ADET Amount" + ExciseCenvatClaim."RG 23 C Part II ADET Amount" +
                                                                  //   ExciseCenvatClaim."ST ADET Amount") >   ABS("ADET Amount")
                                                                  // THEN
                                                                  // ERROR(Text13702);
                                                                  IF "PLA ADET Amount" <> 0 THEN
                                                                    ExciseValidation.CalcExcise("E.C.C. No.","PLA ADET Amount",Text13726);
                                                                END ELSE
                                                                  VALIDATE(Amount,
                                                                    "PLA BED Amount" + "PLA AED(GSI) Amount" + "PLA SED Amount" + "PLA SAED Amount" + "PLA CESS Amount" +
                                                                    "PLA NCCD Amount" + "PLA eCess Amount" + "PLA ADET Amount" + "PLA AED(TTA) Amount" + "PLA Excise Charge Amount" +
                                                                    "PLA ADE Amount" + "PLA SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=PLA ADET Amount;
                                                              ENN=PLA ADET Amount] }
    { 16456;  ;AED(TTA) Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Excise Charge" THEN
                                                                  VALIDATE(Amount,
                                                                    "BED Amount" + "AED(TTA) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
                                                                    "eCess Amount" + "AED(GSI) Amount" + "ADET Amount" + "ADE Amount" + "Excise Charge Amount" + "ADC VAT Amount" +
                                                                    "SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=AED(TTA) Amount;
                                                              ENN=AED(TTA) Amount] }
    { 16457;  ;PLA AED(TTA) Amount ;Decimal       ;OnValidate=BEGIN
                                                                IF ExciseCenvatClaim.GET("Journal Template Name","Journal Batch Name","Line No.") THEN;
                                                                IF NOT PLA THEN BEGIN
                                                                  // IF ABS("PLA AED(TTA) Amount" + ExciseCenvatClaim."RG 23A PART II AED(TTA) Amount" +
                                                                  // ExciseCenvatClaim."RG 23C PART II AED(TTA) Amount" + ExciseCenvatClaim."ST AED(TTA) Amount") > ABS("AED(TTA) Amount")
                                                                  // THEN
                                                                  // ERROR(Text13702);
                                                                  IF "PLA AED(TTA) Amount" <> 0 THEN
                                                                    ExciseValidation.CalcExcise("E.C.C. No.","PLA AED(TTA) Amount",Text13729);
                                                                END ELSE
                                                                  VALIDATE(Amount,
                                                                    "PLA BED Amount" + "PLA AED(GSI) Amount" + "PLA SED Amount" + "PLA SAED Amount" + "PLA CESS Amount" +
                                                                    "PLA NCCD Amount" + "PLA eCess Amount" + "PLA ADET Amount" + "PLA AED(TTA) Amount" + "PLA Excise Charge Amount" +
                                                                    "PLA ADE Amount" + "PLA SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=PLA AED(TTA) Amount;
                                                              ENN=PLA AED(TTA) Amount] }
    { 16478;  ;T.A.N. No.          ;Code10        ;TableRelation="T.A.N. Nos.";
                                                   CaptionML=[ENU=T.A.N. No.;
                                                              ENN=T.A.N. No.] }
    { 16479;  ;ADE Amount          ;Decimal       ;OnValidate=BEGIN
                                                                IF "Excise Charge" THEN
                                                                  VALIDATE(Amount,"BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
                                                                    "eCess Amount" + "AED(TTA) Amount" + "ADET Amount" + "ADE Amount" + "Excise Charge Amount" + "ADC VAT Amount" +
                                                                    "SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=ADE Amount;
                                                              ENN=ADE Amount];
                                                   AutoFormatType=1 }
    { 16480;  ;PLA ADE Amount      ;Decimal       ;OnValidate=BEGIN
                                                                IF ExciseCenvatClaim.GET("Journal Template Name","Journal Batch Name","Line No.") THEN;
                                                                IF NOT PLA THEN BEGIN
                                                                  // IF ABS("PLA ADE Amount" + ExciseCenvatClaim."RG 23 A Part II ADE Amount" + ExciseCenvatClaim."RG 23 C Part II ADE Amount" +
                                                                  //   ExciseCenvatClaim."ST ADE Amount") > ABS("ADE Amount")
                                                                  // THEN
                                                                  // ERROR(Text13702);
                                                                  IF "PLA ADE Amount" <> 0 THEN
                                                                    ExciseValidation.CalcExcise("E.C.C. No.","PLA ADE Amount",Text13736);
                                                                END ELSE
                                                                  VALIDATE(Amount,
                                                                    "PLA BED Amount" + "PLA AED(GSI) Amount" + "PLA SED Amount" + "PLA SAED Amount" + "PLA CESS Amount" +
                                                                    "PLA NCCD Amount" + "PLA eCess Amount" + "PLA ADET Amount" + "PLA AED(TTA) Amount" + "PLA Excise Charge Amount" +
                                                                    "PLA ADE Amount" + "PLA SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=PLA ADE Amount;
                                                              ENN=PLA ADE Amount] }
    { 16491;  ;VAT Type            ;Option        ;CaptionML=[ENU=VAT Type;
                                                              ENN=VAT Type];
                                                   OptionCaptionML=[ENU=" ,Item,Capital Goods";
                                                                    ENN=" ,Item,Capital Goods"];
                                                   OptionString=[ ,Item,Capital Goods] }
    { 16492;  ;TDS From Orders     ;Boolean       ;CaptionML=[ENU=TDS From Orders;
                                                              ENN=TDS From Orders] }
    { 16500;  ;TCS Nature of Collection;Code10    ;TableRelation="T.A.N. Nos.";
                                                   OnValidate=VAR
                                                                CompanyInfo@1500000 : Record 79;
                                                                Location@1500001 : Record 14;
                                                              BEGIN
                                                                IF "TCS Nature of Collection" = '' THEN
                                                                  EXIT;

                                                                IF "Party Type" = "Party Type"::Vendor THEN
                                                                  ERROR(Text16500,FIELDCAPTION("TCS Nature of Collection"),
                                                                    FIELDCAPTION("Party Type"),"Party Type");
                                                                "TDS Nature of Deduction" := '';
                                                                "TDS Category" := "TDS Category"::" ";
                                                                "TDS Group" := "TDS Group"::" ";
                                                                "T.A.N. No." := '';

                                                                NODLines.RESET;
                                                                NODLines.SETRANGE(Type,"Party Type");
                                                                NODLines.SETRANGE("No.","Party Code");
                                                                NODLines.SETRANGE("NOD/NOC","TCS Nature of Collection");
                                                                IF NOT NODLines.FIND('-') THEN
                                                                  FIELDERROR("TCS Nature of Collection",Text16501);

                                                                TCSNOC.GET("TCS Nature of Collection");
                                                                "TCS Type" := TCSNOC."TCS Type";

                                                                CompanyInfo.GET;
                                                                "T.C.A.N. No." := CompanyInfo."T.C.A.N. No.";
                                                                IF "Location Code" <> '' THEN BEGIN
                                                                  Location.GET("Location Code");
                                                                  "T.C.A.N. No." := Location."T.C.A.N. No.";
                                                                END;
                                                                IF NODHeader.GET("Party Type","Party Code") THEN
                                                                  VALIDATE("Assessee Code",NODHeader."Assesse Code");
                                                              END;

                                                   OnLookup=VAR
                                                              NatureOfCollection@1500000 : Record 16507;
                                                              TempNatureOfCollection@1500001 : TEMPORARY Record 16507;
                                                            BEGIN
                                                              NODLines.RESET;
                                                              NODLines.SETRANGE(Type,"Party Type");
                                                              NODLines.SETRANGE("No.","Party Code");
                                                              IF NODLines.FIND('-') THEN
                                                                REPEAT
                                                                  NatureOfCollection.GET(NODLines."NOD/NOC");
                                                                  TempNatureOfCollection := NatureOfCollection;
                                                                  TempNatureOfCollection.INSERT;
                                                                UNTIL NODLines.NEXT = 0;

                                                              IF PAGE.RUNMODAL(PAGE::"TCS Nature of Collections",TempNatureOfCollection) = ACTION::LookupOK THEN
                                                                "TCS Nature of Collection" := TempNatureOfCollection.Code;
                                                              VALIDATE("TCS Nature of Collection");
                                                            END;

                                                   CaptionML=[ENU=TCS Nature of Collection;
                                                              ENN=TCS Nature of Collection] }
    { 16501;  ;TCS Concessional Code;Code10       ;TableRelation=Table0;
                                                   CaptionML=[ENU=TCS Concessional Code;
                                                              ENN=TCS Concessional Code] }
    { 16502;  ;Pay TCS             ;Boolean       ;CaptionML=[ENU=Pay TCS;
                                                              ENN=Pay TCS] }
    { 16503;  ;TCS Entry           ;Boolean       ;CaptionML=[ENU=TCS Entry;
                                                              ENN=TCS Entry] }
    { 16504;  ;TCS Type            ;Option        ;CaptionML=[ENU=TCS Type;
                                                              ENN=TCS Type];
                                                   OptionCaptionML=[ENU=" ,A,B,C,D,E,F,G,H,I";
                                                                    ENN=" ,A,B,C,D,E,F,G,H,I"];
                                                   OptionString=[ ,A,B,C,D,E,F,G,H,I] }
    { 16505;  ;T.C.A.N. No.        ;Code10        ;TableRelation="T.C.A.N. No.";
                                                   CaptionML=[ENU=T.C.A.N. No.;
                                                              ENN=T.C.A.N. No.] }
    { 16506;  ;TCS From Orders     ;Boolean       ;CaptionML=[ENU=TCS From Orders;
                                                              ENN=TCS From Orders] }
    { 16508;  ;Non ITC Claimable Usage %;Decimal  ;OnValidate=VAR
                                                                GenJnlLine@1500000 : Record 81;
                                                              BEGIN
                                                                IF "VAT Adjustment Type" <> 0 THEN
                                                                  CalculateVATAdjustment.AdjustDetailedTaxEntry(GenJnlLine,FALSE,Rec);
                                                              END;

                                                   CaptionML=[ENU=Non ITC Claimable Usage %;
                                                              ENN=Non ITC Claimable Usage %];
                                                   MinValue=0;
                                                   Editable=Yes }
    { 16509;  ;Input Credit/Output Tax Amount;Decimal;
                                                   CaptionML=[ENU=Input Credit/Output Tax Amount;
                                                              ENN=Input Credit/Output Tax Amount];
                                                   Editable=No }
    { 16510;  ;Amount Loaded on Item;Decimal      ;CaptionML=[ENU=Amount Loaded on Item;
                                                              ENN=Amount Loaded on Item];
                                                   Editable=No }
    { 16511;  ;VAT Adjustment Type ;Option        ;CaptionML=[ENU=VAT Adjustment Type;
                                                              ENN=VAT Adjustment Type];
                                                   OptionCaptionML=[ENU=" ,Change in Usage,Branch Transfer,Lost/Destroy,Consumed";
                                                                    ENN=" ,Change in Usage,Branch Transfer,Lost/Destroy,Consumed"];
                                                   OptionString=[ ,Change in Usage,Branch Transfer,Lost/Destroy,Consumed] }
    { 16512;  ;Credit Memo Adjustment in VAT;Decimal;
                                                   CaptionML=[ENU=Credit Memo Adjustment in VAT;
                                                              ENN=Credit Memo Adjustment in VAT] }
    { 16513;  ;Original Quantity   ;Decimal       ;CaptionML=[ENU=Original Quantity;
                                                              ENN=Original Quantity];
                                                   Editable=No }
    { 16514;  ;Original Location   ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Original Location;
                                                              ENN=Original Location];
                                                   Editable=No }
    { 16515;  ;Original Non ITC Claim Usage %;Decimal;
                                                   CaptionML=[ENU=Original Non ITC Claim Usage %;
                                                              ENN=Original Non ITC Claim Usage %];
                                                   Editable=No }
    { 16516;  ;VAT Transaction No. ;Integer       ;CaptionML=[ENU=VAT Transaction No.;
                                                              ENN=VAT Transaction No.] }
    { 16517;  ;Quantity to be Adjusted;Decimal    ;OnValidate=VAR
                                                                GenJnlLine@1500000 : Record 81;
                                                              BEGIN
                                                                IF "Quantity to be Adjusted" > "Original Quantity" THEN
                                                                  ERROR(Text16502);

                                                                IF "VAT Adjustment Type" <> 0 THEN
                                                                  CalculateVATAdjustment.AdjustDetailedTaxEntry(GenJnlLine,FALSE,Rec);
                                                              END;

                                                   CaptionML=[ENU=Quantity to be Adjusted;
                                                              ENN=Quantity to be Adjusted];
                                                   MinValue=0 }
    { 16518;  ;Tax Amount Loaded on Inventory;Decimal;
                                                   CaptionML=[ENU=Tax Amount Loaded on Inventory;
                                                              ENN=Tax Amount Loaded on Inventory] }
    { 16519;  ;Deferment           ;Boolean       ;CaptionML=[ENU=Deferment;
                                                              ENN=Deferment] }
    { 16520;  ;VAT Entry           ;Boolean       ;CaptionML=[ENU=VAT Entry;
                                                              ENN=VAT Entry] }
    { 16521;  ;Standard Deduction Amount;Decimal  ;CaptionML=[ENU=Standard Deduction Amount;
                                                              ENN=Standard Deduction Amount] }
    { 16522;  ;VAT Base Amount IN  ;Decimal       ;CaptionML=[ENU=VAT Base Amount IN;
                                                              ENN=VAT Base Amount IN] }
    { 16523;  ;VAT Amount IN       ;Decimal       ;CaptionML=[ENU=VAT Amount IN;
                                                              ENN=VAT Amount IN] }
    { 16524;  ;VAT Percentage IN   ;Decimal       ;CaptionML=[ENU=VAT Percentage IN;
                                                              ENN=VAT Percentage IN] }
    { 16525;  ;Standard Deduction Amount(ACY);Decimal;
                                                   CaptionML=[ENU=Standard Deduction Amount(ACY);
                                                              ENN=Standard Deduction Amount(ACY)] }
    { 16526;  ;Input/Output Tax Amount;Decimal    ;CaptionML=[ENU=Input/Output Tax Amount;
                                                              ENN=Input/Output Tax Amount] }
    { 16528;  ;VAT Adjustment Entry;Boolean       ;CaptionML=[ENU=VAT Adjustment Entry;
                                                              ENN=VAT Adjustment Entry] }
    { 16529;  ;Trading             ;Boolean       ;CaptionML=[ENU=Trading;
                                                              ENN=Trading] }
    { 16530;  ;Sales Return Order  ;Boolean       ;CaptionML=[ENU=Sales Return Order;
                                                              ENN=Sales Return Order] }
    { 16534;  ;ADC VAT Amount      ;Decimal       ;OnValidate=BEGIN
                                                                IF "Excise Charge" THEN BEGIN
                                                                  TESTFIELD(Deferred,FALSE);
                                                                  VALIDATE(Amount,"BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
                                                                    "eCess Amount" + "AED(TTA) Amount" + "ADET Amount" + "ADE Amount" + "Excise Charge Amount" + "ADC VAT Amount" +
                                                                    "SHE Cess Amount");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=ADC VAT Amount;
                                                              ENN=ADC VAT Amount];
                                                   AutoFormatType=1 }
    { 16537;  ;CVD                 ;Boolean       ;CaptionML=[ENU=CVD;
                                                              ENN=CVD] }
    { 16538;  ;PLA ADC VAT Amount  ;Decimal       ;CaptionML=[ENU=PLA ADC VAT Amount;
                                                              ENN=PLA ADC VAT Amount] }
    { 16539;  ;Source Curr. ADC VAT Amount;Decimal;CaptionML=[ENU=Source Curr. ADC VAT Amount;
                                                              ENN=Source Curr. ADC VAT Amount];
                                                   Editable=No }
    { 16540;  ;SHE Cess Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Excise Charge" THEN
                                                                  VALIDATE(Amount,"BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
                                                                    "eCess Amount" + "AED(TTA) Amount" + "ADET Amount" + "ADE Amount" + "Excise Charge Amount" + "ADC VAT Amount" +
                                                                    "SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=SHE Cess Amount;
                                                              ENN=SHE Cess Amount];
                                                   AutoFormatType=1 }
    { 16541;  ;PLA SHE Cess Amount ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT PLA THEN BEGIN
                                                                  // IF ABS("PLA SHE Cess Amount" + ExciseCenvatClaim."RG 23 A Part II SHECess Amount" +
                                                                  // ExciseCenvatClaim."RG 23 C Part II SHECess Amount" + ExciseCenvatClaim."ST SHECess Amount") >   ABS("SHE Cess Amount")
                                                                  // THEN
                                                                  // ERROR(Text13702);
                                                                  IF "PLA SHE Cess Amount" <> 0 THEN
                                                                    ExciseValidation.CalcExcise("E.C.C. No.","PLA SHE Cess Amount",Text13739);
                                                                END ELSE
                                                                  VALIDATE(Amount,
                                                                    "PLA BED Amount" + "PLA AED(GSI) Amount" + "PLA SED Amount" + "PLA SAED Amount" + "PLA CESS Amount" +
                                                                    "PLA NCCD Amount" + "PLA eCess Amount" + "PLA ADET Amount" + "PLA AED(TTA) Amount" + "PLA Excise Charge Amount" +
                                                                    "PLA ADE Amount" + "PLA SHE Cess Amount");
                                                              END;

                                                   CaptionML=[ENU=PLA SHE Cess Amount;
                                                              ENN=PLA SHE Cess Amount] }
    { 16548;  ;SHE Cess % on TDS/TCS;Decimal      ;CaptionML=[ENU=SHE Cess % on TDS/TCS;
                                                              ENN=SHE Cess % on TDS/TCS];
                                                   Editable=No }
    { 16549;  ;SHE Cess on TDS/TCS Amount;Decimal ;CaptionML=[ENU=SHE Cess on TDS/TCS Amount;
                                                              ENN=SHE Cess on TDS/TCS Amount];
                                                   Editable=No }
    { 16551;  ;SHE Cess Base Amount;Decimal       ;CaptionML=[ENU=SHE Cess Base Amount;
                                                              ENN=SHE Cess Base Amount];
                                                   Editable=No }
    { 16552;  ;SHE Cess % Applied  ;Decimal       ;OnValidate=VAR
                                                                BalanceTDS@1500001 : Decimal;
                                                                BalanceSurcharge@1500000 : Decimal;
                                                              BEGIN
                                                                IF "Work Tax" THEN
                                                                  FIELDERROR("SHE Cess % Applied");
                                                                IF ("TDS/TCS % Applied" = 0) AND (NOT "TDS/TCS Adjusted") THEN BEGIN
                                                                  BalanceTDS := "TDS/TCS Base Amount" * "TDS/TCS %" / 100
                                                                END ELSE
                                                                  BalanceTDS := "TDS/TCS Base Amount" * "TDS/TCS % Applied" / 100;

                                                                IF ("Surcharge % Applied" = 0) AND (NOT "Surcharge Adjusted") THEN
                                                                  BalanceSurcharge := BalanceTDS * "Surcharge %" / 100
                                                                ELSE
                                                                  BalanceSurcharge := BalanceTDS * "Surcharge % Applied" / 100;

                                                                IF ("eCESS % Applied" = 0) AND (NOT "TDS/TCS eCess Adjusted") THEN
                                                                  "Balance eCESS on TDS/TCS Amt" := (BalanceTDS + BalanceSurcharge) * "eCESS %" / 100
                                                                ELSE
                                                                  "Balance eCESS on TDS/TCS Amt" := (BalanceTDS + BalanceSurcharge) * "eCESS % Applied" / 100;

                                                                "TDS/TCS SHE Cess Adjusted" := TRUE;
                                                                "Bal. SHE Cess on TDS/TCS Amt" := (BalanceTDS + BalanceSurcharge) * "SHE Cess % Applied" / 100;

                                                                "Balance TDS/TCS Amount" := RoundTDSAmount(BalanceTDS);
                                                                "Balance Surcharge Amount" := RoundTDSAmount(BalanceSurcharge);
                                                                "Balance eCESS on TDS/TCS Amt" := RoundTDSAmount("Balance eCESS on TDS/TCS Amt");
                                                                "Bal. SHE Cess on TDS/TCS Amt" := RoundTDSAmount("Bal. SHE Cess on TDS/TCS Amt");

                                                                IF "Debit Amount" < RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                     "Bal. SHE Cess on TDS/TCS Amt")
                                                                THEN BEGIN
                                                                  Amount := (RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                               "Bal. SHE Cess on TDS/TCS Amt") - "Debit Amount");
                                                                  "Bal. TDS/TCS Including SHECESS" :=
                                                                    ABS(RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                        "Bal. SHE Cess on TDS/TCS Amt"));
                                                                END ELSE BEGIN
                                                                  Amount :=
                                                                    -("Debit Amount" - RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                        "Bal. SHE Cess on TDS/TCS Amt"));
                                                                  "Bal. TDS/TCS Including SHECESS" :=
                                                                    ABS(RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                        "Bal. SHE Cess on TDS/TCS Amt"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=SHE Cess % Applied;
                                                              ENN=SHE Cess % Applied] }
    { 16553;  ;Bal. SHE Cess on TDS/TCS Amt;Decimal;
                                                   CaptionML=[ENU=Bal. SHE Cess on TDS/TCS Amt;
                                                              ENN=Bal. SHE Cess on TDS/TCS Amt];
                                                   Editable=No }
    { 16554;  ;Work Tax % Applied  ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT "Work Tax" THEN
                                                                  FIELDERROR("Work Tax % Applied");
                                                                IF NOT "Reverse Work Tax" THEN BEGIN
                                                                  "W.T Amount" := "Work Tax % Applied" * "Work Tax Base Amount" / 100;
                                                                  IF ("Work Tax Nature Of Deduction" <> '') AND ("W.T Amount" <> 0) THEN BEGIN
                                                                    IF "Debit Amount" < RoundTDSAmount("W.T Amount") THEN
                                                                      Amount := (RoundTDSAmount("W.T Amount") - "Debit Amount")
                                                                    ELSE
                                                                      Amount := -("Debit Amount" - RoundTDSAmount("W.T Amount"));
                                                                  END ELSE
                                                                    IF ("Work Tax Nature Of Deduction" <> '') AND ("W.T Amount" = 0) THEN
                                                                      Amount := 0;
                                                                END ELSE
                                                                  Amount := -"Debit Amount";
                                                                IF "Work Tax % Applied" <> 0 THEN
                                                                  TESTFIELD("Reverse Work Tax",FALSE);
                                                              END;

                                                   CaptionML=[ENU=Work Tax % Applied;
                                                              ENN=Work Tax % Applied] }
    { 16555;  ;W.T Amount          ;Decimal       ;CaptionML=[ENU=W.T Amount;
                                                              ENN=W.T Amount];
                                                   Editable=No }
    { 16556;  ;Work Tax            ;Boolean       ;CaptionML=[ENU=Work Tax;
                                                              ENN=Work Tax] }
    { 16557;  ;Reverse Work Tax    ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT "Work Tax" THEN
                                                                  FIELDERROR("Reverse Work Tax");
                                                                IF NOT "Reverse Work Tax" THEN BEGIN
                                                                  Amount := 0;
                                                                  IF "Work Tax % Applied" <> 0 THEN
                                                                    VALIDATE("Work Tax % Applied");
                                                                END ELSE BEGIN
                                                                  "Work Tax % Applied" := 0;
                                                                  "W.T Amount" := 0;
                                                                  VALIDATE("Work Tax % Applied");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Reverse Work Tax;
                                                              ENN=Reverse Work Tax] }
    { 16558;  ;Work Tax Base Amount;Decimal       ;OnValidate=BEGIN
                                                                "Work Tax Amount" := "Work Tax Base Amount" * "Work Tax %" / 100;
                                                                "Balance Work Tax Amount" := "Work Tax Amount";
                                                              END;

                                                   CaptionML=[ENU=Work Tax Base Amount;
                                                              ENN=Work Tax Base Amount];
                                                   Editable=Yes }
    { 16559;  ;Work Tax %          ;Decimal       ;CaptionML=[ENU=Work Tax %;
                                                              ENN=Work Tax %];
                                                   Editable=No }
    { 16560;  ;Work Tax Amount     ;Decimal       ;CaptionML=[ENU=Work Tax Amount;
                                                              ENN=Work Tax Amount];
                                                   Editable=No }
    { 16561;  ;Work Tax Paid       ;Boolean       ;CaptionML=[ENU=Work Tax Paid;
                                                              ENN=Work Tax Paid];
                                                   Editable=No }
    { 16562;  ;Pay Work Tax        ;Boolean       ;CaptionML=[ENU=Pay Work Tax;
                                                              ENN=Pay Work Tax];
                                                   Editable=No }
    { 16563;  ;Balance Work Tax Amount;Decimal    ;CaptionML=[ENU=Balance Work Tax Amount;
                                                              ENN=Balance Work Tax Amount];
                                                   Editable=No }
    { 16564;  ;Work Tax Nature Of Deduction;Code10;TableRelation="TDS Nature of Deduction";
                                                   OnValidate=BEGIN
                                                                TDSNOD.MODIFYALL(Mark,FALSE);
                                                                NODLines.RESET;
                                                                CASE "Party Type" OF
                                                                  "Party Type"::Vendor:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Vendor);
                                                                  "Party Type"::Customer:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Customer);
                                                                  "Party Type"::Party:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Party);
                                                                END;
                                                                NODLines.SETRANGE("No.","Party Code");
                                                                NODLines.SETRANGE("NOD/NOC","Work Tax Nature Of Deduction");
                                                                NODLines.SETRANGE("TDS Group",NODLines."TDS Group"::Others);
                                                                IF (NOT NODLines.FIND('-')) AND ("Work Tax Nature Of Deduction" <> '') THEN
                                                                  FIELDERROR("Work Tax Nature Of Deduction",Text13701);
                                                                IF TDSNOD.GET("Work Tax Nature Of Deduction") THEN
                                                                  "Work Tax Group" := TDSNOD."TDS Group"
                                                                ELSE
                                                                  "Work Tax Group" := "Work Tax Group"::" ";
                                                              END;

                                                   OnLookup=BEGIN
                                                              NODLines.RESET;
                                                              CASE "Party Type" OF
                                                                "Party Type"::Vendor:
                                                                  NODLines.SETRANGE(Type,NODLines.Type::Vendor);
                                                                "Party Type"::Customer:
                                                                  NODLines.SETRANGE(Type,NODLines.Type::Customer);
                                                                "Party Type"::Party:
                                                                  NODLines.SETRANGE(Type,NODLines.Type::Party);
                                                              END;
                                                              NODLines.SETRANGE("No.","Party Code");
                                                              NODLines.SETRANGE("TDS Group",NODLines."TDS Group"::Others);
                                                              IF NODLines.FIND('-') THEN
                                                                REPEAT
                                                                  TDSNOD.RESET;
                                                                  TDSNOD.SETRANGE(Code,NODLines."NOD/NOC");
                                                                  IF TDSNOD.FINDFIRST THEN
                                                                    TDSNOD.MODIFYALL(Mark,TRUE);
                                                                  COMMIT;
                                                                UNTIL NODLines.NEXT = 0;

                                                              TDSNOD.RESET;
                                                              TDSNOD.SETRANGE(Mark,TRUE);

                                                              IF PAGE.RUNMODAL(PAGE::"TDS Nature of Deductions",TDSNOD) = ACTION::LookupOK THEN BEGIN
                                                                NODLines.RESET;
                                                                CASE "Party Type" OF
                                                                  "Party Type"::Vendor:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Vendor);
                                                                  "Party Type"::Customer:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Customer);
                                                                  "Party Type"::Party:
                                                                    NODLines.SETRANGE(Type,NODLines.Type::Party);
                                                                END;

                                                                NODLines.SETRANGE("No.","Party Code");
                                                                NODLines.SETRANGE("NOD/NOC",TDSNOD.Code);
                                                                IF (NOT NODLines.FIND('-')) AND (TDSNOD.Code <> '') THEN
                                                                  FIELDERROR("TDS Nature of Deduction",Text13701);
                                                                "Work Tax Nature Of Deduction" := TDSNOD.Code;
                                                              END;

                                                              VALIDATE("Work Tax Nature Of Deduction");
                                                            END;

                                                   CaptionML=[ENU=Work Tax Nature Of Deduction;
                                                              ENN=Work Tax Nature Of Deduction] }
    { 16565;  ;Work Tax Group      ;Option        ;CaptionML=[ENU=Work Tax Group;
                                                              ENN=Work Tax Group];
                                                   OptionCaptionML=[ENU=" ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others";
                                                                    ENN=" ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others"];
                                                   OptionString=[ ,Contractor,Commission,Professional,Interest,Rent,Dividend,Interest on Securities,Lotteries,Insurance Commission,NSS,Mutual fund,Brokerage,Income from Units,Capital Assets,Horse Races,Sports Association,Payable to Non Residents,Income of Mutual Funds,Units,Foreign Currency Bonds,FII from Securities,Others];
                                                   Editable=No }
    { 16566;  ;TDS/TCS Adjusted    ;Boolean       ;CaptionML=[ENU=TDS/TCS Adjusted;
                                                              ENN=TDS/TCS Adjusted] }
    { 16567;  ;Surcharge Adjusted  ;Boolean       ;CaptionML=[ENU=Surcharge Adjusted;
                                                              ENN=Surcharge Adjusted] }
    { 16568;  ;TDS/TCS eCess Adjusted;Boolean     ;CaptionML=[ENU=TDS/TCS eCess Adjusted;
                                                              ENN=TDS/TCS eCess Adjusted] }
    { 16569;  ;TDS/TCS SHE Cess Adjusted;Boolean  ;CaptionML=[ENU=TDS/TCS SHE Cess Adjusted;
                                                              ENN=TDS/TCS SHE Cess Adjusted] }
    { 16570;  ;From Subcon. Order  ;Boolean       ;CaptionML=[ENU=From Subcon. Order;
                                                              ENN=From Subcon. Order];
                                                   Editable=No }
    { 16571;  ;TDS/TCS Base Amount Applied;Decimal;OnValidate=BEGIN
                                                                TESTFIELD("TDS/TCS Base Amount Applied",0);
                                                                IF "Work Tax" THEN
                                                                  FIELDERROR("TDS/TCS Base Amount Applied");
                                                                "TDS/TCS Base Amount Adjusted" := TRUE;
                                                                "TDS/TCS Base Amount" := "TDS/TCS Base Amount Applied";

                                                                IF ("TDS/TCS % Applied" = 0) AND (NOT "TDS/TCS Adjusted") THEN BEGIN
                                                                  "TDS/TCS % Applied" := "TDS/TCS %";
                                                                  "Balance TDS/TCS Amount" := "TDS/TCS %" * "TDS/TCS Base Amount" / 100;
                                                                END ELSE
                                                                  "Balance TDS/TCS Amount" := RoundTDSAmount("TDS/TCS Base Amount" * "TDS/TCS % Applied" / 100);

                                                                "Surcharge Base Amount" := "Balance TDS/TCS Amount";

                                                                IF ("Surcharge % Applied" = 0) AND (NOT "Surcharge Adjusted") THEN BEGIN
                                                                  "Surcharge % Applied" := "Surcharge %";
                                                                  "Balance Surcharge Amount" := "Surcharge %" * "Balance TDS/TCS Amount" / 100;
                                                                END ELSE
                                                                  "Balance Surcharge Amount" := RoundTDSAmount("Balance TDS/TCS Amount" * "Surcharge % Applied" / 100);

                                                                IF ("eCESS % Applied" = 0) AND (NOT "TDS/TCS eCess Adjusted") THEN BEGIN
                                                                  "eCESS % Applied" := "eCESS %";
                                                                  "Balance eCESS on TDS/TCS Amt" := "eCESS %" * ("Balance TDS/TCS Amount" + "Balance Surcharge Amount") / 100;
                                                                END ELSE
                                                                  "Balance eCESS on TDS/TCS Amt" := RoundTDSAmount(("Balance Surcharge Amount" +
                                                                                                                    "Balance TDS/TCS Amount") * "eCESS % Applied" / 100);

                                                                IF ("SHE Cess % Applied" = 0) AND (NOT "TDS/TCS SHE Cess Adjusted") THEN BEGIN
                                                                  "SHE Cess % Applied" := "SHE Cess % on TDS/TCS";
                                                                  "Bal. SHE Cess on TDS/TCS Amt" := "SHE Cess % on TDS/TCS" * ("Balance TDS/TCS Amount" + "Balance Surcharge Amount") / 100;
                                                                END ELSE
                                                                  "Bal. SHE Cess on TDS/TCS Amt" := RoundTDSAmount(("Balance Surcharge Amount" +
                                                                                                                    "Balance TDS/TCS Amount") * "SHE Cess % Applied" / 100);

                                                                IF ("TDS/TCS Base Amount Applied" = 0) AND "TDS/TCS Base Amount Adjusted" THEN BEGIN
                                                                  VALIDATE("TDS/TCS % Applied",0);
                                                                  VALIDATE("Surcharge % Applied",0);
                                                                  VALIDATE("eCESS % Applied",0);
                                                                  VALIDATE("SHE Cess % Applied",0);
                                                                END;

                                                                "Balance TDS/TCS Amount" := RoundTDSAmount("Balance TDS/TCS Amount");
                                                                "Balance Surcharge Amount" := RoundTDSAmount("Balance Surcharge Amount");
                                                                "Balance eCESS on TDS/TCS Amt" := RoundTDSAmount("Balance eCESS on TDS/TCS Amt");
                                                                "Bal. SHE Cess on TDS/TCS Amt" := RoundTDSAmount("Bal. SHE Cess on TDS/TCS Amt");

                                                                IF "TDS Nature of Deduction" <> '' THEN BEGIN
                                                                  IF "Debit Amount" < RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                       "Bal. SHE Cess on TDS/TCS Amt")
                                                                  THEN BEGIN
                                                                    Amount := (RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                                 "Bal. SHE Cess on TDS/TCS Amt") - "Debit Amount");
                                                                    "Bal. TDS/TCS Including SHECESS" :=
                                                                      ABS(RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                          "Bal. SHE Cess on TDS/TCS Amt"));
                                                                  END ELSE BEGIN
                                                                    Amount := -("Debit Amount" - RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" +
                                                                                  "Balance eCESS on TDS/TCS Amt" + "Bal. SHE Cess on TDS/TCS Amt"));
                                                                    "Bal. TDS/TCS Including SHECESS" := ABS(RoundTDSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" +
                                                                          "Balance eCESS on TDS/TCS Amt" + "Bal. SHE Cess on TDS/TCS Amt"));
                                                                  END;
                                                                END ELSE
                                                                  IF "TCS Nature of Collection" <> '' THEN BEGIN
                                                                    IF "Debit Amount" < RoundTCSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                         "Bal. SHE Cess on TDS/TCS Amt")
                                                                    THEN BEGIN
                                                                      Amount := (RoundTCSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                                   "Bal. SHE Cess on TDS/TCS Amt") - "Debit Amount");
                                                                      "Total TDS/TCS Incl. SHE CESS" :=
                                                                        ABS(RoundTCSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                            "Bal. SHE Cess on TDS/TCS Amt"));
                                                                      "Bal. TDS/TCS Including SHECESS" :=
                                                                        ABS(RoundTCSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                            "Bal. SHE Cess on TDS/TCS Amt"));
                                                                    END ELSE BEGIN
                                                                      Amount := -("Debit Amount" - RoundTCSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" +
                                                                                    "Balance eCESS on TDS/TCS Amt" + "Bal. SHE Cess on TDS/TCS Amt"));
                                                                      "Total TDS/TCS Incl. SHE CESS" :=
                                                                        ABS(RoundTCSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                            "Bal. SHE Cess on TDS/TCS Amt"));
                                                                      "Bal. TDS/TCS Including SHECESS" :=
                                                                        ABS(RoundTCSAmount("Balance TDS/TCS Amount" + "Balance Surcharge Amount" + "Balance eCESS on TDS/TCS Amt" +
                                                                            "Bal. SHE Cess on TDS/TCS Amt"));
                                                                    END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=TDS/TCS Base Amount Applied;
                                                              ENN=TDS/TCS Base Amount Applied] }
    { 16572;  ;TDS/TCS Base Amount Adjusted;Boolean;
                                                   CaptionML=[ENU=TDS/TCS Base Amount Adjusted;
                                                              ENN=TDS/TCS Base Amount Adjusted];
                                                   Editable=No }
    { 16573;  ;Work Tax Base Amount Applied;Decimal;
                                                   OnValidate=BEGIN
                                                                IF NOT "Work Tax" THEN
                                                                  FIELDERROR("Work Tax % Applied");
                                                                TESTFIELD("Reverse Work Tax",FALSE);
                                                                IF NOT "Reverse Work Tax" THEN BEGIN
                                                                  "Work Tax Base Amount" := "Work Tax Base Amount Applied";
                                                                  "Work Tax Base Amount Adjusted" := TRUE;
                                                                  IF "Work Tax % Applied" = 0 THEN
                                                                    "Work Tax % Applied" := "Work Tax %";
                                                                  "W.T Amount" := "Work Tax % Applied" * "Work Tax Base Amount" / 100;
                                                                  IF ("Work Tax Nature Of Deduction" <> '') AND ("W.T Amount" <> 0) THEN BEGIN
                                                                    IF "Debit Amount" < RoundTDSAmount("W.T Amount") THEN
                                                                      Amount := (RoundTDSAmount("W.T Amount") - "Debit Amount")
                                                                    ELSE
                                                                      Amount := -("Debit Amount" - RoundTDSAmount("W.T Amount"));
                                                                  END ELSE
                                                                    IF ("Work Tax Nature Of Deduction" <> '') AND ("W.T Amount" = 0) THEN
                                                                      Amount := 0;
                                                                END ELSE
                                                                  Amount := -"Debit Amount";
                                                                IF "Work Tax % Applied" <> 0 THEN
                                                                  TESTFIELD("Reverse Work Tax",FALSE);
                                                              END;

                                                   CaptionML=[ENU=Work Tax Base Amount Applied;
                                                              ENN=Work Tax Base Amount Applied] }
    { 16574;  ;Work Tax Base Amount Adjusted;Boolean;
                                                   CaptionML=[ENU=Work Tax Base Amount Adjusted;
                                                              ENN=Work Tax Base Amount Adjusted];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Journal Template Name,Journal Batch Name,Line No.;
                                                   SumIndexFields=Balance (LCY);
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Journal Template Name,Journal Batch Name,Posting Date,Document No.;
                                                   MaintainSQLIndex=No }
    {    ;Journal Template Name,Journal Batch Name,Location Code,Document No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 or %2 must be G/L Account or Bank Account.;ENN=%1 or %2 must be G/L Account or Bank Account.';
      TaxJnlTemplate@1014 : Record 16585;
      TaxJnlBatch@1015 : Record 16586;
      TaxJnlLine@1016 : Record 16587;
      GLAcc@1017 : Record 15;
      Cust@1018 : Record 18;
      Vend@1020 : Record 23;
      Currency@1022 : Record 4;
      BankAcc@1029 : Record 270;
      GLSetup@1037 : Record 98;
      NoSeriesMgt@1040 : Codeunit 396;
      DimMgt@1046 : Codeunit 408;
      ReplaceInfo@1051 : Boolean;
      CurrencyCode@1052 : Code[10];
      TemplateFound@1056 : Boolean;
      NODHeader@1280009 : Record 13786;
      NODLines@1280003 : Record 13785;
      TDSNOD@1280006 : Record 13726;
      ExciseValidation@1280005 : Codeunit 13702;
      Text13701@1280007 : TextConst 'ENU=You are not allowed to select this Nature of Deduction.;ENN=You are not allowed to select this Nature of Deduction.';
      Text13702@1280004 : TextConst 'ENU=You cannot claim more than the Excise Duty.;ENN=You cannot claim more than the Excise Duty.';
      TDSAmt@1280008 : Decimal;
      Text13705@1500000 : TextConst 'ENU=PLAECESSAMOUNT;ENN=PLAECESSAMOUNT';
      Text13708@1500003 : TextConst 'ENU=PLASAEDAMOUNT;ENN=PLASAEDAMOUNT';
      Text13711@1500006 : TextConst 'ENU=PLACESSAMOUNT;ENN=PLACESSAMOUNT';
      Text13714@1500009 : TextConst 'ENU=PLANCCDAMOUNT;ENN=PLANCCDAMOUNT';
      Text13717@1500012 : TextConst 'ENU=PLAAEDAMOUNT;ENN=PLAAEDAMOUNT';
      Text13720@1500015 : TextConst 'ENU=PLABEDAMOUNT;ENN=PLABEDAMOUNT';
      Text13723@1500018 : TextConst 'ENU=PLASEDAMOUNT;ENN=PLASEDAMOUNT';
      Text13726@1500021 : TextConst 'ENU=PLAADETAMOUNT;ENN=PLAADETAMOUNT';
      Text13729@1500024 : TextConst 'ENU=PLAAEDTTAAMOUNT;ENN=PLAAEDTTAAMOUNT';
      Text13736@1500031 : TextConst 'ENU=PLAADEAMOUNT;ENN=PLAADEAMOUNT';
      Text16500@1500035 : TextConst 'ENU=%1 cannot be entered for %2 %3.;ENN=%1 cannot be entered for %2 %3.';
      Text16501@1500034 : TextConst 'ENU=You are not allowed to select this Nature of Collection.;ENN=You are not allowed to select this Nature of Collection.';
      TCSNOC@1500039 : Record 16507;
      CalculateVATAdjustment@1500042 : Codeunit 16503;
      Text16502@1500043 : TextConst 'ENU=Quantity to be Adjusted cannot be greater than Original Quantity.;ENN=Quantity to be Adjusted cannot be greater than Original Quantity.';
      Text13739@1500050 : TextConst 'ENU=PLASHECESSAMOUNT;ENN=PLASHECESSAMOUNT';
      ExciseCenvatClaim@1500053 : Record 16584;
      Text16508@1500060 : TextConst 'ENU=Posting Date %1 for VAT Adjustment cannot be earlier than the Invoice Date %2.;ENN=Posting Date %1 for VAT Adjustment cannot be earlier than the Invoice Date %2.';

    PROCEDURE EmptyLine@5() : Boolean;
    BEGIN
      EXIT(
        ("Account No." = '') AND (Amount = 0) AND
        ("Bal. Account No." = ''));
    END;

    PROCEDURE SetUpNewLine@9(LastTaxJnlLine@1000 : Record 16587;Balance@1001 : Decimal;BottomLine@1002 : Boolean);
    BEGIN
      TaxJnlTemplate.GET("Journal Template Name");
      TaxJnlBatch.GET("Journal Template Name","Journal Batch Name");
      TaxJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      TaxJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      IF TaxJnlLine.FINDFIRST THEN BEGIN
        "Posting Date" := LastTaxJnlLine."Posting Date";
        "Document Date" := LastTaxJnlLine."Posting Date";
        "Document No." := LastTaxJnlLine."Document No.";
        IF BottomLine AND
           (Balance - LastTaxJnlLine."Balance (LCY)" = 0) AND
           NOT LastTaxJnlLine.EmptyLine
        THEN
          "Document No." := INCSTR("Document No.");
      END ELSE BEGIN
        "Posting Date" := WORKDATE;
        "Document Date" := WORKDATE;
        IF TaxJnlBatch."No. Series" <> '' THEN BEGIN
          CLEAR(NoSeriesMgt);
          "Document No." := NoSeriesMgt.GetNextNo(TaxJnlBatch."No. Series","Posting Date",FALSE);
        END;
      END;
      "Account Type" := LastTaxJnlLine."Account Type";
      "Document Type" := LastTaxJnlLine."Document Type";
      "Source Code" := TaxJnlTemplate."Source Code";
      "Reason Code" := TaxJnlBatch."Reason Code";
      "Posting No. Series" := TaxJnlBatch."Posting No. Series";
      "Bal. Account Type" := TaxJnlBatch."Bal. Account Type";
      "Location Code" := TaxJnlBatch."Location Code";
      IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) AND
         ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor])
      THEN
        "Account Type" := "Account Type"::"G/L Account";
      VALIDATE("Bal. Account No.",TaxJnlBatch."Bal. Account No.");
      Description := '';
    END;

    LOCAL PROCEDURE CheckGLAcc@7();
    BEGIN
      GLAcc.CheckGLAcc;
      IF GLAcc."Direct Posting" OR ("Journal Template Name" = '') THEN
        EXIT;
      IF "Posting Date" <> 0D THEN
        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
          EXIT;
      GLAcc.TESTFIELD("Direct Posting",TRUE);
    END;

    PROCEDURE CreateDim@13(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1008 : Integer;No5@1009 : Code[20]);
    VAR
      TableID@1010 : ARRAY [10] OF Integer;
      No@1011 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    END;

    PROCEDURE ValidateShortcutDimCode@14(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@18(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE ShowShortcutDimCode@15(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    PROCEDURE ShowDimensions@26();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Journal Template Name","Journal Batch Name","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE GetTemplate@16();
    BEGIN
      IF NOT TemplateFound THEN
        TaxJnlTemplate.GET("Journal Template Name");
      TemplateFound := TRUE;
    END;

    LOCAL PROCEDURE RoundTDSAmount@1280019(TDSAmount@1280000 : Decimal) : Decimal;
    VAR
      TDSRoundingDirection@1280003 : Text[1];
      TDSRoundingPrecision@1280002 : Decimal;
    BEGIN
      GLSetup.GET;
      CASE GLSetup."TDS Rounding Type" OF
        GLSetup."TDS Rounding Type"::Nearest:
          TDSRoundingDirection := '=';
        GLSetup."TDS Rounding Type"::Up:
          TDSRoundingDirection := '>';
        GLSetup."TDS Rounding Type"::Down:
          TDSRoundingDirection := '<';
      END;
      IF GLSetup."TDS Rounding Precision" <> 0 THEN
        TDSRoundingPrecision := GLSetup."TDS Rounding Precision"
      ELSE
        TDSRoundingPrecision := 0.01;
      EXIT(ROUND(TDSAmount,TDSRoundingPrecision,TDSRoundingDirection));
    END;

    LOCAL PROCEDURE RoundTCSAmount@1500007(TCSAmount@1280000 : Decimal) : Decimal;
    VAR
      TCSRoundingDirection@1280003 : Text[1];
      TCSRoundingPrecision@1280002 : Decimal;
    BEGIN
      GLSetup.GET;
      CASE GLSetup."TCS Rounding Type" OF
        GLSetup."TCS Rounding Type"::Nearest:
          TCSRoundingDirection := '=';
        GLSetup."TCS Rounding Type"::Up:
          TCSRoundingDirection := '>';
        GLSetup."TCS Rounding Type"::Down:
          TCSRoundingDirection := '<';
      END;
      IF GLSetup."TCS Rounding Precision" <> 0 THEN
        TCSRoundingPrecision := GLSetup."TCS Rounding Precision"
      ELSE
        TCSRoundingPrecision := 1;

      EXIT(ROUND(TCSAmount,TCSRoundingPrecision,TCSRoundingDirection));
    END;

    LOCAL PROCEDURE GetCurrency@3();
    BEGIN
      GLSetup.GET;
      CurrencyCode := '';
      Currency.InitRoundingPrecision;
    END;

    BEGIN
    END.
  }
}

