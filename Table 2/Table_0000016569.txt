OBJECT Table 16569 VAT Opening Journal
{
  OBJECT-PROPERTIES
  {
    Date=24-04-16;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.45778;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               LOCKTABLE;
               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
               "Input / Output Tax Applicable" := TRUE;
             END;

    OnDelete=BEGIN
               DetailTaxEntryBuffer.RESET;
               DetailTaxEntryBuffer.SETRANGE("Document Type","Document Type");
               DetailTaxEntryBuffer.SETRANGE("Document No.","Document No.");
               DetailTaxEntryBuffer.SETRANGE("Transaction Type","Transaction Type");
               DetailTaxEntryBuffer.SETRANGE("Journal Batch Name","Batch Name");
               DetailTaxEntryBuffer.SETRANGE("Line No.","Line No.");
               DetailTaxEntryBuffer.DELETEALL;
             END;

    CaptionML=[ENU=VAT Opening Journal;
               ENN=VAT Opening Journal];
  }
  FIELDS
  {
    { 1   ;   ;Batch Name          ;Code10        ;TableRelation="VAT Batches"."Batch Name";
                                                   CaptionML=[ENU=Batch Name;
                                                              ENN=Batch Name];
                                                   Editable=No }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.];
                                                   Editable=No }
    { 3   ;   ;Entry Type          ;Option        ;CaptionML=[ENU=Entry Type;
                                                              ENN=Entry Type];
                                                   OptionCaptionML=[ENU=Initial Entry,Carried Forward;
                                                                    ENN=Initial Entry,Carried Forward];
                                                   OptionString=Initial Entry,Carried Forward;
                                                   Editable=No }
    { 4   ;   ;Transaction Type    ;Option        ;OnValidate=BEGIN
                                                                "Item Ledger Entry No." := 0;
                                                                IF "Transaction Type" = "Transaction Type"::Purchase THEN
                                                                  "Source Type" := "Source Type"::Vendor
                                                                ELSE
                                                                  IF "Transaction Type" = "Transaction Type"::Sale THEN
                                                                    "Source Type" := "Source Type"::Customer;
                                                              END;

                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Type];
                                                   OptionCaptionML=[ENU=Purchase,Sale;
                                                                    ENN=Purchase,Sale];
                                                   OptionString=Purchase,Sale }
    { 5   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=" ,,Invoice";
                                                                    ENN=" ,,Invoice"];
                                                   OptionString=[ ,,Invoice] }
    { 6   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 7   ;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 8   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              ENN=Type];
                                                   OptionCaptionML=[ENU=G/L Account,Item,Fixed Asset;
                                                                    ENN=G/L Account,Item,Fixed Asset];
                                                   OptionString=G/L Account,Item,Fixed Asset }
    { 9   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   OnValidate=VAR
                                                                ItemLedgerEntryNo@1500000 : Integer;
                                                                ItemLedgEntry@1500001 : Record 32;
                                                              BEGIN
                                                                ItemLedgerEntryNo := "Item Ledger Entry No.";
                                                                VALIDATE("Transaction Type");
                                                                CASE Type OF
                                                                  Type::Item:
                                                                    IF Item.GET("No.") THEN BEGIN
                                                                      Description := Item.Description;
                                                                      "Tax Group Code" := Item."Tax Group Code";
                                                                      IF Item."Fixed Asset" THEN
                                                                        "Product Type" := "Product Type"::"Capital Goods"
                                                                      ELSE
                                                                        "Product Type" := "Product Type"::Item;
                                                                      IF ItemLedgEntry.GET(ItemLedgerEntryNo) THEN
                                                                        IF "No." <> ItemLedgEntry."Item No." THEN
                                                                          ERROR(Text16516);
                                                                    END;
                                                                  Type::"Fixed Asset":
                                                                    IF FixedAsset.GET("No.") THEN BEGIN
                                                                      Description := FixedAsset.Description;
                                                                      "Tax Group Code" := FixedAsset."Tax Group Code";
                                                                      "Product Type" := "Product Type"::"Capital Goods";
                                                                    END;
                                                                  Type::"G/L Account":
                                                                    IF "G/LAccount".GET("No.") THEN BEGIN
                                                                      Description := "G/LAccount".Name;
                                                                      "Tax Group Code" := "G/LAccount"."Tax Group Code";
                                                                      "Product Type" := "Product Type"::Item;
                                                                    END;
                                                                END;

                                                                IF "Location Code" <> '' THEN
                                                                  VALIDATE("Location Code");
                                                                "Item Ledger Entry No." := ItemLedgerEntryNo;
                                                                IF ("Transaction Type" = "Transaction Type"::Purchase) AND (Type = Type::Item) THEN
                                                                  TESTFIELD("Item Ledger Entry No.");
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 10  ;   ;Description         ;Text30        ;CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 11  ;   ;Product Type        ;Option        ;CaptionML=[ENU=Product Type;
                                                              ENN=Product Type];
                                                   OptionCaptionML=[ENU=" ,Item,Capital Goods";
                                                                    ENN=" ,Item,Capital Goods"];
                                                   OptionString=[ ,Item,Capital Goods] }
    { 12  ;   ;Source Type         ;Option        ;CaptionML=[ENU=Source Type;
                                                              ENN=Source Type];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor";
                                                                    ENN=" ,Customer,Vendor"];
                                                   OptionString=[ ,Customer,Vendor];
                                                   Editable=No }
    { 13  ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor;
                                                   OnValidate=BEGIN
                                                                CASE "Source Type" OF
                                                                  "Source Type"::Vendor:
                                                                    IF Vendor.GET("Source No.") THEN BEGIN
                                                                      "Source Description" := Vendor.Name;
                                                                      VALIDATE("State Code",Vendor."State Code");
                                                                    END;
                                                                  "Source Type"::Customer:
                                                                    IF Customer.GET("Source No.") THEN BEGIN
                                                                      "Source Description" := Customer.Name;
                                                                      VALIDATE("State Code",Customer."State Code");
                                                                    END
                                                                END;
                                                                IF "Location Code" <> '' THEN
                                                                  VALIDATE("Location Code");
                                                                VALIDATE("No.");
                                                              END;

                                                   CaptionML=[ENU=Source No.;
                                                              ENN=Source No.] }
    { 14  ;   ;Tax Base Amount     ;Decimal       ;OnValidate=BEGIN
                                                                UpdateTaxDetails;
                                                                UpdateTaxAmount;
                                                              END;

                                                   CaptionML=[ENU=Tax Base Amount;
                                                              ENN=Tax Base Amount];
                                                   Editable=No }
    { 15  ;   ;Tax %               ;Decimal       ;CaptionML=[ENU=Tax %;
                                                              ENN=Tax %];
                                                   Editable=No }
    { 16  ;   ;Non ITC Claimable Usage %;Decimal  ;InitValue=0;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Transaction Type","Transaction Type"::Purchase);
                                                                UpdateTaxDetails;
                                                                UpdateTaxAmount;
                                                              END;

                                                   CaptionML=[ENU=Non ITC Claimable Usage %;
                                                              ENN=Non ITC Claimable Usage %];
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 17  ;   ;Tax Amount          ;Decimal       ;CaptionML=[ENU=Tax Amount;
                                                              ENN=Tax Amount];
                                                   Editable=No }
    { 18  ;   ;Input Credit/Output Tax Amount;Decimal;
                                                   CaptionML=[ENU=Input Credit/Output Tax Amount;
                                                              ENN=Input Credit/Output Tax Amount];
                                                   Editable=No }
    { 19  ;   ;Amount Loaded on Item;Decimal      ;CaptionML=[ENU=Amount Loaded on Item;
                                                              ENN=Amount Loaded on Item];
                                                   Editable=No }
    { 20  ;   ;State Code          ;Code10        ;TableRelation=State;
                                                   OnValidate=BEGIN
                                                                IF State.GET("State Code") THEN
                                                                  "Tax Period" := State."Tax Period";
                                                              END;

                                                   CaptionML=[ENU=State Code;
                                                              ENN=State Code] }
    { 21  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=VAR
                                                                Location@1500000 : Record 14;
                                                              BEGIN
                                                                IF "Source No." <> '' THEN
                                                                  IF Location.GET("Location Code") THEN
                                                                    IF Location."State Code" <> "State Code" THEN
                                                                      ERROR(Text16500);

                                                                UpdateTaxDetails;
                                                                UpdateTaxAmount;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 22  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=Tax Area Code] }
    { 23  ;   ;Tax Jurisdiction Code;Code10       ;TableRelation="Tax Jurisdiction";
                                                   CaptionML=[ENU=Tax Jurisdiction Code;
                                                              ENN=Tax Jurisdiction Code] }
    { 24  ;   ;Tax Period          ;DateFormula   ;CaptionML=[ENU=Tax Period;
                                                              ENN=Tax Period];
                                                   Editable=No }
    { 25  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Unit Price");
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENN=Quantity] }
    { 26  ;   ;Remaining Tax Amount;Decimal       ;CaptionML=[ENU=Remaining Tax Amount;
                                                              ENN=Remaining Tax Amount] }
    { 27  ;   ;Export or Deemed Export;Boolean    ;CaptionML=[ENU=Export or Deemed Export;
                                                              ENN=Export or Deemed Export] }
    { 28  ;   ;G/L Account No.     ;Code20        ;TableRelation="G/L Account";
                                                   OnValidate=BEGIN
                                                                "Bal. G/L Account No." := "G/L Account No.";
                                                              END;

                                                   CaptionML=[ENU=G/L Account No.;
                                                              ENN=G/L Account No.] }
    { 29  ;   ;Remaining Quantity  ;Decimal       ;CaptionML=[ENU=Remaining Quantity;
                                                              ENN=Remaining Quantity] }
    { 30  ;   ;Deferment           ;Boolean       ;CaptionML=[ENU=Deferment;
                                                              ENN=Deferment] }
    { 31  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1500000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=User ID;
                                                              ENN=User ID] }
    { 32  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENN=Tax Group Code] }
    { 33  ;   ;Item Ledger Entry No.;Integer      ;TableRelation=IF (Type=CONST(Item),
                                                                     Transaction Type=CONST(Purchase)) "Item Ledger Entry"."Entry No." WHERE (Entry Type=FILTER(Purchase|Positive Adjmt.))
                                                                     ELSE IF (Transaction Type=CONST(Sale),
                                                                              Type=CONST(Item)) "Item Ledger Entry"."Entry No." WHERE (Entry Type=FILTER(Sale|Positive Adjmt.));
                                                   OnValidate=VAR
                                                                ItemLedgEntry@1500000 : Record 32;
                                                                DetailedTaxEntry@1500001 : Record 16522;
                                                              BEGIN
                                                                TESTFIELD(Type,Type::Item);
                                                                IF ItemLedgEntry.GET("Item Ledger Entry No.") THEN BEGIN
                                                                  DetailedTaxEntry.SETRANGE("Item Ledger Entry No.","Item Ledger Entry No.");
                                                                  IF DetailedTaxEntry.FINDFIRST THEN
                                                                    ERROR(Text16514);
                                                                  VALIDATE(Type,Type::Item);
                                                                  "Item Ledger Entry No." := ItemLedgEntry."Entry No.";
                                                                  VALIDATE("No.",ItemLedgEntry."Item No.");
                                                                  "Location Code" := ItemLedgEntry."Location Code";
                                                                  "Dimension Set ID" := ItemLedgEntry."Dimension Set ID";
                                                                  "Shortcut Dimension 1 Code" := ItemLedgEntry."Global Dimension 1 Code";
                                                                  "Shortcut Dimension 2 Code" := ItemLedgEntry."Global Dimension 2 Code";
                                                                  VALIDATE(Quantity,ItemLedgEntry.Quantity);
                                                                  ItemLedgEntry.CALCFIELDS("Cost Amount (Actual)");
                                                                  VALIDATE("Unit Price",ROUND(ItemLedgEntry."Cost Amount (Actual)" / ItemLedgEntry.Quantity));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Item Ledger Entry No.;
                                                              ENN=Item Ledger Entry No.] }
    { 34  ;   ;Primary Deferment Entry No.;Integer;CaptionML=[ENU=Primary Deferment Entry No.;
                                                              ENN=Primary Deferment Entry No.] }
    { 35  ;   ;Tax Type            ;Option        ;CaptionML=[ENU=Tax Type;
                                                              ENN=Tax Type];
                                                   OptionCaptionML=[ENU=" ,VAT,CST";
                                                                    ENN=" ,VAT,CST"];
                                                   OptionString=[ ,VAT,CST] }
    { 36  ;   ;Positive            ;Boolean       ;CaptionML=[ENU=Positive;
                                                              ENN=Positive] }
    { 37  ;   ;Schedule Code       ;Code10        ;TableRelation=Schedule;
                                                   CaptionML=[ENU=Schedule Code;
                                                              ENN=Schedule Code] }
    { 38  ;   ;Deferment No.       ;Integer       ;CaptionML=[ENU=Deferment No.;
                                                              ENN=Deferment No.] }
    { 39  ;   ;Input / Output Tax Applicable;Boolean;
                                                   CaptionML=[ENU=Input / Output Tax Applicable;
                                                              ENN=Input / Output Tax Applicable] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                            END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,1,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                            END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,1,2' }
    { 42  ;   ;Source Description  ;Text30        ;CaptionML=[ENU=Source Description;
                                                              ENN=Source Description] }
    { 43  ;   ;No. of Deferment Settled;Integer   ;OnValidate=BEGIN
                                                                TESTFIELD("Transaction Type","Transaction Type"::Purchase);
                                                                TESTFIELD("Product Type","Product Type"::"Capital Goods");
                                                                TESTFIELD("Date of Purchase");

                                                                IF GetDefermentPeriod(JurisdictionDefermentPeriod,Rec) <> 0 THEN BEGIN
                                                                  IF "No. of Deferment Settled" > GetDefermentPeriod(JurisdictionDefermentPeriod,Rec) THEN
                                                                    ERROR(Text16512,GetDefermentPeriod(JurisdictionDefermentPeriod,Rec));
                                                                END ELSE
                                                                  ERROR(Text16513);
                                                              END;

                                                   CaptionML=[ENU=No. of Deferment Settled;
                                                              ENN=No. of Deferment Settled];
                                                   MinValue=0 }
    { 44  ;   ;Unit Price          ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Tax Base Amount",(Quantity * "Unit Price"));
                                                              END;

                                                   CaptionML=[ENU=Unit Price;
                                                              ENN=Unit Price] }
    { 45  ;   ;Date of Purchase    ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD("Transaction Type","Transaction Type"::Purchase);
                                                                TESTFIELD("Product Type","Product Type"::"Capital Goods");
                                                              END;

                                                   CaptionML=[ENU=Date of Purchase;
                                                              ENN=Date of Purchase] }
    { 46  ;   ;Bal. G/L Account No.;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=[ENU=Bal. G/L Account No.;
                                                              ENN=Bal. G/L Account No.] }
    { 47  ;   ;Creditable Good     ;Boolean       ;CaptionML=[ENU=Creditable Good;
                                                              ENN=Creditable Good] }
    { 48  ;   ;Capital Good        ;Boolean       ;CaptionML=[ENU=Capital Good;
                                                              ENN=Capital Good] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Batch Name,Line No.                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Item@1500002 : Record 27;
      FixedAsset@1500003 : Record 5600;
      "G/LAccount"@1500004 : Record 15;
      Vendor@1500007 : Record 23;
      State@1500009 : Record 13762;
      Customer@1500008 : Record 18;
      GenJnlLine@1500011 : Record 81;
      JurisdictionDefermentPeriod@1500015 : Record 16521;
      TaxBuffer@1500005 : TEMPORARY Record 13766;
      DetailTaxEntryBuffer@1500001 : Record 16480;
      DimMgt@1500000 : Codeunit 408;
      GenJnlPost@1500013 : Codeunit 12;
      Text16500@1500016 : TextConst 'ENU=State Code of Vendor/Customer and Location must be same.;ENN=State Code of Vendor/Customer and Location must be same.';
      Text16511@1500017 : TextConst 'ENU=Posting lines         #2###### @3@@@@@@@@@@@@@\;ENN=Posting lines         #2###### @3@@@@@@@@@@@@@\';
      Text16512@1000000000 : TextConst 'ENU=No. of settled deferments should not exceed %1.;ENN=No. of settled deferments should not exceed %1.';
      Text16513@1000000001 : TextConst 'ENU=Deferment period is not defined.;ENN=Deferment period is not defined.';
      Text16514@1500018 : TextConst 'ENU=Item Ledger Entry already applied.;ENN=Item Ledger Entry already applied.';
      Text16515@1500019 : TextConst 'ENU=State Code of Vendor/Customer and Company must be same.;ENN=State Code of Vendor/Customer and Company must be same.';
      Text16516@1500021 : TextConst 'ENU=Item No. does not match with Item No. in Item Ledger Entry.;ENN=Item No. does not match with Item No. in Item Ledger Entry.';
      NextDetTaxEntryNo@1500006 : Integer;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@1500004(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE ShowDimensions@1500044();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Batch Name","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE UpdateTaxDetails@1500000();
    VAR
      TaxAreaLine@1500000 : Record 319;
      TaxDetail@1500003 : Record 322;
      TaxAreaLocation@1500004 : Record 13761;
      CompanyInfo@1000000000 : Record 79;
      Location@1500005 : Record 14;
    BEGIN
      TaxAreaLocation.RESET;
      IF "Source Type" = "Source Type"::Vendor THEN
        TaxAreaLocation.SETRANGE(Type,TaxAreaLocation.Type::Vendor)
      ELSE
        IF "Source Type" = "Source Type"::Customer THEN
          TaxAreaLocation.SETRANGE(Type,TaxAreaLocation.Type::Customer);
      IF "Location Code" <> '' THEN BEGIN
        TaxAreaLocation.SETRANGE("Dispatch / Receiving Location","Location Code");
      END ELSE BEGIN
        CompanyInfo.GET;
        IF ("State Code" <> CompanyInfo.State) AND ("Source No." <> '') THEN
          ERROR(Text16515);
        TaxAreaLocation.SETRANGE("Dispatch / Receiving Location",CompanyInfo."Location Code");
      END;
      TaxAreaLocation.SETRANGE("Customer / Vendor Location","State Code");

      IF TaxAreaLocation.FINDFIRST THEN
        "Tax Area Code" := TaxAreaLocation."Tax Area Code";

      TaxAreaLine.RESET;
      TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
      TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
      IF TaxAreaLine.FINDFIRST THEN
        "Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";

      TaxDetail.RESET;
      TaxDetail.SETRANGE("Tax Jurisdiction Code","Tax Jurisdiction Code");
      TaxDetail.SETRANGE("Tax Group Code","Tax Group Code");
      TaxDetail.SETRANGE("Effective Date",0D,"Posting Date");
      IF TaxDetail.FINDLAST THEN BEGIN
        "Tax %" := TaxDetail."Tax Below Maximum";
        IF "Transaction Type" = "Transaction Type"::Purchase THEN
          "Schedule Code" := TaxDetail."Schedule Code";
        "Capital Good" := TaxDetail."Capital Goods";
        "Creditable Good" := TaxDetail."Creditable Goods";
        IF NOT TaxDetail."Capital Goods" THEN
          "Product Type" := "Product Type"::Item;
      END;

      IF Location.GET("Location Code") THEN
        "Export or Deemed Export" := Location."Export or Deemed Export"
      ELSE BEGIN
        CompanyInfo.GET;
        "Export or Deemed Export" := CompanyInfo."Export or Deemed Export";
      END;

      IF State.GET("State Code") THEN;
      IF "Transaction Type" = "Transaction Type"::Purchase THEN BEGIN
        IF "Product Type" = "Product Type"::Item THEN
          VALIDATE("G/L Account No.",State."Tax Account (Purchases)")
        ELSE
          VALIDATE("G/L Account No.",State."VAT Deferred Account No.");
      END ELSE
        VALIDATE("G/L Account No.",State."Tax Account (Sales)");

      IF GetDefermentPeriod(JurisdictionDefermentPeriod,Rec) <> 0 THEN
        Deferment := TRUE
      ELSE
        Deferment := FALSE;
    END;

    PROCEDURE UpdateTaxAmount@1500002();
    VAR
      GLSetup@1000000000 : Record 98;
      Direction@1000000001 : Text[30];
      IndianSalesTaxCalculate@1500000 : Codeunit 13704;
      LineTaxAmount@1500003 : Decimal;
      TaxAmount@1500002 : Decimal;
      StandardDeductionAmount@1500001 : Decimal;
    BEGIN
      IF GLSetup.GET THEN BEGIN
        IF GLSetup."VAT Rounding Type" = GLSetup."VAT Rounding Type"::Nearest THEN
          Direction := '='
        ELSE
          IF GLSetup."VAT Rounding Type" = GLSetup."VAT Rounding Type"::Up THEN
            Direction := '>'
          ELSE
            IF GLSetup."VAT Rounding Type" = GLSetup."VAT Rounding Type"::Down THEN
              Direction := '<';
      END;

      TaxAmount := 0;
      StandardDeductionAmount := 0;
      IF "Transaction Type" = "Transaction Type"::Purchase THEN BEGIN
        LineTaxAmount := IndianSalesTaxCalculate.CalculateTax(
            "Tax Area Code","Tax Group Code",TRUE,"Posting Date",
            "Tax Base Amount",Quantity,0,'',"Tax %");
        IF LineTaxAmount <> 0 THEN
          IndianSalesTaxCalculate.GetVATOpeningInputTaxCredit(Rec,"Amount Loaded on Item",
            "Input Credit/Output Tax Amount",TRUE,TaxAmount);
        "Tax Amount" := TaxAmount;
        IF GLSetup."VAT Rounding Precision" <> 0 THEN
          "Tax Amount" := ROUND("Tax Amount",GLSetup."VAT Rounding Precision",Direction);
        IF "Tax Base Amount" = 0 THEN
          "Tax %" := 0;
      END ELSE
        IF "Transaction Type" = "Transaction Type"::Sale THEN BEGIN
          IF "Export or Deemed Export" THEN
            EXIT;
          LineTaxAmount := IndianSalesTaxCalculate.CalculateTax(
              "Tax Area Code","Tax Group Code",TRUE,"Posting Date",
              "Tax Base Amount",Quantity,0,'',"Tax %");
          IF LineTaxAmount <> 0 THEN
            IndianSalesTaxCalculate.GetVATOpeningSTD(Rec,StandardDeductionAmount,TaxAmount);
          "Tax Amount" := TaxAmount - StandardDeductionAmount;
          IF "Tax Base Amount" = 0 THEN
            "Tax %" := 0;
          "Input Credit/Output Tax Amount" := "Tax Amount";
          "Amount Loaded on Item" := 0;
        END;
    END;

    PROCEDURE InsertVATOpening@1500024(VATOpeningJnl@1500000 : Record 16569);
    BEGIN
    END;

    PROCEDURE PostVATOpening@1500025(VAR GenJnlLine@1500000 : Record 81;VATOpeningJnl@1500001 : Record 16569);
    VAR
      GenJnlLine2@1500002 : Record 81;
    BEGIN
      GenJnlLine2 := GenJnlLine;
      GenJnlPost.RunWithCheck(GenJnlLine2);
    END;

    PROCEDURE InsertVATDefermentEntries@1500028(VAR VATOpeningJnl@1500000 : Record 16569;VAR DetailedTaxEntry@1500001 : Record 16522);
    VAR
      State@1500002 : Record 13762;
      JurisdictionDefermentPeriod@1500003 : Record 16521;
      Counter@1500004 : Integer;
      EntryNo@1500005 : Integer;
      PrimaryDefNo@1500008 : Integer;
      IndianSalesTaxCalc@1500009 : Codeunit 13704;
    BEGIN
      WITH VATOpeningJnl DO
        FOR Counter := 0 TO GetDefermentPeriod(JurisdictionDefermentPeriod,VATOpeningJnl) DO BEGIN
          DetailedTaxEntry.RESET;
          DetailedTaxEntry.LOCKTABLE;
          IF DetailedTaxEntry.FINDLAST THEN
            EntryNo := DetailedTaxEntry."Entry No." + 1
          ELSE
            EntryNo := 1;

          DetailedTaxEntry.INIT;
          DetailedTaxEntry."Entry No." := EntryNo;
          DetailedTaxEntry."Entry Type" := "Entry Type";
          DetailedTaxEntry."Transaction Type" := "Transaction Type" + 1;
          DetailedTaxEntry."Document Type" := "Document Type";
          DetailedTaxEntry."Document No." := "Document No.";
          DetailedTaxEntry."Posting Date" := "Date of Purchase";
          IF State.GET("State Code") THEN
            "Date of Purchase" := IndianSalesTaxCalc.GetDefrPostingDate(State,"Date of Purchase",Counter = 0);
          IF Type = Type::Item THEN
            DetailedTaxEntry.Type := DetailedTaxEntry.Type::Item
          ELSE
            IF Type = Type::"G/L Account" THEN
              DetailedTaxEntry.Type := DetailedTaxEntry.Type::"G/L Account"
            ELSE
              IF Type = Type::"Fixed Asset" THEN
                DetailedTaxEntry.Type := DetailedTaxEntry.Type::"Fixed Asset";
          DetailedTaxEntry."No." := "No.";
          DetailedTaxEntry."Product Type" := "Product Type";
          DetailedTaxEntry."Source Type" := "Source Type";
          DetailedTaxEntry."Source No." := "Source No.";
          DetailedTaxEntry."Tax %" := "Tax %";
          DetailedTaxEntry."Non ITC Claimable Usage %" := "Non ITC Claimable Usage %";
          DetailedTaxEntry."State Code" := "State Code";
          DetailedTaxEntry."Location Code" := "Location Code";
          DetailedTaxEntry."Tax Jurisdiction Code" := "Tax Jurisdiction Code";
          DetailedTaxEntry."Tax Period" := "Tax Period";
          DetailedTaxEntry."Export or Deemed Export" := "Export or Deemed Export";
          DetailedTaxEntry.Deferment := TRUE;
          DetailedTaxEntry."User ID" := USERID;
          DetailedTaxEntry."Tax Group Code" := "Tax Group Code";
          DetailedTaxEntry."Tax Type" := DetailedTaxEntry."Tax Type"::VAT;
          DetailedTaxEntry."Deferment No." := Counter;
          DetailedTaxEntry.Positive := TRUE;
          DetailedTaxEntry."Item Ledger Entry No." := "Item Ledger Entry No.";
          DetailedTaxEntry."Schedule Code" := "Schedule Code";
          IF Counter = 0 THEN BEGIN
            DetailedTaxEntry."Tax Base Amount" := "Tax Base Amount";
            DetailedTaxEntry."Tax Amount" := "Tax Amount";
            DetailedTaxEntry.Quantity := Quantity;
            DetailedTaxEntry."Remaining Quantity" := Quantity;
            DetailedTaxEntry."Amount Loaded on Item" := "Amount Loaded on Item";
            PrimaryDefNo := EntryNo;
          END;
          DetailedTaxEntry."Input Credit/Output Tax Amount" := "Input Credit/Output Tax Amount" /
            (JurisdictionDefermentPeriod."No. of Deferments" + 1);
          DetailedTaxEntry."Remaining Tax Amount" := DetailedTaxEntry."Input Credit/Output Tax Amount";
          DetailedTaxEntry."Primary Deferment Entry No." := PrimaryDefNo;
          DetailedTaxEntry."G/L Account No." := "G/L Account No.";
          DetailedTaxEntry."Export or Deemed Export" := "Export or Deemed Export";
          IF (Counter + 1) <= "No. of Deferment Settled" THEN
            DetailedTaxEntry.Settlement := TRUE;
          DetailedTaxEntry."Input / Output Tax Applicable" := TRUE;
          DetailedTaxEntry.INSERT(TRUE);
        END;
    END;

    PROCEDURE GetDefermentPeriod@1500070(VAR JurisdictionDefermentPeriod@1000000000 : Record 16521;VATOpeningJnl@1500001 : Record 16569) : Integer;
    BEGIN
      JurisdictionDefermentPeriod.RESET;
      JurisdictionDefermentPeriod.SETRANGE("State Code",VATOpeningJnl."State Code");
      JurisdictionDefermentPeriod.SETRANGE("Effective Date",0D,VATOpeningJnl."Date of Purchase");
      JurisdictionDefermentPeriod.SETFILTER("Starting Threshold Amount",'<=%1',VATOpeningJnl."Unit Price");
      JurisdictionDefermentPeriod.SETFILTER("Closing Threshold Amount",'>=%1',VATOpeningJnl."Unit Price");
      IF JurisdictionDefermentPeriod.FINDFIRST THEN
        EXIT(JurisdictionDefermentPeriod."No. of Deferments");

      EXIT(0);
    END;

    PROCEDURE InsertVATOpeningDtldTaxEntry@1500007(VATOpeningJournal@1500001 : Record 16569;VAR AmountLoadedOnItem@1500010 : Decimal;VAR InputTaxCredit@1500026 : Decimal;VAR CapitalGood@1500027 : Boolean);
    VAR
      TaxAreaLine@1500014 : Record 319;
      TaxGroup@1500013 : Record 321;
      TaxEntry@1500005 : Record 13700;
      TaxJurisdiction@1500007 : Record 320;
      JurisDefermentPeriod@1500002 : Record 16521;
      TaxDetail@1500004 : Record 322;
      Item@1500003 : Record 27;
      DetailedTaxEntry@1500008 : Record 16522;
      DetailedTaxEntry2@1500016 : Record 16522;
      Location@1500037 : Record 14;
      CompanyInfo@1500036 : Record 79;
      IndianSalesTaxCalculate@1500035 : Codeunit 13704;
      VATMngt@1500034 : Codeunit 16503;
      VATBatch@1500011 : Record 16568;
      TaxDetailBuffer@1500032 : Record 13766;
      NoSeriesMgt@1500039 : Codeunit 396;
      TaxBaseAmount@1500012 : Decimal;
      TaxEntryNo@1500018 : Integer;
      LoopCounter@1500017 : Integer;
      LastPostingDate@1500019 : Date;
      TaxAmount@1500006 : Decimal;
      PrimaryEntryNo@1500020 : Integer;
      xAmountLoadedOnItem@1500000 : Decimal;
      xInputTaxCredit@1500009 : Decimal;
      TotalAmountLoadedOnItem@1500015 : Decimal;
      TotalInputTaxCredit@1500021 : Decimal;
      NoOfDefferments@1500023 : Integer;
      DefferPostingDate@1500025 : Date;
      ExportOrDeemedExport@1500022 : Boolean;
      CompositionType@1500024 : ' , Retailer, Works Contract, Bakery, Restaurant / Club, Second Hand Motor Vehicle';
      StateCode@1500028 : Code[10];
      Counter@1500089 : Integer;
      LineCount@1500031 : Integer;
      Window@1500038 : Dialog;
      StartingEntryNo@1500029 : Integer;
      Text16501@1500030 : TextConst 'ENU=VAT Openings successfully posted.;ENN=VAT Openings successfully posted.';
      TaxType@1500033 : Text[30];
      Text16502@1500040 : TextConst 'ENU=Tax Type must be %1 for Tax Jurisdiction in Tax Area Line %2;ENN=Tax Type must be %1 for Tax Jurisdiction in Tax Area Line %2';
      GrossTaxAmount@1500042 : Decimal;
      StandardDeductionLoaded@1500044 : Decimal;
    BEGIN
      Window.OPEN(Text16511);
      VATBatch.GET(VATOpeningJournal."Batch Name");
      IF VATOpeningJournal."Location Code" <> '' THEN BEGIN
        Location.GET(VATOpeningJournal."Location Code");
        Location.TESTFIELD("State Code");
        ExportOrDeemedExport := Location."Export or Deemed Export";
        CompositionType := Location."Composition Type";
        StateCode := Location."State Code";
      END ELSE BEGIN
        CompanyInfo.GET;
        CompanyInfo.TESTFIELD(State);
        ExportOrDeemedExport := CompanyInfo."Export or Deemed Export";
        CompositionType := CompanyInfo."Composition Type";
        StateCode := CompanyInfo.State;
      END;
      State.GET(StateCode);
      WITH VATOpeningJournal DO BEGIN
        StartingEntryNo := 0;
        IF FINDSET THEN
          REPEAT
            SETRANGE("Entry Type","Entry Type"::"Initial Entry");
            TESTFIELD("State Code");
            IF "Location Code" = '' THEN BEGIN
              CompanyInfo.GET;
              IF CompanyInfo.State <> "State Code" THEN
                ERROR(Text16515);
            END;
            IF ("Transaction Type" = "Transaction Type"::Purchase) AND (Type = Type::Item) THEN
              TESTFIELD("Item Ledger Entry No.");
            TESTFIELD(Quantity);
            TESTFIELD("Unit Price");
            TESTFIELD("G/L Account No.");
            TESTFIELD("Bal. G/L Account No.");
            TESTFIELD("Tax %");
            TaxAreaLine.RESET;
            TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
            TaxAreaLine.SETRANGE("Tax Area","Tax Area Code");
            IF TaxAreaLine.FIND('-') THEN
              REPEAT
                TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
                IF TaxType = '' THEN
                  TaxType := FORMAT(TaxJurisdiction."Tax Type")
                ELSE
                  IF TaxType <> FORMAT(TaxJurisdiction."Tax Type") THEN
                    ERROR(Text16502,TaxType,TaxAreaLine."Tax Jurisdiction Code");
                TaxAmount := 0;
                TaxBaseAmount := 0;
                IF TaxJurisdiction."Tax Type" <> TaxJurisdiction."Tax Type"::" " THEN BEGIN
                  TaxDetail.RESET;
                  TaxDetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
                  TaxDetail.SETRANGE("Tax Group Code","Tax Group Code");
                  TaxDetail.SETFILTER("Effective Date",'<=%1',"Posting Date");
                  IF TaxDetail.FINDLAST THEN BEGIN
                    TaxGroup.GET(TaxDetail."Tax Group Code");
                    IF TaxAreaLine.Formula <> '' THEN
                      TaxBaseAmount := IndianSalesTaxCalculate.EvaluateExpression(TRUE,TaxAreaLine.Formula,TaxBuffer,TaxAreaLine);
                    IF TaxAreaLine."Include Tax Base" THEN
                      TaxBaseAmount := TaxBaseAmount + "Tax Base Amount";
                    IF "Transaction Type" = "Transaction Type"::Purchase THEN
                      IF TaxAreaLine."Formula Incl. VPT" <> '' THEN
                        TaxBaseAmount := TaxBaseAmount + IndianSalesTaxCalculate.EvaluateExpressionVatPurchTax(TRUE,
                            TaxAreaLine."Formula Incl. VPT",TaxBuffer,TaxAreaLine);
                    IF "Transaction Type" = "Transaction Type"::Sale THEN
                      IF TaxAreaLine."Formula Incl.Std.Deduction" <> '' THEN
                        TaxBaseAmount := TaxBaseAmount +
                          IndianSalesTaxCalculate.EvaluateExpressionStdDeduction(TRUE,TaxAreaLine."Formula Incl.Std.Deduction",
                            TaxBuffer,TaxAreaLine);
                    TaxAmount := TaxBaseAmount * TaxDetail."Tax Below Maximum" / 100;
                    IF (TaxJurisdiction."Tax Type" = TaxJurisdiction."Tax Type"::VAT) OR (
                                                                                          TaxJurisdiction."Tax Type" =
                                                                                          TaxJurisdiction."Tax Type"::CST)
                    THEN
                      TaxAmount := RoundVATPrecision(TaxAmount);
                    CASE Type OF
                      Type::Item:
                        BEGIN
                          Item.GET("No.");
                          CapitalGood := TaxDetail."Capital Goods" AND Item."Fixed Asset";
                        END;
                      Type::"Fixed Asset":
                        CapitalGood := TaxDetail."Capital Goods";
                    END;
                    TaxEntry.SETRANGE("Entry No.");
                    IF TaxEntry.FINDLAST THEN
                      TaxEntryNo := TaxEntry."Entry No.";
                    WITH DetailedTaxEntry2 DO BEGIN
                      "Entry Type" := "Entry Type"::"Initial Entry";
                      "Transaction Type" := VATOpeningJournal."Transaction Type" + 1;
                      "Document Type" := VATOpeningJournal."Document Type";
                      "Document No." := VATOpeningJournal."Document No.";
                      "Posting Date" := VATOpeningJournal."Posting Date";
                      IF VATOpeningJournal.Type = VATOpeningJournal.Type::Item THEN
                        Type := Type::Item
                      ELSE
                        IF VATOpeningJournal.Type = VATOpeningJournal.Type::"G/L Account" THEN
                          Type := Type::"G/L Account"
                        ELSE
                          IF VATOpeningJournal.Type = VATOpeningJournal.Type::"Fixed Asset" THEN
                            Type := Type::"Fixed Asset";
                      "No." := VATOpeningJournal."No.";
                      "Product Type" := VATOpeningJournal."Product Type";
                      "Source Type" := VATOpeningJournal."Source Type";
                      "Source No." := VATOpeningJournal."Source No.";
                      "Location Code" := VATOpeningJournal."Location Code";
                      "Tax Area Code" := VATOpeningJournal."Tax Area Code";
                      "Document Line No." := VATOpeningJournal."Line No.";
                      "Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
                      "Tax Component" := TaxJurisdiction."Tax Component";
                      "Tax Group Code" := VATOpeningJournal."Tax Group Code";
                      "Tax %" := TaxDetail."Tax Below Maximum";
                      "Non ITC Claimable Usage %" := VATOpeningJournal."Non ITC Claimable Usage %";
                      "Form Code" := TaxDetail."Form Code";
                      "Works Contract" := TaxGroup."Works Contract";
                      "Schedule Code" := TaxDetail."Schedule Code";
                      Deferment := FALSE;
                      "User ID" := USERID;
                      "Export or Deemed Export" := ExportOrDeemedExport;
                      "Types Of Composition" := CompositionType;
                      "Tax Period" := State."Tax Period";
                      "State Code" := State.Code;
                      "G/L Account No." := VATOpeningJournal."G/L Account No.";
                      "Tax Type" := "Tax Type"::VAT;
                      "Item Ledger Entry No." := VATOpeningJournal."Item Ledger Entry No.";
                      IF VATOpeningJournal."Transaction Type" = VATOpeningJournal."Transaction Type"::Purchase THEN BEGIN
                        "Tax Base Amount" := TaxBaseAmount;
                        "Tax Amount" := TaxAmount;
                        Quantity := VATOpeningJournal.Quantity;
                        "Remaining Quantity" := VATOpeningJournal.Quantity;
                        "Input / Output Tax Applicable" := CapitalGood OR TaxDetail."Creditable Goods";
                        VATMngt.UpdateTaxDetails(DetailedTaxEntry2);
                        xAmountLoadedOnItem := "Amount Loaded on Item";
                        xInputTaxCredit := "Input Credit/Output Tax Amount";
                        TotalAmountLoadedOnItem += xAmountLoadedOnItem;
                        TotalInputTaxCredit += xInputTaxCredit;
                        AmountLoadedOnItem := TotalAmountLoadedOnItem;
                        InputTaxCredit := TotalInputTaxCredit;
                      END ELSE
                        IF VATOpeningJournal."Transaction Type" =
                           VATOpeningJournal."Transaction Type"::Sale
                        THEN BEGIN
                          GrossTaxAmount :=
                            RoundVATPrecision((TaxBaseAmount -
                                               TaxBaseAmount * TaxDetail."Standard Deduction %" / 100) *
                              TaxDetail."Tax Below Maximum" / 100);
                          IF TaxDetail."Standard Deduction %" <> 0 THEN
                            StandardDeductionLoaded := TaxAmount - GrossTaxAmount
                          ELSE
                            StandardDeductionLoaded := 0;
                          "Tax Base Amount" := ABS(TaxBaseAmount) * -1;
                          "Tax Amount" := ABS(GrossTaxAmount) * -1;
                          "Input Credit/Output Tax Amount" := ABS(GrossTaxAmount) * -1;
                          "Amount Loaded on Item" := "Amount Loaded on Item" * -1;
                          Quantity := ABS(VATOpeningJournal.Quantity) * -1;
                          "Remaining Tax Amount" := ABS(GrossTaxAmount) * -1;
                          "Remaining Quantity" := ABS(VATOpeningJournal.Quantity) * -1;
                          "Standard Deduction Amount" := ABS(StandardDeductionLoaded) * -1;
                          "Standard Deduction %" := TaxDetail."Standard Deduction %";
                        END
                    END
                  END;
                  TaxDetailBuffer.LOCKTABLE;
                  TaxDetailBuffer.INIT;
                  TaxDetailBuffer."Tax Area" := TaxAreaLine."Tax Area";
                  TaxDetailBuffer."Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
                  TaxDetailBuffer."Calculation Order" := TaxAreaLine."Calculation Order";
                  TaxDetailBuffer.Amount := ROUND(TaxAmount);
                  TaxDetailBuffer."Standard Deduction Amount" := ROUND(StandardDeductionLoaded);
                  TaxDetailBuffer."Account No." := TaxJurisdiction."Tax Account (Purchases)";
                  IF NOT TaxDetailBuffer.INSERT THEN
                    TaxDetailBuffer.MODIFY;
                  IF "Transaction Type" = "Transaction Type"::Purchase THEN BEGIN
                    IF CapitalGood THEN BEGIN
                      TESTFIELD("Date of Purchase");
                      JurisDefermentPeriod.RESET;
                      JurisDefermentPeriod.SETCURRENTKEY("State Code","Effective Date","Line No.");
                      JurisDefermentPeriod.SETRANGE("State Code",State.Code);
                      JurisDefermentPeriod.SETFILTER("Effective Date",'<=%1',"Posting Date");
                      JurisDefermentPeriod.SETFILTER("Starting Threshold Amount",'<=%1',"Tax Base Amount");
                      JurisDefermentPeriod.SETFILTER("Closing Threshold Amount",'>=%1',"Tax Base Amount");
                      IF JurisDefermentPeriod.FINDLAST THEN BEGIN
                        NoOfDefferments := JurisDefermentPeriod."No. of Deferments" + 1;
                        LastPostingDate := "Posting Date";
                        FOR LoopCounter := 1 TO NoOfDefferments DO BEGIN
                          IF LoopCounter = 1 THEN BEGIN
                            LastPostingDate := "Posting Date";
                            DefferPostingDate := LastPostingDate;
                          END ELSE BEGIN
                            LastPostingDate := DefferPostingDate;
                            Counter += 1;
                            DefferPostingDate := IndianSalesTaxCalculate.GetDefrPostingDate(State,LastPostingDate,Counter = 1)
                          END;
                          DetailedTaxEntry := DetailedTaxEntry2;
                          DetailedTaxEntry."Entry No." := GetNextDetTaxEntryNo;
                          IF LoopCounter = 1 THEN
                            PrimaryEntryNo := DetailedTaxEntry."Entry No."
                          ELSE BEGIN
                            DetailedTaxEntry."Tax Base Amount" := 0;
                            DetailedTaxEntry."Tax Amount" := 0;
                            DetailedTaxEntry."Amount Loaded on Item" := 0;
                            DetailedTaxEntry."Purch. Tax Amount" := 0;
                            DetailedTaxEntry.Quantity := 0;
                            DetailedTaxEntry."Remaining Quantity" := 0;
                          END;
                          DetailedTaxEntry."Posting Date" := DefferPostingDate;
                          DetailedTaxEntry."Input Credit/Output Tax Amount" := ROUND(xInputTaxCredit / NoOfDefferments);
                          IF LoopCounter = NoOfDefferments THEN BEGIN
                            IF xInputTaxCredit <> (DetailedTaxEntry."Input Credit/Output Tax Amount" * NoOfDefferments) THEN
                              DetailedTaxEntry."Input Credit/Output Tax Amount" := DetailedTaxEntry."Input Credit/Output Tax Amount" +
                                xInputTaxCredit - (DetailedTaxEntry."Input Credit/Output Tax Amount" * NoOfDefferments);
                          END;
                          DetailedTaxEntry."Remaining Tax Amount" := DetailedTaxEntry."Input Credit/Output Tax Amount";
                          DetailedTaxEntry.Deferment := TRUE;
                          DetailedTaxEntry."Deferment No." := LoopCounter - 1;
                          DetailedTaxEntry."Primary Deferment Entry No." := PrimaryEntryNo;
                          DetailedTaxEntry."Schedule Code" := DetailedTaxEntry."Schedule Code";
                          DetailedTaxEntry.Positive := DetailedTaxEntry."Input Credit/Output Tax Amount" > 0;
                          IF ((LoopCounter - 1) + 1) <= "No. of Deferment Settled" THEN
                            DetailedTaxEntry.Settlement := TRUE;
                          IF StartingEntryNo = 0 THEN BEGIN
                            StartingEntryNo := DetailedTaxEntry."Entry No.";
                            DetailedTaxEntry."Main Component Entry No." := StartingEntryNo;
                          END ELSE
                            DetailedTaxEntry."Main Component Entry No." := StartingEntryNo;
                          DetailedTaxEntry.INSERT;
                        END;
                      END ELSE BEGIN
                        DetailedTaxEntry := DetailedTaxEntry2;
                        DetailedTaxEntry."Entry No." := GetNextDetTaxEntryNo;
                        DetailedTaxEntry.Positive := DetailedTaxEntry."Input Credit/Output Tax Amount" > 0;
                        IF StartingEntryNo = 0 THEN BEGIN
                          StartingEntryNo := DetailedTaxEntry."Entry No.";
                          DetailedTaxEntry."Main Component Entry No." := StartingEntryNo;
                        END ELSE
                          DetailedTaxEntry."Main Component Entry No." := StartingEntryNo;
                        DetailedTaxEntry.INSERT;
                      END;
                    END ELSE BEGIN
                      DetailedTaxEntry := DetailedTaxEntry2;
                      DetailedTaxEntry."Entry No." := GetNextDetTaxEntryNo;
                      DetailedTaxEntry.Positive := DetailedTaxEntry."Input Credit/Output Tax Amount" > 0;
                      IF StartingEntryNo = 0 THEN BEGIN
                        StartingEntryNo := DetailedTaxEntry."Entry No.";
                        DetailedTaxEntry."Main Component Entry No." := StartingEntryNo;
                      END ELSE
                        DetailedTaxEntry."Main Component Entry No." := StartingEntryNo;
                      DetailedTaxEntry.INSERT;
                    END;
                  END ELSE
                    IF "Transaction Type" = "Transaction Type"::Sale THEN BEGIN
                      DetailedTaxEntry2."Entry No." := GetNextDetTaxEntryNo;
                      IF StartingEntryNo = 0 THEN BEGIN
                        StartingEntryNo := DetailedTaxEntry2."Entry No.";
                        DetailedTaxEntry2."Main Component Entry No." := StartingEntryNo;
                      END ELSE
                        DetailedTaxEntry2."Main Component Entry No." := StartingEntryNo;
                      DetailedTaxEntry2.INSERT;
                    END
                END;
              UNTIL TaxAreaLine.NEXT = 0;
            GenJnlLine.INIT;
            GenJnlLine."Document Type" := DetailedTaxEntry."Document Type";
            GenJnlLine."Posting Date" := "Posting Date";
            GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
            GenJnlLine."Account No." := "G/L Account No.";
            GenJnlLine.VALIDATE(Amount,"Input Credit/Output Tax Amount");
            GenJnlLine."Source Currency Amount" := "Input Credit/Output Tax Amount";
            GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"G/L Account";
            GenJnlLine."Bal. Account No." := "Bal. G/L Account No.";
            GenJnlLine."System-Created Entry" := TRUE;
            GenJnlLine."Document No." := "Document No.";
            GenJnlLine.Description := 'VAT Opening for ' + "No.";
            GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
            GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
            GenJnlLine."Dimension Set ID" := "Dimension Set ID";
            GenJnlLine."Journal Batch Name" := "Batch Name";
            GenJnlLine."Source Code" := VATBatch."Source Code";
            GenJnlLine."Line No." := "Line No.";
            PostVATOpening(GenJnlLine,VATOpeningJournal);
            LineCount += 1;
            Window.UPDATE(2,LineCount);
            Window.UPDATE(3,ROUND(LineCount / COUNT * 10000,1));
            IF ("Transaction Type" = "Transaction Type"::Purchase) AND (Type = Type::Item) THEN
              UpdateSalesTaxTrackingEntry(StartingEntryNo,"Item Ledger Entry No.",
                Quantity,Quantity);
          UNTIL NEXT = 0;
      END;
      NoSeriesMgt.GetNextNo(VATBatch."No. Series",VATOpeningJournal."Posting Date",TRUE);
      VATOpeningJournal.DELETEALL;

      DetailTaxEntryBuffer.RESET;
      DetailTaxEntryBuffer.SETRANGE("Document Type","Document Type");
      DetailTaxEntryBuffer.SETRANGE("Document No.","Document No.");
      DetailTaxEntryBuffer.SETRANGE("Transaction Type","Transaction Type");
      DetailTaxEntryBuffer.SETRANGE("Line No.","Line No.");
      DetailTaxEntryBuffer.SETRANGE("Journal Batch Name","Batch Name");
      DetailTaxEntryBuffer.DELETEALL;

      COMMIT;
      MESSAGE(Text16501);
      Window.CLOSE;
    END;

    PROCEDURE RoundVATPrecision@1500003(VATDutyAmount@1500004 : Decimal) : Decimal;
    VAR
      VAtRoundingDirection@1500001 : Text[1];
      VATRoundingPrecision@1500000 : Decimal;
      GLSetup@1500002 : Record 98;
    BEGIN
      GLSetup.GET;
      CASE GLSetup."VAT Rounding Type" OF
        GLSetup."VAT Rounding Type"::Nearest:
          VAtRoundingDirection := '=';
        GLSetup."VAT Rounding Type"::Up:
          VAtRoundingDirection := '>';
        GLSetup."VAT Rounding Type"::Down:
          VAtRoundingDirection := '<';
      END;
      IF GLSetup."VAT Rounding Precision" <> 0 THEN
        VATRoundingPrecision := GLSetup."VAT Rounding Precision"
      ELSE
        VATRoundingPrecision := 0.01;
      EXIT(ROUND(VATDutyAmount,VATRoundingPrecision,VAtRoundingDirection));
    END;

    PROCEDURE GetNextDetTaxEntryNo@1500005() : Integer;
    VAR
      DetailedTaxEntry@1500000 : Record 16522;
    BEGIN
      IF NextDetTaxEntryNo = 0 THEN BEGIN
        IF DetailedTaxEntry.FINDLAST THEN
          NextDetTaxEntryNo := DetailedTaxEntry."Entry No." + 1
        ELSE
          NextDetTaxEntryNo := 1;
      END ELSE
        NextDetTaxEntryNo := NextDetTaxEntryNo + 1;
      EXIT(NextDetTaxEntryNo);
    END;

    PROCEDURE UpdateSalesTaxTrackingEntry@1(MainComponentEntryNo@1500000 : Integer;ILEEntryNo@1000 : Integer;Quantity_@1001 : Decimal;RemainingQuantity_@1002 : Decimal);
    VAR
      SalesTaxTrackingEntry@1500001 : Record 16540;
      SalesTaxTrackingEntry2@1500002 : Record 16540;
    BEGIN
      WITH SalesTaxTrackingEntry DO BEGIN
        INIT;
        SalesTaxTrackingEntry2.RESET;
        IF SalesTaxTrackingEntry2.FINDLAST THEN
          "Entry No." := SalesTaxTrackingEntry2."Entry No." + 1
        ELSE
          "Entry No." := 1;
        "Main Component Entry No." := MainComponentEntryNo;
        "Item Ledger Entry No." := ILEEntryNo;
        Quantity := Quantity_;
        "Remaining Quantity" := RemainingQuantity_;
        INSERT;
      END;
    END;

    BEGIN
    END.
  }
}

