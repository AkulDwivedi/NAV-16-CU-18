OBJECT Table 16321 Sub Order Component List
{
  OBJECT-PROPERTIES
  {
    Date=23-02-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.48067;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "Line Type" = "Line Type"::Production THEN
                 ERROR(Text001);
             END;

    OnDelete=BEGIN
               IF "Line Type" = "Line Type"::Production THEN
                 ERROR(Text001);
             END;

    CaptionML=[ENU=Sub Order Component List;
               ENN=Sub Order Component List];
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 2   ;   ;Document Line No.   ;Integer       ;CaptionML=[ENU=Document Line No.;
                                                              ENN=Document Line No.] }
    { 6   ;   ;Parent Item No.     ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Parent Item No.;
                                                              ENN=Parent Item No.] }
    { 7   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 8   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=BEGIN
                                                                IF "Line Type" = "Line Type"::Production THEN
                                                                  ERROR(Text001);
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ENN=Item No.] }
    { 9   ;   ;Unit of Measure Code;Code10        ;OnValidate=BEGIN
                                                                IF "Line Type" = "Line Type"::Production THEN
                                                                  ERROR(Text001);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENN=Unit of Measure Code];
                                                   Editable=No }
    { 10  ;   ;Prod. Order Qty.    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Component"."Expected Quantity" WHERE (Status=CONST(Released),
                                                                                                                      Prod. Order No.=FIELD(Production Order No.),
                                                                                                                      Prod. Order Line No.=FIELD(Production Order Line No.),
                                                                                                                      Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Prod. Order Qty.;
                                                              ENN=Prod. Order Qty.];
                                                   DecimalPlaces=2:5;
                                                   Editable=No }
    { 11  ;   ;Quantity To Send    ;Decimal       ;OnValidate=BEGIN
                                                                PurchaseLine.GET(PurchaseLine."Document Type"::Order,"Document No.","Document Line No.");
                                                                PurchaseLine.TESTFIELD(Status,PurchaseLine.Status::Open);
                                                                VALIDATE("Quantity To Send (Base)",CalcBaseQty("Quantity To Send"));
                                                              END;

                                                   CaptionML=[ENU=Quantity To Send;
                                                              ENN=Quantity To Send] }
    { 12  ;   ;Quantity (Base)     ;Decimal       ;CaptionML=[ENU=Quantity (Base);
                                                              ENN=Quantity (Base)] }
    { 13  ;   ;Quantity To Send (Base);Decimal    ;CaptionML=[ENU=Quantity To Send (Base);
                                                              ENN=Quantity To Send (Base)] }
    { 14  ;   ;Description         ;Text30        ;CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 20  ;   ;Scrap %             ;Decimal       ;OnValidate=BEGIN
                                                                GetProdOrderCompLine;
                                                                ProdOrderComp.VALIDATE("Scrap %","Scrap %");
                                                                ProdOrderComp.MODIFY;
                                                                CALCFIELDS("Prod. Order Qty.");
                                                                "Total Scrap Quantity" := ("Prod. Order Qty." * "Scrap %") / 100;
                                                              END;

                                                   CaptionML=[ENU=Scrap %;
                                                              ENN=Scrap %];
                                                   DecimalPlaces=0:5;
                                                   MaxValue=100;
                                                   BlankNumbers=BlankNeg }
    { 21  ;   ;Variant Code        ;Code10        ;CaptionML=[ENU=Variant Code;
                                                              ENN=Variant Code] }
    { 45  ;   ;Quantity per        ;Decimal       ;CaptionML=[ENU=Quantity per;
                                                              ENN=Quantity per];
                                                   DecimalPlaces=0:5 }
    { 46  ;   ;Company Location    ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No),
                                                                                 Subcontracting Location=CONST(No));
                                                   CaptionML=[ENU=Company Location;
                                                              ENN=Company Location] }
    { 47  ;   ;Vendor Location     ;Code20        ;CaptionML=[ENU=Vendor Location;
                                                              ENN=Vendor Location] }
    { 48  ;   ;Production Order No.;Code20        ;CaptionML=[ENU=Production Order No.;
                                                              ENN=Production Order No.] }
    { 49  ;   ;Production Order Line No.;Integer  ;CaptionML=[ENU=Production Order Line No.;
                                                              ENN=Production Order Line No.] }
    { 50  ;   ;Line Type           ;Option        ;CaptionML=[ENU=Line Type;
                                                              ENN=Line Type];
                                                   OptionCaptionML=[ENU=Production,Purchase;
                                                                    ENN=Production,Purchase];
                                                   OptionString=Production,Purchase }
    { 51  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENN=Gen. Prod. Posting Group] }
    { 52  ;   ;Total Qty at Vendor Location;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Ledger Entry"."Remaining Quantity" WHERE (Location Code=FIELD(Vendor Location),
                                                                                                                   Item No.=FIELD(Item No.)));
                                                   CaptionML=[ENU=Total Qty at Vendor Location;
                                                              ENN=Total Qty at Vendor Location];
                                                   Editable=No }
    { 53  ;   ;Total Scrap Quantity;Decimal       ;OnValidate=BEGIN
                                                                CALCFIELDS("Prod. Order Qty.");
                                                                "Scrap %" := (100 * "Total Scrap Quantity") / "Prod. Order Qty.";
                                                                GetProdOrderCompLine;
                                                                ProdOrderComp.VALIDATE("Scrap %","Scrap %");
                                                                ProdOrderComp.MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Total Scrap Quantity;
                                                              ENN=Total Scrap Quantity] }
    { 54  ;   ;Qty. at Vendor Location;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Ledger Entry"."Remaining Quantity" WHERE (Entry Type=CONST(Transfer),
                                                                                                                   Location Code=FIELD(Vendor Location),
                                                                                                                   Order Type=CONST(Production),
                                                                                                                   Order No.=FIELD(Production Order No.),
                                                                                                                   Order Line No.=FIELD(Production Order Line No.),
                                                                                                                   Prod. Order Comp. Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Qty. at Vendor Location;
                                                              ENN=Qty. at Vendor Location];
                                                   Editable=No }
    { 55  ;   ;Qty. for Rework     ;Decimal       ;CaptionML=[ENU=Qty. for Rework;
                                                              ENN=Qty. for Rework];
                                                   Editable=No }
    { 56  ;   ;Posting date        ;Date          ;CaptionML=[ENU=Posting date;
                                                              ENN=Posting date] }
    { 57  ;   ;Applies-to Entry (Sending);Integer ;TableRelation="Item Ledger Entry"."Entry No." WHERE (Location Code=FIELD(Company Location),
                                                                                                        Item No.=FIELD(Item No.),
                                                                                                        Positive=CONST(Yes),
                                                                                                        Correction=CONST(No),
                                                                                                        Open=CONST(Yes));
                                                   CaptionML=[ENU=Applies-to Entry (Sending);
                                                              ENN=Applies-to Entry (Sending)];
                                                   BlankZero=Yes }
    { 58  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENN=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 59  ;   ;Job Work Return Period;Integer     ;CaptionML=[ENU=Job Work Return Period;
                                                              ENN=Job Work Return Period];
                                                   MinValue=0 }
    { 60  ;   ;Identification Mark ;Text20        ;CaptionML=[ENU=Identification Mark;
                                                              ENN=Identification Mark] }
    { 61  ;   ;Job Work Return Period (GST);Integer;
                                                   CaptionML=[ENU=Job Work Return Period (GST);
                                                              ENN=Job Work Return Period (GST)];
                                                   MinValue=0 }
    { 480 ;   ;Dimension Set ID    ;Integer       ;CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID] }
  }
  KEYS
  {
    {    ;Document No.,Document Line No.,Parent Item No.,Line No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1280000 : TextConst 'ENU="Can Not Insert,Delete  OR Modify Component details ";ENN="Can Not Insert,Delete  OR Modify Component details "';
      ProdOrderComp@1280001 : Record 5407;
      SubOderComponentList@1280002 : Record 16321;
      PurchaseLine@1280004 : Record 39;
      Text002@1280005 : TextConst 'ENU=Production Order %1 does not exist in released state, \ No transaction allowed;ENN=Production Order %1 does not exist in released state, \ No transaction allowed';
      ReserveProdOrderComp@1280006 : Codeunit 99000838;

    PROCEDURE GetProdOrderCompLine@1280000();
    BEGIN
      ProdOrderComp.RESET;
      ProdOrderComp.SETRANGE(Status,ProdOrderComp.Status::Released);
      ProdOrderComp.SETFILTER("Prod. Order No.","Production Order No.");
      ProdOrderComp.SETRANGE("Prod. Order Line No.","Production Order Line No.");
      ProdOrderComp.SETRANGE("Line No.","Line No.");
      IF NOT ProdOrderComp.FINDFIRST THEN
        ERROR(Text002,"Production Order No.");
    END;

    PROCEDURE CalculateQtyToSend@1280001(PurchLine@1280001 : Record 39;Quantity@1280000 : Decimal);
    BEGIN
      SubOderComponentList.RESET;
      SubOderComponentList.SETFILTER("Document No.",PurchLine."Document No.");
      SubOderComponentList.SETRANGE("Document Line No.",PurchLine."Line No.");
      SubOderComponentList.SETFILTER("Parent Item No.",PurchLine."No.");
      SubOderComponentList.FIND('-');
      REPEAT
        SubOderComponentList."Quantity To Send" := SubOderComponentList."Quantity per" * Quantity;
        SubOderComponentList.MODIFY;
      UNTIL SubOderComponentList.NEXT = 0;
    END;

    PROCEDURE OpenItemTrackingLines@6500(SubOrderComp@1280000 : Record 16321);
    BEGIN
      ProdOrderComp.RESET;
      ProdOrderComp.SETRANGE(Status,ProdOrderComp.Status::Released);
      ProdOrderComp.SETFILTER("Prod. Order No.","Production Order No.");
      ProdOrderComp.SETRANGE("Prod. Order Line No.","Production Order Line No.");
      ProdOrderComp.SETRANGE("Line No.","Line No.");
      GetProdOrderCompLine;
      ReserveProdOrderComp.CallItemTracking(ProdOrderComp);
    END;

    PROCEDURE UpdateIssueDetails@1500000(PurchLine@1500000 : Record 39;"Deliver Comp. For"@1500001 : Decimal;"Qty. to Reject (Rework)"@1500002 : Decimal);
    VAR
      SubOrderComponents@1500003 : Record 16321;
    BEGIN
      WITH PurchLine DO BEGIN
        SubOrderComponents.RESET;
        SubOrderComponents.SETFILTER("Document No.","Document No.");
        SubOrderComponents.SETRANGE("Document Line No.","Line No.");
        SubOrderComponents.FIND('-');
        REPEAT
          SubOrderComponents.VALIDATE(
            "Quantity To Send",("Deliver Comp. For" * SubOrderComponents."Quantity per"));
          SubOrderComponents.VALIDATE(
            "Qty. for Rework",(SubOrderComponents."Quantity per" * "Qty. to Reject (Rework)"));
          IF SubOrderComponents."Scrap %" <> 0 THEN BEGIN
            SubOrderComponents."Quantity To Send" := SubOrderComponents."Quantity To Send" +
              (SubOrderComponents."Quantity To Send" / 100) * SubOrderComponents."Scrap %";
            SubOrderComponents."Quantity To Send (Base)" := SubOrderComponents."Quantity To Send (Base)" +
              (SubOrderComponents."Quantity To Send (Base)" / 100) * SubOrderComponents."Scrap %";
          END;
          SubOrderComponents.MODIFY;
        UNTIL SubOrderComponents.NEXT = 0
      END;
    END;

    PROCEDURE CalcBaseQty@1500011(Qty@1500000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE ShowDimensions@1500001();
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      TESTFIELD("Document No.");
      TESTFIELD("Line No.");
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Document No.","Line No."));
    END;

    PROCEDURE InitTrackingSpecification@1500005(VAR TrackingSpecification@1500000 : Record 336);
    BEGIN
      TrackingSpecification.INIT;
      TrackingSpecification."Source Type" := DATABASE::"Sub Order Component List";
      TrackingSpecification."Item No." := "Item No.";
      TrackingSpecification."Location Code" := "Company Location";
      TrackingSpecification.Description := Description;
      TrackingSpecification."Variant Code" := "Variant Code";
      TrackingSpecification."Source ID" := "Production Order No.";
      TrackingSpecification."Source Batch Name" := '';
      TrackingSpecification."Source Prod. Order Line" := "Production Order Line No.";
      TrackingSpecification."Source Ref. No." := "Line No.";
      TrackingSpecification."Quantity (Base)" := "Quantity To Send (Base)";
      TrackingSpecification."Qty. to Handle" := "Quantity To Send";
      TrackingSpecification."Qty. to Handle (Base)" := "Quantity To Send (Base)";
      TrackingSpecification."Qty. to Invoice" := "Quantity To Send";
      TrackingSpecification."Qty. to Invoice (Base)" := "Quantity To Send (Base)";
      TrackingSpecification."Quantity Handled (Base)" := "Quantity To Send (Base)";
      TrackingSpecification."Quantity Invoiced (Base)" := "Quantity To Send (Base)";
      TrackingSpecification."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
    END;

    PROCEDURE OpenItemTrackingLinesSubcon@1500004();
    VAR
      TrackingSpecification@1500002 : Record 336;
      ItemTrackingForm@1500001 : Page 6510;
    BEGIN
      TESTFIELD("Item No.");
      InitTrackingSpecification(TrackingSpecification);
      ItemTrackingForm.SetSource(TrackingSpecification,WORKDATE);
      ItemTrackingForm.RUNMODAL;
    END;

    BEGIN
    END.
  }
}

