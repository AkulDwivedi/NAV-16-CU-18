OBJECT Table 5741 Transfer Line
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.49326,NAVIN9.00.00.49326;
  }
  PROPERTIES
  {
    OnInsert=VAR
               TransLine2@1000 : Record 5741;
             BEGIN
               TestStatusOpen;
               TransLine2.RESET;
               TransLine2.SETFILTER("Document No.",TransHeader."No.");
               IF TransLine2.FINDLAST THEN
                 "Line No." := TransLine2."Line No." + 10000;
               ReserveTransferLine.VerifyQuantity(Rec,xRec);
             END;

    OnModify=BEGIN
               ReserveTransferLine.VerifyChange(Rec,xRec);
             END;

    OnDelete=VAR
               ItemChargeAssgntPurch@1000 : Record 5805;
             BEGIN
               TestStatusOpen;

               TESTFIELD("Quantity Shipped","Quantity Received");
               TESTFIELD("Qty. Shipped (Base)","Qty. Received (Base)");
               CALCFIELDS("Reserved Qty. Inbnd. (Base)","Reserved Qty. Outbnd. (Base)");
               TESTFIELD("Reserved Qty. Inbnd. (Base)",0);
               TESTFIELD("Reserved Qty. Outbnd. (Base)",0);

               ReserveTransferLine.DeleteLine(Rec);
               WhseValidateSourceLine.TransLineDelete(Rec);

               ItemChargeAssgntPurch.SETCURRENTKEY(
                 "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
               ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",ItemChargeAssgntPurch."Applies-to Doc. Type"::"Transfer Receipt");
               ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.","Document No.");
               ItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.","Line No.");
               ItemChargeAssgntPurch.DELETEALL(TRUE);
               GSTManagement.DeleteGSTCalculationBuffer(DocTransactionType::Transfer,0,"Document No.","Line No.");
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=[ENU=Transfer Line;
               ENN=Transfer Line];
    LookupPageID=Page5749;
    DrillDownPageID=Page5749;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 3   ;   ;Item No.            ;Code20        ;TableRelation=Item WHERE (Type=CONST(Inventory));
                                                   OnValidate=VAR
                                                                TempTransferLine@1000 : TEMPORARY Record 5741;
                                                              BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                CALCFIELDS("Reserved Qty. Inbnd. (Base)");
                                                                TESTFIELD("Reserved Qty. Inbnd. (Base)",0);
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);

                                                                TempTransferLine := Rec;
                                                                INIT;
                                                                "Item No." := TempTransferLine."Item No.";
                                                                IF "Item No." = '' THEN
                                                                  EXIT;

                                                                GetTransHeader;
                                                                GetItem;
                                                                GetDefaultBin("Transfer-from Code","Transfer-to Code");

                                                                Item.TESTFIELD(Blocked,FALSE);

                                                                VALIDATE(Description,Item.Description);
                                                                VALIDATE("Gen. Prod. Posting Group",Item."Gen. Prod. Posting Group");
                                                                VALIDATE("Inventory Posting Group",Item."Inventory Posting Group");
                                                                VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                VALIDATE("Gross Weight",Item."Gross Weight");
                                                                VALIDATE("Net Weight",Item."Net Weight");
                                                                VALIDATE("Unit Volume",Item."Unit Volume");
                                                                VALIDATE("Units per Parcel",Item."Units per Parcel");
                                                                VALIDATE("Description 2",Item."Description 2");
                                                                VALIDATE(Quantity,xRec.Quantity);
                                                                "Item Category Code" := Item."Item Category Code";
                                                                "Product Group Code" := Item."Product Group Code";
                                                                "Assessable Value" := Item."Assessable Value";
                                                                "Excise Accounting Type" := Item."Excise Accounting Type";
                                                                "Capital Item" := Item."Capital Item";
                                                                "Excise Prod. Posting Group" := Item."Excise Prod. Posting Group";
                                                                GetCostOfProduction;
                                                                GetMRP;
                                                                "GST Credit" := Item."GST Credit";
                                                                "GST Group Code" := Item."GST Group Code";
                                                                "HSN/SAC Code" := Item."HSN/SAC Code";
                                                                Exempted := Item.Exempted;
                                                                CreateDim(DATABASE::Item,"Item No.");
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Item No.;
                                                              ENN=Item No.] }
    { 4   ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                IF Quantity <> 0 THEN
                                                                  TESTFIELD("Item No.");
                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                IF ((Quantity * "Quantity Shipped") < 0) OR
                                                                   (ABS(Quantity) < ABS("Quantity Shipped"))
                                                                THEN
                                                                  FIELDERROR(Quantity,STRSUBSTNO(Text002,FIELDCAPTION("Quantity Shipped")));
                                                                IF (("Quantity (Base)" * "Qty. Shipped (Base)") < 0) OR
                                                                   (ABS("Quantity (Base)") < ABS("Qty. Received (Base)"))
                                                                THEN
                                                                  FIELDERROR("Quantity (Base)",STRSUBSTNO(Text002,FIELDCAPTION("Qty. Shipped (Base)")));
                                                                InitQtyInTransit;
                                                                InitOutstandingQty;
                                                                InitQtyToShip;
                                                                InitQtyToReceive;
                                                                CheckItemAvailable(FIELDNO(Quantity));

                                                                ReserveTransferLine.VerifyQuantity(Rec,xRec);

                                                                UpdateWithWarehouseShipReceive;
                                                                UpdateAmounts;

                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENN=Quantity];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 5   ;   ;Unit of Measure     ;Text10        ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure;
                                                              ENN=Unit of Measure] }
    { 6   ;   ;Qty. to Ship        ;Decimal       ;OnValidate=BEGIN
                                                                GetLocation("Transfer-from Code");
                                                                IF CurrFieldNo <> 0 THEN BEGIN
                                                                  IF Location."Require Shipment" AND
                                                                     ("Qty. to Ship" <> 0)
                                                                  THEN
                                                                    CheckWarehouse("Transfer-from Code",FALSE);
                                                                  WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                                END;

                                                                IF "Qty. to Ship" > "Outstanding Quantity" THEN
                                                                  IF "Outstanding Quantity" > 0 THEN
                                                                    ERROR(
                                                                      Text005,
                                                                      "Outstanding Quantity")
                                                                  ELSE
                                                                    ERROR(Text006);
                                                                "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship;
                                                              ENN=Qty. to Ship];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 7   ;   ;Qty. to Receive     ;Decimal       ;OnValidate=BEGIN
                                                                GetLocation("Transfer-to Code");
                                                                IF CurrFieldNo <> 0 THEN BEGIN
                                                                  IF Location."Require Receive" AND
                                                                     ("Qty. to Receive" <> 0)
                                                                  THEN
                                                                    CheckWarehouse("Transfer-to Code",TRUE);
                                                                  WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                                END;

                                                                IF "Qty. to Receive" > "Qty. in Transit" THEN
                                                                  IF "Qty. in Transit" > 0 THEN
                                                                    ERROR(
                                                                      Text008,
                                                                      "Qty. in Transit")
                                                                  ELSE
                                                                    ERROR(Text009);
                                                                "Qty. to Receive (Base)" := CalcBaseQty("Qty. to Receive");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive;
                                                              ENN=Qty. to Receive];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 8   ;   ;Quantity Shipped    ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Shipped (Base)" := CalcBaseQty("Quantity Shipped");
                                                                InitQtyInTransit;
                                                                InitOutstandingQty;
                                                                InitQtyToShip;
                                                                InitQtyToReceive;
                                                              END;

                                                   CaptionML=[ENU=Quantity Shipped;
                                                              ENN=Quantity Shipped];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 9   ;   ;Quantity Received   ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Received (Base)" := CalcBaseQty("Quantity Received");
                                                                InitQtyInTransit;
                                                                InitOutstandingQty;
                                                                InitQtyToReceive;
                                                              END;

                                                   CaptionML=[ENU=Quantity Received;
                                                              ENN=Quantity Received];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 10  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENN=Status];
                                                   OptionCaptionML=[ENU=Open,Released;
                                                                    ENN=Open,Released];
                                                   OptionString=Open,Released;
                                                   Editable=No }
    { 11  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 12  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 13  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 14  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENN=Gen. Prod. Posting Group] }
    { 15  ;   ;Inventory Posting Group;Code10     ;TableRelation="Inventory Posting Group";
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                              END;

                                                   CaptionML=[ENU=Inventory Posting Group;
                                                              ENN=Inventory Posting Group] }
    { 16  ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ENN=Quantity (Base)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 17  ;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=[ENU=Outstanding Qty. (Base);
                                                              ENN=Outstanding Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 18  ;   ;Qty. to Ship (Base) ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Ship","Qty. to Ship (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship (Base);
                                                              ENN=Qty. to Ship (Base)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 19  ;   ;Qty. Shipped (Base) ;Decimal       ;CaptionML=[ENU=Qty. Shipped (Base);
                                                              ENN=Qty. Shipped (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 20  ;   ;Qty. to Receive (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Receive","Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Receive (Base);
                                                              ENN=Qty. to Receive (Base)];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 21  ;   ;Qty. Received (Base);Decimal       ;CaptionML=[ENU=Qty. Received (Base);
                                                              ENN=Qty. Received (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 22  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENN=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 23  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                UnitOfMeasure@1000 : Record 204;
                                                                UOMMgt@1001 : Codeunit 5402;
                                                              BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Qty. Shipped (Base)",0);
                                                                TESTFIELD("Quantity Received",0);
                                                                TESTFIELD("Qty. Received (Base)",0);
                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                                IF "Unit of Measure Code" = '' THEN
                                                                  "Unit of Measure" := ''
                                                                ELSE BEGIN
                                                                  IF NOT UnitOfMeasure.GET("Unit of Measure Code") THEN
                                                                    UnitOfMeasure.INIT;
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                END;
                                                                GetItem;
                                                                VALIDATE("Qty. per Unit of Measure",UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code"));
                                                                "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
                                                                "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
                                                                "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
                                                                "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
                                                                "Assessable Value" := Item."Assessable Value" * "Qty. per Unit of Measure";
                                                                VALIDATE(Quantity);
                                                                IF NOT TransHeader."Captive Consumption" THEN
                                                                  VALIDATE("Transfer Price",Item."Unit Cost" * "Qty. per Unit of Measure");
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENN=Unit of Measure Code] }
    { 24  ;   ;Outstanding Quantity;Decimal       ;CaptionML=[ENU=Outstanding Quantity;
                                                              ENN=Outstanding Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 25  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ENN=Gross Weight];
                                                   DecimalPlaces=0:5 }
    { 26  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ENN=Net Weight];
                                                   DecimalPlaces=0:5 }
    { 27  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ENN=Unit Volume];
                                                   DecimalPlaces=0:5 }
    { 30  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record 5401;
                                                              BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);

                                                                IF "Variant Code" = '' THEN
                                                                  EXIT;

                                                                GetDefaultBin("Transfer-from Code","Transfer-to Code");
                                                                ItemVariant.GET("Item No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                                "Description 2" := ItemVariant."Description 2";

                                                                CheckItemAvailable(FIELDNO("Variant Code"));
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ENN=Variant Code] }
    { 31  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ENN=Units per Parcel];
                                                   DecimalPlaces=0:5 }
    { 32  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENN=Description 2] }
    { 33  ;   ;In-Transit Code     ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                              END;

                                                   CaptionML=[ENU=In-Transit Code;
                                                              ENN=In-Transit Code];
                                                   Editable=No }
    { 34  ;   ;Qty. in Transit     ;Decimal       ;CaptionML=[ENU=Qty. in Transit;
                                                              ENN=Qty. in Transit];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 35  ;   ;Qty. in Transit (Base);Decimal     ;CaptionML=[ENU=Qty. in Transit (Base);
                                                              ENN=Qty. in Transit (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 36  ;   ;Transfer-from Code  ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                IF "Transfer-from Code" <> xRec."Transfer-from Code" THEN BEGIN
                                                                  "Transfer-from Bin Code" := '';
                                                                  GetDefaultBin("Transfer-from Code",'');
                                                                END;

                                                                CheckItemAvailable(FIELDNO("Transfer-from Code"));
                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                UpdateWithWarehouseShipReceive;
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Transfer-from Code;
                                                              ENN=Transfer-from Code];
                                                   Editable=No }
    { 37  ;   ;Transfer-to Code    ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                IF "Transfer-to Code" <> xRec."Transfer-to Code" THEN BEGIN
                                                                  "Transfer-To Bin Code" := '';
                                                                  GetDefaultBin('',"Transfer-to Code");
                                                                END;

                                                                ReserveTransferLine.VerifyChange(Rec,xRec);
                                                                UpdateWithWarehouseShipReceive;
                                                                WhseValidateSourceLine.TransLineVerifyChange(Rec,xRec);
                                                              END;

                                                   CaptionML=[ENU=Transfer-to Code;
                                                              ENN=Transfer-to Code];
                                                   Editable=No }
    { 38  ;   ;Shipment Date       ;Date          ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                                CheckItemAvailable(FIELDNO("Shipment Date"));
                                                                DateConflictCheck;
                                                              END;

                                                   CaptionML=[ENU=Shipment Date;
                                                              ENN=Shipment Date] }
    { 39  ;   ;Receipt Date        ;Date          ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcShipmentDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                                CheckItemAvailable(FIELDNO("Shipment Date"));
                                                                DateConflictCheck;
                                                              END;

                                                   CaptionML=[ENU=Receipt Date;
                                                              ENN=Receipt Date] }
    { 40  ;   ;Derived From Line No.;Integer      ;TableRelation="Transfer Line"."Line No." WHERE (Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Derived From Line No.;
                                                              ENN=Derived From Line No.] }
    { 41  ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENN=Shipping Agent Code] }
    { 42  ;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.GetShippingTime(
                                                                  "Transfer-from Code","Transfer-to Code",
                                                                  "Shipping Agent Code","Shipping Agent Service Code",
                                                                  "Shipping Time");
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                                CheckItemAvailable(FIELDNO("Shipping Agent Service Code"));
                                                                DateConflictCheck;
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ENN=Shipping Agent Service Code] }
    { 43  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                                ItemTrackingLines@1001 : Page 6510;
                                                              BEGIN
                                                                IF "Appl.-to Item Entry" <> 0 THEN BEGIN
                                                                  TESTFIELD(Quantity);
                                                                  ItemLedgEntry.GET("Appl.-to Item Entry");
                                                                  ItemLedgEntry.TESTFIELD(Positive,TRUE);
                                                                  IF (ItemLedgEntry."Lot No." <> '') OR (ItemLedgEntry."Serial No." <> '') THEN
                                                                    ERROR(MustUseTrackingErr,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-to Item Entry"));
                                                                  IF ABS("Qty. to Ship (Base)") > ItemLedgEntry.Quantity THEN
                                                                    ERROR(ShippingMoreUnitsThanReceivedErr,ItemLedgEntry.Quantity,ItemLedgEntry."Document No.");

                                                                  ItemLedgEntry.TESTFIELD("Location Code","Transfer-from Code");
                                                                  IF NOT ItemLedgEntry.Open THEN
                                                                    MESSAGE(LedgEntryWillBeOpenedMsg,"Appl.-to Item Entry");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-to Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ENN=Appl.-to Item Entry] }
    { 50  ;   ;Reserved Quantity Inbnd.;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                       Source Ref. No.=FIELD(Line No.),
                                                                                                       Source Type=CONST(5741),
                                                                                                       Source Subtype=CONST(1),
                                                                                                       Source Prod. Order Line=FIELD(Derived From Line No.),
                                                                                                       Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity Inbnd.;
                                                              ENN=Reserved Quantity Inbnd.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 51  ;   ;Reserved Quantity Outbnd.;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                        Source Ref. No.=FIELD(Line No.),
                                                                                                        Source Type=CONST(5741),
                                                                                                        Source Subtype=CONST(0),
                                                                                                        Source Prod. Order Line=FIELD(Derived From Line No.),
                                                                                                        Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity Outbnd.;
                                                              ENN=Reserved Quantity Outbnd.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 52  ;   ;Reserved Qty. Inbnd. (Base);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                Source Ref. No.=FIELD(Line No.),
                                                                                                                Source Type=CONST(5741),
                                                                                                                Source Subtype=CONST(1),
                                                                                                                Source Prod. Order Line=FIELD(Derived From Line No.),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. Inbnd. (Base);
                                                              ENN=Reserved Qty. Inbnd. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 53  ;   ;Reserved Qty. Outbnd. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                 Source Ref. No.=FIELD(Line No.),
                                                                                                                 Source Type=CONST(5741),
                                                                                                                 Source Subtype=CONST(0),
                                                                                                                 Source Prod. Order Line=FIELD(Derived From Line No.),
                                                                                                                 Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. Outbnd. (Base);
                                                              ENN=Reserved Qty. Outbnd. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 54  ;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                                DateConflictCheck;
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Time;
                                                              ENN=Shipping Time] }
    { 55  ;   ;Reserved Quantity Shipped;Decimal  ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                       Source Ref. No.=FILTER(<>0),
                                                                                                       Source Type=CONST(5741),
                                                                                                       Source Subtype=CONST(1),
                                                                                                       Source Prod. Order Line=FIELD(Line No.),
                                                                                                       Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity Shipped;
                                                              ENN=Reserved Quantity Shipped];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 56  ;   ;Reserved Qty. Shipped (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                Source Ref. No.=FILTER(<>0),
                                                                                                                Source Type=CONST(5741),
                                                                                                                Source Subtype=CONST(1),
                                                                                                                Source Prod. Order Line=FIELD(Line No.),
                                                                                                                Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Qty. Shipped (Base);
                                                              ENN=Reserved Qty. Shipped (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 5704;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENN=Item Category Code] }
    { 5707;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENN=Product Group Code] }
    { 5750;   ;Whse. Inbnd. Otsdg. Qty (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Receipt Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(5741),
                                                                                                                             Source Subtype=CONST(1),
                                                                                                                             Source No.=FIELD(Document No.),
                                                                                                                             Source Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Whse. Inbnd. Otsdg. Qty (Base);
                                                              ENN=Whse. Inbnd. Otsdg. Qty (Base)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5751;   ;Whse Outbnd. Otsdg. Qty (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(5741),
                                                                                                                              Source Subtype=CONST(0),
                                                                                                                              Source No.=FIELD(Document No.),
                                                                                                                              Source Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Whse Outbnd. Otsdg. Qty (Base);
                                                              ENN=Whse Outbnd. Otsdg. Qty (Base)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;CaptionML=[ENU=Completely Shipped;
                                                              ENN=Completely Shipped];
                                                   Editable=No }
    { 5753;   ;Completely Received ;Boolean       ;CaptionML=[ENU=Completely Received;
                                                              ENN=Completely Received];
                                                   Editable=No }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                                DateConflictCheck;
                                                              END;

                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ENN=Outbound Whse. Handling Time] }
    { 5794;   ;Inbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo <> 0 THEN
                                                                  TestStatusOpen;
                                                                TransferRoute.CalcReceiptDate("Shipment Date","Receipt Date",
                                                                  "Shipping Time","Outbound Whse. Handling Time","Inbound Whse. Handling Time",
                                                                  "Transfer-from Code","Transfer-to Code","Shipping Agent Code","Shipping Agent Service Code");
                                                                DateConflictCheck;
                                                              END;

                                                   CaptionML=[ENU=Inbound Whse. Handling Time;
                                                              ENN=Inbound Whse. Handling Time] }
    { 7300;   ;Transfer-from Bin Code;Code20      ;TableRelation="Bin Content"."Bin Code" WHERE (Location Code=FIELD(Transfer-from Code),
                                                                                                 Item No.=FIELD(Item No.),
                                                                                                 Variant Code=FIELD(Variant Code));
                                                   OnValidate=BEGIN
                                                                IF "Transfer-from Bin Code" <> xRec."Transfer-from Bin Code" THEN BEGIN
                                                                  TESTFIELD("Transfer-from Code");
                                                                  IF "Transfer-from Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Transfer-from Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                    GetBin("Transfer-from Code","Transfer-from Bin Code");
                                                                    TESTFIELD("Transfer-from Code",Bin."Location Code");
                                                                    HandleDedicatedBin(TRUE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Transfer-from Bin Code;
                                                              ENN=Transfer-from Bin Code] }
    { 7301;   ;Transfer-To Bin Code;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Transfer-to Code));
                                                   OnValidate=BEGIN
                                                                IF "Transfer-To Bin Code" <> xRec."Transfer-To Bin Code" THEN BEGIN
                                                                  TESTFIELD("Transfer-to Code");
                                                                  IF "Transfer-To Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Transfer-to Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                    GetBin("Transfer-to Code","Transfer-To Bin Code");
                                                                    TESTFIELD("Transfer-to Code",Bin."Location Code");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Transfer-To Bin Code;
                                                              ENN=Transfer-To Bin Code] }
    { 13701;  ;Transfer Price      ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusShip;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Transfer Price;
                                                              ENN=Transfer Price];
                                                   AutoFormatType=2 }
    { 13702;  ;Amount              ;Decimal       ;CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   Editable=No }
    { 13709;  ;BED Amount          ;Decimal       ;CaptionML=[ENU=BED Amount;
                                                              ENN=BED Amount] }
    { 13710;  ;AED(GSI) Amount     ;Decimal       ;CaptionML=[ENU=AED(GSI) Amount;
                                                              ENN=AED(GSI) Amount] }
    { 13711;  ;SED Amount          ;Decimal       ;CaptionML=[ENU=SED Amount;
                                                              ENN=SED Amount] }
    { 13720;  ;SAED Amount         ;Decimal       ;CaptionML=[ENU=SAED Amount;
                                                              ENN=SAED Amount] }
    { 13721;  ;CESS Amount         ;Decimal       ;CaptionML=[ENU=CESS Amount;
                                                              ENN=CESS Amount] }
    { 13722;  ;NCCD Amount         ;Decimal       ;CaptionML=[ENU=NCCD Amount;
                                                              ENN=NCCD Amount] }
    { 13723;  ;eCess Amount        ;Decimal       ;CaptionML=[ENU=eCess Amount;
                                                              ENN=eCess Amount] }
    { 13724;  ;Excise Amount       ;Decimal       ;CaptionML=[ENU=Excise Amount;
                                                              ENN=Excise Amount];
                                                   Editable=No }
    { 13725;  ;Amount Including Excise;Decimal    ;CaptionML=[ENU=Amount Including Excise;
                                                              ENN=Amount Including Excise];
                                                   Editable=No }
    { 13726;  ;Excise Accounting Type;Option      ;CaptionML=[ENU=Excise Accounting Type;
                                                              ENN=Excise Accounting Type];
                                                   OptionCaptionML=[ENU=With CENVAT,Without CENVAT;
                                                                    ENN=With CENVAT,Without CENVAT];
                                                   OptionString=With CENVAT,Without CENVAT }
    { 13727;  ;Excise Prod. Posting Group;Code10  ;TableRelation="Excise Prod. Posting Group";
                                                   CaptionML=[ENU=Excise Prod. Posting Group;
                                                              ENN=Excise Prod. Posting Group] }
    { 13728;  ;Excise Bus. Posting Group;Code10   ;TableRelation="Excise Bus. Posting Group";
                                                   CaptionML=[ENU=Excise Bus. Posting Group;
                                                              ENN=Excise Bus. Posting Group] }
    { 13730;  ;Capital Item        ;Boolean       ;CaptionML=[ENU=Capital Item;
                                                              ENN=Capital Item] }
    { 13731;  ;Excise Base Quantity;Decimal       ;CaptionML=[ENU=Excise Base Quantity;
                                                              ENN=Excise Base Quantity] }
    { 13738;  ;Excise Base Amount  ;Decimal       ;CaptionML=[ENU=Excise Base Amount;
                                                              ENN=Excise Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 13775;  ;Amount Added to Excise Base;Decimal;CaptionML=[ENU=Amount Added to Excise Base;
                                                              ENN=Amount Added to Excise Base];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 13777;  ;Amount Added to Inventory;Decimal  ;CaptionML=[ENU=Amount Added to Inventory;
                                                              ENN=Amount Added to Inventory];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 13778;  ;Charges to Transfer ;Decimal       ;CaptionML=[ENU=Charges to Transfer;
                                                              ENN=Charges to Transfer];
                                                   Editable=No }
    { 13779;  ;Total Amount to Transfer;Decimal   ;CaptionML=[ENU=Total Amount to Transfer;
                                                              ENN=Total Amount to Transfer];
                                                   Editable=No }
    { 13780;  ;Claim Deferred Excise;Boolean      ;OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                              END;

                                                   CaptionML=[ENU=Claim Deferred Excise;
                                                              ENN=Claim Deferred Excise] }
    { 16452;  ;ADET Amount         ;Decimal       ;CaptionML=[ENU=ADET Amount;
                                                              ENN=ADET Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 16455;  ;AED(TTA) Amount     ;Decimal       ;CaptionML=[ENU=AED(TTA) Amount;
                                                              ENN=AED(TTA) Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 16459;  ;ADE Amount          ;Decimal       ;CaptionML=[ENU=ADE Amount;
                                                              ENN=ADE Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 16460;  ;Assessable Value    ;Decimal       ;CaptionML=[ENU=Assessable Value;
                                                              ENN=Assessable Value] }
    { 16494;  ;SHE Cess Amount     ;Decimal       ;CaptionML=[ENU=SHE Cess Amount;
                                                              ENN=SHE Cess Amount];
                                                   Editable=Yes;
                                                   AutoFormatType=1 }
    { 16502;  ;ADC VAT Amount      ;Decimal       ;CaptionML=[ENU=ADC VAT Amount;
                                                              ENN=ADC VAT Amount];
                                                   Editable=Yes;
                                                   AutoFormatType=1 }
    { 16503;  ;CIF Amount          ;Decimal       ;CaptionML=[ENU=CIF Amount;
                                                              ENN=CIF Amount] }
    { 16504;  ;BCD Amount          ;Decimal       ;CaptionML=[ENU=BCD Amount;
                                                              ENN=BCD Amount] }
    { 16505;  ;CVD                 ;Boolean       ;CaptionML=[ENU=CVD;
                                                              ENN=CVD] }
    { 16506;  ;Excise Loading on Inventory;Boolean;OnValidate=BEGIN
                                                                TESTFIELD("Quantity Received",0);
                                                                GetLocation("Transfer-to Code");
                                                                Location.TESTFIELD("Trading Location",FALSE);
                                                              END;

                                                   CaptionML=[ENU=Excise Loading on Inventory;
                                                              ENN=Excise Loading on Inventory] }
    { 16507;  ;Captive Consumption %;Decimal      ;CaptionML=[ENU=Captive Consumption %;
                                                              ENN=Captive Consumption %];
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 16508;  ;Admin. Cost %       ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                GetCostofProdInlcAdminCost;
                                                              END;

                                                   CaptionML=[ENU=Admin. Cost %;
                                                              ENN=Admin. Cost %];
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 16509;  ;MRP Price           ;Decimal       ;CaptionML=[ENU=MRP Price;
                                                              ENN=MRP Price];
                                                   MinValue=0 }
    { 16510;  ;MRP                 ;Boolean       ;CaptionML=[ENU=MRP;
                                                              ENN=MRP];
                                                   Editable=No }
    { 16511;  ;Abatement %         ;Decimal       ;CaptionML=[ENU=Abatement %;
                                                              ENN=Abatement %];
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 16512;  ;Applies-to Entry (RG 23 D);Integer ;TableRelation="RG 23 D"."Entry No." WHERE (Location Code=FIELD(Transfer-from Code),
                                                                                              Item No.=FIELD(Item No.),
                                                                                              Closed=FILTER(No),
                                                                                              Transaction Type=FILTER(Purchase),
                                                                                              Item Ledg. Entry No.=FIELD("Applies-to Entry (Ship)"));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Applies-to Entry (Ship)");
                                                                CheckRG23D;
                                                              END;

                                                   CaptionML=[ENU=Applies-to Entry (RG 23 D);
                                                              ENN=Applies-to Entry (RG 23 D)] }
    { 16513;  ;Cost of Production  ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                GetCostofProdInlcAdminCost;
                                                              END;

                                                   CaptionML=[ENU=Cost of Production;
                                                              ENN=Cost of Production];
                                                   MinValue=0 }
    { 16515;  ;Cost Of Prod. Incl. Admin Cost;Decimal;
                                                   CaptionML=[ENU=Cost Of Prod. Incl. Admin Cost;
                                                              ENN=Cost Of Prod. Incl. Admin Cost] }
    { 16516;  ;Custom eCess Amount ;Decimal       ;CaptionML=[ENU=Custom eCess Amount;
                                                              ENN=Custom eCess Amount] }
    { 16517;  ;Custom SHECess Amount;Decimal      ;CaptionML=[ENU=Custom SHECess Amount;
                                                              ENN=Custom SHECess Amount] }
    { 16518;  ;Excise Effective Rate;Decimal      ;CaptionML=[ENU=Excise Effective Rate;
                                                              ENN=Excise Effective Rate] }
    { 16520;  ;Applies-to Entry (Ship);Integer    ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF "Applies-to Entry (Ship)" <> 0 THEN BEGIN
                                                                  ItemLedgEntry.GET("Applies-to Entry (Ship)");
                                                                  TESTFIELD(Quantity);
                                                                  IF NOT ItemLedgEntry.Open THEN
                                                                    MESSAGE(Text16508,"Applies-to Entry (Ship)");
                                                                  ItemLedgEntry.TESTFIELD(Positive,TRUE);
                                                                  ItemLedgEntry.TESTFIELD(Positive,TRUE);
                                                                  ItemLedgEntry.TESTFIELD("Location Code","Transfer-from Code");
                                                                  IF Quantity > ItemLedgEntry.Quantity THEN
                                                                    ERROR(Text16509);
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Applies-to Entry (Ship)"));
                                                            END;

                                                   CaptionML=[ENU=Applies-to Entry (Ship);
                                                              ENN=Applies-to Entry (Ship)] }
    { 16521;  ;GST Base Amount     ;Decimal       ;OnValidate=BEGIN
                                                                "GST %" := 0;
                                                                "Total GST Amount" := 0;
                                                              END;

                                                   CaptionML=[ENU=GST Base Amount;
                                                              ENN=GST Base Amount];
                                                   Editable=No }
    { 16522;  ;GST %               ;Decimal       ;CaptionML=[ENU=GST %;
                                                              ENN=GST %];
                                                   Editable=No }
    { 16523;  ;Total GST Amount    ;Decimal       ;CaptionML=[ENU=Total GST Amount;
                                                              ENN=Total GST Amount];
                                                   Editable=No }
    { 16524;  ;GST Group Code      ;Code20        ;TableRelation="GST Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TestStatusShip;
                                                                "HSN/SAC Code" := '';
                                                              END;

                                                   CaptionML=[ENU=GST Group Code;
                                                              ENN=GST Group Code] }
    { 16525;  ;HSN/SAC Code        ;Code8         ;TableRelation=HSN/SAC.Code WHERE (GST Group Code=FIELD(GST Group Code));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TestStatusShip;
                                                              END;

                                                   CaptionML=[ENU=HSN/SAC Code;
                                                              ENN=HSN/SAC Code] }
    { 16526;  ;GST Credit          ;Option        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TestStatusShip;
                                                              END;

                                                   CaptionML=[ENU=GST Credit;
                                                              ENN=GST Credit];
                                                   OptionCaptionML=[ENU=Availment,Non-Availment;
                                                                    ENN=Availment,Non-Availment];
                                                   OptionString=Availment,Non-Availment }
    { 16527;  ;Exempted            ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Quantity Received",0);
                                                              END;

                                                   CaptionML=[ENU=Exempted;
                                                              ENN=Exempted] }
    { 99000755;;Planning Flexibility;Option       ;OnValidate=BEGIN
                                                                IF "Planning Flexibility" <> xRec."Planning Flexibility" THEN
                                                                  ReserveTransferLine.UpdatePlanningFlexibility(Rec);
                                                              END;

                                                   CaptionML=[ENU=Planning Flexibility;
                                                              ENN=Planning Flexibility];
                                                   OptionCaptionML=[ENU=Unlimited,None;
                                                                    ENN=Unlimited,None];
                                                   OptionString=Unlimited,None }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
    {    ;Transfer-to Code,Status,Derived From Line No.,Item No.,Variant Code,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Receipt Date,In-Transit Code;
                                                   SumIndexFields=Qty. in Transit (Base),Outstanding Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Transfer-from Code,Status,Derived From Line No.,Item No.,Variant Code,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Shipment Date,In-Transit Code;
                                                   SumIndexFields=Outstanding Qty. (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Item No.,Variant Code                    }
    {    ;Document No.,Item No.,Line No.          ;SumIndexFields=Quantity }
    {    ;Document No.,Item No.,Quantity           }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=You cannot rename a %1.;ENN=You cannot rename a %1.';
      Text002@1002 : TextConst 'ENU=must not be less than %1;ENN=must not be less than %1';
      Text003@1003 : TextConst 'ENU="Warehouse %1 is required for %2 = %3.";ENN="Warehouse %1 is required for %2 = %3."';
      Text004@1004 : TextConst 'ENU=\The entered information may be disregarded by warehouse operations.;ENN=\The entered information may be disregarded by warehouse operations.';
      Text005@1005 : TextConst 'ENU=You cannot ship more than %1 units.;ENN=You cannot ship more than %1 units.';
      Text006@1006 : TextConst 'ENU=All items have been shipped.;ENN=All items have been shipped.';
      Text008@1008 : TextConst 'ENU=You cannot receive more than %1 units.;ENN=You cannot receive more than %1 units.';
      Text009@1009 : TextConst 'ENU=No items are currently in transit.;ENN=No items are currently in transit.';
      Text011@1011 : TextConst 'ENU=Outbound,Inbound;ENN=Outbound,Inbound';
      Text012@1020 : TextConst 'ENU=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?;ENN=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?';
      Text013@1017 : TextConst 'ENU=Cancelled.;ENN=Cancelled.';
      TransferRoute@1012 : Record 5742;
      Item@1013 : Record 27;
      TransHeader@1014 : Record 5740;
      Location@1016 : Record 14;
      Bin@1000 : Record 7354;
      TransferHeader1@1500039 : Record 5740;
      Reservation@1018 : Page 498;
      DimMgt@1019 : Codeunit 408;
      WhseValidateSourceLine@1022 : Codeunit 5777;
      ReserveTransferLine@1024 : Codeunit 99000836;
      CheckDateConflict@1025 : Codeunit 99000815;
      WMSManagement@1015 : Codeunit 7302;
      GSTManagement@1500037 : Codeunit 16401;
      TrackingBlocked@1007 : Boolean;
      Text13700@1500009 : TextConst 'ENU=BED AMOUNT;ENN=BED AMOUNT';
      Text13701@1500008 : TextConst 'ENU=AED AMOUNT;ENN=AED AMOUNT';
      Text13702@1500007 : TextConst 'ENU=SED AMOUNT;ENN=SED AMOUNT';
      Text13703@1500006 : TextConst 'ENU=SAED AMOUNT;ENN=SAED AMOUNT';
      Text13704@1500005 : TextConst 'ENU=CESS AMOUNT;ENN=CESS AMOUNT';
      Text13705@1500004 : TextConst 'ENU=NCCD AMOUNT;ENN=NCCD AMOUNT';
      Text13706@1500003 : TextConst 'ENU=ECESS AMOUNT;ENN=ECESS AMOUNT';
      Text13707@1500002 : TextConst 'ENU=ADET AMOUNT;ENN=ADET AMOUNT';
      Text13708@1500001 : TextConst 'ENU=LINE AMOUNT;ENN=LINE AMOUNT';
      Text13709@1500000 : TextConst 'ENU=ADE AMOUNT;ENN=ADE AMOUNT';
      Text16500@1500015 : TextConst 'ENU=ADC VAT AMOUNT;ENN=ADC VAT AMOUNT';
      Text16501@1500011 : TextConst 'ENU=BCD AMOUNT;ENN=BCD AMOUNT';
      Text16502@1500012 : TextConst 'ENU=CIF AMOUNT;ENN=CIF AMOUNT';
      Text13710@1500010 : TextConst 'ENU=SHE CESS AMOUNT;ENN=SHE CESS AMOUNT';
      BEDAmt@1500024 : Decimal;
      "AED(GSI)Amt"@1500023 : Decimal;
      "AED(TTA)Amt"@1500022 : Decimal;
      SEDAmt@1500021 : Decimal;
      SAEDAmt@1500020 : Decimal;
      CESSAmt@1500019 : Decimal;
      NCCDAmt@1500018 : Decimal;
      eCessAmt@1500017 : Decimal;
      ADETAmt@1500016 : Decimal;
      ADEAmt@1500014 : Decimal;
      SHECessAmt@1500013 : Decimal;
      ADCVATAmt@1500025 : Decimal;
      Text13711@1500034 : TextConst 'ENU=ASSESSABLE VALUE;ENN=ASSESSABLE VALUE';
      Text16503@1500026 : TextConst 'ENU=The maximum available quantity for Item %1 in RG 23 D Register is %2. Please reduce the %3.;ENN=The maximum available quantity for Item %1 in RG 23 D Register is %2. Please reduce the %3.';
      Text16504@1500027 : TextConst 'ENU="From Location Code = %1 must not be Trading for MRP transaction.";ENN="From Location Code = %1 must not be Trading for MRP transaction."';
      Text16505@1500028 : TextConst 'ENU=CVD must be No for MRP transaction.;ENN=CVD must be No for MRP transaction.';
      Text16506@1500030 : TextConst 'ENU=CUST. ECESS AMOUNT;ENN=CUST. ECESS AMOUNT';
      Text16507@1500029 : TextConst 'ENU=CUST. SHECESS AMOUNT;ENN=CUST. SHECESS AMOUNT';
      AssessableValueCalc@1500031 : Boolean;
      Text16508@1500032 : TextConst 'ENU=When Posting the entry %1 will be opened first;ENN=When Posting the entry %1 will be opened first';
      Text16509@1500033 : TextConst 'ENU=Quantity must not be greater than Applies-to Entry Quantity.;ENN=Quantity must not be greater than Applies-to Entry Quantity.';
      MustUseTrackingErr@1023 : TextConst '@@@="%1 = Form Name, %2 = Value to Enter";ENU=You must use form %1 to enter %2, if item tracking is used.;ENN=You must use form %1 to enter %2, if item tracking is used.';
      LedgEntryWillBeOpenedMsg@1021 : TextConst '@@@="%1 = Entry No.";ENU=When posting the Applied to Ledger Entry %1 will be opened first.;ENN=When posting the Applied to Ledger Entry %1 will be opened first.';
      ShippingMoreUnitsThanReceivedErr@1010 : TextConst '@@@="%1 = Quantity Value, %2 = Document No.";ENU=You cannot ship more than the %1 units that you have received for document no. %2.;ENN=You cannot ship more than the %1 units that you have received for document no. %2.';
      GSTApplicable@1500038 : Boolean;
      DocTransactionType@1500040 : 'Purchase,Sales,Transfer';

    LOCAL PROCEDURE InitOutstandingQty@16();
    BEGIN
      "Outstanding Quantity" := Quantity - "Quantity Shipped";
      "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Shipped (Base)";
      "Completely Shipped" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
    END;

    LOCAL PROCEDURE InitQtyToShip@15();
    BEGIN
      "Qty. to Ship" := "Outstanding Quantity";
      "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
    END;

    LOCAL PROCEDURE InitQtyToReceive@2();
    BEGIN
      "Qty. to Receive" := "Qty. in Transit";
      "Qty. to Receive (Base)" := "Qty. in Transit (Base)";
    END;

    LOCAL PROCEDURE InitQtyInTransit@4();
    BEGIN
      "Qty. in Transit" := "Quantity Shipped" - "Quantity Received";
      "Qty. in Transit (Base)" := "Qty. Shipped (Base)" - "Qty. Received (Base)";
      "Completely Received" := (Quantity <> 0) AND (Quantity = "Quantity Received");
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE GetTransHeader@1();
    BEGIN
      TESTFIELD("Document No.");
      IF "Document No." <> TransHeader."No." THEN
        TransHeader.GET("Document No.");

      TransHeader.TESTFIELD("Shipment Date");
      TransHeader.TESTFIELD("Receipt Date");
      TransHeader.TESTFIELD("Transfer-from Code");
      TransHeader.TESTFIELD("Transfer-to Code");
      TransHeader.TESTFIELD("In-Transit Code");
      "In-Transit Code" := TransHeader."In-Transit Code";
      "Transfer-from Code" := TransHeader."Transfer-from Code";
      "Transfer-to Code" := TransHeader."Transfer-to Code";
      "Shipment Date" := TransHeader."Shipment Date";
      "Receipt Date" := TransHeader."Receipt Date";
      "Shipping Agent Code" := TransHeader."Shipping Agent Code";
      "Shipping Agent Service Code" := TransHeader."Shipping Agent Service Code";
      "Shipping Time" := TransHeader."Shipping Time";
      "Outbound Whse. Handling Time" := TransHeader."Outbound Whse. Handling Time";
      "Inbound Whse. Handling Time" := TransHeader."Inbound Whse. Handling Time";
      "Excise Bus. Posting Group" := TransHeader."Excise Bus. Posting Group";
      Status := TransHeader.Status;
    END;

    LOCAL PROCEDURE GetItem@9();
    BEGIN
      TESTFIELD("Item No.");
      IF "Item No." <> Item."No." THEN
        Item.GET("Item No.");
    END;

    PROCEDURE BlockDynamicTracking@23(SetBlock@1000 : Boolean);
    BEGIN
      TrackingBlocked := SetBlock;
      ReserveTransferLine.Block(SetBlock);
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Document No.","Line No."));
      VerifyItemLineDim;
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      SourceCodeSetup@1002 : Record 242;
      TableID@1003 : ARRAY [10] OF Integer;
      No@1004 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup.Transfer,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",TransHeader."Dimension Set ID",DATABASE::Item);
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      VerifyItemLineDim;
    END;

    PROCEDURE LookupShortcutDimCode@28(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    LOCAL PROCEDURE CheckItemAvailable@3(CalledByFieldNo@1000 : Integer);
    VAR
      ItemCheckAvail@1001 : Codeunit 311;
    BEGIN
      IF (CurrFieldNo <> 0) AND
         (CurrFieldNo = CalledByFieldNo) AND
         ("Item No." <> '') AND
         ("Outstanding Quantity" > 0)
      THEN
        IF ItemCheckAvail.TransferLineCheck(Rec) THEN
          ItemCheckAvail.RaiseUpdateInterruptedError;
    END;

    PROCEDURE OpenItemTrackingLines@6500(Direction@1002 : 'Outbound,Inbound');
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Quantity (Base)");

      ReserveTransferLine.CallItemTracking(Rec,Direction);
    END;

    LOCAL PROCEDURE TestStatusOpen@37();
    BEGIN
      TESTFIELD("Document No.");
      IF TransHeader."No." <> "Document No." THEN
        TransHeader.GET("Document No.");
      TransHeader.TESTFIELD(Status,TransHeader.Status::Open);
    END;

    PROCEDURE ShowReservation@10();
    VAR
      OptionNumber@1000 : Integer;
    BEGIN
      TESTFIELD("Item No.");
      CLEAR(Reservation);
      OptionNumber := STRMENU(Text011);
      IF OptionNumber > 0 THEN BEGIN
        Reservation.SetTransLine(Rec,OptionNumber - 1);
        Reservation.RUNMODAL;
      END;
    END;

    PROCEDURE UpdateWithWarehouseShipReceive@41();
    BEGIN
      IF Location.RequireShipment("Transfer-from Code") THEN
        VALIDATE("Qty. to Ship",0)
      ELSE
        VALIDATE("Qty. to Ship","Outstanding Quantity");

      IF Location.RequireReceive("Transfer-to Code") THEN
        VALIDATE("Qty. to Receive",0)
      ELSE
        VALIDATE("Qty. to Receive","Qty. in Transit");
    END;

    LOCAL PROCEDURE CheckWarehouse@47(LocationCode@1003 : Code[10];Receive@1004 : Boolean);
    VAR
      ShowDialog@1001 : ' ,Message,Error';
      DialogText@1000 : Text[50];
    BEGIN
      GetLocation(LocationCode);
      IF Location."Directed Put-away and Pick" THEN BEGIN
        ShowDialog := ShowDialog::Error;
        IF Receive THEN
          DialogText := Location.GetRequirementText(Location.FIELDNO("Require Receive"))
        ELSE
          DialogText := Location.GetRequirementText(Location.FIELDNO("Require Shipment"));
      END ELSE BEGIN
        IF Receive AND (Location."Require Receive" OR Location."Require Put-away") THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Transfer Line",
               1,
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location."Require Receive" THEN
              ShowDialog := ShowDialog::Message;
          IF Location."Require Receive" THEN
            DialogText := Location.GetRequirementText(Location.FIELDNO("Require Receive"))
          ELSE
            DialogText := Location.GetRequirementText(Location.FIELDNO("Require Put-away"));
        END;

        IF NOT Receive AND (Location."Require Shipment" OR Location."Require Pick") THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Transfer Line",
               0,
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location."Require Shipment" THEN
              ShowDialog := ShowDialog::Message;
          IF Location."Require Shipment" THEN
            DialogText := Location.GetRequirementText(Location.FIELDNO("Require Shipment"))
          ELSE
            DialogText := Location.GetRequirementText(Location.FIELDNO("Require Pick"));
        END;
      END;

      CASE ShowDialog OF
        ShowDialog::Message:
          MESSAGE(Text003 + Text004,DialogText,FIELDCAPTION("Line No."),"Line No.");
        ShowDialog::Error:
          ERROR(Text003,DialogText,FIELDCAPTION("Line No."),"Line No.");
      END;
    END;

    LOCAL PROCEDURE GetLocation@44(LocationCode@1000 : Code[10]);
    BEGIN
      IF Location.Code <> LocationCode THEN
        Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@36(LocationCode@1000 : Code[10];BinCode@1001 : Code[20]);
    BEGIN
      IF BinCode = '' THEN
        CLEAR(Bin)
      ELSE
        IF Bin.Code <> BinCode THEN
          Bin.GET(LocationCode,BinCode);
    END;

    LOCAL PROCEDURE GetDefaultBin@5(FromLocationCode@1000 : Code[10];ToLocationCode@1001 : Code[10]);
    BEGIN
      IF (FromLocationCode <> '') AND ("Item No." <> '') THEN BEGIN
        GetLocation(FromLocationCode);
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN BEGIN
          WMSManagement.GetDefaultBin("Item No.","Variant Code",FromLocationCode,"Transfer-from Bin Code");
          HandleDedicatedBin(FALSE);
        END;
      END;

      IF (ToLocationCode <> '') AND ("Item No." <> '') THEN BEGIN
        GetLocation(ToLocationCode);
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN
          WMSManagement.GetDefaultBin("Item No.","Variant Code",ToLocationCode,"Transfer-To Bin Code");
      END;
    END;

    PROCEDURE IsInbound@8() : Boolean;
    BEGIN
      EXIT("Quantity (Base)" < 0);
    END;

    LOCAL PROCEDURE HandleDedicatedBin@7(IssueWarning@1000 : Boolean);
    VAR
      WhseIntegrationMgt@1001 : Codeunit 7317;
    BEGIN
      IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
        WhseIntegrationMgt.CheckIfBinDedicatedOnSrcDoc("Transfer-from Code","Transfer-from Bin Code",IssueWarning);
    END;

    PROCEDURE FilterLinesWithItemToPlan@70(VAR Item@1000 : Record 27;IsReceipt@1001 : Boolean;IsSupplyForPlanning@1002 : Boolean);
    BEGIN
      RESET;
      SETCURRENTKEY("Item No.");
      SETRANGE("Item No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      IF NOT IsSupplyForPlanning THEN
        SETRANGE("Derived From Line No.",0);
      IF IsReceipt THEN BEGIN
        SETFILTER("Transfer-to Code",Item.GETFILTER("Location Filter"));
        SETFILTER("Receipt Date",Item.GETFILTER("Date Filter"))
      END ELSE BEGIN
        SETFILTER("Transfer-from Code",Item.GETFILTER("Location Filter"));
        SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
        SETFILTER("Outstanding Qty. (Base)",'<>0');
      END;
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
    END;

    PROCEDURE FindLinesWithItemToPlan@68(VAR Item@1000 : Record 27;IsReceipt@1001 : Boolean;IsSupplyForPlanning@1002 : Boolean) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,IsReceipt,IsSupplyForPlanning);
      EXIT(FIND('-'));
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27;IsReceipt@1001 : Boolean) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,IsReceipt,FALSE);
      EXIT(NOT ISEMPTY);
    END;

    LOCAL PROCEDURE VerifyItemLineDim@87();
    BEGIN
      IF IsShippedDimChanged THEN
        ConfirmShippedDimChange;
    END;

    PROCEDURE UpdateExciseAmount@1280014();
    VAR
      ExciseProdPostingGrp@1280001 : Record 13710;
      ExcisePostingSetup@1280002 : Record 13711;
      ItemUOM@1280000 : Record 5404;
      Location2@1500000 : Record 14;
    BEGIN
      IF "Amount Added to Excise Base" = 0 THEN BEGIN
        InitExciseAmount;
        EXIT;
      END;
      GetTransHeader;

      IF TransHeader."Captive Consumption" THEN
        InitExciseAmount;

      IF ExciseProdPostingGrp.GET("Excise Prod. Posting Group") THEN BEGIN
        IF ExciseProdPostingGrp."Unit of Measure Code" <> '' THEN BEGIN
          IF ItemUOM.GET("Item No.",ExciseProdPostingGrp."Unit of Measure Code") THEN
            "Excise Base Quantity" := ROUND("Quantity (Base)" / ItemUOM."Qty. per Unit of Measure")
          ELSE
            "Excise Base Quantity" := 0;
        END ELSE
          "Excise Base Quantity" := "Quantity (Base)";
      END;
      ExcisePostingSetup.RESET;
      ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
      ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
      ExcisePostingSetup.SETRANGE("From Date",0D,TransHeader."Posting Date");
      ExcisePostingSetup.SETRANGE(SSI,FALSE);
      IF ExcisePostingSetup.FINDLAST THEN BEGIN
        CASE ExcisePostingSetup."BED Calculation Type" OF
          ExcisePostingSetup."BED Calculation Type"::"Excise %":
            BEGIN
              IF Quantity = 0 THEN
                "BED Amount" := 0
              ELSE
                IF ExcisePostingSetup."BED Calculation Formula" <> '' THEN
                  "BED Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."BED Calculation Formula",Rec) *
                    ExcisePostingSetup."BED %" / 100
                ELSE
                  "BED Amount" := ExcisePostingSetup."BED %" * "Excise Base Amount" / 100;
            END;
          ExcisePostingSetup."BED Calculation Type"::"Amount/Unit":
            BEGIN
              TESTFIELD("Excise Base Quantity");
              "BED Amount" := ExcisePostingSetup."BED Amount Per Unit" * "Excise Base Quantity";
            END;
          ExcisePostingSetup."BED Calculation Type"::"% of Accessable Value":
            BEGIN
              Item.GET("Item No.");
              "BED Amount" := ExcisePostingSetup."BED %" * "Assessable Value" * Quantity / 100;
            END;
          ExcisePostingSetup."BED Calculation Type"::"Excise %+Amount/Unit":
            BEGIN
              IF Quantity = 0 THEN
                "BED Amount" := 0
              ELSE BEGIN
                TESTFIELD("Excise Base Quantity");
                "BED Amount" :=
                  (ExcisePostingSetup."BED %" * "Excise Base Amount" / 100) +
                  (ExcisePostingSetup."BED Amount Per Unit" * "Excise Base Quantity");
              END;
            END;
          ExcisePostingSetup."BED Calculation Type"::"% of MRP":
            BEGIN
              IF Quantity = 0 THEN
                "BED Amount" := 0
              ELSE
                IF MRP THEN
                  "BED Amount" := (ExcisePostingSetup."BED %" * "MRP Price" * (1 - "Abatement %" / 100) * "Quantity (Base)" / 100)
                ELSE
                  "BED Amount" := 0;
            END;
        END;
        CASE ExcisePostingSetup."SED Calculation Type" OF
          ExcisePostingSetup."SED Calculation Type"::"Excise %":
            BEGIN
              IF Quantity = 0 THEN
                "SED Amount" := 0
              ELSE
                IF ExcisePostingSetup."SED Calculation Formula" <> '' THEN
                  "SED Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."SED Calculation Formula",Rec) *
                    ExcisePostingSetup."SED %" / 100
                ELSE
                  IF ExcisePostingSetup."SED Calculation Formula" = '' THEN
                    "SED Amount" := ExcisePostingSetup."SED %" * "Excise Base Amount" / 100;
            END;
          ExcisePostingSetup."SED Calculation Type"::"Amount/Unit":
            BEGIN
              TESTFIELD("Excise Base Quantity");
              "SED Amount" := ExcisePostingSetup."SED Amount Per Unit" * "Excise Base Quantity";
            END;
          ExcisePostingSetup."SED Calculation Type"::"% of Accessable Value":
            BEGIN
              Item.GET("Item No.");
              "SED Amount" := ExcisePostingSetup."SED %" * "Assessable Value" * Quantity / 100;
            END;
          ExcisePostingSetup."SED Calculation Type"::"Excise %+Amount/Unit":
            BEGIN
              IF Quantity = 0 THEN
                "SED Amount" := 0
              ELSE BEGIN
                TESTFIELD("Excise Base Quantity");
                "SED Amount" :=
                  (ExcisePostingSetup."SED %" * "Excise Base Amount" / 100) +
                  (ExcisePostingSetup."SED Amount Per Unit" * "Excise Base Quantity");
              END;
            END;
          ExcisePostingSetup."SED Calculation Type"::"% of MRP":
            BEGIN
              IF Quantity = 0 THEN
                "SED Amount" := 0
              ELSE
                IF MRP THEN
                  "SED Amount" := (ExcisePostingSetup."SED %" * "MRP Price" * (1 - "Abatement %" / 100) * "Quantity (Base)" / 100)
                ELSE
                  "SED Amount" := 0;
            END;
        END;
        CASE ExcisePostingSetup."AED(GSI) Calculation Type" OF
          ExcisePostingSetup."AED(GSI) Calculation Type"::"Excise %":
            BEGIN
              IF Quantity = 0 THEN
                "AED(GSI) Amount" := 0
              ELSE
                IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" <> '' THEN
                  "AED(GSI) Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."AED(GSI/TTA) Calc. Formula",Rec) *
                    ExcisePostingSetup."AED(GSI) %" / 100
                ELSE
                  IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" = '' THEN
                    "AED(GSI) Amount" := ExcisePostingSetup."AED(GSI) %" * "Excise Base Amount" / 100;
            END;
          ExcisePostingSetup."AED(GSI) Calculation Type"::"Amount/Unit":
            BEGIN
              TESTFIELD("Excise Base Quantity");
              "AED(GSI) Amount" := ExcisePostingSetup."AED(GSI) Amount Per Unit" * "Excise Base Quantity";
            END;
          ExcisePostingSetup."AED(GSI) Calculation Type"::"% of Accessable Value":
            BEGIN
              Item.GET("Item No.");
              "AED(GSI) Amount" := ExcisePostingSetup."AED(GSI) %" * "Assessable Value" * Quantity / 100;
            END;
          ExcisePostingSetup."AED(GSI) Calculation Type"::"Excise %+Amount/Unit":
            BEGIN
              IF Quantity = 0 THEN
                "AED(GSI) Amount" := 0
              ELSE BEGIN
                TESTFIELD("Excise Base Quantity");
                "AED(GSI) Amount" :=
                  (ExcisePostingSetup."AED(GSI) %" * "Excise Base Amount" / 100) +
                  (ExcisePostingSetup."AED(GSI) Amount Per Unit" * "Excise Base Quantity");
              END;
            END;
          ExcisePostingSetup."AED(GSI) Calculation Type"::"% of MRP":
            BEGIN
              IF Quantity = 0 THEN
                "AED(GSI) Amount" := 0
              ELSE
                IF MRP THEN
                  "AED(GSI) Amount" :=
                    (ExcisePostingSetup."AED(GSI) %" * "MRP Price" * (1 - "Abatement %" / 100) * "Quantity (Base)" / 100)
                ELSE
                  "AED(GSI) Amount" := 0;
            END;
        END;
        CASE ExcisePostingSetup."NCCD Calculation Type" OF
          ExcisePostingSetup."NCCD Calculation Type"::"Excise %":
            BEGIN
              IF Quantity = 0 THEN
                "NCCD Amount" := 0
              ELSE
                IF ExcisePostingSetup."NCCD Calculation Formula" <> '' THEN
                  "NCCD Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."NCCD Calculation Formula",Rec) *
                    ExcisePostingSetup."NCCD %" / 100
                ELSE
                  IF ExcisePostingSetup."NCCD Calculation Formula" = '' THEN
                    "NCCD Amount" := ExcisePostingSetup."NCCD %" * "Excise Base Amount" / 100;
            END;
          ExcisePostingSetup."NCCD Calculation Type"::"Amount/Unit":
            BEGIN
              TESTFIELD("Excise Base Quantity");
              "NCCD Amount" := ExcisePostingSetup."NCCD Amount Per Unit" * "Excise Base Quantity";
            END;
          ExcisePostingSetup."NCCD Calculation Type"::"% of Accessable Value":
            BEGIN
              Item.GET("Item No.");
              "NCCD Amount" := ExcisePostingSetup."NCCD %" * "Assessable Value" * Quantity / 100;
            END;
          ExcisePostingSetup."NCCD Calculation Type"::"Excise %+Amount/Unit":
            BEGIN
              IF Quantity = 0 THEN
                "NCCD Amount" := 0
              ELSE BEGIN
                TESTFIELD("Excise Base Quantity");
                "NCCD Amount" :=
                  (ExcisePostingSetup."NCCD %" * "Excise Base Amount" / 100) +
                  (ExcisePostingSetup."NCCD Amount Per Unit" * "Excise Base Quantity");
              END;
            END;
          ExcisePostingSetup."NCCD Calculation Type"::"% of MRP":
            BEGIN
              IF Quantity = 0 THEN
                "NCCD Amount" := 0
              ELSE
                IF MRP THEN
                  "NCCD Amount" := (ExcisePostingSetup."NCCD %" * "MRP Price" * (1 - "Abatement %" / 100) * "Quantity (Base)" / 100)
                ELSE
                  "NCCD Amount" := 0;
            END;
        END;
        CASE ExcisePostingSetup."AED(TTA) Calculation Type" OF
          ExcisePostingSetup."AED(TTA) Calculation Type"::"Excise %":
            BEGIN
              IF Quantity = 0 THEN
                "AED(TTA) Amount" := 0
              ELSE
                IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" <> '' THEN
                  "AED(TTA) Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."AED(GSI/TTA) Calc. Formula",Rec) *
                    ExcisePostingSetup."AED(TTA) %" / 100
                ELSE
                  IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" = '' THEN
                    "AED(TTA) Amount" := ExcisePostingSetup."AED(TTA) %" * "Excise Base Amount" / 100;
            END;
          ExcisePostingSetup."AED(TTA) Calculation Type"::"Amount/Unit":
            BEGIN
              TESTFIELD("Excise Base Quantity");
              "AED(TTA) Amount" := ExcisePostingSetup."AED(TTA) Amount Per Unit" * "Excise Base Quantity";
            END;
          ExcisePostingSetup."AED(TTA) Calculation Type"::"% of Accessable Value":
            BEGIN
              Item.GET("Item No.");
              "AED(TTA) Amount" := ExcisePostingSetup."AED(TTA) %" * "Assessable Value" * Quantity / 100;
            END;
          ExcisePostingSetup."AED(TTA) Calculation Type"::"Excise %+Amount/Unit":
            BEGIN
              IF Quantity = 0 THEN
                "AED(TTA) Amount" := 0
              ELSE BEGIN
                TESTFIELD("Excise Base Quantity");
                "AED(TTA) Amount" :=
                  (ExcisePostingSetup."AED(TTA) %" * "Excise Base Amount" / 100) +
                  (ExcisePostingSetup."AED(TTA) Amount Per Unit" * "Excise Base Quantity");
              END;
            END;
          ExcisePostingSetup."AED(TTA) Calculation Type"::"% of MRP":
            BEGIN
              IF Quantity = 0 THEN
                "AED(TTA) Amount" := 0
              ELSE
                IF MRP THEN
                  "AED(TTA) Amount" :=
                    (ExcisePostingSetup."AED(TTA) %" * "MRP Price" * (1 - "Abatement %" / 100) * "Quantity (Base)" / 100)
                ELSE
                  "AED(TTA) Amount" := 0;
            END;
        END;
        CASE ExcisePostingSetup."SAED Calculation Type" OF
          ExcisePostingSetup."SAED Calculation Type"::"Excise %":
            BEGIN
              IF Quantity = 0 THEN
                "SAED Amount" := 0
              ELSE
                IF ExcisePostingSetup."SAED Calculation Formula" <> '' THEN
                  "SAED Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."SAED Calculation Formula",Rec) *
                    ExcisePostingSetup."SAED %" / 100
                ELSE
                  IF ExcisePostingSetup."SAED Calculation Formula" = '' THEN
                    "SAED Amount" := ExcisePostingSetup."SAED %" * "Excise Base Amount" / 100;
            END;
          ExcisePostingSetup."SAED Calculation Type"::"Amount/Unit":
            BEGIN
              TESTFIELD("Excise Base Quantity");
              "SAED Amount" := ExcisePostingSetup."SAED Amount Per Unit" * "Excise Base Quantity";
            END;
          ExcisePostingSetup."SAED Calculation Type"::"% of Accessable Value":
            BEGIN
              Item.GET("Item No.");
              "SAED Amount" := ExcisePostingSetup."SAED %" * "Assessable Value" * Quantity / 100;
            END;
          ExcisePostingSetup."SAED Calculation Type"::"Excise %+Amount/Unit":
            BEGIN
              IF Quantity = 0 THEN
                "SAED Amount" := 0
              ELSE BEGIN
                TESTFIELD("Excise Base Quantity");
                "SAED Amount" :=
                  (ExcisePostingSetup."SAED %" * "Excise Base Amount" / 100) +
                  (ExcisePostingSetup."SAED Amount Per Unit" * "Excise Base Quantity");
              END;
            END;
          ExcisePostingSetup."SAED Calculation Type"::"% of MRP":
            BEGIN
              IF Quantity = 0 THEN
                "SAED Amount" := 0
              ELSE
                IF MRP THEN
                  "SAED Amount" := (ExcisePostingSetup."SAED %" * "MRP Price" * (1 - "Abatement %" / 100) * "Quantity (Base)" / 100)
                ELSE
                  "SAED Amount" := 0;
            END;
        END;
        CASE ExcisePostingSetup."ADE Calculation Type" OF
          ExcisePostingSetup."ADE Calculation Type"::"Excise %":
            BEGIN
              IF Quantity = 0 THEN
                "ADE Amount" := 0
              ELSE
                IF ExcisePostingSetup."ADE Calculation Formula" <> '' THEN
                  "ADE Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."ADE Calculation Formula",Rec) *
                    ExcisePostingSetup."ADE %" / 100
                ELSE
                  IF ExcisePostingSetup."ADE Calculation Formula" = '' THEN
                    "ADE Amount" := ExcisePostingSetup."ADE %" * "Excise Base Amount" / 100;
            END;
          ExcisePostingSetup."ADE Calculation Type"::"Amount/Unit":
            BEGIN
              TESTFIELD("Excise Base Quantity");
              "ADE Amount" := ExcisePostingSetup."ADE Amount Per Unit" * "Excise Base Quantity";
            END;
          ExcisePostingSetup."ADE Calculation Type"::"% of Accessable Value":
            BEGIN
              Item.GET("Item No.");
              "ADE Amount" := ExcisePostingSetup."ADE %" * "Assessable Value" * Quantity / 100;
            END;
          ExcisePostingSetup."ADE Calculation Type"::"Excise %+Amount/Unit":
            BEGIN
              IF Quantity = 0 THEN
                "ADE Amount" := 0
              ELSE BEGIN
                TESTFIELD("Excise Base Quantity");
                "ADE Amount" :=
                  (ExcisePostingSetup."ADE %" * "Excise Base Amount" / 100) +
                  (ExcisePostingSetup."ADE Amount Per Unit" * "Excise Base Quantity");
              END;
            END;
          ExcisePostingSetup."ADE Calculation Type"::"% of MRP":
            BEGIN
              IF Quantity = 0 THEN
                "ADE Amount" := 0
              ELSE
                IF MRP THEN
                  "ADE Amount" := (ExcisePostingSetup."ADE %" * "MRP Price" * (1 - "Abatement %" / 100) * "Quantity (Base)" / 100)
                ELSE
                  "ADE Amount" := 0;
            END;
        END;
        CASE ExcisePostingSetup."ADET Calculation Type" OF
          ExcisePostingSetup."ADET Calculation Type"::"Excise %":
            BEGIN
              IF Quantity = 0 THEN
                "ADET Amount" := 0
              ELSE
                IF ExcisePostingSetup."ADET Calculation Formula" <> '' THEN
                  "ADET Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."ADET Calculation Formula",Rec) *
                    ExcisePostingSetup."ADET %" / 100
                ELSE
                  IF ExcisePostingSetup."ADET Calculation Formula" = '' THEN
                    "ADET Amount" := ExcisePostingSetup."ADET %" * "Excise Base Amount" / 100;
            END;
          ExcisePostingSetup."ADET Calculation Type"::"Amount/Unit":
            BEGIN
              TESTFIELD("Excise Base Quantity");
              "ADET Amount" := ExcisePostingSetup."ADET Amount Per Unit" * "Excise Base Quantity";
            END;
          ExcisePostingSetup."ADET Calculation Type"::"% of Accessable Value":
            BEGIN
              Item.GET("Item No.");
              "ADET Amount" := ExcisePostingSetup."ADET %" * "Assessable Value" * Quantity / 100;
            END;
          ExcisePostingSetup."ADET Calculation Type"::"Excise %+Amount/Unit":
            BEGIN
              IF Quantity = 0 THEN
                "ADET Amount" := 0
              ELSE BEGIN
                TESTFIELD("Excise Base Quantity");
                "ADET Amount" :=
                  (ExcisePostingSetup."ADET %" * "Excise Base Amount" / 100) +
                  (ExcisePostingSetup."ADET Amount Per Unit" * "Excise Base Quantity");
              END;
            END;
          ExcisePostingSetup."ADET Calculation Type"::"% of MRP":
            BEGIN
              IF Quantity = 0 THEN
                "ADET Amount" := 0
              ELSE
                IF MRP THEN
                  "ADET Amount" := (ExcisePostingSetup."ADET %" * "MRP Price" * (1 - "Abatement %" / 100) * "Quantity (Base)" / 100)
                ELSE
                  "ADET Amount" := 0;
            END;
        END;
        CASE ExcisePostingSetup."CESS Calculation Type" OF
          ExcisePostingSetup."CESS Calculation Type"::"Excise %":
            BEGIN
              IF Quantity = 0 THEN
                "CESS Amount" := 0
              ELSE
                IF ExcisePostingSetup."CESS Calculation Formula" <> '' THEN
                  "CESS Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."CESS Calculation Formula",Rec) *
                    ExcisePostingSetup."CESS %" / 100
                ELSE
                  IF ExcisePostingSetup."CESS Calculation Formula" = '' THEN
                    "CESS Amount" := ExcisePostingSetup."CESS %" * "Excise Base Amount" / 100;
            END;
          ExcisePostingSetup."CESS Calculation Type"::"Amount/Unit":
            BEGIN
              TESTFIELD("Excise Base Quantity");
              "CESS Amount" := ExcisePostingSetup."CESS Amount Per Unit" * "Excise Base Quantity";
            END;
          ExcisePostingSetup."CESS Calculation Type"::"% of Accessable Value":
            BEGIN
              Item.GET("Item No.");
              "CESS Amount" := ExcisePostingSetup."CESS %" * "Assessable Value" * Quantity / 100;
            END;
          ExcisePostingSetup."CESS Calculation Type"::"Excise %+Amount/Unit":
            BEGIN
              IF Quantity = 0 THEN
                "CESS Amount" := 0
              ELSE BEGIN
                TESTFIELD("Excise Base Quantity");
                "CESS Amount" :=
                  (ExcisePostingSetup."CESS %" * "Excise Base Amount" / 100) +
                  (ExcisePostingSetup."CESS Amount Per Unit" * "Excise Base Quantity");
              END;
            END;
          ExcisePostingSetup."CESS Calculation Type"::"% of MRP":
            BEGIN
              IF Quantity = 0 THEN
                "CESS Amount" := 0
              ELSE
                IF MRP THEN
                  "CESS Amount" := (ExcisePostingSetup."CESS %" * "MRP Price" * (1 - "Abatement %" / 100) * "Quantity (Base)" / 100)
                ELSE
                  "CESS Amount" := 0;
            END;
        END;
        CASE ExcisePostingSetup."eCess Calculation Type" OF
          ExcisePostingSetup."eCess Calculation Type"::"Excise %":
            BEGIN
              IF Quantity = 0 THEN
                "eCess Amount" := 0
              ELSE
                IF ExcisePostingSetup."eCess Calculation Formula" <> '' THEN
                  "eCess Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."eCess Calculation Formula",Rec) *
                    ExcisePostingSetup."eCess %" / 100
                ELSE
                  IF ExcisePostingSetup."eCess Calculation Formula" = '' THEN
                    "eCess Amount" := ExcisePostingSetup."eCess %" * "Excise Base Amount" / 100;
            END;
          ExcisePostingSetup."eCess Calculation Type"::"Amount/Unit":
            BEGIN
              TESTFIELD("Excise Base Quantity");
              "eCess Amount" := ExcisePostingSetup."eCess Amount Per Unit" * "Excise Base Quantity";
            END;
          ExcisePostingSetup."eCess Calculation Type"::"% of Accessable Value":
            BEGIN
              Item.GET("Item No.");
              "eCess Amount" := ExcisePostingSetup."eCess %" * "Assessable Value" * Quantity / 100;
            END;
          ExcisePostingSetup."eCess Calculation Type"::"Excise %+Amount/Unit":
            BEGIN
              IF Quantity = 0 THEN
                "eCess Amount" := 0
              ELSE BEGIN
                TESTFIELD("Excise Base Quantity");
                "eCess Amount" :=
                  (ExcisePostingSetup."eCess %" * "Excise Base Amount" / 100) +
                  (ExcisePostingSetup."eCess Amount Per Unit" * "Excise Base Quantity");
              END;
            END;
          ExcisePostingSetup."eCess Calculation Type"::"% of MRP":
            BEGIN
              IF Quantity = 0 THEN
                "eCess Amount" := 0
              ELSE
                IF MRP THEN
                  "eCess Amount" := (ExcisePostingSetup."eCess %" * "MRP Price" * (1 - "Abatement %" / 100) * "Quantity (Base)" / 100)
                ELSE
                  "eCess Amount" := 0;
            END;
        END;
        CASE ExcisePostingSetup."SHE Cess Calculation Type" OF
          ExcisePostingSetup."SHE Cess Calculation Type"::"Excise %":
            BEGIN
              IF Quantity = 0 THEN
                "SHE Cess Amount" := 0
              ELSE
                IF ExcisePostingSetup."SHE Cess Calculation Formula" <> '' THEN
                  "SHE Cess Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."SHE Cess Calculation Formula",Rec) *
                    ExcisePostingSetup."SHE Cess %" / 100
                ELSE
                  IF ExcisePostingSetup."SHE Cess Calculation Formula" = '' THEN
                    "SHE Cess Amount" := ExcisePostingSetup."SHE Cess %" * "Excise Base Amount" / 100;
            END;
          ExcisePostingSetup."SHE Cess Calculation Type"::"Amount/Unit":
            BEGIN
              TESTFIELD("Excise Base Quantity");
              "SHE Cess Amount" := ExcisePostingSetup."SHE Cess Amount Per Unit" * "Excise Base Quantity";
            END;
          ExcisePostingSetup."SHE Cess Calculation Type"::"% of Accessable Value":
            BEGIN
              Item.GET("Item No.");
              "SHE Cess Amount" := ExcisePostingSetup."SHE Cess %" * "Assessable Value" * Quantity / 100;
            END;
          ExcisePostingSetup."SHE Cess Calculation Type"::"Excise %+Amount/Unit":
            BEGIN
              IF Quantity = 0 THEN
                "SHE Cess Amount" := 0
              ELSE BEGIN
                TESTFIELD("Excise Base Quantity");
                "SHE Cess Amount" :=
                  (ExcisePostingSetup."SHE Cess %" * "Excise Base Amount" / 100) +
                  (ExcisePostingSetup."SHE Cess Amount Per Unit" * "Excise Base Quantity");
              END;
            END;
          ExcisePostingSetup."SHE Cess Calculation Type"::"% of MRP":
            BEGIN
              IF Quantity = 0 THEN
                "SHE Cess Amount" := 0
              ELSE
                IF MRP THEN
                  "SHE Cess Amount" :=
                    (ExcisePostingSetup."SHE Cess %" * "MRP Price" * (1 - "Abatement %" / 100) * "Quantity (Base)" / 100)
                ELSE
                  "SHE Cess Amount" := 0;
            END;
        END;
        IF CVD THEN BEGIN
          CASE ExcisePostingSetup."Custom eCess Calculation Type" OF
            ExcisePostingSetup."Custom eCess Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "Custom eCess Amount" := 0
                ELSE
                  IF ExcisePostingSetup."Custom eCess Calc. Formula" <> '' THEN
                    "Custom eCess Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."Custom eCess Calc. Formula",Rec) *
                      ExcisePostingSetup."Custom eCess %" / 100
                  ELSE
                    IF ExcisePostingSetup."Custom eCess Calc. Formula" = '' THEN
                      "Custom eCess Amount" := ExcisePostingSetup."Custom eCess %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."Custom eCess Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "Custom eCess Amount" := ExcisePostingSetup."Custom eCess Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."Custom eCess Calculation Type"::"% of Accessable Value":
              "Custom eCess Amount" := ExcisePostingSetup."Custom eCess %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."Custom eCess Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "Custom eCess Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "Custom eCess Amount" := (ExcisePostingSetup."Custom eCess %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."Custom eCess Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
          END;

          CASE ExcisePostingSetup."Custom SHECess Calc. Type" OF
            ExcisePostingSetup."Custom SHECess Calc. Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "Custom SHECess Amount" := 0
                ELSE
                  IF ExcisePostingSetup."Custom SHECess Calc. Formula" <> '' THEN
                    "Custom SHECess Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."Custom SHECess Calc. Formula",Rec) *
                      ExcisePostingSetup."Custom SHECess %" / 100
                  ELSE
                    IF ExcisePostingSetup."Custom SHECess Calc. Formula" = '' THEN
                      "Custom SHECess Amount" := ExcisePostingSetup."Custom SHECess %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."Custom SHECess Calc. Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "Custom SHECess Amount" := ExcisePostingSetup."Custom SHECess Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."Custom SHECess Calc. Type"::"% of Accessable Value":
              "Custom SHECess Amount" := ExcisePostingSetup."Custom SHECess %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."Custom SHECess Calc. Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "Custom SHECess Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "Custom SHECess Amount" := (ExcisePostingSetup."Custom SHECess %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."Custom SHECess Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
          END;

          CASE ExcisePostingSetup."ADC VAT Calculation Type" OF
            ExcisePostingSetup."ADC VAT Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "ADC VAT Amount" := 0
                ELSE
                  IF ExcisePostingSetup."ADC VAT Calculation Formula" <> '' THEN
                    "ADC VAT Amount" := EvaluateExpression(TRUE,ExcisePostingSetup."ADC VAT Calculation Formula",Rec) *
                      ExcisePostingSetup."ADC VAT %" / 100
                  ELSE
                    IF ExcisePostingSetup."ADC VAT Calculation Formula" = '' THEN
                      "ADC VAT Amount" := ExcisePostingSetup."ADC VAT %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."ADC VAT Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "ADC VAT Amount" := ExcisePostingSetup."ADC VAT Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."ADC VAT Calculation Type"::"% of Accessable Value":
              "ADC VAT Amount" := ExcisePostingSetup."ADC VAT %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."ADC VAT Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "ADC VAT Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "ADC VAT Amount" := (ExcisePostingSetup."ADC VAT %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."ADC VAT Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."ADC VAT Calculation Type"::"% of MRP":
              BEGIN
                IF Quantity = 0 THEN
                  "ADC VAT Amount" := 0
                ELSE
                  IF MRP THEN
                    "ADC VAT Amount" :=
                      (ExcisePostingSetup."ADC VAT %" * "MRP Price" * (1 - "Abatement %" / 100) * "Quantity (Base)" / 100)
                  ELSE
                    "ADC VAT Amount" := 0;
              END;
          END;
        END ELSE
          "ADC VAT Amount" := 0;
      END ELSE
        InitExciseAmount;

      // Calculate Excise Effective %
      "Excise Amount" := "BED Amount" + "AED(GSI) Amount" + "AED(TTA) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" +
        "NCCD Amount" + "eCess Amount" + "ADET Amount" + "ADE Amount" + "SHE Cess Amount";

      ExcisePostingSetup.RESET;
      ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
      ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
      IF ExcisePostingSetup.FINDLAST THEN
        WITH ExcisePostingSetup DO BEGIN
          IF ("BED %" <> 0) AND ("BED Calculation Type" = "BED Calculation Type"::"% of Accessable Value") THEN BEGIN
            IF ("Assessable Value" <> 0) AND (Quantity <> 0) THEN
              "Excise Effective Rate" := "Excise Amount" / ("Assessable Value" * Quantity) * 100;
          END ELSE
            IF ("BED %" <> 0) AND (("BED Calculation Type" = "BED Calculation Type"::"% of MRP") OR
                                   ("BED Calculation Type" = "BED Calculation Type"::"Excise %"))
            THEN BEGIN
              IF "Excise Base Amount" <> 0 THEN
                "Excise Effective Rate" := "Excise Amount" / "Excise Base Amount" * 100;
            END;
        END;

      "Excise Amount" :=
        "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
        "eCess Amount" + "ADET Amount" + "AED(TTA) Amount" + "ADE Amount" + "ADC VAT Amount" + "SHE Cess Amount";
      "Amount Including Excise" := "Excise Base Amount" + "Excise Amount";

      IF Location2.GET("Transfer-from Code") THEN;
      IF Location2."Trading Location" THEN BEGIN
        "BED Amount" := BEDAmt;
        "AED(GSI) Amount" := "AED(GSI)Amt";
        "AED(TTA) Amount" := "AED(TTA)Amt";
        "SED Amount" := SEDAmt;
        "SAED Amount" := SAEDAmt;
        "CESS Amount" := CESSAmt;
        "NCCD Amount" := NCCDAmt;
        "eCess Amount" := eCessAmt;
        "SHE Cess Amount" := SHECessAmt;
        "ADET Amount" := ADETAmt;
        "ADE Amount" := ADEAmt;
        "ADC VAT Amount" := ADCVATAmt;
        "Excise Amount" := "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "NCCD Amount" +
          "eCess Amount" + "ADET Amount" + "AED(TTA) Amount" + "ADE Amount" + "ADC VAT Amount" + "SHE Cess Amount";
        "Amount Including Excise" := "Excise Base Amount" + "Excise Amount";
      END;
    END;

    PROCEDURE InitExciseAmount@1280025();
    BEGIN
      "Excise Amount" := 0;
      "BED Amount" := 0;
      "AED(GSI) Amount" := 0;
      "AED(TTA) Amount" := 0;
      "SED Amount" := 0;
      "SAED Amount" := 0;
      "CESS Amount" := 0;
      "NCCD Amount" := 0;
      "eCess Amount" := 0;
      "ADET Amount" := 0;
      "ADE Amount" := 0;
      "ADC VAT Amount" := 0;
      "SHE Cess Amount" := 0;
    END;

    PROCEDURE EvaluateExpression@1280006(IsTestExpression@1280016 : Boolean;Expression@1280000 : Code[250];TransferLine@1280001 : Record 5741) : Decimal;
    VAR
      Result@1280003 : Decimal;
      Calllevel@1280004 : Integer;
      Parantheses@1280005 : Integer;
      IsExpression@1280006 : Boolean;
      Operators@1280007 : Text[8];
      OperatorNo@1280008 : Integer;
      IsFilter@1280009 : Boolean;
      i@1280010 : Integer;
      RightResult@1280011 : Decimal;
      LeftResult@1280012 : Decimal;
      RightOperand@1280013 : Text[250];
      LeftOperand@1280014 : Text[250];
      Operator@1280015 : Char;
      PlanLine@1280017 : Record 5741;
      DivisionError@1280018 : Boolean;
    BEGIN
      Result := 0;
      Calllevel := Calllevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpression(IsTestExpression,LeftOperand,TransferLine);
          RightResult := EvaluateExpression(IsTestExpression,RightOperand,TransferLine);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpression(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),PlanLine)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF NOT IsFilter THEN BEGIN
              IF Expression = Text13700 THEN
                Result := Result + TransferLine."BED Amount"
              ELSE
                IF Expression = Text13701 THEN
                  Result := Result + TransferLine."AED(GSI) Amount" + TransferLine."AED(TTA) Amount"
                ELSE
                  IF Expression = Text13702 THEN
                    Result := Result + TransferLine."SED Amount"
                  ELSE
                    IF Expression = Text13703 THEN
                      Result := Result + TransferLine."SAED Amount"
                    ELSE
                      IF Expression = Text13704 THEN
                        Result := Result + TransferLine."CESS Amount"
                      ELSE
                        IF Expression = Text13705 THEN
                          Result := Result + TransferLine."NCCD Amount"
                        ELSE
                          IF Expression = Text13706 THEN
                            Result := Result + TransferLine."eCess Amount"
                          ELSE
                            IF Expression = Text13707 THEN
                              Result := Result + TransferLine."ADET Amount"
                            ELSE
                              IF Expression = Text13708 THEN
                                Result := Result + TransferLine.Amount
                              ELSE
                                IF Expression = Text13709 THEN
                                  Result := Result + TransferLine."ADE Amount"
                                ELSE
                                  IF Expression = Text13710 THEN
                                    Result := Result + TransferLine."SHE Cess Amount"
                                  ELSE
                                    IF Expression = Text16500 THEN
                                      Result := Result + TransferLine."ADC VAT Amount"
                                    ELSE
                                      IF Expression = Text16501 THEN
                                        Result := Result + TransferLine."BCD Amount" * TransferLine.Quantity
                                      ELSE
                                        IF Expression = Text16502 THEN
                                          Result := Result + TransferLine."CIF Amount" * TransferLine.Quantity
                                        ELSE
                                          IF Expression = Text16506 THEN
                                            Result := Result + TransferLine."Custom eCess Amount"
                                          ELSE
                                            IF Expression = Text16507 THEN
                                              Result := Result + TransferLine."Custom SHECess Amount"
                                            ELSE
                                              IF Expression = Text13711 THEN
                                                Result := Result + TransferLine."Assessable Value" * TransferLine.Quantity;
            END;
          END;
      END;
      Calllevel := Calllevel - 1;
      EXIT(ROUND(Result));
    END;

    PROCEDURE UpdateAmounts@1280002();
    BEGIN
      Amount := ROUND(Quantity * "Transfer Price");
      GetLocation("Transfer-from Code");
      UpdateExciseAmount;
      IF GSTManagement.IsGSTApplicable(TransHeader.Structure) THEN
        UpdateGSTAmounts("GST Base Amount",GSTApplicable);
    END;

    PROCEDURE ResetStructureAmounts@1280001(TransHeader@1280000 : Record 5740);
    VAR
      TransLines@1280001 : Record 5741;
    BEGIN
      WITH TransLines DO BEGIN
        RESET;
        SETRANGE("Document No.",TransHeader."No.");
        IF FIND('-') THEN
          REPEAT
            "Excise Base Amount" := 0;
            "Amount Added to Excise Base" := 0;
            "Amount Added to Inventory" := 0;
            "Charges to Transfer" := 0;
            "Total Amount to Transfer" := 0;
            "Excise Amount" := 0;
            "Amount Including Excise" := 0;
            "GST Base Amount" := 0;
            "Total GST Amount" := 0;
            GetCurrentTransHeader(TransHeader);
            UpdateAmounts;
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalculateStructures@1280004(TransHeader@1280000 : Record 5740);
    VAR
      TransLine@1280008 : Record 5741;
      StrOrderDetails@1280007 : Record 13794;
      StrOrderLineDetails@1280006 : Record 13795;
      StrOrderLines@1280005 : Record 13795;
      TotalAmount@1280004 : Decimal;
      TotalLines@1280003 : Decimal;
      BaseAmount@1280002 : Decimal;
      CFactor@1280001 : Decimal;
      Location2@1500000 : Record 14;
    BEGIN
      WITH TransHeader DO BEGIN
        StrOrderLines.LOCKTABLE;
        StrOrderLines.RESET;
        StrOrderLines.SETCURRENTKEY("Document Type","Document No.",Type);
        StrOrderLines.SETRANGE(Type,StrOrderLineDetails.Type::Transfer);
        StrOrderLines.SETRANGE("Document No.","No.");
        IF StrOrderLines.FINDFIRST THEN
          StrOrderLines.DELETEALL;
        GSTApplicable := GSTManagement.GSTApplicableOnTransfer(TransHeader);
        TransLine.SETRANGE("Document No.","No.");
        TransLine.SETRANGE("Derived From Line No.",0);
        IF TransLine.FIND('-') THEN
          REPEAT
            TotalAmount := TotalAmount + TransLine.Quantity * TransLine."Transfer Price";
          UNTIL TransLine.NEXT = 0;

        TransLine.RESET;
        TransLine.SETRANGE("Document No.","No.");
        TransLine.SETRANGE("Derived From Line No.",0);
        IF TransLine.FIND('-') THEN BEGIN
          TotalLines := TransLine.COUNT;
          REPEAT
            WITH TransLine DO BEGIN
              "Amount Added to Inventory" := 0;
              "Amount Added to Excise Base" := 0;
              AssessableValueCalc := CheckAssessableValue(TransHeader);
              StrOrderDetails.RESET;
              StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
              StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Transfer);
              StrOrderDetails.SETRANGE("Document No.","Document No.");
              IF StrOrderDetails.FIND('-') THEN
                REPEAT
                  StrOrderLineDetails.RESET;
                  StrOrderLineDetails.SETRANGE(Type,StrOrderLineDetails.Type::Transfer);
                  StrOrderLineDetails.SETRANGE("Calculation Order",StrOrderDetails."Calculation Order");
                  StrOrderLineDetails.SETRANGE("Document No.","Document No.");
                  StrOrderLineDetails.SETRANGE("Structure Code",TransHeader.Structure);
                  StrOrderLineDetails.SETRANGE("Item No.","Item No.");
                  StrOrderLineDetails.SETRANGE("Line No.","Line No.");
                  StrOrderLineDetails.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
                  StrOrderLineDetails.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
                  StrOrderLineDetails.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
                  IF NOT StrOrderLineDetails.FINDFIRST THEN BEGIN
                    StrOrderLineDetails.INIT;
                    StrOrderLineDetails.Type := StrOrderDetails.Type;
                    StrOrderLineDetails."Document No." := StrOrderDetails."Document No.";
                    StrOrderLineDetails."Structure Code" := StrOrderDetails."Structure Code";
                    StrOrderLineDetails."Item No." := "Item No.";
                    StrOrderLineDetails."Line No." := "Line No.";
                    StrOrderLineDetails."Calculation Order" := StrOrderDetails."Calculation Order";
                    StrOrderLineDetails."Tax/Charge Type" := StrOrderDetails."Tax/Charge Type";
                    StrOrderLineDetails."Tax/Charge Group" := StrOrderDetails."Tax/Charge Group";
                    StrOrderLineDetails."Tax/Charge Code" := StrOrderDetails."Tax/Charge Code";
                    StrOrderLineDetails."Calculation Type" := StrOrderDetails."Calculation Type";
                    StrOrderLineDetails."Calculation Value" := StrOrderDetails."Calculation Value";
                    StrOrderLineDetails."Quantity Per" := StrOrderDetails."Quantity Per";
                    StrOrderLineDetails."Loading on Inventory" := StrOrderDetails."Loading on Inventory";
                    StrOrderLineDetails."% Loading on Inventory" := StrOrderDetails."% Loading on Inventory";
                    StrOrderLineDetails."Header/Line" := StrOrderDetails."Header/Line";
                    StrOrderLineDetails."Include Base" := StrOrderDetails."Include Base";
                    StrOrderLineDetails."Include Line Discount" := StrOrderDetails."Include Line Discount";
                    StrOrderLineDetails."Include Invoice Discount" := StrOrderDetails."Include Invoice Discount";
                    StrOrderLineDetails."Payable to Third Party" := StrOrderDetails."Payable to Third Party";
                    StrOrderLineDetails.LCY := StrOrderDetails.LCY;
                    StrOrderLineDetails."Third Party Code" := StrOrderDetails."Third Party Code";
                    StrOrderLineDetails.CVD := StrOrderDetails.CVD;
                    IF ((StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges) OR
                        (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Other Taxes"))
                    THEN
                      StrOrderDetails.TESTFIELD("Account No.");
                    StrOrderLineDetails."Account No." := StrOrderDetails."Account No.";
                    StrOrderLineDetails."Base Formula" := StrOrderDetails."Base Formula";
                    IF StrOrderLineDetails."Base Formula" <> '' THEN
                      BaseAmount := EvaluateExpressioninStructures(TRUE,StrOrderLineDetails."Base Formula",TransLine,StrOrderDetails)
                    ELSE
                      BaseAmount := 0;
                    IF StrOrderDetails."Include Base" THEN
                      BaseAmount := BaseAmount + Quantity * "Transfer Price";

                    CFactor := 1;
                    IF (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges) OR
                       (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Other Taxes")
                    THEN BEGIN
                      IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::"Fixed Value" THEN BEGIN
                        IF StrOrderDetails."Charge Basis" = StrOrderDetails."Charge Basis"::Amount THEN BEGIN
                          StrOrderLineDetails."Base Amount" := Quantity * "Transfer Price";
                          StrOrderLineDetails.Amount :=
                            (StrOrderDetails."Calculation Value" * CFactor) * (Quantity * "Transfer Price") / TotalAmount;
                        END;
                        IF StrOrderDetails."Charge Basis" = StrOrderDetails."Charge Basis"::Equally THEN BEGIN
                          StrOrderLineDetails."Base Amount" := 0;
                          StrOrderLineDetails.Amount := (StrOrderDetails."Calculation Value" * CFactor) / TotalLines;
                        END;
                      END;
                      IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::Percentage THEN BEGIN
                        StrOrderLineDetails."Base Amount" := BaseAmount;
                        StrOrderLineDetails.Amount := (StrOrderDetails."Calculation Value" * CFactor) * BaseAmount / 100;
                      END;
                      IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::"Amount Per Qty" THEN BEGIN
                        StrOrderLineDetails."Base Amount" := 0;
                        StrOrderLineDetails.Amount := (StrOrderDetails."Calculation Value" * CFactor) * Quantity /
                          StrOrderDetails."Quantity Per";
                      END;
                    END;

                    IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Excise THEN BEGIN
                      Location2.GET("Transfer-from Code");
                      IF Location2."Trading Location" AND MRP THEN
                        ERROR(Text16504,"Transfer-from Code");
                      IF MRP AND StrOrderDetails.CVD THEN
                        ERROR(Text16505);
                      IF NOT Location2."Trading Location" THEN BEGIN
                        IF NOT MRP THEN
                          IF NOT TransHeader."Captive Consumption" THEN
                            "Amount Added to Excise Base" := BaseAmount
                          ELSE
                            "Amount Added to Excise Base" :=
                              (("Cost of Production" * (1 + "Admin. Cost %" / 100)) +
                               ("Cost of Production" * (1 + "Admin. Cost %" / 100)) *
                               "Captive Consumption %" / 100) * "Quantity (Base)"
                        ELSE
                          "Amount Added to Excise Base" := "MRP Price" * "Quantity (Base)" * (1 - "Abatement %" / 100);
                      END ELSE
                        IF Location2."Trading Location" AND (NOT TransHeader."Captive Consumption") THEN BEGIN
                          TESTFIELD("Applies-to Entry (RG 23 D)");
                          GetBaseAmount(BaseAmount,TransLine);
                          IF NOT MRP THEN
                            IF NOT TransHeader."Captive Consumption" THEN
                              "Amount Added to Excise Base" := BaseAmount
                            ELSE
                              "Amount Added to Excise Base" :=
                                (("Cost of Production" * (1 + "Admin. Cost %" / 100)) +
                                 ("Cost of Production" * (1 + "Admin. Cost %" / 100)) *
                                 "Captive Consumption %" / 100) * "Quantity (Base)"
                          ELSE
                            "Amount Added to Excise Base" := "MRP Price" * "Quantity (Base)" * (1 - "Abatement %" / 100);
                        END;
                      CVD := StrOrderDetails.CVD;
                      IF CVD AND ("CIF Amount" + "BCD Amount" <> 0) THEN
                        "Amount Added to Excise Base" := ("CIF Amount" + "BCD Amount") * Quantity;
                      "Excise Base Amount" := "Amount Added to Excise Base";
                      UpdateAmounts;
                      IF AssessableValueCalc AND (NOT CVD) AND (NOT MRP) AND (NOT Location2."Trading Location")
                         AND (NOT TransHeader."Captive Consumption")
                      THEN
                        "Excise Base Amount" := "Assessable Value" * Quantity;
                      StrOrderLineDetails."Base Amount" := "Excise Base Amount";
                      StrOrderLineDetails.Amount := "Excise Amount";
                    END;
                    IF (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::GST) THEN BEGIN
                      "GST Base Amount" := BaseAmount;
                      UpdateGSTAmounts(BaseAmount,GSTApplicable);
                      StrOrderLineDetails."Base Amount" := "GST Base Amount";
                      StrOrderLineDetails.Amount :="Total GST Amount";
                    END;
                    StrOrderLineDetails."Amount (LCY)" := StrOrderLineDetails.Amount / CFactor;
                    StrOrderLineDetails.INSERT;
                  END;
                UNTIL StrOrderDetails.NEXT = 0;
            END;
            TransLine.MODIFY;
          UNTIL TransLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE EvaluateExpressioninStructures@1280007(IsTestExpression@1280003 : Boolean;Expression@1280002 : Code[250];TransLine@1280001 : Record 5741;VAR StructureOrderDetails@1280000 : Record 13794) : Decimal;
    VAR
      StrOrderLineDetails2@1280021 : Record 13795;
      StructureOrderDetails1@1280019 : Record 13794;
      Result@1280018 : Decimal;
      CallLevel@1280017 : Integer;
      Parantheses@1280016 : Integer;
      IsExpression@1280015 : Boolean;
      Operators@1280014 : Text[8];
      OperatorNo@1280013 : Integer;
      IsFilter@1280012 : Boolean;
      i@1280011 : Integer;
      RightResult@1280010 : Decimal;
      LeftResult@1280009 : Decimal;
      RightOperand@1280008 : Text[250];
      LeftOperand@1280007 : Text[250];
      Operator@1280006 : Char;
      DivisionError@1280005 : Boolean;
      Exp@1280004 : Integer;
    BEGIN
      Result := 0;
      CallLevel := CallLevel + 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i := i - 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo := OperatorNo + 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpressioninStructures(IsTestExpression,LeftOperand,TransLine,StructureOrderDetails);
          RightResult := EvaluateExpressioninStructures(IsTestExpression,RightOperand,TransLine,StructureOrderDetails);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN BEGIN
                Result := 0;
                DivisionError := TRUE;
              END ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpressioninStructures(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),TransLine,
                StructureOrderDetails)
          ELSE BEGIN
            IsFilter := (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
                         STRPOS(Expression,'<') + STRPOS(Expression,'>') +
                         STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 10) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsTestExpression THEN BEGIN
                EVALUATE(Exp,Expression);
                StructureOrderDetails1.SETRANGE(Type,StructureOrderDetails1.Type::Transfer);
                StructureOrderDetails1.SETRANGE("Document Type",StructureOrderDetails."Document Type");
                StructureOrderDetails1.SETRANGE("Document No.",StructureOrderDetails."Document No.");
                StructureOrderDetails1.SETRANGE("Structure Code",StructureOrderDetails."Structure Code");
                StructureOrderDetails1.SETRANGE("Calculation Order",Exp);
                IF StructureOrderDetails1.FINDFIRST THEN BEGIN
                  StrOrderLineDetails2.RESET;
                  StrOrderLineDetails2.SETCURRENTKEY("Document Type","Document No.",Type);
                  StrOrderLineDetails2.SETRANGE("Document Type",StructureOrderDetails1."Document Type");
                  StrOrderLineDetails2.SETRANGE("Document No.",StructureOrderDetails1."Document No.");
                  StrOrderLineDetails2.SETRANGE("Item No.",TransLine."Item No.");
                  StrOrderLineDetails2.SETRANGE("Line No.",TransLine."Line No.");
                  StrOrderLineDetails2.SETRANGE("Structure Code",StructureOrderDetails1."Structure Code");
                  StrOrderLineDetails2.SETRANGE("Tax/Charge Code",StructureOrderDetails1."Tax/Charge Code");
                  EVALUATE(Exp,Expression);
                  StrOrderLineDetails2.SETRANGE("Calculation Order",Exp);
                  IF StrOrderLineDetails2.FINDFIRST THEN
                    Result := Result + StrOrderLineDetails2.Amount;
                END ELSE
                  EVALUATE(Result,Expression);
              END;
          END;
      END;
      CallLevel := CallLevel - 1;
      EXIT(Result);
    END;

    PROCEDURE AdjustStructureAmounts@1280008(VAR TransHeader@1280000 : Record 5740);
    VAR
      StrOrderDetails@1280009 : Record 13794;
      StrOrderLineDetails@1280008 : Record 13795;
      StrOrderLines@1280007 : Record 13795;
      CFactor@1280003 : Decimal;
      StructureAmount@1280002 : Decimal;
      DiffAmount@1280001 : Decimal;
    BEGIN
      WITH TransHeader DO BEGIN
        StrOrderDetails.RESET;
        StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
        StrOrderDetails.SETRANGE("Document No.","No.");
        StrOrderDetails.SETRANGE("Structure Code",Structure);
        StrOrderDetails.SETFILTER(
          "Tax/Charge Type",'%1|%2',StrOrderDetails."Tax/Charge Type"::Charges,
          StrOrderDetails."Tax/Charge Type"::"Other Taxes");
        StrOrderDetails.SETRANGE("Calculation Type",StrOrderDetails."Calculation Type"::"Fixed Value");
        IF StrOrderDetails.FIND('-') THEN
          REPEAT
            CLEAR(StructureAmount);
            StrOrderLines.RESET;
            StrOrderLines.SETCURRENTKEY(
              "Document Type","Document No.","Calculation Order",Type,"Structure Code","Tax/Charge Type","Tax/Charge Group",
              "Tax/Charge Code","Calculation Type");
            StrOrderLines.SETRANGE(Type,StrOrderLineDetails.Type::Transfer);
            StrOrderLines.SETRANGE("Document No.","No.");
            StrOrderLines.SETRANGE("Structure Code",Structure);
            StrOrderLines.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
            StrOrderLines.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
            StrOrderLines.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
            StrOrderLines.SETRANGE("Calculation Type",StrOrderDetails."Calculation Type");
            IF StrOrderLines.FIND('-') THEN
              REPEAT
                StructureAmount := StructureAmount + StrOrderLines.Amount
              UNTIL StrOrderLines.NEXT = 0;

            CFactor := 1;

            IF StrOrderDetails."Calculation Value" <> StructureAmount THEN BEGIN
              DiffAmount := StrOrderDetails."Calculation Value" - StructureAmount;
              StrOrderLines.RESET;
              StrOrderLines.SETCURRENTKEY(
                "Document Type","Document No.","Calculation Order",Type,"Structure Code","Tax/Charge Type","Tax/Charge Group",
                "Tax/Charge Code","Calculation Type");
              StrOrderLines.SETRANGE(Type,StrOrderLineDetails.Type::Transfer);
              StrOrderLines.SETRANGE("Document No.","No.");
              StrOrderLines.SETRANGE("Structure Code",Structure);
              StrOrderLines.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
              StrOrderLines.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
              StrOrderLines.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
              StrOrderLines.SETRANGE("Calculation Type",StrOrderDetails."Calculation Type");
              IF StrOrderLines.FIND('-') THEN BEGIN
                StrOrderLines.Amount := StrOrderLines.Amount + DiffAmount;
                StrOrderLines."Amount (LCY)" := StrOrderLines."Amount (LCY)" + DiffAmount / CFactor;
                StrOrderLines.MODIFY;
              END;
            END;
          UNTIL StrOrderDetails.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateTransLines@1280009(VAR TransHeader@1280000 : Record 5740);
    VAR
      TransLine@1280010 : Record 5741;
      StrOrderDetails@1280009 : Record 13794;
      StrOrderLineDetails@1280008 : Record 13795;
      AmountToTransfer@1280001 : Decimal;
      AmountToInventory@1280011 : Decimal;
    BEGIN
      WITH TransHeader DO BEGIN
        TransLine.SETRANGE("Document No.","No.");
        TransLine.SETRANGE("Derived From Line No.",0);
        IF TransLine.FIND('-') THEN
          REPEAT
            AmountToTransfer := 0;
            AmountToInventory := 0;
            StrOrderDetails.RESET;
            StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
            StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Transfer);
            StrOrderDetails.SETRANGE("Document No.","No.");
            IF StrOrderDetails.FIND('-') THEN
              REPEAT
                StrOrderLineDetails.RESET;
                StrOrderLineDetails.SETRANGE(Type,StrOrderLineDetails.Type::Transfer);
                StrOrderLineDetails.SETRANGE("Calculation Order",StrOrderDetails."Calculation Order");
                StrOrderLineDetails.SETRANGE("Document No.","No.");
                StrOrderLineDetails.SETRANGE("Structure Code",Structure);
                StrOrderLineDetails.SETRANGE("Item No.",TransLine."Item No.");
                StrOrderLineDetails.SETRANGE("Line No.",TransLine."Line No.");
                StrOrderLineDetails.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
                StrOrderLineDetails.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
                StrOrderLineDetails.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
                IF StrOrderLineDetails.FIND('-') THEN
                  REPEAT
                    IF NOT
                       (StrOrderDetails."Tax/Charge Type" IN [StrOrderDetails."Tax/Charge Type"::"Sales Tax",
                                                              StrOrderDetails."Tax/Charge Type"::Excise,
                                                              StrOrderDetails."Tax/Charge Type"::GST])
                    THEN
                      AmountToTransfer := ROUND(AmountToTransfer + StrOrderLineDetails.Amount);
                    IF StrOrderDetails."Loading on Inventory" THEN
                      AmountToInventory :=
                        AmountToInventory + (StrOrderLineDetails."Amount (LCY)" *
                                             StrOrderLineDetails."% Loading on Inventory" / 100);
                  UNTIL StrOrderLineDetails.NEXT = 0;
              UNTIL StrOrderDetails.NEXT = 0;
            TransLine."Charges to Transfer" := AmountToTransfer;
            TransLine."Total Amount to Transfer" := ROUND(Amount + "Excise Amount" + "Charges to Transfer");
            TransLine."Amount Added to Inventory" := AmountToInventory;
            TransLine.MODIFY;
          UNTIL TransLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE TestStatusShip@1280003();
    BEGIN
      TESTFIELD("Quantity Shipped",0);
    END;

    PROCEDURE GetCostOfProduction@1500000();
    VAR
      InvSetup@1500000 : Record 313;
    BEGIN
      GetTransHeader;
      GetItem;
      IF TransHeader."Captive Consumption" THEN BEGIN
        InvSetup.GET;
        "Cost of Production" := Item."Unit Cost";
        "Captive Consumption %" := InvSetup."Captive Consumption %";
      END ELSE
        "Cost of Production" := 0;
      GetCostofProdInlcAdminCost;
    END;

    PROCEDURE CheckRG23D@1500001();
    VAR
      RG23D@1500000 : Record 16537;
    BEGIN
      RG23D.RESET;
      RG23D.SETRANGE("Transaction Type",RG23D."Transaction Type"::Purchase);
      RG23D.SETRANGE(Closed,FALSE);
      RG23D.SETRANGE("Entry No.","Applies-to Entry (RG 23 D)");
      IF RG23D.FINDFIRST THEN
        RG23D.CALCFIELDS("Remaining Quantity");
      IF RG23D."Remaining Quantity" <> 0 THEN
        VALIDATE(Quantity,RG23D."Remaining Quantity");
    END;

    PROCEDURE GetMRP@1500006();
    VAR
      ECCNoItemCategory@1500000 : Record 16566;
      Location2@1500001 : Record 14;
    BEGIN
      GetTransHeader;
      Location2.GET("Transfer-from Code");
      IF TransHeader."Captive Consumption" OR Location2."Trading Location" THEN
        EXIT;
      ECCNoItemCategory.RESET;
      ECCNoItemCategory.SETRANGE("Item No.","Item No.");
      ECCNoItemCategory.SETRANGE("E.C.C. No.",Location2."E.C.C. No.");
      ECCNoItemCategory.SETRANGE(MRP,TRUE);
      IF ECCNoItemCategory.FINDFIRST THEN BEGIN
        "MRP Price" := ECCNoItemCategory."Maximum Retail Price";
        MRP := TRUE;
        "Abatement %" := ECCNoItemCategory."Abatement %";
      END ELSE BEGIN
        "MRP Price" := 0;
        MRP := FALSE;
        "Abatement %" := 0;
      END;
    END;

    PROCEDURE GetCostofProdInlcAdminCost@1500003();
    BEGIN
      GetTransHeader;
      IF NOT TransHeader."Captive Consumption" THEN
        EXIT;
      "Cost Of Prod. Incl. Admin Cost" := "Cost of Production" * (1 + "Admin. Cost %" / 100);
      VALIDATE("Transfer Price","Cost Of Prod. Incl. Admin Cost");
    END;

    PROCEDURE GetBaseAmount@1500031(VAR Amt@1500000 : Decimal;TransLine@1500003 : Record 5741) CVDEntry : Boolean;
    VAR
      RG23D@1500001 : Record 16537;
      Qty@1500002 : Decimal;
    BEGIN
      WITH TransLine DO BEGIN
        GetTransHeader;
        Location.CheckTradingLocation("Transfer-from Code");
        IF ("Excise Base Amount" <> 0) AND ("Quantity Shipped" <> 0) THEN BEGIN
          Amt := "Excise Base Amount";
          BEDAmt := "BED Amount";
          "AED(GSI)Amt" := "AED(GSI) Amount";
          "AED(TTA)Amt" := "AED(TTA) Amount";
          SEDAmt := "SED Amount";
          SAEDAmt := "SAED Amount";
          CESSAmt := "CESS Amount";
          NCCDAmt := "NCCD Amount";
          eCessAmt := "eCess Amount";
          SHECessAmt := "SHE Cess Amount";
          ADETAmt := "ADET Amount";
          ADEAmt := "ADE Amount";
          ADCVATAmt := "ADC VAT Amount";
          EXIT;
        END;

        BEDAmt := 0;
        "AED(GSI)Amt" := 0;
        "AED(TTA)Amt" := 0;
        SEDAmt := 0;
        SAEDAmt := 0;
        CESSAmt := 0;
        NCCDAmt := 0;
        eCessAmt := 0;
        SHECessAmt := 0;
        ADETAmt := 0;
        ADEAmt := 0;
        Amt := 0;
        ADCVATAmt := 0;

        IF RG23D.GET("Applies-to Entry (RG 23 D)") THEN BEGIN
          RG23D.CALCFIELDS("Remaining Quantity");
          IF RG23D."Remaining Quantity" = 0 THEN
            EXIT;
          CheckAvailableQty;
          Qty += RG23D."Remaining Quantity";
          IF NOT CVDEntry THEN
            CVDEntry := RG23D.CVD;
          IF Qty <= Quantity THEN BEGIN
            Amt += RG23D."Excise Base Amt Per Unit" * RG23D."Remaining Quantity";
            BEDAmt += RG23D."BED Amount Per Unit" * RG23D."Remaining Quantity";
            "AED(GSI)Amt" += RG23D."AED(GSI) Amount Per Unit" * RG23D."Remaining Quantity";
            "AED(TTA)Amt" += RG23D."AED(TTA) Amount Per Unit" * RG23D."Remaining Quantity";
            SEDAmt += RG23D."SED Amount Per Unit" * RG23D."Remaining Quantity";
            SAEDAmt += RG23D."SAED Amount Per Unit" * RG23D."Remaining Quantity";
            CESSAmt += RG23D."CESS Amount Per Unit" * RG23D."Remaining Quantity";
            NCCDAmt += RG23D."NCCD Amount Per Unit" * RG23D."Remaining Quantity";
            eCessAmt += RG23D."eCess Amount Per Unit" * RG23D."Remaining Quantity";
            SHECessAmt += RG23D."SHE Cess Amount Per Unit" * RG23D."Remaining Quantity";
            ADETAmt += RG23D."ADET Amount Per Unit" * RG23D."Remaining Quantity";
            ADEAmt += RG23D."ADE Amount Per Unit" * RG23D."Remaining Quantity";
            ADCVATAmt += RG23D."ADC VAT Amount Per Unit" * RG23D."Remaining Quantity";
          END;
          IF Qty > Quantity THEN BEGIN
            Qty -= RG23D."Remaining Quantity";
            Amt += RG23D."Excise Base Amt Per Unit" * (Quantity - Qty);
            BEDAmt += RG23D."BED Amount Per Unit" * (Quantity - Qty);
            "AED(GSI)Amt" += RG23D."AED(GSI) Amount Per Unit" * (Quantity - Qty);
            "AED(TTA)Amt" += RG23D."AED(TTA) Amount Per Unit" * (Quantity - Qty);
            SEDAmt += RG23D."SED Amount Per Unit" * (Quantity - Qty);
            SAEDAmt += RG23D."SAED Amount Per Unit" * (Quantity - Qty);
            CESSAmt += RG23D."CESS Amount Per Unit" * (Quantity - Qty);
            NCCDAmt += RG23D."NCCD Amount Per Unit" * (Quantity - Qty);
            eCessAmt += RG23D."eCess Amount Per Unit" * (Quantity - Qty);
            SHECessAmt += RG23D."SHE Cess Amount Per Unit" * (Quantity - Qty);
            ADETAmt += RG23D."ADET Amount Per Unit" * (Quantity - Qty);
            ADEAmt += RG23D."ADE Amount Per Unit" * (Quantity - Qty);
            ADCVATAmt += RG23D."ADC VAT Amount Per Unit" * (Quantity - Qty);
            EXIT;
          END;
        END;
      END;
    END;

    PROCEDURE CheckAvailableQty@1500012();
    VAR
      TransLine@1500000 : Record 5741;
      DetailRg23D@1500003 : Record 16533;
      QtyAllocated@1500002 : Decimal;
    BEGIN
      TransLine.RESET;
      TransLine.SETCURRENTKEY("Document No.","Item No.");
      TransLine.SETRANGE("Document No.","Document No.");
      TransLine.SETRANGE("Item No.","Item No.");
      TransLine.SETRANGE("Line No.","Line No.");
      TransLine.CALCSUMS(Quantity);
      DetailRg23D.RESET;
      DetailRg23D.SETCURRENTKEY("RG 23 D Entry No.","Document No.");
      DetailRg23D.SETRANGE("RG 23 D Entry No.","Applies-to Entry (RG 23 D)");
      DetailRg23D.SETFILTER("Document No.",'<>%1','');
      DetailRg23D.CALCSUMS(Quantity);
      QtyAllocated += DetailRg23D.Quantity;

      IF QtyAllocated < TransLine.Quantity THEN
        ERROR(Text16503,"Item No.",QtyAllocated,FIELDCAPTION(Quantity));
    END;

    PROCEDURE CheckAssessableValue@1500026(TransHeader@1500000 : Record 5740) : Boolean;
    VAR
      ExcisePostingSetup@1500003 : Record 13711;
      AssessableValue@1500002 : Boolean;
    BEGIN
      WITH TransHeader DO BEGIN
        ExcisePostingSetup.RESET;
        ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
        ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
        ExcisePostingSetup.SETRANGE("From Date",0D,"Posting Date");
        ExcisePostingSetup.SETRANGE(SSI,FALSE);
        IF ExcisePostingSetup.FINDLAST THEN
          AssessableValue := ExcisePostingSetup."BED Calculation Type" =
            ExcisePostingSetup."BED Calculation Type"::"% of Accessable Value";
        EXIT(AssessableValue);
      END;
    END;

    PROCEDURE IsShippedDimChanged@105() : Boolean;
    BEGIN
      EXIT(("Dimension Set ID" <> xRec."Dimension Set ID") AND
        (("Quantity Shipped" <> 0) OR ("Qty. Shipped (Base)" <> 0)));
    END;

    PROCEDURE ConfirmShippedDimChange@106() : Boolean;
    BEGIN
      IF NOT CONFIRM(Text012,FALSE,TABLECAPTION) THEN
        ERROR(Text013);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SelectItemEntry@11(CurrentFieldNo@1000 : Integer);
    VAR
      ItemLedgEntry@1001 : Record 32;
      TransferLine2@1002 : Record 5741;
    BEGIN
      ItemLedgEntry.SETCURRENTKEY("Item No.",Positive);
      ItemLedgEntry.SETRANGE("Item No.","Item No.");
      ItemLedgEntry.SETRANGE(Correction,FALSE);
      ItemLedgEntry.SETRANGE(Open,TRUE);
      IF "Transfer-from Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code","Transfer-from Code");
      ItemLedgEntry.SETRANGE("Variant Code","Variant Code");

      IF CurrentFieldNo = FIELDNO("Applies-to Entry (Ship)") THEN
        ItemLedgEntry.SETRANGE(Positive,TRUE)
      ELSE
        ItemLedgEntry.SETRANGE(Positive,FALSE);

      IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN BEGIN
        TransferLine2 := Rec;
        IF CurrentFieldNo = FIELDNO("Applies-to Entry (Ship)") THEN
          TransferLine2.VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.");
        CheckItemAvailable(CurrentFieldNo);
        Rec := TransferLine2;
      END;
    END;

    PROCEDURE DateConflictCheck@13();
    BEGIN
      IF NOT TrackingBlocked THEN
        CheckDateConflict.TransferLineCheck(Rec);
    END;

    PROCEDURE UpdateGSTAmounts@1500025(GSTBaseAmount@1500008 : Decimal;GSTApplicable@1500001 : Boolean);
    VAR
      Location@1500012 : Record 14;
      Location1@1500004 : Record 14;
      GSTPerStateCode@1500007 : Code[20];
      TotalGST@1500003 : Decimal;
      GSTJurisdiction@1500002 : 'Intrastate,Interstate';
      SourceType@1500000 : 'Vendor,Customer';
    BEGIN
      GetTransHeader;
      IF TransferHeader1."No."='' THEN
        TransferHeader1.COPY(TransHeader);
      IF ("Quantity Shipped" <> 0) OR (TransferHeader1.Status <> TransferHeader1.Status::Open) THEN
        EXIT;
      GSTManagement.DeleteGSTBuffer(DocTransactionType::Transfer,0,"Document No.","Line No.");
      GSTManagement.DeleteGSTCalculationBuffer(DocTransactionType::Transfer,0,"Document No.","Line No.");
      VALIDATE("GST Base Amount",0);
      IF NOT GSTApplicable THEN EXIT;
      IF "Transfer Price" = 0 THEN EXIT;
      TESTFIELD("Transfer-from Code",TransferHeader1."Transfer-from Code");
      TESTFIELD("Transfer-to Code",TransferHeader1."Transfer-to Code");
      IF Location.GET("Transfer-from Code") THEN;
      IF Location1.GET("Transfer-to Code") THEN;
      GSTPerStateCode := GSTManagement.GetGSTConfiguration(SourceType::Customer,Location."State Code",Location1."State Code",GSTJurisdiction);
      IF GSTPerStateCode = '' THEN
        EXIT;
      TotalGST := GSTManagement.CalculateGSTAmounts(
        "Document No.","Line No.",GSTJurisdiction,GSTPerStateCode,"GST Group Code",
        TransferHeader1."Posting Date",GSTBaseAmount,DocTransactionType::Transfer,0,'',1,
        "Transfer Price",TRUE,Quantity,"Unit of Measure Code","Item No.");
      IF Exempted THEN
        "Total GST Amount" := 0
      ELSE
      "Total GST Amount" := TotalGST;
      IF GSTBaseAmount <> 0 THEN
      "GST %" := "Total GST Amount" / GSTBaseAmount * 100;
      "GST Base Amount" := GSTBaseAmount;
      GSTManagement.DeleteGSTCalculationBuffer(DocTransactionType::Transfer,0,"Document No.","Line No.");
    END;

    PROCEDURE GetCurrentTransHeader@1500042(TransferHeaderRec@1500000 : Record 5740);
    BEGIN
      TransferHeader1 := TransferHeaderRec;
    END;

    BEGIN
    END.
  }
}

