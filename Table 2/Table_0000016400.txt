OBJECT Table 16400 GST Registration Nos.
{
  OBJECT-PROPERTIES
  {
    Date=27-04-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.48466;
  }
  PROPERTIES
  {
    CaptionML=[ENU=GST Registration Nos.;
               ENN=GST Registration Nos.];
    LookupPageID=Page16400;
    DrillDownPageID=Page16400;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code15        ;OnValidate=BEGIN
                                                                CheckGSTRegistrationNo("State Code",Code);
                                                              END;

                                                   CaptionML=[ENU=Code;
                                                              ENN=Code];
                                                   NotBlank=Yes }
    { 2   ;   ;State Code          ;Code10        ;TableRelation=State;
                                                   CaptionML=[ENU=State Code;
                                                              ENN=State Code];
                                                   NotBlank=Yes }
    { 4   ;   ;Description         ;Text30        ;CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 5   ;   ;Input Service Distributor;Boolean  ;CaptionML=[ENU=Input Service Distributor;
                                                              ENN=Input Service Distributor] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      LengthErr@1500000 : TextConst 'ENU=The Length of the GST Registration Nos. must be 15.;ENN=The Length of the GST Registration Nos. must be 15.';
      StateCodeErr@1500001 : TextConst '@@@="%1 and %2 = State Code and Initial State Code";ENU=The GST Registration No. for the state %1 should start with %2.;ENN=The GST Registration No. for the state %1 should start with %2.';
      OnlyAlphabetErr@1500002 : TextConst '@@@="%1 = Integer";ENU=Only Alphabet is allowed in the position %1.;ENN=Only Alphabet is allowed in the position %1.';
      OnlyNumericErr@1500003 : TextConst '@@@="%1 = Integer";ENU=Only Numeric is allowed in the position %1.;ENN=Only Numeric is allowed in the position %1.';
      OnlyAlphaNumericErr@1500004 : TextConst '@@@="%1 = Integer";ENU=Only AlphaNumeric is allowed in the position %1.;ENN=Only AlphaNumeric is allowed in the position %1.';

    PROCEDURE CheckGSTRegistrationNo@1500000(StateCode@1500000 : Code[10];RegistrationNo@1500001 : Code[15]);
    VAR
      State@1500002 : Record 13762;
      Position@1500004 : Integer;
    BEGIN
      IF RegistrationNo = '' THEN
        EXIT;
      IF STRLEN(RegistrationNo) <> 15 THEN
        ERROR(LengthErr);
      State.GET(StateCode);
      IF State."State Code (GST Reg. No.)" <> COPYSTR(RegistrationNo,1,2) THEN
        ERROR(StateCodeErr,StateCode,State."State Code (GST Reg. No.)");
      FOR Position := 3 TO 15 DO
        CASE Position OF
          3..7,12:
            CheckIsAlphabet(RegistrationNo,Position);
          8..11:
            CheckIsNumeric(RegistrationNo,Position);
          13..15:
            CheckIsAlphaNumeric(RegistrationNo,Position)
        END;
    END;

    LOCAL PROCEDURE CheckIsAlphabet@1500001(RegistrationNo@1500000 : Code[15];Position@1500001 : Integer);
    BEGIN
      IF NOT (COPYSTR(RegistrationNo,Position,1) IN ['A'..'Z']) THEN
        ERROR(OnlyAlphabetErr,Position);
    END;

    LOCAL PROCEDURE CheckIsNumeric@1500002(RegistrationNo@1500000 : Code[15];Position@1500001 : Integer);
    BEGIN
      IF NOT (COPYSTR(RegistrationNo,Position,1) IN ['0'..'9']) THEN
        ERROR(OnlyNumericErr,Position);
    END;

    LOCAL PROCEDURE CheckIsAlphaNumeric@1500003(RegistrationNo@1500000 : Code[15];Position@1500001 : Integer);
    BEGIN
      IF NOT ((COPYSTR(RegistrationNo,Position,1) IN ['0'..'9']) OR (COPYSTR(RegistrationNo,Position,1) IN ['A'..'Z']) )THEN
        ERROR(OnlyAlphaNumericErr,Position);
    END;

    BEGIN
    END.
  }
}

