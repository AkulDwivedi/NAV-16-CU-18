OBJECT Table 16527 Proposed Depr Method Header
{
  OBJECT-PROPERTIES
  {
    Date=24-04-16;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.45778;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               DeleteFARetrospectiveLine;
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=[ENU=Proposed Depr Method Header;
               ENN=Proposed Depr Method Header];
    LookupPageID=Page16557;
    DrillDownPageID=Page16557;
  }
  FIELDS
  {
    { 1   ;   ;Depreciation Book   ;Code10        ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                DeprBook.GET("Depreciation Book");
                                                                DeprBook.TESTFIELD("FA Book Type",DeprBook."FA Book Type"::" ");
                                                                CalculateDeprAmont;
                                                              END;

                                                   CaptionML=[ENU=Depreciation Book;
                                                              ENN=Depreciation Book];
                                                   NotBlank=Yes }
    { 2   ;   ;Proposed Depreciation Method;Option;OnValidate=BEGIN
                                                                TESTFIELD("Depreciation Book");
                                                              END;

                                                   CaptionML=[ENU=Proposed Depreciation Method;
                                                              ENN=Proposed Depreciation Method];
                                                   OptionCaptionML=[ENU=Straight-Line,Declining-Balance 1,Declining-Balance 2,DB1/SL,DB2/SL,User-Defined;
                                                                    ENN=Straight-Line,Declining-Balance 1,Declining-Balance 2,DB1/SL,DB2/SL,User-Defined];
                                                   OptionString=Straight-Line,Declining-Balance 1,Declining-Balance 2,DB1/SL,DB2/SL,User-Defined }
    { 3   ;   ;FA Class Code       ;Code10        ;TableRelation="FA Class";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Depreciation Book");
                                                                CalculateDeprAmont;
                                                              END;

                                                   CaptionML=[ENU=FA Class Code;
                                                              ENN=FA Class Code] }
    { 4   ;   ;Depreciation Value  ;Decimal       ;CaptionML=[ENU=Depreciation Value;
                                                              ENN=Depreciation Value] }
    { 5   ;   ;Retrospective Value ;Decimal       ;CaptionML=[ENU=Retrospective Value;
                                                              ENN=Retrospective Value] }
    { 6   ;   ;FA Subclass Code    ;Code10        ;TableRelation="FA Subclass";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Depreciation Book");
                                                                CalculateDeprAmont;
                                                              END;

                                                   CaptionML=[ENU=FA Subclass Code;
                                                              ENN=FA Subclass Code] }
    { 7   ;   ;Retrospective Calc. Date;Date      ;CaptionML=[ENU=Retrospective Calc. Date;
                                                              ENN=Retrospective Calc. Date] }
    { 8   ;   ;FA Filter           ;Code100       ;OnValidate=BEGIN
                                                                IF "FA Filter" <> xRec."FA Filter" THEN BEGIN
                                                                  FARetrospectiveBook.RESET;
                                                                  FARetrospectiveBook.SETRANGE("Depreciation Book Code","Depreciation Book");
                                                                  FARetrospectiveBook.SETRANGE("Proposed Depreciation Method","Proposed Depreciation Method");
                                                                  FARetrospectiveBook.SETRANGE("FA Class Code","FA Class Code");
                                                                  FARetrospectiveBook.SETRANGE("FA Subclass Code","FA Subclass Code");
                                                                  IF FARetrospectiveBook.FINDFIRST THEN BEGIN
                                                                    "FA Filter" := xRec."FA Filter";
                                                                    ERROR(Text008);
                                                                  END;
                                                                END;
                                                                CalculateDeprAmont;
                                                              END;

                                                   OnLookup=VAR
                                                              FixedAsset2@1500001 : Record 5600;
                                                            BEGIN
                                                              CLEAR(FixedAssetList);
                                                              FixedAsset2.RESET;
                                                              IF "FA Class Code" <> '' THEN
                                                                FixedAsset2.SETRANGE("FA Class Code","FA Class Code");
                                                              IF "FA Subclass Code" <> '' THEN
                                                                FixedAsset2.SETRANGE("FA Subclass Code","FA Subclass Code");
                                                              IF FixedAsset2.FINDSET THEN
                                                                REPEAT
                                                                  IF FADeprBook.GET(FixedAsset2."No.","Depreciation Book") THEN
                                                                    FixedAsset2.MARK := TRUE;
                                                                UNTIL FixedAsset2.NEXT = 0;
                                                              FixedAsset2.MARKEDONLY(TRUE);
                                                              FixedAsset3.COPY(FixedAsset2);
                                                              FixedAssetList.SETTABLEVIEW(FixedAsset2);
                                                              FixedAssetList.LOOKUPMODE(TRUE);
                                                              COMMIT;
                                                              IF FixedAssetList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                IF FixedAsset3.FIND('-') THEN
                                                                  REPEAT
                                                                    IF  FixedAssetList.GetSelectionFilter = FixedAsset3."No." THEN BEGIN
                                                                      "FA Filter" := FixedAssetList.GetSelectionFilter;
                                                                      CalculateDeprAmont;
                                                                      VALIDATE("FA Filter");
                                                                      EXIT;
                                                                    END;
                                                                  UNTIL FixedAsset3.NEXT = 0;
                                                                MESSAGE(Text012);
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=FA Filter;
                                                              ENN=FA Filter] }
    { 9   ;   ;Retrospective Calculated;Boolean   ;CaptionML=[ENU=Retrospective Calculated;
                                                              ENN=Retrospective Calculated] }
  }
  KEYS
  {
    {    ;Depreciation Book,Proposed Depreciation Method,FA Class Code,FA Subclass Code;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      FALedgerEntry@1500000 : Record 5601;
      RetrospectiveEntry@1500001 : Record 16526;
      FARetrospectiveBook@1500002 : Record 16528;
      FARetrospectiveBook2@1500004 : Record 16528;
      Text000@1500005 : TextConst 'ENU=You cannot rename a %1.;ENN=You cannot rename a %1.';
      DeprBook@1500003 : Record 5611;
      Text002@1500008 : TextConst 'ENU=You cannot calculate retrospective depreciation because there are no records in Retrospective Book Line.;ENN=You cannot calculate retrospective depreciation because there are no records in Retrospective Book Line.';
      FixedAsset@1500010 : Record 5600;
      FADeprBook@1500011 : Record 5612;
      FixedAsset2@1500026 : Record 5600;
      FixedAsset3@1500025 : Record 5600;
      FixedAssetList@1500009 : Page 5601;
      CalculateDepr@1500021 : Codeunit 5610;
      DeprAmount@1500013 : Decimal;
      EntryAmounts@1500030 : ARRAY [4] OF Decimal;
      SLPercent@1500028 : Decimal;
      DBPercent@1500027 : Decimal;
      DepreciationValue@1500024 : Decimal;
      DeprUntilDate@1500014 : Date;
      Text007@1500016 : TextConst 'ENU=Define %1 in %2 in the %3.;ENN=Define %1 in %2 in the %3.';
      NumberOfDays@1500022 : Integer;
      Text008@1500029 : TextConst 'ENU=FA Retrospective Line must be blank.;ENN=FA Retrospective Line must be blank.';
      Text009@1500015 : TextConst 'ENU=Retrospective depreciation has been calculated Successfully.;ENN=Retrospective depreciation has been calculated Successfully.';
      Text010@1500031 : TextConst 'ENU=There are no fixed assets for specified filters.;ENN=There are no fixed assets for specified filters.';
      Text012@1500034 : TextConst 'ENU=This Asset is out of the given filters.;ENN=This Asset is out of the given filters.';
      I@1500006 : Integer;

    PROCEDURE CalcRetrospectiveMethod@1500000();
    VAR
      RetroBookEntryFound@1500000 : Boolean;
      NoShiftEntryExists@1500001 : Boolean;
      NextRecordExists@1500002 : Boolean;
      ShiftEntryExists@1500003 : Boolean;
    BEGIN
      DeprBook.GET("Depreciation Book");
      DeprBook.TESTFIELD("FA Book Type",DeprBook."FA Book Type"::" ");
      FixedAsset2.RESET;
      IF "FA Filter" <> '' THEN
        FixedAsset2.SETFILTER("No.","FA Filter")
      ELSE
        FixedAsset2.SETFILTER("No.",'<>%1','');
      IF "FA Class Code" <> '' THEN
        FixedAsset2.SETRANGE("FA Class Code","FA Class Code");
      IF "FA Subclass Code" <> '' THEN
        FixedAsset2.SETRANGE("FA Subclass Code","FA Subclass Code");
      IF NOT FixedAsset2.FINDFIRST THEN
        ERROR(Text010);

      REPEAT
        RetroBookEntryFound := FALSE;
        IF FADeprBook.GET(FixedAsset2."No.","Depreciation Book") THEN BEGIN
          IF FADeprBook."Disposal Date" <> 0D THEN
            DeleteFARetroEntry(FixedAsset2."No.");
        END;
        FADeprBook.RESET;
        FADeprBook.SETRANGE("FA No.",FixedAsset2."No.");
        FADeprBook.SETRANGE("Depreciation Book Code","Depreciation Book");
        FADeprBook.SETRANGE("Disposal Date",0D);
        IF FADeprBook.FINDFIRST THEN BEGIN
          DeleteFARetroEntry(FixedAsset2."No.");
          FilterRetroBook;
          FilterFALedgEntry;
          FOR I := 1 TO 4 DO BEGIN
            CASE I OF
              1:
                FARetrospectiveBook.SETFILTER("FA No.",'%1',FixedAsset2."No.");
              2:
                BEGIN
                  FARetrospectiveBook.SETFILTER("FA No.",'%1','');
                  FARetrospectiveBook.SETFILTER("FA Posting Group",'%1',FADeprBook."FA Posting Group");
                END;
              3:
                BEGIN
                  FARetrospectiveBook.SETFILTER("FA No.",'%1','');
                  FARetrospectiveBook.SETFILTER("FA Posting Group",'%1','');
                  FARetrospectiveBook.SETFILTER("Depreciation Starting Date",'<>%1',0D);
                END;
              4:
                BEGIN
                  FARetrospectiveBook.SETFILTER("FA No.",'%1','');
                  FARetrospectiveBook.SETFILTER("FA Posting Group",'%1','');
                  FARetrospectiveBook.SETFILTER("Depreciation Starting Date",'%1',0D);
                END;
            END;

            IF FARetrospectiveBook.FINDSET THEN BEGIN
              RetroBookEntryFound := TRUE;
              REPEAT
                FARetrospectiveBook2.RESET;
                FARetrospectiveBook2.COPYFILTERS(FARetrospectiveBook);
                IF FARetrospectiveBook2.FIND('-') THEN;
                FARetrospectiveBook2.GET(FARetrospectiveBook."Depreciation Book Code",
                  FARetrospectiveBook."Proposed Depreciation Method",FARetrospectiveBook."FA Class Code",
                  FARetrospectiveBook."FA Subclass Code",FARetrospectiveBook."FA Posting Group",
                  FARetrospectiveBook."FA No.",FARetrospectiveBook."Depreciation Starting Date");
                FALedgerEntry.SETRANGE("Shift Entry",FALSE);
                NoShiftEntryExists := FALedgerEntry.FINDFIRST;

                NextRecordExists := FARetrospectiveBook2.NEXT <> 0;
                IF NextRecordExists THEN BEGIN
                  FARetrospectiveBook.TESTFIELD("Depreciation Starting Date");
                  FARetrospectiveBook2.TESTFIELD("Depreciation Starting Date");
                END;

                IF NoShiftEntryExists THEN BEGIN
                  IF NextRecordExists THEN
                    FALedgerEntry.SETRANGE("FA Posting Date",FARetrospectiveBook."Depreciation Starting Date",
                      (FARetrospectiveBook2."Depreciation Starting Date" - 1))
                  ELSE
                    FALedgerEntry.SETFILTER("FA Posting Date",'>=%1',FARetrospectiveBook."Depreciation Starting Date");

                  IF FALedgerEntry.FINDSET THEN
                    REPEAT
                      IF (NOT CheckRetroEntry) AND (FALedgerEntry."FA No." <> '') THEN BEGIN
                        IF FALedgerEntry."FA Posting Type" = FALedgerEntry."FA Posting Type"::"Acquisition Cost" THEN
                          InsertRetrospectiveEntry
                        ELSE
                          CalculateRetroDepr;
                      END;
                    UNTIL FALedgerEntry.NEXT = 0;
                END;

                FALedgerEntry.SETRANGE("Shift Entry",TRUE);
                FALedgerEntry.SETRANGE("FA Posting Date");
                ShiftEntryExists := FALedgerEntry.FINDFIRST;

                IF ShiftEntryExists THEN BEGIN
                  IF NextRecordExists THEN
                    FALedgerEntry.SETRANGE("Depreciation Starting Date",FARetrospectiveBook."Depreciation Starting Date",
                      (FARetrospectiveBook2."Depreciation Starting Date" - 1))
                  ELSE
                    FALedgerEntry.SETFILTER("Depreciation Starting Date",'>=%1',FARetrospectiveBook."Depreciation Starting Date");
                END;
                IF FALedgerEntry.FINDSET THEN
                  REPEAT
                    IF (NOT CheckRetroEntry) AND (FALedgerEntry."FA No." <> '') THEN BEGIN
                      IF FALedgerEntry."FA Posting Type" = FALedgerEntry."FA Posting Type"::"Acquisition Cost" THEN
                        InsertRetrospectiveEntry
                      ELSE
                        CalculateRetroDepr;
                    END;
                  UNTIL FALedgerEntry.NEXT = 0;
                FALedgerEntry.SETRANGE("Depreciation Starting Date");
              UNTIL FARetrospectiveBook.NEXT = 0;
            END;
            FALedgerEntry.SETRANGE("Depreciation Starting Date");
            FARetrospectiveBook.SETRANGE("FA No.");
            FARetrospectiveBook.SETRANGE("FA Posting Group");
            IF RetroBookEntryFound THEN
              I := 5;
          END;
        END;
        FALedgerEntry.SETRANGE("FA No.");
      UNTIL FixedAsset2.NEXT = 0;

      "Retrospective Calculated" := TRUE;
      MODIFY;
      MESSAGE(Text009);
    END;

    PROCEDURE DeleteFARetroEntry@1500015(FixedAssetCode@1500000 : Code[20]);
    BEGIN
      RetrospectiveEntry.LOCKTABLE;
      RetrospectiveEntry.RESET;
      RetrospectiveEntry.SETRANGE("Depreciation Book Code","Depreciation Book");
      RetrospectiveEntry.SETRANGE("Proposed Depreciation Method","Proposed Depreciation Method");
      RetrospectiveEntry.SETRANGE("FA No.",FixedAssetCode);
      RetrospectiveEntry.DELETEALL;
    END;

    PROCEDURE FilterRetroBook@1500016();
    BEGIN
      FARetrospectiveBook.RESET;
      FARetrospectiveBook.SETRANGE("Depreciation Book Code","Depreciation Book");
      FARetrospectiveBook.SETRANGE("Proposed Depreciation Method","Proposed Depreciation Method");
      IF "FA Class Code" <> '' THEN
        FARetrospectiveBook.SETRANGE("FA Class Code","FA Class Code")
      ELSE
        FARetrospectiveBook.SETFILTER("FA Class Code",'%1','');
      IF "FA Subclass Code" <> '' THEN
        FARetrospectiveBook.SETRANGE("FA Subclass Code","FA Subclass Code")
      ELSE
        FARetrospectiveBook.SETFILTER("FA Subclass Code",'%1','');
      IF NOT FARetrospectiveBook.FINDFIRST THEN
        ERROR(Text002);
    END;

    PROCEDURE FilterFALedgEntry@1500017();
    BEGIN
      FALedgerEntry.RESET;
      FALedgerEntry.SETRANGE("Depreciation Book Code","Depreciation Book");
      FALedgerEntry.SETFILTER("FA No.",FixedAsset2."No.");
    END;

    PROCEDURE DeleteRetroEntry@1500003();
    BEGIN
      RetrospectiveEntry.LOCKTABLE;
      RetrospectiveEntry.RESET;
      RetrospectiveEntry.SETRANGE("Depreciation Book Code","Depreciation Book");
      RetrospectiveEntry.SETRANGE("Proposed Depreciation Method","Proposed Depreciation Method");
      IF "FA Class Code" <> '' THEN
        RetrospectiveEntry.SETRANGE("FA Class Code","FA Class Code");
      IF "FA Subclass Code" <> '' THEN
        RetrospectiveEntry.SETRANGE("FA Subclass Code","FA Subclass Code");
      RetrospectiveEntry.DELETEALL;
    END;

    PROCEDURE CheckRetroEntry@1500004() : Boolean;
    VAR
      RetroEntry@1500000 : Record 16526;
    BEGIN
      RetroEntry.RESET;
      RetroEntry.SETRANGE("Depreciation Book Code",FALedgerEntry."Depreciation Book Code");
      RetroEntry.SETRANGE("Proposed Depreciation Method","Proposed Depreciation Method");
      RetroEntry.SETRANGE("FA Ledger Entry No.",FALedgerEntry."Entry No.");
      EXIT(RetroEntry.FINDFIRST);
    END;

    PROCEDURE CalculateRetroDepr@1500006();
    VAR
      PostingDate@1500001 : Date;
      CalculateDepr@1500003 : Codeunit 5610;
      DaysInPeriod@1500009 : Integer;
    BEGIN
      DeprUntilDate := FALedgerEntry."FA Posting Date";
      IF DeprUntilDate = 0D THEN
        ERROR(Text000,FALedgerEntry.FIELDCAPTION("FA Posting Date"));
      IF PostingDate = 0D THEN
        PostingDate := DeprUntilDate;
      IF DeprBook."Use Same FA+G/L Posting Dates" AND (DeprUntilDate <> PostingDate) THEN
        ERROR(
          Text002,
          FALedgerEntry.FIELDCAPTION("FA Posting Date"),
          FALedgerEntry.FIELDCAPTION("Posting Date"),
          DeprBook.FIELDCAPTION("Use Same FA+G/L Posting Dates"),
          FALSE,
          DeprBook.TABLECAPTION,
          DeprBook.FIELDCAPTION(Code),
          DeprBook.Code);

      FixedAsset.GET(FALedgerEntry."FA No.");
      IF NOT (FixedAsset.Inactive OR FixedAsset.Blocked) THEN
        BEGIN
        GetCalcPercent;
        IF NOT FALedgerEntry."Shift Entry" THEN
          CalculateDepr.CalculateRetro(
            DeprAmount,NumberOfDays,DeprUntilDate,EntryAmounts,0D,DaysInPeriod,
            FARetrospectiveBook,FALedgerEntry,SLPercent,DBPercent)
        ELSE
          CalculateFAShifts;
        InsertRetrospectiveEntry;
      END;
    END;

    LOCAL PROCEDURE CalculateFAShifts@1500008() : Boolean;
    VAR
      WrknDays@1500001 : Integer;
      SkipItteration@1500003 : Boolean;
      NonSeasonal@1500002 : Boolean;
      Seasonal@1500004 : Boolean;
      DepreciationCalc@1500005 : Codeunit 5616;
      RetroEntry@1500007 : Record 16526;
      LastDeprDate@1500008 : Date;
      StartingDate@1500010 : Date;
      EndingDate@1500011 : Date;
      FADateCalc@1500009 : Codeunit 5617;
    BEGIN
      WrknDays := 0;
      SkipItteration := FALSE;
      DeprBook.GET("Depreciation Book");

      RetroEntry.RESET;
      RetroEntry.SETCURRENTKEY("FA No.","Depreciation Book Code","Retrospective Calc. Date");
      RetroEntry.SETRANGE("FA No.",FixedAsset."No.");
      RetroEntry.SETRANGE("FA Posting Type",RetroEntry."FA Posting Type"::Depreciation);
      RetroEntry.SETRANGE("Depreciation Book Code","Depreciation Book");
      IF RetroEntry.FINDLAST THEN
        LastDeprDate := RetroEntry."Retrospective Calc. Date";

      IF LastDeprDate <> 0D THEN
        LastDeprDate := LastDeprDate + 1;

      StartingDate := FADateCalc.GetFiscalYearStartDate(DeprUntilDate);
      EndingDate := FADateCalc.GetFiscalYearEndDate(DeprUntilDate);
      IF LastDeprDate < StartingDate THEN
        StartingDate := LastDeprDate;

      IF FALedgerEntry."Shift Entry" THEN BEGIN
        IF FARetrospectiveBook."Proposed Depreciation Method" IN
           [FARetrospectiveBook."Proposed Depreciation Method"::"Straight-Line",
            FARetrospectiveBook."Proposed Depreciation Method"::"DB1/SL",
            FARetrospectiveBook."Proposed Depreciation Method"::"DB2/SL"]
        THEN
          FARetrospectiveBook.TESTFIELD("Proposed Straight-Line %");
        IF FARetrospectiveBook."Proposed Depreciation Method" IN
           [FARetrospectiveBook."Proposed Depreciation Method"::"Declining-Balance 1",
            FARetrospectiveBook."Proposed Depreciation Method"::"Declining-Balance 2",
            FARetrospectiveBook."Proposed Depreciation Method"::"DB1/SL",
            FARetrospectiveBook."Proposed Depreciation Method"::"DB2/SL"]
        THEN
          FARetrospectiveBook.TESTFIELD("Proposed Declining-Balance %");

        CalculateDepr.CalculateRetro(
          DeprAmount,NumberOfDays,FALedgerEntry."Depreciation Ending Date",EntryAmounts,0D,
          FALedgerEntry."No. of Depreciation Days",FARetrospectiveBook,FALedgerEntry,SLPercent,DBPercent);
        IF FALedgerEntry."No. of Depreciation Days" <> 0 THEN
          WrknDays += FALedgerEntry."No. of Depreciation Days"
        ELSE
          WrknDays += DepreciationCalc.DeprDays2(FALedgerEntry."Depreciation Starting Date",FALedgerEntry."Depreciation Ending Date");
        IF FALedgerEntry."Industry Type" = FALedgerEntry."Industry Type"::"Non Seasonal" THEN
          NonSeasonal := TRUE;
        IF FALedgerEntry."Industry Type" = FALedgerEntry."Industry Type"::Seasonal THEN
          Seasonal := TRUE;
      END ELSE
        EXIT(FALSE);
      IF (WrknDays > DeprBook."No. of Days Non Seasonal") AND NonSeasonal THEN
        ERROR(Text007,WrknDays,DeprBook.FIELDCAPTION("No. of Days Non Seasonal"),DeprBook.TABLECAPTION);
      IF (WrknDays > DeprBook."No. of Days Seasonal") AND Seasonal THEN
        ERROR(Text007,WrknDays,DeprBook.FIELDCAPTION("No. of Days Seasonal"),DeprBook.TABLECAPTION);
      EXIT(TRUE);
    END;

    PROCEDURE InsertRetrospectiveEntry@1500007();
    VAR
      EntryNo@1500001 : Integer;
    BEGIN
      WITH FALedgerEntry DO BEGIN
        RetrospectiveEntry.RESET;
        IF RetrospectiveEntry.FINDLAST THEN
          EntryNo := RetrospectiveEntry."Entry No." + 1
        ELSE
          EntryNo := 1;
        RetrospectiveEntry.INIT;
        RetrospectiveEntry."Entry No." := EntryNo;
        RetrospectiveEntry."FA No." := "FA No.";
        RetrospectiveEntry."Depreciation Calc Date" := "FA Posting Date";
        RetrospectiveEntry.Description := Description;
        RetrospectiveEntry."Depreciation Book Code" := "Depreciation Book";
        RetrospectiveEntry."FA Posting Type" := "FA Posting Type";
        IF RetrospectiveEntry."FA Posting Type" = RetrospectiveEntry."FA Posting Type"::Depreciation THEN
          RetrospectiveEntry."Proposed Depreciation Amount" := DeprAmount
        ELSE
          RetrospectiveEntry."Proposed Depreciation Amount" := Amount;
        RetrospectiveEntry."Part of Book Value" := "Part of Book Value";
        RetrospectiveEntry."Part of Depreciable Basis" := "Part of Depreciable Basis";
        RetrospectiveEntry."No. of Depreciation Days" := "No. of Depreciation Days";
        RetrospectiveEntry."FA Subclass Code" := "FA Subclass Code";
        RetrospectiveEntry."FA Location Code" := "FA Location Code";
        RetrospectiveEntry."FA Posting Group" := "FA Posting Group";
        RetrospectiveEntry."User ID" := "User ID";
        RetrospectiveEntry."Proposed Depreciation Method" := "Proposed Depreciation Method";
        RetrospectiveEntry."Depreciation Starting Date" := "Depreciation Starting Date";
        RetrospectiveEntry."No. of Depreciation Years" := "No. of Depreciation Years";
        RetrospectiveEntry."Fixed Depr. Amount" := "Fixed Depr. Amount";
        RetrospectiveEntry."Proposed Declining-Balance %" := DBPercent;
        RetrospectiveEntry."Proposed Straight-Line %" := SLPercent;
        RetrospectiveEntry."Retrospective Table Code" := "Depreciation Table Code";
        RetrospectiveEntry."Gen. Posting Type" := "Gen. Posting Type";
        RetrospectiveEntry."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        RetrospectiveEntry."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        RetrospectiveEntry."FA Class Code" := "FA Class Code";
        RetrospectiveEntry."Depreciation Ending Date" := "Depreciation Ending Date";
        RetrospectiveEntry."Shift Type" := "Shift Type";
        RetrospectiveEntry."Industry Type" := "Industry Type";
        RetrospectiveEntry."FA Ledger Entry No." := "Entry No.";
        RetrospectiveEntry."Shift Entry" := "Shift Entry";
        RetrospectiveEntry."Retrospective Calc. Date" := "Retrospective Calc. Date";
        RetrospectiveEntry.VALIDATE("Global Dimension 1 Code","Global Dimension 1 Code");
        RetrospectiveEntry.VALIDATE("Global Dimension 2 Code","Global Dimension 2 Code");
        RetrospectiveEntry."Dimension Set ID" := "Dimension Set ID";
        IF RetrospectiveEntry."Proposed Depreciation Amount" <> 0 THEN
          RetrospectiveEntry.INSERT(TRUE);
      END;
    END;

    PROCEDURE GetCalcPercent@1500002();
    BEGIN
      SLPercent := 0;
      DBPercent := 0;
      IF  "Proposed Depreciation Method" IN
         ["Proposed Depreciation Method"::"Straight-Line","Proposed Depreciation Method"::"DB1/SL",
          "Proposed Depreciation Method"::"DB2/SL"]
      THEN
        IF FARetrospectiveBook."Proposed Straight-Line %" <> 0 THEN
          SLPercent := FARetrospectiveBook."Proposed Straight-Line %";
      IF "Proposed Depreciation Method" IN
         ["Proposed Depreciation Method"::"Declining-Balance 1","Proposed Depreciation Method"::"Declining-Balance 2",
          "Proposed Depreciation Method"::"DB1/SL",
          "Proposed Depreciation Method"::"DB2/SL"]
      THEN
        IF FARetrospectiveBook."Proposed Declining-Balance %" <> 0 THEN
          DBPercent := FARetrospectiveBook."Proposed Declining-Balance %";
      IF (FARetrospectiveBook."Depreciation Starting Date" <> 0D) AND
         (FARetrospectiveBook."Depreciation Ending Date" <> 0D)
      THEN BEGIN
        DBPercent := 0;
        SLPercent := 0;
      END;
    END;

    PROCEDURE DeleteFARetrospectiveLine@1500009();
    VAR
      FARetroBook@1500000 : Record 16528;
    BEGIN
      FARetroBook.RESET;
      FARetroBook.RESET;
      FARetroBook.SETRANGE("Depreciation Book Code","Depreciation Book");
      FARetroBook.SETRANGE("Proposed Depreciation Method","Proposed Depreciation Method");
      IF "FA Class Code" <> '' THEN
        FARetroBook.SETRANGE("FA Class Code","FA Class Code");
      IF "FA Subclass Code" <> '' THEN
        FARetroBook.SETRANGE("FA Subclass Code","FA Subclass Code");
      FARetroBook.DELETEALL;
    END;

    PROCEDURE CalculateDeprAmont@1500005();
    BEGIN

      CLEAR(FALedgerEntry);
      FixedAsset2.RESET;
      IF "FA Class Code" <> '' THEN
        FixedAsset2.SETRANGE("FA Class Code","FA Class Code");
      IF "FA Subclass Code" <> '' THEN
        FixedAsset2.SETRANGE("FA Subclass Code","FA Subclass Code");
      IF "FA Filter" <> '' THEN
        FixedAsset2.SETRANGE("No.","FA Filter");
      IF FixedAsset2.FINDSET THEN
        REPEAT
          IF FADeprBook.GET(FixedAsset2."No.","Depreciation Book") THEN
            FixedAsset2.MARK := TRUE;
        UNTIL FixedAsset2.NEXT = 0;

      FixedAsset2.MARKEDONLY(TRUE);
      DepreciationValue := 0;
      IF FixedAsset2.FINDSET THEN
        REPEAT
          FALedgerEntry.RESET;
          FALedgerEntry.SETCURRENTKEY("FA No.","Depreciation Book Code","FA Posting Category","FA Posting Type","Posting Date");
          FALedgerEntry.SETRANGE("Depreciation Book Code","Depreciation Book");
          FALedgerEntry.SETRANGE("FA Posting Type",FALedgerEntry."FA Posting Type"::Depreciation);
          FALedgerEntry.SETRANGE("FA No.",FixedAsset2."No.");
          FALedgerEntry.CALCSUMS(Amount);
          DepreciationValue += FALedgerEntry.Amount;
        UNTIL FixedAsset2.NEXT = 0;
      "Depreciation Value" := DepreciationValue;
    END;

    PROCEDURE CalculateRetroAmont@1500010();
    BEGIN
      IF "Retrospective Calculated" THEN BEGIN
        RetrospectiveEntry.RESET;
        RetrospectiveEntry.SETCURRENTKEY("FA Posting Type","Proposed Depreciation Method",
          "FA Class Code","FA Subclass Code","Depreciation Book Code","FA No.");
        RetrospectiveEntry.SETRANGE("FA Posting Type",RetrospectiveEntry."FA Posting Type"::Depreciation);
        RetrospectiveEntry.SETRANGE("Proposed Depreciation Method","Proposed Depreciation Method");
        RetrospectiveEntry.SETRANGE("Depreciation Book Code","Depreciation Book");
        IF "FA Class Code" <> '' THEN
          RetrospectiveEntry.SETFILTER("FA Class Code","FA Class Code");
        IF "FA Subclass Code" <> '' THEN
          RetrospectiveEntry.SETFILTER("FA Subclass Code","FA Subclass Code");
        IF "FA Filter" <> '' THEN
          RetrospectiveEntry.SETFILTER("FA No.","FA Filter");
        RetrospectiveEntry.CALCSUMS("Proposed Depreciation Amount");
        "Retrospective Value" := RetrospectiveEntry."Proposed Depreciation Amount";
      END;
    END;

    BEGIN
    END.
  }
}

