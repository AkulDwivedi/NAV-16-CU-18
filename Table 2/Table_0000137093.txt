OBJECT Table 137093 Asm. Availability Test Buffer
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 2   ;   ;Document No.        ;Code20         }
    { 3   ;   ;Document Line No.   ;Integer        }
    { 4   ;   ;Item No.            ;Code20         }
    { 5   ;   ;Variant Code        ;Code10         }
    { 6   ;   ;Location Code       ;Code10         }
    { 7   ;   ;Unit of Measure Code;Code10         }
    { 8   ;   ;Quantity Per        ;Decimal        }
    { 9   ;   ;Quantity            ;Decimal        }
    { 10  ;   ;Inventory           ;Decimal       ;OnValidate=BEGIN
                                                                "Inventory Is Set" := TRUE;
                                                              END;
                                                               }
    { 11  ;   ;Gross Requirement   ;Decimal       ;OnValidate=BEGIN
                                                                "Gross Requirement is Set" := TRUE;
                                                              END;
                                                               }
    { 13  ;   ;Scheduled Receipts  ;Decimal       ;OnValidate=BEGIN
                                                                "Scheduled Receipts is Set" := TRUE;
                                                              END;
                                                               }
    { 14  ;   ;Expected Inventory  ;Decimal       ;OnValidate=BEGIN
                                                                "Expected Inventory is Set" := TRUE;
                                                              END;
                                                               }
    { 18  ;   ;Able To Assemble    ;Decimal       ;OnValidate=BEGIN
                                                                "Able To Assemble is Set" := TRUE;
                                                              END;
                                                               }
    { 19  ;   ;Earliest Availability Date;Date    ;OnValidate=BEGIN
                                                                "Earliest Avail. Date is Set" := TRUE;
                                                              END;
                                                               }
    { 20  ;   ;Inventory Is Set    ;Boolean        }
    { 21  ;   ;Gross Requirement is Set;Boolean    }
    { 23  ;   ;Scheduled Receipts is Set;Boolean   }
    { 24  ;   ;Expected Inventory is Set;Boolean   }
    { 28  ;   ;Able To Assemble is Set;Boolean     }
    { 29  ;   ;Earliest Avail. Date is Set;Boolean }
    { 30  ;   ;Description         ;Text50         }
  }
  KEYS
  {
    {    ;Document No.,Document Line No.          ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Assert@1000 : Codeunit 130000;
      WrongValueInHeaderErr@1001 : TextConst 'ENU=Wrong %1 in the header on the availability page.';
      WrongValueInLineErr@1002 : TextConst 'ENU=Wrong %1 in the line no. %2 on the availability page.';

    PROCEDURE ReadDataFromPage@2(VAR AsmAvailability@1000 : TestPage 908);
    BEGIN
      RESET;
      DELETEALL;

      INIT;
      ReadHeaderFromPage(AsmAvailability);
      INSERT;

      IF AsmAvailability.AssemblyLineAvail.FIRST THEN
        REPEAT
          INIT;
          ReadLineFromPage(AsmAvailability);
          INSERT;
        UNTIL NOT AsmAvailability.AssemblyLineAvail.NEXT;
    END;

    LOCAL PROCEDURE ReadHeaderFromPage@3(VAR AsmAvailability@1000 : TestPage 908);
    BEGIN
      "Document No." := AsmAvailability."No.".VALUE;
      "Document Line No." := 0;
      "Item No." := AsmAvailability."Item No.".VALUE;
      "Variant Code" := AsmAvailability."Variant Code".VALUE;
      "Location Code" := AsmAvailability."Location Code".VALUE;
      "Unit of Measure Code" := AsmAvailability."Unit of Measure Code".VALUE;
      Description := AsmAvailability.Description.VALUE;
      Quantity := AsmAvailability."Current Quantity".ASDECIMAL;
      Inventory := AsmAvailability.Inventory.ASDECIMAL;
      "Gross Requirement" := AsmAvailability.GrossRequirement.ASDECIMAL;
      "Scheduled Receipts" := AsmAvailability.ScheduledReceipts.ASDECIMAL;
      "Able To Assemble" := AsmAvailability.AbleToAssemble.ASDECIMAL;
      EVALUATE("Earliest Availability Date",AsmAvailability.EarliestAvailableDate.VALUE);
    END;

    LOCAL PROCEDURE ReadLineFromPage@4(VAR AsmAvailability@1000 : TestPage 908);
    BEGIN
      "Document No." := AsmAvailability."No.".VALUE;
      "Document Line No." += 1;
      "Item No." := AsmAvailability.AssemblyLineAvail."No.".VALUE;
      "Variant Code" := AsmAvailability.AssemblyLineAvail."Variant Code".VALUE;
      "Location Code" := AsmAvailability.AssemblyLineAvail."Location Code".VALUE;
      "Unit of Measure Code" := AsmAvailability.AssemblyLineAvail."Unit of Measure Code".VALUE;
      "Quantity Per" := AsmAvailability.AssemblyLineAvail."Quantity per".ASDECIMAL;
      Quantity := AsmAvailability.AssemblyLineAvail.CurrentQuantity.ASDECIMAL;
      "Gross Requirement" := AsmAvailability.AssemblyLineAvail.GrossRequirement.ASDECIMAL;
      "Scheduled Receipts" := AsmAvailability.AssemblyLineAvail.ScheduledReceipt.ASDECIMAL;
      "Expected Inventory" := AsmAvailability.AssemblyLineAvail.ExpectedAvailableInventory.ASDECIMAL;
      "Able To Assemble" := AsmAvailability.AssemblyLineAvail.AbleToAssemble.ASDECIMAL;
      EVALUATE("Earliest Availability Date",AsmAvailability.AssemblyLineAvail.EarliestAvailableDate.VALUE);
    END;

    PROCEDURE VerifyHeader@1(AssemblyHeader@1000 : Record 900;ExpAsmAvailTestBuf@1001 : Record 137093);
    BEGIN
      GET(AssemblyHeader."No.",0);
      VerifyCalcData(ExpAsmAvailTestBuf);
    END;

    PROCEDURE VerifyHeaderStatic@8(AssemblyHeader@1000 : Record 900);
    BEGIN
      GET(AssemblyHeader."No.",0);

      Assert.AreEqual(AssemblyHeader."Item No.","Item No.",STRSUBSTNO(WrongValueInHeaderErr,FIELDNAME("Item No.")));
      Assert.AreEqual(AssemblyHeader."Variant Code","Variant Code",STRSUBSTNO(WrongValueInHeaderErr,FIELDNAME("Variant Code")));
      Assert.AreEqual(AssemblyHeader."Location Code","Location Code",STRSUBSTNO(WrongValueInHeaderErr,FIELDNAME("Location Code")));
      Assert.AreEqual(
        AssemblyHeader."Unit of Measure Code","Unit of Measure Code",
        STRSUBSTNO(WrongValueInHeaderErr,FIELDNAME("Unit of Measure Code")));
      Assert.AreEqual(AssemblyHeader.Description,Description,STRSUBSTNO(WrongValueInHeaderErr,FIELDNAME(Description)));
      Assert.AreNearlyEqual(
        AssemblyHeader.Quantity - AssemblyHeader."Assembled Quantity",Quantity,0.0001,
        STRSUBSTNO(WrongValueInHeaderErr,FIELDNAME(Quantity)));
    END;

    PROCEDURE VerifyLine@5(AssemblyLine@1000 : Record 901;ExpAsmAvailTestBuf@1002 : Record 137093);
    BEGIN
      GET(AssemblyLine."Document No.",ExpAsmAvailTestBuf."Document Line No.");
      VerifyCalcData(ExpAsmAvailTestBuf);
    END;

    PROCEDURE VerifyLineStatic@7(AssemblyLine@1002 : Record 901;LineNo@1001 : Integer);
    BEGIN
      GET(AssemblyLine."Document No.",LineNo);

      Assert.AreEqual(AssemblyLine."No.","Item No.",STRSUBSTNO(WrongValueInLineErr,FIELDNAME("Item No."),LineNo));
      Assert.AreEqual(
        AssemblyLine."Quantity per","Quantity Per",STRSUBSTNO(WrongValueInLineErr,FIELDNAME("Quantity Per"),LineNo));
      Assert.AreEqual(
        AssemblyLine."Unit of Measure Code","Unit of Measure Code",
        STRSUBSTNO(WrongValueInLineErr,FIELDNAME("Quantity Per"),LineNo));
      Assert.AreEqual(
        AssemblyLine."Location Code","Location Code",
        STRSUBSTNO(WrongValueInLineErr,FIELDNAME("Location Code"),LineNo));
      Assert.AreEqual(
        AssemblyLine."Variant Code","Variant Code",
        STRSUBSTNO(WrongValueInLineErr,FIELDNAME("Variant Code"),LineNo));
    END;

    PROCEDURE VerifyCalcData@6(ExpAsmAvailTestBuf@1000 : Record 137093);
    VAR
      Err@1001 : Text;
    BEGIN
      IF ExpAsmAvailTestBuf."Document Line No." = 0 THEN
        Err := WrongValueInHeaderErr
      ELSE
        Err := STRSUBSTNO(WrongValueInLineErr,'%1',ExpAsmAvailTestBuf."Document Line No.");

      IF ExpAsmAvailTestBuf."Inventory Is Set" THEN
        Assert.AreEqual(ExpAsmAvailTestBuf.Inventory,Inventory,STRSUBSTNO(Err,FIELDNAME(Inventory)));
      IF ExpAsmAvailTestBuf."Gross Requirement is Set" THEN
        Assert.AreEqual(
          ExpAsmAvailTestBuf."Gross Requirement","Gross Requirement",
          STRSUBSTNO(Err,FIELDNAME("Gross Requirement")));
      IF ExpAsmAvailTestBuf."Scheduled Receipts is Set" THEN
        Assert.AreEqual(
          ExpAsmAvailTestBuf."Scheduled Receipts","Scheduled Receipts",
          STRSUBSTNO(Err,FIELDNAME("Scheduled Receipts")));
      IF ExpAsmAvailTestBuf."Expected Inventory is Set" THEN
        Assert.AreNearlyEqual(
          ExpAsmAvailTestBuf."Expected Inventory","Expected Inventory",0.0001,
          STRSUBSTNO(Err,FIELDNAME("Expected Inventory")));
      IF ExpAsmAvailTestBuf."Able To Assemble is Set" THEN
        Assert.AreNearlyEqual(
          ExpAsmAvailTestBuf."Able To Assemble","Able To Assemble",0.0001,
          STRSUBSTNO(Err,FIELDNAME("Able To Assemble")));
      IF ExpAsmAvailTestBuf."Earliest Avail. Date is Set" THEN
        Assert.AreEqual(
          ExpAsmAvailTestBuf."Earliest Availability Date","Earliest Availability Date",
          STRSUBSTNO(Err,FIELDNAME("Earliest Availability Date")));
    END;

    BEGIN
    END.
  }
}

