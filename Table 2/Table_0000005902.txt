OBJECT Table 5902 Service Line
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=NAVW19.00.00.49326,NAVIN9.00.00.49326,TFS225680;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF TempTrackingSpecification.FINDFIRST THEN
                 InsertItemTracking;

               IF Quantity <> 0 THEN
                 ReserveServLine.VerifyQuantity(Rec,xRec);

               IF Type = Type::Item THEN
                 IF ServHeader.InventoryPickConflict("Document Type","Document No.",ServHeader."Shipping Advice") THEN
                   DisplayConflictError(ServHeader.InvPickConflictResolutionTxt);

               IsCustCrLimitChecked := FALSE;
             END;

    OnModify=BEGIN
               IF "Document Type" = ServiceLine."Document Type"::Invoice THEN
                 CheckIfCanBeModified;

               IF "Spare Part Action" IN
                  ["Spare Part Action"::"Component Replaced",
                   "Spare Part Action"::"Component Installed",
                   "Spare Part Action"::" "]
               THEN BEGIN
                 IF (Type <> xRec.Type) OR ("No." <> xRec."No.") THEN
                   ReserveServLine.DeleteLine(Rec);
                 UpdateReservation(0);
               END;

               UpdateServiceLedgerEntry;
               IsCustCrLimitChecked := FALSE;
             END;

    OnDelete=VAR
               ServiceLine2@1000 : Record 5902;
               WhseValidateSourceLine@1001 : Codeunit 5777;
               StrOrderDetails@1500000 : Record 13794;
               StrOrderLine@1500001 : Record 13795;
               DetailTaxEntryBuffer@1500002 : Record 16480;
               DetailedGSTEntryBuffer@1500003 : Record 16412;
             BEGIN
               TestStatusOpen;
               IF Type = Type::Item THEN
                 WhseValidateSourceLine.ServiceLineDelete(Rec);
               IF Type IN [Type::"G/L Account",Type::Cost,Type::Resource] THEN
                 TESTFIELD("Qty. Shipped Not Invoiced",0);

               IF ("Document Type" = "Document Type"::Invoice) AND ("Appl.-to Service Entry" > 0) THEN
                 ERROR(Text045);

               IF (Quantity <> 0) AND ItemExists("No.") THEN BEGIN
                 ReserveServLine.DeleteLine(Rec);
                 CALCFIELDS("Reserved Qty. (Base)");
                 TESTFIELD("Reserved Qty. (Base)",0);
                 IF "Shipment No." = '' THEN
                   TESTFIELD("Qty. Shipped Not Invoiced",0);
               END;

               ReserveServLine.DeleteLine(Rec);
               IF (Type = Type::Item) AND Item.GET("No.") THEN
                 NonstockItemMgt.DelNonStockFSM(Rec);

               IF (Type <> Type::" ") AND
                  (("Contract No." <> '') OR
                   ("Shipment No." <> ''))
               THEN
                 UpdateServDocRegister(TRUE);

               IF "Line No." <> 0 THEN BEGIN
                 ServiceLine2.RESET;
                 ServiceLine2.SETRANGE("Document Type","Document Type");
                 ServiceLine2.SETRANGE("Document No.","Document No.");
                 ServiceLine2.SETRANGE("Attached to Line No.","Line No.");
                 ServiceLine2.SETFILTER("Line No.",'<>%1',"Line No.");
                 ServiceLine2.DELETEALL(TRUE);
               END;
               GetServHeader;

               StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Service);
               StrOrderDetails.SETRANGE("Document Type","Document Type");
               StrOrderDetails.SETRANGE("Document No.","Document No.");
               StrOrderDetails.SETRANGE("Document Line No.","Line No.");
               StrOrderDetails.SETRANGE("Price Inclusive of Tax",TRUE);
               StrOrderDetails.DELETEALL;

               StrOrderLine.SETRANGE(Type,StrOrderLine.Type::Service);
               StrOrderLine.SETRANGE("Document Type","Document Type");
               StrOrderLine.SETRANGE("Document No.","Document No.");
               StrOrderLine.SETRANGE("Line No.","Line No.");
               StrOrderLine.DELETEALL;

               DetailTaxEntryBuffer.SETRANGE("Document Type","Document Type");
               DetailTaxEntryBuffer.SETRANGE("Document No.","Document No.");
               DetailTaxEntryBuffer.SETRANGE("Line No.","Line No.");
               DetailTaxEntryBuffer.SETRANGE("Transaction Type",DetailTaxEntryBuffer."Transaction Type"::Sale);
               DetailTaxEntryBuffer.DELETEALL;

               DetailedGSTEntryBuffer.RESET;
               DetailedGSTEntryBuffer.SETRANGE("Transaction Type",DetailedGSTEntryBuffer."Transaction Type"::Service);
               DetailedGSTEntryBuffer.SETRANGE("Document Type","Document Type");
               DetailedGSTEntryBuffer.SETRANGE("Document No.","Document No.");
               DetailedGSTEntryBuffer.SETRANGE("Line No.","Line No.");
               DetailedGSTEntryBuffer.DELETEALL(TRUE);
             END;

    OnRename=BEGIN
               ERROR(Text002,TABLECAPTION);
             END;

    CaptionML=[ENU=Service Line;
               ENN=Service Line];
    LookupPageID=Page5904;
    DrillDownPageID=Page5904;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo;
                                                                    ENN=Quote,Order,Invoice,Credit Memo];
                                                   OptionString=Quote,Order,Invoice,Credit Memo }
    { 2   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Customer No.;
                                                              ENN=Customer No.];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Service Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   CaptionML=[ENU=Document No.;
                                                              ENN=Document No.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              ENN=Line No.] }
    { 5   ;   ;Type                ;Option        ;OnValidate=VAR
                                                                WhseValidateSourceLine@1000 : Codeunit 5777;
                                                              BEGIN
                                                                CheckIfCanBeModified;

                                                                GetServHeader;
                                                                TestStatusOpen;
                                                                TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Shipment No.",'');

                                                                IF xRec.Type = xRec.Type::Item THEN
                                                                  WhseValidateSourceLine.ServiceLineVerifyChange(Rec,xRec);

                                                                IF Type = Type::Item THEN BEGIN
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                END;

                                                                UpdateReservation(FIELDNO(Type));

                                                                ServiceLine := Rec;

                                                                IF "Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"] THEN
                                                                  UpdateServDocRegister(TRUE);
                                                                Clearfields;

                                                                "Currency Code" := ServiceLine."Currency Code";
                                                                VALIDATE("Service Item Line No.",ServiceLine."Service Item Line No.");

                                                                IF Type = Type::Item THEN BEGIN
                                                                  IF ServHeader.InventoryPickConflict("Document Type","Document No.",ServHeader."Shipping Advice") THEN
                                                                    DisplayConflictError(ServHeader.InvPickConflictResolutionTxt);
                                                                  IF ServHeader.WhseShpmntConflict("Document Type","Document No.",ServHeader."Shipping Advice") THEN
                                                                    DisplayConflictError(ServHeader.WhseShpmtConflictResolutionTxt);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              ENN=Type];
                                                   OptionCaptionML=[ENU=" ,Item,Resource,Cost,G/L Account";
                                                                    ENN=" ,Item,Resource,Cost,G/L Account"];
                                                   OptionString=[ ,Item,Resource,Cost,G/L Account] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item WHERE (Type=CONST(Inventory))
                                                                 ELSE IF (Type=CONST(Resource)) Resource
                                                                 ELSE IF (Type=CONST(Cost)) "Service Cost";
                                                   OnValidate=VAR
                                                                WhseValidateSourceLine@1001 : Codeunit 5777;
                                                              BEGIN
                                                                NoValidation;

                                                                "Location Code" := '';
                                                                IF Type = Type::Resource THEN
                                                                  "Location Code" := ServOrderMgt.FindResLocationCode("No.",ServHeader."Order Date");
                                                                IF "Location Code" = '' THEN
                                                                  "Location Code" := ServHeader."Location Code";
                                                                IF Type = Type::Item THEN BEGIN
                                                                  IF (xRec."No." <> "No.") AND (Quantity <> 0) THEN
                                                                    WhseValidateSourceLine.ServiceLineVerifyChange(Rec,xRec);
                                                                  GetLocation("Location Code");
                                                                END;
                                                                UpdateServiceTaxRegistrationNo;
                                                                "Gen. Bus. Posting Group" := ServHeader."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := ServHeader."VAT Bus. Posting Group";
                                                                "Tax Liable" := ServHeader."Tax Liable";
                                                                "Responsibility Center" := ServHeader."Responsibility Center";
                                                                "Posting Date" := ServHeader."Posting Date";
                                                                "Currency Code" := ServHeader."Currency Code";
                                                                IF "Service Item Line No." <> 0 THEN BEGIN
                                                                  ServItemLine.GET("Document Type","Document No.","Service Item Line No.");
                                                                  VALIDATE("Contract No.",ServItemLine."Contract No.")
                                                                END ELSE
                                                                  VALIDATE("Contract No.",ServHeader."Contract No.");
                                                                "Form Code" := ServHeader."Form Code";
                                                                "Form No." := ServHeader."Form No.";
                                                                VALIDATE("Excise Bus. Posting Group",ServHeader."Excise Bus. Posting Group");
                                                                "Free Supply" := ServHeader."Free Supply";

                                                                "Shipping Agent Code" := ServHeader."Shipping Agent Code";
                                                                "Shipping Agent Service Code" := ServHeader."Shipping Agent Service Code";
                                                                "Shipping Time" := ServHeader."Shipping Time";
                                                                "Invoice Type" := ServHeader."Invoice Type";

                                                                CALCFIELDS("Substitution Available");

                                                                CASE Type OF
                                                                  Type::" ":
                                                                    BEGIN
                                                                      IF StdTxt.GET("No.") THEN
                                                                        Description := StdTxt.Description;
                                                                    END;
                                                                  Type::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("No.");
                                                                      GLAcc.CheckGLAcc;
                                                                      IF NOT "System-Created Entry" THEN
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      Description := GLAcc.Name;
                                                                      "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := GLAcc."Tax Group Code";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Service Tax Group" := GLAcc."Service Tax Group Code";
                                                                      "HSN/SAC Code" := GLAcc."HSN/SAC Code";
                                                                      "GST Group Code" := GLAcc."GST Group Code";
                                                                      Exempted := GLAcc.Exempted;
                                                                      ServMgtSetup.GET;
                                                                      "GST Place Of Supply" := ServMgtSetup."GST Dependency Type";
                                                                      IF GSTGroup.GET("GST Group Code") THEN BEGIN
                                                                        IF GSTGroup."Reverse Charge" THEN
                                                                          ERROR(GSTGroupReverseChargeErr,"GST Group Code");
                                                                        "GST Group Type" := GSTGroup."GST Group Type";
                                                                        IF GSTGroup."GST Place Of Supply" <> GSTGroup."GST Place Of Supply"::" " THEN
                                                                        "GST Place Of Supply" := GSTGroup."GST Place Of Supply";
                                                                      END;
                                                                      IF ServHeader."Location Code" <> '' THEN BEGIN
                                                                        GetLocation(ServHeader."Location Code");
                                                                        "Service Tax Registration No." := Location."Service Tax Registration No.";
                                                                      END ELSE BEGIN
                                                                        GetCompanyInformation;
                                                                        "Service Tax Registration No." := CompanyInfo."Service Tax Registration No.";
                                                                      END;
                                                                      VALIDATE("Excise Prod. Posting Group",GLAcc."Excise Prod. Posting Group");
                                                                    END;
                                                                  Type::Cost:
                                                                    BEGIN
                                                                      ServCost.GET("No.");
                                                                      IF ServCost."Cost Type" = ServCost."Cost Type"::Travel THEN
                                                                        IF ServHeader."Service Zone Code" <> ServCost."Service Zone Code" THEN
                                                                          IF HideCostWarning = FALSE THEN
                                                                            IF NOT
                                                                               CONFIRM(
                                                                                 STRSUBSTNO(
                                                                                   Text004,ServCost.TABLECAPTION,"No.",
                                                                                   ServCost.FIELDCAPTION("Service Zone Code"),
                                                                                   ServHeader.FIELDCAPTION("Service Zone Code"),
                                                                                   ServHeader.TABLECAPTION,ServHeader."No."),FALSE)
                                                                            THEN
                                                                              ERROR(Text005);
                                                                      Description := ServCost.Description;
                                                                      VALIDATE("Unit Cost (LCY)",ServCost."Default Unit Cost");
                                                                      "Unit Price" := ServCost."Default Unit Price";
                                                                      "Unit of Measure Code" := ServCost."Unit of Measure Code";
                                                                      GLAcc.GET(ServCost."Account No.");
                                                                      GLAcc.TESTFIELD("Gen. Prod. Posting Group");
                                                                      "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := GLAcc."Tax Group Code";
                                                                      IF "Service Item Line No." <> 0 THEN
                                                                        IF FaultReasonCode.GET(ServItemLine."Fault Reason Code") AND
                                                                           (NOT FaultReasonCode."Exclude Warranty Discount")
                                                                        THEN
                                                                          VALIDATE("Fault Reason Code",ServItemLine."Fault Reason Code");
                                                                      IF ServCost."Service Tax Group Code" = '' THEN
                                                                        VALIDATE("Service Tax Group",GLAcc."Service Tax Group Code")
                                                                      ELSE
                                                                        VALIDATE("Service Tax Group",ServCost."Service Tax Group Code");

                                                                      IF ServHeader."Location Code" <> '' THEN BEGIN
                                                                        GetLocation(ServHeader."Location Code");
                                                                        "Service Tax Registration No." := Location."Service Tax Registration No.";
                                                                      END ELSE BEGIN
                                                                        GetCompanyInformation;
                                                                        "Service Tax Registration No." := CompanyInfo."Service Tax Registration No.";
                                                                      END;
                                                                      "HSN/SAC Code" := ServCost."HSN/SAC Code";
                                                                      "GST Group Code" := ServCost."GST Group Code";
                                                                      Exempted := ServCost.Exempted;
                                                                      ServMgtSetup.GET;
                                                                      "GST Place Of Supply" := ServMgtSetup."GST Dependency Type";
                                                                      IF GSTGroup.GET("GST Group Code") THEN BEGIN
                                                                        IF GSTGroup."Reverse Charge" THEN
                                                                          ERROR(GSTGroupReverseChargeErr,"GST Group Code");
                                                                        "GST Group Type" := GSTGroup."GST Group Type";
                                                                        IF GSTGroup."GST Place Of Supply" <> GSTGroup."GST Place Of Supply"::" " THEN
                                                                        "GST Place Of Supply" := GSTGroup."GST Place Of Supply";
                                                                      END;
                                                                      IF ServCost."Excise Prod. Posting Group" = '' THEN
                                                                        VALIDATE("Excise Prod. Posting Group",GLAcc."Excise Prod. Posting Group")
                                                                      ELSE
                                                                        VALIDATE("Excise Prod. Posting Group",ServCost."Excise Prod. Posting Group");

                                                                      Quantity := ServCost."Default Quantity"
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetItem;
                                                                      Item.TESTFIELD(Blocked,FALSE);
                                                                      Item.TESTFIELD("Inventory Posting Group");
                                                                      Item.TESTFIELD("Gen. Prod. Posting Group");
                                                                      Description := Item.Description;
                                                                      "Description 2" := Item."Description 2";
                                                                      GetUnitCost;
                                                                      "Allow Invoice Disc." := Item."Allow Invoice Disc.";
                                                                      "Units per Parcel" := Item."Units per Parcel";
                                                                      CALCFIELDS("Substitution Available");

                                                                      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := Item."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := Item."Tax Group Code";
                                                                      "Posting Group" := Item."Inventory Posting Group";
                                                                      "Item Category Code" := Item."Item Category Code";
                                                                      "Product Group Code" := Item."Product Group Code";
                                                                      "Variant Code" := '';
                                                                      Nonstock := Item."Created From Nonstock Item";
                                                                      "HSN/SAC Code" := Item."HSN/SAC Code";
                                                                      "GST Group Code" := Item."GST Group Code";
                                                                      Exempted := Item.Exempted;
                                                                      ServMgtSetup.GET;
                                                                      "GST Place Of Supply" := ServMgtSetup."GST Dependency Type";
                                                                      IF GSTGroup.GET("GST Group Code") THEN BEGIN
                                                                        IF GSTGroup."Reverse Charge" THEN
                                                                          ERROR(GSTGroupReverseChargeErr,"GST Group Code");
                                                                        "GST Group Type" := GSTGroup."GST Group Type";
                                                                        IF GSTGroup."GST Place Of Supply" <> GSTGroup."GST Place Of Supply"::" " THEN
                                                                        "GST Place Of Supply" := GSTGroup."GST Place Of Supply";
                                                                      END;
                                                                      IF ServHeader.Trading THEN BEGIN
                                                                        Item.TESTFIELD("Capital Item",FALSE);
                                                                        Item.TESTFIELD("Fixed Asset",FALSE);
                                                                      END;
                                                                      VALIDATE("Excise Prod. Posting Group",Item."Excise Prod. Posting Group");
                                                                      "Excise Accounting Type" := Item."Excise Accounting Type";
                                                                      IF "Free Supply" THEN
                                                                        "Line Discount %" := 100;

                                                                      IF ServHeader."Language Code" <> '' THEN
                                                                        GetItemTranslation;

                                                                      IF Item.Reserve = Item.Reserve::Optional THEN
                                                                        Reserve := ServHeader.Reserve
                                                                      ELSE
                                                                        Reserve := Item.Reserve;

                                                                      IF "Service Item Line No." <> 0 THEN BEGIN
                                                                        "Warranty Disc. %" := ServItemLine."Warranty % (Parts)";
                                                                        Warranty :=
                                                                          ServItemLine.Warranty AND
                                                                          (ServHeader."Order Date" >= ServItemLine."Warranty Starting Date (Parts)") AND
                                                                          (ServHeader."Order Date" <= ServItemLine."Warranty Ending Date (Parts)") AND
                                                                          NOT "Exclude Warranty";
                                                                        VALIDATE("Fault Reason Code",ServItemLine."Fault Reason Code");
                                                                      END ELSE BEGIN
                                                                        Warranty := FALSE;
                                                                        "Warranty Disc. %" := 0;
                                                                      END;

                                                                      IF ServItem.GET("Service Item No.") THEN
                                                                        IF ServItem."Item No." = "No." THEN BEGIN
                                                                          ServItemLine.RESET;
                                                                          IF NOT HideReplacementDialog THEN BEGIN
                                                                            ReplaceServItemAction := ReplaceServItem;
                                                                            IF NOT ReplaceServItemAction THEN
                                                                              EXIT;
                                                                          END;
                                                                        END ELSE BEGIN
                                                                          ServItem.CALCFIELDS("Service Item Components");
                                                                          IF ServItem."Service Item Components" AND
                                                                             NOT HideReplacementDialog
                                                                          THEN BEGIN
                                                                            Select := STRMENU(Text006,3);
                                                                            CASE Select OF
                                                                              1:
                                                                                BEGIN
                                                                                  COMMIT;
                                                                                  ServItemComponent.RESET;
                                                                                  ServItemComponent.SETRANGE(Active,TRUE);
                                                                                  ServItemComponent.SETRANGE("Parent Service Item No.",ServItem."No.");
                                                                                  IF PAGE.RUNMODAL(0,ServItemComponent) = ACTION::LookupOK THEN BEGIN
                                                                                    "Replaced Item Type" := ServItemComponent.Type + 1;
                                                                                    "Replaced Item No." := ServItemComponent."No.";
                                                                                    "Component Line No." := ServItemComponent."Line No.";
                                                                                    CheckIfServItemReplacement("Component Line No.");
                                                                                    IF ServItemComponent.Type = ServItemComponent.Type::"Service Item" THEN BEGIN
                                                                                      ServItem2.GET(ServItemComponent."No.");
                                                                                      "Warranty Disc. %" := ServItem2."Warranty % (Parts)";
                                                                                    END;
                                                                                    "Spare Part Action" := "Spare Part Action"::"Component Replaced";
                                                                                  END ELSE
                                                                                    ERROR(Text007,ServItemComponent.TABLECAPTION);
                                                                                END;
                                                                              2:
                                                                                BEGIN
                                                                                  "Replaced Item No." := '';
                                                                                  "Component Line No." := 0;
                                                                                  "Spare Part Action" := "Spare Part Action"::"Component Installed";
                                                                                END;
                                                                            END;
                                                                          END;
                                                                        END;
                                                                      "Unit of Measure Code" := Item."Sales Unit of Measure";
                                                                    END;
                                                                  Type::Resource:
                                                                    BEGIN
                                                                      Res.GET("No.");
                                                                      Res.TESTFIELD(Blocked,FALSE);
                                                                      Res.TESTFIELD("Gen. Prod. Posting Group");
                                                                      Description := Res.Name;
                                                                      "Description 2" := Res."Name 2";
                                                                      IF "Service Item Line No." <> 0 THEN BEGIN
                                                                        "Warranty Disc. %" := ServItemLine."Warranty % (Labor)";
                                                                        Warranty :=
                                                                          ServItemLine.Warranty AND
                                                                          (ServHeader."Order Date" >= ServItemLine."Warranty Starting Date (Labor)") AND
                                                                          (ServHeader."Order Date" <= ServItemLine."Warranty Ending Date (Labor)") AND
                                                                          NOT "Exclude Warranty";
                                                                        VALIDATE("Fault Reason Code",ServItemLine."Fault Reason Code");
                                                                      END ELSE BEGIN
                                                                        Warranty := FALSE;
                                                                        "Warranty Disc. %" := 0;
                                                                      END;
                                                                      "Unit of Measure Code" := Res."Base Unit of Measure";
                                                                      VALIDATE("Unit Cost (LCY)",Res."Unit Cost");
                                                                      "Gen. Prod. Posting Group" := Res."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := Res."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := Res."Tax Group Code";
                                                                      FindResUnitCost;
                                                                      "Service Tax Group" := Res."Service Tax Group Code";
                                                                      IF ServHeader."Location Code" <> '' THEN BEGIN
                                                                        GetLocation(ServHeader."Location Code");
                                                                        "Service Tax Registration No." := Location."Service Tax Registration No.";
                                                                      END ELSE BEGIN
                                                                        GetCompanyInformation;
                                                                        "Service Tax Registration No." := CompanyInfo."Service Tax Registration No.";
                                                                      END;
                                                                      "HSN/SAC Code" := Res."HSN/SAC Code";
                                                                      "GST Group Code" := Res."GST Group Code";
                                                                      Exempted := Res.Exempted;
                                                                      ServMgtSetup.GET;
                                                                      "GST Place Of Supply" := ServMgtSetup."GST Dependency Type";
                                                                      IF GSTGroup.GET("GST Group Code") THEN BEGIN
                                                                        IF GSTGroup."Reverse Charge" THEN
                                                                          ERROR(GSTGroupReverseChargeErr,"GST Group Code");
                                                                        "GST Group Type" := GSTGroup."GST Group Type";
                                                                        IF GSTGroup."GST Place Of Supply" <> GSTGroup."GST Place Of Supply"::" " THEN
                                                                        "GST Place Of Supply" := GSTGroup."GST Place Of Supply";
                                                                    END;
                                                                END;
                                                                END;

                                                                IF Type <> Type::" " THEN BEGIN
                                                                  VALIDATE("VAT Prod. Posting Group");
                                                                  VALIDATE("Unit of Measure Code");
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    InitOutstanding;
                                                                    IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                      InitQtyToInvoice
                                                                    ELSE
                                                                      InitQtyToShip;
                                                                    UpdateWithWarehouseShip;
                                                                  END;
                                                                  UpdateUnitPrice(FIELDNO("No."));
                                                                  AdjustMaxLabourUnitPrice("Unit Price");

                                                                  IF (Type <> Type::Cost) AND
                                                                     NOT ReplaceServItemAction
                                                                  THEN
                                                                    VALIDATE(Quantity,xRec.Quantity);
                                                                  UpdateAmounts;
                                                                END;

                                                                UpdateReservation(FIELDNO("No."));

                                                                GetDefaultBin;

                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID5(Type),"No.",
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Responsibility Center","Responsibility Center");

                                                                IF ServiceLine.GET("Document Type","Document No.","Line No.") THEN
                                                                  MODIFY;

                                                                GetStandardDeduction(ServHeader);
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=VAR
                                                                WhseValidateSourceLine@1000 : Codeunit 5777;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                UpdateWithWarehouseShip;
                                                                GetServHeader;
                                                                IF Type = Type::Item THEN BEGIN
                                                                  IF Quantity <> 0 THEN
                                                                    WhseValidateSourceLine.ServiceLineVerifyChange(Rec,xRec);
                                                                  IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                    TESTFIELD("Reserved Quantity",0);
                                                                    TESTFIELD("Shipment No.",'');
                                                                    TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                    CheckItemAvailable(FIELDNO("Location Code"));
                                                                    UpdateReservation(FIELDNO("Location Code"));
                                                                  END;
                                                                  GetUnitCost;
                                                                END;
                                                                GetDefaultBin;
                                                                TaxAreaUpdate;
                                                                UpdateServiceTaxRegistrationNo;
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 8   ;   ;Posting Group       ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              ENN=Posting Group];
                                                   Editable=No }
    { 11  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              ENN=Description 2] }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=[ENU=Unit of Measure;
                                                              ENN=Unit of Measure] }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                                WhseValidateSourceLine@1001 : Codeunit 5777;
                                                              BEGIN
                                                                GetServHeader;
                                                                TESTFIELD(Type);
                                                                TESTFIELD("No.");
                                                                TestStatusOpen;

                                                                IF Quantity < 0 THEN
                                                                  FIELDERROR(Quantity,Text029);

                                                                CASE "Spare Part Action" OF
                                                                  "Spare Part Action"::Permanent,"Spare Part Action"::"Temporary":
                                                                    IF Quantity <> 1 THEN
                                                                      ERROR(Text011,ServItem.TABLECAPTION);
                                                                  "Spare Part Action"::"Component Replaced","Spare Part Action"::"Component Installed":
                                                                    IF Quantity <> ROUND(Quantity,1) THEN
                                                                      ERROR(Text026,FIELDCAPTION(Quantity));
                                                                END;

                                                                "Quantity (Base)" := CalcBaseQty(Quantity);

                                                                IF "Document Type" <> "Document Type"::"Credit Memo" THEN BEGIN
                                                                  IF (Quantity * "Quantity Shipped" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Quantity Shipped")) AND ("Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Quantity Shipped")));
                                                                  IF ("Quantity (Base)" * "Qty. Shipped (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Qty. Shipped (Base)")) AND ("Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text003,FIELDCAPTION("Qty. Shipped (Base)")));
                                                                END;

                                                                IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
                                                                  InitOutstanding;
                                                                  IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                    InitQtyToInvoice
                                                                  ELSE
                                                                    InitQtyToShip;
                                                                END;
                                                                CheckItemAvailable(FIELDNO(Quantity));

                                                                IF (Quantity * xRec.Quantity < 0) OR (Quantity = 0) THEN
                                                                  InitItemAppl(FALSE);

                                                                IF Type = Type::Item THEN BEGIN
                                                                  WhseValidateSourceLine.ServiceLineVerifyChange(Rec,xRec);
                                                                  UpdateUnitPrice(FIELDNO(Quantity));
                                                                  UpdateReservation(FIELDNO(Quantity));
                                                                  UpdateWithWarehouseShip;
                                                                  IF ("Quantity (Base)" * xRec."Quantity (Base)" <= 0) AND ("No." <> '') THEN BEGIN
                                                                    GetItem;
                                                                    IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT IsShipment THEN
                                                                      GetUnitCost;
                                                                  END;
                                                                  IF ("Appl.-from Item Entry" <> 0) AND (xRec.Quantity < Quantity) THEN
                                                                    CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                                END ELSE
                                                                  VALIDATE("Line Discount %");

                                                                IF (xRec.Quantity <> Quantity) AND (Quantity = 0) AND
                                                                   ((Amount <> 0) OR
                                                                    ("Amount Including VAT" <> 0) OR
                                                                    ("VAT Base Amount" <> 0))
                                                                THEN BEGIN
                                                                  Amount := 0;
                                                                  "Amount Including VAT" := 0;
                                                                  "VAT Base Amount" := 0;
                                                                END;

                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  VALIDATE("Job Planning Line No.");

                                                                IF (xRec.Quantity <> Quantity) AND (Quantity = 0) AND
                                                                   (("Amount To Customer" <> 0) OR ("Service Tax Amount" <> 0))
                                                                THEN BEGIN
                                                                  "Service Tax Amount" := 0;
                                                                  "Service Tax eCess Amount" := 0;
                                                                  "Service Tax SHE Cess Amount" := 0;
                                                                  "Service Tax SBC Amount" := 0;
                                                                  "KK Cess Amount" := 0;
                                                                  "Amount To Customer" := 0;
                                                                  "Service Tax Base" := 0;
                                                                END;
                                                                TaxAreaUpdate;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              ENN=Quantity];
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;Outstanding Quantity;Decimal       ;CaptionML=[ENU=Outstanding Quantity;
                                                              ENN=Outstanding Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 17  ;   ;Qty. to Invoice     ;Decimal       ;OnValidate=BEGIN
                                                                GetServHeader;
                                                                IF GSTManagement.IsGSTApplicable(ServHeader.Structure) AND ("Qty. to Invoice" <> 0) THEN
                                                                  TESTFIELD("Quantity Consumed",0);

                                                                IF "Qty. to Invoice" < 0 THEN
                                                                  FIELDERROR("Qty. to Invoice",Text029);

                                                                IF "Qty. to Invoice" > 0 THEN BEGIN
                                                                  "Qty. to Consume" := 0;
                                                                  "Qty. to Consume (Base)" := 0;
                                                                END;

                                                                IF "Qty. to Invoice" = MaxQtyToInvoice THEN
                                                                  InitQtyToInvoice
                                                                ELSE
                                                                  "Qty. to Invoice (Base)" := CalcBaseQty("Qty. to Invoice");
                                                                IF ("Qty. to Invoice" * Quantity < 0) OR
                                                                   (ABS("Qty. to Invoice") > ABS(MaxQtyToInvoice))
                                                                THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    MaxQtyToInvoice);
                                                                IF ("Qty. to Invoice (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Qty. to Invoice (Base)") > ABS(MaxQtyToInvoiceBase))
                                                                THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    MaxQtyToInvoiceBase);
                                                                "VAT Difference" := 0;
                                                                CalcInvDiscToInvoice;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Qty. to Invoice;
                                                              ENN=Qty. to Invoice];
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Qty. to Ship        ;Decimal       ;OnValidate=BEGIN
                                                                IF "Qty. to Ship" < 0 THEN
                                                                  FIELDERROR("Qty. to Ship",Text029);

                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   ("Qty. to Ship" <> 0)
                                                                THEN
                                                                  CheckWarehouse;

                                                                IF "Qty. to Ship" = "Outstanding Quantity" THEN BEGIN
                                                                  IF NOT LineRequiresShipmentOrReceipt THEN
                                                                    InitQtyToShip
                                                                  ELSE
                                                                    "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
                                                                  IF "Qty. to Consume" <> 0 THEN
                                                                    VALIDATE("Qty. to Consume","Qty. to Ship")
                                                                  ELSE
                                                                    VALIDATE("Qty. to Consume",0);
                                                                END ELSE BEGIN
                                                                  "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
                                                                  IF "Qty. to Consume" <> 0 THEN
                                                                    VALIDATE("Qty. to Consume","Qty. to Ship")
                                                                  ELSE
                                                                    VALIDATE("Qty. to Consume",0);
                                                                END;
                                                                IF ((("Qty. to Ship" < 0) XOR (Quantity < 0)) AND (Quantity <> 0) AND ("Qty. to Ship" <> 0)) OR
                                                                   (ABS("Qty. to Ship") > ABS("Outstanding Quantity")) OR
                                                                   (((Quantity < 0) XOR ("Outstanding Quantity" < 0)) AND (Quantity <> 0) AND ("Outstanding Quantity" <> 0))
                                                                THEN
                                                                  ERROR(
                                                                    Text016,
                                                                    "Outstanding Quantity");
                                                                IF ((("Qty. to Ship (Base)" < 0) XOR ("Quantity (Base)" < 0)) AND ("Qty. to Ship (Base)" <> 0) AND ("Quantity (Base)" <> 0)) OR
                                                                   (ABS("Qty. to Ship (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                   ((("Quantity (Base)" < 0) XOR ("Outstanding Qty. (Base)" < 0)) AND ("Quantity (Base)" <> 0) AND ("Outstanding Qty. (Base)" <> 0))
                                                                THEN
                                                                  ERROR(
                                                                    Text017,
                                                                    "Outstanding Qty. (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship;
                                                              ENN=Qty. to Ship];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Unit Price          ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                GetServHeader;
                                                                IF ("Appl.-to Service Entry" > 0) AND (CurrFieldNo <> 0) THEN
                                                                  ERROR(Text052,FIELDCAPTION("Unit Price"));
                                                                IF ("Unit Price" > ServHeader."Max. Labor Unit Price") AND
                                                                   (Type = Type::Resource) AND
                                                                   (ServHeader."Max. Labor Unit Price" <> 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text022,
                                                                    FIELDCAPTION("Unit Price"),ServHeader.FIELDCAPTION("Max. Labor Unit Price"),
                                                                    ServHeader.TABLECAPTION);

                                                                VALIDATE("Line Discount %");
                                                              END;

                                                   CaptionML=[ENU=Unit Price;
                                                              ENN=Unit Price];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Unit Price")) }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;OnValidate=BEGIN
                                                                GetServHeader;
                                                                GetCurrency;
                                                                IF "Unit Cost (LCY)" <> xRec."Unit Cost (LCY)" THEN
                                                                  IF (CurrFieldNo = FIELDNO("Unit Cost (LCY)")) AND
                                                                     (Type = Type::Item) AND ("No." <> '') AND ("Quantity (Base)" <> 0)
                                                                  THEN BEGIN
                                                                    GetItem;
                                                                    IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT IsShipment THEN BEGIN
                                                                      IF "Document Type" IN ["Document Type"::"Credit Memo"] THEN
                                                                        ERROR(
                                                                          Text037,
                                                                          FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),
                                                                          Item."Costing Method",FIELDCAPTION(Quantity));
                                                                      ERROR(
                                                                        Text038,
                                                                        FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),
                                                                        Item."Costing Method",FIELDCAPTION(Quantity));
                                                                    END;
                                                                  END;

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  Currency.TESTFIELD("Unit-Amount Rounding Precision");
                                                                  "Unit Cost" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        GetDate,"Currency Code","Unit Cost (LCY)",
                                                                        ServHeader."Currency Factor"),Currency."Unit-Amount Rounding Precision")
                                                                END ELSE
                                                                  "Unit Cost" := "Unit Cost (LCY)";

                                                                UpdateRemainingCostsAndAmounts;
                                                              END;

                                                   CaptionML=[ENU=Unit Cost (LCY);
                                                              ENN=Unit Cost (LCY)];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              ENN=VAT %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Line Discount %") THEN
                                                                  TestStatusOpen;
                                                                GetServHeader;
                                                                IF (CurrFieldNo IN
                                                                    [FIELDNO("Line Discount %"),
                                                                     FIELDNO("Line Discount Amount"),
                                                                     FIELDNO("Line Amount")]) AND
                                                                   ("Document Type" <> "Document Type"::Invoice)
                                                                THEN
                                                                  CheckLineDiscount("Line Discount %");
                                                                IF "Free Supply" THEN
                                                                  "Line Discount %" := 100;

                                                                "Line Discount Amount" :=
                                                                  ROUND(
                                                                    ROUND(CalcChargeableQty * "Unit Price",Currency."Amount Rounding Precision") *
                                                                    "Line Discount %" / 100,Currency."Amount Rounding Precision");
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;

                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Line Discount %;
                                                              ENN=Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 28  ;   ;Line Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                GetServHeader;
                                                                TESTFIELD(Quantity);
                                                                IF "Line Discount Amount" <> xRec."Line Discount Amount" THEN
                                                                  IF ROUND(CalcChargeableQty * "Unit Price",Currency."Amount Rounding Precision") <> 0 THEN
                                                                    "Line Discount %" :=
                                                                      ROUND(
                                                                        "Line Discount Amount" /
                                                                        ROUND(CalcChargeableQty * "Unit Price",
                                                                          Currency."Amount Rounding Precision") * 100,0.00001)
                                                                  ELSE
                                                                    "Line Discount %" := 0;
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                VALIDATE("Line Discount %");
                                                              END;

                                                   CaptionML=[ENU=Line Discount Amount;
                                                              ENN=Line Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 29  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                GetServHeader;
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - ServHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        ROUND(Amount + "VAT Base Amount" * "VAT %" / 100,Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    IF Amount <> 0 THEN
                                                                      FIELDERROR(Amount,
                                                                        STRSUBSTNO(
                                                                          Text013,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      ServHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      "VAT Base Amount" := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        Amount +
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",ServHeader."Posting Date",
                                                                          "VAT Base Amount","Quantity (Base)",ServHeader."Currency Factor");
                                                                      IF "VAT Base Amount" <> 0 THEN
                                                                        "VAT %" :=
                                                                          ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;

                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Amount Including VAT;Decimal       ;OnValidate=BEGIN
                                                                GetServHeader;
                                                                "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      Amount :=
                                                                        ROUND(
                                                                          "Amount Including VAT" /
                                                                          (1 + (1 - ServHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                                                                          Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - ServHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      Amount := 0;
                                                                      "VAT Base Amount" := 0;
                                                                    END;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      ServHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      Amount :=
                                                                        SalesTaxCalculate.ReverseCalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",ServHeader."Posting Date",
                                                                          "Amount Including VAT","Quantity (Base)",ServHeader."Currency Factor");
                                                                      IF Amount <> 0 THEN
                                                                        "VAT %" :=
                                                                          ROUND(100 * ("Amount Including VAT" - Amount) / Amount,0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" := Amount;
                                                                    END;
                                                                END;

                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ENN=Amount Including VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Allow Invoice Disc." <> xRec."Allow Invoice Disc.") AND
                                                                   NOT "Allow Invoice Disc."
                                                                THEN BEGIN
                                                                  "Inv. Discount Amount" := 0;
                                                                  "Inv. Disc. Amount to Invoice" := 0;
                                                                  UpdateAmounts;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              ENN=Allow Invoice Disc.] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              ENN=Gross Weight];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              ENN=Net Weight];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              ENN=Units per Parcel];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              ENN=Unit Volume];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF "Appl.-to Item Entry" <> 0 THEN BEGIN
                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD(Quantity);

                                                                  ItemLedgEntry.GET("Appl.-to Item Entry");
                                                                  ItemLedgEntry.TESTFIELD(Positive,TRUE);
                                                                  VALIDATE("Unit Cost (LCY)",CalcUnitCost(ItemLedgEntry));
                                                                  "Location Code" := ItemLedgEntry."Location Code";
                                                                  IF NOT ItemLedgEntry.Open THEN
                                                                    MESSAGE(Text042,"Appl.-to Item Entry");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-to Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              ENN=Appl.-to Item Entry] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 42  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Item THEN
                                                                  UpdateUnitPrice(FIELDNO("Customer Price Group"));
                                                              END;

                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENN=Customer Price Group];
                                                   Editable=No }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job.No. WHERE (Bill-to Customer No.=FIELD(Bill-to Customer No.));
                                                   OnValidate=VAR
                                                                Job@1000 : Record 167;
                                                              BEGIN
                                                                TESTFIELD("Quantity Consumed",0);
                                                                VALIDATE("Job Task No.",'');

                                                                IF "Job No." <> '' THEN BEGIN
                                                                  Job.GET("Job No.");
                                                                  Job.TestBlocked;
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::Job,"Job No.",
                                                                  DimMgt.TypeToTableID5(Type),"No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Job No.;
                                                              ENN=Job No.] }
    { 46  ;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Consumed",0);
                                                                IF "Job Task No." = '' THEN
                                                                  "Job Line Type" := "Job Line Type"::" ";

                                                                IF "Job Task No." <> xRec."Job Task No." THEN
                                                                  VALIDATE("Job Planning Line No.",0);
                                                              END;

                                                   CaptionML=[ENU=Job Task No.;
                                                              ENN=Job Task No.] }
    { 47  ;   ;Job Line Type       ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("Quantity Consumed",0);
                                                                TESTFIELD("Job No.");
                                                                TESTFIELD("Job Task No.");
                                                                IF "Job Planning Line No." <> 0 THEN
                                                                  ERROR(Text048,FIELDCAPTION("Job Line Type"),FIELDCAPTION("Job Planning Line No."));
                                                              END;

                                                   CaptionML=[ENU=Job Line Type;
                                                              ENN=Job Line Type];
                                                   OptionCaptionML=[ENU=" ,Schedule,Contract,Both Schedule and Contract";
                                                                    ENN=" ,Schedule,Contract,Both Schedule and Contract"];
                                                   OptionString=[ ,Schedule,Contract,Both Schedule and Contract] }
    { 52  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Resource THEN BEGIN
                                                                  TestStatusOpen;
                                                                  IF WorkType.GET("Work Type Code") THEN
                                                                    VALIDATE("Unit of Measure Code",WorkType."Unit of Measure Code");
                                                                  UpdateUnitPrice(FIELDNO("Work Type Code"));
                                                                  VALIDATE("Unit Price");
                                                                  FindResUnitCost;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Work Type Code;
                                                              ENN=Work Type Code] }
    { 57  ;   ;Outstanding Amount  ;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetServHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF ServHeader."Currency Code" <> '' THEN
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Outstanding Amount",ServHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND("Outstanding Amount",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Outstanding Amount;
                                                              ENN=Outstanding Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 58  ;   ;Qty. Shipped Not Invoiced;Decimal  ;CaptionML=[ENU=Qty. Shipped Not Invoiced;
                                                              ENN=Qty. Shipped Not Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 59  ;   ;Shipped Not Invoiced;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetServHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF ServHeader."Currency Code" <> '' THEN
                                                                  "Shipped Not Invoiced (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Shipped Not Invoiced",ServHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Shipped Not Invoiced (LCY)" :=
                                                                    ROUND("Shipped Not Invoiced",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[ENU=Shipped Not Invoiced;
                                                              ENN=Shipped Not Invoiced];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Quantity Shipped    ;Decimal       ;CaptionML=[ENU=Quantity Shipped;
                                                              ENN=Quantity Shipped];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=[ENU=Quantity Invoiced;
                                                              ENN=Quantity Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 63  ;   ;Shipment No.        ;Code20        ;OnValidate=BEGIN
                                                                IF "Shipment No." <> xRec."Shipment No." THEN BEGIN
                                                                  IF "Shipment No." <> '' THEN BEGIN
                                                                    GetServHeader;
                                                                    IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                      CLEAR(ServShptHeader);
                                                                      ServShptHeader.SETCURRENTKEY("Customer No.","Posting Date");
                                                                      ServShptHeader.SETRANGE("Customer No.",ServHeader."Customer No.");
                                                                      ServShptHeader.SETRANGE("Ship-to Code",ServHeader."Ship-to Code");
                                                                      ServShptHeader.SETRANGE("Bill-to Customer No.",ServHeader."Bill-to Customer No.");
                                                                      ServShptHeader.SETRANGE("No.","Shipment No.");
                                                                      ServShptHeader.FINDFIRST;
                                                                    END;
                                                                  END;
                                                                  TESTFIELD("Appl.-to Service Entry",0);
                                                                  CLEAR(ServDocReg);
                                                                  ServDocReg.SETRANGE("Destination Document Type","Document Type");
                                                                  ServDocReg.SETRANGE("Destination Document No.","Document No.");
                                                                  ServDocReg.SETRANGE("Source Document Type",ServDocReg."Source Document Type"::Order);
                                                                  ServDocReg.SETRANGE("Source Document No.",xRec."Shipment No.");
                                                                  ServDocReg.DELETEALL;
                                                                  CLEAR(ServDocReg);
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              GetServHeader;
                                                              IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                CLEAR(ServShptHeader);
                                                                ServShptHeader.SETCURRENTKEY("Customer No.","Posting Date");
                                                                ServShptHeader.FILTERGROUP(2);
                                                                ServShptHeader.SETRANGE("Customer No.",ServHeader."Customer No.");
                                                                ServShptHeader.SETRANGE("Ship-to Code",ServHeader."Ship-to Code");
                                                                ServShptHeader.SETRANGE("Bill-to Customer No.",ServHeader."Bill-to Customer No.");
                                                                ServShptHeader.FILTERGROUP(0);
                                                                ServShptHeader."No." := "Shipment No.";
                                                                IF PAGE.RUNMODAL(0,ServShptHeader) = ACTION::LookupOK THEN
                                                                  VALIDATE("Shipment No.",ServShptHeader."No.");
                                                              END
                                                            END;

                                                   CaptionML=[ENU=Shipment No.;
                                                              ENN=Shipment No.] }
    { 64  ;   ;Shipment Line No.   ;Integer       ;CaptionML=[ENU=Shipment Line No.;
                                                              ENN=Shipment Line No.];
                                                   Editable=No }
    { 68  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENN=Bill-to Customer No.];
                                                   Editable=No }
    { 69  ;   ;Inv. Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Quantity);
                                                                CalcInvDiscToInvoice;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Inv. Discount Amount;
                                                              ENN=Inv. Discount Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Gen. Bus. Posting Group" <> xRec."Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 75  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Gen. Prod. Posting Group" <> xRec."Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              ENN=Gen. Prod. Posting Group] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              ENN=VAT Calculation Type];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    ENN=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Type] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Service Line"."Line No." WHERE (Document Type=FIELD(Document Type),
                                                                                                  Document No.=FIELD(Document No.));
                                                   CaptionML=[ENU=Attached to Line No.;
                                                              ENN=Attached to Line No.];
                                                   Editable=No }
    { 81  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              ENN=Exit Point] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=Tax Area Code] }
    { 86  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ENN=Tax Liable] }
    { 87  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                                ValidateTaxGroupCode;
                                                              END;

                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENN=Tax Group Code] }
    { 88  ;   ;VAT Clause Code     ;Code10        ;TableRelation="VAT Clause";
                                                   CaptionML=[ENU=VAT Clause Code;
                                                              ENN=VAT Clause Code] }
    { 89  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 90  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                GetServHeader;
                                                                VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                "VAT Difference" := 0;
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                "VAT Clause Code" := VATPostingSetup."VAT Clause Code";
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    "VAT %" := 0;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    TESTFIELD(Type,Type::Cost);
                                                                END;

                                                                IF ServHeader."Prices Including VAT" AND (Type IN [Type::Item,Type::Resource]) THEN
                                                                  "Unit Price" :=
                                                                    ROUND(
                                                                      "Unit Price" * (100 + "VAT %") / (100 + xRec."VAT %"),
                                                                      Currency."Unit-Amount Rounding Precision");
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              ENN=VAT Prod. Posting Group] }
    { 91  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code];
                                                   Editable=No }
    { 92  ;   ;Outstanding Amount (LCY);Decimal   ;CaptionML=[ENU=Outstanding Amount (LCY);
                                                              ENN=Outstanding Amount (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 93  ;   ;Shipped Not Invoiced (LCY);Decimal ;CaptionML=[ENU=Shipped Not Invoiced (LCY);
                                                              ENN=Shipped Not Invoiced (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 95  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                        Source Ref. No.=FIELD(Line No.),
                                                                                                        Source Type=CONST(5902),
                                                                                                        Source Subtype=FIELD(Document Type),
                                                                                                        Reservation Status=CONST(Reservation)));
                                                   CaptionML=[ENU=Reserved Quantity;
                                                              ENN=Reserved Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 96  ;   ;Reserve             ;Option        ;OnValidate=BEGIN
                                                                IF Reserve <> Reserve::Never THEN BEGIN
                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD("No.");
                                                                END;
                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                IF (Reserve = Reserve::Never) AND ("Reserved Qty. (Base)" > 0) THEN
                                                                  TESTFIELD("Reserved Qty. (Base)",0);

                                                                IF xRec.Reserve = Reserve::Always THEN BEGIN
                                                                  GetItem;
                                                                  IF Item.Reserve = Item.Reserve::Always THEN
                                                                    TESTFIELD(Reserve,Reserve::Always);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Reserve;
                                                              ENN=Reserve];
                                                   OptionCaptionML=[ENU=Never,Optional,Always;
                                                                    ENN=Never,Optional,Always];
                                                   OptionString=Never,Optional,Always }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[ENU=VAT Base Amount;
                                                              ENN=VAT Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              ENN=Unit Cost];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              ENN=System-Created Entry];
                                                   Editable=No }
    { 103 ;   ;Line Amount         ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type);
                                                                TESTFIELD(Quantity);
                                                                TESTFIELD("Unit Price");
                                                                GetCurrency;
                                                                "Line Amount" := ROUND("Line Amount",Currency."Amount Rounding Precision");
                                                                VALIDATE(
                                                                  "Line Discount Amount",
                                                                  ROUND(CalcChargeableQty * "Unit Price",
                                                                    Currency."Amount Rounding Precision") - "Line Amount");
                                                              END;

                                                   CaptionML=[ENU=Line Amount;
                                                              ENN=Line Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Line Amount")) }
    { 104 ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              ENN=VAT Difference];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 105 ;   ;Inv. Disc. Amount to Invoice;Decimal;
                                                   CaptionML=[ENU=Inv. Disc. Amount to Invoice;
                                                              ENN=Inv. Disc. Amount to Invoice];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;VAT Identifier      ;Code10        ;CaptionML=[ENU=VAT Identifier;
                                                              ENN=VAT Identifier];
                                                   Editable=No }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 950 ;   ;Time Sheet No.      ;Code20        ;TableRelation="Time Sheet Header";
                                                   CaptionML=[ENU=Time Sheet No.;
                                                              ENN=Time Sheet No.] }
    { 951 ;   ;Time Sheet Line No. ;Integer       ;TableRelation="Time Sheet Line"."Line No." WHERE (Time Sheet No.=FIELD(Time Sheet No.));
                                                   CaptionML=[ENU=Time Sheet Line No.;
                                                              ENN=Time Sheet Line No.] }
    { 952 ;   ;Time Sheet Date     ;Date          ;TableRelation="Time Sheet Detail".Date WHERE (Time Sheet No.=FIELD(Time Sheet No.),
                                                                                                 Time Sheet Line No.=FIELD(Time Sheet Line No.));
                                                   CaptionML=[ENU=Time Sheet Date;
                                                              ENN=Time Sheet Date] }
    { 1019;   ;Job Planning Line No.;Integer      ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                              BEGIN
                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  JobPlanningLine.TESTFIELD("Job No.","Job No.");
                                                                  JobPlanningLine.TESTFIELD("Job Task No.","Job Task No.");
                                                                  CASE Type OF
                                                                    Type::Resource:
                                                                      JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::Resource);
                                                                    Type::Item:
                                                                      JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::Item);
                                                                    Type::"G/L Account":
                                                                      JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::"G/L Account");
                                                                  END;
                                                                  JobPlanningLine.TESTFIELD("No.","No.");
                                                                  JobPlanningLine.TESTFIELD("Usage Link",TRUE);
                                                                  JobPlanningLine.TESTFIELD("System-Created Entry",FALSE);
                                                                  "Job Line Type" := JobPlanningLine."Line Type" + 1;
                                                                  VALIDATE("Job Remaining Qty.",JobPlanningLine."Remaining Qty." - Quantity);
                                                                END ELSE
                                                                  VALIDATE("Job Remaining Qty.",0);
                                                              END;

                                                   OnLookup=VAR
                                                              JobPlanningLine@1000 : Record 1003;
                                                            BEGIN
                                                              JobPlanningLine.SETRANGE("Job No.","Job No.");
                                                              JobPlanningLine.SETRANGE("Job Task No.","Job Task No.");
                                                              CASE Type OF
                                                                Type::"G/L Account":
                                                                  JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::"G/L Account");
                                                                Type::Item:
                                                                  JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::Item);
                                                              END;
                                                              JobPlanningLine.SETRANGE("No.","No.");
                                                              JobPlanningLine.SETRANGE("Usage Link",TRUE);
                                                              JobPlanningLine.SETRANGE("System-Created Entry",FALSE);

                                                              IF PAGE.RUNMODAL(0,JobPlanningLine) = ACTION::LookupOK THEN
                                                                VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
                                                            END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Planning Line No.;
                                                              ENN=Job Planning Line No.];
                                                   BlankZero=Yes }
    { 1030;   ;Job Remaining Qty.  ;Decimal       ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record 1003;
                                                              BEGIN
                                                                IF ("Job Remaining Qty." <> 0) AND ("Job Planning Line No." = 0) THEN
                                                                  ERROR(Text047,FIELDCAPTION("Job Remaining Qty."),FIELDCAPTION("Job Planning Line No."));

                                                                IF "Job Planning Line No." <> 0 THEN BEGIN
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  IF JobPlanningLine.Quantity >= 0 THEN BEGIN
                                                                    IF "Job Remaining Qty." < 0 THEN
                                                                      "Job Remaining Qty." := 0;
                                                                  END ELSE BEGIN
                                                                    IF "Job Remaining Qty." > 0 THEN
                                                                      "Job Remaining Qty." := 0;
                                                                  END;
                                                                END;
                                                                "Job Remaining Qty. (Base)" := CalcBaseQty("Job Remaining Qty.");

                                                                UpdateRemainingCostsAndAmounts;
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Remaining Qty.;
                                                              ENN=Job Remaining Qty.];
                                                   DecimalPlaces=0:5 }
    { 1031;   ;Job Remaining Qty. (Base);Decimal  ;CaptionML=[ENU=Job Remaining Qty. (Base);
                                                              ENN=Job Remaining Qty. (Base)] }
    { 1032;   ;Job Remaining Total Cost;Decimal   ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Remaining Total Cost;
                                                              ENN=Job Remaining Total Cost];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 1033;   ;Job Remaining Total Cost (LCY);Decimal;
                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Remaining Total Cost (LCY);
                                                              ENN=Job Remaining Total Cost (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1034;   ;Job Remaining Line Amount;Decimal  ;AccessByPermission=TableData 167=R;
                                                   CaptionML=[ENU=Job Remaining Line Amount;
                                                              ENN=Job Remaining Line Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   OnValidate=VAR
                                                                WhseValidateSourceLine@1000 : Codeunit 5777;
                                                              BEGIN
                                                                IF "Variant Code" <> '' THEN
                                                                  TESTFIELD(Type,Type::Item);
                                                                TestStatusOpen;

                                                                IF xRec."Variant Code" <> "Variant Code" THEN BEGIN
                                                                  TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                  TESTFIELD("Shipment No.",'');
                                                                  InitItemAppl(FALSE);
                                                                END;

                                                                CheckItemAvailable(FIELDNO("Variant Code"));
                                                                UpdateReservation(FIELDNO("Variant Code"));

                                                                IF Type = Type::Item THEN BEGIN
                                                                  GetUnitCost;
                                                                  UpdateUnitPrice(FIELDNO("Variant Code"));
                                                                  WhseValidateSourceLine.ServiceLineVerifyChange(Rec,xRec);
                                                                END;

                                                                GetDefaultBin;

                                                                IF "Variant Code" = '' THEN BEGIN
                                                                  IF Type = Type::Item THEN BEGIN
                                                                    Item.GET("No.");
                                                                    Description := Item.Description;
                                                                    "Description 2" := Item."Description 2";
                                                                    GetItemTranslation;
                                                                  END;
                                                                  EXIT;
                                                                END;

                                                                ItemVariant.GET("No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                                "Description 2" := ItemVariant."Description 2";

                                                                GetServHeader;
                                                                IF ServHeader."Language Code" <> '' THEN
                                                                  GetItemTranslation;
                                                              END;

                                                   CaptionML=[ENU=Variant Code;
                                                              ENN=Variant Code] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=IF (Document Type=FILTER(Order|Invoice),
                                                                     Location Code=FILTER(<>''),
                                                                     Type=CONST(Item)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                       Item No.=FIELD(No.),
                                                                                                                       Variant Code=FIELD(Variant Code))
                                                                                                                       ELSE IF (Document Type=FILTER(Credit Memo),
                                                                                                                                Location Code=FILTER(<>''),
                                                                                                                                Type=CONST(Item)) Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WMSManagement@1000 : Codeunit 7302;
                                                                WhseIntegrationManagement@1003 : Codeunit 7317;
                                                              BEGIN
                                                                TESTFIELD("Location Code");
                                                                TESTFIELD(Type,Type::Item);

                                                                IF "Bin Code" <> '' THEN
                                                                  IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
                                                                    WMSManagement.FindBinContent("Location Code","Bin Code","No.","Variant Code",'')
                                                                  ELSE
                                                                    IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                      WMSManagement.FindBin("Location Code","Bin Code",'');

                                                                IF xRec."Bin Code" <> "Bin Code" THEN BEGIN
                                                                  TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                  TESTFIELD("Shipment No.",'');
                                                                END;

                                                                IF "Bin Code" <> '' THEN
                                                                  WhseIntegrationManagement.CheckBinTypeCode(
                                                                    DATABASE::"Service Line",
                                                                    FIELDCAPTION("Bin Code"),
                                                                    "Location Code",
                                                                    "Bin Code",
                                                                    "Document Type");
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1001 : Codeunit 7302;
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              TESTFIELD("Location Code");
                                                              TESTFIELD(Type,Type::Item);

                                                              IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice] THEN
                                                                BinCode := WMSManagement.BinContentLookUp("Location Code","No.","Variant Code",'',"Bin Code")
                                                              ELSE
                                                                IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                  BinCode := WMSManagement.BinLookUp("Location Code","No.","Variant Code",'');

                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=[ENU=Bin Code;
                                                              ENN=Bin Code] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              ENN=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5405;   ;Planned             ;Boolean       ;CaptionML=[ENU=Planned;
                                                              ENN=Planned];
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE IF (Type=CONST(Resource)) "Resource Unit of Measure".Code WHERE (Resource No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   OnValidate=VAR
                                                                UnitOfMeasureTranslation@1000 : Record 5402;
                                                                ResUnitofMeasure@1001 : Record 205;
                                                                WhseValidateSourceLine@1002 : Codeunit 5777;
                                                              BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Qty. Shipped (Base)",0);
                                                                TestStatusOpen;

                                                                IF "Unit of Measure Code" = '' THEN
                                                                  "Unit of Measure" := ''
                                                                ELSE BEGIN
                                                                  IF NOT UnitOfMeasure.GET("Unit of Measure Code") THEN
                                                                    UnitOfMeasure.INIT;
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                  GetServHeader;
                                                                  IF ServHeader."Language Code" <> '' THEN BEGIN
                                                                    UnitOfMeasureTranslation.SETRANGE(Code,"Unit of Measure Code");
                                                                    UnitOfMeasureTranslation.SETRANGE("Language Code",ServHeader."Language Code");
                                                                    IF UnitOfMeasureTranslation.FINDFIRST THEN
                                                                      "Unit of Measure" := UnitOfMeasureTranslation.Description;
                                                                  END;
                                                                END;

                                                                CASE Type OF
                                                                  Type::Item:
                                                                    BEGIN
                                                                      IF Quantity <> 0 THEN
                                                                        WhseValidateSourceLine.ServiceLineVerifyChange(Rec,xRec);
                                                                      GetItem;
                                                                      GetUnitCost;
                                                                      UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
                                                                      "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
                                                                      "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
                                                                      "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
                                                                      "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
                                                                      IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN
                                                                        InitItemAppl(FALSE);
                                                                    END;
                                                                  Type::Resource:
                                                                    BEGIN
                                                                      IF "Unit of Measure Code" = '' THEN BEGIN
                                                                        GetResource;
                                                                        "Unit of Measure Code" := Resource."Base Unit of Measure";
                                                                        IF UnitOfMeasure.GET("Unit of Measure Code") THEN
                                                                          "Unit of Measure" := UnitOfMeasure.Description;
                                                                      END;
                                                                      ResUnitofMeasure.GET("No.","Unit of Measure Code");
                                                                      "Qty. per Unit of Measure" := ResUnitofMeasure."Qty. per Unit of Measure";
                                                                      UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
                                                                      FindResUnitCost;
                                                                    END;
                                                                  Type::"G/L Account",Type::" ",Type::Cost:
                                                                    "Qty. per Unit of Measure" := 1;
                                                                END;

                                                                VALIDATE(Quantity);
                                                                CheckItemAvailable(FIELDNO("Unit of Measure Code"));
                                                                UpdateReservation(FIELDNO("Unit of Measure Code"));
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              ENN=Unit of Measure Code] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Quantity (Base)" < 0 THEN
                                                                  FIELDERROR("Quantity (Base)",Text029);

                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                                UpdateUnitPrice(FIELDNO("Quantity (Base)"));
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              ENN=Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 5416;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=[ENU=Outstanding Qty. (Base);
                                                              ENN=Outstanding Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5417;   ;Qty. to Invoice (Base);Decimal     ;OnValidate=BEGIN
                                                                IF "Qty. to Invoice (Base)" < 0 THEN
                                                                  FIELDERROR("Qty. to Invoice (Base)",Text029);

                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Invoice","Qty. to Invoice (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Invoice (Base);
                                                              ENN=Qty. to Invoice (Base)];
                                                   DecimalPlaces=0:5 }
    { 5418;   ;Qty. to Ship (Base) ;Decimal       ;OnValidate=BEGIN
                                                                IF "Qty. to Ship (Base)" < 0 THEN
                                                                  FIELDERROR("Qty. to Ship (Base)",Text029);

                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Ship","Qty. to Ship (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship (Base);
                                                              ENN=Qty. to Ship (Base)];
                                                   DecimalPlaces=0:5 }
    { 5458;   ;Qty. Shipped Not Invd. (Base);Decimal;
                                                   CaptionML=[ENU=Qty. Shipped Not Invd. (Base);
                                                              ENN=Qty. Shipped Not Invd. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5460;   ;Qty. Shipped (Base) ;Decimal       ;CaptionML=[ENU=Qty. Shipped (Base);
                                                              ENN=Qty. Shipped (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=[ENU=Qty. Invoiced (Base);
                                                              ENN=Qty. Invoiced (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5495;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                 Source Ref. No.=FIELD(Line No.),
                                                                                                                 Source Type=CONST(5902),
                                                                                                                 Source Subtype=FIELD(Document Type),
                                                                                                                 Reservation Status=CONST(Reservation)));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure");
                                                                CALCFIELDS("Reserved Quantity");
                                                                Planned := "Reserved Quantity" = "Outstanding Quantity";
                                                              END;

                                                   CaptionML=[ENU=Reserved Qty. (Base);
                                                              ENN=Reserved Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DimMgt.TypeToTableID5(Type),"No.",
                                                                  DATABASE::Job,"Job No.");
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Center];
                                                   Editable=No }
    { 5702;   ;Substitution Available;Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Item Substitution" WHERE (Type=CONST(Item),
                                                                                                No.=FIELD(No.),
                                                                                                Substitute Type=CONST(Item)));
                                                   CaptionML=[ENU=Substitution Available;
                                                              ENN=Substitution Available];
                                                   Editable=No }
    { 5709;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=[ENU=Item Category Code;
                                                              ENN=Item Category Code] }
    { 5710;   ;Nonstock            ;Boolean       ;CaptionML=[ENU=Nonstock;
                                                              ENN=Nonstock];
                                                   Editable=No }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              ENN=Product Group Code] }
    { 5750;   ;Whse. Outstanding Qty. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(5902),
                                                                                                                              Source Subtype=FIELD(Document Type),
                                                                                                                              Source No.=FIELD(Document No.),
                                                                                                                              Source Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Whse. Outstanding Qty. (Base);
                                                              ENN=Whse. Outstanding Qty. (Base)];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;CaptionML=[ENU=Completely Shipped;
                                                              ENN=Completely Shipped];
                                                   Editable=No }
    { 5790;   ;Requested Delivery Date;Date       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Requested Delivery Date" <> xRec."Requested Delivery Date") AND
                                                                   ("Promised Delivery Date" <> 0D)
                                                                THEN
                                                                  ERROR(
                                                                    Text046,
                                                                    FIELDCAPTION("Requested Delivery Date"),
                                                                    FIELDCAPTION("Promised Delivery Date"));

                                                                IF "Requested Delivery Date" <> 0D THEN
                                                                  VALIDATE("Planned Delivery Date","Requested Delivery Date")
                                                              END;

                                                   CaptionML=[ENU=Requested Delivery Date;
                                                              ENN=Requested Delivery Date] }
    { 5791;   ;Promised Delivery Date;Date        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Promised Delivery Date" <> 0D THEN
                                                                  VALIDATE("Planned Delivery Date","Promised Delivery Date")
                                                                ELSE
                                                                  VALIDATE("Requested Delivery Date");
                                                              END;

                                                   CaptionML=[ENU=Promised Delivery Date;
                                                              ENN=Promised Delivery Date] }
    { 5792;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Time;
                                                              ENN=Shipping Time] }
    { 5794;   ;Planned Delivery Date;Date         ;OnValidate=BEGIN
                                                                VALIDATE("Needed by Date","Planned Delivery Date");
                                                              END;

                                                   CaptionML=[ENU=Planned Delivery Date;
                                                              ENN=Planned Delivery Date] }
    { 5796;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENN=Shipping Agent Code] }
    { 5797;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=VAR
                                                                ShippingAgentServices@1000 : Record 5790;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                IF "Shipping Agent Service Code" <> xRec."Shipping Agent Service Code" THEN
                                                                  CLEAR("Shipping Time");

                                                                IF ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
                                                                  "Shipping Time" := ShippingAgentServices."Shipping Time"
                                                                ELSE BEGIN
                                                                  GetServHeader;
                                                                  "Shipping Time" := ServHeader."Shipping Time";
                                                                END;

                                                                IF ShippingAgentServices."Shipping Time" <> xRec."Shipping Time" THEN
                                                                  VALIDATE("Shipping Time","Shipping Time");
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ENN=Shipping Agent Service Code] }
    { 5811;   ;Appl.-from Item Entry;Integer      ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF "Appl.-from Item Entry" <> 0 THEN BEGIN
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                                  VALIDATE("Unit Cost (LCY)",CalcUnitCost(ItemLedgEntry));
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-from Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-from Item Entry;
                                                              ENN=Appl.-from Item Entry];
                                                   MinValue=0 }
    { 5902;   ;Service Item No.    ;Code20        ;TableRelation="Service Item".No.;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Shipment No.",'');
                                                                IF "Service Item No." <> '' THEN BEGIN
                                                                  IF "Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"] THEN
                                                                    EXIT;
                                                                  ServItemLine.RESET;
                                                                  ServItemLine.SETRANGE("Document Type","Document Type");
                                                                  ServItemLine.SETRANGE("Document No.","Document No.");
                                                                  ServItemLine.SETRANGE("Service Item No.","Service Item No.");
                                                                  ServItemLine.FIND('-');
                                                                  VALIDATE("Service Item Line No.",ServItemLine."Line No.");
                                                                END;

                                                                IF NOT GSTManagement.IsGSTApplicable(ServHeader.Structure) THEN
                                                                IF "Service Item No." <> xRec."Service Item No." THEN BEGIN
                                                                  IF "Service Item No." = '' THEN
                                                                    VALIDATE("Service Item Line No.",0);
                                                                  VALIDATE("No.");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF "Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"] THEN BEGIN
                                                                ServItem.RESET;
                                                                ServItem.SETCURRENTKEY("Customer No.");
                                                                ServItem.FILTERGROUP(2);
                                                                ServItem.SETRANGE("Customer No.","Customer No.");
                                                                ServItem.FILTERGROUP(0);
                                                                IF PAGE.RUNMODAL(0,ServItem) = ACTION::LookupOK THEN
                                                                  VALIDATE("Service Item No.",ServItem."No.");
                                                              END
                                                              ELSE BEGIN
                                                                ServItemLine.RESET;
                                                                ServItemLine.SETCURRENTKEY("Document Type","Document No.","Service Item No.");
                                                                ServItemLine.FILTERGROUP(2);
                                                                ServItemLine.SETRANGE("Document Type","Document Type");
                                                                ServItemLine.SETRANGE("Document No.","Document No.");
                                                                ServItemLine.FILTERGROUP(0);
                                                                ServItemLine."Service Item No." := "Service Item No.";
                                                                IF PAGE.RUNMODAL(0,ServItemLine) = ACTION::LookupOK THEN
                                                                  VALIDATE("Service Item Line No.",ServItemLine."Line No.");
                                                              END;

                                                              IF "Service Item No." <> xRec."Service Item No." THEN
                                                                VALIDATE("No.");
                                                            END;

                                                   CaptionML=[ENU=Service Item No.;
                                                              ENN=Service Item No.] }
    { 5903;   ;Appl.-to Service Entry;Integer     ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-to Service Entry;
                                                              ENN=Appl.-to Service Entry];
                                                   Editable=No }
    { 5904;   ;Service Item Line No.;Integer      ;TableRelation="Service Item Line"."Line No." WHERE (Document Type=FIELD(Document Type),
                                                                                                       Document No.=FIELD(Document No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                ErrorIfAlreadySelectedSI("Service Item Line No.");
                                                                IF ServItemLine.GET("Document Type","Document No.","Service Item Line No.") THEN BEGIN
                                                                  "Service Item No." := ServItemLine."Service Item No.";
                                                                  "Service Item Serial No." := ServItemLine."Serial No.";
                                                                  "Fault Area Code" := ServItemLine."Fault Area Code";
                                                                  "Symptom Code" := ServItemLine."Symptom Code";
                                                                  "Fault Code" := ServItemLine."Fault Code";
                                                                  "Resolution Code" := ServItemLine."Resolution Code";
                                                                  "Service Price Group Code" := ServItemLine."Service Price Group Code";
                                                                  "Serv. Price Adjmt. Gr. Code" := ServItemLine."Serv. Price Adjmt. Gr. Code";
                                                                  IF "No." <> '' THEN
                                                                    VALIDATE("Contract No.",ServItemLine."Contract No.");
                                                                END ELSE BEGIN
                                                                  "Service Item No." := '';
                                                                  "Service Item Serial No." := '';
                                                                END;
                                                                CALCFIELDS("Service Item Line Description");
                                                              END;

                                                   CaptionML=[ENU=Service Item Line No.;
                                                              ENN=Service Item Line No.] }
    { 5905;   ;Service Item Serial No.;Code20     ;OnValidate=BEGIN
                                                                IF "Service Item Serial No." <> '' THEN BEGIN
                                                                  ServItemLine.RESET;
                                                                  ServItemLine.SETRANGE("Document Type","Document Type");
                                                                  ServItemLine.SETRANGE("Document No.","Document No.");
                                                                  ServItemLine.SETRANGE("Serial No.","Service Item Serial No.");
                                                                  ServItemLine.FIND('-');
                                                                  VALIDATE("Service Item Line No.",ServItemLine."Line No.");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              ServItemLine.RESET;
                                                              ServItemLine.SETRANGE("Document Type","Document Type");
                                                              ServItemLine.SETRANGE("Document No.","Document No.");
                                                              ServItemLine."Serial No." := "Service Item Serial No.";
                                                              IF PAGE.RUNMODAL(0,ServItemLine) = ACTION::LookupOK THEN
                                                                VALIDATE("Service Item Line No.",ServItemLine."Line No.");
                                                            END;

                                                   CaptionML=[ENU=Service Item Serial No.;
                                                              ENN=Service Item Serial No.] }
    { 5906;   ;Service Item Line Description;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Item Line".Description WHERE (Document Type=FIELD(Document Type),
                                                                                                             Document No.=FIELD(Document No.),
                                                                                                             Line No.=FIELD(Service Item Line No.)));
                                                   CaptionML=[ENU=Service Item Line Description;
                                                              ENN=Service Item Line Description];
                                                   Editable=No }
    { 5907;   ;Serv. Price Adjmt. Gr. Code;Code10 ;TableRelation="Service Price Adjustment Group";
                                                   CaptionML=[ENU=Serv. Price Adjmt. Gr. Code;
                                                              ENN=Serv. Price Adjmt. Gr. Code];
                                                   Editable=No }
    { 5908;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 5909;   ;Order Date          ;Date          ;CaptionML=[ENU=Order Date;
                                                              ENN=Order Date];
                                                   Editable=No }
    { 5910;   ;Needed by Date      ;Date          ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF CurrFieldNo = FIELDNO("Needed by Date") THEN
                                                                  IF xRec."Needed by Date" <> 0D THEN
                                                                    TESTFIELD("Needed by Date");
                                                                IF "Needed by Date" <> 0D THEN
                                                                  CheckItemAvailable(FIELDNO("Needed by Date"));
                                                                IF CurrFieldNo = FIELDNO("Planned Delivery Date") THEN
                                                                  UpdateReservation(CurrFieldNo)
                                                                ELSE
                                                                  UpdateReservation(FIELDNO("Needed by Date"));
                                                                "Planned Delivery Date" := "Needed by Date";
                                                              END;

                                                   CaptionML=[ENU=Needed by Date;
                                                              ENN=Needed by Date] }
    { 5916;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Customer No.));
                                                   CaptionML=[ENU=Ship-to Code;
                                                              ENN=Ship-to Code];
                                                   Editable=No }
    { 5917;   ;Qty. to Consume     ;Decimal       ;OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Qty. to Consume") THEN
                                                                  CheckWarehouse;

                                                                IF "Qty. to Consume" < 0 THEN
                                                                  FIELDERROR("Qty. to Consume",Text029);

                                                                IF "Qty. to Consume" = MaxQtyToConsume THEN
                                                                  InitQtyToConsume
                                                                ELSE BEGIN
                                                                  "Qty. to Consume (Base)" := CalcBaseQty("Qty. to Consume");
                                                                  InitQtyToInvoice;
                                                                END;

                                                                IF "Qty. to Consume" > 0 THEN BEGIN
                                                                  "Qty. to Ship" := "Qty. to Consume";
                                                                  "Qty. to Ship (Base)" := "Qty. to Consume (Base)";
                                                                  "Qty. to Invoice" := 0;
                                                                  "Qty. to Invoice (Base)" := 0;
                                                                END;

                                                                IF ("Qty. to Consume" * Quantity < 0) OR
                                                                   (ABS("Qty. to Consume") > ABS(MaxQtyToConsume))
                                                                THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    MaxQtyToConsume);
                                                                IF ("Qty. to Consume (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Qty. to Consume (Base)") > ABS(MaxQtyToConsumeBase))
                                                                THEN
                                                                  ERROR(
                                                                    Text032,
                                                                    MaxQtyToConsumeBase);

                                                                IF (xRec."Qty. to Consume" <> "Qty. to Consume") OR
                                                                   (xRec."Qty. to Consume (Base)" <> "Qty. to Consume (Base)")
                                                                THEN
                                                                  VALIDATE("Line Discount %");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Consume;
                                                              ENN=Qty. to Consume];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 5918;   ;Quantity Consumed   ;Decimal       ;CaptionML=[ENU=Quantity Consumed;
                                                              ENN=Quantity Consumed];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5919;   ;Qty. to Consume (Base);Decimal     ;OnValidate=BEGIN
                                                                IF LineRequiresShipmentOrReceipt THEN
                                                                  EXIT;
                                                                IF "Qty. to Consume (Base)" < 0 THEN
                                                                  FIELDERROR("Qty. to Consume (Base)",Text029);

                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Invoice","Qty. to Invoice (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Consume (Base);
                                                              ENN=Qty. to Consume (Base)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes }
    { 5920;   ;Qty. Consumed (Base);Decimal       ;CaptionML=[ENU=Qty. Consumed (Base);
                                                              ENN=Qty. Consumed (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5928;   ;Service Price Group Code;Code10    ;TableRelation="Service Price Group";
                                                   CaptionML=[ENU=Service Price Group Code;
                                                              ENN=Service Price Group Code] }
    { 5929;   ;Fault Area Code     ;Code10        ;TableRelation="Fault Area";
                                                   OnValidate=BEGIN
                                                                IF "Fault Area Code" <> xRec."Fault Area Code" THEN
                                                                  "Fault Code" := '';
                                                              END;

                                                   CaptionML=[ENU=Fault Area Code;
                                                              ENN=Fault Area Code] }
    { 5930;   ;Symptom Code        ;Code10        ;TableRelation="Symptom Code";
                                                   OnValidate=BEGIN
                                                                IF "Symptom Code" <> xRec."Symptom Code" THEN
                                                                  "Fault Code" := '';
                                                              END;

                                                   CaptionML=[ENU=Symptom Code;
                                                              ENN=Symptom Code] }
    { 5931;   ;Fault Code          ;Code10        ;TableRelation="Fault Code".Code WHERE (Fault Area Code=FIELD(Fault Area Code),
                                                                                          Symptom Code=FIELD(Symptom Code));
                                                   CaptionML=[ENU=Fault Code;
                                                              ENN=Fault Code] }
    { 5932;   ;Resolution Code     ;Code10        ;TableRelation="Resolution Code";
                                                   CaptionML=[ENU=Resolution Code;
                                                              ENN=Resolution Code] }
    { 5933;   ;Exclude Warranty    ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT (Type IN [Type::Item,Type::Resource]) THEN
                                                                  IF CurrFieldNo = FIELDNO("Exclude Warranty") THEN
                                                                    FIELDERROR(Type)
                                                                  ELSE
                                                                    EXIT;

                                                                IF CurrFieldNo = FIELDNO("Exclude Warranty") THEN BEGIN
                                                                  ServItemLine.GET("Document Type","Document No.","Service Item Line No.");
                                                                  ServItemLine.TESTFIELD(Warranty,TRUE);
                                                                  IF "Exclude Warranty" AND (NOT Warranty) THEN
                                                                    FIELDERROR(Warranty);
                                                                END;
                                                                IF HideWarrantyWarning = FALSE THEN
                                                                  IF "Fault Reason Code" <> '' THEN BEGIN
                                                                    FaultReasonCode.GET("Fault Reason Code");
                                                                    IF FaultReasonCode."Exclude Warranty Discount" AND
                                                                       NOT "Exclude Warranty"
                                                                    THEN
                                                                      ERROR(
                                                                        Text008,
                                                                        FIELDCAPTION("Exclude Warranty"),
                                                                        FaultReasonCode.FIELDCAPTION("Exclude Warranty Discount"),
                                                                        "Fault Reason Code",
                                                                        FaultReasonCode.TABLECAPTION);
                                                                  END;
                                                                IF HideWarrantyWarning = FALSE THEN
                                                                  IF "Exclude Warranty" <> xRec."Exclude Warranty" THEN
                                                                    IF NOT
                                                                       CONFIRM(
                                                                         Text009,
                                                                         FALSE,FIELDCAPTION("Exclude Warranty"))
                                                                    THEN BEGIN
                                                                      "Exclude Warranty" := xRec."Exclude Warranty";
                                                                      EXIT;
                                                                    END;
                                                                VALIDATE("Contract No.");
                                                                IF "Exclude Warranty" THEN
                                                                  VALIDATE(Warranty,FALSE)
                                                                ELSE
                                                                  VALIDATE(Warranty,TRUE);
                                                              END;

                                                   CaptionML=[ENU=Exclude Warranty;
                                                              ENN=Exclude Warranty];
                                                   Editable=Yes }
    { 5934;   ;Warranty            ;Boolean       ;OnValidate=BEGIN
                                                                UpdateDiscountsAmounts;
                                                              END;

                                                   CaptionML=[ENU=Warranty;
                                                              ENN=Warranty];
                                                   Editable=No }
    { 5936;   ;Contract No.        ;Code20        ;TableRelation="Service Contract Header"."Contract No." WHERE (Contract Type=CONST(Contract));
                                                   OnValidate=BEGIN
                                                                IF "Shipment Line No." <> 0 THEN
                                                                  IF "Shipment No." <> '' THEN
                                                                    FIELDERROR("Contract No.");

                                                                IF "Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"] THEN BEGIN
                                                                  IF "Contract No." <> xRec."Contract No." THEN BEGIN
                                                                    TESTFIELD("Appl.-to Service Entry",0);
                                                                    UpdateServDocRegister(FALSE);
                                                                  END;
                                                                END ELSE BEGIN
                                                                  ServMgtSetup.GET;
                                                                  IF NOT ServItem.GET("Service Item No.") THEN
                                                                    CLEAR(ServItem);
                                                                  IF "Contract No." = '' THEN
                                                                    "Contract Disc. %" := 0
                                                                  ELSE BEGIN
                                                                    GetServHeader;
                                                                    IF ServContract.GET(ServContract."Contract Type"::Contract,"Contract No.") THEN BEGIN
                                                                      IF (ServContract."Starting Date" <= WORKDATE) AND NOT "Exclude Contract Discount" THEN BEGIN
                                                                        IF NOT ContractGr.GET(ServContract."Contract Group Code") THEN
                                                                          CLEAR(ContractGr);
                                                                        IF NOT ContractGr."Disc. on Contr. Orders Only" OR
                                                                           (ContractGr."Disc. on Contr. Orders Only" AND
                                                                            (ServHeader."Contract No." <> ''))
                                                                        THEN BEGIN
                                                                          CASE Type OF
                                                                            Type::" ":
                                                                              "Contract Disc. %" := 0;
                                                                            Type::Item:
                                                                              BEGIN
                                                                                CLEAR(ContractDisc);
                                                                                ContractDisc."Contract Type" := ContractDisc."Contract Type"::Contract;
                                                                                ContractDisc."Contract No." := ServContract."Contract No.";
                                                                                ContractDisc.Type := ContractDisc.Type::"Service Item Group";
                                                                                ContractDisc."No." := ServItem."Service Item Group Code";
                                                                                ContractDisc."Starting Date" := "Posting Date";
                                                                                ContractDiscFind.RUN(ContractDisc);
                                                                                "Contract Disc. %" := ContractDisc."Discount %";
                                                                              END;
                                                                            Type::Resource:
                                                                              BEGIN
                                                                                Res.GET("No.");
                                                                                CLEAR(ContractDisc);
                                                                                ContractDisc."Contract Type" := ContractDisc."Contract Type"::Contract;
                                                                                ContractDisc."Contract No." := ServContract."Contract No.";
                                                                                ContractDisc.Type := ContractDisc.Type::"Resource Group";
                                                                                ContractDisc."No." := Res."Resource Group No.";
                                                                                ContractDisc."Starting Date" := "Posting Date";
                                                                                ContractDiscFind.RUN(ContractDisc);
                                                                                "Contract Disc. %" := ContractDisc."Discount %";
                                                                              END;
                                                                            Type::Cost:
                                                                              BEGIN
                                                                                ServCost.GET("No.");
                                                                                CLEAR(ContractDisc);
                                                                                ContractDisc."Contract Type" := ContractDisc."Contract Type"::Contract;
                                                                                ContractDisc."Contract No." := ServContract."Contract No.";
                                                                                ContractDisc.Type := ContractDisc.Type::Cost;
                                                                                ContractDisc."No." := "No.";
                                                                                ContractDisc."Starting Date" := "Posting Date";
                                                                                ContractDiscFind.RUN(ContractDisc);
                                                                                "Contract Disc. %" := ContractDisc."Discount %";
                                                                              END;
                                                                          END;
                                                                        END ELSE
                                                                          "Contract Disc. %" := 0;
                                                                      END;
                                                                    END ELSE
                                                                      "Contract Disc. %" := 0;
                                                                  END;

                                                                  IF Warranty THEN
                                                                    CASE Type OF
                                                                      Type::Item:
                                                                        "Warranty Disc. %" := ServItem."Warranty % (Parts)";
                                                                      Type::Resource:
                                                                        "Warranty Disc. %" := ServItem."Warranty % (Labor)";
                                                                      ELSE
                                                                        "Warranty Disc. %" := 0;
                                                                    END;

                                                                  UpdateDiscountsAmounts;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              GetServHeader;
                                                              ServContractHeader.FILTERGROUP(2);
                                                              ServContractHeader.SETRANGE("Customer No.",ServHeader."Customer No.");
                                                              ServContractHeader.SETRANGE("Contract Type",ServContractHeader."Contract Type"::Contract);
                                                              ServContractHeader.FILTERGROUP(0);
                                                              IF (PAGE.RUNMODAL(0,ServContractHeader) = ACTION::LookupOK) AND
                                                                 ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"])
                                                              THEN
                                                                VALIDATE("Contract No.",ServContractHeader."Contract No.");
                                                            END;

                                                   CaptionML=[ENU=Contract No.;
                                                              ENN=Contract No.] }
    { 5938;   ;Contract Disc. %    ;Decimal       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Contract Disc. %;
                                                              ENN=Contract Disc. %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 5939;   ;Warranty Disc. %    ;Decimal       ;OnValidate=BEGIN
                                                                UpdateUnitPrice(FIELDNO(Warranty));
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Warranty Disc. %;
                                                              ENN=Warranty Disc. %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 5965;   ;Component Line No.  ;Integer       ;CaptionML=[ENU=Component Line No.;
                                                              ENN=Component Line No.] }
    { 5966;   ;Spare Part Action   ;Option        ;CaptionML=[ENU=Spare Part Action;
                                                              ENN=Spare Part Action];
                                                   OptionCaptionML=[ENU=" ,Permanent,Temporary,Component Replaced,Component Installed";
                                                                    ENN=" ,Permanent,Temporary,Component Replaced,Component Installed"];
                                                   OptionString=[ ,Permanent,Temporary,Component Replaced,Component Installed] }
    { 5967;   ;Fault Reason Code   ;Code10        ;TableRelation="Fault Reason Code";
                                                   OnValidate=VAR
                                                                NewWarranty@1000 : Boolean;
                                                                OldExcludeContractDiscount@1001 : Boolean;
                                                              BEGIN
                                                                SetHideWarrantyWarning := TRUE;
                                                                OldExcludeContractDiscount := "Exclude Contract Discount";
                                                                IF FaultReasonCode.GET("Fault Reason Code") THEN BEGIN
                                                                  IF FaultReasonCode."Exclude Warranty Discount" AND
                                                                     (NOT (Type IN [Type::Item,Type::Resource]))
                                                                  THEN
                                                                    ERROR(
                                                                      Text027,
                                                                      FIELDCAPTION("Fault Reason Code"),
                                                                      FaultReasonCode.Code,
                                                                      FaultReasonCode.FIELDCAPTION("Exclude Warranty Discount"));
                                                                  "Exclude Contract Discount" := FaultReasonCode."Exclude Contract Discount";
                                                                  NewWarranty := (NOT FaultReasonCode."Exclude Warranty Discount") AND
                                                                    ("Exclude Warranty" OR Warranty);
                                                                  VALIDATE("Exclude Warranty",
                                                                    FaultReasonCode."Exclude Warranty Discount" AND
                                                                    ("Exclude Warranty" OR Warranty));
                                                                  VALIDATE(Warranty,NewWarranty);
                                                                  IF OldExcludeContractDiscount AND (NOT "Exclude Contract Discount") THEN
                                                                    VALIDATE("Contract No.");
                                                                END ELSE BEGIN
                                                                  "Exclude Contract Discount" := FALSE;
                                                                  IF "Exclude Warranty" THEN BEGIN
                                                                    VALIDATE("Exclude Warranty",FALSE);
                                                                    VALIDATE(Warranty,TRUE);
                                                                  END ELSE
                                                                    IF OldExcludeContractDiscount <> "Exclude Contract Discount" THEN
                                                                      IF OldExcludeContractDiscount AND (NOT "Exclude Contract Discount") THEN
                                                                        VALIDATE("Contract No.")
                                                                      ELSE
                                                                        VALIDATE(Warranty);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Fault Reason Code;
                                                              ENN=Fault Reason Code] }
    { 5968;   ;Replaced Item No.   ;Code20        ;TableRelation=IF (Replaced Item Type=CONST(Item)) Item
                                                                 ELSE IF (Replaced Item Type=CONST(Service Item)) "Service Item";
                                                   CaptionML=[ENU=Replaced Item No.;
                                                              ENN=Replaced Item No.] }
    { 5969;   ;Exclude Contract Discount;Boolean  ;OnValidate=BEGIN
                                                                IF Type = Type::"G/L Account" THEN
                                                                  FIELDERROR(Type);

                                                                IF "Fault Reason Code" <> '' THEN BEGIN
                                                                  FaultReasonCode.GET("Fault Reason Code");
                                                                  IF FaultReasonCode."Exclude Contract Discount" AND
                                                                     NOT "Exclude Contract Discount"
                                                                  THEN
                                                                    ERROR(
                                                                      Text008,
                                                                      FIELDCAPTION("Exclude Contract Discount"),
                                                                      FaultReasonCode.FIELDCAPTION("Exclude Contract Discount"),
                                                                      "Fault Reason Code",
                                                                      FaultReasonCode.TABLECAPTION);
                                                                END;

                                                                IF "Exclude Contract Discount" <> xRec."Exclude Contract Discount" THEN BEGIN
                                                                  IF NOT
                                                                     CONFIRM(
                                                                       STRSUBSTNO(Text009,
                                                                         FIELDCAPTION("Exclude Contract Discount")),FALSE)
                                                                  THEN BEGIN
                                                                    "Exclude Contract Discount" := xRec."Exclude Contract Discount";
                                                                    EXIT;
                                                                  END;
                                                                  VALIDATE("Contract No.");
                                                                  VALIDATE(Warranty);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Exclude Contract Discount;
                                                              ENN=Exclude Contract Discount];
                                                   Editable=Yes }
    { 5970;   ;Replaced Item Type  ;Option        ;CaptionML=[ENU=Replaced Item Type;
                                                              ENN=Replaced Item Type];
                                                   OptionCaptionML=[ENU=" ,Service Item,Item";
                                                                    ENN=" ,Service Item,Item"];
                                                   OptionString=[ ,Service Item,Item] }
    { 5994;   ;Price Adjmt. Status ;Option        ;CaptionML=[ENU=Price Adjmt. Status;
                                                              ENN=Price Adjmt. Status];
                                                   OptionCaptionML=[ENU=" ,Adjusted,Modified";
                                                                    ENN=" ,Adjusted,Modified"];
                                                   OptionString=[ ,Adjusted,Modified];
                                                   Editable=No }
    { 5997;   ;Line Discount Type  ;Option        ;CaptionML=[ENU=Line Discount Type;
                                                              ENN=Line Discount Type];
                                                   OptionCaptionML=[ENU=" ,Warranty Disc.,Contract Disc.,Line Disc.,Manual";
                                                                    ENN=" ,Warranty Disc.,Contract Disc.,Line Disc.,Manual"];
                                                   OptionString=[ ,Warranty Disc.,Contract Disc.,Line Disc.,Manual];
                                                   Editable=No }
    { 5999;   ;Copy Components From;Option        ;CaptionML=[ENU=Copy Components From;
                                                              ENN=Copy Components From];
                                                   OptionCaptionML=[ENU=None,Item BOM,Old Service Item,Old Serv.Item w/o Serial No.;
                                                                    ENN=None,Item BOM,Old Service Item,Old Serv.Item w/o Serial No.];
                                                   OptionString=None,Item BOM,Old Service Item,Old Serv.Item w/o Serial No. }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   OnValidate=VAR
                                                                ReturnReason@1000 : Record 6635;
                                                              BEGIN
                                                                IF "Return Reason Code" = '' THEN
                                                                  UpdateUnitPrice(FIELDNO("Return Reason Code"));

                                                                IF ReturnReason.GET("Return Reason Code") THEN BEGIN
                                                                  IF ReturnReason."Default Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",ReturnReason."Default Location Code");
                                                                  IF ReturnReason."Inventory Value Zero" THEN BEGIN
                                                                    VALIDATE("Unit Cost (LCY)",0);
                                                                    VALIDATE("Unit Price",0);
                                                                  END ELSE
                                                                    IF "Unit Price" = 0 THEN
                                                                      UpdateUnitPrice(FIELDNO("Return Reason Code"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Return Reason Code;
                                                              ENN=Return Reason Code] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ENN=Allow Line Disc.] }
    { 7002;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Item THEN
                                                                  UpdateUnitPrice(FIELDNO("Customer Disc. Group"));
                                                              END;

                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENN=Customer Disc. Group] }
    { 7300;   ;Qty. Picked         ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Picked (Base)" := CalcBaseQty("Qty. Picked");
                                                                "Completely Picked" := "Qty. Picked" >= 0;
                                                              END;

                                                   CaptionML=[ENU=Qty. Picked;
                                                              ENN=Qty. Picked];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 7301;   ;Qty. Picked (Base)  ;Decimal       ;CaptionML=[ENU=Qty. Picked (Base);
                                                              ENN=Qty. Picked (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 7302;   ;Completely Picked   ;Boolean       ;CaptionML=[ENU=Completely Picked;
                                                              ENN=Completely Picked];
                                                   Editable=No }
    { 7303;   ;Pick Qty. (Base)    ;Decimal       ;CaptionML=[ENU=Pick Qty. (Base);
                                                              ENN=Pick Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 16500;  ;Tax Amount          ;Decimal       ;CaptionML=[ENU=Tax Amount;
                                                              ENN=Tax Amount];
                                                   DecimalPlaces=0:4;
                                                   Editable=No }
    { 16501;  ;Excise Bus. Posting Group;Code10   ;TableRelation="Excise Bus. Posting Group";
                                                   CaptionML=[ENU=Excise Bus. Posting Group;
                                                              ENN=Excise Bus. Posting Group] }
    { 16502;  ;Excise Prod. Posting Group;Code10  ;TableRelation="Excise Prod. Posting Group";
                                                   CaptionML=[ENU=Excise Prod. Posting Group;
                                                              ENN=Excise Prod. Posting Group] }
    { 16503;  ;Excise Amount       ;Decimal       ;CaptionML=[ENU=Excise Amount;
                                                              ENN=Excise Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16504;  ;Amount Including Excise;Decimal    ;CaptionML=[ENU=Amount Including Excise;
                                                              ENN=Amount Including Excise];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16505;  ;Excise Base Amount  ;Decimal       ;CaptionML=[ENU=Excise Base Amount;
                                                              ENN=Excise Base Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16506;  ;Excise Accounting Type;Option      ;CaptionML=[ENU=Excise Accounting Type;
                                                              ENN=Excise Accounting Type];
                                                   OptionCaptionML=[ENU=With CENVAT,Without CENVAT;
                                                                    ENN=With CENVAT,Without CENVAT];
                                                   OptionString=With CENVAT,Without CENVAT }
    { 16507;  ;Excise Base Quantity;Decimal       ;CaptionML=[ENU=Excise Base Quantity;
                                                              ENN=Excise Base Quantity] }
    { 16508;  ;Tax %               ;Decimal       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[ENU=Tax %;
                                                              ENN=Tax %];
                                                   DecimalPlaces=0:2;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 16509;  ;Amount Including Tax;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type);
                                                                TESTFIELD(Quantity);
                                                                TESTFIELD("Unit Price");

                                                                GetServHeader;
                                                                IF "Amount Added to Tax Base" <> 0 THEN BEGIN
                                                                  "Tax Liable" := ServHeader."Tax Liable";
                                                                  "Tax Base Amount" := "Amount Added to Tax Base";
                                                                END ELSE BEGIN
                                                                  "Tax Liable" := FALSE;
                                                                  "Tax Base Amount" :=
                                                                    ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                                                                  Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                                                                  "Amount To Customer" :=
                                                                    ROUND(
                                                                      "Line Amount" - "Inv. Discount Amount" + "Excise Amount" + "Charges To Customer" +
                                                                      "Service Tax Amount" + "Service Tax eCess Amount" +
                                                                      "Service Tax SHE Cess Amount" + "Service Tax SBC Amount" + "KK Cess Amount",Currency."Amount Rounding Precision")
                                                                END;

                                                                IF "Tax Base Amount" <> 0 THEN
                                                                  "Tax %" := ROUND(100 * ("Amount Including Tax" - "Tax Base Amount") / "Tax Base Amount",Currency."Amount Rounding Precision")
                                                                ELSE
                                                                  "Tax %" := 0;

                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=[ENU=Amount Including Tax;
                                                              ENN=Amount Including Tax];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16510;  ;Amount Added to Excise Base;Decimal;CaptionML=[ENU=Amount Added to Excise Base;
                                                              ENN=Amount Added to Excise Base];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16511;  ;Amount Added to Tax Base;Decimal   ;CaptionML=[ENU=Amount Added to Tax Base;
                                                              ENN=Amount Added to Tax Base];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16512;  ;Tax Base Amount     ;Decimal       ;CaptionML=[ENU=Tax Base Amount;
                                                              ENN=Tax Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16513;  ;BED Amount          ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."BED Amount" <> "BED Amount" THEN BEGIN
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=BED Amount;
                                                              ENN=BED Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16514;  ;AED(GSI) Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."AED(GSI) Amount" <> "AED(GSI) Amount" THEN BEGIN
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=AED(GSI) Amount;
                                                              ENN=AED(GSI) Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16515;  ;SED Amount          ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."SED Amount" <> "SED Amount" THEN BEGIN
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=SED Amount;
                                                              ENN=SED Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16516;  ;SAED Amount         ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."SAED Amount" <> "SAED Amount" THEN BEGIN
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=SAED Amount;
                                                              ENN=SAED Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16517;  ;CESS Amount         ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."CESS Amount" <> "CESS Amount" THEN BEGIN
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=CESS Amount;
                                                              ENN=CESS Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16518;  ;NCCD Amount         ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."NCCD Amount" <> "NCCD Amount" THEN BEGIN
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=NCCD Amount;
                                                              ENN=NCCD Amount];
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16519;  ;eCess Amount        ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."eCess Amount" <> "eCess Amount" THEN BEGIN
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=eCess Amount;
                                                              ENN=eCess Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16520;  ;Form Code           ;Code10        ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   OnLookup=VAR
                                                              StateForm@1500000 : Record 13767;
                                                            BEGIN
                                                              StateForm.SETRANGE(State,State);
                                                              StateForm.SETRANGE("Transit Document",FALSE);
                                                              IF PAGE.RUNMODAL(PAGE::"State Forms",StateForm) = ACTION::LookupOK THEN
                                                                "Form Code" := StateForm."Form Code";
                                                              VALIDATE("Form Code");
                                                            END;

                                                   CaptionML=[ENU=Form Code;
                                                              ENN=Form Code] }
    { 16521;  ;Form No.            ;Code10        ;CaptionML=[ENU=Form No.;
                                                              ENN=Form No.] }
    { 16522;  ;State               ;Code10        ;TableRelation=State;
                                                   CaptionML=[ENU=State;
                                                              ENN=State] }
    { 16523;  ;Amount To Customer  ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type);
                                                                TESTFIELD(Quantity);
                                                                TESTFIELD("Unit Price");
                                                                "Amount To Customer" := ROUND("Amount To Customer",Currency."Amount Rounding Precision");
                                                                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=[ENU=Amount To Customer;
                                                              ENN=Amount To Customer];
                                                   Editable=No }
    { 16524;  ;Charges To Customer ;Decimal       ;CaptionML=[ENU=Charges To Customer;
                                                              ENN=Charges To Customer];
                                                   Editable=No }
    { 16525;  ;Service Tax Group   ;Code20        ;TableRelation="Service Tax Groups".Code;
                                                   OnValidate=BEGIN
                                                                UpdateServiceTaxRegistrationNo;
                                                                UpdateTaxAmounts;
                                                              END;

                                                   CaptionML=[ENU=Service Tax Group;
                                                              ENN=Service Tax Group] }
    { 16526;  ;Service Tax Base    ;Decimal       ;CaptionML=[ENU=Service Tax Base;
                                                              ENN=Service Tax Base] }
    { 16527;  ;Service Tax Amount  ;Decimal       ;CaptionML=[ENU=Service Tax Amount;
                                                              ENN=Service Tax Amount] }
    { 16528;  ;Service Tax Registration No.;Code20;TableRelation="Service Tax Registration Nos.".Code;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Service Tax Group");
                                                              END;

                                                   CaptionML=[ENU=Service Tax Registration No.;
                                                              ENN=Service Tax Registration No.] }
    { 16529;  ;Service Tax eCess Amount;Decimal   ;CaptionML=[ENU=Service Tax eCess Amount;
                                                              ENN=Service Tax eCess Amount] }
    { 16530;  ;ADET Amount         ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."ADET Amount" <> "ADET Amount" THEN BEGIN
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=ADET Amount;
                                                              ENN=ADET Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16531;  ;AED(TTA) Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."AED(TTA) Amount" <> "AED(TTA) Amount" THEN BEGIN
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=AED(TTA) Amount;
                                                              ENN=AED(TTA) Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16532;  ;Free Supply         ;Boolean       ;CaptionML=[ENU=Free Supply;
                                                              ENN=Free Supply] }
    { 16533;  ;ADE Amount          ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."ADE Amount" <> "ADE Amount" THEN BEGIN
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=ADE Amount;
                                                              ENN=ADE Amount];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16534;  ;Assessable Value    ;Decimal       ;CaptionML=[ENU=Assessable Value;
                                                              ENN=Assessable Value] }
    { 16535;  ;VAT Type            ;Option        ;CaptionML=[ENU=VAT Type;
                                                              ENN=VAT Type];
                                                   OptionCaptionML=[ENU=" ,Item,Capital Goods";
                                                                    ENN=" ,Item,Capital Goods"];
                                                   OptionString=[ ,Item,Capital Goods] }
    { 16536;  ;SHE Cess Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."ADET Amount" <> "SHE Cess Amount" THEN BEGIN
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=SHE Cess Amount;
                                                              ENN=SHE Cess Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16537;  ;Service Tax SHE Cess Amount;Decimal;CaptionML=[ENU=Service Tax SHE Cess Amount;
                                                              ENN=Service Tax SHE Cess Amount] }
    { 16538;  ;Standard Deduction %;Decimal       ;CaptionML=[ENU=Standard Deduction %;
                                                              ENN=Standard Deduction %];
                                                   Editable=No }
    { 16539;  ;Standard Deduction Amount;Decimal  ;CaptionML=[ENU=Standard Deduction Amount;
                                                              ENN=Standard Deduction Amount];
                                                   Editable=No }
    { 16540;  ;Supplementary       ;Boolean       ;OnValidate=BEGIN
                                                                IF NOT Supplementary THEN
                                                                  "Source Document No." := '';
                                                              END;

                                                   CaptionML=[ENU=Supplementary;
                                                              ENN=Supplementary] }
    { 16541;  ;Source Document Type;Option        ;OnValidate=BEGIN
                                                                IF "Source Document Type" <> xRec."Source Document Type" THEN
                                                                  "Source Document No." := '';
                                                              END;

                                                   CaptionML=[ENU=Source Document Type;
                                                              ENN=Source Document Type];
                                                   OptionCaptionML=[ENU=Posted Invoice,Posted Credit Memo;
                                                                    ENN=Posted Invoice,Posted Credit Memo];
                                                   OptionString=Posted Invoice,Posted Credit Memo }
    { 16542;  ;Source Document No. ;Code20        ;TableRelation=IF (Source Document Type=FILTER(Posted Invoice)) "Service Invoice Header".No.
                                                                 ELSE IF (Source Document Type=FILTER(Posted Credit Memo)) "Service Cr.Memo Header".No.;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Supplementary);
                                                              END;

                                                   CaptionML=[ENU=Source Document No.;
                                                              ENN=Source Document No.] }
    { 16543;  ;ADC VAT Amount      ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."ADC VAT Amount" <> "ADC VAT Amount" THEN BEGIN
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=ADC VAT Amount;
                                                              ENN=ADC VAT Amount];
                                                   MinValue=0;
                                                   Editable=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16544;  ;CIF Amount          ;Decimal       ;CaptionML=[ENU=CIF Amount;
                                                              ENN=CIF Amount] }
    { 16545;  ;BCD Amount          ;Decimal       ;CaptionML=[ENU=BCD Amount;
                                                              ENN=BCD Amount] }
    { 16546;  ;CVD                 ;Boolean       ;CaptionML=[ENU=CVD;
                                                              ENN=CVD] }
    { 16550;  ;Custom eCess Amount ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."Custom eCess Amount" <> "Custom eCess Amount" THEN BEGIN
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Custom eCess Amount;
                                                              ENN=Custom eCess Amount] }
    { 16551;  ;Custom SHECess Amount;Decimal      ;OnValidate=BEGIN
                                                                IF xRec."Custom SHECess Amount" <> "Custom SHECess Amount" THEN BEGIN
                                                                  UpdateStruOrdLineDetails;
                                                                  UpdateGenJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Custom SHECess Amount;
                                                              ENN=Custom SHECess Amount] }
    { 16552;  ;Excise Effective Rate;Decimal      ;CaptionML=[ENU=Excise Effective Rate;
                                                              ENN=Excise Effective Rate] }
    { 16553;  ;Item Charge Entry   ;Boolean       ;CaptionML=[ENU=Item Charge Entry;
                                                              ENN=Item Charge Entry] }
    { 16554;  ;Tot. Serv Tax Amount (Intm);Decimal;CaptionML=[ENU=Tot. Serv Tax Amount (Intm);
                                                              ENN=Tot. Serv Tax Amount (Intm)] }
    { 16555;  ;S. Tax Base Amount (Intm);Decimal  ;CaptionML=[ENU=S. Tax Base Amount (Intm);
                                                              ENN=S. Tax Base Amount (Intm)] }
    { 16556;  ;S. Tax Amount (Intm);Decimal       ;CaptionML=[ENU=S. Tax Amount (Intm);
                                                              ENN=S. Tax Amount (Intm)];
                                                   Editable=No }
    { 16557;  ;S. Tax eCess Amount (Intm);Decimal ;CaptionML=[ENU=S. Tax eCess Amount (Intm);
                                                              ENN=S. Tax eCess Amount (Intm)];
                                                   Editable=No }
    { 16558;  ;S. Tax SHE Cess Amount (Intm);Decimal;
                                                   CaptionML=[ENU=S. Tax SHE Cess Amount (Intm);
                                                              ENN=S. Tax SHE Cess Amount (Intm)];
                                                   Editable=No }
    { 16559;  ;Amt. Incl. Service Tax (Intm);Decimal;
                                                   CaptionML=[ENU=Amt. Incl. Service Tax (Intm);
                                                              ENN=Amt. Incl. Service Tax (Intm)];
                                                   Editable=No }
    { 16560;  ;Service Tax SBC Amount;Decimal     ;CaptionML=[ENU=Service Tax SBC Amount;
                                                              ENN=Service Tax SBC Amount] }
    { 16561;  ;S. Tax SBC Amount (Intm);Decimal   ;CaptionML=[ENU=S. Tax SBC Amount (Intm);
                                                              ENN=S. Tax SBC Amount (Intm)];
                                                   Editable=No }
    { 16562;  ;KK Cess Amount      ;Decimal       ;CaptionML=[ENU=KK Cess Amount;
                                                              ENN=KK Cess Amount];
                                                   Editable=No }
    { 16563;  ;KK Cess Amount (Intm);Decimal      ;CaptionML=[ENU=KK Cess Amount (Intm);
                                                              ENN=KK Cess Amount (Intm)];
                                                   Editable=No }
    { 16601;  ;GST Place Of Supply ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Quantity Consumed",0);
                                                                TESTFIELD("Quantity Invoiced",0);
                                                                UpdateGSTAmounts("GST Base Amount");
                                                              END;

                                                   CaptionML=[ENU=GST Place Of Supply;
                                                              ENN=GST Place Of Supply];
                                                   OptionCaptionML=[ENU=" ,Bill-to Address,Ship-to Address,Location Address";
                                                                    ENN=" ,Bill-to Address,Ship-to Address,Location Address"];
                                                   OptionString=[ ,Bill-to Address,Ship-to Address,Location Address];
                                                   Editable=No }
    { 16602;  ;GST Group Code      ;Code20        ;TableRelation="GST Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF GSTGroup.GET("GST Group Code") THEN BEGIN
                                                                  IF GSTGroup."Reverse Charge" THEN
                                                                    ERROR(GSTGroupReverseChargeErr,"GST Group Code");
                                                                  "GST Place Of Supply" := GSTGroup."GST Place Of Supply";
                                                                  "GST Group Type" := GSTGroup."GST Group Type";
                                                                  CASE Type OF
                                                                    Type::"G/L Account",Type::Cost: TESTFIELD("GST Group Type","GST Group Type"::Service);
                                                                    Type::Resource,Type::Item : TESTFIELD("GST Group Type","GST Group Type"::Goods);
                                                                  END;
                                                                END;
                                                                IF "GST Place Of Supply" = "GST Place Of Supply"::" " THEN BEGIN
                                                                  ServMgtSetup.GET;
                                                                  "GST Place Of Supply" := ServMgtSetup."GST Dependency Type";
                                                                END;
                                                                "HSN/SAC Code" := '';
                                                              END;

                                                   CaptionML=[ENU=GST Group Code;
                                                              ENN=GST Group Code] }
    { 16603;  ;GST Group Type      ;Option        ;CaptionML=[ENU=GST Group Type;
                                                              ENN=GST Group Type];
                                                   OptionCaptionML=[ENU=Goods,Service;
                                                                    ENN=Goods,Service];
                                                   OptionString=Goods,Service;
                                                   Editable=No }
    { 16604;  ;GST Base Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF "GST Base Amount" = 0 THEN BEGIN
                                                                  "GST %" := 0;
                                                                  "Total GST Amount" := 0
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=GST Base Amount;
                                                              ENN=GST Base Amount];
                                                   Editable=No }
    { 16605;  ;GST %               ;Decimal       ;CaptionML=[ENU=GST %;
                                                              ENN=GST %];
                                                   Editable=No }
    { 16606;  ;Total GST Amount    ;Decimal       ;CaptionML=[ENU=Total GST Amount;
                                                              ENN=Total GST Amount];
                                                   Editable=No }
    { 16607;  ;HSN/SAC Code        ;Code8         ;TableRelation=HSN/SAC.Code WHERE (GST Group Code=FIELD(GST Group Code));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                GetServHeader;
                                                                ServHeader.TESTFIELD("Applies-to Doc. No.",'');
                                                                ServHeader.TESTFIELD("Applies-to ID",'');
                                                              END;

                                                   CaptionML=[ENU=HSN/SAC Code;
                                                              ENN=HSN/SAC Code] }
    { 16608;  ;GST Jurisdiction Type;Option       ;CaptionML=[ENU=GST Jurisdiction Type;
                                                              ENN=GST Jurisdiction Type];
                                                   OptionCaptionML=[ENU=Intrastate,Interstate;
                                                                    ENN=Intrastate,Interstate];
                                                   OptionString=Intrastate,Interstate;
                                                   Editable=No }
    { 16609;  ;Invoice Type        ;Option        ;CaptionML=[ENU=Invoice Type;
                                                              ENN=Invoice Type];
                                                   OptionCaptionML=[ENU=" ,Bill of Supply,Export,Supplementary,Debit Note,Non-GST,Taxable";
                                                                    ENN=" ,Bill of Supply,Export,Supplementary,Debit Note,Non-GST,Taxable"];
                                                   OptionString=[ ,Bill of Supply,Export,Supplementary,Debit Note,Non-GST,Taxable];
                                                   Editable=No }
    { 16610;  ;Exempted            ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Quantity Consumed",0);
                                                                TESTFIELD("Quantity Invoiced",0);
                                                                GetServHeader;
                                                                IF (ServHeader."Applies-to Doc. No." <> '') OR (ServHeader."Applies-to ID" <> '') THEN
                                                                  ERROR(AppliesToDocErr);
                                                              END;

                                                   CaptionML=[ENU=Exempted;
                                                              ENN=Exempted] }
  }
  KEYS
  {
    {    ;Document Type,Document No.,Line No.     ;SumIndexFields=Amount,Amount Including VAT,Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY),Line Amount;
                                                   Clustered=Yes }
    {    ;Type,No.,Order Date                      }
    {    ;Service Item No.,Type,Posting Date       }
    {    ;Document Type,Bill-to Customer No.,Currency Code;
                                                   SumIndexFields=Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY) }
    {    ;Document Type,Document No.,Service Item No. }
    {    ;Document Type,Document No.,Service Item Line No.,Serv. Price Adjmt. Gr. Code;
                                                   SumIndexFields=Line Amount }
    {    ;Document Type,Document No.,Service Item Line No.,Type,No. }
    {    ;Type,No.,Variant Code,Location Code,Needed by Date,Document Type,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code;
                                                   SumIndexFields=Quantity (Base),Outstanding Qty. (Base) }
    {    ;Appl.-to Service Entry                   }
    {    ;Document Type,Document No.,Service Item Line No.,Component Line No. }
    {    ;Fault Reason Code                        }
    {    ;Document Type,Customer No.,Shipment No. ;SumIndexFields=Outstanding Amount (LCY) }
    {    ;Document Type,Document No.,Location Code }
    {    ;Document Type,Document No.,Type,No.      }
    {    ;Document Type,Document No.,Type,GST Group Code }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1085 : TextConst 'ENU=You cannot invoice more than %1 units.;ENN=You cannot invoice more than %1 units.';
      Text001@1084 : TextConst 'ENU=You cannot invoice more than %1 base units.;ENN=You cannot invoice more than %1 base units.';
      Text002@1002 : TextConst 'ENU=You cannot rename a %1.;ENN=You cannot rename a %1.';
      Text003@1086 : TextConst 'ENU=must not be less than %1;ENN=must not be less than %1';
      Text004@1004 : TextConst 'ENU=You must confirm %1 %2, because %3 is not equal to %4 in %5 %6.;ENN=You must confirm %1 %2, because %3 is not equal to %4 in %5 %6.';
      Text005@1005 : TextConst 'ENU=The update has been interrupted to respect the warning.;ENN=The update has been interrupted to respect the warning.';
      Text006@1006 : TextConst 'ENU=Replace Component,New Component,Ignore;ENN=Replace Component,New Component,Ignore';
      Text007@1007 : TextConst 'ENU=You must select a %1.;ENN=You must select a %1.';
      Text008@1008 : TextConst 'ENU=You cannot change the value of the %1 field because the %2 field in the Fault Reason Codes window contains a check mark for the %3 %4.;ENN=You cannot change the value of the %1 field because the %2 field in the Fault Reason Codes window contains a check mark for the %3 %4.';
      Text009@1009 : TextConst 'ENU=You have changed the value of the field %1.\Do you want to continue ?;ENN=You have changed the value of the field %1.\Do you want to continue ?';
      Text010@1010 : TextConst 'ENU=%1 cannot be less than %2.;ENN=%1 cannot be less than %2.';
      Text011@1011 : TextConst 'ENU=When replacing a %1 the quantity must be 1.;ENN=When replacing a %1 the quantity must be 1.';
      Text012@1087 : TextConst 'ENU=Automatic reservation is not possible.\Do you want to reserve items manually?;ENN=Automatic reservation is not possible.\Do you want to reserve items manually?';
      Text013@1013 : TextConst 'ENU=" must be 0 when %1 is %2.";ENN=" must be 0 when %1 is %2."';
      Text015@1015 : TextConst 'ENU=You have already selected %1 %2 for replacement.;ENN=You have already selected %1 %2 for replacement.';
      Text016@1083 : TextConst 'ENU=You cannot ship more than %1 units.;ENN=You cannot ship more than %1 units.';
      Text017@1082 : TextConst 'ENU=You cannot ship more than %1 base units.;ENN=You cannot ship more than %1 base units.';
      Text018@1018 : TextConst 'ENU=%1 %2 is greater than %3 and was adjusted to %4.;ENN=%1 %2 is greater than %3 and was adjusted to %4.';
      Text021@1021 : TextConst 'ENU=The %1 that you selected has already been replaced in %2 %3.;ENN=The %1 that you selected has already been replaced in %2 %3.';
      GLAcc@1022 : Record 15;
      ServMgtSetup@1023 : Record 5911;
      ServiceLine@1024 : Record 5902;
      StdTxt@1025 : Record 7;
      ServHeader@1026 : Record 5900;
      ServCost@1027 : Record 5905;
      ServItem@1028 : Record 5940;
      ServItem2@1029 : Record 5940;
      ServItemLine@1030 : Record 5901;
      ServContract@1031 : Record 5965;
      ContractGr@1032 : Record 5966;
      Item@1033 : Record 27;
      Resource@1089 : Record 156;
      Location@1017 : Record 14;
      ItemVariant@1034 : Record 5401;
      ResCost@1035 : Record 202;
      FaultReasonCode@1037 : Record 5917;
      WorkType@1038 : Record 200;
      ServItemComponent@1039 : Record 5941;
      Res@1040 : Record 156;
      ItemTranslation@1041 : Record 30;
      ContractDisc@1042 : Record 5972;
      Currency@1043 : Record 4;
      CurrExchRate@1044 : Record 330;
      GenProdPostingGrp@1045 : Record 251;
      GenBusPostingGrp@1046 : Record 250;
      VATPostingSetup@1047 : Record 325;
      UnitOfMeasure@1050 : Record 204;
      NonstockItem@1051 : Record 5718;
      ReservEntry@1052 : Record 337;
      TempTrackingSpecification@1016 : TEMPORARY Record 336;
      SKU@1091 : Record 5700;
      ItemCategory@1090 : Record 5722;
      ServDocReg@1071 : Record 5936;
      ServContractHeader@1053 : Record 5965;
      ServShptHeader@1036 : Record 5990;
      CompanyInfo@1500000 : Record 79;
      GSTGroup@1500033 : Record 16404;
      Reservation@1057 : Page 498;
      DimMgt@1058 : Codeunit 408;
      ItemCheckAvail@1059 : Codeunit 311;
      ContractDiscFind@1060 : Codeunit 5941;
      SalesTaxCalculate@1061 : Codeunit 398;
      UOMMgt@1062 : Codeunit 5402;
      ItemSubstitutionMgt@1063 : Codeunit 5701;
      NonstockItemMgt@1064 : Codeunit 5703;
      ReservEngineMgt@1065 : Codeunit 99000831;
      ReservMgt@1075 : Codeunit 99000845;
      ReserveServLine@1066 : Codeunit 99000842;
      ServOrderMgt@1079 : Codeunit 5900;
      SalesPriceCalcMgt@1048 : Codeunit 7000;
      GSTManagement@1500035 : Codeunit 16401;
      GSTApplicationManagement@1500034 : Codeunit 16403;
      Select@1069 : Integer;
      FullAutoReservation@1078 : Boolean;
      HideReplacementDialog@1074 : Boolean;
      Text022@1019 : TextConst 'ENU=The %1 cannot be greater than the %2 set on the %3.;ENN=The %1 cannot be greater than the %2 set on the %3.';
      Text023@1077 : TextConst 'ENU=You must enter a serial number.;ENN=You must enter a serial number.';
      ReplaceServItemAction@1080 : Boolean;
      Text026@1068 : TextConst 'ENU=When replacing or creating a service item component you may only enter a whole number into the %1 field.;ENN=When replacing or creating a service item component you may only enter a whole number into the %1 field.';
      Text027@1070 : TextConst 'ENU=The %1 %2 with a check mark in the %3 field cannot be entered if the service line type is other than Item or Resource.;ENN=The %1 %2 with a check mark in the %3 field cannot be entered if the service line type is other than Item or Resource.';
      Text028@1014 : TextConst 'ENU=You cannot consume more than %1 units.;ENN=You cannot consume more than %1 units.';
      Text029@1098 : TextConst 'ENU=must be positive;ENN=must be positive';
      Text030@1094 : TextConst 'ENU=must be negative;ENN=must be negative';
      Text031@1093 : TextConst 'ENU=You must specify %1.;ENN=You must specify %1.';
      Text032@1095 : TextConst 'ENU=You cannot consume more than %1 base units.;ENN=You cannot consume more than %1 base units.';
      Text033@1001 : TextConst 'ENU=The line you are trying to change has the adjusted price.\;ENN=The line you are trying to change has the adjusted price.\';
      Text034@1000 : TextConst 'ENU=Do you want to continue?;ENN=Do you want to continue?';
      Text035@1076 : TextConst 'ENU=Warehouse;ENN=Warehouse';
      Text036@1102 : TextConst 'ENU=Inventory;ENN=Inventory';
      Text037@1092 : TextConst 'ENU=You cannot change %1 when %2 is %3 and %4 is positive.;ENN=You cannot change %1 when %2 is %3 and %4 is positive.';
      Text038@1088 : TextConst 'ENU=You cannot change %1 when %2 is %3 and %4 is negative.;ENN=You cannot change %1 when %2 is %3 and %4 is negative.';
      Text039@1081 : TextConst 'ENU=You cannot return more than %1 units for %2 %3.;ENN=You cannot return more than %1 units for %2 %3.';
      Text040@1073 : TextConst 'ENU=You must use form %1 to enter %2, if item tracking is used.;ENN=You must use form %1 to enter %2, if item tracking is used.';
      Text041@1105 : TextConst 'ENU=There were no Resource Lines to split.;ENN=There were no Resource Lines to split.';
      Text042@1072 : TextConst 'ENU=When posting the Applied to Ledger Entry %1 will be opened first;ENN=When posting the Applied to Ledger Entry %1 will be opened first';
      HideCostWarning@1003 : Boolean;
      HideWarrantyWarning@1096 : Boolean;
      Text043@1097 : TextConst 'ENU=You cannot change the value of the %1 field manually if %2 for this line is %3.;ENN=You cannot change the value of the %1 field manually if %2 for this line is %3.';
      Text044@1012 : TextConst 'ENU=Do you want to split the resource line and use it to create resource lines\for the other service items with divided amounts?;ENN=Do you want to split the resource line and use it to create resource lines\for the other service items with divided amounts?';
      Text045@1099 : TextConst 'ENU=You cannot delete this service line because one or more service entries exist for this line.;ENN=You cannot delete this service line because one or more service entries exist for this line.';
      Text046@1067 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;ENN=You cannot change the %1 when the %2 has been filled in.';
      Text047@1100 : TextConst 'ENU=%1 can only be set when %2 is set.;ENN=%1 can only be set when %2 is set.';
      Text048@1101 : TextConst 'ENU=%1 cannot be changed when %2 is set.;ENN=%1 cannot be changed when %2 is set.';
      Text049@1103 : TextConst '@@@=Example: Inventory put-away is required for Line 50000.;ENU="%1 is required for %2 = %3.";ENN="%1 is required for %2 = %3."';
      Text050@1104 : TextConst 'ENU=\The entered information may be disregarded by warehouse operations.;ENN=\The entered information may be disregarded by warehouse operations.';
      StatusCheckSuspended@1106 : Boolean;
      Text051@1107 : TextConst 'ENU=You cannot add an item line.;ENN=You cannot add an item line.';
      Text13700@1500018 : TextConst 'ENU=BED AMOUNT;ENN=BED AMOUNT';
      Text13701@1500017 : TextConst 'ENU=AED AMOUNT;ENN=AED AMOUNT';
      Text13702@1500016 : TextConst 'ENU=SED AMOUNT;ENN=SED AMOUNT';
      Text13703@1500015 : TextConst 'ENU=SAED AMOUNT;ENN=SAED AMOUNT';
      Text13704@1500014 : TextConst 'ENU=CESS AMOUNT;ENN=CESS AMOUNT';
      Text13705@1500013 : TextConst 'ENU=NCCD AMOUNT;ENN=NCCD AMOUNT';
      Text13706@1500012 : TextConst 'ENU=ECESS AMOUNT;ENN=ECESS AMOUNT';
      Text13707@1500011 : TextConst 'ENU=ADET AMOUNT;ENN=ADET AMOUNT';
      Text13708@1500010 : TextConst 'ENU=LINE AMOUNT;ENN=LINE AMOUNT';
      Text13709@1500009 : TextConst 'ENU=ADE AMOUNT;ENN=ADE AMOUNT';
      Text13710@1500008 : TextConst 'ENU=SHE CESS AMOUNT;ENN=SHE CESS AMOUNT';
      Text16500@1500007 : TextConst 'ENU=The maximum available quantity for Item %1 in RG 23 D Register is %2. Please reduce the %3.;ENN=The maximum available quantity for Item %1 in RG 23 D Register is %2. Please reduce the %3.';
      Text16501@1500006 : TextConst 'ENU=ADC VAT AMOUNT;ENN=ADC VAT AMOUNT';
      Text16502@1500005 : TextConst 'ENU=BCD AMOUNT;ENN=BCD AMOUNT';
      Text16503@1500004 : TextConst 'ENU=CIF AMOUNT;ENN=CIF AMOUNT';
      Text16506@1500003 : TextConst 'ENU=CUST. SHECESS AMOUNT;ENN=CUST. SHECESS AMOUNT';
      Text16507@1500002 : TextConst 'ENU=CUST. ECESS AMOUNT;ENN=CUST. ECESS AMOUNT';
      Text16508@1500001 : TextConst 'ENU=To view Excise Detail the Structure should include Excise.;ENN=To view Excise Detail the Structure should include Excise.';
      BEDAmt@1500032 : Decimal;
      "AED(GSI)Amt"@1500031 : Decimal;
      "AED(TTA)Amt"@1500030 : Decimal;
      SEDAmt@1500029 : Decimal;
      SAEDAmt@1500028 : Decimal;
      CESSAmt@1500027 : Decimal;
      NCCDAmt@1500026 : Decimal;
      eCessAmt@1500025 : Decimal;
      SHECessAmt@1500024 : Decimal;
      ADETAmt@1500023 : Decimal;
      ADEAmt@1500022 : Decimal;
      ADCVATAmt@1500021 : Decimal;
      CompanyInfoRead@1500020 : Boolean;
      AssessableValueCalc@1500019 : Boolean;
      Text052@1108 : TextConst 'ENU=You cannot change the %1 field because one or more service entries exist for this line.;ENN=You cannot change the %1 field because one or more service entries exist for this line.';
      Text053@1020 : TextConst 'ENU=You cannot modify the service line because one or more service entries exist for this line.;ENN=You cannot modify the service line because one or more service entries exist for this line.';
      IsCustCrLimitChecked@1049 : Boolean;
      LocationChangedMsg@1055 : TextConst '@@@="%1 = Item No., %2 = Item serial No., %3 = Location code";ENU=Item %1 with serial number %2 is stored on location %3. The Location Code field on the service line will be updated.;ENN=Item %1 with serial number %2 is stored on location %3. The Location Code field on the service line will be updated.';
      AppliesToDocErr@1500036 : TextConst 'ENU=You must remove Applies-to Doc No. before modifying Exempted value.;ENN=You must remove Applies-to Doc No. before modifying Exempted value.';
      GSTGroupReverseChargeErr@1500037 : TextConst '@@@="%1 = GST Group Code";ENU=GST Group Code %1 with Reverse Charge cannot be selected for Service transactions.;ENN=GST Group Code %1 with Reverse Charge cannot be selected for Service transactions.';

    LOCAL PROCEDURE CheckItemAvailable@3(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF "Needed by Date" = 0D THEN BEGIN
        GetServHeader;
        IF ServHeader."Order Date" <> 0D THEN
          VALIDATE("Needed by Date",ServHeader."Order Date")
        ELSE
          VALIDATE("Needed by Date",WORKDATE);
      END;

      IF CurrFieldNo <> CalledByFieldNo THEN
        EXIT;
      IF NOT GUIALLOWED THEN
        EXIT;
      IF Reserve = Reserve::Always THEN
        EXIT;
      IF (Type <> Type::Item) OR ("No." = '') THEN
        EXIT;
      IF Quantity <= 0 THEN
        EXIT;
      IF Nonstock THEN
        EXIT;
      IF NOT ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) THEN
        EXIT;

      IF ItemCheckAvail.ServiceInvLineCheck(Rec) THEN
        ItemCheckAvail.RaiseUpdateInterruptedError;
    END;

    PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20]);
    VAR
      SourceCodeSetup@1006 : Record 242;
      TableID@1007 : ARRAY [10] OF Integer;
      No@1008 : ARRAY [10] OF Code[20];
      DimensionSetID@1009 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      GetServHeader;
      IF NOT ServItemLine.GET(ServHeader."Document Type",ServHeader."No.","Service Item Line No.") THEN
        ServItemLine.INIT;

      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';

      DimensionSetID := ServItemLine."Dimension Set ID";
      IF DimensionSetID = 0 THEN
        DimensionSetID := ServHeader."Dimension Set ID";
      UpdateDimSetupFromDimSetID(TableID,No,DimensionSetID);
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup."Service Management",
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
          DimensionSetID,DATABASE::Customer);
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE LookupShortcutDimCode@28(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    LOCAL PROCEDURE ReplaceServItem@8() : Boolean;
    VAR
      ServItemReplacement@1000 : Page 5985;
      SerialNo@1001 : Code[20];
      VariantCode@1002 : Code[10];
      LocationCode@1004 : Code[10];
    BEGIN
      ErrorIfAlreadySelectedSI("Service Item Line No.");
      CLEAR(ServItemReplacement);
      ServItemReplacement.SetValues("Service Item No.","No.","Variant Code");
      COMMIT;
      IF ServItemReplacement.RUNMODAL = ACTION::OK THEN BEGIN
        SerialNo := ServItemReplacement.ReturnSerialNo;
        VariantCode := ServItemReplacement.ReturnVariantCode;
        IF SerialNo = '' THEN
          CheckItemTrackingCode(Item)
        ELSE
          IF FindSerialNoStorageLocation(LocationCode,Item."No.",SerialNo,VariantCode) AND (LocationCode <> "Location Code") THEN BEGIN
            VALIDATE("Location Code",LocationCode);
            MESSAGE(STRSUBSTNO(LocationChangedMsg,Item."No.",SerialNo,LocationCode));
          END;

        "Variant Code" := VariantCode;
        VALIDATE(Quantity,1);
        TempTrackingSpecification.DELETEALL;
        TempTrackingSpecification."Serial No." := SerialNo;
        TempTrackingSpecification."Variant Code" := VariantCode;
        TempTrackingSpecification.INSERT;
        IF "Line No." <> 0 THEN
          InsertItemTracking;
        CASE ServItemReplacement.ReturnReplacement OF
          0:
            "Spare Part Action" := "Spare Part Action"::"Temporary";
          1:
            "Spare Part Action" := "Spare Part Action"::Permanent;
        END;
        "Copy Components From" := ServItemReplacement.ReturnCopyComponentsFrom;
        EXIT(TRUE);
      END;
      ReserveServLine.DeleteLine(Rec);
      Clearfields;
      VALIDATE("No.",'');
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE FindSerialNoStorageLocation@86(VAR LocationCode@1004 : Code[10];ItemNo@1000 : Code[20];SerialNo@1001 : Code[20];VariantCode@1003 : Code[10]) : Boolean;
    VAR
      ItemLedgerEntry@1002 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Serial No.",SerialNo);
      ItemLedgerEntry.SETRANGE("Variant Code",VariantCode);
      ItemLedgerEntry.SETRANGE(Open,TRUE);
      IF NOT ItemLedgerEntry.FINDLAST THEN
        EXIT(FALSE);

      LocationCode := ItemLedgerEntry."Location Code";
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckItemTrackingCode@87(ReplacementItem@1001 : Record 27);
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      IF ReplacementItem."Item Tracking Code" = '' THEN
        EXIT;

      ItemTrackingCode.GET(ReplacementItem."Item Tracking Code");
      IF ItemTrackingCode."SN Specific Tracking" THEN
        ERROR(Text023);
    END;

    LOCAL PROCEDURE ErrorIfAlreadySelectedSI@107(ServItemLineNo@1000 : Integer);
    BEGIN
      IF "Document Type" <> "Document Type"::Order THEN
        EXIT;
      IF ServItemLineNo <> 0 THEN BEGIN
        ServItemLine.GET("Document Type","Document No.",ServItemLineNo);
        IF (ServItemLine."Service Item No." = '') OR
           (ServItemLine."Item No." <> "No.")
        THEN
          EXIT;
      END;

      ServiceLine.RESET;
      ServiceLine.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.",Type,"No.");
      ServiceLine.SETRANGE("Document Type","Document Type");
      ServiceLine.SETRANGE("Document No.","Document No.");
      ServiceLine.SETRANGE("Service Item Line No.",ServItemLineNo);
      ServiceLine.SETRANGE(Type,Type::Item);
      ServiceLine.SETFILTER("Line No.",'<>%1',"Line No.");
      ServiceLine.SETRANGE("No.","No.");
      IF ServiceLine.FINDFIRST THEN
        ERROR(Text015,Item.TABLECAPTION,"No.");
    END;

    LOCAL PROCEDURE CalculateDiscount@7();
    VAR
      Discounts@1000 : ARRAY [4] OF Decimal;
      i@1001 : Integer;
    BEGIN
      IF "Exclude Warranty" OR NOT Warranty THEN
        Discounts[1] := 0
      ELSE BEGIN
        IF ServItemLine.GET("Document Type","Document No.","Service Item Line No.") THEN
          CASE Type OF
            Type::Item:
              "Warranty Disc. %" := ServItemLine."Warranty % (Parts)";
            Type::Resource:
              "Warranty Disc. %" := ServItemLine."Warranty % (Labor)";
          END;
        Discounts[1] := "Warranty Disc. %";
      END;

      IF "Exclude Contract Discount" THEN
        IF CurrFieldNo = FIELDNO("Fault Reason Code") THEN
          Discounts[2] := "Line Discount %"
        ELSE
          Discounts[2] := 0
      ELSE
        Discounts[2] := "Contract Disc. %";

      ServHeader.GET("Document Type","Document No.");
      SalesPriceCalcMgt.FindServLineDisc(ServHeader,Rec);
      Discounts[3] := "Line Discount %";
      IF Discounts[3] > 100 THEN
        Discounts[3] := 100;

      "Line Discount Type" := "Line Discount Type"::" ";
      "Line Discount %" := 0;

      IF "Line Discount Type" = "Line Discount Type"::Manual THEN
        Discounts[4] := "Line Discount %"
      ELSE
        Discounts[4] := 0;

      FOR i := 1 TO 4 DO
        IF Discounts[i] > "Line Discount %" THEN BEGIN
          "Line Discount Type" := i;
          "Line Discount %" := Discounts[i];
        END;
    END;

    PROCEDURE UpdateAmounts@13();
    VAR
      CustCheckCrLimit@1000 : Codeunit 312;
    BEGIN
      IF GUIALLOWED AND (CurrFieldNo <> 0) THEN
        ConfirmAdjPriceLineChange;

      GetServHeader;

      IF "Line Amount" <> xRec."Line Amount" THEN
        "VAT Difference" := 0;
      IF "Line Amount" <>
         ROUND(
           CalcChargeableQty * "Unit Price",
           Currency."Amount Rounding Precision") - "Line Discount Amount"
      THEN BEGIN
        "Line Amount" :=
          ROUND(CalcChargeableQty * "Unit Price",
            Currency."Amount Rounding Precision") - "Line Discount Amount";
        "VAT Difference" := 0;
      END;
      UpdateTaxAmounts;

      UpdateVATAmounts;
      UpdateGSTAmounts("GST Base Amount");
      InitOutstandingAmount;
      IF NOT IsCustCrLimitChecked AND (CurrFieldNo <> 0) THEN BEGIN
        IsCustCrLimitChecked := TRUE;
        CustCheckCrLimit.ServiceLineCheck(Rec);
      END;
      UpdateRemainingCostsAndAmounts;
    END;

    LOCAL PROCEDURE GetItem@12();
    BEGIN
      TESTFIELD("No.");
      IF "No." <> Item."No." THEN
        Item.GET("No.");
    END;

    LOCAL PROCEDURE GetDate@22() : Date;
    BEGIN
      IF ServHeader."Document Type" = ServHeader."Document Type"::Quote THEN
        EXIT(WORKDATE);

      EXIT(ServHeader."Posting Date");
    END;

    LOCAL PROCEDURE GetServHeader@14();
    BEGIN
      TESTFIELD("Document No.");
      IF ("Document Type" <> ServHeader."Document Type") OR ("Document No." <> ServHeader."No.") THEN BEGIN
        ServHeader.GET("Document Type","Document No.");
        IF ServHeader."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          ServHeader.TESTFIELD("Currency Factor");
          Currency.GET(ServHeader."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
      END;
    END;

    PROCEDURE UpdateUnitPrice@19(CalledByFieldNo@1000 : Integer);
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      ServHeader.GET("Document Type","Document No.");

      CalculateDiscount;
      SalesPriceCalcMgt.FindServLinePrice(ServHeader,Rec,CalledByFieldNo);
      VALIDATE("Unit Price");
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      IF ("Contract No." <> '') AND ("Appl.-to Service Entry" <> 0) THEN
        ViewDimensionSetEntries
      ELSE
        "Dimension Set ID" :=
          DimMgt.EditDimensionSet2(
            "Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."),
            "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ShowReservation@10();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD(Reserve);
      CLEAR(Reservation);
      Reservation.SetServiceLine(Rec);
      Reservation.RUNMODAL;
    END;

    PROCEDURE ShowReservationEntries@21(Modal@1000 : Boolean);
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,TRUE);
      ReserveServLine.FilterReservFor(ReservEntry,Rec);
      IF Modal THEN
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      ELSE
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    PROCEDURE AutoReserve@39();
    VAR
      QtyToReserve@1000 : Decimal;
      QtyToReserveBase@1001 : Decimal;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      IF Reserve = Reserve::Never THEN
        FIELDERROR(Reserve);
      ReserveServLine.ReservQuantity(Rec,QtyToReserve,QtyToReserveBase);
      IF QtyToReserveBase <> 0 THEN BEGIN
        ReservMgt.SetServLine(Rec);
        ReservMgt.AutoReserve(FullAutoReservation,'',"Order Date",QtyToReserve,QtyToReserveBase);
        FIND;
        IF NOT FullAutoReservation THEN BEGIN
          COMMIT;
          IF CONFIRM(Text012,TRUE) THEN BEGIN
            ShowReservation;
            FIND;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE Clearfields@6();
    VAR
      TempServLine@1000 : Record 5902;
    BEGIN
      TempServLine := Rec;
      INIT;

      IF CurrFieldNo <> FIELDNO(Type) THEN
        "No." := TempServLine."No.";

      Type := TempServLine.Type;
      IF Type <> Type::" " THEN
        Quantity := TempServLine.Quantity;

      "Line No." := TempServLine."Line No.";
      VALIDATE("Service Item Line No.",TempServLine."Service Item Line No.");
      "Service Item No." := TempServLine."Service Item No.";
      "Service Item Serial No." := TempServLine."Service Item Serial No.";
      "Document Type" := TempServLine."Document Type";
      "Document No." := TempServLine."Document No.";
      "Gen. Bus. Posting Group" := TempServLine."Gen. Bus. Posting Group";
      "Order Date" := TempServLine."Order Date";
      "Customer No." := TempServLine."Customer No.";
      "Ship-to Code" := TempServLine."Ship-to Code";
      "Posting Date" := TempServLine."Posting Date";
      "System-Created Entry" := TempServLine."System-Created Entry";
      "Price Adjmt. Status" := "Price Adjmt. Status"::" ";
      "Time Sheet No." := TempServLine."Time Sheet No.";
      "Time Sheet Line No." := TempServLine."Time Sheet Line No.";
      "Time Sheet Date" := TempServLine."Time Sheet Date";
      IF "No." <> xRec."No." THEN
        VALIDATE("Job Planning Line No.",0);
    END;

    PROCEDURE ShowNonstock@32();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.",'');
      IF PAGE.RUNMODAL(PAGE::"Nonstock Item List",NonstockItem) = ACTION::LookupOK THEN BEGIN
        NonstockItem.TESTFIELD("Item Category Code");
        ItemCategory.GET(NonstockItem."Item Category Code");
        ItemCategory.TESTFIELD("Def. Gen. Prod. Posting Group");
        ItemCategory.TESTFIELD("Def. Inventory Posting Group");

        "No." := NonstockItem."Entry No.";
        NonstockItemMgt.NonStockFSM(Rec);
        VALIDATE("No.","No.");
        VALIDATE("Unit Price",NonstockItem."Unit Price");
      END;
    END;

    LOCAL PROCEDURE CalcBaseQty@11(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE ShowItemSub@30();
    BEGIN
      ItemSubstitutionMgt.ItemServiceSubstGet(Rec);
    END;

    LOCAL PROCEDURE GetCurrency@17();
    BEGIN
      IF "Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        Currency.GET("Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    PROCEDURE SetHideReplacementDialog@18(NewHideReplacementDialog@1000 : Boolean);
    BEGIN
      HideReplacementDialog := NewHideReplacementDialog;
    END;

    LOCAL PROCEDURE CheckIfServItemReplacement@9(ComponentLineNo@1000 : Integer);
    BEGIN
      IF "Service Item Line No." <> 0 THEN BEGIN
        ServiceLine.RESET;
        ServiceLine.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.","Component Line No.");
        ServiceLine.SETRANGE("Document Type","Document Type");
        ServiceLine.SETRANGE("Document No.","Document No.");
        ServiceLine.SETRANGE("Service Item Line No.","Service Item Line No.");
        ServiceLine.SETFILTER("Line No.",'<>%1',"Line No.");
        ServiceLine.SETRANGE("Component Line No.",ComponentLineNo);
        ServiceLine.SETFILTER("Spare Part Action",'<>%1',"Spare Part Action"::" ");
        IF ServiceLine.FINDFIRST THEN
          ERROR(Text021,
            ServItemComponent.TABLECAPTION,ServiceLine.TABLECAPTION,ServiceLine."Line No.");
      END;
    END;

    PROCEDURE IsInbound@79() : Boolean;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order,ServiceLine."Document Type"::Invoice:
          EXIT("Quantity (Base)" < 0);
        ServiceLine."Document Type"::"Credit Memo":
          EXIT("Quantity (Base)" > 0);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD("Quantity (Base)");
      ReserveServLine.CallItemTracking(Rec);
    END;

    LOCAL PROCEDURE InsertItemTracking@20();
    VAR
      CreateReservEntry@1000 : Codeunit 99000830;
    BEGIN
      ServiceLine := Rec;
      IF TempTrackingSpecification.FINDFIRST THEN BEGIN
        ReserveServLine.DeleteLine(Rec);
        CLEAR(CreateReservEntry);
        WITH ServiceLine DO BEGIN
          CreateReservEntry.CreateReservEntryFor(DATABASE::"Service Line","Document Type","Document No.",
            '',0,"Line No.","Qty. per Unit of Measure",Quantity,"Quantity (Base)",
            TempTrackingSpecification."Serial No.",TempTrackingSpecification."Lot No.");
          CreateReservEntry.CreateEntry("No.","Variant Code","Location Code",Description,
            0D,"Posting Date",0,ReservEntry."Reservation Status"::Surplus);
        END;
        TempTrackingSpecification.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetDefaultBin@50();
    VAR
      Bin@1002 : Record 7354;
      BinType@1001 : Record 7303;
      WMSManagement@1000 : Codeunit 7302;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT;

      "Bin Code" := '';

      IF ("Location Code" <> '') AND ("No." <> '') THEN BEGIN
        GetLocation("Location Code");
        IF NOT Location."Bin Mandatory" THEN
          EXIT;
        IF (NOT Location."Directed Put-away and Pick") OR ("Document Type" <> "Document Type"::Order) THEN BEGIN
          WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code");
          IF ("Document Type" <> "Document Type"::Order) AND ("Bin Code" <> '') AND Location."Directed Put-away and Pick"
          THEN BEGIN
            // Clear the bin code if the bin is not of pick type
            Bin.GET("Location Code","Bin Code");
            BinType.GET(Bin."Bin Type Code");
            IF NOT BinType.Pick THEN
              "Bin Code" := '';
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetItemTranslation@42();
    BEGIN
      GetServHeader;
      IF ItemTranslation.GET("No.","Variant Code",ServHeader."Language Code") THEN BEGIN
        Description := ItemTranslation.Description;
        "Description 2" := ItemTranslation."Description 2";
      END;
    END;

    LOCAL PROCEDURE GetSKU@5806() : Boolean;
    BEGIN
      IF (SKU."Location Code" = "Location Code") AND
         (SKU."Item No." = "No.") AND
         (SKU."Variant Code" = "Variant Code")
      THEN
        EXIT(TRUE);
      IF SKU.GET("Location Code","No.","Variant Code") THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE GetUnitCost@5808();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      GetItem;
      "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
      IF GetSKU THEN
        VALIDATE("Unit Cost (LCY)",SKU."Unit Cost" * "Qty. per Unit of Measure")
      ELSE
        VALIDATE("Unit Cost (LCY)",Item."Unit Cost" * "Qty. per Unit of Measure");
    END;

    LOCAL PROCEDURE FindResUnitCost@54();
    BEGIN
      ResCost.INIT;
      ResCost.Code := "No.";
      ResCost."Work Type Code" := "Work Type Code";
      CODEUNIT.RUN(CODEUNIT::"Resource-Find Cost",ResCost);
      VALIDATE("Unit Cost (LCY)",ResCost."Unit Cost" * "Qty. per Unit of Measure");
    END;

    PROCEDURE InitOutstanding@62();
    BEGIN
      IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
        "Outstanding Quantity" := Quantity;
        "Outstanding Qty. (Base)" := "Quantity (Base)";
      END ELSE BEGIN
        "Outstanding Quantity" := Quantity - "Quantity Shipped";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Shipped (Base)";
        "Qty. Shipped Not Invoiced" := "Quantity Shipped" - "Quantity Invoiced" - "Quantity Consumed";
        "Qty. Shipped Not Invd. (Base)" := "Qty. Shipped (Base)" - "Qty. Invoiced (Base)" - "Qty. Consumed (Base)";
      END;
      CALCFIELDS("Reserved Quantity");
      Planned := "Reserved Quantity" = "Outstanding Quantity";
      "Completely Shipped" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
      InitOutstandingAmount;
    END;

    PROCEDURE InitOutstandingAmount@61();
    VAR
      AmountInclVAT@1000 : Decimal;
    BEGIN
      IF (Quantity = 0) OR (CalcChargeableQty = 0) THEN BEGIN
        "Outstanding Amount" := 0;
        "Outstanding Amount (LCY)" := 0;
        "Shipped Not Invoiced" := 0;
        "Shipped Not Invoiced (LCY)" := 0;
      END ELSE BEGIN
        GetServHeader;
        AmountInclVAT := "Line Amount" - "Inv. Discount Amount";
        IF NOT ServHeader."Prices Including VAT" THEN
          IF "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" THEN
            AmountInclVAT := AmountInclVAT +
              ROUND(
                SalesTaxCalculate.CalculateTax(
                  "Tax Area Code","Tax Group Code","Tax Liable",ServHeader."Posting Date",
                  "Line Amount" - "Inv. Discount Amount","Quantity (Base)",ServHeader."Currency Factor"),
                Currency."Amount Rounding Precision")
          ELSE
            AmountInclVAT :=
              ROUND(
                AmountInclVAT *
                (1 + "VAT %" / 100 * (1 - ServHeader."VAT Base Discount %" / 100)),
                Currency."Amount Rounding Precision");
        VALIDATE(
          "Outstanding Amount",
          ROUND(
            AmountInclVAT * "Outstanding Quantity" / Quantity,
            Currency."Amount Rounding Precision"));
        IF "Document Type" <> "Document Type"::"Credit Memo" THEN
          VALIDATE(
            "Shipped Not Invoiced",
            ROUND(
              AmountInclVAT * "Qty. Shipped Not Invoiced" / CalcChargeableQty,
              Currency."Amount Rounding Precision"));
      END;
    END;

    PROCEDURE InitQtyToShip@60();
    BEGIN
      IF LineRequiresShipmentOrReceipt THEN BEGIN
        "Qty. to Ship" := 0;
        "Qty. to Ship (Base)" := 0;
      END ELSE BEGIN
        "Qty. to Ship" := "Outstanding Quantity";
        "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
      END;
      VALIDATE("Qty. to Consume");
      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToInvoice@59();
    BEGIN
      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;
      CalcInvDiscToInvoice;
    END;

    PROCEDURE MaxQtyToInvoice@58() : Decimal;
    BEGIN
      IF "Document Type" = "Document Type"::"Credit Memo" THEN
        EXIT(Quantity);

      EXIT("Quantity Shipped" + "Qty. to Ship" - "Quantity Invoiced" - "Quantity Consumed" - "Qty. to Consume");
    END;

    LOCAL PROCEDURE MaxQtyToInvoiceBase@57() : Decimal;
    BEGIN
      IF "Document Type" = "Document Type"::"Credit Memo" THEN
        EXIT("Quantity (Base)");

      EXIT(
        "Qty. Shipped (Base)" + "Qty. to Ship (Base)" -
        "Qty. Invoiced (Base)" - "Qty. Consumed (Base)" -
        "Qty. to Consume (Base)");
    END;

    LOCAL PROCEDURE CalcInvDiscToInvoice@37();
    VAR
      OldInvDiscAmtToInv@1000 : Decimal;
    BEGIN
      GetServHeader;
      OldInvDiscAmtToInv := "Inv. Disc. Amount to Invoice";
      IF (Quantity = 0) OR (CalcChargeableQty = 0) THEN
        VALIDATE("Inv. Disc. Amount to Invoice",0)
      ELSE
        VALIDATE(
          "Inv. Disc. Amount to Invoice",
          ROUND(
            "Inv. Discount Amount" * "Qty. to Invoice" / CalcChargeableQty,
            Currency."Amount Rounding Precision"));

      IF OldInvDiscAmtToInv <> "Inv. Disc. Amount to Invoice" THEN BEGIN
        "Amount Including VAT" := "Amount Including VAT" - "VAT Difference";
        "VAT Difference" := 0;
      END;
    END;

    PROCEDURE ItemExists@63(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item2@1001 : Record 27;
    BEGIN
      IF Type = Type::Item THEN
        IF NOT Item2.GET(ItemNo) THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE InitItemAppl@40(OnlyApplTo@1000 : Boolean);
    BEGIN
      "Appl.-to Item Entry" := 0;
      IF NOT OnlyApplTo THEN
        "Appl.-from Item Entry" := 0;
    END;

    LOCAL PROCEDURE GetResource@49();
    BEGIN
      TESTFIELD("No.");
      IF "No." <> Resource."No." THEN
        Resource.GET("No.");
    END;

    LOCAL PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    BEGIN
      IF NOT ServHeader.GET("Document Type","Document No.") THEN BEGIN
        ServHeader."No." := '';
        ServHeader.INIT;
      END;
      IF ServHeader."Prices Including VAT" THEN
        EXIT('2,1,' + GetFieldCaption(FieldNumber));

      EXIT('2,0,' + GetFieldCaption(FieldNumber));
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.GET(DATABASE::"Service Line",FieldNumber);
      EXIT(Field."Field Caption");
    END;

    LOCAL PROCEDURE UpdateVATAmounts@38();
    VAR
      ServiceLine2@1000 : Record 5902;
      TotalLineAmount@1005 : Decimal;
      TotalInvDiscAmount@1004 : Decimal;
      TotalAmount@1001 : Decimal;
      TotalAmountInclVAT@1002 : Decimal;
      TotalQuantityBase@1003 : Decimal;
    BEGIN
      GetServHeader;
      ServiceLine2.SETRANGE("Document Type","Document Type");
      ServiceLine2.SETRANGE("Document No.","Document No.");
      ServiceLine2.SETFILTER("Line No.",'<>%1',"Line No.");
      IF "Line Amount" = 0 THEN
        IF xRec."Line Amount" >= 0 THEN
          ServiceLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          ServiceLine2.SETFILTER(Amount,'<%1',0)
      ELSE
        IF "Line Amount" > 0 THEN
          ServiceLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          ServiceLine2.SETFILTER(Amount,'<%1',0);
      ServiceLine2.SETRANGE("VAT Identifier","VAT Identifier");
      ServiceLine2.SETRANGE("Tax Group Code","Tax Group Code");

      IF "Line Amount" = "Inv. Discount Amount" THEN BEGIN
        Amount := 0;
        "VAT Base Amount" := 0;
        "Amount Including VAT" := 0;
      END ELSE BEGIN
        TotalLineAmount := 0;
        TotalInvDiscAmount := 0;
        TotalAmount := 0;
        TotalAmountInclVAT := 0;
        TotalQuantityBase := 0;
        IF ("VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax") OR
           (("VAT Calculation Type" IN
             ["VAT Calculation Type"::"Normal VAT",
              "VAT Calculation Type"::"Reverse Charge VAT"]) AND
            ("VAT %" <> 0))
        THEN
          IF NOT ServiceLine2.ISEMPTY THEN BEGIN
            ServiceLine2.CALCSUMS("Line Amount","Inv. Discount Amount",Amount,"Amount Including VAT","Quantity (Base)");
            TotalLineAmount := ServiceLine2."Line Amount";
            TotalInvDiscAmount := ServiceLine2."Inv. Discount Amount";
            TotalAmount := ServiceLine2.Amount;
            TotalAmountInclVAT := ServiceLine2."Amount Including VAT";
            TotalQuantityBase := ServiceLine2."Quantity (Base)";
          END;

        IF ServHeader."Prices Including VAT" THEN
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount :=
                  (TotalLineAmount - TotalInvDiscAmount + "Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100) -
                  TotalAmount;
                "VAT Base Amount" :=
                  ROUND(
                    Amount * (1 - ServHeader."VAT Base Discount %" / 100),
                    Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  ROUND(TotalAmount + Amount +
                    (TotalAmount + Amount) * (1 - ServHeader."VAT Base Discount %" / 100) * "VAT %" / 100 -
                    TotalAmountInclVAT,Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                ServHeader.TESTFIELD("VAT Base Discount %",0);
                Amount :=
                  SalesTaxCalculate.ReverseCalculateTax(
                    "Tax Area Code","Tax Group Code","Tax Liable",ServHeader."Posting Date",
                    TotalAmountInclVAT + "Amount Including VAT",TotalQuantityBase + "Quantity (Base)",
                    ServHeader."Currency Factor") -
                  TotalAmount;
                IF Amount <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - Amount) / Amount,0.00001)
                ELSE
                  "VAT %" := 0;
                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
              END;
          END
        ELSE
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" :=
                  ROUND(Amount * (1 - ServHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    (TotalAmount + Amount) * (1 - ServHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT;
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
                "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount";
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    SalesTaxCalculate.CalculateTax(
                      "Tax Area Code","Tax Group Code","Tax Liable",ServHeader."Posting Date",
                      TotalAmount + Amount,TotalQuantityBase + "Quantity (Base)",
                      ServHeader."Currency Factor"),Currency."Amount Rounding Precision") -
                  TotalAmountInclVAT;
                IF "VAT Base Amount" <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                ELSE
                  "VAT %" := 0;
              END;
          END;
      END;
    END;

    PROCEDURE MaxQtyToConsume@47() : Decimal;
    BEGIN
      EXIT(Quantity - "Quantity Shipped");
    END;

    PROCEDURE MaxQtyToConsumeBase@46() : Decimal;
    BEGIN
      EXIT("Quantity (Base)" - "Qty. Shipped (Base)");
    END;

    PROCEDURE InitQtyToConsume@48();
    BEGIN
      "Qty. to Consume" := MaxQtyToConsume;
      "Qty. to Consume (Base)" := MaxQtyToConsumeBase;
      InitQtyToInvoice;
    END;

    PROCEDURE SetServHeader@24(NewServHeader@1000 : Record 5900);
    BEGIN
      ServHeader := NewServHeader;

      IF ServHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        ServHeader.TESTFIELD("Currency Factor");
        Currency.GET(ServHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    PROCEDURE CalcVATAmountLines@35(QtyType@1000 : 'General,Invoicing,Shipping,Consuming';VAR ServHeader@1001 : Record 5900;VAR ServiceLine@1002 : Record 5902;VAR VATAmountLine@1003 : Record 290;isShip@1008 : Boolean);
    VAR
      Cust@1013 : Record 18;
      CustPostingGroup@1014 : Record 92;
      PrevVatAmountLine@1007 : Record 290;
      Currency@1004 : Record 4;
      SalesSetup@1009 : Record 311;
      SalesTaxCalculate@1005 : Codeunit 398;
      QtyFactor@1006 : Decimal;
      TotalVATAmount@1012 : Decimal;
      RoundingLineInserted@1011 : Boolean;
    BEGIN
      IF ServHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(ServHeader."Currency Code");

      VATAmountLine.DELETEALL;

      WITH ServiceLine DO BEGIN
        SETRANGE("Document Type",ServHeader."Document Type");
        SETRANGE("Document No.",ServHeader."No.");
        SETFILTER(Type,'>0');
        SETFILTER(Quantity,'<>0');
        SalesSetup.GET;
        IF SalesSetup."Invoice Rounding" THEN BEGIN
          Cust.GET(ServHeader."Bill-to Customer No.");
          CustPostingGroup.GET(Cust."Customer Posting Group");
        END;
        IF FINDSET THEN
          REPEAT
            IF Type = Type::"G/L Account" THEN
              RoundingLineInserted := ("No." = CustPostingGroup."Invoice Rounding Account") OR RoundingLineInserted;
            IF "VAT Calculation Type" IN
               ["VAT Calculation Type"::"Reverse Charge VAT","VAT Calculation Type"::"Sales Tax"]
            THEN
              "VAT %" := 0;
            IF NOT
               VATAmountLine.GET(
                 "VAT Identifier",
                 "VAT Calculation Type",
                 "Tax Group Code",
                 FALSE,"Line Amount" >= 0)
            THEN BEGIN
              VATAmountLine.INIT;
              VATAmountLine."VAT Identifier" := "VAT Identifier";
              VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
              VATAmountLine."Tax Group Code" := "Tax Group Code";
              VATAmountLine."VAT %" := "VAT %";
              VATAmountLine.Modified := TRUE;
              VATAmountLine.Positive := "Line Amount" >= 0;
              VATAmountLine.INSERT;
            END;
            QtyFactor := 0;
            CASE QtyType OF
              QtyType::Invoicing:
                BEGIN
                  CASE TRUE OF
                    ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND NOT isShip:
                      BEGIN
                        IF CalcChargeableQty <> 0 THEN
                          QtyFactor := GetAbsMin("Qty. to Invoice","Qty. Shipped Not Invoiced") / CalcChargeableQty;
                        VATAmountLine.Quantity :=
                          VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Qty. Shipped Not Invd. (Base)");
                      END;
                    "Document Type" IN ["Document Type"::"Credit Memo"]:
                      BEGIN
                        QtyFactor := GetAbsMin("Qty. to Invoice",Quantity) / Quantity;
                        VATAmountLine.Quantity :=
                          VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Quantity (Base)");
                      END;
                    ELSE BEGIN
                      IF CalcChargeableQty <> 0 THEN
                        QtyFactor := "Qty. to Invoice" / CalcChargeableQty;
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                    END;
                  END;
                  VATAmountLine."Line Amount" :=
                    VATAmountLine."Line Amount" +
                    ROUND("Line Amount" * QtyFactor,Currency."Amount Rounding Precision");
                  IF "Allow Invoice Disc." THEN
                    VATAmountLine."Inv. Disc. Base Amount" :=
                      VATAmountLine."Inv. Disc. Base Amount" +
                      ROUND("Line Amount" * QtyFactor,Currency."Amount Rounding Precision");
                  VATAmountLine."Invoice Discount Amount" :=
                    VATAmountLine."Invoice Discount Amount" + "Inv. Disc. Amount to Invoice";
                  VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                  VATAmountLine.MODIFY;
                END;
              QtyType::Shipping:
                BEGIN
                  IF "Document Type" IN
                     ["Document Type"::"Credit Memo"]
                  THEN BEGIN
                    QtyFactor := 1;
                    VATAmountLine.Quantity := VATAmountLine.Quantity + "Quantity (Base)";
                  END ELSE BEGIN
                    QtyFactor := "Qty. to Ship" / Quantity;
                    VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Ship (Base)";
                  END;
                  VATAmountLine."Line Amount" :=
                    VATAmountLine."Line Amount" +
                    ROUND("Line Amount" * QtyFactor,Currency."Amount Rounding Precision");
                  IF "Allow Invoice Disc." THEN
                    VATAmountLine."Inv. Disc. Base Amount" :=
                      VATAmountLine."Inv. Disc. Base Amount" +
                      ROUND("Line Amount" * QtyFactor,Currency."Amount Rounding Precision");
                  VATAmountLine."Invoice Discount Amount" :=
                    VATAmountLine."Invoice Discount Amount" +
                    ROUND("Inv. Discount Amount" * QtyFactor,Currency."Amount Rounding Precision");
                  VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                  VATAmountLine.MODIFY;
                END;
              QtyType::Consuming:
                BEGIN
                  CASE TRUE OF
                    ("Document Type" = "Document Type"::Order) AND NOT isShip:
                      BEGIN
                        QtyFactor := GetAbsMin("Qty. to Consume","Qty. Shipped Not Invoiced") / Quantity;
                        VATAmountLine.Quantity :=
                          VATAmountLine.Quantity + GetAbsMin("Qty. to Consume (Base)","Qty. Shipped Not Invd. (Base)");
                      END;
                    ELSE BEGIN
                      QtyFactor := "Qty. to Consume" / Quantity;
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Consume (Base)";
                    END;
                  END;
                END
              ELSE BEGIN
                VATAmountLine.Quantity := VATAmountLine.Quantity + "Quantity (Base)";
                VATAmountLine."Line Amount" := VATAmountLine."Line Amount" + "Line Amount";
                IF "Allow Invoice Disc." THEN
                  VATAmountLine."Inv. Disc. Base Amount" :=
                    VATAmountLine."Inv. Disc. Base Amount" + "Line Amount";
                VATAmountLine."Invoice Discount Amount" :=
                  VATAmountLine."Invoice Discount Amount" + "Inv. Discount Amount";
                VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                VATAmountLine.MODIFY;
              END;
            END;
            TotalVATAmount := TotalVATAmount + "Amount Including VAT" - Amount + "VAT Difference";
          UNTIL NEXT = 0;
        SETRANGE(Type);
        SETRANGE(Quantity);
      END;

      WITH VATAmountLine DO
        IF FIND('-') THEN
          REPEAT
            IF (PrevVatAmountLine."VAT Identifier" <> "VAT Identifier") OR
               (PrevVatAmountLine."VAT Calculation Type" <> "VAT Calculation Type") OR
               (PrevVatAmountLine."Tax Group Code" <> "Tax Group Code") OR
               (PrevVatAmountLine."Use Tax" <> "Use Tax")
            THEN
              PrevVatAmountLine.INIT;
            IF ServHeader."Prices Including VAT" THEN BEGIN
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT Base" :=
                      ROUND(
                        ("Line Amount" - "Invoice Discount Amount") / (1 + "VAT %" / 100),
                        Currency."Amount Rounding Precision") - "VAT Difference";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        ("Line Amount" - "Invoice Discount Amount" - "VAT Base" - "VAT Difference") *
                        (1 - ServHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "VAT Base" + "VAT Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE BEGIN
                      PrevVatAmountLine := VATAmountLine;
                      PrevVatAmountLine."VAT Amount" :=
                        ("Line Amount" - "Invoice Discount Amount" - "VAT Base" - "VAT Difference") *
                        (1 - ServHeader."VAT Base Discount %" / 100);
                      PrevVatAmountLine."VAT Amount" :=
                        PrevVatAmountLine."VAT Amount" -
                        ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    END;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Base" :=
                      ROUND(
                        SalesTaxCalculate.ReverseCalculateTax(
                          ServHeader."Tax Area Code","Tax Group Code",ServHeader."Tax Liable",
                          ServHeader."Posting Date","Amount Including VAT",Quantity,ServHeader."Currency Factor"),
                        Currency."Amount Rounding Precision");
                    "VAT Amount" := "VAT Difference" + "Amount Including VAT" - "VAT Base";
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                  END;
              END;
            END ELSE
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        "VAT Base" * "VAT %" / 100 * (1 - ServHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount" + "VAT Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE BEGIN
                      PrevVatAmountLine := VATAmountLine;
                      PrevVatAmountLine."VAT Amount" :=
                        "VAT Base" * "VAT %" / 100 * (1 - ServHeader."VAT Base Discount %" / 100);
                      PrevVatAmountLine."VAT Amount" :=
                        PrevVatAmountLine."VAT Amount" -
                        ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    END;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Amount" :=
                      SalesTaxCalculate.CalculateTax(
                        ServHeader."Tax Area Code","Tax Group Code",ServHeader."Tax Liable",
                        ServHeader."Posting Date","VAT Base",Quantity,ServHeader."Currency Factor");
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "VAT Base" + "VAT Amount";
                  END;
              END;

            IF RoundingLineInserted THEN
              TotalVATAmount := TotalVATAmount - "VAT Amount";
            "Calculated VAT Amount" := "VAT Amount" - "VAT Difference";
            MODIFY;
          UNTIL NEXT = 0;

      IF RoundingLineInserted AND (TotalVATAmount <> 0) THEN
        IF VATAmountLine.GET(ServiceLine."VAT Identifier",ServiceLine."VAT Calculation Type",
             ServiceLine."Tax Group Code",FALSE,ServiceLine."Line Amount" >= 0)
        THEN BEGIN
          VATAmountLine."VAT Amount" := VATAmountLine."VAT Amount" + TotalVATAmount;
          VATAmountLine."Amount Including VAT" := VATAmountLine."Amount Including VAT" + TotalVATAmount;
          VATAmountLine."Calculated VAT Amount" := VATAmountLine."Calculated VAT Amount" + TotalVATAmount;
          VATAmountLine.MODIFY;
        END;
    END;

    LOCAL PROCEDURE GetAbsMin@56(QTyToHandle@1000 : Decimal;QtyHandled@1001 : Decimal) : Decimal;
    BEGIN
      IF QtyHandled = 0 THEN
        EXIT(QTyToHandle);
      IF ABS(QtyHandled) < ABS(QTyToHandle) THEN
        EXIT(QtyHandled);

      EXIT(QTyToHandle);
    END;

    PROCEDURE UpdateVATOnLines@36(QtyType@1000 : 'General,Invoicing,Shipping';VAR ServHeader@1001 : Record 5900;VAR ServiceLine@1002 : Record 5902;VAR VATAmountLine@1003 : Record 290);
    VAR
      TempVATAmountLineRemainder@1004 : TEMPORARY Record 290;
      Currency@1005 : Record 4;
      NewAmount@1006 : Decimal;
      NewAmountIncludingVAT@1007 : Decimal;
      NewVATBaseAmount@1008 : Decimal;
      VATAmount@1009 : Decimal;
      VATDifference@1010 : Decimal;
      InvDiscAmount@1011 : Decimal;
      LineAmountToInvoice@1012 : Decimal;
    BEGIN
      IF QtyType = QtyType::Shipping THEN
        EXIT;
      IF ServHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(ServHeader."Currency Code");

      TempVATAmountLineRemainder.DELETEALL;

      WITH ServiceLine DO BEGIN
        SETRANGE("Document Type",ServHeader."Document Type");
        SETRANGE("Document No.",ServHeader."No.");
        SETFILTER(Type,'>0');
        SETFILTER(Quantity,'<>0');
        CASE QtyType OF
          QtyType::Invoicing:
            SETFILTER("Qty. to Invoice",'<>0');
          QtyType::Shipping:
            SETFILTER("Qty. to Ship",'<>0');
        END;
        LOCKTABLE;
        IF FIND('-') THEN
          REPEAT
            VATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0);
            IF VATAmountLine.Modified THEN BEGIN
              IF NOT
                 TempVATAmountLineRemainder.GET(
                   "VAT Identifier",
                   "VAT Calculation Type",
                   "Tax Group Code",
                   FALSE,"Line Amount" >= 0)
              THEN BEGIN
                TempVATAmountLineRemainder := VATAmountLine;
                TempVATAmountLineRemainder.INIT;
                TempVATAmountLineRemainder.INSERT;
              END;

              IF QtyType = QtyType::General THEN
                LineAmountToInvoice := "Line Amount"
              ELSE
                LineAmountToInvoice :=
                  ROUND("Line Amount" * "Qty. to Invoice" / CalcChargeableQty,Currency."Amount Rounding Precision");

              IF "Allow Invoice Disc." THEN BEGIN
                IF VATAmountLine."Inv. Disc. Base Amount" = 0 THEN
                  InvDiscAmount := 0
                ELSE BEGIN
                  TempVATAmountLineRemainder."Invoice Discount Amount" :=
                    TempVATAmountLineRemainder."Invoice Discount Amount" +
                    VATAmountLine."Invoice Discount Amount" * LineAmountToInvoice /
                    VATAmountLine."Inv. Disc. Base Amount";
                  InvDiscAmount :=
                    ROUND(
                      TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
                  TempVATAmountLineRemainder."Invoice Discount Amount" :=
                    TempVATAmountLineRemainder."Invoice Discount Amount" - InvDiscAmount;
                END;
                IF QtyType = QtyType::General THEN BEGIN
                  "Inv. Discount Amount" := InvDiscAmount;
                  CalcInvDiscToInvoice;
                END ELSE
                  "Inv. Disc. Amount to Invoice" := InvDiscAmount;
              END ELSE
                InvDiscAmount := 0;

              IF QtyType = QtyType::General THEN
                IF ServHeader."Prices Including VAT" THEN BEGIN
                  IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount" = 0) OR
                     ("Line Amount" = 0)
                  THEN BEGIN
                    VATAmount := 0;
                    NewAmountIncludingVAT := 0;
                  END ELSE BEGIN
                    VATAmount :=
                      TempVATAmountLineRemainder."VAT Amount" +
                      VATAmountLine."VAT Amount" *
                      ("Line Amount" - "Inv. Discount Amount") /
                      (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                    NewAmountIncludingVAT :=
                      TempVATAmountLineRemainder."Amount Including VAT" +
                      VATAmountLine."Amount Including VAT" *
                      ("Line Amount" - "Inv. Discount Amount") /
                      (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                  END;
                  NewAmount :=
                    ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision") -
                    ROUND(VATAmount,Currency."Amount Rounding Precision");
                  NewVATBaseAmount :=
                    ROUND(
                      NewAmount * (1 - ServHeader."VAT Base Discount %" / 100),
                      Currency."Amount Rounding Precision");
                END ELSE BEGIN
                  IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
                    VATAmount := "Line Amount" - "Inv. Discount Amount";
                    NewAmount := 0;
                    NewVATBaseAmount := 0;
                  END ELSE BEGIN
                    NewAmount := "Line Amount" - "Inv. Discount Amount";
                    NewVATBaseAmount :=
                      ROUND(
                        NewAmount * (1 - ServHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision");
                    IF VATAmountLine."VAT Base" = 0 THEN
                      VATAmount := 0
                    ELSE
                      VATAmount :=
                        TempVATAmountLineRemainder."VAT Amount" +
                        VATAmountLine."VAT Amount" * NewAmount / VATAmountLine."VAT Base";
                  END;
                  NewAmountIncludingVAT := NewAmount + ROUND(VATAmount,Currency."Amount Rounding Precision");
                END
              ELSE BEGIN
                IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount") = 0 THEN
                  VATDifference := 0
                ELSE
                  VATDifference :=
                    TempVATAmountLineRemainder."VAT Difference" +
                    VATAmountLine."VAT Difference" * (LineAmountToInvoice - InvDiscAmount) /
                    (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                IF LineAmountToInvoice = 0 THEN
                  "VAT Difference" := 0
                ELSE
                  "VAT Difference" := ROUND(VATDifference,Currency."Amount Rounding Precision");
              END;

              IF QtyType = QtyType::General THEN BEGIN
                Amount := NewAmount;
                "Amount Including VAT" := ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                "VAT Base Amount" := NewVATBaseAmount;
              END;
              InitOutstanding;
              MODIFY;

              TempVATAmountLineRemainder."Amount Including VAT" :=
                NewAmountIncludingVAT - ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
              TempVATAmountLineRemainder."VAT Amount" := VATAmount - NewAmountIncludingVAT + NewAmount;
              TempVATAmountLineRemainder."VAT Difference" := VATDifference - "VAT Difference";
              TempVATAmountLineRemainder.MODIFY;
            END;
          UNTIL NEXT = 0;
        SETRANGE(Type);
        SETRANGE(Quantity);
        SETRANGE("Qty. to Invoice");
        SETRANGE("Qty. to Ship");
      END;
    END;

    LOCAL PROCEDURE CalcUnitCost@5809(ItemLedgEntry@1000 : Record 32) : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
      UnitCost@1004 : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
        CALCSUMS("Cost Amount (Actual)","Cost Amount (Expected)");
        UnitCost :=
          ("Cost Amount (Expected)" + "Cost Amount (Actual)") / ItemLedgEntry.Quantity;
      END;

      EXIT(ABS(UnitCost * "Qty. per Unit of Measure"));
    END;

    LOCAL PROCEDURE SelectItemEntry@45(CurrentFieldNo@1000 : Integer);
    VAR
      ItemLedgEntry@1001 : Record 32;
      ServLine3@1002 : Record 5902;
    BEGIN
      ItemLedgEntry.SETRANGE("Item No.","No.");
      IF "Location Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code","Location Code");
      ItemLedgEntry.SETRANGE("Variant Code","Variant Code");

      IF CurrentFieldNo = FIELDNO("Appl.-to Item Entry") THEN BEGIN
        ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
        ItemLedgEntry.SETRANGE(Positive,TRUE);
        ItemLedgEntry.SETRANGE(Open,TRUE);
      END ELSE BEGIN
        ItemLedgEntry.SETCURRENTKEY("Item No.",Positive);
        ItemLedgEntry.SETRANGE(Positive,FALSE);
      END;
      IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN BEGIN
        ServLine3 := Rec;
        IF CurrentFieldNo = FIELDNO("Appl.-to Item Entry") THEN
          ServLine3.VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.")
        ELSE
          ServLine3.VALIDATE("Appl.-from Item Entry",ItemLedgEntry."Entry No.");
        CheckItemAvailable(CurrentFieldNo);
        Rec := ServLine3;
      END;
    END;

    PROCEDURE CalcChargeableQty@1() : Decimal;
    BEGIN
      EXIT(Quantity - "Quantity Consumed" - "Qty. to Consume");
    END;

    PROCEDURE SignedXX@5(Value@1000 : Decimal) : Decimal;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote,
        "Document Type"::Order,
        "Document Type"::Invoice:
          EXIT(-Value);
        "Document Type"::"Credit Memo":
          EXIT(Value);
      END;
    END;

    PROCEDURE IsShipment@55() : Boolean;
    BEGIN
      EXIT(SignedXX("Quantity (Base)") < 0);
    END;

    LOCAL PROCEDURE AdjustMaxLabourUnitPrice@23(ResUnitPrice@1000 : Decimal);
    VAR
      Res@1001 : Record 156;
    BEGIN
      IF Type <> Type::Resource THEN
        EXIT;
      IF (ResUnitPrice > ServHeader."Max. Labor Unit Price") AND
         (ServHeader."Max. Labor Unit Price" <> 0)
      THEN BEGIN
        Res.GET("No.");
        "Unit Price" := ServHeader."Max. Labor Unit Price";
        MESSAGE(
          STRSUBSTNO(
            Text018,
            Res.TABLECAPTION,FIELDCAPTION("Unit Price"),
            ServHeader.FIELDCAPTION("Max. Labor Unit Price"),
            ServHeader."Max. Labor Unit Price"));
      END
    END;

    PROCEDURE CheckLineDiscount@33(LineDisc@1000 : Decimal);
    BEGIN
      IF ("Line Discount Type" = "Line Discount Type"::"Contract Disc.") AND
         ("Contract No." <> '') AND NOT "Exclude Contract Discount" AND
         NOT ("Document Type" = "Document Type"::Invoice)
      THEN
        ERROR(Text043,FIELDCAPTION("Line Discount %"),FIELDCAPTION("Line Discount Type"),"Line Discount Type");

      IF (LineDisc < "Warranty Disc. %") AND
         Warranty AND NOT "Exclude Warranty"
      THEN
        ERROR(Text010,FIELDCAPTION("Line Discount %"),FIELDCAPTION("Warranty Disc. %"));

      IF "Line Discount %" <> 0 THEN
        "Line Discount Type" := "Line Discount Type"::Manual
      ELSE
        "Line Discount Type" := "Line Discount Type"::" ";
    END;

    PROCEDURE ConfirmAdjPriceLineChange@41();
    BEGIN
      IF "Price Adjmt. Status" = "Price Adjmt. Status"::Adjusted THEN
        IF CONFIRM(Text033 + Text034,FALSE) THEN
          "Price Adjmt. Status" := "Price Adjmt. Status"::Modified
        ELSE
          ERROR('');
    END;

    PROCEDURE SetHideCostWarning@2(Value@1000 : Boolean);
    BEGIN
      HideCostWarning := Value;
    END;

    LOCAL PROCEDURE CheckApplFromItemLedgEntry@157(VAR ItemLedgEntry@1000 : Record 32);
    VAR
      ItemTrackingLines@1003 : Page 6510;
      QtyBase@1001 : Decimal;
      ShippedQtyNotReturned@1002 : Decimal;
    BEGIN
      IF "Appl.-from Item Entry" = 0 THEN
        EXIT;

      TESTFIELD(Type,Type::Item);
      TESTFIELD(Quantity);
      IF "Document Type" IN ["Document Type"::"Credit Memo"] THEN BEGIN
        IF Quantity < 0 THEN
          FIELDERROR(Quantity,Text029);
      END ELSE BEGIN
        IF Quantity > 0 THEN
          FIELDERROR(Quantity,Text030);
      END;

      ItemLedgEntry.GET("Appl.-from Item Entry");
      ItemLedgEntry.TESTFIELD(Positive,FALSE);
      ItemLedgEntry.TESTFIELD("Item No.","No.");
      ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");
      IF ItemLedgEntry.TrackingExists THEN
        ERROR(Text040,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-from Item Entry"));

      IF "Document Type" IN ["Document Type"::"Credit Memo"] THEN
        QtyBase := "Quantity (Base)"
      ELSE
        QtyBase := "Qty. to Ship (Base)";

      IF ABS(QtyBase) > -ItemLedgEntry."Shipped Qty. Not Returned" THEN BEGIN
        IF "Qty. per Unit of Measure" = 0 THEN
          ShippedQtyNotReturned := ItemLedgEntry."Shipped Qty. Not Returned"
        ELSE
          ShippedQtyNotReturned :=
            ROUND(ItemLedgEntry."Shipped Qty. Not Returned" / "Qty. per Unit of Measure",0.00001);
        ERROR(
          Text039,
          -ShippedQtyNotReturned,ItemLedgEntry.TABLECAPTION,ItemLedgEntry."Entry No.");
      END;
    END;

    PROCEDURE SetHideWarrantyWarning@16(Value@1000 : Boolean);
    BEGIN
      HideWarrantyWarning := Value;
    END;

    PROCEDURE SplitResourceLine@43();
    VAR
      SumQty@1002 : Decimal;
      Qty@1001 : Decimal;
      TempDiscount@1005 : Decimal;
      NoOfServItems@1000 : Integer;
      NextLine@1004 : Integer;
    BEGIN
      TESTFIELD(Type,Type::Resource);
      TESTFIELD("No.");
      TESTFIELD("Service Item Line No.");
      TESTFIELD(Quantity);
      TESTFIELD("Quantity Shipped",0);

      ServItemLine.RESET;
      ServItemLine.SETRANGE("Document Type","Document Type");
      ServItemLine.SETRANGE("Document No.","Document No.");
      NoOfServItems := ServItemLine.COUNT;
      IF NoOfServItems <= 1 THEN
        ERROR(Text041);

      IF CONFIRM(Text044) THEN BEGIN
        ServiceLine.RESET;
        ServiceLine.SETRANGE("Document Type","Document Type");
        ServiceLine.SETRANGE("Document No.","Document No.");
        IF ServiceLine.FINDLAST THEN
          NextLine := ServiceLine."Line No." + 10000
        ELSE
          NextLine := 10000;

        Qty := ROUND(Quantity / NoOfServItems,0.01);
        IF ServItemLine.FIND('-') THEN
          REPEAT
            IF ServItemLine."Line No." <> "Service Item Line No." THEN BEGIN
              CLEAR(ServiceLine);
              ServiceLine.INIT;
              ServiceLine."Document Type" := "Document Type";
              ServiceLine."Document No." := "Document No.";
              ServiceLine."Line No." := NextLine;
              ServiceLine.INSERT(TRUE);
              ServiceLine.TRANSFERFIELDS(Rec,FALSE);
              ServiceLine.VALIDATE("Service Item Line No.",ServItemLine."Line No.");
              ServiceLine.VALIDATE("No.");

              ServiceLine.VALIDATE(Quantity,Qty);
              SumQty := SumQty + Qty;
              IF "Qty. to Consume" > 0 THEN
                ServiceLine.VALIDATE("Qty. to Consume",Qty);

              ServiceLine.VALIDATE("Contract No.",ServItemLine."Contract No.");
              IF NOT ServiceLine."Exclude Warranty" THEN
                ServiceLine.VALIDATE(Warranty,ServItemLine.Warranty);

              TempDiscount := "Line Discount %" - "Contract Disc. %" - "Warranty Disc. %";
              IF TempDiscount > 0 THEN BEGIN
                ServiceLine."Line Discount %" := ServiceLine."Line Discount %" + TempDiscount;
                IF ServiceLine."Line Discount %" > 100 THEN
                  ServiceLine."Line Discount %" := 100;
                ServiceLine.VALIDATE("Line Discount %");
              END;

              ServiceLine.MODIFY(TRUE);
              NextLine := NextLine + 10000;
            END;
          UNTIL ServItemLine.NEXT = 0;

        IF ServiceLine.GET("Document Type","Document No.","Line No.") THEN BEGIN
          IF "Qty. to Consume" > 0 THEN
            ServiceLine.VALIDATE("Qty. to Consume",Quantity - SumQty);
          ServiceLine.VALIDATE(Quantity,Quantity - SumQty);
          ServiceLine.MODIFY(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateDiscountsAmounts@44();
    BEGIN
      IF Type <> Type::" " THEN BEGIN
        TESTFIELD("Qty. per Unit of Measure");
        CalculateDiscount;
        VALIDATE("Unit Price");
      END;
    END;

    LOCAL PROCEDURE UpdateRemainingCostsAndAmounts@15();
    VAR
      TotalPrice@1000 : Decimal;
      AmountRoundingPrecision@1002 : Decimal;
      AmountRoundingPrecisionFCY@1001 : Decimal;
    BEGIN
      IF "Job Remaining Qty." <> 0 THEN BEGIN
        CLEAR(Currency);
        Currency.InitRoundingPrecision;
        AmountRoundingPrecision := Currency."Amount Rounding Precision";
        GetServHeader;
        AmountRoundingPrecisionFCY := Currency."Amount Rounding Precision";

        "Job Remaining Total Cost" := ROUND("Unit Cost" * "Job Remaining Qty.",AmountRoundingPrecisionFCY);
        "Job Remaining Total Cost (LCY)" := ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY(
              GetDate,"Currency Code",
              "Job Remaining Total Cost",ServHeader."Currency Factor"),
            AmountRoundingPrecision);

        TotalPrice := ROUND("Job Remaining Qty." * "Unit Price",AmountRoundingPrecisionFCY);
        "Job Remaining Line Amount" := TotalPrice - ROUND(TotalPrice * "Line Discount %" / 100,AmountRoundingPrecisionFCY);
      END ELSE BEGIN
        "Job Remaining Total Cost" := 0;
        "Job Remaining Total Cost (LCY)" := 0;
        "Job Remaining Line Amount" := 0;
      END;
    END;

    LOCAL PROCEDURE UpdateServDocRegister@1102601000(DeleteRecord@1102601000 : Boolean);
    VAR
      ServiceLine2@1102601001 : Record 5902;
    BEGIN
      ServiceLine2.RESET;
      ServiceLine2.SETRANGE("Document Type","Document Type");
      ServiceLine2.SETRANGE("Document No.","Document No.");
      IF DeleteRecord THEN
        ServiceLine2.SETRANGE("Contract No.","Contract No.")
      ELSE
        ServiceLine2.SETRANGE("Contract No.",xRec."Contract No.");
      ServiceLine2.SETFILTER("Line No.",'<>%1',"Line No.");

      IF ServiceLine2.ISEMPTY THEN
        IF xRec."Contract No." <> '' THEN BEGIN
          CLEAR(ServDocReg);
          IF "Document Type" = "Document Type"::Invoice THEN
            ServDocReg.SETRANGE(
              "Destination Document Type",
              ServDocReg."Destination Document Type"::Invoice)
          ELSE
            IF "Document Type" = "Document Type"::"Credit Memo" THEN
              ServDocReg.SETRANGE(
                "Destination Document Type",
                ServDocReg."Destination Document Type"::"Credit Memo");
          ServDocReg.SETRANGE("Destination Document No.","Document No.");
          ServDocReg.SETRANGE(
            "Source Document Type",ServDocReg."Source Document Type"::Contract);
          ServDocReg.SETRANGE("Source Document No.",xRec."Contract No.");
          ServDocReg.DELETEALL;
        END;

      IF ("Contract No." <> '') AND (Type <> Type::" ") AND NOT DeleteRecord THEN BEGIN
        IF "Document Type" = "Document Type"::Invoice THEN
          ServDocReg.InsertServSalesDocument(
            ServDocReg."Source Document Type"::Contract,"Contract No.",
            ServDocReg."Destination Document Type"::Invoice,"Document No.")
        ELSE
          IF "Document Type" = "Document Type"::"Credit Memo" THEN
            ServDocReg.InsertServSalesDocument(
              ServDocReg."Source Document Type"::Contract,"Contract No.",
              ServDocReg."Destination Document Type"::"Credit Memo","Document No.")
      END;
    END;

    PROCEDURE RowID1@51() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(ItemTrackingMgt.ComposeRowID(DATABASE::"Service Line","Document Type",
          "Document No.",'',0,"Line No."));
    END;

    LOCAL PROCEDURE UpdateReservation@53(CalledByFieldNo@1000 : Integer);
    VAR
      ReservationCheckDateConfl@1001 : Codeunit 99000815;
    BEGIN
      IF (CurrFieldNo <> CalledByFieldNo) AND (CurrFieldNo <> 0) THEN
        EXIT;

      CASE CalledByFieldNo OF
        FIELDNO("Needed by Date"),FIELDNO("Planned Delivery Date"):
          IF (xRec."Needed by Date" <> "Needed by Date") AND
             (Quantity <> 0) AND
             (Reserve <> Reserve::Never)
          THEN
            ReservationCheckDateConfl.ServiceInvLineCheck(Rec,TRUE);
        FIELDNO(Quantity):
          ReserveServLine.VerifyQuantity(Rec,xRec);
      END;
      ReserveServLine.VerifyChange(Rec,xRec);
    END;

    PROCEDURE ShowTracking@52();
    VAR
      OrderTrackingForm@1000 : Page 99000822;
    BEGIN
      OrderTrackingForm.SetServLine(Rec);
      OrderTrackingForm.RUNMODAL;
    END;

    PROCEDURE ShowOrderPromisingLine@64();
    VAR
      OrderPromisingLine@1000 : Record 99000880;
      OrderPromisingLines@1001 : Page 99000959;
    BEGIN
      OrderPromisingLine.SETRANGE("Source Type",OrderPromisingLine."Source Type"::"Service Order");
      OrderPromisingLine.SETRANGE("Source Type",OrderPromisingLine."Source Type"::"Service Order");
      OrderPromisingLine.SETRANGE("Source ID","Document No.");
      OrderPromisingLine.SETRANGE("Source Line No.","Line No.");

      OrderPromisingLines.SetSourceType(OrderPromisingLine."Source Type"::"Service Order");
      OrderPromisingLines.SETTABLEVIEW(OrderPromisingLine);
      OrderPromisingLines.RUNMODAL;
    END;

    PROCEDURE FilterLinesWithItemToPlan@70(VAR Item@1000 : Record 27);
    BEGIN
      RESET;
      SETCURRENTKEY(Type,"No.","Variant Code","Location Code","Needed by Date","Document Type");
      SETRANGE("Document Type","Document Type"::Order);
      SETRANGE(Type,Type::Item);
      SETRANGE("No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Needed by Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      SETFILTER("Outstanding Qty. (Base)",'<>0');
    END;

    PROCEDURE FindLinesWithItemToPlan@68(VAR Item@1000 : Record 27) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item);
      EXIT(FIND('-'));
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item);
      EXIT(NOT ISEMPTY);
    END;

    LOCAL PROCEDURE UpdateServiceLedgerEntry@65();
    VAR
      ServiceLedgerEntry@1000 : Record 5907;
      Currency@1002 : Record 4;
      GeneralLedgerSetup@1004 : Record 98;
      CurrencyExchangeRate@1006 : Record 330;
      LCYRoundingPrecision@1001 : Decimal;
      CurrencyFactor@1005 : Decimal;
    BEGIN
      IF "Appl.-to Service Entry" = 0 THEN
        EXIT;
      IF NOT ServiceLedgerEntry.GET("Appl.-to Service Entry") THEN
        EXIT;
      IF ("Unit Price" = xRec."Unit Price") AND ("Unit Cost" = xRec."Unit Cost") AND (Amount = xRec.Amount) AND
         ("Line Discount Amount" = xRec."Line Discount Amount") AND ("Line Discount %" = xRec."Line Discount %")
      THEN
        EXIT;

      CurrencyFactor := 1;
      IF "Currency Code" <> '' THEN BEGIN
        CurrencyExchangeRate.SETRANGE("Currency Code","Currency Code");
        CurrencyExchangeRate.SETRANGE("Starting Date",0D,"Order Date");
        IF CurrencyExchangeRate.FINDLAST THEN
          CurrencyFactor := CurrencyExchangeRate."Adjustment Exch. Rate Amount" / CurrencyExchangeRate."Relational Exch. Rate Amount";
      END;
      GeneralLedgerSetup.GET;
      LCYRoundingPrecision := 0.01;
      IF Currency.GET(GeneralLedgerSetup."LCY Code") THEN
        LCYRoundingPrecision := Currency."Amount Rounding Precision";

      IF "Unit Price" <> xRec."Unit Price" THEN
        ServiceLedgerEntry."Unit Price" := -ROUND("Unit Price" / CurrencyFactor,LCYRoundingPrecision);
      IF "Unit Cost (LCY)" <> xRec."Unit Cost (LCY)" THEN
        ServiceLedgerEntry."Unit Cost" := "Unit Cost (LCY)";
      IF Amount <> xRec.Amount THEN BEGIN
        ServiceLedgerEntry.Amount := -Amount;
        ServiceLedgerEntry."Amount (LCY)" := -ROUND(Amount / CurrencyFactor,LCYRoundingPrecision);
      END;
      IF "Line Discount Amount" <> xRec."Line Discount Amount" THEN
        ServiceLedgerEntry."Discount Amount" := ROUND("Line Discount Amount" / CurrencyFactor,LCYRoundingPrecision);
      IF "Line Discount %" <> xRec."Line Discount %" THEN
        ServiceLedgerEntry."Discount %" := "Line Discount %";
      ServiceLedgerEntry.MODIFY;
    END;

    LOCAL PROCEDURE UpdateWithWarehouseShip@66();
    BEGIN
      IF Type <> Type::Item THEN
        EXIT;
      IF "Document Type" IN ["Document Type"::Quote,"Document Type"::Order] THEN
        IF Location.RequireShipment("Location Code") THEN BEGIN
          VALIDATE("Qty. to Ship",0);
          VALIDATE("Qty. to Invoice",0);
        END ELSE
          VALIDATE("Qty. to Ship","Outstanding Quantity");
    END;

    LOCAL PROCEDURE CheckWarehouse@71();
    VAR
      Location2@1000 : Record 14;
      WhseSetup@1001 : Record 5769;
      WhseValidateSourceLine@1004 : Codeunit 5777;
      ShowDialog@1002 : ' ,Message,Error';
      DialogText@1003 : Text[100];
    BEGIN
      GetLocation("Location Code");
      IF "Location Code" = '' THEN BEGIN
        WhseSetup.GET;
        Location2."Require Shipment" := WhseSetup."Require Shipment";
        Location2."Require Pick" := WhseSetup."Require Pick";
        Location2."Require Receive" := WhseSetup."Require Receive";
        Location2."Require Put-away" := WhseSetup."Require Put-away";
      END ELSE
        Location2 := Location;

      DialogText := Text035 + ' ';

      IF "Document Type" = "Document Type"::Order THEN
        IF Location2."Directed Put-away and Pick" THEN BEGIN
          ShowDialog := ShowDialog::Error;
          IF Quantity >= 0 THEN
            DialogText := DialogText + ' ' + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
          ELSE
            DialogText := DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"));
        END ELSE BEGIN
          IF (Quantity >= 0) AND (Location2."Require Shipment" OR Location2."Require Pick") THEN BEGIN
            IF WhseValidateSourceLine.WhseLinesExist(DATABASE::"Service Line","Document Type","Document No.","Line No.",0,Quantity)
            THEN
              ShowDialog := ShowDialog::Error
            ELSE
              IF Location2."Require Shipment" THEN
                ShowDialog := ShowDialog::Message;
            IF Location2."Require Shipment" THEN
              DialogText :=
                DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
            ELSE BEGIN
              DialogText := Text036;
              DialogText :=
                DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Pick"));
            END;
          END;

          IF (Quantity < 0) AND (Location2."Require Receive" OR Location2."Require Put-away") THEN BEGIN
            IF WhseValidateSourceLine.WhseLinesExist(
                 DATABASE::"Service Line",
                 "Document Type",
                 "Document No.",
                 "Line No.",
                 0,
                 Quantity)
            THEN
              ShowDialog := ShowDialog::Error
            ELSE
              IF Location2."Require Receive" THEN
                ShowDialog := ShowDialog::Message;
            IF Location2."Require Receive" THEN
              DialogText := DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"))
            ELSE
              DialogText := Text036 + ' ' + Location2.GetRequirementText(Location2.FIELDNO("Require Put-away"));
          END;
        END;

      CASE ShowDialog OF
        ShowDialog::Message:
          MESSAGE(STRSUBSTNO(Text049,DialogText,FIELDCAPTION("Line No."),"Line No.") + Text050);
        ShowDialog::Error:
          ERROR(Text049,DialogText,FIELDCAPTION("Line No."),"Line No.");
      END;

      HandleDedicatedBin(TRUE);
    END;

    LOCAL PROCEDURE HandleDedicatedBin@73(IssueWarning@1000 : Boolean);
    VAR
      WhseIntegrationMgt@1001 : Codeunit 7317;
    BEGIN
      WhseIntegrationMgt.CheckIfBinDedicatedOnSrcDoc("Location Code","Bin Code",IssueWarning);
    END;

    LOCAL PROCEDURE TestStatusOpen@72();
    VAR
      ServHeader@1000 : Record 5900;
    BEGIN
      IF StatusCheckSuspended THEN
        EXIT;
      ServHeader.GET("Document Type","Document No.");
      IF (Type = Type::Item) OR (xRec.Type = Type::Item) THEN
        ServHeader.TESTFIELD("Release Status",ServHeader."Release Status"::Open);
    END;

    PROCEDURE SuspendStatusCheck@69(bSuspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := bSuspend;
    END;

    LOCAL PROCEDURE LineRequiresShipmentOrReceipt@74() : Boolean;
    VAR
      Location@1000 : Record 14;
    BEGIN
      IF ("Document Type" <> "Document Type"::Order) OR (Type <> Type::Item) THEN
        EXIT(FALSE);
      EXIT(Location.RequireReceive("Location Code") OR Location.RequireShipment("Location Code"));
    END;

    LOCAL PROCEDURE DisplayConflictError@76(ErrTxt@1000 : Text[500]);
    VAR
      DisplayedError@1001 : Text[600];
    BEGIN
      DisplayedError := Text051 + ErrTxt;
      ERROR(DisplayedError);
    END;

    PROCEDURE GetDueDate@75() : Date;
    BEGIN
      EXIT(EvaluateDaysBack("Shipping Time","Needed by Date"));
    END;

    PROCEDURE GetShipmentDate@77() : Date;
    VAR
      Location@1001 : Record 14;
      InventorySetup@1002 : Record 313;
    BEGIN
      IF Location.GET("Location Code") THEN
        EXIT(EvaluateDaysBack(Location."Outbound Whse. Handling Time",GetDueDate));
      InventorySetup.GET;
      EXIT(EvaluateDaysBack(InventorySetup."Outbound Whse. Handling Time",GetDueDate));
    END;

    PROCEDURE OutstandingInvoiceAmountFromShipment@4(CustomerNo@1000 : Code[20]) : Decimal;
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      ServiceLine.SETCURRENTKEY("Document Type","Customer No.","Shipment No.");
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type"::Invoice);
      ServiceLine.SETRANGE("Customer No.",CustomerNo);
      ServiceLine.SETFILTER("Shipment No.",'<>%1','');
      ServiceLine.CALCSUMS("Outstanding Amount (LCY)");
      EXIT(ServiceLine."Outstanding Amount (LCY)");
    END;

    LOCAL PROCEDURE EvaluateDaysBack@78(InputFormula@1001 : DateFormula;InputDate@1000 : Date) : Date;
    VAR
      DFCode@1002 : Code[10];
      DF@1003 : DateFormula;
    BEGIN
      IF FORMAT(InputFormula) = '' THEN
        EXIT(InputDate);
      DFCode := FORMAT(InputFormula);
      IF NOT (COPYSTR(DFCode,1,1) IN ['+','-']) THEN
        DFCode := '+' + DFCode;
      DFCode := CONVERTSTR(DFCode,'+-','-+');
      EVALUATE(DF,DFCode);
      EXIT(CALCDATE(DF,InputDate));
    END;

    PROCEDURE ShowStructureOrderLineDetails@1500000();
    VAR
      StrOrderLineDetails@1500000 : Record 13795;
      StructureOrderLineDetails@1500001 : Page 16306;
    BEGIN
      StrOrderLineDetails.SETCURRENTKEY("Document Type","Document No.",Type);
      StrOrderLineDetails.SETRANGE("Document Type","Document Type");
      StrOrderLineDetails.SETRANGE("Document No.","Document No.");
      StrOrderLineDetails.SETRANGE(Type,StrOrderLineDetails.Type::Service);
      StrOrderLineDetails.SETRANGE("Item No.","No.");
      StrOrderLineDetails.SETRANGE("Line No.","Line No.");
      StructureOrderLineDetails.SETTABLEVIEW(StrOrderLineDetails);
      StructureOrderLineDetails.RUNMODAL;
    END;

    PROCEDURE ShowStructureOrderDetails@1500003();
    VAR
      ServiceHeader@1500000 : Record 5900;
      StrOrderDetails@1500001 : Record 13794;
      StructureOrderDetails@1500002 : Page 16305;
    BEGIN
      ServiceHeader.GET("Document Type","Document No.");
      StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Service);
      StrOrderDetails.SETRANGE("Document Type","Document Type");
      StrOrderDetails.SETRANGE("Document No.","Document No.");
      StrOrderDetails.SETRANGE("Structure Code",ServiceHeader.Structure);
      StrOrderDetails.SETRANGE("Document Line No.",0);  // Line number filter for Service Header is 0
      StrOrderDetails.FILTERGROUP := 2;
      StructureOrderDetails.SETTABLEVIEW(StrOrderDetails);
      StructureOrderDetails.RUNMODAL;
    END;

    PROCEDURE UpdateTaxAmounts@1500009();
    VAR
      ServiceTaxSetup@1500003 : Record 16472;
      IndianSalesTaxCalculate@1500002 : Codeunit 13704;
      LineTaxAmount@1500001 : Decimal;
      StandardDeductionAmount@1500000 : Decimal;
    BEGIN
      TaxAreaUpdate;
      IF (Quantity = 0) OR ("Unit Price" = 0) THEN BEGIN
        "Amount Added to Tax Base" := 0;
        "Amount Added to Excise Base" := 0;
        "Service Tax Base" := 0;
      END;

      IF "Amount Added to Excise Base" <> 0 THEN
        "Excise Base Amount" := "Amount Added to Excise Base";
      UpdateExciseAmount;
      IF "Amount Added to Tax Base" <> 0 THEN BEGIN
        "Tax Liable" := ServHeader."Tax Liable";
        "Tax Base Amount" := "Amount Added to Tax Base";
      END ELSE BEGIN
        "Tax Liable" := FALSE;
        "Tax Base Amount" := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
        "Amount To Customer" :=
          ROUND(
            "Line Amount" + "Excise Amount" - "Inv. Discount Amount" + "Charges To Customer" +
            "Service Tax Amount" + "Service Tax eCess Amount" +
            "Service Tax SHE Cess Amount" + "Service Tax SBC Amount" + "KK Cess Amount",Currency."Amount Rounding Precision")
      END;

      IndianSalesTaxCalculate.SetCurrency("Currency Code" <> '');
      LineTaxAmount :=
        IndianSalesTaxCalculate.CalculateTax(
          "Tax Area Code","Tax Group Code","Tax Liable",ServHeader."Posting Date",
          "Tax Base Amount",Quantity,ServHeader."Currency Factor","Form Code","Tax %");
      IF LineTaxAmount <> 0 THEN
        IndianSalesTaxCalculate.GetStandardDeductionAmtService(Rec,StandardDeductionAmount,LineTaxAmount);

      "Amount Including Tax" := ROUND("Tax Base Amount" + LineTaxAmount,Currency."Amount Rounding Precision");
      IF "Tax Base Amount" <> 0 THEN
        "Tax %" :=
          ROUND(100 * ("Amount Including Tax" - "Tax Base Amount") / "Tax Base Amount",Currency."Amount Rounding Precision")
      ELSE
        "Tax %" := 0;

      IF "Standard Deduction %" <> 0 THEN
        "Standard Deduction Amount" := ("Tax Base Amount" * "Standard Deduction %" / 100)
      ELSE
        "Standard Deduction Amount" := 0 ;

      IF ServHeader."Export or Deemed Export" OR ServHeader."VAT Exempted" THEN BEGIN
        "Tax %" := 0;
        "Tax Amount" := 0;
      END ELSE
        "Tax Amount" := ROUND(LineTaxAmount - StandardDeductionAmount,Currency."Amount Rounding Precision");
      "Amount Including Tax" := "Tax Base Amount" + "Tax Amount";

      ServiceTaxSetup.SETRANGE(Code,"Service Tax Group");
      IF ServHeader."Posting Date" = 0D THEN
        ServiceTaxSetup.SETRANGE("From Date",0D,WORKDATE)
      ELSE
        ServiceTaxSetup.SETRANGE("From Date",0D,ServHeader."Posting Date");
      IF ServiceTaxSetup.FINDLAST THEN BEGIN
        IF (NOT ServHeader."ST Pure Agent") AND (ServHeader."Nature of Services" = ServHeader."Nature of Services"::" ")
        THEN BEGIN
          "Service Tax Amount" :=
            ROUND(
              (("Service Tax Base" * ServiceTaxSetup."Service Tax %" * ((100 - ServiceTaxSetup."Abatement %") / 100)) / 100));
          "Service Tax eCess Amount" := ROUND(("Service Tax Amount" * ServiceTaxSetup."eCess %") / 100);
          "Service Tax SHE Cess Amount" := ROUND(("Service Tax Amount" * ServiceTaxSetup."SHE Cess %") / 100);
          "Service Tax SBC Amount" :=
            ROUND(
              (("Service Tax Base" * ServiceTaxSetup."SB Cess%" * ((100 - ServiceTaxSetup."Abatement %") / 100)) / 100));
          "KK Cess Amount" :=
            ROUND(
              (("Service Tax Base" * ServiceTaxSetup."KK Cess%" * ((100 - ServiceTaxSetup."Abatement %") / 100)) / 100));

        END ELSE BEGIN
          "Service Tax Amount" := 0;
          "Service Tax eCess Amount" := 0;
          "Service Tax SHE Cess Amount" := 0;
          "Service Tax SBC Amount" := 0;
          "KK Cess Amount" := 0
        END;
      END ELSE BEGIN
        "Service Tax Amount" := 0;
        "Service Tax eCess Amount" := 0;
        "Service Tax SHE Cess Amount" := 0;
        "Service Tax SBC Amount" := 0;
        "KK Cess Amount" := 0
      END;
    END;

    LOCAL PROCEDURE TaxAreaUpdate@1500010();
    VAR
      TaxGroup@1500003 : Record 321;
      TaxLocation@1500002 : Record 13761;
      BilltoCust@1500001 : Record 18;
      ShiptoAddr@1500000 : Record 222;
    BEGIN
      ServMgtSetup.GET;
      GetServHeader;
      IF TaxGroup.GET("Tax Group Code") THEN;
      TaxLocation.SETRANGE("Dispatch / Receiving Location","Location Code");
      IF ServMgtSetup."Tax Dependency Type" = ServMgtSetup."Tax Dependency Type"::"Bill To Customer" THEN
        IF ServHeader."Bill-to Customer No." <> '' THEN BEGIN
          BilltoCust.GET(ServHeader."Bill-to Customer No.");
          State := BilltoCust."State Code";
          TaxLocation.SETRANGE("Customer / Vendor Location",BilltoCust."State Code");
          TaxLocation.SETRANGE(Type,TaxLocation.Type::Customer);
          IF TaxGroup."VAT Applicable" THEN
            TaxLocation.SETRANGE("VAT Applicable",TRUE);
          IF TaxLocation.FINDFIRST THEN
            "Tax Area Code" := TaxLocation."Tax Area Code";
        END;
      IF ServMgtSetup."Tax Dependency Type" = ServMgtSetup."Tax Dependency Type"::"Ship To Customer" THEN BEGIN
        IF ServHeader."Ship-to Code" <> '' THEN BEGIN
          ShiptoAddr.GET(ServHeader."Customer No.",ServHeader."Ship-to Code");
          TaxLocation.SETRANGE("Customer / Vendor Location",ShiptoAddr.State);
          TaxLocation.SETRANGE(Type,TaxLocation.Type::Customer);
          IF TaxGroup."VAT Applicable" THEN
            TaxLocation.SETRANGE("VAT Applicable",TRUE);
          IF TaxLocation.FINDFIRST THEN
            "Tax Area Code" := TaxLocation."Tax Area Code";
        END ELSE
          IF ServHeader."Customer No." <> '' THEN BEGIN
            BilltoCust.GET(ServHeader."Customer No.");
            State := BilltoCust."State Code";
            TaxLocation.SETRANGE("Customer / Vendor Location",BilltoCust."State Code");
            TaxLocation.SETRANGE(Type,TaxLocation.Type::Customer);
            IF TaxGroup."VAT Applicable" THEN
              TaxLocation.SETRANGE("VAT Applicable",TRUE);
            IF TaxLocation.FINDFIRST THEN
              "Tax Area Code" := TaxLocation."Tax Area Code";
          END;
      END;
    END;

    PROCEDURE CalculateStructures@1500001(VAR ServiceHeader@1500000 : Record 5900);
    VAR
      ServiceLine@1500016 : Record 5902;
      StrOrderDetails@1500015 : Record 13794;
      StrOrderLineDetails@1500014 : Record 13795;
      StrOrderLines@1500013 : Record 13795;
      TotalAmount@1500012 : Decimal;
      TotalLines@1500011 : Decimal;
      BaseAmount@1500010 : Decimal;
      CFactor@1500009 : Decimal;
    BEGIN
      WITH ServiceHeader DO BEGIN
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          TESTFIELD("Currency Factor");
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;

        StrOrderLines.LOCKTABLE;
        StrOrderLineDetails.LOCKTABLE;
        StrOrderLines.SETRANGE(Type,StrOrderLines.Type::Service);
        StrOrderLines.SETRANGE("Document Type","Document Type");
        StrOrderLines.SETRANGE("Document No.","No.");
        StrOrderLines.SETRANGE("Price Inclusive of Tax",FALSE);
        IF NOT Trading THEN
          StrOrderLines.SETRANGE("Manually Changed",FALSE);
        StrOrderLines.DELETEALL(TRUE);

        IF GSTManagement.IsGSTApplicable(Structure) THEN BEGIN
          IF "GST Customer Type" IN ["GST Customer Type"::Registered,"GST Customer Type"::Unregistered] THEN
            TESTFIELD(State);
          TESTFIELD("Location Code");
          GSTManagement.ServicePostValidations(ServiceHeader);
        END;

        ServiceLine.SETRANGE("Document Type","Document Type");
        ServiceLine.SETRANGE("Document No.","No.");
        ServiceLine.SETFILTER(Type,'%1|%2',ServiceLine.Type::Item,ServiceLine.Type::Resource);
        IF ServiceLine.FINDSET THEN
          REPEAT
            TotalAmount += (ServiceLine.Quantity * ServiceLine."Unit Price");
          UNTIL ServiceLine.NEXT = 0;

        ServiceLine.RESET;
        ServiceLine.SETRANGE("Document Type","Document Type");
        ServiceLine.SETRANGE("Document No.","No.");
        IF ServiceLine.FINDSET THEN BEGIN
          TotalLines := ServiceLine.COUNT;
          REPEAT
            ServiceLine."Service Tax Base" := 0;
            ServiceLine."Service Tax Amount" := 0;
            ServiceLine."Service Tax eCess Amount" := 0;
            ServiceLine."Service Tax SHE Cess Amount" := 0;
            ServiceLine."Service Tax SBC Amount" := 0;
            ServiceLine."KK Cess Amount" :=0;
            ServiceLine."GST Base Amount" := 0;
            ServiceLine."Total GST Amount" := 0;
            IF (ServiceLine.Quantity <> 0) AND (ServiceLine."Unit Price" <> 0) THEN
              WITH ServiceLine DO BEGIN
                "Amount Added to Excise Base" := 0;
                "Amount Added to Tax Base" := 0;
                "VAT Base Amount" := 0;
                AssessableValueCalc := CheckAssessableValue(ServiceHeader);
                CVD := FALSE;
                StrOrderDetails.RESET;
                StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Service);
                StrOrderDetails.SETRANGE("Document Type","Document Type");
                StrOrderDetails.SETRANGE("Document No.","Document No.");
                StrOrderDetails.SETRANGE("Document Line No.",0);
                IF StrOrderDetails.FINDSET THEN
                  REPEAT
                    StrOrderLineDetails.RESET;
                    StrOrderLineDetails.SETRANGE(Type,StrOrderLineDetails.Type::Service);
                    StrOrderLineDetails.SETRANGE("Calculation Order",StrOrderDetails."Calculation Order");
                    StrOrderLineDetails.SETRANGE("Document Type","Document Type");
                    StrOrderLineDetails.SETRANGE("Document No.","Document No.");
                    StrOrderLineDetails.SETRANGE("Structure Code",Structure);
                    StrOrderLineDetails.SETRANGE("Item No.","No.");
                    StrOrderLineDetails.SETRANGE("Line No.","Line No.");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
                    IF NOT StrOrderLineDetails.FINDFIRST THEN BEGIN
                      StrOrderLineDetails.INIT;
                      StrOrderLineDetails.Type := StrOrderDetails.Type;
                      StrOrderLineDetails."Document Type" := StrOrderDetails."Document Type";
                      StrOrderLineDetails."Document No." := StrOrderDetails."Document No.";
                      StrOrderLineDetails."Structure Code" := StrOrderDetails."Structure Code";
                      StrOrderLineDetails."Item No." := "No.";
                      StrOrderLineDetails."Line No." := "Line No.";
                      StrOrderLineDetails."Calculation Order" := StrOrderDetails."Calculation Order";
                      StrOrderLineDetails."Tax/Charge Type" := StrOrderDetails."Tax/Charge Type";
                      StrOrderLineDetails."Tax/Charge Group" := StrOrderDetails."Tax/Charge Group";
                      StrOrderLineDetails."Tax/Charge Code" := StrOrderDetails."Tax/Charge Code";
                      StrOrderLineDetails."Calculation Type" := StrOrderDetails."Calculation Type";
                      StrOrderLineDetails."Calculation Value" := StrOrderDetails."Calculation Value";
                      StrOrderLineDetails."Quantity Per" := StrOrderDetails."Quantity Per";
                      StrOrderLineDetails."Loading on Inventory" := StrOrderDetails."Loading on Inventory";
                      StrOrderLineDetails."% Loading on Inventory" := StrOrderDetails."% Loading on Inventory";
                      StrOrderLineDetails."Header/Line" := StrOrderDetails."Header/Line";
                      StrOrderLineDetails."Include Base" := StrOrderDetails."Include Base";
                      StrOrderLineDetails."Include Line Discount" := StrOrderDetails."Include Line Discount";
                      StrOrderLineDetails."Include Invoice Discount" := StrOrderDetails."Include Invoice Discount";
                      StrOrderLineDetails."Payable to Third Party" := StrOrderDetails."Payable to Third Party";
                      StrOrderLineDetails.LCY := StrOrderDetails.LCY;
                      StrOrderLineDetails."Available for VAT input" := StrOrderDetails."Available for VAT Input";
                      StrOrderLineDetails.CVD := StrOrderDetails.CVD;
                      IF StrOrderDetails."Payable to Third Party" THEN
                        StrOrderDetails.TESTFIELD("Third Party Code");
                      StrOrderLineDetails."Third Party Code" := StrOrderDetails."Third Party Code";
                      IF (
                          StrOrderDetails."Tax/Charge Type" IN [
                                                                StrOrderDetails."Tax/Charge Type"::Charges,
                                                                StrOrderDetails."Tax/Charge Type"::"Other Taxes"])
                      THEN
                        StrOrderDetails.TESTFIELD("Account No.");
                      StrOrderLineDetails."Account No." := StrOrderDetails."Account No.";
                      StrOrderLineDetails."Base Formula" := StrOrderDetails."Base Formula";
                      IF StrOrderLineDetails."Base Formula" <> '' THEN
                        BaseAmount :=
                          EvaluateExpressioninStructures(TRUE,StrOrderLineDetails."Base Formula",ServiceLine,StrOrderDetails)
                      ELSE
                        BaseAmount := 0;

                      IF StrOrderDetails."Include Base" THEN
                        BaseAmount += Quantity * "Unit Price";
                      IF StrOrderDetails."Include Line Discount" THEN
                        BaseAmount -= "Line Discount Amount";
                      IF StrOrderDetails."Include Invoice Discount" THEN
                        BaseAmount -= "Inv. Discount Amount";

                      IF ServiceHeader."Currency Factor" <> 0 THEN
                        CFactor := ServiceHeader."Currency Factor"
                      ELSE
                        CFactor := 1;

                      IF NOT StrOrderDetails.LCY THEN
                        CFactor := 1;

                      IF (Type <> Type::"G/L Account") OR (Type <> Type::Cost) THEN
                        IF ((StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges) OR
                            (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Other Taxes"))
                        THEN BEGIN
                          IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::"Fixed Value" THEN BEGIN
                            IF StrOrderDetails."Charge Basis" = StrOrderDetails."Charge Basis"::Amount THEN BEGIN
                              StrOrderLineDetails."Base Amount" := Quantity * "Unit Price";
                              StrOrderLineDetails.Amount :=
                                (StrOrderDetails."Calculation Value" * CFactor) * (Quantity * "Unit Price") / TotalAmount;
                            END;
                            IF StrOrderDetails."Charge Basis" = StrOrderDetails."Charge Basis"::Equally THEN BEGIN
                              StrOrderLineDetails."Base Amount" := 0;
                              StrOrderLineDetails.Amount := (StrOrderDetails."Calculation Value" * CFactor) / TotalLines;
                            END;
                          END;
                          IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::Percentage THEN BEGIN
                            StrOrderLineDetails."Base Amount" := BaseAmount;
                            StrOrderLineDetails.Amount := (StrOrderDetails."Calculation Value" * CFactor) * BaseAmount / 100;
                          END;
                          IF StrOrderDetails."Calculation Type" = StrOrderDetails."Calculation Type"::"Amount Per Qty" THEN BEGIN
                            StrOrderLineDetails."Base Amount" := 0;
                            StrOrderLineDetails.Amount :=
                              (StrOrderDetails."Calculation Value" * CFactor) * Quantity / StrOrderDetails."Quantity Per";
                          END;
                        END;
                      IF Type IN [Type::"G/L Account",Type::Cost] THEN
                        IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Excise THEN
                          IF Trading THEN BEGIN
                            CVD := GetBaseAmount(BaseAmount,ServiceLine,ServHeader."Applies-to Doc. No.");
                            "Amount Added to Excise Base" := BaseAmount;
                            UpdateTaxAmounts;
                            StrOrderLineDetails."Base Amount" := "Excise Base Amount";
                            StrOrderLineDetails.Amount := "Excise Amount";
                          END ELSE BEGIN
                            "Amount Added to Excise Base" := BaseAmount;
                            CVD := StrOrderDetails.CVD;
                            IF CVD AND ("CIF Amount" + "BCD Amount" <> 0) THEN
                              "Amount Added to Excise Base" := ("CIF Amount" + "BCD Amount") * Quantity;
                            IF AssessableValueCalc AND (NOT CVD) THEN
                              "Excise Base Amount" := "Assessable Value" * Quantity;
                            UpdateTaxAmounts;
                            StrOrderLineDetails."Base Amount" := "Excise Base Amount";
                            StrOrderLineDetails.Amount := "Excise Amount";
                          END;
                          IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::GST THEN BEGIN
                            "GST Base Amount" := BaseAmount;
                            UpdateGSTAmounts("GST Base Amount");
                            StrOrderLineDetails."Base Amount" := "GST Base Amount";
                            StrOrderLineDetails.Amount :="Total GST Amount";
                          END;
                      IF Type = Type::Item THEN
                        IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Excise THEN
                          IF Trading THEN BEGIN
                            CVD := GetBaseAmount(BaseAmount,ServiceLine,ServiceHeader."Applies-to Doc. No.");
                            "Amount Added to Excise Base" := BaseAmount;
                            UpdateTaxAmounts;
                            StrOrderLineDetails."Base Amount" := "Excise Base Amount";
                            StrOrderLineDetails.Amount := "Excise Amount";
                          END ELSE BEGIN
                            "Amount Added to Excise Base" := BaseAmount;
                            CVD := StrOrderDetails.CVD;
                            IF CVD AND ("CIF Amount" + "BCD Amount" <> 0) THEN
                              "Amount Added to Excise Base" := ("CIF Amount" + "BCD Amount") * Quantity;
                            UpdateTaxAmounts;
                            IF AssessableValueCalc AND (NOT CVD) THEN
                              "Excise Base Amount" := "Assessable Value" * Quantity;
                            StrOrderLineDetails."Base Amount" := "Excise Base Amount";
                            StrOrderLineDetails.Amount := "Excise Amount";
                          END;
                        IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::GST THEN BEGIN
                          "GST Base Amount" := BaseAmount;
                          UpdateGSTAmounts("GST Base Amount");
                          StrOrderLineDetails."Base Amount" := "GST Base Amount";
                          StrOrderLineDetails.Amount :="Total GST Amount";
                        END;
                      IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Sales Tax" THEN BEGIN
                        "Amount Added to Tax Base" := ROUND(BaseAmount,Currency."Amount Rounding Precision");
                        UpdateTaxAmounts;
                        StrOrderLineDetails."Base Amount" := "Tax Base Amount";
                        StrOrderLineDetails.Amount := "Amount Including Tax" - "Tax Base Amount";
                      END;
                      IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Service Tax" THEN BEGIN
                        IF "Transaction No. Serv. Tax" <> 0 THEN
                          "Service Tax Base" := ROUND(BaseAmount)
                        ELSE
                          "Service Tax Base" := ROUND(BaseAmount,Currency."Amount Rounding Precision");
                        UpdateTaxAmounts;
                        StrOrderLineDetails."Base Amount" := "Service Tax Base";
                        StrOrderLineDetails.Amount :=
                          ROUND(
                            "Service Tax Amount" + "Service Tax eCess Amount" +
                            "Service Tax SHE Cess Amount" + "Service Tax SBC Amount" + "KK Cess Amount");
                      END;

                      IF "Free Supply" THEN
                        IF ((StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::Charges) OR
                            (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Other Taxes"))
                        THEN
                          StrOrderDetails.TESTFIELD("Third Party Code");

                      IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Sales Tax" THEN
                        TESTFIELD("Free Supply",FALSE);

                      IF "Currency Factor" <> 0 THEN
                        CFactor := "Currency Factor"
                      ELSE
                        CFactor := 1;

                      IF "Currency Code" <> '' THEN
                        Currency.GET("Currency Code");

                      StrOrderLineDetails."Amount (LCY)" := StrOrderLineDetails.Amount / CFactor;
                      StrOrderLineDetails.INSERT;
                    END;
                  UNTIL StrOrderDetails.NEXT = 0;
              END;
            ServiceLine.MODIFY;
          UNTIL ServiceLine.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateExciseAmount@1500027();
    VAR
      ExciseProdPostingGrp@1500002 : Record 13710;
      ItemUOM@1500001 : Record 5404;
      ExcisePostingSetup@1500000 : Record 13711;
    BEGIN
      GetServHeader;
      IF "Amount Added to Excise Base" <> 0 THEN BEGIN
        "Excise Base Amount" := "Amount Added to Excise Base";
        IF ExciseProdPostingGrp.GET("Excise Prod. Posting Group") THEN BEGIN
          IF ExciseProdPostingGrp."Unit of Measure Code" <> '' THEN BEGIN
            IF Type = Type::Item THEN
              IF ItemUOM.GET("No.",ExciseProdPostingGrp."Unit of Measure Code") THEN BEGIN
                "Excise Base Quantity" := ROUND("Quantity (Base)" / ItemUOM."Qty. per Unit of Measure");
              END ELSE
                "Excise Base Quantity" := 0;
          END ELSE
            "Excise Base Quantity" := "Quantity (Base)";
        END;

        ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
        ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
        IF ServHeader."Posting Date" <> 0D THEN
          ExcisePostingSetup.SETRANGE("From Date",0D,ServHeader."Posting Date")
        ELSE
          ExcisePostingSetup.SETRANGE("From Date",0D,WORKDATE);
        IF ExcisePostingSetup.FINDLAST THEN BEGIN
          CASE ExcisePostingSetup."BED Calculation Type" OF
            ExcisePostingSetup."BED Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "BED Amount" := 0
                ELSE
                  IF ExcisePostingSetup."BED Calculation Formula" <> '' THEN
                    "BED Amount" :=
                      EvaluateExpression(
                        TRUE,ExcisePostingSetup."BED Calculation Formula",Rec) *
                      ExcisePostingSetup."BED %" / 100
                  ELSE
                    "BED Amount" := ExcisePostingSetup."BED %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."BED Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "BED Amount" := ExcisePostingSetup."BED Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."BED Calculation Type"::"% of Accessable Value":
              "BED Amount" := ExcisePostingSetup."BED %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."BED Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "BED Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "BED Amount" :=
                    (ExcisePostingSetup."BED %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."BED Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."BED Calculation Type"::"% of MRP":
              "BED Amount" := 0;
          END;
          CASE ExcisePostingSetup."SED Calculation Type" OF
            ExcisePostingSetup."SED Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "SED Amount" := 0
                ELSE
                  IF ExcisePostingSetup."SED Calculation Formula" <> '' THEN
                    "SED Amount" :=
                      EvaluateExpression(
                        TRUE,ExcisePostingSetup."SED Calculation Formula",Rec) *
                      ExcisePostingSetup."SED %" / 100
                  ELSE
                    IF ExcisePostingSetup."SED Calculation Formula" = '' THEN
                      "SED Amount" := ExcisePostingSetup."SED %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."SED Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "SED Amount" := ExcisePostingSetup."SED Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."SED Calculation Type"::"% of Accessable Value":
              "SED Amount" := ExcisePostingSetup."SED %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."SED Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "SED Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "SED Amount" :=
                    (ExcisePostingSetup."SED %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."SED Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."SED Calculation Type"::"% of MRP":
              "SED Amount" := 0;
          END;
          CASE ExcisePostingSetup."AED(GSI) Calculation Type" OF
            ExcisePostingSetup."AED(GSI) Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "AED(GSI) Amount" := 0
                ELSE
                  IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" <> '' THEN
                    "AED(GSI) Amount" :=
                      EvaluateExpression(
                        TRUE,ExcisePostingSetup."AED(GSI/TTA) Calc. Formula",Rec) *
                      ExcisePostingSetup."AED(GSI) %" / 100
                  ELSE
                    IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" = '' THEN
                      "AED(GSI) Amount" := ExcisePostingSetup."AED(GSI) %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."AED(GSI) Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "AED(GSI) Amount" := ExcisePostingSetup."AED(GSI) Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."AED(GSI) Calculation Type"::"% of Accessable Value":
              "AED(GSI) Amount" := ExcisePostingSetup."AED(GSI) %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."AED(GSI) Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "AED(GSI) Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "AED(GSI) Amount" :=
                    (ExcisePostingSetup."AED(GSI) %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."AED(GSI) Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."AED(GSI) Calculation Type"::"% of MRP":
              "AED(GSI) Amount" := 0;
          END;
          CASE ExcisePostingSetup."NCCD Calculation Type" OF
            ExcisePostingSetup."NCCD Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "NCCD Amount" := 0
                ELSE
                  IF ExcisePostingSetup."NCCD Calculation Formula" <> '' THEN
                    "NCCD Amount" :=
                      EvaluateExpression(
                        TRUE,ExcisePostingSetup."NCCD Calculation Formula",Rec) *
                      ExcisePostingSetup."NCCD %" / 100
                  ELSE
                    IF ExcisePostingSetup."NCCD Calculation Formula" = '' THEN
                      "NCCD Amount" := ExcisePostingSetup."NCCD %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."NCCD Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "NCCD Amount" := ExcisePostingSetup."NCCD Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."NCCD Calculation Type"::"% of Accessable Value":
              "NCCD Amount" := ExcisePostingSetup."NCCD %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."NCCD Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "NCCD Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "NCCD Amount" :=
                    (ExcisePostingSetup."NCCD %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."NCCD Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."NCCD Calculation Type"::"% of MRP":
              "NCCD Amount" := 0;
          END;
          CASE ExcisePostingSetup."AED(TTA) Calculation Type" OF
            ExcisePostingSetup."AED(TTA) Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "AED(TTA) Amount" := 0
                ELSE
                  IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" <> '' THEN
                    "AED(TTA) Amount" :=
                      EvaluateExpression(
                        TRUE,ExcisePostingSetup."AED(GSI/TTA) Calc. Formula",Rec) *
                      ExcisePostingSetup."AED(TTA) %" / 100
                  ELSE
                    IF ExcisePostingSetup."AED(GSI/TTA) Calc. Formula" = '' THEN
                      "AED(TTA) Amount" := ExcisePostingSetup."AED(TTA) %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."AED(TTA) Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "AED(TTA) Amount" := ExcisePostingSetup."AED(TTA) Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."AED(TTA) Calculation Type"::"% of Accessable Value":
              "AED(TTA) Amount" := ExcisePostingSetup."AED(TTA) %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."AED(TTA) Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "AED(TTA) Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "AED(TTA) Amount" :=
                    (ExcisePostingSetup."AED(TTA) %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."AED(TTA) Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."AED(TTA) Calculation Type"::"% of MRP":
              "AED(TTA) Amount" := 0;
          END;
          CASE ExcisePostingSetup."SAED Calculation Type" OF
            ExcisePostingSetup."SAED Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "SAED Amount" := 0
                ELSE
                  IF ExcisePostingSetup."SAED Calculation Formula" <> '' THEN
                    "SAED Amount" :=
                      EvaluateExpression(TRUE,ExcisePostingSetup."SAED Calculation Formula",Rec) * ExcisePostingSetup."SAED %" / 100
                  ELSE
                    IF ExcisePostingSetup."SED Calculation Formula" = '' THEN
                      "SAED Amount" := ExcisePostingSetup."SAED %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."SAED Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "SAED Amount" := ExcisePostingSetup."SAED Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."SAED Calculation Type"::"% of Accessable Value":
              "SAED Amount" := ExcisePostingSetup."SAED %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."SAED Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "SAED Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "SAED Amount" :=
                    (ExcisePostingSetup."SAED %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."SAED Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."SAED Calculation Type"::"% of MRP":
              "SAED Amount" := 0;
          END;
          CASE ExcisePostingSetup."ADE Calculation Type" OF
            ExcisePostingSetup."ADE Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "ADE Amount" := 0
                ELSE
                  IF ExcisePostingSetup."ADE Calculation Formula" <> '' THEN
                    "ADE Amount" :=
                      EvaluateExpression(
                        TRUE,ExcisePostingSetup."ADE Calculation Formula",Rec) *
                      ExcisePostingSetup."ADE %" / 100
                  ELSE
                    IF ExcisePostingSetup."ADE Calculation Formula" = '' THEN
                      "ADE Amount" := ExcisePostingSetup."ADE %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."ADE Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "ADE Amount" := ExcisePostingSetup."ADE Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."ADE Calculation Type"::"% of Accessable Value":
              "ADE Amount" := ExcisePostingSetup."ADE %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."ADE Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "ADE Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "ADE Amount" :=
                    (ExcisePostingSetup."ADE %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."ADE Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."ADE Calculation Type"::"% of MRP":
              "ADE Amount" := 0;
          END;
          CASE ExcisePostingSetup."ADET Calculation Type" OF
            ExcisePostingSetup."ADET Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "ADET Amount" := 0
                ELSE
                  IF ExcisePostingSetup."ADET Calculation Formula" <> '' THEN
                    "ADET Amount" :=
                      EvaluateExpression(
                        TRUE,ExcisePostingSetup."ADET Calculation Formula",Rec) *
                      ExcisePostingSetup."ADET %" / 100
                  ELSE
                    IF ExcisePostingSetup."ADET Calculation Formula" = '' THEN
                      "ADET Amount" := ExcisePostingSetup."ADET %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."ADET Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "ADET Amount" := ExcisePostingSetup."ADET Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."ADET Calculation Type"::"% of Accessable Value":
              "ADET Amount" := ExcisePostingSetup."ADET %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."ADET Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "ADET Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "ADET Amount" :=
                    (ExcisePostingSetup."ADET %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."ADET Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."ADET Calculation Type"::"% of MRP":
              "ADET Amount" := 0;
          END;
          CASE ExcisePostingSetup."CESS Calculation Type" OF
            ExcisePostingSetup."CESS Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "CESS Amount" := 0
                ELSE
                  IF ExcisePostingSetup."CESS Calculation Formula" <> '' THEN
                    "CESS Amount" :=
                      EvaluateExpression(
                        TRUE,ExcisePostingSetup."CESS Calculation Formula",Rec) *
                      ExcisePostingSetup."CESS %" / 100
                  ELSE
                    IF ExcisePostingSetup."CESS Calculation Formula" = '' THEN
                      "CESS Amount" := ExcisePostingSetup."CESS %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."CESS Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "CESS Amount" := ExcisePostingSetup."CESS Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."CESS Calculation Type"::"% of Accessable Value":
              "CESS Amount" := ExcisePostingSetup."CESS %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."CESS Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "CESS Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "CESS Amount" :=
                    (ExcisePostingSetup."CESS %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."CESS Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."CESS Calculation Type"::"% of MRP":
              "CESS Amount" := 0;
          END;
          CASE ExcisePostingSetup."eCess Calculation Type" OF
            ExcisePostingSetup."eCess Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "eCess Amount" := 0
                ELSE
                  IF ExcisePostingSetup."eCess Calculation Formula" <> '' THEN
                    "eCess Amount" :=
                      EvaluateExpression(
                        TRUE,ExcisePostingSetup."eCess Calculation Formula",Rec) *
                      ExcisePostingSetup."eCess %" / 100
                  ELSE
                    IF ExcisePostingSetup."eCess Calculation Formula" = '' THEN
                      "eCess Amount" := ExcisePostingSetup."eCess %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."eCess Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "eCess Amount" := ExcisePostingSetup."eCess Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."eCess Calculation Type"::"% of Accessable Value":
              "eCess Amount" := ExcisePostingSetup."eCess %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."eCess Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "eCess Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "eCess Amount" :=
                    (ExcisePostingSetup."eCess %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."eCess Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."eCess Calculation Type"::"% of MRP":
              "eCess Amount" := 0;
          END;
          CASE ExcisePostingSetup."SHE Cess Calculation Type" OF
            ExcisePostingSetup."SHE Cess Calculation Type"::"Excise %":
              BEGIN
                IF Quantity = 0 THEN
                  "SHE Cess Amount" := 0
                ELSE
                  IF ExcisePostingSetup."SHE Cess Calculation Formula" <> '' THEN
                    "SHE Cess Amount" :=
                      EvaluateExpression(
                        TRUE,ExcisePostingSetup."SHE Cess Calculation Formula",Rec) *
                      ExcisePostingSetup."SHE Cess %" / 100
                  ELSE
                    IF ExcisePostingSetup."SHE Cess Calculation Formula" = '' THEN
                      "SHE Cess Amount" := ExcisePostingSetup."SHE Cess %" * "Excise Base Amount" / 100;
              END;
            ExcisePostingSetup."SHE Cess Calculation Type"::"Amount/Unit":
              BEGIN
                TESTFIELD("Excise Base Quantity");
                "SHE Cess Amount" := ExcisePostingSetup."SHE Cess Amount Per Unit" * "Excise Base Quantity";
              END;
            ExcisePostingSetup."SHE Cess Calculation Type"::"% of Accessable Value":
              "SHE Cess Amount" := ExcisePostingSetup."SHE Cess %" * "Assessable Value" * Quantity / 100;
            ExcisePostingSetup."SHE Cess Calculation Type"::"Excise %+Amount/Unit":
              BEGIN
                IF Quantity = 0 THEN
                  "SHE Cess Amount" := 0
                ELSE BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "SHE Cess Amount" :=
                    (ExcisePostingSetup."SHE Cess %" * "Excise Base Amount" / 100) +
                    (ExcisePostingSetup."SHE Cess Amount Per Unit" * "Excise Base Quantity");
                END;
              END;
            ExcisePostingSetup."SHE Cess Calculation Type"::"% of MRP":
              "SHE Cess Amount" := 0;
          END;
          IF CVD THEN BEGIN
            CASE ExcisePostingSetup."Custom eCess Calculation Type" OF
              ExcisePostingSetup."Custom eCess Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN
                    "Custom eCess Amount" := 0
                  ELSE
                    IF ExcisePostingSetup."Custom eCess Calc. Formula" <> '' THEN
                      "Custom eCess Amount" :=
                        EvaluateExpression(
                          TRUE,ExcisePostingSetup."Custom eCess Calc. Formula",Rec) *
                        ExcisePostingSetup."Custom eCess %" / 100
                    ELSE
                      IF ExcisePostingSetup."Custom eCess Calc. Formula" = '' THEN
                        "Custom eCess Amount" := ExcisePostingSetup."Custom eCess %" * "Excise Base Amount" / 100;
                END;
              ExcisePostingSetup."Custom eCess Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "Custom eCess Amount" := ExcisePostingSetup."Custom eCess Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."Custom eCess Calculation Type"::"% of Accessable Value":
                "Custom eCess Amount" := ExcisePostingSetup."Custom eCess %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."Custom eCess Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN
                    "Custom eCess Amount" := 0
                  ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    "Custom eCess Amount" :=
                      (ExcisePostingSetup."Custom eCess %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."Custom eCess Amount Per Unit" * "Excise Base Quantity");
                  END;
                END;
            END;

            CASE ExcisePostingSetup."Custom SHECess Calc. Type" OF
              ExcisePostingSetup."Custom SHECess Calc. Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN
                    "Custom SHECess Amount" := 0
                  ELSE
                    IF ExcisePostingSetup."Custom SHECess Calc. Formula" <> '' THEN
                      "Custom SHECess Amount" :=
                        EvaluateExpression(
                          TRUE,ExcisePostingSetup."Custom SHECess Calc. Formula",Rec) *
                        ExcisePostingSetup."Custom SHECess %" / 100
                    ELSE
                      IF ExcisePostingSetup."Custom SHECess Calc. Formula" = '' THEN
                        "Custom SHECess Amount" := ExcisePostingSetup."Custom SHECess %" * "Excise Base Amount" / 100;
                END;
              ExcisePostingSetup."Custom SHECess Calc. Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "Custom SHECess Amount" := ExcisePostingSetup."Custom SHECess Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."Custom SHECess Calc. Type"::"% of Accessable Value":
                "Custom SHECess Amount" := ExcisePostingSetup."Custom SHECess %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."Custom SHECess Calc. Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN
                    "Custom SHECess Amount" := 0
                  ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    "Custom SHECess Amount" :=
                      (ExcisePostingSetup."Custom SHECess %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."Custom SHECess Amount Per Unit" * "Excise Base Quantity");
                  END;
                END;
            END;

            CASE ExcisePostingSetup."ADC VAT Calculation Type" OF
              ExcisePostingSetup."ADC VAT Calculation Type"::"Excise %":
                BEGIN
                  IF Quantity = 0 THEN
                    "ADC VAT Amount" := 0
                  ELSE
                    IF ExcisePostingSetup."ADC VAT Calculation Formula" <> '' THEN
                      "ADC VAT Amount" :=
                        EvaluateExpression(
                          TRUE,ExcisePostingSetup."ADC VAT Calculation Formula",Rec) *
                        ExcisePostingSetup."ADC VAT %" / 100
                    ELSE
                      IF ExcisePostingSetup."ADC VAT Calculation Formula" = '' THEN
                        "ADC VAT Amount" := ExcisePostingSetup."ADC VAT %" * "Excise Base Amount" / 100;
                END;
              ExcisePostingSetup."ADC VAT Calculation Type"::"Amount/Unit":
                BEGIN
                  TESTFIELD("Excise Base Quantity");
                  "ADC VAT Amount" := ExcisePostingSetup."ADC VAT Amount Per Unit" * "Excise Base Quantity";
                END;
              ExcisePostingSetup."ADC VAT Calculation Type"::"% of Accessable Value":
                "ADC VAT Amount" := ExcisePostingSetup."ADC VAT %" * "Assessable Value" * Quantity / 100;
              ExcisePostingSetup."ADC VAT Calculation Type"::"Excise %+Amount/Unit":
                BEGIN
                  IF Quantity = 0 THEN
                    "ADC VAT Amount" := 0
                  ELSE BEGIN
                    TESTFIELD("Excise Base Quantity");
                    "ADC VAT Amount" :=
                      (ExcisePostingSetup."ADC VAT %" * "Excise Base Amount" / 100) +
                      (ExcisePostingSetup."ADC VAT Amount Per Unit" * "Excise Base Quantity");
                  END;
                END;
              ExcisePostingSetup."ADC VAT Calculation Type"::"% of MRP":
                "ADC VAT Amount" := 0;
            END;
          END ELSE
            "ADC VAT Amount" := 0;
        END ELSE
          InitExciseAmount;
      END ELSE
        InitExciseAmount;

      // Calculate Excise Effective %
      "Excise Amount" :=
        "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
        "eCess Amount" + "ADET Amount" + "AED(TTA) Amount" + "ADE Amount" + "SHE Cess Amount";

      ExcisePostingSetup.RESET;
      ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
      ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
      IF ExcisePostingSetup.FINDLAST THEN
        WITH ExcisePostingSetup DO BEGIN
          IF ("BED %" <> 0) AND ("BED Calculation Type" = "BED Calculation Type"::"% of Accessable Value") THEN BEGIN
            IF ("Assessable Value" <> 0) AND (Quantity <> 0) THEN
              "Excise Effective Rate" := "Excise Amount" / ("Assessable Value" * Quantity) * 100;
          END ELSE
            IF ("BED %" <> 0) AND (("BED Calculation Type" = "BED Calculation Type"::"% of MRP") OR
                                   ("BED Calculation Type" = "BED Calculation Type"::"Excise %"))
            THEN BEGIN
              IF "Excise Base Amount" <> 0 THEN
                "Excise Effective Rate" := "Excise Amount" / "Excise Base Amount" * 100;
            END;
          IF ("BED %" <> 0) AND ("BED Calculation Type" = "BED Calculation Type"::"Excise %") AND (NOT CVD) AND
             ("BED Calculation Formula" = Text13708)
          THEN
            "Excise Effective Rate" := 0;
        END;

      "Excise Amount" :=
        "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "CESS Amount" + "NCCD Amount" +
        "eCess Amount" + "ADET Amount" + "AED(TTA) Amount" + "ADE Amount" + "ADC VAT Amount" + "SHE Cess Amount";
      "Amount Including Excise" := "Excise Base Amount" + "Excise Amount";

      IF ServHeader.Trading THEN BEGIN
        "BED Amount" := BEDAmt;
        "AED(GSI) Amount" := "AED(GSI)Amt";
        "AED(TTA) Amount" := "AED(TTA)Amt";
        "SED Amount" := SEDAmt;
        "SAED Amount" := SAEDAmt;
        "CESS Amount" := CESSAmt;
        "NCCD Amount" := NCCDAmt;
        "eCess Amount" := eCessAmt;
        "SHE Cess Amount" := SHECessAmt;
        "ADET Amount" := ADETAmt;
        "ADE Amount" := ADEAmt;
        "ADC VAT Amount" := ADCVATAmt;

        "Excise Amount" :=
          "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "NCCD Amount" +
          "eCess Amount" + "ADET Amount" + "AED(TTA) Amount" + "ADE Amount" + "ADC VAT Amount" + "SHE Cess Amount";
        IF NOT ExcisePostingSetup."Setoff available" THEN
          "Excise Amount" := "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" + "NCCD Amount" +
            "ADET Amount" + "AED(TTA) Amount" + "ADE Amount" + "ADC VAT Amount";
        "Amount Including Excise" := "Excise Base Amount" + "Excise Amount";
      END;
      UpdateSalesLineBuffer;
    END;

    LOCAL PROCEDURE InitExciseAmount@1500028();
    BEGIN
      IF CheckManualChangedLines THEN
        EXIT;

      "Excise Amount" := 0;
      "BED Amount" := 0;
      "AED(GSI) Amount" := 0;
      "AED(TTA) Amount" := 0;
      "SED Amount" := 0;
      "SAED Amount" := 0;
      "CESS Amount" := 0;
      "NCCD Amount" := 0;
      "eCess Amount" := 0;
      "ADET Amount" := 0;
      "ADE Amount" := 0;
      "SHE Cess Amount" := 0;
      "Custom eCess Amount" := 0;
      "Custom SHECess Amount" := 0;
      "ADC VAT Amount" := 0;
    END;

    LOCAL PROCEDURE EvaluateExpression@1500032(IsTestExpression@1500002 : Boolean;Expression@1500001 : Code[250];ServLine@1500000 : Record 5902) : Decimal;
    VAR
      ServLine2@1500016 : Record 5902;
      Result@1500015 : Decimal;
      CallLevel@1500014 : Integer;
      Parantheses@1500013 : Integer;
      IsExpression@1500012 : Boolean;
      Operators@1500011 : Text[8];
      OperatorNo@1500010 : Integer;
      i@1500009 : Integer;
      LeftOperand@1500008 : Text[250];
      RightOperand@1500007 : Text[250];
      Operator@1500006 : Char;
      LeftResult@1500005 : Decimal;
      RightResult@1500004 : Decimal;
      IsFilter@1500003 : Boolean;
    BEGIN
      CallLevel += 1;
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);

      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses := Parantheses + 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses -= 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i -= 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo += 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpression(IsTestExpression,LeftOperand,ServLine);
          RightResult := EvaluateExpression(IsTestExpression,RightOperand,ServLine);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN
                Result := 0
              ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpression(IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),ServLine2)
          ELSE BEGIN
            IsFilter :=
              (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
               STRPOS(Expression,'<') + STRPOS(Expression,'>') +
               STRPOS(Expression,'=') > 0);
            IF NOT IsFilter THEN
              CASE Expression OF
                Text13700:
                  Result += ServLine."BED Amount";
                Text13701:
                  Result += ServLine."AED(GSI) Amount" + ServLine."AED(TTA) Amount";
                Text13702:
                  Result += ServLine."SED Amount";
                Text13703:
                  Result += ServLine."SAED Amount";
                Text13704:
                  Result += ServLine."CESS Amount";
                Text13705:
                  Result += ServLine."NCCD Amount";
                Text13706:
                  Result += ServLine."eCess Amount";
                Text13707:
                  Result += ServLine."ADET Amount";
                Text13708:
                  Result += ServLine."Line Amount";
                Text13709:
                  Result += ServLine."ADE Amount";
                Text13710:
                  Result += ServLine."SHE Cess Amount";
                Text16501:
                  Result += ServLine."ADC VAT Amount";
                Text16502:
                  Result += ServLine."BCD Amount" * ServLine.Quantity;
                Text16503:
                  Result += ServLine."CIF Amount" * ServLine.Quantity;
                Text16507:
                  Result += ServLine."Custom eCess Amount";
                Text16506:
                  Result += ServLine."Custom SHECess Amount";
              END;
          END;
      END;
      CallLevel -= 1;
      EXIT(Result);
    END;

    LOCAL PROCEDURE EvaluateExpressioninStructures@1500033(IsTestExpression@1500003 : Boolean;Expression@1500002 : Code[250];ServLine@1500001 : Record 5902;VAR StructureOrderDetails@1500000 : Record 13794) : Decimal;
    VAR
      StructureOrderDetails2@1500018 : Record 13794;
      StrOrderLineDetails2@1500017 : Record 13795;
      Result@1500016 : Decimal;
      Parantheses@1500015 : Integer;
      IsExpression@1500014 : Boolean;
      Operators@1500013 : Text[8];
      OperatorNo@1500012 : Integer;
      i@1500011 : Integer;
      LeftOperand@1500010 : Text[250];
      RightOperand@1500009 : Text[250];
      Operator@1500008 : Char;
      LeftResult@1500007 : Decimal;
      RightResult@1500006 : Decimal;
      IsFilter@1500005 : Boolean;
      Exp@1500004 : Integer;
    BEGIN
      WHILE (STRLEN(Expression) > 1) AND (Expression[1] = ' ') DO
        Expression := COPYSTR(Expression,2);
      IF Expression <> '' THEN
        WHILE (STRLEN(Expression) > 1) AND (Expression[STRLEN(Expression)] = ' ') DO
          Expression := COPYSTR(Expression,1,STRLEN(Expression) - 1);
      IF STRLEN(Expression) > 0 THEN BEGIN
        Parantheses := 0;
        IsExpression := FALSE;
        Operators := '+-*/^';
        OperatorNo := 1;
        REPEAT
          i := STRLEN(Expression);
          REPEAT
            IF Expression[i] = '(' THEN
              Parantheses += 1
            ELSE
              IF Expression[i] = ')' THEN
                Parantheses := Parantheses - 1;
            IF (Parantheses = 0) AND (Expression[i] = Operators[OperatorNo]) THEN
              IsExpression := TRUE
            ELSE
              i -= 1;
          UNTIL IsExpression OR (i <= 0);
          IF NOT IsExpression THEN
            OperatorNo += 1;
        UNTIL (OperatorNo > STRLEN(Operators)) OR IsExpression;
        IF IsExpression THEN BEGIN
          IF i > 1 THEN BEGIN
            LeftOperand := COPYSTR(Expression,1,i - 1);
          END ELSE
            LeftOperand := '';
          IF i < STRLEN(Expression) THEN BEGIN
            RightOperand := COPYSTR(Expression,i + 1);
          END ELSE
            RightOperand := '';
          Operator := Expression[i];
          LeftResult := EvaluateExpressioninStructures(IsTestExpression,LeftOperand,ServLine,StructureOrderDetails);
          RightResult := EvaluateExpressioninStructures(IsTestExpression,RightOperand,ServLine,StructureOrderDetails);
          CASE Operator OF
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              IF RightResult = 0 THEN
                Result := 0
              ELSE
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          END;
        END ELSE
          IF (Expression[1] = '(') AND (Expression[STRLEN(Expression)] = ')') THEN
            Result :=
              EvaluateExpressioninStructures(
                IsTestExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),ServLine,StructureOrderDetails)
          ELSE BEGIN
            IsFilter :=
              (STRPOS(Expression,'..') + STRPOS(Expression,'|') +
               STRPOS(Expression,'<') + STRPOS(Expression,'>') +
               STRPOS(Expression,'=') > 0);
            IF (STRLEN(Expression) > 10) AND (NOT IsFilter) THEN
              EVALUATE(Result,Expression)
            ELSE
              IF IsTestExpression THEN BEGIN
                EVALUATE(Exp,Expression);
                StructureOrderDetails2.SETRANGE(Type,StructureOrderDetails2.Type::Service);
                StructureOrderDetails2.SETRANGE("Document Type",StructureOrderDetails."Document Type");
                StructureOrderDetails2.SETRANGE("Document No.",StructureOrderDetails."Document No.");
                StructureOrderDetails2.SETRANGE("Structure Code",StructureOrderDetails."Structure Code");
                StructureOrderDetails2.SETRANGE("Calculation Order",Exp);
                IF StructureOrderDetails2.FINDFIRST THEN BEGIN
                  StrOrderLineDetails2.RESET;
                  StrOrderLineDetails2.SETCURRENTKEY("Document Type","Document No.",Type);
                  StrOrderLineDetails2.SETRANGE("Document Type",StructureOrderDetails2."Document Type");
                  StrOrderLineDetails2.SETRANGE("Document No.",StructureOrderDetails2."Document No.");
                  StrOrderLineDetails2.SETRANGE("Item No.",ServLine."No.");
                  StrOrderLineDetails2.SETRANGE("Line No.",ServLine."Line No.");
                  StrOrderLineDetails2.SETRANGE("Structure Code",StructureOrderDetails2."Structure Code");
                  StrOrderLineDetails2.SETRANGE("Tax/Charge Code",StructureOrderDetails2."Tax/Charge Code");
                  EVALUATE(Exp,Expression);
                  StrOrderLineDetails2.SETRANGE("Calculation Order",Exp);
                  IF StrOrderLineDetails2.FINDFIRST THEN
                    Result += StrOrderLineDetails2.Amount;
                END ELSE
                  EVALUATE(Result,Expression);
              END;
          END;
      END;
      EXIT(Result);
    END;

    PROCEDURE AdjustStructureAmounts@1500034(VAR ServiceHeader@1500000 : Record 5900);
    VAR
      ServLine@1500008 : Record 5902;
      StrOrderDetails@1500007 : Record 13794;
      StrOrderLines@1500006 : Record 13795;
      StrOrderLineDetails@1500005 : Record 13795;
      StructureAmount@1500004 : Decimal;
      CFactor@1500003 : Decimal;
      Adjusted@1500002 : Boolean;
      DiffAmount@1500001 : Decimal;
    BEGIN
      WITH ServiceHeader DO BEGIN
        StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
        StrOrderDetails.SETRANGE("Document Type","Document Type");
        StrOrderDetails.SETRANGE("Document No.","No.");
        StrOrderDetails.SETRANGE("Structure Code",Structure);
        StrOrderDetails.SETFILTER(
          "Tax/Charge Type",'%1|%2',StrOrderDetails."Tax/Charge Type"::Charges,
          StrOrderDetails."Tax/Charge Type"::"Other Taxes");
        StrOrderDetails.SETRANGE("Calculation Type",StrOrderDetails."Calculation Type"::"Fixed Value");
        StrOrderDetails.SETRANGE("Price Inclusive of Tax",FALSE);
        IF StrOrderDetails.FINDSET THEN
          REPEAT
            CLEAR(StructureAmount);
            StrOrderLines.RESET;
            StrOrderLines.SETCURRENTKEY(
              "Document Type","Document No.","Calculation Order",Type,"Structure Code","Tax/Charge Type","Tax/Charge Group",
              "Tax/Charge Code","Calculation Type");

            StrOrderLines.SETRANGE("Document Type","Document Type");
            StrOrderLines.SETRANGE("Document No.","No.");
            StrOrderLines.SETRANGE(Type,StrOrderLineDetails.Type::Service);
            StrOrderLines.SETRANGE("Structure Code",Structure);
            StrOrderLines.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
            StrOrderLines.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
            StrOrderLines.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
            StrOrderLines.SETRANGE("Calculation Type",StrOrderDetails."Calculation Type");
            StrOrderLines.SETRANGE("Price Inclusive of Tax",FALSE);
            IF StrOrderLines.FINDSET THEN
              REPEAT
                StructureAmount += ROUND(StrOrderLines.Amount);
              UNTIL StrOrderLines.NEXT = 0;

            IF "Currency Factor" <> 0 THEN
              CFactor := "Currency Factor"
            ELSE
              CFactor := 1;

            IF NOT StrOrderDetails.LCY THEN
              CFactor := 1;

            Adjusted := FALSE;
            IF StrOrderDetails."Calculation Value" <> StructureAmount THEN BEGIN
              DiffAmount := (StrOrderDetails."Calculation Value" * CFactor) - StructureAmount;
              StrOrderLines.RESET;
              StrOrderLines.SETCURRENTKEY(
                "Document Type","Document No.","Calculation Order",Type,"Structure Code","Tax/Charge Type","Tax/Charge Group",
                "Tax/Charge Code","Calculation Type");

              StrOrderLines.SETRANGE(Type,StrOrderLineDetails.Type::Service);
              StrOrderLines.SETRANGE("Document Type","Document Type");
              StrOrderLines.SETRANGE("Document No.","No.");
              StrOrderLines.SETRANGE("Structure Code",Structure);
              StrOrderLines.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
              StrOrderLines.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
              StrOrderLines.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
              StrOrderLines.SETRANGE("Calculation Type",StrOrderDetails."Calculation Type");
              StrOrderLines.SETRANGE("Price Inclusive of Tax",FALSE);
              IF StrOrderLines.FINDSET THEN
                REPEAT
                  IF ServLine.GET(StrOrderLines."Document Type",StrOrderLines."Document No.",StrOrderLines."Line No.") THEN
                    IF ServLine.Type <> ServLine.Type::"G/L Account" THEN
                      IF (StrOrderDetails."Calculation Value" <> 0) AND (NOT StrOrderLines."Manually Changed") THEN BEGIN
                        StrOrderLines.Amount += DiffAmount;
                        StrOrderLines."Amount (LCY)" += DiffAmount / CFactor;
                        StrOrderLines.MODIFY;
                        Adjusted := TRUE;
                      END;
                UNTIL (StrOrderLines.NEXT = 0) OR Adjusted;
            END;
          UNTIL StrOrderDetails.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateServLines@1500035(VAR ServiceHeader@1500000 : Record 5900);
    VAR
      StrOrderDetails@1500004 : Record 13794;
      StrOrderLineDetails@1500003 : Record 13795;
      ServLine@1500002 : Record 5902;
      ChargesToCustomer@1500001 : Decimal;
    BEGIN
      WITH ServiceHeader DO BEGIN
        IF "Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE
          Currency.GET("Currency Code");

        ServLine.LOCKTABLE;
        ServLine.RESET;
        ServLine.SETRANGE("Document Type","Document Type");
        ServLine.SETRANGE("Document No.","No.");
        ServLine.SETFILTER(Type,'<>%1',ServLine.Type::" ");
        IF ServLine.FINDSET THEN
          REPEAT
            IF ServLine.Quantity <> 0 THEN
              WITH ServLine DO BEGIN
                ChargesToCustomer := 0;
                StrOrderDetails.RESET;
                StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                StrOrderDetails.SETRANGE("Document Type","Document Type");
                StrOrderDetails.SETRANGE("Document No.","Document No.");
                StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Service);
                StrOrderDetails.SETRANGE("Document Line No.",0);
                IF StrOrderDetails.FINDSET THEN
                  REPEAT
                    StrOrderLineDetails.RESET;
                    StrOrderLineDetails.SETRANGE(Type,StrOrderLineDetails.Type::Service);
                    StrOrderLineDetails.SETRANGE("Calculation Order",StrOrderDetails."Calculation Order");
                    StrOrderLineDetails.SETRANGE("Document Type","Document Type");
                    StrOrderLineDetails.SETRANGE("Document No.","Document No.");
                    StrOrderLineDetails.SETRANGE("Structure Code",Structure);
                    StrOrderLineDetails.SETRANGE("Item No.","No.");
                    StrOrderLineDetails.SETRANGE("Line No.","Line No.");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Group",StrOrderDetails."Tax/Charge Group");
                    StrOrderLineDetails.SETRANGE("Tax/Charge Code",StrOrderDetails."Tax/Charge Code");
                    IF StrOrderLineDetails.FINDSET THEN
                      REPEAT
                        IF NOT StrOrderDetails."Payable to Third Party" THEN
                          IF NOT (StrOrderDetails."Tax/Charge Type" IN [
                                                                        StrOrderDetails."Tax/Charge Type"::"Sales Tax",
                                                                        StrOrderDetails."Tax/Charge Type"::Excise,
                                                                        StrOrderDetails."Tax/Charge Type"::"Service Tax",
                                                                        StrOrderDetails."Tax/Charge Type"::GST])
                          THEN
                            ChargesToCustomer +=
                              ROUND(StrOrderLineDetails.Amount,Currency."Amount Rounding Precision");
                      UNTIL StrOrderLineDetails.NEXT = 0;
                  UNTIL StrOrderDetails.NEXT = 0;
                "Charges To Customer" := ChargesToCustomer;
                "Amount To Customer" :=
                  "Line Amount" - "Inv. Discount Amount" + "Excise Amount" + "Tax Amount" + "Total GST Amount" + "Charges To Customer" +
                  "Service Tax Amount" + "Service Tax eCess Amount" + "Service Tax SHE Cess Amount" + "Service Tax SBC Amount" +
                  "KK Cess Amount";
                MODIFY;
              END;
          UNTIL ServLine.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateStruOrdLineDetails@1500036();
    VAR
      StructureDetail@1500002 : Record 13793;
      StrOrderLineDetails@1500001 : Record 13795;
      CFactor@1500000 : Decimal;
    BEGIN
      GetServHeader;
      ServHeader.TESTFIELD(Structure);
      StructureDetail.SETRANGE(Code,ServHeader.Structure);
      StructureDetail.SETRANGE(Type,StructureDetail.Type::Excise);
      IF StructureDetail.FINDFIRST THEN BEGIN
        StrOrderLineDetails.GET(
          StrOrderLineDetails.Type::Service,StructureDetail."Calculation Order",
          "Document Type","Document No.","No.","Line No.",StructureDetail.Type,'','EXCISE');
        StrOrderLineDetails."Manually Changed" := TRUE;
        StrOrderLineDetails.Amount :=
          "BED Amount" + "AED(GSI) Amount" + "SED Amount" + "SAED Amount" +
          "CESS Amount" + "NCCD Amount" + "eCess Amount" + "ADET Amount" + "AED(TTA) Amount" + "ADE Amount" + "ADC VAT Amount" +
          "SHE Cess Amount";
        IF ServHeader."Currency Factor" <> 0 THEN
          CFactor := ServHeader."Currency Factor"
        ELSE
          CFactor := 1;
        IF ServHeader."Currency Code" <> '' THEN
          Currency.GET(ServHeader."Currency Code");
        StrOrderLineDetails."Amount (LCY)" := ROUND(StrOrderLineDetails.Amount / CFactor,Currency."Amount Rounding Precision");
        StrOrderLineDetails.Amount := ROUND(StrOrderLineDetails.Amount,Currency."Amount Rounding Precision");
        StrOrderLineDetails.MODIFY(TRUE);
      END;
    END;

    PROCEDURE UpdateGenJnlLine@1500004();
    VAR
      ExciseCenvatClaim@1500000 : Record 16584;
    BEGIN
      ExciseCenvatClaim.SETRANGE("Journal Template Name",'');
      ExciseCenvatClaim.SETRANGE("Journal Batch Name",'');
      ExciseCenvatClaim.SETRANGE("Document No.","Document No.");
      IF ExciseCenvatClaim.FINDFIRST THEN BEGIN
        ExciseCenvatClaim."BED Amount" := 0;
        ExciseCenvatClaim."AED(GSI) Amount" := 0;
        ExciseCenvatClaim."SED Amount" := 0;
        ExciseCenvatClaim."SAED Amount" := 0;
        ExciseCenvatClaim."CESS Amount" := 0;
        ExciseCenvatClaim."NCCD Amount" := 0;
        ExciseCenvatClaim."eCess Amount" := 0;
        ExciseCenvatClaim."ADET Amount" := 0;
        ExciseCenvatClaim."ADE Amount" := 0;
        ExciseCenvatClaim."AED(TTA) Amount" := 0;
        ExciseCenvatClaim."SHE Cess Amount" := 0;
        ExciseCenvatClaim."ADC VAT Amount" := 0;
        ExciseCenvatClaim.MODIFY;
      END;
    END;

    PROCEDURE CheckManualChangedLines@1500011() : Boolean;
    VAR
      StrOrderLines@1500000 : Record 13795;
    BEGIN
      StrOrderLines.SETCURRENTKEY("Document Type","Document No.",Type);
      StrOrderLines.SETRANGE(Type,StrOrderLines.Type::Service);
      StrOrderLines.SETRANGE("Document Type","Document Type");
      StrOrderLines.SETRANGE("Document No.","Document No.");
      StrOrderLines.SETRANGE("Line No.","Line No.");
      StrOrderLines.SETRANGE("Item No.","No.");
      StrOrderLines.SETRANGE("Manually Changed",TRUE);
      EXIT(StrOrderLines.FINDFIRST);
    END;

    PROCEDURE GetBaseAmount@1500031(VAR Amt@1500000 : Decimal;ServLine@1500003 : Record 5902;DocNo@1500004 : Code[20]) CVDEntry : Boolean;
    VAR
      RG23D@1500005 : Record 16537;
      CurrencyFactor@1500002 : Decimal;
      Qty@1500001 : Decimal;
    BEGIN
      IF GetBaseAmtForReturnOrder(ServLine,Amt,DocNo,CVDEntry) THEN
        EXIT;
      WITH ServLine DO BEGIN
        GetServHeader;
        IF (ServHeader."Currency Code" <> '') AND (ServHeader."Currency Factor" <> 0) THEN
          CurrencyFactor := ServHeader."Currency Factor"
        ELSE
          CurrencyFactor := 1;

        BEDAmt := 0;
        "AED(GSI)Amt" := 0;
        "AED(TTA)Amt" := 0;
        SEDAmt := 0;
        SAEDAmt := 0;
        CESSAmt := 0;
        NCCDAmt := 0;
        eCessAmt := 0;
        SHECessAmt := 0;
        ADETAmt := 0;
        ADEAmt := 0;
        Amt := 0;
        ADCVATAmt := 0;

        CheckAvailableQty(DocNo);
        RG23D.SETCURRENTKEY("Item No.","Posting Date","Transaction Type",Type,"Location Code");
        RG23D.SETRANGE("Item No.","No.");
        RG23D.SETRANGE("Transaction Type",RG23D."Transaction Type"::Purchase);
        RG23D.SETRANGE("Location Code","Location Code");
        RG23D.SETRANGE(Closed,FALSE);
        IF RG23D.FINDSET THEN
          REPEAT
            Location.CheckTradingLocation("Location Code");
            RG23D.CALCFIELDS("Remaining Quantity");
            Qty += RG23D."Remaining Quantity";
            IF NOT CVDEntry THEN
              CVDEntry := RG23D.CVD;
            IF Qty <= "Qty. to Invoice" THEN BEGIN
              Amt += RG23D."Excise Base Amt Per Unit" * RG23D."Remaining Quantity" * CurrencyFactor;
              BEDAmt += RG23D."BED Amount Per Unit" * RG23D."Remaining Quantity" * CurrencyFactor;
              "AED(GSI)Amt" += RG23D."AED(GSI) Amount Per Unit" * RG23D."Remaining Quantity" * CurrencyFactor;
              "AED(TTA)Amt" += RG23D."AED(TTA) Amount Per Unit" * RG23D."Remaining Quantity" * CurrencyFactor;
              SEDAmt += RG23D."SED Amount Per Unit" * RG23D."Remaining Quantity" * CurrencyFactor;
              SAEDAmt += RG23D."SAED Amount Per Unit" * RG23D."Remaining Quantity" * CurrencyFactor;
              CESSAmt += RG23D."CESS Amount Per Unit" * RG23D."Remaining Quantity" * CurrencyFactor;
              NCCDAmt += RG23D."NCCD Amount Per Unit" * RG23D."Remaining Quantity" * CurrencyFactor;
              eCessAmt += RG23D."eCess Amount Per Unit" * RG23D."Remaining Quantity" * CurrencyFactor;
              SHECessAmt += RG23D."SHE Cess Amount Per Unit" * RG23D."Remaining Quantity" * CurrencyFactor;
              ADETAmt += RG23D."ADET Amount Per Unit" * RG23D."Remaining Quantity" * CurrencyFactor;
              ADEAmt += RG23D."ADE Amount Per Unit" * RG23D."Remaining Quantity" * CurrencyFactor;
              ADCVATAmt += RG23D."ADC VAT Amount Per Unit" * RG23D."Remaining Quantity" * CurrencyFactor;
              InitDetailRG23D(-RG23D."Remaining Quantity",RG23D."Entry No.");
            END;
            IF Qty > "Qty. to Invoice" THEN BEGIN
              Qty -= RG23D."Remaining Quantity";
              Amt += RG23D."Excise Base Amt Per Unit" * ("Qty. to Invoice" - Qty) * CurrencyFactor;
              BEDAmt += RG23D."BED Amount Per Unit" * ("Qty. to Invoice" - Qty) * CurrencyFactor;
              "AED(GSI)Amt" += RG23D."AED(GSI) Amount Per Unit" * ("Qty. to Invoice" - Qty) * CurrencyFactor;
              "AED(TTA)Amt" += RG23D."AED(TTA) Amount Per Unit" * ("Qty. to Invoice" - Qty) * CurrencyFactor;
              SEDAmt += RG23D."SED Amount Per Unit" * ("Qty. to Invoice" - Qty) * CurrencyFactor;
              SAEDAmt += RG23D."SAED Amount Per Unit" * ("Qty. to Invoice" - Qty) * CurrencyFactor;
              CESSAmt += RG23D."CESS Amount Per Unit" * ("Qty. to Invoice" - Qty) * CurrencyFactor;
              NCCDAmt += RG23D."NCCD Amount Per Unit" * ("Qty. to Invoice" - Qty) * CurrencyFactor;
              eCessAmt += RG23D."eCess Amount Per Unit" * ("Qty. to Invoice" - Qty) * CurrencyFactor;
              SHECessAmt += RG23D."SHE Cess Amount Per Unit" * ("Qty. to Invoice" - Qty) * CurrencyFactor;
              ADETAmt += RG23D."ADET Amount Per Unit" * ("Qty. to Invoice" - Qty) * CurrencyFactor;
              ADEAmt += RG23D."ADE Amount Per Unit" * ("Qty. to Invoice" - Qty) * CurrencyFactor;
              ADCVATAmt += RG23D."ADC VAT Amount Per Unit" * ("Qty. to Invoice" - Qty) * CurrencyFactor;
              InitDetailRG23D(Qty - "Qty. to Invoice",RG23D."Entry No.");
              EXIT;
            END;
          UNTIL RG23D.NEXT = 0;
      END;
    END;

    PROCEDURE GetBaseAmtForReturnOrder@1500018(ServLine@1500002 : Record 5902;VAR Amt@1500003 : Decimal;DocNo@1500001 : Code[20];VAR CVDEntry@1500010 : Boolean) : Boolean;
    VAR
      RG23D@1500008 : Record 16537;
      RG23D2@1500007 : Record 16537;
      CurrencyFactor@1500006 : Decimal;
      Qty@1500005 : Decimal;
      Qty2@1500004 : Decimal;
      RefEntryNo@1500000 : Integer;
    BEGIN
      WITH ServLine DO BEGIN
        GetServHeader;
        IF NOT (ServHeader."Document Type" IN [ServHeader."Document Type"::"Credit Memo"]) AND (ServHeader."Applies-to Doc. No." = '')
        THEN
          EXIT(FALSE);
        IF (ServHeader."Currency Code" <> '') AND (ServHeader."Currency Factor" <> 0) THEN
          CurrencyFactor := ServHeader."Currency Factor"
        ELSE
          CurrencyFactor := 1;

        Qty := "Qty. to Invoice";
        BEDAmt := 0;
        "AED(GSI)Amt" := 0;
        "AED(TTA)Amt" := 0;
        SEDAmt := 0;
        SAEDAmt := 0;
        CESSAmt := 0;
        NCCDAmt := 0;
        eCessAmt := 0;
        SHECessAmt := 0;
        ADETAmt := 0;
        ADEAmt := 0;
        ADCVATAmt := 0;
        Amt := 0;
        CheckAvailableQtyForReturn(DocNo);
        Location.CheckTradingLocation("Location Code");
        RG23D.SETCURRENTKEY("Item No.","Posting Date","Transaction Type",Type,"Location Code");
        RG23D.SETRANGE("Item No.","No.");
        RG23D.SETRANGE("Document No.",DocNo);
        RG23D.SETRANGE("Transaction Type",RG23D."Transaction Type"::Sale);
        RG23D.SETRANGE(Type,RG23D.Type::Invoice);
        RG23D.SETRANGE("Location Code","Location Code");
        IF RG23D.FINDSET THEN
          REPEAT
            IF NOT CVDEntry THEN
              CVDEntry := RG23D.CVD;
            RefEntryNo := 0;
            Qty2 := 0;
            IF RG23D2.GET(RG23D."Ref. Entry No.") THEN;
            RG23D2.CALCFIELDS("Remaining Quantity");
            IF RG23D2."Remaining Quantity" <> RG23D2.Quantity THEN BEGIN
              Qty2 := RG23D2.Quantity - RG23D2."Remaining Quantity";
              IF Qty2 > Qty THEN
                Qty2 := Qty;
              Amt += -1 * RG23D."Excise Base Amt Per Unit" * Qty2 * CurrencyFactor;
              BEDAmt += -1 * RG23D."BED Amount Per Unit" * Qty2 * CurrencyFactor;
              "AED(GSI)Amt" += -1 * RG23D."AED(GSI) Amount Per Unit" * Qty2 * CurrencyFactor;
              "AED(TTA)Amt" += -1 * RG23D."AED(TTA) Amount Per Unit" * Qty2 * CurrencyFactor;
              SEDAmt += -1 * RG23D."SED Amount Per Unit" * Qty2 * CurrencyFactor;
              SAEDAmt += -1 * RG23D."SAED Amount Per Unit" * Qty2 * CurrencyFactor;
              CESSAmt += -1 * RG23D."CESS Amount Per Unit" * Qty2 * CurrencyFactor;
              NCCDAmt += -1 * RG23D."NCCD Amount Per Unit" * Qty2 * CurrencyFactor;
              eCessAmt += -1 * RG23D."eCess Amount Per Unit" * Qty2 * CurrencyFactor;
              SHECessAmt += -1 * RG23D."SHE Cess Amount Per Unit" * Qty2 * CurrencyFactor;
              ADETAmt += -1 * RG23D."ADET Amount Per Unit" * Qty2 * CurrencyFactor;
              ADEAmt += -1 * RG23D."ADE Amount Per Unit" * Qty2 * CurrencyFactor;
              ADCVATAmt += -1 * RG23D."ADC VAT Amount Per Unit" * Qty2 * CurrencyFactor;

              RefEntryNo := GetRefEntryNo(RG23D);
              IF RefEntryNo <> 0 THEN
                InitDetailRG23D(Qty2,RefEntryNo);
            END;
            Qty -= Qty2;
          UNTIL RG23D.NEXT = 0;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetEntryNo@1500014() : Integer;
    VAR
      DetailRG23D@1500000 : Record 16533;
    BEGIN
      IF DetailRG23D.FINDLAST THEN
        EXIT(DetailRG23D."Entry No." + 1);
      EXIT(1);
    END;

    PROCEDURE InitDetailRG23D@1500013(Qty@1500000 : Decimal;EntryNo@1500002 : Integer);
    VAR
      DetailRG23D@1500001 : Record 16533;
    BEGIN
      IF Qty = 0 THEN
        EXIT;
      DetailRG23D.INIT;
      DetailRG23D."Entry No." := GetEntryNo;
      DetailRG23D."Document Type" := "Document Type";
      DetailRG23D."Order No." := "Document No.";
      DetailRG23D."Line No." := "Line No.";
      DetailRG23D.Quantity := Qty;
      DetailRG23D."RG 23 D Entry No." := EntryNo;
      DetailRG23D."Transaction Type" := DetailRG23D."Transaction Type"::Sale;
      DetailRG23D.INSERT(TRUE);
    END;

    PROCEDURE CheckAvailableQty@1500012(DocNo@1500004 : Code[20]);
    VAR
      ServLine@1500003 : Record 5902;
      Rg23D@1500002 : Record 16537;
      DetailRg23D@1500001 : Record 16533;
      QtyAllocated@1500000 : Decimal;
    BEGIN
      ServLine.SETCURRENTKEY("Document Type","Document No.",Type,"No.");
      ServLine.SETRANGE("Document Type","Document Type");
      ServLine.SETRANGE("Document No.","Document No.");
      ServLine.SETRANGE(Type,ServLine.Type::Item);
      ServLine.SETRANGE("No.","No.");
      ServLine.CALCSUMS("Qty. to Invoice");

      GetServHeader;
      Rg23D.SETCURRENTKEY("Item No.","Posting Date","Transaction Type",Type,"Location Code");
      Rg23D.SETRANGE("Item No.","No.");
      IF ServHeader."Applies-to Doc. No." <> '' THEN
        Rg23D.SETRANGE("Document No.",DocNo);
      Rg23D.SETRANGE("Transaction Type",Rg23D."Transaction Type"::Purchase);
      Rg23D.SETRANGE("Location Code","Location Code");
      Rg23D.SETRANGE(Closed,FALSE);
      DetailRg23D.SETCURRENTKEY("RG 23 D Entry No.","Document No.");
      IF Rg23D.FINDSET THEN
        REPEAT
          DetailRg23D.SETRANGE("RG 23 D Entry No.",Rg23D."Entry No.");
          DetailRg23D.SETFILTER("Document No.",'<>%1','');
          DetailRg23D.CALCSUMS(Quantity);
          QtyAllocated += DetailRg23D.Quantity;
        UNTIL Rg23D.NEXT = 0;

      IF QtyAllocated < ServLine."Qty. to Invoice" THEN
        ERROR(Text16500,"No.",QtyAllocated,FIELDCAPTION("Qty. to Invoice"));
    END;

    PROCEDURE CheckAvailableQtyForReturn@1500016(DocNo@1500004 : Code[20]);
    VAR
      ServLine@1500002 : Record 5902;
      RG23D@1500001 : Record 16537;
      QtyAllocated@1500000 : Decimal;
    BEGIN
      ServLine.SETCURRENTKEY("Document Type","Document No.",Type,"No.");
      ServLine.SETRANGE("Document Type","Document Type");
      ServLine.SETRANGE("Document No.","Document No.");
      ServLine.SETRANGE(Type,ServLine.Type::Item);
      ServLine.SETRANGE("No.","No.");
      ServLine.CALCSUMS("Qty. to Invoice");

      RG23D.SETCURRENTKEY("Item No.","Posting Date","Transaction Type",Type,"Location Code");
      RG23D.SETRANGE("Item No.","No.");
      RG23D.SETRANGE("Document No.",DocNo);
      RG23D.SETRANGE("Transaction Type",RG23D."Transaction Type"::Sale);
      RG23D.SETRANGE("Location Code","Location Code");
      IF RG23D.FINDSET THEN
        REPEAT
          QtyAllocated += ABS(RG23D.Quantity);
        UNTIL RG23D.NEXT = 0;

      IF (QtyAllocated < ServLine."Qty. to Invoice") OR (ServLine."Qty. to Invoice" = 0) THEN
        ERROR(Text16500,"No.",QtyAllocated,FIELDCAPTION("Qty. to Invoice"));
    END;

    PROCEDURE GetRefEntryNo@1500019(VAR RG23D@1500000 : Record 16537) : Integer;
    VAR
      RG23D2@1500002 : Record 16537;
      RG23D3@1500001 : Record 16537;
    BEGIN
      RG23D2.COPYFILTERS(RG23D);
      IF RG23D2.FINDSET THEN
        REPEAT
          IF RG23D3.GET(RG23D2."Ref. Entry No.") THEN;
          RG23D3.CALCFIELDS("Remaining Quantity");
          IF RG23D3."Remaining Quantity" < RG23D3.Quantity THEN
            EXIT(RG23D3."Entry No.");
        UNTIL RG23D2.NEXT = 0;
    END;

    PROCEDURE GetCompanyInformation@1500017();
    BEGIN
      IF NOT CompanyInfoRead THEN BEGIN
        CompanyInfo.GET;
        CompanyInfoRead := TRUE;
      END;
    END;

    PROCEDURE GetStandardDeduction@1500020(VAR ServiceHeader@1500000 : Record 5900);
    VAR
      StrOrderDetails@1500004 : Record 13794;
      TaxArea@1500003 : Record 318;
      TaxAreaLine@1500002 : Record 319;
      TaxDetail@1500001 : Record 322;
    BEGIN
      "Standard Deduction %" := 0;
      StrOrderDetails.RESET;
      StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
      StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Service);
      StrOrderDetails.SETRANGE("Document Type","Document Type");
      StrOrderDetails.SETRANGE("Document No.","Document No.");
      StrOrderDetails.SETRANGE("Document Line No.",0);
      StrOrderDetails.SETRANGE("Tax/Charge Type",StrOrderDetails."Tax/Charge Type"::"Sales Tax");
      IF StrOrderDetails.FINDFIRST THEN BEGIN
        IF "Tax Area Code" = '' THEN
          EXIT;
        TaxArea.SETRANGE(Code,"Tax Area Code");
        IF TaxArea.FINDFIRST THEN
          TaxAreaLine.SETFILTER("Tax Area",TaxArea.Code);

        IF TaxAreaLine.FINDSET THEN
          REPEAT
            TaxDetail.SETFILTER("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
            TaxDetail.SETRANGE("Tax Group Code","Tax Group Code");
            TaxDetail.SETFILTER("Effective Date",'<=%1',ServiceHeader."Posting Date");
            TaxDetail.SETFILTER("Form Code",'%1',"Form Code");
            IF TaxDetail.FINDLAST THEN
              "Standard Deduction %" := TaxDetail."Standard Deduction %"
          UNTIL TaxAreaLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateSalesLineBuffer@1500025();
    VAR
      DutyCode@1500001 : Record 16562;
      SaleslineBuffer@1500000 : Record 16583;
    BEGIN
      DutyCode.RESET;
      IF DutyCode.FINDSET THEN
        REPEAT
          SaleslineBuffer.RESET;
          SaleslineBuffer.SETRANGE("Document Type","Document Type");
          SaleslineBuffer.SETRANGE("Document No.","Document No.");
          SaleslineBuffer.SETRANGE("Document Line No.","Line No.");
          SaleslineBuffer.SETRANGE(Type,SaleslineBuffer.Type::Excise);
          SaleslineBuffer.SETRANGE("Component Code",DutyCode."Duty Code No.");
          IF SaleslineBuffer.FINDFIRST THEN BEGIN
            CASE DutyCode."Duty Code No." OF
              1:
                SaleslineBuffer."Actual Amount Forward" := "BED Amount";
              2:
                SaleslineBuffer."Actual Amount Forward" := "AED(GSI) Amount";
              3:
                SaleslineBuffer."Actual Amount Forward" := "AED(TTA) Amount";
              4:
                SaleslineBuffer."Actual Amount Forward" := "SED Amount";
              5:
                SaleslineBuffer."Actual Amount Forward" := "SAED Amount";
              6:
                SaleslineBuffer."Actual Amount Forward" := "CESS Amount";
              7:
                SaleslineBuffer."Actual Amount Forward" := "NCCD Amount";
              8:
                SaleslineBuffer."Actual Amount Forward" := "ADET Amount";
              9:
                SaleslineBuffer."Actual Amount Forward" := "ADE Amount";
              10:
                SaleslineBuffer."Actual Amount Forward" := "eCess Amount";
              11:
                SaleslineBuffer."Actual Amount Forward" := "ADC VAT Amount";
              12:
                SaleslineBuffer."Actual Amount Forward" := "SHE Cess Amount";
            END;
            SaleslineBuffer.MODIFY(TRUE);
          END;
        UNTIL DutyCode.NEXT = 0;
    END;

    PROCEDURE ValidateTaxGroupCode@1500029();
    VAR
      TaxAreaLine2@1500002 : Record 319;
      TaxJurisdiction2@1500001 : Record 320;
      Taxdetail@1500000 : Record 322;
    BEGIN
      TaxAreaLine2.SETCURRENTKEY("Tax Area","Calculation Order");
      TaxAreaLine2.SETRANGE("Tax Area","Tax Area Code");
      IF TaxAreaLine2.FINDFIRST THEN BEGIN
        TaxJurisdiction2.GET(TaxAreaLine2."Tax Jurisdiction Code");
        Taxdetail.RESET;
        Taxdetail.SETRANGE("Tax Jurisdiction Code",TaxAreaLine2."Tax Jurisdiction Code");
        Taxdetail.SETFILTER("Tax Group Code",'%1',"Tax Group Code");
        IF NOT TaxJurisdiction2."Forms Not Applicable" THEN
          Taxdetail.SETRANGE("Form Code","Form Code")
        ELSE
          Taxdetail.SETRANGE("Forms Not Applicable",TRUE);
        IF Taxdetail.FINDLAST THEN
          "Standard Deduction %" := Taxdetail."Standard Deduction %";
      END;
    END;

    PROCEDURE CheckAssessableValue@1500026(ServiceHeader@1500000 : Record 5900) : Boolean;
    VAR
      ExcisePostingSetup@1500002 : Record 13711;
      AssessableValue@1500001 : Boolean;
    BEGIN
      WITH ServiceHeader DO BEGIN
        ExcisePostingSetup.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
        ExcisePostingSetup.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
        IF "Posting Date" <> 0D THEN
          ExcisePostingSetup.SETRANGE("From Date",0D,"Posting Date")
        ELSE
          ExcisePostingSetup.SETRANGE("From Date",0D,WORKDATE);
        IF ExcisePostingSetup.FINDLAST THEN
          AssessableValue :=
            ExcisePostingSetup."BED Calculation Type" = ExcisePostingSetup."BED Calculation Type"::"% of Accessable Value";
        EXIT(AssessableValue);
      END;
    END;

    PROCEDURE GetExcisePostingSetup@1500015();
    VAR
      ServiceHeader@1500002 : Record 5900;
      ExcisePostingSetup2@1500003 : Record 13711;
      StructureDetails@1500001 : Record 13793;
      ExcisePostingSetupForm@1500000 : Page 13710;
    BEGIN
      ServiceHeader.GET("Document Type","Document No.");
      IF ServiceHeader.Structure <> '' THEN BEGIN
        StructureDetails.SETRANGE(Code,ServiceHeader.Structure);
        StructureDetails.SETRANGE(Type,StructureDetails.Type::Excise);
        IF StructureDetails.FINDFIRST THEN BEGIN
          ExcisePostingSetup2.SETRANGE("Excise Bus. Posting Group","Excise Bus. Posting Group");
          ExcisePostingSetup2.SETRANGE("Excise Prod. Posting Group","Excise Prod. Posting Group");
          ExcisePostingSetup2.SETRANGE("From Date",0D,ServiceHeader."Posting Date");
          IF ExcisePostingSetup2.FINDLAST THEN
            ExcisePostingSetup2.MARK := TRUE;
          ExcisePostingSetup2.MARKEDONLY(TRUE);
          ExcisePostingSetupForm.EDITABLE := FALSE;
          ExcisePostingSetupForm.SETTABLEVIEW(ExcisePostingSetup2);
          ExcisePostingSetupForm.RUNMODAL;
        END ELSE
          ERROR(Text16508);
      END ELSE
        ERROR(Text16508);
    END;

    LOCAL PROCEDURE CheckIfCanBeModified@81();
    BEGIN
      IF ("Appl.-to Service Entry" > 0) AND ("Contract No." <> '') THEN
        ERROR(Text053);
    END;

    LOCAL PROCEDURE ViewDimensionSetEntries@80();
    BEGIN
      DimMgt.ShowDimensionSet(
        "Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Document No.","Line No."));
    END;

    PROCEDURE TestBinCode@82();
    VAR
      Location@1001 : Record 14;
    BEGIN
      IF ("Location Code" = '') OR (Type <> Type::Item) THEN
        EXIT;
      Location.GET("Location Code");
      IF NOT Location."Bin Mandatory" THEN
        EXIT;
      IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) OR
         NOT Location."Directed Put-away and Pick"
      THEN
        TESTFIELD("Bin Code");
    END;

    LOCAL PROCEDURE UpdateServiceTaxRegistrationNo@1500002();
    BEGIN
      IF "Location Code" = '' THEN BEGIN
        GetCompanyInformation;
        "Service Tax Registration No." := CompanyInfo."Service Tax Registration No.";
      END ELSE BEGIN
        GetLocation("Location Code");
        "Service Tax Registration No." := Location."Service Tax Registration No."
      END;
    END;

    PROCEDURE GetNextLineNo@83(ServiceLineSource@1001 : Record 5902;BelowxRec@1000 : Boolean) : Integer;
    VAR
      ServiceLine@1006 : Record 5902;
      LowLineNo@1005 : Integer;
      HighLineNo@1004 : Integer;
      NextLineNo@1003 : Integer;
      LineStep@1002 : Integer;
    BEGIN
      LowLineNo := 0;
      HighLineNo := 0;
      NextLineNo := 0;
      LineStep := 10000;
      ServiceLine.SETRANGE("Document Type","Document Type");
      ServiceLine.SETRANGE("Document No.","Document No.");

      IF ServiceLine.FIND('+') THEN
        IF NOT ServiceLine.GET(ServiceLineSource."Document Type",ServiceLineSource."Document No.",ServiceLineSource."Line No.") THEN
          NextLineNo := ServiceLine."Line No." + LineStep
        ELSE
          IF BelowxRec THEN BEGIN
            ServiceLine.FINDLAST;
            NextLineNo := ServiceLine."Line No." + LineStep;
          END ELSE
            IF ServiceLine.NEXT(-1) = 0 THEN BEGIN
              LowLineNo := 0;
              HighLineNo := ServiceLineSource."Line No.";
            END ELSE BEGIN
              ServiceLine := ServiceLineSource;
              ServiceLine.NEXT(-1);
              LowLineNo := ServiceLine."Line No.";
              HighLineNo := ServiceLineSource."Line No.";
            END
      ELSE
        NextLineNo := LineStep;

      IF NextLineNo = 0 THEN
        NextLineNo := ROUND((LowLineNo + HighLineNo) / 2,1,'<');

      IF ServiceLine.GET("Document Type","Document No.",NextLineNo) THEN
        EXIT(0);
      EXIT(NextLineNo);
    END;

    PROCEDURE DeleteWithAttachedLines@84();
    BEGIN
      SETRANGE("Document Type","Document Type");
      SETRANGE("Document No.","Document No.");
      SETRANGE("Attached to Line No.","Line No.");
      DELETEALL;

      SETRANGE("Document Type");
      SETRANGE("Document No.");
      SETRANGE("Attached to Line No.");
      DELETE;
    END;

    LOCAL PROCEDURE UpdateDimSetupFromDimSetID@85(VAR TableID@1001 : ARRAY [10] OF Integer;VAR No@1004 : ARRAY [10] OF Code[20];InheritFromDimSetID@1000 : Integer);
    VAR
      TempDimSetEntry@1002 : TEMPORARY Record 480;
      LastAddedTableID@1003 : Integer;
    BEGIN
      DimMgt.GetDimensionSet(TempDimSetEntry,InheritFromDimSetID);
      ServHeader.GET("Document Type","Document No.");
      LastAddedTableID := 3;
      UpdateDimSetupByDefaultDim(
        DATABASE::"Service Order Type",ServHeader."Service Order Type",TempDimSetEntry,TableID,No,LastAddedTableID);
      UpdateDimSetupByDefaultDim(
        DATABASE::Customer,ServHeader."Bill-to Customer No.",TempDimSetEntry,TableID,No,LastAddedTableID);
      UpdateDimSetupByDefaultDim(
        DATABASE::"Salesperson/Purchaser",ServHeader."Salesperson Code",TempDimSetEntry,TableID,No,LastAddedTableID);
      UpdateDimSetupByDefaultDim(
        DATABASE::"Service Contract Header",ServHeader."Contract No.",TempDimSetEntry,TableID,No,LastAddedTableID);
      UpdateDimSetupByDefaultDim(
        DATABASE::"Service Item",ServItemLine."Service Item No.",TempDimSetEntry,TableID,No,LastAddedTableID);
      UpdateDimSetupByDefaultDim(
        DATABASE::"Service Item Group",ServItemLine."Service Item Group Code",TempDimSetEntry,TableID,No,LastAddedTableID);
    END;

    LOCAL PROCEDURE UpdateDimSetupByDefaultDim@95(SourceID@1002 : Integer;SourceNo@1003 : Code[20];VAR TempDimSetEntry@1001 : TEMPORARY Record 480;VAR TableID@1000 : ARRAY [10] OF Integer;VAR No@1007 : ARRAY [10] OF Code[20];VAR LastAddedTableID@1005 : Integer);
    VAR
      DefaultDim@1004 : Record 352;
      TableAdded@1006 : Boolean;
    BEGIN
      IF SourceNo = '' THEN
        EXIT;

      DefaultDim.SETRANGE("Table ID",SourceID);
      DefaultDim.SETRANGE("No.",SourceNo);
      IF DefaultDim.FINDSET THEN
        REPEAT
          TempDimSetEntry.SETRANGE("Dimension Code",DefaultDim."Dimension Code");
          TempDimSetEntry.SETRANGE("Dimension Value Code",DefaultDim."Dimension Value Code");
          IF TempDimSetEntry.FINDFIRST THEN BEGIN
            UpdateDimSetup(TableID,No,DefaultDim."Table ID",DefaultDim."No.",LastAddedTableID);
            TableAdded := TRUE;
          END;
        UNTIL (DefaultDim.NEXT = 0) OR TableAdded;
    END;

    LOCAL PROCEDURE UpdateDimSetup@89(VAR TableID@1000 : ARRAY [10] OF Integer;VAR No@1005 : ARRAY [10] OF Code[20];NewTableID@1001 : Integer;NewNo@1006 : Code[20];VAR LastAddedTableID@1002 : Integer);
    VAR
      TableAlreadyAdded@1004 : Boolean;
      i@1003 : Integer;
    BEGIN
      FOR i := 1 TO LastAddedTableID DO
        IF TableID[i] = NewTableID THEN
          TableAlreadyAdded := TRUE;

      IF NOT TableAlreadyAdded THEN BEGIN
        LastAddedTableID += 1;
        TableID[LastAddedTableID] := NewTableID;
        No[LastAddedTableID] := NewNo;
      END;
    END;

    PROCEDURE UpdateGSTAmounts@1500040(GSTBaseAmount@1500009 : Decimal);
    VAR
      ItemChargeAssignmentSales@1500005 : Record 5809;
      Customer@1500002 : Record 18;
      ShiptoAddress@1500006 : Record 222;
      ServiceHeader1@1500010 : Record 5900;
      GSTManagement@1500008 : Codeunit 16401;
      GSTPerStateCode@1500007 : Code[20];
      GSTJurisdiction@1500004 : 'Intrastate,Interstate';
      TotalGST@1500003 : Decimal;
      TransactionType@1500000 : 'Purchase,Sale,Transfer,Service';
      SourceType@1500001 : 'Vendor,Customer';
    BEGIN
      IF "Line No." = 0 THEN
        EXIT;
      GetServHeader;
      GetCurrency;
      GSTManagement.DeleteGSTBuffer(TransactionType::Service,"Document Type","Document No.","Line No.");
      GSTManagement.DeleteGSTCalculationBuffer(TransactionType::Sale,"Document Type","Document No.","Line No.");
      VALIDATE("GST Base Amount",0);
      IF ServiceHeader1."No." = '' THEN
        ServiceHeader1.COPY(ServHeader);
      IF NOT GSTManagement.IsGSTApplicable(ServiceHeader1.Structure) THEN
        EXIT;
      IF "Unit Price" = 0 THEN
        EXIT;
      IF ServiceHeader1."GST Customer Type" = ServiceHeader1."GST Customer Type"::" " THEN
        EXIT;
      IF "Currency Code" <> '' THEN BEGIN
        Currency.TESTFIELD("Amount Rounding Precision");
        GSTBaseAmount := ROUND(GSTBaseAmount,Currency."Amount Rounding Precision");
      END;

      IF Customer.GET("Customer No.") THEN;
      IF Location.GET("Location Code") THEN;
      IF ServiceHeader1."GST Customer Type" IN
        [ServiceHeader1."GST Customer Type"::Export,ServiceHeader1."GST Customer Type"::"Deemed Export",
        ServiceHeader1."GST Customer Type"::"SEZ Development",ServiceHeader1."GST Customer Type"::"SEZ Unit"] THEN
        GSTPerStateCode :=
          GSTManagement.GetGSTConfiguration(SourceType::Customer,ServiceHeader1."Location State Code",'',GSTJurisdiction)
      ELSE
        GSTPerStateCode :=
          GSTManagement.GetGSTConfiguration(
            SourceType::Customer,ServiceHeader1."Location State Code",GetPlaceOfSupplyStateCode(Rec),GSTJurisdiction);
      IF GSTPerStateCode = '' THEN
        EXIT;
      TotalGST :=
        GSTManagement.CalculateGSTAmounts(
          "Document No.","Line No.",GSTJurisdiction,GSTPerStateCode,"GST Group Code",
          ServiceHeader1."Posting Date",GSTBaseAmount,TransactionType::Service,"Document Type",
          "Currency Code",ServiceHeader1."Currency Factor",
          "Unit Price",TRUE,Quantity,"Unit of Measure Code","No.");
      "GST Base Amount" := GSTBaseAmount;
      IF (ServHeader."GST Without Payment of Duty") OR
        (ServHeader."GST Customer Type" = ServHeader."GST Customer Type"::Exempted) OR Exempted THEN
        "Total GST Amount" := 0
      ELSE
        "Total GST Amount" := TotalGST;
      IF GSTBaseAmount <> 0 THEN
        "GST %" := "Total GST Amount" / GSTBaseAmount * 100;
      "GST Jurisdiction Type" := GSTJurisdiction;
      "Invoice Type" := ServHeader."Invoice Type";
      GSTManagement.DeleteGSTCalculationBuffer(TransactionType::Sale,"Document Type","Document No.","Line No.");
    END;

    PROCEDURE GetPlaceOfSupplyStateCode@1500043(ServiceLine@1500004 : Record 5902) : Code[10];
    VAR
      Location@1500002 : Record 14;
      ShiptoAddress@1500003 : Record 222;
      Customer@1500001 : Record 18;
      ServiceMgtSetup@1500005 : Record 5911;
      PlaceofSupplyStateCode@1500000 : Code[10];
    BEGIN
      ServiceMgtSetup.GET;
      WITH ServiceLine DO BEGIN
        GetServHeader;
        ServHeader.GET("Document Type","Document No.");
        CASE "GST Place Of Supply" OF
          "GST Place Of Supply"::"Bill-to Address":
            PlaceofSupplyStateCode := ServHeader."GST Bill-to State Code";
          "GST Place Of Supply"::"Ship-to Address":
            PlaceofSupplyStateCode := ServHeader."GST Ship-to State Code";
          "GST Place Of Supply"::"Location Address":
            PlaceofSupplyStateCode := ServHeader."Location State Code";
          "GST Place Of Supply"::" ":
              IF ServiceMgtSetup."GST Dependency Type" = ServiceMgtSetup."GST Dependency Type"::"Bill-to Address" THEN
                PlaceofSupplyStateCode := ServHeader."GST Bill-to State Code"
              ELSE IF ServiceMgtSetup."GST Dependency Type" = ServiceMgtSetup."GST Dependency Type"::"Ship-to Address" THEN
                PlaceofSupplyStateCode := ServHeader."GST Ship-to State Code";
        END;
      END;
      EXIT(PlaceofSupplyStateCode);
    END;

    LOCAL PROCEDURE NoValidation@1500008();
    BEGIN
      CheckIfCanBeModified;

      TESTFIELD("Qty. Shipped Not Invoiced",0);
      TESTFIELD("Quantity Shipped",0);
      TESTFIELD("Shipment No.",'');
      CheckItemAvailable(FIELDNO("No."));
      TestStatusOpen;

      Clearfields;

      UpdateReservation(FIELDNO("No."));

      IF "No." = '' THEN
        EXIT;

      GetServHeader;

      IF ServHeader."Document Type" = ServHeader."Document Type"::Quote THEN BEGIN
        IF ServHeader."Customer No." = '' THEN
          ERROR(
            Text031,
            ServHeader.FIELDCAPTION("Customer No."));
        IF ServHeader."Bill-to Customer No." = '' THEN
          ERROR(
            Text031,
            ServHeader.FIELDCAPTION("Bill-to Customer No."));
      END ELSE
        ServHeader.TESTFIELD("Customer No.");

      "Customer No." := ServHeader."Customer No.";
      IF "Service Item Line No." <> 0 THEN BEGIN
        ServItemLine.GET(ServHeader."Document Type",ServHeader."No.","Service Item Line No.");
        "Ship-to Code" := ServItemLine."Ship-to Code";
      END ELSE
        "Ship-to Code" := ServHeader."Ship-to Code";
      IF "Posting Date" = 0D THEN
        "Posting Date" := ServHeader."Posting Date";
      "Document Type" := ServHeader."Document Type";

      "Order Date" := ServHeader."Order Date";
      "Replaced Item No." := '';
      "Component Line No." := 0;
      "Spare Part Action" := 0;
      "Price Adjmt. Status" := "Price Adjmt. Status"::" ";
      "Exclude Warranty" := FALSE;
      "Exclude Contract Discount" := FALSE;
      "Fault Reason Code" := '';

      "Bill-to Customer No." := ServHeader."Bill-to Customer No.";
      "Customer Price Group" := ServHeader."Customer Price Group";
      "Customer Disc. Group" := ServHeader."Customer Disc. Group";
      "Allow Line Disc." := ServHeader."Allow Line Disc.";
      "Bin Code" := '';
      "Transaction Type" := ServHeader."Transaction Type";
      "Transport Method" := ServHeader."Transport Method";
      "Exit Point" := ServHeader."Exit Point";
      Area := ServHeader.Area;
      "Transaction Specification" := ServHeader."Transaction Specification";
    END;

    BEGIN
    END.
  }
}

