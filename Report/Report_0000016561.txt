OBJECT Report 16561 Maharashtra VAT
{
  OBJECT-PROPERTIES
  {
    Date=24-04-16;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.45778;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Maharashtra VAT;
               ENN=Maharashtra VAT];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF (StartDate = 0D) OR (EndDate = 0D) THEN
                    ERROR(Text13700);

                  Compinfo.GET;
                  CompName := Compinfo.Name;
                  CompAddress := Compinfo.Address + ', ' + Compinfo."Address 2" + ', ' + Compinfo.City;
                  CompPINNo := Compinfo."Post Code";
                  CompRegNo := Compinfo."VAT Registration No.";
                  CompVAT_Reg_No := Compinfo."VAT Registration No.";

                  StartDay := DATE2DMY(StartDate,1);
                  StartMonth := DATE2DMY(StartDate,2);
                  StartYear := DATE2DMY(StartDate,3);

                  EndDay := DATE2DMY(EndDate,1);
                  EndMonth := DATE2DMY(EndDate,2);
                  EndYear := DATE2DMY(EndDate,3);

                  VATReport.GET(1);

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY(
                    "State Code","Input Credit/Output Tax Amount",Composition,"Works Contract","Product Type",Positive,
                    "Transaction Type","Types Of Composition","Entry Type","Adjustment Type",Adjusted,"Schedule Code","Exempted Sale",
                    "Tax Type","Tax %","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::"Initial Entry");
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  GrossReceipt := ROUND(ABS(DetailedTaxEntry."Tax Base Amount" + DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY(
                    "State Code","Input Credit/Output Tax Amount",Composition,"Works Contract","Product Type",Positive,
                    "Transaction Type","Types Of Composition","Entry Type","Adjustment Type",Adjusted,"Schedule Code","Exempted Sale",
                    "Tax Type","Tax %","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Adjustment Type",DetailedTaxEntry."Adjustment Type"::"Branch Transfer");
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.SETRANGE(Adjusted,TRUE);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  GrossReceipt += ROUND(ABS(DetailedTaxEntry."Tax Base Amount" + DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY(
                    "State Code","Input Credit/Output Tax Amount",Composition,"Works Contract","Product Type",Positive,
                    "Transaction Type","Types Of Composition","Entry Type","Adjustment Type",Adjusted,"Schedule Code","Exempted Sale",
                    "Tax Type","Tax %","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE(Composition,TRUE);
                  DetailedTaxEntry.SETRANGE("Works Contract",FALSE);
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount");
                  SalesUnderComposition := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY(
                    "State Code","Input Credit/Output Tax Amount",Composition,"Works Contract","Product Type",Positive,
                    "Transaction Type","Types Of Composition","Entry Type","Adjustment Type",Adjusted,"Schedule Code","Exempted Sale",
                    "Tax Type","Tax %","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Works Contract",TRUE);
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::"Initial Entry");
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount");
                  SalesOfOngoingWC := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY(
                    "State Code","Input Credit/Output Tax Amount",Composition,"Works Contract","Product Type",Positive,
                    "Transaction Type","Types Of Composition","Entry Type","Adjustment Type",Adjusted,"Schedule Code","Exempted Sale",
                    "Tax Type","Tax %","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::"Initial Entry");
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Tax Type",DetailedTaxEntry."Tax Type"::VAT);
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.CALCSUMS("Input Credit/Output Tax Amount");
                  TaxAmt_Incl_Sales := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY(
                    "State Code","Input Credit/Output Tax Amount",Composition,"Works Contract","Product Type",Positive,
                    "Transaction Type","Types Of Composition","Entry Type","Adjustment Type",Adjusted,"Schedule Code","Exempted Sale",
                    "Tax Type","Tax %","Posting Date");
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Adjustment Type",DetailedTaxEntry."Adjustment Type"::"Branch Transfer");
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.SETRANGE(Adjusted,TRUE);
                  DetailedTaxEntry.CALCSUMS("Input Credit/Output Tax Amount");
                  TaxAmt_Incl_Sales += ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  // Intera state Sales  For Column no 6(h) of maharastra VAT Report
                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY("Transaction Type","Tax %",Positive,"Works Contract","Exempted Sale",
                    "Product Type","Form Code","Tax Type","Export or Deemed Export","State Code","Entry Type","Adjustment Type",
                    "Input Credit/Output Tax Amount","Posting Date");
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::Adjustment);
                  DetailedTaxEntry.SETRANGE("Adjustment Type",DetailedTaxEntry."Adjustment Type"::"Branch Transfer");
                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::Item);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETFILTER("Input Credit/Output Tax Amount",'<>0');
                  IF DetailedTaxEntry.FINDSET THEN
                    REPEAT
                      DetailedTaxEntry2.RESET;
                      DetailedTaxEntry2.COPYFILTERS(DetailedTaxEntry);
                      DetailedTaxEntry2.SETCURRENTKEY("Adjusted by Entry No.");
                      DetailedTaxEntry2.SETRANGE("Adjusted by Entry No.",DetailedTaxEntry."Adjusted by Entry No.");
                      IF DetailedTaxEntry2.COUNT = 2 THEN
                        TotalinterastateSales += DetailedTaxEntry."Tax Base Amount";
                    UNTIL DetailedTaxEntry.NEXT = 0;

                  TotalinterastateSales := ROUND(ABS(TotalinterastateSales),1.0,'=');

                  // Inter state Sales  for column no 6(i) of maharastra VAT
                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY("Transaction Type","Tax %",Positive,"Works Contract","Exempted Sale",
                    "Product Type","Form Code","Tax Type","Export or Deemed Export","State Code","Entry Type","Adjustment Type",
                    "Input Credit/Output Tax Amount","Posting Date");
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::Adjustment);
                  DetailedTaxEntry.SETRANGE("Adjustment Type",DetailedTaxEntry."Adjustment Type"::"Branch Transfer");
                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::Item);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.SETFILTER("Input Credit/Output Tax Amount",'<>0');
                  IF DetailedTaxEntry.FINDSET THEN
                    REPEAT
                      DetailedTaxEntry2.RESET;
                      DetailedTaxEntry2.COPYFILTERS(DetailedTaxEntry);
                      DetailedTaxEntry2.SETCURRENTKEY("Adjusted by Entry No.");
                      DetailedTaxEntry2.SETRANGE("Adjusted by Entry No.",DetailedTaxEntry."Adjusted by Entry No.");
                      IF DetailedTaxEntry2.COUNT = 1 THEN
                        TotalinterstateSales += DetailedTaxEntry."Tax Base Amount" + DetailedTaxEntry."Input Credit/Output Tax Amount";
                    UNTIL DetailedTaxEntry.NEXT = 0;

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY("Transaction Type","Tax %",Positive,"Works Contract","Exempted Sale",
                    "Product Type","Form Code","Tax Type","Export or Deemed Export","State Code","Entry Type","Adjustment Type",
                    "Input Credit/Output Tax Amount","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::Item);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Tax Type",DetailedTaxEntry."Tax Type"::CST);
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  TotalinterstateSales += DetailedTaxEntry."Tax Base Amount" + DetailedTaxEntry."Input Credit/Output Tax Amount";
                  TaxAmountOfCST := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  TotalinterstateSales := ROUND(ABS(TotalinterstateSales),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY(
                    "State Code","Input Credit/Output Tax Amount",Composition,"Works Contract","Product Type",Positive,
                    "Transaction Type","Types Of Composition","Entry Type","Adjustment Type",Adjusted,"Schedule Code","Exempted Sale",
                    "Tax Type","Tax %","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::"Initial Entry");
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Schedule Code",'A');
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount");
                  SalesOfTaxFreeGoods_Sdl_A := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY(
                    "State Code","Input Credit/Output Tax Amount",Composition,"Works Contract","Product Type",Positive,
                    "Transaction Type","Types Of Composition","Entry Type","Adjustment Type",Adjusted,"Schedule Code","Exempted Sale",
                    "Tax Type","Tax %","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::"Initial Entry");
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Exempted Sale",TRUE);
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount");
                  SalesOfTaxableGoodsExmt := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');

                  "TurnoverOfSalesU/dCompo" := SalesUnderComposition;

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY(
                    "State Code","Input Credit/Output Tax Amount",Composition,"Works Contract","Product Type",Positive,
                    "Transaction Type","Types Of Composition","Entry Type","Adjustment Type",Adjusted,"Schedule Code","Exempted Sale",
                    "Tax Type","Tax %","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::"Initial Entry");
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE(Composition,TRUE);
                  DetailedTaxEntry.SETRANGE("Types Of Composition",DetailedTaxEntry."Types Of Composition"::Retailer);
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.SETRANGE("Works Contract",FALSE);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  TurnoverOfSalesOfRetailer := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Types Of Composition",DetailedTaxEntry."Types Of Composition"::"Restaurant/Club");
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount");
                  TurnoverOfSalesOfRestaurant := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Types Of Composition",DetailedTaxEntry."Types Of Composition"::Bakery);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount");
                  TurnoverOfSalesOfBaker := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Types Of Composition",DetailedTaxEntry."Types Of Composition"::"Second Hand Motor Vehicle");
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  TurnoverOfSalesOfSecHandMotorD := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY(
                    "State Code","Input Credit/Output Tax Amount",Composition,"Works Contract","Product Type",Positive,
                    "Transaction Type","Types Of Composition","Entry Type","Adjustment Type",Adjusted,"Schedule Code","Exempted Sale",
                    "Tax Type","Tax %","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::"Initial Entry");
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Works Contract",TRUE);
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount");
                  "TurnoverOfSalesExcltax/Comp" := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY(
                    "State Code","Input Credit/Output Tax Amount",Composition,"Works Contract","Product Type",Positive,
                    "Transaction Type","Types Of Composition","Entry Type","Adjustment Type",Adjusted,"Schedule Code","Exempted Sale",
                    "Tax Type","Tax %","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::"Initial Entry");
                  DetailedTaxEntry.SETRANGE("Tax %",1);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Tax Type",DetailedTaxEntry."Tax Type"::VAT);
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  TBAat1 := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  TAat1 := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Tax %",1.5);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  "TBAat1.5" := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  "TAat1.5" := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Tax %",4);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  TBAat4 := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  TAat4 := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Tax %",5);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  TBAat5 := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  TAat5 := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Tax %",8);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  TBAat8 := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  TAat8 := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Tax %",12.5);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  "TBAat12.5" := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  "TAat12.5" := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Tax %",15);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  TBAat15 := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  TAat15 := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Tax %",20);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  TBAat20 := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  TAat20 := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  SalesLiabletotax := TBAat1 + "TBAat1.5" + TBAat4 + TBAat5 + TBAat8 +
                    "TBAat12.5" + TBAat15 + TBAat20;

                  TotalTaxAmount := TAat1 + "TAat1.5" + TAat4 + TAat5 + TAat8 +
                    "TAat12.5" + TAat15 + TAat20;

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY(
                    "State Code","Input Credit/Output Tax Amount",Composition,"Works Contract","Product Type",Positive,
                    "Transaction Type","Types Of Composition","Entry Type","Adjustment Type",Adjusted,"Schedule Code","Exempted Sale",
                    "Tax Type","Tax %","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Purchase);
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::"Initial Entry");
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::Item);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  TotalPurchasesforSetOff := ROUND(ABS(DetailedTaxEntry."Tax Base Amount" +
                        DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY(
                    "State Code","Input Credit/Output Tax Amount",Composition,"Works Contract","Product Type",Positive,
                    "Transaction Type","Types Of Composition","Entry Type","Adjustment Type",Adjusted,"Schedule Code","Exempted Sale",
                    "Tax Type","Tax %","Posting Date");
                  DetailedTaxEntry.SETRANGE("Adjustment Type",DetailedTaxEntry."Adjustment Type"::"Branch Transfer");
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::Adjustment);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE(Adjusted,FALSE);
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::Item);
                  DetailedTaxEntry.SETRANGE("Input Credit/Output Tax Amount",0);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  TotalPurchasesforSetOff += ROUND(ABS(DetailedTaxEntry."Tax Base Amount" +
                        DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY(
                    "State Code","Input Credit/Output Tax Amount",Composition,"Works Contract","Product Type",Positive,
                    "Transaction Type","Types Of Composition","Entry Type","Adjustment Type",Adjusted,"Schedule Code","Exempted Sale",
                    "Tax Type","Tax %","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Purchase);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::"Initial Entry");
                  DetailedTaxEntry.SETRANGE("Tax Type",DetailedTaxEntry."Tax Type"::CST);
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::Item);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount",DetailedTaxEntry."Input Credit/Output Tax Amount");
                  InterStatePurch := ROUND(ABS(DetailedTaxEntry."Tax Base Amount" +
                        DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  // Inter state Purchase  for column no 11(e) of maharastra VAT
                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY("Transaction Type","Tax %",Positive,"Works Contract","Exempted Sale",
                    "Product Type","Form Code","Tax Type","Export or Deemed Export","State Code","Entry Type","Adjustment Type",
                    "Input Credit/Output Tax Amount","Posting Date");
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::Adjustment);
                  DetailedTaxEntry.SETRANGE("Adjustment Type",DetailedTaxEntry."Adjustment Type"::"Branch Transfer");
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE(Adjusted,FALSE);
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::Item);
                  DetailedTaxEntry.SETRANGE("Input Credit/Output Tax Amount",0);
                  IF DetailedTaxEntry.FINDSET THEN
                    REPEAT
                      DetailedTaxEntry2.RESET;
                      DetailedTaxEntry2.COPYFILTERS(DetailedTaxEntry);
                      DetailedTaxEntry2.SETCURRENTKEY("Adjusted by Entry No.");
                      DetailedTaxEntry2.SETRANGE("Adjusted by Entry No.",DetailedTaxEntry."Adjusted by Entry No.");
                      IF DetailedTaxEntry2.COUNT = 1 THEN
                        TotalinterstatePurch += DetailedTaxEntry."Tax Base Amount";
                    UNTIL DetailedTaxEntry.NEXT = 0;

                  TotalinterstatePurch := ROUND(ABS(TotalinterstatePurch),1.0,'=');

                  // Intera state Purchase  for column no 11(f) of maharastra VAT
                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY("Transaction Type","Tax %",Positive,"Works Contract","Exempted Sale",
                    "Product Type","Form Code","Tax Type","Export or Deemed Export","State Code","Entry Type","Adjustment Type",
                    "Input Credit/Output Tax Amount","Posting Date");
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::Adjustment);
                  DetailedTaxEntry.SETRANGE("Adjustment Type",DetailedTaxEntry."Adjustment Type"::"Branch Transfer");
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE(Adjusted,FALSE);
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::Item);
                  DetailedTaxEntry.SETRANGE("Input Credit/Output Tax Amount",0);
                  IF DetailedTaxEntry.FINDSET THEN
                    REPEAT
                      DetailedTaxEntry2.RESET;
                      DetailedTaxEntry2.COPYFILTERS(DetailedTaxEntry);
                      DetailedTaxEntry2.SETCURRENTKEY("Adjusted by Entry No.");
                      DetailedTaxEntry2.SETRANGE("Adjusted by Entry No.",DetailedTaxEntry."Adjusted by Entry No.");
                      IF DetailedTaxEntry2.COUNT = 1 THEN
                        TotalinterastatePurch += DetailedTaxEntry."Tax Base Amount";
                    UNTIL DetailedTaxEntry.NEXT = 0;

                  TotalinterastatePurch := ROUND(ABS(TotalinterastatePurch),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY(
                    "State Code","Input Credit/Output Tax Amount",Composition,"Works Contract","Product Type",Positive,
                    "Transaction Type","Types Of Composition","Entry Type","Adjustment Type",Adjusted,"Schedule Code","Exempted Sale",
                    "Tax Type","Tax %","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Purchase);
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::"Initial Entry");
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Tax Type",DetailedTaxEntry."Tax Type"::VAT);
                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::Item);
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.SETRANGE("Tax %",4);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  purchat4 := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  TaxOnPurchAt4 := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Tax %",12.5);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  "purchat12.5" := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  "TaxOnPurchAt12.5" := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Tax %",1);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  purchat1 := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  TaxOnPurchAt1 := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  TotalPurchases := purchat4 + "purchat12.5" + purchat1;
                  TotalTaxAmountOfPurch := TaxOnPurchAt4 + "TaxOnPurchAt12.5" + TaxOnPurchAt1;
                  OpenDocument;
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENN=Options] }

      { 1500004;2;Field     ;
                  CaptionML=[ENU=Start Date;
                             ENN=Start Date];
                  SourceExpr=StartDate }

      { 1500006;2;Field     ;
                  CaptionML=[ENU=End Date;
                             ENN=End Date];
                  SourceExpr=EndDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Compinfo@1500000 : Record 79;
      DetailedTaxEntry@1500020 : Record 16522;
      DetailedTaxEntry2@1500005 : Record 16522;
      VATReport@1500021 : Record 16545;
      CompName@1500001 : Text[30];
      CompAddress@1500002 : Text[50];
      CompPINNo@1500004 : Code[20];
      CompRegNo@1500057 : Code[20];
      CompVAT_Reg_No@1500058 : Code[20];
      StartDate@1500006 : Date;
      EndDate@1500007 : Date;
      StartDay@1500043 : Integer;
      StartMonth@1500061 : Integer;
      StartYear@1500062 : Integer;
      EndDay@1500065 : Integer;
      EndMonth@1500064 : Integer;
      EndYear@1500063 : Integer;
      GrossReceipt@1500008 : Decimal;
      SalesUnderComposition@1500009 : Decimal;
      SalesOfOngoingWC@1500010 : Decimal;
      TaxAmt_Incl_Sales@1500011 : Decimal;
      SalesOfTaxFreeGoods_Sdl_A@1500012 : Decimal;
      SalesOfTaxableGoodsExmt@1500013 : Decimal;
      "TurnoverOfSalesU/dCompo"@1500014 : Decimal;
      TurnoverOfSalesOfRetailer@1500015 : Decimal;
      TurnoverOfSalesOfRestaurant@1500017 : Decimal;
      TurnoverOfSalesOfBaker@1500018 : Decimal;
      TurnoverOfSalesOfSecHandMotorD@1500019 : Decimal;
      "TurnoverOfSalesExcltax/Comp"@1500022 : Decimal;
      TBAat1@1500023 : Decimal;
      TAat1@1500024 : Decimal;
      "TBAat1.5"@1500026 : Decimal;
      "TAat1.5"@1500025 : Decimal;
      TBAat4@1500028 : Decimal;
      TAat4@1500027 : Decimal;
      TBAat5@1500030 : Decimal;
      TAat5@1500029 : Decimal;
      TBAat8@1500034 : Decimal;
      TAat8@1500033 : Decimal;
      "TBAat12.5"@1500032 : Decimal;
      "TAat12.5"@1500031 : Decimal;
      TBAat15@1500036 : Decimal;
      TAat15@1500035 : Decimal;
      TBAat20@1500038 : Decimal;
      TAat20@1500037 : Decimal;
      SalesLiabletotax@1500039 : Decimal;
      TotalTaxAmount@1500040 : Decimal;
      TotalPurchasesforSetOff@1500041 : Decimal;
      InterStatePurch@1500042 : Decimal;
      purchat4@1500044 : Decimal;
      TaxOnPurchAt4@1500045 : Decimal;
      "purchat12.5"@1500047 : Decimal;
      "TaxOnPurchAt12.5"@1500046 : Decimal;
      purchat1@1500049 : Decimal;
      TaxOnPurchAt1@1500048 : Decimal;
      TotalPurchases@1500050 : Decimal;
      TotalTaxAmountOfPurch@1500051 : Decimal;
      TotalinterastateSales@1500053 : Decimal;
      TotalinterstateSales@1500054 : Decimal;
      TotalinterstatePurch@1500055 : Decimal;
      TotalinterastatePurch@1500056 : Decimal;
      TaxAmountOfCST@1500016 : Decimal;
      Text13700@1500003 : TextConst 'ENU=Enter the starting date and ending date.;ENN=Enter the starting date and ending date.';
      VATReportTemplateError@1500052 : TextConst 'ENU=No VAT report template has been specified for the VAT report.;ENN=No VAT report template has been specified for the VAT report.';

    PROCEDURE CreateDataSource@1500017() : Text;
    VAR
      FileMgt@1500002 : Codeunit 419;
      WordMergefile@1500001 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.MergeHandler" RUNONCLIENT;
      MergeFileName@1500000 : Text;
    BEGIN
      VATReport.GET(1);

      WordMergefile := WordMergefile.MergeHandler;
      MergeFileName := FileMgt.ServerTempFileName('htm');
      WordMergefile.CreateMergeFile(MergeFileName);

      // Create HTML Header source
      WITH WordMergefile DO BEGIN
        // Column Headers
        AddField('MVATRC_No');
        AddField('CSTRC_No');
        AddField('Company Name');
        AddField('Company Address');
        AddField('Company PIN');
        AddField('Start Day');
        AddField('Start Month');
        AddField('Start Year');
        AddField('End Day');
        AddField('End Month');
        AddField('End Year');
        AddField('Gross Receipt');
        AddField('Sales Under Composition');
        AddField('Sales Of Ongoing Works Contracts');
        AddField('Tax Amount Including Sales');
        AddField('Total Intera State Sales');
        AddField('Total Inter State Sales');
        AddField('Tax Amount CST');
        AddField('Sales of Tax Free Goods A');
        AddField('Sales of Taxable Goods Exempted');
        AddField('Sales Under Composition');
        AddField('Sales of Retailer');
        AddField('Sales of Restaurant');
        AddField('Sales of Baker');
        AddField('Sales of Secondhand Motor Dealer');
        AddField('Sales Excluding tax/Composition');
        AddField('Tax Base Amount at_1 Percent');
        AddField('Tax Base Amount at_1.5 Percent');
        AddField('Tax Base Amount at_4 Percent');
        AddField('Tax Base Amount at_5 Percent');
        AddField('Tax Base Amount at_8 Percent');
        AddField('Tax Base Amount at_12.5 Percent');
        AddField('Tax Base Amount at_15 Percent');
        AddField('Tax Base Amount at_20 Percent');
        AddField('Sales Liable to tax');
        AddField('Tax Amount at 1 Percent');
        AddField('Tax Amount at 1.5 Percent');
        AddField('Tax Amount at 4 Percent');
        AddField('Tax Amount at_5 Percent');
        AddField('Tax Amount at_8 Percent');
        AddField('Tax Amount at_12.5 Percent');
        AddField('Tax Amount at_15 Percent');
        AddField('Tax Amount at_20 Percent');
        AddField('Total Tax Amount');
        AddField('Purchase For Set-Off');
        AddField('Inter State Purchase');
        AddField('Total Inter State Purchase');
        AddField('Total Intera State Purch');
        AddField('Purchases at 4 percent');
        AddField('Purchases at 12.5 percent');
        AddField('Purchases at 1 percent');
        AddField('Total Purchases');
        AddField('Purchase Tax Aamount at_4 Percent');
        AddField('Purchase Tax Amount at_12.5 Percent');
        AddField('Purchase Tax Amount at_1 Percent');
        AddField('Total Tax Amount Of Purchase');
        WriteLine;

        // Column Data
        AddField(CompVAT_Reg_No);
        AddField(CompRegNo);
        AddField(CompName);
        AddField(CompAddress);
        AddField(CompPINNo);
        AddField(FORMAT(StartDay));
        AddField(FORMAT(StartMonth));
        AddField(FORMAT(StartYear));
        AddField(FORMAT(EndDay));
        AddField(FORMAT(EndMonth));
        AddField(FORMAT(EndYear));
        AddField(FORMAT(GrossReceipt));
        AddField(FORMAT(SalesUnderComposition));
        AddField(FORMAT(SalesOfOngoingWC));
        AddField(FORMAT(TaxAmt_Incl_Sales));
        AddField(FORMAT(TotalinterastateSales));
        AddField(FORMAT(TotalinterstateSales));
        AddField(FORMAT(TaxAmountOfCST));
        AddField(FORMAT(SalesOfTaxFreeGoods_Sdl_A));
        AddField(FORMAT(SalesOfTaxableGoodsExmt));
        AddField(FORMAT("TurnoverOfSalesU/dCompo"));
        AddField(FORMAT(TurnoverOfSalesOfRetailer));
        AddField(FORMAT(TurnoverOfSalesOfRestaurant));
        AddField(FORMAT(TurnoverOfSalesOfBaker));
        AddField(FORMAT(TurnoverOfSalesOfSecHandMotorD));
        AddField(FORMAT("TurnoverOfSalesExcltax/Comp"));
        AddField(FORMAT(TBAat1));
        AddField(FORMAT("TBAat1.5"));
        AddField(FORMAT(TBAat4));
        AddField(FORMAT(TBAat5));
        AddField(FORMAT(TBAat8));
        AddField(FORMAT("TBAat12.5"));
        AddField(FORMAT(TBAat15));
        AddField(FORMAT(TBAat20));
        AddField(FORMAT(SalesLiabletotax));
        AddField(FORMAT(TAat1));
        AddField(FORMAT("TAat1.5"));
        AddField(FORMAT(TAat4));
        AddField(FORMAT(TAat5));
        AddField(FORMAT(TAat8));
        AddField(FORMAT("TAat12.5"));
        AddField(FORMAT(TAat15));
        AddField(FORMAT(TAat20));
        AddField(FORMAT(TotalTaxAmount));
        AddField(FORMAT(TotalPurchasesforSetOff));
        AddField(FORMAT(InterStatePurch));
        AddField(FORMAT(TotalinterstatePurch));
        AddField(FORMAT(TotalinterastatePurch));
        AddField(FORMAT(purchat4));
        AddField(FORMAT("purchat12.5"));
        AddField(FORMAT(purchat1));
        AddField(FORMAT(TotalPurchases));
        AddField(FORMAT(TaxOnPurchAt4));
        AddField(FORMAT("TaxOnPurchAt12.5"));
        AddField(FORMAT(TaxOnPurchAt1));
        AddField(FORMAT(TotalTaxAmountOfPurch));

        WriteLine;
        CloseMergeFile;
      END;

      EXIT(MergeFileName);
    END;

    PROCEDURE OpenDocument@1500040();
    VAR
      FileMgt@1500008 : Codeunit 419;
      WordHelper@1500007 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHelper" RUNONCLIENT;
      WordApplication@1500006 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordDocument@1500005 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      FileName@1500003 : Text;
      ServerFileName@1500002 : Text;
      ParamInt@1500001 : Integer;
      DSFilePath@1500000 : Text;
    BEGIN
      IF VATReport.GET(1) THEN BEGIN
        VATReport.CALCFIELDS(Template);
        IF NOT VATReport.Template.HASVALUE THEN
          ERROR(VATReportTemplateError);

        ServerFileName := FileMgt.ServerTempFileName('doc');
        VATReport.Template.EXPORT(ServerFileName);

        FileName := FileMgt.DownloadTempFile(ServerFileName);
        FileName := FileMgt.MoveAndRenameClientFile(FileName,FORMAT(VATReport.Code) + '.doc',FORMAT(CREATEGUID));

        WordApplication := WordApplication.ApplicationClass;
        WordDocument := WordHelper.CallOpen(WordApplication,FileName,FALSE,FALSE);
        WordDocument.ActiveWindow.Caption := VATReport.Description;
        WordDocument.Saved := TRUE;

        WordDocument.MailMerge.MainDocumentType := 0;
        WordDocument.MailMerge.Destination := 0; // 0 = wdSendToNewDocument
        WordDocument.MailMerge.SuppressBlankLines := TRUE;
        WordDocument.MailMerge.DataSource.FirstRecord := 1; // wdDefaultFirstRecord
        WordDocument.MailMerge.DataSource.LastRecord := -16; // wdDefaultLastRecord

        DSFilePath := FileMgt.DownloadTempFile(CreateDataSource);
        ParamInt := 7; // 7 = HTML
        WordHelper.CallMailMergeOpenDataSource(WordDocument,DSFilePath,ParamInt);
        WordHelper.CallMailMergeExecute(WordDocument);

        WordHelper.CallClose(WordDocument,FALSE);
        WordApplication.Visible := TRUE;

        CLEAR(WordDocument);
        CLEAR(WordApplication);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

