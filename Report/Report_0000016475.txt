OBJECT Report 16475 Generate DSA
{
  OBJECT-PROPERTIES
  {
    Date=24-04-16;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.45778;
  }
  PROPERTIES
  {
    Permissions=TableData 32=rm;
    CaptionML=[ENU=Generate DSA;
               ENN=Generate DSA];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 8129;    ;DataItem;                    ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(No.)
                                 WHERE(Excise Prod. Posting Group=FILTER(<>''),
                                       Replenishment System=FILTER(Prod. Order));
               OnPreDataItem=BEGIN
                               DSAEntry.LOCKTABLE;
                               IF DSAEntry.FINDLAST THEN
                                 NextEntryNo := DSAEntry."Entry No." + 1
                               ELSE
                                 NextEntryNo := 1;
                             END;

               OnAfterGetRecord=VAR
                                  QtyFlag@1500000 : Boolean;
                                BEGIN
                                  IF DSADate = 0D THEN
                                    ERROR(Text002);
                                  IF LocationFilter <> '' THEN
                                    Location.SETFILTER(Code,LocationFilter);
                                  Location.SETRANGE("Use As In-Transit",FALSE);
                                  IF Location.FIND('-') THEN
                                    REPEAT
                                      OpeningBalance := 0;
                                      QtyRemwithoutPaymentofDuty := 0;
                                      QtyRemonPaymentofDuty := 0;
                                      QtyManufactured := 0;
                                      AssessableValue := 0;
                                      BEDAmount := 0;
                                      AEDAmount := 0;
                                      ValRemonPaymentofDuty := 0;
                                      ValRemwithoutPaymentofDuty := 0;
                                      SaleQtyReturned := 0;
                                      SaleValueReturned := 0;
                                      QtyReDispatched := 0;
                                      QtyOther := 0;
                                      QtyFlag := FALSE;
                                      DSAEntry.RESET;
                                      DSAEntry.SETRANGE("Location Code",Location.Code);
                                      DSAEntry.SETRANGE("Posting Date",DSADate);
                                      DSAEntry.SETRANGE("Item No.","No.");
                                      IF NOT DSAEntry.FINDFIRST THEN BEGIN
                                        DSAEntry.INIT;
                                        DSAEntry."Location Code" := Location.Code;
                                        DSAEntry."Posting Date" := DSADate;
                                        DSAEntry."Item No." := Item."No.";
                                        DSAEntry."Entry No." := NextEntryNo;
                                        // Opening Balance
                                        ItemLedgEntry.RESET;
                                        ItemLedgEntry.SETRANGE("Posting Date",0D,DSADate - 1);
                                        ItemLedgEntry.SETRANGE("Item No.","No.");
                                        ItemLedgEntry.SETRANGE("Location Code",Location.Code);
                                        IF ItemLedgEntry.FIND('-') THEN
                                          REPEAT
                                            OpeningBalance := OpeningBalance + ItemLedgEntry.Quantity;
                                          UNTIL ItemLedgEntry.NEXT = 0;
                                        DSAEntry."Opening Balance" := OpeningBalance;
                                        // Other balances
                                        ItemLedgEntry.RESET;
                                        ItemLedgEntry.SETCURRENTKEY("Location Code","Posting Date","Item No.");
                                        ItemLedgEntry.SETFILTER("Location Code",Location.Code);
                                        ItemLedgEntry.SETRANGE("Posting Date",DSADate);
                                        ItemLedgEntry.SETFILTER("Item No.",Item."No.");
                                        IF ItemLedgEntry.FIND('-') THEN
                                          REPEAT
                                            IF ((ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::Sale) OR
                                                (ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::Transfer))
                                            THEN BEGIN
                                              IF ItemLedgEntry.Quantity < 0 THEN BEGIN
                                                IF (ItemLedgEntry."BED Amount" <> 0) OR (ItemLedgEntry."Other Duties Amount" <> 0) THEN BEGIN
                                                  ItemLedgEntry.CALCFIELDS("Cost Amount (Actual)");
                                                  QtyRemonPaymentofDuty := QtyRemonPaymentofDuty + -ItemLedgEntry.Quantity;
                                                  ValRemonPaymentofDuty :=
                                                    ValRemonPaymentofDuty + (ItemLedgEntry."Cost Amount (Actual)" / ItemLedgEntry.Quantity);
                                                END ELSE BEGIN
                                                  ItemLedgEntry.CALCFIELDS("Cost Amount (Actual)");
                                                  QtyRemwithoutPaymentofDuty := QtyRemwithoutPaymentofDuty + -ItemLedgEntry.Quantity;
                                                  ValRemwithoutPaymentofDuty :=
                                                    ValRemwithoutPaymentofDuty + (ItemLedgEntry."Cost Amount (Actual)" / ItemLedgEntry.Quantity);
                                                END;

                                                IF ItemLedgEntry."Re-Dispatch" THEN
                                                  QtyReDispatched := QtyReDispatched + ItemLedgEntry.Quantity;

                                                QtyFlag := TRUE;
                                                BEDAmount := BEDAmount + ABS(ItemLedgEntry."BED Amount");
                                                AEDAmount := AEDAmount + ABS(ItemLedgEntry."Other Duties Amount");
                                                AssessableValue := AssessableValue + ABS(ItemLedgEntry."Assessable Value");
                                              END ELSE BEGIN // Sales Return
                                                IF ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::Sale THEN BEGIN
                                                  IF (ItemLedgEntry."BED Amount" <> 0) OR (ItemLedgEntry."Other Duties Amount" <> 0) THEN BEGIN
                                                    ItemLedgEntry.CALCFIELDS("Sales Amount (Actual)");
                                                    SaleQtyReturned := SaleQtyReturned + ItemLedgEntry.Quantity;
                                                    SaleValueReturned :=
                                                      SaleValueReturned + (ItemLedgEntry."Sales Amount (Actual)" / ItemLedgEntry.Quantity);
                                                    QtyFlag := TRUE;
                                                  END;
                                                  BEDAmount := BEDAmount + ABS(ItemLedgEntry."BED Amount");
                                                  AEDAmount := AEDAmount + ABS(ItemLedgEntry."Other Duties Amount");
                                                  AssessableValue := AssessableValue + ABS(ItemLedgEntry."Assessable Value");
                                                END;
                                              END;
                                            END;
                                            IF (ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::Output) OR
                                               ("Scrap Item" AND (ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::Consumption) AND
                                                (ItemLedgEntry.Quantity > 0))
                                            THEN BEGIN
                                              QtyManufactured := QtyManufactured + ItemLedgEntry.Quantity;
                                              QtyFlag := TRUE;
                                            END;
                                            IF NOT QtyFlag THEN
                                              QtyOther := QtyOther + ItemLedgEntry.Quantity;
                                            CalcItemChargeExcise;
                                          UNTIL ItemLedgEntry.NEXT = 0;
                                        DSAEntry."Other Quantity" := QtyOther;
                                        DSAEntry."Sale Qty. Returned" := SaleQtyReturned;
                                        DSAEntry."Sale Value. Returned" := SaleValueReturned;
                                        DSAEntry."Quantity Manufactured" := QtyManufactured;
                                        DSAEntry."Qty. Rem. on Payment of Duty" := ABS(QtyRemonPaymentofDuty);
                                        DSAEntry."Qty. Rem. wo. Payment of Duty" := ABS(QtyRemwithoutPaymentofDuty);
                                        DSAEntry."Value Rem. on Payment of Duty" := ValRemonPaymentofDuty;
                                        DSAEntry."Value Rem. wo. Payment of Duty" := ValRemwithoutPaymentofDuty;
                                        DSAEntry."Basic Excise Duty Amount" := BEDAmount;
                                        DSAEntry."Other Duties Amount" := AEDAmount;
                                        DSAEntry."Closing Balance" := OpeningBalance + QtyManufactured - QtyRemonPaymentofDuty - QtyRemwithoutPaymentofDuty +
                                          SaleQtyReturned + QtyOther;
                                        ItemLedgEntry.MODIFYALL("DSA Entry No.",DSAEntry."Entry No.");
                                        DSAEntry.INSERT;
                                      END ELSE BEGIN
                                        // Opening Balance
                                        ItemLedgEntry.RESET;
                                        ItemLedgEntry.SETRANGE("Posting Date",0D,DSADate - 1);
                                        ItemLedgEntry.SETRANGE("Item No.","No.");
                                        ItemLedgEntry.SETRANGE("Location Code",Location.Code);
                                        IF ItemLedgEntry.FIND('-') THEN
                                          REPEAT
                                            OpeningBalance := OpeningBalance + ItemLedgEntry.Quantity;
                                          UNTIL ItemLedgEntry.NEXT = 0;
                                        DSAEntry."Opening Balance" := OpeningBalance;
                                        // Other balances
                                        ItemLedgEntry.RESET;
                                        ItemLedgEntry.SETCURRENTKEY("Location Code","Posting Date","Item No.");
                                        ItemLedgEntry.SETFILTER("Location Code",Location.Code);
                                        ItemLedgEntry.SETRANGE("Posting Date",DSADate);
                                        ItemLedgEntry.SETFILTER("Item No.",Item."No.");
                                        IF ItemLedgEntry.FIND('-') THEN
                                          REPEAT
                                            IF ((ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::Sale) OR
                                                (ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::Transfer))
                                            THEN BEGIN
                                              IF ItemLedgEntry.Quantity < 0 THEN BEGIN
                                                IF (ItemLedgEntry."BED Amount" <> 0) OR (ItemLedgEntry."Other Duties Amount" <> 0) THEN BEGIN
                                                  ItemLedgEntry.CALCFIELDS("Cost Amount (Actual)");
                                                  QtyRemonPaymentofDuty := QtyRemonPaymentofDuty + -ItemLedgEntry.Quantity;
                                                  ValRemonPaymentofDuty :=
                                                    ValRemonPaymentofDuty + (ItemLedgEntry."Cost Amount (Actual)" / ItemLedgEntry.Quantity);
                                                END ELSE BEGIN
                                                  ItemLedgEntry.CALCFIELDS("Cost Amount (Actual)");
                                                  QtyRemwithoutPaymentofDuty := QtyRemwithoutPaymentofDuty + -ItemLedgEntry.Quantity;
                                                  ValRemwithoutPaymentofDuty :=
                                                    ValRemwithoutPaymentofDuty + (ItemLedgEntry."Cost Amount (Actual)" / ItemLedgEntry.Quantity);
                                                END;

                                                IF ItemLedgEntry."Re-Dispatch" THEN
                                                  QtyReDispatched := QtyReDispatched + ItemLedgEntry.Quantity;

                                                QtyFlag := TRUE;
                                                BEDAmount := BEDAmount + ItemLedgEntry."BED Amount";
                                                AEDAmount := AEDAmount + ItemLedgEntry."Other Duties Amount";
                                                AssessableValue := AssessableValue + ItemLedgEntry."Assessable Value";
                                              END ELSE BEGIN // Sales Return
                                                IF ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::Sale THEN BEGIN
                                                  IF (ItemLedgEntry."BED Amount" <> 0) OR (ItemLedgEntry."Other Duties Amount" <> 0) THEN BEGIN
                                                    ItemLedgEntry.CALCFIELDS("Sales Amount (Actual)");
                                                    SaleQtyReturned := SaleQtyReturned + ItemLedgEntry.Quantity;
                                                    SaleValueReturned :=
                                                      SaleValueReturned + (ItemLedgEntry."Sales Amount (Actual)" / ItemLedgEntry.Quantity);
                                                    QtyFlag := TRUE;
                                                  END;
                                                  BEDAmount := BEDAmount + ItemLedgEntry."BED Amount";
                                                  AEDAmount := AEDAmount + ItemLedgEntry."Other Duties Amount";
                                                  AssessableValue := AssessableValue + ItemLedgEntry."Assessable Value";
                                                END;
                                              END;
                                            END;
                                            IF (ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::Output) OR
                                               ("Scrap Item" AND (ItemLedgEntry."Entry Type" = ItemLedgEntry."Entry Type"::Consumption) AND
                                                (ItemLedgEntry.Quantity > 0))
                                            THEN BEGIN
                                              QtyManufactured := QtyManufactured + ItemLedgEntry.Quantity;
                                              QtyFlag := TRUE;
                                            END;
                                            IF NOT QtyFlag THEN
                                              QtyOther := QtyOther + ItemLedgEntry.Quantity;
                                          UNTIL ItemLedgEntry.NEXT = 0;
                                        DSAEntry."Other Quantity" := QtyOther;
                                        DSAEntry."Sale Qty. Returned" := SaleQtyReturned;
                                        DSAEntry."Sale Value. Returned" := SaleValueReturned;
                                        DSAEntry."Quantity Manufactured" := QtyManufactured;
                                        DSAEntry."Qty. Rem. on Payment of Duty" := ABS(QtyRemonPaymentofDuty);
                                        DSAEntry."Qty. Rem. wo. Payment of Duty" := ABS(QtyRemwithoutPaymentofDuty);
                                        DSAEntry."Value Rem. on Payment of Duty" := ValRemonPaymentofDuty;
                                        DSAEntry."Value Rem. wo. Payment of Duty" := ValRemwithoutPaymentofDuty;
                                        DSAEntry."Assessable Value" := AssessableValue;
                                        DSAEntry."Basic Excise Duty Amount" := BEDAmount;
                                        DSAEntry."Other Duties Amount" := AEDAmount;
                                        DSAEntry."Sale Re-dispatch Ret.Qty" := QtyReDispatched;
                                        DSAEntry."Closing Balance" := OpeningBalance + QtyManufactured - QtyRemonPaymentofDuty - QtyRemwithoutPaymentofDuty +
                                          SaleQtyReturned + QtyOther;
                                        ItemLedgEntry.MODIFYALL("DSA Entry No.",DSAEntry."Entry No.");
                                        DSAEntry.MODIFY;
                                      END;
                                      NextEntryNo := NextEntryNo + 1;
                                    UNTIL Location.NEXT = 0;
                                END;

               ReqFilterFields=No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   DSADate := WORKDATE;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENN=Options] }

      { 1280002;2;Field     ;
                  CaptionML=[ENU=Location Code;
                             ENN=Location Code];
                  SourceExpr=LocationFilter;
                  TableRelation=Location }

      { 1280000;2;Field     ;
                  CaptionML=[ENU=Date;
                             ENN=Date];
                  SourceExpr=DSADate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ItemLedgEntry@1280000 : Record 32;
      DSAEntry@1500007 : Record 13787;
      Location@1500003 : Record 14;
      LocationFilter@1280001 : Code[80];
      DSADate@1280002 : Date;
      Text002@1280004 : TextConst 'ENU=Please enter the  Date.;ENN=Please enter the  Date.';
      NextEntryNo@1280006 : Integer;
      OpeningBalance@1500005 : Decimal;
      QtyManufactured@1500008 : Decimal;
      QtyRemonPaymentofDuty@1500009 : Decimal;
      QtyRemwithoutPaymentofDuty@1500010 : Decimal;
      BEDAmount@1500011 : Decimal;
      AEDAmount@1500012 : Decimal;
      ValRemonPaymentofDuty@1500014 : Decimal;
      ValRemwithoutPaymentofDuty@1500013 : Decimal;
      SaleQtyReturned@1500001 : Decimal;
      SaleValueReturned@1500015 : Decimal;
      QtyOther@1500017 : Decimal;
      QtyReDispatched@1500018 : Decimal;
      AssessableValue@1500019 : Decimal;

    LOCAL PROCEDURE CalcItemChargeExcise@1500020();
    VAR
      ValueEntry@1500001 : Record 5802;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
        SETRANGE("Invoiced Quantity",0);
        SETRANGE("Location Code",ItemLedgEntry."Location Code");
        SETFILTER("Item Charge No.",'<>%1','');
        IF FINDSET THEN
          REPEAT
            BEDAmount += ABS("BED Amount");
            AEDAmount += ABS("Other Duties Amount");
          UNTIL NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

