OBJECT Report 16560 Delhi VAT
{
  OBJECT-PROPERTIES
  {
    Date=24-04-16;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.45778;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Delhi VAT;
               ENN=Delhi VAT];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF (StartDate = 0D) OR (EndDate = 0D) THEN
                    ERROR(Text13700);
                  Compinfo.GET;
                  CompName := Compinfo.Name;
                  CompAddress := Compinfo.Address + ', ' + Compinfo."Address 2" + ', ' + Compinfo.City;
                  CompTINNo := Compinfo."T.I.N. No.";
                  CompRegNo := Compinfo."VAT Registration No.";

                  VATReport.GET(0);

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY("Transaction Type","Tax %",Positive,"Works Contract","Exempted Sale",
                    "Product Type","Form Code","Tax Type","Export or Deemed Export","State Code","Entry Type","Adjustment Type",
                    "Input Credit/Output Tax Amount","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
                  DetailedTaxEntry.SETRANGE("Tax %",1);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  SalesOfGoodsTax1 := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  TaxAmountat1 := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Tax %",4);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  SalesOfGoodsTax4 := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  TaxAmountat4 := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Tax %",20);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  SalesOfGoodsTax20 := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  TaxAmountat20 := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Tax %",12.5);
                  DetailedTaxEntry.SETRANGE("Works Contract",FALSE);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  SalesOfGoodsTax12 := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  TaxAmountat12 := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Tax %",12.5);
                  DetailedTaxEntry.SETRANGE("Works Contract",TRUE);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  SalesOfGoodsTax12WC := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  TaxAmountat12WC := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY("Transaction Type","Tax %",Positive,"Works Contract","Exempted Sale",
                    "Product Type","Form Code","Tax Type","Export or Deemed Export","State Code","Entry Type","Adjustment Type",
                    "Input Credit/Output Tax Amount","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
                  DetailedTaxEntry.SETRANGE(Positive,FALSE);
                  DetailedTaxEntry.SETRANGE("Exempted Sale",TRUE);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  SalesExempted := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  TaxAmountExempted := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  TotalTaxAmount := TaxAmountat1 + TaxAmountat4 + TaxAmountat12 + TaxAmountat20
                    + TaxAmountat12WC + TaxAmountExempted;

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY("Transaction Type","Tax %",Positive,"Works Contract","Exempted Sale",
                    "Product Type","Form Code","Tax Type","Export or Deemed Export","State Code","Entry Type","Adjustment Type",
                    "Input Credit/Output Tax Amount","Posting Date","Document Type","Deferment No.");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Purchase);
                  DetailedTaxEntry.SETRANGE(Positive,TRUE);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::"Capital Goods");
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.SETRANGE("Deferment No.",0);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  PurchOfCapitalGoods := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  CrAmtOfCapitalGoods := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::Item);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount","Input Credit/Output Tax Amount");
                  PurchOfOtherGoods := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');
                  CrAmtOfOtherGoods := ROUND(ABS(DetailedTaxEntry."Input Credit/Output Tax Amount"),1.0,'=');

                  TotalTaxCrAmt := CrAmtOfCapitalGoods + CrAmtOfOtherGoods;

                  VATSettlement.RESET;
                  VATSettlement.SETCURRENTKEY("State Code","Starting Date","Ending Date",Settlement);
                  VATSettlement.SETRANGE(Settlement,TRUE);
                  VATSettlement.SETRANGE("State Code",VATReport."State Code");
                  VATSettlement.SETRANGE("Starting Date",StartDate,EndDate);
                  VATSettlement.SETRANGE("Ending Date",StartDate,EndDate);
                  VATSettlement.CALCSUMS("VAT Payable Refund Amount","VAT Payable Setoff Amount","VAT Payable C/F Amount");
                  AdjustedAgainstCST := ROUND(ABS(VATSettlement."VAT Payable Setoff Amount"),1.0,'=');
                  RefundClaimed := ROUND(ABS(VATSettlement."VAT Payable Refund Amount"),1.0,'=');
                  "BalanceC/F" := ROUND(ABS(VATSettlement."VAT Payable C/F Amount"),1.0,'=');

                  // For Inter state Sales
                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY("Transaction Type","Tax %",Positive,"Works Contract","Exempted Sale",
                    "Product Type","Form Code","Tax Type","Export or Deemed Export","State Code","Entry Type","Adjustment Type",
                    "Input Credit/Output Tax Amount","Posting Date");
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::Adjustment);
                  DetailedTaxEntry.SETRANGE("Adjustment Type",DetailedTaxEntry."Adjustment Type"::"Branch Transfer");
                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::Item);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETFILTER("Input Credit/Output Tax Amount",'<>0');
                  IF DetailedTaxEntry.FINDSET THEN
                    REPEAT
                      DetailedTaxEntry2.RESET;
                      DetailedTaxEntry2.COPYFILTERS(DetailedTaxEntry);
                      DetailedTaxEntry2.SETCURRENTKEY("Adjusted by Entry No.");
                      DetailedTaxEntry2.SETRANGE("Adjusted by Entry No.",DetailedTaxEntry."Adjusted by Entry No.");
                      IF DetailedTaxEntry2.COUNT = 1 THEN
                        TotalinterstateSales += DetailedTaxEntry."Tax Base Amount";
                    UNTIL DetailedTaxEntry.NEXT = 0;

                  TotalinterstateSales := ROUND(ABS(TotalinterstateSales),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY("Transaction Type","Tax %",Positive,"Works Contract","Exempted Sale",
                    "Product Type","Form Code","Tax Type","Export or Deemed Export","State Code","Entry Type","Adjustment Type",
                    "Input Credit/Output Tax Amount","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE(Positive,FALSE);
                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::"Capital Goods");
                  DetailedTaxEntry.SETRANGE("Tax Type",DetailedTaxEntry."Tax Type"::CST);
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount");
                  SalesOfCapitalGoods := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::Item);
                  DetailedTaxEntry.SETRANGE("Form Code",'C');
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount");
                  SalesAgainstFormC := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Form Code",'D');
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount");
                  SalesAgainstFormD := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Form Code",'H');
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount");
                  SalesAgainstFormH := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');

                  DetailedTaxEntry.SETFILTER("Form Code",'<>C|<>D|<>H');
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount");
                  SalesAgainstAnyOtherForm := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY("Transaction Type","Tax %",Positive,"Works Contract","Exempted Sale",
                    "Product Type","Form Code","Tax Type","Export or Deemed Export","State Code","Entry Type","Adjustment Type",
                    "Input Credit/Output Tax Amount","Posting Date");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Sale);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE(Positive,FALSE);
                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::Item);
                  DetailedTaxEntry.SETRANGE("Export or Deemed Export",TRUE);
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.CALCSUMS("Tax Base Amount");
                  SalesOutsideIndia := ROUND(ABS(DetailedTaxEntry."Tax Base Amount"),1.0,'=');

                  "TotalOfInterStateSales/Export" := TotalinterstateSales + SalesAgainstFormC + SalesAgainstFormD + SalesAgainstFormH +
                    SalesAgainstAnyOtherForm + SalesOfCapitalGoods + SalesOutsideIndia;

                  VATSettlement.RESET;
                  VATSettlement.SETCURRENTKEY("State Code","Starting Date","Ending Date",Settlement);
                  VATSettlement.SETRANGE("State Code",VATReport."State Code");
                  VATSettlement.SETRANGE("Starting Date",StartDate,EndDate);
                  VATSettlement.SETRANGE("Ending Date",StartDate,EndDate);
                  IF VATSettlement.FIND('-') THEN
                    REPEAT
                      IF  VATSettlement."VAT Prev. Period Amount" < 0 THEN
                        IncInTaxCredit += VATSettlement."VAT Prev. Period Amount"
                      ELSE
                        DecInTaxCredit += VATSettlement."VAT Prev. Period Amount";
                    UNTIL VATSettlement.NEXT = 0;

                  DecInTaxCredit := ROUND(DecInTaxCredit,1.0,'=');
                  IncInTaxCredit := ROUND(ABS(DecInTaxCredit),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY("Transaction Type","Tax %",Positive,"Works Contract","Exempted Sale",
                    "Product Type","Form Code","Tax Type","Export or Deemed Export","State Code","Entry Type","Adjustment Type",
                    "Input Credit/Output Tax Amount","Posting Date","Document Type");
                  DetailedTaxEntry.SETRANGE("Transaction Type",DetailedTaxEntry."Transaction Type"::Purchase);
                  DetailedTaxEntry.SETRANGE("Document Type",DetailedTaxEntry."Document Type"::"Credit Memo");
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::Item);
                  DetailedTaxEntry.SETRANGE("Tax Type",DetailedTaxEntry."Tax Type"::VAT);
                  IF DetailedTaxEntry.FINDFIRST THEN
                    REPEAT
                      IF DetailedTaxEntry."Input Credit/Output Tax Amount" < 0 THEN
                        DecInTaxCredit1 += DetailedTaxEntry."Input Credit/Output Tax Amount";
                    UNTIL DetailedTaxEntry.NEXT = 0;

                  DecInTaxCredit1 := ROUND(DecInTaxCredit1,1.0,'=');
                  DecInTaxCredit1 := ROUND(ABS(DecInTaxCredit1),1.0,'=');

                  DetailedTaxEntry.RESET;
                  DetailedTaxEntry.SETCURRENTKEY("Transaction Type","Tax %",Positive,"Works Contract","Exempted Sale",
                    "Product Type","Form Code","Tax Type","Export or Deemed Export","State Code","Entry Type","Adjustment Type",
                    "Input Credit/Output Tax Amount","Posting Date");
                  DetailedTaxEntry.SETRANGE("Entry Type",DetailedTaxEntry."Entry Type"::Adjustment);
                  DetailedTaxEntry.SETRANGE("Adjustment Type",DetailedTaxEntry."Adjustment Type"::"Change in Usage");
                  DetailedTaxEntry.SETRANGE("Product Type",DetailedTaxEntry."Product Type"::Item);
                  DetailedTaxEntry.SETRANGE("State Code",VATReport."State Code");
                  DetailedTaxEntry.SETRANGE("Posting Date",StartDate,EndDate);
                  IF DetailedTaxEntry.FINDFIRST THEN
                    REPEAT
                      IF DetailedTaxEntry."Input Credit/Output Tax Amount" < 0 THEN
                        DecInTaxCredit2 += DetailedTaxEntry."Input Credit/Output Tax Amount"
                      ELSE
                        IncInTaxCredit2 += DetailedTaxEntry."Input Credit/Output Tax Amount";
                    UNTIL DetailedTaxEntry.NEXT = 0;

                  DecInTaxCredit2 := ROUND(DecInTaxCredit2,1.0,'=');
                  DecInTaxCredit2 := ROUND(ABS(DecInTaxCredit2),1.0,'=');

                  DetailedTaxEntry.SETRANGE("Adjustment Type",DetailedTaxEntry."Adjustment Type"::"Branch Transfer");
                  IF DetailedTaxEntry.FINDFIRST THEN
                    REPEAT
                      IF DetailedTaxEntry."Input Credit/Output Tax Amount" < 0 THEN
                        DecInTaxCredit3 += DetailedTaxEntry."Input Credit/Output Tax Amount"
                      ELSE
                        IncInTaxCredit3 += DetailedTaxEntry."Input Credit/Output Tax Amount"
                    UNTIL DetailedTaxEntry.NEXT = 0;

                  DecInTaxCredit3 := ROUND(DecInTaxCredit3,1.0,'=');
                  DecInTaxCredit3 := ROUND(ABS(DecInTaxCredit3),1.0,'=');

                  VATSettlement.RESET;
                  VATSettlement.SETCURRENTKEY("State Code","Starting Date","Ending Date",Settlement);
                  VATSettlement.SETRANGE("State Code",VATReport."State Code");
                  VATSettlement.SETRANGE("Starting Date",StartDate,EndDate);
                  VATSettlement.SETRANGE("Ending Date",StartDate,EndDate);
                  IF VATSettlement.FIND('-') THEN
                    REPEAT
                      IF VATSettlement."VAT Receivable Amount" < 0 THEN
                        IncInTaxCredit4 += VATSettlement."VAT Receivable Amount"
                      ELSE
                        DecInTaxCredit4 += VATSettlement."VAT Receivable Amount";
                    UNTIL VATSettlement.NEXT = 0;

                  IncInTaxCredit4 := IncInTaxCredit4 - CrAmtOfCapitalGoods;
                  DecInTaxCredit4 := DecInTaxCredit4 - CrAmtOfCapitalGoods;
                  DecInTaxCredit4 := ROUND(DecInTaxCredit4,1.0,'=');
                  IncInTaxCredit4 := ROUND(ABS(DecInTaxCredit4),1.0,'=');

                  OpenDocument;
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ENN=Options] }

      { 1500000;2;Field     ;
                  CaptionML=[ENU=Start Date;
                             ENN=Start Date];
                  SourceExpr=StartDate }

      { 1500002;2;Field     ;
                  CaptionML=[ENU=End Date;
                             ENN=End Date];
                  SourceExpr=EndDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Compinfo@1500000 : Record 79;
      DetailedTaxEntry@1500045 : Record 16522;
      DetailedTaxEntry2@1500005 : Record 16522;
      VATReport@1500047 : Record 16545;
      VATSettlement@1500026 : Record 16523;
      CompName@1500001 : Text[30];
      CompAddress@1500002 : Text[50];
      CompTINNo@1500003 : Code[20];
      CompRegNo@1500004 : Code[20];
      StartDate@1500006 : Date;
      EndDate@1500007 : Date;
      SalesOfGoodsTax1@1500008 : Decimal;
      TaxAmountat1@1500009 : Decimal;
      SalesOfGoodsTax4@1500010 : Decimal;
      TaxAmountat4@1500011 : Decimal;
      SalesOfGoodsTax12@1500012 : Decimal;
      TaxAmountat12@1500013 : Decimal;
      SalesOfGoodsTax20@1500014 : Decimal;
      TaxAmountat20@1500015 : Decimal;
      SalesOfGoodsTax12WC@1500016 : Decimal;
      TaxAmountat12WC@1500017 : Decimal;
      SalesExempted@1500018 : Decimal;
      TaxAmountExempted@1500019 : Decimal;
      TotalTaxAmount@1500020 : Decimal;
      PurchOfCapitalGoods@1500021 : Decimal;
      PurchOfOtherGoods@1500022 : Decimal;
      CrAmtOfCapitalGoods@1500023 : Decimal;
      CrAmtOfOtherGoods@1500024 : Decimal;
      TotalTaxCrAmt@1500025 : Decimal;
      AdjustedAgainstCST@1500028 : Decimal;
      RefundClaimed@1500029 : Decimal;
      "BalanceC/F"@1500030 : Decimal;
      SalesAgainstFormC@1500031 : Decimal;
      SalesAgainstFormD@1500033 : Decimal;
      SalesAgainstFormH@1500034 : Decimal;
      SalesAgainstAnyOtherForm@1500035 : Decimal;
      SalesOfCapitalGoods@1500036 : Decimal;
      SalesOutsideIndia@1500037 : Decimal;
      "TotalOfInterStateSales/Export"@1500032 : Decimal;
      TotalinterstateSales@1500046 : Decimal;
      IncInTaxCredit@1500050 : Decimal;
      DecInTaxCredit@1500051 : Decimal;
      DecInTaxCredit1@1500052 : Decimal;
      IncInTaxCredit2@1500057 : Decimal;
      DecInTaxCredit2@1500056 : Decimal;
      IncInTaxCredit3@1500060 : Decimal;
      DecInTaxCredit3@1500059 : Decimal;
      IncInTaxCredit4@1500063 : Decimal;
      DecInTaxCredit4@1500062 : Decimal;
      Text13700@1500027 : TextConst 'ENU=Enter the starting date and ending date.;ENN=Enter the starting date and ending date.';
      VATReportTemplateError@1500038 : TextConst 'ENU=No VAT report template has been specified for the VAT report.;ENN=No VAT report template has been specified for the VAT report.';

    PROCEDURE CreateDataSource@1500017() : Text[1024];
    VAR
      FileMgt@1500006 : Codeunit 419;
      MergeFileName@1500005 : Text;
      WordMergefile@1500000 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.MergeHandler" RUNONCLIENT;
    BEGIN
      VATReport.GET(0);

      WordMergefile := WordMergefile.MergeHandler;
      MergeFileName := FileMgt.ServerTempFileName('htm');
      WordMergefile.CreateMergeFile(MergeFileName);

      // Create HTML Header source
      WITH WordMergefile DO BEGIN
        // Column Headers
        AddField('CompanyName');
        AddField('CompanyAddress');
        AddField('CompanyTIN');
        AddField('CompanyVATRegNo');
        AddField('Starting Date');
        AddField('Ending Date');
        AddField('TotalSales_1%');
        AddField('TaxAmount_1%');
        AddField('TotalSales_4%');
        AddField('TaxAmount_4%');
        AddField('TotalSales_12%');
        AddField('TaxAmount_12%');
        AddField('TaxAmount_20%');
        AddField('TotalSales_20%');
        AddField('TotalSales_12%_WC');
        AddField('TotalAmount_12%_WC');
        AddField('TotalSalesExmt');
        AddField('TotalAmountExmt');
        AddField('TotaltaxAmt');
        AddField('purchaseOfCapitalgoods');
        AddField('PurchaseOfOtherGoods');
        AddField('CrAmtOfCapitalGoods');
        AddField('CrAmtOfOtherGoods');
        AddField('TotalTaxCrAmt');
        AddField('adjagainstCST');
        AddField('RefundClaimed');
        AddField('Balance_Carried_Forward');
        AddField('InterSateSales');
        AddField('SalesAgainstFormC');
        AddField('SalesAgainstFormD');
        AddField('SalesAgainstFormH');
        AddField('SalesAgainstanyotherForm');
        AddField('SalesofCapitalGoods');
        AddField('SalesOutsideindia');
        AddField('TotalInterStateSales/exports');
        AddField('IncInTaxCreditCarrForword');
        AddField('DecInTaxCreditCarrForword');
        AddField('RcptOfCreditNoteFromSeller');
        AddField('IncInChangeInUseOfGoods');
        AddField('DecInChangeInUseOfGoods');
        AddField('IncInTaxCrDisallowed');
        AddField('DecInTaxCrDisallowed');
        AddField('IncInBaltaxCreditOfCapitalGoods');
        AddField('DecInBaltaxCreditOfCapitalGoods');
        WriteLine;

        // Column Data
        AddField(CompName);
        AddField(CompAddress);
        AddField(CompTINNo);
        AddField(CompRegNo);
        AddField(FORMAT(StartDate));
        AddField(FORMAT(EndDate));
        AddField(FORMAT(SalesOfGoodsTax1));
        AddField(FORMAT(TaxAmountat1));
        AddField(FORMAT(SalesOfGoodsTax4));
        AddField(FORMAT(TaxAmountat4));
        AddField(FORMAT(SalesOfGoodsTax12));
        AddField(FORMAT(TaxAmountat12));
        AddField(FORMAT(SalesOfGoodsTax20));
        AddField(FORMAT(TaxAmountat20));
        AddField(FORMAT(SalesOfGoodsTax12WC));
        AddField(FORMAT(TaxAmountat12WC));
        AddField(FORMAT(SalesExempted));
        AddField(FORMAT(TaxAmountExempted));
        AddField(FORMAT(TotalTaxAmount));
        AddField(FORMAT(PurchOfCapitalGoods));
        AddField(FORMAT(PurchOfOtherGoods));
        AddField(FORMAT(CrAmtOfCapitalGoods));
        AddField(FORMAT(CrAmtOfOtherGoods));
        AddField(FORMAT(TotalTaxCrAmt));
        AddField(FORMAT(AdjustedAgainstCST));
        AddField(FORMAT(RefundClaimed));
        AddField(FORMAT("BalanceC/F"));
        AddField(FORMAT(TotalinterstateSales));
        AddField(FORMAT(SalesAgainstFormC));
        AddField(FORMAT(SalesAgainstFormD));
        AddField(FORMAT(SalesAgainstFormH));
        AddField(FORMAT(SalesAgainstAnyOtherForm));
        AddField(FORMAT(SalesOfCapitalGoods));
        AddField(FORMAT(SalesOutsideIndia));
        AddField(FORMAT("TotalOfInterStateSales/Export"));
        AddField(FORMAT(IncInTaxCredit));
        AddField(FORMAT(DecInTaxCredit));
        AddField(FORMAT(DecInTaxCredit1));
        AddField(FORMAT(IncInTaxCredit2));
        AddField(FORMAT(DecInTaxCredit2));
        AddField(FORMAT(IncInTaxCredit3));
        AddField(FORMAT(DecInTaxCredit3));
        AddField(FORMAT(IncInTaxCredit4));
        AddField(FORMAT(DecInTaxCredit4));
        WriteLine;
        CloseMergeFile;
      END;

      EXIT(MergeFileName);
    END;

    LOCAL PROCEDURE OpenDocument@1500040();
    VAR
      FileMgt@1500003 : Codeunit 419;
      WordHelper@1500007 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Word.WordHelper" RUNONCLIENT;
      WordApplication@1500008 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.ApplicationClass" RUNONCLIENT;
      WordDocument@1500010 : DotNet "'Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Word.Document" RUNONCLIENT;
      FileName@1500002 : Text;
      ServerFileName@1500006 : Text;
      ParamInt@1500000 : Integer;
      DSFilePath@1500001 : Text;
    BEGIN
      IF VATReport.GET(0) THEN BEGIN
        VATReport.CALCFIELDS(Template);
        IF NOT VATReport.Template.HASVALUE THEN
          ERROR(VATReportTemplateError);

        ServerFileName := FileMgt.ServerTempFileName('doc');
        VATReport.Template.EXPORT(ServerFileName);
        FileName := FileMgt.DownloadTempFile(ServerFileName);
        FileName := FileMgt.MoveAndRenameClientFile(FileName,FORMAT(VATReport.Code) + '.doc',FORMAT(CREATEGUID));

        WordApplication := WordApplication.ApplicationClass;
        WordDocument := WordHelper.CallOpen(WordApplication,FileName,FALSE,FALSE);
        WordDocument.ActiveWindow.Caption := VATReport.Description;
        WordDocument.Saved := TRUE;

        WordDocument.MailMerge.MainDocumentType := 0;
        WordDocument.MailMerge.Destination := 0; // 0 = wdSendToNewDocument
        WordDocument.MailMerge.SuppressBlankLines := TRUE;
        WordDocument.MailMerge.DataSource.FirstRecord := 1; // wdDefaultFirstRecord
        WordDocument.MailMerge.DataSource.LastRecord := -16; // wdDefaultLastRecord

        DSFilePath := FileMgt.DownloadTempFile(CreateDataSource);
        ParamInt := 7; // 7 = HTML
        WordHelper.CallMailMergeOpenDataSource(WordDocument,DSFilePath,ParamInt);
        WordHelper.CallMailMergeExecute(WordDocument);

        WordHelper.CallClose(WordDocument,FALSE);
        WordApplication.Visible := TRUE;

        CLEAR(WordDocument);
        CLEAR(WordApplication);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

