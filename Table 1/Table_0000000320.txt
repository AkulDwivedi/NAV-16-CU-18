OBJECT Table 320 Tax Jurisdiction
{
  OBJECT-PROPERTIES
  {
    Date=23-09-13;
    Time=12:00:00 PM;
    Version List=NAVW17.10,NAVIN7.10;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Description;
    CaptionML=[ENU=Tax Jurisdiction;
               ENN=Tax Jurisdiction];
    LookupPageID=Page466;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              ENN=Code];
                                                   NotBlank=Yes }
    { 2   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              ENN=Description] }
    { 3   ;   ;Tax Account (Sales) ;Code20        ;TableRelation="G/L Account";
                                                   OnValidate=VAR
                                                                State2@1500001 : Record 13762;
                                                              BEGIN
                                                                IF "Tax Account (Sales)" <> '' THEN BEGIN
                                                                  IF State2.GET("State Code") THEN
                                                                   IF "Tax Account (Sales)" <> State2."Tax Account (Sales)" THEN
                                                                     ERROR(Text16500);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Tax Account (Sales);
                                                              ENN=Tax Account (Sales)] }
    { 4   ;   ;Tax Account (Purchases);Code20     ;TableRelation="G/L Account";
                                                   OnValidate=BEGIN
                                                                IF "Tax Account (Purchases)" <> '' THEN BEGIN
                                                                  IF State.GET("State Code") THEN
                                                                   IF "Tax Account (Purchases)" <> State."Tax Account (Purchases)" THEN
                                                                     ERROR(Text16501);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Tax Account (Purchases);
                                                              ENN=Tax Account (Purchases)] }
    { 5   ;   ;Report-to Jurisdiction;Code10      ;TableRelation="Tax Jurisdiction";
                                                   CaptionML=[ENU=Report-to Jurisdiction;
                                                              ENN=Report-to Jurisdiction] }
    { 6   ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENN=Date Filter] }
    { 7   ;   ;Tax Group Filter    ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Filter;
                                                              ENN=Tax Group Filter] }
    { 8   ;   ;Unreal. Tax Acc. (Sales);Code20    ;TableRelation="G/L Account";
                                                   CaptionML=[ENU=Unreal. Tax Acc. (Sales);
                                                              ENN=Unreal. Tax Acc. (Sales)] }
    { 9   ;   ;Unreal. Tax Acc. (Purchases);Code20;TableRelation="G/L Account";
                                                   CaptionML=[ENU=Unreal. Tax Acc. (Purchases);
                                                              ENN=Unreal. Tax Acc. (Purchases)] }
    { 10  ;   ;Reverse Charge (Purchases);Code20  ;TableRelation="G/L Account";
                                                   CaptionML=[ENU=Reverse Charge (Purchases);
                                                              ENN=Reverse Charge (Purchases)] }
    { 11  ;   ;Unreal. Rev. Charge (Purch.);Code20;TableRelation="G/L Account";
                                                   CaptionML=[ENU=Unreal. Rev. Charge (Purch.);
                                                              ENN=Unreal. Rev. Charge (Purch.)] }
    { 12  ;   ;Unrealized VAT Type ;Option        ;OnValidate=BEGIN
                                                                IF "Unrealized VAT Type" > 0 THEN BEGIN
                                                                  GLSetup.GET;
                                                                  GLSetup.TESTFIELD("Unrealized VAT",TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Unrealized VAT Type;
                                                              ENN=Unrealized VAT Type];
                                                   OptionCaptionML=[ENU=" ,Percentage,First,Last,First (Fully Paid),Last (Fully Paid)";
                                                                    ENN=" ,Percentage,First,Last,First (Fully Paid),Last (Fully Paid)"];
                                                   OptionString=[ ,Percentage,First,Last,First (Fully Paid),Last (Fully Paid)] }
    { 13  ;   ;Calculate Tax on Tax;Boolean       ;OnValidate=BEGIN
                                                                TaxDetail.SETRANGE("Tax Jurisdiction Code",Code);
                                                                TaxDetail.MODIFYALL("Calculate Tax on Tax","Calculate Tax on Tax");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=[ENU=Calculate Tax on Tax;
                                                              ENN=Calculate Tax on Tax] }
    { 14  ;   ;Adjust for Payment Discount;Boolean;OnValidate=BEGIN
                                                                IF "Adjust for Payment Discount" THEN BEGIN
                                                                  GLSetup.GET;
                                                                  GLSetup.TESTFIELD("Adjust for Payment Disc.",TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Adjust for Payment Discount;
                                                              ENN=Adjust for Payment Discount] }
    { 13702;  ;Forms Not Applicable;Boolean       ;OnValidate=BEGIN
                                                                TaxDetail.RESET;
                                                                TaxDetail.SETRANGE("Tax Jurisdiction Code",Code);
                                                                IF TaxDetail.FIND('-') THEN
                                                                  REPEAT
                                                                    TaxDetail."Forms Not Applicable" := "Forms Not Applicable";
                                                                    TaxDetail.MODIFY;
                                                                  UNTIL TaxDetail.NEXT = 0
                                                              END;

                                                   CaptionML=[ENU=Forms Not Applicable;
                                                              ENN=Forms Not Applicable] }
    { 16503;  ;Retention Limit % (ITC NTS);Decimal;CaptionML=[ENU=Retention Limit % (ITC NTS);
                                                              ENN=Retention Limit % (ITC NTS)];
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 16505;  ;Tax Type            ;Option        ;CaptionML=[ENU=Tax Type;
                                                              ENN=Tax Type];
                                                   OptionCaptionML=[ENU=" ,VAT,CST";
                                                                    ENN=" ,VAT,CST"];
                                                   OptionString=[ ,VAT,CST] }
    { 16506;  ;State Code          ;Code10        ;TableRelation=State;
                                                   OnValidate=VAR
                                                                StateRec@1500000 : Record 13762;
                                                              BEGIN
                                                                IF "State Code"  = '' THEN BEGIN
                                                                  "Tax Account (Sales)" :=  '';
                                                                  "Tax Account (Purchases)" := '';
                                                                END;
                                                                IF StateRec.GET("State Code") THEN  BEGIN
                                                                  "Tax Account (Sales)" :=  StateRec."Tax Account (Sales)";
                                                                  "Tax Account (Purchases)" := StateRec."Tax Account (Purchases)";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=State Code;
                                                              ENN=State Code] }
    { 16507;  ;Retention Limit Loaded on Item;Boolean;
                                                   CaptionML=[ENU=Retention Limit Loaded on Item;
                                                              ENN=Retention Limit Loaded on Item] }
    { 16508;  ;Tax Component       ;Code10        ;TableRelation="Tax Component";
                                                   CaptionML=[ENU=Tax Component;
                                                              ENN=Tax Component] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Report-to Jurisdiction                   }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Description                         }
  }
  CODE
  {
    VAR
      GLSetup@1000 : Record 98;
      TaxDetail@1001 : Record 322;
      Text16500@1500000 : TextConst 'ENU=Tax Account (Sales) in Tax Jurisdiction cannot be different from the Tax Account (Sales) defined in the State.;ENN=Tax Account (Sales) in Tax Jurisdiction cannot be different from the Tax Account (Sales) defined in the State.';
      Text16501@1500001 : TextConst 'ENU=Tax Account (Purchases) in Tax Jurisdiction cannot be different from the Tax Account (Purchases) defined in the State.;ENN=Tax Account (Purchases) in Tax Jurisdiction cannot be different from the Tax Account (Purchases) defined in the State.';
      State@1500002 : Record 13762;

    PROCEDURE GetSalesAccount@4(Unrealized@1000 : Boolean) : Code[20];
    BEGIN
      IF Unrealized THEN BEGIN
        TESTFIELD("Unreal. Tax Acc. (Sales)");
        EXIT("Unreal. Tax Acc. (Sales)");
      END;
      TESTFIELD("Tax Account (Sales)");
      EXIT("Tax Account (Sales)");
    END;

    PROCEDURE GetPurchAccount@5(Unrealized@1000 : Boolean) : Code[20];
    BEGIN
      IF Unrealized THEN BEGIN
        TESTFIELD("Unreal. Tax Acc. (Purchases)");
        EXIT("Unreal. Tax Acc. (Purchases)");
      END;
      TESTFIELD("Tax Account (Purchases)");
      EXIT("Tax Account (Purchases)");
    END;

    PROCEDURE GetRevChargeAccount@6(Unrealized@1000 : Boolean) : Code[20];
    BEGIN
      IF Unrealized THEN BEGIN
        TESTFIELD("Unreal. Rev. Charge (Purch.)");
        EXIT("Unreal. Rev. Charge (Purch.)");
      END;
      TESTFIELD("Reverse Charge (Purchases)");
      EXIT("Reverse Charge (Purchases)");
    END;

    BEGIN
    END.
  }
}

