OBJECT Table 38 Purchase Header
{
  OBJECT-PROPERTIES
  {
    Date=01-08-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.48992,NAVIN9.00.00.48992;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Buy-from Vendor Name;
    OnInsert=VAR
               ArchiveManagement@1000 : Codeunit 5063;
             BEGIN
               IF NOT SkipInitialization THEN
                 InitInsert;

               IF GETFILTER("Buy-from Vendor No.") <> '' THEN
                 IF GETRANGEMIN("Buy-from Vendor No.") = GETRANGEMAX("Buy-from Vendor No.") THEN
                   VALIDATE("Buy-from Vendor No.",GETRANGEMIN("Buy-from Vendor No."));

               "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Purchase Header","Document Type","No.");
             END;

    OnDelete=VAR
               StrOrder@1280001 : Record 13794;
               StrOrderLine@1280000 : Record 13795;
               ArchiveManagement@1000 : Codeunit 5063;
             BEGIN
               IF NOT UserSetupMgt.CheckRespCenter(1,"Responsibility Center") THEN
                 ERROR(
                   Text023,
                   RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter);

               PurchPost.DeleteHeader(
                 Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
                 ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);

               ArchiveManagement.AutoArchivePurchDocument(Rec);

               VALIDATE("Applies-to ID",'');
               VALIDATE("Incoming Document Entry No.",0);

               ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
               PurchLine.LOCKTABLE;

               WhseRequest.SETRANGE("Source Type",DATABASE::"Purchase Line");
               WhseRequest.SETRANGE("Source Subtype","Document Type");
               WhseRequest.SETRANGE("Source No.","No.");
               WhseRequest.DELETEALL(TRUE);

               PurchLine.SETRANGE("Document Type","Document Type");
               PurchLine.SETRANGE("Document No.","No.");
               PurchLine.SETRANGE(Type,PurchLine.Type::"Charge (Item)");
               DeletePurchaseLines;
               PurchLine.SETRANGE(Type);
               DeletePurchaseLines;

               PurchCommentLine.SETRANGE("Document Type","Document Type");
               PurchCommentLine.SETRANGE("No.","No.");
               PurchCommentLine.DELETEALL;

               StrOrder.SETRANGE(Type,StrOrder.Type::Purchase);
               StrOrder.SETRANGE("Document Type","Document Type");
               StrOrder.SETRANGE("Structure Code",Structure);
               StrOrder.SETRANGE("Document No.","No.");
               IF StrOrder.FINDFIRST THEN
                 StrOrder.DELETEALL;

               StrOrderLine.SETCURRENTKEY("Document Type","Document No.",Type);
               StrOrderLine.SETRANGE(Type,StrOrder.Type::Purchase);
               StrOrderLine.SETRANGE("Document Type","Document Type");
               StrOrderLine.SETRANGE("Structure Code",Structure);
               StrOrderLine.SETRANGE("Document No.","No.");
               IF StrOrderLine.FINDFIRST THEN
                 StrOrderLine.DELETEALL;

               GateEntryAttachment2.RESET;
               GateEntryAttachment2.SETRANGE("Source Type",GateEntryAttachment2."Source Type"::"Purchase Order");
               GateEntryAttachment2.SETRANGE("Entry Type",GateEntryAttachment2."Entry Type"::Inward);
               GateEntryAttachment2.SETRANGE("Source No.","No.");
               GateEntryAttachment2.DELETEALL;

               IF (PurchRcptHeader."No." <> '') OR
                  (PurchInvHeader."No." <> '') OR
                  (PurchCrMemoHeader."No." <> '') OR
                  (ReturnShptHeader."No." <> '') OR
                  (PurchInvHeaderPrepmt."No." <> '') OR
                  (PurchCrMemoHeaderPrepmt."No." <> '')
               THEN
                 MESSAGE(PostedDocsToPrintCreatedMsg);
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=[ENU=Purchase Header;
               ENN=Purchase Header];
    LookupPageID=Page53;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ENN=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=VAR
                                                                Location1@1500000 : Record 14;
                                                              BEGIN
                                                                InitRecOnVendUpdate;
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Buy-from Vendor No." <> xRec."Buy-from Vendor No.") AND
                                                                   (xRec."Buy-from Vendor No." <> '')
                                                                THEN BEGIN
                                                                  CheckDropShipmentLineExists;
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Buy-from Vendor No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");
                                                                    IF "Buy-from Vendor No." = '' THEN BEGIN
                                                                      IF NOT PurchLine.ISEMPTY THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Buy-from Vendor No."));
                                                                      INIT;
                                                                      PurchSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      EXIT;
                                                                    END;
                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      PurchLine.SETFILTER("Quantity Received",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                                                                        PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
                                                                        PurchLine.SETFILTER("Receipt No.",'<>%1','');
                                                                      END;
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        PurchLine.TESTFIELD("Quantity Received",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Receipt No.",'');

                                                                    PurchLine.SETRANGE("Receipt No.");
                                                                    PurchLine.SETRANGE("Quantity Received");
                                                                    PurchLine.SETRANGE("Buy-from Vendor No.");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      PurchLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF PurchLine.FIND('-') THEN
                                                                        PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      PurchLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      PurchLine.SETFILTER("Return Qty. Shipped",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                        PurchLine.SETRANGE("Buy-from Vendor No.",xRec."Buy-from Vendor No.");
                                                                        PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
                                                                      END;
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        PurchLine.TESTFIELD("Return Qty. Shipped",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Return Shipment No.",'');

                                                                    PurchLine.RESET;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                  IF "Location Code" <> '' THEN BEGIN
                                                                    Location1.GET("Location Code");
                                                                    Trading := Location1."Trading Location";
                                                                  END;
                                                                END;

                                                                GetVend("Buy-from Vendor No.");
                                                                Vend.CheckBlockedVendOnDocs(Vend,FALSE);
                                                                VALIDATE("GST Vendor Type",Vend."GST Vendor Type");
                                                                Vend.TESTFIELD("Gen. Bus. Posting Group");
                                                                "Buy-from Vendor Name" := Vend.Name;
                                                                "Buy-from Vendor Name 2" := Vend."Name 2";
                                                                "Buy-from Address" := Vend.Address;
                                                                "Buy-from Address 2" := Vend."Address 2";
                                                                "Buy-from City" := Vend.City;
                                                                "Buy-from Post Code" := Vend."Post Code";
                                                                "Buy-from County" := Vend.County;
                                                                "Buy-from Country/Region Code" := Vend."Country/Region Code";
                                                                IF NOT SkipBuyFromContact THEN
                                                                  "Buy-from Contact" := Vend.Contact;
                                                                "Gen. Bus. Posting Group" := Vend."Gen. Bus. Posting Group";
                                                                "VAT Bus. Posting Group" := Vend."VAT Bus. Posting Group";
                                                                "Tax Liable" := Vend."Tax Liable";
                                                                "VAT Country/Region Code" := Vend."Country/Region Code";
                                                                "VAT Registration No." := Vend."VAT Registration No.";
                                                                VALIDATE("Lead Time Calculation",Vend."Lead Time Calculation");
                                                                "Responsibility Center" := UserSetupMgt.GetRespCenter(1,Vend."Responsibility Center");
                                                                VALIDATE("Sell-to Customer No.",'');
                                                                VALIDATE("Location Code",UserSetupMgt.GetLocation(1,Vend."Location Code","Responsibility Center"));
                                                                VALIDATE(Structure,Vend.Structure);
                                                                "Excise Bus. Posting Group" := Vend."Excise Bus. Posting Group";
                                                                State := Vend."State Code";
                                                                "Associated Enterprises" := Vend."Associated Enterprises";
                                                                IF "Buy-from Vendor No." = xRec."Pay-to Vendor No." THEN
                                                                  IF ReceivedPurchLinesExist OR ReturnShipmentExist THEN BEGIN
                                                                    TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
                                                                    TESTFIELD("Gen. Bus. Posting Group",xRec."Gen. Bus. Posting Group");
                                                                  END;

                                                                "Buy-from IC Partner Code" := Vend."IC Partner Code";
                                                                "Send IC Document" := ("Buy-from IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);

                                                                IF Vend."Pay-to Vendor No." <> '' THEN
                                                                  VALIDATE("Pay-to Vendor No.",Vend."Pay-to Vendor No.")
                                                                ELSE BEGIN
                                                                  IF "Buy-from Vendor No." = "Pay-to Vendor No." THEN
                                                                    SkipPayToContact := TRUE;
                                                                  VALIDATE("Pay-to Vendor No.","Buy-from Vendor No.");
                                                                  SkipPayToContact := FALSE;
                                                                END;
                                                                "Order Address Code" := '';

                                                                VALIDATE("Order Address Code");
                                                                TaxAreaUpdate;
                                                                IF (xRec."Buy-from Vendor No." <> "Buy-from Vendor No.") OR
                                                                   (xRec."Currency Code" <> "Currency Code") OR
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("Buy-from Vendor No."));

                                                                IF NOT SkipBuyFromContact THEN
                                                                  UpdateBuyFromCont("Buy-from Vendor No.");
                                                              END;

                                                   CaptionML=[ENU=Buy-from Vendor No.;
                                                              ENN=Buy-from Vendor No.] }
    { 3   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 4   ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   OnValidate=VAR
                                                                NODHeader@1500103 : Record 13786;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.") AND
                                                                   (xRec."Pay-to Vendor No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Pay-to Vendor No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");

                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      PurchLine.SETFILTER("Quantity Received",'<>0');
                                                                    IF "Document Type" = "Document Type"::Invoice THEN
                                                                      PurchLine.SETFILTER("Receipt No.",'<>%1','');
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        PurchLine.TESTFIELD("Quantity Received",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Receipt No.",'');

                                                                    PurchLine.SETRANGE("Receipt No.");
                                                                    PurchLine.SETRANGE("Quantity Received");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      PurchLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF PurchLine.FIND('-') THEN
                                                                        PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      PurchLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;

                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      PurchLine.SETFILTER("Return Qty. Shipped",'<>0');
                                                                    IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                      PurchLine.SETFILTER("Return Shipment No.",'<>%1','');
                                                                    IF PurchLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        PurchLine.TESTFIELD("Return Qty. Shipped",0)
                                                                      ELSE
                                                                        PurchLine.TESTFIELD("Return Shipment No.",'');

                                                                    PurchLine.RESET;
                                                                  END ELSE
                                                                    "Pay-to Vendor No." := xRec."Pay-to Vendor No.";
                                                                END;

                                                                GetVend("Pay-to Vendor No.");
                                                                Vend.CheckBlockedVendOnDocs(Vend,FALSE);
                                                                Vend.TESTFIELD("Vendor Posting Group");

                                                                "Pay-to Name" := Vend.Name;
                                                                "Pay-to Name 2" := Vend."Name 2";
                                                                "Pay-to Address" := Vend.Address;
                                                                "Pay-to Address 2" := Vend."Address 2";
                                                                "Pay-to City" := Vend.City;
                                                                "Pay-to Post Code" := Vend."Post Code";
                                                                "Pay-to County" := Vend.County;
                                                                "Pay-to Country/Region Code" := Vend."Country/Region Code";
                                                                IF NOT SkipPayToContact THEN
                                                                  "Pay-to Contact" := Vend.Contact;
                                                                "Payment Terms Code" := Vend."Payment Terms Code";
                                                                "Prepmt. Payment Terms Code" := Vend."Payment Terms Code";
                                                                VALIDATE(Structure,Vend.Structure);

                                                                IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                  "Payment Method Code" := '';
                                                                  IF PaymentTerms.GET("Payment Terms Code") THEN
                                                                    IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN
                                                                      "Payment Method Code" := Vend."Payment Method Code"
                                                                END ELSE
                                                                  "Payment Method Code" := Vend."Payment Method Code";

                                                                "Shipment Method Code" := Vend."Shipment Method Code";
                                                                "Vendor Posting Group" := Vend."Vendor Posting Group";
                                                                GLSetup.GET;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN BEGIN
                                                                  "VAT Bus. Posting Group" := Vend."VAT Bus. Posting Group";
                                                                  "VAT Country/Region Code" := Vend."Country/Region Code";
                                                                  "VAT Registration No." := Vend."VAT Registration No.";
                                                                  "Gen. Bus. Posting Group" := Vend."Gen. Bus. Posting Group";
                                                                END;
                                                                "Prices Including VAT" := Vend."Prices Including VAT";
                                                                "Currency Code" := Vend."Currency Code";
                                                                "Invoice Disc. Code" := Vend."Invoice Disc. Code";
                                                                "Language Code" := Vend."Language Code";
                                                                "Purchaser Code" := Vend."Purchaser Code";
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                                VALIDATE("Payment Method Code");
                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Creditor No.",Vend."Creditor No.");

                                                                IF "Document Type" = "Document Type"::Order THEN
                                                                  VALIDATE("Prepayment %",Vend."Prepayment %");

                                                                IF "Pay-to Vendor No." = xRec."Pay-to Vendor No." THEN BEGIN
                                                                  IF ReceivedPurchLinesExist THEN
                                                                    TESTFIELD("Currency Code",xRec."Currency Code");
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");

                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."Pay-to Vendor No." <> "Pay-to Vendor No.")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("Pay-to Vendor No."));

                                                                IF NOT SkipPayToContact THEN
                                                                  UpdatePayToCont("Pay-to Vendor No.");

                                                                "Pay-to IC Partner Code" := Vend."IC Partner Code";
                                                                IF NODHeader.GET(NODHeader.Type::Vendor,"Pay-to Vendor No.") THEN
                                                                  VALIDATE("Assessee Code",NODHeader."Assesse Code")
                                                                ELSE
                                                                  VALIDATE("Assessee Code",'');
                                                              END;

                                                   CaptionML=[ENU=Pay-to Vendor No.;
                                                              ENN=Pay-to Vendor No.];
                                                   NotBlank=Yes }
    { 5   ;   ;Pay-to Name         ;Text50        ;CaptionML=[ENU=Pay-to Name;
                                                              ENN=Pay-to Name] }
    { 6   ;   ;Pay-to Name 2       ;Text50        ;CaptionML=[ENU=Pay-to Name 2;
                                                              ENN=Pay-to Name 2] }
    { 7   ;   ;Pay-to Address      ;Text50        ;CaptionML=[ENU=Pay-to Address;
                                                              ENN=Pay-to Address] }
    { 8   ;   ;Pay-to Address 2    ;Text50        ;CaptionML=[ENU=Pay-to Address 2;
                                                              ENN=Pay-to Address 2] }
    { 9   ;   ;Pay-to City         ;Text30        ;TableRelation=IF (Pay-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Pay-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Pay-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Pay-to City","Pay-to Post Code","Pay-to County","Pay-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Pay-to City;
                                                              ENN=Pay-to City] }
    { 10  ;   ;Pay-to Contact      ;Text50        ;CaptionML=[ENU=Pay-to Contact;
                                                              ENN=Pay-to Contact] }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=[ENU=Your Reference;
                                                              ENN=Your Reference] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      YouCannotChangeFieldErr,
                                                                      FIELDCAPTION("Ship-to Code"));
                                                                END;

                                                                IF "Ship-to Code" <> '' THEN BEGIN
                                                                  ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                  "Ship-to Name" := ShipToAddr.Name;
                                                                  "Ship-to Name 2" := ShipToAddr."Name 2";
                                                                  "Ship-to Address" := ShipToAddr.Address;
                                                                  "Ship-to Address 2" := ShipToAddr."Address 2";
                                                                  "Ship-to City" := ShipToAddr.City;
                                                                  "Ship-to Post Code" := ShipToAddr."Post Code";
                                                                  "Ship-to County" := ShipToAddr.County;
                                                                  "Ship-to Country/Region Code" := ShipToAddr."Country/Region Code";
                                                                  "Ship-to Contact" := ShipToAddr.Contact;
                                                                  "Shipment Method Code" := ShipToAddr."Shipment Method Code";
                                                                  IF ShipToAddr."Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",ShipToAddr."Location Code");
                                                                END ELSE BEGIN
                                                                  TESTFIELD("Sell-to Customer No.");
                                                                  Cust.GET("Sell-to Customer No.");
                                                                  "Ship-to Name" := Cust.Name;
                                                                  "Ship-to Name 2" := Cust."Name 2";
                                                                  "Ship-to Address" := Cust.Address;
                                                                  "Ship-to Address 2" := Cust."Address 2";
                                                                  "Ship-to City" := Cust.City;
                                                                  "Ship-to Post Code" := Cust."Post Code";
                                                                  "Ship-to County" := Cust.County;
                                                                  "Ship-to Country/Region Code" := Cust."Country/Region Code";
                                                                  "Ship-to Contact" := Cust.Contact;
                                                                  "Shipment Method Code" := Cust."Shipment Method Code";
                                                                  IF Cust."Location Code" <> '' THEN
                                                                    VALIDATE("Location Code",Cust."Location Code");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Ship-to Code;
                                                              ENN=Ship-to Code] }
    { 13  ;   ;Ship-to Name        ;Text50        ;CaptionML=[ENU=Ship-to Name;
                                                              ENN=Ship-to Name] }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ENN=Ship-to Name 2] }
    { 15  ;   ;Ship-to Address     ;Text50        ;CaptionML=[ENU=Ship-to Address;
                                                              ENN=Ship-to Address] }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=[ENU=Ship-to Address 2;
                                                              ENN=Ship-to Address 2] }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              ENN=Ship-to City] }
    { 18  ;   ;Ship-to Contact     ;Text50        ;CaptionML=[ENU=Ship-to Contact;
                                                              ENN=Ship-to Contact] }
    { 19  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND
                                                                   NOT ("Order Date" = xRec."Order Date")
                                                                THEN
                                                                  PriceMessageIfPurchLinesExist(FIELDCAPTION("Order Date"));
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Order Date;
                                                              ENN=Order Date] }
    { 20  ;   ;Posting Date        ;Date          ;OnValidate=VAR
                                                                SkipJobCurrFactorUpdate@1000 : Boolean;
                                                              BEGIN
                                                                TestNoSeriesDate(
                                                                  "Posting No.","Posting No. Series",
                                                                  FIELDCAPTION("Posting No."),FIELDCAPTION("Posting No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepayment No.","Prepayment No. Series",
                                                                  FIELDCAPTION("Prepayment No."),FIELDCAPTION("Prepayment No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepmt. Cr. Memo No.","Prepmt. Cr. Memo No. Series",
                                                                  FIELDCAPTION("Prepmt. Cr. Memo No."),FIELDCAPTION("Prepmt. Cr. Memo No. Series"));

                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  VALIDATE("Document Date","Posting Date");

                                                                IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                                                                   NOT ("Posting Date" = xRec."Posting Date")
                                                                THEN
                                                                  PriceMessageIfPurchLinesExist(FIELDCAPTION("Posting Date"));

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                    SkipJobCurrFactorUpdate := NOT ConfirmUpdateCurrencyFactor;
                                                                END;

                                                                IF "Posting Date" <> xRec."Posting Date" THEN
                                                                  IF DeferralHeadersExist THEN
                                                                    ConfirmUpdateDeferralDate;

                                                                IF PurchLinesExist THEN
                                                                  JobUpdatePurchLines(SkipJobCurrFactorUpdate);
                                                                UpdatePurchLines(FIELDCAPTION("Posting Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 21  ;   ;Expected Receipt Date;Date         ;OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Expected Receipt Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Expected Receipt Date;
                                                              ENN=Expected Receipt Date] }
    { 22  ;   ;Posting Description ;Text50        ;CaptionML=[ENU=Posting Description;
                                                              ENN=Posting Description] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Due Date","Document Date");
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END;
                                                                END;
                                                                IF xRec."Payment Terms Code" = "Prepmt. Payment Terms Code" THEN
                                                                  VALIDATE("Prepmt. Payment Terms Code","Payment Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENN=Payment Terms Code] }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENN=Due Date] }
    { 25  ;   ;Payment Discount %  ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=[ENU=Payment Discount %;
                                                              ENN=Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              ENN=Pmt. Discount Date] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENN=Shipment Method Code] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Location Code" <> xRec."Location Code") AND
                                                                   (xRec."Buy-from Vendor No." = "Buy-from Vendor No.")
                                                                THEN
                                                                  MessageIfPurchLinesExist(FIELDCAPTION("Location Code"));

                                                                UpdateShipToAddress;

                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF Location.GET("Location Code") THEN;
                                                                  "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";
                                                                  Trading := Location."Trading Location";
                                                                END;
                                                                PurchSetup.GET;
                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote,
                                                                                         "Document Type"::"Blanket Order"]
                                                                  THEN
                                                                    IF Trading THEN BEGIN
                                                                      "Posting No. Series" := PurchSetup."Posted Invoice Nos. (Trading)";
                                                                      IF ("Document Type" = "Document Type"::Invoice) AND PurchSetup."Receipt on Invoice" THEN
                                                                        "Receiving No. Series" := PurchSetup."Posted Purch. Rcpt. (Trading)"
                                                                      ELSE
                                                                        IF "Document Type" IN ["Document Type"::Order,"Document Type"::Quote,"Document Type"::"Blanket Order"] THEN
                                                                          "Receiving No. Series" := PurchSetup."Posted Purch. Rcpt. (Trading)";
                                                                        IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
                                                                          GetPostInvoiceNoSeries;
                                                                    END ELSE BEGIN
                                                                      "Posting No. Series" := PurchSetup."Posted Invoice Nos.";
                                                                      IF ("Document Type" = "Document Type"::Invoice) AND PurchSetup."Receipt on Invoice" THEN
                                                                        "Receiving No. Series" := PurchSetup."Posted Receipt Nos."
                                                                      ELSE
                                                                        IF "Document Type" IN ["Document Type"::Order,"Document Type"::Quote,"Document Type"::"Blanket Order"] THEN
                                                                          "Receiving No. Series" := PurchSetup."Posted Receipt Nos.";
                                                                        IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
                                                                          GetPostInvoiceNoSeries;
                                                                    END;

                                                                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                    IF Trading THEN BEGIN
                                                                      "Posting No. Series" := PurchSetup."Posted Purch Cr. Memo(Trading)";
                                                                      IF ("Document Type" = "Document Type"::"Credit Memo") AND PurchSetup."Return Shipment on Credit Memo" THEN
                                                                        "Return Shipment No. Series" := PurchSetup."Posted Ret Shpt Nos. (Trading)"
                                                                      ELSE
                                                                        IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                          "Return Shipment No. Series" := PurchSetup."Posted Ret Shpt Nos. (Trading)";
                                                                      IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
                                                                        GetPostedCrMemoNoSeries;
                                                                    END ELSE BEGIN
                                                                      "Posting No. Series" := PurchSetup."Posted Credit Memo Nos.";
                                                                      IF ("Document Type" = "Document Type"::"Credit Memo") AND PurchSetup."Return Shipment on Credit Memo" THEN
                                                                        "Return Shipment No. Series" := PurchSetup."Posted Return Shpt. Nos."
                                                                      ELSE
                                                                        IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                          "Return Shipment No. Series" := PurchSetup."Posted Return Shpt. Nos.";
                                                                      IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
                                                                        GetPostedCrMemoNoSeries;
                                                                    END;
                                                                  "GST Input Service Distribution" := FALSE;
                                                                END;
                                                                IF "Location Code" <> '' THEN BEGIN
                                                                  Location.GET("Location Code");
                                                                  IF "Document Type" IN ["Document Type"::Order,"Document Type"::Quote,"Document Type"::"Blanket Order"] THEN
                                                                    IF Trading THEN BEGIN
                                                                      IF Location."Purh. Invoice Nos. (Trading)" <> '' THEN
                                                                        "Posting No. Series" := Location."Purh. Invoice Nos. (Trading)"
                                                                      ELSE
                                                                        "Posting No. Series" := PurchSetup."Posted Invoice Nos. (Trading)";

                                                                      IF Location."Purch. Rcpt. Nos. (Trading)" <> '' THEN
                                                                        "Receiving No. Series" := Location."Purch. Rcpt. Nos. (Trading)"
                                                                      ELSE
                                                                        "Receiving No. Series" := PurchSetup."Posted Purch. Rcpt. (Trading)";
                                                                      IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
                                                                        GetPostInvoiceNoSeries;
                                                                    END ELSE BEGIN
                                                                      IF Location."Purch. Invoice Nos." <> '' THEN
                                                                        "Posting No. Series" := Location."Purch. Invoice Nos."
                                                                      ELSE
                                                                        "Posting No. Series" := PurchSetup."Posted Invoice Nos.";
                                                                      IF Location."Purch. Receipt Nos." <> '' THEN
                                                                        "Receiving No. Series" := Location."Purch. Receipt Nos."
                                                                      ELSE
                                                                        "Receiving No. Series" := PurchSetup."Posted Receipt Nos.";
                                                                      IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
                                                                        GetPostInvoiceNoSeries;
                                                                    END;
                                                                  IF "Document Type" = "Document Type"::Invoice THEN
                                                                    IF Trading THEN BEGIN
                                                                      IF Location."Purh. Invoice Nos. (Trading)" <> '' THEN
                                                                        "Posting No. Series" := Location."Purh. Invoice Nos. (Trading)"
                                                                      ELSE
                                                                        "Posting No. Series" := PurchSetup."Posted Invoice Nos. (Trading)";
                                                                      IF PurchSetup."Receipt on Invoice" THEN BEGIN
                                                                        IF Location."Purch. Rcpt. Nos. (Trading)" <> '' THEN
                                                                          "Receiving No. Series" := Location."Purch. Rcpt. Nos. (Trading)"
                                                                        ELSE
                                                                          "Receiving No. Series" := PurchSetup."Posted Purch. Rcpt. (Trading)";
                                                                      END;
                                                                      IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
                                                                        GetPostInvoiceNoSeries;
                                                                    END ELSE BEGIN
                                                                      IF Location."Purch. Invoice Nos." <> '' THEN
                                                                        "Posting No. Series" := Location."Purch. Invoice Nos."
                                                                      ELSE
                                                                        "Posting No. Series" := PurchSetup."Posted Invoice Nos.";

                                                                      IF PurchSetup."Receipt on Invoice" THEN BEGIN
                                                                        IF Location."Purch. Receipt Nos." <> '' THEN
                                                                          "Receiving No. Series" := Location."Purch. Receipt Nos."
                                                                        ELSE
                                                                          "Receiving No. Series" := PurchSetup."Posted Receipt Nos."
                                                                      END;
                                                                      IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
                                                                        GetPostInvoiceNoSeries;
                                                                    END;
                                                                  IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                    IF Trading THEN BEGIN
                                                                      IF Location."Purch. Ret Shpt Nos. (Trading)" <> '' THEN
                                                                        "Return Shipment No. Series" := Location."Purch. Ret Shpt Nos. (Trading)"
                                                                      ELSE
                                                                        "Return Shipment No. Series" := PurchSetup."Posted Ret Shpt Nos. (Trading)";
                                                                      IF Location."Purch Cr. Memo Nos. (Trading)" <> '' THEN
                                                                        "Posting No. Series" := Location."Purch Cr. Memo Nos. (Trading)"
                                                                      ELSE
                                                                        "Posting No. Series" := PurchSetup."Posted Purch Cr. Memo(Trading)";
                                                                      IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
                                                                        GetPostedCrMemoNoSeries;
                                                                    END ELSE BEGIN
                                                                      IF Location."Purch. Ret. Shipment Nos." <> '' THEN
                                                                        "Return Shipment No. Series" := Location."Purch. Ret. Shipment Nos."
                                                                      ELSE
                                                                        "Return Shipment No. Series" := PurchSetup."Posted Return Shpt. Nos.";
                                                                      IF Location."Purch. Credit Memo Nos." <> '' THEN
                                                                        "Posting No. Series" := Location."Purch. Credit Memo Nos."
                                                                      ELSE
                                                                        "Posting No. Series" := PurchSetup."Posted Credit Memo Nos.";
                                                                      IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
                                                                        GetPostedCrMemoNoSeries;
                                                                    END;
                                                                  IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                    IF Trading THEN BEGIN
                                                                      IF PurchSetup."Return Shipment on Credit Memo" THEN BEGIN
                                                                        IF Location."Purch. Ret Shpt Nos. (Trading)" <> '' THEN
                                                                          "Return Shipment No. Series" := Location."Purch. Ret Shpt Nos. (Trading)"
                                                                        ELSE
                                                                          "Return Shipment No. Series" := PurchSetup."Posted Ret Shpt Nos. (Trading)";
                                                                      END;
                                                                      IF Location."Purch Cr. Memo Nos. (Trading)" <> '' THEN
                                                                        "Posting No. Series" := Location."Purch Cr. Memo Nos. (Trading)"
                                                                      ELSE
                                                                        "Posting No. Series" := PurchSetup."Posted Purch Cr. Memo(Trading)";
                                                                      IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
                                                                        GetPostedCrMemoNoSeries;
                                                                    END ELSE BEGIN
                                                                      IF PurchSetup."Return Shipment on Credit Memo" THEN BEGIN
                                                                        IF Location."Purch. Ret. Shipment Nos." <> '' THEN
                                                                          "Return Shipment No. Series" := Location."Purch. Ret. Shipment Nos."
                                                                        ELSE
                                                                          "Return Shipment No. Series" := PurchSetup."Posted Return Shpt. Nos.";
                                                                      END;
                                                                      IF Location."Purch. Credit Memo Nos." <> '' THEN
                                                                        "Posting No. Series" := Location."Purch. Credit Memo Nos."
                                                                      ELSE
                                                                        "Posting No. Series" := PurchSetup."Posted Credit Memo Nos.";
                                                                      IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
                                                                        GetPostedCrMemoNoSeries;
                                                                    END;
                                                                  "GST Input Service Distribution" := Location."GST Input Service Distributor";
                                                                END;
                                                                IF "Buy-from Vendor No." <> '' THEN
                                                                  GetVend("Buy-from Vendor No.");
                                                                TaxAreaUpdate;
                                                                IF "Input Service Distribution" AND PoT THEN
                                                                  ERROR(Text16502);
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Vendor Posting Group;Code10        ;TableRelation="Vendor Posting Group";
                                                   CaptionML=[ENU=Vendor Posting Group;
                                                              ENN=Vendor Posting Group];
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date")]) OR ("Currency Code" <> xRec."Currency Code") THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                IF (CurrFieldNo <> FIELDNO("Currency Code")) AND ("Currency Code" = xRec."Currency Code") THEN
                                                                  UpdateCurrencyFactor
                                                                ELSE
                                                                  IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                    UpdateCurrencyFactor;
                                                                    IF PurchLinesExist THEN
                                                                      IF CONFIRM(ChangeCurrencyQst,FALSE,FIELDCAPTION("Currency Code")) THEN BEGIN
                                                                        SetHideValidationDialog(TRUE);
                                                                        RecreatePurchLines(FIELDCAPTION("Currency Code"));
                                                                        SetHideValidationDialog(FALSE);
                                                                      END ELSE
                                                                        ERROR(Text018,FIELDCAPTION("Currency Code"));
                                                                  END ELSE
                                                                    IF "Currency Code" <> '' THEN BEGIN
                                                                      UpdateCurrencyFactor;
                                                                      IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                        ConfirmUpdateCurrencyFactor;
                                                                    END;
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code] }
    { 33  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Currency Factor"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              ENN=Currency Factor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 35  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                PurchLine@1000 : Record 39;
                                                                Currency@1001 : Record 4;
                                                                RecalculatePrice@1002 : Boolean;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF "Prices Including VAT" <> xRec."Prices Including VAT" THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type","Document Type");
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Direct Unit Cost",'<>%1',0);
                                                                  PurchLine.SETFILTER("VAT %",'<>%1',0);
                                                                  IF PurchLine.FIND('-') THEN BEGIN
                                                                    RecalculatePrice :=
                                                                      CONFIRM(
                                                                        STRSUBSTNO(
                                                                          Text025 +
                                                                          Text027,
                                                                          FIELDCAPTION("Prices Including VAT"),PurchLine.FIELDCAPTION("Direct Unit Cost")),
                                                                        TRUE);
                                                                    PurchLine.SetPurchHeader(Rec);

                                                                    IF RecalculatePrice AND "Prices Including VAT" THEN
                                                                      PurchLine.MODIFYALL(Amount,0,TRUE);

                                                                    IF "Currency Code" = '' THEN
                                                                      Currency.InitRoundingPrecision
                                                                    ELSE
                                                                      Currency.GET("Currency Code");

                                                                    PurchLine.FINDSET;
                                                                    REPEAT
                                                                      PurchLine.TESTFIELD("Quantity Invoiced",0);
                                                                      PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      IF NOT RecalculatePrice THEN BEGIN
                                                                        PurchLine."VAT Difference" := 0;
                                                                        PurchLine.UpdateAmounts;
                                                                      END ELSE
                                                                        IF "Prices Including VAT" THEN BEGIN
                                                                          PurchLine."Direct Unit Cost" :=
                                                                            ROUND(
                                                                              PurchLine."Direct Unit Cost" * (1 + PurchLine."VAT %" / 100),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF PurchLine.Quantity <> 0 THEN BEGIN
                                                                            PurchLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                PurchLine.Quantity * PurchLine."Direct Unit Cost" * PurchLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            PurchLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                PurchLine."Inv. Discount Amount" * (1 + PurchLine."VAT %" / 100),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END ELSE BEGIN
                                                                          PurchLine."Direct Unit Cost" :=
                                                                            ROUND(
                                                                              PurchLine."Direct Unit Cost" / (1 + PurchLine."VAT %" / 100),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF PurchLine.Quantity <> 0 THEN BEGIN
                                                                            PurchLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                PurchLine.Quantity * PurchLine."Direct Unit Cost" * PurchLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            PurchLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                PurchLine."Inv. Discount Amount" / (1 + PurchLine."VAT %" / 100),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END;
                                                                      PurchLine.MODIFY;
                                                                    UNTIL PurchLine.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prices Including VAT;
                                                              ENN=Prices Including VAT] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Invoice Disc. Code"));
                                                              END;

                                                   CaptionML=[ENU=Invoice Disc. Code;
                                                              ENN=Invoice Disc. Code] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Language Code"));
                                                              END;

                                                   CaptionML=[ENU=Language Code;
                                                              ENN=Language Code] }
    { 43  ;   ;Purchaser Code      ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=VAR
                                                                ApprovalEntry@1001 : Record 454;
                                                              BEGIN
                                                                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Purchase Header");
                                                                ApprovalEntry.SETRANGE("Document Type","Document Type");
                                                                ApprovalEntry.SETRANGE("Document No.","No.");
                                                                ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
                                                                IF NOT ApprovalEntry.ISEMPTY THEN
                                                                  ERROR(Text042,FIELDCAPTION("Purchaser Code"));

                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Purchaser Code;
                                                              ENN=Purchaser Code] }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=[ENU=Order Class;
                                                              ENN=Order Class] }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purch. Comment Line" WHERE (Document Type=FIELD(Document Type),
                                                                                                  No.=FIELD(No.),
                                                                                                  Document Line No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              ENN=No. Printed];
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ENN=On Hold] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;OnValidate=BEGIN
                                                                TDSUpdateLines;
                                                                IF xRec."Applies-to Doc. Type" <> "Applies-to Doc. Type" THEN
                                                                  VALIDATE("Applies-to Doc. No.",'');
                                                              END;

                                                   CaptionML=[ENU=Applies-to Doc. Type;
                                                              ENN=Applies-to Doc. Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=VAR
                                                                VendLedgEntry@1500000 : Record 25;
                                                                TransactionType@1500001 : 'Purchase,Sale';
                                                              BEGIN
                                                                GSTApplicationManagement.DeleteGSTApplicationBuffer(
                                                                  TransactionType::Purchase,"Buy-from Vendor No.","Document Type","No.");

                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');

                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." <> '') AND
                                                                   ("Applies-to Doc. No." <> '')
                                                                THEN BEGIN
                                                                  SetAmountToApply("Applies-to Doc. No.","Buy-from Vendor No.");
                                                                  SetAmountToApply(xRec."Applies-to Doc. No.","Buy-from Vendor No.");
                                                                END ELSE
                                                                  IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." = '') THEN
                                                                    SetAmountToApply("Applies-to Doc. No.","Buy-from Vendor No.")
                                                                  ELSE
                                                                    IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND ("Applies-to Doc. No." = '') THEN
                                                                      SetAmountToApply(xRec."Applies-to Doc. No.","Buy-from Vendor No.");
                                                                TDSUpdateLines;
                                                                VendLedgEntry.RESET;
                                                                VendLedgEntry.SETCURRENTKEY("Document No.","Document Type","Vendor No.");
                                                                VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                IF "Applies-to Doc. Type" <> 0 THEN
                                                                  VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                VendLedgEntry.SETRANGE("Vendor No.","Buy-from Vendor No.");
                                                                IF VendLedgEntry.FINDFIRST THEN BEGIN
                                                                  VendLedgEntry.CALCFIELDS("Remaining Amt. (LCY)");
                                                                  "Transaction No. Serv. Tax" := 0;
                                                                  IF NOT (VendLedgEntry."Remaining Amt. (LCY)" = 0) AND VendLedgEntry."Serv. Tax on Advance Payment" THEN
                                                                    "Transaction No. Serv. Tax" := VendLedgEntry."Transaction No.";
                                                                END;

                                                                IF "Applies-to Doc. No." = '' THEN BEGIN
                                                                  "Transaction No. Serv. Tax" := 0;
                                                                  IF xRec."Applies-to Doc. No." <> '' THEN BEGIN
                                                                  VendLedgEntry.RESET;
                                                                  VendLedgEntry.SETCURRENTKEY("Document No.","Document Type","Vendor No.");
                                                                  VendLedgEntry.SETRANGE("Document No.",xRec."Applies-to Doc. No.");
                                                                  IF xRec."Applies-to Doc. Type" <> 0 THEN
                                                                    VendLedgEntry.SETRANGE("Document Type",xRec."Applies-to Doc. Type");
                                                                  VendLedgEntry.SETRANGE("Vendor No.","Buy-from Vendor No.");
                                                                  IF VendLedgEntry.FINDFIRST THEN
                                                                    GSTApplicationManagement.DeletePaymentAplicationBuffer(TransactionType2::Purchase,VendLedgEntry."Entry No.");
                                                                  END;
                                                                END;
                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  "Applies-to ID" := '';
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Bal. Account No.",'');
                                                              VendLedgEntry.RESET;
                                                              VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
                                                              VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                              VendLedgEntry.SETRANGE(Open,TRUE);
                                                              IF "Applies-to Doc. No." <> '' THEN BEGIN
                                                                VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                IF VendLedgEntry.FINDFIRST THEN;
                                                                VendLedgEntry.SETRANGE("Document Type");
                                                                VendLedgEntry.SETRANGE("Document No.");
                                                              END ELSE
                                                                IF "Applies-to Doc. Type" <> 0 THEN BEGIN
                                                                  VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                  IF VendLedgEntry.FINDFIRST THEN;
                                                                  VendLedgEntry.SETRANGE("Document Type");
                                                                END ELSE
                                                                  IF Amount <> 0 THEN BEGIN
                                                                    VendLedgEntry.SETRANGE(Positive,Amount < 0);
                                                                    IF VendLedgEntry.FINDFIRST THEN;
                                                                    VendLedgEntry.SETRANGE(Positive);
                                                                  END;
                                                              IF GSTManagement.IsGSTApplicable(Structure) AND ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) THEN BEGIN
                                                                CalculateGSTStructure(Rec);
                                                                GSTApplicationManagement.FillAppBufferHSNComponentInvoice(
                                                                  TransactionType2::Purchase,"Pay-to Vendor No.","Document Type","No.");
                                                              END;
                                                              COMMIT;
                                                              CLEAR(ApplyVendEntries);
                                                              ApplyVendEntries.SetPurch(Rec,VendLedgEntry,PurchHeader.FIELDNO("Applies-to Doc. No."));
                                                              ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
                                                              ApplyVendEntries.SETRECORD(VendLedgEntry);
                                                              ApplyVendEntries.LOOKUPMODE(TRUE);
                                                              IF ApplyVendEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ApplyVendEntries.GetVendLedgEntry(VendLedgEntry);
                                                                GenJnlApply.CheckAgainstApplnCurrency(
                                                                  "Currency Code",VendLedgEntry."Currency Code",GenJnILine."Account Type"::Vendor,TRUE);
                                                                "Applies-to Doc. Type" := VendLedgEntry."Document Type";
                                                                "Applies-to Doc. No." := VendLedgEntry."Document No.";
                                                                "Transaction No. Serv. Tax" := 0;
                                                                IF VendLedgEntry."Serv. Tax on Advance Payment" THEN
                                                                  "Transaction No. Serv. Tax" := VendLedgEntry."Transaction No.";

                                                              END;
                                                              CLEAR(ApplyVendEntries);
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ENN=Applies-to Doc. No.] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Bal. Account Type"::"G/L Account":
                                                                      BEGIN
                                                                        GLAcc.GET("Bal. Account No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      END;
                                                                    "Bal. Account Type"::"Bank Account":
                                                                      BEGIN
                                                                        BankAcc.GET("Bal. Account No.");
                                                                        BankAcc.TESTFIELD(Blocked,FALSE);
                                                                        BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENN=Bal. Account No.] }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Purchase Line" WHERE (Document Type=FIELD(Document Type),
                                                                                            Document No.=FIELD(No.),
                                                                                            Recalculate Invoice Disc.=CONST(Yes)));
                                                   CaptionML=[ENU=Recalculate Invoice Disc.;
                                                              ENN=Recalculate Invoice Disc.];
                                                   Editable=No }
    { 57  ;   ;Receive             ;Boolean       ;CaptionML=[ENU=Receive;
                                                              ENN=Receive] }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=[ENU=Invoice;
                                                              ENN=Invoice] }
    { 59  ;   ;Print Posted Documents;Boolean     ;CaptionML=[ENU=Print Posted Documents;
                                                              ENN=Print Posted Documents] }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line".Amount WHERE (Document Type=FIELD(Document Type),
                                                                                                 Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amount Including VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                                 Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ENN=Amount Including VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 62  ;   ;Receiving No.       ;Code20        ;CaptionML=[ENU=Receiving No.;
                                                              ENN=Receiving No.] }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=[ENU=Posting No.;
                                                              ENN=Posting No.] }
    { 64  ;   ;Last Receiving No.  ;Code20        ;TableRelation="Purch. Rcpt. Header";
                                                   CaptionML=[ENU=Last Receiving No.;
                                                              ENN=Last Receiving No.];
                                                   Editable=No }
    { 65  ;   ;Last Posting No.    ;Code20        ;TableRelation="Purch. Inv. Header";
                                                   CaptionML=[ENU=Last Posting No.;
                                                              ENN=Last Posting No.];
                                                   Editable=No }
    { 66  ;   ;Vendor Order No.    ;Code35        ;CaptionML=[ENU=Vendor Order No.;
                                                              ENN=Vendor Order No.] }
    { 67  ;   ;Vendor Shipment No. ;Code35        ;CaptionML=[ENU=Vendor Shipment No.;
                                                              ENN=Vendor Shipment No.] }
    { 68  ;   ;Vendor Invoice No.  ;Code35        ;CaptionML=[ENU=Vendor Invoice No.;
                                                              ENN=Vendor Invoice No.] }
    { 69  ;   ;Vendor Cr. Memo No. ;Code35        ;CaptionML=[ENU=Vendor Cr. Memo No.;
                                                              ENN=Vendor Cr. Memo No.] }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              ENN=VAT Registration No.] }
    { 72  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Sell-to Customer No." <> "Sell-to Customer No.")
                                                                THEN BEGIN
                                                                  PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                                                                  PurchLine.SETRANGE("Document No.","No.");
                                                                  PurchLine.SETFILTER("Sales Order Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      YouCannotChangeFieldErr,
                                                                      FIELDCAPTION("Sell-to Customer No."));

                                                                  PurchLine.SETRANGE("Sales Order Line No.");
                                                                  PurchLine.SETFILTER("Special Order Sales Line No.",'<>0');
                                                                  IF NOT PurchLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      YouCannotChangeFieldErr,
                                                                      FIELDCAPTION("Sell-to Customer No."));
                                                                END;

                                                                IF NOT Trading THEN BEGIN
                                                                IF "Sell-to Customer No." = '' THEN
                                                                  VALIDATE("Location Code",UserSetupMgt.GetLocation(1,'',"Responsibility Center"))
                                                                ELSE
                                                                  VALIDATE("Ship-to Code",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENN=Reason Code] }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group")
                                                                THEN BEGIN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    "VAT Bus. Posting Group" := GenBusPostingGrp."Def. VAT Bus. Posting Group";
                                                                  RecreatePurchLines(FIELDCAPTION("Gen. Bus. Posting Group"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transaction Type"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Type] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transport Method"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              ENN=VAT Country/Region Code] }
    { 79  ;   ;Buy-from Vendor Name;Text50        ;CaptionML=[ENU=Buy-from Vendor Name;
                                                              ENN=Buy-from Vendor Name] }
    { 80  ;   ;Buy-from Vendor Name 2;Text50      ;CaptionML=[ENU=Buy-from Vendor Name 2;
                                                              ENN=Buy-from Vendor Name 2] }
    { 81  ;   ;Buy-from Address    ;Text50        ;CaptionML=[ENU=Buy-from Address;
                                                              ENN=Buy-from Address] }
    { 82  ;   ;Buy-from Address 2  ;Text50        ;CaptionML=[ENU=Buy-from Address 2;
                                                              ENN=Buy-from Address 2] }
    { 83  ;   ;Buy-from City       ;Text30        ;TableRelation=IF (Buy-from Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Buy-from Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Buy-from Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buy-from City;
                                                              ENN=Buy-from City] }
    { 84  ;   ;Buy-from Contact    ;Text50        ;CaptionML=[ENU=Buy-from Contact;
                                                              ENN=Buy-from Contact] }
    { 85  ;   ;Pay-to Post Code    ;Code20        ;TableRelation=IF (Pay-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Pay-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Pay-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Pay-to City","Pay-to Post Code","Pay-to County","Pay-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Pay-to Post Code;
                                                              ENN=Pay-to Post Code] }
    { 86  ;   ;Pay-to County       ;Text30        ;CaptionML=[ENU=Pay-to County;
                                                              ENN=Pay-to County] }
    { 87  ;   ;Pay-to Country/Region Code;Code10  ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Pay-to Country/Region Code;
                                                              ENN=Pay-to Country/Region Code] }
    { 88  ;   ;Buy-from Post Code  ;Code20        ;TableRelation=IF (Buy-from Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Buy-from Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Buy-from Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Buy-from City","Buy-from Post Code","Buy-from County","Buy-from Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Buy-from Post Code;
                                                              ENN=Buy-from Post Code] }
    { 89  ;   ;Buy-from County     ;Text30        ;CaptionML=[ENU=Buy-from County;
                                                              ENN=Buy-from County] }
    { 90  ;   ;Buy-from Country/Region Code;Code10;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Buy-from Country/Region Code;
                                                              ENN=Buy-from Country/Region Code] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ENN=Ship-to Post Code] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ENN=Ship-to County] }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ENN=Ship-to Country/Region Code] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ENN=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    ENN=G/L Account,Bank Account];
                                                   OptionString=G/L Account,Bank Account }
    { 95  ;   ;Order Address Code  ;Code10        ;TableRelation="Order Address".Code WHERE (Vendor No.=FIELD(Buy-from Vendor No.));
                                                   OnValidate=BEGIN
                                                                IF "Order Address Code" <> '' THEN BEGIN
                                                                  OrderAddr.GET("Buy-from Vendor No.","Order Address Code");
                                                                  "Buy-from Vendor Name" := OrderAddr.Name;
                                                                  "Buy-from Vendor Name 2" := OrderAddr."Name 2";
                                                                  "Buy-from Address" := OrderAddr.Address;
                                                                  "Buy-from Address 2" := OrderAddr."Address 2";
                                                                  "Buy-from City" := OrderAddr.City;
                                                                  "Buy-from Contact" := OrderAddr.Contact;
                                                                  "Buy-from Post Code" := OrderAddr."Post Code";
                                                                  "Buy-from County" := OrderAddr.County;
                                                                  "Buy-from Country/Region Code" := OrderAddr."Country/Region Code";

                                                                  IF ("Document Type" = "Document Type"::"Return Order") OR
                                                                     ("Document Type" = "Document Type"::"Credit Memo")
                                                                  THEN BEGIN
                                                                    "Ship-to Name" := OrderAddr.Name;
                                                                    "Ship-to Name 2" := OrderAddr."Name 2";
                                                                    "Ship-to Address" := OrderAddr.Address;
                                                                    "Ship-to Address 2" := OrderAddr."Address 2";
                                                                    "Ship-to City" := OrderAddr.City;
                                                                    "Ship-to Post Code" := OrderAddr."Post Code";
                                                                    "Ship-to County" := OrderAddr.County;
                                                                    "Ship-to Country/Region Code" := OrderAddr."Country/Region Code";
                                                                    "Ship-to Contact" := OrderAddr.Contact;
                                                                  END
                                                                END ELSE BEGIN
                                                                  GetVend("Buy-from Vendor No.");
                                                                  "Buy-from Vendor Name" := Vend.Name;
                                                                  "Buy-from Vendor Name 2" := Vend."Name 2";
                                                                  "Buy-from Address" := Vend.Address;
                                                                  "Buy-from Address 2" := Vend."Address 2";
                                                                  "Buy-from City" := Vend.City;
                                                                  "Buy-from Contact" := Vend.Contact;
                                                                  "Buy-from Post Code" := Vend."Post Code";
                                                                  "Buy-from County" := Vend.County;
                                                                  "Buy-from Country/Region Code" := Vend."Country/Region Code";

                                                                  IF ("Document Type" = "Document Type"::"Return Order") OR
                                                                     ("Document Type" = "Document Type"::"Credit Memo")
                                                                  THEN BEGIN
                                                                    "Ship-to Name" := Vend.Name;
                                                                    "Ship-to Name 2" := Vend."Name 2";
                                                                    "Ship-to Address" := Vend.Address;
                                                                    "Ship-to Address 2" := Vend."Address 2";
                                                                    "Ship-to City" := Vend.City;
                                                                    "Ship-to Post Code" := Vend."Post Code";
                                                                    "Ship-to County" := Vend.County;
                                                                    "Ship-to Country/Region Code" := Vend."Country/Region Code";
                                                                    "Ship-to Contact" := Vend.Contact;
                                                                    "Shipment Method Code" := Vend."Shipment Method Code";
                                                                    IF Vend."Location Code" <> '' THEN
                                                                      VALIDATE("Location Code",Vend."Location Code");
                                                                  END
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Order Address Code;
                                                              ENN=Order Address Code] }
    { 97  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Entry Point"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Entry Point;
                                                              ENN=Entry Point] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENN=Correction] }
    { 99  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                IF xRec."Document Date" <> "Document Date" THEN
                                                                  UpdateDocumentDate := TRUE;
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Document Date;
                                                              ENN=Document Date] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION(Area),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Transaction Specification"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=BEGIN
                                                                PaymentMethod.INIT;
                                                                IF "Payment Method Code" <> '' THEN
                                                                  PaymentMethod.GET("Payment Method Code");
                                                                "Bal. Account Type" := PaymentMethod."Bal. Account Type";
                                                                "Bal. Account No." := PaymentMethod."Bal. Account No.";
                                                                IF "Bal. Account No." <> '' THEN BEGIN
                                                                  TESTFIELD("Applies-to Doc. No.",'');
                                                                  TESTFIELD("Applies-to ID",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENN=Payment Method Code] }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series];
                                                   Editable=No }
    { 108 ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Posting No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetPostingNoSeriesCode,"Posting No. Series");
                                                                END;
                                                                TESTFIELD("Posting No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                TestNoSeries;
                                                                IF NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Posting No. Series") THEN
                                                                  VALIDATE("Posting No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Posting No. Series;
                                                              ENN=Posting No. Series] }
    { 109 ;   ;Receiving No. Series;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Receiving No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Receipt Nos.","Receiving No. Series");
                                                                END;
                                                                TESTFIELD("Receiving No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Receipt Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Receipt Nos.","Receiving No. Series") THEN
                                                                  VALIDATE("Receiving No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Receiving No. Series;
                                                              ENN=Receiving No. Series] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Tax Area Code"));
                                                                TaxAreaUpdateLines;
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=Tax Area Code] }
    { 115 ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfPurchLinesExist(FIELDCAPTION("Tax Liable"));
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ENN=Tax Liable] }
    { 116 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF (xRec."Buy-from Vendor No." = "Buy-from Vendor No.") AND
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreatePurchLines(FIELDCAPTION("VAT Bus. Posting Group"));
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 118 ;   ;Applies-to ID       ;Code50        ;OnValidate=VAR
                                                                TempVendLedgEntry@1000 : Record 25;
                                                                VendorLedgerEntry@1500005 : Record 25;
                                                                PurchaseLine@1500004 : Record 39;
                                                                TransactionType@1500001 : 'Purchase,Sale';
                                                                ApplicationType@1500002 : 'Online,Offline';
                                                                HSNWiseGSTAmt@1500000 : Decimal;
                                                                TotalAppliedAmt@1500003 : Decimal;
                                                              BEGIN
                                                                IF "Applies-to ID" = '' THEN
                                                                  GSTApplicationManagement.DeleteGSTApplicationBuffer(
                                                                    TransactionType::Purchase,"Buy-from Vendor No.","Document Type","No.");
                                                                IF "Applies-to ID" <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN BEGIN
                                                                  VendLedgEntry.SETCURRENTKEY("Vendor No.",Open);
                                                                  VendLedgEntry.SETRANGE("Vendor No.","Pay-to Vendor No.");
                                                                  VendLedgEntry.SETRANGE(Open,TRUE);
                                                                  VendLedgEntry.SETRANGE("Applies-to ID",xRec."Applies-to ID");
                                                                  IF VendLedgEntry.FINDFIRST THEN
                                                                    IF GSTManagement.IsGSTApplicable(Structure) AND
                                                                      ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) THEN BEGIN
                                                                      GSTApplicationManagement.FillAppBufferHSNComponentInvoice(
                                                                        TransactionType2::Purchase,VendLedgEntry."Vendor No.","Document Type","No.");
                                                                      VendEntrySetApplID.SetGSTType(Rec);
                                                                    END;
                                                                    VendEntrySetApplID.SetApplId(VendLedgEntry,TempVendLedgEntry,'');
                                                                  VendLedgEntry.RESET;
                                                                END;

                                                                VendLedgEntry.RESET;
                                                                VendLedgEntry.SETCURRENTKEY("Document No.","Document Type","Vendor No.");
                                                                VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
                                                                IF "Applies-to Doc. Type" <> 0 THEN
                                                                  VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                VendLedgEntry.SETRANGE("Vendor No.","Buy-from Vendor No.");
                                                                IF VendLedgEntry.FINDFIRST THEN BEGIN
                                                                  VendLedgEntry.CALCFIELDS("Remaining Amt. (LCY)");
                                                                  IF NOT (VendLedgEntry."Remaining Amt. (LCY)" = 0) AND VendLedgEntry."Serv. Tax on Advance Payment" THEN
                                                                    "Transaction No. Serv. Tax" := VendLedgEntry."Transaction No.";
                                                                END;

                                                                IF "Applies-to ID" = '' THEN
                                                                  "Transaction No. Serv. Tax" := 0;

                                                                IF "Applies-to ID" <> '' THEN
                                                                  "Applies-to Doc. No." := '';
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID;
                                                              ENN=Applies-to ID] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;OnValidate=BEGIN
                                                                GLSetup.GET;
                                                                IF "VAT Base Discount %" > GLSetup."VAT Tolerance %" THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed :=
                                                                      CONFIRM(
                                                                        Text007 +
                                                                        Text008,FALSE,
                                                                        FIELDCAPTION("VAT Base Discount %"),
                                                                        GLSetup.FIELDCAPTION("VAT Tolerance %"),
                                                                        GLSetup.TABLECAPTION);
                                                                  IF NOT Confirmed THEN
                                                                    "VAT Base Discount %" := xRec."VAT Base Discount %";
                                                                END;

                                                                IF ("VAT Base Discount %" = xRec."VAT Base Discount %") AND
                                                                   (CurrFieldNo <> 0)
                                                                THEN
                                                                  EXIT;

                                                                PurchLine.SETRANGE("Document Type","Document Type");
                                                                PurchLine.SETRANGE("Document No.","No.");
                                                                PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
                                                                PurchLine.SETFILTER(Quantity,'<>0');
                                                                PurchLine.LOCKTABLE;
                                                                IF PurchLine.FINDSET THEN BEGIN
                                                                  MODIFY;
                                                                  REPEAT
                                                                    PurchLine.UpdateAmounts;
                                                                    PurchLine.MODIFY;
                                                                  UNTIL PurchLine.NEXT = 0;
                                                                END;
                                                                PurchLine.RESET;
                                                              END;

                                                   CaptionML=[ENU=VAT Base Discount %;
                                                              ENN=VAT Base Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENN=Status];
                                                   OptionCaptionML=[ENU=Open,Released,Pending Approval,Pending Prepayment;
                                                                    ENN=Open,Released,Pending Approval,Pending Prepayment];
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment;
                                                   Editable=No }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=[ENU=Invoice Discount Calculation;
                                                              ENN=Invoice Discount Calculation];
                                                   OptionCaptionML=[ENU=None,%,Amount;
                                                                    ENN=None,%,Amount];
                                                   OptionString=None,%,Amount;
                                                   Editable=No }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=[ENU=Invoice Discount Value;
                                                              ENN=Invoice Discount Value];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Send IC Document" THEN BEGIN
                                                                  TESTFIELD("Buy-from IC Partner Code");
                                                                  TESTFIELD("IC Direction","IC Direction"::Outgoing);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Send IC Document;
                                                              ENN=Send IC Document] }
    { 124 ;   ;IC Status           ;Option        ;CaptionML=[ENU=IC Status;
                                                              ENN=IC Status];
                                                   OptionCaptionML=[ENU=New,Pending,Sent;
                                                                    ENN=New,Pending,Sent];
                                                   OptionString=New,Pending,Sent }
    { 125 ;   ;Buy-from IC Partner Code;Code20    ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Buy-from IC Partner Code;
                                                              ENN=Buy-from IC Partner Code];
                                                   Editable=No }
    { 126 ;   ;Pay-to IC Partner Code;Code20      ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Pay-to IC Partner Code;
                                                              ENN=Pay-to IC Partner Code];
                                                   Editable=No }
    { 129 ;   ;IC Direction        ;Option        ;OnValidate=BEGIN
                                                                IF "IC Direction" = "IC Direction"::Incoming THEN
                                                                  "Send IC Document" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=IC Direction;
                                                              ENN=IC Direction];
                                                   OptionCaptionML=[ENU=Outgoing,Incoming;
                                                                    ENN=Outgoing,Incoming];
                                                   OptionString=Outgoing,Incoming }
    { 130 ;   ;Prepayment No.      ;Code20        ;CaptionML=[ENU=Prepayment No.;
                                                              ENN=Prepayment No.] }
    { 131 ;   ;Last Prepayment No. ;Code20        ;TableRelation="Purch. Inv. Header";
                                                   CaptionML=[ENU=Last Prepayment No.;
                                                              ENN=Last Prepayment No.] }
    { 132 ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=[ENU=Prepmt. Cr. Memo No.;
                                                              ENN=Prepmt. Cr. Memo No.] }
    { 133 ;   ;Last Prepmt. Cr. Memo No.;Code20   ;TableRelation="Purch. Cr. Memo Hdr.";
                                                   CaptionML=[ENU=Last Prepmt. Cr. Memo No.;
                                                              ENN=Last Prepmt. Cr. Memo No.] }
    { 134 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."Prepayment %" <> "Prepayment %" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Prepayment %"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Prepayment %;
                                                              ENN=Prepayment %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 135 ;   ;Prepayment No. Series;Code10       ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepayment No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series");
                                                                END;
                                                                TESTFIELD("Prepayment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series") THEN
                                                                  VALIDATE("Prepayment No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepayment No. Series;
                                                              ENN=Prepayment No. Series] }
    { 136 ;   ;Compress Prepayment ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Compress Prepayment;
                                                              ENN=Compress Prepayment] }
    { 137 ;   ;Prepayment Due Date ;Date          ;CaptionML=[ENU=Prepayment Due Date;
                                                              ENN=Prepayment Due Date] }
    { 138 ;   ;Prepmt. Cr. Memo No. Series;Code10 ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepmt. Cr. Memo No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series");
                                                                END;
                                                                TESTFIELD("Prepmt. Cr. Memo No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series") THEN
                                                                  VALIDATE("Prepmt. Cr. Memo No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepmt. Cr. Memo No. Series;
                                                              ENN=Prepmt. Cr. Memo No. Series] }
    { 139 ;   ;Prepmt. Posting Description;Text50 ;CaptionML=[ENU=Prepmt. Posting Description;
                                                              ENN=Prepmt. Posting Description] }
    { 142 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=[ENU=Prepmt. Pmt. Discount Date;
                                                              ENN=Prepmt. Pmt. Discount Date] }
    { 143 ;   ;Prepmt. Payment Terms Code;Code10  ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                PaymentTerms@1000 : Record 3;
                                                              BEGIN
                                                                IF ("Prepmt. Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Prepmt. Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Prepayment Due Date","Document Date");
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Prepayment Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Terms Code;
                                                              ENN=Prepmt. Payment Terms Code] }
    { 144 ;   ;Prepmt. Payment Discount %;Decimal ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Discount %;
                                                              ENN=Prepmt. Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=[ENU=Quote No.;
                                                              ENN=Quote No.];
                                                   Editable=No }
    { 160 ;   ;Job Queue Status    ;Option        ;OnLookup=VAR
                                                              JobQueueEntry@1000 : Record 472;
                                                            BEGIN
                                                              IF "Job Queue Status" = "Job Queue Status"::" " THEN
                                                                EXIT;
                                                              JobQueueEntry.ShowStatusMsg("Job Queue Entry ID");
                                                            END;

                                                   CaptionML=[ENU=Job Queue Status;
                                                              ENN=Job Queue Status];
                                                   OptionCaptionML=[ENU=" ,Scheduled for Posting,Error,Posting";
                                                                    ENN=" ,Scheduled for Posting,Error,Posting"];
                                                   OptionString=[ ,Scheduled for Posting,Error,Posting];
                                                   Editable=No }
    { 161 ;   ;Job Queue Entry ID  ;GUID          ;CaptionML=[ENU=Job Queue Entry ID;
                                                              ENN=Job Queue Entry ID];
                                                   Editable=No }
    { 165 ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document";
                                                   OnValidate=VAR
                                                                IncomingDocument@1000 : Record 130;
                                                              BEGIN
                                                                IF "Incoming Document Entry No." = xRec."Incoming Document Entry No." THEN
                                                                  EXIT;
                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  IncomingDocument.RemoveReferenceToWorkingDocument(xRec."Incoming Document Entry No.")
                                                                ELSE
                                                                  IncomingDocument.SetPurchDoc(Rec);
                                                              END;

                                                   CaptionML=[ENU=Incoming Document Entry No.;
                                                              ENN=Incoming Document Entry No.] }
    { 170 ;   ;Creditor No.        ;Code20        ;CaptionML=[ENU=Creditor No.;
                                                              ENN=Creditor No.];
                                                   Numeric=Yes }
    { 171 ;   ;Payment Reference   ;Code50        ;OnValidate=BEGIN
                                                                IF "Payment Reference" <> '' THEN
                                                                  TESTFIELD("Creditor No.");
                                                              END;

                                                   CaptionML=[ENU=Payment Reference;
                                                              ENN=Payment Reference];
                                                   Numeric=Yes }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.),
                                                                                                                 Document Type=FIELD(Document Type)));
                                                   CaptionML=[ENU=Invoice Discount Amount;
                                                              ENN=Invoice Discount Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5043;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Purchase Header Archive"."Version No." WHERE (Document Type=FIELD(Document Type),
                                                                                                                  No.=FIELD(No.),
                                                                                                                  Doc. No. Occurrence=FIELD(Doc. No. Occurrence)));
                                                   CaptionML=[ENU=No. of Archived Versions;
                                                              ENN=No. of Archived Versions];
                                                   Editable=No }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=[ENU=Doc. No. Occurrence;
                                                              ENN=Doc. No. Occurrence] }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   CaptionML=[ENU=Campaign No.;
                                                              ENN=Campaign No.] }
    { 5052;   ;Buy-from Contact No.;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1000 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Buy-from Contact No." <> xRec."Buy-from Contact No.") AND
                                                                   (xRec."Buy-from Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Buy-from Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");
                                                                    IF ("Buy-from Contact No." = '') AND ("Buy-from Vendor No." = '') THEN BEGIN
                                                                      IF NOT PurchLine.ISEMPTY THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Buy-from Contact No."));
                                                                      INIT;
                                                                      PurchSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Buy-from Vendor No." <> '') AND ("Buy-from Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Buy-from Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Buy-from Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Buy-from Vendor No.");
                                                                END;

                                                                UpdateBuyFromVend("Buy-from Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Buy-from Vendor No." <> '' THEN
                                                                IF Cont.GET("Buy-from Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Buy-from Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;

                                                              IF "Buy-from Contact No." <> '' THEN
                                                                IF Cont.GET("Buy-from Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Buy-from Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Buy-from Contact No.;
                                                              ENN=Buy-from Contact No.] }
    { 5053;   ;Pay-to Contact No.  ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Pay-to Contact No." <> xRec."Pay-to Contact No.") AND
                                                                   (xRec."Pay-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Pay-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    PurchLine.SETRANGE("Document Type","Document Type");
                                                                    PurchLine.SETRANGE("Document No.","No.");
                                                                    IF ("Pay-to Contact No." = '') AND ("Pay-to Vendor No." = '') THEN BEGIN
                                                                      IF NOT PurchLine.ISEMPTY THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Pay-to Contact No."));
                                                                      INIT;
                                                                      PurchSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Pay-to Contact No." := xRec."Pay-to Contact No.";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Pay-to Vendor No." <> '') AND ("Pay-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Pay-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Pay-to Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Pay-to Vendor No.");
                                                                END;

                                                                UpdatePayToVend("Pay-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1000 : Record 5050;
                                                              ContBusinessRelation@1001 : Record 5054;
                                                            BEGIN
                                                              IF "Pay-to Vendor No." <> '' THEN
                                                                IF Cont.GET("Pay-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
                                                                  ContBusinessRelation.SETRANGE("No.","Pay-to Vendor No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;

                                                              IF "Pay-to Contact No." <> '' THEN
                                                                IF Cont.GET("Pay-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Pay-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Pay-to Contact No.;
                                                              ENN=Pay-to Contact No.] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF NOT UserSetupMgt.CheckRespCenter(1,"Responsibility Center") THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter);

                                                                "Location Code" := UserSetupMgt.GetLocation(1,'',"Responsibility Center");
                                                                IF "Location Code" = '' THEN BEGIN
                                                                  IF InvtSetup.GET THEN
                                                                    "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";
                                                                END ELSE BEGIN
                                                                  IF Location.GET("Location Code") THEN;
                                                                  "Inbound Whse. Handling Time" := Location."Inbound Whse. Handling Time";
                                                                END;

                                                                UpdateShipToAddress;

                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::Vendor,"Pay-to Vendor No.",
                                                                  DATABASE::"Salesperson/Purchaser","Purchaser Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                IF xRec."Responsibility Center" <> "Responsibility Center" THEN BEGIN
                                                                  RecreatePurchLines(FIELDCAPTION("Responsibility Center"));
                                                                  "Assigned User ID" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Center] }
    { 5752;   ;Completely Received ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Purchase Line"."Completely Received" WHERE (Document Type=FIELD(Document Type),
                                                                                                                Document No.=FIELD(No.),
                                                                                                                Type=FILTER(<>' '),
                                                                                                                Location Code=FIELD(Location Filter)));
                                                   CaptionML=[ENU=Completely Received;
                                                              ENN=Completely Received];
                                                   Editable=No }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Posting from Whse. Ref.;
                                                              ENN=Posting from Whse. Ref.] }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=[ENU=Location Filter;
                                                              ENN=Location Filter] }
    { 5790;   ;Requested Receipt Date;Date        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Receipt Date" <> 0D THEN
                                                                  ERROR(
                                                                    Text034,
                                                                    FIELDCAPTION("Requested Receipt Date"),
                                                                    FIELDCAPTION("Promised Receipt Date"));

                                                                IF "Requested Receipt Date" <> xRec."Requested Receipt Date" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Requested Receipt Date"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Requested Receipt Date;
                                                              ENN=Requested Receipt Date] }
    { 5791;   ;Promised Receipt Date;Date         ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Receipt Date" <> xRec."Promised Receipt Date" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Promised Receipt Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Promised Receipt Date;
                                                              ENN=Promised Receipt Date] }
    { 5792;   ;Lead Time Calculation;DateFormula  ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                LeadTimeMgt.CheckLeadTimeIsNotNegative("Lead Time Calculation");

                                                                IF "Lead Time Calculation" <> xRec."Lead Time Calculation" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Lead Time Calculation"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 120=R;
                                                   CaptionML=[ENU=Lead Time Calculation;
                                                              ENN=Lead Time Calculation] }
    { 5793;   ;Inbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Inbound Whse. Handling Time" <> xRec."Inbound Whse. Handling Time" THEN
                                                                  UpdatePurchLines(FIELDCAPTION("Inbound Whse. Handling Time"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Inbound Whse. Handling Time;
                                                              ENN=Inbound Whse. Handling Time] }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENN=Date Filter] }
    { 5800;   ;Vendor Authorization No.;Code35    ;CaptionML=[ENU=Vendor Authorization No.;
                                                              ENN=Vendor Authorization No.] }
    { 5801;   ;Return Shipment No. ;Code20        ;CaptionML=[ENU=Return Shipment No.;
                                                              ENN=Return Shipment No.] }
    { 5802;   ;Return Shipment No. Series;Code10  ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Return Shipment No. Series" <> '' THEN BEGIN
                                                                  PurchSetup.GET;
                                                                  PurchSetup.TESTFIELD("Posted Return Shpt. Nos.");
                                                                  NoSeriesMgt.TestSeries(PurchSetup."Posted Return Shpt. Nos.","Return Shipment No. Series");
                                                                END;
                                                                TESTFIELD("Return Shipment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH PurchHeader DO BEGIN
                                                                PurchHeader := Rec;
                                                                PurchSetup.GET;
                                                                PurchSetup.TESTFIELD("Posted Return Shpt. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(PurchSetup."Posted Return Shpt. Nos.","Return Shipment No. Series") THEN
                                                                  VALIDATE("Return Shipment No. Series");
                                                                Rec := PurchHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Return Shipment No. Series;
                                                              ENN=Return Shipment No. Series] }
    { 5803;   ;Ship                ;Boolean       ;CaptionML=[ENU=Ship;
                                                              ENN=Ship] }
    { 5804;   ;Last Return Shipment No.;Code20    ;TableRelation="Return Shipment Header";
                                                   CaptionML=[ENU=Last Return Shipment No.;
                                                              ENN=Last Return Shipment No.];
                                                   Editable=No }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                IF NOT UserSetupMgt.CheckRespCenter2(1,"Responsibility Center","Assigned User ID") THEN
                                                                  ERROR(
                                                                    Text049,"Assigned User ID",
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetPurchasesFilter2("Assigned User ID"));
                                                              END;

                                                   CaptionML=[ENU=Assigned User ID;
                                                              ENN=Assigned User ID] }
    { 9001;   ;Pending Approvals   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Approval Entry" WHERE (Table ID=CONST(38),
                                                                                             Document Type=FIELD(Document Type),
                                                                                             Document No.=FIELD(No.),
                                                                                             Status=FILTER(Open|Created)));
                                                   CaptionML=[ENU=Pending Approvals;
                                                              ENN=Pending Approvals] }
    { 13701;  ;Assessee Code       ;Code10        ;TableRelation="Assessee Code";
                                                   OnValidate=BEGIN
                                                                PurchLine.SETRANGE("Document Type","Document Type");
                                                                PurchLine.SETRANGE("Document No.","No.");
                                                                IF PurchLine.FIND('-') THEN BEGIN
                                                                  REPEAT
                                                                    PurchLine."Assessee Code" := "Assessee Code";
                                                                    PurchLine.MODIFY;
                                                                  UNTIL PurchLine.NEXT = 0;
                                                                  MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Assessee Code;
                                                              ENN=Assessee Code] }
    { 13712;  ;Excise Bus. Posting Group;Code10   ;TableRelation="Excise Bus. Posting Group";
                                                   CaptionML=[ENU=Excise Bus. Posting Group;
                                                              ENN=Excise Bus. Posting Group] }
    { 13716;  ;Amount to Vendor    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Purchase Line"."Amount To Vendor" WHERE (Document Type=FIELD(Document Type),
                                                                                                             Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount to Vendor;
                                                              ENN=Amount to Vendor];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13723;  ;Form Code           ;Code10        ;TableRelation=IF (C Form=CONST(No)) "State Forms"."Form Code" WHERE (State=FIELD(State),
                                                                                                                        Transit Document=CONST(No),
                                                                                                                        C Form=CONST(No))
                                                                                                                        ELSE IF (C Form=CONST(Yes)) "Form Codes".Code WHERE (C Form=CONST(Yes));
                                                   OnValidate=BEGIN
                                                                UpdatePurchLines(FIELDCAPTION("Form Code"),CurrFieldNo <> 0);
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF "C Form" THEN
                                                                FormCodes.LookupFormCodes("Form Code")
                                                              ELSE
                                                                StateForms.LookupStateForm(State,"Form Code");
                                                              VALIDATE("Form Code");
                                                            END;

                                                   CaptionML=[ENU=Form Code;
                                                              ENN=Form Code] }
    { 13724;  ;Form No.            ;Code10        ;TableRelation=IF (C Form=CONST(No)) "Tax Forms Details"."Form No." WHERE (Form Code=FIELD(Form Code),
                                                                                                                             Issued=CONST(No),
                                                                                                                             State=FIELD(State))
                                                                                                                             ELSE IF (C Form=CONST(Yes)) "Tax Forms Details"."Form No." WHERE (Form Code=FIELD(Form Code),
                                                                                                                                                                                               Issued=CONST(No));
                                                   OnValidate=VAR
                                                                SalesFormsDetails@1280000 : Record 13757;
                                                              BEGIN
                                                                SalesFormsDetails.SETRANGE("Form Code","Form Code");
                                                                SalesFormsDetails.SETRANGE("Form No.","Form No.");
                                                                SalesFormsDetails.SETRANGE(State,State);
                                                                IF SalesFormsDetails.FINDFIRST THEN BEGIN
                                                                  SalesFormsDetails.Issued := TRUE;
                                                                  SalesFormsDetails.MODIFY;
                                                                END;
                                                                IF xRec."Form No." <> "Form No." THEN BEGIN
                                                                  SalesFormsDetails.SETRANGE("Form Code","Form Code");
                                                                  SalesFormsDetails.SETRANGE("Form No.",xRec."Form No.");
                                                                  SalesFormsDetails.SETRANGE(State,State);
                                                                  IF SalesFormsDetails.FINDFIRST THEN BEGIN
                                                                    SalesFormsDetails.Issued := FALSE;
                                                                    SalesFormsDetails.MODIFY;
                                                                  END;
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              IF "C Form" THEN
                                                                TaxFormDetails.LookupTaxFormDetails("Form Code","Form No.")
                                                              ELSE
                                                                TaxFormDetails.LookupStateTaxFormDetails(State,"Form Code","Form No.")
                                                            END;

                                                   CaptionML=[ENU=Form No.;
                                                              ENN=Form No.] }
    { 13759;  ;Transit Document    ;Boolean       ;CaptionML=[ENU=Transit Document;
                                                              ENN=Transit Document] }
    { 13760;  ;LC No.              ;Code20        ;TableRelation="LC Detail".No. WHERE (Transaction Type=CONST(Purchase),
                                                                                        Issued To/Received From=FIELD(Pay-to Vendor No.),
                                                                                        Closed=CONST(No),
                                                                                        Released=CONST(Yes));
                                                   OnValidate=VAR
                                                                LCDetail@1280000 : Record 16300;
                                                                Text13700@1280001 : TextConst 'ENU=The LC which you have selected is Foreign type you cannot utilise for this order.;ENN=The LC which you have selected is Foreign type you cannot utilise for this order.';
                                                              BEGIN
                                                                IF "LC No." <> '' THEN BEGIN
                                                                  LCDetail.GET("LC No.");
                                                                  IF LCDetail."Type of LC" = LCDetail."Type of LC"::Foreign THEN
                                                                    IF "Currency Code" = '' THEN
                                                                      ERROR(Text13700);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=LC No.;
                                                              ENN=LC No.] }
    { 13761;  ;State               ;Code10        ;TableRelation=State;
                                                   CaptionML=[ENU=State;
                                                              ENN=State] }
    { 13790;  ;Structure           ;Code10        ;TableRelation="Structure Header";
                                                   OnValidate=VAR
                                                                StrDetails@1280000 : Record 13793;
                                                                StrOrderDetails@1280001 : Record 13794;
                                                                StrOrderLines@1280002 : Record 13795;
                                                                PurchaseLines@1280003 : Record 39;
                                                              BEGIN
                                                                IF (xRec.Structure <> Structure) AND AlreadyRecieved THEN
                                                                  ERROR(StructureErr);

                                                                StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                                                                StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Purchase);
                                                                StrOrderDetails.SETRANGE("Document Type","Document Type");
                                                                StrOrderDetails.SETRANGE("Document No.","No.");
                                                                IF StrOrderDetails.FINDFIRST THEN
                                                                  StrOrderDetails.DELETEALL;

                                                                StrOrderLines.SETCURRENTKEY("Document Type","Document No.",Type);
                                                                StrOrderLines.SETRANGE(Type,StrOrderLines.Type::Purchase);
                                                                StrOrderLines.SETRANGE("Document Type","Document Type");
                                                                StrOrderLines.SETRANGE("Document No.","No.");
                                                                IF StrOrderLines.FINDFIRST THEN
                                                                  StrOrderLines.DELETEALL;

                                                                PurchaseLines.SETRANGE("Document Type","Document Type");
                                                                PurchaseLines.SETRANGE("Document No.","No.");
                                                                PurchaseLines.SETFILTER(Type,'<>%1',PurchaseLines.Type::" ");
                                                                IF PurchaseLines.FIND('-') THEN
                                                                  REPEAT
                                                                    PurchaseLines."Service Tax Base" := 0;
                                                                    PurchaseLines."Charges To Vendor" := 0;
                                                                    PurchaseLines."Amount Added to Excise Base" := 0;
                                                                    PurchaseLines."Amount Added to Tax Base" := 0;
                                                                    PurchaseLines."Excise Amount" := 0;
                                                                    PurchaseLines."VAT Base Amount" := 0;
                                                                    PurchaseLines.GetCurrentPurchHeader(Rec);
                                                                    PurchaseLines.VALIDATE("Tax Liable",FALSE);
                                                                    PurchaseLines.MODIFY;
                                                                  UNTIL PurchaseLines.NEXT = 0;
                                                                GLSetup.GET;
                                                                PoT := FALSE;

                                                                StrDetails.SETRANGE(Code,Structure);
                                                                IF StrDetails.FIND('-') THEN
                                                                  REPEAT
                                                                    StrOrderDetails.Type := StrOrderDetails.Type::Purchase;
                                                                    StrOrderDetails."Document Type" := "Document Type";
                                                                    StrOrderDetails."Document No." := "No.";
                                                                    StrOrderDetails."Structure Code" := Structure;
                                                                    StrOrderDetails."Calculation Order" := StrDetails."Calculation Order";
                                                                    StrOrderDetails."Tax/Charge Type" := StrDetails.Type;
                                                                    StrOrderDetails."Tax/Charge Group" := StrDetails."Tax/Charge Group";
                                                                    StrOrderDetails."Tax/Charge Code" := StrDetails."Tax/Charge Code";
                                                                    StrOrderDetails."Calculation Type" := StrDetails."Calculation Type";
                                                                    StrOrderDetails."Calculation Value" := StrDetails."Calculation Value";
                                                                    StrOrderDetails."Quantity Per" := StrDetails."Quantity Per";
                                                                    StrOrderDetails."Loading on Inventory" := StrDetails."Loading on Inventory";
                                                                    StrOrderDetails."% Loading on Inventory" := StrDetails."% Loading on Inventory";
                                                                    StrOrderDetails."Payable to Third Party" := StrDetails."Payable to Third Party";
                                                                    StrOrderDetails."Account No." := StrDetails."Account No.";
                                                                    StrOrderDetails."Base Formula" := StrDetails."Base Formula";
                                                                    StrOrderDetails."Include Base" := StrDetails."Include Base";
                                                                    StrOrderDetails."Include Line Discount" := StrDetails."Include Line Discount";
                                                                    StrOrderDetails."Include Invoice Discount" := StrDetails."Include Invoice Discount";
                                                                    StrOrderDetails."Charge Basis" := StrDetails."Charge Basis";
                                                                    StrOrderDetails."Header/Line" := StrDetails."Header/Line";
                                                                    StrOrderDetails."Available for VAT Input" := StrDetails."Available for VAT Input";
                                                                    IF StrDetails.Type = StrDetails.Type::Excise THEN
                                                                      CVD := StrDetails.CVD;
                                                                    StrOrderDetails.CVD := StrDetails.CVD;
                                                                    StrOrderDetails."CVD Payable to Third Party" := StrDetails."CVD Payable to Third Party";
                                                                    StrOrderDetails."CVD Third Party Code" := StrDetails."CVD Third Party Code";
                                                                    StrOrderDetails."Include in TDS Base" := StrDetails."Include in TDS Base";
                                                                    StrOrderDetails."Inc. GST in TDS Base" := StrDetails."Inc. GST in TDS Base";
                                                                    IF NOT PoT THEN BEGIN
                                                                      IF (StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Service Tax" ) AND
                                                                         NOT "Input Service Distribution"
                                                                      THEN
                                                                        PoT := GLSetup.PoT;
                                                                    END;
                                                                    StrOrderDetails.INSERT;
                                                                  UNTIL StrDetails.NEXT = 0;

                                                                IF "Applies-to Doc. No." = '' THEN BEGIN
                                                                  StrDetails.SETRANGE(Type,StrDetails.Type::"Service Tax");
                                                                  IF StrDetails.FINDFIRST THEN BEGIN
                                                                    GLSetup.GET;
                                                                    "Service Tax Rounding Precision" := GLSetup."Service Tax Rounding Precision";
                                                                    "Service Tax Rounding Type" := GLSetup."Service Tax Rounding Type";
                                                                  END ELSE BEGIN
                                                                    "Service Tax Rounding Precision" := 0;
                                                                    "Service Tax Rounding Type" := "Service Tax Rounding Type"::Nearest;
                                                                  END ;
                                                                END;

                                                                IF GSTManagement.IsGSTApplicable(Structure) THEN
                                                                  IF "Invoice Type" = "Invoice Type"::"Non-GST" THEN
                                                                    ERROR(NonGSTInvTypeErr);
                                                              END;

                                                   CaptionML=[ENU=Structure;
                                                              ENN=Structure] }
    { 16360;  ;Subcontracting      ;Boolean       ;CaptionML=[ENU=Subcontracting;
                                                              ENN=Subcontracting] }
    { 16371;  ;Subcon. Order No.   ;Code10        ;CaptionML=[ENU=Subcon. Order No.;
                                                              ENN=Subcon. Order No.] }
    { 16372;  ;Subcon. Order Line No.;Integer     ;CaptionML=[ENU=Subcon. Order Line No.;
                                                              ENN=Subcon. Order Line No.] }
    { 16373;  ;SubConPostLine      ;Integer       ;CaptionML=[ENU=SubConPostLine;
                                                              ENN=SubConPostLine] }
    { 16375;  ;Vendor Shipment Date;Date          ;CaptionML=[ENU=Vendor Shipment Date;
                                                              ENN=Vendor Shipment Date] }
    { 16376;  ;C Form              ;Boolean       ;CaptionML=[ENU=C Form;
                                                              ENN=C Form] }
    { 16377;  ;Consignment Note No.;Code20        ;CaptionML=[ENU=Consignment Note No.;
                                                              ENN=Consignment Note No.] }
    { 16378;  ;Declaration Form (GTA);Boolean     ;CaptionML=[ENU=Declaration Form (GTA);
                                                              ENN=Declaration Form (GTA)] }
    { 16379;  ;Service Type (Rev. Chrg.);Option   ;CaptionML=[ENU=Service Type (Rev. Chrg.);
                                                              ENN=Service Type (Rev. Chrg.)];
                                                   OptionCaptionML=[ENU=" ,Inward,Outward Stock Transfer,Outward Input Service,Outward";
                                                                    ENN=" ,Inward,Outward Stock Transfer,Outward Input Service,Outward"];
                                                   OptionString=[ ,Inward,Outward Stock Transfer,Outward Input Service,Outward] }
    { 16500;  ;Manufacturer E.C.C. No.;Code20     ;CaptionML=[ENU=Manufacturer E.C.C. No.;
                                                              ENN=Manufacturer E.C.C. No.] }
    { 16501;  ;Manufacturer Name   ;Text30        ;CaptionML=[ENU=Manufacturer Name;
                                                              ENN=Manufacturer Name] }
    { 16502;  ;Manufacturer Address;Text30        ;CaptionML=[ENU=Manufacturer Address;
                                                              ENN=Manufacturer Address] }
    { 16503;  ;Trading             ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                PurchSetup.GET;
                                                                InitRecord;
                                                                PurchLine2.RESET;
                                                                PurchLine2.SETRANGE("Document Type","Document Type");
                                                                PurchLine2.SETRANGE("Document No.","No.");
                                                                PurchLine2.SETRANGE("Excise Loading on Inventory",TRUE);
                                                                IF PurchLine2.FINDFIRST THEN
                                                                  ERROR(Text16500);
                                                              END;

                                                   CaptionML=[ENU=Trading;
                                                              ENN=Trading] }
    { 16504;  ;Transaction No. Serv. Tax;Integer  ;CaptionML=[ENU=Transaction No. Serv. Tax;
                                                              ENN=Transaction No. Serv. Tax] }
    { 16505;  ;CVD                 ;Boolean       ;CaptionML=[ENU=CVD;
                                                              ENN=CVD] }
    { 16506;  ;Input Service Distribution;Boolean ;OnValidate=BEGIN
                                                                IF PoT THEN
                                                                  ERROR(Text16502);
                                                              END;

                                                   CaptionML=[ENU=Input Service Distribution;
                                                              ENN=Input Service Distribution] }
    { 16522;  ;Service Tax Rounding Precision;Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Service Tax Rounding Precision;
                                                              ENN=Service Tax Rounding Precision] }
    { 16523;  ;Service Tax Rounding Type;Option   ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Service Tax Rounding Type;
                                                              ENN=Service Tax Rounding Type];
                                                   OptionCaptionML=[ENU=Nearest,Up,Down;
                                                                    ENN=Nearest,Up,Down];
                                                   OptionString=Nearest,Up,Down }
    { 16524;  ;PoT                 ;Boolean       ;OnValidate=BEGIN
                                                                IF "Input Service Distribution" THEN
                                                                  ERROR(Text16502);
                                                              END;

                                                   CaptionML=[ENU=PoT;
                                                              ENN=PoT] }
    { 16601;  ;Nature of Supply    ;Option        ;CaptionML=[ENU=Nature of Supply;
                                                              ENN=Nature of Supply];
                                                   OptionCaptionML=[ENU=B2B,B2C;
                                                                    ENN=B2B,B2C];
                                                   OptionString=B2B,B2C;
                                                   Editable=No }
    { 16602;  ;Bill of Entry No.   ;Text20        ;CaptionML=[ENU=Bill of Entry No.;
                                                              ENN=Bill of Entry No.] }
    { 16603;  ;Bill of Entry Date  ;Date          ;CaptionML=[ENU=Bill of Entry Date;
                                                              ENN=Bill of Entry Date] }
    { 16604;  ;Bill of Entry Value ;Decimal       ;CaptionML=[ENU=Bill of Entry Value;
                                                              ENN=Bill of Entry Value];
                                                   MinValue=0 }
    { 16609;  ;GST Vendor Type     ;Option        ;OnValidate=VAR
                                                                Vendor@1500000 : Record 23;
                                                              BEGIN
                                                                Vendor.GET("Buy-from Vendor No.");
                                                                TESTFIELD("GST Vendor Type",Vendor."GST Vendor Type");
                                                                IF ("GST Vendor Type" = "GST Vendor Type"::Registered) OR ("GST Vendor Type" = "GST Vendor Type"::Composite) THEN
                                                                   Vendor.TESTFIELD("GST Registration No.");
                                                              END;

                                                   CaptionML=[ENU=GST Vendor Type;
                                                              ENN=GST Vendor Type];
                                                   OptionCaptionML=[ENU=" ,Registered,Composite,Unregistered,Import,Exempted,SEZ";
                                                                    ENN=" ,Registered,Composite,Unregistered,Import,Exempted,SEZ"];
                                                   OptionString=[ ,Registered,Composite,Unregistered,Import,Exempted,SEZ];
                                                   Editable=No }
    { 16610;  ;Associated Enterprises;Boolean     ;CaptionML=[ENU=Associated Enterprises;
                                                              ENN=Associated Enterprises];
                                                   Editable=No }
    { 16611;  ;Invoice Type        ;Option        ;OnValidate=BEGIN
                                                                IF "Invoice Type" = "Invoice Type"::"Non-GST" THEN
                                                                  IF GSTManagement.IsGSTApplicable(Structure) THEN
                                                                    ERROR(NonGSTInvTypeErr);
                                                                IF "Invoice Type" = "Invoice Type"::"Self Invoice" THEN
                                                                  IF NOT ("GST Vendor Type" = "GST Vendor Type"::Unregistered) THEN
                                                                    ERROR(SelfInvoiceTypeErr);
                                                                  InitRecordGST;
                                                                IF "Invoice Type" = "Invoice Type"::Supplementary THEN
                                                                  SetSupplementaryInLine("Document Type","No.",TRUE)
                                                                ELSE
                                                                  SetSupplementaryInLine("Document Type","No.",FALSE);
                                                              END;

                                                   CaptionML=[ENU=Invoice Type;
                                                              ENN=Invoice Type];
                                                   OptionCaptionML=[ENU=" ,Self Invoice,Debit Note,Supplementary,Non-GST";
                                                                    ENN=" ,Self Invoice,Debit Note,Supplementary,Non-GST"];
                                                   OptionString=[ ,Self Invoice,Debit Note,Supplementary,Non-GST] }
    { 16612;  ;GST Rounding Precision;Decimal     ;CaptionML=[ENU=GST Rounding Precision;
                                                              ENN=GST Rounding Precision] }
    { 16613;  ;GST Rounding Type   ;Option        ;CaptionML=[ENU=GST Rounding Type;
                                                              ENN=GST Rounding Type];
                                                   OptionCaptionML=[ENU=Nearest,Up,Down;
                                                                    ENN=Nearest,Up,Down];
                                                   OptionString=Nearest,Up,Down }
    { 16627;  ;GST Input Service Distribution;Boolean;
                                                   CaptionML=[ENU=GST Input Service Distribution;
                                                              ENN=GST Input Service Distribution];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Document Type,No.                       ;Clustered=Yes }
    {    ;No.,Document Type                        }
    {    ;Document Type,Buy-from Vendor No.        }
    {    ;Document Type,Pay-to Vendor No.          }
    {    ;Buy-from Vendor No.                      }
    {    ;Incoming Document Entry No.              }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text003@1003 : TextConst 'ENU=You cannot rename a %1.;ENN=You cannot rename a %1.';
      Text004@1004 : TextConst 'ENU=Do you want to change %1?;ENN=Do you want to change %1?';
      Text005@1005 : TextConst 'ENU=You cannot reset %1 because the document still has one or more lines.;ENN=You cannot reset %1 because the document still has one or more lines.';
      YouCannotChangeFieldErr@1006 : TextConst '@@@=%1 - fieldcaption;ENU=You cannot change %1 because the order is associated with one or more sales orders.;ENN=You cannot change %1 because the order is associated with one or more sales orders.';
      Text007@1007 : TextConst 'ENU=%1 is greater than %2 in the %3 table.\;ENN=%1 is greater than %2 in the %3 table.\';
      Text008@1008 : TextConst 'ENU=Confirm change?;ENN=Confirm change?';
      Text009@1009 : TextConst 'ENU="Deleting this document will cause a gap in the number series for receipts. ";ENN="Deleting this document will cause a gap in the number series for receipts. "';
      Text010@1010 : TextConst 'ENU=An empty receipt %1 will be created to fill this gap in the number series.\\;ENN=An empty receipt %1 will be created to fill this gap in the number series.\\';
      Text011@1011 : TextConst 'ENU=Do you want to continue?;ENN=Do you want to continue?';
      Text012@1012 : TextConst 'ENU="Deleting this document will cause a gap in the number series for posted invoices. ";ENN="Deleting this document will cause a gap in the number series for posted invoices. "';
      Text013@1013 : TextConst 'ENU=An empty posted invoice %1 will be created to fill this gap in the number series.\\;ENN=An empty posted invoice %1 will be created to fill this gap in the number series.\\';
      Text014@1014 : TextConst 'ENU="Deleting this document will cause a gap in the number series for posted credit memos. ";ENN="Deleting this document will cause a gap in the number series for posted credit memos. "';
      Text015@1015 : TextConst 'ENU=An empty posted credit memo %1 will be created to fill this gap in the number series.\\;ENN=An empty posted credit memo %1 will be created to fill this gap in the number series.\\';
      Text016@1016 : TextConst 'ENU=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created.\\;ENN=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created.\\';
      Text018@1017 : TextConst 'ENU=You must delete the existing purchase lines before you can change %1.;ENN=You must delete the existing purchase lines before you can change %1.';
      Text019@1018 : TextConst 'ENU=You have changed %1 on the purchase header, but it has not been changed on the existing purchase lines.\;ENN=You have changed %1 on the purchase header, but it has not been changed on the existing purchase lines.\';
      Text020@1019 : TextConst 'ENU=You must update the existing purchase lines manually.;ENN=You must update the existing purchase lines manually.';
      Text021@1020 : TextConst 'ENU=The change may affect the exchange rate used on the price calculation of the purchase lines.;ENN=The change may affect the exchange rate used on the price calculation of the purchase lines.';
      Text022@1021 : TextConst 'ENU=Do you want to update the exchange rate?;ENN=Do you want to update the exchange rate?';
      Text023@1022 : TextConst 'ENU=You cannot delete this document. Your identification is set up to process from %1 %2 only.;ENN=You cannot delete this document. Your identification is set up to process from %1 %2 only.';
      Text025@1024 : TextConst 'ENU="You have modified the %1 field. Note that the recalculation of VAT may cause penny differences, so you must check the amounts afterwards. ";ENN="You have modified the %1 field. Note that the recalculation of VAT may cause penny differences, so you must check the amounts afterwards. "';
      Text027@1026 : TextConst 'ENU=Do you want to update the %2 field on the lines to reflect the new value of %1?;ENN=Do you want to update the %2 field on the lines to reflect the new value of %1?';
      Text028@1027 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.;ENN=Your identification is set up to process from %1 %2 only.';
      Text029@1028 : TextConst 'ENU="Deleting this document will cause a gap in the number series for return shipments. ";ENN="Deleting this document will cause a gap in the number series for return shipments. "';
      Text030@1029 : TextConst 'ENU=An empty return shipment %1 will be created to fill this gap in the number series.\\;ENN=An empty return shipment %1 will be created to fill this gap in the number series.\\';
      Text032@1031 : TextConst 'ENU=You have modified %1.\\;ENN=You have modified %1.\\';
      Text033@1032 : TextConst 'ENU=Do you want to update the lines?;ENN=Do you want to update the lines?';
      PurchSetup@1033 : Record 312;
      GLSetup@1034 : Record 98;
      GLAcc@1035 : Record 15;
      PurchLine@1036 : Record 39;
      xPurchLine@1080 : Record 39;
      VendLedgEntry@1037 : Record 25;
      Vend@1038 : Record 23;
      PaymentTerms@1039 : Record 3;
      PaymentMethod@1040 : Record 289;
      CurrExchRate@1041 : Record 330;
      PurchHeader@1042 : Record 38;
      PurchCommentLine@1043 : Record 43;
      ShipToAddr@1044 : Record 222;
      Cust@1045 : Record 18;
      CompanyInfo@1046 : Record 79;
      PostCode@1047 : Record 225;
      OrderAddr@1048 : Record 224;
      BankAcc@1049 : Record 270;
      PurchRcptHeader@1050 : Record 120;
      PurchInvHeader@1051 : Record 122;
      PurchCrMemoHeader@1052 : Record 124;
      ReturnShptHeader@1053 : Record 6650;
      PurchInvHeaderPrepmt@1090 : Record 122;
      PurchCrMemoHeaderPrepmt@1089 : Record 124;
      GenBusPostingGrp@1054 : Record 250;
      GenJnILine@1055 : Record 81;
      RespCenter@1056 : Record 5714;
      Location@1057 : Record 14;
      WhseRequest@1058 : Record 5765;
      InvtSetup@1059 : Record 313;
      NoSeriesMgt@1060 : Codeunit 396;
      TransferExtendedText@1061 : Codeunit 378;
      GenJnlApply@1062 : Codeunit 225;
      PurchPost@1063 : Codeunit 90;
      VendEntrySetApplID@1064 : Codeunit 111;
      DimMgt@1065 : Codeunit 408;
      ApprovalsMgmt@1082 : Codeunit 1535;
      UserSetupMgt@1066 : Codeunit 5700;
      GSTApplicationManagement@1500012 : Codeunit 16403;
      GSTManagement@1500010 : Codeunit 16401;
      VendEntryEdit@1500016 : Codeunit 113;
      LeadTimeMgt@1000 : Codeunit 5404;
      ApplyVendEntries@1068 : Page 233;
      CurrencyDate@1069 : Date;
      HideValidationDialog@1070 : Boolean;
      Confirmed@1071 : Boolean;
      Text034@1072 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;ENN=You cannot change the %1 when the %2 has been filled in.';
      Text037@1076 : TextConst 'ENU=Contact %1 %2 is not related to vendor %3.;ENN=Contact %1 %2 is not related to vendor %3.';
      Text038@1075 : TextConst 'ENU=Contact %1 %2 is related to a different company than vendor %3.;ENN=Contact %1 %2 is related to a different company than vendor %3.';
      Text039@1077 : TextConst 'ENU=Contact %1 %2 is not related to a vendor.;ENN=Contact %1 %2 is not related to a vendor.';
      SkipBuyFromContact@1030 : Boolean;
      SkipPayToContact@1078 : Boolean;
      Text040@1079 : TextConst 'ENU="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8.";ENN="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8."';
      Text041@1182 : TextConst 'ENU=The purchase %1 %2 has item tracking. Do you want to delete it anyway?;ENN=The purchase %1 %2 has item tracking. Do you want to delete it anyway?';
      Text042@1084 : TextConst 'ENU=You must cancel the approval process if you wish to change the %1.;ENN=You must cancel the approval process if you wish to change the %1.';
      Text045@1086 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENN=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text046@1087 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENN=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text049@1092 : TextConst 'ENU=%1 is set up to process from %2 %3 only.;ENN=%1 is set up to process from %2 %3 only.';
      Text050@1067 : TextConst 'ENU=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\;ENN=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\';
      Text051@1025 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?;ENN=You may have changed a dimension.\\Do you want to update the lines?';
      Text052@1091 : TextConst 'ENU=The %1 field on the purchase order %2 must be the same as on sales order %3.;ENN=The %1 field on the purchase order %2 must be the same as on sales order %3.';
      NameAddressDetails@1093 : Text[512];
      DropShptNameAddressDetails@1094 : Text[512];
      SpecOrderNameAddressDetails@1121 : Text[512];
      UpdateDocumentDate@1120 : Boolean;
      Text053@1095 : TextConst 'ENU=There are unposted prepayment amounts on the document of type %1 with the number %2.;ENN=There are unposted prepayment amounts on the document of type %1 with the number %2.';
      Text054@1096 : TextConst 'ENU=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.;ENN=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.';
      PostedGateEntryLine@1500000 : Record 16556;
      PostedGateEntryLineList@1500001 : Page 16480;
      PurchHeader2@1500002 : Record 38;
      GateEntryAttachment@1500004 : Record 16557;
      GateEntryAttachment2@1500005 : Record 16557;
      PurchLine2@1500003 : Record 39;
      Text16500@1500006 : TextConst 'ENU=Trading can''t be true when Excise Loading On Inventory on lines has been checked.;ENN=Trading can''t be true when Excise Loading On Inventory on lines has been checked.';
      StateForms@1500007 : Record 13767;
      FormCodes@1500008 : Record 13756;
      TaxFormDetails@1500009 : Record 13757;
      Text16502@1500011 : TextConst 'ENU=You cannot use point of taxation when the Input Service Distributor field is selected. The PoT field must be cleared.;ENN=You cannot use point of taxation when the Input Service Distributor field is selected. The PoT field must be cleared.';
      DeferralLineQst@1155 : TextConst '@@@="%1=The posting date on the document.";ENU=You have changed the %1 on the purchase header, do you want to update the deferral schedules for the lines with this date?;ENN=You have changed the %1 on the purchase header, do you want to update the deferral schedules for the lines with this date?';
      ChangeCurrencyQst@1073 : TextConst 'ENU=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created. You may need to update the price information manually.\\Do you want to change %1?;ENN=If you change %1, the existing purchase lines will be deleted and new purchase lines based on the new information in the header will be created. You may need to update the price information manually.\\Do you want to change %1?';
      PostedDocsToPrintCreatedMsg@1081 : TextConst 'ENU=One or more documents have been posted during deletion, which you can print from the related posted document.;ENN=One or more documents have been posted during deletion, which you can print from the related posted document.';
      SelfInvoiceTypeErr@1500013 : TextConst 'ENU=GST Vendor Type must be Unregistered for Invoice Type : Self-Invoice.;ENN=GST Vendor Type must be Unregistered for Invoice Type : Self-Invoice.';
      NonGSTInvTypeErr@1500014 : TextConst 'ENU=You cannot enter Non-GST Invoice Type for any GST document.;ENN=You cannot enter Non-GST Invoice Type for any GST document.';
      TransactionType2@1500015 : 'Purchase,Sale';
      StructureErr@1500017 : TextConst 'ENU=Structure code cannot be changed.;ENN=Structure code cannot be changed.';

    LOCAL PROCEDURE InitInsert@41();
    BEGIN
      IF "No." = '' THEN BEGIN
        TestNoSeries;
        NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
      END;
      CompanyInfo.GET;
      Trading := CompanyInfo."Trading Co.";
      InitRecord;
    END;

    LOCAL PROCEDURE SkipInitialization@42() : Boolean;
    BEGIN
      IF "No." = '' THEN
        EXIT(FALSE);

      IF "Buy-from Vendor No." = '' THEN
        EXIT(FALSE);

      IF xRec."Document Type" <> "Document Type" THEN
        EXIT(FALSE);

      IF GETFILTER("Buy-from Vendor No.") <> '' THEN
        IF GETRANGEMIN("Buy-from Vendor No.") = GETRANGEMAX("Buy-from Vendor No.") THEN
          IF "Buy-from Vendor No." = GETRANGEMIN("Buy-from Vendor No.") THEN
            EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE InitRecord@10();
    BEGIN
      PurchSetup.GET;

      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order,"Document Type"::"Blanket Order":
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
            NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
            IF "Location Code" <> '' THEN BEGIN
              Location.GET("Location Code");
              IF Location."Purch. Invoice Nos." <> '' THEN
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Purch. Invoice Nos.");
              IF Location."Purch. Receipt Nos." <> '' THEN
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Purch. Receipt Nos.");
            END;
            IF "Document Type" = "Document Type"::Order THEN BEGIN
              NoSeriesMgt.SetDefaultSeries("Prepayment No. Series",PurchSetup."Posted Prepmt. Inv. Nos.");
              NoSeriesMgt.SetDefaultSeries("Prepmt. Cr. Memo No. Series",PurchSetup."Posted Prepmt. Cr. Memo Nos.");
              IF "Invoice Type" = "Invoice Type"::"Self Invoice" THEN
                "Posting No. Series" := PurchSetup."Posted Purch. Inv.(Unreg)";
            END;
            IF Trading THEN BEGIN
              IF "Location Code" <> '' THEN BEGIN
                IF Location."Purh. Invoice Nos. (Trading)" <> '' THEN
                  "Posting No. Series" := Location."Purh. Invoice Nos. (Trading)"
                ELSE
                  "Posting No. Series" := PurchSetup."Posted Invoice Nos. (Trading)";
                IF Location."Purch. Rcpt. Nos. (Trading)" <> '' THEN
                  "Receiving No. Series" := Location."Purch. Rcpt. Nos. (Trading)"
                ELSE
                  "Receiving No. Series" := PurchSetup."Posted Purch. Rcpt. (Trading)";
              END ELSE BEGIN
                "Posting No. Series" := PurchSetup."Posted Invoice Nos. (Trading)";
                "Receiving No. Series" := PurchSetup."Posted Purch. Rcpt. (Trading)";
                IF "Invoice Type" = "Invoice Type"::"Self Invoice" THEN
                  "Posting No. Series" := PurchSetup."Posted Purch. Inv.(Unreg)";
              END;
            END;
          END;
        "Document Type"::Invoice:
          BEGIN
            IF NOT Trading THEN BEGIN
              IF ("No. Series" <> '') AND
                (PurchSetup."Invoice Nos." = PurchSetup."Posted Invoice Nos.")
            THEN
                "Posting No. Series" := "No. Series"
              ELSE
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
            IF PurchSetup."Receipt on Invoice" THEN
              NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
            END;
            IF Trading THEN BEGIN
              IF "Location Code" <> '' THEN BEGIN
                Location.GET("Location Code");
                IF Location."Purh. Invoice Nos. (Trading)" <> '' THEN
                  "Posting No. Series" := Location."Purh. Invoice Nos. (Trading)"
                ELSE
                  "Posting No. Series" := PurchSetup."Posted Invoice Nos. (Trading)";
                IF PurchSetup."Receipt on Invoice" THEN BEGIN
                  IF Location."Purch. Rcpt. Nos. (Trading)" <> '' THEN
                    "Receiving No. Series" := Location."Purch. Rcpt. Nos. (Trading)"
                  ELSE
                    "Receiving No. Series" := PurchSetup."Posted Purch. Rcpt. (Trading)";
                END;
              END ELSE BEGIN
                "Posting No. Series" := PurchSetup."Posted Invoice Nos. (Trading)";
                IF PurchSetup."Receipt on Invoice" THEN
                  "Receiving No. Series" := PurchSetup."Posted Purch. Rcpt. (Trading)";
              END;
            END;
          END;
        "Document Type"::"Return Order":
          BEGIN
            IF NOT Trading THEN BEGIN
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");
              NoSeriesMgt.SetDefaultSeries("Return Shipment No. Series",PurchSetup."Posted Return Shpt. Nos.");
            END;
            IF Trading THEN BEGIN
              IF "Location Code" <> '' THEN BEGIN
                Location.GET("Location Code");
                IF Location."Purch Cr. Memo Nos. (Trading)" <> '' THEN
                  "Posting No. Series" := Location."Purch Cr. Memo Nos. (Trading)"
                ELSE
                  "Posting No. Series" := PurchSetup."Posted Purch Cr. Memo(Trading)";
                IF Location."Purch. Rcpt. Nos. (Trading)" <> '' THEN
                  "Return Shipment No. Series" := Location."Purch. Ret Shpt Nos. (Trading)"
                ELSE
                  "Return Shipment No. Series" := PurchSetup."Posted Ret Shpt Nos. (Trading)";
              END ELSE BEGIN
                "Posting No. Series" := PurchSetup."Posted Purch Cr. Memo(Trading)";
                "Return Shipment No. Series" := PurchSetup."Posted Ret Shpt Nos. (Trading)";
              END;
            END;
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            IF NOT Trading THEN BEGIN
              IF ("No. Series" <> '') AND
               (PurchSetup."Credit Memo Nos." = PurchSetup."Posted Credit Memo Nos.")
            THEN
                "Posting No. Series" := "No. Series"
              ELSE
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");
              IF PurchSetup."Return Shipment on Credit Memo" THEN
                NoSeriesMgt.SetDefaultSeries("Return Shipment No. Series",PurchSetup."Posted Return Shpt. Nos.");
            END;
            IF Trading THEN BEGIN
              IF "Location Code" <> '' THEN BEGIN
                Location.GET("Location Code");
                IF Location."Purch Cr. Memo Nos. (Trading)" <> '' THEN
                  "Posting No. Series" := Location."Purch Cr. Memo Nos. (Trading)"
                ELSE
                  "Posting No. Series" := PurchSetup."Posted Purch Cr. Memo(Trading)";
                IF PurchSetup."Return Shipment on Credit Memo" THEN BEGIN
                  IF Location."Purch. Rcpt. Nos. (Trading)" <> '' THEN
                    "Return Shipment No. Series" := Location."Purch. Ret Shpt Nos. (Trading)"
                  ELSE
                    "Return Shipment No. Series" := PurchSetup."Posted Ret Shpt Nos. (Trading)";
                END;
              END ELSE BEGIN
                "Posting No. Series" := PurchSetup."Posted Purch Cr. Memo(Trading)";
                IF PurchSetup."Return Shipment on Credit Memo" THEN
                  "Return Shipment No. Series" := PurchSetup."Posted Ret Shpt Nos. (Trading)";
              END;
            END;
          END;
      END;

      IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Return Order","Document Type"::Quote] THEN
        "Order Date" := WORKDATE;

      IF "Document Type" = "Document Type"::Invoice THEN
        "Expected Receipt Date" := WORKDATE;

      IF NOT ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
         ("Posting Date" = 0D)
      THEN
        "Posting Date" := WORKDATE;

      IF PurchSetup."Default Posting Date" = PurchSetup."Default Posting Date"::"No Date" THEN
        "Posting Date" := 0D;

      "Document Date" := WORKDATE;

      VALIDATE("Sell-to Customer No.",'');

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        GLSetup.GET;
        Correction := GLSetup."Mark Cr. Memos as Corrections";
      END;

      "Posting Description" := FORMAT("Document Type") + ' ' + "No.";

      IF InvtSetup.GET THEN
        "Inbound Whse. Handling Time" := InvtSetup."Inbound Whse. Handling Time";

      "Responsibility Center" := UserSetupMgt.GetRespCenter(1,"Responsibility Center");
      "Service Type (Rev. Chrg.)" := "Service Type (Rev. Chrg.)"::" ";
    END;

    LOCAL PROCEDURE InitNoSeries@52();
    BEGIN
      IF xRec."Receiving No." <> '' THEN BEGIN
        "Receiving No. Series" := xRec."Receiving No. Series";
        "Receiving No." := xRec."Receiving No.";
      END;
      IF xRec."Posting No." <> '' THEN BEGIN
        "Posting No. Series" := xRec."Posting No. Series";
        "Posting No." := xRec."Posting No.";
      END;
      IF xRec."Return Shipment No." <> '' THEN BEGIN
        "Return Shipment No. Series" := xRec."Return Shipment No. Series";
        "Return Shipment No." := xRec."Return Shipment No.";
      END;
      IF xRec."Prepayment No." <> '' THEN BEGIN
        "Prepayment No. Series" := xRec."Prepayment No. Series";
        "Prepayment No." := xRec."Prepayment No.";
      END;
      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
      END;
    END;

    PROCEDURE AssistEdit@2(OldPurchHeader@1000 : Record 38) : Boolean;
    BEGIN
      PurchSetup.GET;
      TestNoSeries;
      IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldPurchHeader."No. Series","No. Series") THEN BEGIN
        PurchSetup.GET;
        TestNoSeries;
        NoSeriesMgt.SetSeries("No.");
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@6() : Boolean;
    BEGIN
      PurchSetup.GET;
      CASE "Document Type" OF
        "Document Type"::Quote:
          PurchSetup.TESTFIELD("Quote Nos.");
        "Document Type"::Order:
          BEGIN
            IF NOT Subcontracting THEN
              PurchSetup.TESTFIELD("Order Nos.")
            ELSE
              PurchSetup.TESTFIELD("Subcontracting Order Nos.");
          END;
        "Document Type"::Invoice:
          BEGIN
            PurchSetup.TESTFIELD("Invoice Nos.");
            PurchSetup.TESTFIELD("Posted Invoice Nos.");
          END;
        "Document Type"::"Return Order":
          PurchSetup.TESTFIELD("Return Order Nos.");
        "Document Type"::"Credit Memo":
          BEGIN
            PurchSetup.TESTFIELD("Credit Memo Nos.");
            PurchSetup.TESTFIELD("Posted Credit Memo Nos.");
          END;
        "Document Type"::"Blanket Order":
          PurchSetup.TESTFIELD("Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(PurchSetup."Quote Nos.");
        "Document Type"::Order:
          BEGIN
            IF NOT Subcontracting THEN
              EXIT(PurchSetup."Order Nos.");

            EXIT(PurchSetup."Subcontracting Order Nos.");
          END;
        "Document Type"::Invoice:
          EXIT(PurchSetup."Invoice Nos.");
        "Document Type"::"Return Order":
          EXIT(PurchSetup."Return Order Nos.");
        "Document Type"::"Credit Memo":
          EXIT(PurchSetup."Credit Memo Nos.");
        "Document Type"::"Blanket Order":
          EXIT(PurchSetup."Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetPostingNoSeriesCode@8() : Code[10];
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(PurchSetup."Posted Credit Memo Nos.");
      EXIT(PurchSetup."Posted Invoice Nos.");
    END;

    LOCAL PROCEDURE GetPostingPrepaymentNoSeriesCode@37() : Code[10];
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(PurchSetup."Posted Prepmt. Cr. Memo Nos.");
      EXIT(PurchSetup."Posted Prepmt. Inv. Nos.");
    END;

    LOCAL PROCEDURE TestNoSeriesDate@40(No@1000 : Code[20];NoSeriesCode@1001 : Code[10];NoCapt@1002 : Text[1024];NoSeriesCapt@1004 : Text[1024]);
    VAR
      NoSeries@1005 : Record 308;
    BEGIN
      IF (No <> '') AND (NoSeriesCode <> '') THEN BEGIN
        NoSeries.GET(NoSeriesCode);
        IF NoSeries."Date Order" THEN
          ERROR(
            Text040,
            FIELDCAPTION("Posting Date"),NoSeriesCapt,NoSeriesCode,
            NoSeries.FIELDCAPTION("Date Order"),NoSeries."Date Order","Document Type",
            NoCapt,No);
      END;
    END;

    PROCEDURE ConfirmDeletion@11() : Boolean;
    BEGIN
      PurchPost.TestDeleteHeader(
        Rec,PurchRcptHeader,PurchInvHeader,PurchCrMemoHeader,
        ReturnShptHeader,PurchInvHeaderPrepmt,PurchCrMemoHeaderPrepmt);
      IF PurchRcptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text009 +
             Text010 +
             Text011,TRUE,
             PurchRcptHeader."No.")
        THEN
          EXIT;
      IF PurchInvHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text012 +
             Text013 +
             Text011,TRUE,
             PurchInvHeader."No.")
        THEN
          EXIT;
      IF PurchCrMemoHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text014 +
             Text015 +
             Text011,TRUE,
             PurchCrMemoHeader."No.")
        THEN
          EXIT;
      IF ReturnShptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text029 +
             Text030 +
             Text011,TRUE,
             ReturnShptHeader."No.")
        THEN
          EXIT;
      IF "Prepayment No." <> '' THEN
        IF NOT CONFIRM(
             Text045,TRUE,
             PurchInvHeaderPrepmt."No.")
        THEN
          EXIT;
      IF "Prepmt. Cr. Memo No." <> '' THEN
        IF NOT CONFIRM(
             Text046,TRUE,
             PurchCrMemoHeaderPrepmt."No.")
        THEN
          EXIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetVend@1(VendNo@1000 : Code[20]);
    BEGIN
      IF VendNo <> Vend."No." THEN
        Vend.GET(VendNo);
    END;

    PROCEDURE PurchLinesExist@3() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      EXIT(PurchLine.FINDFIRST);
    END;

    LOCAL PROCEDURE RecreatePurchLines@4(ChangedFieldName@1000 : Text[100]);
    VAR
      PurchLineTmp@1001 : TEMPORARY Record 39;
      ItemChargeAssgntPurch@1005 : Record 5805;
      TempItemChargeAssgntPurch@1004 : TEMPORARY Record 5805;
      TempInteger@1003 : TEMPORARY Record 2000000026;
      SalesHeader@1006 : Record 36;
      SalesLine@1007 : Record 37;
      CopyDocMgt@1008 : Codeunit 6620;
      ExtendedTextAdded@1002 : Boolean;
    BEGIN
      IF PurchLinesExist THEN BEGIN
        IF HideValidationDialog THEN
          Confirmed := TRUE
        ELSE
          Confirmed :=
            CONFIRM(
              Text016 +
              Text004,FALSE,ChangedFieldName);
        IF Confirmed THEN BEGIN
          PurchLine.LOCKTABLE;
          ItemChargeAssgntPurch.LOCKTABLE;
          MODIFY;

          PurchLine.RESET;
          PurchLine.SETRANGE("Document Type","Document Type");
          PurchLine.SETRANGE("Document No.","No.");
          IF PurchLine.FINDSET THEN BEGIN
            REPEAT
              PurchLine.TESTFIELD("Quantity Received",0);
              PurchLine.TESTFIELD("Quantity Invoiced",0);
              PurchLine.TESTFIELD("Return Qty. Shipped",0);
              PurchLine.CALCFIELDS("Reserved Qty. (Base)");
              PurchLine.TESTFIELD("Reserved Qty. (Base)",0);
              PurchLine.TESTFIELD("Receipt No.",'');
              PurchLine.TESTFIELD("Return Shipment No.",'');
              PurchLine.TESTFIELD("Blanket Order No.",'');
              IF PurchLine."Drop Shipment" OR PurchLine."Special Order" THEN BEGIN
                CASE TRUE OF
                  PurchLine."Drop Shipment":
                    SalesHeader.GET(SalesHeader."Document Type"::Order,PurchLine."Sales Order No.");
                  PurchLine."Special Order":
                    SalesHeader.GET(SalesHeader."Document Type"::Order,PurchLine."Special Order Sales No.");
                END;
                TESTFIELD("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
                TESTFIELD("Ship-to Code",SalesHeader."Ship-to Code");
              END;

              PurchLine.TESTFIELD("Prepmt. Amt. Inv.",0);
              PurchLineTmp := PurchLine;
              IF PurchLine.Nonstock THEN BEGIN
                PurchLine.Nonstock := FALSE;
                PurchLine.MODIFY;
              END;
              PurchLineTmp.INSERT;
            UNTIL PurchLine.NEXT = 0;

            ItemChargeAssgntPurch.SETRANGE("Document Type","Document Type");
            ItemChargeAssgntPurch.SETRANGE("Document No.","No.");
            IF ItemChargeAssgntPurch.FINDSET THEN BEGIN
              REPEAT
                TempItemChargeAssgntPurch.INIT;
                TempItemChargeAssgntPurch := ItemChargeAssgntPurch;
                TempItemChargeAssgntPurch.INSERT;
              UNTIL ItemChargeAssgntPurch.NEXT = 0;
              ItemChargeAssgntPurch.DELETEALL;
            END;

            PurchLine.DELETEALL(TRUE);

            PurchLine.INIT;
            PurchLine."Line No." := 0;
            PurchLineTmp.FINDSET;
            ExtendedTextAdded := FALSE;
            REPEAT
              IF PurchLineTmp."Attached to Line No." = 0 THEN BEGIN
                PurchLine.INIT;
                PurchLine."Line No." := PurchLine."Line No." + 10000;
                PurchLine.VALIDATE(Type,PurchLineTmp.Type);
                IF PurchLineTmp."No." = '' THEN BEGIN
                  PurchLine.VALIDATE(Description,PurchLineTmp.Description);
                  PurchLine.VALIDATE("Description 2",PurchLineTmp."Description 2");
                END ELSE BEGIN
                  PurchLine.VALIDATE("No.",PurchLineTmp."No.");
                  IF PurchLine.Type <> PurchLine.Type::" " THEN
                    CASE TRUE OF
                      PurchLineTmp."Drop Shipment":
                        BEGIN
                          SalesLine.GET(SalesLine."Document Type"::Order,
                            PurchLineTmp."Sales Order No.",
                            PurchLineTmp."Sales Order Line No.");
                          CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,PurchLine);
                          PurchLine."Drop Shipment" := PurchLineTmp."Drop Shipment";
                          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
                          PurchLine."Sales Order No." := PurchLineTmp."Sales Order No.";
                          PurchLine."Sales Order Line No." := PurchLineTmp."Sales Order Line No.";
                          EVALUATE(PurchLine."Inbound Whse. Handling Time",'<0D>');
                          PurchLine.VALIDATE("Inbound Whse. Handling Time");

                          SalesLine.VALIDATE("Unit Cost (LCY)",PurchLine."Unit Cost (LCY)");
                          SalesLine."Purchase Order No." := PurchLine."Document No.";
                          SalesLine."Purch. Order Line No." := PurchLine."Line No.";
                          SalesLine.MODIFY;
                        END;
                      PurchLineTmp."Special Order":
                        BEGIN
                          SalesLine.GET(SalesLine."Document Type"::Order,
                            PurchLineTmp."Special Order Sales No.",
                            PurchLineTmp."Special Order Sales Line No.");
                          CopyDocMgt.TransfldsFromSalesToPurchLine(SalesLine,PurchLine);
                          PurchLine."Special Order" := PurchLineTmp."Special Order";
                          PurchLine."Purchasing Code" := SalesLine."Purchasing Code";
                          PurchLine."Special Order Sales No." := PurchLineTmp."Special Order Sales No.";
                          PurchLine."Special Order Sales Line No." := PurchLineTmp."Special Order Sales Line No.";

                          SalesLine.VALIDATE("Unit Cost (LCY)",PurchLine."Unit Cost (LCY)");
                          SalesLine."Special Order Purchase No." := PurchLine."Document No.";
                          SalesLine."Special Order Purch. Line No." := PurchLine."Line No.";
                          SalesLine.MODIFY;
                        END;
                      ELSE BEGIN
                        PurchLine.VALIDATE("Unit of Measure Code",PurchLineTmp."Unit of Measure Code");
                        PurchLine.VALIDATE("Variant Code",PurchLineTmp."Variant Code");
                        PurchLine."Prod. Order No." := PurchLineTmp."Prod. Order No.";
                        IF PurchLine."Prod. Order No." <> '' THEN BEGIN
                          PurchLine.Description := PurchLineTmp.Description;
                          PurchLine.VALIDATE("VAT Prod. Posting Group",PurchLineTmp."VAT Prod. Posting Group");
                          PurchLine.VALIDATE("Gen. Prod. Posting Group",PurchLineTmp."Gen. Prod. Posting Group");
                          PurchLine.VALIDATE("Expected Receipt Date",PurchLineTmp."Expected Receipt Date");
                          PurchLine.VALIDATE("Requested Receipt Date",PurchLineTmp."Requested Receipt Date");
                          PurchLine.VALIDATE("Qty. per Unit of Measure",PurchLineTmp."Qty. per Unit of Measure");
                        END;
                        IF (PurchLineTmp."Job No." <> '') AND (PurchLineTmp."Job Task No." <> '') THEN BEGIN
                          PurchLine.VALIDATE("Job No.",PurchLineTmp."Job No.");
                          PurchLine.VALIDATE("Job Task No.",PurchLineTmp."Job Task No.");
                          PurchLine."Job Line Type" := PurchLineTmp."Job Line Type";
                        END;
                        IF PurchLineTmp.Quantity <> 0 THEN
                          PurchLine.VALIDATE(Quantity,PurchLineTmp.Quantity);
                        IF ("Currency Code" = xRec."Currency Code") AND (PurchLine."Direct Unit Cost" = 0) THEN
                          PurchLine.VALIDATE("Direct Unit Cost",PurchLineTmp."Direct Unit Cost");
                        PurchLine."Routing No." := PurchLineTmp."Routing No.";
                        PurchLine."Routing Reference No." := PurchLineTmp."Routing Reference No.";
                        PurchLine."Operation No." := PurchLineTmp."Operation No.";
                        PurchLine."Work Center No." := PurchLineTmp."Work Center No.";
                        PurchLine."Prod. Order Line No." := PurchLineTmp."Prod. Order Line No.";
                        PurchLine."Overhead Rate" := PurchLineTmp."Overhead Rate";
                      END;
                    END;
                END;

                PurchLine.INSERT;
                ExtendedTextAdded := FALSE;

                IF PurchLine.Type = PurchLine.Type::Item THEN BEGIN
                  ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type",PurchLineTmp."Document Type");
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.",PurchLineTmp."Document No.");
                  TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.",PurchLineTmp."Line No.");
                  IF TempItemChargeAssgntPurch.FINDSET THEN
                    REPEAT
                      IF NOT TempItemChargeAssgntPurch.MARK THEN BEGIN
                        TempItemChargeAssgntPurch."Applies-to Doc. Line No." := PurchLine."Line No.";
                        TempItemChargeAssgntPurch.Description := PurchLine.Description;
                        TempItemChargeAssgntPurch.MODIFY;
                        TempItemChargeAssgntPurch.MARK(TRUE);
                      END;
                    UNTIL TempItemChargeAssgntPurch.NEXT = 0;
                END;
                IF PurchLine.Type = PurchLine.Type::"Charge (Item)" THEN BEGIN
                  TempInteger.INIT;
                  TempInteger.Number := PurchLine."Line No.";
                  TempInteger.INSERT;
                END;
              END ELSE
                IF NOT ExtendedTextAdded THEN BEGIN
                  TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,TRUE);
                  TransferExtendedText.InsertPurchExtText(PurchLine);
                  PurchLine.FINDLAST;
                  ExtendedTextAdded := TRUE;
                END;
            UNTIL PurchLineTmp.NEXT = 0;

            ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
            PurchLineTmp.SETRANGE(Type,PurchLine.Type::"Charge (Item)");
            IF PurchLineTmp.FINDSET THEN
              REPEAT
                TempItemChargeAssgntPurch.SETRANGE("Document Line No.",PurchLineTmp."Line No.");
                IF TempItemChargeAssgntPurch.FINDSET THEN BEGIN
                  REPEAT
                    TempInteger.FINDFIRST;
                    ItemChargeAssgntPurch.INIT;
                    ItemChargeAssgntPurch := TempItemChargeAssgntPurch;
                    ItemChargeAssgntPurch."Document Line No." := TempInteger.Number;
                    ItemChargeAssgntPurch.VALIDATE("Unit Cost",0);
                    ItemChargeAssgntPurch.INSERT;
                  UNTIL TempItemChargeAssgntPurch.NEXT = 0;
                  TempInteger.DELETE;
                END;
              UNTIL PurchLineTmp.NEXT = 0;

            PurchLineTmp.SETRANGE(Type);
            PurchLineTmp.DELETEALL;
            ClearItemAssgntPurchFilter(TempItemChargeAssgntPurch);
            TempItemChargeAssgntPurch.DELETEALL;
          END;
        END ELSE
          ERROR(
            Text018,ChangedFieldName);
      END;
    END;

    LOCAL PROCEDURE MessageIfPurchLinesExist@5(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF PurchLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text019 +
          Text020,
          ChangedFieldName);
    END;

    LOCAL PROCEDURE PriceMessageIfPurchLinesExist@7(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF PurchLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text019 +
          Text021,ChangedFieldName);
    END;

    LOCAL PROCEDURE UpdateCurrencyFactor@12();
    BEGIN
      IF "Currency Code" <> '' THEN BEGIN
        IF "Posting Date" <> 0D THEN
          CurrencyDate := "Posting Date"
        ELSE
          CurrencyDate := WORKDATE;

        "Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code");
      END ELSE
        "Currency Factor" := 0;
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyFactor@13() : Boolean;
    BEGIN
      IF HideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(Text022,FALSE);
      IF Confirmed THEN
        VALIDATE("Currency Factor")
      ELSE
        "Currency Factor" := xRec."Currency Factor";
      EXIT(Confirmed);
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE UpdatePurchLines@15(ChangedFieldName@1000 : Text[100];AskQuestion@1001 : Boolean);
    VAR
      PurchLineReserve@1003 : Codeunit 99000834;
      Question@1002 : Text[250];
    BEGIN
      IF NOT PurchLinesExist THEN
        EXIT;

      IF AskQuestion THEN BEGIN
        Question := STRSUBSTNO(
            Text032 +
            Text033,ChangedFieldName);
        IF GUIALLOWED THEN
          IF DIALOG.CONFIRM(Question,TRUE) THEN
            CASE ChangedFieldName OF
              FIELDCAPTION("Expected Receipt Date"),
              FIELDCAPTION("Requested Receipt Date"),
              FIELDCAPTION("Promised Receipt Date"),
              FIELDCAPTION("Lead Time Calculation"),
              FIELDCAPTION("Inbound Whse. Handling Time"):
                ConfirmResvDateConflict;
            END
          ELSE
            EXIT;
      END;

      PurchLine.LOCKTABLE;
      MODIFY;

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      IF PurchLine.FINDSET THEN
        REPEAT
          xPurchLine := PurchLine;
          CASE ChangedFieldName OF
            FIELDCAPTION("Expected Receipt Date"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Expected Receipt Date","Expected Receipt Date");
            FIELDCAPTION("Currency Factor"):
              IF PurchLine.Type <> PurchLine.Type::" " THEN
                PurchLine.VALIDATE("Direct Unit Cost");
            FIELDCAPTION("Transaction Type"):
              PurchLine.VALIDATE("Transaction Type","Transaction Type");
            FIELDCAPTION("Transport Method"):
              PurchLine.VALIDATE("Transport Method","Transport Method");
            FIELDCAPTION("Entry Point"):
              PurchLine.VALIDATE("Entry Point","Entry Point");
            FIELDCAPTION(Area):
              PurchLine.VALIDATE(Area,Area);
            FIELDCAPTION("Transaction Specification"):
              PurchLine.VALIDATE("Transaction Specification","Transaction Specification");
            FIELDCAPTION("Requested Receipt Date"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Requested Receipt Date","Requested Receipt Date");
            FIELDCAPTION("Prepayment %"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Prepayment %","Prepayment %");
            FIELDCAPTION("Promised Receipt Date"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Promised Receipt Date","Promised Receipt Date");
            FIELDCAPTION("Lead Time Calculation"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Lead Time Calculation","Lead Time Calculation");
            FIELDCAPTION("Inbound Whse. Handling Time"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Inbound Whse. Handling Time","Inbound Whse. Handling Time");
            FIELDCAPTION("Form Code"):
              IF PurchLine.Type <> PurchLine.Type::" " THEN BEGIN
                PurchLine.VALIDATE("Direct Unit Cost");
                 PurchLine.VALIDATE("Form Code","Form Code");
               PurchLine.VALIDATE("Form No.","Form No.");
              END;
            PurchLine.FIELDCAPTION("Deferral Code"):
              IF PurchLine."No." <> '' THEN
                PurchLine.VALIDATE("Deferral Code");
          END;
          PurchLine.MODIFY(TRUE);
          PurchLineReserve.VerifyChange(PurchLine,xPurchLine);
        UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ConfirmResvDateConflict@31();
    VAR
      ResvEngMgt@1000 : Codeunit 99000831;
    BEGIN
      IF ResvEngMgt.ResvExistsForPurchHeader(Rec) THEN
        IF NOT CONFIRM(Text050 + Text011,FALSE) THEN
          ERROR('');
    END;

    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record 242;
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
      OldDimSetID@1008 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(TableID,No,SourceCodeSetup.Purchases,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      IF (OldDimSetID <> "Dimension Set ID") AND PurchLinesExist THEN BEGIN
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1005 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      IF "No." <> '' THEN
        MODIFY;

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF PurchLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE ReceivedPurchLinesExist@20() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Quantity Received",'<>0');
      EXIT(PurchLine.FINDFIRST);
    END;

    LOCAL PROCEDURE ReturnShipmentExist@5800() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Return Qty. Shipped",'<>0');
      EXIT(PurchLine.FINDFIRST);
    END;

    LOCAL PROCEDURE UpdateShipToAddress@21();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT;

      IF ("Location Code" <> '') AND
         Location.GET("Location Code") AND
         ("Sell-to Customer No." = '')
      THEN BEGIN
        "Ship-to Name" := Location.Name;
        "Ship-to Name 2" := Location."Name 2";
        "Ship-to Address" := Location.Address;
        "Ship-to Address 2" := Location."Address 2";
        "Ship-to City" := Location.City;
        "Ship-to Post Code" := Location."Post Code";
        "Ship-to County" := Location.County;
        "Ship-to Country/Region Code" := Location."Country/Region Code";
        "Ship-to Contact" := Location.Contact;
      END;

      IF ("Location Code" = '') AND
         ("Sell-to Customer No." = '')
      THEN BEGIN
        CompanyInfo.GET;
        "Ship-to Code" := '';
        "Ship-to Name" := CompanyInfo."Ship-to Name";
        "Ship-to Name 2" := CompanyInfo."Ship-to Name 2";
        "Ship-to Address" := CompanyInfo."Ship-to Address";
        "Ship-to Address 2" := CompanyInfo."Ship-to Address 2";
        "Ship-to City" := CompanyInfo."Ship-to City";
        "Ship-to Post Code" := CompanyInfo."Ship-to Post Code";
        "Ship-to County" := CompanyInfo."Ship-to County";
        "Ship-to Country/Region Code" := CompanyInfo."Ship-to Country/Region Code";
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
      END;
    END;

    LOCAL PROCEDURE DeletePurchaseLines@17();
    BEGIN
      IF PurchLine.FINDSET THEN BEGIN
        HandleItemTrackingDeletion;
        REPEAT
          PurchLine.SuspendStatusCheck(TRUE);
          PurchLine.DELETE(TRUE);
        UNTIL PurchLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE HandleItemTrackingDeletion@36();
    VAR
      ReservEntry@1000 : Record 337;
      ReservEntry2@1001 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line","Reservation Status");
        SETRANGE("Source Type",DATABASE::"Purchase Line");
        SETRANGE("Source Subtype","Document Type");
        SETRANGE("Source ID","No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETFILTER("Item Tracking",'> %1',"Item Tracking"::None);
        IF ISEMPTY THEN
          EXIT;

        IF HideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE
          Confirmed := CONFIRM(Text041,FALSE,LOWERCASE(FORMAT("Document Type")),"No.");

        IF NOT Confirmed THEN
          ERROR('');

        IF FINDSET THEN
          REPEAT
            ReservEntry2 := ReservEntry;
            ReservEntry2.ClearItemTrackingFields;
            ReservEntry2.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClearItemAssgntPurchFilter@22(VAR TempItemChargeAssgntPurch@1000 : Record 5805);
    BEGIN
      TempItemChargeAssgntPurch.SETRANGE("Document Line No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntPurch.SETRANGE("Applies-to Doc. Line No.");
    END;

    LOCAL PROCEDURE UpdateBuyFromCont@24(VendorNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Vend@1004 : Record 23;
    BEGIN
      IF Vend.GET(VendorNo) THEN BEGIN
        IF Vend."Primary Contact No." <> '' THEN
          "Buy-from Contact No." := Vend."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
          ContBusRel.SETRANGE("No.","Buy-from Vendor No.");
          IF ContBusRel.FINDFIRST THEN
            "Buy-from Contact No." := ContBusRel."Contact No."
          ELSE
            "Buy-from Contact No." := '';
        END;
        "Buy-from Contact" := Vend.Contact;
      END;
    END;

    LOCAL PROCEDURE UpdatePayToCont@27(VendorNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Vend@1001 : Record 23;
    BEGIN
      IF Vend.GET(VendorNo) THEN BEGIN
        IF Vend."Primary Contact No." <> '' THEN
          "Pay-to Contact No." := Vend."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
          ContBusRel.SETRANGE("No.","Pay-to Vendor No.");
          IF ContBusRel.FINDFIRST THEN
            "Pay-to Contact No." := ContBusRel."Contact No."
          ELSE
            "Pay-to Contact No." := '';
        END;
        "Pay-to Contact" := Vend.Contact;
      END;
    END;

    LOCAL PROCEDURE UpdateBuyFromVend@25(ContactNo@1002 : Code[20]);
    VAR
      ContBusinessRelation@1007 : Record 5054;
      Vend@1006 : Record 23;
      Cont@1005 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Buy-from Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Buy-from Contact" := Cont.Name
        ELSE
          IF Vend.GET("Buy-from Vendor No.") THEN
            "Buy-from Contact" := Vend.Contact
          ELSE
            "Buy-from Contact" := ''
      END ELSE BEGIN
        "Buy-from Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF ("Buy-from Vendor No." <> '') AND
           ("Buy-from Vendor No." <> ContBusinessRelation."No.")
        THEN
          ERROR(Text037,Cont."No.",Cont.Name,"Buy-from Vendor No.");
        IF "Buy-from Vendor No." = '' THEN BEGIN
          SkipBuyFromContact := TRUE;
          VALIDATE("Buy-from Vendor No.",ContBusinessRelation."No.");
          SkipBuyFromContact := FALSE;
        END;
      END ELSE
        ERROR(Text039,Cont."No.",Cont.Name);

      IF ("Buy-from Vendor No." = "Pay-to Vendor No.") OR
         ("Pay-to Vendor No." = '')
      THEN
        VALIDATE("Pay-to Contact No.","Buy-from Contact No.");
    END;

    LOCAL PROCEDURE UpdatePayToVend@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Vend@1004 : Record 23;
      Cont@1003 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Pay-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Pay-to Contact" := Cont.Name
        ELSE
          IF Vend.GET("Pay-to Vendor No.") THEN
            "Pay-to Contact" := Vend.Contact
          ELSE
            "Pay-to Contact" := '';
      END ELSE BEGIN
        "Pay-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Vendor);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF "Pay-to Vendor No." = '' THEN BEGIN
          SkipPayToContact := TRUE;
          VALIDATE("Pay-to Vendor No.",ContBusinessRelation."No.");
          SkipPayToContact := FALSE;
        END ELSE
          IF "Pay-to Vendor No." <> ContBusinessRelation."No." THEN
            ERROR(Text037,Cont."No.",Cont.Name,"Pay-to Vendor No.");
      END ELSE
        ERROR(Text039,Cont."No.",Cont.Name);
    END;

    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record 5765;
    BEGIN
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      CASE "Document Type" OF
        "Document Type"::Order:
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Purchase Order");
        "Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Purchase Return Order");
      END;
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",TRUE,FALSE,WhseRequest);
    END;

    PROCEDURE ShowDocDim@32();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF PurchLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      NewDimSetID@1002 : Integer;
      ReceivedShippedItemLineDimChangeConfirmed@1003 : Boolean;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT CONFIRM(Text051) THEN
        EXIT;

      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.LOCKTABLE;
      IF PurchLine.FIND('-') THEN
        REPEAT
          NewDimSetID := DimMgt.GetDeltaDimSetID(PurchLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF PurchLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            PurchLine."Dimension Set ID" := NewDimSetID;

            IF NOT HideValidationDialog AND GUIALLOWED THEN
              VerifyReceivedShippedItemLineDimChange(ReceivedShippedItemLineDimChangeConfirmed);

            DimMgt.UpdateGlobalDimFromDimSetID(
              PurchLine."Dimension Set ID",PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code");
            PurchLine.MODIFY;
          END;
        UNTIL PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyReceivedShippedItemLineDimChange@71(VAR ReceivedShippedItemLineDimChangeConfirmed@1000 : Boolean);
    BEGIN
      IF PurchLine.IsReceivedShippedItemDimChanged THEN
        IF NOT ReceivedShippedItemLineDimChangeConfirmed THEN
          ReceivedShippedItemLineDimChangeConfirmed := PurchLine.ConfirmReceivedShippedItemDimChange;
    END;

    PROCEDURE SetAmountToApply@18(AppliesToDocNo@1000 : Code[20];VendorNo@1001 : Code[20]);
    VAR
      VendLedgEntry@1002 : Record 25;
    BEGIN
      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",AppliesToDocNo);
      VendLedgEntry.SETRANGE("Vendor No.",VendorNo);
      VendLedgEntry.SETRANGE(Open,TRUE);
      IF VendLedgEntry.FINDFIRST THEN BEGIN
        IF GSTManagement.IsGSTApplicable(Structure) THEN
          GSTApplicationManagement.FillAppBufferHSNComponentInvoice(
            TransactionType2::Purchase,VendLedgEntry."Vendor No.","Document Type","No.");
        IF VendLedgEntry."Amount to Apply" = 0 THEN  BEGIN
          VendLedgEntry.CALCFIELDS("Remaining Amount");
          VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
        END ELSE
          VendLedgEntry."Amount to Apply" := 0;
        VendLedgEntry."Accepted Payment Tolerance" := 0;
        VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
        IF GSTManagement.IsGSTApplicable(Structure) AND
          ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND ("Applies-to Doc. No." <> '') THEN BEGIN
          CalculateGSTStructure(Rec);
          VendEntryEdit.SetGSTType(Rec,TRUE);
          VendEntryEdit.RUN(VendLedgEntry);
        END ELSE
        CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
      END;
    END;

    PROCEDURE SetShipToForSpecOrder@23();
    BEGIN
      IF Location.GET("Location Code") THEN BEGIN
        "Ship-to Code" := '';
        "Ship-to Name" := Location.Name;
        "Ship-to Name 2" := Location."Name 2";
        "Ship-to Address" := Location.Address;
        "Ship-to Address 2" := Location."Address 2";
        "Ship-to City" := Location.City;
        "Ship-to Post Code" := Location."Post Code";
        "Ship-to County" := Location.County;
        "Ship-to Country/Region Code" := Location."Country/Region Code";
        "Ship-to Contact" := Location.Contact;
        "Location Code" := Location.Code;
      END ELSE BEGIN
        CompanyInfo.GET;
        "Ship-to Code" := '';
        "Ship-to Name" := CompanyInfo."Ship-to Name";
        "Ship-to Name 2" := CompanyInfo."Ship-to Name 2";
        "Ship-to Address" := CompanyInfo."Ship-to Address";
        "Ship-to Address 2" := CompanyInfo."Ship-to Address 2";
        "Ship-to City" := CompanyInfo."Ship-to City";
        "Ship-to Post Code" := CompanyInfo."Ship-to Post Code";
        "Ship-to County" := CompanyInfo."Ship-to County";
        "Ship-to Country/Region Code" := CompanyInfo."Ship-to Country/Region Code";
        "Ship-to Contact" := CompanyInfo."Ship-to Contact";
        "Location Code" := '';
      END;
    END;

    LOCAL PROCEDURE JobUpdatePurchLines@28(SkipJobCurrFactorUpdate@1000 : Boolean);
    BEGIN
      WITH PurchLine DO BEGIN
        SETFILTER("Job No.",'<>%1','');
        SETFILTER("Job Task No.",'<>%1','');
        LOCKTABLE;
        IF FINDSET(TRUE,FALSE) THEN BEGIN
          SetPurchHeader(Rec);
          REPEAT
            IF NOT SkipJobCurrFactorUpdate THEN
              JobSetCurrencyFactor;
            CreateTempJobJnlLine(FALSE);
            UpdateJobPrices;
            MODIFY;
          UNTIL NEXT = 0;
        END;
      END
    END;

    PROCEDURE GetPstdDocLinesToRevere@47();
    VAR
      PurchPostedDocLines@1002 : Page 5855;
    BEGIN
      GetVend("Buy-from Vendor No.");
      PurchPostedDocLines.SetToPurchHeader(Rec);
      PurchPostedDocLines.SETRECORD(Vend);
      PurchPostedDocLines.LOOKUPMODE := TRUE;
      IF PurchPostedDocLines.RUNMODAL = ACTION::LookupOK THEN
        PurchPostedDocLines.CopyLineToDoc;

      CLEAR(PurchPostedDocLines);
    END;

    PROCEDURE SetSecurityFilterOnRespCenter@43();
    BEGIN
      IF UserSetupMgt.GetPurchasesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetPurchasesFilter);
        FILTERGROUP(0);
      END;

      SETRANGE("Date Filter",0D,WORKDATE - 1);
    END;

    PROCEDURE CalcInvDiscForHeader@45();
    VAR
      PurchaseInvDisc@1000 : Codeunit 70;
    BEGIN
      PurchSetup.GET;
      IF PurchSetup."Calc. Inv. Discount" THEN
        PurchaseInvDisc.CalculateIncDiscForHeader(Rec);
    END;

    PROCEDURE AddShipToAddress@46(SalesHeader@1000 : Record 36;ShowError@1001 : Boolean);
    VAR
      PurchLine2@1002 : Record 39;
    BEGIN
      IF ShowError THEN BEGIN
        PurchLine2.RESET;
        PurchLine2.SETRANGE("Document Type","Document Type"::Order);
        PurchLine2.SETRANGE("Document No.","No.");
        IF NOT PurchLine2.ISEMPTY THEN BEGIN
          IF "Ship-to Name" <> SalesHeader."Ship-to Name" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name"),"No.",SalesHeader."No.");
          IF "Ship-to Name 2" <> SalesHeader."Ship-to Name 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name 2"),"No.",SalesHeader."No.");
          IF "Ship-to Address" <> SalesHeader."Ship-to Address" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address"),"No.",SalesHeader."No.");
          IF "Ship-to Address 2" <> SalesHeader."Ship-to Address 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address 2"),"No.",SalesHeader."No.");
          IF "Ship-to Post Code" <> SalesHeader."Ship-to Post Code" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Post Code"),"No.",SalesHeader."No.");
          IF "Ship-to City" <> SalesHeader."Ship-to City" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to City"),"No.",SalesHeader."No.");
          IF "Ship-to Contact" <> SalesHeader."Ship-to Contact" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Contact"),"No.",SalesHeader."No.");
        END ELSE BEGIN
          // no purchase line exists
          "Ship-to Name" := SalesHeader."Ship-to Name";
          "Ship-to Name 2" := SalesHeader."Ship-to Name 2";
          "Ship-to Address" := SalesHeader."Ship-to Address";
          "Ship-to Address 2" := SalesHeader."Ship-to Address 2";
          "Ship-to Post Code" := SalesHeader."Ship-to Post Code";
          "Ship-to City" := SalesHeader."Ship-to City";
          "Ship-to Contact" := SalesHeader."Ship-to Contact";
        END;
      END;
    END;

    PROCEDURE DropShptOrderExists@48(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLine2@1001 : Record 37;
    BEGIN
      // returns TRUE if sales is either Drop Shipment of Special Order
      SalesLine2.RESET;
      SalesLine2.SETRANGE("Document Type",SalesLine2."Document Type"::Order);
      SalesLine2.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine2.SETRANGE("Drop Shipment",TRUE);
      EXIT(NOT SalesLine2.ISEMPTY);
    END;

    PROCEDURE SpecialOrderExists@81(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesLine3@1001 : Record 37;
    BEGIN
      SalesLine3.RESET;
      SalesLine3.SETRANGE("Document Type",SalesLine3."Document Type"::Order);
      SalesLine3.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine3.SETRANGE("Special Order",TRUE);
      EXIT(NOT SalesLine3.ISEMPTY);
    END;

    LOCAL PROCEDURE CheckDropShipmentLineExists@153();
    VAR
      SalesShipmentLine@1000 : Record 111;
    BEGIN
      SalesShipmentLine.SETRANGE("Purchase Order No.","No.");
      SalesShipmentLine.SETRANGE("Drop Shipment",TRUE);
      IF NOT SalesShipmentLine.ISEMPTY THEN
        ERROR(YouCannotChangeFieldErr,FIELDCAPTION("Buy-from Vendor No."));
    END;

    PROCEDURE QtyToReceiveIsZero@30() : Boolean;
    BEGIN
      PurchLine.RESET;
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Qty. to Receive",'<>0');
      EXIT(PurchLine.ISEMPTY);
    END;

    LOCAL PROCEDURE IsApprovedForPosting@50() : Boolean;
    VAR
      PrepaymentMgt@1000 : Codeunit 441;
    BEGIN
      IF ApprovalsMgmt.PrePostApprovalCheckPurch(Rec) THEN BEGIN
        IF PrepaymentMgt.TestPurchasePrepayment(Rec) THEN
          ERROR(STRSUBSTNO(Text053,"Document Type","No."));
        IF PrepaymentMgt.TestPurchasePayment(Rec) THEN
          IF NOT CONFIRM(STRSUBSTNO(Text054,"Document Type","No."),TRUE) THEN
            EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE IsApprovedForPostingBatch@51() : Boolean;
    VAR
      PrepaymentMgt@1000 : Codeunit 441;
    BEGIN
      IF ApprovalsMgmt.PrePostApprovalCheckPurch(Rec) THEN BEGIN
        IF PrepaymentMgt.TestPurchasePrepayment(Rec) THEN
          EXIT(FALSE);
        IF PrepaymentMgt.TestPurchasePayment(Rec) THEN
          EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE TaxAreaUpdateLines@1280003();
    BEGIN
      IF PurchLinesExist THEN BEGIN
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        IF PurchLine.FIND('-') THEN BEGIN
          MODIFY;
          REPEAT
            PurchLine."Tax Area Code" := "Tax Area Code";
            PurchLine.UpdateAmounts;
            PurchLine.MODIFY;
          UNTIL PurchLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE TaxAreaUpdate@1280002();
    VAR
      TaxLocation@1280000 : Record 13761;
    BEGIN
      TaxLocation.SETRANGE(Type,TaxLocation.Type::Vendor);
      TaxLocation.SETRANGE("Dispatch / Receiving Location","Location Code");
      TaxLocation.SETRANGE("Customer / Vendor Location",State);
      IF TaxLocation.FINDFIRST THEN BEGIN
        "Tax Area Code" := TaxLocation."Tax Area Code";
        IF xRec."Tax Area Code" <> "Tax Area Code" THEN
          RecreatePurchLines(FIELDCAPTION("Tax Area Code"));
      END;
    END;

    PROCEDURE TDSUpdateLines@1280001();
    BEGIN
      IF PurchLinesExist THEN BEGIN
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        IF PurchLine.FIND('-') THEN BEGIN
          PurchLine.LOCKTABLE;
          MODIFY;
          REPEAT
            IF PurchLine.Type <> PurchLine.Type::" " THEN
              PurchLine.VALIDATE(Quantity,PurchLine.Quantity);
            PurchLine.MODIFY;
          UNTIL PurchLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE GetGateEntryLines@1500000();
    BEGIN
      PostedGateEntryLine.MODIFYALL(Mark,FALSE);
      PurchHeader2.GET("Document Type","No.");
      PostedGateEntryLine.RESET;
      PostedGateEntryLine.SETCURRENTKEY("Entry Type","Source Type","Source No.",Status);

      CASE "Document Type" OF
        "Document Type"::Order:
          BEGIN
            PostedGateEntryLine.SETRANGE("Source Type",PostedGateEntryLine."Source Type"::"Purchase Order");
            PostedGateEntryLine.SETRANGE("Entry Type",PostedGateEntryLine."Entry Type"::Inward);
            PostedGateEntryLine.SETRANGE("Source No.","No.");
            PostedGateEntryLine.SETRANGE(Status,PostedGateEntryLine.Status::Open);
          END;
        "Document Type"::Invoice:
          BEGIN
            PostedGateEntryLine.SETRANGE("Source Type",PostedGateEntryLine."Source Type"::" ");
            PostedGateEntryLine.SETRANGE("Entry Type",PostedGateEntryLine."Entry Type"::Inward);
            PostedGateEntryLine.SETRANGE(Status,PostedGateEntryLine.Status::Open);
          END;
      END;

      GateEntryAttachment.SETCURRENTKEY("Source Type","Source No.","Entry Type","Gate Entry No.","Line No.");
      IF PostedGateEntryLine.FINDSET THEN
        REPEAT
          GateEntryAttachment.SETRANGE("Source No.",PostedGateEntryLine."Source No.");
          GateEntryAttachment.SETRANGE("Gate Entry No.",PostedGateEntryLine."Gate Entry No.");
          GateEntryAttachment.SETRANGE("Line No.",PostedGateEntryLine."Line No.");
          IF NOT GateEntryAttachment.FINDFIRST THEN BEGIN
            PostedGateEntryLine.Mark := TRUE;
            PostedGateEntryLine.MODIFY;
            COMMIT;
          END;
        UNTIL PostedGateEntryLine.NEXT = 0;

      PostedGateEntryLine.RESET;
      PostedGateEntryLine.SETCURRENTKEY("Entry Type","Source Type","Source No.",Status);
      PostedGateEntryLine.SETRANGE(Mark,TRUE);
      IF PostedGateEntryLine.FINDFIRST THEN BEGIN
        PostedGateEntryLineList.SETTABLEVIEW(PostedGateEntryLine);
        IF PAGE.RUNMODAL(PAGE::"Posted Gate Entry Line List",PostedGateEntryLine) = ACTION::LookupOK THEN BEGIN
          GateEntryAttachment.INIT;
          GateEntryAttachment."Source Type" := PostedGateEntryLine."Source Type";
          GateEntryAttachment."Source No." := PostedGateEntryLine."Source No.";
          GateEntryAttachment."Entry Type" := PostedGateEntryLine."Entry Type";
          GateEntryAttachment."Gate Entry No." := PostedGateEntryLine."Gate Entry No.";
          GateEntryAttachment."Line No." := PostedGateEntryLine."Line No.";
          GateEntryAttachment."Purchase Invoice No." := "No.";
          GateEntryAttachment.INSERT;
        END;
      END;
    END;

    PROCEDURE GetInputSvcDistributionStatus@1500005();
    BEGIN
      IF "Location Code" <> '' THEN BEGIN
        Location.GET("Location Code");
        "Input Service Distribution" := Location."Input Service Distributor";
      END ELSE BEGIN
        CompanyInfo.GET;
        "Input Service Distribution" := CompanyInfo."Input Service Distributor";
      END;
    END;

    PROCEDURE SendToPosting@57(PostingCodeunitID@1000 : Integer);
    BEGIN
      IF NOT IsApprovedForPosting THEN
        EXIT;
      CODEUNIT.RUN(PostingCodeunitID,Rec);
    END;

    PROCEDURE CancelBackgroundPosting@33();
    VAR
      PurchasePostViaJobQueue@1000 : Codeunit 98;
    BEGIN
      PurchasePostViaJobQueue.CancelQueueEntry(Rec);
    END;

    PROCEDURE CheckDropShptAddressDetails@79(SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      NameAddressDetails := DropShptNameAddressDetails;
      DropShptNameAddressDetails :=
        SalesHeader."Ship-to Name" + SalesHeader."Ship-to Name 2" +
        SalesHeader."Ship-to Address" + SalesHeader."Ship-to Address 2" +
        SalesHeader."Ship-to Post Code" + SalesHeader."Ship-to City" +
        SalesHeader."Ship-to Contact";
      IF NameAddressDetails = '' THEN
        NameAddressDetails := DropShptNameAddressDetails;
      EXIT(NameAddressDetails = DropShptNameAddressDetails);
    END;

    PROCEDURE AddSpecialOrderToAddress@80(SalesHeader@1000 : Record 36;ShowError@1001 : Boolean);
    VAR
      PurchLine3@1003 : Record 39;
      LocationCode@1004 : Record 14;
    BEGIN
      IF ShowError THEN BEGIN
        PurchLine3.RESET;
        PurchLine3.SETRANGE("Document Type","Document Type"::Order);
        PurchLine3.SETRANGE("Document No.","No.");
        IF NOT PurchLine3.ISEMPTY THEN BEGIN
          LocationCode.GET("Location Code");
          IF "Ship-to Name" <> LocationCode.Name THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name"),"No.",SalesHeader."No.");
          IF "Ship-to Name 2" <> LocationCode."Name 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Name 2"),"No.",SalesHeader."No.");
          IF "Ship-to Address" <> LocationCode.Address THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address"),"No.",SalesHeader."No.");
          IF "Ship-to Address 2" <> LocationCode."Address 2" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Address 2"),"No.",SalesHeader."No.");
          IF "Ship-to Post Code" <> LocationCode."Post Code" THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Post Code"),"No.",SalesHeader."No.");
          IF "Ship-to City" <> LocationCode.City THEN
            ERROR(Text052,FIELDCAPTION("Ship-to City"),"No.",SalesHeader."No.");
          IF "Ship-to Contact" <> LocationCode.Contact THEN
            ERROR(Text052,FIELDCAPTION("Ship-to Contact"),"No.",SalesHeader."No.");
        END ELSE
          SetShipToForSpecOrder;
      END;
    END;

    PROCEDURE CheckSpecOrderAddressDetails@82(SalesHeader@1000 : Record 36) : Boolean;
    VAR
      LocationCode@1001 : Record 14;
    BEGIN
      NameAddressDetails := SpecOrderNameAddressDetails;
      IF LocationCode.GET(SalesHeader."Location Code") THEN
        SpecOrderNameAddressDetails :=
          LocationCode.Name + LocationCode."Name 2" +
          LocationCode.Address + LocationCode."Address 2" +
          LocationCode."Post Code" + LocationCode.City +
          LocationCode.Contact
      ELSE BEGIN
        CompanyInfo.GET;
        SpecOrderNameAddressDetails :=
          CompanyInfo."Ship-to Name" + CompanyInfo."Ship-to Name 2" +
          CompanyInfo."Ship-to Address" + CompanyInfo."Ship-to Address 2" +
          CompanyInfo."Ship-to Post Code" + CompanyInfo."Ship-to City" +
          CompanyInfo."Ship-to Contact";
      END;
      IF NameAddressDetails = '' THEN
        NameAddressDetails := SpecOrderNameAddressDetails;
      EXIT(NameAddressDetails = SpecOrderNameAddressDetails);
    END;

    LOCAL PROCEDURE InitRecOnVendUpdate@39();
    BEGIN
      IF NOT SkipInitialization THEN
        InitInsert;
    END;

    PROCEDURE HasLineWithTDS@1500001() : Boolean;
    VAR
      PurchLine@1500000 : Record 39;
    BEGIN
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("TDS Nature of Deduction",'<>%1','');
      EXIT(NOT PurchLine.ISEMPTY);
    END;

    PROCEDURE HasLineWithWorkTax@1500002() : Boolean;
    VAR
      PurchLine@1500000 : Record 39;
    BEGIN
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER("Work Tax Nature Of Deduction",'<>%1','');
      EXIT(NOT PurchLine.ISEMPTY);
    END;

    PROCEDURE InvoicedLineExists@56() : Boolean;
    VAR
      PurchLine@1000 : Record 39;
    BEGIN
      PurchLine.SETRANGE("Document Type","Document Type");
      PurchLine.SETRANGE("Document No.","No.");
      PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
      PurchLine.SETFILTER("Quantity Invoiced",'<>%1',0);
      EXIT(NOT PurchLine.ISEMPTY);
    END;

    PROCEDURE CreateDimSetForPrepmtAccDefaultDim@44();
    VAR
      PurchaseLine@1001 : Record 39;
      TempPurchaseLine@1002 : TEMPORARY Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type","Document Type");
      PurchaseLine.SETRANGE("Document No.","No.");
      PurchaseLine.SETFILTER("Prepmt. Amt. Inv.",'<>%1',0);
      IF PurchaseLine.FINDSET THEN
        REPEAT
          CollectParamsInBufferForCreateDimSet(TempPurchaseLine,PurchaseLine);
        UNTIL PurchaseLine.NEXT = 0;
      TempPurchaseLine.RESET;
      TempPurchaseLine.MARKEDONLY(FALSE);
      IF TempPurchaseLine.FINDSET THEN
        REPEAT
          PurchaseLine.CreateDim(DATABASE::"G/L Account",TempPurchaseLine."No.",
            DATABASE::Job,TempPurchaseLine."Job No.",
            DATABASE::"Responsibility Center",TempPurchaseLine."Responsibility Center",
            DATABASE::"Work Center",TempPurchaseLine."Work Center No.");
        UNTIL TempPurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CollectParamsInBufferForCreateDimSet@49(VAR TempPurchaseLine@1000 : TEMPORARY Record 39;PurchaseLine@1001 : Record 39);
    VAR
      GenPostingSetup@1002 : Record 252;
      DefaultDimension@1003 : Record 352;
    BEGIN
      TempPurchaseLine.SETRANGE("Gen. Bus. Posting Group",PurchaseLine."Gen. Bus. Posting Group");
      TempPurchaseLine.SETRANGE("Gen. Prod. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
      IF NOT TempPurchaseLine.FINDFIRST THEN BEGIN
        GenPostingSetup.GET(PurchaseLine."Gen. Bus. Posting Group",PurchaseLine."Gen. Prod. Posting Group");
        GenPostingSetup.TESTFIELD("Purch. Prepayments Account");
        DefaultDimension.SETRANGE("Table ID",DATABASE::"G/L Account");
        DefaultDimension.SETRANGE("No.",GenPostingSetup."Purch. Prepayments Account");
        InsertTempPurchaseLineInBuffer(TempPurchaseLine,PurchaseLine,
          GenPostingSetup."Purch. Prepayments Account",DefaultDimension.ISEMPTY);
      END ELSE
        IF NOT TempPurchaseLine.MARK THEN BEGIN
          TempPurchaseLine.SETRANGE("Job No.",PurchaseLine."Job No.");
          TempPurchaseLine.SETRANGE("Responsibility Center",PurchaseLine."Responsibility Center");
          TempPurchaseLine.SETRANGE("Work Center No.",PurchaseLine."Work Center No.");
          IF TempPurchaseLine.ISEMPTY THEN
            InsertTempPurchaseLineInBuffer(TempPurchaseLine,PurchaseLine,TempPurchaseLine."No.",FALSE)
        END;
    END;

    LOCAL PROCEDURE InsertTempPurchaseLineInBuffer@35(VAR TempPurchaseLine@1000 : TEMPORARY Record 39;PurchaseLine@1001 : Record 39;AccountNo@1002 : Code[20];DefaultDimenstionsNotExist@1003 : Boolean);
    BEGIN
      TempPurchaseLine.INIT;
      TempPurchaseLine."Line No." := PurchaseLine."Line No.";
      TempPurchaseLine."No." := AccountNo;
      TempPurchaseLine."Job No." := PurchaseLine."Job No.";
      TempPurchaseLine."Responsibility Center" := PurchaseLine."Responsibility Center";
      TempPurchaseLine."Work Center No." := PurchaseLine."Work Center No.";
      TempPurchaseLine."Gen. Bus. Posting Group" := PurchaseLine."Gen. Bus. Posting Group";
      TempPurchaseLine."Gen. Prod. Posting Group" := PurchaseLine."Gen. Prod. Posting Group";
      TempPurchaseLine.MARK := DefaultDimenstionsNotExist;
      TempPurchaseLine.INSERT;
    END;

    PROCEDURE OpenPurchaseOrderStatistics@60();
    BEGIN
      CalcInvDiscForHeader;
      IF PurchSetup."Calc. Inv. Discount" THEN BEGIN
        CalcInvDiscForHeader;
        COMMIT;
      END;
      IF Structure <> '' THEN BEGIN
        PurchLine.CalculateStructures(Rec);
        PurchLine.AdjustStructureAmounts(Rec);
        PurchLine.UpdatePurchLines(Rec);
        PurchLine.CalculateTDS(Rec);
      END ELSE
        PurchLine.CalculateTDS(Rec);
      CreateDimSetForPrepmtAccDefaultDim;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Purchase Order Statistics",Rec);
    END;

    PROCEDURE GetCardpageID@58() : Integer;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(PAGE::"Purchase Quote");
        "Document Type"::Order:
          EXIT(PAGE::"Purchase Order");
        "Document Type"::Invoice:
          EXIT(PAGE::"Purchase Invoice");
        "Document Type"::"Credit Memo":
          EXIT(PAGE::"Purchase Credit Memo");
        "Document Type"::"Blanket Order":
          EXIT(PAGE::"Blanket Purchase Order");
        "Document Type"::"Return Order":
          EXIT(PAGE::"Purchase Return Order");
      END;
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckPurchasePostRestrictions@54();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckPurchaseReleaseRestrictions@55();
    BEGIN
    END;

    PROCEDURE SetStatus@53(NewStatus@1000 : Option);
    BEGIN
      Status := NewStatus;
      MODIFY;
    END;

    PROCEDURE TriggerOnAfterPostPurchaseDoc@116(VAR GenJnlPostLine@1001 : Codeunit 12;PurchRcpHdrNo@1002 : Code[20];RetShptHdrNo@1003 : Code[20];PurchInvHdrNo@1004 : Code[20];PurchCrMemoHdrNo@1005 : Code[20]);
    VAR
      PurchPost@1000 : Codeunit 90;
    BEGIN
      PurchPost.OnAfterPostPurchaseDoc(Rec,GenJnlPostLine,PurchRcpHdrNo,RetShptHdrNo,PurchInvHdrNo,PurchCrMemoHdrNo);
    END;

    PROCEDURE DeferralHeadersExist@38() : Boolean;
    VAR
      DeferralHeader@1000 : Record 1701;
      DeferralUtilities@1001 : Codeunit 1720;
    BEGIN
      DeferralHeader.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetPurchDeferralDocType);
      DeferralHeader.SETRANGE("Gen. Jnl. Template Name",'');
      DeferralHeader.SETRANGE("Gen. Jnl. Batch Name",'');
      DeferralHeader.SETRANGE("Document Type","Document Type");
      DeferralHeader.SETRANGE("Document No.","No.");
      EXIT(NOT DeferralHeader.ISEMPTY);
    END;

    LOCAL PROCEDURE ConfirmUpdateDeferralDate@85();
    BEGIN
      IF HideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(DeferralLineQst,FALSE,FIELDCAPTION("Posting Date"));
      IF Confirmed THEN
        UpdatePurchLines(PurchLine.FIELDCAPTION("Deferral Code"),FALSE);
    END;

    PROCEDURE BatchConfirmUpdateDeferralDate@59(VAR BatchConfirm@1000 : ' ,Skip,Update';ReplacePostingDate@1001 : Boolean;PostingDateReq@1002 : Date);
    BEGIN
      IF (NOT ReplacePostingDate) OR (PostingDateReq = "Posting Date") OR (BatchConfirm = BatchConfirm::Skip) THEN
        EXIT;

      IF NOT DeferralHeadersExist THEN
        EXIT;

      "Posting Date" := PostingDateReq;
      CASE BatchConfirm OF
        BatchConfirm::" ":
          BEGIN
            ConfirmUpdateDeferralDate;
            IF Confirmed THEN
              BatchConfirm := BatchConfirm::Update
            ELSE
              BatchConfirm := BatchConfirm::Skip;
          END;
        BatchConfirm::Update:
          UpdatePurchLines(PurchLine.FIELDCAPTION("Deferral Code"),FALSE);
      END;
      COMMIT;
    END;

    LOCAL PROCEDURE MakeExempted@1500087();
    VAR
      PurchaseLine@1500082 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type","Document Type");
      PurchaseLine.SETRANGE("Document No.","No.");
      IF PurchaseLine.FINDSET THEN
        REPEAT
          IF "GST Vendor Type" = "GST Vendor Type"::Exempted THEN BEGIN
            PurchaseLine.Exempted := TRUE;
            PurchaseLine.MODIFY(TRUE);
          END;
        UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SetSupplementaryInLine@1500003(DocumentType@1500002 : Option;DocumentNo@1500003 : Code[20];Supp@1500000 : Boolean);
    VAR
      PurchaseLine@1500001 : Record 39;
    BEGIN
      PurchaseLine.SETRANGE("Document Type",DocumentType);
      PurchaseLine.SETRANGE("Document No.",DocumentNo);
      IF PurchaseLine.FINDSET THEN
        REPEAT
          PurchaseLine.Supplementary := Supp;
          PurchaseLine.MODIFY(TRUE);
        UNTIL PurchaseLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalculateGSTStructure@1500006(VAR PurchaseHeader@1500000 : Record 38);
    VAR
      PurchaseLine@1500001 : Record 39;
    BEGIN
      PurchaseLine.CalculateStructures(PurchaseHeader);
      PurchaseLine.AdjustStructureAmounts(PurchaseHeader);
      PurchaseLine.UpdatePurchLines(PurchaseHeader);
    END;

    PROCEDURE AlreadyRecieved@1500004() : Boolean;
    VAR
      PurchaseLine@1500000 : Record 39;
    BEGIN
      PurchaseLine.RESET;
      PurchaseLine.SETRANGE("Document Type","Document Type");
      PurchaseLine.SETRANGE("Document No.","No.");
      IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,
         "Document Type"::"Blanket Order","Document Type"::Quote]
      THEN
        PurchaseLine.SETFILTER("Quantity Received",'>0')
      ELSE
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          PurchaseLine.SETFILTER("Return Qty. Shipped",'>0');
      IF PurchaseLine.FINDFIRST THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetPostInvoiceNoSeries@1500112();
    VAR
      PurchasesPayablesSetup@1500000 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      IF "Location Code" <> '' THEN
        Location.GET("Location Code");
      IF "Invoice Type" = "Invoice Type"::"Self Invoice" THEN
        IF Location."Purch. Inv. Nos. (Unreg)" <> '' THEN
          "Posting No. Series" := Location."Purch. Inv. Nos. (Unreg)"
        ELSE
          "Posting No. Series" := PurchasesPayablesSetup."Posted Purch. Inv.(Unreg)";
      IF "Invoice Type" = "Invoice Type"::Supplementary THEN
        IF Location."Purch. Inv. Nos. (Unreg Supp)" <> '' THEN
          "Posting No. Series" := Location."Purch. Inv. Nos. (Unreg Supp)"
        ELSE
          "Posting No. Series" := PurchasesPayablesSetup."Posted Purch Inv.(Unreg Supp)";
      IF "Invoice Type" = "Invoice Type"::"Debit Note" THEN
        IF Location."Pur. Inv. Nos.(Unreg Deb.Note)" <> '' THEN
          "Posting No. Series" := Location."Pur. Inv. Nos.(Unreg Deb.Note)"
        ELSE
          "Posting No. Series" := PurchasesPayablesSetup."Pst. Pur. Inv(Unreg. Deb.Note)";
    END;

    LOCAL PROCEDURE GetPostedCrMemoNoSeries@1500013();
    VAR
      PurchasesPayablesSetup@1500000 : Record 312;
    BEGIN
      PurchasesPayablesSetup.GET;
      IF "Location Code" <> '' THEN
        Location.GET("Location Code");
      IF "Invoice Type" = "Invoice Type"::"Self Invoice" THEN
        IF Location."Purch. Cr. Memo Nos. (Unreg)" <> '' THEN
          "Posting No. Series" := Location."Purch. Cr. Memo Nos. (Unreg)"
        ELSE
          "Posting No. Series" := PurchasesPayablesSetup."Posted Purch Cr. Memo(Unreg)";
    END;

    PROCEDURE InitRecordGST@1500007();
    BEGIN
      PurchSetup.GET;
      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order,"Document Type"::"Blanket Order":
          BEGIN
            NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
            NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
            IF "Location Code" <> '' THEN BEGIN
              Location.GET("Location Code");
              IF Location."Purch. Invoice Nos." <> '' THEN
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Purch. Invoice Nos.");
              IF Location."Purch. Receipt Nos." <> '' THEN
                NoSeriesMgt.SetDefaultSeries("Receiving No. Series",Location."Purch. Receipt Nos.");
              IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
                GetPostInvoiceNoSeries;
            END;
            IF "Document Type" = "Document Type"::Order THEN BEGIN
              NoSeriesMgt.SetDefaultSeries("Prepayment No. Series",PurchSetup."Posted Prepmt. Inv. Nos.");
              NoSeriesMgt.SetDefaultSeries("Prepmt. Cr. Memo No. Series",PurchSetup."Posted Prepmt. Cr. Memo Nos.");
              IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
                GetPostInvoiceNoSeries;
            END;
            IF Trading THEN BEGIN
              IF "Location Code" <> '' THEN BEGIN
                IF Location."Purh. Invoice Nos. (Trading)" <> '' THEN
                  "Posting No. Series" := Location."Purh. Invoice Nos. (Trading)"
                ELSE
                  "Posting No. Series" := PurchSetup."Posted Invoice Nos. (Trading)";
                IF Location."Purch. Rcpt. Nos. (Trading)" <> '' THEN
                  "Receiving No. Series" := Location."Purch. Rcpt. Nos. (Trading)"
                ELSE
                  "Receiving No. Series" := PurchSetup."Posted Purch. Rcpt. (Trading)";
              END ELSE BEGIN
                "Posting No. Series" := PurchSetup."Posted Invoice Nos. (Trading)";
                "Receiving No. Series" := PurchSetup."Posted Purch. Rcpt. (Trading)";
              END;
            END;
          END;
        "Document Type"::Invoice:
          BEGIN
            IF NOT Trading THEN BEGIN
              IF ("No. Series" <> '') AND
                (PurchSetup."Invoice Nos." = PurchSetup."Posted Invoice Nos.")
            THEN
                "Posting No. Series" := "No. Series"
              ELSE
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Invoice Nos.");
            IF PurchSetup."Receipt on Invoice" THEN
              NoSeriesMgt.SetDefaultSeries("Receiving No. Series",PurchSetup."Posted Receipt Nos.");
            IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
              GetPostInvoiceNoSeries;
            END;
            IF Trading THEN BEGIN
              IF "Location Code" <> '' THEN BEGIN
                Location.GET("Location Code");
                IF Location."Purh. Invoice Nos. (Trading)" <> '' THEN
                  "Posting No. Series" := Location."Purh. Invoice Nos. (Trading)"
                ELSE
                  "Posting No. Series" := PurchSetup."Posted Invoice Nos. (Trading)";
                IF PurchSetup."Receipt on Invoice" THEN BEGIN
                  IF Location."Purch. Rcpt. Nos. (Trading)" <> '' THEN
                    "Receiving No. Series" := Location."Purch. Rcpt. Nos. (Trading)"
                  ELSE
                    "Receiving No. Series" := PurchSetup."Posted Purch. Rcpt. (Trading)";
                END;
              END ELSE BEGIN
                "Posting No. Series" := PurchSetup."Posted Invoice Nos. (Trading)";
                IF PurchSetup."Receipt on Invoice" THEN
                  "Receiving No. Series" := PurchSetup."Posted Purch. Rcpt. (Trading)";
              END;
            END;
          END;
        "Document Type"::"Return Order":
          BEGIN
            IF NOT Trading THEN BEGIN
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");
              NoSeriesMgt.SetDefaultSeries("Return Shipment No. Series",PurchSetup."Posted Return Shpt. Nos.");
              IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
                GetPostedCrMemoNoSeries;
            END;
            IF Trading THEN BEGIN
              IF "Location Code" <> '' THEN BEGIN
                Location.GET("Location Code");
                IF Location."Purch Cr. Memo Nos. (Trading)" <> '' THEN
                  "Posting No. Series" := Location."Purch Cr. Memo Nos. (Trading)"
                ELSE
                  "Posting No. Series" := PurchSetup."Posted Purch Cr. Memo(Trading)";
                IF Location."Purch. Rcpt. Nos. (Trading)" <> '' THEN
                  "Return Shipment No. Series" := Location."Purch. Ret Shpt Nos. (Trading)"
                ELSE
                  "Return Shipment No. Series" := PurchSetup."Posted Ret Shpt Nos. (Trading)";
              END ELSE BEGIN
                "Posting No. Series" := PurchSetup."Posted Purch Cr. Memo(Trading)";
                "Return Shipment No. Series" := PurchSetup."Posted Ret Shpt Nos. (Trading)";
              END;
            END;
          END;
        "Document Type"::"Credit Memo":
      BEGIN
            IF NOT Trading THEN BEGIN
              IF ("No. Series" <> '') AND
               (PurchSetup."Credit Memo Nos." = PurchSetup."Posted Credit Memo Nos.")
            THEN
                "Posting No. Series" := "No. Series"
              ELSE
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",PurchSetup."Posted Credit Memo Nos.");
              IF PurchSetup."Return Shipment on Credit Memo" THEN
                NoSeriesMgt.SetDefaultSeries("Return Shipment No. Series",PurchSetup."Posted Return Shpt. Nos.");
              IF "GST Vendor Type" = "GST Vendor Type"::Unregistered THEN
                GetPostedCrMemoNoSeries;
            END;
            IF Trading THEN BEGIN
              IF "Location Code" <> '' THEN BEGIN
                Location.GET("Location Code");
                IF Location."Purch Cr. Memo Nos. (Trading)" <> '' THEN
                  "Posting No. Series" := Location."Purch Cr. Memo Nos. (Trading)"
                ELSE
                  "Posting No. Series" := PurchSetup."Posted Purch Cr. Memo(Trading)";
                IF PurchSetup."Return Shipment on Credit Memo" THEN BEGIN
                  IF Location."Purch. Rcpt. Nos. (Trading)" <> '' THEN
                    "Return Shipment No. Series" := Location."Purch. Ret Shpt Nos. (Trading)"
                  ELSE
                    "Return Shipment No. Series" := PurchSetup."Posted Ret Shpt Nos. (Trading)";
                END;
      END ELSE BEGIN
                "Posting No. Series" := PurchSetup."Posted Purch Cr. Memo(Trading)";
                IF PurchSetup."Return Shipment on Credit Memo" THEN
                  "Return Shipment No. Series" := PurchSetup."Posted Ret Shpt Nos. (Trading)";
              END;
            END;
          END;
      END;
    END;

    PROCEDURE SetShipToAddress@117(ShipToName@1000 : Text[50];ShipToName2@1001 : Text[50];ShipToAddress@1002 : Text[50];ShipToAddress2@1003 : Text[50];ShipToCity@1004 : Text[30];ShipToPostCode@1005 : Code[20];ShipToCounty@1006 : Text[30];ShipToCountryRegionCode@1007 : Code[10]);
    BEGIN
      "Ship-to Name" := ShipToName;
      "Ship-to Name 2" := ShipToName2;
      "Ship-to Address" := ShipToAddress;
      "Ship-to Address 2" := ShipToAddress2;
      "Ship-to City" := ShipToCity;
      "Ship-to Post Code" := ShipToPostCode;
      "Ship-to County" := ShipToCounty;
      "Ship-to Country/Region Code" := ShipToCountryRegionCode;
    END;

    PROCEDURE InitFromPurchHeader@109(SourcePurchHeader@1000 : Record 38);
    BEGIN
      "Document Date" := SourcePurchHeader."Document Date";
      "Expected Receipt Date" := SourcePurchHeader."Expected Receipt Date";
      "Shortcut Dimension 1 Code" := SourcePurchHeader."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := SourcePurchHeader."Shortcut Dimension 2 Code";
      "Dimension Set ID" := SourcePurchHeader."Dimension Set ID";
      "Location Code" := SourcePurchHeader."Location Code";
      SetShipToAddress(
        SourcePurchHeader."Ship-to Name",SourcePurchHeader."Ship-to Name 2",SourcePurchHeader."Ship-to Address",
        SourcePurchHeader."Ship-to Address 2",SourcePurchHeader."Ship-to City",SourcePurchHeader."Ship-to Post Code",
        SourcePurchHeader."Ship-to County",SourcePurchHeader."Ship-to Country/Region Code");
      "Ship-to Contact" := SourcePurchHeader."Ship-to Contact";
    END;

    BEGIN
    END.
  }
}

