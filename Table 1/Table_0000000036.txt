OBJECT Table 36 Sales Header
{
  OBJECT-PROPERTIES
  {
    Date=16-12-17;
    Time=[ 3:20:30 PM];
    Version List=NAVW19.00.00.48992,NAVIN9.00.00.48992,TFS225680;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Sell-to Customer Name;
    OnInsert=VAR
               ArchiveManagement@1000 : Codeunit 5063;
             BEGIN
               InitInsert;
               InsertMode := TRUE;

               IF GetFilterCustNo <> '' THEN
                 VALIDATE("Sell-to Customer No.",GetFilterCustNo);

               IF GetFilterContNo <> '' THEN
                 VALIDATE("Sell-to Contact No.",GetFilterContNo);

               "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Sales Header","Document Type","No.");
             END;

    OnDelete=VAR
               DOPaymentTransLogEntry@1002 : Record 829;
               ArchiveManagement@1000 : Codeunit 5063;
             BEGIN
               IF DOPaymentTransLogEntry.FINDFIRST THEN
                 DOPaymentTransLogMgt.ValidateCanDeleteDocument("Payment Method Code","Document Type",FORMAT("Document Type"),"No.");

               IF NOT UserSetupMgt.CheckRespCenter(0,"Responsibility Center") THEN
                 ERROR(
                   Text022,
                   RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter);

               SalesPost.DeleteHeader(
                 Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);

               ArchiveManagement.AutoArchiveSalesDocument(Rec);

               UpdateOpportunity;

               VALIDATE("Applies-to ID",'');
               VALIDATE("Incoming Document Entry No.",0);

               ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
               SalesLine.RESET;
               SalesLine.LOCKTABLE;

               WhseRequest.SETRANGE("Source Type",DATABASE::"Sales Line");
               WhseRequest.SETRANGE("Source Subtype","Document Type");
               WhseRequest.SETRANGE("Source No.","No.");
               WhseRequest.DELETEALL(TRUE);

               SalesLine.SETRANGE("Document Type","Document Type");
               SalesLine.SETRANGE("Document No.","No.");
               SalesLine.SETRANGE(Type,SalesLine.Type::"Charge (Item)");

               DeleteSalesLines;
               SalesLine.SETRANGE(Type);
               DeleteSalesLines;

               SalesCommentLine.SETRANGE("Document Type","Document Type");
               SalesCommentLine.SETRANGE("No.","No.");
               SalesCommentLine.DELETEALL;

               GateEntryAttachment2.RESET;
               GateEntryAttachment2.SETRANGE("Source Type",GateEntryAttachment2."Source Type"::"Sales Return Order");
               GateEntryAttachment2.SETRANGE("Entry Type",GateEntryAttachment2."Entry Type"::Inward);
               GateEntryAttachment2.SETRANGE("Source No.","No.");
               IF GateEntryAttachment2.FINDFIRST THEN
                 GateEntryAttachment2.DELETEALL;

               StrOrder.SETCURRENTKEY("Document Type","Document No.",Type);
               StrOrder.SETRANGE("Document Type","Document Type");
               StrOrder.SETRANGE("Document No.","No.");
               StrOrder.SETRANGE(Type,StrOrder.Type::Sale);
               IF StrOrder.FINDFIRST THEN
                 StrOrder.DELETEALL;

               StrOrderLine.SETCURRENTKEY("Document Type","Document No.",Type);
               StrOrderLine.SETRANGE("Document Type","Document Type");
               StrOrderLine.SETRANGE("Document No.","No.");
               StrOrderLine.SETRANGE(Type,StrOrder.Type::Sale);
               IF StrOrderLine.FINDFIRST THEN
                 StrOrderLine.DELETEALL;

               IF (SalesShptHeader."No." <> '') OR
                  (SalesInvHeader."No." <> '') OR
                  (SalesCrMemoHeader."No." <> '') OR
                  (ReturnRcptHeader."No." <> '') OR
                  (SalesInvHeaderPrepmt."No." <> '') OR
                  (SalesCrMemoHeaderPrepmt."No." <> '')
               THEN
                 MESSAGE(PostedDocsToPrintCreatedMsg);
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=[ENU=Sales Header;
               ENN=Sales Header];
    LookupPageID=Page45;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENN=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ENN=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                CheckCreditLimitIfLineNotInsertedYet;
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Sell-to Customer No." <> xRec."Sell-to Customer No.") AND
                                                                   (xRec."Sell-to Customer No." <> '')
                                                                THEN BEGIN
                                                                  IF ("Opportunity No." <> '') AND ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) THEN
                                                                    ERROR(
                                                                      Text062,
                                                                      FIELDCAPTION("Sell-to Customer No."),
                                                                      FIELDCAPTION("Opportunity No."),
                                                                      "Opportunity No.",
                                                                      "Document Type");
                                                                  IF HideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Sell-to Customer No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Sell-to Customer No." = '' THEN BEGIN
                                                                      IF SalesLine.FINDFIRST THEN
                                                                        ERROR(
                                                                          Text005,
                                                                          FIELDCAPTION("Sell-to Customer No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      GSTManagement.UpdateInvoiceType(Rec);
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      EXIT;
                                                                    END;
                                                                    IF "Document Type" = "Document Type"::Order THEN
                                                                      SalesLine.SETFILTER("Quantity Shipped",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::Invoice THEN BEGIN
                                                                        SalesLine.SETRANGE("Sell-to Customer No.",xRec."Sell-to Customer No.");
                                                                        SalesLine.SETFILTER("Shipment No.",'<>%1','');
                                                                      END;
                                                                    IF SalesLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        SalesLine.TESTFIELD("Quantity Shipped",0)
                                                                      ELSE
                                                                        SalesLine.TESTFIELD("Shipment No.",'');
                                                                    SalesLine.SETRANGE("Shipment No.");
                                                                    SalesLine.SETRANGE("Quantity Shipped");

                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                      IF SalesLine.FIND('-') THEN
                                                                        SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      SalesLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                    END;
                                                                    IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                      SalesLine.SETFILTER("Return Qty. Received",'<>0')
                                                                    ELSE
                                                                      IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
                                                                        SalesLine.SETRANGE("Sell-to Customer No.",xRec."Sell-to Customer No.");
                                                                        SalesLine.SETFILTER("Return Receipt No.",'<>%1','');
                                                                      END;
                                                                    IF SalesLine.FINDFIRST THEN
                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        SalesLine.TESTFIELD("Return Qty. Received",0)
                                                                      ELSE
                                                                        SalesLine.TESTFIELD("Return Receipt No.",'');
                                                                    SalesLine.RESET
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Sell-to Customer No." <> "Sell-to Customer No.")
                                                                THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                                                                  IF NOT SalesLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Sell-to Customer No."));
                                                                  SalesLine.RESET;
                                                                END;
                                                                GetCust("Sell-to Customer No.");
                                                                InitSellToCustFromCustomer(Rec,Cust);
                                                                "Responsibility Center" := UserSetupMgt.GetRespCenter(0,Cust."Responsibility Center");
                                                                VALIDATE("Location Code",UserSetupMgt.GetLocation(0,Cust."Location Code","Responsibility Center"));

                                                                IF "Sell-to Customer No." = xRec."Sell-to Customer No." THEN
                                                                  IF ShippedSalesLinesExist OR ReturnReceiptExist THEN BEGIN
                                                                    TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
                                                                    TESTFIELD("Gen. Bus. Posting Group",xRec."Gen. Bus. Posting Group");
                                                                  END;
                                                                "Sell-to IC Partner Code" := Cust."IC Partner Code";
                                                                "Send IC Document" := ("Sell-to IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);
                                                                IF Cust."Bill-to Customer No." <> '' THEN
                                                                  VALIDATE("Bill-to Customer No.",Cust."Bill-to Customer No.")
                                                                ELSE BEGIN
                                                                  IF "Bill-to Customer No." = "Sell-to Customer No." THEN
                                                                    SkipBillToContact := TRUE;
                                                                  VALIDATE("Bill-to Customer No.","Sell-to Customer No.");
                                                                  SkipBillToContact := FALSE;
                                                                END;
                                                                VALIDATE("Ship-to Code",'');
                                                                GetShippingTime(FIELDNO("Sell-to Customer No."));
                                                                IF (xRec."Sell-to Customer No." <> "Sell-to Customer No.") OR
                                                                   (xRec."Currency Code" <> "Currency Code") OR
                                                                   (xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group") OR
                                                                   (xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group")
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Sell-to Customer No."));

                                                                VALIDATE(Structure);
                                                                IF "Invoice Type" = "Invoice Type"::" " THEN
                                                                  "Invoice Type" := "Invoice Type"::Taxable;

                                                                IF NODHeader.GET(NODHeader.Type::Customer,"Sell-to Customer No.") THEN
                                                                  VALIDATE("Assessee Code",NODHeader."Assesse Code")
                                                                ELSE
                                                                  VALIDATE("Assessee Code",'');

                                                                IF NOT SkipSellToContact THEN
                                                                  UpdateSellToCont("Sell-to Customer No.");

                                                                IF( "GST Customer Type" <>  "GST Customer Type"::" ") AND (xRec."Sell-to Customer No." <> "Sell-to Customer No.") THEN
                                                                  VALIDATE("Invoice Type");
                                                              END;

                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENN=Sell-to Customer No.] }
    { 3   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              ENN=No.] }
    { 4   ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                BilltoCustomerNoChanged := xRec."Bill-to Customer No." <> "Bill-to Customer No.";
                                                                GetCust("Bill-to Customer No.");
                                                                "GST Customer Type" := Cust."GST Customer Type";
                                                                "GST Bill-to State Code" := '';
                                                                IF "GST Customer Type" <> "GST Customer Type"::" " THEN
                                                                  Cust.TESTFIELD(Address);

                                                                IF NOT ("GST Customer Type" IN ["GST Customer Type"::Export,"GST Customer Type"::"Deemed Export",
                                                                  "GST Customer Type"::"SEZ Development","GST Customer Type"::"SEZ Unit"]) THEN
                                                                  "GST Bill-to State Code" := Cust."State Code";
                                                                IF "GST Customer Type" = "GST Customer Type"::Unregistered THEN
                                                                  "Nature of Supply" := "Nature of Supply"::B2C;
                                                                IF BilltoCustomerNoChanged THEN
                                                                  IF xRec."Bill-to Customer No." = '' THEN BEGIN
                                                                    GSTManagement.UpdateInvoiceType(Rec);
                                                                    InitRecord
                                                                  END ELSE BEGIN
                                                                    VALIDATE("Credit Card No.",'');
                                                                    IF HideValidationDialog OR NOT GUIALLOWED THEN
                                                                      Confirmed := TRUE
                                                                    ELSE
                                                                      Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Bill-to Customer No."));
                                                                    IF Confirmed THEN BEGIN
                                                                      SalesLine.SETRANGE("Document Type","Document Type");
                                                                      SalesLine.SETRANGE("Document No.","No.");
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        SalesLine.SETFILTER("Quantity Shipped",'<>0')
                                                                      ELSE
                                                                        IF "Document Type" = "Document Type"::Invoice THEN
                                                                          SalesLine.SETFILTER("Shipment No.",'<>%1','');

                                                                      IF SalesLine.FINDFIRST THEN
                                                                        IF "Document Type" = "Document Type"::Order THEN
                                                                          SalesLine.TESTFIELD("Quantity Shipped",0)
                                                                        ELSE
                                                                          SalesLine.TESTFIELD("Shipment No.",'');
                                                                      SalesLine.SETRANGE("Shipment No.");
                                                                      SalesLine.SETRANGE("Quantity Shipped");

                                                                      IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                        SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
                                                                        IF SalesLine.FIND('-') THEN
                                                                          SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                        SalesLine.SETRANGE("Prepmt. Amt. Inv.");
                                                                      END;

                                                                      IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                        SalesLine.SETFILTER("Return Qty. Received",'<>0')
                                                                      ELSE
                                                                        IF "Document Type" = "Document Type"::"Credit Memo" THEN
                                                                          SalesLine.SETFILTER("Return Receipt No.",'<>%1','');

                                                                      IF SalesLine.FINDFIRST THEN
                                                                        IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                          SalesLine.TESTFIELD("Return Qty. Received",0)
                                                                        ELSE
                                                                          SalesLine.TESTFIELD("Return Receipt No.",'');
                                                                      SalesLine.RESET
                                                                    END ELSE
                                                                      "Bill-to Customer No." := xRec."Bill-to Customer No.";
                                                                  END;

                                                                GetCust("Bill-to Customer No.");
                                                                Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
                                                                Cust.TESTFIELD("Customer Posting Group");
                                                                CheckCrLimit;
                                                                InitBillToCustFromCustomer(Rec,Cust);

                                                                IF NOT BilltoCustomerNoChanged THEN BEGIN
                                                                  IF ShippedSalesLinesExist THEN BEGIN
                                                                    TESTFIELD("Customer Disc. Group",xRec."Customer Disc. Group");
                                                                    TESTFIELD("Currency Code",xRec."Currency Code");
                                                                  END;
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");

                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                                VALIDATE("Payment Method Code");
                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Prepayment %");

                                                                IF (xRec."Sell-to Customer No." = "Sell-to Customer No.") AND
                                                                   BilltoCustomerNoChanged
                                                                THEN BEGIN
                                                                  RecreateSalesLines(FIELDCAPTION("Bill-to Customer No."));
                                                                  BilltoCustomerNoChanged := FALSE;
                                                                END;
                                                                IF NOT SkipBillToContact THEN
                                                                  UpdateBillToCont("Bill-to Customer No.");

                                                                TaxAreaUpdate;

                                                                "Bill-to IC Partner Code" := Cust."IC Partner Code";
                                                                "Send IC Document" := ("Bill-to IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);
                                                              END;

                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              ENN=Bill-to Customer No.];
                                                   NotBlank=Yes }
    { 5   ;   ;Bill-to Name        ;Text50        ;CaptionML=[ENU=Bill-to Name;
                                                              ENN=Bill-to Name] }
    { 6   ;   ;Bill-to Name 2      ;Text50        ;CaptionML=[ENU=Bill-to Name 2;
                                                              ENN=Bill-to Name 2] }
    { 7   ;   ;Bill-to Address     ;Text50        ;CaptionML=[ENU=Bill-to Address;
                                                              ENN=Bill-to Address] }
    { 8   ;   ;Bill-to Address 2   ;Text50        ;CaptionML=[ENU=Bill-to Address 2;
                                                              ENN=Bill-to Address 2] }
    { 9   ;   ;Bill-to City        ;Text30        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to City;
                                                              ENN=Bill-to City] }
    { 10  ;   ;Bill-to Contact     ;Text50        ;CaptionML=[ENU=Bill-to Contact;
                                                              ENN=Bill-to Contact] }
    { 11  ;   ;Your Reference      ;Text35        ;CaptionML=[ENU=Your Reference;
                                                              ENN=Your Reference] }
    { 12  ;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Sell-to Customer No.));
                                                   OnValidate=BEGIN
                                                                IF ("Document Type" = "Document Type"::Order) AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Purch. Order Line No.",'<>0');
                                                                  IF NOT SalesLine.ISEMPTY THEN
                                                                    ERROR(
                                                                      Text006,
                                                                      FIELDCAPTION("Ship-to Code"));
                                                                  SalesLine.RESET;
                                                                END;
                                                                "GST Ship-to State Code" := '';
                                                                IF ("Document Type" <> "Document Type"::"Return Order") AND
                                                                   ("Document Type" <> "Document Type"::"Credit Memo")
                                                                THEN
                                                                  IF "Ship-to Code" <> '' THEN BEGIN
                                                                    IF xRec."Ship-to Code" <> '' THEN
                                                                      BEGIN
                                                                      GetCust("Sell-to Customer No.");
                                                                      IF Cust."Location Code" <> '' THEN
                                                                        VALIDATE("Location Code",Cust."Location Code");
                                                                      // "Tax Area Code" := Cust."Tax Area Code";
                                                                    END;
                                                                    ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
                                                                    "Ship-to Name" := ShipToAddr.Name;
                                                                    "Ship-to Name 2" := ShipToAddr."Name 2";
                                                                    "Ship-to Address" := ShipToAddr.Address;
                                                                    "Ship-to Address 2" := ShipToAddr."Address 2";
                                                                    "Ship-to City" := ShipToAddr.City;
                                                                    "Ship-to Post Code" := ShipToAddr."Post Code";
                                                                    "Ship-to County" := ShipToAddr.County;
                                                                    VALIDATE("Ship-to Country/Region Code",ShipToAddr."Country/Region Code");
                                                                    "Ship-to Contact" := ShipToAddr.Contact;
                                                                    "Shipment Method Code" := ShipToAddr."Shipment Method Code";
                                                                    IF ShipToAddr."Location Code" <> '' THEN
                                                                      VALIDATE("Location Code",ShipToAddr."Location Code");
                                                                    "Shipping Agent Code" := ShipToAddr."Shipping Agent Code";
                                                                    "Shipping Agent Service Code" := ShipToAddr."Shipping Agent Service Code";
                                                                    IF ShipToAddr."Tax Area Code" <> '' THEN
                                                                      "Tax Area Code" := ShipToAddr."Tax Area Code";
                                                                    "Tax Liable" := ShipToAddr."Tax Liable";
                                                                    IF "GST Customer Type" <> "GST Customer Type"::" " THEN
                                                                      IF NOT ("GST Customer Type" IN ["GST Customer Type"::Export,"GST Customer Type"::"Deemed Export",
                                                                        "GST Customer Type"::"SEZ Development","GST Customer Type"::"SEZ Unit"]) THEN BEGIN
                                                                        ShipToAddr.TESTFIELD(State);
                                                                        "GST Ship-to State Code" := ShipToAddr.State;
                                                                      END;
                                                                  END ELSE
                                                                    IF "Sell-to Customer No." <> '' THEN BEGIN
                                                                      GetCust("Sell-to Customer No.");
                                                                      "Ship-to Name" := Cust.Name;
                                                                      "Ship-to Name 2" := Cust."Name 2";
                                                                      "Ship-to Address" := Cust.Address;
                                                                      "Ship-to Address 2" := Cust."Address 2";
                                                                      "Ship-to City" := Cust.City;
                                                                      "Ship-to Post Code" := Cust."Post Code";
                                                                      "Ship-to County" := Cust.County;
                                                                      VALIDATE("Ship-to Country/Region Code",Cust."Country/Region Code");
                                                                      "Ship-to Contact" := Cust.Contact;
                                                                      "Shipment Method Code" := Cust."Shipment Method Code";
                                                                      // "Tax Area Code" := Cust."Tax Area Code";
                                                                      "Tax Liable" := Cust."Tax Liable";
                                                                      IF Cust."Location Code" <> '' THEN
                                                                        VALIDATE("Location Code",Cust."Location Code");
                                                                      "Shipping Agent Code" := Cust."Shipping Agent Code";
                                                                      "Shipping Agent Service Code" := Cust."Shipping Agent Service Code";
                                                                    END;

                                                                IF "Document Type" IN ["Document Type"::"Credit Memo","Document Type"::"Return Order"] THEN BEGIN
                                                                  IF ShipToAddr.GET("Sell-to Customer No.","Ship-to Code") THEN
                                                                    IF NOT ("GST Customer Type" IN ["GST Customer Type"::Export,"GST Customer Type"::"Deemed Export",
                                                                      "GST Customer Type"::"SEZ Development","GST Customer Type"::"SEZ Unit"]) THEN BEGIN
                                                                         ShipToAddr.TESTFIELD(State);
                                                                      "GST Ship-to State Code" := ShipToAddr.State;
                                                                    END;
                                                                END;

                                                                GetShippingTime(FIELDNO("Ship-to Code"));

                                                                TaxAreaUpdate;

                                                                IF (xRec."Sell-to Customer No." = "Sell-to Customer No.") AND
                                                                   (xRec."Ship-to Code" <> "Ship-to Code")
                                                                THEN
                                                                  IF (xRec."VAT Country/Region Code" <> "VAT Country/Region Code") OR
                                                                     (xRec."Tax Area Code" <> "Tax Area Code")
                                                                  THEN
                                                                    RecreateSalesLines(FIELDCAPTION("Ship-to Code"))
                                                                  ELSE BEGIN
                                                                    IF xRec."Shipping Agent Code" <> "Shipping Agent Code" THEN
                                                                      MessageIfSalesLinesExist(FIELDCAPTION("Shipping Agent Code"));
                                                                    IF xRec."Shipping Agent Service Code" <> "Shipping Agent Service Code" THEN
                                                                      MessageIfSalesLinesExist(FIELDCAPTION("Shipping Agent Service Code"));
                                                                    IF xRec."Tax Liable" <> "Tax Liable" THEN
                                                                      VALIDATE("Tax Liable");
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Ship-to Code;
                                                              ENN=Ship-to Code] }
    { 13  ;   ;Ship-to Name        ;Text50        ;CaptionML=[ENU=Ship-to Name;
                                                              ENN=Ship-to Name] }
    { 14  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ENN=Ship-to Name 2] }
    { 15  ;   ;Ship-to Address     ;Text50        ;CaptionML=[ENU=Ship-to Address;
                                                              ENN=Ship-to Address] }
    { 16  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=[ENU=Ship-to Address 2;
                                                              ENN=Ship-to Address 2] }
    { 17  ;   ;Ship-to City        ;Text30        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              ENN=Ship-to City] }
    { 18  ;   ;Ship-to Contact     ;Text50        ;CaptionML=[ENU=Ship-to Contact;
                                                              ENN=Ship-to Contact] }
    { 19  ;   ;Order Date          ;Date          ;OnValidate=BEGIN
                                                                IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND
                                                                   NOT ("Order Date" = xRec."Order Date")
                                                                THEN
                                                                  PriceMessageIfSalesLinesExist(FIELDCAPTION("Order Date"));
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Order Date;
                                                              ENN=Order Date] }
    { 20  ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                TestNoSeriesDate(
                                                                  "Posting No.","Posting No. Series",
                                                                  FIELDCAPTION("Posting No."),FIELDCAPTION("Posting No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepayment No.","Prepayment No. Series",
                                                                  FIELDCAPTION("Prepayment No."),FIELDCAPTION("Prepayment No. Series"));
                                                                TestNoSeriesDate(
                                                                  "Prepmt. Cr. Memo No.","Prepmt. Cr. Memo No. Series",
                                                                  FIELDCAPTION("Prepmt. Cr. Memo No."),FIELDCAPTION("Prepmt. Cr. Memo No. Series"));

                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  VALIDATE("Document Date","Posting Date");

                                                                IF ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) AND
                                                                   NOT ("Posting Date" = xRec."Posting Date")
                                                                THEN
                                                                  PriceMessageIfSalesLinesExist(FIELDCAPTION("Posting Date"));

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  UpdateCurrencyFactor;
                                                                  IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                    ConfirmUpdateCurrencyFactor;
                                                                END;

                                                                IF "Posting Date" <> xRec."Posting Date" THEN
                                                                  IF DeferralHeadersExist THEN
                                                                    ConfirmUpdateDeferralDate;
                                                                SynchronizeAsmHeader;
                                                                UpdateSalesLines(FIELDCAPTION("Posting Date"),CurrFieldNo <> 0);
                                                                UpdateGenJnlLInePostingDate;
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              ENN=Posting Date] }
    { 21  ;   ;Shipment Date       ;Date          ;OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Shipment Date"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Shipment Date;
                                                              ENN=Shipment Date] }
    { 22  ;   ;Posting Description ;Text50        ;CaptionML=[ENU=Posting Description;
                                                              ENN=Posting Description] }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Due Date","Document Date");
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Pmt. Discount Date",0D);
                                                                    VALIDATE("Payment Discount %",0);
                                                                  END;
                                                                END;
                                                                IF xRec."Payment Terms Code" = "Prepmt. Payment Terms Code" THEN BEGIN
                                                                  IF xRec."Prepayment Due Date" = 0D THEN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                  VALIDATE("Prepmt. Payment Terms Code","Payment Terms Code");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Code;
                                                              ENN=Payment Terms Code] }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENN=Due Date] }
    { 25  ;   ;Payment Discount %  ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=[ENU=Payment Discount %;
                                                              ENN=Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 26  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              ENN=Pmt. Discount Date] }
    { 27  ;   ;Shipment Method Code;Code10        ;TableRelation="Shipment Method";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Shipment Method Code;
                                                              ENN=Shipment Method Code] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Location Code" <> xRec."Location Code") AND
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                THEN
                                                                  MessageIfSalesLinesExist(FIELDCAPTION("Location Code"));

                                                                UpdateShipToAddress;
                                                                UpdateOutboundWhseHandlingTime;
                                                                CompanyInfo.GET;
                                                                IF "Location Code" <> '' THEN BEGIN
                                                                  Location.GET("Location Code");
                                                                  IF CurrFieldNo <> FIELDNO(Trading) THEN
                                                                    Trading := Location."Trading Location";
                                                                END ELSE
                                                                  Trading := CompanyInfo."Trading Co.";
                                                                InitTradingNoSeries;

                                                                TaxAreaUpdate;
                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  SalesLine.RESET;
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  IF SalesLine.FIND('-') THEN
                                                                    REPEAT
                                                                      SalesLine.VALIDATE("Direct Debit To PLA / RG",FALSE);
                                                                      IF GSTManagement.IsGSTApplicable(Structure) THEN
                                                                        SalesLine."Location Code" := "Location Code";
                                                                      SalesLine.MODIFY(TRUE);
                                                                    UNTIL SalesLine.NEXT = 0;
                                                                END;
                                                                "Location State Code" := Location."State Code";
                                                              END;

                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 29  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              ENN=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 30  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              ENN=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 31  ;   ;Customer Posting Group;Code10      ;TableRelation="Customer Posting Group";
                                                   CaptionML=[ENU=Customer Posting Group;
                                                              ENN=Customer Posting Group];
                                                   Editable=No }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=VAR
                                                                DOPaymentTransLogEntry@1001 : Record 829;
                                                              BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date")]) OR ("Currency Code" <> xRec."Currency Code") THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                IF DOPaymentTransLogEntry.FINDFIRST THEN
                                                                  DOPaymentTransLogMgt.ValidateHasNoValidTransactions("Document Type",FORMAT("Document Type"),"No.");
                                                                IF (CurrFieldNo <> FIELDNO("Currency Code")) AND ("Currency Code" = xRec."Currency Code") THEN
                                                                  UpdateCurrencyFactor
                                                                ELSE
                                                                  IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                    UpdateCurrencyFactor;
                                                                    RecreateSalesLines(FIELDCAPTION("Currency Code"));
                                                                  END ELSE
                                                                    IF "Currency Code" <> '' THEN BEGIN
                                                                      UpdateCurrencyFactor;
                                                                      IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                        ConfirmUpdateCurrencyFactor;
                                                                    END;
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              ENN=Currency Code] }
    { 33  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Currency Factor"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              ENN=Currency Factor];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 34  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Customer Price Group"));
                                                              END;

                                                   CaptionML=[ENU=Customer Price Group;
                                                              ENN=Customer Price Group] }
    { 35  ;   ;Prices Including VAT;Boolean       ;OnValidate=VAR
                                                                SalesLine@1000 : Record 37;
                                                                Currency@1001 : Record 4;
                                                                RecalculatePrice@1002 : Boolean;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF "Prices Including VAT" <> xRec."Prices Including VAT" THEN BEGIN
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Job Contract Entry No.",'<>%1',0);
                                                                  IF SalesLine.FIND('-') THEN BEGIN
                                                                    SalesLine.TESTFIELD("Job No.",'');
                                                                    SalesLine.TESTFIELD("Job Contract Entry No.",0);
                                                                  END;

                                                                  SalesLine.RESET;
                                                                  SalesLine.SETRANGE("Document Type","Document Type");
                                                                  SalesLine.SETRANGE("Document No.","No.");
                                                                  SalesLine.SETFILTER("Unit Price",'<>%1',0);
                                                                  SalesLine.SETFILTER("VAT %",'<>%1',0);
                                                                  IF SalesLine.FINDFIRST THEN BEGIN
                                                                    RecalculatePrice :=
                                                                      CONFIRM(
                                                                        STRSUBSTNO(
                                                                          Text024,
                                                                          FIELDCAPTION("Prices Including VAT"),SalesLine.FIELDCAPTION("Unit Price")),
                                                                        TRUE);
                                                                    SalesLine.SetSalesHeader(Rec);

                                                                    IF RecalculatePrice AND "Prices Including VAT" THEN
                                                                      SalesLine.MODIFYALL(Amount,0,TRUE);

                                                                    IF "Currency Code" = '' THEN
                                                                      Currency.InitRoundingPrecision
                                                                    ELSE
                                                                      Currency.GET("Currency Code");
                                                                    SalesLine.LOCKTABLE;
                                                                    LOCKTABLE;
                                                                    SalesLine.FINDSET;
                                                                    REPEAT
                                                                      SalesLine.TESTFIELD("Quantity Invoiced",0);
                                                                      SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
                                                                      IF NOT RecalculatePrice THEN BEGIN
                                                                        SalesLine."VAT Difference" := 0;
                                                                        SalesLine.UpdateAmounts;
                                                                      END ELSE
                                                                        IF "Prices Including VAT" THEN BEGIN
                                                                          SalesLine."Unit Price" :=
                                                                            ROUND(
                                                                              SalesLine."Unit Price" * (1 + (SalesLine."VAT %" / 100)),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF SalesLine.Quantity <> 0 THEN BEGIN
                                                                            SalesLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            SalesLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                SalesLine."Inv. Discount Amount" * (1 + (SalesLine."VAT %" / 100)),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END ELSE BEGIN
                                                                          SalesLine."Unit Price" :=
                                                                            ROUND(
                                                                              SalesLine."Unit Price" / (1 + (SalesLine."VAT %" / 100)),
                                                                              Currency."Unit-Amount Rounding Precision");
                                                                          IF SalesLine.Quantity <> 0 THEN BEGIN
                                                                            SalesLine."Line Discount Amount" :=
                                                                              ROUND(
                                                                                SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
                                                                                Currency."Amount Rounding Precision");
                                                                            SalesLine.VALIDATE("Inv. Discount Amount",
                                                                              ROUND(
                                                                                SalesLine."Inv. Discount Amount" / (1 + (SalesLine."VAT %" / 100)),
                                                                                Currency."Amount Rounding Precision"));
                                                                          END;
                                                                        END;
                                                                      SalesLine.MODIFY;
                                                                    UNTIL SalesLine.NEXT = 0;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prices Including VAT;
                                                              ENN=Prices Including VAT] }
    { 37  ;   ;Invoice Disc. Code  ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Invoice Disc. Code"));
                                                              END;

                                                   AccessByPermission=TableData 19=R;
                                                   CaptionML=[ENU=Invoice Disc. Code;
                                                              ENN=Invoice Disc. Code] }
    { 40  ;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Customer Disc. Group"));
                                                              END;

                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              ENN=Customer Disc. Group] }
    { 41  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   OnValidate=BEGIN
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Language Code"));
                                                              END;

                                                   CaptionML=[ENU=Language Code;
                                                              ENN=Language Code] }
    { 43  ;   ;Salesperson Code    ;Code10        ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=VAR
                                                                ApprovalEntry@1001 : Record 454;
                                                              BEGIN
                                                                ApprovalEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
                                                                ApprovalEntry.SETRANGE("Document Type","Document Type");
                                                                ApprovalEntry.SETRANGE("Document No.","No.");
                                                                ApprovalEntry.SETFILTER(Status,'%1|%2',ApprovalEntry.Status::Created,ApprovalEntry.Status::Open);
                                                                IF NOT ApprovalEntry.ISEMPTY THEN
                                                                  ERROR(Text053,FIELDCAPTION("Salesperson Code"));

                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                              END;

                                                   CaptionML=[ENU=Salesperson Code;
                                                              ENN=Salesperson Code] }
    { 45  ;   ;Order Class         ;Code10        ;CaptionML=[ENU=Order Class;
                                                              ENN=Order Class] }
    { 46  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Comment Line" WHERE (Document Type=FIELD(Document Type),
                                                                                                 No.=FIELD(No.),
                                                                                                 Document Line No.=CONST(0)));
                                                   CaptionML=[ENU=Comment;
                                                              ENN=Comment];
                                                   Editable=No }
    { 47  ;   ;No. Printed         ;Integer       ;CaptionML=[ENU=No. Printed;
                                                              ENN=No. Printed];
                                                   Editable=No }
    { 51  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              ENN=On Hold] }
    { 52  ;   ;Applies-to Doc. Type;Option        ;OnValidate=BEGIN
                                                                IF xRec."Applies-to Doc. Type" <> "Applies-to Doc. Type" THEN
                                                                  VALIDATE("Applies-to Doc. No.",'');
                                                              END;

                                                   CaptionML=[ENU=Applies-to Doc. Type;
                                                              ENN=Applies-to Doc. Type];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    ENN=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=VAR
                                                                CustLedgEntry@1500000 : Record 21;
                                                              BEGIN
                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');

                                                                IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." <> '') AND
                                                                   ("Applies-to Doc. No." <> '')
                                                                THEN BEGIN
                                                                  SetAmountToApply("Applies-to Doc. No.","Bill-to Customer No.");
                                                                  SetAmountToApply(xRec."Applies-to Doc. No.","Bill-to Customer No.");
                                                                END ELSE
                                                                  IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (xRec."Applies-to Doc. No." = '') THEN
                                                                    SetAmountToApply("Applies-to Doc. No.","Bill-to Customer No.")
                                                                  ELSE
                                                                    IF ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND ("Applies-to Doc. No." = '') THEN
                                                                      SetAmountToApply(xRec."Applies-to Doc. No.","Bill-to Customer No.");
                                                                CustLedgEntry.RESET;
                                                                CustLedgEntry.SETCURRENTKEY("Document No.","Document Type","Customer No.");
                                                                CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                IF "Applies-to Doc. Type" <> 0 THEN
                                                                  CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                CustLedgEntry.SETRANGE("Customer No.","Sell-to Customer No.");
                                                                IF CustLedgEntry.FINDFIRST THEN BEGIN
                                                                  CustLedgEntry.CALCFIELDS("Remaining Amt. (LCY)");
                                                                  "Transaction No. Serv. Tax" := 0;
                                                                  IF NOT (CustLedgEntry."Remaining Amt. (LCY)" = 0) AND CustLedgEntry."Serv. Tax on Advance Payment" THEN
                                                                    "Transaction No. Serv. Tax" := CustLedgEntry."Transaction No.";
                                                                END;

                                                                IF "Applies-to Doc. No." = '' THEN BEGIN
                                                                  "Transaction No. Serv. Tax" := 0;
                                                                  IF xRec."Applies-to Doc. No." <> '' THEN BEGIN
                                                                    CustLedgEntry.RESET;
                                                                    CustLedgEntry.SETCURRENTKEY("Document No.","Document Type","Customer No.");
                                                                    CustLedgEntry.SETRANGE("Document No.",xRec."Applies-to Doc. No.");
                                                                    IF xRec."Applies-to Doc. Type" <> 0 THEN
                                                                      CustLedgEntry.SETRANGE("Document Type",xRec."Applies-to Doc. Type");
                                                                    CustLedgEntry.SETRANGE("Customer No.","Sell-to Customer No.");
                                                                    IF CustLedgEntry.FINDFIRST THEN
                                                                      GSTApplicationManagement.DeletePaymentAplicationBuffer(TransactionType2::Sale,CustLedgEntry."Entry No.");
                                                                  END;
                                                                END;
                                                                IF "Applies-to Doc. No." <> '' THEN
                                                                  "Applies-to ID" := '';
                                                              END;

                                                   OnLookup=VAR
                                                              TransactionType@1500000 : 'Purchase,Sale';
                                                              ApplicationType@1500001 : 'Online,Offline';
                                                            BEGIN
                                                              TESTFIELD("Bal. Account No.",'');
                                                              CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
                                                              CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
                                                              CustLedgEntry.SETRANGE(Open,TRUE);
                                                              IF "Applies-to Doc. No." <> '' THEN BEGIN
                                                                CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                IF CustLedgEntry.FINDFIRST THEN;
                                                                CustLedgEntry.SETRANGE("Document Type");
                                                                CustLedgEntry.SETRANGE("Document No.");
                                                              END ELSE
                                                                IF "Applies-to Doc. Type" <> 0 THEN BEGIN
                                                                  CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                  IF CustLedgEntry.FINDFIRST THEN;
                                                                  CustLedgEntry.SETRANGE("Document Type");
                                                                END ELSE
                                                                  IF Amount <> 0 THEN BEGIN
                                                                    CustLedgEntry.SETRANGE(Positive,Amount < 0);
                                                                    IF CustLedgEntry.FINDFIRST THEN;
                                                                    CustLedgEntry.SETRANGE(Positive);
                                                                  END;

                                                              IF GSTManagement.IsGSTApplicable(Structure) AND ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) THEN BEGIN
                                                                CalculateGSTStructure(Rec);
                                                                GSTApplicationManagement.FillAppBufferHSNComponentInvoice(
                                                                  TransactionType2::Sale,"Bill-to Customer No.","Document Type","No.");
                                                              END;
                                                              COMMIT;
                                                              CLEAR(ApplyCustEntries);
                                                              ApplyCustEntries.SetSales(Rec,CustLedgEntry,SalesHeader.FIELDNO("Applies-to Doc. No."));
                                                              ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
                                                              ApplyCustEntries.SETRECORD(CustLedgEntry);
                                                              ApplyCustEntries.LOOKUPMODE(TRUE);
                                                              IF ApplyCustEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                ApplyCustEntries.GetCustLedgEntry(CustLedgEntry);
                                                                GenJnlApply.CheckAgainstApplnCurrency(
                                                                  "Currency Code",CustLedgEntry."Currency Code",GenJnILine."Account Type"::Customer,TRUE);
                                                                "Applies-to Doc. Type" := CustLedgEntry."Document Type";
                                                                "Applies-to Doc. No." := CustLedgEntry."Document No.";
                                                                "Transaction No. Serv. Tax" := 0;
                                                                IF CustLedgEntry."Serv. Tax on Advance Payment" THEN
                                                                  "Transaction No. Serv. Tax" := CustLedgEntry."Transaction No.";
                                                              END;
                                                              CLEAR(ApplyCustEntries);
                                                              IF "Applies-to Doc. No." <> '' THEN
                                                                "Applies-to ID" := '';
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              ENN=Applies-to Doc. No.] }
    { 55  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Bal. Account Type"::"G/L Account":
                                                                      BEGIN
                                                                        GLAcc.GET("Bal. Account No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      END;
                                                                    "Bal. Account Type"::"Bank Account":
                                                                      BEGIN
                                                                        BankAcc.GET("Bal. Account No.");
                                                                        BankAcc.TESTFIELD(Blocked,FALSE);
                                                                        BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                      END;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Bal. Account No.;
                                                              ENN=Bal. Account No.] }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Recalculate Invoice Disc.=CONST(Yes)));
                                                   CaptionML=[ENU=Recalculate Invoice Disc.;
                                                              ENN=Recalculate Invoice Disc.];
                                                   Editable=No }
    { 57  ;   ;Ship                ;Boolean       ;CaptionML=[ENU=Ship;
                                                              ENN=Ship];
                                                   Editable=No }
    { 58  ;   ;Invoice             ;Boolean       ;CaptionML=[ENU=Invoice;
                                                              ENN=Invoice] }
    { 59  ;   ;Print Posted Documents;Boolean     ;CaptionML=[ENU=Print Posted Documents;
                                                              ENN=Print Posted Documents] }
    { 60  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line".Amount WHERE (Document Type=FIELD(Document Type),
                                                                                              Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount;
                                                              ENN=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Amount Including VAT" WHERE (Document Type=FIELD(Document Type),
                                                                                                              Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount Including VAT;
                                                              ENN=Amount Including VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 62  ;   ;Shipping No.        ;Code20        ;CaptionML=[ENU=Shipping No.;
                                                              ENN=Shipping No.] }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=[ENU=Posting No.;
                                                              ENN=Posting No.] }
    { 64  ;   ;Last Shipping No.   ;Code20        ;TableRelation="Sales Shipment Header";
                                                   CaptionML=[ENU=Last Shipping No.;
                                                              ENN=Last Shipping No.];
                                                   Editable=No }
    { 65  ;   ;Last Posting No.    ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=[ENU=Last Posting No.;
                                                              ENN=Last Posting No.];
                                                   Editable=No }
    { 66  ;   ;Prepayment No.      ;Code20        ;CaptionML=[ENU=Prepayment No.;
                                                              ENN=Prepayment No.] }
    { 67  ;   ;Last Prepayment No. ;Code20        ;TableRelation="Sales Invoice Header";
                                                   CaptionML=[ENU=Last Prepayment No.;
                                                              ENN=Last Prepayment No.] }
    { 68  ;   ;Prepmt. Cr. Memo No.;Code20        ;CaptionML=[ENU=Prepmt. Cr. Memo No.;
                                                              ENN=Prepmt. Cr. Memo No.] }
    { 69  ;   ;Last Prepmt. Cr. Memo No.;Code20   ;TableRelation="Sales Cr.Memo Header";
                                                   CaptionML=[ENU=Last Prepmt. Cr. Memo No.;
                                                              ENN=Last Prepmt. Cr. Memo No.] }
    { 70  ;   ;VAT Registration No.;Text20        ;CaptionML=[ENU=VAT Registration No.;
                                                              ENN=VAT Registration No.] }
    { 71  ;   ;Combine Shipments   ;Boolean       ;CaptionML=[ENU=Combine Shipments;
                                                              ENN=Combine Shipments] }
    { 73  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              ENN=Reason Code] }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN BEGIN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    "VAT Bus. Posting Group" := GenBusPostingGrp."Def. VAT Bus. Posting Group";
                                                                  RecreateSalesLines(FIELDCAPTION("Gen. Bus. Posting Group"));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              ENN=Gen. Bus. Posting Group] }
    { 75  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=[ENU=EU 3-Party Trade;
                                                              ENN=EU 3-Party Trade] }
    { 76  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transaction Type"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Transaction Type;
                                                              ENN=Transaction Type] }
    { 77  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transport Method"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Transport Method;
                                                              ENN=Transport Method] }
    { 78  ;   ;VAT Country/Region Code;Code10     ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=VAT Country/Region Code;
                                                              ENN=VAT Country/Region Code] }
    { 79  ;   ;Sell-to Customer Name;Text50       ;CaptionML=[ENU=Sell-to Customer Name;
                                                              ENN=Sell-to Customer Name] }
    { 80  ;   ;Sell-to Customer Name 2;Text50     ;CaptionML=[ENU=Sell-to Customer Name 2;
                                                              ENN=Sell-to Customer Name 2] }
    { 81  ;   ;Sell-to Address     ;Text50        ;CaptionML=[ENU=Sell-to Address;
                                                              ENN=Sell-to Address] }
    { 82  ;   ;Sell-to Address 2   ;Text50        ;CaptionML=[ENU=Sell-to Address 2;
                                                              ENN=Sell-to Address 2] }
    { 83  ;   ;Sell-to City        ;Text30        ;TableRelation=IF (Sell-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Sell-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Sell-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sell-to City;
                                                              ENN=Sell-to City] }
    { 84  ;   ;Sell-to Contact     ;Text50        ;CaptionML=[ENU=Sell-to Contact;
                                                              ENN=Sell-to Contact] }
    { 85  ;   ;Bill-to Post Code   ;Code20        ;TableRelation=IF (Bill-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Bill-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Bill-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Bill-to City","Bill-to Post Code","Bill-to County","Bill-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bill-to Post Code;
                                                              ENN=Bill-to Post Code] }
    { 86  ;   ;Bill-to County      ;Text30        ;CaptionML=[ENU=Bill-to County;
                                                              ENN=Bill-to County] }
    { 87  ;   ;Bill-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Bill-to Country/Region Code;
                                                              ENN=Bill-to Country/Region Code] }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;TableRelation=IF (Sell-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Sell-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Sell-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Sell-to City","Sell-to Post Code","Sell-to County","Sell-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Sell-to Post Code;
                                                              ENN=Sell-to Post Code] }
    { 89  ;   ;Sell-to County      ;Text30        ;CaptionML=[ENU=Sell-to County;
                                                              ENN=Sell-to County] }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Ship-to Country/Region Code");
                                                              END;

                                                   CaptionML=[ENU=Sell-to Country/Region Code;
                                                              ENN=Sell-to Country/Region Code] }
    { 91  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ENN=Ship-to Post Code] }
    { 92  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ENN=Ship-to County] }
    { 93  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ENN=Ship-to Country/Region Code] }
    { 94  ;   ;Bal. Account Type   ;Option        ;CaptionML=[ENU=Bal. Account Type;
                                                              ENN=Bal. Account Type];
                                                   OptionCaptionML=[ENU=G/L Account,Bank Account;
                                                                    ENN=G/L Account,Bank Account];
                                                   OptionString=G/L Account,Bank Account }
    { 97  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Exit Point"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Exit Point;
                                                              ENN=Exit Point] }
    { 98  ;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              ENN=Correction] }
    { 99  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                IF xRec."Document Date" <> "Document Date" THEN
                                                                  UpdateDocumentDate := TRUE;
                                                                VALIDATE("Payment Terms Code");
                                                                VALIDATE("Prepmt. Payment Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Document Date;
                                                              ENN=Document Date] }
    { 100 ;   ;External Document No.;Code35       ;CaptionML=[ENU=External Document No.;
                                                              ENN=External Document No.] }
    { 101 ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION(Area),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Area;
                                                              ENN=Area] }
    { 102 ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   OnValidate=BEGIN
                                                                UpdateSalesLines(FIELDCAPTION("Transaction Specification"),FALSE);
                                                              END;

                                                   CaptionML=[ENU=Transaction Specification;
                                                              ENN=Transaction Specification] }
    { 104 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=VAR
                                                                SEPADirectDebitMandate@1000 : Record 1230;
                                                                DOPaymentTransLogEntry@1001 : Record 829;
                                                              BEGIN
                                                                IF DOPaymentTransLogEntry.FINDFIRST THEN
                                                                  DOPaymentTransLogMgt.ValidateHasNoValidTransactions("Document Type",FORMAT("Document Type"),"No.");
                                                                IF DOPaymentMgt.IsValidPaymentMethod(xRec."Payment Method Code") AND NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code")
                                                                THEN
                                                                  TESTFIELD("Credit Card No.",'');
                                                                PaymentMethod.INIT;
                                                                IF "Payment Method Code" <> '' THEN
                                                                  PaymentMethod.GET("Payment Method Code");
                                                                IF PaymentMethod."Direct Debit" THEN BEGIN
                                                                  "Direct Debit Mandate ID" := SEPADirectDebitMandate.GetDefaultMandate("Bill-to Customer No.","Due Date");
                                                                  IF "Payment Terms Code" = '' THEN
                                                                    "Payment Terms Code" := PaymentMethod."Direct Debit Pmt. Terms Code";
                                                                END ELSE
                                                                  "Direct Debit Mandate ID" := '';
                                                                "Bal. Account Type" := PaymentMethod."Bal. Account Type";
                                                                "Bal. Account No." := PaymentMethod."Bal. Account No.";
                                                                IF "Bal. Account No." <> '' THEN BEGIN
                                                                  TESTFIELD("Applies-to Doc. No.",'');
                                                                  TESTFIELD("Applies-to ID",'');
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Payment Method Code;
                                                              ENN=Payment Method Code] }
    { 105 ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."Shipping Agent Code" = "Shipping Agent Code" THEN
                                                                  EXIT;

                                                                "Shipping Agent Service Code" := '';
                                                                GetShippingTime(FIELDNO("Shipping Agent Code"));
                                                                UpdateSalesLines(FIELDCAPTION("Shipping Agent Code"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[ENU=Shipping Agent Code;
                                                              ENN=Shipping Agent Code] }
    { 106 ;   ;Package Tracking No.;Text30        ;CaptionML=[ENU=Package Tracking No.;
                                                              ENN=Package Tracking No.] }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              ENN=No. Series];
                                                   Editable=No }
    { 108 ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Posting No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetPostingNoSeriesCode,"Posting No. Series");
                                                                END;
                                                                TESTFIELD("Posting No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                TestNoSeries;
                                                                IF NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Posting No. Series") THEN
                                                                  VALIDATE("Posting No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Posting No. Series;
                                                              ENN=Posting No. Series] }
    { 109 ;   ;Shipping No. Series ;Code10        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Shipping No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Shipment Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Shipment Nos.","Shipping No. Series");
                                                                END;
                                                                TESTFIELD("Shipping No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Shipment Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Posted Shipment Nos.","Shipping No. Series") THEN
                                                                  VALIDATE("Shipping No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Shipping No. Series;
                                                              ENN=Shipping No. Series] }
    { 114 ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Tax Area Code"));
                                                                TaxAreaUpdatelines;
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              ENN=Tax Area Code] }
    { 115 ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Tax Liable"));
                                                                TaxAreaUpdatelines;
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              ENN=Tax Liable] }
    { 116 ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF xRec."VAT Bus. Posting Group" <> "VAT Bus. Posting Group" THEN
                                                                  RecreateSalesLines(FIELDCAPTION("VAT Bus. Posting Group"));
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              ENN=VAT Bus. Posting Group] }
    { 117 ;   ;Reserve             ;Option        ;InitValue=Optional;
                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Reserve;
                                                              ENN=Reserve];
                                                   OptionCaptionML=[ENU=Never,Optional,Always;
                                                                    ENN=Never,Optional,Always];
                                                   OptionString=Never,Optional,Always }
    { 118 ;   ;Applies-to ID       ;Code50        ;OnValidate=VAR
                                                                TempCustLedgEntry@1000 : Record 21;
                                                                ApplicationType@1500001 : 'Online,Offline';
                                                              BEGIN
                                                                IF "Applies-to ID" <> '' THEN
                                                                  TESTFIELD("Bal. Account No.",'');
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN BEGIN
                                                                  CustLedgEntry.RESET;
                                                                  CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
                                                                  CustLedgEntry.SETRANGE("Customer No.","Bill-to Customer No.");
                                                                  CustLedgEntry.SETRANGE(Open,TRUE);
                                                                  CustLedgEntry.SETRANGE("Applies-to ID",xRec."Applies-to ID");
                                                                  IF CustLedgEntry.FINDFIRST THEN BEGIN
                                                                    IF GSTManagement.IsGSTApplicable(Structure) AND
                                                                      ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) THEN BEGIN
                                                                      CalculateGSTStructure(Rec);
                                                                      GSTApplicationManagement.FillAppBufferHSNComponentInvoice(
                                                                        TransactionType2::Sale,CustLedgEntry."Customer No.","Document Type","No.");
                                                                      CustEntrySetApplID.SetGSTType(Rec);
                                                                    END;
                                                                    CustEntrySetApplID.SetApplId(CustLedgEntry,TempCustLedgEntry,'');
                                                                END;
                                                                  CustLedgEntry.RESET;
                                                                END;
                                                                IF "Applies-to ID" <> '' THEN
                                                                  "Applies-to Doc. No." := '';
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID;
                                                              ENN=Applies-to ID] }
    { 119 ;   ;VAT Base Discount % ;Decimal       ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "VAT Base Discount %" > GLSetup."VAT Tolerance %" THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    FIELDCAPTION("VAT Base Discount %"),
                                                                    GLSetup.FIELDCAPTION("VAT Tolerance %"),
                                                                    GLSetup.TABLECAPTION);

                                                                IF ("VAT Base Discount %" = xRec."VAT Base Discount %") AND
                                                                   (CurrFieldNo <> 0)
                                                                THEN
                                                                  EXIT;

                                                                SalesLine.SETRANGE("Document Type","Document Type");
                                                                SalesLine.SETRANGE("Document No.","No.");
                                                                SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
                                                                SalesLine.SETFILTER(Quantity,'<>0');
                                                                SalesLine.LOCKTABLE;
                                                                LOCKTABLE;
                                                                IF SalesLine.FINDSET THEN BEGIN
                                                                  MODIFY;
                                                                  REPEAT
                                                                    IF (SalesLine."Quantity Invoiced" <> SalesLine.Quantity) OR
                                                                       ("Shipping Advice" <> "Shipping Advice"::Partial) OR
                                                                       (SalesLine.Type <> SalesLine.Type::"Charge (Item)") OR
                                                                       (CurrFieldNo <> 0)
                                                                    THEN BEGIN
                                                                      SalesLine.UpdateAmounts;
                                                                      SalesLine.MODIFY;
                                                                    END;
                                                                  UNTIL SalesLine.NEXT = 0;
                                                                END;
                                                                SalesLine.RESET;
                                                              END;

                                                   CaptionML=[ENU=VAT Base Discount %;
                                                              ENN=VAT Base Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 120 ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              ENN=Status];
                                                   OptionCaptionML=[ENU=Open,Released,Pending Approval,Pending Prepayment;
                                                                    ENN=Open,Released,Pending Approval,Pending Prepayment];
                                                   OptionString=Open,Released,Pending Approval,Pending Prepayment;
                                                   Editable=No }
    { 121 ;   ;Invoice Discount Calculation;Option;CaptionML=[ENU=Invoice Discount Calculation;
                                                              ENN=Invoice Discount Calculation];
                                                   OptionCaptionML=[ENU=None,%,Amount;
                                                                    ENN=None,%,Amount];
                                                   OptionString=None,%,Amount;
                                                   Editable=No }
    { 122 ;   ;Invoice Discount Value;Decimal     ;CaptionML=[ENU=Invoice Discount Value;
                                                              ENN=Invoice Discount Value];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 123 ;   ;Send IC Document    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Send IC Document" THEN BEGIN
                                                                  IF "Bill-to IC Partner Code" = '' THEN
                                                                    TESTFIELD("Sell-to IC Partner Code");
                                                                  TESTFIELD("IC Direction","IC Direction"::Outgoing);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Send IC Document;
                                                              ENN=Send IC Document] }
    { 124 ;   ;IC Status           ;Option        ;CaptionML=[ENU=IC Status;
                                                              ENN=IC Status];
                                                   OptionCaptionML=[ENU=New,Pending,Sent;
                                                                    ENN=New,Pending,Sent];
                                                   OptionString=New,Pending,Sent }
    { 125 ;   ;Sell-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Sell-to IC Partner Code;
                                                              ENN=Sell-to IC Partner Code];
                                                   Editable=No }
    { 126 ;   ;Bill-to IC Partner Code;Code20     ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=Bill-to IC Partner Code;
                                                              ENN=Bill-to IC Partner Code];
                                                   Editable=No }
    { 129 ;   ;IC Direction        ;Option        ;OnValidate=BEGIN
                                                                IF "IC Direction" = "IC Direction"::Incoming THEN
                                                                  "Send IC Document" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=IC Direction;
                                                              ENN=IC Direction];
                                                   OptionCaptionML=[ENU=Outgoing,Incoming;
                                                                    ENN=Outgoing,Incoming];
                                                   OptionString=Outgoing,Incoming }
    { 130 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                IF xRec."Prepayment %" <> "Prepayment %" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Prepayment %"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Prepayment %;
                                                              ENN=Prepayment %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 131 ;   ;Prepayment No. Series;Code10       ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepayment No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series");
                                                                END;
                                                                TESTFIELD("Prepayment No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Prepmt. Inv. Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepayment No. Series") THEN
                                                                  VALIDATE("Prepayment No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepayment No. Series;
                                                              ENN=Prepayment No. Series] }
    { 132 ;   ;Compress Prepayment ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Compress Prepayment;
                                                              ENN=Compress Prepayment] }
    { 133 ;   ;Prepayment Due Date ;Date          ;CaptionML=[ENU=Prepayment Due Date;
                                                              ENN=Prepayment Due Date] }
    { 134 ;   ;Prepmt. Cr. Memo No. Series;Code10 ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Prepmt. Cr. Memo No." <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                  NoSeriesMgt.TestSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series");
                                                                END;
                                                                TESTFIELD("Prepmt. Cr. Memo No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Prepmt. Cr. Memo Nos.");
                                                                IF NoSeriesMgt.LookupSeries(GetPostingPrepaymentNoSeriesCode,"Prepmt. Cr. Memo No. Series") THEN
                                                                  VALIDATE("Prepmt. Cr. Memo No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Prepmt. Cr. Memo No. Series;
                                                              ENN=Prepmt. Cr. Memo No. Series] }
    { 135 ;   ;Prepmt. Posting Description;Text50 ;CaptionML=[ENU=Prepmt. Posting Description;
                                                              ENN=Prepmt. Posting Description] }
    { 138 ;   ;Prepmt. Pmt. Discount Date;Date    ;CaptionML=[ENU=Prepmt. Pmt. Discount Date;
                                                              ENN=Prepmt. Pmt. Discount Date] }
    { 139 ;   ;Prepmt. Payment Terms Code;Code10  ;TableRelation="Payment Terms";
                                                   OnValidate=VAR
                                                                PaymentTerms@1000 : Record 3;
                                                              BEGIN
                                                                IF ("Prepmt. Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                  PaymentTerms.GET("Prepmt. Payment Terms Code");
                                                                  IF (("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                                                                      NOT PaymentTerms."Calc. Pmt. Disc. on Cr. Memos")
                                                                  THEN BEGIN
                                                                    VALIDATE("Prepayment Due Date","Document Date");
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END ELSE BEGIN
                                                                    "Prepayment Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                    "Prepmt. Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                    IF NOT UpdateDocumentDate THEN
                                                                      VALIDATE("Prepmt. Payment Discount %",PaymentTerms."Discount %")
                                                                  END;
                                                                END ELSE BEGIN
                                                                  VALIDATE("Prepayment Due Date","Document Date");
                                                                  IF NOT UpdateDocumentDate THEN BEGIN
                                                                    VALIDATE("Prepmt. Pmt. Discount Date",0D);
                                                                    VALIDATE("Prepmt. Payment Discount %",0);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Terms Code;
                                                              ENN=Prepmt. Payment Terms Code] }
    { 140 ;   ;Prepmt. Payment Discount %;Decimal ;OnValidate=BEGIN
                                                                IF NOT (CurrFieldNo IN [0,FIELDNO("Posting Date"),FIELDNO("Document Date")]) THEN
                                                                  TESTFIELD(Status,Status::Open);
                                                                GLSetup.GET;
                                                                IF "Payment Discount %" < GLSetup."VAT Tolerance %" THEN
                                                                  "VAT Base Discount %" := "Payment Discount %"
                                                                ELSE
                                                                  "VAT Base Discount %" := GLSetup."VAT Tolerance %";
                                                                VALIDATE("VAT Base Discount %");
                                                              END;

                                                   CaptionML=[ENU=Prepmt. Payment Discount %;
                                                              ENN=Prepmt. Payment Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 151 ;   ;Quote No.           ;Code20        ;CaptionML=[ENU=Quote No.;
                                                              ENN=Quote No.];
                                                   Editable=No }
    { 160 ;   ;Job Queue Status    ;Option        ;OnLookup=VAR
                                                              JobQueueEntry@1000 : Record 472;
                                                            BEGIN
                                                              IF "Job Queue Status" = "Job Queue Status"::" " THEN
                                                                EXIT;
                                                              JobQueueEntry.ShowStatusMsg("Job Queue Entry ID");
                                                            END;

                                                   CaptionML=[ENU=Job Queue Status;
                                                              ENN=Job Queue Status];
                                                   OptionCaptionML=[ENU=" ,Scheduled for Posting,Error,Posting";
                                                                    ENN=" ,Scheduled for Posting,Error,Posting"];
                                                   OptionString=[ ,Scheduled for Posting,Error,Posting];
                                                   Editable=No }
    { 161 ;   ;Job Queue Entry ID  ;GUID          ;CaptionML=[ENU=Job Queue Entry ID;
                                                              ENN=Job Queue Entry ID];
                                                   Editable=No }
    { 165 ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document";
                                                   OnValidate=VAR
                                                                IncomingDocument@1000 : Record 130;
                                                              BEGIN
                                                                IF "Incoming Document Entry No." = xRec."Incoming Document Entry No." THEN
                                                                  EXIT;
                                                                IF "Incoming Document Entry No." = 0 THEN
                                                                  IncomingDocument.RemoveReferenceToWorkingDocument(xRec."Incoming Document Entry No.")
                                                                ELSE
                                                                  IncomingDocument.SetSalesDoc(Rec);
                                                              END;

                                                   CaptionML=[ENU=Incoming Document Entry No.;
                                                              ENN=Incoming Document Entry No.] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              ENN=Dimension Set ID];
                                                   Editable=No }
    { 825 ;   ;Authorization Required;Boolean     ;CaptionML=[ENU=Authorization Required;
                                                              ENN=Authorization Required] }
    { 827 ;   ;Credit Card No.     ;Code20        ;TableRelation="DO Payment Credit Card" WHERE (Customer No.=FIELD(Bill-to Customer No.));
                                                   OnValidate=VAR
                                                                DOPaymentTransLogEntry@1000 : Record 829;
                                                              BEGIN
                                                                IF NOT DOPaymentTransLogEntry.ISEMPTY THEN
                                                                  DOPaymentTransLogMgt.ValidateHasNoValidTransactions("Document Type",FORMAT("Document Type"),"No.");

                                                                IF "Credit Card No." = '' THEN
                                                                  EXIT;

                                                                DOPaymentMgt.CheckCreditCardData("Credit Card No.");

                                                                IF NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code") THEN
                                                                  FIELDERROR("Payment Method Code");
                                                              END;

                                                   CaptionML=[ENU=Credit Card No.;
                                                              ENN=Credit Card No.] }
    { 1200;   ;Direct Debit Mandate ID;Code35     ;TableRelation="SEPA Direct Debit Mandate" WHERE (Customer No.=FIELD(Bill-to Customer No.),
                                                                                                    Closed=CONST(No),
                                                                                                    Blocked=CONST(No));
                                                   CaptionML=[ENU=Direct Debit Mandate ID;
                                                              ENN=Direct Debit Mandate ID] }
    { 1305;   ;Invoice Discount Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Inv. Discount Amount" WHERE (Document No.=FIELD(No.),
                                                                                                              Document Type=FIELD(Document Type)));
                                                   CaptionML=[ENU=Invoice Discount Amount;
                                                              ENN=Invoice Discount Amount];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5043;   ;No. of Archived Versions;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Max("Sales Header Archive"."Version No." WHERE (Document Type=FIELD(Document Type),
                                                                                                               No.=FIELD(No.),
                                                                                                               Doc. No. Occurrence=FIELD(Doc. No. Occurrence)));
                                                   CaptionML=[ENU=No. of Archived Versions;
                                                              ENN=No. of Archived Versions];
                                                   Editable=No }
    { 5048;   ;Doc. No. Occurrence ;Integer       ;CaptionML=[ENU=Doc. No. Occurrence;
                                                              ENN=Doc. No. Occurrence] }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");
                                                              END;

                                                   CaptionML=[ENU=Campaign No.;
                                                              ENN=Campaign No.] }
    { 5051;   ;Sell-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   OnValidate=VAR
                                                                SellToCustTemplate@1000 : Record 5105;
                                                              BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Quote);
                                                                TESTFIELD(Status,Status::Open);

                                                                IF NOT InsertMode AND
                                                                   ("Sell-to Customer Template Code" <> xRec."Sell-to Customer Template Code") AND
                                                                   (xRec."Sell-to Customer Template Code" <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Sell-to Customer Template Code"));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Sell-to Customer Template Code" = '' THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Sell-to Customer Template Code"));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      GSTManagement.UpdateInvoiceType(Rec);
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Sell-to Customer Template Code" := xRec."Sell-to Customer Template Code";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF SellToCustTemplate.GET("Sell-to Customer Template Code") THEN BEGIN
                                                                  SellToCustTemplate.TESTFIELD("Gen. Bus. Posting Group");
                                                                  "Gen. Bus. Posting Group" := SellToCustTemplate."Gen. Bus. Posting Group";
                                                                  "VAT Bus. Posting Group" := SellToCustTemplate."VAT Bus. Posting Group";
                                                                  IF "Bill-to Customer No." = '' THEN
                                                                    VALIDATE("Bill-to Customer Template Code","Sell-to Customer Template Code");
                                                                END;

                                                                IF NOT InsertMode AND
                                                                   ((xRec."Sell-to Customer Template Code" <> "Sell-to Customer Template Code") OR
                                                                    (xRec."Currency Code" <> "Currency Code"))
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Sell-to Customer Template Code"));
                                                              END;

                                                   CaptionML=[ENU=Sell-to Customer Template Code;
                                                              ENN=Sell-to Customer Template Code] }
    { 5052;   ;Sell-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                                Opportunity@1000 : Record 5092;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Sell-to Contact No." <> xRec."Sell-to Contact No.") AND
                                                                   (xRec."Sell-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF ("Sell-to Contact No." = '') AND ("Opportunity No." <> '') THEN
                                                                    ERROR(Text049,FIELDCAPTION("Sell-to Contact No."));
                                                                  IF HideValidationDialog OR NOT GUIALLOWED THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Sell-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF ("Sell-to Contact No." = '') AND ("Sell-to Customer No." = '') THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Sell-to Contact No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      EXIT;
                                                                    END;
                                                                    IF "Opportunity No." <> '' THEN BEGIN
                                                                      Opportunity.GET("Opportunity No.");
                                                                      IF Opportunity."Contact No." <> "Sell-to Contact No." THEN BEGIN
                                                                        MODIFY;
                                                                        Opportunity.VALIDATE("Contact No.","Sell-to Contact No.");
                                                                        Opportunity.MODIFY;
                                                                      END
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    Rec := xRec;
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Sell-to Customer No." <> '') AND ("Sell-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Sell-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Sell-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Sell-to Customer No.");
                                                                END;

                                                                IF "Sell-to Contact No." <> '' THEN
                                                                  IF Cont.GET("Sell-to Contact No.") THEN
                                                                    IF ("Salesperson Code" = '') AND (Cont."Salesperson Code" <> '') THEN
                                                                      VALIDATE("Salesperson Code",Cont."Salesperson Code");

                                                                UpdateSellToCust("Sell-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Sell-to Customer No." <> '' THEN
                                                                IF Cont.GET("Sell-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Sell-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;

                                                              IF "Sell-to Contact No." <> '' THEN
                                                                IF Cont.GET("Sell-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Sell-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Sell-to Contact No.;
                                                              ENN=Sell-to Contact No.] }
    { 5053;   ;Bill-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                ContBusinessRelation@1004 : Record 5054;
                                                                Cont@1002 : Record 5050;
                                                              BEGIN
                                                                TESTFIELD(Status,Status::Open);

                                                                IF ("Bill-to Contact No." <> xRec."Bill-to Contact No.") AND
                                                                   (xRec."Bill-to Contact No." <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Bill-to Contact No."));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF ("Bill-to Contact No." = '') AND ("Bill-to Customer No." = '') THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Bill-to Contact No."));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Bill-to Contact No." := xRec."Bill-to Contact No.";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                IF ("Bill-to Customer No." <> '') AND ("Bill-to Contact No." <> '') THEN BEGIN
                                                                  Cont.GET("Bill-to Contact No.");
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    IF ContBusinessRelation."Contact No." <> Cont."Company No." THEN
                                                                      ERROR(Text038,Cont."No.",Cont.Name,"Bill-to Customer No.");
                                                                END;

                                                                UpdateBillToCust("Bill-to Contact No.");
                                                              END;

                                                   OnLookup=VAR
                                                              Cont@1001 : Record 5050;
                                                              ContBusinessRelation@1000 : Record 5054;
                                                            BEGIN
                                                              IF "Bill-to Customer No." <> '' THEN
                                                                IF Cont.GET("Bill-to Contact No.") THEN
                                                                  Cont.SETRANGE("Company No.",Cont."Company No.")
                                                                ELSE BEGIN
                                                                  ContBusinessRelation.RESET;
                                                                  ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
                                                                  ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
                                                                  ContBusinessRelation.SETRANGE("No.","Bill-to Customer No.");
                                                                  IF ContBusinessRelation.FINDFIRST THEN
                                                                    Cont.SETRANGE("Company No.",ContBusinessRelation."Contact No.")
                                                                  ELSE
                                                                    Cont.SETRANGE("No.",'');
                                                                END;

                                                              IF "Bill-to Contact No." <> '' THEN
                                                                IF Cont.GET("Bill-to Contact No.") THEN ;
                                                              IF PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK THEN BEGIN
                                                                xRec := Rec;
                                                                VALIDATE("Bill-to Contact No.",Cont."No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Bill-to Contact No.;
                                                              ENN=Bill-to Contact No.] }
    { 5054;   ;Bill-to Customer Template Code;Code10;
                                                   TableRelation="Customer Template";
                                                   OnValidate=VAR
                                                                BillToCustTemplate@1001 : Record 5105;
                                                              BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Quote);
                                                                TESTFIELD(Status,Status::Open);

                                                                IF NOT InsertMode AND
                                                                   ("Bill-to Customer Template Code" <> xRec."Bill-to Customer Template Code") AND
                                                                   (xRec."Bill-to Customer Template Code" <> '')
                                                                THEN BEGIN
                                                                  IF HideValidationDialog THEN
                                                                    Confirmed := TRUE
                                                                  ELSE
                                                                    Confirmed := CONFIRM(Text004,FALSE,FIELDCAPTION("Bill-to Customer Template Code"));
                                                                  IF Confirmed THEN BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF "Bill-to Customer Template Code" = '' THEN BEGIN
                                                                      IF NOT SalesLine.ISEMPTY THEN
                                                                        ERROR(Text005,FIELDCAPTION("Bill-to Customer Template Code"));
                                                                      INIT;
                                                                      SalesSetup.GET;
                                                                      "No. Series" := xRec."No. Series";
                                                                      InitRecord;
                                                                      InitNoSeries;
                                                                      EXIT;
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    "Bill-to Customer Template Code" := xRec."Bill-to Customer Template Code";
                                                                    EXIT;
                                                                  END;
                                                                END;

                                                                VALIDATE("Ship-to Code",'');
                                                                IF BillToCustTemplate.GET("Bill-to Customer Template Code") THEN BEGIN
                                                                  BillToCustTemplate.TESTFIELD("Customer Posting Group");
                                                                  "Customer Posting Group" := BillToCustTemplate."Customer Posting Group";
                                                                  "Invoice Disc. Code" := BillToCustTemplate."Invoice Disc. Code";
                                                                  "Customer Price Group" := BillToCustTemplate."Customer Price Group";
                                                                  "Customer Disc. Group" := BillToCustTemplate."Customer Disc. Group";
                                                                  "Allow Line Disc." := BillToCustTemplate."Allow Line Disc.";
                                                                  VALIDATE("Payment Terms Code",BillToCustTemplate."Payment Terms Code");
                                                                  VALIDATE("Payment Method Code",BillToCustTemplate."Payment Method Code");
                                                                  "Shipment Method Code" := BillToCustTemplate."Shipment Method Code";
                                                                END;

                                                                CreateDim(
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");

                                                                IF NOT InsertMode AND
                                                                   (xRec."Sell-to Customer Template Code" = "Sell-to Customer Template Code") AND
                                                                   (xRec."Bill-to Customer Template Code" <> "Bill-to Customer Template Code")
                                                                THEN
                                                                  RecreateSalesLines(FIELDCAPTION("Bill-to Customer Template Code"));
                                                              END;

                                                   CaptionML=[ENU=Bill-to Customer Template Code;
                                                              ENN=Bill-to Customer Template Code] }
    { 5055;   ;Opportunity No.     ;Code20        ;TableRelation=IF (Document Type=FILTER(<>Order)) Opportunity.No. WHERE (Contact No.=FIELD(Sell-to Contact No.),
                                                                                                                           Closed=CONST(No))
                                                                                                                           ELSE IF (Document Type=CONST(Order)) Opportunity.No. WHERE (Contact No.=FIELD(Sell-to Contact No.),
                                                                                                                                                                                       Sales Document No.=FIELD(No.),
                                                                                                                                                                                       Sales Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                LinkSalesDocWithOpportunity(xRec."Opportunity No.");
                                                              END;

                                                   CaptionML=[ENU=Opportunity No.;
                                                              ENN=Opportunity No.] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF NOT UserSetupMgt.CheckRespCenter(0,"Responsibility Center") THEN
                                                                  ERROR(
                                                                    Text027,
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter);

                                                                "Location Code" := UserSetupMgt.GetLocation(0,'',"Responsibility Center");
                                                                UpdateOutboundWhseHandlingTime;
                                                                UpdateShipToAddress;

                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DATABASE::Customer,"Bill-to Customer No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salesperson Code",
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DATABASE::"Customer Template","Bill-to Customer Template Code");

                                                                IF xRec."Responsibility Center" <> "Responsibility Center" THEN BEGIN
                                                                  RecreateSalesLines(FIELDCAPTION("Responsibility Center"));
                                                                  "Assigned User ID" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Center] }
    { 5750;   ;Shipping Advice     ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF InventoryPickConflict("Document Type","No.","Shipping Advice") THEN
                                                                  ERROR(Text066,FIELDCAPTION("Shipping Advice"),FORMAT("Shipping Advice"),TABLECAPTION);
                                                                IF WhseShpmntConflict("Document Type","No.","Shipping Advice") THEN
                                                                  ERROR(STRSUBSTNO(Text070,FIELDCAPTION("Shipping Advice"),FORMAT("Shipping Advice"),TABLECAPTION));
                                                                WhseSourceHeader.SalesHeaderVerifyChange(Rec,xRec);
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipping Advice;
                                                              ENN=Shipping Advice];
                                                   OptionCaptionML=[ENU=Partial,Complete;
                                                                    ENN=Partial,Complete];
                                                   OptionString=Partial,Complete }
    { 5751;   ;Shipped Not Invoiced;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Qty. Shipped Not Invoiced=FILTER(<>0)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipped Not Invoiced;
                                                              ENN=Shipped Not Invoiced];
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Min("Sales Line"."Completely Shipped" WHERE (Document Type=FIELD(Document Type),
                                                                                                            Document No.=FIELD(No.),
                                                                                                            Type=FILTER(<>' '),
                                                                                                            Location Code=FIELD(Location Filter)));
                                                   CaptionML=[ENU=Completely Shipped;
                                                              ENN=Completely Shipped];
                                                   Editable=No }
    { 5753;   ;Posting from Whse. Ref.;Integer    ;AccessByPermission=TableData 14=R;
                                                   CaptionML=[ENU=Posting from Whse. Ref.;
                                                              ENN=Posting from Whse. Ref.] }
    { 5754;   ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Location;
                                                   CaptionML=[ENU=Location Filter;
                                                              ENN=Location Filter] }
    { 5755;   ;Shipped             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Qty. Shipped (Base)=FILTER(<>0)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipped;
                                                              ENN=Shipped];
                                                   Editable=No }
    { 5790;   ;Requested Delivery Date;Date       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Delivery Date" <> 0D THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    FIELDCAPTION("Requested Delivery Date"),
                                                                    FIELDCAPTION("Promised Delivery Date"));

                                                                IF "Requested Delivery Date" <> xRec."Requested Delivery Date" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Requested Delivery Date"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Requested Delivery Date;
                                                              ENN=Requested Delivery Date] }
    { 5791;   ;Promised Delivery Date;Date        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Promised Delivery Date" <> xRec."Promised Delivery Date" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Promised Delivery Date"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[ENU=Promised Delivery Date;
                                                              ENN=Promised Delivery Date] }
    { 5792;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF "Shipping Time" <> xRec."Shipping Time" THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Shipping Time"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Shipping Time;
                                                              ENN=Shipping Time] }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                IF ("Outbound Whse. Handling Time" <> xRec."Outbound Whse. Handling Time") AND
                                                                   (xRec."Sell-to Customer No." = "Sell-to Customer No.")
                                                                THEN
                                                                  UpdateSalesLines(FIELDCAPTION("Outbound Whse. Handling Time"),CurrFieldNo <> 0);
                                                              END;

                                                   AccessByPermission=TableData 7320=R;
                                                   CaptionML=[ENU=Outbound Whse. Handling Time;
                                                              ENN=Outbound Whse. Handling Time] }
    { 5794;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                GetShippingTime(FIELDNO("Shipping Agent Service Code"));
                                                                UpdateSalesLines(FIELDCAPTION("Shipping Agent Service Code"),CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=[ENU=Shipping Agent Service Code;
                                                              ENN=Shipping Agent Service Code] }
    { 5795;   ;Late Order Shipping ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Sell-to Customer No.=FIELD(Sell-to Customer No.),
                                                                                         Document No.=FIELD(No.),
                                                                                         Shipment Date=FIELD(Date Filter),
                                                                                         Outstanding Quantity=FILTER(<>0)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[ENU=Late Order Shipping;
                                                              ENN=Late Order Shipping];
                                                   Editable=No }
    { 5796;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              ENN=Date Filter] }
    { 5800;   ;Receive             ;Boolean       ;CaptionML=[ENU=Receive;
                                                              ENN=Receive] }
    { 5801;   ;Return Receipt No.  ;Code20        ;CaptionML=[ENU=Return Receipt No.;
                                                              ENN=Return Receipt No.] }
    { 5802;   ;Return Receipt No. Series;Code10   ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                IF "Return Receipt No. Series" <> '' THEN BEGIN
                                                                  SalesSetup.GET;
                                                                  SalesSetup.TESTFIELD("Posted Return Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(SalesSetup."Posted Return Receipt Nos.","Return Receipt No. Series");
                                                                END;
                                                                TESTFIELD("Return Receipt No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              WITH SalesHeader DO BEGIN
                                                                SalesHeader := Rec;
                                                                SalesSetup.GET;
                                                                SalesSetup.TESTFIELD("Posted Return Receipt Nos.");
                                                                IF NoSeriesMgt.LookupSeries(SalesSetup."Posted Return Receipt Nos.","Return Receipt No. Series") THEN
                                                                  VALIDATE("Return Receipt No. Series");
                                                                Rec := SalesHeader;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Return Receipt No. Series;
                                                              ENN=Return Receipt No. Series] }
    { 5803;   ;Last Return Receipt No.;Code20     ;TableRelation="Return Receipt Header";
                                                   CaptionML=[ENU=Last Return Receipt No.;
                                                              ENN=Last Return Receipt No.];
                                                   Editable=No }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                                MessageIfSalesLinesExist(FIELDCAPTION("Allow Line Disc."));
                                                              END;

                                                   CaptionML=[ENU=Allow Line Disc.;
                                                              ENN=Allow Line Disc.] }
    { 7200;   ;Get Shipment Used   ;Boolean       ;CaptionML=[ENU=Get Shipment Used;
                                                              ENN=Get Shipment Used];
                                                   Editable=No }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                IF NOT UserSetupMgt.CheckRespCenter2(0,"Responsibility Center","Assigned User ID") THEN
                                                                  ERROR(
                                                                    Text061,"Assigned User ID",
                                                                    RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter2("Assigned User ID"));
                                                              END;

                                                   CaptionML=[ENU=Assigned User ID;
                                                              ENN=Assigned User ID] }
    { 13701;  ;Assessee Code       ;Code10        ;TableRelation="Assessee Code";
                                                   OnValidate=BEGIN
                                                                SalesLine.SETRANGE("Document Type","Document Type");
                                                                SalesLine.SETRANGE("Document No.","No.");
                                                                IF SalesLine.FIND('-') THEN BEGIN
                                                                  SalesLine."Assessee Code" := "Assessee Code";
                                                                  SalesLine.MODIFY;
                                                                  MODIFY;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Assessee Code;
                                                              ENN=Assessee Code] }
    { 13706;  ;Excise Bus. Posting Group;Code10   ;TableRelation="Excise Bus. Posting Group";
                                                   CaptionML=[ENU=Excise Bus. Posting Group;
                                                              ENN=Excise Bus. Posting Group] }
    { 13731;  ;Amount to Customer  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Amount To Customer" WHERE (Document Type=FIELD(Document Type),
                                                                                                            Document No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount to Customer;
                                                              ENN=Amount to Customer];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 13736;  ;Bill to Customer State;Code10      ;TableRelation=State;
                                                   CaptionML=[ENU=Bill to Customer State;
                                                              ENN=Bill to Customer State] }
    { 13737;  ;Form Code           ;Code10        ;TableRelation="State Forms"."Form Code" WHERE (State=FIELD(State),
                                                                                                  Transit Document=CONST(No));
                                                   OnValidate=BEGIN
                                                                TaxLiableUpdate;
                                                                UpdateSalesLines(FIELDCAPTION("Form Code"),CurrFieldNo <> 0);
                                                              END;

                                                   OnLookup=BEGIN
                                                              StateForms.LookupStateForm(State,"Form Code");
                                                              VALIDATE("Form Code");
                                                            END;

                                                   CaptionML=[ENU=Form Code;
                                                              ENN=Form Code] }
    { 13738;  ;Form No.            ;Code10        ;OnValidate=BEGIN
                                                                TaxLiableUpdate;
                                                              END;

                                                   CaptionML=[ENU=Form No.;
                                                              ENN=Form No.] }
    { 13751;  ;Transit Document    ;Boolean       ;CaptionML=[ENU=Transit Document;
                                                              ENN=Transit Document] }
    { 13752;  ;State               ;Code10        ;TableRelation=State;
                                                   CaptionML=[ENU=State;
                                                              ENN=State] }
    { 13753;  ;LC No.              ;Code20        ;TableRelation="LC Detail".No. WHERE (Transaction Type=CONST(Sale),
                                                                                        Issued To/Received From=FIELD(Bill-to Customer No.),
                                                                                        Closed=CONST(No),
                                                                                        Released=CONST(Yes));
                                                   OnValidate=VAR
                                                                LCDetail@1280000 : Record 16300;
                                                                Text13700@1280001 : TextConst 'ENU=The LC which you have selected is Foreign type you cannot utilise for this order.;ENN=The LC which you have selected is Foreign type you cannot utilise for this order.';
                                                              BEGIN
                                                                IF "LC No." <> '' THEN BEGIN
                                                                  LCDetail.GET("LC No.");
                                                                  IF LCDetail."Type of LC" = LCDetail."Type of LC"::Foreign THEN
                                                                    IF "Currency Code" = '' THEN
                                                                      ERROR(Text13700);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=LC No.;
                                                              ENN=LC No.] }
    { 13790;  ;Structure           ;Code10        ;TableRelation="Structure Header";
                                                   OnValidate=VAR
                                                                StrDetails@1280001 : Record 13793;
                                                                StrOrderDetails@1280000 : Record 13794;
                                                                StrOrderLines@1280002 : Record 13795;
                                                                SaleLines@1280003 : Record 37;
                                                              BEGIN
                                                                CheckStructureOnLine(Structure);
                                                                IF xRec.Structure <> Structure THEN
                                                                  CheckShipmentOnSalesLine;
                                                                StrOrderDetails.SETCURRENTKEY("Document Type","Document No.",Type);
                                                                StrOrderDetails.SETRANGE(Type,StrOrderDetails.Type::Sale);
                                                                StrOrderDetails.SETRANGE("Document Type","Document Type");
                                                                StrOrderDetails.SETRANGE("Document No.","No.");
                                                                StrOrderDetails.SETRANGE("Price Inclusive of Tax",FALSE);
                                                                IF StrOrderDetails.FINDFIRST THEN
                                                                  StrOrderDetails.DELETEALL;

                                                                StrOrderLines.SETCURRENTKEY("Document Type","Document No.",Type);
                                                                StrOrderLines.SETRANGE(Type,StrOrderLines.Type::Sale);
                                                                StrOrderLines.SETRANGE("Document Type","Document Type");
                                                                StrOrderLines.SETRANGE("Document No.","No.");
                                                                StrOrderLines.SETRANGE("Price Inclusive of Tax",FALSE);
                                                                IF StrOrderLines.FINDFIRST THEN
                                                                  StrOrderLines.DELETEALL;

                                                                SaleLines.SETRANGE("Document Type","Document Type");
                                                                SaleLines.SETRANGE("Document No.","No.");
                                                                SaleLines.SETFILTER(Type,'<>%1',SaleLines.Type::" ");
                                                                SaleLines.SETRANGE("Price Inclusive of Tax",FALSE);
                                                                IF SaleLines.FIND('-') THEN
                                                                  REPEAT
                                                                    SaleLines."Service Tax Base" := 0;
                                                                    SaleLines."Charges To Customer" := 0;
                                                                    SaleLines."Amount Added to Excise Base" := 0;
                                                                    SaleLines."Amount Added to Tax Base" := 0;
                                                                    SaleLines."Excise Amount" := 0;
                                                                    SaleLines."VAT Base Amount" := 0;
                                                                    SaleLines.GetCurrentSalesHeader(Rec);
                                                                    SaleLines.VALIDATE("Tax Liable",FALSE);
                                                                    SaleLines.UpdateAmounts;
                                                                    SaleLines.GetStandardDeduction(Rec);
                                                                    SaleLines.MODIFY;
                                                                  UNTIL SaleLines.NEXT = 0;
                                                                GetGLSetup;
                                                                PoT := FALSE;
                                                                StrDetails.SETRANGE(Code,Structure);
                                                                IF StrDetails.FIND('-') THEN
                                                                  REPEAT
                                                                    StrOrderDetails.Type := StrOrderDetails.Type::Sale;
                                                                    StrOrderDetails."Document Type" := "Document Type";
                                                                    StrOrderDetails."Document No." := "No.";
                                                                    StrOrderDetails."Structure Code" := Structure;
                                                                    StrOrderDetails."Calculation Order" := StrDetails."Calculation Order";
                                                                    StrOrderDetails."Tax/Charge Type" := StrDetails.Type;
                                                                    StrOrderDetails."Tax/Charge Group" := StrDetails."Tax/Charge Group";
                                                                    StrOrderDetails."Tax/Charge Code" := StrDetails."Tax/Charge Code";
                                                                    StrOrderDetails."Calculation Type" := StrDetails."Calculation Type";
                                                                    StrOrderDetails."Calculation Value" := StrDetails."Calculation Value";
                                                                    StrOrderDetails."Quantity Per" := StrDetails."Quantity Per";
                                                                    StrOrderDetails."Loading on Inventory" := StrDetails."Loading on Inventory";
                                                                    StrOrderDetails."% Loading on Inventory" := StrDetails."% Loading on Inventory";
                                                                    StrOrderDetails."Payable to Third Party" := StrDetails."Payable to Third Party";
                                                                    StrOrderDetails."Account No." := StrDetails."Account No.";
                                                                    StrOrderDetails."Base Formula" := StrDetails."Base Formula";
                                                                    StrOrderDetails."Include Base" := StrDetails."Include Base";
                                                                    StrOrderDetails."Include Line Discount" := StrDetails."Include Line Discount";
                                                                    StrOrderDetails."Include Invoice Discount" := StrDetails."Include Invoice Discount";
                                                                    StrOrderDetails."Charge Basis" := StrDetails."Charge Basis";
                                                                    StrOrderDetails."Header/Line" := StrDetails."Header/Line";
                                                                    StrOrderDetails."Available for VAT Input" := StrDetails."Available for VAT Input";
                                                                    StrOrderDetails.CVD := StrDetails.CVD;
                                                                    StrOrderDetails.INSERT;
                                                                    IF NOT PoT THEN
                                                                      IF StrOrderDetails."Tax/Charge Type" = StrOrderDetails."Tax/Charge Type"::"Service Tax" THEN
                                                                        PoT := GLSetup.PoT;
                                                                  UNTIL StrDetails.NEXT = 0;

                                                                IF "Applies-to Doc. No." = '' THEN BEGIN
                                                                  StrDetails.SETRANGE(Type,StrDetails.Type::"Service Tax");
                                                                  IF StrDetails.FINDFIRST THEN BEGIN
                                                                    GLSetup.GET;
                                                                    "Service Tax Rounding Precision" := GLSetup."Service Tax Rounding Precision";
                                                                    "Service Tax Rounding Type" := GLSetup."Service Tax Rounding Type";
                                                                  END ELSE BEGIN
                                                                    "Service Tax Rounding Precision" := 0;
                                                                    "Service Tax Rounding Type" := "Service Tax Rounding Type"::Nearest;
                                                                  END;
                                                                END;
                                                                GSTManagement.UpdateInvoiceType(Rec);
                                                              END;

                                                   CaptionML=[ENU=Structure;
                                                              ENN=Structure] }
    { 16410;  ;Free Supply         ;Boolean       ;OnValidate=BEGIN
                                                                FreeSupplyUpdate;
                                                                CALCFIELDS("Price Inclusive of Taxes");
                                                                IF "Price Inclusive of Taxes" THEN
                                                                  TESTFIELD("Free Supply",FALSE);
                                                              END;

                                                   CaptionML=[ENU=Free Supply;
                                                              ENN=Free Supply] }
    { 16411;  ;Export or Deemed Export;Boolean    ;OnValidate=BEGIN
                                                                CALCFIELDS("Price Inclusive of Taxes");
                                                                IF "Price Inclusive of Taxes" THEN
                                                                  TESTFIELD("Export or Deemed Export",FALSE);
                                                              END;

                                                   CaptionML=[ENU=Export or Deemed Export;
                                                              ENN=Export or Deemed Export];
                                                   Editable=No }
    { 16412;  ;VAT Exempted        ;Boolean       ;OnValidate=BEGIN
                                                                CALCFIELDS("Price Inclusive of Taxes");
                                                                IF "Price Inclusive of Taxes" THEN
                                                                  TESTFIELD("VAT Exempted",FALSE);
                                                              END;

                                                   CaptionML=[ENU=VAT Exempted;
                                                              ENN=VAT Exempted];
                                                   Editable=No }
    { 16501;  ;Trading             ;Boolean       ;OnValidate=BEGIN
                                                                SalesSetup.GET;
                                                                InitRecord;
                                                              END;

                                                   CaptionML=[ENU=Trading;
                                                              ENN=Trading] }
    { 16502;  ;Transaction No. Serv. Tax;Integer  ;CaptionML=[ENU=Transaction No. Serv. Tax;
                                                              ENN=Transaction No. Serv. Tax] }
    { 16503;  ;Re-Dispatch         ;Boolean       ;CaptionML=[ENU=Re-Dispatch;
                                                              ENN=Re-Dispatch] }
    { 16504;  ;Return Re-Dispatch Rcpt. No.;Code20;OnValidate=VAR
                                                                ReturnRcptLine@1500000 : Record 6661;
                                                                LineNo@1500001 : Integer;
                                                              BEGIN
                                                                SalesLine.RESET;
                                                                SalesLine.SETCURRENTKEY("Document Type","Document No.","Line No.");
                                                                SalesLine.SETRANGE("Document No.","No.");
                                                                SalesLine.SETRANGE("Document Type","Document Type");
                                                                SalesLine.SETRANGE("Re-Dispatch",TRUE);
                                                                SalesLine.DELETEALL;

                                                                ReturnRcptLine.RESET;
                                                                ReturnRcptLine.SETRANGE("Document No.","Return Re-Dispatch Rcpt. No.");
                                                                ReturnRcptLine.SETFILTER(Type,'<>%1',ReturnRcptLine.Type::" ");
                                                                IF ReturnRcptLine.FINDSET THEN
                                                                  REPEAT
                                                                    LineNo := 10000;
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF SalesLine.FINDLAST THEN
                                                                      LineNo := SalesLine."Line No." + 10000;

                                                                    SalesLine.INIT;
                                                                    SalesLine.VALIDATE("Document Type","Document Type");
                                                                    SalesLine.VALIDATE("Document No.","No.");
                                                                    SalesLine."Line No." := LineNo;
                                                                    SalesLine.INSERT;
                                                                    SalesLine.VALIDATE(Type,ReturnRcptLine.Type);
                                                                    SalesLine.VALIDATE("No.",ReturnRcptLine."No.");
                                                                    SalesLine.VALIDATE("Variant Code",ReturnRcptLine."Variant Code");
                                                                    SalesLine.VALIDATE("Unit of Measure Code",ReturnRcptLine."Unit of Measure Code");
                                                                    SalesLine.VALIDATE("Location Code",ReturnRcptLine."Location Code");
                                                                    SalesLine.VALIDATE(Quantity,ReturnRcptLine."Qty. to be Re-Dispatched");
                                                                    SalesLine.VALIDATE("Re-Dispatch","Re-Dispatch");
                                                                    SalesLine.VALIDATE("Return Rcpt Line No.",ReturnRcptLine."Line No.");
                                                                    SalesLine.VALIDATE("Unit Price",ReturnRcptLine."Unit Price");
                                                                    SalesLine.VALIDATE("Return Re-Dispatch Rcpt. No.","Return Re-Dispatch Rcpt. No.");
                                                                    SalesLine.MODIFY;
                                                                  UNTIL ReturnRcptLine.NEXT = 0;
                                                              END;

                                                   OnLookup=VAR
                                                              ReturnRcptLine@1500000 : Record 6661;
                                                            BEGIN
                                                              ReturnRcptLine.RESET;
                                                              ReturnRcptLine.SETCURRENTKEY("Qty. to be Re-Dispatched","Location Code");
                                                              ReturnRcptLine.SETFILTER("Qty. to be Re-Dispatched",'>%1',0);
                                                              ReturnRcptLine.SETFILTER("Location Code","Location Code");
                                                              IF PAGE.RUNMODAL(0,ReturnRcptLine) = ACTION::LookupOK THEN BEGIN
                                                                "Return Re-Dispatch Rcpt. No." := ReturnRcptLine."Document No.";
                                                                MODIFY;
                                                                VALIDATE("Return Re-Dispatch Rcpt. No.");
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Return Re-Dispatch Rcpt. No.;
                                                              ENN=Return Re-Dispatch Rcpt. No.] }
    { 16505;  ;TDS Certificate Receivable;Boolean ;CaptionML=[ENU=TDS Certificate Receivable;
                                                              ENN=TDS Certificate Receivable] }
    { 16508;  ;Price Inclusive of Taxes;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE (Document Type=FIELD(Document Type),
                                                                                         Document No.=FIELD(No.),
                                                                                         Type=FILTER(Item),
                                                                                         Price Inclusive of Tax=FILTER(Yes)));
                                                   CaptionML=[ENU=Price Inclusive of Taxes;
                                                              ENN=Price Inclusive of Taxes];
                                                   Editable=No }
    { 16509;  ;Calc. Inv. Discount (%);Boolean    ;OnValidate=VAR
                                                                SalesLine2@1500000 : Record 37;
                                                              BEGIN
                                                                CALCFIELDS("Price Inclusive of Taxes");
                                                                IF "Price Inclusive of Taxes" AND (NOT "Calc. Inv. Discount (%)") THEN BEGIN
                                                                  SalesLine2.RESET;
                                                                  SalesLine2.SETRANGE("Document Type","Document Type");
                                                                  SalesLine2.SETRANGE("Document No.","No.");
                                                                  IF SalesLine2.FINDSET THEN
                                                                    REPEAT
                                                                      SalesLine2."Inv. Discount Amount" := 0;
                                                                      SalesLine2."Inv. Disc. Amount to Invoice" := 0;
                                                                      SalesLine2."Inv Discount Fixed" := 0;
                                                                      SalesLine2."Inv Discount Variable" := 0;
                                                                      SalesLine2.MODIFY;
                                                                    UNTIL SalesLine2.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Calc. Inv. Discount (%);
                                                              ENN=Calc. Inv. Discount (%)] }
    { 16510;  ;Time of Removal     ;Time          ;CaptionML=[ENU=Time of Removal;
                                                              ENN=Time of Removal] }
    { 16511;  ;LR/RR No.           ;Code20        ;CaptionML=[ENU=LR/RR No.;
                                                              ENN=LR/RR No.] }
    { 16512;  ;LR/RR Date          ;Date          ;CaptionML=[ENU=LR/RR Date;
                                                              ENN=LR/RR Date] }
    { 16513;  ;Vehicle No.         ;Code20        ;CaptionML=[ENU=Vehicle No.;
                                                              ENN=Vehicle No.] }
    { 16514;  ;Mode of Transport   ;Text15        ;CaptionML=[ENU=Mode of Transport;
                                                              ENN=Mode of Transport] }
    { 16515;  ;ST Pure Agent       ;Boolean       ;CaptionML=[ENU=ST Pure Agent;
                                                              ENN=ST Pure Agent] }
    { 16516;  ;Nature of Services  ;Option        ;CaptionML=[ENU=Nature of Services;
                                                              ENN=Nature of Services];
                                                   OptionCaptionML=[ENU=" ,Exempted,Export";
                                                                    ENN=" ,Exempted,Export"];
                                                   OptionString=[ ,Exempted,Export] }
    { 16522;  ;Service Tax Rounding Precision;Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Service Tax Rounding Precision;
                                                              ENN=Service Tax Rounding Precision] }
    { 16523;  ;Service Tax Rounding Type;Option   ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Service Tax Rounding Type;
                                                              ENN=Service Tax Rounding Type];
                                                   OptionCaptionML=[ENU=Nearest,Up,Down;
                                                                    ENN=Nearest,Up,Down];
                                                   OptionString=Nearest,Up,Down }
    { 16524;  ;Sale Return Type    ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=[ENU=Sale Return Type;
                                                              ENN=Sale Return Type];
                                                   OptionCaptionML=[ENU=" ,Sales Cancellation";
                                                                    ENN=" ,Sales Cancellation"];
                                                   OptionString=[ ,Sales Cancellation] }
    { 16525;  ;PoT                 ;Boolean       ;CaptionML=[ENU=PoT;
                                                              ENN=PoT] }
    { 16601;  ;Nature of Supply    ;Option        ;CaptionML=[ENU=Nature of Supply;
                                                              ENN=Nature of Supply];
                                                   OptionCaptionML=[ENU=B2B,B2C;
                                                                    ENN=B2B,B2C];
                                                   OptionString=B2B,B2C;
                                                   Editable=No }
    { 16602;  ;GST Customer Type   ;Option        ;OnValidate=BEGIN
                                                                GSTManagement.UpdateInvoiceType(Rec);
                                                              END;

                                                   CaptionML=[ENU=GST Customer Type;
                                                              ENN=GST Customer Type];
                                                   OptionCaptionML=[ENU=" ,Registered,Unregistered,Export,Deemed Export,Exempted,SEZ Development,SEZ Unit";
                                                                    ENN=" ,Registered,Unregistered,Export,Deemed Export,Exempted,SEZ Development,SEZ Unit"];
                                                   OptionString=[ ,Registered,Unregistered,Export,Deemed Export,Exempted,SEZ Development,SEZ Unit];
                                                   Editable=No }
    { 16603;  ;GST Without Payment of Duty;Boolean;OnValidate=BEGIN
                                                                IF NOT ("GST Customer Type" IN ["GST Customer Type"::Export,"GST Customer Type"::"Deemed Export",
                                                                  "GST Customer Type"::"SEZ Development","GST Customer Type"::"SEZ Unit"]) THEN
                                                                  ERROR(GSTPaymentDutyErr);
                                                              END;

                                                   CaptionML=[ENU=GST Without Payment of Duty;
                                                              ENN=GST Without Payment of Duty] }
    { 16605;  ;Invoice Type        ;Option        ;OnValidate=BEGIN
                                                                CheckShippedDocument;
                                                                IF "GST Customer Type" <> "GST Customer Type"::Exempted THEN BEGIN
                                                                  IF GSTManagement.CheckAllLinesExemptedSales(Rec) THEN
                                                                    GSTManagement.CheckInvoiceType(Rec)
                                                                  ELSE BEGIN
                                                                    SalesLine.RESET;
                                                                    SalesLine.SETRANGE("Document Type","Document Type");
                                                                    SalesLine.SETRANGE("Document No.","No.");
                                                                    IF SalesLine.FINDFIRST THEN
                                                                      TESTFIELD("Invoice Type","Invoice Type"::"Bill of Supply");
                                                                  END;
                                                                END ELSE
                                                                  GSTManagement.CheckInvoiceType(Rec);
                                                                InitRecord;
                                                                UpdateInvoiceTypeLine;
                                                              END;

                                                   CaptionML=[ENU=Invoice Type;
                                                              ENN=Invoice Type];
                                                   OptionCaptionML=[ENU=" ,Bill of Supply,Export,Supplementary,Debit Note,Non-GST,Taxable";
                                                                    ENN=" ,Bill of Supply,Export,Supplementary,Debit Note,Non-GST,Taxable"];
                                                   OptionString=[ ,Bill of Supply,Export,Supplementary,Debit Note,Non-GST,Taxable] }
    { 16606;  ;Bill Of Export No.  ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD("GST Customer Type","GST Customer Type"::Export);
                                                              END;

                                                   CaptionML=[ENU=Bill Of Export No.;
                                                              ENN=Bill Of Export No.] }
    { 16607;  ;Bill Of Export Date ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD("GST Customer Type","GST Customer Type"::Export);
                                                              END;

                                                   CaptionML=[ENU=Bill Of Export Date;
                                                              ENN=Bill Of Export Date] }
    { 16608;  ;e-Commerce Customer ;Code20        ;TableRelation=Customer WHERE (e-Commerce Operator=CONST(Yes));
                                                   CaptionML=[ENU=e-Commerce Customer;
                                                              ENN=e-Commerce Customer] }
    { 16609;  ;e-Commerce Merchant Id;Code30      ;TableRelation="e-Commerce Merchant Id"."Merchant Id" WHERE (Merchant Id=FIELD(e-Commerce Merchant Id),
                                                                                                               Customer No.=FIELD(e-Commerce Customer));
                                                   OnValidate=BEGIN
                                                                IF Location.GET("Location Code") THEN BEGIN
                                                                  eCommerceMerchantId.SETRANGE("Customer No.","Sell-to Customer No.");
                                                                  eCommerceMerchantId.SETRANGE("Company GST Reg. No.",Location."GST Registration No.");
                                                                  IF eCommerceMerchantId.FINDFIRST THEN
                                                                    TESTFIELD("e-Commerce Merchant Id",eCommerceMerchantId."Merchant Id");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=e-Commerce Merchant Id;
                                                              ENN=e-Commerce Merchant Id] }
    { 16610;  ;GST Bill-to State Code;Code10      ;TableRelation=State;
                                                   CaptionML=[ENU=GST Bill-to State Code;
                                                              ENN=GST Bill-to State Code];
                                                   Editable=No }
    { 16611;  ;GST Ship-to State Code;Code10      ;TableRelation=State;
                                                   CaptionML=[ENU=GST Ship-to State Code;
                                                              ENN=GST Ship-to State Code];
                                                   Editable=No }
    { 16612;  ;Location State Code ;Code10        ;TableRelation=State;
                                                   CaptionML=[ENU=Location State Code;
                                                              ENN=Location State Code];
                                                   Editable=No }
    { 16613;  ;GST Rounding Precision;Decimal     ;CaptionML=[ENU=GST Rounding Precision;
                                                              ENN=GST Rounding Precision] }
    { 16614;  ;GST Rounding Type   ;Option        ;CaptionML=[ENU=GST Rounding Type;
                                                              ENN=GST Rounding Type];
                                                   OptionCaptionML=[ENU=Nearest,Up,Down;
                                                                    ENN=Nearest,Up,Down];
                                                   OptionString=Nearest,Up,Down }
  }
  KEYS
  {
    {    ;Document Type,No.                       ;Clustered=Yes }
    {    ;No.,Document Type                        }
    {    ;Document Type,Sell-to Customer No.       }
    {    ;Document Type,Bill-to Customer No.       }
    {    ;Document Type,Combine Shipments,Bill-to Customer No.,Currency Code,EU 3-Party Trade,Dimension Set ID }
    {    ;Sell-to Customer No.,External Document No. }
    {    ;Document Type,Sell-to Contact No.        }
    {    ;Bill-to Contact No.                      }
    {    ;Incoming Document Entry No.              }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;No.,Sell-to Customer Name,Amount,Sell-to Contact,Amount Including VAT }
  }
  CODE
  {
    VAR
      Text003@1003 : TextConst 'ENU=You cannot rename a %1.;ENN=You cannot rename a %1.';
      Text004@1004 : TextConst 'ENU=Do you want to change %1?;ENN=Do you want to change %1?';
      Text005@1005 : TextConst 'ENU=You cannot reset %1 because the document still has one or more lines.;ENN=You cannot reset %1 because the document still has one or more lines.';
      Text006@1006 : TextConst 'ENU=You cannot change %1 because the order is associated with one or more purchase orders.;ENN=You cannot change %1 because the order is associated with one or more purchase orders.';
      Text007@1007 : TextConst 'ENU=%1 cannot be greater than %2 in the %3 table.;ENN=%1 cannot be greater than %2 in the %3 table.';
      Text009@1009 : TextConst 'ENU=Deleting this document will cause a gap in the number series for shipments. An empty shipment %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENN=Deleting this document will cause a gap in the number series for shipments. An empty shipment %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text012@1012 : TextConst 'ENU=Deleting this document will cause a gap in the number series for posted invoices. An empty posted invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENN=Deleting this document will cause a gap in the number series for posted invoices. An empty posted invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text014@1014 : TextConst 'ENU=Deleting this document will cause a gap in the number series for posted credit memos. An empty posted credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENN=Deleting this document will cause a gap in the number series for posted credit memos. An empty posted credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text015@1015 : TextConst 'ENU=If you change %1, the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\\Do you want to change %1?;ENN=If you change %1, the existing sales lines will be deleted and new sales lines based on the new information on the header will be created.\\Do you want to change %1?';
      Text017@1017 : TextConst 'ENU=You must delete the existing sales lines before you can change %1.;ENN=You must delete the existing sales lines before you can change %1.';
      Text018@1018 : TextConst 'ENU=You have changed %1 on the sales header, but it has not been changed on the existing sales lines.\;ENN=You have changed %1 on the sales header, but it has not been changed on the existing sales lines.\';
      Text019@1019 : TextConst 'ENU=You must update the existing sales lines manually.;ENN=You must update the existing sales lines manually.';
      Text020@1020 : TextConst 'ENU=The change may affect the exchange rate used in the price calculation of the sales lines.;ENN=The change may affect the exchange rate used in the price calculation of the sales lines.';
      Text021@1021 : TextConst 'ENU=Do you want to update the exchange rate?;ENN=Do you want to update the exchange rate?';
      Text022@1022 : TextConst 'ENU=You cannot delete this document. Your identification is set up to process from %1 %2 only.;ENN=You cannot delete this document. Your identification is set up to process from %1 %2 only.';
      Text024@1024 : TextConst 'ENU=You have modified the %1 field. The recalculation of VAT may cause penny differences, so you must check the amounts afterward. Do you want to update the %2 field on the lines to reflect the new value of %1?;ENN=You have modified the %1 field. The recalculation of VAT may cause penny differences, so you must check the amounts afterward. Do you want to update the %2 field on the lines to reflect the new value of %1?';
      Text027@1027 : TextConst 'ENU=Your identification is set up to process from %1 %2 only.;ENN=Your identification is set up to process from %1 %2 only.';
      Text028@1028 : TextConst 'ENU=You cannot change the %1 when the %2 has been filled in.;ENN=You cannot change the %1 when the %2 has been filled in.';
      Text030@1030 : TextConst 'ENU=Deleting this document will cause a gap in the number series for return receipts. An empty return receipt %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENN=Deleting this document will cause a gap in the number series for return receipts. An empty return receipt %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text031@1031 : TextConst 'ENU=You have modified %1.\\;ENN=You have modified %1.\\';
      Text032@1032 : TextConst 'ENU=Do you want to update the lines?;ENN=Do you want to update the lines?';
      Text067@2002 : TextConst 'ENU=%1 %4 with amount of %2 has already been authorized on %3 and is not expired yet. You must void the previous authorization before you can re-authorize this %1.;ENN=%1 %4 with amount of %2 has already been authorized on %3 and is not expired yet. You must void the previous authorization before you can re-authorize this %1.';
      Text068@2003 : TextConst 'ENU=There is nothing to void.;ENN=There is nothing to void.';
      Text069@2004 : TextConst 'ENU=The selected operation cannot complete with the specified %1.;ENN=The selected operation cannot complete with the specified %1.';
      SalesSetup@1033 : Record 311;
      GLSetup@1034 : Record 98;
      GLAcc@1035 : Record 15;
      SalesHeader@1036 : Record 36;
      SalesLine@1037 : Record 37;
      CustLedgEntry@1038 : Record 21;
      Cust@1039 : Record 18;
      PaymentTerms@1040 : Record 3;
      PaymentMethod@1041 : Record 289;
      CurrExchRate@1042 : Record 330;
      SalesCommentLine@1043 : Record 44;
      ShipToAddr@1044 : Record 222;
      PostCode@1045 : Record 225;
      BankAcc@1046 : Record 270;
      SalesShptHeader@1047 : Record 110;
      SalesInvHeader@1048 : Record 112;
      SalesCrMemoHeader@1049 : Record 114;
      ReturnRcptHeader@1050 : Record 6660;
      SalesInvHeaderPrepmt@1101 : Record 112;
      SalesCrMemoHeaderPrepmt@1100 : Record 114;
      GenBusPostingGrp@1051 : Record 250;
      GenJnILine@1052 : Record 81;
      RespCenter@1053 : Record 5714;
      InvtSetup@1054 : Record 313;
      Location@1055 : Record 14;
      WhseRequest@1056 : Record 5765;
      ShippingAgentService@1057 : Record 5790;
      TempReqLine@1089 : TEMPORARY Record 246;
      eCommerceMerchantId@1500023 : Record 16426;
      UserSetupMgt@1058 : Codeunit 5700;
      NoSeriesMgt@1059 : Codeunit 396;
      CustCheckCreditLimit@1060 : Codeunit 312;
      TransferExtendedText@1061 : Codeunit 378;
      GenJnlApply@1062 : Codeunit 225;
      SalesPost@1063 : Codeunit 80;
      CustEntrySetApplID@1064 : Codeunit 101;
      DimMgt@1065 : Codeunit 408;
      ApprovalsMgmt@1082 : Codeunit 1535;
      WhseSourceHeader@1073 : Codeunit 5781;
      SalesLineReserve@1066 : Codeunit 99000832;
      DOPaymentMgt@2000 : Codeunit 825;
      DOPaymentTransLogMgt@2001 : Codeunit 829;
      GSTManagement@1500909 : Codeunit 16401;
      GSTApplicationManagement@1500022 : Codeunit 16403;
      CustEntryEdit@1500028 : Codeunit 103;
      ApplyCustEntries@1067 : Page 232;
      CurrencyDate@1068 : Date;
      HideValidationDialog@1069 : Boolean;
      Confirmed@1070 : Boolean;
      Text035@1076 : TextConst 'ENU=You cannot Release Quote or Make Order unless you specify a customer on the quote.\\Do you want to create customer(s) now?;ENN=You cannot Release Quote or Make Order unless you specify a customer on the quote.\\Do you want to create customer(s) now?';
      Text037@1078 : TextConst 'ENU=Contact %1 %2 is not related to customer %3.;ENN=Contact %1 %2 is not related to customer %3.';
      Text038@1074 : TextConst 'ENU=Contact %1 %2 is related to a different company than customer %3.;ENN=Contact %1 %2 is related to a different company than customer %3.';
      Text039@1086 : TextConst 'ENU=Contact %1 %2 is not related to a customer.;ENN=Contact %1 %2 is not related to a customer.';
      ReservEntry@1079 : Record 337;
      TempReservEntry@1080 : TEMPORARY Record 337;
      Text040@1083 : TextConst 'ENU=A won opportunity is linked to this order.\It has to be changed to status Lost before the Order can be deleted.\Do you want to change the status for this opportunity now?;ENN=A won opportunity is linked to this order.\It has to be changed to status Lost before the Order can be deleted.\Do you want to change the status for this opportunity now?';
      Text044@1088 : TextConst 'ENU=The status of the opportunity has not been changed. The program has aborted deleting the order.;ENN=The status of the opportunity has not been changed. The program has aborted deleting the order.';
      SkipSellToContact@1016 : Boolean;
      SkipBillToContact@1025 : Boolean;
      Text045@1081 : TextConst 'ENU="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8.";ENN="You can not change the %1 field because %2 %3 has %4 = %5 and the %6 has already been assigned %7 %8."';
      Text048@1091 : TextConst 'ENU=Sales quote %1 has already been assigned to opportunity %2. Would you like to reassign this quote?;ENN=Sales quote %1 has already been assigned to opportunity %2. Would you like to reassign this quote?';
      Text049@1092 : TextConst 'ENU=The %1 field cannot be blank because this quote is linked to an opportunity.;ENN=The %1 field cannot be blank because this quote is linked to an opportunity.';
      InsertMode@1093 : Boolean;
      CompanyInfo@1094 : Record 79;
      HideCreditCheckDialogue@1097 : Boolean;
      Text051@1071 : TextConst 'ENU=The sales %1 %2 already exists.;ENN=The sales %1 %2 already exists.';
      Text052@1098 : TextConst 'ENU=The sales %1 %2 has item tracking. Do you want to delete it anyway?;ENN=The sales %1 %2 has item tracking. Do you want to delete it anyway?';
      Text053@1102 : TextConst 'ENU=You must cancel the approval process if you wish to change the %1.;ENN=You must cancel the approval process if you wish to change the %1.';
      Text056@1105 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENN=Deleting this document will cause a gap in the number series for prepayment invoices. An empty prepayment invoice %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text057@1108 : TextConst 'ENU=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?;ENN=Deleting this document will cause a gap in the number series for prepayment credit memos. An empty prepayment credit memo %1 will be created to fill this gap in the number series.\\Do you want to continue?';
      Text061@1110 : TextConst 'ENU=%1 is set up to process from %2 %3 only.;ENN=%1 is set up to process from %2 %3 only.';
      Text062@1072 : TextConst 'ENU=You cannot change %1 because the corresponding %2 %3 has been assigned to this %4.;ENN=You cannot change %1 because the corresponding %2 %3 has been assigned to this %4.';
      Text063@1077 : TextConst 'ENU=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\Do you want to continue?;ENN=Reservations exist for this order. These reservations will be canceled if a date conflict is caused by this change.\\Do you want to continue?';
      Text064@1090 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?;ENN=You may have changed a dimension.\\Do you want to update the lines?';
      UpdateDocumentDate@1120 : Boolean;
      Text066@1095 : TextConst 'ENU=You cannot change %1 to %2 because an open inventory pick on the %3.;ENN=You cannot change %1 to %2 because an open inventory pick on the %3.';
      Text070@1096 : TextConst 'ENU=You cannot change %1  to %2 because an open warehouse shipment exists for the %3.;ENN=You cannot change %1  to %2 because an open warehouse shipment exists for the %3.';
      BilltoCustomerNoChanged@1121 : Boolean;
      Text071@1011 : TextConst 'ENU=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.;ENN=There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.';
      Text072@1013 : TextConst 'ENU=There are unpaid prepayment invoices related to the document of type %1 with the number %2.;ENN=There are unpaid prepayment invoices related to the document of type %1 with the number %2.';
      DeferralLineQst@1144 : TextConst 'ENU=Do you want to update the deferral schedules for the lines?;ENN=Do you want to update the deferral schedules for the lines?';
      StrOrder@1280002 : Record 13794;
      StrOrderLine@1280001 : Record 13795;
      NODHeader@1280003 : Record 13786;
      GLSetupRead@1500100 : Boolean;
      Text16500@1500002 : TextConst 'ENU=Place a check mark in Direct Debit To PLA/RG.;ENN=Place a check mark in Direct Debit To PLA/RG.';
      Text16501@1500001 : TextConst 'ENU=The PLA/RG direct debit form can be accessed only when excise is liable.;ENN=The PLA/RG direct debit form can be accessed only when excise is liable.';
      PostedGateEntryLine@1500004 : Record 16556;
      GateEntryAttachment@1500005 : Record 16557;
      GateEntryAttachment2@1500007 : Record 16557;
      PostedGateEntryLineList@1500006 : Page 16480;
      Text16502@1500003 : TextConst 'ENU=The Service Tax Registration No. entered in Sales Line for Document Type %1 and Document No. %2 should be same for all the entries.;ENN=The Service Tax Registration No. entered in Sales Line for Document Type %1 and Document No. %2 should be same for all the entries.';
      ExciseCenvatClaim@1500015 : Record 16584;
      TotalBEDAmt@1500013 : Decimal;
      "TotalAED(GSI)Amt"@1500012 : Decimal;
      TotalSEDAmt@1500011 : Decimal;
      TotalSAEDAmt@1500010 : Decimal;
      TotalCESSAmt@1500009 : Decimal;
      TotalNCCDAmt@1500008 : Decimal;
      TotaleCessAmt@1500019 : Decimal;
      TotalADETAmt@1500018 : Decimal;
      TotalADEAmt@1500017 : Decimal;
      "TotalAED(TTA)Amt"@1500016 : Decimal;
      TotalADCVATAmt@1500021 : Decimal;
      TotalSHECessAmt@1500020 : Decimal;
      CenvatClaimForm@1500014 : Page 13793;
      StateForms@1500024 : Record 13767;
      SynchronizingMsg@1026 : TextConst 'ENU=Synchronizing ...\ from: Sales Header with %1\ to: Assembly Header with %2.;ENN=Synchronizing ...\ from: Sales Header with %1\ to: Assembly Header with %2.';
      ShippingAdviceErr@1029 : TextConst 'ENU=This order must be a complete shipment.;ENN=This order must be a complete shipment.';
      PostedDocsToPrintCreatedMsg@1084 : TextConst 'ENU=One or more documents have been posted during deletion, which you can print from the related posted document.;ENN=One or more documents have been posted during deletion, which you can print from the related posted document.';
      InvoiceTypeErr@1500030 : TextConst 'ENU=You can not change the Invoice Type for Shipped Document.;ENN=You can not change the Invoice Type for Shipped Document.';
      StructureChangeErr@1500025 : TextConst 'ENU=You can not change the sturcture as Shipment has already been taken place.;ENN=You can not change the sturcture as Shipment has already been taken place.';
      GSTStructureErr@1500026 : TextConst '@@@="%1=Structure,%2=PIT Structure";ENU=Structure on Header %1 and PIT Structure %2 on Line must be same.;ENN=Structure on Header %1 and PIT Structure %2 on Line must be same.';
      TransactionType2@1500027 : 'Purchase,Sale';
      GSTPaymentDutyErr@1500000 : TextConst 'ENU=You can only select GST without payment of Duty in Export or Deemed Export Customer.;ENN=You can only select GST without payment of Duty in Export or Deemed Export Customer.';

    PROCEDURE InitInsert@61();
    BEGIN
      IF "No." = '' THEN BEGIN
        TestNoSeries;
        NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
      END;
      CompanyInfo.GET;
      Trading := CompanyInfo."Trading Co.";
      GSTManagement.UpdateInvoiceType(Rec);
      InitRecord;
    END;

    PROCEDURE InitRecord@10();
    BEGIN
      SalesSetup.GET;
      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order,"Document Type"::"Blanket Order":
          BEGIN
            IF Trading THEN BEGIN
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos. (Trading)");
              NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Sales Shpt. (Trading)");
            END ELSE BEGIN
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
              NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
            END;
            IF "Document Type" = "Document Type"::Order THEN BEGIN
              NoSeriesMgt.SetDefaultSeries("Prepayment No. Series",SalesSetup."Posted Prepmt. Inv. Nos.");
              NoSeriesMgt.SetDefaultSeries("Prepmt. Cr. Memo No. Series",SalesSetup."Posted Prepmt. Cr. Memo Nos.");
            END;
            IF Trading THEN
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos. (Trading)");
            IF "Location Code" <> '' THEN BEGIN
              Location.GET("Location Code");
              IF NOT Trading THEN BEGIN
                GetPostInvoiceNoSeries;
                IF Location."Sales Shipment Nos." <> '' THEN
                  NoSeriesMgt.SetDefaultSeries("Shipping No. Series",Location."Sales Shipment Nos.");
              END ELSE BEGIN
                IF Location."Sales Invoice Nos. (Trading)" <> '' THEN
                  NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sales Invoice Nos. (Trading)");
                IF Location."Sales Shpt. Nos. (Trading)" <> '' THEN
                  NoSeriesMgt.SetDefaultSeries("Shipping No. Series",Location."Sales Shpt. Nos. (Trading)");
              END;
            END;
          END;
        "Document Type"::Invoice:
          BEGIN
            IF ("No. Series" <> '') AND
               (SalesSetup."Invoice Nos." = SalesSetup."Posted Invoice Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
            IF SalesSetup."Shipment on Invoice" THEN BEGIN
              IF Trading THEN
                NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Sales Shpt. (Trading)")
              ELSE
              NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
          END;
            IF Trading THEN
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos. (Trading)");
            IF "Location Code" <> '' THEN BEGIN
              Location.GET("Location Code");
              IF NOT Trading THEN BEGIN
                GetPostInvoiceNoSeries;
                IF (Location."Sales Shipment Nos." <> '') AND SalesSetup."Shipment on Invoice" THEN
                  NoSeriesMgt.SetDefaultSeries("Shipping No. Series",Location."Sales Shipment Nos.");
              END ELSE BEGIN
                IF Location."Sales Invoice Nos. (Trading)" <> '' THEN
                  NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sales Invoice Nos. (Trading)");
                IF (Location."Sales Shpt. Nos. (Trading)" <> '') AND SalesSetup."Shipment on Invoice" THEN
                  NoSeriesMgt.SetDefaultSeries("Shipping No. Series",Location."Sales Shpt. Nos. (Trading)");
              END;
            END;
          END;
        "Document Type"::"Return Order":
          BEGIN
            IF Trading THEN BEGIN
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Sale Cr. Memo (Trading)");
              NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Ret Rcpt Nos. (Trading)");
            END ELSE BEGIN
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
              NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
            END;
            IF "Location Code" <> '' THEN BEGIN
              Location.GET("Location Code");
              IF NOT Trading THEN BEGIN
                GetPostedCrMemoNoSeries;
                IF Location."Sales Return Receipt Nos." <> '' THEN
                  NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",Location."Sales Return Receipt Nos.");
              END ELSE BEGIN
                IF Location."Sale Cr. Memo Nos. (Trading)" <> '' THEN
                  NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sale Cr. Memo Nos. (Trading)");
                IF Location."Sales Ret Rcpt Nos. (Trading)" <> '' THEN
                  NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",Location."Sales Ret Rcpt Nos. (Trading)");
              END;
            END;
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            IF ("No. Series" <> '') AND
               (SalesSetup."Credit Memo Nos." = SalesSetup."Posted Credit Memo Nos.")
            THEN
              "Posting No. Series" := "No. Series"
            ELSE
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
            IF Trading THEN
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Sale Cr. Memo (Trading)");
            IF SalesSetup."Return Receipt on Credit Memo" THEN
              IF Trading THEN
                NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Ret Rcpt Nos. (Trading)")
              ELSE
              NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
            IF "Location Code" <> '' THEN BEGIN
              Location.GET("Location Code");
              IF NOT Trading THEN BEGIN
                GetPostedCrMemoNoSeries;
                IF (Location."Sales Return Receipt Nos." <> '') AND SalesSetup."Return Receipt on Credit Memo" THEN
                  NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",Location."Sales Return Receipt Nos.");
              END ELSE BEGIN
                IF Location."Sale Cr. Memo Nos. (Trading)" <> '' THEN
                  NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sale Cr. Memo Nos. (Trading)");
                IF (Location."Sales Ret Rcpt Nos. (Trading)" <> '') AND SalesSetup."Return Receipt on Credit Memo" THEN
                  NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",Location."Sales Ret Rcpt Nos. (Trading)");
              END;
            END;
          END;
      END;

      IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote] THEN
        BEGIN
        "Shipment Date" := WORKDATE;
        "Order Date" := WORKDATE;
      END;
      IF "Document Type" = "Document Type"::"Return Order" THEN
        "Order Date" := WORKDATE;

      IF NOT ("Document Type" IN ["Document Type"::"Blanket Order","Document Type"::Quote]) AND
         ("Posting Date" = 0D)
      THEN
        "Posting Date" := WORKDATE;

      IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN
        "Posting Date" := 0D;

      "Document Date" := WORKDATE;

      IF (NOT Trading) AND (NOT GSTManagement.IsGSTApplicable(Structure)) THEN
        VALIDATE("Location Code",UserSetupMgt.GetLocation(0,Cust."Location Code","Responsibility Center"));

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        GLSetup.GET;
        Correction := GLSetup."Mark Cr. Memos as Corrections";
      END;

      "Posting Description" := FORMAT("Document Type") + ' ' + "No.";

      UpdateOutboundWhseHandlingTime;

      "Responsibility Center" := UserSetupMgt.GetRespCenter(0,"Responsibility Center");
      "Time of Removal" := TIME;
    END;

    LOCAL PROCEDURE InitNoSeries@77();
    BEGIN
      IF xRec."Shipping No." <> '' THEN BEGIN
        "Shipping No. Series" := xRec."Shipping No. Series";
        "Shipping No." := xRec."Shipping No.";
      END;
      IF xRec."Posting No." <> '' THEN BEGIN
        "Posting No. Series" := xRec."Posting No. Series";
        "Posting No." := xRec."Posting No.";
      END;
      IF xRec."Return Receipt No." <> '' THEN BEGIN
        "Return Receipt No. Series" := xRec."Return Receipt No. Series";
        "Return Receipt No." := xRec."Return Receipt No.";
      END;
      IF xRec."Prepayment No." <> '' THEN BEGIN
        "Prepayment No. Series" := xRec."Prepayment No. Series";
        "Prepayment No." := xRec."Prepayment No.";
      END;
      IF xRec."Prepmt. Cr. Memo No." <> '' THEN BEGIN
        "Prepmt. Cr. Memo No. Series" := xRec."Prepmt. Cr. Memo No. Series";
        "Prepmt. Cr. Memo No." := xRec."Prepmt. Cr. Memo No.";
      END;
    END;

    PROCEDURE AssistEdit@1(OldSalesHeader@1000 : Record 36) : Boolean;
    VAR
      SalesHeader2@1001 : Record 36;
    BEGIN
      WITH SalesHeader DO BEGIN
        COPY(Rec);
        SalesSetup.GET;
        TestNoSeries;
        IF NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldSalesHeader."No. Series","No. Series") THEN BEGIN
          IF ("Sell-to Customer No." = '') AND ("Sell-to Contact No." = '') THEN BEGIN
            HideCreditCheckDialogue := FALSE;
            CheckCreditMaxBeforeInsert;
            HideCreditCheckDialogue := TRUE;
          END;
          NoSeriesMgt.SetSeries("No.");
          IF SalesHeader2.GET("Document Type","No.") THEN
            ERROR(Text051,LOWERCASE(FORMAT("Document Type")),"No.");
          Rec := SalesHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE TestNoSeries@6() : Boolean;
    BEGIN
      SalesSetup.GET;

      CASE "Document Type" OF
        "Document Type"::Quote:
          SalesSetup.TESTFIELD("Quote Nos.");
        "Document Type"::Order:
          SalesSetup.TESTFIELD("Order Nos.");
        "Document Type"::Invoice:
          BEGIN
            SalesSetup.TESTFIELD("Invoice Nos.");
            SalesSetup.TESTFIELD("Posted Invoice Nos.");
          END;
        "Document Type"::"Return Order":
          SalesSetup.TESTFIELD("Return Order Nos.");
        "Document Type"::"Credit Memo":
          BEGIN
            SalesSetup.TESTFIELD("Credit Memo Nos.");
            SalesSetup.TESTFIELD("Posted Credit Memo Nos.");
          END;
        "Document Type"::"Blanket Order":
          SalesSetup.TESTFIELD("Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(SalesSetup."Quote Nos.");
        "Document Type"::Order:
          EXIT(SalesSetup."Order Nos.");
        "Document Type"::Invoice:
          EXIT(SalesSetup."Invoice Nos.");
        "Document Type"::"Return Order":
          EXIT(SalesSetup."Return Order Nos.");
        "Document Type"::"Credit Memo":
          EXIT(SalesSetup."Credit Memo Nos.");
        "Document Type"::"Blanket Order":
          EXIT(SalesSetup."Blanket Order Nos.");
      END;
    END;

    LOCAL PROCEDURE GetPostingNoSeriesCode@8() : Code[10];
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(SalesSetup."Posted Credit Memo Nos.");
      EXIT(SalesSetup."Posted Invoice Nos.");
    END;

    LOCAL PROCEDURE GetPostingPrepaymentNoSeriesCode@59() : Code[10];
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT(SalesSetup."Posted Prepmt. Cr. Memo Nos.");
      EXIT(SalesSetup."Posted Prepmt. Inv. Nos.");
    END;

    LOCAL PROCEDURE TestNoSeriesDate@40(No@1000 : Code[20];NoSeriesCode@1001 : Code[10];NoCapt@1002 : Text[1024];NoSeriesCapt@1004 : Text[1024]);
    VAR
      NoSeries@1005 : Record 308;
    BEGIN
      IF (No <> '') AND (NoSeriesCode <> '') THEN BEGIN
        NoSeries.GET(NoSeriesCode);
        IF NoSeries."Date Order" THEN
          ERROR(
            Text045,
            FIELDCAPTION("Posting Date"),NoSeriesCapt,NoSeriesCode,
            NoSeries.FIELDCAPTION("Date Order"),NoSeries."Date Order","Document Type",
            NoCapt,No);
      END;
    END;

    PROCEDURE ConfirmDeletion@11() : Boolean;
    BEGIN
      SalesPost.TestDeleteHeader(
        Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,
        SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);
      IF SalesShptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text009,TRUE,
             SalesShptHeader."No.")
        THEN
          EXIT;
      IF SalesInvHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text012,TRUE,
             SalesInvHeader."No.")
        THEN
          EXIT;
      IF SalesCrMemoHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text014,TRUE,
             SalesCrMemoHeader."No.")
        THEN
          EXIT;
      IF ReturnRcptHeader."No." <> '' THEN
        IF NOT CONFIRM(
             Text030,TRUE,
             ReturnRcptHeader."No.")
        THEN
          EXIT;
      IF "Prepayment No." <> '' THEN
        IF NOT CONFIRM(
             Text056,TRUE,
             SalesInvHeaderPrepmt."No.")
        THEN
          EXIT;
      IF "Prepmt. Cr. Memo No." <> '' THEN
        IF NOT CONFIRM(
             Text057,TRUE,
             SalesCrMemoHeaderPrepmt."No.")
        THEN
          EXIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetCust@2(CustNo@1000 : Code[20]);
    BEGIN
      IF NOT (("Document Type" = "Document Type"::Quote) AND (CustNo = '')) THEN BEGIN
        IF CustNo <> Cust."No." THEN
          Cust.GET(CustNo);
      END ELSE
        CLEAR(Cust);
    END;

    PROCEDURE SalesLinesExist@3() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      EXIT(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE RecreateSalesLines@4(ChangedFieldName@1000 : Text[100]);
    VAR
      SalesLineTmp@1001 : TEMPORARY Record 37;
      ItemChargeAssgntSales@1004 : Record 5809;
      TempItemChargeAssgntSales@1003 : TEMPORARY Record 5809;
      TempInteger@1006 : TEMPORARY Record 2000000026;
      TempATOLink@1009 : TEMPORARY Record 904;
      ATOLink@1010 : Record 904;
      ExtendedTextAdded@1002 : Boolean;
    BEGIN
      IF SalesLinesExist THEN BEGIN
        IF HideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE
          Confirmed :=
            CONFIRM(
              Text015,FALSE,ChangedFieldName);
        IF Confirmed THEN BEGIN
          SalesLine.LOCKTABLE;
          ItemChargeAssgntSales.LOCKTABLE;
          ReservEntry.LOCKTABLE;
          MODIFY;
          SalesLine.RESET;
          SalesLine.SETRANGE("Document Type","Document Type");
          SalesLine.SETRANGE("Document No.","No.");
          IF SalesLine.FINDSET THEN BEGIN
            TempReservEntry.DELETEALL;
            RecreateReservEntryReqLine(SalesLineTmp,TempATOLink,ATOLink);
            ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
            ItemChargeAssgntSales.SETRANGE("Document No.","No.");
            TransferItemChargeAssgntSalesToTemp(ItemChargeAssgntSales,TempItemChargeAssgntSales);
            SalesLine.DELETEALL(TRUE);
            SalesLine.INIT;
            SalesLine."Line No." := 0;
            SalesLineTmp.FINDSET;
            ExtendedTextAdded := FALSE;
            SalesLine.BlockDynamicTracking(TRUE);
            REPEAT
              IF SalesLineTmp."Attached to Line No." = 0 THEN BEGIN
                CreateSalesLine(SalesLineTmp);
                ExtendedTextAdded := FALSE;

                IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN
                  ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",SalesLineTmp."Document Type");
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",SalesLineTmp."Document No.");
                  TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",SalesLineTmp."Line No.");
                  IF TempItemChargeAssgntSales.FINDSET THEN
                    REPEAT
                      IF NOT TempItemChargeAssgntSales.MARK THEN BEGIN
                        TempItemChargeAssgntSales."Applies-to Doc. Line No." := SalesLine."Line No.";
                        TempItemChargeAssgntSales.Description := SalesLine.Description;
                        TempItemChargeAssgntSales.MODIFY;
                        TempItemChargeAssgntSales.MARK(TRUE);
                      END;
                    UNTIL TempItemChargeAssgntSales.NEXT = 0;
                END;
                IF SalesLine.Type = SalesLine.Type::"Charge (Item)" THEN BEGIN
                  TempInteger.INIT;
                  TempInteger.Number := SalesLine."Line No.";
                  TempInteger.INSERT;
                END;
              END ELSE
                IF NOT ExtendedTextAdded THEN BEGIN
                  TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,TRUE);
                  TransferExtendedText.InsertSalesExtText(SalesLine);
                  SalesLine.FINDLAST;
                  ExtendedTextAdded := TRUE;
                END;
              RecreateReservEntry(SalesLineTmp,SalesLine."Line No.",FALSE);
              RecreateReqLine(SalesLineTmp,SalesLine."Line No.",FALSE);
              SynchronizeForReservations(SalesLine,SalesLineTmp);

              IF TempATOLink.AsmExistsForSalesLine(SalesLineTmp) THEN BEGIN
                ATOLink := TempATOLink;
                ATOLink.INSERT;
                ATOLink.UpdateAsmFromSalesLineATOExist(SalesLine);
                TempATOLink.DELETE;
              END;
            UNTIL SalesLineTmp.NEXT = 0;

            ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
            SalesLineTmp.SETRANGE(Type,SalesLine.Type::"Charge (Item)");
            CreateItemChargeAssgntSales(ItemChargeAssgntSales,TempItemChargeAssgntSales,SalesLineTmp,TempInteger);
            SalesLineTmp.SETRANGE(Type);
            SalesLineTmp.DELETEALL;
            ClearItemAssgntSalesFilter(TempItemChargeAssgntSales);
            TempItemChargeAssgntSales.DELETEALL;
          END;
        END ELSE
          ERROR(
            Text017,ChangedFieldName);
      END;
      SalesLine.BlockDynamicTracking(FALSE);
    END;

    LOCAL PROCEDURE MessageIfSalesLinesExist@5(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF SalesLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text018 +
          Text019,
          ChangedFieldName);
    END;

    LOCAL PROCEDURE PriceMessageIfSalesLinesExist@7(ChangedFieldName@1000 : Text[100]);
    BEGIN
      IF SalesLinesExist AND NOT HideValidationDialog THEN
        MESSAGE(
          Text018 +
          Text020,ChangedFieldName);
    END;

    LOCAL PROCEDURE UpdateCurrencyFactor@12();
    BEGIN
      IF "Currency Code" <> '' THEN BEGIN
        IF "Posting Date" <> 0D THEN
          CurrencyDate := "Posting Date"
        ELSE
          CurrencyDate := WORKDATE;

        "Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code");
      END ELSE
        "Currency Factor" := 0;
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyFactor@13();
    BEGIN
      IF HideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(Text021,FALSE);
      IF Confirmed THEN
        VALIDATE("Currency Factor")
      ELSE
        "Currency Factor" := xRec."Currency Factor";
    END;

    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE UpdateSalesLines@15(ChangedFieldName@1000 : Text[100];AskQuestion@1001 : Boolean);
    VAR
      JobTransferLine@1004 : Codeunit 1004;
      Question@1002 : Text[250];
    BEGIN
      IF NOT SalesLinesExist THEN
        EXIT;

      IF AskQuestion THEN BEGIN
        Question := STRSUBSTNO(
            Text031 +
            Text032,ChangedFieldName);
        IF GUIALLOWED THEN
          IF DIALOG.CONFIRM(Question,TRUE) THEN
            CASE ChangedFieldName OF
              FIELDCAPTION("Shipment Date"),
              FIELDCAPTION("Shipping Agent Code"),
              FIELDCAPTION("Shipping Agent Service Code"),
              FIELDCAPTION("Shipping Time"),
              FIELDCAPTION("Requested Delivery Date"),
              FIELDCAPTION("Promised Delivery Date"),
              FIELDCAPTION("Outbound Whse. Handling Time"):
                ConfirmResvDateConflict;
            END
          ELSE
            EXIT;
      END;

      SalesLine.LOCKTABLE;
      MODIFY;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      IF SalesLine.FINDSET THEN
        REPEAT
          CASE ChangedFieldName OF
            FIELDCAPTION("Shipment Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipment Date","Shipment Date");
            FIELDCAPTION("Currency Factor"):
              IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
                SalesLine.VALIDATE("Unit Price");
                SalesLine.VALIDATE("Unit Cost (LCY)");
                IF SalesLine."Job No." <> '' THEN
                  JobTransferLine.FromSalesHeaderToPlanningLine(SalesLine,"Currency Factor");
              END;
            FIELDCAPTION("Transaction Type"):
              SalesLine.VALIDATE("Transaction Type","Transaction Type");
            FIELDCAPTION("Transport Method"):
              SalesLine.VALIDATE("Transport Method","Transport Method");
            FIELDCAPTION("Exit Point"):
              SalesLine.VALIDATE("Exit Point","Exit Point");
            FIELDCAPTION(Area):
              SalesLine.VALIDATE(Area,Area);
            FIELDCAPTION("Transaction Specification"):
              SalesLine.VALIDATE("Transaction Specification","Transaction Specification");
            FIELDCAPTION("Shipping Agent Code"):
              SalesLine.VALIDATE("Shipping Agent Code","Shipping Agent Code");
            FIELDCAPTION("Shipping Agent Service Code"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipping Agent Service Code","Shipping Agent Service Code");
            FIELDCAPTION("Shipping Time"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Shipping Time","Shipping Time");
            FIELDCAPTION("Prepayment %"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Prepayment %","Prepayment %");
            FIELDCAPTION("Requested Delivery Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Requested Delivery Date","Requested Delivery Date");
            FIELDCAPTION("Promised Delivery Date"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Promised Delivery Date","Promised Delivery Date");
            FIELDCAPTION("Outbound Whse. Handling Time"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Outbound Whse. Handling Time","Outbound Whse. Handling Time");
            SalesLine.FIELDCAPTION("Deferral Code"):
              IF SalesLine."No." <> '' THEN
                SalesLine.VALIDATE("Deferral Code");
            FIELDCAPTION("Form Code"):
              IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
                SalesLine.VALIDATE("Form Code","Form Code");
                SalesLine.VALIDATE("Form No.","Form No.");
              END;
          END;
          SalesLineReserve.AssignForPlanning(SalesLine);
          SalesLine.MODIFY(TRUE);
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ConfirmResvDateConflict@41();
    VAR
      ResvEngMgt@1000 : Codeunit 99000831;
    BEGIN
      IF ResvEngMgt.ResvExistsForSalesHeader(Rec) THEN
        IF NOT CONFIRM(Text063,FALSE) THEN
          ERROR('');
    END;

    PROCEDURE CreateDim@16(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1008 : Integer;No5@1009 : Code[20]);
    VAR
      SourceCodeSetup@1010 : Record 242;
      TableID@1011 : ARRAY [10] OF Integer;
      No@1012 : ARRAY [10] OF Code[20];
      OldDimSetID@1013 : Integer;
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(TableID,No,SourceCodeSetup.Sales,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      IF (OldDimSetID <> "Dimension Set ID") AND SalesLinesExist THEN BEGIN
        MODIFY;
        UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@19(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1005 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      IF "No." <> '' THEN
        MODIFY;

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF SalesLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE ShippedSalesLinesExist@22() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Quantity Shipped",'<>0');
      EXIT(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE ReturnReceiptExist@5800() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Return Qty. Received",'<>0');
      EXIT(SalesLine.FINDFIRST);
    END;

    LOCAL PROCEDURE DeleteSalesLines@20();
    BEGIN
      IF SalesLine.FINDSET THEN BEGIN
        HandleItemTrackingDeletion;
        REPEAT
          SalesLine.SuspendStatusCheck(TRUE);
          SalesLine.DELETE(TRUE);
        UNTIL SalesLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE HandleItemTrackingDeletion@36();
    VAR
      ReservEntry2@1000 : Record 337;
    BEGIN
      WITH ReservEntry DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Source ID","Source Ref. No.","Source Type","Source Subtype",
          "Source Batch Name","Source Prod. Order Line","Reservation Status");
        SETRANGE("Source Type",DATABASE::"Sales Line");
        SETRANGE("Source Subtype","Document Type");
        SETRANGE("Source ID","No.");
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETFILTER("Item Tracking",'> %1',"Item Tracking"::None);
        IF ISEMPTY THEN
          EXIT;

        IF HideValidationDialog OR NOT GUIALLOWED THEN
          Confirmed := TRUE
        ELSE
          Confirmed := CONFIRM(Text052,FALSE,LOWERCASE(FORMAT("Document Type")),"No.");

        IF NOT Confirmed THEN
          ERROR('');

        IF FINDSET THEN
          REPEAT
            ReservEntry2 := ReservEntry;
            ReservEntry2.ClearItemTrackingFields;
            ReservEntry2.MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE ClearItemAssgntSalesFilter@17(VAR TempItemChargeAssgntSales@1000 : Record 5809);
    BEGIN
      TempItemChargeAssgntSales.SETRANGE("Document Line No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.");
      TempItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.");
    END;

    PROCEDURE CheckCustomerCreated@18(Prompt@1000 : Boolean) : Boolean;
    VAR
      Cont@1001 : Record 5050;
    BEGIN
      IF ("Bill-to Customer No." <> '') AND ("Sell-to Customer No." <> '') THEN
        EXIT(TRUE);

      IF Prompt THEN
        IF NOT CONFIRM(Text035,TRUE) THEN
          EXIT(FALSE);

      IF "Sell-to Customer No." = '' THEN BEGIN
        TESTFIELD("Sell-to Contact No.");
        TESTFIELD("Sell-to Customer Template Code");
        Cont.GET("Sell-to Contact No.");
        Cont.CreateCustomer("Sell-to Customer Template Code");
        COMMIT;
        GET("Document Type"::Quote,"No.");
      END;

      IF "Bill-to Customer No." = '' THEN BEGIN
        TESTFIELD("Bill-to Contact No.");
        TESTFIELD("Bill-to Customer Template Code");
        Cont.GET("Bill-to Contact No.");
        Cont.CreateCustomer("Bill-to Customer Template Code");
        COMMIT;
        GET("Document Type"::Quote,"No.");
      END;

      EXIT(("Bill-to Customer No." <> '') AND ("Sell-to Customer No." <> ''));
    END;

    LOCAL PROCEDURE RecreateReservEntry@21(OldSalesLine@1000 : Record 37;NewSourceRefNo@1001 : Integer;ToTemp@1002 : Boolean);
    BEGIN
      IF ToTemp THEN BEGIN
        CLEAR(ReservEntry);
        ReservEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        ReservEntry.SETRANGE("Source ID",OldSalesLine."Document No.");
        ReservEntry.SETRANGE("Source Ref. No.",OldSalesLine."Line No.");
        ReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
        ReservEntry.SETRANGE("Source Subtype",OldSalesLine."Document Type");
        IF ReservEntry.FINDSET THEN
          REPEAT
            TempReservEntry := ReservEntry;
            TempReservEntry.INSERT;
          UNTIL ReservEntry.NEXT = 0;
        ReservEntry.DELETEALL;
      END ELSE BEGIN
        CLEAR(TempReservEntry);
        TempReservEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        TempReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
        TempReservEntry.SETRANGE("Source Subtype",OldSalesLine."Document Type");
        TempReservEntry.SETRANGE("Source ID",OldSalesLine."Document No.");
        TempReservEntry.SETRANGE("Source Ref. No.",OldSalesLine."Line No.");
        IF TempReservEntry.FINDSET THEN
          REPEAT
            ReservEntry := TempReservEntry;
            ReservEntry."Source Ref. No." := NewSourceRefNo;
            ReservEntry.INSERT;
          UNTIL TempReservEntry.NEXT = 0;
        TempReservEntry.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE RecreateReqLine@33(OldSalesLine@1000 : Record 37;NewSourceRefNo@1001 : Integer;ToTemp@1002 : Boolean);
    VAR
      ReqLine@1003 : Record 246;
    BEGIN
      IF ToTemp THEN BEGIN
        ReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        ReqLine.SETRANGE("Order Promising ID",OldSalesLine."Document No.");
        ReqLine.SETRANGE("Order Promising Line ID",OldSalesLine."Line No.");
        IF ReqLine.FINDSET THEN
          REPEAT
            TempReqLine := ReqLine;
            TempReqLine.INSERT;
          UNTIL ReqLine.NEXT = 0;
        ReqLine.DELETEALL;
      END ELSE BEGIN
        CLEAR(TempReqLine);
        TempReqLine.SETCURRENTKEY("Order Promising ID","Order Promising Line ID","Order Promising Line No.");
        TempReqLine.SETRANGE("Order Promising ID",OldSalesLine."Document No.");
        TempReqLine.SETRANGE("Order Promising Line ID",OldSalesLine."Line No.");
        IF TempReqLine.FINDSET THEN
          REPEAT
            ReqLine := TempReqLine;
            ReqLine."Order Promising Line ID" := NewSourceRefNo;
            ReqLine.INSERT;
          UNTIL TempReqLine.NEXT = 0;
        TempReqLine.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE UpdateSellToCont@24(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1004 : Record 18;
    BEGIN
      IF Cust.GET(CustomerNo) THEN BEGIN
        IF Cust."Primary Contact No." <> '' THEN
          "Sell-to Contact No." := Cust."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Sell-to Customer No.");
          IF ContBusRel.FINDFIRST THEN
            "Sell-to Contact No." := ContBusRel."Contact No."
          ELSE
            "Sell-to Contact No." := '';
        END;
        "Sell-to Contact" := Cust.Contact;
      END;
    END;

    LOCAL PROCEDURE UpdateBillToCont@27(CustomerNo@1000 : Code[20]);
    VAR
      ContBusRel@1003 : Record 5054;
      Cust@1001 : Record 18;
    BEGIN
      IF Cust.GET(CustomerNo) THEN BEGIN
        IF Cust."Primary Contact No." <> '' THEN
          "Bill-to Contact No." := Cust."Primary Contact No."
        ELSE BEGIN
          ContBusRel.RESET;
          ContBusRel.SETCURRENTKEY("Link to Table","No.");
          ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
          ContBusRel.SETRANGE("No.","Bill-to Customer No.");
          IF ContBusRel.FINDFIRST THEN
            "Bill-to Contact No." := ContBusRel."Contact No."
          ELSE
            "Bill-to Contact No." := '';
        END;
        "Bill-to Contact" := Cust.Contact;
      END;
    END;

    LOCAL PROCEDURE UpdateSellToCust@25(ContactNo@1002 : Code[20]);
    VAR
      ContBusinessRelation@1007 : Record 5054;
      Customer@1006 : Record 18;
      Cont@1005 : Record 5050;
      CustTemplate@1004 : Record 5105;
      ContComp@1003 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN
        "Sell-to Contact No." := Cont."No."
      ELSE BEGIN
        "Sell-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF ("Sell-to Customer No." <> '') AND
           ("Sell-to Customer No." <> ContBusinessRelation."No.")
        THEN
          ERROR(Text037,Cont."No.",Cont.Name,"Sell-to Customer No.");
        IF "Sell-to Customer No." = '' THEN BEGIN
          SkipSellToContact := TRUE;
          VALIDATE("Sell-to Customer No.",ContBusinessRelation."No.");
          SkipSellToContact := FALSE;
        END;
      END ELSE BEGIN
        IF "Document Type" = "Document Type"::Quote THEN BEGIN
          Cont.TESTFIELD("Company No.");
          ContComp.GET(Cont."Company No.");
          "Sell-to Customer Name" := ContComp."Company Name";
          "Sell-to Customer Name 2" := ContComp."Name 2";
          "Ship-to Name" := ContComp."Company Name";
          "Ship-to Name 2" := ContComp."Name 2";
          "Ship-to Address" := ContComp.Address;
          "Ship-to Address 2" := ContComp."Address 2";
          "Ship-to City" := ContComp.City;
          "Ship-to Post Code" := ContComp."Post Code";
          "Ship-to County" := ContComp.County;
          VALIDATE("Ship-to Country/Region Code",ContComp."Country/Region Code");
          IF ("Sell-to Customer Template Code" = '') AND (NOT CustTemplate.ISEMPTY) THEN
            VALIDATE("Sell-to Customer Template Code",Cont.FindCustomerTemplate);
        END ELSE
          ERROR(Text039,Cont."No.",Cont.Name);
      END;

      IF Cont.Type = Cont.Type::Person THEN
        "Sell-to Contact" := Cont.Name
      ELSE
        IF Customer.GET("Sell-to Customer No.") THEN
          "Sell-to Contact" := Customer.Contact
        ELSE
          "Sell-to Contact" := '';

      IF "Document Type" = "Document Type"::Quote THEN BEGIN
        IF Customer.GET("Sell-to Customer No.") OR Customer.GET(ContBusinessRelation."No.") THEN BEGIN
          IF Customer."Copy Sell-to Addr. to Qte From" = Customer."Copy Sell-to Addr. to Qte From"::Company THEN BEGIN
            Cont.TESTFIELD("Company No.");
            Cont.GET(Cont."Company No.");
          END;
        END ELSE BEGIN
          Cont.TESTFIELD("Company No.");
          Cont.GET(Cont."Company No.");
        END;
        "Sell-to Address" := Cont.Address;
        "Sell-to Address 2" := Cont."Address 2";
        "Sell-to City" := Cont.City;
        "Sell-to Post Code" := Cont."Post Code";
        "Sell-to County" := Cont.County;
        "Sell-to Country/Region Code" := Cont."Country/Region Code";
        "Nature of Services" := Cust."Nature of Services";
      END;
      IF ("Sell-to Customer No." = "Bill-to Customer No.") OR
         ("Bill-to Customer No." = '')
      THEN
        VALIDATE("Bill-to Contact No.","Sell-to Contact No.");
    END;

    LOCAL PROCEDURE UpdateBillToCust@26(ContactNo@1000 : Code[20]);
    VAR
      ContBusinessRelation@1005 : Record 5054;
      Cust@1004 : Record 18;
      Cont@1003 : Record 5050;
      CustTemplate@1002 : Record 5105;
      ContComp@1001 : Record 5050;
    BEGIN
      IF Cont.GET(ContactNo) THEN BEGIN
        "Bill-to Contact No." := Cont."No.";
        IF Cont.Type = Cont.Type::Person THEN
          "Bill-to Contact" := Cont.Name
        ELSE
          IF Cust.GET("Bill-to Customer No.") THEN
            "Bill-to Contact" := Cust.Contact
          ELSE
            "Bill-to Contact" := '';
      END ELSE BEGIN
        "Bill-to Contact" := '';
        EXIT;
      END;

      ContBusinessRelation.RESET;
      ContBusinessRelation.SETCURRENTKEY("Link to Table","Contact No.");
      ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
      ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
      IF ContBusinessRelation.FINDFIRST THEN BEGIN
        IF "Bill-to Customer No." = '' THEN BEGIN
          SkipBillToContact := TRUE;
          VALIDATE("Bill-to Customer No.",ContBusinessRelation."No.");
          SkipBillToContact := FALSE;
          "Bill-to Customer Template Code" := '';
        END ELSE
          IF "Bill-to Customer No." <> ContBusinessRelation."No." THEN
            ERROR(Text037,Cont."No.",Cont.Name,"Bill-to Customer No.");
      END ELSE BEGIN
        IF "Document Type" = "Document Type"::Quote THEN BEGIN
          Cont.TESTFIELD("Company No.");
          ContComp.GET(Cont."Company No.");
          "Bill-to Name" := ContComp."Company Name";
          "Bill-to Name 2" := ContComp."Name 2";
          "Bill-to Address" := ContComp.Address;
          "Bill-to Address 2" := ContComp."Address 2";
          "Bill-to City" := ContComp.City;
          "Bill-to Post Code" := ContComp."Post Code";
          "Bill-to County" := ContComp.County;
          "Bill-to Country/Region Code" := ContComp."Country/Region Code";
          "VAT Registration No." := ContComp."VAT Registration No.";
          VALIDATE("Currency Code",ContComp."Currency Code");
          "Language Code" := ContComp."Language Code";
          IF ("Bill-to Customer Template Code" = '') AND (NOT CustTemplate.ISEMPTY) THEN
            VALIDATE("Bill-to Customer Template Code",Cont.FindCustomerTemplate);
        END ELSE
          ERROR(Text039,Cont."No.",Cont.Name);
      END;
    END;

    LOCAL PROCEDURE GetShippingTime@23(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF (CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0) THEN
        EXIT;

      IF ShippingAgentService.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
        "Shipping Time" := ShippingAgentService."Shipping Time"
      ELSE BEGIN
        GetCust("Sell-to Customer No.");
        "Shipping Time" := Cust."Shipping Time"
      END;
      IF NOT (CalledByFieldNo IN [FIELDNO("Shipping Agent Code"),FIELDNO("Shipping Agent Service Code")]) THEN
        VALIDATE("Shipping Time");
    END;

    PROCEDURE CheckCreditMaxBeforeInsert@28();
    VAR
      SalesHeader@1001 : Record 36;
      ContBusinessRelation@1002 : Record 5054;
      Cont@1003 : Record 5050;
      CustCheckCreditLimit@1000 : Codeunit 312;
    BEGIN
      IF HideCreditCheckDialogue THEN
        EXIT;
      IF (GetFilterCustNo <> '') OR ("Sell-to Customer No." <> '') THEN BEGIN
        IF "Sell-to Customer No." <> '' THEN
          Cust.GET("Sell-to Customer No.")
        ELSE
          Cust.GET(GetFilterCustNo);
        IF Cust."Bill-to Customer No." <> '' THEN
          SalesHeader."Bill-to Customer No." := Cust."Bill-to Customer No."
        ELSE
          SalesHeader."Bill-to Customer No." := Cust."No.";
        CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
      END ELSE
        IF GetFilterContNo <> '' THEN BEGIN
          Cont.GET(GetFilterContNo);
          ContBusinessRelation.RESET;
          ContBusinessRelation.SETCURRENTKEY("Link to Table","No.");
          ContBusinessRelation.SETRANGE("Link to Table",ContBusinessRelation."Link to Table"::Customer);
          ContBusinessRelation.SETRANGE("Contact No.",Cont."Company No.");
          IF ContBusinessRelation.FINDFIRST THEN BEGIN
            Cust.GET(ContBusinessRelation."No.");
            IF Cust."Bill-to Customer No." <> '' THEN
              SalesHeader."Bill-to Customer No." := Cust."Bill-to Customer No."
            ELSE
              SalesHeader."Bill-to Customer No." := Cust."No.";
            CustCheckCreditLimit.SalesHeaderCheck(SalesHeader);
          END;
        END;
    END;

    PROCEDURE CreateInvtPutAwayPick@29();
    VAR
      WhseRequest@1000 : Record 5765;
    BEGIN
      IF "Document Type" = "Document Type"::Order THEN
        IF NOT IsApprovedForPosting THEN
          EXIT;
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      CASE "Document Type" OF
        "Document Type"::Order:
          BEGIN
            IF "Shipping Advice" = "Shipping Advice"::Complete THEN
              CheckShippingAdvice;
            WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Order");
          END;
        "Document Type"::"Return Order":
          WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Sales Return Order");
      END;
      WhseRequest.SETRANGE("Source No.","No.");
      REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",TRUE,FALSE,WhseRequest);
    END;

    PROCEDURE CreateTodo@30();
    VAR
      TempTodo@1000 : TEMPORARY Record 5080;
    BEGIN
      TESTFIELD("Sell-to Contact No.");
      TempTodo.CreateToDoFromSalesHeader(Rec);
    END;

    LOCAL PROCEDURE UpdateShipToAddress@31();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        IF "Location Code" <> '' THEN BEGIN
          Location.GET("Location Code");
          "Ship-to Name" := Location.Name;
          "Ship-to Name 2" := Location."Name 2";
          "Ship-to Address" := Location.Address;
          "Ship-to Address 2" := Location."Address 2";
          "Ship-to City" := Location.City;
          "Ship-to Post Code" := Location."Post Code";
          "Ship-to County" := Location.County;
          "Ship-to Country/Region Code" := Location."Country/Region Code";
          "Ship-to Contact" := Location.Contact;
        END ELSE BEGIN
          CompanyInfo.GET;
          "Ship-to Code" := '';
          "Ship-to Name" := CompanyInfo."Ship-to Name";
          "Ship-to Name 2" := CompanyInfo."Ship-to Name 2";
          "Ship-to Address" := CompanyInfo."Ship-to Address";
          "Ship-to Address 2" := CompanyInfo."Ship-to Address 2";
          "Ship-to City" := CompanyInfo."Ship-to City";
          "Ship-to Post Code" := CompanyInfo."Ship-to Post Code";
          "Ship-to County" := CompanyInfo."Ship-to County";
          "Ship-to Country/Region Code" := CompanyInfo."Ship-to Country/Region Code";
          "Ship-to Contact" := CompanyInfo."Ship-to Contact";
        END;
      END;
    END;

    PROCEDURE ShowDocDim@32();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF SalesLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      ATOLink@1003 : Record 904;
      NewDimSetID@1002 : Integer;
      ShippedReceivedItemLineDimChangeConfirmed@1004 : Boolean;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT HideValidationDialog AND GUIALLOWED THEN
        IF NOT CONFIRM(Text064) THEN
          EXIT;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.LOCKTABLE;
      IF SalesLine.FIND('-') THEN
        REPEAT
          NewDimSetID := DimMgt.GetDeltaDimSetID(SalesLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF SalesLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            SalesLine."Dimension Set ID" := NewDimSetID;

            IF NOT HideValidationDialog AND GUIALLOWED THEN
              VerifyShippedReceivedItemLineDimChange(ShippedReceivedItemLineDimChangeConfirmed);

            DimMgt.UpdateGlobalDimFromDimSetID(
              SalesLine."Dimension Set ID",SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
            SalesLine.MODIFY;
            ATOLink.UpdateAsmDimFromSalesLine(SalesLine);
          END;
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyShippedReceivedItemLineDimChange@105(VAR ShippedReceivedItemLineDimChangeConfirmed@1000 : Boolean);
    BEGIN
      IF SalesLine.IsShippedReceivedItemDimChanged THEN
        IF NOT ShippedReceivedItemLineDimChangeConfirmed THEN
          ShippedReceivedItemLineDimChangeConfirmed := SalesLine.ConfirmShippedReceivedItemDimChange;
    END;

    PROCEDURE SetAmountToApply@35(AppliesToDocNo@1000 : Code[20];CustomerNo@1001 : Code[20]);
    VAR
      CustLedgEntry@1002 : Record 21;
    BEGIN
      CustLedgEntry.SETCURRENTKEY("Document No.");
      CustLedgEntry.SETRANGE("Document No.",AppliesToDocNo);
      CustLedgEntry.SETRANGE("Customer No.",CustomerNo);
      CustLedgEntry.SETRANGE(Open,TRUE);
      IF CustLedgEntry.FINDFIRST THEN BEGIN
        IF GSTManagement.IsGSTApplicable(Structure) THEN
          GSTApplicationManagement.FillAppBufferHSNComponentInvoice(
            TransactionType2::Sale,CustLedgEntry."Customer No.","Document Type","No.");
        IF CustLedgEntry."Amount to Apply" = 0 THEN  BEGIN
          CustLedgEntry.CALCFIELDS("Remaining Amount");
          CustLedgEntry."Amount to Apply" := CustLedgEntry."Remaining Amount";
        END ELSE
          CustLedgEntry."Amount to Apply" := 0;
        CustLedgEntry."Accepted Payment Tolerance" := 0;
        CustLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
        IF GSTManagement.IsGSTApplicable(Structure)  AND ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
          ("Applies-to Doc. No." <> '') THEN BEGIN
          CalculateGSTStructure(Rec);
          CustEntryEdit.SetGSTType(Rec,TRUE);
          CustEntryEdit.RUN(CustLedgEntry);
        END ELSE
        CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
      END;
    END;

    PROCEDURE LookupAdjmtValueEntries@37(QtyType@1000 : 'General,Invoicing');
    VAR
      ItemLedgEntry@1004 : Record 32;
      SalesLine@1001 : Record 37;
      SalesShptLine@1005 : Record 111;
      ReturnRcptLine@1002 : Record 6661;
      TempValueEntry@1003 : TEMPORARY Record 5802;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      TempValueEntry.RESET;
      TempValueEntry.DELETEALL;

      CASE "Document Type" OF
        "Document Type"::Order,"Document Type"::Invoice:
          BEGIN
            IF SalesLine.FINDSET THEN
              REPEAT
                IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine.Quantity <> 0) THEN
                  WITH SalesShptLine DO BEGIN
                    IF SalesLine."Shipment No." <> '' THEN BEGIN
                      SETRANGE("Document No.",SalesLine."Shipment No.");
                      SETRANGE("Line No.",SalesLine."Shipment Line No.");
                    END ELSE BEGIN
                      SETCURRENTKEY("Order No.","Order Line No.");
                      SETRANGE("Order No.",SalesLine."Document No.");
                      SETRANGE("Order Line No.",SalesLine."Line No.");
                    END;
                    SETRANGE(Correction,FALSE);
                    IF QtyType = QtyType::Invoicing THEN
                      SETFILTER("Qty. Shipped Not Invoiced",'<>0');

                    IF FINDSET THEN
                      REPEAT
                        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                        IF ItemLedgEntry.FINDSET THEN
                          REPEAT
                            CreateTempAdjmtValueEntries(TempValueEntry,ItemLedgEntry."Entry No.");
                          UNTIL ItemLedgEntry.NEXT = 0;
                      UNTIL NEXT = 0;
                  END;
              UNTIL SalesLine.NEXT = 0;
          END;
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          BEGIN
            IF SalesLine.FINDSET THEN
              REPEAT
                IF (SalesLine.Type = SalesLine.Type::Item) AND (SalesLine.Quantity <> 0) THEN
                  WITH ReturnRcptLine DO BEGIN
                    IF SalesLine."Return Receipt No." <> '' THEN BEGIN
                      SETRANGE("Document No.",SalesLine."Return Receipt No.");
                      SETRANGE("Line No.",SalesLine."Return Receipt Line No.");
                    END ELSE BEGIN
                      SETCURRENTKEY("Return Order No.","Return Order Line No.");
                      SETRANGE("Return Order No.",SalesLine."Document No.");
                      SETRANGE("Return Order Line No.",SalesLine."Line No.");
                    END;
                    SETRANGE(Correction,FALSE);
                    IF QtyType = QtyType::Invoicing THEN
                      SETFILTER("Return Qty. Rcd. Not Invd.",'<>0');

                    IF FINDSET THEN
                      REPEAT
                        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
                        IF ItemLedgEntry.FINDSET THEN
                          REPEAT
                            CreateTempAdjmtValueEntries(TempValueEntry,ItemLedgEntry."Entry No.");
                          UNTIL ItemLedgEntry.NEXT = 0;
                      UNTIL NEXT = 0;
                  END;
              UNTIL SalesLine.NEXT = 0;
          END;
      END;
      PAGE.RUNMODAL(0,TempValueEntry);
    END;

    PROCEDURE GetCustomerVATRegistrationNumber@63() : Text;
    BEGIN
      EXIT("VAT Registration No.");
    END;

    PROCEDURE GetCustomerVATRegistrationNumberLbl@62() : Text;
    BEGIN
      EXIT(FIELDCAPTION("VAT Registration No."));
    END;

    PROCEDURE GetCustomerGlobalLocationNumber@164() : Text;
    BEGIN
      EXIT('');
    END;

    PROCEDURE GetCustomerGlobalLocationNumberLbl@161() : Text;
    BEGIN
      EXIT('');
    END;

    LOCAL PROCEDURE CreateTempAdjmtValueEntries@38(VAR TempValueEntry@1001 : TEMPORARY Record 5802;ItemLedgEntryNo@1000 : Integer);
    VAR
      ValueEntry@1002 : Record 5802;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
        IF FINDSET THEN
          REPEAT
            IF Adjustment THEN BEGIN
              TempValueEntry := ValueEntry;
              IF TempValueEntry.INSERT THEN;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE GetPstdDocLinesToRevere@39();
    VAR
      SalesPostedDocLines@1000 : Page 5850;
    BEGIN
      GetCust("Sell-to Customer No.");
      SalesPostedDocLines.SetToSalesHeader(Rec);
      SalesPostedDocLines.SETRECORD(Cust);
      SalesPostedDocLines.LOOKUPMODE := TRUE;
      IF SalesPostedDocLines.RUNMODAL = ACTION::LookupOK THEN
        SalesPostedDocLines.CopyLineToDoc;

      CLEAR(SalesPostedDocLines);
    END;

    PROCEDURE CalcInvDiscForHeader@45();
    VAR
      SalesInvDisc@1000 : Codeunit 60;
    BEGIN
      SalesSetup.GET;
      IF SalesSetup."Calc. Inv. Discount" THEN
        SalesInvDisc.CalculateIncDiscForHeader(Rec);
    END;

    PROCEDURE SetSecurityFilterOnRespCenter@43();
    BEGIN
      IF UserSetupMgt.GetSalesFilter <> '' THEN BEGIN
        FILTERGROUP(2);
        SETRANGE("Responsibility Center",UserSetupMgt.GetSalesFilter);
        FILTERGROUP(0);
      END;

      SETRANGE("Date Filter",0D,WORKDATE - 1);
    END;

    PROCEDURE Authorize@50();
    VAR
      DOPaymentTransLogEntry@1001 : Record 829;
    BEGIN
      IF NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code") THEN
        ERROR(Text069,FIELDCAPTION("Payment Method Code"));
      DOPaymentTransLogMgt.FindValidAuthorizationEntry("Document Type","No.",DOPaymentTransLogEntry);
      IF DOPaymentTransLogEntry."Entry No." = DOPaymentMgt.AuthorizeSalesDoc(Rec,0,TRUE) THEN
        ERROR(Text067,
          DOPaymentTransLogEntry."Document Type",
          DOPaymentTransLogEntry.Amount,
          DOPaymentTransLogEntry."Transaction Date-Time",
          DOPaymentTransLogEntry."Document No.");
      "Authorization Required" := TRUE;
      MODIFY;
    END;

    PROCEDURE Void@51();
    VAR
      DOPaymentTransLogEntry@1001 : Record 829;
      DOPaymentTransLogMgt@1002 : Codeunit 829;
    BEGIN
      IF NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code") THEN
        ERROR(Text069,FIELDCAPTION("Payment Method Code"));
      CLEAR(DOPaymentMgt);
      DOPaymentMgt.CheckSalesDoc(Rec);
      IF DOPaymentTransLogMgt.FindValidAuthorizationEntry("Document Type","No.",DOPaymentTransLogEntry) THEN
        DOPaymentMgt.VoidSalesDoc(Rec,DOPaymentTransLogEntry)
      ELSE
        MESSAGE(Text068);
      "Authorization Required" := FALSE;
      MODIFY;
    END;

    PROCEDURE GetCreditcardNumber@44() : Text[20];
    VAR
      DOPaymentCreditCard@1001 : Record 827;
    BEGIN
      IF "Credit Card No." = '' THEN
        EXIT('');
      EXIT(DOPaymentCreditCard.GetCreditCardNumber("Credit Card No."));
    END;

    LOCAL PROCEDURE SynchronizeForReservations@42(VAR NewSalesLine@1000 : Record 37;OldSalesLine@1001 : Record 37);
    BEGIN
      NewSalesLine.CALCFIELDS("Reserved Quantity");
      IF NewSalesLine."Reserved Quantity" = 0 THEN
        EXIT;
      IF NewSalesLine."Location Code" <> OldSalesLine."Location Code" THEN
        NewSalesLine.VALIDATE("Location Code",OldSalesLine."Location Code");
      IF NewSalesLine."Bin Code" <> OldSalesLine."Bin Code" THEN
        NewSalesLine.VALIDATE("Bin Code",OldSalesLine."Bin Code");
      IF NewSalesLine.MODIFY THEN;
    END;

    PROCEDURE InventoryPickConflict@46(DocType@1002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocNo@1003 : Code[20];ShippingAdvice@1004 : 'Partial,Complete') : Boolean;
    VAR
      WarehouseActivityLine@1000 : Record 5767;
      SalesLine@1001 : Record 37;
    BEGIN
      IF ShippingAdvice <> ShippingAdvice::Complete THEN
        EXIT(FALSE);
      WarehouseActivityLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.");
      WarehouseActivityLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseActivityLine.SETRANGE("Source Subtype",DocType);
      WarehouseActivityLine.SETRANGE("Source No.",DocNo);
      IF WarehouseActivityLine.ISEMPTY THEN
        EXIT(FALSE);
      SalesLine.SETRANGE("Document Type",DocType);
      SalesLine.SETRANGE("Document No.",DocNo);
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      IF SalesLine.ISEMPTY THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE WhseShpmntConflict@52(DocType@1002 : 'Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order';DocNo@1001 : Code[20];ShippingAdvice@1000 : 'Partial,Complete') : Boolean;
    VAR
      WarehouseShipmentLine@1003 : Record 7321;
    BEGIN
      IF ShippingAdvice <> ShippingAdvice::Complete THEN
        EXIT(FALSE);
      WarehouseShipmentLine.SETCURRENTKEY("Source Type","Source Subtype","Source No.","Source Line No.");
      WarehouseShipmentLine.SETRANGE("Source Type",DATABASE::"Sales Line");
      WarehouseShipmentLine.SETRANGE("Source Subtype",DocType);
      WarehouseShipmentLine.SETRANGE("Source No.",DocNo);
      IF WarehouseShipmentLine.ISEMPTY THEN
        EXIT(FALSE);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckCrLimit@47();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader := Rec;
      IF GUIALLOWED AND
         (CurrFieldNo <> 0) AND
         ("Document Type" <= "Document Type"::Invoice) AND
         SalesHeader.FIND
      THEN BEGIN
        "Amount Including VAT" := 0;
        IF "Document Type" = "Document Type"::Order THEN
          IF BilltoCustomerNoChanged THEN BEGIN
            SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
            SalesLine.SETRANGE("Document No.","No.");
            SalesLine.CALCSUMS("Outstanding Amount","Shipped Not Invoiced");
            "Amount Including VAT" := SalesLine."Outstanding Amount" + SalesLine."Shipped Not Invoiced";
          END;
        CustCheckCreditLimit.SalesHeaderCheck(Rec);
        CALCFIELDS("Amount Including VAT");
      END;
    END;

    PROCEDURE QtyToShipIsZero@49() : Boolean;
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Qty. to Ship",'<>0');
      EXIT(SalesLine.ISEMPTY);
    END;

    PROCEDURE IsApprovedForPosting@53() : Boolean;
    VAR
      PrepaymentMgt@1001 : Codeunit 441;
    BEGIN
      IF ApprovalsMgmt.PrePostApprovalCheckSales(Rec) THEN BEGIN
        IF PrepaymentMgt.TestSalesPrepayment(Rec) THEN
          ERROR(STRSUBSTNO(Text071,"Document Type","No."));
        IF "Document Type" = "Document Type"::Order THEN
          IF PrepaymentMgt.TestSalesPayment(Rec) THEN
            ERROR(STRSUBSTNO(Text072,"Document Type","No."));
        EXIT(TRUE);
      END;
    END;

    PROCEDURE IsApprovedForPostingBatch@54() : Boolean;
    VAR
      PrepaymentMgt@1000 : Codeunit 441;
    BEGIN
      IF ApprovalsMgmt.PrePostApprovalCheckSales(Rec) THEN BEGIN
        IF PrepaymentMgt.TestSalesPrepayment(Rec) THEN
          EXIT(FALSE);
        IF PrepaymentMgt.TestSalesPayment(Rec) THEN
          EXIT(FALSE);
        EXIT(TRUE);
      END;
    END;

    PROCEDURE TaxAreaUpdate@13700();
    VAR
      TaxLocation@1280000 : Record 13761;
      BilltoCust@1280001 : Record 18;
    BEGIN
      SalesSetup.GET;
      TaxLocation.SETRANGE("Dispatch / Receiving Location","Location Code");
      IF SalesSetup."Tax Dependency Type" = SalesSetup."Tax Dependency Type"::"Bill To Customer" THEN
        IF "Bill-to Customer No." <> '' THEN BEGIN
          BilltoCust.GET("Bill-to Customer No.");
          "Bill to Customer State" := BilltoCust."State Code";
          TaxLocation.SETRANGE("Customer / Vendor Location",BilltoCust."State Code");
          TaxLocation.SETRANGE(Type,TaxLocation.Type::Customer);
          IF TaxLocation.FINDFIRST THEN
            "Tax Area Code" := TaxLocation."Tax Area Code";
        END;
      IF SalesSetup."Tax Dependency Type" = SalesSetup."Tax Dependency Type"::"Ship To Customer" THEN BEGIN
        IF "Ship-to Code" <> '' THEN BEGIN
          ShipToAddr.GET("Sell-to Customer No.","Ship-to Code");
          "Bill to Customer State" := ShipToAddr.State;
          TaxLocation.SETRANGE("Customer / Vendor Location",ShipToAddr.State);
          TaxLocation.SETRANGE(Type,TaxLocation.Type::Customer);
          IF TaxLocation.FINDFIRST THEN
            "Tax Area Code" := TaxLocation."Tax Area Code";
        END ELSE
          IF "Sell-to Customer No." <> '' THEN BEGIN
            BilltoCust.GET("Sell-to Customer No.");
            "Bill to Customer State" := BilltoCust."State Code";
            TaxLocation.SETRANGE("Customer / Vendor Location",BilltoCust."State Code");
            TaxLocation.SETRANGE(Type,TaxLocation.Type::Customer);
            IF TaxLocation.FINDFIRST THEN
              "Tax Area Code" := TaxLocation."Tax Area Code";
          END;
      END;
      IF xRec."Tax Area Code" <> "Tax Area Code" THEN
        RecreateSalesLines(FIELDCAPTION("Tax Area Code"));
    END;

    PROCEDURE TaxAreaUpdatelines@13701();
    BEGIN
      IF SalesLinesExist THEN BEGIN
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE(Type,1,5);
        IF SalesLine.FIND('-') THEN BEGIN
          MODIFY;
          REPEAT
            SalesLine."Tax Area Code" := "Tax Area Code";
            SalesLine.UpdateAmounts;
            SalesLine.MODIFY;
          UNTIL SalesLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE TaxLiableUpdate@1280001();
    BEGIN
      IF SalesLinesExist THEN BEGIN
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
        IF SalesLine.FIND('-') THEN
          REPEAT
            SalesLine.VALIDATE("Tax Liable","Tax Liable");
            MODIFY;
            SalesLine.MODIFY;
          UNTIL SalesLine.NEXT = 0;
      END;
    END;

    PROCEDURE FreeSupplyUpdate@13703();
    BEGIN
      IF SalesLinesExist THEN BEGIN
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        IF SalesLine.FIND('-') THEN
          REPEAT
            SalesLine.VALIDATE("Free Supply","Free Supply");
            SalesLine.VALIDATE("Line Discount %",100);
            MODIFY;
            SalesLine.MODIFY;
          UNTIL SalesLine.NEXT = 0;
      END;
    END;

    PROCEDURE OpenExciseCentvatClaimForm@1500012();
    VAR
      SourceCodeSetup@1500014 : Record 242;
      SalesLine@1500013 : Record 37;
      NextLineNo@1500012 : Integer;
      GenJnlLine@1500000 : Record 81;
      ServiceTaxRegNo@1500017 : Code[20];
      SalesLine2@1500018 : Record 37;
    BEGIN
      GetGLSetup;
      SourceCodeSetup.GET;
      GetLocation;
      CompanyInfo.GET;
      TESTFIELD(Trading,FALSE);
      SalesLine.RESET;
      SalesLine.SETCURRENTKEY("Document Type","Document No.","Direct Debit To PLA / RG","Excise Prod. Posting Group",Type,"No.");
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE("Direct Debit To PLA / RG",TRUE);
      IF NOT SalesLine.FIND('-') THEN
        ERROR(Text16500);
      TotalBEDAmt := 0;
      "TotalAED(GSI)Amt" := 0;
      TotalSEDAmt := 0;
      TotalSAEDAmt := 0;
      TotalCESSAmt := 0;
      TotalNCCDAmt := 0;
      TotaleCessAmt := 0;
      TotalSHECessAmt := 0;
      TotalADETAmt := 0;
      TotalADEAmt := 0;
      "TotalAED(TTA)Amt" := 0;
      TotalADCVATAmt := 0;
      REPEAT
        TotalBEDAmt += RoundExciseAmount(SalesLine."BED Amount",SalesLine."Qty. to Invoice (Base)",SalesLine."Quantity (Base)");
        "TotalAED(GSI)Amt" += RoundExciseAmount(SalesLine."AED(GSI) Amount",
            SalesLine."Qty. to Invoice (Base)",SalesLine."Quantity (Base)");
        TotalSEDAmt += RoundExciseAmount(SalesLine."SED Amount",SalesLine."Qty. to Invoice (Base)",SalesLine."Quantity (Base)");
        TotalSAEDAmt += RoundExciseAmount(SalesLine."SAED Amount",SalesLine."Qty. to Invoice (Base)",SalesLine."Quantity (Base)");
        TotalCESSAmt += RoundExciseAmount(SalesLine."CESS Amount",SalesLine."Qty. to Invoice (Base)",SalesLine."Quantity (Base)");
        TotalNCCDAmt += RoundExciseAmount(SalesLine."NCCD Amount",SalesLine."Qty. to Invoice (Base)",SalesLine."Quantity (Base)");
        TotaleCessAmt += RoundExciseAmount(SalesLine."eCess Amount",SalesLine."Qty. to Invoice (Base)",SalesLine."Quantity (Base)");
        TotalSHECessAmt += RoundExciseAmount(SalesLine."SHE Cess Amount",SalesLine."Qty. to Invoice (Base)",SalesLine."Quantity (Base)")
          ;
        TotalADETAmt += RoundExciseAmount(SalesLine."ADET Amount",SalesLine."Qty. to Invoice (Base)",SalesLine."Quantity (Base)");
        TotalADEAmt += RoundExciseAmount(SalesLine."ADE Amount",SalesLine."Qty. to Invoice (Base)",SalesLine."Quantity (Base)");
        "TotalAED(TTA)Amt" += RoundExciseAmount(SalesLine."AED(TTA) Amount",SalesLine."Qty. to Invoice (Base)",
            SalesLine."Quantity (Base)");
        TotalADCVATAmt += RoundExciseAmount(SalesLine."ADC VAT Amount",SalesLine."Qty. to Invoice (Base)",
            SalesLine."Quantity (Base)");
        IF ServiceTaxRegNo = '' THEN
          ServiceTaxRegNo := SalesLine."Service Tax Registration No.";

      UNTIL SalesLine.NEXT = 0;
      IF TotalBEDAmt + "TotalAED(GSI)Amt" + TotalSEDAmt + TotalSAEDAmt + TotalCESSAmt + TotalNCCDAmt + TotaleCessAmt + TotalADETAmt +
         TotalADEAmt + "TotalAED(TTA)Amt" + TotalADCVATAmt + TotalSHECessAmt = 0
      THEN
        ERROR(Text16501);

      SalesLine.RESET;
      SalesLine.SETCURRENTKEY("Document Type","Document No.","Direct Debit To PLA / RG","Excise Prod. Posting Group",Type,"No.");
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE("Direct Debit To PLA / RG",TRUE);
      SalesLine.SETFILTER("Service Tax Registration No.",'<>%1','');

      SalesLine2.RESET;
      SalesLine2.SETCURRENTKEY("Document Type","Document No.","Direct Debit To PLA / RG","Excise Prod. Posting Group",Type,"No.");
      SalesLine2.SETRANGE("Document Type","Document Type");
      SalesLine2.SETRANGE("Document No.","No.");
      SalesLine2.SETRANGE("Direct Debit To PLA / RG",TRUE);
      SalesLine2.SETRANGE("Service Tax Registration No.",ServiceTaxRegNo);

      IF (SalesLine.COUNT <> SalesLine2.COUNT) AND (ServiceTaxRegNo <> '') THEN
        ERROR(Text16502,"Document Type","No.");

      GenJnlLine.RESET;
      GenJnlLine.SETRANGE("Journal Template Name",'');
      GenJnlLine.SETRANGE("Journal Batch Name",'');
      IF GenJnlLine.FINDLAST THEN
        NextLineNo := 10000 + GenJnlLine."Line No."
      ELSE
        NextLineNo := 10000;

      GenJnlLine.SETRANGE("Document No.","No.");
      IF NOT GenJnlLine.FINDLAST THEN BEGIN
        GenJnlLine.INIT;
        GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
        GenJnlLine."Posting Date" := "Posting Date";
        GenJnlLine."Document Date" := "Document Date";
        GenJnlLine."Document No." := "No.";
        GenJnlLine."Source Code" := SourceCodeSetup.Sales;
        GenJnlLine."System-Created Entry" := TRUE;
        GenJnlLine."VAT Posting" := GenJnlLine."VAT Posting"::"Automatic VAT Entry";
        GenJnlLine."VAT Calculation Type" := GenJnlLine."VAT Calculation Type"::"Normal VAT";
        GenJnlLine."Allow Application" := TRUE;
        GenJnlLine."Bal. Account Type" := GenJnlLine."Bal. Account Type"::"G/L Account";
        GenJnlLine."Bal. VAT Calculation Type" := GenJnlLine."Bal. VAT Calculation Type"::"Normal VAT";
        GenJnlLine."Additional-Currency Posting" := GenJnlLine."Additional-Currency Posting"::None;
        IF "Location Code" <> '' THEN
          GenJnlLine."E.C.C. No." := Location."E.C.C. No."
        ELSE
          GenJnlLine."E.C.C. No." := CompanyInfo."E.C.C. No.";
        GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        GenJnlLine."Pay Excise" := TRUE;
        // GenJnlLine."BED Amount" := TotalBEDAmt;
        // GenJnlLine."AED(GSI) Amount" := "TotalAED(GSI)Amt";
        // GenJnlLine."SED Amount" := TotalSEDAmt;
        // GenJnlLine."SAED Amount" := TotalSAEDAmt;
        // GenJnlLine."CESS Amount" := TotalCESSAmt;
        // GenJnlLine."NCCD Amount" := TotalNCCDAmt;
        // GenJnlLine."eCess Amount" := TotaleCessAmt;
        // GenJnlLine."SHE Cess Amount" := TotalSHECessAmt;
        // GenJnlLine."ADET Amount" := TotalADETAmt;
        // GenJnlLine."ADE Amount" := TotalADEAmt;
        // GenJnlLine."AED(TTA) Amount" := "TotalAED(TTA)Amt";
        // GenJnlLine."ADC VAT Amount" := TotalADCVATAmt;
        GenJnlLine."Line No." := NextLineNo;
        GenJnlLine."Service Tax Registration No." := ServiceTaxRegNo;
        GenJnlLine.INSERT;
      END ELSE BEGIN
        IF "Location Code" <> '' THEN
          GenJnlLine."E.C.C. No." := Location."E.C.C. No."
        ELSE
          GenJnlLine."E.C.C. No." := CompanyInfo."E.C.C. No.";
        // GenJnlLine."BED Amount" := TotalBEDAmt;
        // GenJnlLine."AED(GSI) Amount" := "TotalAED(GSI)Amt";
        // GenJnlLine."SED Amount" := TotalSEDAmt;
        // GenJnlLine."SAED Amount" := TotalSAEDAmt;
        // GenJnlLine."CESS Amount" := TotalCESSAmt;
        // GenJnlLine."NCCD Amount" := TotalNCCDAmt;
        // GenJnlLine."eCess Amount" := TotaleCessAmt;
        // GenJnlLine."SHE Cess Amount" := TotalSHECessAmt;
        // GenJnlLine."ADET Amount" := TotalADETAmt;
        // GenJnlLine."ADE Amount" := TotalADEAmt;
        // GenJnlLine."AED(TTA) Amount" := "TotalAED(TTA)Amt";
        // GenJnlLine."ADC VAT Amount" := TotalADCVATAmt;
        GenJnlLine."Service Tax Registration No." := ServiceTaxRegNo;
        GenJnlLine.MODIFY;
      END;
      GenJnlLine.SETRANGE("Document No.","No.");
      InsertCenvatDetails(GenJnlLine);
      CenvatClaimForm.SetECCNo(GenJnlLine."E.C.C. No.");
      CenvatClaimForm.GETRECORD(GenJnlLine);
      COMMIT;

      ExciseCenvatClaim.RESET;
      ExciseCenvatClaim.SETRANGE("Journal Template Name",'');
      ExciseCenvatClaim.SETRANGE("Journal Batch Name",'');
      ExciseCenvatClaim.SETRANGE("Document No.","No.");
      IF ExciseCenvatClaim.FINDFIRST THEN BEGIN
        CenvatClaimForm.SETTABLEVIEW(ExciseCenvatClaim);
        CenvatClaimForm.GetDateFilter("Posting Date","Posting Date");
        CenvatClaimForm.RUN;
      END
    END;

    PROCEDURE RoundExciseAmount@1500007(ExciseDutyAmount@1500002 : Decimal;Qty@1500001 : Decimal;TotalQty@1500000 : Decimal) : Decimal;
    VAR
      ExciseRoundingDirection@1500004 : Text[1];
      ExciseRoundingPrecision@1500003 : Decimal;
    BEGIN
      IF TotalQty = 0 THEN
        EXIT;
      GetGLSetup;
      CASE GLSetup."Excise Rounding Type" OF
        GLSetup."Excise Rounding Type"::Nearest:
          ExciseRoundingDirection := '=';
        GLSetup."Excise Rounding Type"::Up:
          ExciseRoundingDirection := '>';
        GLSetup."Excise Rounding Type"::Down:
          ExciseRoundingDirection := '<';
      END;
      IF GLSetup."Excise Rounding Precision" <> 0 THEN
        ExciseRoundingPrecision := GLSetup."Excise Rounding Precision"
      ELSE
        ExciseRoundingPrecision := 0.01;
      EXIT(ROUND(ExciseDutyAmount * (Qty / TotalQty),ExciseRoundingPrecision,ExciseRoundingDirection));
    END;

    PROCEDURE GetGLSetup@1500004();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    PROCEDURE GetLocation@1500005();
    BEGIN
      IF "Location Code" <> '' THEN
        Location.GET("Location Code");
    END;

    PROCEDURE UpdateGenJnlLInePostingDate@1500006();
    VAR
      GenJnlLIne@1500000 : Record 81;
    BEGIN
      GenJnlLIne.RESET;
      GenJnlLIne.SETRANGE("Journal Template Name",'');
      GenJnlLIne.SETRANGE("Journal Batch Name",'');
      GenJnlLIne.SETRANGE("Document No.","No.");
      IF GenJnlLIne.FINDFIRST THEN BEGIN
        GenJnlLIne."Posting Date" := "Posting Date";
        GenJnlLIne.MODIFY(TRUE);
      END;
    END;

    PROCEDURE GetGateEntryLines@1500000();
    BEGIN
      PostedGateEntryLine.MODIFYALL(Mark,FALSE);
      PostedGateEntryLine.RESET;
      PostedGateEntryLine.SETCURRENTKEY("Entry Type","Source Type","Source No.",Status);
      CASE "Document Type" OF
        "Document Type"::"Return Order":
          BEGIN
            PostedGateEntryLine.SETRANGE("Entry Type",PostedGateEntryLine."Entry Type"::Inward);
            PostedGateEntryLine.SETRANGE("Source Type",PostedGateEntryLine."Source Type"::"Sales Return Order");
            PostedGateEntryLine.SETRANGE("Source No.","No.");
            PostedGateEntryLine.SETRANGE(Status,PostedGateEntryLine.Status::Open);
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            PostedGateEntryLine.SETRANGE("Entry Type",PostedGateEntryLine."Entry Type"::Inward);
            PostedGateEntryLine.SETRANGE("Source Type",PostedGateEntryLine."Source Type"::" ");
            PostedGateEntryLine.SETRANGE(Status,PostedGateEntryLine.Status::Open);
          END;
      END;
      GateEntryAttachment.SETCURRENTKEY("Source Type","Source No.","Entry Type","Gate Entry No.","Line No.");
      IF PostedGateEntryLine.FINDSET THEN
        REPEAT
          GateEntryAttachment.SETRANGE("Source No.",PostedGateEntryLine."Source No.");
          GateEntryAttachment.SETRANGE("Gate Entry No.",PostedGateEntryLine."Gate Entry No.");
          GateEntryAttachment.SETRANGE("Line No.",PostedGateEntryLine."Line No.");
          IF NOT GateEntryAttachment.FINDFIRST THEN BEGIN
            PostedGateEntryLine.Mark := TRUE;
            PostedGateEntryLine.MODIFY;
            COMMIT;
          END;
        UNTIL PostedGateEntryLine.NEXT = 0;

      PostedGateEntryLine.RESET;
      PostedGateEntryLine.SETCURRENTKEY("Entry Type","Source Type","Source No.",Status);
      PostedGateEntryLine.SETRANGE(Mark,TRUE);

      IF PostedGateEntryLine.FINDFIRST THEN BEGIN
        PostedGateEntryLineList.SETTABLEVIEW(PostedGateEntryLine);
        IF PAGE.RUNMODAL(PAGE::"Posted Gate Entry Line List",PostedGateEntryLine) = ACTION::LookupOK THEN BEGIN
          GateEntryAttachment.INIT;
          GateEntryAttachment."Source Type" := PostedGateEntryLine."Source Type";
          GateEntryAttachment."Source No." := PostedGateEntryLine."Source No.";
          GateEntryAttachment."Entry Type" := PostedGateEntryLine."Entry Type";
          GateEntryAttachment."Gate Entry No." := PostedGateEntryLine."Gate Entry No.";
          GateEntryAttachment."Line No." := PostedGateEntryLine."Line No.";
          GateEntryAttachment."Sales Credit Memo No." := "No.";
          GateEntryAttachment.INSERT;
        END;
      END;
    END;

    PROCEDURE InsertCenvatDetails@1500002(GenJnlLine@1500000 : Record 81);
    BEGIN
      ExciseCenvatClaim.RESET;
      ExciseCenvatClaim.SETRANGE("Journal Template Name",'');
      ExciseCenvatClaim.SETRANGE("Journal Batch Name",'');
      ExciseCenvatClaim.SETRANGE("Line No.",GenJnlLine."Line No.");
      IF NOT ExciseCenvatClaim.FINDFIRST THEN BEGIN
        ExciseCenvatClaim.INIT;
        ExciseCenvatClaim."Journal Template Name" := GenJnlLine."Journal Template Name";
        ExciseCenvatClaim."Journal Batch Name" := GenJnlLine."Journal Batch Name";
        ExciseCenvatClaim."Line No." := GenJnlLine."Line No.";
        ExciseCenvatClaim."Document No." := GenJnlLine."Document No.";
        ExciseCenvatClaim."BED Amount" := ABS(TotalBEDAmt);
        ExciseCenvatClaim."AED(GSI) Amount" := ABS("TotalAED(GSI)Amt");
        ExciseCenvatClaim."AED(TTA) Amount" := ABS("TotalAED(TTA)Amt");
        ExciseCenvatClaim."SED Amount" := ABS(TotalSEDAmt);
        ExciseCenvatClaim."SAED Amount" := ABS(TotalSAEDAmt);
        ExciseCenvatClaim."CESS Amount" := ABS(TotalCESSAmt);
        ExciseCenvatClaim."NCCD Amount" := ABS(TotalNCCDAmt);
        ExciseCenvatClaim."eCess Amount" := ABS(TotaleCessAmt);
        ExciseCenvatClaim."SHE Cess Amount" := ABS(TotalSHECessAmt);
        ExciseCenvatClaim."ADET Amount" := ABS(TotalADETAmt);
        ExciseCenvatClaim."ADE Amount" := ABS(TotalADEAmt);
        ExciseCenvatClaim."E.C.C. No." := GenJnlLine."E.C.C. No.";
        ExciseCenvatClaim.INSERT(TRUE);
      END ELSE BEGIN
        ExciseCenvatClaim."Journal Template Name" := GenJnlLine."Journal Template Name";
        ExciseCenvatClaim."Journal Batch Name" := GenJnlLine."Journal Batch Name";
        ExciseCenvatClaim."Line No." := GenJnlLine."Line No.";
        ExciseCenvatClaim."Document No." := GenJnlLine."Document No.";
        ExciseCenvatClaim."BED Amount" := ABS(TotalBEDAmt);
        ExciseCenvatClaim."AED(GSI) Amount" := ABS("TotalAED(GSI)Amt");
        ExciseCenvatClaim."AED(TTA) Amount" := ABS("TotalAED(TTA)Amt");
        ExciseCenvatClaim."SED Amount" := ABS(TotalSEDAmt);
        ExciseCenvatClaim."SAED Amount" := ABS(TotalSAEDAmt);
        ExciseCenvatClaim."CESS Amount" := ABS(TotalCESSAmt);
        ExciseCenvatClaim."NCCD Amount" := ABS(TotalNCCDAmt);
        ExciseCenvatClaim."eCess Amount" := ABS(TotaleCessAmt);
        ExciseCenvatClaim."SHE Cess Amount" := ABS(TotalSHECessAmt);
        ExciseCenvatClaim."ADET Amount" := ABS(TotalADETAmt);
        ExciseCenvatClaim."ADE Amount" := ABS(TotalADEAmt);
        ExciseCenvatClaim."E.C.C. No." := GenJnlLine."E.C.C. No.";
        ExciseCenvatClaim.MODIFY(TRUE);
      END;
    END;

    PROCEDURE InitTradingNoSeries@1500008();
    BEGIN
      GetLocation;
      SalesSetup.GET;
      CASE "Document Type" OF
        "Document Type"::Quote,"Document Type"::Order,"Document Type"::"Blanket Order":
          BEGIN
            IF NOT Trading THEN BEGIN
              GetPostInvoiceNoSeries;
              IF Location."Sales Shipment Nos." <> '' THEN
                NoSeriesMgt.SetDefaultSeries("Shipping No. Series",Location."Sales Shipment Nos.")
              ELSE
                NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
            END ELSE BEGIN
              IF Location."Sales Invoice Nos. (Trading)" <> '' THEN
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sales Invoice Nos. (Trading)")
              ELSE
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos. (Trading)");
              IF Location."Sales Shpt. Nos. (Trading)" <> '' THEN
                NoSeriesMgt.SetDefaultSeries("Shipping No. Series",Location."Sales Shpt. Nos. (Trading)")
              ELSE
                NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Sales Shpt. (Trading)");
            END;
          END;
        "Document Type"::Invoice:
          BEGIN
            IF NOT Trading THEN BEGIN
              GetPostInvoiceNoSeries;
              IF (Location."Sales Shipment Nos." <> '') AND SalesSetup."Shipment on Invoice" THEN
                NoSeriesMgt.SetDefaultSeries("Shipping No. Series",Location."Sales Shipment Nos.")
              ELSE
                IF (Location."Sales Shipment Nos." = '') AND SalesSetup."Shipment on Invoice" THEN
                  NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Shipment Nos.");
            END ELSE BEGIN
              IF Location."Sales Invoice Nos. (Trading)" <> '' THEN
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sales Invoice Nos. (Trading)")
              ELSE
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos. (Trading)");

              IF (Location."Sales Shpt. Nos. (Trading)" <> '') AND SalesSetup."Shipment on Invoice" THEN
                NoSeriesMgt.SetDefaultSeries("Shipping No. Series",Location."Sales Shpt. Nos. (Trading)")
              ELSE
                IF (Location."Sales Shpt. Nos. (Trading)" = '') AND SalesSetup."Shipment on Invoice" THEN
                  NoSeriesMgt.SetDefaultSeries("Shipping No. Series",SalesSetup."Posted Sales Shpt. (Trading)");
            END;
          END;
        "Document Type"::"Return Order":
          BEGIN
            IF NOT Trading THEN BEGIN
              GetPostedCrMemoNoSeries;
              IF Location."Sales Return Receipt Nos." <> '' THEN
                NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",Location."Sales Return Receipt Nos.")
              ELSE
                NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
            END ELSE BEGIN
              IF Location."Sale Cr. Memo Nos. (Trading)" <> '' THEN
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sale Cr. Memo Nos. (Trading)")
              ELSE
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Sale Cr. Memo (Trading)");
              IF Location."Sales Ret Rcpt Nos. (Trading)" <> '' THEN
                NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",Location."Sales Ret Rcpt Nos. (Trading)")
              ELSE
                NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Ret Rcpt Nos. (Trading)");
            END;
          END;
        "Document Type"::"Credit Memo":
          BEGIN
            IF NOT Trading THEN BEGIN
              GetPostedCrMemoNoSeries;
              IF (Location."Sales Return Receipt Nos." <> '') AND SalesSetup."Return Receipt on Credit Memo" THEN
                NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",Location."Sales Return Receipt Nos.")
              ELSE
                IF (Location."Sales Return Receipt Nos." = '') AND SalesSetup."Return Receipt on Credit Memo" THEN
                  NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Return Receipt Nos.");
            END ELSE BEGIN
              IF Location."Sale Cr. Memo Nos. (Trading)" <> '' THEN
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sale Cr. Memo Nos. (Trading)")
              ELSE
                NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Sale Cr. Memo (Trading)");
              IF (Location."Sales Ret Rcpt Nos. (Trading)" <> '') AND SalesSetup."Return Receipt on Credit Memo" THEN
                NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",Location."Sales Ret Rcpt Nos. (Trading)")
              ELSE
                IF (Location."Sales Ret Rcpt Nos. (Trading)" = '') AND SalesSetup."Return Receipt on Credit Memo" THEN
                  NoSeriesMgt.SetDefaultSeries("Return Receipt No. Series",SalesSetup."Posted Ret Rcpt Nos. (Trading)");
            END;
          END;
      END;
    END;

    PROCEDURE GetLegalStatement@60() : Text;
    BEGIN
      SalesSetup.GET;
      EXIT(SalesSetup.GetLegalStatement);
    END;

    PROCEDURE SendToPosting@57(PostingCodeunitID@1000 : Integer);
    BEGIN
      IF NOT IsApprovedForPosting THEN
        EXIT;
      CODEUNIT.RUN(PostingCodeunitID,Rec);
    END;

    PROCEDURE CancelBackgroundPosting@48();
    VAR
      SalesPostViaJobQueue@1000 : Codeunit 88;
    BEGIN
      SalesPostViaJobQueue.CancelQueueEntry(Rec);
    END;

    PROCEDURE LinkSalesDocWithOpportunity@79(OldOpportunityNo@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
      Opportunity@1002 : Record 5092;
    BEGIN
      IF "Opportunity No." <> OldOpportunityNo THEN BEGIN
        IF "Opportunity No." <> '' THEN
          IF Opportunity.GET("Opportunity No.") THEN BEGIN
            Opportunity.TESTFIELD(Status,Opportunity.Status::"In Progress");
            IF Opportunity."Sales Document No." <> '' THEN BEGIN
              IF CONFIRM(Text048,FALSE,Opportunity."Sales Document No.",Opportunity."No.") THEN BEGIN
                IF SalesHeader.GET("Document Type"::Quote,Opportunity."Sales Document No.") THEN BEGIN
                  SalesHeader."Opportunity No." := '';
                  SalesHeader.MODIFY;
                END;
                UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::Quote,"No.");
              END ELSE
                "Opportunity No." := OldOpportunityNo;
            END ELSE
              UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::Quote,"No.");
          END;
        IF (OldOpportunityNo <> '') AND Opportunity.GET(OldOpportunityNo) THEN
          UpdateOpportunityLink(Opportunity,Opportunity."Sales Document Type"::" ",'');
      END;
    END;

    LOCAL PROCEDURE UpdateOpportunityLink@80(Opportunity@1000 : Record 5092;SalesDocumentType@1001 : Option;SalesHeaderNo@1002 : Code[20]);
    BEGIN
      Opportunity."Sales Document Type" := SalesDocumentType;
      Opportunity."Sales Document No." := SalesHeaderNo;
      Opportunity.MODIFY;
    END;

    PROCEDURE SynchronizeAsmHeader@56();
    VAR
      AsmHeader@1003 : Record 900;
      ATOLink@1002 : Record 904;
      Window@1000 : Dialog;
    BEGIN
      ATOLink.SETCURRENTKEY(Type,"Document Type","Document No.");
      ATOLink.SETRANGE(Type,ATOLink.Type::Sale);
      ATOLink.SETRANGE("Document Type","Document Type");
      ATOLink.SETRANGE("Document No.","No.");
      IF ATOLink.FINDSET THEN
        REPEAT
          IF AsmHeader.GET(ATOLink."Assembly Document Type",ATOLink."Assembly Document No.") THEN
            IF "Posting Date" <> AsmHeader."Posting Date" THEN BEGIN
              Window.OPEN(STRSUBSTNO(SynchronizingMsg,"No.",AsmHeader."No."));
              AsmHeader.VALIDATE("Posting Date","Posting Date");
              AsmHeader.MODIFY;
              Window.CLOSE;
            END;
        UNTIL ATOLink.NEXT = 0;
    END;

    PROCEDURE CheckShippingAdvice@55();
    VAR
      SalesLine@1000 : Record 37;
      QtyToShipBaseTotal@1002 : Decimal;
      Result@1001 : Boolean;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE("Drop Shipment",FALSE);
      Result := TRUE;
      IF SalesLine.FINDSET THEN
        REPEAT
          IF SalesLine.IsShipment THEN BEGIN
            QtyToShipBaseTotal += SalesLine."Qty. to Ship (Base)";
            IF SalesLine."Quantity (Base)" <>
               SalesLine."Qty. to Ship (Base)" + SalesLine."Qty. Shipped (Base)"
            THEN
              Result := FALSE;
          END;
        UNTIL SalesLine.NEXT = 0;
      IF QtyToShipBaseTotal = 0 THEN
        Result := TRUE;
      IF NOT Result THEN
        ERROR(ShippingAdviceErr);
    END;

    LOCAL PROCEDURE GetFilterCustNo@64() : Code[20];
    BEGIN
      IF GETFILTER("Sell-to Customer No.") <> '' THEN
        IF GETRANGEMIN("Sell-to Customer No.") = GETRANGEMAX("Sell-to Customer No.") THEN
          EXIT(GETRANGEMAX("Sell-to Customer No."));
    END;

    LOCAL PROCEDURE GetFilterContNo@65() : Code[20];
    BEGIN
      IF GETFILTER("Sell-to Contact No.") <> '' THEN
        IF GETRANGEMIN("Sell-to Contact No.") = GETRANGEMAX("Sell-to Contact No.") THEN
          EXIT(GETRANGEMAX("Sell-to Contact No."));
    END;

    LOCAL PROCEDURE CheckCreditLimitIfLineNotInsertedYet@66();
    BEGIN
      IF "No." = '' THEN BEGIN
        HideCreditCheckDialogue := FALSE;
        CheckCreditMaxBeforeInsert;
        HideCreditCheckDialogue := TRUE;
        InitInsert;
      END;
    END;

    PROCEDURE InvoicedLineExists@156() : Boolean;
    VAR
      SalesLine@1000 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
      SalesLine.SETFILTER("Quantity Invoiced",'<>%1',0);
      EXIT(NOT SalesLine.ISEMPTY);
    END;

    PROCEDURE CreateDimSetForPrepmtAccDefaultDim@73();
    VAR
      SalesLine@1000 : Record 37;
      TempSalesLine@1003 : TEMPORARY Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Prepmt. Amt. Inv.",'<>%1',0);
      IF SalesLine.FINDSET THEN
        REPEAT
          CollectParamsInBufferForCreateDimSet(TempSalesLine,SalesLine);
        UNTIL SalesLine.NEXT = 0;
      TempSalesLine.RESET;
      TempSalesLine.MARKEDONLY(FALSE);
      IF TempSalesLine.FINDSET THEN
        REPEAT
          SalesLine.CreateDim(DATABASE::"G/L Account",TempSalesLine."No.",
            DATABASE::Job,TempSalesLine."Job No.",
            DATABASE::"Responsibility Center",TempSalesLine."Responsibility Center");
        UNTIL TempSalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CollectParamsInBufferForCreateDimSet@72(VAR TempSalesLine@1000 : TEMPORARY Record 37;SalesLine@1001 : Record 37);
    VAR
      GenPostingSetup@1003 : Record 252;
      DefaultDimension@1002 : Record 352;
    BEGIN
      TempSalesLine.SETRANGE("Gen. Bus. Posting Group",SalesLine."Gen. Bus. Posting Group");
      TempSalesLine.SETRANGE("Gen. Prod. Posting Group",SalesLine."Gen. Prod. Posting Group");
      IF NOT TempSalesLine.FINDFIRST THEN BEGIN
        GenPostingSetup.GET(SalesLine."Gen. Bus. Posting Group",SalesLine."Gen. Prod. Posting Group");
        GenPostingSetup.TESTFIELD("Sales Prepayments Account");
        DefaultDimension.SETRANGE("Table ID",DATABASE::"G/L Account");
        DefaultDimension.SETRANGE("No.",GenPostingSetup."Sales Prepayments Account");
        InsertTempSalesLineInBuffer(TempSalesLine,SalesLine,GenPostingSetup."Sales Prepayments Account",DefaultDimension.ISEMPTY);
      END ELSE
        IF NOT TempSalesLine.MARK THEN BEGIN
          TempSalesLine.SETRANGE("Job No.",SalesLine."Job No.");
          TempSalesLine.SETRANGE("Responsibility Center",SalesLine."Responsibility Center");
          IF TempSalesLine.ISEMPTY THEN
            InsertTempSalesLineInBuffer(TempSalesLine,SalesLine,TempSalesLine."No.",FALSE);
        END;
    END;

    LOCAL PROCEDURE InsertTempSalesLineInBuffer@71(VAR TempSalesLine@1001 : TEMPORARY Record 37;SalesLine@1000 : Record 37;AccountNo@1002 : Code[20];DefaultDimensionsNotExist@1003 : Boolean);
    BEGIN
      TempSalesLine.INIT;
      TempSalesLine."Line No." := SalesLine."Line No.";
      TempSalesLine."No." := AccountNo;
      TempSalesLine."Job No." := SalesLine."Job No.";
      TempSalesLine."Responsibility Center" := SalesLine."Responsibility Center";
      TempSalesLine."Gen. Bus. Posting Group" := SalesLine."Gen. Bus. Posting Group";
      TempSalesLine."Gen. Prod. Posting Group" := SalesLine."Gen. Prod. Posting Group";
      TempSalesLine.MARK := DefaultDimensionsNotExist;
      TempSalesLine.INSERT;
    END;

    PROCEDURE OpenSalesOrderStatistics@70();
    VAR
      StrDetails@1500000 : Record 13793;
    BEGIN
      CalcInvDiscForHeader;
      SalesSetup.GET;
      CALCFIELDS("Price Inclusive of Taxes");
      IF SalesSetup."Calc. Inv. Discount" AND (NOT "Price Inclusive of Taxes") THEN BEGIN
        CalcInvDiscForHeader;
        COMMIT
      END;
      IF "Price Inclusive of Taxes" THEN BEGIN
        SalesLine.InitStrOrdDetail(Rec);
        SalesLine.GetSalesPriceExclusiveTaxes(Rec);
        SalesLine.UpdateSalesLinesPIT(Rec);
        COMMIT;
      END;

      IF Structure <> '' THEN BEGIN
        SalesLine.CalculateStructures(Rec);
        SalesLine.AdjustStructureAmounts(Rec);
        SalesLine.UpdateSalesLines(Rec);
        SalesLine.CalculateTCS(Rec);
      END ELSE BEGIN
        SalesLine.CalculateTCS(Rec);
      END;
      CreateDimSetForPrepmtAccDefaultDim;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Sales Order Statistics",Rec);
    END;

    PROCEDURE GetCardpageID@58() : Integer;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          EXIT(PAGE::"Sales Quote");
        "Document Type"::Order:
          EXIT(PAGE::"Sales Order");
        "Document Type"::Invoice:
          EXIT(PAGE::"Sales Invoice");
        "Document Type"::"Credit Memo":
          EXIT(PAGE::"Sales Credit Memo");
        "Document Type"::"Blanket Order":
          EXIT(PAGE::"Blanket Sales Order");
        "Document Type"::"Return Order":
          EXIT(PAGE::"Sales Return Order");
      END;
    END;

    PROCEDURE CheckAvailableCreditLimit@67() : Decimal;
    VAR
      Customer@1000 : Record 18;
      AvailableCreditLimit@1002 : Decimal;
    BEGIN
      IF NOT Customer.GET("Bill-to Customer No.") THEN
        Customer.GET("Sell-to Customer No.");

      AvailableCreditLimit := Customer.CalcAvailableCredit;

      IF AvailableCreditLimit < 0 THEN
        OnCustomerCreditLimitExceeded
      ELSE
        OnCustomerCreditLimitNotExceeded;

      EXIT(AvailableCreditLimit);
    END;

    PROCEDURE SetStatus@99(NewStatus@1000 : Option);
    BEGIN
      Status := NewStatus;
      MODIFY;
    END;

    LOCAL PROCEDURE TestSalesLineFieldsBeforeRecreate@68();
    BEGIN
      SalesLine.TESTFIELD("Job No.",'');
      SalesLine.TESTFIELD("Job Contract Entry No.",0);
      SalesLine.TESTFIELD("Quantity Shipped",0);
      SalesLine.TESTFIELD("Quantity Invoiced",0);
      SalesLine.TESTFIELD("Return Qty. Received",0);
      SalesLine.TESTFIELD("Shipment No.",'');
      SalesLine.TESTFIELD("Return Receipt No.",'');
      SalesLine.TESTFIELD("Blanket Order No.",'');
      SalesLine.TESTFIELD("Prepmt. Amt. Inv.",0);
    END;

    LOCAL PROCEDURE RecreateReservEntryReqLine@75(VAR TempSalesLine@1000 : TEMPORARY Record 37;VAR TempATOLink@1003 : TEMPORARY Record 904;VAR ATOLink@1002 : Record 904);
    BEGIN
      REPEAT
        TestSalesLineFieldsBeforeRecreate;
        IF (SalesLine."Location Code" <> "Location Code") AND NOT SalesLine.IsServiceItem THEN
          SalesLine.VALIDATE("Location Code","Location Code");
        TempSalesLine := SalesLine;
        IF SalesLine.Nonstock THEN BEGIN
          SalesLine.Nonstock := FALSE;
          SalesLine.MODIFY;
        END;

        IF ATOLink.AsmExistsForSalesLine(TempSalesLine) THEN BEGIN
          TempATOLink := ATOLink;
          TempATOLink.INSERT;
          ATOLink.DELETE;
        END;

        TempSalesLine.INSERT;
        RecreateReservEntry(SalesLine,0,TRUE);
        RecreateReqLine(SalesLine,0,TRUE);
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferItemChargeAssgntSalesToTemp@69(VAR ItemChargeAssgntSales@1001 : Record 5809;VAR TempItemChargeAssgntSales@1000 : TEMPORARY Record 5809);
    BEGIN
      IF ItemChargeAssgntSales.FINDSET THEN BEGIN
        REPEAT
          TempItemChargeAssgntSales.INIT;
          TempItemChargeAssgntSales := ItemChargeAssgntSales;
          TempItemChargeAssgntSales.INSERT;
        UNTIL ItemChargeAssgntSales.NEXT = 0;
        ItemChargeAssgntSales.DELETEALL;
      END;
    END;

    LOCAL PROCEDURE CreateSalesLine@78(VAR TempSalesLine@1000 : TEMPORARY Record 37);
    BEGIN
      SalesLine.INIT;
      SalesLine."Line No." := SalesLine."Line No." + 10000;
      SalesLine.VALIDATE(Type,TempSalesLine.Type);
      IF TempSalesLine."No." = '' THEN BEGIN
        SalesLine.VALIDATE(Description,TempSalesLine.Description);
        SalesLine.VALIDATE("Description 2",TempSalesLine."Description 2");
      END ELSE BEGIN
        SalesLine.VALIDATE("No.",TempSalesLine."No.");
        IF SalesLine.Type <> SalesLine.Type::" " THEN BEGIN
          SalesLine.VALIDATE("Unit of Measure Code",TempSalesLine."Unit of Measure Code");
          SalesLine.VALIDATE("Variant Code",TempSalesLine."Variant Code");
          IF TempSalesLine.Quantity <> 0 THEN BEGIN
            SalesLine.VALIDATE(Quantity,TempSalesLine.Quantity);
            SalesLine.VALIDATE("Qty. to Assemble to Order",TempSalesLine."Qty. to Assemble to Order");
          END;
          SalesLine."Purchase Order No." := TempSalesLine."Purchase Order No.";
          SalesLine."Purch. Order Line No." := TempSalesLine."Purch. Order Line No.";
          SalesLine."Drop Shipment" := SalesLine."Purch. Order Line No." <> 0;
        END;
        SalesLine.VALIDATE("Shipment Date",TempSalesLine."Shipment Date");
      END;
      SalesLine."Invoice Type" := "Invoice Type";
      SalesLine.INSERT;
    END;

    LOCAL PROCEDURE CreateItemChargeAssgntSales@83(VAR ItemChargeAssgntSales@1001 : Record 5809;VAR TempItemChargeAssgntSales@1000 : TEMPORARY Record 5809;VAR TempSalesLine@1002 : TEMPORARY Record 37;VAR TempInteger@1003 : TEMPORARY Record 2000000026);
    BEGIN
      IF TempSalesLine.FINDSET THEN
        REPEAT
          TempItemChargeAssgntSales.SETRANGE("Document Line No.",TempSalesLine."Line No.");
          IF TempItemChargeAssgntSales.FINDSET THEN BEGIN
            REPEAT
              TempInteger.FINDFIRST;
              ItemChargeAssgntSales.INIT;
              ItemChargeAssgntSales := TempItemChargeAssgntSales;
              ItemChargeAssgntSales."Document Line No." := TempInteger.Number;
              ItemChargeAssgntSales.VALIDATE("Unit Cost",0);
              ItemChargeAssgntSales.INSERT;
            UNTIL TempItemChargeAssgntSales.NEXT = 0;
            TempInteger.DELETE;
          END;
        UNTIL TempSalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateOutboundWhseHandlingTime@84();
    BEGIN
      IF "Location Code" <> '' THEN BEGIN
        IF Location.GET("Location Code") THEN
          "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
      END ELSE
        IF InvtSetup.GET THEN
          "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckSalesPostRestrictions@115();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnCustomerCreditLimitExceeded@74();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnCustomerCreditLimitNotExceeded@76();
    BEGIN
    END;

    [Integration(TRUE)]
    PROCEDURE OnCheckSalesReleaseRestrictions@81();
    BEGIN
    END;

    PROCEDURE DeferralHeadersExist@82() : Boolean;
    VAR
      DeferralHeader@1000 : Record 1701;
      DeferralUtilities@1001 : Codeunit 1720;
    BEGIN
      DeferralHeader.SETRANGE("Deferral Doc. Type",DeferralUtilities.GetSalesDeferralDocType);
      DeferralHeader.SETRANGE("Gen. Jnl. Template Name",'');
      DeferralHeader.SETRANGE("Gen. Jnl. Batch Name",'');
      DeferralHeader.SETRANGE("Document Type","Document Type");
      DeferralHeader.SETRANGE("Document No.","No.");
      EXIT(NOT DeferralHeader.ISEMPTY);
    END;

    LOCAL PROCEDURE ConfirmUpdateDeferralDate@85();
    BEGIN
      IF HideValidationDialog THEN
        Confirmed := TRUE
      ELSE
        Confirmed := CONFIRM(DeferralLineQst,FALSE);
      IF Confirmed THEN
        UpdateSalesLines(SalesLine.FIELDCAPTION("Deferral Code"),FALSE);
    END;

    PROCEDURE BatchConfirmUpdateDeferralDate@88(VAR BatchConfirm@1000 : ' ,Skip,Update';ReplacePostingDate@1004 : Boolean;PostingDateReq@1003 : Date);
    BEGIN
      IF (NOT ReplacePostingDate) OR (PostingDateReq = "Posting Date") OR (BatchConfirm = BatchConfirm::Skip) THEN
        EXIT;

      IF NOT DeferralHeadersExist THEN
        EXIT;

      "Posting Date" := PostingDateReq;
      CASE BatchConfirm OF
        BatchConfirm::" ":
          BEGIN
            ConfirmUpdateDeferralDate;
            IF Confirmed THEN
              BatchConfirm := BatchConfirm::Update
            ELSE
              BatchConfirm := BatchConfirm::Skip;
          END;
        BatchConfirm::Update:
          UpdateSalesLines(SalesLine.FIELDCAPTION("Deferral Code"),FALSE);
      END;
      COMMIT;
    END;

    LOCAL PROCEDURE UpdateOpportunity@86();
    VAR
      Opp@1002 : Record 5092;
      OpportunityEntry@1001 : Record 5093;
    BEGIN
      IF NOT ("Opportunity No." <> '') OR NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) THEN
        EXIT;

      IF NOT Opp.GET("Opportunity No.") THEN
        EXIT;

      IF "Document Type" = "Document Type"::Order THEN BEGIN
        IF NOT CONFIRM(Text040,TRUE) THEN
          ERROR(Text044);

        OpportunityEntry.SETRANGE("Opportunity No.","Opportunity No.");
        OpportunityEntry.MODIFYALL(Active,FALSE);

        OpportunityEntry.INIT;
        OpportunityEntry.VALIDATE("Opportunity No.",Opp."No.");

        OpportunityEntry.LOCKTABLE;
        OpportunityEntry."Entry No." := GetOpportunityEntryNo;
        OpportunityEntry."Sales Cycle Code" := Opp."Sales Cycle Code";
        OpportunityEntry."Contact No." := Opp."Contact No.";
        OpportunityEntry."Contact Company No." := Opp."Contact Company No.";
        OpportunityEntry."Salesperson Code" := Opp."Salesperson Code";
        OpportunityEntry."Campaign No." := Opp."Campaign No.";
        OpportunityEntry."Action Taken" := OpportunityEntry."Action Taken"::Lost;
        OpportunityEntry.Active := TRUE;
        OpportunityEntry."Completed %" := 100;
        OpportunityEntry."Estimated Value (LCY)" := GetOpportunityEntryEstimatedValue;
        OpportunityEntry."Estimated Close Date" := Opp."Date Closed";
        OpportunityEntry.INSERT(TRUE);
      END;
      Opp.FIND;
      Opp."Sales Document Type" := Opp."Sales Document Type"::" ";
      Opp."Sales Document No." := '';
      Opp.MODIFY;
      "Opportunity No." := '';
    END;

    LOCAL PROCEDURE GetOpportunityEntryNo@87() : Integer;
    VAR
      OpportunityEntry@1000 : Record 5093;
    BEGIN
      IF OpportunityEntry.FINDLAST THEN
        EXIT(OpportunityEntry."Entry No." + 1);
      EXIT(1);
    END;

    LOCAL PROCEDURE GetOpportunityEntryEstimatedValue@90() : Decimal;
    VAR
      OpportunityEntry@1000 : Record 5093;
    BEGIN
      OpportunityEntry.SETRANGE("Opportunity No.","Opportunity No.");
      IF OpportunityEntry.FINDLAST THEN
        EXIT(OpportunityEntry."Estimated Value (LCY)");
    END;

    PROCEDURE InitFromSalesHeader@109(SourceSalesHeader@1000 : Record 36);
    BEGIN
      "Document Date" := SourceSalesHeader."Document Date";
      "Shipment Date" := SourceSalesHeader."Shipment Date";
      "Shortcut Dimension 1 Code" := SourceSalesHeader."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := SourceSalesHeader."Shortcut Dimension 2 Code";
      "Dimension Set ID" := SourceSalesHeader."Dimension Set ID";
      "Location Code" := SourceSalesHeader."Location Code";
      "Ship-to Name" := SourceSalesHeader."Ship-to Name";
      "Ship-to Name 2" := SourceSalesHeader."Ship-to Name 2";
      "Ship-to Address" := SourceSalesHeader."Ship-to Address";
      "Ship-to Address 2" := SourceSalesHeader."Ship-to Address 2";
      "Ship-to City" := SourceSalesHeader."Ship-to City";
      "Ship-to Post Code" := SourceSalesHeader."Ship-to Post Code";
      "Ship-to County" := SourceSalesHeader."Ship-to County";
      "Ship-to Country/Region Code" := SourceSalesHeader."Ship-to Country/Region Code";
      "Ship-to Contact" := SourceSalesHeader."Ship-to Contact";
    END;

    LOCAL PROCEDURE CheckShippedDocument@1500100();
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETFILTER("Qty. Shipped (Base)",'<>%1',0);
      IF SalesLine.FINDFIRST THEN
        ERROR(InvoiceTypeErr);
    END;

    LOCAL PROCEDURE GetPostInvoiceNoSeries@1500112();
    BEGIN
      IF "Invoice Type" = "Invoice Type"::Taxable THEN
        IF Location."Sales Invoice Nos." <> '' THEN
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sales Invoice Nos.")
        ELSE
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Invoice Nos.");
      IF "Invoice Type" = "Invoice Type"::"Bill of Supply" THEN
        IF Location."Sales Inv. Nos. (Exempt)" <> '' THEN
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sales Inv. Nos. (Exempt)")
        ELSE IF SalesSetup."Posted Inv. Nos. (Exempt)" <> '' THEN
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Inv. Nos. (Exempt)")
        ELSE
          VALIDATE("Posting No. Series",'');
      IF "Invoice Type" = "Invoice Type"::Export THEN
        IF Location."Sales Inv. No. (Export)" <> '' THEN
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sales Inv. No. (Export)")
        ELSE IF SalesSetup."Posted Inv. No. (Export)" <> '' THEN
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Inv. No. (Export)")
        ELSE
          VALIDATE("Posting No. Series",'');
      IF "Invoice Type" = "Invoice Type"::Supplementary THEN
        IF Location."Sales Inv. No. (Supp)" <> '' THEN
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sales Inv. No. (Supp)")
        ELSE IF SalesSetup."Posted Inv. No. (Supp)" <> '' THEN
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Inv. No. (Supp)")
        ELSE
          VALIDATE("Posting No. Series",'');
      IF "Invoice Type" = "Invoice Type"::"Debit Note" THEN
        IF Location."Sales Inv. No. (Debit Note)" <> '' THEN
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sales Inv. No. (Debit Note)")
        ELSE IF SalesSetup."Posted Inv. No. (Debit Note)" <> '' THEN
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Inv. No. (Debit Note)")
        ELSE
          VALIDATE("Posting No. Series",'');
      IF "Invoice Type" = "Invoice Type"::"Non-GST" THEN
        IF Location."Sales Inv. Nos. (Non-GST)" <> '' THEN
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sales Inv. Nos. (Non-GST)")
        ELSE IF SalesSetup."Posted Inv. No. (Non-GST)" <> '' THEN
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Inv. No. (Non-GST)")
        ELSE
          VALIDATE("Posting No. Series",'');
    END;

    LOCAL PROCEDURE GetPostedCrMemoNoSeries@1500013();
    BEGIN
      IF "Invoice Type" = "Invoice Type"::Taxable THEN
        IF Location."Sales Credit Memo Nos." <> '' THEN
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sales Credit Memo Nos.")
        ELSE
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Credit Memo Nos.");
      IF "Invoice Type" = "Invoice Type"::"Bill of Supply" THEN
        IF Location."Sales Cr. Memo Nos. (Exempt)" <> '' THEN
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sales Cr. Memo Nos. (Exempt)")
        ELSE
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Cr. Memo Nos. (Exempt)");
      IF "Invoice Type" = "Invoice Type"::Export THEN
        IF Location."Sales Cr. Memo No. (Export)" <> '' THEN
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sales Cr. Memo No. (Export)")
        ELSE
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Cr. Memo No. (Export)");
      IF "Invoice Type" = "Invoice Type"::Supplementary THEN
        IF Location."Sales Cr. Memo No. (Supp)" <> '' THEN
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sales Cr. Memo No. (Supp)")
        ELSE
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Cr. Memo No. (Supp)");
      IF "Invoice Type" = "Invoice Type"::"Non-GST" THEN
        IF Location."Sales Cr. Memo Nos. (Non-GST)" <> '' THEN
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",Location."Sales Cr. Memo Nos. (Non-GST)")
        ELSE
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",SalesSetup."Posted Cr. Memo No. (Non-GST)");
    END;

    LOCAL PROCEDURE CheckShipmentOnSalesLine@1500003();
    VAR
      SalesLine@1500000 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      IF "Document Type" IN ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote] THEN
        SalesLine.SETFILTER("Quantity Shipped",'>%1',0)
      ELSE
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          SalesLine.SETFILTER("Return Qty. Received",'>%1',0);
      IF NOT SalesLine.ISEMPTY THEN
        ERROR(StructureChangeErr);
    END;

    LOCAL PROCEDURE CheckStructureOnLine@1500001(StructureCode@1500000 : Code[10]);
    VAR
      SalesLine@1500001 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("Price Inclusive of Tax",TRUE);
      IF SalesLine.FINDSET THEN
      REPEAT
        IF StructureCode <> SalesLine."PIT Structure" THEN
          ERROR(GSTStructureErr,StructureCode,SalesLine."PIT Structure");
      UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateInvoiceTypeLine@1500153();
    VAR
      SalesLine@1500413 : Record 37;
    BEGIN
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      IF SalesLine.FINDSET THEN
        REPEAT
          SalesLine."Invoice Type" := "Invoice Type";
          SalesLine.MODIFY(TRUE);
        UNTIL SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalculateGSTStructure@1500009(VAR SalesHeader@1500000 : Record 36);
    VAR
      SalesLine@1500001 : Record 37;
    BEGIN
      SalesHeader.CALCFIELDS("Price Inclusive of Taxes");
      IF SalesHeader."Price Inclusive of Taxes" THEN BEGIN
        SalesLine.InitStrOrdDetail(SalesHeader);
        SalesLine.GetSalesPriceExclusiveTaxes(SalesHeader);
        SalesLine.UpdateSalesLinesPIT(SalesHeader);
      END;

      SalesLine.CalculateStructures(SalesHeader);
      SalesLine.AdjustStructureAmounts(SalesHeader);
      SalesLine.UpdateSalesLines(SalesHeader);
    END;

    LOCAL PROCEDURE InitSellToCustFromCustomer@1500010(VAR SalesHeader@1500001 : Record 36;Cust@1500000 : Record 18);
    BEGIN
      WITH SalesHeader DO BEGIN
        Cust.CheckBlockedCustOnDocs(Cust,"Document Type",FALSE,FALSE);
        Cust.TESTFIELD("Gen. Bus. Posting Group");
        "Sell-to Customer Template Code" := '';
        "Sell-to Customer Name" := Cust.Name;
        "Sell-to Customer Name 2" := Cust."Name 2";
        "Sell-to Address" := Cust.Address;
        "Sell-to Address 2" := Cust."Address 2";
        "Sell-to City" := Cust.City;
        "Sell-to Post Code" := Cust."Post Code";
        "Sell-to County" := Cust.County;
        "Sell-to Country/Region Code" := Cust."Country/Region Code";
        "Nature of Services" := Cust."Nature of Services";
        IF NOT SkipSellToContact THEN
          "Sell-to Contact" := Cust.Contact;
        "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
        "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
        "Tax Liable" := Cust."Tax Liable";
        "VAT Registration No." := Cust."VAT Registration No.";
        "VAT Country/Region Code" := Cust."Country/Region Code";
        "Shipping Advice" := Cust."Shipping Advice";
        IF "GST Customer Type" IN ["GST Customer Type"::"Deemed Export","GST Customer Type"::Export,
          "GST Customer Type"::"SEZ Development","GST Customer Type"::"SEZ Unit"] THEN
          State := ''
        ELSE
          State := Cust."State Code";
        CALCFIELDS("Price Inclusive of Taxes");
        IF NOT "Price Inclusive of Taxes" THEN
          "VAT Exempted" := Cust."VAT Exempted";
        Structure := Cust.Structure;
        "Excise Bus. Posting Group" := Cust."Excise Bus. Posting Group";
      END;
    END;

    LOCAL PROCEDURE InitBillToCustFromCustomer@1500011(VAR SalesHeader@1500000 : Record 36;Cust@1500001 : Record 18);
    BEGIN
      WITH SalesHeader DO BEGIN
        "Bill-to Customer Template Code" := '';
        "Bill-to Name" := Cust.Name;
        "Bill-to Name 2" := Cust."Name 2";
        "Bill-to Address" := Cust.Address;
        "Bill-to Address 2" := Cust."Address 2";
        "Bill-to City" := Cust.City;
        "Bill-to Post Code" := Cust."Post Code";
        "Bill-to County" := Cust.County;
        "Bill-to Country/Region Code" := Cust."Country/Region Code";
        IF NOT SkipBillToContact THEN
          "Bill-to Contact" := Cust.Contact;
        "Payment Terms Code" := Cust."Payment Terms Code";
        "Prepmt. Payment Terms Code" := Cust."Payment Terms Code";

        IF "Document Type" = "Document Type"::"Credit Memo" THEN BEGIN
          "Payment Method Code" := '';
          IF PaymentTerms.GET("Payment Terms Code") THEN
            IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN
              "Payment Method Code" := Cust."Payment Method Code"
        END ELSE
          "Payment Method Code" := Cust."Payment Method Code";

        GLSetup.GET;
        IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN BEGIN
          "VAT Bus. Posting Group" := Cust."VAT Bus. Posting Group";
          "VAT Country/Region Code" := Cust."Country/Region Code";
          "VAT Registration No." := Cust."VAT Registration No.";
          "Gen. Bus. Posting Group" := Cust."Gen. Bus. Posting Group";
        END;
        "Customer Posting Group" := Cust."Customer Posting Group";
        "Currency Code" := Cust."Currency Code";
        "Customer Price Group" := Cust."Customer Price Group";
        "Prices Including VAT" := Cust."Prices Including VAT";
        "Allow Line Disc." := Cust."Allow Line Disc.";
        "Invoice Disc. Code" := Cust."Invoice Disc. Code";
        "Customer Disc. Group" := Cust."Customer Disc. Group";
        "Language Code" := Cust."Language Code";
        "Salesperson Code" := Cust."Salesperson Code";
        "Combine Shipments" := Cust."Combine Shipments";
        Reserve := Cust.Reserve;
        "GST Customer Type" := Cust."GST Customer Type";
        IF "GST Customer Type" = "GST Customer Type"::Unregistered THEN
          "Nature of Supply" := "Nature of Supply"::B2C;
        IF "Document Type" = "Document Type"::Order THEN
          "Prepayment %" := Cust."Prepayment %";
      END;
    END;

    BEGIN
    END.
  }
}

