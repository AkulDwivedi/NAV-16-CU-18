OBJECT Table 79 Company Information
{
  OBJECT-PROPERTIES
  {
    Date=23-02-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00.48067,NAVIN9.00.00.48067;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Company Information;
               ENN=Company Information];
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=[ENU=Primary Key;
                                                              ENN=Primary Key] }
    { 2   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                UpdateBatchHeaderName;
                                                                UpdateTCSBatchHeaderName;
                                                              END;

                                                   CaptionML=[ENU=Name;
                                                              ENN=Name] }
    { 3   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Name 2;
                                                              ENN=Name 2] }
    { 4   ;   ;Address             ;Text50        ;OnValidate=BEGIN
                                                                UpdateBatchHeaderAddress;
                                                                UpdateTCSBatchHeaderAddress;
                                                              END;

                                                   CaptionML=[ENU=Address;
                                                              ENN=Address] }
    { 5   ;   ;Address 2           ;Text50        ;OnValidate=BEGIN
                                                                UpdateBatchHeaderAddress2;
                                                                UpdateTCSBatchHeaderAddress2;
                                                              END;

                                                   CaptionML=[ENU=Address 2;
                                                              ENN=Address 2] }
    { 6   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=City;
                                                              ENN=City] }
    { 7   ;   ;Phone No.           ;Text30        ;OnValidate=BEGIN
                                                                UpdateBatchHeaderPhoneNo;
                                                                UpdateTCSBatchHeaderPhoneNo;
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              ENN=Phone No.] }
    { 8   ;   ;Phone No. 2         ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No. 2;
                                                              ENN=Phone No. 2] }
    { 9   ;   ;Telex No.           ;Text30        ;CaptionML=[ENU=Telex No.;
                                                              ENN=Telex No.] }
    { 10  ;   ;Fax No.             ;Text30        ;CaptionML=[ENU=Fax No.;
                                                              ENN=Fax No.] }
    { 11  ;   ;Giro No.            ;Text20        ;CaptionML=[ENU=Giro No.;
                                                              ENN=Giro No.] }
    { 12  ;   ;Bank Name           ;Text50        ;CaptionML=[ENU=Bank Name;
                                                              ENN=Bank Name] }
    { 13  ;   ;Bank Branch No.     ;Text20        ;CaptionML=[ENU=Bank Branch No.;
                                                              ENN=Bank Branch No.] }
    { 14  ;   ;Bank Account No.    ;Text30        ;CaptionML=[ENU=Bank Account No.;
                                                              ENN=Bank Account No.] }
    { 15  ;   ;Payment Routing No. ;Text20        ;CaptionML=[ENU=Payment Routing No.;
                                                              ENN=Payment Routing No.] }
    { 17  ;   ;Customs Permit No.  ;Text10        ;CaptionML=[ENU=Customs Permit No.;
                                                              ENN=Customs Permit No.] }
    { 18  ;   ;Customs Permit Date ;Date          ;CaptionML=[ENU=Customs Permit Date;
                                                              ENN=Customs Permit Date] }
    { 19  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.","Country/Region Code",'',DATABASE::"Company Information");
                                                              END;

                                                   CaptionML=[ENU=VAT Registration No.;
                                                              ENN=VAT Registration No.] }
    { 20  ;   ;Registration No.    ;Text20        ;CaptionML=[ENU=Registration No.;
                                                              ENN=Registration No.] }
    { 21  ;   ;Telex Answer Back   ;Text20        ;CaptionML=[ENU=Telex Answer Back;
                                                              ENN=Telex Answer Back] }
    { 22  ;   ;Ship-to Name        ;Text50        ;CaptionML=[ENU=Ship-to Name;
                                                              ENN=Ship-to Name] }
    { 23  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=[ENU=Ship-to Name 2;
                                                              ENN=Ship-to Name 2] }
    { 24  ;   ;Ship-to Address     ;Text50        ;CaptionML=[ENU=Ship-to Address;
                                                              ENN=Ship-to Address] }
    { 25  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=[ENU=Ship-to Address 2;
                                                              ENN=Ship-to Address 2] }
    { 26  ;   ;Ship-to City        ;Text30        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to City;
                                                              ENN=Ship-to City] }
    { 27  ;   ;Ship-to Contact     ;Text50        ;CaptionML=[ENU=Ship-to Contact;
                                                              ENN=Ship-to Contact] }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=[ENU=Location Code;
                                                              ENN=Location Code] }
    { 29  ;   ;Picture             ;BLOB          ;CaptionML=[ENU=Picture;
                                                              ENN=Picture];
                                                   SubType=Bitmap }
    { 30  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".Code
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".Code WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                UpdateBatchHeaderPostCode;
                                                                UpdateTCSBatchHeaderPostCode;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              ENN=Post Code] }
    { 31  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              ENN=County] }
    { 32  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".Code
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".Code WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Ship-to Post Code;
                                                              ENN=Ship-to Post Code] }
    { 33  ;   ;Ship-to County      ;Text30        ;CaptionML=[ENU=Ship-to County;
                                                              ENN=Ship-to County] }
    { 34  ;   ;E-Mail              ;Text80        ;OnValidate=BEGIN
                                                                UpdateBatchHeaderEMail;
                                                                UpdateTCSBatchHeaderEMail;
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=E-Mail;
                                                              ENN=E-Mail] }
    { 35  ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Home Page;
                                                              ENN=Home Page] }
    { 36  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              ENN=Country/Region Code] }
    { 37  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Ship-to Country/Region Code;
                                                              ENN=Ship-to Country/Region Code] }
    { 38  ;   ;IBAN                ;Code50        ;OnValidate=BEGIN
                                                                CheckIBAN(IBAN);
                                                              END;

                                                   CaptionML=[ENU=IBAN;
                                                              ENN=IBAN] }
    { 39  ;   ;SWIFT Code          ;Code20        ;CaptionML=[ENU=SWIFT Code;
                                                              ENN=SWIFT Code] }
    { 40  ;   ;Industrial Classification;Text30   ;CaptionML=[ENU=Industrial Classification;
                                                              ENN=Industrial Classification] }
    { 41  ;   ;IC Partner Code     ;Code20        ;AccessByPermission=TableData 410=R;
                                                   CaptionML=[ENU=IC Partner Code;
                                                              ENN=IC Partner Code] }
    { 42  ;   ;IC Inbox Type       ;Option        ;OnValidate=BEGIN
                                                                IF "IC Inbox Type" = "IC Inbox Type"::Database THEN
                                                                  "IC Inbox Details" := '';
                                                              END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=[ENU=IC Inbox Type;
                                                              ENN=IC Inbox Type];
                                                   OptionCaptionML=[ENU=File Location,Database;
                                                                    ENN=File Location,Database];
                                                   OptionString=File Location,Database }
    { 43  ;   ;IC Inbox Details    ;Text250       ;OnLookup=VAR
                                                              FileMgt@1000 : Codeunit 419;
                                                              FileName@1002 : Text;
                                                              FileName2@1003 : Text;
                                                              Path@1004 : Text;
                                                            BEGIN
                                                              TESTFIELD("IC Partner Code");
                                                              CASE "IC Inbox Type" OF
                                                                "IC Inbox Type"::"File Location":
                                                                  BEGIN
                                                                    IF "IC Inbox Details" = '' THEN
                                                                      FileName := STRSUBSTNO('%1.xml',"IC Partner Code")
                                                                    ELSE
                                                                      FileName := "IC Inbox Details" + STRSUBSTNO('\%1.xml',"IC Partner Code");

                                                                    FileName2 := FileMgt.SaveFileDialog(Text001,FileName,'');
                                                                    IF FileName <> FileName2 THEN BEGIN
                                                                      Path := FileMgt.GetDirectoryName(FileName2);
                                                                      IF Path <> '' THEN
                                                                        "IC Inbox Details" := COPYSTR(Path,1,250);
                                                                    END;
                                                                  END;
                                                              END;
                                                            END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=[ENU=IC Inbox Details;
                                                              ENN=IC Inbox Details] }
    { 46  ;   ;System Indicator    ;Option        ;CaptionML=[ENU=System Indicator;
                                                              ENN=System Indicator];
                                                   OptionCaptionML=[ENU=None,Custom Text,Company Information,Company,Database,Company+Database;
                                                                    ENN=None,Custom Text,Company Information,Company,Database,Company+Database];
                                                   OptionString=None,Custom Text,Company Information,Company,Database,Company+Database }
    { 47  ;   ;Custom System Indicator Text;Text250;
                                                   CaptionML=[ENU=Custom System Indicator Text;
                                                              ENN=Custom System Indicator Text] }
    { 48  ;   ;System Indicator Style;Option      ;CaptionML=[ENU=System Indicator Style;
                                                              ENN=System Indicator Style];
                                                   OptionCaptionML=[ENU=Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9;
                                                                    ENN=Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9];
                                                   OptionString=Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9 }
    { 50  ;   ;Allow Blank Payment Info.;Boolean  ;CaptionML=[ENU=Allow Blank Payment Info.;
                                                              ENN=Allow Blank Payment Info.] }
    { 90  ;   ;GLN                 ;Code13        ;OnValidate=VAR
                                                                GLNCalculator@1000 : Codeunit 1607;
                                                              BEGIN
                                                                IF GLN <> '' THEN
                                                                  IF NOT GLNCalculator.IsValidCheckDigit13(GLN) THEN
                                                                    ERROR(GLNCheckDigitErr,FIELDCAPTION(GLN));
                                                              END;

                                                   CaptionML=[ENU=GLN;
                                                              ENN=GLN];
                                                   Numeric=Yes }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center".Code;
                                                   ValidateTableRelation=Yes;
                                                   CaptionML=[ENU=Responsibility Center;
                                                              ENN=Responsibility Center] }
    { 5791;   ;Check-Avail. Period Calc.;DateFormula;
                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Check-Avail. Period Calc.;
                                                              ENN=Check-Avail. Period Calc.] }
    { 5792;   ;Check-Avail. Time Bucket;Option    ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Check-Avail. Time Bucket;
                                                              ENN=Check-Avail. Time Bucket];
                                                   OptionCaptionML=[ENU=Day,Week,Month,Quarter,Year;
                                                                    ENN=Day,Week,Month,Quarter,Year];
                                                   OptionString=Day,Week,Month,Quarter,Year }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=[ENU=Base Calendar Code;
                                                              ENN=Base Calendar Code] }
    { 7601;   ;Cal. Convergence Time Frame;DateFormula;
                                                   InitValue=1Y;
                                                   AccessByPermission=TableData 7600=R;
                                                   CaptionML=[ENU=Cal. Convergence Time Frame;
                                                              ENN=Cal. Convergence Time Frame] }
    { 13701;  ;T.I.N. No.          ;Code11        ;TableRelation="T.I.N. Nos.";
                                                   CaptionML=[ENU=T.I.N. No.;
                                                              ENN=T.I.N. No.] }
    { 13704;  ;L.S.T. No.          ;Code20        ;CaptionML=[ENU=L.S.T. No.;
                                                              ENN=L.S.T. No.] }
    { 13705;  ;C.S.T No.           ;Code20        ;CaptionML=[ENU=C.S.T No.;
                                                              ENN=C.S.T No.] }
    { 13706;  ;P.A.N. No.          ;Code20        ;OnValidate=BEGIN
                                                                UpdateBatchHeaderPANNo;
                                                                UpdateTCSBatchHeaderPANNo;
                                                              END;

                                                   CaptionML=[ENU=P.A.N. No.;
                                                              ENN=P.A.N. No.] }
    { 13708;  ;E.C.C. No.          ;Code20        ;TableRelation="E.C.C. Nos.";
                                                   CaptionML=[ENU=E.C.C. No.;
                                                              ENN=E.C.C. No.] }
    { 13709;  ;T.A.N. No.          ;Code10        ;TableRelation="T.A.N. Nos.";
                                                   OnValidate=BEGIN
                                                                UpdateBatchHeaderTANNo;
                                                              END;

                                                   CaptionML=[ENU=T.A.N. No.;
                                                              ENN=T.A.N. No.] }
    { 13711;  ;C.E. Registration No.;Code20       ;CaptionML=[ENU=C.E. Registration No.;
                                                              ENN=C.E. Registration No.] }
    { 13712;  ;C.E. Range          ;Code20        ;CaptionML=[ENU=C.E. Range;
                                                              ENN=C.E. Range] }
    { 13713;  ;C.E. Commissionerate;Code20        ;CaptionML=[ENU=C.E. Commissionerate;
                                                              ENN=C.E. Commissionerate] }
    { 13714;  ;State               ;Code10        ;TableRelation=State.Code;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("GST Registration No.",'');
                                                                UpdateBatchHeaderState;
                                                                UpdateTCSBatchHeaderState;
                                                              END;

                                                   CaptionML=[ENU=State;
                                                              ENN=State] }
    { 13715;  ;Manufacturers Code  ;Code20        ;CaptionML=[ENU=Manufacturers Code;
                                                              ENN=Manufacturers Code] }
    { 13719;  ;Factories Act. Regd. No.;Code20    ;CaptionML=[ENU=Factories Act. Regd. No.;
                                                              ENN=Factories Act. Regd. No.] }
    { 13722;  ;C.E. Division       ;Code20        ;CaptionML=[ENU=C.E. Division;
                                                              ENN=C.E. Division] }
    { 13725;  ;Company Status      ;Option        ;CaptionML=[ENU=Company Status;
                                                              ENN=Company Status];
                                                   OptionCaptionML=[ENU=Public Limited Co.,Private Limited Co.,Others,Government,Individual/Proprietary,Registered Trust,Partnership,Society/Co-op Society;
                                                                    ENN=Public Limited Co.,Private Limited Co.,Others,Government,Individual/Proprietary,Registered Trust,Partnership,Society/Co-op Society];
                                                   OptionString=Public Limited Co.,Private Limited Co.,Others,Government,Individual/Proprietary,Registered Trust,Partnership,Society/Co-op Society }
    { 13737;  ;Company Registration  No.;Code20   ;CaptionML=[ENU=Company Registration  No.;
                                                              ENN=Company Registration  No.] }
    { 13745;  ;Circle No.          ;Text30        ;CaptionML=[ENU=Circle No.;
                                                              ENN=Circle No.] }
    { 13746;  ;Ward No.            ;Text30        ;CaptionML=[ENU=Ward No.;
                                                              ENN=Ward No.] }
    { 13747;  ;Assessing Officer   ;Text30        ;CaptionML=[ENU=Assessing Officer;
                                                              ENN=Assessing Officer] }
    { 13749;  ;Cash Account No.    ;Code20        ;TableRelation="G/L Account";
                                                   CaptionML=[ENU=Cash Account No.;
                                                              ENN=Cash Account No.] }
    { 16465;  ;Service Tax Registration No.;Code20;TableRelation="Service Tax Registration Nos.".Code;
                                                   CaptionML=[ENU=Service Tax Registration No.;
                                                              ENN=Service Tax Registration No.] }
    { 16500;  ;T.C.A.N. No.        ;Code10        ;TableRelation="T.C.A.N. No.";
                                                   OnValidate=BEGIN
                                                                UpdateTCSBatchHeaderTCAN;
                                                              END;

                                                   CaptionML=[ENU=T.C.A.N. No.;
                                                              ENN=T.C.A.N. No.] }
    { 16501;  ;Composition         ;Boolean       ;CaptionML=[ENU=Composition;
                                                              ENN=Composition] }
    { 16502;  ;Export or Deemed Export;Boolean    ;CaptionML=[ENU=Export or Deemed Export;
                                                              ENN=Export or Deemed Export] }
    { 16503;  ;Composition Type    ;Option        ;CaptionML=[ENU=Composition Type;
                                                              ENN=Composition Type];
                                                   OptionCaptionML=[ENU=" ,Retailer,Works Contract,Bakery,Restaurant / Club,Second Hand Motor Vehicle";
                                                                    ENN=" ,Retailer,Works Contract,Bakery,Restaurant / Club,Second Hand Motor Vehicle"];
                                                   OptionString=[ ,Retailer,Works Contract,Bakery,Restaurant / Club,Second Hand Motor Vehicle] }
    { 16504;  ;Trading Co.         ;Boolean       ;CaptionML=[ENU=Trading Co.;
                                                              ENN=Trading Co.] }
    { 16505;  ;Large Tax Payer     ;Boolean       ;CaptionML=[ENU=Large Tax Payer;
                                                              ENN=Large Tax Payer] }
    { 16506;  ;Large Tax Payer City;Text30        ;TableRelation="Post Code".City;
                                                   CaptionML=[ENU=Large Tax Payer City;
                                                              ENN=Large Tax Payer City] }
    { 16507;  ;Input Service Distributor;Boolean  ;CaptionML=[ENU=Input Service Distributor;
                                                              ENN=Input Service Distributor] }
    { 16508;  ;ST Payment Period   ;Option        ;CaptionML=[ENU=ST Payment Period;
                                                              ENN=ST Payment Period];
                                                   OptionCaptionML=[ENU=Monthly,Quarterly;
                                                                    ENN=Monthly,Quarterly];
                                                   OptionString=Monthly,Quarterly }
    { 16509;  ;Central STC Applicable;Boolean     ;CaptionML=[ENU=Central STC Applicable;
                                                              ENN=Central STC Applicable] }
    { 16510;  ;ST Payment Due Day  ;Integer       ;CaptionML=[ENU=ST Payment Due Day;
                                                              ENN=ST Payment Due Day];
                                                   MinValue=0;
                                                   MaxValue=31 }
    { 16511;  ;P.A.N. Status       ;Option        ;InitValue=Not available;
                                                   OnValidate=BEGIN
                                                                IF "P.A.N. Status" = "P.A.N. Status"::"Not available" THEN
                                                                  "P.A.N. No." := Text16502
                                                                ELSE
                                                                  "P.A.N. No." := '';
                                                              END;

                                                   CaptionML=[ENU=P.A.N. Status;
                                                              ENN=P.A.N. Status];
                                                   OptionCaptionML=[ENU=Available,Not available;
                                                                    ENN=Available,Not available];
                                                   OptionString=Available,Not available }
    { 16512;  ;PAO Code            ;Code20        ;CaptionML=[ENU=PAO Code;
                                                              ENN=PAO Code] }
    { 16513;  ;PAO Registration No.;Code7         ;CaptionML=[ENU=PAO Registration No.;
                                                              ENN=PAO Registration No.] }
    { 16514;  ;DDO Code            ;Code20        ;CaptionML=[ENU=DDO Code;
                                                              ENN=DDO Code] }
    { 16515;  ;DDO Registration No.;Code10        ;CaptionML=[ENU=DDO Registration No.;
                                                              ENN=DDO Registration No.] }
    { 16516;  ;Ministry Code       ;Code3         ;TableRelation=IF (Ministry Type=CONST(Others)) Ministry WHERE (Other Ministry=FILTER(Yes))
                                                                 ELSE IF (Ministry Type=CONST(Regular)) Ministry WHERE (Other Ministry=CONST(No));
                                                   CaptionML=[ENU=Ministry Code;
                                                              ENN=Ministry Code] }
    { 16517;  ;Deductor Category   ;Code1         ;TableRelation="Deductor Category";
                                                   OnValidate=BEGIN
                                                                DeductorCategory.GET("Deductor Category");
                                                                IF NOT DeductorCategory."DDO Code Mandatory" THEN BEGIN
                                                                  "DDO Code" := '';
                                                                  "DDO Registration No." := '';
                                                                END;
                                                                IF NOT DeductorCategory."PAO Code Mandatory" THEN BEGIN
                                                                  "PAO Code" := '';
                                                                  "PAO Registration No." := '';
                                                                END;
                                                                IF NOT DeductorCategory."Ministry Details Mandatory" THEN BEGIN
                                                                  "Ministry Type" := "Ministry Type"::" ";
                                                                  "Ministry Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Deductor Category;
                                                              ENN=Deductor Category] }
    { 16518;  ;Ministry Type       ;Option        ;CaptionML=[ENU=Ministry Type;
                                                              ENN=Ministry Type];
                                                   OptionCaptionML=[ENU=" ,Regular,Others";
                                                                    ENN=" ,Regular,Others"];
                                                   OptionString=[ ,Regular,Others] }
    { 16519;  ;STD Code            ;Code5         ;CaptionML=[ENU=STD Code;
                                                              ENN=STD Code] }
    { 16520;  ;TAN Registration No.;Code12        ;OnValidate=BEGIN
                                                                IF (STRLEN("TAN Registration No.") < MAXSTRLEN("TAN Registration No.")) AND ("TAN Registration No." <> '') THEN
                                                                  ERROR(Text16503,FIELDCAPTION("TAN Registration No."),MAXSTRLEN("TAN Registration No."));
                                                              END;

                                                   CaptionML=[ENU=TAN Registration No.;
                                                              ENN=TAN Registration No.] }
    { 16600;  ;GST Registration No.;Code15        ;TableRelation="GST Registration Nos." WHERE (State Code=FIELD(State));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(State);
                                                              END;

                                                   CaptionML=[ENU=GST Registration No.;
                                                              ENN=GST Registration No.] }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PostCode@1000 : Record 225;
      Text000@1001 : TextConst 'ENU=The number that you entered may not be a valid International Bank Account Number (IBAN). Do you want to continue?;ENN=The number that you entered may not be a valid International Bank Account Number (IBAN). Do you want to continue?';
      Text001@1002 : TextConst 'ENU=File Location for IC files;ENN=File Location for IC files';
      Text002@1003 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.;ENN=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      BatchHeader@1500002 : Record 16503;
      TCSBatchHeader@1500000 : Record 16515;
      Text16502@16500 : TextConst 'ENU=PANNOTREQD;ENN=PANNOTREQD';
      DeductorCategory@16501 : Record 16498;
      NoPaymentInfoQst@1005 : TextConst '@@@="%1 = Company Information";ENU=No payment information is provided in %1. Do you want to update it now?;ENN=No payment information is provided in %1. Do you want to update it now?';
      NoPaymentInfoMsg@1004 : TextConst 'ENU=No payment information is provided in %1. Review the report.;ENN=No payment information is provided in %1. Review the report.';
      Text16503@1500009 : TextConst 'ENU=%1 should not be less then %2 characters.;ENN=%1 should not be less then %2 characters.';
      GLNCheckDigitErr@1006 : TextConst 'ENU=The %1 is not valid.;ENN=The %1 is not valid.';

    PROCEDURE CheckIBAN@1(IBANCode@1000 : Code[100]);
    VAR
      Modulus97@1001 : Integer;
      I@1002 : Integer;
    BEGIN
      IF IBANCode = '' THEN
        EXIT;
      IBANCode := DELCHR(IBANCode);
      Modulus97 := 97;
      IF (STRLEN(IBANCode) <= 5) OR (STRLEN(IBANCode) > 34) THEN
        IBANError;
      ConvertIBAN(IBANCode);
      WHILE STRLEN(IBANCode) > 6 DO
        IBANCode := CalcModulus(COPYSTR(IBANCode,1,6),Modulus97) + COPYSTR(IBANCode,7);
      EVALUATE(I,IBANCode);
      IF (I MOD Modulus97) <> 1 THEN
        IBANError;
    END;

    LOCAL PROCEDURE ConvertIBAN@4(VAR IBANCode@1000 : Code[100]);
    VAR
      I@1002 : Integer;
    BEGIN
      IBANCode := COPYSTR(IBANCode,5) + COPYSTR(IBANCode,1,4);
      I := 0;
      WHILE I < STRLEN(IBANCode) DO BEGIN
        I := I + 1;
        IF ConvertLetter(IBANCode,COPYSTR(IBANCode,I,1),I) THEN
          I := 0;
      END;
    END;

    LOCAL PROCEDURE CalcModulus@3(Number@1000 : Code[10];Modulus97@1001 : Integer) : Code[10];
    VAR
      I@1002 : Integer;
    BEGIN
      EVALUATE(I,Number);
      I := I MOD Modulus97;
      IF I = 0 THEN
        EXIT('');
      EXIT(FORMAT(I));
    END;

    LOCAL PROCEDURE ConvertLetter@5(VAR IBANCode@1000 : Code[100];Letter@1001 : Code[1];LetterPlace@1002 : Integer) : Boolean;
    VAR
      Letter2@1003 : Code[2];
    BEGIN
      IF (Letter >= 'A') AND (Letter <= 'Z') THEN BEGIN
        CASE Letter OF
          'A':
            Letter2 := '10';
          'B':
            Letter2 := '11';
          'C':
            Letter2 := '12';
          'D':
            Letter2 := '13';
          'E':
            Letter2 := '14';
          'F':
            Letter2 := '15';
          'G':
            Letter2 := '16';
          'H':
            Letter2 := '17';
          'I':
            Letter2 := '18';
          'J':
            Letter2 := '19';
          'K':
            Letter2 := '20';
          'L':
            Letter2 := '21';
          'M':
            Letter2 := '22';
          'N':
            Letter2 := '23';
          'O':
            Letter2 := '24';
          'P':
            Letter2 := '25';
          'Q':
            Letter2 := '26';
          'R':
            Letter2 := '27';
          'S':
            Letter2 := '28';
          'T':
            Letter2 := '29';
          'U':
            Letter2 := '30';
          'V':
            Letter2 := '31';
          'W':
            Letter2 := '32';
          'X':
            Letter2 := '33';
          'Y':
            Letter2 := '34';
          'Z':
            Letter2 := '35';
        END;
        IF LetterPlace = 1 THEN
          IBANCode := Letter2 + COPYSTR(IBANCode,2)
        ELSE BEGIN
          IF LetterPlace = STRLEN(IBANCode) THEN
            IBANCode := COPYSTR(IBANCode,1,LetterPlace - 1) + Letter2
          ELSE
            IBANCode :=
              COPYSTR(IBANCode,1,LetterPlace - 1) + Letter2 + COPYSTR(IBANCode,LetterPlace + 1);
        END;
        EXIT(TRUE);
      END;
      IF (Letter >= '0') AND (Letter <= '9') THEN
        EXIT(FALSE);

      IBANError;
    END;

    LOCAL PROCEDURE IBANError@12();
    BEGIN
      IF NOT CONFIRM(Text000) THEN
        ERROR('');
    END;

    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::"Company Information",GETPOSITION)
      ELSE
        MESSAGE(Text002);
    END;

    LOCAL PROCEDURE IsPaymentInfoAvailble@10() : Boolean;
    BEGIN
      EXIT(
        (("Giro No." + IBAN + "Bank Name" + "Bank Branch No." + "Bank Account No." + "SWIFT Code") <> '') OR
        "Allow Blank Payment Info.");
    END;

    PROCEDURE GetRegistrationNumber@14() : Text;
    BEGIN
      EXIT("Registration No.");
    END;

    PROCEDURE GetRegistrationNumberLbl@15() : Text;
    BEGIN
      EXIT(FIELDCAPTION("Registration No."));
    END;

    PROCEDURE GetVATRegistrationNumber@13() : Text;
    BEGIN
      EXIT("VAT Registration No.");
    END;

    PROCEDURE GetVATRegistrationNumberLbl@11() : Text;
    BEGIN
      EXIT(FIELDCAPTION("VAT Registration No."));
    END;

    PROCEDURE GetLegalOffice@16() : Text;
    BEGIN
      EXIT('');
    END;

    PROCEDURE GetLegalOfficeLbl@17() : Text;
    BEGIN
      EXIT('');
    END;

    PROCEDURE GetCustomGiro@20() : Text;
    BEGIN
      EXIT('');
    END;

    PROCEDURE GetCustomGiroLbl@19() : Text;
    BEGIN
      EXIT('');
    END;

    PROCEDURE VerifyAndSetPaymentInfo@6();
    VAR
      CompanyInformationPage@1000 : Page 1;
    BEGIN
      GET;
      IF IsPaymentInfoAvailble THEN
        EXIT;
      IF CONFIRM(NoPaymentInfoQst,TRUE,TABLECAPTION) THEN BEGIN
        CompanyInformationPage.SETRECORD(Rec);
        CompanyInformationPage.EDITABLE(TRUE);
        IF CompanyInformationPage.RUNMODAL = ACTION::OK THEN
          CompanyInformationPage.GETRECORD(Rec);
      END;
      IF NOT IsPaymentInfoAvailble THEN
        MESSAGE(NoPaymentInfoMsg,TABLECAPTION);
    END;

    PROCEDURE GetSystemIndicator@8(VAR Text@1000 : Text[250];VAR Style@1001 : 'Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9');
    BEGIN
      Style := "System Indicator Style";
      CASE "System Indicator" OF
        "System Indicator"::None:
          Text := '';
        "System Indicator"::"Custom Text":
          Text := "Custom System Indicator Text";
        "System Indicator"::"Company Information":
          Text := Name;
        "System Indicator"::Company:
          Text := COMPANYNAME;
        "System Indicator"::Database:
          Text := GetDatabaseIndicatorText(FALSE);
        "System Indicator"::"Company+Database":
          Text := GetDatabaseIndicatorText(TRUE);
      END
    END;

    LOCAL PROCEDURE GetDatabaseIndicatorText@9(IncludeCompany@1003 : Boolean) : Text[250];
    VAR
      ActiveSession@1000 : Record 2000000110;
      Text@1002 : Text[1024];
    BEGIN
      ActiveSession.SETRANGE("Server Instance ID",SERVICEINSTANCEID);
      ActiveSession.SETRANGE("Session ID",SESSIONID);
      ActiveSession.FINDFIRST;
      Text := ActiveSession."Database Name" + ' - ' + ActiveSession."Server Computer Name";
      IF IncludeCompany THEN
        Text := COMPANYNAME + ' - ' + Text;
      IF STRLEN(Text) > 250 THEN
        EXIT(COPYSTR(Text,1,247) + '...');
      EXIT(Text)
    END;

    LOCAL PROCEDURE UpdateBatchHeaderAddress@1500001();
    VAR
      DeductorAdd1@1000 : Text[25];
      DeductorAdd2@1001 : Text[25];
    BEGIN
      IF Address <> xRec.Address THEN BEGIN
        BatchHeader.RESET;
        IF NOT BatchHeader.FINDFIRST THEN
          EXIT;
        BatchHeader.SETRANGE(Filed,FALSE);
        BatchHeader.SETRANGE(Revised,FALSE);
        IF BatchHeader.FINDFIRST THEN BEGIN
          // IF CONFIRM(Text16501,FALSE,FIELDCAPTION(Address)) THEN BEGIN
          DeductorAdd1 := COPYSTR(Address,1,25);
          DeductorAdd2 := COPYSTR(Address,26);
          BatchHeader.MODIFYALL("Deductor Address",DeductorAdd1);
          BatchHeader.MODIFYALL("Deductor Address 2",DeductorAdd2);
          BatchHeader.MODIFYALL("Responsible Person Address",DeductorAdd1);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateBatchHeaderAddress2@1500016();
    VAR
      DeductorAdd1@1000 : Text[25];
      DeductorAdd2@1001 : Text[25];
    BEGIN
      IF "Address 2" <> xRec."Address 2" THEN BEGIN
        BatchHeader.RESET;
        IF NOT BatchHeader.FINDFIRST THEN
          EXIT;
        BatchHeader.SETRANGE(Filed,FALSE);
        BatchHeader.SETRANGE(Revised,FALSE);
        IF BatchHeader.FINDFIRST THEN BEGIN
          // IF CONFIRM(Text16501,FALSE,FIELDCAPTION("Address 2")) THEN BEGIN
          DeductorAdd1 := COPYSTR("Address 2",1,25);
          DeductorAdd2 := COPYSTR("Address 2",26);
          BatchHeader.MODIFYALL("Deductor Address 3",DeductorAdd1);
          BatchHeader.MODIFYALL("Deductor Address 4",DeductorAdd2);
          BatchHeader.MODIFYALL("Responsible Person Address 2",DeductorAdd2);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateBatchHeaderPhoneNo@1500023();
    BEGIN
      IF "Phone No." <> xRec."Phone No." THEN BEGIN
        BatchHeader.RESET;
        IF NOT BatchHeader.FINDFIRST THEN
          EXIT;
        BatchHeader.SETRANGE(Filed,FALSE);
        BatchHeader.SETRANGE(Revised,FALSE);
        IF BatchHeader.FINDFIRST THEN BEGIN
          // IF CONFIRM(Text16501,FALSE,FIELDCAPTION("Phone No.")) THEN BEGIN
          BatchHeader.MODIFYALL("Deductor Phone No.","Phone No.");
          BatchHeader.MODIFYALL("Responsible Person Phone No.","Phone No.");
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateBatchHeaderPostCode@1500026();
    BEGIN
      IF "Post Code" <> xRec."Post Code" THEN BEGIN
        BatchHeader.RESET;
        IF NOT BatchHeader.FINDFIRST THEN
          EXIT;
        BatchHeader.SETRANGE(Filed,FALSE);
        BatchHeader.SETRANGE(Revised,FALSE);
        IF BatchHeader.FINDFIRST THEN BEGIN
          // IF CONFIRM(Text16501,FALSE,FIELDCAPTION("Post Code")) THEN BEGIN
          BatchHeader.MODIFYALL("Deductor Post Code","Post Code");
          BatchHeader.MODIFYALL("Responsible Person Post Code","Post Code");
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateBatchHeaderEMail@1500004();
    BEGIN
      IF "E-Mail" <> xRec."E-Mail" THEN BEGIN
        BatchHeader.RESET;
        IF NOT BatchHeader.FINDFIRST THEN
          EXIT;
        BatchHeader.SETRANGE(Filed,FALSE);
        BatchHeader.SETRANGE(Revised,FALSE);
        IF BatchHeader.FINDFIRST THEN BEGIN
          // IF CONFIRM(Text16501,FALSE,FIELDCAPTION("E-Mail")) THEN BEGIN
          BatchHeader.MODIFYALL("Deductor E-Mail","E-Mail");
          BatchHeader.MODIFYALL("Responsible Person E-Mail","E-Mail");
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateBatchHeaderPANNo@1500009();
    BEGIN
      IF "P.A.N. No." <> xRec."P.A.N. No." THEN BEGIN
        BatchHeader.RESET;
        IF NOT BatchHeader.FINDFIRST THEN
          EXIT;
        BatchHeader.SETRANGE(Filed,FALSE);
        BatchHeader.SETRANGE(Revised,FALSE);
        IF BatchHeader.FINDFIRST THEN BEGIN
          // IF CONFIRM(Text16501,FALSE,FIELDCAPTION("P.A.N. No.")) THEN BEGIN
          BatchHeader.MODIFYALL("Deductor P.A.N. No.","P.A.N. No.");
          BatchHeader.MODIFYALL("Responsible Person Phone No.","Phone No.");
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateBatchHeaderTANNo@1500013();
    BEGIN
      IF "T.A.N. No." <> xRec."T.A.N. No." THEN BEGIN
        BatchHeader.RESET;
        IF NOT BatchHeader.FINDFIRST THEN
          EXIT;
        BatchHeader.SETRANGE(Filed,FALSE);
        BatchHeader.SETRANGE(Revised,FALSE);
        IF BatchHeader.FINDFIRST THEN
          // IF CONFIRM(Text16501,FALSE,FIELDCAPTION("T.A.N. No.")) THEN
          BatchHeader.MODIFYALL("Deductor T.A.N. No.","T.A.N. No.");
      END;
    END;

    LOCAL PROCEDURE UpdateBatchHeaderState@1500018();
    VAR
      CompState@1500000 : Record 13762;
    BEGIN
      IF State <> xRec.State THEN BEGIN
        CompState.GET(State);
        BatchHeader.RESET;
        IF NOT BatchHeader.FINDFIRST THEN
          EXIT;
        BatchHeader.SETRANGE(Filed,FALSE);
        BatchHeader.SETRANGE(Revised,FALSE);
        IF BatchHeader.FINDFIRST THEN
          // IF CONFIRM(Text16501,FALSE,FIELDCAPTION(State)) THEN
          BatchHeader.MODIFYALL("Deductor State",CompState."State Code for eTDS/TCS");
      END;
    END;

    LOCAL PROCEDURE UpdateTCSBatchHeaderAddress@1500010();
    VAR
      CollectorAdd1@1000 : Text[25];
      CollectorAdd2@1001 : Text[25];
    BEGIN
      IF Address <> xRec.Address THEN BEGIN
        TCSBatchHeader.RESET;
        IF NOT TCSBatchHeader.FINDFIRST THEN
          EXIT;
        TCSBatchHeader.SETRANGE(Filed,FALSE);
        TCSBatchHeader.SETRANGE(Revised,FALSE);
        IF TCSBatchHeader.FINDFIRST THEN BEGIN
          // IF CONFIRM(Text16501,FALSE,FIELDCAPTION(Address)) THEN BEGIN
          CollectorAdd1 := COPYSTR(Address,1,25);
          CollectorAdd2 := COPYSTR(Address,26);
          TCSBatchHeader.MODIFYALL("Collector Address",CollectorAdd1);
          TCSBatchHeader.MODIFYALL("Collector Address 2",CollectorAdd2);
          TCSBatchHeader.MODIFYALL("Responsible Person Address",CollectorAdd1);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateTCSBatchHeaderAddress2@1500008();
    VAR
      CollectorAdd1@1000 : Text[25];
      CollectorAdd2@1001 : Text[25];
    BEGIN
      IF "Address 2" <> xRec."Address 2" THEN BEGIN
        TCSBatchHeader.RESET;
        IF NOT TCSBatchHeader.FINDFIRST THEN
          EXIT;
        TCSBatchHeader.SETRANGE(Filed,FALSE);
        TCSBatchHeader.SETRANGE(Revised,FALSE);
        IF TCSBatchHeader.FINDFIRST THEN BEGIN
          // IF CONFIRM(Text16501,FALSE,FIELDCAPTION("Address 2")) THEN BEGIN
          CollectorAdd1 := COPYSTR("Address 2",1,25);
          CollectorAdd2 := COPYSTR("Address 2",26);
          TCSBatchHeader.MODIFYALL("Collector Address 3",CollectorAdd1);
          TCSBatchHeader.MODIFYALL("Collector Address 4",CollectorAdd2);
          TCSBatchHeader.MODIFYALL("Responsible Person Address 2",CollectorAdd2);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateTCSBatchHeaderPhoneNo@1500007();
    BEGIN
      IF "Phone No." <> xRec."Phone No." THEN BEGIN
        TCSBatchHeader.RESET;
        IF NOT TCSBatchHeader.FINDFIRST THEN
          EXIT;
        TCSBatchHeader.SETRANGE(Filed,FALSE);
        TCSBatchHeader.SETRANGE(Revised,FALSE);
        IF TCSBatchHeader.FINDFIRST THEN BEGIN
          TCSBatchHeader.MODIFYALL("Collector Phone No.","Phone No.");
          TCSBatchHeader.MODIFYALL("Responsible Person Phone No.","Phone No.");
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateTCSBatchHeaderPostCode@1500006();
    BEGIN
      IF "Post Code" <> xRec."Post Code" THEN BEGIN
        TCSBatchHeader.RESET;
        IF NOT TCSBatchHeader.FINDFIRST THEN
          EXIT;
        TCSBatchHeader.SETRANGE(Filed,FALSE);
        TCSBatchHeader.SETRANGE(Revised,FALSE);
        IF TCSBatchHeader.FINDFIRST THEN BEGIN
          TCSBatchHeader.MODIFYALL("Collector Post Code","Post Code");
          TCSBatchHeader.MODIFYALL("Responsible Person Post Code","Post Code");
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateTCSBatchHeaderEMail@1500005();
    BEGIN
      IF "E-Mail" <> xRec."E-Mail" THEN BEGIN
        TCSBatchHeader.RESET;
        IF NOT TCSBatchHeader.FINDFIRST THEN
          EXIT;
        TCSBatchHeader.SETRANGE(Filed,FALSE);
        TCSBatchHeader.SETRANGE(Revised,FALSE);
        IF TCSBatchHeader.FINDFIRST THEN BEGIN
          TCSBatchHeader.MODIFYALL("Collector E-Mail","E-Mail");
          TCSBatchHeader.MODIFYALL("Responsible Person E-Mail","E-Mail");
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateTCSBatchHeaderPANNo@1500003();
    BEGIN
      IF "P.A.N. No." <> xRec."P.A.N. No." THEN BEGIN
        TCSBatchHeader.RESET;
        IF NOT TCSBatchHeader.FINDFIRST THEN
          EXIT;
        TCSBatchHeader.SETRANGE(Filed,FALSE);
        TCSBatchHeader.SETRANGE(Revised,FALSE);
        IF TCSBatchHeader.FINDFIRST THEN
          TCSBatchHeader.MODIFYALL("Collector P.A.N. No.","P.A.N. No.");
      END;
    END;

    LOCAL PROCEDURE UpdateTCSBatchHeaderTCAN@1500002();
    BEGIN
      IF "T.C.A.N. No." <> xRec."T.C.A.N. No." THEN BEGIN
        TCSBatchHeader.RESET;
        IF NOT TCSBatchHeader.FINDFIRST THEN
          EXIT;
        TCSBatchHeader.SETRANGE(Filed,FALSE);
        TCSBatchHeader.SETRANGE(Revised,FALSE);
        IF TCSBatchHeader.FINDFIRST THEN
          TCSBatchHeader.MODIFYALL("Collector T.C.A.N. No.","T.C.A.N. No.");
      END;
    END;

    LOCAL PROCEDURE UpdateTCSBatchHeaderState@1500000();
    VAR
      RecState@1500000 : Record 13762;
    BEGIN
      IF State <> xRec.State THEN BEGIN
        RecState.GET(State);
        TCSBatchHeader.RESET;
        IF NOT TCSBatchHeader.FINDFIRST THEN
          EXIT;
        TCSBatchHeader.SETRANGE(Filed,FALSE);
        TCSBatchHeader.SETRANGE(Revised,FALSE);
        IF TCSBatchHeader.FINDFIRST THEN
          TCSBatchHeader.MODIFYALL("Collector State",RecState."State Code for eTDS/TCS");
      END;
    END;

    LOCAL PROCEDURE UpdateBatchHeaderName@1500012();
    BEGIN
      IF Name <> xRec.Name THEN BEGIN
        BatchHeader.RESET;
        IF NOT BatchHeader.FINDFIRST THEN
          EXIT;
        BatchHeader.SETRANGE(Filed,FALSE);
        BatchHeader.SETRANGE(Revised,FALSE);
        IF BatchHeader.FINDFIRST THEN
          BatchHeader.MODIFYALL("Deductor Name",Name);
      END;
    END;

    LOCAL PROCEDURE UpdateTCSBatchHeaderName@1500011();
    BEGIN
      IF Name <> xRec.Name THEN BEGIN
        TCSBatchHeader.RESET;
        IF NOT TCSBatchHeader.FINDFIRST THEN
          EXIT;
        TCSBatchHeader.SETRANGE(Filed,FALSE);
        TCSBatchHeader.SETRANGE(Revised,FALSE);
        IF TCSBatchHeader.FINDFIRST THEN
          TCSBatchHeader.MODIFYALL("Collector Name",Name);
      END;
    END;

    PROCEDURE GetCountryRegionCode@2(CountryRegionCode@1000 : Code[10]) : Code[10];
    BEGIN
      CASE CountryRegionCode OF
        '',"Country/Region Code":
          EXIT("Country/Region Code");
        ELSE
          EXIT(CountryRegionCode);
      END;
    END;

    BEGIN
    END.
  }
}

