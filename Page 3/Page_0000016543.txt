OBJECT Page 16543 VAT Settlement Subform
{
  OBJECT-PROPERTIES
  {
    Date=24-04-16;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.45778;
  }
  PROPERTIES
  {
    CaptionML=[ENU=VAT Settlement Subform;
               ENN=VAT Settlement Subform];
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table2000000026;
    SourceTableView=SORTING(Number)
                    WHERE(Number=FILTER(1..23));
    PageType=ListPart;
    OnInit=BEGIN
             AdjustEditable := TRUE;
           END;

    OnOpenPage=BEGIN
                 PrepareGrid;
               END;

    OnAfterGetRecord=BEGIN
                       AmountHideValue := FALSE;
                       SetoffAmountHideValue := FALSE;
                       DescriptionIndent := 0;
                       SetRowValues(Number);
                       AfterGetCurrentRecord;
                       DescriptionOnFormat;
                       SetoffAmountOnFormat;
                       AmountOnFormat;
                     END;

    OnNewRecord=BEGIN
                  AfterGetCurrentRecord;
                END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1500000;1;Group     ;
                Name=Grid;
                IndentationColumnName=DescriptionIndent;
                IndentationControls=Description;
                GroupType=Repeater }

    { 1500001;2;Field     ;
                SourceExpr=Number;
                Editable=FALSE }

    { 1500003;2;Field     ;
                Name=Description;
                CaptionML=[ENU=Description;
                           ENN=Description];
                SourceExpr=Description;
                Editable=FALSE }

    { 1500005;2;Field     ;
                Name=Adjust;
                CaptionML=[ENU=Adjust;
                           ENN=Adjust];
                SourceExpr=SetoffAmount;
                Editable=AdjustEditable;
                HideValue=SetoffAmountHideValue;
                OnValidate=BEGIN
                             ValidateSetoffAmount(Number);
                             SetoffAmountOnAfterValidate;
                           END;
                            }

    { 1500011;2;Field     ;
                Name=Amount;
                CaptionML=[ENU=Amount;
                           ENN=Amount];
                SourceExpr=Amount;
                Editable=FALSE;
                HideValue=AmountHideValue;
                OnDrillDown=BEGIN
                              DrillDownAmount(Number);
                            END;
                             }

  }
  CODE
  {
    VAR
      VATSettlement@1500008 : Record 16523;
      TextGrid@1500000 : ARRAY [23,8] OF Text[100];
      Description@1500001 : Text[100];
      SetoffAmount@1500003 : Decimal;
      AdjustBlankZero@1500002 : Boolean;
      Amount@1500004 : Decimal;
      RowEditable@1500005 : Boolean;
      RecBold@1500006 : Boolean;
      Indent@1500007 : Integer;
      AmountZero@1500011 : Boolean;
      Text001@1500012 : TextConst 'ENU=Total Output VAT.;ENN=Total Output VAT.';
      Text002@1500009 : TextConst 'ENU=VAT Adjustment Amount.;ENN=VAT Adjustment Amount.';
      Text003@1500010 : TextConst 'ENU=Input VAT Credit (Normal Sales).;ENN=Input VAT Credit (Normal Sales).';
      Text004@1500013 : TextConst 'ENU=VAT Receivable. (Capital Goods);ENN=VAT Receivable. (Capital Goods)';
      Text005@1500014 : TextConst 'ENU=Balance.;ENN=Balance.';
      Text006@1500015 : TextConst 'ENU=Carry forward from the previous period.;ENN=Carry forward from the previous period.';
      Text007@1500016 : TextConst 'ENU=Refund.;ENN=Refund.';
      Text008@1500017 : TextConst 'ENU=Setoff against current VAT.;ENN=Setoff against current VAT.';
      Text009@1500018 : TextConst 'ENU=Carry forward.;ENN=Carry forward.';
      Text010@1500019 : TextConst 'ENU=VAT Payable.;ENN=VAT Payable.';
      Text011@1500020 : TextConst 'ENU=Excess VAT for adjustment (Applicable if VAT Payable is Negative).;ENN=Excess VAT for adjustment (Applicable if VAT Payable is Negative).';
      Text012@1500021 : TextConst 'ENU=Setoff against CST Payable;ENN=Setoff against CST Payable';
      Text013@1500022 : TextConst 'ENU=CST Payable.;ENN=CST Payable.';
      Text014@1500023 : TextConst 'ENU=Input VAT Credit (Exports Sales).;ENN=Input VAT Credit (Exports Sales).';
      Text015@1500024 : TextConst 'ENU=Setoff against VAT payable.;ENN=Setoff against VAT payable.';
      Text016@1500025 : TextConst 'ENU=Setoff against CST payable.;ENN=Setoff against CST payable.';
      Text017@1500026 : TextConst 'ENU=Net VAT Payable.;ENN=Net VAT Payable.';
      Text018@1500027 : TextConst 'ENU=Net CST Payable.;ENN=Net CST Payable.';
      Text019@1500028 : TextConst 'ENU=Refund Amount should not be greater than %1.;ENN=Refund Amount should not be greater than %1.';
      Text020@1500029 : TextConst 'ENU=Setoff Amount should not be greater than %1.;ENN=Setoff Amount should not be greater than %1.';
      Text021@1500030 : TextConst 'ENU=The minimum permitted value is 0.;ENN=The minimum permitted value is 0.';
      Text022@1500031 : TextConst 'ENU=Setoff against current CST.;ENN=Setoff against current CST.';
      DescriptionEmphasize@19010547 : Boolean INDATASET;
      DescriptionIndent@19057867 : Integer INDATASET;
      SetoffAmountHideValue@19034618 : Boolean INDATASET;
      AmountHideValue@19020670 : Boolean INDATASET;
      AmountEmphasize@19073101 : Boolean INDATASET;
      AdjustEditable@19049529 : Boolean INDATASET;

    LOCAL PROCEDURE PrepareGrid@1500001();
    BEGIN
      // 1 - Description
      // 2 - Setoff Amount
      // 3 - Amount
      // 4 - Record Editable
      // 5 - Bold
      // 6 - Indent
      // 7 - BlankZero - Adjust Column
      // 8 - BlankZero - Amount Column

      CLEAR(TextGrid);

      TextGrid[1][1] := Text001;
      TextGrid[2][1] := Text002;
      TextGrid[3][1] := Text003;
      TextGrid[4][1] := Text004;
      TextGrid[5][1] := Text005;
      TextGrid[5][5] := '1';
      TextGrid[6][1] := Text006;
      TextGrid[7][1] := Text007;
      TextGrid[7][6] := '1';
      TextGrid[8][1] := Text008;
      TextGrid[8][6] := '1';
      TextGrid[9][1] := Text022;
      TextGrid[9][6] := '1';
      TextGrid[10][1] := Text009;
      TextGrid[10][6] := '1';
      TextGrid[11][1] := Text010;
      TextGrid[11][5] := '1';
      TextGrid[12][1] := Text011;
      TextGrid[13][1] := Text007;
      TextGrid[13][6] := '1';
      TextGrid[14][1] := Text012;
      TextGrid[14][6] := '1';
      TextGrid[15][1] := Text009;
      TextGrid[15][6] := '1';
      TextGrid[16][1] := Text013;
      TextGrid[16][5] := '1';
      TextGrid[17][1] := Text014;
      TextGrid[18][1] := Text007;
      TextGrid[18][6] := '1';
      TextGrid[19][1] := Text015;
      TextGrid[19][6] := '1';
      TextGrid[20][1] := Text016;
      TextGrid[20][6] := '1';
      TextGrid[21][1] := Text009;
      TextGrid[21][6] := '1';
      TextGrid[22][1] := Text017;
      TextGrid[22][5] := '1';
      TextGrid[23][1] := Text018;
      TextGrid[23][5] := '1';

      TextGrid[1][7] := '1';
      TextGrid[2][7] := '1';
      TextGrid[3][7] := '1';
      TextGrid[4][7] := '1';
      TextGrid[5][7] := '1';
      TextGrid[11][7] := '1';
      TextGrid[12][7] := '1';
      TextGrid[16][7] := '1';
      TextGrid[22][7] := '1';
      TextGrid[23][7] := '1';
      TextGrid[17][7] := '1';

      TextGrid[7][8] := '1';
      TextGrid[8][8] := '1';
      TextGrid[9][8] := '1';
      TextGrid[10][8] := '1';
      TextGrid[12][8] := '1';
      TextGrid[13][8] := '1';
      TextGrid[14][8] := '1';
      TextGrid[15][8] := '1';
      TextGrid[18][8] := '1';
      TextGrid[19][8] := '1';
      TextGrid[20][8] := '1';
      TextGrid[21][8] := '1';
    END;

    LOCAL PROCEDURE SetRowValues@1500009(RowID@1500000 : Integer);
    BEGIN
      Description := TextGrid[RowID][1];

      IF TextGrid[RowID][2] = '' THEN
        TextGrid[RowID][2] := '0';
      EVALUATE(SetoffAmount,TextGrid[RowID][2]);

      IF TextGrid[RowID][3] = '' THEN
        TextGrid[RowID][3] := '0';
      EVALUATE(Amount,TextGrid[RowID][3]);

      IF TextGrid[RowID][4] = '' THEN
        TextGrid[RowID][4] := '0';
      EVALUATE(RowEditable,TextGrid[RowID][4]);

      IF TextGrid[RowID][5] = '' THEN
        TextGrid[RowID][5] := '0';
      EVALUATE(RecBold,TextGrid[RowID][5]);

      IF TextGrid[RowID][6] = '' THEN
        TextGrid[RowID][6] := '0';
      EVALUATE(Indent,TextGrid[RowID][6]);

      IF TextGrid[RowID][7] = '' THEN
        TextGrid[RowID][7] := '0';
      EVALUATE(AdjustBlankZero,TextGrid[RowID][7]);

      IF TextGrid[RowID][8] = '' THEN
        TextGrid[RowID][8] := '0';
      EVALUATE(AmountZero,TextGrid[RowID][8]);

      AdjustEditable := RowEditable;
    END;

    PROCEDURE SetParameters@1500007(VAR NewVATSettlement@1500000 : Record 16523;ReCalculate@1500001 : Boolean);
    BEGIN
      IF ReCalculate THEN
        ReCalculateVATSettlement(NewVATSettlement);
      PopulateGridValues(NewVATSettlement);
      VATSettlement := NewVATSettlement;
      CurrPage.EDITABLE := (NewVATSettlement.Type = NewVATSettlement.Type::Original) AND (NOT NewVATSettlement.Settlement);
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE ReCalculateVATSettlement@1500012(VAR VATSettlement@1500000 : Record 16523);
    BEGIN
      IF NOT VATSettlement.Settlement THEN BEGIN
        VATSettlement.CalcOutputVAT;
        VATSettlement.CalcVATAdjustment;
        VATSettlement.CalcInputTaxCreditDomestic;
        VATSettlement.CalcVATReceivable;
        VATSettlement.CalcCSTPayable;
        VATSettlement.CalcVATReceivableCFAmount;
        VATSettlement.CalcInputTaxCreditExports;
      END;
    END;

    LOCAL PROCEDURE PopulateGridValues@1500013(VAR VATSettlement@1500000 : Record 16523);
    BEGIN
      WITH VATSettlement DO BEGIN
        TextGrid[1][3] := FORMAT("Output VAT Amount",0,2);
        TextGrid[2][3] := FORMAT("VAT Adjustment Amount",0,2);
        TextGrid[3][3] := FORMAT("Input VAT Credit (Domestic)",0,2);
        TextGrid[4][3] := FORMAT("VAT Receivable Amount",0,2);
        TextGrid[5][3] := FORMAT("Balance Amount",0,2);
        TextGrid[6][2] := FORMAT("VAT Prev. Period Amount",0,2);
        TextGrid[6][3] := FORMAT("VAT Prev. Period Setoff Amount",0,2);
        TextGrid[7][2] := FORMAT("VAT Prev. Period Refund Amount",0,2);
        TextGrid[8][2] := FORMAT("VAT Prev. Period Setoff Amount",0,2);
        TextGrid[9][2] := FORMAT("CST Prev. Period Setoff Amount",0,2);
        TextGrid[10][2] := FORMAT("VAT Prev. Period C/F Amount",0,2);

        TextGrid[11][3] := FORMAT("VAT Payable Amount",0,2);
        IF "VAT Payable Amount" < 0 THEN
          TextGrid[12][2] := FORMAT(-"VAT Payable Amount",0,2)
        ELSE
          TextGrid[12][2] := FORMAT(0,0,2);

        TextGrid[13][2] := FORMAT("VAT Payable Refund Amount",0,2);
        TextGrid[14][2] := FORMAT("VAT Payable Setoff Amount",0,2);
        TextGrid[15][2] := FORMAT("VAT Payable C/F Amount",0,2);
        TextGrid[16][3] := FORMAT("CST Payable Amount",0,2);
        TextGrid[17][3] := FORMAT("Input VAT Credit (Exports)" + "VAT Input Cr. Exp. B/F Amount",0,2);
        TextGrid[18][2] := FORMAT("VAT Input Cr. Exp. Refund",0,2);
        TextGrid[19][2] := FORMAT("VAT ITC Exp. Payable Setoff",0,2);
        TextGrid[20][2] := FORMAT("CST ITC Exp. Payable Setoff",0,2);
        TextGrid[21][2] := FORMAT("VAT Input Cr. Exp. C/F Amount",0,2);
        TextGrid[22][3] := FORMAT("Net VAT Payable Amount",0,2);
        TextGrid[23][3] := FORMAT("Net CST Payable Amount",0,2);

        TextGrid[7][4] := FORMAT(TRUE,0,2);
        TextGrid[8][4] := FORMAT(TRUE,0,2);
        TextGrid[9][4] := FORMAT(TRUE,0,2);
        TextGrid[13][4] := FORMAT(TRUE,0,2);
        TextGrid[14][4] := FORMAT(TRUE,0,2);
        TextGrid[18][4] := FORMAT(TRUE,0,2);
        TextGrid[19][4] := FORMAT(TRUE,0,2);
        TextGrid[20][4] := FORMAT(TRUE,0,2);
      END;
    END;

    LOCAL PROCEDURE DrillDownAmount@1500000(RowID@1500000 : Integer);
    BEGIN
      CASE RowID OF
        1:
          VATSettlement.DrilldownOutputVAT;
        2:
          VATSettlement.DrilldownVATAdjustment;
        3:
          VATSettlement.DrilldownInputTaxCreditDmst;
        4:
          VATSettlement.DrilldownVATReceivable;
        6:
          VATSettlement.DrillDownVATReceivableCF;
        16:
          VATSettlement.DrilldownCSTPayable;
        17:
          VATSettlement.DrilldownInputTaxCreditExports;
        7:
          VATSettlement.DrilldownVATReceivableRefund;
        13:
          VATSettlement.DrilldownVATPayableRefund;
      END;
    END;

    PROCEDURE ValidateSetoffAmount@1500002(RowID@1500000 : Integer);
    VAR
      TmpAmount@1500001 : Decimal;
      CSTSetOffAmt@1500002 : Decimal;
      VATSetOffAmt@1500003 : Decimal;
    BEGIN
      IF SetoffAmount < 0 THEN
        ERROR(Text021);
      WITH VATSettlement DO BEGIN
        CASE RowID OF
          7: // VAT Receivable Refund Amount
            BEGIN
              IF ("CST Prev. Period Setoff Amount" + "VAT Prev. Period Setoff Amount" +
                  SetoffAmount) > "VAT Prev. Period Amount"
              THEN
                ERROR(Text019,"VAT Prev. Period Amount" - "VAT Prev. Period Refund Amount" -
                  "VAT Prev. Period Setoff Amount" - "CST Prev. Period Setoff Amount");
              VALIDATE("VAT Prev. Period Refund Amount",SetoffAmount);
              MODIFY;
            END;
          8: // VAT Receivable Setoff Amount
            BEGIN
              IF ("VAT Prev. Period Refund Amount" + "CST Prev. Period Setoff Amount" +
                  SetoffAmount) > "VAT Prev. Period Amount"
              THEN
                ERROR(Text020,"VAT Prev. Period Amount" - "VAT Prev. Period Refund Amount" -
                  "VAT Prev. Period Setoff Amount" - "CST Prev. Period Setoff Amount");
              VATSetOffAmt := "VAT Prev. Period Setoff Amount";
              VALIDATE("VAT Prev. Period Setoff Amount",0);
              IF SetoffAmount > "Balance Amount" - "VAT Receivable Amount" THEN
                IF "Balance Amount" - "VAT Receivable Amount" >= 0 THEN BEGIN
                  VALIDATE("VAT Prev. Period Setoff Amount",VATSetOffAmt);
                  ERROR(Text020,"Balance Amount" - "VAT Receivable Amount")
                END ELSE
                  ERROR(Text020,0);
              IF SetoffAmount > "Net VAT Payable Amount" THEN
                ERROR(Text020,"Net VAT Payable Amount");
              VALIDATE("VAT Prev. Period Setoff Amount",SetoffAmount);
              MODIFY;
            END;
          9: // CST Receivable Setoff Amount
            BEGIN
              IF ("VAT Prev. Period Refund Amount" + "VAT Prev. Period Setoff Amount" +
                  SetoffAmount) > "VAT Prev. Period Amount"
              THEN
                ERROR(Text020,"VAT Prev. Period Amount" - "VAT Prev. Period Refund Amount" -
                  "VAT Prev. Period Setoff Amount" - "CST Prev. Period Setoff Amount");
              CSTSetOffAmt := "CST Prev. Period Setoff Amount";
              VALIDATE("CST Prev. Period Setoff Amount",0);
              IF SetoffAmount > "Net CST Payable Amount" THEN
                IF "Net CST Payable Amount" >= 0 THEN BEGIN
                  VALIDATE("CST Prev. Period Setoff Amount",CSTSetOffAmt);
                  ERROR(Text020,"CST Payable Amount" - "CST ITC Exp. Payable Setoff" - "VAT Payable Setoff Amount");
                END ELSE BEGIN
                  VALIDATE("CST Prev. Period Setoff Amount",CSTSetOffAmt);
                  ERROR(Text020,0);
                END;

              VALIDATE("CST Prev. Period Setoff Amount",SetoffAmount);
              MODIFY;
            END;
          13: // VAT Payable Refund Amount
            BEGIN
              IF -"VAT Payable Amount" > 0 THEN BEGIN
                VALIDATE("VAT Payable Refund Amount",0);
                IF SetoffAmount > "VAT Payable C/F Amount" THEN
                  ERROR(Text019,"VAT Payable C/F Amount");
              END ELSE BEGIN
                IF SetoffAmount > -"VAT Payable Amount" THEN
                  ERROR(Text019,0);
              END;

              VALIDATE("VAT Payable Refund Amount",SetoffAmount);
              MODIFY;
            END;
          14: // VAT Payable Setoff Amount
            BEGIN
              IF (-"VAT Payable Amount" - "VAT Payable Refund Amount") > 0 THEN BEGIN
                IF SetoffAmount > (-"VAT Payable Amount" - "VAT Payable Refund Amount") THEN
                  ERROR(Text020,-"VAT Payable Amount" - "VAT Payable Refund Amount");
              END ELSE BEGIN
                IF SetoffAmount > (-"VAT Payable Amount" - "VAT Payable Refund Amount") THEN
                  ERROR(Text020,0);
              END;

              VALIDATE("VAT Payable Setoff Amount",0);
              IF SetoffAmount > "Net CST Payable Amount" THEN
                ERROR(Text020,"Net CST Payable Amount");

              IF "CST Payable Amount" > 0 THEN BEGIN
                IF SetoffAmount > "CST Payable Amount" THEN
                  ERROR(Text020,"CST Payable Amount");
              END ELSE BEGIN
                IF SetoffAmount > "CST Payable Amount" THEN
                  ERROR(Text020,0);
              END;

              VALIDATE("VAT Payable Setoff Amount",SetoffAmount);
              MODIFY;
            END;
          18: // Input VAT (Export Sales) Refund
            BEGIN
              TmpAmount := "Input VAT Credit (Exports)" + "VAT Input Cr. Exp. B/F Amount"
                - "VAT ITC Exp. Payable Setoff"
                - "CST ITC Exp. Payable Setoff";
              IF SetoffAmount > TmpAmount THEN
                ERROR(Text019,TmpAmount);

              VALIDATE("VAT Input Cr. Exp. Refund",SetoffAmount);
              MODIFY;
            END;
          19: // Input VAT (Export Sales) Setoff VAT Payable
            BEGIN
              TmpAmount := "Input VAT Credit (Exports)" + "VAT Input Cr. Exp. B/F Amount"
                - "VAT Input Cr. Exp. Refund"
                - "CST ITC Exp. Payable Setoff";

              IF SetoffAmount > TmpAmount THEN
                ERROR(Text020,TmpAmount);

              IF ("VAT Payable Amount" > 0) AND (SetoffAmount > "VAT Payable Amount") THEN
                ERROR(Text020,"VAT Payable Amount");

              IF ("VAT Payable Amount" <= 0) AND (SetoffAmount > "VAT Payable Amount") THEN
                ERROR(Text020,0);

              VALIDATE("VAT ITC Exp. Payable Setoff",SetoffAmount);
              MODIFY;
            END;
          20: // Input VAT (Export Sales) Setoff CST Payable
            BEGIN
              TmpAmount := "Input VAT Credit (Exports)" + "VAT Input Cr. Exp. B/F Amount"
                - "VAT Input Cr. Exp. Refund"
                - "VAT ITC Exp. Payable Setoff";

              IF SetoffAmount > TmpAmount THEN
                ERROR(Text020,TmpAmount);

              VALIDATE("CST ITC Exp. Payable Setoff",0);
              IF SetoffAmount > "Net CST Payable Amount" THEN
                ERROR(Text020,"Net CST Payable Amount");

              VALIDATE("CST ITC Exp. Payable Setoff",SetoffAmount);
              MODIFY;
            END;
        END;
        PopulateGridValues(VATSettlement);
      END;
    END;

    PROCEDURE PostSettlement@1500003();
    VAR
      DetailedTaxEntry@1500000 : Record 16522;
    BEGIN
      VATSettlement.GET(VATSettlement."State Code",
        VATSettlement."Starting Date",
        VATSettlement."Ending Date",
        VATSettlement.Type,VATSettlement."Revision No.");
      VATSettlement.TESTFIELD(Settlement,FALSE);
      VATSettlement.AllowPost(VATSettlement."State Code",VATSettlement."Starting Date");
      VATSettlement.PostSettlement(FALSE);
      VATSettlement.Settlement := TRUE;
      VATSettlement.MODIFY;

      DetailedTaxEntry.RESET;
      DetailedTaxEntry.SETRANGE("State Code",VATSettlement."State Code");
      DetailedTaxEntry.SETRANGE("Posting Date",VATSettlement."Starting Date",VATSettlement."Ending Date");
      DetailedTaxEntry.MODIFYALL(Settlement,TRUE);
    END;

    PROCEDURE UndoPostSettlement@1500004();
    VAR
      DetailedTaxEntry@1500001 : Record 16522;
      VATSettlement2@1500000 : Record 16523;
    BEGIN
      VATSettlement.GET(VATSettlement."State Code",
        VATSettlement."Starting Date",
        VATSettlement."Ending Date",
        VATSettlement.Type,VATSettlement."Revision No.");
      VATSettlement.TESTFIELD(Settlement,TRUE);
      VATSettlement.AllowUndo(VATSettlement."State Code",VATSettlement."Starting Date");
      VATSettlement.PostSettlement(TRUE);
      VATSettlement.Settlement := FALSE;
      VATSettlement.MODIFY;

      VATSettlement.Type := VATSettlement.Type::Revised;

      VATSettlement2.RESET;
      VATSettlement2.SETRANGE("State Code",VATSettlement."State Code");
      VATSettlement2.SETRANGE("Starting Date",VATSettlement."Starting Date");
      VATSettlement2.SETRANGE("Ending Date",VATSettlement."Ending Date");
      VATSettlement2.SETRANGE(Type,VATSettlement.Type::Revised);
      IF VATSettlement2.FINDLAST THEN
        VATSettlement."Revision No." := VATSettlement2."Revision No." + 1
      ELSE
        VATSettlement."Revision No." := 1;
      VATSettlement.INSERT;

      DetailedTaxEntry.RESET;
      DetailedTaxEntry.SETRANGE("State Code",VATSettlement."State Code");
      DetailedTaxEntry.SETRANGE("Posting Date",VATSettlement."Starting Date",VATSettlement."Ending Date");
      DetailedTaxEntry.MODIFYALL(Settlement,FALSE);
    END;

    LOCAL PROCEDURE SetoffAmountOnAfterValidate@19043721();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE AfterGetCurrentRecord@19077479();
    BEGIN
      xRec := Rec;
      SetRowValues(Number);
    END;

    LOCAL PROCEDURE DescriptionOnFormat@19023855();
    BEGIN
      DescriptionEmphasize := RecBold;
      DescriptionIndent := Indent;
    END;

    LOCAL PROCEDURE SetoffAmountOnFormat@19077258();
    BEGIN
      IF (SetoffAmount = 0) AND AdjustBlankZero THEN
        SetoffAmountHideValue := TRUE;
    END;

    LOCAL PROCEDURE AmountOnFormat@19014598();
    BEGIN
      AmountEmphasize := RecBold;
      IF AmountZero AND (Amount = 0) THEN
        AmountHideValue := TRUE;
    END;

    BEGIN
    END.
  }
}

