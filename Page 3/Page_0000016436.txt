OBJECT Page 16436 Update Invoice Details
{
  OBJECT-PROPERTIES
  {
    Date=23-02-17;
    Time=12:00:00 PM;
    Version List=NAVIN9.00.00.48067;
  }
  PROPERTIES
  {
    Permissions=TableData 17=m,
                TableData 25=m,
                TableData 122=m,
                TableData 123=m,
                TableData 5802=m;
    CaptionML=[ENU=Update Invoice Details;
               ENN=Update Invoice Details];
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table123;
    SourceTableView=SORTING(Buy-from Vendor No.,Posting Date,Document No.,HSN/SAC Code)
                    WHERE(HSN/SAC Code=FILTER(<>''));
    PageType=Worksheet;
    OnOpenPage=BEGIN
                 NewVendorInvoiceEditable := FALSE;
               END;

    OnAfterGetRecord=BEGIN
                       NoOfTimesHeaderChanged := ShowHeaderVersion;
                       IF VendorInvoiceNo <> '' THEN
                         NewVendorInvoiceEditable := TRUE
                       ELSE
                         NewVendorInvoiceEditable := FALSE;
                     END;

    OnQueryClosePage=BEGIN
                       PurchInvLine.RESET;
                       PurchInvLine.SETCURRENTKEY("Buy-from Vendor No.","Posting Date","Document No.","HSN/SAC Code");
                       PurchInvLine.SETFILTER("New HSN/SAC Code",'<>%1','');
                       PurchInvLine.MODIFYALL("New HSN/SAC Code",'');
                     END;

    ActionList=ACTIONS
    {
      { 1500018 ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1500019 ;1   ;Action    ;
                      Name=Update Invoice No.;
                      CaptionML=[ENU=Update Invoice No.;
                                 ENN=Update Invoice No.];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 UpdateVendorInvoiceNo;
                               END;
                                }
      { 1500020 ;1   ;Action    ;
                      Name=Update HSN/SAC;
                      CaptionML=[ENU=Update HSN/SAC;
                                 ENN=Update HSN/SAC];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 UpdateHSNSACNoInInvoiceLine;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1500000;0;Container ;
                ContainerType=ContentArea }

    { 1500001;1;Group     ;
                Name=Group;
                CaptionML=[ENU=Group;
                           ENN=Group];
                GroupType=Group }

    { 1500002;2;Field     ;
                CaptionML=[ENU=Vendor No.;
                           ENN=Vendor No.];
                SourceExpr=VendorNo;
                TableRelation=Vendor;
                OnValidate=BEGIN
                             SETRANGE("Buy-from Vendor No.",VendorNo);
                             IF VendorNo = '' THEN
                               SETFILTER("Buy-from Vendor No.",'');
                             CurrPage.UPDATE;
                           END;
                            }

    { 1500003;2;Field     ;
                CaptionML=[ENU=Date Filter;
                           ENN=Date Filter];
                SourceExpr=DateFilter;
                OnValidate=BEGIN
                             IF ApplicationManagement.MakeDateFilter(DateFilter) = 0 THEN;
                             SETFILTER("Posting Date",DateFilter);
                             DateFilter := FORMAT(GETFILTER("Posting Date"));
                             CurrPage.UPDATE;
                           END;
                            }

    { 1500004;2;Field     ;
                CaptionML=[ENU=Vendor Invoice No.;
                           ENN=Vendor Invoice No.];
                SourceExpr=VendorInvoiceNo;
                OnValidate=BEGIN
                             IF VendorInvoiceNo <> '' THEN BEGIN
                               PurchInvHeader.RESET;
                               PurchInvHeader.SETCURRENTKEY("Vendor Invoice No.","Posting Date");
                               PurchInvHeader.SETRANGE("Vendor Invoice No.",VendorInvoiceNo);
                               IF PurchInvHeader.FINDFIRST THEN BEGIN
                                 SETRANGE("Document No.",PurchInvHeader."No.");
                                 PostedInvoiceNo := PurchInvHeader."No.";
                                 VendorNo := PurchInvHeader."Buy-from Vendor No.";
                                 DateFilter := FORMAT(PurchInvHeader."Posting Date");
                               END ELSE BEGIN
                                 ResetValues;
                                 RESET;
                                 SETFILTER("HSN/SAC Code",'<>%1','');
                               END
                             END ELSE BEGIN
                               RESET;
                               SETFILTER("HSN/SAC Code",'<>%1','');
                               ResetValues;
                             END;
                             NewVendorInvoiceEditable := TRUE;
                             CurrPage.UPDATE;
                           END;
                            }

    { 1500005;2;Field     ;
                CaptionML=[ENU=New Vendor Invoice No.;
                           ENN=New Vendor Invoice No.];
                SourceExpr=NewVendorInvoiceNo;
                Editable=NewVendorInvoiceEditable;
                OnValidate=BEGIN
                             IF VendorInvoiceNo = '' THEN
                               ERROR(VendorInvoiceErr);
                           END;
                            }

    { 1500006;2;Field     ;
                CaptionML=[ENU=Posted Invoice No.;
                           ENN=Posted Invoice No.];
                SourceExpr=PostedInvoiceNo;
                TableRelation="Purch. Inv. Header";
                OnValidate=BEGIN
                             PurchInvHeader.RESET;
                             PurchInvHeader.SETRANGE("No.",PostedInvoiceNo);
                             IF PurchInvHeader.FINDFIRST THEN BEGIN
                               VendorNo := PurchInvHeader."Buy-from Vendor No.";
                               VendorInvoiceNo := PurchInvHeader."Vendor Invoice No.";
                               DateFilter := FORMAT(PurchInvHeader."Posting Date");
                               SETRANGE("Buy-from Vendor No.",VendorNo);
                               SETRANGE("Document No.",PurchInvHeader."No.");
                               SETFILTER("Posting Date",DateFilter);
                               SETFILTER("HSN/SAC Code",'<>%1','');
                             END ELSE BEGIN
                               RESET;
                               SETFILTER("HSN/SAC Code",'<>%1','');
                               ResetValues;
                             END;
                             CurrPage.UPDATE;
                           END;
                            }

    { 1500016;2;Field     ;
                CaptionML=[ENU=NoOfTimesHeaderChanged;
                           ENN=NoOfTimesHeaderChanged];
                SourceExpr=NoOfTimesHeaderChanged;
                Editable=false }

    { 1500017;1;Group     ;
                GroupType=Repeater }

    { 1500007;2;Field     ;
                SourceExpr="Buy-from Vendor No." }

    { 1500008;2;Field     ;
                SourceExpr="Document No.";
                Editable=false }

    { 1500009;2;Field     ;
                SourceExpr="Line No.";
                Editable=false }

    { 1500010;2;Field     ;
                SourceExpr=Type;
                Editable=false }

    { 1500011;2;Field     ;
                SourceExpr="No.";
                Editable=false }

    { 1500014;2;Field     ;
                SourceExpr=Description;
                Editable=false }

    { 1500015;2;Field     ;
                SourceExpr="GST Group Code";
                Editable=false }

    { 1500013;2;Field     ;
                SourceExpr="HSN/SAC Code";
                Editable=false }

    { 1500012;2;Field     ;
                SourceExpr="New HSN/SAC Code" }

  }
  CODE
  {
    VAR
      PurchInvHeader@1500008 : Record 122;
      PurchInvLine@1500015 : Record 123;
      VendorLedgerEntry@1500013 : Record 25;
      ValueEntry@1500022 : Record 5802;
      GSTLedgerEntry@1500023 : Record 16418;
      DetailedGSTLedgerEntry@1500014 : Record 16419;
      GSTReconcilationLines@1500025 : Record 16430;
      GLEntry@1500024 : Record 17;
      ApplicationManagement@1500007 : Codeunit 1;
      VendorNo@1500000 : Code[20];
      VendorInvoiceNo@1500001 : Code[35];
      DateFilter@1500002 : Text[30];
      NewVendorInvoiceNo@1500003 : Code[35];
      PostedInvoiceNo@1500004 : Code[20];
      NoOfTimesHeaderChanged@1500005 : Integer;
      VendorInvoiceQst@1500006 : TextConst '@@@=Do you want to update Current Vendor Invoice No. %1 with new vendor invoice No. %2 in vendor %3, Posted Invoice No. %4 ?;ENU=Do you want to update current vendor invoice no. %1 with new vendor invoice no. %2 in vendor %3, posted invoice no. %4 ?;ENN=Do you want to update current vendor invoice no. %1 with new vendor invoice no. %2 in vendor %3, posted invoice no. %4 ?';
      NewVendorinvErr@1500010 : TextConst 'ENU=Please enter new vendor invoice no.;ENN=Please enter new vendor invoice no.';
      VendorInvoiceErr@1500019 : TextConst 'ENU=Please enter vendor invoice no.;ENN=Please enter vendor invoice no.';
      HSNInvoiceQst@1500011 : TextConst 'ENU=Do you want to update new HSN/SAC code ?;ENN=Do you want to update new HSN/SAC code ?';
      HSNSACMsg@1500017 : TextConst 'ENU=HSN/SAC code updated succesfully.;ENN=HSN/SAC code updated succesfully.';
      VendorUpdatedInvoiceMsg@1500016 : TextConst '@@@=New vendor invoice %1 has been updated in Posted invoice No. %2;ENU=New vendor invoice %1 has been updated in posted invoice no. %2.;ENN=New vendor invoice %1 has been updated in posted invoice no. %2.';
      CheckApplEntryErr@1500009 : TextConst 'ENU=The existing entry has already application entries.;ENN=The existing entry has already application entries.';
      NewVendorInvoiceEditable@1500020 : Boolean INDATASET;
      CheckInvoiceErr@1500021 : TextConst 'ENU=The invoice no. is same.;ENN=The invoice no. is same.';

    PROCEDURE UpdateInvoiceAdjstJournalHeader@1500000(PurchInvHeader@1500002 : Record 122);
    VAR
      InvoiceAdjustmentJournal@1500000 : Record 16435;
    BEGIN
      WITH InvoiceAdjustmentJournal DO BEGIN
        INIT;
        "Entry No." := NextInvoiceAdjNo;
        "Transaction Type" := "Transaction Type"::Purchase;
        "Document No." := PurchInvHeader."No.";
        "Source Type" := "Source Type"::Vendor;
        "Source No." := PurchInvHeader."Buy-from Vendor No.";
        "Update Type" := "Update Type"::Header;
        "User ID" := USERID;
        "Original Vendor Invoice No." := VendorInvoiceNo;
        "New Vendor Invoice No." := NewVendorInvoiceNo;
        "Update Date" := TODAY;
        Version := GetNextVersionNo;
        INSERT;
      END;
    END;

    PROCEDURE UpdateInvoiceAdjstJournalLine@1500009(PurchInvLinePar@1500002 : Record 123);
    VAR
      InvoiceAdjustmentJournal@1500000 : Record 16435;
    BEGIN
      WITH InvoiceAdjustmentJournal DO BEGIN
        INIT;
        "Entry No." := NextInvoiceAdjNo;
        "Transaction Type" := "Transaction Type"::Purchase;
        "Document No." := PurchInvLinePar."Document No.";
        "Source Type" := "Source Type"::Vendor;
        "Source No." := PurchInvLinePar."Buy-from Vendor No.";
        "Update Type" := "Update Type"::Line;
        "User ID" := USERID;
        "Original Vendor Invoice No." := VendorInvoiceNo;
        Type := PurchInvLinePar.Type;
        "Document Line No." := PurchInvLinePar."Line No.";
        "Original HSN/SAC Code" := PurchInvLinePar."HSN/SAC Code";
        "New HSN/SAC Code" := PurchInvLinePar."New HSN/SAC Code";
        "Update Date" := TODAY;
        Version := GetNextHSNVersionNo;
        INSERT;
      END;
    END;

    PROCEDURE UpdateVendorInvoiceNo@1500001();
    BEGIN
      IF NewVendorInvoiceNo = '' THEN
        ERROR(NewVendorinvErr);
      IF VendorInvoiceNo = '' THEN
        ERROR(VendorInvoiceErr);
      IF NOT CONFIRM(VendorInvoiceQst,FALSE,VendorInvoiceNo,NewVendorInvoiceNo,VendorNo,PostedInvoiceNo) THEN
        EXIT;
      IF VendorInvoiceNo = NewVendorInvoiceNo THEN
        ERROR(CheckInvoiceErr);
      PurchInvHeader.RESET;
      PurchInvHeader.SETCURRENTKEY("Vendor Invoice No.","Posting Date");
      PurchInvHeader.SETRANGE("Vendor Invoice No.",VendorInvoiceNo);
      PurchInvHeader.SETFILTER("Posting Date",DateFilter);
      IF PurchInvHeader.FINDSET THEN BEGIN
        REPEAT
          VendorLedgerEntry.RESET;
          VendorLedgerEntry.SETCURRENTKEY("Document No.");
          VendorLedgerEntry.SETRANGE("Document No.",PurchInvHeader."No.");
          IF VendorLedgerEntry.FINDSET THEN
            REPEAT
              IF CheckApplicationEntryExist(VendorLedgerEntry) THEN
                ERROR(CheckApplEntryErr);
              VendorLedgerEntry."External Document No." := NewVendorInvoiceNo;
              VendorLedgerEntry.MODIFY;
              ValueEntry.RESET;
              ValueEntry.SETCURRENTKEY("Document No.");
              ValueEntry.SETRANGE("Document No.",PurchInvHeader."No.");
              IF ValueEntry.FINDSET THEN
                REPEAT
                  ValueEntry."External Document No." := NewVendorInvoiceNo;
                  ValueEntry.MODIFY;
                UNTIL ValueEntry.NEXT = 0;
              GSTLedgerEntry.RESET;
              GSTLedgerEntry.SETCURRENTKEY("Transaction No.");
              GSTLedgerEntry.SETRANGE("Transaction No.",VendorLedgerEntry."Transaction No.");
              IF GSTLedgerEntry.FINDSET THEN
                REPEAT
                  GSTLedgerEntry."External Document No." := NewVendorInvoiceNo;
                  GSTLedgerEntry.MODIFY;
                UNTIL GSTLedgerEntry.NEXT = 0;
              GLEntry.RESET;
              GLEntry.SETCURRENTKEY("Transaction No.");
              GLEntry.SETRANGE("Transaction No.",VendorLedgerEntry."Transaction No.");
              IF GLEntry.FINDSET THEN
                REPEAT
                  GLEntry."External Document No." := NewVendorInvoiceNo;
                  GLEntry.MODIFY;
                UNTIL GLEntry.NEXT = 0;
              DetailedGSTLedgerEntry.RESET;
              DetailedGSTLedgerEntry.SETCURRENTKEY("Transaction No.");
              DetailedGSTLedgerEntry.SETRANGE("Transaction No.",VendorLedgerEntry."Transaction No.");
              IF DetailedGSTLedgerEntry.FINDSET THEN
                REPEAT
                  DetailedGSTLedgerEntry."External Document No." := NewVendorInvoiceNo ;
                  DetailedGSTLedgerEntry.MODIFY;
                UNTIL DetailedGSTLedgerEntry.NEXT = 0;
              GSTReconcilationLines.SETRANGE("Document No.",PurchInvHeader."No.");
              IF GSTReconcilationLines.FINDSET THEN
                REPEAT
                  GSTReconcilationLines."External Document No." := NewVendorInvoiceNo;
                  GSTReconcilationLines.MODIFY(TRUE);
                UNTIL GSTReconcilationLines.NEXT = 0;
            UNTIL VendorLedgerEntry.NEXT = 0;
          IF NewVendorInvoiceNo <> '' THEN
            PurchInvHeader."Vendor Invoice No." := NewVendorInvoiceNo;
          PurchInvHeader.MODIFY;
          UpdateInvoiceAdjstJournalHeader(PurchInvHeader);
        UNTIL  PurchInvHeader.NEXT = 0;
        MESSAGE(VendorUpdatedInvoiceMsg,NewVendorInvoiceNo,PostedInvoiceNo);
        CurrPage.CLOSE;
      END;
    END;

    PROCEDURE UpdateHSNSACNoInInvoiceLine@1500003();
    BEGIN
      IF NOT CONFIRM(HSNInvoiceQst) THEN
        EXIT;
      PurchInvLine.RESET;
      PurchInvLine.SETRANGE("Document No.",PostedInvoiceNo);
      PurchInvLine.SETFILTER("HSN/SAC Code",'<>%1','');
      PurchInvLine.SETFILTER("New HSN/SAC Code",'<>%1','');
      IF PurchInvLine.FINDSET THEN BEGIN
        REPEAT
          IF CheckApplicationEntryLineExist(PurchInvLine) THEN
            ERROR(CheckApplEntryErr);
          DetailedGSTLedgerEntry.RESET;
          DetailedGSTLedgerEntry.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Document Line No.");
          DetailedGSTLedgerEntry.SETRANGE("Transaction Type",DetailedGSTLedgerEntry."Transaction Type"::Purchase);
          DetailedGSTLedgerEntry.SETRANGE("Document No.",PurchInvLine."Document No.");
          DetailedGSTLedgerEntry.SETRANGE("Document Line No.",PurchInvLine."Line No.");
          IF DetailedGSTLedgerEntry.FINDSET THEN
            REPEAT
              DetailedGSTLedgerEntry."HSN/SAC Code" := PurchInvLine."New HSN/SAC Code" ;
              DetailedGSTLedgerEntry.MODIFY;
            UNTIL DetailedGSTLedgerEntry.NEXT = 0;
          UpdateInvoiceAdjstJournalLine(PurchInvLine);
          IF PurchInvLine."New HSN/SAC Code" <> '' THEN BEGIN
            PurchInvLine."HSN/SAC Code" := PurchInvLine."New HSN/SAC Code";
            PurchInvLine."New HSN/SAC Code" := '';
            PurchInvLine.MODIFY;
          END;
        UNTIL  PurchInvLine.NEXT = 0;
        MESSAGE(HSNSACMsg);
        CurrPage.UPDATE;
        CurrPage.CLOSE;
      END;
    END;

    PROCEDURE GetNextVersionNo@1500007() : Integer;
    VAR
      InvoiceAdjustmentJournal@1500000 : Record 16435;
    BEGIN
      WITH InvoiceAdjustmentJournal DO BEGIN
        SETCURRENTKEY("Transaction Type","Document No.","Document Line No.",Version);
        SETRANGE("Transaction Type","Transaction Type"::Purchase);
        SETRANGE("Document No.","Document No.");
        SETFILTER("Document Line No.",'%1',0);
        IF FINDLAST THEN
          EXIT(Version + 1);
      END;
      EXIT(1);
    END;

    PROCEDURE GetNextHSNVersionNo@1500002() : Integer;
    VAR
      InvoiceAdjustmentJournal@1500001 : Record 16435;
    BEGIN
      WITH InvoiceAdjustmentJournal DO BEGIN
        SETCURRENTKEY("Transaction Type","Document No.","Document Line No.",Version);
        SETRANGE("Transaction Type","Transaction Type"::Purchase);
        SETRANGE("Document No.","Document No.");
        SETFILTER("Document Line No.",'<>%1',0);
        IF FINDLAST THEN
          EXIT(Version + 1);
      END;
      EXIT(1);
    END;

    PROCEDURE NextInvoiceAdjNo@1500006() : Integer;
    VAR
      InvoiceAdjustmentJournal@1500000 : Record 16435;
    BEGIN
      IF InvoiceAdjustmentJournal.FINDLAST THEN
        InvoiceAdjustmentJournal."Entry No." += 1
      ELSE
        InvoiceAdjustmentJournal."Entry No." := 1;
      EXIT(InvoiceAdjustmentJournal."Entry No.");
    END;

    PROCEDURE ShowHeaderVersion@1500004() : Integer;
    VAR
      InvoiceAdjustmentJournal@1500000 : Record 16435;
    BEGIN
      WITH InvoiceAdjustmentJournal DO BEGIN
        SETCURRENTKEY("Transaction Type","Document No.","Document Line No.",Version);
        SETRANGE("Transaction Type","Transaction Type"::Purchase);
        SETRANGE("Document No.","Document No.");
        SETFILTER("Document Line No.",'%1',0);
        IF FINDLAST THEN
          EXIT(Version);
      END;
    END;

    PROCEDURE CheckApplicationEntryExist@1500005(VendorLedgerEntry@1500001 : Record 25) : Boolean;
    VAR
      ApplicableAmt@1500000 : Decimal;
    BEGIN
      ApplicableAmt := 0;
      DetailedGSTLedgerEntry.RESET;
      DetailedGSTLedgerEntry.SETCURRENTKEY("Transaction No.");
      DetailedGSTLedgerEntry.SETRANGE("Transaction No.",VendorLedgerEntry."Transaction No.");
      DetailedGSTLedgerEntry.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type"::Application);
      IF DetailedGSTLedgerEntry.FINDSET THEN
        REPEAT
          DetailedGSTLedgerEntry.TESTFIELD(Paid,FALSE);
          DetailedGSTLedgerEntry.TESTFIELD(Reconciled,FALSE);
          ApplicableAmt += DetailedGSTLedgerEntry."GST Amount";
        UNTIL DetailedGSTLedgerEntry.NEXT = 0;
      EXIT(ApplicableAmt <> 0);
    END;

    PROCEDURE CheckApplicationEntryLineExist@1500008(PurchInvLine@1500001 : Record 123) : Boolean;
    VAR
      ApplicableAmt@1500000 : Decimal;
    BEGIN
      ApplicableAmt := 0;
      DetailedGSTLedgerEntry.RESET;
      DetailedGSTLedgerEntry.SETCURRENTKEY("Transaction Type","Document Type","Document No.","Document Line No.");
      DetailedGSTLedgerEntry.SETRANGE("Transaction Type",DetailedGSTLedgerEntry."Transaction Type"::Purchase);
      DetailedGSTLedgerEntry.SETRANGE("Document No.",PurchInvLine."Document No.");
      DetailedGSTLedgerEntry.SETRANGE("Document Line No.",PurchInvLine."Line No.");
      DetailedGSTLedgerEntry.SETRANGE("Entry Type",DetailedGSTLedgerEntry."Entry Type"::Application);
      IF DetailedGSTLedgerEntry.FINDSET THEN
        REPEAT
          DetailedGSTLedgerEntry.TESTFIELD(Paid,FALSE);
          DetailedGSTLedgerEntry.TESTFIELD(Reconciled,FALSE);
          ApplicableAmt += DetailedGSTLedgerEntry."GST Amount";
        UNTIL DetailedGSTLedgerEntry.NEXT = 0;
      EXIT(ApplicableAmt <> 0);
    END;

    LOCAL PROCEDURE ResetValues@1500010();
    BEGIN
      CLEAR(VendorNo);
      CLEAR(DateFilter);
      CLEAR(VendorInvoiceNo);
      CLEAR(NewVendorInvoiceNo);
      CLEAR(PostedInvoiceNo);
      CLEAR(NoOfTimesHeaderChanged);
    END;

    BEGIN
    END.
  }
}

