OBJECT Codeunit 136109 Service Posting - Consumption
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      ItemLedgerEntry@1017 : Record 32;
      LibraryERM@1021 : Codeunit 131300;
      LibraryInventory@1024 : Codeunit 132201;
      LibraryItemTracking@1015 : Codeunit 130502;
      LibraryPurchase@1023 : Codeunit 130512;
      LibraryResource@1026 : Codeunit 130511;
      LibrarySales@1022 : Codeunit 130509;
      LibraryService@1001 : Codeunit 131902;
      LibraryUtility@1010 : Codeunit 131000;
      LibraryRandom@1040 : Codeunit 130440;
      LibrarySetupStorage@1025 : Codeunit 131009;
      Assert@1011 : Codeunit 130000;
      IsInitialized@1000 : Boolean;
      NothingToPostError@1002 : TextConst 'ENU=There is nothing to post.';
      UnknownError@1004 : TextConst 'ENU=Unexpected Error';
      NothingToUndoServiceTier@1007 : TextConst 'ENU="Quantity Consumed must have a value in Service Shipment Line: Document No.=%1, Line No.=%2. It cannot be zero or empty."';
      OrderDoesNotExist@1006 : TextConst 'ENU=You cannot undo consumption because the original service order %1 is already closed.';
      DeleteError@1008 : TextConst 'ENU=Service Header must not exist.';
      ServiceShipmentLineError@1009 : TextConst 'ENU=Service Shipment Line: %1.';
      CreateLotNo@1020 : Boolean;
      Quantity@1016 : Decimal;
      TrackingAction@1014 : 'AssignSerialNo,AssignLotNo,SelectEntries,EnterValues';
      ConsumeQuantityError@1019 : TextConst 'ENU=You cannot consume more than 1 units.';
      NoOfEntriesError@1018 : TextConst 'ENU=No of entries for %1 must be %2.';
      FieldError@1003 : TextConst 'ENU=%1 must be equal  %2 in %3.';

    [Test]
    PROCEDURE OrderPostingWithoutQuantity@2();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1003 : Record 5902;
    BEGIN
      // Covers document number TC-PP-C-1 - refer to TFS ID 20886.
      // Test error occurs on Posting Service Order without Quantity.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Order.
      CreateServiceHeader(ServiceHeader);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      UpdateQtyToShipOnServiceLine(ServiceLine,ServiceItemLine."Line No.",LibraryRandom.RandInt(10),0);  // Use 0 for Boundary Value Testing.

      // 3. Verify: Verify that Service Order shows Error "Nothing to Post" on Posting as Ship and Consume.
      ASSERTERROR LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      Assert.AreEqual(STRSUBSTNO(NothingToPostError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    PROCEDURE OrderPostingPartially@22();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      TempServiceLine@1003 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-C-4, TC-PP-C-6 - refer to TFS ID 20886.
      // Test Posted Entries after Posting Service Order as Ship and Consume.
      Initialize;

      // 1. Setup: Create Service Order.
      CreateServiceOrder(ServiceHeader,ServiceItemLine);

      // 2. Exercise: Post Service Order as Ship and Consume Partially.
      UpdatePartialQtyOnServiceLines(ServiceItemLine);
      SaveServiceLineInTempTable(TempServiceLine,ServiceItemLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify the Values of Service Line, Service Shipment Line, Item Ledger Entry, Resource Ledger Entry and Value Entry
      // with Values of Service Line.
      VerifyServiceLine(TempServiceLine,ServiceItemLine);
      VerifyPostedEntry(TempServiceLine);
      VerifyItemEntries(TempServiceLine);
      VerifyResourceLedgerEntry(TempServiceLine);
    END;

    [Test]
    PROCEDURE CostConsumption@1();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      ServiceCost@1000 : Record 5905;
      TempServiceLineBeforePosting@1006 : TEMPORARY Record 5902;
      ServiceShipmentHeaderNo@1004 : Code[20];
    BEGIN
      // [SCENARIO 380306] Test consumption on Service Line with Type Cost.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Order.
      CreateServiceCost(ServiceCost);
      CreateServiceHeader(ServiceHeader);

      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLineWithQuantity(
        ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code,LibraryRandom.RandInt(10));
      CheckGeneralPostingSetupExists(ServiceLine);

      // 3. Verify: Verify that Service Order doesn't show any Error on putting a value in "Qty. to Consume" field
      UpdatePriceAndQtyToConsume(ServiceLine,ServiceLine.Quantity);
      InsertServiceLinesIntoTemp(ServiceLine,TempServiceLineBeforePosting);
      Assert.AreEqual(ServiceLine.Quantity,ServiceLine."Qty. to Consume",UnknownError);

      // 4. Excercise: ship and consume
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 5. verify GL entries
      ServiceShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");

      // 5. verify GL entries, service ledger entries and shipment entries.
      VerifyGLEntryIsEmpty(ServiceShipmentHeaderNo);
      VerifyServiceLedgerEntriesAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,FALSE);
      VerifyPostedEntry(TempServiceLineBeforePosting);
      VerifyServiceShipmentLineAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,FALSE);
    END;

    [Test]
    PROCEDURE CostConsumptionWithLineDiscount@119();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      ServiceCost@1000 : Record 5905;
      TempServiceLineBeforePosting@1006 : TEMPORARY Record 5902;
      ServiceShipmentHeaderNo@1004 : Code[20];
    BEGIN
      // [SCENARIO 380306] Test consumption on Service Line with Type Cost with a line discount %.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Order.
      CreateServiceCost(ServiceCost);
      CreateServiceHeader(ServiceHeader);

      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLineWithQuantity(ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code,LibraryRandom.RandInt(10));
      CheckGeneralPostingSetupExists(ServiceLine);

      // 3. Verify: Verify that Service Order doesn't show any Error on putting a value in "Qty. to Consume" field
      UpdatePriceAndQtyToConsume(ServiceLine,ServiceLine.Quantity);
      ServiceLine.VALIDATE("Line Discount %",LibraryRandom.RandInt(10));
      ServiceLine.MODIFY(TRUE);

      Assert.AreEqual(ServiceLine.Quantity,ServiceLine."Qty. to Consume",UnknownError);
      InsertServiceLinesIntoTemp(ServiceLine,TempServiceLineBeforePosting);

      // 4. Excercise: ship and consume
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 5. verify GL entries
      ServiceShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");

      // 5. verify GL entries, service ledger entries and shipment entries.
      VerifyGLEntryIsEmpty(ServiceShipmentHeaderNo);
      VerifyServiceLedgerEntriesAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,FALSE);
      VerifyPostedEntry(TempServiceLineBeforePosting);
      VerifyServiceShipmentLineAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,FALSE);
    END;

    [Test]
    PROCEDURE CostConsumptionWithNonLCY@150();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1001 : Record 5902;
      ServiceCost@1000 : Record 5905;
      TempServiceLineBeforePosting@1006 : TEMPORARY Record 5902;
      ServiceShipmentHeaderNo@1004 : Code[20];
    BEGIN
      // [SCENARIO 380306] Test consumption on Service Line with Type Cost with non LCY.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Order.
      CreateServiceCost(ServiceCost);
      CreateServiceOrderWithCurrency(ServiceHeader);
      CreateServiceLineWithQuantity(ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code,LibraryRandom.RandInt(10));
      CheckGeneralPostingSetupExists(ServiceLine);

      // 3. Verify: Verify that Service Order doesn't show any Error on putting a value in "Qty. to Consume" field
      UpdatePriceAndQtyToConsume(ServiceLine,ServiceLine.Quantity);
      Assert.AreEqual(ServiceLine.Quantity,ServiceLine."Qty. to Consume",UnknownError);
      InsertServiceLinesIntoTemp(ServiceLine,TempServiceLineBeforePosting);

      // 4. Excercise: ship and consume
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 5. verify GL entries
      ServiceShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");

      // 5. verify GL entries, service ledger entries and shipment entries.
      VerifyGLEntryIsEmpty(ServiceShipmentHeaderNo);
      VerifyServiceLedgerEntriesAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,FALSE);
      VerifyPostedEntry(TempServiceLineBeforePosting);
      VerifyServiceShipmentLineAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,FALSE);
    END;

    [Test]
    PROCEDURE CostConsumptionWithLineDiscountNonLCY@91();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1001 : Record 5902;
      ServiceCost@1000 : Record 5905;
      TempServiceLineBeforePosting@1006 : TEMPORARY Record 5902;
      ServiceShipmentHeaderNo@1004 : Code[20];
    BEGIN
      // [SCENARIO 380306] Test consumption on Service Line with Type Cost with non LCY with line discount %.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Order.
      CreateServiceCost(ServiceCost);
      CreateServiceOrderWithCurrency(ServiceHeader);
      CreateServiceLineWithQuantity(ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code,LibraryRandom.RandInt(10));
      CheckGeneralPostingSetupExists(ServiceLine);

      // 3. Verify: Verify that Service Order doesn't show any Error on putting a value in "Qty. to Consume" field
      UpdateServiceLineInsertTemp(TempServiceLineBeforePosting,ServiceLine);

      // 4. Excercise: ship and consume
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 5. verify GL entries
      ServiceShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");

      // 5. verify GL entries, service ledger entries and shipment entries.
      VerifyGLEntryIsEmpty(ServiceShipmentHeaderNo);
      VerifyServiceLedgerEntriesAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,FALSE);
      VerifyPostedEntry(TempServiceLineBeforePosting);
      VerifyServiceShipmentLineAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,FALSE);
    END;

    [Test]
    PROCEDURE GLAccountConsumption@3();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      TempServiceLineBeforePosting@1004 : TEMPORARY Record 5902;
      ServiceShipmentHeaderNo@1005 : Code[20];
    BEGIN
      // [SCENARIO 380306] Test consumption on Service Line with Type G/L Account.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Order.
      CreateServiceHeader(ServiceHeader);

      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLineWithQuantity(
        ServiceLine,ServiceHeader,ServiceLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithSalesSetup,LibraryRandom.RandIntInRange(10,20));

      CheckGeneralPostingSetupExists(ServiceLine);

      // 3. Verify: Verify that Service Order "Qty. to Consume" field can take values.
      UpdatePriceAndQtyToConsume(ServiceLine,ServiceLine.Quantity);
      Assert.AreEqual(ServiceLine.Quantity,ServiceLine."Qty. to Consume",UnknownError);
      InsertServiceLinesIntoTemp(ServiceLine,TempServiceLineBeforePosting);

      // 4. Excercise: ship and consume
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 5. verify GL entries
      ServiceShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");
      VerifyGLEntryIsEmpty(ServiceShipmentHeaderNo);
      VerifyServiceLedgerEntriesAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,FALSE);
      VerifyPostedEntry(TempServiceLineBeforePosting);
      VerifyServiceShipmentLineAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,FALSE);
    END;

    [Test]
    PROCEDURE GLAccountConsumptionWithLineDiscount@116();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      TempServiceLineBeforePosting@1004 : TEMPORARY Record 5902;
      ServiceShipmentHeaderNo@1005 : Code[20];
    BEGIN
      // [SCENARIO 380306] Test consumption on Service Line with Type G/L Account and line discount.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Order.
      CreateServiceHeader(ServiceHeader);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLineWithQuantity(
        ServiceLine,ServiceHeader,ServiceLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,
        LibraryRandom.RandIntInRange(10,20));
      CheckGeneralPostingSetupExists(ServiceLine);

      // 3. Verify: Verify that Service Order "Qty. to Consume" field can take values.
      UpdatePriceAndQtyToConsume(ServiceLine,ServiceLine.Quantity);
      ServiceLine.VALIDATE("Line Discount %",LibraryRandom.RandInt(10));
      ServiceLine.MODIFY(TRUE);
      Assert.AreEqual(ServiceLine.Quantity,ServiceLine."Qty. to Consume",UnknownError);
      InsertServiceLinesIntoTemp(ServiceLine,TempServiceLineBeforePosting);

      // 4. Excercise: ship and consume
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 5. verify GL entries
      ServiceShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");
      VerifyGLEntryIsEmpty(ServiceShipmentHeaderNo);
      VerifyServiceLedgerEntriesAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,FALSE);
      VerifyPostedEntry(TempServiceLineBeforePosting);
      VerifyServiceShipmentLineAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,FALSE);
    END;

    [Test]
    PROCEDURE GLAccountConsumptionWithNonLCY@124();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1001 : Record 5902;
      TempServiceLineBeforePosting@1004 : TEMPORARY Record 5902;
      ServiceShipmentHeaderNo@1005 : Code[20];
    BEGIN
      // [SCENARIO 380306] Test consumption on Service Line with Type G/L Account with Non LCY.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Order.
      CreateServiceOrderWithCurrency(ServiceHeader);
      CreateServiceLineWithQuantity(
        ServiceLine,ServiceHeader,ServiceLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,
        LibraryRandom.RandIntInRange(10,20));
      CheckGeneralPostingSetupExists(ServiceLine);

      // 3. Verify: Verify that Service Order "Qty. to Consume" field can take values.
      UpdatePriceAndQtyToConsume(ServiceLine,ServiceLine.Quantity);
      Assert.AreEqual(ServiceLine.Quantity,ServiceLine."Qty. to Consume",UnknownError);
      InsertServiceLinesIntoTemp(ServiceLine,TempServiceLineBeforePosting);

      // 4. Excercise: ship and consume
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 5. verify GL entries
      ServiceShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");
      VerifyGLEntryIsEmpty(ServiceShipmentHeaderNo);
      VerifyServiceLedgerEntriesAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,FALSE);
      VerifyPostedEntry(TempServiceLineBeforePosting);
      VerifyServiceShipmentLineAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,FALSE);
    END;

    [Test]
    PROCEDURE GLAccountConsumptionWithLineDiscountNonLCY@86();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1001 : Record 5902;
      TempServiceLineBeforePosting@1004 : TEMPORARY Record 5902;
      ServiceShipmentHeaderNo@1005 : Code[20];
    BEGIN
      // [SCENARIO 380306] Test consumption on Service Line with Type G/L Account with Non LCY with line discount %.
      // 1. Setup: Create Service Order add lines, qty to consume and line discount.
      Initialize;

      CreateServiceOrderWithCurrency(ServiceHeader);
      CreateServiceLineWithQuantity(
        ServiceLine,ServiceHeader,ServiceLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,
        LibraryRandom.RandIntInRange(10,20));
      CheckGeneralPostingSetupExists(ServiceLine);

      UpdateServiceLineInsertTemp(TempServiceLineBeforePosting,ServiceLine);

      // 2. Exercise: Ship and consume the order
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. verify entries
      ServiceShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");
      VerifyGLEntryIsEmpty(ServiceShipmentHeaderNo);
      VerifyServiceLedgerEntriesAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,FALSE);
      VerifyPostedEntry(TempServiceLineBeforePosting);
      VerifyServiceShipmentLineAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,FALSE);
    END;

    [Test]
    PROCEDURE ServiceOrderPostingFully@4();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      TempServiceLine@1003 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-C-3, TC-PP-C-14 - refer to TFS ID 20886.
      // Test Posted Entries after Posting Service Order as Ship and Consume Fully.
      Initialize;

      // 1. Setup: Create Service Order.
      CreateServiceOrder(ServiceHeader,ServiceItemLine);

      // 2. Exercise: Post Service Order as Ship and Consume Fully.
      UpdateFullQtyOnServiceLines(ServiceItemLine);
      SaveServiceLineInTempTable(TempServiceLine,ServiceItemLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify the Service Order deleted and Values of Service Shipment Line, Item Ledger Entry, Resource Ledger Entry and
      // Value Entry Table with Values of Service Line.
      Assert.IsFalse(ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No."),DeleteError);
      VerifyPostedEntry(TempServiceLine);
      VerifyItemEntries(TempServiceLine);
      VerifyResourceLedgerEntry(TempServiceLine);
    END;

    [Test]
    PROCEDURE OrderPostingPartiallyTwice@29();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      TempServiceLine@1003 : TEMPORARY Record 5902;
      TempServiceLine2@1009 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-C-25, TC-PP-C-26 - refer to TFS ID 20886.
      // Test Posted Entries after Posting Service Order as Ship and Consume Twice.
      Initialize;

      // 1. Setup: Create Service Order, Post Service Order Partially as Ship and Consume.
      CreateServiceOrder(ServiceHeader,ServiceItemLine);
      UpdatePartialQtyOnServiceLines(ServiceItemLine);

      SaveServiceLineInTempTable(TempServiceLine,ServiceItemLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 2. Exercise: Post Service Order Partially again as Ship and Consume.
      UpdateConsumedQtyOnServiceLine(ServiceItemLine);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      SaveServiceLineInTempTable(TempServiceLine2,ServiceItemLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify the Quantity Consumed on Service Line and Item Ledger Entry, Value Entry Table with values of Service Line.
      VerifyUpdatedValueConsumedQty(TempServiceLine,TempServiceLine2,ServiceItemLine);
      VerifyItemEntries(TempServiceLine2);
    END;

    [Test]
    PROCEDURE OrderPostingAfterInvoice@5();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      TempServiceLine@1003 : TEMPORARY Record 5902;
      TempServiceLine2@1009 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-C-40 - refer to TFS ID 20886.
      // Test Posted Entries after Posting Service Order as Ship and Consume after Posting Ship and Invoice.
      Initialize;

      // 1. Setup: Create Service Order, Post Service Order Partially as Ship and Consume.
      CreateServiceOrder(ServiceHeader,ServiceItemLine);
      UpdatePartialQtyToInvoice(ServiceItemLine);

      SaveServiceLineInTempTable(TempServiceLine,ServiceItemLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,TRUE);

      // 2. Exercise: Post Service Order Partially again as Ship and Consume.
      UpdateConsumedQtyOnServiceLine(ServiceItemLine);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");

      SaveServiceLineInTempTable(TempServiceLine2,ServiceItemLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify the Quantity Consumed, Quantity Invoiced on Service Line and Service Shipment Line, Item Ledger Entry, Value
      // Entry Table with values of Service Line.
      VerifyUpdatedValueConsumedQty(TempServiceLine,TempServiceLine2,ServiceItemLine);
      VerifyPostedEntry(TempServiceLine2);
      VerifyItemEntries(TempServiceLine2);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoConsumptionPostPartially@31();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      TempServiceLine@1003 : TEMPORARY Record 5902;
    BEGIN
      // [FEATURE] [Undo Consumption] [Service Shipment]
      // [SCENARIO 205882] Undoing consumption should create service shipment line and item ledger entry with opposite quantity and same posting date as on the original service shipment line and item entry.
      Initialize;

      // [GIVEN] Service Order with posting date = WORKDATE.
      CreateServiceOrder(ServiceHeader,ServiceItemLine);

      // [GIVEN] Service lines are set to be partially consumed.
      UpdatePartialQtyOnServiceLines(ServiceItemLine);

      // [GIVEN] Posting Date on the service lines are set to "D" > WORKDATE.
      UpdatePostingDateOnServiceLines(ServiceItemLine,LibraryRandom.RandDateFrom(ServiceHeader."Posting Date",30));
      SaveServiceLineInTempTable(TempServiceLine,ServiceItemLine);

      // [GIVEN] The service lines are posted with Ship and Consume option.
      LibraryService.PostServiceOrderWithPassedLines(ServiceHeader,TempServiceLine,TRUE,TRUE,FALSE);

      // [WHEN] Undo consumption.
      UndoConsumption(ServiceItemLine."Document No.");

      // [THEN] Reversed Service Shipment Lines are created.
      VerifyUndoConsumptionEntries(TempServiceLine);

      // [THEN] Shipped and consumed quantity on Service lines in the Service Order are equal to 0.
      VerifyServiceLineAfterUndo(TempServiceLine);

      // [THEN] Posting Date on reversed item ledger entries is equal to "D".
      VerifyItemEntriesAfterUndo(TempServiceLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoConsumptionPostAsShip@11();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1003 : Record 5902;
      ServiceShipmentLine@1007 : Record 5991;
      Quantity@1006 : Decimal;
    BEGIN
      // Covers document number TC-PP-UC-05 - refer to TFS ID 20886.
      // Test error occurs on undo Consumption after Posting Service Order as Ship.
      Initialize;

      // 1. Setup: Create Service Order.
      CreateServiceHeader(ServiceHeader);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      Quantity := LibraryRandom.RandInt(10);  // Use Random because value is not important.
      UpdateQtyToInvoice(ServiceLine,ServiceItemLine."Line No.",Quantity,Quantity);

      // 2. Exercise: Post Service Order as Ship Partially.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 3. Verify: Verify that Service Shipment Line shows Error "Nothing to Undo" on Undo Consumption.
      ServiceShipmentLine.SETRANGE("Order No.",ServiceItemLine."Document No.");
      ServiceShipmentLine.FINDFIRST;
      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Undo Service Consumption Line",ServiceShipmentLine);
      Assert.AreEqual(
        STRSUBSTNO(NothingToUndoServiceTier,ServiceShipmentLine."Document No.",ServiceShipmentLine."Line No."),
        GETLASTERRORTEXT,UnknownError)
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoConsumptionPostFully@16();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1003 : Record 5902;
      ServiceShipmentLine@1007 : Record 5991;
      Quantity@1006 : Decimal;
    BEGIN
      // Covers document number TC-PP-UC-07 - refer to TFS ID 20886.
      // Test error occurs on undo Consumption after Posting Service Order as Ship and Consume Fully.

      // 1. Setup: Create Service Order.
      Initialize;
      CreateServiceHeader(ServiceHeader);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,LibraryInventory.CreateItemNo);
      Quantity := LibraryRandom.RandInt(10);  // Use Random because value is not important.
      UpdateQtyToShipOnServiceLine(ServiceLine,ServiceItemLine."Line No.",Quantity,Quantity);

      // 2. Exercise: Post Service Order as Ship and Consume Fully.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify that Service Shipment Line shows Error "Order Not exist" on Undo Consumption.
      ServiceShipmentLine.SETRANGE("Order No.",ServiceItemLine."Document No.");
      ServiceShipmentLine.FINDFIRST;
      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Undo Service Consumption Line",ServiceShipmentLine);
      Assert.AreEqual(STRSUBSTNO(OrderDoesNotExist,ServiceShipmentLine."Order No."),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoConsumptionPartLinewise@17();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      TempServiceLine@1003 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-UC-08 - refer to TFS ID 20886.
      // Test undo Consumption after Posting Service Order as Ship and Consume from Service Line.

      // 1. Setup: Create Service Order.
      CreateServiceOrder(ServiceHeader,ServiceItemLine);

      UpdatePartialQtyOnServiceLines(ServiceItemLine);
      SaveServiceLineInTempTable(TempServiceLine,ServiceItemLine);

      // 2. Exercise: Post Service Order as Ship and Consume Partially for each Service Line Individual, Undo Consumption.
      PostServiceOrderLineByLine(ServiceHeader);
      UndoConsumption(ServiceItemLine."Document No.");

      // 3. Verify: Verify the Quantity, Quantity Consumed on Service Shipment Line and Quantity Consumed on Service Line as well.
      VerifyUndoConsumptionEntries(TempServiceLine);
      VerifyServiceLineAfterUndo(TempServiceLine);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE ConsumeAfterUndoConsumption@49();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      TempServiceLine@1003 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-C-45, TC-PP-C-48 - refer to TFS ID 20886.
      // Test Posted Entries after Posting Service Order as Ship and Consume after undo Consumption.
      Initialize;

      // 1. Setup: Create Service Order, Post Service Order as Ship and Consume Partially.
      CreateServiceOrder(ServiceHeader,ServiceItemLine);

      UpdatePartialQtyOnServiceLines(ServiceItemLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 2. Exercise: Post Service Order as Ship and Consume Partially, Undo Consumption.
      UndoConsumption(ServiceItemLine."Document No.");
      UpdateFullQtyToConsume(ServiceItemLine);
      SaveServiceLineInTempTable(TempServiceLine,ServiceItemLine);
      ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify the Service Order deleted and Values of Service Shipment Line, Item Ledger Entry, Resource Ledger Entry and
      // Value Entry Table with Values of Service Line.
      Assert.IsFalse(ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No."),DeleteError);
      VerifyPostedEntry(TempServiceLine);
      VerifyItemEntries(TempServiceLine);
      VerifyResourceLedgerEntry(TempServiceLine);
    END;

    [Test]
    PROCEDURE OrderPostingPartiallyAutomatic@18();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      TempServiceLine@1003 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-C-4, TC-PP-C-6 - refer to TFS ID 20886.
      // Test Posted Entries after Posting Service Order as Ship and Consume with "Automatic Cost Posting" and "Expected Cost Posted to
      // G/L" fields as True on Inventory Setup.
      Initialize;

      // 1. Setup: Create Service Order, Set "Automatic Cost Posting" and "Expected Cost Posted to G/L" fields as True on Inventory Setup.
      CreateServiceOrder(ServiceHeader,ServiceItemLine);
      InventorySetupCostPosting;

      // 2. Exercise: Post Service Order as Ship and Consume Partially.
      UpdatePartialQtyOnServiceLines(ServiceItemLine);
      SaveServiceLineInTempTable(TempServiceLine,ServiceItemLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify the Values of Service Line, Service Shipment Line, Item Ledger Entry, Resource Ledger Entry and Value Entry
      // with Values of Service Line.
      VerifyServiceLine(TempServiceLine,ServiceItemLine);
      VerifyPostedEntry(TempServiceLine);
      VerifyItemEntries(TempServiceLine);
      VerifyResourceLedgerEntry(TempServiceLine);
      VerifyGLEntry(ServiceItemLine."Document No.");
    END;

    [Test]
    PROCEDURE OrderPostingFullyAutomatic@42();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      TempServiceLine@1003 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-C-14 - refer to TFS ID 20886.
      // Test Posted Entries after Posting Service Order as Ship and Consume Fully with "Automatic Cost Posting" and "Expected Cost
      // Posted to G/L" fields as True on Inventory Setup.
      Initialize;

      // 1. Setup: Create Service Order, Set "Automatic Cost Posting" and "Expected Cost Posted to G/L" fields as True on Inventory Setup.
      CreateServiceOrder(ServiceHeader,ServiceItemLine);
      InventorySetupCostPosting;

      // 2. Exercise: Post Service Order as Ship and Consume Fully.
      UpdateFullQtyOnServiceLines(ServiceItemLine);
      SaveServiceLineInTempTable(TempServiceLine,ServiceItemLine);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify the Service Order deleted and Values of Service Shipment Line, Item Ledger Entry, Resource Ledger Entry and
      // Value Entry Table with Values of Service Line.
      Assert.IsFalse(ServiceHeader.GET(ServiceHeader."Document Type",ServiceHeader."No."),DeleteError);
      VerifyPostedEntry(TempServiceLine);
      VerifyItemEntries(TempServiceLine);
      VerifyResourceLedgerEntry(TempServiceLine);
      VerifyGLEntry(ServiceHeader."No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoConsumptionWithAutomatic@25();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      TempServiceLine@1003 : TEMPORARY Record 5902;
    BEGIN
      // Covers document number TC-PP-UC-10 - refer to TFS ID 20886.
      // Test undo Consumption after Posting Service Order as Ship and Consume with "Automatic Cost Posting" and "Expected Cost Posted to
      // G/L" fields as True on Inventory Setup.
      Initialize;

      // 1. Setup: Create Service Order, Set "Automatic Cost Posting" and "Expected Cost Posted to G/L" fields as True on Inventory Setup.
      CreateServiceOrder(ServiceHeader,ServiceItemLine);
      InventorySetupCostPosting;

      UpdatePartialQtyOnServiceLines(ServiceItemLine);
      SaveServiceLineInTempTable(TempServiceLine,ServiceItemLine);

      // 2. Exercise: Post Service Order as Ship and Consume Partially, Undo Consumption.
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      UndoConsumption(ServiceItemLine."Document No.");

      // 3. Verify: Verify the Quantity, Quantity Consumed on Service Shipment Line and Quantity Consumed on Service Line as well.
      VerifyUndoConsumptionEntries(TempServiceLine);
      VerifyServiceLineAfterUndo(TempServiceLine);
      VerifyGLEntry(TempServiceLine."Document No.");
    END;

    [Test]
    [HandlerFunctions(UpdateQuantityPageHandler,PostAsShipAndConsumeHandler,ConfirmMessageHandler,PostedShipmentLineHandler)]
    PROCEDURE UndoConsumptionSingleLine@19();
    BEGIN
      // Test undo consumption for the Service Order consumed Quantity.

      UndoConsumptionServiceOrder;
    END;

    [Test]
    [HandlerFunctions(UpdateItemResourceHandler,PostAsShipAndConsumeHandler,ConfirmMessageHandler,ShipmentMultipleLinesHandler)]
    PROCEDURE UndoConsumptionMultipleLines@70();
    BEGIN
      // Test undo consumption for the Service Order with multiple Service Lines.

      UndoConsumptionServiceOrder;
    END;

    LOCAL PROCEDURE UndoConsumptionServiceOrder@112();
    VAR
      Customer@1005 : Record 18;
      ItemLedgerEntry@1002 : Record 32;
      PostedServiceShipment@1001 : TestPage 5975;
      No@1000 : Code[20];
      ServiceShipmentHeaderNo@1003 : Code[20];
      Quantity@1004 : Decimal;
      InvoicedQuantity@1006 : Decimal;
      ExpectedCost@1007 : Decimal;
      ActualCost@1008 : Decimal;
      ExpectedCostACY@1010 : Decimal;
      ActualCostACY@1009 : Decimal;
    BEGIN
      // 1. Setup: Create a Service Order.
      Initialize;
      LibrarySales.SetStockoutWarning(FALSE);
      LibrarySales.CreateCustomer(Customer);
      No := LibraryService.CreateServiceOrderHeaderUsingPage;
      CreateServiceItemLine(No,Customer."No.");
      OpenServiceLine(No);

      // 2. Exercise: Undo Consumption of the Service Order consumed Quantity.
      PostedServiceShipment.OPENVIEW;
      PostedServiceShipment.FILTER.SETFILTER("Order No.",No);
      ServiceShipmentHeaderNo := PostedServiceShipment."No.".VALUE;
      PostedServiceShipment.ServShipmentItemLines.ServiceShipmentLines.INVOKE;

      // 3. Verify: Verify the undone Qty Consumed through the handler.
      // VERIFY: All ledger entries generated after undo matchup
      ItemLedgerEntry.SETRANGE("Document No.",ServiceShipmentHeaderNo);
      ItemLedgerEntry.SETRANGE("Document Type",ItemLedgerEntry."Document Type"::"Service Shipment");
      ItemLedgerEntry.FINDSET;

      Quantity := 0;
      InvoicedQuantity := 0;
      ExpectedCost := 0;
      ActualCost := 0;
      REPEAT
        Quantity += ItemLedgerEntry.Quantity;
        InvoicedQuantity += ItemLedgerEntry."Invoiced Quantity";

        ItemLedgerEntry.CALCFIELDS("Cost Amount (Expected)");
        ExpectedCost += ItemLedgerEntry."Cost Amount (Expected)";

        ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual)");
        ActualCost += ItemLedgerEntry."Cost Amount (Actual)";

        ItemLedgerEntry.CALCFIELDS("Cost Amount (Expected) (ACY)");
        ExpectedCostACY += ItemLedgerEntry."Cost Amount (Expected) (ACY)";

        ItemLedgerEntry.CALCFIELDS("Cost Amount (Actual) (ACY)");
        ActualCostACY += ItemLedgerEntry."Cost Amount (Actual) (ACY)";

      UNTIL ItemLedgerEntry.NEXT = 0;

      Assert.AreEqual(0,Quantity,ItemLedgerEntry.FIELDCAPTION(Quantity));
      Assert.AreEqual(0,InvoicedQuantity,ItemLedgerEntry.FIELDCAPTION("Invoiced Quantity"));
      Assert.AreEqual(0,ExpectedCost,ItemLedgerEntry.FIELDCAPTION("Cost Amount (Expected)"));
      Assert.AreEqual(0,ExpectedCostACY,ItemLedgerEntry.FIELDCAPTION("Cost Amount (Expected) (ACY)"));
      Assert.AreEqual(0,ActualCost,ItemLedgerEntry.FIELDCAPTION("Cost Amount (Actual)"));
      Assert.AreEqual(0,ActualCostACY,ItemLedgerEntry.FIELDCAPTION("Cost Amount (Actual) (ACY)"));
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,MessageHandler,ConfirmMessageHandler,ServiceLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE UndoConsumptionSerialNumber@60();
    VAR
      ItemJournalLine@1000 : Record 83;
      ServiceItemLine@1002 : Record 5901;
      ServiceItem@1003 : Record 5940;
      ServiceHeader@1004 : Record 5900;
      Customer@1009 : Record 18;
      ItemJournal@1001 : TestPage 40;
      ServiceOrder@1007 : TestPage 5900;
      ServiceCreditMemo@1008 : TestPage 5935;
    BEGIN
      // Test undo consumption in the Service Order for Item with Serial No.

      // 1. Setup: Create Item, assign Serial No. on Item Journal Line and post it with Item Journal.
      // Create a Service Order and post it as Ship and Consume.
      Initialize;
      LibrarySales.CreateCustomer(Customer);
      CreateItemJournalLine(ItemJournalLine,CreateItemWithItemTrackingCode(FindItemTrackingCode(FALSE,TRUE)));

      ItemJournal.OPENEDIT;
      ItemJournal.CurrentJnlBatchName.SETVALUE(ItemJournalLine."Journal Batch Name");
      TrackingAction := TrackingAction::AssignSerialNo;  // Setting tracking action to execute Assign Serial No. Action on Item Tracking Lines Page.
      ItemJournal.ItemTrackingLines.INVOKE;
      ItemJournal.Post.INVOKE;
      LibraryUtility.GenerateGUID;  // Hack to fix problem with Generate GUID.
      LibraryService.CreateServiceItem(ServiceItem,Customer."No.");
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,ServiceItem."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");

      CreateServiceLine(ServiceHeader,ServiceItem."No.",ItemJournalLine."Item No.",ItemJournalLine.Quantity,ItemJournalLine.Quantity);
      TrackingAction := TrackingAction::SelectEntries;  // Setting tracking action to execute Select Entries Action on Item Tracking Lines Page.
      ServiceOrderPageOpenEdit(ServiceOrder,ServiceHeader."No.");
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);  // Post the Service Order as Ship and Consume.

      // 2. Exercise: Undo Consumption of the Quantity on Item Journal through posting the Service Credit Memo for it.
      CLEAR(ServiceHeader);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::"Credit Memo",ServiceItem."Customer No.");
      CreateServiceLine(ServiceHeader,ServiceItem."No.",ItemJournalLine."Item No.",ItemJournalLine.Quantity,0);  // Using Qty To Consume as 0.

      TrackingAction := TrackingAction::AssignSerialNo;  // Setting tracking action to execute Assign Serial No. Action on Item Tracking Lines Page.
      AssignSerialNumberToCreditMemo(ServiceCreditMemo,ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,FALSE,FALSE,FALSE);

      // 3. Verify: Verify that the Service Ledger Entry is created for the Service Credit Memo.
      VerifyCreditMemoServiceLedger(ServiceHeader."No.",ItemJournalLine.Quantity,ServiceItem."Customer No.");
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoGLAccountConsumption@95();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      TempServiceLineBeforePosting@1004 : TEMPORARY Record 5902;
      GLAccount@1000 : Record 15;
      ServiceShipmentHeaderNo@1005 : Code[20];
    BEGIN
      // Undo Quantity to Consume on Service Line with Type G/L Account.
      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Order.
      CreateServiceHeader(ServiceHeader);
      GLAccount.GET(LibraryERM.CreateGLAccountWithSalesSetup);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLineWithQuantity(
        ServiceLine,ServiceHeader,ServiceLine.Type::"G/L Account",
        GLAccount."No.",LibraryRandom.RandIntInRange(10,20));
      CheckGeneralPostingSetupExists(ServiceLine);

      // 3. Excercise: ship and consume and undo
      UpdatePriceAndQtyToConsume(ServiceLine,ServiceLine.Quantity - 2);
      InsertServiceLinesIntoTemp(ServiceLine,TempServiceLineBeforePosting);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      ServiceShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");
      UndoConsumptionByShipmentHeader(ServiceShipmentHeaderNo);

      // 5. verify GL entries are not created by undo (TFS 202716)
      VerifyGLAndVATEntriesForDocumentAreEmpty(ServiceShipmentHeaderNo);
      VerifyServiceLedgerEntriesAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,TRUE);
      VerifyServiceShipmentLineAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,TRUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoGLAccountConsumptionWithMultipleShipments@186();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      TempServiceLineBeforePosting@1004 : TEMPORARY Record 5902;
      ServiceShipmentHeader@1006 : Record 5990;
      ServiceShipmentLine@1007 : Record 5991;
      ServiceShipmentHeaderNo@1005 : Code[20];
    BEGIN
      // Undo Quantity to Consume on Service Line with multiple shipments.
      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Order.
      CreateServiceHeader(ServiceHeader);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLineWithQuantity(
        ServiceLine,ServiceHeader,ServiceLine.Type::"G/L Account",LibraryERM.CreateGLAccountWithSalesSetup,
        LibraryRandom.RandIntInRange(10,20));
      CheckGeneralPostingSetupExists(ServiceLine);

      // 3. Excercise: ship and consume twice and undo once
      UpdatePriceAndQtyToConsume(ServiceLine,LibraryRandom.RandInt(ServiceLine.Quantity - 2));
      InsertServiceLinesIntoTemp(ServiceLine,TempServiceLineBeforePosting);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      FindServiceLinesByHeaderNo(ServiceLine,ServiceHeader);
      ServiceLine.VALIDATE("Qty. to Consume",1);
      ServiceLine.MODIFY(TRUE);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      ServiceShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");
      UndoConsumptionByShipmentHeader(ServiceShipmentHeaderNo);

      // 5. verify GL entries are not created, service ledger entries, shipment and service lines are created after undo
      VerifyGLAndVATEntriesForDocumentAreEmpty(ServiceShipmentHeaderNo);
      VerifyServiceLedgerEntriesAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,TRUE);
      VerifyServiceShipmentLineAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,TRUE);
      FindServiceLinesByHeaderNo(ServiceLine,ServiceHeader);

      ServiceLine.TESTFIELD("Quantity Consumed",1);
      ServiceShipmentHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceShipmentHeader.FINDLAST;
      ServiceShipmentHeaderNo := ServiceShipmentHeader."No.";

      WITH ServiceShipmentLine DO BEGIN
        SETRANGE("Order Line No.",ServiceLine."Line No.");
        SETRANGE("Document No.",ServiceShipmentHeaderNo);
        FINDLAST;
        TESTFIELD("Quantity Consumed",1);
        TESTFIELD(Quantity,1);
      END;
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoGLAccountConsumptionNonLCY@154();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1001 : Record 5902;
      TempServiceLineBeforePosting@1004 : TEMPORARY Record 5902;
      ServiceShipmentHeaderNo@1005 : Code[20];
    BEGIN
      // Undo Quantity to Consume on Service Line with Type G/L Account with non lcy customer.
      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Order.
      CreateServiceOrderWithCurrency(ServiceHeader);
      CreateServiceLineWithQuantity(ServiceLine,ServiceHeader,ServiceLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithSalesSetup,LibraryRandom.RandIntInRange(10,20));
      CheckGeneralPostingSetupExists(ServiceLine);

      // 3. Excercise: ship and consume and undo
      UpdatePriceAndQtyToConsume(ServiceLine,ServiceLine.Quantity - 2);
      InsertServiceLinesIntoTemp(ServiceLine,TempServiceLineBeforePosting);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      ServiceShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");
      UndoConsumptionByShipmentHeader(ServiceShipmentHeaderNo);

      // 5. verify GL entries are not created by undo
      VerifyServiceLedgerEntriesAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,TRUE);
      VerifyGLAndVATEntriesForDocumentAreEmpty(ServiceShipmentHeaderNo);
      VerifyServiceShipmentLineAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,TRUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoGLAccountConsumptionWithLineDiscountNonLCY@93();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1001 : Record 5902;
      TempServiceLineBeforePosting@1004 : TEMPORARY Record 5902;
      ServiceShipmentHeaderNo@1005 : Code[20];
    BEGIN
      // Undo Quantity to Consume on Service Line with Type G/L Account with non lcy customer.
      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Order.
      CreateServiceOrderWithCurrency(ServiceHeader);
      CreateServiceLineWithQuantity(ServiceLine,ServiceHeader,ServiceLine.Type::"G/L Account",
        LibraryERM.CreateGLAccountWithSalesSetup,LibraryRandom.RandIntInRange(10,20));
      CheckGeneralPostingSetupExists(ServiceLine);

      // 3. Excercise: ship and consume and undo
      UpdatePriceAndQtyToConsume(ServiceLine,ServiceLine.Quantity - 2);
      ServiceLine.VALIDATE("Line Discount %",LibraryRandom.RandInt(10));
      ServiceLine.MODIFY(TRUE);

      InsertServiceLinesIntoTemp(ServiceLine,TempServiceLineBeforePosting);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      ServiceShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");
      UndoConsumptionByShipmentHeader(ServiceShipmentHeaderNo);

      // 5. verify GL entries are not created by undo
      VerifyGLAndVATEntriesForDocumentAreEmpty(ServiceShipmentHeaderNo);
      VerifyServiceShipmentLineAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,TRUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoCostConsumption@102();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      ServiceCost@1000 : Record 5905;
      TempServiceLineBeforePosting@1006 : TEMPORARY Record 5902;
      ServiceShipmentHeaderNo@1004 : Code[20];
    BEGIN
      // Test undo consumption on Service Line with Type Cost.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Order.
      CreateServiceCost(ServiceCost);
      CreateServiceHeader(ServiceHeader);

      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLineWithQuantity(
        ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code,LibraryRandom.RandIntInRange(10,20));
      CheckGeneralPostingSetupExists(ServiceLine);

      UpdatePriceAndQtyToConsume(ServiceLine,ServiceLine.Quantity - 1);
      InsertServiceLinesIntoTemp(ServiceLine,TempServiceLineBeforePosting);

      // 3. Excercise: ship and consume and undo
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      ServiceShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");
      UndoConsumptionByShipmentHeader(ServiceShipmentHeaderNo);

      // 5. verify GL entries are not created, service ledger entries and shipment entries are created
      VerifyServiceLedgerEntriesAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,TRUE);
      VerifyServiceShipmentLineAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,TRUE);
      VerifyGLAndVATEntriesForDocumentAreEmpty(ServiceShipmentHeaderNo);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoCostConsumptionWithMultipleShipments@110();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      ServiceLine@1001 : Record 5902;
      ServiceCost@1000 : Record 5905;
      TempServiceLineBeforePosting@1006 : TEMPORARY Record 5902;
      ServiceShipmentHeader@1007 : Record 5990;
      ServiceShipmentLine@1005 : Record 5991;
      ServiceShipmentHeaderNo@1004 : Code[20];
    BEGIN
      // Test undo consumption on Service Line with Type Cost with mulitple shipments.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Order.
      CreateServiceCost(ServiceCost);
      CreateServiceHeader(ServiceHeader);

      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLineWithQuantity(
        ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code,LibraryRandom.RandIntInRange(10,20));
      CheckGeneralPostingSetupExists(ServiceLine);

      UpdatePriceAndQtyToConsume(ServiceLine,ServiceLine.Quantity - 2);
      InsertServiceLinesIntoTemp(ServiceLine,TempServiceLineBeforePosting);

      // 3. Excercise: ship and consume and undo
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      FindServiceLinesByHeaderNo(ServiceLine,ServiceHeader);
      ServiceLine.VALIDATE("Qty. to Consume",1);
      ServiceLine.MODIFY(TRUE);
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      ServiceShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");
      UndoConsumptionByShipmentHeader(ServiceShipmentHeaderNo);

      // 5. verify GL entries are not created, service ledger entries and shipment entries are created.
      VerifyGLAndVATEntriesForDocumentAreEmpty(ServiceShipmentHeaderNo);
      VerifyServiceLedgerEntriesAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,TRUE);
      VerifyServiceShipmentLineAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,TRUE);

      FindServiceLinesByHeaderNo(ServiceLine,ServiceHeader);

      ServiceLine.TESTFIELD("Quantity Consumed",1);
      ServiceShipmentHeader.SETRANGE("Order No.",ServiceHeader."No.");
      ServiceShipmentHeader.FINDLAST;
      ServiceShipmentHeaderNo := ServiceShipmentHeader."No.";

      WITH ServiceShipmentLine DO BEGIN
        SETRANGE("Order Line No.",ServiceLine."Line No.");
        SETRANGE("Document No.",ServiceShipmentHeaderNo);
        FINDLAST;
        TESTFIELD("Quantity Consumed",1);
        TESTFIELD(Quantity,1);
      END;
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoCostConsumptionNonLCY@160();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1001 : Record 5902;
      ServiceCost@1000 : Record 5905;
      TempServiceLineBeforePosting@1006 : TEMPORARY Record 5902;
      ServiceShipmentHeaderNo@1004 : Code[20];
    BEGIN
      // Test undo consumption on Service Line with Type Cost on a non lcy order.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Order.
      CreateServiceCost(ServiceCost);
      CreateServiceOrderWithCurrency(ServiceHeader);
      CreateServiceLineWithQuantity(
        ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code,LibraryRandom.RandIntInRange(10,20));
      CheckGeneralPostingSetupExists(ServiceLine);

      UpdatePriceAndQtyToConsume(ServiceLine,ServiceLine.Quantity - 1);
      InsertServiceLinesIntoTemp(ServiceLine,TempServiceLineBeforePosting);

      // 3. Excercise: ship and consume and undo
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      ServiceShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");
      UndoConsumptionByShipmentHeader(ServiceShipmentHeaderNo);

      // 5. verify GL entries are not created, service ledger entries and shipment entries are created.
      VerifyGLAndVATEntriesForDocumentAreEmpty(ServiceShipmentHeaderNo);
      VerifyServiceLedgerEntriesAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,TRUE);
      VerifyServiceShipmentLineAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,TRUE);
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoCostConsumptionWithLineDiscountNonLCY@98();
    VAR
      ServiceHeader@1003 : Record 5900;
      ServiceLine@1001 : Record 5902;
      ServiceCost@1000 : Record 5905;
      TempServiceLineBeforePosting@1006 : TEMPORARY Record 5902;
      ServiceShipmentHeaderNo@1004 : Code[20];
    BEGIN
      // Test undo consumption on Service Line with Type Cost on a non lcy order.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Service Order.
      CreateServiceCost(ServiceCost);
      CreateServiceOrderWithCurrency(ServiceHeader);
      CreateServiceLineWithQuantity(
        ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code,LibraryRandom.RandIntInRange(10,20));
      CheckGeneralPostingSetupExists(ServiceLine);

      UpdatePriceAndQtyToConsume(ServiceLine,ServiceLine.Quantity - 1);
      ServiceLine.VALIDATE("Line Discount %",LibraryRandom.RandInt(10));
      ServiceLine.MODIFY(TRUE);

      InsertServiceLinesIntoTemp(ServiceLine,TempServiceLineBeforePosting);

      // 3. Excercise: ship and consume and undo
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      ServiceShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");
      UndoConsumptionByShipmentHeader(ServiceShipmentHeaderNo);

      // 4. verify GL entries are not created, service ledger entries and shipment entries are created.
      VerifyGLAndVATEntriesForDocumentAreEmpty(ServiceShipmentHeaderNo);
      VerifyServiceShipmentLineAfterConsumption(TempServiceLineBeforePosting,ServiceShipmentHeaderNo,TRUE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ServiceLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ConsumeMoreThanAvailableQuantity@144();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      ServiceHeader@1007 : Record 5900;
      ServiceItemLine@1008 : Record 5901;
      ServiceLine@1009 : Record 5902;
    BEGIN
      // Test error occurs on updating Qty. to Consume on Service Line greater than available Quantity after posting Service Order as Ship.

      // 1. Setup: Create Purchase Order, assign Item Tracking on Purchase Line, Post it as Receive, Create Service Order, select Item Tracking for Service Line
      // and Post Service Order as Ship.
      Initialize;
      CreatePurchaseHeader(PurchaseHeader);

      // Use random for Quantity.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItemWithItemTrackingCode(FindItemTrackingCode(FALSE,TRUE)),
        LibraryRandom.RandInt(10));

      TrackingAction := TrackingAction::AssignSerialNo;  // Assign global variable for page handler.
      OpenItemTrackingLinesForPurchaseOrder(PurchaseHeader."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      CreateServiceHeader(ServiceHeader);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLineWithoutLocation(ServiceLine,ServiceHeader,PurchaseLine."No.");
      UpdateQtyToInvoice(ServiceLine,ServiceItemLine."Line No.",PurchaseLine.Quantity + 1,PurchaseLine.Quantity);  // 1 is important for test case.

      TrackingAction := TrackingAction::SelectEntries;  // Assign global variable for page handler.
      OpenServiceLine(ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,FALSE,FALSE);

      // 2. Exercise: Update Qty. to Consume on Service Line greater than available Quantity.
      ServiceLine.GET(ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.");
      ASSERTERROR
        ServiceLine.VALIDATE(
          "Qty. to Consume",
          ServiceLine.Quantity - ServiceLine."Quantity Shipped" + LibraryRandom.RandInt(10));

      // 3. Verify: Verify error occurs "You cannot consume more than".
      Assert.ExpectedError(ConsumeQuantityError);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ServiceLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ConsumeWithSerialNo@40();
    BEGIN
      // Test Posted Entries after posting Service Order as Ship and Consume with Item having Item Tracking Code for Serial No.

      ConsumeWithItemTracking(CreateItemWithItemTrackingCode(FindItemTrackingCode(FALSE,TRUE)),FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ServiceLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ConsumeWithSerialAndLotNo@75();
    BEGIN
      // Test Posted Entries after posting Service Order as Ship and Consume with Item having Item Tracking Code for Serial and Lot No.

      ConsumeWithItemTracking(CreateItemWithItemTrackingCode(CreateItemTrackingCode(TRUE,TRUE)),TRUE);
    END;

    LOCAL PROCEDURE ConsumeWithItemTracking@200(ItemNo@1017 : Code[20];CreateNewLotNo@1018 : Boolean);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      ServiceHeader@1007 : Record 5900;
      ServiceItemLine@1008 : Record 5901;
      ServiceLine@1009 : Record 5902;
      ShipmentHeaderNo@1002 : Code[20];
    BEGIN
      // 1. Setup: Create Purchase Order, assign Item Tracking on Purchase Line and Post it as Receive.
      Initialize;
      CreatePurchaseHeader(PurchaseHeader);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,LibraryRandom.RandInt(10));  // Use random for Quantity.

      // Assign global variables for page handler.
      TrackingAction := TrackingAction::AssignSerialNo;
      CreateLotNo := CreateNewLotNo;
      OpenItemTrackingLinesForPurchaseOrder(PurchaseHeader."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // 2. Exercise: Create Service Order, select Item Tracking for Service Line and Post it as Ship and Consume.
      CreateServiceHeader(ServiceHeader);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLineWithoutLocation(ServiceLine,ServiceHeader,PurchaseLine."No.");
      UpdateQtyToShipOnServiceLine(ServiceLine,ServiceItemLine."Line No.",PurchaseLine.Quantity,PurchaseLine.Quantity);

      TrackingAction := TrackingAction::SelectEntries;  // Assign global variable for page handler.
      OpenServiceLine(ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify Service Ledger Entry, Value Entry and Item Ledger Entry.
      ShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");
      VerifyLedgerEntryAfterPosting(ShipmentHeaderNo,PurchaseLine."No.",PurchaseLine.Quantity);
      VerifyNoOfValueEntry(ShipmentHeaderNo,PurchaseLine.Quantity);
      VerifyNoOfItemLedgerEntry(ShipmentHeaderNo,PurchaseLine."No.",PurchaseLine.Quantity);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ServiceLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE ConsumeWithLotNo@39();
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      ServiceHeader@1007 : Record 5900;
      ServiceItemLine@1008 : Record 5901;
      ServiceLine@1009 : Record 5902;
      ShipmentHeaderNo@1002 : Code[20];
    BEGIN
      // Test Posted Entries after posting Service Order as Ship and Consume with Item having Item Tracking Code for Lot No.

      // 1. Setup: Create Purchase Order, assign Item Tracking on Purchase Line and Post it as Receive.
      Initialize;
      CreatePurchaseHeader(PurchaseHeader);

      // Use random for Quantity.
      LibraryPurchase.CreatePurchaseLine(
        PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,CreateItemWithItemTrackingCode(FindItemTrackingCode(TRUE,FALSE)),
        LibraryRandom.RandInt(10));

      TrackingAction := TrackingAction::AssignLotNo;  // Assign global variable for page handler.
      OpenItemTrackingLinesForPurchaseOrder(PurchaseHeader."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // 2. Exercise: Create Service Order, select Item Tracking for Service Line and Post it as Ship and Consume.
      CreateServiceHeader(ServiceHeader);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLineWithoutLocation(ServiceLine,ServiceHeader,PurchaseLine."No.");
      UpdateQtyToShipOnServiceLine(ServiceLine,ServiceItemLine."Line No.",PurchaseLine.Quantity,PurchaseLine.Quantity);

      TrackingAction := TrackingAction::SelectEntries;  // Assign global variable for page handler.
      OpenServiceLine(ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify Service Ledger Entry, Value Entry and Item Ledger Entry.
      ShipmentHeaderNo := FindServiceShipmentHeader(ServiceHeader."No.");
      VerifyLedgerEntryAfterPosting(ShipmentHeaderNo,PurchaseLine."No.",PurchaseLine.Quantity);

      // Use 1 for Lot No.
      VerifyNoOfValueEntry(ShipmentHeaderNo,1);
      VerifyNoOfItemLedgerEntry(ShipmentHeaderNo,PurchaseLine."No.",1);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ServiceLinesPageHandler,ItemTrackingSummaryPageHandler,PostedServiceShipmentLinesHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE ItemTrackingOnShipmentWithSerialNo@87();
    BEGIN
      // Test Item Tracking Entry on Posted Service Shipment after Posting Service Order with Item having Item Tracking Code for Serial No.

      ItemTrackingOnShipment(CreateItemWithItemTrackingCode(FindItemTrackingCode(FALSE,TRUE)),TrackingAction::AssignSerialNo,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ServiceLinesPageHandler,ItemTrackingSummaryPageHandler,PostedServiceShipmentLinesHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE ItemTrackingOnShipmentWithLotNo@66();
    BEGIN
      // Test Item Tracking Entry on Posted Service Shipment after Posting Service Order with Item having Item Tracking Code for Lot No.

      ItemTrackingOnShipment(CreateItemWithItemTrackingCode(FindItemTrackingCode(TRUE,FALSE)),TrackingAction::AssignLotNo,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ServiceLinesPageHandler,ItemTrackingSummaryPageHandler,PostedServiceShipmentLinesHandler,PostedItemTrackingLinesHandler)]
    PROCEDURE ItemTrackingOnShipmentWithSerialAndLotNo@58();
    BEGIN
      // Test Item Tracking Entry on Posted Service Shipment after Posting Service Order with Item having Item Tracking Code for Serial and Lot No.

      ItemTrackingOnShipment(CreateItemWithItemTrackingCode(CreateItemTrackingCode(TRUE,TRUE)),TrackingAction::AssignSerialNo,TRUE);
    END;

    LOCAL PROCEDURE ItemTrackingOnShipment@56(ItemNo@1016 : Code[20];TrackingActionFrom@1020 : Option;CreateNewLotNo@1021 : Boolean);
    VAR
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      ServiceHeader@1007 : Record 5900;
      ServiceItemLine@1008 : Record 5901;
      ServiceLine@1009 : Record 5902;
      PostedServiceShipment@1017 : TestPage 5975;
    BEGIN
      // 1. Setup: Create Purchase Order, assign Item Tracking on Purchase Line and Post it as Receive.
      Initialize;
      CreatePurchaseHeader(PurchaseHeader);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,1);  // 1 is important for test case.

      // Assign global variables for page handler.
      TrackingAction := TrackingActionFrom;
      CreateLotNo := CreateNewLotNo;
      OpenItemTrackingLinesForPurchaseOrder(PurchaseHeader."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      // Find Item Ledger Entry for page handler.
      ItemLedgerEntry.SETRANGE("Item No.",PurchaseLine."No.");
      ItemLedgerEntry.FINDFIRST;

      // 2. Exercise: Create Service Order, select Item Tracking for Service Line, Post it as Ship and Consume.
      CreateServiceHeader(ServiceHeader);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLineWithoutLocation(ServiceLine,ServiceHeader,PurchaseLine."No.");
      UpdateQtyToShipOnServiceLine(ServiceLine,ServiceItemLine."Line No.",PurchaseLine.Quantity,PurchaseLine.Quantity);

      TrackingAction := TrackingAction::SelectEntries;  // Assign global variable for page handler.
      OpenServiceLine(ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);

      // 3. Verify: Verify Item tracking Entry on Posted Service Shipment performed on Posted Item Tracking Lines handler.
      PostedServiceShipment.OPENVIEW;
      PostedServiceShipment.FILTER.SETFILTER("No.",FindServiceShipmentHeader(ServiceHeader."No."));
      PostedServiceShipment.ServShipmentItemLines.ServiceShipmentLines.INVOKE;
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ServiceLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE UndoConsumptionPostingWithSerialNo@72();
    BEGIN
      // Test Undo Consumption after posting Service Order as Ship and Consume with Item having Item Tracking Code for Serial No.

      UndoConsumptionPostingWithItemTracking(
        CreateItemWithItemTrackingCode(FindItemTrackingCode(FALSE,TRUE)),TrackingAction::AssignSerialNo,FALSE,TRUE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ServiceLinesPageHandler,ItemTrackingSummaryPageHandler,ConfirmYesHandler)]
    PROCEDURE UndoConsumptionPostingWithSerialNoWithoutCrMemo@78();
    BEGIN
      // Test Undo Consumption after posting Service Order as Ship and Consume with Item having Item Tracking Code for Serial No.

      UndoConsumptionPostingWithItemTracking(
        CreateItemWithItemTrackingCode(FindItemTrackingCode(FALSE,TRUE)),TrackingAction::AssignSerialNo,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ServiceLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE UndoConsumptionPostingWithLotNo@147();
    BEGIN
      // Test Undo Consumption after posting Service Order as Ship and Consume with Item having Item Tracking Code for Lot No.

      UndoConsumptionPostingWithItemTracking(
        CreateItemWithItemTrackingCode(FindItemTrackingCode(TRUE,FALSE)),TrackingAction::AssignLotNo,FALSE,TRUE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,ServiceLinesPageHandler,ItemTrackingSummaryPageHandler,ConfirmYesHandler)]
    PROCEDURE UndoConsumptionPostingWithLotNoWithoutCrMemo@84();
    BEGIN
      // Test Undo Consumption after posting Service Order as Ship and Consume with Item having Item Tracking Code for Lot No.

      UndoConsumptionPostingWithItemTracking(
        CreateItemWithItemTrackingCode(FindItemTrackingCode(TRUE,FALSE)),TrackingAction::AssignLotNo,FALSE,FALSE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ServiceLinesPageHandler,ItemTrackingSummaryPageHandler)]
    PROCEDURE UndoConsumptionPostingWithSerialAndLotNo@155();
    BEGIN
      // Test Undo Consumption after posting Service Order as Ship and Consume with Item having Item Tracking Code for Serial and Lot No.

      UndoConsumptionPostingWithItemTracking(
        CreateItemWithItemTrackingCode(FindItemTrackingCode(TRUE,TRUE)),TrackingAction::AssignSerialNo,TRUE,TRUE);
    END;

    [Test]
    [HandlerFunctions(ItemTrackingPageHandler,QuantityToCreatePageHandler,ServiceLinesPageHandler,ItemTrackingSummaryPageHandler,ConfirmYesHandler)]
    PROCEDURE UndoConsumptionPostingWithSerialAndLotNoWithoutCrMemo@85();
    BEGIN
      // Test Undo Consumption after posting Service Order as Ship and Consume with Item having Item Tracking Code for Serial and Lot No.

      UndoConsumptionPostingWithItemTracking(
        CreateItemWithItemTrackingCode(FindItemTrackingCode(TRUE,TRUE)),TrackingAction::AssignSerialNo,TRUE,FALSE);
    END;

    [Test]
    PROCEDURE EnterCostWithAccountCombineFullVATInService@88();
    VAR
      Customer@1000 : Record 18;
      ServiceHeader@1001 : Record 5900;
      ServiceLine@1003 : Record 5902;
      ServiceCost@1004 : Record 5905;
    BEGIN
      // Test cost with Full VAT calculate type account can be entered in Service Line.

      // 1. Setup: Create a customer.
      Initialize;
      LibrarySales.CreateCustomer(Customer);

      // Create VAT Prod Posting Group, create VAT Posting Setup, create a G/L account combine Full VAT, create a Service Cost.
      CreateServiceCostWithAccountCombineFullVAT(ServiceCost,Customer."VAT Bus. Posting Group");

      // Create Service Header with Service Item Line.
      CreateServiceHeaderWithServiceItemLine(ServiceHeader,Customer."No.");

      // 2. Exercise & Verify: Enter cost in Service Line - Verify no error.
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Cost,ServiceCost.Code);
    END;

    LOCAL PROCEDURE UndoConsumptionPostingWithItemTracking@79(ItemNo@1023 : Code[20];TrackingActionFrom@1024 : Option;CreateNewLotNo@1025 : Boolean;UseCrMemo@1002 : Boolean);
    VAR
      ItemLedgerEntry2@1022 : Record 32;
      SalesHeader@1016 : Record 36;
      SalesLine@1020 : Record 37;
      PurchaseHeader@1000 : Record 38;
      PurchaseLine@1001 : Record 39;
      ServiceHeader@1007 : Record 5900;
      ServiceItemLine@1008 : Record 5901;
      ServiceLine@1009 : Record 5902;
      ServiceShipmentLine@1003 : Record 5991;
      ServiceShipmentLine2@1004 : Record 5991;
      EntryNo@1026 : Integer;
    BEGIN
      // 1. Setup: Create Purchase Order, assign Item Tracking on Purchase Line, Post it as Receive, Create Service Order, select Item Tracking for
      // Service Line and Post it as Ship and Consume.
      Initialize;
      CreatePurchaseHeader(PurchaseHeader);
      LibraryPurchase.CreatePurchaseLine(PurchaseLine,PurchaseHeader,PurchaseLine.Type::Item,ItemNo,1);  // 1 is important for test case.

      // Assign global variables for page handler.
      TrackingAction := TrackingActionFrom;
      CreateLotNo := CreateNewLotNo;
      OpenItemTrackingLinesForPurchaseOrder(PurchaseHeader."No.");
      LibraryPurchase.PostPurchaseDocument(PurchaseHeader,TRUE,FALSE);

      CreateServiceHeader(ServiceHeader);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLineWithoutLocation(ServiceLine,ServiceHeader,PurchaseLine."No.");
      UpdateQtyToShipOnServiceLine(ServiceLine,ServiceItemLine."Line No.",PurchaseLine.Quantity + LibraryRandom.RandInt(10),1);  // 1 is important for test case.

      TrackingAction := TrackingAction::SelectEntries;  // Assign global variable for page handler.
      OpenServiceLine(ServiceHeader."No.");
      LibraryService.PostServiceOrder(ServiceHeader,TRUE,TRUE,FALSE);
      EntryNo := FindItemLedgerEntryNo(ServiceLine."No.",ServiceHeader."No.");

      // 2. Exercise: a) Create Sales Credit Memo, assign Item Tracking Entries same as on Service Line and Post it  OR
      // b) Use the bulit-in undo consumption functionality  from posted service shipment
      IF UseCrMemo THEN BEGIN
        LibrarySales.CreateSalesHeader(SalesHeader,SalesHeader."Document Type"::"Credit Memo",ServiceHeader."Customer No.");
        LibrarySales.CreateSalesLine(SalesLine,SalesHeader,SalesLine.Type::Item,ServiceLine."No.",1);  // 1 is important for test case.

        TrackingAction := TrackingAction::EnterValues;  // Assign global variable for page handler.
        OpenItemTrackingLinesForSalesCreditMemo(SalesHeader."No.");
        LibrarySales.PostSalesDocument(SalesHeader,FALSE,FALSE);
      END ELSE BEGIN
        ServiceShipmentLine.FINDLAST;
        ServiceShipmentLine.SETRECFILTER;
        CODEUNIT.RUN(CODEUNIT::"Undo Service Consumption Line",ServiceShipmentLine);
      END;
      // 3. Verify: Verify Item Ledger Entry for Undo Consumption.
      ItemLedgerEntry2.GET(EntryNo);
      ItemLedgerEntry2.TESTFIELD("Shipped Qty. Not Returned",0);
      IF NOT UseCrMemo THEN BEGIN
        ServiceShipmentLine2 := ServiceShipmentLine;
        ServiceShipmentLine2.NEXT;
        ServiceShipmentLine2.TESTFIELD(Quantity,-ServiceShipmentLine.Quantity);
        // Value entries:
        VerifyValueEntries;
      END;
    END;

    [Test]
    [HandlerFunctions(ConfirmMessageHandler)]
    PROCEDURE UndoConsumptionPostPartiallyWithResource@71();
    VAR
      ServiceHeader@1001 : Record 5900;
      ServiceItemLine@1002 : Record 5901;
      TempServiceLine@1003 : TEMPORARY Record 5902;
    BEGIN
      // [FEATURE] [Undo Consumption] [Service Shipment]
      // [SCENARIO 211138] Undoing consumption should create service shipment line and resource ledger entry with opposite quantity and same posting date as on the original service shipment line.
      Initialize;

      // [GIVEN] Service Order with posting date = WORKDATE.
      CreateServiceOrder(ServiceHeader,ServiceItemLine);

      // [GIVEN] Service lines are set to be partially consumed.
      UpdatePartialQtyOnServiceLines(ServiceItemLine);

      // [GIVEN] Posting Date on the service lines are set to "D" > WORKDATE.
      UpdatePostingDateOnServiceLines(ServiceItemLine,LibraryRandom.RandDateFrom(ServiceHeader."Posting Date",30));
      SaveServiceLineInTempTable(TempServiceLine,ServiceItemLine);

      // [GIVEN] The service lines are posted with Ship and Consume option.
      LibraryService.PostServiceOrderWithPassedLines(ServiceHeader,TempServiceLine,TRUE,TRUE,FALSE);

      // [WHEN] Undo consumption.
      UndoConsumption(ServiceItemLine."Document No.");

      // [THEN] Posting Date on reversed resource ledger entries is equal to "D".
      VerifyResourceEntriesAfterUndo(TempServiceLine."Document No.");
    END;

    LOCAL PROCEDURE Initialize@35();
    VAR
      LibraryERMCountryData@1001 : Codeunit 131305;
    BEGIN
      // Initialize global variables.
      CLEAR(CreateLotNo);
      CLEAR(TrackingAction);
      Quantity := 0;

      LibrarySetupStorage.Restore;

      IF IsInitialized THEN
        EXIT;

      // Create Demonstration Database
      LibraryService.SetupServiceMgtNoSeries;
      LibraryERMCountryData.CreateVATData;
      LibraryERMCountryData.UpdateSalesReceivablesSetup;
      LibraryERMCountryData.UpdateGeneralPostingSetup;

      LibrarySetupStorage.Save(DATABASE::"Inventory Setup");

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE VerifyValueEntries@97();
    VAR
      ValueEntry@1000 : Record 5802;
      ValueEntry2@1001 : Record 5802;
    BEGIN
      ValueEntry.FIND('+');
      ValueEntry2 := ValueEntry;
      ValueEntry.NEXT(-1);
      ValueEntry.TESTFIELD("Valued Quantity",-ValueEntry2."Valued Quantity");
      ValueEntry.TESTFIELD("Item Ledger Entry Quantity",-ValueEntry2."Invoiced Quantity");
      ValueEntry.TESTFIELD("Invoiced Quantity",-ValueEntry2."Invoiced Quantity");
    END;

    LOCAL PROCEDURE AssignSerialNumberToCreditMemo@52(VAR ServiceCreditMemo@1000 : TestPage 5935;No@1001 : Code[20]);
    BEGIN
      ServiceCreditMemo.OPENEDIT;
      ServiceCreditMemo.FILTER.SETFILTER("No.",No);
      ServiceCreditMemo.ServLines.ItemTrackingLines.INVOKE;
    END;

    LOCAL PROCEDURE CreateItemJournalBatch@63(VAR ItemJournalBatch@1000 : Record 233);
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      ItemJournalTemplate.SETRANGE(Recurring,FALSE);
      ItemJournalTemplate.SETRANGE(Type,ItemJournalTemplate.Type::Item);
      LibraryInventory.FindItemJournalTemplate(ItemJournalTemplate);
      LibraryInventory.CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplate.Name);
    END;

    LOCAL PROCEDURE CreateItemJournalLine@30(VAR ItemJournalLine@1000 : Record 83;ItemNo@1002 : Code[20]);
    VAR
      ItemJournalBatch@1001 : Record 233;
    BEGIN
      CreateItemJournalBatch(ItemJournalBatch);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name,ItemJournalLine."Entry Type"::Purchase,
        ItemNo,LibraryRandom.RandInt(10));  // Use integer Random Value for Quantity for Item Tracking.

      // Validate Document No. as combination of Journal Batch Name and Line No.
      ItemJournalLine.VALIDATE("Document No.",ItemJournalLine."Journal Batch Name" + FORMAT(ItemJournalLine."Line No."));
      ItemJournalLine.MODIFY(TRUE);
      COMMIT;
    END;

    LOCAL PROCEDURE CreateItemWithItemTrackingCode@64(ItemCategoryCode@1002 : Code[10]) : Code[20];
    VAR
      Item@1001 : Record 27;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Item Tracking Code",ItemCategoryCode);
      Item.VALIDATE("Serial Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.VALIDATE("Lot Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    LOCAL PROCEDURE CreateItemTrackingCode@48(LotSpecific@1001 : Boolean;SNSpecific@1003 : Boolean) : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      LibraryItemTracking.CreateItemTrackingCode(ItemTrackingCode,FALSE,FALSE);
      ItemTrackingCode.VALIDATE("Lot Sales Inbound Tracking",LotSpecific);
      ItemTrackingCode.VALIDATE("Lot Sales Outbound Tracking",LotSpecific);
      ItemTrackingCode.VALIDATE("SN Sales Inbound Tracking",SNSpecific);
      ItemTrackingCode.VALIDATE("SN Sales Outbound Tracking",SNSpecific);
      ItemTrackingCode.VALIDATE("Man. Expir. Date Entry Reqd.",FALSE);
      ItemTrackingCode.VALIDATE("Man. Warranty Date Entry Reqd.",FALSE);
      ItemTrackingCode.MODIFY;
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE CreateLineForDifferentTypes@54(VAR ServiceLines@1000 : TestPage 5905;Type@1004 : Option;No@1005 : Code[20];Quantity2@1006 : Decimal);
    BEGIN
      ServiceLines.Type.SETVALUE(Type);
      ServiceLines."No.".SETVALUE(No);
      ServiceLines.Quantity.SETVALUE(Quantity2);
      ServiceLines."Qty. to Consume".SETVALUE(Quantity2 / 2);  // Using partial value for Qty to Consume.
    END;

    LOCAL PROCEDURE CreatePurchaseHeader@45(VAR PurchaseHeader@1000 : Record 38);
    BEGIN
      LibraryPurchase.CreatePurchHeader(PurchaseHeader,PurchaseHeader."Document Type"::Order,'');
      PurchaseHeader.VALIDATE("Location Code",'');
      PurchaseHeader.VALIDATE("Expected Receipt Date",WORKDATE);
      PurchaseHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceHeader@32(VAR ServiceHeader@1000 : Record 5900);
    VAR
      Customer@1001 : Record 18;
    BEGIN
      LibrarySales.CreateCustomer(Customer);
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,Customer."No.");
      ServiceHeader.VALIDATE("Location Code",'');
      ServiceHeader.VALIDATE("Posting Date",WORKDATE);
      ServiceHeader.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceHeaderWithServiceItemLine@94(VAR ServiceHeader@1000 : Record 5900;CustomerNo@1002 : Code[20]);
    VAR
      ServiceItemLine@1001 : Record 5901;
    BEGIN
      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,CustomerNo);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
    END;

    LOCAL PROCEDURE CreateServiceItemLine@128(No@1005 : Code[20];CustomerNo@1002 : Code[20]);
    VAR
      ServiceItem@1003 : Record 5940;
      ServiceOrder@1001 : TestPage 5900;
    BEGIN
      LibraryService.CreateServiceItem(ServiceItem,CustomerNo);
      ServiceOrderPageOpenEdit(ServiceOrder,No);
      ServiceOrder."Customer No.".SETVALUE(CustomerNo);
      ServiceOrder.ServItemLines.ServiceItemNo.SETVALUE(ServiceItem."No.");
      ServiceOrder.ServItemLines.NEW;
      ServiceOrder.OK.INVOKE;
    END;

    LOCAL PROCEDURE CreateServiceLine@65(ServiceHeader@1001 : Record 5900;ServiceItemNo@1003 : Code[20];ItemNo@1005 : Code[20];Quantity@1002 : Decimal;QtyToConsume@1004 : Decimal);
    VAR
      ServiceLine@1000 : Record 5902;
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,ItemNo);
      ServiceLine.VALIDATE("Service Item No.",ServiceItemNo);
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.VALIDATE("Qty. to Consume",QtyToConsume);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceLineWithoutLocation@69(VAR ServiceLine@1000 : Record 5902;ServiceHeader@1001 : Record 5900;No@1004 : Code[20]);
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,No);
      ServiceLine.VALIDATE("Location Code",'');
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceOrder@26(VAR ServiceHeader@1000 : Record 5900;VAR ServiceItemLine@1001 : Record 5901);
    BEGIN
      Initialize;
      CreateServiceHeader(ServiceHeader);
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,'');
      CreateServiceLineForItem(ServiceHeader,ServiceItemLine."Line No.");
      CreateServiceLineForResource(ServiceHeader);
    END;

    LOCAL PROCEDURE CreateServiceLineForItem@6(ServiceHeader@1000 : Record 5900;ServiceItemLineNo@1001 : Integer);
    VAR
      ServiceLine@1005 : Record 5902;
      Item@1002 : Record 27;
      Counter@1003 : Integer;
    BEGIN
      // Create 2 to 12 Service Lines - Boundary 2 is important.
      FOR Counter := 2 TO 2 + LibraryRandom.RandInt(10) DO BEGIN
        LibraryInventory.CreateItemWithUnitPriceAndUnitCost(Item,0,LibraryRandom.RandDec(10,2));
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Item,Item."No.");
        ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineNo);
        ServiceLine.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateServiceLineForResource@8(ServiceHeader@1001 : Record 5900);
    VAR
      ServiceLine@1004 : Record 5902;
      Counter@1003 : Integer;
    BEGIN
      // Create 2 to 12 Service Lines - Boundary 2 is important.
      FOR Counter := 2 TO 2 + LibraryRandom.RandInt(10) DO
        LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,ServiceLine.Type::Resource,LibraryResource.CreateResourceNo);
    END;

    LOCAL PROCEDURE CreateServiceLineWithQuantity@169(VAR ServiceLine@1006 : Record 5902;ServiceHeader@1004 : Record 5900;Type@1001 : Option;No@1000 : Code[20];QuantitytoSet@1007 : Decimal);
    BEGIN
      LibraryService.CreateServiceLine(ServiceLine,ServiceHeader,Type,No);
      ServiceLine.VALIDATE(Quantity,QuantitytoSet);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceOrderWithCurrency@121(VAR ServiceHeader@1005 : Record 5900);
    VAR
      ServiceItem@1000 : Record 5940;
      ServiceItemLine@1001 : Record 5901;
    BEGIN
      // 1. Create Service Order - Service Header, Service Item Line and Service Line for Type Item.
      Initialize;

      LibraryService.CreateServiceHeader(ServiceHeader,ServiceHeader."Document Type"::Order,'');
      ServiceHeader.VALIDATE("Currency Code",LibraryERM.CreateCurrencyWithRandomExchRates);
      ServiceHeader.MODIFY(TRUE);

      LibraryService.CreateServiceItem(ServiceItem,ServiceHeader."Customer No.");
      LibraryService.CreateServiceItemLine(ServiceItemLine,ServiceHeader,ServiceItem."No.");
    END;

    LOCAL PROCEDURE CreateServiceCost@101(VAR ServiceCost@1000 : Record 5905);
    BEGIN
      // Using Random Number for Default Unit Cost.
      LibraryService.CreateServiceCost(ServiceCost);
      ServiceCost.VALIDATE("Account No.",LibraryERM.CreateGLAccountWithSalesSetup);
      ServiceCost.VALIDATE("Cost Type",ServiceCost."Cost Type"::Other);
      ServiceCost.VALIDATE("Default Unit Cost",LibraryRandom.RandDec(100,2));
      ServiceCost.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateServiceCostWithAccountCombineFullVAT@92(VAR ServiceCost@1000 : Record 5905;VATBusPostingGroupCode@1002 : Code[10]);
    BEGIN
      // Using Random Number for Default Unit Cost.
      LibraryService.CreateServiceCost(ServiceCost);
      WITH ServiceCost DO BEGIN
        VALIDATE("Account No.",CreateGLAccountCombineFullVAT(VATBusPostingGroupCode));
        VALIDATE("Cost Type","Cost Type"::Other);
        VALIDATE("Default Unit Cost",LibraryRandom.RandDec(100,2));
        MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE CreateGLAccountCombineFullVAT@89(VATBusPostingGroupCode@1000 : Code[10]) : Code[20];
    VAR
      GeneralPostingSetup@1001 : Record 252;
      GLAccount@1002 : Record 15;
      VATPostingSetup@1003 : Record 325;
    BEGIN
      LibraryERM.FindGeneralPostingSetup(GeneralPostingSetup);
      CreateVATPostingSetup(
        VATPostingSetup,VATBusPostingGroupCode,
        VATPostingSetup."VAT Calculation Type"::"Full VAT",LibraryRandom.RandDec(100,2));
      LibraryERM.CreateGLAccount(GLAccount);

      WITH GLAccount DO BEGIN
        VALIDATE("Gen. Bus. Posting Group",GeneralPostingSetup."Gen. Bus. Posting Group");
        VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
        VALIDATE("VAT Bus. Posting Group",VATPostingSetup."VAT Bus. Posting Group");
        VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
        MODIFY(TRUE);
      END;
      EXIT(GLAccount."No.");
    END;

    LOCAL PROCEDURE CreateVATPostingSetup@90(VAR VATPostingSetup@1000 : Record 325;VATBusPostingGroupCode@1001 : Code[10];VATCalType@1002 : 'Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax';VATPct@1003 : Decimal);
    VAR
      VATProdPostingGroup@1004 : Record 324;
    BEGIN
      WITH VATPostingSetup DO BEGIN
        SETRANGE("VAT Bus. Posting Group",VATBusPostingGroupCode);
        SETRANGE("VAT Calculation Type",VATCalType);
        IF NOT FINDFIRST THEN BEGIN
          LibraryERM.CreateVATProductPostingGroup(VATProdPostingGroup);
          LibraryERM.CreateVATPostingSetup(VATPostingSetup,VATBusPostingGroupCode,VATProdPostingGroup.Code);
          VALIDATE("VAT Calculation Type",VATCalType);
          VALIDATE("VAT %",VATPct);
          VALIDATE("Sales VAT Account",LibraryERM.CreateGLAccountWithSalesSetup);
          MODIFY(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE FindServiceLine@13(VAR ServiceLine@1000 : Record 5902;ServiceItemLine@1001 : Record 5901);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceItemLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceLine.FINDSET;
    END;

    LOCAL PROCEDURE FindServiceLinesByHeaderNo@195(VAR ServiceLine@1001 : Record 5902;ServiceHeader@1000 : Record 5900);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.FINDSET;
    END;

    LOCAL PROCEDURE FindServiceShipmentHeader@176(OrderNo@1001 : Code[20]) : Code[20];
    VAR
      ServiceShipmentHeader@1000 : Record 5990;
    BEGIN
      ServiceShipmentHeader.SETRANGE("Order No.",OrderNo);
      ServiceShipmentHeader.FINDFIRST;
      EXIT(ServiceShipmentHeader."No.");
    END;

    LOCAL PROCEDURE FindItemLedgerEntryNo@145(ItemNo@1000 : Code[20];DocumentNo@1001 : Code[20]) : Integer;
    VAR
      ItemLedgerEntry2@1002 : Record 32;
    BEGIN
      ItemLedgerEntry2.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry2.SETRANGE("Document No.",FindServiceShipmentHeader(DocumentNo));
      ItemLedgerEntry2.FINDFIRST;

      ItemLedgerEntry := ItemLedgerEntry2;  // Assign global variable for page handler.
      EXIT(ItemLedgerEntry2."Entry No.");
    END;

    LOCAL PROCEDURE FindItemTrackingCode@27(LotSpecific@1002 : Boolean;SNSpecific@1001 : Boolean) : Code[10];
    VAR
      ItemTrackingCode@1000 : Record 6502;
    BEGIN
      ItemTrackingCode.SETRANGE("Lot Sales Inbound Tracking",LotSpecific);
      ItemTrackingCode.SETRANGE("Lot Sales Outbound Tracking",LotSpecific);
      ItemTrackingCode.SETRANGE("SN Sales Inbound Tracking",SNSpecific);
      ItemTrackingCode.SETRANGE("SN Sales Outbound Tracking",SNSpecific);
      ItemTrackingCode.SETRANGE("Man. Expir. Date Entry Reqd.",FALSE);
      ItemTrackingCode.SETRANGE("Man. Warranty Date Entry Reqd.",FALSE);
      ItemTrackingCode.FINDFIRST;
      EXIT(ItemTrackingCode.Code);
    END;

    LOCAL PROCEDURE InsertServiceLinesIntoTemp@67(ServiceLine@1000 : Record 5902;VAR TempServiceLineBeforePosting@1001 : TEMPORARY Record 5902);
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine.FINDSET;

      REPEAT
        TempServiceLineBeforePosting := ServiceLine;
        TempServiceLineBeforePosting.INSERT;
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE InventorySetupCostPosting@23();
    BEGIN
      LibraryInventory.SetAutomaticCostPosting(TRUE);
      LibraryInventory.SetExpectedCostPosting(TRUE);
    END;

    LOCAL PROCEDURE OpenItemTrackingLinesForPurchaseOrder@68(No@1000 : Code[20]);
    VAR
      PurchaseOrder@1001 : TestPage 50;
    BEGIN
      PurchaseOrder.OPENEDIT;
      PurchaseOrder.FILTER.SETFILTER("No.",No);
      PurchaseOrder.PurchLines."Item Tracking Lines".INVOKE;
    END;

    LOCAL PROCEDURE OpenItemTrackingLinesForSalesCreditMemo@135(No@1000 : Code[20]);
    VAR
      SalesCreditMemo@1001 : TestPage 44;
    BEGIN
      SalesCreditMemo.OPENEDIT;
      SalesCreditMemo.FILTER.SETFILTER("No.",No);
      SalesCreditMemo.SalesLines.ItemTrackingLines.INVOKE;
    END;

    LOCAL PROCEDURE OpenServiceLine@139(No@1001 : Code[20]);
    VAR
      ServiceOrder@1000 : TestPage 5900;
    BEGIN
      ServiceOrder.OPENVIEW;
      ServiceOrder.FILTER.SETFILTER("No.",No);
      ServiceOrder.ServItemLines."Service Lines".INVOKE;
    END;

    LOCAL PROCEDURE ServiceOrderPageOpenEdit@126(VAR ServiceOrder@1000 : TestPage 5900;No@1001 : Code[20]);
    VAR
      ServiceHeader@1002 : Record 5900;
    BEGIN
      ServiceOrder.OPENEDIT;
      ServiceOrder.FILTER.SETFILTER("Document Type",FORMAT(ServiceHeader."Document Type"::Order));
      ServiceOrder.FILTER.SETFILTER("No.",No);
    END;

    LOCAL PROCEDURE SaveServiceLineInTempTable@20(VAR TempServiceLine@1000 : TEMPORARY Record 5902;ServiceItemLine@1001 : Record 5901);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceItemLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceLine.SETRANGE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.FINDSET;
      REPEAT
        TempServiceLine := ServiceLine;
        TempServiceLine.INSERT;
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateQtyToShipOnServiceLine@12(ServiceLine@1000 : Record 5902;ServiceItemLineLineNo@1001 : Integer;Quantity@1002 : Decimal;QtyToShip@1003 : Decimal);
    BEGIN
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineLineNo);
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.VALIDATE("Qty. to Ship",QtyToShip);
      ServiceLine.VALIDATE("Qty. to Consume",QtyToShip);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePartialQtyOnServiceLines@43(ServiceItemLine@1000 : Record 5901);
    VAR
      ServiceLine@1001 : Record 5902;
      Quantity@1002 : Decimal;
    BEGIN
      FindServiceLine(ServiceLine,ServiceItemLine);
      REPEAT
        Quantity := LibraryRandom.RandInt(10);  // Use Random because value is not important.
        UpdateQtyToShipOnServiceLine(ServiceLine,ServiceItemLine."Line No.",Quantity,Quantity * LibraryUtility.GenerateRandomFraction);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateFullQtyOnServiceLines@9(ServiceItemLine@1000 : Record 5901);
    VAR
      ServiceLine@1001 : Record 5902;
      Quantity@1002 : Decimal;
    BEGIN
      FindServiceLine(ServiceLine,ServiceItemLine);
      REPEAT
        Quantity := LibraryRandom.RandInt(10);  // Use Random because value is not important.
        UpdateQtyToShipOnServiceLine(ServiceLine,ServiceItemLine."Line No.",Quantity,Quantity);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdatePostingDateOnServiceLines@137(ServiceItemLine@1000 : Record 5901;NewPostingDate@1003 : Date);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,ServiceItemLine);
      REPEAT
        ServiceLine.VALIDATE("Posting Date",NewPostingDate);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateFullQtyToConsume@53(ServiceItemLine@1000 : Record 5901);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      FindServiceLine(ServiceLine,ServiceItemLine);
      REPEAT
        ServiceLine.VALIDATE("Qty. to Consume",ServiceLine.Quantity);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdatePartialQtyToInvoice@44(ServiceItemLine@1000 : Record 5901);
    VAR
      ServiceLine@1001 : Record 5902;
      Quantity@1002 : Decimal;
    BEGIN
      FindServiceLine(ServiceLine,ServiceItemLine);
      REPEAT
        Quantity := LibraryRandom.RandInt(10);  // Use Random because value is not important.
        UpdateQtyToInvoice(ServiceLine,ServiceItemLine."Line No.",Quantity,Quantity * LibraryUtility.GenerateRandomFraction);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateQtyToInvoice@46(ServiceLine@1000 : Record 5902;ServiceItemLineLineNo@1001 : Integer;Quantity@1002 : Decimal;QtyForPost@1003 : Decimal);
    BEGIN
      ServiceLine.VALIDATE("Service Item Line No.",ServiceItemLineLineNo);
      ServiceLine.VALIDATE(Quantity,Quantity);
      ServiceLine.VALIDATE("Qty. to Ship",QtyForPost);
      ServiceLine.VALIDATE("Qty. to Invoice",QtyForPost);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdatePriceAndQtyToConsume@125(VAR ServiceLine@1000 : Record 5902;QuantityToSet@1001 : Decimal);
    BEGIN
      ServiceLine.VALIDATE("Unit Price",LibraryRandom.RandInt(10)); // Use Random because value is not important.
      ServiceLine.VALIDATE("Qty. to Consume",QuantityToSet);
      ServiceLine.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UndoConsumptionByShipmentHeader@108(ServiceShipmentHeaderNo@1001 : Code[20]);
    VAR
      ServiceShipmentLine@1000 : Record 5991;
    BEGIN
      ServiceShipmentLine.SETRANGE("Document No.",ServiceShipmentHeaderNo);
      CODEUNIT.RUN(CODEUNIT::"Undo Service Consumption Line",ServiceShipmentLine);
    END;

    LOCAL PROCEDURE UpdateServiceLineInsertTemp@199(VAR TempServiceLineBeforePosting@1000 : TEMPORARY Record 5902;VAR ServiceLine@1001 : Record 5902);
    BEGIN
      UpdatePriceAndQtyToConsume(ServiceLine,ServiceLine.Quantity);
      ServiceLine.VALIDATE("Line Discount %",LibraryRandom.RandInt(10));
      ServiceLine.MODIFY(TRUE);

      Assert.AreEqual(ServiceLine.Quantity,ServiceLine."Qty. to Consume",UnknownError);
      InsertServiceLinesIntoTemp(ServiceLine,TempServiceLineBeforePosting);
    END;

    LOCAL PROCEDURE PostServiceOrderLineByLine@38(ServiceHeader@1000 : Record 5900);
    VAR
      ServiceLine@1005 : Record 5902;
      TempServiceLine@1006 : TEMPORARY Record 5902;
      ServicePost@1001 : Codeunit 5980;
      Ship@1002 : Boolean;
      Invoice@1003 : Boolean;
      Consume@1004 : Boolean;
    BEGIN
      Ship := TRUE;
      Consume := TRUE;
      ServiceLine.SETRANGE("Document Type",ServiceHeader."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceHeader."No.");
      ServiceLine.SETRANGE("Quantity Consumed",0);
      ServiceLine.FINDSET;
      REPEAT
        TempServiceLine := ServiceLine;
        TempServiceLine.INSERT;
        ServiceHeader.GET(TempServiceLine."Document Type",TempServiceLine."Document No.");
        ServicePost.PostWithLines(ServiceHeader,TempServiceLine,Ship,Consume,Invoice);
        TempServiceLine.DELETE;
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE UndoConsumption@7(OrderNo@1000 : Code[20]);
    VAR
      ServiceShipmentLine@1002 : Record 5991;
    BEGIN
      ServiceShipmentLine.SETRANGE("Order No.",OrderNo);
      CODEUNIT.RUN(CODEUNIT::"Undo Service Consumption Line",ServiceShipmentLine);
    END;

    LOCAL PROCEDURE VerifyCreditMemoServiceLedger@96(PreAssignedNo@1001 : Code[20];Quantity@1003 : Integer;CustomerNo@1004 : Code[20]);
    VAR
      ServiceLedgerEntry@1006 : Record 5907;
      ServiceCrMemoHeader@1002 : Record 5994;
    BEGIN
      ServiceCrMemoHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      ServiceCrMemoHeader.FINDFIRST;
      ServiceLedgerEntry.SETRANGE("Document Type",ServiceLedgerEntry."Document Type"::"Credit Memo");
      ServiceLedgerEntry.SETRANGE("Document No.",ServiceCrMemoHeader."No.");
      ServiceLedgerEntry.FINDSET;
      REPEAT
        ServiceLedgerEntry.TESTFIELD(Quantity,Quantity);
        ServiceLedgerEntry.TESTFIELD("Customer No.",CustomerNo);
      UNTIL ServiceLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPostedShipmentLine@51(VAR PostedServiceShipmentLines@1000 : TestPage 5970;Type@1001 : Option);
    BEGIN
      PostedServiceShipmentLines.FILTER.SETFILTER(Type,FORMAT(Type));
      PostedServiceShipmentLines.NEXT;
      PostedServiceShipmentLines."Quantity Consumed".ASSERTEQUALS(-Quantity / 2);
    END;

    LOCAL PROCEDURE VerifyServiceLine@28(VAR TempServiceLine@1000 : TEMPORARY Record 5902;ServiceItemLine@1001 : Record 5901);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      TempServiceLine.FINDSET;
      ServiceLine.SETRANGE("Document Type",ServiceItemLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceLine.SETRANGE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.FINDSET;
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD(Quantity,TempServiceLine.Quantity);
        ServiceLine.TESTFIELD("Quantity Shipped",TempServiceLine."Qty. to Ship");
        ServiceLine.TESTFIELD("Quantity Consumed",TempServiceLine."Qty. to Consume");
        ServiceLine.NEXT;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyPostedEntry@14(VAR TempServiceLine@1003 : TEMPORARY Record 5902);
    VAR
      ServiceShipmentHeader@1000 : Record 5990;
      ServiceShipmentLine@1002 : Record 5991;
    BEGIN
      TempServiceLine.FINDSET;
      ServiceShipmentHeader.SETRANGE("Order No.",TempServiceLine."Document No.");
      ServiceShipmentHeader.FINDLAST;
      ServiceShipmentLine.SETRANGE("Document No.",ServiceShipmentHeader."No.");
      ServiceShipmentLine.FINDSET;
      REPEAT
        ServiceShipmentLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceShipmentLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceShipmentLine.TESTFIELD(Quantity,TempServiceLine."Qty. to Consume");
        ServiceShipmentLine.TESTFIELD("Quantity Consumed",TempServiceLine."Qty. to Consume");
        ServiceShipmentLine.NEXT;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyItemEntries@33(VAR TempServiceLine@1004 : TEMPORARY Record 5902);
    VAR
      ItemLedgerEntry@1003 : Record 32;
      ServiceShipmentHeader@1000 : Record 5990;
      ServiceShipmentLine@1001 : Record 5991;
    BEGIN
      TempServiceLine.SETRANGE(Type,TempServiceLine.Type::Item);
      TempServiceLine.FINDSET;
      ServiceShipmentHeader.SETRANGE("Order No.",TempServiceLine."Document No.");
      ServiceShipmentHeader.FINDLAST;
      REPEAT
        ServiceShipmentLine.GET(ServiceShipmentHeader."No.",TempServiceLine."Line No.");
        ItemLedgerEntry.GET(ServiceShipmentLine."Item Shpt. Entry No.");
        ItemLedgerEntry.TESTFIELD("Entry Type",ItemLedgerEntry."Entry Type"::"Negative Adjmt.");
        ItemLedgerEntry.TESTFIELD("Item No.",TempServiceLine."No.");
        ItemLedgerEntry.TESTFIELD(Quantity,-TempServiceLine."Qty. to Consume (Base)");
        ItemLedgerEntry.TESTFIELD("Invoiced Quantity",-TempServiceLine."Qty. to Consume (Base)");
        VerifyValueEntry(TempServiceLine,ItemLedgerEntry."Entry No.");
      UNTIL TempServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyResourceLedgerEntry@41(VAR TempServiceLine@1000 : TEMPORARY Record 5902);
    VAR
      ResourceLedgerEntry@1003 : Record 203;
      ServiceShipmentHeader@1004 : Record 5990;
    BEGIN
      TempServiceLine.SETRANGE(Type,TempServiceLine.Type::Resource);
      TempServiceLine.FINDSET;
      ServiceShipmentHeader.SETRANGE("Order No.",TempServiceLine."Document No.");
      ServiceShipmentHeader.FINDLAST;
      ResourceLedgerEntry.SETRANGE("Entry Type",ResourceLedgerEntry."Entry Type"::Usage);
      ResourceLedgerEntry.SETRANGE("Document No.",ServiceShipmentHeader."No.");
      REPEAT
        ResourceLedgerEntry.SETRANGE("Resource No.",TempServiceLine."No.");
        ResourceLedgerEntry.FINDFIRST;
        ResourceLedgerEntry.TESTFIELD(Quantity,TempServiceLine."Qty. to Consume");
        ResourceLedgerEntry.TESTFIELD("Order Type",ResourceLedgerEntry."Order Type"::Service);
        ResourceLedgerEntry.TESTFIELD("Order No.",TempServiceLine."Document No.");
        ResourceLedgerEntry.TESTFIELD("Order Line No.",TempServiceLine."Line No.");
      UNTIL TempServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyValueEntry@24(VAR TempServiceLine@1004 : TEMPORARY Record 5902;ItemLedgerEntryNo@1001 : Integer);
    VAR
      ValueEntry@1003 : Record 5802;
    BEGIN
      ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgerEntryNo);
      ValueEntry.FINDFIRST;
      ValueEntry.TESTFIELD("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::"Negative Adjmt.");
      ValueEntry.TESTFIELD("Item No.",TempServiceLine."No.");
      ValueEntry.TESTFIELD("Valued Quantity",-TempServiceLine."Qty. to Consume (Base)");
      ValueEntry.TESTFIELD("Invoiced Quantity",-TempServiceLine."Qty. to Consume (Base)");
      ValueEntry.TESTFIELD("Source No.",TempServiceLine."Customer No.");
      ValueEntry.TESTFIELD("Cost Amount (Actual)",-ROUND(TempServiceLine."Unit Cost (LCY)" * TempServiceLine."Qty. to Consume",0.01));
    END;

    LOCAL PROCEDURE UpdateConsumedQtyOnServiceLine@59(ServiceItemLine@1000 : Record 5901);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      ServiceLine.SETRANGE("Document Type",ServiceItemLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceLine.SETRANGE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.FINDSET;
      REPEAT
        ServiceLine.VALIDATE("Qty. to Consume",ServiceLine."Qty. to Ship" * LibraryUtility.GenerateRandomFraction);
        ServiceLine.MODIFY(TRUE);
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyLedgerEntryAfterPosting@105(DocumentNo@1001 : Code[20];No@1002 : Code[20];Quantity@1003 : Decimal);
    VAR
      ServiceLedgerEntry@1000 : Record 5907;
    BEGIN
      ServiceLedgerEntry.SETRANGE("Document Type",ServiceLedgerEntry."Document Type"::Shipment);
      ServiceLedgerEntry.SETRANGE("Document No.",DocumentNo);
      ServiceLedgerEntry.FINDFIRST;
      ServiceLedgerEntry.TESTFIELD("No.",No);
      ServiceLedgerEntry.TESTFIELD(Quantity,Quantity);
    END;

    LOCAL PROCEDURE VerifyNoOfItemLedgerEntry@104(DocumentNo@1001 : Code[20];ItemNo@1002 : Code[20];ExpectedValue@1000 : Integer);
    VAR
      ItemLedgerEntry@1003 : Record 32;
    BEGIN
      ItemLedgerEntry.SETRANGE("Item No.",ItemNo);
      ItemLedgerEntry.SETRANGE("Document No.",DocumentNo);
      Assert.AreEqual(ExpectedValue,ItemLedgerEntry.COUNT,STRSUBSTNO(NoOfEntriesError,ItemLedgerEntry.TABLECAPTION,ExpectedValue));
    END;

    LOCAL PROCEDURE VerifyNoOfValueEntry@103(DocumentNo@1000 : Code[20];ExpectedValue@1001 : Integer);
    VAR
      ValueEntry@1002 : Record 5802;
    BEGIN
      ValueEntry.SETRANGE("Document No.",DocumentNo);
      ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Service Shipment");
      Assert.AreEqual(ExpectedValue,ValueEntry.COUNT,STRSUBSTNO(NoOfEntriesError,ValueEntry.TABLECAPTION,ExpectedValue));
    END;

    LOCAL PROCEDURE VerifyUpdatedValueConsumedQty@36(VAR TempServiceLine@1000 : TEMPORARY Record 5902;VAR TempServiceLine2@1003 : TEMPORARY Record 5902;ServiceItemLine@1001 : Record 5901);
    VAR
      ServiceLine@1002 : Record 5902;
    BEGIN
      TempServiceLine.FINDFIRST;
      TempServiceLine2.FINDFIRST;
      ServiceLine.SETRANGE("Document Type",ServiceItemLine."Document Type");
      ServiceLine.SETRANGE("Document No.",ServiceItemLine."Document No.");
      ServiceLine.SETRANGE("Service Item Line No.",ServiceItemLine."Line No.");
      ServiceLine.FINDSET;
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD(Quantity,TempServiceLine.Quantity);
        ServiceLine.TESTFIELD("Quantity Shipped",TempServiceLine."Qty. to Ship" + TempServiceLine2."Qty. to Ship");
        ServiceLine.TESTFIELD("Quantity Invoiced",TempServiceLine."Qty. to Invoice" + TempServiceLine2."Qty. to Invoice");
        ServiceLine.TESTFIELD("Quantity Consumed",TempServiceLine."Qty. to Consume" + TempServiceLine2."Qty. to Consume");
        TempServiceLine.NEXT;
        TempServiceLine2.NEXT;
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyUndoConsumptionEntries@15(VAR TempServiceLine@1000 : TEMPORARY Record 5902);
    VAR
      ServiceShipmentLine@1002 : Record 5991;
      TotalQuantity@1003 : Decimal;
      TotalConsumedQuantity@1004 : Decimal;
    BEGIN
      TempServiceLine.FINDSET;
      ServiceShipmentLine.SETRANGE("Order No.",TempServiceLine."Document No.");
      REPEAT
        TotalQuantity := 0;
        TotalConsumedQuantity := 0;
        ServiceShipmentLine.SETRANGE(Type,TempServiceLine.Type);
        ServiceShipmentLine.SETRANGE("No.",TempServiceLine."No.");
        ServiceShipmentLine.FINDSET;
        REPEAT
          TotalQuantity += ServiceShipmentLine.Quantity;
          TotalConsumedQuantity += ServiceShipmentLine."Quantity Consumed";
        UNTIL ServiceShipmentLine.NEXT = 0;
        Assert.AreEqual(TotalQuantity,0,STRSUBSTNO(ServiceShipmentLineError,TotalQuantity));
        Assert.AreEqual(TotalConsumedQuantity,0,STRSUBSTNO(ServiceShipmentLineError,TotalConsumedQuantity));
      UNTIL TempServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyItemEntriesAfterUndo@142(ServiceOrderNo@1000 : Code[20]);
    VAR
      ServiceShipmentLine@1001 : Record 5991;
      ItemLedgerEntry@1002 : Record 32;
    BEGIN
      ServiceShipmentLine.SETRANGE("Order No.",ServiceOrderNo);
      ServiceShipmentLine.SETRANGE(Type,ServiceShipmentLine.Type::Item);
      ServiceShipmentLine.FINDSET;
      REPEAT
        ItemLedgerEntry.GET(ServiceShipmentLine."Item Shpt. Entry No.");
        ItemLedgerEntry.TESTFIELD("Posting Date",ServiceShipmentLine."Posting Date");
      UNTIL ServiceShipmentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyResourceEntriesAfterUndo@73(ServiceOrderNo@1000 : Code[20]);
    VAR
      ResLedgerEntry@1003 : Record 203;
      ServiceShipmentLine@1001 : Record 5991;
    BEGIN
      ServiceShipmentLine.SETRANGE("Order No.",ServiceOrderNo);
      ServiceShipmentLine.SETRANGE(Type,ServiceShipmentLine.Type::Resource);
      ServiceShipmentLine.FINDFIRST;
      ResLedgerEntry.SETRANGE("Document No.",ServiceShipmentLine."Document No.");
      ResLedgerEntry.SETFILTER(Quantity,'<%1',0);
      ResLedgerEntry.FINDSET;
      REPEAT
        ResLedgerEntry.TESTFIELD("Posting Date",ServiceShipmentLine."Posting Date");
      UNTIL ResLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceLineAfterUndo@57(VAR TempServiceLine@1000 : TEMPORARY Record 5902);
    VAR
      ServiceLine@1001 : Record 5902;
    BEGIN
      TempServiceLine.FINDSET;
      ServiceLine.SETRANGE("Document Type",TempServiceLine."Document Type");
      ServiceLine.SETRANGE("Document No.",TempServiceLine."Document No.");
      ServiceLine.SETRANGE("Service Item Line No.",TempServiceLine."Service Item Line No.");
      ServiceLine.FINDSET;
      REPEAT
        ServiceLine.TESTFIELD(Type,TempServiceLine.Type);
        ServiceLine.TESTFIELD("No.",TempServiceLine."No.");
        ServiceLine.TESTFIELD(Quantity,TempServiceLine.Quantity);
        ServiceLine.TESTFIELD("Quantity Shipped",0);
        ServiceLine.TESTFIELD("Quantity Consumed",0);
        TempServiceLine.NEXT;
      UNTIL ServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyGLEntry@21(OrderNo@1005 : Code[20]);
    VAR
      ServiceShipmentHeader@1001 : Record 5990;
      GLEntry@1002 : Record 17;
    BEGIN
      ServiceShipmentHeader.SETRANGE("Order No.",OrderNo);
      ServiceShipmentHeader.FINDLAST;
      GLEntry.SETRANGE("Document No.",ServiceShipmentHeader."No.");
      GLEntry.FINDFIRST;
    END;

    LOCAL PROCEDURE VerifyGLEntryIsEmpty@100(ShipmentHeaderNo@1003 : Code[20]);
    VAR
      DummyGLEntry@1002 : Record 17;
    BEGIN
      DummyGLEntry.SETRANGE("Document No.",ShipmentHeaderNo);
      Assert.RecordIsEmpty(DummyGLEntry);
    END;

    LOCAL PROCEDURE VerifyVATEntryIsEmpty@99(ShipmentHeaderNo@1003 : Code[20]);
    VAR
      DummyVATEntry@1000 : Record 254;
    BEGIN
      DummyVATEntry.SETRANGE("Document No.",ShipmentHeaderNo);
      Assert.RecordIsEmpty(DummyVATEntry);
    END;

    LOCAL PROCEDURE VerifyGLAndVATEntriesForDocumentAreEmpty@82(ShipmentHeaderNo@1003 : Code[20]);
    BEGIN
      VerifyGLEntryIsEmpty(ShipmentHeaderNo);
      VerifyVATEntryIsEmpty(ShipmentHeaderNo);
    END;

    LOCAL PROCEDURE VerifyServiceLedgerEntriesAfterConsumption@80(VAR TempServiceLineBeforePosting@1002 : TEMPORARY Record 5902;ShipmentHeaderNo@1001 : Code[20];IsUndo@1003 : Boolean);
    VAR
      ServiceLedgerEntry@1000 : Record 5907;
      ServiceShipmentHeader@1006 : Record 5990;
      SignFactor@1004 : Integer;
      CurrencyFactor@1007 : Decimal;
      UnitPriceLCY@1005 : Decimal;
    BEGIN
      ServiceLedgerEntry.SETRANGE("Document Type",ServiceLedgerEntry."Document Type"::Shipment);
      ServiceLedgerEntry.SETRANGE("Document No.",ShipmentHeaderNo);

      TempServiceLineBeforePosting.SETFILTER(Type,'%1|%2',
        TempServiceLineBeforePosting.Type::"G/L Account",TempServiceLineBeforePosting.Type::Cost);
      ServiceLedgerEntry.SETFILTER(Type,'%1|%2',
        ServiceLedgerEntry.Type::"G/L Account",ServiceLedgerEntry.Type::"Service Cost");
      TempServiceLineBeforePosting.SETFILTER("Qty. to Consume",'>0');
      TempServiceLineBeforePosting.FINDSET;
      IF IsUndo THEN
        SignFactor := -1
      ELSE
        SignFactor := 1;

      ServiceShipmentHeader.GET(ShipmentHeaderNo);
      CurrencyFactor := 1;
      IF ServiceShipmentHeader."Currency Code" <> '' THEN
        CurrencyFactor := ServiceShipmentHeader."Currency Factor";

      REPEAT
        ServiceLedgerEntry.SETRANGE("No.",TempServiceLineBeforePosting."No.");
        ServiceLedgerEntry.SETRANGE("Entry Type",ServiceLedgerEntry."Entry Type"::Usage);
        IF IsUndo THEN
          ServiceLedgerEntry.FINDLAST
        ELSE
          ServiceLedgerEntry.FINDFIRST;
        ServiceLedgerEntry.TESTFIELD(Quantity,SignFactor * TempServiceLineBeforePosting."Qty. to Consume");
        UnitPriceLCY := TempServiceLineBeforePosting."Unit Price" / CurrencyFactor;
        Assert.AreNearlyEqual(ServiceLedgerEntry."Unit Price",UnitPriceLCY,LibraryERM.GetAmountRoundingPrecision,
          STRSUBSTNO(FieldError,ServiceLedgerEntry.FIELDCAPTION("Unit Price"),UnitPriceLCY,ServiceLedgerEntry.TABLECAPTION));
        ServiceLedgerEntry.TESTFIELD(Amount,0);
        ServiceLedgerEntry.TESTFIELD("Charged Qty.",0);

        ServiceLedgerEntry.SETRANGE("Entry Type",ServiceLedgerEntry."Entry Type"::Consume);
        IF IsUndo THEN
          ServiceLedgerEntry.FINDLAST
        ELSE
          ServiceLedgerEntry.FINDFIRST;
        ServiceLedgerEntry.TESTFIELD(Quantity,SignFactor * -TempServiceLineBeforePosting."Qty. to Consume");
        Assert.AreNearlyEqual(ServiceLedgerEntry."Unit Price",-UnitPriceLCY,LibraryERM.GetAmountRoundingPrecision,
          STRSUBSTNO(FieldError,ServiceLedgerEntry.FIELDCAPTION("Unit Price"),UnitPriceLCY,ServiceLedgerEntry.TABLECAPTION));
        ServiceLedgerEntry.TESTFIELD(Amount,0);

      UNTIL TempServiceLineBeforePosting.NEXT = 0;
    END;

    LOCAL PROCEDURE VerifyServiceShipmentLineAfterConsumption@83(VAR TempServiceLine@1000 : TEMPORARY Record 5902;ServiceShipmentHeaderNo@1001 : Code[20];IsUndo@1002 : Boolean);
    VAR
      ServiceShipmentLine@1004 : Record 5991;
      SignFactor@1003 : Integer;
    BEGIN
      // Verify service shipment line quantities match after all shipments are undone
      REPEAT
        WITH ServiceShipmentLine DO BEGIN
          SETRANGE("Order Line No.",TempServiceLine."Line No.");
          SETRANGE("Document No.",ServiceShipmentHeaderNo);
          IF IsUndo THEN BEGIN
            SignFactor := -1;
            FINDLAST;
          END ELSE BEGIN
            SignFactor := 1;
            FINDFIRST;
          END;
          TESTFIELD("Quantity Consumed",SignFactor * TempServiceLine."Qty. to Consume");
          TESTFIELD(Quantity,SignFactor * TempServiceLine."Qty. to Consume");
        END;
      UNTIL TempServiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckGeneralPostingSetupExists@47(ServiceLine@1000 : Record 5902);
    VAR
      GeneralPostingSetup@1001 : Record 252;
    BEGIN
      IF GeneralPostingSetup.GET(ServiceLine."Gen. Bus. Posting Group",ServiceLine."Gen. Prod. Posting Group") THEN
        EXIT;

      LibraryERM.FindGeneralPostingSetupInvtFull(GeneralPostingSetup);
      GeneralPostingSetup.VALIDATE("Sales Line Disc. Account",LibraryERM.CreateGLAccountNo);
      GeneralPostingSetup.MODIFY(TRUE);
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandler@10(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE MessageHandler@50(Question@1000 : Text[1024]);
    BEGIN
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingPageHandler@37(VAR ItemTrackingLines@1000 : TestPage 6510);
    BEGIN
      COMMIT;
      CASE TrackingAction OF
        TrackingAction::AssignSerialNo:
          ItemTrackingLines."Assign Serial No.".INVOKE;
        TrackingAction::AssignLotNo:
          ItemTrackingLines."Assign Lot No.".INVOKE;
        TrackingAction::SelectEntries:
          ItemTrackingLines."Select Entries".INVOKE;
        TrackingAction::EnterValues:
          BEGIN
            ItemTrackingLines."Serial No.".SETVALUE(ItemLedgerEntry."Serial No.");
            ItemTrackingLines."Lot No.".SETVALUE(ItemLedgerEntry."Lot No.");
            ItemTrackingLines."Quantity (Base)".SETVALUE(1);
            ItemTrackingLines."Appl.-from Item Entry".SETVALUE(ItemLedgerEntry."Entry No.");
          END;
      END;
      ItemTrackingLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ItemTrackingSummaryPageHandler@61(VAR ItemTrackingSummary@1000 : TestPage 6500);
    BEGIN
      ItemTrackingSummary.OK.INVOKE;
    END;

    [StrMenuHandler]
    PROCEDURE PostAsShipAndConsumeHandler@275(Options@1000 : Text[1024];VAR Choice@1001 : Integer;Instruction@1002 : Text[1024]);
    BEGIN
      Choice := 4;  // Post as Ship and Consume.
    END;

    [ModalPageHandler]
    PROCEDURE PostedItemTrackingLinesHandler@129(VAR PostedItemTrackingLines@1000 : TestPage 6511);
    BEGIN
      PostedItemTrackingLines."Serial No.".ASSERTEQUALS(ItemLedgerEntry."Serial No.");
      PostedItemTrackingLines."Lot No.".ASSERTEQUALS(ItemLedgerEntry."Lot No.");
      PostedItemTrackingLines.Quantity.ASSERTEQUALS(ItemLedgerEntry.Quantity);
    END;

    [ModalPageHandler]
    PROCEDURE PostedServiceShipmentLinesHandler@76(VAR PostedServiceShipmentLines@1000 : TestPage 5970);
    BEGIN
      PostedServiceShipmentLines.ItemTrackingEntries.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE PostedShipmentLineHandler@156(VAR PostedServiceShipmentLines@1000 : TestPage 5970);
    BEGIN
      PostedServiceShipmentLines.UndoConsumption.INVOKE;
      // Verifying the Service Shipment Line Quantity which was Undone.
      PostedServiceShipmentLines.NEXT;
      PostedServiceShipmentLines."Quantity Consumed".ASSERTEQUALS(-Quantity / 2);  // Using partial value for Quantity Consumed.
    END;

    [ModalPageHandler]
    PROCEDURE QuantityToCreatePageHandler@62(VAR EnterQuantityToCreate@1000 : TestPage 6513);
    BEGIN
      EnterQuantityToCreate.CreateNewLotNo.SETVALUE(CreateLotNo);
      EnterQuantityToCreate.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ServiceLinesPageHandler@74(VAR ServiceLines@1000 : TestPage 5905);
    BEGIN
      ServiceLines.ItemTrackingLines.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE ShipmentMultipleLinesHandler@34(VAR PostedServiceShipmentLines@1000 : TestPage 5970);
    VAR
      ServiceShipmentLine@1001 : Record 5991;
    BEGIN
      // Undo consumption of the Service Lines.
      PostedServiceShipmentLines.UndoConsumption.INVOKE;
      PostedServiceShipmentLines.LAST;
      PostedServiceShipmentLines.UndoConsumption.INVOKE;

      // Verifying the Service Shipment Lines Quantity which was Undone.
      VerifyPostedShipmentLine(PostedServiceShipmentLines,ServiceShipmentLine.Type::Item);
      VerifyPostedShipmentLine(PostedServiceShipmentLines,ServiceShipmentLine.Type::Resource);
      PostedServiceShipmentLines.OK.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE UpdateItemResourceHandler@81(VAR ServiceLines@1000 : TestPage 5905);
    VAR
      Item@1002 : Record 27;
      ServiceLine@1001 : Record 5902;
      Resource@1005 : Record 156;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Cost" ,LibraryRandom.RandDecInRange(1,100,2));
      Item.MODIFY(TRUE);
      LibraryResource.CreateResourceNew(Resource);
      Quantity := LibraryRandom.RandDec(100,2);  // Assign random Quantity to global variable Quantity.
      CreateLineForDifferentTypes(ServiceLines,ServiceLine.Type::Item,Item."No.",Quantity);
      ServiceLines.NEXT;
      CreateLineForDifferentTypes(ServiceLines,ServiceLine.Type::Resource,Resource."No.",Quantity);

      // Post the service Order as Ship and Consume.
      ServiceLines.Post.INVOKE;
    END;

    [ModalPageHandler]
    PROCEDURE UpdateQuantityPageHandler@168(VAR ServiceLines@1000 : TestPage 5905);
    VAR
      Item@1002 : Record 27;
      ServiceLine@1001 : Record 5902;
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Unit Cost" ,LibraryRandom.RandDecInRange(1,100,2));
      Item.MODIFY(TRUE);
      Quantity := LibraryRandom.RandDec(100,2);  // Assign random Quantity to global variable Quantity.
      CreateLineForDifferentTypes(ServiceLines,ServiceLine.Type::Item,Item."No.",Quantity);

      // Post the service Order as Ship and Consume.
      ServiceLines.Post.INVOKE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmYesHandler@55(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    BEGIN
    {
      // [FEATURE] [Consumption] [Service]
      Unsupported version tags:
      NA: Unable to Compile
      SE: Unable to Execute
      BE: Unable to Execute

      Test for CRM Service Posting Consumption:
        1.  Test Post a service order with the Consume option when there is nothing to consume and possible to post consumption if
            nothing was shipped.
        2.  Test Consuming partially on Service Line.
        3.  Test the total quantity of items on the service lines was consumed, the service order document is deleted.
        4.  Test that consumes a service order after partial consumption has been posted, the relevant fields are updated on the
            service line.
        5.  Test Posting Consumption after partial invoice has been posted via Ship and Invoice option.
        6.  Test Undoing consumption for the Service Line of the Resource, Cost and G/L Account Type.
        7.  Test that user has not consumed anything, it is impossible to run the Undo Consumption function from the posted service
            shipment.
        8.  Test the service order was deleted, then it is impossible to run the Undo Consumption function from the posted service
            shipment.
        9.  Test if consumed  partially to items and runs the Undo Consumption function from the posted service shipment, the service
            shipment line is undone.
        10. Test Posting Consumption after Undo Consumption.
        11. Test undo consumption for the Service Order consumed Quantity.
        12. Test undo consumption for the Service Order with multiple Service Lines.
        13. Test undo consumption in the Service Order for Item with Serial No.
        14. Test error occurs on updating Qty. to Consume on Service Line greater than available Quantity after posting Service Order as Ship.
        15. Test Item Tracking Entry on Posted Service Shipment after Posting Service Order with Item having Item Tracking Code for Serial No.
        16. Test Item Tracking Entry on Posted Service Shipment after Posting Service Order with Item having Item Tracking Code for Lot No.
        17. Test Item Tracking Entry on Posted Service Shipment after Posting Service Order with Item having Item Tracking Code for Serial and Lot No.
        18. Test Posted Entries after posting Service Order as Ship and Consume with Item having Item Tracking Code for Serial No.
        19. Test Posted Entries after posting Service Order as Ship and Consume with Item having Item Tracking Code for Serial and Lot No.
        20. Test Posted Entries after posting Service Order as Ship and Consume with Item having Item Tracking Code for Lot No.
        21. Test Undo Consumption after posting Service Order as Ship and Consume with Item having Item Tracking Code for Serial No.
        22. Test Undo Consumption after posting Service Order as Ship and Consume with Item having Item Tracking Code for Lot No.
        23. Test Undo Consumption after posting Service Order as Ship and Consume with Item having Item Tracking Code for Serial and Lot No.
        24. Test cost with Full VAT calculate type account can be entered in Service Line.

      TFS_TS_ID = 20886
      Covered Test cases:
        TFS_TC_ID=31894 and 12102
        TFS_TC_ID=31895 and 12103
        TFS_TC_ID=31896 and 12104
        TFS_TC_ID=31897 and 12105
        TFS_TC_ID=31904 and 12112
        TFS_TC_ID=31905 and 12113
        TFS_TC_ID=31906 and 12114
        TFS_TC_ID=31907 and 12115
        TFS_TC_ID=31908 and 12116
        TFS_TC_ID=31909 and 12117

      TFS_TS_ID = 245888
      Covers Test cases:
      ----------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                TFS ID
      ----------------------------------------------------------------------------------------------------------
      UndoConsumptionSingleLine, UndoConsumptionMultipleLines, UndoConsumptionSerialNumber              141395

      TFS_TS_ID = 245346
      Covers Test cases:
      ----------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                  TFS ID
      ----------------------------------------------------------------------------------------------------------
      ConsumeMoreThanAvailableQuantity, ConsumeWithSerialNo, ConsumeWithSerialAndLotNo, ConsumeWithLotNo  128106
      ItemTrackingOnShipmentWithSerialNo, ItemTrackingOnShipmentWithLotNo                                 128107
      ItemTrackingOnShipmentWithSerialAndLotNo, UndoConsumptionPostingWithSerialNo                        128107
      UndoConsumptionPostingWithLotNo, UndoConsumptionPostingWithSerialAndLotNo                           128107

      TFS_TS_ID
      Covers Test cases:
      ----------------------------------------------------------------------------------------------------------
      Test Function Name                                                                                  TFS ID
      ----------------------------------------------------------------------------------------------------------
      EnterCostWithAccountCombineFullVATInService                                                         342856
    }
    END.
  }
}

