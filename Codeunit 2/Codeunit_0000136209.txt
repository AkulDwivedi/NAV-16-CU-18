OBJECT Codeunit 136209 Marketing Opportunity Mgmt
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
            IsInitialized := FALSE;
          END;

  }
  CODE
  {
    VAR
      Opportunity2@1024 : Record 5092;
      Contact2@1025 : Record 5050;
      SalespersonPurchaser2@1026 : Record 13;
      SalesCycle2@1027 : Record 5090;
      SalesCycleStage2@1028 : Record 5091;
      LibrarySales@1012 : Codeunit 130509;
      LibraryUtility@1003 : Codeunit 131000;
      LibraryMarketing@1002 : Codeunit 131900;
      Assert@1001 : Codeunit 130000;
      IsInitialized@1000 : Boolean;
      ExistError@1004 : TextConst 'ENU=%1 for %2 %3 must not exist.';
      SalesCycleCode@1005 : Code[10];
      CurrentSalesCycleStage@1008 : Integer;
      WizardEstimatedValueLCY@1007 : Decimal;
      WizardChancesOfSuccessPercent@1006 : Decimal;
      UnknownError@1030 : TextConst 'ENU=Unexpected Error.';
      DeleteError@1009 : TextConst 'ENU=You cannot delete this opportunity while it is active.';
      ActionType@1010 : ' ,First,Next,Previous,Skip,Update,Jump';
      EmptyError@1011 : TextConst 'ENU=The %1 table is empty.';
      SalespersonCode@1013 : Code[10];
      SalesQuoteError@1014 : TextConst 'ENU=You cannot go to this stage before you have assigned a sales quote.';
      SalesQuoteNo@1015 : Code[20];
      ActionTaken@1018 : ' ,Next,Previous,Updated,Jumped,Won,Lost';
      AssignSalesQuoteServiceTier@1020 : TextConst 'ENU="%1 must be equal to ''In Progress''  in %2: %3=%4. Current value is ''%5''."';
      ActivateFirstStage@1022 : Boolean;
      Completed@1023 : Decimal;
      ShowSalesQuoteError@1029 : TextConst 'ENU=There is no sales quote that is assigned to this opportunity.';
      CloseOpportunityError@1016 : TextConst 'ENU=%1 for %2  must not exist.';

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerUpdateOpportunity)]
    PROCEDURE SalesCycleProbabilityAdd@16();
    VAR
      SalesCycle@1000 : Record 5090;
    BEGIN
      // Covers document number TC0021 - refer to TFS ID 21735.
      // Test Opportunity values with Sales Cycle of Probability Calculation Add.

      SalesCycleProbability(SalesCycle."Probability Calculation"::Add);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerUpdateOpportunity)]
    PROCEDURE SalesCycleProbabilityChances@32();
    VAR
      SalesCycle@1000 : Record 5090;
    BEGIN
      // Covers document number TC0021 - refer to TFS ID 21735.
      // Test Opportunity values with Sales Cycle of Probability Calculation Chances of Success %.

      SalesCycleProbability(SalesCycle."Probability Calculation"::"Chances of Success %");
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerUpdateOpportunity)]
    PROCEDURE SalesCycleProbabilityCompleted@34();
    VAR
      SalesCycle@1000 : Record 5090;
    BEGIN
      // Covers document number TC0021 - refer to TFS ID 21735.
      // Test Opportunity values with Sales Cycle of Probability Calculation Completed %.

      SalesCycleProbability(SalesCycle."Probability Calculation"::"Completed %");
    END;

    LOCAL PROCEDURE SalesCycleProbability@50(ProbabilityCalculation@1006 : Option);
    VAR
      Contact@1001 : Record 5050;
      SalesCycle@1000 : Record 5090;
      SalesCycleStage@1002 : Record 5091;
    BEGIN
      // 1. Setup: Create Contact, Sales Cycle, Sales Cycle Stage, update Probability Calculation as per parameter create Opportunity
      // for Contact.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);
      SalesCycle.GET(SalesCycleStage."Sales Cycle Code");
      SalesCycle.VALIDATE("Probability Calculation",ProbabilityCalculation);
      SalesCycle.MODIFY(TRUE);

      // Set Global Variable for Form Handler.
      AssignGlobalVariables(ActionType::First,SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);
      CreateOpportunity(Contact."No.");

      // 2. Exercise: Update Opportunity.
      UpdateOpportunityValue(Contact."No.");

      // 3. Verify: Verify Probability % and Calcd. Current Value (LCY) on Opportunity as per parameter ProbabilityCalculation.
      VerifyValuesOnOpportunity(
        Contact."No.",ProbabilityCalculation,WizardEstimatedValueLCY,WizardChancesOfSuccessPercent,SalesCycleStage."Completed %");
    END;

    [Test]
    PROCEDURE CreateSalesCycleComment@7();
    VAR
      SalesCycle@1000 : Record 5090;
      RlshpMgtCommentLine@1001 : Record 5061;
    BEGIN
      // Covers document number TC0021 - refer to TFS ID 21735.
      // Test Sales Cycle update on Creation of Comment for Sales Cycle.

      // 1. Setup: Create Sales Cycle.
      Initialize;
      LibraryMarketing.CreateSalesCycle(SalesCycle);

      // 2. Exercise: Create Comment for Created Sales Cycle.
      LibraryMarketing.CreateRlshpMgtCommentSales(RlshpMgtCommentLine,SalesCycle.Code);

      // 3. Verify: Verify Sales Cycle update on Creation of Comment for Sales Cycle.
      SalesCycle.GET(SalesCycle.Code);
      SalesCycle.CALCFIELDS(Comment);
      SalesCycle.TESTFIELD(Comment,TRUE);
    END;

    [Test]
    PROCEDURE CreateCloseOpportunityCode@19();
    VAR
      CloseOpportunityCode@1000 : Record 5094;
    BEGIN
      // Covers document number TC0021 - refer to TFS ID 21735.
      // Test Close Opportunity Code Successfully Created.

      // 1. Setup:
      Initialize;

      // 2. Exercise: Create Close Opportunity Code.
      LibraryMarketing.CreateCloseOpportunityCode(CloseOpportunityCode);

      // 3. Verify: Verify Close Opportunity Code Created.
      CloseOpportunityCode.GET(CloseOpportunityCode.Code);
    END;

    [Test]
    PROCEDURE ModifyCloseOpportunityCode@11();
    VAR
      CloseOpportunityCode@1000 : Record 5094;
    BEGIN
      // Covers document number TC0021 - refer to TFS ID 21735.
      // Test Close Opportunity Code Successfully Modified.

      // 1. Setup: Create Close Opportunity Code.
      Initialize;
      LibraryMarketing.CreateCloseOpportunityCode(CloseOpportunityCode);

      // 2. Exercise: Update Close Opportunity Code.
      CloseOpportunityCode.VALIDATE(Type,CloseOpportunityCode.Type::Lost);
      CloseOpportunityCode.MODIFY(TRUE);

      // 3. Verify: Verify Close Opportunity Code Modified.
      CloseOpportunityCode.GET(CloseOpportunityCode.Code);
      CloseOpportunityCode.TESTFIELD(Type,CloseOpportunityCode.Type::Lost);
    END;

    [Test]
    PROCEDURE DeleteCloseOpportunityCode@1();
    VAR
      CloseOpportunityCode@1000 : Record 5094;
    BEGIN
      // Covers document number TC0021 - refer to TFS ID 21735.
      // Test Close Opportunity Code Successfully Deleted.

      // 1. Setup: Create Close Opportunity Code.
      Initialize;
      LibraryMarketing.CreateCloseOpportunityCode(CloseOpportunityCode);

      // 2. Exersice: Delete Close Opportunity Code.
      CloseOpportunityCode.DELETE(TRUE);

      // 3. Verify: Verify Close Opportunity Code Deleted.
      Assert.IsFalse(
        CloseOpportunityCode.GET(CloseOpportunityCode.Code),
        STRSUBSTNO(CloseOpportunityError,CloseOpportunityCode.TABLECAPTION,CloseOpportunityCode.Code));
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerUpdateOpportunity)]
    PROCEDURE UpdateOpportunitySalesCycle@10();
    VAR
      Opportunity@1001 : Record 5092;
      SalesCycleStage@1000 : Record 5091;
    BEGIN
      // Covers document number TC0022, TC0023 - refer to TFS ID 21735.
      // Test Opportunity Successfully updated through Update opportunity Wizard with Sales Cycle Code and Sales Cycle Stage.

      // 1. Create Contact, Sales Cycle, Sales Cycle Stage, Opportunity for Contact and Update Opportunity.
      CreateAndUpdateOpportunity(Opportunity,SalesCycleStage);

      // 2. Verify: Verify Opportunity successfully created with Sales Cycle Code and Estimated Value (LCY).
      VerifyOpportunityValues(SalesCycleStage,Opportunity."Contact No.",WizardEstimatedValueLCY,WizardChancesOfSuccessPercent);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerUpdateOpportunity)]
    PROCEDURE DeleteOpenOpportunity@12();
    VAR
      Opportunity@1001 : Record 5092;
      SalesCycleStage@1006 : Record 5091;
    BEGIN
      // Covers document number TC0022 - refer to TFS ID 21735.
      // Test error occurs on deletion of Active Opportunity.

      // 1. Create Contact, Sales Cycle, Sales Cycle Stage, Opportunity for Contact and Update Opportunity.
      CreateAndUpdateOpportunity(Opportunity,SalesCycleStage);

      // 3. Verify: Verify error occurs on deletion of Active Opportunity.
      Opportunity.GET(Opportunity."No.");
      ASSERTERROR Opportunity.DELETE(TRUE);
      Assert.AreEqual(STRSUBSTNO(DeleteError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerUpdateOpportunity,ModalFormCloseOpportunity)]
    PROCEDURE DeleteCloseOpportunity@3();
    VAR
      Contact@1000 : Record 5050;
      Opportunity@1001 : Record 5092;
      SalesCycleStage@1006 : Record 5091;
      OpportunityEntry@1008 : Record 5093;
    BEGIN
      // Covers document number TC0022 - refer to TFS ID 21735.
      // Test Opportunity and Opportunity Entry Successfully deleted after close opportunity through Close opportunity wizard.

      // 1. Setup: Create Contact, Sales Cycle, Sales Cycle Stage create and update Opportunity for Contact.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);

      // Set Global Variable for Form Handler.
      AssignGlobalVariables(ActionType::First,SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);
      ActionTaken := ActionTaken::Lost;

      CreateOpportunity(Contact."No.");
      UpdateOpportunityValue(Contact."No.");

      // 2. Exercise: Close the Opportunity and Delete closed Opportunity.
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      Opportunity.FINDFIRST;
      Opportunity.CloseOpportunity;

      Opportunity.GET(Opportunity."No.");
      Opportunity.DELETE(TRUE);

      // 3. Verify: Verify Opportunity and Opportunity Entry deleted.
      Assert.IsFalse(Opportunity.FINDFIRST,STRSUBSTNO(ExistError,Opportunity.TABLECAPTION,Contact.TABLECAPTION,Contact."No."));

      OpportunityEntry.SETRANGE("Opportunity No.",Opportunity."No.");
      Assert.IsFalse(
        OpportunityEntry.FINDFIRST,STRSUBSTNO(ExistError,OpportunityEntry.TABLECAPTION,Opportunity.TABLECAPTION,Opportunity."No."));
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerUpdateOpportunity)]
    PROCEDURE UpdateOpportunity@6();
    VAR
      Contact@1000 : Record 5050;
      Opportunity@1001 : Record 5092;
      SalesCycleStage@1006 : Record 5091;
    BEGIN
      // Covers document number TC0023 - refer to TFS ID 21735.
      // Test error occurs on selecting different option except First on Update opportunity wizard.

      // 1. Setup: Create Contact, Sales Cycle and Sales Cycle Stage.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);

      // Set Global Variable for Form Handler.
      AssignGlobalVariables(ActionType::Next,SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);

      // 2. Exercise: Create opportunity for Contact.
      CreateOpportunity(Contact."No.");

      // 3. Verify: Verify error occurs on selecting different option except First on Update opportunity wizard.
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      Opportunity.FINDFIRST;
      ASSERTERROR Opportunity.UpdateOpportunity;
      Assert.AreEqual(STRSUBSTNO(EmptyError,SalesCycleStage.TABLECAPTION),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerUpdateOpportunity)]
    PROCEDURE UpdateOpportunityTwice@20();
    VAR
      Contact@1000 : Record 5050;
      SalesCycleStage@1006 : Record 5091;
    BEGIN
      // Covers document number TC0023 - refer to TFS ID 21735.
      // Test Sales Value successfully updated on Opportunity through Update opportunity wizard Twice.

      // 1. Setup: Create Contact, Sales Cycle, Sales Cycle Stage and Create opportunity for Contact.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);

      // Set Global Variable for Form Handler.
      AssignGlobalVariables(ActionType::First,SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);
      CreateSalesCycleStage(SalesCycleStage,SalesCycleStage."Sales Cycle Code");
      CreateOpportunity(Contact."No.");

      // 2. Exercise: Update Opportunity and Update Opportunity again with Next Option.
      UpdateOpportunityValue(Contact."No.");

      // Set Global Variable for Form Handler.
      ActionType := ActionType::Next;
      CurrentSalesCycleStage := SalesCycleStage.Stage;

      UpdateOpportunityValue(Contact."No.");

      // 3. Verify: Verify Sales Values on Opportunity.
      VerifyOpportunityValues(SalesCycleStage,Contact."No.",WizardEstimatedValueLCY,WizardChancesOfSuccessPercent);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerUpdateOpportunity)]
    PROCEDURE UpdateOpportunityWithSkip@28();
    VAR
      Contact@1000 : Record 5050;
      SalesCycleStage@1006 : Record 5091;
    BEGIN
      // Covers document number TC0023 - refer to TFS ID 21735.
      // Test error occurs on selecting Skip Option on Update opportunity wizard.

      // 1. Setup: Create Contact, Sales Cycle and Sales Cycle Stage.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);

      // Set Global Variable for Form Handler.
      AssignGlobalVariables(ActionType::Skip,SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);

      // 2. Exercise: Create opportunity for Contact.
      CreateOpportunity(Contact."No.");

      // 3. Verify: Verify error occurs on selecting Skip Option on Update opportunity wizard.
      ASSERTERROR UpdateOpportunityValue(Contact."No.");
      Assert.AreEqual(STRSUBSTNO(EmptyError,SalesCycleStage.TABLECAPTION),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,ModalHandlerOpportunityToDo)]
    PROCEDURE CreateOpportunityToDo@23();
    VAR
      Contact@1000 : Record 5050;
      Opportunity@1001 : Record 5092;
      SalesCycleStage@1006 : Record 5091;
      ToDo@1004 : Record 5080;
      TempToDo@1005 : TEMPORARY Record 5080;
    BEGIN
      // Covers document number TC0024 - refer to TFS ID 21735.
      // Test To-Do for opportunity Successfully created with Type Meeting.

      // 1. Setup: Create Contact, Sales Cycle and Sales Cycle Stage and Create Opportunity.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);

      // Set Global Variable for Form Handler.
      InitializeGlobalVariable;
      SalesCycleCode := SalesCycleStage."Sales Cycle Code";
      SalespersonCode := Contact."Salesperson Code";

      CreateOpportunity(Contact."No.");

      // 2. Exercise: Create To-Do for Opportunity.
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      Opportunity.FINDFIRST;
      ToDo.SETRANGE("Opportunity No.",Opportunity."No.");
      TempToDo.CreateToDoFromToDo(ToDo);

      // 3. Verify: Verify To-Do for opportunity Successfully created with Type Meeting.
      ToDo.FINDFIRST;
      ToDo.TESTFIELD("Salesperson Code",Contact."Salesperson Code");
      ToDo.TESTFIELD(Type,ToDo.Type::Meeting);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,ModalHandlerOpportunityToDo)]
    PROCEDURE ModifyOpportunityToDo@21();
    VAR
      Contact@1000 : Record 5050;
      Opportunity@1001 : Record 5092;
      SalesCycleStage@1006 : Record 5091;
      ToDo@1004 : Record 5080;
      TempToDo@1005 : TEMPORARY Record 5080;
      SalespersonPurchaser@1008 : Record 13;
    BEGIN
      // Covers document number TC0024 - refer to TFS ID 21735.
      // Test To-Do for opportunity Successfully Updated with Type Meeting.

      // 1. Setup: Create Contact, Sales Cycle and Sales Cycle Stage and Create Opportunity.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);

      // Set Global Variable for Form Handler.
      InitializeGlobalVariable;
      SalesCycleCode := SalesCycleStage."Sales Cycle Code";
      SalespersonCode := Contact."Salesperson Code";

      CreateOpportunity(Contact."No.");

      CreateSalespersonWithEmail(SalespersonPurchaser);

      // 2. Exercise: Create To-Do for Opportunity and Update Salesperson Code on Created To-Do.
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      Opportunity.FINDFIRST;
      ToDo.SETRANGE("Opportunity No.",Opportunity."No.");
      TempToDo.CreateToDoFromToDo(ToDo);

      ToDo.FINDFIRST;
      ToDo.VALIDATE("Salesperson Code",SalespersonPurchaser.Code);
      ToDo.MODIFY(TRUE);

      // 3. Verify: Verify To-Do successfully changed to New salesperson Code.
      ToDo.SETRANGE("Salesperson Code",SalespersonPurchaser.Code);
      ToDo.FINDFIRST;
      ToDo.TESTFIELD("Opportunity No.",Opportunity."No.");
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,ModalHandlerOpportunityToDo)]
    PROCEDURE DeleteOpportunityToDo@22();
    VAR
      Contact@1000 : Record 5050;
      Opportunity@1001 : Record 5092;
      SalesCycleStage@1006 : Record 5091;
      ToDo@1004 : Record 5080;
      TempToDo@1005 : TEMPORARY Record 5080;
    BEGIN
      // Covers document number TC0024 - refer to TFS ID 21735.
      // Test To-Do for opportunity Successfully deleted with Type Meeting.

      // 1. Setup: Create Contact, Sales Cycle and Sales Cycle Stage and Create Opportunity.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);

      // Set Global Variable for Form Handler.
      InitializeGlobalVariable;
      SalesCycleCode := SalesCycleStage."Sales Cycle Code";
      SalespersonCode := Contact."Salesperson Code";

      CreateOpportunity(Contact."No.");

      // 2. Exercise: Create To-Do for Opportunity and Delete the Created To-Do.
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      Opportunity.FINDFIRST;
      ToDo.SETRANGE("Opportunity No.",Opportunity."No.");
      TempToDo.CreateToDoFromToDo(ToDo);

      ToDo.FINDFIRST;
      ToDo.DELETE(TRUE);

      // 3. Verify: Verify To-Do for opportunity deleted.
      ToDo.SETRANGE("Opportunity No.",Opportunity."No.");
      Assert.IsFalse(ToDo.FINDFIRST,STRSUBSTNO(ExistError,ToDo.TABLECAPTION,Opportunity.TABLECAPTION,ToDo."No."));
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerUpdateOpportunity)]
    PROCEDURE OpportunityWOSalesQuote@49();
    VAR
      Contact@1000 : Record 5050;
      Opportunity@1001 : Record 5092;
      SalesCycleStage@1006 : Record 5091;
    BEGIN
      // Covers document number TC0025 - refer to TFS ID 21735.
      // Test error occurs on select Show Sales Quote for Opportunity without Assign Sales Quote.

      // 1. Setup: Create Contact, Sales Cycle, Sales Cycle Stage and Create Opportunity for Contact.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);

      // Set Global Variable for Form Handler.
      AssignGlobalVariables(ActionType::First,SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);

      CreateOpportunity(Contact."No.");

      // 2. Exercise: Update opportunity for Contact.
      UpdateOpportunityValue(Contact."No.");

      // 3. Verify: Verify error occurs on select Show Sales Quote for Opportunity.
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      Opportunity.FINDFIRST;
      ASSERTERROR Opportunity.ShowSalesQuoteWithCheck;
      Assert.AreEqual(STRSUBSTNO(ShowSalesQuoteError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerUpdateOpportunity)]
    PROCEDURE UpdateOpportunityWOSalesQuote@26();
    VAR
      Contact@1000 : Record 5050;
      SalesCycleStage@1006 : Record 5091;
    BEGIN
      // Covers document number TC0025 - refer to TFS ID 21735.
      // Test error occurs on update Opportunity without Assign Sales Quote.

      // 1. Setup: Create Contact, Sales Cycle, Sales Cycle Stage and Create Opportunity for Contact.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);

      // Set Global Variable for Form Handler.
      AssignGlobalVariables(ActionType::First,SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);

      CreateSalesCycleStage(SalesCycleStage,SalesCycleStage."Sales Cycle Code");
      SalesCycleStage.VALIDATE("Quote Required",TRUE);
      SalesCycleStage.MODIFY(TRUE);
      CreateOpportunity(Contact."No.");

      // 2. Exercise: Update opportunity for Contact.
      UpdateOpportunityValue(Contact."No.");

      ActionType := ActionType::Next;
      CurrentSalesCycleStage := SalesCycleStage.Stage;

      // 3. Verify: Verify error occurs on update Opportunity without Assign Sales Quote.
      ASSERTERROR UpdateOpportunityValue(Contact."No.");
      Assert.AreEqual(STRSUBSTNO(SalesQuoteError),GETLASTERRORTEXT,UnknownError);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerUpdateOpportunity,FormHandlerSalesQuote)]
    PROCEDURE AssignSalesQuoteToOpportunity@27();
    VAR
      Contact@1000 : Record 5050;
      Opportunity@1001 : Record 5092;
      SalesCycleStage@1006 : Record 5091;
    BEGIN
      // Covers document number TC0025 - refer to TFS ID 21735.
      // Test Sales Quote successfully Assign to Opportunity.

      // 1. Setup: Create Contact, Sales Cycle, Sales Cycle Stage and Create Opportunity for Contact.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);

      // Set Global Variable for Form Handler.
      AssignGlobalVariables(ActionType::First,SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);

      CreateOpportunity(Contact."No.");

      // 2. Exercise: Update opportunity for Contact and Assign Sales Quote for Updated opportunity.
      UpdateOpportunityValue(Contact."No.");

      Opportunity.SETRANGE("Contact No.",Contact."No.");
      Opportunity.FINDFIRST;
      Opportunity.AssignQuote;

      // 3. Verify: Verify Sales Quote successfully Assign to Opportunity.
      Opportunity.TESTFIELD("Sales Document Type",Opportunity."Sales Document Type"::Quote);
      Opportunity.TESTFIELD("Sales Document No.",SalesQuoteNo);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerUpdateOpportunity,FormHandlerSalesQuote,ConfirmMessageHandlerForFalse)]
    PROCEDURE MakeOrderFromQuote@31();
    VAR
      Contact@1000 : Record 5050;
      Opportunity@1001 : Record 5092;
      SalesCycleStage@1006 : Record 5091;
      SalesHeader@1005 : Record 36;
    BEGIN
      // Covers document number TC0025 - refer to TFS ID 21735.
      // Test error occurs on Make Order from Assign Sales Quote to Active Opportunity.

      // 1. Setup: Create Contact, Sales Cycle, Sales Cycle Stage and Create Opportunity for Contact.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);

      // Set Global Variable for Form Handler.
      AssignGlobalVariables(ActionType::First,SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);

      CreateOpportunity(Contact."No.");

      // 2. Exercise: Update opportunity for Contact and Assign Sales Quote for Updated opportunity.
      UpdateOpportunityValue(Contact."No.");

      Opportunity.SETRANGE("Contact No.",Contact."No.");
      Opportunity.FINDFIRST;
      Opportunity.AssignQuote;

      // 3. Verify: Verify error occurs on Make Order from Assign Sales Quote to Active Opportunity.
      SalesHeader.GET(SalesHeader."Document Type"::Quote,SalesQuoteNo);
      COMMIT;
      ASSERTERROR CODEUNIT.RUN(CODEUNIT::"Sales-Quote to Order",SalesHeader);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerUpdateOpportunity,FormHandlerSalesQuote,ConfirmMessageHandler,ModalFormCloseOpportunity)]
    PROCEDURE CloseOpportunityWithWon@30();
    VAR
      Contact@1000 : Record 5050;
      Opportunity@1001 : Record 5092;
      SalesCycleStage@1006 : Record 5091;
      SalesHeader@1005 : Record 36;
    BEGIN
      // Covers document number TC0025 - refer to TFS ID 21735.
      // Test Sales Order created after Close Opportunity with Won option having Assigned Sales Quote.

      // 1. Setup: Create Contact, Sales Cycle, Sales Cycle Stage, Create Opportunity for Contact and Update Opportunity.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);

      // Set Global Variable for Form Handler.
      AssignGlobalVariables(ActionType::First,SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);
      ActionTaken := ActionTaken::Won;

      CreateOpportunity(Contact."No.");
      UpdateOpportunityValue(Contact."No.");

      // 2. Exercise: Assign Sales Quote to Opportunity and Make order from assigned Sales Quote.
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      Opportunity.FINDFIRST;
      Opportunity.AssignQuote;
      COMMIT;

      SalesHeader.GET(SalesHeader."Document Type"::Quote,SalesQuoteNo);
      CODEUNIT.RUN(CODEUNIT::"Sales-Quote to Order",SalesHeader);

      // 3. Verify: Verify Sale Quote Deleted and Sale Order Created.
      Assert.IsFalse(
        SalesHeader.GET(SalesHeader."Document Type"::Quote,SalesQuoteNo),
        STRSUBSTNO(ExistError,SalesHeader.TABLECAPTION,SalesHeader."Document Type",SalesQuoteNo));
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("Quote No.",SalesQuoteNo);
      SalesHeader.FINDFIRST;
      SalesHeader.TESTFIELD("Opportunity No.",Opportunity."No.");
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerUpdateOpportunity,ModalFormCloseOpportunity)]
    PROCEDURE SalesQuoteToCloseOpportunity@33();
    VAR
      Contact@1000 : Record 5050;
      Opportunity@1001 : Record 5092;
      SalesCycleStage@1006 : Record 5091;
    BEGIN
      // Covers document number TC0025 - refer to TFS ID 21735.
      // Test error occurs on Assign Sales Quote to close Opportunity.

      // 1. Setup: Create Contact, Sales Cycle, Sales Cycle Stage, Create Opportunity for Contact and Update Opportunity.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);

      // Set Global Variable for Form Handler.
      AssignGlobalVariables(ActionType::First,SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);
      ActionTaken := ActionTaken::Lost;

      CreateOpportunity(Contact."No.");
      UpdateOpportunityValue(Contact."No.");

      // 2. Exercise: Close opportunity for Contact.
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      Opportunity.FINDFIRST;
      Opportunity.CloseOpportunity;

      // 3. Verify: Verify error occurs on Assign Sales Quote to close Opportunity.
      Opportunity.GET(Opportunity."No.");
      ASSERTERROR Opportunity.AssignQuote;
      Assert.AreEqual(
        STRSUBSTNO(AssignSalesQuoteServiceTier,Opportunity.FIELDCAPTION(Status),Opportunity.TABLECAPTION,
          Opportunity.FIELDCAPTION("No."),Opportunity."No.",ActionTaken::Lost),
        GETLASTERRORTEXT,
        UnknownError);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerOpportunityStatis,FormHandlerContactStatis,FormHandlerSalesPersonStatis,FormHandlerSalesCycleStatis,FormHandlerSalesCycleStage)]
    PROCEDURE StatisticsOpenOpportunity@36();
    VAR
      Contact@1000 : Record 5050;
      SalesCycleStage@1006 : Record 5091;
    BEGIN
      // Covers document number TC0026 - refer to TFS ID 21735.
      // Test Opportunity, Contact, Salesperson, Sales cycle and Sales Cycle Stage Statistics values after creation of Opportunity.

      // 1. Setup: Create Contact, Sales Cycle and Sales Cycle Stage.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);

      // Set Global Variable for Form Handler.
      AssignGlobalVariables(ActionType::First,SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);
      ActivateFirstStage := TRUE;
      Completed := SalesCycleStage."Completed %";

      // 2. Exercise: Create opportunity for Contact.
      CreateOpportunity(Contact."No.");

      // 3. Verify: Verify Opportunity, Contact, Salesperson, Sales cycle and Sales Cycle Stage Statistics values.
      RunOpportunityStatistics(Contact."No.");
      VerifyOpportunityStatistics(Opportunity2,CurrentSalesCycleStage,WizardEstimatedValueLCY,WizardChancesOfSuccessPercent,Completed);

      RunContactStatistics(Contact);
      VerifyContactStatistics(Contact2,WizardEstimatedValueLCY,WizardChancesOfSuccessPercent,Completed);

      RunSalespersonStatistics(Contact."Salesperson Code");
      VerifySalespersonStatistics(SalespersonPurchaser2,WizardEstimatedValueLCY,WizardChancesOfSuccessPercent,Completed);

      RunSalesCycleStatistics(SalesCycleStage."Sales Cycle Code");
      VerifySalesCycleStatistics(SalesCycle2,WizardEstimatedValueLCY,WizardChancesOfSuccessPercent,Completed);

      RunSalesCycleStageStatistics(SalesCycleStage);
      VerifySalesStageStatistics(SalesCycleStage2,WizardEstimatedValueLCY,WizardChancesOfSuccessPercent,Completed);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,ModalFormCloseOpportunity,FormHandlerOpportunityStatis,FormHandlerContactStatis,FormHandlerSalesPersonStatis,FormHandlerSalesCycleStatis,FormHandlerSalesCycleStage)]
    PROCEDURE StatisticsCloseOpportunity@39();
    VAR
      Contact@1000 : Record 5050;
      Opportunity@1001 : Record 5092;
      SalesCycleStage@1006 : Record 5091;
    BEGIN
      // Covers document number TC0026 - refer to TFS ID 21735.
      // Test Opportunity, Contact, Salesperson, Sales cycle and Sales Cycle Stage Statistics values after closing of Opportunity.

      // 1. Setup: Create Contact, Sales Cycle Sales Cycle Stage and Create Opportunity for Contact.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);

      // Set Global Variable for Form Handler.
      AssignGlobalVariables(ActionType::First,SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);
      ActivateFirstStage := TRUE;
      Completed := SalesCycleStage."Completed %";
      ActionTaken := ActionTaken::Won;

      CreateOpportunity(Contact."No.");

      // 2. Exercise: Close opportunity for Contact.
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      Opportunity.FINDFIRST;
      Opportunity.CloseOpportunity;

      // 3. Verify: Verify Opportunity, Contact, Salesperson, Sales cycle and Sales Cycle Stage Statistics values.
      RunOpportunityStatistics(Contact."No.");

      // Use 100 for Close Opportunity as Won.
      VerifyOpportunityStatistics(Opportunity2,CurrentSalesCycleStage,WizardEstimatedValueLCY,100,100);

      RunContactStatistics(Contact);
      VerifyContactStatistics(Contact2,WizardEstimatedValueLCY,100,100);

      RunSalespersonStatistics(Contact."Salesperson Code");
      VerifySalespersonStatistics(SalespersonPurchaser2,WizardEstimatedValueLCY,100,100);

      // Use 0 because after Close Activity fields on Sale Cycle and Sales Cycle Stage Statistics updated to 0.
      RunSalesCycleStatistics(SalesCycleStage."Sales Cycle Code");
      VerifySalesCycleStatistics(SalesCycle2,0,0,0);

      RunSalesCycleStageStatistics(SalesCycleStage);
      VerifySalesStageStatistics(SalesCycleStage2,0,0,0);
    END;

    [Test]
    [HandlerFunctions(ModalFormHandlerOpportunity,FormHandlerUpdateOpportunity)]
    PROCEDURE VerifySalesCycleStageDescOnOppEntry@17();
    VAR
      SalesCycleStage@1000 : Record 5091;
      OpportunityEntry@1001 : Record 5093;
      Contact@1004 : Record 5050;
      OpportunityCard@1005 : TestPage 5124;
    BEGIN
      // [FEATURE] [UI]
      // [SCENARIO 208522] Field "Sales Cycle Stage Description" of Opportunity Entry update correctly when new entry is inserting and the value have to be shown in Opportunity Card.
      Initialize;

      // [GIVEN] "Contact" = "C" and "Sales Cycle Stage" with Description = "Descr"
      CreateContactWithSalesCycle(SalesCycleStage,Contact);
      LibraryUtility.FillMaxText(SalesCycleStage,SalesCycleStage.FIELDNO(Description));
      SalesCycleStage.GET(SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);
      AssignGlobalVariables(ActionType::First,SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);

      // [GIVEN] Opportunity for contact - "C"
      CreateOpportunity(Contact."No.");

      // [WHEN] Updating the opportunity
      UpdateOpportunityValue(Contact."No.");

      // [THEN] "Opportunity Entry"."Description" = "Descr"
      OpportunityEntry.SETRANGE("Sales Cycle Code",SalesCycleStage."Sales Cycle Code");
      OpportunityEntry.SETRANGE("Sales Cycle Stage",SalesCycleStage.Stage);
      OpportunityEntry.FINDFIRST;
      OpportunityEntry.TESTFIELD("Sales Cycle Stage Description",SalesCycleStage.Description);

      // [THEN] Page Opportunity Card is showing value of Sales Cycle Stage Description = "Descr"
      OpportunityCard.OPENVIEW;
      OpportunityCard.GOTOKEY(OpportunityEntry."Opportunity No.");
      OpportunityCard.Control25."Sales Cycle Stage Description".ASSERTEQUALS(SalesCycleStage.Description);
    END;

    [Test]
    PROCEDURE VerifySalesCycleStageDescOnOppEntryAfterValidateSalesCycleStage@60();
    VAR
      OpportunityEntry@1000 : Record 5093;
      SalesCycleStage@1001 : Record 5091;
      SalesCycle@1002 : Record 5090;
    BEGIN
      // [FEATURE] [UT]
      // [SCENARIO 208552] Value of "Sales Cycle Stage Description" of Opportunity Entry have to be filled after Validation of "Sales Cycle Stage"
      Initialize;

      // [GIVEN] "Sales Cycle Stage" with Description = "DESCR1" and "Sales Cycle Code" = "SCC"
      LibraryMarketing.CreateSalesCycle(SalesCycle);
      LibraryMarketing.CreateSalesCycleStage(SalesCycleStage,SalesCycle.Code);
      LibraryUtility.FillMaxText(SalesCycle,SalesCycle.FIELDNO(Description));
      SalesCycleStage.GET(SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);

      // [GIVEN] "Opportunity Entry" with "Sales Cycle Stage Description" = "DESCR2" and "Sales Cycle Code" = "SCC"
      OpportunityEntry.INIT;
      OpportunityEntry."Entry No." := LibraryUtility.GetNewRecNo(OpportunityEntry,OpportunityEntry.FIELDNO("Entry No."));
      OpportunityEntry."Sales Cycle Code" := SalesCycleStage."Sales Cycle Code";
      OpportunityEntry.INSERT;
      LibraryUtility.FillMaxText(OpportunityEntry,OpportunityEntry.FIELDNO("Sales Cycle Stage Description"));
      OpportunityEntry.GET(OpportunityEntry."Entry No.");

      // [WHEN] Validate "Opportunity Entry"."Sales Cycle Stage"
      OpportunityEntry.VALIDATE("Sales Cycle Stage",SalesCycleStage.Stage);

      // [THEN] "Opportunity Entry"."Sales Cycle Stage Description" = "DESCR1"
      OpportunityEntry.TESTFIELD("Sales Cycle Stage Description",SalesCycleStage.Description);
    END;

    LOCAL PROCEDURE Initialize@4();
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibrarySales.SetCreditWarningsToNoWarnings;

      IsInitialized := TRUE;
      COMMIT;
    END;

    LOCAL PROCEDURE InitializeGlobalVariable@162();
    BEGIN
      SalesCycleCode := '';
      CurrentSalesCycleStage := 0;
      WizardEstimatedValueLCY := 0;
      WizardChancesOfSuccessPercent := 0;
      CLEAR(ActionType);
      SalespersonCode := '';
      SalesQuoteNo := '';
      CLEAR(ActionTaken);
      ActivateFirstStage := FALSE;
      Completed := 0;
    END;

    LOCAL PROCEDURE AssignGlobalVariables@9(ActionType2@1000 : Option;SalesCycleCode2@1001 : Code[10];Stage@1002 : Integer);
    BEGIN
      InitializeGlobalVariable;
      ActionType := ActionType2;
      SalesCycleCode := SalesCycleCode2;

      // Use Random because value is not important.
      WizardEstimatedValueLCY := RANDOM(100);
      WizardChancesOfSuccessPercent := RANDOM(100);
      CurrentSalesCycleStage := Stage;
    END;

    LOCAL PROCEDURE CreateAttendee@40(VAR TempAttendee@1000 : TEMPORARY Record 5199;AttendeeNo@1003 : Code[20]);
    BEGIN
      TempAttendee.INIT;
      TempAttendee.VALIDATE("Attendance Type",TempAttendee."Attendance Type"::"To-do Organizer");
      TempAttendee.VALIDATE("Attendee Type",TempAttendee."Attendee Type"::Salesperson);
      TempAttendee.VALIDATE("Line No.",10000);  // Use 10000 for Line No.
      TempAttendee.VALIDATE("Attendee No.",AttendeeNo);
      TempAttendee.INSERT;
    END;

    LOCAL PROCEDURE CreateAndUpdateOpportunity@13(VAR Opportunity@1000 : Record 5092;VAR SalesCycleStage@1001 : Record 5091);
    VAR
      Contact@1002 : Record 5050;
      TempOpportunity@1003 : TEMPORARY Record 5092;
    BEGIN
      // 1. Setup: Create Contact, Sales Cycle, Sales Cycle Stage and Opportunity for Contact.
      CreateContactWithSalesCycle(SalesCycleStage,Contact);

      // Set Global Variable for Form Handler.
      AssignGlobalVariables(ActionType::First,SalesCycleStage."Sales Cycle Code",SalesCycleStage.Stage);

      Opportunity.SETRANGE("Contact No.",Contact."No.");
      TempOpportunity.CreateOppFromOpp(Opportunity);
      COMMIT;

      // 2. Exercise: Update Opportunity.
      Opportunity.SETRANGE("Contact No.",Contact."No.");
      Opportunity.FINDFIRST;
      Opportunity.UpdateOpportunity;
    END;

    LOCAL PROCEDURE CreateContactWithSalesCycle@113(VAR SalesCycleStage@1002 : Record 5091;VAR Contact@1007 : Record 5050);
    VAR
      BusinessRelation@1003 : Record 5053;
      ContactBusinessRelation@1004 : Record 5054;
      SalespersonPurchaser@1001 : Record 13;
      SalesCycle@1000 : Record 5090;
    BEGIN
      Initialize;
      LibraryMarketing.CreateContact(Contact);
      LibraryMarketing.CreateBusinessRelation(BusinessRelation);
      LibraryMarketing.CreateContactBusinessRelation(ContactBusinessRelation,Contact."No.",BusinessRelation.Code);
      ContactBusinessRelation."Link to Table" := ContactBusinessRelation."Link to Table"::Customer;
      ContactBusinessRelation."No." := LibrarySales.CreateCustomerNo;
      ContactBusinessRelation.MODIFY(TRUE);
      CreateSalespersonWithEmail(SalespersonPurchaser);
      Contact.VALIDATE("Salesperson Code",SalespersonPurchaser.Code);
      Contact.MODIFY(TRUE);

      LibraryMarketing.CreateSalesCycle(SalesCycle);
      CreateSalesCycleStage(SalesCycleStage,SalesCycle.Code);
    END;

    LOCAL PROCEDURE CreateOpportunity@55(ContactNo@1000 : Code[20]);
    VAR
      Opportunity@1001 : Record 5092;
      TempOpportunity@1002 : TEMPORARY Record 5092;
    BEGIN
      Opportunity.SETRANGE("Contact No.",ContactNo);
      TempOpportunity.CreateOppFromOpp(Opportunity);
    END;

    LOCAL PROCEDURE CreateSalesCycleStage@85(VAR SalesCycleStage@1000 : Record 5091;SalesCycleCode@1001 : Code[10]);
    VAR
      Activity@1002 : Record 5081;
    BEGIN
      Activity.FINDFIRST;
      LibraryMarketing.CreateSalesCycleStage(SalesCycleStage,SalesCycleCode);
      SalesCycleStage.VALIDATE("Completed %",RANDOM(100));  // Use Random because value is not important.
      SalesCycleStage.VALIDATE("Activity Code",Activity.Code);
      SalesCycleStage.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateSalespersonWithEmail@47(VAR SalespersonPurchaser@1000 : Record 13);
    BEGIN
      LibrarySales.CreateSalesperson(SalespersonPurchaser);
      SalespersonPurchaser.VALIDATE(
        "E-Mail",LibraryUtility.GenerateRandomCode(SalespersonPurchaser.FIELDNO("E-Mail"),DATABASE::"Salesperson/Purchaser"));
      SalespersonPurchaser.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PerformOpportunityNextWizard@180(VAR TempOpportunity@1000 : TEMPORARY Record 5092);
    BEGIN
      TempOpportunity.MODIFY;
      TempOpportunity.CheckStatus;
      TempOpportunity.PerformNextWizardStatus;
    END;

    LOCAL PROCEDURE PerformToDoNextWizard@183(VAR TempToDo@1000 : TEMPORARY Record 5080);
    BEGIN
      TempToDo.MODIFY;
      TempToDo.CheckStatus;
      TempToDo.PerformNextWizardStatus;
    END;

    LOCAL PROCEDURE RunContactStatistics@15(Contact@1000 : Record 5050);
    VAR
      ContactStatistics@1001 : Page 5053;
    BEGIN
      CLEAR(ContactStatistics);
      ContactStatistics.SETRECORD(Contact);
      ContactStatistics.RUN;
    END;

    LOCAL PROCEDURE RunOpportunityStatistics@14(ContactNo@1000 : Code[20]);
    VAR
      Opportunity@1001 : Record 5092;
      OpportunityStatistics@1002 : Page 5127;
    BEGIN
      CLEAR(OpportunityStatistics);
      Opportunity.SETRANGE("Contact No.",ContactNo);
      Opportunity.FINDFIRST;
      OpportunityStatistics.SETRECORD(Opportunity);
      OpportunityStatistics.RUN;
    END;

    LOCAL PROCEDURE RunSalesCycleStatistics@52(SalesCycleCode@1000 : Code[10]);
    VAR
      SalesCycle@1001 : Record 5090;
      SalesCycleStatistics@1002 : Page 5120;
    BEGIN
      CLEAR(SalesCycleStatistics);
      SalesCycle.SETRANGE(Code,SalesCycleCode);
      SalesCycle.FINDFIRST;
      SalesCycleStatistics.SETRECORD(SalesCycle);
      SalesCycleStatistics.RUN;
    END;

    LOCAL PROCEDURE RunSalesCycleStageStatistics@53(SalesCycleStage@1001 : Record 5091);
    VAR
      SalesCycleStageStatistics@1000 : Page 5122;
    BEGIN
      CLEAR(SalesCycleStageStatistics);
      SalesCycleStageStatistics.SETRECORD(SalesCycleStage);
      SalesCycleStageStatistics.RUN;
    END;

    LOCAL PROCEDURE RunSalespersonStatistics@51(SalespersonCode@1000 : Code[10]);
    VAR
      SalespersonPurchaser@1001 : Record 13;
      SalespersonStatistics@1002 : Page 5117;
    BEGIN
      CLEAR(SalespersonStatistics);
      SalespersonPurchaser.SETRANGE(Code,SalespersonCode);
      SalespersonPurchaser.FINDFIRST;
      SalespersonStatistics.SETRECORD(SalespersonPurchaser);
      SalespersonStatistics.RUN;
    END;

    LOCAL PROCEDURE UpdateOpportunityValue@65(ContactNo@1000 : Code[20]);
    VAR
      Opportunity@1001 : Record 5092;
    BEGIN
      Opportunity.SETRANGE("Contact No.",ContactNo);
      Opportunity.FINDFIRST;
      Opportunity.UpdateOpportunity;
    END;

    LOCAL PROCEDURE VerifyContactStatistics@41(Contact@1004 : Record 5050;WizardEstimatedValueLCY2@1002 : Decimal;WizardChancesOfSuccessPercent2@1001 : Decimal;Completed2@1000 : Decimal);
    BEGIN
      Contact.CALCFIELDS("No. of Opportunities","Estimated Value (LCY)","Calcd. Current Value (LCY)");
      Contact.TESTFIELD("Estimated Value (LCY)",WizardEstimatedValueLCY2);
      Contact.TESTFIELD("No. of Opportunities",1);
      Contact.TESTFIELD(
        "Calcd. Current Value (LCY)",WizardEstimatedValueLCY2 * (WizardChancesOfSuccessPercent2 / 100) * (Completed2 / 100));
    END;

    LOCAL PROCEDURE VerifyOpportunityValues@25(SalesCycleStage@1000 : Record 5091;ContactNo@1004 : Code[20];WizardEstimatedValueLCY2@1002 : Decimal;WizardChancesOfSuccessPercent2@1001 : Decimal);
    VAR
      Opportunity@1003 : Record 5092;
    BEGIN
      Opportunity.SETRANGE("Contact No.",ContactNo);
      Opportunity.FINDFIRST;
      Opportunity.TESTFIELD("Sales Cycle Code",SalesCycleStage."Sales Cycle Code");
      Opportunity.CALCFIELDS("Current Sales Cycle Stage","Estimated Value (LCY)","Chances of Success %");
      Opportunity.TESTFIELD("Current Sales Cycle Stage",SalesCycleStage.Stage);
      Opportunity.TESTFIELD("Estimated Value (LCY)",WizardEstimatedValueLCY2);
      Opportunity.TESTFIELD("Chances of Success %",WizardChancesOfSuccessPercent2);
    END;

    LOCAL PROCEDURE VerifyOpportunityStatistics@45(Opportunity@1000 : Record 5092;CurrentSalesCycleStage2@1004 : Integer;WizardEstimatedValueLCY2@1003 : Decimal;WizardChancesOfSuccessPercent2@1002 : Decimal;Completed2@1001 : Decimal);
    BEGIN
      Opportunity.CALCFIELDS(
        "Estimated Value (LCY)","Chances of Success %","Current Sales Cycle Stage","Completed %","Calcd. Current Value (LCY)");
      Opportunity.TESTFIELD("Estimated Value (LCY)",WizardEstimatedValueLCY2);
      Opportunity.TESTFIELD("Chances of Success %",WizardChancesOfSuccessPercent2);
      Opportunity.TESTFIELD("Completed %",Completed2);

      IF Completed2 <> 100 THEN BEGIN  // Use 100 for Close Opportunity as Won.
        Opportunity.TESTFIELD("Current Sales Cycle Stage",CurrentSalesCycleStage2);
        Opportunity.TESTFIELD(
          "Calcd. Current Value (LCY)",WizardEstimatedValueLCY2 * (WizardChancesOfSuccessPercent2 / 100) * (Completed2 / 100));
      END;
    END;

    LOCAL PROCEDURE VerifySalesCycleStatistics@54(SalesCycle@1003 : Record 5090;WizardEstimatedValueLCY2@1002 : Decimal;WizardChancesOfSuccessPercent2@1001 : Decimal;Completed2@1000 : Decimal);
    BEGIN
      SalesCycle.CALCFIELDS("No. of Opportunities","Estimated Value (LCY)","Calcd. Current Value (LCY)");
      SalesCycle.TESTFIELD("Estimated Value (LCY)",WizardEstimatedValueLCY2);

      // Use 0 for Close Opportunity.
      IF WizardEstimatedValueLCY2 = 0 THEN
        SalesCycle.TESTFIELD("No. of Opportunities",0)
      ELSE
        SalesCycle.TESTFIELD("No. of Opportunities",1);  // Use 1 for Active Opportunity.
      SalesCycle.TESTFIELD(
        "Calcd. Current Value (LCY)",WizardEstimatedValueLCY2 * (WizardChancesOfSuccessPercent2 / 100) * (Completed2 / 100));
    END;

    LOCAL PROCEDURE VerifySalesStageStatistics@57(SalesCycleStage@1003 : Record 5091;WizardEstimatedValueLCY2@1002 : Decimal;WizardChancesOfSuccessPercent2@1001 : Decimal;Completed2@1000 : Decimal);
    BEGIN
      SalesCycleStage.CALCFIELDS("No. of Opportunities","Estimated Value (LCY)","Calcd. Current Value (LCY)");
      SalesCycleStage.TESTFIELD("Estimated Value (LCY)",WizardEstimatedValueLCY2);

      // Use 0 for Close Opportunity.
      IF WizardEstimatedValueLCY2 = 0 THEN
        SalesCycleStage.TESTFIELD("No. of Opportunities",0)
      ELSE
        SalesCycleStage.TESTFIELD("No. of Opportunities",1);  // Use 1 for Active Opportunity.
      SalesCycleStage.TESTFIELD(
        "Calcd. Current Value (LCY)",WizardEstimatedValueLCY2 * (WizardChancesOfSuccessPercent2 / 100) * (Completed2 / 100));
    END;

    LOCAL PROCEDURE VerifySalespersonStatistics@43(SalespersonPurchaser@1004 : Record 13;WizardEstimatedValueLCY2@1002 : Decimal;WizardChancesOfSuccessPercent2@1001 : Decimal;Completed2@1000 : Decimal);
    BEGIN
      SalespersonPurchaser.CALCFIELDS("No. of Opportunities","Estimated Value (LCY)","Calcd. Current Value (LCY)");
      SalespersonPurchaser.TESTFIELD("Estimated Value (LCY)",WizardEstimatedValueLCY2);
      SalespersonPurchaser.TESTFIELD("No. of Opportunities",1);  // Use 1 for Active Opportunity.
      SalespersonPurchaser.TESTFIELD(
        "Calcd. Current Value (LCY)",WizardEstimatedValueLCY2 * (WizardChancesOfSuccessPercent2 / 100) * (Completed2 / 100));
    END;

    LOCAL PROCEDURE VerifyValuesOnOpportunity@58(ContactNo@1006 : Code[20];ProbabilityCalculation@1000 : Option;WizardEstimatedValueLCY2@1004 : Decimal;WizardChancesOfSuccessPercent2@1003 : Decimal;Completed2@1002 : Decimal);
    VAR
      SalesCycle@1005 : Record 5090;
      Opportunity@1001 : Record 5092;
    BEGIN
      Opportunity.SETRANGE("Contact No.",ContactNo);
      Opportunity.FINDFIRST;
      Opportunity.CALCFIELDS("Calcd. Current Value (LCY)","Probability %");
      IF ProbabilityCalculation = SalesCycle."Probability Calculation"::"Completed %" THEN BEGIN
        Opportunity.TESTFIELD("Probability %",Completed2);
        Opportunity.TESTFIELD("Calcd. Current Value (LCY)",WizardEstimatedValueLCY2 * Completed2 / 100);
      END;

      IF ProbabilityCalculation = SalesCycle."Probability Calculation"::"Chances of Success %" THEN BEGIN
        Opportunity.TESTFIELD("Probability %",WizardChancesOfSuccessPercent2);
        Opportunity.TESTFIELD("Calcd. Current Value (LCY)",WizardEstimatedValueLCY2 * WizardChancesOfSuccessPercent2 / 100);
      END;

      IF ProbabilityCalculation = SalesCycle."Probability Calculation"::Add THEN BEGIN
        Opportunity.TESTFIELD("Probability %",(WizardChancesOfSuccessPercent2 + Completed2) / 2);
        Opportunity.TESTFIELD(
          "Calcd. Current Value (LCY)",WizardEstimatedValueLCY2 * ((WizardChancesOfSuccessPercent2 + Completed2) / 2) / 100);
      END;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandler@121(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [ConfirmHandler]
    PROCEDURE ConfirmMessageHandlerForFalse@35(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := FALSE;
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormCloseOpportunity@5(VAR CloseOpportunity@1000 : Page 5128;VAR Response@1001 : Action);
    VAR
      TempOpportunityEntry@1003 : TEMPORARY Record 5093;
      CloseOpportunityCode@1004 : Record 5094;
    BEGIN
      TempOpportunityEntry.INIT;
      CloseOpportunity.GETRECORD(TempOpportunityEntry);
      TempOpportunityEntry.INSERT;
      TempOpportunityEntry.VALIDATE("Action Taken",ActionTaken);
      TempOpportunityEntry.CheckStatus;
      TempOpportunityEntry.PerformNextWizardStatus;

      IF ActionTaken = ActionTaken::Won THEN
        CloseOpportunityCode.SETRANGE(Type,CloseOpportunityCode.Type::Won)
      ELSE
        CloseOpportunityCode.SETRANGE(Type,CloseOpportunityCode.Type::Lost);
      CloseOpportunityCode.FINDFIRST;

      TempOpportunityEntry.VALIDATE("Close Opportunity Code",CloseOpportunityCode.Code);
      TempOpportunityEntry.VALIDATE("Calcd. Current Value (LCY)",WizardEstimatedValueLCY);
      TempOpportunityEntry.CheckStatus;
      TempOpportunityEntry.FinishWizard;
    END;

    [ModalPageHandler]
    PROCEDURE ModalFormHandlerOpportunity@8(VAR CreateOpportunity@1000 : Page 5126;VAR Response@1001 : Action);
    VAR
      TempOpportunity@1002 : TEMPORARY Record 5092;
    BEGIN
      TempOpportunity.INIT;
      CreateOpportunity.GETRECORD(TempOpportunity);
      TempOpportunity.INSERT;
      TempOpportunity.VALIDATE(
        Description,LibraryUtility.GenerateRandomCode(TempOpportunity.FIELDNO(Description),DATABASE::Opportunity));
      PerformOpportunityNextWizard(TempOpportunity);
      TempOpportunity.VALIDATE("Sales Cycle Code",SalesCycleCode);

      PerformOpportunityNextWizard(TempOpportunity);
      PerformOpportunityNextWizard(TempOpportunity);
      IF ActivateFirstStage THEN BEGIN
        TempOpportunity.VALIDATE("Activate First Stage",TRUE);
        TempOpportunity.VALIDATE("Wizard Estimated Value (LCY)",WizardEstimatedValueLCY);
        TempOpportunity.VALIDATE("Wizard Chances of Success %",WizardChancesOfSuccessPercent);
        TempOpportunity.VALIDATE("Wizard Estimated Closing Date",CALCDATE('<1D>',WORKDATE));
      END;

      TempOpportunity.CheckStatus;
      TempOpportunity.FinishWizard;
    END;

    [ModalPageHandler]
    PROCEDURE FormHandlerUpdateOpportunity@2(VAR UpdateOpportunity@1000 : Page 5129;VAR Response@1001 : Action);
    VAR
      TempOpportunityEntry@1002 : TEMPORARY Record 5093;
    BEGIN
      TempOpportunityEntry.INIT;
      UpdateOpportunity.GETRECORD(TempOpportunityEntry);
      TempOpportunityEntry.INSERT;
      TempOpportunityEntry.CreateStageList;
      TempOpportunityEntry.VALIDATE("Action Type",ActionType);
      TempOpportunityEntry.MODIFY;
      TempOpportunityEntry.CheckStatus2;
      TempOpportunityEntry.PerformNextWizardStatus2;

      TempOpportunityEntry.VALIDATE("Sales Cycle Stage",CurrentSalesCycleStage);
      TempOpportunityEntry.MODIFY;
      TempOpportunityEntry.CheckStatus2;
      TempOpportunityEntry.PerformNextWizardStatus2;

      TempOpportunityEntry.VALIDATE("Estimated Value (LCY)",WizardEstimatedValueLCY);
      TempOpportunityEntry.VALIDATE("Chances of Success %",WizardChancesOfSuccessPercent);
      TempOpportunityEntry.VALIDATE("Estimated Close Date",CALCDATE('<1D>',WORKDATE));
      TempOpportunityEntry.MODIFY;

      TempOpportunityEntry.CheckStatus2;
      TempOpportunityEntry.FinishWizard2;
    END;

    [ModalPageHandler]
    PROCEDURE ModalHandlerOpportunityToDo@46(VAR CreateToDo@1000 : Page 5097;VAR Response@1001 : Action);
    VAR
      TempToDo@1002 : TEMPORARY Record 5080;
      TempAttendee@1003 : TEMPORARY Record 5199;
    BEGIN
      TempToDo.INIT;
      CreateToDo.GETRECORD(TempToDo);
      TempToDo.INSERT;
      TempToDo.VALIDATE(Type,TempToDo.Type::Meeting);
      TempToDo.VALIDATE(Description,TempToDo."Opportunity No.");
      TempToDo.VALIDATE(Date,WORKDATE);
      TempToDo.VALIDATE("All Day Event",TRUE);
      PerformToDoNextWizard(TempToDo);
      CreateAttendee(TempAttendee,SalespersonCode);

      TempToDo.SetAttendee(TempAttendee);
      TempToDo.GetAttendee(TempAttendee);
      PerformToDoNextWizard(TempToDo);

      TempToDo.VALIDATE(Priority,TempToDo.Priority::Low);
      PerformToDoNextWizard(TempToDo);
      TempToDo.CheckStatus;
      TempToDo.FinishWizard;
    END;

    [PageHandler]
    PROCEDURE FormHandlerSalesQuote@29(VAR SalesQuote@1000 : Page 41);
    VAR
      SalesHeader@1001 : Record 36;
      Customer@1002 : Record 18;
    BEGIN
      SalesHeader.INIT;
      SalesQuote.GETRECORD(SalesHeader);
      LibrarySales.CreateCustomer(Customer);
      SalesHeader."Sell-to Customer No." := Customer."No.";  // Assign value to avoid Confirmation Message.
      SalesHeader."Bill-to Customer No." := Customer."No.";  // Assign value to avoid Confirmation Message. Value important for IN.
      SalesHeader.MODIFY(TRUE);
      SalesQuoteNo := SalesHeader."No.";
    END;

    [PageHandler]
    PROCEDURE FormHandlerOpportunityStatis@44(VAR OpportunityStatistics@1000 : Page 5127);
    BEGIN
      Opportunity2.INIT;
      OpportunityStatistics.GETRECORD(Opportunity2);
    END;

    [PageHandler]
    PROCEDURE FormHandlerContactStatis@38(VAR ContactStatistics@1000 : Page 5053);
    BEGIN
      Contact2.INIT;
      ContactStatistics.GETRECORD(Contact2);
    END;

    [PageHandler]
    PROCEDURE FormHandlerSalesPersonStatis@37(VAR SalespersonStatistics@1000 : Page 5117);
    BEGIN
      SalespersonPurchaser2.INIT;
      SalespersonStatistics.GETRECORD(SalespersonPurchaser2);
    END;

    [PageHandler]
    PROCEDURE FormHandlerSalesCycleStatis@42(VAR SalesCycleStatistics@1000 : Page 5120);
    BEGIN
      SalesCycle2.INIT;
      SalesCycleStatistics.GETRECORD(SalesCycle2);
    END;

    [PageHandler]
    PROCEDURE FormHandlerSalesCycleStage@48(VAR SalesCycleStageStatistics@1000 : Page 5122);
    BEGIN
      SalesCycleStage2.INIT;
      SalesCycleStageStatistics.GETRECORD(SalesCycleStage2);
    END;

    BEGIN
    {
      // [FEATURE] [Opportunity] [Marketing]
      Test for Batch Jobs:
        1. Test Setting up sales cycles and sales cycle stages.
        2. Test Creating Opportunity with Sales Cycle of Probability Calculation Add.
        3. Test Creating Opportunity with Sales Cycle of Probability Calculation Chances of Success %.
        4. Test Creating Opportunity with Sales Cycle of Probability Calculation Completed %.
        5. Test Creating, modifying, and deleting opportunities.
        6. Test Activating and updating opportunities using the Update Opportunity wizard.
        7. Test Creating, modifying and deleting to-dos for opportunities.
        8. Test Creating sales documents for opportunities.
        9. Test the Statistics functionality.

      Covered Test cases:
        TFS_TC_ID=123221
        TFS_TC_ID=123222
        TFS_TC_ID=123223
        TFS_TC_ID=123224
        TFS_TC_ID=123225
        TFS_TC_ID=123226
    }
    END.
  }
}

