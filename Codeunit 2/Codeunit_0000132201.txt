OBJECT Codeunit 132201 Library - Inventory
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      InventorySetup@1004 : Record 313;
      LibraryERM@1002 : Codeunit 131300;
      LibraryManufacturing@1006 : Codeunit 132202;
      LibraryPurchase@1000 : Codeunit 130512;
      LibraryUtility@1001 : Codeunit 131000;
      JOURNAL@1003 : TextConst 'ENU=" journal"';
      ReserveConfirmMsg@1011 : TextConst 'ENU=Do you want to reserve specific serial or lot numbers?';

    PROCEDURE CalculateInventory@61(ItemJournalLine@1004 : Record 83;ItemNo@1003 : Code[20];PostingDate@1001 : Date;ItemsNotOnInvt@1005 : Boolean);
    VAR
      Item@1002 : Record 27;
      CalculateInventory@1000 : Report 790;
    BEGIN
      CLEAR(CalculateInventory);
      Item.SETRANGE("No.",ItemNo);
      CalculateInventory.USEREQUESTPAGE(FALSE);
      CalculateInventory.SETTABLEVIEW(Item);
      CalculateInventory.SetItemJnlLine(ItemJournalLine);
      CalculateInventory.InitializeRequest(PostingDate,ItemJournalLine."Document No.",ItemsNotOnInvt);
      CalculateInventory.RUN;
    END;

    PROCEDURE CreateAnalysisColumnTemplate@39(VAR AnalysisColumnTemplate@1000 : Record 7116;AnalysisArea@1001 : Option);
    BEGIN
      AnalysisColumnTemplate.INIT;
      AnalysisColumnTemplate.VALIDATE("Analysis Area",AnalysisArea);
      AnalysisColumnTemplate.VALIDATE(
        Name,LibraryUtility.GenerateRandomCode(AnalysisColumnTemplate.FIELDNO(Name),DATABASE::"Analysis Column Template"));
      AnalysisColumnTemplate.INSERT(TRUE);
    END;

    PROCEDURE CreateAnalysisColumn@6(VAR AnalysisColumn@1000 : Record 7118;AnalysisArea@1001 : Option;AnalysisColumnTemplateName@1002 : Code[10]);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      AnalysisColumn.INIT;
      AnalysisColumn.VALIDATE("Analysis Area",AnalysisArea);
      AnalysisColumn.VALIDATE("Analysis Column Template",AnalysisColumnTemplateName);
      RecRef.GETTABLE(AnalysisColumn);
      AnalysisColumn.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,AnalysisColumn.FIELDNO("Line No.")));
      AnalysisColumn.INSERT(TRUE);
    END;

    PROCEDURE CreateBaseCalendarChange@7(VAR BaseCalendarChange@1006 : Record 7601;BaseCalendarCode@1003 : Code[10];RecurringSystem@1004 : Option;Date@1000 : Date;Day@1005 : Option);
    BEGIN
      BaseCalendarChange.INIT;
      BaseCalendarChange.VALIDATE("Base Calendar Code",BaseCalendarCode);
      BaseCalendarChange.VALIDATE("Recurring System",RecurringSystem);
      BaseCalendarChange.VALIDATE(Date,Date);
      BaseCalendarChange.VALIDATE(Day,Day);
      BaseCalendarChange.INSERT(TRUE);
    END;

    PROCEDURE ClearItemJournal@134(ItemJournalTemplate@1002 : Record 82;ItemJournalBatch@1001 : Record 233);
    VAR
      ItemJournalLine@1000 : Record 83;
    BEGIN
      CLEAR(ItemJournalLine);
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalTemplate.Name);
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      ItemJournalLine.DELETEALL;
    END;

    PROCEDURE CreateAnalysisLine@124(VAR AnalysisLine@1000 : Record 7114;AnalysisArea@1001 : Option;AnalysisLineTemplateName@1002 : Code[10]);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      AnalysisLine.INIT;
      AnalysisLine.VALIDATE("Analysis Area",AnalysisArea);
      AnalysisLine.VALIDATE("Analysis Line Template Name",AnalysisLineTemplateName);
      RecRef.GETTABLE(AnalysisLine);
      AnalysisLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,AnalysisLine.FIELDNO("Line No.")));
      AnalysisLine.INSERT(TRUE);
    END;

    PROCEDURE CreateAnalysisLineTemplate@138(VAR AnalysisLineTemplate@1000 : Record 7112;AnalysisArea@1001 : Option);
    BEGIN
      AnalysisLineTemplate.INIT;
      AnalysisLineTemplate.VALIDATE("Analysis Area",AnalysisArea);
      AnalysisLineTemplate.VALIDATE(
        Name,LibraryUtility.GenerateRandomCode(AnalysisLineTemplate.FIELDNO(Name),DATABASE::"Analysis Line Template"));
      AnalysisLineTemplate.INSERT(TRUE);
    END;

    PROCEDURE CreateAnalysisReportName@62(VAR AnalysisReportName@1000 : Record 7111;AnalysisArea@1001 : Option);
    BEGIN
      AnalysisReportName.INIT;
      AnalysisReportName.VALIDATE("Analysis Area",AnalysisArea);
      AnalysisReportName.VALIDATE(
        Name,LibraryUtility.GenerateRandomCode(AnalysisReportName.FIELDNO(Name),DATABASE::"Analysis Report Name"));
      AnalysisReportName.INSERT(TRUE);
    END;

    PROCEDURE CreateAndUpdateTransferRoute@60(VAR TransferRoute@1005 : Record 5742;TransferFrom@1001 : Code[10];TransferTo@1000 : Code[10];InTransitCode@1004 : Code[10];ShippingAgentCode@1002 : Code[10];ShippingAgentServiceCode@1003 : Code[10]);
    BEGIN
      CreateTransferRoute(TransferRoute,TransferFrom,TransferTo);
      TransferRoute.VALIDATE("In-Transit Code",InTransitCode);
      TransferRoute.VALIDATE("Shipping Agent Code",ShippingAgentCode);
      TransferRoute.VALIDATE("Shipping Agent Service Code",ShippingAgentServiceCode);
      TransferRoute.MODIFY(TRUE);
    END;

    PROCEDURE CreateSerialNoInformation@33(VAR SerialNoInformation@1004 : Record 6504;ItemNo@1001 : Code[20];VariantCode@1002 : Code[10];SerialNo@1003 : Code[20]);
    BEGIN
      CLEAR(SerialNoInformation);
      SerialNoInformation.INIT;
      SerialNoInformation.VALIDATE("Item No.",ItemNo);
      SerialNoInformation.VALIDATE("Variant Code",VariantCode);
      SerialNoInformation.VALIDATE("Serial No.",SerialNo);
      SerialNoInformation.INSERT(TRUE);
    END;

    PROCEDURE CreateLotNoInformation@35(VAR LotNoInformation@1004 : Record 6505;ItemNo@1001 : Code[20];VariantCode@1002 : Code[10];LotNo@1003 : Code[20]);
    BEGIN
      CLEAR(LotNoInformation);
      LotNoInformation.INIT;
      LotNoInformation.VALIDATE("Item No.",ItemNo);
      LotNoInformation.VALIDATE("Variant Code",VariantCode);
      LotNoInformation.VALIDATE("Lot No.",LotNo);
      LotNoInformation.INSERT(TRUE);
    END;

    PROCEDURE CreateInventoryPostingGroup@148(VAR InventoryPostingGroup@1000 : Record 94);
    BEGIN
      CLEAR(InventoryPostingGroup);
      InventoryPostingGroup.INIT;
      InventoryPostingGroup.VALIDATE(Code,
        LibraryUtility.GenerateRandomCode(InventoryPostingGroup.FIELDNO(Code),DATABASE::"Inventory Posting Group"));
      InventoryPostingGroup.VALIDATE(Description,InventoryPostingGroup.Code);
      InventoryPostingGroup.INSERT(TRUE);
    END;

    PROCEDURE CreateInventoryPeriod@149(VAR InventoryPeriod@1000 : Record 5814;EndingDate@1001 : Date);
    BEGIN
      CLEAR(InventoryPeriod);
      IF InventoryPeriod.GET(EndingDate) THEN
        EXIT;
      InventoryPeriod.INIT;
      InventoryPeriod.VALIDATE("Ending Date",EndingDate);
      InventoryPeriod.INSERT(TRUE);
    END;

    PROCEDURE CreateInventoryPostingSetup@32(VAR InventoryPostingSetup@1000 : Record 5813;LocationCode@1001 : Text[10];PostingGroupCode@1002 : Text[10]);
    BEGIN
      CLEAR(InventoryPostingSetup);
      InventoryPostingSetup.INIT;
      InventoryPostingSetup.VALIDATE("Location Code",LocationCode);
      InventoryPostingSetup.VALIDATE("Invt. Posting Group Code",PostingGroupCode);
      InventoryPostingSetup.INSERT(TRUE);
    END;

    PROCEDURE CreateItem@18(VAR Item@1000 : Record 27) : Code[20];
    VAR
      InventorySetup@1005 : Record 313;
      ItemUnitOfMeasure@1001 : Record 5404;
      GeneralPostingSetup@1002 : Record 252;
      InventoryPostingGroup@1003 : Record 94;
      VATPostingSetup@1004 : Record 325;
      TaxGroup@1111 : Record 321;
    BEGIN
      ItemNoSeriesSetup(InventorySetup);
      CLEAR(Item);
      Item.INSERT(TRUE);

      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",'',1);

      LibraryERM.FindGeneralPostingSetupInvtFull(GeneralPostingSetup);
      LibraryERM.FindVATPostingSetupInvt(VATPostingSetup);
      IF NOT InventoryPostingGroup.FINDFIRST THEN
        CreateInventoryPostingGroup(InventoryPostingGroup);

      Item.VALIDATE(Description,Item."No.");  // Validation Description as No. because value is not important.
      Item.VALIDATE("Base Unit of Measure",ItemUnitOfMeasure.Code);
      Item.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      Item.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      Item.VALIDATE("Inventory Posting Group",InventoryPostingGroup.Code);

      IF TaxGroup.FINDFIRST THEN
        Item.VALIDATE("Tax Group Code",TaxGroup.Code);

      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    PROCEDURE CreateItemNo@71() : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      CreateItem(Item);
      EXIT(Item."No.");
    END;

    PROCEDURE CreateItemWithUnitPriceAndUnitCost@69(VAR Item@1000 : Record 27;UnitPrice@1001 : Decimal;UnitCost@1003 : Decimal);
    BEGIN
      WITH Item DO BEGIN
        CreateItem(Item);
        VALIDATE("Unit Price",UnitPrice);
        VALIDATE("Unit Cost",UnitCost);
        MODIFY(TRUE);
      END;
    END;

    PROCEDURE CreateItemWithPostingSetup@22(VAR Item@1000 : Record 27;GenProdPostingGroup@1001 : Code[10];VATProductPostingGroup@1002 : Code[10]);
    BEGIN
      CreateItem(Item);
      Item.VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroup);
      Item.VALIDATE("VAT Prod. Posting Group",VATProductPostingGroup);
      Item.MODIFY(TRUE);
    END;

    PROCEDURE CreateItemNoWithPostingSetup@21(GenProdPostingGroup@1002 : Code[10];VATProductPostingGroup@1001 : Code[10]) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      CreateItemWithPostingSetup(Item,GenProdPostingGroup,VATProductPostingGroup);
      EXIT(Item."No.");
    END;

    PROCEDURE CreateItemBudgetEntry@9(VAR ItemBudgetEntry@1000 : Record 7134;AnalysisArea@1001 : Option;BudgetName@1002 : Code[10];Date@1003 : Date;ItemNo@1004 : Code[20]);
    BEGIN
      CLEAR(ItemBudgetEntry);
      ItemBudgetEntry.VALIDATE("Analysis Area",AnalysisArea);
      ItemBudgetEntry.VALIDATE("Budget Name",BudgetName);
      ItemBudgetEntry.VALIDATE(Date,Date);
      ItemBudgetEntry.VALIDATE("Item No.",ItemNo);
      ItemBudgetEntry.INSERT(TRUE);
    END;

    PROCEDURE CreateItemCategory@117(VAR ItemCategory@1005 : Record 5722);
    VAR
      GeneralPostingSetup@1001 : Record 252;
      InventoryPostingGroup@1002 : Record 94;
      VATPostingSetup@1003 : Record 325;
    BEGIN
      LibraryERM.FindGeneralPostingSetupInvtFull(GeneralPostingSetup);
      LibraryERM.FindVATPostingSetupInvt(VATPostingSetup);
      InventoryPostingGroup.FINDFIRST;

      ItemCategory.INIT;
      ItemCategory.VALIDATE(Code,LibraryUtility.GenerateRandomCode(ItemCategory.FIELDNO(Code),DATABASE::"Item Category"));
      ItemCategory.INSERT(TRUE);
      ItemCategory.VALIDATE("Def. Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      ItemCategory.VALIDATE("Def. Inventory Posting Group",InventoryPostingGroup.Code );
      ItemCategory.VALIDATE("Def. VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      ItemCategory.MODIFY(TRUE);
    END;

    PROCEDURE CreateItemCharge@64(VAR ItemCharge@1000 : Record 5800);
    VAR
      GeneralPostingSetup@1002 : Record 252;
      VATPostingSetup@1001 : Record 325;
    BEGIN
      CLEAR(ItemCharge);
      ItemCharge.INIT;
      ItemCharge.VALIDATE("No.",LibraryUtility.GenerateRandomCode(ItemCharge.FIELDNO("No."),DATABASE::"Item Charge"));
      ItemCharge.INSERT(TRUE);

      LibraryERM.FindGeneralPostingSetupInvtBase(GeneralPostingSetup);
      LibraryERM.FindZeroVATPostingSetup(VATPostingSetup,VATPostingSetup."VAT Calculation Type"::"Normal VAT");

      ItemCharge.VALIDATE(Description,ItemCharge."No.");  // Validation Description as No. because value is not important.
      ItemCharge.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      ItemCharge.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      ItemCharge.MODIFY(TRUE);
    END;

    PROCEDURE CreateItemChargeNo@2() : Code[20];
    VAR
      ItemCharge@1000 : Record 5800;
    BEGIN
      CreateItemCharge(ItemCharge);
      EXIT(ItemCharge."No.")
    END;

    PROCEDURE CreateItemChargeAssignment@5807(VAR ItemChargeAssignmentSales@1001 : Record 5809;SalesLine@1000 : Record 37;DocType@1005 : Option;DocNo@1007 : Code[20];DocLineNo@1008 : Integer;ItemNo@1009 : Code[20]);
    VAR
      ItemChargeAssgntSales@1002 : Codeunit 5807;
      RecRef@1006 : RecordRef;
      LineNo@1004 : Integer;
    BEGIN
      ItemChargeAssignmentSales.INIT;

      WITH ItemChargeAssignmentSales DO BEGIN
        "Document Type" := SalesLine."Document Type";
        "Document No." := SalesLine."Document No.";
        "Document Line No." := SalesLine."Line No.";
        "Item Charge No." := SalesLine."No.";
        "Unit Cost" := SalesLine."Unit Cost";
      END;

      RecRef.GETTABLE(ItemChargeAssignmentSales);
      LineNo := LibraryUtility.GetNewLineNo(RecRef,ItemChargeAssignmentSales.FIELDNO("Line No."));
      ItemChargeAssgntSales.InsertItemChargeAssgnt(ItemChargeAssignmentSales,DocType,
        DocNo,DocLineNo,ItemNo,'',LineNo,SalesLine."Unit of Measure Code");

      ItemChargeAssignmentSales.GET(SalesLine."Document Type",SalesLine."Document No.",
        SalesLine."Line No.",LineNo);
      ItemChargeAssignmentSales.VALIDATE("Qty. to Assign",SalesLine.Quantity);
      ItemChargeAssignmentSales.MODIFY(TRUE);
    END;

    PROCEDURE CreateItemChargeAssignPurchase@1(VAR ItemChargeAssignmentPurch@1001 : Record 5805;PurchaseLine@1000 : Record 39;DocType@1005 : Option;DocNo@1007 : Code[20];DocLineNo@1008 : Integer;ItemNo@1009 : Code[20]);
    VAR
      ItemChargeAssgntPurch@1002 : Codeunit 5805;
      RecRef@1006 : RecordRef;
      LineNo@1004 : Integer;
    BEGIN
      ItemChargeAssignmentPurch.INIT;

      WITH ItemChargeAssignmentPurch DO BEGIN
        "Document Type" := PurchaseLine."Document Type";
        "Document No." := PurchaseLine."Document No.";
        "Document Line No." := PurchaseLine."Line No.";
        "Item Charge No." := PurchaseLine."No.";
        "Unit Cost" := PurchaseLine."Unit Cost";
      END;

      RecRef.GETTABLE(ItemChargeAssignmentPurch);
      LineNo := LibraryUtility.GetNewLineNo(RecRef,ItemChargeAssignmentPurch.FIELDNO("Line No."));
      ItemChargeAssgntPurch.InsertItemChargeAssgnt(
        ItemChargeAssignmentPurch,DocType,DocNo,DocLineNo,ItemNo,'',LineNo,PurchaseLine."Unit of Measure Code");

      ItemChargeAssignmentPurch.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.",LineNo);
      ItemChargeAssignmentPurch.VALIDATE("Qty. to Assign",PurchaseLine.Quantity);
      ItemChargeAssignmentPurch.MODIFY(TRUE);
    END;

    PROCEDURE CreateItemCrossReference@121(VAR ItemCrossReference@1000 : Record 5717;ItemNo@1001 : Code[20];CrossReferenceType@1002 : Option;CrossReferenceTypeNo@1003 : Code[30]);
    BEGIN
      ItemCrossReference.INIT;
      ItemCrossReference.VALIDATE("Item No.",ItemNo);
      ItemCrossReference.VALIDATE("Cross-Reference Type",CrossReferenceType);
      ItemCrossReference.VALIDATE("Cross-Reference Type No.",CrossReferenceTypeNo);
      ItemCrossReference.VALIDATE(
        "Cross-Reference No.",LibraryUtility.GenerateRandomCode(ItemCrossReference.FIELDNO("Cross-Reference No."),
          DATABASE::"Item Cross Reference"));
      ItemCrossReference.INSERT(TRUE);
    END;

    PROCEDURE CreateItemJournal@55(VAR ItemJournalBatch@1001 : Record 233;ItemNo@1002 : Code[20];ItemJournalTemplateType@1003 : 'Item,Transfer,Phys. Inventory,Revaluation,Consumption,Output,Capacity,Prod. Order';ProductionOrderNo@1004 : Code[20]);
    VAR
      ItemJournalLine@1005 : Record 83;
      ItemJournalTemplate@1000 : Record 82;
    BEGIN
      // Create Journals for Consumption and Output.
      SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplateType);
      SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplateType,ItemJournalTemplate.Name);
      IF ItemJournalTemplateType = ItemJournalTemplateType::Consumption THEN
        LibraryManufacturing.CalculateConsumption(ProductionOrderNo,ItemJournalTemplate.Name,ItemJournalBatch.Name)
      ELSE BEGIN
        LibraryManufacturing.CreateOutputJournal(ItemJournalLine,ItemJournalTemplate,ItemJournalBatch,ItemNo,ProductionOrderNo);
        OutputJnlExplRoute(ItemJournalLine);
        LibraryManufacturing.UpdateOutputJournal(ProductionOrderNo);
      END;
    END;

    PROCEDURE CreateItemJournalTemplate@68(VAR ItemJournalTemplate@1000 : Record 82);
    BEGIN
      ItemJournalTemplate.INIT;
      ItemJournalTemplate.VALIDATE(
        Name,
        COPYSTR(
          LibraryUtility.GenerateRandomCode(ItemJournalTemplate.FIELDNO(Name),DATABASE::"Item Journal Template"),
          1,
          LibraryUtility.GetFieldLength(DATABASE::"Item Journal Template",ItemJournalTemplate.FIELDNO(Name))));
      ItemJournalTemplate.VALIDATE(Description,ItemJournalTemplate.Name);
      // Validating Name as Description because value is not important.
      ItemJournalTemplate.INSERT(TRUE);
    END;

    PROCEDURE CreateItemJournalBatch@52(VAR ItemJournalBatch@1000 : Record 233;ItemJournalTemplateName@1001 : Code[10]);
    BEGIN
      // Create Item Journal Batch with a random Name of String length less than 10.
      ItemJournalBatch.INIT;
      ItemJournalBatch.VALIDATE("Journal Template Name",ItemJournalTemplateName);
      ItemJournalBatch.VALIDATE(
        Name,COPYSTR(LibraryUtility.GenerateRandomCode(ItemJournalBatch.FIELDNO(Name),DATABASE::"Item Journal Batch"),1,
          MAXSTRLEN(ItemJournalBatch.Name)));
      ItemJournalBatch.INSERT(TRUE);
    END;

    PROCEDURE CreateItemJournalBatchByType@4(VAR ItemJournalBatch@1000 : Record 233;TemplateType@1002 : Option);
    VAR
      ItemJournalTemplate@1001 : Record 82;
    BEGIN
      CLEAR(ItemJournalBatch);
      ItemJournalTemplate.SETRANGE(Type,TemplateType);
      ItemJournalTemplate.SETRANGE(Recurring,FALSE);
      ItemJournalTemplate.FINDFIRST;
      ItemJournalBatch."Journal Template Name" := ItemJournalTemplate.Name;
      ItemJournalBatch.Name := LibraryUtility.GenerateRandomCode(ItemJournalBatch.FIELDNO(Name),DATABASE::"Item Journal Batch");
      ItemJournalBatch.INSERT(TRUE);
    END;

    PROCEDURE CreateItemJournalLine@34(VAR ItemJournalLine@1000 : Record 83;JournalTemplateName@1001 : Code[10];JournalBatchName@1002 : Code[10];EntryType@1007 : Option;ItemNo@1005 : Text[20];NewQuantity@1004 : Decimal);
    VAR
      ItemJournalBatch@1008 : Record 233;
    BEGIN
      IF NOT ItemJournalBatch.GET(JournalTemplateName,JournalBatchName) THEN BEGIN
        ItemJournalBatch.INIT;
        ItemJournalBatch.VALIDATE("Journal Template Name",JournalTemplateName);
        ItemJournalBatch.SetupNewBatch;
        ItemJournalBatch.VALIDATE(Name,JournalBatchName);
        ItemJournalBatch.VALIDATE(Description,JournalBatchName + JOURNAL);
        ItemJournalBatch.INSERT(TRUE);
      END;
      CreateItemJnlLineWithNoItem(ItemJournalLine,ItemJournalBatch,JournalTemplateName,JournalBatchName,EntryType);
      ItemJournalLine.VALIDATE("Item No.",ItemNo);
      ItemJournalLine.VALIDATE(Quantity,NewQuantity);
      ItemJournalLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateItemJournalLineInItemTemplate@27(VAR ItemJournalLine@1002 : Record 83;ItemNo@1003 : Code[20];LocationCode@1004 : Code[10];BinCode@1005 : Code[20];Qty@1006 : Decimal);
    VAR
      ItemJournalTemplate@1000 : Record 82;
      ItemJournalBatch@1001 : Record 233;
    BEGIN
      SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      CreateItemJournalLine(
        ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Qty);
      ItemJournalLine.VALIDATE("Location Code",LocationCode);
      ItemJournalLine.VALIDATE("Bin Code",BinCode);
      ItemJournalLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateItemJnlLineWithNoItem@180(VAR ItemJournalLine@1000 : Record 83;ItemJournalBatch@1008 : Record 233;JournalTemplateName@1002 : Code[10];JournalBatchName@1001 : Code[10];EntryType@1006 : Option);
    VAR
      NoSeries@1007 : Record 308;
      NoSeriesManagement@1005 : Codeunit 396;
      RecRef@1004 : RecordRef;
      DocumentNo@1003 : Code[20];
    BEGIN
      CLEAR(ItemJournalLine);
      ItemJournalLine.INIT;
      ItemJournalLine.VALIDATE("Journal Template Name",JournalTemplateName);
      ItemJournalLine.VALIDATE("Journal Batch Name",JournalBatchName);
      RecRef.GETTABLE(ItemJournalLine);
      ItemJournalLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,ItemJournalLine.FIELDNO("Line No.")));
      ItemJournalLine.INSERT(TRUE);
      ItemJournalLine.VALIDATE("Posting Date",WORKDATE);
      ItemJournalLine.VALIDATE("Entry Type",EntryType);
      IF NoSeries.GET(ItemJournalBatch."No. Series") THEN
        DocumentNo := NoSeriesManagement.GetNextNo(ItemJournalBatch."No. Series",ItemJournalLine."Posting Date",FALSE)
      ELSE
        DocumentNo := LibraryUtility.GenerateRandomCode(ItemJournalLine.FIELDNO("Document No."),DATABASE::"Item Journal Line");
      ItemJournalLine.VALIDATE("Document No.",DocumentNo);
      ItemJournalLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateItemManufacturing@8(VAR Item@1000 : Record 27) : Code[20];
    VAR
      InventorySetup@1005 : Record 313;
      ItemUnitOfMeasure@1001 : Record 5404;
      GeneralPostingSetup@1002 : Record 252;
      InventoryPostingGroup@1003 : Record 94;
      TaxGroup@1111 : Record 321;
      VATPostingSetup@1006 : Record 325;
    BEGIN
      ItemNoSeriesSetup(InventorySetup);
      CLEAR(Item);
      Item.INSERT(TRUE);

      CreateItemUnitOfMeasure(ItemUnitOfMeasure,Item."No.",'',1);

      LibraryERM.FindGeneralPostingSetupInvtToGL(GeneralPostingSetup);
      LibraryERM.FindVATPostingSetupInvt(VATPostingSetup);
      InventoryPostingGroup.FINDFIRST;

      Item.VALIDATE(Description,Item."No.");  // Validation Description as No. because value is not important.
      Item.VALIDATE("Base Unit of Measure",ItemUnitOfMeasure.Code);
      Item.VALIDATE("Gen. Prod. Posting Group",GeneralPostingSetup."Gen. Prod. Posting Group");
      Item.VALIDATE("VAT Prod. Posting Group",VATPostingSetup."VAT Prod. Posting Group");
      Item.VALIDATE("Inventory Posting Group",InventoryPostingGroup.Code);

      IF TaxGroup.FINDFIRST THEN
        Item.VALIDATE("Tax Group Code",TaxGroup.Code);

      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    PROCEDURE CreateItemTrackingCode@36(VAR ItemTrackingCode@1000 : Record 6502);
    BEGIN
      ItemTrackingCode.INIT;
      ItemTrackingCode.VALIDATE(Code,LibraryUtility.GenerateRandomCode(ItemTrackingCode.FIELDNO(Code),DATABASE::"Item Tracking Code"));
      ItemTrackingCode.INSERT(TRUE);
    END;

    PROCEDURE CreateItemUnitOfMeasure@20(VAR ItemUnitOfMeasure@1001 : Record 5404;ItemNo@1000 : Code[20];UnitOfMeasureCode@1002 : Code[10];QtyPerUoM@1004 : Decimal);
    VAR
      UnitOfMeasure@1003 : Record 204;
    BEGIN
      ItemUnitOfMeasure.INIT;
      ItemUnitOfMeasure.VALIDATE("Item No.",ItemNo);

      // The IF condition is important because it grants flexibility to the function.
      IF UnitOfMeasureCode = '' THEN BEGIN
        UnitOfMeasure.SETFILTER(Code,'<>%1',UnitOfMeasureCode);
        UnitOfMeasure.FINDFIRST;
        ItemUnitOfMeasure.VALIDATE(Code,UnitOfMeasure.Code);
      END ELSE
        ItemUnitOfMeasure.VALIDATE(Code,UnitOfMeasureCode);
      IF QtyPerUoM = 0 THEN
        QtyPerUoM := 1;
      ItemUnitOfMeasure.VALIDATE("Qty. per Unit of Measure",QtyPerUoM);
      ItemUnitOfMeasure.INSERT(TRUE);
    END;

    PROCEDURE CreateItemUnitOfMeasureCode@91(VAR ItemUnitOfMeasure@1000 : Record 5404;ItemNo@1001 : Code[20];QtyPerUoM@1002 : Decimal);
    VAR
      UnitOfMeasure@1003 : Record 204;
    BEGIN
      CreateUnitOfMeasureCode(UnitOfMeasure);
      CreateItemUnitOfMeasure(ItemUnitOfMeasure,ItemNo,UnitOfMeasure.Code,QtyPerUoM);
    END;

    PROCEDURE CreateItemVariant@122(VAR ItemVariant@1000 : Record 5401;ItemNo@1001 : Code[20]) : Code[10];
    BEGIN
      ItemVariant.INIT;
      ItemVariant.VALIDATE("Item No.",ItemNo);
      ItemVariant.VALIDATE(Code,LibraryUtility.GenerateRandomCode(ItemVariant.FIELDNO(Code),DATABASE::"Item Variant"));
      ItemVariant.VALIDATE(Description,ItemVariant.Code);
      ItemVariant.INSERT(TRUE);
      EXIT(ItemVariant.Code)
    END;

    PROCEDURE CreateItemVendor@120(VAR ItemVendor@1001 : Record 99;VendorNo@1002 : Code[20];ItemNo@1000 : Code[20]);
    BEGIN
      ItemVendor.INIT;
      ItemVendor.VALIDATE("Vendor No.",VendorNo);
      ItemVendor.VALIDATE("Item No.",ItemNo);
      ItemVendor.INSERT(TRUE);
    END;

    PROCEDURE CreateNonStock@44(VAR NonstockItem@1000 : Record 5718);
    BEGIN
      NonstockItem.INIT;
      NonstockItem.VALIDATE(
        "Entry No.",LibraryUtility.GenerateRandomCode(NonstockItem.FIELDNO("Entry No."),DATABASE::"Nonstock Item"));
      NonstockItem.INSERT(TRUE);
    END;

    PROCEDURE CreateNonStockItem@131(VAR NonstockItem@1000 : Record 5718);
    VAR
      ItemCategory@1001 : Record 5722;
      ProductGroup@1002 : Record 5723;
      UnitOfMeasure@1031 : Record 204;
      NonstockItemManagement@1003 : Codeunit 5703;
    BEGIN
      ItemCategory.FINDFIRST;
      CreateProductGroup(ProductGroup,ItemCategory.Code);
      CreateUnitOfMeasureCode(UnitOfMeasure);

      CreateNonStock(NonstockItem);
      NonstockItem.VALIDATE("Vendor No.",LibraryPurchase.CreateVendorNo);
      NonstockItem.VALIDATE(
        "Vendor Item No.",LibraryUtility.GenerateRandomCode(NonstockItem.FIELDNO("Vendor Item No."),DATABASE::"Nonstock Item"));
      NonstockItem.VALIDATE("Item Category Code",ItemCategory.Code);
      NonstockItem.VALIDATE("Product Group Code",ProductGroup.Code);
      NonstockItem.VALIDATE("Unit of Measure",UnitOfMeasure.Code);
      NonstockItem.VALIDATE(Description,NonstockItem."Entry No.");
      NonstockItem.MODIFY(TRUE);
      NonstockItemManagement.NonstockAutoItem(NonstockItem);
    END;

    PROCEDURE CreateProductGroup@51(VAR ProductGroup@1000 : Record 5723;ItemCategoryCode@1001 : Code[10]);
    BEGIN
      CLEAR(ProductGroup);
      ProductGroup.INIT;
      ProductGroup.VALIDATE("Item Category Code",ItemCategoryCode);
      ProductGroup.VALIDATE(Code,LibraryUtility.GenerateRandomCode(ProductGroup.FIELDNO(Code),DATABASE::"Product Group"));
      ProductGroup.INSERT(TRUE);
    END;

    PROCEDURE CreateStockKeepingUnit@129(VAR Item@1004 : Record 27;CreatePerOption@1007 : Option;NewItemInInventoryOnly@1006 : Boolean;NewReplacePreviousSKUs@1005 : Boolean);
    VAR
      TmpItem@1000 : Record 27;
      CreateStockkeepingUnit@1001 : Report 5706;
    BEGIN
      CreateStockkeepingUnit.InitializeRequest(CreatePerOption,NewItemInInventoryOnly,NewReplacePreviousSKUs);
      IF Item.HASFILTER THEN
        TmpItem.COPYFILTERS(Item)
      ELSE BEGIN
        Item.GET(Item."No.");
        TmpItem.SETRANGE("No.",Item."No.");
      END;

      CreateStockkeepingUnit.SETTABLEVIEW(TmpItem);
      CreateStockkeepingUnit.USEREQUESTPAGE(FALSE);
      CreateStockkeepingUnit.RUN;
    END;

    PROCEDURE CreateStockkeepingUnitForLocationAndVariant@140(VAR StockkeepingUnit@1000 : Record 5700;LocationCode@1001 : Code[10];ItemNo@1002 : Code[20];VariantCode@1003 : Code[10]);
    BEGIN
      StockkeepingUnit.INIT;
      StockkeepingUnit.VALIDATE("Location Code",LocationCode);
      StockkeepingUnit.VALIDATE("Item No.",ItemNo);
      StockkeepingUnit.VALIDATE("Variant Code",VariantCode);
      StockkeepingUnit.INSERT(TRUE);
    END;

    PROCEDURE CreateShippingAgent@116(VAR ShippingAgent@1000 : Record 291);
    BEGIN
      ShippingAgent.INIT;
      ShippingAgent.VALIDATE(Code,LibraryUtility.GenerateRandomCode(ShippingAgent.FIELDNO(Code),DATABASE::"Shipping Agent"));
      ShippingAgent.INSERT(TRUE);
    END;

    PROCEDURE CreateShippingAgentService@94(VAR ShippingAgentServices@1002 : Record 5790;ShippingAgentCode@1001 : Code[10];ShippingTime@1000 : DateFormula);
    BEGIN
      ShippingAgentServices.INIT;
      ShippingAgentServices.VALIDATE("Shipping Agent Code",ShippingAgentCode);
      ShippingAgentServices.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(ShippingAgentServices.FIELDNO(Code),DATABASE::"Shipping Agent Services"));
      ShippingAgentServices.INSERT(TRUE);
      ShippingAgentServices.VALIDATE("Shipping Time",ShippingTime);
      ShippingAgentServices.MODIFY(TRUE);
    END;

    PROCEDURE CreateStandardCostWorksheetName@37(VAR StandardCostWorksheetName@1001 : Record 5840);
    BEGIN
      StandardCostWorksheetName.INIT;
      StandardCostWorksheetName.VALIDATE(
        Name,LibraryUtility.GenerateRandomCode(StandardCostWorksheetName.FIELDNO(Name),DATABASE::"Standard Cost Worksheet Name"));
      StandardCostWorksheetName.INSERT(TRUE);
    END;

    PROCEDURE CreateTrackedItem@58(VAR Item@1001 : Record 27;LotNos@1003 : Code[10];SerialNos@1002 : Code[10];ItemTrackingCode@1000 : Code[10]);
    BEGIN
      CreateItem(Item);
      Item.VALIDATE("Item Tracking Code",ItemTrackingCode);
      Item.VALIDATE("Serial Nos.",SerialNos);
      Item.VALIDATE("Lot Nos.",LotNos);
      Item.MODIFY(TRUE);
    END;

    PROCEDURE CreateTransferHeader@29(VAR TransferHeader@1000 : Record 5740;FromLocation@1001 : Text[10];ToLocation@1002 : Text[10];InTransitCode@1003 : Text[10]);
    BEGIN
      CLEAR(TransferHeader);
      TransferHeader.INIT;
      TransferHeader.INSERT(TRUE);
      TransferHeader.VALIDATE("Transfer-from Code",FromLocation);
      TransferHeader.VALIDATE("Transfer-to Code",ToLocation);
      TransferHeader.VALIDATE("In-Transit Code",InTransitCode);
      TransferHeader.MODIFY(TRUE);
    END;

    PROCEDURE CreateTransferLine@59(VAR TransferHeader@1000 : Record 5740;VAR TransferLine@1001 : Record 5741;ItemNo@1002 : Text[20];Quantity@1004 : Decimal);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      CLEAR(TransferLine);
      TransferLine.INIT;
      TransferLine.VALIDATE("Document No.",TransferHeader."No.");
      RecRef.GETTABLE(TransferLine);
      TransferLine.VALIDATE("Line No.",LibraryUtility.GetNewLineNo(RecRef,TransferLine.FIELDNO("Line No.")));
      TransferLine.INSERT(TRUE);
      TransferLine.VALIDATE("Item No.",ItemNo);
      TransferLine.VALIDATE(Quantity,Quantity);
      TransferLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateTransferRoute@25(VAR TransferRoute@1000 : Record 5742;TransferFrom@1001 : Code[10];TransferTo@1002 : Code[10]);
    BEGIN
      CLEAR(TransferRoute);
      TransferRoute.INIT;
      TransferRoute.VALIDATE("Transfer-from Code",TransferFrom);
      TransferRoute.VALIDATE("Transfer-to Code",TransferTo);
      TransferRoute.INSERT(TRUE);
    END;

    PROCEDURE CreateUnitOfMeasureCode@95(VAR UnitOfMeasure@1000 : Record 204);
    BEGIN
      UnitOfMeasure.INIT;
      UnitOfMeasure.VALIDATE(Code,LibraryUtility.GenerateRandomCode(UnitOfMeasure.FIELDNO(Code),DATABASE::"Unit of Measure"));
      UnitOfMeasure.VALIDATE(Description,UnitOfMeasure.Code);
      UnitOfMeasure.VALIDATE("International Standard Code",
        LibraryUtility.GenerateRandomCode(UnitOfMeasure.FIELDNO("International Standard Code"),DATABASE::"Unit of Measure"));
      UnitOfMeasure.INSERT(TRUE);
    END;

    PROCEDURE CreateVariant@160(VAR ItemVariant@1001 : Record 5401;Item@1000 : Record 27);
    BEGIN
      CLEAR(ItemVariant);
      ItemVariant.INIT;
      ItemVariant.VALIDATE("Item No.",Item."No.");
      ItemVariant.VALIDATE(Code,LibraryUtility.GenerateRandomCode(ItemVariant.FIELDNO(Code),DATABASE::"Item Variant"));
      ItemVariant.VALIDATE(Description,ItemVariant.Code);
      ItemVariant.INSERT;
    END;

    PROCEDURE CreatePhysicalInventoryCountingPeriod@40(VAR PhysInvtCountingPeriod@1000 : Record 7381);
    BEGIN
      CLEAR(PhysInvtCountingPeriod);
      PhysInvtCountingPeriod.INIT;
      PhysInvtCountingPeriod.VALIDATE(
        Code,LibraryUtility.GenerateRandomCode(PhysInvtCountingPeriod.FIELDNO(Code),DATABASE::"Phys. Invt. Counting Period"));
      PhysInvtCountingPeriod.INSERT(TRUE);
    END;

    PROCEDURE CalculateCountingPeriod@41(VAR ItemJournalLine@1001 : Record 83);
    VAR
      PhysInvtCountManagement@1000 : Codeunit 7380;
    BEGIN
      CLEAR(PhysInvtCountManagement);
      PhysInvtCountManagement.InitFromItemJnl(ItemJournalLine);
      PhysInvtCountManagement.RUN;
    END;

    PROCEDURE DateComprItemBudgetEntries@108(VAR ItemBudgetEntry@1000 : Record 7134;AnalysisAreaSelection@1001 : Option;StartDate@1002 : Date;EndDate@1003 : Date;PeriodLength@1004 : Option;Description@1005 : Text[50]);
    VAR
      TmpItemBudgetEntry@1007 : Record 7134;
      DateCompItemBudgetEntries@1008 : Report 7139;
    BEGIN
      DateCompItemBudgetEntries.InitializeRequest(AnalysisAreaSelection,StartDate,EndDate,PeriodLength,Description);
      IF ItemBudgetEntry.HASFILTER THEN
        TmpItemBudgetEntry.COPYFILTERS(ItemBudgetEntry)
      ELSE BEGIN
        ItemBudgetEntry.GET(ItemBudgetEntry."Entry No.");
        TmpItemBudgetEntry.SETRANGE("Entry No.",ItemBudgetEntry."Entry No.");
      END;
      DateCompItemBudgetEntries.SETTABLEVIEW(TmpItemBudgetEntry);
      DateCompItemBudgetEntries.USEREQUESTPAGE(FALSE);
      DateCompItemBudgetEntries.RUNMODAL;
    END;

    PROCEDURE FindItemJournalTemplate@142(VAR ItemJournalTemplate@1000 : Record 82);
    BEGIN
      ItemJournalTemplate.SETRANGE(Type,ItemJournalTemplate.Type::Item);
      ItemJournalTemplate.SETRANGE(Recurring,FALSE);
      IF NOT ItemJournalTemplate.FINDFIRST THEN BEGIN
        CreateItemJournalTemplate(ItemJournalTemplate);
        ItemJournalTemplate.VALIDATE(Type,ItemJournalTemplate.Type::Item);
        ItemJournalTemplate.MODIFY(TRUE);
      END;
    END;

    PROCEDURE FindUnitOfMeasure@145(VAR UnitOfMeasure@1000 : Record 204);
    BEGIN
      IF NOT UnitOfMeasure.FINDFIRST THEN
        CreateUnitOfMeasureCode(UnitOfMeasure);
    END;

    PROCEDURE GetQtyPerForItemUOM@3(ItemNo@1000 : Code[20];UOMCode@1001 : Code[10]) : Decimal;
    VAR
      ItemUnitOfMeasure@1002 : Record 5404;
    BEGIN
      CLEAR(ItemUnitOfMeasure);
      ItemUnitOfMeasure.GET(ItemNo,UOMCode);

      EXIT(ItemUnitOfMeasure."Qty. per Unit of Measure");
    END;

    PROCEDURE GetVariant@150(ItemNo@1001 : Code[20];OldVariantCode@1002 : Code[10]) : Code[10];
    VAR
      ItemVariant@1000 : Record 5401;
    BEGIN
      ItemVariant.SETRANGE("Item No.",ItemNo);
      ItemVariant.SETFILTER(Code,'<>%1',OldVariantCode);
      IF ItemVariant.COUNT = 0 THEN
        EXIT('');
      ItemVariant.NEXT(RANDOM(ItemVariant.COUNT));
      EXIT(ItemVariant.Code);
    END;

    PROCEDURE GetReservConfirmText@123() : Text;
    BEGIN
      EXIT(ReserveConfirmMsg);
    END;

    PROCEDURE NoSeriesSetup@444(VAR InventorySetup@1000 : Record 313);
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Internal Movement Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      InventorySetup.VALIDATE("Inventory Movement Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      InventorySetup.VALIDATE("Inventory Pick Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      InventorySetup.VALIDATE("Item Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      InventorySetup.VALIDATE("Posted Invt. Pick Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      InventorySetup.VALIDATE("Posted Transfer Rcpt. Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      InventorySetup.VALIDATE("Posted Transfer Shpt. Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      InventorySetup.VALIDATE("Registered Invt. Movement Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      InventorySetup.VALIDATE("Transfer Order Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      InventorySetup.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ItemNoSeriesSetup@448(VAR InventorySetup@1000 : Record 313);
    VAR
      NoSeriesCode@1001 : Code[10];
    BEGIN
      InventorySetup.GET;
      NoSeriesCode := LibraryUtility.GetGlobalNoSeriesCode;
      IF NoSeriesCode <> InventorySetup."Item Nos." THEN BEGIN
      InventorySetup.VALIDATE("Item Nos.",LibraryUtility.GetGlobalNoSeriesCode);
      InventorySetup.MODIFY(TRUE);
      END;
    END;

    PROCEDURE MakeItemJournalLine@23(VAR ItemJournalLine@1000 : Record 83;ItemJournalBatch@1001 : Record 233;Item@1002 : Record 27;PostingDate@1006 : Date;EntryType@1004 : Option;Quantity@1003 : Decimal);
    VAR
      RecRef@1007 : RecordRef;
    BEGIN
      CLEAR(ItemJournalLine);
      ItemJournalLine."Journal Template Name" := ItemJournalBatch."Journal Template Name";
      ItemJournalLine."Journal Batch Name" := ItemJournalBatch.Name;
      ItemJournalLine."Posting Date" := PostingDate;
      ItemJournalLine."Entry Type" := EntryType;
      ItemJournalBatch.CALCFIELDS("Template Type");
      IF ItemJournalBatch."Template Type" = ItemJournalBatch."Template Type"::Revaluation THEN
        ItemJournalLine."Value Entry Type" := ItemJournalLine."Value Entry Type"::Revaluation;
      ItemJournalLine.VALIDATE("Item No.",Item."No.");
      ItemJournalLine.VALIDATE(Quantity,Quantity);
      ItemJournalLine."Document No." :=
        LibraryUtility.GenerateRandomCode(ItemJournalLine.FIELDNO("Document No."),DATABASE::"Item Journal Line");
      RecRef.GETTABLE(ItemJournalLine);
      ItemJournalLine."Line No." := LibraryUtility.GetNewLineNo(RecRef,ItemJournalLine.FIELDNO("Line No."));
    END;

    PROCEDURE OutputJnlExplRoute@13(VAR ItemJournalLine@1000 : Record 83);
    VAR
      OutputJnlExplRoute@1001 : Codeunit 5406;
    BEGIN
      CLEAR(OutputJnlExplRoute);
      OutputJnlExplRoute.RUN(ItemJournalLine);
    END;

    PROCEDURE PostItemJournalBatch@5(ItemJournalBatch@1000 : Record 233);
    BEGIN
      PostItemJournalLine(ItemJournalBatch."Journal Template Name",ItemJournalBatch.Name);
    END;

    PROCEDURE PostItemJournalLine@45(JournalTemplateName@1001 : Text[10];JournalBatchName@1002 : Text[10]);
    VAR
      ItemJournalLine@1003 : Record 83;
    BEGIN
      ItemJournalLine.INIT;
      ItemJournalLine.VALIDATE("Journal Template Name",JournalTemplateName);
      ItemJournalLine.VALIDATE("Journal Batch Name",JournalBatchName);
      CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch",ItemJournalLine);
    END;

    PROCEDURE PostTransferHeader@43(VAR TransferHeader@1000 : Record 5740;Ship@1001 : Boolean;Receive@1002 : Boolean);
    VAR
      TransferOrderPostShipment@1004 : Codeunit 5704;
      TransferOrderPostReceipt@1003 : Codeunit 5705;
    BEGIN
      CLEAR(TransferOrderPostShipment);
      IF Ship THEN
        TransferOrderPostShipment.RUN(TransferHeader);
      IF Receive THEN BEGIN
        TransferOrderPostReceipt.SetHideValidationDialog(TRUE);
        TransferOrderPostReceipt.RUN(TransferHeader);
      END;
    END;

    PROCEDURE ReleaseTransferOrder@100(VAR TransferHeader@1001 : Record 5740);
    VAR
      ReleaseTransferDocument@1000 : Codeunit 5708;
    BEGIN
      CLEAR(ReleaseTransferDocument);
      ReleaseTransferDocument.RUN(TransferHeader);
    END;

    PROCEDURE ReopenTransferOrder@11(VAR TransferHeader@1001 : Record 5740);
    VAR
      ReleaseTransferDocument@1000 : Codeunit 5708;
    BEGIN
      ReleaseTransferDocument.Reopen(TransferHeader);
    END;

    PROCEDURE SaveAsStandardJournal@127(VAR GenJournalBatch@1000 : Record 232;Code@1004 : Code[10];SaveAmount@1005 : Boolean);
    VAR
      GenJournalLine@1001 : Record 81;
      StandardGeneralJournal@1003 : Record 750;
      SaveAsStandardGenJournal@1002 : Report 750;
    BEGIN
      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      SaveAsStandardGenJournal.Initialise(GenJournalLine,GenJournalBatch);
      SaveAsStandardGenJournal.InitializeRequest(Code,'',SaveAmount);
      SaveAsStandardGenJournal.USEREQUESTPAGE(FALSE);
      SaveAsStandardGenJournal.RUNMODAL;
      IF NOT SaveAsStandardGenJournal.GetStdGeneralJournal(StandardGeneralJournal) THEN;
    END;

    PROCEDURE SelectItemJournalTemplateName@54(VAR ItemJournalTemplate@1000 : Record 82;ItemJournalTemplateType@1001 : Option);
    BEGIN
      // Find Item Journal Template for the given Template Type.
      ItemJournalTemplate.SETRANGE(Type,ItemJournalTemplateType);
      ItemJournalTemplate.SETRANGE(Recurring,FALSE);
      IF NOT ItemJournalTemplate.FINDFIRST THEN
        CreateItemJournalTemplate(ItemJournalTemplate);
    END;

    PROCEDURE SelectItemJournalBatchName@53(VAR ItemJournalBatch@1000 : Record 233;ItemJournalBatchTemplateType@1001 : Option;ItemJournalTemplateName@1002 : Code[10]);
    BEGIN
      // Find Name for Batch Name.
      ItemJournalBatch.SETRANGE("Template Type",ItemJournalBatchTemplateType);
      ItemJournalBatch.SETRANGE("Journal Template Name",ItemJournalTemplateName);

      // If Item Journal Batch not found then create it.
      IF NOT ItemJournalBatch.FINDFIRST THEN
        CreateItemJournalBatch(ItemJournalBatch,ItemJournalTemplateName);
    END;

    PROCEDURE SetAutomaticCostAdjmtAlways@12();
    BEGIN
      InventorySetup.GET;
      InventorySetup."Automatic Cost Adjustment" := InventorySetup."Automatic Cost Adjustment"::Always;
      InventorySetup.MODIFY;
    END;

    PROCEDURE SetAutomaticCostAdjmtNever@19();
    BEGIN
      InventorySetup.GET;
      InventorySetup."Automatic Cost Adjustment" := InventorySetup."Automatic Cost Adjustment"::Never;
      InventorySetup.MODIFY;
    END;

    PROCEDURE SetAutomaticCostPosting@10(AutomaticCostPosting@1000 : Boolean);
    BEGIN
      InventorySetup.GET;
      InventorySetup."Automatic Cost Posting" := AutomaticCostPosting;
      InventorySetup.MODIFY;
    END;

    PROCEDURE SetAverageCostSetup@16(AverageCostCalcType@1000 : Option;AverageCostPeriod@1001 : Option);
    BEGIN
      InventorySetup.GET;
      InventorySetup."Average Cost Calc. Type" := AverageCostCalcType;
      InventorySetup."Average Cost Period" := AverageCostPeriod;
      InventorySetup.MODIFY;
    END;

    PROCEDURE SetExpectedCostPosting@15(ExpectedCostPosting@1000 : Boolean);
    BEGIN
      InventorySetup.GET;
      InventorySetup."Expected Cost Posting to G/L" := ExpectedCostPosting;
      InventorySetup.MODIFY;
    END;

    PROCEDURE SetLocationMandatory@14(LocationMandatory@1000 : Boolean);
    BEGIN
      InventorySetup.GET;
      InventorySetup."Location Mandatory" := LocationMandatory;
      InventorySetup.MODIFY;
    END;

    PROCEDURE SetPreventNegativeInventory@17(PreventNegativeInventory@1000 : Boolean);
    BEGIN
      InventorySetup.GET;
      InventorySetup."Prevent Negative Inventory" := PreventNegativeInventory;
      InventorySetup.MODIFY;
    END;

    PROCEDURE UpdateGenProdPostingSetup@56();
    VAR
      GeneralPostingSetup@1000 : Record 252;
    BEGIN
      IF GeneralPostingSetup.FINDSET THEN
      REPEAT
        IF GeneralPostingSetup."Sales Account" = '' THEN
            GeneralPostingSetup.VALIDATE("Sales Account",LibraryERM.CreateGLAccountNo);
        IF GeneralPostingSetup."Purch. Account" = '' THEN
            GeneralPostingSetup.VALIDATE("Purch. Account",GeneralPostingSetup."Sales Account");
        IF GeneralPostingSetup."COGS Account" = '' THEN
            GeneralPostingSetup.VALIDATE("COGS Account",GeneralPostingSetup."Sales Account");
        IF GeneralPostingSetup."Inventory Adjmt. Account" = '' THEN
            GeneralPostingSetup.VALIDATE("Inventory Adjmt. Account",GeneralPostingSetup."Sales Account");
        IF GeneralPostingSetup."COGS Account (Interim)" = '' THEN
            GeneralPostingSetup.VALIDATE("COGS Account (Interim)",GeneralPostingSetup."Sales Account");
        IF GeneralPostingSetup."Direct Cost Applied Account" = '' THEN
            GeneralPostingSetup.VALIDATE("Direct Cost Applied Account",GeneralPostingSetup."Sales Account");
          IF GeneralPostingSetup."Purchase Variance Account" = '' THEN
            GeneralPostingSetup.VALIDATE("Purchase Variance Account",GeneralPostingSetup."Sales Account");
        IF GeneralPostingSetup."Purch. Credit Memo Account" = '' THEN
            GeneralPostingSetup.VALIDATE("Purch. Credit Memo Account",GeneralPostingSetup."Sales Account");
        IF GeneralPostingSetup."Sales Credit Memo Account" = '' THEN
            GeneralPostingSetup.VALIDATE("Sales Credit Memo Account",GeneralPostingSetup."Sales Account");
        IF GeneralPostingSetup."Sales Prepayments Account" = '' THEN
            GeneralPostingSetup.VALIDATE("Sales Prepayments Account",LibraryERM.CreateGLAccountWithSalesSetup);
        IF GeneralPostingSetup."Purch. Prepayments Account" = '' THEN
            GeneralPostingSetup.VALIDATE("Purch. Prepayments Account",LibraryERM.CreateGLAccountWithPurchSetup);
        GeneralPostingSetup.MODIFY(TRUE);
      UNTIL GeneralPostingSetup.NEXT = 0;
    END;

    PROCEDURE UpdateInventorySetup@49(VAR InventorySetup@1001 : Record 313;AutomaticCostPosting@1000 : Boolean;ExpectedCostPostingtoGL@1002 : Boolean;AutomaticCostAdjustment@1003 : Option;AverageCostCalcType@1004 : Option;AverageCostPeriod@1005 : Option);
    BEGIN
      InventorySetup.GET;
      InventorySetup.VALIDATE("Automatic Cost Posting",AutomaticCostPosting);
      InventorySetup.VALIDATE("Expected Cost Posting to G/L",ExpectedCostPostingtoGL);
      InventorySetup.VALIDATE("Automatic Cost Adjustment",AutomaticCostAdjustment);
      InventorySetup.VALIDATE("Average Cost Calc. Type",AverageCostCalcType);
      InventorySetup.VALIDATE("Average Cost Period",AverageCostPeriod);
      InventorySetup.MODIFY(TRUE);
    END;

    PROCEDURE UpdateInventoryPostingSetup@57(Location@1000 : Record 14);
    VAR
      InventoryPostingSetup@1001 : Record 5813;
      InventoryPostingGroup@1002 : Record 94;
    BEGIN
      IF InventoryPostingGroup.FINDSET THEN
        REPEAT
          InventoryPostingSetup.SETRANGE("Location Code",Location.Code);
          InventoryPostingSetup.SETRANGE("Invt. Posting Group Code",InventoryPostingGroup.Code);
          IF NOT InventoryPostingSetup.FINDFIRST THEN
            CreateInventoryPostingSetup(InventoryPostingSetup,Location.Code,InventoryPostingGroup.Code);
          InventoryPostingSetup.VALIDATE("Inventory Account",LibraryERM.CreateGLAccountNo);
          InventoryPostingSetup.VALIDATE("Inventory Account (Interim)",LibraryERM.CreateGLAccountNo);
          InventoryPostingSetup.VALIDATE("WIP Account",LibraryERM.CreateGLAccountNo);
          InventoryPostingSetup.VALIDATE("Material Variance Account",LibraryERM.CreateGLAccountNo);
          InventoryPostingSetup.VALIDATE("Capacity Variance Account",LibraryERM.CreateGLAccountNo);
          InventoryPostingSetup.VALIDATE("Unrealized Profit Account",LibraryERM.CreateGLAccountNo);
          InventoryPostingSetup.MODIFY(TRUE);
        UNTIL InventoryPostingGroup.NEXT = 0;
    END;

    PROCEDURE UpdateSalesLine@147(VAR SalesLine@1000 : Record 37;FieldNo@1001 : Integer;Value@1002 : Variant);
    VAR
      RecRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      // Update Sales Line base on Field and its corresponding value.
      RecRef.GETTABLE(SalesLine);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALIDATE(Value);
      RecRef.SETTABLE(SalesLine);
      SalesLine.MODIFY(TRUE);
    END;

    PROCEDURE CreateItemNoWithVATProdPostingGroup@66(VATProdPostGroupCode@1001 : Code[10]) : Code[20];
    VAR
      Item@1000 : Record 27;
    BEGIN
      CreateItem(Item);
      Item.VALIDATE("VAT Prod. Posting Group",VATProdPostGroupCode);
      Item.MODIFY(TRUE);
      EXIT(Item."No.");
    END;

    PROCEDURE SelectGenPostingSetup@48(VAR GeneralPostingSetup@1000 : Record 252);
    BEGIN
      // Filter General Posting Setup so that errors are not generated due to mandatory fields.
      GeneralPostingSetup.SETFILTER("Gen. Bus. Posting Group",'<>%1','');
      GeneralPostingSetup.SETFILTER("Gen. Prod. Posting Group",'<>%1','');
      GeneralPostingSetup.SETFILTER("Sales Account",'<>%1','');
      GeneralPostingSetup.SETFILTER("Purch. Account",'<>%1','');
      GeneralPostingSetup.SETFILTER("COGS Account",'<>%1','');
      GeneralPostingSetup.SETFILTER("COGS Account (Interim)",'<>''''');
      GeneralPostingSetup.SETFILTER("Inventory Adjmt. Account",'<>%1','');
      GeneralPostingSetup.SETFILTER("Sales Credit Memo Account",'<>%1','');
      GeneralPostingSetup.SETFILTER("Purch. Credit Memo Account",'<>%1','');
      GeneralPostingSetup.SETFILTER("Direct Cost Applied Account",'<>%1','');
      GeneralPostingSetup.SETFILTER("Overhead Applied Account",'<>%1','');
      GeneralPostingSetup.SETFILTER("Purchase Variance Account",'<>%1','');
      GeneralPostingSetup.SETFILTER("Sales Prepayments Account",'<>%1','');
      GeneralPostingSetup.SETFILTER("Purch. Prepayments Account",'<>%1','');
      GeneralPostingSetup.FINDFIRST;
    END;

    PROCEDURE SelectVATPostingSetup@79(VAR VATPostingSetup@1001 : Record 325);
    BEGIN
      // Filter VAT Posting Setup so that errors are not generated due to mandatory fields.
      VATPostingSetup.SETFILTER("VAT Prod. Posting Group",'<>%1','');
      VATPostingSetup.FINDFIRST;
    END;

    PROCEDURE ReleaseSalesOrder@78(VAR SalesHeader@1000 : Record 36);
    VAR
      ReleaseSalesDoc@1001 : Codeunit 414;
    BEGIN
      ReleaseSalesDoc.PerformManualRelease(SalesHeader);
    END;

    PROCEDURE SelectCustomer@103() : Code[20];
    VAR
      Customer@1000 : Record 18;
    BEGIN
      // Select a customer and modify if Currency Code and Location Code not are blank.
      Customer.SETRANGE("Currency Code",'');
      Customer.SETRANGE("Location Code",'');
      IF NOT Customer.FINDFIRST THEN BEGIN
        Customer.RESET;
        Customer.FINDFIRST;
        Customer.VALIDATE("Currency Code",'');
        Customer.VALIDATE("Location Code",'');
        Customer.MODIFY(TRUE);
      END;
      EXIT(Customer."No.");
    END;

    BEGIN
    {
      Unsupported version tags:

      Contains all utility functions related to Inventory Management.
    }
    END.
  }
}

