OBJECT Codeunit 134660 Exp. Workflow Gen. Jnl.
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LibraryERM@1002 : Codeunit 131300;
      LibraryPaymentExport@1001 : Codeunit 130100;
      LibraryPaymentFormat@1007 : Codeunit 130101;
      LibraryPurchase@1003 : Codeunit 130512;
      LibraryUtility@1005 : Codeunit 131000;
      LibraryRandom@1004 : Codeunit 130440;

    [Test]
    PROCEDURE SavePaymentDetailsToFileUsingFulllSetupClient@5();
    VAR
      BankAcc@1004 : Record 270;
      CreditTransferRegister@1003 : Record 1205;
      GenJnlBatch@1001 : Record 232;
      GenJnlLine@1000 : Record 81;
      Vendor@1002 : Record 23;
      PaymentType@1005 : Code[20];
    BEGIN
      // [SCENARIO 1] Export Gen. Journal Lines to a payment file with all building blocks to a client file.
      // [GIVEN] One or more Gen. Journal Lines, applied to Vendor Ledger Entries.
      // [WHEN] Click the Export to File action on the Payment Journal.
      // [THEN] The payment file is created and saved to disk.

      // Pre-Setup
      PaymentType := LibraryUtility.GenerateGUID;
      CreateVendorWithBankAccount(Vendor,PaymentType);
      CreateBankAccountWithExportFormat(BankAcc,CreatePaymentExportFormatWithFullSetupClient(PaymentType));
      CreateExportGenJournalBatch(GenJnlBatch,BankAcc."No.");

      // Setup
      LibraryERM.CreateGeneralJnlLine(GenJnlLine,
        GenJnlBatch."Journal Template Name",GenJnlBatch.Name,GenJnlLine."Document Type"::Payment,
        GenJnlLine."Account Type"::Vendor,Vendor."No.",LibraryRandom.RandDec(1000,2));

      // Pre-Exercise
      GenJnlLine.SETRANGE("Journal Template Name",GenJnlBatch."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",GenJnlBatch.Name);

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Exp. Launcher Gen. Jnl.",GenJnlLine);

      // Pre-Verify
      CreditTransferRegister.SETRANGE("From Bank Account No.",BankAcc."No.");
      CreditTransferRegister.FINDLAST;

      GenJnlLine.SETRANGE("Journal Template Name",GenJnlBatch."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",GenJnlBatch.Name);
      GenJnlLine.FINDFIRST;

      // Verify
      CreditTransferRegister.TESTFIELD(Identifier,BankAcc."Payment Export Format");
      CreditTransferRegister.TESTFIELD(Status,CreditTransferRegister.Status::"File Created");
      GenJnlLine.TESTFIELD("Exported to Payment File",TRUE);
    END;

    [Test]
    PROCEDURE SavePaymentDetailsToFileUsingFulllSetupServer@6();
    VAR
      BankAcc@1004 : Record 270;
      CreditTransferRegister@1003 : Record 1205;
      GenJnlBatch@1001 : Record 232;
      GenJnlLine@1000 : Record 81;
      Vendor@1002 : Record 23;
      PaymentType@1005 : Code[20];
    BEGIN
      // [SCENARIO 2] Export Gen. Journal Lines to a payment file with all building blocks to a server file.
      // [GIVEN] One or more Gen. Journal Lines, applied to Vendor Ledger Entries.
      // [WHEN] Click the Export to File action on the Payment Journal.
      // [THEN] The payment file is created and saved to disk.

      // Pre-Setup
      PaymentType := LibraryUtility.GenerateGUID;
      CreateVendorWithBankAccount(Vendor,PaymentType);
      CreateBankAccountWithExportFormat(BankAcc,CreatePaymentExportFormatWithFullSetupServer(PaymentType));
      CreateExportGenJournalBatch(GenJnlBatch,BankAcc."No.");

      // Setup
      LibraryERM.CreateGeneralJnlLine(GenJnlLine,
        GenJnlBatch."Journal Template Name",GenJnlBatch.Name,GenJnlLine."Document Type"::Payment,
        GenJnlLine."Account Type"::Vendor,Vendor."No.",LibraryRandom.RandDec(1000,2));

      // Pre-Exercise
      GenJnlLine.SETRANGE("Journal Template Name",GenJnlBatch."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",GenJnlBatch.Name);

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Exp. Launcher Gen. Jnl.",GenJnlLine);

      // Pre-Verify
      CreditTransferRegister.SETRANGE("From Bank Account No.",BankAcc."No.");
      CreditTransferRegister.FINDLAST;

      GenJnlLine.SETRANGE("Journal Template Name",GenJnlBatch."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",GenJnlBatch.Name);
      GenJnlLine.FINDFIRST;

      // Verify
      CreditTransferRegister.TESTFIELD(Identifier,BankAcc."Payment Export Format");
      CreditTransferRegister.TESTFIELD(Status,CreditTransferRegister.Status::"File Created");
      GenJnlLine.TESTFIELD("Exported to Payment File",TRUE);
    END;

    [Test]
    PROCEDURE SavePaymentDetailsToFileUsingMinSetup@29();
    VAR
      BankAcc@1004 : Record 270;
      CreditTransferRegister@1003 : Record 1205;
      GenJnlBatch@1001 : Record 232;
      GenJnlLine@1000 : Record 81;
      Vendor@1002 : Record 23;
      PaymentType@1005 : Code[20];
    BEGIN
      // [SCENARIO 3] Export Gen. Journal Lines to a payment file with minimum building blocks to a client file.
      // [GIVEN] One or more Gen. Journal Lines, applied to Vendor Ledger Entries.
      // [WHEN] Click the Export to File action on the Payment Journal.
      // [THEN] The payment file is created and saved to disk.

      // Pre-Setup
      PaymentType := LibraryUtility.GenerateGUID;
      CreateVendorWithBankAccount(Vendor,PaymentType);
      CreateBankAccountWithExportFormat(BankAcc,CreatePaymentExportFormatWithMinSetup(PaymentType));
      CreateExportGenJournalBatch(GenJnlBatch,BankAcc."No.");

      // Setup
      LibraryERM.CreateGeneralJnlLine(GenJnlLine,
        GenJnlBatch."Journal Template Name",GenJnlBatch.Name,GenJnlLine."Document Type"::Payment,
        GenJnlLine."Account Type"::Vendor,Vendor."No.",LibraryRandom.RandDec(1000,2));

      // Pre-Exercise
      GenJnlLine.SETRANGE("Journal Template Name",GenJnlBatch."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",GenJnlBatch.Name);

      // Exercise
      CODEUNIT.RUN(CODEUNIT::"Exp. Launcher Gen. Jnl.",GenJnlLine);

      // Pre-Verify
      CreditTransferRegister.SETRANGE("From Bank Account No.",BankAcc."No.");
      CreditTransferRegister.FINDLAST;

      GenJnlLine.SETRANGE("Journal Template Name",GenJnlBatch."Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",GenJnlBatch.Name);
      GenJnlLine.FINDFIRST;

      // Verify
      CreditTransferRegister.TESTFIELD(Identifier,BankAcc."Payment Export Format");
      CreditTransferRegister.TESTFIELD(Status,CreditTransferRegister.Status::Canceled);
      GenJnlLine.TESTFIELD("Exported to Payment File",FALSE);
    END;

    LOCAL PROCEDURE CreateVendorWithBankAccount@2(VAR Vendor@1000 : Record 23;PaymentType@1003 : Code[20]);
    VAR
      PaymentMethod@1002 : Record 289;
      VendorBankAcc@1001 : Record 288;
    BEGIN
      LibraryPurchase.CreateVendor(Vendor);

      LibraryPurchase.CreateVendorBankAccount(VendorBankAcc,Vendor."No.");
      VendorBankAcc.IBAN := LibraryUtility.GenerateGUID;
      VendorBankAcc.MODIFY(TRUE);

      LibraryERM.CreatePaymentMethod(PaymentMethod);
      PaymentMethod.VALIDATE("Pmt. Export Line Definition",PaymentType);
      PaymentMethod.MODIFY(TRUE);

      Vendor.VALIDATE("Preferred Bank Account",VendorBankAcc.Code);
      Vendor.VALIDATE("Payment Method Code",PaymentMethod.Code);
      Vendor.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreateBankAccountWithExportFormat@3(VAR BankAcc@1000 : Record 270;PaymentExportFormat@1001 : Code[20]);
    BEGIN
      LibraryERM.CreateBankAccount(BankAcc);
      BankAcc.IBAN := LibraryUtility.GenerateGUID;
      BankAcc.VALIDATE("Payment Export Format",PaymentExportFormat);
      BankAcc.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE CreatePaymentExportFormatWithFullSetupClient@8(PaymentType@1007 : Code[20]) : Code[20];
    VAR
      BankExportImportSetup@1000 : Record 1200;
      DataExchDef@1001 : Record 1222;
      DataExchColumnDef@1002 : Record 1223;
      DataExchLineDef@1005 : Record 1227;
      DataExchMapping@1003 : Record 1224;
      DataExchFieldMapping@1004 : Record 1225;
    BEGIN
      LibraryPaymentFormat.CreateDataExchDef(
        DataExchDef,CODEUNIT::"Exp. Data Handling Gen. Jnl.",
        CODEUNIT::"Exp. Validation Gen. Jnl.",CODEUNIT::"Exp. Writing Gen. Jnl.",XMLPORT::"Export Generic CSV",
        CODEUNIT::"Save Data Exch. Blob Sample",CODEUNIT::"Exp. User Feedback Gen. Jnl.");

      DataExchLineDef.InsertRec(DataExchDef.Code,PaymentType,LibraryUtility.GenerateGUID,3);

      LibraryPaymentFormat.CreateDataExchColumnDef(DataExchColumnDef,DataExchDef.Code,DataExchLineDef.Code);

      LibraryPaymentFormat.CreateDataExchMapping(DataExchMapping,DataExchDef.Code,DataExchLineDef.Code,
        CODEUNIT::"Exp. Pre-Mapping Gen. Jnl.",CODEUNIT::"Exp. Mapping Gen. Jnl.",CODEUNIT::"Exp. Post-Mapping Gen. Jnl.");

      LibraryPaymentFormat.CreateDataExchFieldMapping(DataExchFieldMapping,DataExchDef.Code,DataExchLineDef.Code);

      LibraryPaymentFormat.CreateBankExportImportSetup(BankExportImportSetup,DataExchDef);

      EXIT(DataExchDef.Code);
    END;

    LOCAL PROCEDURE CreatePaymentExportFormatWithFullSetupServer@7(PaymentType@1007 : Code[20]) : Code[20];
    VAR
      BankExportImportSetup@1000 : Record 1200;
      DataExchDef@1001 : Record 1222;
      DataExchColumnDef@1002 : Record 1223;
      DataExchLineDef@1005 : Record 1227;
      DataExchMapping@1003 : Record 1224;
      DataExchFieldMapping@1004 : Record 1225;
    BEGIN
      LibraryPaymentFormat.CreateDataExchDef(
        DataExchDef,CODEUNIT::"Exp. Data Handling Gen. Jnl.",
        CODEUNIT::"Exp. Validation Gen. Jnl.",CODEUNIT::"Exp. Writing Gen. Jnl.",XMLPORT::"Export Generic CSV",
        CODEUNIT::"Save Data Exch. Blob Sample",CODEUNIT::"Exp. User Feedback Gen. Jnl.");

      DataExchLineDef.InsertRec(DataExchDef.Code,PaymentType,LibraryUtility.GenerateGUID,3);

      LibraryPaymentFormat.CreateDataExchColumnDef(DataExchColumnDef,DataExchDef.Code,DataExchLineDef.Code);

      LibraryPaymentFormat.CreateDataExchMapping(DataExchMapping,DataExchDef.Code,DataExchLineDef.Code,
        CODEUNIT::"Exp. Pre-Mapping Gen. Jnl.",CODEUNIT::"Exp. Mapping Gen. Jnl.",CODEUNIT::"Exp. Post-Mapping Gen. Jnl.");

      LibraryPaymentFormat.CreateDataExchFieldMapping(DataExchFieldMapping,DataExchDef.Code,DataExchLineDef.Code);

      LibraryPaymentFormat.CreateBankExportImportSetup(BankExportImportSetup,DataExchDef);

      EXIT(DataExchDef.Code);
    END;

    LOCAL PROCEDURE CreatePaymentExportFormatWithMinSetup@31(PaymentType@1007 : Code[20]) : Code[20];
    VAR
      BankExportImportSetup@1000 : Record 1200;
      DataExchDef@1001 : Record 1222;
      DataExchColumnDef@1002 : Record 1223;
      DataExchLineDef@1005 : Record 1227;
      DataExchMapping@1003 : Record 1224;
      DataExchFieldMapping@1004 : Record 1225;
    BEGIN
      LibraryPaymentFormat.CreateDataExchDef(
        DataExchDef,0,0,CODEUNIT::"Exp. Writing Gen. Jnl.",
        XMLPORT::"Export Generic CSV",CODEUNIT::"Save Data Exch. Blob Sample",0);

      DataExchLineDef.InsertRec(DataExchDef.Code,PaymentType,LibraryUtility.GenerateGUID,3);

      LibraryPaymentFormat.CreateDataExchColumnDef(DataExchColumnDef,DataExchDef.Code,DataExchLineDef.Code);

      LibraryPaymentFormat.CreateDataExchMapping(DataExchMapping,DataExchDef.Code,DataExchLineDef.Code,
        CODEUNIT::"Exp. Pre-Mapping Gen. Jnl.",CODEUNIT::"Exp. Mapping Gen. Jnl.",0);

      LibraryPaymentFormat.CreateDataExchFieldMapping(DataExchFieldMapping,DataExchDef.Code,DataExchLineDef.Code);

      LibraryPaymentFormat.CreateBankExportImportSetup(BankExportImportSetup,DataExchDef);

      EXIT(DataExchDef.Code);
    END;

    LOCAL PROCEDURE CreateExportGenJournalBatch@4(VAR GenJnlBatch@1000 : Record 232;BalAccountNo@1001 : Code[20]);
    BEGIN
      LibraryERM.CreateGenJournalBatch(GenJnlBatch,LibraryPaymentExport.SelectPaymentJournalTemplate);
      GenJnlBatch.VALIDATE("Bal. Account Type",GenJnlBatch."Bal. Account Type"::"Bank Account");
      GenJnlBatch.VALIDATE("Bal. Account No.",BalAccountNo);
      GenJnlBatch.VALIDATE("Allow Payment Export",TRUE);
      GenJnlBatch.MODIFY(TRUE);
    END;

    BEGIN
    {
      // [FEATURE] [Data Exchange] [Payment Export] [UT]

      The Open-Save-Cancel dialog has a different callback on the test client used in SNAP and the lab. Eventually,
      the test cases SavePaymentDetailsToFileUsingFulllSetupClient and SavePaymentDetailsToFileUsingMinSetup won't
      fail in SNAP or the lab.

      To repeat the same experience on a local development box, the command ALTest RunTests needs to be used. Otherwise,
      if a different test runner is used, then the regular Open-Save-Cancel dialog will pop up, as the actual server
      callback is invoked.
    }
    END.
  }
}

