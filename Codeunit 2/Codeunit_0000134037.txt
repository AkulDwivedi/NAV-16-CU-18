OBJECT Codeunit 134037 ERM Date Compression GL Budget
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,NAVIN9.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DateComprRegister@1005 : Record 87;
      Assert@1003 : Codeunit 130000;
      LibraryERM@1004 : Codeunit 131300;
      IsInitialized@1000 : Boolean;
      CopyFromBudgetName@1007 : Code[10];
      FromBudgetEntryCount@1006 : Integer;
      FromBudgetEntryAmountSum@1002 : Decimal;

    [Test]
    [HandlerFunctions(HandleConfirm,HandleMessage)]
    PROCEDURE DateCompressionByDay@2();
    BEGIN
      Initialize;
      DateCompressionScenario(DateComprRegister."Period Length"::Day);
    END;

    [Test]
    [HandlerFunctions(HandleConfirm,HandleMessage)]
    PROCEDURE DateCompressionByWeek@3();
    BEGIN
      Initialize;
      DateCompressionScenario(DateComprRegister."Period Length"::Week);
    END;

    [Test]
    [HandlerFunctions(HandleConfirm,HandleMessage)]
    PROCEDURE DateCompressionByMonth@4();
    BEGIN
      Initialize;
      DateCompressionScenario(DateComprRegister."Period Length"::Month);
    END;

    [Test]
    [HandlerFunctions(HandleConfirm,HandleMessage)]
    PROCEDURE DateCompressionByYear@5();
    BEGIN
      Initialize;
      DateCompressionScenario(DateComprRegister."Period Length"::Year);
    END;

    [Test]
    [HandlerFunctions(HandleConfirm,HandleMessage)]
    PROCEDURE DateCompressionByPeriod@6();
    BEGIN
      Initialize;
      DateCompressionScenario(DateComprRegister."Period Length"::Period);
    END;

    [Normal]
    LOCAL PROCEDURE DateCompressionScenario@13(PeriodLength@1007 : Option);
    VAR
      GLBudgetName@1001 : Record 95;
      BudgetYear@1005 : Integer;
    BEGIN
      // Create a new budget and run copy budget batch to copy budget entry
      LibraryERM.CreateGLBudgetName(GLBudgetName);

      CopyGLBudget(CopyFromBudgetName,GLBudgetName.Name,FromBudgetEntryCount,BudgetYear);

      // Run Date compression GL Budget for the newly created budget
      RunDateCompressBudget(GLBudgetName.Name,BudgetYear,PeriodLength);

      // Validate budget entry after compression
      ValidateBudgetEntry(GLBudgetName.Name,FromBudgetEntryCount,FromBudgetEntryAmountSum);
    END;

    [Normal]
    LOCAL PROCEDURE CopyGLBudget@11(FromBudget@1001 : Code[10];ToBudget@1002 : Code[10];ExpectBudgetEntryCount@1003 : Integer;VAR BudgetYear@1000 : Integer);
    VAR
      GLBudgetEntry@1005 : Record 96;
    BEGIN
      RunCopyGLBudget(FromBudget,ToBudget);

      GLBudgetEntry.SETRANGE("Budget Name",ToBudget);
      IF NOT GLBudgetEntry.FINDFIRST THEN BEGIN
        EVALUATE(GLBudgetEntry."Entry No.",FromBudget);
        GLBudgetEntry."Budget Name" := ToBudget;
        GLBudgetEntry.Date := WORKDATE;
      END;

      // Extract budget year
      BudgetYear := DATE2DMY(GLBudgetEntry.Date,3);

      // Test should not continue if the budget is not copied correctly.
      Assert.AreEqual(ExpectBudgetEntryCount,GLBudgetEntry.COUNT,'Budget is not copied correctly');
    END;

    LOCAL PROCEDURE InsertDimSelectionBuffer@25() RetainDimText : Text[250];
    VAR
      DimensionTranslation@1000 : Record 388;
      DimensionSelectionBuffer@1001 : Record 368;
    BEGIN
      DimensionSelectionBuffer.DELETEALL;
      DimensionTranslation.FINDSET;
      IF DimensionSelectionBuffer.ISEMPTY THEN
        REPEAT
          IF NOT DimensionSelectionBuffer.GET(DimensionTranslation.Code) THEN BEGIN
            DimensionSelectionBuffer.VALIDATE(Code,DimensionTranslation.Code);
            DimensionSelectionBuffer.VALIDATE(Selected,TRUE);
            DimensionSelectionBuffer.INSERT;
          END;
        UNTIL DimensionTranslation.NEXT = 0;
      DimensionSelectionBuffer.SetDimSelection(3,REPORT::"Date Compr. G/L Budget Entries",'',RetainDimText,DimensionSelectionBuffer);
    END;

    [Normal]
    LOCAL PROCEDURE RunCopyGLBudget@7(FromGLBudgetName@1011 : Code[10];ToGlBudgetName@1007 : Code[10]);
    VAR
      CopyGLBudget@1000 : Report 96;
      FromSource@1012 : 'G/L Entry,G/L Budget Entry';
      FromClosingEntryFilter@1008 : 'Include,Exclude';
      ToDateCompression@1002 : 'None,Day,Week,Month,Quarter,Year,Period';
      DateChangeFormula@1001 : DateFormula;
    BEGIN
      EVALUATE(DateChangeFormula,'');
      CLEAR(CopyGLBudget);
      CopyGLBudget.InitializeRequest(FromSource::"G/L Budget Entry",FromGLBudgetName,'','',FromClosingEntryFilter::Include,'',
        ToGlBudgetName,'',1,'',DateChangeFormula,ToDateCompression::None);
      CopyGLBudget.USEREQUESTPAGE(FALSE);
      CopyGLBudget.RUN;
    END;

    [Normal]
    LOCAL PROCEDURE RunDateCompressBudget@14(BudgetName@1002 : Code[10];Year@1003 : Integer;PeriodLength@1005 : Option);
    VAR
      GLBudgetEntry@1001 : Record 96;
      DateComprGLBudgetEntries@1000 : Report 97;
      StartingDate@1004 : Date;
      EndingDate@1006 : Date;
    BEGIN
      CLEAR(DateComprGLBudgetEntries);
      GLBudgetEntry.SETRANGE("Budget Name",BudgetName);
      DateComprGLBudgetEntries.SETTABLEVIEW(GLBudgetEntry);
      StartingDate := DMY2DATE(1,1,Year);
      EndingDate := DMY2DATE(31,12,Year);
      DateComprGLBudgetEntries.InitializeRequest(StartingDate,EndingDate,PeriodLength,'',FALSE,InsertDimSelectionBuffer);
      DateComprGLBudgetEntries.USEREQUESTPAGE(FALSE);
      DateComprGLBudgetEntries.RUN;
    END;

    [Normal]
    LOCAL PROCEDURE ValidateBudgetEntry@12(BudgetName@1000 : Code[10];BeforeCompressEntryCount@1001 : Integer;ExpectedEntrySum@1002 : Decimal);
    VAR
      GLBudgetEntry@1003 : Record 96;
    BEGIN
      GLBudgetEntry.SETCURRENTKEY("Budget Name","G/L Account No.",Date);
      GLBudgetEntry.SETRANGE("Budget Name",BudgetName);
      IF GLBudgetEntry.COUNT > 0 THEN
        Assert.IsTrue(BeforeCompressEntryCount > GLBudgetEntry.COUNT,'No of compressed budget entry is not smaller than the original');

      GLBudgetEntry.CALCSUMS(Amount);
      Assert.AreEqual(ExpectedEntrySum,GLBudgetEntry.Amount,'Sum of compressed Budget entry is not the same as the original');
    END;

    LOCAL PROCEDURE Initialize@1();
    VAR
      GLBudgetName@1001 : Record 95;
      GLBudgetEntry@1008 : Record 96;
      LibraryERMCountryData@1002 : Codeunit 131305;
    BEGIN
      IF IsInitialized THEN
        EXIT;

      LibraryERMCountryData.CreateVATData;

      // Find a budget
      GLBudgetName.FINDFIRST;
      CopyFromBudgetName := GLBudgetName.Name;

      GLBudgetEntry.SETCURRENTKEY("Budget Name","G/L Account No.",Date);
      GLBudgetEntry.SETRANGE("Budget Name",CopyFromBudgetName);

      FromBudgetEntryCount := GLBudgetEntry.COUNT;
      GLBudgetEntry.CALCSUMS(Amount);
      FromBudgetEntryAmountSum := GLBudgetEntry.Amount;

      IsInitialized := TRUE;
      COMMIT;
    END;

    [ConfirmHandler]
    PROCEDURE HandleConfirm@8(Question@1000 : Text[1024];VAR Reply@1001 : Boolean);
    BEGIN
      Reply := TRUE;
    END;

    [MessageHandler]
    PROCEDURE HandleMessage@9(Message@1000 : Text[1024]);
    BEGIN
      // For handle message
    END;

    BEGIN
    {
      // [FEATURE] [Date Compression] [Period Length]
      Unsupported version tags:
      CA: Demo Data change in G/L Budgets

      Replace test case 128970.
    }
    END.
  }
}

