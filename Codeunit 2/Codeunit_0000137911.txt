OBJECT Codeunit 137911 SCM Calculate Assembly Cost
{
  OBJECT-PROPERTIES
  {
    Date=27-09-17;
    Time=12:00:00 PM;
    Version List=NAVW19.00.00,Test;
  }
  PROPERTIES
  {
    Subtype=Test;
    OnRun=VAR
            MfgSetup@1000 : Record 99000765;
          BEGIN
            MfgSetup.GET;
            WorkDate2 := CALCDATE(MfgSetup."Default Safety Lead Time",WORKDATE); // to avoid Due Date Before Work Date message.
          END;

  }
  CODE
  {
    VAR
      LibraryKitting@1000 : Codeunit 132205;
      LibraryManufacturing@1004 : Codeunit 132202;
      LibraryInventory@1003 : Codeunit 132201;
      LibraryAssembly@1006 : Codeunit 132207;
      LibraryCosting@1011 : Codeunit 132200;
      LibraryERM@1013 : Codeunit 131300;
      LibraryRandom@1005 : Codeunit 130440;
      Assert@1001 : Codeunit 130000;
      LibrarySetupStorage@1012 : Codeunit 131009;
      WorkDate2@1002 : Date;
      TEXT_PARENT@1007 : TextConst 'ENU=Parent';
      TEXT_CHILD@1008 : TextConst 'ENU=Child';
      TEXT_ItemA@1009 : TextConst 'ENU=ItemA';
      Initialized@1010 : Boolean;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE BUG235189@18();
    VAR
      ParentItem@1000 : Record 27;
      ChildItem@1001 : Record 27;
      ItemVariant@1008 : Record 5401;
      StockkeepingUnit@1002 : Record 5700;
      AsmHeader@1003 : Record 900;
      BomComponent@1004 : Record 90;
      Variant@1006 : Code[10];
      VArCost@1007 : Decimal;
    BEGIN
      Initialize;
      // Kitting - D2: Cost amount is not updated when using SKU unit cost
      Variant := '1';
      VArCost := 20;
      ParentItem.GET(LibraryKitting.CreateStdCostItemWithNewUOMUsingItemNo(TEXT_PARENT,10,20,1));
      ChildItem.GET(LibraryKitting.CreateStdCostItemWithNewUOMUsingItemNo(TEXT_CHILD,10,20,1));
      LibraryManufacturing.CreateBOMComponent(
        BomComponent,ParentItem."No.",BomComponent.Type::Item,ChildItem."No.",1,ChildItem."Base Unit of Measure");
      ParentItem.VALIDATE("Replenishment System",ParentItem."Replenishment System"::Assembly);
      ParentItem.MODIFY;
      CalculateAssemblyStandardCost(ParentItem."No.");
      ValidateUnitCost(ParentItem."No.",10);

      CalculateAssemblyStandardCost(ParentItem."No.");

      AsmHeader.GET(AsmHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,ParentItem."No.",1));

      ItemVariant.INIT;
      ItemVariant."Item No." := ParentItem."No.";
      ItemVariant.Code := Variant;
      IF NOT ItemVariant.INSERT THEN
        ItemVariant.MODIFY;

      StockkeepingUnit.INIT;
      StockkeepingUnit."Item No." := ParentItem."No.";
      StockkeepingUnit."Variant Code" := Variant;
      StockkeepingUnit."Location Code" := AsmHeader."Location Code";
      StockkeepingUnit."Standard Cost" := VArCost;
      StockkeepingUnit."Unit Cost" := VArCost;
      IF NOT StockkeepingUnit.INSERT THEN
        StockkeepingUnit.MODIFY;

      AsmHeader.VALIDATE("Variant Code",Variant);

      ValidateHeaderCostAmount(AsmHeader,20);

      ASSERTERROR ERROR('') // cleanup
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE OrderForAwithA@12();
    VAR
      BOMComponent@1004 : Record 90;
      AsmHeader@1003 : Record 900;
      ItemA@1002 : Record 27;
      ItemB@1001 : Record 27;
      ItemC@1000 : Record 27;
      LibraryKitting@1006 : Codeunit 132205;
    BEGIN
      Initialize;
      ItemA.GET(LibraryKitting.CreateStdCostItemWithNewUOMUsingItemNo(TEXT_ItemA,10,20,1));
      ItemB.GET(LibraryKitting.CreateItemWithNewUOM(7,10));
      ItemC.GET(LibraryKitting.CreateItemWithNewUOM(13,10));
      LibraryManufacturing.CreateBOMComponent(
        BOMComponent,ItemA."No.",BOMComponent.Type::Item,ItemB."No.",1,ItemB."Base Unit of Measure");
      LibraryManufacturing.CreateBOMComponent(
        BOMComponent,ItemA."No.",BOMComponent.Type::Item,ItemC."No.",1,ItemC."Base Unit of Measure");
      ItemA.VALIDATE("Replenishment System",ItemA."Replenishment System"::Assembly);
      ItemA.MODIFY;
      CalculateAssemblyStandardCost(ItemA."No.");
      ItemA.GET(ItemA."No.");
      Assert.AreEqual(ItemA."Standard Cost",20,
        STRSUBSTNO('Standard cost is wrong for %1, Expected 20 got %2',ItemA."No.",ItemA."Standard Cost"));
      ValidateUnitCost(ItemA."No.",20);

      AsmHeader.GET(AsmHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,ItemA."No.",1));
      LibraryKitting.AddLine(AsmHeader,1,ItemA."No.",ItemA."Base Unit of Measure",1,1,'');
      calcAndValidate(AsmHeader,40,0,0,0);
      ASSERTERROR ERROR('') // cleanup
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE OrderForAwithOverhead@14();
    VAR
      BOMComponent@1004 : Record 90;
      AsmHeader@1003 : Record 900;
      ItemA@1002 : Record 27;
      ItemB@1001 : Record 27;
    BEGIN
      Initialize;
      ItemA.GET(LibraryKitting.CreateStdCostItemWithNewUOMUsingItemNo(TEXT_ItemA,10,20,1));
      ItemB.GET(LibraryKitting.CreateItemWithNewUOM(7,10));
      ItemB."Overhead Rate" := 10;
      ItemB.MODIFY;

      LibraryManufacturing.CreateBOMComponent(
        BOMComponent,ItemA."No.",BOMComponent.Type::Item,ItemB."No.",1,ItemB."Base Unit of Measure");
      ItemA.VALIDATE("Replenishment System",ItemA."Replenishment System"::Assembly);
      ItemA."Overhead Rate" := 12;
      ItemA.MODIFY;

      CalculateAssemblyStandardCost(ItemA."No.");
      ItemA.GET(ItemA."No.");

      ValidateStandardCost(ItemA."No.",19);
      ValidateUnitCost(ItemA."No.",19);

      AsmHeader.GET(AsmHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,ItemA."No.",1));
      calcAndValidate(AsmHeader,7,0,0,12);
      ASSERTERROR ERROR('') // cleanup
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE BUG206865AwithIndirectCost@16();
    VAR
      BOMComponent@1004 : Record 90;
      AsmHeader@1003 : Record 900;
      ItemA@1002 : Record 27;
      ItemB@1001 : Record 27;
    BEGIN
      Initialize;
      ItemA.GET(LibraryKitting.CreateStdCostItemWithNewUOMUsingItemNo(TEXT_ItemA,10,20,1));
      ItemB.GET(LibraryKitting.CreateItemWithNewUOM(10,10));
      ItemB.MODIFY;

      LibraryManufacturing.CreateBOMComponent(
        BOMComponent,ItemA."No.",BOMComponent.Type::Item,ItemB."No.",1,ItemB."Base Unit of Measure");
      ItemA.VALIDATE("Replenishment System",ItemA."Replenishment System"::Assembly);
      ItemA."Overhead Rate" := 4;
      ItemA."Indirect Cost %" := 10;
      ItemA.MODIFY;

      CalculateAssemblyStandardCost(ItemA."No.");
      ItemA.GET(ItemA."No.");

      ValidateStandardCost(ItemA."No.",15);
      ValidateUnitCost(ItemA."No.",15);

      AsmHeader.GET(AsmHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,ItemA."No.",1));
      calcAndValidate(AsmHeader,10,0,0,5);
      ASSERTERROR ERROR('') // cleanup
    END;

    [Test]
    PROCEDURE EmptyOrder@1();
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      Initialize;
      AsmHeader.GET(AsmHeader."Document Type"::Order,
        LibraryKitting.CreateOrder(WorkDate2,LibraryKitting.CreateItemWithLotAndNewUOM(500,700,1),1));
      calcAndValidate(AsmHeader,0,0,0,0);
      ASSERTERROR ERROR('') // cleanup
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE OneRegularItem@2();
    VAR
      parentItem@1001 : Record 27;
      childItem@2000 : Record 27;
      AsmHeader@1000 : Record 900;
      BOMComponent@1002 : Record 90;
    BEGIN
      Initialize;
      parentItem.GET(LibraryKitting.CreateItemWithNewUOM(50,70));
      childItem.GET(LibraryKitting.CreateItemWithNewUOM(3,4));
      LibraryKitting.CreateBOMComponentLine(
        parentItem,BOMComponent.Type::Item,childItem."No.",5,childItem."Base Unit of Measure",FALSE);
      AsmHeader.GET(AsmHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parentItem."No.",1));
      calcAndValidate(AsmHeader,1 * 5 * 3,0,0,0);
      ASSERTERROR ERROR('') // cleanup
    END;

    [Test]
    PROCEDURE OneResourceFixed@7();
    VAR
      parentItem@1001 : Record 27;
      resource@2001 : Record 156;
      AsmHeader@1000 : Record 900;
      BOMComponent@1002 : Record 90;
    BEGIN
      Initialize;
      parentItem.GET(LibraryKitting.CreateItemWithNewUOM(50,70));
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(17,20));
      LibraryKitting.CreateBOMComponentLine(
        parentItem,BOMComponent.Type::Resource,resource."No.",2,resource."Base Unit of Measure",TRUE);
      AsmHeader.GET(AsmHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parentItem."No.",4));
      calcAndValidate(AsmHeader,0,0,2 * 17,0); // everything ends up as resource overhead...
      ASSERTERROR ERROR('') // cleanup
    END;

    [Test]
    PROCEDURE OneResource@11();
    VAR
      parentItem@1001 : Record 27;
      resource@2003 : Record 156;
      AsmHeader@1000 : Record 900;
      BOMComponent@1002 : Record 90;
    BEGIN
      Initialize;
      parentItem.GET(LibraryKitting.CreateItemWithNewUOM(50,70));
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(17,20));
      LibraryKitting.CreateBOMComponentLine(
        parentItem,BOMComponent.Type::Resource,resource."No.",2,resource."Base Unit of Measure",FALSE);
      AsmHeader.GET(AsmHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parentItem."No.",4));
      calcAndValidate(AsmHeader,0,0,4 * 2 * 17,0); // everything ends up as resource overhead...
      ASSERTERROR ERROR('') // cleanup
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE MultipleLinesRegularItems@3();
    VAR
      parentItem@1001 : Record 27;
      childItem@2004 : Record 27;
      AsmHeader@1000 : Record 900;
      BOMComponent@1002 : Record 90;
    BEGIN
      Initialize;
      parentItem.GET(LibraryKitting.CreateItemWithNewUOM(50,70));
      childItem.GET(LibraryKitting.CreateItemWithNewUOM(3,4));
      LibraryKitting.CreateBOMComponentLine(
        parentItem,BOMComponent.Type::Item,childItem."No.",5,childItem."Base Unit of Measure",FALSE);
      childItem.GET(LibraryKitting.CreateItemWithNewUOM(10,13));
      LibraryKitting.CreateBOMComponentLine(
        parentItem,BOMComponent.Type::Item,childItem."No.",7,childItem."Base Unit of Measure",FALSE);
      childItem.GET(LibraryKitting.CreateItemWithNewUOM(200,280));
      LibraryKitting.CreateBOMComponentLine(
        parentItem,BOMComponent.Type::Item,childItem."No.",2,childItem."Base Unit of Measure",FALSE);
      AsmHeader.GET(AsmHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parentItem."No.",1));
      calcAndValidate(AsmHeader,1 * (5 * 3 + 7 * 10 + 2 * 200),0,0,0);
      ASSERTERROR ERROR('') // cleanup
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE OneAssemblyItem@5();
    VAR
      parentItem@1001 : Record 27;
      childResource@2006 : Record 156;
      childItem@2007 : Record 27;
      BOMcomponentItem@1002 : Record 27;
      AsmHeader@1000 : Record 900;
      BOMComponent@1003 : Record 90;
    BEGIN
      Initialize;
      BOMcomponentItem.GET(LibraryKitting.CreateItemWithNewUOM(5,7));
      childItem.GET(LibraryKitting.CreateItemWithNewUOM(10,12));
      LibraryKitting.CreateBOMComponentLine(
        BOMcomponentItem,BOMComponent.Type::Item,childItem."No.",245,childItem."Base Unit of Measure",FALSE);
      childResource.GET(LibraryKitting.CreateResourceWithNewUOM(17,20));
      LibraryKitting.CreateBOMComponentLine(
        BOMcomponentItem,BOMComponent.Type::Resource,childResource."No.",5,childResource."Base Unit of Measure",TRUE);
      parentItem.GET(LibraryKitting.CreateItemWithNewUOM(50,70));
      LibraryKitting.CreateBOMComponentLine(
        parentItem,BOMComponent.Type::Item,BOMcomponentItem."No.",6,BOMcomponentItem."Base Unit of Measure",FALSE);
      AsmHeader.GET(AsmHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parentItem."No.",11));
      calcAndValidate(AsmHeader,11 * 6 * 5,0,0,0);// 11*6*245*10,0,11*6*5*17);
      ASSERTERROR ERROR('') // cleanup
    END;

    [Test]
    [HandlerFunctions(AvailabilityWindowHandler)]
    PROCEDURE OneNestedAssemblyItem@8();
    VAR
      parentItem@1003 : Record 27;
      childItem@2008 : Record 27;
      childResource@2009 : Record 156;
      BOMcomponentItem@1002 : Record 27;
      subBOMComponentItem@1001 : Record 27;
      AsmHeader@1000 : Record 900;
      BOMComponent@1004 : Record 90;
    BEGIN
      Initialize;
      BOMcomponentItem.GET(LibraryKitting.CreateItemWithNewUOM(5,7));
      childItem.GET(LibraryKitting.CreateItemWithNewUOM(10,12));
      LibraryKitting.CreateBOMComponentLine(BOMcomponentItem,BOMComponent.Type::Item,childItem."No.",
        245,childItem."Base Unit of Measure",FALSE);
      childResource.GET(LibraryKitting.CreateResourceWithNewUOM(17,20));
      LibraryKitting.CreateBOMComponentLine(BOMcomponentItem,BOMComponent.Type::Resource,childResource."No.",
        5,childResource."Base Unit of Measure",TRUE);
      subBOMComponentItem.GET(LibraryKitting.CreateItemWithNewUOM(20,18));
      childResource.GET(LibraryKitting.CreateResourceWithNewUOM(1200,1600));
      LibraryKitting.CreateBOMComponentLine(subBOMComponentItem,BOMComponent.Type::Resource,childResource."No.",
        1.5,childResource."Base Unit of Measure",TRUE);
      childItem.GET(LibraryKitting.CreateItemWithNewUOM(73,99));
      LibraryKitting.CreateBOMComponentLine(subBOMComponentItem,BOMComponent.Type::Item,childItem."No.",
        19,childItem."Base Unit of Measure",FALSE);
      LibraryKitting.CreateBOMComponentLine(BOMcomponentItem,BOMComponent.Type::Item,subBOMComponentItem."No.",
        66,subBOMComponentItem."Base Unit of Measure",FALSE);
      parentItem.GET(LibraryKitting.CreateItemWithNewUOM(50,70));
      LibraryKitting.CreateBOMComponentLine(parentItem,BOMComponent.Type::Item,BOMcomponentItem."No.",
        3,BOMcomponentItem."Base Unit of Measure",FALSE);
      AsmHeader.GET(AsmHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parentItem."No.",150));
      calcAndValidate(AsmHeader,150 * 3 * 5,0,0,0); // 150*3*(245*10+66*19*73),0,150*3*(5*17+66*1.5*1200));
      ASSERTERROR ERROR('') // cleanup
    END;

    [Test]
    PROCEDURE BUG206635OverheadTwice@10();
    VAR
      parentItem@1003 : Record 27;
      AsmHeader@1000 : Record 900;
      resource@1004 : Record 156;
      BOMComponent@1001 : Record 90;
    BEGIN
      Initialize;
      parentItem.GET(LibraryKitting.CreateItemWithNewUOM(5,7));
      parentItem.VALIDATE("Costing Method",parentItem."Costing Method"::Average);
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(10,20));
      resource.VALIDATE("Direct Unit Cost",8);
      resource.VALIDATE("Unit Cost",10);
      resource.MODIFY;
      LibraryKitting.CreateBOMComponentLine(
        parentItem,BOMComponent.Type::Resource,resource."No.",10,resource."Base Unit of Measure",TRUE);
      AsmHeader.GET(AsmHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parentItem."No.",1));
      AsmHeader.UpdateUnitCost;
      Assert.AreEqual(100,AsmHeader."Cost Amount",
        STRSUBSTNO('Order Cost amount is wrong, expected %1 got %2',100,AsmHeader."Cost Amount"))
    END;

    [Test]
    PROCEDURE BUG236628Overheadmissiningsum@17();
    VAR
      parentItem@1002 : Record 27;
      AsmHeader@1001 : Record 900;
      resource@1000 : Record 156;
      BOMComponent@1003 : Record 90;
    BEGIN
      Initialize;
      // Resource Overhead is not summed up in Statistics
      parentItem.GET(LibraryKitting.CreateItemWithNewUOM(5,7));
      parentItem.VALIDATE("Costing Method",parentItem."Costing Method"::Average);
      resource.GET(LibraryKitting.CreateResourceWithNewUOM(10,20));
      resource.VALIDATE("Direct Unit Cost",10);
      resource.VALIDATE("Unit Cost",15);
      resource.MODIFY;
      LibraryKitting.CreateBOMComponentLine(
        parentItem,BOMComponent.Type::Resource,resource."No.",1,resource."Base Unit of Measure",TRUE);
      AsmHeader.GET(AsmHeader."Document Type"::Order,LibraryKitting.CreateOrder(WorkDate2,parentItem."No.",1));
      calcAndValidate(AsmHeader,0,10,5,0);
      ASSERTERROR ERROR('') // cleanup
    END;

    [Test]
    PROCEDURE AssemblyOutputCostACY@6();
    VAR
      ComponentItem@1001 : Record 27;
      AssemblyItem@1002 : Record 27;
      ItemLedgerEntry@1000 : Record 32;
      CurrExchRate@1011 : Decimal;
    BEGIN
      // [FEATURE] [ACY]
      // [SCENARIO 382120] Assembly output cost should be posted in both local currency and additional reporting currency when ACY is configured

      Initialize;
      LibraryInventory.SetAutomaticCostPosting(FALSE);

      // [GIVEN] Set additional reporting currency with exchange rate = "X"
      CurrExchRate := UpdateACYCode;

      // [GIVEN] Create an assembled item "I" with one component. Standard cost of the component is "C"
      CreateItem(AssemblyItem,AssemblyItem."Costing Method"::Standard,AssemblyItem."Replenishment System"::Assembly,0);
      CreateItem(
        ComponentItem,ComponentItem."Costing Method"::Standard,ComponentItem."Replenishment System"::Purchase,
        LibraryRandom.RandDecInRange(100,200,2));

      PostPositiveAdjustment(ComponentItem."No.",1);
      CreateAssemblyListComponent(AssemblyItem."No.",ComponentItem."No.",1);

      // [GIVEN] Calculate standard cost for item "I"
      CalculateAssemblyStandardCost(AssemblyItem."No.");

      // [GIVEN] Create and post assembly order for item "I"
      CreateAndPostAssemblyHeader(AssemblyItem."No.",1,WorkDate2);

      // [WHEN] Run "Adjust Cost - Item Entries"
      LibraryCosting.AdjustCostItemEntries(AssemblyItem."No.",'');

      // [THEN] Assembly output entry has "Cost Amount (Actual)" = "C", "Cost Amount (Actual) (ACY)" = "C" * "X"
      VerifyOutputCostAmount(
        AssemblyItem."No.",ItemLedgerEntry."Entry Type"::"Assembly Output",
        ComponentItem."Standard Cost",ComponentItem."Standard Cost" * CurrExchRate);
    END;

    LOCAL PROCEDURE Initialize@50();
    BEGIN
      LibrarySetupStorage.Restore;

      IF Initialized THEN
        EXIT;

      Initialized := TRUE;
      COMMIT;

      LibrarySetupStorage.Save(DATABASE::"General Ledger Setup");
      LibrarySetupStorage.Save(DATABASE::"Inventory Setup");
    END;

    LOCAL PROCEDURE calcAndValidate@4(VAR AsmHeader@1000 : Record 900;materialCost@1001 : Decimal;resourceCost@1002 : Decimal;resourceOverheadCost@1003 : Decimal;AssemblyOverhead@1011 : Decimal);
    VAR
      calcStdCost@1005 : Codeunit 5812;
      ExpCost@1004 : ARRAY [5] OF Decimal;
      RowIdx@1006 : ',MatCost,ResCost,ResOvhd,AsmOvhd,Total';
    BEGIN
      calcStdCost.CalculateAssemblyCostExp(AsmHeader,ExpCost);

      Assert.IsFalse(
        (ExpCost[RowIdx::MatCost] <> materialCost) OR
        (ExpCost[RowIdx::ResCost] <> resourceCost) OR
        (ExpCost[RowIdx::AsmOvhd] <> AssemblyOverhead) OR
        (ExpCost[RowIdx::ResOvhd] <> resourceOverheadCost),
        STRSUBSTNO('Unexpected costs [Material x Resource x Resource Overhead x Overhead] calculated. ' +
          'Expected: [%1 x %2 x %3 x %4], got: [%5 x %6 x %7 x %8]',
          materialCost,resourceCost,resourceOverheadCost,AssemblyOverhead,
          ExpCost[RowIdx::MatCost],ExpCost[RowIdx::ResCost],ExpCost[RowIdx::ResOvhd],ExpCost[RowIdx::AsmOvhd]))
    END;

    LOCAL PROCEDURE CalculateAssemblyStandardCost@27(ItemNo@1001 : Code[20]);
    VAR
      CalculateStdCost@1000 : Codeunit 5812;
    BEGIN
      CalculateStdCost.CalcItem(ItemNo,TRUE);
    END;

    LOCAL PROCEDURE CreateAndPostAssemblyHeader@34(ItemNo@1001 : Code[20];Qty@1002 : Decimal;DueDate@1003 : Date);
    VAR
      AssemblyHeader@1000 : Record 900;
    BEGIN
      LibraryAssembly.CreateAssemblyHeader(AssemblyHeader,DueDate,ItemNo,'',Qty,'');
      LibraryAssembly.PostAssemblyHeader(AssemblyHeader,'');
    END;

    LOCAL PROCEDURE CreateAssemblyListComponent@29(AssemblyItemNo@1001 : Code[20];ComponentItemNo@1002 : Code[20];QtyPer@1003 : Decimal);
    VAR
      BOMComponent@1000 : Record 90;
    BEGIN
      LibraryAssembly.CreateAssemblyListComponent(BOMComponent.Type::Item,ComponentItemNo,AssemblyItemNo,'',0,QtyPer,TRUE);
    END;

    LOCAL PROCEDURE CreateItem@25(VAR Item@1000 : Record 27;CostingMethod@1001 : Option;ReplenishmentSystem@1002 : Option;StandardCostAmt@1003 : Decimal);
    BEGIN
      LibraryInventory.CreateItem(Item);
      Item.VALIDATE("Costing Method",CostingMethod);
      Item.VALIDATE("Replenishment System",ReplenishmentSystem);
      Item.VALIDATE("Standard Cost",StandardCostAmt);
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE PostPositiveAdjustment@24(ItemNo@1003 : Code[20];Qty@1004 : Decimal);
    VAR
      ItemJournalTemplate@1002 : Record 82;
      ItemJournalBatch@1001 : Record 233;
      ItemJournalLine@1000 : Record 83;
    BEGIN
      LibraryInventory.SelectItemJournalTemplateName(ItemJournalTemplate,ItemJournalTemplate.Type::Item);
      LibraryInventory.SelectItemJournalBatchName(ItemJournalBatch,ItemJournalTemplate.Type::Item,ItemJournalTemplate.Name);
      LibraryInventory.CreateItemJournalLine(
        ItemJournalLine,ItemJournalTemplate.Name,ItemJournalBatch.Name,ItemJournalLine."Entry Type"::"Positive Adjmt.",ItemNo,Qty);
      LibraryInventory.PostItemJournalLine(ItemJournalTemplate.Name,ItemJournalBatch.Name);
    END;

    LOCAL PROCEDURE UpdateACYCode@22() : Decimal;
    VAR
      Currency@1003 : Record 4;
      CurrExchRate@1002 : Decimal;
    BEGIN
      LibraryERM.CreateCurrency(Currency);
      CurrExchRate := LibraryRandom.RandDecInRange(10,20,2);
      LibraryERM.CreateExchangeRate(Currency.Code,WORKDATE,CurrExchRate,CurrExchRate);
      LibraryERM.SetAddReportingCurrency(Currency.Code);

      EXIT(CurrExchRate);
    END;

    LOCAL PROCEDURE ValidateHeaderCostAmount@19(AsmHeader@1000 : Record 900;Expected@1001 : Decimal);
    BEGIN
      WITH AsmHeader DO
        Assert.AreEqual(Expected,"Cost Amount",
          STRSUBSTNO('Item %1 Unitcost is %2 expected %3',"No.","Cost Amount",Expected));
    END;

    LOCAL PROCEDURE ValidateStandardCost@15(ItemNo@1001 : Code[20];Expected@1000 : Decimal);
    VAR
      TestItem@1002 : Record 27;
    BEGIN
      WITH TestItem DO BEGIN
        GET(ItemNo);
        Assert.AreEqual("Standard Cost",Expected,
          STRSUBSTNO('Standard cost is wrong for %1, Expected %2 got %3',"No.",Expected,"Standard Cost"))
      END;
    END;

    LOCAL PROCEDURE ValidateUnitCost@13(ItemNo@1000 : Code[20];Expected@1001 : Decimal);
    VAR
      TestItem@1002 : Record 27;
    BEGIN
      WITH TestItem DO BEGIN
        GET(ItemNo);
        Assert.AreEqual(Expected,"Unit Cost",
          STRSUBSTNO('Item %1 Unitcost is %2 expected %3',"No.","Unit Cost",Expected));
      END;
    END;

    LOCAL PROCEDURE VerifyOutputCostAmount@36(ItemNo@1001 : Code[20];EntryType@1002 : Option;ExpectedCostLCY@1003 : Decimal;ExpectedCostACY@1004 : Decimal);
    VAR
      ItemLedgerEntry@1000 : Record 32;
      Currency@1005 : Record 4;
      GeneralLedgerSetup@1006 : Record 98;
    BEGIN
      GeneralLedgerSetup.GET;
      Currency.GET(GeneralLedgerSetup."Additional Reporting Currency");

      WITH ItemLedgerEntry DO BEGIN
        SETRANGE("Item No.",ItemNo);
        SETRANGE("Entry Type",EntryType);
        FINDFIRST;
        CALCFIELDS("Cost Amount (Actual)","Cost Amount (Actual) (ACY)");
        TESTFIELD("Cost Amount (Actual)",ExpectedCostLCY);
        TESTFIELD("Cost Amount (Actual) (ACY)",ROUND(ExpectedCostACY,Currency."Amount Rounding Precision"));
      END;
    END;

    [ModalPageHandler]
    PROCEDURE AvailabilityWindowHandler@48(VAR AsmAvailability@1000 : Page 908;VAR Response@1001 : Action);
    BEGIN
      Response := ACTION::Yes; // always confirm
    END;

    BEGIN
    {
      // [FEATURE] [Assembly] [SCM]
    }
    END.
  }
}

